
F411_Verita_Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fc70  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0002d714  0800fe10  0800fe10  0001fe10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0803d524  0803d524  00050420  2**0
                  CONTENTS
  4 .ARM          00000008  0803d524  0803d524  0004d524  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0803d52c  0803d52c  00050420  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0803d52c  0803d52c  0004d52c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0803d530  0803d530  0004d530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000420  20000000  0803d534  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004b4  20000420  0803d954  00050420  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200008d4  0803d954  000508d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00050420  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018b76  00000000  00000000  00050450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003376  00000000  00000000  00068fc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015a8  00000000  00000000  0006c340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001428  00000000  00000000  0006d8e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a32a  00000000  00000000  0006ed10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019da5  00000000  00000000  0008903a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a43a  00000000  00000000  000a2ddf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013d219  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ce0  00000000  00000000  0013d26c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000420 	.word	0x20000420
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800fdf8 	.word	0x0800fdf8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000424 	.word	0x20000424
 80001dc:	0800fdf8 	.word	0x0800fdf8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b974 	b.w	8000f98 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468e      	mov	lr, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14d      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4694      	mov	ip, r2
 8000cda:	d969      	bls.n	8000db0 <__udivmoddi4+0xe8>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b152      	cbz	r2, 8000cf8 <__udivmoddi4+0x30>
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	f1c2 0120 	rsb	r1, r2, #32
 8000cea:	fa20 f101 	lsr.w	r1, r0, r1
 8000cee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cf6:	4094      	lsls	r4, r2
 8000cf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cfc:	0c21      	lsrs	r1, r4, #16
 8000cfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000d02:	fa1f f78c 	uxth.w	r7, ip
 8000d06:	fb08 e316 	mls	r3, r8, r6, lr
 8000d0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d0e:	fb06 f107 	mul.w	r1, r6, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1e:	f080 811f 	bcs.w	8000f60 <__udivmoddi4+0x298>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 811c 	bls.w	8000f60 <__udivmoddi4+0x298>
 8000d28:	3e02      	subs	r6, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a5b      	subs	r3, r3, r1
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d34:	fb08 3310 	mls	r3, r8, r0, r3
 8000d38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d3c:	fb00 f707 	mul.w	r7, r0, r7
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x92>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4c:	f080 810a 	bcs.w	8000f64 <__udivmoddi4+0x29c>
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	f240 8107 	bls.w	8000f64 <__udivmoddi4+0x29c>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5e:	1be4      	subs	r4, r4, r7
 8000d60:	2600      	movs	r6, #0
 8000d62:	b11d      	cbz	r5, 8000d6c <__udivmoddi4+0xa4>
 8000d64:	40d4      	lsrs	r4, r2
 8000d66:	2300      	movs	r3, #0
 8000d68:	e9c5 4300 	strd	r4, r3, [r5]
 8000d6c:	4631      	mov	r1, r6
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0xc2>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	f000 80ef 	beq.w	8000f5a <__udivmoddi4+0x292>
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d82:	4630      	mov	r0, r6
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f683 	clz	r6, r3
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	d14a      	bne.n	8000e28 <__udivmoddi4+0x160>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xd4>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80f9 	bhi.w	8000f8e <__udivmoddi4+0x2c6>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	469e      	mov	lr, r3
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d0e0      	beq.n	8000d6c <__udivmoddi4+0xa4>
 8000daa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dae:	e7dd      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000db0:	b902      	cbnz	r2, 8000db4 <__udivmoddi4+0xec>
 8000db2:	deff      	udf	#255	; 0xff
 8000db4:	fab2 f282 	clz	r2, r2
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	f040 8092 	bne.w	8000ee2 <__udivmoddi4+0x21a>
 8000dbe:	eba1 010c 	sub.w	r1, r1, ip
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f fe8c 	uxth.w	lr, ip
 8000dca:	2601      	movs	r6, #1
 8000dcc:	0c20      	lsrs	r0, r4, #16
 8000dce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dda:	fb0e f003 	mul.w	r0, lr, r3
 8000dde:	4288      	cmp	r0, r1
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x12c>
 8000de2:	eb1c 0101 	adds.w	r1, ip, r1
 8000de6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x12a>
 8000dec:	4288      	cmp	r0, r1
 8000dee:	f200 80cb 	bhi.w	8000f88 <__udivmoddi4+0x2c0>
 8000df2:	4643      	mov	r3, r8
 8000df4:	1a09      	subs	r1, r1, r0
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000e00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e04:	fb0e fe00 	mul.w	lr, lr, r0
 8000e08:	45a6      	cmp	lr, r4
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x156>
 8000e0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e14:	d202      	bcs.n	8000e1c <__udivmoddi4+0x154>
 8000e16:	45a6      	cmp	lr, r4
 8000e18:	f200 80bb 	bhi.w	8000f92 <__udivmoddi4+0x2ca>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	eba4 040e 	sub.w	r4, r4, lr
 8000e22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e26:	e79c      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000e28:	f1c6 0720 	rsb	r7, r6, #32
 8000e2c:	40b3      	lsls	r3, r6
 8000e2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e36:	fa20 f407 	lsr.w	r4, r0, r7
 8000e3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3e:	431c      	orrs	r4, r3
 8000e40:	40f9      	lsrs	r1, r7
 8000e42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e46:	fa00 f306 	lsl.w	r3, r0, r6
 8000e4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e4e:	0c20      	lsrs	r0, r4, #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fb09 1118 	mls	r1, r9, r8, r1
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e60:	4288      	cmp	r0, r1
 8000e62:	fa02 f206 	lsl.w	r2, r2, r6
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x1b8>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e70:	f080 8088 	bcs.w	8000f84 <__udivmoddi4+0x2bc>
 8000e74:	4288      	cmp	r0, r1
 8000e76:	f240 8085 	bls.w	8000f84 <__udivmoddi4+0x2bc>
 8000e7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e88:	fb09 1110 	mls	r1, r9, r0, r1
 8000e8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e94:	458e      	cmp	lr, r1
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x1e2>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea0:	d26c      	bcs.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea2:	458e      	cmp	lr, r1
 8000ea4:	d96a      	bls.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4461      	add	r1, ip
 8000eaa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eae:	fba0 9402 	umull	r9, r4, r0, r2
 8000eb2:	eba1 010e 	sub.w	r1, r1, lr
 8000eb6:	42a1      	cmp	r1, r4
 8000eb8:	46c8      	mov	r8, r9
 8000eba:	46a6      	mov	lr, r4
 8000ebc:	d356      	bcc.n	8000f6c <__udivmoddi4+0x2a4>
 8000ebe:	d053      	beq.n	8000f68 <__udivmoddi4+0x2a0>
 8000ec0:	b15d      	cbz	r5, 8000eda <__udivmoddi4+0x212>
 8000ec2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ec6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eca:	fa01 f707 	lsl.w	r7, r1, r7
 8000ece:	fa22 f306 	lsr.w	r3, r2, r6
 8000ed2:	40f1      	lsrs	r1, r6
 8000ed4:	431f      	orrs	r7, r3
 8000ed6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eda:	2600      	movs	r6, #0
 8000edc:	4631      	mov	r1, r6
 8000ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee2:	f1c2 0320 	rsb	r3, r2, #32
 8000ee6:	40d8      	lsrs	r0, r3
 8000ee8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eec:	fa21 f303 	lsr.w	r3, r1, r3
 8000ef0:	4091      	lsls	r1, r2
 8000ef2:	4301      	orrs	r1, r0
 8000ef4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef8:	fa1f fe8c 	uxth.w	lr, ip
 8000efc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f00:	fb07 3610 	mls	r6, r7, r0, r3
 8000f04:	0c0b      	lsrs	r3, r1, #16
 8000f06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f0e:	429e      	cmp	r6, r3
 8000f10:	fa04 f402 	lsl.w	r4, r4, r2
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x260>
 8000f16:	eb1c 0303 	adds.w	r3, ip, r3
 8000f1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f1e:	d22f      	bcs.n	8000f80 <__udivmoddi4+0x2b8>
 8000f20:	429e      	cmp	r6, r3
 8000f22:	d92d      	bls.n	8000f80 <__udivmoddi4+0x2b8>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4463      	add	r3, ip
 8000f28:	1b9b      	subs	r3, r3, r6
 8000f2a:	b289      	uxth	r1, r1
 8000f2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f30:	fb07 3316 	mls	r3, r7, r6, r3
 8000f34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f38:	fb06 f30e 	mul.w	r3, r6, lr
 8000f3c:	428b      	cmp	r3, r1
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x28a>
 8000f40:	eb1c 0101 	adds.w	r1, ip, r1
 8000f44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f48:	d216      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d914      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4e:	3e02      	subs	r6, #2
 8000f50:	4461      	add	r1, ip
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f58:	e738      	b.n	8000dcc <__udivmoddi4+0x104>
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e705      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e3      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6f8      	b.n	8000d5a <__udivmoddi4+0x92>
 8000f68:	454b      	cmp	r3, r9
 8000f6a:	d2a9      	bcs.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7a3      	b.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f78:	4646      	mov	r6, r8
 8000f7a:	e7ea      	b.n	8000f52 <__udivmoddi4+0x28a>
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	e794      	b.n	8000eaa <__udivmoddi4+0x1e2>
 8000f80:	4640      	mov	r0, r8
 8000f82:	e7d1      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f84:	46d0      	mov	r8, sl
 8000f86:	e77b      	b.n	8000e80 <__udivmoddi4+0x1b8>
 8000f88:	3b02      	subs	r3, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	e732      	b.n	8000df4 <__udivmoddi4+0x12c>
 8000f8e:	4630      	mov	r0, r6
 8000f90:	e709      	b.n	8000da6 <__udivmoddi4+0xde>
 8000f92:	4464      	add	r4, ip
 8000f94:	3802      	subs	r0, #2
 8000f96:	e742      	b.n	8000e1e <__udivmoddi4+0x156>

08000f98 <__aeabi_idiv0>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	0000      	movs	r0, r0
	...

08000fa0 <INA219_INIT_Calibrate>:
	HAL_I2C_Mem_Write(hi2c, dv_addr, INA219_RG_Config, I2C_MEMADD_SIZE_8BIT, &resetx, 2, 10);

}

INA219_Conf_Strc configura;
void INA219_INIT_Calibrate(I2C_HandleTypeDef *hi2c,uint8_t dv_addr){
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b08a      	sub	sp, #40	; 0x28
 8000fa4:	af04      	add	r7, sp, #16
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	460b      	mov	r3, r1
 8000faa:	70fb      	strb	r3, [r7, #3]
	 * @param : hi2c - HAL_I2C used to read
	 * @param : dv_addr - address of INA219 device in the busline
	 * */

	////// -------------------- Configuration -------------------------------------
	configura.INA219CF.reset = 0;
 8000fac:	4a52      	ldr	r2, [pc, #328]	; (80010f8 <INA219_INIT_Calibrate+0x158>)
 8000fae:	7853      	ldrb	r3, [r2, #1]
 8000fb0:	f36f 13c7 	bfc	r3, #7, #1
 8000fb4:	7053      	strb	r3, [r2, #1]
	configura.INA219CF.BRNG = BRNG_FSR_32V;
 8000fb6:	4a50      	ldr	r2, [pc, #320]	; (80010f8 <INA219_INIT_Calibrate+0x158>)
 8000fb8:	7853      	ldrb	r3, [r2, #1]
 8000fba:	f043 0320 	orr.w	r3, r3, #32
 8000fbe:	7053      	strb	r3, [r2, #1]
	configura.INA219CF.PGA = PGA_GainD4_160mv;
 8000fc0:	4a4d      	ldr	r2, [pc, #308]	; (80010f8 <INA219_INIT_Calibrate+0x158>)
 8000fc2:	7853      	ldrb	r3, [r2, #1]
 8000fc4:	2102      	movs	r1, #2
 8000fc6:	f361 03c4 	bfi	r3, r1, #3, #2
 8000fca:	7053      	strb	r3, [r2, #1]
	configura.INA219CF.BADC = ADCI_12bit_532uS;
 8000fcc:	4a4a      	ldr	r2, [pc, #296]	; (80010f8 <INA219_INIT_Calibrate+0x158>)
 8000fce:	8813      	ldrh	r3, [r2, #0]
 8000fd0:	2103      	movs	r1, #3
 8000fd2:	f361 13ca 	bfi	r3, r1, #7, #4
 8000fd6:	8013      	strh	r3, [r2, #0]
	configura.INA219CF.SADC = ADCI_12bit_532uS;
 8000fd8:	4a47      	ldr	r2, [pc, #284]	; (80010f8 <INA219_INIT_Calibrate+0x158>)
 8000fda:	7813      	ldrb	r3, [r2, #0]
 8000fdc:	2103      	movs	r1, #3
 8000fde:	f361 03c6 	bfi	r3, r1, #3, #4
 8000fe2:	7013      	strb	r3, [r2, #0]
	configura.INA219CF.Mode = INAM_ShuntBusV_Continuous;
 8000fe4:	4a44      	ldr	r2, [pc, #272]	; (80010f8 <INA219_INIT_Calibrate+0x158>)
 8000fe6:	7813      	ldrb	r3, [r2, #0]
 8000fe8:	f043 0307 	orr.w	r3, r3, #7
 8000fec:	7013      	strb	r3, [r2, #0]

	uint8_t confictor_si2c[2] = {configura.D8[1], configura.D8[0]};
 8000fee:	4b42      	ldr	r3, [pc, #264]	; (80010f8 <INA219_INIT_Calibrate+0x158>)
 8000ff0:	785b      	ldrb	r3, [r3, #1]
 8000ff2:	753b      	strb	r3, [r7, #20]
 8000ff4:	4b40      	ldr	r3, [pc, #256]	; (80010f8 <INA219_INIT_Calibrate+0x158>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	757b      	strb	r3, [r7, #21]
	HAL_I2C_Mem_Write(hi2c, dv_addr, INA219_RG_Config, I2C_MEMADD_SIZE_8BIT, &confictor_si2c[0], 2, 10);
 8000ffa:	78fb      	ldrb	r3, [r7, #3]
 8000ffc:	b299      	uxth	r1, r3
 8000ffe:	230a      	movs	r3, #10
 8001000:	9302      	str	r3, [sp, #8]
 8001002:	2302      	movs	r3, #2
 8001004:	9301      	str	r3, [sp, #4]
 8001006:	f107 0314 	add.w	r3, r7, #20
 800100a:	9300      	str	r3, [sp, #0]
 800100c:	2301      	movs	r3, #1
 800100e:	2200      	movs	r2, #0
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f006 fd61 	bl	8007ad8 <HAL_I2C_Mem_Write>
		uint16_t U16;
	}calibrator;

	// float current_LSB = INA219_MAX_Expect_Current / 32768.0; // 2^15
	//calibrator.U16 = (int16_t)(trunc( 0.04096 / (current_LSB * INA219_R_SHUNT_Val))) << 1;
	calibrator.U16 = trunc( 0.04096 / (current_LSB * INA219_R_SHUNT_Val));
 8001016:	4b39      	ldr	r3, [pc, #228]	; (80010fc <INA219_INIT_Calibrate+0x15c>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4618      	mov	r0, r3
 800101c:	f7ff fa9c 	bl	8000558 <__aeabi_f2d>
 8001020:	a32d      	add	r3, pc, #180	; (adr r3, 80010d8 <INA219_INIT_Calibrate+0x138>)
 8001022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001026:	f7ff faef 	bl	8000608 <__aeabi_dmul>
 800102a:	4602      	mov	r2, r0
 800102c:	460b      	mov	r3, r1
 800102e:	a12c      	add	r1, pc, #176	; (adr r1, 80010e0 <INA219_INIT_Calibrate+0x140>)
 8001030:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001034:	f7ff fc12 	bl	800085c <__aeabi_ddiv>
 8001038:	4602      	mov	r2, r0
 800103a:	460b      	mov	r3, r1
 800103c:	ec43 2b17 	vmov	d7, r2, r3
 8001040:	eeb0 0a47 	vmov.f32	s0, s14
 8001044:	eef0 0a67 	vmov.f32	s1, s15
 8001048:	f00e fe62 	bl	800fd10 <trunc>
 800104c:	ec53 2b10 	vmov	r2, r3, d0
 8001050:	4610      	mov	r0, r2
 8001052:	4619      	mov	r1, r3
 8001054:	f7ff fdb0 	bl	8000bb8 <__aeabi_d2uiz>
 8001058:	4603      	mov	r3, r0
 800105a:	b29b      	uxth	r3, r3
 800105c:	823b      	strh	r3, [r7, #16]
#ifdef calibrate_EQ6
	calibrator.U16 = trunc((calibrator.U16 * MeaShuntCurrent_ExtMeter) / INA219_Current_Raw);
 800105e:	8a3b      	ldrh	r3, [r7, #16]
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff fa67 	bl	8000534 <__aeabi_i2d>
 8001066:	a320      	add	r3, pc, #128	; (adr r3, 80010e8 <INA219_INIT_Calibrate+0x148>)
 8001068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800106c:	f7ff facc 	bl	8000608 <__aeabi_dmul>
 8001070:	4602      	mov	r2, r0
 8001072:	460b      	mov	r3, r1
 8001074:	4610      	mov	r0, r2
 8001076:	4619      	mov	r1, r3
 8001078:	a31d      	add	r3, pc, #116	; (adr r3, 80010f0 <INA219_INIT_Calibrate+0x150>)
 800107a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800107e:	f7ff fbed 	bl	800085c <__aeabi_ddiv>
 8001082:	4602      	mov	r2, r0
 8001084:	460b      	mov	r3, r1
 8001086:	ec43 2b17 	vmov	d7, r2, r3
 800108a:	eeb0 0a47 	vmov.f32	s0, s14
 800108e:	eef0 0a67 	vmov.f32	s1, s15
 8001092:	f00e fe3d 	bl	800fd10 <trunc>
 8001096:	ec53 2b10 	vmov	r2, r3, d0
 800109a:	4610      	mov	r0, r2
 800109c:	4619      	mov	r1, r3
 800109e:	f7ff fd8b 	bl	8000bb8 <__aeabi_d2uiz>
 80010a2:	4603      	mov	r3, r0
 80010a4:	b29b      	uxth	r3, r3
 80010a6:	823b      	strh	r3, [r7, #16]
#endif
	uint8_t calibrator_si2c[2] = {calibrator.U8[1], calibrator.U8[0]}; //// switch byte to send high order first in I2C
 80010a8:	7c7b      	ldrb	r3, [r7, #17]
 80010aa:	733b      	strb	r3, [r7, #12]
 80010ac:	7c3b      	ldrb	r3, [r7, #16]
 80010ae:	737b      	strb	r3, [r7, #13]
	////  ex calibrator(I = 3A, 0.1Rshunt) = 4473 = 0x1179

	HAL_I2C_Mem_Write(hi2c, dv_addr, INA219_RG_Calibra, I2C_MEMADD_SIZE_8BIT, &calibrator_si2c[0], 2, 10);
 80010b0:	78fb      	ldrb	r3, [r7, #3]
 80010b2:	b299      	uxth	r1, r3
 80010b4:	230a      	movs	r3, #10
 80010b6:	9302      	str	r3, [sp, #8]
 80010b8:	2302      	movs	r3, #2
 80010ba:	9301      	str	r3, [sp, #4]
 80010bc:	f107 030c 	add.w	r3, r7, #12
 80010c0:	9300      	str	r3, [sp, #0]
 80010c2:	2301      	movs	r3, #1
 80010c4:	2205      	movs	r2, #5
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f006 fd06 	bl	8007ad8 <HAL_I2C_Mem_Write>

}
 80010cc:	bf00      	nop
 80010ce:	3718      	adds	r7, #24
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	f3af 8000 	nop.w
 80010d8:	9999999a 	.word	0x9999999a
 80010dc:	3fb99999 	.word	0x3fb99999
 80010e0:	88e368f1 	.word	0x88e368f1
 80010e4:	3fa4f8b5 	.word	0x3fa4f8b5
 80010e8:	9999999a 	.word	0x9999999a
 80010ec:	3fe99999 	.word	0x3fe99999
 80010f0:	9999999a 	.word	0x9999999a
 80010f4:	40059999 	.word	0x40059999
 80010f8:	20000440 	.word	0x20000440
 80010fc:	20000000 	.word	0x20000000

08001100 <INA219Read_BusV>:
	uint8_t calibrator_si2c[2] = {calibrator.U8[1], calibrator.U8[0]}; //// switch byte to send high order first in I2C
	HAL_I2C_Mem_Write(hi2c, dv_addr, INA219_RG_Calibra, I2C_MEMADD_SIZE_8BIT, &calibrator_si2c[0], 2, 10);

}

uint16_t INA219Read_BusV(I2C_HandleTypeDef *hi2c,uint8_t dv_addr){
 8001100:	b580      	push	{r7, lr}
 8001102:	b086      	sub	sp, #24
 8001104:	af04      	add	r7, sp, #16
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	460b      	mov	r3, r1
 800110a:	70fb      	strb	r3, [r7, #3]
	//	if(INACBffr[2] & 0x01){ // still unsure how to deal with CNVR / OVF
//
//	}


	INACBffr.D32 = 0; //// buffer clear
 800110c:	4b0e      	ldr	r3, [pc, #56]	; (8001148 <INA219Read_BusV+0x48>)
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
	HAL_I2C_Mem_Read(hi2c, dv_addr, INA219_RG_BusV, I2C_MEMADD_SIZE_8BIT, &INACBffr.D8[1], 2, 10);
 8001112:	78fb      	ldrb	r3, [r7, #3]
 8001114:	b299      	uxth	r1, r3
 8001116:	230a      	movs	r3, #10
 8001118:	9302      	str	r3, [sp, #8]
 800111a:	2302      	movs	r3, #2
 800111c:	9301      	str	r3, [sp, #4]
 800111e:	4b0b      	ldr	r3, [pc, #44]	; (800114c <INA219Read_BusV+0x4c>)
 8001120:	9300      	str	r3, [sp, #0]
 8001122:	2301      	movs	r3, #1
 8001124:	2202      	movs	r2, #2
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f006 fdd0 	bl	8007ccc <HAL_I2C_Mem_Read>

	return ((INACBffr.D16[1] | INACBffr.D16[0]) >> 3) * 4;
 800112c:	4b06      	ldr	r3, [pc, #24]	; (8001148 <INA219Read_BusV+0x48>)
 800112e:	885a      	ldrh	r2, [r3, #2]
 8001130:	4b05      	ldr	r3, [pc, #20]	; (8001148 <INA219Read_BusV+0x48>)
 8001132:	881b      	ldrh	r3, [r3, #0]
 8001134:	4313      	orrs	r3, r2
 8001136:	b29b      	uxth	r3, r3
 8001138:	08db      	lsrs	r3, r3, #3
 800113a:	b29b      	uxth	r3, r3
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	b29b      	uxth	r3, r3
}
 8001140:	4618      	mov	r0, r3
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	2000043c 	.word	0x2000043c
 800114c:	2000043d 	.word	0x2000043d

08001150 <INA219Read_Current>:

uint16_t INA219Read_Current(I2C_HandleTypeDef *hi2c,uint8_t dv_addr){
 8001150:	b580      	push	{r7, lr}
 8001152:	b086      	sub	sp, #24
 8001154:	af04      	add	r7, sp, #16
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	460b      	mov	r3, r1
 800115a:	70fb      	strb	r3, [r7, #3]
	 * @param : hi2c - HAL_I2C used to read
	 * @param : dv_addr - address of INA219 device in the busline
	 * @Retval: current in mA
	 * @ex.
	 * */
	INACBffr.D32 = 0; //// buffer clear
 800115c:	4b0c      	ldr	r3, [pc, #48]	; (8001190 <INA219Read_Current+0x40>)
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
	HAL_I2C_Mem_Read(hi2c, dv_addr, INA219_RG_Current, I2C_MEMADD_SIZE_8BIT, &INACBffr.D8[1], 2, 10);
 8001162:	78fb      	ldrb	r3, [r7, #3]
 8001164:	b299      	uxth	r1, r3
 8001166:	230a      	movs	r3, #10
 8001168:	9302      	str	r3, [sp, #8]
 800116a:	2302      	movs	r3, #2
 800116c:	9301      	str	r3, [sp, #4]
 800116e:	4b09      	ldr	r3, [pc, #36]	; (8001194 <INA219Read_Current+0x44>)
 8001170:	9300      	str	r3, [sp, #0]
 8001172:	2301      	movs	r3, #1
 8001174:	2204      	movs	r2, #4
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f006 fda8 	bl	8007ccc <HAL_I2C_Mem_Read>

	return INACBffr.D16[1] | INACBffr.D16[0];
 800117c:	4b04      	ldr	r3, [pc, #16]	; (8001190 <INA219Read_Current+0x40>)
 800117e:	885a      	ldrh	r2, [r3, #2]
 8001180:	4b03      	ldr	r3, [pc, #12]	; (8001190 <INA219Read_Current+0x40>)
 8001182:	881b      	ldrh	r3, [r3, #0]
 8001184:	4313      	orrs	r3, r2
 8001186:	b29b      	uxth	r3, r3
}
 8001188:	4618      	mov	r0, r3
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	2000043c 	.word	0x2000043c
 8001194:	2000043d 	.word	0x2000043d

08001198 <INA219Read_ShuntV>:

float INA219Read_ShuntV(I2C_HandleTypeDef *hi2c,uint8_t dv_addr){
 8001198:	b580      	push	{r7, lr}
 800119a:	b088      	sub	sp, #32
 800119c:	af04      	add	r7, sp, #16
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	460b      	mov	r3, r1
 80011a2:	70fb      	strb	r3, [r7, #3]
	 * @param : hi2c - HAL_I2C used to read
	 * @param : dv_addr - address of INA219 device in the busline
	 * @Retval: shunt voltage in mV (.2f)
	 * @ex.
	 * */
	INACBffr.D32 = 0; //// buffer clear
 80011a4:	4b17      	ldr	r3, [pc, #92]	; (8001204 <INA219Read_ShuntV+0x6c>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]
	HAL_I2C_Mem_Read(hi2c, dv_addr, INA219_RG_ShuntV, I2C_MEMADD_SIZE_8BIT, &INACBffr.D8[1], 2, 10);
 80011aa:	78fb      	ldrb	r3, [r7, #3]
 80011ac:	b299      	uxth	r1, r3
 80011ae:	230a      	movs	r3, #10
 80011b0:	9302      	str	r3, [sp, #8]
 80011b2:	2302      	movs	r3, #2
 80011b4:	9301      	str	r3, [sp, #4]
 80011b6:	4b14      	ldr	r3, [pc, #80]	; (8001208 <INA219Read_ShuntV+0x70>)
 80011b8:	9300      	str	r3, [sp, #0]
 80011ba:	2301      	movs	r3, #1
 80011bc:	2201      	movs	r2, #1
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f006 fd84 	bl	8007ccc <HAL_I2C_Mem_Read>

	//// Convert rawdata To V shunt from Table 7.Shunt Voltage Register Format

    int16_t rawshunt = INACBffr.D16[1] | INACBffr.D16[0];
 80011c4:	4b0f      	ldr	r3, [pc, #60]	; (8001204 <INA219Read_ShuntV+0x6c>)
 80011c6:	885a      	ldrh	r2, [r3, #2]
 80011c8:	4b0e      	ldr	r3, [pc, #56]	; (8001204 <INA219Read_ShuntV+0x6c>)
 80011ca:	881b      	ldrh	r3, [r3, #0]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	b29b      	uxth	r3, r3
 80011d0:	81fb      	strh	r3, [r7, #14]
    return rawshunt / 100.0;
 80011d2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff f9ac 	bl	8000534 <__aeabi_i2d>
 80011dc:	f04f 0200 	mov.w	r2, #0
 80011e0:	4b0a      	ldr	r3, [pc, #40]	; (800120c <INA219Read_ShuntV+0x74>)
 80011e2:	f7ff fb3b 	bl	800085c <__aeabi_ddiv>
 80011e6:	4602      	mov	r2, r0
 80011e8:	460b      	mov	r3, r1
 80011ea:	4610      	mov	r0, r2
 80011ec:	4619      	mov	r1, r3
 80011ee:	f7ff fd03 	bl	8000bf8 <__aeabi_d2f>
 80011f2:	4603      	mov	r3, r0
 80011f4:	ee07 3a90 	vmov	s15, r3
//    	return rawshunt / 100.0;
//    }else{
//    	// if 2's complements
//    	return (~rawshunt + 1) / 100.0;
//    }
}
 80011f8:	eeb0 0a67 	vmov.f32	s0, s15
 80011fc:	3710      	adds	r7, #16
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	2000043c 	.word	0x2000043c
 8001208:	2000043d 	.word	0x2000043d
 800120c:	40590000 	.word	0x40590000

08001210 <INA219Read_Power>:

float INA219Read_Power(I2C_HandleTypeDef *hi2c,uint8_t dv_addr){
 8001210:	b5b0      	push	{r4, r5, r7, lr}
 8001212:	b086      	sub	sp, #24
 8001214:	af04      	add	r7, sp, #16
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	460b      	mov	r3, r1
 800121a:	70fb      	strb	r3, [r7, #3]
	 * @param : hi2c - HAL_I2C used to read
	 * @param : dv_addr - address of INA219 device in the busline
	 * @Retval: Power in mW
	 * @ex.
	 * */
	INACBffr.D32 = 0; //// buffer clear
 800121c:	4b1e      	ldr	r3, [pc, #120]	; (8001298 <INA219Read_Power+0x88>)
 800121e:	2200      	movs	r2, #0
 8001220:	601a      	str	r2, [r3, #0]
	HAL_I2C_Mem_Read(hi2c, dv_addr, INA219_RG_PoWer, I2C_MEMADD_SIZE_8BIT, &INACBffr.D8[1], 2, 10);
 8001222:	78fb      	ldrb	r3, [r7, #3]
 8001224:	b299      	uxth	r1, r3
 8001226:	230a      	movs	r3, #10
 8001228:	9302      	str	r3, [sp, #8]
 800122a:	2302      	movs	r3, #2
 800122c:	9301      	str	r3, [sp, #4]
 800122e:	4b1b      	ldr	r3, [pc, #108]	; (800129c <INA219Read_Power+0x8c>)
 8001230:	9300      	str	r3, [sp, #0]
 8001232:	2301      	movs	r3, #1
 8001234:	2203      	movs	r2, #3
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f006 fd48 	bl	8007ccc <HAL_I2C_Mem_Read>
	////  * 20, power_LSB = 20 x current_LSB & x 1000 make unit in mW
	return ((INACBffr.D16[1] | INACBffr.D16[0]) * (20000.0 * current_LSB));
 800123c:	4b16      	ldr	r3, [pc, #88]	; (8001298 <INA219Read_Power+0x88>)
 800123e:	885a      	ldrh	r2, [r3, #2]
 8001240:	4b15      	ldr	r3, [pc, #84]	; (8001298 <INA219Read_Power+0x88>)
 8001242:	881b      	ldrh	r3, [r3, #0]
 8001244:	4313      	orrs	r3, r2
 8001246:	b29b      	uxth	r3, r3
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff f973 	bl	8000534 <__aeabi_i2d>
 800124e:	4604      	mov	r4, r0
 8001250:	460d      	mov	r5, r1
 8001252:	4b13      	ldr	r3, [pc, #76]	; (80012a0 <INA219Read_Power+0x90>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff f97e 	bl	8000558 <__aeabi_f2d>
 800125c:	a30c      	add	r3, pc, #48	; (adr r3, 8001290 <INA219Read_Power+0x80>)
 800125e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001262:	f7ff f9d1 	bl	8000608 <__aeabi_dmul>
 8001266:	4602      	mov	r2, r0
 8001268:	460b      	mov	r3, r1
 800126a:	4620      	mov	r0, r4
 800126c:	4629      	mov	r1, r5
 800126e:	f7ff f9cb 	bl	8000608 <__aeabi_dmul>
 8001272:	4602      	mov	r2, r0
 8001274:	460b      	mov	r3, r1
 8001276:	4610      	mov	r0, r2
 8001278:	4619      	mov	r1, r3
 800127a:	f7ff fcbd 	bl	8000bf8 <__aeabi_d2f>
 800127e:	4603      	mov	r3, r0
 8001280:	ee07 3a90 	vmov	s15, r3
}
 8001284:	eeb0 0a67 	vmov.f32	s0, s15
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bdb0      	pop	{r4, r5, r7, pc}
 800128e:	bf00      	nop
 8001290:	00000000 	.word	0x00000000
 8001294:	40d38800 	.word	0x40d38800
 8001298:	2000043c 	.word	0x2000043c
 800129c:	2000043d 	.word	0x2000043d
 80012a0:	20000000 	.word	0x20000000

080012a4 <MCP3208_READ_8_DataSPI>:
/* Read using SPI 8 Bit Data size MSB first
 * Ex.
 * AA_bitread = MCP3208_READ_8_DataSPI(&hspi3, M8_CH0);
	VADC_cv =  MCP3208_ADCbit_to_Volt(AA_bitread); // 5 / 4096 * 0.00122
 * */
uint16_t MCP3208_READ_8_DataSPI(SPI_HandleTypeDef *hspi, MCP3208CHSelect M8_channel){
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b086      	sub	sp, #24
 80012a8:	af02      	add	r7, sp, #8
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	460b      	mov	r3, r1
 80012ae:	70fb      	strb	r3, [r7, #3]

	//// Shitty bitshift to the correct position Fig 6-1, MCP3208, MICROCHIP
	uint8_t D8_MOSI[3];
	uint8_t D8_MISO[3];
	D8_MOSI[0] = M8_channel >> 2;
 80012b0:	78fb      	ldrb	r3, [r7, #3]
 80012b2:	089b      	lsrs	r3, r3, #2
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	733b      	strb	r3, [r7, #12]
	D8_MOSI[1] = M8_channel << 6;
 80012b8:	78fb      	ldrb	r3, [r7, #3]
 80012ba:	019b      	lsls	r3, r3, #6
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	737b      	strb	r3, [r7, #13]


	HAL_GPIO_WritePin(MCP3208_SPI_CS_Port,MCP3208_SPI_CS_Pin , GPIO_PIN_RESET);
 80012c0:	2200      	movs	r2, #0
 80012c2:	2104      	movs	r1, #4
 80012c4:	4810      	ldr	r0, [pc, #64]	; (8001308 <MCP3208_READ_8_DataSPI+0x64>)
 80012c6:	f006 fa77 	bl	80077b8 <HAL_GPIO_WritePin>

	HAL_SPI_TransmitReceive(hspi, &D8_MOSI[0], &D8_MISO[0], 3, 100);
 80012ca:	f107 0208 	add.w	r2, r7, #8
 80012ce:	f107 010c 	add.w	r1, r7, #12
 80012d2:	2364      	movs	r3, #100	; 0x64
 80012d4:	9300      	str	r3, [sp, #0]
 80012d6:	2303      	movs	r3, #3
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f009 fc74 	bl	800abc6 <HAL_SPI_TransmitReceive>

	//HAL_SPI_Abort(hspi);
	HAL_GPIO_WritePin(MCP3208_SPI_CS_Port,MCP3208_SPI_CS_Pin , GPIO_PIN_SET);
 80012de:	2201      	movs	r2, #1
 80012e0:	2104      	movs	r1, #4
 80012e2:	4809      	ldr	r0, [pc, #36]	; (8001308 <MCP3208_READ_8_DataSPI+0x64>)
 80012e4:	f006 fa68 	bl	80077b8 <HAL_GPIO_WritePin>

	return ((D8_MISO[1] << 8) + D8_MISO[2]) & 0x0FFF;
 80012e8:	7a7b      	ldrb	r3, [r7, #9]
 80012ea:	b29b      	uxth	r3, r3
 80012ec:	021b      	lsls	r3, r3, #8
 80012ee:	b29a      	uxth	r2, r3
 80012f0:	7abb      	ldrb	r3, [r7, #10]
 80012f2:	b29b      	uxth	r3, r3
 80012f4:	4413      	add	r3, r2
 80012f6:	b29b      	uxth	r3, r3
 80012f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012fc:	b29b      	uxth	r3, r3
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3710      	adds	r7, #16
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	40020c00 	.word	0x40020c00
 800130c:	00000000 	.word	0x00000000

08001310 <MCP320x_ADCbit_to_Volt>:


float MCP320x_ADCbit_to_Volt(uint16_t adcbit){
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	80fb      	strh	r3, [r7, #6]
	return adcbit * 0.00122; // 5/4096
 800131a:	88fb      	ldrh	r3, [r7, #6]
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff f909 	bl	8000534 <__aeabi_i2d>
 8001322:	a309      	add	r3, pc, #36	; (adr r3, 8001348 <MCP320x_ADCbit_to_Volt+0x38>)
 8001324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001328:	f7ff f96e 	bl	8000608 <__aeabi_dmul>
 800132c:	4602      	mov	r2, r0
 800132e:	460b      	mov	r3, r1
 8001330:	4610      	mov	r0, r2
 8001332:	4619      	mov	r1, r3
 8001334:	f7ff fc60 	bl	8000bf8 <__aeabi_d2f>
 8001338:	4603      	mov	r3, r0
 800133a:	ee07 3a90 	vmov	s15, r3
	//return adcbit * 0.001215; // 4.98/4096
	//return adcbit * 0.001225; // 5.02/4096
}
 800133e:	eeb0 0a67 	vmov.f32	s0, s15
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	0678c005 	.word	0x0678c005
 800134c:	3f53fd0d 	.word	0x3f53fd0d

08001350 <Rx_Verita_engine_callBak>:

	return VRT_ERROR;
}


VRTPTC_StatusTypedef Rx_Verita_engine_callBak(uint8_t *Rxbffr, Verita_Register_Bank *regisk){ //uint32_t *regisk
 8001350:	b490      	push	{r4, r7}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	6039      	str	r1, [r7, #0]
	 * @param Rxbffr - input uart buffer
	 * @param regisk - register need the result be stored
	 */
	static uint8_t logger[12] = {0}; /// log Rxbffr without head packet
	static uint8_t index = 0; // use in case the start of verita is not at Rxbffr[0]
	uint8_t chksum[2]  = {0};
 800135a:	2300      	movs	r3, #0
 800135c:	81bb      	strh	r3, [r7, #12]
		uint32_t U32;
	}logu;


		/// chk All headers
		if(Rxbffr[index + 0] == 0x56 && Rxbffr[index + 1] == 0x52 && Rxbffr[index + 2] == 0x54){
 800135e:	4b74      	ldr	r3, [pc, #464]	; (8001530 <Rx_Verita_engine_callBak+0x1e0>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	461a      	mov	r2, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	4413      	add	r3, r2
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	2b56      	cmp	r3, #86	; 0x56
 800136c:	f040 80c5 	bne.w	80014fa <Rx_Verita_engine_callBak+0x1aa>
 8001370:	4b6f      	ldr	r3, [pc, #444]	; (8001530 <Rx_Verita_engine_callBak+0x1e0>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	3301      	adds	r3, #1
 8001376:	687a      	ldr	r2, [r7, #4]
 8001378:	4413      	add	r3, r2
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	2b52      	cmp	r3, #82	; 0x52
 800137e:	f040 80bc 	bne.w	80014fa <Rx_Verita_engine_callBak+0x1aa>
 8001382:	4b6b      	ldr	r3, [pc, #428]	; (8001530 <Rx_Verita_engine_callBak+0x1e0>)
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	3302      	adds	r3, #2
 8001388:	687a      	ldr	r2, [r7, #4]
 800138a:	4413      	add	r3, r2
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	2b54      	cmp	r3, #84	; 0x54
 8001390:	f040 80b3 	bne.w	80014fa <Rx_Verita_engine_callBak+0x1aa>

			//// log data first / prevent overwrite
			for(register int k = 0; k < 7; k++){
 8001394:	2400      	movs	r4, #0
 8001396:	e009      	b.n	80013ac <Rx_Verita_engine_callBak+0x5c>
				logger[k] = Rxbffr[index + k + 3];
 8001398:	4b65      	ldr	r3, [pc, #404]	; (8001530 <Rx_Verita_engine_callBak+0x1e0>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	4423      	add	r3, r4
 800139e:	3303      	adds	r3, #3
 80013a0:	687a      	ldr	r2, [r7, #4]
 80013a2:	4413      	add	r3, r2
 80013a4:	781a      	ldrb	r2, [r3, #0]
 80013a6:	4b63      	ldr	r3, [pc, #396]	; (8001534 <Rx_Verita_engine_callBak+0x1e4>)
 80013a8:	551a      	strb	r2, [r3, r4]
			for(register int k = 0; k < 7; k++){
 80013aa:	3401      	adds	r4, #1
 80013ac:	2c06      	cmp	r4, #6
 80013ae:	ddf3      	ble.n	8001398 <Rx_Verita_engine_callBak+0x48>
			}

			//// checksum here
			for(register int i = 0;i < 5; i++){
 80013b0:	2400      	movs	r4, #0
 80013b2:	e006      	b.n	80013c2 <Rx_Verita_engine_callBak+0x72>
				chksum[0] += logger[i];
 80013b4:	7b3a      	ldrb	r2, [r7, #12]
 80013b6:	4b5f      	ldr	r3, [pc, #380]	; (8001534 <Rx_Verita_engine_callBak+0x1e4>)
 80013b8:	5d1b      	ldrb	r3, [r3, r4]
 80013ba:	4413      	add	r3, r2
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	733b      	strb	r3, [r7, #12]
			for(register int i = 0;i < 5; i++){
 80013c0:	3401      	adds	r4, #1
 80013c2:	2c04      	cmp	r4, #4
 80013c4:	ddf6      	ble.n	80013b4 <Rx_Verita_engine_callBak+0x64>
			}
			chksum[1] = ~chksum[0];
 80013c6:	7b3b      	ldrb	r3, [r7, #12]
 80013c8:	43db      	mvns	r3, r3
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	737b      	strb	r3, [r7, #13]

			if( chksum[1] == logger[5]){
 80013ce:	7b7a      	ldrb	r2, [r7, #13]
 80013d0:	4b58      	ldr	r3, [pc, #352]	; (8001534 <Rx_Verita_engine_callBak+0x1e4>)
 80013d2:	795b      	ldrb	r3, [r3, #5]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	f040 808e 	bne.w	80014f6 <Rx_Verita_engine_callBak+0x1a6>

				Rxbffr[0 + index] = 0xFF;//// mark that this data is already read
 80013da:	4b55      	ldr	r3, [pc, #340]	; (8001530 <Rx_Verita_engine_callBak+0x1e0>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	461a      	mov	r2, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	4413      	add	r3, r2
 80013e4:	22ff      	movs	r2, #255	; 0xff
 80013e6:	701a      	strb	r2, [r3, #0]

				/////////////////////// decode phase  //////////////////
				index += Framesize_VRT;
 80013e8:	4b51      	ldr	r3, [pc, #324]	; (8001530 <Rx_Verita_engine_callBak+0x1e0>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	3309      	adds	r3, #9
 80013ee:	b2da      	uxtb	r2, r3
 80013f0:	4b4f      	ldr	r3, [pc, #316]	; (8001530 <Rx_Verita_engine_callBak+0x1e0>)
 80013f2:	701a      	strb	r2, [r3, #0]
				index %= RxbufferSize_VRT; // overflow
 80013f4:	4b4e      	ldr	r3, [pc, #312]	; (8001530 <Rx_Verita_engine_callBak+0x1e0>)
 80013f6:	781a      	ldrb	r2, [r3, #0]
 80013f8:	4b4f      	ldr	r3, [pc, #316]	; (8001538 <Rx_Verita_engine_callBak+0x1e8>)
 80013fa:	fba3 1302 	umull	r1, r3, r3, r2
 80013fe:	0859      	lsrs	r1, r3, #1
 8001400:	460b      	mov	r3, r1
 8001402:	00db      	lsls	r3, r3, #3
 8001404:	440b      	add	r3, r1
 8001406:	1ad3      	subs	r3, r2, r3
 8001408:	b2da      	uxtb	r2, r3
 800140a:	4b49      	ldr	r3, [pc, #292]	; (8001530 <Rx_Verita_engine_callBak+0x1e0>)
 800140c:	701a      	strb	r2, [r3, #0]
				logu.U8[2] = logger[2];
				logu.U8[1] = logger[3];
				logu.U8[0] = logger[4];
#else
				//// Little endian
				logu.U8[0] = logger[1];
 800140e:	4b49      	ldr	r3, [pc, #292]	; (8001534 <Rx_Verita_engine_callBak+0x1e4>)
 8001410:	785b      	ldrb	r3, [r3, #1]
 8001412:	723b      	strb	r3, [r7, #8]
				logu.U8[1] = logger[2];
 8001414:	4b47      	ldr	r3, [pc, #284]	; (8001534 <Rx_Verita_engine_callBak+0x1e4>)
 8001416:	789b      	ldrb	r3, [r3, #2]
 8001418:	727b      	strb	r3, [r7, #9]
				logu.U8[2] = logger[3];
 800141a:	4b46      	ldr	r3, [pc, #280]	; (8001534 <Rx_Verita_engine_callBak+0x1e4>)
 800141c:	78db      	ldrb	r3, [r3, #3]
 800141e:	72bb      	strb	r3, [r7, #10]
				logu.U8[3] = logger[4];
 8001420:	4b44      	ldr	r3, [pc, #272]	; (8001534 <Rx_Verita_engine_callBak+0x1e4>)
 8001422:	791b      	ldrb	r3, [r3, #4]
 8001424:	72fb      	strb	r3, [r7, #11]
#endif

				//// DATA phase, insert 32bit data into register box =================================
				if(logger[0] <= 0x20){
 8001426:	4b43      	ldr	r3, [pc, #268]	; (8001534 <Rx_Verita_engine_callBak+0x1e4>)
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	2b20      	cmp	r3, #32
 800142c:	d808      	bhi.n	8001440 <Rx_Verita_engine_callBak+0xf0>
					// place data into the request register
					regisk->U32[logger[0]] = logu.U32;
 800142e:	4b41      	ldr	r3, [pc, #260]	; (8001534 <Rx_Verita_engine_callBak+0x1e4>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	4619      	mov	r1, r3
 8001434:	68ba      	ldr	r2, [r7, #8]
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
					return VRT_OK;
 800143c:	2391      	movs	r3, #145	; 0x91
 800143e:	e072      	b.n	8001526 <Rx_Verita_engine_callBak+0x1d6>
				} //// -------------------------------------------------------------------------------

				//// CMD phase, return recieved Command =========================================
				if(logger[0] >= 0x90){
 8001440:	4b3c      	ldr	r3, [pc, #240]	; (8001534 <Rx_Verita_engine_callBak+0x1e4>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	2b8f      	cmp	r3, #143	; 0x8f
 8001446:	d96c      	bls.n	8001522 <Rx_Verita_engine_callBak+0x1d2>
					switch(logger[0]){
 8001448:	4b3a      	ldr	r3, [pc, #232]	; (8001534 <Rx_Verita_engine_callBak+0x1e4>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	3b91      	subs	r3, #145	; 0x91
 800144e:	2b13      	cmp	r3, #19
 8001450:	d82a      	bhi.n	80014a8 <Rx_Verita_engine_callBak+0x158>
 8001452:	a201      	add	r2, pc, #4	; (adr r2, 8001458 <Rx_Verita_engine_callBak+0x108>)
 8001454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001458:	080014ad 	.word	0x080014ad
 800145c:	080014b1 	.word	0x080014b1
 8001460:	080014b5 	.word	0x080014b5
 8001464:	080014b9 	.word	0x080014b9
 8001468:	080014a9 	.word	0x080014a9
 800146c:	080014a9 	.word	0x080014a9
 8001470:	080014a9 	.word	0x080014a9
 8001474:	080014a9 	.word	0x080014a9
 8001478:	080014a9 	.word	0x080014a9
 800147c:	080014a9 	.word	0x080014a9
 8001480:	080014a9 	.word	0x080014a9
 8001484:	080014a9 	.word	0x080014a9
 8001488:	080014a9 	.word	0x080014a9
 800148c:	080014a9 	.word	0x080014a9
 8001490:	080014a9 	.word	0x080014a9
 8001494:	080014bd 	.word	0x080014bd
 8001498:	080014c7 	.word	0x080014c7
 800149c:	080014d3 	.word	0x080014d3
 80014a0:	080014df 	.word	0x080014df
 80014a4:	080014eb 	.word	0x080014eb
						//// Status -------
						default:
						case 0x90:
							return VRT_ERROR;
 80014a8:	2390      	movs	r3, #144	; 0x90
 80014aa:	e03c      	b.n	8001526 <Rx_Verita_engine_callBak+0x1d6>
						case 0x91:
							return VRT_OK;
 80014ac:	2391      	movs	r3, #145	; 0x91
 80014ae:	e03a      	b.n	8001526 <Rx_Verita_engine_callBak+0x1d6>
						case 0x92:
							return VRT_Busy;
 80014b0:	2392      	movs	r3, #146	; 0x92
 80014b2:	e038      	b.n	8001526 <Rx_Verita_engine_callBak+0x1d6>
						case 0x93:
							return VRT_DataLoss;
 80014b4:	2393      	movs	r3, #147	; 0x93
 80014b6:	e036      	b.n	8001526 <Rx_Verita_engine_callBak+0x1d6>
						case 0x94:
							return VRT_UnEnc;
 80014b8:	2394      	movs	r3, #148	; 0x94
 80014ba:	e034      	b.n	8001526 <Rx_Verita_engine_callBak+0x1d6>

						//// Command -------------
						case VRC_Request:
							//// place Regis request & FlagRQ for Tx_RQ_Engine
							regisk->U32[VR_DataReq] = logu.U32;
 80014bc:	68ba      	ldr	r2, [r7, #8]
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	601a      	str	r2, [r3, #0]
							return VRT_OK;
 80014c2:	2391      	movs	r3, #145	; 0x91
 80014c4:	e02f      	b.n	8001526 <Rx_Verita_engine_callBak+0x1d6>

						case VRC_Flag_ger:
							regisk->Mark.Flag_ger = logu.U8[0];
 80014c6:	7a3a      	ldrb	r2, [r7, #8]
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
							return VRT_OK;
 80014ce:	2391      	movs	r3, #145	; 0x91
 80014d0:	e029      	b.n	8001526 <Rx_Verita_engine_callBak+0x1d6>

						case VRC_Next:
							regisk->Mark.Flag_next = 0xFF; return VRC_Next;
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	22ff      	movs	r2, #255	; 0xff
 80014d6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 80014da:	23a2      	movs	r3, #162	; 0xa2
 80014dc:	e023      	b.n	8001526 <Rx_Verita_engine_callBak+0x1d6>

						case VRC_Flag_aa:
							regisk->Mark.Flag_aa = logu.U8[0]; return VRC_Flag_aa;
 80014de:	7a3a      	ldrb	r2, [r7, #8]
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 80014e6:	23a3      	movs	r3, #163	; 0xa3
 80014e8:	e01d      	b.n	8001526 <Rx_Verita_engine_callBak+0x1d6>

						case VRC_Flag_bb:
							regisk->Mark.Flag_bb = logu.U8[0]; return VRC_Flag_bb;
 80014ea:	7a3a      	ldrb	r2, [r7, #8]
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
 80014f2:	23a4      	movs	r3, #164	; 0xa4
 80014f4:	e017      	b.n	8001526 <Rx_Verita_engine_callBak+0x1d6>
					}
				}

				/////////////////////// decode phase  //////////////////
			}
			else{return VRT_DataLoss;}//// checksum wrong
 80014f6:	2393      	movs	r3, #147	; 0x93
 80014f8:	e015      	b.n	8001526 <Rx_Verita_engine_callBak+0x1d6>

		}
		else{//// else wrong header
			index += Framesize_VRT; // 9
 80014fa:	4b0d      	ldr	r3, [pc, #52]	; (8001530 <Rx_Verita_engine_callBak+0x1e0>)
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	3309      	adds	r3, #9
 8001500:	b2da      	uxtb	r2, r3
 8001502:	4b0b      	ldr	r3, [pc, #44]	; (8001530 <Rx_Verita_engine_callBak+0x1e0>)
 8001504:	701a      	strb	r2, [r3, #0]
			index %= RxbufferSize_VRT; // overflow
 8001506:	4b0a      	ldr	r3, [pc, #40]	; (8001530 <Rx_Verita_engine_callBak+0x1e0>)
 8001508:	781a      	ldrb	r2, [r3, #0]
 800150a:	4b0b      	ldr	r3, [pc, #44]	; (8001538 <Rx_Verita_engine_callBak+0x1e8>)
 800150c:	fba3 1302 	umull	r1, r3, r3, r2
 8001510:	0859      	lsrs	r1, r3, #1
 8001512:	460b      	mov	r3, r1
 8001514:	00db      	lsls	r3, r3, #3
 8001516:	440b      	add	r3, r1
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	b2da      	uxtb	r2, r3
 800151c:	4b04      	ldr	r3, [pc, #16]	; (8001530 <Rx_Verita_engine_callBak+0x1e0>)
 800151e:	701a      	strb	r2, [r3, #0]
 8001520:	e000      	b.n	8001524 <Rx_Verita_engine_callBak+0x1d4>
			if( chksum[1] == logger[5]){
 8001522:	bf00      	nop
		}


	return VRT_ERROR;
 8001524:	2390      	movs	r3, #144	; 0x90
}
 8001526:	4618      	mov	r0, r3
 8001528:	3710      	adds	r7, #16
 800152a:	46bd      	mov	sp, r7
 800152c:	bc90      	pop	{r4, r7}
 800152e:	4770      	bx	lr
 8001530:	20000442 	.word	0x20000442
 8001534:	20000444 	.word	0x20000444
 8001538:	38e38e39 	.word	0x38e38e39

0800153c <Tx_Rq_Verita_engine>:

VRTPTC_StatusTypedef Tx_Rq_Verita_engine(UART_HandleTypeDef *huart, Verita_Register_Bank *vrg_intn){
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	6039      	str	r1, [r7, #0]
	/* @brief Send data back when request is flagged , recommend for client's use
	 * @param vrg_intn - Bank which collect request register & Flag // internal regis
	 * @param regist - databank array collect data to send
	 * */

	if(vrg_intn->Mark.flag_dataREQ){ // if flag is up
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	885b      	ldrh	r3, [r3, #2]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d011      	beq.n	8001572 <Tx_Rq_Verita_engine+0x36>

		uint8_t regis_RQ = (uint8_t)vrg_intn->Mark.DataReq;
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	881b      	ldrh	r3, [r3, #0]
 8001552:	73fb      	strb	r3, [r7, #15]
		//uint32_t data_reg = vrg_intn->U32[regis_RQ];

		//// send data
		Tx_UART_Verita_Packet_u32(huart, regis_RQ, vrg_intn->U32[regis_RQ]);
 8001554:	7bfa      	ldrb	r2, [r7, #15]
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800155c:	7bfb      	ldrb	r3, [r7, #15]
 800155e:	4619      	mov	r1, r3
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	f000 f80b 	bl	800157c <Tx_UART_Verita_Packet_u32>
		//// erase flag
		//vrg_intn->U32[VR_DataReq] = 0x00;
		vrg_intn->Mark.DataReq = 0x00;
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	2200      	movs	r2, #0
 800156a:	801a      	strh	r2, [r3, #0]
		vrg_intn->Mark.flag_dataREQ = 0x00;
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	2200      	movs	r2, #0
 8001570:	805a      	strh	r2, [r3, #2]
	}

	return VRT_OK;
 8001572:	2391      	movs	r3, #145	; 0x91
}
 8001574:	4618      	mov	r0, r3
 8001576:	3710      	adds	r7, #16
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}

0800157c <Tx_UART_Verita_Packet_u32>:


	HAL_UART_Transmit(huart, (uint8_t*)pack, posit+1, 40);
}

void Tx_UART_Verita_Packet_u32(UART_HandleTypeDef *huart, uint8_t regis,uint32_t pdata){
 800157c:	b590      	push	{r4, r7, lr}
 800157e:	b08b      	sub	sp, #44	; 0x2c
 8001580:	af00      	add	r7, sp, #0
 8001582:	60f8      	str	r0, [r7, #12]
 8001584:	460b      	mov	r3, r1
 8001586:	607a      	str	r2, [r7, #4]
 8001588:	72fb      	strb	r3, [r7, #11]
	 * @param size  - Amount of data elements (u8 or u16) to be received.
	 *
	 * */

	//// Verita Header ////
	uint8_t pack[16] = {0x56, 0x52, 0x54, regis};
 800158a:	f107 0314 	add.w	r3, r7, #20
 800158e:	2200      	movs	r2, #0
 8001590:	601a      	str	r2, [r3, #0]
 8001592:	605a      	str	r2, [r3, #4]
 8001594:	609a      	str	r2, [r3, #8]
 8001596:	60da      	str	r2, [r3, #12]
 8001598:	2356      	movs	r3, #86	; 0x56
 800159a:	753b      	strb	r3, [r7, #20]
 800159c:	2352      	movs	r3, #82	; 0x52
 800159e:	757b      	strb	r3, [r7, #21]
 80015a0:	2354      	movs	r3, #84	; 0x54
 80015a2:	75bb      	strb	r3, [r7, #22]
 80015a4:	7afb      	ldrb	r3, [r7, #11]
 80015a6:	75fb      	strb	r3, [r7, #23]

	uint8_t posit = 4; // start new position
 80015a8:	2304      	movs	r3, #4
 80015aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t chksum = 0;
 80015ae:	2300      	movs	r3, #0
 80015b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		uint8_t  U8[4];
		uint32_t U32;
	}logu;

	//// add data to packet
	logu.U32 = pdata;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	613b      	str	r3, [r7, #16]
	for(register int j = 4; j < 8; j++){
 80015b8:	2404      	movs	r4, #4
 80015ba:	e00f      	b.n	80015dc <Tx_UART_Verita_Packet_u32+0x60>
			pack[j] = logu.U8[j-4];
 80015bc:	1f23      	subs	r3, r4, #4
 80015be:	3328      	adds	r3, #40	; 0x28
 80015c0:	443b      	add	r3, r7
 80015c2:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 80015c6:	f104 0328 	add.w	r3, r4, #40	; 0x28
 80015ca:	443b      	add	r3, r7
 80015cc:	f803 2c14 	strb.w	r2, [r3, #-20]
			posit++;
 80015d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80015d4:	3301      	adds	r3, #1
 80015d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for(register int j = 4; j < 8; j++){
 80015da:	3401      	adds	r4, #1
 80015dc:	2c07      	cmp	r4, #7
 80015de:	dded      	ble.n	80015bc <Tx_UART_Verita_Packet_u32+0x40>
		}
	//// Checksum generate , +4 means +3 start pack & +1 regis
	for(register int j = 3; j < 8; j++){
 80015e0:	2403      	movs	r4, #3
 80015e2:	e00a      	b.n	80015fa <Tx_UART_Verita_Packet_u32+0x7e>
		chksum += pack[j];
 80015e4:	f104 0328 	add.w	r3, r4, #40	; 0x28
 80015e8:	443b      	add	r3, r7
 80015ea:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 80015ee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80015f2:	4413      	add	r3, r2
 80015f4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	for(register int j = 3; j < 8; j++){
 80015f8:	3401      	adds	r4, #1
 80015fa:	2c07      	cmp	r4, #7
 80015fc:	ddf2      	ble.n	80015e4 <Tx_UART_Verita_Packet_u32+0x68>
	}
	pack[posit] = ~chksum;
 80015fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001602:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001606:	43d2      	mvns	r2, r2
 8001608:	b2d2      	uxtb	r2, r2
 800160a:	3328      	adds	r3, #40	; 0x28
 800160c:	443b      	add	r3, r7
 800160e:	f803 2c14 	strb.w	r2, [r3, #-20]


	HAL_UART_Transmit(huart, (uint8_t*)pack, posit+1, 50);
 8001612:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001616:	b29b      	uxth	r3, r3
 8001618:	3301      	adds	r3, #1
 800161a:	b29a      	uxth	r2, r3
 800161c:	f107 0114 	add.w	r1, r7, #20
 8001620:	2332      	movs	r3, #50	; 0x32
 8001622:	68f8      	ldr	r0, [r7, #12]
 8001624:	f00a f9f7 	bl	800ba16 <HAL_UART_Transmit>
}
 8001628:	bf00      	nop
 800162a:	372c      	adds	r7, #44	; 0x2c
 800162c:	46bd      	mov	sp, r7
 800162e:	bd90      	pop	{r4, r7, pc}

08001630 <Tx_UART_Verita_Command>:

void Tx_UART_Verita_Command(UART_HandleTypeDef *huart, VRTPTC_CMDef cmd, uint8_t regis){
 8001630:	b590      	push	{r4, r7, lr}
 8001632:	b089      	sub	sp, #36	; 0x24
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	460b      	mov	r3, r1
 800163a:	70fb      	strb	r3, [r7, #3]
 800163c:	4613      	mov	r3, r2
 800163e:	70bb      	strb	r3, [r7, #2]
	 * 				  [VRC_Request] destination register need to request
	 * */

	//// Verita Header ////
	//// Send data request & Flag
	uint8_t pack[16] = {0x56, 0x52, 0x54, cmd, regis, 0x00, 0xFF, 0xAA};
 8001640:	f107 030c 	add.w	r3, r7, #12
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	605a      	str	r2, [r3, #4]
 800164a:	609a      	str	r2, [r3, #8]
 800164c:	60da      	str	r2, [r3, #12]
 800164e:	2356      	movs	r3, #86	; 0x56
 8001650:	733b      	strb	r3, [r7, #12]
 8001652:	2352      	movs	r3, #82	; 0x52
 8001654:	737b      	strb	r3, [r7, #13]
 8001656:	2354      	movs	r3, #84	; 0x54
 8001658:	73bb      	strb	r3, [r7, #14]
 800165a:	78fb      	ldrb	r3, [r7, #3]
 800165c:	73fb      	strb	r3, [r7, #15]
 800165e:	78bb      	ldrb	r3, [r7, #2]
 8001660:	743b      	strb	r3, [r7, #16]
 8001662:	23ff      	movs	r3, #255	; 0xff
 8001664:	74bb      	strb	r3, [r7, #18]
 8001666:	23aa      	movs	r3, #170	; 0xaa
 8001668:	74fb      	strb	r3, [r7, #19]

	//uint8_t posit = 4; // start new position
	uint8_t chksum = 0;
 800166a:	2300      	movs	r3, #0
 800166c:	77fb      	strb	r3, [r7, #31]

	//if(cmd == VRC_Request){}

	//// Checksum generate , +4 means +3 start pack & +1 regis
	for(register int j = 3; j < 8; j++){
 800166e:	2403      	movs	r4, #3
 8001670:	e008      	b.n	8001684 <Tx_UART_Verita_Command+0x54>
		chksum += pack[j];
 8001672:	f104 0320 	add.w	r3, r4, #32
 8001676:	443b      	add	r3, r7
 8001678:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 800167c:	7ffb      	ldrb	r3, [r7, #31]
 800167e:	4413      	add	r3, r2
 8001680:	77fb      	strb	r3, [r7, #31]
	for(register int j = 3; j < 8; j++){
 8001682:	3401      	adds	r4, #1
 8001684:	2c07      	cmp	r4, #7
 8001686:	ddf4      	ble.n	8001672 <Tx_UART_Verita_Command+0x42>
	}
	pack[8] = ~chksum;
 8001688:	7ffb      	ldrb	r3, [r7, #31]
 800168a:	43db      	mvns	r3, r3
 800168c:	b2db      	uxtb	r3, r3
 800168e:	753b      	strb	r3, [r7, #20]

	HAL_UART_Transmit(huart, (uint8_t*)pack, 9, 30);
 8001690:	f107 010c 	add.w	r1, r7, #12
 8001694:	231e      	movs	r3, #30
 8001696:	2209      	movs	r2, #9
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f00a f9bc 	bl	800ba16 <HAL_UART_Transmit>
}
 800169e:	bf00      	nop
 80016a0:	3724      	adds	r7, #36	; 0x24
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd90      	pop	{r4, r7, pc}
	...

080016a8 <BL_UART_Start>:
 *  BL_UART_Readout_UnProtect(UART_HandleTypeDef *huart);
 *  BL_UART_Write_Protect(UART_HandleTypeDef *huart);
 *  BL_UART_Write_UnProtect(UART_HandleTypeDef *huart);
 * */

void BL_UART_Start(UART_HandleTypeDef *huart){
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]

	uint8_t UARTBL_Start = 0x7F;
 80016b0:	237f      	movs	r3, #127	; 0x7f
 80016b2:	73fb      	strb	r3, [r7, #15]
	//// step 1: Push BOOT0 -> HIGH
	HAL_GPIO_WritePin(BOOT0_Trigger_GPIO_PORT, BOOT0_Trigger_GPIO_PIN, GPIO_PIN_SET);
 80016b4:	2201      	movs	r2, #1
 80016b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016ba:	4811      	ldr	r0, [pc, #68]	; (8001700 <BL_UART_Start+0x58>)
 80016bc:	f006 f87c 	bl	80077b8 <HAL_GPIO_WritePin>

	//// step 2: Reset Client, push SET NMOS
	HAL_GPIO_WritePin(Client_NRST_Trg_GPIO_PORT, Client_NRST_Trg_GPIO_PIN, GPIO_PIN_SET);
 80016c0:	2201      	movs	r2, #1
 80016c2:	2140      	movs	r1, #64	; 0x40
 80016c4:	480f      	ldr	r0, [pc, #60]	; (8001704 <BL_UART_Start+0x5c>)
 80016c6:	f006 f877 	bl	80077b8 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80016ca:	2014      	movs	r0, #20
 80016cc:	f005 f992 	bl	80069f4 <HAL_Delay>
	HAL_GPIO_WritePin(Client_NRST_Trg_GPIO_PORT, Client_NRST_Trg_GPIO_PIN, GPIO_PIN_RESET);
 80016d0:	2200      	movs	r2, #0
 80016d2:	2140      	movs	r1, #64	; 0x40
 80016d4:	480b      	ldr	r0, [pc, #44]	; (8001704 <BL_UART_Start+0x5c>)
 80016d6:	f006 f86f 	bl	80077b8 <HAL_GPIO_WritePin>
	//// step 3: wait bootloader startup for 74.5ms ++
	HAL_Delay(85); // 80 is not enough
 80016da:	2055      	movs	r0, #85	; 0x55
 80016dc:	f005 f98a 	bl	80069f4 <HAL_Delay>

	//// send 0x7F
	HAL_UART_Transmit(huart, &UARTBL_Start, 1, 10);
 80016e0:	f107 010f 	add.w	r1, r7, #15
 80016e4:	230a      	movs	r3, #10
 80016e6:	2201      	movs	r2, #1
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f00a f994 	bl	800ba16 <HAL_UART_Transmit>
	BL_UART_wait_ACK(huart, 20);
 80016ee:	2114      	movs	r1, #20
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f000 f999 	bl	8001a28 <BL_UART_wait_ACK>

}
 80016f6:	bf00      	nop
 80016f8:	3710      	adds	r7, #16
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	40020000 	.word	0x40020000
 8001704:	40020800 	.word	0x40020800

08001708 <BL_UART_Finish>:

void BL_UART_Finish(){
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0

	//// reserve, pending for any operation that might be unfinished
	HAL_Delay(100);
 800170c:	2064      	movs	r0, #100	; 0x64
 800170e:	f005 f971 	bl	80069f4 <HAL_Delay>
	//// pull BOOT0 back
	HAL_GPIO_WritePin(BOOT0_Trigger_GPIO_PORT, BOOT0_Trigger_GPIO_PIN, GPIO_PIN_RESET);
 8001712:	2200      	movs	r2, #0
 8001714:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001718:	4808      	ldr	r0, [pc, #32]	; (800173c <BL_UART_Finish+0x34>)
 800171a:	f006 f84d 	bl	80077b8 <HAL_GPIO_WritePin>

	//// step 2: Reset Client, push SET NMOS
	HAL_GPIO_WritePin(Client_NRST_Trg_GPIO_PORT, Client_NRST_Trg_GPIO_PIN, GPIO_PIN_SET);
 800171e:	2201      	movs	r2, #1
 8001720:	2140      	movs	r1, #64	; 0x40
 8001722:	4807      	ldr	r0, [pc, #28]	; (8001740 <BL_UART_Finish+0x38>)
 8001724:	f006 f848 	bl	80077b8 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8001728:	2014      	movs	r0, #20
 800172a:	f005 f963 	bl	80069f4 <HAL_Delay>
	HAL_GPIO_WritePin(Client_NRST_Trg_GPIO_PORT, Client_NRST_Trg_GPIO_PIN, GPIO_PIN_RESET);
 800172e:	2200      	movs	r2, #0
 8001730:	2140      	movs	r1, #64	; 0x40
 8001732:	4803      	ldr	r0, [pc, #12]	; (8001740 <BL_UART_Finish+0x38>)
 8001734:	f006 f840 	bl	80077b8 <HAL_GPIO_WritePin>
}
 8001738:	bf00      	nop
 800173a:	bd80      	pop	{r7, pc}
 800173c:	40020000 	.word	0x40020000
 8001740:	40020800 	.word	0x40020800

08001744 <BL_UART_WriteMem>:
	}else{return UB_NACK;}

	return UB_NACK;
}

UARTBootloader_state BL_UART_WriteMem(UART_HandleTypeDef *huart,uint32_t addr32, uint8_t numbyte,const uint8_t *wdatum){
 8001744:	b590      	push	{r4, r7, lr}
 8001746:	b0cb      	sub	sp, #300	; 0x12c
 8001748:	af00      	add	r7, sp, #0
 800174a:	f507 7494 	add.w	r4, r7, #296	; 0x128
 800174e:	f5a4 748e 	sub.w	r4, r4, #284	; 0x11c
 8001752:	6020      	str	r0, [r4, #0]
 8001754:	f507 7094 	add.w	r0, r7, #296	; 0x128
 8001758:	f5a0 7090 	sub.w	r0, r0, #288	; 0x120
 800175c:	6001      	str	r1, [r0, #0]
 800175e:	4611      	mov	r1, r2
 8001760:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8001764:	f5a2 7294 	sub.w	r2, r2, #296	; 0x128
 8001768:	6013      	str	r3, [r2, #0]
 800176a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800176e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8001772:	460a      	mov	r2, r1
 8001774:	701a      	strb	r2, [r3, #0]
	 * - receives the user data ((N + 1) bytes) and the checksum (XOR of N and of all data bytes)
	 * - programs the user data to memory starting from the received address
	 * - at the end of the command, if the write operation was successful, the bootloader
	 * 		transmits the ACK byte; otherwise it transmits an NACK byte to the application and aborts the command.
	 * */
	uint8_t Start_WM[2] = {0x31, 0xCE};
 8001776:	f64c 6331 	movw	r3, #52785	; 0xce31
 800177a:	f8a7 3124 	strh.w	r3, [r7, #292]	; 0x124
	uint8_t response = 0;
 800177e:	2300      	movs	r3, #0
 8001780:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
	uint8_t numbytx[2] = {0};
 8001784:	2300      	movs	r3, #0
 8001786:	f8a7 3120 	strh.w	r3, [r7, #288]	; 0x120
	uint8_t addr8[5] = {0};
 800178a:	2300      	movs	r3, #0
 800178c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8001790:	2300      	movs	r3, #0
 8001792:	f887 311c 	strb.w	r3, [r7, #284]	; 0x11c

	uint8_t bffr[260] = {0};
 8001796:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800179a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800179e:	2200      	movs	r2, #0
 80017a0:	601a      	str	r2, [r3, #0]
 80017a2:	3304      	adds	r3, #4
 80017a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017a8:	2100      	movs	r1, #0
 80017aa:	4618      	mov	r0, r3
 80017ac:	f00b fbb4 	bl	800cf18 <memset>
		uint8_t  U8[4];
		uint32_t U32;
	}loga;

	//// block from do sth in danger zone (option bytes, system memory)
	if(addr32 >= 0x1FFF0000 && addr32 <= 0x1FFFFFFF){
 80017b0:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80017b4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a77      	ldr	r2, [pc, #476]	; (8001998 <BL_UART_WriteMem+0x254>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d909      	bls.n	80017d4 <BL_UART_WriteMem+0x90>
 80017c0:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80017c4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80017ce:	d201      	bcs.n	80017d4 <BL_UART_WriteMem+0x90>
		return UB_ParamERR;
 80017d0:	23bc      	movs	r3, #188	; 0xbc
 80017d2:	e0dc      	b.n	800198e <BL_UART_WriteMem+0x24a>
	}

	loga.U32 = addr32;
 80017d4:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80017d8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80017dc:	f507 7294 	add.w	r2, r7, #296	; 0x128
 80017e0:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 80017e4:	6812      	ldr	r2, [r2, #0]
 80017e6:	601a      	str	r2, [r3, #0]
	//// prepare address byte 3: MSB, byte 6: LSB
	addr8[0] = loga.U8[3];
 80017e8:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80017ec:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80017f0:	78db      	ldrb	r3, [r3, #3]
 80017f2:	f887 3118 	strb.w	r3, [r7, #280]	; 0x118
	addr8[1] = loga.U8[2];
 80017f6:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80017fa:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80017fe:	789b      	ldrb	r3, [r3, #2]
 8001800:	f887 3119 	strb.w	r3, [r7, #281]	; 0x119
	addr8[2] = loga.U8[1];
 8001804:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001808:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800180c:	785b      	ldrb	r3, [r3, #1]
 800180e:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
	addr8[3] = loga.U8[0];
 8001812:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001816:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b

	//// XOR Chksum addr
	addr8[4] = addr8[0]^addr8[1]^addr8[2]^addr8[3];
 8001820:	f897 2118 	ldrb.w	r2, [r7, #280]	; 0x118
 8001824:	f897 3119 	ldrb.w	r3, [r7, #281]	; 0x119
 8001828:	4053      	eors	r3, r2
 800182a:	b2da      	uxtb	r2, r3
 800182c:	f897 311a 	ldrb.w	r3, [r7, #282]	; 0x11a
 8001830:	4053      	eors	r3, r2
 8001832:	b2da      	uxtb	r2, r3
 8001834:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8001838:	4053      	eors	r3, r2
 800183a:	b2db      	uxtb	r3, r3
 800183c:	f887 311c 	strb.w	r3, [r7, #284]	; 0x11c

	//// XOR Chksum  (XOR of N and of all data bytes)
	numbytx[0] = numbyte;
 8001840:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001844:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	f887 3120 	strb.w	r3, [r7, #288]	; 0x120

	bffr[0] = numbyte;
 800184e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001852:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001856:	f507 7294 	add.w	r2, r7, #296	; 0x128
 800185a:	f2a2 1221 	subw	r2, r2, #289	; 0x121
 800185e:	7812      	ldrb	r2, [r2, #0]
 8001860:	701a      	strb	r2, [r3, #0]

	numbytx[1] = numbyte;
 8001862:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001866:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	f887 3121 	strb.w	r3, [r7, #289]	; 0x121
	for(register int i = 0;i <= numbyte;i++){
 8001870:	2400      	movs	r4, #0
 8001872:	e01c      	b.n	80018ae <BL_UART_WriteMem+0x16a>
		numbytx[1] = numbytx[1]^wdatum[i];
 8001874:	f897 2121 	ldrb.w	r2, [r7, #289]	; 0x121
 8001878:	4621      	mov	r1, r4
 800187a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800187e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	440b      	add	r3, r1
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	4053      	eors	r3, r2
 800188a:	b2db      	uxtb	r3, r3
 800188c:	f887 3121 	strb.w	r3, [r7, #289]	; 0x121
		//// try
		bffr[i+1] = wdatum[i]; // bffr[i] = wdatum[i];
 8001890:	4622      	mov	r2, r4
 8001892:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001896:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	441a      	add	r2, r3
 800189e:	1c63      	adds	r3, r4, #1
 80018a0:	7811      	ldrb	r1, [r2, #0]
 80018a2:	f507 7294 	add.w	r2, r7, #296	; 0x128
 80018a6:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
 80018aa:	54d1      	strb	r1, [r2, r3]
	for(register int i = 0;i <= numbyte;i++){
 80018ac:	3401      	adds	r4, #1
 80018ae:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80018b2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	429c      	cmp	r4, r3
 80018ba:	dddb      	ble.n	8001874 <BL_UART_WriteMem+0x130>
	}

	// add chksum to the last buffer,
	bffr[numbyte+2] = numbytx[1];
 80018bc:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80018c0:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	3302      	adds	r3, #2
 80018c8:	f897 1121 	ldrb.w	r1, [r7, #289]	; 0x121
 80018cc:	f507 7294 	add.w	r2, r7, #296	; 0x128
 80018d0:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
 80018d4:	54d1      	strb	r1, [r2, r3]

	//// Bytes 1-2
	HAL_UART_Transmit(huart, &Start_WM[0], 2, 10);
 80018d6:	f507 7192 	add.w	r1, r7, #292	; 0x124
 80018da:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80018de:	f5a3 708e 	sub.w	r0, r3, #284	; 0x11c
 80018e2:	230a      	movs	r3, #10
 80018e4:	2202      	movs	r2, #2
 80018e6:	6800      	ldr	r0, [r0, #0]
 80018e8:	f00a f895 	bl	800ba16 <HAL_UART_Transmit>

	response = BL_UART_wait_ACK(huart, 10);
 80018ec:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80018f0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80018f4:	210a      	movs	r1, #10
 80018f6:	6818      	ldr	r0, [r3, #0]
 80018f8:	f000 f896 	bl	8001a28 <BL_UART_wait_ACK>
 80018fc:	4603      	mov	r3, r0
 80018fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
	if(response == UB_ACK){
 8001902:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001906:	2b79      	cmp	r3, #121	; 0x79
 8001908:	d140      	bne.n	800198c <BL_UART_WriteMem+0x248>

		//// Bytes 3-6 Send ADDR Bytes +
		//// Byte  7 chksum
		HAL_UART_Transmit(huart, &addr8[0], 5, 15);
 800190a:	f507 718c 	add.w	r1, r7, #280	; 0x118
 800190e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001912:	f5a3 708e 	sub.w	r0, r3, #284	; 0x11c
 8001916:	230f      	movs	r3, #15
 8001918:	2205      	movs	r2, #5
 800191a:	6800      	ldr	r0, [r0, #0]
 800191c:	f00a f87b 	bl	800ba16 <HAL_UART_Transmit>

		response = BL_UART_wait_ACK(huart, 10);
 8001920:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001924:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001928:	210a      	movs	r1, #10
 800192a:	6818      	ldr	r0, [r3, #0]
 800192c:	f000 f87c 	bl	8001a28 <BL_UART_wait_ACK>
 8001930:	4603      	mov	r3, r0
 8001932:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
		if(response == UB_ACK){
 8001936:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800193a:	2b79      	cmp	r3, #121	; 0x79
 800193c:	d124      	bne.n	8001988 <BL_UART_WriteMem+0x244>
//			HAL_UART_Transmit(huart, wdatum, numbyte+1, 100);
//			HAL_UART_Transmit(huart, &numbytx[1], 1, 5); //// chksum

			//// byte 8-n numbyte+ Writedata +chksum
			//HAL_UART_Transmit(huart, &numbytx[0], 1, 5);
			HAL_UART_Transmit(huart, bffr, numbyte+3, 100); //
 800193e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001942:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	b29b      	uxth	r3, r3
 800194a:	3303      	adds	r3, #3
 800194c:	b29a      	uxth	r2, r3
 800194e:	f107 0114 	add.w	r1, r7, #20
 8001952:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001956:	f5a3 708e 	sub.w	r0, r3, #284	; 0x11c
 800195a:	2364      	movs	r3, #100	; 0x64
 800195c:	6800      	ldr	r0, [r0, #0]
 800195e:	f00a f85a 	bl	800ba16 <HAL_UART_Transmit>

			response = BL_UART_wait_ACK(huart, 10);
 8001962:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001966:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800196a:	210a      	movs	r1, #10
 800196c:	6818      	ldr	r0, [r3, #0]
 800196e:	f000 f85b 	bl	8001a28 <BL_UART_wait_ACK>
 8001972:	4603      	mov	r3, r0
 8001974:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
			if(response == UB_ACK){
 8001978:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800197c:	2b79      	cmp	r3, #121	; 0x79
 800197e:	d101      	bne.n	8001984 <BL_UART_WriteMem+0x240>
				return UB_ACK;
 8001980:	2379      	movs	r3, #121	; 0x79
 8001982:	e004      	b.n	800198e <BL_UART_WriteMem+0x24a>
			}else{return UB_NACK;}
 8001984:	231f      	movs	r3, #31
 8001986:	e002      	b.n	800198e <BL_UART_WriteMem+0x24a>


		}else{return UB_NACK;}
 8001988:	231f      	movs	r3, #31
 800198a:	e000      	b.n	800198e <BL_UART_WriteMem+0x24a>

	}else{return UB_NACK;}
 800198c:	231f      	movs	r3, #31

	return UB_NACK;
}
 800198e:	4618      	mov	r0, r3
 8001990:	f507 7796 	add.w	r7, r7, #300	; 0x12c
 8001994:	46bd      	mov	sp, r7
 8001996:	bd90      	pop	{r4, r7, pc}
 8001998:	1ffeffff 	.word	0x1ffeffff

0800199c <BL_UART_ExtendEraseMem_SP>:

UARTBootloader_state BL_UART_ExtendEraseMem_SP(UART_HandleTypeDef *huart,UARTBootloader_Erase_CMD erasa){
 800199c:	b580      	push	{r7, lr}
 800199e:	b086      	sub	sp, #24
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	460b      	mov	r3, r1
 80019a6:	807b      	strh	r3, [r7, #2]
	 * @param huart   - Pointer to a UART_HandleTypeDef structure that contains
     *                  the configuration information for the specified UART module.
     * @param erasa N number of pages to be erased, Use UARTBootloader_Erase_CMD as special erase
	 *
	 * */
	uint8_t Start_EER[2] = {0x44, 0xBB};
 80019a8:	f64b 3344 	movw	r3, #47940	; 0xbb44
 80019ac:	82bb      	strh	r3, [r7, #20]
	uint8_t response = 0;
 80019ae:	2300      	movs	r3, #0
 80019b0:	75fb      	strb	r3, [r7, #23]
	uint8_t cmd[3] = {0};
 80019b2:	4b1c      	ldr	r3, [pc, #112]	; (8001a24 <BL_UART_ExtendEraseMem_SP+0x88>)
 80019b4:	881b      	ldrh	r3, [r3, #0]
 80019b6:	823b      	strh	r3, [r7, #16]
 80019b8:	2300      	movs	r3, #0
 80019ba:	74bb      	strb	r3, [r7, #18]
	union{
		uint8_t  U8[2];
		uint16_t U16;
	}loga;

	loga.U16 = erasa;
 80019bc:	887b      	ldrh	r3, [r7, #2]
 80019be:	81bb      	strh	r3, [r7, #12]

	//// prepare Special erase CMD & Chksum
	cmd[0] = loga.U8[1];
 80019c0:	7b7b      	ldrb	r3, [r7, #13]
 80019c2:	743b      	strb	r3, [r7, #16]
	cmd[1] = loga.U8[0];
 80019c4:	7b3b      	ldrb	r3, [r7, #12]
 80019c6:	747b      	strb	r3, [r7, #17]
	cmd[2] = loga.U8[0]^loga.U8[1];
 80019c8:	7b3a      	ldrb	r2, [r7, #12]
 80019ca:	7b7b      	ldrb	r3, [r7, #13]
 80019cc:	4053      	eors	r3, r2
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	74bb      	strb	r3, [r7, #18]

	//// Bytes 1-2
	HAL_UART_Transmit(huart, &Start_EER[0], 2, 10);
 80019d2:	f107 0114 	add.w	r1, r7, #20
 80019d6:	230a      	movs	r3, #10
 80019d8:	2202      	movs	r2, #2
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f00a f81b 	bl	800ba16 <HAL_UART_Transmit>

	response = BL_UART_wait_ACK(huart, 10);
 80019e0:	210a      	movs	r1, #10
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f000 f820 	bl	8001a28 <BL_UART_wait_ACK>
 80019e8:	4603      	mov	r3, r0
 80019ea:	75fb      	strb	r3, [r7, #23]
	if(response == UB_ACK){
 80019ec:	7dfb      	ldrb	r3, [r7, #23]
 80019ee:	2b79      	cmp	r3, #121	; 0x79
 80019f0:	d113      	bne.n	8001a1a <BL_UART_ExtendEraseMem_SP+0x7e>

		//// Bytes 3-4 Send Special erase +
		//// Byte  5 chksum
		HAL_UART_Transmit(huart, &cmd[0], 3, 15);
 80019f2:	f107 0110 	add.w	r1, r7, #16
 80019f6:	230f      	movs	r3, #15
 80019f8:	2203      	movs	r2, #3
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f00a f80b 	bl	800ba16 <HAL_UART_Transmit>

		response = BL_UART_wait_ACK(huart, 20);
 8001a00:	2114      	movs	r1, #20
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f000 f810 	bl	8001a28 <BL_UART_wait_ACK>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	75fb      	strb	r3, [r7, #23]
		if(response == UB_ACK){
 8001a0c:	7dfb      	ldrb	r3, [r7, #23]
 8001a0e:	2b79      	cmp	r3, #121	; 0x79
 8001a10:	d101      	bne.n	8001a16 <BL_UART_ExtendEraseMem_SP+0x7a>
				return UB_ACK;
 8001a12:	2379      	movs	r3, #121	; 0x79
 8001a14:	e002      	b.n	8001a1c <BL_UART_ExtendEraseMem_SP+0x80>

		}else{return UB_NACK;}
 8001a16:	231f      	movs	r3, #31
 8001a18:	e000      	b.n	8001a1c <BL_UART_ExtendEraseMem_SP+0x80>

	}else{return UB_NACK;}
 8001a1a:	231f      	movs	r3, #31

	return UB_NACK;
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3718      	adds	r7, #24
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	0800fe10 	.word	0x0800fe10

08001a28 <BL_UART_wait_ACK>:
	return BL_UART_wait_ACK(huart, 500);

}


UARTBootloader_state BL_UART_wait_ACK(UART_HandleTypeDef *huart, uint16_t timeout){
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b086      	sub	sp, #24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	460b      	mov	r3, r1
 8001a32:	807b      	strh	r3, [r7, #2]
	uint8_t tick = 1;
 8001a34:	2301      	movs	r3, #1
 8001a36:	75fb      	strb	r3, [r7, #23]
	uint8_t response = 0;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	73fb      	strb	r3, [r7, #15]
	uint32_t timestick;

	timestick = HAL_GetTick() + timeout;
 8001a3c:	f004 ffce 	bl	80069dc <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	887b      	ldrh	r3, [r7, #2]
 8001a44:	4413      	add	r3, r2
 8001a46:	613b      	str	r3, [r7, #16]

	while(tick){
 8001a48:	e018      	b.n	8001a7c <BL_UART_wait_ACK+0x54>
		HAL_UART_Receive(huart, &response, 1, 2);
 8001a4a:	f107 010f 	add.w	r1, r7, #15
 8001a4e:	2302      	movs	r3, #2
 8001a50:	2201      	movs	r2, #1
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f00a f871 	bl	800bb3a <HAL_UART_Receive>

		if(response == 0x79){
 8001a58:	7bfb      	ldrb	r3, [r7, #15]
 8001a5a:	2b79      	cmp	r3, #121	; 0x79
 8001a5c:	d101      	bne.n	8001a62 <BL_UART_wait_ACK+0x3a>
			return UB_ACK;
 8001a5e:	2379      	movs	r3, #121	; 0x79
 8001a60:	e010      	b.n	8001a84 <BL_UART_wait_ACK+0x5c>
		}else if(response == 0x1F){
 8001a62:	7bfb      	ldrb	r3, [r7, #15]
 8001a64:	2b1f      	cmp	r3, #31
 8001a66:	d101      	bne.n	8001a6c <BL_UART_wait_ACK+0x44>
			return UB_NACK;
 8001a68:	231f      	movs	r3, #31
 8001a6a:	e00b      	b.n	8001a84 <BL_UART_wait_ACK+0x5c>
		}else{}

		if(HAL_GetTick()>= timestick){
 8001a6c:	f004 ffb6 	bl	80069dc <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d801      	bhi.n	8001a7c <BL_UART_wait_ACK+0x54>
			return UB_Timeout;
 8001a78:	23ab      	movs	r3, #171	; 0xab
 8001a7a:	e003      	b.n	8001a84 <BL_UART_wait_ACK+0x5c>
	while(tick){
 8001a7c:	7dfb      	ldrb	r3, [r7, #23]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d1e3      	bne.n	8001a4a <BL_UART_wait_ACK+0x22>
		}
	}
	return UB_NACK;
 8001a82:	231f      	movs	r3, #31
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3718      	adds	r7, #24
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a90:	b09a      	sub	sp, #104	; 0x68
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a94:	f004 ff3c 	bl	8006910 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a98:	f000 fa3c 	bl	8001f14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a9c:	f000 fc1e 	bl	80022dc <MX_GPIO_Init>
  MX_DMA_Init();
 8001aa0:	f000 fbfc 	bl	800229c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001aa4:	f000 fba6 	bl	80021f4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001aa8:	f000 fa9c 	bl	8001fe4 <MX_I2C1_Init>
  MX_USART6_UART_Init();
 8001aac:	f000 fbcc 	bl	8002248 <MX_USART6_UART_Init>
  MX_SPI3_Init();
 8001ab0:	f000 fac6 	bl	8002040 <MX_SPI3_Init>
  MX_TIM10_Init();
 8001ab4:	f000 fb4e 	bl	8002154 <MX_TIM10_Init>
  MX_USART1_UART_Init();
 8001ab8:	f000 fb70 	bl	800219c <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8001abc:	f000 faf6 	bl	80020ac <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /// Timers Start
  HAL_TIM_Base_Start_IT(&htim10); // buzzer timer
 8001ac0:	487b      	ldr	r0, [pc, #492]	; (8001cb0 <main+0x224>)
 8001ac2:	f009 fb3d 	bl	800b140 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8001ac6:	2104      	movs	r1, #4
 8001ac8:	487a      	ldr	r0, [pc, #488]	; (8001cb4 <main+0x228>)
 8001aca:	f009 fc70 	bl	800b3ae <HAL_TIM_Encoder_Start>
  //// start QEI counter from the center 32768
  TIM3->CNT = 0x8000;
 8001ace:	4a7a      	ldr	r2, [pc, #488]	; (8001cb8 <main+0x22c>)
 8001ad0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ad4:	6253      	str	r3, [r2, #36]	; 0x24
  knobtick[0] = TIM3->CNT;
 8001ad6:	4b78      	ldr	r3, [pc, #480]	; (8001cb8 <main+0x22c>)
 8001ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	4a77      	ldr	r2, [pc, #476]	; (8001cbc <main+0x230>)
 8001ade:	8013      	strh	r3, [r2, #0]

  //// buzzer raram setting
  buzzr.flag = 1;
 8001ae0:	4a77      	ldr	r2, [pc, #476]	; (8001cc0 <main+0x234>)
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	7013      	strb	r3, [r2, #0]
  buzzr.priod_up = 250;
 8001ae6:	4a76      	ldr	r2, [pc, #472]	; (8001cc0 <main+0x234>)
 8001ae8:	23fa      	movs	r3, #250	; 0xfa
 8001aea:	8053      	strh	r3, [r2, #2]
  buzzr.priod_dn = 100;
 8001aec:	4a74      	ldr	r2, [pc, #464]	; (8001cc0 <main+0x234>)
 8001aee:	2364      	movs	r3, #100	; 0x64
 8001af0:	8093      	strh	r3, [r2, #4]
  buzzr.timestamp = 0;
 8001af2:	4a73      	ldr	r2, [pc, #460]	; (8001cc0 <main+0x234>)
 8001af4:	2300      	movs	r3, #0
 8001af6:	6093      	str	r3, [r2, #8]

  stboxp.flag_start = 0;
 8001af8:	4a72      	ldr	r2, [pc, #456]	; (8001cc4 <main+0x238>)
 8001afa:	2300      	movs	r3, #0
 8001afc:	7013      	strb	r3, [r2, #0]
  stboxp.choice_set = bpoxy_lobby;
 8001afe:	4a71      	ldr	r2, [pc, #452]	; (8001cc4 <main+0x238>)
 8001b00:	2301      	movs	r3, #1
 8001b02:	7053      	strb	r3, [r2, #1]
  stboxp.ch_is = 0;
 8001b04:	4a6f      	ldr	r2, [pc, #444]	; (8001cc4 <main+0x238>)
 8001b06:	2300      	movs	r3, #0
 8001b08:	7093      	strb	r3, [r2, #2]

  gScr.counter_overcurrent = 0;
 8001b0a:	4a6f      	ldr	r2, [pc, #444]	; (8001cc8 <main+0x23c>)
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	7053      	strb	r3, [r2, #1]
  gScr.fullflag = 0;
 8001b10:	4a6d      	ldr	r2, [pc, #436]	; (8001cc8 <main+0x23c>)
 8001b12:	2300      	movs	r3, #0
 8001b14:	7013      	strb	r3, [r2, #0]

  k_flag.cnt = 0; k_flag.dn = 0; k_flag.up = 0;
 8001b16:	4a6d      	ldr	r2, [pc, #436]	; (8001ccc <main+0x240>)
 8001b18:	2300      	movs	r3, #0
 8001b1a:	7093      	strb	r3, [r2, #2]
 8001b1c:	4a6b      	ldr	r2, [pc, #428]	; (8001ccc <main+0x240>)
 8001b1e:	2300      	movs	r3, #0
 8001b20:	7053      	strb	r3, [r2, #1]
 8001b22:	4a6a      	ldr	r2, [pc, #424]	; (8001ccc <main+0x240>)
 8001b24:	2300      	movs	r3, #0
 8001b26:	7013      	strb	r3, [r2, #0]

  //// make sure
  HAL_GPIO_WritePin(Client_NRST_Trg_GPIO_PORT, Client_NRST_Trg_GPIO_PIN, GPIO_PIN_RESET);
 8001b28:	2200      	movs	r2, #0
 8001b2a:	2140      	movs	r1, #64	; 0x40
 8001b2c:	4868      	ldr	r0, [pc, #416]	; (8001cd0 <main+0x244>)
 8001b2e:	f005 fe43 	bl	80077b8 <HAL_GPIO_WritePin>


  ili9341_Init();
 8001b32:	f003 fea3 	bl	800587c <ili9341_Init>
  ili9341_DisplayOn();
 8001b36:	f003 fe85 	bl	8005844 <ili9341_DisplayOn>
//  ili9341_FillRect(50, 20, 50, 20, cl_RED);
//  ili9341_FillRect(100, 20, 50, 20, cl_GREEN);
//  ili9341_FillRect(150, 20, 50, 20, cl_BLUE);

#ifdef INA219_Wrk
  INA219_INIT_Calibrate(&hi2c1, INA219_ADDR_1);
 8001b3a:	2180      	movs	r1, #128	; 0x80
 8001b3c:	4865      	ldr	r0, [pc, #404]	; (8001cd4 <main+0x248>)
 8001b3e:	f7ff fa2f 	bl	8000fa0 <INA219_INIT_Calibrate>
  INA219_INIT_Calibrate(&hi2c1, INA219_ADDR_2);
 8001b42:	2188      	movs	r1, #136	; 0x88
 8001b44:	4863      	ldr	r0, [pc, #396]	; (8001cd4 <main+0x248>)
 8001b46:	f7ff fa2b 	bl	8000fa0 <INA219_INIT_Calibrate>
//
//  INA219_INIT(&hi2c1, INA219_ADDR_1, cofgra);
//  INA219_Calibrate(&hi2c1, INA219_ADDR_1);
#endif

  char temp[]="----------------- F411_Verita_Master --------------------\r\n";
 8001b4a:	4b63      	ldr	r3, [pc, #396]	; (8001cd8 <main+0x24c>)
 8001b4c:	f107 052c 	add.w	r5, r7, #44	; 0x2c
 8001b50:	461c      	mov	r4, r3
 8001b52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b5e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001b62:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 8001b66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7fe fb38 	bl	80001e0 <strlen>
 8001b70:	4603      	mov	r3, r0
 8001b72:	b29a      	uxth	r2, r3
 8001b74:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001b78:	230a      	movs	r3, #10
 8001b7a:	4858      	ldr	r0, [pc, #352]	; (8001cdc <main+0x250>)
 8001b7c:	f009 ff4b 	bl	800ba16 <HAL_UART_Transmit>


////  ------------- UART Recieve --------------------------
   HAL_UART_Receive_DMA(&huart6, RxBufferMtCl, RxbufferSize_VRT);
 8001b80:	2209      	movs	r2, #9
 8001b82:	4957      	ldr	r1, [pc, #348]	; (8001ce0 <main+0x254>)
 8001b84:	4857      	ldr	r0, [pc, #348]	; (8001ce4 <main+0x258>)
 8001b86:	f00a f87a 	bl	800bc7e <HAL_UART_Receive_DMA>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  //// -------- buzzer & Button -----------------
	  Button_machine();
 8001b8a:	f000 fd55 	bl	8002638 <Button_machine>
	  //Rx_Verita_engine(RxBufferMtCl, &VRB_CL); //  Use callback instead
	  //Tx_Rq_Verita_engine(&huart6, &VRB_CL);
	  //// ----------------------------------------------------


	  if (HAL_GetTick() >= timestamp_buzbtn){
 8001b8e:	f004 ff25 	bl	80069dc <HAL_GetTick>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2200      	movs	r2, #0
 8001b96:	469a      	mov	sl, r3
 8001b98:	4693      	mov	fp, r2
 8001b9a:	4b53      	ldr	r3, [pc, #332]	; (8001ce8 <main+0x25c>)
 8001b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba0:	4592      	cmp	sl, r2
 8001ba2:	eb7b 0303 	sbcs.w	r3, fp, r3
 8001ba6:	f0c0 80a5 	bcc.w	8001cf4 <main+0x268>
		timestamp_buzbtn += 20;
 8001baa:	4b4f      	ldr	r3, [pc, #316]	; (8001ce8 <main+0x25c>)
 8001bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bb0:	f112 0114 	adds.w	r1, r2, #20
 8001bb4:	6239      	str	r1, [r7, #32]
 8001bb6:	f143 0300 	adc.w	r3, r3, #0
 8001bba:	627b      	str	r3, [r7, #36]	; 0x24
 8001bbc:	4b4a      	ldr	r3, [pc, #296]	; (8001ce8 <main+0x25c>)
 8001bbe:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8001bc2:	e9c3 1200 	strd	r1, r2, [r3]

		knob_rotter();
 8001bc6:	f000 fd95 	bl	80026f4 <knob_rotter>
		//running_box();
		//if(stboxp.choice_set){

		switch (boxpoint_runner){
 8001bca:	4b48      	ldr	r3, [pc, #288]	; (8001cec <main+0x260>)
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d045      	beq.n	8001c5e <main+0x1d2>

		default:
		case a_wait:

			if(k_flag.up){
 8001bd2:	4b3e      	ldr	r3, [pc, #248]	; (8001ccc <main+0x240>)
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d00b      	beq.n	8001bf2 <main+0x166>

				stboxp.ch_is++;
 8001bda:	4b3a      	ldr	r3, [pc, #232]	; (8001cc4 <main+0x238>)
 8001bdc:	789b      	ldrb	r3, [r3, #2]
 8001bde:	3301      	adds	r3, #1
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	4a38      	ldr	r2, [pc, #224]	; (8001cc4 <main+0x238>)
 8001be4:	7093      	strb	r3, [r2, #2]

				k_flag.up = 0;
 8001be6:	4a39      	ldr	r2, [pc, #228]	; (8001ccc <main+0x240>)
 8001be8:	2300      	movs	r3, #0
 8001bea:	7013      	strb	r3, [r2, #0]
				boxpoint_runner = a_change;}
 8001bec:	4a3f      	ldr	r2, [pc, #252]	; (8001cec <main+0x260>)
 8001bee:	2301      	movs	r3, #1
 8001bf0:	7013      	strb	r3, [r2, #0]
			if(k_flag.dn){
 8001bf2:	4b36      	ldr	r3, [pc, #216]	; (8001ccc <main+0x240>)
 8001bf4:	785b      	ldrb	r3, [r3, #1]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d01d      	beq.n	8001c36 <main+0x1aa>
				//stboxp.ch_is--;
				//stboxp.ch_is = (stboxp.ch_is < 0) ? bposxy[stboxp.choice_set].n_s - 1 : stboxp.ch_is;
				//if(stboxp.ch_is  < 0){
				//	stboxp.ch_is  = bposxy[stboxp.choice_set].n_s - 1;}

				if(stboxp.ch_is == 0){
 8001bfa:	4b32      	ldr	r3, [pc, #200]	; (8001cc4 <main+0x238>)
 8001bfc:	789b      	ldrb	r3, [r3, #2]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d10d      	bne.n	8001c1e <main+0x192>
						stboxp.ch_is  = bposxy[stboxp.choice_set].n_s - 1;}
 8001c02:	4b30      	ldr	r3, [pc, #192]	; (8001cc4 <main+0x238>)
 8001c04:	785b      	ldrb	r3, [r3, #1]
 8001c06:	4619      	mov	r1, r3
 8001c08:	4a39      	ldr	r2, [pc, #228]	; (8001cf0 <main+0x264>)
 8001c0a:	232a      	movs	r3, #42	; 0x2a
 8001c0c:	fb01 f303 	mul.w	r3, r1, r3
 8001c10:	4413      	add	r3, r2
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	3b01      	subs	r3, #1
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	4a2a      	ldr	r2, [pc, #168]	; (8001cc4 <main+0x238>)
 8001c1a:	7093      	strb	r3, [r2, #2]
 8001c1c:	e005      	b.n	8001c2a <main+0x19e>
				else{stboxp.ch_is--;}
 8001c1e:	4b29      	ldr	r3, [pc, #164]	; (8001cc4 <main+0x238>)
 8001c20:	789b      	ldrb	r3, [r3, #2]
 8001c22:	3b01      	subs	r3, #1
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	4a27      	ldr	r2, [pc, #156]	; (8001cc4 <main+0x238>)
 8001c28:	7093      	strb	r3, [r2, #2]

				 k_flag.dn = 0;
 8001c2a:	4a28      	ldr	r2, [pc, #160]	; (8001ccc <main+0x240>)
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	7053      	strb	r3, [r2, #1]
				 boxpoint_runner = a_change;}
 8001c30:	4a2e      	ldr	r2, [pc, #184]	; (8001cec <main+0x260>)
 8001c32:	2301      	movs	r3, #1
 8001c34:	7013      	strb	r3, [r2, #0]

			stboxp.ch_is %= bposxy[stboxp.choice_set].n_s; // don't be more than spec of Grandstate sub
 8001c36:	4b23      	ldr	r3, [pc, #140]	; (8001cc4 <main+0x238>)
 8001c38:	7898      	ldrb	r0, [r3, #2]
 8001c3a:	4b22      	ldr	r3, [pc, #136]	; (8001cc4 <main+0x238>)
 8001c3c:	785b      	ldrb	r3, [r3, #1]
 8001c3e:	4619      	mov	r1, r3
 8001c40:	4a2b      	ldr	r2, [pc, #172]	; (8001cf0 <main+0x264>)
 8001c42:	232a      	movs	r3, #42	; 0x2a
 8001c44:	fb01 f303 	mul.w	r3, r1, r3
 8001c48:	4413      	add	r3, r2
 8001c4a:	781a      	ldrb	r2, [r3, #0]
 8001c4c:	fbb0 f3f2 	udiv	r3, r0, r2
 8001c50:	fb02 f303 	mul.w	r3, r2, r3
 8001c54:	1ac3      	subs	r3, r0, r3
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	4a1a      	ldr	r2, [pc, #104]	; (8001cc4 <main+0x238>)
 8001c5a:	7093      	strb	r3, [r2, #2]

			break;
 8001c5c:	e04b      	b.n	8001cf6 <main+0x26a>

		case a_change:

			box_pointer(bposxy[stboxp.choice_set].x[stboxp.ch_is], bposxy[stboxp.choice_set].y[stboxp.ch_is]);
 8001c5e:	4b19      	ldr	r3, [pc, #100]	; (8001cc4 <main+0x238>)
 8001c60:	785b      	ldrb	r3, [r3, #1]
 8001c62:	4618      	mov	r0, r3
 8001c64:	4b17      	ldr	r3, [pc, #92]	; (8001cc4 <main+0x238>)
 8001c66:	789b      	ldrb	r3, [r3, #2]
 8001c68:	461c      	mov	r4, r3
 8001c6a:	4921      	ldr	r1, [pc, #132]	; (8001cf0 <main+0x264>)
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	0052      	lsls	r2, r2, #1
 8001c70:	4402      	add	r2, r0
 8001c72:	00d3      	lsls	r3, r2, #3
 8001c74:	1a9b      	subs	r3, r3, r2
 8001c76:	4423      	add	r3, r4
 8001c78:	005b      	lsls	r3, r3, #1
 8001c7a:	440b      	add	r3, r1
 8001c7c:	885d      	ldrh	r5, [r3, #2]
 8001c7e:	4b11      	ldr	r3, [pc, #68]	; (8001cc4 <main+0x238>)
 8001c80:	785b      	ldrb	r3, [r3, #1]
 8001c82:	4619      	mov	r1, r3
 8001c84:	4b0f      	ldr	r3, [pc, #60]	; (8001cc4 <main+0x238>)
 8001c86:	789b      	ldrb	r3, [r3, #2]
 8001c88:	461c      	mov	r4, r3
 8001c8a:	4819      	ldr	r0, [pc, #100]	; (8001cf0 <main+0x264>)
 8001c8c:	460a      	mov	r2, r1
 8001c8e:	0052      	lsls	r2, r2, #1
 8001c90:	440a      	add	r2, r1
 8001c92:	00d3      	lsls	r3, r2, #3
 8001c94:	1a9b      	subs	r3, r3, r2
 8001c96:	4423      	add	r3, r4
 8001c98:	3308      	adds	r3, #8
 8001c9a:	005b      	lsls	r3, r3, #1
 8001c9c:	4403      	add	r3, r0
 8001c9e:	88db      	ldrh	r3, [r3, #6]
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	4628      	mov	r0, r5
 8001ca4:	f000 fc28 	bl	80024f8 <box_pointer>
			boxpoint_runner = a_wait;
 8001ca8:	4a10      	ldr	r2, [pc, #64]	; (8001cec <main+0x260>)
 8001caa:	2300      	movs	r3, #0
 8001cac:	7013      	strb	r3, [r2, #0]
			break;
 8001cae:	e022      	b.n	8001cf6 <main+0x26a>
 8001cb0:	20000544 	.word	0x20000544
 8001cb4:	200004fc 	.word	0x200004fc
 8001cb8:	40000400 	.word	0x40000400
 8001cbc:	2000088c 	.word	0x2000088c
 8001cc0:	20000878 	.word	0x20000878
 8001cc4:	200008a8 	.word	0x200008a8
 8001cc8:	20000894 	.word	0x20000894
 8001ccc:	20000890 	.word	0x20000890
 8001cd0:	40020800 	.word	0x40020800
 8001cd4:	20000450 	.word	0x20000450
 8001cd8:	0800fe14 	.word	0x0800fe14
 8001cdc:	200005d0 	.word	0x200005d0
 8001ce0:	200007e8 	.word	0x200007e8
 8001ce4:	20000614 	.word	0x20000614
 8001ce8:	20000868 	.word	0x20000868
 8001cec:	200008a7 	.word	0x200008a7
 8001cf0:	2000017c 	.word	0x2000017c

			}
		//}


	  }// timestamp_dis
 8001cf4:	bf00      	nop


	  if (HAL_GetTick() >= timestamp_one){
 8001cf6:	f004 fe71 	bl	80069dc <HAL_GetTick>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	61bb      	str	r3, [r7, #24]
 8001d00:	61fa      	str	r2, [r7, #28]
 8001d02:	4b78      	ldr	r3, [pc, #480]	; (8001ee4 <main+0x458>)
 8001d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d08:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8001d0c:	4621      	mov	r1, r4
 8001d0e:	4291      	cmp	r1, r2
 8001d10:	4629      	mov	r1, r5
 8001d12:	eb71 0303 	sbcs.w	r3, r1, r3
 8001d16:	d313      	bcc.n	8001d40 <main+0x2b4>
		  timestamp_one += 500;
 8001d18:	4b72      	ldr	r3, [pc, #456]	; (8001ee4 <main+0x458>)
 8001d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d1e:	f512 71fa 	adds.w	r1, r2, #500	; 0x1f4
 8001d22:	6139      	str	r1, [r7, #16]
 8001d24:	f143 0300 	adc.w	r3, r3, #0
 8001d28:	617b      	str	r3, [r7, #20]
 8001d2a:	4b6e      	ldr	r3, [pc, #440]	; (8001ee4 <main+0x458>)
 8001d2c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001d30:	e9c3 1200 	strd	r1, r2, [r3]
		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001d34:	2120      	movs	r1, #32
 8001d36:	486c      	ldr	r0, [pc, #432]	; (8001ee8 <main+0x45c>)
 8001d38:	f005 fd57 	bl	80077ea <HAL_GPIO_TogglePin>

		  GrandState_Verita();
 8001d3c:	f000 fec4 	bl	8002ac8 <GrandState_Verita>

		  } // timestamp_one


	  if(HAL_GetTick() >= timestamp_sensors + 125){
 8001d40:	f004 fe4c 	bl	80069dc <HAL_GetTick>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2200      	movs	r2, #0
 8001d48:	60bb      	str	r3, [r7, #8]
 8001d4a:	60fa      	str	r2, [r7, #12]
 8001d4c:	4b67      	ldr	r3, [pc, #412]	; (8001eec <main+0x460>)
 8001d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d52:	f112 087d 	adds.w	r8, r2, #125	; 0x7d
 8001d56:	f143 0900 	adc.w	r9, r3, #0
 8001d5a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001d5e:	460b      	mov	r3, r1
 8001d60:	4543      	cmp	r3, r8
 8001d62:	4613      	mov	r3, r2
 8001d64:	eb73 0309 	sbcs.w	r3, r3, r9
 8001d68:	f4ff af0f 	bcc.w	8001b8a <main+0xfe>
		  timestamp_sensors = HAL_GetTick(); // in case this func is temporary terminate, can continue
 8001d6c:	f004 fe36 	bl	80069dc <HAL_GetTick>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2200      	movs	r2, #0
 8001d74:	603b      	str	r3, [r7, #0]
 8001d76:	607a      	str	r2, [r7, #4]
 8001d78:	4b5c      	ldr	r3, [pc, #368]	; (8001eec <main+0x460>)
 8001d7a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001d7e:	e9c3 1200 	strd	r1, r2, [r3]
		   *  - MCP3208 CH[0..7]
		   *  - Client's MCU temp rwquest
		   * */

		  //if(GrandState != pre_gpio_chk){
		  if(GrandState == monitor || GrandState == gpio_chk){
 8001d82:	4b5b      	ldr	r3, [pc, #364]	; (8001ef0 <main+0x464>)
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	2b0c      	cmp	r3, #12
 8001d88:	d003      	beq.n	8001d92 <main+0x306>
 8001d8a:	4b59      	ldr	r3, [pc, #356]	; (8001ef0 <main+0x464>)
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	2b0e      	cmp	r3, #14
 8001d90:	d104      	bne.n	8001d9c <main+0x310>
			  Tx_UART_Verita_Command(&huart6, VRC_Request, VR_CPU_Temp);// request first > pending > convert
 8001d92:	2211      	movs	r2, #17
 8001d94:	21a0      	movs	r1, #160	; 0xa0
 8001d96:	4857      	ldr	r0, [pc, #348]	; (8001ef4 <main+0x468>)
 8001d98:	f7ff fc4a 	bl	8001630 <Tx_UART_Verita_Command>
		  }


		  inata.Bus_V   = INA219Read_BusV(&hi2c1, INA219_ADDR_1);
 8001d9c:	2180      	movs	r1, #128	; 0x80
 8001d9e:	4856      	ldr	r0, [pc, #344]	; (8001ef8 <main+0x46c>)
 8001da0:	f7ff f9ae 	bl	8001100 <INA219Read_BusV>
 8001da4:	4603      	mov	r3, r0
 8001da6:	4a55      	ldr	r2, [pc, #340]	; (8001efc <main+0x470>)
 8001da8:	8213      	strh	r3, [r2, #16]
		  inata.CURRENT = INA219Read_Current(&hi2c1, INA219_ADDR_1);
 8001daa:	2180      	movs	r1, #128	; 0x80
 8001dac:	4852      	ldr	r0, [pc, #328]	; (8001ef8 <main+0x46c>)
 8001dae:	f7ff f9cf 	bl	8001150 <INA219Read_Current>
 8001db2:	4603      	mov	r3, r0
 8001db4:	b21b      	sxth	r3, r3
 8001db6:	4a51      	ldr	r2, [pc, #324]	; (8001efc <main+0x470>)
 8001db8:	8113      	strh	r3, [r2, #8]
		  inata.POWER   = INA219Read_Power(&hi2c1, INA219_ADDR_1);
 8001dba:	2180      	movs	r1, #128	; 0x80
 8001dbc:	484e      	ldr	r0, [pc, #312]	; (8001ef8 <main+0x46c>)
 8001dbe:	f7ff fa27 	bl	8001210 <INA219Read_Power>
 8001dc2:	eef0 7a40 	vmov.f32	s15, s0
 8001dc6:	4b4d      	ldr	r3, [pc, #308]	; (8001efc <main+0x470>)
 8001dc8:	edc3 7a03 	vstr	s15, [r3, #12]
		  inata.SHUNT_V = INA219Read_ShuntV(&hi2c1, INA219_ADDR_1);
 8001dcc:	2180      	movs	r1, #128	; 0x80
 8001dce:	484a      	ldr	r0, [pc, #296]	; (8001ef8 <main+0x46c>)
 8001dd0:	f7ff f9e2 	bl	8001198 <INA219Read_ShuntV>
 8001dd4:	eef0 7a40 	vmov.f32	s15, s0
 8001dd8:	4b48      	ldr	r3, [pc, #288]	; (8001efc <main+0x470>)
 8001dda:	edc3 7a01 	vstr	s15, [r3, #4]

		  inatb.Bus_V   = INA219Read_BusV(&hi2c1, INA219_ADDR_2);
 8001dde:	2188      	movs	r1, #136	; 0x88
 8001de0:	4845      	ldr	r0, [pc, #276]	; (8001ef8 <main+0x46c>)
 8001de2:	f7ff f98d 	bl	8001100 <INA219Read_BusV>
 8001de6:	4603      	mov	r3, r0
 8001de8:	4a45      	ldr	r2, [pc, #276]	; (8001f00 <main+0x474>)
 8001dea:	8213      	strh	r3, [r2, #16]
		  inatb.CURRENT = INA219Read_Current(&hi2c1, INA219_ADDR_2);
 8001dec:	2188      	movs	r1, #136	; 0x88
 8001dee:	4842      	ldr	r0, [pc, #264]	; (8001ef8 <main+0x46c>)
 8001df0:	f7ff f9ae 	bl	8001150 <INA219Read_Current>
 8001df4:	4603      	mov	r3, r0
 8001df6:	b21b      	sxth	r3, r3
 8001df8:	4a41      	ldr	r2, [pc, #260]	; (8001f00 <main+0x474>)
 8001dfa:	8113      	strh	r3, [r2, #8]
		  inatb.POWER   = INA219Read_Power(&hi2c1, INA219_ADDR_2);
 8001dfc:	2188      	movs	r1, #136	; 0x88
 8001dfe:	483e      	ldr	r0, [pc, #248]	; (8001ef8 <main+0x46c>)
 8001e00:	f7ff fa06 	bl	8001210 <INA219Read_Power>
 8001e04:	eef0 7a40 	vmov.f32	s15, s0
 8001e08:	4b3d      	ldr	r3, [pc, #244]	; (8001f00 <main+0x474>)
 8001e0a:	edc3 7a03 	vstr	s15, [r3, #12]
		  inatb.SHUNT_V = INA219Read_ShuntV(&hi2c1, INA219_ADDR_2);
 8001e0e:	2188      	movs	r1, #136	; 0x88
 8001e10:	4839      	ldr	r0, [pc, #228]	; (8001ef8 <main+0x46c>)
 8001e12:	f7ff f9c1 	bl	8001198 <INA219Read_ShuntV>
 8001e16:	eef0 7a40 	vmov.f32	s15, s0
 8001e1a:	4b39      	ldr	r3, [pc, #228]	; (8001f00 <main+0x474>)
 8001e1c:	edc3 7a01 	vstr	s15, [r3, #4]

		  mcp_read.raw[0] = MCP3208_READ_8_DataSPI(&hspi3, M8_CH0);
 8001e20:	2118      	movs	r1, #24
 8001e22:	4838      	ldr	r0, [pc, #224]	; (8001f04 <main+0x478>)
 8001e24:	f7ff fa3e 	bl	80012a4 <MCP3208_READ_8_DataSPI>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	4a37      	ldr	r2, [pc, #220]	; (8001f08 <main+0x47c>)
 8001e2c:	8013      	strh	r3, [r2, #0]
		  mcp_read.raw[1] = MCP3208_READ_8_DataSPI(&hspi3, M8_CH1);
 8001e2e:	2119      	movs	r1, #25
 8001e30:	4834      	ldr	r0, [pc, #208]	; (8001f04 <main+0x478>)
 8001e32:	f7ff fa37 	bl	80012a4 <MCP3208_READ_8_DataSPI>
 8001e36:	4603      	mov	r3, r0
 8001e38:	4a33      	ldr	r2, [pc, #204]	; (8001f08 <main+0x47c>)
 8001e3a:	8053      	strh	r3, [r2, #2]
		  mcp_read.raw[2] = MCP3208_READ_8_DataSPI(&hspi3, M8_CH2);
 8001e3c:	211a      	movs	r1, #26
 8001e3e:	4831      	ldr	r0, [pc, #196]	; (8001f04 <main+0x478>)
 8001e40:	f7ff fa30 	bl	80012a4 <MCP3208_READ_8_DataSPI>
 8001e44:	4603      	mov	r3, r0
 8001e46:	4a30      	ldr	r2, [pc, #192]	; (8001f08 <main+0x47c>)
 8001e48:	8093      	strh	r3, [r2, #4]
		  mcp_read.raw[3] = MCP3208_READ_8_DataSPI(&hspi3, M8_CH3);
 8001e4a:	211b      	movs	r1, #27
 8001e4c:	482d      	ldr	r0, [pc, #180]	; (8001f04 <main+0x478>)
 8001e4e:	f7ff fa29 	bl	80012a4 <MCP3208_READ_8_DataSPI>
 8001e52:	4603      	mov	r3, r0
 8001e54:	4a2c      	ldr	r2, [pc, #176]	; (8001f08 <main+0x47c>)
 8001e56:	80d3      	strh	r3, [r2, #6]
		  mcp_read.raw[4] = MCP3208_READ_8_DataSPI(&hspi3, M8_CH4);
 8001e58:	211c      	movs	r1, #28
 8001e5a:	482a      	ldr	r0, [pc, #168]	; (8001f04 <main+0x478>)
 8001e5c:	f7ff fa22 	bl	80012a4 <MCP3208_READ_8_DataSPI>
 8001e60:	4603      	mov	r3, r0
 8001e62:	4a29      	ldr	r2, [pc, #164]	; (8001f08 <main+0x47c>)
 8001e64:	8113      	strh	r3, [r2, #8]
		  mcp_read.raw[5] = MCP3208_READ_8_DataSPI(&hspi3, M8_CH5);
 8001e66:	211d      	movs	r1, #29
 8001e68:	4826      	ldr	r0, [pc, #152]	; (8001f04 <main+0x478>)
 8001e6a:	f7ff fa1b 	bl	80012a4 <MCP3208_READ_8_DataSPI>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	4a25      	ldr	r2, [pc, #148]	; (8001f08 <main+0x47c>)
 8001e72:	8153      	strh	r3, [r2, #10]
		  mcp_read.raw[6] = MCP3208_READ_8_DataSPI(&hspi3, M8_CH6);
 8001e74:	211e      	movs	r1, #30
 8001e76:	4823      	ldr	r0, [pc, #140]	; (8001f04 <main+0x478>)
 8001e78:	f7ff fa14 	bl	80012a4 <MCP3208_READ_8_DataSPI>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	4a22      	ldr	r2, [pc, #136]	; (8001f08 <main+0x47c>)
 8001e80:	8193      	strh	r3, [r2, #12]
		  mcp_read.raw[7] = MCP3208_READ_8_DataSPI(&hspi3, M8_CH7);
 8001e82:	211f      	movs	r1, #31
 8001e84:	481f      	ldr	r0, [pc, #124]	; (8001f04 <main+0x478>)
 8001e86:	f7ff fa0d 	bl	80012a4 <MCP3208_READ_8_DataSPI>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	4a1e      	ldr	r2, [pc, #120]	; (8001f08 <main+0x47c>)
 8001e8e:	81d3      	strh	r3, [r2, #14]

		  for(register int i = 0;i <= 7;i++){
 8001e90:	2400      	movs	r4, #0
 8001e92:	e00e      	b.n	8001eb2 <main+0x426>
			  mcp_read.cv[i] = MCP320x_ADCbit_to_Volt(mcp_read.raw[i]);
 8001e94:	4b1c      	ldr	r3, [pc, #112]	; (8001f08 <main+0x47c>)
 8001e96:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f7ff fa38 	bl	8001310 <MCP320x_ADCbit_to_Volt>
 8001ea0:	eef0 7a40 	vmov.f32	s15, s0
 8001ea4:	4a18      	ldr	r2, [pc, #96]	; (8001f08 <main+0x47c>)
 8001ea6:	1d23      	adds	r3, r4, #4
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	4413      	add	r3, r2
 8001eac:	edc3 7a00 	vstr	s15, [r3]
		  for(register int i = 0;i <= 7;i++){
 8001eb0:	3401      	adds	r4, #1
 8001eb2:	2c07      	cmp	r4, #7
 8001eb4:	ddee      	ble.n	8001e94 <main+0x408>
		  }


		  client_temp_mcuCC = TempEquat(ADCTVolta(VRB_CL.Mark.cputemp));
 8001eb6:	4b15      	ldr	r3, [pc, #84]	; (8001f0c <main+0x480>)
 8001eb8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f003 f81f 	bl	8004f00 <ADCTVolta>
 8001ec2:	eef0 7a40 	vmov.f32	s15, s0
 8001ec6:	eeb0 0a67 	vmov.f32	s0, s15
 8001eca:	f003 f849 	bl	8004f60 <TempEquat>
 8001ece:	eef0 7a40 	vmov.f32	s15, s0
 8001ed2:	4b0f      	ldr	r3, [pc, #60]	; (8001f10 <main+0x484>)
 8001ed4:	edc3 7a00 	vstr	s15, [r3]


		  Protection_machine();
 8001ed8:	f000 fc5e 	bl	8002798 <Protection_machine>
		  manual_relay();
 8001edc:	f000 fca8 	bl	8002830 <manual_relay>
	  Button_machine();
 8001ee0:	e653      	b.n	8001b8a <main+0xfe>
 8001ee2:	bf00      	nop
 8001ee4:	20000858 	.word	0x20000858
 8001ee8:	40020000 	.word	0x40020000
 8001eec:	20000860 	.word	0x20000860
 8001ef0:	20000006 	.word	0x20000006
 8001ef4:	20000614 	.word	0x20000614
 8001ef8:	20000450 	.word	0x20000450
 8001efc:	200007f8 	.word	0x200007f8
 8001f00:	20000810 	.word	0x20000810
 8001f04:	200004a4 	.word	0x200004a4
 8001f08:	20000828 	.word	0x20000828
 8001f0c:	20000784 	.word	0x20000784
 8001f10:	200007f4 	.word	0x200007f4

08001f14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b094      	sub	sp, #80	; 0x50
 8001f18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f1a:	f107 0320 	add.w	r3, r7, #32
 8001f1e:	2230      	movs	r2, #48	; 0x30
 8001f20:	2100      	movs	r1, #0
 8001f22:	4618      	mov	r0, r3
 8001f24:	f00a fff8 	bl	800cf18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f28:	f107 030c 	add.w	r3, r7, #12
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	601a      	str	r2, [r3, #0]
 8001f30:	605a      	str	r2, [r3, #4]
 8001f32:	609a      	str	r2, [r3, #8]
 8001f34:	60da      	str	r2, [r3, #12]
 8001f36:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f38:	2300      	movs	r3, #0
 8001f3a:	60bb      	str	r3, [r7, #8]
 8001f3c:	4b27      	ldr	r3, [pc, #156]	; (8001fdc <SystemClock_Config+0xc8>)
 8001f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f40:	4a26      	ldr	r2, [pc, #152]	; (8001fdc <SystemClock_Config+0xc8>)
 8001f42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f46:	6413      	str	r3, [r2, #64]	; 0x40
 8001f48:	4b24      	ldr	r3, [pc, #144]	; (8001fdc <SystemClock_Config+0xc8>)
 8001f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f50:	60bb      	str	r3, [r7, #8]
 8001f52:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f54:	2300      	movs	r3, #0
 8001f56:	607b      	str	r3, [r7, #4]
 8001f58:	4b21      	ldr	r3, [pc, #132]	; (8001fe0 <SystemClock_Config+0xcc>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a20      	ldr	r2, [pc, #128]	; (8001fe0 <SystemClock_Config+0xcc>)
 8001f5e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f62:	6013      	str	r3, [r2, #0]
 8001f64:	4b1e      	ldr	r3, [pc, #120]	; (8001fe0 <SystemClock_Config+0xcc>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001f6c:	607b      	str	r3, [r7, #4]
 8001f6e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f70:	2302      	movs	r3, #2
 8001f72:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f74:	2301      	movs	r3, #1
 8001f76:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f78:	2310      	movs	r3, #16
 8001f7a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001f80:	2300      	movs	r3, #0
 8001f82:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001f84:	2308      	movs	r3, #8
 8001f86:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001f88:	2364      	movs	r3, #100	; 0x64
 8001f8a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001f90:	2304      	movs	r3, #4
 8001f92:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f94:	f107 0320 	add.w	r3, r7, #32
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f008 f8f3 	bl	800a184 <HAL_RCC_OscConfig>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d001      	beq.n	8001fa8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001fa4:	f003 f8bc 	bl	8005120 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fa8:	230f      	movs	r3, #15
 8001faa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fac:	2302      	movs	r3, #2
 8001fae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001fb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fb8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001fbe:	f107 030c 	add.w	r3, r7, #12
 8001fc2:	2103      	movs	r1, #3
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f008 fb55 	bl	800a674 <HAL_RCC_ClockConfig>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d001      	beq.n	8001fd4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001fd0:	f003 f8a6 	bl	8005120 <Error_Handler>
  }
}
 8001fd4:	bf00      	nop
 8001fd6:	3750      	adds	r7, #80	; 0x50
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	40023800 	.word	0x40023800
 8001fe0:	40007000 	.word	0x40007000

08001fe4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001fe8:	4b12      	ldr	r3, [pc, #72]	; (8002034 <MX_I2C1_Init+0x50>)
 8001fea:	4a13      	ldr	r2, [pc, #76]	; (8002038 <MX_I2C1_Init+0x54>)
 8001fec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001fee:	4b11      	ldr	r3, [pc, #68]	; (8002034 <MX_I2C1_Init+0x50>)
 8001ff0:	4a12      	ldr	r2, [pc, #72]	; (800203c <MX_I2C1_Init+0x58>)
 8001ff2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ff4:	4b0f      	ldr	r3, [pc, #60]	; (8002034 <MX_I2C1_Init+0x50>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001ffa:	4b0e      	ldr	r3, [pc, #56]	; (8002034 <MX_I2C1_Init+0x50>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002000:	4b0c      	ldr	r3, [pc, #48]	; (8002034 <MX_I2C1_Init+0x50>)
 8002002:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002006:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002008:	4b0a      	ldr	r3, [pc, #40]	; (8002034 <MX_I2C1_Init+0x50>)
 800200a:	2200      	movs	r2, #0
 800200c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800200e:	4b09      	ldr	r3, [pc, #36]	; (8002034 <MX_I2C1_Init+0x50>)
 8002010:	2200      	movs	r2, #0
 8002012:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002014:	4b07      	ldr	r3, [pc, #28]	; (8002034 <MX_I2C1_Init+0x50>)
 8002016:	2200      	movs	r2, #0
 8002018:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800201a:	4b06      	ldr	r3, [pc, #24]	; (8002034 <MX_I2C1_Init+0x50>)
 800201c:	2200      	movs	r2, #0
 800201e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002020:	4804      	ldr	r0, [pc, #16]	; (8002034 <MX_I2C1_Init+0x50>)
 8002022:	f005 fc15 	bl	8007850 <HAL_I2C_Init>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d001      	beq.n	8002030 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800202c:	f003 f878 	bl	8005120 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002030:	bf00      	nop
 8002032:	bd80      	pop	{r7, pc}
 8002034:	20000450 	.word	0x20000450
 8002038:	40005400 	.word	0x40005400
 800203c:	00061a80 	.word	0x00061a80

08002040 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8002044:	4b17      	ldr	r3, [pc, #92]	; (80020a4 <MX_SPI3_Init+0x64>)
 8002046:	4a18      	ldr	r2, [pc, #96]	; (80020a8 <MX_SPI3_Init+0x68>)
 8002048:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800204a:	4b16      	ldr	r3, [pc, #88]	; (80020a4 <MX_SPI3_Init+0x64>)
 800204c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002050:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002052:	4b14      	ldr	r3, [pc, #80]	; (80020a4 <MX_SPI3_Init+0x64>)
 8002054:	2200      	movs	r2, #0
 8002056:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002058:	4b12      	ldr	r3, [pc, #72]	; (80020a4 <MX_SPI3_Init+0x64>)
 800205a:	2200      	movs	r2, #0
 800205c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800205e:	4b11      	ldr	r3, [pc, #68]	; (80020a4 <MX_SPI3_Init+0x64>)
 8002060:	2200      	movs	r2, #0
 8002062:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002064:	4b0f      	ldr	r3, [pc, #60]	; (80020a4 <MX_SPI3_Init+0x64>)
 8002066:	2200      	movs	r2, #0
 8002068:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800206a:	4b0e      	ldr	r3, [pc, #56]	; (80020a4 <MX_SPI3_Init+0x64>)
 800206c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002070:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002072:	4b0c      	ldr	r3, [pc, #48]	; (80020a4 <MX_SPI3_Init+0x64>)
 8002074:	2220      	movs	r2, #32
 8002076:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002078:	4b0a      	ldr	r3, [pc, #40]	; (80020a4 <MX_SPI3_Init+0x64>)
 800207a:	2200      	movs	r2, #0
 800207c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800207e:	4b09      	ldr	r3, [pc, #36]	; (80020a4 <MX_SPI3_Init+0x64>)
 8002080:	2200      	movs	r2, #0
 8002082:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002084:	4b07      	ldr	r3, [pc, #28]	; (80020a4 <MX_SPI3_Init+0x64>)
 8002086:	2200      	movs	r2, #0
 8002088:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800208a:	4b06      	ldr	r3, [pc, #24]	; (80020a4 <MX_SPI3_Init+0x64>)
 800208c:	220a      	movs	r2, #10
 800208e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002090:	4804      	ldr	r0, [pc, #16]	; (80020a4 <MX_SPI3_Init+0x64>)
 8002092:	f008 fd0f 	bl	800aab4 <HAL_SPI_Init>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d001      	beq.n	80020a0 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800209c:	f003 f840 	bl	8005120 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80020a0:	bf00      	nop
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	200004a4 	.word	0x200004a4
 80020a8:	40003c00 	.word	0x40003c00

080020ac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b08c      	sub	sp, #48	; 0x30
 80020b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80020b2:	f107 030c 	add.w	r3, r7, #12
 80020b6:	2224      	movs	r2, #36	; 0x24
 80020b8:	2100      	movs	r1, #0
 80020ba:	4618      	mov	r0, r3
 80020bc:	f00a ff2c 	bl	800cf18 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020c0:	1d3b      	adds	r3, r7, #4
 80020c2:	2200      	movs	r2, #0
 80020c4:	601a      	str	r2, [r3, #0]
 80020c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80020c8:	4b20      	ldr	r3, [pc, #128]	; (800214c <MX_TIM3_Init+0xa0>)
 80020ca:	4a21      	ldr	r2, [pc, #132]	; (8002150 <MX_TIM3_Init+0xa4>)
 80020cc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3;
 80020ce:	4b1f      	ldr	r3, [pc, #124]	; (800214c <MX_TIM3_Init+0xa0>)
 80020d0:	2203      	movs	r2, #3
 80020d2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80020d4:	4b1d      	ldr	r3, [pc, #116]	; (800214c <MX_TIM3_Init+0xa0>)
 80020d6:	2210      	movs	r2, #16
 80020d8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80020da:	4b1c      	ldr	r3, [pc, #112]	; (800214c <MX_TIM3_Init+0xa0>)
 80020dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020e0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020e2:	4b1a      	ldr	r3, [pc, #104]	; (800214c <MX_TIM3_Init+0xa0>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80020e8:	4b18      	ldr	r3, [pc, #96]	; (800214c <MX_TIM3_Init+0xa0>)
 80020ea:	2280      	movs	r2, #128	; 0x80
 80020ec:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80020ee:	2303      	movs	r3, #3
 80020f0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80020f2:	2302      	movs	r3, #2
 80020f4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80020f6:	2301      	movs	r3, #1
 80020f8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV2;
 80020fa:	2304      	movs	r3, #4
 80020fc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 8;
 80020fe:	2308      	movs	r3, #8
 8002100:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8002102:	2302      	movs	r3, #2
 8002104:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002106:	2301      	movs	r3, #1
 8002108:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV2;
 800210a:	2304      	movs	r3, #4
 800210c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 8;
 800210e:	2308      	movs	r3, #8
 8002110:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002112:	f107 030c 	add.w	r3, r7, #12
 8002116:	4619      	mov	r1, r3
 8002118:	480c      	ldr	r0, [pc, #48]	; (800214c <MX_TIM3_Init+0xa0>)
 800211a:	f009 f8a2 	bl	800b262 <HAL_TIM_Encoder_Init>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d001      	beq.n	8002128 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002124:	f002 fffc 	bl	8005120 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002128:	2300      	movs	r3, #0
 800212a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800212c:	2300      	movs	r3, #0
 800212e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002130:	1d3b      	adds	r3, r7, #4
 8002132:	4619      	mov	r1, r3
 8002134:	4805      	ldr	r0, [pc, #20]	; (800214c <MX_TIM3_Init+0xa0>)
 8002136:	f009 fb9f 	bl	800b878 <HAL_TIMEx_MasterConfigSynchronization>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d001      	beq.n	8002144 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002140:	f002 ffee 	bl	8005120 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002144:	bf00      	nop
 8002146:	3730      	adds	r7, #48	; 0x30
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	200004fc 	.word	0x200004fc
 8002150:	40000400 	.word	0x40000400

08002154 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002158:	4b0e      	ldr	r3, [pc, #56]	; (8002194 <MX_TIM10_Init+0x40>)
 800215a:	4a0f      	ldr	r2, [pc, #60]	; (8002198 <MX_TIM10_Init+0x44>)
 800215c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 999;
 800215e:	4b0d      	ldr	r3, [pc, #52]	; (8002194 <MX_TIM10_Init+0x40>)
 8002160:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002164:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002166:	4b0b      	ldr	r3, [pc, #44]	; (8002194 <MX_TIM10_Init+0x40>)
 8002168:	2200      	movs	r2, #0
 800216a:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 4999;
 800216c:	4b09      	ldr	r3, [pc, #36]	; (8002194 <MX_TIM10_Init+0x40>)
 800216e:	f241 3287 	movw	r2, #4999	; 0x1387
 8002172:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002174:	4b07      	ldr	r3, [pc, #28]	; (8002194 <MX_TIM10_Init+0x40>)
 8002176:	2200      	movs	r2, #0
 8002178:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800217a:	4b06      	ldr	r3, [pc, #24]	; (8002194 <MX_TIM10_Init+0x40>)
 800217c:	2280      	movs	r2, #128	; 0x80
 800217e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002180:	4804      	ldr	r0, [pc, #16]	; (8002194 <MX_TIM10_Init+0x40>)
 8002182:	f008 ff8d 	bl	800b0a0 <HAL_TIM_Base_Init>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d001      	beq.n	8002190 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 800218c:	f002 ffc8 	bl	8005120 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8002190:	bf00      	nop
 8002192:	bd80      	pop	{r7, pc}
 8002194:	20000544 	.word	0x20000544
 8002198:	40014400 	.word	0x40014400

0800219c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80021a0:	4b12      	ldr	r3, [pc, #72]	; (80021ec <MX_USART1_UART_Init+0x50>)
 80021a2:	4a13      	ldr	r2, [pc, #76]	; (80021f0 <MX_USART1_UART_Init+0x54>)
 80021a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80021a6:	4b11      	ldr	r3, [pc, #68]	; (80021ec <MX_USART1_UART_Init+0x50>)
 80021a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80021ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 80021ae:	4b0f      	ldr	r3, [pc, #60]	; (80021ec <MX_USART1_UART_Init+0x50>)
 80021b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80021b4:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80021b6:	4b0d      	ldr	r3, [pc, #52]	; (80021ec <MX_USART1_UART_Init+0x50>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 80021bc:	4b0b      	ldr	r3, [pc, #44]	; (80021ec <MX_USART1_UART_Init+0x50>)
 80021be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80021c4:	4b09      	ldr	r3, [pc, #36]	; (80021ec <MX_USART1_UART_Init+0x50>)
 80021c6:	220c      	movs	r2, #12
 80021c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021ca:	4b08      	ldr	r3, [pc, #32]	; (80021ec <MX_USART1_UART_Init+0x50>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80021d0:	4b06      	ldr	r3, [pc, #24]	; (80021ec <MX_USART1_UART_Init+0x50>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80021d6:	4805      	ldr	r0, [pc, #20]	; (80021ec <MX_USART1_UART_Init+0x50>)
 80021d8:	f009 fbd0 	bl	800b97c <HAL_UART_Init>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d001      	beq.n	80021e6 <MX_USART1_UART_Init+0x4a>
  {
    Error_Handler();
 80021e2:	f002 ff9d 	bl	8005120 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80021e6:	bf00      	nop
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	2000058c 	.word	0x2000058c
 80021f0:	40011000 	.word	0x40011000

080021f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80021f8:	4b11      	ldr	r3, [pc, #68]	; (8002240 <MX_USART2_UART_Init+0x4c>)
 80021fa:	4a12      	ldr	r2, [pc, #72]	; (8002244 <MX_USART2_UART_Init+0x50>)
 80021fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80021fe:	4b10      	ldr	r3, [pc, #64]	; (8002240 <MX_USART2_UART_Init+0x4c>)
 8002200:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002204:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002206:	4b0e      	ldr	r3, [pc, #56]	; (8002240 <MX_USART2_UART_Init+0x4c>)
 8002208:	2200      	movs	r2, #0
 800220a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800220c:	4b0c      	ldr	r3, [pc, #48]	; (8002240 <MX_USART2_UART_Init+0x4c>)
 800220e:	2200      	movs	r2, #0
 8002210:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002212:	4b0b      	ldr	r3, [pc, #44]	; (8002240 <MX_USART2_UART_Init+0x4c>)
 8002214:	2200      	movs	r2, #0
 8002216:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002218:	4b09      	ldr	r3, [pc, #36]	; (8002240 <MX_USART2_UART_Init+0x4c>)
 800221a:	220c      	movs	r2, #12
 800221c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800221e:	4b08      	ldr	r3, [pc, #32]	; (8002240 <MX_USART2_UART_Init+0x4c>)
 8002220:	2200      	movs	r2, #0
 8002222:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002224:	4b06      	ldr	r3, [pc, #24]	; (8002240 <MX_USART2_UART_Init+0x4c>)
 8002226:	2200      	movs	r2, #0
 8002228:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800222a:	4805      	ldr	r0, [pc, #20]	; (8002240 <MX_USART2_UART_Init+0x4c>)
 800222c:	f009 fba6 	bl	800b97c <HAL_UART_Init>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002236:	f002 ff73 	bl	8005120 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800223a:	bf00      	nop
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	200005d0 	.word	0x200005d0
 8002244:	40004400 	.word	0x40004400

08002248 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800224c:	4b11      	ldr	r3, [pc, #68]	; (8002294 <MX_USART6_UART_Init+0x4c>)
 800224e:	4a12      	ldr	r2, [pc, #72]	; (8002298 <MX_USART6_UART_Init+0x50>)
 8002250:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002252:	4b10      	ldr	r3, [pc, #64]	; (8002294 <MX_USART6_UART_Init+0x4c>)
 8002254:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002258:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800225a:	4b0e      	ldr	r3, [pc, #56]	; (8002294 <MX_USART6_UART_Init+0x4c>)
 800225c:	2200      	movs	r2, #0
 800225e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002260:	4b0c      	ldr	r3, [pc, #48]	; (8002294 <MX_USART6_UART_Init+0x4c>)
 8002262:	2200      	movs	r2, #0
 8002264:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002266:	4b0b      	ldr	r3, [pc, #44]	; (8002294 <MX_USART6_UART_Init+0x4c>)
 8002268:	2200      	movs	r2, #0
 800226a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800226c:	4b09      	ldr	r3, [pc, #36]	; (8002294 <MX_USART6_UART_Init+0x4c>)
 800226e:	220c      	movs	r2, #12
 8002270:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002272:	4b08      	ldr	r3, [pc, #32]	; (8002294 <MX_USART6_UART_Init+0x4c>)
 8002274:	2200      	movs	r2, #0
 8002276:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002278:	4b06      	ldr	r3, [pc, #24]	; (8002294 <MX_USART6_UART_Init+0x4c>)
 800227a:	2200      	movs	r2, #0
 800227c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800227e:	4805      	ldr	r0, [pc, #20]	; (8002294 <MX_USART6_UART_Init+0x4c>)
 8002280:	f009 fb7c 	bl	800b97c <HAL_UART_Init>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d001      	beq.n	800228e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800228a:	f002 ff49 	bl	8005120 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800228e:	bf00      	nop
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	20000614 	.word	0x20000614
 8002298:	40011400 	.word	0x40011400

0800229c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80022a2:	2300      	movs	r3, #0
 80022a4:	607b      	str	r3, [r7, #4]
 80022a6:	4b0c      	ldr	r3, [pc, #48]	; (80022d8 <MX_DMA_Init+0x3c>)
 80022a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022aa:	4a0b      	ldr	r2, [pc, #44]	; (80022d8 <MX_DMA_Init+0x3c>)
 80022ac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80022b0:	6313      	str	r3, [r2, #48]	; 0x30
 80022b2:	4b09      	ldr	r3, [pc, #36]	; (80022d8 <MX_DMA_Init+0x3c>)
 80022b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022ba:	607b      	str	r3, [r7, #4]
 80022bc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80022be:	2200      	movs	r2, #0
 80022c0:	2100      	movs	r1, #0
 80022c2:	2039      	movs	r0, #57	; 0x39
 80022c4:	f004 fc95 	bl	8006bf2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80022c8:	2039      	movs	r0, #57	; 0x39
 80022ca:	f004 fcae 	bl	8006c2a <HAL_NVIC_EnableIRQ>

}
 80022ce:	bf00      	nop
 80022d0:	3708      	adds	r7, #8
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	40023800 	.word	0x40023800

080022dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b08a      	sub	sp, #40	; 0x28
 80022e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022e2:	f107 0314 	add.w	r3, r7, #20
 80022e6:	2200      	movs	r2, #0
 80022e8:	601a      	str	r2, [r3, #0]
 80022ea:	605a      	str	r2, [r3, #4]
 80022ec:	609a      	str	r2, [r3, #8]
 80022ee:	60da      	str	r2, [r3, #12]
 80022f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022f2:	2300      	movs	r3, #0
 80022f4:	613b      	str	r3, [r7, #16]
 80022f6:	4b7b      	ldr	r3, [pc, #492]	; (80024e4 <MX_GPIO_Init+0x208>)
 80022f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fa:	4a7a      	ldr	r2, [pc, #488]	; (80024e4 <MX_GPIO_Init+0x208>)
 80022fc:	f043 0304 	orr.w	r3, r3, #4
 8002300:	6313      	str	r3, [r2, #48]	; 0x30
 8002302:	4b78      	ldr	r3, [pc, #480]	; (80024e4 <MX_GPIO_Init+0x208>)
 8002304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002306:	f003 0304 	and.w	r3, r3, #4
 800230a:	613b      	str	r3, [r7, #16]
 800230c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800230e:	2300      	movs	r3, #0
 8002310:	60fb      	str	r3, [r7, #12]
 8002312:	4b74      	ldr	r3, [pc, #464]	; (80024e4 <MX_GPIO_Init+0x208>)
 8002314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002316:	4a73      	ldr	r2, [pc, #460]	; (80024e4 <MX_GPIO_Init+0x208>)
 8002318:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800231c:	6313      	str	r3, [r2, #48]	; 0x30
 800231e:	4b71      	ldr	r3, [pc, #452]	; (80024e4 <MX_GPIO_Init+0x208>)
 8002320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002322:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002326:	60fb      	str	r3, [r7, #12]
 8002328:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800232a:	2300      	movs	r3, #0
 800232c:	60bb      	str	r3, [r7, #8]
 800232e:	4b6d      	ldr	r3, [pc, #436]	; (80024e4 <MX_GPIO_Init+0x208>)
 8002330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002332:	4a6c      	ldr	r2, [pc, #432]	; (80024e4 <MX_GPIO_Init+0x208>)
 8002334:	f043 0301 	orr.w	r3, r3, #1
 8002338:	6313      	str	r3, [r2, #48]	; 0x30
 800233a:	4b6a      	ldr	r3, [pc, #424]	; (80024e4 <MX_GPIO_Init+0x208>)
 800233c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	60bb      	str	r3, [r7, #8]
 8002344:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002346:	2300      	movs	r3, #0
 8002348:	607b      	str	r3, [r7, #4]
 800234a:	4b66      	ldr	r3, [pc, #408]	; (80024e4 <MX_GPIO_Init+0x208>)
 800234c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234e:	4a65      	ldr	r2, [pc, #404]	; (80024e4 <MX_GPIO_Init+0x208>)
 8002350:	f043 0302 	orr.w	r3, r3, #2
 8002354:	6313      	str	r3, [r2, #48]	; 0x30
 8002356:	4b63      	ldr	r3, [pc, #396]	; (80024e4 <MX_GPIO_Init+0x208>)
 8002358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	607b      	str	r3, [r7, #4]
 8002360:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002362:	2300      	movs	r3, #0
 8002364:	603b      	str	r3, [r7, #0]
 8002366:	4b5f      	ldr	r3, [pc, #380]	; (80024e4 <MX_GPIO_Init+0x208>)
 8002368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236a:	4a5e      	ldr	r2, [pc, #376]	; (80024e4 <MX_GPIO_Init+0x208>)
 800236c:	f043 0308 	orr.w	r3, r3, #8
 8002370:	6313      	str	r3, [r2, #48]	; 0x30
 8002372:	4b5c      	ldr	r3, [pc, #368]	; (80024e4 <MX_GPIO_Init+0x208>)
 8002374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002376:	f003 0308 	and.w	r3, r3, #8
 800237a:	603b      	str	r3, [r7, #0]
 800237c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_RS_Pin|LCD_CS_Pin|LCD_MOSI_Pin|client_NRST_Pin
 800237e:	2200      	movs	r2, #0
 8002380:	f240 314b 	movw	r1, #843	; 0x34b
 8002384:	4858      	ldr	r0, [pc, #352]	; (80024e8 <MX_GPIO_Init+0x20c>)
 8002386:	f005 fa17 	bl	80077b8 <HAL_GPIO_WritePin>
                          |Buzzer_Pin|RelayClient_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RST_Pin|LD2_Pin|boot0_trigger_Pin, GPIO_PIN_RESET);
 800238a:	2200      	movs	r2, #0
 800238c:	f44f 7198 	mov.w	r1, #304	; 0x130
 8002390:	4856      	ldr	r0, [pc, #344]	; (80024ec <MX_GPIO_Init+0x210>)
 8002392:	f005 fa11 	bl	80077b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_SCK_GPIO_Port, LCD_SCK_Pin, GPIO_PIN_RESET);
 8002396:	2200      	movs	r2, #0
 8002398:	2101      	movs	r1, #1
 800239a:	4855      	ldr	r0, [pc, #340]	; (80024f0 <MX_GPIO_Init+0x214>)
 800239c:	f005 fa0c 	bl	80077b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 80023a0:	2200      	movs	r2, #0
 80023a2:	2104      	movs	r1, #4
 80023a4:	4853      	ldr	r0, [pc, #332]	; (80024f4 <MX_GPIO_Init+0x218>)
 80023a6:	f005 fa07 	bl	80077b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80023aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80023b0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80023b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b6:	2300      	movs	r3, #0
 80023b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80023ba:	f107 0314 	add.w	r3, r7, #20
 80023be:	4619      	mov	r1, r3
 80023c0:	4849      	ldr	r0, [pc, #292]	; (80024e8 <MX_GPIO_Init+0x20c>)
 80023c2:	f005 f85d 	bl	8007480 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RS_Pin LCD_CS_Pin client_NRST_Pin Buzzer_Pin
                           RelayClient_Pin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_CS_Pin|client_NRST_Pin|Buzzer_Pin
 80023c6:	f240 3343 	movw	r3, #835	; 0x343
 80023ca:	617b      	str	r3, [r7, #20]
                          |RelayClient_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023cc:	2301      	movs	r3, #1
 80023ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d0:	2300      	movs	r3, #0
 80023d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023d4:	2300      	movs	r3, #0
 80023d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023d8:	f107 0314 	add.w	r3, r7, #20
 80023dc:	4619      	mov	r1, r3
 80023de:	4842      	ldr	r0, [pc, #264]	; (80024e8 <MX_GPIO_Init+0x20c>)
 80023e0:	f005 f84e 	bl	8007480 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_MISO_Pin */
  GPIO_InitStruct.Pin = LCD_MISO_Pin;
 80023e4:	2304      	movs	r3, #4
 80023e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023e8:	2300      	movs	r3, #0
 80023ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ec:	2300      	movs	r3, #0
 80023ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LCD_MISO_GPIO_Port, &GPIO_InitStruct);
 80023f0:	f107 0314 	add.w	r3, r7, #20
 80023f4:	4619      	mov	r1, r3
 80023f6:	483c      	ldr	r0, [pc, #240]	; (80024e8 <MX_GPIO_Init+0x20c>)
 80023f8:	f005 f842 	bl	8007480 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_MOSI_Pin */
  GPIO_InitStruct.Pin = LCD_MOSI_Pin;
 80023fc:	2308      	movs	r3, #8
 80023fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002400:	2301      	movs	r3, #1
 8002402:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002404:	2300      	movs	r3, #0
 8002406:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002408:	2302      	movs	r3, #2
 800240a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_MOSI_GPIO_Port, &GPIO_InitStruct);
 800240c:	f107 0314 	add.w	r3, r7, #20
 8002410:	4619      	mov	r1, r3
 8002412:	4835      	ldr	r0, [pc, #212]	; (80024e8 <MX_GPIO_Init+0x20c>)
 8002414:	f005 f834 	bl	8007480 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RST_Pin LD2_Pin boot0_trigger_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LD2_Pin|boot0_trigger_Pin;
 8002418:	f44f 7398 	mov.w	r3, #304	; 0x130
 800241c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800241e:	2301      	movs	r3, #1
 8002420:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002422:	2300      	movs	r3, #0
 8002424:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002426:	2300      	movs	r3, #0
 8002428:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800242a:	f107 0314 	add.w	r3, r7, #20
 800242e:	4619      	mov	r1, r3
 8002430:	482e      	ldr	r0, [pc, #184]	; (80024ec <MX_GPIO_Init+0x210>)
 8002432:	f005 f825 	bl	8007480 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_SCK_Pin */
  GPIO_InitStruct.Pin = LCD_SCK_Pin;
 8002436:	2301      	movs	r3, #1
 8002438:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800243a:	2301      	movs	r3, #1
 800243c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243e:	2300      	movs	r3, #0
 8002440:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002442:	2301      	movs	r3, #1
 8002444:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_SCK_GPIO_Port, &GPIO_InitStruct);
 8002446:	f107 0314 	add.w	r3, r7, #20
 800244a:	4619      	mov	r1, r3
 800244c:	4828      	ldr	r0, [pc, #160]	; (80024f0 <MX_GPIO_Init+0x214>)
 800244e:	f005 f817 	bl	8007480 <HAL_GPIO_Init>

  /*Configure GPIO pins : Btn_1_Pin Btn_2_Pin Btn_3_Pin Btn_4_Pin */
  GPIO_InitStruct.Pin = Btn_1_Pin|Btn_2_Pin|Btn_3_Pin|Btn_4_Pin;
 8002452:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002456:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002458:	2300      	movs	r3, #0
 800245a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800245c:	2300      	movs	r3, #0
 800245e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002460:	f107 0314 	add.w	r3, r7, #20
 8002464:	4619      	mov	r1, r3
 8002466:	4822      	ldr	r0, [pc, #136]	; (80024f0 <MX_GPIO_Init+0x214>)
 8002468:	f005 f80a 	bl	8007480 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800246c:	2380      	movs	r3, #128	; 0x80
 800246e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002470:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002474:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002476:	2301      	movs	r3, #1
 8002478:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800247a:	f107 0314 	add.w	r3, r7, #20
 800247e:	4619      	mov	r1, r3
 8002480:	4819      	ldr	r0, [pc, #100]	; (80024e8 <MX_GPIO_Init+0x20c>)
 8002482:	f004 fffd 	bl	8007480 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_CS_Pin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 8002486:	2304      	movs	r3, #4
 8002488:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800248a:	2301      	movs	r3, #1
 800248c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248e:	2300      	movs	r3, #0
 8002490:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002492:	2300      	movs	r3, #0
 8002494:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 8002496:	f107 0314 	add.w	r3, r7, #20
 800249a:	4619      	mov	r1, r3
 800249c:	4815      	ldr	r0, [pc, #84]	; (80024f4 <MX_GPIO_Init+0x218>)
 800249e:	f004 ffef 	bl	8007480 <HAL_GPIO_Init>

  /*Configure GPIO pin : KnobBTN_Pin */
  GPIO_InitStruct.Pin = KnobBTN_Pin;
 80024a2:	2340      	movs	r3, #64	; 0x40
 80024a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024a6:	2300      	movs	r3, #0
 80024a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024aa:	2301      	movs	r3, #1
 80024ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KnobBTN_GPIO_Port, &GPIO_InitStruct);
 80024ae:	f107 0314 	add.w	r3, r7, #20
 80024b2:	4619      	mov	r1, r3
 80024b4:	480e      	ldr	r0, [pc, #56]	; (80024f0 <MX_GPIO_Init+0x214>)
 80024b6:	f004 ffe3 	bl	8007480 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80024ba:	2200      	movs	r2, #0
 80024bc:	2100      	movs	r1, #0
 80024be:	2017      	movs	r0, #23
 80024c0:	f004 fb97 	bl	8006bf2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80024c4:	2017      	movs	r0, #23
 80024c6:	f004 fbb0 	bl	8006c2a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80024ca:	2200      	movs	r2, #0
 80024cc:	2100      	movs	r1, #0
 80024ce:	2028      	movs	r0, #40	; 0x28
 80024d0:	f004 fb8f 	bl	8006bf2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80024d4:	2028      	movs	r0, #40	; 0x28
 80024d6:	f004 fba8 	bl	8006c2a <HAL_NVIC_EnableIRQ>

}
 80024da:	bf00      	nop
 80024dc:	3728      	adds	r7, #40	; 0x28
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	40023800 	.word	0x40023800
 80024e8:	40020800 	.word	0x40020800
 80024ec:	40020000 	.word	0x40020000
 80024f0:	40020400 	.word	0x40020400
 80024f4:	40020c00 	.word	0x40020c00

080024f8 <box_pointer>:
	  xsh = 0;
		  }

}

void box_pointer(uint16_t posx, uint16_t posy){
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af02      	add	r7, sp, #8
 80024fe:	4603      	mov	r3, r0
 8002500:	460a      	mov	r2, r1
 8002502:	80fb      	strh	r3, [r7, #6]
 8002504:	4613      	mov	r3, r2
 8002506:	80bb      	strh	r3, [r7, #4]
	/* write new box at the new position posx posy and erase the previous box*/
	static disp_posixy box1;

	//// erase previous box
	if(flag_boxpoint_start){
 8002508:	4b11      	ldr	r3, [pc, #68]	; (8002550 <box_pointer+0x58>)
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d009      	beq.n	8002524 <box_pointer+0x2c>

		ili9341_FillRect(box1.xp, box1.yp, 15, 15, cl_BLACK);
 8002510:	4b10      	ldr	r3, [pc, #64]	; (8002554 <box_pointer+0x5c>)
 8002512:	8818      	ldrh	r0, [r3, #0]
 8002514:	4b0f      	ldr	r3, [pc, #60]	; (8002554 <box_pointer+0x5c>)
 8002516:	8859      	ldrh	r1, [r3, #2]
 8002518:	2300      	movs	r3, #0
 800251a:	9300      	str	r3, [sp, #0]
 800251c:	230f      	movs	r3, #15
 800251e:	220f      	movs	r2, #15
 8002520:	f003 fbda 	bl	8005cd8 <ili9341_FillRect>
	}

	//// new box
	ili9341_FillRect(posx, posy, 15, 15, cl_YELLOW);
 8002524:	88b9      	ldrh	r1, [r7, #4]
 8002526:	88f8      	ldrh	r0, [r7, #6]
 8002528:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800252c:	9300      	str	r3, [sp, #0]
 800252e:	230f      	movs	r3, #15
 8002530:	220f      	movs	r2, #15
 8002532:	f003 fbd1 	bl	8005cd8 <ili9341_FillRect>

	//box[1] = box[0];
	box1.xp = posx;
 8002536:	4a07      	ldr	r2, [pc, #28]	; (8002554 <box_pointer+0x5c>)
 8002538:	88fb      	ldrh	r3, [r7, #6]
 800253a:	8013      	strh	r3, [r2, #0]
	box1.yp = posy;
 800253c:	4a05      	ldr	r2, [pc, #20]	; (8002554 <box_pointer+0x5c>)
 800253e:	88bb      	ldrh	r3, [r7, #4]
 8002540:	8053      	strh	r3, [r2, #2]
	//// trig the upper to erase the previous in the next call
	flag_boxpoint_start = 1;
 8002542:	4b03      	ldr	r3, [pc, #12]	; (8002550 <box_pointer+0x58>)
 8002544:	2201      	movs	r2, #1
 8002546:	701a      	strb	r2, [r3, #0]
}
 8002548:	bf00      	nop
 800254a:	3708      	adds	r7, #8
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	200008a6 	.word	0x200008a6
 8002554:	200008ac 	.word	0x200008ac

08002558 <simple_scr>:

void simple_scr(){
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af04      	add	r7, sp, #16
	  //mcp_read.cv[0] = MCP320x_ADCbit_to_Volt(mcp_read.raw[0]);
	  //sprintf(TextDispBuffer,"MCP : %.2f  ", mcp_read.cv[0]);
	  //ili9341_WriteString(20, 155, TextDispBuffer, Font16, cl_CYAN, cl_BLACK);

	  ////// 4x button
	  sprintf(TextDispBuffer,"btn %X %X %X %d",btn_read[1], btn_read[2], btn_read[3], btn_cnt);
 800255e:	4b2b      	ldr	r3, [pc, #172]	; (800260c <simple_scr+0xb4>)
 8002560:	785b      	ldrb	r3, [r3, #1]
 8002562:	4619      	mov	r1, r3
 8002564:	4b29      	ldr	r3, [pc, #164]	; (800260c <simple_scr+0xb4>)
 8002566:	789b      	ldrb	r3, [r3, #2]
 8002568:	4618      	mov	r0, r3
 800256a:	4b28      	ldr	r3, [pc, #160]	; (800260c <simple_scr+0xb4>)
 800256c:	78db      	ldrb	r3, [r3, #3]
 800256e:	461a      	mov	r2, r3
 8002570:	4b27      	ldr	r3, [pc, #156]	; (8002610 <simple_scr+0xb8>)
 8002572:	881b      	ldrh	r3, [r3, #0]
 8002574:	9301      	str	r3, [sp, #4]
 8002576:	9200      	str	r2, [sp, #0]
 8002578:	4603      	mov	r3, r0
 800257a:	460a      	mov	r2, r1
 800257c:	4925      	ldr	r1, [pc, #148]	; (8002614 <simple_scr+0xbc>)
 800257e:	4826      	ldr	r0, [pc, #152]	; (8002618 <simple_scr+0xc0>)
 8002580:	f00b f93c 	bl	800d7fc <siprintf>
	  ili9341_WriteString(220, 185, TextDispBuffer, Font12, cl_YELLOW, cl_BLACK);
 8002584:	4b25      	ldr	r3, [pc, #148]	; (800261c <simple_scr+0xc4>)
 8002586:	2200      	movs	r2, #0
 8002588:	9202      	str	r2, [sp, #8]
 800258a:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800258e:	9201      	str	r2, [sp, #4]
 8002590:	685a      	ldr	r2, [r3, #4]
 8002592:	9200      	str	r2, [sp, #0]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a20      	ldr	r2, [pc, #128]	; (8002618 <simple_scr+0xc0>)
 8002598:	21b9      	movs	r1, #185	; 0xb9
 800259a:	20dc      	movs	r0, #220	; 0xdc
 800259c:	f003 fd45 	bl	800602a <ili9341_WriteString>

	  //// rortary encoder knob
	  sprintf(TextDispBuffer,"enc %d %d %d", knobtick[0], k_flag.cnt, k_flag.up); //flag_k_up
 80025a0:	4b1f      	ldr	r3, [pc, #124]	; (8002620 <simple_scr+0xc8>)
 80025a2:	881b      	ldrh	r3, [r3, #0]
 80025a4:	461a      	mov	r2, r3
 80025a6:	4b1f      	ldr	r3, [pc, #124]	; (8002624 <simple_scr+0xcc>)
 80025a8:	789b      	ldrb	r3, [r3, #2]
 80025aa:	4619      	mov	r1, r3
 80025ac:	4b1d      	ldr	r3, [pc, #116]	; (8002624 <simple_scr+0xcc>)
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	9300      	str	r3, [sp, #0]
 80025b2:	460b      	mov	r3, r1
 80025b4:	491c      	ldr	r1, [pc, #112]	; (8002628 <simple_scr+0xd0>)
 80025b6:	4818      	ldr	r0, [pc, #96]	; (8002618 <simple_scr+0xc0>)
 80025b8:	f00b f920 	bl	800d7fc <siprintf>
	  ili9341_WriteString(220, 200, TextDispBuffer, Font12, cl_WHITE, cl_BLACK);
 80025bc:	4b17      	ldr	r3, [pc, #92]	; (800261c <simple_scr+0xc4>)
 80025be:	2200      	movs	r2, #0
 80025c0:	9202      	str	r2, [sp, #8]
 80025c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025c6:	9201      	str	r2, [sp, #4]
 80025c8:	685a      	ldr	r2, [r3, #4]
 80025ca:	9200      	str	r2, [sp, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a12      	ldr	r2, [pc, #72]	; (8002618 <simple_scr+0xc0>)
 80025d0:	21c8      	movs	r1, #200	; 0xc8
 80025d2:	20dc      	movs	r0, #220	; 0xdc
 80025d4:	f003 fd29 	bl	800602a <ili9341_WriteString>

	  sprintf(TextDispBuffer, "%ld, %d", TIM3->CNT, stboxp.ch_is); //state_box_choice_is
 80025d8:	4b14      	ldr	r3, [pc, #80]	; (800262c <simple_scr+0xd4>)
 80025da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025dc:	4b14      	ldr	r3, [pc, #80]	; (8002630 <simple_scr+0xd8>)
 80025de:	789b      	ldrb	r3, [r3, #2]
 80025e0:	4914      	ldr	r1, [pc, #80]	; (8002634 <simple_scr+0xdc>)
 80025e2:	480d      	ldr	r0, [pc, #52]	; (8002618 <simple_scr+0xc0>)
 80025e4:	f00b f90a 	bl	800d7fc <siprintf>
	  ili9341_WriteString(250, 215, TextDispBuffer, Font12, cl_WHITE, cl_BLACK);
 80025e8:	4b0c      	ldr	r3, [pc, #48]	; (800261c <simple_scr+0xc4>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	9202      	str	r2, [sp, #8]
 80025ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025f2:	9201      	str	r2, [sp, #4]
 80025f4:	685a      	ldr	r2, [r3, #4]
 80025f6:	9200      	str	r2, [sp, #0]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a07      	ldr	r2, [pc, #28]	; (8002618 <simple_scr+0xc0>)
 80025fc:	21d7      	movs	r1, #215	; 0xd7
 80025fe:	20fa      	movs	r0, #250	; 0xfa
 8002600:	f003 fd13 	bl	800602a <ili9341_WriteString>

}
 8002604:	bf00      	nop
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	20000884 	.word	0x20000884
 8002610:	20000888 	.word	0x20000888
 8002614:	0800fe50 	.word	0x0800fe50
 8002618:	200006b8 	.word	0x200006b8
 800261c:	20000228 	.word	0x20000228
 8002620:	2000088c 	.word	0x2000088c
 8002624:	20000890 	.word	0x20000890
 8002628:	0800fe60 	.word	0x0800fe60
 800262c:	40000400 	.word	0x40000400
 8002630:	200008a8 	.word	0x200008a8
 8002634:	0800fe70 	.word	0x0800fe70

08002638 <Button_machine>:


void Button_machine(){
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0
	 * [0]raw read,
	 * [1]read from 1 as rising detect,
	 * [2]read latest (bdebug),
	 * [3]read latest & erased when fin}
	 */
		btn_read[1] = btn_read[0];
 800263c:	4b26      	ldr	r3, [pc, #152]	; (80026d8 <Button_machine+0xa0>)
 800263e:	781a      	ldrb	r2, [r3, #0]
 8002640:	4b25      	ldr	r3, [pc, #148]	; (80026d8 <Button_machine+0xa0>)
 8002642:	705a      	strb	r2, [r3, #1]
		btn_read[0] = (0x0F & ~(GPIOB->IDR >> 12)); //// available for PB 12 13 14 15 or which the same bank only
 8002644:	4b25      	ldr	r3, [pc, #148]	; (80026dc <Button_machine+0xa4>)
 8002646:	691b      	ldr	r3, [r3, #16]
 8002648:	0b1b      	lsrs	r3, r3, #12
 800264a:	b2db      	uxtb	r3, r3
 800264c:	43db      	mvns	r3, r3
 800264e:	b2db      	uxtb	r3, r3
 8002650:	f003 030f 	and.w	r3, r3, #15
 8002654:	b2da      	uxtb	r2, r3
 8002656:	4b20      	ldr	r3, [pc, #128]	; (80026d8 <Button_machine+0xa0>)
 8002658:	701a      	strb	r2, [r3, #0]

		//// rising edge counter
		if(btn_read[0] && btn_read[1] == 0){
 800265a:	4b1f      	ldr	r3, [pc, #124]	; (80026d8 <Button_machine+0xa0>)
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d022      	beq.n	80026a8 <Button_machine+0x70>
 8002662:	4b1d      	ldr	r3, [pc, #116]	; (80026d8 <Button_machine+0xa0>)
 8002664:	785b      	ldrb	r3, [r3, #1]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d11e      	bne.n	80026a8 <Button_machine+0x70>
			btn_cnt += btn_read[0]; //// plus at each hex pos
 800266a:	4b1b      	ldr	r3, [pc, #108]	; (80026d8 <Button_machine+0xa0>)
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	b29a      	uxth	r2, r3
 8002670:	4b1b      	ldr	r3, [pc, #108]	; (80026e0 <Button_machine+0xa8>)
 8002672:	881b      	ldrh	r3, [r3, #0]
 8002674:	4413      	add	r3, r2
 8002676:	b29a      	uxth	r2, r3
 8002678:	4b19      	ldr	r3, [pc, #100]	; (80026e0 <Button_machine+0xa8>)
 800267a:	801a      	strh	r2, [r3, #0]
			btn_read[2] = btn_read[0]; //// read latest, debug
 800267c:	4b16      	ldr	r3, [pc, #88]	; (80026d8 <Button_machine+0xa0>)
 800267e:	781a      	ldrb	r2, [r3, #0]
 8002680:	4b15      	ldr	r3, [pc, #84]	; (80026d8 <Button_machine+0xa0>)
 8002682:	709a      	strb	r2, [r3, #2]
			btn_read[3] = btn_read[0]; //// read latest, clearable
 8002684:	4b14      	ldr	r3, [pc, #80]	; (80026d8 <Button_machine+0xa0>)
 8002686:	781a      	ldrb	r2, [r3, #0]
 8002688:	4b13      	ldr	r3, [pc, #76]	; (80026d8 <Button_machine+0xa0>)
 800268a:	70da      	strb	r2, [r3, #3]

			//// manual relay flag try


			if(btn_read[2] == 0b0001){ // SW1
 800268c:	4b12      	ldr	r3, [pc, #72]	; (80026d8 <Button_machine+0xa0>)
 800268e:	789b      	ldrb	r3, [r3, #2]
 8002690:	2b01      	cmp	r3, #1
 8002692:	d102      	bne.n	800269a <Button_machine+0x62>
				flag_manual_relay = 1;
 8002694:	4b13      	ldr	r3, [pc, #76]	; (80026e4 <Button_machine+0xac>)
 8002696:	2201      	movs	r2, #1
 8002698:	701a      	strb	r2, [r3, #0]
			}
			if(btn_read[2] == 0b1000){ // SW2
 800269a:	4b0f      	ldr	r3, [pc, #60]	; (80026d8 <Button_machine+0xa0>)
 800269c:	789b      	ldrb	r3, [r3, #2]
 800269e:	2b08      	cmp	r3, #8
 80026a0:	d102      	bne.n	80026a8 <Button_machine+0x70>
				GrandState = pre_lobby;
 80026a2:	4b11      	ldr	r3, [pc, #68]	; (80026e8 <Button_machine+0xb0>)
 80026a4:	2201      	movs	r2, #1
 80026a6:	701a      	strb	r2, [r3, #0]
			}
		}

		//// knob rotter overflow_resist
		if(knobtick[0] <= 16 || knobtick[0] >= 0xFFF8){
 80026a8:	4b10      	ldr	r3, [pc, #64]	; (80026ec <Button_machine+0xb4>)
 80026aa:	881b      	ldrh	r3, [r3, #0]
 80026ac:	2b10      	cmp	r3, #16
 80026ae:	d905      	bls.n	80026bc <Button_machine+0x84>
 80026b0:	4b0e      	ldr	r3, [pc, #56]	; (80026ec <Button_machine+0xb4>)
 80026b2:	881b      	ldrh	r3, [r3, #0]
 80026b4:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d907      	bls.n	80026cc <Button_machine+0x94>
			TIM3->CNT = 0x8000; // back to center
 80026bc:	4b0c      	ldr	r3, [pc, #48]	; (80026f0 <Button_machine+0xb8>)
 80026be:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80026c2:	625a      	str	r2, [r3, #36]	; 0x24
			knobtick[0] = 0x8000;
 80026c4:	4b09      	ldr	r3, [pc, #36]	; (80026ec <Button_machine+0xb4>)
 80026c6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80026ca:	801a      	strh	r2, [r3, #0]
//			btn_k_cnt++;
//		}

//		knob_rotter();

}
 80026cc:	bf00      	nop
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop
 80026d8:	20000884 	.word	0x20000884
 80026dc:	40020400 	.word	0x40020400
 80026e0:	20000888 	.word	0x20000888
 80026e4:	20000874 	.word	0x20000874
 80026e8:	20000006 	.word	0x20000006
 80026ec:	2000088c 	.word	0x2000088c
 80026f0:	40000400 	.word	0x40000400

080026f4 <knob_rotter>:

void knob_rotter(){
 80026f4:	b580      	push	{r7, lr}
 80026f6:	af00      	add	r7, sp, #0
	//// round up
	if((uint16_t)TIM3->CNT > knobtick[0]){  ////(uint16_t)TIM3->CNT - knobtick[0] >= 2
 80026f8:	4b21      	ldr	r3, [pc, #132]	; (8002780 <knob_rotter+0x8c>)
 80026fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fc:	b29a      	uxth	r2, r3
 80026fe:	4b21      	ldr	r3, [pc, #132]	; (8002784 <knob_rotter+0x90>)
 8002700:	881b      	ldrh	r3, [r3, #0]
 8002702:	429a      	cmp	r2, r3
 8002704:	d919      	bls.n	800273a <knob_rotter+0x46>
		//flag_k_up = 1;
		k_flag.up = 1;
 8002706:	4b20      	ldr	r3, [pc, #128]	; (8002788 <knob_rotter+0x94>)
 8002708:	2201      	movs	r2, #1
 800270a:	701a      	strb	r2, [r3, #0]
		knobtick[0] = TIM3->CNT;
 800270c:	4b1c      	ldr	r3, [pc, #112]	; (8002780 <knob_rotter+0x8c>)
 800270e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002710:	b29a      	uxth	r2, r3
 8002712:	4b1c      	ldr	r3, [pc, #112]	; (8002784 <knob_rotter+0x90>)
 8002714:	801a      	strh	r2, [r3, #0]
		//// debug
		sprintf(TextUARTBuffer,"RenK = %d", knobtick[0]);
 8002716:	4b1b      	ldr	r3, [pc, #108]	; (8002784 <knob_rotter+0x90>)
 8002718:	881b      	ldrh	r3, [r3, #0]
 800271a:	461a      	mov	r2, r3
 800271c:	491b      	ldr	r1, [pc, #108]	; (800278c <knob_rotter+0x98>)
 800271e:	481c      	ldr	r0, [pc, #112]	; (8002790 <knob_rotter+0x9c>)
 8002720:	f00b f86c 	bl	800d7fc <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)TextUARTBuffer, strlen(TextUARTBuffer),10);
 8002724:	481a      	ldr	r0, [pc, #104]	; (8002790 <knob_rotter+0x9c>)
 8002726:	f7fd fd5b 	bl	80001e0 <strlen>
 800272a:	4603      	mov	r3, r0
 800272c:	b29a      	uxth	r2, r3
 800272e:	230a      	movs	r3, #10
 8002730:	4917      	ldr	r1, [pc, #92]	; (8002790 <knob_rotter+0x9c>)
 8002732:	4818      	ldr	r0, [pc, #96]	; (8002794 <knob_rotter+0xa0>)
 8002734:	f009 f96f 	bl	800ba16 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)TextUARTBuffer, strlen(TextUARTBuffer),10);

	}
	else{}

}
 8002738:	e01f      	b.n	800277a <knob_rotter+0x86>
	else if((uint16_t)TIM3->CNT < knobtick[0]){ ////knobtick[0] - (uint16_t)TIM3->CNT >= 2
 800273a:	4b11      	ldr	r3, [pc, #68]	; (8002780 <knob_rotter+0x8c>)
 800273c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273e:	b29a      	uxth	r2, r3
 8002740:	4b10      	ldr	r3, [pc, #64]	; (8002784 <knob_rotter+0x90>)
 8002742:	881b      	ldrh	r3, [r3, #0]
 8002744:	429a      	cmp	r2, r3
 8002746:	d218      	bcs.n	800277a <knob_rotter+0x86>
		k_flag.dn = 1;
 8002748:	4b0f      	ldr	r3, [pc, #60]	; (8002788 <knob_rotter+0x94>)
 800274a:	2201      	movs	r2, #1
 800274c:	705a      	strb	r2, [r3, #1]
		knobtick[0] = TIM3->CNT;
 800274e:	4b0c      	ldr	r3, [pc, #48]	; (8002780 <knob_rotter+0x8c>)
 8002750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002752:	b29a      	uxth	r2, r3
 8002754:	4b0b      	ldr	r3, [pc, #44]	; (8002784 <knob_rotter+0x90>)
 8002756:	801a      	strh	r2, [r3, #0]
		sprintf(TextUARTBuffer,"RenK = %d", knobtick[0]);
 8002758:	4b0a      	ldr	r3, [pc, #40]	; (8002784 <knob_rotter+0x90>)
 800275a:	881b      	ldrh	r3, [r3, #0]
 800275c:	461a      	mov	r2, r3
 800275e:	490b      	ldr	r1, [pc, #44]	; (800278c <knob_rotter+0x98>)
 8002760:	480b      	ldr	r0, [pc, #44]	; (8002790 <knob_rotter+0x9c>)
 8002762:	f00b f84b 	bl	800d7fc <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)TextUARTBuffer, strlen(TextUARTBuffer),10);
 8002766:	480a      	ldr	r0, [pc, #40]	; (8002790 <knob_rotter+0x9c>)
 8002768:	f7fd fd3a 	bl	80001e0 <strlen>
 800276c:	4603      	mov	r3, r0
 800276e:	b29a      	uxth	r2, r3
 8002770:	230a      	movs	r3, #10
 8002772:	4907      	ldr	r1, [pc, #28]	; (8002790 <knob_rotter+0x9c>)
 8002774:	4807      	ldr	r0, [pc, #28]	; (8002794 <knob_rotter+0xa0>)
 8002776:	f009 f94e 	bl	800ba16 <HAL_UART_Transmit>
}
 800277a:	bf00      	nop
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	40000400 	.word	0x40000400
 8002784:	2000088c 	.word	0x2000088c
 8002788:	20000890 	.word	0x20000890
 800278c:	0800fe78 	.word	0x0800fe78
 8002790:	2000071c 	.word	0x2000071c
 8002794:	200005d0 	.word	0x200005d0

08002798 <Protection_machine>:

void Protection_machine(){
 8002798:	b580      	push	{r7, lr}
 800279a:	af00      	add	r7, sp, #0

	//// overcurrent
	if (inata.CURRENT >= Current_limit_mA || inatb.CURRENT >= Current_limit_mA){
 800279c:	4b1e      	ldr	r3, [pc, #120]	; (8002818 <Protection_machine+0x80>)
 800279e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80027a2:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80027a6:	da05      	bge.n	80027b4 <Protection_machine+0x1c>
 80027a8:	4b1c      	ldr	r3, [pc, #112]	; (800281c <Protection_machine+0x84>)
 80027aa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80027ae:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80027b2:	db2a      	blt.n	800280a <Protection_machine+0x72>
		gScr.counter_overcurrent++;
 80027b4:	4b1a      	ldr	r3, [pc, #104]	; (8002820 <Protection_machine+0x88>)
 80027b6:	785b      	ldrb	r3, [r3, #1]
 80027b8:	3301      	adds	r3, #1
 80027ba:	b2da      	uxtb	r2, r3
 80027bc:	4b18      	ldr	r3, [pc, #96]	; (8002820 <Protection_machine+0x88>)
 80027be:	705a      	strb	r2, [r3, #1]

		if(gScr.counter_overcurrent >= 2 && !(GrandState == pre_danger || GrandState == danger)){
 80027c0:	4b17      	ldr	r3, [pc, #92]	; (8002820 <Protection_machine+0x88>)
 80027c2:	785b      	ldrb	r3, [r3, #1]
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d924      	bls.n	8002812 <Protection_machine+0x7a>
 80027c8:	4b16      	ldr	r3, [pc, #88]	; (8002824 <Protection_machine+0x8c>)
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	2b0f      	cmp	r3, #15
 80027ce:	d020      	beq.n	8002812 <Protection_machine+0x7a>
 80027d0:	4b14      	ldr	r3, [pc, #80]	; (8002824 <Protection_machine+0x8c>)
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	2b10      	cmp	r3, #16
 80027d6:	d01c      	beq.n	8002812 <Protection_machine+0x7a>
			gScr.counter_overcurrent = 0;
 80027d8:	4b11      	ldr	r3, [pc, #68]	; (8002820 <Protection_machine+0x88>)
 80027da:	2200      	movs	r2, #0
 80027dc:	705a      	strb	r2, [r3, #1]
			gScr.fullflag = 0;
 80027de:	4b10      	ldr	r3, [pc, #64]	; (8002820 <Protection_machine+0x88>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	701a      	strb	r2, [r3, #0]

			////Relay_cut
			HAL_GPIO_WritePin(RelayClient_GPIO_Port, RelayClient_Pin, GPIO_PIN_RESET);
 80027e4:	2200      	movs	r2, #0
 80027e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80027ea:	480f      	ldr	r0, [pc, #60]	; (8002828 <Protection_machine+0x90>)
 80027ec:	f004 ffe4 	bl	80077b8 <HAL_GPIO_WritePin>

			//// Buzzer scream
			buzzr.flag = 3;
 80027f0:	4b0e      	ldr	r3, [pc, #56]	; (800282c <Protection_machine+0x94>)
 80027f2:	2203      	movs	r2, #3
 80027f4:	701a      	strb	r2, [r3, #0]
			buzzr.priod_up = 1000;
 80027f6:	4b0d      	ldr	r3, [pc, #52]	; (800282c <Protection_machine+0x94>)
 80027f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80027fc:	805a      	strh	r2, [r3, #2]
			buzzer_scream_cnt();
 80027fe:	f000 f8eb 	bl	80029d8 <buzzer_scream_cnt>
			//// interrupt, go to state Client error.
			GrandState = pre_danger;
 8002802:	4b08      	ldr	r3, [pc, #32]	; (8002824 <Protection_machine+0x8c>)
 8002804:	220f      	movs	r2, #15
 8002806:	701a      	strb	r2, [r3, #0]
		if(gScr.counter_overcurrent >= 2 && !(GrandState == pre_danger || GrandState == danger)){
 8002808:	e003      	b.n	8002812 <Protection_machine+0x7a>
		}
	}else{gScr.counter_overcurrent = 0;}
 800280a:	4b05      	ldr	r3, [pc, #20]	; (8002820 <Protection_machine+0x88>)
 800280c:	2200      	movs	r2, #0
 800280e:	705a      	strb	r2, [r3, #1]

}
 8002810:	e000      	b.n	8002814 <Protection_machine+0x7c>
		if(gScr.counter_overcurrent >= 2 && !(GrandState == pre_danger || GrandState == danger)){
 8002812:	bf00      	nop
}
 8002814:	bf00      	nop
 8002816:	bd80      	pop	{r7, pc}
 8002818:	200007f8 	.word	0x200007f8
 800281c:	20000810 	.word	0x20000810
 8002820:	20000894 	.word	0x20000894
 8002824:	20000006 	.word	0x20000006
 8002828:	40020800 	.word	0x40020800
 800282c:	20000878 	.word	0x20000878

08002830 <manual_relay>:

void manual_relay(){
 8002830:	b580      	push	{r7, lr}
 8002832:	af00      	add	r7, sp, #0
	if(flag_manual_relay){
 8002834:	4b08      	ldr	r3, [pc, #32]	; (8002858 <manual_relay+0x28>)
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d00b      	beq.n	8002854 <manual_relay+0x24>

		if(GrandState == monitor){
 800283c:	4b07      	ldr	r3, [pc, #28]	; (800285c <manual_relay+0x2c>)
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	2b0c      	cmp	r3, #12
 8002842:	d104      	bne.n	800284e <manual_relay+0x1e>
			HAL_GPIO_TogglePin(RelayClient_GPIO_Port, RelayClient_Pin);
 8002844:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002848:	4805      	ldr	r0, [pc, #20]	; (8002860 <manual_relay+0x30>)
 800284a:	f004 ffce 	bl	80077ea <HAL_GPIO_TogglePin>
		}
		flag_manual_relay = 0;
 800284e:	4b02      	ldr	r3, [pc, #8]	; (8002858 <manual_relay+0x28>)
 8002850:	2200      	movs	r2, #0
 8002852:	701a      	strb	r2, [r3, #0]
	}
}
 8002854:	bf00      	nop
 8002856:	bd80      	pop	{r7, pc}
 8002858:	20000874 	.word	0x20000874
 800285c:	20000006 	.word	0x20000006
 8002860:	40020800 	.word	0x40020800

08002864 <Compare_pin_32>:


void Compare_pin_32(uint32_t raw32, uint16_t *Lista_GPIOx, uint8_t gpst,char *outchar){
 8002864:	b590      	push	{r4, r7, lr}
 8002866:	b089      	sub	sp, #36	; 0x24
 8002868:	af00      	add	r7, sp, #0
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	60b9      	str	r1, [r7, #8]
 800286e:	603b      	str	r3, [r7, #0]
 8002870:	4613      	mov	r3, r2
 8002872:	71fb      	strb	r3, [r7, #7]
	 * 	@param raw32       rawuint32_t data given from gpio_testscript functions
	 * 	@param Lista_GPIOx List of GPIOs bank need to be checked
	 * 	@param gpst        select report type [0 - PA_] [1 - PB_] [2 - PC_]
	 * 	@param outchar     char for record the compare result report
	 * */
	uint16_t raw32_N = raw32 & 0xFFFF;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	83bb      	strh	r3, [r7, #28]
	uint16_t raw32_P = (raw32 >> 16) & 0xFFFF;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	0c1b      	lsrs	r3, r3, #16
 800287c:	837b      	strh	r3, [r7, #26]
	uint8_t iaa, iab, cntr_w = 0;
 800287e:	2300      	movs	r3, #0
 8002880:	77fb      	strb	r3, [r7, #31]
	char aadd[6];

	for(register int i = 0;i < 16;i++){
 8002882:	2400      	movs	r4, #0
 8002884:	e081      	b.n	800298a <Compare_pin_32+0x126>
		if(Lista_GPIOx[i] >= 20){break;}
 8002886:	4623      	mov	r3, r4
 8002888:	005b      	lsls	r3, r3, #1
 800288a:	68ba      	ldr	r2, [r7, #8]
 800288c:	4413      	add	r3, r2
 800288e:	881b      	ldrh	r3, [r3, #0]
 8002890:	2b13      	cmp	r3, #19
 8002892:	d87e      	bhi.n	8002992 <Compare_pin_32+0x12e>

		iaa = (raw32_N >> Lista_GPIOx[i]) & 0x01;
 8002894:	8bbb      	ldrh	r3, [r7, #28]
 8002896:	4622      	mov	r2, r4
 8002898:	0052      	lsls	r2, r2, #1
 800289a:	68b9      	ldr	r1, [r7, #8]
 800289c:	440a      	add	r2, r1
 800289e:	8812      	ldrh	r2, [r2, #0]
 80028a0:	4113      	asrs	r3, r2
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	f003 0301 	and.w	r3, r3, #1
 80028a8:	767b      	strb	r3, [r7, #25]
		iab = (raw32_P >> Lista_GPIOx[i]) & 0x01;
 80028aa:	8b7b      	ldrh	r3, [r7, #26]
 80028ac:	4622      	mov	r2, r4
 80028ae:	0052      	lsls	r2, r2, #1
 80028b0:	68b9      	ldr	r1, [r7, #8]
 80028b2:	440a      	add	r2, r1
 80028b4:	8812      	ldrh	r2, [r2, #0]
 80028b6:	4113      	asrs	r3, r2
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	f003 0301 	and.w	r3, r3, #1
 80028be:	763b      	strb	r3, [r7, #24]
		 if(iaa == iab){
 80028c0:	7e7a      	ldrb	r2, [r7, #25]
 80028c2:	7e3b      	ldrb	r3, [r7, #24]
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d15f      	bne.n	8002988 <Compare_pin_32+0x124>

			 cntr_w++; // count if match
 80028c8:	7ffb      	ldrb	r3, [r7, #31]
 80028ca:	3301      	adds	r3, #1
 80028cc:	77fb      	strb	r3, [r7, #31]

			 //// add problem pin
			 switch(gpst){
 80028ce:	79fb      	ldrb	r3, [r7, #7]
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d00f      	beq.n	80028f4 <Compare_pin_32+0x90>
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d01b      	beq.n	8002910 <Compare_pin_32+0xac>
			 default:
			 case 0: // A
				 sprintf(aadd, "PA%d", (uint8_t)Lista_GPIOx[i]); //
 80028d8:	4623      	mov	r3, r4
 80028da:	005b      	lsls	r3, r3, #1
 80028dc:	68ba      	ldr	r2, [r7, #8]
 80028de:	4413      	add	r3, r2
 80028e0:	881b      	ldrh	r3, [r3, #0]
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	461a      	mov	r2, r3
 80028e6:	f107 0310 	add.w	r3, r7, #16
 80028ea:	4934      	ldr	r1, [pc, #208]	; (80029bc <Compare_pin_32+0x158>)
 80028ec:	4618      	mov	r0, r3
 80028ee:	f00a ff85 	bl	800d7fc <siprintf>
				 break;
 80028f2:	e01b      	b.n	800292c <Compare_pin_32+0xc8>
			 case 1: // B
			 	 sprintf(aadd, "PB%d", (uint8_t)Lista_GPIOx[i]); //
 80028f4:	4623      	mov	r3, r4
 80028f6:	005b      	lsls	r3, r3, #1
 80028f8:	68ba      	ldr	r2, [r7, #8]
 80028fa:	4413      	add	r3, r2
 80028fc:	881b      	ldrh	r3, [r3, #0]
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	461a      	mov	r2, r3
 8002902:	f107 0310 	add.w	r3, r7, #16
 8002906:	492e      	ldr	r1, [pc, #184]	; (80029c0 <Compare_pin_32+0x15c>)
 8002908:	4618      	mov	r0, r3
 800290a:	f00a ff77 	bl	800d7fc <siprintf>
			 	 break;
 800290e:	e00d      	b.n	800292c <Compare_pin_32+0xc8>
			 case 2: // C
			 	 sprintf(aadd, "PC%d", (uint8_t)Lista_GPIOx[i]); //
 8002910:	4623      	mov	r3, r4
 8002912:	005b      	lsls	r3, r3, #1
 8002914:	68ba      	ldr	r2, [r7, #8]
 8002916:	4413      	add	r3, r2
 8002918:	881b      	ldrh	r3, [r3, #0]
 800291a:	b2db      	uxtb	r3, r3
 800291c:	461a      	mov	r2, r3
 800291e:	f107 0310 	add.w	r3, r7, #16
 8002922:	4928      	ldr	r1, [pc, #160]	; (80029c4 <Compare_pin_32+0x160>)
 8002924:	4618      	mov	r0, r3
 8002926:	f00a ff69 	bl	800d7fc <siprintf>
			 	 break;
 800292a:	bf00      	nop

			 }
			 strncat(outchar, aadd, 4);
 800292c:	f107 0310 	add.w	r3, r7, #16
 8002930:	2204      	movs	r2, #4
 8002932:	4619      	mov	r1, r3
 8002934:	6838      	ldr	r0, [r7, #0]
 8002936:	f00a ff81 	bl	800d83c <strncat>

			 //// add High, Low
			 if(iaa == 1){
 800293a:	7e7b      	ldrb	r3, [r7, #25]
 800293c:	2b01      	cmp	r3, #1
 800293e:	d106      	bne.n	800294e <Compare_pin_32+0xea>
				 sprintf(aadd, "_H");
 8002940:	f107 0310 	add.w	r3, r7, #16
 8002944:	4920      	ldr	r1, [pc, #128]	; (80029c8 <Compare_pin_32+0x164>)
 8002946:	4618      	mov	r0, r3
 8002948:	f00a ff58 	bl	800d7fc <siprintf>
 800294c:	e008      	b.n	8002960 <Compare_pin_32+0xfc>
			 }else if(iaa == 0){
 800294e:	7e7b      	ldrb	r3, [r7, #25]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d105      	bne.n	8002960 <Compare_pin_32+0xfc>
				 sprintf(aadd, "_L");
 8002954:	f107 0310 	add.w	r3, r7, #16
 8002958:	491c      	ldr	r1, [pc, #112]	; (80029cc <Compare_pin_32+0x168>)
 800295a:	4618      	mov	r0, r3
 800295c:	f00a ff4e 	bl	800d7fc <siprintf>
			 }
			 strncat(outchar, aadd, 2);
 8002960:	f107 0310 	add.w	r3, r7, #16
 8002964:	2202      	movs	r2, #2
 8002966:	4619      	mov	r1, r3
 8002968:	6838      	ldr	r0, [r7, #0]
 800296a:	f00a ff67 	bl	800d83c <strncat>

			 //// add blank
			 sprintf(aadd, " ");
 800296e:	f107 0310 	add.w	r3, r7, #16
 8002972:	4917      	ldr	r1, [pc, #92]	; (80029d0 <Compare_pin_32+0x16c>)
 8002974:	4618      	mov	r0, r3
 8002976:	f00a ff41 	bl	800d7fc <siprintf>
			 strncat(outchar, aadd, 1);
 800297a:	f107 0310 	add.w	r3, r7, #16
 800297e:	2201      	movs	r2, #1
 8002980:	4619      	mov	r1, r3
 8002982:	6838      	ldr	r0, [r7, #0]
 8002984:	f00a ff5a 	bl	800d83c <strncat>
	for(register int i = 0;i < 16;i++){
 8002988:	3401      	adds	r4, #1
 800298a:	2c0f      	cmp	r4, #15
 800298c:	f77f af7b 	ble.w	8002886 <Compare_pin_32+0x22>
 8002990:	e000      	b.n	8002994 <Compare_pin_32+0x130>
		if(Lista_GPIOx[i] >= 20){break;}
 8002992:	bf00      	nop
		 }
	}

	if(!cntr_w){
 8002994:	7ffb      	ldrb	r3, [r7, #31]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d10c      	bne.n	80029b4 <Compare_pin_32+0x150>
		sprintf(aadd, "_PASS");
 800299a:	f107 0310 	add.w	r3, r7, #16
 800299e:	490d      	ldr	r1, [pc, #52]	; (80029d4 <Compare_pin_32+0x170>)
 80029a0:	4618      	mov	r0, r3
 80029a2:	f00a ff2b 	bl	800d7fc <siprintf>
		strncat(outchar, aadd, 7);
 80029a6:	f107 0310 	add.w	r3, r7, #16
 80029aa:	2207      	movs	r2, #7
 80029ac:	4619      	mov	r1, r3
 80029ae:	6838      	ldr	r0, [r7, #0]
 80029b0:	f00a ff44 	bl	800d83c <strncat>
	}
}
 80029b4:	bf00      	nop
 80029b6:	3724      	adds	r7, #36	; 0x24
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd90      	pop	{r4, r7, pc}
 80029bc:	0800fe84 	.word	0x0800fe84
 80029c0:	0800fe8c 	.word	0x0800fe8c
 80029c4:	0800fe94 	.word	0x0800fe94
 80029c8:	0800fe9c 	.word	0x0800fe9c
 80029cc:	0800fea0 	.word	0x0800fea0
 80029d0:	0800fea4 	.word	0x0800fea4
 80029d4:	0800fea8 	.word	0x0800fea8

080029d8 <buzzer_scream_cnt>:

void buzzer_scream_cnt(){
 80029d8:	b598      	push	{r3, r4, r7, lr}
 80029da:	af00      	add	r7, sp, #0
	static enum {bz_init, bz_silent, bz_scream} bz_st = bz_init;

		switch(bz_st){
 80029dc:	4b35      	ldr	r3, [pc, #212]	; (8002ab4 <buzzer_scream_cnt+0xdc>)
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d039      	beq.n	8002a58 <buzzer_scream_cnt+0x80>
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d01d      	beq.n	8002a24 <buzzer_scream_cnt+0x4c>
		default:
		case bz_init:
			//HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);

			if(buzzr.flag){
 80029e8:	4b33      	ldr	r3, [pc, #204]	; (8002ab8 <buzzer_scream_cnt+0xe0>)
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d015      	beq.n	8002a1c <buzzer_scream_cnt+0x44>

				HAL_TIM_Base_Start_IT(&htim10);
 80029f0:	4832      	ldr	r0, [pc, #200]	; (8002abc <buzzer_scream_cnt+0xe4>)
 80029f2:	f008 fba5 	bl	800b140 <HAL_TIM_Base_Start_IT>
				buzzr.timestamp = buzzr.priod_up + HAL_GetTick();
 80029f6:	4b30      	ldr	r3, [pc, #192]	; (8002ab8 <buzzer_scream_cnt+0xe0>)
 80029f8:	885b      	ldrh	r3, [r3, #2]
 80029fa:	461c      	mov	r4, r3
 80029fc:	f003 ffee 	bl	80069dc <HAL_GetTick>
 8002a00:	4603      	mov	r3, r0
 8002a02:	4423      	add	r3, r4
 8002a04:	4a2c      	ldr	r2, [pc, #176]	; (8002ab8 <buzzer_scream_cnt+0xe0>)
 8002a06:	6093      	str	r3, [r2, #8]

				bz_st = bz_scream;
 8002a08:	4b2a      	ldr	r3, [pc, #168]	; (8002ab4 <buzzer_scream_cnt+0xdc>)
 8002a0a:	2202      	movs	r2, #2
 8002a0c:	701a      	strb	r2, [r3, #0]
				/// down flag_counter every 1 scream
				buzzr.flag--;
 8002a0e:	4b2a      	ldr	r3, [pc, #168]	; (8002ab8 <buzzer_scream_cnt+0xe0>)
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	3b01      	subs	r3, #1
 8002a14:	b2da      	uxtb	r2, r3
 8002a16:	4b28      	ldr	r3, [pc, #160]	; (8002ab8 <buzzer_scream_cnt+0xe0>)
 8002a18:	701a      	strb	r2, [r3, #0]
			}else{
				HAL_TIM_Base_Stop_IT(&htim10);
			}

			break;
 8002a1a:	e048      	b.n	8002aae <buzzer_scream_cnt+0xd6>
				HAL_TIM_Base_Stop_IT(&htim10);
 8002a1c:	4827      	ldr	r0, [pc, #156]	; (8002abc <buzzer_scream_cnt+0xe4>)
 8002a1e:	f008 fbf1 	bl	800b204 <HAL_TIM_Base_Stop_IT>
			break;
 8002a22:	e044      	b.n	8002aae <buzzer_scream_cnt+0xd6>

		case bz_scream:
			HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET);
 8002a24:	2201      	movs	r2, #1
 8002a26:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002a2a:	4825      	ldr	r0, [pc, #148]	; (8002ac0 <buzzer_scream_cnt+0xe8>)
 8002a2c:	f004 fec4 	bl	80077b8 <HAL_GPIO_WritePin>

			if(HAL_GetTick() >= buzzr.timestamp){
 8002a30:	f003 ffd4 	bl	80069dc <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	4b20      	ldr	r3, [pc, #128]	; (8002ab8 <buzzer_scream_cnt+0xe0>)
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d334      	bcc.n	8002aa8 <buzzer_scream_cnt+0xd0>
				buzzr.timestamp = buzzr.priod_dn + HAL_GetTick();
 8002a3e:	4b1e      	ldr	r3, [pc, #120]	; (8002ab8 <buzzer_scream_cnt+0xe0>)
 8002a40:	889b      	ldrh	r3, [r3, #4]
 8002a42:	461c      	mov	r4, r3
 8002a44:	f003 ffca 	bl	80069dc <HAL_GetTick>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	4423      	add	r3, r4
 8002a4c:	4a1a      	ldr	r2, [pc, #104]	; (8002ab8 <buzzer_scream_cnt+0xe0>)
 8002a4e:	6093      	str	r3, [r2, #8]

				bz_st = bz_silent;
 8002a50:	4b18      	ldr	r3, [pc, #96]	; (8002ab4 <buzzer_scream_cnt+0xdc>)
 8002a52:	2201      	movs	r2, #1
 8002a54:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002a56:	e027      	b.n	8002aa8 <buzzer_scream_cnt+0xd0>


		case bz_silent:
			HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002a5e:	4818      	ldr	r0, [pc, #96]	; (8002ac0 <buzzer_scream_cnt+0xe8>)
 8002a60:	f004 feaa 	bl	80077b8 <HAL_GPIO_WritePin>

			if(HAL_GetTick() >= buzzr.timestamp){
 8002a64:	f003 ffba 	bl	80069dc <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	4b13      	ldr	r3, [pc, #76]	; (8002ab8 <buzzer_scream_cnt+0xe0>)
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d31c      	bcc.n	8002aac <buzzer_scream_cnt+0xd4>

				if(buzzr.flag){
 8002a72:	4b11      	ldr	r3, [pc, #68]	; (8002ab8 <buzzer_scream_cnt+0xe0>)
 8002a74:	781b      	ldrb	r3, [r3, #0]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d012      	beq.n	8002aa0 <buzzer_scream_cnt+0xc8>
					buzzr.timestamp = buzzr.priod_up + HAL_GetTick();
 8002a7a:	4b0f      	ldr	r3, [pc, #60]	; (8002ab8 <buzzer_scream_cnt+0xe0>)
 8002a7c:	885b      	ldrh	r3, [r3, #2]
 8002a7e:	461c      	mov	r4, r3
 8002a80:	f003 ffac 	bl	80069dc <HAL_GetTick>
 8002a84:	4603      	mov	r3, r0
 8002a86:	4423      	add	r3, r4
 8002a88:	4a0b      	ldr	r2, [pc, #44]	; (8002ab8 <buzzer_scream_cnt+0xe0>)
 8002a8a:	6093      	str	r3, [r2, #8]

					buzzr.flag--;
 8002a8c:	4b0a      	ldr	r3, [pc, #40]	; (8002ab8 <buzzer_scream_cnt+0xe0>)
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	3b01      	subs	r3, #1
 8002a92:	b2da      	uxtb	r2, r3
 8002a94:	4b08      	ldr	r3, [pc, #32]	; (8002ab8 <buzzer_scream_cnt+0xe0>)
 8002a96:	701a      	strb	r2, [r3, #0]
					bz_st = bz_scream;
 8002a98:	4b06      	ldr	r3, [pc, #24]	; (8002ab4 <buzzer_scream_cnt+0xdc>)
 8002a9a:	2202      	movs	r2, #2
 8002a9c:	701a      	strb	r2, [r3, #0]
				}else{
				bz_st = bz_init;
				}
			}

			break;
 8002a9e:	e005      	b.n	8002aac <buzzer_scream_cnt+0xd4>
				bz_st = bz_init;
 8002aa0:	4b04      	ldr	r3, [pc, #16]	; (8002ab4 <buzzer_scream_cnt+0xdc>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	701a      	strb	r2, [r3, #0]
			break;
 8002aa6:	e001      	b.n	8002aac <buzzer_scream_cnt+0xd4>
			break;
 8002aa8:	bf00      	nop
 8002aaa:	e000      	b.n	8002aae <buzzer_scream_cnt+0xd6>
			break;
 8002aac:	bf00      	nop
		}

}
 8002aae:	bf00      	nop
 8002ab0:	bd98      	pop	{r3, r4, r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	200008b0 	.word	0x200008b0
 8002ab8:	20000878 	.word	0x20000878
 8002abc:	20000544 	.word	0x20000544
 8002ac0:	40020800 	.word	0x40020800
 8002ac4:	00000000 	.word	0x00000000

08002ac8 <GrandState_Verita>:


void GrandState_Verita(){
 8002ac8:	b590      	push	{r4, r7, lr}
 8002aca:	b087      	sub	sp, #28
 8002acc:	af04      	add	r7, sp, #16

	switch(GrandState){
 8002ace:	4b9c      	ldr	r3, [pc, #624]	; (8002d40 <GrandState_Verita+0x278>)
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	2b16      	cmp	r3, #22
 8002ad4:	f200 80d5 	bhi.w	8002c82 <GrandState_Verita+0x1ba>
 8002ad8:	a201      	add	r2, pc, #4	; (adr r2, 8002ae0 <GrandState_Verita+0x18>)
 8002ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ade:	bf00      	nop
 8002ae0:	08002d1d 	.word	0x08002d1d
 8002ae4:	08002b3d 	.word	0x08002b3d
 8002ae8:	08002c83 	.word	0x08002c83
 8002aec:	080030ed 	.word	0x080030ed
 8002af0:	0800333d 	.word	0x0800333d
 8002af4:	08002d89 	.word	0x08002d89
 8002af8:	08002e73 	.word	0x08002e73
 8002afc:	08002eb1 	.word	0x08002eb1
 8002b00:	080039e1 	.word	0x080039e1
 8002b04:	08003aeb 	.word	0x08003aeb
 8002b08:	08003b11 	.word	0x08003b11
 8002b0c:	08004281 	.word	0x08004281
 8002b10:	08004597 	.word	0x08004597
 8002b14:	08003d7d 	.word	0x08003d7d
 8002b18:	0800414b 	.word	0x0800414b
 8002b1c:	0800484b 	.word	0x0800484b
 8002b20:	08004a13 	.word	0x08004a13
 8002b24:	08004a71 	.word	0x08004a71
 8002b28:	08004bc3 	.word	0x08004bc3
 8002b2c:	08004bed 	.word	0x08004bed
 8002b30:	08004cbf 	.word	0x08004cbf
 8002b34:	08004d39 	.word	0x08004d39
 8002b38:	08004e6b 	.word	0x08004e6b

	case pre_lobby:

		stboxp.choice_set = bpoxy_lobby; //state_box_choice_n = 4;
 8002b3c:	4b81      	ldr	r3, [pc, #516]	; (8002d44 <GrandState_Verita+0x27c>)
 8002b3e:	2201      	movs	r2, #1
 8002b40:	705a      	strb	r2, [r3, #1]
		ili9341_FillRect(0, 0, 320, 240, cl_BLACK);
 8002b42:	2300      	movs	r3, #0
 8002b44:	9300      	str	r3, [sp, #0]
 8002b46:	23f0      	movs	r3, #240	; 0xf0
 8002b48:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002b4c:	2100      	movs	r1, #0
 8002b4e:	2000      	movs	r0, #0
 8002b50:	f003 f8c2 	bl	8005cd8 <ili9341_FillRect>

		ili9341_FillRect(0, 0, 320, 32, cl_GRAY);
 8002b54:	f645 23eb 	movw	r3, #23275	; 0x5aeb
 8002b58:	9300      	str	r3, [sp, #0]
 8002b5a:	2320      	movs	r3, #32
 8002b5c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002b60:	2100      	movs	r1, #0
 8002b62:	2000      	movs	r0, #0
 8002b64:	f003 f8b8 	bl	8005cd8 <ili9341_FillRect>

		sprintf(TextDispBuffer,"Nucleo-F411RE Tester");
 8002b68:	4977      	ldr	r1, [pc, #476]	; (8002d48 <GrandState_Verita+0x280>)
 8002b6a:	4878      	ldr	r0, [pc, #480]	; (8002d4c <GrandState_Verita+0x284>)
 8002b6c:	f00a fe46 	bl	800d7fc <siprintf>
		ili9341_WriteStringNoBG(25, 10, TextDispBuffer, Font20, cl_BLACK);
 8002b70:	4b77      	ldr	r3, [pc, #476]	; (8002d50 <GrandState_Verita+0x288>)
 8002b72:	2200      	movs	r2, #0
 8002b74:	9201      	str	r2, [sp, #4]
 8002b76:	685a      	ldr	r2, [r3, #4]
 8002b78:	9200      	str	r2, [sp, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a73      	ldr	r2, [pc, #460]	; (8002d4c <GrandState_Verita+0x284>)
 8002b7e:	210a      	movs	r1, #10
 8002b80:	2019      	movs	r0, #25
 8002b82:	f003 fa9f 	bl	80060c4 <ili9341_WriteStringNoBG>
		ili9341_DrawHLine(cl_ORANGE, 0, 33, 320);
 8002b86:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002b8a:	2221      	movs	r2, #33	; 0x21
 8002b8c:	2100      	movs	r1, #0
 8002b8e:	f64f 10a0 	movw	r0, #63904	; 0xf9a0
 8002b92:	f002 fff3 	bl	8005b7c <ili9341_DrawHLine>

		sprintf(TextDispBuffer,"OWL's OFFICE");
 8002b96:	496f      	ldr	r1, [pc, #444]	; (8002d54 <GrandState_Verita+0x28c>)
 8002b98:	486c      	ldr	r0, [pc, #432]	; (8002d4c <GrandState_Verita+0x284>)
 8002b9a:	f00a fe2f 	bl	800d7fc <siprintf>
		ili9341_WriteString(185, 36, TextDispBuffer, Font16, cl_WHITE, cl_BLUE);
 8002b9e:	4b6e      	ldr	r3, [pc, #440]	; (8002d58 <GrandState_Verita+0x290>)
 8002ba0:	221f      	movs	r2, #31
 8002ba2:	9202      	str	r2, [sp, #8]
 8002ba4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ba8:	9201      	str	r2, [sp, #4]
 8002baa:	685a      	ldr	r2, [r3, #4]
 8002bac:	9200      	str	r2, [sp, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a66      	ldr	r2, [pc, #408]	; (8002d4c <GrandState_Verita+0x284>)
 8002bb2:	2124      	movs	r1, #36	; 0x24
 8002bb4:	20b9      	movs	r0, #185	; 0xb9
 8002bb6:	f003 fa38 	bl	800602a <ili9341_WriteString>

		//ili9341_FillRect(305, 0, 15, 240, cl_ORANGE);
		ili9341_FillRect(0, 0, 15, 240, cl_ORANGE);
 8002bba:	f64f 13a0 	movw	r3, #63904	; 0xf9a0
 8002bbe:	9300      	str	r3, [sp, #0]
 8002bc0:	23f0      	movs	r3, #240	; 0xf0
 8002bc2:	220f      	movs	r2, #15
 8002bc4:	2100      	movs	r1, #0
 8002bc6:	2000      	movs	r0, #0
 8002bc8:	f003 f886 	bl	8005cd8 <ili9341_FillRect>
		ili9341_DrawVLine(cl_BLACK, 14, 0, 240);
 8002bcc:	23f0      	movs	r3, #240	; 0xf0
 8002bce:	2200      	movs	r2, #0
 8002bd0:	210e      	movs	r1, #14
 8002bd2:	2000      	movs	r0, #0
 8002bd4:	f003 f829 	bl	8005c2a <ili9341_DrawVLine>

		sprintf(TextDispBuffer,"Full-Script");
 8002bd8:	4960      	ldr	r1, [pc, #384]	; (8002d5c <GrandState_Verita+0x294>)
 8002bda:	485c      	ldr	r0, [pc, #368]	; (8002d4c <GrandState_Verita+0x284>)
 8002bdc:	f00a fe0e 	bl	800d7fc <siprintf>
		ili9341_WriteStringNoBG(60, 60, TextDispBuffer, Font16, cl_CYAN);
 8002be0:	4b5d      	ldr	r3, [pc, #372]	; (8002d58 <GrandState_Verita+0x290>)
 8002be2:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002be6:	9201      	str	r2, [sp, #4]
 8002be8:	685a      	ldr	r2, [r3, #4]
 8002bea:	9200      	str	r2, [sp, #0]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a57      	ldr	r2, [pc, #348]	; (8002d4c <GrandState_Verita+0x284>)
 8002bf0:	213c      	movs	r1, #60	; 0x3c
 8002bf2:	203c      	movs	r0, #60	; 0x3c
 8002bf4:	f003 fa66 	bl	80060c4 <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"Monitor-mode");
 8002bf8:	4959      	ldr	r1, [pc, #356]	; (8002d60 <GrandState_Verita+0x298>)
 8002bfa:	4854      	ldr	r0, [pc, #336]	; (8002d4c <GrandState_Verita+0x284>)
 8002bfc:	f00a fdfe 	bl	800d7fc <siprintf>
		ili9341_WriteStringNoBG(60, 90, TextDispBuffer, Font16, cl_CYAN);
 8002c00:	4b55      	ldr	r3, [pc, #340]	; (8002d58 <GrandState_Verita+0x290>)
 8002c02:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002c06:	9201      	str	r2, [sp, #4]
 8002c08:	685a      	ldr	r2, [r3, #4]
 8002c0a:	9200      	str	r2, [sp, #0]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a4f      	ldr	r2, [pc, #316]	; (8002d4c <GrandState_Verita+0x284>)
 8002c10:	215a      	movs	r1, #90	; 0x5a
 8002c12:	203c      	movs	r0, #60	; 0x3c
 8002c14:	f003 fa56 	bl	80060c4 <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"Hardware-mode");
 8002c18:	4952      	ldr	r1, [pc, #328]	; (8002d64 <GrandState_Verita+0x29c>)
 8002c1a:	484c      	ldr	r0, [pc, #304]	; (8002d4c <GrandState_Verita+0x284>)
 8002c1c:	f00a fdee 	bl	800d7fc <siprintf>
		ili9341_WriteStringNoBG(60, 120, TextDispBuffer, Font16, cl_CYAN);
 8002c20:	4b4d      	ldr	r3, [pc, #308]	; (8002d58 <GrandState_Verita+0x290>)
 8002c22:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002c26:	9201      	str	r2, [sp, #4]
 8002c28:	685a      	ldr	r2, [r3, #4]
 8002c2a:	9200      	str	r2, [sp, #0]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a47      	ldr	r2, [pc, #284]	; (8002d4c <GrandState_Verita+0x284>)
 8002c30:	2178      	movs	r1, #120	; 0x78
 8002c32:	203c      	movs	r0, #60	; 0x3c
 8002c34:	f003 fa46 	bl	80060c4 <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"Firmware-mode");
 8002c38:	494b      	ldr	r1, [pc, #300]	; (8002d68 <GrandState_Verita+0x2a0>)
 8002c3a:	4844      	ldr	r0, [pc, #272]	; (8002d4c <GrandState_Verita+0x284>)
 8002c3c:	f00a fdde 	bl	800d7fc <siprintf>
		ili9341_WriteStringNoBG(60, 150, TextDispBuffer, Font16, cl_CYAN);
 8002c40:	4b45      	ldr	r3, [pc, #276]	; (8002d58 <GrandState_Verita+0x290>)
 8002c42:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002c46:	9201      	str	r2, [sp, #4]
 8002c48:	685a      	ldr	r2, [r3, #4]
 8002c4a:	9200      	str	r2, [sp, #0]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a3f      	ldr	r2, [pc, #252]	; (8002d4c <GrandState_Verita+0x284>)
 8002c50:	2196      	movs	r1, #150	; 0x96
 8002c52:	203c      	movs	r0, #60	; 0x3c
 8002c54:	f003 fa36 	bl	80060c4 <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"About Verita");
 8002c58:	4944      	ldr	r1, [pc, #272]	; (8002d6c <GrandState_Verita+0x2a4>)
 8002c5a:	483c      	ldr	r0, [pc, #240]	; (8002d4c <GrandState_Verita+0x284>)
 8002c5c:	f00a fdce 	bl	800d7fc <siprintf>
		ili9341_WriteStringNoBG(60, 180, TextDispBuffer, Font16, cl_CYAN);
 8002c60:	4b3d      	ldr	r3, [pc, #244]	; (8002d58 <GrandState_Verita+0x290>)
 8002c62:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002c66:	9201      	str	r2, [sp, #4]
 8002c68:	685a      	ldr	r2, [r3, #4]
 8002c6a:	9200      	str	r2, [sp, #0]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a37      	ldr	r2, [pc, #220]	; (8002d4c <GrandState_Verita+0x284>)
 8002c70:	21b4      	movs	r1, #180	; 0xb4
 8002c72:	203c      	movs	r0, #60	; 0x3c
 8002c74:	f003 fa26 	bl	80060c4 <ili9341_WriteStringNoBG>



		GrandState = lobby;
 8002c78:	4b31      	ldr	r3, [pc, #196]	; (8002d40 <GrandState_Verita+0x278>)
 8002c7a:	2202      	movs	r2, #2
 8002c7c:	701a      	strb	r2, [r3, #0]
		break; // pre-lobby
 8002c7e:	f002 b918 	b.w	8004eb2 <GrandState_Verita+0x23ea>

	default:
	case lobby:
		stboxp.choice_set = bpoxy_lobby; //state_box_choice_n = 4;
 8002c82:	4b30      	ldr	r3, [pc, #192]	; (8002d44 <GrandState_Verita+0x27c>)
 8002c84:	2201      	movs	r2, #1
 8002c86:	705a      	strb	r2, [r3, #1]

		// debug
		sprintf(TextDispBuffer, "%ld, %d", TIM3->CNT, stboxp.ch_is);
 8002c88:	4b39      	ldr	r3, [pc, #228]	; (8002d70 <GrandState_Verita+0x2a8>)
 8002c8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c8c:	4b2d      	ldr	r3, [pc, #180]	; (8002d44 <GrandState_Verita+0x27c>)
 8002c8e:	789b      	ldrb	r3, [r3, #2]
 8002c90:	4938      	ldr	r1, [pc, #224]	; (8002d74 <GrandState_Verita+0x2ac>)
 8002c92:	482e      	ldr	r0, [pc, #184]	; (8002d4c <GrandState_Verita+0x284>)
 8002c94:	f00a fdb2 	bl	800d7fc <siprintf>
		ili9341_WriteString(240, 220, TextDispBuffer, Font12, cl_WHITE, cl_BLACK);
 8002c98:	4b37      	ldr	r3, [pc, #220]	; (8002d78 <GrandState_Verita+0x2b0>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	9202      	str	r2, [sp, #8]
 8002c9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ca2:	9201      	str	r2, [sp, #4]
 8002ca4:	685a      	ldr	r2, [r3, #4]
 8002ca6:	9200      	str	r2, [sp, #0]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a28      	ldr	r2, [pc, #160]	; (8002d4c <GrandState_Verita+0x284>)
 8002cac:	21dc      	movs	r1, #220	; 0xdc
 8002cae:	20f0      	movs	r0, #240	; 0xf0
 8002cb0:	f003 f9bb 	bl	800602a <ili9341_WriteString>
		//simple_scr();

		if(k_flag.cnt){
 8002cb4:	4b31      	ldr	r3, [pc, #196]	; (8002d7c <GrandState_Verita+0x2b4>)
 8002cb6:	789b      	ldrb	r3, [r3, #2]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	f002 80e7 	beq.w	8004e8c <GrandState_Verita+0x23c4>


			if (stboxp.ch_is == 1) {
 8002cbe:	4b21      	ldr	r3, [pc, #132]	; (8002d44 <GrandState_Verita+0x27c>)
 8002cc0:	789b      	ldrb	r3, [r3, #2]
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d106      	bne.n	8002cd4 <GrandState_Verita+0x20c>
				gScr.fullflag = ff_runfull;
 8002cc6:	4b2e      	ldr	r3, [pc, #184]	; (8002d80 <GrandState_Verita+0x2b8>)
 8002cc8:	2203      	movs	r2, #3
 8002cca:	701a      	strb	r2, [r3, #0]
				GrandState = pre_hw_chk;
 8002ccc:	4b1c      	ldr	r3, [pc, #112]	; (8002d40 <GrandState_Verita+0x278>)
 8002cce:	2203      	movs	r2, #3
 8002cd0:	701a      	strb	r2, [r3, #0]
 8002cd2:	e01e      	b.n	8002d12 <GrandState_Verita+0x24a>
			}
			else if (stboxp.ch_is == 2){GrandState = pre_monitor;}
 8002cd4:	4b1b      	ldr	r3, [pc, #108]	; (8002d44 <GrandState_Verita+0x27c>)
 8002cd6:	789b      	ldrb	r3, [r3, #2]
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	d103      	bne.n	8002ce4 <GrandState_Verita+0x21c>
 8002cdc:	4b18      	ldr	r3, [pc, #96]	; (8002d40 <GrandState_Verita+0x278>)
 8002cde:	220b      	movs	r2, #11
 8002ce0:	701a      	strb	r2, [r3, #0]
 8002ce2:	e016      	b.n	8002d12 <GrandState_Verita+0x24a>
			else if (stboxp.ch_is == 3){GrandState = pre_hw_chk;}
 8002ce4:	4b17      	ldr	r3, [pc, #92]	; (8002d44 <GrandState_Verita+0x27c>)
 8002ce6:	789b      	ldrb	r3, [r3, #2]
 8002ce8:	2b03      	cmp	r3, #3
 8002cea:	d103      	bne.n	8002cf4 <GrandState_Verita+0x22c>
 8002cec:	4b14      	ldr	r3, [pc, #80]	; (8002d40 <GrandState_Verita+0x278>)
 8002cee:	2203      	movs	r2, #3
 8002cf0:	701a      	strb	r2, [r3, #0]
 8002cf2:	e00e      	b.n	8002d12 <GrandState_Verita+0x24a>
			else if (stboxp.ch_is == 4){GrandState = pre_fw_lob;}
 8002cf4:	4b13      	ldr	r3, [pc, #76]	; (8002d44 <GrandState_Verita+0x27c>)
 8002cf6:	789b      	ldrb	r3, [r3, #2]
 8002cf8:	2b04      	cmp	r3, #4
 8002cfa:	d103      	bne.n	8002d04 <GrandState_Verita+0x23c>
 8002cfc:	4b10      	ldr	r3, [pc, #64]	; (8002d40 <GrandState_Verita+0x278>)
 8002cfe:	2205      	movs	r2, #5
 8002d00:	701a      	strb	r2, [r3, #0]
 8002d02:	e006      	b.n	8002d12 <GrandState_Verita+0x24a>
			else if (stboxp.ch_is == 5){GrandState = pre_about;}
 8002d04:	4b0f      	ldr	r3, [pc, #60]	; (8002d44 <GrandState_Verita+0x27c>)
 8002d06:	789b      	ldrb	r3, [r3, #2]
 8002d08:	2b05      	cmp	r3, #5
 8002d0a:	d102      	bne.n	8002d12 <GrandState_Verita+0x24a>
 8002d0c:	4b0c      	ldr	r3, [pc, #48]	; (8002d40 <GrandState_Verita+0x278>)
 8002d0e:	2211      	movs	r2, #17
 8002d10:	701a      	strb	r2, [r3, #0]

		k_flag.cnt = 0;
 8002d12:	4b1a      	ldr	r3, [pc, #104]	; (8002d7c <GrandState_Verita+0x2b4>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	709a      	strb	r2, [r3, #2]
		}

		break; // lobby
 8002d18:	f002 b8b8 	b.w	8004e8c <GrandState_Verita+0x23c4>

	case init:
		stboxp.choice_set = bpoxy_def;
 8002d1c:	4b09      	ldr	r3, [pc, #36]	; (8002d44 <GrandState_Verita+0x27c>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	705a      	strb	r2, [r3, #1]

		BL_UART_Start(&huart1);
 8002d22:	4818      	ldr	r0, [pc, #96]	; (8002d84 <GrandState_Verita+0x2bc>)
 8002d24:	f7fe fcc0 	bl	80016a8 <BL_UART_Start>
		BL_UART_ExtendEraseMem_SP(&huart1, Erase_MASS_CMD);
 8002d28:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002d2c:	4815      	ldr	r0, [pc, #84]	; (8002d84 <GrandState_Verita+0x2bc>)
 8002d2e:	f7fe fe35 	bl	800199c <BL_UART_ExtendEraseMem_SP>
		BL_UART_Finish();
 8002d32:	f7fe fce9 	bl	8001708 <BL_UART_Finish>

		GrandState = lobby;
 8002d36:	4b02      	ldr	r3, [pc, #8]	; (8002d40 <GrandState_Verita+0x278>)
 8002d38:	2202      	movs	r2, #2
 8002d3a:	701a      	strb	r2, [r3, #0]
		break;
 8002d3c:	f002 b8b9 	b.w	8004eb2 <GrandState_Verita+0x23ea>
 8002d40:	20000006 	.word	0x20000006
 8002d44:	200008a8 	.word	0x200008a8
 8002d48:	0800feb0 	.word	0x0800feb0
 8002d4c:	200006b8 	.word	0x200006b8
 8002d50:	20000238 	.word	0x20000238
 8002d54:	0800fec8 	.word	0x0800fec8
 8002d58:	20000230 	.word	0x20000230
 8002d5c:	0800fed8 	.word	0x0800fed8
 8002d60:	0800fee4 	.word	0x0800fee4
 8002d64:	0800fef4 	.word	0x0800fef4
 8002d68:	0800ff04 	.word	0x0800ff04
 8002d6c:	0800ff14 	.word	0x0800ff14
 8002d70:	40000400 	.word	0x40000400
 8002d74:	0800fe70 	.word	0x0800fe70
 8002d78:	20000228 	.word	0x20000228
 8002d7c:	20000890 	.word	0x20000890
 8002d80:	20000894 	.word	0x20000894
 8002d84:	2000058c 	.word	0x2000058c

	case pre_fw_lob:
		stboxp.choice_set = bpoxy_lobfw;
 8002d88:	4b9d      	ldr	r3, [pc, #628]	; (8003000 <GrandState_Verita+0x538>)
 8002d8a:	2202      	movs	r2, #2
 8002d8c:	705a      	strb	r2, [r3, #1]
		ili9341_FillRect(0, 30, 320, 210, cl_BLACK);
 8002d8e:	2300      	movs	r3, #0
 8002d90:	9300      	str	r3, [sp, #0]
 8002d92:	23d2      	movs	r3, #210	; 0xd2
 8002d94:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002d98:	211e      	movs	r1, #30
 8002d9a:	2000      	movs	r0, #0
 8002d9c:	f002 ff9c 	bl	8005cd8 <ili9341_FillRect>
		ili9341_FillRect(0, 0, 320, 30, cl_PURPLE);
 8002da0:	f647 030f 	movw	r3, #30735	; 0x780f
 8002da4:	9300      	str	r3, [sp, #0]
 8002da6:	231e      	movs	r3, #30
 8002da8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002dac:	2100      	movs	r1, #0
 8002dae:	2000      	movs	r0, #0
 8002db0:	f002 ff92 	bl	8005cd8 <ili9341_FillRect>

		//// -------- client closed make sure --------
		HAL_GPIO_WritePin(RelayClient_GPIO_Port, RelayClient_Pin, GPIO_PIN_RESET);
 8002db4:	2200      	movs	r2, #0
 8002db6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002dba:	4892      	ldr	r0, [pc, #584]	; (8003004 <GrandState_Verita+0x53c>)
 8002dbc:	f004 fcfc 	bl	80077b8 <HAL_GPIO_WritePin>

		sprintf(TextDispBuffer,"Firmware Mode");
 8002dc0:	4991      	ldr	r1, [pc, #580]	; (8003008 <GrandState_Verita+0x540>)
 8002dc2:	4892      	ldr	r0, [pc, #584]	; (800300c <GrandState_Verita+0x544>)
 8002dc4:	f00a fd1a 	bl	800d7fc <siprintf>
		ili9341_WriteStringNoBG(60, 5, TextDispBuffer, Font20, cl_WHITE);
 8002dc8:	4b91      	ldr	r3, [pc, #580]	; (8003010 <GrandState_Verita+0x548>)
 8002dca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002dce:	9201      	str	r2, [sp, #4]
 8002dd0:	685a      	ldr	r2, [r3, #4]
 8002dd2:	9200      	str	r2, [sp, #0]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a8d      	ldr	r2, [pc, #564]	; (800300c <GrandState_Verita+0x544>)
 8002dd8:	2105      	movs	r1, #5
 8002dda:	203c      	movs	r0, #60	; 0x3c
 8002ddc:	f003 f972 	bl	80060c4 <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"Firmware Upload");
 8002de0:	498c      	ldr	r1, [pc, #560]	; (8003014 <GrandState_Verita+0x54c>)
 8002de2:	488a      	ldr	r0, [pc, #552]	; (800300c <GrandState_Verita+0x544>)
 8002de4:	f00a fd0a 	bl	800d7fc <siprintf>
		ili9341_WriteStringNoBG(50, 60, TextDispBuffer, Font16, cl_CYAN);
 8002de8:	4b8b      	ldr	r3, [pc, #556]	; (8003018 <GrandState_Verita+0x550>)
 8002dea:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002dee:	9201      	str	r2, [sp, #4]
 8002df0:	685a      	ldr	r2, [r3, #4]
 8002df2:	9200      	str	r2, [sp, #0]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a85      	ldr	r2, [pc, #532]	; (800300c <GrandState_Verita+0x544>)
 8002df8:	213c      	movs	r1, #60	; 0x3c
 8002dfa:	2032      	movs	r0, #50	; 0x32
 8002dfc:	f003 f962 	bl	80060c4 <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"FW ver: %08X", client_bin_Ver);
 8002e00:	4a86      	ldr	r2, [pc, #536]	; (800301c <GrandState_Verita+0x554>)
 8002e02:	4987      	ldr	r1, [pc, #540]	; (8003020 <GrandState_Verita+0x558>)
 8002e04:	4881      	ldr	r0, [pc, #516]	; (800300c <GrandState_Verita+0x544>)
 8002e06:	f00a fcf9 	bl	800d7fc <siprintf>
		ili9341_WriteStringNoBG(65, 80, TextDispBuffer, Font12, cl_WHITE);
 8002e0a:	4b86      	ldr	r3, [pc, #536]	; (8003024 <GrandState_Verita+0x55c>)
 8002e0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e10:	9201      	str	r2, [sp, #4]
 8002e12:	685a      	ldr	r2, [r3, #4]
 8002e14:	9200      	str	r2, [sp, #0]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a7c      	ldr	r2, [pc, #496]	; (800300c <GrandState_Verita+0x544>)
 8002e1a:	2150      	movs	r1, #80	; 0x50
 8002e1c:	2041      	movs	r0, #65	; 0x41
 8002e1e:	f003 f951 	bl	80060c4 <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"Erase Flash");
 8002e22:	4981      	ldr	r1, [pc, #516]	; (8003028 <GrandState_Verita+0x560>)
 8002e24:	4879      	ldr	r0, [pc, #484]	; (800300c <GrandState_Verita+0x544>)
 8002e26:	f00a fce9 	bl	800d7fc <siprintf>
		ili9341_WriteStringNoBG(50, 100, TextDispBuffer, Font16, cl_CYAN);
 8002e2a:	4b7b      	ldr	r3, [pc, #492]	; (8003018 <GrandState_Verita+0x550>)
 8002e2c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002e30:	9201      	str	r2, [sp, #4]
 8002e32:	685a      	ldr	r2, [r3, #4]
 8002e34:	9200      	str	r2, [sp, #0]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a74      	ldr	r2, [pc, #464]	; (800300c <GrandState_Verita+0x544>)
 8002e3a:	2164      	movs	r1, #100	; 0x64
 8002e3c:	2032      	movs	r0, #50	; 0x32
 8002e3e:	f003 f941 	bl	80060c4 <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"<-Back");
 8002e42:	497a      	ldr	r1, [pc, #488]	; (800302c <GrandState_Verita+0x564>)
 8002e44:	4871      	ldr	r0, [pc, #452]	; (800300c <GrandState_Verita+0x544>)
 8002e46:	f00a fcd9 	bl	800d7fc <siprintf>
		ili9341_WriteStringNoBG(30, 220, TextDispBuffer, Font16, cl_WHITE);
 8002e4a:	4b73      	ldr	r3, [pc, #460]	; (8003018 <GrandState_Verita+0x550>)
 8002e4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e50:	9201      	str	r2, [sp, #4]
 8002e52:	685a      	ldr	r2, [r3, #4]
 8002e54:	9200      	str	r2, [sp, #0]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a6c      	ldr	r2, [pc, #432]	; (800300c <GrandState_Verita+0x544>)
 8002e5a:	21dc      	movs	r1, #220	; 0xdc
 8002e5c:	201e      	movs	r0, #30
 8002e5e:	f003 f931 	bl	80060c4 <ili9341_WriteStringNoBG>


		k_flag.cnt = 0;
 8002e62:	4b73      	ldr	r3, [pc, #460]	; (8003030 <GrandState_Verita+0x568>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	709a      	strb	r2, [r3, #2]
		GrandState = fw_lob;
 8002e68:	4b72      	ldr	r3, [pc, #456]	; (8003034 <GrandState_Verita+0x56c>)
 8002e6a:	2206      	movs	r2, #6
 8002e6c:	701a      	strb	r2, [r3, #0]
		break;
 8002e6e:	f002 b820 	b.w	8004eb2 <GrandState_Verita+0x23ea>

	case fw_lob:

		if(k_flag.cnt){
 8002e72:	4b6f      	ldr	r3, [pc, #444]	; (8003030 <GrandState_Verita+0x568>)
 8002e74:	789b      	ldrb	r3, [r3, #2]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	f002 800a 	beq.w	8004e90 <GrandState_Verita+0x23c8>

			if(stboxp.ch_is == 1){GrandState = pre_bootloader;}
 8002e7c:	4b60      	ldr	r3, [pc, #384]	; (8003000 <GrandState_Verita+0x538>)
 8002e7e:	789b      	ldrb	r3, [r3, #2]
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d102      	bne.n	8002e8a <GrandState_Verita+0x3c2>
 8002e84:	4b6b      	ldr	r3, [pc, #428]	; (8003034 <GrandState_Verita+0x56c>)
 8002e86:	2208      	movs	r2, #8
 8002e88:	701a      	strb	r2, [r3, #0]
			if(stboxp.ch_is == 2){GrandState = pre_fw_erase;}
 8002e8a:	4b5d      	ldr	r3, [pc, #372]	; (8003000 <GrandState_Verita+0x538>)
 8002e8c:	789b      	ldrb	r3, [r3, #2]
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d102      	bne.n	8002e98 <GrandState_Verita+0x3d0>
 8002e92:	4b68      	ldr	r3, [pc, #416]	; (8003034 <GrandState_Verita+0x56c>)
 8002e94:	2207      	movs	r2, #7
 8002e96:	701a      	strb	r2, [r3, #0]
			if(stboxp.ch_is == 3){GrandState = pre_lobby;}
 8002e98:	4b59      	ldr	r3, [pc, #356]	; (8003000 <GrandState_Verita+0x538>)
 8002e9a:	789b      	ldrb	r3, [r3, #2]
 8002e9c:	2b03      	cmp	r3, #3
 8002e9e:	d102      	bne.n	8002ea6 <GrandState_Verita+0x3de>
 8002ea0:	4b64      	ldr	r3, [pc, #400]	; (8003034 <GrandState_Verita+0x56c>)
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	701a      	strb	r2, [r3, #0]

		k_flag.cnt = 0;
 8002ea6:	4b62      	ldr	r3, [pc, #392]	; (8003030 <GrandState_Verita+0x568>)
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	709a      	strb	r2, [r3, #2]
		}

		break;
 8002eac:	f001 bff0 	b.w	8004e90 <GrandState_Verita+0x23c8>

	case pre_fw_erase:
			stboxp.choice_set = bpoxy_no;
 8002eb0:	4b53      	ldr	r3, [pc, #332]	; (8003000 <GrandState_Verita+0x538>)
 8002eb2:	2203      	movs	r2, #3
 8002eb4:	705a      	strb	r2, [r3, #1]
			ili9341_FillRect(0, 30, 320, 210, cl_BLACK);
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	9300      	str	r3, [sp, #0]
 8002eba:	23d2      	movs	r3, #210	; 0xd2
 8002ebc:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002ec0:	211e      	movs	r1, #30
 8002ec2:	2000      	movs	r0, #0
 8002ec4:	f002 ff08 	bl	8005cd8 <ili9341_FillRect>
			ili9341_FillRect(0, 0, 320, 30, cl_PURPLE);
 8002ec8:	f647 030f 	movw	r3, #30735	; 0x780f
 8002ecc:	9300      	str	r3, [sp, #0]
 8002ece:	231e      	movs	r3, #30
 8002ed0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002ed4:	2100      	movs	r1, #0
 8002ed6:	2000      	movs	r0, #0
 8002ed8:	f002 fefe 	bl	8005cd8 <ili9341_FillRect>

			sprintf(TextDispBuffer,"Firmware Mode");
 8002edc:	494a      	ldr	r1, [pc, #296]	; (8003008 <GrandState_Verita+0x540>)
 8002ede:	484b      	ldr	r0, [pc, #300]	; (800300c <GrandState_Verita+0x544>)
 8002ee0:	f00a fc8c 	bl	800d7fc <siprintf>
			ili9341_WriteStringNoBG(60, 5, TextDispBuffer, Font20, cl_WHITE);
 8002ee4:	4b4a      	ldr	r3, [pc, #296]	; (8003010 <GrandState_Verita+0x548>)
 8002ee6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002eea:	9201      	str	r2, [sp, #4]
 8002eec:	685a      	ldr	r2, [r3, #4]
 8002eee:	9200      	str	r2, [sp, #0]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a46      	ldr	r2, [pc, #280]	; (800300c <GrandState_Verita+0x544>)
 8002ef4:	2105      	movs	r1, #5
 8002ef6:	203c      	movs	r0, #60	; 0x3c
 8002ef8:	f003 f8e4 	bl	80060c4 <ili9341_WriteStringNoBG>

			if(gScr.fullflag == ff_runfull){
 8002efc:	4b4e      	ldr	r3, [pc, #312]	; (8003038 <GrandState_Verita+0x570>)
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	2b03      	cmp	r3, #3
 8002f02:	d112      	bne.n	8002f2a <GrandState_Verita+0x462>
				sprintf(TextDispBuffer,"FULL"); ili9341_WriteString(250, 5, TextDispBuffer, Font20, cl_RED, cl_YELLOW);
 8002f04:	494d      	ldr	r1, [pc, #308]	; (800303c <GrandState_Verita+0x574>)
 8002f06:	4841      	ldr	r0, [pc, #260]	; (800300c <GrandState_Verita+0x544>)
 8002f08:	f00a fc78 	bl	800d7fc <siprintf>
 8002f0c:	4b40      	ldr	r3, [pc, #256]	; (8003010 <GrandState_Verita+0x548>)
 8002f0e:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002f12:	9202      	str	r2, [sp, #8]
 8002f14:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002f18:	9201      	str	r2, [sp, #4]
 8002f1a:	685a      	ldr	r2, [r3, #4]
 8002f1c:	9200      	str	r2, [sp, #0]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a3a      	ldr	r2, [pc, #232]	; (800300c <GrandState_Verita+0x544>)
 8002f22:	2105      	movs	r1, #5
 8002f24:	20fa      	movs	r0, #250	; 0xfa
 8002f26:	f003 f880 	bl	800602a <ili9341_WriteString>
			}

			sprintf(TextDispBuffer,"<-Back");
 8002f2a:	4940      	ldr	r1, [pc, #256]	; (800302c <GrandState_Verita+0x564>)
 8002f2c:	4837      	ldr	r0, [pc, #220]	; (800300c <GrandState_Verita+0x544>)
 8002f2e:	f00a fc65 	bl	800d7fc <siprintf>
			ili9341_WriteStringNoBG(30, 220, TextDispBuffer, Font16, cl_WHITE);
 8002f32:	4b39      	ldr	r3, [pc, #228]	; (8003018 <GrandState_Verita+0x550>)
 8002f34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f38:	9201      	str	r2, [sp, #4]
 8002f3a:	685a      	ldr	r2, [r3, #4]
 8002f3c:	9200      	str	r2, [sp, #0]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a32      	ldr	r2, [pc, #200]	; (800300c <GrandState_Verita+0x544>)
 8002f42:	21dc      	movs	r1, #220	; 0xdc
 8002f44:	201e      	movs	r0, #30
 8002f46:	f003 f8bd 	bl	80060c4 <ili9341_WriteStringNoBG>

			sprintf(TextDispBuffer,"Erase Flash ...");
 8002f4a:	493d      	ldr	r1, [pc, #244]	; (8003040 <GrandState_Verita+0x578>)
 8002f4c:	482f      	ldr	r0, [pc, #188]	; (800300c <GrandState_Verita+0x544>)
 8002f4e:	f00a fc55 	bl	800d7fc <siprintf>
			ili9341_WriteStringNoBG(70, 50, TextDispBuffer, Font20, cl_CYAN);
 8002f52:	4b2f      	ldr	r3, [pc, #188]	; (8003010 <GrandState_Verita+0x548>)
 8002f54:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002f58:	9201      	str	r2, [sp, #4]
 8002f5a:	685a      	ldr	r2, [r3, #4]
 8002f5c:	9200      	str	r2, [sp, #0]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a2a      	ldr	r2, [pc, #168]	; (800300c <GrandState_Verita+0x544>)
 8002f62:	2132      	movs	r1, #50	; 0x32
 8002f64:	2046      	movs	r0, #70	; 0x46
 8002f66:	f003 f8ad 	bl	80060c4 <ili9341_WriteStringNoBG>

			//// -- Open Client ----
			if(HAL_GPIO_ReadPin(RelayClient_GPIO_Port, RelayClient_Pin) >= 1){
 8002f6a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002f6e:	4825      	ldr	r0, [pc, #148]	; (8003004 <GrandState_Verita+0x53c>)
 8002f70:	f004 fc0a 	bl	8007788 <HAL_GPIO_ReadPin>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d003      	beq.n	8002f82 <GrandState_Verita+0x4ba>
				HAL_Delay(20);
 8002f7a:	2014      	movs	r0, #20
 8002f7c:	f003 fd3a 	bl	80069f4 <HAL_Delay>
 8002f80:	e009      	b.n	8002f96 <GrandState_Verita+0x4ce>
			}else{
				HAL_GPIO_WritePin(RelayClient_GPIO_Port, RelayClient_Pin, GPIO_PIN_SET);
 8002f82:	2201      	movs	r2, #1
 8002f84:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002f88:	481e      	ldr	r0, [pc, #120]	; (8003004 <GrandState_Verita+0x53c>)
 8002f8a:	f004 fc15 	bl	80077b8 <HAL_GPIO_WritePin>
				HAL_Delay(2200);
 8002f8e:	f640 0098 	movw	r0, #2200	; 0x898
 8002f92:	f003 fd2f 	bl	80069f4 <HAL_Delay>
			}


			BL_UART_Start(&huart1);
 8002f96:	482b      	ldr	r0, [pc, #172]	; (8003044 <GrandState_Verita+0x57c>)
 8002f98:	f7fe fb86 	bl	80016a8 <BL_UART_Start>

			sprintf(TextDispBuffer,"...");
 8002f9c:	492a      	ldr	r1, [pc, #168]	; (8003048 <GrandState_Verita+0x580>)
 8002f9e:	481b      	ldr	r0, [pc, #108]	; (800300c <GrandState_Verita+0x544>)
 8002fa0:	f00a fc2c 	bl	800d7fc <siprintf>
			ili9341_WriteStringNoBG(260, 50, TextDispBuffer, Font20, cl_CYAN);
 8002fa4:	4b1a      	ldr	r3, [pc, #104]	; (8003010 <GrandState_Verita+0x548>)
 8002fa6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002faa:	9201      	str	r2, [sp, #4]
 8002fac:	685a      	ldr	r2, [r3, #4]
 8002fae:	9200      	str	r2, [sp, #0]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a16      	ldr	r2, [pc, #88]	; (800300c <GrandState_Verita+0x544>)
 8002fb4:	2132      	movs	r1, #50	; 0x32
 8002fb6:	f44f 7082 	mov.w	r0, #260	; 0x104
 8002fba:	f003 f883 	bl	80060c4 <ili9341_WriteStringNoBG>

			//// Flash Memory Erase ============,
			blrespo = BL_UART_ExtendEraseMem_SP(&huart1, Erase_MASS_CMD);
 8002fbe:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002fc2:	4820      	ldr	r0, [pc, #128]	; (8003044 <GrandState_Verita+0x57c>)
 8002fc4:	f7fe fcea 	bl	800199c <BL_UART_ExtendEraseMem_SP>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	461a      	mov	r2, r3
 8002fcc:	4b1f      	ldr	r3, [pc, #124]	; (800304c <GrandState_Verita+0x584>)
 8002fce:	701a      	strb	r2, [r3, #0]

			//// display
			if(blrespo == UB_ACK){
 8002fd0:	4b1e      	ldr	r3, [pc, #120]	; (800304c <GrandState_Verita+0x584>)
 8002fd2:	781b      	ldrb	r3, [r3, #0]
 8002fd4:	2b79      	cmp	r3, #121	; 0x79
 8002fd6:	d10f      	bne.n	8002ff8 <GrandState_Verita+0x530>
				sprintf(TextDispBuffer,"Mem erased");
 8002fd8:	491d      	ldr	r1, [pc, #116]	; (8003050 <GrandState_Verita+0x588>)
 8002fda:	480c      	ldr	r0, [pc, #48]	; (800300c <GrandState_Verita+0x544>)
 8002fdc:	f00a fc0e 	bl	800d7fc <siprintf>
				ili9341_WriteStringNoBG(70, 80, TextDispBuffer, Font20, cl_YELLOW);
 8002fe0:	4b0b      	ldr	r3, [pc, #44]	; (8003010 <GrandState_Verita+0x548>)
 8002fe2:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002fe6:	9201      	str	r2, [sp, #4]
 8002fe8:	685a      	ldr	r2, [r3, #4]
 8002fea:	9200      	str	r2, [sp, #0]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a07      	ldr	r2, [pc, #28]	; (800300c <GrandState_Verita+0x544>)
 8002ff0:	2150      	movs	r1, #80	; 0x50
 8002ff2:	2046      	movs	r0, #70	; 0x46
 8002ff4:	f003 f866 	bl	80060c4 <ili9341_WriteStringNoBG>
			}
			//// wait flash erasing for fullscript, about 5-6 sec
			//if(gScr.fullflag == ff_runfull){};
			for(int i = 0;i < 6; i++){
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	607b      	str	r3, [r7, #4]
 8002ffc:	e046      	b.n	800308c <GrandState_Verita+0x5c4>
 8002ffe:	bf00      	nop
 8003000:	200008a8 	.word	0x200008a8
 8003004:	40020800 	.word	0x40020800
 8003008:	0800ff24 	.word	0x0800ff24
 800300c:	200006b8 	.word	0x200006b8
 8003010:	20000238 	.word	0x20000238
 8003014:	0800ff34 	.word	0x0800ff34
 8003018:	20000230 	.word	0x20000230
 800301c:	07010523 	.word	0x07010523
 8003020:	0800ff44 	.word	0x0800ff44
 8003024:	20000228 	.word	0x20000228
 8003028:	0800ff54 	.word	0x0800ff54
 800302c:	0800ff60 	.word	0x0800ff60
 8003030:	20000890 	.word	0x20000890
 8003034:	20000006 	.word	0x20000006
 8003038:	20000894 	.word	0x20000894
 800303c:	0800ff68 	.word	0x0800ff68
 8003040:	0800ff70 	.word	0x0800ff70
 8003044:	2000058c 	.word	0x2000058c
 8003048:	0800ff80 	.word	0x0800ff80
 800304c:	20000781 	.word	0x20000781
 8003050:	0800ff84 	.word	0x0800ff84
				ili9341_FillRect(155, 100, 10, 10, cl_WHITE);
 8003054:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003058:	9300      	str	r3, [sp, #0]
 800305a:	230a      	movs	r3, #10
 800305c:	220a      	movs	r2, #10
 800305e:	2164      	movs	r1, #100	; 0x64
 8003060:	209b      	movs	r0, #155	; 0x9b
 8003062:	f002 fe39 	bl	8005cd8 <ili9341_FillRect>
				HAL_Delay(500);
 8003066:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800306a:	f003 fcc3 	bl	80069f4 <HAL_Delay>
				ili9341_FillRect(155, 100, 10, 10, cl_BLACK);
 800306e:	2300      	movs	r3, #0
 8003070:	9300      	str	r3, [sp, #0]
 8003072:	230a      	movs	r3, #10
 8003074:	220a      	movs	r2, #10
 8003076:	2164      	movs	r1, #100	; 0x64
 8003078:	209b      	movs	r0, #155	; 0x9b
 800307a:	f002 fe2d 	bl	8005cd8 <ili9341_FillRect>
				HAL_Delay(500);
 800307e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003082:	f003 fcb7 	bl	80069f4 <HAL_Delay>
			for(int i = 0;i < 6; i++){
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	3301      	adds	r3, #1
 800308a:	607b      	str	r3, [r7, #4]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2b05      	cmp	r3, #5
 8003090:	dde0      	ble.n	8003054 <GrandState_Verita+0x58c>
			}


			BL_UART_Finish();
 8003092:	f7fe fb39 	bl	8001708 <BL_UART_Finish>

			//HAL_Delay(3500);
			sprintf(TextDispBuffer,"Erased Finish");
 8003096:	4996      	ldr	r1, [pc, #600]	; (80032f0 <GrandState_Verita+0x828>)
 8003098:	4896      	ldr	r0, [pc, #600]	; (80032f4 <GrandState_Verita+0x82c>)
 800309a:	f00a fbaf 	bl	800d7fc <siprintf>
			ili9341_WriteStringNoBG(70, 110, TextDispBuffer, Font20, cl_YELLOW);
 800309e:	4b96      	ldr	r3, [pc, #600]	; (80032f8 <GrandState_Verita+0x830>)
 80030a0:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80030a4:	9201      	str	r2, [sp, #4]
 80030a6:	685a      	ldr	r2, [r3, #4]
 80030a8:	9200      	str	r2, [sp, #0]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a91      	ldr	r2, [pc, #580]	; (80032f4 <GrandState_Verita+0x82c>)
 80030ae:	216e      	movs	r1, #110	; 0x6e
 80030b0:	2046      	movs	r0, #70	; 0x46
 80030b2:	f003 f807 	bl	80060c4 <ili9341_WriteStringNoBG>
			HAL_Delay(500);
 80030b6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80030ba:	f003 fc9b 	bl	80069f4 <HAL_Delay>

			//// -- Close Client ----
			//if(gScr.fullflag != ff_runfull){
			HAL_GPIO_WritePin(RelayClient_GPIO_Port, RelayClient_Pin, GPIO_PIN_RESET);
 80030be:	2200      	movs	r2, #0
 80030c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80030c4:	488d      	ldr	r0, [pc, #564]	; (80032fc <GrandState_Verita+0x834>)
 80030c6:	f004 fb77 	bl	80077b8 <HAL_GPIO_WritePin>
			//};


			k_flag.cnt = 0;
 80030ca:	4b8d      	ldr	r3, [pc, #564]	; (8003300 <GrandState_Verita+0x838>)
 80030cc:	2200      	movs	r2, #0
 80030ce:	709a      	strb	r2, [r3, #2]
			if(gScr.fullflag == ff_runfull){
 80030d0:	4b8c      	ldr	r3, [pc, #560]	; (8003304 <GrandState_Verita+0x83c>)
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	2b03      	cmp	r3, #3
 80030d6:	d104      	bne.n	80030e2 <GrandState_Verita+0x61a>
				 GrandState = pre_bootloader;
 80030d8:	4b8b      	ldr	r3, [pc, #556]	; (8003308 <GrandState_Verita+0x840>)
 80030da:	2208      	movs	r2, #8
 80030dc:	701a      	strb	r2, [r3, #0]
			}else{
				GrandState = pre_fw_lob;
			}

			break;
 80030de:	f001 bee8 	b.w	8004eb2 <GrandState_Verita+0x23ea>
				GrandState = pre_fw_lob;
 80030e2:	4b89      	ldr	r3, [pc, #548]	; (8003308 <GrandState_Verita+0x840>)
 80030e4:	2205      	movs	r2, #5
 80030e6:	701a      	strb	r2, [r3, #0]
			break;
 80030e8:	f001 bee3 	b.w	8004eb2 <GrandState_Verita+0x23ea>

	case pre_hw_chk:
		stboxp.choice_set = bpoxy_def;
 80030ec:	4b87      	ldr	r3, [pc, #540]	; (800330c <GrandState_Verita+0x844>)
 80030ee:	2200      	movs	r2, #0
 80030f0:	705a      	strb	r2, [r3, #1]
		ili9341_FillRect(0, 30, 320, 210, cl_BLACK);
 80030f2:	2300      	movs	r3, #0
 80030f4:	9300      	str	r3, [sp, #0]
 80030f6:	23d2      	movs	r3, #210	; 0xd2
 80030f8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80030fc:	211e      	movs	r1, #30
 80030fe:	2000      	movs	r0, #0
 8003100:	f002 fdea 	bl	8005cd8 <ili9341_FillRect>
		ili9341_FillRect(0, 0, 320, 30, cl_ORANGE);
 8003104:	f64f 13a0 	movw	r3, #63904	; 0xf9a0
 8003108:	9300      	str	r3, [sp, #0]
 800310a:	231e      	movs	r3, #30
 800310c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003110:	2100      	movs	r1, #0
 8003112:	2000      	movs	r0, #0
 8003114:	f002 fde0 	bl	8005cd8 <ili9341_FillRect>

		if(gScr.fullflag == ff_runfull){
 8003118:	4b7a      	ldr	r3, [pc, #488]	; (8003304 <GrandState_Verita+0x83c>)
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	2b03      	cmp	r3, #3
 800311e:	d112      	bne.n	8003146 <GrandState_Verita+0x67e>
			sprintf(TextDispBuffer,"FULL"); ili9341_WriteString(250, 5, TextDispBuffer, Font20, cl_RED, cl_YELLOW);
 8003120:	497b      	ldr	r1, [pc, #492]	; (8003310 <GrandState_Verita+0x848>)
 8003122:	4874      	ldr	r0, [pc, #464]	; (80032f4 <GrandState_Verita+0x82c>)
 8003124:	f00a fb6a 	bl	800d7fc <siprintf>
 8003128:	4b73      	ldr	r3, [pc, #460]	; (80032f8 <GrandState_Verita+0x830>)
 800312a:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800312e:	9202      	str	r2, [sp, #8]
 8003130:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8003134:	9201      	str	r2, [sp, #4]
 8003136:	685a      	ldr	r2, [r3, #4]
 8003138:	9200      	str	r2, [sp, #0]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a6d      	ldr	r2, [pc, #436]	; (80032f4 <GrandState_Verita+0x82c>)
 800313e:	2105      	movs	r1, #5
 8003140:	20fa      	movs	r0, #250	; 0xfa
 8003142:	f002 ff72 	bl	800602a <ili9341_WriteString>
		}


		//// Auto ON relay
		HAL_GPIO_WritePin(RelayClient_GPIO_Port, RelayClient_Pin, GPIO_PIN_SET);
 8003146:	2201      	movs	r2, #1
 8003148:	f44f 7100 	mov.w	r1, #512	; 0x200
 800314c:	486b      	ldr	r0, [pc, #428]	; (80032fc <GrandState_Verita+0x834>)
 800314e:	f004 fb33 	bl	80077b8 <HAL_GPIO_WritePin>

		sprintf(TextDispBuffer,"Hardware_Chk");
 8003152:	4970      	ldr	r1, [pc, #448]	; (8003314 <GrandState_Verita+0x84c>)
 8003154:	4867      	ldr	r0, [pc, #412]	; (80032f4 <GrandState_Verita+0x82c>)
 8003156:	f00a fb51 	bl	800d7fc <siprintf>
		ili9341_WriteStringNoBG(80, 5, TextDispBuffer, Font20, cl_WHITE);
 800315a:	4b67      	ldr	r3, [pc, #412]	; (80032f8 <GrandState_Verita+0x830>)
 800315c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003160:	9201      	str	r2, [sp, #4]
 8003162:	685a      	ldr	r2, [r3, #4]
 8003164:	9200      	str	r2, [sp, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a62      	ldr	r2, [pc, #392]	; (80032f4 <GrandState_Verita+0x82c>)
 800316a:	2105      	movs	r1, #5
 800316c:	2050      	movs	r0, #80	; 0x50
 800316e:	f002 ffa9 	bl	80060c4 <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"5V:");
 8003172:	4969      	ldr	r1, [pc, #420]	; (8003318 <GrandState_Verita+0x850>)
 8003174:	485f      	ldr	r0, [pc, #380]	; (80032f4 <GrandState_Verita+0x82c>)
 8003176:	f00a fb41 	bl	800d7fc <siprintf>
		ili9341_WriteStringNoBG(15, 50, TextDispBuffer, Font16, cl_WHITE);
 800317a:	4b68      	ldr	r3, [pc, #416]	; (800331c <GrandState_Verita+0x854>)
 800317c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003180:	9201      	str	r2, [sp, #4]
 8003182:	685a      	ldr	r2, [r3, #4]
 8003184:	9200      	str	r2, [sp, #0]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a5a      	ldr	r2, [pc, #360]	; (80032f4 <GrandState_Verita+0x82c>)
 800318a:	2132      	movs	r1, #50	; 0x32
 800318c:	200f      	movs	r0, #15
 800318e:	f002 ff99 	bl	80060c4 <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"3V3:");
 8003192:	4963      	ldr	r1, [pc, #396]	; (8003320 <GrandState_Verita+0x858>)
 8003194:	4857      	ldr	r0, [pc, #348]	; (80032f4 <GrandState_Verita+0x82c>)
 8003196:	f00a fb31 	bl	800d7fc <siprintf>
		ili9341_WriteStringNoBG(15, 75, TextDispBuffer, Font16, cl_WHITE);
 800319a:	4b60      	ldr	r3, [pc, #384]	; (800331c <GrandState_Verita+0x854>)
 800319c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80031a0:	9201      	str	r2, [sp, #4]
 80031a2:	685a      	ldr	r2, [r3, #4]
 80031a4:	9200      	str	r2, [sp, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a52      	ldr	r2, [pc, #328]	; (80032f4 <GrandState_Verita+0x82c>)
 80031aa:	214b      	movs	r1, #75	; 0x4b
 80031ac:	200f      	movs	r0, #15
 80031ae:	f002 ff89 	bl	80060c4 <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"3V3:");
 80031b2:	495b      	ldr	r1, [pc, #364]	; (8003320 <GrandState_Verita+0x858>)
 80031b4:	484f      	ldr	r0, [pc, #316]	; (80032f4 <GrandState_Verita+0x82c>)
 80031b6:	f00a fb21 	bl	800d7fc <siprintf>
		ili9341_WriteStringNoBG(15, 95, TextDispBuffer, Font16, cl_WHITE);
 80031ba:	4b58      	ldr	r3, [pc, #352]	; (800331c <GrandState_Verita+0x854>)
 80031bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80031c0:	9201      	str	r2, [sp, #4]
 80031c2:	685a      	ldr	r2, [r3, #4]
 80031c4:	9200      	str	r2, [sp, #0]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a4a      	ldr	r2, [pc, #296]	; (80032f4 <GrandState_Verita+0x82c>)
 80031ca:	215f      	movs	r1, #95	; 0x5f
 80031cc:	200f      	movs	r0, #15
 80031ce:	f002 ff79 	bl	80060c4 <ili9341_WriteStringNoBG>
		sprintf(TextDispBuffer,"STLink");
 80031d2:	4954      	ldr	r1, [pc, #336]	; (8003324 <GrandState_Verita+0x85c>)
 80031d4:	4847      	ldr	r0, [pc, #284]	; (80032f4 <GrandState_Verita+0x82c>)
 80031d6:	f00a fb11 	bl	800d7fc <siprintf>
		ili9341_WriteStringNoBG(15, 106, TextDispBuffer, Font12, cl_WHITE);
 80031da:	4b53      	ldr	r3, [pc, #332]	; (8003328 <GrandState_Verita+0x860>)
 80031dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80031e0:	9201      	str	r2, [sp, #4]
 80031e2:	685a      	ldr	r2, [r3, #4]
 80031e4:	9200      	str	r2, [sp, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a42      	ldr	r2, [pc, #264]	; (80032f4 <GrandState_Verita+0x82c>)
 80031ea:	216a      	movs	r1, #106	; 0x6a
 80031ec:	200f      	movs	r0, #15
 80031ee:	f002 ff69 	bl	80060c4 <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"I Brd:");
 80031f2:	494e      	ldr	r1, [pc, #312]	; (800332c <GrandState_Verita+0x864>)
 80031f4:	483f      	ldr	r0, [pc, #252]	; (80032f4 <GrandState_Verita+0x82c>)
 80031f6:	f00a fb01 	bl	800d7fc <siprintf>
		ili9341_WriteStringNoBG(15, 125, TextDispBuffer, Font16, cl_WHITE);
 80031fa:	4b48      	ldr	r3, [pc, #288]	; (800331c <GrandState_Verita+0x854>)
 80031fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003200:	9201      	str	r2, [sp, #4]
 8003202:	685a      	ldr	r2, [r3, #4]
 8003204:	9200      	str	r2, [sp, #0]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a3a      	ldr	r2, [pc, #232]	; (80032f4 <GrandState_Verita+0x82c>)
 800320a:	217d      	movs	r1, #125	; 0x7d
 800320c:	200f      	movs	r0, #15
 800320e:	f002 ff59 	bl	80060c4 <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"I MCU:");
 8003212:	4947      	ldr	r1, [pc, #284]	; (8003330 <GrandState_Verita+0x868>)
 8003214:	4837      	ldr	r0, [pc, #220]	; (80032f4 <GrandState_Verita+0x82c>)
 8003216:	f00a faf1 	bl	800d7fc <siprintf>
		ili9341_WriteStringNoBG(15, 150, TextDispBuffer, Font16, cl_WHITE);
 800321a:	4b40      	ldr	r3, [pc, #256]	; (800331c <GrandState_Verita+0x854>)
 800321c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003220:	9201      	str	r2, [sp, #4]
 8003222:	685a      	ldr	r2, [r3, #4]
 8003224:	9200      	str	r2, [sp, #0]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a32      	ldr	r2, [pc, #200]	; (80032f4 <GrandState_Verita+0x82c>)
 800322a:	2196      	movs	r1, #150	; 0x96
 800322c:	200f      	movs	r0, #15
 800322e:	f002 ff49 	bl	80060c4 <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"mV"); ili9341_WriteStringNoBG(165, 54, TextDispBuffer, Font12, cl_WHITE);
 8003232:	4940      	ldr	r1, [pc, #256]	; (8003334 <GrandState_Verita+0x86c>)
 8003234:	482f      	ldr	r0, [pc, #188]	; (80032f4 <GrandState_Verita+0x82c>)
 8003236:	f00a fae1 	bl	800d7fc <siprintf>
 800323a:	4b3b      	ldr	r3, [pc, #236]	; (8003328 <GrandState_Verita+0x860>)
 800323c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003240:	9201      	str	r2, [sp, #4]
 8003242:	685a      	ldr	r2, [r3, #4]
 8003244:	9200      	str	r2, [sp, #0]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a2a      	ldr	r2, [pc, #168]	; (80032f4 <GrandState_Verita+0x82c>)
 800324a:	2136      	movs	r1, #54	; 0x36
 800324c:	20a5      	movs	r0, #165	; 0xa5
 800324e:	f002 ff39 	bl	80060c4 <ili9341_WriteStringNoBG>
		sprintf(TextDispBuffer,"mV"); ili9341_WriteStringNoBG(165, 79, TextDispBuffer, Font12, cl_WHITE);
 8003252:	4938      	ldr	r1, [pc, #224]	; (8003334 <GrandState_Verita+0x86c>)
 8003254:	4827      	ldr	r0, [pc, #156]	; (80032f4 <GrandState_Verita+0x82c>)
 8003256:	f00a fad1 	bl	800d7fc <siprintf>
 800325a:	4b33      	ldr	r3, [pc, #204]	; (8003328 <GrandState_Verita+0x860>)
 800325c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003260:	9201      	str	r2, [sp, #4]
 8003262:	685a      	ldr	r2, [r3, #4]
 8003264:	9200      	str	r2, [sp, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a22      	ldr	r2, [pc, #136]	; (80032f4 <GrandState_Verita+0x82c>)
 800326a:	214f      	movs	r1, #79	; 0x4f
 800326c:	20a5      	movs	r0, #165	; 0xa5
 800326e:	f002 ff29 	bl	80060c4 <ili9341_WriteStringNoBG>
		sprintf(TextDispBuffer,"mV"); ili9341_WriteStringNoBG(165, 104, TextDispBuffer, Font12, cl_WHITE);
 8003272:	4930      	ldr	r1, [pc, #192]	; (8003334 <GrandState_Verita+0x86c>)
 8003274:	481f      	ldr	r0, [pc, #124]	; (80032f4 <GrandState_Verita+0x82c>)
 8003276:	f00a fac1 	bl	800d7fc <siprintf>
 800327a:	4b2b      	ldr	r3, [pc, #172]	; (8003328 <GrandState_Verita+0x860>)
 800327c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003280:	9201      	str	r2, [sp, #4]
 8003282:	685a      	ldr	r2, [r3, #4]
 8003284:	9200      	str	r2, [sp, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a1a      	ldr	r2, [pc, #104]	; (80032f4 <GrandState_Verita+0x82c>)
 800328a:	2168      	movs	r1, #104	; 0x68
 800328c:	20a5      	movs	r0, #165	; 0xa5
 800328e:	f002 ff19 	bl	80060c4 <ili9341_WriteStringNoBG>
		sprintf(TextDispBuffer,"mA"); ili9341_WriteStringNoBG(165, 129, TextDispBuffer, Font12, cl_WHITE);
 8003292:	4929      	ldr	r1, [pc, #164]	; (8003338 <GrandState_Verita+0x870>)
 8003294:	4817      	ldr	r0, [pc, #92]	; (80032f4 <GrandState_Verita+0x82c>)
 8003296:	f00a fab1 	bl	800d7fc <siprintf>
 800329a:	4b23      	ldr	r3, [pc, #140]	; (8003328 <GrandState_Verita+0x860>)
 800329c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80032a0:	9201      	str	r2, [sp, #4]
 80032a2:	685a      	ldr	r2, [r3, #4]
 80032a4:	9200      	str	r2, [sp, #0]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a12      	ldr	r2, [pc, #72]	; (80032f4 <GrandState_Verita+0x82c>)
 80032aa:	2181      	movs	r1, #129	; 0x81
 80032ac:	20a5      	movs	r0, #165	; 0xa5
 80032ae:	f002 ff09 	bl	80060c4 <ili9341_WriteStringNoBG>
		sprintf(TextDispBuffer,"mA"); ili9341_WriteStringNoBG(165, 154, TextDispBuffer, Font12, cl_WHITE);
 80032b2:	4921      	ldr	r1, [pc, #132]	; (8003338 <GrandState_Verita+0x870>)
 80032b4:	480f      	ldr	r0, [pc, #60]	; (80032f4 <GrandState_Verita+0x82c>)
 80032b6:	f00a faa1 	bl	800d7fc <siprintf>
 80032ba:	4b1b      	ldr	r3, [pc, #108]	; (8003328 <GrandState_Verita+0x860>)
 80032bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80032c0:	9201      	str	r2, [sp, #4]
 80032c2:	685a      	ldr	r2, [r3, #4]
 80032c4:	9200      	str	r2, [sp, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a0a      	ldr	r2, [pc, #40]	; (80032f4 <GrandState_Verita+0x82c>)
 80032ca:	219a      	movs	r1, #154	; 0x9a
 80032cc:	20a5      	movs	r0, #165	; 0xa5
 80032ce:	f002 fef9 	bl	80060c4 <ili9341_WriteStringNoBG>


		gScr.timelog = HAL_GetTick() + 3500;
 80032d2:	f003 fb83 	bl	80069dc <HAL_GetTick>
 80032d6:	4603      	mov	r3, r0
 80032d8:	f603 53ac 	addw	r3, r3, #3500	; 0xdac
 80032dc:	4a09      	ldr	r2, [pc, #36]	; (8003304 <GrandState_Verita+0x83c>)
 80032de:	6053      	str	r3, [r2, #4]

		k_flag.cnt = 0; //// prevent over state jump
 80032e0:	4b07      	ldr	r3, [pc, #28]	; (8003300 <GrandState_Verita+0x838>)
 80032e2:	2200      	movs	r2, #0
 80032e4:	709a      	strb	r2, [r3, #2]
		GrandState = hw_chk;
 80032e6:	4b08      	ldr	r3, [pc, #32]	; (8003308 <GrandState_Verita+0x840>)
 80032e8:	2204      	movs	r2, #4
 80032ea:	701a      	strb	r2, [r3, #0]
		break; //pre_hw_chk
 80032ec:	f001 bde1 	b.w	8004eb2 <GrandState_Verita+0x23ea>
 80032f0:	0800ff90 	.word	0x0800ff90
 80032f4:	200006b8 	.word	0x200006b8
 80032f8:	20000238 	.word	0x20000238
 80032fc:	40020800 	.word	0x40020800
 8003300:	20000890 	.word	0x20000890
 8003304:	20000894 	.word	0x20000894
 8003308:	20000006 	.word	0x20000006
 800330c:	200008a8 	.word	0x200008a8
 8003310:	0800ff68 	.word	0x0800ff68
 8003314:	0800ffa0 	.word	0x0800ffa0
 8003318:	0800ffb0 	.word	0x0800ffb0
 800331c:	20000230 	.word	0x20000230
 8003320:	0800ffb4 	.word	0x0800ffb4
 8003324:	0800ffbc 	.word	0x0800ffbc
 8003328:	20000228 	.word	0x20000228
 800332c:	0800ffc4 	.word	0x0800ffc4
 8003330:	0800ffcc 	.word	0x0800ffcc
 8003334:	0800ffd4 	.word	0x0800ffd4
 8003338:	0800ffd8 	.word	0x0800ffd8

	case hw_chk:
		stboxp.choice_set = bpoxy_def;
 800333c:	4baa      	ldr	r3, [pc, #680]	; (80035e8 <GrandState_Verita+0xb20>)
 800333e:	2200      	movs	r2, #0
 8003340:	705a      	strb	r2, [r3, #1]

		//// 5V
		sprintf(TextDispBuffer,"%4d", (uint16_t)(mcp_read.cv[1]*1000)); // inatb.inatb.Bus_V
 8003342:	4baa      	ldr	r3, [pc, #680]	; (80035ec <GrandState_Verita+0xb24>)
 8003344:	edd3 7a05 	vldr	s15, [r3, #20]
 8003348:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 80035f0 <GrandState_Verita+0xb28>
 800334c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003350:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003354:	ee17 3a90 	vmov	r3, s15
 8003358:	b29b      	uxth	r3, r3
 800335a:	461a      	mov	r2, r3
 800335c:	49a5      	ldr	r1, [pc, #660]	; (80035f4 <GrandState_Verita+0xb2c>)
 800335e:	48a6      	ldr	r0, [pc, #664]	; (80035f8 <GrandState_Verita+0xb30>)
 8003360:	f00a fa4c 	bl	800d7fc <siprintf>
		if(mcp_read.cv[1] <= 4.500){
 8003364:	4ba1      	ldr	r3, [pc, #644]	; (80035ec <GrandState_Verita+0xb24>)
 8003366:	edd3 7a05 	vldr	s15, [r3, #20]
 800336a:	eeb1 7a02 	vmov.f32	s14, #18	; 0x40900000  4.5
 800336e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003376:	d823      	bhi.n	80033c0 <GrandState_Verita+0x8f8>
			ili9341_WriteString(100, 50, TextDispBuffer, Font20, cl_RED, cl_BLACK);
 8003378:	4ba0      	ldr	r3, [pc, #640]	; (80035fc <GrandState_Verita+0xb34>)
 800337a:	2200      	movs	r2, #0
 800337c:	9202      	str	r2, [sp, #8]
 800337e:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8003382:	9201      	str	r2, [sp, #4]
 8003384:	685a      	ldr	r2, [r3, #4]
 8003386:	9200      	str	r2, [sp, #0]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a9b      	ldr	r2, [pc, #620]	; (80035f8 <GrandState_Verita+0xb30>)
 800338c:	2132      	movs	r1, #50	; 0x32
 800338e:	2064      	movs	r0, #100	; 0x64
 8003390:	f002 fe4b 	bl	800602a <ili9341_WriteString>
			sprintf(TextDispBuffer,"FAIL"); ili9341_WriteString(220, 50, TextDispBuffer, Font20, cl_RED, cl_BLACK);
 8003394:	499a      	ldr	r1, [pc, #616]	; (8003600 <GrandState_Verita+0xb38>)
 8003396:	4898      	ldr	r0, [pc, #608]	; (80035f8 <GrandState_Verita+0xb30>)
 8003398:	f00a fa30 	bl	800d7fc <siprintf>
 800339c:	4b97      	ldr	r3, [pc, #604]	; (80035fc <GrandState_Verita+0xb34>)
 800339e:	2200      	movs	r2, #0
 80033a0:	9202      	str	r2, [sp, #8]
 80033a2:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80033a6:	9201      	str	r2, [sp, #4]
 80033a8:	685a      	ldr	r2, [r3, #4]
 80033aa:	9200      	str	r2, [sp, #0]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a92      	ldr	r2, [pc, #584]	; (80035f8 <GrandState_Verita+0xb30>)
 80033b0:	2132      	movs	r1, #50	; 0x32
 80033b2:	20dc      	movs	r0, #220	; 0xdc
 80033b4:	f002 fe39 	bl	800602a <ili9341_WriteString>
			hwscor.p5V = 0;
 80033b8:	4b92      	ldr	r3, [pc, #584]	; (8003604 <GrandState_Verita+0xb3c>)
 80033ba:	2200      	movs	r2, #0
 80033bc:	701a      	strb	r2, [r3, #0]
 80033be:	e022      	b.n	8003406 <GrandState_Verita+0x93e>
		}else{
			ili9341_WriteString(100, 50, TextDispBuffer, Font20, cl_WHITE, cl_BLACK);
 80033c0:	4b8e      	ldr	r3, [pc, #568]	; (80035fc <GrandState_Verita+0xb34>)
 80033c2:	2200      	movs	r2, #0
 80033c4:	9202      	str	r2, [sp, #8]
 80033c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80033ca:	9201      	str	r2, [sp, #4]
 80033cc:	685a      	ldr	r2, [r3, #4]
 80033ce:	9200      	str	r2, [sp, #0]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a89      	ldr	r2, [pc, #548]	; (80035f8 <GrandState_Verita+0xb30>)
 80033d4:	2132      	movs	r1, #50	; 0x32
 80033d6:	2064      	movs	r0, #100	; 0x64
 80033d8:	f002 fe27 	bl	800602a <ili9341_WriteString>
			sprintf(TextDispBuffer,"PASS"); ili9341_WriteString(220, 50, TextDispBuffer, Font20, cl_GREEN, cl_BLACK);
 80033dc:	498a      	ldr	r1, [pc, #552]	; (8003608 <GrandState_Verita+0xb40>)
 80033de:	4886      	ldr	r0, [pc, #536]	; (80035f8 <GrandState_Verita+0xb30>)
 80033e0:	f00a fa0c 	bl	800d7fc <siprintf>
 80033e4:	4b85      	ldr	r3, [pc, #532]	; (80035fc <GrandState_Verita+0xb34>)
 80033e6:	2200      	movs	r2, #0
 80033e8:	9202      	str	r2, [sp, #8]
 80033ea:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80033ee:	9201      	str	r2, [sp, #4]
 80033f0:	685a      	ldr	r2, [r3, #4]
 80033f2:	9200      	str	r2, [sp, #0]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a80      	ldr	r2, [pc, #512]	; (80035f8 <GrandState_Verita+0xb30>)
 80033f8:	2132      	movs	r1, #50	; 0x32
 80033fa:	20dc      	movs	r0, #220	; 0xdc
 80033fc:	f002 fe15 	bl	800602a <ili9341_WriteString>
			hwscor.p5V = 1;
 8003400:	4b80      	ldr	r3, [pc, #512]	; (8003604 <GrandState_Verita+0xb3c>)
 8003402:	2201      	movs	r2, #1
 8003404:	701a      	strb	r2, [r3, #0]
		}
		//// 3V3
		sprintf(TextDispBuffer,"%4d", inata.Bus_V);
 8003406:	4b81      	ldr	r3, [pc, #516]	; (800360c <GrandState_Verita+0xb44>)
 8003408:	8a1b      	ldrh	r3, [r3, #16]
 800340a:	461a      	mov	r2, r3
 800340c:	4979      	ldr	r1, [pc, #484]	; (80035f4 <GrandState_Verita+0xb2c>)
 800340e:	487a      	ldr	r0, [pc, #488]	; (80035f8 <GrandState_Verita+0xb30>)
 8003410:	f00a f9f4 	bl	800d7fc <siprintf>
		if(inata.Bus_V <= 2900){
 8003414:	4b7d      	ldr	r3, [pc, #500]	; (800360c <GrandState_Verita+0xb44>)
 8003416:	8a1b      	ldrh	r3, [r3, #16]
 8003418:	f640 3254 	movw	r2, #2900	; 0xb54
 800341c:	4293      	cmp	r3, r2
 800341e:	d823      	bhi.n	8003468 <GrandState_Verita+0x9a0>
			ili9341_WriteString(100, 75, TextDispBuffer, Font20, cl_RED, cl_BLACK);
 8003420:	4b76      	ldr	r3, [pc, #472]	; (80035fc <GrandState_Verita+0xb34>)
 8003422:	2200      	movs	r2, #0
 8003424:	9202      	str	r2, [sp, #8]
 8003426:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800342a:	9201      	str	r2, [sp, #4]
 800342c:	685a      	ldr	r2, [r3, #4]
 800342e:	9200      	str	r2, [sp, #0]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a71      	ldr	r2, [pc, #452]	; (80035f8 <GrandState_Verita+0xb30>)
 8003434:	214b      	movs	r1, #75	; 0x4b
 8003436:	2064      	movs	r0, #100	; 0x64
 8003438:	f002 fdf7 	bl	800602a <ili9341_WriteString>
			sprintf(TextDispBuffer,"FAIL"); ili9341_WriteString(220, 75, TextDispBuffer, Font20, cl_RED, cl_BLACK);
 800343c:	4970      	ldr	r1, [pc, #448]	; (8003600 <GrandState_Verita+0xb38>)
 800343e:	486e      	ldr	r0, [pc, #440]	; (80035f8 <GrandState_Verita+0xb30>)
 8003440:	f00a f9dc 	bl	800d7fc <siprintf>
 8003444:	4b6d      	ldr	r3, [pc, #436]	; (80035fc <GrandState_Verita+0xb34>)
 8003446:	2200      	movs	r2, #0
 8003448:	9202      	str	r2, [sp, #8]
 800344a:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800344e:	9201      	str	r2, [sp, #4]
 8003450:	685a      	ldr	r2, [r3, #4]
 8003452:	9200      	str	r2, [sp, #0]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a68      	ldr	r2, [pc, #416]	; (80035f8 <GrandState_Verita+0xb30>)
 8003458:	214b      	movs	r1, #75	; 0x4b
 800345a:	20dc      	movs	r0, #220	; 0xdc
 800345c:	f002 fde5 	bl	800602a <ili9341_WriteString>
			hwscor.p3V3 = 0;
 8003460:	4b68      	ldr	r3, [pc, #416]	; (8003604 <GrandState_Verita+0xb3c>)
 8003462:	2200      	movs	r2, #0
 8003464:	705a      	strb	r2, [r3, #1]
 8003466:	e022      	b.n	80034ae <GrandState_Verita+0x9e6>
		}else{
			ili9341_WriteString(100, 75, TextDispBuffer, Font20, cl_WHITE, cl_BLACK);
 8003468:	4b64      	ldr	r3, [pc, #400]	; (80035fc <GrandState_Verita+0xb34>)
 800346a:	2200      	movs	r2, #0
 800346c:	9202      	str	r2, [sp, #8]
 800346e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003472:	9201      	str	r2, [sp, #4]
 8003474:	685a      	ldr	r2, [r3, #4]
 8003476:	9200      	str	r2, [sp, #0]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a5f      	ldr	r2, [pc, #380]	; (80035f8 <GrandState_Verita+0xb30>)
 800347c:	214b      	movs	r1, #75	; 0x4b
 800347e:	2064      	movs	r0, #100	; 0x64
 8003480:	f002 fdd3 	bl	800602a <ili9341_WriteString>
			sprintf(TextDispBuffer,"PASS"); ili9341_WriteString(220, 75, TextDispBuffer, Font20, cl_GREEN, cl_BLACK);
 8003484:	4960      	ldr	r1, [pc, #384]	; (8003608 <GrandState_Verita+0xb40>)
 8003486:	485c      	ldr	r0, [pc, #368]	; (80035f8 <GrandState_Verita+0xb30>)
 8003488:	f00a f9b8 	bl	800d7fc <siprintf>
 800348c:	4b5b      	ldr	r3, [pc, #364]	; (80035fc <GrandState_Verita+0xb34>)
 800348e:	2200      	movs	r2, #0
 8003490:	9202      	str	r2, [sp, #8]
 8003492:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8003496:	9201      	str	r2, [sp, #4]
 8003498:	685a      	ldr	r2, [r3, #4]
 800349a:	9200      	str	r2, [sp, #0]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a56      	ldr	r2, [pc, #344]	; (80035f8 <GrandState_Verita+0xb30>)
 80034a0:	214b      	movs	r1, #75	; 0x4b
 80034a2:	20dc      	movs	r0, #220	; 0xdc
 80034a4:	f002 fdc1 	bl	800602a <ili9341_WriteString>
			hwscor.p3V3 = 1;
 80034a8:	4b56      	ldr	r3, [pc, #344]	; (8003604 <GrandState_Verita+0xb3c>)
 80034aa:	2201      	movs	r2, #1
 80034ac:	705a      	strb	r2, [r3, #1]
		}
		//// 3V3 STLink
		sprintf(TextDispBuffer,"%4d", (uint16_t)(mcp_read.cv[0]*1000));
 80034ae:	4b4f      	ldr	r3, [pc, #316]	; (80035ec <GrandState_Verita+0xb24>)
 80034b0:	edd3 7a04 	vldr	s15, [r3, #16]
 80034b4:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 80035f0 <GrandState_Verita+0xb28>
 80034b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034c0:	ee17 3a90 	vmov	r3, s15
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	461a      	mov	r2, r3
 80034c8:	494a      	ldr	r1, [pc, #296]	; (80035f4 <GrandState_Verita+0xb2c>)
 80034ca:	484b      	ldr	r0, [pc, #300]	; (80035f8 <GrandState_Verita+0xb30>)
 80034cc:	f00a f996 	bl	800d7fc <siprintf>
		if(mcp_read.cv[0] <= 2.90){
 80034d0:	4b46      	ldr	r3, [pc, #280]	; (80035ec <GrandState_Verita+0xb24>)
 80034d2:	691b      	ldr	r3, [r3, #16]
 80034d4:	4618      	mov	r0, r3
 80034d6:	f7fd f83f 	bl	8000558 <__aeabi_f2d>
 80034da:	a341      	add	r3, pc, #260	; (adr r3, 80035e0 <GrandState_Verita+0xb18>)
 80034dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034e0:	f7fd fb0e 	bl	8000b00 <__aeabi_dcmple>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d023      	beq.n	8003532 <GrandState_Verita+0xa6a>
			ili9341_WriteString(100, 100, TextDispBuffer, Font20, cl_RED, cl_BLACK);
 80034ea:	4b44      	ldr	r3, [pc, #272]	; (80035fc <GrandState_Verita+0xb34>)
 80034ec:	2200      	movs	r2, #0
 80034ee:	9202      	str	r2, [sp, #8]
 80034f0:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80034f4:	9201      	str	r2, [sp, #4]
 80034f6:	685a      	ldr	r2, [r3, #4]
 80034f8:	9200      	str	r2, [sp, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a3e      	ldr	r2, [pc, #248]	; (80035f8 <GrandState_Verita+0xb30>)
 80034fe:	2164      	movs	r1, #100	; 0x64
 8003500:	2064      	movs	r0, #100	; 0x64
 8003502:	f002 fd92 	bl	800602a <ili9341_WriteString>
			sprintf(TextDispBuffer,"FAIL"); ili9341_WriteString(220, 100, TextDispBuffer, Font20, cl_RED, cl_BLACK);
 8003506:	493e      	ldr	r1, [pc, #248]	; (8003600 <GrandState_Verita+0xb38>)
 8003508:	483b      	ldr	r0, [pc, #236]	; (80035f8 <GrandState_Verita+0xb30>)
 800350a:	f00a f977 	bl	800d7fc <siprintf>
 800350e:	4b3b      	ldr	r3, [pc, #236]	; (80035fc <GrandState_Verita+0xb34>)
 8003510:	2200      	movs	r2, #0
 8003512:	9202      	str	r2, [sp, #8]
 8003514:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8003518:	9201      	str	r2, [sp, #4]
 800351a:	685a      	ldr	r2, [r3, #4]
 800351c:	9200      	str	r2, [sp, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a35      	ldr	r2, [pc, #212]	; (80035f8 <GrandState_Verita+0xb30>)
 8003522:	2164      	movs	r1, #100	; 0x64
 8003524:	20dc      	movs	r0, #220	; 0xdc
 8003526:	f002 fd80 	bl	800602a <ili9341_WriteString>
			hwscor.p3VSTL = 0;
 800352a:	4b36      	ldr	r3, [pc, #216]	; (8003604 <GrandState_Verita+0xb3c>)
 800352c:	2200      	movs	r2, #0
 800352e:	709a      	strb	r2, [r3, #2]
 8003530:	e022      	b.n	8003578 <GrandState_Verita+0xab0>
		}else{
			ili9341_WriteString(100, 100, TextDispBuffer, Font20, cl_WHITE, cl_BLACK);
 8003532:	4b32      	ldr	r3, [pc, #200]	; (80035fc <GrandState_Verita+0xb34>)
 8003534:	2200      	movs	r2, #0
 8003536:	9202      	str	r2, [sp, #8]
 8003538:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800353c:	9201      	str	r2, [sp, #4]
 800353e:	685a      	ldr	r2, [r3, #4]
 8003540:	9200      	str	r2, [sp, #0]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a2c      	ldr	r2, [pc, #176]	; (80035f8 <GrandState_Verita+0xb30>)
 8003546:	2164      	movs	r1, #100	; 0x64
 8003548:	2064      	movs	r0, #100	; 0x64
 800354a:	f002 fd6e 	bl	800602a <ili9341_WriteString>
			sprintf(TextDispBuffer,"PASS"); ili9341_WriteString(220, 100, TextDispBuffer, Font20, cl_GREEN, cl_BLACK);
 800354e:	492e      	ldr	r1, [pc, #184]	; (8003608 <GrandState_Verita+0xb40>)
 8003550:	4829      	ldr	r0, [pc, #164]	; (80035f8 <GrandState_Verita+0xb30>)
 8003552:	f00a f953 	bl	800d7fc <siprintf>
 8003556:	4b29      	ldr	r3, [pc, #164]	; (80035fc <GrandState_Verita+0xb34>)
 8003558:	2200      	movs	r2, #0
 800355a:	9202      	str	r2, [sp, #8]
 800355c:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8003560:	9201      	str	r2, [sp, #4]
 8003562:	685a      	ldr	r2, [r3, #4]
 8003564:	9200      	str	r2, [sp, #0]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a23      	ldr	r2, [pc, #140]	; (80035f8 <GrandState_Verita+0xb30>)
 800356a:	2164      	movs	r1, #100	; 0x64
 800356c:	20dc      	movs	r0, #220	; 0xdc
 800356e:	f002 fd5c 	bl	800602a <ili9341_WriteString>
			hwscor.p3VSTL = 1;
 8003572:	4b24      	ldr	r3, [pc, #144]	; (8003604 <GrandState_Verita+0xb3c>)
 8003574:	2201      	movs	r2, #1
 8003576:	709a      	strb	r2, [r3, #2]
		}
		 //// I Brd
		sprintf(TextDispBuffer,"%4d", inatb.CURRENT);
 8003578:	4b25      	ldr	r3, [pc, #148]	; (8003610 <GrandState_Verita+0xb48>)
 800357a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800357e:	461a      	mov	r2, r3
 8003580:	491c      	ldr	r1, [pc, #112]	; (80035f4 <GrandState_Verita+0xb2c>)
 8003582:	481d      	ldr	r0, [pc, #116]	; (80035f8 <GrandState_Verita+0xb30>)
 8003584:	f00a f93a 	bl	800d7fc <siprintf>
		if(inatb.CURRENT >= Current_treash_mA){
 8003588:	4b21      	ldr	r3, [pc, #132]	; (8003610 <GrandState_Verita+0xb48>)
 800358a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800358e:	2bf9      	cmp	r3, #249	; 0xf9
 8003590:	dd40      	ble.n	8003614 <GrandState_Verita+0xb4c>
			ili9341_WriteString(100, 125, TextDispBuffer, Font20, cl_RED, cl_BLACK);
 8003592:	4b1a      	ldr	r3, [pc, #104]	; (80035fc <GrandState_Verita+0xb34>)
 8003594:	2200      	movs	r2, #0
 8003596:	9202      	str	r2, [sp, #8]
 8003598:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800359c:	9201      	str	r2, [sp, #4]
 800359e:	685a      	ldr	r2, [r3, #4]
 80035a0:	9200      	str	r2, [sp, #0]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a14      	ldr	r2, [pc, #80]	; (80035f8 <GrandState_Verita+0xb30>)
 80035a6:	217d      	movs	r1, #125	; 0x7d
 80035a8:	2064      	movs	r0, #100	; 0x64
 80035aa:	f002 fd3e 	bl	800602a <ili9341_WriteString>
			sprintf(TextDispBuffer,"FAIL"); ili9341_WriteString(220, 125, TextDispBuffer, Font20, cl_RED, cl_BLACK);
 80035ae:	4914      	ldr	r1, [pc, #80]	; (8003600 <GrandState_Verita+0xb38>)
 80035b0:	4811      	ldr	r0, [pc, #68]	; (80035f8 <GrandState_Verita+0xb30>)
 80035b2:	f00a f923 	bl	800d7fc <siprintf>
 80035b6:	4b11      	ldr	r3, [pc, #68]	; (80035fc <GrandState_Verita+0xb34>)
 80035b8:	2200      	movs	r2, #0
 80035ba:	9202      	str	r2, [sp, #8]
 80035bc:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80035c0:	9201      	str	r2, [sp, #4]
 80035c2:	685a      	ldr	r2, [r3, #4]
 80035c4:	9200      	str	r2, [sp, #0]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a0b      	ldr	r2, [pc, #44]	; (80035f8 <GrandState_Verita+0xb30>)
 80035ca:	217d      	movs	r1, #125	; 0x7d
 80035cc:	20dc      	movs	r0, #220	; 0xdc
 80035ce:	f002 fd2c 	bl	800602a <ili9341_WriteString>
			hwscor.pIbrd = 0;
 80035d2:	4b0c      	ldr	r3, [pc, #48]	; (8003604 <GrandState_Verita+0xb3c>)
 80035d4:	2200      	movs	r2, #0
 80035d6:	70da      	strb	r2, [r3, #3]
 80035d8:	e065      	b.n	80036a6 <GrandState_Verita+0xbde>
 80035da:	bf00      	nop
 80035dc:	f3af 8000 	nop.w
 80035e0:	33333333 	.word	0x33333333
 80035e4:	40073333 	.word	0x40073333
 80035e8:	200008a8 	.word	0x200008a8
 80035ec:	20000828 	.word	0x20000828
 80035f0:	447a0000 	.word	0x447a0000
 80035f4:	0800ffdc 	.word	0x0800ffdc
 80035f8:	200006b8 	.word	0x200006b8
 80035fc:	20000238 	.word	0x20000238
 8003600:	0800ffe0 	.word	0x0800ffe0
 8003604:	200008a0 	.word	0x200008a0
 8003608:	0800ffe8 	.word	0x0800ffe8
 800360c:	200007f8 	.word	0x200007f8
 8003610:	20000810 	.word	0x20000810
		}else if (inatb.CURRENT <= 1) { // 8
 8003614:	4ba5      	ldr	r3, [pc, #660]	; (80038ac <GrandState_Verita+0xde4>)
 8003616:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800361a:	2b01      	cmp	r3, #1
 800361c:	dc20      	bgt.n	8003660 <GrandState_Verita+0xb98>
			ili9341_WriteString(100, 125, TextDispBuffer, Font20, cl_WHITE, cl_BLACK);
 800361e:	4ba4      	ldr	r3, [pc, #656]	; (80038b0 <GrandState_Verita+0xde8>)
 8003620:	2200      	movs	r2, #0
 8003622:	9202      	str	r2, [sp, #8]
 8003624:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003628:	9201      	str	r2, [sp, #4]
 800362a:	685a      	ldr	r2, [r3, #4]
 800362c:	9200      	str	r2, [sp, #0]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4aa0      	ldr	r2, [pc, #640]	; (80038b4 <GrandState_Verita+0xdec>)
 8003632:	217d      	movs	r1, #125	; 0x7d
 8003634:	2064      	movs	r0, #100	; 0x64
 8003636:	f002 fcf8 	bl	800602a <ili9341_WriteString>
			sprintf(TextDispBuffer,"N/A"); ili9341_WriteString(220, 125, TextDispBuffer, Font20, cl_ORANGE, cl_BLACK);
 800363a:	499f      	ldr	r1, [pc, #636]	; (80038b8 <GrandState_Verita+0xdf0>)
 800363c:	489d      	ldr	r0, [pc, #628]	; (80038b4 <GrandState_Verita+0xdec>)
 800363e:	f00a f8dd 	bl	800d7fc <siprintf>
 8003642:	4b9b      	ldr	r3, [pc, #620]	; (80038b0 <GrandState_Verita+0xde8>)
 8003644:	2200      	movs	r2, #0
 8003646:	9202      	str	r2, [sp, #8]
 8003648:	f64f 12a0 	movw	r2, #63904	; 0xf9a0
 800364c:	9201      	str	r2, [sp, #4]
 800364e:	685a      	ldr	r2, [r3, #4]
 8003650:	9200      	str	r2, [sp, #0]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a97      	ldr	r2, [pc, #604]	; (80038b4 <GrandState_Verita+0xdec>)
 8003656:	217d      	movs	r1, #125	; 0x7d
 8003658:	20dc      	movs	r0, #220	; 0xdc
 800365a:	f002 fce6 	bl	800602a <ili9341_WriteString>
 800365e:	e022      	b.n	80036a6 <GrandState_Verita+0xbde>
		}
		else{
			ili9341_WriteString(100, 125, TextDispBuffer, Font20, cl_WHITE, cl_BLACK);
 8003660:	4b93      	ldr	r3, [pc, #588]	; (80038b0 <GrandState_Verita+0xde8>)
 8003662:	2200      	movs	r2, #0
 8003664:	9202      	str	r2, [sp, #8]
 8003666:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800366a:	9201      	str	r2, [sp, #4]
 800366c:	685a      	ldr	r2, [r3, #4]
 800366e:	9200      	str	r2, [sp, #0]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a90      	ldr	r2, [pc, #576]	; (80038b4 <GrandState_Verita+0xdec>)
 8003674:	217d      	movs	r1, #125	; 0x7d
 8003676:	2064      	movs	r0, #100	; 0x64
 8003678:	f002 fcd7 	bl	800602a <ili9341_WriteString>
			sprintf(TextDispBuffer,"PASS"); ili9341_WriteString(220, 125, TextDispBuffer, Font20, cl_GREEN, cl_BLACK);
 800367c:	498f      	ldr	r1, [pc, #572]	; (80038bc <GrandState_Verita+0xdf4>)
 800367e:	488d      	ldr	r0, [pc, #564]	; (80038b4 <GrandState_Verita+0xdec>)
 8003680:	f00a f8bc 	bl	800d7fc <siprintf>
 8003684:	4b8a      	ldr	r3, [pc, #552]	; (80038b0 <GrandState_Verita+0xde8>)
 8003686:	2200      	movs	r2, #0
 8003688:	9202      	str	r2, [sp, #8]
 800368a:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800368e:	9201      	str	r2, [sp, #4]
 8003690:	685a      	ldr	r2, [r3, #4]
 8003692:	9200      	str	r2, [sp, #0]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a87      	ldr	r2, [pc, #540]	; (80038b4 <GrandState_Verita+0xdec>)
 8003698:	217d      	movs	r1, #125	; 0x7d
 800369a:	20dc      	movs	r0, #220	; 0xdc
 800369c:	f002 fcc5 	bl	800602a <ili9341_WriteString>
			hwscor.pIbrd = 1;
 80036a0:	4b87      	ldr	r3, [pc, #540]	; (80038c0 <GrandState_Verita+0xdf8>)
 80036a2:	2201      	movs	r2, #1
 80036a4:	70da      	strb	r2, [r3, #3]
		}

		//// I MCU
		sprintf(TextDispBuffer,"%4d", inata.CURRENT);
 80036a6:	4b87      	ldr	r3, [pc, #540]	; (80038c4 <GrandState_Verita+0xdfc>)
 80036a8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80036ac:	461a      	mov	r2, r3
 80036ae:	4986      	ldr	r1, [pc, #536]	; (80038c8 <GrandState_Verita+0xe00>)
 80036b0:	4880      	ldr	r0, [pc, #512]	; (80038b4 <GrandState_Verita+0xdec>)
 80036b2:	f00a f8a3 	bl	800d7fc <siprintf>
		if(inata.CURRENT >= Current_treash_mA){
 80036b6:	4b83      	ldr	r3, [pc, #524]	; (80038c4 <GrandState_Verita+0xdfc>)
 80036b8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80036bc:	2bf9      	cmp	r3, #249	; 0xf9
 80036be:	dd23      	ble.n	8003708 <GrandState_Verita+0xc40>
			ili9341_WriteString(100, 150, TextDispBuffer, Font20, cl_RED, cl_BLACK);
 80036c0:	4b7b      	ldr	r3, [pc, #492]	; (80038b0 <GrandState_Verita+0xde8>)
 80036c2:	2200      	movs	r2, #0
 80036c4:	9202      	str	r2, [sp, #8]
 80036c6:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80036ca:	9201      	str	r2, [sp, #4]
 80036cc:	685a      	ldr	r2, [r3, #4]
 80036ce:	9200      	str	r2, [sp, #0]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a78      	ldr	r2, [pc, #480]	; (80038b4 <GrandState_Verita+0xdec>)
 80036d4:	2196      	movs	r1, #150	; 0x96
 80036d6:	2064      	movs	r0, #100	; 0x64
 80036d8:	f002 fca7 	bl	800602a <ili9341_WriteString>
			sprintf(TextDispBuffer,"FAIL"); ili9341_WriteString(220, 150, TextDispBuffer, Font20, cl_RED, cl_BLACK);
 80036dc:	497b      	ldr	r1, [pc, #492]	; (80038cc <GrandState_Verita+0xe04>)
 80036de:	4875      	ldr	r0, [pc, #468]	; (80038b4 <GrandState_Verita+0xdec>)
 80036e0:	f00a f88c 	bl	800d7fc <siprintf>
 80036e4:	4b72      	ldr	r3, [pc, #456]	; (80038b0 <GrandState_Verita+0xde8>)
 80036e6:	2200      	movs	r2, #0
 80036e8:	9202      	str	r2, [sp, #8]
 80036ea:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80036ee:	9201      	str	r2, [sp, #4]
 80036f0:	685a      	ldr	r2, [r3, #4]
 80036f2:	9200      	str	r2, [sp, #0]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a6f      	ldr	r2, [pc, #444]	; (80038b4 <GrandState_Verita+0xdec>)
 80036f8:	2196      	movs	r1, #150	; 0x96
 80036fa:	20dc      	movs	r0, #220	; 0xdc
 80036fc:	f002 fc95 	bl	800602a <ili9341_WriteString>
			hwscor.pImcu = 0;
 8003700:	4b6f      	ldr	r3, [pc, #444]	; (80038c0 <GrandState_Verita+0xdf8>)
 8003702:	2200      	movs	r2, #0
 8003704:	711a      	strb	r2, [r3, #4]
 8003706:	e07a      	b.n	80037fe <GrandState_Verita+0xd36>
		}else if (inata.CURRENT <= 3) {
 8003708:	4b6e      	ldr	r3, [pc, #440]	; (80038c4 <GrandState_Verita+0xdfc>)
 800370a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800370e:	2b03      	cmp	r3, #3
 8003710:	dc49      	bgt.n	80037a6 <GrandState_Verita+0xcde>
			ili9341_WriteString(100, 150, TextDispBuffer, Font20, cl_WHITE, cl_BLACK);
 8003712:	4b67      	ldr	r3, [pc, #412]	; (80038b0 <GrandState_Verita+0xde8>)
 8003714:	2200      	movs	r2, #0
 8003716:	9202      	str	r2, [sp, #8]
 8003718:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800371c:	9201      	str	r2, [sp, #4]
 800371e:	685a      	ldr	r2, [r3, #4]
 8003720:	9200      	str	r2, [sp, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a63      	ldr	r2, [pc, #396]	; (80038b4 <GrandState_Verita+0xdec>)
 8003726:	2196      	movs	r1, #150	; 0x96
 8003728:	2064      	movs	r0, #100	; 0x64
 800372a:	f002 fc7e 	bl	800602a <ili9341_WriteString>
			sprintf(TextDispBuffer,"N/A"); ili9341_WriteString(220, 150, TextDispBuffer, Font20, cl_ORANGE, cl_BLACK);
 800372e:	4962      	ldr	r1, [pc, #392]	; (80038b8 <GrandState_Verita+0xdf0>)
 8003730:	4860      	ldr	r0, [pc, #384]	; (80038b4 <GrandState_Verita+0xdec>)
 8003732:	f00a f863 	bl	800d7fc <siprintf>
 8003736:	4b5e      	ldr	r3, [pc, #376]	; (80038b0 <GrandState_Verita+0xde8>)
 8003738:	2200      	movs	r2, #0
 800373a:	9202      	str	r2, [sp, #8]
 800373c:	f64f 12a0 	movw	r2, #63904	; 0xf9a0
 8003740:	9201      	str	r2, [sp, #4]
 8003742:	685a      	ldr	r2, [r3, #4]
 8003744:	9200      	str	r2, [sp, #0]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a5a      	ldr	r2, [pc, #360]	; (80038b4 <GrandState_Verita+0xdec>)
 800374a:	2196      	movs	r1, #150	; 0x96
 800374c:	20dc      	movs	r0, #220	; 0xdc
 800374e:	f002 fc6c 	bl	800602a <ili9341_WriteString>
			sprintf(TextDispBuffer,"Unplug"); ili9341_WriteString(275, 145, TextDispBuffer, Font12, cl_GREENYELLOW, cl_BLACK);
 8003752:	495f      	ldr	r1, [pc, #380]	; (80038d0 <GrandState_Verita+0xe08>)
 8003754:	4857      	ldr	r0, [pc, #348]	; (80038b4 <GrandState_Verita+0xdec>)
 8003756:	f00a f851 	bl	800d7fc <siprintf>
 800375a:	4b5e      	ldr	r3, [pc, #376]	; (80038d4 <GrandState_Verita+0xe0c>)
 800375c:	2200      	movs	r2, #0
 800375e:	9202      	str	r2, [sp, #8]
 8003760:	f64a 72e5 	movw	r2, #45029	; 0xafe5
 8003764:	9201      	str	r2, [sp, #4]
 8003766:	685a      	ldr	r2, [r3, #4]
 8003768:	9200      	str	r2, [sp, #0]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a51      	ldr	r2, [pc, #324]	; (80038b4 <GrandState_Verita+0xdec>)
 800376e:	2191      	movs	r1, #145	; 0x91
 8003770:	f240 1013 	movw	r0, #275	; 0x113
 8003774:	f002 fc59 	bl	800602a <ili9341_WriteString>
			sprintf(TextDispBuffer,"JP6?"); ili9341_WriteString(275, 157, TextDispBuffer, Font12, cl_GREENYELLOW, cl_BLACK);
 8003778:	4957      	ldr	r1, [pc, #348]	; (80038d8 <GrandState_Verita+0xe10>)
 800377a:	484e      	ldr	r0, [pc, #312]	; (80038b4 <GrandState_Verita+0xdec>)
 800377c:	f00a f83e 	bl	800d7fc <siprintf>
 8003780:	4b54      	ldr	r3, [pc, #336]	; (80038d4 <GrandState_Verita+0xe0c>)
 8003782:	2200      	movs	r2, #0
 8003784:	9202      	str	r2, [sp, #8]
 8003786:	f64a 72e5 	movw	r2, #45029	; 0xafe5
 800378a:	9201      	str	r2, [sp, #4]
 800378c:	685a      	ldr	r2, [r3, #4]
 800378e:	9200      	str	r2, [sp, #0]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a48      	ldr	r2, [pc, #288]	; (80038b4 <GrandState_Verita+0xdec>)
 8003794:	219d      	movs	r1, #157	; 0x9d
 8003796:	f240 1013 	movw	r0, #275	; 0x113
 800379a:	f002 fc46 	bl	800602a <ili9341_WriteString>
			hwscor.pImcu = 0;
 800379e:	4b48      	ldr	r3, [pc, #288]	; (80038c0 <GrandState_Verita+0xdf8>)
 80037a0:	2200      	movs	r2, #0
 80037a2:	711a      	strb	r2, [r3, #4]
 80037a4:	e02b      	b.n	80037fe <GrandState_Verita+0xd36>
		}else{
			ili9341_WriteString(100, 150, TextDispBuffer, Font20, cl_WHITE, cl_BLACK);
 80037a6:	4b42      	ldr	r3, [pc, #264]	; (80038b0 <GrandState_Verita+0xde8>)
 80037a8:	2200      	movs	r2, #0
 80037aa:	9202      	str	r2, [sp, #8]
 80037ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80037b0:	9201      	str	r2, [sp, #4]
 80037b2:	685a      	ldr	r2, [r3, #4]
 80037b4:	9200      	str	r2, [sp, #0]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a3e      	ldr	r2, [pc, #248]	; (80038b4 <GrandState_Verita+0xdec>)
 80037ba:	2196      	movs	r1, #150	; 0x96
 80037bc:	2064      	movs	r0, #100	; 0x64
 80037be:	f002 fc34 	bl	800602a <ili9341_WriteString>
			sprintf(TextDispBuffer,"PASS"); ili9341_WriteString(220, 150, TextDispBuffer, Font20, cl_GREEN, cl_BLACK);
 80037c2:	493e      	ldr	r1, [pc, #248]	; (80038bc <GrandState_Verita+0xdf4>)
 80037c4:	483b      	ldr	r0, [pc, #236]	; (80038b4 <GrandState_Verita+0xdec>)
 80037c6:	f00a f819 	bl	800d7fc <siprintf>
 80037ca:	4b39      	ldr	r3, [pc, #228]	; (80038b0 <GrandState_Verita+0xde8>)
 80037cc:	2200      	movs	r2, #0
 80037ce:	9202      	str	r2, [sp, #8]
 80037d0:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80037d4:	9201      	str	r2, [sp, #4]
 80037d6:	685a      	ldr	r2, [r3, #4]
 80037d8:	9200      	str	r2, [sp, #0]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a35      	ldr	r2, [pc, #212]	; (80038b4 <GrandState_Verita+0xdec>)
 80037de:	2196      	movs	r1, #150	; 0x96
 80037e0:	20dc      	movs	r0, #220	; 0xdc
 80037e2:	f002 fc22 	bl	800602a <ili9341_WriteString>
			ili9341_FillRect(275, 140, 45, 30, cl_BLACK);
 80037e6:	2300      	movs	r3, #0
 80037e8:	9300      	str	r3, [sp, #0]
 80037ea:	231e      	movs	r3, #30
 80037ec:	222d      	movs	r2, #45	; 0x2d
 80037ee:	218c      	movs	r1, #140	; 0x8c
 80037f0:	f240 1013 	movw	r0, #275	; 0x113
 80037f4:	f002 fa70 	bl	8005cd8 <ili9341_FillRect>
			hwscor.pImcu = 1;
 80037f8:	4b31      	ldr	r3, [pc, #196]	; (80038c0 <GrandState_Verita+0xdf8>)
 80037fa:	2201      	movs	r2, #1
 80037fc:	711a      	strb	r2, [r3, #4]
		}


		sprintf(TextDispBuffer,"<-Back");
 80037fe:	4937      	ldr	r1, [pc, #220]	; (80038dc <GrandState_Verita+0xe14>)
 8003800:	482c      	ldr	r0, [pc, #176]	; (80038b4 <GrandState_Verita+0xdec>)
 8003802:	f009 fffb 	bl	800d7fc <siprintf>
		ili9341_WriteStringNoBG(30, 220, TextDispBuffer, Font16, cl_WHITE);
 8003806:	4b36      	ldr	r3, [pc, #216]	; (80038e0 <GrandState_Verita+0xe18>)
 8003808:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800380c:	9201      	str	r2, [sp, #4]
 800380e:	685a      	ldr	r2, [r3, #4]
 8003810:	9200      	str	r2, [sp, #0]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a27      	ldr	r2, [pc, #156]	; (80038b4 <GrandState_Verita+0xdec>)
 8003816:	21dc      	movs	r1, #220	; 0xdc
 8003818:	201e      	movs	r0, #30
 800381a:	f002 fc53 	bl	80060c4 <ili9341_WriteStringNoBG>
			 * 		if pressed or 3 sec pass -> go bootloader
			 * else force back lobby & turnoff relay.
			 * */

		//// wait for MCU Booting
		if(HAL_GetTick() >= gScr.timelog){
 800381e:	f003 f8dd 	bl	80069dc <HAL_GetTick>
 8003822:	4602      	mov	r2, r0
 8003824:	4b2f      	ldr	r3, [pc, #188]	; (80038e4 <GrandState_Verita+0xe1c>)
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	429a      	cmp	r2, r3
 800382a:	f0c0 80be 	bcc.w	80039aa <GrandState_Verita+0xee2>

			//// All pass
			if(hwscor.p3V3 + hwscor.p3VSTL + hwscor.pIbrd + hwscor.pImcu + hwscor.p5V >= 5){
 800382e:	4b24      	ldr	r3, [pc, #144]	; (80038c0 <GrandState_Verita+0xdf8>)
 8003830:	785b      	ldrb	r3, [r3, #1]
 8003832:	461a      	mov	r2, r3
 8003834:	4b22      	ldr	r3, [pc, #136]	; (80038c0 <GrandState_Verita+0xdf8>)
 8003836:	789b      	ldrb	r3, [r3, #2]
 8003838:	4413      	add	r3, r2
 800383a:	4a21      	ldr	r2, [pc, #132]	; (80038c0 <GrandState_Verita+0xdf8>)
 800383c:	78d2      	ldrb	r2, [r2, #3]
 800383e:	4413      	add	r3, r2
 8003840:	4a1f      	ldr	r2, [pc, #124]	; (80038c0 <GrandState_Verita+0xdf8>)
 8003842:	7912      	ldrb	r2, [r2, #4]
 8003844:	4413      	add	r3, r2
 8003846:	4a1e      	ldr	r2, [pc, #120]	; (80038c0 <GrandState_Verita+0xdf8>)
 8003848:	7812      	ldrb	r2, [r2, #0]
 800384a:	4413      	add	r3, r2
 800384c:	2b04      	cmp	r3, #4
 800384e:	dd4f      	ble.n	80038f0 <GrandState_Verita+0xe28>
				hwscor.ptime_scores++;
 8003850:	4b1b      	ldr	r3, [pc, #108]	; (80038c0 <GrandState_Verita+0xdf8>)
 8003852:	795b      	ldrb	r3, [r3, #5]
 8003854:	3301      	adds	r3, #1
 8003856:	b2da      	uxtb	r2, r3
 8003858:	4b19      	ldr	r3, [pc, #100]	; (80038c0 <GrandState_Verita+0xdf8>)
 800385a:	715a      	strb	r2, [r3, #5]
				//// make sure All really pass continuously
				if(hwscor.ptime_scores >= 2){
 800385c:	4b18      	ldr	r3, [pc, #96]	; (80038c0 <GrandState_Verita+0xdf8>)
 800385e:	795b      	ldrb	r3, [r3, #5]
 8003860:	2b01      	cmp	r3, #1
 8003862:	f240 80a2 	bls.w	80039aa <GrandState_Verita+0xee2>
					hwscor.ptime_scores = 0;
 8003866:	4b16      	ldr	r3, [pc, #88]	; (80038c0 <GrandState_Verita+0xdf8>)
 8003868:	2200      	movs	r2, #0
 800386a:	715a      	strb	r2, [r3, #5]

					sprintf(TextDispBuffer,"ALL PASS"); ili9341_WriteString(220, 170, TextDispBuffer, Font16, cl_BLUE, cl_GREEN);
 800386c:	491e      	ldr	r1, [pc, #120]	; (80038e8 <GrandState_Verita+0xe20>)
 800386e:	4811      	ldr	r0, [pc, #68]	; (80038b4 <GrandState_Verita+0xdec>)
 8003870:	f009 ffc4 	bl	800d7fc <siprintf>
 8003874:	4b1a      	ldr	r3, [pc, #104]	; (80038e0 <GrandState_Verita+0xe18>)
 8003876:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800387a:	9202      	str	r2, [sp, #8]
 800387c:	221f      	movs	r2, #31
 800387e:	9201      	str	r2, [sp, #4]
 8003880:	685a      	ldr	r2, [r3, #4]
 8003882:	9200      	str	r2, [sp, #0]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a0b      	ldr	r2, [pc, #44]	; (80038b4 <GrandState_Verita+0xdec>)
 8003888:	21aa      	movs	r1, #170	; 0xaa
 800388a:	20dc      	movs	r0, #220	; 0xdc
 800388c:	f002 fbcd 	bl	800602a <ili9341_WriteString>
					HAL_Delay(500);
 8003890:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003894:	f003 f8ae 	bl	80069f4 <HAL_Delay>
					if(gScr.fullflag == ff_runfull){
 8003898:	4b12      	ldr	r3, [pc, #72]	; (80038e4 <GrandState_Verita+0xe1c>)
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	2b03      	cmp	r3, #3
 800389e:	f040 8084 	bne.w	80039aa <GrandState_Verita+0xee2>
						//GrandState = pre_bootloader;
						GrandState = pre_fw_erase;
 80038a2:	4b12      	ldr	r3, [pc, #72]	; (80038ec <GrandState_Verita+0xe24>)
 80038a4:	2207      	movs	r2, #7
 80038a6:	701a      	strb	r2, [r3, #0]
 80038a8:	e07f      	b.n	80039aa <GrandState_Verita+0xee2>
 80038aa:	bf00      	nop
 80038ac:	20000810 	.word	0x20000810
 80038b0:	20000238 	.word	0x20000238
 80038b4:	200006b8 	.word	0x200006b8
 80038b8:	0800fff0 	.word	0x0800fff0
 80038bc:	0800ffe8 	.word	0x0800ffe8
 80038c0:	200008a0 	.word	0x200008a0
 80038c4:	200007f8 	.word	0x200007f8
 80038c8:	0800ffdc 	.word	0x0800ffdc
 80038cc:	0800ffe0 	.word	0x0800ffe0
 80038d0:	0800fff4 	.word	0x0800fff4
 80038d4:	20000228 	.word	0x20000228
 80038d8:	0800fffc 	.word	0x0800fffc
 80038dc:	0800ff60 	.word	0x0800ff60
 80038e0:	20000230 	.word	0x20000230
 80038e4:	20000894 	.word	0x20000894
 80038e8:	08010004 	.word	0x08010004
 80038ec:	20000006 	.word	0x20000006
				}
			}
			//// Atleast fail
			else{

				hwscor.ptime_scores = 0;
 80038f0:	4b9f      	ldr	r3, [pc, #636]	; (8003b70 <GrandState_Verita+0x10a8>)
 80038f2:	2200      	movs	r2, #0
 80038f4:	715a      	strb	r2, [r3, #5]

				if(inatb.CURRENT - inata.CURRENT >= 150 && inatb.CURRENT >= Current_treash_mA){
 80038f6:	4b9f      	ldr	r3, [pc, #636]	; (8003b74 <GrandState_Verita+0x10ac>)
 80038f8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80038fc:	461a      	mov	r2, r3
 80038fe:	4b9e      	ldr	r3, [pc, #632]	; (8003b78 <GrandState_Verita+0x10b0>)
 8003900:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	2b95      	cmp	r3, #149	; 0x95
 8003908:	dd16      	ble.n	8003938 <GrandState_Verita+0xe70>
 800390a:	4b9a      	ldr	r3, [pc, #616]	; (8003b74 <GrandState_Verita+0x10ac>)
 800390c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003910:	2bf9      	cmp	r3, #249	; 0xf9
 8003912:	dd11      	ble.n	8003938 <GrandState_Verita+0xe70>
				//// board current bad
				sprintf(TextDispBuffer,"Board Bad"); ili9341_WriteString(110, 180, TextDispBuffer, Font16, cl_YELLOW, cl_BLACK);
 8003914:	4999      	ldr	r1, [pc, #612]	; (8003b7c <GrandState_Verita+0x10b4>)
 8003916:	489a      	ldr	r0, [pc, #616]	; (8003b80 <GrandState_Verita+0x10b8>)
 8003918:	f009 ff70 	bl	800d7fc <siprintf>
 800391c:	4b99      	ldr	r3, [pc, #612]	; (8003b84 <GrandState_Verita+0x10bc>)
 800391e:	2200      	movs	r2, #0
 8003920:	9202      	str	r2, [sp, #8]
 8003922:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8003926:	9201      	str	r2, [sp, #4]
 8003928:	685a      	ldr	r2, [r3, #4]
 800392a:	9200      	str	r2, [sp, #0]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a94      	ldr	r2, [pc, #592]	; (8003b80 <GrandState_Verita+0x10b8>)
 8003930:	21b4      	movs	r1, #180	; 0xb4
 8003932:	206e      	movs	r0, #110	; 0x6e
 8003934:	f002 fb79 	bl	800602a <ili9341_WriteString>
				}
				if(inata.CURRENT >= Current_treash_mA){
 8003938:	4b8f      	ldr	r3, [pc, #572]	; (8003b78 <GrandState_Verita+0x10b0>)
 800393a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800393e:	2bf9      	cmp	r3, #249	; 0xf9
 8003940:	dd11      	ble.n	8003966 <GrandState_Verita+0xe9e>
				//// Bad MCU
				sprintf(TextDispBuffer,"MCU Bad"); ili9341_WriteString(20, 180, TextDispBuffer, Font16, cl_YELLOW, cl_BLACK);
 8003942:	4991      	ldr	r1, [pc, #580]	; (8003b88 <GrandState_Verita+0x10c0>)
 8003944:	488e      	ldr	r0, [pc, #568]	; (8003b80 <GrandState_Verita+0x10b8>)
 8003946:	f009 ff59 	bl	800d7fc <siprintf>
 800394a:	4b8e      	ldr	r3, [pc, #568]	; (8003b84 <GrandState_Verita+0x10bc>)
 800394c:	2200      	movs	r2, #0
 800394e:	9202      	str	r2, [sp, #8]
 8003950:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8003954:	9201      	str	r2, [sp, #4]
 8003956:	685a      	ldr	r2, [r3, #4]
 8003958:	9200      	str	r2, [sp, #0]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a88      	ldr	r2, [pc, #544]	; (8003b80 <GrandState_Verita+0x10b8>)
 800395e:	21b4      	movs	r1, #180	; 0xb4
 8003960:	2014      	movs	r0, #20
 8003962:	f002 fb62 	bl	800602a <ili9341_WriteString>
				}

				sprintf(TextDispBuffer,"Unplug Client & Press back to lobby"); ili9341_WriteString(20, 205, TextDispBuffer, Font12, cl_YELLOW, cl_BLACK);
 8003966:	4989      	ldr	r1, [pc, #548]	; (8003b8c <GrandState_Verita+0x10c4>)
 8003968:	4885      	ldr	r0, [pc, #532]	; (8003b80 <GrandState_Verita+0x10b8>)
 800396a:	f009 ff47 	bl	800d7fc <siprintf>
 800396e:	4b88      	ldr	r3, [pc, #544]	; (8003b90 <GrandState_Verita+0x10c8>)
 8003970:	2200      	movs	r2, #0
 8003972:	9202      	str	r2, [sp, #8]
 8003974:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8003978:	9201      	str	r2, [sp, #4]
 800397a:	685a      	ldr	r2, [r3, #4]
 800397c:	9200      	str	r2, [sp, #0]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a7f      	ldr	r2, [pc, #508]	; (8003b80 <GrandState_Verita+0x10b8>)
 8003982:	21cd      	movs	r1, #205	; 0xcd
 8003984:	2014      	movs	r0, #20
 8003986:	f002 fb50 	bl	800602a <ili9341_WriteString>
				if(k_flag.cnt){
 800398a:	4b82      	ldr	r3, [pc, #520]	; (8003b94 <GrandState_Verita+0x10cc>)
 800398c:	789b      	ldrb	r3, [r3, #2]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d00b      	beq.n	80039aa <GrandState_Verita+0xee2>
				k_flag.cnt = 0;
 8003992:	4b80      	ldr	r3, [pc, #512]	; (8003b94 <GrandState_Verita+0x10cc>)
 8003994:	2200      	movs	r2, #0
 8003996:	709a      	strb	r2, [r3, #2]
				HAL_GPIO_WritePin(RelayClient_GPIO_Port, RelayClient_Pin, GPIO_PIN_RESET);
 8003998:	2200      	movs	r2, #0
 800399a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800399e:	487e      	ldr	r0, [pc, #504]	; (8003b98 <GrandState_Verita+0x10d0>)
 80039a0:	f003 ff0a 	bl	80077b8 <HAL_GPIO_WritePin>
				GrandState = pre_lobby;
 80039a4:	4b7d      	ldr	r3, [pc, #500]	; (8003b9c <GrandState_Verita+0x10d4>)
 80039a6:	2201      	movs	r2, #1
 80039a8:	701a      	strb	r2, [r3, #0]
				}
			}

		}//// haltimelog

		if(k_flag.cnt && stboxp.ch_is == 1){ //// Back to lobby
 80039aa:	4b7a      	ldr	r3, [pc, #488]	; (8003b94 <GrandState_Verita+0x10cc>)
 80039ac:	789b      	ldrb	r3, [r3, #2]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	f001 8270 	beq.w	8004e94 <GrandState_Verita+0x23cc>
 80039b4:	4b7a      	ldr	r3, [pc, #488]	; (8003ba0 <GrandState_Verita+0x10d8>)
 80039b6:	789b      	ldrb	r3, [r3, #2]
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	f041 826b 	bne.w	8004e94 <GrandState_Verita+0x23cc>
			GrandState = pre_lobby;
 80039be:	4b77      	ldr	r3, [pc, #476]	; (8003b9c <GrandState_Verita+0x10d4>)
 80039c0:	2201      	movs	r2, #1
 80039c2:	701a      	strb	r2, [r3, #0]
			k_flag.cnt = 0;
 80039c4:	4b73      	ldr	r3, [pc, #460]	; (8003b94 <GrandState_Verita+0x10cc>)
 80039c6:	2200      	movs	r2, #0
 80039c8:	709a      	strb	r2, [r3, #2]
			gScr.fullflag = 0;
 80039ca:	4b76      	ldr	r3, [pc, #472]	; (8003ba4 <GrandState_Verita+0x10dc>)
 80039cc:	2200      	movs	r2, #0
 80039ce:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(RelayClient_GPIO_Port, RelayClient_Pin, GPIO_PIN_RESET);
 80039d0:	2200      	movs	r2, #0
 80039d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80039d6:	4870      	ldr	r0, [pc, #448]	; (8003b98 <GrandState_Verita+0x10d0>)
 80039d8:	f003 feee 	bl	80077b8 <HAL_GPIO_WritePin>
		}

		break; //hw_chk
 80039dc:	f001 ba5a 	b.w	8004e94 <GrandState_Verita+0x23cc>

	case pre_bootloader:
		stboxp.choice_set = bpoxy_no;
 80039e0:	4b6f      	ldr	r3, [pc, #444]	; (8003ba0 <GrandState_Verita+0x10d8>)
 80039e2:	2203      	movs	r2, #3
 80039e4:	705a      	strb	r2, [r3, #1]

		ili9341_FillRect(0, 0, 320, 30, cl_YELLOW);
 80039e6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80039ea:	9300      	str	r3, [sp, #0]
 80039ec:	231e      	movs	r3, #30
 80039ee:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80039f2:	2100      	movs	r1, #0
 80039f4:	2000      	movs	r0, #0
 80039f6:	f002 f96f 	bl	8005cd8 <ili9341_FillRect>
		ili9341_FillRect(0, 30, 320, 210, cl_BLACK);
 80039fa:	2300      	movs	r3, #0
 80039fc:	9300      	str	r3, [sp, #0]
 80039fe:	23d2      	movs	r3, #210	; 0xd2
 8003a00:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003a04:	211e      	movs	r1, #30
 8003a06:	2000      	movs	r0, #0
 8003a08:	f002 f966 	bl	8005cd8 <ili9341_FillRect>

		sprintf(TextDispBuffer,"- BOOTLOADER -");
 8003a0c:	4966      	ldr	r1, [pc, #408]	; (8003ba8 <GrandState_Verita+0x10e0>)
 8003a0e:	485c      	ldr	r0, [pc, #368]	; (8003b80 <GrandState_Verita+0x10b8>)
 8003a10:	f009 fef4 	bl	800d7fc <siprintf>
		ili9341_WriteStringNoBG(60, 5, TextDispBuffer, Font20, cl_BLACK);
 8003a14:	4b65      	ldr	r3, [pc, #404]	; (8003bac <GrandState_Verita+0x10e4>)
 8003a16:	2200      	movs	r2, #0
 8003a18:	9201      	str	r2, [sp, #4]
 8003a1a:	685a      	ldr	r2, [r3, #4]
 8003a1c:	9200      	str	r2, [sp, #0]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a57      	ldr	r2, [pc, #348]	; (8003b80 <GrandState_Verita+0x10b8>)
 8003a22:	2105      	movs	r1, #5
 8003a24:	203c      	movs	r0, #60	; 0x3c
 8003a26:	f002 fb4d 	bl	80060c4 <ili9341_WriteStringNoBG>

		if(gScr.fullflag == ff_runfull){
 8003a2a:	4b5e      	ldr	r3, [pc, #376]	; (8003ba4 <GrandState_Verita+0x10dc>)
 8003a2c:	781b      	ldrb	r3, [r3, #0]
 8003a2e:	2b03      	cmp	r3, #3
 8003a30:	d112      	bne.n	8003a58 <GrandState_Verita+0xf90>
				sprintf(TextDispBuffer,"FULL"); ili9341_WriteString(250, 5, TextDispBuffer, Font20, cl_RED, cl_YELLOW);
 8003a32:	495f      	ldr	r1, [pc, #380]	; (8003bb0 <GrandState_Verita+0x10e8>)
 8003a34:	4852      	ldr	r0, [pc, #328]	; (8003b80 <GrandState_Verita+0x10b8>)
 8003a36:	f009 fee1 	bl	800d7fc <siprintf>
 8003a3a:	4b5c      	ldr	r3, [pc, #368]	; (8003bac <GrandState_Verita+0x10e4>)
 8003a3c:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8003a40:	9202      	str	r2, [sp, #8]
 8003a42:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8003a46:	9201      	str	r2, [sp, #4]
 8003a48:	685a      	ldr	r2, [r3, #4]
 8003a4a:	9200      	str	r2, [sp, #0]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a4c      	ldr	r2, [pc, #304]	; (8003b80 <GrandState_Verita+0x10b8>)
 8003a50:	2105      	movs	r1, #5
 8003a52:	20fa      	movs	r0, #250	; 0xfa
 8003a54:	f002 fae9 	bl	800602a <ili9341_WriteString>
		}

		sprintf(TextDispBuffer," .bin script is booting...");
 8003a58:	4956      	ldr	r1, [pc, #344]	; (8003bb4 <GrandState_Verita+0x10ec>)
 8003a5a:	4849      	ldr	r0, [pc, #292]	; (8003b80 <GrandState_Verita+0x10b8>)
 8003a5c:	f009 fece 	bl	800d7fc <siprintf>
		ili9341_WriteStringNoBG(20, 60, TextDispBuffer, Font16, cl_WHITE);
 8003a60:	4b48      	ldr	r3, [pc, #288]	; (8003b84 <GrandState_Verita+0x10bc>)
 8003a62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a66:	9201      	str	r2, [sp, #4]
 8003a68:	685a      	ldr	r2, [r3, #4]
 8003a6a:	9200      	str	r2, [sp, #0]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a44      	ldr	r2, [pc, #272]	; (8003b80 <GrandState_Verita+0x10b8>)
 8003a70:	213c      	movs	r1, #60	; 0x3c
 8003a72:	2014      	movs	r0, #20
 8003a74:	f002 fb26 	bl	80060c4 <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"Firmware ver: %08X", client_bin_Ver);
 8003a78:	4a4f      	ldr	r2, [pc, #316]	; (8003bb8 <GrandState_Verita+0x10f0>)
 8003a7a:	4950      	ldr	r1, [pc, #320]	; (8003bbc <GrandState_Verita+0x10f4>)
 8003a7c:	4840      	ldr	r0, [pc, #256]	; (8003b80 <GrandState_Verita+0x10b8>)
 8003a7e:	f009 febd 	bl	800d7fc <siprintf>
		ili9341_WriteStringNoBG(40, 80, TextDispBuffer, Font16, cl_DARKGREY);
 8003a82:	4b40      	ldr	r3, [pc, #256]	; (8003b84 <GrandState_Verita+0x10bc>)
 8003a84:	f647 32ef 	movw	r2, #31727	; 0x7bef
 8003a88:	9201      	str	r2, [sp, #4]
 8003a8a:	685a      	ldr	r2, [r3, #4]
 8003a8c:	9200      	str	r2, [sp, #0]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a3b      	ldr	r2, [pc, #236]	; (8003b80 <GrandState_Verita+0x10b8>)
 8003a92:	2150      	movs	r1, #80	; 0x50
 8003a94:	2028      	movs	r0, #40	; 0x28
 8003a96:	f002 fb15 	bl	80060c4 <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"Don't pluck  off");
 8003a9a:	4949      	ldr	r1, [pc, #292]	; (8003bc0 <GrandState_Verita+0x10f8>)
 8003a9c:	4838      	ldr	r0, [pc, #224]	; (8003b80 <GrandState_Verita+0x10b8>)
 8003a9e:	f009 fead 	bl	800d7fc <siprintf>
		ili9341_WriteStringNoBG(40, 110, TextDispBuffer, Font20, cl_WHITE);
 8003aa2:	4b42      	ldr	r3, [pc, #264]	; (8003bac <GrandState_Verita+0x10e4>)
 8003aa4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003aa8:	9201      	str	r2, [sp, #4]
 8003aaa:	685a      	ldr	r2, [r3, #4]
 8003aac:	9200      	str	r2, [sp, #0]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a33      	ldr	r2, [pc, #204]	; (8003b80 <GrandState_Verita+0x10b8>)
 8003ab2:	216e      	movs	r1, #110	; 0x6e
 8003ab4:	2028      	movs	r0, #40	; 0x28
 8003ab6:	f002 fb05 	bl	80060c4 <ili9341_WriteStringNoBG>
		sprintf(TextDispBuffer,"the client board");
 8003aba:	4942      	ldr	r1, [pc, #264]	; (8003bc4 <GrandState_Verita+0x10fc>)
 8003abc:	4830      	ldr	r0, [pc, #192]	; (8003b80 <GrandState_Verita+0x10b8>)
 8003abe:	f009 fe9d 	bl	800d7fc <siprintf>
		ili9341_WriteStringNoBG(40, 135, TextDispBuffer, Font20, cl_ORANGE);
 8003ac2:	4b3a      	ldr	r3, [pc, #232]	; (8003bac <GrandState_Verita+0x10e4>)
 8003ac4:	f64f 12a0 	movw	r2, #63904	; 0xf9a0
 8003ac8:	9201      	str	r2, [sp, #4]
 8003aca:	685a      	ldr	r2, [r3, #4]
 8003acc:	9200      	str	r2, [sp, #0]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a2b      	ldr	r2, [pc, #172]	; (8003b80 <GrandState_Verita+0x10b8>)
 8003ad2:	2187      	movs	r1, #135	; 0x87
 8003ad4:	2028      	movs	r0, #40	; 0x28
 8003ad6:	f002 faf5 	bl	80060c4 <ili9341_WriteStringNoBG>


		k_flag.cnt = 0;
 8003ada:	4b2e      	ldr	r3, [pc, #184]	; (8003b94 <GrandState_Verita+0x10cc>)
 8003adc:	2200      	movs	r2, #0
 8003ade:	709a      	strb	r2, [r3, #2]
		GrandState = s_bootloader;
 8003ae0:	4b2e      	ldr	r3, [pc, #184]	; (8003b9c <GrandState_Verita+0x10d4>)
 8003ae2:	220a      	movs	r2, #10
 8003ae4:	701a      	strb	r2, [r3, #0]
		//GrandState = pnd_bootloader; gScr.timelog = HAL_GetTick() + 3500;
		break; // pre_bootloader
 8003ae6:	f001 b9e4 	b.w	8004eb2 <GrandState_Verita+0x23ea>

	case pnd_bootloader:
		//// -- Open Client make sure ----
		HAL_GPIO_WritePin(RelayClient_GPIO_Port, RelayClient_Pin, GPIO_PIN_SET);
 8003aea:	2201      	movs	r2, #1
 8003aec:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003af0:	4829      	ldr	r0, [pc, #164]	; (8003b98 <GrandState_Verita+0x10d0>)
 8003af2:	f003 fe61 	bl	80077b8 <HAL_GPIO_WritePin>

		if(HAL_GetTick() >= gScr.timelog){
 8003af6:	f002 ff71 	bl	80069dc <HAL_GetTick>
 8003afa:	4602      	mov	r2, r0
 8003afc:	4b29      	ldr	r3, [pc, #164]	; (8003ba4 <GrandState_Verita+0x10dc>)
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	429a      	cmp	r2, r3
 8003b02:	f0c1 81c9 	bcc.w	8004e98 <GrandState_Verita+0x23d0>
			GrandState = s_bootloader;
 8003b06:	4b25      	ldr	r3, [pc, #148]	; (8003b9c <GrandState_Verita+0x10d4>)
 8003b08:	220a      	movs	r2, #10
 8003b0a:	701a      	strb	r2, [r3, #0]
		}
		
		break;
 8003b0c:	f001 b9c4 	b.w	8004e98 <GrandState_Verita+0x23d0>

	case s_bootloader:
		stboxp.choice_set = bpoxy_def;
 8003b10:	4b23      	ldr	r3, [pc, #140]	; (8003ba0 <GrandState_Verita+0x10d8>)
 8003b12:	2200      	movs	r2, #0
 8003b14:	705a      	strb	r2, [r3, #1]

		//// -- Open Client make sure ----
		if(HAL_GPIO_ReadPin(RelayClient_GPIO_Port, RelayClient_Pin) >= 1){
 8003b16:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003b1a:	481f      	ldr	r0, [pc, #124]	; (8003b98 <GrandState_Verita+0x10d0>)
 8003b1c:	f003 fe34 	bl	8007788 <HAL_GPIO_ReadPin>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d003      	beq.n	8003b2e <GrandState_Verita+0x1066>
			HAL_Delay(150);
 8003b26:	2096      	movs	r0, #150	; 0x96
 8003b28:	f002 ff64 	bl	80069f4 <HAL_Delay>
 8003b2c:	e009      	b.n	8003b42 <GrandState_Verita+0x107a>
		}else{
			HAL_GPIO_WritePin(RelayClient_GPIO_Port, RelayClient_Pin, GPIO_PIN_SET);
 8003b2e:	2201      	movs	r2, #1
 8003b30:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003b34:	4818      	ldr	r0, [pc, #96]	; (8003b98 <GrandState_Verita+0x10d0>)
 8003b36:	f003 fe3f 	bl	80077b8 <HAL_GPIO_WritePin>
			HAL_Delay(3500);
 8003b3a:	f640 50ac 	movw	r0, #3500	; 0xdac
 8003b3e:	f002 ff59 	bl	80069f4 <HAL_Delay>

		//// enable UART, disable after endboot, prevent misunderstanding when GPIO test
		//gpio_BL_UART_activate();

		//// find n times must be loop to upload all code
		bootloop_n = (boot_size / 256) + ((boot_size % 256)>0 ? 1:0);
 8003b42:	4b21      	ldr	r3, [pc, #132]	; (8003bc8 <GrandState_Verita+0x1100>)
 8003b44:	881b      	ldrh	r3, [r3, #0]
 8003b46:	0a1b      	lsrs	r3, r3, #8
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	4a1e      	ldr	r2, [pc, #120]	; (8003bc8 <GrandState_Verita+0x1100>)
 8003b4e:	8812      	ldrh	r2, [r2, #0]
 8003b50:	b2d2      	uxtb	r2, r2
 8003b52:	b292      	uxth	r2, r2
 8003b54:	2a00      	cmp	r2, #0
 8003b56:	bf14      	ite	ne
 8003b58:	2201      	movne	r2, #1
 8003b5a:	2200      	moveq	r2, #0
 8003b5c:	b2d2      	uxtb	r2, r2
 8003b5e:	4413      	add	r3, r2
 8003b60:	b2da      	uxtb	r2, r3
 8003b62:	4b1a      	ldr	r3, [pc, #104]	; (8003bcc <GrandState_Verita+0x1104>)
 8003b64:	701a      	strb	r2, [r3, #0]
		//bootloop_n = (uint8_t)ceil(boot_size / 256.0);

		BL_UART_Start(&huart1);
 8003b66:	481a      	ldr	r0, [pc, #104]	; (8003bd0 <GrandState_Verita+0x1108>)
 8003b68:	f7fd fd9e 	bl	80016a8 <BL_UART_Start>
			//blrespo = BL_UART_ExtendEraseMem_SP(&huart1, Erase_MASS_CMD);


		//// WriteMem Set  =========================================
		//// case 31452 -> b must be loop 123 times  ----------------------------------
		for(register int b = 0;b < bootloop_n - 1;b++){
 8003b6c:	2400      	movs	r4, #0
 8003b6e:	e089      	b.n	8003c84 <GrandState_Verita+0x11bc>
 8003b70:	200008a0 	.word	0x200008a0
 8003b74:	20000810 	.word	0x20000810
 8003b78:	200007f8 	.word	0x200007f8
 8003b7c:	08010010 	.word	0x08010010
 8003b80:	200006b8 	.word	0x200006b8
 8003b84:	20000230 	.word	0x20000230
 8003b88:	0801001c 	.word	0x0801001c
 8003b8c:	08010024 	.word	0x08010024
 8003b90:	20000228 	.word	0x20000228
 8003b94:	20000890 	.word	0x20000890
 8003b98:	40020800 	.word	0x40020800
 8003b9c:	20000006 	.word	0x20000006
 8003ba0:	200008a8 	.word	0x200008a8
 8003ba4:	20000894 	.word	0x20000894
 8003ba8:	08010048 	.word	0x08010048
 8003bac:	20000238 	.word	0x20000238
 8003bb0:	0800ff68 	.word	0x0800ff68
 8003bb4:	08010058 	.word	0x08010058
 8003bb8:	07010523 	.word	0x07010523
 8003bbc:	08010074 	.word	0x08010074
 8003bc0:	08010088 	.word	0x08010088
 8003bc4:	0801009c 	.word	0x0801009c
 8003bc8:	20000004 	.word	0x20000004
 8003bcc:	20000780 	.word	0x20000780
 8003bd0:	2000058c 	.word	0x2000058c
			blrespo = BL_UART_WriteMem(&huart1, 0x08000000 + (b*0x100), 255, &F411_Verita_Client[0x100*b]);
 8003bd4:	f504 2300 	add.w	r3, r4, #524288	; 0x80000
 8003bd8:	021b      	lsls	r3, r3, #8
 8003bda:	4619      	mov	r1, r3
 8003bdc:	0223      	lsls	r3, r4, #8
 8003bde:	4a57      	ldr	r2, [pc, #348]	; (8003d3c <GrandState_Verita+0x1274>)
 8003be0:	4413      	add	r3, r2
 8003be2:	22ff      	movs	r2, #255	; 0xff
 8003be4:	4856      	ldr	r0, [pc, #344]	; (8003d40 <GrandState_Verita+0x1278>)
 8003be6:	f7fd fdad 	bl	8001744 <BL_UART_WriteMem>
 8003bea:	4603      	mov	r3, r0
 8003bec:	461a      	mov	r2, r3
 8003bee:	4b55      	ldr	r3, [pc, #340]	; (8003d44 <GrandState_Verita+0x127c>)
 8003bf0:	701a      	strb	r2, [r3, #0]
			//// display ---------------
			if(blrespo == UB_ACK){
 8003bf2:	4b54      	ldr	r3, [pc, #336]	; (8003d44 <GrandState_Verita+0x127c>)
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	2b79      	cmp	r3, #121	; 0x79
 8003bf8:	d112      	bne.n	8003c20 <GrandState_Verita+0x1158>
				sprintf(TextDispBuffer,"Wr");
 8003bfa:	4953      	ldr	r1, [pc, #332]	; (8003d48 <GrandState_Verita+0x1280>)
 8003bfc:	4853      	ldr	r0, [pc, #332]	; (8003d4c <GrandState_Verita+0x1284>)
 8003bfe:	f009 fdfd 	bl	800d7fc <siprintf>
				ili9341_WriteString(40, 180, TextDispBuffer, Font16, cl_YELLOW, cl_BLACK);
 8003c02:	4b53      	ldr	r3, [pc, #332]	; (8003d50 <GrandState_Verita+0x1288>)
 8003c04:	2200      	movs	r2, #0
 8003c06:	9202      	str	r2, [sp, #8]
 8003c08:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8003c0c:	9201      	str	r2, [sp, #4]
 8003c0e:	685a      	ldr	r2, [r3, #4]
 8003c10:	9200      	str	r2, [sp, #0]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a4d      	ldr	r2, [pc, #308]	; (8003d4c <GrandState_Verita+0x1284>)
 8003c16:	21b4      	movs	r1, #180	; 0xb4
 8003c18:	2028      	movs	r0, #40	; 0x28
 8003c1a:	f002 fa06 	bl	800602a <ili9341_WriteString>
 8003c1e:	e028      	b.n	8003c72 <GrandState_Verita+0x11aa>
			}else if(blrespo == UB_NACK){
 8003c20:	4b48      	ldr	r3, [pc, #288]	; (8003d44 <GrandState_Verita+0x127c>)
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	2b1f      	cmp	r3, #31
 8003c26:	d112      	bne.n	8003c4e <GrandState_Verita+0x1186>
				sprintf(TextDispBuffer,"B");
 8003c28:	494a      	ldr	r1, [pc, #296]	; (8003d54 <GrandState_Verita+0x128c>)
 8003c2a:	4848      	ldr	r0, [pc, #288]	; (8003d4c <GrandState_Verita+0x1284>)
 8003c2c:	f009 fde6 	bl	800d7fc <siprintf>
				ili9341_WriteString(40, 180, TextDispBuffer, Font16, cl_YELLOW, cl_BLACK);
 8003c30:	4b47      	ldr	r3, [pc, #284]	; (8003d50 <GrandState_Verita+0x1288>)
 8003c32:	2200      	movs	r2, #0
 8003c34:	9202      	str	r2, [sp, #8]
 8003c36:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8003c3a:	9201      	str	r2, [sp, #4]
 8003c3c:	685a      	ldr	r2, [r3, #4]
 8003c3e:	9200      	str	r2, [sp, #0]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a42      	ldr	r2, [pc, #264]	; (8003d4c <GrandState_Verita+0x1284>)
 8003c44:	21b4      	movs	r1, #180	; 0xb4
 8003c46:	2028      	movs	r0, #40	; 0x28
 8003c48:	f002 f9ef 	bl	800602a <ili9341_WriteString>
 8003c4c:	e011      	b.n	8003c72 <GrandState_Verita+0x11aa>
			}
			else{
				sprintf(TextDispBuffer,"-");
 8003c4e:	4942      	ldr	r1, [pc, #264]	; (8003d58 <GrandState_Verita+0x1290>)
 8003c50:	483e      	ldr	r0, [pc, #248]	; (8003d4c <GrandState_Verita+0x1284>)
 8003c52:	f009 fdd3 	bl	800d7fc <siprintf>
				ili9341_WriteString(40, 180, TextDispBuffer, Font16, cl_GRAY, cl_BLACK);
 8003c56:	4b3e      	ldr	r3, [pc, #248]	; (8003d50 <GrandState_Verita+0x1288>)
 8003c58:	2200      	movs	r2, #0
 8003c5a:	9202      	str	r2, [sp, #8]
 8003c5c:	f645 22eb 	movw	r2, #23275	; 0x5aeb
 8003c60:	9201      	str	r2, [sp, #4]
 8003c62:	685a      	ldr	r2, [r3, #4]
 8003c64:	9200      	str	r2, [sp, #0]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a38      	ldr	r2, [pc, #224]	; (8003d4c <GrandState_Verita+0x1284>)
 8003c6a:	21b4      	movs	r1, #180	; 0xb4
 8003c6c:	2028      	movs	r0, #40	; 0x28
 8003c6e:	f002 f9dc 	bl	800602a <ili9341_WriteString>
			}
			ili9341_FillRect(40, 180, 15, 30, cl_BLACK);
 8003c72:	2300      	movs	r3, #0
 8003c74:	9300      	str	r3, [sp, #0]
 8003c76:	231e      	movs	r3, #30
 8003c78:	220f      	movs	r2, #15
 8003c7a:	21b4      	movs	r1, #180	; 0xb4
 8003c7c:	2028      	movs	r0, #40	; 0x28
 8003c7e:	f002 f82b 	bl	8005cd8 <ili9341_FillRect>
		for(register int b = 0;b < bootloop_n - 1;b++){
 8003c82:	3401      	adds	r4, #1
 8003c84:	4b35      	ldr	r3, [pc, #212]	; (8003d5c <GrandState_Verita+0x1294>)
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	3b01      	subs	r3, #1
 8003c8a:	429c      	cmp	r4, r3
 8003c8c:	dba2      	blt.n	8003bd4 <GrandState_Verita+0x110c>
			//// display ---------------
		}
		//// last round: send only left bit (less 255)
		BL_UART_WriteMem(&huart1, 0x08000000 + ((bootloop_n-1)*0x100), boot_size % 256, &F411_Verita_Client[0x100*(bootloop_n-1)]);
 8003c8e:	4b33      	ldr	r3, [pc, #204]	; (8003d5c <GrandState_Verita+0x1294>)
 8003c90:	781b      	ldrb	r3, [r3, #0]
 8003c92:	f503 23ff 	add.w	r3, r3, #522240	; 0x7f800
 8003c96:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8003c9a:	021b      	lsls	r3, r3, #8
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	4b30      	ldr	r3, [pc, #192]	; (8003d60 <GrandState_Verita+0x1298>)
 8003ca0:	881b      	ldrh	r3, [r3, #0]
 8003ca2:	b2da      	uxtb	r2, r3
 8003ca4:	4b2d      	ldr	r3, [pc, #180]	; (8003d5c <GrandState_Verita+0x1294>)
 8003ca6:	781b      	ldrb	r3, [r3, #0]
 8003ca8:	3b01      	subs	r3, #1
 8003caa:	021b      	lsls	r3, r3, #8
 8003cac:	4923      	ldr	r1, [pc, #140]	; (8003d3c <GrandState_Verita+0x1274>)
 8003cae:	440b      	add	r3, r1
 8003cb0:	4601      	mov	r1, r0
 8003cb2:	4823      	ldr	r0, [pc, #140]	; (8003d40 <GrandState_Verita+0x1278>)
 8003cb4:	f7fd fd46 	bl	8001744 <BL_UART_WriteMem>
		//// WriteMem Set =========================================

		BL_UART_Finish();
 8003cb8:	f7fd fd26 	bl	8001708 <BL_UART_Finish>
//		HAL_GPIO_WritePin(RelayClient_GPIO_Port, RelayClient_Pin, GPIO_PIN_SET);
//		HAL_Delay(1000);
		//// Hard reset--------


		sprintf(TextDispBuffer,"Finish");
 8003cbc:	4929      	ldr	r1, [pc, #164]	; (8003d64 <GrandState_Verita+0x129c>)
 8003cbe:	4823      	ldr	r0, [pc, #140]	; (8003d4c <GrandState_Verita+0x1284>)
 8003cc0:	f009 fd9c 	bl	800d7fc <siprintf>
		ili9341_WriteStringNoBG(140, 160, TextDispBuffer, Font24, cl_GREEN);
 8003cc4:	4b28      	ldr	r3, [pc, #160]	; (8003d68 <GrandState_Verita+0x12a0>)
 8003cc6:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8003cca:	9201      	str	r2, [sp, #4]
 8003ccc:	685a      	ldr	r2, [r3, #4]
 8003cce:	9200      	str	r2, [sp, #0]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a1e      	ldr	r2, [pc, #120]	; (8003d4c <GrandState_Verita+0x1284>)
 8003cd4:	21a0      	movs	r1, #160	; 0xa0
 8003cd6:	208c      	movs	r0, #140	; 0x8c
 8003cd8:	f002 f9f4 	bl	80060c4 <ili9341_WriteStringNoBG>
		////wait for user to realise finish
		HAL_Delay(1000);
 8003cdc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003ce0:	f002 fe88 	bl	80069f4 <HAL_Delay>

		sprintf(TextDispBuffer,"Start");
 8003ce4:	4921      	ldr	r1, [pc, #132]	; (8003d6c <GrandState_Verita+0x12a4>)
 8003ce6:	4819      	ldr	r0, [pc, #100]	; (8003d4c <GrandState_Verita+0x1284>)
 8003ce8:	f009 fd88 	bl	800d7fc <siprintf>
		ili9341_WriteStringNoBG(140, 190, TextDispBuffer, Font24, cl_GREEN);
 8003cec:	4b1e      	ldr	r3, [pc, #120]	; (8003d68 <GrandState_Verita+0x12a0>)
 8003cee:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8003cf2:	9201      	str	r2, [sp, #4]
 8003cf4:	685a      	ldr	r2, [r3, #4]
 8003cf6:	9200      	str	r2, [sp, #0]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a14      	ldr	r2, [pc, #80]	; (8003d4c <GrandState_Verita+0x1284>)
 8003cfc:	21be      	movs	r1, #190	; 0xbe
 8003cfe:	208c      	movs	r0, #140	; 0x8c
 8003d00:	f002 f9e0 	bl	80060c4 <ili9341_WriteStringNoBG>
		////wait for user to realise finish
		HAL_Delay(1000);
 8003d04:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003d08:	f002 fe74 	bl	80069f4 <HAL_Delay>

		//// disable UART, disable after endboot, prevent misunderstanding when GPIO test
		//gpio_BL_UART_Deactivate();

		k_flag.cnt = 0;//// prevent over state jump
 8003d0c:	4b18      	ldr	r3, [pc, #96]	; (8003d70 <GrandState_Verita+0x12a8>)
 8003d0e:	2200      	movs	r2, #0
 8003d10:	709a      	strb	r2, [r3, #2]
		if(gScr.fullflag == ff_runfull){
 8003d12:	4b18      	ldr	r3, [pc, #96]	; (8003d74 <GrandState_Verita+0x12ac>)
 8003d14:	781b      	ldrb	r3, [r3, #0]
 8003d16:	2b03      	cmp	r3, #3
 8003d18:	d10b      	bne.n	8003d32 <GrandState_Verita+0x126a>
			GrandState = pre_gpio_chk;
 8003d1a:	4b17      	ldr	r3, [pc, #92]	; (8003d78 <GrandState_Verita+0x12b0>)
 8003d1c:	220d      	movs	r2, #13
 8003d1e:	701a      	strb	r2, [r3, #0]
			//// wait for gpio_chk before tomeout ////
			gScr.timelog = HAL_GetTick() + 3500;
 8003d20:	f002 fe5c 	bl	80069dc <HAL_GetTick>
 8003d24:	4603      	mov	r3, r0
 8003d26:	f603 53ac 	addw	r3, r3, #3500	; 0xdac
 8003d2a:	4a12      	ldr	r2, [pc, #72]	; (8003d74 <GrandState_Verita+0x12ac>)
 8003d2c:	6053      	str	r3, [r2, #4]
		}else{
			GrandState = pre_fw_lob;
		}

		break; ////s_bootloader
 8003d2e:	f001 b8c0 	b.w	8004eb2 <GrandState_Verita+0x23ea>
			GrandState = pre_fw_lob;
 8003d32:	4b11      	ldr	r3, [pc, #68]	; (8003d78 <GrandState_Verita+0x12b0>)
 8003d34:	2205      	movs	r2, #5
 8003d36:	701a      	strb	r2, [r3, #0]
		break; ////s_bootloader
 8003d38:	f001 b8bb 	b.w	8004eb2 <GrandState_Verita+0x23ea>
 8003d3c:	08030108 	.word	0x08030108
 8003d40:	2000058c 	.word	0x2000058c
 8003d44:	20000781 	.word	0x20000781
 8003d48:	080100b0 	.word	0x080100b0
 8003d4c:	200006b8 	.word	0x200006b8
 8003d50:	20000230 	.word	0x20000230
 8003d54:	080100b4 	.word	0x080100b4
 8003d58:	080100b8 	.word	0x080100b8
 8003d5c:	20000780 	.word	0x20000780
 8003d60:	20000004 	.word	0x20000004
 8003d64:	080100bc 	.word	0x080100bc
 8003d68:	20000240 	.word	0x20000240
 8003d6c:	080100c4 	.word	0x080100c4
 8003d70:	20000890 	.word	0x20000890
 8003d74:	20000894 	.word	0x20000894
 8003d78:	20000006 	.word	0x20000006

	case pre_gpio_chk:
			stboxp.choice_set = bpoxy_def;
 8003d7c:	4bab      	ldr	r3, [pc, #684]	; (800402c <GrandState_Verita+0x1564>)
 8003d7e:	2200      	movs	r2, #0
 8003d80:	705a      	strb	r2, [r3, #1]
			//// Send CMD to client to run GPIO testscript
			Tx_UART_Verita_Command(&huart6, VRC_Flag_ger, VRF_GPIO_Runalltest);
 8003d82:	2202      	movs	r2, #2
 8003d84:	21a1      	movs	r1, #161	; 0xa1
 8003d86:	48aa      	ldr	r0, [pc, #680]	; (8004030 <GrandState_Verita+0x1568>)
 8003d88:	f7fd fc52 	bl	8001630 <Tx_UART_Verita_Command>

			//// Set UI
			ili9341_FillRect(0, 0, 320, 30, cl_DARKCYAN);
 8003d8c:	f240 33ef 	movw	r3, #1007	; 0x3ef
 8003d90:	9300      	str	r3, [sp, #0]
 8003d92:	231e      	movs	r3, #30
 8003d94:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003d98:	2100      	movs	r1, #0
 8003d9a:	2000      	movs	r0, #0
 8003d9c:	f001 ff9c 	bl	8005cd8 <ili9341_FillRect>
			ili9341_FillRect(0, 30, 320, 210, cl_BLACK);
 8003da0:	2300      	movs	r3, #0
 8003da2:	9300      	str	r3, [sp, #0]
 8003da4:	23d2      	movs	r3, #210	; 0xd2
 8003da6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003daa:	211e      	movs	r1, #30
 8003dac:	2000      	movs	r0, #0
 8003dae:	f001 ff93 	bl	8005cd8 <ili9341_FillRect>

			sprintf(TextDispBuffer,"GPIO Selftest");
 8003db2:	49a0      	ldr	r1, [pc, #640]	; (8004034 <GrandState_Verita+0x156c>)
 8003db4:	48a0      	ldr	r0, [pc, #640]	; (8004038 <GrandState_Verita+0x1570>)
 8003db6:	f009 fd21 	bl	800d7fc <siprintf>
			ili9341_WriteStringNoBG(60, 5, TextDispBuffer, Font20, cl_WHITE);
 8003dba:	4ba0      	ldr	r3, [pc, #640]	; (800403c <GrandState_Verita+0x1574>)
 8003dbc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003dc0:	9201      	str	r2, [sp, #4]
 8003dc2:	685a      	ldr	r2, [r3, #4]
 8003dc4:	9200      	str	r2, [sp, #0]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a9b      	ldr	r2, [pc, #620]	; (8004038 <GrandState_Verita+0x1570>)
 8003dca:	2105      	movs	r1, #5
 8003dcc:	203c      	movs	r0, #60	; 0x3c
 8003dce:	f002 f979 	bl	80060c4 <ili9341_WriteStringNoBG>

			if(gScr.fullflag == ff_runfull){
 8003dd2:	4b9b      	ldr	r3, [pc, #620]	; (8004040 <GrandState_Verita+0x1578>)
 8003dd4:	781b      	ldrb	r3, [r3, #0]
 8003dd6:	2b03      	cmp	r3, #3
 8003dd8:	d112      	bne.n	8003e00 <GrandState_Verita+0x1338>
				sprintf(TextDispBuffer,"FULL"); ili9341_WriteString(250, 5, TextDispBuffer, Font20, cl_RED, cl_YELLOW);
 8003dda:	499a      	ldr	r1, [pc, #616]	; (8004044 <GrandState_Verita+0x157c>)
 8003ddc:	4896      	ldr	r0, [pc, #600]	; (8004038 <GrandState_Verita+0x1570>)
 8003dde:	f009 fd0d 	bl	800d7fc <siprintf>
 8003de2:	4b96      	ldr	r3, [pc, #600]	; (800403c <GrandState_Verita+0x1574>)
 8003de4:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8003de8:	9202      	str	r2, [sp, #8]
 8003dea:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8003dee:	9201      	str	r2, [sp, #4]
 8003df0:	685a      	ldr	r2, [r3, #4]
 8003df2:	9200      	str	r2, [sp, #0]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a90      	ldr	r2, [pc, #576]	; (8004038 <GrandState_Verita+0x1570>)
 8003df8:	2105      	movs	r1, #5
 8003dfa:	20fa      	movs	r0, #250	; 0xfa
 8003dfc:	f002 f915 	bl	800602a <ili9341_WriteString>
//			ili9341_WriteStringNoBG(15, 85, TextDispBuffer, Font20, cl_WHITE);
//
//			sprintf(TextDispBuffer,"OD:");
//			ili9341_WriteStringNoBG(15, 120, TextDispBuffer, Font20, cl_WHITE);

			sprintf(TextDispBuffer,"MCU Temp:");
 8003e00:	4991      	ldr	r1, [pc, #580]	; (8004048 <GrandState_Verita+0x1580>)
 8003e02:	488d      	ldr	r0, [pc, #564]	; (8004038 <GrandState_Verita+0x1570>)
 8003e04:	f009 fcfa 	bl	800d7fc <siprintf>
			ili9341_WriteStringNoBG(250, 175, TextDispBuffer, Font12, cl_WHITE);
 8003e08:	4b90      	ldr	r3, [pc, #576]	; (800404c <GrandState_Verita+0x1584>)
 8003e0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e0e:	9201      	str	r2, [sp, #4]
 8003e10:	685a      	ldr	r2, [r3, #4]
 8003e12:	9200      	str	r2, [sp, #0]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a88      	ldr	r2, [pc, #544]	; (8004038 <GrandState_Verita+0x1570>)
 8003e18:	21af      	movs	r1, #175	; 0xaf
 8003e1a:	20fa      	movs	r0, #250	; 0xfa
 8003e1c:	f002 f952 	bl	80060c4 <ili9341_WriteStringNoBG>

			sprintf(TextDispBuffer,"FWID:");
 8003e20:	498b      	ldr	r1, [pc, #556]	; (8004050 <GrandState_Verita+0x1588>)
 8003e22:	4885      	ldr	r0, [pc, #532]	; (8004038 <GrandState_Verita+0x1570>)
 8003e24:	f009 fcea 	bl	800d7fc <siprintf>
			ili9341_WriteStringNoBG(250, 210, TextDispBuffer, Font12, cl_WHITE);
 8003e28:	4b88      	ldr	r3, [pc, #544]	; (800404c <GrandState_Verita+0x1584>)
 8003e2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e2e:	9201      	str	r2, [sp, #4]
 8003e30:	685a      	ldr	r2, [r3, #4]
 8003e32:	9200      	str	r2, [sp, #0]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a80      	ldr	r2, [pc, #512]	; (8004038 <GrandState_Verita+0x1570>)
 8003e38:	21d2      	movs	r1, #210	; 0xd2
 8003e3a:	20fa      	movs	r0, #250	; 0xfa
 8003e3c:	f002 f942 	bl	80060c4 <ili9341_WriteStringNoBG>

			sprintf(TextDispBuffer,"Finish >> ");
 8003e40:	4984      	ldr	r1, [pc, #528]	; (8004054 <GrandState_Verita+0x158c>)
 8003e42:	487d      	ldr	r0, [pc, #500]	; (8004038 <GrandState_Verita+0x1570>)
 8003e44:	f009 fcda 	bl	800d7fc <siprintf>
			ili9341_WriteStringNoBG(30, 220, TextDispBuffer, Font16, cl_GREENYELLOW);
 8003e48:	4b83      	ldr	r3, [pc, #524]	; (8004058 <GrandState_Verita+0x1590>)
 8003e4a:	f64a 72e5 	movw	r2, #45029	; 0xafe5
 8003e4e:	9201      	str	r2, [sp, #4]
 8003e50:	685a      	ldr	r2, [r3, #4]
 8003e52:	9200      	str	r2, [sp, #0]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a78      	ldr	r2, [pc, #480]	; (8004038 <GrandState_Verita+0x1570>)
 8003e58:	21dc      	movs	r1, #220	; 0xdc
 8003e5a:	201e      	movs	r0, #30
 8003e5c:	f002 f932 	bl	80060c4 <ili9341_WriteStringNoBG>


			//// checkif GPIO test is finished ?  || HAL_GetTick() >= gScr.timelog
			if(VRB_CL.Mark.Flag_next){ // runalltest cplt
 8003e60:	4b7e      	ldr	r3, [pc, #504]	; (800405c <GrandState_Verita+0x1594>)
 8003e62:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	f000 8138 	beq.w	80040dc <GrandState_Verita+0x1614>
				Tx_UART_Verita_Command(&huart6, VRC_Flag_ger, VRF_SendALLTestData);
 8003e6c:	2204      	movs	r2, #4
 8003e6e:	21a1      	movs	r1, #161	; 0xa1
 8003e70:	486f      	ldr	r0, [pc, #444]	; (8004030 <GrandState_Verita+0x1568>)
 8003e72:	f7fd fbdd 	bl	8001630 <Tx_UART_Verita_Command>
				HAL_Delay(100);
 8003e76:	2064      	movs	r0, #100	; 0x64
 8003e78:	f002 fdbc 	bl	80069f4 <HAL_Delay>

				if(VRB_CL.Mark.Flag_ger == VRF_SendALLTestData){ //// 'll send this flag back after cplt
 8003e7c:	4b77      	ldr	r3, [pc, #476]	; (800405c <GrandState_Verita+0x1594>)
 8003e7e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8003e82:	2b04      	cmp	r3, #4
 8003e84:	f040 810f 	bne.w	80040a6 <GrandState_Verita+0x15de>

					resetgpio_char();
 8003e88:	f001 f8a4 	bl	8004fd4 <resetgpio_char>

					Compare_pin_32(VRB_CL.Mark.PA_PUPDR, List_GPIOA, 0, WR_A_PUPDR);
 8003e8c:	4b73      	ldr	r3, [pc, #460]	; (800405c <GrandState_Verita+0x1594>)
 8003e8e:	6858      	ldr	r0, [r3, #4]
 8003e90:	4b73      	ldr	r3, [pc, #460]	; (8004060 <GrandState_Verita+0x1598>)
 8003e92:	2200      	movs	r2, #0
 8003e94:	4973      	ldr	r1, [pc, #460]	; (8004064 <GrandState_Verita+0x159c>)
 8003e96:	f7fe fce5 	bl	8002864 <Compare_pin_32>
					Compare_pin_32(VRB_CL.Mark.PA_OUT_PP, List_GPIOA, 0, WR_A_OPP);
 8003e9a:	4b70      	ldr	r3, [pc, #448]	; (800405c <GrandState_Verita+0x1594>)
 8003e9c:	6898      	ldr	r0, [r3, #8]
 8003e9e:	4b72      	ldr	r3, [pc, #456]	; (8004068 <GrandState_Verita+0x15a0>)
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	4970      	ldr	r1, [pc, #448]	; (8004064 <GrandState_Verita+0x159c>)
 8003ea4:	f7fe fcde 	bl	8002864 <Compare_pin_32>
					Compare_pin_32(VRB_CL.Mark.PA_OUT_OD, List_GPIOA, 0, WR_A_OOD);
 8003ea8:	4b6c      	ldr	r3, [pc, #432]	; (800405c <GrandState_Verita+0x1594>)
 8003eaa:	68d8      	ldr	r0, [r3, #12]
 8003eac:	4b6f      	ldr	r3, [pc, #444]	; (800406c <GrandState_Verita+0x15a4>)
 8003eae:	2200      	movs	r2, #0
 8003eb0:	496c      	ldr	r1, [pc, #432]	; (8004064 <GrandState_Verita+0x159c>)
 8003eb2:	f7fe fcd7 	bl	8002864 <Compare_pin_32>

					Compare_pin_32(VRB_CL.Mark.PB_PUPDR, List_GPIOB, 1,  WR_B_PUPDR);
 8003eb6:	4b69      	ldr	r3, [pc, #420]	; (800405c <GrandState_Verita+0x1594>)
 8003eb8:	6918      	ldr	r0, [r3, #16]
 8003eba:	4b6d      	ldr	r3, [pc, #436]	; (8004070 <GrandState_Verita+0x15a8>)
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	496d      	ldr	r1, [pc, #436]	; (8004074 <GrandState_Verita+0x15ac>)
 8003ec0:	f7fe fcd0 	bl	8002864 <Compare_pin_32>
					Compare_pin_32(VRB_CL.Mark.PB_OUT_PP, List_GPIOB, 1, WR_B_OPP);
 8003ec4:	4b65      	ldr	r3, [pc, #404]	; (800405c <GrandState_Verita+0x1594>)
 8003ec6:	6958      	ldr	r0, [r3, #20]
 8003ec8:	4b6b      	ldr	r3, [pc, #428]	; (8004078 <GrandState_Verita+0x15b0>)
 8003eca:	2201      	movs	r2, #1
 8003ecc:	4969      	ldr	r1, [pc, #420]	; (8004074 <GrandState_Verita+0x15ac>)
 8003ece:	f7fe fcc9 	bl	8002864 <Compare_pin_32>
					Compare_pin_32(VRB_CL.Mark.PB_OUT_OD, List_GPIOB, 1, WR_B_OOD);
 8003ed2:	4b62      	ldr	r3, [pc, #392]	; (800405c <GrandState_Verita+0x1594>)
 8003ed4:	6998      	ldr	r0, [r3, #24]
 8003ed6:	4b69      	ldr	r3, [pc, #420]	; (800407c <GrandState_Verita+0x15b4>)
 8003ed8:	2201      	movs	r2, #1
 8003eda:	4966      	ldr	r1, [pc, #408]	; (8004074 <GrandState_Verita+0x15ac>)
 8003edc:	f7fe fcc2 	bl	8002864 <Compare_pin_32>

					Compare_pin_32(VRB_CL.Mark.PC_PUPDR, List_GPIOC, 2, WR_C_PUPDR);
 8003ee0:	4b5e      	ldr	r3, [pc, #376]	; (800405c <GrandState_Verita+0x1594>)
 8003ee2:	69d8      	ldr	r0, [r3, #28]
 8003ee4:	4b66      	ldr	r3, [pc, #408]	; (8004080 <GrandState_Verita+0x15b8>)
 8003ee6:	2202      	movs	r2, #2
 8003ee8:	4966      	ldr	r1, [pc, #408]	; (8004084 <GrandState_Verita+0x15bc>)
 8003eea:	f7fe fcbb 	bl	8002864 <Compare_pin_32>
					Compare_pin_32(VRB_CL.Mark.PC_OUT_PP, List_GPIOC, 2, WR_C_OPP);
 8003eee:	4b5b      	ldr	r3, [pc, #364]	; (800405c <GrandState_Verita+0x1594>)
 8003ef0:	6a18      	ldr	r0, [r3, #32]
 8003ef2:	4b65      	ldr	r3, [pc, #404]	; (8004088 <GrandState_Verita+0x15c0>)
 8003ef4:	2202      	movs	r2, #2
 8003ef6:	4963      	ldr	r1, [pc, #396]	; (8004084 <GrandState_Verita+0x15bc>)
 8003ef8:	f7fe fcb4 	bl	8002864 <Compare_pin_32>
					Compare_pin_32(VRB_CL.Mark.PC_OUT_OD, List_GPIOC, 2, WR_C_OOD);
 8003efc:	4b57      	ldr	r3, [pc, #348]	; (800405c <GrandState_Verita+0x1594>)
 8003efe:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003f00:	4b62      	ldr	r3, [pc, #392]	; (800408c <GrandState_Verita+0x15c4>)
 8003f02:	2202      	movs	r2, #2
 8003f04:	495f      	ldr	r1, [pc, #380]	; (8004084 <GrandState_Verita+0x15bc>)
 8003f06:	f7fe fcad 	bl	8002864 <Compare_pin_32>

					 sprintf(TextDispBuffer, WR_A_PUPDR); ili9341_WriteStringNoBG(10, 35, TextDispBuffer, Font16, cl_WHITE);
 8003f0a:	4955      	ldr	r1, [pc, #340]	; (8004060 <GrandState_Verita+0x1598>)
 8003f0c:	484a      	ldr	r0, [pc, #296]	; (8004038 <GrandState_Verita+0x1570>)
 8003f0e:	f009 fc75 	bl	800d7fc <siprintf>
 8003f12:	4b51      	ldr	r3, [pc, #324]	; (8004058 <GrandState_Verita+0x1590>)
 8003f14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f18:	9201      	str	r2, [sp, #4]
 8003f1a:	685a      	ldr	r2, [r3, #4]
 8003f1c:	9200      	str	r2, [sp, #0]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a45      	ldr	r2, [pc, #276]	; (8004038 <GrandState_Verita+0x1570>)
 8003f22:	2123      	movs	r1, #35	; 0x23
 8003f24:	200a      	movs	r0, #10
 8003f26:	f002 f8cd 	bl	80060c4 <ili9341_WriteStringNoBG>

					 sprintf(TextDispBuffer, WR_A_OPP); ili9341_WriteStringNoBG(10, 55, TextDispBuffer, Font16, cl_WHITE);
 8003f2a:	494f      	ldr	r1, [pc, #316]	; (8004068 <GrandState_Verita+0x15a0>)
 8003f2c:	4842      	ldr	r0, [pc, #264]	; (8004038 <GrandState_Verita+0x1570>)
 8003f2e:	f009 fc65 	bl	800d7fc <siprintf>
 8003f32:	4b49      	ldr	r3, [pc, #292]	; (8004058 <GrandState_Verita+0x1590>)
 8003f34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f38:	9201      	str	r2, [sp, #4]
 8003f3a:	685a      	ldr	r2, [r3, #4]
 8003f3c:	9200      	str	r2, [sp, #0]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a3d      	ldr	r2, [pc, #244]	; (8004038 <GrandState_Verita+0x1570>)
 8003f42:	2137      	movs	r1, #55	; 0x37
 8003f44:	200a      	movs	r0, #10
 8003f46:	f002 f8bd 	bl	80060c4 <ili9341_WriteStringNoBG>

					 sprintf(TextDispBuffer, WR_A_OOD); ili9341_WriteStringNoBG(10, 75, TextDispBuffer, Font16, cl_WHITE);
 8003f4a:	4948      	ldr	r1, [pc, #288]	; (800406c <GrandState_Verita+0x15a4>)
 8003f4c:	483a      	ldr	r0, [pc, #232]	; (8004038 <GrandState_Verita+0x1570>)
 8003f4e:	f009 fc55 	bl	800d7fc <siprintf>
 8003f52:	4b41      	ldr	r3, [pc, #260]	; (8004058 <GrandState_Verita+0x1590>)
 8003f54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f58:	9201      	str	r2, [sp, #4]
 8003f5a:	685a      	ldr	r2, [r3, #4]
 8003f5c:	9200      	str	r2, [sp, #0]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a35      	ldr	r2, [pc, #212]	; (8004038 <GrandState_Verita+0x1570>)
 8003f62:	214b      	movs	r1, #75	; 0x4b
 8003f64:	200a      	movs	r0, #10
 8003f66:	f002 f8ad 	bl	80060c4 <ili9341_WriteStringNoBG>

					 sprintf(TextDispBuffer, WR_B_PUPDR); ili9341_WriteStringNoBG(10, 95, TextDispBuffer, Font16, cl_WHITE);
 8003f6a:	4941      	ldr	r1, [pc, #260]	; (8004070 <GrandState_Verita+0x15a8>)
 8003f6c:	4832      	ldr	r0, [pc, #200]	; (8004038 <GrandState_Verita+0x1570>)
 8003f6e:	f009 fc45 	bl	800d7fc <siprintf>
 8003f72:	4b39      	ldr	r3, [pc, #228]	; (8004058 <GrandState_Verita+0x1590>)
 8003f74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f78:	9201      	str	r2, [sp, #4]
 8003f7a:	685a      	ldr	r2, [r3, #4]
 8003f7c:	9200      	str	r2, [sp, #0]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a2d      	ldr	r2, [pc, #180]	; (8004038 <GrandState_Verita+0x1570>)
 8003f82:	215f      	movs	r1, #95	; 0x5f
 8003f84:	200a      	movs	r0, #10
 8003f86:	f002 f89d 	bl	80060c4 <ili9341_WriteStringNoBG>

					 sprintf(TextDispBuffer, WR_B_OPP); ili9341_WriteStringNoBG(10, 115, TextDispBuffer, Font16, cl_WHITE);
 8003f8a:	493b      	ldr	r1, [pc, #236]	; (8004078 <GrandState_Verita+0x15b0>)
 8003f8c:	482a      	ldr	r0, [pc, #168]	; (8004038 <GrandState_Verita+0x1570>)
 8003f8e:	f009 fc35 	bl	800d7fc <siprintf>
 8003f92:	4b31      	ldr	r3, [pc, #196]	; (8004058 <GrandState_Verita+0x1590>)
 8003f94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f98:	9201      	str	r2, [sp, #4]
 8003f9a:	685a      	ldr	r2, [r3, #4]
 8003f9c:	9200      	str	r2, [sp, #0]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a25      	ldr	r2, [pc, #148]	; (8004038 <GrandState_Verita+0x1570>)
 8003fa2:	2173      	movs	r1, #115	; 0x73
 8003fa4:	200a      	movs	r0, #10
 8003fa6:	f002 f88d 	bl	80060c4 <ili9341_WriteStringNoBG>

					 sprintf(TextDispBuffer, WR_B_OOD); ili9341_WriteStringNoBG(10, 135, TextDispBuffer, Font16, cl_WHITE);
 8003faa:	4934      	ldr	r1, [pc, #208]	; (800407c <GrandState_Verita+0x15b4>)
 8003fac:	4822      	ldr	r0, [pc, #136]	; (8004038 <GrandState_Verita+0x1570>)
 8003fae:	f009 fc25 	bl	800d7fc <siprintf>
 8003fb2:	4b29      	ldr	r3, [pc, #164]	; (8004058 <GrandState_Verita+0x1590>)
 8003fb4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003fb8:	9201      	str	r2, [sp, #4]
 8003fba:	685a      	ldr	r2, [r3, #4]
 8003fbc:	9200      	str	r2, [sp, #0]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a1d      	ldr	r2, [pc, #116]	; (8004038 <GrandState_Verita+0x1570>)
 8003fc2:	2187      	movs	r1, #135	; 0x87
 8003fc4:	200a      	movs	r0, #10
 8003fc6:	f002 f87d 	bl	80060c4 <ili9341_WriteStringNoBG>

					 sprintf(TextDispBuffer, WR_C_PUPDR); ili9341_WriteStringNoBG(10, 155, TextDispBuffer, Font16, cl_WHITE);
 8003fca:	492d      	ldr	r1, [pc, #180]	; (8004080 <GrandState_Verita+0x15b8>)
 8003fcc:	481a      	ldr	r0, [pc, #104]	; (8004038 <GrandState_Verita+0x1570>)
 8003fce:	f009 fc15 	bl	800d7fc <siprintf>
 8003fd2:	4b21      	ldr	r3, [pc, #132]	; (8004058 <GrandState_Verita+0x1590>)
 8003fd4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003fd8:	9201      	str	r2, [sp, #4]
 8003fda:	685a      	ldr	r2, [r3, #4]
 8003fdc:	9200      	str	r2, [sp, #0]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a15      	ldr	r2, [pc, #84]	; (8004038 <GrandState_Verita+0x1570>)
 8003fe2:	219b      	movs	r1, #155	; 0x9b
 8003fe4:	200a      	movs	r0, #10
 8003fe6:	f002 f86d 	bl	80060c4 <ili9341_WriteStringNoBG>

					 sprintf(TextDispBuffer, WR_C_OPP); ili9341_WriteStringNoBG(10, 175, TextDispBuffer, Font16, cl_WHITE);
 8003fea:	4927      	ldr	r1, [pc, #156]	; (8004088 <GrandState_Verita+0x15c0>)
 8003fec:	4812      	ldr	r0, [pc, #72]	; (8004038 <GrandState_Verita+0x1570>)
 8003fee:	f009 fc05 	bl	800d7fc <siprintf>
 8003ff2:	4b19      	ldr	r3, [pc, #100]	; (8004058 <GrandState_Verita+0x1590>)
 8003ff4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ff8:	9201      	str	r2, [sp, #4]
 8003ffa:	685a      	ldr	r2, [r3, #4]
 8003ffc:	9200      	str	r2, [sp, #0]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a0d      	ldr	r2, [pc, #52]	; (8004038 <GrandState_Verita+0x1570>)
 8004002:	21af      	movs	r1, #175	; 0xaf
 8004004:	200a      	movs	r0, #10
 8004006:	f002 f85d 	bl	80060c4 <ili9341_WriteStringNoBG>

					 sprintf(TextDispBuffer, WR_C_OOD); ili9341_WriteStringNoBG(10, 195, TextDispBuffer, Font16, cl_WHITE);
 800400a:	4920      	ldr	r1, [pc, #128]	; (800408c <GrandState_Verita+0x15c4>)
 800400c:	480a      	ldr	r0, [pc, #40]	; (8004038 <GrandState_Verita+0x1570>)
 800400e:	f009 fbf5 	bl	800d7fc <siprintf>
 8004012:	4b11      	ldr	r3, [pc, #68]	; (8004058 <GrandState_Verita+0x1590>)
 8004014:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004018:	9201      	str	r2, [sp, #4]
 800401a:	685a      	ldr	r2, [r3, #4]
 800401c:	9200      	str	r2, [sp, #0]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a05      	ldr	r2, [pc, #20]	; (8004038 <GrandState_Verita+0x1570>)
 8004022:	21c3      	movs	r1, #195	; 0xc3
 8004024:	200a      	movs	r0, #10
 8004026:	f002 f84d 	bl	80060c4 <ili9341_WriteStringNoBG>
 800402a:	e031      	b.n	8004090 <GrandState_Verita+0x15c8>
 800402c:	200008a8 	.word	0x200008a8
 8004030:	20000614 	.word	0x20000614
 8004034:	080100cc 	.word	0x080100cc
 8004038:	200006b8 	.word	0x200006b8
 800403c:	20000238 	.word	0x20000238
 8004040:	20000894 	.word	0x20000894
 8004044:	0800ff68 	.word	0x0800ff68
 8004048:	080100dc 	.word	0x080100dc
 800404c:	20000228 	.word	0x20000228
 8004050:	080100e8 	.word	0x080100e8
 8004054:	080100f0 	.word	0x080100f0
 8004058:	20000230 	.word	0x20000230
 800405c:	20000784 	.word	0x20000784
 8004060:	2000005c 	.word	0x2000005c
 8004064:	20000008 	.word	0x20000008
 8004068:	200000bc 	.word	0x200000bc
 800406c:	2000011c 	.word	0x2000011c
 8004070:	2000007c 	.word	0x2000007c
 8004074:	2000001c 	.word	0x2000001c
 8004078:	200000dc 	.word	0x200000dc
 800407c:	2000013c 	.word	0x2000013c
 8004080:	2000009c 	.word	0x2000009c
 8004084:	2000003c 	.word	0x2000003c
 8004088:	200000fc 	.word	0x200000fc
 800408c:	2000015c 	.word	0x2000015c

					VRB_CL.Mark.Flag_ger = 0;
 8004090:	4b6a      	ldr	r3, [pc, #424]	; (800423c <GrandState_Verita+0x1774>)
 8004092:	2200      	movs	r2, #0
 8004094:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
					VRB_CL.Mark.Flag_next = 0;
 8004098:	4b68      	ldr	r3, [pc, #416]	; (800423c <GrandState_Verita+0x1774>)
 800409a:	2200      	movs	r2, #0
 800409c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
					GrandState = gpio_chk;
 80040a0:	4b67      	ldr	r3, [pc, #412]	; (8004240 <GrandState_Verita+0x1778>)
 80040a2:	220e      	movs	r2, #14
 80040a4:	701a      	strb	r2, [r3, #0]
				}

				//// Buzzer scream
				buzzr.flag = 3;
 80040a6:	4b67      	ldr	r3, [pc, #412]	; (8004244 <GrandState_Verita+0x177c>)
 80040a8:	2203      	movs	r2, #3
 80040aa:	701a      	strb	r2, [r3, #0]
				buzzr.priod_up = 300;
 80040ac:	4b65      	ldr	r3, [pc, #404]	; (8004244 <GrandState_Verita+0x177c>)
 80040ae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80040b2:	805a      	strh	r2, [r3, #2]
				buzzer_scream_cnt();
 80040b4:	f7fe fc90 	bl	80029d8 <buzzer_scream_cnt>

				////soft reset
				HAL_GPIO_WritePin(client_NRST_GPIO_Port, client_NRST_Pin, GPIO_PIN_SET);
 80040b8:	2201      	movs	r2, #1
 80040ba:	2140      	movs	r1, #64	; 0x40
 80040bc:	4862      	ldr	r0, [pc, #392]	; (8004248 <GrandState_Verita+0x1780>)
 80040be:	f003 fb7b 	bl	80077b8 <HAL_GPIO_WritePin>
				HAL_Delay(300);
 80040c2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80040c6:	f002 fc95 	bl	80069f4 <HAL_Delay>
				HAL_GPIO_WritePin(client_NRST_GPIO_Port, client_NRST_Pin, GPIO_PIN_RESET);
 80040ca:	2200      	movs	r2, #0
 80040cc:	2140      	movs	r1, #64	; 0x40
 80040ce:	485e      	ldr	r0, [pc, #376]	; (8004248 <GrandState_Verita+0x1780>)
 80040d0:	f003 fb72 	bl	80077b8 <HAL_GPIO_WritePin>

				GrandState = gpio_chk;
 80040d4:	4b5a      	ldr	r3, [pc, #360]	; (8004240 <GrandState_Verita+0x1778>)
 80040d6:	220e      	movs	r2, #14
 80040d8:	701a      	strb	r2, [r3, #0]
 80040da:	e031      	b.n	8004140 <GrandState_Verita+0x1678>
			}
			else if(HAL_GetTick() >= gScr.timelog){ //timeout connection
 80040dc:	f002 fc7e 	bl	80069dc <HAL_GetTick>
 80040e0:	4602      	mov	r2, r0
 80040e2:	4b5a      	ldr	r3, [pc, #360]	; (800424c <GrandState_Verita+0x1784>)
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d32a      	bcc.n	8004140 <GrandState_Verita+0x1678>

				sprintf(TextDispBuffer,"Connection");
 80040ea:	4959      	ldr	r1, [pc, #356]	; (8004250 <GrandState_Verita+0x1788>)
 80040ec:	4859      	ldr	r0, [pc, #356]	; (8004254 <GrandState_Verita+0x178c>)
 80040ee:	f009 fb85 	bl	800d7fc <siprintf>
				ili9341_WriteStringNoBG(80, 50, TextDispBuffer, Font20, cl_WHITE);
 80040f2:	4b59      	ldr	r3, [pc, #356]	; (8004258 <GrandState_Verita+0x1790>)
 80040f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80040f8:	9201      	str	r2, [sp, #4]
 80040fa:	685a      	ldr	r2, [r3, #4]
 80040fc:	9200      	str	r2, [sp, #0]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a54      	ldr	r2, [pc, #336]	; (8004254 <GrandState_Verita+0x178c>)
 8004102:	2132      	movs	r1, #50	; 0x32
 8004104:	2050      	movs	r0, #80	; 0x50
 8004106:	f001 ffdd 	bl	80060c4 <ili9341_WriteStringNoBG>
				sprintf(TextDispBuffer,"Timeout");
 800410a:	4954      	ldr	r1, [pc, #336]	; (800425c <GrandState_Verita+0x1794>)
 800410c:	4851      	ldr	r0, [pc, #324]	; (8004254 <GrandState_Verita+0x178c>)
 800410e:	f009 fb75 	bl	800d7fc <siprintf>
				ili9341_WriteStringNoBG(95, 75, TextDispBuffer, Font20, cl_WHITE);
 8004112:	4b51      	ldr	r3, [pc, #324]	; (8004258 <GrandState_Verita+0x1790>)
 8004114:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004118:	9201      	str	r2, [sp, #4]
 800411a:	685a      	ldr	r2, [r3, #4]
 800411c:	9200      	str	r2, [sp, #0]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a4c      	ldr	r2, [pc, #304]	; (8004254 <GrandState_Verita+0x178c>)
 8004122:	214b      	movs	r1, #75	; 0x4b
 8004124:	205f      	movs	r0, #95	; 0x5f
 8004126:	f001 ffcd 	bl	80060c4 <ili9341_WriteStringNoBG>
				VRB_CL.Mark.Flag_ger = 0;
 800412a:	4b44      	ldr	r3, [pc, #272]	; (800423c <GrandState_Verita+0x1774>)
 800412c:	2200      	movs	r2, #0
 800412e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
				VRB_CL.Mark.Flag_next = 0;
 8004132:	4b42      	ldr	r3, [pc, #264]	; (800423c <GrandState_Verita+0x1774>)
 8004134:	2200      	movs	r2, #0
 8004136:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
				GrandState = gpio_chk;
 800413a:	4b41      	ldr	r3, [pc, #260]	; (8004240 <GrandState_Verita+0x1778>)
 800413c:	220e      	movs	r2, #14
 800413e:	701a      	strb	r2, [r3, #0]
			}else{}

			k_flag.cnt = 0;
 8004140:	4b47      	ldr	r3, [pc, #284]	; (8004260 <GrandState_Verita+0x1798>)
 8004142:	2200      	movs	r2, #0
 8004144:	709a      	strb	r2, [r3, #2]
			break; //// pre_gpio_chk
 8004146:	f000 beb4 	b.w	8004eb2 <GrandState_Verita+0x23ea>

		case gpio_chk:
			stboxp.choice_set = bpoxy_def;
 800414a:	4b46      	ldr	r3, [pc, #280]	; (8004264 <GrandState_Verita+0x179c>)
 800414c:	2200      	movs	r2, #0
 800414e:	705a      	strb	r2, [r3, #1]


			sprintf(TextDispBuffer,"%2.1f C", (client_temp_mcuCC < 0) ? 0 : client_temp_mcuCC);
 8004150:	4b45      	ldr	r3, [pc, #276]	; (8004268 <GrandState_Verita+0x17a0>)
 8004152:	edd3 7a00 	vldr	s15, [r3]
 8004156:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800415a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800415e:	d504      	bpl.n	800416a <GrandState_Verita+0x16a2>
 8004160:	f04f 0200 	mov.w	r2, #0
 8004164:	f04f 0300 	mov.w	r3, #0
 8004168:	e006      	b.n	8004178 <GrandState_Verita+0x16b0>
 800416a:	4b3f      	ldr	r3, [pc, #252]	; (8004268 <GrandState_Verita+0x17a0>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4618      	mov	r0, r3
 8004170:	f7fc f9f2 	bl	8000558 <__aeabi_f2d>
 8004174:	4602      	mov	r2, r0
 8004176:	460b      	mov	r3, r1
 8004178:	493c      	ldr	r1, [pc, #240]	; (800426c <GrandState_Verita+0x17a4>)
 800417a:	4836      	ldr	r0, [pc, #216]	; (8004254 <GrandState_Verita+0x178c>)
 800417c:	f009 fb3e 	bl	800d7fc <siprintf>
			if(client_temp_mcuCC < MCUTemp_treash){
 8004180:	4b39      	ldr	r3, [pc, #228]	; (8004268 <GrandState_Verita+0x17a0>)
 8004182:	edd3 7a00 	vldr	s15, [r3]
 8004186:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8004270 <GrandState_Verita+0x17a8>
 800418a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800418e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004192:	d50e      	bpl.n	80041b2 <GrandState_Verita+0x16ea>
					ili9341_WriteString(250, 190, TextDispBuffer, Font16, cl_LIGHTGREY, cl_BLACK);
 8004194:	4b37      	ldr	r3, [pc, #220]	; (8004274 <GrandState_Verita+0x17ac>)
 8004196:	2200      	movs	r2, #0
 8004198:	9202      	str	r2, [sp, #8]
 800419a:	f24c 6218 	movw	r2, #50712	; 0xc618
 800419e:	9201      	str	r2, [sp, #4]
 80041a0:	685a      	ldr	r2, [r3, #4]
 80041a2:	9200      	str	r2, [sp, #0]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a2b      	ldr	r2, [pc, #172]	; (8004254 <GrandState_Verita+0x178c>)
 80041a8:	21be      	movs	r1, #190	; 0xbe
 80041aa:	20fa      	movs	r0, #250	; 0xfa
 80041ac:	f001 ff3d 	bl	800602a <ili9341_WriteString>
 80041b0:	e00d      	b.n	80041ce <GrandState_Verita+0x1706>
			}else{
					ili9341_WriteString(250, 190, TextDispBuffer, Font16, cl_RED, cl_BLACK);
 80041b2:	4b30      	ldr	r3, [pc, #192]	; (8004274 <GrandState_Verita+0x17ac>)
 80041b4:	2200      	movs	r2, #0
 80041b6:	9202      	str	r2, [sp, #8]
 80041b8:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80041bc:	9201      	str	r2, [sp, #4]
 80041be:	685a      	ldr	r2, [r3, #4]
 80041c0:	9200      	str	r2, [sp, #0]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a23      	ldr	r2, [pc, #140]	; (8004254 <GrandState_Verita+0x178c>)
 80041c6:	21be      	movs	r1, #190	; 0xbe
 80041c8:	20fa      	movs	r0, #250	; 0xfa
 80041ca:	f001 ff2e 	bl	800602a <ili9341_WriteString>
			}

			sprintf(TextDispBuffer,"%08x", (uint)VRB_CL.Mark.FirmwareVer);
 80041ce:	4b1b      	ldr	r3, [pc, #108]	; (800423c <GrandState_Verita+0x1774>)
 80041d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041d2:	461a      	mov	r2, r3
 80041d4:	4928      	ldr	r1, [pc, #160]	; (8004278 <GrandState_Verita+0x17b0>)
 80041d6:	481f      	ldr	r0, [pc, #124]	; (8004254 <GrandState_Verita+0x178c>)
 80041d8:	f009 fb10 	bl	800d7fc <siprintf>
			ili9341_WriteStringNoBG(250, 225, TextDispBuffer, Font12, cl_WHITE);
 80041dc:	4b27      	ldr	r3, [pc, #156]	; (800427c <GrandState_Verita+0x17b4>)
 80041de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80041e2:	9201      	str	r2, [sp, #4]
 80041e4:	685a      	ldr	r2, [r3, #4]
 80041e6:	9200      	str	r2, [sp, #0]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a1a      	ldr	r2, [pc, #104]	; (8004254 <GrandState_Verita+0x178c>)
 80041ec:	21e1      	movs	r1, #225	; 0xe1
 80041ee:	20fa      	movs	r0, #250	; 0xfa
 80041f0:	f001 ff68 	bl	80060c4 <ili9341_WriteStringNoBG>


			if(k_flag.cnt && stboxp.ch_is == 1){ //// Back to lobby
 80041f4:	4b1a      	ldr	r3, [pc, #104]	; (8004260 <GrandState_Verita+0x1798>)
 80041f6:	789b      	ldrb	r3, [r3, #2]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	f000 864f 	beq.w	8004e9c <GrandState_Verita+0x23d4>
 80041fe:	4b19      	ldr	r3, [pc, #100]	; (8004264 <GrandState_Verita+0x179c>)
 8004200:	789b      	ldrb	r3, [r3, #2]
 8004202:	2b01      	cmp	r3, #1
 8004204:	f040 864a 	bne.w	8004e9c <GrandState_Verita+0x23d4>
				GrandState = pre_lobby;
 8004208:	4b0d      	ldr	r3, [pc, #52]	; (8004240 <GrandState_Verita+0x1778>)
 800420a:	2201      	movs	r2, #1
 800420c:	701a      	strb	r2, [r3, #0]
				k_flag.cnt = 0;
 800420e:	4b14      	ldr	r3, [pc, #80]	; (8004260 <GrandState_Verita+0x1798>)
 8004210:	2200      	movs	r2, #0
 8004212:	709a      	strb	r2, [r3, #2]
				VRB_CL.Mark.FirmwareVer = 0x00; // clear if nextstep break
 8004214:	4b09      	ldr	r3, [pc, #36]	; (800423c <GrandState_Verita+0x1774>)
 8004216:	2200      	movs	r2, #0
 8004218:	649a      	str	r2, [r3, #72]	; 0x48
				VRB_CL.Mark.cputemp = 0; //// reset temp, prevent old data show
 800421a:	4b08      	ldr	r3, [pc, #32]	; (800423c <GrandState_Verita+0x1774>)
 800421c:	2200      	movs	r2, #0
 800421e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
				resetgpio_char();
 8004222:	f000 fed7 	bl	8004fd4 <resetgpio_char>
				gScr.fullflag = 0;
 8004226:	4b09      	ldr	r3, [pc, #36]	; (800424c <GrandState_Verita+0x1784>)
 8004228:	2200      	movs	r2, #0
 800422a:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(RelayClient_GPIO_Port, RelayClient_Pin, GPIO_PIN_RESET);
 800422c:	2200      	movs	r2, #0
 800422e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004232:	4805      	ldr	r0, [pc, #20]	; (8004248 <GrandState_Verita+0x1780>)
 8004234:	f003 fac0 	bl	80077b8 <HAL_GPIO_WritePin>
				}
			break; //gpio_chk
 8004238:	f000 be30 	b.w	8004e9c <GrandState_Verita+0x23d4>
 800423c:	20000784 	.word	0x20000784
 8004240:	20000006 	.word	0x20000006
 8004244:	20000878 	.word	0x20000878
 8004248:	40020800 	.word	0x40020800
 800424c:	20000894 	.word	0x20000894
 8004250:	080100fc 	.word	0x080100fc
 8004254:	200006b8 	.word	0x200006b8
 8004258:	20000238 	.word	0x20000238
 800425c:	08010108 	.word	0x08010108
 8004260:	20000890 	.word	0x20000890
 8004264:	200008a8 	.word	0x200008a8
 8004268:	200007f4 	.word	0x200007f4
 800426c:	08010110 	.word	0x08010110
 8004270:	42700000 	.word	0x42700000
 8004274:	20000230 	.word	0x20000230
 8004278:	08010118 	.word	0x08010118
 800427c:	20000228 	.word	0x20000228

	case pre_monitor:
		stboxp.choice_set = bpoxy_def;
 8004280:	4b96      	ldr	r3, [pc, #600]	; (80044dc <GrandState_Verita+0x1a14>)
 8004282:	2200      	movs	r2, #0
 8004284:	705a      	strb	r2, [r3, #1]
		ili9341_FillRect(0, 30, 320, 210, cl_BLACK);
 8004286:	2300      	movs	r3, #0
 8004288:	9300      	str	r3, [sp, #0]
 800428a:	23d2      	movs	r3, #210	; 0xd2
 800428c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004290:	211e      	movs	r1, #30
 8004292:	2000      	movs	r0, #0
 8004294:	f001 fd20 	bl	8005cd8 <ili9341_FillRect>
		ili9341_FillRect(0, 0, 320, 30, cl_BLUE);
 8004298:	231f      	movs	r3, #31
 800429a:	9300      	str	r3, [sp, #0]
 800429c:	231e      	movs	r3, #30
 800429e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80042a2:	2100      	movs	r1, #0
 80042a4:	2000      	movs	r0, #0
 80042a6:	f001 fd17 	bl	8005cd8 <ili9341_FillRect>

		//// Auto ON relay
		HAL_GPIO_WritePin(RelayClient_GPIO_Port, RelayClient_Pin, GPIO_PIN_SET);
 80042aa:	2201      	movs	r2, #1
 80042ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80042b0:	488b      	ldr	r0, [pc, #556]	; (80044e0 <GrandState_Verita+0x1a18>)
 80042b2:	f003 fa81 	bl	80077b8 <HAL_GPIO_WritePin>

		sprintf(TextDispBuffer,"PWR_Monitor");
 80042b6:	498b      	ldr	r1, [pc, #556]	; (80044e4 <GrandState_Verita+0x1a1c>)
 80042b8:	488b      	ldr	r0, [pc, #556]	; (80044e8 <GrandState_Verita+0x1a20>)
 80042ba:	f009 fa9f 	bl	800d7fc <siprintf>
		ili9341_WriteStringNoBG(80, 5, TextDispBuffer, Font20, cl_WHITE);
 80042be:	4b8b      	ldr	r3, [pc, #556]	; (80044ec <GrandState_Verita+0x1a24>)
 80042c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80042c4:	9201      	str	r2, [sp, #4]
 80042c6:	685a      	ldr	r2, [r3, #4]
 80042c8:	9200      	str	r2, [sp, #0]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a86      	ldr	r2, [pc, #536]	; (80044e8 <GrandState_Verita+0x1a20>)
 80042ce:	2105      	movs	r1, #5
 80042d0:	2050      	movs	r0, #80	; 0x50
 80042d2:	f001 fef7 	bl	80060c4 <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"<-Back");
 80042d6:	4986      	ldr	r1, [pc, #536]	; (80044f0 <GrandState_Verita+0x1a28>)
 80042d8:	4883      	ldr	r0, [pc, #524]	; (80044e8 <GrandState_Verita+0x1a20>)
 80042da:	f009 fa8f 	bl	800d7fc <siprintf>
		ili9341_WriteStringNoBG(30, 220, TextDispBuffer, Font16, cl_WHITE);
 80042de:	4b85      	ldr	r3, [pc, #532]	; (80044f4 <GrandState_Verita+0x1a2c>)
 80042e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80042e4:	9201      	str	r2, [sp, #4]
 80042e6:	685a      	ldr	r2, [r3, #4]
 80042e8:	9200      	str	r2, [sp, #0]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a7e      	ldr	r2, [pc, #504]	; (80044e8 <GrandState_Verita+0x1a20>)
 80042ee:	21dc      	movs	r1, #220	; 0xdc
 80042f0:	201e      	movs	r0, #30
 80042f2:	f001 fee7 	bl	80060c4 <ili9341_WriteStringNoBG>

		//sprintf(TextDispBuffer,"calib:%4X", inata.Calibra);
		//ili9341_WriteString(20, 30, TextDispBuffer, Font12, cl_GREENYELLOW, cl_BLACK);

		sprintf(TextDispBuffer,"5Vin:");
 80042f6:	4980      	ldr	r1, [pc, #512]	; (80044f8 <GrandState_Verita+0x1a30>)
 80042f8:	487b      	ldr	r0, [pc, #492]	; (80044e8 <GrandState_Verita+0x1a20>)
 80042fa:	f009 fa7f 	bl	800d7fc <siprintf>
		ili9341_WriteStringNoBG(15, 50, TextDispBuffer, Font16, cl_WHITE);
 80042fe:	4b7d      	ldr	r3, [pc, #500]	; (80044f4 <GrandState_Verita+0x1a2c>)
 8004300:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004304:	9201      	str	r2, [sp, #4]
 8004306:	685a      	ldr	r2, [r3, #4]
 8004308:	9200      	str	r2, [sp, #0]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a76      	ldr	r2, [pc, #472]	; (80044e8 <GrandState_Verita+0x1a20>)
 800430e:	2132      	movs	r1, #50	; 0x32
 8004310:	200f      	movs	r0, #15
 8004312:	f001 fed7 	bl	80060c4 <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"3V3:");
 8004316:	4979      	ldr	r1, [pc, #484]	; (80044fc <GrandState_Verita+0x1a34>)
 8004318:	4873      	ldr	r0, [pc, #460]	; (80044e8 <GrandState_Verita+0x1a20>)
 800431a:	f009 fa6f 	bl	800d7fc <siprintf>
		ili9341_WriteStringNoBG(15, 75, TextDispBuffer, Font16, cl_WHITE);
 800431e:	4b75      	ldr	r3, [pc, #468]	; (80044f4 <GrandState_Verita+0x1a2c>)
 8004320:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004324:	9201      	str	r2, [sp, #4]
 8004326:	685a      	ldr	r2, [r3, #4]
 8004328:	9200      	str	r2, [sp, #0]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a6e      	ldr	r2, [pc, #440]	; (80044e8 <GrandState_Verita+0x1a20>)
 800432e:	214b      	movs	r1, #75	; 0x4b
 8004330:	200f      	movs	r0, #15
 8004332:	f001 fec7 	bl	80060c4 <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"I MCU:");
 8004336:	4972      	ldr	r1, [pc, #456]	; (8004500 <GrandState_Verita+0x1a38>)
 8004338:	486b      	ldr	r0, [pc, #428]	; (80044e8 <GrandState_Verita+0x1a20>)
 800433a:	f009 fa5f 	bl	800d7fc <siprintf>
		ili9341_WriteStringNoBG(15, 100, TextDispBuffer, Font16, cl_WHITE);
 800433e:	4b6d      	ldr	r3, [pc, #436]	; (80044f4 <GrandState_Verita+0x1a2c>)
 8004340:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004344:	9201      	str	r2, [sp, #4]
 8004346:	685a      	ldr	r2, [r3, #4]
 8004348:	9200      	str	r2, [sp, #0]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a66      	ldr	r2, [pc, #408]	; (80044e8 <GrandState_Verita+0x1a20>)
 800434e:	2164      	movs	r1, #100	; 0x64
 8004350:	200f      	movs	r0, #15
 8004352:	f001 feb7 	bl	80060c4 <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"I Brd:");
 8004356:	496b      	ldr	r1, [pc, #428]	; (8004504 <GrandState_Verita+0x1a3c>)
 8004358:	4863      	ldr	r0, [pc, #396]	; (80044e8 <GrandState_Verita+0x1a20>)
 800435a:	f009 fa4f 	bl	800d7fc <siprintf>
		ili9341_WriteStringNoBG(15, 125, TextDispBuffer, Font16, cl_WHITE);
 800435e:	4b65      	ldr	r3, [pc, #404]	; (80044f4 <GrandState_Verita+0x1a2c>)
 8004360:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004364:	9201      	str	r2, [sp, #4]
 8004366:	685a      	ldr	r2, [r3, #4]
 8004368:	9200      	str	r2, [sp, #0]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a5e      	ldr	r2, [pc, #376]	; (80044e8 <GrandState_Verita+0x1a20>)
 800436e:	217d      	movs	r1, #125	; 0x7d
 8004370:	200f      	movs	r0, #15
 8004372:	f001 fea7 	bl	80060c4 <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"PWR");
 8004376:	4964      	ldr	r1, [pc, #400]	; (8004508 <GrandState_Verita+0x1a40>)
 8004378:	485b      	ldr	r0, [pc, #364]	; (80044e8 <GrandState_Verita+0x1a20>)
 800437a:	f009 fa3f 	bl	800d7fc <siprintf>
		ili9341_WriteStringNoBG(15, 150, TextDispBuffer, Font16, cl_WHITE);
 800437e:	4b5d      	ldr	r3, [pc, #372]	; (80044f4 <GrandState_Verita+0x1a2c>)
 8004380:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004384:	9201      	str	r2, [sp, #4]
 8004386:	685a      	ldr	r2, [r3, #4]
 8004388:	9200      	str	r2, [sp, #0]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a56      	ldr	r2, [pc, #344]	; (80044e8 <GrandState_Verita+0x1a20>)
 800438e:	2196      	movs	r1, #150	; 0x96
 8004390:	200f      	movs	r0, #15
 8004392:	f001 fe97 	bl	80060c4 <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"MCU");
 8004396:	495d      	ldr	r1, [pc, #372]	; (800450c <GrandState_Verita+0x1a44>)
 8004398:	4853      	ldr	r0, [pc, #332]	; (80044e8 <GrandState_Verita+0x1a20>)
 800439a:	f009 fa2f 	bl	800d7fc <siprintf>
		ili9341_WriteStringNoBG(60, 150, TextDispBuffer, Font12, cl_WHITE);
 800439e:	4b5c      	ldr	r3, [pc, #368]	; (8004510 <GrandState_Verita+0x1a48>)
 80043a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80043a4:	9201      	str	r2, [sp, #4]
 80043a6:	685a      	ldr	r2, [r3, #4]
 80043a8:	9200      	str	r2, [sp, #0]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a4e      	ldr	r2, [pc, #312]	; (80044e8 <GrandState_Verita+0x1a20>)
 80043ae:	2196      	movs	r1, #150	; 0x96
 80043b0:	203c      	movs	r0, #60	; 0x3c
 80043b2:	f001 fe87 	bl	80060c4 <ili9341_WriteStringNoBG>
		sprintf(TextDispBuffer,"Brd");
 80043b6:	4957      	ldr	r1, [pc, #348]	; (8004514 <GrandState_Verita+0x1a4c>)
 80043b8:	484b      	ldr	r0, [pc, #300]	; (80044e8 <GrandState_Verita+0x1a20>)
 80043ba:	f009 fa1f 	bl	800d7fc <siprintf>
		ili9341_WriteStringNoBG(60, 170, TextDispBuffer, Font12, cl_WHITE);
 80043be:	4b54      	ldr	r3, [pc, #336]	; (8004510 <GrandState_Verita+0x1a48>)
 80043c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80043c4:	9201      	str	r2, [sp, #4]
 80043c6:	685a      	ldr	r2, [r3, #4]
 80043c8:	9200      	str	r2, [sp, #0]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a46      	ldr	r2, [pc, #280]	; (80044e8 <GrandState_Verita+0x1a20>)
 80043ce:	21aa      	movs	r1, #170	; 0xaa
 80043d0:	203c      	movs	r0, #60	; 0x3c
 80043d2:	f001 fe77 	bl	80060c4 <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"MCP3208");
 80043d6:	4950      	ldr	r1, [pc, #320]	; (8004518 <GrandState_Verita+0x1a50>)
 80043d8:	4843      	ldr	r0, [pc, #268]	; (80044e8 <GrandState_Verita+0x1a20>)
 80043da:	f009 fa0f 	bl	800d7fc <siprintf>
		ili9341_WriteStringNoBG(220, 40, TextDispBuffer, Font16, cl_WHITE);
 80043de:	4b45      	ldr	r3, [pc, #276]	; (80044f4 <GrandState_Verita+0x1a2c>)
 80043e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80043e4:	9201      	str	r2, [sp, #4]
 80043e6:	685a      	ldr	r2, [r3, #4]
 80043e8:	9200      	str	r2, [sp, #0]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a3e      	ldr	r2, [pc, #248]	; (80044e8 <GrandState_Verita+0x1a20>)
 80043ee:	2128      	movs	r1, #40	; 0x28
 80043f0:	20dc      	movs	r0, #220	; 0xdc
 80043f2:	f001 fe67 	bl	80060c4 <ili9341_WriteStringNoBG>
		sprintf(TextDispBuffer,"Read Volt V");
 80043f6:	4949      	ldr	r1, [pc, #292]	; (800451c <GrandState_Verita+0x1a54>)
 80043f8:	483b      	ldr	r0, [pc, #236]	; (80044e8 <GrandState_Verita+0x1a20>)
 80043fa:	f009 f9ff 	bl	800d7fc <siprintf>
		ili9341_WriteStringNoBG(220, 56, TextDispBuffer, Font12, cl_WHITE);
 80043fe:	4b44      	ldr	r3, [pc, #272]	; (8004510 <GrandState_Verita+0x1a48>)
 8004400:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004404:	9201      	str	r2, [sp, #4]
 8004406:	685a      	ldr	r2, [r3, #4]
 8004408:	9200      	str	r2, [sp, #0]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a36      	ldr	r2, [pc, #216]	; (80044e8 <GrandState_Verita+0x1a20>)
 800440e:	2138      	movs	r1, #56	; 0x38
 8004410:	20dc      	movs	r0, #220	; 0xdc
 8004412:	f001 fe57 	bl	80060c4 <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"mV"); ili9341_WriteStringNoBG(150, 54, TextDispBuffer, Font12, cl_WHITE);
 8004416:	4942      	ldr	r1, [pc, #264]	; (8004520 <GrandState_Verita+0x1a58>)
 8004418:	4833      	ldr	r0, [pc, #204]	; (80044e8 <GrandState_Verita+0x1a20>)
 800441a:	f009 f9ef 	bl	800d7fc <siprintf>
 800441e:	4b3c      	ldr	r3, [pc, #240]	; (8004510 <GrandState_Verita+0x1a48>)
 8004420:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004424:	9201      	str	r2, [sp, #4]
 8004426:	685a      	ldr	r2, [r3, #4]
 8004428:	9200      	str	r2, [sp, #0]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a2e      	ldr	r2, [pc, #184]	; (80044e8 <GrandState_Verita+0x1a20>)
 800442e:	2136      	movs	r1, #54	; 0x36
 8004430:	2096      	movs	r0, #150	; 0x96
 8004432:	f001 fe47 	bl	80060c4 <ili9341_WriteStringNoBG>
		sprintf(TextDispBuffer,"mV"); ili9341_WriteStringNoBG(150, 79, TextDispBuffer, Font12, cl_WHITE);
 8004436:	493a      	ldr	r1, [pc, #232]	; (8004520 <GrandState_Verita+0x1a58>)
 8004438:	482b      	ldr	r0, [pc, #172]	; (80044e8 <GrandState_Verita+0x1a20>)
 800443a:	f009 f9df 	bl	800d7fc <siprintf>
 800443e:	4b34      	ldr	r3, [pc, #208]	; (8004510 <GrandState_Verita+0x1a48>)
 8004440:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004444:	9201      	str	r2, [sp, #4]
 8004446:	685a      	ldr	r2, [r3, #4]
 8004448:	9200      	str	r2, [sp, #0]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a26      	ldr	r2, [pc, #152]	; (80044e8 <GrandState_Verita+0x1a20>)
 800444e:	214f      	movs	r1, #79	; 0x4f
 8004450:	2096      	movs	r0, #150	; 0x96
 8004452:	f001 fe37 	bl	80060c4 <ili9341_WriteStringNoBG>
		sprintf(TextDispBuffer,"mA"); ili9341_WriteStringNoBG(150, 104, TextDispBuffer, Font12, cl_WHITE);
 8004456:	4933      	ldr	r1, [pc, #204]	; (8004524 <GrandState_Verita+0x1a5c>)
 8004458:	4823      	ldr	r0, [pc, #140]	; (80044e8 <GrandState_Verita+0x1a20>)
 800445a:	f009 f9cf 	bl	800d7fc <siprintf>
 800445e:	4b2c      	ldr	r3, [pc, #176]	; (8004510 <GrandState_Verita+0x1a48>)
 8004460:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004464:	9201      	str	r2, [sp, #4]
 8004466:	685a      	ldr	r2, [r3, #4]
 8004468:	9200      	str	r2, [sp, #0]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a1e      	ldr	r2, [pc, #120]	; (80044e8 <GrandState_Verita+0x1a20>)
 800446e:	2168      	movs	r1, #104	; 0x68
 8004470:	2096      	movs	r0, #150	; 0x96
 8004472:	f001 fe27 	bl	80060c4 <ili9341_WriteStringNoBG>
		sprintf(TextDispBuffer,"mA"); ili9341_WriteStringNoBG(150, 129, TextDispBuffer, Font12, cl_WHITE);
 8004476:	492b      	ldr	r1, [pc, #172]	; (8004524 <GrandState_Verita+0x1a5c>)
 8004478:	481b      	ldr	r0, [pc, #108]	; (80044e8 <GrandState_Verita+0x1a20>)
 800447a:	f009 f9bf 	bl	800d7fc <siprintf>
 800447e:	4b24      	ldr	r3, [pc, #144]	; (8004510 <GrandState_Verita+0x1a48>)
 8004480:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004484:	9201      	str	r2, [sp, #4]
 8004486:	685a      	ldr	r2, [r3, #4]
 8004488:	9200      	str	r2, [sp, #0]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a16      	ldr	r2, [pc, #88]	; (80044e8 <GrandState_Verita+0x1a20>)
 800448e:	2181      	movs	r1, #129	; 0x81
 8004490:	2096      	movs	r0, #150	; 0x96
 8004492:	f001 fe17 	bl	80060c4 <ili9341_WriteStringNoBG>
		sprintf(TextDispBuffer,"mW"); ili9341_WriteStringNoBG(170, 154, TextDispBuffer, Font12, cl_WHITE);
 8004496:	4924      	ldr	r1, [pc, #144]	; (8004528 <GrandState_Verita+0x1a60>)
 8004498:	4813      	ldr	r0, [pc, #76]	; (80044e8 <GrandState_Verita+0x1a20>)
 800449a:	f009 f9af 	bl	800d7fc <siprintf>
 800449e:	4b1c      	ldr	r3, [pc, #112]	; (8004510 <GrandState_Verita+0x1a48>)
 80044a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80044a4:	9201      	str	r2, [sp, #4]
 80044a6:	685a      	ldr	r2, [r3, #4]
 80044a8:	9200      	str	r2, [sp, #0]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a0e      	ldr	r2, [pc, #56]	; (80044e8 <GrandState_Verita+0x1a20>)
 80044ae:	219a      	movs	r1, #154	; 0x9a
 80044b0:	20aa      	movs	r0, #170	; 0xaa
 80044b2:	f001 fe07 	bl	80060c4 <ili9341_WriteStringNoBG>
		sprintf(TextDispBuffer,"mW"); ili9341_WriteStringNoBG(170, 174, TextDispBuffer, Font12, cl_WHITE);
 80044b6:	491c      	ldr	r1, [pc, #112]	; (8004528 <GrandState_Verita+0x1a60>)
 80044b8:	480b      	ldr	r0, [pc, #44]	; (80044e8 <GrandState_Verita+0x1a20>)
 80044ba:	f009 f99f 	bl	800d7fc <siprintf>
 80044be:	4b14      	ldr	r3, [pc, #80]	; (8004510 <GrandState_Verita+0x1a48>)
 80044c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80044c4:	9201      	str	r2, [sp, #4]
 80044c6:	685a      	ldr	r2, [r3, #4]
 80044c8:	9200      	str	r2, [sp, #0]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a06      	ldr	r2, [pc, #24]	; (80044e8 <GrandState_Verita+0x1a20>)
 80044ce:	21ae      	movs	r1, #174	; 0xae
 80044d0:	20aa      	movs	r0, #170	; 0xaa
 80044d2:	f001 fdf7 	bl	80060c4 <ili9341_WriteStringNoBG>

		for(register int t = 0; t <= 7; t++){
 80044d6:	2400      	movs	r4, #0
 80044d8:	e041      	b.n	800455e <GrandState_Verita+0x1a96>
 80044da:	bf00      	nop
 80044dc:	200008a8 	.word	0x200008a8
 80044e0:	40020800 	.word	0x40020800
 80044e4:	08010120 	.word	0x08010120
 80044e8:	200006b8 	.word	0x200006b8
 80044ec:	20000238 	.word	0x20000238
 80044f0:	0800ff60 	.word	0x0800ff60
 80044f4:	20000230 	.word	0x20000230
 80044f8:	0801012c 	.word	0x0801012c
 80044fc:	0800ffb4 	.word	0x0800ffb4
 8004500:	0800ffcc 	.word	0x0800ffcc
 8004504:	0800ffc4 	.word	0x0800ffc4
 8004508:	08010134 	.word	0x08010134
 800450c:	08010138 	.word	0x08010138
 8004510:	20000228 	.word	0x20000228
 8004514:	0801013c 	.word	0x0801013c
 8004518:	08010140 	.word	0x08010140
 800451c:	08010148 	.word	0x08010148
 8004520:	0800ffd4 	.word	0x0800ffd4
 8004524:	0800ffd8 	.word	0x0800ffd8
 8004528:	08010154 	.word	0x08010154
			sprintf(TextDispBuffer,"CH%d",t);
 800452c:	4622      	mov	r2, r4
 800452e:	49a1      	ldr	r1, [pc, #644]	; (80047b4 <GrandState_Verita+0x1cec>)
 8004530:	48a1      	ldr	r0, [pc, #644]	; (80047b8 <GrandState_Verita+0x1cf0>)
 8004532:	f009 f963 	bl	800d7fc <siprintf>
			ili9341_WriteStringNoBG(220, 75 + (12*t), TextDispBuffer, Font12, cl_YELLOW);
 8004536:	b2a3      	uxth	r3, r4
 8004538:	461a      	mov	r2, r3
 800453a:	0052      	lsls	r2, r2, #1
 800453c:	4413      	add	r3, r2
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	b29b      	uxth	r3, r3
 8004542:	334b      	adds	r3, #75	; 0x4b
 8004544:	b299      	uxth	r1, r3
 8004546:	4b9d      	ldr	r3, [pc, #628]	; (80047bc <GrandState_Verita+0x1cf4>)
 8004548:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800454c:	9201      	str	r2, [sp, #4]
 800454e:	685a      	ldr	r2, [r3, #4]
 8004550:	9200      	str	r2, [sp, #0]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a98      	ldr	r2, [pc, #608]	; (80047b8 <GrandState_Verita+0x1cf0>)
 8004556:	20dc      	movs	r0, #220	; 0xdc
 8004558:	f001 fdb4 	bl	80060c4 <ili9341_WriteStringNoBG>
		for(register int t = 0; t <= 7; t++){
 800455c:	3401      	adds	r4, #1
 800455e:	2c07      	cmp	r4, #7
 8004560:	dde4      	ble.n	800452c <GrandState_Verita+0x1a64>
		}

		sprintf(TextDispBuffer,"MCU_Temp:");
 8004562:	4997      	ldr	r1, [pc, #604]	; (80047c0 <GrandState_Verita+0x1cf8>)
 8004564:	4894      	ldr	r0, [pc, #592]	; (80047b8 <GrandState_Verita+0x1cf0>)
 8004566:	f009 f949 	bl	800d7fc <siprintf>
		ili9341_WriteString(20, 190, TextDispBuffer, Font12, cl_WHITE, cl_BLACK);
 800456a:	4b94      	ldr	r3, [pc, #592]	; (80047bc <GrandState_Verita+0x1cf4>)
 800456c:	2200      	movs	r2, #0
 800456e:	9202      	str	r2, [sp, #8]
 8004570:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004574:	9201      	str	r2, [sp, #4]
 8004576:	685a      	ldr	r2, [r3, #4]
 8004578:	9200      	str	r2, [sp, #0]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a8e      	ldr	r2, [pc, #568]	; (80047b8 <GrandState_Verita+0x1cf0>)
 800457e:	21be      	movs	r1, #190	; 0xbe
 8004580:	2014      	movs	r0, #20
 8004582:	f001 fd52 	bl	800602a <ili9341_WriteString>

		k_flag.cnt = 0; //// prevent over state jump
 8004586:	4b8f      	ldr	r3, [pc, #572]	; (80047c4 <GrandState_Verita+0x1cfc>)
 8004588:	2200      	movs	r2, #0
 800458a:	709a      	strb	r2, [r3, #2]
		GrandState = monitor;
 800458c:	4b8e      	ldr	r3, [pc, #568]	; (80047c8 <GrandState_Verita+0x1d00>)
 800458e:	220c      	movs	r2, #12
 8004590:	701a      	strb	r2, [r3, #0]
		break; //// pre monitor
 8004592:	f000 bc8e 	b.w	8004eb2 <GrandState_Verita+0x23ea>


	case monitor:
		stboxp.choice_set = bpoxy_def;
 8004596:	4b8d      	ldr	r3, [pc, #564]	; (80047cc <GrandState_Verita+0x1d04>)
 8004598:	2200      	movs	r2, #0
 800459a:	705a      	strb	r2, [r3, #1]
		simple_scr();
 800459c:	f7fd ffdc 	bl	8002558 <simple_scr>

		sprintf(TextDispBuffer,"%4d", inatb.Bus_V);
 80045a0:	4b8b      	ldr	r3, [pc, #556]	; (80047d0 <GrandState_Verita+0x1d08>)
 80045a2:	8a1b      	ldrh	r3, [r3, #16]
 80045a4:	461a      	mov	r2, r3
 80045a6:	498b      	ldr	r1, [pc, #556]	; (80047d4 <GrandState_Verita+0x1d0c>)
 80045a8:	4883      	ldr	r0, [pc, #524]	; (80047b8 <GrandState_Verita+0x1cf0>)
 80045aa:	f009 f927 	bl	800d7fc <siprintf>
		if(inatb.Bus_V < 2000){
 80045ae:	4b88      	ldr	r3, [pc, #544]	; (80047d0 <GrandState_Verita+0x1d08>)
 80045b0:	8a1b      	ldrh	r3, [r3, #16]
 80045b2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80045b6:	d20e      	bcs.n	80045d6 <GrandState_Verita+0x1b0e>
			ili9341_WriteString(90, 50, TextDispBuffer, Font16, cl_RED, cl_BLACK);
 80045b8:	4b87      	ldr	r3, [pc, #540]	; (80047d8 <GrandState_Verita+0x1d10>)
 80045ba:	2200      	movs	r2, #0
 80045bc:	9202      	str	r2, [sp, #8]
 80045be:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80045c2:	9201      	str	r2, [sp, #4]
 80045c4:	685a      	ldr	r2, [r3, #4]
 80045c6:	9200      	str	r2, [sp, #0]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a7b      	ldr	r2, [pc, #492]	; (80047b8 <GrandState_Verita+0x1cf0>)
 80045cc:	2132      	movs	r1, #50	; 0x32
 80045ce:	205a      	movs	r0, #90	; 0x5a
 80045d0:	f001 fd2b 	bl	800602a <ili9341_WriteString>
 80045d4:	e00d      	b.n	80045f2 <GrandState_Verita+0x1b2a>
		}else{
			ili9341_WriteString(90, 50, TextDispBuffer, Font16, cl_GREEN, cl_BLACK);
 80045d6:	4b80      	ldr	r3, [pc, #512]	; (80047d8 <GrandState_Verita+0x1d10>)
 80045d8:	2200      	movs	r2, #0
 80045da:	9202      	str	r2, [sp, #8]
 80045dc:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80045e0:	9201      	str	r2, [sp, #4]
 80045e2:	685a      	ldr	r2, [r3, #4]
 80045e4:	9200      	str	r2, [sp, #0]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a73      	ldr	r2, [pc, #460]	; (80047b8 <GrandState_Verita+0x1cf0>)
 80045ea:	2132      	movs	r1, #50	; 0x32
 80045ec:	205a      	movs	r0, #90	; 0x5a
 80045ee:	f001 fd1c 	bl	800602a <ili9341_WriteString>
		}

		sprintf(TextDispBuffer,"%4d", inata.Bus_V);
 80045f2:	4b7a      	ldr	r3, [pc, #488]	; (80047dc <GrandState_Verita+0x1d14>)
 80045f4:	8a1b      	ldrh	r3, [r3, #16]
 80045f6:	461a      	mov	r2, r3
 80045f8:	4976      	ldr	r1, [pc, #472]	; (80047d4 <GrandState_Verita+0x1d0c>)
 80045fa:	486f      	ldr	r0, [pc, #444]	; (80047b8 <GrandState_Verita+0x1cf0>)
 80045fc:	f009 f8fe 	bl	800d7fc <siprintf>
		if(inata.Bus_V < 2000){
 8004600:	4b76      	ldr	r3, [pc, #472]	; (80047dc <GrandState_Verita+0x1d14>)
 8004602:	8a1b      	ldrh	r3, [r3, #16]
 8004604:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004608:	d20e      	bcs.n	8004628 <GrandState_Verita+0x1b60>
			ili9341_WriteString(90, 75, TextDispBuffer, Font16, cl_RED, cl_BLACK);
 800460a:	4b73      	ldr	r3, [pc, #460]	; (80047d8 <GrandState_Verita+0x1d10>)
 800460c:	2200      	movs	r2, #0
 800460e:	9202      	str	r2, [sp, #8]
 8004610:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8004614:	9201      	str	r2, [sp, #4]
 8004616:	685a      	ldr	r2, [r3, #4]
 8004618:	9200      	str	r2, [sp, #0]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a66      	ldr	r2, [pc, #408]	; (80047b8 <GrandState_Verita+0x1cf0>)
 800461e:	214b      	movs	r1, #75	; 0x4b
 8004620:	205a      	movs	r0, #90	; 0x5a
 8004622:	f001 fd02 	bl	800602a <ili9341_WriteString>
 8004626:	e00d      	b.n	8004644 <GrandState_Verita+0x1b7c>
		}else{
			ili9341_WriteString(90, 75, TextDispBuffer, Font16, cl_GREEN, cl_BLACK);
 8004628:	4b6b      	ldr	r3, [pc, #428]	; (80047d8 <GrandState_Verita+0x1d10>)
 800462a:	2200      	movs	r2, #0
 800462c:	9202      	str	r2, [sp, #8]
 800462e:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8004632:	9201      	str	r2, [sp, #4]
 8004634:	685a      	ldr	r2, [r3, #4]
 8004636:	9200      	str	r2, [sp, #0]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a5f      	ldr	r2, [pc, #380]	; (80047b8 <GrandState_Verita+0x1cf0>)
 800463c:	214b      	movs	r1, #75	; 0x4b
 800463e:	205a      	movs	r0, #90	; 0x5a
 8004640:	f001 fcf3 	bl	800602a <ili9341_WriteString>
		}

		sprintf(TextDispBuffer,"%4d", inata.CURRENT);
 8004644:	4b65      	ldr	r3, [pc, #404]	; (80047dc <GrandState_Verita+0x1d14>)
 8004646:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800464a:	461a      	mov	r2, r3
 800464c:	4961      	ldr	r1, [pc, #388]	; (80047d4 <GrandState_Verita+0x1d0c>)
 800464e:	485a      	ldr	r0, [pc, #360]	; (80047b8 <GrandState_Verita+0x1cf0>)
 8004650:	f009 f8d4 	bl	800d7fc <siprintf>
		ili9341_WriteString(90, 100, TextDispBuffer, Font16, cl_CYAN, cl_BLACK);
 8004654:	4b60      	ldr	r3, [pc, #384]	; (80047d8 <GrandState_Verita+0x1d10>)
 8004656:	2200      	movs	r2, #0
 8004658:	9202      	str	r2, [sp, #8]
 800465a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800465e:	9201      	str	r2, [sp, #4]
 8004660:	685a      	ldr	r2, [r3, #4]
 8004662:	9200      	str	r2, [sp, #0]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a54      	ldr	r2, [pc, #336]	; (80047b8 <GrandState_Verita+0x1cf0>)
 8004668:	2164      	movs	r1, #100	; 0x64
 800466a:	205a      	movs	r0, #90	; 0x5a
 800466c:	f001 fcdd 	bl	800602a <ili9341_WriteString>
		sprintf(TextDispBuffer,"%4d", inatb.CURRENT);
 8004670:	4b57      	ldr	r3, [pc, #348]	; (80047d0 <GrandState_Verita+0x1d08>)
 8004672:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004676:	461a      	mov	r2, r3
 8004678:	4956      	ldr	r1, [pc, #344]	; (80047d4 <GrandState_Verita+0x1d0c>)
 800467a:	484f      	ldr	r0, [pc, #316]	; (80047b8 <GrandState_Verita+0x1cf0>)
 800467c:	f009 f8be 	bl	800d7fc <siprintf>
		ili9341_WriteString(90, 125, TextDispBuffer, Font16, cl_CYAN, cl_BLACK);
 8004680:	4b55      	ldr	r3, [pc, #340]	; (80047d8 <GrandState_Verita+0x1d10>)
 8004682:	2200      	movs	r2, #0
 8004684:	9202      	str	r2, [sp, #8]
 8004686:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800468a:	9201      	str	r2, [sp, #4]
 800468c:	685a      	ldr	r2, [r3, #4]
 800468e:	9200      	str	r2, [sp, #0]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a49      	ldr	r2, [pc, #292]	; (80047b8 <GrandState_Verita+0x1cf0>)
 8004694:	217d      	movs	r1, #125	; 0x7d
 8004696:	205a      	movs	r0, #90	; 0x5a
 8004698:	f001 fcc7 	bl	800602a <ili9341_WriteString>

		sprintf(TextDispBuffer,"%4.1f", inata.POWER);
 800469c:	4b4f      	ldr	r3, [pc, #316]	; (80047dc <GrandState_Verita+0x1d14>)
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	4618      	mov	r0, r3
 80046a2:	f7fb ff59 	bl	8000558 <__aeabi_f2d>
 80046a6:	4602      	mov	r2, r0
 80046a8:	460b      	mov	r3, r1
 80046aa:	494d      	ldr	r1, [pc, #308]	; (80047e0 <GrandState_Verita+0x1d18>)
 80046ac:	4842      	ldr	r0, [pc, #264]	; (80047b8 <GrandState_Verita+0x1cf0>)
 80046ae:	f009 f8a5 	bl	800d7fc <siprintf>
		ili9341_WriteString(95, 150, TextDispBuffer, Font16, cl_ORANGE, cl_BLACK);
 80046b2:	4b49      	ldr	r3, [pc, #292]	; (80047d8 <GrandState_Verita+0x1d10>)
 80046b4:	2200      	movs	r2, #0
 80046b6:	9202      	str	r2, [sp, #8]
 80046b8:	f64f 12a0 	movw	r2, #63904	; 0xf9a0
 80046bc:	9201      	str	r2, [sp, #4]
 80046be:	685a      	ldr	r2, [r3, #4]
 80046c0:	9200      	str	r2, [sp, #0]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a3c      	ldr	r2, [pc, #240]	; (80047b8 <GrandState_Verita+0x1cf0>)
 80046c6:	2196      	movs	r1, #150	; 0x96
 80046c8:	205f      	movs	r0, #95	; 0x5f
 80046ca:	f001 fcae 	bl	800602a <ili9341_WriteString>
		sprintf(TextDispBuffer,"%4.1f", inatb.POWER);
 80046ce:	4b40      	ldr	r3, [pc, #256]	; (80047d0 <GrandState_Verita+0x1d08>)
 80046d0:	68db      	ldr	r3, [r3, #12]
 80046d2:	4618      	mov	r0, r3
 80046d4:	f7fb ff40 	bl	8000558 <__aeabi_f2d>
 80046d8:	4602      	mov	r2, r0
 80046da:	460b      	mov	r3, r1
 80046dc:	4940      	ldr	r1, [pc, #256]	; (80047e0 <GrandState_Verita+0x1d18>)
 80046de:	4836      	ldr	r0, [pc, #216]	; (80047b8 <GrandState_Verita+0x1cf0>)
 80046e0:	f009 f88c 	bl	800d7fc <siprintf>
		ili9341_WriteString(95, 170, TextDispBuffer, Font16, cl_ORANGE, cl_BLACK);
 80046e4:	4b3c      	ldr	r3, [pc, #240]	; (80047d8 <GrandState_Verita+0x1d10>)
 80046e6:	2200      	movs	r2, #0
 80046e8:	9202      	str	r2, [sp, #8]
 80046ea:	f64f 12a0 	movw	r2, #63904	; 0xf9a0
 80046ee:	9201      	str	r2, [sp, #4]
 80046f0:	685a      	ldr	r2, [r3, #4]
 80046f2:	9200      	str	r2, [sp, #0]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a30      	ldr	r2, [pc, #192]	; (80047b8 <GrandState_Verita+0x1cf0>)
 80046f8:	21aa      	movs	r1, #170	; 0xaa
 80046fa:	205f      	movs	r0, #95	; 0x5f
 80046fc:	f001 fc95 	bl	800602a <ili9341_WriteString>

		//// MCP3208 ADC Raw Read
		//ili9341_FillRect(250, 75, 30, 96, cl_BLACK);
		for(register int t = 0; t <= 7; t++){
 8004700:	2400      	movs	r4, #0
 8004702:	e023      	b.n	800474c <GrandState_Verita+0x1c84>
			sprintf(TextDispBuffer,"%.2f",mcp_read.cv[t]);
 8004704:	4a37      	ldr	r2, [pc, #220]	; (80047e4 <GrandState_Verita+0x1d1c>)
 8004706:	1d23      	adds	r3, r4, #4
 8004708:	009b      	lsls	r3, r3, #2
 800470a:	4413      	add	r3, r2
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4618      	mov	r0, r3
 8004710:	f7fb ff22 	bl	8000558 <__aeabi_f2d>
 8004714:	4602      	mov	r2, r0
 8004716:	460b      	mov	r3, r1
 8004718:	4933      	ldr	r1, [pc, #204]	; (80047e8 <GrandState_Verita+0x1d20>)
 800471a:	4827      	ldr	r0, [pc, #156]	; (80047b8 <GrandState_Verita+0x1cf0>)
 800471c:	f009 f86e 	bl	800d7fc <siprintf>
		//ili9341_WriteStringNoBG(250, 75 + (12*t), TextDispBuffer, Font12, cl_WHITE);
		ili9341_WriteString(250, 75 + (12*t), TextDispBuffer, Font12, cl_WHITE, cl_BLACK);
 8004720:	b2a3      	uxth	r3, r4
 8004722:	461a      	mov	r2, r3
 8004724:	0052      	lsls	r2, r2, #1
 8004726:	4413      	add	r3, r2
 8004728:	009b      	lsls	r3, r3, #2
 800472a:	b29b      	uxth	r3, r3
 800472c:	334b      	adds	r3, #75	; 0x4b
 800472e:	b299      	uxth	r1, r3
 8004730:	4b22      	ldr	r3, [pc, #136]	; (80047bc <GrandState_Verita+0x1cf4>)
 8004732:	2200      	movs	r2, #0
 8004734:	9202      	str	r2, [sp, #8]
 8004736:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800473a:	9201      	str	r2, [sp, #4]
 800473c:	685a      	ldr	r2, [r3, #4]
 800473e:	9200      	str	r2, [sp, #0]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a1d      	ldr	r2, [pc, #116]	; (80047b8 <GrandState_Verita+0x1cf0>)
 8004744:	20fa      	movs	r0, #250	; 0xfa
 8004746:	f001 fc70 	bl	800602a <ili9341_WriteString>
		for(register int t = 0; t <= 7; t++){
 800474a:	3401      	adds	r4, #1
 800474c:	2c07      	cmp	r4, #7
 800474e:	ddd9      	ble.n	8004704 <GrandState_Verita+0x1c3c>
		}

		//// Client's CPU Temp
		sprintf(TextDispBuffer,"%2.1f C", (client_temp_mcuCC < 0) ? 0 : client_temp_mcuCC);
 8004750:	4b26      	ldr	r3, [pc, #152]	; (80047ec <GrandState_Verita+0x1d24>)
 8004752:	edd3 7a00 	vldr	s15, [r3]
 8004756:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800475a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800475e:	d504      	bpl.n	800476a <GrandState_Verita+0x1ca2>
 8004760:	f04f 0200 	mov.w	r2, #0
 8004764:	f04f 0300 	mov.w	r3, #0
 8004768:	e006      	b.n	8004778 <GrandState_Verita+0x1cb0>
 800476a:	4b20      	ldr	r3, [pc, #128]	; (80047ec <GrandState_Verita+0x1d24>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4618      	mov	r0, r3
 8004770:	f7fb fef2 	bl	8000558 <__aeabi_f2d>
 8004774:	4602      	mov	r2, r0
 8004776:	460b      	mov	r3, r1
 8004778:	491d      	ldr	r1, [pc, #116]	; (80047f0 <GrandState_Verita+0x1d28>)
 800477a:	480f      	ldr	r0, [pc, #60]	; (80047b8 <GrandState_Verita+0x1cf0>)
 800477c:	f009 f83e 	bl	800d7fc <siprintf>
		//sprintf(TextDispBuffer,"%2.1f C", client_temp_mcuCC);
			if(client_temp_mcuCC < MCUTemp_treash){
 8004780:	4b1a      	ldr	r3, [pc, #104]	; (80047ec <GrandState_Verita+0x1d24>)
 8004782:	edd3 7a00 	vldr	s15, [r3]
 8004786:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80047f4 <GrandState_Verita+0x1d2c>
 800478a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800478e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004792:	d531      	bpl.n	80047f8 <GrandState_Verita+0x1d30>
				ili9341_WriteString(100, 190, TextDispBuffer, Font16, cl_LIGHTGREY, cl_BLACK);
 8004794:	4b10      	ldr	r3, [pc, #64]	; (80047d8 <GrandState_Verita+0x1d10>)
 8004796:	2200      	movs	r2, #0
 8004798:	9202      	str	r2, [sp, #8]
 800479a:	f24c 6218 	movw	r2, #50712	; 0xc618
 800479e:	9201      	str	r2, [sp, #4]
 80047a0:	685a      	ldr	r2, [r3, #4]
 80047a2:	9200      	str	r2, [sp, #0]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a04      	ldr	r2, [pc, #16]	; (80047b8 <GrandState_Verita+0x1cf0>)
 80047a8:	21be      	movs	r1, #190	; 0xbe
 80047aa:	2064      	movs	r0, #100	; 0x64
 80047ac:	f001 fc3d 	bl	800602a <ili9341_WriteString>
 80047b0:	e030      	b.n	8004814 <GrandState_Verita+0x1d4c>
 80047b2:	bf00      	nop
 80047b4:	08010158 	.word	0x08010158
 80047b8:	200006b8 	.word	0x200006b8
 80047bc:	20000228 	.word	0x20000228
 80047c0:	08010160 	.word	0x08010160
 80047c4:	20000890 	.word	0x20000890
 80047c8:	20000006 	.word	0x20000006
 80047cc:	200008a8 	.word	0x200008a8
 80047d0:	20000810 	.word	0x20000810
 80047d4:	0800ffdc 	.word	0x0800ffdc
 80047d8:	20000230 	.word	0x20000230
 80047dc:	200007f8 	.word	0x200007f8
 80047e0:	0801016c 	.word	0x0801016c
 80047e4:	20000828 	.word	0x20000828
 80047e8:	08010174 	.word	0x08010174
 80047ec:	200007f4 	.word	0x200007f4
 80047f0:	08010110 	.word	0x08010110
 80047f4:	42700000 	.word	0x42700000
			}else{
				ili9341_WriteString(100, 190, TextDispBuffer, Font16, cl_RED, cl_BLACK);
 80047f8:	4b8c      	ldr	r3, [pc, #560]	; (8004a2c <GrandState_Verita+0x1f64>)
 80047fa:	2200      	movs	r2, #0
 80047fc:	9202      	str	r2, [sp, #8]
 80047fe:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8004802:	9201      	str	r2, [sp, #4]
 8004804:	685a      	ldr	r2, [r3, #4]
 8004806:	9200      	str	r2, [sp, #0]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a89      	ldr	r2, [pc, #548]	; (8004a30 <GrandState_Verita+0x1f68>)
 800480c:	21be      	movs	r1, #190	; 0xbe
 800480e:	2064      	movs	r0, #100	; 0x64
 8004810:	f001 fc0b 	bl	800602a <ili9341_WriteString>
			}


		if(k_flag.cnt && stboxp.ch_is == 1){ //// Back to lobby
 8004814:	4b87      	ldr	r3, [pc, #540]	; (8004a34 <GrandState_Verita+0x1f6c>)
 8004816:	789b      	ldrb	r3, [r3, #2]
 8004818:	2b00      	cmp	r3, #0
 800481a:	f000 8341 	beq.w	8004ea0 <GrandState_Verita+0x23d8>
 800481e:	4b86      	ldr	r3, [pc, #536]	; (8004a38 <GrandState_Verita+0x1f70>)
 8004820:	789b      	ldrb	r3, [r3, #2]
 8004822:	2b01      	cmp	r3, #1
 8004824:	f040 833c 	bne.w	8004ea0 <GrandState_Verita+0x23d8>
			GrandState = pre_lobby;
 8004828:	4b84      	ldr	r3, [pc, #528]	; (8004a3c <GrandState_Verita+0x1f74>)
 800482a:	2201      	movs	r2, #1
 800482c:	701a      	strb	r2, [r3, #0]
			VRB_CL.Mark.cputemp = 0; //// reset temp, prevent old data show
 800482e:	4b84      	ldr	r3, [pc, #528]	; (8004a40 <GrandState_Verita+0x1f78>)
 8004830:	2200      	movs	r2, #0
 8004832:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
			HAL_GPIO_WritePin(RelayClient_GPIO_Port, RelayClient_Pin, GPIO_PIN_RESET);
 8004836:	2200      	movs	r2, #0
 8004838:	f44f 7100 	mov.w	r1, #512	; 0x200
 800483c:	4881      	ldr	r0, [pc, #516]	; (8004a44 <GrandState_Verita+0x1f7c>)
 800483e:	f002 ffbb 	bl	80077b8 <HAL_GPIO_WritePin>
			k_flag.cnt = 0;
 8004842:	4b7c      	ldr	r3, [pc, #496]	; (8004a34 <GrandState_Verita+0x1f6c>)
 8004844:	2200      	movs	r2, #0
 8004846:	709a      	strb	r2, [r3, #2]
			}
		break; // monitor
 8004848:	e32a      	b.n	8004ea0 <GrandState_Verita+0x23d8>


	case pre_danger:
		stboxp.choice_set = bpoxy_def;
 800484a:	4b7b      	ldr	r3, [pc, #492]	; (8004a38 <GrandState_Verita+0x1f70>)
 800484c:	2200      	movs	r2, #0
 800484e:	705a      	strb	r2, [r3, #1]
		ili9341_FillRect(0, 30, 320, 210, cl_BLACK);
 8004850:	2300      	movs	r3, #0
 8004852:	9300      	str	r3, [sp, #0]
 8004854:	23d2      	movs	r3, #210	; 0xd2
 8004856:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800485a:	211e      	movs	r1, #30
 800485c:	2000      	movs	r0, #0
 800485e:	f001 fa3b 	bl	8005cd8 <ili9341_FillRect>
		ili9341_FillRect(0, 0, 320, 30, cl_RED);
 8004862:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004866:	9300      	str	r3, [sp, #0]
 8004868:	231e      	movs	r3, #30
 800486a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800486e:	2100      	movs	r1, #0
 8004870:	2000      	movs	r0, #0
 8004872:	f001 fa31 	bl	8005cd8 <ili9341_FillRect>

		sprintf(TextDispBuffer,"Danger!!!");
 8004876:	4974      	ldr	r1, [pc, #464]	; (8004a48 <GrandState_Verita+0x1f80>)
 8004878:	486d      	ldr	r0, [pc, #436]	; (8004a30 <GrandState_Verita+0x1f68>)
 800487a:	f008 ffbf 	bl	800d7fc <siprintf>
		ili9341_WriteStringNoBG(105, 5, TextDispBuffer, Font20, cl_WHITE);
 800487e:	4b73      	ldr	r3, [pc, #460]	; (8004a4c <GrandState_Verita+0x1f84>)
 8004880:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004884:	9201      	str	r2, [sp, #4]
 8004886:	685a      	ldr	r2, [r3, #4]
 8004888:	9200      	str	r2, [sp, #0]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a68      	ldr	r2, [pc, #416]	; (8004a30 <GrandState_Verita+0x1f68>)
 800488e:	2105      	movs	r1, #5
 8004890:	2069      	movs	r0, #105	; 0x69
 8004892:	f001 fc17 	bl	80060c4 <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"<-Back to lobby");
 8004896:	496e      	ldr	r1, [pc, #440]	; (8004a50 <GrandState_Verita+0x1f88>)
 8004898:	4865      	ldr	r0, [pc, #404]	; (8004a30 <GrandState_Verita+0x1f68>)
 800489a:	f008 ffaf 	bl	800d7fc <siprintf>
		ili9341_WriteStringNoBG(30, 220, TextDispBuffer, Font16, cl_WHITE);
 800489e:	4b63      	ldr	r3, [pc, #396]	; (8004a2c <GrandState_Verita+0x1f64>)
 80048a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80048a4:	9201      	str	r2, [sp, #4]
 80048a6:	685a      	ldr	r2, [r3, #4]
 80048a8:	9200      	str	r2, [sp, #0]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a60      	ldr	r2, [pc, #384]	; (8004a30 <GrandState_Verita+0x1f68>)
 80048ae:	21dc      	movs	r1, #220	; 0xdc
 80048b0:	201e      	movs	r0, #30
 80048b2:	f001 fc07 	bl	80060c4 <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"Overcurrent Detect!");
 80048b6:	4967      	ldr	r1, [pc, #412]	; (8004a54 <GrandState_Verita+0x1f8c>)
 80048b8:	485d      	ldr	r0, [pc, #372]	; (8004a30 <GrandState_Verita+0x1f68>)
 80048ba:	f008 ff9f 	bl	800d7fc <siprintf>
		ili9341_WriteStringNoBG(40, 70, TextDispBuffer, Font20, cl_WHITE);
 80048be:	4b63      	ldr	r3, [pc, #396]	; (8004a4c <GrandState_Verita+0x1f84>)
 80048c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80048c4:	9201      	str	r2, [sp, #4]
 80048c6:	685a      	ldr	r2, [r3, #4]
 80048c8:	9200      	str	r2, [sp, #0]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a58      	ldr	r2, [pc, #352]	; (8004a30 <GrandState_Verita+0x1f68>)
 80048ce:	2146      	movs	r1, #70	; 0x46
 80048d0:	2028      	movs	r0, #40	; 0x28
 80048d2:	f001 fbf7 	bl	80060c4 <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"I MCU:");
 80048d6:	4960      	ldr	r1, [pc, #384]	; (8004a58 <GrandState_Verita+0x1f90>)
 80048d8:	4855      	ldr	r0, [pc, #340]	; (8004a30 <GrandState_Verita+0x1f68>)
 80048da:	f008 ff8f 	bl	800d7fc <siprintf>
		ili9341_WriteString(20, 100, TextDispBuffer, Font16, cl_WHITE, cl_BLACK);
 80048de:	4b53      	ldr	r3, [pc, #332]	; (8004a2c <GrandState_Verita+0x1f64>)
 80048e0:	2200      	movs	r2, #0
 80048e2:	9202      	str	r2, [sp, #8]
 80048e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80048e8:	9201      	str	r2, [sp, #4]
 80048ea:	685a      	ldr	r2, [r3, #4]
 80048ec:	9200      	str	r2, [sp, #0]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a4f      	ldr	r2, [pc, #316]	; (8004a30 <GrandState_Verita+0x1f68>)
 80048f2:	2164      	movs	r1, #100	; 0x64
 80048f4:	2014      	movs	r0, #20
 80048f6:	f001 fb98 	bl	800602a <ili9341_WriteString>

		sprintf(TextDispBuffer,"I Brd:");
 80048fa:	4958      	ldr	r1, [pc, #352]	; (8004a5c <GrandState_Verita+0x1f94>)
 80048fc:	484c      	ldr	r0, [pc, #304]	; (8004a30 <GrandState_Verita+0x1f68>)
 80048fe:	f008 ff7d 	bl	800d7fc <siprintf>
		ili9341_WriteString(20, 130, TextDispBuffer, Font16, cl_WHITE, cl_BLACK);
 8004902:	4b4a      	ldr	r3, [pc, #296]	; (8004a2c <GrandState_Verita+0x1f64>)
 8004904:	2200      	movs	r2, #0
 8004906:	9202      	str	r2, [sp, #8]
 8004908:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800490c:	9201      	str	r2, [sp, #4]
 800490e:	685a      	ldr	r2, [r3, #4]
 8004910:	9200      	str	r2, [sp, #0]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a46      	ldr	r2, [pc, #280]	; (8004a30 <GrandState_Verita+0x1f68>)
 8004916:	2182      	movs	r1, #130	; 0x82
 8004918:	2014      	movs	r0, #20
 800491a:	f001 fb86 	bl	800602a <ili9341_WriteString>

		sprintf(TextDispBuffer,"%4d", inata.CURRENT);
 800491e:	4b50      	ldr	r3, [pc, #320]	; (8004a60 <GrandState_Verita+0x1f98>)
 8004920:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004924:	461a      	mov	r2, r3
 8004926:	494f      	ldr	r1, [pc, #316]	; (8004a64 <GrandState_Verita+0x1f9c>)
 8004928:	4841      	ldr	r0, [pc, #260]	; (8004a30 <GrandState_Verita+0x1f68>)
 800492a:	f008 ff67 	bl	800d7fc <siprintf>
		if(inata.CURRENT >= Current_limit_mA){
 800492e:	4b4c      	ldr	r3, [pc, #304]	; (8004a60 <GrandState_Verita+0x1f98>)
 8004930:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004934:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8004938:	db1e      	blt.n	8004978 <GrandState_Verita+0x1eb0>
			ili9341_WriteString(120, 100, TextDispBuffer, Font20, cl_RED, cl_BLACK);
 800493a:	4b44      	ldr	r3, [pc, #272]	; (8004a4c <GrandState_Verita+0x1f84>)
 800493c:	2200      	movs	r2, #0
 800493e:	9202      	str	r2, [sp, #8]
 8004940:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8004944:	9201      	str	r2, [sp, #4]
 8004946:	685a      	ldr	r2, [r3, #4]
 8004948:	9200      	str	r2, [sp, #0]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a38      	ldr	r2, [pc, #224]	; (8004a30 <GrandState_Verita+0x1f68>)
 800494e:	2164      	movs	r1, #100	; 0x64
 8004950:	2078      	movs	r0, #120	; 0x78
 8004952:	f001 fb6a 	bl	800602a <ili9341_WriteString>
			sprintf(TextDispBuffer,"FAIL"); ili9341_WriteStringNoBG(220, 100, TextDispBuffer, Font20, cl_RED);
 8004956:	4944      	ldr	r1, [pc, #272]	; (8004a68 <GrandState_Verita+0x1fa0>)
 8004958:	4835      	ldr	r0, [pc, #212]	; (8004a30 <GrandState_Verita+0x1f68>)
 800495a:	f008 ff4f 	bl	800d7fc <siprintf>
 800495e:	4b3b      	ldr	r3, [pc, #236]	; (8004a4c <GrandState_Verita+0x1f84>)
 8004960:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8004964:	9201      	str	r2, [sp, #4]
 8004966:	685a      	ldr	r2, [r3, #4]
 8004968:	9200      	str	r2, [sp, #0]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a30      	ldr	r2, [pc, #192]	; (8004a30 <GrandState_Verita+0x1f68>)
 800496e:	2164      	movs	r1, #100	; 0x64
 8004970:	20dc      	movs	r0, #220	; 0xdc
 8004972:	f001 fba7 	bl	80060c4 <ili9341_WriteStringNoBG>
 8004976:	e00d      	b.n	8004994 <GrandState_Verita+0x1ecc>
		}else{
			ili9341_WriteString(120, 100, TextDispBuffer, Font20, cl_WHITE, cl_BLACK);
 8004978:	4b34      	ldr	r3, [pc, #208]	; (8004a4c <GrandState_Verita+0x1f84>)
 800497a:	2200      	movs	r2, #0
 800497c:	9202      	str	r2, [sp, #8]
 800497e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004982:	9201      	str	r2, [sp, #4]
 8004984:	685a      	ldr	r2, [r3, #4]
 8004986:	9200      	str	r2, [sp, #0]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a29      	ldr	r2, [pc, #164]	; (8004a30 <GrandState_Verita+0x1f68>)
 800498c:	2164      	movs	r1, #100	; 0x64
 800498e:	2078      	movs	r0, #120	; 0x78
 8004990:	f001 fb4b 	bl	800602a <ili9341_WriteString>
			}

		sprintf(TextDispBuffer,"%4d", inatb.CURRENT);
 8004994:	4b35      	ldr	r3, [pc, #212]	; (8004a6c <GrandState_Verita+0x1fa4>)
 8004996:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800499a:	461a      	mov	r2, r3
 800499c:	4931      	ldr	r1, [pc, #196]	; (8004a64 <GrandState_Verita+0x1f9c>)
 800499e:	4824      	ldr	r0, [pc, #144]	; (8004a30 <GrandState_Verita+0x1f68>)
 80049a0:	f008 ff2c 	bl	800d7fc <siprintf>
		if(inatb.CURRENT >= Current_limit_mA){
 80049a4:	4b31      	ldr	r3, [pc, #196]	; (8004a6c <GrandState_Verita+0x1fa4>)
 80049a6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80049aa:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80049ae:	db1e      	blt.n	80049ee <GrandState_Verita+0x1f26>
			ili9341_WriteString(120, 130, TextDispBuffer, Font20, cl_RED, cl_BLACK);
 80049b0:	4b26      	ldr	r3, [pc, #152]	; (8004a4c <GrandState_Verita+0x1f84>)
 80049b2:	2200      	movs	r2, #0
 80049b4:	9202      	str	r2, [sp, #8]
 80049b6:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80049ba:	9201      	str	r2, [sp, #4]
 80049bc:	685a      	ldr	r2, [r3, #4]
 80049be:	9200      	str	r2, [sp, #0]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a1b      	ldr	r2, [pc, #108]	; (8004a30 <GrandState_Verita+0x1f68>)
 80049c4:	2182      	movs	r1, #130	; 0x82
 80049c6:	2078      	movs	r0, #120	; 0x78
 80049c8:	f001 fb2f 	bl	800602a <ili9341_WriteString>
			sprintf(TextDispBuffer,"FAIL"); ili9341_WriteStringNoBG(220, 130, TextDispBuffer, Font20, cl_RED);
 80049cc:	4926      	ldr	r1, [pc, #152]	; (8004a68 <GrandState_Verita+0x1fa0>)
 80049ce:	4818      	ldr	r0, [pc, #96]	; (8004a30 <GrandState_Verita+0x1f68>)
 80049d0:	f008 ff14 	bl	800d7fc <siprintf>
 80049d4:	4b1d      	ldr	r3, [pc, #116]	; (8004a4c <GrandState_Verita+0x1f84>)
 80049d6:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80049da:	9201      	str	r2, [sp, #4]
 80049dc:	685a      	ldr	r2, [r3, #4]
 80049de:	9200      	str	r2, [sp, #0]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a13      	ldr	r2, [pc, #76]	; (8004a30 <GrandState_Verita+0x1f68>)
 80049e4:	2182      	movs	r1, #130	; 0x82
 80049e6:	20dc      	movs	r0, #220	; 0xdc
 80049e8:	f001 fb6c 	bl	80060c4 <ili9341_WriteStringNoBG>
 80049ec:	e00d      	b.n	8004a0a <GrandState_Verita+0x1f42>
		}else{
			ili9341_WriteString(120, 130, TextDispBuffer, Font20, cl_WHITE, cl_BLACK);
 80049ee:	4b17      	ldr	r3, [pc, #92]	; (8004a4c <GrandState_Verita+0x1f84>)
 80049f0:	2200      	movs	r2, #0
 80049f2:	9202      	str	r2, [sp, #8]
 80049f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80049f8:	9201      	str	r2, [sp, #4]
 80049fa:	685a      	ldr	r2, [r3, #4]
 80049fc:	9200      	str	r2, [sp, #0]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a0b      	ldr	r2, [pc, #44]	; (8004a30 <GrandState_Verita+0x1f68>)
 8004a02:	2182      	movs	r1, #130	; 0x82
 8004a04:	2078      	movs	r0, #120	; 0x78
 8004a06:	f001 fb10 	bl	800602a <ili9341_WriteString>
			}

		GrandState = danger;
 8004a0a:	4b0c      	ldr	r3, [pc, #48]	; (8004a3c <GrandState_Verita+0x1f74>)
 8004a0c:	2210      	movs	r2, #16
 8004a0e:	701a      	strb	r2, [r3, #0]
		break;
 8004a10:	e24f      	b.n	8004eb2 <GrandState_Verita+0x23ea>

	case danger:

		if(k_flag.cnt){ //// Back to lobby
 8004a12:	4b08      	ldr	r3, [pc, #32]	; (8004a34 <GrandState_Verita+0x1f6c>)
 8004a14:	789b      	ldrb	r3, [r3, #2]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	f000 8244 	beq.w	8004ea4 <GrandState_Verita+0x23dc>
			GrandState = pre_lobby;
 8004a1c:	4b07      	ldr	r3, [pc, #28]	; (8004a3c <GrandState_Verita+0x1f74>)
 8004a1e:	2201      	movs	r2, #1
 8004a20:	701a      	strb	r2, [r3, #0]
			k_flag.cnt = 0;
 8004a22:	4b04      	ldr	r3, [pc, #16]	; (8004a34 <GrandState_Verita+0x1f6c>)
 8004a24:	2200      	movs	r2, #0
 8004a26:	709a      	strb	r2, [r3, #2]
			}
		break;
 8004a28:	e23c      	b.n	8004ea4 <GrandState_Verita+0x23dc>
 8004a2a:	bf00      	nop
 8004a2c:	20000230 	.word	0x20000230
 8004a30:	200006b8 	.word	0x200006b8
 8004a34:	20000890 	.word	0x20000890
 8004a38:	200008a8 	.word	0x200008a8
 8004a3c:	20000006 	.word	0x20000006
 8004a40:	20000784 	.word	0x20000784
 8004a44:	40020800 	.word	0x40020800
 8004a48:	0801017c 	.word	0x0801017c
 8004a4c:	20000238 	.word	0x20000238
 8004a50:	08010188 	.word	0x08010188
 8004a54:	08010198 	.word	0x08010198
 8004a58:	0800ffcc 	.word	0x0800ffcc
 8004a5c:	0800ffc4 	.word	0x0800ffc4
 8004a60:	200007f8 	.word	0x200007f8
 8004a64:	0800ffdc 	.word	0x0800ffdc
 8004a68:	0800ffe0 	.word	0x0800ffe0
 8004a6c:	20000810 	.word	0x20000810

	case pre_about:
		stboxp.choice_set = bpoxy_no;
 8004a70:	4b99      	ldr	r3, [pc, #612]	; (8004cd8 <GrandState_Verita+0x2210>)
 8004a72:	2203      	movs	r2, #3
 8004a74:	705a      	strb	r2, [r3, #1]
		ili9341_FillRect(0, 30, 320, 210, cl_BLACK);
 8004a76:	2300      	movs	r3, #0
 8004a78:	9300      	str	r3, [sp, #0]
 8004a7a:	23d2      	movs	r3, #210	; 0xd2
 8004a7c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004a80:	211e      	movs	r1, #30
 8004a82:	2000      	movs	r0, #0
 8004a84:	f001 f928 	bl	8005cd8 <ili9341_FillRect>
		ili9341_FillRect(0, 0, 320, 30, cl_DARKGREEN);
 8004a88:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8004a8c:	9300      	str	r3, [sp, #0]
 8004a8e:	231e      	movs	r3, #30
 8004a90:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004a94:	2100      	movs	r1, #0
 8004a96:	2000      	movs	r0, #0
 8004a98:	f001 f91e 	bl	8005cd8 <ili9341_FillRect>

		sprintf(TextDispBuffer,"About Verita");
 8004a9c:	498f      	ldr	r1, [pc, #572]	; (8004cdc <GrandState_Verita+0x2214>)
 8004a9e:	4890      	ldr	r0, [pc, #576]	; (8004ce0 <GrandState_Verita+0x2218>)
 8004aa0:	f008 feac 	bl	800d7fc <siprintf>
		ili9341_WriteStringNoBG(80, 5, TextDispBuffer, Font20, cl_BLACK);
 8004aa4:	4b8f      	ldr	r3, [pc, #572]	; (8004ce4 <GrandState_Verita+0x221c>)
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	9201      	str	r2, [sp, #4]
 8004aaa:	685a      	ldr	r2, [r3, #4]
 8004aac:	9200      	str	r2, [sp, #0]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a8b      	ldr	r2, [pc, #556]	; (8004ce0 <GrandState_Verita+0x2218>)
 8004ab2:	2105      	movs	r1, #5
 8004ab4:	2050      	movs	r0, #80	; 0x50
 8004ab6:	f001 fb05 	bl	80060c4 <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"Next->");
 8004aba:	498b      	ldr	r1, [pc, #556]	; (8004ce8 <GrandState_Verita+0x2220>)
 8004abc:	4888      	ldr	r0, [pc, #544]	; (8004ce0 <GrandState_Verita+0x2218>)
 8004abe:	f008 fe9d 	bl	800d7fc <siprintf>
		ili9341_WriteStringNoBG(30, 220, TextDispBuffer, Font16, cl_WHITE);
 8004ac2:	4b8a      	ldr	r3, [pc, #552]	; (8004cec <GrandState_Verita+0x2224>)
 8004ac4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004ac8:	9201      	str	r2, [sp, #4]
 8004aca:	685a      	ldr	r2, [r3, #4]
 8004acc:	9200      	str	r2, [sp, #0]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a83      	ldr	r2, [pc, #524]	; (8004ce0 <GrandState_Verita+0x2218>)
 8004ad2:	21dc      	movs	r1, #220	; 0xdc
 8004ad4:	201e      	movs	r0, #30
 8004ad6:	f001 faf5 	bl	80060c4 <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"Verita's Mission is to help the user to check NUCLEO boards' health.");
 8004ada:	4985      	ldr	r1, [pc, #532]	; (8004cf0 <GrandState_Verita+0x2228>)
 8004adc:	4880      	ldr	r0, [pc, #512]	; (8004ce0 <GrandState_Verita+0x2218>)
 8004ade:	f008 fe8d 	bl	800d7fc <siprintf>
		ili9341_WriteStringNoBG(20, 35, TextDispBuffer, Font16, cl_WHITE);
 8004ae2:	4b82      	ldr	r3, [pc, #520]	; (8004cec <GrandState_Verita+0x2224>)
 8004ae4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004ae8:	9201      	str	r2, [sp, #4]
 8004aea:	685a      	ldr	r2, [r3, #4]
 8004aec:	9200      	str	r2, [sp, #0]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a7b      	ldr	r2, [pc, #492]	; (8004ce0 <GrandState_Verita+0x2218>)
 8004af2:	2123      	movs	r1, #35	; 0x23
 8004af4:	2014      	movs	r0, #20
 8004af6:	f001 fae5 	bl	80060c4 <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"Visit more at:");
 8004afa:	497e      	ldr	r1, [pc, #504]	; (8004cf4 <GrandState_Verita+0x222c>)
 8004afc:	4878      	ldr	r0, [pc, #480]	; (8004ce0 <GrandState_Verita+0x2218>)
 8004afe:	f008 fe7d 	bl	800d7fc <siprintf>
		ili9341_WriteStringNoBG(20, 100, TextDispBuffer, Font16, cl_WHITE);
 8004b02:	4b7a      	ldr	r3, [pc, #488]	; (8004cec <GrandState_Verita+0x2224>)
 8004b04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b08:	9201      	str	r2, [sp, #4]
 8004b0a:	685a      	ldr	r2, [r3, #4]
 8004b0c:	9200      	str	r2, [sp, #0]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a73      	ldr	r2, [pc, #460]	; (8004ce0 <GrandState_Verita+0x2218>)
 8004b12:	2164      	movs	r1, #100	; 0x64
 8004b14:	2014      	movs	r0, #20
 8004b16:	f001 fad5 	bl	80060c4 <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"https://");
 8004b1a:	4977      	ldr	r1, [pc, #476]	; (8004cf8 <GrandState_Verita+0x2230>)
 8004b1c:	4870      	ldr	r0, [pc, #448]	; (8004ce0 <GrandState_Verita+0x2218>)
 8004b1e:	f008 fe6d 	bl	800d7fc <siprintf>
		ili9341_WriteStringNoBG(20, 125, TextDispBuffer, Font16, cl_CYAN);
 8004b22:	4b72      	ldr	r3, [pc, #456]	; (8004cec <GrandState_Verita+0x2224>)
 8004b24:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004b28:	9201      	str	r2, [sp, #4]
 8004b2a:	685a      	ldr	r2, [r3, #4]
 8004b2c:	9200      	str	r2, [sp, #0]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a6b      	ldr	r2, [pc, #428]	; (8004ce0 <GrandState_Verita+0x2218>)
 8004b32:	217d      	movs	r1, #125	; 0x7d
 8004b34:	2014      	movs	r0, #20
 8004b36:	f001 fac5 	bl	80060c4 <ili9341_WriteStringNoBG>
		sprintf(TextDispBuffer,"kmutt.me/owlsoffice.verita");
 8004b3a:	4970      	ldr	r1, [pc, #448]	; (8004cfc <GrandState_Verita+0x2234>)
 8004b3c:	4868      	ldr	r0, [pc, #416]	; (8004ce0 <GrandState_Verita+0x2218>)
 8004b3e:	f008 fe5d 	bl	800d7fc <siprintf>
		ili9341_WriteStringNoBG(20, 140, TextDispBuffer, Font16, cl_CYAN);
 8004b42:	4b6a      	ldr	r3, [pc, #424]	; (8004cec <GrandState_Verita+0x2224>)
 8004b44:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004b48:	9201      	str	r2, [sp, #4]
 8004b4a:	685a      	ldr	r2, [r3, #4]
 8004b4c:	9200      	str	r2, [sp, #0]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a63      	ldr	r2, [pc, #396]	; (8004ce0 <GrandState_Verita+0x2218>)
 8004b52:	218c      	movs	r1, #140	; 0x8c
 8004b54:	2014      	movs	r0, #20
 8004b56:	f001 fab5 	bl	80060c4 <ili9341_WriteStringNoBG>
		//owlhor/Verita_NucleoF411RETester
		sprintf(TextDispBuffer,"github.com/owlhor/");
 8004b5a:	4969      	ldr	r1, [pc, #420]	; (8004d00 <GrandState_Verita+0x2238>)
 8004b5c:	4860      	ldr	r0, [pc, #384]	; (8004ce0 <GrandState_Verita+0x2218>)
 8004b5e:	f008 fe4d 	bl	800d7fc <siprintf>
		ili9341_WriteStringNoBG(20, 165, TextDispBuffer, Font16, cl_CYAN);
 8004b62:	4b62      	ldr	r3, [pc, #392]	; (8004cec <GrandState_Verita+0x2224>)
 8004b64:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004b68:	9201      	str	r2, [sp, #4]
 8004b6a:	685a      	ldr	r2, [r3, #4]
 8004b6c:	9200      	str	r2, [sp, #0]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a5b      	ldr	r2, [pc, #364]	; (8004ce0 <GrandState_Verita+0x2218>)
 8004b72:	21a5      	movs	r1, #165	; 0xa5
 8004b74:	2014      	movs	r0, #20
 8004b76:	f001 faa5 	bl	80060c4 <ili9341_WriteStringNoBG>
		sprintf(TextDispBuffer,"Verita_NucleoF411RETester");
 8004b7a:	4962      	ldr	r1, [pc, #392]	; (8004d04 <GrandState_Verita+0x223c>)
 8004b7c:	4858      	ldr	r0, [pc, #352]	; (8004ce0 <GrandState_Verita+0x2218>)
 8004b7e:	f008 fe3d 	bl	800d7fc <siprintf>
		ili9341_WriteStringNoBG(20, 180, TextDispBuffer, Font16, cl_CYAN);
 8004b82:	4b5a      	ldr	r3, [pc, #360]	; (8004cec <GrandState_Verita+0x2224>)
 8004b84:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004b88:	9201      	str	r2, [sp, #4]
 8004b8a:	685a      	ldr	r2, [r3, #4]
 8004b8c:	9200      	str	r2, [sp, #0]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a53      	ldr	r2, [pc, #332]	; (8004ce0 <GrandState_Verita+0x2218>)
 8004b92:	21b4      	movs	r1, #180	; 0xb4
 8004b94:	2014      	movs	r0, #20
 8004b96:	f001 fa95 	bl	80060c4 <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"Program Version: %08X", FW_Master_Ver);
 8004b9a:	4a5b      	ldr	r2, [pc, #364]	; (8004d08 <GrandState_Verita+0x2240>)
 8004b9c:	495b      	ldr	r1, [pc, #364]	; (8004d0c <GrandState_Verita+0x2244>)
 8004b9e:	4850      	ldr	r0, [pc, #320]	; (8004ce0 <GrandState_Verita+0x2218>)
 8004ba0:	f008 fe2c 	bl	800d7fc <siprintf>
		ili9341_WriteStringNoBG(135, 215, TextDispBuffer, Font12, cl_NAVY);
 8004ba4:	4b5a      	ldr	r3, [pc, #360]	; (8004d10 <GrandState_Verita+0x2248>)
 8004ba6:	220f      	movs	r2, #15
 8004ba8:	9201      	str	r2, [sp, #4]
 8004baa:	685a      	ldr	r2, [r3, #4]
 8004bac:	9200      	str	r2, [sp, #0]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a4b      	ldr	r2, [pc, #300]	; (8004ce0 <GrandState_Verita+0x2218>)
 8004bb2:	21d7      	movs	r1, #215	; 0xd7
 8004bb4:	2087      	movs	r0, #135	; 0x87
 8004bb6:	f001 fa85 	bl	80060c4 <ili9341_WriteStringNoBG>

		GrandState = about;
 8004bba:	4b56      	ldr	r3, [pc, #344]	; (8004d14 <GrandState_Verita+0x224c>)
 8004bbc:	2212      	movs	r2, #18
 8004bbe:	701a      	strb	r2, [r3, #0]
		break; ////pre_about
 8004bc0:	e177      	b.n	8004eb2 <GrandState_Verita+0x23ea>

	case about:
		stboxp.choice_set = bpoxy_def;
 8004bc2:	4b45      	ldr	r3, [pc, #276]	; (8004cd8 <GrandState_Verita+0x2210>)
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	705a      	strb	r2, [r3, #1]

		if(k_flag.cnt){ //// Back to lobby
 8004bc8:	4b53      	ldr	r3, [pc, #332]	; (8004d18 <GrandState_Verita+0x2250>)
 8004bca:	789b      	ldrb	r3, [r3, #2]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	f000 816b 	beq.w	8004ea8 <GrandState_Verita+0x23e0>
			GrandState = pre_author;
 8004bd2:	4b50      	ldr	r3, [pc, #320]	; (8004d14 <GrandState_Verita+0x224c>)
 8004bd4:	2213      	movs	r2, #19
 8004bd6:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(RelayClient_GPIO_Port, RelayClient_Pin, GPIO_PIN_RESET);
 8004bd8:	2200      	movs	r2, #0
 8004bda:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004bde:	484f      	ldr	r0, [pc, #316]	; (8004d1c <GrandState_Verita+0x2254>)
 8004be0:	f002 fdea 	bl	80077b8 <HAL_GPIO_WritePin>
			k_flag.cnt = 0;
 8004be4:	4b4c      	ldr	r3, [pc, #304]	; (8004d18 <GrandState_Verita+0x2250>)
 8004be6:	2200      	movs	r2, #0
 8004be8:	709a      	strb	r2, [r3, #2]
			}
		break; ////about
 8004bea:	e15d      	b.n	8004ea8 <GrandState_Verita+0x23e0>

	case pre_author:
			stboxp.choice_set = bpoxy_def;
 8004bec:	4b3a      	ldr	r3, [pc, #232]	; (8004cd8 <GrandState_Verita+0x2210>)
 8004bee:	2200      	movs	r2, #0
 8004bf0:	705a      	strb	r2, [r3, #1]
			ili9341_FillRect(0, 30, 320, 210, cl_BLACK);
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	9300      	str	r3, [sp, #0]
 8004bf6:	23d2      	movs	r3, #210	; 0xd2
 8004bf8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004bfc:	211e      	movs	r1, #30
 8004bfe:	2000      	movs	r0, #0
 8004c00:	f001 f86a 	bl	8005cd8 <ili9341_FillRect>
			ili9341_FillRect(0, 0, 320, 30, cl_DARKGREEN);
 8004c04:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8004c08:	9300      	str	r3, [sp, #0]
 8004c0a:	231e      	movs	r3, #30
 8004c0c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004c10:	2100      	movs	r1, #0
 8004c12:	2000      	movs	r0, #0
 8004c14:	f001 f860 	bl	8005cd8 <ili9341_FillRect>

			sprintf(TextDispBuffer,"Authors");
 8004c18:	4941      	ldr	r1, [pc, #260]	; (8004d20 <GrandState_Verita+0x2258>)
 8004c1a:	4831      	ldr	r0, [pc, #196]	; (8004ce0 <GrandState_Verita+0x2218>)
 8004c1c:	f008 fdee 	bl	800d7fc <siprintf>
			ili9341_WriteStringNoBG(100, 5, TextDispBuffer, Font20, cl_BLACK);
 8004c20:	4b30      	ldr	r3, [pc, #192]	; (8004ce4 <GrandState_Verita+0x221c>)
 8004c22:	2200      	movs	r2, #0
 8004c24:	9201      	str	r2, [sp, #4]
 8004c26:	685a      	ldr	r2, [r3, #4]
 8004c28:	9200      	str	r2, [sp, #0]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a2c      	ldr	r2, [pc, #176]	; (8004ce0 <GrandState_Verita+0x2218>)
 8004c2e:	2105      	movs	r1, #5
 8004c30:	2064      	movs	r0, #100	; 0x64
 8004c32:	f001 fa47 	bl	80060c4 <ili9341_WriteStringNoBG>

			sprintf(TextDispBuffer,"Wipop Panyatipsakul");
 8004c36:	493b      	ldr	r1, [pc, #236]	; (8004d24 <GrandState_Verita+0x225c>)
 8004c38:	4829      	ldr	r0, [pc, #164]	; (8004ce0 <GrandState_Verita+0x2218>)
 8004c3a:	f008 fddf 	bl	800d7fc <siprintf>
			ili9341_WriteStringNoBG(25, 35, TextDispBuffer, Font16, cl_WHITE);
 8004c3e:	4b2b      	ldr	r3, [pc, #172]	; (8004cec <GrandState_Verita+0x2224>)
 8004c40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004c44:	9201      	str	r2, [sp, #4]
 8004c46:	685a      	ldr	r2, [r3, #4]
 8004c48:	9200      	str	r2, [sp, #0]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a24      	ldr	r2, [pc, #144]	; (8004ce0 <GrandState_Verita+0x2218>)
 8004c4e:	2123      	movs	r1, #35	; 0x23
 8004c50:	2019      	movs	r0, #25
 8004c52:	f001 fa37 	bl	80060c4 <ili9341_WriteStringNoBG>

			sprintf(TextDispBuffer,"owl_hor | FRAB#7 FIBO");
 8004c56:	4934      	ldr	r1, [pc, #208]	; (8004d28 <GrandState_Verita+0x2260>)
 8004c58:	4821      	ldr	r0, [pc, #132]	; (8004ce0 <GrandState_Verita+0x2218>)
 8004c5a:	f008 fdcf 	bl	800d7fc <siprintf>
			ili9341_WriteStringNoBG(25, 55, TextDispBuffer, Font16, cl_WHITE);
 8004c5e:	4b23      	ldr	r3, [pc, #140]	; (8004cec <GrandState_Verita+0x2224>)
 8004c60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004c64:	9201      	str	r2, [sp, #4]
 8004c66:	685a      	ldr	r2, [r3, #4]
 8004c68:	9200      	str	r2, [sp, #0]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a1c      	ldr	r2, [pc, #112]	; (8004ce0 <GrandState_Verita+0x2218>)
 8004c6e:	2137      	movs	r1, #55	; 0x37
 8004c70:	2019      	movs	r0, #25
 8004c72:	f001 fa27 	bl	80060c4 <ili9341_WriteStringNoBG>

			sprintf(TextDispBuffer,"Press Knob to continue");
 8004c76:	492d      	ldr	r1, [pc, #180]	; (8004d2c <GrandState_Verita+0x2264>)
 8004c78:	4819      	ldr	r0, [pc, #100]	; (8004ce0 <GrandState_Verita+0x2218>)
 8004c7a:	f008 fdbf 	bl	800d7fc <siprintf>
			ili9341_WriteStringNoBG(40, 220, TextDispBuffer, Font12, cl_WHITE);
 8004c7e:	4b24      	ldr	r3, [pc, #144]	; (8004d10 <GrandState_Verita+0x2248>)
 8004c80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004c84:	9201      	str	r2, [sp, #4]
 8004c86:	685a      	ldr	r2, [r3, #4]
 8004c88:	9200      	str	r2, [sp, #0]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a14      	ldr	r2, [pc, #80]	; (8004ce0 <GrandState_Verita+0x2218>)
 8004c8e:	21dc      	movs	r1, #220	; 0xdc
 8004c90:	2028      	movs	r0, #40	; 0x28
 8004c92:	f001 fa17 	bl	80060c4 <ili9341_WriteStringNoBG>


			ili9341_DrawRGBImage(20, 90, 128, 128, (uint16_t*)px4_PIC_owlhor_VI_b);
 8004c96:	4b26      	ldr	r3, [pc, #152]	; (8004d30 <GrandState_Verita+0x2268>)
 8004c98:	9300      	str	r3, [sp, #0]
 8004c9a:	2380      	movs	r3, #128	; 0x80
 8004c9c:	2280      	movs	r2, #128	; 0x80
 8004c9e:	215a      	movs	r1, #90	; 0x5a
 8004ca0:	2014      	movs	r0, #20
 8004ca2:	f001 f87c 	bl	8005d9e <ili9341_DrawRGBImage>
			ili9341_DrawRGBImage(170, 90, 128, 128, (uint16_t*)px3_PIC_wipop_sc);
 8004ca6:	4b23      	ldr	r3, [pc, #140]	; (8004d34 <GrandState_Verita+0x226c>)
 8004ca8:	9300      	str	r3, [sp, #0]
 8004caa:	2380      	movs	r3, #128	; 0x80
 8004cac:	2280      	movs	r2, #128	; 0x80
 8004cae:	215a      	movs	r1, #90	; 0x5a
 8004cb0:	20aa      	movs	r0, #170	; 0xaa
 8004cb2:	f001 f874 	bl	8005d9e <ili9341_DrawRGBImage>

			GrandState = author;
 8004cb6:	4b17      	ldr	r3, [pc, #92]	; (8004d14 <GrandState_Verita+0x224c>)
 8004cb8:	2214      	movs	r2, #20
 8004cba:	701a      	strb	r2, [r3, #0]
			break; ////pre_author
 8004cbc:	e0f9      	b.n	8004eb2 <GrandState_Verita+0x23ea>

	case author:

			if(k_flag.cnt){ //// Back to lobby
 8004cbe:	4b16      	ldr	r3, [pc, #88]	; (8004d18 <GrandState_Verita+0x2250>)
 8004cc0:	789b      	ldrb	r3, [r3, #2]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	f000 80f2 	beq.w	8004eac <GrandState_Verita+0x23e4>
			GrandState = pre_ppun;
 8004cc8:	4b12      	ldr	r3, [pc, #72]	; (8004d14 <GrandState_Verita+0x224c>)
 8004cca:	2215      	movs	r2, #21
 8004ccc:	701a      	strb	r2, [r3, #0]
			k_flag.cnt = 0;
 8004cce:	4b12      	ldr	r3, [pc, #72]	; (8004d18 <GrandState_Verita+0x2250>)
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	709a      	strb	r2, [r3, #2]
			}
			break; ////author
 8004cd4:	e0ea      	b.n	8004eac <GrandState_Verita+0x23e4>
 8004cd6:	bf00      	nop
 8004cd8:	200008a8 	.word	0x200008a8
 8004cdc:	0800ff14 	.word	0x0800ff14
 8004ce0:	200006b8 	.word	0x200006b8
 8004ce4:	20000238 	.word	0x20000238
 8004ce8:	080101ac 	.word	0x080101ac
 8004cec:	20000230 	.word	0x20000230
 8004cf0:	080101b4 	.word	0x080101b4
 8004cf4:	080101fc 	.word	0x080101fc
 8004cf8:	0801020c 	.word	0x0801020c
 8004cfc:	08010218 	.word	0x08010218
 8004d00:	08010234 	.word	0x08010234
 8004d04:	08010248 	.word	0x08010248
 8004d08:	10260523 	.word	0x10260523
 8004d0c:	08010264 	.word	0x08010264
 8004d10:	20000228 	.word	0x20000228
 8004d14:	20000006 	.word	0x20000006
 8004d18:	20000890 	.word	0x20000890
 8004d1c:	40020800 	.word	0x40020800
 8004d20:	0801027c 	.word	0x0801027c
 8004d24:	08010284 	.word	0x08010284
 8004d28:	08010298 	.word	0x08010298
 8004d2c:	080102b0 	.word	0x080102b0
 8004d30:	08028108 	.word	0x08028108
 8004d34:	08020108 	.word	0x08020108

	case pre_ppun:
		stboxp.choice_set = bpoxy_no;
 8004d38:	4b60      	ldr	r3, [pc, #384]	; (8004ebc <GrandState_Verita+0x23f4>)
 8004d3a:	2203      	movs	r2, #3
 8004d3c:	705a      	strb	r2, [r3, #1]
		ili9341_FillRect(0, 30, 320, 210, cl_BLACK);
 8004d3e:	2300      	movs	r3, #0
 8004d40:	9300      	str	r3, [sp, #0]
 8004d42:	23d2      	movs	r3, #210	; 0xd2
 8004d44:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004d48:	211e      	movs	r1, #30
 8004d4a:	2000      	movs	r0, #0
 8004d4c:	f000 ffc4 	bl	8005cd8 <ili9341_FillRect>
		ili9341_FillRect(0, 0, 320, 30, cl_DARKGREEN);
 8004d50:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8004d54:	9300      	str	r3, [sp, #0]
 8004d56:	231e      	movs	r3, #30
 8004d58:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004d5c:	2100      	movs	r1, #0
 8004d5e:	2000      	movs	r0, #0
 8004d60:	f000 ffba 	bl	8005cd8 <ili9341_FillRect>

		sprintf(TextDispBuffer,"Advisors");
 8004d64:	4956      	ldr	r1, [pc, #344]	; (8004ec0 <GrandState_Verita+0x23f8>)
 8004d66:	4857      	ldr	r0, [pc, #348]	; (8004ec4 <GrandState_Verita+0x23fc>)
 8004d68:	f008 fd48 	bl	800d7fc <siprintf>
		ili9341_WriteStringNoBG(100, 5, TextDispBuffer, Font20, cl_BLACK);
 8004d6c:	4b56      	ldr	r3, [pc, #344]	; (8004ec8 <GrandState_Verita+0x2400>)
 8004d6e:	2200      	movs	r2, #0
 8004d70:	9201      	str	r2, [sp, #4]
 8004d72:	685a      	ldr	r2, [r3, #4]
 8004d74:	9200      	str	r2, [sp, #0]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a52      	ldr	r2, [pc, #328]	; (8004ec4 <GrandState_Verita+0x23fc>)
 8004d7a:	2105      	movs	r1, #5
 8004d7c:	2064      	movs	r0, #100	; 0x64
 8004d7e:	f001 f9a1 	bl	80060c4 <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"#include");
 8004d82:	4952      	ldr	r1, [pc, #328]	; (8004ecc <GrandState_Verita+0x2404>)
 8004d84:	484f      	ldr	r0, [pc, #316]	; (8004ec4 <GrandState_Verita+0x23fc>)
 8004d86:	f008 fd39 	bl	800d7fc <siprintf>
		ili9341_WriteStringNoBG(10, 35, TextDispBuffer, Font12, cl_CYAN);
 8004d8a:	4b51      	ldr	r3, [pc, #324]	; (8004ed0 <GrandState_Verita+0x2408>)
 8004d8c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004d90:	9201      	str	r2, [sp, #4]
 8004d92:	685a      	ldr	r2, [r3, #4]
 8004d94:	9200      	str	r2, [sp, #0]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a4a      	ldr	r2, [pc, #296]	; (8004ec4 <GrandState_Verita+0x23fc>)
 8004d9a:	2123      	movs	r1, #35	; 0x23
 8004d9c:	200a      	movs	r0, #10
 8004d9e:	f001 f991 	bl	80060c4 <ili9341_WriteStringNoBG>
		sprintf(TextDispBuffer,"#include");
 8004da2:	494a      	ldr	r1, [pc, #296]	; (8004ecc <GrandState_Verita+0x2404>)
 8004da4:	4847      	ldr	r0, [pc, #284]	; (8004ec4 <GrandState_Verita+0x23fc>)
 8004da6:	f008 fd29 	bl	800d7fc <siprintf>
		ili9341_WriteStringNoBG(10, 52, TextDispBuffer, Font12, cl_CYAN);
 8004daa:	4b49      	ldr	r3, [pc, #292]	; (8004ed0 <GrandState_Verita+0x2408>)
 8004dac:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004db0:	9201      	str	r2, [sp, #4]
 8004db2:	685a      	ldr	r2, [r3, #4]
 8004db4:	9200      	str	r2, [sp, #0]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a42      	ldr	r2, [pc, #264]	; (8004ec4 <GrandState_Verita+0x23fc>)
 8004dba:	2134      	movs	r1, #52	; 0x34
 8004dbc:	200a      	movs	r0, #10
 8004dbe:	f001 f981 	bl	80060c4 <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"Aj PI Pitiwut Teerakittikul");
 8004dc2:	4944      	ldr	r1, [pc, #272]	; (8004ed4 <GrandState_Verita+0x240c>)
 8004dc4:	483f      	ldr	r0, [pc, #252]	; (8004ec4 <GrandState_Verita+0x23fc>)
 8004dc6:	f008 fd19 	bl	800d7fc <siprintf>
		ili9341_WriteStringNoBG(75, 35, TextDispBuffer, Font12, cl_WHITE);
 8004dca:	4b41      	ldr	r3, [pc, #260]	; (8004ed0 <GrandState_Verita+0x2408>)
 8004dcc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004dd0:	9201      	str	r2, [sp, #4]
 8004dd2:	685a      	ldr	r2, [r3, #4]
 8004dd4:	9200      	str	r2, [sp, #0]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a3a      	ldr	r2, [pc, #232]	; (8004ec4 <GrandState_Verita+0x23fc>)
 8004dda:	2123      	movs	r1, #35	; 0x23
 8004ddc:	204b      	movs	r0, #75	; 0x4b
 8004dde:	f001 f971 	bl	80060c4 <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"P PUN Puttinart Archeewawanich");
 8004de2:	493d      	ldr	r1, [pc, #244]	; (8004ed8 <GrandState_Verita+0x2410>)
 8004de4:	4837      	ldr	r0, [pc, #220]	; (8004ec4 <GrandState_Verita+0x23fc>)
 8004de6:	f008 fd09 	bl	800d7fc <siprintf>
		ili9341_WriteStringNoBG(75, 52, TextDispBuffer, Font12, cl_WHITE);
 8004dea:	4b39      	ldr	r3, [pc, #228]	; (8004ed0 <GrandState_Verita+0x2408>)
 8004dec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004df0:	9201      	str	r2, [sp, #4]
 8004df2:	685a      	ldr	r2, [r3, #4]
 8004df4:	9200      	str	r2, [sp, #0]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a32      	ldr	r2, [pc, #200]	; (8004ec4 <GrandState_Verita+0x23fc>)
 8004dfa:	2134      	movs	r1, #52	; 0x34
 8004dfc:	204b      	movs	r0, #75	; 0x4b
 8004dfe:	f001 f961 	bl	80060c4 <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"Press Knob & Back to lobby");
 8004e02:	4936      	ldr	r1, [pc, #216]	; (8004edc <GrandState_Verita+0x2414>)
 8004e04:	482f      	ldr	r0, [pc, #188]	; (8004ec4 <GrandState_Verita+0x23fc>)
 8004e06:	f008 fcf9 	bl	800d7fc <siprintf>
		ili9341_WriteStringNoBG(40, 220, TextDispBuffer, Font12, cl_WHITE);
 8004e0a:	4b31      	ldr	r3, [pc, #196]	; (8004ed0 <GrandState_Verita+0x2408>)
 8004e0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004e10:	9201      	str	r2, [sp, #4]
 8004e12:	685a      	ldr	r2, [r3, #4]
 8004e14:	9200      	str	r2, [sp, #0]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a2a      	ldr	r2, [pc, #168]	; (8004ec4 <GrandState_Verita+0x23fc>)
 8004e1a:	21dc      	movs	r1, #220	; 0xdc
 8004e1c:	2028      	movs	r0, #40	; 0x28
 8004e1e:	f001 f951 	bl	80060c4 <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"Positive Aura: No crash");
 8004e22:	492f      	ldr	r1, [pc, #188]	; (8004ee0 <GrandState_Verita+0x2418>)
 8004e24:	4827      	ldr	r0, [pc, #156]	; (8004ec4 <GrandState_Verita+0x23fc>)
 8004e26:	f008 fce9 	bl	800d7fc <siprintf>
		ili9341_WriteStringNoBG(30, 70, TextDispBuffer, Font16, cl_GREENYELLOW);
 8004e2a:	4b2e      	ldr	r3, [pc, #184]	; (8004ee4 <GrandState_Verita+0x241c>)
 8004e2c:	f64a 72e5 	movw	r2, #45029	; 0xafe5
 8004e30:	9201      	str	r2, [sp, #4]
 8004e32:	685a      	ldr	r2, [r3, #4]
 8004e34:	9200      	str	r2, [sp, #0]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a22      	ldr	r2, [pc, #136]	; (8004ec4 <GrandState_Verita+0x23fc>)
 8004e3a:	2146      	movs	r1, #70	; 0x46
 8004e3c:	201e      	movs	r0, #30
 8004e3e:	f001 f941 	bl	80060c4 <ili9341_WriteStringNoBG>

		ili9341_DrawRGBImage(20, 90, 128, 128, (uint16_t*)px0_PIC_ajpi);
 8004e42:	4b29      	ldr	r3, [pc, #164]	; (8004ee8 <GrandState_Verita+0x2420>)
 8004e44:	9300      	str	r3, [sp, #0]
 8004e46:	2380      	movs	r3, #128	; 0x80
 8004e48:	2280      	movs	r2, #128	; 0x80
 8004e4a:	215a      	movs	r1, #90	; 0x5a
 8004e4c:	2014      	movs	r0, #20
 8004e4e:	f000 ffa6 	bl	8005d9e <ili9341_DrawRGBImage>
		ili9341_DrawRGBImage(170, 90, 126, 127, (uint16_t*)px1_PIC_ppun);
 8004e52:	4b26      	ldr	r3, [pc, #152]	; (8004eec <GrandState_Verita+0x2424>)
 8004e54:	9300      	str	r3, [sp, #0]
 8004e56:	237f      	movs	r3, #127	; 0x7f
 8004e58:	227e      	movs	r2, #126	; 0x7e
 8004e5a:	215a      	movs	r1, #90	; 0x5a
 8004e5c:	20aa      	movs	r0, #170	; 0xaa
 8004e5e:	f000 ff9e 	bl	8005d9e <ili9341_DrawRGBImage>

		GrandState = ppun;
 8004e62:	4b23      	ldr	r3, [pc, #140]	; (8004ef0 <GrandState_Verita+0x2428>)
 8004e64:	2216      	movs	r2, #22
 8004e66:	701a      	strb	r2, [r3, #0]
		break; ////pre_ppun
 8004e68:	e023      	b.n	8004eb2 <GrandState_Verita+0x23ea>

	case ppun:

		if(k_flag.cnt){ //// Back to lobby
 8004e6a:	4b22      	ldr	r3, [pc, #136]	; (8004ef4 <GrandState_Verita+0x242c>)
 8004e6c:	789b      	ldrb	r3, [r3, #2]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d01e      	beq.n	8004eb0 <GrandState_Verita+0x23e8>
		GrandState = pre_lobby;
 8004e72:	4b1f      	ldr	r3, [pc, #124]	; (8004ef0 <GrandState_Verita+0x2428>)
 8004e74:	2201      	movs	r2, #1
 8004e76:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(RelayClient_GPIO_Port, RelayClient_Pin, GPIO_PIN_RESET);
 8004e78:	2200      	movs	r2, #0
 8004e7a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004e7e:	481e      	ldr	r0, [pc, #120]	; (8004ef8 <GrandState_Verita+0x2430>)
 8004e80:	f002 fc9a 	bl	80077b8 <HAL_GPIO_WritePin>
		k_flag.cnt = 0;
 8004e84:	4b1b      	ldr	r3, [pc, #108]	; (8004ef4 <GrandState_Verita+0x242c>)
 8004e86:	2200      	movs	r2, #0
 8004e88:	709a      	strb	r2, [r3, #2]
		}
		break; ////ppun
 8004e8a:	e011      	b.n	8004eb0 <GrandState_Verita+0x23e8>
		break; // lobby
 8004e8c:	bf00      	nop
 8004e8e:	e010      	b.n	8004eb2 <GrandState_Verita+0x23ea>
		break;
 8004e90:	bf00      	nop
 8004e92:	e00e      	b.n	8004eb2 <GrandState_Verita+0x23ea>
		break; //hw_chk
 8004e94:	bf00      	nop
 8004e96:	e00c      	b.n	8004eb2 <GrandState_Verita+0x23ea>
		break;
 8004e98:	bf00      	nop
 8004e9a:	e00a      	b.n	8004eb2 <GrandState_Verita+0x23ea>
			break; //gpio_chk
 8004e9c:	bf00      	nop
 8004e9e:	e008      	b.n	8004eb2 <GrandState_Verita+0x23ea>
		break; // monitor
 8004ea0:	bf00      	nop
 8004ea2:	e006      	b.n	8004eb2 <GrandState_Verita+0x23ea>
		break;
 8004ea4:	bf00      	nop
 8004ea6:	e004      	b.n	8004eb2 <GrandState_Verita+0x23ea>
		break; ////about
 8004ea8:	bf00      	nop
 8004eaa:	e002      	b.n	8004eb2 <GrandState_Verita+0x23ea>
			break; ////author
 8004eac:	bf00      	nop
 8004eae:	e000      	b.n	8004eb2 <GrandState_Verita+0x23ea>
		break; ////ppun
 8004eb0:	bf00      	nop
	}
}
 8004eb2:	bf00      	nop
 8004eb4:	370c      	adds	r7, #12
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd90      	pop	{r4, r7, pc}
 8004eba:	bf00      	nop
 8004ebc:	200008a8 	.word	0x200008a8
 8004ec0:	080102c8 	.word	0x080102c8
 8004ec4:	200006b8 	.word	0x200006b8
 8004ec8:	20000238 	.word	0x20000238
 8004ecc:	080102d4 	.word	0x080102d4
 8004ed0:	20000228 	.word	0x20000228
 8004ed4:	080102e0 	.word	0x080102e0
 8004ed8:	080102fc 	.word	0x080102fc
 8004edc:	0801031c 	.word	0x0801031c
 8004ee0:	08010338 	.word	0x08010338
 8004ee4:	20000230 	.word	0x20000230
 8004ee8:	08010404 	.word	0x08010404
 8004eec:	08018404 	.word	0x08018404
 8004ef0:	20000006 	.word	0x20000006
 8004ef4:	20000890 	.word	0x20000890
 8004ef8:	40020800 	.word	0x40020800
 8004efc:	00000000 	.word	0x00000000

08004f00 <ADCTVolta>:

float ADCTVolta(uint16_t btt){return (btt /4096.0) * 3.3;}
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b082      	sub	sp, #8
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	4603      	mov	r3, r0
 8004f08:	80fb      	strh	r3, [r7, #6]
 8004f0a:	88fb      	ldrh	r3, [r7, #6]
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f7fb fb11 	bl	8000534 <__aeabi_i2d>
 8004f12:	f04f 0200 	mov.w	r2, #0
 8004f16:	4b10      	ldr	r3, [pc, #64]	; (8004f58 <ADCTVolta+0x58>)
 8004f18:	f7fb fca0 	bl	800085c <__aeabi_ddiv>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	460b      	mov	r3, r1
 8004f20:	4610      	mov	r0, r2
 8004f22:	4619      	mov	r1, r3
 8004f24:	a30a      	add	r3, pc, #40	; (adr r3, 8004f50 <ADCTVolta+0x50>)
 8004f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f2a:	f7fb fb6d 	bl	8000608 <__aeabi_dmul>
 8004f2e:	4602      	mov	r2, r0
 8004f30:	460b      	mov	r3, r1
 8004f32:	4610      	mov	r0, r2
 8004f34:	4619      	mov	r1, r3
 8004f36:	f7fb fe5f 	bl	8000bf8 <__aeabi_d2f>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	ee07 3a90 	vmov	s15, r3
 8004f40:	eeb0 0a67 	vmov.f32	s0, s15
 8004f44:	3708      	adds	r7, #8
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}
 8004f4a:	bf00      	nop
 8004f4c:	f3af 8000 	nop.w
 8004f50:	66666666 	.word	0x66666666
 8004f54:	400a6666 	.word	0x400a6666
 8004f58:	40b00000 	.word	0x40b00000
 8004f5c:	00000000 	.word	0x00000000

08004f60 <TempEquat>:
float TempEquat(float Vs){
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b082      	sub	sp, #8
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	ed87 0a01 	vstr	s0, [r7, #4]
	//Vs = V tmp read , V25= 0.76V, Avg_slope = 2.5 mV
	return ((Vs - 0.76)/(0.0025)) + 25.0; //2.5*0.001
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f7fb faf4 	bl	8000558 <__aeabi_f2d>
 8004f70:	a314      	add	r3, pc, #80	; (adr r3, 8004fc4 <TempEquat+0x64>)
 8004f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f76:	f7fb f98f 	bl	8000298 <__aeabi_dsub>
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	460b      	mov	r3, r1
 8004f7e:	4610      	mov	r0, r2
 8004f80:	4619      	mov	r1, r3
 8004f82:	a312      	add	r3, pc, #72	; (adr r3, 8004fcc <TempEquat+0x6c>)
 8004f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f88:	f7fb fc68 	bl	800085c <__aeabi_ddiv>
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	460b      	mov	r3, r1
 8004f90:	4610      	mov	r0, r2
 8004f92:	4619      	mov	r1, r3
 8004f94:	f04f 0200 	mov.w	r2, #0
 8004f98:	4b09      	ldr	r3, [pc, #36]	; (8004fc0 <TempEquat+0x60>)
 8004f9a:	f7fb f97f 	bl	800029c <__adddf3>
 8004f9e:	4602      	mov	r2, r0
 8004fa0:	460b      	mov	r3, r1
 8004fa2:	4610      	mov	r0, r2
 8004fa4:	4619      	mov	r1, r3
 8004fa6:	f7fb fe27 	bl	8000bf8 <__aeabi_d2f>
 8004faa:	4603      	mov	r3, r0
 8004fac:	ee07 3a90 	vmov	s15, r3
}
 8004fb0:	eeb0 0a67 	vmov.f32	s0, s15
 8004fb4:	3708      	adds	r7, #8
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}
 8004fba:	bf00      	nop
 8004fbc:	f3af 8000 	nop.w
 8004fc0:	40390000 	.word	0x40390000
 8004fc4:	851eb852 	.word	0x851eb852
 8004fc8:	3fe851eb 	.word	0x3fe851eb
 8004fcc:	47ae147b 	.word	0x47ae147b
 8004fd0:	3f647ae1 	.word	0x3f647ae1

08004fd4 <resetgpio_char>:
		 tyyy |= ( GPIO_NOPULL << (9 * 2U));
		 tyyy |= ( GPIO_NOPULL << (10 * 2U));
		 GPIOA->PUPDR = tyyy;
}

void resetgpio_char(){
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	af00      	add	r7, sp, #0

	sprintf(WR_A_PUPDR, "A_PUR: ");
 8004fd8:	4912      	ldr	r1, [pc, #72]	; (8005024 <resetgpio_char+0x50>)
 8004fda:	4813      	ldr	r0, [pc, #76]	; (8005028 <resetgpio_char+0x54>)
 8004fdc:	f008 fc0e 	bl	800d7fc <siprintf>
	sprintf(WR_B_PUPDR, "B_PUR: ");
 8004fe0:	4912      	ldr	r1, [pc, #72]	; (800502c <resetgpio_char+0x58>)
 8004fe2:	4813      	ldr	r0, [pc, #76]	; (8005030 <resetgpio_char+0x5c>)
 8004fe4:	f008 fc0a 	bl	800d7fc <siprintf>
	sprintf(WR_C_PUPDR, "C_PUR: ");
 8004fe8:	4912      	ldr	r1, [pc, #72]	; (8005034 <resetgpio_char+0x60>)
 8004fea:	4813      	ldr	r0, [pc, #76]	; (8005038 <resetgpio_char+0x64>)
 8004fec:	f008 fc06 	bl	800d7fc <siprintf>

	sprintf(WR_A_OPP, "A_OPP: ");
 8004ff0:	4912      	ldr	r1, [pc, #72]	; (800503c <resetgpio_char+0x68>)
 8004ff2:	4813      	ldr	r0, [pc, #76]	; (8005040 <resetgpio_char+0x6c>)
 8004ff4:	f008 fc02 	bl	800d7fc <siprintf>
	sprintf(WR_B_OPP, "B_OPP: ");
 8004ff8:	4912      	ldr	r1, [pc, #72]	; (8005044 <resetgpio_char+0x70>)
 8004ffa:	4813      	ldr	r0, [pc, #76]	; (8005048 <resetgpio_char+0x74>)
 8004ffc:	f008 fbfe 	bl	800d7fc <siprintf>
	sprintf(WR_C_OPP, "C_OPP: ");
 8005000:	4912      	ldr	r1, [pc, #72]	; (800504c <resetgpio_char+0x78>)
 8005002:	4813      	ldr	r0, [pc, #76]	; (8005050 <resetgpio_char+0x7c>)
 8005004:	f008 fbfa 	bl	800d7fc <siprintf>

	sprintf(WR_A_OOD, "A_OOD: ");
 8005008:	4912      	ldr	r1, [pc, #72]	; (8005054 <resetgpio_char+0x80>)
 800500a:	4813      	ldr	r0, [pc, #76]	; (8005058 <resetgpio_char+0x84>)
 800500c:	f008 fbf6 	bl	800d7fc <siprintf>
	sprintf(WR_B_OOD, "B_OOD: ");
 8005010:	4912      	ldr	r1, [pc, #72]	; (800505c <resetgpio_char+0x88>)
 8005012:	4813      	ldr	r0, [pc, #76]	; (8005060 <resetgpio_char+0x8c>)
 8005014:	f008 fbf2 	bl	800d7fc <siprintf>
	sprintf(WR_C_OOD, "C_OOD: ");
 8005018:	4912      	ldr	r1, [pc, #72]	; (8005064 <resetgpio_char+0x90>)
 800501a:	4813      	ldr	r0, [pc, #76]	; (8005068 <resetgpio_char+0x94>)
 800501c:	f008 fbee 	bl	800d7fc <siprintf>
}
 8005020:	bf00      	nop
 8005022:	bd80      	pop	{r7, pc}
 8005024:	08010350 	.word	0x08010350
 8005028:	2000005c 	.word	0x2000005c
 800502c:	08010358 	.word	0x08010358
 8005030:	2000007c 	.word	0x2000007c
 8005034:	08010360 	.word	0x08010360
 8005038:	2000009c 	.word	0x2000009c
 800503c:	08010368 	.word	0x08010368
 8005040:	200000bc 	.word	0x200000bc
 8005044:	08010370 	.word	0x08010370
 8005048:	200000dc 	.word	0x200000dc
 800504c:	08010378 	.word	0x08010378
 8005050:	200000fc 	.word	0x200000fc
 8005054:	08010380 	.word	0x08010380
 8005058:	2000011c 	.word	0x2000011c
 800505c:	08010388 	.word	0x08010388
 8005060:	2000013c 	.word	0x2000013c
 8005064:	08010390 	.word	0x08010390
 8005068:	2000015c 	.word	0x2000015c

0800506c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800506c:	b580      	push	{r7, lr}
 800506e:	b082      	sub	sp, #8
 8005070:	af00      	add	r7, sp, #0
 8005072:	4603      	mov	r3, r0
 8005074:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13){
 8005076:	88fb      	ldrh	r3, [r7, #6]
 8005078:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800507c:	d10f      	bne.n	800509e <HAL_GPIO_EXTI_Callback+0x32>
		//INA219_BitReset(&hi2c1, INA219_ADDR_1);
		buzzr.flag = 8;
 800507e:	4b0e      	ldr	r3, [pc, #56]	; (80050b8 <HAL_GPIO_EXTI_Callback+0x4c>)
 8005080:	2208      	movs	r2, #8
 8005082:	701a      	strb	r2, [r3, #0]
		buzzr.priod_up = 250;
 8005084:	4b0c      	ldr	r3, [pc, #48]	; (80050b8 <HAL_GPIO_EXTI_Callback+0x4c>)
 8005086:	22fa      	movs	r2, #250	; 0xfa
 8005088:	805a      	strh	r2, [r3, #2]
		buzzr.priod_dn = 100;
 800508a:	4b0b      	ldr	r3, [pc, #44]	; (80050b8 <HAL_GPIO_EXTI_Callback+0x4c>)
 800508c:	2264      	movs	r2, #100	; 0x64
 800508e:	809a      	strh	r2, [r3, #4]
		buzzer_scream_cnt();
 8005090:	f7fd fca2 	bl	80029d8 <buzzer_scream_cnt>
		//// bootloader test
		//GrandState = s_bootloader;
		//GrandState = init;

		Tx_UART_Verita_Command(&huart6, VRC_Flag_ger, VRF_GPIO_Runalltest);
 8005094:	2202      	movs	r2, #2
 8005096:	21a1      	movs	r1, #161	; 0xa1
 8005098:	4808      	ldr	r0, [pc, #32]	; (80050bc <HAL_GPIO_EXTI_Callback+0x50>)
 800509a:	f7fc fac9 	bl	8001630 <Tx_UART_Verita_Command>
		//Tx_UART_Verita_Command(&huart6, VRC_Request, VR_FWID);

		}

	//// knob rotter button pressed
	if(GPIO_Pin == GPIO_PIN_7){
 800509e:	88fb      	ldrh	r3, [r7, #6]
 80050a0:	2b80      	cmp	r3, #128	; 0x80
 80050a2:	d105      	bne.n	80050b0 <HAL_GPIO_EXTI_Callback+0x44>
		k_flag.cnt++;
 80050a4:	4b06      	ldr	r3, [pc, #24]	; (80050c0 <HAL_GPIO_EXTI_Callback+0x54>)
 80050a6:	789b      	ldrb	r3, [r3, #2]
 80050a8:	3301      	adds	r3, #1
 80050aa:	b2da      	uxtb	r2, r3
 80050ac:	4b04      	ldr	r3, [pc, #16]	; (80050c0 <HAL_GPIO_EXTI_Callback+0x54>)
 80050ae:	709a      	strb	r2, [r3, #2]
	}
}
 80050b0:	bf00      	nop
 80050b2:	3708      	adds	r7, #8
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}
 80050b8:	20000878 	.word	0x20000878
 80050bc:	20000614 	.word	0x20000614
 80050c0:	20000890 	.word	0x20000890

080050c4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b082      	sub	sp, #8
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
	if(htim == &htim10){
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	4a07      	ldr	r2, [pc, #28]	; (80050ec <HAL_TIM_PeriodElapsedCallback+0x28>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d106      	bne.n	80050e2 <HAL_TIM_PeriodElapsedCallback+0x1e>
		_millis++;
 80050d4:	4b06      	ldr	r3, [pc, #24]	; (80050f0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	3301      	adds	r3, #1
 80050da:	4a05      	ldr	r2, [pc, #20]	; (80050f0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80050dc:	6013      	str	r3, [r2, #0]
		//// Timer interrupt
		buzzer_scream_cnt();
 80050de:	f7fd fc7b 	bl	80029d8 <buzzer_scream_cnt>
	}
}
 80050e2:	bf00      	nop
 80050e4:	3708      	adds	r7, #8
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
 80050ea:	bf00      	nop
 80050ec:	20000544 	.word	0x20000544
 80050f0:	20000870 	.word	0x20000870

080050f4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b082      	sub	sp, #8
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
	Rx_Verita_engine_callBak(RxBufferMtCl, &VRB_CL); //// try using only 1 slot 9 Buffer
 80050fc:	4905      	ldr	r1, [pc, #20]	; (8005114 <HAL_UART_RxCpltCallback+0x20>)
 80050fe:	4806      	ldr	r0, [pc, #24]	; (8005118 <HAL_UART_RxCpltCallback+0x24>)
 8005100:	f7fc f926 	bl	8001350 <Rx_Verita_engine_callBak>
	Tx_Rq_Verita_engine(&huart6, &VRB_CL);
 8005104:	4903      	ldr	r1, [pc, #12]	; (8005114 <HAL_UART_RxCpltCallback+0x20>)
 8005106:	4805      	ldr	r0, [pc, #20]	; (800511c <HAL_UART_RxCpltCallback+0x28>)
 8005108:	f7fc fa18 	bl	800153c <Tx_Rq_Verita_engine>
}
 800510c:	bf00      	nop
 800510e:	3708      	adds	r7, #8
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}
 8005114:	20000784 	.word	0x20000784
 8005118:	200007e8 	.word	0x200007e8
 800511c:	20000614 	.word	0x20000614

08005120 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005120:	b480      	push	{r7}
 8005122:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005124:	b672      	cpsid	i
}
 8005126:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005128:	e7fe      	b.n	8005128 <Error_Handler+0x8>
	...

0800512c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b082      	sub	sp, #8
 8005130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005132:	2300      	movs	r3, #0
 8005134:	607b      	str	r3, [r7, #4]
 8005136:	4b10      	ldr	r3, [pc, #64]	; (8005178 <HAL_MspInit+0x4c>)
 8005138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800513a:	4a0f      	ldr	r2, [pc, #60]	; (8005178 <HAL_MspInit+0x4c>)
 800513c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005140:	6453      	str	r3, [r2, #68]	; 0x44
 8005142:	4b0d      	ldr	r3, [pc, #52]	; (8005178 <HAL_MspInit+0x4c>)
 8005144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005146:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800514a:	607b      	str	r3, [r7, #4]
 800514c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800514e:	2300      	movs	r3, #0
 8005150:	603b      	str	r3, [r7, #0]
 8005152:	4b09      	ldr	r3, [pc, #36]	; (8005178 <HAL_MspInit+0x4c>)
 8005154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005156:	4a08      	ldr	r2, [pc, #32]	; (8005178 <HAL_MspInit+0x4c>)
 8005158:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800515c:	6413      	str	r3, [r2, #64]	; 0x40
 800515e:	4b06      	ldr	r3, [pc, #24]	; (8005178 <HAL_MspInit+0x4c>)
 8005160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005162:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005166:	603b      	str	r3, [r7, #0]
 8005168:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800516a:	2007      	movs	r0, #7
 800516c:	f001 fd36 	bl	8006bdc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005170:	bf00      	nop
 8005172:	3708      	adds	r7, #8
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}
 8005178:	40023800 	.word	0x40023800

0800517c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b08a      	sub	sp, #40	; 0x28
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005184:	f107 0314 	add.w	r3, r7, #20
 8005188:	2200      	movs	r2, #0
 800518a:	601a      	str	r2, [r3, #0]
 800518c:	605a      	str	r2, [r3, #4]
 800518e:	609a      	str	r2, [r3, #8]
 8005190:	60da      	str	r2, [r3, #12]
 8005192:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a21      	ldr	r2, [pc, #132]	; (8005220 <HAL_I2C_MspInit+0xa4>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d13c      	bne.n	8005218 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800519e:	2300      	movs	r3, #0
 80051a0:	613b      	str	r3, [r7, #16]
 80051a2:	4b20      	ldr	r3, [pc, #128]	; (8005224 <HAL_I2C_MspInit+0xa8>)
 80051a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051a6:	4a1f      	ldr	r2, [pc, #124]	; (8005224 <HAL_I2C_MspInit+0xa8>)
 80051a8:	f043 0302 	orr.w	r3, r3, #2
 80051ac:	6313      	str	r3, [r2, #48]	; 0x30
 80051ae:	4b1d      	ldr	r3, [pc, #116]	; (8005224 <HAL_I2C_MspInit+0xa8>)
 80051b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051b2:	f003 0302 	and.w	r3, r3, #2
 80051b6:	613b      	str	r3, [r7, #16]
 80051b8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80051ba:	f44f 7340 	mov.w	r3, #768	; 0x300
 80051be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80051c0:	2312      	movs	r3, #18
 80051c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051c4:	2300      	movs	r3, #0
 80051c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051c8:	2303      	movs	r3, #3
 80051ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80051cc:	2304      	movs	r3, #4
 80051ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051d0:	f107 0314 	add.w	r3, r7, #20
 80051d4:	4619      	mov	r1, r3
 80051d6:	4814      	ldr	r0, [pc, #80]	; (8005228 <HAL_I2C_MspInit+0xac>)
 80051d8:	f002 f952 	bl	8007480 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80051dc:	2300      	movs	r3, #0
 80051de:	60fb      	str	r3, [r7, #12]
 80051e0:	4b10      	ldr	r3, [pc, #64]	; (8005224 <HAL_I2C_MspInit+0xa8>)
 80051e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e4:	4a0f      	ldr	r2, [pc, #60]	; (8005224 <HAL_I2C_MspInit+0xa8>)
 80051e6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80051ea:	6413      	str	r3, [r2, #64]	; 0x40
 80051ec:	4b0d      	ldr	r3, [pc, #52]	; (8005224 <HAL_I2C_MspInit+0xa8>)
 80051ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80051f4:	60fb      	str	r3, [r7, #12]
 80051f6:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80051f8:	2200      	movs	r2, #0
 80051fa:	2100      	movs	r1, #0
 80051fc:	201f      	movs	r0, #31
 80051fe:	f001 fcf8 	bl	8006bf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8005202:	201f      	movs	r0, #31
 8005204:	f001 fd11 	bl	8006c2a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8005208:	2200      	movs	r2, #0
 800520a:	2100      	movs	r1, #0
 800520c:	2020      	movs	r0, #32
 800520e:	f001 fcf0 	bl	8006bf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8005212:	2020      	movs	r0, #32
 8005214:	f001 fd09 	bl	8006c2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8005218:	bf00      	nop
 800521a:	3728      	adds	r7, #40	; 0x28
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}
 8005220:	40005400 	.word	0x40005400
 8005224:	40023800 	.word	0x40023800
 8005228:	40020400 	.word	0x40020400

0800522c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b08a      	sub	sp, #40	; 0x28
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005234:	f107 0314 	add.w	r3, r7, #20
 8005238:	2200      	movs	r2, #0
 800523a:	601a      	str	r2, [r3, #0]
 800523c:	605a      	str	r2, [r3, #4]
 800523e:	609a      	str	r2, [r3, #8]
 8005240:	60da      	str	r2, [r3, #12]
 8005242:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a19      	ldr	r2, [pc, #100]	; (80052b0 <HAL_SPI_MspInit+0x84>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d12c      	bne.n	80052a8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800524e:	2300      	movs	r3, #0
 8005250:	613b      	str	r3, [r7, #16]
 8005252:	4b18      	ldr	r3, [pc, #96]	; (80052b4 <HAL_SPI_MspInit+0x88>)
 8005254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005256:	4a17      	ldr	r2, [pc, #92]	; (80052b4 <HAL_SPI_MspInit+0x88>)
 8005258:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800525c:	6413      	str	r3, [r2, #64]	; 0x40
 800525e:	4b15      	ldr	r3, [pc, #84]	; (80052b4 <HAL_SPI_MspInit+0x88>)
 8005260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005262:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005266:	613b      	str	r3, [r7, #16]
 8005268:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800526a:	2300      	movs	r3, #0
 800526c:	60fb      	str	r3, [r7, #12]
 800526e:	4b11      	ldr	r3, [pc, #68]	; (80052b4 <HAL_SPI_MspInit+0x88>)
 8005270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005272:	4a10      	ldr	r2, [pc, #64]	; (80052b4 <HAL_SPI_MspInit+0x88>)
 8005274:	f043 0304 	orr.w	r3, r3, #4
 8005278:	6313      	str	r3, [r2, #48]	; 0x30
 800527a:	4b0e      	ldr	r3, [pc, #56]	; (80052b4 <HAL_SPI_MspInit+0x88>)
 800527c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800527e:	f003 0304 	and.w	r3, r3, #4
 8005282:	60fb      	str	r3, [r7, #12]
 8005284:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8005286:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800528a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800528c:	2302      	movs	r3, #2
 800528e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005290:	2300      	movs	r3, #0
 8005292:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005294:	2303      	movs	r3, #3
 8005296:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8005298:	2306      	movs	r3, #6
 800529a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800529c:	f107 0314 	add.w	r3, r7, #20
 80052a0:	4619      	mov	r1, r3
 80052a2:	4805      	ldr	r0, [pc, #20]	; (80052b8 <HAL_SPI_MspInit+0x8c>)
 80052a4:	f002 f8ec 	bl	8007480 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80052a8:	bf00      	nop
 80052aa:	3728      	adds	r7, #40	; 0x28
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}
 80052b0:	40003c00 	.word	0x40003c00
 80052b4:	40023800 	.word	0x40023800
 80052b8:	40020800 	.word	0x40020800

080052bc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b08a      	sub	sp, #40	; 0x28
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052c4:	f107 0314 	add.w	r3, r7, #20
 80052c8:	2200      	movs	r2, #0
 80052ca:	601a      	str	r2, [r3, #0]
 80052cc:	605a      	str	r2, [r3, #4]
 80052ce:	609a      	str	r2, [r3, #8]
 80052d0:	60da      	str	r2, [r3, #12]
 80052d2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a19      	ldr	r2, [pc, #100]	; (8005340 <HAL_TIM_Encoder_MspInit+0x84>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d12b      	bne.n	8005336 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80052de:	2300      	movs	r3, #0
 80052e0:	613b      	str	r3, [r7, #16]
 80052e2:	4b18      	ldr	r3, [pc, #96]	; (8005344 <HAL_TIM_Encoder_MspInit+0x88>)
 80052e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e6:	4a17      	ldr	r2, [pc, #92]	; (8005344 <HAL_TIM_Encoder_MspInit+0x88>)
 80052e8:	f043 0302 	orr.w	r3, r3, #2
 80052ec:	6413      	str	r3, [r2, #64]	; 0x40
 80052ee:	4b15      	ldr	r3, [pc, #84]	; (8005344 <HAL_TIM_Encoder_MspInit+0x88>)
 80052f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f2:	f003 0302 	and.w	r3, r3, #2
 80052f6:	613b      	str	r3, [r7, #16]
 80052f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80052fa:	2300      	movs	r3, #0
 80052fc:	60fb      	str	r3, [r7, #12]
 80052fe:	4b11      	ldr	r3, [pc, #68]	; (8005344 <HAL_TIM_Encoder_MspInit+0x88>)
 8005300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005302:	4a10      	ldr	r2, [pc, #64]	; (8005344 <HAL_TIM_Encoder_MspInit+0x88>)
 8005304:	f043 0301 	orr.w	r3, r3, #1
 8005308:	6313      	str	r3, [r2, #48]	; 0x30
 800530a:	4b0e      	ldr	r3, [pc, #56]	; (8005344 <HAL_TIM_Encoder_MspInit+0x88>)
 800530c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800530e:	f003 0301 	and.w	r3, r3, #1
 8005312:	60fb      	str	r3, [r7, #12]
 8005314:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005316:	23c0      	movs	r3, #192	; 0xc0
 8005318:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800531a:	2302      	movs	r3, #2
 800531c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800531e:	2300      	movs	r3, #0
 8005320:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005322:	2300      	movs	r3, #0
 8005324:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005326:	2302      	movs	r3, #2
 8005328:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800532a:	f107 0314 	add.w	r3, r7, #20
 800532e:	4619      	mov	r1, r3
 8005330:	4805      	ldr	r0, [pc, #20]	; (8005348 <HAL_TIM_Encoder_MspInit+0x8c>)
 8005332:	f002 f8a5 	bl	8007480 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8005336:	bf00      	nop
 8005338:	3728      	adds	r7, #40	; 0x28
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}
 800533e:	bf00      	nop
 8005340:	40000400 	.word	0x40000400
 8005344:	40023800 	.word	0x40023800
 8005348:	40020000 	.word	0x40020000

0800534c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b084      	sub	sp, #16
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a0e      	ldr	r2, [pc, #56]	; (8005394 <HAL_TIM_Base_MspInit+0x48>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d115      	bne.n	800538a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 800535e:	2300      	movs	r3, #0
 8005360:	60fb      	str	r3, [r7, #12]
 8005362:	4b0d      	ldr	r3, [pc, #52]	; (8005398 <HAL_TIM_Base_MspInit+0x4c>)
 8005364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005366:	4a0c      	ldr	r2, [pc, #48]	; (8005398 <HAL_TIM_Base_MspInit+0x4c>)
 8005368:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800536c:	6453      	str	r3, [r2, #68]	; 0x44
 800536e:	4b0a      	ldr	r3, [pc, #40]	; (8005398 <HAL_TIM_Base_MspInit+0x4c>)
 8005370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005376:	60fb      	str	r3, [r7, #12]
 8005378:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800537a:	2200      	movs	r2, #0
 800537c:	2100      	movs	r1, #0
 800537e:	2019      	movs	r0, #25
 8005380:	f001 fc37 	bl	8006bf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8005384:	2019      	movs	r0, #25
 8005386:	f001 fc50 	bl	8006c2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 800538a:	bf00      	nop
 800538c:	3710      	adds	r7, #16
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}
 8005392:	bf00      	nop
 8005394:	40014400 	.word	0x40014400
 8005398:	40023800 	.word	0x40023800

0800539c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b08e      	sub	sp, #56	; 0x38
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80053a8:	2200      	movs	r2, #0
 80053aa:	601a      	str	r2, [r3, #0]
 80053ac:	605a      	str	r2, [r3, #4]
 80053ae:	609a      	str	r2, [r3, #8]
 80053b0:	60da      	str	r2, [r3, #12]
 80053b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a74      	ldr	r2, [pc, #464]	; (800558c <HAL_UART_MspInit+0x1f0>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d135      	bne.n	800542a <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80053be:	2300      	movs	r3, #0
 80053c0:	623b      	str	r3, [r7, #32]
 80053c2:	4b73      	ldr	r3, [pc, #460]	; (8005590 <HAL_UART_MspInit+0x1f4>)
 80053c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053c6:	4a72      	ldr	r2, [pc, #456]	; (8005590 <HAL_UART_MspInit+0x1f4>)
 80053c8:	f043 0310 	orr.w	r3, r3, #16
 80053cc:	6453      	str	r3, [r2, #68]	; 0x44
 80053ce:	4b70      	ldr	r3, [pc, #448]	; (8005590 <HAL_UART_MspInit+0x1f4>)
 80053d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053d2:	f003 0310 	and.w	r3, r3, #16
 80053d6:	623b      	str	r3, [r7, #32]
 80053d8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80053da:	2300      	movs	r3, #0
 80053dc:	61fb      	str	r3, [r7, #28]
 80053de:	4b6c      	ldr	r3, [pc, #432]	; (8005590 <HAL_UART_MspInit+0x1f4>)
 80053e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053e2:	4a6b      	ldr	r2, [pc, #428]	; (8005590 <HAL_UART_MspInit+0x1f4>)
 80053e4:	f043 0301 	orr.w	r3, r3, #1
 80053e8:	6313      	str	r3, [r2, #48]	; 0x30
 80053ea:	4b69      	ldr	r3, [pc, #420]	; (8005590 <HAL_UART_MspInit+0x1f4>)
 80053ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ee:	f003 0301 	and.w	r3, r3, #1
 80053f2:	61fb      	str	r3, [r7, #28]
 80053f4:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80053f6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80053fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053fc:	2302      	movs	r3, #2
 80053fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005400:	2300      	movs	r3, #0
 8005402:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005404:	2303      	movs	r3, #3
 8005406:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005408:	2307      	movs	r3, #7
 800540a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800540c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005410:	4619      	mov	r1, r3
 8005412:	4860      	ldr	r0, [pc, #384]	; (8005594 <HAL_UART_MspInit+0x1f8>)
 8005414:	f002 f834 	bl	8007480 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8005418:	2200      	movs	r2, #0
 800541a:	2100      	movs	r1, #0
 800541c:	2025      	movs	r0, #37	; 0x25
 800541e:	f001 fbe8 	bl	8006bf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005422:	2025      	movs	r0, #37	; 0x25
 8005424:	f001 fc01 	bl	8006c2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8005428:	e0ab      	b.n	8005582 <HAL_UART_MspInit+0x1e6>
  else if(huart->Instance==USART2)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a5a      	ldr	r2, [pc, #360]	; (8005598 <HAL_UART_MspInit+0x1fc>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d12c      	bne.n	800548e <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005434:	2300      	movs	r3, #0
 8005436:	61bb      	str	r3, [r7, #24]
 8005438:	4b55      	ldr	r3, [pc, #340]	; (8005590 <HAL_UART_MspInit+0x1f4>)
 800543a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800543c:	4a54      	ldr	r2, [pc, #336]	; (8005590 <HAL_UART_MspInit+0x1f4>)
 800543e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005442:	6413      	str	r3, [r2, #64]	; 0x40
 8005444:	4b52      	ldr	r3, [pc, #328]	; (8005590 <HAL_UART_MspInit+0x1f4>)
 8005446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005448:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800544c:	61bb      	str	r3, [r7, #24]
 800544e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005450:	2300      	movs	r3, #0
 8005452:	617b      	str	r3, [r7, #20]
 8005454:	4b4e      	ldr	r3, [pc, #312]	; (8005590 <HAL_UART_MspInit+0x1f4>)
 8005456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005458:	4a4d      	ldr	r2, [pc, #308]	; (8005590 <HAL_UART_MspInit+0x1f4>)
 800545a:	f043 0301 	orr.w	r3, r3, #1
 800545e:	6313      	str	r3, [r2, #48]	; 0x30
 8005460:	4b4b      	ldr	r3, [pc, #300]	; (8005590 <HAL_UART_MspInit+0x1f4>)
 8005462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005464:	f003 0301 	and.w	r3, r3, #1
 8005468:	617b      	str	r3, [r7, #20]
 800546a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800546c:	230c      	movs	r3, #12
 800546e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005470:	2302      	movs	r3, #2
 8005472:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005474:	2300      	movs	r3, #0
 8005476:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005478:	2303      	movs	r3, #3
 800547a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800547c:	2307      	movs	r3, #7
 800547e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005480:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005484:	4619      	mov	r1, r3
 8005486:	4843      	ldr	r0, [pc, #268]	; (8005594 <HAL_UART_MspInit+0x1f8>)
 8005488:	f001 fffa 	bl	8007480 <HAL_GPIO_Init>
}
 800548c:	e079      	b.n	8005582 <HAL_UART_MspInit+0x1e6>
  else if(huart->Instance==USART6)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a42      	ldr	r2, [pc, #264]	; (800559c <HAL_UART_MspInit+0x200>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d174      	bne.n	8005582 <HAL_UART_MspInit+0x1e6>
    __HAL_RCC_USART6_CLK_ENABLE();
 8005498:	2300      	movs	r3, #0
 800549a:	613b      	str	r3, [r7, #16]
 800549c:	4b3c      	ldr	r3, [pc, #240]	; (8005590 <HAL_UART_MspInit+0x1f4>)
 800549e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054a0:	4a3b      	ldr	r2, [pc, #236]	; (8005590 <HAL_UART_MspInit+0x1f4>)
 80054a2:	f043 0320 	orr.w	r3, r3, #32
 80054a6:	6453      	str	r3, [r2, #68]	; 0x44
 80054a8:	4b39      	ldr	r3, [pc, #228]	; (8005590 <HAL_UART_MspInit+0x1f4>)
 80054aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054ac:	f003 0320 	and.w	r3, r3, #32
 80054b0:	613b      	str	r3, [r7, #16]
 80054b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80054b4:	2300      	movs	r3, #0
 80054b6:	60fb      	str	r3, [r7, #12]
 80054b8:	4b35      	ldr	r3, [pc, #212]	; (8005590 <HAL_UART_MspInit+0x1f4>)
 80054ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054bc:	4a34      	ldr	r2, [pc, #208]	; (8005590 <HAL_UART_MspInit+0x1f4>)
 80054be:	f043 0301 	orr.w	r3, r3, #1
 80054c2:	6313      	str	r3, [r2, #48]	; 0x30
 80054c4:	4b32      	ldr	r3, [pc, #200]	; (8005590 <HAL_UART_MspInit+0x1f4>)
 80054c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054c8:	f003 0301 	and.w	r3, r3, #1
 80054cc:	60fb      	str	r3, [r7, #12]
 80054ce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80054d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80054d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054d6:	2302      	movs	r3, #2
 80054d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054da:	2300      	movs	r3, #0
 80054dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054de:	2303      	movs	r3, #3
 80054e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80054e2:	2308      	movs	r3, #8
 80054e4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80054ea:	4619      	mov	r1, r3
 80054ec:	4829      	ldr	r0, [pc, #164]	; (8005594 <HAL_UART_MspInit+0x1f8>)
 80054ee:	f001 ffc7 	bl	8007480 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80054f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80054f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054f8:	2302      	movs	r3, #2
 80054fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80054fc:	2301      	movs	r3, #1
 80054fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005500:	2303      	movs	r3, #3
 8005502:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8005504:	2308      	movs	r3, #8
 8005506:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005508:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800550c:	4619      	mov	r1, r3
 800550e:	4821      	ldr	r0, [pc, #132]	; (8005594 <HAL_UART_MspInit+0x1f8>)
 8005510:	f001 ffb6 	bl	8007480 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8005514:	4b22      	ldr	r3, [pc, #136]	; (80055a0 <HAL_UART_MspInit+0x204>)
 8005516:	4a23      	ldr	r2, [pc, #140]	; (80055a4 <HAL_UART_MspInit+0x208>)
 8005518:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 800551a:	4b21      	ldr	r3, [pc, #132]	; (80055a0 <HAL_UART_MspInit+0x204>)
 800551c:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8005520:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005522:	4b1f      	ldr	r3, [pc, #124]	; (80055a0 <HAL_UART_MspInit+0x204>)
 8005524:	2200      	movs	r2, #0
 8005526:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005528:	4b1d      	ldr	r3, [pc, #116]	; (80055a0 <HAL_UART_MspInit+0x204>)
 800552a:	2200      	movs	r2, #0
 800552c:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 800552e:	4b1c      	ldr	r3, [pc, #112]	; (80055a0 <HAL_UART_MspInit+0x204>)
 8005530:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005534:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005536:	4b1a      	ldr	r3, [pc, #104]	; (80055a0 <HAL_UART_MspInit+0x204>)
 8005538:	2200      	movs	r2, #0
 800553a:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800553c:	4b18      	ldr	r3, [pc, #96]	; (80055a0 <HAL_UART_MspInit+0x204>)
 800553e:	2200      	movs	r2, #0
 8005540:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8005542:	4b17      	ldr	r3, [pc, #92]	; (80055a0 <HAL_UART_MspInit+0x204>)
 8005544:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005548:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 800554a:	4b15      	ldr	r3, [pc, #84]	; (80055a0 <HAL_UART_MspInit+0x204>)
 800554c:	2200      	movs	r2, #0
 800554e:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005550:	4b13      	ldr	r3, [pc, #76]	; (80055a0 <HAL_UART_MspInit+0x204>)
 8005552:	2200      	movs	r2, #0
 8005554:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8005556:	4812      	ldr	r0, [pc, #72]	; (80055a0 <HAL_UART_MspInit+0x204>)
 8005558:	f001 fb82 	bl	8006c60 <HAL_DMA_Init>
 800555c:	4603      	mov	r3, r0
 800555e:	2b00      	cmp	r3, #0
 8005560:	d001      	beq.n	8005566 <HAL_UART_MspInit+0x1ca>
      Error_Handler();
 8005562:	f7ff fddd 	bl	8005120 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	4a0d      	ldr	r2, [pc, #52]	; (80055a0 <HAL_UART_MspInit+0x204>)
 800556a:	639a      	str	r2, [r3, #56]	; 0x38
 800556c:	4a0c      	ldr	r2, [pc, #48]	; (80055a0 <HAL_UART_MspInit+0x204>)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8005572:	2200      	movs	r2, #0
 8005574:	2100      	movs	r1, #0
 8005576:	2047      	movs	r0, #71	; 0x47
 8005578:	f001 fb3b 	bl	8006bf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800557c:	2047      	movs	r0, #71	; 0x47
 800557e:	f001 fb54 	bl	8006c2a <HAL_NVIC_EnableIRQ>
}
 8005582:	bf00      	nop
 8005584:	3738      	adds	r7, #56	; 0x38
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}
 800558a:	bf00      	nop
 800558c:	40011000 	.word	0x40011000
 8005590:	40023800 	.word	0x40023800
 8005594:	40020000 	.word	0x40020000
 8005598:	40004400 	.word	0x40004400
 800559c:	40011400 	.word	0x40011400
 80055a0:	20000658 	.word	0x20000658
 80055a4:	40026428 	.word	0x40026428

080055a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80055a8:	b480      	push	{r7}
 80055aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80055ac:	e7fe      	b.n	80055ac <NMI_Handler+0x4>

080055ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80055ae:	b480      	push	{r7}
 80055b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80055b2:	e7fe      	b.n	80055b2 <HardFault_Handler+0x4>

080055b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80055b4:	b480      	push	{r7}
 80055b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80055b8:	e7fe      	b.n	80055b8 <MemManage_Handler+0x4>

080055ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80055ba:	b480      	push	{r7}
 80055bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80055be:	e7fe      	b.n	80055be <BusFault_Handler+0x4>

080055c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80055c0:	b480      	push	{r7}
 80055c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80055c4:	e7fe      	b.n	80055c4 <UsageFault_Handler+0x4>

080055c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80055c6:	b480      	push	{r7}
 80055c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80055ca:	bf00      	nop
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr

080055d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80055d4:	b480      	push	{r7}
 80055d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80055d8:	bf00      	nop
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr

080055e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80055e2:	b480      	push	{r7}
 80055e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80055e6:	bf00      	nop
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr

080055f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80055f4:	f001 f9de 	bl	80069b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80055f8:	bf00      	nop
 80055fa:	bd80      	pop	{r7, pc}

080055fc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8005600:	2080      	movs	r0, #128	; 0x80
 8005602:	f002 f90d 	bl	8007820 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005606:	bf00      	nop
 8005608:	bd80      	pop	{r7, pc}
	...

0800560c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8005610:	4802      	ldr	r0, [pc, #8]	; (800561c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8005612:	f005 ff5a 	bl	800b4ca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8005616:	bf00      	nop
 8005618:	bd80      	pop	{r7, pc}
 800561a:	bf00      	nop
 800561c:	20000544 	.word	0x20000544

08005620 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8005624:	4802      	ldr	r0, [pc, #8]	; (8005630 <I2C1_EV_IRQHandler+0x10>)
 8005626:	f002 fd77 	bl	8008118 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800562a:	bf00      	nop
 800562c:	bd80      	pop	{r7, pc}
 800562e:	bf00      	nop
 8005630:	20000450 	.word	0x20000450

08005634 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8005638:	4802      	ldr	r0, [pc, #8]	; (8005644 <I2C1_ER_IRQHandler+0x10>)
 800563a:	f002 fede 	bl	80083fa <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800563e:	bf00      	nop
 8005640:	bd80      	pop	{r7, pc}
 8005642:	bf00      	nop
 8005644:	20000450 	.word	0x20000450

08005648 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800564c:	4802      	ldr	r0, [pc, #8]	; (8005658 <USART1_IRQHandler+0x10>)
 800564e:	f006 fb47 	bl	800bce0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005652:	bf00      	nop
 8005654:	bd80      	pop	{r7, pc}
 8005656:	bf00      	nop
 8005658:	2000058c 	.word	0x2000058c

0800565c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8005660:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8005664:	f002 f8dc 	bl	8007820 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005668:	bf00      	nop
 800566a:	bd80      	pop	{r7, pc}

0800566c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8005670:	4802      	ldr	r0, [pc, #8]	; (800567c <DMA2_Stream1_IRQHandler+0x10>)
 8005672:	f001 fc8d 	bl	8006f90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8005676:	bf00      	nop
 8005678:	bd80      	pop	{r7, pc}
 800567a:	bf00      	nop
 800567c:	20000658 	.word	0x20000658

08005680 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8005684:	4802      	ldr	r0, [pc, #8]	; (8005690 <USART6_IRQHandler+0x10>)
 8005686:	f006 fb2b 	bl	800bce0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800568a:	bf00      	nop
 800568c:	bd80      	pop	{r7, pc}
 800568e:	bf00      	nop
 8005690:	20000614 	.word	0x20000614

08005694 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005694:	b480      	push	{r7}
 8005696:	af00      	add	r7, sp, #0
	return 1;
 8005698:	2301      	movs	r3, #1
}
 800569a:	4618      	mov	r0, r3
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr

080056a4 <_kill>:

int _kill(int pid, int sig)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b082      	sub	sp, #8
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
 80056ac:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80056ae:	f007 fc09 	bl	800cec4 <__errno>
 80056b2:	4603      	mov	r3, r0
 80056b4:	2216      	movs	r2, #22
 80056b6:	601a      	str	r2, [r3, #0]
	return -1;
 80056b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80056bc:	4618      	mov	r0, r3
 80056be:	3708      	adds	r7, #8
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}

080056c4 <_exit>:

void _exit (int status)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b082      	sub	sp, #8
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80056cc:	f04f 31ff 	mov.w	r1, #4294967295
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f7ff ffe7 	bl	80056a4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80056d6:	e7fe      	b.n	80056d6 <_exit+0x12>

080056d8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b086      	sub	sp, #24
 80056dc:	af00      	add	r7, sp, #0
 80056de:	60f8      	str	r0, [r7, #12]
 80056e0:	60b9      	str	r1, [r7, #8]
 80056e2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80056e4:	2300      	movs	r3, #0
 80056e6:	617b      	str	r3, [r7, #20]
 80056e8:	e00a      	b.n	8005700 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80056ea:	f3af 8000 	nop.w
 80056ee:	4601      	mov	r1, r0
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	1c5a      	adds	r2, r3, #1
 80056f4:	60ba      	str	r2, [r7, #8]
 80056f6:	b2ca      	uxtb	r2, r1
 80056f8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	3301      	adds	r3, #1
 80056fe:	617b      	str	r3, [r7, #20]
 8005700:	697a      	ldr	r2, [r7, #20]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	429a      	cmp	r2, r3
 8005706:	dbf0      	blt.n	80056ea <_read+0x12>
	}

return len;
 8005708:	687b      	ldr	r3, [r7, #4]
}
 800570a:	4618      	mov	r0, r3
 800570c:	3718      	adds	r7, #24
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}

08005712 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005712:	b580      	push	{r7, lr}
 8005714:	b086      	sub	sp, #24
 8005716:	af00      	add	r7, sp, #0
 8005718:	60f8      	str	r0, [r7, #12]
 800571a:	60b9      	str	r1, [r7, #8]
 800571c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800571e:	2300      	movs	r3, #0
 8005720:	617b      	str	r3, [r7, #20]
 8005722:	e009      	b.n	8005738 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	1c5a      	adds	r2, r3, #1
 8005728:	60ba      	str	r2, [r7, #8]
 800572a:	781b      	ldrb	r3, [r3, #0]
 800572c:	4618      	mov	r0, r3
 800572e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	3301      	adds	r3, #1
 8005736:	617b      	str	r3, [r7, #20]
 8005738:	697a      	ldr	r2, [r7, #20]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	429a      	cmp	r2, r3
 800573e:	dbf1      	blt.n	8005724 <_write+0x12>
	}
	return len;
 8005740:	687b      	ldr	r3, [r7, #4]
}
 8005742:	4618      	mov	r0, r3
 8005744:	3718      	adds	r7, #24
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}

0800574a <_close>:

int _close(int file)
{
 800574a:	b480      	push	{r7}
 800574c:	b083      	sub	sp, #12
 800574e:	af00      	add	r7, sp, #0
 8005750:	6078      	str	r0, [r7, #4]
	return -1;
 8005752:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005756:	4618      	mov	r0, r3
 8005758:	370c      	adds	r7, #12
 800575a:	46bd      	mov	sp, r7
 800575c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005760:	4770      	bx	lr

08005762 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005762:	b480      	push	{r7}
 8005764:	b083      	sub	sp, #12
 8005766:	af00      	add	r7, sp, #0
 8005768:	6078      	str	r0, [r7, #4]
 800576a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005772:	605a      	str	r2, [r3, #4]
	return 0;
 8005774:	2300      	movs	r3, #0
}
 8005776:	4618      	mov	r0, r3
 8005778:	370c      	adds	r7, #12
 800577a:	46bd      	mov	sp, r7
 800577c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005780:	4770      	bx	lr

08005782 <_isatty>:

int _isatty(int file)
{
 8005782:	b480      	push	{r7}
 8005784:	b083      	sub	sp, #12
 8005786:	af00      	add	r7, sp, #0
 8005788:	6078      	str	r0, [r7, #4]
	return 1;
 800578a:	2301      	movs	r3, #1
}
 800578c:	4618      	mov	r0, r3
 800578e:	370c      	adds	r7, #12
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr

08005798 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005798:	b480      	push	{r7}
 800579a:	b085      	sub	sp, #20
 800579c:	af00      	add	r7, sp, #0
 800579e:	60f8      	str	r0, [r7, #12]
 80057a0:	60b9      	str	r1, [r7, #8]
 80057a2:	607a      	str	r2, [r7, #4]
	return 0;
 80057a4:	2300      	movs	r3, #0
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3714      	adds	r7, #20
 80057aa:	46bd      	mov	sp, r7
 80057ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b0:	4770      	bx	lr
	...

080057b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b086      	sub	sp, #24
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80057bc:	4a14      	ldr	r2, [pc, #80]	; (8005810 <_sbrk+0x5c>)
 80057be:	4b15      	ldr	r3, [pc, #84]	; (8005814 <_sbrk+0x60>)
 80057c0:	1ad3      	subs	r3, r2, r3
 80057c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80057c8:	4b13      	ldr	r3, [pc, #76]	; (8005818 <_sbrk+0x64>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d102      	bne.n	80057d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80057d0:	4b11      	ldr	r3, [pc, #68]	; (8005818 <_sbrk+0x64>)
 80057d2:	4a12      	ldr	r2, [pc, #72]	; (800581c <_sbrk+0x68>)
 80057d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80057d6:	4b10      	ldr	r3, [pc, #64]	; (8005818 <_sbrk+0x64>)
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	4413      	add	r3, r2
 80057de:	693a      	ldr	r2, [r7, #16]
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d207      	bcs.n	80057f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80057e4:	f007 fb6e 	bl	800cec4 <__errno>
 80057e8:	4603      	mov	r3, r0
 80057ea:	220c      	movs	r2, #12
 80057ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80057ee:	f04f 33ff 	mov.w	r3, #4294967295
 80057f2:	e009      	b.n	8005808 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80057f4:	4b08      	ldr	r3, [pc, #32]	; (8005818 <_sbrk+0x64>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80057fa:	4b07      	ldr	r3, [pc, #28]	; (8005818 <_sbrk+0x64>)
 80057fc:	681a      	ldr	r2, [r3, #0]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	4413      	add	r3, r2
 8005802:	4a05      	ldr	r2, [pc, #20]	; (8005818 <_sbrk+0x64>)
 8005804:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005806:	68fb      	ldr	r3, [r7, #12]
}
 8005808:	4618      	mov	r0, r3
 800580a:	3718      	adds	r7, #24
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}
 8005810:	20020000 	.word	0x20020000
 8005814:	00000400 	.word	0x00000400
 8005818:	200008b4 	.word	0x200008b4
 800581c:	200008d8 	.word	0x200008d8

08005820 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005820:	b480      	push	{r7}
 8005822:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005824:	4b06      	ldr	r3, [pc, #24]	; (8005840 <SystemInit+0x20>)
 8005826:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800582a:	4a05      	ldr	r2, [pc, #20]	; (8005840 <SystemInit+0x20>)
 800582c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005830:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005834:	bf00      	nop
 8005836:	46bd      	mov	sp, r7
 8005838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583c:	4770      	bx	lr
 800583e:	bf00      	nop
 8005840:	e000ed00 	.word	0xe000ed00

08005844 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	af00      	add	r7, sp, #0
  LCD_IO_Bl_OnOff(1);
 8005848:	2001      	movs	r0, #1
 800584a:	f000 fefe 	bl	800664a <LCD_IO_Bl_OnOff>
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_SLPOUT);    // Exit Sleep
 800584e:	2011      	movs	r0, #17
 8005850:	f000 ff82 	bl	8006758 <LCD_IO_WriteCmd8>
  ILI9341_LCDMUTEX_POP();
}
 8005854:	bf00      	nop
 8005856:	bd80      	pop	{r7, pc}

08005858 <ili9341_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8005858:	b480      	push	{r7}
 800585a:	af00      	add	r7, sp, #0
  return ILI9341_SIZE_X;
 800585c:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8005860:	4618      	mov	r0, r3
 8005862:	46bd      	mov	sp, r7
 8005864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005868:	4770      	bx	lr

0800586a <ili9341_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 800586a:	b480      	push	{r7}
 800586c:	af00      	add	r7, sp, #0
  return ILI9341_SIZE_Y;
 800586e:	23f0      	movs	r3, #240	; 0xf0
}
 8005870:	4618      	mov	r0, r3
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr
	...

0800587c <ili9341_Init>:
/* SPI or paralell mode */
#if ILI9341_INTERFACE_MODE == 1

//-----------------------------------------------------------------------------
void ili9341_Init(void)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b082      	sub	sp, #8
 8005880:	af02      	add	r7, sp, #8
  if((Is_ili9341_Initialized & ILI9341_LCD_INITIALIZED) == 0)
 8005882:	4b52      	ldr	r3, [pc, #328]	; (80059cc <ili9341_Init+0x150>)
 8005884:	781b      	ldrb	r3, [r3, #0]
 8005886:	f003 0301 	and.w	r3, r3, #1
 800588a:	2b00      	cmp	r3, #0
 800588c:	d115      	bne.n	80058ba <ili9341_Init+0x3e>
  {
    Is_ili9341_Initialized |= ILI9341_LCD_INITIALIZED;
 800588e:	4b4f      	ldr	r3, [pc, #316]	; (80059cc <ili9341_Init+0x150>)
 8005890:	781b      	ldrb	r3, [r3, #0]
 8005892:	f043 0301 	orr.w	r3, r3, #1
 8005896:	b2da      	uxtb	r2, r3
 8005898:	4b4c      	ldr	r3, [pc, #304]	; (80059cc <ili9341_Init+0x150>)
 800589a:	701a      	strb	r2, [r3, #0]
    if((Is_ili9341_Initialized & ILI9341_IO_INITIALIZED) == 0)
 800589c:	4b4b      	ldr	r3, [pc, #300]	; (80059cc <ili9341_Init+0x150>)
 800589e:	781b      	ldrb	r3, [r3, #0]
 80058a0:	f003 0302 	and.w	r3, r3, #2
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d101      	bne.n	80058ac <ili9341_Init+0x30>
      LCD_IO_Init();
 80058a8:	f000 feda 	bl	8006660 <LCD_IO_Init>
    Is_ili9341_Initialized |= ILI9341_IO_INITIALIZED;
 80058ac:	4b47      	ldr	r3, [pc, #284]	; (80059cc <ili9341_Init+0x150>)
 80058ae:	781b      	ldrb	r3, [r3, #0]
 80058b0:	f043 0302 	orr.w	r3, r3, #2
 80058b4:	b2da      	uxtb	r2, r3
 80058b6:	4b45      	ldr	r3, [pc, #276]	; (80059cc <ili9341_Init+0x150>)
 80058b8:	701a      	strb	r2, [r3, #0]
  }

  LCD_Delay(10);
 80058ba:	200a      	movs	r0, #10
 80058bc:	f000 feba 	bl	8006634 <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9341_SWRESET);
 80058c0:	2001      	movs	r0, #1
 80058c2:	f000 ff49 	bl	8006758 <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 80058c6:	200a      	movs	r0, #10
 80058c8:	f000 feb4 	bl	8006634 <LCD_Delay>

  LCD_IO_WriteCmd8MultipleData8(0xEF, (uint8_t *)"\x03\x80\x02", 3);
 80058cc:	2203      	movs	r2, #3
 80058ce:	4940      	ldr	r1, [pc, #256]	; (80059d0 <ili9341_Init+0x154>)
 80058d0:	20ef      	movs	r0, #239	; 0xef
 80058d2:	f000 ffaf 	bl	8006834 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xCF, (uint8_t *)"\x00\xC1\x30", 3);
 80058d6:	2203      	movs	r2, #3
 80058d8:	493e      	ldr	r1, [pc, #248]	; (80059d4 <ili9341_Init+0x158>)
 80058da:	20cf      	movs	r0, #207	; 0xcf
 80058dc:	f000 ffaa 	bl	8006834 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xED, (uint8_t *)"\x64\x03\x12\x81", 4);
 80058e0:	2204      	movs	r2, #4
 80058e2:	493d      	ldr	r1, [pc, #244]	; (80059d8 <ili9341_Init+0x15c>)
 80058e4:	20ed      	movs	r0, #237	; 0xed
 80058e6:	f000 ffa5 	bl	8006834 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xE8, (uint8_t *)"\x85\x00\x78", 3);
 80058ea:	2203      	movs	r2, #3
 80058ec:	493b      	ldr	r1, [pc, #236]	; (80059dc <ili9341_Init+0x160>)
 80058ee:	20e8      	movs	r0, #232	; 0xe8
 80058f0:	f000 ffa0 	bl	8006834 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xCB, (uint8_t *)"\x39\x2C\x00\x34\x02", 5);
 80058f4:	2205      	movs	r2, #5
 80058f6:	493a      	ldr	r1, [pc, #232]	; (80059e0 <ili9341_Init+0x164>)
 80058f8:	20cb      	movs	r0, #203	; 0xcb
 80058fa:	f000 ff9b 	bl	8006834 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xF7, (uint8_t *)"\x20", 1);
 80058fe:	2201      	movs	r2, #1
 8005900:	4938      	ldr	r1, [pc, #224]	; (80059e4 <ili9341_Init+0x168>)
 8005902:	20f7      	movs	r0, #247	; 0xf7
 8005904:	f000 ff96 	bl	8006834 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xEA, (uint8_t *)"\x00\x00", 2);
 8005908:	2202      	movs	r2, #2
 800590a:	4937      	ldr	r1, [pc, #220]	; (80059e8 <ili9341_Init+0x16c>)
 800590c:	20ea      	movs	r0, #234	; 0xea
 800590e:	f000 ff91 	bl	8006834 <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 1 (Vreg1out, Verg2out)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PWCTR1, (uint8_t *)"\x23", 1);
 8005912:	2201      	movs	r2, #1
 8005914:	4935      	ldr	r1, [pc, #212]	; (80059ec <ili9341_Init+0x170>)
 8005916:	20c0      	movs	r0, #192	; 0xc0
 8005918:	f000 ff8c 	bl	8006834 <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 2 (VGH,VGL)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PWCTR2, (uint8_t *)"\x10", 1);
 800591c:	2201      	movs	r2, #1
 800591e:	4934      	ldr	r1, [pc, #208]	; (80059f0 <ili9341_Init+0x174>)
 8005920:	20c1      	movs	r0, #193	; 0xc1
 8005922:	f000 ff87 	bl	8006834 <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 3 (Vcom)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_VMCTR1, (uint8_t *)"\x3E\x28", 2);
 8005926:	2202      	movs	r2, #2
 8005928:	4932      	ldr	r1, [pc, #200]	; (80059f4 <ili9341_Init+0x178>)
 800592a:	20c5      	movs	r0, #197	; 0xc5
 800592c:	f000 ff82 	bl	8006834 <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 3 (Vcom)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_VMCTR2, (uint8_t *)"\x86", 1);
 8005930:	2201      	movs	r2, #1
 8005932:	4931      	ldr	r1, [pc, #196]	; (80059f8 <ili9341_Init+0x17c>)
 8005934:	20c7      	movs	r0, #199	; 0xc7
 8005936:	f000 ff7d 	bl	8006834 <LCD_IO_WriteCmd8MultipleData8>

  // Vertical scroll zero
  LCD_IO_WriteCmd8MultipleData8(ILI9341_VSCRSADD, (uint8_t *)"\x00", 1);
 800593a:	2201      	movs	r2, #1
 800593c:	492f      	ldr	r1, [pc, #188]	; (80059fc <ili9341_Init+0x180>)
 800593e:	2037      	movs	r0, #55	; 0x37
 8005940:	f000 ff78 	bl	8006834 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PIXFMT, (uint8_t *)"\x55", 1);
 8005944:	2201      	movs	r2, #1
 8005946:	492e      	ldr	r1, [pc, #184]	; (8005a00 <ili9341_Init+0x184>)
 8005948:	203a      	movs	r0, #58	; 0x3a
 800594a:	f000 ff73 	bl	8006834 <LCD_IO_WriteCmd8MultipleData8>

  // LCD_IO_WriteCmd8MultipleData8(0xF6, (uint8_t *)"\x01\x00\x06", 3);

  LCD_IO_WriteCmd8MultipleData8(ILI9341_FRMCTR1, (uint8_t *)"\x00\x18", 2);
 800594e:	2202      	movs	r2, #2
 8005950:	492c      	ldr	r1, [pc, #176]	; (8005a04 <ili9341_Init+0x188>)
 8005952:	20b1      	movs	r0, #177	; 0xb1
 8005954:	f000 ff6e 	bl	8006834 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_DFUNCTR, (uint8_t *)"\x08\x82\x27", 3);  // Display Function Control
 8005958:	2203      	movs	r2, #3
 800595a:	492b      	ldr	r1, [pc, #172]	; (8005a08 <ili9341_Init+0x18c>)
 800595c:	20b6      	movs	r0, #182	; 0xb6
 800595e:	f000 ff69 	bl	8006834 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xF2, (uint8_t *)"\x00", 1);            // 3Gamma Function Disable
 8005962:	2201      	movs	r2, #1
 8005964:	4925      	ldr	r1, [pc, #148]	; (80059fc <ili9341_Init+0x180>)
 8005966:	20f2      	movs	r0, #242	; 0xf2
 8005968:	f000 ff64 	bl	8006834 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_GAMMASET, (uint8_t *)"\x01", 1);// Gamma curve selected
 800596c:	2201      	movs	r2, #1
 800596e:	4927      	ldr	r1, [pc, #156]	; (8005a0c <ili9341_Init+0x190>)
 8005970:	2026      	movs	r0, #38	; 0x26
 8005972:	f000 ff5f 	bl	8006834 <LCD_IO_WriteCmd8MultipleData8>

  // positive gamma control
  LCD_IO_WriteCmd8MultipleData8(ILI9341_GMCTRP1, (uint8_t *)"\x0F\x31\x2B\x0C\x0E\x08\x4E\xF1\x37\x07\x10\x03\x0E\x09\x00", 15);
 8005976:	220f      	movs	r2, #15
 8005978:	4925      	ldr	r1, [pc, #148]	; (8005a10 <ili9341_Init+0x194>)
 800597a:	20e0      	movs	r0, #224	; 0xe0
 800597c:	f000 ff5a 	bl	8006834 <LCD_IO_WriteCmd8MultipleData8>

  // negative gamma control
  LCD_IO_WriteCmd8MultipleData8(ILI9341_GMCTRN1, (uint8_t *)"\x00\x0E\x14\x03\x11\x07\x31\xC1\x48\x08\x0F\x0C\x31\x36\x0F", 15);
 8005980:	220f      	movs	r2, #15
 8005982:	4924      	ldr	r1, [pc, #144]	; (8005a14 <ili9341_Init+0x198>)
 8005984:	20e1      	movs	r0, #225	; 0xe1
 8005986:	f000 ff55 	bl	8006834 <LCD_IO_WriteCmd8MultipleData8>

  LCD_IO_WriteCmd8(ILI9341_MADCTL); LCD_IO_WriteData8(ILI9341_MAD_DATA_RIGHT_THEN_DOWN);
 800598a:	2036      	movs	r0, #54	; 0x36
 800598c:	f000 fee4 	bl	8006758 <LCD_IO_WriteCmd8>
 8005990:	2028      	movs	r0, #40	; 0x28
 8005992:	f000 feff 	bl	8006794 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_SLPOUT);    // Exit Sleep
 8005996:	2011      	movs	r0, #17
 8005998:	f000 fede 	bl	8006758 <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 800599c:	200a      	movs	r0, #10
 800599e:	f000 fe49 	bl	8006634 <LCD_Delay>

  #if ILI9341_INITCLEAR == 1
  ili9341_FillRect(0, 0, ILI9341_SIZE_X, ILI9341_SIZE_Y, 0x0000);
 80059a2:	2300      	movs	r3, #0
 80059a4:	9300      	str	r3, [sp, #0]
 80059a6:	23f0      	movs	r3, #240	; 0xf0
 80059a8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80059ac:	2100      	movs	r1, #0
 80059ae:	2000      	movs	r0, #0
 80059b0:	f000 f992 	bl	8005cd8 <ili9341_FillRect>
  LCD_Delay(10);
 80059b4:	200a      	movs	r0, #10
 80059b6:	f000 fe3d 	bl	8006634 <LCD_Delay>
  #endif
  
  LCD_IO_WriteCmd8(ILI9341_DISPON);    // Display on
 80059ba:	2029      	movs	r0, #41	; 0x29
 80059bc:	f000 fecc 	bl	8006758 <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 80059c0:	200a      	movs	r0, #10
 80059c2:	f000 fe37 	bl	8006634 <LCD_Delay>
}
 80059c6:	bf00      	nop
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}
 80059cc:	200008b8 	.word	0x200008b8
 80059d0:	08010398 	.word	0x08010398
 80059d4:	0801039c 	.word	0x0801039c
 80059d8:	080103a0 	.word	0x080103a0
 80059dc:	080103a8 	.word	0x080103a8
 80059e0:	080103ac 	.word	0x080103ac
 80059e4:	080103b4 	.word	0x080103b4
 80059e8:	080103b8 	.word	0x080103b8
 80059ec:	080103bc 	.word	0x080103bc
 80059f0:	080103c0 	.word	0x080103c0
 80059f4:	080103c4 	.word	0x080103c4
 80059f8:	080103c8 	.word	0x080103c8
 80059fc:	080103cc 	.word	0x080103cc
 8005a00:	080103d0 	.word	0x080103d0
 8005a04:	080103d4 	.word	0x080103d4
 8005a08:	080103d8 	.word	0x080103d8
 8005a0c:	080103dc 	.word	0x080103dc
 8005a10:	080103e0 	.word	0x080103e0
 8005a14:	080103f0 	.word	0x080103f0

08005a18 <ili9341_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color
  * @retval None
  */
void ili9341_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b082      	sub	sp, #8
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	4603      	mov	r3, r0
 8005a20:	80fb      	strh	r3, [r7, #6]
 8005a22:	460b      	mov	r3, r1
 8005a24:	80bb      	strh	r3, [r7, #4]
 8005a26:	4613      	mov	r3, r2
 8005a28:	807b      	strh	r3, [r7, #2]
  ILI9341_LCDMUTEX_PUSH();
  ILI9341_SETCURSOR(Xpos, Ypos);
 8005a2a:	202a      	movs	r0, #42	; 0x2a
 8005a2c:	f000 fe94 	bl	8006758 <LCD_IO_WriteCmd8>
 8005a30:	88fb      	ldrh	r3, [r7, #6]
 8005a32:	0a1b      	lsrs	r3, r3, #8
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	b2db      	uxtb	r3, r3
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f000 feab 	bl	8006794 <LCD_IO_WriteData8>
 8005a3e:	88fb      	ldrh	r3, [r7, #6]
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	4618      	mov	r0, r3
 8005a44:	f000 fea6 	bl	8006794 <LCD_IO_WriteData8>
 8005a48:	88fb      	ldrh	r3, [r7, #6]
 8005a4a:	0a1b      	lsrs	r3, r3, #8
 8005a4c:	b29b      	uxth	r3, r3
 8005a4e:	b2db      	uxtb	r3, r3
 8005a50:	4618      	mov	r0, r3
 8005a52:	f000 fe9f 	bl	8006794 <LCD_IO_WriteData8>
 8005a56:	88fb      	ldrh	r3, [r7, #6]
 8005a58:	b2db      	uxtb	r3, r3
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f000 fe9a 	bl	8006794 <LCD_IO_WriteData8>
 8005a60:	202b      	movs	r0, #43	; 0x2b
 8005a62:	f000 fe79 	bl	8006758 <LCD_IO_WriteCmd8>
 8005a66:	88bb      	ldrh	r3, [r7, #4]
 8005a68:	0a1b      	lsrs	r3, r3, #8
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f000 fe90 	bl	8006794 <LCD_IO_WriteData8>
 8005a74:	88bb      	ldrh	r3, [r7, #4]
 8005a76:	b2db      	uxtb	r3, r3
 8005a78:	4618      	mov	r0, r3
 8005a7a:	f000 fe8b 	bl	8006794 <LCD_IO_WriteData8>
 8005a7e:	88bb      	ldrh	r3, [r7, #4]
 8005a80:	0a1b      	lsrs	r3, r3, #8
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	b2db      	uxtb	r3, r3
 8005a86:	4618      	mov	r0, r3
 8005a88:	f000 fe84 	bl	8006794 <LCD_IO_WriteData8>
 8005a8c:	88bb      	ldrh	r3, [r7, #4]
 8005a8e:	b2db      	uxtb	r3, r3
 8005a90:	4618      	mov	r0, r3
 8005a92:	f000 fe7f 	bl	8006794 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_RAMWR); LCD_IO_WriteData16(RGBCode);
 8005a96:	202c      	movs	r0, #44	; 0x2c
 8005a98:	f000 fe5e 	bl	8006758 <LCD_IO_WriteCmd8>
 8005a9c:	887b      	ldrh	r3, [r7, #2]
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f000 fe8e 	bl	80067c0 <LCD_IO_WriteData16>
  ILI9341_LCDMUTEX_POP();
}
 8005aa4:	bf00      	nop
 8005aa6:	3708      	adds	r7, #8
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}

08005aac <ili9341_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ili9341_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8005aac:	b590      	push	{r4, r7, lr}
 8005aae:	b083      	sub	sp, #12
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	4604      	mov	r4, r0
 8005ab4:	4608      	mov	r0, r1
 8005ab6:	4611      	mov	r1, r2
 8005ab8:	461a      	mov	r2, r3
 8005aba:	4623      	mov	r3, r4
 8005abc:	80fb      	strh	r3, [r7, #6]
 8005abe:	4603      	mov	r3, r0
 8005ac0:	80bb      	strh	r3, [r7, #4]
 8005ac2:	460b      	mov	r3, r1
 8005ac4:	807b      	strh	r3, [r7, #2]
 8005ac6:	4613      	mov	r3, r2
 8005ac8:	803b      	strh	r3, [r7, #0]
  yStart = Ypos; yEnd = Ypos + Height - 1;
 8005aca:	4a2a      	ldr	r2, [pc, #168]	; (8005b74 <ili9341_SetDisplayWindow+0xc8>)
 8005acc:	88bb      	ldrh	r3, [r7, #4]
 8005ace:	8013      	strh	r3, [r2, #0]
 8005ad0:	88ba      	ldrh	r2, [r7, #4]
 8005ad2:	883b      	ldrh	r3, [r7, #0]
 8005ad4:	4413      	add	r3, r2
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	3b01      	subs	r3, #1
 8005ada:	b29a      	uxth	r2, r3
 8005adc:	4b26      	ldr	r3, [pc, #152]	; (8005b78 <ili9341_SetDisplayWindow+0xcc>)
 8005ade:	801a      	strh	r2, [r3, #0]
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Width - 1);
 8005ae0:	202a      	movs	r0, #42	; 0x2a
 8005ae2:	f000 fe39 	bl	8006758 <LCD_IO_WriteCmd8>
 8005ae6:	88fb      	ldrh	r3, [r7, #6]
 8005ae8:	0a1b      	lsrs	r3, r3, #8
 8005aea:	b29b      	uxth	r3, r3
 8005aec:	b2db      	uxtb	r3, r3
 8005aee:	4618      	mov	r0, r3
 8005af0:	f000 fe50 	bl	8006794 <LCD_IO_WriteData8>
 8005af4:	88fb      	ldrh	r3, [r7, #6]
 8005af6:	b2db      	uxtb	r3, r3
 8005af8:	4618      	mov	r0, r3
 8005afa:	f000 fe4b 	bl	8006794 <LCD_IO_WriteData8>
 8005afe:	88fa      	ldrh	r2, [r7, #6]
 8005b00:	887b      	ldrh	r3, [r7, #2]
 8005b02:	4413      	add	r3, r2
 8005b04:	3b01      	subs	r3, #1
 8005b06:	121b      	asrs	r3, r3, #8
 8005b08:	b2db      	uxtb	r3, r3
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f000 fe42 	bl	8006794 <LCD_IO_WriteData8>
 8005b10:	88fb      	ldrh	r3, [r7, #6]
 8005b12:	b2da      	uxtb	r2, r3
 8005b14:	887b      	ldrh	r3, [r7, #2]
 8005b16:	b2db      	uxtb	r3, r3
 8005b18:	4413      	add	r3, r2
 8005b1a:	b2db      	uxtb	r3, r3
 8005b1c:	3b01      	subs	r3, #1
 8005b1e:	b2db      	uxtb	r3, r3
 8005b20:	4618      	mov	r0, r3
 8005b22:	f000 fe37 	bl	8006794 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Height - 1);
 8005b26:	202b      	movs	r0, #43	; 0x2b
 8005b28:	f000 fe16 	bl	8006758 <LCD_IO_WriteCmd8>
 8005b2c:	88bb      	ldrh	r3, [r7, #4]
 8005b2e:	0a1b      	lsrs	r3, r3, #8
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	b2db      	uxtb	r3, r3
 8005b34:	4618      	mov	r0, r3
 8005b36:	f000 fe2d 	bl	8006794 <LCD_IO_WriteData8>
 8005b3a:	88bb      	ldrh	r3, [r7, #4]
 8005b3c:	b2db      	uxtb	r3, r3
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f000 fe28 	bl	8006794 <LCD_IO_WriteData8>
 8005b44:	88ba      	ldrh	r2, [r7, #4]
 8005b46:	883b      	ldrh	r3, [r7, #0]
 8005b48:	4413      	add	r3, r2
 8005b4a:	3b01      	subs	r3, #1
 8005b4c:	121b      	asrs	r3, r3, #8
 8005b4e:	b2db      	uxtb	r3, r3
 8005b50:	4618      	mov	r0, r3
 8005b52:	f000 fe1f 	bl	8006794 <LCD_IO_WriteData8>
 8005b56:	88bb      	ldrh	r3, [r7, #4]
 8005b58:	b2da      	uxtb	r2, r3
 8005b5a:	883b      	ldrh	r3, [r7, #0]
 8005b5c:	b2db      	uxtb	r3, r3
 8005b5e:	4413      	add	r3, r2
 8005b60:	b2db      	uxtb	r3, r3
 8005b62:	3b01      	subs	r3, #1
 8005b64:	b2db      	uxtb	r3, r3
 8005b66:	4618      	mov	r0, r3
 8005b68:	f000 fe14 	bl	8006794 <LCD_IO_WriteData8>
  ILI9341_LCDMUTEX_POP();
}
 8005b6c:	bf00      	nop
 8005b6e:	370c      	adds	r7, #12
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd90      	pop	{r4, r7, pc}
 8005b74:	200008ba 	.word	0x200008ba
 8005b78:	200008bc 	.word	0x200008bc

08005b7c <ili9341_DrawHLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.
  * @retval None
  */
void ili9341_DrawHLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8005b7c:	b590      	push	{r4, r7, lr}
 8005b7e:	b083      	sub	sp, #12
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	4604      	mov	r4, r0
 8005b84:	4608      	mov	r0, r1
 8005b86:	4611      	mov	r1, r2
 8005b88:	461a      	mov	r2, r3
 8005b8a:	4623      	mov	r3, r4
 8005b8c:	80fb      	strh	r3, [r7, #6]
 8005b8e:	4603      	mov	r3, r0
 8005b90:	80bb      	strh	r3, [r7, #4]
 8005b92:	460b      	mov	r3, r1
 8005b94:	807b      	strh	r3, [r7, #2]
 8005b96:	4613      	mov	r3, r2
 8005b98:	803b      	strh	r3, [r7, #0]
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Length - 1);
 8005b9a:	202a      	movs	r0, #42	; 0x2a
 8005b9c:	f000 fddc 	bl	8006758 <LCD_IO_WriteCmd8>
 8005ba0:	88bb      	ldrh	r3, [r7, #4]
 8005ba2:	0a1b      	lsrs	r3, r3, #8
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	b2db      	uxtb	r3, r3
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f000 fdf3 	bl	8006794 <LCD_IO_WriteData8>
 8005bae:	88bb      	ldrh	r3, [r7, #4]
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f000 fdee 	bl	8006794 <LCD_IO_WriteData8>
 8005bb8:	88ba      	ldrh	r2, [r7, #4]
 8005bba:	883b      	ldrh	r3, [r7, #0]
 8005bbc:	4413      	add	r3, r2
 8005bbe:	3b01      	subs	r3, #1
 8005bc0:	121b      	asrs	r3, r3, #8
 8005bc2:	b2db      	uxtb	r3, r3
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	f000 fde5 	bl	8006794 <LCD_IO_WriteData8>
 8005bca:	88bb      	ldrh	r3, [r7, #4]
 8005bcc:	b2da      	uxtb	r2, r3
 8005bce:	883b      	ldrh	r3, [r7, #0]
 8005bd0:	b2db      	uxtb	r3, r3
 8005bd2:	4413      	add	r3, r2
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	3b01      	subs	r3, #1
 8005bd8:	b2db      	uxtb	r3, r3
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f000 fdda 	bl	8006794 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos);
 8005be0:	202b      	movs	r0, #43	; 0x2b
 8005be2:	f000 fdb9 	bl	8006758 <LCD_IO_WriteCmd8>
 8005be6:	887b      	ldrh	r3, [r7, #2]
 8005be8:	0a1b      	lsrs	r3, r3, #8
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	b2db      	uxtb	r3, r3
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f000 fdd0 	bl	8006794 <LCD_IO_WriteData8>
 8005bf4:	887b      	ldrh	r3, [r7, #2]
 8005bf6:	b2db      	uxtb	r3, r3
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f000 fdcb 	bl	8006794 <LCD_IO_WriteData8>
 8005bfe:	887b      	ldrh	r3, [r7, #2]
 8005c00:	0a1b      	lsrs	r3, r3, #8
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	b2db      	uxtb	r3, r3
 8005c06:	4618      	mov	r0, r3
 8005c08:	f000 fdc4 	bl	8006794 <LCD_IO_WriteData8>
 8005c0c:	887b      	ldrh	r3, [r7, #2]
 8005c0e:	b2db      	uxtb	r3, r3
 8005c10:	4618      	mov	r0, r3
 8005c12:	f000 fdbf 	bl	8006794 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8DataFill16(ILI9341_RAMWR, RGBCode, Length);
 8005c16:	883a      	ldrh	r2, [r7, #0]
 8005c18:	88fb      	ldrh	r3, [r7, #6]
 8005c1a:	4619      	mov	r1, r3
 8005c1c:	202c      	movs	r0, #44	; 0x2c
 8005c1e:	f000 fde5 	bl	80067ec <LCD_IO_WriteCmd8DataFill16>
  ILI9341_LCDMUTEX_POP();
}
 8005c22:	bf00      	nop
 8005c24:	370c      	adds	r7, #12
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd90      	pop	{r4, r7, pc}

08005c2a <ili9341_DrawVLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.
  * @retval None
  */
void ili9341_DrawVLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8005c2a:	b590      	push	{r4, r7, lr}
 8005c2c:	b083      	sub	sp, #12
 8005c2e:	af00      	add	r7, sp, #0
 8005c30:	4604      	mov	r4, r0
 8005c32:	4608      	mov	r0, r1
 8005c34:	4611      	mov	r1, r2
 8005c36:	461a      	mov	r2, r3
 8005c38:	4623      	mov	r3, r4
 8005c3a:	80fb      	strh	r3, [r7, #6]
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	80bb      	strh	r3, [r7, #4]
 8005c40:	460b      	mov	r3, r1
 8005c42:	807b      	strh	r3, [r7, #2]
 8005c44:	4613      	mov	r3, r2
 8005c46:	803b      	strh	r3, [r7, #0]
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos);
 8005c48:	202a      	movs	r0, #42	; 0x2a
 8005c4a:	f000 fd85 	bl	8006758 <LCD_IO_WriteCmd8>
 8005c4e:	88bb      	ldrh	r3, [r7, #4]
 8005c50:	0a1b      	lsrs	r3, r3, #8
 8005c52:	b29b      	uxth	r3, r3
 8005c54:	b2db      	uxtb	r3, r3
 8005c56:	4618      	mov	r0, r3
 8005c58:	f000 fd9c 	bl	8006794 <LCD_IO_WriteData8>
 8005c5c:	88bb      	ldrh	r3, [r7, #4]
 8005c5e:	b2db      	uxtb	r3, r3
 8005c60:	4618      	mov	r0, r3
 8005c62:	f000 fd97 	bl	8006794 <LCD_IO_WriteData8>
 8005c66:	88bb      	ldrh	r3, [r7, #4]
 8005c68:	0a1b      	lsrs	r3, r3, #8
 8005c6a:	b29b      	uxth	r3, r3
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f000 fd90 	bl	8006794 <LCD_IO_WriteData8>
 8005c74:	88bb      	ldrh	r3, [r7, #4]
 8005c76:	b2db      	uxtb	r3, r3
 8005c78:	4618      	mov	r0, r3
 8005c7a:	f000 fd8b 	bl	8006794 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Length - 1);
 8005c7e:	202b      	movs	r0, #43	; 0x2b
 8005c80:	f000 fd6a 	bl	8006758 <LCD_IO_WriteCmd8>
 8005c84:	887b      	ldrh	r3, [r7, #2]
 8005c86:	0a1b      	lsrs	r3, r3, #8
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	b2db      	uxtb	r3, r3
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f000 fd81 	bl	8006794 <LCD_IO_WriteData8>
 8005c92:	887b      	ldrh	r3, [r7, #2]
 8005c94:	b2db      	uxtb	r3, r3
 8005c96:	4618      	mov	r0, r3
 8005c98:	f000 fd7c 	bl	8006794 <LCD_IO_WriteData8>
 8005c9c:	887a      	ldrh	r2, [r7, #2]
 8005c9e:	883b      	ldrh	r3, [r7, #0]
 8005ca0:	4413      	add	r3, r2
 8005ca2:	3b01      	subs	r3, #1
 8005ca4:	121b      	asrs	r3, r3, #8
 8005ca6:	b2db      	uxtb	r3, r3
 8005ca8:	4618      	mov	r0, r3
 8005caa:	f000 fd73 	bl	8006794 <LCD_IO_WriteData8>
 8005cae:	887b      	ldrh	r3, [r7, #2]
 8005cb0:	b2da      	uxtb	r2, r3
 8005cb2:	883b      	ldrh	r3, [r7, #0]
 8005cb4:	b2db      	uxtb	r3, r3
 8005cb6:	4413      	add	r3, r2
 8005cb8:	b2db      	uxtb	r3, r3
 8005cba:	3b01      	subs	r3, #1
 8005cbc:	b2db      	uxtb	r3, r3
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f000 fd68 	bl	8006794 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8DataFill16(ILI9341_RAMWR, RGBCode, Length);
 8005cc4:	883a      	ldrh	r2, [r7, #0]
 8005cc6:	88fb      	ldrh	r3, [r7, #6]
 8005cc8:	4619      	mov	r1, r3
 8005cca:	202c      	movs	r0, #44	; 0x2c
 8005ccc:	f000 fd8e 	bl	80067ec <LCD_IO_WriteCmd8DataFill16>
  ILI9341_LCDMUTEX_POP();
}
 8005cd0:	bf00      	nop
 8005cd2:	370c      	adds	r7, #12
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bd90      	pop	{r4, r7, pc}

08005cd8 <ili9341_FillRect>:
  * @param  Ysize:    specifies the Y size
  * @param  RGBCode:  specifies the RGB color
  * @retval None
  */
void ili9341_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t RGBCode)
{
 8005cd8:	b590      	push	{r4, r7, lr}
 8005cda:	b083      	sub	sp, #12
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	4604      	mov	r4, r0
 8005ce0:	4608      	mov	r0, r1
 8005ce2:	4611      	mov	r1, r2
 8005ce4:	461a      	mov	r2, r3
 8005ce6:	4623      	mov	r3, r4
 8005ce8:	80fb      	strh	r3, [r7, #6]
 8005cea:	4603      	mov	r3, r0
 8005cec:	80bb      	strh	r3, [r7, #4]
 8005cee:	460b      	mov	r3, r1
 8005cf0:	807b      	strh	r3, [r7, #2]
 8005cf2:	4613      	mov	r3, r2
 8005cf4:	803b      	strh	r3, [r7, #0]
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Xsize - 1);
 8005cf6:	202a      	movs	r0, #42	; 0x2a
 8005cf8:	f000 fd2e 	bl	8006758 <LCD_IO_WriteCmd8>
 8005cfc:	88fb      	ldrh	r3, [r7, #6]
 8005cfe:	0a1b      	lsrs	r3, r3, #8
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	b2db      	uxtb	r3, r3
 8005d04:	4618      	mov	r0, r3
 8005d06:	f000 fd45 	bl	8006794 <LCD_IO_WriteData8>
 8005d0a:	88fb      	ldrh	r3, [r7, #6]
 8005d0c:	b2db      	uxtb	r3, r3
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f000 fd40 	bl	8006794 <LCD_IO_WriteData8>
 8005d14:	88fa      	ldrh	r2, [r7, #6]
 8005d16:	887b      	ldrh	r3, [r7, #2]
 8005d18:	4413      	add	r3, r2
 8005d1a:	3b01      	subs	r3, #1
 8005d1c:	121b      	asrs	r3, r3, #8
 8005d1e:	b2db      	uxtb	r3, r3
 8005d20:	4618      	mov	r0, r3
 8005d22:	f000 fd37 	bl	8006794 <LCD_IO_WriteData8>
 8005d26:	88fb      	ldrh	r3, [r7, #6]
 8005d28:	b2da      	uxtb	r2, r3
 8005d2a:	887b      	ldrh	r3, [r7, #2]
 8005d2c:	b2db      	uxtb	r3, r3
 8005d2e:	4413      	add	r3, r2
 8005d30:	b2db      	uxtb	r3, r3
 8005d32:	3b01      	subs	r3, #1
 8005d34:	b2db      	uxtb	r3, r3
 8005d36:	4618      	mov	r0, r3
 8005d38:	f000 fd2c 	bl	8006794 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Ysize - 1);
 8005d3c:	202b      	movs	r0, #43	; 0x2b
 8005d3e:	f000 fd0b 	bl	8006758 <LCD_IO_WriteCmd8>
 8005d42:	88bb      	ldrh	r3, [r7, #4]
 8005d44:	0a1b      	lsrs	r3, r3, #8
 8005d46:	b29b      	uxth	r3, r3
 8005d48:	b2db      	uxtb	r3, r3
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f000 fd22 	bl	8006794 <LCD_IO_WriteData8>
 8005d50:	88bb      	ldrh	r3, [r7, #4]
 8005d52:	b2db      	uxtb	r3, r3
 8005d54:	4618      	mov	r0, r3
 8005d56:	f000 fd1d 	bl	8006794 <LCD_IO_WriteData8>
 8005d5a:	88ba      	ldrh	r2, [r7, #4]
 8005d5c:	883b      	ldrh	r3, [r7, #0]
 8005d5e:	4413      	add	r3, r2
 8005d60:	3b01      	subs	r3, #1
 8005d62:	121b      	asrs	r3, r3, #8
 8005d64:	b2db      	uxtb	r3, r3
 8005d66:	4618      	mov	r0, r3
 8005d68:	f000 fd14 	bl	8006794 <LCD_IO_WriteData8>
 8005d6c:	88bb      	ldrh	r3, [r7, #4]
 8005d6e:	b2da      	uxtb	r2, r3
 8005d70:	883b      	ldrh	r3, [r7, #0]
 8005d72:	b2db      	uxtb	r3, r3
 8005d74:	4413      	add	r3, r2
 8005d76:	b2db      	uxtb	r3, r3
 8005d78:	3b01      	subs	r3, #1
 8005d7a:	b2db      	uxtb	r3, r3
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f000 fd09 	bl	8006794 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8DataFill16(ILI9341_RAMWR, RGBCode, Xsize * Ysize);
 8005d82:	887b      	ldrh	r3, [r7, #2]
 8005d84:	883a      	ldrh	r2, [r7, #0]
 8005d86:	fb02 f303 	mul.w	r3, r2, r3
 8005d8a:	461a      	mov	r2, r3
 8005d8c:	8b3b      	ldrh	r3, [r7, #24]
 8005d8e:	4619      	mov	r1, r3
 8005d90:	202c      	movs	r0, #44	; 0x2c
 8005d92:	f000 fd2b 	bl	80067ec <LCD_IO_WriteCmd8DataFill16>
  ILI9341_LCDMUTEX_POP();
}
 8005d96:	bf00      	nop
 8005d98:	370c      	adds	r7, #12
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd90      	pop	{r4, r7, pc}

08005d9e <ili9341_DrawRGBImage>:
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  * @brief  Draw direction: right then down
  */
void ili9341_DrawRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t *pData)
{
 8005d9e:	b590      	push	{r4, r7, lr}
 8005da0:	b083      	sub	sp, #12
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	4604      	mov	r4, r0
 8005da6:	4608      	mov	r0, r1
 8005da8:	4611      	mov	r1, r2
 8005daa:	461a      	mov	r2, r3
 8005dac:	4623      	mov	r3, r4
 8005dae:	80fb      	strh	r3, [r7, #6]
 8005db0:	4603      	mov	r3, r0
 8005db2:	80bb      	strh	r3, [r7, #4]
 8005db4:	460b      	mov	r3, r1
 8005db6:	807b      	strh	r3, [r7, #2]
 8005db8:	4613      	mov	r3, r2
 8005dba:	803b      	strh	r3, [r7, #0]
  ili9341_SetDisplayWindow(Xpos, Ypos, Xsize, Ysize);
 8005dbc:	883b      	ldrh	r3, [r7, #0]
 8005dbe:	887a      	ldrh	r2, [r7, #2]
 8005dc0:	88b9      	ldrh	r1, [r7, #4]
 8005dc2:	88f8      	ldrh	r0, [r7, #6]
 8005dc4:	f7ff fe72 	bl	8005aac <ili9341_SetDisplayWindow>
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8MultipleData16(ILI9341_RAMWR, pData, Xsize * Ysize);
 8005dc8:	887b      	ldrh	r3, [r7, #2]
 8005dca:	883a      	ldrh	r2, [r7, #0]
 8005dcc:	fb02 f303 	mul.w	r3, r2, r3
 8005dd0:	461a      	mov	r2, r3
 8005dd2:	69b9      	ldr	r1, [r7, #24]
 8005dd4:	202c      	movs	r0, #44	; 0x2c
 8005dd6:	f000 fd4f 	bl	8006878 <LCD_IO_WriteCmd8MultipleData16>
  ILI9341_LCDMUTEX_POP();
}
 8005dda:	bf00      	nop
 8005ddc:	370c      	adds	r7, #12
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd90      	pop	{r4, r7, pc}

08005de2 <ili9341_WriteChar>:
  * @param  fonto: font select (from font.h)
  * @param  RGB_Coder: Text Color
  * @param  RGB_bg: Char background Color
  * @retval None
  */
void ili9341_WriteChar(uint16_t Xpo, uint16_t Ypo, const char *chr,sFONT fonto, uint16_t RGB_Coder, uint16_t RGB_bg){
 8005de2:	b082      	sub	sp, #8
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b08a      	sub	sp, #40	; 0x28
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	603a      	str	r2, [r7, #0]
 8005dec:	637b      	str	r3, [r7, #52]	; 0x34
 8005dee:	4603      	mov	r3, r0
 8005df0:	80fb      	strh	r3, [r7, #6]
 8005df2:	460b      	mov	r3, r1
 8005df4:	80bb      	strh	r3, [r7, #4]
	/*ex
	 * ili9341_WriteChar(140, 50, "E", Font24, cl_ORANGE, cl_BLACK);
	 * */
	//// stored font data
	uint32_t hop32 = 0;
 8005df6:	2300      	movs	r3, #0
 8005df8:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t b8[4] = {0};
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	60fb      	str	r3, [r7, #12]
	 * c = i * rowbox -> jump to next column in next i rowloop
	 * k => jump to next row in that column
	 * */

	//// find num of bit rows per jump in fonts.c
	int rowbox = ceilf((float)(fonto.Width) / 8);
 8005dfe:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005e00:	ee07 3a90 	vmov	s15, r3
 8005e04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e08:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8005e0c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005e10:	eeb0 0a47 	vmov.f32	s0, s14
 8005e14:	f009 ffae 	bl	800fd74 <ceilf>
 8005e18:	eef0 7a40 	vmov.f32	s15, s0
 8005e1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005e20:	ee17 3a90 	vmov	r3, s15
 8005e24:	617b      	str	r3, [r7, #20]

	//// choose MSB check pos for each font size
	//// 0x80 , 0x8000 , 0x 800000
	uint32_t clif_msb = 0x80 << (8 * (rowbox - 1));
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	3b01      	subs	r3, #1
 8005e2a:	00db      	lsls	r3, r3, #3
 8005e2c:	2280      	movs	r2, #128	; 0x80
 8005e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e32:	613b      	str	r3, [r7, #16]

	//// -32 to offset sync ASCII Table start " " at 32
	//// double for loop as one char table
	for(int i = 0; i < fonto.Height; i++){
 8005e34:	2300      	movs	r3, #0
 8005e36:	623b      	str	r3, [r7, #32]
 8005e38:	e060      	b.n	8005efc <ili9341_WriteChar+0x11a>
		hop32 = 0;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	627b      	str	r3, [r7, #36]	; 0x24
		for(int k = 0;k < rowbox;k++){
 8005e3e:	2300      	movs	r3, #0
 8005e40:	61fb      	str	r3, [r7, #28]
 8005e42:	e024      	b.n	8005e8e <ili9341_WriteChar+0xac>
			b8[k] = fonto.table[((int)(*chr - 32) * fonto.Height * rowbox) + (i * rowbox) + k];
 8005e44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e46:	683a      	ldr	r2, [r7, #0]
 8005e48:	7812      	ldrb	r2, [r2, #0]
 8005e4a:	3a20      	subs	r2, #32
 8005e4c:	8f79      	ldrh	r1, [r7, #58]	; 0x3a
 8005e4e:	fb01 f202 	mul.w	r2, r1, r2
 8005e52:	6979      	ldr	r1, [r7, #20]
 8005e54:	fb02 f101 	mul.w	r1, r2, r1
 8005e58:	6a3a      	ldr	r2, [r7, #32]
 8005e5a:	6978      	ldr	r0, [r7, #20]
 8005e5c:	fb00 f202 	mul.w	r2, r0, r2
 8005e60:	4411      	add	r1, r2
 8005e62:	69fa      	ldr	r2, [r7, #28]
 8005e64:	440a      	add	r2, r1
 8005e66:	4413      	add	r3, r2
 8005e68:	7819      	ldrb	r1, [r3, #0]
 8005e6a:	f107 020c 	add.w	r2, r7, #12
 8005e6e:	69fb      	ldr	r3, [r7, #28]
 8005e70:	4413      	add	r3, r2
 8005e72:	460a      	mov	r2, r1
 8005e74:	701a      	strb	r2, [r3, #0]
			hop32 = (hop32 << 8) + b8[k];
 8005e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e78:	021b      	lsls	r3, r3, #8
 8005e7a:	f107 010c 	add.w	r1, r7, #12
 8005e7e:	69fa      	ldr	r2, [r7, #28]
 8005e80:	440a      	add	r2, r1
 8005e82:	7812      	ldrb	r2, [r2, #0]
 8005e84:	4413      	add	r3, r2
 8005e86:	627b      	str	r3, [r7, #36]	; 0x24
		for(int k = 0;k < rowbox;k++){
 8005e88:	69fb      	ldr	r3, [r7, #28]
 8005e8a:	3301      	adds	r3, #1
 8005e8c:	61fb      	str	r3, [r7, #28]
 8005e8e:	69fa      	ldr	r2, [r7, #28]
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	429a      	cmp	r2, r3
 8005e94:	dbd6      	blt.n	8005e44 <ili9341_WriteChar+0x62>
		}

		for(int j = 0; j < fonto.Width; j++){
 8005e96:	2300      	movs	r3, #0
 8005e98:	61bb      	str	r3, [r7, #24]
 8005e9a:	e027      	b.n	8005eec <ili9341_WriteChar+0x10a>
			//// if valuein fonttable is 1
			if((hop32 << j) & clif_msb){ // buu32.b32
 8005e9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e9e:	69bb      	ldr	r3, [r7, #24]
 8005ea0:	409a      	lsls	r2, r3
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	4013      	ands	r3, r2
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d00e      	beq.n	8005ec8 <ili9341_WriteChar+0xe6>
				ili9341_WritePixel(Xpo + j, Ypo + i, RGB_Coder);
 8005eaa:	69bb      	ldr	r3, [r7, #24]
 8005eac:	b29a      	uxth	r2, r3
 8005eae:	88fb      	ldrh	r3, [r7, #6]
 8005eb0:	4413      	add	r3, r2
 8005eb2:	b298      	uxth	r0, r3
 8005eb4:	6a3b      	ldr	r3, [r7, #32]
 8005eb6:	b29a      	uxth	r2, r3
 8005eb8:	88bb      	ldrh	r3, [r7, #4]
 8005eba:	4413      	add	r3, r2
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8005ec0:	4619      	mov	r1, r3
 8005ec2:	f7ff fda9 	bl	8005a18 <ili9341_WritePixel>
 8005ec6:	e00e      	b.n	8005ee6 <ili9341_WriteChar+0x104>
			}
			//// for background write
			else{
				ili9341_WritePixel(Xpo + j, Ypo + i, RGB_bg);
 8005ec8:	69bb      	ldr	r3, [r7, #24]
 8005eca:	b29a      	uxth	r2, r3
 8005ecc:	88fb      	ldrh	r3, [r7, #6]
 8005ece:	4413      	add	r3, r2
 8005ed0:	b298      	uxth	r0, r3
 8005ed2:	6a3b      	ldr	r3, [r7, #32]
 8005ed4:	b29a      	uxth	r2, r3
 8005ed6:	88bb      	ldrh	r3, [r7, #4]
 8005ed8:	4413      	add	r3, r2
 8005eda:	b29b      	uxth	r3, r3
 8005edc:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8005ee0:	4619      	mov	r1, r3
 8005ee2:	f7ff fd99 	bl	8005a18 <ili9341_WritePixel>
		for(int j = 0; j < fonto.Width; j++){
 8005ee6:	69bb      	ldr	r3, [r7, #24]
 8005ee8:	3301      	adds	r3, #1
 8005eea:	61bb      	str	r3, [r7, #24]
 8005eec:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005eee:	461a      	mov	r2, r3
 8005ef0:	69bb      	ldr	r3, [r7, #24]
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	dbd2      	blt.n	8005e9c <ili9341_WriteChar+0xba>
	for(int i = 0; i < fonto.Height; i++){
 8005ef6:	6a3b      	ldr	r3, [r7, #32]
 8005ef8:	3301      	adds	r3, #1
 8005efa:	623b      	str	r3, [r7, #32]
 8005efc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005efe:	461a      	mov	r2, r3
 8005f00:	6a3b      	ldr	r3, [r7, #32]
 8005f02:	4293      	cmp	r3, r2
 8005f04:	db99      	blt.n	8005e3a <ili9341_WriteChar+0x58>
			}

		}
	}
}
 8005f06:	bf00      	nop
 8005f08:	bf00      	nop
 8005f0a:	3728      	adds	r7, #40	; 0x28
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f12:	b002      	add	sp, #8
 8005f14:	4770      	bx	lr

08005f16 <ili9341_WriteCharNoBG>:
  * @param  chr:  Display Char
  * @param  fonto: font select (from font.h)
  * @param  RGB_Coder: Text Color
  * @retval None
  */
void ili9341_WriteCharNoBG(uint16_t Xpo, uint16_t Ypo, const char *chr,sFONT fonto, uint16_t RGB_Coder){
 8005f16:	b082      	sub	sp, #8
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b08a      	sub	sp, #40	; 0x28
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	603a      	str	r2, [r7, #0]
 8005f20:	637b      	str	r3, [r7, #52]	; 0x34
 8005f22:	4603      	mov	r3, r0
 8005f24:	80fb      	strh	r3, [r7, #6]
 8005f26:	460b      	mov	r3, r1
 8005f28:	80bb      	strh	r3, [r7, #4]
	/*ex
	 * ili9341_WriteCharNoBG(10, 30, "E", Font24, cl_ORANGE);
	 * */
	//// stored font data
	uint32_t hop32 = 0;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t b8[4] = {0};
 8005f2e:	2300      	movs	r3, #0
 8005f30:	60fb      	str	r3, [r7, #12]

	//// find num of bit rows per jump in fonts.c
	int rowbox = ceilf((float)(fonto.Width) / 8);
 8005f32:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005f34:	ee07 3a90 	vmov	s15, r3
 8005f38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f3c:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8005f40:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005f44:	eeb0 0a47 	vmov.f32	s0, s14
 8005f48:	f009 ff14 	bl	800fd74 <ceilf>
 8005f4c:	eef0 7a40 	vmov.f32	s15, s0
 8005f50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005f54:	ee17 3a90 	vmov	r3, s15
 8005f58:	617b      	str	r3, [r7, #20]
	uint32_t clif_msb = 0x80 << (8 * (rowbox - 1));
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	3b01      	subs	r3, #1
 8005f5e:	00db      	lsls	r3, r3, #3
 8005f60:	2280      	movs	r2, #128	; 0x80
 8005f62:	fa02 f303 	lsl.w	r3, r2, r3
 8005f66:	613b      	str	r3, [r7, #16]

	for(int i = 0; i < fonto.Height; i++){
 8005f68:	2300      	movs	r3, #0
 8005f6a:	623b      	str	r3, [r7, #32]
 8005f6c:	e050      	b.n	8006010 <ili9341_WriteCharNoBG+0xfa>
		hop32 = 0;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	627b      	str	r3, [r7, #36]	; 0x24
		for(int k = 0;k < rowbox;k++){
 8005f72:	2300      	movs	r3, #0
 8005f74:	61fb      	str	r3, [r7, #28]
 8005f76:	e024      	b.n	8005fc2 <ili9341_WriteCharNoBG+0xac>
			b8[k] = fonto.table[((int)(*chr - 32) * fonto.Height * rowbox) + (i * rowbox) + k];
 8005f78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f7a:	683a      	ldr	r2, [r7, #0]
 8005f7c:	7812      	ldrb	r2, [r2, #0]
 8005f7e:	3a20      	subs	r2, #32
 8005f80:	8f79      	ldrh	r1, [r7, #58]	; 0x3a
 8005f82:	fb01 f202 	mul.w	r2, r1, r2
 8005f86:	6979      	ldr	r1, [r7, #20]
 8005f88:	fb02 f101 	mul.w	r1, r2, r1
 8005f8c:	6a3a      	ldr	r2, [r7, #32]
 8005f8e:	6978      	ldr	r0, [r7, #20]
 8005f90:	fb00 f202 	mul.w	r2, r0, r2
 8005f94:	4411      	add	r1, r2
 8005f96:	69fa      	ldr	r2, [r7, #28]
 8005f98:	440a      	add	r2, r1
 8005f9a:	4413      	add	r3, r2
 8005f9c:	7819      	ldrb	r1, [r3, #0]
 8005f9e:	f107 020c 	add.w	r2, r7, #12
 8005fa2:	69fb      	ldr	r3, [r7, #28]
 8005fa4:	4413      	add	r3, r2
 8005fa6:	460a      	mov	r2, r1
 8005fa8:	701a      	strb	r2, [r3, #0]
			hop32 = (hop32 << 8) + b8[k];
 8005faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fac:	021b      	lsls	r3, r3, #8
 8005fae:	f107 010c 	add.w	r1, r7, #12
 8005fb2:	69fa      	ldr	r2, [r7, #28]
 8005fb4:	440a      	add	r2, r1
 8005fb6:	7812      	ldrb	r2, [r2, #0]
 8005fb8:	4413      	add	r3, r2
 8005fba:	627b      	str	r3, [r7, #36]	; 0x24
		for(int k = 0;k < rowbox;k++){
 8005fbc:	69fb      	ldr	r3, [r7, #28]
 8005fbe:	3301      	adds	r3, #1
 8005fc0:	61fb      	str	r3, [r7, #28]
 8005fc2:	69fa      	ldr	r2, [r7, #28]
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	429a      	cmp	r2, r3
 8005fc8:	dbd6      	blt.n	8005f78 <ili9341_WriteCharNoBG+0x62>
		}

		for(int j = 0; j < fonto.Width; j++){
 8005fca:	2300      	movs	r3, #0
 8005fcc:	61bb      	str	r3, [r7, #24]
 8005fce:	e017      	b.n	8006000 <ili9341_WriteCharNoBG+0xea>
			//// if valuein fonttable is 1
			if((hop32 << j) & clif_msb){ // buu32.b32
 8005fd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fd2:	69bb      	ldr	r3, [r7, #24]
 8005fd4:	409a      	lsls	r2, r3
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	4013      	ands	r3, r2
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d00d      	beq.n	8005ffa <ili9341_WriteCharNoBG+0xe4>
				ili9341_WritePixel(Xpo + j, Ypo + i, RGB_Coder);
 8005fde:	69bb      	ldr	r3, [r7, #24]
 8005fe0:	b29a      	uxth	r2, r3
 8005fe2:	88fb      	ldrh	r3, [r7, #6]
 8005fe4:	4413      	add	r3, r2
 8005fe6:	b298      	uxth	r0, r3
 8005fe8:	6a3b      	ldr	r3, [r7, #32]
 8005fea:	b29a      	uxth	r2, r3
 8005fec:	88bb      	ldrh	r3, [r7, #4]
 8005fee:	4413      	add	r3, r2
 8005ff0:	b29b      	uxth	r3, r3
 8005ff2:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8005ff4:	4619      	mov	r1, r3
 8005ff6:	f7ff fd0f 	bl	8005a18 <ili9341_WritePixel>
		for(int j = 0; j < fonto.Width; j++){
 8005ffa:	69bb      	ldr	r3, [r7, #24]
 8005ffc:	3301      	adds	r3, #1
 8005ffe:	61bb      	str	r3, [r7, #24]
 8006000:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006002:	461a      	mov	r2, r3
 8006004:	69bb      	ldr	r3, [r7, #24]
 8006006:	4293      	cmp	r3, r2
 8006008:	dbe2      	blt.n	8005fd0 <ili9341_WriteCharNoBG+0xba>
	for(int i = 0; i < fonto.Height; i++){
 800600a:	6a3b      	ldr	r3, [r7, #32]
 800600c:	3301      	adds	r3, #1
 800600e:	623b      	str	r3, [r7, #32]
 8006010:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006012:	461a      	mov	r2, r3
 8006014:	6a3b      	ldr	r3, [r7, #32]
 8006016:	4293      	cmp	r3, r2
 8006018:	dba9      	blt.n	8005f6e <ili9341_WriteCharNoBG+0x58>
			}
		}
	}
}
 800601a:	bf00      	nop
 800601c:	bf00      	nop
 800601e:	3728      	adds	r7, #40	; 0x28
 8006020:	46bd      	mov	sp, r7
 8006022:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006026:	b002      	add	sp, #8
 8006028:	4770      	bx	lr

0800602a <ili9341_WriteString>:
  * @param  fonto: font select (from font.h)
  * @param  RGB_Coder: Text Color
  * @param  RGB_bg: Text background Color
  * @retval None
  */
void ili9341_WriteString(uint16_t Xpo, uint16_t Ypo,const char* strr,sFONT fonto, uint16_t RGB_Coder, uint16_t RGB_bg){
 800602a:	b082      	sub	sp, #8
 800602c:	b580      	push	{r7, lr}
 800602e:	b088      	sub	sp, #32
 8006030:	af04      	add	r7, sp, #16
 8006032:	603a      	str	r2, [r7, #0]
 8006034:	61fb      	str	r3, [r7, #28]
 8006036:	4603      	mov	r3, r0
 8006038:	80fb      	strh	r3, [r7, #6]
 800603a:	460b      	mov	r3, r1
 800603c:	80bb      	strh	r3, [r7, #4]
	/*ex
	 * ili9341_WriteString(20, 300, "Helios xTerra", Font20, cl_WHITE, cl_BLACK);
	 * */
	uint16_t ili_heigh = ili9341_GetLcdPixelHeight();
 800603e:	f7ff fc14 	bl	800586a <ili9341_GetLcdPixelHeight>
 8006042:	4603      	mov	r3, r0
 8006044:	81fb      	strh	r3, [r7, #14]
	uint16_t ili_width = ili9341_GetLcdPixelWidth();
 8006046:	f7ff fc07 	bl	8005858 <ili9341_GetLcdPixelWidth>
 800604a:	4603      	mov	r3, r0
 800604c:	81bb      	strh	r3, [r7, #12]
	while(*strr){
 800604e:	e02c      	b.n	80060aa <ili9341_WriteString+0x80>
	//// Check screen overflow / new line
		if(Xpo + fonto.Width >= ili_width){
 8006050:	88fb      	ldrh	r3, [r7, #6]
 8006052:	8c3a      	ldrh	r2, [r7, #32]
 8006054:	441a      	add	r2, r3
 8006056:	89bb      	ldrh	r3, [r7, #12]
 8006058:	429a      	cmp	r2, r3
 800605a:	db13      	blt.n	8006084 <ili9341_WriteString+0x5a>
			Xpo = 0;
 800605c:	2300      	movs	r3, #0
 800605e:	80fb      	strh	r3, [r7, #6]
			Ypo += fonto.Height;
 8006060:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006062:	88bb      	ldrh	r3, [r7, #4]
 8006064:	4413      	add	r3, r2
 8006066:	80bb      	strh	r3, [r7, #4]

			if(Ypo + fonto.Height >= ili_heigh){
 8006068:	88bb      	ldrh	r3, [r7, #4]
 800606a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800606c:	441a      	add	r2, r3
 800606e:	89fb      	ldrh	r3, [r7, #14]
 8006070:	429a      	cmp	r2, r3
 8006072:	da1f      	bge.n	80060b4 <ili9341_WriteString+0x8a>
				break;
			}

			if(*strr == ' ') {
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	781b      	ldrb	r3, [r3, #0]
 8006078:	2b20      	cmp	r3, #32
 800607a:	d103      	bne.n	8006084 <ili9341_WriteString+0x5a>
				// skip spaces in the beginning of the new line
				strr++;
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	3301      	adds	r3, #1
 8006080:	603b      	str	r3, [r7, #0]
				continue;
 8006082:	e012      	b.n	80060aa <ili9341_WriteString+0x80>
			}
		}
		//ST7735_WriteChar(x, y, *str, font, color, bgcolor);
		ili9341_WriteChar(Xpo, Ypo, strr, fonto, RGB_Coder, RGB_bg);
 8006084:	88b9      	ldrh	r1, [r7, #4]
 8006086:	88f8      	ldrh	r0, [r7, #6]
 8006088:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800608a:	9302      	str	r3, [sp, #8]
 800608c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800608e:	9301      	str	r3, [sp, #4]
 8006090:	6a3b      	ldr	r3, [r7, #32]
 8006092:	9300      	str	r3, [sp, #0]
 8006094:	69fb      	ldr	r3, [r7, #28]
 8006096:	683a      	ldr	r2, [r7, #0]
 8006098:	f7ff fea3 	bl	8005de2 <ili9341_WriteChar>
		Xpo += fonto.Width;
 800609c:	8c3a      	ldrh	r2, [r7, #32]
 800609e:	88fb      	ldrh	r3, [r7, #6]
 80060a0:	4413      	add	r3, r2
 80060a2:	80fb      	strh	r3, [r7, #6]
		strr++;
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	3301      	adds	r3, #1
 80060a8:	603b      	str	r3, [r7, #0]
	while(*strr){
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	781b      	ldrb	r3, [r3, #0]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d1ce      	bne.n	8006050 <ili9341_WriteString+0x26>
	}
}
 80060b2:	e000      	b.n	80060b6 <ili9341_WriteString+0x8c>
				break;
 80060b4:	bf00      	nop
}
 80060b6:	bf00      	nop
 80060b8:	3710      	adds	r7, #16
 80060ba:	46bd      	mov	sp, r7
 80060bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80060c0:	b002      	add	sp, #8
 80060c2:	4770      	bx	lr

080060c4 <ili9341_WriteStringNoBG>:
  * @param  Strr:  Display Text
  * @param  fonto: font select (from font.h)
  * @param  RGB_Coder: Text Color
  * @retval None
  */
void ili9341_WriteStringNoBG(uint16_t Xpo, uint16_t Ypo,const char* strr,sFONT fonto, uint16_t RGB_Coder){
 80060c4:	b082      	sub	sp, #8
 80060c6:	b580      	push	{r7, lr}
 80060c8:	b086      	sub	sp, #24
 80060ca:	af02      	add	r7, sp, #8
 80060cc:	603a      	str	r2, [r7, #0]
 80060ce:	61fb      	str	r3, [r7, #28]
 80060d0:	4603      	mov	r3, r0
 80060d2:	80fb      	strh	r3, [r7, #6]
 80060d4:	460b      	mov	r3, r1
 80060d6:	80bb      	strh	r3, [r7, #4]
	/*ex
	 * ili9341_WriteString(20, 300, "Helios xTerra", Font20, cl_WHITE, cl_BLACK);
	 * */
	uint16_t ili_heigh = ili9341_GetLcdPixelHeight();
 80060d8:	f7ff fbc7 	bl	800586a <ili9341_GetLcdPixelHeight>
 80060dc:	4603      	mov	r3, r0
 80060de:	81fb      	strh	r3, [r7, #14]
	uint16_t ili_width = ili9341_GetLcdPixelWidth();
 80060e0:	f7ff fbba 	bl	8005858 <ili9341_GetLcdPixelWidth>
 80060e4:	4603      	mov	r3, r0
 80060e6:	81bb      	strh	r3, [r7, #12]
	while(*strr){
 80060e8:	e02a      	b.n	8006140 <ili9341_WriteStringNoBG+0x7c>
	//// Check screen overflow / new line
		if(Xpo + fonto.Width >= ili_width){
 80060ea:	88fb      	ldrh	r3, [r7, #6]
 80060ec:	8c3a      	ldrh	r2, [r7, #32]
 80060ee:	441a      	add	r2, r3
 80060f0:	89bb      	ldrh	r3, [r7, #12]
 80060f2:	429a      	cmp	r2, r3
 80060f4:	db13      	blt.n	800611e <ili9341_WriteStringNoBG+0x5a>
			Xpo = 0;
 80060f6:	2300      	movs	r3, #0
 80060f8:	80fb      	strh	r3, [r7, #6]
			Ypo += fonto.Height;
 80060fa:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80060fc:	88bb      	ldrh	r3, [r7, #4]
 80060fe:	4413      	add	r3, r2
 8006100:	80bb      	strh	r3, [r7, #4]

			if(Ypo + fonto.Height >= ili_heigh){
 8006102:	88bb      	ldrh	r3, [r7, #4]
 8006104:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006106:	441a      	add	r2, r3
 8006108:	89fb      	ldrh	r3, [r7, #14]
 800610a:	429a      	cmp	r2, r3
 800610c:	da1d      	bge.n	800614a <ili9341_WriteStringNoBG+0x86>
				break;
			}
			if(*strr == ' ') {
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	781b      	ldrb	r3, [r3, #0]
 8006112:	2b20      	cmp	r3, #32
 8006114:	d103      	bne.n	800611e <ili9341_WriteStringNoBG+0x5a>
				strr++;
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	3301      	adds	r3, #1
 800611a:	603b      	str	r3, [r7, #0]
				continue;
 800611c:	e010      	b.n	8006140 <ili9341_WriteStringNoBG+0x7c>
			}
		}
		ili9341_WriteCharNoBG(Xpo, Ypo, strr, fonto, RGB_Coder);
 800611e:	88b9      	ldrh	r1, [r7, #4]
 8006120:	88f8      	ldrh	r0, [r7, #6]
 8006122:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006124:	9301      	str	r3, [sp, #4]
 8006126:	6a3b      	ldr	r3, [r7, #32]
 8006128:	9300      	str	r3, [sp, #0]
 800612a:	69fb      	ldr	r3, [r7, #28]
 800612c:	683a      	ldr	r2, [r7, #0]
 800612e:	f7ff fef2 	bl	8005f16 <ili9341_WriteCharNoBG>
		Xpo += fonto.Width;
 8006132:	8c3a      	ldrh	r2, [r7, #32]
 8006134:	88fb      	ldrh	r3, [r7, #6]
 8006136:	4413      	add	r3, r2
 8006138:	80fb      	strh	r3, [r7, #6]
		strr++;
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	3301      	adds	r3, #1
 800613e:	603b      	str	r3, [r7, #0]
	while(*strr){
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	781b      	ldrb	r3, [r3, #0]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d1d0      	bne.n	80060ea <ili9341_WriteStringNoBG+0x26>
	}
}
 8006148:	e000      	b.n	800614c <ili9341_WriteStringNoBG+0x88>
				break;
 800614a:	bf00      	nop
}
 800614c:	bf00      	nop
 800614e:	3710      	adds	r7, #16
 8006150:	46bd      	mov	sp, r7
 8006152:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006156:	b002      	add	sp, #8
 8006158:	4770      	bx	lr
	...

0800615c <LcdWrite8>:

#define LCD_WRITE_CLK         GPIOX_ODR(LCD_SCK) = 0; LCD_WRITE_DELAY; GPIOX_ODR(LCD_SCK) = 1;
#define LCD_READ_CLK          GPIOX_ODR(LCD_SCK) = 1; GPIOX_ODR(LCD_SCK) = 0; LCD_READ_DELAY;

void LcdWrite8(uint8_t d8)
{
 800615c:	b480      	push	{r7}
 800615e:	b083      	sub	sp, #12
 8006160:	af00      	add	r7, sp, #0
 8006162:	4603      	mov	r3, r0
 8006164:	71fb      	strb	r3, [r7, #7]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 7);
 8006166:	1dfb      	adds	r3, r7, #7
 8006168:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800616c:	1dfb      	adds	r3, r7, #7
 800616e:	015b      	lsls	r3, r3, #5
 8006170:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8006174:	f023 031f 	bic.w	r3, r3, #31
 8006178:	4313      	orrs	r3, r2
 800617a:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800617e:	331c      	adds	r3, #28
 8006180:	4a53      	ldr	r2, [pc, #332]	; (80062d0 <LcdWrite8+0x174>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8006186:	4b53      	ldr	r3, [pc, #332]	; (80062d4 <LcdWrite8+0x178>)
 8006188:	2200      	movs	r2, #0
 800618a:	601a      	str	r2, [r3, #0]
 800618c:	4b51      	ldr	r3, [pc, #324]	; (80062d4 <LcdWrite8+0x178>)
 800618e:	2201      	movs	r2, #1
 8006190:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 6);
 8006192:	1dfb      	adds	r3, r7, #7
 8006194:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8006198:	1dfb      	adds	r3, r7, #7
 800619a:	015b      	lsls	r3, r3, #5
 800619c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80061a0:	f023 031f 	bic.w	r3, r3, #31
 80061a4:	4313      	orrs	r3, r2
 80061a6:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80061aa:	3318      	adds	r3, #24
 80061ac:	4a48      	ldr	r2, [pc, #288]	; (80062d0 <LcdWrite8+0x174>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 80061b2:	4b48      	ldr	r3, [pc, #288]	; (80062d4 <LcdWrite8+0x178>)
 80061b4:	2200      	movs	r2, #0
 80061b6:	601a      	str	r2, [r3, #0]
 80061b8:	4b46      	ldr	r3, [pc, #280]	; (80062d4 <LcdWrite8+0x178>)
 80061ba:	2201      	movs	r2, #1
 80061bc:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 5);
 80061be:	1dfb      	adds	r3, r7, #7
 80061c0:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80061c4:	1dfb      	adds	r3, r7, #7
 80061c6:	015b      	lsls	r3, r3, #5
 80061c8:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80061cc:	f023 031f 	bic.w	r3, r3, #31
 80061d0:	4313      	orrs	r3, r2
 80061d2:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80061d6:	3314      	adds	r3, #20
 80061d8:	4a3d      	ldr	r2, [pc, #244]	; (80062d0 <LcdWrite8+0x174>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 80061de:	4b3d      	ldr	r3, [pc, #244]	; (80062d4 <LcdWrite8+0x178>)
 80061e0:	2200      	movs	r2, #0
 80061e2:	601a      	str	r2, [r3, #0]
 80061e4:	4b3b      	ldr	r3, [pc, #236]	; (80062d4 <LcdWrite8+0x178>)
 80061e6:	2201      	movs	r2, #1
 80061e8:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 4);
 80061ea:	1dfb      	adds	r3, r7, #7
 80061ec:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80061f0:	1dfb      	adds	r3, r7, #7
 80061f2:	015b      	lsls	r3, r3, #5
 80061f4:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80061f8:	f023 031f 	bic.w	r3, r3, #31
 80061fc:	4313      	orrs	r3, r2
 80061fe:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8006202:	3310      	adds	r3, #16
 8006204:	4a32      	ldr	r2, [pc, #200]	; (80062d0 <LcdWrite8+0x174>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 800620a:	4b32      	ldr	r3, [pc, #200]	; (80062d4 <LcdWrite8+0x178>)
 800620c:	2200      	movs	r2, #0
 800620e:	601a      	str	r2, [r3, #0]
 8006210:	4b30      	ldr	r3, [pc, #192]	; (80062d4 <LcdWrite8+0x178>)
 8006212:	2201      	movs	r2, #1
 8006214:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 3);
 8006216:	1dfb      	adds	r3, r7, #7
 8006218:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800621c:	1dfb      	adds	r3, r7, #7
 800621e:	015b      	lsls	r3, r3, #5
 8006220:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8006224:	f023 031f 	bic.w	r3, r3, #31
 8006228:	4313      	orrs	r3, r2
 800622a:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800622e:	330c      	adds	r3, #12
 8006230:	4a27      	ldr	r2, [pc, #156]	; (80062d0 <LcdWrite8+0x174>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8006236:	4b27      	ldr	r3, [pc, #156]	; (80062d4 <LcdWrite8+0x178>)
 8006238:	2200      	movs	r2, #0
 800623a:	601a      	str	r2, [r3, #0]
 800623c:	4b25      	ldr	r3, [pc, #148]	; (80062d4 <LcdWrite8+0x178>)
 800623e:	2201      	movs	r2, #1
 8006240:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 2);
 8006242:	1dfb      	adds	r3, r7, #7
 8006244:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8006248:	1dfb      	adds	r3, r7, #7
 800624a:	015b      	lsls	r3, r3, #5
 800624c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8006250:	f023 031f 	bic.w	r3, r3, #31
 8006254:	4313      	orrs	r3, r2
 8006256:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800625a:	3308      	adds	r3, #8
 800625c:	4a1c      	ldr	r2, [pc, #112]	; (80062d0 <LcdWrite8+0x174>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8006262:	4b1c      	ldr	r3, [pc, #112]	; (80062d4 <LcdWrite8+0x178>)
 8006264:	2200      	movs	r2, #0
 8006266:	601a      	str	r2, [r3, #0]
 8006268:	4b1a      	ldr	r3, [pc, #104]	; (80062d4 <LcdWrite8+0x178>)
 800626a:	2201      	movs	r2, #1
 800626c:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 1);
 800626e:	1dfb      	adds	r3, r7, #7
 8006270:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8006274:	1dfb      	adds	r3, r7, #7
 8006276:	015b      	lsls	r3, r3, #5
 8006278:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 800627c:	f023 031f 	bic.w	r3, r3, #31
 8006280:	4313      	orrs	r3, r2
 8006282:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8006286:	3304      	adds	r3, #4
 8006288:	4a11      	ldr	r2, [pc, #68]	; (80062d0 <LcdWrite8+0x174>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 800628e:	4b11      	ldr	r3, [pc, #68]	; (80062d4 <LcdWrite8+0x178>)
 8006290:	2200      	movs	r2, #0
 8006292:	601a      	str	r2, [r3, #0]
 8006294:	4b0f      	ldr	r3, [pc, #60]	; (80062d4 <LcdWrite8+0x178>)
 8006296:	2201      	movs	r2, #1
 8006298:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 0);
 800629a:	1dfb      	adds	r3, r7, #7
 800629c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80062a0:	1dfb      	adds	r3, r7, #7
 80062a2:	015b      	lsls	r3, r3, #5
 80062a4:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80062a8:	f023 031f 	bic.w	r3, r3, #31
 80062ac:	4313      	orrs	r3, r2
 80062ae:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80062b2:	4a07      	ldr	r2, [pc, #28]	; (80062d0 <LcdWrite8+0x174>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 80062b8:	4b06      	ldr	r3, [pc, #24]	; (80062d4 <LcdWrite8+0x178>)
 80062ba:	2200      	movs	r2, #0
 80062bc:	601a      	str	r2, [r3, #0]
 80062be:	4b05      	ldr	r3, [pc, #20]	; (80062d4 <LcdWrite8+0x178>)
 80062c0:	2201      	movs	r2, #1
 80062c2:	601a      	str	r2, [r3, #0]
}
 80062c4:	bf00      	nop
 80062c6:	370c      	adds	r7, #12
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr
 80062d0:	4241028c 	.word	0x4241028c
 80062d4:	42408280 	.word	0x42408280

080062d8 <LcdWrite16>:

void LcdWrite16(uint16_t d16)
{
 80062d8:	b480      	push	{r7}
 80062da:	b083      	sub	sp, #12
 80062dc:	af00      	add	r7, sp, #0
 80062de:	4603      	mov	r3, r0
 80062e0:	80fb      	strh	r3, [r7, #6]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 15);
 80062e2:	1dbb      	adds	r3, r7, #6
 80062e4:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80062e8:	1dbb      	adds	r3, r7, #6
 80062ea:	015b      	lsls	r3, r3, #5
 80062ec:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80062f0:	f023 031f 	bic.w	r3, r3, #31
 80062f4:	4313      	orrs	r3, r2
 80062f6:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80062fa:	333c      	adds	r3, #60	; 0x3c
 80062fc:	4aab      	ldr	r2, [pc, #684]	; (80065ac <LcdWrite16+0x2d4>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8006302:	4bab      	ldr	r3, [pc, #684]	; (80065b0 <LcdWrite16+0x2d8>)
 8006304:	2200      	movs	r2, #0
 8006306:	601a      	str	r2, [r3, #0]
 8006308:	4ba9      	ldr	r3, [pc, #676]	; (80065b0 <LcdWrite16+0x2d8>)
 800630a:	2201      	movs	r2, #1
 800630c:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 14);
 800630e:	1dbb      	adds	r3, r7, #6
 8006310:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8006314:	1dbb      	adds	r3, r7, #6
 8006316:	015b      	lsls	r3, r3, #5
 8006318:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 800631c:	f023 031f 	bic.w	r3, r3, #31
 8006320:	4313      	orrs	r3, r2
 8006322:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8006326:	3338      	adds	r3, #56	; 0x38
 8006328:	4aa0      	ldr	r2, [pc, #640]	; (80065ac <LcdWrite16+0x2d4>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 800632e:	4ba0      	ldr	r3, [pc, #640]	; (80065b0 <LcdWrite16+0x2d8>)
 8006330:	2200      	movs	r2, #0
 8006332:	601a      	str	r2, [r3, #0]
 8006334:	4b9e      	ldr	r3, [pc, #632]	; (80065b0 <LcdWrite16+0x2d8>)
 8006336:	2201      	movs	r2, #1
 8006338:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 13);
 800633a:	1dbb      	adds	r3, r7, #6
 800633c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8006340:	1dbb      	adds	r3, r7, #6
 8006342:	015b      	lsls	r3, r3, #5
 8006344:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8006348:	f023 031f 	bic.w	r3, r3, #31
 800634c:	4313      	orrs	r3, r2
 800634e:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8006352:	3334      	adds	r3, #52	; 0x34
 8006354:	4a95      	ldr	r2, [pc, #596]	; (80065ac <LcdWrite16+0x2d4>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 800635a:	4b95      	ldr	r3, [pc, #596]	; (80065b0 <LcdWrite16+0x2d8>)
 800635c:	2200      	movs	r2, #0
 800635e:	601a      	str	r2, [r3, #0]
 8006360:	4b93      	ldr	r3, [pc, #588]	; (80065b0 <LcdWrite16+0x2d8>)
 8006362:	2201      	movs	r2, #1
 8006364:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 12);
 8006366:	1dbb      	adds	r3, r7, #6
 8006368:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800636c:	1dbb      	adds	r3, r7, #6
 800636e:	015b      	lsls	r3, r3, #5
 8006370:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8006374:	f023 031f 	bic.w	r3, r3, #31
 8006378:	4313      	orrs	r3, r2
 800637a:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800637e:	3330      	adds	r3, #48	; 0x30
 8006380:	4a8a      	ldr	r2, [pc, #552]	; (80065ac <LcdWrite16+0x2d4>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8006386:	4b8a      	ldr	r3, [pc, #552]	; (80065b0 <LcdWrite16+0x2d8>)
 8006388:	2200      	movs	r2, #0
 800638a:	601a      	str	r2, [r3, #0]
 800638c:	4b88      	ldr	r3, [pc, #544]	; (80065b0 <LcdWrite16+0x2d8>)
 800638e:	2201      	movs	r2, #1
 8006390:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 11);
 8006392:	1dbb      	adds	r3, r7, #6
 8006394:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8006398:	1dbb      	adds	r3, r7, #6
 800639a:	015b      	lsls	r3, r3, #5
 800639c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80063a0:	f023 031f 	bic.w	r3, r3, #31
 80063a4:	4313      	orrs	r3, r2
 80063a6:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80063aa:	332c      	adds	r3, #44	; 0x2c
 80063ac:	4a7f      	ldr	r2, [pc, #508]	; (80065ac <LcdWrite16+0x2d4>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 80063b2:	4b7f      	ldr	r3, [pc, #508]	; (80065b0 <LcdWrite16+0x2d8>)
 80063b4:	2200      	movs	r2, #0
 80063b6:	601a      	str	r2, [r3, #0]
 80063b8:	4b7d      	ldr	r3, [pc, #500]	; (80065b0 <LcdWrite16+0x2d8>)
 80063ba:	2201      	movs	r2, #1
 80063bc:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 10);
 80063be:	1dbb      	adds	r3, r7, #6
 80063c0:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80063c4:	1dbb      	adds	r3, r7, #6
 80063c6:	015b      	lsls	r3, r3, #5
 80063c8:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80063cc:	f023 031f 	bic.w	r3, r3, #31
 80063d0:	4313      	orrs	r3, r2
 80063d2:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80063d6:	3328      	adds	r3, #40	; 0x28
 80063d8:	4a74      	ldr	r2, [pc, #464]	; (80065ac <LcdWrite16+0x2d4>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 80063de:	4b74      	ldr	r3, [pc, #464]	; (80065b0 <LcdWrite16+0x2d8>)
 80063e0:	2200      	movs	r2, #0
 80063e2:	601a      	str	r2, [r3, #0]
 80063e4:	4b72      	ldr	r3, [pc, #456]	; (80065b0 <LcdWrite16+0x2d8>)
 80063e6:	2201      	movs	r2, #1
 80063e8:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 9);
 80063ea:	1dbb      	adds	r3, r7, #6
 80063ec:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80063f0:	1dbb      	adds	r3, r7, #6
 80063f2:	015b      	lsls	r3, r3, #5
 80063f4:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80063f8:	f023 031f 	bic.w	r3, r3, #31
 80063fc:	4313      	orrs	r3, r2
 80063fe:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8006402:	3324      	adds	r3, #36	; 0x24
 8006404:	4a69      	ldr	r2, [pc, #420]	; (80065ac <LcdWrite16+0x2d4>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 800640a:	4b69      	ldr	r3, [pc, #420]	; (80065b0 <LcdWrite16+0x2d8>)
 800640c:	2200      	movs	r2, #0
 800640e:	601a      	str	r2, [r3, #0]
 8006410:	4b67      	ldr	r3, [pc, #412]	; (80065b0 <LcdWrite16+0x2d8>)
 8006412:	2201      	movs	r2, #1
 8006414:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 8);
 8006416:	1dbb      	adds	r3, r7, #6
 8006418:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800641c:	1dbb      	adds	r3, r7, #6
 800641e:	015b      	lsls	r3, r3, #5
 8006420:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8006424:	f023 031f 	bic.w	r3, r3, #31
 8006428:	4313      	orrs	r3, r2
 800642a:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800642e:	3320      	adds	r3, #32
 8006430:	4a5e      	ldr	r2, [pc, #376]	; (80065ac <LcdWrite16+0x2d4>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8006436:	4b5e      	ldr	r3, [pc, #376]	; (80065b0 <LcdWrite16+0x2d8>)
 8006438:	2200      	movs	r2, #0
 800643a:	601a      	str	r2, [r3, #0]
 800643c:	4b5c      	ldr	r3, [pc, #368]	; (80065b0 <LcdWrite16+0x2d8>)
 800643e:	2201      	movs	r2, #1
 8006440:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 7);
 8006442:	1dbb      	adds	r3, r7, #6
 8006444:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8006448:	1dbb      	adds	r3, r7, #6
 800644a:	015b      	lsls	r3, r3, #5
 800644c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8006450:	f023 031f 	bic.w	r3, r3, #31
 8006454:	4313      	orrs	r3, r2
 8006456:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800645a:	331c      	adds	r3, #28
 800645c:	4a53      	ldr	r2, [pc, #332]	; (80065ac <LcdWrite16+0x2d4>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8006462:	4b53      	ldr	r3, [pc, #332]	; (80065b0 <LcdWrite16+0x2d8>)
 8006464:	2200      	movs	r2, #0
 8006466:	601a      	str	r2, [r3, #0]
 8006468:	4b51      	ldr	r3, [pc, #324]	; (80065b0 <LcdWrite16+0x2d8>)
 800646a:	2201      	movs	r2, #1
 800646c:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 6);
 800646e:	1dbb      	adds	r3, r7, #6
 8006470:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8006474:	1dbb      	adds	r3, r7, #6
 8006476:	015b      	lsls	r3, r3, #5
 8006478:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 800647c:	f023 031f 	bic.w	r3, r3, #31
 8006480:	4313      	orrs	r3, r2
 8006482:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8006486:	3318      	adds	r3, #24
 8006488:	4a48      	ldr	r2, [pc, #288]	; (80065ac <LcdWrite16+0x2d4>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 800648e:	4b48      	ldr	r3, [pc, #288]	; (80065b0 <LcdWrite16+0x2d8>)
 8006490:	2200      	movs	r2, #0
 8006492:	601a      	str	r2, [r3, #0]
 8006494:	4b46      	ldr	r3, [pc, #280]	; (80065b0 <LcdWrite16+0x2d8>)
 8006496:	2201      	movs	r2, #1
 8006498:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 5);
 800649a:	1dbb      	adds	r3, r7, #6
 800649c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80064a0:	1dbb      	adds	r3, r7, #6
 80064a2:	015b      	lsls	r3, r3, #5
 80064a4:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80064a8:	f023 031f 	bic.w	r3, r3, #31
 80064ac:	4313      	orrs	r3, r2
 80064ae:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80064b2:	3314      	adds	r3, #20
 80064b4:	4a3d      	ldr	r2, [pc, #244]	; (80065ac <LcdWrite16+0x2d4>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 80064ba:	4b3d      	ldr	r3, [pc, #244]	; (80065b0 <LcdWrite16+0x2d8>)
 80064bc:	2200      	movs	r2, #0
 80064be:	601a      	str	r2, [r3, #0]
 80064c0:	4b3b      	ldr	r3, [pc, #236]	; (80065b0 <LcdWrite16+0x2d8>)
 80064c2:	2201      	movs	r2, #1
 80064c4:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 4);
 80064c6:	1dbb      	adds	r3, r7, #6
 80064c8:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80064cc:	1dbb      	adds	r3, r7, #6
 80064ce:	015b      	lsls	r3, r3, #5
 80064d0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80064d4:	f023 031f 	bic.w	r3, r3, #31
 80064d8:	4313      	orrs	r3, r2
 80064da:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80064de:	3310      	adds	r3, #16
 80064e0:	4a32      	ldr	r2, [pc, #200]	; (80065ac <LcdWrite16+0x2d4>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 80064e6:	4b32      	ldr	r3, [pc, #200]	; (80065b0 <LcdWrite16+0x2d8>)
 80064e8:	2200      	movs	r2, #0
 80064ea:	601a      	str	r2, [r3, #0]
 80064ec:	4b30      	ldr	r3, [pc, #192]	; (80065b0 <LcdWrite16+0x2d8>)
 80064ee:	2201      	movs	r2, #1
 80064f0:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 3);
 80064f2:	1dbb      	adds	r3, r7, #6
 80064f4:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80064f8:	1dbb      	adds	r3, r7, #6
 80064fa:	015b      	lsls	r3, r3, #5
 80064fc:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8006500:	f023 031f 	bic.w	r3, r3, #31
 8006504:	4313      	orrs	r3, r2
 8006506:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800650a:	330c      	adds	r3, #12
 800650c:	4a27      	ldr	r2, [pc, #156]	; (80065ac <LcdWrite16+0x2d4>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8006512:	4b27      	ldr	r3, [pc, #156]	; (80065b0 <LcdWrite16+0x2d8>)
 8006514:	2200      	movs	r2, #0
 8006516:	601a      	str	r2, [r3, #0]
 8006518:	4b25      	ldr	r3, [pc, #148]	; (80065b0 <LcdWrite16+0x2d8>)
 800651a:	2201      	movs	r2, #1
 800651c:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 2);
 800651e:	1dbb      	adds	r3, r7, #6
 8006520:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8006524:	1dbb      	adds	r3, r7, #6
 8006526:	015b      	lsls	r3, r3, #5
 8006528:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 800652c:	f023 031f 	bic.w	r3, r3, #31
 8006530:	4313      	orrs	r3, r2
 8006532:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8006536:	3308      	adds	r3, #8
 8006538:	4a1c      	ldr	r2, [pc, #112]	; (80065ac <LcdWrite16+0x2d4>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 800653e:	4b1c      	ldr	r3, [pc, #112]	; (80065b0 <LcdWrite16+0x2d8>)
 8006540:	2200      	movs	r2, #0
 8006542:	601a      	str	r2, [r3, #0]
 8006544:	4b1a      	ldr	r3, [pc, #104]	; (80065b0 <LcdWrite16+0x2d8>)
 8006546:	2201      	movs	r2, #1
 8006548:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 1);
 800654a:	1dbb      	adds	r3, r7, #6
 800654c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8006550:	1dbb      	adds	r3, r7, #6
 8006552:	015b      	lsls	r3, r3, #5
 8006554:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8006558:	f023 031f 	bic.w	r3, r3, #31
 800655c:	4313      	orrs	r3, r2
 800655e:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8006562:	3304      	adds	r3, #4
 8006564:	4a11      	ldr	r2, [pc, #68]	; (80065ac <LcdWrite16+0x2d4>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 800656a:	4b11      	ldr	r3, [pc, #68]	; (80065b0 <LcdWrite16+0x2d8>)
 800656c:	2200      	movs	r2, #0
 800656e:	601a      	str	r2, [r3, #0]
 8006570:	4b0f      	ldr	r3, [pc, #60]	; (80065b0 <LcdWrite16+0x2d8>)
 8006572:	2201      	movs	r2, #1
 8006574:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 0);
 8006576:	1dbb      	adds	r3, r7, #6
 8006578:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800657c:	1dbb      	adds	r3, r7, #6
 800657e:	015b      	lsls	r3, r3, #5
 8006580:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8006584:	f023 031f 	bic.w	r3, r3, #31
 8006588:	4313      	orrs	r3, r2
 800658a:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800658e:	4a07      	ldr	r2, [pc, #28]	; (80065ac <LcdWrite16+0x2d4>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8006594:	4b06      	ldr	r3, [pc, #24]	; (80065b0 <LcdWrite16+0x2d8>)
 8006596:	2200      	movs	r2, #0
 8006598:	601a      	str	r2, [r3, #0]
 800659a:	4b05      	ldr	r3, [pc, #20]	; (80065b0 <LcdWrite16+0x2d8>)
 800659c:	2201      	movs	r2, #1
 800659e:	601a      	str	r2, [r3, #0]
}
 80065a0:	bf00      	nop
 80065a2:	370c      	adds	r7, #12
 80065a4:	46bd      	mov	sp, r7
 80065a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065aa:	4770      	bx	lr
 80065ac:	4241028c 	.word	0x4241028c
 80065b0:	42408280 	.word	0x42408280

080065b4 <LCD_IO_WriteMultiData8>:
#if DMANUM(LCD_DMA_TX) == 0 || LCD_SPI == 0

/* SPI TX no DMA */

void LCD_IO_WriteMultiData8(uint8_t * pData, uint32_t Size, uint32_t dinc)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b084      	sub	sp, #16
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	60f8      	str	r0, [r7, #12]
 80065bc:	60b9      	str	r1, [r7, #8]
 80065be:	607a      	str	r2, [r7, #4]
  while(Size--)
 80065c0:	e00a      	b.n	80065d8 <LCD_IO_WriteMultiData8+0x24>
  {
    LcdWrite8(*pData);
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	781b      	ldrb	r3, [r3, #0]
 80065c6:	4618      	mov	r0, r3
 80065c8:	f7ff fdc8 	bl	800615c <LcdWrite8>
    if(dinc)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d002      	beq.n	80065d8 <LCD_IO_WriteMultiData8+0x24>
      pData++;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	3301      	adds	r3, #1
 80065d6:	60fb      	str	r3, [r7, #12]
  while(Size--)
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	1e5a      	subs	r2, r3, #1
 80065dc:	60ba      	str	r2, [r7, #8]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d1ef      	bne.n	80065c2 <LCD_IO_WriteMultiData8+0xe>
  }
  LCD_CS_OFF;
 80065e2:	4b03      	ldr	r3, [pc, #12]	; (80065f0 <LCD_IO_WriteMultiData8+0x3c>)
 80065e4:	2201      	movs	r2, #1
 80065e6:	601a      	str	r2, [r3, #0]
}
 80065e8:	bf00      	nop
 80065ea:	3710      	adds	r7, #16
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bd80      	pop	{r7, pc}
 80065f0:	42410284 	.word	0x42410284

080065f4 <LCD_IO_WriteMultiData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteMultiData16(uint16_t * pData, uint32_t Size, uint32_t dinc)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b084      	sub	sp, #16
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	60f8      	str	r0, [r7, #12]
 80065fc:	60b9      	str	r1, [r7, #8]
 80065fe:	607a      	str	r2, [r7, #4]
  while(Size--)
 8006600:	e00a      	b.n	8006618 <LCD_IO_WriteMultiData16+0x24>
  {
    LcdWrite16(*pData);
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	881b      	ldrh	r3, [r3, #0]
 8006606:	4618      	mov	r0, r3
 8006608:	f7ff fe66 	bl	80062d8 <LcdWrite16>
    if(dinc)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d002      	beq.n	8006618 <LCD_IO_WriteMultiData16+0x24>
      pData++;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	3302      	adds	r3, #2
 8006616:	60fb      	str	r3, [r7, #12]
  while(Size--)
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	1e5a      	subs	r2, r3, #1
 800661c:	60ba      	str	r2, [r7, #8]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d1ef      	bne.n	8006602 <LCD_IO_WriteMultiData16+0xe>
  }
  LCD_CS_OFF;
 8006622:	4b03      	ldr	r3, [pc, #12]	; (8006630 <LCD_IO_WriteMultiData16+0x3c>)
 8006624:	2201      	movs	r2, #1
 8006626:	601a      	str	r2, [r3, #0]
}
 8006628:	bf00      	nop
 800662a:	3710      	adds	r7, #16
 800662c:	46bd      	mov	sp, r7
 800662e:	bd80      	pop	{r7, pc}
 8006630:	42410284 	.word	0x42410284

08006634 <LCD_Delay>:

//=============================================================================
/* Public functions */

void LCD_Delay(uint32_t Delay)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b082      	sub	sp, #8
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f000 f9d9 	bl	80069f4 <HAL_Delay>
}
 8006642:	bf00      	nop
 8006644:	3708      	adds	r7, #8
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}

0800664a <LCD_IO_Bl_OnOff>:

//-----------------------------------------------------------------------------
void LCD_IO_Bl_OnOff(uint8_t Bl)
{
 800664a:	b480      	push	{r7}
 800664c:	b083      	sub	sp, #12
 800664e:	af00      	add	r7, sp, #0
 8006650:	4603      	mov	r3, r0
 8006652:	71fb      	strb	r3, [r7, #7]
  if(Bl)
    GPIOX_ODR(LCD_BL) = LCD_BLON;
  else
    GPIOX_ODR(LCD_BL) = 1 - LCD_BLON;
  #endif
}
 8006654:	bf00      	nop
 8006656:	370c      	adds	r7, #12
 8006658:	46bd      	mov	sp, r7
 800665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665e:	4770      	bx	lr

08006660 <LCD_IO_Init>:

//-----------------------------------------------------------------------------
void LCD_IO_Init(void)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	af00      	add	r7, sp, #0
  #define DMA1_CLOCK_RX         0
  #endif
  #endif  // #else LCD_SPI == 0

  /* GPIO, DMA Clocks */
  RCC->AHB1ENR |= GPIOX_CLOCK(LCD_RS) | GPIOX_CLOCK(LCD_CS) | GPIOX_CLOCK(LCD_SCK) | GPIOX_CLOCK(LCD_MOSI) |
 8006664:	4b34      	ldr	r3, [pc, #208]	; (8006738 <LCD_IO_Init+0xd8>)
 8006666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006668:	4a33      	ldr	r2, [pc, #204]	; (8006738 <LCD_IO_Init+0xd8>)
 800666a:	f043 0307 	orr.w	r3, r3, #7
 800666e:	6313      	str	r3, [r2, #48]	; 0x30
  LCD_IO_Bl_OnOff(1);
  #endif

  /* Reset pin = output, reset off */
  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A
  GPIOX_MODER(MODE_OUT, LCD_RST);
 8006670:	4b32      	ldr	r3, [pc, #200]	; (800673c <LCD_IO_Init+0xdc>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006678:	4a30      	ldr	r2, [pc, #192]	; (800673c <LCD_IO_Init+0xdc>)
 800667a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800667e:	6013      	str	r3, [r2, #0]
  GPIOX_OSPEEDR(MODE_SPD_LOW, LCD_RST);
 8006680:	4b2e      	ldr	r3, [pc, #184]	; (800673c <LCD_IO_Init+0xdc>)
 8006682:	689b      	ldr	r3, [r3, #8]
 8006684:	4a2d      	ldr	r2, [pc, #180]	; (800673c <LCD_IO_Init+0xdc>)
 8006686:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800668a:	6093      	str	r3, [r2, #8]
  LCD_RST_OFF;
 800668c:	4b2c      	ldr	r3, [pc, #176]	; (8006740 <LCD_IO_Init+0xe0>)
 800668e:	2201      	movs	r2, #1
 8006690:	601a      	str	r2, [r3, #0]
  #endif

  LCD_RS_DATA;
 8006692:	4b2c      	ldr	r3, [pc, #176]	; (8006744 <LCD_IO_Init+0xe4>)
 8006694:	2201      	movs	r2, #1
 8006696:	601a      	str	r2, [r3, #0]
  LCD_CS_OFF;
 8006698:	4b2b      	ldr	r3, [pc, #172]	; (8006748 <LCD_IO_Init+0xe8>)
 800669a:	2201      	movs	r2, #1
 800669c:	601a      	str	r2, [r3, #0]
  GPIOX_MODER(MODE_OUT, LCD_RS);
 800669e:	4b2b      	ldr	r3, [pc, #172]	; (800674c <LCD_IO_Init+0xec>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f023 0303 	bic.w	r3, r3, #3
 80066a6:	4a29      	ldr	r2, [pc, #164]	; (800674c <LCD_IO_Init+0xec>)
 80066a8:	f043 0301 	orr.w	r3, r3, #1
 80066ac:	6013      	str	r3, [r2, #0]
  GPIOX_MODER(MODE_OUT, LCD_CS);
 80066ae:	4b27      	ldr	r3, [pc, #156]	; (800674c <LCD_IO_Init+0xec>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f023 030c 	bic.w	r3, r3, #12
 80066b6:	4a25      	ldr	r2, [pc, #148]	; (800674c <LCD_IO_Init+0xec>)
 80066b8:	f043 0304 	orr.w	r3, r3, #4
 80066bc:	6013      	str	r3, [r2, #0]

  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_RS);
 80066be:	4b23      	ldr	r3, [pc, #140]	; (800674c <LCD_IO_Init+0xec>)
 80066c0:	689b      	ldr	r3, [r3, #8]
 80066c2:	4a22      	ldr	r2, [pc, #136]	; (800674c <LCD_IO_Init+0xec>)
 80066c4:	f043 0303 	orr.w	r3, r3, #3
 80066c8:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_CS);
 80066ca:	4b20      	ldr	r3, [pc, #128]	; (800674c <LCD_IO_Init+0xec>)
 80066cc:	689b      	ldr	r3, [r3, #8]
 80066ce:	4a1f      	ldr	r2, [pc, #124]	; (800674c <LCD_IO_Init+0xec>)
 80066d0:	f043 030c 	orr.w	r3, r3, #12
 80066d4:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_SCK);
 80066d6:	4b1e      	ldr	r3, [pc, #120]	; (8006750 <LCD_IO_Init+0xf0>)
 80066d8:	689b      	ldr	r3, [r3, #8]
 80066da:	4a1d      	ldr	r2, [pc, #116]	; (8006750 <LCD_IO_Init+0xf0>)
 80066dc:	f043 0303 	orr.w	r3, r3, #3
 80066e0:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_MOSI);
 80066e2:	4b1a      	ldr	r3, [pc, #104]	; (800674c <LCD_IO_Init+0xec>)
 80066e4:	689b      	ldr	r3, [r3, #8]
 80066e6:	4a19      	ldr	r2, [pc, #100]	; (800674c <LCD_IO_Init+0xec>)
 80066e8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80066ec:	6093      	str	r3, [r2, #8]
  GPIOX_ODR(LCD_SCK) = 1;               // SCK = 1
 80066ee:	4b19      	ldr	r3, [pc, #100]	; (8006754 <LCD_IO_Init+0xf4>)
 80066f0:	2201      	movs	r2, #1
 80066f2:	601a      	str	r2, [r3, #0]

  #if LCD_SPI == 0
  /* Software SPI */
  GPIOX_MODER(MODE_OUT, LCD_SCK);
 80066f4:	4b16      	ldr	r3, [pc, #88]	; (8006750 <LCD_IO_Init+0xf0>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f023 0303 	bic.w	r3, r3, #3
 80066fc:	4a14      	ldr	r2, [pc, #80]	; (8006750 <LCD_IO_Init+0xf0>)
 80066fe:	f043 0301 	orr.w	r3, r3, #1
 8006702:	6013      	str	r3, [r2, #0]
  GPIOX_MODER(MODE_OUT, LCD_MOSI);
 8006704:	4b11      	ldr	r3, [pc, #68]	; (800674c <LCD_IO_Init+0xec>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800670c:	4a0f      	ldr	r2, [pc, #60]	; (800674c <LCD_IO_Init+0xec>)
 800670e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006712:	6013      	str	r3, [r2, #0]

  #endif // #else LCD_SPI == 0

  /* Set or Reset the control line */
  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A // reset
  LCD_Delay(10);
 8006714:	200a      	movs	r0, #10
 8006716:	f7ff ff8d 	bl	8006634 <LCD_Delay>
  LCD_RST_ON;
 800671a:	4b09      	ldr	r3, [pc, #36]	; (8006740 <LCD_IO_Init+0xe0>)
 800671c:	2200      	movs	r2, #0
 800671e:	601a      	str	r2, [r3, #0]
  LCD_Delay(10);
 8006720:	200a      	movs	r0, #10
 8006722:	f7ff ff87 	bl	8006634 <LCD_Delay>
  LCD_RST_OFF;
 8006726:	4b06      	ldr	r3, [pc, #24]	; (8006740 <LCD_IO_Init+0xe0>)
 8006728:	2201      	movs	r2, #1
 800672a:	601a      	str	r2, [r3, #0]
  #endif
  LCD_Delay(10);
 800672c:	200a      	movs	r0, #10
 800672e:	f7ff ff81 	bl	8006634 <LCD_Delay>
  osSemaphoreDef(spiDmaBinSem);
  spiDmaBinSemHandle = osSemaphoreCreate(osSemaphore(spiDmaBinSem), 1);
  osSemaphoreWait(spiDmaBinSemHandle, 1);
  #endif
  #endif  // #if DMANUM(LCD_DMA_RX) > 0
} // void LCD_IO_Init(void)
 8006732:	bf00      	nop
 8006734:	bd80      	pop	{r7, pc}
 8006736:	bf00      	nop
 8006738:	40023800 	.word	0x40023800
 800673c:	40020000 	.word	0x40020000
 8006740:	42400290 	.word	0x42400290
 8006744:	42410280 	.word	0x42410280
 8006748:	42410284 	.word	0x42410284
 800674c:	40020800 	.word	0x40020800
 8006750:	40020400 	.word	0x40020400
 8006754:	42408280 	.word	0x42408280

08006758 <LCD_IO_WriteCmd8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8(uint8_t Cmd)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b082      	sub	sp, #8
 800675c:	af00      	add	r7, sp, #0
 800675e:	4603      	mov	r3, r0
 8006760:	71fb      	strb	r3, [r7, #7]
  WaitForDmaEnd();
  LcdSpiMode8();
  LCD_CS_ON;
 8006762:	4b0a      	ldr	r3, [pc, #40]	; (800678c <LCD_IO_WriteCmd8+0x34>)
 8006764:	2200      	movs	r2, #0
 8006766:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 8006768:	4b09      	ldr	r3, [pc, #36]	; (8006790 <LCD_IO_WriteCmd8+0x38>)
 800676a:	2200      	movs	r2, #0
 800676c:	601a      	str	r2, [r3, #0]
 800676e:	79fb      	ldrb	r3, [r7, #7]
 8006770:	4618      	mov	r0, r3
 8006772:	f7ff fcf3 	bl	800615c <LcdWrite8>
 8006776:	4b06      	ldr	r3, [pc, #24]	; (8006790 <LCD_IO_WriteCmd8+0x38>)
 8006778:	2201      	movs	r2, #1
 800677a:	601a      	str	r2, [r3, #0]
  LCD_CS_OFF;
 800677c:	4b03      	ldr	r3, [pc, #12]	; (800678c <LCD_IO_WriteCmd8+0x34>)
 800677e:	2201      	movs	r2, #1
 8006780:	601a      	str	r2, [r3, #0]
}
 8006782:	bf00      	nop
 8006784:	3708      	adds	r7, #8
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}
 800678a:	bf00      	nop
 800678c:	42410284 	.word	0x42410284
 8006790:	42410280 	.word	0x42410280

08006794 <LCD_IO_WriteData8>:
  LCD_CS_OFF;
}

//-----------------------------------------------------------------------------
void LCD_IO_WriteData8(uint8_t Data)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b082      	sub	sp, #8
 8006798:	af00      	add	r7, sp, #0
 800679a:	4603      	mov	r3, r0
 800679c:	71fb      	strb	r3, [r7, #7]
  WaitForDmaEnd();
  LcdSpiMode8();
  LCD_CS_ON;
 800679e:	4b07      	ldr	r3, [pc, #28]	; (80067bc <LCD_IO_WriteData8+0x28>)
 80067a0:	2200      	movs	r2, #0
 80067a2:	601a      	str	r2, [r3, #0]
  LcdWrite8(Data);
 80067a4:	79fb      	ldrb	r3, [r7, #7]
 80067a6:	4618      	mov	r0, r3
 80067a8:	f7ff fcd8 	bl	800615c <LcdWrite8>
  LCD_CS_OFF;
 80067ac:	4b03      	ldr	r3, [pc, #12]	; (80067bc <LCD_IO_WriteData8+0x28>)
 80067ae:	2201      	movs	r2, #1
 80067b0:	601a      	str	r2, [r3, #0]
}
 80067b2:	bf00      	nop
 80067b4:	3708      	adds	r7, #8
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}
 80067ba:	bf00      	nop
 80067bc:	42410284 	.word	0x42410284

080067c0 <LCD_IO_WriteData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteData16(uint16_t Data)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b082      	sub	sp, #8
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	4603      	mov	r3, r0
 80067c8:	80fb      	strh	r3, [r7, #6]
  WaitForDmaEnd();
  LcdSpiMode16();
  LCD_CS_ON;
 80067ca:	4b07      	ldr	r3, [pc, #28]	; (80067e8 <LCD_IO_WriteData16+0x28>)
 80067cc:	2200      	movs	r2, #0
 80067ce:	601a      	str	r2, [r3, #0]
  LcdWrite16(Data);
 80067d0:	88fb      	ldrh	r3, [r7, #6]
 80067d2:	4618      	mov	r0, r3
 80067d4:	f7ff fd80 	bl	80062d8 <LcdWrite16>
  LCD_CS_OFF;
 80067d8:	4b03      	ldr	r3, [pc, #12]	; (80067e8 <LCD_IO_WriteData16+0x28>)
 80067da:	2201      	movs	r2, #1
 80067dc:	601a      	str	r2, [r3, #0]
}
 80067de:	bf00      	nop
 80067e0:	3708      	adds	r7, #8
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}
 80067e6:	bf00      	nop
 80067e8:	42410284 	.word	0x42410284

080067ec <LCD_IO_WriteCmd8DataFill16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8DataFill16(uint8_t Cmd, uint16_t Data, uint32_t Size)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b082      	sub	sp, #8
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	4603      	mov	r3, r0
 80067f4:	603a      	str	r2, [r7, #0]
 80067f6:	71fb      	strb	r3, [r7, #7]
 80067f8:	460b      	mov	r3, r1
 80067fa:	80bb      	strh	r3, [r7, #4]
  WaitForDmaEnd();
  LcdSpiMode8();
  LCD_CS_ON;
 80067fc:	4b0b      	ldr	r3, [pc, #44]	; (800682c <LCD_IO_WriteCmd8DataFill16+0x40>)
 80067fe:	2200      	movs	r2, #0
 8006800:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 8006802:	4b0b      	ldr	r3, [pc, #44]	; (8006830 <LCD_IO_WriteCmd8DataFill16+0x44>)
 8006804:	2200      	movs	r2, #0
 8006806:	601a      	str	r2, [r3, #0]
 8006808:	79fb      	ldrb	r3, [r7, #7]
 800680a:	4618      	mov	r0, r3
 800680c:	f7ff fca6 	bl	800615c <LcdWrite8>
 8006810:	4b07      	ldr	r3, [pc, #28]	; (8006830 <LCD_IO_WriteCmd8DataFill16+0x44>)
 8006812:	2201      	movs	r2, #1
 8006814:	601a      	str	r2, [r3, #0]
  LcdSpiMode16();
  LCD_IO_WriteMultiData16(&Data, Size, 0);
 8006816:	1d3b      	adds	r3, r7, #4
 8006818:	2200      	movs	r2, #0
 800681a:	6839      	ldr	r1, [r7, #0]
 800681c:	4618      	mov	r0, r3
 800681e:	f7ff fee9 	bl	80065f4 <LCD_IO_WriteMultiData16>
}
 8006822:	bf00      	nop
 8006824:	3708      	adds	r7, #8
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}
 800682a:	bf00      	nop
 800682c:	42410284 	.word	0x42410284
 8006830:	42410280 	.word	0x42410280

08006834 <LCD_IO_WriteCmd8MultipleData8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8MultipleData8(uint8_t Cmd, uint8_t *pData, uint32_t Size)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b084      	sub	sp, #16
 8006838:	af00      	add	r7, sp, #0
 800683a:	4603      	mov	r3, r0
 800683c:	60b9      	str	r1, [r7, #8]
 800683e:	607a      	str	r2, [r7, #4]
 8006840:	73fb      	strb	r3, [r7, #15]
  WaitForDmaEnd();
  LcdSpiMode8();
  LCD_CS_ON;
 8006842:	4b0b      	ldr	r3, [pc, #44]	; (8006870 <LCD_IO_WriteCmd8MultipleData8+0x3c>)
 8006844:	2200      	movs	r2, #0
 8006846:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 8006848:	4b0a      	ldr	r3, [pc, #40]	; (8006874 <LCD_IO_WriteCmd8MultipleData8+0x40>)
 800684a:	2200      	movs	r2, #0
 800684c:	601a      	str	r2, [r3, #0]
 800684e:	7bfb      	ldrb	r3, [r7, #15]
 8006850:	4618      	mov	r0, r3
 8006852:	f7ff fc83 	bl	800615c <LcdWrite8>
 8006856:	4b07      	ldr	r3, [pc, #28]	; (8006874 <LCD_IO_WriteCmd8MultipleData8+0x40>)
 8006858:	2201      	movs	r2, #1
 800685a:	601a      	str	r2, [r3, #0]
  LCD_IO_WriteMultiData8(pData, Size, 1);
 800685c:	2201      	movs	r2, #1
 800685e:	6879      	ldr	r1, [r7, #4]
 8006860:	68b8      	ldr	r0, [r7, #8]
 8006862:	f7ff fea7 	bl	80065b4 <LCD_IO_WriteMultiData8>
}
 8006866:	bf00      	nop
 8006868:	3710      	adds	r7, #16
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}
 800686e:	bf00      	nop
 8006870:	42410284 	.word	0x42410284
 8006874:	42410280 	.word	0x42410280

08006878 <LCD_IO_WriteCmd8MultipleData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8MultipleData16(uint8_t Cmd, uint16_t *pData, uint32_t Size)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b084      	sub	sp, #16
 800687c:	af00      	add	r7, sp, #0
 800687e:	4603      	mov	r3, r0
 8006880:	60b9      	str	r1, [r7, #8]
 8006882:	607a      	str	r2, [r7, #4]
 8006884:	73fb      	strb	r3, [r7, #15]
  WaitForDmaEnd();
  LcdSpiMode8();
  LCD_CS_ON;
 8006886:	4b0b      	ldr	r3, [pc, #44]	; (80068b4 <LCD_IO_WriteCmd8MultipleData16+0x3c>)
 8006888:	2200      	movs	r2, #0
 800688a:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 800688c:	4b0a      	ldr	r3, [pc, #40]	; (80068b8 <LCD_IO_WriteCmd8MultipleData16+0x40>)
 800688e:	2200      	movs	r2, #0
 8006890:	601a      	str	r2, [r3, #0]
 8006892:	7bfb      	ldrb	r3, [r7, #15]
 8006894:	4618      	mov	r0, r3
 8006896:	f7ff fc61 	bl	800615c <LcdWrite8>
 800689a:	4b07      	ldr	r3, [pc, #28]	; (80068b8 <LCD_IO_WriteCmd8MultipleData16+0x40>)
 800689c:	2201      	movs	r2, #1
 800689e:	601a      	str	r2, [r3, #0]
  LcdSpiMode16();
  LCD_IO_WriteMultiData16(pData, Size, 1);
 80068a0:	2201      	movs	r2, #1
 80068a2:	6879      	ldr	r1, [r7, #4]
 80068a4:	68b8      	ldr	r0, [r7, #8]
 80068a6:	f7ff fea5 	bl	80065f4 <LCD_IO_WriteMultiData16>
}
 80068aa:	bf00      	nop
 80068ac:	3710      	adds	r7, #16
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}
 80068b2:	bf00      	nop
 80068b4:	42410284 	.word	0x42410284
 80068b8:	42410280 	.word	0x42410280

080068bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80068bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80068f4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80068c0:	480d      	ldr	r0, [pc, #52]	; (80068f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80068c2:	490e      	ldr	r1, [pc, #56]	; (80068fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80068c4:	4a0e      	ldr	r2, [pc, #56]	; (8006900 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80068c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80068c8:	e002      	b.n	80068d0 <LoopCopyDataInit>

080068ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80068ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80068cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80068ce:	3304      	adds	r3, #4

080068d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80068d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80068d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80068d4:	d3f9      	bcc.n	80068ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80068d6:	4a0b      	ldr	r2, [pc, #44]	; (8006904 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80068d8:	4c0b      	ldr	r4, [pc, #44]	; (8006908 <LoopFillZerobss+0x26>)
  movs r3, #0
 80068da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80068dc:	e001      	b.n	80068e2 <LoopFillZerobss>

080068de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80068de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80068e0:	3204      	adds	r2, #4

080068e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80068e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80068e4:	d3fb      	bcc.n	80068de <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80068e6:	f7fe ff9b 	bl	8005820 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80068ea:	f006 faf1 	bl	800ced0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80068ee:	f7fb f8cd 	bl	8001a8c <main>
  bx  lr    
 80068f2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80068f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80068f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80068fc:	20000420 	.word	0x20000420
  ldr r2, =_sidata
 8006900:	0803d534 	.word	0x0803d534
  ldr r2, =_sbss
 8006904:	20000420 	.word	0x20000420
  ldr r4, =_ebss
 8006908:	200008d4 	.word	0x200008d4

0800690c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800690c:	e7fe      	b.n	800690c <ADC_IRQHandler>
	...

08006910 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006914:	4b0e      	ldr	r3, [pc, #56]	; (8006950 <HAL_Init+0x40>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a0d      	ldr	r2, [pc, #52]	; (8006950 <HAL_Init+0x40>)
 800691a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800691e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006920:	4b0b      	ldr	r3, [pc, #44]	; (8006950 <HAL_Init+0x40>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a0a      	ldr	r2, [pc, #40]	; (8006950 <HAL_Init+0x40>)
 8006926:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800692a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800692c:	4b08      	ldr	r3, [pc, #32]	; (8006950 <HAL_Init+0x40>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a07      	ldr	r2, [pc, #28]	; (8006950 <HAL_Init+0x40>)
 8006932:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006936:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006938:	2003      	movs	r0, #3
 800693a:	f000 f94f 	bl	8006bdc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800693e:	2000      	movs	r0, #0
 8006940:	f000 f808 	bl	8006954 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006944:	f7fe fbf2 	bl	800512c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006948:	2300      	movs	r3, #0
}
 800694a:	4618      	mov	r0, r3
 800694c:	bd80      	pop	{r7, pc}
 800694e:	bf00      	nop
 8006950:	40023c00 	.word	0x40023c00

08006954 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b082      	sub	sp, #8
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800695c:	4b12      	ldr	r3, [pc, #72]	; (80069a8 <HAL_InitTick+0x54>)
 800695e:	681a      	ldr	r2, [r3, #0]
 8006960:	4b12      	ldr	r3, [pc, #72]	; (80069ac <HAL_InitTick+0x58>)
 8006962:	781b      	ldrb	r3, [r3, #0]
 8006964:	4619      	mov	r1, r3
 8006966:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800696a:	fbb3 f3f1 	udiv	r3, r3, r1
 800696e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006972:	4618      	mov	r0, r3
 8006974:	f000 f967 	bl	8006c46 <HAL_SYSTICK_Config>
 8006978:	4603      	mov	r3, r0
 800697a:	2b00      	cmp	r3, #0
 800697c:	d001      	beq.n	8006982 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800697e:	2301      	movs	r3, #1
 8006980:	e00e      	b.n	80069a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2b0f      	cmp	r3, #15
 8006986:	d80a      	bhi.n	800699e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006988:	2200      	movs	r2, #0
 800698a:	6879      	ldr	r1, [r7, #4]
 800698c:	f04f 30ff 	mov.w	r0, #4294967295
 8006990:	f000 f92f 	bl	8006bf2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006994:	4a06      	ldr	r2, [pc, #24]	; (80069b0 <HAL_InitTick+0x5c>)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800699a:	2300      	movs	r3, #0
 800699c:	e000      	b.n	80069a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800699e:	2301      	movs	r3, #1
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	3708      	adds	r7, #8
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}
 80069a8:	20000224 	.word	0x20000224
 80069ac:	2000024c 	.word	0x2000024c
 80069b0:	20000248 	.word	0x20000248

080069b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80069b4:	b480      	push	{r7}
 80069b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80069b8:	4b06      	ldr	r3, [pc, #24]	; (80069d4 <HAL_IncTick+0x20>)
 80069ba:	781b      	ldrb	r3, [r3, #0]
 80069bc:	461a      	mov	r2, r3
 80069be:	4b06      	ldr	r3, [pc, #24]	; (80069d8 <HAL_IncTick+0x24>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4413      	add	r3, r2
 80069c4:	4a04      	ldr	r2, [pc, #16]	; (80069d8 <HAL_IncTick+0x24>)
 80069c6:	6013      	str	r3, [r2, #0]
}
 80069c8:	bf00      	nop
 80069ca:	46bd      	mov	sp, r7
 80069cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d0:	4770      	bx	lr
 80069d2:	bf00      	nop
 80069d4:	2000024c 	.word	0x2000024c
 80069d8:	200008c0 	.word	0x200008c0

080069dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80069dc:	b480      	push	{r7}
 80069de:	af00      	add	r7, sp, #0
  return uwTick;
 80069e0:	4b03      	ldr	r3, [pc, #12]	; (80069f0 <HAL_GetTick+0x14>)
 80069e2:	681b      	ldr	r3, [r3, #0]
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	46bd      	mov	sp, r7
 80069e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ec:	4770      	bx	lr
 80069ee:	bf00      	nop
 80069f0:	200008c0 	.word	0x200008c0

080069f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b084      	sub	sp, #16
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80069fc:	f7ff ffee 	bl	80069dc <HAL_GetTick>
 8006a00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a0c:	d005      	beq.n	8006a1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006a0e:	4b0a      	ldr	r3, [pc, #40]	; (8006a38 <HAL_Delay+0x44>)
 8006a10:	781b      	ldrb	r3, [r3, #0]
 8006a12:	461a      	mov	r2, r3
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	4413      	add	r3, r2
 8006a18:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006a1a:	bf00      	nop
 8006a1c:	f7ff ffde 	bl	80069dc <HAL_GetTick>
 8006a20:	4602      	mov	r2, r0
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	1ad3      	subs	r3, r2, r3
 8006a26:	68fa      	ldr	r2, [r7, #12]
 8006a28:	429a      	cmp	r2, r3
 8006a2a:	d8f7      	bhi.n	8006a1c <HAL_Delay+0x28>
  {
  }
}
 8006a2c:	bf00      	nop
 8006a2e:	bf00      	nop
 8006a30:	3710      	adds	r7, #16
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}
 8006a36:	bf00      	nop
 8006a38:	2000024c 	.word	0x2000024c

08006a3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b085      	sub	sp, #20
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f003 0307 	and.w	r3, r3, #7
 8006a4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006a4c:	4b0c      	ldr	r3, [pc, #48]	; (8006a80 <__NVIC_SetPriorityGrouping+0x44>)
 8006a4e:	68db      	ldr	r3, [r3, #12]
 8006a50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006a52:	68ba      	ldr	r2, [r7, #8]
 8006a54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006a58:	4013      	ands	r3, r2
 8006a5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006a64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006a68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006a6e:	4a04      	ldr	r2, [pc, #16]	; (8006a80 <__NVIC_SetPriorityGrouping+0x44>)
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	60d3      	str	r3, [r2, #12]
}
 8006a74:	bf00      	nop
 8006a76:	3714      	adds	r7, #20
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7e:	4770      	bx	lr
 8006a80:	e000ed00 	.word	0xe000ed00

08006a84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006a84:	b480      	push	{r7}
 8006a86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006a88:	4b04      	ldr	r3, [pc, #16]	; (8006a9c <__NVIC_GetPriorityGrouping+0x18>)
 8006a8a:	68db      	ldr	r3, [r3, #12]
 8006a8c:	0a1b      	lsrs	r3, r3, #8
 8006a8e:	f003 0307 	and.w	r3, r3, #7
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	46bd      	mov	sp, r7
 8006a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9a:	4770      	bx	lr
 8006a9c:	e000ed00 	.word	0xe000ed00

08006aa0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b083      	sub	sp, #12
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	db0b      	blt.n	8006aca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006ab2:	79fb      	ldrb	r3, [r7, #7]
 8006ab4:	f003 021f 	and.w	r2, r3, #31
 8006ab8:	4907      	ldr	r1, [pc, #28]	; (8006ad8 <__NVIC_EnableIRQ+0x38>)
 8006aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006abe:	095b      	lsrs	r3, r3, #5
 8006ac0:	2001      	movs	r0, #1
 8006ac2:	fa00 f202 	lsl.w	r2, r0, r2
 8006ac6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006aca:	bf00      	nop
 8006acc:	370c      	adds	r7, #12
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad4:	4770      	bx	lr
 8006ad6:	bf00      	nop
 8006ad8:	e000e100 	.word	0xe000e100

08006adc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b083      	sub	sp, #12
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	6039      	str	r1, [r7, #0]
 8006ae6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006ae8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	db0a      	blt.n	8006b06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	b2da      	uxtb	r2, r3
 8006af4:	490c      	ldr	r1, [pc, #48]	; (8006b28 <__NVIC_SetPriority+0x4c>)
 8006af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006afa:	0112      	lsls	r2, r2, #4
 8006afc:	b2d2      	uxtb	r2, r2
 8006afe:	440b      	add	r3, r1
 8006b00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006b04:	e00a      	b.n	8006b1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	b2da      	uxtb	r2, r3
 8006b0a:	4908      	ldr	r1, [pc, #32]	; (8006b2c <__NVIC_SetPriority+0x50>)
 8006b0c:	79fb      	ldrb	r3, [r7, #7]
 8006b0e:	f003 030f 	and.w	r3, r3, #15
 8006b12:	3b04      	subs	r3, #4
 8006b14:	0112      	lsls	r2, r2, #4
 8006b16:	b2d2      	uxtb	r2, r2
 8006b18:	440b      	add	r3, r1
 8006b1a:	761a      	strb	r2, [r3, #24]
}
 8006b1c:	bf00      	nop
 8006b1e:	370c      	adds	r7, #12
 8006b20:	46bd      	mov	sp, r7
 8006b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b26:	4770      	bx	lr
 8006b28:	e000e100 	.word	0xe000e100
 8006b2c:	e000ed00 	.word	0xe000ed00

08006b30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b089      	sub	sp, #36	; 0x24
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	60f8      	str	r0, [r7, #12]
 8006b38:	60b9      	str	r1, [r7, #8]
 8006b3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f003 0307 	and.w	r3, r3, #7
 8006b42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006b44:	69fb      	ldr	r3, [r7, #28]
 8006b46:	f1c3 0307 	rsb	r3, r3, #7
 8006b4a:	2b04      	cmp	r3, #4
 8006b4c:	bf28      	it	cs
 8006b4e:	2304      	movcs	r3, #4
 8006b50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006b52:	69fb      	ldr	r3, [r7, #28]
 8006b54:	3304      	adds	r3, #4
 8006b56:	2b06      	cmp	r3, #6
 8006b58:	d902      	bls.n	8006b60 <NVIC_EncodePriority+0x30>
 8006b5a:	69fb      	ldr	r3, [r7, #28]
 8006b5c:	3b03      	subs	r3, #3
 8006b5e:	e000      	b.n	8006b62 <NVIC_EncodePriority+0x32>
 8006b60:	2300      	movs	r3, #0
 8006b62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006b64:	f04f 32ff 	mov.w	r2, #4294967295
 8006b68:	69bb      	ldr	r3, [r7, #24]
 8006b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8006b6e:	43da      	mvns	r2, r3
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	401a      	ands	r2, r3
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006b78:	f04f 31ff 	mov.w	r1, #4294967295
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8006b82:	43d9      	mvns	r1, r3
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006b88:	4313      	orrs	r3, r2
         );
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	3724      	adds	r7, #36	; 0x24
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b94:	4770      	bx	lr
	...

08006b98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b082      	sub	sp, #8
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	3b01      	subs	r3, #1
 8006ba4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006ba8:	d301      	bcc.n	8006bae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006baa:	2301      	movs	r3, #1
 8006bac:	e00f      	b.n	8006bce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006bae:	4a0a      	ldr	r2, [pc, #40]	; (8006bd8 <SysTick_Config+0x40>)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	3b01      	subs	r3, #1
 8006bb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006bb6:	210f      	movs	r1, #15
 8006bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8006bbc:	f7ff ff8e 	bl	8006adc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006bc0:	4b05      	ldr	r3, [pc, #20]	; (8006bd8 <SysTick_Config+0x40>)
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006bc6:	4b04      	ldr	r3, [pc, #16]	; (8006bd8 <SysTick_Config+0x40>)
 8006bc8:	2207      	movs	r2, #7
 8006bca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006bcc:	2300      	movs	r3, #0
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3708      	adds	r7, #8
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}
 8006bd6:	bf00      	nop
 8006bd8:	e000e010 	.word	0xe000e010

08006bdc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b082      	sub	sp, #8
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f7ff ff29 	bl	8006a3c <__NVIC_SetPriorityGrouping>
}
 8006bea:	bf00      	nop
 8006bec:	3708      	adds	r7, #8
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}

08006bf2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006bf2:	b580      	push	{r7, lr}
 8006bf4:	b086      	sub	sp, #24
 8006bf6:	af00      	add	r7, sp, #0
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	60b9      	str	r1, [r7, #8]
 8006bfc:	607a      	str	r2, [r7, #4]
 8006bfe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006c00:	2300      	movs	r3, #0
 8006c02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006c04:	f7ff ff3e 	bl	8006a84 <__NVIC_GetPriorityGrouping>
 8006c08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006c0a:	687a      	ldr	r2, [r7, #4]
 8006c0c:	68b9      	ldr	r1, [r7, #8]
 8006c0e:	6978      	ldr	r0, [r7, #20]
 8006c10:	f7ff ff8e 	bl	8006b30 <NVIC_EncodePriority>
 8006c14:	4602      	mov	r2, r0
 8006c16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c1a:	4611      	mov	r1, r2
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	f7ff ff5d 	bl	8006adc <__NVIC_SetPriority>
}
 8006c22:	bf00      	nop
 8006c24:	3718      	adds	r7, #24
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}

08006c2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006c2a:	b580      	push	{r7, lr}
 8006c2c:	b082      	sub	sp, #8
 8006c2e:	af00      	add	r7, sp, #0
 8006c30:	4603      	mov	r3, r0
 8006c32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006c34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c38:	4618      	mov	r0, r3
 8006c3a:	f7ff ff31 	bl	8006aa0 <__NVIC_EnableIRQ>
}
 8006c3e:	bf00      	nop
 8006c40:	3708      	adds	r7, #8
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}

08006c46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006c46:	b580      	push	{r7, lr}
 8006c48:	b082      	sub	sp, #8
 8006c4a:	af00      	add	r7, sp, #0
 8006c4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f7ff ffa2 	bl	8006b98 <SysTick_Config>
 8006c54:	4603      	mov	r3, r0
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	3708      	adds	r7, #8
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}
	...

08006c60 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b086      	sub	sp, #24
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006c68:	2300      	movs	r3, #0
 8006c6a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006c6c:	f7ff feb6 	bl	80069dc <HAL_GetTick>
 8006c70:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d101      	bne.n	8006c7c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006c78:	2301      	movs	r3, #1
 8006c7a:	e099      	b.n	8006db0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2202      	movs	r2, #2
 8006c80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2200      	movs	r2, #0
 8006c88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	681a      	ldr	r2, [r3, #0]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f022 0201 	bic.w	r2, r2, #1
 8006c9a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006c9c:	e00f      	b.n	8006cbe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006c9e:	f7ff fe9d 	bl	80069dc <HAL_GetTick>
 8006ca2:	4602      	mov	r2, r0
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	1ad3      	subs	r3, r2, r3
 8006ca8:	2b05      	cmp	r3, #5
 8006caa:	d908      	bls.n	8006cbe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2220      	movs	r2, #32
 8006cb0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2203      	movs	r2, #3
 8006cb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006cba:	2303      	movs	r3, #3
 8006cbc:	e078      	b.n	8006db0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f003 0301 	and.w	r3, r3, #1
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d1e8      	bne.n	8006c9e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006cd4:	697a      	ldr	r2, [r7, #20]
 8006cd6:	4b38      	ldr	r3, [pc, #224]	; (8006db8 <HAL_DMA_Init+0x158>)
 8006cd8:	4013      	ands	r3, r2
 8006cda:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	685a      	ldr	r2, [r3, #4]
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	689b      	ldr	r3, [r3, #8]
 8006ce4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006cea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	691b      	ldr	r3, [r3, #16]
 8006cf0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006cf6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	699b      	ldr	r3, [r3, #24]
 8006cfc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006d02:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6a1b      	ldr	r3, [r3, #32]
 8006d08:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006d0a:	697a      	ldr	r2, [r7, #20]
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d14:	2b04      	cmp	r3, #4
 8006d16:	d107      	bne.n	8006d28 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d20:	4313      	orrs	r3, r2
 8006d22:	697a      	ldr	r2, [r7, #20]
 8006d24:	4313      	orrs	r3, r2
 8006d26:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	697a      	ldr	r2, [r7, #20]
 8006d2e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	695b      	ldr	r3, [r3, #20]
 8006d36:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	f023 0307 	bic.w	r3, r3, #7
 8006d3e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d44:	697a      	ldr	r2, [r7, #20]
 8006d46:	4313      	orrs	r3, r2
 8006d48:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d4e:	2b04      	cmp	r3, #4
 8006d50:	d117      	bne.n	8006d82 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d56:	697a      	ldr	r2, [r7, #20]
 8006d58:	4313      	orrs	r3, r2
 8006d5a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d00e      	beq.n	8006d82 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f000 fb0f 	bl	8007388 <DMA_CheckFifoParam>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d008      	beq.n	8006d82 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2240      	movs	r2, #64	; 0x40
 8006d74:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2201      	movs	r2, #1
 8006d7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006d7e:	2301      	movs	r3, #1
 8006d80:	e016      	b.n	8006db0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	697a      	ldr	r2, [r7, #20]
 8006d88:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f000 fac6 	bl	800731c <DMA_CalcBaseAndBitshift>
 8006d90:	4603      	mov	r3, r0
 8006d92:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d98:	223f      	movs	r2, #63	; 0x3f
 8006d9a:	409a      	lsls	r2, r3
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2200      	movs	r2, #0
 8006da4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2201      	movs	r2, #1
 8006daa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006dae:	2300      	movs	r3, #0
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	3718      	adds	r7, #24
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}
 8006db8:	f010803f 	.word	0xf010803f

08006dbc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b086      	sub	sp, #24
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	60f8      	str	r0, [r7, #12]
 8006dc4:	60b9      	str	r1, [r7, #8]
 8006dc6:	607a      	str	r2, [r7, #4]
 8006dc8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dd2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006dda:	2b01      	cmp	r3, #1
 8006ddc:	d101      	bne.n	8006de2 <HAL_DMA_Start_IT+0x26>
 8006dde:	2302      	movs	r3, #2
 8006de0:	e040      	b.n	8006e64 <HAL_DMA_Start_IT+0xa8>
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	2201      	movs	r2, #1
 8006de6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006df0:	b2db      	uxtb	r3, r3
 8006df2:	2b01      	cmp	r3, #1
 8006df4:	d12f      	bne.n	8006e56 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	2202      	movs	r2, #2
 8006dfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	2200      	movs	r2, #0
 8006e02:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	687a      	ldr	r2, [r7, #4]
 8006e08:	68b9      	ldr	r1, [r7, #8]
 8006e0a:	68f8      	ldr	r0, [r7, #12]
 8006e0c:	f000 fa58 	bl	80072c0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e14:	223f      	movs	r2, #63	; 0x3f
 8006e16:	409a      	lsls	r2, r3
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	681a      	ldr	r2, [r3, #0]
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f042 0216 	orr.w	r2, r2, #22
 8006e2a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d007      	beq.n	8006e44 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	681a      	ldr	r2, [r3, #0]
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f042 0208 	orr.w	r2, r2, #8
 8006e42:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	681a      	ldr	r2, [r3, #0]
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f042 0201 	orr.w	r2, r2, #1
 8006e52:	601a      	str	r2, [r3, #0]
 8006e54:	e005      	b.n	8006e62 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006e5e:	2302      	movs	r3, #2
 8006e60:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006e62:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	3718      	adds	r7, #24
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}

08006e6c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b084      	sub	sp, #16
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e78:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006e7a:	f7ff fdaf 	bl	80069dc <HAL_GetTick>
 8006e7e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006e86:	b2db      	uxtb	r3, r3
 8006e88:	2b02      	cmp	r3, #2
 8006e8a:	d008      	beq.n	8006e9e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2280      	movs	r2, #128	; 0x80
 8006e90:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2200      	movs	r2, #0
 8006e96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	e052      	b.n	8006f44 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	681a      	ldr	r2, [r3, #0]
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f022 0216 	bic.w	r2, r2, #22
 8006eac:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	695a      	ldr	r2, [r3, #20]
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006ebc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d103      	bne.n	8006ece <HAL_DMA_Abort+0x62>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d007      	beq.n	8006ede <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	681a      	ldr	r2, [r3, #0]
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f022 0208 	bic.w	r2, r2, #8
 8006edc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	681a      	ldr	r2, [r3, #0]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f022 0201 	bic.w	r2, r2, #1
 8006eec:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006eee:	e013      	b.n	8006f18 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006ef0:	f7ff fd74 	bl	80069dc <HAL_GetTick>
 8006ef4:	4602      	mov	r2, r0
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	1ad3      	subs	r3, r2, r3
 8006efa:	2b05      	cmp	r3, #5
 8006efc:	d90c      	bls.n	8006f18 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2220      	movs	r2, #32
 8006f02:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2203      	movs	r2, #3
 8006f08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8006f14:	2303      	movs	r3, #3
 8006f16:	e015      	b.n	8006f44 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f003 0301 	and.w	r3, r3, #1
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d1e4      	bne.n	8006ef0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f2a:	223f      	movs	r2, #63	; 0x3f
 8006f2c:	409a      	lsls	r2, r3
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2201      	movs	r2, #1
 8006f36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8006f42:	2300      	movs	r3, #0
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	3710      	adds	r7, #16
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}

08006f4c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b083      	sub	sp, #12
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006f5a:	b2db      	uxtb	r3, r3
 8006f5c:	2b02      	cmp	r3, #2
 8006f5e:	d004      	beq.n	8006f6a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2280      	movs	r2, #128	; 0x80
 8006f64:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006f66:	2301      	movs	r3, #1
 8006f68:	e00c      	b.n	8006f84 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2205      	movs	r2, #5
 8006f6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	681a      	ldr	r2, [r3, #0]
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f022 0201 	bic.w	r2, r2, #1
 8006f80:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006f82:	2300      	movs	r3, #0
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	370c      	adds	r7, #12
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8e:	4770      	bx	lr

08006f90 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b086      	sub	sp, #24
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006f98:	2300      	movs	r3, #0
 8006f9a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006f9c:	4b8e      	ldr	r3, [pc, #568]	; (80071d8 <HAL_DMA_IRQHandler+0x248>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a8e      	ldr	r2, [pc, #568]	; (80071dc <HAL_DMA_IRQHandler+0x24c>)
 8006fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8006fa6:	0a9b      	lsrs	r3, r3, #10
 8006fa8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fae:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fba:	2208      	movs	r2, #8
 8006fbc:	409a      	lsls	r2, r3
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	4013      	ands	r3, r2
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d01a      	beq.n	8006ffc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f003 0304 	and.w	r3, r3, #4
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d013      	beq.n	8006ffc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	681a      	ldr	r2, [r3, #0]
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f022 0204 	bic.w	r2, r2, #4
 8006fe2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fe8:	2208      	movs	r2, #8
 8006fea:	409a      	lsls	r2, r3
 8006fec:	693b      	ldr	r3, [r7, #16]
 8006fee:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ff4:	f043 0201 	orr.w	r2, r3, #1
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007000:	2201      	movs	r2, #1
 8007002:	409a      	lsls	r2, r3
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	4013      	ands	r3, r2
 8007008:	2b00      	cmp	r3, #0
 800700a:	d012      	beq.n	8007032 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	695b      	ldr	r3, [r3, #20]
 8007012:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007016:	2b00      	cmp	r3, #0
 8007018:	d00b      	beq.n	8007032 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800701e:	2201      	movs	r2, #1
 8007020:	409a      	lsls	r2, r3
 8007022:	693b      	ldr	r3, [r7, #16]
 8007024:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800702a:	f043 0202 	orr.w	r2, r3, #2
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007036:	2204      	movs	r2, #4
 8007038:	409a      	lsls	r2, r3
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	4013      	ands	r3, r2
 800703e:	2b00      	cmp	r3, #0
 8007040:	d012      	beq.n	8007068 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f003 0302 	and.w	r3, r3, #2
 800704c:	2b00      	cmp	r3, #0
 800704e:	d00b      	beq.n	8007068 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007054:	2204      	movs	r2, #4
 8007056:	409a      	lsls	r2, r3
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007060:	f043 0204 	orr.w	r2, r3, #4
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800706c:	2210      	movs	r2, #16
 800706e:	409a      	lsls	r2, r3
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	4013      	ands	r3, r2
 8007074:	2b00      	cmp	r3, #0
 8007076:	d043      	beq.n	8007100 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f003 0308 	and.w	r3, r3, #8
 8007082:	2b00      	cmp	r3, #0
 8007084:	d03c      	beq.n	8007100 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800708a:	2210      	movs	r2, #16
 800708c:	409a      	lsls	r2, r3
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800709c:	2b00      	cmp	r3, #0
 800709e:	d018      	beq.n	80070d2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d108      	bne.n	80070c0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d024      	beq.n	8007100 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	4798      	blx	r3
 80070be:	e01f      	b.n	8007100 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d01b      	beq.n	8007100 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	4798      	blx	r3
 80070d0:	e016      	b.n	8007100 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d107      	bne.n	80070f0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	681a      	ldr	r2, [r3, #0]
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f022 0208 	bic.w	r2, r2, #8
 80070ee:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d003      	beq.n	8007100 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007104:	2220      	movs	r2, #32
 8007106:	409a      	lsls	r2, r3
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	4013      	ands	r3, r2
 800710c:	2b00      	cmp	r3, #0
 800710e:	f000 808f 	beq.w	8007230 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f003 0310 	and.w	r3, r3, #16
 800711c:	2b00      	cmp	r3, #0
 800711e:	f000 8087 	beq.w	8007230 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007126:	2220      	movs	r2, #32
 8007128:	409a      	lsls	r2, r3
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007134:	b2db      	uxtb	r3, r3
 8007136:	2b05      	cmp	r3, #5
 8007138:	d136      	bne.n	80071a8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	681a      	ldr	r2, [r3, #0]
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f022 0216 	bic.w	r2, r2, #22
 8007148:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	695a      	ldr	r2, [r3, #20]
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007158:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800715e:	2b00      	cmp	r3, #0
 8007160:	d103      	bne.n	800716a <HAL_DMA_IRQHandler+0x1da>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007166:	2b00      	cmp	r3, #0
 8007168:	d007      	beq.n	800717a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	681a      	ldr	r2, [r3, #0]
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f022 0208 	bic.w	r2, r2, #8
 8007178:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800717e:	223f      	movs	r2, #63	; 0x3f
 8007180:	409a      	lsls	r2, r3
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2201      	movs	r2, #1
 800718a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2200      	movs	r2, #0
 8007192:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800719a:	2b00      	cmp	r3, #0
 800719c:	d07e      	beq.n	800729c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	4798      	blx	r3
        }
        return;
 80071a6:	e079      	b.n	800729c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d01d      	beq.n	80071f2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d10d      	bne.n	80071e0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d031      	beq.n	8007230 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	4798      	blx	r3
 80071d4:	e02c      	b.n	8007230 <HAL_DMA_IRQHandler+0x2a0>
 80071d6:	bf00      	nop
 80071d8:	20000224 	.word	0x20000224
 80071dc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d023      	beq.n	8007230 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	4798      	blx	r3
 80071f0:	e01e      	b.n	8007230 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d10f      	bne.n	8007220 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	681a      	ldr	r2, [r3, #0]
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f022 0210 	bic.w	r2, r2, #16
 800720e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2201      	movs	r2, #1
 8007214:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2200      	movs	r2, #0
 800721c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007224:	2b00      	cmp	r3, #0
 8007226:	d003      	beq.n	8007230 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007234:	2b00      	cmp	r3, #0
 8007236:	d032      	beq.n	800729e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800723c:	f003 0301 	and.w	r3, r3, #1
 8007240:	2b00      	cmp	r3, #0
 8007242:	d022      	beq.n	800728a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2205      	movs	r2, #5
 8007248:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	681a      	ldr	r2, [r3, #0]
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f022 0201 	bic.w	r2, r2, #1
 800725a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	3301      	adds	r3, #1
 8007260:	60bb      	str	r3, [r7, #8]
 8007262:	697a      	ldr	r2, [r7, #20]
 8007264:	429a      	cmp	r2, r3
 8007266:	d307      	bcc.n	8007278 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f003 0301 	and.w	r3, r3, #1
 8007272:	2b00      	cmp	r3, #0
 8007274:	d1f2      	bne.n	800725c <HAL_DMA_IRQHandler+0x2cc>
 8007276:	e000      	b.n	800727a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8007278:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2201      	movs	r2, #1
 800727e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2200      	movs	r2, #0
 8007286:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800728e:	2b00      	cmp	r3, #0
 8007290:	d005      	beq.n	800729e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	4798      	blx	r3
 800729a:	e000      	b.n	800729e <HAL_DMA_IRQHandler+0x30e>
        return;
 800729c:	bf00      	nop
    }
  }
}
 800729e:	3718      	adds	r7, #24
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}

080072a4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80072a4:	b480      	push	{r7}
 80072a6:	b083      	sub	sp, #12
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80072b2:	b2db      	uxtb	r3, r3
}
 80072b4:	4618      	mov	r0, r3
 80072b6:	370c      	adds	r7, #12
 80072b8:	46bd      	mov	sp, r7
 80072ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072be:	4770      	bx	lr

080072c0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80072c0:	b480      	push	{r7}
 80072c2:	b085      	sub	sp, #20
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	60f8      	str	r0, [r7, #12]
 80072c8:	60b9      	str	r1, [r7, #8]
 80072ca:	607a      	str	r2, [r7, #4]
 80072cc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	681a      	ldr	r2, [r3, #0]
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80072dc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	683a      	ldr	r2, [r7, #0]
 80072e4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	689b      	ldr	r3, [r3, #8]
 80072ea:	2b40      	cmp	r3, #64	; 0x40
 80072ec:	d108      	bne.n	8007300 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	687a      	ldr	r2, [r7, #4]
 80072f4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	68ba      	ldr	r2, [r7, #8]
 80072fc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80072fe:	e007      	b.n	8007310 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	68ba      	ldr	r2, [r7, #8]
 8007306:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	687a      	ldr	r2, [r7, #4]
 800730e:	60da      	str	r2, [r3, #12]
}
 8007310:	bf00      	nop
 8007312:	3714      	adds	r7, #20
 8007314:	46bd      	mov	sp, r7
 8007316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731a:	4770      	bx	lr

0800731c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800731c:	b480      	push	{r7}
 800731e:	b085      	sub	sp, #20
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	b2db      	uxtb	r3, r3
 800732a:	3b10      	subs	r3, #16
 800732c:	4a14      	ldr	r2, [pc, #80]	; (8007380 <DMA_CalcBaseAndBitshift+0x64>)
 800732e:	fba2 2303 	umull	r2, r3, r2, r3
 8007332:	091b      	lsrs	r3, r3, #4
 8007334:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007336:	4a13      	ldr	r2, [pc, #76]	; (8007384 <DMA_CalcBaseAndBitshift+0x68>)
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	4413      	add	r3, r2
 800733c:	781b      	ldrb	r3, [r3, #0]
 800733e:	461a      	mov	r2, r3
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	2b03      	cmp	r3, #3
 8007348:	d909      	bls.n	800735e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007352:	f023 0303 	bic.w	r3, r3, #3
 8007356:	1d1a      	adds	r2, r3, #4
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	659a      	str	r2, [r3, #88]	; 0x58
 800735c:	e007      	b.n	800736e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007366:	f023 0303 	bic.w	r3, r3, #3
 800736a:	687a      	ldr	r2, [r7, #4]
 800736c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007372:	4618      	mov	r0, r3
 8007374:	3714      	adds	r7, #20
 8007376:	46bd      	mov	sp, r7
 8007378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737c:	4770      	bx	lr
 800737e:	bf00      	nop
 8007380:	aaaaaaab 	.word	0xaaaaaaab
 8007384:	0803d144 	.word	0x0803d144

08007388 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007388:	b480      	push	{r7}
 800738a:	b085      	sub	sp, #20
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007390:	2300      	movs	r3, #0
 8007392:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007398:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	699b      	ldr	r3, [r3, #24]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d11f      	bne.n	80073e2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	2b03      	cmp	r3, #3
 80073a6:	d856      	bhi.n	8007456 <DMA_CheckFifoParam+0xce>
 80073a8:	a201      	add	r2, pc, #4	; (adr r2, 80073b0 <DMA_CheckFifoParam+0x28>)
 80073aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073ae:	bf00      	nop
 80073b0:	080073c1 	.word	0x080073c1
 80073b4:	080073d3 	.word	0x080073d3
 80073b8:	080073c1 	.word	0x080073c1
 80073bc:	08007457 	.word	0x08007457
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d046      	beq.n	800745a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80073cc:	2301      	movs	r3, #1
 80073ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80073d0:	e043      	b.n	800745a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073d6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80073da:	d140      	bne.n	800745e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80073dc:	2301      	movs	r3, #1
 80073de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80073e0:	e03d      	b.n	800745e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	699b      	ldr	r3, [r3, #24]
 80073e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073ea:	d121      	bne.n	8007430 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	2b03      	cmp	r3, #3
 80073f0:	d837      	bhi.n	8007462 <DMA_CheckFifoParam+0xda>
 80073f2:	a201      	add	r2, pc, #4	; (adr r2, 80073f8 <DMA_CheckFifoParam+0x70>)
 80073f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073f8:	08007409 	.word	0x08007409
 80073fc:	0800740f 	.word	0x0800740f
 8007400:	08007409 	.word	0x08007409
 8007404:	08007421 	.word	0x08007421
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007408:	2301      	movs	r3, #1
 800740a:	73fb      	strb	r3, [r7, #15]
      break;
 800740c:	e030      	b.n	8007470 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007412:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007416:	2b00      	cmp	r3, #0
 8007418:	d025      	beq.n	8007466 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800741a:	2301      	movs	r3, #1
 800741c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800741e:	e022      	b.n	8007466 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007424:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007428:	d11f      	bne.n	800746a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800742a:	2301      	movs	r3, #1
 800742c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800742e:	e01c      	b.n	800746a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	2b02      	cmp	r3, #2
 8007434:	d903      	bls.n	800743e <DMA_CheckFifoParam+0xb6>
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	2b03      	cmp	r3, #3
 800743a:	d003      	beq.n	8007444 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800743c:	e018      	b.n	8007470 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800743e:	2301      	movs	r3, #1
 8007440:	73fb      	strb	r3, [r7, #15]
      break;
 8007442:	e015      	b.n	8007470 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007448:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800744c:	2b00      	cmp	r3, #0
 800744e:	d00e      	beq.n	800746e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007450:	2301      	movs	r3, #1
 8007452:	73fb      	strb	r3, [r7, #15]
      break;
 8007454:	e00b      	b.n	800746e <DMA_CheckFifoParam+0xe6>
      break;
 8007456:	bf00      	nop
 8007458:	e00a      	b.n	8007470 <DMA_CheckFifoParam+0xe8>
      break;
 800745a:	bf00      	nop
 800745c:	e008      	b.n	8007470 <DMA_CheckFifoParam+0xe8>
      break;
 800745e:	bf00      	nop
 8007460:	e006      	b.n	8007470 <DMA_CheckFifoParam+0xe8>
      break;
 8007462:	bf00      	nop
 8007464:	e004      	b.n	8007470 <DMA_CheckFifoParam+0xe8>
      break;
 8007466:	bf00      	nop
 8007468:	e002      	b.n	8007470 <DMA_CheckFifoParam+0xe8>
      break;   
 800746a:	bf00      	nop
 800746c:	e000      	b.n	8007470 <DMA_CheckFifoParam+0xe8>
      break;
 800746e:	bf00      	nop
    }
  } 
  
  return status; 
 8007470:	7bfb      	ldrb	r3, [r7, #15]
}
 8007472:	4618      	mov	r0, r3
 8007474:	3714      	adds	r7, #20
 8007476:	46bd      	mov	sp, r7
 8007478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747c:	4770      	bx	lr
 800747e:	bf00      	nop

08007480 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007480:	b480      	push	{r7}
 8007482:	b089      	sub	sp, #36	; 0x24
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
 8007488:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800748a:	2300      	movs	r3, #0
 800748c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800748e:	2300      	movs	r3, #0
 8007490:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007492:	2300      	movs	r3, #0
 8007494:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007496:	2300      	movs	r3, #0
 8007498:	61fb      	str	r3, [r7, #28]
 800749a:	e159      	b.n	8007750 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800749c:	2201      	movs	r2, #1
 800749e:	69fb      	ldr	r3, [r7, #28]
 80074a0:	fa02 f303 	lsl.w	r3, r2, r3
 80074a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	697a      	ldr	r2, [r7, #20]
 80074ac:	4013      	ands	r3, r2
 80074ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80074b0:	693a      	ldr	r2, [r7, #16]
 80074b2:	697b      	ldr	r3, [r7, #20]
 80074b4:	429a      	cmp	r2, r3
 80074b6:	f040 8148 	bne.w	800774a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	685b      	ldr	r3, [r3, #4]
 80074be:	f003 0303 	and.w	r3, r3, #3
 80074c2:	2b01      	cmp	r3, #1
 80074c4:	d005      	beq.n	80074d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	685b      	ldr	r3, [r3, #4]
 80074ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80074ce:	2b02      	cmp	r3, #2
 80074d0:	d130      	bne.n	8007534 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	689b      	ldr	r3, [r3, #8]
 80074d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80074d8:	69fb      	ldr	r3, [r7, #28]
 80074da:	005b      	lsls	r3, r3, #1
 80074dc:	2203      	movs	r2, #3
 80074de:	fa02 f303 	lsl.w	r3, r2, r3
 80074e2:	43db      	mvns	r3, r3
 80074e4:	69ba      	ldr	r2, [r7, #24]
 80074e6:	4013      	ands	r3, r2
 80074e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	68da      	ldr	r2, [r3, #12]
 80074ee:	69fb      	ldr	r3, [r7, #28]
 80074f0:	005b      	lsls	r3, r3, #1
 80074f2:	fa02 f303 	lsl.w	r3, r2, r3
 80074f6:	69ba      	ldr	r2, [r7, #24]
 80074f8:	4313      	orrs	r3, r2
 80074fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	69ba      	ldr	r2, [r7, #24]
 8007500:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	685b      	ldr	r3, [r3, #4]
 8007506:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007508:	2201      	movs	r2, #1
 800750a:	69fb      	ldr	r3, [r7, #28]
 800750c:	fa02 f303 	lsl.w	r3, r2, r3
 8007510:	43db      	mvns	r3, r3
 8007512:	69ba      	ldr	r2, [r7, #24]
 8007514:	4013      	ands	r3, r2
 8007516:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	685b      	ldr	r3, [r3, #4]
 800751c:	091b      	lsrs	r3, r3, #4
 800751e:	f003 0201 	and.w	r2, r3, #1
 8007522:	69fb      	ldr	r3, [r7, #28]
 8007524:	fa02 f303 	lsl.w	r3, r2, r3
 8007528:	69ba      	ldr	r2, [r7, #24]
 800752a:	4313      	orrs	r3, r2
 800752c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	69ba      	ldr	r2, [r7, #24]
 8007532:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	685b      	ldr	r3, [r3, #4]
 8007538:	f003 0303 	and.w	r3, r3, #3
 800753c:	2b03      	cmp	r3, #3
 800753e:	d017      	beq.n	8007570 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	68db      	ldr	r3, [r3, #12]
 8007544:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007546:	69fb      	ldr	r3, [r7, #28]
 8007548:	005b      	lsls	r3, r3, #1
 800754a:	2203      	movs	r2, #3
 800754c:	fa02 f303 	lsl.w	r3, r2, r3
 8007550:	43db      	mvns	r3, r3
 8007552:	69ba      	ldr	r2, [r7, #24]
 8007554:	4013      	ands	r3, r2
 8007556:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	689a      	ldr	r2, [r3, #8]
 800755c:	69fb      	ldr	r3, [r7, #28]
 800755e:	005b      	lsls	r3, r3, #1
 8007560:	fa02 f303 	lsl.w	r3, r2, r3
 8007564:	69ba      	ldr	r2, [r7, #24]
 8007566:	4313      	orrs	r3, r2
 8007568:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	69ba      	ldr	r2, [r7, #24]
 800756e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	685b      	ldr	r3, [r3, #4]
 8007574:	f003 0303 	and.w	r3, r3, #3
 8007578:	2b02      	cmp	r3, #2
 800757a:	d123      	bne.n	80075c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800757c:	69fb      	ldr	r3, [r7, #28]
 800757e:	08da      	lsrs	r2, r3, #3
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	3208      	adds	r2, #8
 8007584:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007588:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800758a:	69fb      	ldr	r3, [r7, #28]
 800758c:	f003 0307 	and.w	r3, r3, #7
 8007590:	009b      	lsls	r3, r3, #2
 8007592:	220f      	movs	r2, #15
 8007594:	fa02 f303 	lsl.w	r3, r2, r3
 8007598:	43db      	mvns	r3, r3
 800759a:	69ba      	ldr	r2, [r7, #24]
 800759c:	4013      	ands	r3, r2
 800759e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	691a      	ldr	r2, [r3, #16]
 80075a4:	69fb      	ldr	r3, [r7, #28]
 80075a6:	f003 0307 	and.w	r3, r3, #7
 80075aa:	009b      	lsls	r3, r3, #2
 80075ac:	fa02 f303 	lsl.w	r3, r2, r3
 80075b0:	69ba      	ldr	r2, [r7, #24]
 80075b2:	4313      	orrs	r3, r2
 80075b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80075b6:	69fb      	ldr	r3, [r7, #28]
 80075b8:	08da      	lsrs	r2, r3, #3
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	3208      	adds	r2, #8
 80075be:	69b9      	ldr	r1, [r7, #24]
 80075c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80075ca:	69fb      	ldr	r3, [r7, #28]
 80075cc:	005b      	lsls	r3, r3, #1
 80075ce:	2203      	movs	r2, #3
 80075d0:	fa02 f303 	lsl.w	r3, r2, r3
 80075d4:	43db      	mvns	r3, r3
 80075d6:	69ba      	ldr	r2, [r7, #24]
 80075d8:	4013      	ands	r3, r2
 80075da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	685b      	ldr	r3, [r3, #4]
 80075e0:	f003 0203 	and.w	r2, r3, #3
 80075e4:	69fb      	ldr	r3, [r7, #28]
 80075e6:	005b      	lsls	r3, r3, #1
 80075e8:	fa02 f303 	lsl.w	r3, r2, r3
 80075ec:	69ba      	ldr	r2, [r7, #24]
 80075ee:	4313      	orrs	r3, r2
 80075f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	69ba      	ldr	r2, [r7, #24]
 80075f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	685b      	ldr	r3, [r3, #4]
 80075fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007600:	2b00      	cmp	r3, #0
 8007602:	f000 80a2 	beq.w	800774a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007606:	2300      	movs	r3, #0
 8007608:	60fb      	str	r3, [r7, #12]
 800760a:	4b57      	ldr	r3, [pc, #348]	; (8007768 <HAL_GPIO_Init+0x2e8>)
 800760c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800760e:	4a56      	ldr	r2, [pc, #344]	; (8007768 <HAL_GPIO_Init+0x2e8>)
 8007610:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007614:	6453      	str	r3, [r2, #68]	; 0x44
 8007616:	4b54      	ldr	r3, [pc, #336]	; (8007768 <HAL_GPIO_Init+0x2e8>)
 8007618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800761a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800761e:	60fb      	str	r3, [r7, #12]
 8007620:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007622:	4a52      	ldr	r2, [pc, #328]	; (800776c <HAL_GPIO_Init+0x2ec>)
 8007624:	69fb      	ldr	r3, [r7, #28]
 8007626:	089b      	lsrs	r3, r3, #2
 8007628:	3302      	adds	r3, #2
 800762a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800762e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007630:	69fb      	ldr	r3, [r7, #28]
 8007632:	f003 0303 	and.w	r3, r3, #3
 8007636:	009b      	lsls	r3, r3, #2
 8007638:	220f      	movs	r2, #15
 800763a:	fa02 f303 	lsl.w	r3, r2, r3
 800763e:	43db      	mvns	r3, r3
 8007640:	69ba      	ldr	r2, [r7, #24]
 8007642:	4013      	ands	r3, r2
 8007644:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	4a49      	ldr	r2, [pc, #292]	; (8007770 <HAL_GPIO_Init+0x2f0>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d019      	beq.n	8007682 <HAL_GPIO_Init+0x202>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	4a48      	ldr	r2, [pc, #288]	; (8007774 <HAL_GPIO_Init+0x2f4>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d013      	beq.n	800767e <HAL_GPIO_Init+0x1fe>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	4a47      	ldr	r2, [pc, #284]	; (8007778 <HAL_GPIO_Init+0x2f8>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d00d      	beq.n	800767a <HAL_GPIO_Init+0x1fa>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	4a46      	ldr	r2, [pc, #280]	; (800777c <HAL_GPIO_Init+0x2fc>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d007      	beq.n	8007676 <HAL_GPIO_Init+0x1f6>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	4a45      	ldr	r2, [pc, #276]	; (8007780 <HAL_GPIO_Init+0x300>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d101      	bne.n	8007672 <HAL_GPIO_Init+0x1f2>
 800766e:	2304      	movs	r3, #4
 8007670:	e008      	b.n	8007684 <HAL_GPIO_Init+0x204>
 8007672:	2307      	movs	r3, #7
 8007674:	e006      	b.n	8007684 <HAL_GPIO_Init+0x204>
 8007676:	2303      	movs	r3, #3
 8007678:	e004      	b.n	8007684 <HAL_GPIO_Init+0x204>
 800767a:	2302      	movs	r3, #2
 800767c:	e002      	b.n	8007684 <HAL_GPIO_Init+0x204>
 800767e:	2301      	movs	r3, #1
 8007680:	e000      	b.n	8007684 <HAL_GPIO_Init+0x204>
 8007682:	2300      	movs	r3, #0
 8007684:	69fa      	ldr	r2, [r7, #28]
 8007686:	f002 0203 	and.w	r2, r2, #3
 800768a:	0092      	lsls	r2, r2, #2
 800768c:	4093      	lsls	r3, r2
 800768e:	69ba      	ldr	r2, [r7, #24]
 8007690:	4313      	orrs	r3, r2
 8007692:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007694:	4935      	ldr	r1, [pc, #212]	; (800776c <HAL_GPIO_Init+0x2ec>)
 8007696:	69fb      	ldr	r3, [r7, #28]
 8007698:	089b      	lsrs	r3, r3, #2
 800769a:	3302      	adds	r3, #2
 800769c:	69ba      	ldr	r2, [r7, #24]
 800769e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80076a2:	4b38      	ldr	r3, [pc, #224]	; (8007784 <HAL_GPIO_Init+0x304>)
 80076a4:	689b      	ldr	r3, [r3, #8]
 80076a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80076a8:	693b      	ldr	r3, [r7, #16]
 80076aa:	43db      	mvns	r3, r3
 80076ac:	69ba      	ldr	r2, [r7, #24]
 80076ae:	4013      	ands	r3, r2
 80076b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	685b      	ldr	r3, [r3, #4]
 80076b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d003      	beq.n	80076c6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80076be:	69ba      	ldr	r2, [r7, #24]
 80076c0:	693b      	ldr	r3, [r7, #16]
 80076c2:	4313      	orrs	r3, r2
 80076c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80076c6:	4a2f      	ldr	r2, [pc, #188]	; (8007784 <HAL_GPIO_Init+0x304>)
 80076c8:	69bb      	ldr	r3, [r7, #24]
 80076ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80076cc:	4b2d      	ldr	r3, [pc, #180]	; (8007784 <HAL_GPIO_Init+0x304>)
 80076ce:	68db      	ldr	r3, [r3, #12]
 80076d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80076d2:	693b      	ldr	r3, [r7, #16]
 80076d4:	43db      	mvns	r3, r3
 80076d6:	69ba      	ldr	r2, [r7, #24]
 80076d8:	4013      	ands	r3, r2
 80076da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	685b      	ldr	r3, [r3, #4]
 80076e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d003      	beq.n	80076f0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80076e8:	69ba      	ldr	r2, [r7, #24]
 80076ea:	693b      	ldr	r3, [r7, #16]
 80076ec:	4313      	orrs	r3, r2
 80076ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80076f0:	4a24      	ldr	r2, [pc, #144]	; (8007784 <HAL_GPIO_Init+0x304>)
 80076f2:	69bb      	ldr	r3, [r7, #24]
 80076f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80076f6:	4b23      	ldr	r3, [pc, #140]	; (8007784 <HAL_GPIO_Init+0x304>)
 80076f8:	685b      	ldr	r3, [r3, #4]
 80076fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80076fc:	693b      	ldr	r3, [r7, #16]
 80076fe:	43db      	mvns	r3, r3
 8007700:	69ba      	ldr	r2, [r7, #24]
 8007702:	4013      	ands	r3, r2
 8007704:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	685b      	ldr	r3, [r3, #4]
 800770a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800770e:	2b00      	cmp	r3, #0
 8007710:	d003      	beq.n	800771a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8007712:	69ba      	ldr	r2, [r7, #24]
 8007714:	693b      	ldr	r3, [r7, #16]
 8007716:	4313      	orrs	r3, r2
 8007718:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800771a:	4a1a      	ldr	r2, [pc, #104]	; (8007784 <HAL_GPIO_Init+0x304>)
 800771c:	69bb      	ldr	r3, [r7, #24]
 800771e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007720:	4b18      	ldr	r3, [pc, #96]	; (8007784 <HAL_GPIO_Init+0x304>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007726:	693b      	ldr	r3, [r7, #16]
 8007728:	43db      	mvns	r3, r3
 800772a:	69ba      	ldr	r2, [r7, #24]
 800772c:	4013      	ands	r3, r2
 800772e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	685b      	ldr	r3, [r3, #4]
 8007734:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007738:	2b00      	cmp	r3, #0
 800773a:	d003      	beq.n	8007744 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800773c:	69ba      	ldr	r2, [r7, #24]
 800773e:	693b      	ldr	r3, [r7, #16]
 8007740:	4313      	orrs	r3, r2
 8007742:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007744:	4a0f      	ldr	r2, [pc, #60]	; (8007784 <HAL_GPIO_Init+0x304>)
 8007746:	69bb      	ldr	r3, [r7, #24]
 8007748:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800774a:	69fb      	ldr	r3, [r7, #28]
 800774c:	3301      	adds	r3, #1
 800774e:	61fb      	str	r3, [r7, #28]
 8007750:	69fb      	ldr	r3, [r7, #28]
 8007752:	2b0f      	cmp	r3, #15
 8007754:	f67f aea2 	bls.w	800749c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007758:	bf00      	nop
 800775a:	bf00      	nop
 800775c:	3724      	adds	r7, #36	; 0x24
 800775e:	46bd      	mov	sp, r7
 8007760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007764:	4770      	bx	lr
 8007766:	bf00      	nop
 8007768:	40023800 	.word	0x40023800
 800776c:	40013800 	.word	0x40013800
 8007770:	40020000 	.word	0x40020000
 8007774:	40020400 	.word	0x40020400
 8007778:	40020800 	.word	0x40020800
 800777c:	40020c00 	.word	0x40020c00
 8007780:	40021000 	.word	0x40021000
 8007784:	40013c00 	.word	0x40013c00

08007788 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007788:	b480      	push	{r7}
 800778a:	b085      	sub	sp, #20
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
 8007790:	460b      	mov	r3, r1
 8007792:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	691a      	ldr	r2, [r3, #16]
 8007798:	887b      	ldrh	r3, [r7, #2]
 800779a:	4013      	ands	r3, r2
 800779c:	2b00      	cmp	r3, #0
 800779e:	d002      	beq.n	80077a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80077a0:	2301      	movs	r3, #1
 80077a2:	73fb      	strb	r3, [r7, #15]
 80077a4:	e001      	b.n	80077aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80077a6:	2300      	movs	r3, #0
 80077a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80077aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	3714      	adds	r7, #20
 80077b0:	46bd      	mov	sp, r7
 80077b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b6:	4770      	bx	lr

080077b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80077b8:	b480      	push	{r7}
 80077ba:	b083      	sub	sp, #12
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
 80077c0:	460b      	mov	r3, r1
 80077c2:	807b      	strh	r3, [r7, #2]
 80077c4:	4613      	mov	r3, r2
 80077c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80077c8:	787b      	ldrb	r3, [r7, #1]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d003      	beq.n	80077d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80077ce:	887a      	ldrh	r2, [r7, #2]
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80077d4:	e003      	b.n	80077de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80077d6:	887b      	ldrh	r3, [r7, #2]
 80077d8:	041a      	lsls	r2, r3, #16
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	619a      	str	r2, [r3, #24]
}
 80077de:	bf00      	nop
 80077e0:	370c      	adds	r7, #12
 80077e2:	46bd      	mov	sp, r7
 80077e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e8:	4770      	bx	lr

080077ea <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80077ea:	b480      	push	{r7}
 80077ec:	b085      	sub	sp, #20
 80077ee:	af00      	add	r7, sp, #0
 80077f0:	6078      	str	r0, [r7, #4]
 80077f2:	460b      	mov	r3, r1
 80077f4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	695b      	ldr	r3, [r3, #20]
 80077fa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80077fc:	887a      	ldrh	r2, [r7, #2]
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	4013      	ands	r3, r2
 8007802:	041a      	lsls	r2, r3, #16
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	43d9      	mvns	r1, r3
 8007808:	887b      	ldrh	r3, [r7, #2]
 800780a:	400b      	ands	r3, r1
 800780c:	431a      	orrs	r2, r3
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	619a      	str	r2, [r3, #24]
}
 8007812:	bf00      	nop
 8007814:	3714      	adds	r7, #20
 8007816:	46bd      	mov	sp, r7
 8007818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781c:	4770      	bx	lr
	...

08007820 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b082      	sub	sp, #8
 8007824:	af00      	add	r7, sp, #0
 8007826:	4603      	mov	r3, r0
 8007828:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800782a:	4b08      	ldr	r3, [pc, #32]	; (800784c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800782c:	695a      	ldr	r2, [r3, #20]
 800782e:	88fb      	ldrh	r3, [r7, #6]
 8007830:	4013      	ands	r3, r2
 8007832:	2b00      	cmp	r3, #0
 8007834:	d006      	beq.n	8007844 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007836:	4a05      	ldr	r2, [pc, #20]	; (800784c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007838:	88fb      	ldrh	r3, [r7, #6]
 800783a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800783c:	88fb      	ldrh	r3, [r7, #6]
 800783e:	4618      	mov	r0, r3
 8007840:	f7fd fc14 	bl	800506c <HAL_GPIO_EXTI_Callback>
  }
}
 8007844:	bf00      	nop
 8007846:	3708      	adds	r7, #8
 8007848:	46bd      	mov	sp, r7
 800784a:	bd80      	pop	{r7, pc}
 800784c:	40013c00 	.word	0x40013c00

08007850 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b084      	sub	sp, #16
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d101      	bne.n	8007862 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800785e:	2301      	movs	r3, #1
 8007860:	e12b      	b.n	8007aba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007868:	b2db      	uxtb	r3, r3
 800786a:	2b00      	cmp	r3, #0
 800786c:	d106      	bne.n	800787c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2200      	movs	r2, #0
 8007872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f7fd fc80 	bl	800517c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2224      	movs	r2, #36	; 0x24
 8007880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	681a      	ldr	r2, [r3, #0]
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f022 0201 	bic.w	r2, r2, #1
 8007892:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	681a      	ldr	r2, [r3, #0]
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80078a2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	681a      	ldr	r2, [r3, #0]
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80078b2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80078b4:	f003 f8d6 	bl	800aa64 <HAL_RCC_GetPCLK1Freq>
 80078b8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	685b      	ldr	r3, [r3, #4]
 80078be:	4a81      	ldr	r2, [pc, #516]	; (8007ac4 <HAL_I2C_Init+0x274>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d807      	bhi.n	80078d4 <HAL_I2C_Init+0x84>
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	4a80      	ldr	r2, [pc, #512]	; (8007ac8 <HAL_I2C_Init+0x278>)
 80078c8:	4293      	cmp	r3, r2
 80078ca:	bf94      	ite	ls
 80078cc:	2301      	movls	r3, #1
 80078ce:	2300      	movhi	r3, #0
 80078d0:	b2db      	uxtb	r3, r3
 80078d2:	e006      	b.n	80078e2 <HAL_I2C_Init+0x92>
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	4a7d      	ldr	r2, [pc, #500]	; (8007acc <HAL_I2C_Init+0x27c>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	bf94      	ite	ls
 80078dc:	2301      	movls	r3, #1
 80078de:	2300      	movhi	r3, #0
 80078e0:	b2db      	uxtb	r3, r3
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d001      	beq.n	80078ea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80078e6:	2301      	movs	r3, #1
 80078e8:	e0e7      	b.n	8007aba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	4a78      	ldr	r2, [pc, #480]	; (8007ad0 <HAL_I2C_Init+0x280>)
 80078ee:	fba2 2303 	umull	r2, r3, r2, r3
 80078f2:	0c9b      	lsrs	r3, r3, #18
 80078f4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	685b      	ldr	r3, [r3, #4]
 80078fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	68ba      	ldr	r2, [r7, #8]
 8007906:	430a      	orrs	r2, r1
 8007908:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	6a1b      	ldr	r3, [r3, #32]
 8007910:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	685b      	ldr	r3, [r3, #4]
 8007918:	4a6a      	ldr	r2, [pc, #424]	; (8007ac4 <HAL_I2C_Init+0x274>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d802      	bhi.n	8007924 <HAL_I2C_Init+0xd4>
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	3301      	adds	r3, #1
 8007922:	e009      	b.n	8007938 <HAL_I2C_Init+0xe8>
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800792a:	fb02 f303 	mul.w	r3, r2, r3
 800792e:	4a69      	ldr	r2, [pc, #420]	; (8007ad4 <HAL_I2C_Init+0x284>)
 8007930:	fba2 2303 	umull	r2, r3, r2, r3
 8007934:	099b      	lsrs	r3, r3, #6
 8007936:	3301      	adds	r3, #1
 8007938:	687a      	ldr	r2, [r7, #4]
 800793a:	6812      	ldr	r2, [r2, #0]
 800793c:	430b      	orrs	r3, r1
 800793e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	69db      	ldr	r3, [r3, #28]
 8007946:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800794a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	685b      	ldr	r3, [r3, #4]
 8007952:	495c      	ldr	r1, [pc, #368]	; (8007ac4 <HAL_I2C_Init+0x274>)
 8007954:	428b      	cmp	r3, r1
 8007956:	d819      	bhi.n	800798c <HAL_I2C_Init+0x13c>
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	1e59      	subs	r1, r3, #1
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	685b      	ldr	r3, [r3, #4]
 8007960:	005b      	lsls	r3, r3, #1
 8007962:	fbb1 f3f3 	udiv	r3, r1, r3
 8007966:	1c59      	adds	r1, r3, #1
 8007968:	f640 73fc 	movw	r3, #4092	; 0xffc
 800796c:	400b      	ands	r3, r1
 800796e:	2b00      	cmp	r3, #0
 8007970:	d00a      	beq.n	8007988 <HAL_I2C_Init+0x138>
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	1e59      	subs	r1, r3, #1
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	685b      	ldr	r3, [r3, #4]
 800797a:	005b      	lsls	r3, r3, #1
 800797c:	fbb1 f3f3 	udiv	r3, r1, r3
 8007980:	3301      	adds	r3, #1
 8007982:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007986:	e051      	b.n	8007a2c <HAL_I2C_Init+0x1dc>
 8007988:	2304      	movs	r3, #4
 800798a:	e04f      	b.n	8007a2c <HAL_I2C_Init+0x1dc>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	689b      	ldr	r3, [r3, #8]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d111      	bne.n	80079b8 <HAL_I2C_Init+0x168>
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	1e58      	subs	r0, r3, #1
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6859      	ldr	r1, [r3, #4]
 800799c:	460b      	mov	r3, r1
 800799e:	005b      	lsls	r3, r3, #1
 80079a0:	440b      	add	r3, r1
 80079a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80079a6:	3301      	adds	r3, #1
 80079a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	bf0c      	ite	eq
 80079b0:	2301      	moveq	r3, #1
 80079b2:	2300      	movne	r3, #0
 80079b4:	b2db      	uxtb	r3, r3
 80079b6:	e012      	b.n	80079de <HAL_I2C_Init+0x18e>
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	1e58      	subs	r0, r3, #1
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6859      	ldr	r1, [r3, #4]
 80079c0:	460b      	mov	r3, r1
 80079c2:	009b      	lsls	r3, r3, #2
 80079c4:	440b      	add	r3, r1
 80079c6:	0099      	lsls	r1, r3, #2
 80079c8:	440b      	add	r3, r1
 80079ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80079ce:	3301      	adds	r3, #1
 80079d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	bf0c      	ite	eq
 80079d8:	2301      	moveq	r3, #1
 80079da:	2300      	movne	r3, #0
 80079dc:	b2db      	uxtb	r3, r3
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d001      	beq.n	80079e6 <HAL_I2C_Init+0x196>
 80079e2:	2301      	movs	r3, #1
 80079e4:	e022      	b.n	8007a2c <HAL_I2C_Init+0x1dc>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	689b      	ldr	r3, [r3, #8]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d10e      	bne.n	8007a0c <HAL_I2C_Init+0x1bc>
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	1e58      	subs	r0, r3, #1
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6859      	ldr	r1, [r3, #4]
 80079f6:	460b      	mov	r3, r1
 80079f8:	005b      	lsls	r3, r3, #1
 80079fa:	440b      	add	r3, r1
 80079fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8007a00:	3301      	adds	r3, #1
 8007a02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a0a:	e00f      	b.n	8007a2c <HAL_I2C_Init+0x1dc>
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	1e58      	subs	r0, r3, #1
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6859      	ldr	r1, [r3, #4]
 8007a14:	460b      	mov	r3, r1
 8007a16:	009b      	lsls	r3, r3, #2
 8007a18:	440b      	add	r3, r1
 8007a1a:	0099      	lsls	r1, r3, #2
 8007a1c:	440b      	add	r3, r1
 8007a1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007a22:	3301      	adds	r3, #1
 8007a24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007a2c:	6879      	ldr	r1, [r7, #4]
 8007a2e:	6809      	ldr	r1, [r1, #0]
 8007a30:	4313      	orrs	r3, r2
 8007a32:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	69da      	ldr	r2, [r3, #28]
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6a1b      	ldr	r3, [r3, #32]
 8007a46:	431a      	orrs	r2, r3
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	430a      	orrs	r2, r1
 8007a4e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	689b      	ldr	r3, [r3, #8]
 8007a56:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007a5a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007a5e:	687a      	ldr	r2, [r7, #4]
 8007a60:	6911      	ldr	r1, [r2, #16]
 8007a62:	687a      	ldr	r2, [r7, #4]
 8007a64:	68d2      	ldr	r2, [r2, #12]
 8007a66:	4311      	orrs	r1, r2
 8007a68:	687a      	ldr	r2, [r7, #4]
 8007a6a:	6812      	ldr	r2, [r2, #0]
 8007a6c:	430b      	orrs	r3, r1
 8007a6e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	68db      	ldr	r3, [r3, #12]
 8007a76:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	695a      	ldr	r2, [r3, #20]
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	699b      	ldr	r3, [r3, #24]
 8007a82:	431a      	orrs	r2, r3
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	430a      	orrs	r2, r1
 8007a8a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	681a      	ldr	r2, [r3, #0]
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f042 0201 	orr.w	r2, r2, #1
 8007a9a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2220      	movs	r2, #32
 8007aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2200      	movs	r2, #0
 8007aae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007ab8:	2300      	movs	r3, #0
}
 8007aba:	4618      	mov	r0, r3
 8007abc:	3710      	adds	r7, #16
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}
 8007ac2:	bf00      	nop
 8007ac4:	000186a0 	.word	0x000186a0
 8007ac8:	001e847f 	.word	0x001e847f
 8007acc:	003d08ff 	.word	0x003d08ff
 8007ad0:	431bde83 	.word	0x431bde83
 8007ad4:	10624dd3 	.word	0x10624dd3

08007ad8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b088      	sub	sp, #32
 8007adc:	af02      	add	r7, sp, #8
 8007ade:	60f8      	str	r0, [r7, #12]
 8007ae0:	4608      	mov	r0, r1
 8007ae2:	4611      	mov	r1, r2
 8007ae4:	461a      	mov	r2, r3
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	817b      	strh	r3, [r7, #10]
 8007aea:	460b      	mov	r3, r1
 8007aec:	813b      	strh	r3, [r7, #8]
 8007aee:	4613      	mov	r3, r2
 8007af0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007af2:	f7fe ff73 	bl	80069dc <HAL_GetTick>
 8007af6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007afe:	b2db      	uxtb	r3, r3
 8007b00:	2b20      	cmp	r3, #32
 8007b02:	f040 80d9 	bne.w	8007cb8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	9300      	str	r3, [sp, #0]
 8007b0a:	2319      	movs	r3, #25
 8007b0c:	2201      	movs	r2, #1
 8007b0e:	496d      	ldr	r1, [pc, #436]	; (8007cc4 <HAL_I2C_Mem_Write+0x1ec>)
 8007b10:	68f8      	ldr	r0, [r7, #12]
 8007b12:	f002 f90d 	bl	8009d30 <I2C_WaitOnFlagUntilTimeout>
 8007b16:	4603      	mov	r3, r0
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d001      	beq.n	8007b20 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007b1c:	2302      	movs	r3, #2
 8007b1e:	e0cc      	b.n	8007cba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b26:	2b01      	cmp	r3, #1
 8007b28:	d101      	bne.n	8007b2e <HAL_I2C_Mem_Write+0x56>
 8007b2a:	2302      	movs	r3, #2
 8007b2c:	e0c5      	b.n	8007cba <HAL_I2C_Mem_Write+0x1e2>
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	2201      	movs	r2, #1
 8007b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f003 0301 	and.w	r3, r3, #1
 8007b40:	2b01      	cmp	r3, #1
 8007b42:	d007      	beq.n	8007b54 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	681a      	ldr	r2, [r3, #0]
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f042 0201 	orr.w	r2, r2, #1
 8007b52:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	681a      	ldr	r2, [r3, #0]
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007b62:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	2221      	movs	r2, #33	; 0x21
 8007b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	2240      	movs	r2, #64	; 0x40
 8007b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	2200      	movs	r2, #0
 8007b78:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	6a3a      	ldr	r2, [r7, #32]
 8007b7e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007b84:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b8a:	b29a      	uxth	r2, r3
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	4a4d      	ldr	r2, [pc, #308]	; (8007cc8 <HAL_I2C_Mem_Write+0x1f0>)
 8007b94:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007b96:	88f8      	ldrh	r0, [r7, #6]
 8007b98:	893a      	ldrh	r2, [r7, #8]
 8007b9a:	8979      	ldrh	r1, [r7, #10]
 8007b9c:	697b      	ldr	r3, [r7, #20]
 8007b9e:	9301      	str	r3, [sp, #4]
 8007ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ba2:	9300      	str	r3, [sp, #0]
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	68f8      	ldr	r0, [r7, #12]
 8007ba8:	f001 fe9c 	bl	80098e4 <I2C_RequestMemoryWrite>
 8007bac:	4603      	mov	r3, r0
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d052      	beq.n	8007c58 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8007bb2:	2301      	movs	r3, #1
 8007bb4:	e081      	b.n	8007cba <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007bb6:	697a      	ldr	r2, [r7, #20]
 8007bb8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007bba:	68f8      	ldr	r0, [r7, #12]
 8007bbc:	f002 f98e 	bl	8009edc <I2C_WaitOnTXEFlagUntilTimeout>
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d00d      	beq.n	8007be2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bca:	2b04      	cmp	r3, #4
 8007bcc:	d107      	bne.n	8007bde <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	681a      	ldr	r2, [r3, #0]
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007bdc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007bde:	2301      	movs	r3, #1
 8007be0:	e06b      	b.n	8007cba <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007be6:	781a      	ldrb	r2, [r3, #0]
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bf2:	1c5a      	adds	r2, r3, #1
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bfc:	3b01      	subs	r3, #1
 8007bfe:	b29a      	uxth	r2, r3
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c08:	b29b      	uxth	r3, r3
 8007c0a:	3b01      	subs	r3, #1
 8007c0c:	b29a      	uxth	r2, r3
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	695b      	ldr	r3, [r3, #20]
 8007c18:	f003 0304 	and.w	r3, r3, #4
 8007c1c:	2b04      	cmp	r3, #4
 8007c1e:	d11b      	bne.n	8007c58 <HAL_I2C_Mem_Write+0x180>
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d017      	beq.n	8007c58 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c2c:	781a      	ldrb	r2, [r3, #0]
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c38:	1c5a      	adds	r2, r3, #1
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c42:	3b01      	subs	r3, #1
 8007c44:	b29a      	uxth	r2, r3
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c4e:	b29b      	uxth	r3, r3
 8007c50:	3b01      	subs	r3, #1
 8007c52:	b29a      	uxth	r2, r3
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d1aa      	bne.n	8007bb6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007c60:	697a      	ldr	r2, [r7, #20]
 8007c62:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c64:	68f8      	ldr	r0, [r7, #12]
 8007c66:	f002 f97a 	bl	8009f5e <I2C_WaitOnBTFFlagUntilTimeout>
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d00d      	beq.n	8007c8c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c74:	2b04      	cmp	r3, #4
 8007c76:	d107      	bne.n	8007c88 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	681a      	ldr	r2, [r3, #0]
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c86:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007c88:	2301      	movs	r3, #1
 8007c8a:	e016      	b.n	8007cba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	681a      	ldr	r2, [r3, #0]
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	2220      	movs	r2, #32
 8007ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	e000      	b.n	8007cba <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007cb8:	2302      	movs	r3, #2
  }
}
 8007cba:	4618      	mov	r0, r3
 8007cbc:	3718      	adds	r7, #24
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}
 8007cc2:	bf00      	nop
 8007cc4:	00100002 	.word	0x00100002
 8007cc8:	ffff0000 	.word	0xffff0000

08007ccc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b08c      	sub	sp, #48	; 0x30
 8007cd0:	af02      	add	r7, sp, #8
 8007cd2:	60f8      	str	r0, [r7, #12]
 8007cd4:	4608      	mov	r0, r1
 8007cd6:	4611      	mov	r1, r2
 8007cd8:	461a      	mov	r2, r3
 8007cda:	4603      	mov	r3, r0
 8007cdc:	817b      	strh	r3, [r7, #10]
 8007cde:	460b      	mov	r3, r1
 8007ce0:	813b      	strh	r3, [r7, #8]
 8007ce2:	4613      	mov	r3, r2
 8007ce4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007ce6:	f7fe fe79 	bl	80069dc <HAL_GetTick>
 8007cea:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007cf2:	b2db      	uxtb	r3, r3
 8007cf4:	2b20      	cmp	r3, #32
 8007cf6:	f040 8208 	bne.w	800810a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cfc:	9300      	str	r3, [sp, #0]
 8007cfe:	2319      	movs	r3, #25
 8007d00:	2201      	movs	r2, #1
 8007d02:	497b      	ldr	r1, [pc, #492]	; (8007ef0 <HAL_I2C_Mem_Read+0x224>)
 8007d04:	68f8      	ldr	r0, [r7, #12]
 8007d06:	f002 f813 	bl	8009d30 <I2C_WaitOnFlagUntilTimeout>
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d001      	beq.n	8007d14 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8007d10:	2302      	movs	r3, #2
 8007d12:	e1fb      	b.n	800810c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d1a:	2b01      	cmp	r3, #1
 8007d1c:	d101      	bne.n	8007d22 <HAL_I2C_Mem_Read+0x56>
 8007d1e:	2302      	movs	r3, #2
 8007d20:	e1f4      	b.n	800810c <HAL_I2C_Mem_Read+0x440>
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	2201      	movs	r2, #1
 8007d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f003 0301 	and.w	r3, r3, #1
 8007d34:	2b01      	cmp	r3, #1
 8007d36:	d007      	beq.n	8007d48 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	681a      	ldr	r2, [r3, #0]
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f042 0201 	orr.w	r2, r2, #1
 8007d46:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	681a      	ldr	r2, [r3, #0]
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007d56:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	2222      	movs	r2, #34	; 0x22
 8007d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	2240      	movs	r2, #64	; 0x40
 8007d64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d72:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007d78:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d7e:	b29a      	uxth	r2, r3
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	4a5b      	ldr	r2, [pc, #364]	; (8007ef4 <HAL_I2C_Mem_Read+0x228>)
 8007d88:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007d8a:	88f8      	ldrh	r0, [r7, #6]
 8007d8c:	893a      	ldrh	r2, [r7, #8]
 8007d8e:	8979      	ldrh	r1, [r7, #10]
 8007d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d92:	9301      	str	r3, [sp, #4]
 8007d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d96:	9300      	str	r3, [sp, #0]
 8007d98:	4603      	mov	r3, r0
 8007d9a:	68f8      	ldr	r0, [r7, #12]
 8007d9c:	f001 fe38 	bl	8009a10 <I2C_RequestMemoryRead>
 8007da0:	4603      	mov	r3, r0
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d001      	beq.n	8007daa <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8007da6:	2301      	movs	r3, #1
 8007da8:	e1b0      	b.n	800810c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d113      	bne.n	8007dda <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007db2:	2300      	movs	r3, #0
 8007db4:	623b      	str	r3, [r7, #32]
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	695b      	ldr	r3, [r3, #20]
 8007dbc:	623b      	str	r3, [r7, #32]
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	699b      	ldr	r3, [r3, #24]
 8007dc4:	623b      	str	r3, [r7, #32]
 8007dc6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	681a      	ldr	r2, [r3, #0]
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007dd6:	601a      	str	r2, [r3, #0]
 8007dd8:	e184      	b.n	80080e4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007dde:	2b01      	cmp	r3, #1
 8007de0:	d11b      	bne.n	8007e1a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	681a      	ldr	r2, [r3, #0]
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007df0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007df2:	2300      	movs	r3, #0
 8007df4:	61fb      	str	r3, [r7, #28]
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	695b      	ldr	r3, [r3, #20]
 8007dfc:	61fb      	str	r3, [r7, #28]
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	699b      	ldr	r3, [r3, #24]
 8007e04:	61fb      	str	r3, [r7, #28]
 8007e06:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	681a      	ldr	r2, [r3, #0]
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e16:	601a      	str	r2, [r3, #0]
 8007e18:	e164      	b.n	80080e4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e1e:	2b02      	cmp	r3, #2
 8007e20:	d11b      	bne.n	8007e5a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	681a      	ldr	r2, [r3, #0]
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e30:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	681a      	ldr	r2, [r3, #0]
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007e40:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e42:	2300      	movs	r3, #0
 8007e44:	61bb      	str	r3, [r7, #24]
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	695b      	ldr	r3, [r3, #20]
 8007e4c:	61bb      	str	r3, [r7, #24]
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	699b      	ldr	r3, [r3, #24]
 8007e54:	61bb      	str	r3, [r7, #24]
 8007e56:	69bb      	ldr	r3, [r7, #24]
 8007e58:	e144      	b.n	80080e4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	617b      	str	r3, [r7, #20]
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	695b      	ldr	r3, [r3, #20]
 8007e64:	617b      	str	r3, [r7, #20]
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	699b      	ldr	r3, [r3, #24]
 8007e6c:	617b      	str	r3, [r7, #20]
 8007e6e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007e70:	e138      	b.n	80080e4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e76:	2b03      	cmp	r3, #3
 8007e78:	f200 80f1 	bhi.w	800805e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e80:	2b01      	cmp	r3, #1
 8007e82:	d123      	bne.n	8007ecc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007e84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e86:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007e88:	68f8      	ldr	r0, [r7, #12]
 8007e8a:	f002 f8db 	bl	800a044 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007e8e:	4603      	mov	r3, r0
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d001      	beq.n	8007e98 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8007e94:	2301      	movs	r3, #1
 8007e96:	e139      	b.n	800810c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	691a      	ldr	r2, [r3, #16]
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ea2:	b2d2      	uxtb	r2, r2
 8007ea4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eaa:	1c5a      	adds	r2, r3, #1
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007eb4:	3b01      	subs	r3, #1
 8007eb6:	b29a      	uxth	r2, r3
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ec0:	b29b      	uxth	r3, r3
 8007ec2:	3b01      	subs	r3, #1
 8007ec4:	b29a      	uxth	r2, r3
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007eca:	e10b      	b.n	80080e4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ed0:	2b02      	cmp	r3, #2
 8007ed2:	d14e      	bne.n	8007f72 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ed6:	9300      	str	r3, [sp, #0]
 8007ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eda:	2200      	movs	r2, #0
 8007edc:	4906      	ldr	r1, [pc, #24]	; (8007ef8 <HAL_I2C_Mem_Read+0x22c>)
 8007ede:	68f8      	ldr	r0, [r7, #12]
 8007ee0:	f001 ff26 	bl	8009d30 <I2C_WaitOnFlagUntilTimeout>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d008      	beq.n	8007efc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8007eea:	2301      	movs	r3, #1
 8007eec:	e10e      	b.n	800810c <HAL_I2C_Mem_Read+0x440>
 8007eee:	bf00      	nop
 8007ef0:	00100002 	.word	0x00100002
 8007ef4:	ffff0000 	.word	0xffff0000
 8007ef8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	681a      	ldr	r2, [r3, #0]
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f0a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	691a      	ldr	r2, [r3, #16]
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f16:	b2d2      	uxtb	r2, r2
 8007f18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f1e:	1c5a      	adds	r2, r3, #1
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f28:	3b01      	subs	r3, #1
 8007f2a:	b29a      	uxth	r2, r3
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f34:	b29b      	uxth	r3, r3
 8007f36:	3b01      	subs	r3, #1
 8007f38:	b29a      	uxth	r2, r3
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	691a      	ldr	r2, [r3, #16]
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f48:	b2d2      	uxtb	r2, r2
 8007f4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f50:	1c5a      	adds	r2, r3, #1
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f5a:	3b01      	subs	r3, #1
 8007f5c:	b29a      	uxth	r2, r3
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f66:	b29b      	uxth	r3, r3
 8007f68:	3b01      	subs	r3, #1
 8007f6a:	b29a      	uxth	r2, r3
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007f70:	e0b8      	b.n	80080e4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f74:	9300      	str	r3, [sp, #0]
 8007f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f78:	2200      	movs	r2, #0
 8007f7a:	4966      	ldr	r1, [pc, #408]	; (8008114 <HAL_I2C_Mem_Read+0x448>)
 8007f7c:	68f8      	ldr	r0, [r7, #12]
 8007f7e:	f001 fed7 	bl	8009d30 <I2C_WaitOnFlagUntilTimeout>
 8007f82:	4603      	mov	r3, r0
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d001      	beq.n	8007f8c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8007f88:	2301      	movs	r3, #1
 8007f8a:	e0bf      	b.n	800810c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	681a      	ldr	r2, [r3, #0]
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f9a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	691a      	ldr	r2, [r3, #16]
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fa6:	b2d2      	uxtb	r2, r2
 8007fa8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fae:	1c5a      	adds	r2, r3, #1
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fb8:	3b01      	subs	r3, #1
 8007fba:	b29a      	uxth	r2, r3
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fc4:	b29b      	uxth	r3, r3
 8007fc6:	3b01      	subs	r3, #1
 8007fc8:	b29a      	uxth	r2, r3
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd0:	9300      	str	r3, [sp, #0]
 8007fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	494f      	ldr	r1, [pc, #316]	; (8008114 <HAL_I2C_Mem_Read+0x448>)
 8007fd8:	68f8      	ldr	r0, [r7, #12]
 8007fda:	f001 fea9 	bl	8009d30 <I2C_WaitOnFlagUntilTimeout>
 8007fde:	4603      	mov	r3, r0
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d001      	beq.n	8007fe8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	e091      	b.n	800810c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	681a      	ldr	r2, [r3, #0]
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ff6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	691a      	ldr	r2, [r3, #16]
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008002:	b2d2      	uxtb	r2, r2
 8008004:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800800a:	1c5a      	adds	r2, r3, #1
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008014:	3b01      	subs	r3, #1
 8008016:	b29a      	uxth	r2, r3
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008020:	b29b      	uxth	r3, r3
 8008022:	3b01      	subs	r3, #1
 8008024:	b29a      	uxth	r2, r3
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	691a      	ldr	r2, [r3, #16]
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008034:	b2d2      	uxtb	r2, r2
 8008036:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800803c:	1c5a      	adds	r2, r3, #1
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008046:	3b01      	subs	r3, #1
 8008048:	b29a      	uxth	r2, r3
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008052:	b29b      	uxth	r3, r3
 8008054:	3b01      	subs	r3, #1
 8008056:	b29a      	uxth	r2, r3
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800805c:	e042      	b.n	80080e4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800805e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008060:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008062:	68f8      	ldr	r0, [r7, #12]
 8008064:	f001 ffee 	bl	800a044 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008068:	4603      	mov	r3, r0
 800806a:	2b00      	cmp	r3, #0
 800806c:	d001      	beq.n	8008072 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800806e:	2301      	movs	r3, #1
 8008070:	e04c      	b.n	800810c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	691a      	ldr	r2, [r3, #16]
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800807c:	b2d2      	uxtb	r2, r2
 800807e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008084:	1c5a      	adds	r2, r3, #1
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800808e:	3b01      	subs	r3, #1
 8008090:	b29a      	uxth	r2, r3
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800809a:	b29b      	uxth	r3, r3
 800809c:	3b01      	subs	r3, #1
 800809e:	b29a      	uxth	r2, r3
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	695b      	ldr	r3, [r3, #20]
 80080aa:	f003 0304 	and.w	r3, r3, #4
 80080ae:	2b04      	cmp	r3, #4
 80080b0:	d118      	bne.n	80080e4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	691a      	ldr	r2, [r3, #16]
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080bc:	b2d2      	uxtb	r2, r2
 80080be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080c4:	1c5a      	adds	r2, r3, #1
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080ce:	3b01      	subs	r3, #1
 80080d0:	b29a      	uxth	r2, r3
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080da:	b29b      	uxth	r3, r3
 80080dc:	3b01      	subs	r3, #1
 80080de:	b29a      	uxth	r2, r3
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	f47f aec2 	bne.w	8007e72 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	2220      	movs	r2, #32
 80080f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	2200      	movs	r2, #0
 80080fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	2200      	movs	r2, #0
 8008102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008106:	2300      	movs	r3, #0
 8008108:	e000      	b.n	800810c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800810a:	2302      	movs	r3, #2
  }
}
 800810c:	4618      	mov	r0, r3
 800810e:	3728      	adds	r7, #40	; 0x28
 8008110:	46bd      	mov	sp, r7
 8008112:	bd80      	pop	{r7, pc}
 8008114:	00010004 	.word	0x00010004

08008118 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b088      	sub	sp, #32
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8008120:	2300      	movs	r3, #0
 8008122:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	685b      	ldr	r3, [r3, #4]
 800812a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008130:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008138:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008140:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8008142:	7bfb      	ldrb	r3, [r7, #15]
 8008144:	2b10      	cmp	r3, #16
 8008146:	d003      	beq.n	8008150 <HAL_I2C_EV_IRQHandler+0x38>
 8008148:	7bfb      	ldrb	r3, [r7, #15]
 800814a:	2b40      	cmp	r3, #64	; 0x40
 800814c:	f040 80c1 	bne.w	80082d2 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	699b      	ldr	r3, [r3, #24]
 8008156:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	695b      	ldr	r3, [r3, #20]
 800815e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8008160:	69fb      	ldr	r3, [r7, #28]
 8008162:	f003 0301 	and.w	r3, r3, #1
 8008166:	2b00      	cmp	r3, #0
 8008168:	d10d      	bne.n	8008186 <HAL_I2C_EV_IRQHandler+0x6e>
 800816a:	693b      	ldr	r3, [r7, #16]
 800816c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8008170:	d003      	beq.n	800817a <HAL_I2C_EV_IRQHandler+0x62>
 8008172:	693b      	ldr	r3, [r7, #16]
 8008174:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8008178:	d101      	bne.n	800817e <HAL_I2C_EV_IRQHandler+0x66>
 800817a:	2301      	movs	r3, #1
 800817c:	e000      	b.n	8008180 <HAL_I2C_EV_IRQHandler+0x68>
 800817e:	2300      	movs	r3, #0
 8008180:	2b01      	cmp	r3, #1
 8008182:	f000 8132 	beq.w	80083ea <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008186:	69fb      	ldr	r3, [r7, #28]
 8008188:	f003 0301 	and.w	r3, r3, #1
 800818c:	2b00      	cmp	r3, #0
 800818e:	d00c      	beq.n	80081aa <HAL_I2C_EV_IRQHandler+0x92>
 8008190:	697b      	ldr	r3, [r7, #20]
 8008192:	0a5b      	lsrs	r3, r3, #9
 8008194:	f003 0301 	and.w	r3, r3, #1
 8008198:	2b00      	cmp	r3, #0
 800819a:	d006      	beq.n	80081aa <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f001 ffd6 	bl	800a14e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f000 fd83 	bl	8008cae <I2C_Master_SB>
 80081a8:	e092      	b.n	80082d0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80081aa:	69fb      	ldr	r3, [r7, #28]
 80081ac:	08db      	lsrs	r3, r3, #3
 80081ae:	f003 0301 	and.w	r3, r3, #1
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d009      	beq.n	80081ca <HAL_I2C_EV_IRQHandler+0xb2>
 80081b6:	697b      	ldr	r3, [r7, #20]
 80081b8:	0a5b      	lsrs	r3, r3, #9
 80081ba:	f003 0301 	and.w	r3, r3, #1
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d003      	beq.n	80081ca <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f000 fdf9 	bl	8008dba <I2C_Master_ADD10>
 80081c8:	e082      	b.n	80082d0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80081ca:	69fb      	ldr	r3, [r7, #28]
 80081cc:	085b      	lsrs	r3, r3, #1
 80081ce:	f003 0301 	and.w	r3, r3, #1
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d009      	beq.n	80081ea <HAL_I2C_EV_IRQHandler+0xd2>
 80081d6:	697b      	ldr	r3, [r7, #20]
 80081d8:	0a5b      	lsrs	r3, r3, #9
 80081da:	f003 0301 	and.w	r3, r3, #1
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d003      	beq.n	80081ea <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f000 fe13 	bl	8008e0e <I2C_Master_ADDR>
 80081e8:	e072      	b.n	80082d0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80081ea:	69bb      	ldr	r3, [r7, #24]
 80081ec:	089b      	lsrs	r3, r3, #2
 80081ee:	f003 0301 	and.w	r3, r3, #1
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d03b      	beq.n	800826e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	685b      	ldr	r3, [r3, #4]
 80081fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008200:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008204:	f000 80f3 	beq.w	80083ee <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008208:	69fb      	ldr	r3, [r7, #28]
 800820a:	09db      	lsrs	r3, r3, #7
 800820c:	f003 0301 	and.w	r3, r3, #1
 8008210:	2b00      	cmp	r3, #0
 8008212:	d00f      	beq.n	8008234 <HAL_I2C_EV_IRQHandler+0x11c>
 8008214:	697b      	ldr	r3, [r7, #20]
 8008216:	0a9b      	lsrs	r3, r3, #10
 8008218:	f003 0301 	and.w	r3, r3, #1
 800821c:	2b00      	cmp	r3, #0
 800821e:	d009      	beq.n	8008234 <HAL_I2C_EV_IRQHandler+0x11c>
 8008220:	69fb      	ldr	r3, [r7, #28]
 8008222:	089b      	lsrs	r3, r3, #2
 8008224:	f003 0301 	and.w	r3, r3, #1
 8008228:	2b00      	cmp	r3, #0
 800822a:	d103      	bne.n	8008234 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800822c:	6878      	ldr	r0, [r7, #4]
 800822e:	f000 f9f3 	bl	8008618 <I2C_MasterTransmit_TXE>
 8008232:	e04d      	b.n	80082d0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008234:	69fb      	ldr	r3, [r7, #28]
 8008236:	089b      	lsrs	r3, r3, #2
 8008238:	f003 0301 	and.w	r3, r3, #1
 800823c:	2b00      	cmp	r3, #0
 800823e:	f000 80d6 	beq.w	80083ee <HAL_I2C_EV_IRQHandler+0x2d6>
 8008242:	697b      	ldr	r3, [r7, #20]
 8008244:	0a5b      	lsrs	r3, r3, #9
 8008246:	f003 0301 	and.w	r3, r3, #1
 800824a:	2b00      	cmp	r3, #0
 800824c:	f000 80cf 	beq.w	80083ee <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8008250:	7bbb      	ldrb	r3, [r7, #14]
 8008252:	2b21      	cmp	r3, #33	; 0x21
 8008254:	d103      	bne.n	800825e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f000 fa7a 	bl	8008750 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800825c:	e0c7      	b.n	80083ee <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800825e:	7bfb      	ldrb	r3, [r7, #15]
 8008260:	2b40      	cmp	r3, #64	; 0x40
 8008262:	f040 80c4 	bne.w	80083ee <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f000 fae8 	bl	800883c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800826c:	e0bf      	b.n	80083ee <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	685b      	ldr	r3, [r3, #4]
 8008274:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008278:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800827c:	f000 80b7 	beq.w	80083ee <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008280:	69fb      	ldr	r3, [r7, #28]
 8008282:	099b      	lsrs	r3, r3, #6
 8008284:	f003 0301 	and.w	r3, r3, #1
 8008288:	2b00      	cmp	r3, #0
 800828a:	d00f      	beq.n	80082ac <HAL_I2C_EV_IRQHandler+0x194>
 800828c:	697b      	ldr	r3, [r7, #20]
 800828e:	0a9b      	lsrs	r3, r3, #10
 8008290:	f003 0301 	and.w	r3, r3, #1
 8008294:	2b00      	cmp	r3, #0
 8008296:	d009      	beq.n	80082ac <HAL_I2C_EV_IRQHandler+0x194>
 8008298:	69fb      	ldr	r3, [r7, #28]
 800829a:	089b      	lsrs	r3, r3, #2
 800829c:	f003 0301 	and.w	r3, r3, #1
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d103      	bne.n	80082ac <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	f000 fb5d 	bl	8008964 <I2C_MasterReceive_RXNE>
 80082aa:	e011      	b.n	80082d0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80082ac:	69fb      	ldr	r3, [r7, #28]
 80082ae:	089b      	lsrs	r3, r3, #2
 80082b0:	f003 0301 	and.w	r3, r3, #1
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	f000 809a 	beq.w	80083ee <HAL_I2C_EV_IRQHandler+0x2d6>
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	0a5b      	lsrs	r3, r3, #9
 80082be:	f003 0301 	and.w	r3, r3, #1
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	f000 8093 	beq.w	80083ee <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f000 fc06 	bl	8008ada <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80082ce:	e08e      	b.n	80083ee <HAL_I2C_EV_IRQHandler+0x2d6>
 80082d0:	e08d      	b.n	80083ee <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d004      	beq.n	80082e4 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	695b      	ldr	r3, [r3, #20]
 80082e0:	61fb      	str	r3, [r7, #28]
 80082e2:	e007      	b.n	80082f4 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	699b      	ldr	r3, [r3, #24]
 80082ea:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	695b      	ldr	r3, [r3, #20]
 80082f2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80082f4:	69fb      	ldr	r3, [r7, #28]
 80082f6:	085b      	lsrs	r3, r3, #1
 80082f8:	f003 0301 	and.w	r3, r3, #1
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d012      	beq.n	8008326 <HAL_I2C_EV_IRQHandler+0x20e>
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	0a5b      	lsrs	r3, r3, #9
 8008304:	f003 0301 	and.w	r3, r3, #1
 8008308:	2b00      	cmp	r3, #0
 800830a:	d00c      	beq.n	8008326 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008310:	2b00      	cmp	r3, #0
 8008312:	d003      	beq.n	800831c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	699b      	ldr	r3, [r3, #24]
 800831a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800831c:	69b9      	ldr	r1, [r7, #24]
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f000 ffc4 	bl	80092ac <I2C_Slave_ADDR>
 8008324:	e066      	b.n	80083f4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008326:	69fb      	ldr	r3, [r7, #28]
 8008328:	091b      	lsrs	r3, r3, #4
 800832a:	f003 0301 	and.w	r3, r3, #1
 800832e:	2b00      	cmp	r3, #0
 8008330:	d009      	beq.n	8008346 <HAL_I2C_EV_IRQHandler+0x22e>
 8008332:	697b      	ldr	r3, [r7, #20]
 8008334:	0a5b      	lsrs	r3, r3, #9
 8008336:	f003 0301 	and.w	r3, r3, #1
 800833a:	2b00      	cmp	r3, #0
 800833c:	d003      	beq.n	8008346 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	f000 fffe 	bl	8009340 <I2C_Slave_STOPF>
 8008344:	e056      	b.n	80083f4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008346:	7bbb      	ldrb	r3, [r7, #14]
 8008348:	2b21      	cmp	r3, #33	; 0x21
 800834a:	d002      	beq.n	8008352 <HAL_I2C_EV_IRQHandler+0x23a>
 800834c:	7bbb      	ldrb	r3, [r7, #14]
 800834e:	2b29      	cmp	r3, #41	; 0x29
 8008350:	d125      	bne.n	800839e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008352:	69fb      	ldr	r3, [r7, #28]
 8008354:	09db      	lsrs	r3, r3, #7
 8008356:	f003 0301 	and.w	r3, r3, #1
 800835a:	2b00      	cmp	r3, #0
 800835c:	d00f      	beq.n	800837e <HAL_I2C_EV_IRQHandler+0x266>
 800835e:	697b      	ldr	r3, [r7, #20]
 8008360:	0a9b      	lsrs	r3, r3, #10
 8008362:	f003 0301 	and.w	r3, r3, #1
 8008366:	2b00      	cmp	r3, #0
 8008368:	d009      	beq.n	800837e <HAL_I2C_EV_IRQHandler+0x266>
 800836a:	69fb      	ldr	r3, [r7, #28]
 800836c:	089b      	lsrs	r3, r3, #2
 800836e:	f003 0301 	and.w	r3, r3, #1
 8008372:	2b00      	cmp	r3, #0
 8008374:	d103      	bne.n	800837e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	f000 feda 	bl	8009130 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800837c:	e039      	b.n	80083f2 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800837e:	69fb      	ldr	r3, [r7, #28]
 8008380:	089b      	lsrs	r3, r3, #2
 8008382:	f003 0301 	and.w	r3, r3, #1
 8008386:	2b00      	cmp	r3, #0
 8008388:	d033      	beq.n	80083f2 <HAL_I2C_EV_IRQHandler+0x2da>
 800838a:	697b      	ldr	r3, [r7, #20]
 800838c:	0a5b      	lsrs	r3, r3, #9
 800838e:	f003 0301 	and.w	r3, r3, #1
 8008392:	2b00      	cmp	r3, #0
 8008394:	d02d      	beq.n	80083f2 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f000 ff07 	bl	80091aa <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800839c:	e029      	b.n	80083f2 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800839e:	69fb      	ldr	r3, [r7, #28]
 80083a0:	099b      	lsrs	r3, r3, #6
 80083a2:	f003 0301 	and.w	r3, r3, #1
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d00f      	beq.n	80083ca <HAL_I2C_EV_IRQHandler+0x2b2>
 80083aa:	697b      	ldr	r3, [r7, #20]
 80083ac:	0a9b      	lsrs	r3, r3, #10
 80083ae:	f003 0301 	and.w	r3, r3, #1
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d009      	beq.n	80083ca <HAL_I2C_EV_IRQHandler+0x2b2>
 80083b6:	69fb      	ldr	r3, [r7, #28]
 80083b8:	089b      	lsrs	r3, r3, #2
 80083ba:	f003 0301 	and.w	r3, r3, #1
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d103      	bne.n	80083ca <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	f000 ff12 	bl	80091ec <I2C_SlaveReceive_RXNE>
 80083c8:	e014      	b.n	80083f4 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80083ca:	69fb      	ldr	r3, [r7, #28]
 80083cc:	089b      	lsrs	r3, r3, #2
 80083ce:	f003 0301 	and.w	r3, r3, #1
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d00e      	beq.n	80083f4 <HAL_I2C_EV_IRQHandler+0x2dc>
 80083d6:	697b      	ldr	r3, [r7, #20]
 80083d8:	0a5b      	lsrs	r3, r3, #9
 80083da:	f003 0301 	and.w	r3, r3, #1
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d008      	beq.n	80083f4 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f000 ff40 	bl	8009268 <I2C_SlaveReceive_BTF>
 80083e8:	e004      	b.n	80083f4 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80083ea:	bf00      	nop
 80083ec:	e002      	b.n	80083f4 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80083ee:	bf00      	nop
 80083f0:	e000      	b.n	80083f4 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80083f2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80083f4:	3720      	adds	r7, #32
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bd80      	pop	{r7, pc}

080083fa <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80083fa:	b580      	push	{r7, lr}
 80083fc:	b08a      	sub	sp, #40	; 0x28
 80083fe:	af00      	add	r7, sp, #0
 8008400:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	695b      	ldr	r3, [r3, #20]
 8008408:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	685b      	ldr	r3, [r3, #4]
 8008410:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8008412:	2300      	movs	r3, #0
 8008414:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800841c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800841e:	6a3b      	ldr	r3, [r7, #32]
 8008420:	0a1b      	lsrs	r3, r3, #8
 8008422:	f003 0301 	and.w	r3, r3, #1
 8008426:	2b00      	cmp	r3, #0
 8008428:	d00e      	beq.n	8008448 <HAL_I2C_ER_IRQHandler+0x4e>
 800842a:	69fb      	ldr	r3, [r7, #28]
 800842c:	0a1b      	lsrs	r3, r3, #8
 800842e:	f003 0301 	and.w	r3, r3, #1
 8008432:	2b00      	cmp	r3, #0
 8008434:	d008      	beq.n	8008448 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8008436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008438:	f043 0301 	orr.w	r3, r3, #1
 800843c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008446:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8008448:	6a3b      	ldr	r3, [r7, #32]
 800844a:	0a5b      	lsrs	r3, r3, #9
 800844c:	f003 0301 	and.w	r3, r3, #1
 8008450:	2b00      	cmp	r3, #0
 8008452:	d00e      	beq.n	8008472 <HAL_I2C_ER_IRQHandler+0x78>
 8008454:	69fb      	ldr	r3, [r7, #28]
 8008456:	0a1b      	lsrs	r3, r3, #8
 8008458:	f003 0301 	and.w	r3, r3, #1
 800845c:	2b00      	cmp	r3, #0
 800845e:	d008      	beq.n	8008472 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8008460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008462:	f043 0302 	orr.w	r3, r3, #2
 8008466:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8008470:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8008472:	6a3b      	ldr	r3, [r7, #32]
 8008474:	0a9b      	lsrs	r3, r3, #10
 8008476:	f003 0301 	and.w	r3, r3, #1
 800847a:	2b00      	cmp	r3, #0
 800847c:	d03f      	beq.n	80084fe <HAL_I2C_ER_IRQHandler+0x104>
 800847e:	69fb      	ldr	r3, [r7, #28]
 8008480:	0a1b      	lsrs	r3, r3, #8
 8008482:	f003 0301 	and.w	r3, r3, #1
 8008486:	2b00      	cmp	r3, #0
 8008488:	d039      	beq.n	80084fe <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800848a:	7efb      	ldrb	r3, [r7, #27]
 800848c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008492:	b29b      	uxth	r3, r3
 8008494:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800849c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084a2:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80084a4:	7ebb      	ldrb	r3, [r7, #26]
 80084a6:	2b20      	cmp	r3, #32
 80084a8:	d112      	bne.n	80084d0 <HAL_I2C_ER_IRQHandler+0xd6>
 80084aa:	697b      	ldr	r3, [r7, #20]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d10f      	bne.n	80084d0 <HAL_I2C_ER_IRQHandler+0xd6>
 80084b0:	7cfb      	ldrb	r3, [r7, #19]
 80084b2:	2b21      	cmp	r3, #33	; 0x21
 80084b4:	d008      	beq.n	80084c8 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80084b6:	7cfb      	ldrb	r3, [r7, #19]
 80084b8:	2b29      	cmp	r3, #41	; 0x29
 80084ba:	d005      	beq.n	80084c8 <HAL_I2C_ER_IRQHandler+0xce>
 80084bc:	7cfb      	ldrb	r3, [r7, #19]
 80084be:	2b28      	cmp	r3, #40	; 0x28
 80084c0:	d106      	bne.n	80084d0 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	2b21      	cmp	r3, #33	; 0x21
 80084c6:	d103      	bne.n	80084d0 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	f001 f869 	bl	80095a0 <I2C_Slave_AF>
 80084ce:	e016      	b.n	80084fe <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80084d8:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80084da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084dc:	f043 0304 	orr.w	r3, r3, #4
 80084e0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80084e2:	7efb      	ldrb	r3, [r7, #27]
 80084e4:	2b10      	cmp	r3, #16
 80084e6:	d002      	beq.n	80084ee <HAL_I2C_ER_IRQHandler+0xf4>
 80084e8:	7efb      	ldrb	r3, [r7, #27]
 80084ea:	2b40      	cmp	r3, #64	; 0x40
 80084ec:	d107      	bne.n	80084fe <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	681a      	ldr	r2, [r3, #0]
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80084fc:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80084fe:	6a3b      	ldr	r3, [r7, #32]
 8008500:	0adb      	lsrs	r3, r3, #11
 8008502:	f003 0301 	and.w	r3, r3, #1
 8008506:	2b00      	cmp	r3, #0
 8008508:	d00e      	beq.n	8008528 <HAL_I2C_ER_IRQHandler+0x12e>
 800850a:	69fb      	ldr	r3, [r7, #28]
 800850c:	0a1b      	lsrs	r3, r3, #8
 800850e:	f003 0301 	and.w	r3, r3, #1
 8008512:	2b00      	cmp	r3, #0
 8008514:	d008      	beq.n	8008528 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8008516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008518:	f043 0308 	orr.w	r3, r3, #8
 800851c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8008526:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8008528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800852a:	2b00      	cmp	r3, #0
 800852c:	d008      	beq.n	8008540 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008534:	431a      	orrs	r2, r3
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	f001 f8a0 	bl	8009680 <I2C_ITError>
  }
}
 8008540:	bf00      	nop
 8008542:	3728      	adds	r7, #40	; 0x28
 8008544:	46bd      	mov	sp, r7
 8008546:	bd80      	pop	{r7, pc}

08008548 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008548:	b480      	push	{r7}
 800854a:	b083      	sub	sp, #12
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8008550:	bf00      	nop
 8008552:	370c      	adds	r7, #12
 8008554:	46bd      	mov	sp, r7
 8008556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855a:	4770      	bx	lr

0800855c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800855c:	b480      	push	{r7}
 800855e:	b083      	sub	sp, #12
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8008564:	bf00      	nop
 8008566:	370c      	adds	r7, #12
 8008568:	46bd      	mov	sp, r7
 800856a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856e:	4770      	bx	lr

08008570 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008570:	b480      	push	{r7}
 8008572:	b083      	sub	sp, #12
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8008578:	bf00      	nop
 800857a:	370c      	adds	r7, #12
 800857c:	46bd      	mov	sp, r7
 800857e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008582:	4770      	bx	lr

08008584 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008584:	b480      	push	{r7}
 8008586:	b083      	sub	sp, #12
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800858c:	bf00      	nop
 800858e:	370c      	adds	r7, #12
 8008590:	46bd      	mov	sp, r7
 8008592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008596:	4770      	bx	lr

08008598 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8008598:	b480      	push	{r7}
 800859a:	b083      	sub	sp, #12
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
 80085a0:	460b      	mov	r3, r1
 80085a2:	70fb      	strb	r3, [r7, #3]
 80085a4:	4613      	mov	r3, r2
 80085a6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80085a8:	bf00      	nop
 80085aa:	370c      	adds	r7, #12
 80085ac:	46bd      	mov	sp, r7
 80085ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b2:	4770      	bx	lr

080085b4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80085b4:	b480      	push	{r7}
 80085b6:	b083      	sub	sp, #12
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80085bc:	bf00      	nop
 80085be:	370c      	adds	r7, #12
 80085c0:	46bd      	mov	sp, r7
 80085c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c6:	4770      	bx	lr

080085c8 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80085c8:	b480      	push	{r7}
 80085ca:	b083      	sub	sp, #12
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80085d0:	bf00      	nop
 80085d2:	370c      	adds	r7, #12
 80085d4:	46bd      	mov	sp, r7
 80085d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085da:	4770      	bx	lr

080085dc <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80085dc:	b480      	push	{r7}
 80085de:	b083      	sub	sp, #12
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80085e4:	bf00      	nop
 80085e6:	370c      	adds	r7, #12
 80085e8:	46bd      	mov	sp, r7
 80085ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ee:	4770      	bx	lr

080085f0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80085f0:	b480      	push	{r7}
 80085f2:	b083      	sub	sp, #12
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80085f8:	bf00      	nop
 80085fa:	370c      	adds	r7, #12
 80085fc:	46bd      	mov	sp, r7
 80085fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008602:	4770      	bx	lr

08008604 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008604:	b480      	push	{r7}
 8008606:	b083      	sub	sp, #12
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800860c:	bf00      	nop
 800860e:	370c      	adds	r7, #12
 8008610:	46bd      	mov	sp, r7
 8008612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008616:	4770      	bx	lr

08008618 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b084      	sub	sp, #16
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008626:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800862e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008634:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800863a:	2b00      	cmp	r3, #0
 800863c:	d150      	bne.n	80086e0 <I2C_MasterTransmit_TXE+0xc8>
 800863e:	7bfb      	ldrb	r3, [r7, #15]
 8008640:	2b21      	cmp	r3, #33	; 0x21
 8008642:	d14d      	bne.n	80086e0 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	2b08      	cmp	r3, #8
 8008648:	d01d      	beq.n	8008686 <I2C_MasterTransmit_TXE+0x6e>
 800864a:	68bb      	ldr	r3, [r7, #8]
 800864c:	2b20      	cmp	r3, #32
 800864e:	d01a      	beq.n	8008686 <I2C_MasterTransmit_TXE+0x6e>
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008656:	d016      	beq.n	8008686 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	685a      	ldr	r2, [r3, #4]
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008666:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2211      	movs	r2, #17
 800866c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2200      	movs	r2, #0
 8008672:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2220      	movs	r2, #32
 800867a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f7ff ff62 	bl	8008548 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008684:	e060      	b.n	8008748 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	685a      	ldr	r2, [r3, #4]
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008694:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	681a      	ldr	r2, [r3, #0]
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80086a4:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2200      	movs	r2, #0
 80086aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2220      	movs	r2, #32
 80086b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80086ba:	b2db      	uxtb	r3, r3
 80086bc:	2b40      	cmp	r3, #64	; 0x40
 80086be:	d107      	bne.n	80086d0 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2200      	movs	r2, #0
 80086c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	f7ff ff7d 	bl	80085c8 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80086ce:	e03b      	b.n	8008748 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2200      	movs	r2, #0
 80086d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80086d8:	6878      	ldr	r0, [r7, #4]
 80086da:	f7ff ff35 	bl	8008548 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80086de:	e033      	b.n	8008748 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80086e0:	7bfb      	ldrb	r3, [r7, #15]
 80086e2:	2b21      	cmp	r3, #33	; 0x21
 80086e4:	d005      	beq.n	80086f2 <I2C_MasterTransmit_TXE+0xda>
 80086e6:	7bbb      	ldrb	r3, [r7, #14]
 80086e8:	2b40      	cmp	r3, #64	; 0x40
 80086ea:	d12d      	bne.n	8008748 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80086ec:	7bfb      	ldrb	r3, [r7, #15]
 80086ee:	2b22      	cmp	r3, #34	; 0x22
 80086f0:	d12a      	bne.n	8008748 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086f6:	b29b      	uxth	r3, r3
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d108      	bne.n	800870e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	685a      	ldr	r2, [r3, #4]
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800870a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800870c:	e01c      	b.n	8008748 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008714:	b2db      	uxtb	r3, r3
 8008716:	2b40      	cmp	r3, #64	; 0x40
 8008718:	d103      	bne.n	8008722 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	f000 f88e 	bl	800883c <I2C_MemoryTransmit_TXE_BTF>
}
 8008720:	e012      	b.n	8008748 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008726:	781a      	ldrb	r2, [r3, #0]
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008732:	1c5a      	adds	r2, r3, #1
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800873c:	b29b      	uxth	r3, r3
 800873e:	3b01      	subs	r3, #1
 8008740:	b29a      	uxth	r2, r3
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8008746:	e7ff      	b.n	8008748 <I2C_MasterTransmit_TXE+0x130>
 8008748:	bf00      	nop
 800874a:	3710      	adds	r7, #16
 800874c:	46bd      	mov	sp, r7
 800874e:	bd80      	pop	{r7, pc}

08008750 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b084      	sub	sp, #16
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800875c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008764:	b2db      	uxtb	r3, r3
 8008766:	2b21      	cmp	r3, #33	; 0x21
 8008768:	d164      	bne.n	8008834 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800876e:	b29b      	uxth	r3, r3
 8008770:	2b00      	cmp	r3, #0
 8008772:	d012      	beq.n	800879a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008778:	781a      	ldrb	r2, [r3, #0]
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008784:	1c5a      	adds	r2, r3, #1
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800878e:	b29b      	uxth	r3, r3
 8008790:	3b01      	subs	r3, #1
 8008792:	b29a      	uxth	r2, r3
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8008798:	e04c      	b.n	8008834 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	2b08      	cmp	r3, #8
 800879e:	d01d      	beq.n	80087dc <I2C_MasterTransmit_BTF+0x8c>
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	2b20      	cmp	r3, #32
 80087a4:	d01a      	beq.n	80087dc <I2C_MasterTransmit_BTF+0x8c>
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80087ac:	d016      	beq.n	80087dc <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	685a      	ldr	r2, [r3, #4]
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80087bc:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2211      	movs	r2, #17
 80087c2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2200      	movs	r2, #0
 80087c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2220      	movs	r2, #32
 80087d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80087d4:	6878      	ldr	r0, [r7, #4]
 80087d6:	f7ff feb7 	bl	8008548 <HAL_I2C_MasterTxCpltCallback>
}
 80087da:	e02b      	b.n	8008834 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	685a      	ldr	r2, [r3, #4]
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80087ea:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	681a      	ldr	r2, [r3, #0]
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80087fa:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2200      	movs	r2, #0
 8008800:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2220      	movs	r2, #32
 8008806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008810:	b2db      	uxtb	r3, r3
 8008812:	2b40      	cmp	r3, #64	; 0x40
 8008814:	d107      	bne.n	8008826 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2200      	movs	r2, #0
 800881a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800881e:	6878      	ldr	r0, [r7, #4]
 8008820:	f7ff fed2 	bl	80085c8 <HAL_I2C_MemTxCpltCallback>
}
 8008824:	e006      	b.n	8008834 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2200      	movs	r2, #0
 800882a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	f7ff fe8a 	bl	8008548 <HAL_I2C_MasterTxCpltCallback>
}
 8008834:	bf00      	nop
 8008836:	3710      	adds	r7, #16
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}

0800883c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b084      	sub	sp, #16
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800884a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008850:	2b00      	cmp	r3, #0
 8008852:	d11d      	bne.n	8008890 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008858:	2b01      	cmp	r3, #1
 800885a:	d10b      	bne.n	8008874 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008860:	b2da      	uxtb	r2, r3
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800886c:	1c9a      	adds	r2, r3, #2
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8008872:	e073      	b.n	800895c <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008878:	b29b      	uxth	r3, r3
 800887a:	121b      	asrs	r3, r3, #8
 800887c:	b2da      	uxtb	r2, r3
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008888:	1c5a      	adds	r2, r3, #1
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800888e:	e065      	b.n	800895c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008894:	2b01      	cmp	r3, #1
 8008896:	d10b      	bne.n	80088b0 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800889c:	b2da      	uxtb	r2, r3
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088a8:	1c5a      	adds	r2, r3, #1
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	651a      	str	r2, [r3, #80]	; 0x50
}
 80088ae:	e055      	b.n	800895c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088b4:	2b02      	cmp	r3, #2
 80088b6:	d151      	bne.n	800895c <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80088b8:	7bfb      	ldrb	r3, [r7, #15]
 80088ba:	2b22      	cmp	r3, #34	; 0x22
 80088bc:	d10d      	bne.n	80088da <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	681a      	ldr	r2, [r3, #0]
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80088cc:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088d2:	1c5a      	adds	r2, r3, #1
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80088d8:	e040      	b.n	800895c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088de:	b29b      	uxth	r3, r3
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d015      	beq.n	8008910 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80088e4:	7bfb      	ldrb	r3, [r7, #15]
 80088e6:	2b21      	cmp	r3, #33	; 0x21
 80088e8:	d112      	bne.n	8008910 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ee:	781a      	ldrb	r2, [r3, #0]
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088fa:	1c5a      	adds	r2, r3, #1
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008904:	b29b      	uxth	r3, r3
 8008906:	3b01      	subs	r3, #1
 8008908:	b29a      	uxth	r2, r3
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800890e:	e025      	b.n	800895c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008914:	b29b      	uxth	r3, r3
 8008916:	2b00      	cmp	r3, #0
 8008918:	d120      	bne.n	800895c <I2C_MemoryTransmit_TXE_BTF+0x120>
 800891a:	7bfb      	ldrb	r3, [r7, #15]
 800891c:	2b21      	cmp	r3, #33	; 0x21
 800891e:	d11d      	bne.n	800895c <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	685a      	ldr	r2, [r3, #4]
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800892e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	681a      	ldr	r2, [r3, #0]
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800893e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2200      	movs	r2, #0
 8008944:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2220      	movs	r2, #32
 800894a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2200      	movs	r2, #0
 8008952:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f7ff fe36 	bl	80085c8 <HAL_I2C_MemTxCpltCallback>
}
 800895c:	bf00      	nop
 800895e:	3710      	adds	r7, #16
 8008960:	46bd      	mov	sp, r7
 8008962:	bd80      	pop	{r7, pc}

08008964 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b084      	sub	sp, #16
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008972:	b2db      	uxtb	r3, r3
 8008974:	2b22      	cmp	r3, #34	; 0x22
 8008976:	f040 80ac 	bne.w	8008ad2 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800897e:	b29b      	uxth	r3, r3
 8008980:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	2b03      	cmp	r3, #3
 8008986:	d921      	bls.n	80089cc <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	691a      	ldr	r2, [r3, #16]
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008992:	b2d2      	uxtb	r2, r2
 8008994:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800899a:	1c5a      	adds	r2, r3, #1
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089a4:	b29b      	uxth	r3, r3
 80089a6:	3b01      	subs	r3, #1
 80089a8:	b29a      	uxth	r2, r3
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089b2:	b29b      	uxth	r3, r3
 80089b4:	2b03      	cmp	r3, #3
 80089b6:	f040 808c 	bne.w	8008ad2 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	685a      	ldr	r2, [r3, #4]
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80089c8:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80089ca:	e082      	b.n	8008ad2 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089d0:	2b02      	cmp	r3, #2
 80089d2:	d075      	beq.n	8008ac0 <I2C_MasterReceive_RXNE+0x15c>
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	2b01      	cmp	r3, #1
 80089d8:	d002      	beq.n	80089e0 <I2C_MasterReceive_RXNE+0x7c>
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d16f      	bne.n	8008ac0 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	f001 fafd 	bl	8009fe0 <I2C_WaitOnSTOPRequestThroughIT>
 80089e6:	4603      	mov	r3, r0
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d142      	bne.n	8008a72 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	681a      	ldr	r2, [r3, #0]
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80089fa:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	685a      	ldr	r2, [r3, #4]
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008a0a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	691a      	ldr	r2, [r3, #16]
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a16:	b2d2      	uxtb	r2, r2
 8008a18:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a1e:	1c5a      	adds	r2, r3, #1
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a28:	b29b      	uxth	r3, r3
 8008a2a:	3b01      	subs	r3, #1
 8008a2c:	b29a      	uxth	r2, r3
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2220      	movs	r2, #32
 8008a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008a40:	b2db      	uxtb	r3, r3
 8008a42:	2b40      	cmp	r3, #64	; 0x40
 8008a44:	d10a      	bne.n	8008a5c <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2200      	movs	r2, #0
 8008a4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2200      	movs	r2, #0
 8008a52:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	f7ff fdc1 	bl	80085dc <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8008a5a:	e03a      	b.n	8008ad2 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2200      	movs	r2, #0
 8008a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2212      	movs	r2, #18
 8008a68:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f7ff fd76 	bl	800855c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8008a70:	e02f      	b.n	8008ad2 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	685a      	ldr	r2, [r3, #4]
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008a80:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	691a      	ldr	r2, [r3, #16]
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a8c:	b2d2      	uxtb	r2, r2
 8008a8e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a94:	1c5a      	adds	r2, r3, #1
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a9e:	b29b      	uxth	r3, r3
 8008aa0:	3b01      	subs	r3, #1
 8008aa2:	b29a      	uxth	r2, r3
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2220      	movs	r2, #32
 8008aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8008ab8:	6878      	ldr	r0, [r7, #4]
 8008aba:	f7ff fd99 	bl	80085f0 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8008abe:	e008      	b.n	8008ad2 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	685a      	ldr	r2, [r3, #4]
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008ace:	605a      	str	r2, [r3, #4]
}
 8008ad0:	e7ff      	b.n	8008ad2 <I2C_MasterReceive_RXNE+0x16e>
 8008ad2:	bf00      	nop
 8008ad4:	3710      	adds	r7, #16
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}

08008ada <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8008ada:	b580      	push	{r7, lr}
 8008adc:	b084      	sub	sp, #16
 8008ade:	af00      	add	r7, sp, #0
 8008ae0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ae6:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008aec:	b29b      	uxth	r3, r3
 8008aee:	2b04      	cmp	r3, #4
 8008af0:	d11b      	bne.n	8008b2a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	685a      	ldr	r2, [r3, #4]
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008b00:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	691a      	ldr	r2, [r3, #16]
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b0c:	b2d2      	uxtb	r2, r2
 8008b0e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b14:	1c5a      	adds	r2, r3, #1
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b1e:	b29b      	uxth	r3, r3
 8008b20:	3b01      	subs	r3, #1
 8008b22:	b29a      	uxth	r2, r3
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8008b28:	e0bd      	b.n	8008ca6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b2e:	b29b      	uxth	r3, r3
 8008b30:	2b03      	cmp	r3, #3
 8008b32:	d129      	bne.n	8008b88 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	685a      	ldr	r2, [r3, #4]
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008b42:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	2b04      	cmp	r3, #4
 8008b48:	d00a      	beq.n	8008b60 <I2C_MasterReceive_BTF+0x86>
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	2b02      	cmp	r3, #2
 8008b4e:	d007      	beq.n	8008b60 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	681a      	ldr	r2, [r3, #0]
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008b5e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	691a      	ldr	r2, [r3, #16]
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b6a:	b2d2      	uxtb	r2, r2
 8008b6c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b72:	1c5a      	adds	r2, r3, #1
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b7c:	b29b      	uxth	r3, r3
 8008b7e:	3b01      	subs	r3, #1
 8008b80:	b29a      	uxth	r2, r3
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8008b86:	e08e      	b.n	8008ca6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b8c:	b29b      	uxth	r3, r3
 8008b8e:	2b02      	cmp	r3, #2
 8008b90:	d176      	bne.n	8008c80 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	2b01      	cmp	r3, #1
 8008b96:	d002      	beq.n	8008b9e <I2C_MasterReceive_BTF+0xc4>
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	2b10      	cmp	r3, #16
 8008b9c:	d108      	bne.n	8008bb0 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	681a      	ldr	r2, [r3, #0]
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008bac:	601a      	str	r2, [r3, #0]
 8008bae:	e019      	b.n	8008be4 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	2b04      	cmp	r3, #4
 8008bb4:	d002      	beq.n	8008bbc <I2C_MasterReceive_BTF+0xe2>
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	2b02      	cmp	r3, #2
 8008bba:	d108      	bne.n	8008bce <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	681a      	ldr	r2, [r3, #0]
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008bca:	601a      	str	r2, [r3, #0]
 8008bcc:	e00a      	b.n	8008be4 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	2b10      	cmp	r3, #16
 8008bd2:	d007      	beq.n	8008be4 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	681a      	ldr	r2, [r3, #0]
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008be2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	691a      	ldr	r2, [r3, #16]
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bee:	b2d2      	uxtb	r2, r2
 8008bf0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bf6:	1c5a      	adds	r2, r3, #1
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c00:	b29b      	uxth	r3, r3
 8008c02:	3b01      	subs	r3, #1
 8008c04:	b29a      	uxth	r2, r3
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	691a      	ldr	r2, [r3, #16]
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c14:	b2d2      	uxtb	r2, r2
 8008c16:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c1c:	1c5a      	adds	r2, r3, #1
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c26:	b29b      	uxth	r3, r3
 8008c28:	3b01      	subs	r3, #1
 8008c2a:	b29a      	uxth	r2, r3
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	685a      	ldr	r2, [r3, #4]
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8008c3e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2220      	movs	r2, #32
 8008c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008c4e:	b2db      	uxtb	r3, r3
 8008c50:	2b40      	cmp	r3, #64	; 0x40
 8008c52:	d10a      	bne.n	8008c6a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2200      	movs	r2, #0
 8008c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2200      	movs	r2, #0
 8008c60:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	f7ff fcba 	bl	80085dc <HAL_I2C_MemRxCpltCallback>
}
 8008c68:	e01d      	b.n	8008ca6 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2212      	movs	r2, #18
 8008c76:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f7ff fc6f 	bl	800855c <HAL_I2C_MasterRxCpltCallback>
}
 8008c7e:	e012      	b.n	8008ca6 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	691a      	ldr	r2, [r3, #16]
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c8a:	b2d2      	uxtb	r2, r2
 8008c8c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c92:	1c5a      	adds	r2, r3, #1
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c9c:	b29b      	uxth	r3, r3
 8008c9e:	3b01      	subs	r3, #1
 8008ca0:	b29a      	uxth	r2, r3
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8008ca6:	bf00      	nop
 8008ca8:	3710      	adds	r7, #16
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bd80      	pop	{r7, pc}

08008cae <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8008cae:	b480      	push	{r7}
 8008cb0:	b083      	sub	sp, #12
 8008cb2:	af00      	add	r7, sp, #0
 8008cb4:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008cbc:	b2db      	uxtb	r3, r3
 8008cbe:	2b40      	cmp	r3, #64	; 0x40
 8008cc0:	d117      	bne.n	8008cf2 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d109      	bne.n	8008cde <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cce:	b2db      	uxtb	r3, r3
 8008cd0:	461a      	mov	r2, r3
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008cda:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8008cdc:	e067      	b.n	8008dae <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ce2:	b2db      	uxtb	r3, r3
 8008ce4:	f043 0301 	orr.w	r3, r3, #1
 8008ce8:	b2da      	uxtb	r2, r3
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	611a      	str	r2, [r3, #16]
}
 8008cf0:	e05d      	b.n	8008dae <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	691b      	ldr	r3, [r3, #16]
 8008cf6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008cfa:	d133      	bne.n	8008d64 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d02:	b2db      	uxtb	r3, r3
 8008d04:	2b21      	cmp	r3, #33	; 0x21
 8008d06:	d109      	bne.n	8008d1c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d0c:	b2db      	uxtb	r3, r3
 8008d0e:	461a      	mov	r2, r3
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008d18:	611a      	str	r2, [r3, #16]
 8008d1a:	e008      	b.n	8008d2e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d20:	b2db      	uxtb	r3, r3
 8008d22:	f043 0301 	orr.w	r3, r3, #1
 8008d26:	b2da      	uxtb	r2, r3
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d004      	beq.n	8008d40 <I2C_Master_SB+0x92>
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d108      	bne.n	8008d52 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d032      	beq.n	8008dae <I2C_Master_SB+0x100>
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d02d      	beq.n	8008dae <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	685a      	ldr	r2, [r3, #4]
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008d60:	605a      	str	r2, [r3, #4]
}
 8008d62:	e024      	b.n	8008dae <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d10e      	bne.n	8008d8a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d70:	b29b      	uxth	r3, r3
 8008d72:	11db      	asrs	r3, r3, #7
 8008d74:	b2db      	uxtb	r3, r3
 8008d76:	f003 0306 	and.w	r3, r3, #6
 8008d7a:	b2db      	uxtb	r3, r3
 8008d7c:	f063 030f 	orn	r3, r3, #15
 8008d80:	b2da      	uxtb	r2, r3
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	611a      	str	r2, [r3, #16]
}
 8008d88:	e011      	b.n	8008dae <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d8e:	2b01      	cmp	r3, #1
 8008d90:	d10d      	bne.n	8008dae <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d96:	b29b      	uxth	r3, r3
 8008d98:	11db      	asrs	r3, r3, #7
 8008d9a:	b2db      	uxtb	r3, r3
 8008d9c:	f003 0306 	and.w	r3, r3, #6
 8008da0:	b2db      	uxtb	r3, r3
 8008da2:	f063 030e 	orn	r3, r3, #14
 8008da6:	b2da      	uxtb	r2, r3
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	611a      	str	r2, [r3, #16]
}
 8008dae:	bf00      	nop
 8008db0:	370c      	adds	r7, #12
 8008db2:	46bd      	mov	sp, r7
 8008db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db8:	4770      	bx	lr

08008dba <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8008dba:	b480      	push	{r7}
 8008dbc:	b083      	sub	sp, #12
 8008dbe:	af00      	add	r7, sp, #0
 8008dc0:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dc6:	b2da      	uxtb	r2, r3
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d004      	beq.n	8008de0 <I2C_Master_ADD10+0x26>
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d108      	bne.n	8008df2 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d00c      	beq.n	8008e02 <I2C_Master_ADD10+0x48>
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d007      	beq.n	8008e02 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	685a      	ldr	r2, [r3, #4]
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008e00:	605a      	str	r2, [r3, #4]
  }
}
 8008e02:	bf00      	nop
 8008e04:	370c      	adds	r7, #12
 8008e06:	46bd      	mov	sp, r7
 8008e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0c:	4770      	bx	lr

08008e0e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8008e0e:	b480      	push	{r7}
 8008e10:	b091      	sub	sp, #68	; 0x44
 8008e12:	af00      	add	r7, sp, #0
 8008e14:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008e1c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e24:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e2a:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e32:	b2db      	uxtb	r3, r3
 8008e34:	2b22      	cmp	r3, #34	; 0x22
 8008e36:	f040 8169 	bne.w	800910c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d10f      	bne.n	8008e62 <I2C_Master_ADDR+0x54>
 8008e42:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008e46:	2b40      	cmp	r3, #64	; 0x40
 8008e48:	d10b      	bne.n	8008e62 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	633b      	str	r3, [r7, #48]	; 0x30
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	695b      	ldr	r3, [r3, #20]
 8008e54:	633b      	str	r3, [r7, #48]	; 0x30
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	699b      	ldr	r3, [r3, #24]
 8008e5c:	633b      	str	r3, [r7, #48]	; 0x30
 8008e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e60:	e160      	b.n	8009124 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d11d      	bne.n	8008ea6 <I2C_Master_ADDR+0x98>
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	691b      	ldr	r3, [r3, #16]
 8008e6e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008e72:	d118      	bne.n	8008ea6 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008e74:	2300      	movs	r3, #0
 8008e76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	695b      	ldr	r3, [r3, #20]
 8008e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	699b      	ldr	r3, [r3, #24]
 8008e86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	681a      	ldr	r2, [r3, #0]
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008e98:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e9e:	1c5a      	adds	r2, r3, #1
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	651a      	str	r2, [r3, #80]	; 0x50
 8008ea4:	e13e      	b.n	8009124 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008eaa:	b29b      	uxth	r3, r3
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d113      	bne.n	8008ed8 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	62bb      	str	r3, [r7, #40]	; 0x28
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	695b      	ldr	r3, [r3, #20]
 8008eba:	62bb      	str	r3, [r7, #40]	; 0x28
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	699b      	ldr	r3, [r3, #24]
 8008ec2:	62bb      	str	r3, [r7, #40]	; 0x28
 8008ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	681a      	ldr	r2, [r3, #0]
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008ed4:	601a      	str	r2, [r3, #0]
 8008ed6:	e115      	b.n	8009104 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008edc:	b29b      	uxth	r3, r3
 8008ede:	2b01      	cmp	r3, #1
 8008ee0:	f040 808a 	bne.w	8008ff8 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8008ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ee6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008eea:	d137      	bne.n	8008f5c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	681a      	ldr	r2, [r3, #0]
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008efa:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	685b      	ldr	r3, [r3, #4]
 8008f02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008f06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f0a:	d113      	bne.n	8008f34 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	681a      	ldr	r2, [r3, #0]
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008f1a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	627b      	str	r3, [r7, #36]	; 0x24
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	695b      	ldr	r3, [r3, #20]
 8008f26:	627b      	str	r3, [r7, #36]	; 0x24
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	699b      	ldr	r3, [r3, #24]
 8008f2e:	627b      	str	r3, [r7, #36]	; 0x24
 8008f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f32:	e0e7      	b.n	8009104 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008f34:	2300      	movs	r3, #0
 8008f36:	623b      	str	r3, [r7, #32]
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	695b      	ldr	r3, [r3, #20]
 8008f3e:	623b      	str	r3, [r7, #32]
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	699b      	ldr	r3, [r3, #24]
 8008f46:	623b      	str	r3, [r7, #32]
 8008f48:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	681a      	ldr	r2, [r3, #0]
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008f58:	601a      	str	r2, [r3, #0]
 8008f5a:	e0d3      	b.n	8009104 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8008f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f5e:	2b08      	cmp	r3, #8
 8008f60:	d02e      	beq.n	8008fc0 <I2C_Master_ADDR+0x1b2>
 8008f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f64:	2b20      	cmp	r3, #32
 8008f66:	d02b      	beq.n	8008fc0 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8008f68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f6a:	2b12      	cmp	r3, #18
 8008f6c:	d102      	bne.n	8008f74 <I2C_Master_ADDR+0x166>
 8008f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f70:	2b01      	cmp	r3, #1
 8008f72:	d125      	bne.n	8008fc0 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8008f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f76:	2b04      	cmp	r3, #4
 8008f78:	d00e      	beq.n	8008f98 <I2C_Master_ADDR+0x18a>
 8008f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f7c:	2b02      	cmp	r3, #2
 8008f7e:	d00b      	beq.n	8008f98 <I2C_Master_ADDR+0x18a>
 8008f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f82:	2b10      	cmp	r3, #16
 8008f84:	d008      	beq.n	8008f98 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	681a      	ldr	r2, [r3, #0]
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008f94:	601a      	str	r2, [r3, #0]
 8008f96:	e007      	b.n	8008fa8 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	681a      	ldr	r2, [r3, #0]
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008fa6:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008fa8:	2300      	movs	r3, #0
 8008faa:	61fb      	str	r3, [r7, #28]
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	695b      	ldr	r3, [r3, #20]
 8008fb2:	61fb      	str	r3, [r7, #28]
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	699b      	ldr	r3, [r3, #24]
 8008fba:	61fb      	str	r3, [r7, #28]
 8008fbc:	69fb      	ldr	r3, [r7, #28]
 8008fbe:	e0a1      	b.n	8009104 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	681a      	ldr	r2, [r3, #0]
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008fce:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	61bb      	str	r3, [r7, #24]
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	695b      	ldr	r3, [r3, #20]
 8008fda:	61bb      	str	r3, [r7, #24]
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	699b      	ldr	r3, [r3, #24]
 8008fe2:	61bb      	str	r3, [r7, #24]
 8008fe4:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	681a      	ldr	r2, [r3, #0]
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008ff4:	601a      	str	r2, [r3, #0]
 8008ff6:	e085      	b.n	8009104 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ffc:	b29b      	uxth	r3, r3
 8008ffe:	2b02      	cmp	r3, #2
 8009000:	d14d      	bne.n	800909e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8009002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009004:	2b04      	cmp	r3, #4
 8009006:	d016      	beq.n	8009036 <I2C_Master_ADDR+0x228>
 8009008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800900a:	2b02      	cmp	r3, #2
 800900c:	d013      	beq.n	8009036 <I2C_Master_ADDR+0x228>
 800900e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009010:	2b10      	cmp	r3, #16
 8009012:	d010      	beq.n	8009036 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	681a      	ldr	r2, [r3, #0]
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009022:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	681a      	ldr	r2, [r3, #0]
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009032:	601a      	str	r2, [r3, #0]
 8009034:	e007      	b.n	8009046 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	681a      	ldr	r2, [r3, #0]
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009044:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	685b      	ldr	r3, [r3, #4]
 800904c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009050:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009054:	d117      	bne.n	8009086 <I2C_Master_ADDR+0x278>
 8009056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009058:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800905c:	d00b      	beq.n	8009076 <I2C_Master_ADDR+0x268>
 800905e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009060:	2b01      	cmp	r3, #1
 8009062:	d008      	beq.n	8009076 <I2C_Master_ADDR+0x268>
 8009064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009066:	2b08      	cmp	r3, #8
 8009068:	d005      	beq.n	8009076 <I2C_Master_ADDR+0x268>
 800906a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800906c:	2b10      	cmp	r3, #16
 800906e:	d002      	beq.n	8009076 <I2C_Master_ADDR+0x268>
 8009070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009072:	2b20      	cmp	r3, #32
 8009074:	d107      	bne.n	8009086 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	685a      	ldr	r2, [r3, #4]
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009084:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009086:	2300      	movs	r3, #0
 8009088:	617b      	str	r3, [r7, #20]
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	695b      	ldr	r3, [r3, #20]
 8009090:	617b      	str	r3, [r7, #20]
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	699b      	ldr	r3, [r3, #24]
 8009098:	617b      	str	r3, [r7, #20]
 800909a:	697b      	ldr	r3, [r7, #20]
 800909c:	e032      	b.n	8009104 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	681a      	ldr	r2, [r3, #0]
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80090ac:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	685b      	ldr	r3, [r3, #4]
 80090b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80090b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80090bc:	d117      	bne.n	80090ee <I2C_Master_ADDR+0x2e0>
 80090be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090c0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80090c4:	d00b      	beq.n	80090de <I2C_Master_ADDR+0x2d0>
 80090c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090c8:	2b01      	cmp	r3, #1
 80090ca:	d008      	beq.n	80090de <I2C_Master_ADDR+0x2d0>
 80090cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090ce:	2b08      	cmp	r3, #8
 80090d0:	d005      	beq.n	80090de <I2C_Master_ADDR+0x2d0>
 80090d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090d4:	2b10      	cmp	r3, #16
 80090d6:	d002      	beq.n	80090de <I2C_Master_ADDR+0x2d0>
 80090d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090da:	2b20      	cmp	r3, #32
 80090dc:	d107      	bne.n	80090ee <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	685a      	ldr	r2, [r3, #4]
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80090ec:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80090ee:	2300      	movs	r3, #0
 80090f0:	613b      	str	r3, [r7, #16]
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	695b      	ldr	r3, [r3, #20]
 80090f8:	613b      	str	r3, [r7, #16]
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	699b      	ldr	r3, [r3, #24]
 8009100:	613b      	str	r3, [r7, #16]
 8009102:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2200      	movs	r2, #0
 8009108:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800910a:	e00b      	b.n	8009124 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800910c:	2300      	movs	r3, #0
 800910e:	60fb      	str	r3, [r7, #12]
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	695b      	ldr	r3, [r3, #20]
 8009116:	60fb      	str	r3, [r7, #12]
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	699b      	ldr	r3, [r3, #24]
 800911e:	60fb      	str	r3, [r7, #12]
 8009120:	68fb      	ldr	r3, [r7, #12]
}
 8009122:	e7ff      	b.n	8009124 <I2C_Master_ADDR+0x316>
 8009124:	bf00      	nop
 8009126:	3744      	adds	r7, #68	; 0x44
 8009128:	46bd      	mov	sp, r7
 800912a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912e:	4770      	bx	lr

08009130 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b084      	sub	sp, #16
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800913e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009144:	b29b      	uxth	r3, r3
 8009146:	2b00      	cmp	r3, #0
 8009148:	d02b      	beq.n	80091a2 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800914e:	781a      	ldrb	r2, [r3, #0]
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800915a:	1c5a      	adds	r2, r3, #1
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009164:	b29b      	uxth	r3, r3
 8009166:	3b01      	subs	r3, #1
 8009168:	b29a      	uxth	r2, r3
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009172:	b29b      	uxth	r3, r3
 8009174:	2b00      	cmp	r3, #0
 8009176:	d114      	bne.n	80091a2 <I2C_SlaveTransmit_TXE+0x72>
 8009178:	7bfb      	ldrb	r3, [r7, #15]
 800917a:	2b29      	cmp	r3, #41	; 0x29
 800917c:	d111      	bne.n	80091a2 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	685a      	ldr	r2, [r3, #4]
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800918c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	2221      	movs	r2, #33	; 0x21
 8009192:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2228      	movs	r2, #40	; 0x28
 8009198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	f7ff f9e7 	bl	8008570 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80091a2:	bf00      	nop
 80091a4:	3710      	adds	r7, #16
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bd80      	pop	{r7, pc}

080091aa <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80091aa:	b480      	push	{r7}
 80091ac:	b083      	sub	sp, #12
 80091ae:	af00      	add	r7, sp, #0
 80091b0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091b6:	b29b      	uxth	r3, r3
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d011      	beq.n	80091e0 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091c0:	781a      	ldrb	r2, [r3, #0]
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091cc:	1c5a      	adds	r2, r3, #1
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091d6:	b29b      	uxth	r3, r3
 80091d8:	3b01      	subs	r3, #1
 80091da:	b29a      	uxth	r2, r3
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80091e0:	bf00      	nop
 80091e2:	370c      	adds	r7, #12
 80091e4:	46bd      	mov	sp, r7
 80091e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ea:	4770      	bx	lr

080091ec <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b084      	sub	sp, #16
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091fa:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009200:	b29b      	uxth	r3, r3
 8009202:	2b00      	cmp	r3, #0
 8009204:	d02c      	beq.n	8009260 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	691a      	ldr	r2, [r3, #16]
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009210:	b2d2      	uxtb	r2, r2
 8009212:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009218:	1c5a      	adds	r2, r3, #1
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009222:	b29b      	uxth	r3, r3
 8009224:	3b01      	subs	r3, #1
 8009226:	b29a      	uxth	r2, r3
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009230:	b29b      	uxth	r3, r3
 8009232:	2b00      	cmp	r3, #0
 8009234:	d114      	bne.n	8009260 <I2C_SlaveReceive_RXNE+0x74>
 8009236:	7bfb      	ldrb	r3, [r7, #15]
 8009238:	2b2a      	cmp	r3, #42	; 0x2a
 800923a:	d111      	bne.n	8009260 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	685a      	ldr	r2, [r3, #4]
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800924a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2222      	movs	r2, #34	; 0x22
 8009250:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	2228      	movs	r2, #40	; 0x28
 8009256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800925a:	6878      	ldr	r0, [r7, #4]
 800925c:	f7ff f992 	bl	8008584 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8009260:	bf00      	nop
 8009262:	3710      	adds	r7, #16
 8009264:	46bd      	mov	sp, r7
 8009266:	bd80      	pop	{r7, pc}

08009268 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8009268:	b480      	push	{r7}
 800926a:	b083      	sub	sp, #12
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009274:	b29b      	uxth	r3, r3
 8009276:	2b00      	cmp	r3, #0
 8009278:	d012      	beq.n	80092a0 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	691a      	ldr	r2, [r3, #16]
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009284:	b2d2      	uxtb	r2, r2
 8009286:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800928c:	1c5a      	adds	r2, r3, #1
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009296:	b29b      	uxth	r3, r3
 8009298:	3b01      	subs	r3, #1
 800929a:	b29a      	uxth	r2, r3
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80092a0:	bf00      	nop
 80092a2:	370c      	adds	r7, #12
 80092a4:	46bd      	mov	sp, r7
 80092a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092aa:	4770      	bx	lr

080092ac <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b084      	sub	sp, #16
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
 80092b4:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80092b6:	2300      	movs	r3, #0
 80092b8:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80092c0:	b2db      	uxtb	r3, r3
 80092c2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80092c6:	2b28      	cmp	r3, #40	; 0x28
 80092c8:	d127      	bne.n	800931a <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	685a      	ldr	r2, [r3, #4]
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80092d8:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	089b      	lsrs	r3, r3, #2
 80092de:	f003 0301 	and.w	r3, r3, #1
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d101      	bne.n	80092ea <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80092e6:	2301      	movs	r3, #1
 80092e8:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	09db      	lsrs	r3, r3, #7
 80092ee:	f003 0301 	and.w	r3, r3, #1
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d103      	bne.n	80092fe <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	68db      	ldr	r3, [r3, #12]
 80092fa:	81bb      	strh	r3, [r7, #12]
 80092fc:	e002      	b.n	8009304 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	699b      	ldr	r3, [r3, #24]
 8009302:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2200      	movs	r2, #0
 8009308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800930c:	89ba      	ldrh	r2, [r7, #12]
 800930e:	7bfb      	ldrb	r3, [r7, #15]
 8009310:	4619      	mov	r1, r3
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	f7ff f940 	bl	8008598 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8009318:	e00e      	b.n	8009338 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800931a:	2300      	movs	r3, #0
 800931c:	60bb      	str	r3, [r7, #8]
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	695b      	ldr	r3, [r3, #20]
 8009324:	60bb      	str	r3, [r7, #8]
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	699b      	ldr	r3, [r3, #24]
 800932c:	60bb      	str	r3, [r7, #8]
 800932e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2200      	movs	r2, #0
 8009334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8009338:	bf00      	nop
 800933a:	3710      	adds	r7, #16
 800933c:	46bd      	mov	sp, r7
 800933e:	bd80      	pop	{r7, pc}

08009340 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b084      	sub	sp, #16
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800934e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	685a      	ldr	r2, [r3, #4]
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800935e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8009360:	2300      	movs	r3, #0
 8009362:	60bb      	str	r3, [r7, #8]
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	695b      	ldr	r3, [r3, #20]
 800936a:	60bb      	str	r3, [r7, #8]
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	681a      	ldr	r2, [r3, #0]
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	f042 0201 	orr.w	r2, r2, #1
 800937a:	601a      	str	r2, [r3, #0]
 800937c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	681a      	ldr	r2, [r3, #0]
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800938c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	685b      	ldr	r3, [r3, #4]
 8009394:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009398:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800939c:	d172      	bne.n	8009484 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800939e:	7bfb      	ldrb	r3, [r7, #15]
 80093a0:	2b22      	cmp	r3, #34	; 0x22
 80093a2:	d002      	beq.n	80093aa <I2C_Slave_STOPF+0x6a>
 80093a4:	7bfb      	ldrb	r3, [r7, #15]
 80093a6:	2b2a      	cmp	r3, #42	; 0x2a
 80093a8:	d135      	bne.n	8009416 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	685b      	ldr	r3, [r3, #4]
 80093b2:	b29a      	uxth	r2, r3
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093bc:	b29b      	uxth	r3, r3
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d005      	beq.n	80093ce <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093c6:	f043 0204 	orr.w	r2, r3, #4
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	685a      	ldr	r2, [r3, #4]
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80093dc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093e2:	4618      	mov	r0, r3
 80093e4:	f7fd ff5e 	bl	80072a4 <HAL_DMA_GetState>
 80093e8:	4603      	mov	r3, r0
 80093ea:	2b01      	cmp	r3, #1
 80093ec:	d049      	beq.n	8009482 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093f2:	4a69      	ldr	r2, [pc, #420]	; (8009598 <I2C_Slave_STOPF+0x258>)
 80093f4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093fa:	4618      	mov	r0, r3
 80093fc:	f7fd fda6 	bl	8006f4c <HAL_DMA_Abort_IT>
 8009400:	4603      	mov	r3, r0
 8009402:	2b00      	cmp	r3, #0
 8009404:	d03d      	beq.n	8009482 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800940a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800940c:	687a      	ldr	r2, [r7, #4]
 800940e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009410:	4610      	mov	r0, r2
 8009412:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009414:	e035      	b.n	8009482 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	685b      	ldr	r3, [r3, #4]
 800941e:	b29a      	uxth	r2, r3
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009428:	b29b      	uxth	r3, r3
 800942a:	2b00      	cmp	r3, #0
 800942c:	d005      	beq.n	800943a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009432:	f043 0204 	orr.w	r2, r3, #4
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	685a      	ldr	r2, [r3, #4]
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009448:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800944e:	4618      	mov	r0, r3
 8009450:	f7fd ff28 	bl	80072a4 <HAL_DMA_GetState>
 8009454:	4603      	mov	r3, r0
 8009456:	2b01      	cmp	r3, #1
 8009458:	d014      	beq.n	8009484 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800945e:	4a4e      	ldr	r2, [pc, #312]	; (8009598 <I2C_Slave_STOPF+0x258>)
 8009460:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009466:	4618      	mov	r0, r3
 8009468:	f7fd fd70 	bl	8006f4c <HAL_DMA_Abort_IT>
 800946c:	4603      	mov	r3, r0
 800946e:	2b00      	cmp	r3, #0
 8009470:	d008      	beq.n	8009484 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009476:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009478:	687a      	ldr	r2, [r7, #4]
 800947a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800947c:	4610      	mov	r0, r2
 800947e:	4798      	blx	r3
 8009480:	e000      	b.n	8009484 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009482:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009488:	b29b      	uxth	r3, r3
 800948a:	2b00      	cmp	r3, #0
 800948c:	d03e      	beq.n	800950c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	695b      	ldr	r3, [r3, #20]
 8009494:	f003 0304 	and.w	r3, r3, #4
 8009498:	2b04      	cmp	r3, #4
 800949a:	d112      	bne.n	80094c2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	691a      	ldr	r2, [r3, #16]
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094a6:	b2d2      	uxtb	r2, r2
 80094a8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094ae:	1c5a      	adds	r2, r3, #1
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094b8:	b29b      	uxth	r3, r3
 80094ba:	3b01      	subs	r3, #1
 80094bc:	b29a      	uxth	r2, r3
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	695b      	ldr	r3, [r3, #20]
 80094c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094cc:	2b40      	cmp	r3, #64	; 0x40
 80094ce:	d112      	bne.n	80094f6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	691a      	ldr	r2, [r3, #16]
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094da:	b2d2      	uxtb	r2, r2
 80094dc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094e2:	1c5a      	adds	r2, r3, #1
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094ec:	b29b      	uxth	r3, r3
 80094ee:	3b01      	subs	r3, #1
 80094f0:	b29a      	uxth	r2, r3
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094fa:	b29b      	uxth	r3, r3
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d005      	beq.n	800950c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009504:	f043 0204 	orr.w	r2, r3, #4
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009510:	2b00      	cmp	r3, #0
 8009512:	d003      	beq.n	800951c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8009514:	6878      	ldr	r0, [r7, #4]
 8009516:	f000 f8b3 	bl	8009680 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800951a:	e039      	b.n	8009590 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800951c:	7bfb      	ldrb	r3, [r7, #15]
 800951e:	2b2a      	cmp	r3, #42	; 0x2a
 8009520:	d109      	bne.n	8009536 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2200      	movs	r2, #0
 8009526:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2228      	movs	r2, #40	; 0x28
 800952c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009530:	6878      	ldr	r0, [r7, #4]
 8009532:	f7ff f827 	bl	8008584 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800953c:	b2db      	uxtb	r3, r3
 800953e:	2b28      	cmp	r3, #40	; 0x28
 8009540:	d111      	bne.n	8009566 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	4a15      	ldr	r2, [pc, #84]	; (800959c <I2C_Slave_STOPF+0x25c>)
 8009546:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2200      	movs	r2, #0
 800954c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	2220      	movs	r2, #32
 8009552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	2200      	movs	r2, #0
 800955a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800955e:	6878      	ldr	r0, [r7, #4]
 8009560:	f7ff f828 	bl	80085b4 <HAL_I2C_ListenCpltCallback>
}
 8009564:	e014      	b.n	8009590 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800956a:	2b22      	cmp	r3, #34	; 0x22
 800956c:	d002      	beq.n	8009574 <I2C_Slave_STOPF+0x234>
 800956e:	7bfb      	ldrb	r3, [r7, #15]
 8009570:	2b22      	cmp	r3, #34	; 0x22
 8009572:	d10d      	bne.n	8009590 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2200      	movs	r2, #0
 8009578:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	2220      	movs	r2, #32
 800957e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	2200      	movs	r2, #0
 8009586:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	f7fe fffa 	bl	8008584 <HAL_I2C_SlaveRxCpltCallback>
}
 8009590:	bf00      	nop
 8009592:	3710      	adds	r7, #16
 8009594:	46bd      	mov	sp, r7
 8009596:	bd80      	pop	{r7, pc}
 8009598:	08009be1 	.word	0x08009be1
 800959c:	ffff0000 	.word	0xffff0000

080095a0 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b084      	sub	sp, #16
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095ae:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095b4:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80095b6:	68bb      	ldr	r3, [r7, #8]
 80095b8:	2b08      	cmp	r3, #8
 80095ba:	d002      	beq.n	80095c2 <I2C_Slave_AF+0x22>
 80095bc:	68bb      	ldr	r3, [r7, #8]
 80095be:	2b20      	cmp	r3, #32
 80095c0:	d129      	bne.n	8009616 <I2C_Slave_AF+0x76>
 80095c2:	7bfb      	ldrb	r3, [r7, #15]
 80095c4:	2b28      	cmp	r3, #40	; 0x28
 80095c6:	d126      	bne.n	8009616 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	4a2c      	ldr	r2, [pc, #176]	; (800967c <I2C_Slave_AF+0xdc>)
 80095cc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	685a      	ldr	r2, [r3, #4]
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80095dc:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80095e6:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	681a      	ldr	r2, [r3, #0]
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80095f6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2200      	movs	r2, #0
 80095fc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2220      	movs	r2, #32
 8009602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	2200      	movs	r2, #0
 800960a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800960e:	6878      	ldr	r0, [r7, #4]
 8009610:	f7fe ffd0 	bl	80085b4 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8009614:	e02e      	b.n	8009674 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8009616:	7bfb      	ldrb	r3, [r7, #15]
 8009618:	2b21      	cmp	r3, #33	; 0x21
 800961a:	d126      	bne.n	800966a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	4a17      	ldr	r2, [pc, #92]	; (800967c <I2C_Slave_AF+0xdc>)
 8009620:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	2221      	movs	r2, #33	; 0x21
 8009626:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2220      	movs	r2, #32
 800962c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2200      	movs	r2, #0
 8009634:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	685a      	ldr	r2, [r3, #4]
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009646:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009650:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	681a      	ldr	r2, [r3, #0]
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009660:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009662:	6878      	ldr	r0, [r7, #4]
 8009664:	f7fe ff84 	bl	8008570 <HAL_I2C_SlaveTxCpltCallback>
}
 8009668:	e004      	b.n	8009674 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009672:	615a      	str	r2, [r3, #20]
}
 8009674:	bf00      	nop
 8009676:	3710      	adds	r7, #16
 8009678:	46bd      	mov	sp, r7
 800967a:	bd80      	pop	{r7, pc}
 800967c:	ffff0000 	.word	0xffff0000

08009680 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b084      	sub	sp, #16
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800968e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009696:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8009698:	7bbb      	ldrb	r3, [r7, #14]
 800969a:	2b10      	cmp	r3, #16
 800969c:	d002      	beq.n	80096a4 <I2C_ITError+0x24>
 800969e:	7bbb      	ldrb	r3, [r7, #14]
 80096a0:	2b40      	cmp	r3, #64	; 0x40
 80096a2:	d10a      	bne.n	80096ba <I2C_ITError+0x3a>
 80096a4:	7bfb      	ldrb	r3, [r7, #15]
 80096a6:	2b22      	cmp	r3, #34	; 0x22
 80096a8:	d107      	bne.n	80096ba <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	681a      	ldr	r2, [r3, #0]
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80096b8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80096ba:	7bfb      	ldrb	r3, [r7, #15]
 80096bc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80096c0:	2b28      	cmp	r3, #40	; 0x28
 80096c2:	d107      	bne.n	80096d4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2200      	movs	r2, #0
 80096c8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2228      	movs	r2, #40	; 0x28
 80096ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80096d2:	e015      	b.n	8009700 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	685b      	ldr	r3, [r3, #4]
 80096da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80096de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80096e2:	d00a      	beq.n	80096fa <I2C_ITError+0x7a>
 80096e4:	7bfb      	ldrb	r3, [r7, #15]
 80096e6:	2b60      	cmp	r3, #96	; 0x60
 80096e8:	d007      	beq.n	80096fa <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	2220      	movs	r2, #32
 80096ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2200      	movs	r2, #0
 80096f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	2200      	movs	r2, #0
 80096fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	685b      	ldr	r3, [r3, #4]
 8009706:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800970a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800970e:	d162      	bne.n	80097d6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	685a      	ldr	r2, [r3, #4]
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800971e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009724:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009728:	b2db      	uxtb	r3, r3
 800972a:	2b01      	cmp	r3, #1
 800972c:	d020      	beq.n	8009770 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009732:	4a6a      	ldr	r2, [pc, #424]	; (80098dc <I2C_ITError+0x25c>)
 8009734:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800973a:	4618      	mov	r0, r3
 800973c:	f7fd fc06 	bl	8006f4c <HAL_DMA_Abort_IT>
 8009740:	4603      	mov	r3, r0
 8009742:	2b00      	cmp	r3, #0
 8009744:	f000 8089 	beq.w	800985a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	681a      	ldr	r2, [r3, #0]
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	f022 0201 	bic.w	r2, r2, #1
 8009756:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2220      	movs	r2, #32
 800975c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009764:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009766:	687a      	ldr	r2, [r7, #4]
 8009768:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800976a:	4610      	mov	r0, r2
 800976c:	4798      	blx	r3
 800976e:	e074      	b.n	800985a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009774:	4a59      	ldr	r2, [pc, #356]	; (80098dc <I2C_ITError+0x25c>)
 8009776:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800977c:	4618      	mov	r0, r3
 800977e:	f7fd fbe5 	bl	8006f4c <HAL_DMA_Abort_IT>
 8009782:	4603      	mov	r3, r0
 8009784:	2b00      	cmp	r3, #0
 8009786:	d068      	beq.n	800985a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	695b      	ldr	r3, [r3, #20]
 800978e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009792:	2b40      	cmp	r3, #64	; 0x40
 8009794:	d10b      	bne.n	80097ae <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	691a      	ldr	r2, [r3, #16]
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097a0:	b2d2      	uxtb	r2, r2
 80097a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097a8:	1c5a      	adds	r2, r3, #1
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	681a      	ldr	r2, [r3, #0]
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	f022 0201 	bic.w	r2, r2, #1
 80097bc:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	2220      	movs	r2, #32
 80097c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097cc:	687a      	ldr	r2, [r7, #4]
 80097ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80097d0:	4610      	mov	r0, r2
 80097d2:	4798      	blx	r3
 80097d4:	e041      	b.n	800985a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80097dc:	b2db      	uxtb	r3, r3
 80097de:	2b60      	cmp	r3, #96	; 0x60
 80097e0:	d125      	bne.n	800982e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	2220      	movs	r2, #32
 80097e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	2200      	movs	r2, #0
 80097ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	695b      	ldr	r3, [r3, #20]
 80097f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097fa:	2b40      	cmp	r3, #64	; 0x40
 80097fc:	d10b      	bne.n	8009816 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	691a      	ldr	r2, [r3, #16]
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009808:	b2d2      	uxtb	r2, r2
 800980a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009810:	1c5a      	adds	r2, r3, #1
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	681a      	ldr	r2, [r3, #0]
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	f022 0201 	bic.w	r2, r2, #1
 8009824:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8009826:	6878      	ldr	r0, [r7, #4]
 8009828:	f7fe feec 	bl	8008604 <HAL_I2C_AbortCpltCallback>
 800982c:	e015      	b.n	800985a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	695b      	ldr	r3, [r3, #20]
 8009834:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009838:	2b40      	cmp	r3, #64	; 0x40
 800983a:	d10b      	bne.n	8009854 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	691a      	ldr	r2, [r3, #16]
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009846:	b2d2      	uxtb	r2, r2
 8009848:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800984e:	1c5a      	adds	r2, r3, #1
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8009854:	6878      	ldr	r0, [r7, #4]
 8009856:	f7fe fecb 	bl	80085f0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800985e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8009860:	68bb      	ldr	r3, [r7, #8]
 8009862:	f003 0301 	and.w	r3, r3, #1
 8009866:	2b00      	cmp	r3, #0
 8009868:	d10e      	bne.n	8009888 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800986a:	68bb      	ldr	r3, [r7, #8]
 800986c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8009870:	2b00      	cmp	r3, #0
 8009872:	d109      	bne.n	8009888 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8009874:	68bb      	ldr	r3, [r7, #8]
 8009876:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800987a:	2b00      	cmp	r3, #0
 800987c:	d104      	bne.n	8009888 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800987e:	68bb      	ldr	r3, [r7, #8]
 8009880:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8009884:	2b00      	cmp	r3, #0
 8009886:	d007      	beq.n	8009898 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	685a      	ldr	r2, [r3, #4]
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009896:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800989e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098a4:	f003 0304 	and.w	r3, r3, #4
 80098a8:	2b04      	cmp	r3, #4
 80098aa:	d113      	bne.n	80098d4 <I2C_ITError+0x254>
 80098ac:	7bfb      	ldrb	r3, [r7, #15]
 80098ae:	2b28      	cmp	r3, #40	; 0x28
 80098b0:	d110      	bne.n	80098d4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	4a0a      	ldr	r2, [pc, #40]	; (80098e0 <I2C_ITError+0x260>)
 80098b6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2200      	movs	r2, #0
 80098bc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	2220      	movs	r2, #32
 80098c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	2200      	movs	r2, #0
 80098ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80098ce:	6878      	ldr	r0, [r7, #4]
 80098d0:	f7fe fe70 	bl	80085b4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80098d4:	bf00      	nop
 80098d6:	3710      	adds	r7, #16
 80098d8:	46bd      	mov	sp, r7
 80098da:	bd80      	pop	{r7, pc}
 80098dc:	08009be1 	.word	0x08009be1
 80098e0:	ffff0000 	.word	0xffff0000

080098e4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b088      	sub	sp, #32
 80098e8:	af02      	add	r7, sp, #8
 80098ea:	60f8      	str	r0, [r7, #12]
 80098ec:	4608      	mov	r0, r1
 80098ee:	4611      	mov	r1, r2
 80098f0:	461a      	mov	r2, r3
 80098f2:	4603      	mov	r3, r0
 80098f4:	817b      	strh	r3, [r7, #10]
 80098f6:	460b      	mov	r3, r1
 80098f8:	813b      	strh	r3, [r7, #8]
 80098fa:	4613      	mov	r3, r2
 80098fc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	681a      	ldr	r2, [r3, #0]
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800990c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800990e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009910:	9300      	str	r3, [sp, #0]
 8009912:	6a3b      	ldr	r3, [r7, #32]
 8009914:	2200      	movs	r2, #0
 8009916:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800991a:	68f8      	ldr	r0, [r7, #12]
 800991c:	f000 fa08 	bl	8009d30 <I2C_WaitOnFlagUntilTimeout>
 8009920:	4603      	mov	r3, r0
 8009922:	2b00      	cmp	r3, #0
 8009924:	d00d      	beq.n	8009942 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009930:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009934:	d103      	bne.n	800993e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	f44f 7200 	mov.w	r2, #512	; 0x200
 800993c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800993e:	2303      	movs	r3, #3
 8009940:	e05f      	b.n	8009a02 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009942:	897b      	ldrh	r3, [r7, #10]
 8009944:	b2db      	uxtb	r3, r3
 8009946:	461a      	mov	r2, r3
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009950:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009954:	6a3a      	ldr	r2, [r7, #32]
 8009956:	492d      	ldr	r1, [pc, #180]	; (8009a0c <I2C_RequestMemoryWrite+0x128>)
 8009958:	68f8      	ldr	r0, [r7, #12]
 800995a:	f000 fa40 	bl	8009dde <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800995e:	4603      	mov	r3, r0
 8009960:	2b00      	cmp	r3, #0
 8009962:	d001      	beq.n	8009968 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8009964:	2301      	movs	r3, #1
 8009966:	e04c      	b.n	8009a02 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009968:	2300      	movs	r3, #0
 800996a:	617b      	str	r3, [r7, #20]
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	695b      	ldr	r3, [r3, #20]
 8009972:	617b      	str	r3, [r7, #20]
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	699b      	ldr	r3, [r3, #24]
 800997a:	617b      	str	r3, [r7, #20]
 800997c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800997e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009980:	6a39      	ldr	r1, [r7, #32]
 8009982:	68f8      	ldr	r0, [r7, #12]
 8009984:	f000 faaa 	bl	8009edc <I2C_WaitOnTXEFlagUntilTimeout>
 8009988:	4603      	mov	r3, r0
 800998a:	2b00      	cmp	r3, #0
 800998c:	d00d      	beq.n	80099aa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009992:	2b04      	cmp	r3, #4
 8009994:	d107      	bne.n	80099a6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	681a      	ldr	r2, [r3, #0]
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80099a4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80099a6:	2301      	movs	r3, #1
 80099a8:	e02b      	b.n	8009a02 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80099aa:	88fb      	ldrh	r3, [r7, #6]
 80099ac:	2b01      	cmp	r3, #1
 80099ae:	d105      	bne.n	80099bc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80099b0:	893b      	ldrh	r3, [r7, #8]
 80099b2:	b2da      	uxtb	r2, r3
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	611a      	str	r2, [r3, #16]
 80099ba:	e021      	b.n	8009a00 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80099bc:	893b      	ldrh	r3, [r7, #8]
 80099be:	0a1b      	lsrs	r3, r3, #8
 80099c0:	b29b      	uxth	r3, r3
 80099c2:	b2da      	uxtb	r2, r3
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80099ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099cc:	6a39      	ldr	r1, [r7, #32]
 80099ce:	68f8      	ldr	r0, [r7, #12]
 80099d0:	f000 fa84 	bl	8009edc <I2C_WaitOnTXEFlagUntilTimeout>
 80099d4:	4603      	mov	r3, r0
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d00d      	beq.n	80099f6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099de:	2b04      	cmp	r3, #4
 80099e0:	d107      	bne.n	80099f2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	681a      	ldr	r2, [r3, #0]
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80099f0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80099f2:	2301      	movs	r3, #1
 80099f4:	e005      	b.n	8009a02 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80099f6:	893b      	ldrh	r3, [r7, #8]
 80099f8:	b2da      	uxtb	r2, r3
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8009a00:	2300      	movs	r3, #0
}
 8009a02:	4618      	mov	r0, r3
 8009a04:	3718      	adds	r7, #24
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bd80      	pop	{r7, pc}
 8009a0a:	bf00      	nop
 8009a0c:	00010002 	.word	0x00010002

08009a10 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b088      	sub	sp, #32
 8009a14:	af02      	add	r7, sp, #8
 8009a16:	60f8      	str	r0, [r7, #12]
 8009a18:	4608      	mov	r0, r1
 8009a1a:	4611      	mov	r1, r2
 8009a1c:	461a      	mov	r2, r3
 8009a1e:	4603      	mov	r3, r0
 8009a20:	817b      	strh	r3, [r7, #10]
 8009a22:	460b      	mov	r3, r1
 8009a24:	813b      	strh	r3, [r7, #8]
 8009a26:	4613      	mov	r3, r2
 8009a28:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	681a      	ldr	r2, [r3, #0]
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009a38:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	681a      	ldr	r2, [r3, #0]
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009a48:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a4c:	9300      	str	r3, [sp, #0]
 8009a4e:	6a3b      	ldr	r3, [r7, #32]
 8009a50:	2200      	movs	r2, #0
 8009a52:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009a56:	68f8      	ldr	r0, [r7, #12]
 8009a58:	f000 f96a 	bl	8009d30 <I2C_WaitOnFlagUntilTimeout>
 8009a5c:	4603      	mov	r3, r0
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d00d      	beq.n	8009a7e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a70:	d103      	bne.n	8009a7a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009a78:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009a7a:	2303      	movs	r3, #3
 8009a7c:	e0aa      	b.n	8009bd4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009a7e:	897b      	ldrh	r3, [r7, #10]
 8009a80:	b2db      	uxtb	r3, r3
 8009a82:	461a      	mov	r2, r3
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009a8c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a90:	6a3a      	ldr	r2, [r7, #32]
 8009a92:	4952      	ldr	r1, [pc, #328]	; (8009bdc <I2C_RequestMemoryRead+0x1cc>)
 8009a94:	68f8      	ldr	r0, [r7, #12]
 8009a96:	f000 f9a2 	bl	8009dde <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d001      	beq.n	8009aa4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8009aa0:	2301      	movs	r3, #1
 8009aa2:	e097      	b.n	8009bd4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	617b      	str	r3, [r7, #20]
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	695b      	ldr	r3, [r3, #20]
 8009aae:	617b      	str	r3, [r7, #20]
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	699b      	ldr	r3, [r3, #24]
 8009ab6:	617b      	str	r3, [r7, #20]
 8009ab8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009aba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009abc:	6a39      	ldr	r1, [r7, #32]
 8009abe:	68f8      	ldr	r0, [r7, #12]
 8009ac0:	f000 fa0c 	bl	8009edc <I2C_WaitOnTXEFlagUntilTimeout>
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d00d      	beq.n	8009ae6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ace:	2b04      	cmp	r3, #4
 8009ad0:	d107      	bne.n	8009ae2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	681a      	ldr	r2, [r3, #0]
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009ae0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009ae2:	2301      	movs	r3, #1
 8009ae4:	e076      	b.n	8009bd4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009ae6:	88fb      	ldrh	r3, [r7, #6]
 8009ae8:	2b01      	cmp	r3, #1
 8009aea:	d105      	bne.n	8009af8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009aec:	893b      	ldrh	r3, [r7, #8]
 8009aee:	b2da      	uxtb	r2, r3
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	611a      	str	r2, [r3, #16]
 8009af6:	e021      	b.n	8009b3c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009af8:	893b      	ldrh	r3, [r7, #8]
 8009afa:	0a1b      	lsrs	r3, r3, #8
 8009afc:	b29b      	uxth	r3, r3
 8009afe:	b2da      	uxtb	r2, r3
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009b06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b08:	6a39      	ldr	r1, [r7, #32]
 8009b0a:	68f8      	ldr	r0, [r7, #12]
 8009b0c:	f000 f9e6 	bl	8009edc <I2C_WaitOnTXEFlagUntilTimeout>
 8009b10:	4603      	mov	r3, r0
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d00d      	beq.n	8009b32 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b1a:	2b04      	cmp	r3, #4
 8009b1c:	d107      	bne.n	8009b2e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	681a      	ldr	r2, [r3, #0]
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009b2c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009b2e:	2301      	movs	r3, #1
 8009b30:	e050      	b.n	8009bd4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009b32:	893b      	ldrh	r3, [r7, #8]
 8009b34:	b2da      	uxtb	r2, r3
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009b3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b3e:	6a39      	ldr	r1, [r7, #32]
 8009b40:	68f8      	ldr	r0, [r7, #12]
 8009b42:	f000 f9cb 	bl	8009edc <I2C_WaitOnTXEFlagUntilTimeout>
 8009b46:	4603      	mov	r3, r0
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d00d      	beq.n	8009b68 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b50:	2b04      	cmp	r3, #4
 8009b52:	d107      	bne.n	8009b64 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	681a      	ldr	r2, [r3, #0]
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009b62:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009b64:	2301      	movs	r3, #1
 8009b66:	e035      	b.n	8009bd4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	681a      	ldr	r2, [r3, #0]
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009b76:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b7a:	9300      	str	r3, [sp, #0]
 8009b7c:	6a3b      	ldr	r3, [r7, #32]
 8009b7e:	2200      	movs	r2, #0
 8009b80:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009b84:	68f8      	ldr	r0, [r7, #12]
 8009b86:	f000 f8d3 	bl	8009d30 <I2C_WaitOnFlagUntilTimeout>
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d00d      	beq.n	8009bac <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b9e:	d103      	bne.n	8009ba8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009ba6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009ba8:	2303      	movs	r3, #3
 8009baa:	e013      	b.n	8009bd4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009bac:	897b      	ldrh	r3, [r7, #10]
 8009bae:	b2db      	uxtb	r3, r3
 8009bb0:	f043 0301 	orr.w	r3, r3, #1
 8009bb4:	b2da      	uxtb	r2, r3
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bbe:	6a3a      	ldr	r2, [r7, #32]
 8009bc0:	4906      	ldr	r1, [pc, #24]	; (8009bdc <I2C_RequestMemoryRead+0x1cc>)
 8009bc2:	68f8      	ldr	r0, [r7, #12]
 8009bc4:	f000 f90b 	bl	8009dde <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009bc8:	4603      	mov	r3, r0
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d001      	beq.n	8009bd2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8009bce:	2301      	movs	r3, #1
 8009bd0:	e000      	b.n	8009bd4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8009bd2:	2300      	movs	r3, #0
}
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	3718      	adds	r7, #24
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	bd80      	pop	{r7, pc}
 8009bdc:	00010002 	.word	0x00010002

08009be0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b086      	sub	sp, #24
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009be8:	2300      	movs	r3, #0
 8009bea:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bf0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009bf2:	697b      	ldr	r3, [r7, #20]
 8009bf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009bf8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8009bfa:	4b4b      	ldr	r3, [pc, #300]	; (8009d28 <I2C_DMAAbort+0x148>)
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	08db      	lsrs	r3, r3, #3
 8009c00:	4a4a      	ldr	r2, [pc, #296]	; (8009d2c <I2C_DMAAbort+0x14c>)
 8009c02:	fba2 2303 	umull	r2, r3, r2, r3
 8009c06:	0a1a      	lsrs	r2, r3, #8
 8009c08:	4613      	mov	r3, r2
 8009c0a:	009b      	lsls	r3, r3, #2
 8009c0c:	4413      	add	r3, r2
 8009c0e:	00da      	lsls	r2, r3, #3
 8009c10:	1ad3      	subs	r3, r2, r3
 8009c12:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d106      	bne.n	8009c28 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009c1a:	697b      	ldr	r3, [r7, #20]
 8009c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c1e:	f043 0220 	orr.w	r2, r3, #32
 8009c22:	697b      	ldr	r3, [r7, #20]
 8009c24:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8009c26:	e00a      	b.n	8009c3e <I2C_DMAAbort+0x5e>
    }
    count--;
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	3b01      	subs	r3, #1
 8009c2c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8009c2e:	697b      	ldr	r3, [r7, #20]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009c38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c3c:	d0ea      	beq.n	8009c14 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8009c3e:	697b      	ldr	r3, [r7, #20]
 8009c40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d003      	beq.n	8009c4e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8009c46:	697b      	ldr	r3, [r7, #20]
 8009c48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8009c4e:	697b      	ldr	r3, [r7, #20]
 8009c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d003      	beq.n	8009c5e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8009c56:	697b      	ldr	r3, [r7, #20]
 8009c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009c5e:	697b      	ldr	r3, [r7, #20]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	681a      	ldr	r2, [r3, #0]
 8009c64:	697b      	ldr	r3, [r7, #20]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009c6c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8009c6e:	697b      	ldr	r3, [r7, #20]
 8009c70:	2200      	movs	r2, #0
 8009c72:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8009c74:	697b      	ldr	r3, [r7, #20]
 8009c76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d003      	beq.n	8009c84 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8009c7c:	697b      	ldr	r3, [r7, #20]
 8009c7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c80:	2200      	movs	r2, #0
 8009c82:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8009c84:	697b      	ldr	r3, [r7, #20]
 8009c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d003      	beq.n	8009c94 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8009c8c:	697b      	ldr	r3, [r7, #20]
 8009c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c90:	2200      	movs	r2, #0
 8009c92:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8009c94:	697b      	ldr	r3, [r7, #20]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	681a      	ldr	r2, [r3, #0]
 8009c9a:	697b      	ldr	r3, [r7, #20]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	f022 0201 	bic.w	r2, r2, #1
 8009ca2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8009ca4:	697b      	ldr	r3, [r7, #20]
 8009ca6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009caa:	b2db      	uxtb	r3, r3
 8009cac:	2b60      	cmp	r3, #96	; 0x60
 8009cae:	d10e      	bne.n	8009cce <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8009cb0:	697b      	ldr	r3, [r7, #20]
 8009cb2:	2220      	movs	r2, #32
 8009cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009cb8:	697b      	ldr	r3, [r7, #20]
 8009cba:	2200      	movs	r2, #0
 8009cbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8009cc0:	697b      	ldr	r3, [r7, #20]
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8009cc6:	6978      	ldr	r0, [r7, #20]
 8009cc8:	f7fe fc9c 	bl	8008604 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009ccc:	e027      	b.n	8009d1e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009cce:	7cfb      	ldrb	r3, [r7, #19]
 8009cd0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009cd4:	2b28      	cmp	r3, #40	; 0x28
 8009cd6:	d117      	bne.n	8009d08 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8009cd8:	697b      	ldr	r3, [r7, #20]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	681a      	ldr	r2, [r3, #0]
 8009cde:	697b      	ldr	r3, [r7, #20]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	f042 0201 	orr.w	r2, r2, #1
 8009ce6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009ce8:	697b      	ldr	r3, [r7, #20]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	681a      	ldr	r2, [r3, #0]
 8009cee:	697b      	ldr	r3, [r7, #20]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009cf6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8009cf8:	697b      	ldr	r3, [r7, #20]
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009cfe:	697b      	ldr	r3, [r7, #20]
 8009d00:	2228      	movs	r2, #40	; 0x28
 8009d02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009d06:	e007      	b.n	8009d18 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8009d08:	697b      	ldr	r3, [r7, #20]
 8009d0a:	2220      	movs	r2, #32
 8009d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009d10:	697b      	ldr	r3, [r7, #20]
 8009d12:	2200      	movs	r2, #0
 8009d14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8009d18:	6978      	ldr	r0, [r7, #20]
 8009d1a:	f7fe fc69 	bl	80085f0 <HAL_I2C_ErrorCallback>
}
 8009d1e:	bf00      	nop
 8009d20:	3718      	adds	r7, #24
 8009d22:	46bd      	mov	sp, r7
 8009d24:	bd80      	pop	{r7, pc}
 8009d26:	bf00      	nop
 8009d28:	20000224 	.word	0x20000224
 8009d2c:	14f8b589 	.word	0x14f8b589

08009d30 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b084      	sub	sp, #16
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	60f8      	str	r0, [r7, #12]
 8009d38:	60b9      	str	r1, [r7, #8]
 8009d3a:	603b      	str	r3, [r7, #0]
 8009d3c:	4613      	mov	r3, r2
 8009d3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009d40:	e025      	b.n	8009d8e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009d42:	683b      	ldr	r3, [r7, #0]
 8009d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d48:	d021      	beq.n	8009d8e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009d4a:	f7fc fe47 	bl	80069dc <HAL_GetTick>
 8009d4e:	4602      	mov	r2, r0
 8009d50:	69bb      	ldr	r3, [r7, #24]
 8009d52:	1ad3      	subs	r3, r2, r3
 8009d54:	683a      	ldr	r2, [r7, #0]
 8009d56:	429a      	cmp	r2, r3
 8009d58:	d302      	bcc.n	8009d60 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009d5a:	683b      	ldr	r3, [r7, #0]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d116      	bne.n	8009d8e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	2200      	movs	r2, #0
 8009d64:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	2220      	movs	r2, #32
 8009d6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	2200      	movs	r2, #0
 8009d72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d7a:	f043 0220 	orr.w	r2, r3, #32
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	2200      	movs	r2, #0
 8009d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009d8a:	2301      	movs	r3, #1
 8009d8c:	e023      	b.n	8009dd6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009d8e:	68bb      	ldr	r3, [r7, #8]
 8009d90:	0c1b      	lsrs	r3, r3, #16
 8009d92:	b2db      	uxtb	r3, r3
 8009d94:	2b01      	cmp	r3, #1
 8009d96:	d10d      	bne.n	8009db4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	695b      	ldr	r3, [r3, #20]
 8009d9e:	43da      	mvns	r2, r3
 8009da0:	68bb      	ldr	r3, [r7, #8]
 8009da2:	4013      	ands	r3, r2
 8009da4:	b29b      	uxth	r3, r3
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	bf0c      	ite	eq
 8009daa:	2301      	moveq	r3, #1
 8009dac:	2300      	movne	r3, #0
 8009dae:	b2db      	uxtb	r3, r3
 8009db0:	461a      	mov	r2, r3
 8009db2:	e00c      	b.n	8009dce <I2C_WaitOnFlagUntilTimeout+0x9e>
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	699b      	ldr	r3, [r3, #24]
 8009dba:	43da      	mvns	r2, r3
 8009dbc:	68bb      	ldr	r3, [r7, #8]
 8009dbe:	4013      	ands	r3, r2
 8009dc0:	b29b      	uxth	r3, r3
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	bf0c      	ite	eq
 8009dc6:	2301      	moveq	r3, #1
 8009dc8:	2300      	movne	r3, #0
 8009dca:	b2db      	uxtb	r3, r3
 8009dcc:	461a      	mov	r2, r3
 8009dce:	79fb      	ldrb	r3, [r7, #7]
 8009dd0:	429a      	cmp	r2, r3
 8009dd2:	d0b6      	beq.n	8009d42 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009dd4:	2300      	movs	r3, #0
}
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	3710      	adds	r7, #16
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	bd80      	pop	{r7, pc}

08009dde <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009dde:	b580      	push	{r7, lr}
 8009de0:	b084      	sub	sp, #16
 8009de2:	af00      	add	r7, sp, #0
 8009de4:	60f8      	str	r0, [r7, #12]
 8009de6:	60b9      	str	r1, [r7, #8]
 8009de8:	607a      	str	r2, [r7, #4]
 8009dea:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009dec:	e051      	b.n	8009e92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	695b      	ldr	r3, [r3, #20]
 8009df4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009df8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009dfc:	d123      	bne.n	8009e46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	681a      	ldr	r2, [r3, #0]
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009e0c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009e16:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	2220      	movs	r2, #32
 8009e22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	2200      	movs	r2, #0
 8009e2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e32:	f043 0204 	orr.w	r2, r3, #4
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009e42:	2301      	movs	r3, #1
 8009e44:	e046      	b.n	8009ed4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e4c:	d021      	beq.n	8009e92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e4e:	f7fc fdc5 	bl	80069dc <HAL_GetTick>
 8009e52:	4602      	mov	r2, r0
 8009e54:	683b      	ldr	r3, [r7, #0]
 8009e56:	1ad3      	subs	r3, r2, r3
 8009e58:	687a      	ldr	r2, [r7, #4]
 8009e5a:	429a      	cmp	r2, r3
 8009e5c:	d302      	bcc.n	8009e64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d116      	bne.n	8009e92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	2200      	movs	r2, #0
 8009e68:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	2220      	movs	r2, #32
 8009e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	2200      	movs	r2, #0
 8009e76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e7e:	f043 0220 	orr.w	r2, r3, #32
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	2200      	movs	r2, #0
 8009e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009e8e:	2301      	movs	r3, #1
 8009e90:	e020      	b.n	8009ed4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009e92:	68bb      	ldr	r3, [r7, #8]
 8009e94:	0c1b      	lsrs	r3, r3, #16
 8009e96:	b2db      	uxtb	r3, r3
 8009e98:	2b01      	cmp	r3, #1
 8009e9a:	d10c      	bne.n	8009eb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	695b      	ldr	r3, [r3, #20]
 8009ea2:	43da      	mvns	r2, r3
 8009ea4:	68bb      	ldr	r3, [r7, #8]
 8009ea6:	4013      	ands	r3, r2
 8009ea8:	b29b      	uxth	r3, r3
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	bf14      	ite	ne
 8009eae:	2301      	movne	r3, #1
 8009eb0:	2300      	moveq	r3, #0
 8009eb2:	b2db      	uxtb	r3, r3
 8009eb4:	e00b      	b.n	8009ece <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	699b      	ldr	r3, [r3, #24]
 8009ebc:	43da      	mvns	r2, r3
 8009ebe:	68bb      	ldr	r3, [r7, #8]
 8009ec0:	4013      	ands	r3, r2
 8009ec2:	b29b      	uxth	r3, r3
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	bf14      	ite	ne
 8009ec8:	2301      	movne	r3, #1
 8009eca:	2300      	moveq	r3, #0
 8009ecc:	b2db      	uxtb	r3, r3
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d18d      	bne.n	8009dee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8009ed2:	2300      	movs	r3, #0
}
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	3710      	adds	r7, #16
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	bd80      	pop	{r7, pc}

08009edc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b084      	sub	sp, #16
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	60f8      	str	r0, [r7, #12]
 8009ee4:	60b9      	str	r1, [r7, #8]
 8009ee6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009ee8:	e02d      	b.n	8009f46 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009eea:	68f8      	ldr	r0, [r7, #12]
 8009eec:	f000 f900 	bl	800a0f0 <I2C_IsAcknowledgeFailed>
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d001      	beq.n	8009efa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009ef6:	2301      	movs	r3, #1
 8009ef8:	e02d      	b.n	8009f56 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009efa:	68bb      	ldr	r3, [r7, #8]
 8009efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f00:	d021      	beq.n	8009f46 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009f02:	f7fc fd6b 	bl	80069dc <HAL_GetTick>
 8009f06:	4602      	mov	r2, r0
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	1ad3      	subs	r3, r2, r3
 8009f0c:	68ba      	ldr	r2, [r7, #8]
 8009f0e:	429a      	cmp	r2, r3
 8009f10:	d302      	bcc.n	8009f18 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009f12:	68bb      	ldr	r3, [r7, #8]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d116      	bne.n	8009f46 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	2220      	movs	r2, #32
 8009f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	2200      	movs	r2, #0
 8009f2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f32:	f043 0220 	orr.w	r2, r3, #32
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009f42:	2301      	movs	r3, #1
 8009f44:	e007      	b.n	8009f56 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	695b      	ldr	r3, [r3, #20]
 8009f4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f50:	2b80      	cmp	r3, #128	; 0x80
 8009f52:	d1ca      	bne.n	8009eea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009f54:	2300      	movs	r3, #0
}
 8009f56:	4618      	mov	r0, r3
 8009f58:	3710      	adds	r7, #16
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	bd80      	pop	{r7, pc}

08009f5e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009f5e:	b580      	push	{r7, lr}
 8009f60:	b084      	sub	sp, #16
 8009f62:	af00      	add	r7, sp, #0
 8009f64:	60f8      	str	r0, [r7, #12]
 8009f66:	60b9      	str	r1, [r7, #8]
 8009f68:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009f6a:	e02d      	b.n	8009fc8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009f6c:	68f8      	ldr	r0, [r7, #12]
 8009f6e:	f000 f8bf 	bl	800a0f0 <I2C_IsAcknowledgeFailed>
 8009f72:	4603      	mov	r3, r0
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d001      	beq.n	8009f7c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009f78:	2301      	movs	r3, #1
 8009f7a:	e02d      	b.n	8009fd8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009f7c:	68bb      	ldr	r3, [r7, #8]
 8009f7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f82:	d021      	beq.n	8009fc8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009f84:	f7fc fd2a 	bl	80069dc <HAL_GetTick>
 8009f88:	4602      	mov	r2, r0
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	1ad3      	subs	r3, r2, r3
 8009f8e:	68ba      	ldr	r2, [r7, #8]
 8009f90:	429a      	cmp	r2, r3
 8009f92:	d302      	bcc.n	8009f9a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009f94:	68bb      	ldr	r3, [r7, #8]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d116      	bne.n	8009fc8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	2220      	movs	r2, #32
 8009fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	2200      	movs	r2, #0
 8009fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fb4:	f043 0220 	orr.w	r2, r3, #32
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009fc4:	2301      	movs	r3, #1
 8009fc6:	e007      	b.n	8009fd8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	695b      	ldr	r3, [r3, #20]
 8009fce:	f003 0304 	and.w	r3, r3, #4
 8009fd2:	2b04      	cmp	r3, #4
 8009fd4:	d1ca      	bne.n	8009f6c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009fd6:	2300      	movs	r3, #0
}
 8009fd8:	4618      	mov	r0, r3
 8009fda:	3710      	adds	r7, #16
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	bd80      	pop	{r7, pc}

08009fe0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8009fe0:	b480      	push	{r7}
 8009fe2:	b085      	sub	sp, #20
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009fe8:	2300      	movs	r3, #0
 8009fea:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8009fec:	4b13      	ldr	r3, [pc, #76]	; (800a03c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	08db      	lsrs	r3, r3, #3
 8009ff2:	4a13      	ldr	r2, [pc, #76]	; (800a040 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8009ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8009ff8:	0a1a      	lsrs	r2, r3, #8
 8009ffa:	4613      	mov	r3, r2
 8009ffc:	009b      	lsls	r3, r3, #2
 8009ffe:	4413      	add	r3, r2
 800a000:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	3b01      	subs	r3, #1
 800a006:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d107      	bne.n	800a01e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a012:	f043 0220 	orr.w	r2, r3, #32
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800a01a:	2301      	movs	r3, #1
 800a01c:	e008      	b.n	800a030 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a028:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a02c:	d0e9      	beq.n	800a002 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800a02e:	2300      	movs	r3, #0
}
 800a030:	4618      	mov	r0, r3
 800a032:	3714      	adds	r7, #20
 800a034:	46bd      	mov	sp, r7
 800a036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03a:	4770      	bx	lr
 800a03c:	20000224 	.word	0x20000224
 800a040:	14f8b589 	.word	0x14f8b589

0800a044 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b084      	sub	sp, #16
 800a048:	af00      	add	r7, sp, #0
 800a04a:	60f8      	str	r0, [r7, #12]
 800a04c:	60b9      	str	r1, [r7, #8]
 800a04e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a050:	e042      	b.n	800a0d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	695b      	ldr	r3, [r3, #20]
 800a058:	f003 0310 	and.w	r3, r3, #16
 800a05c:	2b10      	cmp	r3, #16
 800a05e:	d119      	bne.n	800a094 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	f06f 0210 	mvn.w	r2, #16
 800a068:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	2200      	movs	r2, #0
 800a06e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	2220      	movs	r2, #32
 800a074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	2200      	movs	r2, #0
 800a07c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	2200      	movs	r2, #0
 800a08c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a090:	2301      	movs	r3, #1
 800a092:	e029      	b.n	800a0e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a094:	f7fc fca2 	bl	80069dc <HAL_GetTick>
 800a098:	4602      	mov	r2, r0
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	1ad3      	subs	r3, r2, r3
 800a09e:	68ba      	ldr	r2, [r7, #8]
 800a0a0:	429a      	cmp	r2, r3
 800a0a2:	d302      	bcc.n	800a0aa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800a0a4:	68bb      	ldr	r3, [r7, #8]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d116      	bne.n	800a0d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	2220      	movs	r2, #32
 800a0b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0c4:	f043 0220 	orr.w	r2, r3, #32
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a0d4:	2301      	movs	r3, #1
 800a0d6:	e007      	b.n	800a0e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	695b      	ldr	r3, [r3, #20]
 800a0de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0e2:	2b40      	cmp	r3, #64	; 0x40
 800a0e4:	d1b5      	bne.n	800a052 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a0e6:	2300      	movs	r3, #0
}
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	3710      	adds	r7, #16
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	bd80      	pop	{r7, pc}

0800a0f0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a0f0:	b480      	push	{r7}
 800a0f2:	b083      	sub	sp, #12
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	695b      	ldr	r3, [r3, #20]
 800a0fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a102:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a106:	d11b      	bne.n	800a140 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a110:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	2200      	movs	r2, #0
 800a116:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2220      	movs	r2, #32
 800a11c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	2200      	movs	r2, #0
 800a124:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a12c:	f043 0204 	orr.w	r2, r3, #4
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	2200      	movs	r2, #0
 800a138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a13c:	2301      	movs	r3, #1
 800a13e:	e000      	b.n	800a142 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a140:	2300      	movs	r3, #0
}
 800a142:	4618      	mov	r0, r3
 800a144:	370c      	adds	r7, #12
 800a146:	46bd      	mov	sp, r7
 800a148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14c:	4770      	bx	lr

0800a14e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800a14e:	b480      	push	{r7}
 800a150:	b083      	sub	sp, #12
 800a152:	af00      	add	r7, sp, #0
 800a154:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a15a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800a15e:	d103      	bne.n	800a168 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	2201      	movs	r2, #1
 800a164:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800a166:	e007      	b.n	800a178 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a16c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800a170:	d102      	bne.n	800a178 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	2208      	movs	r2, #8
 800a176:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800a178:	bf00      	nop
 800a17a:	370c      	adds	r7, #12
 800a17c:	46bd      	mov	sp, r7
 800a17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a182:	4770      	bx	lr

0800a184 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b086      	sub	sp, #24
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d101      	bne.n	800a196 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a192:	2301      	movs	r3, #1
 800a194:	e267      	b.n	800a666 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	f003 0301 	and.w	r3, r3, #1
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d075      	beq.n	800a28e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a1a2:	4b88      	ldr	r3, [pc, #544]	; (800a3c4 <HAL_RCC_OscConfig+0x240>)
 800a1a4:	689b      	ldr	r3, [r3, #8]
 800a1a6:	f003 030c 	and.w	r3, r3, #12
 800a1aa:	2b04      	cmp	r3, #4
 800a1ac:	d00c      	beq.n	800a1c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a1ae:	4b85      	ldr	r3, [pc, #532]	; (800a3c4 <HAL_RCC_OscConfig+0x240>)
 800a1b0:	689b      	ldr	r3, [r3, #8]
 800a1b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a1b6:	2b08      	cmp	r3, #8
 800a1b8:	d112      	bne.n	800a1e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a1ba:	4b82      	ldr	r3, [pc, #520]	; (800a3c4 <HAL_RCC_OscConfig+0x240>)
 800a1bc:	685b      	ldr	r3, [r3, #4]
 800a1be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a1c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a1c6:	d10b      	bne.n	800a1e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a1c8:	4b7e      	ldr	r3, [pc, #504]	; (800a3c4 <HAL_RCC_OscConfig+0x240>)
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d05b      	beq.n	800a28c <HAL_RCC_OscConfig+0x108>
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	685b      	ldr	r3, [r3, #4]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d157      	bne.n	800a28c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800a1dc:	2301      	movs	r3, #1
 800a1de:	e242      	b.n	800a666 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	685b      	ldr	r3, [r3, #4]
 800a1e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a1e8:	d106      	bne.n	800a1f8 <HAL_RCC_OscConfig+0x74>
 800a1ea:	4b76      	ldr	r3, [pc, #472]	; (800a3c4 <HAL_RCC_OscConfig+0x240>)
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	4a75      	ldr	r2, [pc, #468]	; (800a3c4 <HAL_RCC_OscConfig+0x240>)
 800a1f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a1f4:	6013      	str	r3, [r2, #0]
 800a1f6:	e01d      	b.n	800a234 <HAL_RCC_OscConfig+0xb0>
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	685b      	ldr	r3, [r3, #4]
 800a1fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a200:	d10c      	bne.n	800a21c <HAL_RCC_OscConfig+0x98>
 800a202:	4b70      	ldr	r3, [pc, #448]	; (800a3c4 <HAL_RCC_OscConfig+0x240>)
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	4a6f      	ldr	r2, [pc, #444]	; (800a3c4 <HAL_RCC_OscConfig+0x240>)
 800a208:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a20c:	6013      	str	r3, [r2, #0]
 800a20e:	4b6d      	ldr	r3, [pc, #436]	; (800a3c4 <HAL_RCC_OscConfig+0x240>)
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	4a6c      	ldr	r2, [pc, #432]	; (800a3c4 <HAL_RCC_OscConfig+0x240>)
 800a214:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a218:	6013      	str	r3, [r2, #0]
 800a21a:	e00b      	b.n	800a234 <HAL_RCC_OscConfig+0xb0>
 800a21c:	4b69      	ldr	r3, [pc, #420]	; (800a3c4 <HAL_RCC_OscConfig+0x240>)
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	4a68      	ldr	r2, [pc, #416]	; (800a3c4 <HAL_RCC_OscConfig+0x240>)
 800a222:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a226:	6013      	str	r3, [r2, #0]
 800a228:	4b66      	ldr	r3, [pc, #408]	; (800a3c4 <HAL_RCC_OscConfig+0x240>)
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	4a65      	ldr	r2, [pc, #404]	; (800a3c4 <HAL_RCC_OscConfig+0x240>)
 800a22e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a232:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	685b      	ldr	r3, [r3, #4]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d013      	beq.n	800a264 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a23c:	f7fc fbce 	bl	80069dc <HAL_GetTick>
 800a240:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a242:	e008      	b.n	800a256 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a244:	f7fc fbca 	bl	80069dc <HAL_GetTick>
 800a248:	4602      	mov	r2, r0
 800a24a:	693b      	ldr	r3, [r7, #16]
 800a24c:	1ad3      	subs	r3, r2, r3
 800a24e:	2b64      	cmp	r3, #100	; 0x64
 800a250:	d901      	bls.n	800a256 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800a252:	2303      	movs	r3, #3
 800a254:	e207      	b.n	800a666 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a256:	4b5b      	ldr	r3, [pc, #364]	; (800a3c4 <HAL_RCC_OscConfig+0x240>)
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d0f0      	beq.n	800a244 <HAL_RCC_OscConfig+0xc0>
 800a262:	e014      	b.n	800a28e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a264:	f7fc fbba 	bl	80069dc <HAL_GetTick>
 800a268:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a26a:	e008      	b.n	800a27e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a26c:	f7fc fbb6 	bl	80069dc <HAL_GetTick>
 800a270:	4602      	mov	r2, r0
 800a272:	693b      	ldr	r3, [r7, #16]
 800a274:	1ad3      	subs	r3, r2, r3
 800a276:	2b64      	cmp	r3, #100	; 0x64
 800a278:	d901      	bls.n	800a27e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a27a:	2303      	movs	r3, #3
 800a27c:	e1f3      	b.n	800a666 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a27e:	4b51      	ldr	r3, [pc, #324]	; (800a3c4 <HAL_RCC_OscConfig+0x240>)
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a286:	2b00      	cmp	r3, #0
 800a288:	d1f0      	bne.n	800a26c <HAL_RCC_OscConfig+0xe8>
 800a28a:	e000      	b.n	800a28e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a28c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	f003 0302 	and.w	r3, r3, #2
 800a296:	2b00      	cmp	r3, #0
 800a298:	d063      	beq.n	800a362 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a29a:	4b4a      	ldr	r3, [pc, #296]	; (800a3c4 <HAL_RCC_OscConfig+0x240>)
 800a29c:	689b      	ldr	r3, [r3, #8]
 800a29e:	f003 030c 	and.w	r3, r3, #12
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d00b      	beq.n	800a2be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a2a6:	4b47      	ldr	r3, [pc, #284]	; (800a3c4 <HAL_RCC_OscConfig+0x240>)
 800a2a8:	689b      	ldr	r3, [r3, #8]
 800a2aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a2ae:	2b08      	cmp	r3, #8
 800a2b0:	d11c      	bne.n	800a2ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a2b2:	4b44      	ldr	r3, [pc, #272]	; (800a3c4 <HAL_RCC_OscConfig+0x240>)
 800a2b4:	685b      	ldr	r3, [r3, #4]
 800a2b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d116      	bne.n	800a2ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a2be:	4b41      	ldr	r3, [pc, #260]	; (800a3c4 <HAL_RCC_OscConfig+0x240>)
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	f003 0302 	and.w	r3, r3, #2
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d005      	beq.n	800a2d6 <HAL_RCC_OscConfig+0x152>
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	68db      	ldr	r3, [r3, #12]
 800a2ce:	2b01      	cmp	r3, #1
 800a2d0:	d001      	beq.n	800a2d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800a2d2:	2301      	movs	r3, #1
 800a2d4:	e1c7      	b.n	800a666 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a2d6:	4b3b      	ldr	r3, [pc, #236]	; (800a3c4 <HAL_RCC_OscConfig+0x240>)
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	691b      	ldr	r3, [r3, #16]
 800a2e2:	00db      	lsls	r3, r3, #3
 800a2e4:	4937      	ldr	r1, [pc, #220]	; (800a3c4 <HAL_RCC_OscConfig+0x240>)
 800a2e6:	4313      	orrs	r3, r2
 800a2e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a2ea:	e03a      	b.n	800a362 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	68db      	ldr	r3, [r3, #12]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d020      	beq.n	800a336 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a2f4:	4b34      	ldr	r3, [pc, #208]	; (800a3c8 <HAL_RCC_OscConfig+0x244>)
 800a2f6:	2201      	movs	r2, #1
 800a2f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a2fa:	f7fc fb6f 	bl	80069dc <HAL_GetTick>
 800a2fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a300:	e008      	b.n	800a314 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a302:	f7fc fb6b 	bl	80069dc <HAL_GetTick>
 800a306:	4602      	mov	r2, r0
 800a308:	693b      	ldr	r3, [r7, #16]
 800a30a:	1ad3      	subs	r3, r2, r3
 800a30c:	2b02      	cmp	r3, #2
 800a30e:	d901      	bls.n	800a314 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800a310:	2303      	movs	r3, #3
 800a312:	e1a8      	b.n	800a666 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a314:	4b2b      	ldr	r3, [pc, #172]	; (800a3c4 <HAL_RCC_OscConfig+0x240>)
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	f003 0302 	and.w	r3, r3, #2
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d0f0      	beq.n	800a302 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a320:	4b28      	ldr	r3, [pc, #160]	; (800a3c4 <HAL_RCC_OscConfig+0x240>)
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	691b      	ldr	r3, [r3, #16]
 800a32c:	00db      	lsls	r3, r3, #3
 800a32e:	4925      	ldr	r1, [pc, #148]	; (800a3c4 <HAL_RCC_OscConfig+0x240>)
 800a330:	4313      	orrs	r3, r2
 800a332:	600b      	str	r3, [r1, #0]
 800a334:	e015      	b.n	800a362 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a336:	4b24      	ldr	r3, [pc, #144]	; (800a3c8 <HAL_RCC_OscConfig+0x244>)
 800a338:	2200      	movs	r2, #0
 800a33a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a33c:	f7fc fb4e 	bl	80069dc <HAL_GetTick>
 800a340:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a342:	e008      	b.n	800a356 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a344:	f7fc fb4a 	bl	80069dc <HAL_GetTick>
 800a348:	4602      	mov	r2, r0
 800a34a:	693b      	ldr	r3, [r7, #16]
 800a34c:	1ad3      	subs	r3, r2, r3
 800a34e:	2b02      	cmp	r3, #2
 800a350:	d901      	bls.n	800a356 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800a352:	2303      	movs	r3, #3
 800a354:	e187      	b.n	800a666 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a356:	4b1b      	ldr	r3, [pc, #108]	; (800a3c4 <HAL_RCC_OscConfig+0x240>)
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	f003 0302 	and.w	r3, r3, #2
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d1f0      	bne.n	800a344 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	f003 0308 	and.w	r3, r3, #8
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d036      	beq.n	800a3dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	695b      	ldr	r3, [r3, #20]
 800a372:	2b00      	cmp	r3, #0
 800a374:	d016      	beq.n	800a3a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a376:	4b15      	ldr	r3, [pc, #84]	; (800a3cc <HAL_RCC_OscConfig+0x248>)
 800a378:	2201      	movs	r2, #1
 800a37a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a37c:	f7fc fb2e 	bl	80069dc <HAL_GetTick>
 800a380:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a382:	e008      	b.n	800a396 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a384:	f7fc fb2a 	bl	80069dc <HAL_GetTick>
 800a388:	4602      	mov	r2, r0
 800a38a:	693b      	ldr	r3, [r7, #16]
 800a38c:	1ad3      	subs	r3, r2, r3
 800a38e:	2b02      	cmp	r3, #2
 800a390:	d901      	bls.n	800a396 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800a392:	2303      	movs	r3, #3
 800a394:	e167      	b.n	800a666 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a396:	4b0b      	ldr	r3, [pc, #44]	; (800a3c4 <HAL_RCC_OscConfig+0x240>)
 800a398:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a39a:	f003 0302 	and.w	r3, r3, #2
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d0f0      	beq.n	800a384 <HAL_RCC_OscConfig+0x200>
 800a3a2:	e01b      	b.n	800a3dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a3a4:	4b09      	ldr	r3, [pc, #36]	; (800a3cc <HAL_RCC_OscConfig+0x248>)
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a3aa:	f7fc fb17 	bl	80069dc <HAL_GetTick>
 800a3ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a3b0:	e00e      	b.n	800a3d0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a3b2:	f7fc fb13 	bl	80069dc <HAL_GetTick>
 800a3b6:	4602      	mov	r2, r0
 800a3b8:	693b      	ldr	r3, [r7, #16]
 800a3ba:	1ad3      	subs	r3, r2, r3
 800a3bc:	2b02      	cmp	r3, #2
 800a3be:	d907      	bls.n	800a3d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800a3c0:	2303      	movs	r3, #3
 800a3c2:	e150      	b.n	800a666 <HAL_RCC_OscConfig+0x4e2>
 800a3c4:	40023800 	.word	0x40023800
 800a3c8:	42470000 	.word	0x42470000
 800a3cc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a3d0:	4b88      	ldr	r3, [pc, #544]	; (800a5f4 <HAL_RCC_OscConfig+0x470>)
 800a3d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a3d4:	f003 0302 	and.w	r3, r3, #2
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d1ea      	bne.n	800a3b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	f003 0304 	and.w	r3, r3, #4
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	f000 8097 	beq.w	800a518 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a3ee:	4b81      	ldr	r3, [pc, #516]	; (800a5f4 <HAL_RCC_OscConfig+0x470>)
 800a3f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d10f      	bne.n	800a41a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	60bb      	str	r3, [r7, #8]
 800a3fe:	4b7d      	ldr	r3, [pc, #500]	; (800a5f4 <HAL_RCC_OscConfig+0x470>)
 800a400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a402:	4a7c      	ldr	r2, [pc, #496]	; (800a5f4 <HAL_RCC_OscConfig+0x470>)
 800a404:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a408:	6413      	str	r3, [r2, #64]	; 0x40
 800a40a:	4b7a      	ldr	r3, [pc, #488]	; (800a5f4 <HAL_RCC_OscConfig+0x470>)
 800a40c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a40e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a412:	60bb      	str	r3, [r7, #8]
 800a414:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a416:	2301      	movs	r3, #1
 800a418:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a41a:	4b77      	ldr	r3, [pc, #476]	; (800a5f8 <HAL_RCC_OscConfig+0x474>)
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a422:	2b00      	cmp	r3, #0
 800a424:	d118      	bne.n	800a458 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a426:	4b74      	ldr	r3, [pc, #464]	; (800a5f8 <HAL_RCC_OscConfig+0x474>)
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	4a73      	ldr	r2, [pc, #460]	; (800a5f8 <HAL_RCC_OscConfig+0x474>)
 800a42c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a430:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a432:	f7fc fad3 	bl	80069dc <HAL_GetTick>
 800a436:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a438:	e008      	b.n	800a44c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a43a:	f7fc facf 	bl	80069dc <HAL_GetTick>
 800a43e:	4602      	mov	r2, r0
 800a440:	693b      	ldr	r3, [r7, #16]
 800a442:	1ad3      	subs	r3, r2, r3
 800a444:	2b02      	cmp	r3, #2
 800a446:	d901      	bls.n	800a44c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800a448:	2303      	movs	r3, #3
 800a44a:	e10c      	b.n	800a666 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a44c:	4b6a      	ldr	r3, [pc, #424]	; (800a5f8 <HAL_RCC_OscConfig+0x474>)
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a454:	2b00      	cmp	r3, #0
 800a456:	d0f0      	beq.n	800a43a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	689b      	ldr	r3, [r3, #8]
 800a45c:	2b01      	cmp	r3, #1
 800a45e:	d106      	bne.n	800a46e <HAL_RCC_OscConfig+0x2ea>
 800a460:	4b64      	ldr	r3, [pc, #400]	; (800a5f4 <HAL_RCC_OscConfig+0x470>)
 800a462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a464:	4a63      	ldr	r2, [pc, #396]	; (800a5f4 <HAL_RCC_OscConfig+0x470>)
 800a466:	f043 0301 	orr.w	r3, r3, #1
 800a46a:	6713      	str	r3, [r2, #112]	; 0x70
 800a46c:	e01c      	b.n	800a4a8 <HAL_RCC_OscConfig+0x324>
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	689b      	ldr	r3, [r3, #8]
 800a472:	2b05      	cmp	r3, #5
 800a474:	d10c      	bne.n	800a490 <HAL_RCC_OscConfig+0x30c>
 800a476:	4b5f      	ldr	r3, [pc, #380]	; (800a5f4 <HAL_RCC_OscConfig+0x470>)
 800a478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a47a:	4a5e      	ldr	r2, [pc, #376]	; (800a5f4 <HAL_RCC_OscConfig+0x470>)
 800a47c:	f043 0304 	orr.w	r3, r3, #4
 800a480:	6713      	str	r3, [r2, #112]	; 0x70
 800a482:	4b5c      	ldr	r3, [pc, #368]	; (800a5f4 <HAL_RCC_OscConfig+0x470>)
 800a484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a486:	4a5b      	ldr	r2, [pc, #364]	; (800a5f4 <HAL_RCC_OscConfig+0x470>)
 800a488:	f043 0301 	orr.w	r3, r3, #1
 800a48c:	6713      	str	r3, [r2, #112]	; 0x70
 800a48e:	e00b      	b.n	800a4a8 <HAL_RCC_OscConfig+0x324>
 800a490:	4b58      	ldr	r3, [pc, #352]	; (800a5f4 <HAL_RCC_OscConfig+0x470>)
 800a492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a494:	4a57      	ldr	r2, [pc, #348]	; (800a5f4 <HAL_RCC_OscConfig+0x470>)
 800a496:	f023 0301 	bic.w	r3, r3, #1
 800a49a:	6713      	str	r3, [r2, #112]	; 0x70
 800a49c:	4b55      	ldr	r3, [pc, #340]	; (800a5f4 <HAL_RCC_OscConfig+0x470>)
 800a49e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4a0:	4a54      	ldr	r2, [pc, #336]	; (800a5f4 <HAL_RCC_OscConfig+0x470>)
 800a4a2:	f023 0304 	bic.w	r3, r3, #4
 800a4a6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	689b      	ldr	r3, [r3, #8]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d015      	beq.n	800a4dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a4b0:	f7fc fa94 	bl	80069dc <HAL_GetTick>
 800a4b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a4b6:	e00a      	b.n	800a4ce <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a4b8:	f7fc fa90 	bl	80069dc <HAL_GetTick>
 800a4bc:	4602      	mov	r2, r0
 800a4be:	693b      	ldr	r3, [r7, #16]
 800a4c0:	1ad3      	subs	r3, r2, r3
 800a4c2:	f241 3288 	movw	r2, #5000	; 0x1388
 800a4c6:	4293      	cmp	r3, r2
 800a4c8:	d901      	bls.n	800a4ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800a4ca:	2303      	movs	r3, #3
 800a4cc:	e0cb      	b.n	800a666 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a4ce:	4b49      	ldr	r3, [pc, #292]	; (800a5f4 <HAL_RCC_OscConfig+0x470>)
 800a4d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4d2:	f003 0302 	and.w	r3, r3, #2
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d0ee      	beq.n	800a4b8 <HAL_RCC_OscConfig+0x334>
 800a4da:	e014      	b.n	800a506 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a4dc:	f7fc fa7e 	bl	80069dc <HAL_GetTick>
 800a4e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a4e2:	e00a      	b.n	800a4fa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a4e4:	f7fc fa7a 	bl	80069dc <HAL_GetTick>
 800a4e8:	4602      	mov	r2, r0
 800a4ea:	693b      	ldr	r3, [r7, #16]
 800a4ec:	1ad3      	subs	r3, r2, r3
 800a4ee:	f241 3288 	movw	r2, #5000	; 0x1388
 800a4f2:	4293      	cmp	r3, r2
 800a4f4:	d901      	bls.n	800a4fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800a4f6:	2303      	movs	r3, #3
 800a4f8:	e0b5      	b.n	800a666 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a4fa:	4b3e      	ldr	r3, [pc, #248]	; (800a5f4 <HAL_RCC_OscConfig+0x470>)
 800a4fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4fe:	f003 0302 	and.w	r3, r3, #2
 800a502:	2b00      	cmp	r3, #0
 800a504:	d1ee      	bne.n	800a4e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a506:	7dfb      	ldrb	r3, [r7, #23]
 800a508:	2b01      	cmp	r3, #1
 800a50a:	d105      	bne.n	800a518 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a50c:	4b39      	ldr	r3, [pc, #228]	; (800a5f4 <HAL_RCC_OscConfig+0x470>)
 800a50e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a510:	4a38      	ldr	r2, [pc, #224]	; (800a5f4 <HAL_RCC_OscConfig+0x470>)
 800a512:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a516:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	699b      	ldr	r3, [r3, #24]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	f000 80a1 	beq.w	800a664 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a522:	4b34      	ldr	r3, [pc, #208]	; (800a5f4 <HAL_RCC_OscConfig+0x470>)
 800a524:	689b      	ldr	r3, [r3, #8]
 800a526:	f003 030c 	and.w	r3, r3, #12
 800a52a:	2b08      	cmp	r3, #8
 800a52c:	d05c      	beq.n	800a5e8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	699b      	ldr	r3, [r3, #24]
 800a532:	2b02      	cmp	r3, #2
 800a534:	d141      	bne.n	800a5ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a536:	4b31      	ldr	r3, [pc, #196]	; (800a5fc <HAL_RCC_OscConfig+0x478>)
 800a538:	2200      	movs	r2, #0
 800a53a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a53c:	f7fc fa4e 	bl	80069dc <HAL_GetTick>
 800a540:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a542:	e008      	b.n	800a556 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a544:	f7fc fa4a 	bl	80069dc <HAL_GetTick>
 800a548:	4602      	mov	r2, r0
 800a54a:	693b      	ldr	r3, [r7, #16]
 800a54c:	1ad3      	subs	r3, r2, r3
 800a54e:	2b02      	cmp	r3, #2
 800a550:	d901      	bls.n	800a556 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800a552:	2303      	movs	r3, #3
 800a554:	e087      	b.n	800a666 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a556:	4b27      	ldr	r3, [pc, #156]	; (800a5f4 <HAL_RCC_OscConfig+0x470>)
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d1f0      	bne.n	800a544 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	69da      	ldr	r2, [r3, #28]
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	6a1b      	ldr	r3, [r3, #32]
 800a56a:	431a      	orrs	r2, r3
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a570:	019b      	lsls	r3, r3, #6
 800a572:	431a      	orrs	r2, r3
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a578:	085b      	lsrs	r3, r3, #1
 800a57a:	3b01      	subs	r3, #1
 800a57c:	041b      	lsls	r3, r3, #16
 800a57e:	431a      	orrs	r2, r3
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a584:	061b      	lsls	r3, r3, #24
 800a586:	491b      	ldr	r1, [pc, #108]	; (800a5f4 <HAL_RCC_OscConfig+0x470>)
 800a588:	4313      	orrs	r3, r2
 800a58a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a58c:	4b1b      	ldr	r3, [pc, #108]	; (800a5fc <HAL_RCC_OscConfig+0x478>)
 800a58e:	2201      	movs	r2, #1
 800a590:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a592:	f7fc fa23 	bl	80069dc <HAL_GetTick>
 800a596:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a598:	e008      	b.n	800a5ac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a59a:	f7fc fa1f 	bl	80069dc <HAL_GetTick>
 800a59e:	4602      	mov	r2, r0
 800a5a0:	693b      	ldr	r3, [r7, #16]
 800a5a2:	1ad3      	subs	r3, r2, r3
 800a5a4:	2b02      	cmp	r3, #2
 800a5a6:	d901      	bls.n	800a5ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800a5a8:	2303      	movs	r3, #3
 800a5aa:	e05c      	b.n	800a666 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a5ac:	4b11      	ldr	r3, [pc, #68]	; (800a5f4 <HAL_RCC_OscConfig+0x470>)
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d0f0      	beq.n	800a59a <HAL_RCC_OscConfig+0x416>
 800a5b8:	e054      	b.n	800a664 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a5ba:	4b10      	ldr	r3, [pc, #64]	; (800a5fc <HAL_RCC_OscConfig+0x478>)
 800a5bc:	2200      	movs	r2, #0
 800a5be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a5c0:	f7fc fa0c 	bl	80069dc <HAL_GetTick>
 800a5c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a5c6:	e008      	b.n	800a5da <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a5c8:	f7fc fa08 	bl	80069dc <HAL_GetTick>
 800a5cc:	4602      	mov	r2, r0
 800a5ce:	693b      	ldr	r3, [r7, #16]
 800a5d0:	1ad3      	subs	r3, r2, r3
 800a5d2:	2b02      	cmp	r3, #2
 800a5d4:	d901      	bls.n	800a5da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800a5d6:	2303      	movs	r3, #3
 800a5d8:	e045      	b.n	800a666 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a5da:	4b06      	ldr	r3, [pc, #24]	; (800a5f4 <HAL_RCC_OscConfig+0x470>)
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d1f0      	bne.n	800a5c8 <HAL_RCC_OscConfig+0x444>
 800a5e6:	e03d      	b.n	800a664 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	699b      	ldr	r3, [r3, #24]
 800a5ec:	2b01      	cmp	r3, #1
 800a5ee:	d107      	bne.n	800a600 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800a5f0:	2301      	movs	r3, #1
 800a5f2:	e038      	b.n	800a666 <HAL_RCC_OscConfig+0x4e2>
 800a5f4:	40023800 	.word	0x40023800
 800a5f8:	40007000 	.word	0x40007000
 800a5fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800a600:	4b1b      	ldr	r3, [pc, #108]	; (800a670 <HAL_RCC_OscConfig+0x4ec>)
 800a602:	685b      	ldr	r3, [r3, #4]
 800a604:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	699b      	ldr	r3, [r3, #24]
 800a60a:	2b01      	cmp	r3, #1
 800a60c:	d028      	beq.n	800a660 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a618:	429a      	cmp	r2, r3
 800a61a:	d121      	bne.n	800a660 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a626:	429a      	cmp	r2, r3
 800a628:	d11a      	bne.n	800a660 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a62a:	68fa      	ldr	r2, [r7, #12]
 800a62c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800a630:	4013      	ands	r3, r2
 800a632:	687a      	ldr	r2, [r7, #4]
 800a634:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a636:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a638:	4293      	cmp	r3, r2
 800a63a:	d111      	bne.n	800a660 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a646:	085b      	lsrs	r3, r3, #1
 800a648:	3b01      	subs	r3, #1
 800a64a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a64c:	429a      	cmp	r2, r3
 800a64e:	d107      	bne.n	800a660 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a65a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a65c:	429a      	cmp	r2, r3
 800a65e:	d001      	beq.n	800a664 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800a660:	2301      	movs	r3, #1
 800a662:	e000      	b.n	800a666 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800a664:	2300      	movs	r3, #0
}
 800a666:	4618      	mov	r0, r3
 800a668:	3718      	adds	r7, #24
 800a66a:	46bd      	mov	sp, r7
 800a66c:	bd80      	pop	{r7, pc}
 800a66e:	bf00      	nop
 800a670:	40023800 	.word	0x40023800

0800a674 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b084      	sub	sp, #16
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
 800a67c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d101      	bne.n	800a688 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a684:	2301      	movs	r3, #1
 800a686:	e0cc      	b.n	800a822 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a688:	4b68      	ldr	r3, [pc, #416]	; (800a82c <HAL_RCC_ClockConfig+0x1b8>)
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	f003 0307 	and.w	r3, r3, #7
 800a690:	683a      	ldr	r2, [r7, #0]
 800a692:	429a      	cmp	r2, r3
 800a694:	d90c      	bls.n	800a6b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a696:	4b65      	ldr	r3, [pc, #404]	; (800a82c <HAL_RCC_ClockConfig+0x1b8>)
 800a698:	683a      	ldr	r2, [r7, #0]
 800a69a:	b2d2      	uxtb	r2, r2
 800a69c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a69e:	4b63      	ldr	r3, [pc, #396]	; (800a82c <HAL_RCC_ClockConfig+0x1b8>)
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	f003 0307 	and.w	r3, r3, #7
 800a6a6:	683a      	ldr	r2, [r7, #0]
 800a6a8:	429a      	cmp	r2, r3
 800a6aa:	d001      	beq.n	800a6b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a6ac:	2301      	movs	r3, #1
 800a6ae:	e0b8      	b.n	800a822 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	f003 0302 	and.w	r3, r3, #2
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d020      	beq.n	800a6fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	f003 0304 	and.w	r3, r3, #4
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d005      	beq.n	800a6d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a6c8:	4b59      	ldr	r3, [pc, #356]	; (800a830 <HAL_RCC_ClockConfig+0x1bc>)
 800a6ca:	689b      	ldr	r3, [r3, #8]
 800a6cc:	4a58      	ldr	r2, [pc, #352]	; (800a830 <HAL_RCC_ClockConfig+0x1bc>)
 800a6ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800a6d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	f003 0308 	and.w	r3, r3, #8
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d005      	beq.n	800a6ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a6e0:	4b53      	ldr	r3, [pc, #332]	; (800a830 <HAL_RCC_ClockConfig+0x1bc>)
 800a6e2:	689b      	ldr	r3, [r3, #8]
 800a6e4:	4a52      	ldr	r2, [pc, #328]	; (800a830 <HAL_RCC_ClockConfig+0x1bc>)
 800a6e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800a6ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a6ec:	4b50      	ldr	r3, [pc, #320]	; (800a830 <HAL_RCC_ClockConfig+0x1bc>)
 800a6ee:	689b      	ldr	r3, [r3, #8]
 800a6f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	689b      	ldr	r3, [r3, #8]
 800a6f8:	494d      	ldr	r1, [pc, #308]	; (800a830 <HAL_RCC_ClockConfig+0x1bc>)
 800a6fa:	4313      	orrs	r3, r2
 800a6fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	f003 0301 	and.w	r3, r3, #1
 800a706:	2b00      	cmp	r3, #0
 800a708:	d044      	beq.n	800a794 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	685b      	ldr	r3, [r3, #4]
 800a70e:	2b01      	cmp	r3, #1
 800a710:	d107      	bne.n	800a722 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a712:	4b47      	ldr	r3, [pc, #284]	; (800a830 <HAL_RCC_ClockConfig+0x1bc>)
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d119      	bne.n	800a752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a71e:	2301      	movs	r3, #1
 800a720:	e07f      	b.n	800a822 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	685b      	ldr	r3, [r3, #4]
 800a726:	2b02      	cmp	r3, #2
 800a728:	d003      	beq.n	800a732 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a72e:	2b03      	cmp	r3, #3
 800a730:	d107      	bne.n	800a742 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a732:	4b3f      	ldr	r3, [pc, #252]	; (800a830 <HAL_RCC_ClockConfig+0x1bc>)
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d109      	bne.n	800a752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a73e:	2301      	movs	r3, #1
 800a740:	e06f      	b.n	800a822 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a742:	4b3b      	ldr	r3, [pc, #236]	; (800a830 <HAL_RCC_ClockConfig+0x1bc>)
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	f003 0302 	and.w	r3, r3, #2
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d101      	bne.n	800a752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a74e:	2301      	movs	r3, #1
 800a750:	e067      	b.n	800a822 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a752:	4b37      	ldr	r3, [pc, #220]	; (800a830 <HAL_RCC_ClockConfig+0x1bc>)
 800a754:	689b      	ldr	r3, [r3, #8]
 800a756:	f023 0203 	bic.w	r2, r3, #3
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	685b      	ldr	r3, [r3, #4]
 800a75e:	4934      	ldr	r1, [pc, #208]	; (800a830 <HAL_RCC_ClockConfig+0x1bc>)
 800a760:	4313      	orrs	r3, r2
 800a762:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a764:	f7fc f93a 	bl	80069dc <HAL_GetTick>
 800a768:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a76a:	e00a      	b.n	800a782 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a76c:	f7fc f936 	bl	80069dc <HAL_GetTick>
 800a770:	4602      	mov	r2, r0
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	1ad3      	subs	r3, r2, r3
 800a776:	f241 3288 	movw	r2, #5000	; 0x1388
 800a77a:	4293      	cmp	r3, r2
 800a77c:	d901      	bls.n	800a782 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a77e:	2303      	movs	r3, #3
 800a780:	e04f      	b.n	800a822 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a782:	4b2b      	ldr	r3, [pc, #172]	; (800a830 <HAL_RCC_ClockConfig+0x1bc>)
 800a784:	689b      	ldr	r3, [r3, #8]
 800a786:	f003 020c 	and.w	r2, r3, #12
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	685b      	ldr	r3, [r3, #4]
 800a78e:	009b      	lsls	r3, r3, #2
 800a790:	429a      	cmp	r2, r3
 800a792:	d1eb      	bne.n	800a76c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a794:	4b25      	ldr	r3, [pc, #148]	; (800a82c <HAL_RCC_ClockConfig+0x1b8>)
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	f003 0307 	and.w	r3, r3, #7
 800a79c:	683a      	ldr	r2, [r7, #0]
 800a79e:	429a      	cmp	r2, r3
 800a7a0:	d20c      	bcs.n	800a7bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a7a2:	4b22      	ldr	r3, [pc, #136]	; (800a82c <HAL_RCC_ClockConfig+0x1b8>)
 800a7a4:	683a      	ldr	r2, [r7, #0]
 800a7a6:	b2d2      	uxtb	r2, r2
 800a7a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a7aa:	4b20      	ldr	r3, [pc, #128]	; (800a82c <HAL_RCC_ClockConfig+0x1b8>)
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	f003 0307 	and.w	r3, r3, #7
 800a7b2:	683a      	ldr	r2, [r7, #0]
 800a7b4:	429a      	cmp	r2, r3
 800a7b6:	d001      	beq.n	800a7bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a7b8:	2301      	movs	r3, #1
 800a7ba:	e032      	b.n	800a822 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	f003 0304 	and.w	r3, r3, #4
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d008      	beq.n	800a7da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a7c8:	4b19      	ldr	r3, [pc, #100]	; (800a830 <HAL_RCC_ClockConfig+0x1bc>)
 800a7ca:	689b      	ldr	r3, [r3, #8]
 800a7cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	68db      	ldr	r3, [r3, #12]
 800a7d4:	4916      	ldr	r1, [pc, #88]	; (800a830 <HAL_RCC_ClockConfig+0x1bc>)
 800a7d6:	4313      	orrs	r3, r2
 800a7d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	f003 0308 	and.w	r3, r3, #8
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d009      	beq.n	800a7fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a7e6:	4b12      	ldr	r3, [pc, #72]	; (800a830 <HAL_RCC_ClockConfig+0x1bc>)
 800a7e8:	689b      	ldr	r3, [r3, #8]
 800a7ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	691b      	ldr	r3, [r3, #16]
 800a7f2:	00db      	lsls	r3, r3, #3
 800a7f4:	490e      	ldr	r1, [pc, #56]	; (800a830 <HAL_RCC_ClockConfig+0x1bc>)
 800a7f6:	4313      	orrs	r3, r2
 800a7f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a7fa:	f000 f821 	bl	800a840 <HAL_RCC_GetSysClockFreq>
 800a7fe:	4602      	mov	r2, r0
 800a800:	4b0b      	ldr	r3, [pc, #44]	; (800a830 <HAL_RCC_ClockConfig+0x1bc>)
 800a802:	689b      	ldr	r3, [r3, #8]
 800a804:	091b      	lsrs	r3, r3, #4
 800a806:	f003 030f 	and.w	r3, r3, #15
 800a80a:	490a      	ldr	r1, [pc, #40]	; (800a834 <HAL_RCC_ClockConfig+0x1c0>)
 800a80c:	5ccb      	ldrb	r3, [r1, r3]
 800a80e:	fa22 f303 	lsr.w	r3, r2, r3
 800a812:	4a09      	ldr	r2, [pc, #36]	; (800a838 <HAL_RCC_ClockConfig+0x1c4>)
 800a814:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800a816:	4b09      	ldr	r3, [pc, #36]	; (800a83c <HAL_RCC_ClockConfig+0x1c8>)
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	4618      	mov	r0, r3
 800a81c:	f7fc f89a 	bl	8006954 <HAL_InitTick>

  return HAL_OK;
 800a820:	2300      	movs	r3, #0
}
 800a822:	4618      	mov	r0, r3
 800a824:	3710      	adds	r7, #16
 800a826:	46bd      	mov	sp, r7
 800a828:	bd80      	pop	{r7, pc}
 800a82a:	bf00      	nop
 800a82c:	40023c00 	.word	0x40023c00
 800a830:	40023800 	.word	0x40023800
 800a834:	08039700 	.word	0x08039700
 800a838:	20000224 	.word	0x20000224
 800a83c:	20000248 	.word	0x20000248

0800a840 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a840:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a844:	b094      	sub	sp, #80	; 0x50
 800a846:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800a848:	2300      	movs	r3, #0
 800a84a:	647b      	str	r3, [r7, #68]	; 0x44
 800a84c:	2300      	movs	r3, #0
 800a84e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a850:	2300      	movs	r3, #0
 800a852:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800a854:	2300      	movs	r3, #0
 800a856:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a858:	4b79      	ldr	r3, [pc, #484]	; (800aa40 <HAL_RCC_GetSysClockFreq+0x200>)
 800a85a:	689b      	ldr	r3, [r3, #8]
 800a85c:	f003 030c 	and.w	r3, r3, #12
 800a860:	2b08      	cmp	r3, #8
 800a862:	d00d      	beq.n	800a880 <HAL_RCC_GetSysClockFreq+0x40>
 800a864:	2b08      	cmp	r3, #8
 800a866:	f200 80e1 	bhi.w	800aa2c <HAL_RCC_GetSysClockFreq+0x1ec>
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d002      	beq.n	800a874 <HAL_RCC_GetSysClockFreq+0x34>
 800a86e:	2b04      	cmp	r3, #4
 800a870:	d003      	beq.n	800a87a <HAL_RCC_GetSysClockFreq+0x3a>
 800a872:	e0db      	b.n	800aa2c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a874:	4b73      	ldr	r3, [pc, #460]	; (800aa44 <HAL_RCC_GetSysClockFreq+0x204>)
 800a876:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800a878:	e0db      	b.n	800aa32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a87a:	4b73      	ldr	r3, [pc, #460]	; (800aa48 <HAL_RCC_GetSysClockFreq+0x208>)
 800a87c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800a87e:	e0d8      	b.n	800aa32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a880:	4b6f      	ldr	r3, [pc, #444]	; (800aa40 <HAL_RCC_GetSysClockFreq+0x200>)
 800a882:	685b      	ldr	r3, [r3, #4]
 800a884:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a888:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a88a:	4b6d      	ldr	r3, [pc, #436]	; (800aa40 <HAL_RCC_GetSysClockFreq+0x200>)
 800a88c:	685b      	ldr	r3, [r3, #4]
 800a88e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a892:	2b00      	cmp	r3, #0
 800a894:	d063      	beq.n	800a95e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a896:	4b6a      	ldr	r3, [pc, #424]	; (800aa40 <HAL_RCC_GetSysClockFreq+0x200>)
 800a898:	685b      	ldr	r3, [r3, #4]
 800a89a:	099b      	lsrs	r3, r3, #6
 800a89c:	2200      	movs	r2, #0
 800a89e:	63bb      	str	r3, [r7, #56]	; 0x38
 800a8a0:	63fa      	str	r2, [r7, #60]	; 0x3c
 800a8a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8a8:	633b      	str	r3, [r7, #48]	; 0x30
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	637b      	str	r3, [r7, #52]	; 0x34
 800a8ae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800a8b2:	4622      	mov	r2, r4
 800a8b4:	462b      	mov	r3, r5
 800a8b6:	f04f 0000 	mov.w	r0, #0
 800a8ba:	f04f 0100 	mov.w	r1, #0
 800a8be:	0159      	lsls	r1, r3, #5
 800a8c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a8c4:	0150      	lsls	r0, r2, #5
 800a8c6:	4602      	mov	r2, r0
 800a8c8:	460b      	mov	r3, r1
 800a8ca:	4621      	mov	r1, r4
 800a8cc:	1a51      	subs	r1, r2, r1
 800a8ce:	6139      	str	r1, [r7, #16]
 800a8d0:	4629      	mov	r1, r5
 800a8d2:	eb63 0301 	sbc.w	r3, r3, r1
 800a8d6:	617b      	str	r3, [r7, #20]
 800a8d8:	f04f 0200 	mov.w	r2, #0
 800a8dc:	f04f 0300 	mov.w	r3, #0
 800a8e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a8e4:	4659      	mov	r1, fp
 800a8e6:	018b      	lsls	r3, r1, #6
 800a8e8:	4651      	mov	r1, sl
 800a8ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800a8ee:	4651      	mov	r1, sl
 800a8f0:	018a      	lsls	r2, r1, #6
 800a8f2:	4651      	mov	r1, sl
 800a8f4:	ebb2 0801 	subs.w	r8, r2, r1
 800a8f8:	4659      	mov	r1, fp
 800a8fa:	eb63 0901 	sbc.w	r9, r3, r1
 800a8fe:	f04f 0200 	mov.w	r2, #0
 800a902:	f04f 0300 	mov.w	r3, #0
 800a906:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a90a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a90e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a912:	4690      	mov	r8, r2
 800a914:	4699      	mov	r9, r3
 800a916:	4623      	mov	r3, r4
 800a918:	eb18 0303 	adds.w	r3, r8, r3
 800a91c:	60bb      	str	r3, [r7, #8]
 800a91e:	462b      	mov	r3, r5
 800a920:	eb49 0303 	adc.w	r3, r9, r3
 800a924:	60fb      	str	r3, [r7, #12]
 800a926:	f04f 0200 	mov.w	r2, #0
 800a92a:	f04f 0300 	mov.w	r3, #0
 800a92e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800a932:	4629      	mov	r1, r5
 800a934:	024b      	lsls	r3, r1, #9
 800a936:	4621      	mov	r1, r4
 800a938:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800a93c:	4621      	mov	r1, r4
 800a93e:	024a      	lsls	r2, r1, #9
 800a940:	4610      	mov	r0, r2
 800a942:	4619      	mov	r1, r3
 800a944:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a946:	2200      	movs	r2, #0
 800a948:	62bb      	str	r3, [r7, #40]	; 0x28
 800a94a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a94c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a950:	f7f6 f9a2 	bl	8000c98 <__aeabi_uldivmod>
 800a954:	4602      	mov	r2, r0
 800a956:	460b      	mov	r3, r1
 800a958:	4613      	mov	r3, r2
 800a95a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a95c:	e058      	b.n	800aa10 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a95e:	4b38      	ldr	r3, [pc, #224]	; (800aa40 <HAL_RCC_GetSysClockFreq+0x200>)
 800a960:	685b      	ldr	r3, [r3, #4]
 800a962:	099b      	lsrs	r3, r3, #6
 800a964:	2200      	movs	r2, #0
 800a966:	4618      	mov	r0, r3
 800a968:	4611      	mov	r1, r2
 800a96a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800a96e:	623b      	str	r3, [r7, #32]
 800a970:	2300      	movs	r3, #0
 800a972:	627b      	str	r3, [r7, #36]	; 0x24
 800a974:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800a978:	4642      	mov	r2, r8
 800a97a:	464b      	mov	r3, r9
 800a97c:	f04f 0000 	mov.w	r0, #0
 800a980:	f04f 0100 	mov.w	r1, #0
 800a984:	0159      	lsls	r1, r3, #5
 800a986:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a98a:	0150      	lsls	r0, r2, #5
 800a98c:	4602      	mov	r2, r0
 800a98e:	460b      	mov	r3, r1
 800a990:	4641      	mov	r1, r8
 800a992:	ebb2 0a01 	subs.w	sl, r2, r1
 800a996:	4649      	mov	r1, r9
 800a998:	eb63 0b01 	sbc.w	fp, r3, r1
 800a99c:	f04f 0200 	mov.w	r2, #0
 800a9a0:	f04f 0300 	mov.w	r3, #0
 800a9a4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800a9a8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800a9ac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800a9b0:	ebb2 040a 	subs.w	r4, r2, sl
 800a9b4:	eb63 050b 	sbc.w	r5, r3, fp
 800a9b8:	f04f 0200 	mov.w	r2, #0
 800a9bc:	f04f 0300 	mov.w	r3, #0
 800a9c0:	00eb      	lsls	r3, r5, #3
 800a9c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a9c6:	00e2      	lsls	r2, r4, #3
 800a9c8:	4614      	mov	r4, r2
 800a9ca:	461d      	mov	r5, r3
 800a9cc:	4643      	mov	r3, r8
 800a9ce:	18e3      	adds	r3, r4, r3
 800a9d0:	603b      	str	r3, [r7, #0]
 800a9d2:	464b      	mov	r3, r9
 800a9d4:	eb45 0303 	adc.w	r3, r5, r3
 800a9d8:	607b      	str	r3, [r7, #4]
 800a9da:	f04f 0200 	mov.w	r2, #0
 800a9de:	f04f 0300 	mov.w	r3, #0
 800a9e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a9e6:	4629      	mov	r1, r5
 800a9e8:	028b      	lsls	r3, r1, #10
 800a9ea:	4621      	mov	r1, r4
 800a9ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a9f0:	4621      	mov	r1, r4
 800a9f2:	028a      	lsls	r2, r1, #10
 800a9f4:	4610      	mov	r0, r2
 800a9f6:	4619      	mov	r1, r3
 800a9f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	61bb      	str	r3, [r7, #24]
 800a9fe:	61fa      	str	r2, [r7, #28]
 800aa00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800aa04:	f7f6 f948 	bl	8000c98 <__aeabi_uldivmod>
 800aa08:	4602      	mov	r2, r0
 800aa0a:	460b      	mov	r3, r1
 800aa0c:	4613      	mov	r3, r2
 800aa0e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800aa10:	4b0b      	ldr	r3, [pc, #44]	; (800aa40 <HAL_RCC_GetSysClockFreq+0x200>)
 800aa12:	685b      	ldr	r3, [r3, #4]
 800aa14:	0c1b      	lsrs	r3, r3, #16
 800aa16:	f003 0303 	and.w	r3, r3, #3
 800aa1a:	3301      	adds	r3, #1
 800aa1c:	005b      	lsls	r3, r3, #1
 800aa1e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800aa20:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800aa22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa24:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa28:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800aa2a:	e002      	b.n	800aa32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800aa2c:	4b05      	ldr	r3, [pc, #20]	; (800aa44 <HAL_RCC_GetSysClockFreq+0x204>)
 800aa2e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800aa30:	bf00      	nop
    }
  }
  return sysclockfreq;
 800aa32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800aa34:	4618      	mov	r0, r3
 800aa36:	3750      	adds	r7, #80	; 0x50
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800aa3e:	bf00      	nop
 800aa40:	40023800 	.word	0x40023800
 800aa44:	00f42400 	.word	0x00f42400
 800aa48:	007a1200 	.word	0x007a1200

0800aa4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800aa4c:	b480      	push	{r7}
 800aa4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800aa50:	4b03      	ldr	r3, [pc, #12]	; (800aa60 <HAL_RCC_GetHCLKFreq+0x14>)
 800aa52:	681b      	ldr	r3, [r3, #0]
}
 800aa54:	4618      	mov	r0, r3
 800aa56:	46bd      	mov	sp, r7
 800aa58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5c:	4770      	bx	lr
 800aa5e:	bf00      	nop
 800aa60:	20000224 	.word	0x20000224

0800aa64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800aa64:	b580      	push	{r7, lr}
 800aa66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800aa68:	f7ff fff0 	bl	800aa4c <HAL_RCC_GetHCLKFreq>
 800aa6c:	4602      	mov	r2, r0
 800aa6e:	4b05      	ldr	r3, [pc, #20]	; (800aa84 <HAL_RCC_GetPCLK1Freq+0x20>)
 800aa70:	689b      	ldr	r3, [r3, #8]
 800aa72:	0a9b      	lsrs	r3, r3, #10
 800aa74:	f003 0307 	and.w	r3, r3, #7
 800aa78:	4903      	ldr	r1, [pc, #12]	; (800aa88 <HAL_RCC_GetPCLK1Freq+0x24>)
 800aa7a:	5ccb      	ldrb	r3, [r1, r3]
 800aa7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800aa80:	4618      	mov	r0, r3
 800aa82:	bd80      	pop	{r7, pc}
 800aa84:	40023800 	.word	0x40023800
 800aa88:	08039710 	.word	0x08039710

0800aa8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800aa90:	f7ff ffdc 	bl	800aa4c <HAL_RCC_GetHCLKFreq>
 800aa94:	4602      	mov	r2, r0
 800aa96:	4b05      	ldr	r3, [pc, #20]	; (800aaac <HAL_RCC_GetPCLK2Freq+0x20>)
 800aa98:	689b      	ldr	r3, [r3, #8]
 800aa9a:	0b5b      	lsrs	r3, r3, #13
 800aa9c:	f003 0307 	and.w	r3, r3, #7
 800aaa0:	4903      	ldr	r1, [pc, #12]	; (800aab0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800aaa2:	5ccb      	ldrb	r3, [r1, r3]
 800aaa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	bd80      	pop	{r7, pc}
 800aaac:	40023800 	.word	0x40023800
 800aab0:	08039710 	.word	0x08039710

0800aab4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800aab4:	b580      	push	{r7, lr}
 800aab6:	b082      	sub	sp, #8
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d101      	bne.n	800aac6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800aac2:	2301      	movs	r3, #1
 800aac4:	e07b      	b.n	800abbe <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d108      	bne.n	800aae0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	685b      	ldr	r3, [r3, #4]
 800aad2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800aad6:	d009      	beq.n	800aaec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	2200      	movs	r2, #0
 800aadc:	61da      	str	r2, [r3, #28]
 800aade:	e005      	b.n	800aaec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	2200      	movs	r2, #0
 800aae4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	2200      	movs	r2, #0
 800aaea:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	2200      	movs	r2, #0
 800aaf0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800aaf8:	b2db      	uxtb	r3, r3
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d106      	bne.n	800ab0c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	2200      	movs	r2, #0
 800ab02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ab06:	6878      	ldr	r0, [r7, #4]
 800ab08:	f7fa fb90 	bl	800522c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	2202      	movs	r2, #2
 800ab10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	681a      	ldr	r2, [r3, #0]
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ab22:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	685b      	ldr	r3, [r3, #4]
 800ab28:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	689b      	ldr	r3, [r3, #8]
 800ab30:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800ab34:	431a      	orrs	r2, r3
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	68db      	ldr	r3, [r3, #12]
 800ab3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ab3e:	431a      	orrs	r2, r3
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	691b      	ldr	r3, [r3, #16]
 800ab44:	f003 0302 	and.w	r3, r3, #2
 800ab48:	431a      	orrs	r2, r3
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	695b      	ldr	r3, [r3, #20]
 800ab4e:	f003 0301 	and.w	r3, r3, #1
 800ab52:	431a      	orrs	r2, r3
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	699b      	ldr	r3, [r3, #24]
 800ab58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ab5c:	431a      	orrs	r2, r3
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	69db      	ldr	r3, [r3, #28]
 800ab62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ab66:	431a      	orrs	r2, r3
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	6a1b      	ldr	r3, [r3, #32]
 800ab6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab70:	ea42 0103 	orr.w	r1, r2, r3
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab78:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	430a      	orrs	r2, r1
 800ab82:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	699b      	ldr	r3, [r3, #24]
 800ab88:	0c1b      	lsrs	r3, r3, #16
 800ab8a:	f003 0104 	and.w	r1, r3, #4
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab92:	f003 0210 	and.w	r2, r3, #16
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	430a      	orrs	r2, r1
 800ab9c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	69da      	ldr	r2, [r3, #28]
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800abac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	2200      	movs	r2, #0
 800abb2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	2201      	movs	r2, #1
 800abb8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800abbc:	2300      	movs	r3, #0
}
 800abbe:	4618      	mov	r0, r3
 800abc0:	3708      	adds	r7, #8
 800abc2:	46bd      	mov	sp, r7
 800abc4:	bd80      	pop	{r7, pc}

0800abc6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800abc6:	b580      	push	{r7, lr}
 800abc8:	b08c      	sub	sp, #48	; 0x30
 800abca:	af00      	add	r7, sp, #0
 800abcc:	60f8      	str	r0, [r7, #12]
 800abce:	60b9      	str	r1, [r7, #8]
 800abd0:	607a      	str	r2, [r7, #4]
 800abd2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800abd4:	2301      	movs	r3, #1
 800abd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800abd8:	2300      	movs	r3, #0
 800abda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800abe4:	2b01      	cmp	r3, #1
 800abe6:	d101      	bne.n	800abec <HAL_SPI_TransmitReceive+0x26>
 800abe8:	2302      	movs	r3, #2
 800abea:	e18a      	b.n	800af02 <HAL_SPI_TransmitReceive+0x33c>
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	2201      	movs	r2, #1
 800abf0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800abf4:	f7fb fef2 	bl	80069dc <HAL_GetTick>
 800abf8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ac00:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	685b      	ldr	r3, [r3, #4]
 800ac08:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800ac0a:	887b      	ldrh	r3, [r7, #2]
 800ac0c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800ac0e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ac12:	2b01      	cmp	r3, #1
 800ac14:	d00f      	beq.n	800ac36 <HAL_SPI_TransmitReceive+0x70>
 800ac16:	69fb      	ldr	r3, [r7, #28]
 800ac18:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ac1c:	d107      	bne.n	800ac2e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	689b      	ldr	r3, [r3, #8]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d103      	bne.n	800ac2e <HAL_SPI_TransmitReceive+0x68>
 800ac26:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ac2a:	2b04      	cmp	r3, #4
 800ac2c:	d003      	beq.n	800ac36 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800ac2e:	2302      	movs	r3, #2
 800ac30:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800ac34:	e15b      	b.n	800aeee <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800ac36:	68bb      	ldr	r3, [r7, #8]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d005      	beq.n	800ac48 <HAL_SPI_TransmitReceive+0x82>
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d002      	beq.n	800ac48 <HAL_SPI_TransmitReceive+0x82>
 800ac42:	887b      	ldrh	r3, [r7, #2]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d103      	bne.n	800ac50 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800ac48:	2301      	movs	r3, #1
 800ac4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800ac4e:	e14e      	b.n	800aeee <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ac56:	b2db      	uxtb	r3, r3
 800ac58:	2b04      	cmp	r3, #4
 800ac5a:	d003      	beq.n	800ac64 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	2205      	movs	r2, #5
 800ac60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	2200      	movs	r2, #0
 800ac68:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	687a      	ldr	r2, [r7, #4]
 800ac6e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	887a      	ldrh	r2, [r7, #2]
 800ac74:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	887a      	ldrh	r2, [r7, #2]
 800ac7a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	68ba      	ldr	r2, [r7, #8]
 800ac80:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	887a      	ldrh	r2, [r7, #2]
 800ac86:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	887a      	ldrh	r2, [r7, #2]
 800ac8c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	2200      	movs	r2, #0
 800ac92:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	2200      	movs	r2, #0
 800ac98:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aca4:	2b40      	cmp	r3, #64	; 0x40
 800aca6:	d007      	beq.n	800acb8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	681a      	ldr	r2, [r3, #0]
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800acb6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	68db      	ldr	r3, [r3, #12]
 800acbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800acc0:	d178      	bne.n	800adb4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	685b      	ldr	r3, [r3, #4]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d002      	beq.n	800acd0 <HAL_SPI_TransmitReceive+0x10a>
 800acca:	8b7b      	ldrh	r3, [r7, #26]
 800accc:	2b01      	cmp	r3, #1
 800acce:	d166      	bne.n	800ad9e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acd4:	881a      	ldrh	r2, [r3, #0]
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ace0:	1c9a      	adds	r2, r3, #2
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800acea:	b29b      	uxth	r3, r3
 800acec:	3b01      	subs	r3, #1
 800acee:	b29a      	uxth	r2, r3
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800acf4:	e053      	b.n	800ad9e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	689b      	ldr	r3, [r3, #8]
 800acfc:	f003 0302 	and.w	r3, r3, #2
 800ad00:	2b02      	cmp	r3, #2
 800ad02:	d11b      	bne.n	800ad3c <HAL_SPI_TransmitReceive+0x176>
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ad08:	b29b      	uxth	r3, r3
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d016      	beq.n	800ad3c <HAL_SPI_TransmitReceive+0x176>
 800ad0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad10:	2b01      	cmp	r3, #1
 800ad12:	d113      	bne.n	800ad3c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad18:	881a      	ldrh	r2, [r3, #0]
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad24:	1c9a      	adds	r2, r3, #2
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ad2e:	b29b      	uxth	r3, r3
 800ad30:	3b01      	subs	r3, #1
 800ad32:	b29a      	uxth	r2, r3
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ad38:	2300      	movs	r3, #0
 800ad3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	689b      	ldr	r3, [r3, #8]
 800ad42:	f003 0301 	and.w	r3, r3, #1
 800ad46:	2b01      	cmp	r3, #1
 800ad48:	d119      	bne.n	800ad7e <HAL_SPI_TransmitReceive+0x1b8>
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ad4e:	b29b      	uxth	r3, r3
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d014      	beq.n	800ad7e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	68da      	ldr	r2, [r3, #12]
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad5e:	b292      	uxth	r2, r2
 800ad60:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad66:	1c9a      	adds	r2, r3, #2
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ad70:	b29b      	uxth	r3, r3
 800ad72:	3b01      	subs	r3, #1
 800ad74:	b29a      	uxth	r2, r3
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ad7a:	2301      	movs	r3, #1
 800ad7c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800ad7e:	f7fb fe2d 	bl	80069dc <HAL_GetTick>
 800ad82:	4602      	mov	r2, r0
 800ad84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad86:	1ad3      	subs	r3, r2, r3
 800ad88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ad8a:	429a      	cmp	r2, r3
 800ad8c:	d807      	bhi.n	800ad9e <HAL_SPI_TransmitReceive+0x1d8>
 800ad8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad94:	d003      	beq.n	800ad9e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800ad96:	2303      	movs	r3, #3
 800ad98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800ad9c:	e0a7      	b.n	800aeee <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ada2:	b29b      	uxth	r3, r3
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d1a6      	bne.n	800acf6 <HAL_SPI_TransmitReceive+0x130>
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800adac:	b29b      	uxth	r3, r3
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d1a1      	bne.n	800acf6 <HAL_SPI_TransmitReceive+0x130>
 800adb2:	e07c      	b.n	800aeae <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	685b      	ldr	r3, [r3, #4]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d002      	beq.n	800adc2 <HAL_SPI_TransmitReceive+0x1fc>
 800adbc:	8b7b      	ldrh	r3, [r7, #26]
 800adbe:	2b01      	cmp	r3, #1
 800adc0:	d16b      	bne.n	800ae9a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	330c      	adds	r3, #12
 800adcc:	7812      	ldrb	r2, [r2, #0]
 800adce:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800add4:	1c5a      	adds	r2, r3, #1
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800adde:	b29b      	uxth	r3, r3
 800ade0:	3b01      	subs	r3, #1
 800ade2:	b29a      	uxth	r2, r3
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ade8:	e057      	b.n	800ae9a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	689b      	ldr	r3, [r3, #8]
 800adf0:	f003 0302 	and.w	r3, r3, #2
 800adf4:	2b02      	cmp	r3, #2
 800adf6:	d11c      	bne.n	800ae32 <HAL_SPI_TransmitReceive+0x26c>
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800adfc:	b29b      	uxth	r3, r3
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d017      	beq.n	800ae32 <HAL_SPI_TransmitReceive+0x26c>
 800ae02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae04:	2b01      	cmp	r3, #1
 800ae06:	d114      	bne.n	800ae32 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	330c      	adds	r3, #12
 800ae12:	7812      	ldrb	r2, [r2, #0]
 800ae14:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae1a:	1c5a      	adds	r2, r3, #1
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ae24:	b29b      	uxth	r3, r3
 800ae26:	3b01      	subs	r3, #1
 800ae28:	b29a      	uxth	r2, r3
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ae2e:	2300      	movs	r3, #0
 800ae30:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	689b      	ldr	r3, [r3, #8]
 800ae38:	f003 0301 	and.w	r3, r3, #1
 800ae3c:	2b01      	cmp	r3, #1
 800ae3e:	d119      	bne.n	800ae74 <HAL_SPI_TransmitReceive+0x2ae>
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ae44:	b29b      	uxth	r3, r3
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d014      	beq.n	800ae74 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	68da      	ldr	r2, [r3, #12]
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae54:	b2d2      	uxtb	r2, r2
 800ae56:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae5c:	1c5a      	adds	r2, r3, #1
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ae66:	b29b      	uxth	r3, r3
 800ae68:	3b01      	subs	r3, #1
 800ae6a:	b29a      	uxth	r2, r3
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ae70:	2301      	movs	r3, #1
 800ae72:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800ae74:	f7fb fdb2 	bl	80069dc <HAL_GetTick>
 800ae78:	4602      	mov	r2, r0
 800ae7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae7c:	1ad3      	subs	r3, r2, r3
 800ae7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ae80:	429a      	cmp	r2, r3
 800ae82:	d803      	bhi.n	800ae8c <HAL_SPI_TransmitReceive+0x2c6>
 800ae84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae8a:	d102      	bne.n	800ae92 <HAL_SPI_TransmitReceive+0x2cc>
 800ae8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d103      	bne.n	800ae9a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800ae92:	2303      	movs	r3, #3
 800ae94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800ae98:	e029      	b.n	800aeee <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ae9e:	b29b      	uxth	r3, r3
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d1a2      	bne.n	800adea <HAL_SPI_TransmitReceive+0x224>
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aea8:	b29b      	uxth	r3, r3
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d19d      	bne.n	800adea <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800aeae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aeb0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800aeb2:	68f8      	ldr	r0, [r7, #12]
 800aeb4:	f000 f8b2 	bl	800b01c <SPI_EndRxTxTransaction>
 800aeb8:	4603      	mov	r3, r0
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d006      	beq.n	800aecc <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800aebe:	2301      	movs	r3, #1
 800aec0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	2220      	movs	r2, #32
 800aec8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800aeca:	e010      	b.n	800aeee <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	689b      	ldr	r3, [r3, #8]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d10b      	bne.n	800aeec <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800aed4:	2300      	movs	r3, #0
 800aed6:	617b      	str	r3, [r7, #20]
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	68db      	ldr	r3, [r3, #12]
 800aede:	617b      	str	r3, [r7, #20]
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	689b      	ldr	r3, [r3, #8]
 800aee6:	617b      	str	r3, [r7, #20]
 800aee8:	697b      	ldr	r3, [r7, #20]
 800aeea:	e000      	b.n	800aeee <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800aeec:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	2201      	movs	r2, #1
 800aef2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	2200      	movs	r2, #0
 800aefa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800aefe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800af02:	4618      	mov	r0, r3
 800af04:	3730      	adds	r7, #48	; 0x30
 800af06:	46bd      	mov	sp, r7
 800af08:	bd80      	pop	{r7, pc}
	...

0800af0c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b088      	sub	sp, #32
 800af10:	af00      	add	r7, sp, #0
 800af12:	60f8      	str	r0, [r7, #12]
 800af14:	60b9      	str	r1, [r7, #8]
 800af16:	603b      	str	r3, [r7, #0]
 800af18:	4613      	mov	r3, r2
 800af1a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800af1c:	f7fb fd5e 	bl	80069dc <HAL_GetTick>
 800af20:	4602      	mov	r2, r0
 800af22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af24:	1a9b      	subs	r3, r3, r2
 800af26:	683a      	ldr	r2, [r7, #0]
 800af28:	4413      	add	r3, r2
 800af2a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800af2c:	f7fb fd56 	bl	80069dc <HAL_GetTick>
 800af30:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800af32:	4b39      	ldr	r3, [pc, #228]	; (800b018 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	015b      	lsls	r3, r3, #5
 800af38:	0d1b      	lsrs	r3, r3, #20
 800af3a:	69fa      	ldr	r2, [r7, #28]
 800af3c:	fb02 f303 	mul.w	r3, r2, r3
 800af40:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800af42:	e054      	b.n	800afee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800af44:	683b      	ldr	r3, [r7, #0]
 800af46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af4a:	d050      	beq.n	800afee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800af4c:	f7fb fd46 	bl	80069dc <HAL_GetTick>
 800af50:	4602      	mov	r2, r0
 800af52:	69bb      	ldr	r3, [r7, #24]
 800af54:	1ad3      	subs	r3, r2, r3
 800af56:	69fa      	ldr	r2, [r7, #28]
 800af58:	429a      	cmp	r2, r3
 800af5a:	d902      	bls.n	800af62 <SPI_WaitFlagStateUntilTimeout+0x56>
 800af5c:	69fb      	ldr	r3, [r7, #28]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d13d      	bne.n	800afde <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	685a      	ldr	r2, [r3, #4]
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800af70:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	685b      	ldr	r3, [r3, #4]
 800af76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800af7a:	d111      	bne.n	800afa0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	689b      	ldr	r3, [r3, #8]
 800af80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800af84:	d004      	beq.n	800af90 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	689b      	ldr	r3, [r3, #8]
 800af8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800af8e:	d107      	bne.n	800afa0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	681a      	ldr	r2, [r3, #0]
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800af9e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afa4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800afa8:	d10f      	bne.n	800afca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	681a      	ldr	r2, [r3, #0]
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800afb8:	601a      	str	r2, [r3, #0]
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	681a      	ldr	r2, [r3, #0]
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800afc8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	2201      	movs	r2, #1
 800afce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	2200      	movs	r2, #0
 800afd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800afda:	2303      	movs	r3, #3
 800afdc:	e017      	b.n	800b00e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800afde:	697b      	ldr	r3, [r7, #20]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d101      	bne.n	800afe8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800afe4:	2300      	movs	r3, #0
 800afe6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800afe8:	697b      	ldr	r3, [r7, #20]
 800afea:	3b01      	subs	r3, #1
 800afec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	689a      	ldr	r2, [r3, #8]
 800aff4:	68bb      	ldr	r3, [r7, #8]
 800aff6:	4013      	ands	r3, r2
 800aff8:	68ba      	ldr	r2, [r7, #8]
 800affa:	429a      	cmp	r2, r3
 800affc:	bf0c      	ite	eq
 800affe:	2301      	moveq	r3, #1
 800b000:	2300      	movne	r3, #0
 800b002:	b2db      	uxtb	r3, r3
 800b004:	461a      	mov	r2, r3
 800b006:	79fb      	ldrb	r3, [r7, #7]
 800b008:	429a      	cmp	r2, r3
 800b00a:	d19b      	bne.n	800af44 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800b00c:	2300      	movs	r3, #0
}
 800b00e:	4618      	mov	r0, r3
 800b010:	3720      	adds	r7, #32
 800b012:	46bd      	mov	sp, r7
 800b014:	bd80      	pop	{r7, pc}
 800b016:	bf00      	nop
 800b018:	20000224 	.word	0x20000224

0800b01c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b01c:	b580      	push	{r7, lr}
 800b01e:	b088      	sub	sp, #32
 800b020:	af02      	add	r7, sp, #8
 800b022:	60f8      	str	r0, [r7, #12]
 800b024:	60b9      	str	r1, [r7, #8]
 800b026:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800b028:	4b1b      	ldr	r3, [pc, #108]	; (800b098 <SPI_EndRxTxTransaction+0x7c>)
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	4a1b      	ldr	r2, [pc, #108]	; (800b09c <SPI_EndRxTxTransaction+0x80>)
 800b02e:	fba2 2303 	umull	r2, r3, r2, r3
 800b032:	0d5b      	lsrs	r3, r3, #21
 800b034:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b038:	fb02 f303 	mul.w	r3, r2, r3
 800b03c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	685b      	ldr	r3, [r3, #4]
 800b042:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b046:	d112      	bne.n	800b06e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	9300      	str	r3, [sp, #0]
 800b04c:	68bb      	ldr	r3, [r7, #8]
 800b04e:	2200      	movs	r2, #0
 800b050:	2180      	movs	r1, #128	; 0x80
 800b052:	68f8      	ldr	r0, [r7, #12]
 800b054:	f7ff ff5a 	bl	800af0c <SPI_WaitFlagStateUntilTimeout>
 800b058:	4603      	mov	r3, r0
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d016      	beq.n	800b08c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b062:	f043 0220 	orr.w	r2, r3, #32
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800b06a:	2303      	movs	r3, #3
 800b06c:	e00f      	b.n	800b08e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800b06e:	697b      	ldr	r3, [r7, #20]
 800b070:	2b00      	cmp	r3, #0
 800b072:	d00a      	beq.n	800b08a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800b074:	697b      	ldr	r3, [r7, #20]
 800b076:	3b01      	subs	r3, #1
 800b078:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	689b      	ldr	r3, [r3, #8]
 800b080:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b084:	2b80      	cmp	r3, #128	; 0x80
 800b086:	d0f2      	beq.n	800b06e <SPI_EndRxTxTransaction+0x52>
 800b088:	e000      	b.n	800b08c <SPI_EndRxTxTransaction+0x70>
        break;
 800b08a:	bf00      	nop
  }

  return HAL_OK;
 800b08c:	2300      	movs	r3, #0
}
 800b08e:	4618      	mov	r0, r3
 800b090:	3718      	adds	r7, #24
 800b092:	46bd      	mov	sp, r7
 800b094:	bd80      	pop	{r7, pc}
 800b096:	bf00      	nop
 800b098:	20000224 	.word	0x20000224
 800b09c:	165e9f81 	.word	0x165e9f81

0800b0a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b082      	sub	sp, #8
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d101      	bne.n	800b0b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b0ae:	2301      	movs	r3, #1
 800b0b0:	e041      	b.n	800b136 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b0b8:	b2db      	uxtb	r3, r3
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d106      	bne.n	800b0cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b0c6:	6878      	ldr	r0, [r7, #4]
 800b0c8:	f7fa f940 	bl	800534c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	2202      	movs	r2, #2
 800b0d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	681a      	ldr	r2, [r3, #0]
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	3304      	adds	r3, #4
 800b0dc:	4619      	mov	r1, r3
 800b0de:	4610      	mov	r0, r2
 800b0e0:	f000 fb24 	bl	800b72c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	2201      	movs	r2, #1
 800b0e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	2201      	movs	r2, #1
 800b0f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	2201      	movs	r2, #1
 800b0f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	2201      	movs	r2, #1
 800b100:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	2201      	movs	r2, #1
 800b108:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	2201      	movs	r2, #1
 800b110:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	2201      	movs	r2, #1
 800b118:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	2201      	movs	r2, #1
 800b120:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	2201      	movs	r2, #1
 800b128:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	2201      	movs	r2, #1
 800b130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b134:	2300      	movs	r3, #0
}
 800b136:	4618      	mov	r0, r3
 800b138:	3708      	adds	r7, #8
 800b13a:	46bd      	mov	sp, r7
 800b13c:	bd80      	pop	{r7, pc}
	...

0800b140 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b140:	b480      	push	{r7}
 800b142:	b085      	sub	sp, #20
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b14e:	b2db      	uxtb	r3, r3
 800b150:	2b01      	cmp	r3, #1
 800b152:	d001      	beq.n	800b158 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b154:	2301      	movs	r3, #1
 800b156:	e044      	b.n	800b1e2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	2202      	movs	r2, #2
 800b15c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	68da      	ldr	r2, [r3, #12]
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	f042 0201 	orr.w	r2, r2, #1
 800b16e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	4a1e      	ldr	r2, [pc, #120]	; (800b1f0 <HAL_TIM_Base_Start_IT+0xb0>)
 800b176:	4293      	cmp	r3, r2
 800b178:	d018      	beq.n	800b1ac <HAL_TIM_Base_Start_IT+0x6c>
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b182:	d013      	beq.n	800b1ac <HAL_TIM_Base_Start_IT+0x6c>
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	4a1a      	ldr	r2, [pc, #104]	; (800b1f4 <HAL_TIM_Base_Start_IT+0xb4>)
 800b18a:	4293      	cmp	r3, r2
 800b18c:	d00e      	beq.n	800b1ac <HAL_TIM_Base_Start_IT+0x6c>
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	4a19      	ldr	r2, [pc, #100]	; (800b1f8 <HAL_TIM_Base_Start_IT+0xb8>)
 800b194:	4293      	cmp	r3, r2
 800b196:	d009      	beq.n	800b1ac <HAL_TIM_Base_Start_IT+0x6c>
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	4a17      	ldr	r2, [pc, #92]	; (800b1fc <HAL_TIM_Base_Start_IT+0xbc>)
 800b19e:	4293      	cmp	r3, r2
 800b1a0:	d004      	beq.n	800b1ac <HAL_TIM_Base_Start_IT+0x6c>
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	4a16      	ldr	r2, [pc, #88]	; (800b200 <HAL_TIM_Base_Start_IT+0xc0>)
 800b1a8:	4293      	cmp	r3, r2
 800b1aa:	d111      	bne.n	800b1d0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	689b      	ldr	r3, [r3, #8]
 800b1b2:	f003 0307 	and.w	r3, r3, #7
 800b1b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	2b06      	cmp	r3, #6
 800b1bc:	d010      	beq.n	800b1e0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	681a      	ldr	r2, [r3, #0]
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	f042 0201 	orr.w	r2, r2, #1
 800b1cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b1ce:	e007      	b.n	800b1e0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	681a      	ldr	r2, [r3, #0]
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	f042 0201 	orr.w	r2, r2, #1
 800b1de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b1e0:	2300      	movs	r3, #0
}
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	3714      	adds	r7, #20
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ec:	4770      	bx	lr
 800b1ee:	bf00      	nop
 800b1f0:	40010000 	.word	0x40010000
 800b1f4:	40000400 	.word	0x40000400
 800b1f8:	40000800 	.word	0x40000800
 800b1fc:	40000c00 	.word	0x40000c00
 800b200:	40014000 	.word	0x40014000

0800b204 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800b204:	b480      	push	{r7}
 800b206:	b083      	sub	sp, #12
 800b208:	af00      	add	r7, sp, #0
 800b20a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	68da      	ldr	r2, [r3, #12]
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	f022 0201 	bic.w	r2, r2, #1
 800b21a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	6a1a      	ldr	r2, [r3, #32]
 800b222:	f241 1311 	movw	r3, #4369	; 0x1111
 800b226:	4013      	ands	r3, r2
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d10f      	bne.n	800b24c <HAL_TIM_Base_Stop_IT+0x48>
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	6a1a      	ldr	r2, [r3, #32]
 800b232:	f240 4344 	movw	r3, #1092	; 0x444
 800b236:	4013      	ands	r3, r2
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d107      	bne.n	800b24c <HAL_TIM_Base_Stop_IT+0x48>
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	681a      	ldr	r2, [r3, #0]
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	f022 0201 	bic.w	r2, r2, #1
 800b24a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	2201      	movs	r2, #1
 800b250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800b254:	2300      	movs	r3, #0
}
 800b256:	4618      	mov	r0, r3
 800b258:	370c      	adds	r7, #12
 800b25a:	46bd      	mov	sp, r7
 800b25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b260:	4770      	bx	lr

0800b262 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800b262:	b580      	push	{r7, lr}
 800b264:	b086      	sub	sp, #24
 800b266:	af00      	add	r7, sp, #0
 800b268:	6078      	str	r0, [r7, #4]
 800b26a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d101      	bne.n	800b276 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800b272:	2301      	movs	r3, #1
 800b274:	e097      	b.n	800b3a6 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b27c:	b2db      	uxtb	r3, r3
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d106      	bne.n	800b290 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	2200      	movs	r2, #0
 800b286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800b28a:	6878      	ldr	r0, [r7, #4]
 800b28c:	f7fa f816 	bl	80052bc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	2202      	movs	r2, #2
 800b294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	689b      	ldr	r3, [r3, #8]
 800b29e:	687a      	ldr	r2, [r7, #4]
 800b2a0:	6812      	ldr	r2, [r2, #0]
 800b2a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b2a6:	f023 0307 	bic.w	r3, r3, #7
 800b2aa:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681a      	ldr	r2, [r3, #0]
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	3304      	adds	r3, #4
 800b2b4:	4619      	mov	r1, r3
 800b2b6:	4610      	mov	r0, r2
 800b2b8:	f000 fa38 	bl	800b72c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	689b      	ldr	r3, [r3, #8]
 800b2c2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	699b      	ldr	r3, [r3, #24]
 800b2ca:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	6a1b      	ldr	r3, [r3, #32]
 800b2d2:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800b2d4:	683b      	ldr	r3, [r7, #0]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	697a      	ldr	r2, [r7, #20]
 800b2da:	4313      	orrs	r3, r2
 800b2dc:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800b2de:	693b      	ldr	r3, [r7, #16]
 800b2e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b2e4:	f023 0303 	bic.w	r3, r3, #3
 800b2e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800b2ea:	683b      	ldr	r3, [r7, #0]
 800b2ec:	689a      	ldr	r2, [r3, #8]
 800b2ee:	683b      	ldr	r3, [r7, #0]
 800b2f0:	699b      	ldr	r3, [r3, #24]
 800b2f2:	021b      	lsls	r3, r3, #8
 800b2f4:	4313      	orrs	r3, r2
 800b2f6:	693a      	ldr	r2, [r7, #16]
 800b2f8:	4313      	orrs	r3, r2
 800b2fa:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800b2fc:	693b      	ldr	r3, [r7, #16]
 800b2fe:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800b302:	f023 030c 	bic.w	r3, r3, #12
 800b306:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800b308:	693b      	ldr	r3, [r7, #16]
 800b30a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b30e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b312:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800b314:	683b      	ldr	r3, [r7, #0]
 800b316:	68da      	ldr	r2, [r3, #12]
 800b318:	683b      	ldr	r3, [r7, #0]
 800b31a:	69db      	ldr	r3, [r3, #28]
 800b31c:	021b      	lsls	r3, r3, #8
 800b31e:	4313      	orrs	r3, r2
 800b320:	693a      	ldr	r2, [r7, #16]
 800b322:	4313      	orrs	r3, r2
 800b324:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800b326:	683b      	ldr	r3, [r7, #0]
 800b328:	691b      	ldr	r3, [r3, #16]
 800b32a:	011a      	lsls	r2, r3, #4
 800b32c:	683b      	ldr	r3, [r7, #0]
 800b32e:	6a1b      	ldr	r3, [r3, #32]
 800b330:	031b      	lsls	r3, r3, #12
 800b332:	4313      	orrs	r3, r2
 800b334:	693a      	ldr	r2, [r7, #16]
 800b336:	4313      	orrs	r3, r2
 800b338:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800b340:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800b348:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800b34a:	683b      	ldr	r3, [r7, #0]
 800b34c:	685a      	ldr	r2, [r3, #4]
 800b34e:	683b      	ldr	r3, [r7, #0]
 800b350:	695b      	ldr	r3, [r3, #20]
 800b352:	011b      	lsls	r3, r3, #4
 800b354:	4313      	orrs	r3, r2
 800b356:	68fa      	ldr	r2, [r7, #12]
 800b358:	4313      	orrs	r3, r2
 800b35a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	697a      	ldr	r2, [r7, #20]
 800b362:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	693a      	ldr	r2, [r7, #16]
 800b36a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	68fa      	ldr	r2, [r7, #12]
 800b372:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	2201      	movs	r2, #1
 800b378:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	2201      	movs	r2, #1
 800b380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	2201      	movs	r2, #1
 800b388:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	2201      	movs	r2, #1
 800b390:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	2201      	movs	r2, #1
 800b398:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	2201      	movs	r2, #1
 800b3a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b3a4:	2300      	movs	r3, #0
}
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	3718      	adds	r7, #24
 800b3aa:	46bd      	mov	sp, r7
 800b3ac:	bd80      	pop	{r7, pc}

0800b3ae <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b3ae:	b580      	push	{r7, lr}
 800b3b0:	b084      	sub	sp, #16
 800b3b2:	af00      	add	r7, sp, #0
 800b3b4:	6078      	str	r0, [r7, #4]
 800b3b6:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b3be:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b3c6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b3ce:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b3d6:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800b3d8:	683b      	ldr	r3, [r7, #0]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d110      	bne.n	800b400 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b3de:	7bfb      	ldrb	r3, [r7, #15]
 800b3e0:	2b01      	cmp	r3, #1
 800b3e2:	d102      	bne.n	800b3ea <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800b3e4:	7b7b      	ldrb	r3, [r7, #13]
 800b3e6:	2b01      	cmp	r3, #1
 800b3e8:	d001      	beq.n	800b3ee <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800b3ea:	2301      	movs	r3, #1
 800b3ec:	e069      	b.n	800b4c2 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	2202      	movs	r2, #2
 800b3f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	2202      	movs	r2, #2
 800b3fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b3fe:	e031      	b.n	800b464 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800b400:	683b      	ldr	r3, [r7, #0]
 800b402:	2b04      	cmp	r3, #4
 800b404:	d110      	bne.n	800b428 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b406:	7bbb      	ldrb	r3, [r7, #14]
 800b408:	2b01      	cmp	r3, #1
 800b40a:	d102      	bne.n	800b412 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b40c:	7b3b      	ldrb	r3, [r7, #12]
 800b40e:	2b01      	cmp	r3, #1
 800b410:	d001      	beq.n	800b416 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800b412:	2301      	movs	r3, #1
 800b414:	e055      	b.n	800b4c2 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	2202      	movs	r2, #2
 800b41a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	2202      	movs	r2, #2
 800b422:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b426:	e01d      	b.n	800b464 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b428:	7bfb      	ldrb	r3, [r7, #15]
 800b42a:	2b01      	cmp	r3, #1
 800b42c:	d108      	bne.n	800b440 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b42e:	7bbb      	ldrb	r3, [r7, #14]
 800b430:	2b01      	cmp	r3, #1
 800b432:	d105      	bne.n	800b440 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b434:	7b7b      	ldrb	r3, [r7, #13]
 800b436:	2b01      	cmp	r3, #1
 800b438:	d102      	bne.n	800b440 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b43a:	7b3b      	ldrb	r3, [r7, #12]
 800b43c:	2b01      	cmp	r3, #1
 800b43e:	d001      	beq.n	800b444 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800b440:	2301      	movs	r3, #1
 800b442:	e03e      	b.n	800b4c2 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	2202      	movs	r2, #2
 800b448:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	2202      	movs	r2, #2
 800b450:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	2202      	movs	r2, #2
 800b458:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	2202      	movs	r2, #2
 800b460:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800b464:	683b      	ldr	r3, [r7, #0]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d003      	beq.n	800b472 <HAL_TIM_Encoder_Start+0xc4>
 800b46a:	683b      	ldr	r3, [r7, #0]
 800b46c:	2b04      	cmp	r3, #4
 800b46e:	d008      	beq.n	800b482 <HAL_TIM_Encoder_Start+0xd4>
 800b470:	e00f      	b.n	800b492 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	2201      	movs	r2, #1
 800b478:	2100      	movs	r1, #0
 800b47a:	4618      	mov	r0, r3
 800b47c:	f000 f9d6 	bl	800b82c <TIM_CCxChannelCmd>
      break;
 800b480:	e016      	b.n	800b4b0 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	2201      	movs	r2, #1
 800b488:	2104      	movs	r1, #4
 800b48a:	4618      	mov	r0, r3
 800b48c:	f000 f9ce 	bl	800b82c <TIM_CCxChannelCmd>
      break;
 800b490:	e00e      	b.n	800b4b0 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	2201      	movs	r2, #1
 800b498:	2100      	movs	r1, #0
 800b49a:	4618      	mov	r0, r3
 800b49c:	f000 f9c6 	bl	800b82c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	2201      	movs	r2, #1
 800b4a6:	2104      	movs	r1, #4
 800b4a8:	4618      	mov	r0, r3
 800b4aa:	f000 f9bf 	bl	800b82c <TIM_CCxChannelCmd>
      break;
 800b4ae:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	681a      	ldr	r2, [r3, #0]
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	f042 0201 	orr.w	r2, r2, #1
 800b4be:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800b4c0:	2300      	movs	r3, #0
}
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	3710      	adds	r7, #16
 800b4c6:	46bd      	mov	sp, r7
 800b4c8:	bd80      	pop	{r7, pc}

0800b4ca <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b4ca:	b580      	push	{r7, lr}
 800b4cc:	b082      	sub	sp, #8
 800b4ce:	af00      	add	r7, sp, #0
 800b4d0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	691b      	ldr	r3, [r3, #16]
 800b4d8:	f003 0302 	and.w	r3, r3, #2
 800b4dc:	2b02      	cmp	r3, #2
 800b4de:	d122      	bne.n	800b526 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	68db      	ldr	r3, [r3, #12]
 800b4e6:	f003 0302 	and.w	r3, r3, #2
 800b4ea:	2b02      	cmp	r3, #2
 800b4ec:	d11b      	bne.n	800b526 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	f06f 0202 	mvn.w	r2, #2
 800b4f6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	2201      	movs	r2, #1
 800b4fc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	699b      	ldr	r3, [r3, #24]
 800b504:	f003 0303 	and.w	r3, r3, #3
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d003      	beq.n	800b514 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b50c:	6878      	ldr	r0, [r7, #4]
 800b50e:	f000 f8ee 	bl	800b6ee <HAL_TIM_IC_CaptureCallback>
 800b512:	e005      	b.n	800b520 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b514:	6878      	ldr	r0, [r7, #4]
 800b516:	f000 f8e0 	bl	800b6da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b51a:	6878      	ldr	r0, [r7, #4]
 800b51c:	f000 f8f1 	bl	800b702 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	2200      	movs	r2, #0
 800b524:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	691b      	ldr	r3, [r3, #16]
 800b52c:	f003 0304 	and.w	r3, r3, #4
 800b530:	2b04      	cmp	r3, #4
 800b532:	d122      	bne.n	800b57a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	68db      	ldr	r3, [r3, #12]
 800b53a:	f003 0304 	and.w	r3, r3, #4
 800b53e:	2b04      	cmp	r3, #4
 800b540:	d11b      	bne.n	800b57a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	f06f 0204 	mvn.w	r2, #4
 800b54a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	2202      	movs	r2, #2
 800b550:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	699b      	ldr	r3, [r3, #24]
 800b558:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d003      	beq.n	800b568 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b560:	6878      	ldr	r0, [r7, #4]
 800b562:	f000 f8c4 	bl	800b6ee <HAL_TIM_IC_CaptureCallback>
 800b566:	e005      	b.n	800b574 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b568:	6878      	ldr	r0, [r7, #4]
 800b56a:	f000 f8b6 	bl	800b6da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b56e:	6878      	ldr	r0, [r7, #4]
 800b570:	f000 f8c7 	bl	800b702 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	2200      	movs	r2, #0
 800b578:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	691b      	ldr	r3, [r3, #16]
 800b580:	f003 0308 	and.w	r3, r3, #8
 800b584:	2b08      	cmp	r3, #8
 800b586:	d122      	bne.n	800b5ce <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	68db      	ldr	r3, [r3, #12]
 800b58e:	f003 0308 	and.w	r3, r3, #8
 800b592:	2b08      	cmp	r3, #8
 800b594:	d11b      	bne.n	800b5ce <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	f06f 0208 	mvn.w	r2, #8
 800b59e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	2204      	movs	r2, #4
 800b5a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	69db      	ldr	r3, [r3, #28]
 800b5ac:	f003 0303 	and.w	r3, r3, #3
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d003      	beq.n	800b5bc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b5b4:	6878      	ldr	r0, [r7, #4]
 800b5b6:	f000 f89a 	bl	800b6ee <HAL_TIM_IC_CaptureCallback>
 800b5ba:	e005      	b.n	800b5c8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b5bc:	6878      	ldr	r0, [r7, #4]
 800b5be:	f000 f88c 	bl	800b6da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b5c2:	6878      	ldr	r0, [r7, #4]
 800b5c4:	f000 f89d 	bl	800b702 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	691b      	ldr	r3, [r3, #16]
 800b5d4:	f003 0310 	and.w	r3, r3, #16
 800b5d8:	2b10      	cmp	r3, #16
 800b5da:	d122      	bne.n	800b622 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	68db      	ldr	r3, [r3, #12]
 800b5e2:	f003 0310 	and.w	r3, r3, #16
 800b5e6:	2b10      	cmp	r3, #16
 800b5e8:	d11b      	bne.n	800b622 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	f06f 0210 	mvn.w	r2, #16
 800b5f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	2208      	movs	r2, #8
 800b5f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	69db      	ldr	r3, [r3, #28]
 800b600:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b604:	2b00      	cmp	r3, #0
 800b606:	d003      	beq.n	800b610 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b608:	6878      	ldr	r0, [r7, #4]
 800b60a:	f000 f870 	bl	800b6ee <HAL_TIM_IC_CaptureCallback>
 800b60e:	e005      	b.n	800b61c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b610:	6878      	ldr	r0, [r7, #4]
 800b612:	f000 f862 	bl	800b6da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b616:	6878      	ldr	r0, [r7, #4]
 800b618:	f000 f873 	bl	800b702 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	2200      	movs	r2, #0
 800b620:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	691b      	ldr	r3, [r3, #16]
 800b628:	f003 0301 	and.w	r3, r3, #1
 800b62c:	2b01      	cmp	r3, #1
 800b62e:	d10e      	bne.n	800b64e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	68db      	ldr	r3, [r3, #12]
 800b636:	f003 0301 	and.w	r3, r3, #1
 800b63a:	2b01      	cmp	r3, #1
 800b63c:	d107      	bne.n	800b64e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	f06f 0201 	mvn.w	r2, #1
 800b646:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b648:	6878      	ldr	r0, [r7, #4]
 800b64a:	f7f9 fd3b 	bl	80050c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	691b      	ldr	r3, [r3, #16]
 800b654:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b658:	2b80      	cmp	r3, #128	; 0x80
 800b65a:	d10e      	bne.n	800b67a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	68db      	ldr	r3, [r3, #12]
 800b662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b666:	2b80      	cmp	r3, #128	; 0x80
 800b668:	d107      	bne.n	800b67a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b672:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b674:	6878      	ldr	r0, [r7, #4]
 800b676:	f000 f977 	bl	800b968 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	691b      	ldr	r3, [r3, #16]
 800b680:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b684:	2b40      	cmp	r3, #64	; 0x40
 800b686:	d10e      	bne.n	800b6a6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	68db      	ldr	r3, [r3, #12]
 800b68e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b692:	2b40      	cmp	r3, #64	; 0x40
 800b694:	d107      	bne.n	800b6a6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b69e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b6a0:	6878      	ldr	r0, [r7, #4]
 800b6a2:	f000 f838 	bl	800b716 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	691b      	ldr	r3, [r3, #16]
 800b6ac:	f003 0320 	and.w	r3, r3, #32
 800b6b0:	2b20      	cmp	r3, #32
 800b6b2:	d10e      	bne.n	800b6d2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	68db      	ldr	r3, [r3, #12]
 800b6ba:	f003 0320 	and.w	r3, r3, #32
 800b6be:	2b20      	cmp	r3, #32
 800b6c0:	d107      	bne.n	800b6d2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	f06f 0220 	mvn.w	r2, #32
 800b6ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b6cc:	6878      	ldr	r0, [r7, #4]
 800b6ce:	f000 f941 	bl	800b954 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b6d2:	bf00      	nop
 800b6d4:	3708      	adds	r7, #8
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	bd80      	pop	{r7, pc}

0800b6da <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b6da:	b480      	push	{r7}
 800b6dc:	b083      	sub	sp, #12
 800b6de:	af00      	add	r7, sp, #0
 800b6e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b6e2:	bf00      	nop
 800b6e4:	370c      	adds	r7, #12
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ec:	4770      	bx	lr

0800b6ee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b6ee:	b480      	push	{r7}
 800b6f0:	b083      	sub	sp, #12
 800b6f2:	af00      	add	r7, sp, #0
 800b6f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b6f6:	bf00      	nop
 800b6f8:	370c      	adds	r7, #12
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b700:	4770      	bx	lr

0800b702 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b702:	b480      	push	{r7}
 800b704:	b083      	sub	sp, #12
 800b706:	af00      	add	r7, sp, #0
 800b708:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b70a:	bf00      	nop
 800b70c:	370c      	adds	r7, #12
 800b70e:	46bd      	mov	sp, r7
 800b710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b714:	4770      	bx	lr

0800b716 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b716:	b480      	push	{r7}
 800b718:	b083      	sub	sp, #12
 800b71a:	af00      	add	r7, sp, #0
 800b71c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b71e:	bf00      	nop
 800b720:	370c      	adds	r7, #12
 800b722:	46bd      	mov	sp, r7
 800b724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b728:	4770      	bx	lr
	...

0800b72c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b72c:	b480      	push	{r7}
 800b72e:	b085      	sub	sp, #20
 800b730:	af00      	add	r7, sp, #0
 800b732:	6078      	str	r0, [r7, #4]
 800b734:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	4a34      	ldr	r2, [pc, #208]	; (800b810 <TIM_Base_SetConfig+0xe4>)
 800b740:	4293      	cmp	r3, r2
 800b742:	d00f      	beq.n	800b764 <TIM_Base_SetConfig+0x38>
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b74a:	d00b      	beq.n	800b764 <TIM_Base_SetConfig+0x38>
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	4a31      	ldr	r2, [pc, #196]	; (800b814 <TIM_Base_SetConfig+0xe8>)
 800b750:	4293      	cmp	r3, r2
 800b752:	d007      	beq.n	800b764 <TIM_Base_SetConfig+0x38>
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	4a30      	ldr	r2, [pc, #192]	; (800b818 <TIM_Base_SetConfig+0xec>)
 800b758:	4293      	cmp	r3, r2
 800b75a:	d003      	beq.n	800b764 <TIM_Base_SetConfig+0x38>
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	4a2f      	ldr	r2, [pc, #188]	; (800b81c <TIM_Base_SetConfig+0xf0>)
 800b760:	4293      	cmp	r3, r2
 800b762:	d108      	bne.n	800b776 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b76a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b76c:	683b      	ldr	r3, [r7, #0]
 800b76e:	685b      	ldr	r3, [r3, #4]
 800b770:	68fa      	ldr	r2, [r7, #12]
 800b772:	4313      	orrs	r3, r2
 800b774:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	4a25      	ldr	r2, [pc, #148]	; (800b810 <TIM_Base_SetConfig+0xe4>)
 800b77a:	4293      	cmp	r3, r2
 800b77c:	d01b      	beq.n	800b7b6 <TIM_Base_SetConfig+0x8a>
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b784:	d017      	beq.n	800b7b6 <TIM_Base_SetConfig+0x8a>
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	4a22      	ldr	r2, [pc, #136]	; (800b814 <TIM_Base_SetConfig+0xe8>)
 800b78a:	4293      	cmp	r3, r2
 800b78c:	d013      	beq.n	800b7b6 <TIM_Base_SetConfig+0x8a>
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	4a21      	ldr	r2, [pc, #132]	; (800b818 <TIM_Base_SetConfig+0xec>)
 800b792:	4293      	cmp	r3, r2
 800b794:	d00f      	beq.n	800b7b6 <TIM_Base_SetConfig+0x8a>
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	4a20      	ldr	r2, [pc, #128]	; (800b81c <TIM_Base_SetConfig+0xf0>)
 800b79a:	4293      	cmp	r3, r2
 800b79c:	d00b      	beq.n	800b7b6 <TIM_Base_SetConfig+0x8a>
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	4a1f      	ldr	r2, [pc, #124]	; (800b820 <TIM_Base_SetConfig+0xf4>)
 800b7a2:	4293      	cmp	r3, r2
 800b7a4:	d007      	beq.n	800b7b6 <TIM_Base_SetConfig+0x8a>
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	4a1e      	ldr	r2, [pc, #120]	; (800b824 <TIM_Base_SetConfig+0xf8>)
 800b7aa:	4293      	cmp	r3, r2
 800b7ac:	d003      	beq.n	800b7b6 <TIM_Base_SetConfig+0x8a>
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	4a1d      	ldr	r2, [pc, #116]	; (800b828 <TIM_Base_SetConfig+0xfc>)
 800b7b2:	4293      	cmp	r3, r2
 800b7b4:	d108      	bne.n	800b7c8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b7bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b7be:	683b      	ldr	r3, [r7, #0]
 800b7c0:	68db      	ldr	r3, [r3, #12]
 800b7c2:	68fa      	ldr	r2, [r7, #12]
 800b7c4:	4313      	orrs	r3, r2
 800b7c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b7ce:	683b      	ldr	r3, [r7, #0]
 800b7d0:	695b      	ldr	r3, [r3, #20]
 800b7d2:	4313      	orrs	r3, r2
 800b7d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	68fa      	ldr	r2, [r7, #12]
 800b7da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b7dc:	683b      	ldr	r3, [r7, #0]
 800b7de:	689a      	ldr	r2, [r3, #8]
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b7e4:	683b      	ldr	r3, [r7, #0]
 800b7e6:	681a      	ldr	r2, [r3, #0]
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	4a08      	ldr	r2, [pc, #32]	; (800b810 <TIM_Base_SetConfig+0xe4>)
 800b7f0:	4293      	cmp	r3, r2
 800b7f2:	d103      	bne.n	800b7fc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b7f4:	683b      	ldr	r3, [r7, #0]
 800b7f6:	691a      	ldr	r2, [r3, #16]
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	2201      	movs	r2, #1
 800b800:	615a      	str	r2, [r3, #20]
}
 800b802:	bf00      	nop
 800b804:	3714      	adds	r7, #20
 800b806:	46bd      	mov	sp, r7
 800b808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b80c:	4770      	bx	lr
 800b80e:	bf00      	nop
 800b810:	40010000 	.word	0x40010000
 800b814:	40000400 	.word	0x40000400
 800b818:	40000800 	.word	0x40000800
 800b81c:	40000c00 	.word	0x40000c00
 800b820:	40014000 	.word	0x40014000
 800b824:	40014400 	.word	0x40014400
 800b828:	40014800 	.word	0x40014800

0800b82c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b82c:	b480      	push	{r7}
 800b82e:	b087      	sub	sp, #28
 800b830:	af00      	add	r7, sp, #0
 800b832:	60f8      	str	r0, [r7, #12]
 800b834:	60b9      	str	r1, [r7, #8]
 800b836:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b838:	68bb      	ldr	r3, [r7, #8]
 800b83a:	f003 031f 	and.w	r3, r3, #31
 800b83e:	2201      	movs	r2, #1
 800b840:	fa02 f303 	lsl.w	r3, r2, r3
 800b844:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	6a1a      	ldr	r2, [r3, #32]
 800b84a:	697b      	ldr	r3, [r7, #20]
 800b84c:	43db      	mvns	r3, r3
 800b84e:	401a      	ands	r2, r3
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	6a1a      	ldr	r2, [r3, #32]
 800b858:	68bb      	ldr	r3, [r7, #8]
 800b85a:	f003 031f 	and.w	r3, r3, #31
 800b85e:	6879      	ldr	r1, [r7, #4]
 800b860:	fa01 f303 	lsl.w	r3, r1, r3
 800b864:	431a      	orrs	r2, r3
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	621a      	str	r2, [r3, #32]
}
 800b86a:	bf00      	nop
 800b86c:	371c      	adds	r7, #28
 800b86e:	46bd      	mov	sp, r7
 800b870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b874:	4770      	bx	lr
	...

0800b878 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b878:	b480      	push	{r7}
 800b87a:	b085      	sub	sp, #20
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	6078      	str	r0, [r7, #4]
 800b880:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b888:	2b01      	cmp	r3, #1
 800b88a:	d101      	bne.n	800b890 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b88c:	2302      	movs	r3, #2
 800b88e:	e050      	b.n	800b932 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	2201      	movs	r2, #1
 800b894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	2202      	movs	r2, #2
 800b89c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	685b      	ldr	r3, [r3, #4]
 800b8a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	689b      	ldr	r3, [r3, #8]
 800b8ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b8b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b8b8:	683b      	ldr	r3, [r7, #0]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	68fa      	ldr	r2, [r7, #12]
 800b8be:	4313      	orrs	r3, r2
 800b8c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	68fa      	ldr	r2, [r7, #12]
 800b8c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	4a1c      	ldr	r2, [pc, #112]	; (800b940 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800b8d0:	4293      	cmp	r3, r2
 800b8d2:	d018      	beq.n	800b906 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b8dc:	d013      	beq.n	800b906 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	4a18      	ldr	r2, [pc, #96]	; (800b944 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b8e4:	4293      	cmp	r3, r2
 800b8e6:	d00e      	beq.n	800b906 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	4a16      	ldr	r2, [pc, #88]	; (800b948 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800b8ee:	4293      	cmp	r3, r2
 800b8f0:	d009      	beq.n	800b906 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	4a15      	ldr	r2, [pc, #84]	; (800b94c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800b8f8:	4293      	cmp	r3, r2
 800b8fa:	d004      	beq.n	800b906 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	4a13      	ldr	r2, [pc, #76]	; (800b950 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800b902:	4293      	cmp	r3, r2
 800b904:	d10c      	bne.n	800b920 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b906:	68bb      	ldr	r3, [r7, #8]
 800b908:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b90c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b90e:	683b      	ldr	r3, [r7, #0]
 800b910:	685b      	ldr	r3, [r3, #4]
 800b912:	68ba      	ldr	r2, [r7, #8]
 800b914:	4313      	orrs	r3, r2
 800b916:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	68ba      	ldr	r2, [r7, #8]
 800b91e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	2201      	movs	r2, #1
 800b924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	2200      	movs	r2, #0
 800b92c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b930:	2300      	movs	r3, #0
}
 800b932:	4618      	mov	r0, r3
 800b934:	3714      	adds	r7, #20
 800b936:	46bd      	mov	sp, r7
 800b938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b93c:	4770      	bx	lr
 800b93e:	bf00      	nop
 800b940:	40010000 	.word	0x40010000
 800b944:	40000400 	.word	0x40000400
 800b948:	40000800 	.word	0x40000800
 800b94c:	40000c00 	.word	0x40000c00
 800b950:	40014000 	.word	0x40014000

0800b954 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b954:	b480      	push	{r7}
 800b956:	b083      	sub	sp, #12
 800b958:	af00      	add	r7, sp, #0
 800b95a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b95c:	bf00      	nop
 800b95e:	370c      	adds	r7, #12
 800b960:	46bd      	mov	sp, r7
 800b962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b966:	4770      	bx	lr

0800b968 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b968:	b480      	push	{r7}
 800b96a:	b083      	sub	sp, #12
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b970:	bf00      	nop
 800b972:	370c      	adds	r7, #12
 800b974:	46bd      	mov	sp, r7
 800b976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97a:	4770      	bx	lr

0800b97c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b97c:	b580      	push	{r7, lr}
 800b97e:	b082      	sub	sp, #8
 800b980:	af00      	add	r7, sp, #0
 800b982:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	2b00      	cmp	r3, #0
 800b988:	d101      	bne.n	800b98e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b98a:	2301      	movs	r3, #1
 800b98c:	e03f      	b.n	800ba0e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b994:	b2db      	uxtb	r3, r3
 800b996:	2b00      	cmp	r3, #0
 800b998:	d106      	bne.n	800b9a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	2200      	movs	r2, #0
 800b99e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b9a2:	6878      	ldr	r0, [r7, #4]
 800b9a4:	f7f9 fcfa 	bl	800539c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	2224      	movs	r2, #36	; 0x24
 800b9ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	68da      	ldr	r2, [r3, #12]
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b9be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b9c0:	6878      	ldr	r0, [r7, #4]
 800b9c2:	f001 f80b 	bl	800c9dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	691a      	ldr	r2, [r3, #16]
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b9d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	695a      	ldr	r2, [r3, #20]
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b9e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	68da      	ldr	r2, [r3, #12]
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b9f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	2220      	movs	r2, #32
 800ba00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	2220      	movs	r2, #32
 800ba08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800ba0c:	2300      	movs	r3, #0
}
 800ba0e:	4618      	mov	r0, r3
 800ba10:	3708      	adds	r7, #8
 800ba12:	46bd      	mov	sp, r7
 800ba14:	bd80      	pop	{r7, pc}

0800ba16 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ba16:	b580      	push	{r7, lr}
 800ba18:	b08a      	sub	sp, #40	; 0x28
 800ba1a:	af02      	add	r7, sp, #8
 800ba1c:	60f8      	str	r0, [r7, #12]
 800ba1e:	60b9      	str	r1, [r7, #8]
 800ba20:	603b      	str	r3, [r7, #0]
 800ba22:	4613      	mov	r3, r2
 800ba24:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800ba26:	2300      	movs	r3, #0
 800ba28:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ba30:	b2db      	uxtb	r3, r3
 800ba32:	2b20      	cmp	r3, #32
 800ba34:	d17c      	bne.n	800bb30 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800ba36:	68bb      	ldr	r3, [r7, #8]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d002      	beq.n	800ba42 <HAL_UART_Transmit+0x2c>
 800ba3c:	88fb      	ldrh	r3, [r7, #6]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d101      	bne.n	800ba46 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800ba42:	2301      	movs	r3, #1
 800ba44:	e075      	b.n	800bb32 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ba4c:	2b01      	cmp	r3, #1
 800ba4e:	d101      	bne.n	800ba54 <HAL_UART_Transmit+0x3e>
 800ba50:	2302      	movs	r3, #2
 800ba52:	e06e      	b.n	800bb32 <HAL_UART_Transmit+0x11c>
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	2201      	movs	r2, #1
 800ba58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	2200      	movs	r2, #0
 800ba60:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	2221      	movs	r2, #33	; 0x21
 800ba66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ba6a:	f7fa ffb7 	bl	80069dc <HAL_GetTick>
 800ba6e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	88fa      	ldrh	r2, [r7, #6]
 800ba74:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	88fa      	ldrh	r2, [r7, #6]
 800ba7a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	689b      	ldr	r3, [r3, #8]
 800ba80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ba84:	d108      	bne.n	800ba98 <HAL_UART_Transmit+0x82>
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	691b      	ldr	r3, [r3, #16]
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d104      	bne.n	800ba98 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800ba8e:	2300      	movs	r3, #0
 800ba90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ba92:	68bb      	ldr	r3, [r7, #8]
 800ba94:	61bb      	str	r3, [r7, #24]
 800ba96:	e003      	b.n	800baa0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800ba98:	68bb      	ldr	r3, [r7, #8]
 800ba9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	2200      	movs	r2, #0
 800baa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800baa8:	e02a      	b.n	800bb00 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800baaa:	683b      	ldr	r3, [r7, #0]
 800baac:	9300      	str	r3, [sp, #0]
 800baae:	697b      	ldr	r3, [r7, #20]
 800bab0:	2200      	movs	r2, #0
 800bab2:	2180      	movs	r1, #128	; 0x80
 800bab4:	68f8      	ldr	r0, [r7, #12]
 800bab6:	f000 fcc3 	bl	800c440 <UART_WaitOnFlagUntilTimeout>
 800baba:	4603      	mov	r3, r0
 800babc:	2b00      	cmp	r3, #0
 800babe:	d001      	beq.n	800bac4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800bac0:	2303      	movs	r3, #3
 800bac2:	e036      	b.n	800bb32 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800bac4:	69fb      	ldr	r3, [r7, #28]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d10b      	bne.n	800bae2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800baca:	69bb      	ldr	r3, [r7, #24]
 800bacc:	881b      	ldrh	r3, [r3, #0]
 800bace:	461a      	mov	r2, r3
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bad8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800bada:	69bb      	ldr	r3, [r7, #24]
 800badc:	3302      	adds	r3, #2
 800bade:	61bb      	str	r3, [r7, #24]
 800bae0:	e007      	b.n	800baf2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800bae2:	69fb      	ldr	r3, [r7, #28]
 800bae4:	781a      	ldrb	r2, [r3, #0]
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800baec:	69fb      	ldr	r3, [r7, #28]
 800baee:	3301      	adds	r3, #1
 800baf0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800baf6:	b29b      	uxth	r3, r3
 800baf8:	3b01      	subs	r3, #1
 800bafa:	b29a      	uxth	r2, r3
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bb04:	b29b      	uxth	r3, r3
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d1cf      	bne.n	800baaa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800bb0a:	683b      	ldr	r3, [r7, #0]
 800bb0c:	9300      	str	r3, [sp, #0]
 800bb0e:	697b      	ldr	r3, [r7, #20]
 800bb10:	2200      	movs	r2, #0
 800bb12:	2140      	movs	r1, #64	; 0x40
 800bb14:	68f8      	ldr	r0, [r7, #12]
 800bb16:	f000 fc93 	bl	800c440 <UART_WaitOnFlagUntilTimeout>
 800bb1a:	4603      	mov	r3, r0
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d001      	beq.n	800bb24 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800bb20:	2303      	movs	r3, #3
 800bb22:	e006      	b.n	800bb32 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	2220      	movs	r2, #32
 800bb28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800bb2c:	2300      	movs	r3, #0
 800bb2e:	e000      	b.n	800bb32 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800bb30:	2302      	movs	r3, #2
  }
}
 800bb32:	4618      	mov	r0, r3
 800bb34:	3720      	adds	r7, #32
 800bb36:	46bd      	mov	sp, r7
 800bb38:	bd80      	pop	{r7, pc}

0800bb3a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bb3a:	b580      	push	{r7, lr}
 800bb3c:	b08a      	sub	sp, #40	; 0x28
 800bb3e:	af02      	add	r7, sp, #8
 800bb40:	60f8      	str	r0, [r7, #12]
 800bb42:	60b9      	str	r1, [r7, #8]
 800bb44:	603b      	str	r3, [r7, #0]
 800bb46:	4613      	mov	r3, r2
 800bb48:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bb54:	b2db      	uxtb	r3, r3
 800bb56:	2b20      	cmp	r3, #32
 800bb58:	f040 808c 	bne.w	800bc74 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800bb5c:	68bb      	ldr	r3, [r7, #8]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d002      	beq.n	800bb68 <HAL_UART_Receive+0x2e>
 800bb62:	88fb      	ldrh	r3, [r7, #6]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d101      	bne.n	800bb6c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800bb68:	2301      	movs	r3, #1
 800bb6a:	e084      	b.n	800bc76 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bb72:	2b01      	cmp	r3, #1
 800bb74:	d101      	bne.n	800bb7a <HAL_UART_Receive+0x40>
 800bb76:	2302      	movs	r3, #2
 800bb78:	e07d      	b.n	800bc76 <HAL_UART_Receive+0x13c>
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	2201      	movs	r2, #1
 800bb7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	2200      	movs	r2, #0
 800bb86:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	2222      	movs	r2, #34	; 0x22
 800bb8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	2200      	movs	r2, #0
 800bb94:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bb96:	f7fa ff21 	bl	80069dc <HAL_GetTick>
 800bb9a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	88fa      	ldrh	r2, [r7, #6]
 800bba0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	88fa      	ldrh	r2, [r7, #6]
 800bba6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	689b      	ldr	r3, [r3, #8]
 800bbac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bbb0:	d108      	bne.n	800bbc4 <HAL_UART_Receive+0x8a>
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	691b      	ldr	r3, [r3, #16]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d104      	bne.n	800bbc4 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800bbba:	2300      	movs	r3, #0
 800bbbc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800bbbe:	68bb      	ldr	r3, [r7, #8]
 800bbc0:	61bb      	str	r3, [r7, #24]
 800bbc2:	e003      	b.n	800bbcc <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800bbc4:	68bb      	ldr	r3, [r7, #8]
 800bbc6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bbc8:	2300      	movs	r3, #0
 800bbca:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	2200      	movs	r2, #0
 800bbd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800bbd4:	e043      	b.n	800bc5e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800bbd6:	683b      	ldr	r3, [r7, #0]
 800bbd8:	9300      	str	r3, [sp, #0]
 800bbda:	697b      	ldr	r3, [r7, #20]
 800bbdc:	2200      	movs	r2, #0
 800bbde:	2120      	movs	r1, #32
 800bbe0:	68f8      	ldr	r0, [r7, #12]
 800bbe2:	f000 fc2d 	bl	800c440 <UART_WaitOnFlagUntilTimeout>
 800bbe6:	4603      	mov	r3, r0
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d001      	beq.n	800bbf0 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800bbec:	2303      	movs	r3, #3
 800bbee:	e042      	b.n	800bc76 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800bbf0:	69fb      	ldr	r3, [r7, #28]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d10c      	bne.n	800bc10 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	685b      	ldr	r3, [r3, #4]
 800bbfc:	b29b      	uxth	r3, r3
 800bbfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc02:	b29a      	uxth	r2, r3
 800bc04:	69bb      	ldr	r3, [r7, #24]
 800bc06:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800bc08:	69bb      	ldr	r3, [r7, #24]
 800bc0a:	3302      	adds	r3, #2
 800bc0c:	61bb      	str	r3, [r7, #24]
 800bc0e:	e01f      	b.n	800bc50 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	689b      	ldr	r3, [r3, #8]
 800bc14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc18:	d007      	beq.n	800bc2a <HAL_UART_Receive+0xf0>
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	689b      	ldr	r3, [r3, #8]
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d10a      	bne.n	800bc38 <HAL_UART_Receive+0xfe>
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	691b      	ldr	r3, [r3, #16]
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d106      	bne.n	800bc38 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	685b      	ldr	r3, [r3, #4]
 800bc30:	b2da      	uxtb	r2, r3
 800bc32:	69fb      	ldr	r3, [r7, #28]
 800bc34:	701a      	strb	r2, [r3, #0]
 800bc36:	e008      	b.n	800bc4a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	685b      	ldr	r3, [r3, #4]
 800bc3e:	b2db      	uxtb	r3, r3
 800bc40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc44:	b2da      	uxtb	r2, r3
 800bc46:	69fb      	ldr	r3, [r7, #28]
 800bc48:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800bc4a:	69fb      	ldr	r3, [r7, #28]
 800bc4c:	3301      	adds	r3, #1
 800bc4e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bc54:	b29b      	uxth	r3, r3
 800bc56:	3b01      	subs	r3, #1
 800bc58:	b29a      	uxth	r2, r3
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bc62:	b29b      	uxth	r3, r3
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d1b6      	bne.n	800bbd6 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	2220      	movs	r2, #32
 800bc6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800bc70:	2300      	movs	r3, #0
 800bc72:	e000      	b.n	800bc76 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800bc74:	2302      	movs	r3, #2
  }
}
 800bc76:	4618      	mov	r0, r3
 800bc78:	3720      	adds	r7, #32
 800bc7a:	46bd      	mov	sp, r7
 800bc7c:	bd80      	pop	{r7, pc}

0800bc7e <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bc7e:	b580      	push	{r7, lr}
 800bc80:	b084      	sub	sp, #16
 800bc82:	af00      	add	r7, sp, #0
 800bc84:	60f8      	str	r0, [r7, #12]
 800bc86:	60b9      	str	r1, [r7, #8]
 800bc88:	4613      	mov	r3, r2
 800bc8a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bc92:	b2db      	uxtb	r3, r3
 800bc94:	2b20      	cmp	r3, #32
 800bc96:	d11d      	bne.n	800bcd4 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800bc98:	68bb      	ldr	r3, [r7, #8]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d002      	beq.n	800bca4 <HAL_UART_Receive_DMA+0x26>
 800bc9e:	88fb      	ldrh	r3, [r7, #6]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d101      	bne.n	800bca8 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800bca4:	2301      	movs	r3, #1
 800bca6:	e016      	b.n	800bcd6 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bcae:	2b01      	cmp	r3, #1
 800bcb0:	d101      	bne.n	800bcb6 <HAL_UART_Receive_DMA+0x38>
 800bcb2:	2302      	movs	r3, #2
 800bcb4:	e00f      	b.n	800bcd6 <HAL_UART_Receive_DMA+0x58>
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	2201      	movs	r2, #1
 800bcba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	2200      	movs	r2, #0
 800bcc2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800bcc4:	88fb      	ldrh	r3, [r7, #6]
 800bcc6:	461a      	mov	r2, r3
 800bcc8:	68b9      	ldr	r1, [r7, #8]
 800bcca:	68f8      	ldr	r0, [r7, #12]
 800bccc:	f000 fc26 	bl	800c51c <UART_Start_Receive_DMA>
 800bcd0:	4603      	mov	r3, r0
 800bcd2:	e000      	b.n	800bcd6 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800bcd4:	2302      	movs	r3, #2
  }
}
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	3710      	adds	r7, #16
 800bcda:	46bd      	mov	sp, r7
 800bcdc:	bd80      	pop	{r7, pc}
	...

0800bce0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bce0:	b580      	push	{r7, lr}
 800bce2:	b0ba      	sub	sp, #232	; 0xe8
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	68db      	ldr	r3, [r3, #12]
 800bcf8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	695b      	ldr	r3, [r3, #20]
 800bd02:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800bd06:	2300      	movs	r3, #0
 800bd08:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800bd0c:	2300      	movs	r3, #0
 800bd0e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800bd12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd16:	f003 030f 	and.w	r3, r3, #15
 800bd1a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800bd1e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d10f      	bne.n	800bd46 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bd26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd2a:	f003 0320 	and.w	r3, r3, #32
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d009      	beq.n	800bd46 <HAL_UART_IRQHandler+0x66>
 800bd32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bd36:	f003 0320 	and.w	r3, r3, #32
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d003      	beq.n	800bd46 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800bd3e:	6878      	ldr	r0, [r7, #4]
 800bd40:	f000 fd91 	bl	800c866 <UART_Receive_IT>
      return;
 800bd44:	e256      	b.n	800c1f4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800bd46:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	f000 80de 	beq.w	800bf0c <HAL_UART_IRQHandler+0x22c>
 800bd50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bd54:	f003 0301 	and.w	r3, r3, #1
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d106      	bne.n	800bd6a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800bd5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bd60:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	f000 80d1 	beq.w	800bf0c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800bd6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd6e:	f003 0301 	and.w	r3, r3, #1
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d00b      	beq.n	800bd8e <HAL_UART_IRQHandler+0xae>
 800bd76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bd7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d005      	beq.n	800bd8e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd86:	f043 0201 	orr.w	r2, r3, #1
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bd8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd92:	f003 0304 	and.w	r3, r3, #4
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d00b      	beq.n	800bdb2 <HAL_UART_IRQHandler+0xd2>
 800bd9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bd9e:	f003 0301 	and.w	r3, r3, #1
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d005      	beq.n	800bdb2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdaa:	f043 0202 	orr.w	r2, r3, #2
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bdb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bdb6:	f003 0302 	and.w	r3, r3, #2
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d00b      	beq.n	800bdd6 <HAL_UART_IRQHandler+0xf6>
 800bdbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bdc2:	f003 0301 	and.w	r3, r3, #1
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d005      	beq.n	800bdd6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdce:	f043 0204 	orr.w	r2, r3, #4
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800bdd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bdda:	f003 0308 	and.w	r3, r3, #8
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d011      	beq.n	800be06 <HAL_UART_IRQHandler+0x126>
 800bde2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bde6:	f003 0320 	and.w	r3, r3, #32
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d105      	bne.n	800bdfa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800bdee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bdf2:	f003 0301 	and.w	r3, r3, #1
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d005      	beq.n	800be06 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdfe:	f043 0208 	orr.w	r2, r3, #8
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	f000 81ed 	beq.w	800c1ea <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800be10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be14:	f003 0320 	and.w	r3, r3, #32
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d008      	beq.n	800be2e <HAL_UART_IRQHandler+0x14e>
 800be1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800be20:	f003 0320 	and.w	r3, r3, #32
 800be24:	2b00      	cmp	r3, #0
 800be26:	d002      	beq.n	800be2e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800be28:	6878      	ldr	r0, [r7, #4]
 800be2a:	f000 fd1c 	bl	800c866 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	695b      	ldr	r3, [r3, #20]
 800be34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be38:	2b40      	cmp	r3, #64	; 0x40
 800be3a:	bf0c      	ite	eq
 800be3c:	2301      	moveq	r3, #1
 800be3e:	2300      	movne	r3, #0
 800be40:	b2db      	uxtb	r3, r3
 800be42:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be4a:	f003 0308 	and.w	r3, r3, #8
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d103      	bne.n	800be5a <HAL_UART_IRQHandler+0x17a>
 800be52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800be56:	2b00      	cmp	r3, #0
 800be58:	d04f      	beq.n	800befa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800be5a:	6878      	ldr	r0, [r7, #4]
 800be5c:	f000 fc24 	bl	800c6a8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	695b      	ldr	r3, [r3, #20]
 800be66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be6a:	2b40      	cmp	r3, #64	; 0x40
 800be6c:	d141      	bne.n	800bef2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	3314      	adds	r3, #20
 800be74:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be78:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800be7c:	e853 3f00 	ldrex	r3, [r3]
 800be80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800be84:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800be88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800be8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	3314      	adds	r3, #20
 800be96:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800be9a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800be9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bea2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800bea6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800beaa:	e841 2300 	strex	r3, r2, [r1]
 800beae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800beb2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d1d9      	bne.n	800be6e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d013      	beq.n	800beea <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bec6:	4a7d      	ldr	r2, [pc, #500]	; (800c0bc <HAL_UART_IRQHandler+0x3dc>)
 800bec8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bece:	4618      	mov	r0, r3
 800bed0:	f7fb f83c 	bl	8006f4c <HAL_DMA_Abort_IT>
 800bed4:	4603      	mov	r3, r0
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d016      	beq.n	800bf08 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bede:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bee0:	687a      	ldr	r2, [r7, #4]
 800bee2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800bee4:	4610      	mov	r0, r2
 800bee6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bee8:	e00e      	b.n	800bf08 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800beea:	6878      	ldr	r0, [r7, #4]
 800beec:	f000 f99a 	bl	800c224 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bef0:	e00a      	b.n	800bf08 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bef2:	6878      	ldr	r0, [r7, #4]
 800bef4:	f000 f996 	bl	800c224 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bef8:	e006      	b.n	800bf08 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800befa:	6878      	ldr	r0, [r7, #4]
 800befc:	f000 f992 	bl	800c224 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	2200      	movs	r2, #0
 800bf04:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800bf06:	e170      	b.n	800c1ea <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bf08:	bf00      	nop
    return;
 800bf0a:	e16e      	b.n	800c1ea <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf10:	2b01      	cmp	r3, #1
 800bf12:	f040 814a 	bne.w	800c1aa <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800bf16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf1a:	f003 0310 	and.w	r3, r3, #16
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	f000 8143 	beq.w	800c1aa <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800bf24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bf28:	f003 0310 	and.w	r3, r3, #16
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	f000 813c 	beq.w	800c1aa <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bf32:	2300      	movs	r3, #0
 800bf34:	60bb      	str	r3, [r7, #8]
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	60bb      	str	r3, [r7, #8]
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	685b      	ldr	r3, [r3, #4]
 800bf44:	60bb      	str	r3, [r7, #8]
 800bf46:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	695b      	ldr	r3, [r3, #20]
 800bf4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf52:	2b40      	cmp	r3, #64	; 0x40
 800bf54:	f040 80b4 	bne.w	800c0c0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	685b      	ldr	r3, [r3, #4]
 800bf60:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bf64:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	f000 8140 	beq.w	800c1ee <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800bf72:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bf76:	429a      	cmp	r2, r3
 800bf78:	f080 8139 	bcs.w	800c1ee <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bf82:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf88:	69db      	ldr	r3, [r3, #28]
 800bf8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf8e:	f000 8088 	beq.w	800c0a2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	330c      	adds	r3, #12
 800bf98:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf9c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bfa0:	e853 3f00 	ldrex	r3, [r3]
 800bfa4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800bfa8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bfac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bfb0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	330c      	adds	r3, #12
 800bfba:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800bfbe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800bfc2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfc6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800bfca:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800bfce:	e841 2300 	strex	r3, r2, [r1]
 800bfd2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800bfd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d1d9      	bne.n	800bf92 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	3314      	adds	r3, #20
 800bfe4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfe6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bfe8:	e853 3f00 	ldrex	r3, [r3]
 800bfec:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800bfee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bff0:	f023 0301 	bic.w	r3, r3, #1
 800bff4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	3314      	adds	r3, #20
 800bffe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c002:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c006:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c008:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c00a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c00e:	e841 2300 	strex	r3, r2, [r1]
 800c012:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c014:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c016:	2b00      	cmp	r3, #0
 800c018:	d1e1      	bne.n	800bfde <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	3314      	adds	r3, #20
 800c020:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c022:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c024:	e853 3f00 	ldrex	r3, [r3]
 800c028:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c02a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c02c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c030:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	3314      	adds	r3, #20
 800c03a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c03e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c040:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c042:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c044:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c046:	e841 2300 	strex	r3, r2, [r1]
 800c04a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c04c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d1e3      	bne.n	800c01a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	2220      	movs	r2, #32
 800c056:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	2200      	movs	r2, #0
 800c05e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	330c      	adds	r3, #12
 800c066:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c068:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c06a:	e853 3f00 	ldrex	r3, [r3]
 800c06e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c070:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c072:	f023 0310 	bic.w	r3, r3, #16
 800c076:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	330c      	adds	r3, #12
 800c080:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800c084:	65ba      	str	r2, [r7, #88]	; 0x58
 800c086:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c088:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c08a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c08c:	e841 2300 	strex	r3, r2, [r1]
 800c090:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c092:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c094:	2b00      	cmp	r3, #0
 800c096:	d1e3      	bne.n	800c060 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c09c:	4618      	mov	r0, r3
 800c09e:	f7fa fee5 	bl	8006e6c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c0aa:	b29b      	uxth	r3, r3
 800c0ac:	1ad3      	subs	r3, r2, r3
 800c0ae:	b29b      	uxth	r3, r3
 800c0b0:	4619      	mov	r1, r3
 800c0b2:	6878      	ldr	r0, [r7, #4]
 800c0b4:	f000 f8c0 	bl	800c238 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c0b8:	e099      	b.n	800c1ee <HAL_UART_IRQHandler+0x50e>
 800c0ba:	bf00      	nop
 800c0bc:	0800c76f 	.word	0x0800c76f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c0c8:	b29b      	uxth	r3, r3
 800c0ca:	1ad3      	subs	r3, r2, r3
 800c0cc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c0d4:	b29b      	uxth	r3, r3
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	f000 808b 	beq.w	800c1f2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800c0dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	f000 8086 	beq.w	800c1f2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	330c      	adds	r3, #12
 800c0ec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0f0:	e853 3f00 	ldrex	r3, [r3]
 800c0f4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c0f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c0fc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	330c      	adds	r3, #12
 800c106:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800c10a:	647a      	str	r2, [r7, #68]	; 0x44
 800c10c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c10e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c110:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c112:	e841 2300 	strex	r3, r2, [r1]
 800c116:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c118:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d1e3      	bne.n	800c0e6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	3314      	adds	r3, #20
 800c124:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c128:	e853 3f00 	ldrex	r3, [r3]
 800c12c:	623b      	str	r3, [r7, #32]
   return(result);
 800c12e:	6a3b      	ldr	r3, [r7, #32]
 800c130:	f023 0301 	bic.w	r3, r3, #1
 800c134:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	3314      	adds	r3, #20
 800c13e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c142:	633a      	str	r2, [r7, #48]	; 0x30
 800c144:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c146:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c148:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c14a:	e841 2300 	strex	r3, r2, [r1]
 800c14e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c152:	2b00      	cmp	r3, #0
 800c154:	d1e3      	bne.n	800c11e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	2220      	movs	r2, #32
 800c15a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	2200      	movs	r2, #0
 800c162:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	330c      	adds	r3, #12
 800c16a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c16c:	693b      	ldr	r3, [r7, #16]
 800c16e:	e853 3f00 	ldrex	r3, [r3]
 800c172:	60fb      	str	r3, [r7, #12]
   return(result);
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	f023 0310 	bic.w	r3, r3, #16
 800c17a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	330c      	adds	r3, #12
 800c184:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800c188:	61fa      	str	r2, [r7, #28]
 800c18a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c18c:	69b9      	ldr	r1, [r7, #24]
 800c18e:	69fa      	ldr	r2, [r7, #28]
 800c190:	e841 2300 	strex	r3, r2, [r1]
 800c194:	617b      	str	r3, [r7, #20]
   return(result);
 800c196:	697b      	ldr	r3, [r7, #20]
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d1e3      	bne.n	800c164 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c19c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c1a0:	4619      	mov	r1, r3
 800c1a2:	6878      	ldr	r0, [r7, #4]
 800c1a4:	f000 f848 	bl	800c238 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c1a8:	e023      	b.n	800c1f2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c1aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c1ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d009      	beq.n	800c1ca <HAL_UART_IRQHandler+0x4ea>
 800c1b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c1ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d003      	beq.n	800c1ca <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800c1c2:	6878      	ldr	r0, [r7, #4]
 800c1c4:	f000 fae7 	bl	800c796 <UART_Transmit_IT>
    return;
 800c1c8:	e014      	b.n	800c1f4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c1ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c1ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d00e      	beq.n	800c1f4 <HAL_UART_IRQHandler+0x514>
 800c1d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c1da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d008      	beq.n	800c1f4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800c1e2:	6878      	ldr	r0, [r7, #4]
 800c1e4:	f000 fb27 	bl	800c836 <UART_EndTransmit_IT>
    return;
 800c1e8:	e004      	b.n	800c1f4 <HAL_UART_IRQHandler+0x514>
    return;
 800c1ea:	bf00      	nop
 800c1ec:	e002      	b.n	800c1f4 <HAL_UART_IRQHandler+0x514>
      return;
 800c1ee:	bf00      	nop
 800c1f0:	e000      	b.n	800c1f4 <HAL_UART_IRQHandler+0x514>
      return;
 800c1f2:	bf00      	nop
  }
}
 800c1f4:	37e8      	adds	r7, #232	; 0xe8
 800c1f6:	46bd      	mov	sp, r7
 800c1f8:	bd80      	pop	{r7, pc}
 800c1fa:	bf00      	nop

0800c1fc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c1fc:	b480      	push	{r7}
 800c1fe:	b083      	sub	sp, #12
 800c200:	af00      	add	r7, sp, #0
 800c202:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800c204:	bf00      	nop
 800c206:	370c      	adds	r7, #12
 800c208:	46bd      	mov	sp, r7
 800c20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c20e:	4770      	bx	lr

0800c210 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c210:	b480      	push	{r7}
 800c212:	b083      	sub	sp, #12
 800c214:	af00      	add	r7, sp, #0
 800c216:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800c218:	bf00      	nop
 800c21a:	370c      	adds	r7, #12
 800c21c:	46bd      	mov	sp, r7
 800c21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c222:	4770      	bx	lr

0800c224 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c224:	b480      	push	{r7}
 800c226:	b083      	sub	sp, #12
 800c228:	af00      	add	r7, sp, #0
 800c22a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800c22c:	bf00      	nop
 800c22e:	370c      	adds	r7, #12
 800c230:	46bd      	mov	sp, r7
 800c232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c236:	4770      	bx	lr

0800c238 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c238:	b480      	push	{r7}
 800c23a:	b083      	sub	sp, #12
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	6078      	str	r0, [r7, #4]
 800c240:	460b      	mov	r3, r1
 800c242:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c244:	bf00      	nop
 800c246:	370c      	adds	r7, #12
 800c248:	46bd      	mov	sp, r7
 800c24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c24e:	4770      	bx	lr

0800c250 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c250:	b580      	push	{r7, lr}
 800c252:	b09c      	sub	sp, #112	; 0x70
 800c254:	af00      	add	r7, sp, #0
 800c256:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c25c:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d172      	bne.n	800c352 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800c26c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c26e:	2200      	movs	r2, #0
 800c270:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c272:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	330c      	adds	r3, #12
 800c278:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c27a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c27c:	e853 3f00 	ldrex	r3, [r3]
 800c280:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c282:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c284:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c288:	66bb      	str	r3, [r7, #104]	; 0x68
 800c28a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	330c      	adds	r3, #12
 800c290:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c292:	65ba      	str	r2, [r7, #88]	; 0x58
 800c294:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c296:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c298:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c29a:	e841 2300 	strex	r3, r2, [r1]
 800c29e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c2a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d1e5      	bne.n	800c272 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c2a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	3314      	adds	r3, #20
 800c2ac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2b0:	e853 3f00 	ldrex	r3, [r3]
 800c2b4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c2b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2b8:	f023 0301 	bic.w	r3, r3, #1
 800c2bc:	667b      	str	r3, [r7, #100]	; 0x64
 800c2be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	3314      	adds	r3, #20
 800c2c4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c2c6:	647a      	str	r2, [r7, #68]	; 0x44
 800c2c8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c2cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c2ce:	e841 2300 	strex	r3, r2, [r1]
 800c2d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c2d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d1e5      	bne.n	800c2a6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c2da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	3314      	adds	r3, #20
 800c2e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2e4:	e853 3f00 	ldrex	r3, [r3]
 800c2e8:	623b      	str	r3, [r7, #32]
   return(result);
 800c2ea:	6a3b      	ldr	r3, [r7, #32]
 800c2ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c2f0:	663b      	str	r3, [r7, #96]	; 0x60
 800c2f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	3314      	adds	r3, #20
 800c2f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c2fa:	633a      	str	r2, [r7, #48]	; 0x30
 800c2fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c300:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c302:	e841 2300 	strex	r3, r2, [r1]
 800c306:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d1e5      	bne.n	800c2da <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c30e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c310:	2220      	movs	r2, #32
 800c312:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c316:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c31a:	2b01      	cmp	r3, #1
 800c31c:	d119      	bne.n	800c352 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c31e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	330c      	adds	r3, #12
 800c324:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c326:	693b      	ldr	r3, [r7, #16]
 800c328:	e853 3f00 	ldrex	r3, [r3]
 800c32c:	60fb      	str	r3, [r7, #12]
   return(result);
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	f023 0310 	bic.w	r3, r3, #16
 800c334:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c336:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	330c      	adds	r3, #12
 800c33c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c33e:	61fa      	str	r2, [r7, #28]
 800c340:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c342:	69b9      	ldr	r1, [r7, #24]
 800c344:	69fa      	ldr	r2, [r7, #28]
 800c346:	e841 2300 	strex	r3, r2, [r1]
 800c34a:	617b      	str	r3, [r7, #20]
   return(result);
 800c34c:	697b      	ldr	r3, [r7, #20]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d1e5      	bne.n	800c31e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c352:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c356:	2b01      	cmp	r3, #1
 800c358:	d106      	bne.n	800c368 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c35a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c35c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c35e:	4619      	mov	r1, r3
 800c360:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800c362:	f7ff ff69 	bl	800c238 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c366:	e002      	b.n	800c36e <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800c368:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800c36a:	f7f8 fec3 	bl	80050f4 <HAL_UART_RxCpltCallback>
}
 800c36e:	bf00      	nop
 800c370:	3770      	adds	r7, #112	; 0x70
 800c372:	46bd      	mov	sp, r7
 800c374:	bd80      	pop	{r7, pc}

0800c376 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c376:	b580      	push	{r7, lr}
 800c378:	b084      	sub	sp, #16
 800c37a:	af00      	add	r7, sp, #0
 800c37c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c382:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c388:	2b01      	cmp	r3, #1
 800c38a:	d108      	bne.n	800c39e <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c390:	085b      	lsrs	r3, r3, #1
 800c392:	b29b      	uxth	r3, r3
 800c394:	4619      	mov	r1, r3
 800c396:	68f8      	ldr	r0, [r7, #12]
 800c398:	f7ff ff4e 	bl	800c238 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c39c:	e002      	b.n	800c3a4 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800c39e:	68f8      	ldr	r0, [r7, #12]
 800c3a0:	f7ff ff36 	bl	800c210 <HAL_UART_RxHalfCpltCallback>
}
 800c3a4:	bf00      	nop
 800c3a6:	3710      	adds	r7, #16
 800c3a8:	46bd      	mov	sp, r7
 800c3aa:	bd80      	pop	{r7, pc}

0800c3ac <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c3ac:	b580      	push	{r7, lr}
 800c3ae:	b084      	sub	sp, #16
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3bc:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800c3be:	68bb      	ldr	r3, [r7, #8]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	695b      	ldr	r3, [r3, #20]
 800c3c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c3c8:	2b80      	cmp	r3, #128	; 0x80
 800c3ca:	bf0c      	ite	eq
 800c3cc:	2301      	moveq	r3, #1
 800c3ce:	2300      	movne	r3, #0
 800c3d0:	b2db      	uxtb	r3, r3
 800c3d2:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800c3d4:	68bb      	ldr	r3, [r7, #8]
 800c3d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c3da:	b2db      	uxtb	r3, r3
 800c3dc:	2b21      	cmp	r3, #33	; 0x21
 800c3de:	d108      	bne.n	800c3f2 <UART_DMAError+0x46>
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d005      	beq.n	800c3f2 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800c3e6:	68bb      	ldr	r3, [r7, #8]
 800c3e8:	2200      	movs	r2, #0
 800c3ea:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800c3ec:	68b8      	ldr	r0, [r7, #8]
 800c3ee:	f000 f933 	bl	800c658 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c3f2:	68bb      	ldr	r3, [r7, #8]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	695b      	ldr	r3, [r3, #20]
 800c3f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c3fc:	2b40      	cmp	r3, #64	; 0x40
 800c3fe:	bf0c      	ite	eq
 800c400:	2301      	moveq	r3, #1
 800c402:	2300      	movne	r3, #0
 800c404:	b2db      	uxtb	r3, r3
 800c406:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800c408:	68bb      	ldr	r3, [r7, #8]
 800c40a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c40e:	b2db      	uxtb	r3, r3
 800c410:	2b22      	cmp	r3, #34	; 0x22
 800c412:	d108      	bne.n	800c426 <UART_DMAError+0x7a>
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	2b00      	cmp	r3, #0
 800c418:	d005      	beq.n	800c426 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800c41a:	68bb      	ldr	r3, [r7, #8]
 800c41c:	2200      	movs	r2, #0
 800c41e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800c420:	68b8      	ldr	r0, [r7, #8]
 800c422:	f000 f941 	bl	800c6a8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c426:	68bb      	ldr	r3, [r7, #8]
 800c428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c42a:	f043 0210 	orr.w	r2, r3, #16
 800c42e:	68bb      	ldr	r3, [r7, #8]
 800c430:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c432:	68b8      	ldr	r0, [r7, #8]
 800c434:	f7ff fef6 	bl	800c224 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c438:	bf00      	nop
 800c43a:	3710      	adds	r7, #16
 800c43c:	46bd      	mov	sp, r7
 800c43e:	bd80      	pop	{r7, pc}

0800c440 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800c440:	b580      	push	{r7, lr}
 800c442:	b090      	sub	sp, #64	; 0x40
 800c444:	af00      	add	r7, sp, #0
 800c446:	60f8      	str	r0, [r7, #12]
 800c448:	60b9      	str	r1, [r7, #8]
 800c44a:	603b      	str	r3, [r7, #0]
 800c44c:	4613      	mov	r3, r2
 800c44e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c450:	e050      	b.n	800c4f4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c452:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c454:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c458:	d04c      	beq.n	800c4f4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800c45a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d007      	beq.n	800c470 <UART_WaitOnFlagUntilTimeout+0x30>
 800c460:	f7fa fabc 	bl	80069dc <HAL_GetTick>
 800c464:	4602      	mov	r2, r0
 800c466:	683b      	ldr	r3, [r7, #0]
 800c468:	1ad3      	subs	r3, r2, r3
 800c46a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c46c:	429a      	cmp	r2, r3
 800c46e:	d241      	bcs.n	800c4f4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	330c      	adds	r3, #12
 800c476:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c47a:	e853 3f00 	ldrex	r3, [r3]
 800c47e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c482:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c486:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	330c      	adds	r3, #12
 800c48e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c490:	637a      	str	r2, [r7, #52]	; 0x34
 800c492:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c494:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c496:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c498:	e841 2300 	strex	r3, r2, [r1]
 800c49c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c49e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d1e5      	bne.n	800c470 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	3314      	adds	r3, #20
 800c4aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4ac:	697b      	ldr	r3, [r7, #20]
 800c4ae:	e853 3f00 	ldrex	r3, [r3]
 800c4b2:	613b      	str	r3, [r7, #16]
   return(result);
 800c4b4:	693b      	ldr	r3, [r7, #16]
 800c4b6:	f023 0301 	bic.w	r3, r3, #1
 800c4ba:	63bb      	str	r3, [r7, #56]	; 0x38
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	3314      	adds	r3, #20
 800c4c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c4c4:	623a      	str	r2, [r7, #32]
 800c4c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4c8:	69f9      	ldr	r1, [r7, #28]
 800c4ca:	6a3a      	ldr	r2, [r7, #32]
 800c4cc:	e841 2300 	strex	r3, r2, [r1]
 800c4d0:	61bb      	str	r3, [r7, #24]
   return(result);
 800c4d2:	69bb      	ldr	r3, [r7, #24]
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d1e5      	bne.n	800c4a4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	2220      	movs	r2, #32
 800c4dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	2220      	movs	r2, #32
 800c4e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	2200      	movs	r2, #0
 800c4ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800c4f0:	2303      	movs	r3, #3
 800c4f2:	e00f      	b.n	800c514 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	681a      	ldr	r2, [r3, #0]
 800c4fa:	68bb      	ldr	r3, [r7, #8]
 800c4fc:	4013      	ands	r3, r2
 800c4fe:	68ba      	ldr	r2, [r7, #8]
 800c500:	429a      	cmp	r2, r3
 800c502:	bf0c      	ite	eq
 800c504:	2301      	moveq	r3, #1
 800c506:	2300      	movne	r3, #0
 800c508:	b2db      	uxtb	r3, r3
 800c50a:	461a      	mov	r2, r3
 800c50c:	79fb      	ldrb	r3, [r7, #7]
 800c50e:	429a      	cmp	r2, r3
 800c510:	d09f      	beq.n	800c452 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c512:	2300      	movs	r3, #0
}
 800c514:	4618      	mov	r0, r3
 800c516:	3740      	adds	r7, #64	; 0x40
 800c518:	46bd      	mov	sp, r7
 800c51a:	bd80      	pop	{r7, pc}

0800c51c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c51c:	b580      	push	{r7, lr}
 800c51e:	b098      	sub	sp, #96	; 0x60
 800c520:	af00      	add	r7, sp, #0
 800c522:	60f8      	str	r0, [r7, #12]
 800c524:	60b9      	str	r1, [r7, #8]
 800c526:	4613      	mov	r3, r2
 800c528:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800c52a:	68ba      	ldr	r2, [r7, #8]
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	88fa      	ldrh	r2, [r7, #6]
 800c534:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	2200      	movs	r2, #0
 800c53a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	2222      	movs	r2, #34	; 0x22
 800c540:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c548:	4a40      	ldr	r2, [pc, #256]	; (800c64c <UART_Start_Receive_DMA+0x130>)
 800c54a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c550:	4a3f      	ldr	r2, [pc, #252]	; (800c650 <UART_Start_Receive_DMA+0x134>)
 800c552:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c558:	4a3e      	ldr	r2, [pc, #248]	; (800c654 <UART_Start_Receive_DMA+0x138>)
 800c55a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c560:	2200      	movs	r2, #0
 800c562:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800c564:	f107 0308 	add.w	r3, r7, #8
 800c568:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	3304      	adds	r3, #4
 800c574:	4619      	mov	r1, r3
 800c576:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c578:	681a      	ldr	r2, [r3, #0]
 800c57a:	88fb      	ldrh	r3, [r7, #6]
 800c57c:	f7fa fc1e 	bl	8006dbc <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800c580:	2300      	movs	r3, #0
 800c582:	613b      	str	r3, [r7, #16]
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	613b      	str	r3, [r7, #16]
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	685b      	ldr	r3, [r3, #4]
 800c592:	613b      	str	r3, [r7, #16]
 800c594:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	2200      	movs	r2, #0
 800c59a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	691b      	ldr	r3, [r3, #16]
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d019      	beq.n	800c5da <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	330c      	adds	r3, #12
 800c5ac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5b0:	e853 3f00 	ldrex	r3, [r3]
 800c5b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c5b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c5bc:	65bb      	str	r3, [r7, #88]	; 0x58
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	330c      	adds	r3, #12
 800c5c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c5c6:	64fa      	str	r2, [r7, #76]	; 0x4c
 800c5c8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5ca:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800c5cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c5ce:	e841 2300 	strex	r3, r2, [r1]
 800c5d2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800c5d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d1e5      	bne.n	800c5a6 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	3314      	adds	r3, #20
 800c5e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5e4:	e853 3f00 	ldrex	r3, [r3]
 800c5e8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c5ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5ec:	f043 0301 	orr.w	r3, r3, #1
 800c5f0:	657b      	str	r3, [r7, #84]	; 0x54
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	3314      	adds	r3, #20
 800c5f8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c5fa:	63ba      	str	r2, [r7, #56]	; 0x38
 800c5fc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5fe:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c600:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c602:	e841 2300 	strex	r3, r2, [r1]
 800c606:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d1e5      	bne.n	800c5da <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	3314      	adds	r3, #20
 800c614:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c616:	69bb      	ldr	r3, [r7, #24]
 800c618:	e853 3f00 	ldrex	r3, [r3]
 800c61c:	617b      	str	r3, [r7, #20]
   return(result);
 800c61e:	697b      	ldr	r3, [r7, #20]
 800c620:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c624:	653b      	str	r3, [r7, #80]	; 0x50
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	3314      	adds	r3, #20
 800c62c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c62e:	627a      	str	r2, [r7, #36]	; 0x24
 800c630:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c632:	6a39      	ldr	r1, [r7, #32]
 800c634:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c636:	e841 2300 	strex	r3, r2, [r1]
 800c63a:	61fb      	str	r3, [r7, #28]
   return(result);
 800c63c:	69fb      	ldr	r3, [r7, #28]
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d1e5      	bne.n	800c60e <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800c642:	2300      	movs	r3, #0
}
 800c644:	4618      	mov	r0, r3
 800c646:	3760      	adds	r7, #96	; 0x60
 800c648:	46bd      	mov	sp, r7
 800c64a:	bd80      	pop	{r7, pc}
 800c64c:	0800c251 	.word	0x0800c251
 800c650:	0800c377 	.word	0x0800c377
 800c654:	0800c3ad 	.word	0x0800c3ad

0800c658 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c658:	b480      	push	{r7}
 800c65a:	b089      	sub	sp, #36	; 0x24
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	330c      	adds	r3, #12
 800c666:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	e853 3f00 	ldrex	r3, [r3]
 800c66e:	60bb      	str	r3, [r7, #8]
   return(result);
 800c670:	68bb      	ldr	r3, [r7, #8]
 800c672:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800c676:	61fb      	str	r3, [r7, #28]
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	330c      	adds	r3, #12
 800c67e:	69fa      	ldr	r2, [r7, #28]
 800c680:	61ba      	str	r2, [r7, #24]
 800c682:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c684:	6979      	ldr	r1, [r7, #20]
 800c686:	69ba      	ldr	r2, [r7, #24]
 800c688:	e841 2300 	strex	r3, r2, [r1]
 800c68c:	613b      	str	r3, [r7, #16]
   return(result);
 800c68e:	693b      	ldr	r3, [r7, #16]
 800c690:	2b00      	cmp	r3, #0
 800c692:	d1e5      	bne.n	800c660 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	2220      	movs	r2, #32
 800c698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800c69c:	bf00      	nop
 800c69e:	3724      	adds	r7, #36	; 0x24
 800c6a0:	46bd      	mov	sp, r7
 800c6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a6:	4770      	bx	lr

0800c6a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c6a8:	b480      	push	{r7}
 800c6aa:	b095      	sub	sp, #84	; 0x54
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	330c      	adds	r3, #12
 800c6b6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6ba:	e853 3f00 	ldrex	r3, [r3]
 800c6be:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c6c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c6c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	330c      	adds	r3, #12
 800c6ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c6d0:	643a      	str	r2, [r7, #64]	; 0x40
 800c6d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6d4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c6d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c6d8:	e841 2300 	strex	r3, r2, [r1]
 800c6dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c6de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d1e5      	bne.n	800c6b0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	3314      	adds	r3, #20
 800c6ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6ec:	6a3b      	ldr	r3, [r7, #32]
 800c6ee:	e853 3f00 	ldrex	r3, [r3]
 800c6f2:	61fb      	str	r3, [r7, #28]
   return(result);
 800c6f4:	69fb      	ldr	r3, [r7, #28]
 800c6f6:	f023 0301 	bic.w	r3, r3, #1
 800c6fa:	64bb      	str	r3, [r7, #72]	; 0x48
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	3314      	adds	r3, #20
 800c702:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c704:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c706:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c708:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c70a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c70c:	e841 2300 	strex	r3, r2, [r1]
 800c710:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c714:	2b00      	cmp	r3, #0
 800c716:	d1e5      	bne.n	800c6e4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c71c:	2b01      	cmp	r3, #1
 800c71e:	d119      	bne.n	800c754 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	330c      	adds	r3, #12
 800c726:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	e853 3f00 	ldrex	r3, [r3]
 800c72e:	60bb      	str	r3, [r7, #8]
   return(result);
 800c730:	68bb      	ldr	r3, [r7, #8]
 800c732:	f023 0310 	bic.w	r3, r3, #16
 800c736:	647b      	str	r3, [r7, #68]	; 0x44
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	330c      	adds	r3, #12
 800c73e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c740:	61ba      	str	r2, [r7, #24]
 800c742:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c744:	6979      	ldr	r1, [r7, #20]
 800c746:	69ba      	ldr	r2, [r7, #24]
 800c748:	e841 2300 	strex	r3, r2, [r1]
 800c74c:	613b      	str	r3, [r7, #16]
   return(result);
 800c74e:	693b      	ldr	r3, [r7, #16]
 800c750:	2b00      	cmp	r3, #0
 800c752:	d1e5      	bne.n	800c720 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	2220      	movs	r2, #32
 800c758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	2200      	movs	r2, #0
 800c760:	631a      	str	r2, [r3, #48]	; 0x30
}
 800c762:	bf00      	nop
 800c764:	3754      	adds	r7, #84	; 0x54
 800c766:	46bd      	mov	sp, r7
 800c768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c76c:	4770      	bx	lr

0800c76e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c76e:	b580      	push	{r7, lr}
 800c770:	b084      	sub	sp, #16
 800c772:	af00      	add	r7, sp, #0
 800c774:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c77a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	2200      	movs	r2, #0
 800c780:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	2200      	movs	r2, #0
 800c786:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c788:	68f8      	ldr	r0, [r7, #12]
 800c78a:	f7ff fd4b 	bl	800c224 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c78e:	bf00      	nop
 800c790:	3710      	adds	r7, #16
 800c792:	46bd      	mov	sp, r7
 800c794:	bd80      	pop	{r7, pc}

0800c796 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c796:	b480      	push	{r7}
 800c798:	b085      	sub	sp, #20
 800c79a:	af00      	add	r7, sp, #0
 800c79c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c7a4:	b2db      	uxtb	r3, r3
 800c7a6:	2b21      	cmp	r3, #33	; 0x21
 800c7a8:	d13e      	bne.n	800c828 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	689b      	ldr	r3, [r3, #8]
 800c7ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c7b2:	d114      	bne.n	800c7de <UART_Transmit_IT+0x48>
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	691b      	ldr	r3, [r3, #16]
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d110      	bne.n	800c7de <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	6a1b      	ldr	r3, [r3, #32]
 800c7c0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	881b      	ldrh	r3, [r3, #0]
 800c7c6:	461a      	mov	r2, r3
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c7d0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	6a1b      	ldr	r3, [r3, #32]
 800c7d6:	1c9a      	adds	r2, r3, #2
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	621a      	str	r2, [r3, #32]
 800c7dc:	e008      	b.n	800c7f0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	6a1b      	ldr	r3, [r3, #32]
 800c7e2:	1c59      	adds	r1, r3, #1
 800c7e4:	687a      	ldr	r2, [r7, #4]
 800c7e6:	6211      	str	r1, [r2, #32]
 800c7e8:	781a      	ldrb	r2, [r3, #0]
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c7f4:	b29b      	uxth	r3, r3
 800c7f6:	3b01      	subs	r3, #1
 800c7f8:	b29b      	uxth	r3, r3
 800c7fa:	687a      	ldr	r2, [r7, #4]
 800c7fc:	4619      	mov	r1, r3
 800c7fe:	84d1      	strh	r1, [r2, #38]	; 0x26
 800c800:	2b00      	cmp	r3, #0
 800c802:	d10f      	bne.n	800c824 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	68da      	ldr	r2, [r3, #12]
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c812:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	68da      	ldr	r2, [r3, #12]
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c822:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c824:	2300      	movs	r3, #0
 800c826:	e000      	b.n	800c82a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c828:	2302      	movs	r3, #2
  }
}
 800c82a:	4618      	mov	r0, r3
 800c82c:	3714      	adds	r7, #20
 800c82e:	46bd      	mov	sp, r7
 800c830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c834:	4770      	bx	lr

0800c836 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c836:	b580      	push	{r7, lr}
 800c838:	b082      	sub	sp, #8
 800c83a:	af00      	add	r7, sp, #0
 800c83c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	68da      	ldr	r2, [r3, #12]
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c84c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	2220      	movs	r2, #32
 800c852:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c856:	6878      	ldr	r0, [r7, #4]
 800c858:	f7ff fcd0 	bl	800c1fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c85c:	2300      	movs	r3, #0
}
 800c85e:	4618      	mov	r0, r3
 800c860:	3708      	adds	r7, #8
 800c862:	46bd      	mov	sp, r7
 800c864:	bd80      	pop	{r7, pc}

0800c866 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c866:	b580      	push	{r7, lr}
 800c868:	b08c      	sub	sp, #48	; 0x30
 800c86a:	af00      	add	r7, sp, #0
 800c86c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c874:	b2db      	uxtb	r3, r3
 800c876:	2b22      	cmp	r3, #34	; 0x22
 800c878:	f040 80ab 	bne.w	800c9d2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	689b      	ldr	r3, [r3, #8]
 800c880:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c884:	d117      	bne.n	800c8b6 <UART_Receive_IT+0x50>
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	691b      	ldr	r3, [r3, #16]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d113      	bne.n	800c8b6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c88e:	2300      	movs	r3, #0
 800c890:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c896:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	685b      	ldr	r3, [r3, #4]
 800c89e:	b29b      	uxth	r3, r3
 800c8a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8a4:	b29a      	uxth	r2, r3
 800c8a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8a8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8ae:	1c9a      	adds	r2, r3, #2
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	629a      	str	r2, [r3, #40]	; 0x28
 800c8b4:	e026      	b.n	800c904 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8ba:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800c8bc:	2300      	movs	r3, #0
 800c8be:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	689b      	ldr	r3, [r3, #8]
 800c8c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c8c8:	d007      	beq.n	800c8da <UART_Receive_IT+0x74>
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	689b      	ldr	r3, [r3, #8]
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d10a      	bne.n	800c8e8 <UART_Receive_IT+0x82>
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	691b      	ldr	r3, [r3, #16]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d106      	bne.n	800c8e8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	685b      	ldr	r3, [r3, #4]
 800c8e0:	b2da      	uxtb	r2, r3
 800c8e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8e4:	701a      	strb	r2, [r3, #0]
 800c8e6:	e008      	b.n	800c8fa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	685b      	ldr	r3, [r3, #4]
 800c8ee:	b2db      	uxtb	r3, r3
 800c8f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c8f4:	b2da      	uxtb	r2, r3
 800c8f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8f8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8fe:	1c5a      	adds	r2, r3, #1
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c908:	b29b      	uxth	r3, r3
 800c90a:	3b01      	subs	r3, #1
 800c90c:	b29b      	uxth	r3, r3
 800c90e:	687a      	ldr	r2, [r7, #4]
 800c910:	4619      	mov	r1, r3
 800c912:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c914:	2b00      	cmp	r3, #0
 800c916:	d15a      	bne.n	800c9ce <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	68da      	ldr	r2, [r3, #12]
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	f022 0220 	bic.w	r2, r2, #32
 800c926:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	68da      	ldr	r2, [r3, #12]
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c936:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	695a      	ldr	r2, [r3, #20]
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	f022 0201 	bic.w	r2, r2, #1
 800c946:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	2220      	movs	r2, #32
 800c94c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c954:	2b01      	cmp	r3, #1
 800c956:	d135      	bne.n	800c9c4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	2200      	movs	r2, #0
 800c95c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	330c      	adds	r3, #12
 800c964:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c966:	697b      	ldr	r3, [r7, #20]
 800c968:	e853 3f00 	ldrex	r3, [r3]
 800c96c:	613b      	str	r3, [r7, #16]
   return(result);
 800c96e:	693b      	ldr	r3, [r7, #16]
 800c970:	f023 0310 	bic.w	r3, r3, #16
 800c974:	627b      	str	r3, [r7, #36]	; 0x24
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	330c      	adds	r3, #12
 800c97c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c97e:	623a      	str	r2, [r7, #32]
 800c980:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c982:	69f9      	ldr	r1, [r7, #28]
 800c984:	6a3a      	ldr	r2, [r7, #32]
 800c986:	e841 2300 	strex	r3, r2, [r1]
 800c98a:	61bb      	str	r3, [r7, #24]
   return(result);
 800c98c:	69bb      	ldr	r3, [r7, #24]
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d1e5      	bne.n	800c95e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	f003 0310 	and.w	r3, r3, #16
 800c99c:	2b10      	cmp	r3, #16
 800c99e:	d10a      	bne.n	800c9b6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c9a0:	2300      	movs	r3, #0
 800c9a2:	60fb      	str	r3, [r7, #12]
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	60fb      	str	r3, [r7, #12]
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	685b      	ldr	r3, [r3, #4]
 800c9b2:	60fb      	str	r3, [r7, #12]
 800c9b4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c9ba:	4619      	mov	r1, r3
 800c9bc:	6878      	ldr	r0, [r7, #4]
 800c9be:	f7ff fc3b 	bl	800c238 <HAL_UARTEx_RxEventCallback>
 800c9c2:	e002      	b.n	800c9ca <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c9c4:	6878      	ldr	r0, [r7, #4]
 800c9c6:	f7f8 fb95 	bl	80050f4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c9ca:	2300      	movs	r3, #0
 800c9cc:	e002      	b.n	800c9d4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800c9ce:	2300      	movs	r3, #0
 800c9d0:	e000      	b.n	800c9d4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800c9d2:	2302      	movs	r3, #2
  }
}
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	3730      	adds	r7, #48	; 0x30
 800c9d8:	46bd      	mov	sp, r7
 800c9da:	bd80      	pop	{r7, pc}

0800c9dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c9dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c9e0:	b0c0      	sub	sp, #256	; 0x100
 800c9e2:	af00      	add	r7, sp, #0
 800c9e4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c9e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	691b      	ldr	r3, [r3, #16]
 800c9f0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800c9f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c9f8:	68d9      	ldr	r1, [r3, #12]
 800c9fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c9fe:	681a      	ldr	r2, [r3, #0]
 800ca00:	ea40 0301 	orr.w	r3, r0, r1
 800ca04:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ca06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca0a:	689a      	ldr	r2, [r3, #8]
 800ca0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca10:	691b      	ldr	r3, [r3, #16]
 800ca12:	431a      	orrs	r2, r3
 800ca14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca18:	695b      	ldr	r3, [r3, #20]
 800ca1a:	431a      	orrs	r2, r3
 800ca1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca20:	69db      	ldr	r3, [r3, #28]
 800ca22:	4313      	orrs	r3, r2
 800ca24:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800ca28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	68db      	ldr	r3, [r3, #12]
 800ca30:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800ca34:	f021 010c 	bic.w	r1, r1, #12
 800ca38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca3c:	681a      	ldr	r2, [r3, #0]
 800ca3e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ca42:	430b      	orrs	r3, r1
 800ca44:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ca46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	695b      	ldr	r3, [r3, #20]
 800ca4e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800ca52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca56:	6999      	ldr	r1, [r3, #24]
 800ca58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca5c:	681a      	ldr	r2, [r3, #0]
 800ca5e:	ea40 0301 	orr.w	r3, r0, r1
 800ca62:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ca64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca68:	681a      	ldr	r2, [r3, #0]
 800ca6a:	4b8f      	ldr	r3, [pc, #572]	; (800cca8 <UART_SetConfig+0x2cc>)
 800ca6c:	429a      	cmp	r2, r3
 800ca6e:	d005      	beq.n	800ca7c <UART_SetConfig+0xa0>
 800ca70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca74:	681a      	ldr	r2, [r3, #0]
 800ca76:	4b8d      	ldr	r3, [pc, #564]	; (800ccac <UART_SetConfig+0x2d0>)
 800ca78:	429a      	cmp	r2, r3
 800ca7a:	d104      	bne.n	800ca86 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ca7c:	f7fe f806 	bl	800aa8c <HAL_RCC_GetPCLK2Freq>
 800ca80:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800ca84:	e003      	b.n	800ca8e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ca86:	f7fd ffed 	bl	800aa64 <HAL_RCC_GetPCLK1Freq>
 800ca8a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ca8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca92:	69db      	ldr	r3, [r3, #28]
 800ca94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ca98:	f040 810c 	bne.w	800ccb4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ca9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800caa0:	2200      	movs	r2, #0
 800caa2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800caa6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800caaa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800caae:	4622      	mov	r2, r4
 800cab0:	462b      	mov	r3, r5
 800cab2:	1891      	adds	r1, r2, r2
 800cab4:	65b9      	str	r1, [r7, #88]	; 0x58
 800cab6:	415b      	adcs	r3, r3
 800cab8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800caba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800cabe:	4621      	mov	r1, r4
 800cac0:	eb12 0801 	adds.w	r8, r2, r1
 800cac4:	4629      	mov	r1, r5
 800cac6:	eb43 0901 	adc.w	r9, r3, r1
 800caca:	f04f 0200 	mov.w	r2, #0
 800cace:	f04f 0300 	mov.w	r3, #0
 800cad2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800cad6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800cada:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800cade:	4690      	mov	r8, r2
 800cae0:	4699      	mov	r9, r3
 800cae2:	4623      	mov	r3, r4
 800cae4:	eb18 0303 	adds.w	r3, r8, r3
 800cae8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800caec:	462b      	mov	r3, r5
 800caee:	eb49 0303 	adc.w	r3, r9, r3
 800caf2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800caf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cafa:	685b      	ldr	r3, [r3, #4]
 800cafc:	2200      	movs	r2, #0
 800cafe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800cb02:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800cb06:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800cb0a:	460b      	mov	r3, r1
 800cb0c:	18db      	adds	r3, r3, r3
 800cb0e:	653b      	str	r3, [r7, #80]	; 0x50
 800cb10:	4613      	mov	r3, r2
 800cb12:	eb42 0303 	adc.w	r3, r2, r3
 800cb16:	657b      	str	r3, [r7, #84]	; 0x54
 800cb18:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800cb1c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800cb20:	f7f4 f8ba 	bl	8000c98 <__aeabi_uldivmod>
 800cb24:	4602      	mov	r2, r0
 800cb26:	460b      	mov	r3, r1
 800cb28:	4b61      	ldr	r3, [pc, #388]	; (800ccb0 <UART_SetConfig+0x2d4>)
 800cb2a:	fba3 2302 	umull	r2, r3, r3, r2
 800cb2e:	095b      	lsrs	r3, r3, #5
 800cb30:	011c      	lsls	r4, r3, #4
 800cb32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cb36:	2200      	movs	r2, #0
 800cb38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800cb3c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800cb40:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800cb44:	4642      	mov	r2, r8
 800cb46:	464b      	mov	r3, r9
 800cb48:	1891      	adds	r1, r2, r2
 800cb4a:	64b9      	str	r1, [r7, #72]	; 0x48
 800cb4c:	415b      	adcs	r3, r3
 800cb4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cb50:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800cb54:	4641      	mov	r1, r8
 800cb56:	eb12 0a01 	adds.w	sl, r2, r1
 800cb5a:	4649      	mov	r1, r9
 800cb5c:	eb43 0b01 	adc.w	fp, r3, r1
 800cb60:	f04f 0200 	mov.w	r2, #0
 800cb64:	f04f 0300 	mov.w	r3, #0
 800cb68:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800cb6c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800cb70:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800cb74:	4692      	mov	sl, r2
 800cb76:	469b      	mov	fp, r3
 800cb78:	4643      	mov	r3, r8
 800cb7a:	eb1a 0303 	adds.w	r3, sl, r3
 800cb7e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800cb82:	464b      	mov	r3, r9
 800cb84:	eb4b 0303 	adc.w	r3, fp, r3
 800cb88:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800cb8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cb90:	685b      	ldr	r3, [r3, #4]
 800cb92:	2200      	movs	r2, #0
 800cb94:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800cb98:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800cb9c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800cba0:	460b      	mov	r3, r1
 800cba2:	18db      	adds	r3, r3, r3
 800cba4:	643b      	str	r3, [r7, #64]	; 0x40
 800cba6:	4613      	mov	r3, r2
 800cba8:	eb42 0303 	adc.w	r3, r2, r3
 800cbac:	647b      	str	r3, [r7, #68]	; 0x44
 800cbae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800cbb2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800cbb6:	f7f4 f86f 	bl	8000c98 <__aeabi_uldivmod>
 800cbba:	4602      	mov	r2, r0
 800cbbc:	460b      	mov	r3, r1
 800cbbe:	4611      	mov	r1, r2
 800cbc0:	4b3b      	ldr	r3, [pc, #236]	; (800ccb0 <UART_SetConfig+0x2d4>)
 800cbc2:	fba3 2301 	umull	r2, r3, r3, r1
 800cbc6:	095b      	lsrs	r3, r3, #5
 800cbc8:	2264      	movs	r2, #100	; 0x64
 800cbca:	fb02 f303 	mul.w	r3, r2, r3
 800cbce:	1acb      	subs	r3, r1, r3
 800cbd0:	00db      	lsls	r3, r3, #3
 800cbd2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800cbd6:	4b36      	ldr	r3, [pc, #216]	; (800ccb0 <UART_SetConfig+0x2d4>)
 800cbd8:	fba3 2302 	umull	r2, r3, r3, r2
 800cbdc:	095b      	lsrs	r3, r3, #5
 800cbde:	005b      	lsls	r3, r3, #1
 800cbe0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800cbe4:	441c      	add	r4, r3
 800cbe6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cbea:	2200      	movs	r2, #0
 800cbec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800cbf0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800cbf4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800cbf8:	4642      	mov	r2, r8
 800cbfa:	464b      	mov	r3, r9
 800cbfc:	1891      	adds	r1, r2, r2
 800cbfe:	63b9      	str	r1, [r7, #56]	; 0x38
 800cc00:	415b      	adcs	r3, r3
 800cc02:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cc04:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800cc08:	4641      	mov	r1, r8
 800cc0a:	1851      	adds	r1, r2, r1
 800cc0c:	6339      	str	r1, [r7, #48]	; 0x30
 800cc0e:	4649      	mov	r1, r9
 800cc10:	414b      	adcs	r3, r1
 800cc12:	637b      	str	r3, [r7, #52]	; 0x34
 800cc14:	f04f 0200 	mov.w	r2, #0
 800cc18:	f04f 0300 	mov.w	r3, #0
 800cc1c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800cc20:	4659      	mov	r1, fp
 800cc22:	00cb      	lsls	r3, r1, #3
 800cc24:	4651      	mov	r1, sl
 800cc26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cc2a:	4651      	mov	r1, sl
 800cc2c:	00ca      	lsls	r2, r1, #3
 800cc2e:	4610      	mov	r0, r2
 800cc30:	4619      	mov	r1, r3
 800cc32:	4603      	mov	r3, r0
 800cc34:	4642      	mov	r2, r8
 800cc36:	189b      	adds	r3, r3, r2
 800cc38:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800cc3c:	464b      	mov	r3, r9
 800cc3e:	460a      	mov	r2, r1
 800cc40:	eb42 0303 	adc.w	r3, r2, r3
 800cc44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800cc48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cc4c:	685b      	ldr	r3, [r3, #4]
 800cc4e:	2200      	movs	r2, #0
 800cc50:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800cc54:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800cc58:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800cc5c:	460b      	mov	r3, r1
 800cc5e:	18db      	adds	r3, r3, r3
 800cc60:	62bb      	str	r3, [r7, #40]	; 0x28
 800cc62:	4613      	mov	r3, r2
 800cc64:	eb42 0303 	adc.w	r3, r2, r3
 800cc68:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cc6a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800cc6e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800cc72:	f7f4 f811 	bl	8000c98 <__aeabi_uldivmod>
 800cc76:	4602      	mov	r2, r0
 800cc78:	460b      	mov	r3, r1
 800cc7a:	4b0d      	ldr	r3, [pc, #52]	; (800ccb0 <UART_SetConfig+0x2d4>)
 800cc7c:	fba3 1302 	umull	r1, r3, r3, r2
 800cc80:	095b      	lsrs	r3, r3, #5
 800cc82:	2164      	movs	r1, #100	; 0x64
 800cc84:	fb01 f303 	mul.w	r3, r1, r3
 800cc88:	1ad3      	subs	r3, r2, r3
 800cc8a:	00db      	lsls	r3, r3, #3
 800cc8c:	3332      	adds	r3, #50	; 0x32
 800cc8e:	4a08      	ldr	r2, [pc, #32]	; (800ccb0 <UART_SetConfig+0x2d4>)
 800cc90:	fba2 2303 	umull	r2, r3, r2, r3
 800cc94:	095b      	lsrs	r3, r3, #5
 800cc96:	f003 0207 	and.w	r2, r3, #7
 800cc9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	4422      	add	r2, r4
 800cca2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800cca4:	e105      	b.n	800ceb2 <UART_SetConfig+0x4d6>
 800cca6:	bf00      	nop
 800cca8:	40011000 	.word	0x40011000
 800ccac:	40011400 	.word	0x40011400
 800ccb0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ccb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ccb8:	2200      	movs	r2, #0
 800ccba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800ccbe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800ccc2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800ccc6:	4642      	mov	r2, r8
 800ccc8:	464b      	mov	r3, r9
 800ccca:	1891      	adds	r1, r2, r2
 800cccc:	6239      	str	r1, [r7, #32]
 800ccce:	415b      	adcs	r3, r3
 800ccd0:	627b      	str	r3, [r7, #36]	; 0x24
 800ccd2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ccd6:	4641      	mov	r1, r8
 800ccd8:	1854      	adds	r4, r2, r1
 800ccda:	4649      	mov	r1, r9
 800ccdc:	eb43 0501 	adc.w	r5, r3, r1
 800cce0:	f04f 0200 	mov.w	r2, #0
 800cce4:	f04f 0300 	mov.w	r3, #0
 800cce8:	00eb      	lsls	r3, r5, #3
 800ccea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ccee:	00e2      	lsls	r2, r4, #3
 800ccf0:	4614      	mov	r4, r2
 800ccf2:	461d      	mov	r5, r3
 800ccf4:	4643      	mov	r3, r8
 800ccf6:	18e3      	adds	r3, r4, r3
 800ccf8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800ccfc:	464b      	mov	r3, r9
 800ccfe:	eb45 0303 	adc.w	r3, r5, r3
 800cd02:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800cd06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cd0a:	685b      	ldr	r3, [r3, #4]
 800cd0c:	2200      	movs	r2, #0
 800cd0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800cd12:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800cd16:	f04f 0200 	mov.w	r2, #0
 800cd1a:	f04f 0300 	mov.w	r3, #0
 800cd1e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800cd22:	4629      	mov	r1, r5
 800cd24:	008b      	lsls	r3, r1, #2
 800cd26:	4621      	mov	r1, r4
 800cd28:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800cd2c:	4621      	mov	r1, r4
 800cd2e:	008a      	lsls	r2, r1, #2
 800cd30:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800cd34:	f7f3 ffb0 	bl	8000c98 <__aeabi_uldivmod>
 800cd38:	4602      	mov	r2, r0
 800cd3a:	460b      	mov	r3, r1
 800cd3c:	4b60      	ldr	r3, [pc, #384]	; (800cec0 <UART_SetConfig+0x4e4>)
 800cd3e:	fba3 2302 	umull	r2, r3, r3, r2
 800cd42:	095b      	lsrs	r3, r3, #5
 800cd44:	011c      	lsls	r4, r3, #4
 800cd46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cd4a:	2200      	movs	r2, #0
 800cd4c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800cd50:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800cd54:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800cd58:	4642      	mov	r2, r8
 800cd5a:	464b      	mov	r3, r9
 800cd5c:	1891      	adds	r1, r2, r2
 800cd5e:	61b9      	str	r1, [r7, #24]
 800cd60:	415b      	adcs	r3, r3
 800cd62:	61fb      	str	r3, [r7, #28]
 800cd64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800cd68:	4641      	mov	r1, r8
 800cd6a:	1851      	adds	r1, r2, r1
 800cd6c:	6139      	str	r1, [r7, #16]
 800cd6e:	4649      	mov	r1, r9
 800cd70:	414b      	adcs	r3, r1
 800cd72:	617b      	str	r3, [r7, #20]
 800cd74:	f04f 0200 	mov.w	r2, #0
 800cd78:	f04f 0300 	mov.w	r3, #0
 800cd7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800cd80:	4659      	mov	r1, fp
 800cd82:	00cb      	lsls	r3, r1, #3
 800cd84:	4651      	mov	r1, sl
 800cd86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cd8a:	4651      	mov	r1, sl
 800cd8c:	00ca      	lsls	r2, r1, #3
 800cd8e:	4610      	mov	r0, r2
 800cd90:	4619      	mov	r1, r3
 800cd92:	4603      	mov	r3, r0
 800cd94:	4642      	mov	r2, r8
 800cd96:	189b      	adds	r3, r3, r2
 800cd98:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800cd9c:	464b      	mov	r3, r9
 800cd9e:	460a      	mov	r2, r1
 800cda0:	eb42 0303 	adc.w	r3, r2, r3
 800cda4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800cda8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cdac:	685b      	ldr	r3, [r3, #4]
 800cdae:	2200      	movs	r2, #0
 800cdb0:	67bb      	str	r3, [r7, #120]	; 0x78
 800cdb2:	67fa      	str	r2, [r7, #124]	; 0x7c
 800cdb4:	f04f 0200 	mov.w	r2, #0
 800cdb8:	f04f 0300 	mov.w	r3, #0
 800cdbc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800cdc0:	4649      	mov	r1, r9
 800cdc2:	008b      	lsls	r3, r1, #2
 800cdc4:	4641      	mov	r1, r8
 800cdc6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800cdca:	4641      	mov	r1, r8
 800cdcc:	008a      	lsls	r2, r1, #2
 800cdce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800cdd2:	f7f3 ff61 	bl	8000c98 <__aeabi_uldivmod>
 800cdd6:	4602      	mov	r2, r0
 800cdd8:	460b      	mov	r3, r1
 800cdda:	4b39      	ldr	r3, [pc, #228]	; (800cec0 <UART_SetConfig+0x4e4>)
 800cddc:	fba3 1302 	umull	r1, r3, r3, r2
 800cde0:	095b      	lsrs	r3, r3, #5
 800cde2:	2164      	movs	r1, #100	; 0x64
 800cde4:	fb01 f303 	mul.w	r3, r1, r3
 800cde8:	1ad3      	subs	r3, r2, r3
 800cdea:	011b      	lsls	r3, r3, #4
 800cdec:	3332      	adds	r3, #50	; 0x32
 800cdee:	4a34      	ldr	r2, [pc, #208]	; (800cec0 <UART_SetConfig+0x4e4>)
 800cdf0:	fba2 2303 	umull	r2, r3, r2, r3
 800cdf4:	095b      	lsrs	r3, r3, #5
 800cdf6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cdfa:	441c      	add	r4, r3
 800cdfc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ce00:	2200      	movs	r2, #0
 800ce02:	673b      	str	r3, [r7, #112]	; 0x70
 800ce04:	677a      	str	r2, [r7, #116]	; 0x74
 800ce06:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800ce0a:	4642      	mov	r2, r8
 800ce0c:	464b      	mov	r3, r9
 800ce0e:	1891      	adds	r1, r2, r2
 800ce10:	60b9      	str	r1, [r7, #8]
 800ce12:	415b      	adcs	r3, r3
 800ce14:	60fb      	str	r3, [r7, #12]
 800ce16:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ce1a:	4641      	mov	r1, r8
 800ce1c:	1851      	adds	r1, r2, r1
 800ce1e:	6039      	str	r1, [r7, #0]
 800ce20:	4649      	mov	r1, r9
 800ce22:	414b      	adcs	r3, r1
 800ce24:	607b      	str	r3, [r7, #4]
 800ce26:	f04f 0200 	mov.w	r2, #0
 800ce2a:	f04f 0300 	mov.w	r3, #0
 800ce2e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800ce32:	4659      	mov	r1, fp
 800ce34:	00cb      	lsls	r3, r1, #3
 800ce36:	4651      	mov	r1, sl
 800ce38:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ce3c:	4651      	mov	r1, sl
 800ce3e:	00ca      	lsls	r2, r1, #3
 800ce40:	4610      	mov	r0, r2
 800ce42:	4619      	mov	r1, r3
 800ce44:	4603      	mov	r3, r0
 800ce46:	4642      	mov	r2, r8
 800ce48:	189b      	adds	r3, r3, r2
 800ce4a:	66bb      	str	r3, [r7, #104]	; 0x68
 800ce4c:	464b      	mov	r3, r9
 800ce4e:	460a      	mov	r2, r1
 800ce50:	eb42 0303 	adc.w	r3, r2, r3
 800ce54:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ce56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce5a:	685b      	ldr	r3, [r3, #4]
 800ce5c:	2200      	movs	r2, #0
 800ce5e:	663b      	str	r3, [r7, #96]	; 0x60
 800ce60:	667a      	str	r2, [r7, #100]	; 0x64
 800ce62:	f04f 0200 	mov.w	r2, #0
 800ce66:	f04f 0300 	mov.w	r3, #0
 800ce6a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800ce6e:	4649      	mov	r1, r9
 800ce70:	008b      	lsls	r3, r1, #2
 800ce72:	4641      	mov	r1, r8
 800ce74:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ce78:	4641      	mov	r1, r8
 800ce7a:	008a      	lsls	r2, r1, #2
 800ce7c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800ce80:	f7f3 ff0a 	bl	8000c98 <__aeabi_uldivmod>
 800ce84:	4602      	mov	r2, r0
 800ce86:	460b      	mov	r3, r1
 800ce88:	4b0d      	ldr	r3, [pc, #52]	; (800cec0 <UART_SetConfig+0x4e4>)
 800ce8a:	fba3 1302 	umull	r1, r3, r3, r2
 800ce8e:	095b      	lsrs	r3, r3, #5
 800ce90:	2164      	movs	r1, #100	; 0x64
 800ce92:	fb01 f303 	mul.w	r3, r1, r3
 800ce96:	1ad3      	subs	r3, r2, r3
 800ce98:	011b      	lsls	r3, r3, #4
 800ce9a:	3332      	adds	r3, #50	; 0x32
 800ce9c:	4a08      	ldr	r2, [pc, #32]	; (800cec0 <UART_SetConfig+0x4e4>)
 800ce9e:	fba2 2303 	umull	r2, r3, r2, r3
 800cea2:	095b      	lsrs	r3, r3, #5
 800cea4:	f003 020f 	and.w	r2, r3, #15
 800cea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	4422      	add	r2, r4
 800ceb0:	609a      	str	r2, [r3, #8]
}
 800ceb2:	bf00      	nop
 800ceb4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800ceb8:	46bd      	mov	sp, r7
 800ceba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cebe:	bf00      	nop
 800cec0:	51eb851f 	.word	0x51eb851f

0800cec4 <__errno>:
 800cec4:	4b01      	ldr	r3, [pc, #4]	; (800cecc <__errno+0x8>)
 800cec6:	6818      	ldr	r0, [r3, #0]
 800cec8:	4770      	bx	lr
 800ceca:	bf00      	nop
 800cecc:	20000250 	.word	0x20000250

0800ced0 <__libc_init_array>:
 800ced0:	b570      	push	{r4, r5, r6, lr}
 800ced2:	4d0d      	ldr	r5, [pc, #52]	; (800cf08 <__libc_init_array+0x38>)
 800ced4:	4c0d      	ldr	r4, [pc, #52]	; (800cf0c <__libc_init_array+0x3c>)
 800ced6:	1b64      	subs	r4, r4, r5
 800ced8:	10a4      	asrs	r4, r4, #2
 800ceda:	2600      	movs	r6, #0
 800cedc:	42a6      	cmp	r6, r4
 800cede:	d109      	bne.n	800cef4 <__libc_init_array+0x24>
 800cee0:	4d0b      	ldr	r5, [pc, #44]	; (800cf10 <__libc_init_array+0x40>)
 800cee2:	4c0c      	ldr	r4, [pc, #48]	; (800cf14 <__libc_init_array+0x44>)
 800cee4:	f002 ff88 	bl	800fdf8 <_init>
 800cee8:	1b64      	subs	r4, r4, r5
 800ceea:	10a4      	asrs	r4, r4, #2
 800ceec:	2600      	movs	r6, #0
 800ceee:	42a6      	cmp	r6, r4
 800cef0:	d105      	bne.n	800cefe <__libc_init_array+0x2e>
 800cef2:	bd70      	pop	{r4, r5, r6, pc}
 800cef4:	f855 3b04 	ldr.w	r3, [r5], #4
 800cef8:	4798      	blx	r3
 800cefa:	3601      	adds	r6, #1
 800cefc:	e7ee      	b.n	800cedc <__libc_init_array+0xc>
 800cefe:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf02:	4798      	blx	r3
 800cf04:	3601      	adds	r6, #1
 800cf06:	e7f2      	b.n	800ceee <__libc_init_array+0x1e>
 800cf08:	0803d52c 	.word	0x0803d52c
 800cf0c:	0803d52c 	.word	0x0803d52c
 800cf10:	0803d52c 	.word	0x0803d52c
 800cf14:	0803d530 	.word	0x0803d530

0800cf18 <memset>:
 800cf18:	4402      	add	r2, r0
 800cf1a:	4603      	mov	r3, r0
 800cf1c:	4293      	cmp	r3, r2
 800cf1e:	d100      	bne.n	800cf22 <memset+0xa>
 800cf20:	4770      	bx	lr
 800cf22:	f803 1b01 	strb.w	r1, [r3], #1
 800cf26:	e7f9      	b.n	800cf1c <memset+0x4>

0800cf28 <__cvt>:
 800cf28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cf2c:	ec55 4b10 	vmov	r4, r5, d0
 800cf30:	2d00      	cmp	r5, #0
 800cf32:	460e      	mov	r6, r1
 800cf34:	4619      	mov	r1, r3
 800cf36:	462b      	mov	r3, r5
 800cf38:	bfbb      	ittet	lt
 800cf3a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800cf3e:	461d      	movlt	r5, r3
 800cf40:	2300      	movge	r3, #0
 800cf42:	232d      	movlt	r3, #45	; 0x2d
 800cf44:	700b      	strb	r3, [r1, #0]
 800cf46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cf48:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800cf4c:	4691      	mov	r9, r2
 800cf4e:	f023 0820 	bic.w	r8, r3, #32
 800cf52:	bfbc      	itt	lt
 800cf54:	4622      	movlt	r2, r4
 800cf56:	4614      	movlt	r4, r2
 800cf58:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cf5c:	d005      	beq.n	800cf6a <__cvt+0x42>
 800cf5e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800cf62:	d100      	bne.n	800cf66 <__cvt+0x3e>
 800cf64:	3601      	adds	r6, #1
 800cf66:	2102      	movs	r1, #2
 800cf68:	e000      	b.n	800cf6c <__cvt+0x44>
 800cf6a:	2103      	movs	r1, #3
 800cf6c:	ab03      	add	r3, sp, #12
 800cf6e:	9301      	str	r3, [sp, #4]
 800cf70:	ab02      	add	r3, sp, #8
 800cf72:	9300      	str	r3, [sp, #0]
 800cf74:	ec45 4b10 	vmov	d0, r4, r5
 800cf78:	4653      	mov	r3, sl
 800cf7a:	4632      	mov	r2, r6
 800cf7c:	f000 fcfc 	bl	800d978 <_dtoa_r>
 800cf80:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800cf84:	4607      	mov	r7, r0
 800cf86:	d102      	bne.n	800cf8e <__cvt+0x66>
 800cf88:	f019 0f01 	tst.w	r9, #1
 800cf8c:	d022      	beq.n	800cfd4 <__cvt+0xac>
 800cf8e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cf92:	eb07 0906 	add.w	r9, r7, r6
 800cf96:	d110      	bne.n	800cfba <__cvt+0x92>
 800cf98:	783b      	ldrb	r3, [r7, #0]
 800cf9a:	2b30      	cmp	r3, #48	; 0x30
 800cf9c:	d10a      	bne.n	800cfb4 <__cvt+0x8c>
 800cf9e:	2200      	movs	r2, #0
 800cfa0:	2300      	movs	r3, #0
 800cfa2:	4620      	mov	r0, r4
 800cfa4:	4629      	mov	r1, r5
 800cfa6:	f7f3 fd97 	bl	8000ad8 <__aeabi_dcmpeq>
 800cfaa:	b918      	cbnz	r0, 800cfb4 <__cvt+0x8c>
 800cfac:	f1c6 0601 	rsb	r6, r6, #1
 800cfb0:	f8ca 6000 	str.w	r6, [sl]
 800cfb4:	f8da 3000 	ldr.w	r3, [sl]
 800cfb8:	4499      	add	r9, r3
 800cfba:	2200      	movs	r2, #0
 800cfbc:	2300      	movs	r3, #0
 800cfbe:	4620      	mov	r0, r4
 800cfc0:	4629      	mov	r1, r5
 800cfc2:	f7f3 fd89 	bl	8000ad8 <__aeabi_dcmpeq>
 800cfc6:	b108      	cbz	r0, 800cfcc <__cvt+0xa4>
 800cfc8:	f8cd 900c 	str.w	r9, [sp, #12]
 800cfcc:	2230      	movs	r2, #48	; 0x30
 800cfce:	9b03      	ldr	r3, [sp, #12]
 800cfd0:	454b      	cmp	r3, r9
 800cfd2:	d307      	bcc.n	800cfe4 <__cvt+0xbc>
 800cfd4:	9b03      	ldr	r3, [sp, #12]
 800cfd6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cfd8:	1bdb      	subs	r3, r3, r7
 800cfda:	4638      	mov	r0, r7
 800cfdc:	6013      	str	r3, [r2, #0]
 800cfde:	b004      	add	sp, #16
 800cfe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cfe4:	1c59      	adds	r1, r3, #1
 800cfe6:	9103      	str	r1, [sp, #12]
 800cfe8:	701a      	strb	r2, [r3, #0]
 800cfea:	e7f0      	b.n	800cfce <__cvt+0xa6>

0800cfec <__exponent>:
 800cfec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cfee:	4603      	mov	r3, r0
 800cff0:	2900      	cmp	r1, #0
 800cff2:	bfb8      	it	lt
 800cff4:	4249      	neglt	r1, r1
 800cff6:	f803 2b02 	strb.w	r2, [r3], #2
 800cffa:	bfb4      	ite	lt
 800cffc:	222d      	movlt	r2, #45	; 0x2d
 800cffe:	222b      	movge	r2, #43	; 0x2b
 800d000:	2909      	cmp	r1, #9
 800d002:	7042      	strb	r2, [r0, #1]
 800d004:	dd2a      	ble.n	800d05c <__exponent+0x70>
 800d006:	f10d 0407 	add.w	r4, sp, #7
 800d00a:	46a4      	mov	ip, r4
 800d00c:	270a      	movs	r7, #10
 800d00e:	46a6      	mov	lr, r4
 800d010:	460a      	mov	r2, r1
 800d012:	fb91 f6f7 	sdiv	r6, r1, r7
 800d016:	fb07 1516 	mls	r5, r7, r6, r1
 800d01a:	3530      	adds	r5, #48	; 0x30
 800d01c:	2a63      	cmp	r2, #99	; 0x63
 800d01e:	f104 34ff 	add.w	r4, r4, #4294967295
 800d022:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800d026:	4631      	mov	r1, r6
 800d028:	dcf1      	bgt.n	800d00e <__exponent+0x22>
 800d02a:	3130      	adds	r1, #48	; 0x30
 800d02c:	f1ae 0502 	sub.w	r5, lr, #2
 800d030:	f804 1c01 	strb.w	r1, [r4, #-1]
 800d034:	1c44      	adds	r4, r0, #1
 800d036:	4629      	mov	r1, r5
 800d038:	4561      	cmp	r1, ip
 800d03a:	d30a      	bcc.n	800d052 <__exponent+0x66>
 800d03c:	f10d 0209 	add.w	r2, sp, #9
 800d040:	eba2 020e 	sub.w	r2, r2, lr
 800d044:	4565      	cmp	r5, ip
 800d046:	bf88      	it	hi
 800d048:	2200      	movhi	r2, #0
 800d04a:	4413      	add	r3, r2
 800d04c:	1a18      	subs	r0, r3, r0
 800d04e:	b003      	add	sp, #12
 800d050:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d052:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d056:	f804 2f01 	strb.w	r2, [r4, #1]!
 800d05a:	e7ed      	b.n	800d038 <__exponent+0x4c>
 800d05c:	2330      	movs	r3, #48	; 0x30
 800d05e:	3130      	adds	r1, #48	; 0x30
 800d060:	7083      	strb	r3, [r0, #2]
 800d062:	70c1      	strb	r1, [r0, #3]
 800d064:	1d03      	adds	r3, r0, #4
 800d066:	e7f1      	b.n	800d04c <__exponent+0x60>

0800d068 <_printf_float>:
 800d068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d06c:	ed2d 8b02 	vpush	{d8}
 800d070:	b08d      	sub	sp, #52	; 0x34
 800d072:	460c      	mov	r4, r1
 800d074:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800d078:	4616      	mov	r6, r2
 800d07a:	461f      	mov	r7, r3
 800d07c:	4605      	mov	r5, r0
 800d07e:	f001 fa69 	bl	800e554 <_localeconv_r>
 800d082:	f8d0 a000 	ldr.w	sl, [r0]
 800d086:	4650      	mov	r0, sl
 800d088:	f7f3 f8aa 	bl	80001e0 <strlen>
 800d08c:	2300      	movs	r3, #0
 800d08e:	930a      	str	r3, [sp, #40]	; 0x28
 800d090:	6823      	ldr	r3, [r4, #0]
 800d092:	9305      	str	r3, [sp, #20]
 800d094:	f8d8 3000 	ldr.w	r3, [r8]
 800d098:	f894 b018 	ldrb.w	fp, [r4, #24]
 800d09c:	3307      	adds	r3, #7
 800d09e:	f023 0307 	bic.w	r3, r3, #7
 800d0a2:	f103 0208 	add.w	r2, r3, #8
 800d0a6:	f8c8 2000 	str.w	r2, [r8]
 800d0aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0ae:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800d0b2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800d0b6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d0ba:	9307      	str	r3, [sp, #28]
 800d0bc:	f8cd 8018 	str.w	r8, [sp, #24]
 800d0c0:	ee08 0a10 	vmov	s16, r0
 800d0c4:	4b9f      	ldr	r3, [pc, #636]	; (800d344 <_printf_float+0x2dc>)
 800d0c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d0ca:	f04f 32ff 	mov.w	r2, #4294967295
 800d0ce:	f7f3 fd35 	bl	8000b3c <__aeabi_dcmpun>
 800d0d2:	bb88      	cbnz	r0, 800d138 <_printf_float+0xd0>
 800d0d4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d0d8:	4b9a      	ldr	r3, [pc, #616]	; (800d344 <_printf_float+0x2dc>)
 800d0da:	f04f 32ff 	mov.w	r2, #4294967295
 800d0de:	f7f3 fd0f 	bl	8000b00 <__aeabi_dcmple>
 800d0e2:	bb48      	cbnz	r0, 800d138 <_printf_float+0xd0>
 800d0e4:	2200      	movs	r2, #0
 800d0e6:	2300      	movs	r3, #0
 800d0e8:	4640      	mov	r0, r8
 800d0ea:	4649      	mov	r1, r9
 800d0ec:	f7f3 fcfe 	bl	8000aec <__aeabi_dcmplt>
 800d0f0:	b110      	cbz	r0, 800d0f8 <_printf_float+0x90>
 800d0f2:	232d      	movs	r3, #45	; 0x2d
 800d0f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d0f8:	4b93      	ldr	r3, [pc, #588]	; (800d348 <_printf_float+0x2e0>)
 800d0fa:	4894      	ldr	r0, [pc, #592]	; (800d34c <_printf_float+0x2e4>)
 800d0fc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800d100:	bf94      	ite	ls
 800d102:	4698      	movls	r8, r3
 800d104:	4680      	movhi	r8, r0
 800d106:	2303      	movs	r3, #3
 800d108:	6123      	str	r3, [r4, #16]
 800d10a:	9b05      	ldr	r3, [sp, #20]
 800d10c:	f023 0204 	bic.w	r2, r3, #4
 800d110:	6022      	str	r2, [r4, #0]
 800d112:	f04f 0900 	mov.w	r9, #0
 800d116:	9700      	str	r7, [sp, #0]
 800d118:	4633      	mov	r3, r6
 800d11a:	aa0b      	add	r2, sp, #44	; 0x2c
 800d11c:	4621      	mov	r1, r4
 800d11e:	4628      	mov	r0, r5
 800d120:	f000 f9d8 	bl	800d4d4 <_printf_common>
 800d124:	3001      	adds	r0, #1
 800d126:	f040 8090 	bne.w	800d24a <_printf_float+0x1e2>
 800d12a:	f04f 30ff 	mov.w	r0, #4294967295
 800d12e:	b00d      	add	sp, #52	; 0x34
 800d130:	ecbd 8b02 	vpop	{d8}
 800d134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d138:	4642      	mov	r2, r8
 800d13a:	464b      	mov	r3, r9
 800d13c:	4640      	mov	r0, r8
 800d13e:	4649      	mov	r1, r9
 800d140:	f7f3 fcfc 	bl	8000b3c <__aeabi_dcmpun>
 800d144:	b140      	cbz	r0, 800d158 <_printf_float+0xf0>
 800d146:	464b      	mov	r3, r9
 800d148:	2b00      	cmp	r3, #0
 800d14a:	bfbc      	itt	lt
 800d14c:	232d      	movlt	r3, #45	; 0x2d
 800d14e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d152:	487f      	ldr	r0, [pc, #508]	; (800d350 <_printf_float+0x2e8>)
 800d154:	4b7f      	ldr	r3, [pc, #508]	; (800d354 <_printf_float+0x2ec>)
 800d156:	e7d1      	b.n	800d0fc <_printf_float+0x94>
 800d158:	6863      	ldr	r3, [r4, #4]
 800d15a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800d15e:	9206      	str	r2, [sp, #24]
 800d160:	1c5a      	adds	r2, r3, #1
 800d162:	d13f      	bne.n	800d1e4 <_printf_float+0x17c>
 800d164:	2306      	movs	r3, #6
 800d166:	6063      	str	r3, [r4, #4]
 800d168:	9b05      	ldr	r3, [sp, #20]
 800d16a:	6861      	ldr	r1, [r4, #4]
 800d16c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800d170:	2300      	movs	r3, #0
 800d172:	9303      	str	r3, [sp, #12]
 800d174:	ab0a      	add	r3, sp, #40	; 0x28
 800d176:	e9cd b301 	strd	fp, r3, [sp, #4]
 800d17a:	ab09      	add	r3, sp, #36	; 0x24
 800d17c:	ec49 8b10 	vmov	d0, r8, r9
 800d180:	9300      	str	r3, [sp, #0]
 800d182:	6022      	str	r2, [r4, #0]
 800d184:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d188:	4628      	mov	r0, r5
 800d18a:	f7ff fecd 	bl	800cf28 <__cvt>
 800d18e:	9b06      	ldr	r3, [sp, #24]
 800d190:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d192:	2b47      	cmp	r3, #71	; 0x47
 800d194:	4680      	mov	r8, r0
 800d196:	d108      	bne.n	800d1aa <_printf_float+0x142>
 800d198:	1cc8      	adds	r0, r1, #3
 800d19a:	db02      	blt.n	800d1a2 <_printf_float+0x13a>
 800d19c:	6863      	ldr	r3, [r4, #4]
 800d19e:	4299      	cmp	r1, r3
 800d1a0:	dd41      	ble.n	800d226 <_printf_float+0x1be>
 800d1a2:	f1ab 0b02 	sub.w	fp, fp, #2
 800d1a6:	fa5f fb8b 	uxtb.w	fp, fp
 800d1aa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d1ae:	d820      	bhi.n	800d1f2 <_printf_float+0x18a>
 800d1b0:	3901      	subs	r1, #1
 800d1b2:	465a      	mov	r2, fp
 800d1b4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d1b8:	9109      	str	r1, [sp, #36]	; 0x24
 800d1ba:	f7ff ff17 	bl	800cfec <__exponent>
 800d1be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d1c0:	1813      	adds	r3, r2, r0
 800d1c2:	2a01      	cmp	r2, #1
 800d1c4:	4681      	mov	r9, r0
 800d1c6:	6123      	str	r3, [r4, #16]
 800d1c8:	dc02      	bgt.n	800d1d0 <_printf_float+0x168>
 800d1ca:	6822      	ldr	r2, [r4, #0]
 800d1cc:	07d2      	lsls	r2, r2, #31
 800d1ce:	d501      	bpl.n	800d1d4 <_printf_float+0x16c>
 800d1d0:	3301      	adds	r3, #1
 800d1d2:	6123      	str	r3, [r4, #16]
 800d1d4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d09c      	beq.n	800d116 <_printf_float+0xae>
 800d1dc:	232d      	movs	r3, #45	; 0x2d
 800d1de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d1e2:	e798      	b.n	800d116 <_printf_float+0xae>
 800d1e4:	9a06      	ldr	r2, [sp, #24]
 800d1e6:	2a47      	cmp	r2, #71	; 0x47
 800d1e8:	d1be      	bne.n	800d168 <_printf_float+0x100>
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d1bc      	bne.n	800d168 <_printf_float+0x100>
 800d1ee:	2301      	movs	r3, #1
 800d1f0:	e7b9      	b.n	800d166 <_printf_float+0xfe>
 800d1f2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800d1f6:	d118      	bne.n	800d22a <_printf_float+0x1c2>
 800d1f8:	2900      	cmp	r1, #0
 800d1fa:	6863      	ldr	r3, [r4, #4]
 800d1fc:	dd0b      	ble.n	800d216 <_printf_float+0x1ae>
 800d1fe:	6121      	str	r1, [r4, #16]
 800d200:	b913      	cbnz	r3, 800d208 <_printf_float+0x1a0>
 800d202:	6822      	ldr	r2, [r4, #0]
 800d204:	07d0      	lsls	r0, r2, #31
 800d206:	d502      	bpl.n	800d20e <_printf_float+0x1a6>
 800d208:	3301      	adds	r3, #1
 800d20a:	440b      	add	r3, r1
 800d20c:	6123      	str	r3, [r4, #16]
 800d20e:	65a1      	str	r1, [r4, #88]	; 0x58
 800d210:	f04f 0900 	mov.w	r9, #0
 800d214:	e7de      	b.n	800d1d4 <_printf_float+0x16c>
 800d216:	b913      	cbnz	r3, 800d21e <_printf_float+0x1b6>
 800d218:	6822      	ldr	r2, [r4, #0]
 800d21a:	07d2      	lsls	r2, r2, #31
 800d21c:	d501      	bpl.n	800d222 <_printf_float+0x1ba>
 800d21e:	3302      	adds	r3, #2
 800d220:	e7f4      	b.n	800d20c <_printf_float+0x1a4>
 800d222:	2301      	movs	r3, #1
 800d224:	e7f2      	b.n	800d20c <_printf_float+0x1a4>
 800d226:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800d22a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d22c:	4299      	cmp	r1, r3
 800d22e:	db05      	blt.n	800d23c <_printf_float+0x1d4>
 800d230:	6823      	ldr	r3, [r4, #0]
 800d232:	6121      	str	r1, [r4, #16]
 800d234:	07d8      	lsls	r0, r3, #31
 800d236:	d5ea      	bpl.n	800d20e <_printf_float+0x1a6>
 800d238:	1c4b      	adds	r3, r1, #1
 800d23a:	e7e7      	b.n	800d20c <_printf_float+0x1a4>
 800d23c:	2900      	cmp	r1, #0
 800d23e:	bfd4      	ite	le
 800d240:	f1c1 0202 	rsble	r2, r1, #2
 800d244:	2201      	movgt	r2, #1
 800d246:	4413      	add	r3, r2
 800d248:	e7e0      	b.n	800d20c <_printf_float+0x1a4>
 800d24a:	6823      	ldr	r3, [r4, #0]
 800d24c:	055a      	lsls	r2, r3, #21
 800d24e:	d407      	bmi.n	800d260 <_printf_float+0x1f8>
 800d250:	6923      	ldr	r3, [r4, #16]
 800d252:	4642      	mov	r2, r8
 800d254:	4631      	mov	r1, r6
 800d256:	4628      	mov	r0, r5
 800d258:	47b8      	blx	r7
 800d25a:	3001      	adds	r0, #1
 800d25c:	d12c      	bne.n	800d2b8 <_printf_float+0x250>
 800d25e:	e764      	b.n	800d12a <_printf_float+0xc2>
 800d260:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d264:	f240 80e0 	bls.w	800d428 <_printf_float+0x3c0>
 800d268:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d26c:	2200      	movs	r2, #0
 800d26e:	2300      	movs	r3, #0
 800d270:	f7f3 fc32 	bl	8000ad8 <__aeabi_dcmpeq>
 800d274:	2800      	cmp	r0, #0
 800d276:	d034      	beq.n	800d2e2 <_printf_float+0x27a>
 800d278:	4a37      	ldr	r2, [pc, #220]	; (800d358 <_printf_float+0x2f0>)
 800d27a:	2301      	movs	r3, #1
 800d27c:	4631      	mov	r1, r6
 800d27e:	4628      	mov	r0, r5
 800d280:	47b8      	blx	r7
 800d282:	3001      	adds	r0, #1
 800d284:	f43f af51 	beq.w	800d12a <_printf_float+0xc2>
 800d288:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d28c:	429a      	cmp	r2, r3
 800d28e:	db02      	blt.n	800d296 <_printf_float+0x22e>
 800d290:	6823      	ldr	r3, [r4, #0]
 800d292:	07d8      	lsls	r0, r3, #31
 800d294:	d510      	bpl.n	800d2b8 <_printf_float+0x250>
 800d296:	ee18 3a10 	vmov	r3, s16
 800d29a:	4652      	mov	r2, sl
 800d29c:	4631      	mov	r1, r6
 800d29e:	4628      	mov	r0, r5
 800d2a0:	47b8      	blx	r7
 800d2a2:	3001      	adds	r0, #1
 800d2a4:	f43f af41 	beq.w	800d12a <_printf_float+0xc2>
 800d2a8:	f04f 0800 	mov.w	r8, #0
 800d2ac:	f104 091a 	add.w	r9, r4, #26
 800d2b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d2b2:	3b01      	subs	r3, #1
 800d2b4:	4543      	cmp	r3, r8
 800d2b6:	dc09      	bgt.n	800d2cc <_printf_float+0x264>
 800d2b8:	6823      	ldr	r3, [r4, #0]
 800d2ba:	079b      	lsls	r3, r3, #30
 800d2bc:	f100 8105 	bmi.w	800d4ca <_printf_float+0x462>
 800d2c0:	68e0      	ldr	r0, [r4, #12]
 800d2c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d2c4:	4298      	cmp	r0, r3
 800d2c6:	bfb8      	it	lt
 800d2c8:	4618      	movlt	r0, r3
 800d2ca:	e730      	b.n	800d12e <_printf_float+0xc6>
 800d2cc:	2301      	movs	r3, #1
 800d2ce:	464a      	mov	r2, r9
 800d2d0:	4631      	mov	r1, r6
 800d2d2:	4628      	mov	r0, r5
 800d2d4:	47b8      	blx	r7
 800d2d6:	3001      	adds	r0, #1
 800d2d8:	f43f af27 	beq.w	800d12a <_printf_float+0xc2>
 800d2dc:	f108 0801 	add.w	r8, r8, #1
 800d2e0:	e7e6      	b.n	800d2b0 <_printf_float+0x248>
 800d2e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	dc39      	bgt.n	800d35c <_printf_float+0x2f4>
 800d2e8:	4a1b      	ldr	r2, [pc, #108]	; (800d358 <_printf_float+0x2f0>)
 800d2ea:	2301      	movs	r3, #1
 800d2ec:	4631      	mov	r1, r6
 800d2ee:	4628      	mov	r0, r5
 800d2f0:	47b8      	blx	r7
 800d2f2:	3001      	adds	r0, #1
 800d2f4:	f43f af19 	beq.w	800d12a <_printf_float+0xc2>
 800d2f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d2fc:	4313      	orrs	r3, r2
 800d2fe:	d102      	bne.n	800d306 <_printf_float+0x29e>
 800d300:	6823      	ldr	r3, [r4, #0]
 800d302:	07d9      	lsls	r1, r3, #31
 800d304:	d5d8      	bpl.n	800d2b8 <_printf_float+0x250>
 800d306:	ee18 3a10 	vmov	r3, s16
 800d30a:	4652      	mov	r2, sl
 800d30c:	4631      	mov	r1, r6
 800d30e:	4628      	mov	r0, r5
 800d310:	47b8      	blx	r7
 800d312:	3001      	adds	r0, #1
 800d314:	f43f af09 	beq.w	800d12a <_printf_float+0xc2>
 800d318:	f04f 0900 	mov.w	r9, #0
 800d31c:	f104 0a1a 	add.w	sl, r4, #26
 800d320:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d322:	425b      	negs	r3, r3
 800d324:	454b      	cmp	r3, r9
 800d326:	dc01      	bgt.n	800d32c <_printf_float+0x2c4>
 800d328:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d32a:	e792      	b.n	800d252 <_printf_float+0x1ea>
 800d32c:	2301      	movs	r3, #1
 800d32e:	4652      	mov	r2, sl
 800d330:	4631      	mov	r1, r6
 800d332:	4628      	mov	r0, r5
 800d334:	47b8      	blx	r7
 800d336:	3001      	adds	r0, #1
 800d338:	f43f aef7 	beq.w	800d12a <_printf_float+0xc2>
 800d33c:	f109 0901 	add.w	r9, r9, #1
 800d340:	e7ee      	b.n	800d320 <_printf_float+0x2b8>
 800d342:	bf00      	nop
 800d344:	7fefffff 	.word	0x7fefffff
 800d348:	0803d150 	.word	0x0803d150
 800d34c:	0803d154 	.word	0x0803d154
 800d350:	0803d15c 	.word	0x0803d15c
 800d354:	0803d158 	.word	0x0803d158
 800d358:	0803d160 	.word	0x0803d160
 800d35c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d35e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d360:	429a      	cmp	r2, r3
 800d362:	bfa8      	it	ge
 800d364:	461a      	movge	r2, r3
 800d366:	2a00      	cmp	r2, #0
 800d368:	4691      	mov	r9, r2
 800d36a:	dc37      	bgt.n	800d3dc <_printf_float+0x374>
 800d36c:	f04f 0b00 	mov.w	fp, #0
 800d370:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d374:	f104 021a 	add.w	r2, r4, #26
 800d378:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d37a:	9305      	str	r3, [sp, #20]
 800d37c:	eba3 0309 	sub.w	r3, r3, r9
 800d380:	455b      	cmp	r3, fp
 800d382:	dc33      	bgt.n	800d3ec <_printf_float+0x384>
 800d384:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d388:	429a      	cmp	r2, r3
 800d38a:	db3b      	blt.n	800d404 <_printf_float+0x39c>
 800d38c:	6823      	ldr	r3, [r4, #0]
 800d38e:	07da      	lsls	r2, r3, #31
 800d390:	d438      	bmi.n	800d404 <_printf_float+0x39c>
 800d392:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d394:	9a05      	ldr	r2, [sp, #20]
 800d396:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d398:	1a9a      	subs	r2, r3, r2
 800d39a:	eba3 0901 	sub.w	r9, r3, r1
 800d39e:	4591      	cmp	r9, r2
 800d3a0:	bfa8      	it	ge
 800d3a2:	4691      	movge	r9, r2
 800d3a4:	f1b9 0f00 	cmp.w	r9, #0
 800d3a8:	dc35      	bgt.n	800d416 <_printf_float+0x3ae>
 800d3aa:	f04f 0800 	mov.w	r8, #0
 800d3ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d3b2:	f104 0a1a 	add.w	sl, r4, #26
 800d3b6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d3ba:	1a9b      	subs	r3, r3, r2
 800d3bc:	eba3 0309 	sub.w	r3, r3, r9
 800d3c0:	4543      	cmp	r3, r8
 800d3c2:	f77f af79 	ble.w	800d2b8 <_printf_float+0x250>
 800d3c6:	2301      	movs	r3, #1
 800d3c8:	4652      	mov	r2, sl
 800d3ca:	4631      	mov	r1, r6
 800d3cc:	4628      	mov	r0, r5
 800d3ce:	47b8      	blx	r7
 800d3d0:	3001      	adds	r0, #1
 800d3d2:	f43f aeaa 	beq.w	800d12a <_printf_float+0xc2>
 800d3d6:	f108 0801 	add.w	r8, r8, #1
 800d3da:	e7ec      	b.n	800d3b6 <_printf_float+0x34e>
 800d3dc:	4613      	mov	r3, r2
 800d3de:	4631      	mov	r1, r6
 800d3e0:	4642      	mov	r2, r8
 800d3e2:	4628      	mov	r0, r5
 800d3e4:	47b8      	blx	r7
 800d3e6:	3001      	adds	r0, #1
 800d3e8:	d1c0      	bne.n	800d36c <_printf_float+0x304>
 800d3ea:	e69e      	b.n	800d12a <_printf_float+0xc2>
 800d3ec:	2301      	movs	r3, #1
 800d3ee:	4631      	mov	r1, r6
 800d3f0:	4628      	mov	r0, r5
 800d3f2:	9205      	str	r2, [sp, #20]
 800d3f4:	47b8      	blx	r7
 800d3f6:	3001      	adds	r0, #1
 800d3f8:	f43f ae97 	beq.w	800d12a <_printf_float+0xc2>
 800d3fc:	9a05      	ldr	r2, [sp, #20]
 800d3fe:	f10b 0b01 	add.w	fp, fp, #1
 800d402:	e7b9      	b.n	800d378 <_printf_float+0x310>
 800d404:	ee18 3a10 	vmov	r3, s16
 800d408:	4652      	mov	r2, sl
 800d40a:	4631      	mov	r1, r6
 800d40c:	4628      	mov	r0, r5
 800d40e:	47b8      	blx	r7
 800d410:	3001      	adds	r0, #1
 800d412:	d1be      	bne.n	800d392 <_printf_float+0x32a>
 800d414:	e689      	b.n	800d12a <_printf_float+0xc2>
 800d416:	9a05      	ldr	r2, [sp, #20]
 800d418:	464b      	mov	r3, r9
 800d41a:	4442      	add	r2, r8
 800d41c:	4631      	mov	r1, r6
 800d41e:	4628      	mov	r0, r5
 800d420:	47b8      	blx	r7
 800d422:	3001      	adds	r0, #1
 800d424:	d1c1      	bne.n	800d3aa <_printf_float+0x342>
 800d426:	e680      	b.n	800d12a <_printf_float+0xc2>
 800d428:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d42a:	2a01      	cmp	r2, #1
 800d42c:	dc01      	bgt.n	800d432 <_printf_float+0x3ca>
 800d42e:	07db      	lsls	r3, r3, #31
 800d430:	d538      	bpl.n	800d4a4 <_printf_float+0x43c>
 800d432:	2301      	movs	r3, #1
 800d434:	4642      	mov	r2, r8
 800d436:	4631      	mov	r1, r6
 800d438:	4628      	mov	r0, r5
 800d43a:	47b8      	blx	r7
 800d43c:	3001      	adds	r0, #1
 800d43e:	f43f ae74 	beq.w	800d12a <_printf_float+0xc2>
 800d442:	ee18 3a10 	vmov	r3, s16
 800d446:	4652      	mov	r2, sl
 800d448:	4631      	mov	r1, r6
 800d44a:	4628      	mov	r0, r5
 800d44c:	47b8      	blx	r7
 800d44e:	3001      	adds	r0, #1
 800d450:	f43f ae6b 	beq.w	800d12a <_printf_float+0xc2>
 800d454:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d458:	2200      	movs	r2, #0
 800d45a:	2300      	movs	r3, #0
 800d45c:	f7f3 fb3c 	bl	8000ad8 <__aeabi_dcmpeq>
 800d460:	b9d8      	cbnz	r0, 800d49a <_printf_float+0x432>
 800d462:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d464:	f108 0201 	add.w	r2, r8, #1
 800d468:	3b01      	subs	r3, #1
 800d46a:	4631      	mov	r1, r6
 800d46c:	4628      	mov	r0, r5
 800d46e:	47b8      	blx	r7
 800d470:	3001      	adds	r0, #1
 800d472:	d10e      	bne.n	800d492 <_printf_float+0x42a>
 800d474:	e659      	b.n	800d12a <_printf_float+0xc2>
 800d476:	2301      	movs	r3, #1
 800d478:	4652      	mov	r2, sl
 800d47a:	4631      	mov	r1, r6
 800d47c:	4628      	mov	r0, r5
 800d47e:	47b8      	blx	r7
 800d480:	3001      	adds	r0, #1
 800d482:	f43f ae52 	beq.w	800d12a <_printf_float+0xc2>
 800d486:	f108 0801 	add.w	r8, r8, #1
 800d48a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d48c:	3b01      	subs	r3, #1
 800d48e:	4543      	cmp	r3, r8
 800d490:	dcf1      	bgt.n	800d476 <_printf_float+0x40e>
 800d492:	464b      	mov	r3, r9
 800d494:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d498:	e6dc      	b.n	800d254 <_printf_float+0x1ec>
 800d49a:	f04f 0800 	mov.w	r8, #0
 800d49e:	f104 0a1a 	add.w	sl, r4, #26
 800d4a2:	e7f2      	b.n	800d48a <_printf_float+0x422>
 800d4a4:	2301      	movs	r3, #1
 800d4a6:	4642      	mov	r2, r8
 800d4a8:	e7df      	b.n	800d46a <_printf_float+0x402>
 800d4aa:	2301      	movs	r3, #1
 800d4ac:	464a      	mov	r2, r9
 800d4ae:	4631      	mov	r1, r6
 800d4b0:	4628      	mov	r0, r5
 800d4b2:	47b8      	blx	r7
 800d4b4:	3001      	adds	r0, #1
 800d4b6:	f43f ae38 	beq.w	800d12a <_printf_float+0xc2>
 800d4ba:	f108 0801 	add.w	r8, r8, #1
 800d4be:	68e3      	ldr	r3, [r4, #12]
 800d4c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d4c2:	1a5b      	subs	r3, r3, r1
 800d4c4:	4543      	cmp	r3, r8
 800d4c6:	dcf0      	bgt.n	800d4aa <_printf_float+0x442>
 800d4c8:	e6fa      	b.n	800d2c0 <_printf_float+0x258>
 800d4ca:	f04f 0800 	mov.w	r8, #0
 800d4ce:	f104 0919 	add.w	r9, r4, #25
 800d4d2:	e7f4      	b.n	800d4be <_printf_float+0x456>

0800d4d4 <_printf_common>:
 800d4d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d4d8:	4616      	mov	r6, r2
 800d4da:	4699      	mov	r9, r3
 800d4dc:	688a      	ldr	r2, [r1, #8]
 800d4de:	690b      	ldr	r3, [r1, #16]
 800d4e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d4e4:	4293      	cmp	r3, r2
 800d4e6:	bfb8      	it	lt
 800d4e8:	4613      	movlt	r3, r2
 800d4ea:	6033      	str	r3, [r6, #0]
 800d4ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d4f0:	4607      	mov	r7, r0
 800d4f2:	460c      	mov	r4, r1
 800d4f4:	b10a      	cbz	r2, 800d4fa <_printf_common+0x26>
 800d4f6:	3301      	adds	r3, #1
 800d4f8:	6033      	str	r3, [r6, #0]
 800d4fa:	6823      	ldr	r3, [r4, #0]
 800d4fc:	0699      	lsls	r1, r3, #26
 800d4fe:	bf42      	ittt	mi
 800d500:	6833      	ldrmi	r3, [r6, #0]
 800d502:	3302      	addmi	r3, #2
 800d504:	6033      	strmi	r3, [r6, #0]
 800d506:	6825      	ldr	r5, [r4, #0]
 800d508:	f015 0506 	ands.w	r5, r5, #6
 800d50c:	d106      	bne.n	800d51c <_printf_common+0x48>
 800d50e:	f104 0a19 	add.w	sl, r4, #25
 800d512:	68e3      	ldr	r3, [r4, #12]
 800d514:	6832      	ldr	r2, [r6, #0]
 800d516:	1a9b      	subs	r3, r3, r2
 800d518:	42ab      	cmp	r3, r5
 800d51a:	dc26      	bgt.n	800d56a <_printf_common+0x96>
 800d51c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d520:	1e13      	subs	r3, r2, #0
 800d522:	6822      	ldr	r2, [r4, #0]
 800d524:	bf18      	it	ne
 800d526:	2301      	movne	r3, #1
 800d528:	0692      	lsls	r2, r2, #26
 800d52a:	d42b      	bmi.n	800d584 <_printf_common+0xb0>
 800d52c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d530:	4649      	mov	r1, r9
 800d532:	4638      	mov	r0, r7
 800d534:	47c0      	blx	r8
 800d536:	3001      	adds	r0, #1
 800d538:	d01e      	beq.n	800d578 <_printf_common+0xa4>
 800d53a:	6823      	ldr	r3, [r4, #0]
 800d53c:	68e5      	ldr	r5, [r4, #12]
 800d53e:	6832      	ldr	r2, [r6, #0]
 800d540:	f003 0306 	and.w	r3, r3, #6
 800d544:	2b04      	cmp	r3, #4
 800d546:	bf08      	it	eq
 800d548:	1aad      	subeq	r5, r5, r2
 800d54a:	68a3      	ldr	r3, [r4, #8]
 800d54c:	6922      	ldr	r2, [r4, #16]
 800d54e:	bf0c      	ite	eq
 800d550:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d554:	2500      	movne	r5, #0
 800d556:	4293      	cmp	r3, r2
 800d558:	bfc4      	itt	gt
 800d55a:	1a9b      	subgt	r3, r3, r2
 800d55c:	18ed      	addgt	r5, r5, r3
 800d55e:	2600      	movs	r6, #0
 800d560:	341a      	adds	r4, #26
 800d562:	42b5      	cmp	r5, r6
 800d564:	d11a      	bne.n	800d59c <_printf_common+0xc8>
 800d566:	2000      	movs	r0, #0
 800d568:	e008      	b.n	800d57c <_printf_common+0xa8>
 800d56a:	2301      	movs	r3, #1
 800d56c:	4652      	mov	r2, sl
 800d56e:	4649      	mov	r1, r9
 800d570:	4638      	mov	r0, r7
 800d572:	47c0      	blx	r8
 800d574:	3001      	adds	r0, #1
 800d576:	d103      	bne.n	800d580 <_printf_common+0xac>
 800d578:	f04f 30ff 	mov.w	r0, #4294967295
 800d57c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d580:	3501      	adds	r5, #1
 800d582:	e7c6      	b.n	800d512 <_printf_common+0x3e>
 800d584:	18e1      	adds	r1, r4, r3
 800d586:	1c5a      	adds	r2, r3, #1
 800d588:	2030      	movs	r0, #48	; 0x30
 800d58a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d58e:	4422      	add	r2, r4
 800d590:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d594:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d598:	3302      	adds	r3, #2
 800d59a:	e7c7      	b.n	800d52c <_printf_common+0x58>
 800d59c:	2301      	movs	r3, #1
 800d59e:	4622      	mov	r2, r4
 800d5a0:	4649      	mov	r1, r9
 800d5a2:	4638      	mov	r0, r7
 800d5a4:	47c0      	blx	r8
 800d5a6:	3001      	adds	r0, #1
 800d5a8:	d0e6      	beq.n	800d578 <_printf_common+0xa4>
 800d5aa:	3601      	adds	r6, #1
 800d5ac:	e7d9      	b.n	800d562 <_printf_common+0x8e>
	...

0800d5b0 <_printf_i>:
 800d5b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d5b4:	7e0f      	ldrb	r7, [r1, #24]
 800d5b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d5b8:	2f78      	cmp	r7, #120	; 0x78
 800d5ba:	4691      	mov	r9, r2
 800d5bc:	4680      	mov	r8, r0
 800d5be:	460c      	mov	r4, r1
 800d5c0:	469a      	mov	sl, r3
 800d5c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d5c6:	d807      	bhi.n	800d5d8 <_printf_i+0x28>
 800d5c8:	2f62      	cmp	r7, #98	; 0x62
 800d5ca:	d80a      	bhi.n	800d5e2 <_printf_i+0x32>
 800d5cc:	2f00      	cmp	r7, #0
 800d5ce:	f000 80d8 	beq.w	800d782 <_printf_i+0x1d2>
 800d5d2:	2f58      	cmp	r7, #88	; 0x58
 800d5d4:	f000 80a3 	beq.w	800d71e <_printf_i+0x16e>
 800d5d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d5dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d5e0:	e03a      	b.n	800d658 <_printf_i+0xa8>
 800d5e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d5e6:	2b15      	cmp	r3, #21
 800d5e8:	d8f6      	bhi.n	800d5d8 <_printf_i+0x28>
 800d5ea:	a101      	add	r1, pc, #4	; (adr r1, 800d5f0 <_printf_i+0x40>)
 800d5ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d5f0:	0800d649 	.word	0x0800d649
 800d5f4:	0800d65d 	.word	0x0800d65d
 800d5f8:	0800d5d9 	.word	0x0800d5d9
 800d5fc:	0800d5d9 	.word	0x0800d5d9
 800d600:	0800d5d9 	.word	0x0800d5d9
 800d604:	0800d5d9 	.word	0x0800d5d9
 800d608:	0800d65d 	.word	0x0800d65d
 800d60c:	0800d5d9 	.word	0x0800d5d9
 800d610:	0800d5d9 	.word	0x0800d5d9
 800d614:	0800d5d9 	.word	0x0800d5d9
 800d618:	0800d5d9 	.word	0x0800d5d9
 800d61c:	0800d769 	.word	0x0800d769
 800d620:	0800d68d 	.word	0x0800d68d
 800d624:	0800d74b 	.word	0x0800d74b
 800d628:	0800d5d9 	.word	0x0800d5d9
 800d62c:	0800d5d9 	.word	0x0800d5d9
 800d630:	0800d78b 	.word	0x0800d78b
 800d634:	0800d5d9 	.word	0x0800d5d9
 800d638:	0800d68d 	.word	0x0800d68d
 800d63c:	0800d5d9 	.word	0x0800d5d9
 800d640:	0800d5d9 	.word	0x0800d5d9
 800d644:	0800d753 	.word	0x0800d753
 800d648:	682b      	ldr	r3, [r5, #0]
 800d64a:	1d1a      	adds	r2, r3, #4
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	602a      	str	r2, [r5, #0]
 800d650:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d654:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d658:	2301      	movs	r3, #1
 800d65a:	e0a3      	b.n	800d7a4 <_printf_i+0x1f4>
 800d65c:	6820      	ldr	r0, [r4, #0]
 800d65e:	6829      	ldr	r1, [r5, #0]
 800d660:	0606      	lsls	r6, r0, #24
 800d662:	f101 0304 	add.w	r3, r1, #4
 800d666:	d50a      	bpl.n	800d67e <_printf_i+0xce>
 800d668:	680e      	ldr	r6, [r1, #0]
 800d66a:	602b      	str	r3, [r5, #0]
 800d66c:	2e00      	cmp	r6, #0
 800d66e:	da03      	bge.n	800d678 <_printf_i+0xc8>
 800d670:	232d      	movs	r3, #45	; 0x2d
 800d672:	4276      	negs	r6, r6
 800d674:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d678:	485e      	ldr	r0, [pc, #376]	; (800d7f4 <_printf_i+0x244>)
 800d67a:	230a      	movs	r3, #10
 800d67c:	e019      	b.n	800d6b2 <_printf_i+0x102>
 800d67e:	680e      	ldr	r6, [r1, #0]
 800d680:	602b      	str	r3, [r5, #0]
 800d682:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d686:	bf18      	it	ne
 800d688:	b236      	sxthne	r6, r6
 800d68a:	e7ef      	b.n	800d66c <_printf_i+0xbc>
 800d68c:	682b      	ldr	r3, [r5, #0]
 800d68e:	6820      	ldr	r0, [r4, #0]
 800d690:	1d19      	adds	r1, r3, #4
 800d692:	6029      	str	r1, [r5, #0]
 800d694:	0601      	lsls	r1, r0, #24
 800d696:	d501      	bpl.n	800d69c <_printf_i+0xec>
 800d698:	681e      	ldr	r6, [r3, #0]
 800d69a:	e002      	b.n	800d6a2 <_printf_i+0xf2>
 800d69c:	0646      	lsls	r6, r0, #25
 800d69e:	d5fb      	bpl.n	800d698 <_printf_i+0xe8>
 800d6a0:	881e      	ldrh	r6, [r3, #0]
 800d6a2:	4854      	ldr	r0, [pc, #336]	; (800d7f4 <_printf_i+0x244>)
 800d6a4:	2f6f      	cmp	r7, #111	; 0x6f
 800d6a6:	bf0c      	ite	eq
 800d6a8:	2308      	moveq	r3, #8
 800d6aa:	230a      	movne	r3, #10
 800d6ac:	2100      	movs	r1, #0
 800d6ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d6b2:	6865      	ldr	r5, [r4, #4]
 800d6b4:	60a5      	str	r5, [r4, #8]
 800d6b6:	2d00      	cmp	r5, #0
 800d6b8:	bfa2      	ittt	ge
 800d6ba:	6821      	ldrge	r1, [r4, #0]
 800d6bc:	f021 0104 	bicge.w	r1, r1, #4
 800d6c0:	6021      	strge	r1, [r4, #0]
 800d6c2:	b90e      	cbnz	r6, 800d6c8 <_printf_i+0x118>
 800d6c4:	2d00      	cmp	r5, #0
 800d6c6:	d04d      	beq.n	800d764 <_printf_i+0x1b4>
 800d6c8:	4615      	mov	r5, r2
 800d6ca:	fbb6 f1f3 	udiv	r1, r6, r3
 800d6ce:	fb03 6711 	mls	r7, r3, r1, r6
 800d6d2:	5dc7      	ldrb	r7, [r0, r7]
 800d6d4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d6d8:	4637      	mov	r7, r6
 800d6da:	42bb      	cmp	r3, r7
 800d6dc:	460e      	mov	r6, r1
 800d6de:	d9f4      	bls.n	800d6ca <_printf_i+0x11a>
 800d6e0:	2b08      	cmp	r3, #8
 800d6e2:	d10b      	bne.n	800d6fc <_printf_i+0x14c>
 800d6e4:	6823      	ldr	r3, [r4, #0]
 800d6e6:	07de      	lsls	r6, r3, #31
 800d6e8:	d508      	bpl.n	800d6fc <_printf_i+0x14c>
 800d6ea:	6923      	ldr	r3, [r4, #16]
 800d6ec:	6861      	ldr	r1, [r4, #4]
 800d6ee:	4299      	cmp	r1, r3
 800d6f0:	bfde      	ittt	le
 800d6f2:	2330      	movle	r3, #48	; 0x30
 800d6f4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d6f8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d6fc:	1b52      	subs	r2, r2, r5
 800d6fe:	6122      	str	r2, [r4, #16]
 800d700:	f8cd a000 	str.w	sl, [sp]
 800d704:	464b      	mov	r3, r9
 800d706:	aa03      	add	r2, sp, #12
 800d708:	4621      	mov	r1, r4
 800d70a:	4640      	mov	r0, r8
 800d70c:	f7ff fee2 	bl	800d4d4 <_printf_common>
 800d710:	3001      	adds	r0, #1
 800d712:	d14c      	bne.n	800d7ae <_printf_i+0x1fe>
 800d714:	f04f 30ff 	mov.w	r0, #4294967295
 800d718:	b004      	add	sp, #16
 800d71a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d71e:	4835      	ldr	r0, [pc, #212]	; (800d7f4 <_printf_i+0x244>)
 800d720:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d724:	6829      	ldr	r1, [r5, #0]
 800d726:	6823      	ldr	r3, [r4, #0]
 800d728:	f851 6b04 	ldr.w	r6, [r1], #4
 800d72c:	6029      	str	r1, [r5, #0]
 800d72e:	061d      	lsls	r5, r3, #24
 800d730:	d514      	bpl.n	800d75c <_printf_i+0x1ac>
 800d732:	07df      	lsls	r7, r3, #31
 800d734:	bf44      	itt	mi
 800d736:	f043 0320 	orrmi.w	r3, r3, #32
 800d73a:	6023      	strmi	r3, [r4, #0]
 800d73c:	b91e      	cbnz	r6, 800d746 <_printf_i+0x196>
 800d73e:	6823      	ldr	r3, [r4, #0]
 800d740:	f023 0320 	bic.w	r3, r3, #32
 800d744:	6023      	str	r3, [r4, #0]
 800d746:	2310      	movs	r3, #16
 800d748:	e7b0      	b.n	800d6ac <_printf_i+0xfc>
 800d74a:	6823      	ldr	r3, [r4, #0]
 800d74c:	f043 0320 	orr.w	r3, r3, #32
 800d750:	6023      	str	r3, [r4, #0]
 800d752:	2378      	movs	r3, #120	; 0x78
 800d754:	4828      	ldr	r0, [pc, #160]	; (800d7f8 <_printf_i+0x248>)
 800d756:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d75a:	e7e3      	b.n	800d724 <_printf_i+0x174>
 800d75c:	0659      	lsls	r1, r3, #25
 800d75e:	bf48      	it	mi
 800d760:	b2b6      	uxthmi	r6, r6
 800d762:	e7e6      	b.n	800d732 <_printf_i+0x182>
 800d764:	4615      	mov	r5, r2
 800d766:	e7bb      	b.n	800d6e0 <_printf_i+0x130>
 800d768:	682b      	ldr	r3, [r5, #0]
 800d76a:	6826      	ldr	r6, [r4, #0]
 800d76c:	6961      	ldr	r1, [r4, #20]
 800d76e:	1d18      	adds	r0, r3, #4
 800d770:	6028      	str	r0, [r5, #0]
 800d772:	0635      	lsls	r5, r6, #24
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	d501      	bpl.n	800d77c <_printf_i+0x1cc>
 800d778:	6019      	str	r1, [r3, #0]
 800d77a:	e002      	b.n	800d782 <_printf_i+0x1d2>
 800d77c:	0670      	lsls	r0, r6, #25
 800d77e:	d5fb      	bpl.n	800d778 <_printf_i+0x1c8>
 800d780:	8019      	strh	r1, [r3, #0]
 800d782:	2300      	movs	r3, #0
 800d784:	6123      	str	r3, [r4, #16]
 800d786:	4615      	mov	r5, r2
 800d788:	e7ba      	b.n	800d700 <_printf_i+0x150>
 800d78a:	682b      	ldr	r3, [r5, #0]
 800d78c:	1d1a      	adds	r2, r3, #4
 800d78e:	602a      	str	r2, [r5, #0]
 800d790:	681d      	ldr	r5, [r3, #0]
 800d792:	6862      	ldr	r2, [r4, #4]
 800d794:	2100      	movs	r1, #0
 800d796:	4628      	mov	r0, r5
 800d798:	f7f2 fd2a 	bl	80001f0 <memchr>
 800d79c:	b108      	cbz	r0, 800d7a2 <_printf_i+0x1f2>
 800d79e:	1b40      	subs	r0, r0, r5
 800d7a0:	6060      	str	r0, [r4, #4]
 800d7a2:	6863      	ldr	r3, [r4, #4]
 800d7a4:	6123      	str	r3, [r4, #16]
 800d7a6:	2300      	movs	r3, #0
 800d7a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d7ac:	e7a8      	b.n	800d700 <_printf_i+0x150>
 800d7ae:	6923      	ldr	r3, [r4, #16]
 800d7b0:	462a      	mov	r2, r5
 800d7b2:	4649      	mov	r1, r9
 800d7b4:	4640      	mov	r0, r8
 800d7b6:	47d0      	blx	sl
 800d7b8:	3001      	adds	r0, #1
 800d7ba:	d0ab      	beq.n	800d714 <_printf_i+0x164>
 800d7bc:	6823      	ldr	r3, [r4, #0]
 800d7be:	079b      	lsls	r3, r3, #30
 800d7c0:	d413      	bmi.n	800d7ea <_printf_i+0x23a>
 800d7c2:	68e0      	ldr	r0, [r4, #12]
 800d7c4:	9b03      	ldr	r3, [sp, #12]
 800d7c6:	4298      	cmp	r0, r3
 800d7c8:	bfb8      	it	lt
 800d7ca:	4618      	movlt	r0, r3
 800d7cc:	e7a4      	b.n	800d718 <_printf_i+0x168>
 800d7ce:	2301      	movs	r3, #1
 800d7d0:	4632      	mov	r2, r6
 800d7d2:	4649      	mov	r1, r9
 800d7d4:	4640      	mov	r0, r8
 800d7d6:	47d0      	blx	sl
 800d7d8:	3001      	adds	r0, #1
 800d7da:	d09b      	beq.n	800d714 <_printf_i+0x164>
 800d7dc:	3501      	adds	r5, #1
 800d7de:	68e3      	ldr	r3, [r4, #12]
 800d7e0:	9903      	ldr	r1, [sp, #12]
 800d7e2:	1a5b      	subs	r3, r3, r1
 800d7e4:	42ab      	cmp	r3, r5
 800d7e6:	dcf2      	bgt.n	800d7ce <_printf_i+0x21e>
 800d7e8:	e7eb      	b.n	800d7c2 <_printf_i+0x212>
 800d7ea:	2500      	movs	r5, #0
 800d7ec:	f104 0619 	add.w	r6, r4, #25
 800d7f0:	e7f5      	b.n	800d7de <_printf_i+0x22e>
 800d7f2:	bf00      	nop
 800d7f4:	0803d162 	.word	0x0803d162
 800d7f8:	0803d173 	.word	0x0803d173

0800d7fc <siprintf>:
 800d7fc:	b40e      	push	{r1, r2, r3}
 800d7fe:	b500      	push	{lr}
 800d800:	b09c      	sub	sp, #112	; 0x70
 800d802:	ab1d      	add	r3, sp, #116	; 0x74
 800d804:	9002      	str	r0, [sp, #8]
 800d806:	9006      	str	r0, [sp, #24]
 800d808:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d80c:	4809      	ldr	r0, [pc, #36]	; (800d834 <siprintf+0x38>)
 800d80e:	9107      	str	r1, [sp, #28]
 800d810:	9104      	str	r1, [sp, #16]
 800d812:	4909      	ldr	r1, [pc, #36]	; (800d838 <siprintf+0x3c>)
 800d814:	f853 2b04 	ldr.w	r2, [r3], #4
 800d818:	9105      	str	r1, [sp, #20]
 800d81a:	6800      	ldr	r0, [r0, #0]
 800d81c:	9301      	str	r3, [sp, #4]
 800d81e:	a902      	add	r1, sp, #8
 800d820:	f001 fb88 	bl	800ef34 <_svfiprintf_r>
 800d824:	9b02      	ldr	r3, [sp, #8]
 800d826:	2200      	movs	r2, #0
 800d828:	701a      	strb	r2, [r3, #0]
 800d82a:	b01c      	add	sp, #112	; 0x70
 800d82c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d830:	b003      	add	sp, #12
 800d832:	4770      	bx	lr
 800d834:	20000250 	.word	0x20000250
 800d838:	ffff0208 	.word	0xffff0208

0800d83c <strncat>:
 800d83c:	b530      	push	{r4, r5, lr}
 800d83e:	4604      	mov	r4, r0
 800d840:	7825      	ldrb	r5, [r4, #0]
 800d842:	4623      	mov	r3, r4
 800d844:	3401      	adds	r4, #1
 800d846:	2d00      	cmp	r5, #0
 800d848:	d1fa      	bne.n	800d840 <strncat+0x4>
 800d84a:	3a01      	subs	r2, #1
 800d84c:	d304      	bcc.n	800d858 <strncat+0x1c>
 800d84e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d852:	f803 4b01 	strb.w	r4, [r3], #1
 800d856:	b904      	cbnz	r4, 800d85a <strncat+0x1e>
 800d858:	bd30      	pop	{r4, r5, pc}
 800d85a:	2a00      	cmp	r2, #0
 800d85c:	d1f5      	bne.n	800d84a <strncat+0xe>
 800d85e:	701a      	strb	r2, [r3, #0]
 800d860:	e7f3      	b.n	800d84a <strncat+0xe>

0800d862 <quorem>:
 800d862:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d866:	6903      	ldr	r3, [r0, #16]
 800d868:	690c      	ldr	r4, [r1, #16]
 800d86a:	42a3      	cmp	r3, r4
 800d86c:	4607      	mov	r7, r0
 800d86e:	f2c0 8081 	blt.w	800d974 <quorem+0x112>
 800d872:	3c01      	subs	r4, #1
 800d874:	f101 0814 	add.w	r8, r1, #20
 800d878:	f100 0514 	add.w	r5, r0, #20
 800d87c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d880:	9301      	str	r3, [sp, #4]
 800d882:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d886:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d88a:	3301      	adds	r3, #1
 800d88c:	429a      	cmp	r2, r3
 800d88e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d892:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d896:	fbb2 f6f3 	udiv	r6, r2, r3
 800d89a:	d331      	bcc.n	800d900 <quorem+0x9e>
 800d89c:	f04f 0e00 	mov.w	lr, #0
 800d8a0:	4640      	mov	r0, r8
 800d8a2:	46ac      	mov	ip, r5
 800d8a4:	46f2      	mov	sl, lr
 800d8a6:	f850 2b04 	ldr.w	r2, [r0], #4
 800d8aa:	b293      	uxth	r3, r2
 800d8ac:	fb06 e303 	mla	r3, r6, r3, lr
 800d8b0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d8b4:	b29b      	uxth	r3, r3
 800d8b6:	ebaa 0303 	sub.w	r3, sl, r3
 800d8ba:	f8dc a000 	ldr.w	sl, [ip]
 800d8be:	0c12      	lsrs	r2, r2, #16
 800d8c0:	fa13 f38a 	uxtah	r3, r3, sl
 800d8c4:	fb06 e202 	mla	r2, r6, r2, lr
 800d8c8:	9300      	str	r3, [sp, #0]
 800d8ca:	9b00      	ldr	r3, [sp, #0]
 800d8cc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d8d0:	b292      	uxth	r2, r2
 800d8d2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d8d6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d8da:	f8bd 3000 	ldrh.w	r3, [sp]
 800d8de:	4581      	cmp	r9, r0
 800d8e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d8e4:	f84c 3b04 	str.w	r3, [ip], #4
 800d8e8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d8ec:	d2db      	bcs.n	800d8a6 <quorem+0x44>
 800d8ee:	f855 300b 	ldr.w	r3, [r5, fp]
 800d8f2:	b92b      	cbnz	r3, 800d900 <quorem+0x9e>
 800d8f4:	9b01      	ldr	r3, [sp, #4]
 800d8f6:	3b04      	subs	r3, #4
 800d8f8:	429d      	cmp	r5, r3
 800d8fa:	461a      	mov	r2, r3
 800d8fc:	d32e      	bcc.n	800d95c <quorem+0xfa>
 800d8fe:	613c      	str	r4, [r7, #16]
 800d900:	4638      	mov	r0, r7
 800d902:	f001 f8c3 	bl	800ea8c <__mcmp>
 800d906:	2800      	cmp	r0, #0
 800d908:	db24      	blt.n	800d954 <quorem+0xf2>
 800d90a:	3601      	adds	r6, #1
 800d90c:	4628      	mov	r0, r5
 800d90e:	f04f 0c00 	mov.w	ip, #0
 800d912:	f858 2b04 	ldr.w	r2, [r8], #4
 800d916:	f8d0 e000 	ldr.w	lr, [r0]
 800d91a:	b293      	uxth	r3, r2
 800d91c:	ebac 0303 	sub.w	r3, ip, r3
 800d920:	0c12      	lsrs	r2, r2, #16
 800d922:	fa13 f38e 	uxtah	r3, r3, lr
 800d926:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d92a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d92e:	b29b      	uxth	r3, r3
 800d930:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d934:	45c1      	cmp	r9, r8
 800d936:	f840 3b04 	str.w	r3, [r0], #4
 800d93a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d93e:	d2e8      	bcs.n	800d912 <quorem+0xb0>
 800d940:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d944:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d948:	b922      	cbnz	r2, 800d954 <quorem+0xf2>
 800d94a:	3b04      	subs	r3, #4
 800d94c:	429d      	cmp	r5, r3
 800d94e:	461a      	mov	r2, r3
 800d950:	d30a      	bcc.n	800d968 <quorem+0x106>
 800d952:	613c      	str	r4, [r7, #16]
 800d954:	4630      	mov	r0, r6
 800d956:	b003      	add	sp, #12
 800d958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d95c:	6812      	ldr	r2, [r2, #0]
 800d95e:	3b04      	subs	r3, #4
 800d960:	2a00      	cmp	r2, #0
 800d962:	d1cc      	bne.n	800d8fe <quorem+0x9c>
 800d964:	3c01      	subs	r4, #1
 800d966:	e7c7      	b.n	800d8f8 <quorem+0x96>
 800d968:	6812      	ldr	r2, [r2, #0]
 800d96a:	3b04      	subs	r3, #4
 800d96c:	2a00      	cmp	r2, #0
 800d96e:	d1f0      	bne.n	800d952 <quorem+0xf0>
 800d970:	3c01      	subs	r4, #1
 800d972:	e7eb      	b.n	800d94c <quorem+0xea>
 800d974:	2000      	movs	r0, #0
 800d976:	e7ee      	b.n	800d956 <quorem+0xf4>

0800d978 <_dtoa_r>:
 800d978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d97c:	ed2d 8b04 	vpush	{d8-d9}
 800d980:	ec57 6b10 	vmov	r6, r7, d0
 800d984:	b093      	sub	sp, #76	; 0x4c
 800d986:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d988:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d98c:	9106      	str	r1, [sp, #24]
 800d98e:	ee10 aa10 	vmov	sl, s0
 800d992:	4604      	mov	r4, r0
 800d994:	9209      	str	r2, [sp, #36]	; 0x24
 800d996:	930c      	str	r3, [sp, #48]	; 0x30
 800d998:	46bb      	mov	fp, r7
 800d99a:	b975      	cbnz	r5, 800d9ba <_dtoa_r+0x42>
 800d99c:	2010      	movs	r0, #16
 800d99e:	f000 fddd 	bl	800e55c <malloc>
 800d9a2:	4602      	mov	r2, r0
 800d9a4:	6260      	str	r0, [r4, #36]	; 0x24
 800d9a6:	b920      	cbnz	r0, 800d9b2 <_dtoa_r+0x3a>
 800d9a8:	4ba7      	ldr	r3, [pc, #668]	; (800dc48 <_dtoa_r+0x2d0>)
 800d9aa:	21ea      	movs	r1, #234	; 0xea
 800d9ac:	48a7      	ldr	r0, [pc, #668]	; (800dc4c <_dtoa_r+0x2d4>)
 800d9ae:	f001 fbd1 	bl	800f154 <__assert_func>
 800d9b2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d9b6:	6005      	str	r5, [r0, #0]
 800d9b8:	60c5      	str	r5, [r0, #12]
 800d9ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d9bc:	6819      	ldr	r1, [r3, #0]
 800d9be:	b151      	cbz	r1, 800d9d6 <_dtoa_r+0x5e>
 800d9c0:	685a      	ldr	r2, [r3, #4]
 800d9c2:	604a      	str	r2, [r1, #4]
 800d9c4:	2301      	movs	r3, #1
 800d9c6:	4093      	lsls	r3, r2
 800d9c8:	608b      	str	r3, [r1, #8]
 800d9ca:	4620      	mov	r0, r4
 800d9cc:	f000 fe1c 	bl	800e608 <_Bfree>
 800d9d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d9d2:	2200      	movs	r2, #0
 800d9d4:	601a      	str	r2, [r3, #0]
 800d9d6:	1e3b      	subs	r3, r7, #0
 800d9d8:	bfaa      	itet	ge
 800d9da:	2300      	movge	r3, #0
 800d9dc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800d9e0:	f8c8 3000 	strge.w	r3, [r8]
 800d9e4:	4b9a      	ldr	r3, [pc, #616]	; (800dc50 <_dtoa_r+0x2d8>)
 800d9e6:	bfbc      	itt	lt
 800d9e8:	2201      	movlt	r2, #1
 800d9ea:	f8c8 2000 	strlt.w	r2, [r8]
 800d9ee:	ea33 030b 	bics.w	r3, r3, fp
 800d9f2:	d11b      	bne.n	800da2c <_dtoa_r+0xb4>
 800d9f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d9f6:	f242 730f 	movw	r3, #9999	; 0x270f
 800d9fa:	6013      	str	r3, [r2, #0]
 800d9fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800da00:	4333      	orrs	r3, r6
 800da02:	f000 8592 	beq.w	800e52a <_dtoa_r+0xbb2>
 800da06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800da08:	b963      	cbnz	r3, 800da24 <_dtoa_r+0xac>
 800da0a:	4b92      	ldr	r3, [pc, #584]	; (800dc54 <_dtoa_r+0x2dc>)
 800da0c:	e022      	b.n	800da54 <_dtoa_r+0xdc>
 800da0e:	4b92      	ldr	r3, [pc, #584]	; (800dc58 <_dtoa_r+0x2e0>)
 800da10:	9301      	str	r3, [sp, #4]
 800da12:	3308      	adds	r3, #8
 800da14:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800da16:	6013      	str	r3, [r2, #0]
 800da18:	9801      	ldr	r0, [sp, #4]
 800da1a:	b013      	add	sp, #76	; 0x4c
 800da1c:	ecbd 8b04 	vpop	{d8-d9}
 800da20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da24:	4b8b      	ldr	r3, [pc, #556]	; (800dc54 <_dtoa_r+0x2dc>)
 800da26:	9301      	str	r3, [sp, #4]
 800da28:	3303      	adds	r3, #3
 800da2a:	e7f3      	b.n	800da14 <_dtoa_r+0x9c>
 800da2c:	2200      	movs	r2, #0
 800da2e:	2300      	movs	r3, #0
 800da30:	4650      	mov	r0, sl
 800da32:	4659      	mov	r1, fp
 800da34:	f7f3 f850 	bl	8000ad8 <__aeabi_dcmpeq>
 800da38:	ec4b ab19 	vmov	d9, sl, fp
 800da3c:	4680      	mov	r8, r0
 800da3e:	b158      	cbz	r0, 800da58 <_dtoa_r+0xe0>
 800da40:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800da42:	2301      	movs	r3, #1
 800da44:	6013      	str	r3, [r2, #0]
 800da46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800da48:	2b00      	cmp	r3, #0
 800da4a:	f000 856b 	beq.w	800e524 <_dtoa_r+0xbac>
 800da4e:	4883      	ldr	r0, [pc, #524]	; (800dc5c <_dtoa_r+0x2e4>)
 800da50:	6018      	str	r0, [r3, #0]
 800da52:	1e43      	subs	r3, r0, #1
 800da54:	9301      	str	r3, [sp, #4]
 800da56:	e7df      	b.n	800da18 <_dtoa_r+0xa0>
 800da58:	ec4b ab10 	vmov	d0, sl, fp
 800da5c:	aa10      	add	r2, sp, #64	; 0x40
 800da5e:	a911      	add	r1, sp, #68	; 0x44
 800da60:	4620      	mov	r0, r4
 800da62:	f001 f8b9 	bl	800ebd8 <__d2b>
 800da66:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800da6a:	ee08 0a10 	vmov	s16, r0
 800da6e:	2d00      	cmp	r5, #0
 800da70:	f000 8084 	beq.w	800db7c <_dtoa_r+0x204>
 800da74:	ee19 3a90 	vmov	r3, s19
 800da78:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800da7c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800da80:	4656      	mov	r6, sl
 800da82:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800da86:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800da8a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800da8e:	4b74      	ldr	r3, [pc, #464]	; (800dc60 <_dtoa_r+0x2e8>)
 800da90:	2200      	movs	r2, #0
 800da92:	4630      	mov	r0, r6
 800da94:	4639      	mov	r1, r7
 800da96:	f7f2 fbff 	bl	8000298 <__aeabi_dsub>
 800da9a:	a365      	add	r3, pc, #404	; (adr r3, 800dc30 <_dtoa_r+0x2b8>)
 800da9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daa0:	f7f2 fdb2 	bl	8000608 <__aeabi_dmul>
 800daa4:	a364      	add	r3, pc, #400	; (adr r3, 800dc38 <_dtoa_r+0x2c0>)
 800daa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daaa:	f7f2 fbf7 	bl	800029c <__adddf3>
 800daae:	4606      	mov	r6, r0
 800dab0:	4628      	mov	r0, r5
 800dab2:	460f      	mov	r7, r1
 800dab4:	f7f2 fd3e 	bl	8000534 <__aeabi_i2d>
 800dab8:	a361      	add	r3, pc, #388	; (adr r3, 800dc40 <_dtoa_r+0x2c8>)
 800daba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dabe:	f7f2 fda3 	bl	8000608 <__aeabi_dmul>
 800dac2:	4602      	mov	r2, r0
 800dac4:	460b      	mov	r3, r1
 800dac6:	4630      	mov	r0, r6
 800dac8:	4639      	mov	r1, r7
 800daca:	f7f2 fbe7 	bl	800029c <__adddf3>
 800dace:	4606      	mov	r6, r0
 800dad0:	460f      	mov	r7, r1
 800dad2:	f7f3 f849 	bl	8000b68 <__aeabi_d2iz>
 800dad6:	2200      	movs	r2, #0
 800dad8:	9000      	str	r0, [sp, #0]
 800dada:	2300      	movs	r3, #0
 800dadc:	4630      	mov	r0, r6
 800dade:	4639      	mov	r1, r7
 800dae0:	f7f3 f804 	bl	8000aec <__aeabi_dcmplt>
 800dae4:	b150      	cbz	r0, 800dafc <_dtoa_r+0x184>
 800dae6:	9800      	ldr	r0, [sp, #0]
 800dae8:	f7f2 fd24 	bl	8000534 <__aeabi_i2d>
 800daec:	4632      	mov	r2, r6
 800daee:	463b      	mov	r3, r7
 800daf0:	f7f2 fff2 	bl	8000ad8 <__aeabi_dcmpeq>
 800daf4:	b910      	cbnz	r0, 800dafc <_dtoa_r+0x184>
 800daf6:	9b00      	ldr	r3, [sp, #0]
 800daf8:	3b01      	subs	r3, #1
 800dafa:	9300      	str	r3, [sp, #0]
 800dafc:	9b00      	ldr	r3, [sp, #0]
 800dafe:	2b16      	cmp	r3, #22
 800db00:	d85a      	bhi.n	800dbb8 <_dtoa_r+0x240>
 800db02:	9a00      	ldr	r2, [sp, #0]
 800db04:	4b57      	ldr	r3, [pc, #348]	; (800dc64 <_dtoa_r+0x2ec>)
 800db06:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800db0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db0e:	ec51 0b19 	vmov	r0, r1, d9
 800db12:	f7f2 ffeb 	bl	8000aec <__aeabi_dcmplt>
 800db16:	2800      	cmp	r0, #0
 800db18:	d050      	beq.n	800dbbc <_dtoa_r+0x244>
 800db1a:	9b00      	ldr	r3, [sp, #0]
 800db1c:	3b01      	subs	r3, #1
 800db1e:	9300      	str	r3, [sp, #0]
 800db20:	2300      	movs	r3, #0
 800db22:	930b      	str	r3, [sp, #44]	; 0x2c
 800db24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800db26:	1b5d      	subs	r5, r3, r5
 800db28:	1e6b      	subs	r3, r5, #1
 800db2a:	9305      	str	r3, [sp, #20]
 800db2c:	bf45      	ittet	mi
 800db2e:	f1c5 0301 	rsbmi	r3, r5, #1
 800db32:	9304      	strmi	r3, [sp, #16]
 800db34:	2300      	movpl	r3, #0
 800db36:	2300      	movmi	r3, #0
 800db38:	bf4c      	ite	mi
 800db3a:	9305      	strmi	r3, [sp, #20]
 800db3c:	9304      	strpl	r3, [sp, #16]
 800db3e:	9b00      	ldr	r3, [sp, #0]
 800db40:	2b00      	cmp	r3, #0
 800db42:	db3d      	blt.n	800dbc0 <_dtoa_r+0x248>
 800db44:	9b05      	ldr	r3, [sp, #20]
 800db46:	9a00      	ldr	r2, [sp, #0]
 800db48:	920a      	str	r2, [sp, #40]	; 0x28
 800db4a:	4413      	add	r3, r2
 800db4c:	9305      	str	r3, [sp, #20]
 800db4e:	2300      	movs	r3, #0
 800db50:	9307      	str	r3, [sp, #28]
 800db52:	9b06      	ldr	r3, [sp, #24]
 800db54:	2b09      	cmp	r3, #9
 800db56:	f200 8089 	bhi.w	800dc6c <_dtoa_r+0x2f4>
 800db5a:	2b05      	cmp	r3, #5
 800db5c:	bfc4      	itt	gt
 800db5e:	3b04      	subgt	r3, #4
 800db60:	9306      	strgt	r3, [sp, #24]
 800db62:	9b06      	ldr	r3, [sp, #24]
 800db64:	f1a3 0302 	sub.w	r3, r3, #2
 800db68:	bfcc      	ite	gt
 800db6a:	2500      	movgt	r5, #0
 800db6c:	2501      	movle	r5, #1
 800db6e:	2b03      	cmp	r3, #3
 800db70:	f200 8087 	bhi.w	800dc82 <_dtoa_r+0x30a>
 800db74:	e8df f003 	tbb	[pc, r3]
 800db78:	59383a2d 	.word	0x59383a2d
 800db7c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800db80:	441d      	add	r5, r3
 800db82:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800db86:	2b20      	cmp	r3, #32
 800db88:	bfc1      	itttt	gt
 800db8a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800db8e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800db92:	fa0b f303 	lslgt.w	r3, fp, r3
 800db96:	fa26 f000 	lsrgt.w	r0, r6, r0
 800db9a:	bfda      	itte	le
 800db9c:	f1c3 0320 	rsble	r3, r3, #32
 800dba0:	fa06 f003 	lslle.w	r0, r6, r3
 800dba4:	4318      	orrgt	r0, r3
 800dba6:	f7f2 fcb5 	bl	8000514 <__aeabi_ui2d>
 800dbaa:	2301      	movs	r3, #1
 800dbac:	4606      	mov	r6, r0
 800dbae:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800dbb2:	3d01      	subs	r5, #1
 800dbb4:	930e      	str	r3, [sp, #56]	; 0x38
 800dbb6:	e76a      	b.n	800da8e <_dtoa_r+0x116>
 800dbb8:	2301      	movs	r3, #1
 800dbba:	e7b2      	b.n	800db22 <_dtoa_r+0x1aa>
 800dbbc:	900b      	str	r0, [sp, #44]	; 0x2c
 800dbbe:	e7b1      	b.n	800db24 <_dtoa_r+0x1ac>
 800dbc0:	9b04      	ldr	r3, [sp, #16]
 800dbc2:	9a00      	ldr	r2, [sp, #0]
 800dbc4:	1a9b      	subs	r3, r3, r2
 800dbc6:	9304      	str	r3, [sp, #16]
 800dbc8:	4253      	negs	r3, r2
 800dbca:	9307      	str	r3, [sp, #28]
 800dbcc:	2300      	movs	r3, #0
 800dbce:	930a      	str	r3, [sp, #40]	; 0x28
 800dbd0:	e7bf      	b.n	800db52 <_dtoa_r+0x1da>
 800dbd2:	2300      	movs	r3, #0
 800dbd4:	9308      	str	r3, [sp, #32]
 800dbd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	dc55      	bgt.n	800dc88 <_dtoa_r+0x310>
 800dbdc:	2301      	movs	r3, #1
 800dbde:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800dbe2:	461a      	mov	r2, r3
 800dbe4:	9209      	str	r2, [sp, #36]	; 0x24
 800dbe6:	e00c      	b.n	800dc02 <_dtoa_r+0x28a>
 800dbe8:	2301      	movs	r3, #1
 800dbea:	e7f3      	b.n	800dbd4 <_dtoa_r+0x25c>
 800dbec:	2300      	movs	r3, #0
 800dbee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dbf0:	9308      	str	r3, [sp, #32]
 800dbf2:	9b00      	ldr	r3, [sp, #0]
 800dbf4:	4413      	add	r3, r2
 800dbf6:	9302      	str	r3, [sp, #8]
 800dbf8:	3301      	adds	r3, #1
 800dbfa:	2b01      	cmp	r3, #1
 800dbfc:	9303      	str	r3, [sp, #12]
 800dbfe:	bfb8      	it	lt
 800dc00:	2301      	movlt	r3, #1
 800dc02:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800dc04:	2200      	movs	r2, #0
 800dc06:	6042      	str	r2, [r0, #4]
 800dc08:	2204      	movs	r2, #4
 800dc0a:	f102 0614 	add.w	r6, r2, #20
 800dc0e:	429e      	cmp	r6, r3
 800dc10:	6841      	ldr	r1, [r0, #4]
 800dc12:	d93d      	bls.n	800dc90 <_dtoa_r+0x318>
 800dc14:	4620      	mov	r0, r4
 800dc16:	f000 fcb7 	bl	800e588 <_Balloc>
 800dc1a:	9001      	str	r0, [sp, #4]
 800dc1c:	2800      	cmp	r0, #0
 800dc1e:	d13b      	bne.n	800dc98 <_dtoa_r+0x320>
 800dc20:	4b11      	ldr	r3, [pc, #68]	; (800dc68 <_dtoa_r+0x2f0>)
 800dc22:	4602      	mov	r2, r0
 800dc24:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800dc28:	e6c0      	b.n	800d9ac <_dtoa_r+0x34>
 800dc2a:	2301      	movs	r3, #1
 800dc2c:	e7df      	b.n	800dbee <_dtoa_r+0x276>
 800dc2e:	bf00      	nop
 800dc30:	636f4361 	.word	0x636f4361
 800dc34:	3fd287a7 	.word	0x3fd287a7
 800dc38:	8b60c8b3 	.word	0x8b60c8b3
 800dc3c:	3fc68a28 	.word	0x3fc68a28
 800dc40:	509f79fb 	.word	0x509f79fb
 800dc44:	3fd34413 	.word	0x3fd34413
 800dc48:	0803d191 	.word	0x0803d191
 800dc4c:	0803d1a8 	.word	0x0803d1a8
 800dc50:	7ff00000 	.word	0x7ff00000
 800dc54:	0803d18d 	.word	0x0803d18d
 800dc58:	0803d184 	.word	0x0803d184
 800dc5c:	0803d161 	.word	0x0803d161
 800dc60:	3ff80000 	.word	0x3ff80000
 800dc64:	0803d298 	.word	0x0803d298
 800dc68:	0803d203 	.word	0x0803d203
 800dc6c:	2501      	movs	r5, #1
 800dc6e:	2300      	movs	r3, #0
 800dc70:	9306      	str	r3, [sp, #24]
 800dc72:	9508      	str	r5, [sp, #32]
 800dc74:	f04f 33ff 	mov.w	r3, #4294967295
 800dc78:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800dc7c:	2200      	movs	r2, #0
 800dc7e:	2312      	movs	r3, #18
 800dc80:	e7b0      	b.n	800dbe4 <_dtoa_r+0x26c>
 800dc82:	2301      	movs	r3, #1
 800dc84:	9308      	str	r3, [sp, #32]
 800dc86:	e7f5      	b.n	800dc74 <_dtoa_r+0x2fc>
 800dc88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc8a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800dc8e:	e7b8      	b.n	800dc02 <_dtoa_r+0x28a>
 800dc90:	3101      	adds	r1, #1
 800dc92:	6041      	str	r1, [r0, #4]
 800dc94:	0052      	lsls	r2, r2, #1
 800dc96:	e7b8      	b.n	800dc0a <_dtoa_r+0x292>
 800dc98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dc9a:	9a01      	ldr	r2, [sp, #4]
 800dc9c:	601a      	str	r2, [r3, #0]
 800dc9e:	9b03      	ldr	r3, [sp, #12]
 800dca0:	2b0e      	cmp	r3, #14
 800dca2:	f200 809d 	bhi.w	800dde0 <_dtoa_r+0x468>
 800dca6:	2d00      	cmp	r5, #0
 800dca8:	f000 809a 	beq.w	800dde0 <_dtoa_r+0x468>
 800dcac:	9b00      	ldr	r3, [sp, #0]
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	dd32      	ble.n	800dd18 <_dtoa_r+0x3a0>
 800dcb2:	4ab7      	ldr	r2, [pc, #732]	; (800df90 <_dtoa_r+0x618>)
 800dcb4:	f003 030f 	and.w	r3, r3, #15
 800dcb8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800dcbc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800dcc0:	9b00      	ldr	r3, [sp, #0]
 800dcc2:	05d8      	lsls	r0, r3, #23
 800dcc4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800dcc8:	d516      	bpl.n	800dcf8 <_dtoa_r+0x380>
 800dcca:	4bb2      	ldr	r3, [pc, #712]	; (800df94 <_dtoa_r+0x61c>)
 800dccc:	ec51 0b19 	vmov	r0, r1, d9
 800dcd0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800dcd4:	f7f2 fdc2 	bl	800085c <__aeabi_ddiv>
 800dcd8:	f007 070f 	and.w	r7, r7, #15
 800dcdc:	4682      	mov	sl, r0
 800dcde:	468b      	mov	fp, r1
 800dce0:	2503      	movs	r5, #3
 800dce2:	4eac      	ldr	r6, [pc, #688]	; (800df94 <_dtoa_r+0x61c>)
 800dce4:	b957      	cbnz	r7, 800dcfc <_dtoa_r+0x384>
 800dce6:	4642      	mov	r2, r8
 800dce8:	464b      	mov	r3, r9
 800dcea:	4650      	mov	r0, sl
 800dcec:	4659      	mov	r1, fp
 800dcee:	f7f2 fdb5 	bl	800085c <__aeabi_ddiv>
 800dcf2:	4682      	mov	sl, r0
 800dcf4:	468b      	mov	fp, r1
 800dcf6:	e028      	b.n	800dd4a <_dtoa_r+0x3d2>
 800dcf8:	2502      	movs	r5, #2
 800dcfa:	e7f2      	b.n	800dce2 <_dtoa_r+0x36a>
 800dcfc:	07f9      	lsls	r1, r7, #31
 800dcfe:	d508      	bpl.n	800dd12 <_dtoa_r+0x39a>
 800dd00:	4640      	mov	r0, r8
 800dd02:	4649      	mov	r1, r9
 800dd04:	e9d6 2300 	ldrd	r2, r3, [r6]
 800dd08:	f7f2 fc7e 	bl	8000608 <__aeabi_dmul>
 800dd0c:	3501      	adds	r5, #1
 800dd0e:	4680      	mov	r8, r0
 800dd10:	4689      	mov	r9, r1
 800dd12:	107f      	asrs	r7, r7, #1
 800dd14:	3608      	adds	r6, #8
 800dd16:	e7e5      	b.n	800dce4 <_dtoa_r+0x36c>
 800dd18:	f000 809b 	beq.w	800de52 <_dtoa_r+0x4da>
 800dd1c:	9b00      	ldr	r3, [sp, #0]
 800dd1e:	4f9d      	ldr	r7, [pc, #628]	; (800df94 <_dtoa_r+0x61c>)
 800dd20:	425e      	negs	r6, r3
 800dd22:	4b9b      	ldr	r3, [pc, #620]	; (800df90 <_dtoa_r+0x618>)
 800dd24:	f006 020f 	and.w	r2, r6, #15
 800dd28:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dd2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd30:	ec51 0b19 	vmov	r0, r1, d9
 800dd34:	f7f2 fc68 	bl	8000608 <__aeabi_dmul>
 800dd38:	1136      	asrs	r6, r6, #4
 800dd3a:	4682      	mov	sl, r0
 800dd3c:	468b      	mov	fp, r1
 800dd3e:	2300      	movs	r3, #0
 800dd40:	2502      	movs	r5, #2
 800dd42:	2e00      	cmp	r6, #0
 800dd44:	d17a      	bne.n	800de3c <_dtoa_r+0x4c4>
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d1d3      	bne.n	800dcf2 <_dtoa_r+0x37a>
 800dd4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	f000 8082 	beq.w	800de56 <_dtoa_r+0x4de>
 800dd52:	4b91      	ldr	r3, [pc, #580]	; (800df98 <_dtoa_r+0x620>)
 800dd54:	2200      	movs	r2, #0
 800dd56:	4650      	mov	r0, sl
 800dd58:	4659      	mov	r1, fp
 800dd5a:	f7f2 fec7 	bl	8000aec <__aeabi_dcmplt>
 800dd5e:	2800      	cmp	r0, #0
 800dd60:	d079      	beq.n	800de56 <_dtoa_r+0x4de>
 800dd62:	9b03      	ldr	r3, [sp, #12]
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d076      	beq.n	800de56 <_dtoa_r+0x4de>
 800dd68:	9b02      	ldr	r3, [sp, #8]
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	dd36      	ble.n	800dddc <_dtoa_r+0x464>
 800dd6e:	9b00      	ldr	r3, [sp, #0]
 800dd70:	4650      	mov	r0, sl
 800dd72:	4659      	mov	r1, fp
 800dd74:	1e5f      	subs	r7, r3, #1
 800dd76:	2200      	movs	r2, #0
 800dd78:	4b88      	ldr	r3, [pc, #544]	; (800df9c <_dtoa_r+0x624>)
 800dd7a:	f7f2 fc45 	bl	8000608 <__aeabi_dmul>
 800dd7e:	9e02      	ldr	r6, [sp, #8]
 800dd80:	4682      	mov	sl, r0
 800dd82:	468b      	mov	fp, r1
 800dd84:	3501      	adds	r5, #1
 800dd86:	4628      	mov	r0, r5
 800dd88:	f7f2 fbd4 	bl	8000534 <__aeabi_i2d>
 800dd8c:	4652      	mov	r2, sl
 800dd8e:	465b      	mov	r3, fp
 800dd90:	f7f2 fc3a 	bl	8000608 <__aeabi_dmul>
 800dd94:	4b82      	ldr	r3, [pc, #520]	; (800dfa0 <_dtoa_r+0x628>)
 800dd96:	2200      	movs	r2, #0
 800dd98:	f7f2 fa80 	bl	800029c <__adddf3>
 800dd9c:	46d0      	mov	r8, sl
 800dd9e:	46d9      	mov	r9, fp
 800dda0:	4682      	mov	sl, r0
 800dda2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800dda6:	2e00      	cmp	r6, #0
 800dda8:	d158      	bne.n	800de5c <_dtoa_r+0x4e4>
 800ddaa:	4b7e      	ldr	r3, [pc, #504]	; (800dfa4 <_dtoa_r+0x62c>)
 800ddac:	2200      	movs	r2, #0
 800ddae:	4640      	mov	r0, r8
 800ddb0:	4649      	mov	r1, r9
 800ddb2:	f7f2 fa71 	bl	8000298 <__aeabi_dsub>
 800ddb6:	4652      	mov	r2, sl
 800ddb8:	465b      	mov	r3, fp
 800ddba:	4680      	mov	r8, r0
 800ddbc:	4689      	mov	r9, r1
 800ddbe:	f7f2 feb3 	bl	8000b28 <__aeabi_dcmpgt>
 800ddc2:	2800      	cmp	r0, #0
 800ddc4:	f040 8295 	bne.w	800e2f2 <_dtoa_r+0x97a>
 800ddc8:	4652      	mov	r2, sl
 800ddca:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ddce:	4640      	mov	r0, r8
 800ddd0:	4649      	mov	r1, r9
 800ddd2:	f7f2 fe8b 	bl	8000aec <__aeabi_dcmplt>
 800ddd6:	2800      	cmp	r0, #0
 800ddd8:	f040 8289 	bne.w	800e2ee <_dtoa_r+0x976>
 800dddc:	ec5b ab19 	vmov	sl, fp, d9
 800dde0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	f2c0 8148 	blt.w	800e078 <_dtoa_r+0x700>
 800dde8:	9a00      	ldr	r2, [sp, #0]
 800ddea:	2a0e      	cmp	r2, #14
 800ddec:	f300 8144 	bgt.w	800e078 <_dtoa_r+0x700>
 800ddf0:	4b67      	ldr	r3, [pc, #412]	; (800df90 <_dtoa_r+0x618>)
 800ddf2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ddf6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ddfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	f280 80d5 	bge.w	800dfac <_dtoa_r+0x634>
 800de02:	9b03      	ldr	r3, [sp, #12]
 800de04:	2b00      	cmp	r3, #0
 800de06:	f300 80d1 	bgt.w	800dfac <_dtoa_r+0x634>
 800de0a:	f040 826f 	bne.w	800e2ec <_dtoa_r+0x974>
 800de0e:	4b65      	ldr	r3, [pc, #404]	; (800dfa4 <_dtoa_r+0x62c>)
 800de10:	2200      	movs	r2, #0
 800de12:	4640      	mov	r0, r8
 800de14:	4649      	mov	r1, r9
 800de16:	f7f2 fbf7 	bl	8000608 <__aeabi_dmul>
 800de1a:	4652      	mov	r2, sl
 800de1c:	465b      	mov	r3, fp
 800de1e:	f7f2 fe79 	bl	8000b14 <__aeabi_dcmpge>
 800de22:	9e03      	ldr	r6, [sp, #12]
 800de24:	4637      	mov	r7, r6
 800de26:	2800      	cmp	r0, #0
 800de28:	f040 8245 	bne.w	800e2b6 <_dtoa_r+0x93e>
 800de2c:	9d01      	ldr	r5, [sp, #4]
 800de2e:	2331      	movs	r3, #49	; 0x31
 800de30:	f805 3b01 	strb.w	r3, [r5], #1
 800de34:	9b00      	ldr	r3, [sp, #0]
 800de36:	3301      	adds	r3, #1
 800de38:	9300      	str	r3, [sp, #0]
 800de3a:	e240      	b.n	800e2be <_dtoa_r+0x946>
 800de3c:	07f2      	lsls	r2, r6, #31
 800de3e:	d505      	bpl.n	800de4c <_dtoa_r+0x4d4>
 800de40:	e9d7 2300 	ldrd	r2, r3, [r7]
 800de44:	f7f2 fbe0 	bl	8000608 <__aeabi_dmul>
 800de48:	3501      	adds	r5, #1
 800de4a:	2301      	movs	r3, #1
 800de4c:	1076      	asrs	r6, r6, #1
 800de4e:	3708      	adds	r7, #8
 800de50:	e777      	b.n	800dd42 <_dtoa_r+0x3ca>
 800de52:	2502      	movs	r5, #2
 800de54:	e779      	b.n	800dd4a <_dtoa_r+0x3d2>
 800de56:	9f00      	ldr	r7, [sp, #0]
 800de58:	9e03      	ldr	r6, [sp, #12]
 800de5a:	e794      	b.n	800dd86 <_dtoa_r+0x40e>
 800de5c:	9901      	ldr	r1, [sp, #4]
 800de5e:	4b4c      	ldr	r3, [pc, #304]	; (800df90 <_dtoa_r+0x618>)
 800de60:	4431      	add	r1, r6
 800de62:	910d      	str	r1, [sp, #52]	; 0x34
 800de64:	9908      	ldr	r1, [sp, #32]
 800de66:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800de6a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800de6e:	2900      	cmp	r1, #0
 800de70:	d043      	beq.n	800defa <_dtoa_r+0x582>
 800de72:	494d      	ldr	r1, [pc, #308]	; (800dfa8 <_dtoa_r+0x630>)
 800de74:	2000      	movs	r0, #0
 800de76:	f7f2 fcf1 	bl	800085c <__aeabi_ddiv>
 800de7a:	4652      	mov	r2, sl
 800de7c:	465b      	mov	r3, fp
 800de7e:	f7f2 fa0b 	bl	8000298 <__aeabi_dsub>
 800de82:	9d01      	ldr	r5, [sp, #4]
 800de84:	4682      	mov	sl, r0
 800de86:	468b      	mov	fp, r1
 800de88:	4649      	mov	r1, r9
 800de8a:	4640      	mov	r0, r8
 800de8c:	f7f2 fe6c 	bl	8000b68 <__aeabi_d2iz>
 800de90:	4606      	mov	r6, r0
 800de92:	f7f2 fb4f 	bl	8000534 <__aeabi_i2d>
 800de96:	4602      	mov	r2, r0
 800de98:	460b      	mov	r3, r1
 800de9a:	4640      	mov	r0, r8
 800de9c:	4649      	mov	r1, r9
 800de9e:	f7f2 f9fb 	bl	8000298 <__aeabi_dsub>
 800dea2:	3630      	adds	r6, #48	; 0x30
 800dea4:	f805 6b01 	strb.w	r6, [r5], #1
 800dea8:	4652      	mov	r2, sl
 800deaa:	465b      	mov	r3, fp
 800deac:	4680      	mov	r8, r0
 800deae:	4689      	mov	r9, r1
 800deb0:	f7f2 fe1c 	bl	8000aec <__aeabi_dcmplt>
 800deb4:	2800      	cmp	r0, #0
 800deb6:	d163      	bne.n	800df80 <_dtoa_r+0x608>
 800deb8:	4642      	mov	r2, r8
 800deba:	464b      	mov	r3, r9
 800debc:	4936      	ldr	r1, [pc, #216]	; (800df98 <_dtoa_r+0x620>)
 800debe:	2000      	movs	r0, #0
 800dec0:	f7f2 f9ea 	bl	8000298 <__aeabi_dsub>
 800dec4:	4652      	mov	r2, sl
 800dec6:	465b      	mov	r3, fp
 800dec8:	f7f2 fe10 	bl	8000aec <__aeabi_dcmplt>
 800decc:	2800      	cmp	r0, #0
 800dece:	f040 80b5 	bne.w	800e03c <_dtoa_r+0x6c4>
 800ded2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ded4:	429d      	cmp	r5, r3
 800ded6:	d081      	beq.n	800dddc <_dtoa_r+0x464>
 800ded8:	4b30      	ldr	r3, [pc, #192]	; (800df9c <_dtoa_r+0x624>)
 800deda:	2200      	movs	r2, #0
 800dedc:	4650      	mov	r0, sl
 800dede:	4659      	mov	r1, fp
 800dee0:	f7f2 fb92 	bl	8000608 <__aeabi_dmul>
 800dee4:	4b2d      	ldr	r3, [pc, #180]	; (800df9c <_dtoa_r+0x624>)
 800dee6:	4682      	mov	sl, r0
 800dee8:	468b      	mov	fp, r1
 800deea:	4640      	mov	r0, r8
 800deec:	4649      	mov	r1, r9
 800deee:	2200      	movs	r2, #0
 800def0:	f7f2 fb8a 	bl	8000608 <__aeabi_dmul>
 800def4:	4680      	mov	r8, r0
 800def6:	4689      	mov	r9, r1
 800def8:	e7c6      	b.n	800de88 <_dtoa_r+0x510>
 800defa:	4650      	mov	r0, sl
 800defc:	4659      	mov	r1, fp
 800defe:	f7f2 fb83 	bl	8000608 <__aeabi_dmul>
 800df02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800df04:	9d01      	ldr	r5, [sp, #4]
 800df06:	930f      	str	r3, [sp, #60]	; 0x3c
 800df08:	4682      	mov	sl, r0
 800df0a:	468b      	mov	fp, r1
 800df0c:	4649      	mov	r1, r9
 800df0e:	4640      	mov	r0, r8
 800df10:	f7f2 fe2a 	bl	8000b68 <__aeabi_d2iz>
 800df14:	4606      	mov	r6, r0
 800df16:	f7f2 fb0d 	bl	8000534 <__aeabi_i2d>
 800df1a:	3630      	adds	r6, #48	; 0x30
 800df1c:	4602      	mov	r2, r0
 800df1e:	460b      	mov	r3, r1
 800df20:	4640      	mov	r0, r8
 800df22:	4649      	mov	r1, r9
 800df24:	f7f2 f9b8 	bl	8000298 <__aeabi_dsub>
 800df28:	f805 6b01 	strb.w	r6, [r5], #1
 800df2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800df2e:	429d      	cmp	r5, r3
 800df30:	4680      	mov	r8, r0
 800df32:	4689      	mov	r9, r1
 800df34:	f04f 0200 	mov.w	r2, #0
 800df38:	d124      	bne.n	800df84 <_dtoa_r+0x60c>
 800df3a:	4b1b      	ldr	r3, [pc, #108]	; (800dfa8 <_dtoa_r+0x630>)
 800df3c:	4650      	mov	r0, sl
 800df3e:	4659      	mov	r1, fp
 800df40:	f7f2 f9ac 	bl	800029c <__adddf3>
 800df44:	4602      	mov	r2, r0
 800df46:	460b      	mov	r3, r1
 800df48:	4640      	mov	r0, r8
 800df4a:	4649      	mov	r1, r9
 800df4c:	f7f2 fdec 	bl	8000b28 <__aeabi_dcmpgt>
 800df50:	2800      	cmp	r0, #0
 800df52:	d173      	bne.n	800e03c <_dtoa_r+0x6c4>
 800df54:	4652      	mov	r2, sl
 800df56:	465b      	mov	r3, fp
 800df58:	4913      	ldr	r1, [pc, #76]	; (800dfa8 <_dtoa_r+0x630>)
 800df5a:	2000      	movs	r0, #0
 800df5c:	f7f2 f99c 	bl	8000298 <__aeabi_dsub>
 800df60:	4602      	mov	r2, r0
 800df62:	460b      	mov	r3, r1
 800df64:	4640      	mov	r0, r8
 800df66:	4649      	mov	r1, r9
 800df68:	f7f2 fdc0 	bl	8000aec <__aeabi_dcmplt>
 800df6c:	2800      	cmp	r0, #0
 800df6e:	f43f af35 	beq.w	800dddc <_dtoa_r+0x464>
 800df72:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800df74:	1e6b      	subs	r3, r5, #1
 800df76:	930f      	str	r3, [sp, #60]	; 0x3c
 800df78:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800df7c:	2b30      	cmp	r3, #48	; 0x30
 800df7e:	d0f8      	beq.n	800df72 <_dtoa_r+0x5fa>
 800df80:	9700      	str	r7, [sp, #0]
 800df82:	e049      	b.n	800e018 <_dtoa_r+0x6a0>
 800df84:	4b05      	ldr	r3, [pc, #20]	; (800df9c <_dtoa_r+0x624>)
 800df86:	f7f2 fb3f 	bl	8000608 <__aeabi_dmul>
 800df8a:	4680      	mov	r8, r0
 800df8c:	4689      	mov	r9, r1
 800df8e:	e7bd      	b.n	800df0c <_dtoa_r+0x594>
 800df90:	0803d298 	.word	0x0803d298
 800df94:	0803d270 	.word	0x0803d270
 800df98:	3ff00000 	.word	0x3ff00000
 800df9c:	40240000 	.word	0x40240000
 800dfa0:	401c0000 	.word	0x401c0000
 800dfa4:	40140000 	.word	0x40140000
 800dfa8:	3fe00000 	.word	0x3fe00000
 800dfac:	9d01      	ldr	r5, [sp, #4]
 800dfae:	4656      	mov	r6, sl
 800dfb0:	465f      	mov	r7, fp
 800dfb2:	4642      	mov	r2, r8
 800dfb4:	464b      	mov	r3, r9
 800dfb6:	4630      	mov	r0, r6
 800dfb8:	4639      	mov	r1, r7
 800dfba:	f7f2 fc4f 	bl	800085c <__aeabi_ddiv>
 800dfbe:	f7f2 fdd3 	bl	8000b68 <__aeabi_d2iz>
 800dfc2:	4682      	mov	sl, r0
 800dfc4:	f7f2 fab6 	bl	8000534 <__aeabi_i2d>
 800dfc8:	4642      	mov	r2, r8
 800dfca:	464b      	mov	r3, r9
 800dfcc:	f7f2 fb1c 	bl	8000608 <__aeabi_dmul>
 800dfd0:	4602      	mov	r2, r0
 800dfd2:	460b      	mov	r3, r1
 800dfd4:	4630      	mov	r0, r6
 800dfd6:	4639      	mov	r1, r7
 800dfd8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800dfdc:	f7f2 f95c 	bl	8000298 <__aeabi_dsub>
 800dfe0:	f805 6b01 	strb.w	r6, [r5], #1
 800dfe4:	9e01      	ldr	r6, [sp, #4]
 800dfe6:	9f03      	ldr	r7, [sp, #12]
 800dfe8:	1bae      	subs	r6, r5, r6
 800dfea:	42b7      	cmp	r7, r6
 800dfec:	4602      	mov	r2, r0
 800dfee:	460b      	mov	r3, r1
 800dff0:	d135      	bne.n	800e05e <_dtoa_r+0x6e6>
 800dff2:	f7f2 f953 	bl	800029c <__adddf3>
 800dff6:	4642      	mov	r2, r8
 800dff8:	464b      	mov	r3, r9
 800dffa:	4606      	mov	r6, r0
 800dffc:	460f      	mov	r7, r1
 800dffe:	f7f2 fd93 	bl	8000b28 <__aeabi_dcmpgt>
 800e002:	b9d0      	cbnz	r0, 800e03a <_dtoa_r+0x6c2>
 800e004:	4642      	mov	r2, r8
 800e006:	464b      	mov	r3, r9
 800e008:	4630      	mov	r0, r6
 800e00a:	4639      	mov	r1, r7
 800e00c:	f7f2 fd64 	bl	8000ad8 <__aeabi_dcmpeq>
 800e010:	b110      	cbz	r0, 800e018 <_dtoa_r+0x6a0>
 800e012:	f01a 0f01 	tst.w	sl, #1
 800e016:	d110      	bne.n	800e03a <_dtoa_r+0x6c2>
 800e018:	4620      	mov	r0, r4
 800e01a:	ee18 1a10 	vmov	r1, s16
 800e01e:	f000 faf3 	bl	800e608 <_Bfree>
 800e022:	2300      	movs	r3, #0
 800e024:	9800      	ldr	r0, [sp, #0]
 800e026:	702b      	strb	r3, [r5, #0]
 800e028:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e02a:	3001      	adds	r0, #1
 800e02c:	6018      	str	r0, [r3, #0]
 800e02e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e030:	2b00      	cmp	r3, #0
 800e032:	f43f acf1 	beq.w	800da18 <_dtoa_r+0xa0>
 800e036:	601d      	str	r5, [r3, #0]
 800e038:	e4ee      	b.n	800da18 <_dtoa_r+0xa0>
 800e03a:	9f00      	ldr	r7, [sp, #0]
 800e03c:	462b      	mov	r3, r5
 800e03e:	461d      	mov	r5, r3
 800e040:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e044:	2a39      	cmp	r2, #57	; 0x39
 800e046:	d106      	bne.n	800e056 <_dtoa_r+0x6de>
 800e048:	9a01      	ldr	r2, [sp, #4]
 800e04a:	429a      	cmp	r2, r3
 800e04c:	d1f7      	bne.n	800e03e <_dtoa_r+0x6c6>
 800e04e:	9901      	ldr	r1, [sp, #4]
 800e050:	2230      	movs	r2, #48	; 0x30
 800e052:	3701      	adds	r7, #1
 800e054:	700a      	strb	r2, [r1, #0]
 800e056:	781a      	ldrb	r2, [r3, #0]
 800e058:	3201      	adds	r2, #1
 800e05a:	701a      	strb	r2, [r3, #0]
 800e05c:	e790      	b.n	800df80 <_dtoa_r+0x608>
 800e05e:	4ba6      	ldr	r3, [pc, #664]	; (800e2f8 <_dtoa_r+0x980>)
 800e060:	2200      	movs	r2, #0
 800e062:	f7f2 fad1 	bl	8000608 <__aeabi_dmul>
 800e066:	2200      	movs	r2, #0
 800e068:	2300      	movs	r3, #0
 800e06a:	4606      	mov	r6, r0
 800e06c:	460f      	mov	r7, r1
 800e06e:	f7f2 fd33 	bl	8000ad8 <__aeabi_dcmpeq>
 800e072:	2800      	cmp	r0, #0
 800e074:	d09d      	beq.n	800dfb2 <_dtoa_r+0x63a>
 800e076:	e7cf      	b.n	800e018 <_dtoa_r+0x6a0>
 800e078:	9a08      	ldr	r2, [sp, #32]
 800e07a:	2a00      	cmp	r2, #0
 800e07c:	f000 80d7 	beq.w	800e22e <_dtoa_r+0x8b6>
 800e080:	9a06      	ldr	r2, [sp, #24]
 800e082:	2a01      	cmp	r2, #1
 800e084:	f300 80ba 	bgt.w	800e1fc <_dtoa_r+0x884>
 800e088:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e08a:	2a00      	cmp	r2, #0
 800e08c:	f000 80b2 	beq.w	800e1f4 <_dtoa_r+0x87c>
 800e090:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e094:	9e07      	ldr	r6, [sp, #28]
 800e096:	9d04      	ldr	r5, [sp, #16]
 800e098:	9a04      	ldr	r2, [sp, #16]
 800e09a:	441a      	add	r2, r3
 800e09c:	9204      	str	r2, [sp, #16]
 800e09e:	9a05      	ldr	r2, [sp, #20]
 800e0a0:	2101      	movs	r1, #1
 800e0a2:	441a      	add	r2, r3
 800e0a4:	4620      	mov	r0, r4
 800e0a6:	9205      	str	r2, [sp, #20]
 800e0a8:	f000 fb66 	bl	800e778 <__i2b>
 800e0ac:	4607      	mov	r7, r0
 800e0ae:	2d00      	cmp	r5, #0
 800e0b0:	dd0c      	ble.n	800e0cc <_dtoa_r+0x754>
 800e0b2:	9b05      	ldr	r3, [sp, #20]
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	dd09      	ble.n	800e0cc <_dtoa_r+0x754>
 800e0b8:	42ab      	cmp	r3, r5
 800e0ba:	9a04      	ldr	r2, [sp, #16]
 800e0bc:	bfa8      	it	ge
 800e0be:	462b      	movge	r3, r5
 800e0c0:	1ad2      	subs	r2, r2, r3
 800e0c2:	9204      	str	r2, [sp, #16]
 800e0c4:	9a05      	ldr	r2, [sp, #20]
 800e0c6:	1aed      	subs	r5, r5, r3
 800e0c8:	1ad3      	subs	r3, r2, r3
 800e0ca:	9305      	str	r3, [sp, #20]
 800e0cc:	9b07      	ldr	r3, [sp, #28]
 800e0ce:	b31b      	cbz	r3, 800e118 <_dtoa_r+0x7a0>
 800e0d0:	9b08      	ldr	r3, [sp, #32]
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	f000 80af 	beq.w	800e236 <_dtoa_r+0x8be>
 800e0d8:	2e00      	cmp	r6, #0
 800e0da:	dd13      	ble.n	800e104 <_dtoa_r+0x78c>
 800e0dc:	4639      	mov	r1, r7
 800e0de:	4632      	mov	r2, r6
 800e0e0:	4620      	mov	r0, r4
 800e0e2:	f000 fc09 	bl	800e8f8 <__pow5mult>
 800e0e6:	ee18 2a10 	vmov	r2, s16
 800e0ea:	4601      	mov	r1, r0
 800e0ec:	4607      	mov	r7, r0
 800e0ee:	4620      	mov	r0, r4
 800e0f0:	f000 fb58 	bl	800e7a4 <__multiply>
 800e0f4:	ee18 1a10 	vmov	r1, s16
 800e0f8:	4680      	mov	r8, r0
 800e0fa:	4620      	mov	r0, r4
 800e0fc:	f000 fa84 	bl	800e608 <_Bfree>
 800e100:	ee08 8a10 	vmov	s16, r8
 800e104:	9b07      	ldr	r3, [sp, #28]
 800e106:	1b9a      	subs	r2, r3, r6
 800e108:	d006      	beq.n	800e118 <_dtoa_r+0x7a0>
 800e10a:	ee18 1a10 	vmov	r1, s16
 800e10e:	4620      	mov	r0, r4
 800e110:	f000 fbf2 	bl	800e8f8 <__pow5mult>
 800e114:	ee08 0a10 	vmov	s16, r0
 800e118:	2101      	movs	r1, #1
 800e11a:	4620      	mov	r0, r4
 800e11c:	f000 fb2c 	bl	800e778 <__i2b>
 800e120:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e122:	2b00      	cmp	r3, #0
 800e124:	4606      	mov	r6, r0
 800e126:	f340 8088 	ble.w	800e23a <_dtoa_r+0x8c2>
 800e12a:	461a      	mov	r2, r3
 800e12c:	4601      	mov	r1, r0
 800e12e:	4620      	mov	r0, r4
 800e130:	f000 fbe2 	bl	800e8f8 <__pow5mult>
 800e134:	9b06      	ldr	r3, [sp, #24]
 800e136:	2b01      	cmp	r3, #1
 800e138:	4606      	mov	r6, r0
 800e13a:	f340 8081 	ble.w	800e240 <_dtoa_r+0x8c8>
 800e13e:	f04f 0800 	mov.w	r8, #0
 800e142:	6933      	ldr	r3, [r6, #16]
 800e144:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e148:	6918      	ldr	r0, [r3, #16]
 800e14a:	f000 fac5 	bl	800e6d8 <__hi0bits>
 800e14e:	f1c0 0020 	rsb	r0, r0, #32
 800e152:	9b05      	ldr	r3, [sp, #20]
 800e154:	4418      	add	r0, r3
 800e156:	f010 001f 	ands.w	r0, r0, #31
 800e15a:	f000 8092 	beq.w	800e282 <_dtoa_r+0x90a>
 800e15e:	f1c0 0320 	rsb	r3, r0, #32
 800e162:	2b04      	cmp	r3, #4
 800e164:	f340 808a 	ble.w	800e27c <_dtoa_r+0x904>
 800e168:	f1c0 001c 	rsb	r0, r0, #28
 800e16c:	9b04      	ldr	r3, [sp, #16]
 800e16e:	4403      	add	r3, r0
 800e170:	9304      	str	r3, [sp, #16]
 800e172:	9b05      	ldr	r3, [sp, #20]
 800e174:	4403      	add	r3, r0
 800e176:	4405      	add	r5, r0
 800e178:	9305      	str	r3, [sp, #20]
 800e17a:	9b04      	ldr	r3, [sp, #16]
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	dd07      	ble.n	800e190 <_dtoa_r+0x818>
 800e180:	ee18 1a10 	vmov	r1, s16
 800e184:	461a      	mov	r2, r3
 800e186:	4620      	mov	r0, r4
 800e188:	f000 fc10 	bl	800e9ac <__lshift>
 800e18c:	ee08 0a10 	vmov	s16, r0
 800e190:	9b05      	ldr	r3, [sp, #20]
 800e192:	2b00      	cmp	r3, #0
 800e194:	dd05      	ble.n	800e1a2 <_dtoa_r+0x82a>
 800e196:	4631      	mov	r1, r6
 800e198:	461a      	mov	r2, r3
 800e19a:	4620      	mov	r0, r4
 800e19c:	f000 fc06 	bl	800e9ac <__lshift>
 800e1a0:	4606      	mov	r6, r0
 800e1a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d06e      	beq.n	800e286 <_dtoa_r+0x90e>
 800e1a8:	ee18 0a10 	vmov	r0, s16
 800e1ac:	4631      	mov	r1, r6
 800e1ae:	f000 fc6d 	bl	800ea8c <__mcmp>
 800e1b2:	2800      	cmp	r0, #0
 800e1b4:	da67      	bge.n	800e286 <_dtoa_r+0x90e>
 800e1b6:	9b00      	ldr	r3, [sp, #0]
 800e1b8:	3b01      	subs	r3, #1
 800e1ba:	ee18 1a10 	vmov	r1, s16
 800e1be:	9300      	str	r3, [sp, #0]
 800e1c0:	220a      	movs	r2, #10
 800e1c2:	2300      	movs	r3, #0
 800e1c4:	4620      	mov	r0, r4
 800e1c6:	f000 fa41 	bl	800e64c <__multadd>
 800e1ca:	9b08      	ldr	r3, [sp, #32]
 800e1cc:	ee08 0a10 	vmov	s16, r0
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	f000 81b1 	beq.w	800e538 <_dtoa_r+0xbc0>
 800e1d6:	2300      	movs	r3, #0
 800e1d8:	4639      	mov	r1, r7
 800e1da:	220a      	movs	r2, #10
 800e1dc:	4620      	mov	r0, r4
 800e1de:	f000 fa35 	bl	800e64c <__multadd>
 800e1e2:	9b02      	ldr	r3, [sp, #8]
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	4607      	mov	r7, r0
 800e1e8:	f300 808e 	bgt.w	800e308 <_dtoa_r+0x990>
 800e1ec:	9b06      	ldr	r3, [sp, #24]
 800e1ee:	2b02      	cmp	r3, #2
 800e1f0:	dc51      	bgt.n	800e296 <_dtoa_r+0x91e>
 800e1f2:	e089      	b.n	800e308 <_dtoa_r+0x990>
 800e1f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e1f6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e1fa:	e74b      	b.n	800e094 <_dtoa_r+0x71c>
 800e1fc:	9b03      	ldr	r3, [sp, #12]
 800e1fe:	1e5e      	subs	r6, r3, #1
 800e200:	9b07      	ldr	r3, [sp, #28]
 800e202:	42b3      	cmp	r3, r6
 800e204:	bfbf      	itttt	lt
 800e206:	9b07      	ldrlt	r3, [sp, #28]
 800e208:	9607      	strlt	r6, [sp, #28]
 800e20a:	1af2      	sublt	r2, r6, r3
 800e20c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800e20e:	bfb6      	itet	lt
 800e210:	189b      	addlt	r3, r3, r2
 800e212:	1b9e      	subge	r6, r3, r6
 800e214:	930a      	strlt	r3, [sp, #40]	; 0x28
 800e216:	9b03      	ldr	r3, [sp, #12]
 800e218:	bfb8      	it	lt
 800e21a:	2600      	movlt	r6, #0
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	bfb7      	itett	lt
 800e220:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800e224:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800e228:	1a9d      	sublt	r5, r3, r2
 800e22a:	2300      	movlt	r3, #0
 800e22c:	e734      	b.n	800e098 <_dtoa_r+0x720>
 800e22e:	9e07      	ldr	r6, [sp, #28]
 800e230:	9d04      	ldr	r5, [sp, #16]
 800e232:	9f08      	ldr	r7, [sp, #32]
 800e234:	e73b      	b.n	800e0ae <_dtoa_r+0x736>
 800e236:	9a07      	ldr	r2, [sp, #28]
 800e238:	e767      	b.n	800e10a <_dtoa_r+0x792>
 800e23a:	9b06      	ldr	r3, [sp, #24]
 800e23c:	2b01      	cmp	r3, #1
 800e23e:	dc18      	bgt.n	800e272 <_dtoa_r+0x8fa>
 800e240:	f1ba 0f00 	cmp.w	sl, #0
 800e244:	d115      	bne.n	800e272 <_dtoa_r+0x8fa>
 800e246:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e24a:	b993      	cbnz	r3, 800e272 <_dtoa_r+0x8fa>
 800e24c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e250:	0d1b      	lsrs	r3, r3, #20
 800e252:	051b      	lsls	r3, r3, #20
 800e254:	b183      	cbz	r3, 800e278 <_dtoa_r+0x900>
 800e256:	9b04      	ldr	r3, [sp, #16]
 800e258:	3301      	adds	r3, #1
 800e25a:	9304      	str	r3, [sp, #16]
 800e25c:	9b05      	ldr	r3, [sp, #20]
 800e25e:	3301      	adds	r3, #1
 800e260:	9305      	str	r3, [sp, #20]
 800e262:	f04f 0801 	mov.w	r8, #1
 800e266:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e268:	2b00      	cmp	r3, #0
 800e26a:	f47f af6a 	bne.w	800e142 <_dtoa_r+0x7ca>
 800e26e:	2001      	movs	r0, #1
 800e270:	e76f      	b.n	800e152 <_dtoa_r+0x7da>
 800e272:	f04f 0800 	mov.w	r8, #0
 800e276:	e7f6      	b.n	800e266 <_dtoa_r+0x8ee>
 800e278:	4698      	mov	r8, r3
 800e27a:	e7f4      	b.n	800e266 <_dtoa_r+0x8ee>
 800e27c:	f43f af7d 	beq.w	800e17a <_dtoa_r+0x802>
 800e280:	4618      	mov	r0, r3
 800e282:	301c      	adds	r0, #28
 800e284:	e772      	b.n	800e16c <_dtoa_r+0x7f4>
 800e286:	9b03      	ldr	r3, [sp, #12]
 800e288:	2b00      	cmp	r3, #0
 800e28a:	dc37      	bgt.n	800e2fc <_dtoa_r+0x984>
 800e28c:	9b06      	ldr	r3, [sp, #24]
 800e28e:	2b02      	cmp	r3, #2
 800e290:	dd34      	ble.n	800e2fc <_dtoa_r+0x984>
 800e292:	9b03      	ldr	r3, [sp, #12]
 800e294:	9302      	str	r3, [sp, #8]
 800e296:	9b02      	ldr	r3, [sp, #8]
 800e298:	b96b      	cbnz	r3, 800e2b6 <_dtoa_r+0x93e>
 800e29a:	4631      	mov	r1, r6
 800e29c:	2205      	movs	r2, #5
 800e29e:	4620      	mov	r0, r4
 800e2a0:	f000 f9d4 	bl	800e64c <__multadd>
 800e2a4:	4601      	mov	r1, r0
 800e2a6:	4606      	mov	r6, r0
 800e2a8:	ee18 0a10 	vmov	r0, s16
 800e2ac:	f000 fbee 	bl	800ea8c <__mcmp>
 800e2b0:	2800      	cmp	r0, #0
 800e2b2:	f73f adbb 	bgt.w	800de2c <_dtoa_r+0x4b4>
 800e2b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e2b8:	9d01      	ldr	r5, [sp, #4]
 800e2ba:	43db      	mvns	r3, r3
 800e2bc:	9300      	str	r3, [sp, #0]
 800e2be:	f04f 0800 	mov.w	r8, #0
 800e2c2:	4631      	mov	r1, r6
 800e2c4:	4620      	mov	r0, r4
 800e2c6:	f000 f99f 	bl	800e608 <_Bfree>
 800e2ca:	2f00      	cmp	r7, #0
 800e2cc:	f43f aea4 	beq.w	800e018 <_dtoa_r+0x6a0>
 800e2d0:	f1b8 0f00 	cmp.w	r8, #0
 800e2d4:	d005      	beq.n	800e2e2 <_dtoa_r+0x96a>
 800e2d6:	45b8      	cmp	r8, r7
 800e2d8:	d003      	beq.n	800e2e2 <_dtoa_r+0x96a>
 800e2da:	4641      	mov	r1, r8
 800e2dc:	4620      	mov	r0, r4
 800e2de:	f000 f993 	bl	800e608 <_Bfree>
 800e2e2:	4639      	mov	r1, r7
 800e2e4:	4620      	mov	r0, r4
 800e2e6:	f000 f98f 	bl	800e608 <_Bfree>
 800e2ea:	e695      	b.n	800e018 <_dtoa_r+0x6a0>
 800e2ec:	2600      	movs	r6, #0
 800e2ee:	4637      	mov	r7, r6
 800e2f0:	e7e1      	b.n	800e2b6 <_dtoa_r+0x93e>
 800e2f2:	9700      	str	r7, [sp, #0]
 800e2f4:	4637      	mov	r7, r6
 800e2f6:	e599      	b.n	800de2c <_dtoa_r+0x4b4>
 800e2f8:	40240000 	.word	0x40240000
 800e2fc:	9b08      	ldr	r3, [sp, #32]
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	f000 80ca 	beq.w	800e498 <_dtoa_r+0xb20>
 800e304:	9b03      	ldr	r3, [sp, #12]
 800e306:	9302      	str	r3, [sp, #8]
 800e308:	2d00      	cmp	r5, #0
 800e30a:	dd05      	ble.n	800e318 <_dtoa_r+0x9a0>
 800e30c:	4639      	mov	r1, r7
 800e30e:	462a      	mov	r2, r5
 800e310:	4620      	mov	r0, r4
 800e312:	f000 fb4b 	bl	800e9ac <__lshift>
 800e316:	4607      	mov	r7, r0
 800e318:	f1b8 0f00 	cmp.w	r8, #0
 800e31c:	d05b      	beq.n	800e3d6 <_dtoa_r+0xa5e>
 800e31e:	6879      	ldr	r1, [r7, #4]
 800e320:	4620      	mov	r0, r4
 800e322:	f000 f931 	bl	800e588 <_Balloc>
 800e326:	4605      	mov	r5, r0
 800e328:	b928      	cbnz	r0, 800e336 <_dtoa_r+0x9be>
 800e32a:	4b87      	ldr	r3, [pc, #540]	; (800e548 <_dtoa_r+0xbd0>)
 800e32c:	4602      	mov	r2, r0
 800e32e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800e332:	f7ff bb3b 	b.w	800d9ac <_dtoa_r+0x34>
 800e336:	693a      	ldr	r2, [r7, #16]
 800e338:	3202      	adds	r2, #2
 800e33a:	0092      	lsls	r2, r2, #2
 800e33c:	f107 010c 	add.w	r1, r7, #12
 800e340:	300c      	adds	r0, #12
 800e342:	f000 f913 	bl	800e56c <memcpy>
 800e346:	2201      	movs	r2, #1
 800e348:	4629      	mov	r1, r5
 800e34a:	4620      	mov	r0, r4
 800e34c:	f000 fb2e 	bl	800e9ac <__lshift>
 800e350:	9b01      	ldr	r3, [sp, #4]
 800e352:	f103 0901 	add.w	r9, r3, #1
 800e356:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800e35a:	4413      	add	r3, r2
 800e35c:	9305      	str	r3, [sp, #20]
 800e35e:	f00a 0301 	and.w	r3, sl, #1
 800e362:	46b8      	mov	r8, r7
 800e364:	9304      	str	r3, [sp, #16]
 800e366:	4607      	mov	r7, r0
 800e368:	4631      	mov	r1, r6
 800e36a:	ee18 0a10 	vmov	r0, s16
 800e36e:	f7ff fa78 	bl	800d862 <quorem>
 800e372:	4641      	mov	r1, r8
 800e374:	9002      	str	r0, [sp, #8]
 800e376:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e37a:	ee18 0a10 	vmov	r0, s16
 800e37e:	f000 fb85 	bl	800ea8c <__mcmp>
 800e382:	463a      	mov	r2, r7
 800e384:	9003      	str	r0, [sp, #12]
 800e386:	4631      	mov	r1, r6
 800e388:	4620      	mov	r0, r4
 800e38a:	f000 fb9b 	bl	800eac4 <__mdiff>
 800e38e:	68c2      	ldr	r2, [r0, #12]
 800e390:	f109 3bff 	add.w	fp, r9, #4294967295
 800e394:	4605      	mov	r5, r0
 800e396:	bb02      	cbnz	r2, 800e3da <_dtoa_r+0xa62>
 800e398:	4601      	mov	r1, r0
 800e39a:	ee18 0a10 	vmov	r0, s16
 800e39e:	f000 fb75 	bl	800ea8c <__mcmp>
 800e3a2:	4602      	mov	r2, r0
 800e3a4:	4629      	mov	r1, r5
 800e3a6:	4620      	mov	r0, r4
 800e3a8:	9207      	str	r2, [sp, #28]
 800e3aa:	f000 f92d 	bl	800e608 <_Bfree>
 800e3ae:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800e3b2:	ea43 0102 	orr.w	r1, r3, r2
 800e3b6:	9b04      	ldr	r3, [sp, #16]
 800e3b8:	430b      	orrs	r3, r1
 800e3ba:	464d      	mov	r5, r9
 800e3bc:	d10f      	bne.n	800e3de <_dtoa_r+0xa66>
 800e3be:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e3c2:	d02a      	beq.n	800e41a <_dtoa_r+0xaa2>
 800e3c4:	9b03      	ldr	r3, [sp, #12]
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	dd02      	ble.n	800e3d0 <_dtoa_r+0xa58>
 800e3ca:	9b02      	ldr	r3, [sp, #8]
 800e3cc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800e3d0:	f88b a000 	strb.w	sl, [fp]
 800e3d4:	e775      	b.n	800e2c2 <_dtoa_r+0x94a>
 800e3d6:	4638      	mov	r0, r7
 800e3d8:	e7ba      	b.n	800e350 <_dtoa_r+0x9d8>
 800e3da:	2201      	movs	r2, #1
 800e3dc:	e7e2      	b.n	800e3a4 <_dtoa_r+0xa2c>
 800e3de:	9b03      	ldr	r3, [sp, #12]
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	db04      	blt.n	800e3ee <_dtoa_r+0xa76>
 800e3e4:	9906      	ldr	r1, [sp, #24]
 800e3e6:	430b      	orrs	r3, r1
 800e3e8:	9904      	ldr	r1, [sp, #16]
 800e3ea:	430b      	orrs	r3, r1
 800e3ec:	d122      	bne.n	800e434 <_dtoa_r+0xabc>
 800e3ee:	2a00      	cmp	r2, #0
 800e3f0:	ddee      	ble.n	800e3d0 <_dtoa_r+0xa58>
 800e3f2:	ee18 1a10 	vmov	r1, s16
 800e3f6:	2201      	movs	r2, #1
 800e3f8:	4620      	mov	r0, r4
 800e3fa:	f000 fad7 	bl	800e9ac <__lshift>
 800e3fe:	4631      	mov	r1, r6
 800e400:	ee08 0a10 	vmov	s16, r0
 800e404:	f000 fb42 	bl	800ea8c <__mcmp>
 800e408:	2800      	cmp	r0, #0
 800e40a:	dc03      	bgt.n	800e414 <_dtoa_r+0xa9c>
 800e40c:	d1e0      	bne.n	800e3d0 <_dtoa_r+0xa58>
 800e40e:	f01a 0f01 	tst.w	sl, #1
 800e412:	d0dd      	beq.n	800e3d0 <_dtoa_r+0xa58>
 800e414:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e418:	d1d7      	bne.n	800e3ca <_dtoa_r+0xa52>
 800e41a:	2339      	movs	r3, #57	; 0x39
 800e41c:	f88b 3000 	strb.w	r3, [fp]
 800e420:	462b      	mov	r3, r5
 800e422:	461d      	mov	r5, r3
 800e424:	3b01      	subs	r3, #1
 800e426:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e42a:	2a39      	cmp	r2, #57	; 0x39
 800e42c:	d071      	beq.n	800e512 <_dtoa_r+0xb9a>
 800e42e:	3201      	adds	r2, #1
 800e430:	701a      	strb	r2, [r3, #0]
 800e432:	e746      	b.n	800e2c2 <_dtoa_r+0x94a>
 800e434:	2a00      	cmp	r2, #0
 800e436:	dd07      	ble.n	800e448 <_dtoa_r+0xad0>
 800e438:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e43c:	d0ed      	beq.n	800e41a <_dtoa_r+0xaa2>
 800e43e:	f10a 0301 	add.w	r3, sl, #1
 800e442:	f88b 3000 	strb.w	r3, [fp]
 800e446:	e73c      	b.n	800e2c2 <_dtoa_r+0x94a>
 800e448:	9b05      	ldr	r3, [sp, #20]
 800e44a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800e44e:	4599      	cmp	r9, r3
 800e450:	d047      	beq.n	800e4e2 <_dtoa_r+0xb6a>
 800e452:	ee18 1a10 	vmov	r1, s16
 800e456:	2300      	movs	r3, #0
 800e458:	220a      	movs	r2, #10
 800e45a:	4620      	mov	r0, r4
 800e45c:	f000 f8f6 	bl	800e64c <__multadd>
 800e460:	45b8      	cmp	r8, r7
 800e462:	ee08 0a10 	vmov	s16, r0
 800e466:	f04f 0300 	mov.w	r3, #0
 800e46a:	f04f 020a 	mov.w	r2, #10
 800e46e:	4641      	mov	r1, r8
 800e470:	4620      	mov	r0, r4
 800e472:	d106      	bne.n	800e482 <_dtoa_r+0xb0a>
 800e474:	f000 f8ea 	bl	800e64c <__multadd>
 800e478:	4680      	mov	r8, r0
 800e47a:	4607      	mov	r7, r0
 800e47c:	f109 0901 	add.w	r9, r9, #1
 800e480:	e772      	b.n	800e368 <_dtoa_r+0x9f0>
 800e482:	f000 f8e3 	bl	800e64c <__multadd>
 800e486:	4639      	mov	r1, r7
 800e488:	4680      	mov	r8, r0
 800e48a:	2300      	movs	r3, #0
 800e48c:	220a      	movs	r2, #10
 800e48e:	4620      	mov	r0, r4
 800e490:	f000 f8dc 	bl	800e64c <__multadd>
 800e494:	4607      	mov	r7, r0
 800e496:	e7f1      	b.n	800e47c <_dtoa_r+0xb04>
 800e498:	9b03      	ldr	r3, [sp, #12]
 800e49a:	9302      	str	r3, [sp, #8]
 800e49c:	9d01      	ldr	r5, [sp, #4]
 800e49e:	ee18 0a10 	vmov	r0, s16
 800e4a2:	4631      	mov	r1, r6
 800e4a4:	f7ff f9dd 	bl	800d862 <quorem>
 800e4a8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e4ac:	9b01      	ldr	r3, [sp, #4]
 800e4ae:	f805 ab01 	strb.w	sl, [r5], #1
 800e4b2:	1aea      	subs	r2, r5, r3
 800e4b4:	9b02      	ldr	r3, [sp, #8]
 800e4b6:	4293      	cmp	r3, r2
 800e4b8:	dd09      	ble.n	800e4ce <_dtoa_r+0xb56>
 800e4ba:	ee18 1a10 	vmov	r1, s16
 800e4be:	2300      	movs	r3, #0
 800e4c0:	220a      	movs	r2, #10
 800e4c2:	4620      	mov	r0, r4
 800e4c4:	f000 f8c2 	bl	800e64c <__multadd>
 800e4c8:	ee08 0a10 	vmov	s16, r0
 800e4cc:	e7e7      	b.n	800e49e <_dtoa_r+0xb26>
 800e4ce:	9b02      	ldr	r3, [sp, #8]
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	bfc8      	it	gt
 800e4d4:	461d      	movgt	r5, r3
 800e4d6:	9b01      	ldr	r3, [sp, #4]
 800e4d8:	bfd8      	it	le
 800e4da:	2501      	movle	r5, #1
 800e4dc:	441d      	add	r5, r3
 800e4de:	f04f 0800 	mov.w	r8, #0
 800e4e2:	ee18 1a10 	vmov	r1, s16
 800e4e6:	2201      	movs	r2, #1
 800e4e8:	4620      	mov	r0, r4
 800e4ea:	f000 fa5f 	bl	800e9ac <__lshift>
 800e4ee:	4631      	mov	r1, r6
 800e4f0:	ee08 0a10 	vmov	s16, r0
 800e4f4:	f000 faca 	bl	800ea8c <__mcmp>
 800e4f8:	2800      	cmp	r0, #0
 800e4fa:	dc91      	bgt.n	800e420 <_dtoa_r+0xaa8>
 800e4fc:	d102      	bne.n	800e504 <_dtoa_r+0xb8c>
 800e4fe:	f01a 0f01 	tst.w	sl, #1
 800e502:	d18d      	bne.n	800e420 <_dtoa_r+0xaa8>
 800e504:	462b      	mov	r3, r5
 800e506:	461d      	mov	r5, r3
 800e508:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e50c:	2a30      	cmp	r2, #48	; 0x30
 800e50e:	d0fa      	beq.n	800e506 <_dtoa_r+0xb8e>
 800e510:	e6d7      	b.n	800e2c2 <_dtoa_r+0x94a>
 800e512:	9a01      	ldr	r2, [sp, #4]
 800e514:	429a      	cmp	r2, r3
 800e516:	d184      	bne.n	800e422 <_dtoa_r+0xaaa>
 800e518:	9b00      	ldr	r3, [sp, #0]
 800e51a:	3301      	adds	r3, #1
 800e51c:	9300      	str	r3, [sp, #0]
 800e51e:	2331      	movs	r3, #49	; 0x31
 800e520:	7013      	strb	r3, [r2, #0]
 800e522:	e6ce      	b.n	800e2c2 <_dtoa_r+0x94a>
 800e524:	4b09      	ldr	r3, [pc, #36]	; (800e54c <_dtoa_r+0xbd4>)
 800e526:	f7ff ba95 	b.w	800da54 <_dtoa_r+0xdc>
 800e52a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	f47f aa6e 	bne.w	800da0e <_dtoa_r+0x96>
 800e532:	4b07      	ldr	r3, [pc, #28]	; (800e550 <_dtoa_r+0xbd8>)
 800e534:	f7ff ba8e 	b.w	800da54 <_dtoa_r+0xdc>
 800e538:	9b02      	ldr	r3, [sp, #8]
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	dcae      	bgt.n	800e49c <_dtoa_r+0xb24>
 800e53e:	9b06      	ldr	r3, [sp, #24]
 800e540:	2b02      	cmp	r3, #2
 800e542:	f73f aea8 	bgt.w	800e296 <_dtoa_r+0x91e>
 800e546:	e7a9      	b.n	800e49c <_dtoa_r+0xb24>
 800e548:	0803d203 	.word	0x0803d203
 800e54c:	0803d160 	.word	0x0803d160
 800e550:	0803d184 	.word	0x0803d184

0800e554 <_localeconv_r>:
 800e554:	4800      	ldr	r0, [pc, #0]	; (800e558 <_localeconv_r+0x4>)
 800e556:	4770      	bx	lr
 800e558:	200003a4 	.word	0x200003a4

0800e55c <malloc>:
 800e55c:	4b02      	ldr	r3, [pc, #8]	; (800e568 <malloc+0xc>)
 800e55e:	4601      	mov	r1, r0
 800e560:	6818      	ldr	r0, [r3, #0]
 800e562:	f000 bc17 	b.w	800ed94 <_malloc_r>
 800e566:	bf00      	nop
 800e568:	20000250 	.word	0x20000250

0800e56c <memcpy>:
 800e56c:	440a      	add	r2, r1
 800e56e:	4291      	cmp	r1, r2
 800e570:	f100 33ff 	add.w	r3, r0, #4294967295
 800e574:	d100      	bne.n	800e578 <memcpy+0xc>
 800e576:	4770      	bx	lr
 800e578:	b510      	push	{r4, lr}
 800e57a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e57e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e582:	4291      	cmp	r1, r2
 800e584:	d1f9      	bne.n	800e57a <memcpy+0xe>
 800e586:	bd10      	pop	{r4, pc}

0800e588 <_Balloc>:
 800e588:	b570      	push	{r4, r5, r6, lr}
 800e58a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e58c:	4604      	mov	r4, r0
 800e58e:	460d      	mov	r5, r1
 800e590:	b976      	cbnz	r6, 800e5b0 <_Balloc+0x28>
 800e592:	2010      	movs	r0, #16
 800e594:	f7ff ffe2 	bl	800e55c <malloc>
 800e598:	4602      	mov	r2, r0
 800e59a:	6260      	str	r0, [r4, #36]	; 0x24
 800e59c:	b920      	cbnz	r0, 800e5a8 <_Balloc+0x20>
 800e59e:	4b18      	ldr	r3, [pc, #96]	; (800e600 <_Balloc+0x78>)
 800e5a0:	4818      	ldr	r0, [pc, #96]	; (800e604 <_Balloc+0x7c>)
 800e5a2:	2166      	movs	r1, #102	; 0x66
 800e5a4:	f000 fdd6 	bl	800f154 <__assert_func>
 800e5a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e5ac:	6006      	str	r6, [r0, #0]
 800e5ae:	60c6      	str	r6, [r0, #12]
 800e5b0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e5b2:	68f3      	ldr	r3, [r6, #12]
 800e5b4:	b183      	cbz	r3, 800e5d8 <_Balloc+0x50>
 800e5b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e5b8:	68db      	ldr	r3, [r3, #12]
 800e5ba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e5be:	b9b8      	cbnz	r0, 800e5f0 <_Balloc+0x68>
 800e5c0:	2101      	movs	r1, #1
 800e5c2:	fa01 f605 	lsl.w	r6, r1, r5
 800e5c6:	1d72      	adds	r2, r6, #5
 800e5c8:	0092      	lsls	r2, r2, #2
 800e5ca:	4620      	mov	r0, r4
 800e5cc:	f000 fb60 	bl	800ec90 <_calloc_r>
 800e5d0:	b160      	cbz	r0, 800e5ec <_Balloc+0x64>
 800e5d2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e5d6:	e00e      	b.n	800e5f6 <_Balloc+0x6e>
 800e5d8:	2221      	movs	r2, #33	; 0x21
 800e5da:	2104      	movs	r1, #4
 800e5dc:	4620      	mov	r0, r4
 800e5de:	f000 fb57 	bl	800ec90 <_calloc_r>
 800e5e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e5e4:	60f0      	str	r0, [r6, #12]
 800e5e6:	68db      	ldr	r3, [r3, #12]
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d1e4      	bne.n	800e5b6 <_Balloc+0x2e>
 800e5ec:	2000      	movs	r0, #0
 800e5ee:	bd70      	pop	{r4, r5, r6, pc}
 800e5f0:	6802      	ldr	r2, [r0, #0]
 800e5f2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e5f6:	2300      	movs	r3, #0
 800e5f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e5fc:	e7f7      	b.n	800e5ee <_Balloc+0x66>
 800e5fe:	bf00      	nop
 800e600:	0803d191 	.word	0x0803d191
 800e604:	0803d214 	.word	0x0803d214

0800e608 <_Bfree>:
 800e608:	b570      	push	{r4, r5, r6, lr}
 800e60a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e60c:	4605      	mov	r5, r0
 800e60e:	460c      	mov	r4, r1
 800e610:	b976      	cbnz	r6, 800e630 <_Bfree+0x28>
 800e612:	2010      	movs	r0, #16
 800e614:	f7ff ffa2 	bl	800e55c <malloc>
 800e618:	4602      	mov	r2, r0
 800e61a:	6268      	str	r0, [r5, #36]	; 0x24
 800e61c:	b920      	cbnz	r0, 800e628 <_Bfree+0x20>
 800e61e:	4b09      	ldr	r3, [pc, #36]	; (800e644 <_Bfree+0x3c>)
 800e620:	4809      	ldr	r0, [pc, #36]	; (800e648 <_Bfree+0x40>)
 800e622:	218a      	movs	r1, #138	; 0x8a
 800e624:	f000 fd96 	bl	800f154 <__assert_func>
 800e628:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e62c:	6006      	str	r6, [r0, #0]
 800e62e:	60c6      	str	r6, [r0, #12]
 800e630:	b13c      	cbz	r4, 800e642 <_Bfree+0x3a>
 800e632:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e634:	6862      	ldr	r2, [r4, #4]
 800e636:	68db      	ldr	r3, [r3, #12]
 800e638:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e63c:	6021      	str	r1, [r4, #0]
 800e63e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e642:	bd70      	pop	{r4, r5, r6, pc}
 800e644:	0803d191 	.word	0x0803d191
 800e648:	0803d214 	.word	0x0803d214

0800e64c <__multadd>:
 800e64c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e650:	690d      	ldr	r5, [r1, #16]
 800e652:	4607      	mov	r7, r0
 800e654:	460c      	mov	r4, r1
 800e656:	461e      	mov	r6, r3
 800e658:	f101 0c14 	add.w	ip, r1, #20
 800e65c:	2000      	movs	r0, #0
 800e65e:	f8dc 3000 	ldr.w	r3, [ip]
 800e662:	b299      	uxth	r1, r3
 800e664:	fb02 6101 	mla	r1, r2, r1, r6
 800e668:	0c1e      	lsrs	r6, r3, #16
 800e66a:	0c0b      	lsrs	r3, r1, #16
 800e66c:	fb02 3306 	mla	r3, r2, r6, r3
 800e670:	b289      	uxth	r1, r1
 800e672:	3001      	adds	r0, #1
 800e674:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e678:	4285      	cmp	r5, r0
 800e67a:	f84c 1b04 	str.w	r1, [ip], #4
 800e67e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e682:	dcec      	bgt.n	800e65e <__multadd+0x12>
 800e684:	b30e      	cbz	r6, 800e6ca <__multadd+0x7e>
 800e686:	68a3      	ldr	r3, [r4, #8]
 800e688:	42ab      	cmp	r3, r5
 800e68a:	dc19      	bgt.n	800e6c0 <__multadd+0x74>
 800e68c:	6861      	ldr	r1, [r4, #4]
 800e68e:	4638      	mov	r0, r7
 800e690:	3101      	adds	r1, #1
 800e692:	f7ff ff79 	bl	800e588 <_Balloc>
 800e696:	4680      	mov	r8, r0
 800e698:	b928      	cbnz	r0, 800e6a6 <__multadd+0x5a>
 800e69a:	4602      	mov	r2, r0
 800e69c:	4b0c      	ldr	r3, [pc, #48]	; (800e6d0 <__multadd+0x84>)
 800e69e:	480d      	ldr	r0, [pc, #52]	; (800e6d4 <__multadd+0x88>)
 800e6a0:	21b5      	movs	r1, #181	; 0xb5
 800e6a2:	f000 fd57 	bl	800f154 <__assert_func>
 800e6a6:	6922      	ldr	r2, [r4, #16]
 800e6a8:	3202      	adds	r2, #2
 800e6aa:	f104 010c 	add.w	r1, r4, #12
 800e6ae:	0092      	lsls	r2, r2, #2
 800e6b0:	300c      	adds	r0, #12
 800e6b2:	f7ff ff5b 	bl	800e56c <memcpy>
 800e6b6:	4621      	mov	r1, r4
 800e6b8:	4638      	mov	r0, r7
 800e6ba:	f7ff ffa5 	bl	800e608 <_Bfree>
 800e6be:	4644      	mov	r4, r8
 800e6c0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e6c4:	3501      	adds	r5, #1
 800e6c6:	615e      	str	r6, [r3, #20]
 800e6c8:	6125      	str	r5, [r4, #16]
 800e6ca:	4620      	mov	r0, r4
 800e6cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6d0:	0803d203 	.word	0x0803d203
 800e6d4:	0803d214 	.word	0x0803d214

0800e6d8 <__hi0bits>:
 800e6d8:	0c03      	lsrs	r3, r0, #16
 800e6da:	041b      	lsls	r3, r3, #16
 800e6dc:	b9d3      	cbnz	r3, 800e714 <__hi0bits+0x3c>
 800e6de:	0400      	lsls	r0, r0, #16
 800e6e0:	2310      	movs	r3, #16
 800e6e2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e6e6:	bf04      	itt	eq
 800e6e8:	0200      	lsleq	r0, r0, #8
 800e6ea:	3308      	addeq	r3, #8
 800e6ec:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e6f0:	bf04      	itt	eq
 800e6f2:	0100      	lsleq	r0, r0, #4
 800e6f4:	3304      	addeq	r3, #4
 800e6f6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e6fa:	bf04      	itt	eq
 800e6fc:	0080      	lsleq	r0, r0, #2
 800e6fe:	3302      	addeq	r3, #2
 800e700:	2800      	cmp	r0, #0
 800e702:	db05      	blt.n	800e710 <__hi0bits+0x38>
 800e704:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e708:	f103 0301 	add.w	r3, r3, #1
 800e70c:	bf08      	it	eq
 800e70e:	2320      	moveq	r3, #32
 800e710:	4618      	mov	r0, r3
 800e712:	4770      	bx	lr
 800e714:	2300      	movs	r3, #0
 800e716:	e7e4      	b.n	800e6e2 <__hi0bits+0xa>

0800e718 <__lo0bits>:
 800e718:	6803      	ldr	r3, [r0, #0]
 800e71a:	f013 0207 	ands.w	r2, r3, #7
 800e71e:	4601      	mov	r1, r0
 800e720:	d00b      	beq.n	800e73a <__lo0bits+0x22>
 800e722:	07da      	lsls	r2, r3, #31
 800e724:	d423      	bmi.n	800e76e <__lo0bits+0x56>
 800e726:	0798      	lsls	r0, r3, #30
 800e728:	bf49      	itett	mi
 800e72a:	085b      	lsrmi	r3, r3, #1
 800e72c:	089b      	lsrpl	r3, r3, #2
 800e72e:	2001      	movmi	r0, #1
 800e730:	600b      	strmi	r3, [r1, #0]
 800e732:	bf5c      	itt	pl
 800e734:	600b      	strpl	r3, [r1, #0]
 800e736:	2002      	movpl	r0, #2
 800e738:	4770      	bx	lr
 800e73a:	b298      	uxth	r0, r3
 800e73c:	b9a8      	cbnz	r0, 800e76a <__lo0bits+0x52>
 800e73e:	0c1b      	lsrs	r3, r3, #16
 800e740:	2010      	movs	r0, #16
 800e742:	b2da      	uxtb	r2, r3
 800e744:	b90a      	cbnz	r2, 800e74a <__lo0bits+0x32>
 800e746:	3008      	adds	r0, #8
 800e748:	0a1b      	lsrs	r3, r3, #8
 800e74a:	071a      	lsls	r2, r3, #28
 800e74c:	bf04      	itt	eq
 800e74e:	091b      	lsreq	r3, r3, #4
 800e750:	3004      	addeq	r0, #4
 800e752:	079a      	lsls	r2, r3, #30
 800e754:	bf04      	itt	eq
 800e756:	089b      	lsreq	r3, r3, #2
 800e758:	3002      	addeq	r0, #2
 800e75a:	07da      	lsls	r2, r3, #31
 800e75c:	d403      	bmi.n	800e766 <__lo0bits+0x4e>
 800e75e:	085b      	lsrs	r3, r3, #1
 800e760:	f100 0001 	add.w	r0, r0, #1
 800e764:	d005      	beq.n	800e772 <__lo0bits+0x5a>
 800e766:	600b      	str	r3, [r1, #0]
 800e768:	4770      	bx	lr
 800e76a:	4610      	mov	r0, r2
 800e76c:	e7e9      	b.n	800e742 <__lo0bits+0x2a>
 800e76e:	2000      	movs	r0, #0
 800e770:	4770      	bx	lr
 800e772:	2020      	movs	r0, #32
 800e774:	4770      	bx	lr
	...

0800e778 <__i2b>:
 800e778:	b510      	push	{r4, lr}
 800e77a:	460c      	mov	r4, r1
 800e77c:	2101      	movs	r1, #1
 800e77e:	f7ff ff03 	bl	800e588 <_Balloc>
 800e782:	4602      	mov	r2, r0
 800e784:	b928      	cbnz	r0, 800e792 <__i2b+0x1a>
 800e786:	4b05      	ldr	r3, [pc, #20]	; (800e79c <__i2b+0x24>)
 800e788:	4805      	ldr	r0, [pc, #20]	; (800e7a0 <__i2b+0x28>)
 800e78a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e78e:	f000 fce1 	bl	800f154 <__assert_func>
 800e792:	2301      	movs	r3, #1
 800e794:	6144      	str	r4, [r0, #20]
 800e796:	6103      	str	r3, [r0, #16]
 800e798:	bd10      	pop	{r4, pc}
 800e79a:	bf00      	nop
 800e79c:	0803d203 	.word	0x0803d203
 800e7a0:	0803d214 	.word	0x0803d214

0800e7a4 <__multiply>:
 800e7a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7a8:	4691      	mov	r9, r2
 800e7aa:	690a      	ldr	r2, [r1, #16]
 800e7ac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e7b0:	429a      	cmp	r2, r3
 800e7b2:	bfb8      	it	lt
 800e7b4:	460b      	movlt	r3, r1
 800e7b6:	460c      	mov	r4, r1
 800e7b8:	bfbc      	itt	lt
 800e7ba:	464c      	movlt	r4, r9
 800e7bc:	4699      	movlt	r9, r3
 800e7be:	6927      	ldr	r7, [r4, #16]
 800e7c0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e7c4:	68a3      	ldr	r3, [r4, #8]
 800e7c6:	6861      	ldr	r1, [r4, #4]
 800e7c8:	eb07 060a 	add.w	r6, r7, sl
 800e7cc:	42b3      	cmp	r3, r6
 800e7ce:	b085      	sub	sp, #20
 800e7d0:	bfb8      	it	lt
 800e7d2:	3101      	addlt	r1, #1
 800e7d4:	f7ff fed8 	bl	800e588 <_Balloc>
 800e7d8:	b930      	cbnz	r0, 800e7e8 <__multiply+0x44>
 800e7da:	4602      	mov	r2, r0
 800e7dc:	4b44      	ldr	r3, [pc, #272]	; (800e8f0 <__multiply+0x14c>)
 800e7de:	4845      	ldr	r0, [pc, #276]	; (800e8f4 <__multiply+0x150>)
 800e7e0:	f240 115d 	movw	r1, #349	; 0x15d
 800e7e4:	f000 fcb6 	bl	800f154 <__assert_func>
 800e7e8:	f100 0514 	add.w	r5, r0, #20
 800e7ec:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e7f0:	462b      	mov	r3, r5
 800e7f2:	2200      	movs	r2, #0
 800e7f4:	4543      	cmp	r3, r8
 800e7f6:	d321      	bcc.n	800e83c <__multiply+0x98>
 800e7f8:	f104 0314 	add.w	r3, r4, #20
 800e7fc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e800:	f109 0314 	add.w	r3, r9, #20
 800e804:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e808:	9202      	str	r2, [sp, #8]
 800e80a:	1b3a      	subs	r2, r7, r4
 800e80c:	3a15      	subs	r2, #21
 800e80e:	f022 0203 	bic.w	r2, r2, #3
 800e812:	3204      	adds	r2, #4
 800e814:	f104 0115 	add.w	r1, r4, #21
 800e818:	428f      	cmp	r7, r1
 800e81a:	bf38      	it	cc
 800e81c:	2204      	movcc	r2, #4
 800e81e:	9201      	str	r2, [sp, #4]
 800e820:	9a02      	ldr	r2, [sp, #8]
 800e822:	9303      	str	r3, [sp, #12]
 800e824:	429a      	cmp	r2, r3
 800e826:	d80c      	bhi.n	800e842 <__multiply+0x9e>
 800e828:	2e00      	cmp	r6, #0
 800e82a:	dd03      	ble.n	800e834 <__multiply+0x90>
 800e82c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e830:	2b00      	cmp	r3, #0
 800e832:	d05a      	beq.n	800e8ea <__multiply+0x146>
 800e834:	6106      	str	r6, [r0, #16]
 800e836:	b005      	add	sp, #20
 800e838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e83c:	f843 2b04 	str.w	r2, [r3], #4
 800e840:	e7d8      	b.n	800e7f4 <__multiply+0x50>
 800e842:	f8b3 a000 	ldrh.w	sl, [r3]
 800e846:	f1ba 0f00 	cmp.w	sl, #0
 800e84a:	d024      	beq.n	800e896 <__multiply+0xf2>
 800e84c:	f104 0e14 	add.w	lr, r4, #20
 800e850:	46a9      	mov	r9, r5
 800e852:	f04f 0c00 	mov.w	ip, #0
 800e856:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e85a:	f8d9 1000 	ldr.w	r1, [r9]
 800e85e:	fa1f fb82 	uxth.w	fp, r2
 800e862:	b289      	uxth	r1, r1
 800e864:	fb0a 110b 	mla	r1, sl, fp, r1
 800e868:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e86c:	f8d9 2000 	ldr.w	r2, [r9]
 800e870:	4461      	add	r1, ip
 800e872:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e876:	fb0a c20b 	mla	r2, sl, fp, ip
 800e87a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e87e:	b289      	uxth	r1, r1
 800e880:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e884:	4577      	cmp	r7, lr
 800e886:	f849 1b04 	str.w	r1, [r9], #4
 800e88a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e88e:	d8e2      	bhi.n	800e856 <__multiply+0xb2>
 800e890:	9a01      	ldr	r2, [sp, #4]
 800e892:	f845 c002 	str.w	ip, [r5, r2]
 800e896:	9a03      	ldr	r2, [sp, #12]
 800e898:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e89c:	3304      	adds	r3, #4
 800e89e:	f1b9 0f00 	cmp.w	r9, #0
 800e8a2:	d020      	beq.n	800e8e6 <__multiply+0x142>
 800e8a4:	6829      	ldr	r1, [r5, #0]
 800e8a6:	f104 0c14 	add.w	ip, r4, #20
 800e8aa:	46ae      	mov	lr, r5
 800e8ac:	f04f 0a00 	mov.w	sl, #0
 800e8b0:	f8bc b000 	ldrh.w	fp, [ip]
 800e8b4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e8b8:	fb09 220b 	mla	r2, r9, fp, r2
 800e8bc:	4492      	add	sl, r2
 800e8be:	b289      	uxth	r1, r1
 800e8c0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800e8c4:	f84e 1b04 	str.w	r1, [lr], #4
 800e8c8:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e8cc:	f8be 1000 	ldrh.w	r1, [lr]
 800e8d0:	0c12      	lsrs	r2, r2, #16
 800e8d2:	fb09 1102 	mla	r1, r9, r2, r1
 800e8d6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800e8da:	4567      	cmp	r7, ip
 800e8dc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e8e0:	d8e6      	bhi.n	800e8b0 <__multiply+0x10c>
 800e8e2:	9a01      	ldr	r2, [sp, #4]
 800e8e4:	50a9      	str	r1, [r5, r2]
 800e8e6:	3504      	adds	r5, #4
 800e8e8:	e79a      	b.n	800e820 <__multiply+0x7c>
 800e8ea:	3e01      	subs	r6, #1
 800e8ec:	e79c      	b.n	800e828 <__multiply+0x84>
 800e8ee:	bf00      	nop
 800e8f0:	0803d203 	.word	0x0803d203
 800e8f4:	0803d214 	.word	0x0803d214

0800e8f8 <__pow5mult>:
 800e8f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e8fc:	4615      	mov	r5, r2
 800e8fe:	f012 0203 	ands.w	r2, r2, #3
 800e902:	4606      	mov	r6, r0
 800e904:	460f      	mov	r7, r1
 800e906:	d007      	beq.n	800e918 <__pow5mult+0x20>
 800e908:	4c25      	ldr	r4, [pc, #148]	; (800e9a0 <__pow5mult+0xa8>)
 800e90a:	3a01      	subs	r2, #1
 800e90c:	2300      	movs	r3, #0
 800e90e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e912:	f7ff fe9b 	bl	800e64c <__multadd>
 800e916:	4607      	mov	r7, r0
 800e918:	10ad      	asrs	r5, r5, #2
 800e91a:	d03d      	beq.n	800e998 <__pow5mult+0xa0>
 800e91c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e91e:	b97c      	cbnz	r4, 800e940 <__pow5mult+0x48>
 800e920:	2010      	movs	r0, #16
 800e922:	f7ff fe1b 	bl	800e55c <malloc>
 800e926:	4602      	mov	r2, r0
 800e928:	6270      	str	r0, [r6, #36]	; 0x24
 800e92a:	b928      	cbnz	r0, 800e938 <__pow5mult+0x40>
 800e92c:	4b1d      	ldr	r3, [pc, #116]	; (800e9a4 <__pow5mult+0xac>)
 800e92e:	481e      	ldr	r0, [pc, #120]	; (800e9a8 <__pow5mult+0xb0>)
 800e930:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e934:	f000 fc0e 	bl	800f154 <__assert_func>
 800e938:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e93c:	6004      	str	r4, [r0, #0]
 800e93e:	60c4      	str	r4, [r0, #12]
 800e940:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e944:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e948:	b94c      	cbnz	r4, 800e95e <__pow5mult+0x66>
 800e94a:	f240 2171 	movw	r1, #625	; 0x271
 800e94e:	4630      	mov	r0, r6
 800e950:	f7ff ff12 	bl	800e778 <__i2b>
 800e954:	2300      	movs	r3, #0
 800e956:	f8c8 0008 	str.w	r0, [r8, #8]
 800e95a:	4604      	mov	r4, r0
 800e95c:	6003      	str	r3, [r0, #0]
 800e95e:	f04f 0900 	mov.w	r9, #0
 800e962:	07eb      	lsls	r3, r5, #31
 800e964:	d50a      	bpl.n	800e97c <__pow5mult+0x84>
 800e966:	4639      	mov	r1, r7
 800e968:	4622      	mov	r2, r4
 800e96a:	4630      	mov	r0, r6
 800e96c:	f7ff ff1a 	bl	800e7a4 <__multiply>
 800e970:	4639      	mov	r1, r7
 800e972:	4680      	mov	r8, r0
 800e974:	4630      	mov	r0, r6
 800e976:	f7ff fe47 	bl	800e608 <_Bfree>
 800e97a:	4647      	mov	r7, r8
 800e97c:	106d      	asrs	r5, r5, #1
 800e97e:	d00b      	beq.n	800e998 <__pow5mult+0xa0>
 800e980:	6820      	ldr	r0, [r4, #0]
 800e982:	b938      	cbnz	r0, 800e994 <__pow5mult+0x9c>
 800e984:	4622      	mov	r2, r4
 800e986:	4621      	mov	r1, r4
 800e988:	4630      	mov	r0, r6
 800e98a:	f7ff ff0b 	bl	800e7a4 <__multiply>
 800e98e:	6020      	str	r0, [r4, #0]
 800e990:	f8c0 9000 	str.w	r9, [r0]
 800e994:	4604      	mov	r4, r0
 800e996:	e7e4      	b.n	800e962 <__pow5mult+0x6a>
 800e998:	4638      	mov	r0, r7
 800e99a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e99e:	bf00      	nop
 800e9a0:	0803d360 	.word	0x0803d360
 800e9a4:	0803d191 	.word	0x0803d191
 800e9a8:	0803d214 	.word	0x0803d214

0800e9ac <__lshift>:
 800e9ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e9b0:	460c      	mov	r4, r1
 800e9b2:	6849      	ldr	r1, [r1, #4]
 800e9b4:	6923      	ldr	r3, [r4, #16]
 800e9b6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e9ba:	68a3      	ldr	r3, [r4, #8]
 800e9bc:	4607      	mov	r7, r0
 800e9be:	4691      	mov	r9, r2
 800e9c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e9c4:	f108 0601 	add.w	r6, r8, #1
 800e9c8:	42b3      	cmp	r3, r6
 800e9ca:	db0b      	blt.n	800e9e4 <__lshift+0x38>
 800e9cc:	4638      	mov	r0, r7
 800e9ce:	f7ff fddb 	bl	800e588 <_Balloc>
 800e9d2:	4605      	mov	r5, r0
 800e9d4:	b948      	cbnz	r0, 800e9ea <__lshift+0x3e>
 800e9d6:	4602      	mov	r2, r0
 800e9d8:	4b2a      	ldr	r3, [pc, #168]	; (800ea84 <__lshift+0xd8>)
 800e9da:	482b      	ldr	r0, [pc, #172]	; (800ea88 <__lshift+0xdc>)
 800e9dc:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e9e0:	f000 fbb8 	bl	800f154 <__assert_func>
 800e9e4:	3101      	adds	r1, #1
 800e9e6:	005b      	lsls	r3, r3, #1
 800e9e8:	e7ee      	b.n	800e9c8 <__lshift+0x1c>
 800e9ea:	2300      	movs	r3, #0
 800e9ec:	f100 0114 	add.w	r1, r0, #20
 800e9f0:	f100 0210 	add.w	r2, r0, #16
 800e9f4:	4618      	mov	r0, r3
 800e9f6:	4553      	cmp	r3, sl
 800e9f8:	db37      	blt.n	800ea6a <__lshift+0xbe>
 800e9fa:	6920      	ldr	r0, [r4, #16]
 800e9fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ea00:	f104 0314 	add.w	r3, r4, #20
 800ea04:	f019 091f 	ands.w	r9, r9, #31
 800ea08:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ea0c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ea10:	d02f      	beq.n	800ea72 <__lshift+0xc6>
 800ea12:	f1c9 0e20 	rsb	lr, r9, #32
 800ea16:	468a      	mov	sl, r1
 800ea18:	f04f 0c00 	mov.w	ip, #0
 800ea1c:	681a      	ldr	r2, [r3, #0]
 800ea1e:	fa02 f209 	lsl.w	r2, r2, r9
 800ea22:	ea42 020c 	orr.w	r2, r2, ip
 800ea26:	f84a 2b04 	str.w	r2, [sl], #4
 800ea2a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ea2e:	4298      	cmp	r0, r3
 800ea30:	fa22 fc0e 	lsr.w	ip, r2, lr
 800ea34:	d8f2      	bhi.n	800ea1c <__lshift+0x70>
 800ea36:	1b03      	subs	r3, r0, r4
 800ea38:	3b15      	subs	r3, #21
 800ea3a:	f023 0303 	bic.w	r3, r3, #3
 800ea3e:	3304      	adds	r3, #4
 800ea40:	f104 0215 	add.w	r2, r4, #21
 800ea44:	4290      	cmp	r0, r2
 800ea46:	bf38      	it	cc
 800ea48:	2304      	movcc	r3, #4
 800ea4a:	f841 c003 	str.w	ip, [r1, r3]
 800ea4e:	f1bc 0f00 	cmp.w	ip, #0
 800ea52:	d001      	beq.n	800ea58 <__lshift+0xac>
 800ea54:	f108 0602 	add.w	r6, r8, #2
 800ea58:	3e01      	subs	r6, #1
 800ea5a:	4638      	mov	r0, r7
 800ea5c:	612e      	str	r6, [r5, #16]
 800ea5e:	4621      	mov	r1, r4
 800ea60:	f7ff fdd2 	bl	800e608 <_Bfree>
 800ea64:	4628      	mov	r0, r5
 800ea66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea6a:	f842 0f04 	str.w	r0, [r2, #4]!
 800ea6e:	3301      	adds	r3, #1
 800ea70:	e7c1      	b.n	800e9f6 <__lshift+0x4a>
 800ea72:	3904      	subs	r1, #4
 800ea74:	f853 2b04 	ldr.w	r2, [r3], #4
 800ea78:	f841 2f04 	str.w	r2, [r1, #4]!
 800ea7c:	4298      	cmp	r0, r3
 800ea7e:	d8f9      	bhi.n	800ea74 <__lshift+0xc8>
 800ea80:	e7ea      	b.n	800ea58 <__lshift+0xac>
 800ea82:	bf00      	nop
 800ea84:	0803d203 	.word	0x0803d203
 800ea88:	0803d214 	.word	0x0803d214

0800ea8c <__mcmp>:
 800ea8c:	b530      	push	{r4, r5, lr}
 800ea8e:	6902      	ldr	r2, [r0, #16]
 800ea90:	690c      	ldr	r4, [r1, #16]
 800ea92:	1b12      	subs	r2, r2, r4
 800ea94:	d10e      	bne.n	800eab4 <__mcmp+0x28>
 800ea96:	f100 0314 	add.w	r3, r0, #20
 800ea9a:	3114      	adds	r1, #20
 800ea9c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800eaa0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800eaa4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800eaa8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800eaac:	42a5      	cmp	r5, r4
 800eaae:	d003      	beq.n	800eab8 <__mcmp+0x2c>
 800eab0:	d305      	bcc.n	800eabe <__mcmp+0x32>
 800eab2:	2201      	movs	r2, #1
 800eab4:	4610      	mov	r0, r2
 800eab6:	bd30      	pop	{r4, r5, pc}
 800eab8:	4283      	cmp	r3, r0
 800eaba:	d3f3      	bcc.n	800eaa4 <__mcmp+0x18>
 800eabc:	e7fa      	b.n	800eab4 <__mcmp+0x28>
 800eabe:	f04f 32ff 	mov.w	r2, #4294967295
 800eac2:	e7f7      	b.n	800eab4 <__mcmp+0x28>

0800eac4 <__mdiff>:
 800eac4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eac8:	460c      	mov	r4, r1
 800eaca:	4606      	mov	r6, r0
 800eacc:	4611      	mov	r1, r2
 800eace:	4620      	mov	r0, r4
 800ead0:	4690      	mov	r8, r2
 800ead2:	f7ff ffdb 	bl	800ea8c <__mcmp>
 800ead6:	1e05      	subs	r5, r0, #0
 800ead8:	d110      	bne.n	800eafc <__mdiff+0x38>
 800eada:	4629      	mov	r1, r5
 800eadc:	4630      	mov	r0, r6
 800eade:	f7ff fd53 	bl	800e588 <_Balloc>
 800eae2:	b930      	cbnz	r0, 800eaf2 <__mdiff+0x2e>
 800eae4:	4b3a      	ldr	r3, [pc, #232]	; (800ebd0 <__mdiff+0x10c>)
 800eae6:	4602      	mov	r2, r0
 800eae8:	f240 2132 	movw	r1, #562	; 0x232
 800eaec:	4839      	ldr	r0, [pc, #228]	; (800ebd4 <__mdiff+0x110>)
 800eaee:	f000 fb31 	bl	800f154 <__assert_func>
 800eaf2:	2301      	movs	r3, #1
 800eaf4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800eaf8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eafc:	bfa4      	itt	ge
 800eafe:	4643      	movge	r3, r8
 800eb00:	46a0      	movge	r8, r4
 800eb02:	4630      	mov	r0, r6
 800eb04:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800eb08:	bfa6      	itte	ge
 800eb0a:	461c      	movge	r4, r3
 800eb0c:	2500      	movge	r5, #0
 800eb0e:	2501      	movlt	r5, #1
 800eb10:	f7ff fd3a 	bl	800e588 <_Balloc>
 800eb14:	b920      	cbnz	r0, 800eb20 <__mdiff+0x5c>
 800eb16:	4b2e      	ldr	r3, [pc, #184]	; (800ebd0 <__mdiff+0x10c>)
 800eb18:	4602      	mov	r2, r0
 800eb1a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800eb1e:	e7e5      	b.n	800eaec <__mdiff+0x28>
 800eb20:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800eb24:	6926      	ldr	r6, [r4, #16]
 800eb26:	60c5      	str	r5, [r0, #12]
 800eb28:	f104 0914 	add.w	r9, r4, #20
 800eb2c:	f108 0514 	add.w	r5, r8, #20
 800eb30:	f100 0e14 	add.w	lr, r0, #20
 800eb34:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800eb38:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800eb3c:	f108 0210 	add.w	r2, r8, #16
 800eb40:	46f2      	mov	sl, lr
 800eb42:	2100      	movs	r1, #0
 800eb44:	f859 3b04 	ldr.w	r3, [r9], #4
 800eb48:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800eb4c:	fa1f f883 	uxth.w	r8, r3
 800eb50:	fa11 f18b 	uxtah	r1, r1, fp
 800eb54:	0c1b      	lsrs	r3, r3, #16
 800eb56:	eba1 0808 	sub.w	r8, r1, r8
 800eb5a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800eb5e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800eb62:	fa1f f888 	uxth.w	r8, r8
 800eb66:	1419      	asrs	r1, r3, #16
 800eb68:	454e      	cmp	r6, r9
 800eb6a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800eb6e:	f84a 3b04 	str.w	r3, [sl], #4
 800eb72:	d8e7      	bhi.n	800eb44 <__mdiff+0x80>
 800eb74:	1b33      	subs	r3, r6, r4
 800eb76:	3b15      	subs	r3, #21
 800eb78:	f023 0303 	bic.w	r3, r3, #3
 800eb7c:	3304      	adds	r3, #4
 800eb7e:	3415      	adds	r4, #21
 800eb80:	42a6      	cmp	r6, r4
 800eb82:	bf38      	it	cc
 800eb84:	2304      	movcc	r3, #4
 800eb86:	441d      	add	r5, r3
 800eb88:	4473      	add	r3, lr
 800eb8a:	469e      	mov	lr, r3
 800eb8c:	462e      	mov	r6, r5
 800eb8e:	4566      	cmp	r6, ip
 800eb90:	d30e      	bcc.n	800ebb0 <__mdiff+0xec>
 800eb92:	f10c 0203 	add.w	r2, ip, #3
 800eb96:	1b52      	subs	r2, r2, r5
 800eb98:	f022 0203 	bic.w	r2, r2, #3
 800eb9c:	3d03      	subs	r5, #3
 800eb9e:	45ac      	cmp	ip, r5
 800eba0:	bf38      	it	cc
 800eba2:	2200      	movcc	r2, #0
 800eba4:	441a      	add	r2, r3
 800eba6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ebaa:	b17b      	cbz	r3, 800ebcc <__mdiff+0x108>
 800ebac:	6107      	str	r7, [r0, #16]
 800ebae:	e7a3      	b.n	800eaf8 <__mdiff+0x34>
 800ebb0:	f856 8b04 	ldr.w	r8, [r6], #4
 800ebb4:	fa11 f288 	uxtah	r2, r1, r8
 800ebb8:	1414      	asrs	r4, r2, #16
 800ebba:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ebbe:	b292      	uxth	r2, r2
 800ebc0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ebc4:	f84e 2b04 	str.w	r2, [lr], #4
 800ebc8:	1421      	asrs	r1, r4, #16
 800ebca:	e7e0      	b.n	800eb8e <__mdiff+0xca>
 800ebcc:	3f01      	subs	r7, #1
 800ebce:	e7ea      	b.n	800eba6 <__mdiff+0xe2>
 800ebd0:	0803d203 	.word	0x0803d203
 800ebd4:	0803d214 	.word	0x0803d214

0800ebd8 <__d2b>:
 800ebd8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ebdc:	4689      	mov	r9, r1
 800ebde:	2101      	movs	r1, #1
 800ebe0:	ec57 6b10 	vmov	r6, r7, d0
 800ebe4:	4690      	mov	r8, r2
 800ebe6:	f7ff fccf 	bl	800e588 <_Balloc>
 800ebea:	4604      	mov	r4, r0
 800ebec:	b930      	cbnz	r0, 800ebfc <__d2b+0x24>
 800ebee:	4602      	mov	r2, r0
 800ebf0:	4b25      	ldr	r3, [pc, #148]	; (800ec88 <__d2b+0xb0>)
 800ebf2:	4826      	ldr	r0, [pc, #152]	; (800ec8c <__d2b+0xb4>)
 800ebf4:	f240 310a 	movw	r1, #778	; 0x30a
 800ebf8:	f000 faac 	bl	800f154 <__assert_func>
 800ebfc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ec00:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ec04:	bb35      	cbnz	r5, 800ec54 <__d2b+0x7c>
 800ec06:	2e00      	cmp	r6, #0
 800ec08:	9301      	str	r3, [sp, #4]
 800ec0a:	d028      	beq.n	800ec5e <__d2b+0x86>
 800ec0c:	4668      	mov	r0, sp
 800ec0e:	9600      	str	r6, [sp, #0]
 800ec10:	f7ff fd82 	bl	800e718 <__lo0bits>
 800ec14:	9900      	ldr	r1, [sp, #0]
 800ec16:	b300      	cbz	r0, 800ec5a <__d2b+0x82>
 800ec18:	9a01      	ldr	r2, [sp, #4]
 800ec1a:	f1c0 0320 	rsb	r3, r0, #32
 800ec1e:	fa02 f303 	lsl.w	r3, r2, r3
 800ec22:	430b      	orrs	r3, r1
 800ec24:	40c2      	lsrs	r2, r0
 800ec26:	6163      	str	r3, [r4, #20]
 800ec28:	9201      	str	r2, [sp, #4]
 800ec2a:	9b01      	ldr	r3, [sp, #4]
 800ec2c:	61a3      	str	r3, [r4, #24]
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	bf14      	ite	ne
 800ec32:	2202      	movne	r2, #2
 800ec34:	2201      	moveq	r2, #1
 800ec36:	6122      	str	r2, [r4, #16]
 800ec38:	b1d5      	cbz	r5, 800ec70 <__d2b+0x98>
 800ec3a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ec3e:	4405      	add	r5, r0
 800ec40:	f8c9 5000 	str.w	r5, [r9]
 800ec44:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ec48:	f8c8 0000 	str.w	r0, [r8]
 800ec4c:	4620      	mov	r0, r4
 800ec4e:	b003      	add	sp, #12
 800ec50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ec54:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ec58:	e7d5      	b.n	800ec06 <__d2b+0x2e>
 800ec5a:	6161      	str	r1, [r4, #20]
 800ec5c:	e7e5      	b.n	800ec2a <__d2b+0x52>
 800ec5e:	a801      	add	r0, sp, #4
 800ec60:	f7ff fd5a 	bl	800e718 <__lo0bits>
 800ec64:	9b01      	ldr	r3, [sp, #4]
 800ec66:	6163      	str	r3, [r4, #20]
 800ec68:	2201      	movs	r2, #1
 800ec6a:	6122      	str	r2, [r4, #16]
 800ec6c:	3020      	adds	r0, #32
 800ec6e:	e7e3      	b.n	800ec38 <__d2b+0x60>
 800ec70:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ec74:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ec78:	f8c9 0000 	str.w	r0, [r9]
 800ec7c:	6918      	ldr	r0, [r3, #16]
 800ec7e:	f7ff fd2b 	bl	800e6d8 <__hi0bits>
 800ec82:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ec86:	e7df      	b.n	800ec48 <__d2b+0x70>
 800ec88:	0803d203 	.word	0x0803d203
 800ec8c:	0803d214 	.word	0x0803d214

0800ec90 <_calloc_r>:
 800ec90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ec92:	fba1 2402 	umull	r2, r4, r1, r2
 800ec96:	b94c      	cbnz	r4, 800ecac <_calloc_r+0x1c>
 800ec98:	4611      	mov	r1, r2
 800ec9a:	9201      	str	r2, [sp, #4]
 800ec9c:	f000 f87a 	bl	800ed94 <_malloc_r>
 800eca0:	9a01      	ldr	r2, [sp, #4]
 800eca2:	4605      	mov	r5, r0
 800eca4:	b930      	cbnz	r0, 800ecb4 <_calloc_r+0x24>
 800eca6:	4628      	mov	r0, r5
 800eca8:	b003      	add	sp, #12
 800ecaa:	bd30      	pop	{r4, r5, pc}
 800ecac:	220c      	movs	r2, #12
 800ecae:	6002      	str	r2, [r0, #0]
 800ecb0:	2500      	movs	r5, #0
 800ecb2:	e7f8      	b.n	800eca6 <_calloc_r+0x16>
 800ecb4:	4621      	mov	r1, r4
 800ecb6:	f7fe f92f 	bl	800cf18 <memset>
 800ecba:	e7f4      	b.n	800eca6 <_calloc_r+0x16>

0800ecbc <_free_r>:
 800ecbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ecbe:	2900      	cmp	r1, #0
 800ecc0:	d044      	beq.n	800ed4c <_free_r+0x90>
 800ecc2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ecc6:	9001      	str	r0, [sp, #4]
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	f1a1 0404 	sub.w	r4, r1, #4
 800ecce:	bfb8      	it	lt
 800ecd0:	18e4      	addlt	r4, r4, r3
 800ecd2:	f000 fa9b 	bl	800f20c <__malloc_lock>
 800ecd6:	4a1e      	ldr	r2, [pc, #120]	; (800ed50 <_free_r+0x94>)
 800ecd8:	9801      	ldr	r0, [sp, #4]
 800ecda:	6813      	ldr	r3, [r2, #0]
 800ecdc:	b933      	cbnz	r3, 800ecec <_free_r+0x30>
 800ecde:	6063      	str	r3, [r4, #4]
 800ece0:	6014      	str	r4, [r2, #0]
 800ece2:	b003      	add	sp, #12
 800ece4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ece8:	f000 ba96 	b.w	800f218 <__malloc_unlock>
 800ecec:	42a3      	cmp	r3, r4
 800ecee:	d908      	bls.n	800ed02 <_free_r+0x46>
 800ecf0:	6825      	ldr	r5, [r4, #0]
 800ecf2:	1961      	adds	r1, r4, r5
 800ecf4:	428b      	cmp	r3, r1
 800ecf6:	bf01      	itttt	eq
 800ecf8:	6819      	ldreq	r1, [r3, #0]
 800ecfa:	685b      	ldreq	r3, [r3, #4]
 800ecfc:	1949      	addeq	r1, r1, r5
 800ecfe:	6021      	streq	r1, [r4, #0]
 800ed00:	e7ed      	b.n	800ecde <_free_r+0x22>
 800ed02:	461a      	mov	r2, r3
 800ed04:	685b      	ldr	r3, [r3, #4]
 800ed06:	b10b      	cbz	r3, 800ed0c <_free_r+0x50>
 800ed08:	42a3      	cmp	r3, r4
 800ed0a:	d9fa      	bls.n	800ed02 <_free_r+0x46>
 800ed0c:	6811      	ldr	r1, [r2, #0]
 800ed0e:	1855      	adds	r5, r2, r1
 800ed10:	42a5      	cmp	r5, r4
 800ed12:	d10b      	bne.n	800ed2c <_free_r+0x70>
 800ed14:	6824      	ldr	r4, [r4, #0]
 800ed16:	4421      	add	r1, r4
 800ed18:	1854      	adds	r4, r2, r1
 800ed1a:	42a3      	cmp	r3, r4
 800ed1c:	6011      	str	r1, [r2, #0]
 800ed1e:	d1e0      	bne.n	800ece2 <_free_r+0x26>
 800ed20:	681c      	ldr	r4, [r3, #0]
 800ed22:	685b      	ldr	r3, [r3, #4]
 800ed24:	6053      	str	r3, [r2, #4]
 800ed26:	4421      	add	r1, r4
 800ed28:	6011      	str	r1, [r2, #0]
 800ed2a:	e7da      	b.n	800ece2 <_free_r+0x26>
 800ed2c:	d902      	bls.n	800ed34 <_free_r+0x78>
 800ed2e:	230c      	movs	r3, #12
 800ed30:	6003      	str	r3, [r0, #0]
 800ed32:	e7d6      	b.n	800ece2 <_free_r+0x26>
 800ed34:	6825      	ldr	r5, [r4, #0]
 800ed36:	1961      	adds	r1, r4, r5
 800ed38:	428b      	cmp	r3, r1
 800ed3a:	bf04      	itt	eq
 800ed3c:	6819      	ldreq	r1, [r3, #0]
 800ed3e:	685b      	ldreq	r3, [r3, #4]
 800ed40:	6063      	str	r3, [r4, #4]
 800ed42:	bf04      	itt	eq
 800ed44:	1949      	addeq	r1, r1, r5
 800ed46:	6021      	streq	r1, [r4, #0]
 800ed48:	6054      	str	r4, [r2, #4]
 800ed4a:	e7ca      	b.n	800ece2 <_free_r+0x26>
 800ed4c:	b003      	add	sp, #12
 800ed4e:	bd30      	pop	{r4, r5, pc}
 800ed50:	200008c4 	.word	0x200008c4

0800ed54 <sbrk_aligned>:
 800ed54:	b570      	push	{r4, r5, r6, lr}
 800ed56:	4e0e      	ldr	r6, [pc, #56]	; (800ed90 <sbrk_aligned+0x3c>)
 800ed58:	460c      	mov	r4, r1
 800ed5a:	6831      	ldr	r1, [r6, #0]
 800ed5c:	4605      	mov	r5, r0
 800ed5e:	b911      	cbnz	r1, 800ed66 <sbrk_aligned+0x12>
 800ed60:	f000 f9e8 	bl	800f134 <_sbrk_r>
 800ed64:	6030      	str	r0, [r6, #0]
 800ed66:	4621      	mov	r1, r4
 800ed68:	4628      	mov	r0, r5
 800ed6a:	f000 f9e3 	bl	800f134 <_sbrk_r>
 800ed6e:	1c43      	adds	r3, r0, #1
 800ed70:	d00a      	beq.n	800ed88 <sbrk_aligned+0x34>
 800ed72:	1cc4      	adds	r4, r0, #3
 800ed74:	f024 0403 	bic.w	r4, r4, #3
 800ed78:	42a0      	cmp	r0, r4
 800ed7a:	d007      	beq.n	800ed8c <sbrk_aligned+0x38>
 800ed7c:	1a21      	subs	r1, r4, r0
 800ed7e:	4628      	mov	r0, r5
 800ed80:	f000 f9d8 	bl	800f134 <_sbrk_r>
 800ed84:	3001      	adds	r0, #1
 800ed86:	d101      	bne.n	800ed8c <sbrk_aligned+0x38>
 800ed88:	f04f 34ff 	mov.w	r4, #4294967295
 800ed8c:	4620      	mov	r0, r4
 800ed8e:	bd70      	pop	{r4, r5, r6, pc}
 800ed90:	200008c8 	.word	0x200008c8

0800ed94 <_malloc_r>:
 800ed94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed98:	1ccd      	adds	r5, r1, #3
 800ed9a:	f025 0503 	bic.w	r5, r5, #3
 800ed9e:	3508      	adds	r5, #8
 800eda0:	2d0c      	cmp	r5, #12
 800eda2:	bf38      	it	cc
 800eda4:	250c      	movcc	r5, #12
 800eda6:	2d00      	cmp	r5, #0
 800eda8:	4607      	mov	r7, r0
 800edaa:	db01      	blt.n	800edb0 <_malloc_r+0x1c>
 800edac:	42a9      	cmp	r1, r5
 800edae:	d905      	bls.n	800edbc <_malloc_r+0x28>
 800edb0:	230c      	movs	r3, #12
 800edb2:	603b      	str	r3, [r7, #0]
 800edb4:	2600      	movs	r6, #0
 800edb6:	4630      	mov	r0, r6
 800edb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800edbc:	4e2e      	ldr	r6, [pc, #184]	; (800ee78 <_malloc_r+0xe4>)
 800edbe:	f000 fa25 	bl	800f20c <__malloc_lock>
 800edc2:	6833      	ldr	r3, [r6, #0]
 800edc4:	461c      	mov	r4, r3
 800edc6:	bb34      	cbnz	r4, 800ee16 <_malloc_r+0x82>
 800edc8:	4629      	mov	r1, r5
 800edca:	4638      	mov	r0, r7
 800edcc:	f7ff ffc2 	bl	800ed54 <sbrk_aligned>
 800edd0:	1c43      	adds	r3, r0, #1
 800edd2:	4604      	mov	r4, r0
 800edd4:	d14d      	bne.n	800ee72 <_malloc_r+0xde>
 800edd6:	6834      	ldr	r4, [r6, #0]
 800edd8:	4626      	mov	r6, r4
 800edda:	2e00      	cmp	r6, #0
 800eddc:	d140      	bne.n	800ee60 <_malloc_r+0xcc>
 800edde:	6823      	ldr	r3, [r4, #0]
 800ede0:	4631      	mov	r1, r6
 800ede2:	4638      	mov	r0, r7
 800ede4:	eb04 0803 	add.w	r8, r4, r3
 800ede8:	f000 f9a4 	bl	800f134 <_sbrk_r>
 800edec:	4580      	cmp	r8, r0
 800edee:	d13a      	bne.n	800ee66 <_malloc_r+0xd2>
 800edf0:	6821      	ldr	r1, [r4, #0]
 800edf2:	3503      	adds	r5, #3
 800edf4:	1a6d      	subs	r5, r5, r1
 800edf6:	f025 0503 	bic.w	r5, r5, #3
 800edfa:	3508      	adds	r5, #8
 800edfc:	2d0c      	cmp	r5, #12
 800edfe:	bf38      	it	cc
 800ee00:	250c      	movcc	r5, #12
 800ee02:	4629      	mov	r1, r5
 800ee04:	4638      	mov	r0, r7
 800ee06:	f7ff ffa5 	bl	800ed54 <sbrk_aligned>
 800ee0a:	3001      	adds	r0, #1
 800ee0c:	d02b      	beq.n	800ee66 <_malloc_r+0xd2>
 800ee0e:	6823      	ldr	r3, [r4, #0]
 800ee10:	442b      	add	r3, r5
 800ee12:	6023      	str	r3, [r4, #0]
 800ee14:	e00e      	b.n	800ee34 <_malloc_r+0xa0>
 800ee16:	6822      	ldr	r2, [r4, #0]
 800ee18:	1b52      	subs	r2, r2, r5
 800ee1a:	d41e      	bmi.n	800ee5a <_malloc_r+0xc6>
 800ee1c:	2a0b      	cmp	r2, #11
 800ee1e:	d916      	bls.n	800ee4e <_malloc_r+0xba>
 800ee20:	1961      	adds	r1, r4, r5
 800ee22:	42a3      	cmp	r3, r4
 800ee24:	6025      	str	r5, [r4, #0]
 800ee26:	bf18      	it	ne
 800ee28:	6059      	strne	r1, [r3, #4]
 800ee2a:	6863      	ldr	r3, [r4, #4]
 800ee2c:	bf08      	it	eq
 800ee2e:	6031      	streq	r1, [r6, #0]
 800ee30:	5162      	str	r2, [r4, r5]
 800ee32:	604b      	str	r3, [r1, #4]
 800ee34:	4638      	mov	r0, r7
 800ee36:	f104 060b 	add.w	r6, r4, #11
 800ee3a:	f000 f9ed 	bl	800f218 <__malloc_unlock>
 800ee3e:	f026 0607 	bic.w	r6, r6, #7
 800ee42:	1d23      	adds	r3, r4, #4
 800ee44:	1af2      	subs	r2, r6, r3
 800ee46:	d0b6      	beq.n	800edb6 <_malloc_r+0x22>
 800ee48:	1b9b      	subs	r3, r3, r6
 800ee4a:	50a3      	str	r3, [r4, r2]
 800ee4c:	e7b3      	b.n	800edb6 <_malloc_r+0x22>
 800ee4e:	6862      	ldr	r2, [r4, #4]
 800ee50:	42a3      	cmp	r3, r4
 800ee52:	bf0c      	ite	eq
 800ee54:	6032      	streq	r2, [r6, #0]
 800ee56:	605a      	strne	r2, [r3, #4]
 800ee58:	e7ec      	b.n	800ee34 <_malloc_r+0xa0>
 800ee5a:	4623      	mov	r3, r4
 800ee5c:	6864      	ldr	r4, [r4, #4]
 800ee5e:	e7b2      	b.n	800edc6 <_malloc_r+0x32>
 800ee60:	4634      	mov	r4, r6
 800ee62:	6876      	ldr	r6, [r6, #4]
 800ee64:	e7b9      	b.n	800edda <_malloc_r+0x46>
 800ee66:	230c      	movs	r3, #12
 800ee68:	603b      	str	r3, [r7, #0]
 800ee6a:	4638      	mov	r0, r7
 800ee6c:	f000 f9d4 	bl	800f218 <__malloc_unlock>
 800ee70:	e7a1      	b.n	800edb6 <_malloc_r+0x22>
 800ee72:	6025      	str	r5, [r4, #0]
 800ee74:	e7de      	b.n	800ee34 <_malloc_r+0xa0>
 800ee76:	bf00      	nop
 800ee78:	200008c4 	.word	0x200008c4

0800ee7c <__ssputs_r>:
 800ee7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee80:	688e      	ldr	r6, [r1, #8]
 800ee82:	429e      	cmp	r6, r3
 800ee84:	4682      	mov	sl, r0
 800ee86:	460c      	mov	r4, r1
 800ee88:	4690      	mov	r8, r2
 800ee8a:	461f      	mov	r7, r3
 800ee8c:	d838      	bhi.n	800ef00 <__ssputs_r+0x84>
 800ee8e:	898a      	ldrh	r2, [r1, #12]
 800ee90:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ee94:	d032      	beq.n	800eefc <__ssputs_r+0x80>
 800ee96:	6825      	ldr	r5, [r4, #0]
 800ee98:	6909      	ldr	r1, [r1, #16]
 800ee9a:	eba5 0901 	sub.w	r9, r5, r1
 800ee9e:	6965      	ldr	r5, [r4, #20]
 800eea0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800eea4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800eea8:	3301      	adds	r3, #1
 800eeaa:	444b      	add	r3, r9
 800eeac:	106d      	asrs	r5, r5, #1
 800eeae:	429d      	cmp	r5, r3
 800eeb0:	bf38      	it	cc
 800eeb2:	461d      	movcc	r5, r3
 800eeb4:	0553      	lsls	r3, r2, #21
 800eeb6:	d531      	bpl.n	800ef1c <__ssputs_r+0xa0>
 800eeb8:	4629      	mov	r1, r5
 800eeba:	f7ff ff6b 	bl	800ed94 <_malloc_r>
 800eebe:	4606      	mov	r6, r0
 800eec0:	b950      	cbnz	r0, 800eed8 <__ssputs_r+0x5c>
 800eec2:	230c      	movs	r3, #12
 800eec4:	f8ca 3000 	str.w	r3, [sl]
 800eec8:	89a3      	ldrh	r3, [r4, #12]
 800eeca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eece:	81a3      	strh	r3, [r4, #12]
 800eed0:	f04f 30ff 	mov.w	r0, #4294967295
 800eed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eed8:	6921      	ldr	r1, [r4, #16]
 800eeda:	464a      	mov	r2, r9
 800eedc:	f7ff fb46 	bl	800e56c <memcpy>
 800eee0:	89a3      	ldrh	r3, [r4, #12]
 800eee2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800eee6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eeea:	81a3      	strh	r3, [r4, #12]
 800eeec:	6126      	str	r6, [r4, #16]
 800eeee:	6165      	str	r5, [r4, #20]
 800eef0:	444e      	add	r6, r9
 800eef2:	eba5 0509 	sub.w	r5, r5, r9
 800eef6:	6026      	str	r6, [r4, #0]
 800eef8:	60a5      	str	r5, [r4, #8]
 800eefa:	463e      	mov	r6, r7
 800eefc:	42be      	cmp	r6, r7
 800eefe:	d900      	bls.n	800ef02 <__ssputs_r+0x86>
 800ef00:	463e      	mov	r6, r7
 800ef02:	6820      	ldr	r0, [r4, #0]
 800ef04:	4632      	mov	r2, r6
 800ef06:	4641      	mov	r1, r8
 800ef08:	f000 f966 	bl	800f1d8 <memmove>
 800ef0c:	68a3      	ldr	r3, [r4, #8]
 800ef0e:	1b9b      	subs	r3, r3, r6
 800ef10:	60a3      	str	r3, [r4, #8]
 800ef12:	6823      	ldr	r3, [r4, #0]
 800ef14:	4433      	add	r3, r6
 800ef16:	6023      	str	r3, [r4, #0]
 800ef18:	2000      	movs	r0, #0
 800ef1a:	e7db      	b.n	800eed4 <__ssputs_r+0x58>
 800ef1c:	462a      	mov	r2, r5
 800ef1e:	f000 f981 	bl	800f224 <_realloc_r>
 800ef22:	4606      	mov	r6, r0
 800ef24:	2800      	cmp	r0, #0
 800ef26:	d1e1      	bne.n	800eeec <__ssputs_r+0x70>
 800ef28:	6921      	ldr	r1, [r4, #16]
 800ef2a:	4650      	mov	r0, sl
 800ef2c:	f7ff fec6 	bl	800ecbc <_free_r>
 800ef30:	e7c7      	b.n	800eec2 <__ssputs_r+0x46>
	...

0800ef34 <_svfiprintf_r>:
 800ef34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef38:	4698      	mov	r8, r3
 800ef3a:	898b      	ldrh	r3, [r1, #12]
 800ef3c:	061b      	lsls	r3, r3, #24
 800ef3e:	b09d      	sub	sp, #116	; 0x74
 800ef40:	4607      	mov	r7, r0
 800ef42:	460d      	mov	r5, r1
 800ef44:	4614      	mov	r4, r2
 800ef46:	d50e      	bpl.n	800ef66 <_svfiprintf_r+0x32>
 800ef48:	690b      	ldr	r3, [r1, #16]
 800ef4a:	b963      	cbnz	r3, 800ef66 <_svfiprintf_r+0x32>
 800ef4c:	2140      	movs	r1, #64	; 0x40
 800ef4e:	f7ff ff21 	bl	800ed94 <_malloc_r>
 800ef52:	6028      	str	r0, [r5, #0]
 800ef54:	6128      	str	r0, [r5, #16]
 800ef56:	b920      	cbnz	r0, 800ef62 <_svfiprintf_r+0x2e>
 800ef58:	230c      	movs	r3, #12
 800ef5a:	603b      	str	r3, [r7, #0]
 800ef5c:	f04f 30ff 	mov.w	r0, #4294967295
 800ef60:	e0d1      	b.n	800f106 <_svfiprintf_r+0x1d2>
 800ef62:	2340      	movs	r3, #64	; 0x40
 800ef64:	616b      	str	r3, [r5, #20]
 800ef66:	2300      	movs	r3, #0
 800ef68:	9309      	str	r3, [sp, #36]	; 0x24
 800ef6a:	2320      	movs	r3, #32
 800ef6c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ef70:	f8cd 800c 	str.w	r8, [sp, #12]
 800ef74:	2330      	movs	r3, #48	; 0x30
 800ef76:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f120 <_svfiprintf_r+0x1ec>
 800ef7a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ef7e:	f04f 0901 	mov.w	r9, #1
 800ef82:	4623      	mov	r3, r4
 800ef84:	469a      	mov	sl, r3
 800ef86:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ef8a:	b10a      	cbz	r2, 800ef90 <_svfiprintf_r+0x5c>
 800ef8c:	2a25      	cmp	r2, #37	; 0x25
 800ef8e:	d1f9      	bne.n	800ef84 <_svfiprintf_r+0x50>
 800ef90:	ebba 0b04 	subs.w	fp, sl, r4
 800ef94:	d00b      	beq.n	800efae <_svfiprintf_r+0x7a>
 800ef96:	465b      	mov	r3, fp
 800ef98:	4622      	mov	r2, r4
 800ef9a:	4629      	mov	r1, r5
 800ef9c:	4638      	mov	r0, r7
 800ef9e:	f7ff ff6d 	bl	800ee7c <__ssputs_r>
 800efa2:	3001      	adds	r0, #1
 800efa4:	f000 80aa 	beq.w	800f0fc <_svfiprintf_r+0x1c8>
 800efa8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800efaa:	445a      	add	r2, fp
 800efac:	9209      	str	r2, [sp, #36]	; 0x24
 800efae:	f89a 3000 	ldrb.w	r3, [sl]
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	f000 80a2 	beq.w	800f0fc <_svfiprintf_r+0x1c8>
 800efb8:	2300      	movs	r3, #0
 800efba:	f04f 32ff 	mov.w	r2, #4294967295
 800efbe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800efc2:	f10a 0a01 	add.w	sl, sl, #1
 800efc6:	9304      	str	r3, [sp, #16]
 800efc8:	9307      	str	r3, [sp, #28]
 800efca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800efce:	931a      	str	r3, [sp, #104]	; 0x68
 800efd0:	4654      	mov	r4, sl
 800efd2:	2205      	movs	r2, #5
 800efd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800efd8:	4851      	ldr	r0, [pc, #324]	; (800f120 <_svfiprintf_r+0x1ec>)
 800efda:	f7f1 f909 	bl	80001f0 <memchr>
 800efde:	9a04      	ldr	r2, [sp, #16]
 800efe0:	b9d8      	cbnz	r0, 800f01a <_svfiprintf_r+0xe6>
 800efe2:	06d0      	lsls	r0, r2, #27
 800efe4:	bf44      	itt	mi
 800efe6:	2320      	movmi	r3, #32
 800efe8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800efec:	0711      	lsls	r1, r2, #28
 800efee:	bf44      	itt	mi
 800eff0:	232b      	movmi	r3, #43	; 0x2b
 800eff2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eff6:	f89a 3000 	ldrb.w	r3, [sl]
 800effa:	2b2a      	cmp	r3, #42	; 0x2a
 800effc:	d015      	beq.n	800f02a <_svfiprintf_r+0xf6>
 800effe:	9a07      	ldr	r2, [sp, #28]
 800f000:	4654      	mov	r4, sl
 800f002:	2000      	movs	r0, #0
 800f004:	f04f 0c0a 	mov.w	ip, #10
 800f008:	4621      	mov	r1, r4
 800f00a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f00e:	3b30      	subs	r3, #48	; 0x30
 800f010:	2b09      	cmp	r3, #9
 800f012:	d94e      	bls.n	800f0b2 <_svfiprintf_r+0x17e>
 800f014:	b1b0      	cbz	r0, 800f044 <_svfiprintf_r+0x110>
 800f016:	9207      	str	r2, [sp, #28]
 800f018:	e014      	b.n	800f044 <_svfiprintf_r+0x110>
 800f01a:	eba0 0308 	sub.w	r3, r0, r8
 800f01e:	fa09 f303 	lsl.w	r3, r9, r3
 800f022:	4313      	orrs	r3, r2
 800f024:	9304      	str	r3, [sp, #16]
 800f026:	46a2      	mov	sl, r4
 800f028:	e7d2      	b.n	800efd0 <_svfiprintf_r+0x9c>
 800f02a:	9b03      	ldr	r3, [sp, #12]
 800f02c:	1d19      	adds	r1, r3, #4
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	9103      	str	r1, [sp, #12]
 800f032:	2b00      	cmp	r3, #0
 800f034:	bfbb      	ittet	lt
 800f036:	425b      	neglt	r3, r3
 800f038:	f042 0202 	orrlt.w	r2, r2, #2
 800f03c:	9307      	strge	r3, [sp, #28]
 800f03e:	9307      	strlt	r3, [sp, #28]
 800f040:	bfb8      	it	lt
 800f042:	9204      	strlt	r2, [sp, #16]
 800f044:	7823      	ldrb	r3, [r4, #0]
 800f046:	2b2e      	cmp	r3, #46	; 0x2e
 800f048:	d10c      	bne.n	800f064 <_svfiprintf_r+0x130>
 800f04a:	7863      	ldrb	r3, [r4, #1]
 800f04c:	2b2a      	cmp	r3, #42	; 0x2a
 800f04e:	d135      	bne.n	800f0bc <_svfiprintf_r+0x188>
 800f050:	9b03      	ldr	r3, [sp, #12]
 800f052:	1d1a      	adds	r2, r3, #4
 800f054:	681b      	ldr	r3, [r3, #0]
 800f056:	9203      	str	r2, [sp, #12]
 800f058:	2b00      	cmp	r3, #0
 800f05a:	bfb8      	it	lt
 800f05c:	f04f 33ff 	movlt.w	r3, #4294967295
 800f060:	3402      	adds	r4, #2
 800f062:	9305      	str	r3, [sp, #20]
 800f064:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f130 <_svfiprintf_r+0x1fc>
 800f068:	7821      	ldrb	r1, [r4, #0]
 800f06a:	2203      	movs	r2, #3
 800f06c:	4650      	mov	r0, sl
 800f06e:	f7f1 f8bf 	bl	80001f0 <memchr>
 800f072:	b140      	cbz	r0, 800f086 <_svfiprintf_r+0x152>
 800f074:	2340      	movs	r3, #64	; 0x40
 800f076:	eba0 000a 	sub.w	r0, r0, sl
 800f07a:	fa03 f000 	lsl.w	r0, r3, r0
 800f07e:	9b04      	ldr	r3, [sp, #16]
 800f080:	4303      	orrs	r3, r0
 800f082:	3401      	adds	r4, #1
 800f084:	9304      	str	r3, [sp, #16]
 800f086:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f08a:	4826      	ldr	r0, [pc, #152]	; (800f124 <_svfiprintf_r+0x1f0>)
 800f08c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f090:	2206      	movs	r2, #6
 800f092:	f7f1 f8ad 	bl	80001f0 <memchr>
 800f096:	2800      	cmp	r0, #0
 800f098:	d038      	beq.n	800f10c <_svfiprintf_r+0x1d8>
 800f09a:	4b23      	ldr	r3, [pc, #140]	; (800f128 <_svfiprintf_r+0x1f4>)
 800f09c:	bb1b      	cbnz	r3, 800f0e6 <_svfiprintf_r+0x1b2>
 800f09e:	9b03      	ldr	r3, [sp, #12]
 800f0a0:	3307      	adds	r3, #7
 800f0a2:	f023 0307 	bic.w	r3, r3, #7
 800f0a6:	3308      	adds	r3, #8
 800f0a8:	9303      	str	r3, [sp, #12]
 800f0aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f0ac:	4433      	add	r3, r6
 800f0ae:	9309      	str	r3, [sp, #36]	; 0x24
 800f0b0:	e767      	b.n	800ef82 <_svfiprintf_r+0x4e>
 800f0b2:	fb0c 3202 	mla	r2, ip, r2, r3
 800f0b6:	460c      	mov	r4, r1
 800f0b8:	2001      	movs	r0, #1
 800f0ba:	e7a5      	b.n	800f008 <_svfiprintf_r+0xd4>
 800f0bc:	2300      	movs	r3, #0
 800f0be:	3401      	adds	r4, #1
 800f0c0:	9305      	str	r3, [sp, #20]
 800f0c2:	4619      	mov	r1, r3
 800f0c4:	f04f 0c0a 	mov.w	ip, #10
 800f0c8:	4620      	mov	r0, r4
 800f0ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f0ce:	3a30      	subs	r2, #48	; 0x30
 800f0d0:	2a09      	cmp	r2, #9
 800f0d2:	d903      	bls.n	800f0dc <_svfiprintf_r+0x1a8>
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d0c5      	beq.n	800f064 <_svfiprintf_r+0x130>
 800f0d8:	9105      	str	r1, [sp, #20]
 800f0da:	e7c3      	b.n	800f064 <_svfiprintf_r+0x130>
 800f0dc:	fb0c 2101 	mla	r1, ip, r1, r2
 800f0e0:	4604      	mov	r4, r0
 800f0e2:	2301      	movs	r3, #1
 800f0e4:	e7f0      	b.n	800f0c8 <_svfiprintf_r+0x194>
 800f0e6:	ab03      	add	r3, sp, #12
 800f0e8:	9300      	str	r3, [sp, #0]
 800f0ea:	462a      	mov	r2, r5
 800f0ec:	4b0f      	ldr	r3, [pc, #60]	; (800f12c <_svfiprintf_r+0x1f8>)
 800f0ee:	a904      	add	r1, sp, #16
 800f0f0:	4638      	mov	r0, r7
 800f0f2:	f7fd ffb9 	bl	800d068 <_printf_float>
 800f0f6:	1c42      	adds	r2, r0, #1
 800f0f8:	4606      	mov	r6, r0
 800f0fa:	d1d6      	bne.n	800f0aa <_svfiprintf_r+0x176>
 800f0fc:	89ab      	ldrh	r3, [r5, #12]
 800f0fe:	065b      	lsls	r3, r3, #25
 800f100:	f53f af2c 	bmi.w	800ef5c <_svfiprintf_r+0x28>
 800f104:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f106:	b01d      	add	sp, #116	; 0x74
 800f108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f10c:	ab03      	add	r3, sp, #12
 800f10e:	9300      	str	r3, [sp, #0]
 800f110:	462a      	mov	r2, r5
 800f112:	4b06      	ldr	r3, [pc, #24]	; (800f12c <_svfiprintf_r+0x1f8>)
 800f114:	a904      	add	r1, sp, #16
 800f116:	4638      	mov	r0, r7
 800f118:	f7fe fa4a 	bl	800d5b0 <_printf_i>
 800f11c:	e7eb      	b.n	800f0f6 <_svfiprintf_r+0x1c2>
 800f11e:	bf00      	nop
 800f120:	0803d36c 	.word	0x0803d36c
 800f124:	0803d376 	.word	0x0803d376
 800f128:	0800d069 	.word	0x0800d069
 800f12c:	0800ee7d 	.word	0x0800ee7d
 800f130:	0803d372 	.word	0x0803d372

0800f134 <_sbrk_r>:
 800f134:	b538      	push	{r3, r4, r5, lr}
 800f136:	4d06      	ldr	r5, [pc, #24]	; (800f150 <_sbrk_r+0x1c>)
 800f138:	2300      	movs	r3, #0
 800f13a:	4604      	mov	r4, r0
 800f13c:	4608      	mov	r0, r1
 800f13e:	602b      	str	r3, [r5, #0]
 800f140:	f7f6 fb38 	bl	80057b4 <_sbrk>
 800f144:	1c43      	adds	r3, r0, #1
 800f146:	d102      	bne.n	800f14e <_sbrk_r+0x1a>
 800f148:	682b      	ldr	r3, [r5, #0]
 800f14a:	b103      	cbz	r3, 800f14e <_sbrk_r+0x1a>
 800f14c:	6023      	str	r3, [r4, #0]
 800f14e:	bd38      	pop	{r3, r4, r5, pc}
 800f150:	200008cc 	.word	0x200008cc

0800f154 <__assert_func>:
 800f154:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f156:	4614      	mov	r4, r2
 800f158:	461a      	mov	r2, r3
 800f15a:	4b09      	ldr	r3, [pc, #36]	; (800f180 <__assert_func+0x2c>)
 800f15c:	681b      	ldr	r3, [r3, #0]
 800f15e:	4605      	mov	r5, r0
 800f160:	68d8      	ldr	r0, [r3, #12]
 800f162:	b14c      	cbz	r4, 800f178 <__assert_func+0x24>
 800f164:	4b07      	ldr	r3, [pc, #28]	; (800f184 <__assert_func+0x30>)
 800f166:	9100      	str	r1, [sp, #0]
 800f168:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f16c:	4906      	ldr	r1, [pc, #24]	; (800f188 <__assert_func+0x34>)
 800f16e:	462b      	mov	r3, r5
 800f170:	f000 f80e 	bl	800f190 <fiprintf>
 800f174:	f000 faac 	bl	800f6d0 <abort>
 800f178:	4b04      	ldr	r3, [pc, #16]	; (800f18c <__assert_func+0x38>)
 800f17a:	461c      	mov	r4, r3
 800f17c:	e7f3      	b.n	800f166 <__assert_func+0x12>
 800f17e:	bf00      	nop
 800f180:	20000250 	.word	0x20000250
 800f184:	0803d37d 	.word	0x0803d37d
 800f188:	0803d38a 	.word	0x0803d38a
 800f18c:	0803d3b8 	.word	0x0803d3b8

0800f190 <fiprintf>:
 800f190:	b40e      	push	{r1, r2, r3}
 800f192:	b503      	push	{r0, r1, lr}
 800f194:	4601      	mov	r1, r0
 800f196:	ab03      	add	r3, sp, #12
 800f198:	4805      	ldr	r0, [pc, #20]	; (800f1b0 <fiprintf+0x20>)
 800f19a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f19e:	6800      	ldr	r0, [r0, #0]
 800f1a0:	9301      	str	r3, [sp, #4]
 800f1a2:	f000 f897 	bl	800f2d4 <_vfiprintf_r>
 800f1a6:	b002      	add	sp, #8
 800f1a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800f1ac:	b003      	add	sp, #12
 800f1ae:	4770      	bx	lr
 800f1b0:	20000250 	.word	0x20000250

0800f1b4 <__ascii_mbtowc>:
 800f1b4:	b082      	sub	sp, #8
 800f1b6:	b901      	cbnz	r1, 800f1ba <__ascii_mbtowc+0x6>
 800f1b8:	a901      	add	r1, sp, #4
 800f1ba:	b142      	cbz	r2, 800f1ce <__ascii_mbtowc+0x1a>
 800f1bc:	b14b      	cbz	r3, 800f1d2 <__ascii_mbtowc+0x1e>
 800f1be:	7813      	ldrb	r3, [r2, #0]
 800f1c0:	600b      	str	r3, [r1, #0]
 800f1c2:	7812      	ldrb	r2, [r2, #0]
 800f1c4:	1e10      	subs	r0, r2, #0
 800f1c6:	bf18      	it	ne
 800f1c8:	2001      	movne	r0, #1
 800f1ca:	b002      	add	sp, #8
 800f1cc:	4770      	bx	lr
 800f1ce:	4610      	mov	r0, r2
 800f1d0:	e7fb      	b.n	800f1ca <__ascii_mbtowc+0x16>
 800f1d2:	f06f 0001 	mvn.w	r0, #1
 800f1d6:	e7f8      	b.n	800f1ca <__ascii_mbtowc+0x16>

0800f1d8 <memmove>:
 800f1d8:	4288      	cmp	r0, r1
 800f1da:	b510      	push	{r4, lr}
 800f1dc:	eb01 0402 	add.w	r4, r1, r2
 800f1e0:	d902      	bls.n	800f1e8 <memmove+0x10>
 800f1e2:	4284      	cmp	r4, r0
 800f1e4:	4623      	mov	r3, r4
 800f1e6:	d807      	bhi.n	800f1f8 <memmove+0x20>
 800f1e8:	1e43      	subs	r3, r0, #1
 800f1ea:	42a1      	cmp	r1, r4
 800f1ec:	d008      	beq.n	800f200 <memmove+0x28>
 800f1ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f1f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f1f6:	e7f8      	b.n	800f1ea <memmove+0x12>
 800f1f8:	4402      	add	r2, r0
 800f1fa:	4601      	mov	r1, r0
 800f1fc:	428a      	cmp	r2, r1
 800f1fe:	d100      	bne.n	800f202 <memmove+0x2a>
 800f200:	bd10      	pop	{r4, pc}
 800f202:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f206:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f20a:	e7f7      	b.n	800f1fc <memmove+0x24>

0800f20c <__malloc_lock>:
 800f20c:	4801      	ldr	r0, [pc, #4]	; (800f214 <__malloc_lock+0x8>)
 800f20e:	f000 bc1f 	b.w	800fa50 <__retarget_lock_acquire_recursive>
 800f212:	bf00      	nop
 800f214:	200008d0 	.word	0x200008d0

0800f218 <__malloc_unlock>:
 800f218:	4801      	ldr	r0, [pc, #4]	; (800f220 <__malloc_unlock+0x8>)
 800f21a:	f000 bc1a 	b.w	800fa52 <__retarget_lock_release_recursive>
 800f21e:	bf00      	nop
 800f220:	200008d0 	.word	0x200008d0

0800f224 <_realloc_r>:
 800f224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f228:	4680      	mov	r8, r0
 800f22a:	4614      	mov	r4, r2
 800f22c:	460e      	mov	r6, r1
 800f22e:	b921      	cbnz	r1, 800f23a <_realloc_r+0x16>
 800f230:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f234:	4611      	mov	r1, r2
 800f236:	f7ff bdad 	b.w	800ed94 <_malloc_r>
 800f23a:	b92a      	cbnz	r2, 800f248 <_realloc_r+0x24>
 800f23c:	f7ff fd3e 	bl	800ecbc <_free_r>
 800f240:	4625      	mov	r5, r4
 800f242:	4628      	mov	r0, r5
 800f244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f248:	f000 fc6a 	bl	800fb20 <_malloc_usable_size_r>
 800f24c:	4284      	cmp	r4, r0
 800f24e:	4607      	mov	r7, r0
 800f250:	d802      	bhi.n	800f258 <_realloc_r+0x34>
 800f252:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f256:	d812      	bhi.n	800f27e <_realloc_r+0x5a>
 800f258:	4621      	mov	r1, r4
 800f25a:	4640      	mov	r0, r8
 800f25c:	f7ff fd9a 	bl	800ed94 <_malloc_r>
 800f260:	4605      	mov	r5, r0
 800f262:	2800      	cmp	r0, #0
 800f264:	d0ed      	beq.n	800f242 <_realloc_r+0x1e>
 800f266:	42bc      	cmp	r4, r7
 800f268:	4622      	mov	r2, r4
 800f26a:	4631      	mov	r1, r6
 800f26c:	bf28      	it	cs
 800f26e:	463a      	movcs	r2, r7
 800f270:	f7ff f97c 	bl	800e56c <memcpy>
 800f274:	4631      	mov	r1, r6
 800f276:	4640      	mov	r0, r8
 800f278:	f7ff fd20 	bl	800ecbc <_free_r>
 800f27c:	e7e1      	b.n	800f242 <_realloc_r+0x1e>
 800f27e:	4635      	mov	r5, r6
 800f280:	e7df      	b.n	800f242 <_realloc_r+0x1e>

0800f282 <__sfputc_r>:
 800f282:	6893      	ldr	r3, [r2, #8]
 800f284:	3b01      	subs	r3, #1
 800f286:	2b00      	cmp	r3, #0
 800f288:	b410      	push	{r4}
 800f28a:	6093      	str	r3, [r2, #8]
 800f28c:	da08      	bge.n	800f2a0 <__sfputc_r+0x1e>
 800f28e:	6994      	ldr	r4, [r2, #24]
 800f290:	42a3      	cmp	r3, r4
 800f292:	db01      	blt.n	800f298 <__sfputc_r+0x16>
 800f294:	290a      	cmp	r1, #10
 800f296:	d103      	bne.n	800f2a0 <__sfputc_r+0x1e>
 800f298:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f29c:	f000 b94a 	b.w	800f534 <__swbuf_r>
 800f2a0:	6813      	ldr	r3, [r2, #0]
 800f2a2:	1c58      	adds	r0, r3, #1
 800f2a4:	6010      	str	r0, [r2, #0]
 800f2a6:	7019      	strb	r1, [r3, #0]
 800f2a8:	4608      	mov	r0, r1
 800f2aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f2ae:	4770      	bx	lr

0800f2b0 <__sfputs_r>:
 800f2b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2b2:	4606      	mov	r6, r0
 800f2b4:	460f      	mov	r7, r1
 800f2b6:	4614      	mov	r4, r2
 800f2b8:	18d5      	adds	r5, r2, r3
 800f2ba:	42ac      	cmp	r4, r5
 800f2bc:	d101      	bne.n	800f2c2 <__sfputs_r+0x12>
 800f2be:	2000      	movs	r0, #0
 800f2c0:	e007      	b.n	800f2d2 <__sfputs_r+0x22>
 800f2c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f2c6:	463a      	mov	r2, r7
 800f2c8:	4630      	mov	r0, r6
 800f2ca:	f7ff ffda 	bl	800f282 <__sfputc_r>
 800f2ce:	1c43      	adds	r3, r0, #1
 800f2d0:	d1f3      	bne.n	800f2ba <__sfputs_r+0xa>
 800f2d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f2d4 <_vfiprintf_r>:
 800f2d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2d8:	460d      	mov	r5, r1
 800f2da:	b09d      	sub	sp, #116	; 0x74
 800f2dc:	4614      	mov	r4, r2
 800f2de:	4698      	mov	r8, r3
 800f2e0:	4606      	mov	r6, r0
 800f2e2:	b118      	cbz	r0, 800f2ec <_vfiprintf_r+0x18>
 800f2e4:	6983      	ldr	r3, [r0, #24]
 800f2e6:	b90b      	cbnz	r3, 800f2ec <_vfiprintf_r+0x18>
 800f2e8:	f000 fb14 	bl	800f914 <__sinit>
 800f2ec:	4b89      	ldr	r3, [pc, #548]	; (800f514 <_vfiprintf_r+0x240>)
 800f2ee:	429d      	cmp	r5, r3
 800f2f0:	d11b      	bne.n	800f32a <_vfiprintf_r+0x56>
 800f2f2:	6875      	ldr	r5, [r6, #4]
 800f2f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f2f6:	07d9      	lsls	r1, r3, #31
 800f2f8:	d405      	bmi.n	800f306 <_vfiprintf_r+0x32>
 800f2fa:	89ab      	ldrh	r3, [r5, #12]
 800f2fc:	059a      	lsls	r2, r3, #22
 800f2fe:	d402      	bmi.n	800f306 <_vfiprintf_r+0x32>
 800f300:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f302:	f000 fba5 	bl	800fa50 <__retarget_lock_acquire_recursive>
 800f306:	89ab      	ldrh	r3, [r5, #12]
 800f308:	071b      	lsls	r3, r3, #28
 800f30a:	d501      	bpl.n	800f310 <_vfiprintf_r+0x3c>
 800f30c:	692b      	ldr	r3, [r5, #16]
 800f30e:	b9eb      	cbnz	r3, 800f34c <_vfiprintf_r+0x78>
 800f310:	4629      	mov	r1, r5
 800f312:	4630      	mov	r0, r6
 800f314:	f000 f96e 	bl	800f5f4 <__swsetup_r>
 800f318:	b1c0      	cbz	r0, 800f34c <_vfiprintf_r+0x78>
 800f31a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f31c:	07dc      	lsls	r4, r3, #31
 800f31e:	d50e      	bpl.n	800f33e <_vfiprintf_r+0x6a>
 800f320:	f04f 30ff 	mov.w	r0, #4294967295
 800f324:	b01d      	add	sp, #116	; 0x74
 800f326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f32a:	4b7b      	ldr	r3, [pc, #492]	; (800f518 <_vfiprintf_r+0x244>)
 800f32c:	429d      	cmp	r5, r3
 800f32e:	d101      	bne.n	800f334 <_vfiprintf_r+0x60>
 800f330:	68b5      	ldr	r5, [r6, #8]
 800f332:	e7df      	b.n	800f2f4 <_vfiprintf_r+0x20>
 800f334:	4b79      	ldr	r3, [pc, #484]	; (800f51c <_vfiprintf_r+0x248>)
 800f336:	429d      	cmp	r5, r3
 800f338:	bf08      	it	eq
 800f33a:	68f5      	ldreq	r5, [r6, #12]
 800f33c:	e7da      	b.n	800f2f4 <_vfiprintf_r+0x20>
 800f33e:	89ab      	ldrh	r3, [r5, #12]
 800f340:	0598      	lsls	r0, r3, #22
 800f342:	d4ed      	bmi.n	800f320 <_vfiprintf_r+0x4c>
 800f344:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f346:	f000 fb84 	bl	800fa52 <__retarget_lock_release_recursive>
 800f34a:	e7e9      	b.n	800f320 <_vfiprintf_r+0x4c>
 800f34c:	2300      	movs	r3, #0
 800f34e:	9309      	str	r3, [sp, #36]	; 0x24
 800f350:	2320      	movs	r3, #32
 800f352:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f356:	f8cd 800c 	str.w	r8, [sp, #12]
 800f35a:	2330      	movs	r3, #48	; 0x30
 800f35c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f520 <_vfiprintf_r+0x24c>
 800f360:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f364:	f04f 0901 	mov.w	r9, #1
 800f368:	4623      	mov	r3, r4
 800f36a:	469a      	mov	sl, r3
 800f36c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f370:	b10a      	cbz	r2, 800f376 <_vfiprintf_r+0xa2>
 800f372:	2a25      	cmp	r2, #37	; 0x25
 800f374:	d1f9      	bne.n	800f36a <_vfiprintf_r+0x96>
 800f376:	ebba 0b04 	subs.w	fp, sl, r4
 800f37a:	d00b      	beq.n	800f394 <_vfiprintf_r+0xc0>
 800f37c:	465b      	mov	r3, fp
 800f37e:	4622      	mov	r2, r4
 800f380:	4629      	mov	r1, r5
 800f382:	4630      	mov	r0, r6
 800f384:	f7ff ff94 	bl	800f2b0 <__sfputs_r>
 800f388:	3001      	adds	r0, #1
 800f38a:	f000 80aa 	beq.w	800f4e2 <_vfiprintf_r+0x20e>
 800f38e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f390:	445a      	add	r2, fp
 800f392:	9209      	str	r2, [sp, #36]	; 0x24
 800f394:	f89a 3000 	ldrb.w	r3, [sl]
 800f398:	2b00      	cmp	r3, #0
 800f39a:	f000 80a2 	beq.w	800f4e2 <_vfiprintf_r+0x20e>
 800f39e:	2300      	movs	r3, #0
 800f3a0:	f04f 32ff 	mov.w	r2, #4294967295
 800f3a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f3a8:	f10a 0a01 	add.w	sl, sl, #1
 800f3ac:	9304      	str	r3, [sp, #16]
 800f3ae:	9307      	str	r3, [sp, #28]
 800f3b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f3b4:	931a      	str	r3, [sp, #104]	; 0x68
 800f3b6:	4654      	mov	r4, sl
 800f3b8:	2205      	movs	r2, #5
 800f3ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f3be:	4858      	ldr	r0, [pc, #352]	; (800f520 <_vfiprintf_r+0x24c>)
 800f3c0:	f7f0 ff16 	bl	80001f0 <memchr>
 800f3c4:	9a04      	ldr	r2, [sp, #16]
 800f3c6:	b9d8      	cbnz	r0, 800f400 <_vfiprintf_r+0x12c>
 800f3c8:	06d1      	lsls	r1, r2, #27
 800f3ca:	bf44      	itt	mi
 800f3cc:	2320      	movmi	r3, #32
 800f3ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f3d2:	0713      	lsls	r3, r2, #28
 800f3d4:	bf44      	itt	mi
 800f3d6:	232b      	movmi	r3, #43	; 0x2b
 800f3d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f3dc:	f89a 3000 	ldrb.w	r3, [sl]
 800f3e0:	2b2a      	cmp	r3, #42	; 0x2a
 800f3e2:	d015      	beq.n	800f410 <_vfiprintf_r+0x13c>
 800f3e4:	9a07      	ldr	r2, [sp, #28]
 800f3e6:	4654      	mov	r4, sl
 800f3e8:	2000      	movs	r0, #0
 800f3ea:	f04f 0c0a 	mov.w	ip, #10
 800f3ee:	4621      	mov	r1, r4
 800f3f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f3f4:	3b30      	subs	r3, #48	; 0x30
 800f3f6:	2b09      	cmp	r3, #9
 800f3f8:	d94e      	bls.n	800f498 <_vfiprintf_r+0x1c4>
 800f3fa:	b1b0      	cbz	r0, 800f42a <_vfiprintf_r+0x156>
 800f3fc:	9207      	str	r2, [sp, #28]
 800f3fe:	e014      	b.n	800f42a <_vfiprintf_r+0x156>
 800f400:	eba0 0308 	sub.w	r3, r0, r8
 800f404:	fa09 f303 	lsl.w	r3, r9, r3
 800f408:	4313      	orrs	r3, r2
 800f40a:	9304      	str	r3, [sp, #16]
 800f40c:	46a2      	mov	sl, r4
 800f40e:	e7d2      	b.n	800f3b6 <_vfiprintf_r+0xe2>
 800f410:	9b03      	ldr	r3, [sp, #12]
 800f412:	1d19      	adds	r1, r3, #4
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	9103      	str	r1, [sp, #12]
 800f418:	2b00      	cmp	r3, #0
 800f41a:	bfbb      	ittet	lt
 800f41c:	425b      	neglt	r3, r3
 800f41e:	f042 0202 	orrlt.w	r2, r2, #2
 800f422:	9307      	strge	r3, [sp, #28]
 800f424:	9307      	strlt	r3, [sp, #28]
 800f426:	bfb8      	it	lt
 800f428:	9204      	strlt	r2, [sp, #16]
 800f42a:	7823      	ldrb	r3, [r4, #0]
 800f42c:	2b2e      	cmp	r3, #46	; 0x2e
 800f42e:	d10c      	bne.n	800f44a <_vfiprintf_r+0x176>
 800f430:	7863      	ldrb	r3, [r4, #1]
 800f432:	2b2a      	cmp	r3, #42	; 0x2a
 800f434:	d135      	bne.n	800f4a2 <_vfiprintf_r+0x1ce>
 800f436:	9b03      	ldr	r3, [sp, #12]
 800f438:	1d1a      	adds	r2, r3, #4
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	9203      	str	r2, [sp, #12]
 800f43e:	2b00      	cmp	r3, #0
 800f440:	bfb8      	it	lt
 800f442:	f04f 33ff 	movlt.w	r3, #4294967295
 800f446:	3402      	adds	r4, #2
 800f448:	9305      	str	r3, [sp, #20]
 800f44a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f530 <_vfiprintf_r+0x25c>
 800f44e:	7821      	ldrb	r1, [r4, #0]
 800f450:	2203      	movs	r2, #3
 800f452:	4650      	mov	r0, sl
 800f454:	f7f0 fecc 	bl	80001f0 <memchr>
 800f458:	b140      	cbz	r0, 800f46c <_vfiprintf_r+0x198>
 800f45a:	2340      	movs	r3, #64	; 0x40
 800f45c:	eba0 000a 	sub.w	r0, r0, sl
 800f460:	fa03 f000 	lsl.w	r0, r3, r0
 800f464:	9b04      	ldr	r3, [sp, #16]
 800f466:	4303      	orrs	r3, r0
 800f468:	3401      	adds	r4, #1
 800f46a:	9304      	str	r3, [sp, #16]
 800f46c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f470:	482c      	ldr	r0, [pc, #176]	; (800f524 <_vfiprintf_r+0x250>)
 800f472:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f476:	2206      	movs	r2, #6
 800f478:	f7f0 feba 	bl	80001f0 <memchr>
 800f47c:	2800      	cmp	r0, #0
 800f47e:	d03f      	beq.n	800f500 <_vfiprintf_r+0x22c>
 800f480:	4b29      	ldr	r3, [pc, #164]	; (800f528 <_vfiprintf_r+0x254>)
 800f482:	bb1b      	cbnz	r3, 800f4cc <_vfiprintf_r+0x1f8>
 800f484:	9b03      	ldr	r3, [sp, #12]
 800f486:	3307      	adds	r3, #7
 800f488:	f023 0307 	bic.w	r3, r3, #7
 800f48c:	3308      	adds	r3, #8
 800f48e:	9303      	str	r3, [sp, #12]
 800f490:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f492:	443b      	add	r3, r7
 800f494:	9309      	str	r3, [sp, #36]	; 0x24
 800f496:	e767      	b.n	800f368 <_vfiprintf_r+0x94>
 800f498:	fb0c 3202 	mla	r2, ip, r2, r3
 800f49c:	460c      	mov	r4, r1
 800f49e:	2001      	movs	r0, #1
 800f4a0:	e7a5      	b.n	800f3ee <_vfiprintf_r+0x11a>
 800f4a2:	2300      	movs	r3, #0
 800f4a4:	3401      	adds	r4, #1
 800f4a6:	9305      	str	r3, [sp, #20]
 800f4a8:	4619      	mov	r1, r3
 800f4aa:	f04f 0c0a 	mov.w	ip, #10
 800f4ae:	4620      	mov	r0, r4
 800f4b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f4b4:	3a30      	subs	r2, #48	; 0x30
 800f4b6:	2a09      	cmp	r2, #9
 800f4b8:	d903      	bls.n	800f4c2 <_vfiprintf_r+0x1ee>
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d0c5      	beq.n	800f44a <_vfiprintf_r+0x176>
 800f4be:	9105      	str	r1, [sp, #20]
 800f4c0:	e7c3      	b.n	800f44a <_vfiprintf_r+0x176>
 800f4c2:	fb0c 2101 	mla	r1, ip, r1, r2
 800f4c6:	4604      	mov	r4, r0
 800f4c8:	2301      	movs	r3, #1
 800f4ca:	e7f0      	b.n	800f4ae <_vfiprintf_r+0x1da>
 800f4cc:	ab03      	add	r3, sp, #12
 800f4ce:	9300      	str	r3, [sp, #0]
 800f4d0:	462a      	mov	r2, r5
 800f4d2:	4b16      	ldr	r3, [pc, #88]	; (800f52c <_vfiprintf_r+0x258>)
 800f4d4:	a904      	add	r1, sp, #16
 800f4d6:	4630      	mov	r0, r6
 800f4d8:	f7fd fdc6 	bl	800d068 <_printf_float>
 800f4dc:	4607      	mov	r7, r0
 800f4de:	1c78      	adds	r0, r7, #1
 800f4e0:	d1d6      	bne.n	800f490 <_vfiprintf_r+0x1bc>
 800f4e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f4e4:	07d9      	lsls	r1, r3, #31
 800f4e6:	d405      	bmi.n	800f4f4 <_vfiprintf_r+0x220>
 800f4e8:	89ab      	ldrh	r3, [r5, #12]
 800f4ea:	059a      	lsls	r2, r3, #22
 800f4ec:	d402      	bmi.n	800f4f4 <_vfiprintf_r+0x220>
 800f4ee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f4f0:	f000 faaf 	bl	800fa52 <__retarget_lock_release_recursive>
 800f4f4:	89ab      	ldrh	r3, [r5, #12]
 800f4f6:	065b      	lsls	r3, r3, #25
 800f4f8:	f53f af12 	bmi.w	800f320 <_vfiprintf_r+0x4c>
 800f4fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f4fe:	e711      	b.n	800f324 <_vfiprintf_r+0x50>
 800f500:	ab03      	add	r3, sp, #12
 800f502:	9300      	str	r3, [sp, #0]
 800f504:	462a      	mov	r2, r5
 800f506:	4b09      	ldr	r3, [pc, #36]	; (800f52c <_vfiprintf_r+0x258>)
 800f508:	a904      	add	r1, sp, #16
 800f50a:	4630      	mov	r0, r6
 800f50c:	f7fe f850 	bl	800d5b0 <_printf_i>
 800f510:	e7e4      	b.n	800f4dc <_vfiprintf_r+0x208>
 800f512:	bf00      	nop
 800f514:	0803d4e4 	.word	0x0803d4e4
 800f518:	0803d504 	.word	0x0803d504
 800f51c:	0803d4c4 	.word	0x0803d4c4
 800f520:	0803d36c 	.word	0x0803d36c
 800f524:	0803d376 	.word	0x0803d376
 800f528:	0800d069 	.word	0x0800d069
 800f52c:	0800f2b1 	.word	0x0800f2b1
 800f530:	0803d372 	.word	0x0803d372

0800f534 <__swbuf_r>:
 800f534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f536:	460e      	mov	r6, r1
 800f538:	4614      	mov	r4, r2
 800f53a:	4605      	mov	r5, r0
 800f53c:	b118      	cbz	r0, 800f546 <__swbuf_r+0x12>
 800f53e:	6983      	ldr	r3, [r0, #24]
 800f540:	b90b      	cbnz	r3, 800f546 <__swbuf_r+0x12>
 800f542:	f000 f9e7 	bl	800f914 <__sinit>
 800f546:	4b21      	ldr	r3, [pc, #132]	; (800f5cc <__swbuf_r+0x98>)
 800f548:	429c      	cmp	r4, r3
 800f54a:	d12b      	bne.n	800f5a4 <__swbuf_r+0x70>
 800f54c:	686c      	ldr	r4, [r5, #4]
 800f54e:	69a3      	ldr	r3, [r4, #24]
 800f550:	60a3      	str	r3, [r4, #8]
 800f552:	89a3      	ldrh	r3, [r4, #12]
 800f554:	071a      	lsls	r2, r3, #28
 800f556:	d52f      	bpl.n	800f5b8 <__swbuf_r+0x84>
 800f558:	6923      	ldr	r3, [r4, #16]
 800f55a:	b36b      	cbz	r3, 800f5b8 <__swbuf_r+0x84>
 800f55c:	6923      	ldr	r3, [r4, #16]
 800f55e:	6820      	ldr	r0, [r4, #0]
 800f560:	1ac0      	subs	r0, r0, r3
 800f562:	6963      	ldr	r3, [r4, #20]
 800f564:	b2f6      	uxtb	r6, r6
 800f566:	4283      	cmp	r3, r0
 800f568:	4637      	mov	r7, r6
 800f56a:	dc04      	bgt.n	800f576 <__swbuf_r+0x42>
 800f56c:	4621      	mov	r1, r4
 800f56e:	4628      	mov	r0, r5
 800f570:	f000 f93c 	bl	800f7ec <_fflush_r>
 800f574:	bb30      	cbnz	r0, 800f5c4 <__swbuf_r+0x90>
 800f576:	68a3      	ldr	r3, [r4, #8]
 800f578:	3b01      	subs	r3, #1
 800f57a:	60a3      	str	r3, [r4, #8]
 800f57c:	6823      	ldr	r3, [r4, #0]
 800f57e:	1c5a      	adds	r2, r3, #1
 800f580:	6022      	str	r2, [r4, #0]
 800f582:	701e      	strb	r6, [r3, #0]
 800f584:	6963      	ldr	r3, [r4, #20]
 800f586:	3001      	adds	r0, #1
 800f588:	4283      	cmp	r3, r0
 800f58a:	d004      	beq.n	800f596 <__swbuf_r+0x62>
 800f58c:	89a3      	ldrh	r3, [r4, #12]
 800f58e:	07db      	lsls	r3, r3, #31
 800f590:	d506      	bpl.n	800f5a0 <__swbuf_r+0x6c>
 800f592:	2e0a      	cmp	r6, #10
 800f594:	d104      	bne.n	800f5a0 <__swbuf_r+0x6c>
 800f596:	4621      	mov	r1, r4
 800f598:	4628      	mov	r0, r5
 800f59a:	f000 f927 	bl	800f7ec <_fflush_r>
 800f59e:	b988      	cbnz	r0, 800f5c4 <__swbuf_r+0x90>
 800f5a0:	4638      	mov	r0, r7
 800f5a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f5a4:	4b0a      	ldr	r3, [pc, #40]	; (800f5d0 <__swbuf_r+0x9c>)
 800f5a6:	429c      	cmp	r4, r3
 800f5a8:	d101      	bne.n	800f5ae <__swbuf_r+0x7a>
 800f5aa:	68ac      	ldr	r4, [r5, #8]
 800f5ac:	e7cf      	b.n	800f54e <__swbuf_r+0x1a>
 800f5ae:	4b09      	ldr	r3, [pc, #36]	; (800f5d4 <__swbuf_r+0xa0>)
 800f5b0:	429c      	cmp	r4, r3
 800f5b2:	bf08      	it	eq
 800f5b4:	68ec      	ldreq	r4, [r5, #12]
 800f5b6:	e7ca      	b.n	800f54e <__swbuf_r+0x1a>
 800f5b8:	4621      	mov	r1, r4
 800f5ba:	4628      	mov	r0, r5
 800f5bc:	f000 f81a 	bl	800f5f4 <__swsetup_r>
 800f5c0:	2800      	cmp	r0, #0
 800f5c2:	d0cb      	beq.n	800f55c <__swbuf_r+0x28>
 800f5c4:	f04f 37ff 	mov.w	r7, #4294967295
 800f5c8:	e7ea      	b.n	800f5a0 <__swbuf_r+0x6c>
 800f5ca:	bf00      	nop
 800f5cc:	0803d4e4 	.word	0x0803d4e4
 800f5d0:	0803d504 	.word	0x0803d504
 800f5d4:	0803d4c4 	.word	0x0803d4c4

0800f5d8 <__ascii_wctomb>:
 800f5d8:	b149      	cbz	r1, 800f5ee <__ascii_wctomb+0x16>
 800f5da:	2aff      	cmp	r2, #255	; 0xff
 800f5dc:	bf85      	ittet	hi
 800f5de:	238a      	movhi	r3, #138	; 0x8a
 800f5e0:	6003      	strhi	r3, [r0, #0]
 800f5e2:	700a      	strbls	r2, [r1, #0]
 800f5e4:	f04f 30ff 	movhi.w	r0, #4294967295
 800f5e8:	bf98      	it	ls
 800f5ea:	2001      	movls	r0, #1
 800f5ec:	4770      	bx	lr
 800f5ee:	4608      	mov	r0, r1
 800f5f0:	4770      	bx	lr
	...

0800f5f4 <__swsetup_r>:
 800f5f4:	4b32      	ldr	r3, [pc, #200]	; (800f6c0 <__swsetup_r+0xcc>)
 800f5f6:	b570      	push	{r4, r5, r6, lr}
 800f5f8:	681d      	ldr	r5, [r3, #0]
 800f5fa:	4606      	mov	r6, r0
 800f5fc:	460c      	mov	r4, r1
 800f5fe:	b125      	cbz	r5, 800f60a <__swsetup_r+0x16>
 800f600:	69ab      	ldr	r3, [r5, #24]
 800f602:	b913      	cbnz	r3, 800f60a <__swsetup_r+0x16>
 800f604:	4628      	mov	r0, r5
 800f606:	f000 f985 	bl	800f914 <__sinit>
 800f60a:	4b2e      	ldr	r3, [pc, #184]	; (800f6c4 <__swsetup_r+0xd0>)
 800f60c:	429c      	cmp	r4, r3
 800f60e:	d10f      	bne.n	800f630 <__swsetup_r+0x3c>
 800f610:	686c      	ldr	r4, [r5, #4]
 800f612:	89a3      	ldrh	r3, [r4, #12]
 800f614:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f618:	0719      	lsls	r1, r3, #28
 800f61a:	d42c      	bmi.n	800f676 <__swsetup_r+0x82>
 800f61c:	06dd      	lsls	r5, r3, #27
 800f61e:	d411      	bmi.n	800f644 <__swsetup_r+0x50>
 800f620:	2309      	movs	r3, #9
 800f622:	6033      	str	r3, [r6, #0]
 800f624:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f628:	81a3      	strh	r3, [r4, #12]
 800f62a:	f04f 30ff 	mov.w	r0, #4294967295
 800f62e:	e03e      	b.n	800f6ae <__swsetup_r+0xba>
 800f630:	4b25      	ldr	r3, [pc, #148]	; (800f6c8 <__swsetup_r+0xd4>)
 800f632:	429c      	cmp	r4, r3
 800f634:	d101      	bne.n	800f63a <__swsetup_r+0x46>
 800f636:	68ac      	ldr	r4, [r5, #8]
 800f638:	e7eb      	b.n	800f612 <__swsetup_r+0x1e>
 800f63a:	4b24      	ldr	r3, [pc, #144]	; (800f6cc <__swsetup_r+0xd8>)
 800f63c:	429c      	cmp	r4, r3
 800f63e:	bf08      	it	eq
 800f640:	68ec      	ldreq	r4, [r5, #12]
 800f642:	e7e6      	b.n	800f612 <__swsetup_r+0x1e>
 800f644:	0758      	lsls	r0, r3, #29
 800f646:	d512      	bpl.n	800f66e <__swsetup_r+0x7a>
 800f648:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f64a:	b141      	cbz	r1, 800f65e <__swsetup_r+0x6a>
 800f64c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f650:	4299      	cmp	r1, r3
 800f652:	d002      	beq.n	800f65a <__swsetup_r+0x66>
 800f654:	4630      	mov	r0, r6
 800f656:	f7ff fb31 	bl	800ecbc <_free_r>
 800f65a:	2300      	movs	r3, #0
 800f65c:	6363      	str	r3, [r4, #52]	; 0x34
 800f65e:	89a3      	ldrh	r3, [r4, #12]
 800f660:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f664:	81a3      	strh	r3, [r4, #12]
 800f666:	2300      	movs	r3, #0
 800f668:	6063      	str	r3, [r4, #4]
 800f66a:	6923      	ldr	r3, [r4, #16]
 800f66c:	6023      	str	r3, [r4, #0]
 800f66e:	89a3      	ldrh	r3, [r4, #12]
 800f670:	f043 0308 	orr.w	r3, r3, #8
 800f674:	81a3      	strh	r3, [r4, #12]
 800f676:	6923      	ldr	r3, [r4, #16]
 800f678:	b94b      	cbnz	r3, 800f68e <__swsetup_r+0x9a>
 800f67a:	89a3      	ldrh	r3, [r4, #12]
 800f67c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f680:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f684:	d003      	beq.n	800f68e <__swsetup_r+0x9a>
 800f686:	4621      	mov	r1, r4
 800f688:	4630      	mov	r0, r6
 800f68a:	f000 fa09 	bl	800faa0 <__smakebuf_r>
 800f68e:	89a0      	ldrh	r0, [r4, #12]
 800f690:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f694:	f010 0301 	ands.w	r3, r0, #1
 800f698:	d00a      	beq.n	800f6b0 <__swsetup_r+0xbc>
 800f69a:	2300      	movs	r3, #0
 800f69c:	60a3      	str	r3, [r4, #8]
 800f69e:	6963      	ldr	r3, [r4, #20]
 800f6a0:	425b      	negs	r3, r3
 800f6a2:	61a3      	str	r3, [r4, #24]
 800f6a4:	6923      	ldr	r3, [r4, #16]
 800f6a6:	b943      	cbnz	r3, 800f6ba <__swsetup_r+0xc6>
 800f6a8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f6ac:	d1ba      	bne.n	800f624 <__swsetup_r+0x30>
 800f6ae:	bd70      	pop	{r4, r5, r6, pc}
 800f6b0:	0781      	lsls	r1, r0, #30
 800f6b2:	bf58      	it	pl
 800f6b4:	6963      	ldrpl	r3, [r4, #20]
 800f6b6:	60a3      	str	r3, [r4, #8]
 800f6b8:	e7f4      	b.n	800f6a4 <__swsetup_r+0xb0>
 800f6ba:	2000      	movs	r0, #0
 800f6bc:	e7f7      	b.n	800f6ae <__swsetup_r+0xba>
 800f6be:	bf00      	nop
 800f6c0:	20000250 	.word	0x20000250
 800f6c4:	0803d4e4 	.word	0x0803d4e4
 800f6c8:	0803d504 	.word	0x0803d504
 800f6cc:	0803d4c4 	.word	0x0803d4c4

0800f6d0 <abort>:
 800f6d0:	b508      	push	{r3, lr}
 800f6d2:	2006      	movs	r0, #6
 800f6d4:	f000 fa54 	bl	800fb80 <raise>
 800f6d8:	2001      	movs	r0, #1
 800f6da:	f7f5 fff3 	bl	80056c4 <_exit>
	...

0800f6e0 <__sflush_r>:
 800f6e0:	898a      	ldrh	r2, [r1, #12]
 800f6e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6e6:	4605      	mov	r5, r0
 800f6e8:	0710      	lsls	r0, r2, #28
 800f6ea:	460c      	mov	r4, r1
 800f6ec:	d458      	bmi.n	800f7a0 <__sflush_r+0xc0>
 800f6ee:	684b      	ldr	r3, [r1, #4]
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	dc05      	bgt.n	800f700 <__sflush_r+0x20>
 800f6f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	dc02      	bgt.n	800f700 <__sflush_r+0x20>
 800f6fa:	2000      	movs	r0, #0
 800f6fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f700:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f702:	2e00      	cmp	r6, #0
 800f704:	d0f9      	beq.n	800f6fa <__sflush_r+0x1a>
 800f706:	2300      	movs	r3, #0
 800f708:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f70c:	682f      	ldr	r7, [r5, #0]
 800f70e:	602b      	str	r3, [r5, #0]
 800f710:	d032      	beq.n	800f778 <__sflush_r+0x98>
 800f712:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f714:	89a3      	ldrh	r3, [r4, #12]
 800f716:	075a      	lsls	r2, r3, #29
 800f718:	d505      	bpl.n	800f726 <__sflush_r+0x46>
 800f71a:	6863      	ldr	r3, [r4, #4]
 800f71c:	1ac0      	subs	r0, r0, r3
 800f71e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f720:	b10b      	cbz	r3, 800f726 <__sflush_r+0x46>
 800f722:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f724:	1ac0      	subs	r0, r0, r3
 800f726:	2300      	movs	r3, #0
 800f728:	4602      	mov	r2, r0
 800f72a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f72c:	6a21      	ldr	r1, [r4, #32]
 800f72e:	4628      	mov	r0, r5
 800f730:	47b0      	blx	r6
 800f732:	1c43      	adds	r3, r0, #1
 800f734:	89a3      	ldrh	r3, [r4, #12]
 800f736:	d106      	bne.n	800f746 <__sflush_r+0x66>
 800f738:	6829      	ldr	r1, [r5, #0]
 800f73a:	291d      	cmp	r1, #29
 800f73c:	d82c      	bhi.n	800f798 <__sflush_r+0xb8>
 800f73e:	4a2a      	ldr	r2, [pc, #168]	; (800f7e8 <__sflush_r+0x108>)
 800f740:	40ca      	lsrs	r2, r1
 800f742:	07d6      	lsls	r6, r2, #31
 800f744:	d528      	bpl.n	800f798 <__sflush_r+0xb8>
 800f746:	2200      	movs	r2, #0
 800f748:	6062      	str	r2, [r4, #4]
 800f74a:	04d9      	lsls	r1, r3, #19
 800f74c:	6922      	ldr	r2, [r4, #16]
 800f74e:	6022      	str	r2, [r4, #0]
 800f750:	d504      	bpl.n	800f75c <__sflush_r+0x7c>
 800f752:	1c42      	adds	r2, r0, #1
 800f754:	d101      	bne.n	800f75a <__sflush_r+0x7a>
 800f756:	682b      	ldr	r3, [r5, #0]
 800f758:	b903      	cbnz	r3, 800f75c <__sflush_r+0x7c>
 800f75a:	6560      	str	r0, [r4, #84]	; 0x54
 800f75c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f75e:	602f      	str	r7, [r5, #0]
 800f760:	2900      	cmp	r1, #0
 800f762:	d0ca      	beq.n	800f6fa <__sflush_r+0x1a>
 800f764:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f768:	4299      	cmp	r1, r3
 800f76a:	d002      	beq.n	800f772 <__sflush_r+0x92>
 800f76c:	4628      	mov	r0, r5
 800f76e:	f7ff faa5 	bl	800ecbc <_free_r>
 800f772:	2000      	movs	r0, #0
 800f774:	6360      	str	r0, [r4, #52]	; 0x34
 800f776:	e7c1      	b.n	800f6fc <__sflush_r+0x1c>
 800f778:	6a21      	ldr	r1, [r4, #32]
 800f77a:	2301      	movs	r3, #1
 800f77c:	4628      	mov	r0, r5
 800f77e:	47b0      	blx	r6
 800f780:	1c41      	adds	r1, r0, #1
 800f782:	d1c7      	bne.n	800f714 <__sflush_r+0x34>
 800f784:	682b      	ldr	r3, [r5, #0]
 800f786:	2b00      	cmp	r3, #0
 800f788:	d0c4      	beq.n	800f714 <__sflush_r+0x34>
 800f78a:	2b1d      	cmp	r3, #29
 800f78c:	d001      	beq.n	800f792 <__sflush_r+0xb2>
 800f78e:	2b16      	cmp	r3, #22
 800f790:	d101      	bne.n	800f796 <__sflush_r+0xb6>
 800f792:	602f      	str	r7, [r5, #0]
 800f794:	e7b1      	b.n	800f6fa <__sflush_r+0x1a>
 800f796:	89a3      	ldrh	r3, [r4, #12]
 800f798:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f79c:	81a3      	strh	r3, [r4, #12]
 800f79e:	e7ad      	b.n	800f6fc <__sflush_r+0x1c>
 800f7a0:	690f      	ldr	r7, [r1, #16]
 800f7a2:	2f00      	cmp	r7, #0
 800f7a4:	d0a9      	beq.n	800f6fa <__sflush_r+0x1a>
 800f7a6:	0793      	lsls	r3, r2, #30
 800f7a8:	680e      	ldr	r6, [r1, #0]
 800f7aa:	bf08      	it	eq
 800f7ac:	694b      	ldreq	r3, [r1, #20]
 800f7ae:	600f      	str	r7, [r1, #0]
 800f7b0:	bf18      	it	ne
 800f7b2:	2300      	movne	r3, #0
 800f7b4:	eba6 0807 	sub.w	r8, r6, r7
 800f7b8:	608b      	str	r3, [r1, #8]
 800f7ba:	f1b8 0f00 	cmp.w	r8, #0
 800f7be:	dd9c      	ble.n	800f6fa <__sflush_r+0x1a>
 800f7c0:	6a21      	ldr	r1, [r4, #32]
 800f7c2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f7c4:	4643      	mov	r3, r8
 800f7c6:	463a      	mov	r2, r7
 800f7c8:	4628      	mov	r0, r5
 800f7ca:	47b0      	blx	r6
 800f7cc:	2800      	cmp	r0, #0
 800f7ce:	dc06      	bgt.n	800f7de <__sflush_r+0xfe>
 800f7d0:	89a3      	ldrh	r3, [r4, #12]
 800f7d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f7d6:	81a3      	strh	r3, [r4, #12]
 800f7d8:	f04f 30ff 	mov.w	r0, #4294967295
 800f7dc:	e78e      	b.n	800f6fc <__sflush_r+0x1c>
 800f7de:	4407      	add	r7, r0
 800f7e0:	eba8 0800 	sub.w	r8, r8, r0
 800f7e4:	e7e9      	b.n	800f7ba <__sflush_r+0xda>
 800f7e6:	bf00      	nop
 800f7e8:	20400001 	.word	0x20400001

0800f7ec <_fflush_r>:
 800f7ec:	b538      	push	{r3, r4, r5, lr}
 800f7ee:	690b      	ldr	r3, [r1, #16]
 800f7f0:	4605      	mov	r5, r0
 800f7f2:	460c      	mov	r4, r1
 800f7f4:	b913      	cbnz	r3, 800f7fc <_fflush_r+0x10>
 800f7f6:	2500      	movs	r5, #0
 800f7f8:	4628      	mov	r0, r5
 800f7fa:	bd38      	pop	{r3, r4, r5, pc}
 800f7fc:	b118      	cbz	r0, 800f806 <_fflush_r+0x1a>
 800f7fe:	6983      	ldr	r3, [r0, #24]
 800f800:	b90b      	cbnz	r3, 800f806 <_fflush_r+0x1a>
 800f802:	f000 f887 	bl	800f914 <__sinit>
 800f806:	4b14      	ldr	r3, [pc, #80]	; (800f858 <_fflush_r+0x6c>)
 800f808:	429c      	cmp	r4, r3
 800f80a:	d11b      	bne.n	800f844 <_fflush_r+0x58>
 800f80c:	686c      	ldr	r4, [r5, #4]
 800f80e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f812:	2b00      	cmp	r3, #0
 800f814:	d0ef      	beq.n	800f7f6 <_fflush_r+0xa>
 800f816:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f818:	07d0      	lsls	r0, r2, #31
 800f81a:	d404      	bmi.n	800f826 <_fflush_r+0x3a>
 800f81c:	0599      	lsls	r1, r3, #22
 800f81e:	d402      	bmi.n	800f826 <_fflush_r+0x3a>
 800f820:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f822:	f000 f915 	bl	800fa50 <__retarget_lock_acquire_recursive>
 800f826:	4628      	mov	r0, r5
 800f828:	4621      	mov	r1, r4
 800f82a:	f7ff ff59 	bl	800f6e0 <__sflush_r>
 800f82e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f830:	07da      	lsls	r2, r3, #31
 800f832:	4605      	mov	r5, r0
 800f834:	d4e0      	bmi.n	800f7f8 <_fflush_r+0xc>
 800f836:	89a3      	ldrh	r3, [r4, #12]
 800f838:	059b      	lsls	r3, r3, #22
 800f83a:	d4dd      	bmi.n	800f7f8 <_fflush_r+0xc>
 800f83c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f83e:	f000 f908 	bl	800fa52 <__retarget_lock_release_recursive>
 800f842:	e7d9      	b.n	800f7f8 <_fflush_r+0xc>
 800f844:	4b05      	ldr	r3, [pc, #20]	; (800f85c <_fflush_r+0x70>)
 800f846:	429c      	cmp	r4, r3
 800f848:	d101      	bne.n	800f84e <_fflush_r+0x62>
 800f84a:	68ac      	ldr	r4, [r5, #8]
 800f84c:	e7df      	b.n	800f80e <_fflush_r+0x22>
 800f84e:	4b04      	ldr	r3, [pc, #16]	; (800f860 <_fflush_r+0x74>)
 800f850:	429c      	cmp	r4, r3
 800f852:	bf08      	it	eq
 800f854:	68ec      	ldreq	r4, [r5, #12]
 800f856:	e7da      	b.n	800f80e <_fflush_r+0x22>
 800f858:	0803d4e4 	.word	0x0803d4e4
 800f85c:	0803d504 	.word	0x0803d504
 800f860:	0803d4c4 	.word	0x0803d4c4

0800f864 <std>:
 800f864:	2300      	movs	r3, #0
 800f866:	b510      	push	{r4, lr}
 800f868:	4604      	mov	r4, r0
 800f86a:	e9c0 3300 	strd	r3, r3, [r0]
 800f86e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f872:	6083      	str	r3, [r0, #8]
 800f874:	8181      	strh	r1, [r0, #12]
 800f876:	6643      	str	r3, [r0, #100]	; 0x64
 800f878:	81c2      	strh	r2, [r0, #14]
 800f87a:	6183      	str	r3, [r0, #24]
 800f87c:	4619      	mov	r1, r3
 800f87e:	2208      	movs	r2, #8
 800f880:	305c      	adds	r0, #92	; 0x5c
 800f882:	f7fd fb49 	bl	800cf18 <memset>
 800f886:	4b05      	ldr	r3, [pc, #20]	; (800f89c <std+0x38>)
 800f888:	6263      	str	r3, [r4, #36]	; 0x24
 800f88a:	4b05      	ldr	r3, [pc, #20]	; (800f8a0 <std+0x3c>)
 800f88c:	62a3      	str	r3, [r4, #40]	; 0x28
 800f88e:	4b05      	ldr	r3, [pc, #20]	; (800f8a4 <std+0x40>)
 800f890:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f892:	4b05      	ldr	r3, [pc, #20]	; (800f8a8 <std+0x44>)
 800f894:	6224      	str	r4, [r4, #32]
 800f896:	6323      	str	r3, [r4, #48]	; 0x30
 800f898:	bd10      	pop	{r4, pc}
 800f89a:	bf00      	nop
 800f89c:	0800fbb9 	.word	0x0800fbb9
 800f8a0:	0800fbdb 	.word	0x0800fbdb
 800f8a4:	0800fc13 	.word	0x0800fc13
 800f8a8:	0800fc37 	.word	0x0800fc37

0800f8ac <_cleanup_r>:
 800f8ac:	4901      	ldr	r1, [pc, #4]	; (800f8b4 <_cleanup_r+0x8>)
 800f8ae:	f000 b8af 	b.w	800fa10 <_fwalk_reent>
 800f8b2:	bf00      	nop
 800f8b4:	0800f7ed 	.word	0x0800f7ed

0800f8b8 <__sfmoreglue>:
 800f8b8:	b570      	push	{r4, r5, r6, lr}
 800f8ba:	2268      	movs	r2, #104	; 0x68
 800f8bc:	1e4d      	subs	r5, r1, #1
 800f8be:	4355      	muls	r5, r2
 800f8c0:	460e      	mov	r6, r1
 800f8c2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f8c6:	f7ff fa65 	bl	800ed94 <_malloc_r>
 800f8ca:	4604      	mov	r4, r0
 800f8cc:	b140      	cbz	r0, 800f8e0 <__sfmoreglue+0x28>
 800f8ce:	2100      	movs	r1, #0
 800f8d0:	e9c0 1600 	strd	r1, r6, [r0]
 800f8d4:	300c      	adds	r0, #12
 800f8d6:	60a0      	str	r0, [r4, #8]
 800f8d8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f8dc:	f7fd fb1c 	bl	800cf18 <memset>
 800f8e0:	4620      	mov	r0, r4
 800f8e2:	bd70      	pop	{r4, r5, r6, pc}

0800f8e4 <__sfp_lock_acquire>:
 800f8e4:	4801      	ldr	r0, [pc, #4]	; (800f8ec <__sfp_lock_acquire+0x8>)
 800f8e6:	f000 b8b3 	b.w	800fa50 <__retarget_lock_acquire_recursive>
 800f8ea:	bf00      	nop
 800f8ec:	200008d1 	.word	0x200008d1

0800f8f0 <__sfp_lock_release>:
 800f8f0:	4801      	ldr	r0, [pc, #4]	; (800f8f8 <__sfp_lock_release+0x8>)
 800f8f2:	f000 b8ae 	b.w	800fa52 <__retarget_lock_release_recursive>
 800f8f6:	bf00      	nop
 800f8f8:	200008d1 	.word	0x200008d1

0800f8fc <__sinit_lock_acquire>:
 800f8fc:	4801      	ldr	r0, [pc, #4]	; (800f904 <__sinit_lock_acquire+0x8>)
 800f8fe:	f000 b8a7 	b.w	800fa50 <__retarget_lock_acquire_recursive>
 800f902:	bf00      	nop
 800f904:	200008d2 	.word	0x200008d2

0800f908 <__sinit_lock_release>:
 800f908:	4801      	ldr	r0, [pc, #4]	; (800f910 <__sinit_lock_release+0x8>)
 800f90a:	f000 b8a2 	b.w	800fa52 <__retarget_lock_release_recursive>
 800f90e:	bf00      	nop
 800f910:	200008d2 	.word	0x200008d2

0800f914 <__sinit>:
 800f914:	b510      	push	{r4, lr}
 800f916:	4604      	mov	r4, r0
 800f918:	f7ff fff0 	bl	800f8fc <__sinit_lock_acquire>
 800f91c:	69a3      	ldr	r3, [r4, #24]
 800f91e:	b11b      	cbz	r3, 800f928 <__sinit+0x14>
 800f920:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f924:	f7ff bff0 	b.w	800f908 <__sinit_lock_release>
 800f928:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f92c:	6523      	str	r3, [r4, #80]	; 0x50
 800f92e:	4b13      	ldr	r3, [pc, #76]	; (800f97c <__sinit+0x68>)
 800f930:	4a13      	ldr	r2, [pc, #76]	; (800f980 <__sinit+0x6c>)
 800f932:	681b      	ldr	r3, [r3, #0]
 800f934:	62a2      	str	r2, [r4, #40]	; 0x28
 800f936:	42a3      	cmp	r3, r4
 800f938:	bf04      	itt	eq
 800f93a:	2301      	moveq	r3, #1
 800f93c:	61a3      	streq	r3, [r4, #24]
 800f93e:	4620      	mov	r0, r4
 800f940:	f000 f820 	bl	800f984 <__sfp>
 800f944:	6060      	str	r0, [r4, #4]
 800f946:	4620      	mov	r0, r4
 800f948:	f000 f81c 	bl	800f984 <__sfp>
 800f94c:	60a0      	str	r0, [r4, #8]
 800f94e:	4620      	mov	r0, r4
 800f950:	f000 f818 	bl	800f984 <__sfp>
 800f954:	2200      	movs	r2, #0
 800f956:	60e0      	str	r0, [r4, #12]
 800f958:	2104      	movs	r1, #4
 800f95a:	6860      	ldr	r0, [r4, #4]
 800f95c:	f7ff ff82 	bl	800f864 <std>
 800f960:	68a0      	ldr	r0, [r4, #8]
 800f962:	2201      	movs	r2, #1
 800f964:	2109      	movs	r1, #9
 800f966:	f7ff ff7d 	bl	800f864 <std>
 800f96a:	68e0      	ldr	r0, [r4, #12]
 800f96c:	2202      	movs	r2, #2
 800f96e:	2112      	movs	r1, #18
 800f970:	f7ff ff78 	bl	800f864 <std>
 800f974:	2301      	movs	r3, #1
 800f976:	61a3      	str	r3, [r4, #24]
 800f978:	e7d2      	b.n	800f920 <__sinit+0xc>
 800f97a:	bf00      	nop
 800f97c:	0803d14c 	.word	0x0803d14c
 800f980:	0800f8ad 	.word	0x0800f8ad

0800f984 <__sfp>:
 800f984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f986:	4607      	mov	r7, r0
 800f988:	f7ff ffac 	bl	800f8e4 <__sfp_lock_acquire>
 800f98c:	4b1e      	ldr	r3, [pc, #120]	; (800fa08 <__sfp+0x84>)
 800f98e:	681e      	ldr	r6, [r3, #0]
 800f990:	69b3      	ldr	r3, [r6, #24]
 800f992:	b913      	cbnz	r3, 800f99a <__sfp+0x16>
 800f994:	4630      	mov	r0, r6
 800f996:	f7ff ffbd 	bl	800f914 <__sinit>
 800f99a:	3648      	adds	r6, #72	; 0x48
 800f99c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f9a0:	3b01      	subs	r3, #1
 800f9a2:	d503      	bpl.n	800f9ac <__sfp+0x28>
 800f9a4:	6833      	ldr	r3, [r6, #0]
 800f9a6:	b30b      	cbz	r3, 800f9ec <__sfp+0x68>
 800f9a8:	6836      	ldr	r6, [r6, #0]
 800f9aa:	e7f7      	b.n	800f99c <__sfp+0x18>
 800f9ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f9b0:	b9d5      	cbnz	r5, 800f9e8 <__sfp+0x64>
 800f9b2:	4b16      	ldr	r3, [pc, #88]	; (800fa0c <__sfp+0x88>)
 800f9b4:	60e3      	str	r3, [r4, #12]
 800f9b6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f9ba:	6665      	str	r5, [r4, #100]	; 0x64
 800f9bc:	f000 f847 	bl	800fa4e <__retarget_lock_init_recursive>
 800f9c0:	f7ff ff96 	bl	800f8f0 <__sfp_lock_release>
 800f9c4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f9c8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f9cc:	6025      	str	r5, [r4, #0]
 800f9ce:	61a5      	str	r5, [r4, #24]
 800f9d0:	2208      	movs	r2, #8
 800f9d2:	4629      	mov	r1, r5
 800f9d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f9d8:	f7fd fa9e 	bl	800cf18 <memset>
 800f9dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f9e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f9e4:	4620      	mov	r0, r4
 800f9e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f9e8:	3468      	adds	r4, #104	; 0x68
 800f9ea:	e7d9      	b.n	800f9a0 <__sfp+0x1c>
 800f9ec:	2104      	movs	r1, #4
 800f9ee:	4638      	mov	r0, r7
 800f9f0:	f7ff ff62 	bl	800f8b8 <__sfmoreglue>
 800f9f4:	4604      	mov	r4, r0
 800f9f6:	6030      	str	r0, [r6, #0]
 800f9f8:	2800      	cmp	r0, #0
 800f9fa:	d1d5      	bne.n	800f9a8 <__sfp+0x24>
 800f9fc:	f7ff ff78 	bl	800f8f0 <__sfp_lock_release>
 800fa00:	230c      	movs	r3, #12
 800fa02:	603b      	str	r3, [r7, #0]
 800fa04:	e7ee      	b.n	800f9e4 <__sfp+0x60>
 800fa06:	bf00      	nop
 800fa08:	0803d14c 	.word	0x0803d14c
 800fa0c:	ffff0001 	.word	0xffff0001

0800fa10 <_fwalk_reent>:
 800fa10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fa14:	4606      	mov	r6, r0
 800fa16:	4688      	mov	r8, r1
 800fa18:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800fa1c:	2700      	movs	r7, #0
 800fa1e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fa22:	f1b9 0901 	subs.w	r9, r9, #1
 800fa26:	d505      	bpl.n	800fa34 <_fwalk_reent+0x24>
 800fa28:	6824      	ldr	r4, [r4, #0]
 800fa2a:	2c00      	cmp	r4, #0
 800fa2c:	d1f7      	bne.n	800fa1e <_fwalk_reent+0xe>
 800fa2e:	4638      	mov	r0, r7
 800fa30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fa34:	89ab      	ldrh	r3, [r5, #12]
 800fa36:	2b01      	cmp	r3, #1
 800fa38:	d907      	bls.n	800fa4a <_fwalk_reent+0x3a>
 800fa3a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fa3e:	3301      	adds	r3, #1
 800fa40:	d003      	beq.n	800fa4a <_fwalk_reent+0x3a>
 800fa42:	4629      	mov	r1, r5
 800fa44:	4630      	mov	r0, r6
 800fa46:	47c0      	blx	r8
 800fa48:	4307      	orrs	r7, r0
 800fa4a:	3568      	adds	r5, #104	; 0x68
 800fa4c:	e7e9      	b.n	800fa22 <_fwalk_reent+0x12>

0800fa4e <__retarget_lock_init_recursive>:
 800fa4e:	4770      	bx	lr

0800fa50 <__retarget_lock_acquire_recursive>:
 800fa50:	4770      	bx	lr

0800fa52 <__retarget_lock_release_recursive>:
 800fa52:	4770      	bx	lr

0800fa54 <__swhatbuf_r>:
 800fa54:	b570      	push	{r4, r5, r6, lr}
 800fa56:	460e      	mov	r6, r1
 800fa58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa5c:	2900      	cmp	r1, #0
 800fa5e:	b096      	sub	sp, #88	; 0x58
 800fa60:	4614      	mov	r4, r2
 800fa62:	461d      	mov	r5, r3
 800fa64:	da08      	bge.n	800fa78 <__swhatbuf_r+0x24>
 800fa66:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800fa6a:	2200      	movs	r2, #0
 800fa6c:	602a      	str	r2, [r5, #0]
 800fa6e:	061a      	lsls	r2, r3, #24
 800fa70:	d410      	bmi.n	800fa94 <__swhatbuf_r+0x40>
 800fa72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fa76:	e00e      	b.n	800fa96 <__swhatbuf_r+0x42>
 800fa78:	466a      	mov	r2, sp
 800fa7a:	f000 f903 	bl	800fc84 <_fstat_r>
 800fa7e:	2800      	cmp	r0, #0
 800fa80:	dbf1      	blt.n	800fa66 <__swhatbuf_r+0x12>
 800fa82:	9a01      	ldr	r2, [sp, #4]
 800fa84:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800fa88:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800fa8c:	425a      	negs	r2, r3
 800fa8e:	415a      	adcs	r2, r3
 800fa90:	602a      	str	r2, [r5, #0]
 800fa92:	e7ee      	b.n	800fa72 <__swhatbuf_r+0x1e>
 800fa94:	2340      	movs	r3, #64	; 0x40
 800fa96:	2000      	movs	r0, #0
 800fa98:	6023      	str	r3, [r4, #0]
 800fa9a:	b016      	add	sp, #88	; 0x58
 800fa9c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800faa0 <__smakebuf_r>:
 800faa0:	898b      	ldrh	r3, [r1, #12]
 800faa2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800faa4:	079d      	lsls	r5, r3, #30
 800faa6:	4606      	mov	r6, r0
 800faa8:	460c      	mov	r4, r1
 800faaa:	d507      	bpl.n	800fabc <__smakebuf_r+0x1c>
 800faac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800fab0:	6023      	str	r3, [r4, #0]
 800fab2:	6123      	str	r3, [r4, #16]
 800fab4:	2301      	movs	r3, #1
 800fab6:	6163      	str	r3, [r4, #20]
 800fab8:	b002      	add	sp, #8
 800faba:	bd70      	pop	{r4, r5, r6, pc}
 800fabc:	ab01      	add	r3, sp, #4
 800fabe:	466a      	mov	r2, sp
 800fac0:	f7ff ffc8 	bl	800fa54 <__swhatbuf_r>
 800fac4:	9900      	ldr	r1, [sp, #0]
 800fac6:	4605      	mov	r5, r0
 800fac8:	4630      	mov	r0, r6
 800faca:	f7ff f963 	bl	800ed94 <_malloc_r>
 800face:	b948      	cbnz	r0, 800fae4 <__smakebuf_r+0x44>
 800fad0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fad4:	059a      	lsls	r2, r3, #22
 800fad6:	d4ef      	bmi.n	800fab8 <__smakebuf_r+0x18>
 800fad8:	f023 0303 	bic.w	r3, r3, #3
 800fadc:	f043 0302 	orr.w	r3, r3, #2
 800fae0:	81a3      	strh	r3, [r4, #12]
 800fae2:	e7e3      	b.n	800faac <__smakebuf_r+0xc>
 800fae4:	4b0d      	ldr	r3, [pc, #52]	; (800fb1c <__smakebuf_r+0x7c>)
 800fae6:	62b3      	str	r3, [r6, #40]	; 0x28
 800fae8:	89a3      	ldrh	r3, [r4, #12]
 800faea:	6020      	str	r0, [r4, #0]
 800faec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800faf0:	81a3      	strh	r3, [r4, #12]
 800faf2:	9b00      	ldr	r3, [sp, #0]
 800faf4:	6163      	str	r3, [r4, #20]
 800faf6:	9b01      	ldr	r3, [sp, #4]
 800faf8:	6120      	str	r0, [r4, #16]
 800fafa:	b15b      	cbz	r3, 800fb14 <__smakebuf_r+0x74>
 800fafc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fb00:	4630      	mov	r0, r6
 800fb02:	f000 f8d1 	bl	800fca8 <_isatty_r>
 800fb06:	b128      	cbz	r0, 800fb14 <__smakebuf_r+0x74>
 800fb08:	89a3      	ldrh	r3, [r4, #12]
 800fb0a:	f023 0303 	bic.w	r3, r3, #3
 800fb0e:	f043 0301 	orr.w	r3, r3, #1
 800fb12:	81a3      	strh	r3, [r4, #12]
 800fb14:	89a0      	ldrh	r0, [r4, #12]
 800fb16:	4305      	orrs	r5, r0
 800fb18:	81a5      	strh	r5, [r4, #12]
 800fb1a:	e7cd      	b.n	800fab8 <__smakebuf_r+0x18>
 800fb1c:	0800f8ad 	.word	0x0800f8ad

0800fb20 <_malloc_usable_size_r>:
 800fb20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fb24:	1f18      	subs	r0, r3, #4
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	bfbc      	itt	lt
 800fb2a:	580b      	ldrlt	r3, [r1, r0]
 800fb2c:	18c0      	addlt	r0, r0, r3
 800fb2e:	4770      	bx	lr

0800fb30 <_raise_r>:
 800fb30:	291f      	cmp	r1, #31
 800fb32:	b538      	push	{r3, r4, r5, lr}
 800fb34:	4604      	mov	r4, r0
 800fb36:	460d      	mov	r5, r1
 800fb38:	d904      	bls.n	800fb44 <_raise_r+0x14>
 800fb3a:	2316      	movs	r3, #22
 800fb3c:	6003      	str	r3, [r0, #0]
 800fb3e:	f04f 30ff 	mov.w	r0, #4294967295
 800fb42:	bd38      	pop	{r3, r4, r5, pc}
 800fb44:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800fb46:	b112      	cbz	r2, 800fb4e <_raise_r+0x1e>
 800fb48:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fb4c:	b94b      	cbnz	r3, 800fb62 <_raise_r+0x32>
 800fb4e:	4620      	mov	r0, r4
 800fb50:	f000 f830 	bl	800fbb4 <_getpid_r>
 800fb54:	462a      	mov	r2, r5
 800fb56:	4601      	mov	r1, r0
 800fb58:	4620      	mov	r0, r4
 800fb5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fb5e:	f000 b817 	b.w	800fb90 <_kill_r>
 800fb62:	2b01      	cmp	r3, #1
 800fb64:	d00a      	beq.n	800fb7c <_raise_r+0x4c>
 800fb66:	1c59      	adds	r1, r3, #1
 800fb68:	d103      	bne.n	800fb72 <_raise_r+0x42>
 800fb6a:	2316      	movs	r3, #22
 800fb6c:	6003      	str	r3, [r0, #0]
 800fb6e:	2001      	movs	r0, #1
 800fb70:	e7e7      	b.n	800fb42 <_raise_r+0x12>
 800fb72:	2400      	movs	r4, #0
 800fb74:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800fb78:	4628      	mov	r0, r5
 800fb7a:	4798      	blx	r3
 800fb7c:	2000      	movs	r0, #0
 800fb7e:	e7e0      	b.n	800fb42 <_raise_r+0x12>

0800fb80 <raise>:
 800fb80:	4b02      	ldr	r3, [pc, #8]	; (800fb8c <raise+0xc>)
 800fb82:	4601      	mov	r1, r0
 800fb84:	6818      	ldr	r0, [r3, #0]
 800fb86:	f7ff bfd3 	b.w	800fb30 <_raise_r>
 800fb8a:	bf00      	nop
 800fb8c:	20000250 	.word	0x20000250

0800fb90 <_kill_r>:
 800fb90:	b538      	push	{r3, r4, r5, lr}
 800fb92:	4d07      	ldr	r5, [pc, #28]	; (800fbb0 <_kill_r+0x20>)
 800fb94:	2300      	movs	r3, #0
 800fb96:	4604      	mov	r4, r0
 800fb98:	4608      	mov	r0, r1
 800fb9a:	4611      	mov	r1, r2
 800fb9c:	602b      	str	r3, [r5, #0]
 800fb9e:	f7f5 fd81 	bl	80056a4 <_kill>
 800fba2:	1c43      	adds	r3, r0, #1
 800fba4:	d102      	bne.n	800fbac <_kill_r+0x1c>
 800fba6:	682b      	ldr	r3, [r5, #0]
 800fba8:	b103      	cbz	r3, 800fbac <_kill_r+0x1c>
 800fbaa:	6023      	str	r3, [r4, #0]
 800fbac:	bd38      	pop	{r3, r4, r5, pc}
 800fbae:	bf00      	nop
 800fbb0:	200008cc 	.word	0x200008cc

0800fbb4 <_getpid_r>:
 800fbb4:	f7f5 bd6e 	b.w	8005694 <_getpid>

0800fbb8 <__sread>:
 800fbb8:	b510      	push	{r4, lr}
 800fbba:	460c      	mov	r4, r1
 800fbbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fbc0:	f000 f894 	bl	800fcec <_read_r>
 800fbc4:	2800      	cmp	r0, #0
 800fbc6:	bfab      	itete	ge
 800fbc8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800fbca:	89a3      	ldrhlt	r3, [r4, #12]
 800fbcc:	181b      	addge	r3, r3, r0
 800fbce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800fbd2:	bfac      	ite	ge
 800fbd4:	6563      	strge	r3, [r4, #84]	; 0x54
 800fbd6:	81a3      	strhlt	r3, [r4, #12]
 800fbd8:	bd10      	pop	{r4, pc}

0800fbda <__swrite>:
 800fbda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fbde:	461f      	mov	r7, r3
 800fbe0:	898b      	ldrh	r3, [r1, #12]
 800fbe2:	05db      	lsls	r3, r3, #23
 800fbe4:	4605      	mov	r5, r0
 800fbe6:	460c      	mov	r4, r1
 800fbe8:	4616      	mov	r6, r2
 800fbea:	d505      	bpl.n	800fbf8 <__swrite+0x1e>
 800fbec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fbf0:	2302      	movs	r3, #2
 800fbf2:	2200      	movs	r2, #0
 800fbf4:	f000 f868 	bl	800fcc8 <_lseek_r>
 800fbf8:	89a3      	ldrh	r3, [r4, #12]
 800fbfa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fbfe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fc02:	81a3      	strh	r3, [r4, #12]
 800fc04:	4632      	mov	r2, r6
 800fc06:	463b      	mov	r3, r7
 800fc08:	4628      	mov	r0, r5
 800fc0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fc0e:	f000 b817 	b.w	800fc40 <_write_r>

0800fc12 <__sseek>:
 800fc12:	b510      	push	{r4, lr}
 800fc14:	460c      	mov	r4, r1
 800fc16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc1a:	f000 f855 	bl	800fcc8 <_lseek_r>
 800fc1e:	1c43      	adds	r3, r0, #1
 800fc20:	89a3      	ldrh	r3, [r4, #12]
 800fc22:	bf15      	itete	ne
 800fc24:	6560      	strne	r0, [r4, #84]	; 0x54
 800fc26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800fc2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800fc2e:	81a3      	strheq	r3, [r4, #12]
 800fc30:	bf18      	it	ne
 800fc32:	81a3      	strhne	r3, [r4, #12]
 800fc34:	bd10      	pop	{r4, pc}

0800fc36 <__sclose>:
 800fc36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc3a:	f000 b813 	b.w	800fc64 <_close_r>
	...

0800fc40 <_write_r>:
 800fc40:	b538      	push	{r3, r4, r5, lr}
 800fc42:	4d07      	ldr	r5, [pc, #28]	; (800fc60 <_write_r+0x20>)
 800fc44:	4604      	mov	r4, r0
 800fc46:	4608      	mov	r0, r1
 800fc48:	4611      	mov	r1, r2
 800fc4a:	2200      	movs	r2, #0
 800fc4c:	602a      	str	r2, [r5, #0]
 800fc4e:	461a      	mov	r2, r3
 800fc50:	f7f5 fd5f 	bl	8005712 <_write>
 800fc54:	1c43      	adds	r3, r0, #1
 800fc56:	d102      	bne.n	800fc5e <_write_r+0x1e>
 800fc58:	682b      	ldr	r3, [r5, #0]
 800fc5a:	b103      	cbz	r3, 800fc5e <_write_r+0x1e>
 800fc5c:	6023      	str	r3, [r4, #0]
 800fc5e:	bd38      	pop	{r3, r4, r5, pc}
 800fc60:	200008cc 	.word	0x200008cc

0800fc64 <_close_r>:
 800fc64:	b538      	push	{r3, r4, r5, lr}
 800fc66:	4d06      	ldr	r5, [pc, #24]	; (800fc80 <_close_r+0x1c>)
 800fc68:	2300      	movs	r3, #0
 800fc6a:	4604      	mov	r4, r0
 800fc6c:	4608      	mov	r0, r1
 800fc6e:	602b      	str	r3, [r5, #0]
 800fc70:	f7f5 fd6b 	bl	800574a <_close>
 800fc74:	1c43      	adds	r3, r0, #1
 800fc76:	d102      	bne.n	800fc7e <_close_r+0x1a>
 800fc78:	682b      	ldr	r3, [r5, #0]
 800fc7a:	b103      	cbz	r3, 800fc7e <_close_r+0x1a>
 800fc7c:	6023      	str	r3, [r4, #0]
 800fc7e:	bd38      	pop	{r3, r4, r5, pc}
 800fc80:	200008cc 	.word	0x200008cc

0800fc84 <_fstat_r>:
 800fc84:	b538      	push	{r3, r4, r5, lr}
 800fc86:	4d07      	ldr	r5, [pc, #28]	; (800fca4 <_fstat_r+0x20>)
 800fc88:	2300      	movs	r3, #0
 800fc8a:	4604      	mov	r4, r0
 800fc8c:	4608      	mov	r0, r1
 800fc8e:	4611      	mov	r1, r2
 800fc90:	602b      	str	r3, [r5, #0]
 800fc92:	f7f5 fd66 	bl	8005762 <_fstat>
 800fc96:	1c43      	adds	r3, r0, #1
 800fc98:	d102      	bne.n	800fca0 <_fstat_r+0x1c>
 800fc9a:	682b      	ldr	r3, [r5, #0]
 800fc9c:	b103      	cbz	r3, 800fca0 <_fstat_r+0x1c>
 800fc9e:	6023      	str	r3, [r4, #0]
 800fca0:	bd38      	pop	{r3, r4, r5, pc}
 800fca2:	bf00      	nop
 800fca4:	200008cc 	.word	0x200008cc

0800fca8 <_isatty_r>:
 800fca8:	b538      	push	{r3, r4, r5, lr}
 800fcaa:	4d06      	ldr	r5, [pc, #24]	; (800fcc4 <_isatty_r+0x1c>)
 800fcac:	2300      	movs	r3, #0
 800fcae:	4604      	mov	r4, r0
 800fcb0:	4608      	mov	r0, r1
 800fcb2:	602b      	str	r3, [r5, #0]
 800fcb4:	f7f5 fd65 	bl	8005782 <_isatty>
 800fcb8:	1c43      	adds	r3, r0, #1
 800fcba:	d102      	bne.n	800fcc2 <_isatty_r+0x1a>
 800fcbc:	682b      	ldr	r3, [r5, #0]
 800fcbe:	b103      	cbz	r3, 800fcc2 <_isatty_r+0x1a>
 800fcc0:	6023      	str	r3, [r4, #0]
 800fcc2:	bd38      	pop	{r3, r4, r5, pc}
 800fcc4:	200008cc 	.word	0x200008cc

0800fcc8 <_lseek_r>:
 800fcc8:	b538      	push	{r3, r4, r5, lr}
 800fcca:	4d07      	ldr	r5, [pc, #28]	; (800fce8 <_lseek_r+0x20>)
 800fccc:	4604      	mov	r4, r0
 800fcce:	4608      	mov	r0, r1
 800fcd0:	4611      	mov	r1, r2
 800fcd2:	2200      	movs	r2, #0
 800fcd4:	602a      	str	r2, [r5, #0]
 800fcd6:	461a      	mov	r2, r3
 800fcd8:	f7f5 fd5e 	bl	8005798 <_lseek>
 800fcdc:	1c43      	adds	r3, r0, #1
 800fcde:	d102      	bne.n	800fce6 <_lseek_r+0x1e>
 800fce0:	682b      	ldr	r3, [r5, #0]
 800fce2:	b103      	cbz	r3, 800fce6 <_lseek_r+0x1e>
 800fce4:	6023      	str	r3, [r4, #0]
 800fce6:	bd38      	pop	{r3, r4, r5, pc}
 800fce8:	200008cc 	.word	0x200008cc

0800fcec <_read_r>:
 800fcec:	b538      	push	{r3, r4, r5, lr}
 800fcee:	4d07      	ldr	r5, [pc, #28]	; (800fd0c <_read_r+0x20>)
 800fcf0:	4604      	mov	r4, r0
 800fcf2:	4608      	mov	r0, r1
 800fcf4:	4611      	mov	r1, r2
 800fcf6:	2200      	movs	r2, #0
 800fcf8:	602a      	str	r2, [r5, #0]
 800fcfa:	461a      	mov	r2, r3
 800fcfc:	f7f5 fcec 	bl	80056d8 <_read>
 800fd00:	1c43      	adds	r3, r0, #1
 800fd02:	d102      	bne.n	800fd0a <_read_r+0x1e>
 800fd04:	682b      	ldr	r3, [r5, #0]
 800fd06:	b103      	cbz	r3, 800fd0a <_read_r+0x1e>
 800fd08:	6023      	str	r3, [r4, #0]
 800fd0a:	bd38      	pop	{r3, r4, r5, pc}
 800fd0c:	200008cc 	.word	0x200008cc

0800fd10 <trunc>:
 800fd10:	ec51 0b10 	vmov	r0, r1, d0
 800fd14:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800fd18:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800fd1c:	2b13      	cmp	r3, #19
 800fd1e:	b5d0      	push	{r4, r6, r7, lr}
 800fd20:	460c      	mov	r4, r1
 800fd22:	dc10      	bgt.n	800fd46 <trunc+0x36>
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	bfa5      	ittet	ge
 800fd28:	4a11      	ldrge	r2, [pc, #68]	; (800fd70 <trunc+0x60>)
 800fd2a:	fa42 f303 	asrge.w	r3, r2, r3
 800fd2e:	2100      	movlt	r1, #0
 800fd30:	2100      	movge	r1, #0
 800fd32:	bfb9      	ittee	lt
 800fd34:	2000      	movlt	r0, #0
 800fd36:	f004 4100 	andlt.w	r1, r4, #2147483648	; 0x80000000
 800fd3a:	2000      	movge	r0, #0
 800fd3c:	ea24 0103 	bicge.w	r1, r4, r3
 800fd40:	ec41 0b10 	vmov	d0, r0, r1
 800fd44:	bdd0      	pop	{r4, r6, r7, pc}
 800fd46:	2b33      	cmp	r3, #51	; 0x33
 800fd48:	dd08      	ble.n	800fd5c <trunc+0x4c>
 800fd4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fd4e:	d1f7      	bne.n	800fd40 <trunc+0x30>
 800fd50:	ee10 2a10 	vmov	r2, s0
 800fd54:	460b      	mov	r3, r1
 800fd56:	f7f0 faa1 	bl	800029c <__adddf3>
 800fd5a:	e7f1      	b.n	800fd40 <trunc+0x30>
 800fd5c:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800fd60:	f04f 33ff 	mov.w	r3, #4294967295
 800fd64:	fa23 f202 	lsr.w	r2, r3, r2
 800fd68:	ea20 0602 	bic.w	r6, r0, r2
 800fd6c:	4630      	mov	r0, r6
 800fd6e:	e7e7      	b.n	800fd40 <trunc+0x30>
 800fd70:	000fffff 	.word	0x000fffff

0800fd74 <ceilf>:
 800fd74:	ee10 3a10 	vmov	r3, s0
 800fd78:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800fd7c:	3a7f      	subs	r2, #127	; 0x7f
 800fd7e:	2a16      	cmp	r2, #22
 800fd80:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800fd84:	dc2a      	bgt.n	800fddc <ceilf+0x68>
 800fd86:	2a00      	cmp	r2, #0
 800fd88:	da11      	bge.n	800fdae <ceilf+0x3a>
 800fd8a:	eddf 7a19 	vldr	s15, [pc, #100]	; 800fdf0 <ceilf+0x7c>
 800fd8e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800fd92:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800fd96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd9a:	dd05      	ble.n	800fda8 <ceilf+0x34>
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	db23      	blt.n	800fde8 <ceilf+0x74>
 800fda0:	2900      	cmp	r1, #0
 800fda2:	bf18      	it	ne
 800fda4:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 800fda8:	ee00 3a10 	vmov	s0, r3
 800fdac:	4770      	bx	lr
 800fdae:	4911      	ldr	r1, [pc, #68]	; (800fdf4 <ceilf+0x80>)
 800fdb0:	4111      	asrs	r1, r2
 800fdb2:	420b      	tst	r3, r1
 800fdb4:	d0fa      	beq.n	800fdac <ceilf+0x38>
 800fdb6:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800fdf0 <ceilf+0x7c>
 800fdba:	ee30 0a27 	vadd.f32	s0, s0, s15
 800fdbe:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800fdc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdc6:	ddef      	ble.n	800fda8 <ceilf+0x34>
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	bfc2      	ittt	gt
 800fdcc:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 800fdd0:	fa40 f202 	asrgt.w	r2, r0, r2
 800fdd4:	189b      	addgt	r3, r3, r2
 800fdd6:	ea23 0301 	bic.w	r3, r3, r1
 800fdda:	e7e5      	b.n	800fda8 <ceilf+0x34>
 800fddc:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800fde0:	d3e4      	bcc.n	800fdac <ceilf+0x38>
 800fde2:	ee30 0a00 	vadd.f32	s0, s0, s0
 800fde6:	4770      	bx	lr
 800fde8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800fdec:	e7dc      	b.n	800fda8 <ceilf+0x34>
 800fdee:	bf00      	nop
 800fdf0:	7149f2ca 	.word	0x7149f2ca
 800fdf4:	007fffff 	.word	0x007fffff

0800fdf8 <_init>:
 800fdf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fdfa:	bf00      	nop
 800fdfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fdfe:	bc08      	pop	{r3}
 800fe00:	469e      	mov	lr, r3
 800fe02:	4770      	bx	lr

0800fe04 <_fini>:
 800fe04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe06:	bf00      	nop
 800fe08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fe0a:	bc08      	pop	{r3}
 800fe0c:	469e      	mov	lr, r3
 800fe0e:	4770      	bx	lr
