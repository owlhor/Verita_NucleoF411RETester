
F411_Verita_Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c718  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00009034  0800c8b8  0800c8b8  0001c8b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080158ec  080158ec  000301f8  2**0
                  CONTENTS
  4 .ARM          00000008  080158ec  080158ec  000258ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080158f4  080158f4  000301f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080158f4  080158f4  000258f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080158f8  080158f8  000258f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  080158fc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b0  200001f8  08015af4  000301f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005a8  08015af4  000305a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017b64  00000000  00000000  00030228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000317f  00000000  00000000  00047d8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014f8  00000000  00000000  0004af10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013a8  00000000  00000000  0004c408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019d5f  00000000  00000000  0004d7b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001890e  00000000  00000000  0006750f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098dfa  00000000  00000000  0007fe1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00118c17  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a74  00000000  00000000  00118c68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f8 	.word	0x200001f8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c8a0 	.word	0x0800c8a0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001fc 	.word	0x200001fc
 80001dc:	0800c8a0 	.word	0x0800c8a0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b974 	b.w	8000f98 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468e      	mov	lr, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14d      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4694      	mov	ip, r2
 8000cda:	d969      	bls.n	8000db0 <__udivmoddi4+0xe8>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b152      	cbz	r2, 8000cf8 <__udivmoddi4+0x30>
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	f1c2 0120 	rsb	r1, r2, #32
 8000cea:	fa20 f101 	lsr.w	r1, r0, r1
 8000cee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cf6:	4094      	lsls	r4, r2
 8000cf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cfc:	0c21      	lsrs	r1, r4, #16
 8000cfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000d02:	fa1f f78c 	uxth.w	r7, ip
 8000d06:	fb08 e316 	mls	r3, r8, r6, lr
 8000d0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d0e:	fb06 f107 	mul.w	r1, r6, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1e:	f080 811f 	bcs.w	8000f60 <__udivmoddi4+0x298>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 811c 	bls.w	8000f60 <__udivmoddi4+0x298>
 8000d28:	3e02      	subs	r6, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a5b      	subs	r3, r3, r1
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d34:	fb08 3310 	mls	r3, r8, r0, r3
 8000d38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d3c:	fb00 f707 	mul.w	r7, r0, r7
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x92>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4c:	f080 810a 	bcs.w	8000f64 <__udivmoddi4+0x29c>
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	f240 8107 	bls.w	8000f64 <__udivmoddi4+0x29c>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5e:	1be4      	subs	r4, r4, r7
 8000d60:	2600      	movs	r6, #0
 8000d62:	b11d      	cbz	r5, 8000d6c <__udivmoddi4+0xa4>
 8000d64:	40d4      	lsrs	r4, r2
 8000d66:	2300      	movs	r3, #0
 8000d68:	e9c5 4300 	strd	r4, r3, [r5]
 8000d6c:	4631      	mov	r1, r6
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0xc2>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	f000 80ef 	beq.w	8000f5a <__udivmoddi4+0x292>
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d82:	4630      	mov	r0, r6
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f683 	clz	r6, r3
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	d14a      	bne.n	8000e28 <__udivmoddi4+0x160>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xd4>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80f9 	bhi.w	8000f8e <__udivmoddi4+0x2c6>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	469e      	mov	lr, r3
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d0e0      	beq.n	8000d6c <__udivmoddi4+0xa4>
 8000daa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dae:	e7dd      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000db0:	b902      	cbnz	r2, 8000db4 <__udivmoddi4+0xec>
 8000db2:	deff      	udf	#255	; 0xff
 8000db4:	fab2 f282 	clz	r2, r2
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	f040 8092 	bne.w	8000ee2 <__udivmoddi4+0x21a>
 8000dbe:	eba1 010c 	sub.w	r1, r1, ip
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f fe8c 	uxth.w	lr, ip
 8000dca:	2601      	movs	r6, #1
 8000dcc:	0c20      	lsrs	r0, r4, #16
 8000dce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dda:	fb0e f003 	mul.w	r0, lr, r3
 8000dde:	4288      	cmp	r0, r1
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x12c>
 8000de2:	eb1c 0101 	adds.w	r1, ip, r1
 8000de6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x12a>
 8000dec:	4288      	cmp	r0, r1
 8000dee:	f200 80cb 	bhi.w	8000f88 <__udivmoddi4+0x2c0>
 8000df2:	4643      	mov	r3, r8
 8000df4:	1a09      	subs	r1, r1, r0
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000e00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e04:	fb0e fe00 	mul.w	lr, lr, r0
 8000e08:	45a6      	cmp	lr, r4
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x156>
 8000e0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e14:	d202      	bcs.n	8000e1c <__udivmoddi4+0x154>
 8000e16:	45a6      	cmp	lr, r4
 8000e18:	f200 80bb 	bhi.w	8000f92 <__udivmoddi4+0x2ca>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	eba4 040e 	sub.w	r4, r4, lr
 8000e22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e26:	e79c      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000e28:	f1c6 0720 	rsb	r7, r6, #32
 8000e2c:	40b3      	lsls	r3, r6
 8000e2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e36:	fa20 f407 	lsr.w	r4, r0, r7
 8000e3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3e:	431c      	orrs	r4, r3
 8000e40:	40f9      	lsrs	r1, r7
 8000e42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e46:	fa00 f306 	lsl.w	r3, r0, r6
 8000e4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e4e:	0c20      	lsrs	r0, r4, #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fb09 1118 	mls	r1, r9, r8, r1
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e60:	4288      	cmp	r0, r1
 8000e62:	fa02 f206 	lsl.w	r2, r2, r6
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x1b8>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e70:	f080 8088 	bcs.w	8000f84 <__udivmoddi4+0x2bc>
 8000e74:	4288      	cmp	r0, r1
 8000e76:	f240 8085 	bls.w	8000f84 <__udivmoddi4+0x2bc>
 8000e7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e88:	fb09 1110 	mls	r1, r9, r0, r1
 8000e8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e94:	458e      	cmp	lr, r1
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x1e2>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea0:	d26c      	bcs.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea2:	458e      	cmp	lr, r1
 8000ea4:	d96a      	bls.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4461      	add	r1, ip
 8000eaa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eae:	fba0 9402 	umull	r9, r4, r0, r2
 8000eb2:	eba1 010e 	sub.w	r1, r1, lr
 8000eb6:	42a1      	cmp	r1, r4
 8000eb8:	46c8      	mov	r8, r9
 8000eba:	46a6      	mov	lr, r4
 8000ebc:	d356      	bcc.n	8000f6c <__udivmoddi4+0x2a4>
 8000ebe:	d053      	beq.n	8000f68 <__udivmoddi4+0x2a0>
 8000ec0:	b15d      	cbz	r5, 8000eda <__udivmoddi4+0x212>
 8000ec2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ec6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eca:	fa01 f707 	lsl.w	r7, r1, r7
 8000ece:	fa22 f306 	lsr.w	r3, r2, r6
 8000ed2:	40f1      	lsrs	r1, r6
 8000ed4:	431f      	orrs	r7, r3
 8000ed6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eda:	2600      	movs	r6, #0
 8000edc:	4631      	mov	r1, r6
 8000ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee2:	f1c2 0320 	rsb	r3, r2, #32
 8000ee6:	40d8      	lsrs	r0, r3
 8000ee8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eec:	fa21 f303 	lsr.w	r3, r1, r3
 8000ef0:	4091      	lsls	r1, r2
 8000ef2:	4301      	orrs	r1, r0
 8000ef4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef8:	fa1f fe8c 	uxth.w	lr, ip
 8000efc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f00:	fb07 3610 	mls	r6, r7, r0, r3
 8000f04:	0c0b      	lsrs	r3, r1, #16
 8000f06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f0e:	429e      	cmp	r6, r3
 8000f10:	fa04 f402 	lsl.w	r4, r4, r2
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x260>
 8000f16:	eb1c 0303 	adds.w	r3, ip, r3
 8000f1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f1e:	d22f      	bcs.n	8000f80 <__udivmoddi4+0x2b8>
 8000f20:	429e      	cmp	r6, r3
 8000f22:	d92d      	bls.n	8000f80 <__udivmoddi4+0x2b8>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4463      	add	r3, ip
 8000f28:	1b9b      	subs	r3, r3, r6
 8000f2a:	b289      	uxth	r1, r1
 8000f2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f30:	fb07 3316 	mls	r3, r7, r6, r3
 8000f34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f38:	fb06 f30e 	mul.w	r3, r6, lr
 8000f3c:	428b      	cmp	r3, r1
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x28a>
 8000f40:	eb1c 0101 	adds.w	r1, ip, r1
 8000f44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f48:	d216      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d914      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4e:	3e02      	subs	r6, #2
 8000f50:	4461      	add	r1, ip
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f58:	e738      	b.n	8000dcc <__udivmoddi4+0x104>
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e705      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e3      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6f8      	b.n	8000d5a <__udivmoddi4+0x92>
 8000f68:	454b      	cmp	r3, r9
 8000f6a:	d2a9      	bcs.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7a3      	b.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f78:	4646      	mov	r6, r8
 8000f7a:	e7ea      	b.n	8000f52 <__udivmoddi4+0x28a>
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	e794      	b.n	8000eaa <__udivmoddi4+0x1e2>
 8000f80:	4640      	mov	r0, r8
 8000f82:	e7d1      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f84:	46d0      	mov	r8, sl
 8000f86:	e77b      	b.n	8000e80 <__udivmoddi4+0x1b8>
 8000f88:	3b02      	subs	r3, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	e732      	b.n	8000df4 <__udivmoddi4+0x12c>
 8000f8e:	4630      	mov	r0, r6
 8000f90:	e709      	b.n	8000da6 <__udivmoddi4+0xde>
 8000f92:	4464      	add	r4, ip
 8000f94:	3802      	subs	r0, #2
 8000f96:	e742      	b.n	8000e1e <__udivmoddi4+0x156>

08000f98 <__aeabi_idiv0>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <INA219Read_cx>:
 *  D16[1] :  00 CD  // D8[ 3 2 ]
 *  D16[1] | D16[0] = ABCD
 * */


uint16_t INA219Read_cx(I2C_HandleTypeDef *hi2c,uint8_t dv_addr, uint8_t ina_rg){
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b086      	sub	sp, #24
 8000fa0:	af04      	add	r7, sp, #16
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	70fb      	strb	r3, [r7, #3]
 8000fa8:	4613      	mov	r3, r2
 8000faa:	70bb      	strb	r3, [r7, #2]
	 * @param : ina_rg - register address need to access
	 * @Retval: raw bit value
	 * @ex. answer = INA219Read_cx(&hi2c1, INA219_ADDR_1, INA219_RG_Current);
	 * */

	INACBffr.D32 = 0; //// buffer clear
 8000fac:	4b0d      	ldr	r3, [pc, #52]	; (8000fe4 <INA219Read_cx+0x48>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	601a      	str	r2, [r3, #0]
	HAL_I2C_Mem_Read(hi2c, dv_addr, ina_rg, I2C_MEMADD_SIZE_8BIT, &INACBffr.D8[1], 2, 10);
 8000fb2:	78fb      	ldrb	r3, [r7, #3]
 8000fb4:	b299      	uxth	r1, r3
 8000fb6:	78bb      	ldrb	r3, [r7, #2]
 8000fb8:	b29a      	uxth	r2, r3
 8000fba:	230a      	movs	r3, #10
 8000fbc:	9302      	str	r3, [sp, #8]
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	9301      	str	r3, [sp, #4]
 8000fc2:	4b09      	ldr	r3, [pc, #36]	; (8000fe8 <INA219Read_cx+0x4c>)
 8000fc4:	9300      	str	r3, [sp, #0]
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	6878      	ldr	r0, [r7, #4]
 8000fca:	f003 fdad 	bl	8004b28 <HAL_I2C_Mem_Read>
	return INACBffr.D16[1] | INACBffr.D16[0];
 8000fce:	4b05      	ldr	r3, [pc, #20]	; (8000fe4 <INA219Read_cx+0x48>)
 8000fd0:	885a      	ldrh	r2, [r3, #2]
 8000fd2:	4b04      	ldr	r3, [pc, #16]	; (8000fe4 <INA219Read_cx+0x48>)
 8000fd4:	881b      	ldrh	r3, [r3, #0]
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	b29b      	uxth	r3, r3
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	20000214 	.word	0x20000214
 8000fe8:	20000215 	.word	0x20000215
 8000fec:	00000000 	.word	0x00000000

08000ff0 <INA219_INIT_Calibrate>:
	HAL_I2C_Mem_Write(hi2c, dv_addr, INA219_RG_Config, I2C_MEMADD_SIZE_8BIT, &resetx, 2, 10);

}

INA219_Conf_Strc configura;
void INA219_INIT_Calibrate(I2C_HandleTypeDef *hi2c,uint8_t dv_addr){
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b08a      	sub	sp, #40	; 0x28
 8000ff4:	af04      	add	r7, sp, #16
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	70fb      	strb	r3, [r7, #3]
	 * @param : hi2c - HAL_I2C used to read
	 * @param : dv_addr - address of INA219 device in the busline
	 * */

	////// -------------------- Configuration -------------------------------------
	configura.INA219CF.reset = 0;
 8000ffc:	4a52      	ldr	r2, [pc, #328]	; (8001148 <INA219_INIT_Calibrate+0x158>)
 8000ffe:	7853      	ldrb	r3, [r2, #1]
 8001000:	f36f 13c7 	bfc	r3, #7, #1
 8001004:	7053      	strb	r3, [r2, #1]
	configura.INA219CF.BRNG = BRNG_FSR_32V;
 8001006:	4a50      	ldr	r2, [pc, #320]	; (8001148 <INA219_INIT_Calibrate+0x158>)
 8001008:	7853      	ldrb	r3, [r2, #1]
 800100a:	f043 0320 	orr.w	r3, r3, #32
 800100e:	7053      	strb	r3, [r2, #1]
	configura.INA219CF.PGA = PGA_GainD4_160mv;
 8001010:	4a4d      	ldr	r2, [pc, #308]	; (8001148 <INA219_INIT_Calibrate+0x158>)
 8001012:	7853      	ldrb	r3, [r2, #1]
 8001014:	2102      	movs	r1, #2
 8001016:	f361 03c4 	bfi	r3, r1, #3, #2
 800101a:	7053      	strb	r3, [r2, #1]
	configura.INA219CF.BADC = ADCI_12bit_532uS;
 800101c:	4a4a      	ldr	r2, [pc, #296]	; (8001148 <INA219_INIT_Calibrate+0x158>)
 800101e:	8813      	ldrh	r3, [r2, #0]
 8001020:	2103      	movs	r1, #3
 8001022:	f361 13ca 	bfi	r3, r1, #7, #4
 8001026:	8013      	strh	r3, [r2, #0]
	configura.INA219CF.SADC = ADCI_12bit_532uS;
 8001028:	4a47      	ldr	r2, [pc, #284]	; (8001148 <INA219_INIT_Calibrate+0x158>)
 800102a:	7813      	ldrb	r3, [r2, #0]
 800102c:	2103      	movs	r1, #3
 800102e:	f361 03c6 	bfi	r3, r1, #3, #4
 8001032:	7013      	strb	r3, [r2, #0]
	configura.INA219CF.Mode = INAM_ShuntBusV_Continuous;
 8001034:	4a44      	ldr	r2, [pc, #272]	; (8001148 <INA219_INIT_Calibrate+0x158>)
 8001036:	7813      	ldrb	r3, [r2, #0]
 8001038:	f043 0307 	orr.w	r3, r3, #7
 800103c:	7013      	strb	r3, [r2, #0]

	uint8_t confictor_si2c[2] = {configura.D8[1], configura.D8[0]};
 800103e:	4b42      	ldr	r3, [pc, #264]	; (8001148 <INA219_INIT_Calibrate+0x158>)
 8001040:	785b      	ldrb	r3, [r3, #1]
 8001042:	753b      	strb	r3, [r7, #20]
 8001044:	4b40      	ldr	r3, [pc, #256]	; (8001148 <INA219_INIT_Calibrate+0x158>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	757b      	strb	r3, [r7, #21]
	HAL_I2C_Mem_Write(hi2c, dv_addr, INA219_RG_Config, I2C_MEMADD_SIZE_8BIT, &confictor_si2c[0], 2, 10);
 800104a:	78fb      	ldrb	r3, [r7, #3]
 800104c:	b299      	uxth	r1, r3
 800104e:	230a      	movs	r3, #10
 8001050:	9302      	str	r3, [sp, #8]
 8001052:	2302      	movs	r3, #2
 8001054:	9301      	str	r3, [sp, #4]
 8001056:	f107 0314 	add.w	r3, r7, #20
 800105a:	9300      	str	r3, [sp, #0]
 800105c:	2301      	movs	r3, #1
 800105e:	2200      	movs	r2, #0
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f003 fc67 	bl	8004934 <HAL_I2C_Mem_Write>
		uint16_t U16;
	}calibrator;

	// float current_LSB = INA219_MAX_Expect_Current / 32768.0; // 2^15
	//calibrator.U16 = (int16_t)(trunc( 0.04096 / (current_LSB * INA219_R_SHUNT_Val))) << 1;
	calibrator.U16 = trunc( 0.04096 / (current_LSB * INA219_R_SHUNT_Val));
 8001066:	4b39      	ldr	r3, [pc, #228]	; (800114c <INA219_INIT_Calibrate+0x15c>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff fa74 	bl	8000558 <__aeabi_f2d>
 8001070:	a32d      	add	r3, pc, #180	; (adr r3, 8001128 <INA219_INIT_Calibrate+0x138>)
 8001072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001076:	f7ff fac7 	bl	8000608 <__aeabi_dmul>
 800107a:	4602      	mov	r2, r0
 800107c:	460b      	mov	r3, r1
 800107e:	a12c      	add	r1, pc, #176	; (adr r1, 8001130 <INA219_INIT_Calibrate+0x140>)
 8001080:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001084:	f7ff fbea 	bl	800085c <__aeabi_ddiv>
 8001088:	4602      	mov	r2, r0
 800108a:	460b      	mov	r3, r1
 800108c:	ec43 2b17 	vmov	d7, r2, r3
 8001090:	eeb0 0a47 	vmov.f32	s0, s14
 8001094:	eef0 0a67 	vmov.f32	s1, s15
 8001098:	f00b fb8e 	bl	800c7b8 <trunc>
 800109c:	ec53 2b10 	vmov	r2, r3, d0
 80010a0:	4610      	mov	r0, r2
 80010a2:	4619      	mov	r1, r3
 80010a4:	f7ff fd88 	bl	8000bb8 <__aeabi_d2uiz>
 80010a8:	4603      	mov	r3, r0
 80010aa:	b29b      	uxth	r3, r3
 80010ac:	823b      	strh	r3, [r7, #16]
#ifdef calibrate_EQ6
	calibrator.U16 = trunc((calibrator.U16 * MeaShuntCurrent_ExtMeter) / INA219_Current_Raw);
 80010ae:	8a3b      	ldrh	r3, [r7, #16]
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff fa3f 	bl	8000534 <__aeabi_i2d>
 80010b6:	a320      	add	r3, pc, #128	; (adr r3, 8001138 <INA219_INIT_Calibrate+0x148>)
 80010b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010bc:	f7ff faa4 	bl	8000608 <__aeabi_dmul>
 80010c0:	4602      	mov	r2, r0
 80010c2:	460b      	mov	r3, r1
 80010c4:	4610      	mov	r0, r2
 80010c6:	4619      	mov	r1, r3
 80010c8:	a31d      	add	r3, pc, #116	; (adr r3, 8001140 <INA219_INIT_Calibrate+0x150>)
 80010ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ce:	f7ff fbc5 	bl	800085c <__aeabi_ddiv>
 80010d2:	4602      	mov	r2, r0
 80010d4:	460b      	mov	r3, r1
 80010d6:	ec43 2b17 	vmov	d7, r2, r3
 80010da:	eeb0 0a47 	vmov.f32	s0, s14
 80010de:	eef0 0a67 	vmov.f32	s1, s15
 80010e2:	f00b fb69 	bl	800c7b8 <trunc>
 80010e6:	ec53 2b10 	vmov	r2, r3, d0
 80010ea:	4610      	mov	r0, r2
 80010ec:	4619      	mov	r1, r3
 80010ee:	f7ff fd63 	bl	8000bb8 <__aeabi_d2uiz>
 80010f2:	4603      	mov	r3, r0
 80010f4:	b29b      	uxth	r3, r3
 80010f6:	823b      	strh	r3, [r7, #16]
#endif
	uint8_t calibrator_si2c[2] = {calibrator.U8[1], calibrator.U8[0]}; //// switch byte to send high order first in I2C
 80010f8:	7c7b      	ldrb	r3, [r7, #17]
 80010fa:	733b      	strb	r3, [r7, #12]
 80010fc:	7c3b      	ldrb	r3, [r7, #16]
 80010fe:	737b      	strb	r3, [r7, #13]
	////  ex calibrator(I = 3A, 0.1Rshunt) = 4473 = 0x1179

	HAL_I2C_Mem_Write(hi2c, dv_addr, INA219_RG_Calibra, I2C_MEMADD_SIZE_8BIT, &calibrator_si2c[0], 2, 10);
 8001100:	78fb      	ldrb	r3, [r7, #3]
 8001102:	b299      	uxth	r1, r3
 8001104:	230a      	movs	r3, #10
 8001106:	9302      	str	r3, [sp, #8]
 8001108:	2302      	movs	r3, #2
 800110a:	9301      	str	r3, [sp, #4]
 800110c:	f107 030c 	add.w	r3, r7, #12
 8001110:	9300      	str	r3, [sp, #0]
 8001112:	2301      	movs	r3, #1
 8001114:	2205      	movs	r2, #5
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f003 fc0c 	bl	8004934 <HAL_I2C_Mem_Write>

}
 800111c:	bf00      	nop
 800111e:	3718      	adds	r7, #24
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	f3af 8000 	nop.w
 8001128:	9999999a 	.word	0x9999999a
 800112c:	3fb99999 	.word	0x3fb99999
 8001130:	88e368f1 	.word	0x88e368f1
 8001134:	3fa4f8b5 	.word	0x3fa4f8b5
 8001138:	9999999a 	.word	0x9999999a
 800113c:	3fe99999 	.word	0x3fe99999
 8001140:	9999999a 	.word	0x9999999a
 8001144:	40059999 	.word	0x40059999
 8001148:	20000218 	.word	0x20000218
 800114c:	20000000 	.word	0x20000000

08001150 <INA219Read_BusV>:
	uint8_t calibrator_si2c[2] = {calibrator.U8[1], calibrator.U8[0]}; //// switch byte to send high order first in I2C
	HAL_I2C_Mem_Write(hi2c, dv_addr, INA219_RG_Calibra, I2C_MEMADD_SIZE_8BIT, &calibrator_si2c[0], 2, 10);

}

uint16_t INA219Read_BusV(I2C_HandleTypeDef *hi2c,uint8_t dv_addr){
 8001150:	b580      	push	{r7, lr}
 8001152:	b086      	sub	sp, #24
 8001154:	af04      	add	r7, sp, #16
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	460b      	mov	r3, r1
 800115a:	70fb      	strb	r3, [r7, #3]
	//	if(INACBffr[2] & 0x01){ // still unsure how to deal with CNVR / OVF
//
//	}


	INACBffr.D32 = 0; //// buffer clear
 800115c:	4b0e      	ldr	r3, [pc, #56]	; (8001198 <INA219Read_BusV+0x48>)
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
	HAL_I2C_Mem_Read(hi2c, dv_addr, INA219_RG_BusV, I2C_MEMADD_SIZE_8BIT, &INACBffr.D8[1], 2, 10);
 8001162:	78fb      	ldrb	r3, [r7, #3]
 8001164:	b299      	uxth	r1, r3
 8001166:	230a      	movs	r3, #10
 8001168:	9302      	str	r3, [sp, #8]
 800116a:	2302      	movs	r3, #2
 800116c:	9301      	str	r3, [sp, #4]
 800116e:	4b0b      	ldr	r3, [pc, #44]	; (800119c <INA219Read_BusV+0x4c>)
 8001170:	9300      	str	r3, [sp, #0]
 8001172:	2301      	movs	r3, #1
 8001174:	2202      	movs	r2, #2
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f003 fcd6 	bl	8004b28 <HAL_I2C_Mem_Read>

	return ((INACBffr.D16[1] | INACBffr.D16[0]) >> 3) * 4;
 800117c:	4b06      	ldr	r3, [pc, #24]	; (8001198 <INA219Read_BusV+0x48>)
 800117e:	885a      	ldrh	r2, [r3, #2]
 8001180:	4b05      	ldr	r3, [pc, #20]	; (8001198 <INA219Read_BusV+0x48>)
 8001182:	881b      	ldrh	r3, [r3, #0]
 8001184:	4313      	orrs	r3, r2
 8001186:	b29b      	uxth	r3, r3
 8001188:	08db      	lsrs	r3, r3, #3
 800118a:	b29b      	uxth	r3, r3
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	b29b      	uxth	r3, r3
}
 8001190:	4618      	mov	r0, r3
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	20000214 	.word	0x20000214
 800119c:	20000215 	.word	0x20000215

080011a0 <INA219Read_Current>:

uint16_t INA219Read_Current(I2C_HandleTypeDef *hi2c,uint8_t dv_addr){
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b086      	sub	sp, #24
 80011a4:	af04      	add	r7, sp, #16
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	460b      	mov	r3, r1
 80011aa:	70fb      	strb	r3, [r7, #3]
	 * @param : hi2c - HAL_I2C used to read
	 * @param : dv_addr - address of INA219 device in the busline
	 * @Retval: current in mA
	 * @ex.
	 * */
	INACBffr.D32 = 0; //// buffer clear
 80011ac:	4b0c      	ldr	r3, [pc, #48]	; (80011e0 <INA219Read_Current+0x40>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
	HAL_I2C_Mem_Read(hi2c, dv_addr, INA219_RG_Current, I2C_MEMADD_SIZE_8BIT, &INACBffr.D8[1], 2, 10);
 80011b2:	78fb      	ldrb	r3, [r7, #3]
 80011b4:	b299      	uxth	r1, r3
 80011b6:	230a      	movs	r3, #10
 80011b8:	9302      	str	r3, [sp, #8]
 80011ba:	2302      	movs	r3, #2
 80011bc:	9301      	str	r3, [sp, #4]
 80011be:	4b09      	ldr	r3, [pc, #36]	; (80011e4 <INA219Read_Current+0x44>)
 80011c0:	9300      	str	r3, [sp, #0]
 80011c2:	2301      	movs	r3, #1
 80011c4:	2204      	movs	r2, #4
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f003 fcae 	bl	8004b28 <HAL_I2C_Mem_Read>

	return INACBffr.D16[1] | INACBffr.D16[0];
 80011cc:	4b04      	ldr	r3, [pc, #16]	; (80011e0 <INA219Read_Current+0x40>)
 80011ce:	885a      	ldrh	r2, [r3, #2]
 80011d0:	4b03      	ldr	r3, [pc, #12]	; (80011e0 <INA219Read_Current+0x40>)
 80011d2:	881b      	ldrh	r3, [r3, #0]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	b29b      	uxth	r3, r3
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	20000214 	.word	0x20000214
 80011e4:	20000215 	.word	0x20000215

080011e8 <INA219Read_ShuntV>:

float INA219Read_ShuntV(I2C_HandleTypeDef *hi2c,uint8_t dv_addr){
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b088      	sub	sp, #32
 80011ec:	af04      	add	r7, sp, #16
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	460b      	mov	r3, r1
 80011f2:	70fb      	strb	r3, [r7, #3]
	 * @param : hi2c - HAL_I2C used to read
	 * @param : dv_addr - address of INA219 device in the busline
	 * @Retval: shunt voltage in mV (.2f)
	 * @ex.
	 * */
	INACBffr.D32 = 0; //// buffer clear
 80011f4:	4b17      	ldr	r3, [pc, #92]	; (8001254 <INA219Read_ShuntV+0x6c>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	601a      	str	r2, [r3, #0]
	HAL_I2C_Mem_Read(hi2c, dv_addr, INA219_RG_ShuntV, I2C_MEMADD_SIZE_8BIT, &INACBffr.D8[1], 2, 10);
 80011fa:	78fb      	ldrb	r3, [r7, #3]
 80011fc:	b299      	uxth	r1, r3
 80011fe:	230a      	movs	r3, #10
 8001200:	9302      	str	r3, [sp, #8]
 8001202:	2302      	movs	r3, #2
 8001204:	9301      	str	r3, [sp, #4]
 8001206:	4b14      	ldr	r3, [pc, #80]	; (8001258 <INA219Read_ShuntV+0x70>)
 8001208:	9300      	str	r3, [sp, #0]
 800120a:	2301      	movs	r3, #1
 800120c:	2201      	movs	r2, #1
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	f003 fc8a 	bl	8004b28 <HAL_I2C_Mem_Read>

	//// Convert rawdata To V shunt from Table 7.Shunt Voltage Register Format

    int16_t rawshunt = INACBffr.D16[1] | INACBffr.D16[0];
 8001214:	4b0f      	ldr	r3, [pc, #60]	; (8001254 <INA219Read_ShuntV+0x6c>)
 8001216:	885a      	ldrh	r2, [r3, #2]
 8001218:	4b0e      	ldr	r3, [pc, #56]	; (8001254 <INA219Read_ShuntV+0x6c>)
 800121a:	881b      	ldrh	r3, [r3, #0]
 800121c:	4313      	orrs	r3, r2
 800121e:	b29b      	uxth	r3, r3
 8001220:	81fb      	strh	r3, [r7, #14]
    return rawshunt / 100.0;
 8001222:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff f984 	bl	8000534 <__aeabi_i2d>
 800122c:	f04f 0200 	mov.w	r2, #0
 8001230:	4b0a      	ldr	r3, [pc, #40]	; (800125c <INA219Read_ShuntV+0x74>)
 8001232:	f7ff fb13 	bl	800085c <__aeabi_ddiv>
 8001236:	4602      	mov	r2, r0
 8001238:	460b      	mov	r3, r1
 800123a:	4610      	mov	r0, r2
 800123c:	4619      	mov	r1, r3
 800123e:	f7ff fcdb 	bl	8000bf8 <__aeabi_d2f>
 8001242:	4603      	mov	r3, r0
 8001244:	ee07 3a90 	vmov	s15, r3
//    	return rawshunt / 100.0;
//    }else{
//    	// if 2's complements
//    	return (~rawshunt + 1) / 100.0;
//    }
}
 8001248:	eeb0 0a67 	vmov.f32	s0, s15
 800124c:	3710      	adds	r7, #16
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	20000214 	.word	0x20000214
 8001258:	20000215 	.word	0x20000215
 800125c:	40590000 	.word	0x40590000

08001260 <INA219Read_Power>:

float INA219Read_Power(I2C_HandleTypeDef *hi2c,uint8_t dv_addr){
 8001260:	b5b0      	push	{r4, r5, r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af04      	add	r7, sp, #16
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	460b      	mov	r3, r1
 800126a:	70fb      	strb	r3, [r7, #3]
	 * @param : hi2c - HAL_I2C used to read
	 * @param : dv_addr - address of INA219 device in the busline
	 * @Retval: Power in mW
	 * @ex.
	 * */
	INACBffr.D32 = 0; //// buffer clear
 800126c:	4b1e      	ldr	r3, [pc, #120]	; (80012e8 <INA219Read_Power+0x88>)
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]
	HAL_I2C_Mem_Read(hi2c, dv_addr, INA219_RG_PoWer, I2C_MEMADD_SIZE_8BIT, &INACBffr.D8[1], 2, 10);
 8001272:	78fb      	ldrb	r3, [r7, #3]
 8001274:	b299      	uxth	r1, r3
 8001276:	230a      	movs	r3, #10
 8001278:	9302      	str	r3, [sp, #8]
 800127a:	2302      	movs	r3, #2
 800127c:	9301      	str	r3, [sp, #4]
 800127e:	4b1b      	ldr	r3, [pc, #108]	; (80012ec <INA219Read_Power+0x8c>)
 8001280:	9300      	str	r3, [sp, #0]
 8001282:	2301      	movs	r3, #1
 8001284:	2203      	movs	r2, #3
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f003 fc4e 	bl	8004b28 <HAL_I2C_Mem_Read>
	////  * 20, power_LSB = 20 x current_LSB & x 1000 make unit in mW
	return ((INACBffr.D16[1] | INACBffr.D16[0]) * (20000.0 * current_LSB));
 800128c:	4b16      	ldr	r3, [pc, #88]	; (80012e8 <INA219Read_Power+0x88>)
 800128e:	885a      	ldrh	r2, [r3, #2]
 8001290:	4b15      	ldr	r3, [pc, #84]	; (80012e8 <INA219Read_Power+0x88>)
 8001292:	881b      	ldrh	r3, [r3, #0]
 8001294:	4313      	orrs	r3, r2
 8001296:	b29b      	uxth	r3, r3
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff f94b 	bl	8000534 <__aeabi_i2d>
 800129e:	4604      	mov	r4, r0
 80012a0:	460d      	mov	r5, r1
 80012a2:	4b13      	ldr	r3, [pc, #76]	; (80012f0 <INA219Read_Power+0x90>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff f956 	bl	8000558 <__aeabi_f2d>
 80012ac:	a30c      	add	r3, pc, #48	; (adr r3, 80012e0 <INA219Read_Power+0x80>)
 80012ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b2:	f7ff f9a9 	bl	8000608 <__aeabi_dmul>
 80012b6:	4602      	mov	r2, r0
 80012b8:	460b      	mov	r3, r1
 80012ba:	4620      	mov	r0, r4
 80012bc:	4629      	mov	r1, r5
 80012be:	f7ff f9a3 	bl	8000608 <__aeabi_dmul>
 80012c2:	4602      	mov	r2, r0
 80012c4:	460b      	mov	r3, r1
 80012c6:	4610      	mov	r0, r2
 80012c8:	4619      	mov	r1, r3
 80012ca:	f7ff fc95 	bl	8000bf8 <__aeabi_d2f>
 80012ce:	4603      	mov	r3, r0
 80012d0:	ee07 3a90 	vmov	s15, r3
}
 80012d4:	eeb0 0a67 	vmov.f32	s0, s15
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bdb0      	pop	{r4, r5, r7, pc}
 80012de:	bf00      	nop
 80012e0:	00000000 	.word	0x00000000
 80012e4:	40d38800 	.word	0x40d38800
 80012e8:	20000214 	.word	0x20000214
 80012ec:	20000215 	.word	0x20000215
 80012f0:	20000000 	.word	0x20000000

080012f4 <MCP3208_READ_8_DataSPI>:
/* Read using SPI 8 Bit Data size MSB first
 * Ex.
 * AA_bitread = MCP3208_READ_8_DataSPI(&hspi3, M8_CH0);
	VADC_cv =  MCP3208_ADCbit_to_Volt(AA_bitread); // 5 / 4096 * 0.00122
 * */
uint16_t MCP3208_READ_8_DataSPI(SPI_HandleTypeDef *hspi, MCP3208CHSelect M8_channel){
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b086      	sub	sp, #24
 80012f8:	af02      	add	r7, sp, #8
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	460b      	mov	r3, r1
 80012fe:	70fb      	strb	r3, [r7, #3]

	//// Shitty bitshift to the correct position Fig 6-1, MCP3208, MICROCHIP
	uint8_t D8_MOSI[3];
	uint8_t D8_MISO[3];
	D8_MOSI[0] = M8_channel >> 2;
 8001300:	78fb      	ldrb	r3, [r7, #3]
 8001302:	089b      	lsrs	r3, r3, #2
 8001304:	b2db      	uxtb	r3, r3
 8001306:	733b      	strb	r3, [r7, #12]
	D8_MOSI[1] = M8_channel << 6;
 8001308:	78fb      	ldrb	r3, [r7, #3]
 800130a:	019b      	lsls	r3, r3, #6
 800130c:	b2db      	uxtb	r3, r3
 800130e:	737b      	strb	r3, [r7, #13]


	HAL_GPIO_WritePin(MCP3208_SPI_CS_Port,MCP3208_SPI_CS_Pin , GPIO_PIN_RESET);
 8001310:	2200      	movs	r2, #0
 8001312:	2104      	movs	r1, #4
 8001314:	4810      	ldr	r0, [pc, #64]	; (8001358 <MCP3208_READ_8_DataSPI+0x64>)
 8001316:	f003 f97d 	bl	8004614 <HAL_GPIO_WritePin>

	HAL_SPI_TransmitReceive(hspi, &D8_MOSI[0], &D8_MISO[0], 3, 100);
 800131a:	f107 0208 	add.w	r2, r7, #8
 800131e:	f107 010c 	add.w	r1, r7, #12
 8001322:	2364      	movs	r3, #100	; 0x64
 8001324:	9300      	str	r3, [sp, #0]
 8001326:	2303      	movs	r3, #3
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f006 fb7a 	bl	8007a22 <HAL_SPI_TransmitReceive>

	//HAL_SPI_Abort(hspi);
	HAL_GPIO_WritePin(MCP3208_SPI_CS_Port,MCP3208_SPI_CS_Pin , GPIO_PIN_SET);
 800132e:	2201      	movs	r2, #1
 8001330:	2104      	movs	r1, #4
 8001332:	4809      	ldr	r0, [pc, #36]	; (8001358 <MCP3208_READ_8_DataSPI+0x64>)
 8001334:	f003 f96e 	bl	8004614 <HAL_GPIO_WritePin>

	return ((D8_MISO[1] << 8) + D8_MISO[2]) & 0x0FFF;
 8001338:	7a7b      	ldrb	r3, [r7, #9]
 800133a:	b29b      	uxth	r3, r3
 800133c:	021b      	lsls	r3, r3, #8
 800133e:	b29a      	uxth	r2, r3
 8001340:	7abb      	ldrb	r3, [r7, #10]
 8001342:	b29b      	uxth	r3, r3
 8001344:	4413      	add	r3, r2
 8001346:	b29b      	uxth	r3, r3
 8001348:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800134c:	b29b      	uxth	r3, r3
}
 800134e:	4618      	mov	r0, r3
 8001350:	3710      	adds	r7, #16
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	40020c00 	.word	0x40020c00
 800135c:	00000000 	.word	0x00000000

08001360 <MCP320x_ADCbit_to_Volt>:


float MCP320x_ADCbit_to_Volt(uint16_t adcbit){
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	4603      	mov	r3, r0
 8001368:	80fb      	strh	r3, [r7, #6]
	return adcbit * 0.00122; // 5/4096
 800136a:	88fb      	ldrh	r3, [r7, #6]
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff f8e1 	bl	8000534 <__aeabi_i2d>
 8001372:	a309      	add	r3, pc, #36	; (adr r3, 8001398 <MCP320x_ADCbit_to_Volt+0x38>)
 8001374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001378:	f7ff f946 	bl	8000608 <__aeabi_dmul>
 800137c:	4602      	mov	r2, r0
 800137e:	460b      	mov	r3, r1
 8001380:	4610      	mov	r0, r2
 8001382:	4619      	mov	r1, r3
 8001384:	f7ff fc38 	bl	8000bf8 <__aeabi_d2f>
 8001388:	4603      	mov	r3, r0
 800138a:	ee07 3a90 	vmov	s15, r3
}
 800138e:	eeb0 0a67 	vmov.f32	s0, s15
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	0678c005 	.word	0x0678c005
 800139c:	3f53fd0d 	.word	0x3f53fd0d

080013a0 <Rx_Verita_engine>:
  */


static enum {init, unpack, decode}verita_engine;

VRTPTC_StatusTypedef Rx_Verita_engine(uint8_t *Rxbffr, uint32_t *regisk){
 80013a0:	b490      	push	{r4, r7}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	6039      	str	r1, [r7, #0]
	 * @param Rxbffr - input uart buffer
	 * @param regisk - register need the result be stored
	 */
	static uint8_t logger[12] = {0}; /// log Rxbffr without head packet
	static uint8_t index = 0; // use in case the start of verita is not at Rxbffr[0]
	uint8_t chksum[2]  = {0};
 80013aa:	2300      	movs	r3, #0
 80013ac:	81bb      	strh	r3, [r7, #12]
		uint8_t  U8[4];
		uint32_t U32;
	}logu;


	switch (verita_engine){
 80013ae:	4b6f      	ldr	r3, [pc, #444]	; (800156c <Rx_Verita_engine+0x1cc>)
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	2b01      	cmp	r3, #1
 80013b4:	d023      	beq.n	80013fe <Rx_Verita_engine+0x5e>
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	f000 8082 	beq.w	80014c0 <Rx_Verita_engine+0x120>
	default:
	case init:

		if(Rxbffr[0 + index] == 0x56){ //flag_vrt_en ||
 80013bc:	4b6c      	ldr	r3, [pc, #432]	; (8001570 <Rx_Verita_engine+0x1d0>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	461a      	mov	r2, r3
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4413      	add	r3, r2
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	2b56      	cmp	r3, #86	; 0x56
 80013ca:	d103      	bne.n	80013d4 <Rx_Verita_engine+0x34>
			verita_engine = unpack;
 80013cc:	4b67      	ldr	r3, [pc, #412]	; (800156c <Rx_Verita_engine+0x1cc>)
 80013ce:	2201      	movs	r2, #1
 80013d0:	701a      	strb	r2, [r3, #0]
		}else{
		//// go to next index if head not found
		index+=9;
		index %= RxbufferSize_VRT; // overflow
		}
		break; //// init
 80013d2:	e0c4      	b.n	800155e <Rx_Verita_engine+0x1be>
		index+=9;
 80013d4:	4b66      	ldr	r3, [pc, #408]	; (8001570 <Rx_Verita_engine+0x1d0>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	3309      	adds	r3, #9
 80013da:	b2da      	uxtb	r2, r3
 80013dc:	4b64      	ldr	r3, [pc, #400]	; (8001570 <Rx_Verita_engine+0x1d0>)
 80013de:	701a      	strb	r2, [r3, #0]
		index %= RxbufferSize_VRT; // overflow
 80013e0:	4b63      	ldr	r3, [pc, #396]	; (8001570 <Rx_Verita_engine+0x1d0>)
 80013e2:	781a      	ldrb	r2, [r3, #0]
 80013e4:	4b63      	ldr	r3, [pc, #396]	; (8001574 <Rx_Verita_engine+0x1d4>)
 80013e6:	fba3 1302 	umull	r1, r3, r3, r2
 80013ea:	08d9      	lsrs	r1, r3, #3
 80013ec:	460b      	mov	r3, r1
 80013ee:	00db      	lsls	r3, r3, #3
 80013f0:	440b      	add	r3, r1
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	b2da      	uxtb	r2, r3
 80013f8:	4b5d      	ldr	r3, [pc, #372]	; (8001570 <Rx_Verita_engine+0x1d0>)
 80013fa:	701a      	strb	r2, [r3, #0]
		break; //// init
 80013fc:	e0af      	b.n	800155e <Rx_Verita_engine+0x1be>


	case unpack:

		//// [] Header Check ------------------------------------------------------------------
		if(Rxbffr[index + 0] == 0x56 && Rxbffr[index + 1] == 0x52 && Rxbffr[index + 2] == 0x54){
 80013fe:	4b5c      	ldr	r3, [pc, #368]	; (8001570 <Rx_Verita_engine+0x1d0>)
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	461a      	mov	r2, r3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	4413      	add	r3, r2
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	2b56      	cmp	r3, #86	; 0x56
 800140c:	d13f      	bne.n	800148e <Rx_Verita_engine+0xee>
 800140e:	4b58      	ldr	r3, [pc, #352]	; (8001570 <Rx_Verita_engine+0x1d0>)
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	3301      	adds	r3, #1
 8001414:	687a      	ldr	r2, [r7, #4]
 8001416:	4413      	add	r3, r2
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	2b52      	cmp	r3, #82	; 0x52
 800141c:	d137      	bne.n	800148e <Rx_Verita_engine+0xee>
 800141e:	4b54      	ldr	r3, [pc, #336]	; (8001570 <Rx_Verita_engine+0x1d0>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	3302      	adds	r3, #2
 8001424:	687a      	ldr	r2, [r7, #4]
 8001426:	4413      	add	r3, r2
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	2b54      	cmp	r3, #84	; 0x54
 800142c:	d12f      	bne.n	800148e <Rx_Verita_engine+0xee>

			//// log data first / prevent overwrite
			for(register int k = 0; k < 7; k++){
 800142e:	2400      	movs	r4, #0
 8001430:	e009      	b.n	8001446 <Rx_Verita_engine+0xa6>
				logger[k] = Rxbffr[index + k + 3];
 8001432:	4b4f      	ldr	r3, [pc, #316]	; (8001570 <Rx_Verita_engine+0x1d0>)
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	4423      	add	r3, r4
 8001438:	3303      	adds	r3, #3
 800143a:	687a      	ldr	r2, [r7, #4]
 800143c:	4413      	add	r3, r2
 800143e:	781a      	ldrb	r2, [r3, #0]
 8001440:	4b4d      	ldr	r3, [pc, #308]	; (8001578 <Rx_Verita_engine+0x1d8>)
 8001442:	551a      	strb	r2, [r3, r4]
			for(register int k = 0; k < 7; k++){
 8001444:	3401      	adds	r4, #1
 8001446:	2c06      	cmp	r4, #6
 8001448:	ddf3      	ble.n	8001432 <Rx_Verita_engine+0x92>
			}

			//// checksum here
			for(register int i = 0;i < 5; i++){
 800144a:	2400      	movs	r4, #0
 800144c:	e006      	b.n	800145c <Rx_Verita_engine+0xbc>
				chksum[0] += logger[i];
 800144e:	7b3a      	ldrb	r2, [r7, #12]
 8001450:	4b49      	ldr	r3, [pc, #292]	; (8001578 <Rx_Verita_engine+0x1d8>)
 8001452:	5d1b      	ldrb	r3, [r3, r4]
 8001454:	4413      	add	r3, r2
 8001456:	b2db      	uxtb	r3, r3
 8001458:	733b      	strb	r3, [r7, #12]
			for(register int i = 0;i < 5; i++){
 800145a:	3401      	adds	r4, #1
 800145c:	2c04      	cmp	r4, #4
 800145e:	ddf6      	ble.n	800144e <Rx_Verita_engine+0xae>
			}
			chksum[1] = ~chksum[0];
 8001460:	7b3b      	ldrb	r3, [r7, #12]
 8001462:	43db      	mvns	r3, r3
 8001464:	b2db      	uxtb	r3, r3
 8001466:	737b      	strb	r3, [r7, #13]
			if( chksum[1] == logger[5]){
 8001468:	7b7a      	ldrb	r2, [r7, #13]
 800146a:	4b43      	ldr	r3, [pc, #268]	; (8001578 <Rx_Verita_engine+0x1d8>)
 800146c:	795b      	ldrb	r3, [r3, #5]
 800146e:	429a      	cmp	r2, r3
 8001470:	d10b      	bne.n	800148a <Rx_Verita_engine+0xea>
				// pass
				//// mark that this data is already read
				Rxbffr[0 + index] = 0xFF;
 8001472:	4b3f      	ldr	r3, [pc, #252]	; (8001570 <Rx_Verita_engine+0x1d0>)
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	461a      	mov	r2, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	4413      	add	r3, r2
 800147c:	22ff      	movs	r2, #255	; 0xff
 800147e:	701a      	strb	r2, [r3, #0]
				verita_engine = decode;
 8001480:	4b3a      	ldr	r3, [pc, #232]	; (800156c <Rx_Verita_engine+0x1cc>)
 8001482:	2202      	movs	r2, #2
 8001484:	701a      	strb	r2, [r3, #0]
			if( chksum[1] == logger[5]){
 8001486:	bf00      	nop
//				Rxbffr[i] = 0x00;
//			}
			return VRT_UnEnc;

		}
		break; //// unpack
 8001488:	e069      	b.n	800155e <Rx_Verita_engine+0x1be>
				return VRT_DataLoss;}
 800148a:	2395      	movs	r3, #149	; 0x95
 800148c:	e068      	b.n	8001560 <Rx_Verita_engine+0x1c0>
			verita_engine = init;
 800148e:	4b37      	ldr	r3, [pc, #220]	; (800156c <Rx_Verita_engine+0x1cc>)
 8001490:	2200      	movs	r2, #0
 8001492:	701a      	strb	r2, [r3, #0]
			index += Framesize_VRT; // 9
 8001494:	4b36      	ldr	r3, [pc, #216]	; (8001570 <Rx_Verita_engine+0x1d0>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	3309      	adds	r3, #9
 800149a:	b2da      	uxtb	r2, r3
 800149c:	4b34      	ldr	r3, [pc, #208]	; (8001570 <Rx_Verita_engine+0x1d0>)
 800149e:	701a      	strb	r2, [r3, #0]
			index %= RxbufferSize_VRT; // overflow
 80014a0:	4b33      	ldr	r3, [pc, #204]	; (8001570 <Rx_Verita_engine+0x1d0>)
 80014a2:	781a      	ldrb	r2, [r3, #0]
 80014a4:	4b33      	ldr	r3, [pc, #204]	; (8001574 <Rx_Verita_engine+0x1d4>)
 80014a6:	fba3 1302 	umull	r1, r3, r3, r2
 80014aa:	08d9      	lsrs	r1, r3, #3
 80014ac:	460b      	mov	r3, r1
 80014ae:	00db      	lsls	r3, r3, #3
 80014b0:	440b      	add	r3, r1
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	b2da      	uxtb	r2, r3
 80014b8:	4b2d      	ldr	r3, [pc, #180]	; (8001570 <Rx_Verita_engine+0x1d0>)
 80014ba:	701a      	strb	r2, [r3, #0]
			return VRT_UnEnc;
 80014bc:	2396      	movs	r3, #150	; 0x96
 80014be:	e04f      	b.n	8001560 <Rx_Verita_engine+0x1c0>

	case decode:
		verita_engine = init;
 80014c0:	4b2a      	ldr	r3, [pc, #168]	; (800156c <Rx_Verita_engine+0x1cc>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	701a      	strb	r2, [r3, #0]
		index += Framesize_VRT;
 80014c6:	4b2a      	ldr	r3, [pc, #168]	; (8001570 <Rx_Verita_engine+0x1d0>)
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	3309      	adds	r3, #9
 80014cc:	b2da      	uxtb	r2, r3
 80014ce:	4b28      	ldr	r3, [pc, #160]	; (8001570 <Rx_Verita_engine+0x1d0>)
 80014d0:	701a      	strb	r2, [r3, #0]
		index %= RxbufferSize_VRT; // overflow
 80014d2:	4b27      	ldr	r3, [pc, #156]	; (8001570 <Rx_Verita_engine+0x1d0>)
 80014d4:	781a      	ldrb	r2, [r3, #0]
 80014d6:	4b27      	ldr	r3, [pc, #156]	; (8001574 <Rx_Verita_engine+0x1d4>)
 80014d8:	fba3 1302 	umull	r1, r3, r3, r2
 80014dc:	08d9      	lsrs	r1, r3, #3
 80014de:	460b      	mov	r3, r1
 80014e0:	00db      	lsls	r3, r3, #3
 80014e2:	440b      	add	r3, r1
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	1ad3      	subs	r3, r2, r3
 80014e8:	b2da      	uxtb	r2, r3
 80014ea:	4b21      	ldr	r3, [pc, #132]	; (8001570 <Rx_Verita_engine+0x1d0>)
 80014ec:	701a      	strb	r2, [r3, #0]

		//// DATA phase, insert 32bit data into register box =================================
		if(logger[0] <= 0x20){
 80014ee:	4b22      	ldr	r3, [pc, #136]	; (8001578 <Rx_Verita_engine+0x1d8>)
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	2b20      	cmp	r3, #32
 80014f4:	d814      	bhi.n	8001520 <Rx_Verita_engine+0x180>
			logu.U8[2] = logger[2];
			logu.U8[1] = logger[3];
			logu.U8[0] = logger[4];
#else
			//// Little endian
			logu.U8[0] = logger[1];
 80014f6:	4b20      	ldr	r3, [pc, #128]	; (8001578 <Rx_Verita_engine+0x1d8>)
 80014f8:	785b      	ldrb	r3, [r3, #1]
 80014fa:	723b      	strb	r3, [r7, #8]
			logu.U8[1] = logger[2];
 80014fc:	4b1e      	ldr	r3, [pc, #120]	; (8001578 <Rx_Verita_engine+0x1d8>)
 80014fe:	789b      	ldrb	r3, [r3, #2]
 8001500:	727b      	strb	r3, [r7, #9]
			logu.U8[2] = logger[3];
 8001502:	4b1d      	ldr	r3, [pc, #116]	; (8001578 <Rx_Verita_engine+0x1d8>)
 8001504:	78db      	ldrb	r3, [r3, #3]
 8001506:	72bb      	strb	r3, [r7, #10]
			logu.U8[3] = logger[4];
 8001508:	4b1b      	ldr	r3, [pc, #108]	; (8001578 <Rx_Verita_engine+0x1d8>)
 800150a:	791b      	ldrb	r3, [r3, #4]
 800150c:	72fb      	strb	r3, [r7, #11]
#endif
			// place data into the request register
			regisk[logger[0]] = logu.U32;
 800150e:	4b1a      	ldr	r3, [pc, #104]	; (8001578 <Rx_Verita_engine+0x1d8>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	683a      	ldr	r2, [r7, #0]
 8001516:	4413      	add	r3, r2
 8001518:	68ba      	ldr	r2, [r7, #8]
 800151a:	601a      	str	r2, [r3, #0]


			return VRT_OK;
 800151c:	2391      	movs	r3, #145	; 0x91
 800151e:	e01f      	b.n	8001560 <Rx_Verita_engine+0x1c0>
		} //// -------------------------------------------------------------------------------

		//// CMD phase, return recieved Command =========================================
		if(logger[0] >= 0x90){
 8001520:	4b15      	ldr	r3, [pc, #84]	; (8001578 <Rx_Verita_engine+0x1d8>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	2b8f      	cmp	r3, #143	; 0x8f
 8001526:	d919      	bls.n	800155c <Rx_Verita_engine+0x1bc>
			switch(logger[0]){
 8001528:	4b13      	ldr	r3, [pc, #76]	; (8001578 <Rx_Verita_engine+0x1d8>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	3b91      	subs	r3, #145	; 0x91
 800152e:	2b03      	cmp	r3, #3
 8001530:	d80a      	bhi.n	8001548 <Rx_Verita_engine+0x1a8>
 8001532:	a201      	add	r2, pc, #4	; (adr r2, 8001538 <Rx_Verita_engine+0x198>)
 8001534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001538:	0800154d 	.word	0x0800154d
 800153c:	08001551 	.word	0x08001551
 8001540:	08001555 	.word	0x08001555
 8001544:	08001559 	.word	0x08001559
				default:
				case 0x90:
					return VRT_ERROR;
 8001548:	2390      	movs	r3, #144	; 0x90
 800154a:	e009      	b.n	8001560 <Rx_Verita_engine+0x1c0>
				case 0x91:
					return VRT_OK;
 800154c:	2391      	movs	r3, #145	; 0x91
 800154e:	e007      	b.n	8001560 <Rx_Verita_engine+0x1c0>
				case 0x92:
					return VRT_Busy;
 8001550:	2392      	movs	r3, #146	; 0x92
 8001552:	e005      	b.n	8001560 <Rx_Verita_engine+0x1c0>
				case 0x93:
					return VRT_Regain;
 8001554:	2393      	movs	r3, #147	; 0x93
 8001556:	e003      	b.n	8001560 <Rx_Verita_engine+0x1c0>
				case 0x94:
					return VRT_Next;
 8001558:	2394      	movs	r3, #148	; 0x94
 800155a:	e001      	b.n	8001560 <Rx_Verita_engine+0x1c0>
			}
		}

		//// -------------------------------------------------------------------------------

		break; // decode
 800155c:	bf00      	nop
	} // end switch
	return VRT_ERROR;
 800155e:	2390      	movs	r3, #144	; 0x90
}
 8001560:	4618      	mov	r0, r3
 8001562:	3710      	adds	r7, #16
 8001564:	46bd      	mov	sp, r7
 8001566:	bc90      	pop	{r4, r7}
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	2000021a 	.word	0x2000021a
 8001570:	2000021b 	.word	0x2000021b
 8001574:	38e38e39 	.word	0x38e38e39
 8001578:	2000021c 	.word	0x2000021c

0800157c <BL_UART_Start>:
 *  BL_UART_Readout_UnProtect(UART_HandleTypeDef *huart);
 *  BL_UART_Write_Protect(UART_HandleTypeDef *huart);
 *  BL_UART_Write_UnProtect(UART_HandleTypeDef *huart);
 * */

void BL_UART_Start(UART_HandleTypeDef *huart){
 800157c:	b580      	push	{r7, lr}
 800157e:	b084      	sub	sp, #16
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]

	uint8_t UARTBL_Start = 0x7F;
 8001584:	237f      	movs	r3, #127	; 0x7f
 8001586:	73fb      	strb	r3, [r7, #15]
	//// step 1: Push BOOT0 -> HIGH
	HAL_GPIO_WritePin(BOOT0_Trigger_GPIO_PORT, BOOT0_Trigger_GPIO_PIN, GPIO_PIN_SET);
 8001588:	2201      	movs	r2, #1
 800158a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800158e:	4811      	ldr	r0, [pc, #68]	; (80015d4 <BL_UART_Start+0x58>)
 8001590:	f003 f840 	bl	8004614 <HAL_GPIO_WritePin>

	//// step 2: Reset Client, push SET NMOS
	HAL_GPIO_WritePin(Client_NRST_Trg_GPIO_PORT, Client_NRST_Trg_GPIO_PIN, GPIO_PIN_SET);
 8001594:	2201      	movs	r2, #1
 8001596:	2140      	movs	r1, #64	; 0x40
 8001598:	480f      	ldr	r0, [pc, #60]	; (80015d8 <BL_UART_Start+0x5c>)
 800159a:	f003 f83b 	bl	8004614 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 800159e:	2014      	movs	r0, #20
 80015a0:	f002 f96e 	bl	8003880 <HAL_Delay>
	HAL_GPIO_WritePin(Client_NRST_Trg_GPIO_PORT, Client_NRST_Trg_GPIO_PIN, GPIO_PIN_RESET);
 80015a4:	2200      	movs	r2, #0
 80015a6:	2140      	movs	r1, #64	; 0x40
 80015a8:	480b      	ldr	r0, [pc, #44]	; (80015d8 <BL_UART_Start+0x5c>)
 80015aa:	f003 f833 	bl	8004614 <HAL_GPIO_WritePin>
	//// step 3: wait bootloader startup for 74.5ms ++
	HAL_Delay(85); // 80 is not enough
 80015ae:	2055      	movs	r0, #85	; 0x55
 80015b0:	f002 f966 	bl	8003880 <HAL_Delay>

	//// send 0x7F
	HAL_UART_Transmit(huart, &UARTBL_Start, 1, 10);
 80015b4:	f107 010f 	add.w	r1, r7, #15
 80015b8:	230a      	movs	r3, #10
 80015ba:	2201      	movs	r2, #1
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f006 ff90 	bl	80084e2 <HAL_UART_Transmit>
	BL_UART_wait_ACK(huart, 20);
 80015c2:	2114      	movs	r1, #20
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	f000 f999 	bl	80018fc <BL_UART_wait_ACK>

}
 80015ca:	bf00      	nop
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	40020000 	.word	0x40020000
 80015d8:	40020800 	.word	0x40020800

080015dc <BL_UART_Finish>:

void BL_UART_Finish(){
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0

	//// reserve, pending for any operation that might be unfinished
	HAL_Delay(100);
 80015e0:	2064      	movs	r0, #100	; 0x64
 80015e2:	f002 f94d 	bl	8003880 <HAL_Delay>
	//// pull BOOT0 back
	HAL_GPIO_WritePin(BOOT0_Trigger_GPIO_PORT, BOOT0_Trigger_GPIO_PIN, GPIO_PIN_RESET);
 80015e6:	2200      	movs	r2, #0
 80015e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015ec:	4808      	ldr	r0, [pc, #32]	; (8001610 <BL_UART_Finish+0x34>)
 80015ee:	f003 f811 	bl	8004614 <HAL_GPIO_WritePin>

	//// step 2: Reset Client, push SET NMOS
	HAL_GPIO_WritePin(Client_NRST_Trg_GPIO_PORT, Client_NRST_Trg_GPIO_PIN, GPIO_PIN_SET);
 80015f2:	2201      	movs	r2, #1
 80015f4:	2140      	movs	r1, #64	; 0x40
 80015f6:	4807      	ldr	r0, [pc, #28]	; (8001614 <BL_UART_Finish+0x38>)
 80015f8:	f003 f80c 	bl	8004614 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80015fc:	2014      	movs	r0, #20
 80015fe:	f002 f93f 	bl	8003880 <HAL_Delay>
	HAL_GPIO_WritePin(Client_NRST_Trg_GPIO_PORT, Client_NRST_Trg_GPIO_PIN, GPIO_PIN_RESET);
 8001602:	2200      	movs	r2, #0
 8001604:	2140      	movs	r1, #64	; 0x40
 8001606:	4803      	ldr	r0, [pc, #12]	; (8001614 <BL_UART_Finish+0x38>)
 8001608:	f003 f804 	bl	8004614 <HAL_GPIO_WritePin>
}
 800160c:	bf00      	nop
 800160e:	bd80      	pop	{r7, pc}
 8001610:	40020000 	.word	0x40020000
 8001614:	40020800 	.word	0x40020800

08001618 <BL_UART_WriteMem>:
	}else{return UB_NACK;}

	return UB_NACK;
}

UARTBootloader_state BL_UART_WriteMem(UART_HandleTypeDef *huart,uint32_t addr32, uint8_t numbyte,const uint8_t *wdatum){
 8001618:	b590      	push	{r4, r7, lr}
 800161a:	b0cb      	sub	sp, #300	; 0x12c
 800161c:	af00      	add	r7, sp, #0
 800161e:	f507 7494 	add.w	r4, r7, #296	; 0x128
 8001622:	f5a4 748e 	sub.w	r4, r4, #284	; 0x11c
 8001626:	6020      	str	r0, [r4, #0]
 8001628:	f507 7094 	add.w	r0, r7, #296	; 0x128
 800162c:	f5a0 7090 	sub.w	r0, r0, #288	; 0x120
 8001630:	6001      	str	r1, [r0, #0]
 8001632:	4611      	mov	r1, r2
 8001634:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8001638:	f5a2 7294 	sub.w	r2, r2, #296	; 0x128
 800163c:	6013      	str	r3, [r2, #0]
 800163e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001642:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8001646:	460a      	mov	r2, r1
 8001648:	701a      	strb	r2, [r3, #0]
	 * - receives the user data ((N + 1) bytes) and the checksum (XOR of N and of all data bytes)
	 * - programs the user data to memory starting from the received address
	 * - at the end of the command, if the write operation was successful, the bootloader
	 * 		transmits the ACK byte; otherwise it transmits an NACK byte to the application and aborts the command.
	 * */
	uint8_t Start_WM[2] = {0x31, 0xCE};
 800164a:	f64c 6331 	movw	r3, #52785	; 0xce31
 800164e:	f8a7 3124 	strh.w	r3, [r7, #292]	; 0x124
	uint8_t response = 0;
 8001652:	2300      	movs	r3, #0
 8001654:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
	uint8_t numbytx[2] = {0};
 8001658:	2300      	movs	r3, #0
 800165a:	f8a7 3120 	strh.w	r3, [r7, #288]	; 0x120
	uint8_t addr8[5] = {0};
 800165e:	2300      	movs	r3, #0
 8001660:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8001664:	2300      	movs	r3, #0
 8001666:	f887 311c 	strb.w	r3, [r7, #284]	; 0x11c

	uint8_t bffr[260] = {0};
 800166a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800166e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001672:	2200      	movs	r2, #0
 8001674:	601a      	str	r2, [r3, #0]
 8001676:	3304      	adds	r3, #4
 8001678:	f44f 7280 	mov.w	r2, #256	; 0x100
 800167c:	2100      	movs	r1, #0
 800167e:	4618      	mov	r0, r3
 8001680:	f008 f9b0 	bl	80099e4 <memset>
		uint8_t  U8[4];
		uint32_t U32;
	}loga;

	//// block from do sth in danger zone (option bytes, system memory)
	if(addr32 >= 0x1FFF0000 && addr32 <= 0x1FFFFFFF){
 8001684:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001688:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a77      	ldr	r2, [pc, #476]	; (800186c <BL_UART_WriteMem+0x254>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d909      	bls.n	80016a8 <BL_UART_WriteMem+0x90>
 8001694:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001698:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80016a2:	d201      	bcs.n	80016a8 <BL_UART_WriteMem+0x90>
		return UB_ParamERR;
 80016a4:	23bc      	movs	r3, #188	; 0xbc
 80016a6:	e0dc      	b.n	8001862 <BL_UART_WriteMem+0x24a>
	}

	loga.U32 = addr32;
 80016a8:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80016ac:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80016b0:	f507 7294 	add.w	r2, r7, #296	; 0x128
 80016b4:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 80016b8:	6812      	ldr	r2, [r2, #0]
 80016ba:	601a      	str	r2, [r3, #0]
	//// prepare address byte 3: MSB, byte 6: LSB
	addr8[0] = loga.U8[3];
 80016bc:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80016c0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80016c4:	78db      	ldrb	r3, [r3, #3]
 80016c6:	f887 3118 	strb.w	r3, [r7, #280]	; 0x118
	addr8[1] = loga.U8[2];
 80016ca:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80016ce:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80016d2:	789b      	ldrb	r3, [r3, #2]
 80016d4:	f887 3119 	strb.w	r3, [r7, #281]	; 0x119
	addr8[2] = loga.U8[1];
 80016d8:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80016dc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80016e0:	785b      	ldrb	r3, [r3, #1]
 80016e2:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
	addr8[3] = loga.U8[0];
 80016e6:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80016ea:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b

	//// XOR Chksum addr
	addr8[4] = addr8[0]^addr8[1]^addr8[2]^addr8[3];
 80016f4:	f897 2118 	ldrb.w	r2, [r7, #280]	; 0x118
 80016f8:	f897 3119 	ldrb.w	r3, [r7, #281]	; 0x119
 80016fc:	4053      	eors	r3, r2
 80016fe:	b2da      	uxtb	r2, r3
 8001700:	f897 311a 	ldrb.w	r3, [r7, #282]	; 0x11a
 8001704:	4053      	eors	r3, r2
 8001706:	b2da      	uxtb	r2, r3
 8001708:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 800170c:	4053      	eors	r3, r2
 800170e:	b2db      	uxtb	r3, r3
 8001710:	f887 311c 	strb.w	r3, [r7, #284]	; 0x11c

	//// XOR Chksum  (XOR of N and of all data bytes)
	numbytx[0] = numbyte;
 8001714:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001718:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	f887 3120 	strb.w	r3, [r7, #288]	; 0x120

	bffr[0] = numbyte;
 8001722:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001726:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800172a:	f507 7294 	add.w	r2, r7, #296	; 0x128
 800172e:	f2a2 1221 	subw	r2, r2, #289	; 0x121
 8001732:	7812      	ldrb	r2, [r2, #0]
 8001734:	701a      	strb	r2, [r3, #0]

	numbytx[1] = numbyte;
 8001736:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800173a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	f887 3121 	strb.w	r3, [r7, #289]	; 0x121
	for(register int i = 0;i <= numbyte;i++){
 8001744:	2400      	movs	r4, #0
 8001746:	e01c      	b.n	8001782 <BL_UART_WriteMem+0x16a>
		numbytx[1] = numbytx[1]^wdatum[i];
 8001748:	f897 2121 	ldrb.w	r2, [r7, #289]	; 0x121
 800174c:	4621      	mov	r1, r4
 800174e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001752:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	440b      	add	r3, r1
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	4053      	eors	r3, r2
 800175e:	b2db      	uxtb	r3, r3
 8001760:	f887 3121 	strb.w	r3, [r7, #289]	; 0x121
		//// try
		bffr[i+1] = wdatum[i]; // bffr[i] = wdatum[i];
 8001764:	4622      	mov	r2, r4
 8001766:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800176a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	441a      	add	r2, r3
 8001772:	1c63      	adds	r3, r4, #1
 8001774:	7811      	ldrb	r1, [r2, #0]
 8001776:	f507 7294 	add.w	r2, r7, #296	; 0x128
 800177a:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
 800177e:	54d1      	strb	r1, [r2, r3]
	for(register int i = 0;i <= numbyte;i++){
 8001780:	3401      	adds	r4, #1
 8001782:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001786:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	429c      	cmp	r4, r3
 800178e:	dddb      	ble.n	8001748 <BL_UART_WriteMem+0x130>
	}

	// add chksum to the last buffer,
	bffr[numbyte+2] = numbytx[1];
 8001790:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001794:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	3302      	adds	r3, #2
 800179c:	f897 1121 	ldrb.w	r1, [r7, #289]	; 0x121
 80017a0:	f507 7294 	add.w	r2, r7, #296	; 0x128
 80017a4:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
 80017a8:	54d1      	strb	r1, [r2, r3]

	//// Bytes 1-2
	HAL_UART_Transmit(huart, &Start_WM[0], 2, 10);
 80017aa:	f507 7192 	add.w	r1, r7, #292	; 0x124
 80017ae:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80017b2:	f5a3 708e 	sub.w	r0, r3, #284	; 0x11c
 80017b6:	230a      	movs	r3, #10
 80017b8:	2202      	movs	r2, #2
 80017ba:	6800      	ldr	r0, [r0, #0]
 80017bc:	f006 fe91 	bl	80084e2 <HAL_UART_Transmit>

	response = BL_UART_wait_ACK(huart, 10);
 80017c0:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80017c4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80017c8:	210a      	movs	r1, #10
 80017ca:	6818      	ldr	r0, [r3, #0]
 80017cc:	f000 f896 	bl	80018fc <BL_UART_wait_ACK>
 80017d0:	4603      	mov	r3, r0
 80017d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
	if(response == UB_ACK){
 80017d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80017da:	2b79      	cmp	r3, #121	; 0x79
 80017dc:	d140      	bne.n	8001860 <BL_UART_WriteMem+0x248>

		//// Bytes 3-6 Send ADDR Bytes +
		//// Byte  7 chksum
		HAL_UART_Transmit(huart, &addr8[0], 5, 15);
 80017de:	f507 718c 	add.w	r1, r7, #280	; 0x118
 80017e2:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80017e6:	f5a3 708e 	sub.w	r0, r3, #284	; 0x11c
 80017ea:	230f      	movs	r3, #15
 80017ec:	2205      	movs	r2, #5
 80017ee:	6800      	ldr	r0, [r0, #0]
 80017f0:	f006 fe77 	bl	80084e2 <HAL_UART_Transmit>

		response = BL_UART_wait_ACK(huart, 10);
 80017f4:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80017f8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80017fc:	210a      	movs	r1, #10
 80017fe:	6818      	ldr	r0, [r3, #0]
 8001800:	f000 f87c 	bl	80018fc <BL_UART_wait_ACK>
 8001804:	4603      	mov	r3, r0
 8001806:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
		if(response == UB_ACK){
 800180a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800180e:	2b79      	cmp	r3, #121	; 0x79
 8001810:	d124      	bne.n	800185c <BL_UART_WriteMem+0x244>
//			HAL_UART_Transmit(huart, wdatum, numbyte+1, 100);
//			HAL_UART_Transmit(huart, &numbytx[1], 1, 5); //// chksum

			//// byte 8-n numbyte+ Writedata +chksum
			//HAL_UART_Transmit(huart, &numbytx[0], 1, 5);
			HAL_UART_Transmit(huart, bffr, numbyte+3, 100); //
 8001812:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001816:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	b29b      	uxth	r3, r3
 800181e:	3303      	adds	r3, #3
 8001820:	b29a      	uxth	r2, r3
 8001822:	f107 0114 	add.w	r1, r7, #20
 8001826:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800182a:	f5a3 708e 	sub.w	r0, r3, #284	; 0x11c
 800182e:	2364      	movs	r3, #100	; 0x64
 8001830:	6800      	ldr	r0, [r0, #0]
 8001832:	f006 fe56 	bl	80084e2 <HAL_UART_Transmit>

			response = BL_UART_wait_ACK(huart, 10);
 8001836:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800183a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800183e:	210a      	movs	r1, #10
 8001840:	6818      	ldr	r0, [r3, #0]
 8001842:	f000 f85b 	bl	80018fc <BL_UART_wait_ACK>
 8001846:	4603      	mov	r3, r0
 8001848:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
			if(response == UB_ACK){
 800184c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001850:	2b79      	cmp	r3, #121	; 0x79
 8001852:	d101      	bne.n	8001858 <BL_UART_WriteMem+0x240>
				return UB_ACK;
 8001854:	2379      	movs	r3, #121	; 0x79
 8001856:	e004      	b.n	8001862 <BL_UART_WriteMem+0x24a>
			}else{return UB_NACK;}
 8001858:	231f      	movs	r3, #31
 800185a:	e002      	b.n	8001862 <BL_UART_WriteMem+0x24a>


		}else{return UB_NACK;}
 800185c:	231f      	movs	r3, #31
 800185e:	e000      	b.n	8001862 <BL_UART_WriteMem+0x24a>

	}else{return UB_NACK;}
 8001860:	231f      	movs	r3, #31

	return UB_NACK;
}
 8001862:	4618      	mov	r0, r3
 8001864:	f507 7796 	add.w	r7, r7, #300	; 0x12c
 8001868:	46bd      	mov	sp, r7
 800186a:	bd90      	pop	{r4, r7, pc}
 800186c:	1ffeffff 	.word	0x1ffeffff

08001870 <BL_UART_ExtendEraseMem_SP>:

UARTBootloader_state BL_UART_ExtendEraseMem_SP(UART_HandleTypeDef *huart,UARTBootloader_Erase_CMD erasa){
 8001870:	b580      	push	{r7, lr}
 8001872:	b086      	sub	sp, #24
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	460b      	mov	r3, r1
 800187a:	807b      	strh	r3, [r7, #2]
	 * @param huart   - Pointer to a UART_HandleTypeDef structure that contains
     *                  the configuration information for the specified UART module.
     * @param erasa N number of pages to be erased, Use UARTBootloader_Erase_CMD as special erase
	 *
	 * */
	uint8_t Start_EER[2] = {0x44, 0xBB};
 800187c:	f64b 3344 	movw	r3, #47940	; 0xbb44
 8001880:	82bb      	strh	r3, [r7, #20]
	uint8_t response = 0;
 8001882:	2300      	movs	r3, #0
 8001884:	75fb      	strb	r3, [r7, #23]
	uint8_t cmd[3] = {0};
 8001886:	4b1c      	ldr	r3, [pc, #112]	; (80018f8 <BL_UART_ExtendEraseMem_SP+0x88>)
 8001888:	881b      	ldrh	r3, [r3, #0]
 800188a:	823b      	strh	r3, [r7, #16]
 800188c:	2300      	movs	r3, #0
 800188e:	74bb      	strb	r3, [r7, #18]
	union{
		uint8_t  U8[2];
		uint16_t U16;
	}loga;

	loga.U16 = erasa;
 8001890:	887b      	ldrh	r3, [r7, #2]
 8001892:	81bb      	strh	r3, [r7, #12]

	//// prepare Special erase CMD & Chksum
	cmd[0] = loga.U8[1];
 8001894:	7b7b      	ldrb	r3, [r7, #13]
 8001896:	743b      	strb	r3, [r7, #16]
	cmd[1] = loga.U8[0];
 8001898:	7b3b      	ldrb	r3, [r7, #12]
 800189a:	747b      	strb	r3, [r7, #17]
	cmd[2] = loga.U8[0]^loga.U8[1];
 800189c:	7b3a      	ldrb	r2, [r7, #12]
 800189e:	7b7b      	ldrb	r3, [r7, #13]
 80018a0:	4053      	eors	r3, r2
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	74bb      	strb	r3, [r7, #18]

	//// Bytes 1-2
	HAL_UART_Transmit(huart, &Start_EER[0], 2, 10);
 80018a6:	f107 0114 	add.w	r1, r7, #20
 80018aa:	230a      	movs	r3, #10
 80018ac:	2202      	movs	r2, #2
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f006 fe17 	bl	80084e2 <HAL_UART_Transmit>

	response = BL_UART_wait_ACK(huart, 10);
 80018b4:	210a      	movs	r1, #10
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f000 f820 	bl	80018fc <BL_UART_wait_ACK>
 80018bc:	4603      	mov	r3, r0
 80018be:	75fb      	strb	r3, [r7, #23]
	if(response == UB_ACK){
 80018c0:	7dfb      	ldrb	r3, [r7, #23]
 80018c2:	2b79      	cmp	r3, #121	; 0x79
 80018c4:	d113      	bne.n	80018ee <BL_UART_ExtendEraseMem_SP+0x7e>

		//// Bytes 3-4 Send Special erase +
		//// Byte  5 chksum
		HAL_UART_Transmit(huart, &cmd[0], 3, 15);
 80018c6:	f107 0110 	add.w	r1, r7, #16
 80018ca:	230f      	movs	r3, #15
 80018cc:	2203      	movs	r2, #3
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f006 fe07 	bl	80084e2 <HAL_UART_Transmit>

		response = BL_UART_wait_ACK(huart, 10);
 80018d4:	210a      	movs	r1, #10
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f000 f810 	bl	80018fc <BL_UART_wait_ACK>
 80018dc:	4603      	mov	r3, r0
 80018de:	75fb      	strb	r3, [r7, #23]
		if(response == UB_ACK){
 80018e0:	7dfb      	ldrb	r3, [r7, #23]
 80018e2:	2b79      	cmp	r3, #121	; 0x79
 80018e4:	d101      	bne.n	80018ea <BL_UART_ExtendEraseMem_SP+0x7a>
				return UB_ACK;
 80018e6:	2379      	movs	r3, #121	; 0x79
 80018e8:	e002      	b.n	80018f0 <BL_UART_ExtendEraseMem_SP+0x80>

		}else{return UB_NACK;}
 80018ea:	231f      	movs	r3, #31
 80018ec:	e000      	b.n	80018f0 <BL_UART_ExtendEraseMem_SP+0x80>

	}else{return UB_NACK;}
 80018ee:	231f      	movs	r3, #31

	return UB_NACK;
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3718      	adds	r7, #24
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	0800c8b8 	.word	0x0800c8b8

080018fc <BL_UART_wait_ACK>:
	return BL_UART_wait_ACK(huart, 500);

}


UARTBootloader_state BL_UART_wait_ACK(UART_HandleTypeDef *huart, uint16_t timeout){
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b086      	sub	sp, #24
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	460b      	mov	r3, r1
 8001906:	807b      	strh	r3, [r7, #2]
	uint8_t tick = 1;
 8001908:	2301      	movs	r3, #1
 800190a:	75fb      	strb	r3, [r7, #23]
	uint8_t response = 0;
 800190c:	2300      	movs	r3, #0
 800190e:	73fb      	strb	r3, [r7, #15]
	uint32_t timestick;

	timestick = HAL_GetTick() + timeout;
 8001910:	f001 ffaa 	bl	8003868 <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	887b      	ldrh	r3, [r7, #2]
 8001918:	4413      	add	r3, r2
 800191a:	613b      	str	r3, [r7, #16]

	while(tick){
 800191c:	e018      	b.n	8001950 <BL_UART_wait_ACK+0x54>
		HAL_UART_Receive(huart, &response, 1, 2);
 800191e:	f107 010f 	add.w	r1, r7, #15
 8001922:	2302      	movs	r3, #2
 8001924:	2201      	movs	r2, #1
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	f006 fe6d 	bl	8008606 <HAL_UART_Receive>

		if(response == 0x79){
 800192c:	7bfb      	ldrb	r3, [r7, #15]
 800192e:	2b79      	cmp	r3, #121	; 0x79
 8001930:	d101      	bne.n	8001936 <BL_UART_wait_ACK+0x3a>
			return UB_ACK;
 8001932:	2379      	movs	r3, #121	; 0x79
 8001934:	e010      	b.n	8001958 <BL_UART_wait_ACK+0x5c>
		}else if(response == 0x1F){
 8001936:	7bfb      	ldrb	r3, [r7, #15]
 8001938:	2b1f      	cmp	r3, #31
 800193a:	d101      	bne.n	8001940 <BL_UART_wait_ACK+0x44>
			return UB_NACK;
 800193c:	231f      	movs	r3, #31
 800193e:	e00b      	b.n	8001958 <BL_UART_wait_ACK+0x5c>
		}else{}

		if(HAL_GetTick()>= timestick){
 8001940:	f001 ff92 	bl	8003868 <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	4293      	cmp	r3, r2
 800194a:	d801      	bhi.n	8001950 <BL_UART_wait_ACK+0x54>
			return UB_Timeout;
 800194c:	23ab      	movs	r3, #171	; 0xab
 800194e:	e003      	b.n	8001958 <BL_UART_wait_ACK+0x5c>
	while(tick){
 8001950:	7dfb      	ldrb	r3, [r7, #23]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d1e3      	bne.n	800191e <BL_UART_wait_ACK+0x22>
		}
	}
	return UB_NACK;
 8001956:	231f      	movs	r3, #31
}
 8001958:	4618      	mov	r0, r3
 800195a:	3718      	adds	r7, #24
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}

08001960 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001960:	b5b0      	push	{r4, r5, r7, lr}
 8001962:	b092      	sub	sp, #72	; 0x48
 8001964:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001966:	f001 ff19 	bl	800379c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800196a:	f000 f88f 	bl	8001a8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800196e:	f000 fa1d 	bl	8001dac <MX_GPIO_Init>
  MX_DMA_Init();
 8001972:	f000 f9fb 	bl	8001d6c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001976:	f000 f9a5 	bl	8001cc4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800197a:	f000 f8ef 	bl	8001b5c <MX_I2C1_Init>
  MX_USART6_UART_Init();
 800197e:	f000 f9cb 	bl	8001d18 <MX_USART6_UART_Init>
  MX_SPI3_Init();
 8001982:	f000 f919 	bl	8001bb8 <MX_SPI3_Init>
  MX_TIM10_Init();
 8001986:	f000 f94d 	bl	8001c24 <MX_TIM10_Init>
  MX_USART1_UART_Init();
 800198a:	f000 f96f 	bl	8001c6c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim10); // buzzer timer
 800198e:	4835      	ldr	r0, [pc, #212]	; (8001a64 <main+0x104>)
 8001990:	f006 fb04 	bl	8007f9c <HAL_TIM_Base_Start_IT>

  ili9341_Init();
 8001994:	f001 f8e8 	bl	8002b68 <ili9341_Init>
  ili9341_DisplayOn();
 8001998:	f001 f8ca 	bl	8002b30 <ili9341_DisplayOn>

  ili9341_FillRect(50, 20, 50, 20, cl_RED);
 800199c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80019a0:	9300      	str	r3, [sp, #0]
 80019a2:	2314      	movs	r3, #20
 80019a4:	2232      	movs	r2, #50	; 0x32
 80019a6:	2114      	movs	r1, #20
 80019a8:	2032      	movs	r0, #50	; 0x32
 80019aa:	f001 f9f5 	bl	8002d98 <ili9341_FillRect>
  ili9341_FillRect(100, 20, 50, 20, cl_GREEN);
 80019ae:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80019b2:	9300      	str	r3, [sp, #0]
 80019b4:	2314      	movs	r3, #20
 80019b6:	2232      	movs	r2, #50	; 0x32
 80019b8:	2114      	movs	r1, #20
 80019ba:	2064      	movs	r0, #100	; 0x64
 80019bc:	f001 f9ec 	bl	8002d98 <ili9341_FillRect>
  ili9341_FillRect(150, 20, 50, 20, cl_BLUE);
 80019c0:	231f      	movs	r3, #31
 80019c2:	9300      	str	r3, [sp, #0]
 80019c4:	2314      	movs	r3, #20
 80019c6:	2232      	movs	r2, #50	; 0x32
 80019c8:	2114      	movs	r1, #20
 80019ca:	2096      	movs	r0, #150	; 0x96
 80019cc:	f001 f9e4 	bl	8002d98 <ili9341_FillRect>

#ifdef INA219_Wrk
  INA219_INIT_Calibrate(&hi2c1, INA219_ADDR_1);
 80019d0:	2180      	movs	r1, #128	; 0x80
 80019d2:	4825      	ldr	r0, [pc, #148]	; (8001a68 <main+0x108>)
 80019d4:	f7ff fb0c 	bl	8000ff0 <INA219_INIT_Calibrate>
//
//  INA219_INIT(&hi2c1, INA219_ADDR_1, cofgra);
//  INA219_Calibrate(&hi2c1, INA219_ADDR_1);
#endif

  char temp[]="----------------- F411_Verita_Master --------------------\r\n";
 80019d8:	4b24      	ldr	r3, [pc, #144]	; (8001a6c <main+0x10c>)
 80019da:	1d3c      	adds	r4, r7, #4
 80019dc:	461d      	mov	r5, r3
 80019de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019ea:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80019ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 80019f2:	1d3b      	adds	r3, r7, #4
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7fe fbf3 	bl	80001e0 <strlen>
 80019fa:	4603      	mov	r3, r0
 80019fc:	b29a      	uxth	r2, r3
 80019fe:	1d39      	adds	r1, r7, #4
 8001a00:	230a      	movs	r3, #10
 8001a02:	481b      	ldr	r0, [pc, #108]	; (8001a70 <main+0x110>)
 8001a04:	f006 fd6d 	bl	80084e2 <HAL_UART_Transmit>


////  ------------- UART Recieve --------------------------
  HAL_UART_Receive_DMA(&huart6, &RxBufferMtCl[0], RxbufferSize_VRT);
 8001a08:	2224      	movs	r2, #36	; 0x24
 8001a0a:	491a      	ldr	r1, [pc, #104]	; (8001a74 <main+0x114>)
 8001a0c:	481a      	ldr	r0, [pc, #104]	; (8001a78 <main+0x118>)
 8001a0e:	f006 fe9c 	bl	800874a <HAL_UART_Receive_DMA>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  //// -------- buzzer & Button -----------------
	  Button_machine();
 8001a12:	f000 fbf5 	bl	8002200 <Button_machine>
	  ////  ------------- Verita UART Recieve --------------------------
	  //HAL_UART_Receive_DMA(&huart6, &RxBufferMtCl[0], 9); // Normal DMA
	  //engst = Rx_Verita_engine(RxBufferMtCl, verita_regis);
	  Rx_Verita_engine(RxBufferMtCl, VRB.U32);
 8001a16:	4919      	ldr	r1, [pc, #100]	; (8001a7c <main+0x11c>)
 8001a18:	4816      	ldr	r0, [pc, #88]	; (8001a74 <main+0x114>)
 8001a1a:	f7ff fcc1 	bl	80013a0 <Rx_Verita_engine>
	  //// ----------------------------------------------------


	  if (HAL_GetTick() >= timestamp_buzbtn){
 8001a1e:	f001 ff23 	bl	8003868 <HAL_GetTick>
 8001a22:	4602      	mov	r2, r0
 8001a24:	4b16      	ldr	r3, [pc, #88]	; (8001a80 <main+0x120>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d306      	bcc.n	8001a3a <main+0xda>
		timestamp_buzbtn += 10;
 8001a2c:	4b14      	ldr	r3, [pc, #80]	; (8001a80 <main+0x120>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	330a      	adds	r3, #10
 8001a32:	4a13      	ldr	r2, [pc, #76]	; (8001a80 <main+0x120>)
 8001a34:	6013      	str	r3, [r2, #0]

		running_box();
 8001a36:	f000 faa5 	bl	8001f84 <running_box>
		//buzzer_scream_cnt();
	  }// timestamp_dis


	  if (HAL_GetTick() >= timestamp_one){
 8001a3a:	f001 ff15 	bl	8003868 <HAL_GetTick>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	4b10      	ldr	r3, [pc, #64]	; (8001a84 <main+0x124>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d3e4      	bcc.n	8001a12 <main+0xb2>
		  timestamp_one += 1000;
 8001a48:	4b0e      	ldr	r3, [pc, #56]	; (8001a84 <main+0x124>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001a50:	4a0c      	ldr	r2, [pc, #48]	; (8001a84 <main+0x124>)
 8001a52:	6013      	str	r3, [r2, #0]
		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001a54:	2120      	movs	r1, #32
 8001a56:	480c      	ldr	r0, [pc, #48]	; (8001a88 <main+0x128>)
 8001a58:	f002 fdf5 	bl	8004646 <HAL_GPIO_TogglePin>

		  GrandState_Verita();
 8001a5c:	f000 fc82 	bl	8002364 <GrandState_Verita>
	  Button_machine();
 8001a60:	e7d7      	b.n	8001a12 <main+0xb2>
 8001a62:	bf00      	nop
 8001a64:	200002d4 	.word	0x200002d4
 8001a68:	20000228 	.word	0x20000228
 8001a6c:	0800c8bc 	.word	0x0800c8bc
 8001a70:	20000360 	.word	0x20000360
 8001a74:	200004ac 	.word	0x200004ac
 8001a78:	200003a4 	.word	0x200003a4
 8001a7c:	200004d4 	.word	0x200004d4
 8001a80:	20000570 	.word	0x20000570
 8001a84:	2000056c 	.word	0x2000056c
 8001a88:	40020000 	.word	0x40020000

08001a8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b094      	sub	sp, #80	; 0x50
 8001a90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a92:	f107 0320 	add.w	r3, r7, #32
 8001a96:	2230      	movs	r2, #48	; 0x30
 8001a98:	2100      	movs	r1, #0
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f007 ffa2 	bl	80099e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001aa0:	f107 030c 	add.w	r3, r7, #12
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]
 8001aa8:	605a      	str	r2, [r3, #4]
 8001aaa:	609a      	str	r2, [r3, #8]
 8001aac:	60da      	str	r2, [r3, #12]
 8001aae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	60bb      	str	r3, [r7, #8]
 8001ab4:	4b27      	ldr	r3, [pc, #156]	; (8001b54 <SystemClock_Config+0xc8>)
 8001ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab8:	4a26      	ldr	r2, [pc, #152]	; (8001b54 <SystemClock_Config+0xc8>)
 8001aba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001abe:	6413      	str	r3, [r2, #64]	; 0x40
 8001ac0:	4b24      	ldr	r3, [pc, #144]	; (8001b54 <SystemClock_Config+0xc8>)
 8001ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ac8:	60bb      	str	r3, [r7, #8]
 8001aca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001acc:	2300      	movs	r3, #0
 8001ace:	607b      	str	r3, [r7, #4]
 8001ad0:	4b21      	ldr	r3, [pc, #132]	; (8001b58 <SystemClock_Config+0xcc>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a20      	ldr	r2, [pc, #128]	; (8001b58 <SystemClock_Config+0xcc>)
 8001ad6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ada:	6013      	str	r3, [r2, #0]
 8001adc:	4b1e      	ldr	r3, [pc, #120]	; (8001b58 <SystemClock_Config+0xcc>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001ae4:	607b      	str	r3, [r7, #4]
 8001ae6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ae8:	2302      	movs	r3, #2
 8001aea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001aec:	2301      	movs	r3, #1
 8001aee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001af0:	2310      	movs	r3, #16
 8001af2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001af4:	2302      	movs	r3, #2
 8001af6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001af8:	2300      	movs	r3, #0
 8001afa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001afc:	2308      	movs	r3, #8
 8001afe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001b00:	2364      	movs	r3, #100	; 0x64
 8001b02:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b04:	2302      	movs	r3, #2
 8001b06:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001b08:	2304      	movs	r3, #4
 8001b0a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b0c:	f107 0320 	add.w	r3, r7, #32
 8001b10:	4618      	mov	r0, r3
 8001b12:	f005 fa65 	bl	8006fe0 <HAL_RCC_OscConfig>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001b1c:	f000 fcd8 	bl	80024d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b20:	230f      	movs	r3, #15
 8001b22:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b24:	2302      	movs	r3, #2
 8001b26:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b30:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b32:	2300      	movs	r3, #0
 8001b34:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001b36:	f107 030c 	add.w	r3, r7, #12
 8001b3a:	2103      	movs	r1, #3
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f005 fcc7 	bl	80074d0 <HAL_RCC_ClockConfig>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d001      	beq.n	8001b4c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001b48:	f000 fcc2 	bl	80024d0 <Error_Handler>
  }
}
 8001b4c:	bf00      	nop
 8001b4e:	3750      	adds	r7, #80	; 0x50
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	40023800 	.word	0x40023800
 8001b58:	40007000 	.word	0x40007000

08001b5c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b60:	4b12      	ldr	r3, [pc, #72]	; (8001bac <MX_I2C1_Init+0x50>)
 8001b62:	4a13      	ldr	r2, [pc, #76]	; (8001bb0 <MX_I2C1_Init+0x54>)
 8001b64:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001b66:	4b11      	ldr	r3, [pc, #68]	; (8001bac <MX_I2C1_Init+0x50>)
 8001b68:	4a12      	ldr	r2, [pc, #72]	; (8001bb4 <MX_I2C1_Init+0x58>)
 8001b6a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b6c:	4b0f      	ldr	r3, [pc, #60]	; (8001bac <MX_I2C1_Init+0x50>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b72:	4b0e      	ldr	r3, [pc, #56]	; (8001bac <MX_I2C1_Init+0x50>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b78:	4b0c      	ldr	r3, [pc, #48]	; (8001bac <MX_I2C1_Init+0x50>)
 8001b7a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b7e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b80:	4b0a      	ldr	r3, [pc, #40]	; (8001bac <MX_I2C1_Init+0x50>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b86:	4b09      	ldr	r3, [pc, #36]	; (8001bac <MX_I2C1_Init+0x50>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b8c:	4b07      	ldr	r3, [pc, #28]	; (8001bac <MX_I2C1_Init+0x50>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b92:	4b06      	ldr	r3, [pc, #24]	; (8001bac <MX_I2C1_Init+0x50>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b98:	4804      	ldr	r0, [pc, #16]	; (8001bac <MX_I2C1_Init+0x50>)
 8001b9a:	f002 fd87 	bl	80046ac <HAL_I2C_Init>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001ba4:	f000 fc94 	bl	80024d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ba8:	bf00      	nop
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	20000228 	.word	0x20000228
 8001bb0:	40005400 	.word	0x40005400
 8001bb4:	00061a80 	.word	0x00061a80

08001bb8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001bbc:	4b17      	ldr	r3, [pc, #92]	; (8001c1c <MX_SPI3_Init+0x64>)
 8001bbe:	4a18      	ldr	r2, [pc, #96]	; (8001c20 <MX_SPI3_Init+0x68>)
 8001bc0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001bc2:	4b16      	ldr	r3, [pc, #88]	; (8001c1c <MX_SPI3_Init+0x64>)
 8001bc4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001bc8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001bca:	4b14      	ldr	r3, [pc, #80]	; (8001c1c <MX_SPI3_Init+0x64>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001bd0:	4b12      	ldr	r3, [pc, #72]	; (8001c1c <MX_SPI3_Init+0x64>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bd6:	4b11      	ldr	r3, [pc, #68]	; (8001c1c <MX_SPI3_Init+0x64>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001bdc:	4b0f      	ldr	r3, [pc, #60]	; (8001c1c <MX_SPI3_Init+0x64>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001be2:	4b0e      	ldr	r3, [pc, #56]	; (8001c1c <MX_SPI3_Init+0x64>)
 8001be4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001be8:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001bea:	4b0c      	ldr	r3, [pc, #48]	; (8001c1c <MX_SPI3_Init+0x64>)
 8001bec:	2220      	movs	r2, #32
 8001bee:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001bf0:	4b0a      	ldr	r3, [pc, #40]	; (8001c1c <MX_SPI3_Init+0x64>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001bf6:	4b09      	ldr	r3, [pc, #36]	; (8001c1c <MX_SPI3_Init+0x64>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bfc:	4b07      	ldr	r3, [pc, #28]	; (8001c1c <MX_SPI3_Init+0x64>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001c02:	4b06      	ldr	r3, [pc, #24]	; (8001c1c <MX_SPI3_Init+0x64>)
 8001c04:	220a      	movs	r2, #10
 8001c06:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001c08:	4804      	ldr	r0, [pc, #16]	; (8001c1c <MX_SPI3_Init+0x64>)
 8001c0a:	f005 fe81 	bl	8007910 <HAL_SPI_Init>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001c14:	f000 fc5c 	bl	80024d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001c18:	bf00      	nop
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	2000027c 	.word	0x2000027c
 8001c20:	40003c00 	.word	0x40003c00

08001c24 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001c28:	4b0e      	ldr	r3, [pc, #56]	; (8001c64 <MX_TIM10_Init+0x40>)
 8001c2a:	4a0f      	ldr	r2, [pc, #60]	; (8001c68 <MX_TIM10_Init+0x44>)
 8001c2c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 999;
 8001c2e:	4b0d      	ldr	r3, [pc, #52]	; (8001c64 <MX_TIM10_Init+0x40>)
 8001c30:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c34:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c36:	4b0b      	ldr	r3, [pc, #44]	; (8001c64 <MX_TIM10_Init+0x40>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 4999;
 8001c3c:	4b09      	ldr	r3, [pc, #36]	; (8001c64 <MX_TIM10_Init+0x40>)
 8001c3e:	f241 3287 	movw	r2, #4999	; 0x1387
 8001c42:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c44:	4b07      	ldr	r3, [pc, #28]	; (8001c64 <MX_TIM10_Init+0x40>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c4a:	4b06      	ldr	r3, [pc, #24]	; (8001c64 <MX_TIM10_Init+0x40>)
 8001c4c:	2280      	movs	r2, #128	; 0x80
 8001c4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001c50:	4804      	ldr	r0, [pc, #16]	; (8001c64 <MX_TIM10_Init+0x40>)
 8001c52:	f006 f953 	bl	8007efc <HAL_TIM_Base_Init>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d001      	beq.n	8001c60 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8001c5c:	f000 fc38 	bl	80024d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001c60:	bf00      	nop
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	200002d4 	.word	0x200002d4
 8001c68:	40014400 	.word	0x40014400

08001c6c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c70:	4b12      	ldr	r3, [pc, #72]	; (8001cbc <MX_USART1_UART_Init+0x50>)
 8001c72:	4a13      	ldr	r2, [pc, #76]	; (8001cc0 <MX_USART1_UART_Init+0x54>)
 8001c74:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001c76:	4b11      	ldr	r3, [pc, #68]	; (8001cbc <MX_USART1_UART_Init+0x50>)
 8001c78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c7c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8001c7e:	4b0f      	ldr	r3, [pc, #60]	; (8001cbc <MX_USART1_UART_Init+0x50>)
 8001c80:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c84:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c86:	4b0d      	ldr	r3, [pc, #52]	; (8001cbc <MX_USART1_UART_Init+0x50>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8001c8c:	4b0b      	ldr	r3, [pc, #44]	; (8001cbc <MX_USART1_UART_Init+0x50>)
 8001c8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c92:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c94:	4b09      	ldr	r3, [pc, #36]	; (8001cbc <MX_USART1_UART_Init+0x50>)
 8001c96:	220c      	movs	r2, #12
 8001c98:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c9a:	4b08      	ldr	r3, [pc, #32]	; (8001cbc <MX_USART1_UART_Init+0x50>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ca0:	4b06      	ldr	r3, [pc, #24]	; (8001cbc <MX_USART1_UART_Init+0x50>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ca6:	4805      	ldr	r0, [pc, #20]	; (8001cbc <MX_USART1_UART_Init+0x50>)
 8001ca8:	f006 fbce 	bl	8008448 <HAL_UART_Init>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <MX_USART1_UART_Init+0x4a>
  {
    Error_Handler();
 8001cb2:	f000 fc0d 	bl	80024d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001cb6:	bf00      	nop
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	2000031c 	.word	0x2000031c
 8001cc0:	40011000 	.word	0x40011000

08001cc4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001cc8:	4b11      	ldr	r3, [pc, #68]	; (8001d10 <MX_USART2_UART_Init+0x4c>)
 8001cca:	4a12      	ldr	r2, [pc, #72]	; (8001d14 <MX_USART2_UART_Init+0x50>)
 8001ccc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001cce:	4b10      	ldr	r3, [pc, #64]	; (8001d10 <MX_USART2_UART_Init+0x4c>)
 8001cd0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001cd4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001cd6:	4b0e      	ldr	r3, [pc, #56]	; (8001d10 <MX_USART2_UART_Init+0x4c>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001cdc:	4b0c      	ldr	r3, [pc, #48]	; (8001d10 <MX_USART2_UART_Init+0x4c>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ce2:	4b0b      	ldr	r3, [pc, #44]	; (8001d10 <MX_USART2_UART_Init+0x4c>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ce8:	4b09      	ldr	r3, [pc, #36]	; (8001d10 <MX_USART2_UART_Init+0x4c>)
 8001cea:	220c      	movs	r2, #12
 8001cec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cee:	4b08      	ldr	r3, [pc, #32]	; (8001d10 <MX_USART2_UART_Init+0x4c>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cf4:	4b06      	ldr	r3, [pc, #24]	; (8001d10 <MX_USART2_UART_Init+0x4c>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001cfa:	4805      	ldr	r0, [pc, #20]	; (8001d10 <MX_USART2_UART_Init+0x4c>)
 8001cfc:	f006 fba4 	bl	8008448 <HAL_UART_Init>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001d06:	f000 fbe3 	bl	80024d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d0a:	bf00      	nop
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	20000360 	.word	0x20000360
 8001d14:	40004400 	.word	0x40004400

08001d18 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001d1c:	4b11      	ldr	r3, [pc, #68]	; (8001d64 <MX_USART6_UART_Init+0x4c>)
 8001d1e:	4a12      	ldr	r2, [pc, #72]	; (8001d68 <MX_USART6_UART_Init+0x50>)
 8001d20:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001d22:	4b10      	ldr	r3, [pc, #64]	; (8001d64 <MX_USART6_UART_Init+0x4c>)
 8001d24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d28:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001d2a:	4b0e      	ldr	r3, [pc, #56]	; (8001d64 <MX_USART6_UART_Init+0x4c>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001d30:	4b0c      	ldr	r3, [pc, #48]	; (8001d64 <MX_USART6_UART_Init+0x4c>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001d36:	4b0b      	ldr	r3, [pc, #44]	; (8001d64 <MX_USART6_UART_Init+0x4c>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001d3c:	4b09      	ldr	r3, [pc, #36]	; (8001d64 <MX_USART6_UART_Init+0x4c>)
 8001d3e:	220c      	movs	r2, #12
 8001d40:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d42:	4b08      	ldr	r3, [pc, #32]	; (8001d64 <MX_USART6_UART_Init+0x4c>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d48:	4b06      	ldr	r3, [pc, #24]	; (8001d64 <MX_USART6_UART_Init+0x4c>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001d4e:	4805      	ldr	r0, [pc, #20]	; (8001d64 <MX_USART6_UART_Init+0x4c>)
 8001d50:	f006 fb7a 	bl	8008448 <HAL_UART_Init>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001d5a:	f000 fbb9 	bl	80024d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001d5e:	bf00      	nop
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	200003a4 	.word	0x200003a4
 8001d68:	40011400 	.word	0x40011400

08001d6c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001d72:	2300      	movs	r3, #0
 8001d74:	607b      	str	r3, [r7, #4]
 8001d76:	4b0c      	ldr	r3, [pc, #48]	; (8001da8 <MX_DMA_Init+0x3c>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7a:	4a0b      	ldr	r2, [pc, #44]	; (8001da8 <MX_DMA_Init+0x3c>)
 8001d7c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d80:	6313      	str	r3, [r2, #48]	; 0x30
 8001d82:	4b09      	ldr	r3, [pc, #36]	; (8001da8 <MX_DMA_Init+0x3c>)
 8001d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d8a:	607b      	str	r3, [r7, #4]
 8001d8c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001d8e:	2200      	movs	r2, #0
 8001d90:	2100      	movs	r1, #0
 8001d92:	2039      	movs	r0, #57	; 0x39
 8001d94:	f001 fe73 	bl	8003a7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001d98:	2039      	movs	r0, #57	; 0x39
 8001d9a:	f001 fe8c 	bl	8003ab6 <HAL_NVIC_EnableIRQ>

}
 8001d9e:	bf00      	nop
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	40023800 	.word	0x40023800

08001dac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b08a      	sub	sp, #40	; 0x28
 8001db0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db2:	f107 0314 	add.w	r3, r7, #20
 8001db6:	2200      	movs	r2, #0
 8001db8:	601a      	str	r2, [r3, #0]
 8001dba:	605a      	str	r2, [r3, #4]
 8001dbc:	609a      	str	r2, [r3, #8]
 8001dbe:	60da      	str	r2, [r3, #12]
 8001dc0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	613b      	str	r3, [r7, #16]
 8001dc6:	4b6a      	ldr	r3, [pc, #424]	; (8001f70 <MX_GPIO_Init+0x1c4>)
 8001dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dca:	4a69      	ldr	r2, [pc, #420]	; (8001f70 <MX_GPIO_Init+0x1c4>)
 8001dcc:	f043 0304 	orr.w	r3, r3, #4
 8001dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001dd2:	4b67      	ldr	r3, [pc, #412]	; (8001f70 <MX_GPIO_Init+0x1c4>)
 8001dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd6:	f003 0304 	and.w	r3, r3, #4
 8001dda:	613b      	str	r3, [r7, #16]
 8001ddc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001dde:	2300      	movs	r3, #0
 8001de0:	60fb      	str	r3, [r7, #12]
 8001de2:	4b63      	ldr	r3, [pc, #396]	; (8001f70 <MX_GPIO_Init+0x1c4>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de6:	4a62      	ldr	r2, [pc, #392]	; (8001f70 <MX_GPIO_Init+0x1c4>)
 8001de8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dec:	6313      	str	r3, [r2, #48]	; 0x30
 8001dee:	4b60      	ldr	r3, [pc, #384]	; (8001f70 <MX_GPIO_Init+0x1c4>)
 8001df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001df6:	60fb      	str	r3, [r7, #12]
 8001df8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	60bb      	str	r3, [r7, #8]
 8001dfe:	4b5c      	ldr	r3, [pc, #368]	; (8001f70 <MX_GPIO_Init+0x1c4>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e02:	4a5b      	ldr	r2, [pc, #364]	; (8001f70 <MX_GPIO_Init+0x1c4>)
 8001e04:	f043 0301 	orr.w	r3, r3, #1
 8001e08:	6313      	str	r3, [r2, #48]	; 0x30
 8001e0a:	4b59      	ldr	r3, [pc, #356]	; (8001f70 <MX_GPIO_Init+0x1c4>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0e:	f003 0301 	and.w	r3, r3, #1
 8001e12:	60bb      	str	r3, [r7, #8]
 8001e14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e16:	2300      	movs	r3, #0
 8001e18:	607b      	str	r3, [r7, #4]
 8001e1a:	4b55      	ldr	r3, [pc, #340]	; (8001f70 <MX_GPIO_Init+0x1c4>)
 8001e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1e:	4a54      	ldr	r2, [pc, #336]	; (8001f70 <MX_GPIO_Init+0x1c4>)
 8001e20:	f043 0302 	orr.w	r3, r3, #2
 8001e24:	6313      	str	r3, [r2, #48]	; 0x30
 8001e26:	4b52      	ldr	r3, [pc, #328]	; (8001f70 <MX_GPIO_Init+0x1c4>)
 8001e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2a:	f003 0302 	and.w	r3, r3, #2
 8001e2e:	607b      	str	r3, [r7, #4]
 8001e30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e32:	2300      	movs	r3, #0
 8001e34:	603b      	str	r3, [r7, #0]
 8001e36:	4b4e      	ldr	r3, [pc, #312]	; (8001f70 <MX_GPIO_Init+0x1c4>)
 8001e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3a:	4a4d      	ldr	r2, [pc, #308]	; (8001f70 <MX_GPIO_Init+0x1c4>)
 8001e3c:	f043 0308 	orr.w	r3, r3, #8
 8001e40:	6313      	str	r3, [r2, #48]	; 0x30
 8001e42:	4b4b      	ldr	r3, [pc, #300]	; (8001f70 <MX_GPIO_Init+0x1c4>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e46:	f003 0308 	and.w	r3, r3, #8
 8001e4a:	603b      	str	r3, [r7, #0]
 8001e4c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_RS_Pin|LCD_CS_Pin|LCD_MOSI_Pin|client_NRST_Pin
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f240 214b 	movw	r1, #587	; 0x24b
 8001e54:	4847      	ldr	r0, [pc, #284]	; (8001f74 <MX_GPIO_Init+0x1c8>)
 8001e56:	f002 fbdd 	bl	8004614 <HAL_GPIO_WritePin>
                          |Buzzer_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RST_Pin|LD2_Pin|boot0_trigger_Pin, GPIO_PIN_RESET);
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	f44f 7198 	mov.w	r1, #304	; 0x130
 8001e60:	4845      	ldr	r0, [pc, #276]	; (8001f78 <MX_GPIO_Init+0x1cc>)
 8001e62:	f002 fbd7 	bl	8004614 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_SCK_GPIO_Port, LCD_SCK_Pin, GPIO_PIN_RESET);
 8001e66:	2200      	movs	r2, #0
 8001e68:	2101      	movs	r1, #1
 8001e6a:	4844      	ldr	r0, [pc, #272]	; (8001f7c <MX_GPIO_Init+0x1d0>)
 8001e6c:	f002 fbd2 	bl	8004614 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 8001e70:	2200      	movs	r2, #0
 8001e72:	2104      	movs	r1, #4
 8001e74:	4842      	ldr	r0, [pc, #264]	; (8001f80 <MX_GPIO_Init+0x1d4>)
 8001e76:	f002 fbcd 	bl	8004614 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001e7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001e80:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001e84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e86:	2300      	movs	r3, #0
 8001e88:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001e8a:	f107 0314 	add.w	r3, r7, #20
 8001e8e:	4619      	mov	r1, r3
 8001e90:	4838      	ldr	r0, [pc, #224]	; (8001f74 <MX_GPIO_Init+0x1c8>)
 8001e92:	f002 fa3b 	bl	800430c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RS_Pin LCD_CS_Pin client_NRST_Pin Buzzer_Pin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_CS_Pin|client_NRST_Pin|Buzzer_Pin;
 8001e96:	f240 2343 	movw	r3, #579	; 0x243
 8001e9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ea8:	f107 0314 	add.w	r3, r7, #20
 8001eac:	4619      	mov	r1, r3
 8001eae:	4831      	ldr	r0, [pc, #196]	; (8001f74 <MX_GPIO_Init+0x1c8>)
 8001eb0:	f002 fa2c 	bl	800430c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_MISO_Pin */
  GPIO_InitStruct.Pin = LCD_MISO_Pin;
 8001eb4:	2304      	movs	r3, #4
 8001eb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LCD_MISO_GPIO_Port, &GPIO_InitStruct);
 8001ec0:	f107 0314 	add.w	r3, r7, #20
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	482b      	ldr	r0, [pc, #172]	; (8001f74 <MX_GPIO_Init+0x1c8>)
 8001ec8:	f002 fa20 	bl	800430c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_MOSI_Pin */
  GPIO_InitStruct.Pin = LCD_MOSI_Pin;
 8001ecc:	2308      	movs	r3, #8
 8001ece:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ed8:	2302      	movs	r3, #2
 8001eda:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_MOSI_GPIO_Port, &GPIO_InitStruct);
 8001edc:	f107 0314 	add.w	r3, r7, #20
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	4824      	ldr	r0, [pc, #144]	; (8001f74 <MX_GPIO_Init+0x1c8>)
 8001ee4:	f002 fa12 	bl	800430c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RST_Pin LD2_Pin boot0_trigger_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LD2_Pin|boot0_trigger_Pin;
 8001ee8:	f44f 7398 	mov.w	r3, #304	; 0x130
 8001eec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001efa:	f107 0314 	add.w	r3, r7, #20
 8001efe:	4619      	mov	r1, r3
 8001f00:	481d      	ldr	r0, [pc, #116]	; (8001f78 <MX_GPIO_Init+0x1cc>)
 8001f02:	f002 fa03 	bl	800430c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_SCK_Pin */
  GPIO_InitStruct.Pin = LCD_SCK_Pin;
 8001f06:	2301      	movs	r3, #1
 8001f08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001f12:	2301      	movs	r3, #1
 8001f14:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_SCK_GPIO_Port, &GPIO_InitStruct);
 8001f16:	f107 0314 	add.w	r3, r7, #20
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	4817      	ldr	r0, [pc, #92]	; (8001f7c <MX_GPIO_Init+0x1d0>)
 8001f1e:	f002 f9f5 	bl	800430c <HAL_GPIO_Init>

  /*Configure GPIO pins : Btn_1_Pin Btn_2_Pin Btn_3_Pin Btn_4_Pin */
  GPIO_InitStruct.Pin = Btn_1_Pin|Btn_2_Pin|Btn_3_Pin|Btn_4_Pin;
 8001f22:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001f26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f30:	f107 0314 	add.w	r3, r7, #20
 8001f34:	4619      	mov	r1, r3
 8001f36:	4811      	ldr	r0, [pc, #68]	; (8001f7c <MX_GPIO_Init+0x1d0>)
 8001f38:	f002 f9e8 	bl	800430c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_CS_Pin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 8001f3c:	2304      	movs	r3, #4
 8001f3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f40:	2301      	movs	r3, #1
 8001f42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f44:	2300      	movs	r3, #0
 8001f46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 8001f4c:	f107 0314 	add.w	r3, r7, #20
 8001f50:	4619      	mov	r1, r3
 8001f52:	480b      	ldr	r0, [pc, #44]	; (8001f80 <MX_GPIO_Init+0x1d4>)
 8001f54:	f002 f9da 	bl	800430c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001f58:	2200      	movs	r2, #0
 8001f5a:	2100      	movs	r1, #0
 8001f5c:	2028      	movs	r0, #40	; 0x28
 8001f5e:	f001 fd8e 	bl	8003a7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001f62:	2028      	movs	r0, #40	; 0x28
 8001f64:	f001 fda7 	bl	8003ab6 <HAL_NVIC_EnableIRQ>

}
 8001f68:	bf00      	nop
 8001f6a:	3728      	adds	r7, #40	; 0x28
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	40023800 	.word	0x40023800
 8001f74:	40020800 	.word	0x40020800
 8001f78:	40020000 	.word	0x40020000
 8001f7c:	40020400 	.word	0x40020400
 8001f80:	40020c00 	.word	0x40020c00

08001f84 <running_box>:

/* USER CODE BEGIN 4 */

void running_box(){
 8001f84:	b590      	push	{r4, r7, lr}
 8001f86:	b087      	sub	sp, #28
 8001f88:	af02      	add	r7, sp, #8
   //// Running box ------
  int ratte = 1;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	60fb      	str	r3, [r7, #12]
  int sizo = 30;
 8001f8e:	231e      	movs	r3, #30
 8001f90:	60bb      	str	r3, [r7, #8]
  int offs = 190;
 8001f92:	23be      	movs	r3, #190	; 0xbe
 8001f94:	607b      	str	r3, [r7, #4]
  static uint16_t xsh = 0;
  ili9341_FillRect(xsh, offs, ratte ,sizo, cl_MAROON);
 8001f96:	4b1d      	ldr	r3, [pc, #116]	; (800200c <running_box+0x88>)
 8001f98:	8818      	ldrh	r0, [r3, #0]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	b299      	uxth	r1, r3
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	b29a      	uxth	r2, r3
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	f44f 44f0 	mov.w	r4, #30720	; 0x7800
 8001faa:	9400      	str	r4, [sp, #0]
 8001fac:	f000 fef4 	bl	8002d98 <ili9341_FillRect>
  xsh += ratte;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	b29a      	uxth	r2, r3
 8001fb4:	4b15      	ldr	r3, [pc, #84]	; (800200c <running_box+0x88>)
 8001fb6:	881b      	ldrh	r3, [r3, #0]
 8001fb8:	4413      	add	r3, r2
 8001fba:	b29a      	uxth	r2, r3
 8001fbc:	4b13      	ldr	r3, [pc, #76]	; (800200c <running_box+0x88>)
 8001fbe:	801a      	strh	r2, [r3, #0]
  ili9341_FillRect(xsh, offs, sizo, sizo, cl_CYAN); //// box
 8001fc0:	4b12      	ldr	r3, [pc, #72]	; (800200c <running_box+0x88>)
 8001fc2:	8818      	ldrh	r0, [r3, #0]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	b299      	uxth	r1, r3
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	b29a      	uxth	r2, r3
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	b29b      	uxth	r3, r3
 8001fd0:	f240 74ff 	movw	r4, #2047	; 0x7ff
 8001fd4:	9400      	str	r4, [sp, #0]
 8001fd6:	f000 fedf 	bl	8002d98 <ili9341_FillRect>
  if(xsh >= 400){ // clear
 8001fda:	4b0c      	ldr	r3, [pc, #48]	; (800200c <running_box+0x88>)
 8001fdc:	881b      	ldrh	r3, [r3, #0]
 8001fde:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001fe2:	d30f      	bcc.n	8002004 <running_box+0x80>
	  ili9341_FillRect(xsh, offs, sizo, sizo, cl_MAROON);
 8001fe4:	4b09      	ldr	r3, [pc, #36]	; (800200c <running_box+0x88>)
 8001fe6:	8818      	ldrh	r0, [r3, #0]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	b299      	uxth	r1, r3
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	b29a      	uxth	r2, r3
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	f44f 44f0 	mov.w	r4, #30720	; 0x7800
 8001ff8:	9400      	str	r4, [sp, #0]
 8001ffa:	f000 fecd 	bl	8002d98 <ili9341_FillRect>
	  xsh = 0;
 8001ffe:	4b03      	ldr	r3, [pc, #12]	; (800200c <running_box+0x88>)
 8002000:	2200      	movs	r2, #0
 8002002:	801a      	strh	r2, [r3, #0]
		  }

}
 8002004:	bf00      	nop
 8002006:	3714      	adds	r7, #20
 8002008:	46bd      	mov	sp, r7
 800200a:	bd90      	pop	{r4, r7, pc}
 800200c:	20000588 	.word	0x20000588

08002010 <simple_scr>:

void simple_scr(){
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af04      	add	r7, sp, #16
#ifdef INA219_Wrk

	  //INATT.U16[1] = INA219Read_cx(&hi2c1, INA219_ADDR_1, INA219_RG_Config);
	  //INATT.U16[2] = INA219Read_cx(&hi2c1, INA219_ADDR_1, INA219_RG_Current);

	  inata.Bus_V   = INA219Read_BusV(&hi2c1, INA219_ADDR_1);
 8002016:	2180      	movs	r1, #128	; 0x80
 8002018:	486a      	ldr	r0, [pc, #424]	; (80021c4 <simple_scr+0x1b4>)
 800201a:	f7ff f899 	bl	8001150 <INA219Read_BusV>
 800201e:	4603      	mov	r3, r0
 8002020:	461a      	mov	r2, r3
 8002022:	4b69      	ldr	r3, [pc, #420]	; (80021c8 <simple_scr+0x1b8>)
 8002024:	821a      	strh	r2, [r3, #16]
	  inata.CURRENT = INA219Read_Current(&hi2c1, INA219_ADDR_1);
 8002026:	2180      	movs	r1, #128	; 0x80
 8002028:	4866      	ldr	r0, [pc, #408]	; (80021c4 <simple_scr+0x1b4>)
 800202a:	f7ff f8b9 	bl	80011a0 <INA219Read_Current>
 800202e:	4603      	mov	r3, r0
 8002030:	b21a      	sxth	r2, r3
 8002032:	4b65      	ldr	r3, [pc, #404]	; (80021c8 <simple_scr+0x1b8>)
 8002034:	811a      	strh	r2, [r3, #8]
	  inata.POWER   = INA219Read_Power(&hi2c1, INA219_ADDR_1);
 8002036:	2180      	movs	r1, #128	; 0x80
 8002038:	4862      	ldr	r0, [pc, #392]	; (80021c4 <simple_scr+0x1b4>)
 800203a:	f7ff f911 	bl	8001260 <INA219Read_Power>
 800203e:	eef0 7a40 	vmov.f32	s15, s0
 8002042:	4b61      	ldr	r3, [pc, #388]	; (80021c8 <simple_scr+0x1b8>)
 8002044:	edc3 7a03 	vstr	s15, [r3, #12]
	  inata.SHUNT_V = INA219Read_ShuntV(&hi2c1, INA219_ADDR_1);
 8002048:	2180      	movs	r1, #128	; 0x80
 800204a:	485e      	ldr	r0, [pc, #376]	; (80021c4 <simple_scr+0x1b4>)
 800204c:	f7ff f8cc 	bl	80011e8 <INA219Read_ShuntV>
 8002050:	eef0 7a40 	vmov.f32	s15, s0
 8002054:	4b5c      	ldr	r3, [pc, #368]	; (80021c8 <simple_scr+0x1b8>)
 8002056:	edc3 7a01 	vstr	s15, [r3, #4]

	  inata.Calibra =  INA219Read_cx(&hi2c1, INA219_ADDR_1, INA219_RG_Calibra);
 800205a:	2205      	movs	r2, #5
 800205c:	2180      	movs	r1, #128	; 0x80
 800205e:	4859      	ldr	r0, [pc, #356]	; (80021c4 <simple_scr+0x1b4>)
 8002060:	f7fe ff9c 	bl	8000f9c <INA219Read_cx>
 8002064:	4603      	mov	r3, r0
 8002066:	461a      	mov	r2, r3
 8002068:	4b57      	ldr	r3, [pc, #348]	; (80021c8 <simple_scr+0x1b8>)
 800206a:	825a      	strh	r2, [r3, #18]
	  inata.Config = INA219Read_cx(&hi2c1, INA219_ADDR_1, INA219_RG_Config);
 800206c:	2200      	movs	r2, #0
 800206e:	2180      	movs	r1, #128	; 0x80
 8002070:	4854      	ldr	r0, [pc, #336]	; (80021c4 <simple_scr+0x1b4>)
 8002072:	f7fe ff93 	bl	8000f9c <INA219Read_cx>
 8002076:	4603      	mov	r3, r0
 8002078:	461a      	mov	r2, r3
 800207a:	4b53      	ldr	r3, [pc, #332]	; (80021c8 <simple_scr+0x1b8>)
 800207c:	801a      	strh	r2, [r3, #0]

	  sprintf(TextDispBuffer,"calibrator:%4X", inata.Calibra);
 800207e:	4b52      	ldr	r3, [pc, #328]	; (80021c8 <simple_scr+0x1b8>)
 8002080:	8a5b      	ldrh	r3, [r3, #18]
 8002082:	461a      	mov	r2, r3
 8002084:	4951      	ldr	r1, [pc, #324]	; (80021cc <simple_scr+0x1bc>)
 8002086:	4852      	ldr	r0, [pc, #328]	; (80021d0 <simple_scr+0x1c0>)
 8002088:	f008 f91e 	bl	800a2c8 <siprintf>
	  ili9341_WriteString(20, 50, TextDispBuffer, Font12, cl_GREENYELLOW, cl_BLACK);
 800208c:	4b51      	ldr	r3, [pc, #324]	; (80021d4 <simple_scr+0x1c4>)
 800208e:	2200      	movs	r2, #0
 8002090:	9202      	str	r2, [sp, #8]
 8002092:	f64a 72e5 	movw	r2, #45029	; 0xafe5
 8002096:	9201      	str	r2, [sp, #4]
 8002098:	685a      	ldr	r2, [r3, #4]
 800209a:	9200      	str	r2, [sp, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a4c      	ldr	r2, [pc, #304]	; (80021d0 <simple_scr+0x1c0>)
 80020a0:	2132      	movs	r1, #50	; 0x32
 80020a2:	2014      	movs	r0, #20
 80020a4:	f000 ff75 	bl	8002f92 <ili9341_WriteString>

	  sprintf(TextDispBuffer,"V mV: %d    ", inata.Bus_V);
 80020a8:	4b47      	ldr	r3, [pc, #284]	; (80021c8 <simple_scr+0x1b8>)
 80020aa:	8a1b      	ldrh	r3, [r3, #16]
 80020ac:	461a      	mov	r2, r3
 80020ae:	494a      	ldr	r1, [pc, #296]	; (80021d8 <simple_scr+0x1c8>)
 80020b0:	4847      	ldr	r0, [pc, #284]	; (80021d0 <simple_scr+0x1c0>)
 80020b2:	f008 f909 	bl	800a2c8 <siprintf>
	  ili9341_WriteString(20, 70, TextDispBuffer, Font16, cl_CYAN, cl_BLACK);
 80020b6:	4b49      	ldr	r3, [pc, #292]	; (80021dc <simple_scr+0x1cc>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	9202      	str	r2, [sp, #8]
 80020bc:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80020c0:	9201      	str	r2, [sp, #4]
 80020c2:	685a      	ldr	r2, [r3, #4]
 80020c4:	9200      	str	r2, [sp, #0]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a41      	ldr	r2, [pc, #260]	; (80021d0 <simple_scr+0x1c0>)
 80020ca:	2146      	movs	r1, #70	; 0x46
 80020cc:	2014      	movs	r0, #20
 80020ce:	f000 ff60 	bl	8002f92 <ili9341_WriteString>

	  sprintf(TextDispBuffer,"I mA: %d    ", inata.CURRENT);
 80020d2:	4b3d      	ldr	r3, [pc, #244]	; (80021c8 <simple_scr+0x1b8>)
 80020d4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80020d8:	461a      	mov	r2, r3
 80020da:	4941      	ldr	r1, [pc, #260]	; (80021e0 <simple_scr+0x1d0>)
 80020dc:	483c      	ldr	r0, [pc, #240]	; (80021d0 <simple_scr+0x1c0>)
 80020de:	f008 f8f3 	bl	800a2c8 <siprintf>
	  ili9341_WriteString(20, 95, TextDispBuffer, Font16, cl_CYAN, cl_BLACK);
 80020e2:	4b3e      	ldr	r3, [pc, #248]	; (80021dc <simple_scr+0x1cc>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	9202      	str	r2, [sp, #8]
 80020e8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80020ec:	9201      	str	r2, [sp, #4]
 80020ee:	685a      	ldr	r2, [r3, #4]
 80020f0:	9200      	str	r2, [sp, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a36      	ldr	r2, [pc, #216]	; (80021d0 <simple_scr+0x1c0>)
 80020f6:	215f      	movs	r1, #95	; 0x5f
 80020f8:	2014      	movs	r0, #20
 80020fa:	f000 ff4a 	bl	8002f92 <ili9341_WriteString>

	  sprintf(TextDispBuffer,"P mW: %.2f  ", inata.POWER);
 80020fe:	4b32      	ldr	r3, [pc, #200]	; (80021c8 <simple_scr+0x1b8>)
 8002100:	68db      	ldr	r3, [r3, #12]
 8002102:	4618      	mov	r0, r3
 8002104:	f7fe fa28 	bl	8000558 <__aeabi_f2d>
 8002108:	4602      	mov	r2, r0
 800210a:	460b      	mov	r3, r1
 800210c:	4935      	ldr	r1, [pc, #212]	; (80021e4 <simple_scr+0x1d4>)
 800210e:	4830      	ldr	r0, [pc, #192]	; (80021d0 <simple_scr+0x1c0>)
 8002110:	f008 f8da 	bl	800a2c8 <siprintf>
	  ili9341_WriteString(20, 120, TextDispBuffer, Font16, cl_CYAN, cl_BLACK);
 8002114:	4b31      	ldr	r3, [pc, #196]	; (80021dc <simple_scr+0x1cc>)
 8002116:	2200      	movs	r2, #0
 8002118:	9202      	str	r2, [sp, #8]
 800211a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800211e:	9201      	str	r2, [sp, #4]
 8002120:	685a      	ldr	r2, [r3, #4]
 8002122:	9200      	str	r2, [sp, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a2a      	ldr	r2, [pc, #168]	; (80021d0 <simple_scr+0x1c0>)
 8002128:	2178      	movs	r1, #120	; 0x78
 800212a:	2014      	movs	r0, #20
 800212c:	f000 ff31 	bl	8002f92 <ili9341_WriteString>
#endif

	  mcp_read.raw[0] = MCP3208_READ_8_DataSPI(&hspi3, M8_CH0);
 8002130:	2118      	movs	r1, #24
 8002132:	482d      	ldr	r0, [pc, #180]	; (80021e8 <simple_scr+0x1d8>)
 8002134:	f7ff f8de 	bl	80012f4 <MCP3208_READ_8_DataSPI>
 8002138:	4603      	mov	r3, r0
 800213a:	461a      	mov	r2, r3
 800213c:	4b2b      	ldr	r3, [pc, #172]	; (80021ec <simple_scr+0x1dc>)
 800213e:	801a      	strh	r2, [r3, #0]
	  mcp_read.cv[0] = MCP320x_ADCbit_to_Volt(mcp_read.raw[0]);
 8002140:	4b2a      	ldr	r3, [pc, #168]	; (80021ec <simple_scr+0x1dc>)
 8002142:	881b      	ldrh	r3, [r3, #0]
 8002144:	4618      	mov	r0, r3
 8002146:	f7ff f90b 	bl	8001360 <MCP320x_ADCbit_to_Volt>
 800214a:	eef0 7a40 	vmov.f32	s15, s0
 800214e:	4b27      	ldr	r3, [pc, #156]	; (80021ec <simple_scr+0x1dc>)
 8002150:	edc3 7a02 	vstr	s15, [r3, #8]
	  sprintf(TextDispBuffer,"MCP : %.2f  ", mcp_read.cv[0]);
 8002154:	4b25      	ldr	r3, [pc, #148]	; (80021ec <simple_scr+0x1dc>)
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	4618      	mov	r0, r3
 800215a:	f7fe f9fd 	bl	8000558 <__aeabi_f2d>
 800215e:	4602      	mov	r2, r0
 8002160:	460b      	mov	r3, r1
 8002162:	4923      	ldr	r1, [pc, #140]	; (80021f0 <simple_scr+0x1e0>)
 8002164:	481a      	ldr	r0, [pc, #104]	; (80021d0 <simple_scr+0x1c0>)
 8002166:	f008 f8af 	bl	800a2c8 <siprintf>
	  ili9341_WriteString(20, 145, TextDispBuffer, Font16, cl_CYAN, cl_BLACK);
 800216a:	4b1c      	ldr	r3, [pc, #112]	; (80021dc <simple_scr+0x1cc>)
 800216c:	2200      	movs	r2, #0
 800216e:	9202      	str	r2, [sp, #8]
 8002170:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002174:	9201      	str	r2, [sp, #4]
 8002176:	685a      	ldr	r2, [r3, #4]
 8002178:	9200      	str	r2, [sp, #0]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a14      	ldr	r2, [pc, #80]	; (80021d0 <simple_scr+0x1c0>)
 800217e:	2191      	movs	r1, #145	; 0x91
 8002180:	2014      	movs	r0, #20
 8002182:	f000 ff06 	bl	8002f92 <ili9341_WriteString>

	  sprintf(TextDispBuffer,"btn %X %X %d",btn_read[1], btn_read[2], btn_cnt);
 8002186:	4b1b      	ldr	r3, [pc, #108]	; (80021f4 <simple_scr+0x1e4>)
 8002188:	785b      	ldrb	r3, [r3, #1]
 800218a:	461a      	mov	r2, r3
 800218c:	4b19      	ldr	r3, [pc, #100]	; (80021f4 <simple_scr+0x1e4>)
 800218e:	789b      	ldrb	r3, [r3, #2]
 8002190:	4619      	mov	r1, r3
 8002192:	4b19      	ldr	r3, [pc, #100]	; (80021f8 <simple_scr+0x1e8>)
 8002194:	881b      	ldrh	r3, [r3, #0]
 8002196:	9300      	str	r3, [sp, #0]
 8002198:	460b      	mov	r3, r1
 800219a:	4918      	ldr	r1, [pc, #96]	; (80021fc <simple_scr+0x1ec>)
 800219c:	480c      	ldr	r0, [pc, #48]	; (80021d0 <simple_scr+0x1c0>)
 800219e:	f008 f893 	bl	800a2c8 <siprintf>
	  ili9341_WriteString(170, 50, TextDispBuffer, Font16, cl_YELLOW, cl_BLACK);
 80021a2:	4b0e      	ldr	r3, [pc, #56]	; (80021dc <simple_scr+0x1cc>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	9202      	str	r2, [sp, #8]
 80021a8:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80021ac:	9201      	str	r2, [sp, #4]
 80021ae:	685a      	ldr	r2, [r3, #4]
 80021b0:	9200      	str	r2, [sp, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a06      	ldr	r2, [pc, #24]	; (80021d0 <simple_scr+0x1c0>)
 80021b6:	2132      	movs	r1, #50	; 0x32
 80021b8:	20aa      	movs	r0, #170	; 0xaa
 80021ba:	f000 feea 	bl	8002f92 <ili9341_WriteString>

}
 80021be:	bf00      	nop
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	20000228 	.word	0x20000228
 80021c8:	2000053c 	.word	0x2000053c
 80021cc:	0800c8f8 	.word	0x0800c8f8
 80021d0:	20000448 	.word	0x20000448
 80021d4:	20000010 	.word	0x20000010
 80021d8:	0800c908 	.word	0x0800c908
 80021dc:	20000018 	.word	0x20000018
 80021e0:	0800c918 	.word	0x0800c918
 80021e4:	0800c928 	.word	0x0800c928
 80021e8:	2000027c 	.word	0x2000027c
 80021ec:	20000554 	.word	0x20000554
 80021f0:	0800c938 	.word	0x0800c938
 80021f4:	20000580 	.word	0x20000580
 80021f8:	20000584 	.word	0x20000584
 80021fc:	0800c948 	.word	0x0800c948

08002200 <Button_machine>:


void Button_machine(){
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
	 * raw read,
	 * read from 1 as rising detect,
	 * read latest (bdebug),
	 * read latest & erased when fin}
	 */
		btn_read[1] = btn_read[0];
 8002204:	4b16      	ldr	r3, [pc, #88]	; (8002260 <Button_machine+0x60>)
 8002206:	781a      	ldrb	r2, [r3, #0]
 8002208:	4b15      	ldr	r3, [pc, #84]	; (8002260 <Button_machine+0x60>)
 800220a:	705a      	strb	r2, [r3, #1]
		btn_read[0] = (0x0F & ~(GPIOB->IDR >> 12)); //// available for PB 12 13 14 15 or which the same bank only
 800220c:	4b15      	ldr	r3, [pc, #84]	; (8002264 <Button_machine+0x64>)
 800220e:	691b      	ldr	r3, [r3, #16]
 8002210:	0b1b      	lsrs	r3, r3, #12
 8002212:	b2db      	uxtb	r3, r3
 8002214:	43db      	mvns	r3, r3
 8002216:	b2db      	uxtb	r3, r3
 8002218:	f003 030f 	and.w	r3, r3, #15
 800221c:	b2da      	uxtb	r2, r3
 800221e:	4b10      	ldr	r3, [pc, #64]	; (8002260 <Button_machine+0x60>)
 8002220:	701a      	strb	r2, [r3, #0]

		//// rising edge counter
		if(btn_read[0] && btn_read[1] == 0){
 8002222:	4b0f      	ldr	r3, [pc, #60]	; (8002260 <Button_machine+0x60>)
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d014      	beq.n	8002254 <Button_machine+0x54>
 800222a:	4b0d      	ldr	r3, [pc, #52]	; (8002260 <Button_machine+0x60>)
 800222c:	785b      	ldrb	r3, [r3, #1]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d110      	bne.n	8002254 <Button_machine+0x54>
			btn_cnt += btn_read[0]; //// plus at each hex pos
 8002232:	4b0b      	ldr	r3, [pc, #44]	; (8002260 <Button_machine+0x60>)
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	b29a      	uxth	r2, r3
 8002238:	4b0b      	ldr	r3, [pc, #44]	; (8002268 <Button_machine+0x68>)
 800223a:	881b      	ldrh	r3, [r3, #0]
 800223c:	4413      	add	r3, r2
 800223e:	b29a      	uxth	r2, r3
 8002240:	4b09      	ldr	r3, [pc, #36]	; (8002268 <Button_machine+0x68>)
 8002242:	801a      	strh	r2, [r3, #0]
			btn_read[2] = btn_read[0]; //// read latest, debug
 8002244:	4b06      	ldr	r3, [pc, #24]	; (8002260 <Button_machine+0x60>)
 8002246:	781a      	ldrb	r2, [r3, #0]
 8002248:	4b05      	ldr	r3, [pc, #20]	; (8002260 <Button_machine+0x60>)
 800224a:	709a      	strb	r2, [r3, #2]
			btn_read[3] = btn_read[0]; //// read latest, clearable
 800224c:	4b04      	ldr	r3, [pc, #16]	; (8002260 <Button_machine+0x60>)
 800224e:	781a      	ldrb	r2, [r3, #0]
 8002250:	4b03      	ldr	r3, [pc, #12]	; (8002260 <Button_machine+0x60>)
 8002252:	70da      	strb	r2, [r3, #3]
		}


}
 8002254:	bf00      	nop
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	20000580 	.word	0x20000580
 8002264:	40020400 	.word	0x40020400
 8002268:	20000584 	.word	0x20000584

0800226c <buzzer_scream_cnt>:

void buzzer_scream_cnt(){
 800226c:	b598      	push	{r3, r4, r7, lr}
 800226e:	af00      	add	r7, sp, #0
	static enum {bz_init, bz_silent, bz_scream} bz_st = bz_init;
	//uint16_t tup = 100, tdn = 50;

		switch(bz_st){
 8002270:	4b35      	ldr	r3, [pc, #212]	; (8002348 <buzzer_scream_cnt+0xdc>)
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	2b01      	cmp	r3, #1
 8002276:	d039      	beq.n	80022ec <buzzer_scream_cnt+0x80>
 8002278:	2b02      	cmp	r3, #2
 800227a:	d01d      	beq.n	80022b8 <buzzer_scream_cnt+0x4c>
		default:
		case bz_init:
			//HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);

			if(flagc_bz){
 800227c:	4b33      	ldr	r3, [pc, #204]	; (800234c <buzzer_scream_cnt+0xe0>)
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d015      	beq.n	80022b0 <buzzer_scream_cnt+0x44>

				HAL_TIM_Base_Start_IT(&htim10);
 8002284:	4832      	ldr	r0, [pc, #200]	; (8002350 <buzzer_scream_cnt+0xe4>)
 8002286:	f005 fe89 	bl	8007f9c <HAL_TIM_Base_Start_IT>
				timestamp_bz = bzz_t_priod_up + HAL_GetTick(); //
 800228a:	4b32      	ldr	r3, [pc, #200]	; (8002354 <buzzer_scream_cnt+0xe8>)
 800228c:	881b      	ldrh	r3, [r3, #0]
 800228e:	461c      	mov	r4, r3
 8002290:	f001 faea 	bl	8003868 <HAL_GetTick>
 8002294:	4603      	mov	r3, r0
 8002296:	4423      	add	r3, r4
 8002298:	4a2f      	ldr	r2, [pc, #188]	; (8002358 <buzzer_scream_cnt+0xec>)
 800229a:	6013      	str	r3, [r2, #0]

				bz_st = bz_scream;
 800229c:	4b2a      	ldr	r3, [pc, #168]	; (8002348 <buzzer_scream_cnt+0xdc>)
 800229e:	2202      	movs	r2, #2
 80022a0:	701a      	strb	r2, [r3, #0]
				/// down flag_counter every 1 scream
				flagc_bz--;
 80022a2:	4b2a      	ldr	r3, [pc, #168]	; (800234c <buzzer_scream_cnt+0xe0>)
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	3b01      	subs	r3, #1
 80022a8:	b2da      	uxtb	r2, r3
 80022aa:	4b28      	ldr	r3, [pc, #160]	; (800234c <buzzer_scream_cnt+0xe0>)
 80022ac:	701a      	strb	r2, [r3, #0]
			}else{
				HAL_TIM_Base_Stop_IT(&htim10);
			}

			break;
 80022ae:	e048      	b.n	8002342 <buzzer_scream_cnt+0xd6>
				HAL_TIM_Base_Stop_IT(&htim10);
 80022b0:	4827      	ldr	r0, [pc, #156]	; (8002350 <buzzer_scream_cnt+0xe4>)
 80022b2:	f005 fed5 	bl	8008060 <HAL_TIM_Base_Stop_IT>
			break;
 80022b6:	e044      	b.n	8002342 <buzzer_scream_cnt+0xd6>

		case bz_scream:
			HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET);
 80022b8:	2201      	movs	r2, #1
 80022ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80022be:	4827      	ldr	r0, [pc, #156]	; (800235c <buzzer_scream_cnt+0xf0>)
 80022c0:	f002 f9a8 	bl	8004614 <HAL_GPIO_WritePin>

			if(HAL_GetTick() >= timestamp_bz){
 80022c4:	f001 fad0 	bl	8003868 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	4b23      	ldr	r3, [pc, #140]	; (8002358 <buzzer_scream_cnt+0xec>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d334      	bcc.n	800233c <buzzer_scream_cnt+0xd0>
				timestamp_bz = bzz_t_priod_dn + HAL_GetTick();
 80022d2:	4b23      	ldr	r3, [pc, #140]	; (8002360 <buzzer_scream_cnt+0xf4>)
 80022d4:	881b      	ldrh	r3, [r3, #0]
 80022d6:	461c      	mov	r4, r3
 80022d8:	f001 fac6 	bl	8003868 <HAL_GetTick>
 80022dc:	4603      	mov	r3, r0
 80022de:	4423      	add	r3, r4
 80022e0:	4a1d      	ldr	r2, [pc, #116]	; (8002358 <buzzer_scream_cnt+0xec>)
 80022e2:	6013      	str	r3, [r2, #0]

				bz_st = bz_silent;
 80022e4:	4b18      	ldr	r3, [pc, #96]	; (8002348 <buzzer_scream_cnt+0xdc>)
 80022e6:	2201      	movs	r2, #1
 80022e8:	701a      	strb	r2, [r3, #0]
			}
			break;
 80022ea:	e027      	b.n	800233c <buzzer_scream_cnt+0xd0>


		case bz_silent:
			HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 80022ec:	2200      	movs	r2, #0
 80022ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80022f2:	481a      	ldr	r0, [pc, #104]	; (800235c <buzzer_scream_cnt+0xf0>)
 80022f4:	f002 f98e 	bl	8004614 <HAL_GPIO_WritePin>

			if(HAL_GetTick() >= timestamp_bz){
 80022f8:	f001 fab6 	bl	8003868 <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	4b16      	ldr	r3, [pc, #88]	; (8002358 <buzzer_scream_cnt+0xec>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	429a      	cmp	r2, r3
 8002304:	d31c      	bcc.n	8002340 <buzzer_scream_cnt+0xd4>

				if(flagc_bz){
 8002306:	4b11      	ldr	r3, [pc, #68]	; (800234c <buzzer_scream_cnt+0xe0>)
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d012      	beq.n	8002334 <buzzer_scream_cnt+0xc8>
					timestamp_bz = bzz_t_priod_up + HAL_GetTick(); //
 800230e:	4b11      	ldr	r3, [pc, #68]	; (8002354 <buzzer_scream_cnt+0xe8>)
 8002310:	881b      	ldrh	r3, [r3, #0]
 8002312:	461c      	mov	r4, r3
 8002314:	f001 faa8 	bl	8003868 <HAL_GetTick>
 8002318:	4603      	mov	r3, r0
 800231a:	4423      	add	r3, r4
 800231c:	4a0e      	ldr	r2, [pc, #56]	; (8002358 <buzzer_scream_cnt+0xec>)
 800231e:	6013      	str	r3, [r2, #0]

					flagc_bz--;
 8002320:	4b0a      	ldr	r3, [pc, #40]	; (800234c <buzzer_scream_cnt+0xe0>)
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	3b01      	subs	r3, #1
 8002326:	b2da      	uxtb	r2, r3
 8002328:	4b08      	ldr	r3, [pc, #32]	; (800234c <buzzer_scream_cnt+0xe0>)
 800232a:	701a      	strb	r2, [r3, #0]
					bz_st = bz_scream;
 800232c:	4b06      	ldr	r3, [pc, #24]	; (8002348 <buzzer_scream_cnt+0xdc>)
 800232e:	2202      	movs	r2, #2
 8002330:	701a      	strb	r2, [r3, #0]
				}else{
				bz_st = bz_init;
				}
			}

			break;
 8002332:	e005      	b.n	8002340 <buzzer_scream_cnt+0xd4>
				bz_st = bz_init;
 8002334:	4b04      	ldr	r3, [pc, #16]	; (8002348 <buzzer_scream_cnt+0xdc>)
 8002336:	2200      	movs	r2, #0
 8002338:	701a      	strb	r2, [r3, #0]
			break;
 800233a:	e001      	b.n	8002340 <buzzer_scream_cnt+0xd4>
			break;
 800233c:	bf00      	nop
 800233e:	e000      	b.n	8002342 <buzzer_scream_cnt+0xd6>
			break;
 8002340:	bf00      	nop
		}

}
 8002342:	bf00      	nop
 8002344:	bd98      	pop	{r3, r4, r7, pc}
 8002346:	bf00      	nop
 8002348:	2000058a 	.word	0x2000058a
 800234c:	2000057c 	.word	0x2000057c
 8002350:	200002d4 	.word	0x200002d4
 8002354:	20000008 	.word	0x20000008
 8002358:	20000574 	.word	0x20000574
 800235c:	40020800 	.word	0x40020800
 8002360:	2000000a 	.word	0x2000000a

08002364 <GrandState_Verita>:

void State_Script_1(){

}

void GrandState_Verita(){
 8002364:	b598      	push	{r3, r4, r7, lr}
 8002366:	af00      	add	r7, sp, #0


	switch(GrandState){
 8002368:	4b32      	ldr	r3, [pc, #200]	; (8002434 <GrandState_Verita+0xd0>)
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d004      	beq.n	800237a <GrandState_Verita+0x16>
 8002370:	2b02      	cmp	r3, #2
 8002372:	d010      	beq.n	8002396 <GrandState_Verita+0x32>
	default:
	case lobby:
		simple_scr();
 8002374:	f7ff fe4c 	bl	8002010 <simple_scr>
		break; // lobby
 8002378:	e05a      	b.n	8002430 <GrandState_Verita+0xcc>
//		}
//		//// last round: send only left bit (less 255)
//		HAL_Delay(2);
//		BL_UART_WriteMem_d(&huart1, 0x08000000 + ((bootloop_n-1)*0x100), boot_size % 256, &F411_Verita_Client[0x100*(bootloop_n-1)]);

		BL_UART_Start(&huart1);
 800237a:	482f      	ldr	r0, [pc, #188]	; (8002438 <GrandState_Verita+0xd4>)
 800237c:	f7ff f8fe 	bl	800157c <BL_UART_Start>
		BL_UART_ExtendEraseMem_SP(&huart1, Erase_MASS_CMD);
 8002380:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002384:	482c      	ldr	r0, [pc, #176]	; (8002438 <GrandState_Verita+0xd4>)
 8002386:	f7ff fa73 	bl	8001870 <BL_UART_ExtendEraseMem_SP>
		BL_UART_Finish();
 800238a:	f7ff f927 	bl	80015dc <BL_UART_Finish>

		GrandState = lobby;
 800238e:	4b29      	ldr	r3, [pc, #164]	; (8002434 <GrandState_Verita+0xd0>)
 8002390:	2201      	movs	r2, #1
 8002392:	701a      	strb	r2, [r3, #0]
		break;
 8002394:	e04c      	b.n	8002430 <GrandState_Verita+0xcc>

	case s_bootloader:

		//// find n times must be loop to upload all code
		bootloop_n = (boot_size / 256) + ((boot_size % 256)>0 ? 1:0);
 8002396:	4b29      	ldr	r3, [pc, #164]	; (800243c <GrandState_Verita+0xd8>)
 8002398:	881b      	ldrh	r3, [r3, #0]
 800239a:	0a1b      	lsrs	r3, r3, #8
 800239c:	b29b      	uxth	r3, r3
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	4a26      	ldr	r2, [pc, #152]	; (800243c <GrandState_Verita+0xd8>)
 80023a2:	8812      	ldrh	r2, [r2, #0]
 80023a4:	b2d2      	uxtb	r2, r2
 80023a6:	b292      	uxth	r2, r2
 80023a8:	2a00      	cmp	r2, #0
 80023aa:	bf14      	ite	ne
 80023ac:	2201      	movne	r2, #1
 80023ae:	2200      	moveq	r2, #0
 80023b0:	b2d2      	uxtb	r2, r2
 80023b2:	4413      	add	r3, r2
 80023b4:	b2da      	uxtb	r2, r3
 80023b6:	4b22      	ldr	r3, [pc, #136]	; (8002440 <GrandState_Verita+0xdc>)
 80023b8:	701a      	strb	r2, [r3, #0]
		//bootloop_n = (uint8_t)ceil(boot_size / 256.0);

		BL_UART_Start(&huart1);
 80023ba:	481f      	ldr	r0, [pc, #124]	; (8002438 <GrandState_Verita+0xd4>)
 80023bc:	f7ff f8de 	bl	800157c <BL_UART_Start>

		//// Flash Memory Erase ============, Erase1_Mass_CMD makes bootloader not response to ALL write CMD / dont know why
		BL_UART_ExtendEraseMem_SP(&huart1, Erase_Bank1_CMD);
 80023c0:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 80023c4:	481c      	ldr	r0, [pc, #112]	; (8002438 <GrandState_Verita+0xd4>)
 80023c6:	f7ff fa53 	bl	8001870 <BL_UART_ExtendEraseMem_SP>
		BL_UART_ExtendEraseMem_SP(&huart1, Erase_Bank2_CMD);
 80023ca:	f64f 71fd 	movw	r1, #65533	; 0xfffd
 80023ce:	481a      	ldr	r0, [pc, #104]	; (8002438 <GrandState_Verita+0xd4>)
 80023d0:	f7ff fa4e 	bl	8001870 <BL_UART_ExtendEraseMem_SP>

		//// WriteMem Set  =========================================
		//// case 31452 -> b must be loop 123 times  ----------------------------------
		for(register int b = 0;b < bootloop_n - 1;b++){
 80023d4:	2400      	movs	r4, #0
 80023d6:	e00b      	b.n	80023f0 <GrandState_Verita+0x8c>
			BL_UART_WriteMem(&huart1, 0x08000000 + (b*0x100), 255, &F411_Verita_Client[0x100*b]);
 80023d8:	f504 2300 	add.w	r3, r4, #524288	; 0x80000
 80023dc:	021b      	lsls	r3, r3, #8
 80023de:	4619      	mov	r1, r3
 80023e0:	0223      	lsls	r3, r4, #8
 80023e2:	4a18      	ldr	r2, [pc, #96]	; (8002444 <GrandState_Verita+0xe0>)
 80023e4:	4413      	add	r3, r2
 80023e6:	22ff      	movs	r2, #255	; 0xff
 80023e8:	4813      	ldr	r0, [pc, #76]	; (8002438 <GrandState_Verita+0xd4>)
 80023ea:	f7ff f915 	bl	8001618 <BL_UART_WriteMem>
		for(register int b = 0;b < bootloop_n - 1;b++){
 80023ee:	3401      	adds	r4, #1
 80023f0:	4b13      	ldr	r3, [pc, #76]	; (8002440 <GrandState_Verita+0xdc>)
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	3b01      	subs	r3, #1
 80023f6:	429c      	cmp	r4, r3
 80023f8:	dbee      	blt.n	80023d8 <GrandState_Verita+0x74>
		}
		//// last round: send only left bit (less 255)
		BL_UART_WriteMem(&huart1, 0x08000000 + ((bootloop_n-1)*0x100), boot_size % 256, &F411_Verita_Client[0x100*(bootloop_n-1)]);
 80023fa:	4b11      	ldr	r3, [pc, #68]	; (8002440 <GrandState_Verita+0xdc>)
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	f503 23ff 	add.w	r3, r3, #522240	; 0x7f800
 8002402:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8002406:	021b      	lsls	r3, r3, #8
 8002408:	4618      	mov	r0, r3
 800240a:	4b0c      	ldr	r3, [pc, #48]	; (800243c <GrandState_Verita+0xd8>)
 800240c:	881b      	ldrh	r3, [r3, #0]
 800240e:	b2da      	uxtb	r2, r3
 8002410:	4b0b      	ldr	r3, [pc, #44]	; (8002440 <GrandState_Verita+0xdc>)
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	3b01      	subs	r3, #1
 8002416:	021b      	lsls	r3, r3, #8
 8002418:	490a      	ldr	r1, [pc, #40]	; (8002444 <GrandState_Verita+0xe0>)
 800241a:	440b      	add	r3, r1
 800241c:	4601      	mov	r1, r0
 800241e:	4806      	ldr	r0, [pc, #24]	; (8002438 <GrandState_Verita+0xd4>)
 8002420:	f7ff f8fa 	bl	8001618 <BL_UART_WriteMem>
		//// WriteMem Set =========================================

		BL_UART_Finish();
 8002424:	f7ff f8da 	bl	80015dc <BL_UART_Finish>

		GrandState = lobby;
 8002428:	4b02      	ldr	r3, [pc, #8]	; (8002434 <GrandState_Verita+0xd0>)
 800242a:	2201      	movs	r2, #1
 800242c:	701a      	strb	r2, [r3, #0]

		break;
 800242e:	bf00      	nop
	}
}
 8002430:	bf00      	nop
 8002432:	bd98      	pop	{r3, r4, r7, pc}
 8002434:	20000006 	.word	0x20000006
 8002438:	2000031c 	.word	0x2000031c
 800243c:	20000004 	.word	0x20000004
 8002440:	200004d0 	.word	0x200004d0
 8002444:	0800c9c4 	.word	0x0800c9c4

08002448 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	4603      	mov	r3, r0
 8002450:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13){
 8002452:	88fb      	ldrh	r3, [r7, #6]
 8002454:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002458:	d107      	bne.n	800246a <HAL_GPIO_EXTI_Callback+0x22>
		//INA219_BitReset(&hi2c1, INA219_ADDR_1);
		flagc_bz = 12;
 800245a:	4b06      	ldr	r3, [pc, #24]	; (8002474 <HAL_GPIO_EXTI_Callback+0x2c>)
 800245c:	220c      	movs	r2, #12
 800245e:	701a      	strb	r2, [r3, #0]
		buzzer_scream_cnt();
 8002460:	f7ff ff04 	bl	800226c <buzzer_scream_cnt>

		//// bootloader test
		GrandState = s_bootloader;
 8002464:	4b04      	ldr	r3, [pc, #16]	; (8002478 <HAL_GPIO_EXTI_Callback+0x30>)
 8002466:	2202      	movs	r2, #2
 8002468:	701a      	strb	r2, [r3, #0]
		//GrandState = init;
		}
}
 800246a:	bf00      	nop
 800246c:	3708      	adds	r7, #8
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	2000057c 	.word	0x2000057c
 8002478:	20000006 	.word	0x20000006

0800247c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
	if(htim == &htim10){
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	4a07      	ldr	r2, [pc, #28]	; (80024a4 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d106      	bne.n	800249a <HAL_TIM_PeriodElapsedCallback+0x1e>
		_millis++;
 800248c:	4b06      	ldr	r3, [pc, #24]	; (80024a8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	3301      	adds	r3, #1
 8002492:	4a05      	ldr	r2, [pc, #20]	; (80024a8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8002494:	6013      	str	r3, [r2, #0]
		buzzer_scream_cnt();
 8002496:	f7ff fee9 	bl	800226c <buzzer_scream_cnt>
	}
}
 800249a:	bf00      	nop
 800249c:	3708      	adds	r7, #8
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	200002d4 	.word	0x200002d4
 80024a8:	20000578 	.word	0x20000578

080024ac <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
	counter++;
 80024b4:	4b05      	ldr	r3, [pc, #20]	; (80024cc <HAL_UART_RxCpltCallback+0x20>)
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	3301      	adds	r3, #1
 80024ba:	b2da      	uxtb	r2, r3
 80024bc:	4b03      	ldr	r3, [pc, #12]	; (80024cc <HAL_UART_RxCpltCallback+0x20>)
 80024be:	701a      	strb	r2, [r3, #0]
}
 80024c0:	bf00      	nop
 80024c2:	370c      	adds	r7, #12
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr
 80024cc:	20000586 	.word	0x20000586

080024d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024d4:	b672      	cpsid	i
}
 80024d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80024d8:	e7fe      	b.n	80024d8 <Error_Handler+0x8>
	...

080024dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024e2:	2300      	movs	r3, #0
 80024e4:	607b      	str	r3, [r7, #4]
 80024e6:	4b10      	ldr	r3, [pc, #64]	; (8002528 <HAL_MspInit+0x4c>)
 80024e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ea:	4a0f      	ldr	r2, [pc, #60]	; (8002528 <HAL_MspInit+0x4c>)
 80024ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024f0:	6453      	str	r3, [r2, #68]	; 0x44
 80024f2:	4b0d      	ldr	r3, [pc, #52]	; (8002528 <HAL_MspInit+0x4c>)
 80024f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024fa:	607b      	str	r3, [r7, #4]
 80024fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024fe:	2300      	movs	r3, #0
 8002500:	603b      	str	r3, [r7, #0]
 8002502:	4b09      	ldr	r3, [pc, #36]	; (8002528 <HAL_MspInit+0x4c>)
 8002504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002506:	4a08      	ldr	r2, [pc, #32]	; (8002528 <HAL_MspInit+0x4c>)
 8002508:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800250c:	6413      	str	r3, [r2, #64]	; 0x40
 800250e:	4b06      	ldr	r3, [pc, #24]	; (8002528 <HAL_MspInit+0x4c>)
 8002510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002512:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002516:	603b      	str	r3, [r7, #0]
 8002518:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800251a:	2007      	movs	r0, #7
 800251c:	f001 faa4 	bl	8003a68 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002520:	bf00      	nop
 8002522:	3708      	adds	r7, #8
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	40023800 	.word	0x40023800

0800252c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b08a      	sub	sp, #40	; 0x28
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002534:	f107 0314 	add.w	r3, r7, #20
 8002538:	2200      	movs	r2, #0
 800253a:	601a      	str	r2, [r3, #0]
 800253c:	605a      	str	r2, [r3, #4]
 800253e:	609a      	str	r2, [r3, #8]
 8002540:	60da      	str	r2, [r3, #12]
 8002542:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a21      	ldr	r2, [pc, #132]	; (80025d0 <HAL_I2C_MspInit+0xa4>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d13c      	bne.n	80025c8 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800254e:	2300      	movs	r3, #0
 8002550:	613b      	str	r3, [r7, #16]
 8002552:	4b20      	ldr	r3, [pc, #128]	; (80025d4 <HAL_I2C_MspInit+0xa8>)
 8002554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002556:	4a1f      	ldr	r2, [pc, #124]	; (80025d4 <HAL_I2C_MspInit+0xa8>)
 8002558:	f043 0302 	orr.w	r3, r3, #2
 800255c:	6313      	str	r3, [r2, #48]	; 0x30
 800255e:	4b1d      	ldr	r3, [pc, #116]	; (80025d4 <HAL_I2C_MspInit+0xa8>)
 8002560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002562:	f003 0302 	and.w	r3, r3, #2
 8002566:	613b      	str	r3, [r7, #16]
 8002568:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800256a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800256e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002570:	2312      	movs	r3, #18
 8002572:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002574:	2300      	movs	r3, #0
 8002576:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002578:	2303      	movs	r3, #3
 800257a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800257c:	2304      	movs	r3, #4
 800257e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002580:	f107 0314 	add.w	r3, r7, #20
 8002584:	4619      	mov	r1, r3
 8002586:	4814      	ldr	r0, [pc, #80]	; (80025d8 <HAL_I2C_MspInit+0xac>)
 8002588:	f001 fec0 	bl	800430c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800258c:	2300      	movs	r3, #0
 800258e:	60fb      	str	r3, [r7, #12]
 8002590:	4b10      	ldr	r3, [pc, #64]	; (80025d4 <HAL_I2C_MspInit+0xa8>)
 8002592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002594:	4a0f      	ldr	r2, [pc, #60]	; (80025d4 <HAL_I2C_MspInit+0xa8>)
 8002596:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800259a:	6413      	str	r3, [r2, #64]	; 0x40
 800259c:	4b0d      	ldr	r3, [pc, #52]	; (80025d4 <HAL_I2C_MspInit+0xa8>)
 800259e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025a4:	60fb      	str	r3, [r7, #12]
 80025a6:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80025a8:	2200      	movs	r2, #0
 80025aa:	2100      	movs	r1, #0
 80025ac:	201f      	movs	r0, #31
 80025ae:	f001 fa66 	bl	8003a7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80025b2:	201f      	movs	r0, #31
 80025b4:	f001 fa7f 	bl	8003ab6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80025b8:	2200      	movs	r2, #0
 80025ba:	2100      	movs	r1, #0
 80025bc:	2020      	movs	r0, #32
 80025be:	f001 fa5e 	bl	8003a7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80025c2:	2020      	movs	r0, #32
 80025c4:	f001 fa77 	bl	8003ab6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80025c8:	bf00      	nop
 80025ca:	3728      	adds	r7, #40	; 0x28
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	40005400 	.word	0x40005400
 80025d4:	40023800 	.word	0x40023800
 80025d8:	40020400 	.word	0x40020400

080025dc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b08a      	sub	sp, #40	; 0x28
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025e4:	f107 0314 	add.w	r3, r7, #20
 80025e8:	2200      	movs	r2, #0
 80025ea:	601a      	str	r2, [r3, #0]
 80025ec:	605a      	str	r2, [r3, #4]
 80025ee:	609a      	str	r2, [r3, #8]
 80025f0:	60da      	str	r2, [r3, #12]
 80025f2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a19      	ldr	r2, [pc, #100]	; (8002660 <HAL_SPI_MspInit+0x84>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d12c      	bne.n	8002658 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80025fe:	2300      	movs	r3, #0
 8002600:	613b      	str	r3, [r7, #16]
 8002602:	4b18      	ldr	r3, [pc, #96]	; (8002664 <HAL_SPI_MspInit+0x88>)
 8002604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002606:	4a17      	ldr	r2, [pc, #92]	; (8002664 <HAL_SPI_MspInit+0x88>)
 8002608:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800260c:	6413      	str	r3, [r2, #64]	; 0x40
 800260e:	4b15      	ldr	r3, [pc, #84]	; (8002664 <HAL_SPI_MspInit+0x88>)
 8002610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002612:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002616:	613b      	str	r3, [r7, #16]
 8002618:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800261a:	2300      	movs	r3, #0
 800261c:	60fb      	str	r3, [r7, #12]
 800261e:	4b11      	ldr	r3, [pc, #68]	; (8002664 <HAL_SPI_MspInit+0x88>)
 8002620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002622:	4a10      	ldr	r2, [pc, #64]	; (8002664 <HAL_SPI_MspInit+0x88>)
 8002624:	f043 0304 	orr.w	r3, r3, #4
 8002628:	6313      	str	r3, [r2, #48]	; 0x30
 800262a:	4b0e      	ldr	r3, [pc, #56]	; (8002664 <HAL_SPI_MspInit+0x88>)
 800262c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262e:	f003 0304 	and.w	r3, r3, #4
 8002632:	60fb      	str	r3, [r7, #12]
 8002634:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002636:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800263a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800263c:	2302      	movs	r3, #2
 800263e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002640:	2300      	movs	r3, #0
 8002642:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002644:	2303      	movs	r3, #3
 8002646:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002648:	2306      	movs	r3, #6
 800264a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800264c:	f107 0314 	add.w	r3, r7, #20
 8002650:	4619      	mov	r1, r3
 8002652:	4805      	ldr	r0, [pc, #20]	; (8002668 <HAL_SPI_MspInit+0x8c>)
 8002654:	f001 fe5a 	bl	800430c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002658:	bf00      	nop
 800265a:	3728      	adds	r7, #40	; 0x28
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	40003c00 	.word	0x40003c00
 8002664:	40023800 	.word	0x40023800
 8002668:	40020800 	.word	0x40020800

0800266c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b084      	sub	sp, #16
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a0e      	ldr	r2, [pc, #56]	; (80026b4 <HAL_TIM_Base_MspInit+0x48>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d115      	bne.n	80026aa <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 800267e:	2300      	movs	r3, #0
 8002680:	60fb      	str	r3, [r7, #12]
 8002682:	4b0d      	ldr	r3, [pc, #52]	; (80026b8 <HAL_TIM_Base_MspInit+0x4c>)
 8002684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002686:	4a0c      	ldr	r2, [pc, #48]	; (80026b8 <HAL_TIM_Base_MspInit+0x4c>)
 8002688:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800268c:	6453      	str	r3, [r2, #68]	; 0x44
 800268e:	4b0a      	ldr	r3, [pc, #40]	; (80026b8 <HAL_TIM_Base_MspInit+0x4c>)
 8002690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002696:	60fb      	str	r3, [r7, #12]
 8002698:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800269a:	2200      	movs	r2, #0
 800269c:	2100      	movs	r1, #0
 800269e:	2019      	movs	r0, #25
 80026a0:	f001 f9ed 	bl	8003a7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80026a4:	2019      	movs	r0, #25
 80026a6:	f001 fa06 	bl	8003ab6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 80026aa:	bf00      	nop
 80026ac:	3710      	adds	r7, #16
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	40014400 	.word	0x40014400
 80026b8:	40023800 	.word	0x40023800

080026bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b08e      	sub	sp, #56	; 0x38
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026c8:	2200      	movs	r2, #0
 80026ca:	601a      	str	r2, [r3, #0]
 80026cc:	605a      	str	r2, [r3, #4]
 80026ce:	609a      	str	r2, [r3, #8]
 80026d0:	60da      	str	r2, [r3, #12]
 80026d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a6b      	ldr	r2, [pc, #428]	; (8002888 <HAL_UART_MspInit+0x1cc>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d135      	bne.n	800274a <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80026de:	2300      	movs	r3, #0
 80026e0:	623b      	str	r3, [r7, #32]
 80026e2:	4b6a      	ldr	r3, [pc, #424]	; (800288c <HAL_UART_MspInit+0x1d0>)
 80026e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e6:	4a69      	ldr	r2, [pc, #420]	; (800288c <HAL_UART_MspInit+0x1d0>)
 80026e8:	f043 0310 	orr.w	r3, r3, #16
 80026ec:	6453      	str	r3, [r2, #68]	; 0x44
 80026ee:	4b67      	ldr	r3, [pc, #412]	; (800288c <HAL_UART_MspInit+0x1d0>)
 80026f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f2:	f003 0310 	and.w	r3, r3, #16
 80026f6:	623b      	str	r3, [r7, #32]
 80026f8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026fa:	2300      	movs	r3, #0
 80026fc:	61fb      	str	r3, [r7, #28]
 80026fe:	4b63      	ldr	r3, [pc, #396]	; (800288c <HAL_UART_MspInit+0x1d0>)
 8002700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002702:	4a62      	ldr	r2, [pc, #392]	; (800288c <HAL_UART_MspInit+0x1d0>)
 8002704:	f043 0301 	orr.w	r3, r3, #1
 8002708:	6313      	str	r3, [r2, #48]	; 0x30
 800270a:	4b60      	ldr	r3, [pc, #384]	; (800288c <HAL_UART_MspInit+0x1d0>)
 800270c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270e:	f003 0301 	and.w	r3, r3, #1
 8002712:	61fb      	str	r3, [r7, #28]
 8002714:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002716:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800271a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800271c:	2302      	movs	r3, #2
 800271e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002720:	2300      	movs	r3, #0
 8002722:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002724:	2303      	movs	r3, #3
 8002726:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002728:	2307      	movs	r3, #7
 800272a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800272c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002730:	4619      	mov	r1, r3
 8002732:	4857      	ldr	r0, [pc, #348]	; (8002890 <HAL_UART_MspInit+0x1d4>)
 8002734:	f001 fdea 	bl	800430c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002738:	2200      	movs	r2, #0
 800273a:	2100      	movs	r1, #0
 800273c:	2025      	movs	r0, #37	; 0x25
 800273e:	f001 f99e 	bl	8003a7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002742:	2025      	movs	r0, #37	; 0x25
 8002744:	f001 f9b7 	bl	8003ab6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002748:	e09a      	b.n	8002880 <HAL_UART_MspInit+0x1c4>
  else if(huart->Instance==USART2)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a51      	ldr	r2, [pc, #324]	; (8002894 <HAL_UART_MspInit+0x1d8>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d12c      	bne.n	80027ae <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002754:	2300      	movs	r3, #0
 8002756:	61bb      	str	r3, [r7, #24]
 8002758:	4b4c      	ldr	r3, [pc, #304]	; (800288c <HAL_UART_MspInit+0x1d0>)
 800275a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275c:	4a4b      	ldr	r2, [pc, #300]	; (800288c <HAL_UART_MspInit+0x1d0>)
 800275e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002762:	6413      	str	r3, [r2, #64]	; 0x40
 8002764:	4b49      	ldr	r3, [pc, #292]	; (800288c <HAL_UART_MspInit+0x1d0>)
 8002766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002768:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800276c:	61bb      	str	r3, [r7, #24]
 800276e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002770:	2300      	movs	r3, #0
 8002772:	617b      	str	r3, [r7, #20]
 8002774:	4b45      	ldr	r3, [pc, #276]	; (800288c <HAL_UART_MspInit+0x1d0>)
 8002776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002778:	4a44      	ldr	r2, [pc, #272]	; (800288c <HAL_UART_MspInit+0x1d0>)
 800277a:	f043 0301 	orr.w	r3, r3, #1
 800277e:	6313      	str	r3, [r2, #48]	; 0x30
 8002780:	4b42      	ldr	r3, [pc, #264]	; (800288c <HAL_UART_MspInit+0x1d0>)
 8002782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002784:	f003 0301 	and.w	r3, r3, #1
 8002788:	617b      	str	r3, [r7, #20]
 800278a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800278c:	230c      	movs	r3, #12
 800278e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002790:	2302      	movs	r3, #2
 8002792:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002794:	2300      	movs	r3, #0
 8002796:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002798:	2303      	movs	r3, #3
 800279a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800279c:	2307      	movs	r3, #7
 800279e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027a4:	4619      	mov	r1, r3
 80027a6:	483a      	ldr	r0, [pc, #232]	; (8002890 <HAL_UART_MspInit+0x1d4>)
 80027a8:	f001 fdb0 	bl	800430c <HAL_GPIO_Init>
}
 80027ac:	e068      	b.n	8002880 <HAL_UART_MspInit+0x1c4>
  else if(huart->Instance==USART6)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a39      	ldr	r2, [pc, #228]	; (8002898 <HAL_UART_MspInit+0x1dc>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d163      	bne.n	8002880 <HAL_UART_MspInit+0x1c4>
    __HAL_RCC_USART6_CLK_ENABLE();
 80027b8:	2300      	movs	r3, #0
 80027ba:	613b      	str	r3, [r7, #16]
 80027bc:	4b33      	ldr	r3, [pc, #204]	; (800288c <HAL_UART_MspInit+0x1d0>)
 80027be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c0:	4a32      	ldr	r2, [pc, #200]	; (800288c <HAL_UART_MspInit+0x1d0>)
 80027c2:	f043 0320 	orr.w	r3, r3, #32
 80027c6:	6453      	str	r3, [r2, #68]	; 0x44
 80027c8:	4b30      	ldr	r3, [pc, #192]	; (800288c <HAL_UART_MspInit+0x1d0>)
 80027ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027cc:	f003 0320 	and.w	r3, r3, #32
 80027d0:	613b      	str	r3, [r7, #16]
 80027d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027d4:	2300      	movs	r3, #0
 80027d6:	60fb      	str	r3, [r7, #12]
 80027d8:	4b2c      	ldr	r3, [pc, #176]	; (800288c <HAL_UART_MspInit+0x1d0>)
 80027da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027dc:	4a2b      	ldr	r2, [pc, #172]	; (800288c <HAL_UART_MspInit+0x1d0>)
 80027de:	f043 0301 	orr.w	r3, r3, #1
 80027e2:	6313      	str	r3, [r2, #48]	; 0x30
 80027e4:	4b29      	ldr	r3, [pc, #164]	; (800288c <HAL_UART_MspInit+0x1d0>)
 80027e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e8:	f003 0301 	and.w	r3, r3, #1
 80027ec:	60fb      	str	r3, [r7, #12]
 80027ee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80027f0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80027f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027f6:	2302      	movs	r3, #2
 80027f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027fa:	2300      	movs	r3, #0
 80027fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027fe:	2303      	movs	r3, #3
 8002800:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002802:	2308      	movs	r3, #8
 8002804:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002806:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800280a:	4619      	mov	r1, r3
 800280c:	4820      	ldr	r0, [pc, #128]	; (8002890 <HAL_UART_MspInit+0x1d4>)
 800280e:	f001 fd7d 	bl	800430c <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8002812:	4b22      	ldr	r3, [pc, #136]	; (800289c <HAL_UART_MspInit+0x1e0>)
 8002814:	4a22      	ldr	r2, [pc, #136]	; (80028a0 <HAL_UART_MspInit+0x1e4>)
 8002816:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8002818:	4b20      	ldr	r3, [pc, #128]	; (800289c <HAL_UART_MspInit+0x1e0>)
 800281a:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800281e:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002820:	4b1e      	ldr	r3, [pc, #120]	; (800289c <HAL_UART_MspInit+0x1e0>)
 8002822:	2200      	movs	r2, #0
 8002824:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002826:	4b1d      	ldr	r3, [pc, #116]	; (800289c <HAL_UART_MspInit+0x1e0>)
 8002828:	2200      	movs	r2, #0
 800282a:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 800282c:	4b1b      	ldr	r3, [pc, #108]	; (800289c <HAL_UART_MspInit+0x1e0>)
 800282e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002832:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002834:	4b19      	ldr	r3, [pc, #100]	; (800289c <HAL_UART_MspInit+0x1e0>)
 8002836:	2200      	movs	r2, #0
 8002838:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800283a:	4b18      	ldr	r3, [pc, #96]	; (800289c <HAL_UART_MspInit+0x1e0>)
 800283c:	2200      	movs	r2, #0
 800283e:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8002840:	4b16      	ldr	r3, [pc, #88]	; (800289c <HAL_UART_MspInit+0x1e0>)
 8002842:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002846:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002848:	4b14      	ldr	r3, [pc, #80]	; (800289c <HAL_UART_MspInit+0x1e0>)
 800284a:	2200      	movs	r2, #0
 800284c:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800284e:	4b13      	ldr	r3, [pc, #76]	; (800289c <HAL_UART_MspInit+0x1e0>)
 8002850:	2200      	movs	r2, #0
 8002852:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8002854:	4811      	ldr	r0, [pc, #68]	; (800289c <HAL_UART_MspInit+0x1e0>)
 8002856:	f001 f949 	bl	8003aec <HAL_DMA_Init>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d001      	beq.n	8002864 <HAL_UART_MspInit+0x1a8>
      Error_Handler();
 8002860:	f7ff fe36 	bl	80024d0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	4a0d      	ldr	r2, [pc, #52]	; (800289c <HAL_UART_MspInit+0x1e0>)
 8002868:	639a      	str	r2, [r3, #56]	; 0x38
 800286a:	4a0c      	ldr	r2, [pc, #48]	; (800289c <HAL_UART_MspInit+0x1e0>)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8002870:	2200      	movs	r2, #0
 8002872:	2100      	movs	r1, #0
 8002874:	2047      	movs	r0, #71	; 0x47
 8002876:	f001 f902 	bl	8003a7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800287a:	2047      	movs	r0, #71	; 0x47
 800287c:	f001 f91b 	bl	8003ab6 <HAL_NVIC_EnableIRQ>
}
 8002880:	bf00      	nop
 8002882:	3738      	adds	r7, #56	; 0x38
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	40011000 	.word	0x40011000
 800288c:	40023800 	.word	0x40023800
 8002890:	40020000 	.word	0x40020000
 8002894:	40004400 	.word	0x40004400
 8002898:	40011400 	.word	0x40011400
 800289c:	200003e8 	.word	0x200003e8
 80028a0:	40026428 	.word	0x40026428

080028a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028a4:	b480      	push	{r7}
 80028a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80028a8:	e7fe      	b.n	80028a8 <NMI_Handler+0x4>

080028aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028aa:	b480      	push	{r7}
 80028ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028ae:	e7fe      	b.n	80028ae <HardFault_Handler+0x4>

080028b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028b0:	b480      	push	{r7}
 80028b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028b4:	e7fe      	b.n	80028b4 <MemManage_Handler+0x4>

080028b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028b6:	b480      	push	{r7}
 80028b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028ba:	e7fe      	b.n	80028ba <BusFault_Handler+0x4>

080028bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028c0:	e7fe      	b.n	80028c0 <UsageFault_Handler+0x4>

080028c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028c2:	b480      	push	{r7}
 80028c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028c6:	bf00      	nop
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr

080028d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028d0:	b480      	push	{r7}
 80028d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028d4:	bf00      	nop
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr

080028de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028de:	b480      	push	{r7}
 80028e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028e2:	bf00      	nop
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr

080028ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028f0:	f000 ffa6 	bl	8003840 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028f4:	bf00      	nop
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80028fc:	4802      	ldr	r0, [pc, #8]	; (8002908 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80028fe:	f005 fbde 	bl	80080be <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002902:	bf00      	nop
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	200002d4 	.word	0x200002d4

0800290c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002910:	4802      	ldr	r0, [pc, #8]	; (800291c <I2C1_EV_IRQHandler+0x10>)
 8002912:	f002 fb2f 	bl	8004f74 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002916:	bf00      	nop
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	20000228 	.word	0x20000228

08002920 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002924:	4802      	ldr	r0, [pc, #8]	; (8002930 <I2C1_ER_IRQHandler+0x10>)
 8002926:	f002 fc96 	bl	8005256 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800292a:	bf00      	nop
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	20000228 	.word	0x20000228

08002934 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002938:	4802      	ldr	r0, [pc, #8]	; (8002944 <USART1_IRQHandler+0x10>)
 800293a:	f005 ff37 	bl	80087ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800293e:	bf00      	nop
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	2000031c 	.word	0x2000031c

08002948 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800294c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002950:	f001 fe94 	bl	800467c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002954:	bf00      	nop
 8002956:	bd80      	pop	{r7, pc}

08002958 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 800295c:	4802      	ldr	r0, [pc, #8]	; (8002968 <DMA2_Stream1_IRQHandler+0x10>)
 800295e:	f001 fa5d 	bl	8003e1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8002962:	bf00      	nop
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	200003e8 	.word	0x200003e8

0800296c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002970:	4802      	ldr	r0, [pc, #8]	; (800297c <USART6_IRQHandler+0x10>)
 8002972:	f005 ff1b 	bl	80087ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002976:	bf00      	nop
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	200003a4 	.word	0x200003a4

08002980 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0
	return 1;
 8002984:	2301      	movs	r3, #1
}
 8002986:	4618      	mov	r0, r3
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr

08002990 <_kill>:

int _kill(int pid, int sig)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800299a:	f006 fff9 	bl	8009990 <__errno>
 800299e:	4603      	mov	r3, r0
 80029a0:	2216      	movs	r2, #22
 80029a2:	601a      	str	r2, [r3, #0]
	return -1;
 80029a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3708      	adds	r7, #8
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <_exit>:

void _exit (int status)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80029b8:	f04f 31ff 	mov.w	r1, #4294967295
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	f7ff ffe7 	bl	8002990 <_kill>
	while (1) {}		/* Make sure we hang here */
 80029c2:	e7fe      	b.n	80029c2 <_exit+0x12>

080029c4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b086      	sub	sp, #24
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	60b9      	str	r1, [r7, #8]
 80029ce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029d0:	2300      	movs	r3, #0
 80029d2:	617b      	str	r3, [r7, #20]
 80029d4:	e00a      	b.n	80029ec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80029d6:	f3af 8000 	nop.w
 80029da:	4601      	mov	r1, r0
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	1c5a      	adds	r2, r3, #1
 80029e0:	60ba      	str	r2, [r7, #8]
 80029e2:	b2ca      	uxtb	r2, r1
 80029e4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	3301      	adds	r3, #1
 80029ea:	617b      	str	r3, [r7, #20]
 80029ec:	697a      	ldr	r2, [r7, #20]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	429a      	cmp	r2, r3
 80029f2:	dbf0      	blt.n	80029d6 <_read+0x12>
	}

return len;
 80029f4:	687b      	ldr	r3, [r7, #4]
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3718      	adds	r7, #24
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}

080029fe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80029fe:	b580      	push	{r7, lr}
 8002a00:	b086      	sub	sp, #24
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	60f8      	str	r0, [r7, #12]
 8002a06:	60b9      	str	r1, [r7, #8]
 8002a08:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	617b      	str	r3, [r7, #20]
 8002a0e:	e009      	b.n	8002a24 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	1c5a      	adds	r2, r3, #1
 8002a14:	60ba      	str	r2, [r7, #8]
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	3301      	adds	r3, #1
 8002a22:	617b      	str	r3, [r7, #20]
 8002a24:	697a      	ldr	r2, [r7, #20]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	dbf1      	blt.n	8002a10 <_write+0x12>
	}
	return len;
 8002a2c:	687b      	ldr	r3, [r7, #4]
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3718      	adds	r7, #24
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}

08002a36 <_close>:

int _close(int file)
{
 8002a36:	b480      	push	{r7}
 8002a38:	b083      	sub	sp, #12
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
	return -1;
 8002a3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	370c      	adds	r7, #12
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr

08002a4e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a4e:	b480      	push	{r7}
 8002a50:	b083      	sub	sp, #12
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]
 8002a56:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a5e:	605a      	str	r2, [r3, #4]
	return 0;
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	370c      	adds	r7, #12
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr

08002a6e <_isatty>:

int _isatty(int file)
{
 8002a6e:	b480      	push	{r7}
 8002a70:	b083      	sub	sp, #12
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6078      	str	r0, [r7, #4]
	return 1;
 8002a76:	2301      	movs	r3, #1
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	370c      	adds	r7, #12
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr

08002a84 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b085      	sub	sp, #20
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	60f8      	str	r0, [r7, #12]
 8002a8c:	60b9      	str	r1, [r7, #8]
 8002a8e:	607a      	str	r2, [r7, #4]
	return 0;
 8002a90:	2300      	movs	r3, #0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3714      	adds	r7, #20
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
	...

08002aa0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b086      	sub	sp, #24
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002aa8:	4a14      	ldr	r2, [pc, #80]	; (8002afc <_sbrk+0x5c>)
 8002aaa:	4b15      	ldr	r3, [pc, #84]	; (8002b00 <_sbrk+0x60>)
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ab4:	4b13      	ldr	r3, [pc, #76]	; (8002b04 <_sbrk+0x64>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d102      	bne.n	8002ac2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002abc:	4b11      	ldr	r3, [pc, #68]	; (8002b04 <_sbrk+0x64>)
 8002abe:	4a12      	ldr	r2, [pc, #72]	; (8002b08 <_sbrk+0x68>)
 8002ac0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ac2:	4b10      	ldr	r3, [pc, #64]	; (8002b04 <_sbrk+0x64>)
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4413      	add	r3, r2
 8002aca:	693a      	ldr	r2, [r7, #16]
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d207      	bcs.n	8002ae0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ad0:	f006 ff5e 	bl	8009990 <__errno>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	220c      	movs	r2, #12
 8002ad8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ada:	f04f 33ff 	mov.w	r3, #4294967295
 8002ade:	e009      	b.n	8002af4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ae0:	4b08      	ldr	r3, [pc, #32]	; (8002b04 <_sbrk+0x64>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ae6:	4b07      	ldr	r3, [pc, #28]	; (8002b04 <_sbrk+0x64>)
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4413      	add	r3, r2
 8002aee:	4a05      	ldr	r2, [pc, #20]	; (8002b04 <_sbrk+0x64>)
 8002af0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002af2:	68fb      	ldr	r3, [r7, #12]
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3718      	adds	r7, #24
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	20020000 	.word	0x20020000
 8002b00:	00000400 	.word	0x00000400
 8002b04:	2000058c 	.word	0x2000058c
 8002b08:	200005a8 	.word	0x200005a8

08002b0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b10:	4b06      	ldr	r3, [pc, #24]	; (8002b2c <SystemInit+0x20>)
 8002b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b16:	4a05      	ldr	r2, [pc, #20]	; (8002b2c <SystemInit+0x20>)
 8002b18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b20:	bf00      	nop
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
 8002b2a:	bf00      	nop
 8002b2c:	e000ed00 	.word	0xe000ed00

08002b30 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	af00      	add	r7, sp, #0
  LCD_IO_Bl_OnOff(1);
 8002b34:	2001      	movs	r0, #1
 8002b36:	f000 fcf0 	bl	800351a <LCD_IO_Bl_OnOff>
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_SLPOUT);    // Exit Sleep
 8002b3a:	2011      	movs	r0, #17
 8002b3c:	f000 fd74 	bl	8003628 <LCD_IO_WriteCmd8>
  ILI9341_LCDMUTEX_POP();
}
 8002b40:	bf00      	nop
 8002b42:	bd80      	pop	{r7, pc}

08002b44 <ili9341_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8002b44:	b480      	push	{r7}
 8002b46:	af00      	add	r7, sp, #0
  return ILI9341_SIZE_X;
 8002b48:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr

08002b56 <ili9341_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8002b56:	b480      	push	{r7}
 8002b58:	af00      	add	r7, sp, #0
  return ILI9341_SIZE_Y;
 8002b5a:	23f0      	movs	r3, #240	; 0xf0
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
	...

08002b68 <ili9341_Init>:
/* SPI or paralell mode */
#if ILI9341_INTERFACE_MODE == 1

//-----------------------------------------------------------------------------
void ili9341_Init(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af02      	add	r7, sp, #8
  if((Is_ili9341_Initialized & ILI9341_LCD_INITIALIZED) == 0)
 8002b6e:	4b52      	ldr	r3, [pc, #328]	; (8002cb8 <ili9341_Init+0x150>)
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	f003 0301 	and.w	r3, r3, #1
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d115      	bne.n	8002ba6 <ili9341_Init+0x3e>
  {
    Is_ili9341_Initialized |= ILI9341_LCD_INITIALIZED;
 8002b7a:	4b4f      	ldr	r3, [pc, #316]	; (8002cb8 <ili9341_Init+0x150>)
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	f043 0301 	orr.w	r3, r3, #1
 8002b82:	b2da      	uxtb	r2, r3
 8002b84:	4b4c      	ldr	r3, [pc, #304]	; (8002cb8 <ili9341_Init+0x150>)
 8002b86:	701a      	strb	r2, [r3, #0]
    if((Is_ili9341_Initialized & ILI9341_IO_INITIALIZED) == 0)
 8002b88:	4b4b      	ldr	r3, [pc, #300]	; (8002cb8 <ili9341_Init+0x150>)
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	f003 0302 	and.w	r3, r3, #2
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d101      	bne.n	8002b98 <ili9341_Init+0x30>
      LCD_IO_Init();
 8002b94:	f000 fccc 	bl	8003530 <LCD_IO_Init>
    Is_ili9341_Initialized |= ILI9341_IO_INITIALIZED;
 8002b98:	4b47      	ldr	r3, [pc, #284]	; (8002cb8 <ili9341_Init+0x150>)
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	f043 0302 	orr.w	r3, r3, #2
 8002ba0:	b2da      	uxtb	r2, r3
 8002ba2:	4b45      	ldr	r3, [pc, #276]	; (8002cb8 <ili9341_Init+0x150>)
 8002ba4:	701a      	strb	r2, [r3, #0]
  }

  LCD_Delay(10);
 8002ba6:	200a      	movs	r0, #10
 8002ba8:	f000 fcac 	bl	8003504 <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9341_SWRESET);
 8002bac:	2001      	movs	r0, #1
 8002bae:	f000 fd3b 	bl	8003628 <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 8002bb2:	200a      	movs	r0, #10
 8002bb4:	f000 fca6 	bl	8003504 <LCD_Delay>

  LCD_IO_WriteCmd8MultipleData8(0xEF, (uint8_t *)"\x03\x80\x02", 3);
 8002bb8:	2203      	movs	r2, #3
 8002bba:	4940      	ldr	r1, [pc, #256]	; (8002cbc <ili9341_Init+0x154>)
 8002bbc:	20ef      	movs	r0, #239	; 0xef
 8002bbe:	f000 fda1 	bl	8003704 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xCF, (uint8_t *)"\x00\xC1\x30", 3);
 8002bc2:	2203      	movs	r2, #3
 8002bc4:	493e      	ldr	r1, [pc, #248]	; (8002cc0 <ili9341_Init+0x158>)
 8002bc6:	20cf      	movs	r0, #207	; 0xcf
 8002bc8:	f000 fd9c 	bl	8003704 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xED, (uint8_t *)"\x64\x03\x12\x81", 4);
 8002bcc:	2204      	movs	r2, #4
 8002bce:	493d      	ldr	r1, [pc, #244]	; (8002cc4 <ili9341_Init+0x15c>)
 8002bd0:	20ed      	movs	r0, #237	; 0xed
 8002bd2:	f000 fd97 	bl	8003704 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xE8, (uint8_t *)"\x85\x00\x78", 3);
 8002bd6:	2203      	movs	r2, #3
 8002bd8:	493b      	ldr	r1, [pc, #236]	; (8002cc8 <ili9341_Init+0x160>)
 8002bda:	20e8      	movs	r0, #232	; 0xe8
 8002bdc:	f000 fd92 	bl	8003704 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xCB, (uint8_t *)"\x39\x2C\x00\x34\x02", 5);
 8002be0:	2205      	movs	r2, #5
 8002be2:	493a      	ldr	r1, [pc, #232]	; (8002ccc <ili9341_Init+0x164>)
 8002be4:	20cb      	movs	r0, #203	; 0xcb
 8002be6:	f000 fd8d 	bl	8003704 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xF7, (uint8_t *)"\x20", 1);
 8002bea:	2201      	movs	r2, #1
 8002bec:	4938      	ldr	r1, [pc, #224]	; (8002cd0 <ili9341_Init+0x168>)
 8002bee:	20f7      	movs	r0, #247	; 0xf7
 8002bf0:	f000 fd88 	bl	8003704 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xEA, (uint8_t *)"\x00\x00", 2);
 8002bf4:	2202      	movs	r2, #2
 8002bf6:	4937      	ldr	r1, [pc, #220]	; (8002cd4 <ili9341_Init+0x16c>)
 8002bf8:	20ea      	movs	r0, #234	; 0xea
 8002bfa:	f000 fd83 	bl	8003704 <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 1 (Vreg1out, Verg2out)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PWCTR1, (uint8_t *)"\x23", 1);
 8002bfe:	2201      	movs	r2, #1
 8002c00:	4935      	ldr	r1, [pc, #212]	; (8002cd8 <ili9341_Init+0x170>)
 8002c02:	20c0      	movs	r0, #192	; 0xc0
 8002c04:	f000 fd7e 	bl	8003704 <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 2 (VGH,VGL)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PWCTR2, (uint8_t *)"\x10", 1);
 8002c08:	2201      	movs	r2, #1
 8002c0a:	4934      	ldr	r1, [pc, #208]	; (8002cdc <ili9341_Init+0x174>)
 8002c0c:	20c1      	movs	r0, #193	; 0xc1
 8002c0e:	f000 fd79 	bl	8003704 <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 3 (Vcom)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_VMCTR1, (uint8_t *)"\x3E\x28", 2);
 8002c12:	2202      	movs	r2, #2
 8002c14:	4932      	ldr	r1, [pc, #200]	; (8002ce0 <ili9341_Init+0x178>)
 8002c16:	20c5      	movs	r0, #197	; 0xc5
 8002c18:	f000 fd74 	bl	8003704 <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 3 (Vcom)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_VMCTR2, (uint8_t *)"\x86", 1);
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	4931      	ldr	r1, [pc, #196]	; (8002ce4 <ili9341_Init+0x17c>)
 8002c20:	20c7      	movs	r0, #199	; 0xc7
 8002c22:	f000 fd6f 	bl	8003704 <LCD_IO_WriteCmd8MultipleData8>

  // Vertical scroll zero
  LCD_IO_WriteCmd8MultipleData8(ILI9341_VSCRSADD, (uint8_t *)"\x00", 1);
 8002c26:	2201      	movs	r2, #1
 8002c28:	492f      	ldr	r1, [pc, #188]	; (8002ce8 <ili9341_Init+0x180>)
 8002c2a:	2037      	movs	r0, #55	; 0x37
 8002c2c:	f000 fd6a 	bl	8003704 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PIXFMT, (uint8_t *)"\x55", 1);
 8002c30:	2201      	movs	r2, #1
 8002c32:	492e      	ldr	r1, [pc, #184]	; (8002cec <ili9341_Init+0x184>)
 8002c34:	203a      	movs	r0, #58	; 0x3a
 8002c36:	f000 fd65 	bl	8003704 <LCD_IO_WriteCmd8MultipleData8>

  // LCD_IO_WriteCmd8MultipleData8(0xF6, (uint8_t *)"\x01\x00\x06", 3);

  LCD_IO_WriteCmd8MultipleData8(ILI9341_FRMCTR1, (uint8_t *)"\x00\x18", 2);
 8002c3a:	2202      	movs	r2, #2
 8002c3c:	492c      	ldr	r1, [pc, #176]	; (8002cf0 <ili9341_Init+0x188>)
 8002c3e:	20b1      	movs	r0, #177	; 0xb1
 8002c40:	f000 fd60 	bl	8003704 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_DFUNCTR, (uint8_t *)"\x08\x82\x27", 3);  // Display Function Control
 8002c44:	2203      	movs	r2, #3
 8002c46:	492b      	ldr	r1, [pc, #172]	; (8002cf4 <ili9341_Init+0x18c>)
 8002c48:	20b6      	movs	r0, #182	; 0xb6
 8002c4a:	f000 fd5b 	bl	8003704 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xF2, (uint8_t *)"\x00", 1);            // 3Gamma Function Disable
 8002c4e:	2201      	movs	r2, #1
 8002c50:	4925      	ldr	r1, [pc, #148]	; (8002ce8 <ili9341_Init+0x180>)
 8002c52:	20f2      	movs	r0, #242	; 0xf2
 8002c54:	f000 fd56 	bl	8003704 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_GAMMASET, (uint8_t *)"\x01", 1);// Gamma curve selected
 8002c58:	2201      	movs	r2, #1
 8002c5a:	4927      	ldr	r1, [pc, #156]	; (8002cf8 <ili9341_Init+0x190>)
 8002c5c:	2026      	movs	r0, #38	; 0x26
 8002c5e:	f000 fd51 	bl	8003704 <LCD_IO_WriteCmd8MultipleData8>

  // positive gamma control
  LCD_IO_WriteCmd8MultipleData8(ILI9341_GMCTRP1, (uint8_t *)"\x0F\x31\x2B\x0C\x0E\x08\x4E\xF1\x37\x07\x10\x03\x0E\x09\x00", 15);
 8002c62:	220f      	movs	r2, #15
 8002c64:	4925      	ldr	r1, [pc, #148]	; (8002cfc <ili9341_Init+0x194>)
 8002c66:	20e0      	movs	r0, #224	; 0xe0
 8002c68:	f000 fd4c 	bl	8003704 <LCD_IO_WriteCmd8MultipleData8>

  // negative gamma control
  LCD_IO_WriteCmd8MultipleData8(ILI9341_GMCTRN1, (uint8_t *)"\x00\x0E\x14\x03\x11\x07\x31\xC1\x48\x08\x0F\x0C\x31\x36\x0F", 15);
 8002c6c:	220f      	movs	r2, #15
 8002c6e:	4924      	ldr	r1, [pc, #144]	; (8002d00 <ili9341_Init+0x198>)
 8002c70:	20e1      	movs	r0, #225	; 0xe1
 8002c72:	f000 fd47 	bl	8003704 <LCD_IO_WriteCmd8MultipleData8>

  LCD_IO_WriteCmd8(ILI9341_MADCTL); LCD_IO_WriteData8(ILI9341_MAD_DATA_RIGHT_THEN_DOWN);
 8002c76:	2036      	movs	r0, #54	; 0x36
 8002c78:	f000 fcd6 	bl	8003628 <LCD_IO_WriteCmd8>
 8002c7c:	20e8      	movs	r0, #232	; 0xe8
 8002c7e:	f000 fcf1 	bl	8003664 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_SLPOUT);    // Exit Sleep
 8002c82:	2011      	movs	r0, #17
 8002c84:	f000 fcd0 	bl	8003628 <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 8002c88:	200a      	movs	r0, #10
 8002c8a:	f000 fc3b 	bl	8003504 <LCD_Delay>

  #if ILI9341_INITCLEAR == 1
  ili9341_FillRect(0, 0, ILI9341_SIZE_X, ILI9341_SIZE_Y, 0x0000);
 8002c8e:	2300      	movs	r3, #0
 8002c90:	9300      	str	r3, [sp, #0]
 8002c92:	23f0      	movs	r3, #240	; 0xf0
 8002c94:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002c98:	2100      	movs	r1, #0
 8002c9a:	2000      	movs	r0, #0
 8002c9c:	f000 f87c 	bl	8002d98 <ili9341_FillRect>
  LCD_Delay(10);
 8002ca0:	200a      	movs	r0, #10
 8002ca2:	f000 fc2f 	bl	8003504 <LCD_Delay>
  #endif
  
  LCD_IO_WriteCmd8(ILI9341_DISPON);    // Display on
 8002ca6:	2029      	movs	r0, #41	; 0x29
 8002ca8:	f000 fcbe 	bl	8003628 <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 8002cac:	200a      	movs	r0, #10
 8002cae:	f000 fc29 	bl	8003504 <LCD_Delay>
}
 8002cb2:	bf00      	nop
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	20000590 	.word	0x20000590
 8002cbc:	0800c958 	.word	0x0800c958
 8002cc0:	0800c95c 	.word	0x0800c95c
 8002cc4:	0800c960 	.word	0x0800c960
 8002cc8:	0800c968 	.word	0x0800c968
 8002ccc:	0800c96c 	.word	0x0800c96c
 8002cd0:	0800c974 	.word	0x0800c974
 8002cd4:	0800c978 	.word	0x0800c978
 8002cd8:	0800c97c 	.word	0x0800c97c
 8002cdc:	0800c980 	.word	0x0800c980
 8002ce0:	0800c984 	.word	0x0800c984
 8002ce4:	0800c988 	.word	0x0800c988
 8002ce8:	0800c98c 	.word	0x0800c98c
 8002cec:	0800c990 	.word	0x0800c990
 8002cf0:	0800c994 	.word	0x0800c994
 8002cf4:	0800c998 	.word	0x0800c998
 8002cf8:	0800c99c 	.word	0x0800c99c
 8002cfc:	0800c9a0 	.word	0x0800c9a0
 8002d00:	0800c9b0 	.word	0x0800c9b0

08002d04 <ili9341_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color
  * @retval None
  */
void ili9341_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	80fb      	strh	r3, [r7, #6]
 8002d0e:	460b      	mov	r3, r1
 8002d10:	80bb      	strh	r3, [r7, #4]
 8002d12:	4613      	mov	r3, r2
 8002d14:	807b      	strh	r3, [r7, #2]
  ILI9341_LCDMUTEX_PUSH();
  ILI9341_SETCURSOR(Xpos, Ypos);
 8002d16:	202a      	movs	r0, #42	; 0x2a
 8002d18:	f000 fc86 	bl	8003628 <LCD_IO_WriteCmd8>
 8002d1c:	88fb      	ldrh	r3, [r7, #6]
 8002d1e:	0a1b      	lsrs	r3, r3, #8
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	4618      	mov	r0, r3
 8002d26:	f000 fc9d 	bl	8003664 <LCD_IO_WriteData8>
 8002d2a:	88fb      	ldrh	r3, [r7, #6]
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f000 fc98 	bl	8003664 <LCD_IO_WriteData8>
 8002d34:	88fb      	ldrh	r3, [r7, #6]
 8002d36:	0a1b      	lsrs	r3, r3, #8
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f000 fc91 	bl	8003664 <LCD_IO_WriteData8>
 8002d42:	88fb      	ldrh	r3, [r7, #6]
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	4618      	mov	r0, r3
 8002d48:	f000 fc8c 	bl	8003664 <LCD_IO_WriteData8>
 8002d4c:	202b      	movs	r0, #43	; 0x2b
 8002d4e:	f000 fc6b 	bl	8003628 <LCD_IO_WriteCmd8>
 8002d52:	88bb      	ldrh	r3, [r7, #4]
 8002d54:	0a1b      	lsrs	r3, r3, #8
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f000 fc82 	bl	8003664 <LCD_IO_WriteData8>
 8002d60:	88bb      	ldrh	r3, [r7, #4]
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	4618      	mov	r0, r3
 8002d66:	f000 fc7d 	bl	8003664 <LCD_IO_WriteData8>
 8002d6a:	88bb      	ldrh	r3, [r7, #4]
 8002d6c:	0a1b      	lsrs	r3, r3, #8
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	4618      	mov	r0, r3
 8002d74:	f000 fc76 	bl	8003664 <LCD_IO_WriteData8>
 8002d78:	88bb      	ldrh	r3, [r7, #4]
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f000 fc71 	bl	8003664 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_RAMWR); LCD_IO_WriteData16(RGBCode);
 8002d82:	202c      	movs	r0, #44	; 0x2c
 8002d84:	f000 fc50 	bl	8003628 <LCD_IO_WriteCmd8>
 8002d88:	887b      	ldrh	r3, [r7, #2]
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f000 fc80 	bl	8003690 <LCD_IO_WriteData16>
  ILI9341_LCDMUTEX_POP();
}
 8002d90:	bf00      	nop
 8002d92:	3708      	adds	r7, #8
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}

08002d98 <ili9341_FillRect>:
  * @param  Ysize:    specifies the Y size
  * @param  RGBCode:  specifies the RGB color
  * @retval None
  */
void ili9341_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t RGBCode)
{
 8002d98:	b590      	push	{r4, r7, lr}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	4604      	mov	r4, r0
 8002da0:	4608      	mov	r0, r1
 8002da2:	4611      	mov	r1, r2
 8002da4:	461a      	mov	r2, r3
 8002da6:	4623      	mov	r3, r4
 8002da8:	80fb      	strh	r3, [r7, #6]
 8002daa:	4603      	mov	r3, r0
 8002dac:	80bb      	strh	r3, [r7, #4]
 8002dae:	460b      	mov	r3, r1
 8002db0:	807b      	strh	r3, [r7, #2]
 8002db2:	4613      	mov	r3, r2
 8002db4:	803b      	strh	r3, [r7, #0]
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Xsize - 1);
 8002db6:	202a      	movs	r0, #42	; 0x2a
 8002db8:	f000 fc36 	bl	8003628 <LCD_IO_WriteCmd8>
 8002dbc:	88fb      	ldrh	r3, [r7, #6]
 8002dbe:	0a1b      	lsrs	r3, r3, #8
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f000 fc4d 	bl	8003664 <LCD_IO_WriteData8>
 8002dca:	88fb      	ldrh	r3, [r7, #6]
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f000 fc48 	bl	8003664 <LCD_IO_WriteData8>
 8002dd4:	88fa      	ldrh	r2, [r7, #6]
 8002dd6:	887b      	ldrh	r3, [r7, #2]
 8002dd8:	4413      	add	r3, r2
 8002dda:	3b01      	subs	r3, #1
 8002ddc:	121b      	asrs	r3, r3, #8
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	4618      	mov	r0, r3
 8002de2:	f000 fc3f 	bl	8003664 <LCD_IO_WriteData8>
 8002de6:	88fb      	ldrh	r3, [r7, #6]
 8002de8:	b2da      	uxtb	r2, r3
 8002dea:	887b      	ldrh	r3, [r7, #2]
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	4413      	add	r3, r2
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	3b01      	subs	r3, #1
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	4618      	mov	r0, r3
 8002df8:	f000 fc34 	bl	8003664 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Ysize - 1);
 8002dfc:	202b      	movs	r0, #43	; 0x2b
 8002dfe:	f000 fc13 	bl	8003628 <LCD_IO_WriteCmd8>
 8002e02:	88bb      	ldrh	r3, [r7, #4]
 8002e04:	0a1b      	lsrs	r3, r3, #8
 8002e06:	b29b      	uxth	r3, r3
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f000 fc2a 	bl	8003664 <LCD_IO_WriteData8>
 8002e10:	88bb      	ldrh	r3, [r7, #4]
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	4618      	mov	r0, r3
 8002e16:	f000 fc25 	bl	8003664 <LCD_IO_WriteData8>
 8002e1a:	88ba      	ldrh	r2, [r7, #4]
 8002e1c:	883b      	ldrh	r3, [r7, #0]
 8002e1e:	4413      	add	r3, r2
 8002e20:	3b01      	subs	r3, #1
 8002e22:	121b      	asrs	r3, r3, #8
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	4618      	mov	r0, r3
 8002e28:	f000 fc1c 	bl	8003664 <LCD_IO_WriteData8>
 8002e2c:	88bb      	ldrh	r3, [r7, #4]
 8002e2e:	b2da      	uxtb	r2, r3
 8002e30:	883b      	ldrh	r3, [r7, #0]
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	4413      	add	r3, r2
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	3b01      	subs	r3, #1
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f000 fc11 	bl	8003664 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8DataFill16(ILI9341_RAMWR, RGBCode, Xsize * Ysize);
 8002e42:	887b      	ldrh	r3, [r7, #2]
 8002e44:	883a      	ldrh	r2, [r7, #0]
 8002e46:	fb02 f303 	mul.w	r3, r2, r3
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	8b3b      	ldrh	r3, [r7, #24]
 8002e4e:	4619      	mov	r1, r3
 8002e50:	202c      	movs	r0, #44	; 0x2c
 8002e52:	f000 fc33 	bl	80036bc <LCD_IO_WriteCmd8DataFill16>
  ILI9341_LCDMUTEX_POP();
}
 8002e56:	bf00      	nop
 8002e58:	370c      	adds	r7, #12
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd90      	pop	{r4, r7, pc}

08002e5e <ili9341_WriteChar>:
  * @param  fonto: font select (from font.h)
  * @param  RGB_Coder: Text Color
  * @param  RGB_bg: Char background Color
  * @retval None
  */
void ili9341_WriteChar(uint16_t Xpo, uint16_t Ypo, const char *chr,sFONT fonto, uint16_t RGB_Coder, uint16_t RGB_bg){
 8002e5e:	b082      	sub	sp, #8
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b08a      	sub	sp, #40	; 0x28
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	603a      	str	r2, [r7, #0]
 8002e68:	637b      	str	r3, [r7, #52]	; 0x34
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	80fb      	strh	r3, [r7, #6]
 8002e6e:	460b      	mov	r3, r1
 8002e70:	80bb      	strh	r3, [r7, #4]
	/*ex
	 * ili9341_WriteChar(140, 50, "E", Font24, cl_ORANGE, cl_BLACK);
	 * */
	//// stored font data
	uint32_t hop32 = 0;
 8002e72:	2300      	movs	r3, #0
 8002e74:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t b8[4] = {0};
 8002e76:	2300      	movs	r3, #0
 8002e78:	60fb      	str	r3, [r7, #12]
	 * c = i * rowbox -> jump to next column in next i rowloop
	 * k => jump to next row in that column
	 * */

	//// find num of bit rows per jump in fonts.c
	int rowbox = ceilf((float)(fonto.Width) / 8);
 8002e7a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002e7c:	ee07 3a90 	vmov	s15, r3
 8002e80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e84:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8002e88:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002e8c:	eeb0 0a47 	vmov.f32	s0, s14
 8002e90:	f009 fcc4 	bl	800c81c <ceilf>
 8002e94:	eef0 7a40 	vmov.f32	s15, s0
 8002e98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e9c:	ee17 3a90 	vmov	r3, s15
 8002ea0:	617b      	str	r3, [r7, #20]

	//// choose MSB check pos for each font size
	//// 0x80 , 0x8000 , 0x 800000
	uint32_t clif_msb = 0x80 << (8 * (rowbox - 1));
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	3b01      	subs	r3, #1
 8002ea6:	00db      	lsls	r3, r3, #3
 8002ea8:	2280      	movs	r2, #128	; 0x80
 8002eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8002eae:	613b      	str	r3, [r7, #16]

	//// -32 to offset sync ASCII Table start " " at 32
	//// double for loop as one char table
	for(int i = 0; i < fonto.Height; i++){
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	623b      	str	r3, [r7, #32]
 8002eb4:	e060      	b.n	8002f78 <ili9341_WriteChar+0x11a>
		hop32 = 0;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	627b      	str	r3, [r7, #36]	; 0x24
		for(int k = 0;k < rowbox;k++){
 8002eba:	2300      	movs	r3, #0
 8002ebc:	61fb      	str	r3, [r7, #28]
 8002ebe:	e024      	b.n	8002f0a <ili9341_WriteChar+0xac>
			b8[k] = fonto.table[((int)(*chr - 32) * fonto.Height * rowbox) + (i * rowbox) + k];
 8002ec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ec2:	683a      	ldr	r2, [r7, #0]
 8002ec4:	7812      	ldrb	r2, [r2, #0]
 8002ec6:	3a20      	subs	r2, #32
 8002ec8:	8f79      	ldrh	r1, [r7, #58]	; 0x3a
 8002eca:	fb01 f202 	mul.w	r2, r1, r2
 8002ece:	6979      	ldr	r1, [r7, #20]
 8002ed0:	fb02 f101 	mul.w	r1, r2, r1
 8002ed4:	6a3a      	ldr	r2, [r7, #32]
 8002ed6:	6978      	ldr	r0, [r7, #20]
 8002ed8:	fb00 f202 	mul.w	r2, r0, r2
 8002edc:	4411      	add	r1, r2
 8002ede:	69fa      	ldr	r2, [r7, #28]
 8002ee0:	440a      	add	r2, r1
 8002ee2:	4413      	add	r3, r2
 8002ee4:	7819      	ldrb	r1, [r3, #0]
 8002ee6:	f107 020c 	add.w	r2, r7, #12
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	4413      	add	r3, r2
 8002eee:	460a      	mov	r2, r1
 8002ef0:	701a      	strb	r2, [r3, #0]
			hop32 = (hop32 << 8) + b8[k];
 8002ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef4:	021b      	lsls	r3, r3, #8
 8002ef6:	f107 010c 	add.w	r1, r7, #12
 8002efa:	69fa      	ldr	r2, [r7, #28]
 8002efc:	440a      	add	r2, r1
 8002efe:	7812      	ldrb	r2, [r2, #0]
 8002f00:	4413      	add	r3, r2
 8002f02:	627b      	str	r3, [r7, #36]	; 0x24
		for(int k = 0;k < rowbox;k++){
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	3301      	adds	r3, #1
 8002f08:	61fb      	str	r3, [r7, #28]
 8002f0a:	69fa      	ldr	r2, [r7, #28]
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	dbd6      	blt.n	8002ec0 <ili9341_WriteChar+0x62>
		}

		for(int j = 0; j < fonto.Width; j++){
 8002f12:	2300      	movs	r3, #0
 8002f14:	61bb      	str	r3, [r7, #24]
 8002f16:	e027      	b.n	8002f68 <ili9341_WriteChar+0x10a>
			//// if valuein fonttable is 1
			if((hop32 << j) & clif_msb){ // buu32.b32
 8002f18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f1a:	69bb      	ldr	r3, [r7, #24]
 8002f1c:	409a      	lsls	r2, r3
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	4013      	ands	r3, r2
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d00e      	beq.n	8002f44 <ili9341_WriteChar+0xe6>
				ili9341_WritePixel(Xpo + j, Ypo + i, RGB_Coder);
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	b29a      	uxth	r2, r3
 8002f2a:	88fb      	ldrh	r3, [r7, #6]
 8002f2c:	4413      	add	r3, r2
 8002f2e:	b298      	uxth	r0, r3
 8002f30:	6a3b      	ldr	r3, [r7, #32]
 8002f32:	b29a      	uxth	r2, r3
 8002f34:	88bb      	ldrh	r3, [r7, #4]
 8002f36:	4413      	add	r3, r2
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	f7ff fee1 	bl	8002d04 <ili9341_WritePixel>
 8002f42:	e00e      	b.n	8002f62 <ili9341_WriteChar+0x104>
			}
			//// for background write
			else{
				ili9341_WritePixel(Xpo + j, Ypo + i, RGB_bg);
 8002f44:	69bb      	ldr	r3, [r7, #24]
 8002f46:	b29a      	uxth	r2, r3
 8002f48:	88fb      	ldrh	r3, [r7, #6]
 8002f4a:	4413      	add	r3, r2
 8002f4c:	b298      	uxth	r0, r3
 8002f4e:	6a3b      	ldr	r3, [r7, #32]
 8002f50:	b29a      	uxth	r2, r3
 8002f52:	88bb      	ldrh	r3, [r7, #4]
 8002f54:	4413      	add	r3, r2
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	f7ff fed1 	bl	8002d04 <ili9341_WritePixel>
		for(int j = 0; j < fonto.Width; j++){
 8002f62:	69bb      	ldr	r3, [r7, #24]
 8002f64:	3301      	adds	r3, #1
 8002f66:	61bb      	str	r3, [r7, #24]
 8002f68:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	69bb      	ldr	r3, [r7, #24]
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	dbd2      	blt.n	8002f18 <ili9341_WriteChar+0xba>
	for(int i = 0; i < fonto.Height; i++){
 8002f72:	6a3b      	ldr	r3, [r7, #32]
 8002f74:	3301      	adds	r3, #1
 8002f76:	623b      	str	r3, [r7, #32]
 8002f78:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	6a3b      	ldr	r3, [r7, #32]
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	db99      	blt.n	8002eb6 <ili9341_WriteChar+0x58>
			}

		}
	}
}
 8002f82:	bf00      	nop
 8002f84:	bf00      	nop
 8002f86:	3728      	adds	r7, #40	; 0x28
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002f8e:	b002      	add	sp, #8
 8002f90:	4770      	bx	lr

08002f92 <ili9341_WriteString>:
  * @param  fonto: font select (from font.h)
  * @param  RGB_Coder: Text Color
  * @param  RGB_bg: Text background Color
  * @retval None
  */
void ili9341_WriteString(uint16_t Xpo, uint16_t Ypo,const char* strr,sFONT fonto, uint16_t RGB_Coder, uint16_t RGB_bg){
 8002f92:	b082      	sub	sp, #8
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b088      	sub	sp, #32
 8002f98:	af04      	add	r7, sp, #16
 8002f9a:	603a      	str	r2, [r7, #0]
 8002f9c:	61fb      	str	r3, [r7, #28]
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	80fb      	strh	r3, [r7, #6]
 8002fa2:	460b      	mov	r3, r1
 8002fa4:	80bb      	strh	r3, [r7, #4]
	/*ex
	 * ili9341_WriteString(20, 300, "Helios xTerra", Font20, cl_WHITE, cl_BLACK);
	 * */
	uint16_t ili_heigh = ili9341_GetLcdPixelHeight();
 8002fa6:	f7ff fdd6 	bl	8002b56 <ili9341_GetLcdPixelHeight>
 8002faa:	4603      	mov	r3, r0
 8002fac:	81fb      	strh	r3, [r7, #14]
	uint16_t ili_width = ili9341_GetLcdPixelWidth();
 8002fae:	f7ff fdc9 	bl	8002b44 <ili9341_GetLcdPixelWidth>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	81bb      	strh	r3, [r7, #12]
	while(*strr){
 8002fb6:	e02c      	b.n	8003012 <ili9341_WriteString+0x80>
	//// Check screen overflow / new line
		if(Xpo + fonto.Width >= ili_width){
 8002fb8:	88fb      	ldrh	r3, [r7, #6]
 8002fba:	8c3a      	ldrh	r2, [r7, #32]
 8002fbc:	441a      	add	r2, r3
 8002fbe:	89bb      	ldrh	r3, [r7, #12]
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	db13      	blt.n	8002fec <ili9341_WriteString+0x5a>
			Xpo = 0;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	80fb      	strh	r3, [r7, #6]
			Ypo += fonto.Height;
 8002fc8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8002fca:	88bb      	ldrh	r3, [r7, #4]
 8002fcc:	4413      	add	r3, r2
 8002fce:	80bb      	strh	r3, [r7, #4]

			if(Ypo + fonto.Height >= ili_heigh){
 8002fd0:	88bb      	ldrh	r3, [r7, #4]
 8002fd2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8002fd4:	441a      	add	r2, r3
 8002fd6:	89fb      	ldrh	r3, [r7, #14]
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	da1f      	bge.n	800301c <ili9341_WriteString+0x8a>
				break;
			}

			if(*strr == ' ') {
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	2b20      	cmp	r3, #32
 8002fe2:	d103      	bne.n	8002fec <ili9341_WriteString+0x5a>
				// skip spaces in the beginning of the new line
				strr++;
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	603b      	str	r3, [r7, #0]
				continue;
 8002fea:	e012      	b.n	8003012 <ili9341_WriteString+0x80>
			}
		}
		//ST7735_WriteChar(x, y, *str, font, color, bgcolor);
		ili9341_WriteChar(Xpo, Ypo, strr, fonto, RGB_Coder, RGB_bg);
 8002fec:	88b9      	ldrh	r1, [r7, #4]
 8002fee:	88f8      	ldrh	r0, [r7, #6]
 8002ff0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002ff2:	9302      	str	r3, [sp, #8]
 8002ff4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002ff6:	9301      	str	r3, [sp, #4]
 8002ff8:	6a3b      	ldr	r3, [r7, #32]
 8002ffa:	9300      	str	r3, [sp, #0]
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	683a      	ldr	r2, [r7, #0]
 8003000:	f7ff ff2d 	bl	8002e5e <ili9341_WriteChar>
		Xpo += fonto.Width;
 8003004:	8c3a      	ldrh	r2, [r7, #32]
 8003006:	88fb      	ldrh	r3, [r7, #6]
 8003008:	4413      	add	r3, r2
 800300a:	80fb      	strh	r3, [r7, #6]
		strr++;
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	3301      	adds	r3, #1
 8003010:	603b      	str	r3, [r7, #0]
	while(*strr){
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d1ce      	bne.n	8002fb8 <ili9341_WriteString+0x26>
	}
}
 800301a:	e000      	b.n	800301e <ili9341_WriteString+0x8c>
				break;
 800301c:	bf00      	nop
}
 800301e:	bf00      	nop
 8003020:	3710      	adds	r7, #16
 8003022:	46bd      	mov	sp, r7
 8003024:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003028:	b002      	add	sp, #8
 800302a:	4770      	bx	lr

0800302c <LcdWrite8>:

#define LCD_WRITE_CLK         GPIOX_ODR(LCD_SCK) = 0; LCD_WRITE_DELAY; GPIOX_ODR(LCD_SCK) = 1;
#define LCD_READ_CLK          GPIOX_ODR(LCD_SCK) = 1; GPIOX_ODR(LCD_SCK) = 0; LCD_READ_DELAY;

void LcdWrite8(uint8_t d8)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	4603      	mov	r3, r0
 8003034:	71fb      	strb	r3, [r7, #7]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 7);
 8003036:	1dfb      	adds	r3, r7, #7
 8003038:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800303c:	1dfb      	adds	r3, r7, #7
 800303e:	015b      	lsls	r3, r3, #5
 8003040:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8003044:	f023 031f 	bic.w	r3, r3, #31
 8003048:	4313      	orrs	r3, r2
 800304a:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800304e:	331c      	adds	r3, #28
 8003050:	4a53      	ldr	r2, [pc, #332]	; (80031a0 <LcdWrite8+0x174>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8003056:	4b53      	ldr	r3, [pc, #332]	; (80031a4 <LcdWrite8+0x178>)
 8003058:	2200      	movs	r2, #0
 800305a:	601a      	str	r2, [r3, #0]
 800305c:	4b51      	ldr	r3, [pc, #324]	; (80031a4 <LcdWrite8+0x178>)
 800305e:	2201      	movs	r2, #1
 8003060:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 6);
 8003062:	1dfb      	adds	r3, r7, #7
 8003064:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8003068:	1dfb      	adds	r3, r7, #7
 800306a:	015b      	lsls	r3, r3, #5
 800306c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8003070:	f023 031f 	bic.w	r3, r3, #31
 8003074:	4313      	orrs	r3, r2
 8003076:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800307a:	3318      	adds	r3, #24
 800307c:	4a48      	ldr	r2, [pc, #288]	; (80031a0 <LcdWrite8+0x174>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8003082:	4b48      	ldr	r3, [pc, #288]	; (80031a4 <LcdWrite8+0x178>)
 8003084:	2200      	movs	r2, #0
 8003086:	601a      	str	r2, [r3, #0]
 8003088:	4b46      	ldr	r3, [pc, #280]	; (80031a4 <LcdWrite8+0x178>)
 800308a:	2201      	movs	r2, #1
 800308c:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 5);
 800308e:	1dfb      	adds	r3, r7, #7
 8003090:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8003094:	1dfb      	adds	r3, r7, #7
 8003096:	015b      	lsls	r3, r3, #5
 8003098:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 800309c:	f023 031f 	bic.w	r3, r3, #31
 80030a0:	4313      	orrs	r3, r2
 80030a2:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80030a6:	3314      	adds	r3, #20
 80030a8:	4a3d      	ldr	r2, [pc, #244]	; (80031a0 <LcdWrite8+0x174>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 80030ae:	4b3d      	ldr	r3, [pc, #244]	; (80031a4 <LcdWrite8+0x178>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	601a      	str	r2, [r3, #0]
 80030b4:	4b3b      	ldr	r3, [pc, #236]	; (80031a4 <LcdWrite8+0x178>)
 80030b6:	2201      	movs	r2, #1
 80030b8:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 4);
 80030ba:	1dfb      	adds	r3, r7, #7
 80030bc:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80030c0:	1dfb      	adds	r3, r7, #7
 80030c2:	015b      	lsls	r3, r3, #5
 80030c4:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80030c8:	f023 031f 	bic.w	r3, r3, #31
 80030cc:	4313      	orrs	r3, r2
 80030ce:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80030d2:	3310      	adds	r3, #16
 80030d4:	4a32      	ldr	r2, [pc, #200]	; (80031a0 <LcdWrite8+0x174>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 80030da:	4b32      	ldr	r3, [pc, #200]	; (80031a4 <LcdWrite8+0x178>)
 80030dc:	2200      	movs	r2, #0
 80030de:	601a      	str	r2, [r3, #0]
 80030e0:	4b30      	ldr	r3, [pc, #192]	; (80031a4 <LcdWrite8+0x178>)
 80030e2:	2201      	movs	r2, #1
 80030e4:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 3);
 80030e6:	1dfb      	adds	r3, r7, #7
 80030e8:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80030ec:	1dfb      	adds	r3, r7, #7
 80030ee:	015b      	lsls	r3, r3, #5
 80030f0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80030f4:	f023 031f 	bic.w	r3, r3, #31
 80030f8:	4313      	orrs	r3, r2
 80030fa:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80030fe:	330c      	adds	r3, #12
 8003100:	4a27      	ldr	r2, [pc, #156]	; (80031a0 <LcdWrite8+0x174>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8003106:	4b27      	ldr	r3, [pc, #156]	; (80031a4 <LcdWrite8+0x178>)
 8003108:	2200      	movs	r2, #0
 800310a:	601a      	str	r2, [r3, #0]
 800310c:	4b25      	ldr	r3, [pc, #148]	; (80031a4 <LcdWrite8+0x178>)
 800310e:	2201      	movs	r2, #1
 8003110:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 2);
 8003112:	1dfb      	adds	r3, r7, #7
 8003114:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8003118:	1dfb      	adds	r3, r7, #7
 800311a:	015b      	lsls	r3, r3, #5
 800311c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8003120:	f023 031f 	bic.w	r3, r3, #31
 8003124:	4313      	orrs	r3, r2
 8003126:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800312a:	3308      	adds	r3, #8
 800312c:	4a1c      	ldr	r2, [pc, #112]	; (80031a0 <LcdWrite8+0x174>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8003132:	4b1c      	ldr	r3, [pc, #112]	; (80031a4 <LcdWrite8+0x178>)
 8003134:	2200      	movs	r2, #0
 8003136:	601a      	str	r2, [r3, #0]
 8003138:	4b1a      	ldr	r3, [pc, #104]	; (80031a4 <LcdWrite8+0x178>)
 800313a:	2201      	movs	r2, #1
 800313c:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 1);
 800313e:	1dfb      	adds	r3, r7, #7
 8003140:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8003144:	1dfb      	adds	r3, r7, #7
 8003146:	015b      	lsls	r3, r3, #5
 8003148:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 800314c:	f023 031f 	bic.w	r3, r3, #31
 8003150:	4313      	orrs	r3, r2
 8003152:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8003156:	3304      	adds	r3, #4
 8003158:	4a11      	ldr	r2, [pc, #68]	; (80031a0 <LcdWrite8+0x174>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 800315e:	4b11      	ldr	r3, [pc, #68]	; (80031a4 <LcdWrite8+0x178>)
 8003160:	2200      	movs	r2, #0
 8003162:	601a      	str	r2, [r3, #0]
 8003164:	4b0f      	ldr	r3, [pc, #60]	; (80031a4 <LcdWrite8+0x178>)
 8003166:	2201      	movs	r2, #1
 8003168:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 0);
 800316a:	1dfb      	adds	r3, r7, #7
 800316c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8003170:	1dfb      	adds	r3, r7, #7
 8003172:	015b      	lsls	r3, r3, #5
 8003174:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8003178:	f023 031f 	bic.w	r3, r3, #31
 800317c:	4313      	orrs	r3, r2
 800317e:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8003182:	4a07      	ldr	r2, [pc, #28]	; (80031a0 <LcdWrite8+0x174>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8003188:	4b06      	ldr	r3, [pc, #24]	; (80031a4 <LcdWrite8+0x178>)
 800318a:	2200      	movs	r2, #0
 800318c:	601a      	str	r2, [r3, #0]
 800318e:	4b05      	ldr	r3, [pc, #20]	; (80031a4 <LcdWrite8+0x178>)
 8003190:	2201      	movs	r2, #1
 8003192:	601a      	str	r2, [r3, #0]
}
 8003194:	bf00      	nop
 8003196:	370c      	adds	r7, #12
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr
 80031a0:	4241028c 	.word	0x4241028c
 80031a4:	42408280 	.word	0x42408280

080031a8 <LcdWrite16>:

void LcdWrite16(uint16_t d16)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	4603      	mov	r3, r0
 80031b0:	80fb      	strh	r3, [r7, #6]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 15);
 80031b2:	1dbb      	adds	r3, r7, #6
 80031b4:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80031b8:	1dbb      	adds	r3, r7, #6
 80031ba:	015b      	lsls	r3, r3, #5
 80031bc:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80031c0:	f023 031f 	bic.w	r3, r3, #31
 80031c4:	4313      	orrs	r3, r2
 80031c6:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80031ca:	333c      	adds	r3, #60	; 0x3c
 80031cc:	4aab      	ldr	r2, [pc, #684]	; (800347c <LcdWrite16+0x2d4>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 80031d2:	4bab      	ldr	r3, [pc, #684]	; (8003480 <LcdWrite16+0x2d8>)
 80031d4:	2200      	movs	r2, #0
 80031d6:	601a      	str	r2, [r3, #0]
 80031d8:	4ba9      	ldr	r3, [pc, #676]	; (8003480 <LcdWrite16+0x2d8>)
 80031da:	2201      	movs	r2, #1
 80031dc:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 14);
 80031de:	1dbb      	adds	r3, r7, #6
 80031e0:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80031e4:	1dbb      	adds	r3, r7, #6
 80031e6:	015b      	lsls	r3, r3, #5
 80031e8:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80031ec:	f023 031f 	bic.w	r3, r3, #31
 80031f0:	4313      	orrs	r3, r2
 80031f2:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80031f6:	3338      	adds	r3, #56	; 0x38
 80031f8:	4aa0      	ldr	r2, [pc, #640]	; (800347c <LcdWrite16+0x2d4>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 80031fe:	4ba0      	ldr	r3, [pc, #640]	; (8003480 <LcdWrite16+0x2d8>)
 8003200:	2200      	movs	r2, #0
 8003202:	601a      	str	r2, [r3, #0]
 8003204:	4b9e      	ldr	r3, [pc, #632]	; (8003480 <LcdWrite16+0x2d8>)
 8003206:	2201      	movs	r2, #1
 8003208:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 13);
 800320a:	1dbb      	adds	r3, r7, #6
 800320c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8003210:	1dbb      	adds	r3, r7, #6
 8003212:	015b      	lsls	r3, r3, #5
 8003214:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8003218:	f023 031f 	bic.w	r3, r3, #31
 800321c:	4313      	orrs	r3, r2
 800321e:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8003222:	3334      	adds	r3, #52	; 0x34
 8003224:	4a95      	ldr	r2, [pc, #596]	; (800347c <LcdWrite16+0x2d4>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 800322a:	4b95      	ldr	r3, [pc, #596]	; (8003480 <LcdWrite16+0x2d8>)
 800322c:	2200      	movs	r2, #0
 800322e:	601a      	str	r2, [r3, #0]
 8003230:	4b93      	ldr	r3, [pc, #588]	; (8003480 <LcdWrite16+0x2d8>)
 8003232:	2201      	movs	r2, #1
 8003234:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 12);
 8003236:	1dbb      	adds	r3, r7, #6
 8003238:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800323c:	1dbb      	adds	r3, r7, #6
 800323e:	015b      	lsls	r3, r3, #5
 8003240:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8003244:	f023 031f 	bic.w	r3, r3, #31
 8003248:	4313      	orrs	r3, r2
 800324a:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800324e:	3330      	adds	r3, #48	; 0x30
 8003250:	4a8a      	ldr	r2, [pc, #552]	; (800347c <LcdWrite16+0x2d4>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8003256:	4b8a      	ldr	r3, [pc, #552]	; (8003480 <LcdWrite16+0x2d8>)
 8003258:	2200      	movs	r2, #0
 800325a:	601a      	str	r2, [r3, #0]
 800325c:	4b88      	ldr	r3, [pc, #544]	; (8003480 <LcdWrite16+0x2d8>)
 800325e:	2201      	movs	r2, #1
 8003260:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 11);
 8003262:	1dbb      	adds	r3, r7, #6
 8003264:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8003268:	1dbb      	adds	r3, r7, #6
 800326a:	015b      	lsls	r3, r3, #5
 800326c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8003270:	f023 031f 	bic.w	r3, r3, #31
 8003274:	4313      	orrs	r3, r2
 8003276:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800327a:	332c      	adds	r3, #44	; 0x2c
 800327c:	4a7f      	ldr	r2, [pc, #508]	; (800347c <LcdWrite16+0x2d4>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8003282:	4b7f      	ldr	r3, [pc, #508]	; (8003480 <LcdWrite16+0x2d8>)
 8003284:	2200      	movs	r2, #0
 8003286:	601a      	str	r2, [r3, #0]
 8003288:	4b7d      	ldr	r3, [pc, #500]	; (8003480 <LcdWrite16+0x2d8>)
 800328a:	2201      	movs	r2, #1
 800328c:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 10);
 800328e:	1dbb      	adds	r3, r7, #6
 8003290:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8003294:	1dbb      	adds	r3, r7, #6
 8003296:	015b      	lsls	r3, r3, #5
 8003298:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 800329c:	f023 031f 	bic.w	r3, r3, #31
 80032a0:	4313      	orrs	r3, r2
 80032a2:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80032a6:	3328      	adds	r3, #40	; 0x28
 80032a8:	4a74      	ldr	r2, [pc, #464]	; (800347c <LcdWrite16+0x2d4>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 80032ae:	4b74      	ldr	r3, [pc, #464]	; (8003480 <LcdWrite16+0x2d8>)
 80032b0:	2200      	movs	r2, #0
 80032b2:	601a      	str	r2, [r3, #0]
 80032b4:	4b72      	ldr	r3, [pc, #456]	; (8003480 <LcdWrite16+0x2d8>)
 80032b6:	2201      	movs	r2, #1
 80032b8:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 9);
 80032ba:	1dbb      	adds	r3, r7, #6
 80032bc:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80032c0:	1dbb      	adds	r3, r7, #6
 80032c2:	015b      	lsls	r3, r3, #5
 80032c4:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80032c8:	f023 031f 	bic.w	r3, r3, #31
 80032cc:	4313      	orrs	r3, r2
 80032ce:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80032d2:	3324      	adds	r3, #36	; 0x24
 80032d4:	4a69      	ldr	r2, [pc, #420]	; (800347c <LcdWrite16+0x2d4>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 80032da:	4b69      	ldr	r3, [pc, #420]	; (8003480 <LcdWrite16+0x2d8>)
 80032dc:	2200      	movs	r2, #0
 80032de:	601a      	str	r2, [r3, #0]
 80032e0:	4b67      	ldr	r3, [pc, #412]	; (8003480 <LcdWrite16+0x2d8>)
 80032e2:	2201      	movs	r2, #1
 80032e4:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 8);
 80032e6:	1dbb      	adds	r3, r7, #6
 80032e8:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80032ec:	1dbb      	adds	r3, r7, #6
 80032ee:	015b      	lsls	r3, r3, #5
 80032f0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80032f4:	f023 031f 	bic.w	r3, r3, #31
 80032f8:	4313      	orrs	r3, r2
 80032fa:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80032fe:	3320      	adds	r3, #32
 8003300:	4a5e      	ldr	r2, [pc, #376]	; (800347c <LcdWrite16+0x2d4>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8003306:	4b5e      	ldr	r3, [pc, #376]	; (8003480 <LcdWrite16+0x2d8>)
 8003308:	2200      	movs	r2, #0
 800330a:	601a      	str	r2, [r3, #0]
 800330c:	4b5c      	ldr	r3, [pc, #368]	; (8003480 <LcdWrite16+0x2d8>)
 800330e:	2201      	movs	r2, #1
 8003310:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 7);
 8003312:	1dbb      	adds	r3, r7, #6
 8003314:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8003318:	1dbb      	adds	r3, r7, #6
 800331a:	015b      	lsls	r3, r3, #5
 800331c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8003320:	f023 031f 	bic.w	r3, r3, #31
 8003324:	4313      	orrs	r3, r2
 8003326:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800332a:	331c      	adds	r3, #28
 800332c:	4a53      	ldr	r2, [pc, #332]	; (800347c <LcdWrite16+0x2d4>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8003332:	4b53      	ldr	r3, [pc, #332]	; (8003480 <LcdWrite16+0x2d8>)
 8003334:	2200      	movs	r2, #0
 8003336:	601a      	str	r2, [r3, #0]
 8003338:	4b51      	ldr	r3, [pc, #324]	; (8003480 <LcdWrite16+0x2d8>)
 800333a:	2201      	movs	r2, #1
 800333c:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 6);
 800333e:	1dbb      	adds	r3, r7, #6
 8003340:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8003344:	1dbb      	adds	r3, r7, #6
 8003346:	015b      	lsls	r3, r3, #5
 8003348:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 800334c:	f023 031f 	bic.w	r3, r3, #31
 8003350:	4313      	orrs	r3, r2
 8003352:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8003356:	3318      	adds	r3, #24
 8003358:	4a48      	ldr	r2, [pc, #288]	; (800347c <LcdWrite16+0x2d4>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 800335e:	4b48      	ldr	r3, [pc, #288]	; (8003480 <LcdWrite16+0x2d8>)
 8003360:	2200      	movs	r2, #0
 8003362:	601a      	str	r2, [r3, #0]
 8003364:	4b46      	ldr	r3, [pc, #280]	; (8003480 <LcdWrite16+0x2d8>)
 8003366:	2201      	movs	r2, #1
 8003368:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 5);
 800336a:	1dbb      	adds	r3, r7, #6
 800336c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8003370:	1dbb      	adds	r3, r7, #6
 8003372:	015b      	lsls	r3, r3, #5
 8003374:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8003378:	f023 031f 	bic.w	r3, r3, #31
 800337c:	4313      	orrs	r3, r2
 800337e:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8003382:	3314      	adds	r3, #20
 8003384:	4a3d      	ldr	r2, [pc, #244]	; (800347c <LcdWrite16+0x2d4>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 800338a:	4b3d      	ldr	r3, [pc, #244]	; (8003480 <LcdWrite16+0x2d8>)
 800338c:	2200      	movs	r2, #0
 800338e:	601a      	str	r2, [r3, #0]
 8003390:	4b3b      	ldr	r3, [pc, #236]	; (8003480 <LcdWrite16+0x2d8>)
 8003392:	2201      	movs	r2, #1
 8003394:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 4);
 8003396:	1dbb      	adds	r3, r7, #6
 8003398:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800339c:	1dbb      	adds	r3, r7, #6
 800339e:	015b      	lsls	r3, r3, #5
 80033a0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80033a4:	f023 031f 	bic.w	r3, r3, #31
 80033a8:	4313      	orrs	r3, r2
 80033aa:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80033ae:	3310      	adds	r3, #16
 80033b0:	4a32      	ldr	r2, [pc, #200]	; (800347c <LcdWrite16+0x2d4>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 80033b6:	4b32      	ldr	r3, [pc, #200]	; (8003480 <LcdWrite16+0x2d8>)
 80033b8:	2200      	movs	r2, #0
 80033ba:	601a      	str	r2, [r3, #0]
 80033bc:	4b30      	ldr	r3, [pc, #192]	; (8003480 <LcdWrite16+0x2d8>)
 80033be:	2201      	movs	r2, #1
 80033c0:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 3);
 80033c2:	1dbb      	adds	r3, r7, #6
 80033c4:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80033c8:	1dbb      	adds	r3, r7, #6
 80033ca:	015b      	lsls	r3, r3, #5
 80033cc:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80033d0:	f023 031f 	bic.w	r3, r3, #31
 80033d4:	4313      	orrs	r3, r2
 80033d6:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80033da:	330c      	adds	r3, #12
 80033dc:	4a27      	ldr	r2, [pc, #156]	; (800347c <LcdWrite16+0x2d4>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 80033e2:	4b27      	ldr	r3, [pc, #156]	; (8003480 <LcdWrite16+0x2d8>)
 80033e4:	2200      	movs	r2, #0
 80033e6:	601a      	str	r2, [r3, #0]
 80033e8:	4b25      	ldr	r3, [pc, #148]	; (8003480 <LcdWrite16+0x2d8>)
 80033ea:	2201      	movs	r2, #1
 80033ec:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 2);
 80033ee:	1dbb      	adds	r3, r7, #6
 80033f0:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80033f4:	1dbb      	adds	r3, r7, #6
 80033f6:	015b      	lsls	r3, r3, #5
 80033f8:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80033fc:	f023 031f 	bic.w	r3, r3, #31
 8003400:	4313      	orrs	r3, r2
 8003402:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8003406:	3308      	adds	r3, #8
 8003408:	4a1c      	ldr	r2, [pc, #112]	; (800347c <LcdWrite16+0x2d4>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 800340e:	4b1c      	ldr	r3, [pc, #112]	; (8003480 <LcdWrite16+0x2d8>)
 8003410:	2200      	movs	r2, #0
 8003412:	601a      	str	r2, [r3, #0]
 8003414:	4b1a      	ldr	r3, [pc, #104]	; (8003480 <LcdWrite16+0x2d8>)
 8003416:	2201      	movs	r2, #1
 8003418:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 1);
 800341a:	1dbb      	adds	r3, r7, #6
 800341c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8003420:	1dbb      	adds	r3, r7, #6
 8003422:	015b      	lsls	r3, r3, #5
 8003424:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8003428:	f023 031f 	bic.w	r3, r3, #31
 800342c:	4313      	orrs	r3, r2
 800342e:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8003432:	3304      	adds	r3, #4
 8003434:	4a11      	ldr	r2, [pc, #68]	; (800347c <LcdWrite16+0x2d4>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 800343a:	4b11      	ldr	r3, [pc, #68]	; (8003480 <LcdWrite16+0x2d8>)
 800343c:	2200      	movs	r2, #0
 800343e:	601a      	str	r2, [r3, #0]
 8003440:	4b0f      	ldr	r3, [pc, #60]	; (8003480 <LcdWrite16+0x2d8>)
 8003442:	2201      	movs	r2, #1
 8003444:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 0);
 8003446:	1dbb      	adds	r3, r7, #6
 8003448:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800344c:	1dbb      	adds	r3, r7, #6
 800344e:	015b      	lsls	r3, r3, #5
 8003450:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8003454:	f023 031f 	bic.w	r3, r3, #31
 8003458:	4313      	orrs	r3, r2
 800345a:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800345e:	4a07      	ldr	r2, [pc, #28]	; (800347c <LcdWrite16+0x2d4>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8003464:	4b06      	ldr	r3, [pc, #24]	; (8003480 <LcdWrite16+0x2d8>)
 8003466:	2200      	movs	r2, #0
 8003468:	601a      	str	r2, [r3, #0]
 800346a:	4b05      	ldr	r3, [pc, #20]	; (8003480 <LcdWrite16+0x2d8>)
 800346c:	2201      	movs	r2, #1
 800346e:	601a      	str	r2, [r3, #0]
}
 8003470:	bf00      	nop
 8003472:	370c      	adds	r7, #12
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr
 800347c:	4241028c 	.word	0x4241028c
 8003480:	42408280 	.word	0x42408280

08003484 <LCD_IO_WriteMultiData8>:
#if DMANUM(LCD_DMA_TX) == 0 || LCD_SPI == 0

/* SPI TX no DMA */

void LCD_IO_WriteMultiData8(uint8_t * pData, uint32_t Size, uint32_t dinc)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af00      	add	r7, sp, #0
 800348a:	60f8      	str	r0, [r7, #12]
 800348c:	60b9      	str	r1, [r7, #8]
 800348e:	607a      	str	r2, [r7, #4]
  while(Size--)
 8003490:	e00a      	b.n	80034a8 <LCD_IO_WriteMultiData8+0x24>
  {
    LcdWrite8(*pData);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	4618      	mov	r0, r3
 8003498:	f7ff fdc8 	bl	800302c <LcdWrite8>
    if(dinc)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d002      	beq.n	80034a8 <LCD_IO_WriteMultiData8+0x24>
      pData++;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	3301      	adds	r3, #1
 80034a6:	60fb      	str	r3, [r7, #12]
  while(Size--)
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	1e5a      	subs	r2, r3, #1
 80034ac:	60ba      	str	r2, [r7, #8]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d1ef      	bne.n	8003492 <LCD_IO_WriteMultiData8+0xe>
  }
  LCD_CS_OFF;
 80034b2:	4b03      	ldr	r3, [pc, #12]	; (80034c0 <LCD_IO_WriteMultiData8+0x3c>)
 80034b4:	2201      	movs	r2, #1
 80034b6:	601a      	str	r2, [r3, #0]
}
 80034b8:	bf00      	nop
 80034ba:	3710      	adds	r7, #16
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	42410284 	.word	0x42410284

080034c4 <LCD_IO_WriteMultiData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteMultiData16(uint16_t * pData, uint32_t Size, uint32_t dinc)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b084      	sub	sp, #16
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	60f8      	str	r0, [r7, #12]
 80034cc:	60b9      	str	r1, [r7, #8]
 80034ce:	607a      	str	r2, [r7, #4]
  while(Size--)
 80034d0:	e00a      	b.n	80034e8 <LCD_IO_WriteMultiData16+0x24>
  {
    LcdWrite16(*pData);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	881b      	ldrh	r3, [r3, #0]
 80034d6:	4618      	mov	r0, r3
 80034d8:	f7ff fe66 	bl	80031a8 <LcdWrite16>
    if(dinc)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d002      	beq.n	80034e8 <LCD_IO_WriteMultiData16+0x24>
      pData++;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	3302      	adds	r3, #2
 80034e6:	60fb      	str	r3, [r7, #12]
  while(Size--)
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	1e5a      	subs	r2, r3, #1
 80034ec:	60ba      	str	r2, [r7, #8]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d1ef      	bne.n	80034d2 <LCD_IO_WriteMultiData16+0xe>
  }
  LCD_CS_OFF;
 80034f2:	4b03      	ldr	r3, [pc, #12]	; (8003500 <LCD_IO_WriteMultiData16+0x3c>)
 80034f4:	2201      	movs	r2, #1
 80034f6:	601a      	str	r2, [r3, #0]
}
 80034f8:	bf00      	nop
 80034fa:	3710      	adds	r7, #16
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	42410284 	.word	0x42410284

08003504 <LCD_Delay>:

//=============================================================================
/* Public functions */

void LCD_Delay(uint32_t Delay)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b082      	sub	sp, #8
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f000 f9b7 	bl	8003880 <HAL_Delay>
}
 8003512:	bf00      	nop
 8003514:	3708      	adds	r7, #8
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}

0800351a <LCD_IO_Bl_OnOff>:

//-----------------------------------------------------------------------------
void LCD_IO_Bl_OnOff(uint8_t Bl)
{
 800351a:	b480      	push	{r7}
 800351c:	b083      	sub	sp, #12
 800351e:	af00      	add	r7, sp, #0
 8003520:	4603      	mov	r3, r0
 8003522:	71fb      	strb	r3, [r7, #7]
  if(Bl)
    GPIOX_ODR(LCD_BL) = LCD_BLON;
  else
    GPIOX_ODR(LCD_BL) = 1 - LCD_BLON;
  #endif
}
 8003524:	bf00      	nop
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr

08003530 <LCD_IO_Init>:

//-----------------------------------------------------------------------------
void LCD_IO_Init(void)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	af00      	add	r7, sp, #0
  #define DMA1_CLOCK_RX         0
  #endif
  #endif  // #else LCD_SPI == 0

  /* GPIO, DMA Clocks */
  RCC->AHB1ENR |= GPIOX_CLOCK(LCD_RS) | GPIOX_CLOCK(LCD_CS) | GPIOX_CLOCK(LCD_SCK) | GPIOX_CLOCK(LCD_MOSI) |
 8003534:	4b34      	ldr	r3, [pc, #208]	; (8003608 <LCD_IO_Init+0xd8>)
 8003536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003538:	4a33      	ldr	r2, [pc, #204]	; (8003608 <LCD_IO_Init+0xd8>)
 800353a:	f043 0307 	orr.w	r3, r3, #7
 800353e:	6313      	str	r3, [r2, #48]	; 0x30
  LCD_IO_Bl_OnOff(1);
  #endif

  /* Reset pin = output, reset off */
  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A
  GPIOX_MODER(MODE_OUT, LCD_RST);
 8003540:	4b32      	ldr	r3, [pc, #200]	; (800360c <LCD_IO_Init+0xdc>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003548:	4a30      	ldr	r2, [pc, #192]	; (800360c <LCD_IO_Init+0xdc>)
 800354a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800354e:	6013      	str	r3, [r2, #0]
  GPIOX_OSPEEDR(MODE_SPD_LOW, LCD_RST);
 8003550:	4b2e      	ldr	r3, [pc, #184]	; (800360c <LCD_IO_Init+0xdc>)
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	4a2d      	ldr	r2, [pc, #180]	; (800360c <LCD_IO_Init+0xdc>)
 8003556:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800355a:	6093      	str	r3, [r2, #8]
  LCD_RST_OFF;
 800355c:	4b2c      	ldr	r3, [pc, #176]	; (8003610 <LCD_IO_Init+0xe0>)
 800355e:	2201      	movs	r2, #1
 8003560:	601a      	str	r2, [r3, #0]
  #endif

  LCD_RS_DATA;
 8003562:	4b2c      	ldr	r3, [pc, #176]	; (8003614 <LCD_IO_Init+0xe4>)
 8003564:	2201      	movs	r2, #1
 8003566:	601a      	str	r2, [r3, #0]
  LCD_CS_OFF;
 8003568:	4b2b      	ldr	r3, [pc, #172]	; (8003618 <LCD_IO_Init+0xe8>)
 800356a:	2201      	movs	r2, #1
 800356c:	601a      	str	r2, [r3, #0]
  GPIOX_MODER(MODE_OUT, LCD_RS);
 800356e:	4b2b      	ldr	r3, [pc, #172]	; (800361c <LCD_IO_Init+0xec>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f023 0303 	bic.w	r3, r3, #3
 8003576:	4a29      	ldr	r2, [pc, #164]	; (800361c <LCD_IO_Init+0xec>)
 8003578:	f043 0301 	orr.w	r3, r3, #1
 800357c:	6013      	str	r3, [r2, #0]
  GPIOX_MODER(MODE_OUT, LCD_CS);
 800357e:	4b27      	ldr	r3, [pc, #156]	; (800361c <LCD_IO_Init+0xec>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f023 030c 	bic.w	r3, r3, #12
 8003586:	4a25      	ldr	r2, [pc, #148]	; (800361c <LCD_IO_Init+0xec>)
 8003588:	f043 0304 	orr.w	r3, r3, #4
 800358c:	6013      	str	r3, [r2, #0]

  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_RS);
 800358e:	4b23      	ldr	r3, [pc, #140]	; (800361c <LCD_IO_Init+0xec>)
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	4a22      	ldr	r2, [pc, #136]	; (800361c <LCD_IO_Init+0xec>)
 8003594:	f043 0303 	orr.w	r3, r3, #3
 8003598:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_CS);
 800359a:	4b20      	ldr	r3, [pc, #128]	; (800361c <LCD_IO_Init+0xec>)
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	4a1f      	ldr	r2, [pc, #124]	; (800361c <LCD_IO_Init+0xec>)
 80035a0:	f043 030c 	orr.w	r3, r3, #12
 80035a4:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_SCK);
 80035a6:	4b1e      	ldr	r3, [pc, #120]	; (8003620 <LCD_IO_Init+0xf0>)
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	4a1d      	ldr	r2, [pc, #116]	; (8003620 <LCD_IO_Init+0xf0>)
 80035ac:	f043 0303 	orr.w	r3, r3, #3
 80035b0:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_MOSI);
 80035b2:	4b1a      	ldr	r3, [pc, #104]	; (800361c <LCD_IO_Init+0xec>)
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	4a19      	ldr	r2, [pc, #100]	; (800361c <LCD_IO_Init+0xec>)
 80035b8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80035bc:	6093      	str	r3, [r2, #8]
  GPIOX_ODR(LCD_SCK) = 1;               // SCK = 1
 80035be:	4b19      	ldr	r3, [pc, #100]	; (8003624 <LCD_IO_Init+0xf4>)
 80035c0:	2201      	movs	r2, #1
 80035c2:	601a      	str	r2, [r3, #0]

  #if LCD_SPI == 0
  /* Software SPI */
  GPIOX_MODER(MODE_OUT, LCD_SCK);
 80035c4:	4b16      	ldr	r3, [pc, #88]	; (8003620 <LCD_IO_Init+0xf0>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f023 0303 	bic.w	r3, r3, #3
 80035cc:	4a14      	ldr	r2, [pc, #80]	; (8003620 <LCD_IO_Init+0xf0>)
 80035ce:	f043 0301 	orr.w	r3, r3, #1
 80035d2:	6013      	str	r3, [r2, #0]
  GPIOX_MODER(MODE_OUT, LCD_MOSI);
 80035d4:	4b11      	ldr	r3, [pc, #68]	; (800361c <LCD_IO_Init+0xec>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80035dc:	4a0f      	ldr	r2, [pc, #60]	; (800361c <LCD_IO_Init+0xec>)
 80035de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035e2:	6013      	str	r3, [r2, #0]

  #endif // #else LCD_SPI == 0

  /* Set or Reset the control line */
  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A // reset
  LCD_Delay(10);
 80035e4:	200a      	movs	r0, #10
 80035e6:	f7ff ff8d 	bl	8003504 <LCD_Delay>
  LCD_RST_ON;
 80035ea:	4b09      	ldr	r3, [pc, #36]	; (8003610 <LCD_IO_Init+0xe0>)
 80035ec:	2200      	movs	r2, #0
 80035ee:	601a      	str	r2, [r3, #0]
  LCD_Delay(10);
 80035f0:	200a      	movs	r0, #10
 80035f2:	f7ff ff87 	bl	8003504 <LCD_Delay>
  LCD_RST_OFF;
 80035f6:	4b06      	ldr	r3, [pc, #24]	; (8003610 <LCD_IO_Init+0xe0>)
 80035f8:	2201      	movs	r2, #1
 80035fa:	601a      	str	r2, [r3, #0]
  #endif
  LCD_Delay(10);
 80035fc:	200a      	movs	r0, #10
 80035fe:	f7ff ff81 	bl	8003504 <LCD_Delay>
  osSemaphoreDef(spiDmaBinSem);
  spiDmaBinSemHandle = osSemaphoreCreate(osSemaphore(spiDmaBinSem), 1);
  osSemaphoreWait(spiDmaBinSemHandle, 1);
  #endif
  #endif  // #if DMANUM(LCD_DMA_RX) > 0
} // void LCD_IO_Init(void)
 8003602:	bf00      	nop
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	40023800 	.word	0x40023800
 800360c:	40020000 	.word	0x40020000
 8003610:	42400290 	.word	0x42400290
 8003614:	42410280 	.word	0x42410280
 8003618:	42410284 	.word	0x42410284
 800361c:	40020800 	.word	0x40020800
 8003620:	40020400 	.word	0x40020400
 8003624:	42408280 	.word	0x42408280

08003628 <LCD_IO_WriteCmd8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8(uint8_t Cmd)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b082      	sub	sp, #8
 800362c:	af00      	add	r7, sp, #0
 800362e:	4603      	mov	r3, r0
 8003630:	71fb      	strb	r3, [r7, #7]
  WaitForDmaEnd();
  LcdSpiMode8();
  LCD_CS_ON;
 8003632:	4b0a      	ldr	r3, [pc, #40]	; (800365c <LCD_IO_WriteCmd8+0x34>)
 8003634:	2200      	movs	r2, #0
 8003636:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 8003638:	4b09      	ldr	r3, [pc, #36]	; (8003660 <LCD_IO_WriteCmd8+0x38>)
 800363a:	2200      	movs	r2, #0
 800363c:	601a      	str	r2, [r3, #0]
 800363e:	79fb      	ldrb	r3, [r7, #7]
 8003640:	4618      	mov	r0, r3
 8003642:	f7ff fcf3 	bl	800302c <LcdWrite8>
 8003646:	4b06      	ldr	r3, [pc, #24]	; (8003660 <LCD_IO_WriteCmd8+0x38>)
 8003648:	2201      	movs	r2, #1
 800364a:	601a      	str	r2, [r3, #0]
  LCD_CS_OFF;
 800364c:	4b03      	ldr	r3, [pc, #12]	; (800365c <LCD_IO_WriteCmd8+0x34>)
 800364e:	2201      	movs	r2, #1
 8003650:	601a      	str	r2, [r3, #0]
}
 8003652:	bf00      	nop
 8003654:	3708      	adds	r7, #8
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	42410284 	.word	0x42410284
 8003660:	42410280 	.word	0x42410280

08003664 <LCD_IO_WriteData8>:
  LCD_CS_OFF;
}

//-----------------------------------------------------------------------------
void LCD_IO_WriteData8(uint8_t Data)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b082      	sub	sp, #8
 8003668:	af00      	add	r7, sp, #0
 800366a:	4603      	mov	r3, r0
 800366c:	71fb      	strb	r3, [r7, #7]
  WaitForDmaEnd();
  LcdSpiMode8();
  LCD_CS_ON;
 800366e:	4b07      	ldr	r3, [pc, #28]	; (800368c <LCD_IO_WriteData8+0x28>)
 8003670:	2200      	movs	r2, #0
 8003672:	601a      	str	r2, [r3, #0]
  LcdWrite8(Data);
 8003674:	79fb      	ldrb	r3, [r7, #7]
 8003676:	4618      	mov	r0, r3
 8003678:	f7ff fcd8 	bl	800302c <LcdWrite8>
  LCD_CS_OFF;
 800367c:	4b03      	ldr	r3, [pc, #12]	; (800368c <LCD_IO_WriteData8+0x28>)
 800367e:	2201      	movs	r2, #1
 8003680:	601a      	str	r2, [r3, #0]
}
 8003682:	bf00      	nop
 8003684:	3708      	adds	r7, #8
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
 800368a:	bf00      	nop
 800368c:	42410284 	.word	0x42410284

08003690 <LCD_IO_WriteData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteData16(uint16_t Data)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
 8003696:	4603      	mov	r3, r0
 8003698:	80fb      	strh	r3, [r7, #6]
  WaitForDmaEnd();
  LcdSpiMode16();
  LCD_CS_ON;
 800369a:	4b07      	ldr	r3, [pc, #28]	; (80036b8 <LCD_IO_WriteData16+0x28>)
 800369c:	2200      	movs	r2, #0
 800369e:	601a      	str	r2, [r3, #0]
  LcdWrite16(Data);
 80036a0:	88fb      	ldrh	r3, [r7, #6]
 80036a2:	4618      	mov	r0, r3
 80036a4:	f7ff fd80 	bl	80031a8 <LcdWrite16>
  LCD_CS_OFF;
 80036a8:	4b03      	ldr	r3, [pc, #12]	; (80036b8 <LCD_IO_WriteData16+0x28>)
 80036aa:	2201      	movs	r2, #1
 80036ac:	601a      	str	r2, [r3, #0]
}
 80036ae:	bf00      	nop
 80036b0:	3708      	adds	r7, #8
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	42410284 	.word	0x42410284

080036bc <LCD_IO_WriteCmd8DataFill16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8DataFill16(uint8_t Cmd, uint16_t Data, uint32_t Size)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b082      	sub	sp, #8
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	4603      	mov	r3, r0
 80036c4:	603a      	str	r2, [r7, #0]
 80036c6:	71fb      	strb	r3, [r7, #7]
 80036c8:	460b      	mov	r3, r1
 80036ca:	80bb      	strh	r3, [r7, #4]
  WaitForDmaEnd();
  LcdSpiMode8();
  LCD_CS_ON;
 80036cc:	4b0b      	ldr	r3, [pc, #44]	; (80036fc <LCD_IO_WriteCmd8DataFill16+0x40>)
 80036ce:	2200      	movs	r2, #0
 80036d0:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 80036d2:	4b0b      	ldr	r3, [pc, #44]	; (8003700 <LCD_IO_WriteCmd8DataFill16+0x44>)
 80036d4:	2200      	movs	r2, #0
 80036d6:	601a      	str	r2, [r3, #0]
 80036d8:	79fb      	ldrb	r3, [r7, #7]
 80036da:	4618      	mov	r0, r3
 80036dc:	f7ff fca6 	bl	800302c <LcdWrite8>
 80036e0:	4b07      	ldr	r3, [pc, #28]	; (8003700 <LCD_IO_WriteCmd8DataFill16+0x44>)
 80036e2:	2201      	movs	r2, #1
 80036e4:	601a      	str	r2, [r3, #0]
  LcdSpiMode16();
  LCD_IO_WriteMultiData16(&Data, Size, 0);
 80036e6:	1d3b      	adds	r3, r7, #4
 80036e8:	2200      	movs	r2, #0
 80036ea:	6839      	ldr	r1, [r7, #0]
 80036ec:	4618      	mov	r0, r3
 80036ee:	f7ff fee9 	bl	80034c4 <LCD_IO_WriteMultiData16>
}
 80036f2:	bf00      	nop
 80036f4:	3708      	adds	r7, #8
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop
 80036fc:	42410284 	.word	0x42410284
 8003700:	42410280 	.word	0x42410280

08003704 <LCD_IO_WriteCmd8MultipleData8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8MultipleData8(uint8_t Cmd, uint8_t *pData, uint32_t Size)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b084      	sub	sp, #16
 8003708:	af00      	add	r7, sp, #0
 800370a:	4603      	mov	r3, r0
 800370c:	60b9      	str	r1, [r7, #8]
 800370e:	607a      	str	r2, [r7, #4]
 8003710:	73fb      	strb	r3, [r7, #15]
  WaitForDmaEnd();
  LcdSpiMode8();
  LCD_CS_ON;
 8003712:	4b0b      	ldr	r3, [pc, #44]	; (8003740 <LCD_IO_WriteCmd8MultipleData8+0x3c>)
 8003714:	2200      	movs	r2, #0
 8003716:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 8003718:	4b0a      	ldr	r3, [pc, #40]	; (8003744 <LCD_IO_WriteCmd8MultipleData8+0x40>)
 800371a:	2200      	movs	r2, #0
 800371c:	601a      	str	r2, [r3, #0]
 800371e:	7bfb      	ldrb	r3, [r7, #15]
 8003720:	4618      	mov	r0, r3
 8003722:	f7ff fc83 	bl	800302c <LcdWrite8>
 8003726:	4b07      	ldr	r3, [pc, #28]	; (8003744 <LCD_IO_WriteCmd8MultipleData8+0x40>)
 8003728:	2201      	movs	r2, #1
 800372a:	601a      	str	r2, [r3, #0]
  LCD_IO_WriteMultiData8(pData, Size, 1);
 800372c:	2201      	movs	r2, #1
 800372e:	6879      	ldr	r1, [r7, #4]
 8003730:	68b8      	ldr	r0, [r7, #8]
 8003732:	f7ff fea7 	bl	8003484 <LCD_IO_WriteMultiData8>
}
 8003736:	bf00      	nop
 8003738:	3710      	adds	r7, #16
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	42410284 	.word	0x42410284
 8003744:	42410280 	.word	0x42410280

08003748 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003748:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003780 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800374c:	480d      	ldr	r0, [pc, #52]	; (8003784 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800374e:	490e      	ldr	r1, [pc, #56]	; (8003788 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003750:	4a0e      	ldr	r2, [pc, #56]	; (800378c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003752:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003754:	e002      	b.n	800375c <LoopCopyDataInit>

08003756 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003756:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003758:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800375a:	3304      	adds	r3, #4

0800375c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800375c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800375e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003760:	d3f9      	bcc.n	8003756 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003762:	4a0b      	ldr	r2, [pc, #44]	; (8003790 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003764:	4c0b      	ldr	r4, [pc, #44]	; (8003794 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003766:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003768:	e001      	b.n	800376e <LoopFillZerobss>

0800376a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800376a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800376c:	3204      	adds	r2, #4

0800376e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800376e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003770:	d3fb      	bcc.n	800376a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003772:	f7ff f9cb 	bl	8002b0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003776:	f006 f911 	bl	800999c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800377a:	f7fe f8f1 	bl	8001960 <main>
  bx  lr    
 800377e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003780:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003784:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003788:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 800378c:	080158fc 	.word	0x080158fc
  ldr r2, =_sbss
 8003790:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8003794:	200005a8 	.word	0x200005a8

08003798 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003798:	e7fe      	b.n	8003798 <ADC_IRQHandler>
	...

0800379c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80037a0:	4b0e      	ldr	r3, [pc, #56]	; (80037dc <HAL_Init+0x40>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a0d      	ldr	r2, [pc, #52]	; (80037dc <HAL_Init+0x40>)
 80037a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80037ac:	4b0b      	ldr	r3, [pc, #44]	; (80037dc <HAL_Init+0x40>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a0a      	ldr	r2, [pc, #40]	; (80037dc <HAL_Init+0x40>)
 80037b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80037b8:	4b08      	ldr	r3, [pc, #32]	; (80037dc <HAL_Init+0x40>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a07      	ldr	r2, [pc, #28]	; (80037dc <HAL_Init+0x40>)
 80037be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037c4:	2003      	movs	r0, #3
 80037c6:	f000 f94f 	bl	8003a68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80037ca:	2000      	movs	r0, #0
 80037cc:	f000 f808 	bl	80037e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80037d0:	f7fe fe84 	bl	80024dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	bf00      	nop
 80037dc:	40023c00 	.word	0x40023c00

080037e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b082      	sub	sp, #8
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80037e8:	4b12      	ldr	r3, [pc, #72]	; (8003834 <HAL_InitTick+0x54>)
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	4b12      	ldr	r3, [pc, #72]	; (8003838 <HAL_InitTick+0x58>)
 80037ee:	781b      	ldrb	r3, [r3, #0]
 80037f0:	4619      	mov	r1, r3
 80037f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80037f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80037fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80037fe:	4618      	mov	r0, r3
 8003800:	f000 f967 	bl	8003ad2 <HAL_SYSTICK_Config>
 8003804:	4603      	mov	r3, r0
 8003806:	2b00      	cmp	r3, #0
 8003808:	d001      	beq.n	800380e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e00e      	b.n	800382c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2b0f      	cmp	r3, #15
 8003812:	d80a      	bhi.n	800382a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003814:	2200      	movs	r2, #0
 8003816:	6879      	ldr	r1, [r7, #4]
 8003818:	f04f 30ff 	mov.w	r0, #4294967295
 800381c:	f000 f92f 	bl	8003a7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003820:	4a06      	ldr	r2, [pc, #24]	; (800383c <HAL_InitTick+0x5c>)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003826:	2300      	movs	r3, #0
 8003828:	e000      	b.n	800382c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
}
 800382c:	4618      	mov	r0, r3
 800382e:	3708      	adds	r7, #8
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}
 8003834:	2000000c 	.word	0x2000000c
 8003838:	20000024 	.word	0x20000024
 800383c:	20000020 	.word	0x20000020

08003840 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003840:	b480      	push	{r7}
 8003842:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003844:	4b06      	ldr	r3, [pc, #24]	; (8003860 <HAL_IncTick+0x20>)
 8003846:	781b      	ldrb	r3, [r3, #0]
 8003848:	461a      	mov	r2, r3
 800384a:	4b06      	ldr	r3, [pc, #24]	; (8003864 <HAL_IncTick+0x24>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4413      	add	r3, r2
 8003850:	4a04      	ldr	r2, [pc, #16]	; (8003864 <HAL_IncTick+0x24>)
 8003852:	6013      	str	r3, [r2, #0]
}
 8003854:	bf00      	nop
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr
 800385e:	bf00      	nop
 8003860:	20000024 	.word	0x20000024
 8003864:	20000594 	.word	0x20000594

08003868 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003868:	b480      	push	{r7}
 800386a:	af00      	add	r7, sp, #0
  return uwTick;
 800386c:	4b03      	ldr	r3, [pc, #12]	; (800387c <HAL_GetTick+0x14>)
 800386e:	681b      	ldr	r3, [r3, #0]
}
 8003870:	4618      	mov	r0, r3
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr
 800387a:	bf00      	nop
 800387c:	20000594 	.word	0x20000594

08003880 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b084      	sub	sp, #16
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003888:	f7ff ffee 	bl	8003868 <HAL_GetTick>
 800388c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003898:	d005      	beq.n	80038a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800389a:	4b0a      	ldr	r3, [pc, #40]	; (80038c4 <HAL_Delay+0x44>)
 800389c:	781b      	ldrb	r3, [r3, #0]
 800389e:	461a      	mov	r2, r3
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	4413      	add	r3, r2
 80038a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80038a6:	bf00      	nop
 80038a8:	f7ff ffde 	bl	8003868 <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	68fa      	ldr	r2, [r7, #12]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d8f7      	bhi.n	80038a8 <HAL_Delay+0x28>
  {
  }
}
 80038b8:	bf00      	nop
 80038ba:	bf00      	nop
 80038bc:	3710      	adds	r7, #16
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	20000024 	.word	0x20000024

080038c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b085      	sub	sp, #20
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f003 0307 	and.w	r3, r3, #7
 80038d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038d8:	4b0c      	ldr	r3, [pc, #48]	; (800390c <__NVIC_SetPriorityGrouping+0x44>)
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038de:	68ba      	ldr	r2, [r7, #8]
 80038e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80038e4:	4013      	ands	r3, r2
 80038e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80038f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80038f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038fa:	4a04      	ldr	r2, [pc, #16]	; (800390c <__NVIC_SetPriorityGrouping+0x44>)
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	60d3      	str	r3, [r2, #12]
}
 8003900:	bf00      	nop
 8003902:	3714      	adds	r7, #20
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr
 800390c:	e000ed00 	.word	0xe000ed00

08003910 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003910:	b480      	push	{r7}
 8003912:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003914:	4b04      	ldr	r3, [pc, #16]	; (8003928 <__NVIC_GetPriorityGrouping+0x18>)
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	0a1b      	lsrs	r3, r3, #8
 800391a:	f003 0307 	and.w	r3, r3, #7
}
 800391e:	4618      	mov	r0, r3
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr
 8003928:	e000ed00 	.word	0xe000ed00

0800392c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	4603      	mov	r3, r0
 8003934:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800393a:	2b00      	cmp	r3, #0
 800393c:	db0b      	blt.n	8003956 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800393e:	79fb      	ldrb	r3, [r7, #7]
 8003940:	f003 021f 	and.w	r2, r3, #31
 8003944:	4907      	ldr	r1, [pc, #28]	; (8003964 <__NVIC_EnableIRQ+0x38>)
 8003946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800394a:	095b      	lsrs	r3, r3, #5
 800394c:	2001      	movs	r0, #1
 800394e:	fa00 f202 	lsl.w	r2, r0, r2
 8003952:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003956:	bf00      	nop
 8003958:	370c      	adds	r7, #12
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr
 8003962:	bf00      	nop
 8003964:	e000e100 	.word	0xe000e100

08003968 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	4603      	mov	r3, r0
 8003970:	6039      	str	r1, [r7, #0]
 8003972:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003974:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003978:	2b00      	cmp	r3, #0
 800397a:	db0a      	blt.n	8003992 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	b2da      	uxtb	r2, r3
 8003980:	490c      	ldr	r1, [pc, #48]	; (80039b4 <__NVIC_SetPriority+0x4c>)
 8003982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003986:	0112      	lsls	r2, r2, #4
 8003988:	b2d2      	uxtb	r2, r2
 800398a:	440b      	add	r3, r1
 800398c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003990:	e00a      	b.n	80039a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	b2da      	uxtb	r2, r3
 8003996:	4908      	ldr	r1, [pc, #32]	; (80039b8 <__NVIC_SetPriority+0x50>)
 8003998:	79fb      	ldrb	r3, [r7, #7]
 800399a:	f003 030f 	and.w	r3, r3, #15
 800399e:	3b04      	subs	r3, #4
 80039a0:	0112      	lsls	r2, r2, #4
 80039a2:	b2d2      	uxtb	r2, r2
 80039a4:	440b      	add	r3, r1
 80039a6:	761a      	strb	r2, [r3, #24]
}
 80039a8:	bf00      	nop
 80039aa:	370c      	adds	r7, #12
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr
 80039b4:	e000e100 	.word	0xe000e100
 80039b8:	e000ed00 	.word	0xe000ed00

080039bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039bc:	b480      	push	{r7}
 80039be:	b089      	sub	sp, #36	; 0x24
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	60f8      	str	r0, [r7, #12]
 80039c4:	60b9      	str	r1, [r7, #8]
 80039c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f003 0307 	and.w	r3, r3, #7
 80039ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	f1c3 0307 	rsb	r3, r3, #7
 80039d6:	2b04      	cmp	r3, #4
 80039d8:	bf28      	it	cs
 80039da:	2304      	movcs	r3, #4
 80039dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	3304      	adds	r3, #4
 80039e2:	2b06      	cmp	r3, #6
 80039e4:	d902      	bls.n	80039ec <NVIC_EncodePriority+0x30>
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	3b03      	subs	r3, #3
 80039ea:	e000      	b.n	80039ee <NVIC_EncodePriority+0x32>
 80039ec:	2300      	movs	r3, #0
 80039ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039f0:	f04f 32ff 	mov.w	r2, #4294967295
 80039f4:	69bb      	ldr	r3, [r7, #24]
 80039f6:	fa02 f303 	lsl.w	r3, r2, r3
 80039fa:	43da      	mvns	r2, r3
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	401a      	ands	r2, r3
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a04:	f04f 31ff 	mov.w	r1, #4294967295
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a0e:	43d9      	mvns	r1, r3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a14:	4313      	orrs	r3, r2
         );
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3724      	adds	r7, #36	; 0x24
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr
	...

08003a24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b082      	sub	sp, #8
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	3b01      	subs	r3, #1
 8003a30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a34:	d301      	bcc.n	8003a3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a36:	2301      	movs	r3, #1
 8003a38:	e00f      	b.n	8003a5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a3a:	4a0a      	ldr	r2, [pc, #40]	; (8003a64 <SysTick_Config+0x40>)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	3b01      	subs	r3, #1
 8003a40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a42:	210f      	movs	r1, #15
 8003a44:	f04f 30ff 	mov.w	r0, #4294967295
 8003a48:	f7ff ff8e 	bl	8003968 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a4c:	4b05      	ldr	r3, [pc, #20]	; (8003a64 <SysTick_Config+0x40>)
 8003a4e:	2200      	movs	r2, #0
 8003a50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a52:	4b04      	ldr	r3, [pc, #16]	; (8003a64 <SysTick_Config+0x40>)
 8003a54:	2207      	movs	r2, #7
 8003a56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a58:	2300      	movs	r3, #0
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3708      	adds	r7, #8
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	e000e010 	.word	0xe000e010

08003a68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b082      	sub	sp, #8
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f7ff ff29 	bl	80038c8 <__NVIC_SetPriorityGrouping>
}
 8003a76:	bf00      	nop
 8003a78:	3708      	adds	r7, #8
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}

08003a7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a7e:	b580      	push	{r7, lr}
 8003a80:	b086      	sub	sp, #24
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	4603      	mov	r3, r0
 8003a86:	60b9      	str	r1, [r7, #8]
 8003a88:	607a      	str	r2, [r7, #4]
 8003a8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a90:	f7ff ff3e 	bl	8003910 <__NVIC_GetPriorityGrouping>
 8003a94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	68b9      	ldr	r1, [r7, #8]
 8003a9a:	6978      	ldr	r0, [r7, #20]
 8003a9c:	f7ff ff8e 	bl	80039bc <NVIC_EncodePriority>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003aa6:	4611      	mov	r1, r2
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f7ff ff5d 	bl	8003968 <__NVIC_SetPriority>
}
 8003aae:	bf00      	nop
 8003ab0:	3718      	adds	r7, #24
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}

08003ab6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ab6:	b580      	push	{r7, lr}
 8003ab8:	b082      	sub	sp, #8
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	4603      	mov	r3, r0
 8003abe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ac0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f7ff ff31 	bl	800392c <__NVIC_EnableIRQ>
}
 8003aca:	bf00      	nop
 8003acc:	3708      	adds	r7, #8
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}

08003ad2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ad2:	b580      	push	{r7, lr}
 8003ad4:	b082      	sub	sp, #8
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f7ff ffa2 	bl	8003a24 <SysTick_Config>
 8003ae0:	4603      	mov	r3, r0
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3708      	adds	r7, #8
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
	...

08003aec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b086      	sub	sp, #24
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003af4:	2300      	movs	r3, #0
 8003af6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003af8:	f7ff feb6 	bl	8003868 <HAL_GetTick>
 8003afc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d101      	bne.n	8003b08 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e099      	b.n	8003c3c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2202      	movs	r2, #2
 8003b0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f022 0201 	bic.w	r2, r2, #1
 8003b26:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b28:	e00f      	b.n	8003b4a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b2a:	f7ff fe9d 	bl	8003868 <HAL_GetTick>
 8003b2e:	4602      	mov	r2, r0
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	1ad3      	subs	r3, r2, r3
 8003b34:	2b05      	cmp	r3, #5
 8003b36:	d908      	bls.n	8003b4a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2220      	movs	r2, #32
 8003b3c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2203      	movs	r2, #3
 8003b42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e078      	b.n	8003c3c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0301 	and.w	r3, r3, #1
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d1e8      	bne.n	8003b2a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003b60:	697a      	ldr	r2, [r7, #20]
 8003b62:	4b38      	ldr	r3, [pc, #224]	; (8003c44 <HAL_DMA_Init+0x158>)
 8003b64:	4013      	ands	r3, r2
 8003b66:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	685a      	ldr	r2, [r3, #4]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b76:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	691b      	ldr	r3, [r3, #16]
 8003b7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b82:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	699b      	ldr	r3, [r3, #24]
 8003b88:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b8e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6a1b      	ldr	r3, [r3, #32]
 8003b94:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b96:	697a      	ldr	r2, [r7, #20]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba0:	2b04      	cmp	r3, #4
 8003ba2:	d107      	bne.n	8003bb4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bac:	4313      	orrs	r3, r2
 8003bae:	697a      	ldr	r2, [r7, #20]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	697a      	ldr	r2, [r7, #20]
 8003bba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	695b      	ldr	r3, [r3, #20]
 8003bc2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	f023 0307 	bic.w	r3, r3, #7
 8003bca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd0:	697a      	ldr	r2, [r7, #20]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bda:	2b04      	cmp	r3, #4
 8003bdc:	d117      	bne.n	8003c0e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003be2:	697a      	ldr	r2, [r7, #20]
 8003be4:	4313      	orrs	r3, r2
 8003be6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d00e      	beq.n	8003c0e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f000 fb0f 	bl	8004214 <DMA_CheckFifoParam>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d008      	beq.n	8003c0e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2240      	movs	r2, #64	; 0x40
 8003c00:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2201      	movs	r2, #1
 8003c06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e016      	b.n	8003c3c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	697a      	ldr	r2, [r7, #20]
 8003c14:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f000 fac6 	bl	80041a8 <DMA_CalcBaseAndBitshift>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c24:	223f      	movs	r2, #63	; 0x3f
 8003c26:	409a      	lsls	r2, r3
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2201      	movs	r2, #1
 8003c36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003c3a:	2300      	movs	r3, #0
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3718      	adds	r7, #24
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	f010803f 	.word	0xf010803f

08003c48 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b086      	sub	sp, #24
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	60f8      	str	r0, [r7, #12]
 8003c50:	60b9      	str	r1, [r7, #8]
 8003c52:	607a      	str	r2, [r7, #4]
 8003c54:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c56:	2300      	movs	r3, #0
 8003c58:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c5e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d101      	bne.n	8003c6e <HAL_DMA_Start_IT+0x26>
 8003c6a:	2302      	movs	r3, #2
 8003c6c:	e040      	b.n	8003cf0 <HAL_DMA_Start_IT+0xa8>
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2201      	movs	r2, #1
 8003c72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d12f      	bne.n	8003ce2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2202      	movs	r2, #2
 8003c86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	68b9      	ldr	r1, [r7, #8]
 8003c96:	68f8      	ldr	r0, [r7, #12]
 8003c98:	f000 fa58 	bl	800414c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ca0:	223f      	movs	r2, #63	; 0x3f
 8003ca2:	409a      	lsls	r2, r3
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f042 0216 	orr.w	r2, r2, #22
 8003cb6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d007      	beq.n	8003cd0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f042 0208 	orr.w	r2, r2, #8
 8003cce:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f042 0201 	orr.w	r2, r2, #1
 8003cde:	601a      	str	r2, [r3, #0]
 8003ce0:	e005      	b.n	8003cee <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003cea:	2302      	movs	r3, #2
 8003cec:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003cee:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3718      	adds	r7, #24
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}

08003cf8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b084      	sub	sp, #16
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d04:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003d06:	f7ff fdaf 	bl	8003868 <HAL_GetTick>
 8003d0a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	2b02      	cmp	r3, #2
 8003d16:	d008      	beq.n	8003d2a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2280      	movs	r2, #128	; 0x80
 8003d1c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2200      	movs	r2, #0
 8003d22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e052      	b.n	8003dd0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f022 0216 	bic.w	r2, r2, #22
 8003d38:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	695a      	ldr	r2, [r3, #20]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d48:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d103      	bne.n	8003d5a <HAL_DMA_Abort+0x62>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d007      	beq.n	8003d6a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f022 0208 	bic.w	r2, r2, #8
 8003d68:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f022 0201 	bic.w	r2, r2, #1
 8003d78:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d7a:	e013      	b.n	8003da4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d7c:	f7ff fd74 	bl	8003868 <HAL_GetTick>
 8003d80:	4602      	mov	r2, r0
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	2b05      	cmp	r3, #5
 8003d88:	d90c      	bls.n	8003da4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2220      	movs	r2, #32
 8003d8e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2203      	movs	r2, #3
 8003d94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003da0:	2303      	movs	r3, #3
 8003da2:	e015      	b.n	8003dd0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 0301 	and.w	r3, r3, #1
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d1e4      	bne.n	8003d7c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003db6:	223f      	movs	r2, #63	; 0x3f
 8003db8:	409a      	lsls	r2, r3
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003dce:	2300      	movs	r3, #0
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3710      	adds	r7, #16
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}

08003dd8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b083      	sub	sp, #12
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	2b02      	cmp	r3, #2
 8003dea:	d004      	beq.n	8003df6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2280      	movs	r2, #128	; 0x80
 8003df0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e00c      	b.n	8003e10 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2205      	movs	r2, #5
 8003dfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f022 0201 	bic.w	r2, r2, #1
 8003e0c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003e0e:	2300      	movs	r3, #0
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	370c      	adds	r7, #12
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr

08003e1c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b086      	sub	sp, #24
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003e24:	2300      	movs	r3, #0
 8003e26:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003e28:	4b8e      	ldr	r3, [pc, #568]	; (8004064 <HAL_DMA_IRQHandler+0x248>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a8e      	ldr	r2, [pc, #568]	; (8004068 <HAL_DMA_IRQHandler+0x24c>)
 8003e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e32:	0a9b      	lsrs	r3, r3, #10
 8003e34:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e3a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e46:	2208      	movs	r2, #8
 8003e48:	409a      	lsls	r2, r3
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d01a      	beq.n	8003e88 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0304 	and.w	r3, r3, #4
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d013      	beq.n	8003e88 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f022 0204 	bic.w	r2, r2, #4
 8003e6e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e74:	2208      	movs	r2, #8
 8003e76:	409a      	lsls	r2, r3
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e80:	f043 0201 	orr.w	r2, r3, #1
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	409a      	lsls	r2, r3
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	4013      	ands	r3, r2
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d012      	beq.n	8003ebe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	695b      	ldr	r3, [r3, #20]
 8003e9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d00b      	beq.n	8003ebe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eaa:	2201      	movs	r2, #1
 8003eac:	409a      	lsls	r2, r3
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eb6:	f043 0202 	orr.w	r2, r3, #2
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ec2:	2204      	movs	r2, #4
 8003ec4:	409a      	lsls	r2, r3
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	4013      	ands	r3, r2
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d012      	beq.n	8003ef4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0302 	and.w	r3, r3, #2
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d00b      	beq.n	8003ef4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ee0:	2204      	movs	r2, #4
 8003ee2:	409a      	lsls	r2, r3
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eec:	f043 0204 	orr.w	r2, r3, #4
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ef8:	2210      	movs	r2, #16
 8003efa:	409a      	lsls	r2, r3
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	4013      	ands	r3, r2
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d043      	beq.n	8003f8c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 0308 	and.w	r3, r3, #8
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d03c      	beq.n	8003f8c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f16:	2210      	movs	r2, #16
 8003f18:	409a      	lsls	r2, r3
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d018      	beq.n	8003f5e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d108      	bne.n	8003f4c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d024      	beq.n	8003f8c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	4798      	blx	r3
 8003f4a:	e01f      	b.n	8003f8c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d01b      	beq.n	8003f8c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	4798      	blx	r3
 8003f5c:	e016      	b.n	8003f8c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d107      	bne.n	8003f7c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f022 0208 	bic.w	r2, r2, #8
 8003f7a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d003      	beq.n	8003f8c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f90:	2220      	movs	r2, #32
 8003f92:	409a      	lsls	r2, r3
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	4013      	ands	r3, r2
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	f000 808f 	beq.w	80040bc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0310 	and.w	r3, r3, #16
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	f000 8087 	beq.w	80040bc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fb2:	2220      	movs	r2, #32
 8003fb4:	409a      	lsls	r2, r3
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	2b05      	cmp	r3, #5
 8003fc4:	d136      	bne.n	8004034 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f022 0216 	bic.w	r2, r2, #22
 8003fd4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	695a      	ldr	r2, [r3, #20]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003fe4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d103      	bne.n	8003ff6 <HAL_DMA_IRQHandler+0x1da>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d007      	beq.n	8004006 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f022 0208 	bic.w	r2, r2, #8
 8004004:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800400a:	223f      	movs	r2, #63	; 0x3f
 800400c:	409a      	lsls	r2, r3
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2201      	movs	r2, #1
 8004016:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004026:	2b00      	cmp	r3, #0
 8004028:	d07e      	beq.n	8004128 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	4798      	blx	r3
        }
        return;
 8004032:	e079      	b.n	8004128 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800403e:	2b00      	cmp	r3, #0
 8004040:	d01d      	beq.n	800407e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800404c:	2b00      	cmp	r3, #0
 800404e:	d10d      	bne.n	800406c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004054:	2b00      	cmp	r3, #0
 8004056:	d031      	beq.n	80040bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	4798      	blx	r3
 8004060:	e02c      	b.n	80040bc <HAL_DMA_IRQHandler+0x2a0>
 8004062:	bf00      	nop
 8004064:	2000000c 	.word	0x2000000c
 8004068:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004070:	2b00      	cmp	r3, #0
 8004072:	d023      	beq.n	80040bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	4798      	blx	r3
 800407c:	e01e      	b.n	80040bc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004088:	2b00      	cmp	r3, #0
 800408a:	d10f      	bne.n	80040ac <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f022 0210 	bic.w	r2, r2, #16
 800409a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2200      	movs	r2, #0
 80040a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d003      	beq.n	80040bc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d032      	beq.n	800412a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040c8:	f003 0301 	and.w	r3, r3, #1
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d022      	beq.n	8004116 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2205      	movs	r2, #5
 80040d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f022 0201 	bic.w	r2, r2, #1
 80040e6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	3301      	adds	r3, #1
 80040ec:	60bb      	str	r3, [r7, #8]
 80040ee:	697a      	ldr	r2, [r7, #20]
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d307      	bcc.n	8004104 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0301 	and.w	r3, r3, #1
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d1f2      	bne.n	80040e8 <HAL_DMA_IRQHandler+0x2cc>
 8004102:	e000      	b.n	8004106 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004104:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2201      	movs	r2, #1
 800410a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800411a:	2b00      	cmp	r3, #0
 800411c:	d005      	beq.n	800412a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	4798      	blx	r3
 8004126:	e000      	b.n	800412a <HAL_DMA_IRQHandler+0x30e>
        return;
 8004128:	bf00      	nop
    }
  }
}
 800412a:	3718      	adds	r7, #24
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}

08004130 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004130:	b480      	push	{r7}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800413e:	b2db      	uxtb	r3, r3
}
 8004140:	4618      	mov	r0, r3
 8004142:	370c      	adds	r7, #12
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr

0800414c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800414c:	b480      	push	{r7}
 800414e:	b085      	sub	sp, #20
 8004150:	af00      	add	r7, sp, #0
 8004152:	60f8      	str	r0, [r7, #12]
 8004154:	60b9      	str	r1, [r7, #8]
 8004156:	607a      	str	r2, [r7, #4]
 8004158:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004168:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	683a      	ldr	r2, [r7, #0]
 8004170:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	2b40      	cmp	r3, #64	; 0x40
 8004178:	d108      	bne.n	800418c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	68ba      	ldr	r2, [r7, #8]
 8004188:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800418a:	e007      	b.n	800419c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	68ba      	ldr	r2, [r7, #8]
 8004192:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	60da      	str	r2, [r3, #12]
}
 800419c:	bf00      	nop
 800419e:	3714      	adds	r7, #20
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr

080041a8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b085      	sub	sp, #20
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	3b10      	subs	r3, #16
 80041b8:	4a14      	ldr	r2, [pc, #80]	; (800420c <DMA_CalcBaseAndBitshift+0x64>)
 80041ba:	fba2 2303 	umull	r2, r3, r2, r3
 80041be:	091b      	lsrs	r3, r3, #4
 80041c0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80041c2:	4a13      	ldr	r2, [pc, #76]	; (8004210 <DMA_CalcBaseAndBitshift+0x68>)
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	4413      	add	r3, r2
 80041c8:	781b      	ldrb	r3, [r3, #0]
 80041ca:	461a      	mov	r2, r3
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2b03      	cmp	r3, #3
 80041d4:	d909      	bls.n	80041ea <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80041de:	f023 0303 	bic.w	r3, r3, #3
 80041e2:	1d1a      	adds	r2, r3, #4
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	659a      	str	r2, [r3, #88]	; 0x58
 80041e8:	e007      	b.n	80041fa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80041f2:	f023 0303 	bic.w	r3, r3, #3
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3714      	adds	r7, #20
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr
 800420a:	bf00      	nop
 800420c:	aaaaaaab 	.word	0xaaaaaaab
 8004210:	0801550c 	.word	0x0801550c

08004214 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004214:	b480      	push	{r7}
 8004216:	b085      	sub	sp, #20
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800421c:	2300      	movs	r3, #0
 800421e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004224:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	699b      	ldr	r3, [r3, #24]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d11f      	bne.n	800426e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	2b03      	cmp	r3, #3
 8004232:	d856      	bhi.n	80042e2 <DMA_CheckFifoParam+0xce>
 8004234:	a201      	add	r2, pc, #4	; (adr r2, 800423c <DMA_CheckFifoParam+0x28>)
 8004236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800423a:	bf00      	nop
 800423c:	0800424d 	.word	0x0800424d
 8004240:	0800425f 	.word	0x0800425f
 8004244:	0800424d 	.word	0x0800424d
 8004248:	080042e3 	.word	0x080042e3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004250:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004254:	2b00      	cmp	r3, #0
 8004256:	d046      	beq.n	80042e6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800425c:	e043      	b.n	80042e6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004262:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004266:	d140      	bne.n	80042ea <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800426c:	e03d      	b.n	80042ea <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	699b      	ldr	r3, [r3, #24]
 8004272:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004276:	d121      	bne.n	80042bc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	2b03      	cmp	r3, #3
 800427c:	d837      	bhi.n	80042ee <DMA_CheckFifoParam+0xda>
 800427e:	a201      	add	r2, pc, #4	; (adr r2, 8004284 <DMA_CheckFifoParam+0x70>)
 8004280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004284:	08004295 	.word	0x08004295
 8004288:	0800429b 	.word	0x0800429b
 800428c:	08004295 	.word	0x08004295
 8004290:	080042ad 	.word	0x080042ad
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	73fb      	strb	r3, [r7, #15]
      break;
 8004298:	e030      	b.n	80042fc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800429e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d025      	beq.n	80042f2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042aa:	e022      	b.n	80042f2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80042b4:	d11f      	bne.n	80042f6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80042ba:	e01c      	b.n	80042f6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	2b02      	cmp	r3, #2
 80042c0:	d903      	bls.n	80042ca <DMA_CheckFifoParam+0xb6>
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	2b03      	cmp	r3, #3
 80042c6:	d003      	beq.n	80042d0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80042c8:	e018      	b.n	80042fc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	73fb      	strb	r3, [r7, #15]
      break;
 80042ce:	e015      	b.n	80042fc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d00e      	beq.n	80042fa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	73fb      	strb	r3, [r7, #15]
      break;
 80042e0:	e00b      	b.n	80042fa <DMA_CheckFifoParam+0xe6>
      break;
 80042e2:	bf00      	nop
 80042e4:	e00a      	b.n	80042fc <DMA_CheckFifoParam+0xe8>
      break;
 80042e6:	bf00      	nop
 80042e8:	e008      	b.n	80042fc <DMA_CheckFifoParam+0xe8>
      break;
 80042ea:	bf00      	nop
 80042ec:	e006      	b.n	80042fc <DMA_CheckFifoParam+0xe8>
      break;
 80042ee:	bf00      	nop
 80042f0:	e004      	b.n	80042fc <DMA_CheckFifoParam+0xe8>
      break;
 80042f2:	bf00      	nop
 80042f4:	e002      	b.n	80042fc <DMA_CheckFifoParam+0xe8>
      break;   
 80042f6:	bf00      	nop
 80042f8:	e000      	b.n	80042fc <DMA_CheckFifoParam+0xe8>
      break;
 80042fa:	bf00      	nop
    }
  } 
  
  return status; 
 80042fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3714      	adds	r7, #20
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr
 800430a:	bf00      	nop

0800430c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800430c:	b480      	push	{r7}
 800430e:	b089      	sub	sp, #36	; 0x24
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004316:	2300      	movs	r3, #0
 8004318:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800431a:	2300      	movs	r3, #0
 800431c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800431e:	2300      	movs	r3, #0
 8004320:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004322:	2300      	movs	r3, #0
 8004324:	61fb      	str	r3, [r7, #28]
 8004326:	e159      	b.n	80045dc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004328:	2201      	movs	r2, #1
 800432a:	69fb      	ldr	r3, [r7, #28]
 800432c:	fa02 f303 	lsl.w	r3, r2, r3
 8004330:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	697a      	ldr	r2, [r7, #20]
 8004338:	4013      	ands	r3, r2
 800433a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800433c:	693a      	ldr	r2, [r7, #16]
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	429a      	cmp	r2, r3
 8004342:	f040 8148 	bne.w	80045d6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	f003 0303 	and.w	r3, r3, #3
 800434e:	2b01      	cmp	r3, #1
 8004350:	d005      	beq.n	800435e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800435a:	2b02      	cmp	r3, #2
 800435c:	d130      	bne.n	80043c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004364:	69fb      	ldr	r3, [r7, #28]
 8004366:	005b      	lsls	r3, r3, #1
 8004368:	2203      	movs	r2, #3
 800436a:	fa02 f303 	lsl.w	r3, r2, r3
 800436e:	43db      	mvns	r3, r3
 8004370:	69ba      	ldr	r2, [r7, #24]
 8004372:	4013      	ands	r3, r2
 8004374:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	68da      	ldr	r2, [r3, #12]
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	005b      	lsls	r3, r3, #1
 800437e:	fa02 f303 	lsl.w	r3, r2, r3
 8004382:	69ba      	ldr	r2, [r7, #24]
 8004384:	4313      	orrs	r3, r2
 8004386:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	69ba      	ldr	r2, [r7, #24]
 800438c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004394:	2201      	movs	r2, #1
 8004396:	69fb      	ldr	r3, [r7, #28]
 8004398:	fa02 f303 	lsl.w	r3, r2, r3
 800439c:	43db      	mvns	r3, r3
 800439e:	69ba      	ldr	r2, [r7, #24]
 80043a0:	4013      	ands	r3, r2
 80043a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	091b      	lsrs	r3, r3, #4
 80043aa:	f003 0201 	and.w	r2, r3, #1
 80043ae:	69fb      	ldr	r3, [r7, #28]
 80043b0:	fa02 f303 	lsl.w	r3, r2, r3
 80043b4:	69ba      	ldr	r2, [r7, #24]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	69ba      	ldr	r2, [r7, #24]
 80043be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	f003 0303 	and.w	r3, r3, #3
 80043c8:	2b03      	cmp	r3, #3
 80043ca:	d017      	beq.n	80043fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	005b      	lsls	r3, r3, #1
 80043d6:	2203      	movs	r2, #3
 80043d8:	fa02 f303 	lsl.w	r3, r2, r3
 80043dc:	43db      	mvns	r3, r3
 80043de:	69ba      	ldr	r2, [r7, #24]
 80043e0:	4013      	ands	r3, r2
 80043e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	689a      	ldr	r2, [r3, #8]
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	005b      	lsls	r3, r3, #1
 80043ec:	fa02 f303 	lsl.w	r3, r2, r3
 80043f0:	69ba      	ldr	r2, [r7, #24]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	69ba      	ldr	r2, [r7, #24]
 80043fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	f003 0303 	and.w	r3, r3, #3
 8004404:	2b02      	cmp	r3, #2
 8004406:	d123      	bne.n	8004450 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004408:	69fb      	ldr	r3, [r7, #28]
 800440a:	08da      	lsrs	r2, r3, #3
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	3208      	adds	r2, #8
 8004410:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004414:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004416:	69fb      	ldr	r3, [r7, #28]
 8004418:	f003 0307 	and.w	r3, r3, #7
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	220f      	movs	r2, #15
 8004420:	fa02 f303 	lsl.w	r3, r2, r3
 8004424:	43db      	mvns	r3, r3
 8004426:	69ba      	ldr	r2, [r7, #24]
 8004428:	4013      	ands	r3, r2
 800442a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	691a      	ldr	r2, [r3, #16]
 8004430:	69fb      	ldr	r3, [r7, #28]
 8004432:	f003 0307 	and.w	r3, r3, #7
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	fa02 f303 	lsl.w	r3, r2, r3
 800443c:	69ba      	ldr	r2, [r7, #24]
 800443e:	4313      	orrs	r3, r2
 8004440:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004442:	69fb      	ldr	r3, [r7, #28]
 8004444:	08da      	lsrs	r2, r3, #3
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	3208      	adds	r2, #8
 800444a:	69b9      	ldr	r1, [r7, #24]
 800444c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004456:	69fb      	ldr	r3, [r7, #28]
 8004458:	005b      	lsls	r3, r3, #1
 800445a:	2203      	movs	r2, #3
 800445c:	fa02 f303 	lsl.w	r3, r2, r3
 8004460:	43db      	mvns	r3, r3
 8004462:	69ba      	ldr	r2, [r7, #24]
 8004464:	4013      	ands	r3, r2
 8004466:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	f003 0203 	and.w	r2, r3, #3
 8004470:	69fb      	ldr	r3, [r7, #28]
 8004472:	005b      	lsls	r3, r3, #1
 8004474:	fa02 f303 	lsl.w	r3, r2, r3
 8004478:	69ba      	ldr	r2, [r7, #24]
 800447a:	4313      	orrs	r3, r2
 800447c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	69ba      	ldr	r2, [r7, #24]
 8004482:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800448c:	2b00      	cmp	r3, #0
 800448e:	f000 80a2 	beq.w	80045d6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004492:	2300      	movs	r3, #0
 8004494:	60fb      	str	r3, [r7, #12]
 8004496:	4b57      	ldr	r3, [pc, #348]	; (80045f4 <HAL_GPIO_Init+0x2e8>)
 8004498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800449a:	4a56      	ldr	r2, [pc, #344]	; (80045f4 <HAL_GPIO_Init+0x2e8>)
 800449c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80044a0:	6453      	str	r3, [r2, #68]	; 0x44
 80044a2:	4b54      	ldr	r3, [pc, #336]	; (80045f4 <HAL_GPIO_Init+0x2e8>)
 80044a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044aa:	60fb      	str	r3, [r7, #12]
 80044ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80044ae:	4a52      	ldr	r2, [pc, #328]	; (80045f8 <HAL_GPIO_Init+0x2ec>)
 80044b0:	69fb      	ldr	r3, [r7, #28]
 80044b2:	089b      	lsrs	r3, r3, #2
 80044b4:	3302      	adds	r3, #2
 80044b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80044bc:	69fb      	ldr	r3, [r7, #28]
 80044be:	f003 0303 	and.w	r3, r3, #3
 80044c2:	009b      	lsls	r3, r3, #2
 80044c4:	220f      	movs	r2, #15
 80044c6:	fa02 f303 	lsl.w	r3, r2, r3
 80044ca:	43db      	mvns	r3, r3
 80044cc:	69ba      	ldr	r2, [r7, #24]
 80044ce:	4013      	ands	r3, r2
 80044d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4a49      	ldr	r2, [pc, #292]	; (80045fc <HAL_GPIO_Init+0x2f0>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d019      	beq.n	800450e <HAL_GPIO_Init+0x202>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a48      	ldr	r2, [pc, #288]	; (8004600 <HAL_GPIO_Init+0x2f4>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d013      	beq.n	800450a <HAL_GPIO_Init+0x1fe>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4a47      	ldr	r2, [pc, #284]	; (8004604 <HAL_GPIO_Init+0x2f8>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d00d      	beq.n	8004506 <HAL_GPIO_Init+0x1fa>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4a46      	ldr	r2, [pc, #280]	; (8004608 <HAL_GPIO_Init+0x2fc>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d007      	beq.n	8004502 <HAL_GPIO_Init+0x1f6>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4a45      	ldr	r2, [pc, #276]	; (800460c <HAL_GPIO_Init+0x300>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d101      	bne.n	80044fe <HAL_GPIO_Init+0x1f2>
 80044fa:	2304      	movs	r3, #4
 80044fc:	e008      	b.n	8004510 <HAL_GPIO_Init+0x204>
 80044fe:	2307      	movs	r3, #7
 8004500:	e006      	b.n	8004510 <HAL_GPIO_Init+0x204>
 8004502:	2303      	movs	r3, #3
 8004504:	e004      	b.n	8004510 <HAL_GPIO_Init+0x204>
 8004506:	2302      	movs	r3, #2
 8004508:	e002      	b.n	8004510 <HAL_GPIO_Init+0x204>
 800450a:	2301      	movs	r3, #1
 800450c:	e000      	b.n	8004510 <HAL_GPIO_Init+0x204>
 800450e:	2300      	movs	r3, #0
 8004510:	69fa      	ldr	r2, [r7, #28]
 8004512:	f002 0203 	and.w	r2, r2, #3
 8004516:	0092      	lsls	r2, r2, #2
 8004518:	4093      	lsls	r3, r2
 800451a:	69ba      	ldr	r2, [r7, #24]
 800451c:	4313      	orrs	r3, r2
 800451e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004520:	4935      	ldr	r1, [pc, #212]	; (80045f8 <HAL_GPIO_Init+0x2ec>)
 8004522:	69fb      	ldr	r3, [r7, #28]
 8004524:	089b      	lsrs	r3, r3, #2
 8004526:	3302      	adds	r3, #2
 8004528:	69ba      	ldr	r2, [r7, #24]
 800452a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800452e:	4b38      	ldr	r3, [pc, #224]	; (8004610 <HAL_GPIO_Init+0x304>)
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	43db      	mvns	r3, r3
 8004538:	69ba      	ldr	r2, [r7, #24]
 800453a:	4013      	ands	r3, r2
 800453c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004546:	2b00      	cmp	r3, #0
 8004548:	d003      	beq.n	8004552 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800454a:	69ba      	ldr	r2, [r7, #24]
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	4313      	orrs	r3, r2
 8004550:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004552:	4a2f      	ldr	r2, [pc, #188]	; (8004610 <HAL_GPIO_Init+0x304>)
 8004554:	69bb      	ldr	r3, [r7, #24]
 8004556:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004558:	4b2d      	ldr	r3, [pc, #180]	; (8004610 <HAL_GPIO_Init+0x304>)
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	43db      	mvns	r3, r3
 8004562:	69ba      	ldr	r2, [r7, #24]
 8004564:	4013      	ands	r3, r2
 8004566:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004570:	2b00      	cmp	r3, #0
 8004572:	d003      	beq.n	800457c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004574:	69ba      	ldr	r2, [r7, #24]
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	4313      	orrs	r3, r2
 800457a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800457c:	4a24      	ldr	r2, [pc, #144]	; (8004610 <HAL_GPIO_Init+0x304>)
 800457e:	69bb      	ldr	r3, [r7, #24]
 8004580:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004582:	4b23      	ldr	r3, [pc, #140]	; (8004610 <HAL_GPIO_Init+0x304>)
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	43db      	mvns	r3, r3
 800458c:	69ba      	ldr	r2, [r7, #24]
 800458e:	4013      	ands	r3, r2
 8004590:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800459a:	2b00      	cmp	r3, #0
 800459c:	d003      	beq.n	80045a6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800459e:	69ba      	ldr	r2, [r7, #24]
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	4313      	orrs	r3, r2
 80045a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80045a6:	4a1a      	ldr	r2, [pc, #104]	; (8004610 <HAL_GPIO_Init+0x304>)
 80045a8:	69bb      	ldr	r3, [r7, #24]
 80045aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80045ac:	4b18      	ldr	r3, [pc, #96]	; (8004610 <HAL_GPIO_Init+0x304>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	43db      	mvns	r3, r3
 80045b6:	69ba      	ldr	r2, [r7, #24]
 80045b8:	4013      	ands	r3, r2
 80045ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d003      	beq.n	80045d0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80045c8:	69ba      	ldr	r2, [r7, #24]
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80045d0:	4a0f      	ldr	r2, [pc, #60]	; (8004610 <HAL_GPIO_Init+0x304>)
 80045d2:	69bb      	ldr	r3, [r7, #24]
 80045d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	3301      	adds	r3, #1
 80045da:	61fb      	str	r3, [r7, #28]
 80045dc:	69fb      	ldr	r3, [r7, #28]
 80045de:	2b0f      	cmp	r3, #15
 80045e0:	f67f aea2 	bls.w	8004328 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80045e4:	bf00      	nop
 80045e6:	bf00      	nop
 80045e8:	3724      	adds	r7, #36	; 0x24
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr
 80045f2:	bf00      	nop
 80045f4:	40023800 	.word	0x40023800
 80045f8:	40013800 	.word	0x40013800
 80045fc:	40020000 	.word	0x40020000
 8004600:	40020400 	.word	0x40020400
 8004604:	40020800 	.word	0x40020800
 8004608:	40020c00 	.word	0x40020c00
 800460c:	40021000 	.word	0x40021000
 8004610:	40013c00 	.word	0x40013c00

08004614 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004614:	b480      	push	{r7}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	460b      	mov	r3, r1
 800461e:	807b      	strh	r3, [r7, #2]
 8004620:	4613      	mov	r3, r2
 8004622:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004624:	787b      	ldrb	r3, [r7, #1]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d003      	beq.n	8004632 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800462a:	887a      	ldrh	r2, [r7, #2]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004630:	e003      	b.n	800463a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004632:	887b      	ldrh	r3, [r7, #2]
 8004634:	041a      	lsls	r2, r3, #16
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	619a      	str	r2, [r3, #24]
}
 800463a:	bf00      	nop
 800463c:	370c      	adds	r7, #12
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr

08004646 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004646:	b480      	push	{r7}
 8004648:	b085      	sub	sp, #20
 800464a:	af00      	add	r7, sp, #0
 800464c:	6078      	str	r0, [r7, #4]
 800464e:	460b      	mov	r3, r1
 8004650:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	695b      	ldr	r3, [r3, #20]
 8004656:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004658:	887a      	ldrh	r2, [r7, #2]
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	4013      	ands	r3, r2
 800465e:	041a      	lsls	r2, r3, #16
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	43d9      	mvns	r1, r3
 8004664:	887b      	ldrh	r3, [r7, #2]
 8004666:	400b      	ands	r3, r1
 8004668:	431a      	orrs	r2, r3
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	619a      	str	r2, [r3, #24]
}
 800466e:	bf00      	nop
 8004670:	3714      	adds	r7, #20
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr
	...

0800467c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b082      	sub	sp, #8
 8004680:	af00      	add	r7, sp, #0
 8004682:	4603      	mov	r3, r0
 8004684:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004686:	4b08      	ldr	r3, [pc, #32]	; (80046a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004688:	695a      	ldr	r2, [r3, #20]
 800468a:	88fb      	ldrh	r3, [r7, #6]
 800468c:	4013      	ands	r3, r2
 800468e:	2b00      	cmp	r3, #0
 8004690:	d006      	beq.n	80046a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004692:	4a05      	ldr	r2, [pc, #20]	; (80046a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004694:	88fb      	ldrh	r3, [r7, #6]
 8004696:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004698:	88fb      	ldrh	r3, [r7, #6]
 800469a:	4618      	mov	r0, r3
 800469c:	f7fd fed4 	bl	8002448 <HAL_GPIO_EXTI_Callback>
  }
}
 80046a0:	bf00      	nop
 80046a2:	3708      	adds	r7, #8
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}
 80046a8:	40013c00 	.word	0x40013c00

080046ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b084      	sub	sp, #16
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d101      	bne.n	80046be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	e12b      	b.n	8004916 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d106      	bne.n	80046d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2200      	movs	r2, #0
 80046ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f7fd ff2a 	bl	800252c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2224      	movs	r2, #36	; 0x24
 80046dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f022 0201 	bic.w	r2, r2, #1
 80046ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80046fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800470e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004710:	f003 f8d6 	bl	80078c0 <HAL_RCC_GetPCLK1Freq>
 8004714:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	4a81      	ldr	r2, [pc, #516]	; (8004920 <HAL_I2C_Init+0x274>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d807      	bhi.n	8004730 <HAL_I2C_Init+0x84>
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	4a80      	ldr	r2, [pc, #512]	; (8004924 <HAL_I2C_Init+0x278>)
 8004724:	4293      	cmp	r3, r2
 8004726:	bf94      	ite	ls
 8004728:	2301      	movls	r3, #1
 800472a:	2300      	movhi	r3, #0
 800472c:	b2db      	uxtb	r3, r3
 800472e:	e006      	b.n	800473e <HAL_I2C_Init+0x92>
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	4a7d      	ldr	r2, [pc, #500]	; (8004928 <HAL_I2C_Init+0x27c>)
 8004734:	4293      	cmp	r3, r2
 8004736:	bf94      	ite	ls
 8004738:	2301      	movls	r3, #1
 800473a:	2300      	movhi	r3, #0
 800473c:	b2db      	uxtb	r3, r3
 800473e:	2b00      	cmp	r3, #0
 8004740:	d001      	beq.n	8004746 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	e0e7      	b.n	8004916 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	4a78      	ldr	r2, [pc, #480]	; (800492c <HAL_I2C_Init+0x280>)
 800474a:	fba2 2303 	umull	r2, r3, r2, r3
 800474e:	0c9b      	lsrs	r3, r3, #18
 8004750:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	68ba      	ldr	r2, [r7, #8]
 8004762:	430a      	orrs	r2, r1
 8004764:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	6a1b      	ldr	r3, [r3, #32]
 800476c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	4a6a      	ldr	r2, [pc, #424]	; (8004920 <HAL_I2C_Init+0x274>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d802      	bhi.n	8004780 <HAL_I2C_Init+0xd4>
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	3301      	adds	r3, #1
 800477e:	e009      	b.n	8004794 <HAL_I2C_Init+0xe8>
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004786:	fb02 f303 	mul.w	r3, r2, r3
 800478a:	4a69      	ldr	r2, [pc, #420]	; (8004930 <HAL_I2C_Init+0x284>)
 800478c:	fba2 2303 	umull	r2, r3, r2, r3
 8004790:	099b      	lsrs	r3, r3, #6
 8004792:	3301      	adds	r3, #1
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	6812      	ldr	r2, [r2, #0]
 8004798:	430b      	orrs	r3, r1
 800479a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	69db      	ldr	r3, [r3, #28]
 80047a2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80047a6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	495c      	ldr	r1, [pc, #368]	; (8004920 <HAL_I2C_Init+0x274>)
 80047b0:	428b      	cmp	r3, r1
 80047b2:	d819      	bhi.n	80047e8 <HAL_I2C_Init+0x13c>
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	1e59      	subs	r1, r3, #1
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	005b      	lsls	r3, r3, #1
 80047be:	fbb1 f3f3 	udiv	r3, r1, r3
 80047c2:	1c59      	adds	r1, r3, #1
 80047c4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80047c8:	400b      	ands	r3, r1
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d00a      	beq.n	80047e4 <HAL_I2C_Init+0x138>
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	1e59      	subs	r1, r3, #1
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	005b      	lsls	r3, r3, #1
 80047d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80047dc:	3301      	adds	r3, #1
 80047de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047e2:	e051      	b.n	8004888 <HAL_I2C_Init+0x1dc>
 80047e4:	2304      	movs	r3, #4
 80047e6:	e04f      	b.n	8004888 <HAL_I2C_Init+0x1dc>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d111      	bne.n	8004814 <HAL_I2C_Init+0x168>
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	1e58      	subs	r0, r3, #1
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6859      	ldr	r1, [r3, #4]
 80047f8:	460b      	mov	r3, r1
 80047fa:	005b      	lsls	r3, r3, #1
 80047fc:	440b      	add	r3, r1
 80047fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8004802:	3301      	adds	r3, #1
 8004804:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004808:	2b00      	cmp	r3, #0
 800480a:	bf0c      	ite	eq
 800480c:	2301      	moveq	r3, #1
 800480e:	2300      	movne	r3, #0
 8004810:	b2db      	uxtb	r3, r3
 8004812:	e012      	b.n	800483a <HAL_I2C_Init+0x18e>
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	1e58      	subs	r0, r3, #1
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6859      	ldr	r1, [r3, #4]
 800481c:	460b      	mov	r3, r1
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	440b      	add	r3, r1
 8004822:	0099      	lsls	r1, r3, #2
 8004824:	440b      	add	r3, r1
 8004826:	fbb0 f3f3 	udiv	r3, r0, r3
 800482a:	3301      	adds	r3, #1
 800482c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004830:	2b00      	cmp	r3, #0
 8004832:	bf0c      	ite	eq
 8004834:	2301      	moveq	r3, #1
 8004836:	2300      	movne	r3, #0
 8004838:	b2db      	uxtb	r3, r3
 800483a:	2b00      	cmp	r3, #0
 800483c:	d001      	beq.n	8004842 <HAL_I2C_Init+0x196>
 800483e:	2301      	movs	r3, #1
 8004840:	e022      	b.n	8004888 <HAL_I2C_Init+0x1dc>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d10e      	bne.n	8004868 <HAL_I2C_Init+0x1bc>
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	1e58      	subs	r0, r3, #1
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6859      	ldr	r1, [r3, #4]
 8004852:	460b      	mov	r3, r1
 8004854:	005b      	lsls	r3, r3, #1
 8004856:	440b      	add	r3, r1
 8004858:	fbb0 f3f3 	udiv	r3, r0, r3
 800485c:	3301      	adds	r3, #1
 800485e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004862:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004866:	e00f      	b.n	8004888 <HAL_I2C_Init+0x1dc>
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	1e58      	subs	r0, r3, #1
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6859      	ldr	r1, [r3, #4]
 8004870:	460b      	mov	r3, r1
 8004872:	009b      	lsls	r3, r3, #2
 8004874:	440b      	add	r3, r1
 8004876:	0099      	lsls	r1, r3, #2
 8004878:	440b      	add	r3, r1
 800487a:	fbb0 f3f3 	udiv	r3, r0, r3
 800487e:	3301      	adds	r3, #1
 8004880:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004884:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004888:	6879      	ldr	r1, [r7, #4]
 800488a:	6809      	ldr	r1, [r1, #0]
 800488c:	4313      	orrs	r3, r2
 800488e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	69da      	ldr	r2, [r3, #28]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6a1b      	ldr	r3, [r3, #32]
 80048a2:	431a      	orrs	r2, r3
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	430a      	orrs	r2, r1
 80048aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80048b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	6911      	ldr	r1, [r2, #16]
 80048be:	687a      	ldr	r2, [r7, #4]
 80048c0:	68d2      	ldr	r2, [r2, #12]
 80048c2:	4311      	orrs	r1, r2
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	6812      	ldr	r2, [r2, #0]
 80048c8:	430b      	orrs	r3, r1
 80048ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	695a      	ldr	r2, [r3, #20]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	699b      	ldr	r3, [r3, #24]
 80048de:	431a      	orrs	r2, r3
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	430a      	orrs	r2, r1
 80048e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f042 0201 	orr.w	r2, r2, #1
 80048f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2220      	movs	r2, #32
 8004902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004914:	2300      	movs	r3, #0
}
 8004916:	4618      	mov	r0, r3
 8004918:	3710      	adds	r7, #16
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}
 800491e:	bf00      	nop
 8004920:	000186a0 	.word	0x000186a0
 8004924:	001e847f 	.word	0x001e847f
 8004928:	003d08ff 	.word	0x003d08ff
 800492c:	431bde83 	.word	0x431bde83
 8004930:	10624dd3 	.word	0x10624dd3

08004934 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b088      	sub	sp, #32
 8004938:	af02      	add	r7, sp, #8
 800493a:	60f8      	str	r0, [r7, #12]
 800493c:	4608      	mov	r0, r1
 800493e:	4611      	mov	r1, r2
 8004940:	461a      	mov	r2, r3
 8004942:	4603      	mov	r3, r0
 8004944:	817b      	strh	r3, [r7, #10]
 8004946:	460b      	mov	r3, r1
 8004948:	813b      	strh	r3, [r7, #8]
 800494a:	4613      	mov	r3, r2
 800494c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800494e:	f7fe ff8b 	bl	8003868 <HAL_GetTick>
 8004952:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800495a:	b2db      	uxtb	r3, r3
 800495c:	2b20      	cmp	r3, #32
 800495e:	f040 80d9 	bne.w	8004b14 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	9300      	str	r3, [sp, #0]
 8004966:	2319      	movs	r3, #25
 8004968:	2201      	movs	r2, #1
 800496a:	496d      	ldr	r1, [pc, #436]	; (8004b20 <HAL_I2C_Mem_Write+0x1ec>)
 800496c:	68f8      	ldr	r0, [r7, #12]
 800496e:	f002 f90d 	bl	8006b8c <I2C_WaitOnFlagUntilTimeout>
 8004972:	4603      	mov	r3, r0
 8004974:	2b00      	cmp	r3, #0
 8004976:	d001      	beq.n	800497c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004978:	2302      	movs	r3, #2
 800497a:	e0cc      	b.n	8004b16 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004982:	2b01      	cmp	r3, #1
 8004984:	d101      	bne.n	800498a <HAL_I2C_Mem_Write+0x56>
 8004986:	2302      	movs	r3, #2
 8004988:	e0c5      	b.n	8004b16 <HAL_I2C_Mem_Write+0x1e2>
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2201      	movs	r2, #1
 800498e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 0301 	and.w	r3, r3, #1
 800499c:	2b01      	cmp	r3, #1
 800499e:	d007      	beq.n	80049b0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f042 0201 	orr.w	r2, r2, #1
 80049ae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049be:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2221      	movs	r2, #33	; 0x21
 80049c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2240      	movs	r2, #64	; 0x40
 80049cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2200      	movs	r2, #0
 80049d4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	6a3a      	ldr	r2, [r7, #32]
 80049da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80049e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049e6:	b29a      	uxth	r2, r3
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	4a4d      	ldr	r2, [pc, #308]	; (8004b24 <HAL_I2C_Mem_Write+0x1f0>)
 80049f0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80049f2:	88f8      	ldrh	r0, [r7, #6]
 80049f4:	893a      	ldrh	r2, [r7, #8]
 80049f6:	8979      	ldrh	r1, [r7, #10]
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	9301      	str	r3, [sp, #4]
 80049fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049fe:	9300      	str	r3, [sp, #0]
 8004a00:	4603      	mov	r3, r0
 8004a02:	68f8      	ldr	r0, [r7, #12]
 8004a04:	f001 fe9c 	bl	8006740 <I2C_RequestMemoryWrite>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d052      	beq.n	8004ab4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e081      	b.n	8004b16 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a12:	697a      	ldr	r2, [r7, #20]
 8004a14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a16:	68f8      	ldr	r0, [r7, #12]
 8004a18:	f002 f98e 	bl	8006d38 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d00d      	beq.n	8004a3e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a26:	2b04      	cmp	r3, #4
 8004a28:	d107      	bne.n	8004a3a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a38:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e06b      	b.n	8004b16 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a42:	781a      	ldrb	r2, [r3, #0]
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4e:	1c5a      	adds	r2, r3, #1
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a58:	3b01      	subs	r3, #1
 8004a5a:	b29a      	uxth	r2, r3
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	3b01      	subs	r3, #1
 8004a68:	b29a      	uxth	r2, r3
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	695b      	ldr	r3, [r3, #20]
 8004a74:	f003 0304 	and.w	r3, r3, #4
 8004a78:	2b04      	cmp	r3, #4
 8004a7a:	d11b      	bne.n	8004ab4 <HAL_I2C_Mem_Write+0x180>
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d017      	beq.n	8004ab4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a88:	781a      	ldrb	r2, [r3, #0]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a94:	1c5a      	adds	r2, r3, #1
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a9e:	3b01      	subs	r3, #1
 8004aa0:	b29a      	uxth	r2, r3
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	3b01      	subs	r3, #1
 8004aae:	b29a      	uxth	r2, r3
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d1aa      	bne.n	8004a12 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004abc:	697a      	ldr	r2, [r7, #20]
 8004abe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ac0:	68f8      	ldr	r0, [r7, #12]
 8004ac2:	f002 f97a 	bl	8006dba <I2C_WaitOnBTFFlagUntilTimeout>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d00d      	beq.n	8004ae8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad0:	2b04      	cmp	r3, #4
 8004ad2:	d107      	bne.n	8004ae4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ae2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e016      	b.n	8004b16 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004af6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2220      	movs	r2, #32
 8004afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2200      	movs	r2, #0
 8004b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004b10:	2300      	movs	r3, #0
 8004b12:	e000      	b.n	8004b16 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004b14:	2302      	movs	r3, #2
  }
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3718      	adds	r7, #24
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}
 8004b1e:	bf00      	nop
 8004b20:	00100002 	.word	0x00100002
 8004b24:	ffff0000 	.word	0xffff0000

08004b28 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b08c      	sub	sp, #48	; 0x30
 8004b2c:	af02      	add	r7, sp, #8
 8004b2e:	60f8      	str	r0, [r7, #12]
 8004b30:	4608      	mov	r0, r1
 8004b32:	4611      	mov	r1, r2
 8004b34:	461a      	mov	r2, r3
 8004b36:	4603      	mov	r3, r0
 8004b38:	817b      	strh	r3, [r7, #10]
 8004b3a:	460b      	mov	r3, r1
 8004b3c:	813b      	strh	r3, [r7, #8]
 8004b3e:	4613      	mov	r3, r2
 8004b40:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004b42:	f7fe fe91 	bl	8003868 <HAL_GetTick>
 8004b46:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	2b20      	cmp	r3, #32
 8004b52:	f040 8208 	bne.w	8004f66 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b58:	9300      	str	r3, [sp, #0]
 8004b5a:	2319      	movs	r3, #25
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	497b      	ldr	r1, [pc, #492]	; (8004d4c <HAL_I2C_Mem_Read+0x224>)
 8004b60:	68f8      	ldr	r0, [r7, #12]
 8004b62:	f002 f813 	bl	8006b8c <I2C_WaitOnFlagUntilTimeout>
 8004b66:	4603      	mov	r3, r0
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d001      	beq.n	8004b70 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004b6c:	2302      	movs	r3, #2
 8004b6e:	e1fb      	b.n	8004f68 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d101      	bne.n	8004b7e <HAL_I2C_Mem_Read+0x56>
 8004b7a:	2302      	movs	r3, #2
 8004b7c:	e1f4      	b.n	8004f68 <HAL_I2C_Mem_Read+0x440>
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2201      	movs	r2, #1
 8004b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f003 0301 	and.w	r3, r3, #1
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	d007      	beq.n	8004ba4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f042 0201 	orr.w	r2, r2, #1
 8004ba2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004bb2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2222      	movs	r2, #34	; 0x22
 8004bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2240      	movs	r2, #64	; 0x40
 8004bc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004bd4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bda:	b29a      	uxth	r2, r3
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	4a5b      	ldr	r2, [pc, #364]	; (8004d50 <HAL_I2C_Mem_Read+0x228>)
 8004be4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004be6:	88f8      	ldrh	r0, [r7, #6]
 8004be8:	893a      	ldrh	r2, [r7, #8]
 8004bea:	8979      	ldrh	r1, [r7, #10]
 8004bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bee:	9301      	str	r3, [sp, #4]
 8004bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bf2:	9300      	str	r3, [sp, #0]
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	68f8      	ldr	r0, [r7, #12]
 8004bf8:	f001 fe38 	bl	800686c <I2C_RequestMemoryRead>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d001      	beq.n	8004c06 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	e1b0      	b.n	8004f68 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d113      	bne.n	8004c36 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c0e:	2300      	movs	r3, #0
 8004c10:	623b      	str	r3, [r7, #32]
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	695b      	ldr	r3, [r3, #20]
 8004c18:	623b      	str	r3, [r7, #32]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	699b      	ldr	r3, [r3, #24]
 8004c20:	623b      	str	r3, [r7, #32]
 8004c22:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c32:	601a      	str	r2, [r3, #0]
 8004c34:	e184      	b.n	8004f40 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	d11b      	bne.n	8004c76 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c4c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c4e:	2300      	movs	r3, #0
 8004c50:	61fb      	str	r3, [r7, #28]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	695b      	ldr	r3, [r3, #20]
 8004c58:	61fb      	str	r3, [r7, #28]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	699b      	ldr	r3, [r3, #24]
 8004c60:	61fb      	str	r3, [r7, #28]
 8004c62:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c72:	601a      	str	r2, [r3, #0]
 8004c74:	e164      	b.n	8004f40 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c7a:	2b02      	cmp	r3, #2
 8004c7c:	d11b      	bne.n	8004cb6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c8c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c9c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	61bb      	str	r3, [r7, #24]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	695b      	ldr	r3, [r3, #20]
 8004ca8:	61bb      	str	r3, [r7, #24]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	699b      	ldr	r3, [r3, #24]
 8004cb0:	61bb      	str	r3, [r7, #24]
 8004cb2:	69bb      	ldr	r3, [r7, #24]
 8004cb4:	e144      	b.n	8004f40 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	617b      	str	r3, [r7, #20]
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	695b      	ldr	r3, [r3, #20]
 8004cc0:	617b      	str	r3, [r7, #20]
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	699b      	ldr	r3, [r3, #24]
 8004cc8:	617b      	str	r3, [r7, #20]
 8004cca:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004ccc:	e138      	b.n	8004f40 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cd2:	2b03      	cmp	r3, #3
 8004cd4:	f200 80f1 	bhi.w	8004eba <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d123      	bne.n	8004d28 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ce0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ce2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004ce4:	68f8      	ldr	r0, [r7, #12]
 8004ce6:	f002 f8db 	bl	8006ea0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004cea:	4603      	mov	r3, r0
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d001      	beq.n	8004cf4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	e139      	b.n	8004f68 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	691a      	ldr	r2, [r3, #16]
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfe:	b2d2      	uxtb	r2, r2
 8004d00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d06:	1c5a      	adds	r2, r3, #1
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d10:	3b01      	subs	r3, #1
 8004d12:	b29a      	uxth	r2, r3
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d1c:	b29b      	uxth	r3, r3
 8004d1e:	3b01      	subs	r3, #1
 8004d20:	b29a      	uxth	r2, r3
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004d26:	e10b      	b.n	8004f40 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d2c:	2b02      	cmp	r3, #2
 8004d2e:	d14e      	bne.n	8004dce <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d32:	9300      	str	r3, [sp, #0]
 8004d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d36:	2200      	movs	r2, #0
 8004d38:	4906      	ldr	r1, [pc, #24]	; (8004d54 <HAL_I2C_Mem_Read+0x22c>)
 8004d3a:	68f8      	ldr	r0, [r7, #12]
 8004d3c:	f001 ff26 	bl	8006b8c <I2C_WaitOnFlagUntilTimeout>
 8004d40:	4603      	mov	r3, r0
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d008      	beq.n	8004d58 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e10e      	b.n	8004f68 <HAL_I2C_Mem_Read+0x440>
 8004d4a:	bf00      	nop
 8004d4c:	00100002 	.word	0x00100002
 8004d50:	ffff0000 	.word	0xffff0000
 8004d54:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d66:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	691a      	ldr	r2, [r3, #16]
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d72:	b2d2      	uxtb	r2, r2
 8004d74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d7a:	1c5a      	adds	r2, r3, #1
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d84:	3b01      	subs	r3, #1
 8004d86:	b29a      	uxth	r2, r3
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d90:	b29b      	uxth	r3, r3
 8004d92:	3b01      	subs	r3, #1
 8004d94:	b29a      	uxth	r2, r3
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	691a      	ldr	r2, [r3, #16]
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da4:	b2d2      	uxtb	r2, r2
 8004da6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dac:	1c5a      	adds	r2, r3, #1
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004db6:	3b01      	subs	r3, #1
 8004db8:	b29a      	uxth	r2, r3
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	3b01      	subs	r3, #1
 8004dc6:	b29a      	uxth	r2, r3
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004dcc:	e0b8      	b.n	8004f40 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd0:	9300      	str	r3, [sp, #0]
 8004dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	4966      	ldr	r1, [pc, #408]	; (8004f70 <HAL_I2C_Mem_Read+0x448>)
 8004dd8:	68f8      	ldr	r0, [r7, #12]
 8004dda:	f001 fed7 	bl	8006b8c <I2C_WaitOnFlagUntilTimeout>
 8004dde:	4603      	mov	r3, r0
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d001      	beq.n	8004de8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	e0bf      	b.n	8004f68 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004df6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	691a      	ldr	r2, [r3, #16]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e02:	b2d2      	uxtb	r2, r2
 8004e04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e0a:	1c5a      	adds	r2, r3, #1
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e14:	3b01      	subs	r3, #1
 8004e16:	b29a      	uxth	r2, r3
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	3b01      	subs	r3, #1
 8004e24:	b29a      	uxth	r2, r3
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2c:	9300      	str	r3, [sp, #0]
 8004e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e30:	2200      	movs	r2, #0
 8004e32:	494f      	ldr	r1, [pc, #316]	; (8004f70 <HAL_I2C_Mem_Read+0x448>)
 8004e34:	68f8      	ldr	r0, [r7, #12]
 8004e36:	f001 fea9 	bl	8006b8c <I2C_WaitOnFlagUntilTimeout>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d001      	beq.n	8004e44 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	e091      	b.n	8004f68 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e52:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	691a      	ldr	r2, [r3, #16]
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e5e:	b2d2      	uxtb	r2, r2
 8004e60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e66:	1c5a      	adds	r2, r3, #1
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e70:	3b01      	subs	r3, #1
 8004e72:	b29a      	uxth	r2, r3
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	3b01      	subs	r3, #1
 8004e80:	b29a      	uxth	r2, r3
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	691a      	ldr	r2, [r3, #16]
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e90:	b2d2      	uxtb	r2, r2
 8004e92:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e98:	1c5a      	adds	r2, r3, #1
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ea2:	3b01      	subs	r3, #1
 8004ea4:	b29a      	uxth	r2, r3
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	3b01      	subs	r3, #1
 8004eb2:	b29a      	uxth	r2, r3
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004eb8:	e042      	b.n	8004f40 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004eba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ebc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004ebe:	68f8      	ldr	r0, [r7, #12]
 8004ec0:	f001 ffee 	bl	8006ea0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d001      	beq.n	8004ece <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e04c      	b.n	8004f68 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	691a      	ldr	r2, [r3, #16]
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed8:	b2d2      	uxtb	r2, r2
 8004eda:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee0:	1c5a      	adds	r2, r3, #1
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eea:	3b01      	subs	r3, #1
 8004eec:	b29a      	uxth	r2, r3
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	3b01      	subs	r3, #1
 8004efa:	b29a      	uxth	r2, r3
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	695b      	ldr	r3, [r3, #20]
 8004f06:	f003 0304 	and.w	r3, r3, #4
 8004f0a:	2b04      	cmp	r3, #4
 8004f0c:	d118      	bne.n	8004f40 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	691a      	ldr	r2, [r3, #16]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f18:	b2d2      	uxtb	r2, r2
 8004f1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f20:	1c5a      	adds	r2, r3, #1
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f2a:	3b01      	subs	r3, #1
 8004f2c:	b29a      	uxth	r2, r3
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f36:	b29b      	uxth	r3, r3
 8004f38:	3b01      	subs	r3, #1
 8004f3a:	b29a      	uxth	r2, r3
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	f47f aec2 	bne.w	8004cce <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2220      	movs	r2, #32
 8004f4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2200      	movs	r2, #0
 8004f56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004f62:	2300      	movs	r3, #0
 8004f64:	e000      	b.n	8004f68 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004f66:	2302      	movs	r3, #2
  }
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3728      	adds	r7, #40	; 0x28
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}
 8004f70:	00010004 	.word	0x00010004

08004f74 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b088      	sub	sp, #32
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f8c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f94:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f9c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004f9e:	7bfb      	ldrb	r3, [r7, #15]
 8004fa0:	2b10      	cmp	r3, #16
 8004fa2:	d003      	beq.n	8004fac <HAL_I2C_EV_IRQHandler+0x38>
 8004fa4:	7bfb      	ldrb	r3, [r7, #15]
 8004fa6:	2b40      	cmp	r3, #64	; 0x40
 8004fa8:	f040 80c1 	bne.w	800512e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	699b      	ldr	r3, [r3, #24]
 8004fb2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	695b      	ldr	r3, [r3, #20]
 8004fba:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004fbc:	69fb      	ldr	r3, [r7, #28]
 8004fbe:	f003 0301 	and.w	r3, r3, #1
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d10d      	bne.n	8004fe2 <HAL_I2C_EV_IRQHandler+0x6e>
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004fcc:	d003      	beq.n	8004fd6 <HAL_I2C_EV_IRQHandler+0x62>
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004fd4:	d101      	bne.n	8004fda <HAL_I2C_EV_IRQHandler+0x66>
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e000      	b.n	8004fdc <HAL_I2C_EV_IRQHandler+0x68>
 8004fda:	2300      	movs	r3, #0
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	f000 8132 	beq.w	8005246 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004fe2:	69fb      	ldr	r3, [r7, #28]
 8004fe4:	f003 0301 	and.w	r3, r3, #1
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d00c      	beq.n	8005006 <HAL_I2C_EV_IRQHandler+0x92>
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	0a5b      	lsrs	r3, r3, #9
 8004ff0:	f003 0301 	and.w	r3, r3, #1
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d006      	beq.n	8005006 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f001 ffd6 	bl	8006faa <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f000 fd83 	bl	8005b0a <I2C_Master_SB>
 8005004:	e092      	b.n	800512c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005006:	69fb      	ldr	r3, [r7, #28]
 8005008:	08db      	lsrs	r3, r3, #3
 800500a:	f003 0301 	and.w	r3, r3, #1
 800500e:	2b00      	cmp	r3, #0
 8005010:	d009      	beq.n	8005026 <HAL_I2C_EV_IRQHandler+0xb2>
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	0a5b      	lsrs	r3, r3, #9
 8005016:	f003 0301 	and.w	r3, r3, #1
 800501a:	2b00      	cmp	r3, #0
 800501c:	d003      	beq.n	8005026 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f000 fdf9 	bl	8005c16 <I2C_Master_ADD10>
 8005024:	e082      	b.n	800512c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005026:	69fb      	ldr	r3, [r7, #28]
 8005028:	085b      	lsrs	r3, r3, #1
 800502a:	f003 0301 	and.w	r3, r3, #1
 800502e:	2b00      	cmp	r3, #0
 8005030:	d009      	beq.n	8005046 <HAL_I2C_EV_IRQHandler+0xd2>
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	0a5b      	lsrs	r3, r3, #9
 8005036:	f003 0301 	and.w	r3, r3, #1
 800503a:	2b00      	cmp	r3, #0
 800503c:	d003      	beq.n	8005046 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f000 fe13 	bl	8005c6a <I2C_Master_ADDR>
 8005044:	e072      	b.n	800512c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8005046:	69bb      	ldr	r3, [r7, #24]
 8005048:	089b      	lsrs	r3, r3, #2
 800504a:	f003 0301 	and.w	r3, r3, #1
 800504e:	2b00      	cmp	r3, #0
 8005050:	d03b      	beq.n	80050ca <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800505c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005060:	f000 80f3 	beq.w	800524a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005064:	69fb      	ldr	r3, [r7, #28]
 8005066:	09db      	lsrs	r3, r3, #7
 8005068:	f003 0301 	and.w	r3, r3, #1
 800506c:	2b00      	cmp	r3, #0
 800506e:	d00f      	beq.n	8005090 <HAL_I2C_EV_IRQHandler+0x11c>
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	0a9b      	lsrs	r3, r3, #10
 8005074:	f003 0301 	and.w	r3, r3, #1
 8005078:	2b00      	cmp	r3, #0
 800507a:	d009      	beq.n	8005090 <HAL_I2C_EV_IRQHandler+0x11c>
 800507c:	69fb      	ldr	r3, [r7, #28]
 800507e:	089b      	lsrs	r3, r3, #2
 8005080:	f003 0301 	and.w	r3, r3, #1
 8005084:	2b00      	cmp	r3, #0
 8005086:	d103      	bne.n	8005090 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	f000 f9f3 	bl	8005474 <I2C_MasterTransmit_TXE>
 800508e:	e04d      	b.n	800512c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005090:	69fb      	ldr	r3, [r7, #28]
 8005092:	089b      	lsrs	r3, r3, #2
 8005094:	f003 0301 	and.w	r3, r3, #1
 8005098:	2b00      	cmp	r3, #0
 800509a:	f000 80d6 	beq.w	800524a <HAL_I2C_EV_IRQHandler+0x2d6>
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	0a5b      	lsrs	r3, r3, #9
 80050a2:	f003 0301 	and.w	r3, r3, #1
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	f000 80cf 	beq.w	800524a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80050ac:	7bbb      	ldrb	r3, [r7, #14]
 80050ae:	2b21      	cmp	r3, #33	; 0x21
 80050b0:	d103      	bne.n	80050ba <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f000 fa7a 	bl	80055ac <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80050b8:	e0c7      	b.n	800524a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80050ba:	7bfb      	ldrb	r3, [r7, #15]
 80050bc:	2b40      	cmp	r3, #64	; 0x40
 80050be:	f040 80c4 	bne.w	800524a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f000 fae8 	bl	8005698 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80050c8:	e0bf      	b.n	800524a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050d8:	f000 80b7 	beq.w	800524a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80050dc:	69fb      	ldr	r3, [r7, #28]
 80050de:	099b      	lsrs	r3, r3, #6
 80050e0:	f003 0301 	and.w	r3, r3, #1
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d00f      	beq.n	8005108 <HAL_I2C_EV_IRQHandler+0x194>
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	0a9b      	lsrs	r3, r3, #10
 80050ec:	f003 0301 	and.w	r3, r3, #1
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d009      	beq.n	8005108 <HAL_I2C_EV_IRQHandler+0x194>
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	089b      	lsrs	r3, r3, #2
 80050f8:	f003 0301 	and.w	r3, r3, #1
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d103      	bne.n	8005108 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	f000 fb5d 	bl	80057c0 <I2C_MasterReceive_RXNE>
 8005106:	e011      	b.n	800512c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005108:	69fb      	ldr	r3, [r7, #28]
 800510a:	089b      	lsrs	r3, r3, #2
 800510c:	f003 0301 	and.w	r3, r3, #1
 8005110:	2b00      	cmp	r3, #0
 8005112:	f000 809a 	beq.w	800524a <HAL_I2C_EV_IRQHandler+0x2d6>
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	0a5b      	lsrs	r3, r3, #9
 800511a:	f003 0301 	and.w	r3, r3, #1
 800511e:	2b00      	cmp	r3, #0
 8005120:	f000 8093 	beq.w	800524a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8005124:	6878      	ldr	r0, [r7, #4]
 8005126:	f000 fc06 	bl	8005936 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800512a:	e08e      	b.n	800524a <HAL_I2C_EV_IRQHandler+0x2d6>
 800512c:	e08d      	b.n	800524a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005132:	2b00      	cmp	r3, #0
 8005134:	d004      	beq.n	8005140 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	695b      	ldr	r3, [r3, #20]
 800513c:	61fb      	str	r3, [r7, #28]
 800513e:	e007      	b.n	8005150 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	699b      	ldr	r3, [r3, #24]
 8005146:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	695b      	ldr	r3, [r3, #20]
 800514e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005150:	69fb      	ldr	r3, [r7, #28]
 8005152:	085b      	lsrs	r3, r3, #1
 8005154:	f003 0301 	and.w	r3, r3, #1
 8005158:	2b00      	cmp	r3, #0
 800515a:	d012      	beq.n	8005182 <HAL_I2C_EV_IRQHandler+0x20e>
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	0a5b      	lsrs	r3, r3, #9
 8005160:	f003 0301 	and.w	r3, r3, #1
 8005164:	2b00      	cmp	r3, #0
 8005166:	d00c      	beq.n	8005182 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800516c:	2b00      	cmp	r3, #0
 800516e:	d003      	beq.n	8005178 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	699b      	ldr	r3, [r3, #24]
 8005176:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8005178:	69b9      	ldr	r1, [r7, #24]
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f000 ffc4 	bl	8006108 <I2C_Slave_ADDR>
 8005180:	e066      	b.n	8005250 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005182:	69fb      	ldr	r3, [r7, #28]
 8005184:	091b      	lsrs	r3, r3, #4
 8005186:	f003 0301 	and.w	r3, r3, #1
 800518a:	2b00      	cmp	r3, #0
 800518c:	d009      	beq.n	80051a2 <HAL_I2C_EV_IRQHandler+0x22e>
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	0a5b      	lsrs	r3, r3, #9
 8005192:	f003 0301 	and.w	r3, r3, #1
 8005196:	2b00      	cmp	r3, #0
 8005198:	d003      	beq.n	80051a2 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f000 fffe 	bl	800619c <I2C_Slave_STOPF>
 80051a0:	e056      	b.n	8005250 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80051a2:	7bbb      	ldrb	r3, [r7, #14]
 80051a4:	2b21      	cmp	r3, #33	; 0x21
 80051a6:	d002      	beq.n	80051ae <HAL_I2C_EV_IRQHandler+0x23a>
 80051a8:	7bbb      	ldrb	r3, [r7, #14]
 80051aa:	2b29      	cmp	r3, #41	; 0x29
 80051ac:	d125      	bne.n	80051fa <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80051ae:	69fb      	ldr	r3, [r7, #28]
 80051b0:	09db      	lsrs	r3, r3, #7
 80051b2:	f003 0301 	and.w	r3, r3, #1
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d00f      	beq.n	80051da <HAL_I2C_EV_IRQHandler+0x266>
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	0a9b      	lsrs	r3, r3, #10
 80051be:	f003 0301 	and.w	r3, r3, #1
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d009      	beq.n	80051da <HAL_I2C_EV_IRQHandler+0x266>
 80051c6:	69fb      	ldr	r3, [r7, #28]
 80051c8:	089b      	lsrs	r3, r3, #2
 80051ca:	f003 0301 	and.w	r3, r3, #1
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d103      	bne.n	80051da <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f000 feda 	bl	8005f8c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80051d8:	e039      	b.n	800524e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80051da:	69fb      	ldr	r3, [r7, #28]
 80051dc:	089b      	lsrs	r3, r3, #2
 80051de:	f003 0301 	and.w	r3, r3, #1
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d033      	beq.n	800524e <HAL_I2C_EV_IRQHandler+0x2da>
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	0a5b      	lsrs	r3, r3, #9
 80051ea:	f003 0301 	and.w	r3, r3, #1
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d02d      	beq.n	800524e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f000 ff07 	bl	8006006 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80051f8:	e029      	b.n	800524e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80051fa:	69fb      	ldr	r3, [r7, #28]
 80051fc:	099b      	lsrs	r3, r3, #6
 80051fe:	f003 0301 	and.w	r3, r3, #1
 8005202:	2b00      	cmp	r3, #0
 8005204:	d00f      	beq.n	8005226 <HAL_I2C_EV_IRQHandler+0x2b2>
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	0a9b      	lsrs	r3, r3, #10
 800520a:	f003 0301 	and.w	r3, r3, #1
 800520e:	2b00      	cmp	r3, #0
 8005210:	d009      	beq.n	8005226 <HAL_I2C_EV_IRQHandler+0x2b2>
 8005212:	69fb      	ldr	r3, [r7, #28]
 8005214:	089b      	lsrs	r3, r3, #2
 8005216:	f003 0301 	and.w	r3, r3, #1
 800521a:	2b00      	cmp	r3, #0
 800521c:	d103      	bne.n	8005226 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f000 ff12 	bl	8006048 <I2C_SlaveReceive_RXNE>
 8005224:	e014      	b.n	8005250 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005226:	69fb      	ldr	r3, [r7, #28]
 8005228:	089b      	lsrs	r3, r3, #2
 800522a:	f003 0301 	and.w	r3, r3, #1
 800522e:	2b00      	cmp	r3, #0
 8005230:	d00e      	beq.n	8005250 <HAL_I2C_EV_IRQHandler+0x2dc>
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	0a5b      	lsrs	r3, r3, #9
 8005236:	f003 0301 	and.w	r3, r3, #1
 800523a:	2b00      	cmp	r3, #0
 800523c:	d008      	beq.n	8005250 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f000 ff40 	bl	80060c4 <I2C_SlaveReceive_BTF>
 8005244:	e004      	b.n	8005250 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8005246:	bf00      	nop
 8005248:	e002      	b.n	8005250 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800524a:	bf00      	nop
 800524c:	e000      	b.n	8005250 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800524e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8005250:	3720      	adds	r7, #32
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}

08005256 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005256:	b580      	push	{r7, lr}
 8005258:	b08a      	sub	sp, #40	; 0x28
 800525a:	af00      	add	r7, sp, #0
 800525c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	695b      	ldr	r3, [r3, #20]
 8005264:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800526e:	2300      	movs	r3, #0
 8005270:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005278:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800527a:	6a3b      	ldr	r3, [r7, #32]
 800527c:	0a1b      	lsrs	r3, r3, #8
 800527e:	f003 0301 	and.w	r3, r3, #1
 8005282:	2b00      	cmp	r3, #0
 8005284:	d00e      	beq.n	80052a4 <HAL_I2C_ER_IRQHandler+0x4e>
 8005286:	69fb      	ldr	r3, [r7, #28]
 8005288:	0a1b      	lsrs	r3, r3, #8
 800528a:	f003 0301 	and.w	r3, r3, #1
 800528e:	2b00      	cmp	r3, #0
 8005290:	d008      	beq.n	80052a4 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8005292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005294:	f043 0301 	orr.w	r3, r3, #1
 8005298:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80052a2:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80052a4:	6a3b      	ldr	r3, [r7, #32]
 80052a6:	0a5b      	lsrs	r3, r3, #9
 80052a8:	f003 0301 	and.w	r3, r3, #1
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d00e      	beq.n	80052ce <HAL_I2C_ER_IRQHandler+0x78>
 80052b0:	69fb      	ldr	r3, [r7, #28]
 80052b2:	0a1b      	lsrs	r3, r3, #8
 80052b4:	f003 0301 	and.w	r3, r3, #1
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d008      	beq.n	80052ce <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80052bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052be:	f043 0302 	orr.w	r3, r3, #2
 80052c2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80052cc:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80052ce:	6a3b      	ldr	r3, [r7, #32]
 80052d0:	0a9b      	lsrs	r3, r3, #10
 80052d2:	f003 0301 	and.w	r3, r3, #1
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d03f      	beq.n	800535a <HAL_I2C_ER_IRQHandler+0x104>
 80052da:	69fb      	ldr	r3, [r7, #28]
 80052dc:	0a1b      	lsrs	r3, r3, #8
 80052de:	f003 0301 	and.w	r3, r3, #1
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d039      	beq.n	800535a <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80052e6:	7efb      	ldrb	r3, [r7, #27]
 80052e8:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052f8:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052fe:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8005300:	7ebb      	ldrb	r3, [r7, #26]
 8005302:	2b20      	cmp	r3, #32
 8005304:	d112      	bne.n	800532c <HAL_I2C_ER_IRQHandler+0xd6>
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d10f      	bne.n	800532c <HAL_I2C_ER_IRQHandler+0xd6>
 800530c:	7cfb      	ldrb	r3, [r7, #19]
 800530e:	2b21      	cmp	r3, #33	; 0x21
 8005310:	d008      	beq.n	8005324 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8005312:	7cfb      	ldrb	r3, [r7, #19]
 8005314:	2b29      	cmp	r3, #41	; 0x29
 8005316:	d005      	beq.n	8005324 <HAL_I2C_ER_IRQHandler+0xce>
 8005318:	7cfb      	ldrb	r3, [r7, #19]
 800531a:	2b28      	cmp	r3, #40	; 0x28
 800531c:	d106      	bne.n	800532c <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2b21      	cmp	r3, #33	; 0x21
 8005322:	d103      	bne.n	800532c <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f001 f869 	bl	80063fc <I2C_Slave_AF>
 800532a:	e016      	b.n	800535a <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005334:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8005336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005338:	f043 0304 	orr.w	r3, r3, #4
 800533c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800533e:	7efb      	ldrb	r3, [r7, #27]
 8005340:	2b10      	cmp	r3, #16
 8005342:	d002      	beq.n	800534a <HAL_I2C_ER_IRQHandler+0xf4>
 8005344:	7efb      	ldrb	r3, [r7, #27]
 8005346:	2b40      	cmp	r3, #64	; 0x40
 8005348:	d107      	bne.n	800535a <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005358:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800535a:	6a3b      	ldr	r3, [r7, #32]
 800535c:	0adb      	lsrs	r3, r3, #11
 800535e:	f003 0301 	and.w	r3, r3, #1
 8005362:	2b00      	cmp	r3, #0
 8005364:	d00e      	beq.n	8005384 <HAL_I2C_ER_IRQHandler+0x12e>
 8005366:	69fb      	ldr	r3, [r7, #28]
 8005368:	0a1b      	lsrs	r3, r3, #8
 800536a:	f003 0301 	and.w	r3, r3, #1
 800536e:	2b00      	cmp	r3, #0
 8005370:	d008      	beq.n	8005384 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8005372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005374:	f043 0308 	orr.w	r3, r3, #8
 8005378:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8005382:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8005384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005386:	2b00      	cmp	r3, #0
 8005388:	d008      	beq.n	800539c <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800538e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005390:	431a      	orrs	r2, r3
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f001 f8a0 	bl	80064dc <I2C_ITError>
  }
}
 800539c:	bf00      	nop
 800539e:	3728      	adds	r7, #40	; 0x28
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}

080053a4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b083      	sub	sp, #12
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80053ac:	bf00      	nop
 80053ae:	370c      	adds	r7, #12
 80053b0:	46bd      	mov	sp, r7
 80053b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b6:	4770      	bx	lr

080053b8 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b083      	sub	sp, #12
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80053c0:	bf00      	nop
 80053c2:	370c      	adds	r7, #12
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr

080053cc <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b083      	sub	sp, #12
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80053d4:	bf00      	nop
 80053d6:	370c      	adds	r7, #12
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr

080053e0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b083      	sub	sp, #12
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80053e8:	bf00      	nop
 80053ea:	370c      	adds	r7, #12
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr

080053f4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b083      	sub	sp, #12
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	460b      	mov	r3, r1
 80053fe:	70fb      	strb	r3, [r7, #3]
 8005400:	4613      	mov	r3, r2
 8005402:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005404:	bf00      	nop
 8005406:	370c      	adds	r7, #12
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr

08005410 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005410:	b480      	push	{r7}
 8005412:	b083      	sub	sp, #12
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8005418:	bf00      	nop
 800541a:	370c      	adds	r7, #12
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr

08005424 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005424:	b480      	push	{r7}
 8005426:	b083      	sub	sp, #12
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800542c:	bf00      	nop
 800542e:	370c      	adds	r7, #12
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr

08005438 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005438:	b480      	push	{r7}
 800543a:	b083      	sub	sp, #12
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005440:	bf00      	nop
 8005442:	370c      	adds	r7, #12
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr

0800544c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800544c:	b480      	push	{r7}
 800544e:	b083      	sub	sp, #12
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005454:	bf00      	nop
 8005456:	370c      	adds	r7, #12
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr

08005460 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005460:	b480      	push	{r7}
 8005462:	b083      	sub	sp, #12
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005468:	bf00      	nop
 800546a:	370c      	adds	r7, #12
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr

08005474 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b084      	sub	sp, #16
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005482:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800548a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005490:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005496:	2b00      	cmp	r3, #0
 8005498:	d150      	bne.n	800553c <I2C_MasterTransmit_TXE+0xc8>
 800549a:	7bfb      	ldrb	r3, [r7, #15]
 800549c:	2b21      	cmp	r3, #33	; 0x21
 800549e:	d14d      	bne.n	800553c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	2b08      	cmp	r3, #8
 80054a4:	d01d      	beq.n	80054e2 <I2C_MasterTransmit_TXE+0x6e>
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	2b20      	cmp	r3, #32
 80054aa:	d01a      	beq.n	80054e2 <I2C_MasterTransmit_TXE+0x6e>
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80054b2:	d016      	beq.n	80054e2 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	685a      	ldr	r2, [r3, #4]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80054c2:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2211      	movs	r2, #17
 80054c8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2200      	movs	r2, #0
 80054ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2220      	movs	r2, #32
 80054d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f7ff ff62 	bl	80053a4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80054e0:	e060      	b.n	80055a4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	685a      	ldr	r2, [r3, #4]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80054f0:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005500:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2200      	movs	r2, #0
 8005506:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2220      	movs	r2, #32
 800550c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005516:	b2db      	uxtb	r3, r3
 8005518:	2b40      	cmp	r3, #64	; 0x40
 800551a:	d107      	bne.n	800552c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2200      	movs	r2, #0
 8005520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f7ff ff7d 	bl	8005424 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800552a:	e03b      	b.n	80055a4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2200      	movs	r2, #0
 8005530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	f7ff ff35 	bl	80053a4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800553a:	e033      	b.n	80055a4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800553c:	7bfb      	ldrb	r3, [r7, #15]
 800553e:	2b21      	cmp	r3, #33	; 0x21
 8005540:	d005      	beq.n	800554e <I2C_MasterTransmit_TXE+0xda>
 8005542:	7bbb      	ldrb	r3, [r7, #14]
 8005544:	2b40      	cmp	r3, #64	; 0x40
 8005546:	d12d      	bne.n	80055a4 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005548:	7bfb      	ldrb	r3, [r7, #15]
 800554a:	2b22      	cmp	r3, #34	; 0x22
 800554c:	d12a      	bne.n	80055a4 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005552:	b29b      	uxth	r3, r3
 8005554:	2b00      	cmp	r3, #0
 8005556:	d108      	bne.n	800556a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	685a      	ldr	r2, [r3, #4]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005566:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005568:	e01c      	b.n	80055a4 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005570:	b2db      	uxtb	r3, r3
 8005572:	2b40      	cmp	r3, #64	; 0x40
 8005574:	d103      	bne.n	800557e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f000 f88e 	bl	8005698 <I2C_MemoryTransmit_TXE_BTF>
}
 800557c:	e012      	b.n	80055a4 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005582:	781a      	ldrb	r2, [r3, #0]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800558e:	1c5a      	adds	r2, r3, #1
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005598:	b29b      	uxth	r3, r3
 800559a:	3b01      	subs	r3, #1
 800559c:	b29a      	uxth	r2, r3
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80055a2:	e7ff      	b.n	80055a4 <I2C_MasterTransmit_TXE+0x130>
 80055a4:	bf00      	nop
 80055a6:	3710      	adds	r7, #16
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}

080055ac <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b084      	sub	sp, #16
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055b8:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	2b21      	cmp	r3, #33	; 0x21
 80055c4:	d164      	bne.n	8005690 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055ca:	b29b      	uxth	r3, r3
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d012      	beq.n	80055f6 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d4:	781a      	ldrb	r2, [r3, #0]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e0:	1c5a      	adds	r2, r3, #1
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	3b01      	subs	r3, #1
 80055ee:	b29a      	uxth	r2, r3
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80055f4:	e04c      	b.n	8005690 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2b08      	cmp	r3, #8
 80055fa:	d01d      	beq.n	8005638 <I2C_MasterTransmit_BTF+0x8c>
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	2b20      	cmp	r3, #32
 8005600:	d01a      	beq.n	8005638 <I2C_MasterTransmit_BTF+0x8c>
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005608:	d016      	beq.n	8005638 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	685a      	ldr	r2, [r3, #4]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005618:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2211      	movs	r2, #17
 800561e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2200      	movs	r2, #0
 8005624:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2220      	movs	r2, #32
 800562c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f7ff feb7 	bl	80053a4 <HAL_I2C_MasterTxCpltCallback>
}
 8005636:	e02b      	b.n	8005690 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	685a      	ldr	r2, [r3, #4]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005646:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005656:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2200      	movs	r2, #0
 800565c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2220      	movs	r2, #32
 8005662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800566c:	b2db      	uxtb	r3, r3
 800566e:	2b40      	cmp	r3, #64	; 0x40
 8005670:	d107      	bne.n	8005682 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2200      	movs	r2, #0
 8005676:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f7ff fed2 	bl	8005424 <HAL_I2C_MemTxCpltCallback>
}
 8005680:	e006      	b.n	8005690 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2200      	movs	r2, #0
 8005686:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f7ff fe8a 	bl	80053a4 <HAL_I2C_MasterTxCpltCallback>
}
 8005690:	bf00      	nop
 8005692:	3710      	adds	r7, #16
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}

08005698 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b084      	sub	sp, #16
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056a6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d11d      	bne.n	80056ec <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d10b      	bne.n	80056d0 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056bc:	b2da      	uxtb	r2, r3
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056c8:	1c9a      	adds	r2, r3, #2
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80056ce:	e073      	b.n	80057b8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056d4:	b29b      	uxth	r3, r3
 80056d6:	121b      	asrs	r3, r3, #8
 80056d8:	b2da      	uxtb	r2, r3
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056e4:	1c5a      	adds	r2, r3, #1
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80056ea:	e065      	b.n	80057b8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d10b      	bne.n	800570c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056f8:	b2da      	uxtb	r2, r3
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005704:	1c5a      	adds	r2, r3, #1
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	651a      	str	r2, [r3, #80]	; 0x50
}
 800570a:	e055      	b.n	80057b8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005710:	2b02      	cmp	r3, #2
 8005712:	d151      	bne.n	80057b8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8005714:	7bfb      	ldrb	r3, [r7, #15]
 8005716:	2b22      	cmp	r3, #34	; 0x22
 8005718:	d10d      	bne.n	8005736 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005728:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800572e:	1c5a      	adds	r2, r3, #1
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005734:	e040      	b.n	80057b8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800573a:	b29b      	uxth	r3, r3
 800573c:	2b00      	cmp	r3, #0
 800573e:	d015      	beq.n	800576c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8005740:	7bfb      	ldrb	r3, [r7, #15]
 8005742:	2b21      	cmp	r3, #33	; 0x21
 8005744:	d112      	bne.n	800576c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800574a:	781a      	ldrb	r2, [r3, #0]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005756:	1c5a      	adds	r2, r3, #1
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005760:	b29b      	uxth	r3, r3
 8005762:	3b01      	subs	r3, #1
 8005764:	b29a      	uxth	r2, r3
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800576a:	e025      	b.n	80057b8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005770:	b29b      	uxth	r3, r3
 8005772:	2b00      	cmp	r3, #0
 8005774:	d120      	bne.n	80057b8 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8005776:	7bfb      	ldrb	r3, [r7, #15]
 8005778:	2b21      	cmp	r3, #33	; 0x21
 800577a:	d11d      	bne.n	80057b8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	685a      	ldr	r2, [r3, #4]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800578a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800579a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2200      	movs	r2, #0
 80057a0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2220      	movs	r2, #32
 80057a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2200      	movs	r2, #0
 80057ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f7ff fe36 	bl	8005424 <HAL_I2C_MemTxCpltCallback>
}
 80057b8:	bf00      	nop
 80057ba:	3710      	adds	r7, #16
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}

080057c0 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b084      	sub	sp, #16
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057ce:	b2db      	uxtb	r3, r3
 80057d0:	2b22      	cmp	r3, #34	; 0x22
 80057d2:	f040 80ac 	bne.w	800592e <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057da:	b29b      	uxth	r3, r3
 80057dc:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2b03      	cmp	r3, #3
 80057e2:	d921      	bls.n	8005828 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	691a      	ldr	r2, [r3, #16]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ee:	b2d2      	uxtb	r2, r2
 80057f0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f6:	1c5a      	adds	r2, r3, #1
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005800:	b29b      	uxth	r3, r3
 8005802:	3b01      	subs	r3, #1
 8005804:	b29a      	uxth	r2, r3
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800580e:	b29b      	uxth	r3, r3
 8005810:	2b03      	cmp	r3, #3
 8005812:	f040 808c 	bne.w	800592e <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	685a      	ldr	r2, [r3, #4]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005824:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8005826:	e082      	b.n	800592e <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800582c:	2b02      	cmp	r3, #2
 800582e:	d075      	beq.n	800591c <I2C_MasterReceive_RXNE+0x15c>
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2b01      	cmp	r3, #1
 8005834:	d002      	beq.n	800583c <I2C_MasterReceive_RXNE+0x7c>
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d16f      	bne.n	800591c <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	f001 fafd 	bl	8006e3c <I2C_WaitOnSTOPRequestThroughIT>
 8005842:	4603      	mov	r3, r0
 8005844:	2b00      	cmp	r3, #0
 8005846:	d142      	bne.n	80058ce <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	681a      	ldr	r2, [r3, #0]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005856:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	685a      	ldr	r2, [r3, #4]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005866:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	691a      	ldr	r2, [r3, #16]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005872:	b2d2      	uxtb	r2, r2
 8005874:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800587a:	1c5a      	adds	r2, r3, #1
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005884:	b29b      	uxth	r3, r3
 8005886:	3b01      	subs	r3, #1
 8005888:	b29a      	uxth	r2, r3
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2220      	movs	r2, #32
 8005892:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800589c:	b2db      	uxtb	r3, r3
 800589e:	2b40      	cmp	r3, #64	; 0x40
 80058a0:	d10a      	bne.n	80058b8 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2200      	movs	r2, #0
 80058a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2200      	movs	r2, #0
 80058ae:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f7ff fdc1 	bl	8005438 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80058b6:	e03a      	b.n	800592e <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2200      	movs	r2, #0
 80058bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2212      	movs	r2, #18
 80058c4:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f7ff fd76 	bl	80053b8 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80058cc:	e02f      	b.n	800592e <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	685a      	ldr	r2, [r3, #4]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80058dc:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	691a      	ldr	r2, [r3, #16]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e8:	b2d2      	uxtb	r2, r2
 80058ea:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f0:	1c5a      	adds	r2, r3, #1
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058fa:	b29b      	uxth	r3, r3
 80058fc:	3b01      	subs	r3, #1
 80058fe:	b29a      	uxth	r2, r3
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2220      	movs	r2, #32
 8005908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2200      	movs	r2, #0
 8005910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f7ff fd99 	bl	800544c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800591a:	e008      	b.n	800592e <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	685a      	ldr	r2, [r3, #4]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800592a:	605a      	str	r2, [r3, #4]
}
 800592c:	e7ff      	b.n	800592e <I2C_MasterReceive_RXNE+0x16e>
 800592e:	bf00      	nop
 8005930:	3710      	adds	r7, #16
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}

08005936 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005936:	b580      	push	{r7, lr}
 8005938:	b084      	sub	sp, #16
 800593a:	af00      	add	r7, sp, #0
 800593c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005942:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005948:	b29b      	uxth	r3, r3
 800594a:	2b04      	cmp	r3, #4
 800594c:	d11b      	bne.n	8005986 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	685a      	ldr	r2, [r3, #4]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800595c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	691a      	ldr	r2, [r3, #16]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005968:	b2d2      	uxtb	r2, r2
 800596a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005970:	1c5a      	adds	r2, r3, #1
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800597a:	b29b      	uxth	r3, r3
 800597c:	3b01      	subs	r3, #1
 800597e:	b29a      	uxth	r2, r3
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005984:	e0bd      	b.n	8005b02 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800598a:	b29b      	uxth	r3, r3
 800598c:	2b03      	cmp	r3, #3
 800598e:	d129      	bne.n	80059e4 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	685a      	ldr	r2, [r3, #4]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800599e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2b04      	cmp	r3, #4
 80059a4:	d00a      	beq.n	80059bc <I2C_MasterReceive_BTF+0x86>
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2b02      	cmp	r3, #2
 80059aa:	d007      	beq.n	80059bc <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	681a      	ldr	r2, [r3, #0]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059ba:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	691a      	ldr	r2, [r3, #16]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c6:	b2d2      	uxtb	r2, r2
 80059c8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ce:	1c5a      	adds	r2, r3, #1
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059d8:	b29b      	uxth	r3, r3
 80059da:	3b01      	subs	r3, #1
 80059dc:	b29a      	uxth	r2, r3
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80059e2:	e08e      	b.n	8005b02 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059e8:	b29b      	uxth	r3, r3
 80059ea:	2b02      	cmp	r3, #2
 80059ec:	d176      	bne.n	8005adc <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	d002      	beq.n	80059fa <I2C_MasterReceive_BTF+0xc4>
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2b10      	cmp	r3, #16
 80059f8:	d108      	bne.n	8005a0c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a08:	601a      	str	r2, [r3, #0]
 8005a0a:	e019      	b.n	8005a40 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2b04      	cmp	r3, #4
 8005a10:	d002      	beq.n	8005a18 <I2C_MasterReceive_BTF+0xe2>
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2b02      	cmp	r3, #2
 8005a16:	d108      	bne.n	8005a2a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	681a      	ldr	r2, [r3, #0]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005a26:	601a      	str	r2, [r3, #0]
 8005a28:	e00a      	b.n	8005a40 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2b10      	cmp	r3, #16
 8005a2e:	d007      	beq.n	8005a40 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	681a      	ldr	r2, [r3, #0]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a3e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	691a      	ldr	r2, [r3, #16]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4a:	b2d2      	uxtb	r2, r2
 8005a4c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a52:	1c5a      	adds	r2, r3, #1
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a5c:	b29b      	uxth	r3, r3
 8005a5e:	3b01      	subs	r3, #1
 8005a60:	b29a      	uxth	r2, r3
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	691a      	ldr	r2, [r3, #16]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a70:	b2d2      	uxtb	r2, r2
 8005a72:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a78:	1c5a      	adds	r2, r3, #1
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	3b01      	subs	r3, #1
 8005a86:	b29a      	uxth	r2, r3
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	685a      	ldr	r2, [r3, #4]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005a9a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2220      	movs	r2, #32
 8005aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005aaa:	b2db      	uxtb	r3, r3
 8005aac:	2b40      	cmp	r3, #64	; 0x40
 8005aae:	d10a      	bne.n	8005ac6 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2200      	movs	r2, #0
 8005abc:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f7ff fcba 	bl	8005438 <HAL_I2C_MemRxCpltCallback>
}
 8005ac4:	e01d      	b.n	8005b02 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2212      	movs	r2, #18
 8005ad2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f7ff fc6f 	bl	80053b8 <HAL_I2C_MasterRxCpltCallback>
}
 8005ada:	e012      	b.n	8005b02 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	691a      	ldr	r2, [r3, #16]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae6:	b2d2      	uxtb	r2, r2
 8005ae8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aee:	1c5a      	adds	r2, r3, #1
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005af8:	b29b      	uxth	r3, r3
 8005afa:	3b01      	subs	r3, #1
 8005afc:	b29a      	uxth	r2, r3
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005b02:	bf00      	nop
 8005b04:	3710      	adds	r7, #16
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}

08005b0a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8005b0a:	b480      	push	{r7}
 8005b0c:	b083      	sub	sp, #12
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b18:	b2db      	uxtb	r3, r3
 8005b1a:	2b40      	cmp	r3, #64	; 0x40
 8005b1c:	d117      	bne.n	8005b4e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d109      	bne.n	8005b3a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b2a:	b2db      	uxtb	r3, r3
 8005b2c:	461a      	mov	r2, r3
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005b36:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005b38:	e067      	b.n	8005c0a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b3e:	b2db      	uxtb	r3, r3
 8005b40:	f043 0301 	orr.w	r3, r3, #1
 8005b44:	b2da      	uxtb	r2, r3
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	611a      	str	r2, [r3, #16]
}
 8005b4c:	e05d      	b.n	8005c0a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	691b      	ldr	r3, [r3, #16]
 8005b52:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b56:	d133      	bne.n	8005bc0 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b5e:	b2db      	uxtb	r3, r3
 8005b60:	2b21      	cmp	r3, #33	; 0x21
 8005b62:	d109      	bne.n	8005b78 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b68:	b2db      	uxtb	r3, r3
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005b74:	611a      	str	r2, [r3, #16]
 8005b76:	e008      	b.n	8005b8a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b7c:	b2db      	uxtb	r3, r3
 8005b7e:	f043 0301 	orr.w	r3, r3, #1
 8005b82:	b2da      	uxtb	r2, r3
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d004      	beq.n	8005b9c <I2C_Master_SB+0x92>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d108      	bne.n	8005bae <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d032      	beq.n	8005c0a <I2C_Master_SB+0x100>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d02d      	beq.n	8005c0a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	685a      	ldr	r2, [r3, #4]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005bbc:	605a      	str	r2, [r3, #4]
}
 8005bbe:	e024      	b.n	8005c0a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d10e      	bne.n	8005be6 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	11db      	asrs	r3, r3, #7
 8005bd0:	b2db      	uxtb	r3, r3
 8005bd2:	f003 0306 	and.w	r3, r3, #6
 8005bd6:	b2db      	uxtb	r3, r3
 8005bd8:	f063 030f 	orn	r3, r3, #15
 8005bdc:	b2da      	uxtb	r2, r3
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	611a      	str	r2, [r3, #16]
}
 8005be4:	e011      	b.n	8005c0a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d10d      	bne.n	8005c0a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bf2:	b29b      	uxth	r3, r3
 8005bf4:	11db      	asrs	r3, r3, #7
 8005bf6:	b2db      	uxtb	r3, r3
 8005bf8:	f003 0306 	and.w	r3, r3, #6
 8005bfc:	b2db      	uxtb	r3, r3
 8005bfe:	f063 030e 	orn	r3, r3, #14
 8005c02:	b2da      	uxtb	r2, r3
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	611a      	str	r2, [r3, #16]
}
 8005c0a:	bf00      	nop
 8005c0c:	370c      	adds	r7, #12
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c14:	4770      	bx	lr

08005c16 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005c16:	b480      	push	{r7}
 8005c18:	b083      	sub	sp, #12
 8005c1a:	af00      	add	r7, sp, #0
 8005c1c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c22:	b2da      	uxtb	r2, r3
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d004      	beq.n	8005c3c <I2C_Master_ADD10+0x26>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d108      	bne.n	8005c4e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d00c      	beq.n	8005c5e <I2C_Master_ADD10+0x48>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d007      	beq.n	8005c5e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	685a      	ldr	r2, [r3, #4]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c5c:	605a      	str	r2, [r3, #4]
  }
}
 8005c5e:	bf00      	nop
 8005c60:	370c      	adds	r7, #12
 8005c62:	46bd      	mov	sp, r7
 8005c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c68:	4770      	bx	lr

08005c6a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005c6a:	b480      	push	{r7}
 8005c6c:	b091      	sub	sp, #68	; 0x44
 8005c6e:	af00      	add	r7, sp, #0
 8005c70:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c78:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c80:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c86:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c8e:	b2db      	uxtb	r3, r3
 8005c90:	2b22      	cmp	r3, #34	; 0x22
 8005c92:	f040 8169 	bne.w	8005f68 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d10f      	bne.n	8005cbe <I2C_Master_ADDR+0x54>
 8005c9e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005ca2:	2b40      	cmp	r3, #64	; 0x40
 8005ca4:	d10b      	bne.n	8005cbe <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	633b      	str	r3, [r7, #48]	; 0x30
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	695b      	ldr	r3, [r3, #20]
 8005cb0:	633b      	str	r3, [r7, #48]	; 0x30
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	699b      	ldr	r3, [r3, #24]
 8005cb8:	633b      	str	r3, [r7, #48]	; 0x30
 8005cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cbc:	e160      	b.n	8005f80 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d11d      	bne.n	8005d02 <I2C_Master_ADDR+0x98>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	691b      	ldr	r3, [r3, #16]
 8005cca:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005cce:	d118      	bne.n	8005d02 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	695b      	ldr	r3, [r3, #20]
 8005cda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	699b      	ldr	r3, [r3, #24]
 8005ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005cf4:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cfa:	1c5a      	adds	r2, r3, #1
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	651a      	str	r2, [r3, #80]	; 0x50
 8005d00:	e13e      	b.n	8005f80 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d06:	b29b      	uxth	r3, r3
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d113      	bne.n	8005d34 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	695b      	ldr	r3, [r3, #20]
 8005d16:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	699b      	ldr	r3, [r3, #24]
 8005d1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d20:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d30:	601a      	str	r2, [r3, #0]
 8005d32:	e115      	b.n	8005f60 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d38:	b29b      	uxth	r3, r3
 8005d3a:	2b01      	cmp	r3, #1
 8005d3c:	f040 808a 	bne.w	8005e54 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d42:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005d46:	d137      	bne.n	8005db8 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	681a      	ldr	r2, [r3, #0]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d56:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d66:	d113      	bne.n	8005d90 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	681a      	ldr	r2, [r3, #0]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d76:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d78:	2300      	movs	r3, #0
 8005d7a:	627b      	str	r3, [r7, #36]	; 0x24
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	695b      	ldr	r3, [r3, #20]
 8005d82:	627b      	str	r3, [r7, #36]	; 0x24
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	699b      	ldr	r3, [r3, #24]
 8005d8a:	627b      	str	r3, [r7, #36]	; 0x24
 8005d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d8e:	e0e7      	b.n	8005f60 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d90:	2300      	movs	r3, #0
 8005d92:	623b      	str	r3, [r7, #32]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	695b      	ldr	r3, [r3, #20]
 8005d9a:	623b      	str	r3, [r7, #32]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	699b      	ldr	r3, [r3, #24]
 8005da2:	623b      	str	r3, [r7, #32]
 8005da4:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	681a      	ldr	r2, [r3, #0]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005db4:	601a      	str	r2, [r3, #0]
 8005db6:	e0d3      	b.n	8005f60 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dba:	2b08      	cmp	r3, #8
 8005dbc:	d02e      	beq.n	8005e1c <I2C_Master_ADDR+0x1b2>
 8005dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dc0:	2b20      	cmp	r3, #32
 8005dc2:	d02b      	beq.n	8005e1c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dc6:	2b12      	cmp	r3, #18
 8005dc8:	d102      	bne.n	8005dd0 <I2C_Master_ADDR+0x166>
 8005dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d125      	bne.n	8005e1c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dd2:	2b04      	cmp	r3, #4
 8005dd4:	d00e      	beq.n	8005df4 <I2C_Master_ADDR+0x18a>
 8005dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dd8:	2b02      	cmp	r3, #2
 8005dda:	d00b      	beq.n	8005df4 <I2C_Master_ADDR+0x18a>
 8005ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dde:	2b10      	cmp	r3, #16
 8005de0:	d008      	beq.n	8005df4 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	681a      	ldr	r2, [r3, #0]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005df0:	601a      	str	r2, [r3, #0]
 8005df2:	e007      	b.n	8005e04 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	681a      	ldr	r2, [r3, #0]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005e02:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e04:	2300      	movs	r3, #0
 8005e06:	61fb      	str	r3, [r7, #28]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	695b      	ldr	r3, [r3, #20]
 8005e0e:	61fb      	str	r3, [r7, #28]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	699b      	ldr	r3, [r3, #24]
 8005e16:	61fb      	str	r3, [r7, #28]
 8005e18:	69fb      	ldr	r3, [r7, #28]
 8005e1a:	e0a1      	b.n	8005f60 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	681a      	ldr	r2, [r3, #0]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e2a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	61bb      	str	r3, [r7, #24]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	695b      	ldr	r3, [r3, #20]
 8005e36:	61bb      	str	r3, [r7, #24]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	699b      	ldr	r3, [r3, #24]
 8005e3e:	61bb      	str	r3, [r7, #24]
 8005e40:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	681a      	ldr	r2, [r3, #0]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e50:	601a      	str	r2, [r3, #0]
 8005e52:	e085      	b.n	8005f60 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e58:	b29b      	uxth	r3, r3
 8005e5a:	2b02      	cmp	r3, #2
 8005e5c:	d14d      	bne.n	8005efa <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e60:	2b04      	cmp	r3, #4
 8005e62:	d016      	beq.n	8005e92 <I2C_Master_ADDR+0x228>
 8005e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e66:	2b02      	cmp	r3, #2
 8005e68:	d013      	beq.n	8005e92 <I2C_Master_ADDR+0x228>
 8005e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e6c:	2b10      	cmp	r3, #16
 8005e6e:	d010      	beq.n	8005e92 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e7e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	681a      	ldr	r2, [r3, #0]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e8e:	601a      	str	r2, [r3, #0]
 8005e90:	e007      	b.n	8005ea2 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005ea0:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005eac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005eb0:	d117      	bne.n	8005ee2 <I2C_Master_ADDR+0x278>
 8005eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eb4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005eb8:	d00b      	beq.n	8005ed2 <I2C_Master_ADDR+0x268>
 8005eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	d008      	beq.n	8005ed2 <I2C_Master_ADDR+0x268>
 8005ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ec2:	2b08      	cmp	r3, #8
 8005ec4:	d005      	beq.n	8005ed2 <I2C_Master_ADDR+0x268>
 8005ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ec8:	2b10      	cmp	r3, #16
 8005eca:	d002      	beq.n	8005ed2 <I2C_Master_ADDR+0x268>
 8005ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ece:	2b20      	cmp	r3, #32
 8005ed0:	d107      	bne.n	8005ee2 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	685a      	ldr	r2, [r3, #4]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005ee0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	617b      	str	r3, [r7, #20]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	695b      	ldr	r3, [r3, #20]
 8005eec:	617b      	str	r3, [r7, #20]
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	699b      	ldr	r3, [r3, #24]
 8005ef4:	617b      	str	r3, [r7, #20]
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	e032      	b.n	8005f60 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	681a      	ldr	r2, [r3, #0]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005f08:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f18:	d117      	bne.n	8005f4a <I2C_Master_ADDR+0x2e0>
 8005f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f1c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005f20:	d00b      	beq.n	8005f3a <I2C_Master_ADDR+0x2d0>
 8005f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	d008      	beq.n	8005f3a <I2C_Master_ADDR+0x2d0>
 8005f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f2a:	2b08      	cmp	r3, #8
 8005f2c:	d005      	beq.n	8005f3a <I2C_Master_ADDR+0x2d0>
 8005f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f30:	2b10      	cmp	r3, #16
 8005f32:	d002      	beq.n	8005f3a <I2C_Master_ADDR+0x2d0>
 8005f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f36:	2b20      	cmp	r3, #32
 8005f38:	d107      	bne.n	8005f4a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	685a      	ldr	r2, [r3, #4]
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005f48:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	613b      	str	r3, [r7, #16]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	695b      	ldr	r3, [r3, #20]
 8005f54:	613b      	str	r3, [r7, #16]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	699b      	ldr	r3, [r3, #24]
 8005f5c:	613b      	str	r3, [r7, #16]
 8005f5e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2200      	movs	r2, #0
 8005f64:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005f66:	e00b      	b.n	8005f80 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f68:	2300      	movs	r3, #0
 8005f6a:	60fb      	str	r3, [r7, #12]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	695b      	ldr	r3, [r3, #20]
 8005f72:	60fb      	str	r3, [r7, #12]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	699b      	ldr	r3, [r3, #24]
 8005f7a:	60fb      	str	r3, [r7, #12]
 8005f7c:	68fb      	ldr	r3, [r7, #12]
}
 8005f7e:	e7ff      	b.n	8005f80 <I2C_Master_ADDR+0x316>
 8005f80:	bf00      	nop
 8005f82:	3744      	adds	r7, #68	; 0x44
 8005f84:	46bd      	mov	sp, r7
 8005f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8a:	4770      	bx	lr

08005f8c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b084      	sub	sp, #16
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f9a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fa0:	b29b      	uxth	r3, r3
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d02b      	beq.n	8005ffe <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005faa:	781a      	ldrb	r2, [r3, #0]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb6:	1c5a      	adds	r2, r3, #1
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fc0:	b29b      	uxth	r3, r3
 8005fc2:	3b01      	subs	r3, #1
 8005fc4:	b29a      	uxth	r2, r3
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d114      	bne.n	8005ffe <I2C_SlaveTransmit_TXE+0x72>
 8005fd4:	7bfb      	ldrb	r3, [r7, #15]
 8005fd6:	2b29      	cmp	r3, #41	; 0x29
 8005fd8:	d111      	bne.n	8005ffe <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	685a      	ldr	r2, [r3, #4]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fe8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2221      	movs	r2, #33	; 0x21
 8005fee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2228      	movs	r2, #40	; 0x28
 8005ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f7ff f9e7 	bl	80053cc <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005ffe:	bf00      	nop
 8006000:	3710      	adds	r7, #16
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}

08006006 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006006:	b480      	push	{r7}
 8006008:	b083      	sub	sp, #12
 800600a:	af00      	add	r7, sp, #0
 800600c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006012:	b29b      	uxth	r3, r3
 8006014:	2b00      	cmp	r3, #0
 8006016:	d011      	beq.n	800603c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800601c:	781a      	ldrb	r2, [r3, #0]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006028:	1c5a      	adds	r2, r3, #1
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006032:	b29b      	uxth	r3, r3
 8006034:	3b01      	subs	r3, #1
 8006036:	b29a      	uxth	r2, r3
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800603c:	bf00      	nop
 800603e:	370c      	adds	r7, #12
 8006040:	46bd      	mov	sp, r7
 8006042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006046:	4770      	bx	lr

08006048 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b084      	sub	sp, #16
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006056:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800605c:	b29b      	uxth	r3, r3
 800605e:	2b00      	cmp	r3, #0
 8006060:	d02c      	beq.n	80060bc <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	691a      	ldr	r2, [r3, #16]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800606c:	b2d2      	uxtb	r2, r2
 800606e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006074:	1c5a      	adds	r2, r3, #1
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800607e:	b29b      	uxth	r3, r3
 8006080:	3b01      	subs	r3, #1
 8006082:	b29a      	uxth	r2, r3
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800608c:	b29b      	uxth	r3, r3
 800608e:	2b00      	cmp	r3, #0
 8006090:	d114      	bne.n	80060bc <I2C_SlaveReceive_RXNE+0x74>
 8006092:	7bfb      	ldrb	r3, [r7, #15]
 8006094:	2b2a      	cmp	r3, #42	; 0x2a
 8006096:	d111      	bne.n	80060bc <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	685a      	ldr	r2, [r3, #4]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060a6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2222      	movs	r2, #34	; 0x22
 80060ac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2228      	movs	r2, #40	; 0x28
 80060b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f7ff f992 	bl	80053e0 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80060bc:	bf00      	nop
 80060be:	3710      	adds	r7, #16
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd80      	pop	{r7, pc}

080060c4 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b083      	sub	sp, #12
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060d0:	b29b      	uxth	r3, r3
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d012      	beq.n	80060fc <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	691a      	ldr	r2, [r3, #16]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e0:	b2d2      	uxtb	r2, r2
 80060e2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e8:	1c5a      	adds	r2, r3, #1
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060f2:	b29b      	uxth	r3, r3
 80060f4:	3b01      	subs	r3, #1
 80060f6:	b29a      	uxth	r2, r3
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80060fc:	bf00      	nop
 80060fe:	370c      	adds	r7, #12
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr

08006108 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b084      	sub	sp, #16
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
 8006110:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8006112:	2300      	movs	r3, #0
 8006114:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800611c:	b2db      	uxtb	r3, r3
 800611e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006122:	2b28      	cmp	r3, #40	; 0x28
 8006124:	d127      	bne.n	8006176 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	685a      	ldr	r2, [r3, #4]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006134:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	089b      	lsrs	r3, r3, #2
 800613a:	f003 0301 	and.w	r3, r3, #1
 800613e:	2b00      	cmp	r3, #0
 8006140:	d101      	bne.n	8006146 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8006142:	2301      	movs	r3, #1
 8006144:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	09db      	lsrs	r3, r3, #7
 800614a:	f003 0301 	and.w	r3, r3, #1
 800614e:	2b00      	cmp	r3, #0
 8006150:	d103      	bne.n	800615a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	68db      	ldr	r3, [r3, #12]
 8006156:	81bb      	strh	r3, [r7, #12]
 8006158:	e002      	b.n	8006160 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	699b      	ldr	r3, [r3, #24]
 800615e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2200      	movs	r2, #0
 8006164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8006168:	89ba      	ldrh	r2, [r7, #12]
 800616a:	7bfb      	ldrb	r3, [r7, #15]
 800616c:	4619      	mov	r1, r3
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f7ff f940 	bl	80053f4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006174:	e00e      	b.n	8006194 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006176:	2300      	movs	r3, #0
 8006178:	60bb      	str	r3, [r7, #8]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	695b      	ldr	r3, [r3, #20]
 8006180:	60bb      	str	r3, [r7, #8]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	699b      	ldr	r3, [r3, #24]
 8006188:	60bb      	str	r3, [r7, #8]
 800618a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2200      	movs	r2, #0
 8006190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8006194:	bf00      	nop
 8006196:	3710      	adds	r7, #16
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}

0800619c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b084      	sub	sp, #16
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061aa:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	685a      	ldr	r2, [r3, #4]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80061ba:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80061bc:	2300      	movs	r3, #0
 80061be:	60bb      	str	r3, [r7, #8]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	695b      	ldr	r3, [r3, #20]
 80061c6:	60bb      	str	r3, [r7, #8]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	681a      	ldr	r2, [r3, #0]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f042 0201 	orr.w	r2, r2, #1
 80061d6:	601a      	str	r2, [r3, #0]
 80061d8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	681a      	ldr	r2, [r3, #0]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061e8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061f8:	d172      	bne.n	80062e0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80061fa:	7bfb      	ldrb	r3, [r7, #15]
 80061fc:	2b22      	cmp	r3, #34	; 0x22
 80061fe:	d002      	beq.n	8006206 <I2C_Slave_STOPF+0x6a>
 8006200:	7bfb      	ldrb	r3, [r7, #15]
 8006202:	2b2a      	cmp	r3, #42	; 0x2a
 8006204:	d135      	bne.n	8006272 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	b29a      	uxth	r2, r3
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006218:	b29b      	uxth	r3, r3
 800621a:	2b00      	cmp	r3, #0
 800621c:	d005      	beq.n	800622a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006222:	f043 0204 	orr.w	r2, r3, #4
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	685a      	ldr	r2, [r3, #4]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006238:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800623e:	4618      	mov	r0, r3
 8006240:	f7fd ff76 	bl	8004130 <HAL_DMA_GetState>
 8006244:	4603      	mov	r3, r0
 8006246:	2b01      	cmp	r3, #1
 8006248:	d049      	beq.n	80062de <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800624e:	4a69      	ldr	r2, [pc, #420]	; (80063f4 <I2C_Slave_STOPF+0x258>)
 8006250:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006256:	4618      	mov	r0, r3
 8006258:	f7fd fdbe 	bl	8003dd8 <HAL_DMA_Abort_IT>
 800625c:	4603      	mov	r3, r0
 800625e:	2b00      	cmp	r3, #0
 8006260:	d03d      	beq.n	80062de <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006266:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006268:	687a      	ldr	r2, [r7, #4]
 800626a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800626c:	4610      	mov	r0, r2
 800626e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006270:	e035      	b.n	80062de <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	b29a      	uxth	r2, r3
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006284:	b29b      	uxth	r3, r3
 8006286:	2b00      	cmp	r3, #0
 8006288:	d005      	beq.n	8006296 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800628e:	f043 0204 	orr.w	r2, r3, #4
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	685a      	ldr	r2, [r3, #4]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80062a4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062aa:	4618      	mov	r0, r3
 80062ac:	f7fd ff40 	bl	8004130 <HAL_DMA_GetState>
 80062b0:	4603      	mov	r3, r0
 80062b2:	2b01      	cmp	r3, #1
 80062b4:	d014      	beq.n	80062e0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062ba:	4a4e      	ldr	r2, [pc, #312]	; (80063f4 <I2C_Slave_STOPF+0x258>)
 80062bc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062c2:	4618      	mov	r0, r3
 80062c4:	f7fd fd88 	bl	8003dd8 <HAL_DMA_Abort_IT>
 80062c8:	4603      	mov	r3, r0
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d008      	beq.n	80062e0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062d4:	687a      	ldr	r2, [r7, #4]
 80062d6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80062d8:	4610      	mov	r0, r2
 80062da:	4798      	blx	r3
 80062dc:	e000      	b.n	80062e0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80062de:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062e4:	b29b      	uxth	r3, r3
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d03e      	beq.n	8006368 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	695b      	ldr	r3, [r3, #20]
 80062f0:	f003 0304 	and.w	r3, r3, #4
 80062f4:	2b04      	cmp	r3, #4
 80062f6:	d112      	bne.n	800631e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	691a      	ldr	r2, [r3, #16]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006302:	b2d2      	uxtb	r2, r2
 8006304:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800630a:	1c5a      	adds	r2, r3, #1
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006314:	b29b      	uxth	r3, r3
 8006316:	3b01      	subs	r3, #1
 8006318:	b29a      	uxth	r2, r3
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	695b      	ldr	r3, [r3, #20]
 8006324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006328:	2b40      	cmp	r3, #64	; 0x40
 800632a:	d112      	bne.n	8006352 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	691a      	ldr	r2, [r3, #16]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006336:	b2d2      	uxtb	r2, r2
 8006338:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800633e:	1c5a      	adds	r2, r3, #1
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006348:	b29b      	uxth	r3, r3
 800634a:	3b01      	subs	r3, #1
 800634c:	b29a      	uxth	r2, r3
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006356:	b29b      	uxth	r3, r3
 8006358:	2b00      	cmp	r3, #0
 800635a:	d005      	beq.n	8006368 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006360:	f043 0204 	orr.w	r2, r3, #4
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800636c:	2b00      	cmp	r3, #0
 800636e:	d003      	beq.n	8006378 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	f000 f8b3 	bl	80064dc <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8006376:	e039      	b.n	80063ec <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006378:	7bfb      	ldrb	r3, [r7, #15]
 800637a:	2b2a      	cmp	r3, #42	; 0x2a
 800637c:	d109      	bne.n	8006392 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2200      	movs	r2, #0
 8006382:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2228      	movs	r2, #40	; 0x28
 8006388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	f7ff f827 	bl	80053e0 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006398:	b2db      	uxtb	r3, r3
 800639a:	2b28      	cmp	r3, #40	; 0x28
 800639c:	d111      	bne.n	80063c2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	4a15      	ldr	r2, [pc, #84]	; (80063f8 <I2C_Slave_STOPF+0x25c>)
 80063a2:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2200      	movs	r2, #0
 80063a8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2220      	movs	r2, #32
 80063ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2200      	movs	r2, #0
 80063b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f7ff f828 	bl	8005410 <HAL_I2C_ListenCpltCallback>
}
 80063c0:	e014      	b.n	80063ec <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063c6:	2b22      	cmp	r3, #34	; 0x22
 80063c8:	d002      	beq.n	80063d0 <I2C_Slave_STOPF+0x234>
 80063ca:	7bfb      	ldrb	r3, [r7, #15]
 80063cc:	2b22      	cmp	r3, #34	; 0x22
 80063ce:	d10d      	bne.n	80063ec <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2200      	movs	r2, #0
 80063d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2220      	movs	r2, #32
 80063da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2200      	movs	r2, #0
 80063e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f7fe fffa 	bl	80053e0 <HAL_I2C_SlaveRxCpltCallback>
}
 80063ec:	bf00      	nop
 80063ee:	3710      	adds	r7, #16
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}
 80063f4:	08006a3d 	.word	0x08006a3d
 80063f8:	ffff0000 	.word	0xffff0000

080063fc <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b084      	sub	sp, #16
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800640a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006410:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	2b08      	cmp	r3, #8
 8006416:	d002      	beq.n	800641e <I2C_Slave_AF+0x22>
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	2b20      	cmp	r3, #32
 800641c:	d129      	bne.n	8006472 <I2C_Slave_AF+0x76>
 800641e:	7bfb      	ldrb	r3, [r7, #15]
 8006420:	2b28      	cmp	r3, #40	; 0x28
 8006422:	d126      	bne.n	8006472 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	4a2c      	ldr	r2, [pc, #176]	; (80064d8 <I2C_Slave_AF+0xdc>)
 8006428:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	685a      	ldr	r2, [r3, #4]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006438:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006442:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	681a      	ldr	r2, [r3, #0]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006452:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2200      	movs	r2, #0
 8006458:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2220      	movs	r2, #32
 800645e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2200      	movs	r2, #0
 8006466:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f7fe ffd0 	bl	8005410 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8006470:	e02e      	b.n	80064d0 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006472:	7bfb      	ldrb	r3, [r7, #15]
 8006474:	2b21      	cmp	r3, #33	; 0x21
 8006476:	d126      	bne.n	80064c6 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	4a17      	ldr	r2, [pc, #92]	; (80064d8 <I2C_Slave_AF+0xdc>)
 800647c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2221      	movs	r2, #33	; 0x21
 8006482:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2220      	movs	r2, #32
 8006488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2200      	movs	r2, #0
 8006490:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	685a      	ldr	r2, [r3, #4]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80064a2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80064ac:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	681a      	ldr	r2, [r3, #0]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064bc:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f7fe ff84 	bl	80053cc <HAL_I2C_SlaveTxCpltCallback>
}
 80064c4:	e004      	b.n	80064d0 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80064ce:	615a      	str	r2, [r3, #20]
}
 80064d0:	bf00      	nop
 80064d2:	3710      	adds	r7, #16
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}
 80064d8:	ffff0000 	.word	0xffff0000

080064dc <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b084      	sub	sp, #16
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064ea:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80064f2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80064f4:	7bbb      	ldrb	r3, [r7, #14]
 80064f6:	2b10      	cmp	r3, #16
 80064f8:	d002      	beq.n	8006500 <I2C_ITError+0x24>
 80064fa:	7bbb      	ldrb	r3, [r7, #14]
 80064fc:	2b40      	cmp	r3, #64	; 0x40
 80064fe:	d10a      	bne.n	8006516 <I2C_ITError+0x3a>
 8006500:	7bfb      	ldrb	r3, [r7, #15]
 8006502:	2b22      	cmp	r3, #34	; 0x22
 8006504:	d107      	bne.n	8006516 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	681a      	ldr	r2, [r3, #0]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006514:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006516:	7bfb      	ldrb	r3, [r7, #15]
 8006518:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800651c:	2b28      	cmp	r3, #40	; 0x28
 800651e:	d107      	bne.n	8006530 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2200      	movs	r2, #0
 8006524:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2228      	movs	r2, #40	; 0x28
 800652a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800652e:	e015      	b.n	800655c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800653a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800653e:	d00a      	beq.n	8006556 <I2C_ITError+0x7a>
 8006540:	7bfb      	ldrb	r3, [r7, #15]
 8006542:	2b60      	cmp	r3, #96	; 0x60
 8006544:	d007      	beq.n	8006556 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2220      	movs	r2, #32
 800654a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2200      	movs	r2, #0
 8006552:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2200      	movs	r2, #0
 800655a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006566:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800656a:	d162      	bne.n	8006632 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	685a      	ldr	r2, [r3, #4]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800657a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006580:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006584:	b2db      	uxtb	r3, r3
 8006586:	2b01      	cmp	r3, #1
 8006588:	d020      	beq.n	80065cc <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800658e:	4a6a      	ldr	r2, [pc, #424]	; (8006738 <I2C_ITError+0x25c>)
 8006590:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006596:	4618      	mov	r0, r3
 8006598:	f7fd fc1e 	bl	8003dd8 <HAL_DMA_Abort_IT>
 800659c:	4603      	mov	r3, r0
 800659e:	2b00      	cmp	r3, #0
 80065a0:	f000 8089 	beq.w	80066b6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	681a      	ldr	r2, [r3, #0]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f022 0201 	bic.w	r2, r2, #1
 80065b2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2220      	movs	r2, #32
 80065b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065c2:	687a      	ldr	r2, [r7, #4]
 80065c4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80065c6:	4610      	mov	r0, r2
 80065c8:	4798      	blx	r3
 80065ca:	e074      	b.n	80066b6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065d0:	4a59      	ldr	r2, [pc, #356]	; (8006738 <I2C_ITError+0x25c>)
 80065d2:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065d8:	4618      	mov	r0, r3
 80065da:	f7fd fbfd 	bl	8003dd8 <HAL_DMA_Abort_IT>
 80065de:	4603      	mov	r3, r0
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d068      	beq.n	80066b6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	695b      	ldr	r3, [r3, #20]
 80065ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065ee:	2b40      	cmp	r3, #64	; 0x40
 80065f0:	d10b      	bne.n	800660a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	691a      	ldr	r2, [r3, #16]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065fc:	b2d2      	uxtb	r2, r2
 80065fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006604:	1c5a      	adds	r2, r3, #1
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	681a      	ldr	r2, [r3, #0]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f022 0201 	bic.w	r2, r2, #1
 8006618:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2220      	movs	r2, #32
 800661e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006626:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006628:	687a      	ldr	r2, [r7, #4]
 800662a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800662c:	4610      	mov	r0, r2
 800662e:	4798      	blx	r3
 8006630:	e041      	b.n	80066b6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006638:	b2db      	uxtb	r3, r3
 800663a:	2b60      	cmp	r3, #96	; 0x60
 800663c:	d125      	bne.n	800668a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2220      	movs	r2, #32
 8006642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2200      	movs	r2, #0
 800664a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	695b      	ldr	r3, [r3, #20]
 8006652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006656:	2b40      	cmp	r3, #64	; 0x40
 8006658:	d10b      	bne.n	8006672 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	691a      	ldr	r2, [r3, #16]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006664:	b2d2      	uxtb	r2, r2
 8006666:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800666c:	1c5a      	adds	r2, r3, #1
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	681a      	ldr	r2, [r3, #0]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f022 0201 	bic.w	r2, r2, #1
 8006680:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f7fe feec 	bl	8005460 <HAL_I2C_AbortCpltCallback>
 8006688:	e015      	b.n	80066b6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	695b      	ldr	r3, [r3, #20]
 8006690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006694:	2b40      	cmp	r3, #64	; 0x40
 8006696:	d10b      	bne.n	80066b0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	691a      	ldr	r2, [r3, #16]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a2:	b2d2      	uxtb	r2, r2
 80066a4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066aa:	1c5a      	adds	r2, r3, #1
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f7fe fecb 	bl	800544c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ba:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	f003 0301 	and.w	r3, r3, #1
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d10e      	bne.n	80066e4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d109      	bne.n	80066e4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d104      	bne.n	80066e4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d007      	beq.n	80066f4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	685a      	ldr	r2, [r3, #4]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80066f2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066fa:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006700:	f003 0304 	and.w	r3, r3, #4
 8006704:	2b04      	cmp	r3, #4
 8006706:	d113      	bne.n	8006730 <I2C_ITError+0x254>
 8006708:	7bfb      	ldrb	r3, [r7, #15]
 800670a:	2b28      	cmp	r3, #40	; 0x28
 800670c:	d110      	bne.n	8006730 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	4a0a      	ldr	r2, [pc, #40]	; (800673c <I2C_ITError+0x260>)
 8006712:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2200      	movs	r2, #0
 8006718:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2220      	movs	r2, #32
 800671e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2200      	movs	r2, #0
 8006726:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f7fe fe70 	bl	8005410 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006730:	bf00      	nop
 8006732:	3710      	adds	r7, #16
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}
 8006738:	08006a3d 	.word	0x08006a3d
 800673c:	ffff0000 	.word	0xffff0000

08006740 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b088      	sub	sp, #32
 8006744:	af02      	add	r7, sp, #8
 8006746:	60f8      	str	r0, [r7, #12]
 8006748:	4608      	mov	r0, r1
 800674a:	4611      	mov	r1, r2
 800674c:	461a      	mov	r2, r3
 800674e:	4603      	mov	r3, r0
 8006750:	817b      	strh	r3, [r7, #10]
 8006752:	460b      	mov	r3, r1
 8006754:	813b      	strh	r3, [r7, #8]
 8006756:	4613      	mov	r3, r2
 8006758:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	681a      	ldr	r2, [r3, #0]
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006768:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800676a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800676c:	9300      	str	r3, [sp, #0]
 800676e:	6a3b      	ldr	r3, [r7, #32]
 8006770:	2200      	movs	r2, #0
 8006772:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006776:	68f8      	ldr	r0, [r7, #12]
 8006778:	f000 fa08 	bl	8006b8c <I2C_WaitOnFlagUntilTimeout>
 800677c:	4603      	mov	r3, r0
 800677e:	2b00      	cmp	r3, #0
 8006780:	d00d      	beq.n	800679e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800678c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006790:	d103      	bne.n	800679a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006798:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800679a:	2303      	movs	r3, #3
 800679c:	e05f      	b.n	800685e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800679e:	897b      	ldrh	r3, [r7, #10]
 80067a0:	b2db      	uxtb	r3, r3
 80067a2:	461a      	mov	r2, r3
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80067ac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80067ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b0:	6a3a      	ldr	r2, [r7, #32]
 80067b2:	492d      	ldr	r1, [pc, #180]	; (8006868 <I2C_RequestMemoryWrite+0x128>)
 80067b4:	68f8      	ldr	r0, [r7, #12]
 80067b6:	f000 fa40 	bl	8006c3a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80067ba:	4603      	mov	r3, r0
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d001      	beq.n	80067c4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80067c0:	2301      	movs	r3, #1
 80067c2:	e04c      	b.n	800685e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067c4:	2300      	movs	r3, #0
 80067c6:	617b      	str	r3, [r7, #20]
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	695b      	ldr	r3, [r3, #20]
 80067ce:	617b      	str	r3, [r7, #20]
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	699b      	ldr	r3, [r3, #24]
 80067d6:	617b      	str	r3, [r7, #20]
 80067d8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80067da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067dc:	6a39      	ldr	r1, [r7, #32]
 80067de:	68f8      	ldr	r0, [r7, #12]
 80067e0:	f000 faaa 	bl	8006d38 <I2C_WaitOnTXEFlagUntilTimeout>
 80067e4:	4603      	mov	r3, r0
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d00d      	beq.n	8006806 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ee:	2b04      	cmp	r3, #4
 80067f0:	d107      	bne.n	8006802 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	681a      	ldr	r2, [r3, #0]
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006800:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006802:	2301      	movs	r3, #1
 8006804:	e02b      	b.n	800685e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006806:	88fb      	ldrh	r3, [r7, #6]
 8006808:	2b01      	cmp	r3, #1
 800680a:	d105      	bne.n	8006818 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800680c:	893b      	ldrh	r3, [r7, #8]
 800680e:	b2da      	uxtb	r2, r3
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	611a      	str	r2, [r3, #16]
 8006816:	e021      	b.n	800685c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006818:	893b      	ldrh	r3, [r7, #8]
 800681a:	0a1b      	lsrs	r3, r3, #8
 800681c:	b29b      	uxth	r3, r3
 800681e:	b2da      	uxtb	r2, r3
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006826:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006828:	6a39      	ldr	r1, [r7, #32]
 800682a:	68f8      	ldr	r0, [r7, #12]
 800682c:	f000 fa84 	bl	8006d38 <I2C_WaitOnTXEFlagUntilTimeout>
 8006830:	4603      	mov	r3, r0
 8006832:	2b00      	cmp	r3, #0
 8006834:	d00d      	beq.n	8006852 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800683a:	2b04      	cmp	r3, #4
 800683c:	d107      	bne.n	800684e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	681a      	ldr	r2, [r3, #0]
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800684c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800684e:	2301      	movs	r3, #1
 8006850:	e005      	b.n	800685e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006852:	893b      	ldrh	r3, [r7, #8]
 8006854:	b2da      	uxtb	r2, r3
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800685c:	2300      	movs	r3, #0
}
 800685e:	4618      	mov	r0, r3
 8006860:	3718      	adds	r7, #24
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}
 8006866:	bf00      	nop
 8006868:	00010002 	.word	0x00010002

0800686c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b088      	sub	sp, #32
 8006870:	af02      	add	r7, sp, #8
 8006872:	60f8      	str	r0, [r7, #12]
 8006874:	4608      	mov	r0, r1
 8006876:	4611      	mov	r1, r2
 8006878:	461a      	mov	r2, r3
 800687a:	4603      	mov	r3, r0
 800687c:	817b      	strh	r3, [r7, #10]
 800687e:	460b      	mov	r3, r1
 8006880:	813b      	strh	r3, [r7, #8]
 8006882:	4613      	mov	r3, r2
 8006884:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	681a      	ldr	r2, [r3, #0]
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006894:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	681a      	ldr	r2, [r3, #0]
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80068a4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80068a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a8:	9300      	str	r3, [sp, #0]
 80068aa:	6a3b      	ldr	r3, [r7, #32]
 80068ac:	2200      	movs	r2, #0
 80068ae:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80068b2:	68f8      	ldr	r0, [r7, #12]
 80068b4:	f000 f96a 	bl	8006b8c <I2C_WaitOnFlagUntilTimeout>
 80068b8:	4603      	mov	r3, r0
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d00d      	beq.n	80068da <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068cc:	d103      	bne.n	80068d6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80068d4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80068d6:	2303      	movs	r3, #3
 80068d8:	e0aa      	b.n	8006a30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80068da:	897b      	ldrh	r3, [r7, #10]
 80068dc:	b2db      	uxtb	r3, r3
 80068de:	461a      	mov	r2, r3
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80068e8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80068ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ec:	6a3a      	ldr	r2, [r7, #32]
 80068ee:	4952      	ldr	r1, [pc, #328]	; (8006a38 <I2C_RequestMemoryRead+0x1cc>)
 80068f0:	68f8      	ldr	r0, [r7, #12]
 80068f2:	f000 f9a2 	bl	8006c3a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80068f6:	4603      	mov	r3, r0
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d001      	beq.n	8006900 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80068fc:	2301      	movs	r3, #1
 80068fe:	e097      	b.n	8006a30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006900:	2300      	movs	r3, #0
 8006902:	617b      	str	r3, [r7, #20]
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	695b      	ldr	r3, [r3, #20]
 800690a:	617b      	str	r3, [r7, #20]
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	699b      	ldr	r3, [r3, #24]
 8006912:	617b      	str	r3, [r7, #20]
 8006914:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006916:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006918:	6a39      	ldr	r1, [r7, #32]
 800691a:	68f8      	ldr	r0, [r7, #12]
 800691c:	f000 fa0c 	bl	8006d38 <I2C_WaitOnTXEFlagUntilTimeout>
 8006920:	4603      	mov	r3, r0
 8006922:	2b00      	cmp	r3, #0
 8006924:	d00d      	beq.n	8006942 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800692a:	2b04      	cmp	r3, #4
 800692c:	d107      	bne.n	800693e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	681a      	ldr	r2, [r3, #0]
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800693c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800693e:	2301      	movs	r3, #1
 8006940:	e076      	b.n	8006a30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006942:	88fb      	ldrh	r3, [r7, #6]
 8006944:	2b01      	cmp	r3, #1
 8006946:	d105      	bne.n	8006954 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006948:	893b      	ldrh	r3, [r7, #8]
 800694a:	b2da      	uxtb	r2, r3
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	611a      	str	r2, [r3, #16]
 8006952:	e021      	b.n	8006998 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006954:	893b      	ldrh	r3, [r7, #8]
 8006956:	0a1b      	lsrs	r3, r3, #8
 8006958:	b29b      	uxth	r3, r3
 800695a:	b2da      	uxtb	r2, r3
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006962:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006964:	6a39      	ldr	r1, [r7, #32]
 8006966:	68f8      	ldr	r0, [r7, #12]
 8006968:	f000 f9e6 	bl	8006d38 <I2C_WaitOnTXEFlagUntilTimeout>
 800696c:	4603      	mov	r3, r0
 800696e:	2b00      	cmp	r3, #0
 8006970:	d00d      	beq.n	800698e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006976:	2b04      	cmp	r3, #4
 8006978:	d107      	bne.n	800698a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	681a      	ldr	r2, [r3, #0]
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006988:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800698a:	2301      	movs	r3, #1
 800698c:	e050      	b.n	8006a30 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800698e:	893b      	ldrh	r3, [r7, #8]
 8006990:	b2da      	uxtb	r2, r3
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006998:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800699a:	6a39      	ldr	r1, [r7, #32]
 800699c:	68f8      	ldr	r0, [r7, #12]
 800699e:	f000 f9cb 	bl	8006d38 <I2C_WaitOnTXEFlagUntilTimeout>
 80069a2:	4603      	mov	r3, r0
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d00d      	beq.n	80069c4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ac:	2b04      	cmp	r3, #4
 80069ae:	d107      	bne.n	80069c0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	681a      	ldr	r2, [r3, #0]
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069be:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80069c0:	2301      	movs	r3, #1
 80069c2:	e035      	b.n	8006a30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	681a      	ldr	r2, [r3, #0]
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80069d2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80069d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d6:	9300      	str	r3, [sp, #0]
 80069d8:	6a3b      	ldr	r3, [r7, #32]
 80069da:	2200      	movs	r2, #0
 80069dc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80069e0:	68f8      	ldr	r0, [r7, #12]
 80069e2:	f000 f8d3 	bl	8006b8c <I2C_WaitOnFlagUntilTimeout>
 80069e6:	4603      	mov	r3, r0
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d00d      	beq.n	8006a08 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069fa:	d103      	bne.n	8006a04 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a02:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006a04:	2303      	movs	r3, #3
 8006a06:	e013      	b.n	8006a30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006a08:	897b      	ldrh	r3, [r7, #10]
 8006a0a:	b2db      	uxtb	r3, r3
 8006a0c:	f043 0301 	orr.w	r3, r3, #1
 8006a10:	b2da      	uxtb	r2, r3
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a1a:	6a3a      	ldr	r2, [r7, #32]
 8006a1c:	4906      	ldr	r1, [pc, #24]	; (8006a38 <I2C_RequestMemoryRead+0x1cc>)
 8006a1e:	68f8      	ldr	r0, [r7, #12]
 8006a20:	f000 f90b 	bl	8006c3a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006a24:	4603      	mov	r3, r0
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d001      	beq.n	8006a2e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	e000      	b.n	8006a30 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006a2e:	2300      	movs	r3, #0
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	3718      	adds	r7, #24
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}
 8006a38:	00010002 	.word	0x00010002

08006a3c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b086      	sub	sp, #24
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006a44:	2300      	movs	r3, #0
 8006a46:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a4c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a54:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006a56:	4b4b      	ldr	r3, [pc, #300]	; (8006b84 <I2C_DMAAbort+0x148>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	08db      	lsrs	r3, r3, #3
 8006a5c:	4a4a      	ldr	r2, [pc, #296]	; (8006b88 <I2C_DMAAbort+0x14c>)
 8006a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8006a62:	0a1a      	lsrs	r2, r3, #8
 8006a64:	4613      	mov	r3, r2
 8006a66:	009b      	lsls	r3, r3, #2
 8006a68:	4413      	add	r3, r2
 8006a6a:	00da      	lsls	r2, r3, #3
 8006a6c:	1ad3      	subs	r3, r2, r3
 8006a6e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d106      	bne.n	8006a84 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a7a:	f043 0220 	orr.w	r2, r3, #32
 8006a7e:	697b      	ldr	r3, [r7, #20]
 8006a80:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8006a82:	e00a      	b.n	8006a9a <I2C_DMAAbort+0x5e>
    }
    count--;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	3b01      	subs	r3, #1
 8006a88:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a98:	d0ea      	beq.n	8006a70 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d003      	beq.n	8006aaa <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d003      	beq.n	8006aba <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	681a      	ldr	r2, [r3, #0]
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ac8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	2200      	movs	r2, #0
 8006ace:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d003      	beq.n	8006ae0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006ad8:	697b      	ldr	r3, [r7, #20]
 8006ada:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006adc:	2200      	movs	r2, #0
 8006ade:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d003      	beq.n	8006af0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aec:	2200      	movs	r2, #0
 8006aee:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	681a      	ldr	r2, [r3, #0]
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f022 0201 	bic.w	r2, r2, #1
 8006afe:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b06:	b2db      	uxtb	r3, r3
 8006b08:	2b60      	cmp	r3, #96	; 0x60
 8006b0a:	d10e      	bne.n	8006b2a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	2220      	movs	r2, #32
 8006b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	2200      	movs	r2, #0
 8006b18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006b22:	6978      	ldr	r0, [r7, #20]
 8006b24:	f7fe fc9c 	bl	8005460 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006b28:	e027      	b.n	8006b7a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006b2a:	7cfb      	ldrb	r3, [r7, #19]
 8006b2c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006b30:	2b28      	cmp	r3, #40	; 0x28
 8006b32:	d117      	bne.n	8006b64 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	681a      	ldr	r2, [r3, #0]
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f042 0201 	orr.w	r2, r2, #1
 8006b42:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	681a      	ldr	r2, [r3, #0]
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006b52:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	2200      	movs	r2, #0
 8006b58:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	2228      	movs	r2, #40	; 0x28
 8006b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006b62:	e007      	b.n	8006b74 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	2220      	movs	r2, #32
 8006b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006b74:	6978      	ldr	r0, [r7, #20]
 8006b76:	f7fe fc69 	bl	800544c <HAL_I2C_ErrorCallback>
}
 8006b7a:	bf00      	nop
 8006b7c:	3718      	adds	r7, #24
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}
 8006b82:	bf00      	nop
 8006b84:	2000000c 	.word	0x2000000c
 8006b88:	14f8b589 	.word	0x14f8b589

08006b8c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b084      	sub	sp, #16
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	60f8      	str	r0, [r7, #12]
 8006b94:	60b9      	str	r1, [r7, #8]
 8006b96:	603b      	str	r3, [r7, #0]
 8006b98:	4613      	mov	r3, r2
 8006b9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006b9c:	e025      	b.n	8006bea <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ba4:	d021      	beq.n	8006bea <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ba6:	f7fc fe5f 	bl	8003868 <HAL_GetTick>
 8006baa:	4602      	mov	r2, r0
 8006bac:	69bb      	ldr	r3, [r7, #24]
 8006bae:	1ad3      	subs	r3, r2, r3
 8006bb0:	683a      	ldr	r2, [r7, #0]
 8006bb2:	429a      	cmp	r2, r3
 8006bb4:	d302      	bcc.n	8006bbc <I2C_WaitOnFlagUntilTimeout+0x30>
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d116      	bne.n	8006bea <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2220      	movs	r2, #32
 8006bc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bd6:	f043 0220 	orr.w	r2, r3, #32
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	2200      	movs	r2, #0
 8006be2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006be6:	2301      	movs	r3, #1
 8006be8:	e023      	b.n	8006c32 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	0c1b      	lsrs	r3, r3, #16
 8006bee:	b2db      	uxtb	r3, r3
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	d10d      	bne.n	8006c10 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	695b      	ldr	r3, [r3, #20]
 8006bfa:	43da      	mvns	r2, r3
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	4013      	ands	r3, r2
 8006c00:	b29b      	uxth	r3, r3
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	bf0c      	ite	eq
 8006c06:	2301      	moveq	r3, #1
 8006c08:	2300      	movne	r3, #0
 8006c0a:	b2db      	uxtb	r3, r3
 8006c0c:	461a      	mov	r2, r3
 8006c0e:	e00c      	b.n	8006c2a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	699b      	ldr	r3, [r3, #24]
 8006c16:	43da      	mvns	r2, r3
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	4013      	ands	r3, r2
 8006c1c:	b29b      	uxth	r3, r3
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	bf0c      	ite	eq
 8006c22:	2301      	moveq	r3, #1
 8006c24:	2300      	movne	r3, #0
 8006c26:	b2db      	uxtb	r3, r3
 8006c28:	461a      	mov	r2, r3
 8006c2a:	79fb      	ldrb	r3, [r7, #7]
 8006c2c:	429a      	cmp	r2, r3
 8006c2e:	d0b6      	beq.n	8006b9e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006c30:	2300      	movs	r3, #0
}
 8006c32:	4618      	mov	r0, r3
 8006c34:	3710      	adds	r7, #16
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd80      	pop	{r7, pc}

08006c3a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006c3a:	b580      	push	{r7, lr}
 8006c3c:	b084      	sub	sp, #16
 8006c3e:	af00      	add	r7, sp, #0
 8006c40:	60f8      	str	r0, [r7, #12]
 8006c42:	60b9      	str	r1, [r7, #8]
 8006c44:	607a      	str	r2, [r7, #4]
 8006c46:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006c48:	e051      	b.n	8006cee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	695b      	ldr	r3, [r3, #20]
 8006c50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c58:	d123      	bne.n	8006ca2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	681a      	ldr	r2, [r3, #0]
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c68:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006c72:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	2200      	movs	r2, #0
 8006c78:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	2220      	movs	r2, #32
 8006c7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	2200      	movs	r2, #0
 8006c86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c8e:	f043 0204 	orr.w	r2, r3, #4
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	e046      	b.n	8006d30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ca8:	d021      	beq.n	8006cee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006caa:	f7fc fddd 	bl	8003868 <HAL_GetTick>
 8006cae:	4602      	mov	r2, r0
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	1ad3      	subs	r3, r2, r3
 8006cb4:	687a      	ldr	r2, [r7, #4]
 8006cb6:	429a      	cmp	r2, r3
 8006cb8:	d302      	bcc.n	8006cc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d116      	bne.n	8006cee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	2220      	movs	r2, #32
 8006cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cda:	f043 0220 	orr.w	r2, r3, #32
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006cea:	2301      	movs	r3, #1
 8006cec:	e020      	b.n	8006d30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	0c1b      	lsrs	r3, r3, #16
 8006cf2:	b2db      	uxtb	r3, r3
 8006cf4:	2b01      	cmp	r3, #1
 8006cf6:	d10c      	bne.n	8006d12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	695b      	ldr	r3, [r3, #20]
 8006cfe:	43da      	mvns	r2, r3
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	4013      	ands	r3, r2
 8006d04:	b29b      	uxth	r3, r3
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	bf14      	ite	ne
 8006d0a:	2301      	movne	r3, #1
 8006d0c:	2300      	moveq	r3, #0
 8006d0e:	b2db      	uxtb	r3, r3
 8006d10:	e00b      	b.n	8006d2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	699b      	ldr	r3, [r3, #24]
 8006d18:	43da      	mvns	r2, r3
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	4013      	ands	r3, r2
 8006d1e:	b29b      	uxth	r3, r3
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	bf14      	ite	ne
 8006d24:	2301      	movne	r3, #1
 8006d26:	2300      	moveq	r3, #0
 8006d28:	b2db      	uxtb	r3, r3
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d18d      	bne.n	8006c4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006d2e:	2300      	movs	r3, #0
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	3710      	adds	r7, #16
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}

08006d38 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b084      	sub	sp, #16
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	60f8      	str	r0, [r7, #12]
 8006d40:	60b9      	str	r1, [r7, #8]
 8006d42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006d44:	e02d      	b.n	8006da2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006d46:	68f8      	ldr	r0, [r7, #12]
 8006d48:	f000 f900 	bl	8006f4c <I2C_IsAcknowledgeFailed>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d001      	beq.n	8006d56 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006d52:	2301      	movs	r3, #1
 8006d54:	e02d      	b.n	8006db2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d5c:	d021      	beq.n	8006da2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d5e:	f7fc fd83 	bl	8003868 <HAL_GetTick>
 8006d62:	4602      	mov	r2, r0
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	1ad3      	subs	r3, r2, r3
 8006d68:	68ba      	ldr	r2, [r7, #8]
 8006d6a:	429a      	cmp	r2, r3
 8006d6c:	d302      	bcc.n	8006d74 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d116      	bne.n	8006da2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2200      	movs	r2, #0
 8006d78:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	2220      	movs	r2, #32
 8006d7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	2200      	movs	r2, #0
 8006d86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d8e:	f043 0220 	orr.w	r2, r3, #32
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	e007      	b.n	8006db2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	695b      	ldr	r3, [r3, #20]
 8006da8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dac:	2b80      	cmp	r3, #128	; 0x80
 8006dae:	d1ca      	bne.n	8006d46 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006db0:	2300      	movs	r3, #0
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	3710      	adds	r7, #16
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bd80      	pop	{r7, pc}

08006dba <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006dba:	b580      	push	{r7, lr}
 8006dbc:	b084      	sub	sp, #16
 8006dbe:	af00      	add	r7, sp, #0
 8006dc0:	60f8      	str	r0, [r7, #12]
 8006dc2:	60b9      	str	r1, [r7, #8]
 8006dc4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006dc6:	e02d      	b.n	8006e24 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006dc8:	68f8      	ldr	r0, [r7, #12]
 8006dca:	f000 f8bf 	bl	8006f4c <I2C_IsAcknowledgeFailed>
 8006dce:	4603      	mov	r3, r0
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d001      	beq.n	8006dd8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	e02d      	b.n	8006e34 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dde:	d021      	beq.n	8006e24 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006de0:	f7fc fd42 	bl	8003868 <HAL_GetTick>
 8006de4:	4602      	mov	r2, r0
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	1ad3      	subs	r3, r2, r3
 8006dea:	68ba      	ldr	r2, [r7, #8]
 8006dec:	429a      	cmp	r2, r3
 8006dee:	d302      	bcc.n	8006df6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d116      	bne.n	8006e24 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	2220      	movs	r2, #32
 8006e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	2200      	movs	r2, #0
 8006e08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e10:	f043 0220 	orr.w	r2, r3, #32
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006e20:	2301      	movs	r3, #1
 8006e22:	e007      	b.n	8006e34 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	695b      	ldr	r3, [r3, #20]
 8006e2a:	f003 0304 	and.w	r3, r3, #4
 8006e2e:	2b04      	cmp	r3, #4
 8006e30:	d1ca      	bne.n	8006dc8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006e32:	2300      	movs	r3, #0
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	3710      	adds	r7, #16
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd80      	pop	{r7, pc}

08006e3c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b085      	sub	sp, #20
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006e44:	2300      	movs	r3, #0
 8006e46:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006e48:	4b13      	ldr	r3, [pc, #76]	; (8006e98 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	08db      	lsrs	r3, r3, #3
 8006e4e:	4a13      	ldr	r2, [pc, #76]	; (8006e9c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006e50:	fba2 2303 	umull	r2, r3, r2, r3
 8006e54:	0a1a      	lsrs	r2, r3, #8
 8006e56:	4613      	mov	r3, r2
 8006e58:	009b      	lsls	r3, r3, #2
 8006e5a:	4413      	add	r3, r2
 8006e5c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	3b01      	subs	r3, #1
 8006e62:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d107      	bne.n	8006e7a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e6e:	f043 0220 	orr.w	r2, r3, #32
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006e76:	2301      	movs	r3, #1
 8006e78:	e008      	b.n	8006e8c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e88:	d0e9      	beq.n	8006e5e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8006e8a:	2300      	movs	r3, #0
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	3714      	adds	r7, #20
 8006e90:	46bd      	mov	sp, r7
 8006e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e96:	4770      	bx	lr
 8006e98:	2000000c 	.word	0x2000000c
 8006e9c:	14f8b589 	.word	0x14f8b589

08006ea0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b084      	sub	sp, #16
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	60f8      	str	r0, [r7, #12]
 8006ea8:	60b9      	str	r1, [r7, #8]
 8006eaa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006eac:	e042      	b.n	8006f34 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	695b      	ldr	r3, [r3, #20]
 8006eb4:	f003 0310 	and.w	r3, r3, #16
 8006eb8:	2b10      	cmp	r3, #16
 8006eba:	d119      	bne.n	8006ef0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f06f 0210 	mvn.w	r2, #16
 8006ec4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	2220      	movs	r2, #32
 8006ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006eec:	2301      	movs	r3, #1
 8006eee:	e029      	b.n	8006f44 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ef0:	f7fc fcba 	bl	8003868 <HAL_GetTick>
 8006ef4:	4602      	mov	r2, r0
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	1ad3      	subs	r3, r2, r3
 8006efa:	68ba      	ldr	r2, [r7, #8]
 8006efc:	429a      	cmp	r2, r3
 8006efe:	d302      	bcc.n	8006f06 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d116      	bne.n	8006f34 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	2220      	movs	r2, #32
 8006f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	2200      	movs	r2, #0
 8006f18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f20:	f043 0220 	orr.w	r2, r3, #32
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006f30:	2301      	movs	r3, #1
 8006f32:	e007      	b.n	8006f44 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	695b      	ldr	r3, [r3, #20]
 8006f3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f3e:	2b40      	cmp	r3, #64	; 0x40
 8006f40:	d1b5      	bne.n	8006eae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006f42:	2300      	movs	r3, #0
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	3710      	adds	r7, #16
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}

08006f4c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b083      	sub	sp, #12
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	695b      	ldr	r3, [r3, #20]
 8006f5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f62:	d11b      	bne.n	8006f9c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006f6c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2200      	movs	r2, #0
 8006f72:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2220      	movs	r2, #32
 8006f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f88:	f043 0204 	orr.w	r2, r3, #4
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2200      	movs	r2, #0
 8006f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006f98:	2301      	movs	r3, #1
 8006f9a:	e000      	b.n	8006f9e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006f9c:	2300      	movs	r3, #0
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	370c      	adds	r7, #12
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa8:	4770      	bx	lr

08006faa <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006faa:	b480      	push	{r7}
 8006fac:	b083      	sub	sp, #12
 8006fae:	af00      	add	r7, sp, #0
 8006fb0:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fb6:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006fba:	d103      	bne.n	8006fc4 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006fc2:	e007      	b.n	8006fd4 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fc8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006fcc:	d102      	bne.n	8006fd4 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2208      	movs	r2, #8
 8006fd2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006fd4:	bf00      	nop
 8006fd6:	370c      	adds	r7, #12
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fde:	4770      	bx	lr

08006fe0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b086      	sub	sp, #24
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d101      	bne.n	8006ff2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006fee:	2301      	movs	r3, #1
 8006ff0:	e267      	b.n	80074c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f003 0301 	and.w	r3, r3, #1
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d075      	beq.n	80070ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006ffe:	4b88      	ldr	r3, [pc, #544]	; (8007220 <HAL_RCC_OscConfig+0x240>)
 8007000:	689b      	ldr	r3, [r3, #8]
 8007002:	f003 030c 	and.w	r3, r3, #12
 8007006:	2b04      	cmp	r3, #4
 8007008:	d00c      	beq.n	8007024 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800700a:	4b85      	ldr	r3, [pc, #532]	; (8007220 <HAL_RCC_OscConfig+0x240>)
 800700c:	689b      	ldr	r3, [r3, #8]
 800700e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007012:	2b08      	cmp	r3, #8
 8007014:	d112      	bne.n	800703c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007016:	4b82      	ldr	r3, [pc, #520]	; (8007220 <HAL_RCC_OscConfig+0x240>)
 8007018:	685b      	ldr	r3, [r3, #4]
 800701a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800701e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007022:	d10b      	bne.n	800703c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007024:	4b7e      	ldr	r3, [pc, #504]	; (8007220 <HAL_RCC_OscConfig+0x240>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800702c:	2b00      	cmp	r3, #0
 800702e:	d05b      	beq.n	80070e8 <HAL_RCC_OscConfig+0x108>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d157      	bne.n	80070e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007038:	2301      	movs	r3, #1
 800703a:	e242      	b.n	80074c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	685b      	ldr	r3, [r3, #4]
 8007040:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007044:	d106      	bne.n	8007054 <HAL_RCC_OscConfig+0x74>
 8007046:	4b76      	ldr	r3, [pc, #472]	; (8007220 <HAL_RCC_OscConfig+0x240>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4a75      	ldr	r2, [pc, #468]	; (8007220 <HAL_RCC_OscConfig+0x240>)
 800704c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007050:	6013      	str	r3, [r2, #0]
 8007052:	e01d      	b.n	8007090 <HAL_RCC_OscConfig+0xb0>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	685b      	ldr	r3, [r3, #4]
 8007058:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800705c:	d10c      	bne.n	8007078 <HAL_RCC_OscConfig+0x98>
 800705e:	4b70      	ldr	r3, [pc, #448]	; (8007220 <HAL_RCC_OscConfig+0x240>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a6f      	ldr	r2, [pc, #444]	; (8007220 <HAL_RCC_OscConfig+0x240>)
 8007064:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007068:	6013      	str	r3, [r2, #0]
 800706a:	4b6d      	ldr	r3, [pc, #436]	; (8007220 <HAL_RCC_OscConfig+0x240>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4a6c      	ldr	r2, [pc, #432]	; (8007220 <HAL_RCC_OscConfig+0x240>)
 8007070:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007074:	6013      	str	r3, [r2, #0]
 8007076:	e00b      	b.n	8007090 <HAL_RCC_OscConfig+0xb0>
 8007078:	4b69      	ldr	r3, [pc, #420]	; (8007220 <HAL_RCC_OscConfig+0x240>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a68      	ldr	r2, [pc, #416]	; (8007220 <HAL_RCC_OscConfig+0x240>)
 800707e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007082:	6013      	str	r3, [r2, #0]
 8007084:	4b66      	ldr	r3, [pc, #408]	; (8007220 <HAL_RCC_OscConfig+0x240>)
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4a65      	ldr	r2, [pc, #404]	; (8007220 <HAL_RCC_OscConfig+0x240>)
 800708a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800708e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	685b      	ldr	r3, [r3, #4]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d013      	beq.n	80070c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007098:	f7fc fbe6 	bl	8003868 <HAL_GetTick>
 800709c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800709e:	e008      	b.n	80070b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80070a0:	f7fc fbe2 	bl	8003868 <HAL_GetTick>
 80070a4:	4602      	mov	r2, r0
 80070a6:	693b      	ldr	r3, [r7, #16]
 80070a8:	1ad3      	subs	r3, r2, r3
 80070aa:	2b64      	cmp	r3, #100	; 0x64
 80070ac:	d901      	bls.n	80070b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80070ae:	2303      	movs	r3, #3
 80070b0:	e207      	b.n	80074c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80070b2:	4b5b      	ldr	r3, [pc, #364]	; (8007220 <HAL_RCC_OscConfig+0x240>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d0f0      	beq.n	80070a0 <HAL_RCC_OscConfig+0xc0>
 80070be:	e014      	b.n	80070ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070c0:	f7fc fbd2 	bl	8003868 <HAL_GetTick>
 80070c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80070c6:	e008      	b.n	80070da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80070c8:	f7fc fbce 	bl	8003868 <HAL_GetTick>
 80070cc:	4602      	mov	r2, r0
 80070ce:	693b      	ldr	r3, [r7, #16]
 80070d0:	1ad3      	subs	r3, r2, r3
 80070d2:	2b64      	cmp	r3, #100	; 0x64
 80070d4:	d901      	bls.n	80070da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80070d6:	2303      	movs	r3, #3
 80070d8:	e1f3      	b.n	80074c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80070da:	4b51      	ldr	r3, [pc, #324]	; (8007220 <HAL_RCC_OscConfig+0x240>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d1f0      	bne.n	80070c8 <HAL_RCC_OscConfig+0xe8>
 80070e6:	e000      	b.n	80070ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80070e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f003 0302 	and.w	r3, r3, #2
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d063      	beq.n	80071be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80070f6:	4b4a      	ldr	r3, [pc, #296]	; (8007220 <HAL_RCC_OscConfig+0x240>)
 80070f8:	689b      	ldr	r3, [r3, #8]
 80070fa:	f003 030c 	and.w	r3, r3, #12
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d00b      	beq.n	800711a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007102:	4b47      	ldr	r3, [pc, #284]	; (8007220 <HAL_RCC_OscConfig+0x240>)
 8007104:	689b      	ldr	r3, [r3, #8]
 8007106:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800710a:	2b08      	cmp	r3, #8
 800710c:	d11c      	bne.n	8007148 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800710e:	4b44      	ldr	r3, [pc, #272]	; (8007220 <HAL_RCC_OscConfig+0x240>)
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007116:	2b00      	cmp	r3, #0
 8007118:	d116      	bne.n	8007148 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800711a:	4b41      	ldr	r3, [pc, #260]	; (8007220 <HAL_RCC_OscConfig+0x240>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f003 0302 	and.w	r3, r3, #2
 8007122:	2b00      	cmp	r3, #0
 8007124:	d005      	beq.n	8007132 <HAL_RCC_OscConfig+0x152>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	68db      	ldr	r3, [r3, #12]
 800712a:	2b01      	cmp	r3, #1
 800712c:	d001      	beq.n	8007132 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800712e:	2301      	movs	r3, #1
 8007130:	e1c7      	b.n	80074c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007132:	4b3b      	ldr	r3, [pc, #236]	; (8007220 <HAL_RCC_OscConfig+0x240>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	691b      	ldr	r3, [r3, #16]
 800713e:	00db      	lsls	r3, r3, #3
 8007140:	4937      	ldr	r1, [pc, #220]	; (8007220 <HAL_RCC_OscConfig+0x240>)
 8007142:	4313      	orrs	r3, r2
 8007144:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007146:	e03a      	b.n	80071be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	68db      	ldr	r3, [r3, #12]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d020      	beq.n	8007192 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007150:	4b34      	ldr	r3, [pc, #208]	; (8007224 <HAL_RCC_OscConfig+0x244>)
 8007152:	2201      	movs	r2, #1
 8007154:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007156:	f7fc fb87 	bl	8003868 <HAL_GetTick>
 800715a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800715c:	e008      	b.n	8007170 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800715e:	f7fc fb83 	bl	8003868 <HAL_GetTick>
 8007162:	4602      	mov	r2, r0
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	1ad3      	subs	r3, r2, r3
 8007168:	2b02      	cmp	r3, #2
 800716a:	d901      	bls.n	8007170 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800716c:	2303      	movs	r3, #3
 800716e:	e1a8      	b.n	80074c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007170:	4b2b      	ldr	r3, [pc, #172]	; (8007220 <HAL_RCC_OscConfig+0x240>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f003 0302 	and.w	r3, r3, #2
 8007178:	2b00      	cmp	r3, #0
 800717a:	d0f0      	beq.n	800715e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800717c:	4b28      	ldr	r3, [pc, #160]	; (8007220 <HAL_RCC_OscConfig+0x240>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	691b      	ldr	r3, [r3, #16]
 8007188:	00db      	lsls	r3, r3, #3
 800718a:	4925      	ldr	r1, [pc, #148]	; (8007220 <HAL_RCC_OscConfig+0x240>)
 800718c:	4313      	orrs	r3, r2
 800718e:	600b      	str	r3, [r1, #0]
 8007190:	e015      	b.n	80071be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007192:	4b24      	ldr	r3, [pc, #144]	; (8007224 <HAL_RCC_OscConfig+0x244>)
 8007194:	2200      	movs	r2, #0
 8007196:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007198:	f7fc fb66 	bl	8003868 <HAL_GetTick>
 800719c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800719e:	e008      	b.n	80071b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80071a0:	f7fc fb62 	bl	8003868 <HAL_GetTick>
 80071a4:	4602      	mov	r2, r0
 80071a6:	693b      	ldr	r3, [r7, #16]
 80071a8:	1ad3      	subs	r3, r2, r3
 80071aa:	2b02      	cmp	r3, #2
 80071ac:	d901      	bls.n	80071b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80071ae:	2303      	movs	r3, #3
 80071b0:	e187      	b.n	80074c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80071b2:	4b1b      	ldr	r3, [pc, #108]	; (8007220 <HAL_RCC_OscConfig+0x240>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f003 0302 	and.w	r3, r3, #2
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d1f0      	bne.n	80071a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f003 0308 	and.w	r3, r3, #8
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d036      	beq.n	8007238 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	695b      	ldr	r3, [r3, #20]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d016      	beq.n	8007200 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80071d2:	4b15      	ldr	r3, [pc, #84]	; (8007228 <HAL_RCC_OscConfig+0x248>)
 80071d4:	2201      	movs	r2, #1
 80071d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071d8:	f7fc fb46 	bl	8003868 <HAL_GetTick>
 80071dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80071de:	e008      	b.n	80071f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80071e0:	f7fc fb42 	bl	8003868 <HAL_GetTick>
 80071e4:	4602      	mov	r2, r0
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	1ad3      	subs	r3, r2, r3
 80071ea:	2b02      	cmp	r3, #2
 80071ec:	d901      	bls.n	80071f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80071ee:	2303      	movs	r3, #3
 80071f0:	e167      	b.n	80074c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80071f2:	4b0b      	ldr	r3, [pc, #44]	; (8007220 <HAL_RCC_OscConfig+0x240>)
 80071f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071f6:	f003 0302 	and.w	r3, r3, #2
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d0f0      	beq.n	80071e0 <HAL_RCC_OscConfig+0x200>
 80071fe:	e01b      	b.n	8007238 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007200:	4b09      	ldr	r3, [pc, #36]	; (8007228 <HAL_RCC_OscConfig+0x248>)
 8007202:	2200      	movs	r2, #0
 8007204:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007206:	f7fc fb2f 	bl	8003868 <HAL_GetTick>
 800720a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800720c:	e00e      	b.n	800722c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800720e:	f7fc fb2b 	bl	8003868 <HAL_GetTick>
 8007212:	4602      	mov	r2, r0
 8007214:	693b      	ldr	r3, [r7, #16]
 8007216:	1ad3      	subs	r3, r2, r3
 8007218:	2b02      	cmp	r3, #2
 800721a:	d907      	bls.n	800722c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800721c:	2303      	movs	r3, #3
 800721e:	e150      	b.n	80074c2 <HAL_RCC_OscConfig+0x4e2>
 8007220:	40023800 	.word	0x40023800
 8007224:	42470000 	.word	0x42470000
 8007228:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800722c:	4b88      	ldr	r3, [pc, #544]	; (8007450 <HAL_RCC_OscConfig+0x470>)
 800722e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007230:	f003 0302 	and.w	r3, r3, #2
 8007234:	2b00      	cmp	r3, #0
 8007236:	d1ea      	bne.n	800720e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f003 0304 	and.w	r3, r3, #4
 8007240:	2b00      	cmp	r3, #0
 8007242:	f000 8097 	beq.w	8007374 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007246:	2300      	movs	r3, #0
 8007248:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800724a:	4b81      	ldr	r3, [pc, #516]	; (8007450 <HAL_RCC_OscConfig+0x470>)
 800724c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800724e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007252:	2b00      	cmp	r3, #0
 8007254:	d10f      	bne.n	8007276 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007256:	2300      	movs	r3, #0
 8007258:	60bb      	str	r3, [r7, #8]
 800725a:	4b7d      	ldr	r3, [pc, #500]	; (8007450 <HAL_RCC_OscConfig+0x470>)
 800725c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800725e:	4a7c      	ldr	r2, [pc, #496]	; (8007450 <HAL_RCC_OscConfig+0x470>)
 8007260:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007264:	6413      	str	r3, [r2, #64]	; 0x40
 8007266:	4b7a      	ldr	r3, [pc, #488]	; (8007450 <HAL_RCC_OscConfig+0x470>)
 8007268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800726a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800726e:	60bb      	str	r3, [r7, #8]
 8007270:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007272:	2301      	movs	r3, #1
 8007274:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007276:	4b77      	ldr	r3, [pc, #476]	; (8007454 <HAL_RCC_OscConfig+0x474>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800727e:	2b00      	cmp	r3, #0
 8007280:	d118      	bne.n	80072b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007282:	4b74      	ldr	r3, [pc, #464]	; (8007454 <HAL_RCC_OscConfig+0x474>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4a73      	ldr	r2, [pc, #460]	; (8007454 <HAL_RCC_OscConfig+0x474>)
 8007288:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800728c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800728e:	f7fc faeb 	bl	8003868 <HAL_GetTick>
 8007292:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007294:	e008      	b.n	80072a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007296:	f7fc fae7 	bl	8003868 <HAL_GetTick>
 800729a:	4602      	mov	r2, r0
 800729c:	693b      	ldr	r3, [r7, #16]
 800729e:	1ad3      	subs	r3, r2, r3
 80072a0:	2b02      	cmp	r3, #2
 80072a2:	d901      	bls.n	80072a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80072a4:	2303      	movs	r3, #3
 80072a6:	e10c      	b.n	80074c2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80072a8:	4b6a      	ldr	r3, [pc, #424]	; (8007454 <HAL_RCC_OscConfig+0x474>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d0f0      	beq.n	8007296 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	689b      	ldr	r3, [r3, #8]
 80072b8:	2b01      	cmp	r3, #1
 80072ba:	d106      	bne.n	80072ca <HAL_RCC_OscConfig+0x2ea>
 80072bc:	4b64      	ldr	r3, [pc, #400]	; (8007450 <HAL_RCC_OscConfig+0x470>)
 80072be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072c0:	4a63      	ldr	r2, [pc, #396]	; (8007450 <HAL_RCC_OscConfig+0x470>)
 80072c2:	f043 0301 	orr.w	r3, r3, #1
 80072c6:	6713      	str	r3, [r2, #112]	; 0x70
 80072c8:	e01c      	b.n	8007304 <HAL_RCC_OscConfig+0x324>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	689b      	ldr	r3, [r3, #8]
 80072ce:	2b05      	cmp	r3, #5
 80072d0:	d10c      	bne.n	80072ec <HAL_RCC_OscConfig+0x30c>
 80072d2:	4b5f      	ldr	r3, [pc, #380]	; (8007450 <HAL_RCC_OscConfig+0x470>)
 80072d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072d6:	4a5e      	ldr	r2, [pc, #376]	; (8007450 <HAL_RCC_OscConfig+0x470>)
 80072d8:	f043 0304 	orr.w	r3, r3, #4
 80072dc:	6713      	str	r3, [r2, #112]	; 0x70
 80072de:	4b5c      	ldr	r3, [pc, #368]	; (8007450 <HAL_RCC_OscConfig+0x470>)
 80072e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072e2:	4a5b      	ldr	r2, [pc, #364]	; (8007450 <HAL_RCC_OscConfig+0x470>)
 80072e4:	f043 0301 	orr.w	r3, r3, #1
 80072e8:	6713      	str	r3, [r2, #112]	; 0x70
 80072ea:	e00b      	b.n	8007304 <HAL_RCC_OscConfig+0x324>
 80072ec:	4b58      	ldr	r3, [pc, #352]	; (8007450 <HAL_RCC_OscConfig+0x470>)
 80072ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072f0:	4a57      	ldr	r2, [pc, #348]	; (8007450 <HAL_RCC_OscConfig+0x470>)
 80072f2:	f023 0301 	bic.w	r3, r3, #1
 80072f6:	6713      	str	r3, [r2, #112]	; 0x70
 80072f8:	4b55      	ldr	r3, [pc, #340]	; (8007450 <HAL_RCC_OscConfig+0x470>)
 80072fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072fc:	4a54      	ldr	r2, [pc, #336]	; (8007450 <HAL_RCC_OscConfig+0x470>)
 80072fe:	f023 0304 	bic.w	r3, r3, #4
 8007302:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	689b      	ldr	r3, [r3, #8]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d015      	beq.n	8007338 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800730c:	f7fc faac 	bl	8003868 <HAL_GetTick>
 8007310:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007312:	e00a      	b.n	800732a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007314:	f7fc faa8 	bl	8003868 <HAL_GetTick>
 8007318:	4602      	mov	r2, r0
 800731a:	693b      	ldr	r3, [r7, #16]
 800731c:	1ad3      	subs	r3, r2, r3
 800731e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007322:	4293      	cmp	r3, r2
 8007324:	d901      	bls.n	800732a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007326:	2303      	movs	r3, #3
 8007328:	e0cb      	b.n	80074c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800732a:	4b49      	ldr	r3, [pc, #292]	; (8007450 <HAL_RCC_OscConfig+0x470>)
 800732c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800732e:	f003 0302 	and.w	r3, r3, #2
 8007332:	2b00      	cmp	r3, #0
 8007334:	d0ee      	beq.n	8007314 <HAL_RCC_OscConfig+0x334>
 8007336:	e014      	b.n	8007362 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007338:	f7fc fa96 	bl	8003868 <HAL_GetTick>
 800733c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800733e:	e00a      	b.n	8007356 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007340:	f7fc fa92 	bl	8003868 <HAL_GetTick>
 8007344:	4602      	mov	r2, r0
 8007346:	693b      	ldr	r3, [r7, #16]
 8007348:	1ad3      	subs	r3, r2, r3
 800734a:	f241 3288 	movw	r2, #5000	; 0x1388
 800734e:	4293      	cmp	r3, r2
 8007350:	d901      	bls.n	8007356 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007352:	2303      	movs	r3, #3
 8007354:	e0b5      	b.n	80074c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007356:	4b3e      	ldr	r3, [pc, #248]	; (8007450 <HAL_RCC_OscConfig+0x470>)
 8007358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800735a:	f003 0302 	and.w	r3, r3, #2
 800735e:	2b00      	cmp	r3, #0
 8007360:	d1ee      	bne.n	8007340 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007362:	7dfb      	ldrb	r3, [r7, #23]
 8007364:	2b01      	cmp	r3, #1
 8007366:	d105      	bne.n	8007374 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007368:	4b39      	ldr	r3, [pc, #228]	; (8007450 <HAL_RCC_OscConfig+0x470>)
 800736a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800736c:	4a38      	ldr	r2, [pc, #224]	; (8007450 <HAL_RCC_OscConfig+0x470>)
 800736e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007372:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	699b      	ldr	r3, [r3, #24]
 8007378:	2b00      	cmp	r3, #0
 800737a:	f000 80a1 	beq.w	80074c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800737e:	4b34      	ldr	r3, [pc, #208]	; (8007450 <HAL_RCC_OscConfig+0x470>)
 8007380:	689b      	ldr	r3, [r3, #8]
 8007382:	f003 030c 	and.w	r3, r3, #12
 8007386:	2b08      	cmp	r3, #8
 8007388:	d05c      	beq.n	8007444 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	699b      	ldr	r3, [r3, #24]
 800738e:	2b02      	cmp	r3, #2
 8007390:	d141      	bne.n	8007416 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007392:	4b31      	ldr	r3, [pc, #196]	; (8007458 <HAL_RCC_OscConfig+0x478>)
 8007394:	2200      	movs	r2, #0
 8007396:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007398:	f7fc fa66 	bl	8003868 <HAL_GetTick>
 800739c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800739e:	e008      	b.n	80073b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80073a0:	f7fc fa62 	bl	8003868 <HAL_GetTick>
 80073a4:	4602      	mov	r2, r0
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	1ad3      	subs	r3, r2, r3
 80073aa:	2b02      	cmp	r3, #2
 80073ac:	d901      	bls.n	80073b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80073ae:	2303      	movs	r3, #3
 80073b0:	e087      	b.n	80074c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80073b2:	4b27      	ldr	r3, [pc, #156]	; (8007450 <HAL_RCC_OscConfig+0x470>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d1f0      	bne.n	80073a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	69da      	ldr	r2, [r3, #28]
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6a1b      	ldr	r3, [r3, #32]
 80073c6:	431a      	orrs	r2, r3
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073cc:	019b      	lsls	r3, r3, #6
 80073ce:	431a      	orrs	r2, r3
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073d4:	085b      	lsrs	r3, r3, #1
 80073d6:	3b01      	subs	r3, #1
 80073d8:	041b      	lsls	r3, r3, #16
 80073da:	431a      	orrs	r2, r3
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073e0:	061b      	lsls	r3, r3, #24
 80073e2:	491b      	ldr	r1, [pc, #108]	; (8007450 <HAL_RCC_OscConfig+0x470>)
 80073e4:	4313      	orrs	r3, r2
 80073e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80073e8:	4b1b      	ldr	r3, [pc, #108]	; (8007458 <HAL_RCC_OscConfig+0x478>)
 80073ea:	2201      	movs	r2, #1
 80073ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073ee:	f7fc fa3b 	bl	8003868 <HAL_GetTick>
 80073f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80073f4:	e008      	b.n	8007408 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80073f6:	f7fc fa37 	bl	8003868 <HAL_GetTick>
 80073fa:	4602      	mov	r2, r0
 80073fc:	693b      	ldr	r3, [r7, #16]
 80073fe:	1ad3      	subs	r3, r2, r3
 8007400:	2b02      	cmp	r3, #2
 8007402:	d901      	bls.n	8007408 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007404:	2303      	movs	r3, #3
 8007406:	e05c      	b.n	80074c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007408:	4b11      	ldr	r3, [pc, #68]	; (8007450 <HAL_RCC_OscConfig+0x470>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007410:	2b00      	cmp	r3, #0
 8007412:	d0f0      	beq.n	80073f6 <HAL_RCC_OscConfig+0x416>
 8007414:	e054      	b.n	80074c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007416:	4b10      	ldr	r3, [pc, #64]	; (8007458 <HAL_RCC_OscConfig+0x478>)
 8007418:	2200      	movs	r2, #0
 800741a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800741c:	f7fc fa24 	bl	8003868 <HAL_GetTick>
 8007420:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007422:	e008      	b.n	8007436 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007424:	f7fc fa20 	bl	8003868 <HAL_GetTick>
 8007428:	4602      	mov	r2, r0
 800742a:	693b      	ldr	r3, [r7, #16]
 800742c:	1ad3      	subs	r3, r2, r3
 800742e:	2b02      	cmp	r3, #2
 8007430:	d901      	bls.n	8007436 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007432:	2303      	movs	r3, #3
 8007434:	e045      	b.n	80074c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007436:	4b06      	ldr	r3, [pc, #24]	; (8007450 <HAL_RCC_OscConfig+0x470>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800743e:	2b00      	cmp	r3, #0
 8007440:	d1f0      	bne.n	8007424 <HAL_RCC_OscConfig+0x444>
 8007442:	e03d      	b.n	80074c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	699b      	ldr	r3, [r3, #24]
 8007448:	2b01      	cmp	r3, #1
 800744a:	d107      	bne.n	800745c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800744c:	2301      	movs	r3, #1
 800744e:	e038      	b.n	80074c2 <HAL_RCC_OscConfig+0x4e2>
 8007450:	40023800 	.word	0x40023800
 8007454:	40007000 	.word	0x40007000
 8007458:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800745c:	4b1b      	ldr	r3, [pc, #108]	; (80074cc <HAL_RCC_OscConfig+0x4ec>)
 800745e:	685b      	ldr	r3, [r3, #4]
 8007460:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	699b      	ldr	r3, [r3, #24]
 8007466:	2b01      	cmp	r3, #1
 8007468:	d028      	beq.n	80074bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007474:	429a      	cmp	r2, r3
 8007476:	d121      	bne.n	80074bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007482:	429a      	cmp	r2, r3
 8007484:	d11a      	bne.n	80074bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007486:	68fa      	ldr	r2, [r7, #12]
 8007488:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800748c:	4013      	ands	r3, r2
 800748e:	687a      	ldr	r2, [r7, #4]
 8007490:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007492:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007494:	4293      	cmp	r3, r2
 8007496:	d111      	bne.n	80074bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074a2:	085b      	lsrs	r3, r3, #1
 80074a4:	3b01      	subs	r3, #1
 80074a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80074a8:	429a      	cmp	r2, r3
 80074aa:	d107      	bne.n	80074bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80074b8:	429a      	cmp	r2, r3
 80074ba:	d001      	beq.n	80074c0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80074bc:	2301      	movs	r3, #1
 80074be:	e000      	b.n	80074c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80074c0:	2300      	movs	r3, #0
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	3718      	adds	r7, #24
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}
 80074ca:	bf00      	nop
 80074cc:	40023800 	.word	0x40023800

080074d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b084      	sub	sp, #16
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
 80074d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d101      	bne.n	80074e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80074e0:	2301      	movs	r3, #1
 80074e2:	e0cc      	b.n	800767e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80074e4:	4b68      	ldr	r3, [pc, #416]	; (8007688 <HAL_RCC_ClockConfig+0x1b8>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f003 0307 	and.w	r3, r3, #7
 80074ec:	683a      	ldr	r2, [r7, #0]
 80074ee:	429a      	cmp	r2, r3
 80074f0:	d90c      	bls.n	800750c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80074f2:	4b65      	ldr	r3, [pc, #404]	; (8007688 <HAL_RCC_ClockConfig+0x1b8>)
 80074f4:	683a      	ldr	r2, [r7, #0]
 80074f6:	b2d2      	uxtb	r2, r2
 80074f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80074fa:	4b63      	ldr	r3, [pc, #396]	; (8007688 <HAL_RCC_ClockConfig+0x1b8>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f003 0307 	and.w	r3, r3, #7
 8007502:	683a      	ldr	r2, [r7, #0]
 8007504:	429a      	cmp	r2, r3
 8007506:	d001      	beq.n	800750c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007508:	2301      	movs	r3, #1
 800750a:	e0b8      	b.n	800767e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f003 0302 	and.w	r3, r3, #2
 8007514:	2b00      	cmp	r3, #0
 8007516:	d020      	beq.n	800755a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f003 0304 	and.w	r3, r3, #4
 8007520:	2b00      	cmp	r3, #0
 8007522:	d005      	beq.n	8007530 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007524:	4b59      	ldr	r3, [pc, #356]	; (800768c <HAL_RCC_ClockConfig+0x1bc>)
 8007526:	689b      	ldr	r3, [r3, #8]
 8007528:	4a58      	ldr	r2, [pc, #352]	; (800768c <HAL_RCC_ClockConfig+0x1bc>)
 800752a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800752e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f003 0308 	and.w	r3, r3, #8
 8007538:	2b00      	cmp	r3, #0
 800753a:	d005      	beq.n	8007548 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800753c:	4b53      	ldr	r3, [pc, #332]	; (800768c <HAL_RCC_ClockConfig+0x1bc>)
 800753e:	689b      	ldr	r3, [r3, #8]
 8007540:	4a52      	ldr	r2, [pc, #328]	; (800768c <HAL_RCC_ClockConfig+0x1bc>)
 8007542:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007546:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007548:	4b50      	ldr	r3, [pc, #320]	; (800768c <HAL_RCC_ClockConfig+0x1bc>)
 800754a:	689b      	ldr	r3, [r3, #8]
 800754c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	689b      	ldr	r3, [r3, #8]
 8007554:	494d      	ldr	r1, [pc, #308]	; (800768c <HAL_RCC_ClockConfig+0x1bc>)
 8007556:	4313      	orrs	r3, r2
 8007558:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f003 0301 	and.w	r3, r3, #1
 8007562:	2b00      	cmp	r3, #0
 8007564:	d044      	beq.n	80075f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	685b      	ldr	r3, [r3, #4]
 800756a:	2b01      	cmp	r3, #1
 800756c:	d107      	bne.n	800757e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800756e:	4b47      	ldr	r3, [pc, #284]	; (800768c <HAL_RCC_ClockConfig+0x1bc>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007576:	2b00      	cmp	r3, #0
 8007578:	d119      	bne.n	80075ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800757a:	2301      	movs	r3, #1
 800757c:	e07f      	b.n	800767e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	2b02      	cmp	r3, #2
 8007584:	d003      	beq.n	800758e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800758a:	2b03      	cmp	r3, #3
 800758c:	d107      	bne.n	800759e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800758e:	4b3f      	ldr	r3, [pc, #252]	; (800768c <HAL_RCC_ClockConfig+0x1bc>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007596:	2b00      	cmp	r3, #0
 8007598:	d109      	bne.n	80075ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800759a:	2301      	movs	r3, #1
 800759c:	e06f      	b.n	800767e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800759e:	4b3b      	ldr	r3, [pc, #236]	; (800768c <HAL_RCC_ClockConfig+0x1bc>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f003 0302 	and.w	r3, r3, #2
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d101      	bne.n	80075ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80075aa:	2301      	movs	r3, #1
 80075ac:	e067      	b.n	800767e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80075ae:	4b37      	ldr	r3, [pc, #220]	; (800768c <HAL_RCC_ClockConfig+0x1bc>)
 80075b0:	689b      	ldr	r3, [r3, #8]
 80075b2:	f023 0203 	bic.w	r2, r3, #3
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	685b      	ldr	r3, [r3, #4]
 80075ba:	4934      	ldr	r1, [pc, #208]	; (800768c <HAL_RCC_ClockConfig+0x1bc>)
 80075bc:	4313      	orrs	r3, r2
 80075be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80075c0:	f7fc f952 	bl	8003868 <HAL_GetTick>
 80075c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80075c6:	e00a      	b.n	80075de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80075c8:	f7fc f94e 	bl	8003868 <HAL_GetTick>
 80075cc:	4602      	mov	r2, r0
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	1ad3      	subs	r3, r2, r3
 80075d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d901      	bls.n	80075de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80075da:	2303      	movs	r3, #3
 80075dc:	e04f      	b.n	800767e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80075de:	4b2b      	ldr	r3, [pc, #172]	; (800768c <HAL_RCC_ClockConfig+0x1bc>)
 80075e0:	689b      	ldr	r3, [r3, #8]
 80075e2:	f003 020c 	and.w	r2, r3, #12
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	685b      	ldr	r3, [r3, #4]
 80075ea:	009b      	lsls	r3, r3, #2
 80075ec:	429a      	cmp	r2, r3
 80075ee:	d1eb      	bne.n	80075c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80075f0:	4b25      	ldr	r3, [pc, #148]	; (8007688 <HAL_RCC_ClockConfig+0x1b8>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f003 0307 	and.w	r3, r3, #7
 80075f8:	683a      	ldr	r2, [r7, #0]
 80075fa:	429a      	cmp	r2, r3
 80075fc:	d20c      	bcs.n	8007618 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075fe:	4b22      	ldr	r3, [pc, #136]	; (8007688 <HAL_RCC_ClockConfig+0x1b8>)
 8007600:	683a      	ldr	r2, [r7, #0]
 8007602:	b2d2      	uxtb	r2, r2
 8007604:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007606:	4b20      	ldr	r3, [pc, #128]	; (8007688 <HAL_RCC_ClockConfig+0x1b8>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f003 0307 	and.w	r3, r3, #7
 800760e:	683a      	ldr	r2, [r7, #0]
 8007610:	429a      	cmp	r2, r3
 8007612:	d001      	beq.n	8007618 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007614:	2301      	movs	r3, #1
 8007616:	e032      	b.n	800767e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f003 0304 	and.w	r3, r3, #4
 8007620:	2b00      	cmp	r3, #0
 8007622:	d008      	beq.n	8007636 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007624:	4b19      	ldr	r3, [pc, #100]	; (800768c <HAL_RCC_ClockConfig+0x1bc>)
 8007626:	689b      	ldr	r3, [r3, #8]
 8007628:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	68db      	ldr	r3, [r3, #12]
 8007630:	4916      	ldr	r1, [pc, #88]	; (800768c <HAL_RCC_ClockConfig+0x1bc>)
 8007632:	4313      	orrs	r3, r2
 8007634:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f003 0308 	and.w	r3, r3, #8
 800763e:	2b00      	cmp	r3, #0
 8007640:	d009      	beq.n	8007656 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007642:	4b12      	ldr	r3, [pc, #72]	; (800768c <HAL_RCC_ClockConfig+0x1bc>)
 8007644:	689b      	ldr	r3, [r3, #8]
 8007646:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	691b      	ldr	r3, [r3, #16]
 800764e:	00db      	lsls	r3, r3, #3
 8007650:	490e      	ldr	r1, [pc, #56]	; (800768c <HAL_RCC_ClockConfig+0x1bc>)
 8007652:	4313      	orrs	r3, r2
 8007654:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007656:	f000 f821 	bl	800769c <HAL_RCC_GetSysClockFreq>
 800765a:	4602      	mov	r2, r0
 800765c:	4b0b      	ldr	r3, [pc, #44]	; (800768c <HAL_RCC_ClockConfig+0x1bc>)
 800765e:	689b      	ldr	r3, [r3, #8]
 8007660:	091b      	lsrs	r3, r3, #4
 8007662:	f003 030f 	and.w	r3, r3, #15
 8007666:	490a      	ldr	r1, [pc, #40]	; (8007690 <HAL_RCC_ClockConfig+0x1c0>)
 8007668:	5ccb      	ldrb	r3, [r1, r3]
 800766a:	fa22 f303 	lsr.w	r3, r2, r3
 800766e:	4a09      	ldr	r2, [pc, #36]	; (8007694 <HAL_RCC_ClockConfig+0x1c4>)
 8007670:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007672:	4b09      	ldr	r3, [pc, #36]	; (8007698 <HAL_RCC_ClockConfig+0x1c8>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	4618      	mov	r0, r3
 8007678:	f7fc f8b2 	bl	80037e0 <HAL_InitTick>

  return HAL_OK;
 800767c:	2300      	movs	r3, #0
}
 800767e:	4618      	mov	r0, r3
 8007680:	3710      	adds	r7, #16
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}
 8007686:	bf00      	nop
 8007688:	40023c00 	.word	0x40023c00
 800768c:	40023800 	.word	0x40023800
 8007690:	080144a0 	.word	0x080144a0
 8007694:	2000000c 	.word	0x2000000c
 8007698:	20000020 	.word	0x20000020

0800769c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800769c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80076a0:	b094      	sub	sp, #80	; 0x50
 80076a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80076a4:	2300      	movs	r3, #0
 80076a6:	647b      	str	r3, [r7, #68]	; 0x44
 80076a8:	2300      	movs	r3, #0
 80076aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80076ac:	2300      	movs	r3, #0
 80076ae:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80076b0:	2300      	movs	r3, #0
 80076b2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80076b4:	4b79      	ldr	r3, [pc, #484]	; (800789c <HAL_RCC_GetSysClockFreq+0x200>)
 80076b6:	689b      	ldr	r3, [r3, #8]
 80076b8:	f003 030c 	and.w	r3, r3, #12
 80076bc:	2b08      	cmp	r3, #8
 80076be:	d00d      	beq.n	80076dc <HAL_RCC_GetSysClockFreq+0x40>
 80076c0:	2b08      	cmp	r3, #8
 80076c2:	f200 80e1 	bhi.w	8007888 <HAL_RCC_GetSysClockFreq+0x1ec>
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d002      	beq.n	80076d0 <HAL_RCC_GetSysClockFreq+0x34>
 80076ca:	2b04      	cmp	r3, #4
 80076cc:	d003      	beq.n	80076d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80076ce:	e0db      	b.n	8007888 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80076d0:	4b73      	ldr	r3, [pc, #460]	; (80078a0 <HAL_RCC_GetSysClockFreq+0x204>)
 80076d2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80076d4:	e0db      	b.n	800788e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80076d6:	4b73      	ldr	r3, [pc, #460]	; (80078a4 <HAL_RCC_GetSysClockFreq+0x208>)
 80076d8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80076da:	e0d8      	b.n	800788e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80076dc:	4b6f      	ldr	r3, [pc, #444]	; (800789c <HAL_RCC_GetSysClockFreq+0x200>)
 80076de:	685b      	ldr	r3, [r3, #4]
 80076e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80076e4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80076e6:	4b6d      	ldr	r3, [pc, #436]	; (800789c <HAL_RCC_GetSysClockFreq+0x200>)
 80076e8:	685b      	ldr	r3, [r3, #4]
 80076ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d063      	beq.n	80077ba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80076f2:	4b6a      	ldr	r3, [pc, #424]	; (800789c <HAL_RCC_GetSysClockFreq+0x200>)
 80076f4:	685b      	ldr	r3, [r3, #4]
 80076f6:	099b      	lsrs	r3, r3, #6
 80076f8:	2200      	movs	r2, #0
 80076fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80076fc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80076fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007700:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007704:	633b      	str	r3, [r7, #48]	; 0x30
 8007706:	2300      	movs	r3, #0
 8007708:	637b      	str	r3, [r7, #52]	; 0x34
 800770a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800770e:	4622      	mov	r2, r4
 8007710:	462b      	mov	r3, r5
 8007712:	f04f 0000 	mov.w	r0, #0
 8007716:	f04f 0100 	mov.w	r1, #0
 800771a:	0159      	lsls	r1, r3, #5
 800771c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007720:	0150      	lsls	r0, r2, #5
 8007722:	4602      	mov	r2, r0
 8007724:	460b      	mov	r3, r1
 8007726:	4621      	mov	r1, r4
 8007728:	1a51      	subs	r1, r2, r1
 800772a:	6139      	str	r1, [r7, #16]
 800772c:	4629      	mov	r1, r5
 800772e:	eb63 0301 	sbc.w	r3, r3, r1
 8007732:	617b      	str	r3, [r7, #20]
 8007734:	f04f 0200 	mov.w	r2, #0
 8007738:	f04f 0300 	mov.w	r3, #0
 800773c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007740:	4659      	mov	r1, fp
 8007742:	018b      	lsls	r3, r1, #6
 8007744:	4651      	mov	r1, sl
 8007746:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800774a:	4651      	mov	r1, sl
 800774c:	018a      	lsls	r2, r1, #6
 800774e:	4651      	mov	r1, sl
 8007750:	ebb2 0801 	subs.w	r8, r2, r1
 8007754:	4659      	mov	r1, fp
 8007756:	eb63 0901 	sbc.w	r9, r3, r1
 800775a:	f04f 0200 	mov.w	r2, #0
 800775e:	f04f 0300 	mov.w	r3, #0
 8007762:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007766:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800776a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800776e:	4690      	mov	r8, r2
 8007770:	4699      	mov	r9, r3
 8007772:	4623      	mov	r3, r4
 8007774:	eb18 0303 	adds.w	r3, r8, r3
 8007778:	60bb      	str	r3, [r7, #8]
 800777a:	462b      	mov	r3, r5
 800777c:	eb49 0303 	adc.w	r3, r9, r3
 8007780:	60fb      	str	r3, [r7, #12]
 8007782:	f04f 0200 	mov.w	r2, #0
 8007786:	f04f 0300 	mov.w	r3, #0
 800778a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800778e:	4629      	mov	r1, r5
 8007790:	024b      	lsls	r3, r1, #9
 8007792:	4621      	mov	r1, r4
 8007794:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007798:	4621      	mov	r1, r4
 800779a:	024a      	lsls	r2, r1, #9
 800779c:	4610      	mov	r0, r2
 800779e:	4619      	mov	r1, r3
 80077a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80077a2:	2200      	movs	r2, #0
 80077a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80077a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80077a8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80077ac:	f7f9 fa74 	bl	8000c98 <__aeabi_uldivmod>
 80077b0:	4602      	mov	r2, r0
 80077b2:	460b      	mov	r3, r1
 80077b4:	4613      	mov	r3, r2
 80077b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80077b8:	e058      	b.n	800786c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80077ba:	4b38      	ldr	r3, [pc, #224]	; (800789c <HAL_RCC_GetSysClockFreq+0x200>)
 80077bc:	685b      	ldr	r3, [r3, #4]
 80077be:	099b      	lsrs	r3, r3, #6
 80077c0:	2200      	movs	r2, #0
 80077c2:	4618      	mov	r0, r3
 80077c4:	4611      	mov	r1, r2
 80077c6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80077ca:	623b      	str	r3, [r7, #32]
 80077cc:	2300      	movs	r3, #0
 80077ce:	627b      	str	r3, [r7, #36]	; 0x24
 80077d0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80077d4:	4642      	mov	r2, r8
 80077d6:	464b      	mov	r3, r9
 80077d8:	f04f 0000 	mov.w	r0, #0
 80077dc:	f04f 0100 	mov.w	r1, #0
 80077e0:	0159      	lsls	r1, r3, #5
 80077e2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80077e6:	0150      	lsls	r0, r2, #5
 80077e8:	4602      	mov	r2, r0
 80077ea:	460b      	mov	r3, r1
 80077ec:	4641      	mov	r1, r8
 80077ee:	ebb2 0a01 	subs.w	sl, r2, r1
 80077f2:	4649      	mov	r1, r9
 80077f4:	eb63 0b01 	sbc.w	fp, r3, r1
 80077f8:	f04f 0200 	mov.w	r2, #0
 80077fc:	f04f 0300 	mov.w	r3, #0
 8007800:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007804:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007808:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800780c:	ebb2 040a 	subs.w	r4, r2, sl
 8007810:	eb63 050b 	sbc.w	r5, r3, fp
 8007814:	f04f 0200 	mov.w	r2, #0
 8007818:	f04f 0300 	mov.w	r3, #0
 800781c:	00eb      	lsls	r3, r5, #3
 800781e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007822:	00e2      	lsls	r2, r4, #3
 8007824:	4614      	mov	r4, r2
 8007826:	461d      	mov	r5, r3
 8007828:	4643      	mov	r3, r8
 800782a:	18e3      	adds	r3, r4, r3
 800782c:	603b      	str	r3, [r7, #0]
 800782e:	464b      	mov	r3, r9
 8007830:	eb45 0303 	adc.w	r3, r5, r3
 8007834:	607b      	str	r3, [r7, #4]
 8007836:	f04f 0200 	mov.w	r2, #0
 800783a:	f04f 0300 	mov.w	r3, #0
 800783e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007842:	4629      	mov	r1, r5
 8007844:	028b      	lsls	r3, r1, #10
 8007846:	4621      	mov	r1, r4
 8007848:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800784c:	4621      	mov	r1, r4
 800784e:	028a      	lsls	r2, r1, #10
 8007850:	4610      	mov	r0, r2
 8007852:	4619      	mov	r1, r3
 8007854:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007856:	2200      	movs	r2, #0
 8007858:	61bb      	str	r3, [r7, #24]
 800785a:	61fa      	str	r2, [r7, #28]
 800785c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007860:	f7f9 fa1a 	bl	8000c98 <__aeabi_uldivmod>
 8007864:	4602      	mov	r2, r0
 8007866:	460b      	mov	r3, r1
 8007868:	4613      	mov	r3, r2
 800786a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800786c:	4b0b      	ldr	r3, [pc, #44]	; (800789c <HAL_RCC_GetSysClockFreq+0x200>)
 800786e:	685b      	ldr	r3, [r3, #4]
 8007870:	0c1b      	lsrs	r3, r3, #16
 8007872:	f003 0303 	and.w	r3, r3, #3
 8007876:	3301      	adds	r3, #1
 8007878:	005b      	lsls	r3, r3, #1
 800787a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800787c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800787e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007880:	fbb2 f3f3 	udiv	r3, r2, r3
 8007884:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007886:	e002      	b.n	800788e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007888:	4b05      	ldr	r3, [pc, #20]	; (80078a0 <HAL_RCC_GetSysClockFreq+0x204>)
 800788a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800788c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800788e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007890:	4618      	mov	r0, r3
 8007892:	3750      	adds	r7, #80	; 0x50
 8007894:	46bd      	mov	sp, r7
 8007896:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800789a:	bf00      	nop
 800789c:	40023800 	.word	0x40023800
 80078a0:	00f42400 	.word	0x00f42400
 80078a4:	007a1200 	.word	0x007a1200

080078a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80078a8:	b480      	push	{r7}
 80078aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80078ac:	4b03      	ldr	r3, [pc, #12]	; (80078bc <HAL_RCC_GetHCLKFreq+0x14>)
 80078ae:	681b      	ldr	r3, [r3, #0]
}
 80078b0:	4618      	mov	r0, r3
 80078b2:	46bd      	mov	sp, r7
 80078b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b8:	4770      	bx	lr
 80078ba:	bf00      	nop
 80078bc:	2000000c 	.word	0x2000000c

080078c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80078c4:	f7ff fff0 	bl	80078a8 <HAL_RCC_GetHCLKFreq>
 80078c8:	4602      	mov	r2, r0
 80078ca:	4b05      	ldr	r3, [pc, #20]	; (80078e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80078cc:	689b      	ldr	r3, [r3, #8]
 80078ce:	0a9b      	lsrs	r3, r3, #10
 80078d0:	f003 0307 	and.w	r3, r3, #7
 80078d4:	4903      	ldr	r1, [pc, #12]	; (80078e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80078d6:	5ccb      	ldrb	r3, [r1, r3]
 80078d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80078dc:	4618      	mov	r0, r3
 80078de:	bd80      	pop	{r7, pc}
 80078e0:	40023800 	.word	0x40023800
 80078e4:	080144b0 	.word	0x080144b0

080078e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80078ec:	f7ff ffdc 	bl	80078a8 <HAL_RCC_GetHCLKFreq>
 80078f0:	4602      	mov	r2, r0
 80078f2:	4b05      	ldr	r3, [pc, #20]	; (8007908 <HAL_RCC_GetPCLK2Freq+0x20>)
 80078f4:	689b      	ldr	r3, [r3, #8]
 80078f6:	0b5b      	lsrs	r3, r3, #13
 80078f8:	f003 0307 	and.w	r3, r3, #7
 80078fc:	4903      	ldr	r1, [pc, #12]	; (800790c <HAL_RCC_GetPCLK2Freq+0x24>)
 80078fe:	5ccb      	ldrb	r3, [r1, r3]
 8007900:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007904:	4618      	mov	r0, r3
 8007906:	bd80      	pop	{r7, pc}
 8007908:	40023800 	.word	0x40023800
 800790c:	080144b0 	.word	0x080144b0

08007910 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b082      	sub	sp, #8
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d101      	bne.n	8007922 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800791e:	2301      	movs	r3, #1
 8007920:	e07b      	b.n	8007a1a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007926:	2b00      	cmp	r3, #0
 8007928:	d108      	bne.n	800793c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	685b      	ldr	r3, [r3, #4]
 800792e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007932:	d009      	beq.n	8007948 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2200      	movs	r2, #0
 8007938:	61da      	str	r2, [r3, #28]
 800793a:	e005      	b.n	8007948 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2200      	movs	r2, #0
 8007940:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2200      	movs	r2, #0
 8007946:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2200      	movs	r2, #0
 800794c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007954:	b2db      	uxtb	r3, r3
 8007956:	2b00      	cmp	r3, #0
 8007958:	d106      	bne.n	8007968 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2200      	movs	r2, #0
 800795e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f7fa fe3a 	bl	80025dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2202      	movs	r2, #2
 800796c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	681a      	ldr	r2, [r3, #0]
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800797e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	685b      	ldr	r3, [r3, #4]
 8007984:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	689b      	ldr	r3, [r3, #8]
 800798c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007990:	431a      	orrs	r2, r3
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	68db      	ldr	r3, [r3, #12]
 8007996:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800799a:	431a      	orrs	r2, r3
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	691b      	ldr	r3, [r3, #16]
 80079a0:	f003 0302 	and.w	r3, r3, #2
 80079a4:	431a      	orrs	r2, r3
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	695b      	ldr	r3, [r3, #20]
 80079aa:	f003 0301 	and.w	r3, r3, #1
 80079ae:	431a      	orrs	r2, r3
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	699b      	ldr	r3, [r3, #24]
 80079b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80079b8:	431a      	orrs	r2, r3
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	69db      	ldr	r3, [r3, #28]
 80079be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80079c2:	431a      	orrs	r2, r3
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6a1b      	ldr	r3, [r3, #32]
 80079c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079cc:	ea42 0103 	orr.w	r1, r2, r3
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079d4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	430a      	orrs	r2, r1
 80079de:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	699b      	ldr	r3, [r3, #24]
 80079e4:	0c1b      	lsrs	r3, r3, #16
 80079e6:	f003 0104 	and.w	r1, r3, #4
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ee:	f003 0210 	and.w	r2, r3, #16
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	430a      	orrs	r2, r1
 80079f8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	69da      	ldr	r2, [r3, #28]
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007a08:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2201      	movs	r2, #1
 8007a14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007a18:	2300      	movs	r3, #0
}
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	3708      	adds	r7, #8
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bd80      	pop	{r7, pc}

08007a22 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007a22:	b580      	push	{r7, lr}
 8007a24:	b08c      	sub	sp, #48	; 0x30
 8007a26:	af00      	add	r7, sp, #0
 8007a28:	60f8      	str	r0, [r7, #12]
 8007a2a:	60b9      	str	r1, [r7, #8]
 8007a2c:	607a      	str	r2, [r7, #4]
 8007a2e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007a30:	2301      	movs	r3, #1
 8007a32:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007a34:	2300      	movs	r3, #0
 8007a36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007a40:	2b01      	cmp	r3, #1
 8007a42:	d101      	bne.n	8007a48 <HAL_SPI_TransmitReceive+0x26>
 8007a44:	2302      	movs	r3, #2
 8007a46:	e18a      	b.n	8007d5e <HAL_SPI_TransmitReceive+0x33c>
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	2201      	movs	r2, #1
 8007a4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007a50:	f7fb ff0a 	bl	8003868 <HAL_GetTick>
 8007a54:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007a5c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	685b      	ldr	r3, [r3, #4]
 8007a64:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007a66:	887b      	ldrh	r3, [r7, #2]
 8007a68:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007a6a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007a6e:	2b01      	cmp	r3, #1
 8007a70:	d00f      	beq.n	8007a92 <HAL_SPI_TransmitReceive+0x70>
 8007a72:	69fb      	ldr	r3, [r7, #28]
 8007a74:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a78:	d107      	bne.n	8007a8a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	689b      	ldr	r3, [r3, #8]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d103      	bne.n	8007a8a <HAL_SPI_TransmitReceive+0x68>
 8007a82:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007a86:	2b04      	cmp	r3, #4
 8007a88:	d003      	beq.n	8007a92 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007a8a:	2302      	movs	r3, #2
 8007a8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007a90:	e15b      	b.n	8007d4a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d005      	beq.n	8007aa4 <HAL_SPI_TransmitReceive+0x82>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d002      	beq.n	8007aa4 <HAL_SPI_TransmitReceive+0x82>
 8007a9e:	887b      	ldrh	r3, [r7, #2]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d103      	bne.n	8007aac <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007aaa:	e14e      	b.n	8007d4a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007ab2:	b2db      	uxtb	r3, r3
 8007ab4:	2b04      	cmp	r3, #4
 8007ab6:	d003      	beq.n	8007ac0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	2205      	movs	r2, #5
 8007abc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	687a      	ldr	r2, [r7, #4]
 8007aca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	887a      	ldrh	r2, [r7, #2]
 8007ad0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	887a      	ldrh	r2, [r7, #2]
 8007ad6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	68ba      	ldr	r2, [r7, #8]
 8007adc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	887a      	ldrh	r2, [r7, #2]
 8007ae2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	887a      	ldrh	r2, [r7, #2]
 8007ae8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	2200      	movs	r2, #0
 8007aee:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	2200      	movs	r2, #0
 8007af4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b00:	2b40      	cmp	r3, #64	; 0x40
 8007b02:	d007      	beq.n	8007b14 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	681a      	ldr	r2, [r3, #0]
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b12:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	68db      	ldr	r3, [r3, #12]
 8007b18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b1c:	d178      	bne.n	8007c10 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	685b      	ldr	r3, [r3, #4]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d002      	beq.n	8007b2c <HAL_SPI_TransmitReceive+0x10a>
 8007b26:	8b7b      	ldrh	r3, [r7, #26]
 8007b28:	2b01      	cmp	r3, #1
 8007b2a:	d166      	bne.n	8007bfa <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b30:	881a      	ldrh	r2, [r3, #0]
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b3c:	1c9a      	adds	r2, r3, #2
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b46:	b29b      	uxth	r3, r3
 8007b48:	3b01      	subs	r3, #1
 8007b4a:	b29a      	uxth	r2, r3
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007b50:	e053      	b.n	8007bfa <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	689b      	ldr	r3, [r3, #8]
 8007b58:	f003 0302 	and.w	r3, r3, #2
 8007b5c:	2b02      	cmp	r3, #2
 8007b5e:	d11b      	bne.n	8007b98 <HAL_SPI_TransmitReceive+0x176>
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b64:	b29b      	uxth	r3, r3
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d016      	beq.n	8007b98 <HAL_SPI_TransmitReceive+0x176>
 8007b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b6c:	2b01      	cmp	r3, #1
 8007b6e:	d113      	bne.n	8007b98 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b74:	881a      	ldrh	r2, [r3, #0]
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b80:	1c9a      	adds	r2, r3, #2
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b8a:	b29b      	uxth	r3, r3
 8007b8c:	3b01      	subs	r3, #1
 8007b8e:	b29a      	uxth	r2, r3
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007b94:	2300      	movs	r3, #0
 8007b96:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	689b      	ldr	r3, [r3, #8]
 8007b9e:	f003 0301 	and.w	r3, r3, #1
 8007ba2:	2b01      	cmp	r3, #1
 8007ba4:	d119      	bne.n	8007bda <HAL_SPI_TransmitReceive+0x1b8>
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007baa:	b29b      	uxth	r3, r3
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d014      	beq.n	8007bda <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	68da      	ldr	r2, [r3, #12]
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bba:	b292      	uxth	r2, r2
 8007bbc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bc2:	1c9a      	adds	r2, r3, #2
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007bcc:	b29b      	uxth	r3, r3
 8007bce:	3b01      	subs	r3, #1
 8007bd0:	b29a      	uxth	r2, r3
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007bda:	f7fb fe45 	bl	8003868 <HAL_GetTick>
 8007bde:	4602      	mov	r2, r0
 8007be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007be2:	1ad3      	subs	r3, r2, r3
 8007be4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007be6:	429a      	cmp	r2, r3
 8007be8:	d807      	bhi.n	8007bfa <HAL_SPI_TransmitReceive+0x1d8>
 8007bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bf0:	d003      	beq.n	8007bfa <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007bf2:	2303      	movs	r3, #3
 8007bf4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007bf8:	e0a7      	b.n	8007d4a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007bfe:	b29b      	uxth	r3, r3
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d1a6      	bne.n	8007b52 <HAL_SPI_TransmitReceive+0x130>
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c08:	b29b      	uxth	r3, r3
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d1a1      	bne.n	8007b52 <HAL_SPI_TransmitReceive+0x130>
 8007c0e:	e07c      	b.n	8007d0a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	685b      	ldr	r3, [r3, #4]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d002      	beq.n	8007c1e <HAL_SPI_TransmitReceive+0x1fc>
 8007c18:	8b7b      	ldrh	r3, [r7, #26]
 8007c1a:	2b01      	cmp	r3, #1
 8007c1c:	d16b      	bne.n	8007cf6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	330c      	adds	r3, #12
 8007c28:	7812      	ldrb	r2, [r2, #0]
 8007c2a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c30:	1c5a      	adds	r2, r3, #1
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c3a:	b29b      	uxth	r3, r3
 8007c3c:	3b01      	subs	r3, #1
 8007c3e:	b29a      	uxth	r2, r3
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007c44:	e057      	b.n	8007cf6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	689b      	ldr	r3, [r3, #8]
 8007c4c:	f003 0302 	and.w	r3, r3, #2
 8007c50:	2b02      	cmp	r3, #2
 8007c52:	d11c      	bne.n	8007c8e <HAL_SPI_TransmitReceive+0x26c>
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c58:	b29b      	uxth	r3, r3
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d017      	beq.n	8007c8e <HAL_SPI_TransmitReceive+0x26c>
 8007c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c60:	2b01      	cmp	r3, #1
 8007c62:	d114      	bne.n	8007c8e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	330c      	adds	r3, #12
 8007c6e:	7812      	ldrb	r2, [r2, #0]
 8007c70:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c76:	1c5a      	adds	r2, r3, #1
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c80:	b29b      	uxth	r3, r3
 8007c82:	3b01      	subs	r3, #1
 8007c84:	b29a      	uxth	r2, r3
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	689b      	ldr	r3, [r3, #8]
 8007c94:	f003 0301 	and.w	r3, r3, #1
 8007c98:	2b01      	cmp	r3, #1
 8007c9a:	d119      	bne.n	8007cd0 <HAL_SPI_TransmitReceive+0x2ae>
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ca0:	b29b      	uxth	r3, r3
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d014      	beq.n	8007cd0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	68da      	ldr	r2, [r3, #12]
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cb0:	b2d2      	uxtb	r2, r2
 8007cb2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cb8:	1c5a      	adds	r2, r3, #1
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007cc2:	b29b      	uxth	r3, r3
 8007cc4:	3b01      	subs	r3, #1
 8007cc6:	b29a      	uxth	r2, r3
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007ccc:	2301      	movs	r3, #1
 8007cce:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007cd0:	f7fb fdca 	bl	8003868 <HAL_GetTick>
 8007cd4:	4602      	mov	r2, r0
 8007cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cd8:	1ad3      	subs	r3, r2, r3
 8007cda:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007cdc:	429a      	cmp	r2, r3
 8007cde:	d803      	bhi.n	8007ce8 <HAL_SPI_TransmitReceive+0x2c6>
 8007ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ce6:	d102      	bne.n	8007cee <HAL_SPI_TransmitReceive+0x2cc>
 8007ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d103      	bne.n	8007cf6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007cee:	2303      	movs	r3, #3
 8007cf0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007cf4:	e029      	b.n	8007d4a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007cfa:	b29b      	uxth	r3, r3
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d1a2      	bne.n	8007c46 <HAL_SPI_TransmitReceive+0x224>
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d04:	b29b      	uxth	r3, r3
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d19d      	bne.n	8007c46 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007d0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d0c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007d0e:	68f8      	ldr	r0, [r7, #12]
 8007d10:	f000 f8b2 	bl	8007e78 <SPI_EndRxTxTransaction>
 8007d14:	4603      	mov	r3, r0
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d006      	beq.n	8007d28 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	2220      	movs	r2, #32
 8007d24:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007d26:	e010      	b.n	8007d4a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	689b      	ldr	r3, [r3, #8]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d10b      	bne.n	8007d48 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007d30:	2300      	movs	r3, #0
 8007d32:	617b      	str	r3, [r7, #20]
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	68db      	ldr	r3, [r3, #12]
 8007d3a:	617b      	str	r3, [r7, #20]
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	689b      	ldr	r3, [r3, #8]
 8007d42:	617b      	str	r3, [r7, #20]
 8007d44:	697b      	ldr	r3, [r7, #20]
 8007d46:	e000      	b.n	8007d4a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007d48:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	2201      	movs	r2, #1
 8007d4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	2200      	movs	r2, #0
 8007d56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007d5a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	3730      	adds	r7, #48	; 0x30
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}
	...

08007d68 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b088      	sub	sp, #32
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	60f8      	str	r0, [r7, #12]
 8007d70:	60b9      	str	r1, [r7, #8]
 8007d72:	603b      	str	r3, [r7, #0]
 8007d74:	4613      	mov	r3, r2
 8007d76:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007d78:	f7fb fd76 	bl	8003868 <HAL_GetTick>
 8007d7c:	4602      	mov	r2, r0
 8007d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d80:	1a9b      	subs	r3, r3, r2
 8007d82:	683a      	ldr	r2, [r7, #0]
 8007d84:	4413      	add	r3, r2
 8007d86:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007d88:	f7fb fd6e 	bl	8003868 <HAL_GetTick>
 8007d8c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007d8e:	4b39      	ldr	r3, [pc, #228]	; (8007e74 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	015b      	lsls	r3, r3, #5
 8007d94:	0d1b      	lsrs	r3, r3, #20
 8007d96:	69fa      	ldr	r2, [r7, #28]
 8007d98:	fb02 f303 	mul.w	r3, r2, r3
 8007d9c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007d9e:	e054      	b.n	8007e4a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007da6:	d050      	beq.n	8007e4a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007da8:	f7fb fd5e 	bl	8003868 <HAL_GetTick>
 8007dac:	4602      	mov	r2, r0
 8007dae:	69bb      	ldr	r3, [r7, #24]
 8007db0:	1ad3      	subs	r3, r2, r3
 8007db2:	69fa      	ldr	r2, [r7, #28]
 8007db4:	429a      	cmp	r2, r3
 8007db6:	d902      	bls.n	8007dbe <SPI_WaitFlagStateUntilTimeout+0x56>
 8007db8:	69fb      	ldr	r3, [r7, #28]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d13d      	bne.n	8007e3a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	685a      	ldr	r2, [r3, #4]
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007dcc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	685b      	ldr	r3, [r3, #4]
 8007dd2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007dd6:	d111      	bne.n	8007dfc <SPI_WaitFlagStateUntilTimeout+0x94>
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	689b      	ldr	r3, [r3, #8]
 8007ddc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007de0:	d004      	beq.n	8007dec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	689b      	ldr	r3, [r3, #8]
 8007de6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007dea:	d107      	bne.n	8007dfc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	681a      	ldr	r2, [r3, #0]
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007dfa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e04:	d10f      	bne.n	8007e26 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	681a      	ldr	r2, [r3, #0]
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007e14:	601a      	str	r2, [r3, #0]
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	681a      	ldr	r2, [r3, #0]
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007e24:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	2201      	movs	r2, #1
 8007e2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	2200      	movs	r2, #0
 8007e32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007e36:	2303      	movs	r3, #3
 8007e38:	e017      	b.n	8007e6a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007e3a:	697b      	ldr	r3, [r7, #20]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d101      	bne.n	8007e44 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007e40:	2300      	movs	r3, #0
 8007e42:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007e44:	697b      	ldr	r3, [r7, #20]
 8007e46:	3b01      	subs	r3, #1
 8007e48:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	689a      	ldr	r2, [r3, #8]
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	4013      	ands	r3, r2
 8007e54:	68ba      	ldr	r2, [r7, #8]
 8007e56:	429a      	cmp	r2, r3
 8007e58:	bf0c      	ite	eq
 8007e5a:	2301      	moveq	r3, #1
 8007e5c:	2300      	movne	r3, #0
 8007e5e:	b2db      	uxtb	r3, r3
 8007e60:	461a      	mov	r2, r3
 8007e62:	79fb      	ldrb	r3, [r7, #7]
 8007e64:	429a      	cmp	r2, r3
 8007e66:	d19b      	bne.n	8007da0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007e68:	2300      	movs	r3, #0
}
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	3720      	adds	r7, #32
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd80      	pop	{r7, pc}
 8007e72:	bf00      	nop
 8007e74:	2000000c 	.word	0x2000000c

08007e78 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b088      	sub	sp, #32
 8007e7c:	af02      	add	r7, sp, #8
 8007e7e:	60f8      	str	r0, [r7, #12]
 8007e80:	60b9      	str	r1, [r7, #8]
 8007e82:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007e84:	4b1b      	ldr	r3, [pc, #108]	; (8007ef4 <SPI_EndRxTxTransaction+0x7c>)
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	4a1b      	ldr	r2, [pc, #108]	; (8007ef8 <SPI_EndRxTxTransaction+0x80>)
 8007e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8007e8e:	0d5b      	lsrs	r3, r3, #21
 8007e90:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007e94:	fb02 f303 	mul.w	r3, r2, r3
 8007e98:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	685b      	ldr	r3, [r3, #4]
 8007e9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007ea2:	d112      	bne.n	8007eca <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	9300      	str	r3, [sp, #0]
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	2200      	movs	r2, #0
 8007eac:	2180      	movs	r1, #128	; 0x80
 8007eae:	68f8      	ldr	r0, [r7, #12]
 8007eb0:	f7ff ff5a 	bl	8007d68 <SPI_WaitFlagStateUntilTimeout>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d016      	beq.n	8007ee8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ebe:	f043 0220 	orr.w	r2, r3, #32
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007ec6:	2303      	movs	r3, #3
 8007ec8:	e00f      	b.n	8007eea <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d00a      	beq.n	8007ee6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007ed0:	697b      	ldr	r3, [r7, #20]
 8007ed2:	3b01      	subs	r3, #1
 8007ed4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	689b      	ldr	r3, [r3, #8]
 8007edc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ee0:	2b80      	cmp	r3, #128	; 0x80
 8007ee2:	d0f2      	beq.n	8007eca <SPI_EndRxTxTransaction+0x52>
 8007ee4:	e000      	b.n	8007ee8 <SPI_EndRxTxTransaction+0x70>
        break;
 8007ee6:	bf00      	nop
  }

  return HAL_OK;
 8007ee8:	2300      	movs	r3, #0
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	3718      	adds	r7, #24
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}
 8007ef2:	bf00      	nop
 8007ef4:	2000000c 	.word	0x2000000c
 8007ef8:	165e9f81 	.word	0x165e9f81

08007efc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b082      	sub	sp, #8
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d101      	bne.n	8007f0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	e041      	b.n	8007f92 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f14:	b2db      	uxtb	r3, r3
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d106      	bne.n	8007f28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	f7fa fba2 	bl	800266c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2202      	movs	r2, #2
 8007f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681a      	ldr	r2, [r3, #0]
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	3304      	adds	r3, #4
 8007f38:	4619      	mov	r1, r3
 8007f3a:	4610      	mov	r0, r2
 8007f3c:	f000 f9f0 	bl	8008320 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2201      	movs	r2, #1
 8007f44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2201      	movs	r2, #1
 8007f4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2201      	movs	r2, #1
 8007f54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2201      	movs	r2, #1
 8007f5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2201      	movs	r2, #1
 8007f64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2201      	movs	r2, #1
 8007f74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2201      	movs	r2, #1
 8007f7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2201      	movs	r2, #1
 8007f84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2201      	movs	r2, #1
 8007f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007f90:	2300      	movs	r3, #0
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	3708      	adds	r7, #8
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}
	...

08007f9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b085      	sub	sp, #20
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007faa:	b2db      	uxtb	r3, r3
 8007fac:	2b01      	cmp	r3, #1
 8007fae:	d001      	beq.n	8007fb4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007fb0:	2301      	movs	r3, #1
 8007fb2:	e044      	b.n	800803e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2202      	movs	r2, #2
 8007fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	68da      	ldr	r2, [r3, #12]
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f042 0201 	orr.w	r2, r2, #1
 8007fca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	4a1e      	ldr	r2, [pc, #120]	; (800804c <HAL_TIM_Base_Start_IT+0xb0>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d018      	beq.n	8008008 <HAL_TIM_Base_Start_IT+0x6c>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fde:	d013      	beq.n	8008008 <HAL_TIM_Base_Start_IT+0x6c>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	4a1a      	ldr	r2, [pc, #104]	; (8008050 <HAL_TIM_Base_Start_IT+0xb4>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d00e      	beq.n	8008008 <HAL_TIM_Base_Start_IT+0x6c>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	4a19      	ldr	r2, [pc, #100]	; (8008054 <HAL_TIM_Base_Start_IT+0xb8>)
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d009      	beq.n	8008008 <HAL_TIM_Base_Start_IT+0x6c>
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	4a17      	ldr	r2, [pc, #92]	; (8008058 <HAL_TIM_Base_Start_IT+0xbc>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d004      	beq.n	8008008 <HAL_TIM_Base_Start_IT+0x6c>
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	4a16      	ldr	r2, [pc, #88]	; (800805c <HAL_TIM_Base_Start_IT+0xc0>)
 8008004:	4293      	cmp	r3, r2
 8008006:	d111      	bne.n	800802c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	689b      	ldr	r3, [r3, #8]
 800800e:	f003 0307 	and.w	r3, r3, #7
 8008012:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	2b06      	cmp	r3, #6
 8008018:	d010      	beq.n	800803c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	681a      	ldr	r2, [r3, #0]
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f042 0201 	orr.w	r2, r2, #1
 8008028:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800802a:	e007      	b.n	800803c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	681a      	ldr	r2, [r3, #0]
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f042 0201 	orr.w	r2, r2, #1
 800803a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800803c:	2300      	movs	r3, #0
}
 800803e:	4618      	mov	r0, r3
 8008040:	3714      	adds	r7, #20
 8008042:	46bd      	mov	sp, r7
 8008044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008048:	4770      	bx	lr
 800804a:	bf00      	nop
 800804c:	40010000 	.word	0x40010000
 8008050:	40000400 	.word	0x40000400
 8008054:	40000800 	.word	0x40000800
 8008058:	40000c00 	.word	0x40000c00
 800805c:	40014000 	.word	0x40014000

08008060 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008060:	b480      	push	{r7}
 8008062:	b083      	sub	sp, #12
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	68da      	ldr	r2, [r3, #12]
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f022 0201 	bic.w	r2, r2, #1
 8008076:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	6a1a      	ldr	r2, [r3, #32]
 800807e:	f241 1311 	movw	r3, #4369	; 0x1111
 8008082:	4013      	ands	r3, r2
 8008084:	2b00      	cmp	r3, #0
 8008086:	d10f      	bne.n	80080a8 <HAL_TIM_Base_Stop_IT+0x48>
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	6a1a      	ldr	r2, [r3, #32]
 800808e:	f240 4344 	movw	r3, #1092	; 0x444
 8008092:	4013      	ands	r3, r2
 8008094:	2b00      	cmp	r3, #0
 8008096:	d107      	bne.n	80080a8 <HAL_TIM_Base_Stop_IT+0x48>
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	681a      	ldr	r2, [r3, #0]
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f022 0201 	bic.w	r2, r2, #1
 80080a6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2201      	movs	r2, #1
 80080ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80080b0:	2300      	movs	r3, #0
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	370c      	adds	r7, #12
 80080b6:	46bd      	mov	sp, r7
 80080b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080bc:	4770      	bx	lr

080080be <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80080be:	b580      	push	{r7, lr}
 80080c0:	b082      	sub	sp, #8
 80080c2:	af00      	add	r7, sp, #0
 80080c4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	691b      	ldr	r3, [r3, #16]
 80080cc:	f003 0302 	and.w	r3, r3, #2
 80080d0:	2b02      	cmp	r3, #2
 80080d2:	d122      	bne.n	800811a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	68db      	ldr	r3, [r3, #12]
 80080da:	f003 0302 	and.w	r3, r3, #2
 80080de:	2b02      	cmp	r3, #2
 80080e0:	d11b      	bne.n	800811a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f06f 0202 	mvn.w	r2, #2
 80080ea:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2201      	movs	r2, #1
 80080f0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	699b      	ldr	r3, [r3, #24]
 80080f8:	f003 0303 	and.w	r3, r3, #3
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d003      	beq.n	8008108 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	f000 f8ee 	bl	80082e2 <HAL_TIM_IC_CaptureCallback>
 8008106:	e005      	b.n	8008114 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f000 f8e0 	bl	80082ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f000 f8f1 	bl	80082f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2200      	movs	r2, #0
 8008118:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	691b      	ldr	r3, [r3, #16]
 8008120:	f003 0304 	and.w	r3, r3, #4
 8008124:	2b04      	cmp	r3, #4
 8008126:	d122      	bne.n	800816e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	68db      	ldr	r3, [r3, #12]
 800812e:	f003 0304 	and.w	r3, r3, #4
 8008132:	2b04      	cmp	r3, #4
 8008134:	d11b      	bne.n	800816e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f06f 0204 	mvn.w	r2, #4
 800813e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2202      	movs	r2, #2
 8008144:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	699b      	ldr	r3, [r3, #24]
 800814c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008150:	2b00      	cmp	r3, #0
 8008152:	d003      	beq.n	800815c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008154:	6878      	ldr	r0, [r7, #4]
 8008156:	f000 f8c4 	bl	80082e2 <HAL_TIM_IC_CaptureCallback>
 800815a:	e005      	b.n	8008168 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	f000 f8b6 	bl	80082ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f000 f8c7 	bl	80082f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2200      	movs	r2, #0
 800816c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	691b      	ldr	r3, [r3, #16]
 8008174:	f003 0308 	and.w	r3, r3, #8
 8008178:	2b08      	cmp	r3, #8
 800817a:	d122      	bne.n	80081c2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	68db      	ldr	r3, [r3, #12]
 8008182:	f003 0308 	and.w	r3, r3, #8
 8008186:	2b08      	cmp	r3, #8
 8008188:	d11b      	bne.n	80081c2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f06f 0208 	mvn.w	r2, #8
 8008192:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2204      	movs	r2, #4
 8008198:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	69db      	ldr	r3, [r3, #28]
 80081a0:	f003 0303 	and.w	r3, r3, #3
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d003      	beq.n	80081b0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	f000 f89a 	bl	80082e2 <HAL_TIM_IC_CaptureCallback>
 80081ae:	e005      	b.n	80081bc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	f000 f88c 	bl	80082ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f000 f89d 	bl	80082f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2200      	movs	r2, #0
 80081c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	691b      	ldr	r3, [r3, #16]
 80081c8:	f003 0310 	and.w	r3, r3, #16
 80081cc:	2b10      	cmp	r3, #16
 80081ce:	d122      	bne.n	8008216 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	68db      	ldr	r3, [r3, #12]
 80081d6:	f003 0310 	and.w	r3, r3, #16
 80081da:	2b10      	cmp	r3, #16
 80081dc:	d11b      	bne.n	8008216 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f06f 0210 	mvn.w	r2, #16
 80081e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2208      	movs	r2, #8
 80081ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	69db      	ldr	r3, [r3, #28]
 80081f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d003      	beq.n	8008204 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	f000 f870 	bl	80082e2 <HAL_TIM_IC_CaptureCallback>
 8008202:	e005      	b.n	8008210 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	f000 f862 	bl	80082ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f000 f873 	bl	80082f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2200      	movs	r2, #0
 8008214:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	691b      	ldr	r3, [r3, #16]
 800821c:	f003 0301 	and.w	r3, r3, #1
 8008220:	2b01      	cmp	r3, #1
 8008222:	d10e      	bne.n	8008242 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	68db      	ldr	r3, [r3, #12]
 800822a:	f003 0301 	and.w	r3, r3, #1
 800822e:	2b01      	cmp	r3, #1
 8008230:	d107      	bne.n	8008242 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f06f 0201 	mvn.w	r2, #1
 800823a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	f7fa f91d 	bl	800247c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	691b      	ldr	r3, [r3, #16]
 8008248:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800824c:	2b80      	cmp	r3, #128	; 0x80
 800824e:	d10e      	bne.n	800826e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	68db      	ldr	r3, [r3, #12]
 8008256:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800825a:	2b80      	cmp	r3, #128	; 0x80
 800825c:	d107      	bne.n	800826e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008266:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	f000 f8e3 	bl	8008434 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	691b      	ldr	r3, [r3, #16]
 8008274:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008278:	2b40      	cmp	r3, #64	; 0x40
 800827a:	d10e      	bne.n	800829a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	68db      	ldr	r3, [r3, #12]
 8008282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008286:	2b40      	cmp	r3, #64	; 0x40
 8008288:	d107      	bne.n	800829a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008292:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f000 f838 	bl	800830a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	691b      	ldr	r3, [r3, #16]
 80082a0:	f003 0320 	and.w	r3, r3, #32
 80082a4:	2b20      	cmp	r3, #32
 80082a6:	d10e      	bne.n	80082c6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	68db      	ldr	r3, [r3, #12]
 80082ae:	f003 0320 	and.w	r3, r3, #32
 80082b2:	2b20      	cmp	r3, #32
 80082b4:	d107      	bne.n	80082c6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f06f 0220 	mvn.w	r2, #32
 80082be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	f000 f8ad 	bl	8008420 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80082c6:	bf00      	nop
 80082c8:	3708      	adds	r7, #8
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}

080082ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80082ce:	b480      	push	{r7}
 80082d0:	b083      	sub	sp, #12
 80082d2:	af00      	add	r7, sp, #0
 80082d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80082d6:	bf00      	nop
 80082d8:	370c      	adds	r7, #12
 80082da:	46bd      	mov	sp, r7
 80082dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e0:	4770      	bx	lr

080082e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80082e2:	b480      	push	{r7}
 80082e4:	b083      	sub	sp, #12
 80082e6:	af00      	add	r7, sp, #0
 80082e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80082ea:	bf00      	nop
 80082ec:	370c      	adds	r7, #12
 80082ee:	46bd      	mov	sp, r7
 80082f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f4:	4770      	bx	lr

080082f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80082f6:	b480      	push	{r7}
 80082f8:	b083      	sub	sp, #12
 80082fa:	af00      	add	r7, sp, #0
 80082fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80082fe:	bf00      	nop
 8008300:	370c      	adds	r7, #12
 8008302:	46bd      	mov	sp, r7
 8008304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008308:	4770      	bx	lr

0800830a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800830a:	b480      	push	{r7}
 800830c:	b083      	sub	sp, #12
 800830e:	af00      	add	r7, sp, #0
 8008310:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008312:	bf00      	nop
 8008314:	370c      	adds	r7, #12
 8008316:	46bd      	mov	sp, r7
 8008318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831c:	4770      	bx	lr
	...

08008320 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008320:	b480      	push	{r7}
 8008322:	b085      	sub	sp, #20
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
 8008328:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	4a34      	ldr	r2, [pc, #208]	; (8008404 <TIM_Base_SetConfig+0xe4>)
 8008334:	4293      	cmp	r3, r2
 8008336:	d00f      	beq.n	8008358 <TIM_Base_SetConfig+0x38>
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800833e:	d00b      	beq.n	8008358 <TIM_Base_SetConfig+0x38>
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	4a31      	ldr	r2, [pc, #196]	; (8008408 <TIM_Base_SetConfig+0xe8>)
 8008344:	4293      	cmp	r3, r2
 8008346:	d007      	beq.n	8008358 <TIM_Base_SetConfig+0x38>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	4a30      	ldr	r2, [pc, #192]	; (800840c <TIM_Base_SetConfig+0xec>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d003      	beq.n	8008358 <TIM_Base_SetConfig+0x38>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	4a2f      	ldr	r2, [pc, #188]	; (8008410 <TIM_Base_SetConfig+0xf0>)
 8008354:	4293      	cmp	r3, r2
 8008356:	d108      	bne.n	800836a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800835e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	685b      	ldr	r3, [r3, #4]
 8008364:	68fa      	ldr	r2, [r7, #12]
 8008366:	4313      	orrs	r3, r2
 8008368:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	4a25      	ldr	r2, [pc, #148]	; (8008404 <TIM_Base_SetConfig+0xe4>)
 800836e:	4293      	cmp	r3, r2
 8008370:	d01b      	beq.n	80083aa <TIM_Base_SetConfig+0x8a>
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008378:	d017      	beq.n	80083aa <TIM_Base_SetConfig+0x8a>
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	4a22      	ldr	r2, [pc, #136]	; (8008408 <TIM_Base_SetConfig+0xe8>)
 800837e:	4293      	cmp	r3, r2
 8008380:	d013      	beq.n	80083aa <TIM_Base_SetConfig+0x8a>
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	4a21      	ldr	r2, [pc, #132]	; (800840c <TIM_Base_SetConfig+0xec>)
 8008386:	4293      	cmp	r3, r2
 8008388:	d00f      	beq.n	80083aa <TIM_Base_SetConfig+0x8a>
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	4a20      	ldr	r2, [pc, #128]	; (8008410 <TIM_Base_SetConfig+0xf0>)
 800838e:	4293      	cmp	r3, r2
 8008390:	d00b      	beq.n	80083aa <TIM_Base_SetConfig+0x8a>
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	4a1f      	ldr	r2, [pc, #124]	; (8008414 <TIM_Base_SetConfig+0xf4>)
 8008396:	4293      	cmp	r3, r2
 8008398:	d007      	beq.n	80083aa <TIM_Base_SetConfig+0x8a>
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	4a1e      	ldr	r2, [pc, #120]	; (8008418 <TIM_Base_SetConfig+0xf8>)
 800839e:	4293      	cmp	r3, r2
 80083a0:	d003      	beq.n	80083aa <TIM_Base_SetConfig+0x8a>
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	4a1d      	ldr	r2, [pc, #116]	; (800841c <TIM_Base_SetConfig+0xfc>)
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d108      	bne.n	80083bc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	68db      	ldr	r3, [r3, #12]
 80083b6:	68fa      	ldr	r2, [r7, #12]
 80083b8:	4313      	orrs	r3, r2
 80083ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	695b      	ldr	r3, [r3, #20]
 80083c6:	4313      	orrs	r3, r2
 80083c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	68fa      	ldr	r2, [r7, #12]
 80083ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	689a      	ldr	r2, [r3, #8]
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	681a      	ldr	r2, [r3, #0]
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	4a08      	ldr	r2, [pc, #32]	; (8008404 <TIM_Base_SetConfig+0xe4>)
 80083e4:	4293      	cmp	r3, r2
 80083e6:	d103      	bne.n	80083f0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	691a      	ldr	r2, [r3, #16]
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2201      	movs	r2, #1
 80083f4:	615a      	str	r2, [r3, #20]
}
 80083f6:	bf00      	nop
 80083f8:	3714      	adds	r7, #20
 80083fa:	46bd      	mov	sp, r7
 80083fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008400:	4770      	bx	lr
 8008402:	bf00      	nop
 8008404:	40010000 	.word	0x40010000
 8008408:	40000400 	.word	0x40000400
 800840c:	40000800 	.word	0x40000800
 8008410:	40000c00 	.word	0x40000c00
 8008414:	40014000 	.word	0x40014000
 8008418:	40014400 	.word	0x40014400
 800841c:	40014800 	.word	0x40014800

08008420 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008420:	b480      	push	{r7}
 8008422:	b083      	sub	sp, #12
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008428:	bf00      	nop
 800842a:	370c      	adds	r7, #12
 800842c:	46bd      	mov	sp, r7
 800842e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008432:	4770      	bx	lr

08008434 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008434:	b480      	push	{r7}
 8008436:	b083      	sub	sp, #12
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800843c:	bf00      	nop
 800843e:	370c      	adds	r7, #12
 8008440:	46bd      	mov	sp, r7
 8008442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008446:	4770      	bx	lr

08008448 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b082      	sub	sp, #8
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d101      	bne.n	800845a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008456:	2301      	movs	r3, #1
 8008458:	e03f      	b.n	80084da <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008460:	b2db      	uxtb	r3, r3
 8008462:	2b00      	cmp	r3, #0
 8008464:	d106      	bne.n	8008474 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2200      	movs	r2, #0
 800846a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	f7fa f924 	bl	80026bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2224      	movs	r2, #36	; 0x24
 8008478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	68da      	ldr	r2, [r3, #12]
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800848a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800848c:	6878      	ldr	r0, [r7, #4]
 800848e:	f001 f80b 	bl	80094a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	691a      	ldr	r2, [r3, #16]
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80084a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	695a      	ldr	r2, [r3, #20]
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80084b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	68da      	ldr	r2, [r3, #12]
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80084c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2200      	movs	r2, #0
 80084c6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2220      	movs	r2, #32
 80084cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2220      	movs	r2, #32
 80084d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80084d8:	2300      	movs	r3, #0
}
 80084da:	4618      	mov	r0, r3
 80084dc:	3708      	adds	r7, #8
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}

080084e2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80084e2:	b580      	push	{r7, lr}
 80084e4:	b08a      	sub	sp, #40	; 0x28
 80084e6:	af02      	add	r7, sp, #8
 80084e8:	60f8      	str	r0, [r7, #12]
 80084ea:	60b9      	str	r1, [r7, #8]
 80084ec:	603b      	str	r3, [r7, #0]
 80084ee:	4613      	mov	r3, r2
 80084f0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80084f2:	2300      	movs	r3, #0
 80084f4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084fc:	b2db      	uxtb	r3, r3
 80084fe:	2b20      	cmp	r3, #32
 8008500:	d17c      	bne.n	80085fc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008502:	68bb      	ldr	r3, [r7, #8]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d002      	beq.n	800850e <HAL_UART_Transmit+0x2c>
 8008508:	88fb      	ldrh	r3, [r7, #6]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d101      	bne.n	8008512 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800850e:	2301      	movs	r3, #1
 8008510:	e075      	b.n	80085fe <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008518:	2b01      	cmp	r3, #1
 800851a:	d101      	bne.n	8008520 <HAL_UART_Transmit+0x3e>
 800851c:	2302      	movs	r3, #2
 800851e:	e06e      	b.n	80085fe <HAL_UART_Transmit+0x11c>
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	2201      	movs	r2, #1
 8008524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	2200      	movs	r2, #0
 800852c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	2221      	movs	r2, #33	; 0x21
 8008532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008536:	f7fb f997 	bl	8003868 <HAL_GetTick>
 800853a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	88fa      	ldrh	r2, [r7, #6]
 8008540:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	88fa      	ldrh	r2, [r7, #6]
 8008546:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	689b      	ldr	r3, [r3, #8]
 800854c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008550:	d108      	bne.n	8008564 <HAL_UART_Transmit+0x82>
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	691b      	ldr	r3, [r3, #16]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d104      	bne.n	8008564 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800855a:	2300      	movs	r3, #0
 800855c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800855e:	68bb      	ldr	r3, [r7, #8]
 8008560:	61bb      	str	r3, [r7, #24]
 8008562:	e003      	b.n	800856c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008568:	2300      	movs	r3, #0
 800856a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	2200      	movs	r2, #0
 8008570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008574:	e02a      	b.n	80085cc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	9300      	str	r3, [sp, #0]
 800857a:	697b      	ldr	r3, [r7, #20]
 800857c:	2200      	movs	r2, #0
 800857e:	2180      	movs	r1, #128	; 0x80
 8008580:	68f8      	ldr	r0, [r7, #12]
 8008582:	f000 fcc3 	bl	8008f0c <UART_WaitOnFlagUntilTimeout>
 8008586:	4603      	mov	r3, r0
 8008588:	2b00      	cmp	r3, #0
 800858a:	d001      	beq.n	8008590 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800858c:	2303      	movs	r3, #3
 800858e:	e036      	b.n	80085fe <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008590:	69fb      	ldr	r3, [r7, #28]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d10b      	bne.n	80085ae <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008596:	69bb      	ldr	r3, [r7, #24]
 8008598:	881b      	ldrh	r3, [r3, #0]
 800859a:	461a      	mov	r2, r3
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80085a4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80085a6:	69bb      	ldr	r3, [r7, #24]
 80085a8:	3302      	adds	r3, #2
 80085aa:	61bb      	str	r3, [r7, #24]
 80085ac:	e007      	b.n	80085be <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80085ae:	69fb      	ldr	r3, [r7, #28]
 80085b0:	781a      	ldrb	r2, [r3, #0]
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80085b8:	69fb      	ldr	r3, [r7, #28]
 80085ba:	3301      	adds	r3, #1
 80085bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80085c2:	b29b      	uxth	r3, r3
 80085c4:	3b01      	subs	r3, #1
 80085c6:	b29a      	uxth	r2, r3
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80085d0:	b29b      	uxth	r3, r3
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d1cf      	bne.n	8008576 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	9300      	str	r3, [sp, #0]
 80085da:	697b      	ldr	r3, [r7, #20]
 80085dc:	2200      	movs	r2, #0
 80085de:	2140      	movs	r1, #64	; 0x40
 80085e0:	68f8      	ldr	r0, [r7, #12]
 80085e2:	f000 fc93 	bl	8008f0c <UART_WaitOnFlagUntilTimeout>
 80085e6:	4603      	mov	r3, r0
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d001      	beq.n	80085f0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80085ec:	2303      	movs	r3, #3
 80085ee:	e006      	b.n	80085fe <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	2220      	movs	r2, #32
 80085f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80085f8:	2300      	movs	r3, #0
 80085fa:	e000      	b.n	80085fe <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80085fc:	2302      	movs	r3, #2
  }
}
 80085fe:	4618      	mov	r0, r3
 8008600:	3720      	adds	r7, #32
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}

08008606 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008606:	b580      	push	{r7, lr}
 8008608:	b08a      	sub	sp, #40	; 0x28
 800860a:	af02      	add	r7, sp, #8
 800860c:	60f8      	str	r0, [r7, #12]
 800860e:	60b9      	str	r1, [r7, #8]
 8008610:	603b      	str	r3, [r7, #0]
 8008612:	4613      	mov	r3, r2
 8008614:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008616:	2300      	movs	r3, #0
 8008618:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008620:	b2db      	uxtb	r3, r3
 8008622:	2b20      	cmp	r3, #32
 8008624:	f040 808c 	bne.w	8008740 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d002      	beq.n	8008634 <HAL_UART_Receive+0x2e>
 800862e:	88fb      	ldrh	r3, [r7, #6]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d101      	bne.n	8008638 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8008634:	2301      	movs	r3, #1
 8008636:	e084      	b.n	8008742 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800863e:	2b01      	cmp	r3, #1
 8008640:	d101      	bne.n	8008646 <HAL_UART_Receive+0x40>
 8008642:	2302      	movs	r3, #2
 8008644:	e07d      	b.n	8008742 <HAL_UART_Receive+0x13c>
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	2201      	movs	r2, #1
 800864a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	2200      	movs	r2, #0
 8008652:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	2222      	movs	r2, #34	; 0x22
 8008658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	2200      	movs	r2, #0
 8008660:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008662:	f7fb f901 	bl	8003868 <HAL_GetTick>
 8008666:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	88fa      	ldrh	r2, [r7, #6]
 800866c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	88fa      	ldrh	r2, [r7, #6]
 8008672:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	689b      	ldr	r3, [r3, #8]
 8008678:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800867c:	d108      	bne.n	8008690 <HAL_UART_Receive+0x8a>
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	691b      	ldr	r3, [r3, #16]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d104      	bne.n	8008690 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8008686:	2300      	movs	r3, #0
 8008688:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800868a:	68bb      	ldr	r3, [r7, #8]
 800868c:	61bb      	str	r3, [r7, #24]
 800868e:	e003      	b.n	8008698 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008694:	2300      	movs	r3, #0
 8008696:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	2200      	movs	r2, #0
 800869c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80086a0:	e043      	b.n	800872a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	9300      	str	r3, [sp, #0]
 80086a6:	697b      	ldr	r3, [r7, #20]
 80086a8:	2200      	movs	r2, #0
 80086aa:	2120      	movs	r1, #32
 80086ac:	68f8      	ldr	r0, [r7, #12]
 80086ae:	f000 fc2d 	bl	8008f0c <UART_WaitOnFlagUntilTimeout>
 80086b2:	4603      	mov	r3, r0
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d001      	beq.n	80086bc <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80086b8:	2303      	movs	r3, #3
 80086ba:	e042      	b.n	8008742 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80086bc:	69fb      	ldr	r3, [r7, #28]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d10c      	bne.n	80086dc <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	685b      	ldr	r3, [r3, #4]
 80086c8:	b29b      	uxth	r3, r3
 80086ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086ce:	b29a      	uxth	r2, r3
 80086d0:	69bb      	ldr	r3, [r7, #24]
 80086d2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80086d4:	69bb      	ldr	r3, [r7, #24]
 80086d6:	3302      	adds	r3, #2
 80086d8:	61bb      	str	r3, [r7, #24]
 80086da:	e01f      	b.n	800871c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	689b      	ldr	r3, [r3, #8]
 80086e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086e4:	d007      	beq.n	80086f6 <HAL_UART_Receive+0xf0>
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	689b      	ldr	r3, [r3, #8]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d10a      	bne.n	8008704 <HAL_UART_Receive+0xfe>
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	691b      	ldr	r3, [r3, #16]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d106      	bne.n	8008704 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	685b      	ldr	r3, [r3, #4]
 80086fc:	b2da      	uxtb	r2, r3
 80086fe:	69fb      	ldr	r3, [r7, #28]
 8008700:	701a      	strb	r2, [r3, #0]
 8008702:	e008      	b.n	8008716 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	685b      	ldr	r3, [r3, #4]
 800870a:	b2db      	uxtb	r3, r3
 800870c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008710:	b2da      	uxtb	r2, r3
 8008712:	69fb      	ldr	r3, [r7, #28]
 8008714:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8008716:	69fb      	ldr	r3, [r7, #28]
 8008718:	3301      	adds	r3, #1
 800871a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008720:	b29b      	uxth	r3, r3
 8008722:	3b01      	subs	r3, #1
 8008724:	b29a      	uxth	r2, r3
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800872e:	b29b      	uxth	r3, r3
 8008730:	2b00      	cmp	r3, #0
 8008732:	d1b6      	bne.n	80086a2 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	2220      	movs	r2, #32
 8008738:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800873c:	2300      	movs	r3, #0
 800873e:	e000      	b.n	8008742 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8008740:	2302      	movs	r3, #2
  }
}
 8008742:	4618      	mov	r0, r3
 8008744:	3720      	adds	r7, #32
 8008746:	46bd      	mov	sp, r7
 8008748:	bd80      	pop	{r7, pc}

0800874a <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800874a:	b580      	push	{r7, lr}
 800874c:	b084      	sub	sp, #16
 800874e:	af00      	add	r7, sp, #0
 8008750:	60f8      	str	r0, [r7, #12]
 8008752:	60b9      	str	r1, [r7, #8]
 8008754:	4613      	mov	r3, r2
 8008756:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800875e:	b2db      	uxtb	r3, r3
 8008760:	2b20      	cmp	r3, #32
 8008762:	d11d      	bne.n	80087a0 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008764:	68bb      	ldr	r3, [r7, #8]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d002      	beq.n	8008770 <HAL_UART_Receive_DMA+0x26>
 800876a:	88fb      	ldrh	r3, [r7, #6]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d101      	bne.n	8008774 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8008770:	2301      	movs	r3, #1
 8008772:	e016      	b.n	80087a2 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800877a:	2b01      	cmp	r3, #1
 800877c:	d101      	bne.n	8008782 <HAL_UART_Receive_DMA+0x38>
 800877e:	2302      	movs	r3, #2
 8008780:	e00f      	b.n	80087a2 <HAL_UART_Receive_DMA+0x58>
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	2201      	movs	r2, #1
 8008786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	2200      	movs	r2, #0
 800878e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008790:	88fb      	ldrh	r3, [r7, #6]
 8008792:	461a      	mov	r2, r3
 8008794:	68b9      	ldr	r1, [r7, #8]
 8008796:	68f8      	ldr	r0, [r7, #12]
 8008798:	f000 fc26 	bl	8008fe8 <UART_Start_Receive_DMA>
 800879c:	4603      	mov	r3, r0
 800879e:	e000      	b.n	80087a2 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80087a0:	2302      	movs	r3, #2
  }
}
 80087a2:	4618      	mov	r0, r3
 80087a4:	3710      	adds	r7, #16
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}
	...

080087ac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b0ba      	sub	sp, #232	; 0xe8
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	68db      	ldr	r3, [r3, #12]
 80087c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	695b      	ldr	r3, [r3, #20]
 80087ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80087d2:	2300      	movs	r3, #0
 80087d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80087d8:	2300      	movs	r3, #0
 80087da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80087de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087e2:	f003 030f 	and.w	r3, r3, #15
 80087e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80087ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d10f      	bne.n	8008812 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80087f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087f6:	f003 0320 	and.w	r3, r3, #32
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d009      	beq.n	8008812 <HAL_UART_IRQHandler+0x66>
 80087fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008802:	f003 0320 	and.w	r3, r3, #32
 8008806:	2b00      	cmp	r3, #0
 8008808:	d003      	beq.n	8008812 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	f000 fd91 	bl	8009332 <UART_Receive_IT>
      return;
 8008810:	e256      	b.n	8008cc0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008812:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008816:	2b00      	cmp	r3, #0
 8008818:	f000 80de 	beq.w	80089d8 <HAL_UART_IRQHandler+0x22c>
 800881c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008820:	f003 0301 	and.w	r3, r3, #1
 8008824:	2b00      	cmp	r3, #0
 8008826:	d106      	bne.n	8008836 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008828:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800882c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008830:	2b00      	cmp	r3, #0
 8008832:	f000 80d1 	beq.w	80089d8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008836:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800883a:	f003 0301 	and.w	r3, r3, #1
 800883e:	2b00      	cmp	r3, #0
 8008840:	d00b      	beq.n	800885a <HAL_UART_IRQHandler+0xae>
 8008842:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008846:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800884a:	2b00      	cmp	r3, #0
 800884c:	d005      	beq.n	800885a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008852:	f043 0201 	orr.w	r2, r3, #1
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800885a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800885e:	f003 0304 	and.w	r3, r3, #4
 8008862:	2b00      	cmp	r3, #0
 8008864:	d00b      	beq.n	800887e <HAL_UART_IRQHandler+0xd2>
 8008866:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800886a:	f003 0301 	and.w	r3, r3, #1
 800886e:	2b00      	cmp	r3, #0
 8008870:	d005      	beq.n	800887e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008876:	f043 0202 	orr.w	r2, r3, #2
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800887e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008882:	f003 0302 	and.w	r3, r3, #2
 8008886:	2b00      	cmp	r3, #0
 8008888:	d00b      	beq.n	80088a2 <HAL_UART_IRQHandler+0xf6>
 800888a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800888e:	f003 0301 	and.w	r3, r3, #1
 8008892:	2b00      	cmp	r3, #0
 8008894:	d005      	beq.n	80088a2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800889a:	f043 0204 	orr.w	r2, r3, #4
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80088a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088a6:	f003 0308 	and.w	r3, r3, #8
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d011      	beq.n	80088d2 <HAL_UART_IRQHandler+0x126>
 80088ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80088b2:	f003 0320 	and.w	r3, r3, #32
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d105      	bne.n	80088c6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80088ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80088be:	f003 0301 	and.w	r3, r3, #1
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d005      	beq.n	80088d2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088ca:	f043 0208 	orr.w	r2, r3, #8
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	f000 81ed 	beq.w	8008cb6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80088dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088e0:	f003 0320 	and.w	r3, r3, #32
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d008      	beq.n	80088fa <HAL_UART_IRQHandler+0x14e>
 80088e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80088ec:	f003 0320 	and.w	r3, r3, #32
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d002      	beq.n	80088fa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80088f4:	6878      	ldr	r0, [r7, #4]
 80088f6:	f000 fd1c 	bl	8009332 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	695b      	ldr	r3, [r3, #20]
 8008900:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008904:	2b40      	cmp	r3, #64	; 0x40
 8008906:	bf0c      	ite	eq
 8008908:	2301      	moveq	r3, #1
 800890a:	2300      	movne	r3, #0
 800890c:	b2db      	uxtb	r3, r3
 800890e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008916:	f003 0308 	and.w	r3, r3, #8
 800891a:	2b00      	cmp	r3, #0
 800891c:	d103      	bne.n	8008926 <HAL_UART_IRQHandler+0x17a>
 800891e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008922:	2b00      	cmp	r3, #0
 8008924:	d04f      	beq.n	80089c6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	f000 fc24 	bl	8009174 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	695b      	ldr	r3, [r3, #20]
 8008932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008936:	2b40      	cmp	r3, #64	; 0x40
 8008938:	d141      	bne.n	80089be <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	3314      	adds	r3, #20
 8008940:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008944:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008948:	e853 3f00 	ldrex	r3, [r3]
 800894c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008950:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008954:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008958:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	3314      	adds	r3, #20
 8008962:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008966:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800896a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800896e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008972:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008976:	e841 2300 	strex	r3, r2, [r1]
 800897a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800897e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008982:	2b00      	cmp	r3, #0
 8008984:	d1d9      	bne.n	800893a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800898a:	2b00      	cmp	r3, #0
 800898c:	d013      	beq.n	80089b6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008992:	4a7d      	ldr	r2, [pc, #500]	; (8008b88 <HAL_UART_IRQHandler+0x3dc>)
 8008994:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800899a:	4618      	mov	r0, r3
 800899c:	f7fb fa1c 	bl	8003dd8 <HAL_DMA_Abort_IT>
 80089a0:	4603      	mov	r3, r0
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d016      	beq.n	80089d4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089ac:	687a      	ldr	r2, [r7, #4]
 80089ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80089b0:	4610      	mov	r0, r2
 80089b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089b4:	e00e      	b.n	80089d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	f000 f99a 	bl	8008cf0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089bc:	e00a      	b.n	80089d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f000 f996 	bl	8008cf0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089c4:	e006      	b.n	80089d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f000 f992 	bl	8008cf0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2200      	movs	r2, #0
 80089d0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80089d2:	e170      	b.n	8008cb6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089d4:	bf00      	nop
    return;
 80089d6:	e16e      	b.n	8008cb6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089dc:	2b01      	cmp	r3, #1
 80089de:	f040 814a 	bne.w	8008c76 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80089e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089e6:	f003 0310 	and.w	r3, r3, #16
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	f000 8143 	beq.w	8008c76 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80089f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089f4:	f003 0310 	and.w	r3, r3, #16
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	f000 813c 	beq.w	8008c76 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80089fe:	2300      	movs	r3, #0
 8008a00:	60bb      	str	r3, [r7, #8]
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	60bb      	str	r3, [r7, #8]
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	685b      	ldr	r3, [r3, #4]
 8008a10:	60bb      	str	r3, [r7, #8]
 8008a12:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	695b      	ldr	r3, [r3, #20]
 8008a1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a1e:	2b40      	cmp	r3, #64	; 0x40
 8008a20:	f040 80b4 	bne.w	8008b8c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	685b      	ldr	r3, [r3, #4]
 8008a2c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008a30:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	f000 8140 	beq.w	8008cba <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008a3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008a42:	429a      	cmp	r2, r3
 8008a44:	f080 8139 	bcs.w	8008cba <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008a4e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a54:	69db      	ldr	r3, [r3, #28]
 8008a56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a5a:	f000 8088 	beq.w	8008b6e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	330c      	adds	r3, #12
 8008a64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a68:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008a6c:	e853 3f00 	ldrex	r3, [r3]
 8008a70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008a74:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008a78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008a7c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	330c      	adds	r3, #12
 8008a86:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008a8a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008a8e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a92:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008a96:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008a9a:	e841 2300 	strex	r3, r2, [r1]
 8008a9e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008aa2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d1d9      	bne.n	8008a5e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	3314      	adds	r3, #20
 8008ab0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ab2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ab4:	e853 3f00 	ldrex	r3, [r3]
 8008ab8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008aba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008abc:	f023 0301 	bic.w	r3, r3, #1
 8008ac0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	3314      	adds	r3, #20
 8008aca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008ace:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008ad2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ad4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008ad6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008ada:	e841 2300 	strex	r3, r2, [r1]
 8008ade:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008ae0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d1e1      	bne.n	8008aaa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	3314      	adds	r3, #20
 8008aec:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008af0:	e853 3f00 	ldrex	r3, [r3]
 8008af4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008af6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008af8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008afc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	3314      	adds	r3, #20
 8008b06:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008b0a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008b0c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b0e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008b10:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008b12:	e841 2300 	strex	r3, r2, [r1]
 8008b16:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008b18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d1e3      	bne.n	8008ae6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2220      	movs	r2, #32
 8008b22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2200      	movs	r2, #0
 8008b2a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	330c      	adds	r3, #12
 8008b32:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b36:	e853 3f00 	ldrex	r3, [r3]
 8008b3a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008b3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b3e:	f023 0310 	bic.w	r3, r3, #16
 8008b42:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	330c      	adds	r3, #12
 8008b4c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008b50:	65ba      	str	r2, [r7, #88]	; 0x58
 8008b52:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b54:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008b56:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008b58:	e841 2300 	strex	r3, r2, [r1]
 8008b5c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008b5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d1e3      	bne.n	8008b2c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b68:	4618      	mov	r0, r3
 8008b6a:	f7fb f8c5 	bl	8003cf8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008b76:	b29b      	uxth	r3, r3
 8008b78:	1ad3      	subs	r3, r2, r3
 8008b7a:	b29b      	uxth	r3, r3
 8008b7c:	4619      	mov	r1, r3
 8008b7e:	6878      	ldr	r0, [r7, #4]
 8008b80:	f000 f8c0 	bl	8008d04 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008b84:	e099      	b.n	8008cba <HAL_UART_IRQHandler+0x50e>
 8008b86:	bf00      	nop
 8008b88:	0800923b 	.word	0x0800923b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008b94:	b29b      	uxth	r3, r3
 8008b96:	1ad3      	subs	r3, r2, r3
 8008b98:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008ba0:	b29b      	uxth	r3, r3
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	f000 808b 	beq.w	8008cbe <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008ba8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	f000 8086 	beq.w	8008cbe <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	330c      	adds	r3, #12
 8008bb8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bbc:	e853 3f00 	ldrex	r3, [r3]
 8008bc0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bc4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008bc8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	330c      	adds	r3, #12
 8008bd2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008bd6:	647a      	str	r2, [r7, #68]	; 0x44
 8008bd8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bda:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008bdc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008bde:	e841 2300 	strex	r3, r2, [r1]
 8008be2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008be4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d1e3      	bne.n	8008bb2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	3314      	adds	r3, #20
 8008bf0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf4:	e853 3f00 	ldrex	r3, [r3]
 8008bf8:	623b      	str	r3, [r7, #32]
   return(result);
 8008bfa:	6a3b      	ldr	r3, [r7, #32]
 8008bfc:	f023 0301 	bic.w	r3, r3, #1
 8008c00:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	3314      	adds	r3, #20
 8008c0a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008c0e:	633a      	str	r2, [r7, #48]	; 0x30
 8008c10:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c12:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008c14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c16:	e841 2300 	strex	r3, r2, [r1]
 8008c1a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d1e3      	bne.n	8008bea <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	2220      	movs	r2, #32
 8008c26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	330c      	adds	r3, #12
 8008c36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c38:	693b      	ldr	r3, [r7, #16]
 8008c3a:	e853 3f00 	ldrex	r3, [r3]
 8008c3e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	f023 0310 	bic.w	r3, r3, #16
 8008c46:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	330c      	adds	r3, #12
 8008c50:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008c54:	61fa      	str	r2, [r7, #28]
 8008c56:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c58:	69b9      	ldr	r1, [r7, #24]
 8008c5a:	69fa      	ldr	r2, [r7, #28]
 8008c5c:	e841 2300 	strex	r3, r2, [r1]
 8008c60:	617b      	str	r3, [r7, #20]
   return(result);
 8008c62:	697b      	ldr	r3, [r7, #20]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d1e3      	bne.n	8008c30 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008c68:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008c6c:	4619      	mov	r1, r3
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	f000 f848 	bl	8008d04 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008c74:	e023      	b.n	8008cbe <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008c76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d009      	beq.n	8008c96 <HAL_UART_IRQHandler+0x4ea>
 8008c82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d003      	beq.n	8008c96 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008c8e:	6878      	ldr	r0, [r7, #4]
 8008c90:	f000 fae7 	bl	8009262 <UART_Transmit_IT>
    return;
 8008c94:	e014      	b.n	8008cc0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008c96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d00e      	beq.n	8008cc0 <HAL_UART_IRQHandler+0x514>
 8008ca2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d008      	beq.n	8008cc0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008cae:	6878      	ldr	r0, [r7, #4]
 8008cb0:	f000 fb27 	bl	8009302 <UART_EndTransmit_IT>
    return;
 8008cb4:	e004      	b.n	8008cc0 <HAL_UART_IRQHandler+0x514>
    return;
 8008cb6:	bf00      	nop
 8008cb8:	e002      	b.n	8008cc0 <HAL_UART_IRQHandler+0x514>
      return;
 8008cba:	bf00      	nop
 8008cbc:	e000      	b.n	8008cc0 <HAL_UART_IRQHandler+0x514>
      return;
 8008cbe:	bf00      	nop
  }
}
 8008cc0:	37e8      	adds	r7, #232	; 0xe8
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	bd80      	pop	{r7, pc}
 8008cc6:	bf00      	nop

08008cc8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008cc8:	b480      	push	{r7}
 8008cca:	b083      	sub	sp, #12
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008cd0:	bf00      	nop
 8008cd2:	370c      	adds	r7, #12
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cda:	4770      	bx	lr

08008cdc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008cdc:	b480      	push	{r7}
 8008cde:	b083      	sub	sp, #12
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008ce4:	bf00      	nop
 8008ce6:	370c      	adds	r7, #12
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cee:	4770      	bx	lr

08008cf0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008cf0:	b480      	push	{r7}
 8008cf2:	b083      	sub	sp, #12
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008cf8:	bf00      	nop
 8008cfa:	370c      	adds	r7, #12
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d02:	4770      	bx	lr

08008d04 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008d04:	b480      	push	{r7}
 8008d06:	b083      	sub	sp, #12
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
 8008d0c:	460b      	mov	r3, r1
 8008d0e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008d10:	bf00      	nop
 8008d12:	370c      	adds	r7, #12
 8008d14:	46bd      	mov	sp, r7
 8008d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1a:	4770      	bx	lr

08008d1c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b09c      	sub	sp, #112	; 0x70
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d28:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d172      	bne.n	8008e1e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8008d38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008d3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	330c      	adds	r3, #12
 8008d44:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d48:	e853 3f00 	ldrex	r3, [r3]
 8008d4c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008d4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008d54:	66bb      	str	r3, [r7, #104]	; 0x68
 8008d56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	330c      	adds	r3, #12
 8008d5c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008d5e:	65ba      	str	r2, [r7, #88]	; 0x58
 8008d60:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d62:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008d64:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008d66:	e841 2300 	strex	r3, r2, [r1]
 8008d6a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008d6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d1e5      	bne.n	8008d3e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	3314      	adds	r3, #20
 8008d78:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d7c:	e853 3f00 	ldrex	r3, [r3]
 8008d80:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008d82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d84:	f023 0301 	bic.w	r3, r3, #1
 8008d88:	667b      	str	r3, [r7, #100]	; 0x64
 8008d8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	3314      	adds	r3, #20
 8008d90:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008d92:	647a      	str	r2, [r7, #68]	; 0x44
 8008d94:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d96:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008d98:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008d9a:	e841 2300 	strex	r3, r2, [r1]
 8008d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008da0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d1e5      	bne.n	8008d72 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008da6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	3314      	adds	r3, #20
 8008dac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db0:	e853 3f00 	ldrex	r3, [r3]
 8008db4:	623b      	str	r3, [r7, #32]
   return(result);
 8008db6:	6a3b      	ldr	r3, [r7, #32]
 8008db8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008dbc:	663b      	str	r3, [r7, #96]	; 0x60
 8008dbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	3314      	adds	r3, #20
 8008dc4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008dc6:	633a      	str	r2, [r7, #48]	; 0x30
 8008dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008dcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008dce:	e841 2300 	strex	r3, r2, [r1]
 8008dd2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d1e5      	bne.n	8008da6 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008dda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ddc:	2220      	movs	r2, #32
 8008dde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008de2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008de6:	2b01      	cmp	r3, #1
 8008de8:	d119      	bne.n	8008e1e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008dea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	330c      	adds	r3, #12
 8008df0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008df2:	693b      	ldr	r3, [r7, #16]
 8008df4:	e853 3f00 	ldrex	r3, [r3]
 8008df8:	60fb      	str	r3, [r7, #12]
   return(result);
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	f023 0310 	bic.w	r3, r3, #16
 8008e00:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008e02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	330c      	adds	r3, #12
 8008e08:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008e0a:	61fa      	str	r2, [r7, #28]
 8008e0c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e0e:	69b9      	ldr	r1, [r7, #24]
 8008e10:	69fa      	ldr	r2, [r7, #28]
 8008e12:	e841 2300 	strex	r3, r2, [r1]
 8008e16:	617b      	str	r3, [r7, #20]
   return(result);
 8008e18:	697b      	ldr	r3, [r7, #20]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d1e5      	bne.n	8008dea <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e22:	2b01      	cmp	r3, #1
 8008e24:	d106      	bne.n	8008e34 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008e26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e28:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008e2a:	4619      	mov	r1, r3
 8008e2c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008e2e:	f7ff ff69 	bl	8008d04 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008e32:	e002      	b.n	8008e3a <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8008e34:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008e36:	f7f9 fb39 	bl	80024ac <HAL_UART_RxCpltCallback>
}
 8008e3a:	bf00      	nop
 8008e3c:	3770      	adds	r7, #112	; 0x70
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bd80      	pop	{r7, pc}

08008e42 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008e42:	b580      	push	{r7, lr}
 8008e44:	b084      	sub	sp, #16
 8008e46:	af00      	add	r7, sp, #0
 8008e48:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e4e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e54:	2b01      	cmp	r3, #1
 8008e56:	d108      	bne.n	8008e6a <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008e5c:	085b      	lsrs	r3, r3, #1
 8008e5e:	b29b      	uxth	r3, r3
 8008e60:	4619      	mov	r1, r3
 8008e62:	68f8      	ldr	r0, [r7, #12]
 8008e64:	f7ff ff4e 	bl	8008d04 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008e68:	e002      	b.n	8008e70 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8008e6a:	68f8      	ldr	r0, [r7, #12]
 8008e6c:	f7ff ff36 	bl	8008cdc <HAL_UART_RxHalfCpltCallback>
}
 8008e70:	bf00      	nop
 8008e72:	3710      	adds	r7, #16
 8008e74:	46bd      	mov	sp, r7
 8008e76:	bd80      	pop	{r7, pc}

08008e78 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b084      	sub	sp, #16
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008e80:	2300      	movs	r3, #0
 8008e82:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e88:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008e8a:	68bb      	ldr	r3, [r7, #8]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	695b      	ldr	r3, [r3, #20]
 8008e90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e94:	2b80      	cmp	r3, #128	; 0x80
 8008e96:	bf0c      	ite	eq
 8008e98:	2301      	moveq	r3, #1
 8008e9a:	2300      	movne	r3, #0
 8008e9c:	b2db      	uxtb	r3, r3
 8008e9e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008ea0:	68bb      	ldr	r3, [r7, #8]
 8008ea2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ea6:	b2db      	uxtb	r3, r3
 8008ea8:	2b21      	cmp	r3, #33	; 0x21
 8008eaa:	d108      	bne.n	8008ebe <UART_DMAError+0x46>
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d005      	beq.n	8008ebe <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008eb2:	68bb      	ldr	r3, [r7, #8]
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008eb8:	68b8      	ldr	r0, [r7, #8]
 8008eba:	f000 f933 	bl	8009124 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008ebe:	68bb      	ldr	r3, [r7, #8]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	695b      	ldr	r3, [r3, #20]
 8008ec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ec8:	2b40      	cmp	r3, #64	; 0x40
 8008eca:	bf0c      	ite	eq
 8008ecc:	2301      	moveq	r3, #1
 8008ece:	2300      	movne	r3, #0
 8008ed0:	b2db      	uxtb	r3, r3
 8008ed2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008ed4:	68bb      	ldr	r3, [r7, #8]
 8008ed6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008eda:	b2db      	uxtb	r3, r3
 8008edc:	2b22      	cmp	r3, #34	; 0x22
 8008ede:	d108      	bne.n	8008ef2 <UART_DMAError+0x7a>
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d005      	beq.n	8008ef2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008ee6:	68bb      	ldr	r3, [r7, #8]
 8008ee8:	2200      	movs	r2, #0
 8008eea:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008eec:	68b8      	ldr	r0, [r7, #8]
 8008eee:	f000 f941 	bl	8009174 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008ef2:	68bb      	ldr	r3, [r7, #8]
 8008ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ef6:	f043 0210 	orr.w	r2, r3, #16
 8008efa:	68bb      	ldr	r3, [r7, #8]
 8008efc:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008efe:	68b8      	ldr	r0, [r7, #8]
 8008f00:	f7ff fef6 	bl	8008cf0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008f04:	bf00      	nop
 8008f06:	3710      	adds	r7, #16
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	bd80      	pop	{r7, pc}

08008f0c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b090      	sub	sp, #64	; 0x40
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	60f8      	str	r0, [r7, #12]
 8008f14:	60b9      	str	r1, [r7, #8]
 8008f16:	603b      	str	r3, [r7, #0]
 8008f18:	4613      	mov	r3, r2
 8008f1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f1c:	e050      	b.n	8008fc0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f24:	d04c      	beq.n	8008fc0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008f26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d007      	beq.n	8008f3c <UART_WaitOnFlagUntilTimeout+0x30>
 8008f2c:	f7fa fc9c 	bl	8003868 <HAL_GetTick>
 8008f30:	4602      	mov	r2, r0
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	1ad3      	subs	r3, r2, r3
 8008f36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008f38:	429a      	cmp	r2, r3
 8008f3a:	d241      	bcs.n	8008fc0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	330c      	adds	r3, #12
 8008f42:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f46:	e853 3f00 	ldrex	r3, [r3]
 8008f4a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f4e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008f52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	330c      	adds	r3, #12
 8008f5a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008f5c:	637a      	str	r2, [r7, #52]	; 0x34
 8008f5e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f60:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008f62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008f64:	e841 2300 	strex	r3, r2, [r1]
 8008f68:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d1e5      	bne.n	8008f3c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	3314      	adds	r3, #20
 8008f76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f78:	697b      	ldr	r3, [r7, #20]
 8008f7a:	e853 3f00 	ldrex	r3, [r3]
 8008f7e:	613b      	str	r3, [r7, #16]
   return(result);
 8008f80:	693b      	ldr	r3, [r7, #16]
 8008f82:	f023 0301 	bic.w	r3, r3, #1
 8008f86:	63bb      	str	r3, [r7, #56]	; 0x38
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	3314      	adds	r3, #20
 8008f8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008f90:	623a      	str	r2, [r7, #32]
 8008f92:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f94:	69f9      	ldr	r1, [r7, #28]
 8008f96:	6a3a      	ldr	r2, [r7, #32]
 8008f98:	e841 2300 	strex	r3, r2, [r1]
 8008f9c:	61bb      	str	r3, [r7, #24]
   return(result);
 8008f9e:	69bb      	ldr	r3, [r7, #24]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d1e5      	bne.n	8008f70 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	2220      	movs	r2, #32
 8008fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	2220      	movs	r2, #32
 8008fb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008fbc:	2303      	movs	r3, #3
 8008fbe:	e00f      	b.n	8008fe0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	681a      	ldr	r2, [r3, #0]
 8008fc6:	68bb      	ldr	r3, [r7, #8]
 8008fc8:	4013      	ands	r3, r2
 8008fca:	68ba      	ldr	r2, [r7, #8]
 8008fcc:	429a      	cmp	r2, r3
 8008fce:	bf0c      	ite	eq
 8008fd0:	2301      	moveq	r3, #1
 8008fd2:	2300      	movne	r3, #0
 8008fd4:	b2db      	uxtb	r3, r3
 8008fd6:	461a      	mov	r2, r3
 8008fd8:	79fb      	ldrb	r3, [r7, #7]
 8008fda:	429a      	cmp	r2, r3
 8008fdc:	d09f      	beq.n	8008f1e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008fde:	2300      	movs	r3, #0
}
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	3740      	adds	r7, #64	; 0x40
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bd80      	pop	{r7, pc}

08008fe8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b098      	sub	sp, #96	; 0x60
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	60f8      	str	r0, [r7, #12]
 8008ff0:	60b9      	str	r1, [r7, #8]
 8008ff2:	4613      	mov	r3, r2
 8008ff4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8008ff6:	68ba      	ldr	r2, [r7, #8]
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	88fa      	ldrh	r2, [r7, #6]
 8009000:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	2200      	movs	r2, #0
 8009006:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	2222      	movs	r2, #34	; 0x22
 800900c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009014:	4a40      	ldr	r2, [pc, #256]	; (8009118 <UART_Start_Receive_DMA+0x130>)
 8009016:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800901c:	4a3f      	ldr	r2, [pc, #252]	; (800911c <UART_Start_Receive_DMA+0x134>)
 800901e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009024:	4a3e      	ldr	r2, [pc, #248]	; (8009120 <UART_Start_Receive_DMA+0x138>)
 8009026:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800902c:	2200      	movs	r2, #0
 800902e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8009030:	f107 0308 	add.w	r3, r7, #8
 8009034:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	3304      	adds	r3, #4
 8009040:	4619      	mov	r1, r3
 8009042:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009044:	681a      	ldr	r2, [r3, #0]
 8009046:	88fb      	ldrh	r3, [r7, #6]
 8009048:	f7fa fdfe 	bl	8003c48 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800904c:	2300      	movs	r3, #0
 800904e:	613b      	str	r3, [r7, #16]
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	613b      	str	r3, [r7, #16]
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	685b      	ldr	r3, [r3, #4]
 800905e:	613b      	str	r3, [r7, #16]
 8009060:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	2200      	movs	r2, #0
 8009066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	691b      	ldr	r3, [r3, #16]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d019      	beq.n	80090a6 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	330c      	adds	r3, #12
 8009078:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800907a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800907c:	e853 3f00 	ldrex	r3, [r3]
 8009080:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009082:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009084:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009088:	65bb      	str	r3, [r7, #88]	; 0x58
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	330c      	adds	r3, #12
 8009090:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009092:	64fa      	str	r2, [r7, #76]	; 0x4c
 8009094:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009096:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8009098:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800909a:	e841 2300 	strex	r3, r2, [r1]
 800909e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80090a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d1e5      	bne.n	8009072 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	3314      	adds	r3, #20
 80090ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090b0:	e853 3f00 	ldrex	r3, [r3]
 80090b4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80090b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090b8:	f043 0301 	orr.w	r3, r3, #1
 80090bc:	657b      	str	r3, [r7, #84]	; 0x54
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	3314      	adds	r3, #20
 80090c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80090c6:	63ba      	str	r2, [r7, #56]	; 0x38
 80090c8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090ca:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80090cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80090ce:	e841 2300 	strex	r3, r2, [r1]
 80090d2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80090d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d1e5      	bne.n	80090a6 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	3314      	adds	r3, #20
 80090e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090e2:	69bb      	ldr	r3, [r7, #24]
 80090e4:	e853 3f00 	ldrex	r3, [r3]
 80090e8:	617b      	str	r3, [r7, #20]
   return(result);
 80090ea:	697b      	ldr	r3, [r7, #20]
 80090ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090f0:	653b      	str	r3, [r7, #80]	; 0x50
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	3314      	adds	r3, #20
 80090f8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80090fa:	627a      	str	r2, [r7, #36]	; 0x24
 80090fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090fe:	6a39      	ldr	r1, [r7, #32]
 8009100:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009102:	e841 2300 	strex	r3, r2, [r1]
 8009106:	61fb      	str	r3, [r7, #28]
   return(result);
 8009108:	69fb      	ldr	r3, [r7, #28]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d1e5      	bne.n	80090da <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800910e:	2300      	movs	r3, #0
}
 8009110:	4618      	mov	r0, r3
 8009112:	3760      	adds	r7, #96	; 0x60
 8009114:	46bd      	mov	sp, r7
 8009116:	bd80      	pop	{r7, pc}
 8009118:	08008d1d 	.word	0x08008d1d
 800911c:	08008e43 	.word	0x08008e43
 8009120:	08008e79 	.word	0x08008e79

08009124 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009124:	b480      	push	{r7}
 8009126:	b089      	sub	sp, #36	; 0x24
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	330c      	adds	r3, #12
 8009132:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	e853 3f00 	ldrex	r3, [r3]
 800913a:	60bb      	str	r3, [r7, #8]
   return(result);
 800913c:	68bb      	ldr	r3, [r7, #8]
 800913e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009142:	61fb      	str	r3, [r7, #28]
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	330c      	adds	r3, #12
 800914a:	69fa      	ldr	r2, [r7, #28]
 800914c:	61ba      	str	r2, [r7, #24]
 800914e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009150:	6979      	ldr	r1, [r7, #20]
 8009152:	69ba      	ldr	r2, [r7, #24]
 8009154:	e841 2300 	strex	r3, r2, [r1]
 8009158:	613b      	str	r3, [r7, #16]
   return(result);
 800915a:	693b      	ldr	r3, [r7, #16]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d1e5      	bne.n	800912c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2220      	movs	r2, #32
 8009164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8009168:	bf00      	nop
 800916a:	3724      	adds	r7, #36	; 0x24
 800916c:	46bd      	mov	sp, r7
 800916e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009172:	4770      	bx	lr

08009174 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009174:	b480      	push	{r7}
 8009176:	b095      	sub	sp, #84	; 0x54
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	330c      	adds	r3, #12
 8009182:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009184:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009186:	e853 3f00 	ldrex	r3, [r3]
 800918a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800918c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800918e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009192:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	330c      	adds	r3, #12
 800919a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800919c:	643a      	str	r2, [r7, #64]	; 0x40
 800919e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091a0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80091a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80091a4:	e841 2300 	strex	r3, r2, [r1]
 80091a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80091aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d1e5      	bne.n	800917c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	3314      	adds	r3, #20
 80091b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091b8:	6a3b      	ldr	r3, [r7, #32]
 80091ba:	e853 3f00 	ldrex	r3, [r3]
 80091be:	61fb      	str	r3, [r7, #28]
   return(result);
 80091c0:	69fb      	ldr	r3, [r7, #28]
 80091c2:	f023 0301 	bic.w	r3, r3, #1
 80091c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	3314      	adds	r3, #20
 80091ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80091d0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80091d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80091d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80091d8:	e841 2300 	strex	r3, r2, [r1]
 80091dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80091de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d1e5      	bne.n	80091b0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091e8:	2b01      	cmp	r3, #1
 80091ea:	d119      	bne.n	8009220 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	330c      	adds	r3, #12
 80091f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	e853 3f00 	ldrex	r3, [r3]
 80091fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80091fc:	68bb      	ldr	r3, [r7, #8]
 80091fe:	f023 0310 	bic.w	r3, r3, #16
 8009202:	647b      	str	r3, [r7, #68]	; 0x44
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	330c      	adds	r3, #12
 800920a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800920c:	61ba      	str	r2, [r7, #24]
 800920e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009210:	6979      	ldr	r1, [r7, #20]
 8009212:	69ba      	ldr	r2, [r7, #24]
 8009214:	e841 2300 	strex	r3, r2, [r1]
 8009218:	613b      	str	r3, [r7, #16]
   return(result);
 800921a:	693b      	ldr	r3, [r7, #16]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d1e5      	bne.n	80091ec <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2220      	movs	r2, #32
 8009224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2200      	movs	r2, #0
 800922c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800922e:	bf00      	nop
 8009230:	3754      	adds	r7, #84	; 0x54
 8009232:	46bd      	mov	sp, r7
 8009234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009238:	4770      	bx	lr

0800923a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800923a:	b580      	push	{r7, lr}
 800923c:	b084      	sub	sp, #16
 800923e:	af00      	add	r7, sp, #0
 8009240:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009246:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	2200      	movs	r2, #0
 800924c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	2200      	movs	r2, #0
 8009252:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009254:	68f8      	ldr	r0, [r7, #12]
 8009256:	f7ff fd4b 	bl	8008cf0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800925a:	bf00      	nop
 800925c:	3710      	adds	r7, #16
 800925e:	46bd      	mov	sp, r7
 8009260:	bd80      	pop	{r7, pc}

08009262 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009262:	b480      	push	{r7}
 8009264:	b085      	sub	sp, #20
 8009266:	af00      	add	r7, sp, #0
 8009268:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009270:	b2db      	uxtb	r3, r3
 8009272:	2b21      	cmp	r3, #33	; 0x21
 8009274:	d13e      	bne.n	80092f4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	689b      	ldr	r3, [r3, #8]
 800927a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800927e:	d114      	bne.n	80092aa <UART_Transmit_IT+0x48>
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	691b      	ldr	r3, [r3, #16]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d110      	bne.n	80092aa <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	6a1b      	ldr	r3, [r3, #32]
 800928c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	881b      	ldrh	r3, [r3, #0]
 8009292:	461a      	mov	r2, r3
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800929c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	6a1b      	ldr	r3, [r3, #32]
 80092a2:	1c9a      	adds	r2, r3, #2
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	621a      	str	r2, [r3, #32]
 80092a8:	e008      	b.n	80092bc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	6a1b      	ldr	r3, [r3, #32]
 80092ae:	1c59      	adds	r1, r3, #1
 80092b0:	687a      	ldr	r2, [r7, #4]
 80092b2:	6211      	str	r1, [r2, #32]
 80092b4:	781a      	ldrb	r2, [r3, #0]
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80092c0:	b29b      	uxth	r3, r3
 80092c2:	3b01      	subs	r3, #1
 80092c4:	b29b      	uxth	r3, r3
 80092c6:	687a      	ldr	r2, [r7, #4]
 80092c8:	4619      	mov	r1, r3
 80092ca:	84d1      	strh	r1, [r2, #38]	; 0x26
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d10f      	bne.n	80092f0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	68da      	ldr	r2, [r3, #12]
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80092de:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	68da      	ldr	r2, [r3, #12]
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80092ee:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80092f0:	2300      	movs	r3, #0
 80092f2:	e000      	b.n	80092f6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80092f4:	2302      	movs	r3, #2
  }
}
 80092f6:	4618      	mov	r0, r3
 80092f8:	3714      	adds	r7, #20
 80092fa:	46bd      	mov	sp, r7
 80092fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009300:	4770      	bx	lr

08009302 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009302:	b580      	push	{r7, lr}
 8009304:	b082      	sub	sp, #8
 8009306:	af00      	add	r7, sp, #0
 8009308:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	68da      	ldr	r2, [r3, #12]
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009318:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2220      	movs	r2, #32
 800931e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f7ff fcd0 	bl	8008cc8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009328:	2300      	movs	r3, #0
}
 800932a:	4618      	mov	r0, r3
 800932c:	3708      	adds	r7, #8
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}

08009332 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009332:	b580      	push	{r7, lr}
 8009334:	b08c      	sub	sp, #48	; 0x30
 8009336:	af00      	add	r7, sp, #0
 8009338:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009340:	b2db      	uxtb	r3, r3
 8009342:	2b22      	cmp	r3, #34	; 0x22
 8009344:	f040 80ab 	bne.w	800949e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	689b      	ldr	r3, [r3, #8]
 800934c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009350:	d117      	bne.n	8009382 <UART_Receive_IT+0x50>
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	691b      	ldr	r3, [r3, #16]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d113      	bne.n	8009382 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800935a:	2300      	movs	r3, #0
 800935c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009362:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	685b      	ldr	r3, [r3, #4]
 800936a:	b29b      	uxth	r3, r3
 800936c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009370:	b29a      	uxth	r2, r3
 8009372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009374:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800937a:	1c9a      	adds	r2, r3, #2
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	629a      	str	r2, [r3, #40]	; 0x28
 8009380:	e026      	b.n	80093d0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009386:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009388:	2300      	movs	r3, #0
 800938a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	689b      	ldr	r3, [r3, #8]
 8009390:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009394:	d007      	beq.n	80093a6 <UART_Receive_IT+0x74>
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	689b      	ldr	r3, [r3, #8]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d10a      	bne.n	80093b4 <UART_Receive_IT+0x82>
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	691b      	ldr	r3, [r3, #16]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d106      	bne.n	80093b4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	685b      	ldr	r3, [r3, #4]
 80093ac:	b2da      	uxtb	r2, r3
 80093ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093b0:	701a      	strb	r2, [r3, #0]
 80093b2:	e008      	b.n	80093c6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	685b      	ldr	r3, [r3, #4]
 80093ba:	b2db      	uxtb	r3, r3
 80093bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093c0:	b2da      	uxtb	r2, r3
 80093c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093c4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093ca:	1c5a      	adds	r2, r3, #1
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80093d4:	b29b      	uxth	r3, r3
 80093d6:	3b01      	subs	r3, #1
 80093d8:	b29b      	uxth	r3, r3
 80093da:	687a      	ldr	r2, [r7, #4]
 80093dc:	4619      	mov	r1, r3
 80093de:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d15a      	bne.n	800949a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	68da      	ldr	r2, [r3, #12]
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	f022 0220 	bic.w	r2, r2, #32
 80093f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	68da      	ldr	r2, [r3, #12]
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009402:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	695a      	ldr	r2, [r3, #20]
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	f022 0201 	bic.w	r2, r2, #1
 8009412:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2220      	movs	r2, #32
 8009418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009420:	2b01      	cmp	r3, #1
 8009422:	d135      	bne.n	8009490 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2200      	movs	r2, #0
 8009428:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	330c      	adds	r3, #12
 8009430:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009432:	697b      	ldr	r3, [r7, #20]
 8009434:	e853 3f00 	ldrex	r3, [r3]
 8009438:	613b      	str	r3, [r7, #16]
   return(result);
 800943a:	693b      	ldr	r3, [r7, #16]
 800943c:	f023 0310 	bic.w	r3, r3, #16
 8009440:	627b      	str	r3, [r7, #36]	; 0x24
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	330c      	adds	r3, #12
 8009448:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800944a:	623a      	str	r2, [r7, #32]
 800944c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800944e:	69f9      	ldr	r1, [r7, #28]
 8009450:	6a3a      	ldr	r2, [r7, #32]
 8009452:	e841 2300 	strex	r3, r2, [r1]
 8009456:	61bb      	str	r3, [r7, #24]
   return(result);
 8009458:	69bb      	ldr	r3, [r7, #24]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d1e5      	bne.n	800942a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	f003 0310 	and.w	r3, r3, #16
 8009468:	2b10      	cmp	r3, #16
 800946a:	d10a      	bne.n	8009482 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800946c:	2300      	movs	r3, #0
 800946e:	60fb      	str	r3, [r7, #12]
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	60fb      	str	r3, [r7, #12]
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	685b      	ldr	r3, [r3, #4]
 800947e:	60fb      	str	r3, [r7, #12]
 8009480:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009486:	4619      	mov	r1, r3
 8009488:	6878      	ldr	r0, [r7, #4]
 800948a:	f7ff fc3b 	bl	8008d04 <HAL_UARTEx_RxEventCallback>
 800948e:	e002      	b.n	8009496 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009490:	6878      	ldr	r0, [r7, #4]
 8009492:	f7f9 f80b 	bl	80024ac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009496:	2300      	movs	r3, #0
 8009498:	e002      	b.n	80094a0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800949a:	2300      	movs	r3, #0
 800949c:	e000      	b.n	80094a0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800949e:	2302      	movs	r3, #2
  }
}
 80094a0:	4618      	mov	r0, r3
 80094a2:	3730      	adds	r7, #48	; 0x30
 80094a4:	46bd      	mov	sp, r7
 80094a6:	bd80      	pop	{r7, pc}

080094a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80094a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80094ac:	b0c0      	sub	sp, #256	; 0x100
 80094ae:	af00      	add	r7, sp, #0
 80094b0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80094b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	691b      	ldr	r3, [r3, #16]
 80094bc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80094c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094c4:	68d9      	ldr	r1, [r3, #12]
 80094c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094ca:	681a      	ldr	r2, [r3, #0]
 80094cc:	ea40 0301 	orr.w	r3, r0, r1
 80094d0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80094d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094d6:	689a      	ldr	r2, [r3, #8]
 80094d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094dc:	691b      	ldr	r3, [r3, #16]
 80094de:	431a      	orrs	r2, r3
 80094e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094e4:	695b      	ldr	r3, [r3, #20]
 80094e6:	431a      	orrs	r2, r3
 80094e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094ec:	69db      	ldr	r3, [r3, #28]
 80094ee:	4313      	orrs	r3, r2
 80094f0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80094f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	68db      	ldr	r3, [r3, #12]
 80094fc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009500:	f021 010c 	bic.w	r1, r1, #12
 8009504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009508:	681a      	ldr	r2, [r3, #0]
 800950a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800950e:	430b      	orrs	r3, r1
 8009510:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009512:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	695b      	ldr	r3, [r3, #20]
 800951a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800951e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009522:	6999      	ldr	r1, [r3, #24]
 8009524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009528:	681a      	ldr	r2, [r3, #0]
 800952a:	ea40 0301 	orr.w	r3, r0, r1
 800952e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009534:	681a      	ldr	r2, [r3, #0]
 8009536:	4b8f      	ldr	r3, [pc, #572]	; (8009774 <UART_SetConfig+0x2cc>)
 8009538:	429a      	cmp	r2, r3
 800953a:	d005      	beq.n	8009548 <UART_SetConfig+0xa0>
 800953c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009540:	681a      	ldr	r2, [r3, #0]
 8009542:	4b8d      	ldr	r3, [pc, #564]	; (8009778 <UART_SetConfig+0x2d0>)
 8009544:	429a      	cmp	r2, r3
 8009546:	d104      	bne.n	8009552 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009548:	f7fe f9ce 	bl	80078e8 <HAL_RCC_GetPCLK2Freq>
 800954c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009550:	e003      	b.n	800955a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009552:	f7fe f9b5 	bl	80078c0 <HAL_RCC_GetPCLK1Freq>
 8009556:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800955a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800955e:	69db      	ldr	r3, [r3, #28]
 8009560:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009564:	f040 810c 	bne.w	8009780 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009568:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800956c:	2200      	movs	r2, #0
 800956e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009572:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009576:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800957a:	4622      	mov	r2, r4
 800957c:	462b      	mov	r3, r5
 800957e:	1891      	adds	r1, r2, r2
 8009580:	65b9      	str	r1, [r7, #88]	; 0x58
 8009582:	415b      	adcs	r3, r3
 8009584:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009586:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800958a:	4621      	mov	r1, r4
 800958c:	eb12 0801 	adds.w	r8, r2, r1
 8009590:	4629      	mov	r1, r5
 8009592:	eb43 0901 	adc.w	r9, r3, r1
 8009596:	f04f 0200 	mov.w	r2, #0
 800959a:	f04f 0300 	mov.w	r3, #0
 800959e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80095a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80095a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80095aa:	4690      	mov	r8, r2
 80095ac:	4699      	mov	r9, r3
 80095ae:	4623      	mov	r3, r4
 80095b0:	eb18 0303 	adds.w	r3, r8, r3
 80095b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80095b8:	462b      	mov	r3, r5
 80095ba:	eb49 0303 	adc.w	r3, r9, r3
 80095be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80095c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095c6:	685b      	ldr	r3, [r3, #4]
 80095c8:	2200      	movs	r2, #0
 80095ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80095ce:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80095d2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80095d6:	460b      	mov	r3, r1
 80095d8:	18db      	adds	r3, r3, r3
 80095da:	653b      	str	r3, [r7, #80]	; 0x50
 80095dc:	4613      	mov	r3, r2
 80095de:	eb42 0303 	adc.w	r3, r2, r3
 80095e2:	657b      	str	r3, [r7, #84]	; 0x54
 80095e4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80095e8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80095ec:	f7f7 fb54 	bl	8000c98 <__aeabi_uldivmod>
 80095f0:	4602      	mov	r2, r0
 80095f2:	460b      	mov	r3, r1
 80095f4:	4b61      	ldr	r3, [pc, #388]	; (800977c <UART_SetConfig+0x2d4>)
 80095f6:	fba3 2302 	umull	r2, r3, r3, r2
 80095fa:	095b      	lsrs	r3, r3, #5
 80095fc:	011c      	lsls	r4, r3, #4
 80095fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009602:	2200      	movs	r2, #0
 8009604:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009608:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800960c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009610:	4642      	mov	r2, r8
 8009612:	464b      	mov	r3, r9
 8009614:	1891      	adds	r1, r2, r2
 8009616:	64b9      	str	r1, [r7, #72]	; 0x48
 8009618:	415b      	adcs	r3, r3
 800961a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800961c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009620:	4641      	mov	r1, r8
 8009622:	eb12 0a01 	adds.w	sl, r2, r1
 8009626:	4649      	mov	r1, r9
 8009628:	eb43 0b01 	adc.w	fp, r3, r1
 800962c:	f04f 0200 	mov.w	r2, #0
 8009630:	f04f 0300 	mov.w	r3, #0
 8009634:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009638:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800963c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009640:	4692      	mov	sl, r2
 8009642:	469b      	mov	fp, r3
 8009644:	4643      	mov	r3, r8
 8009646:	eb1a 0303 	adds.w	r3, sl, r3
 800964a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800964e:	464b      	mov	r3, r9
 8009650:	eb4b 0303 	adc.w	r3, fp, r3
 8009654:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800965c:	685b      	ldr	r3, [r3, #4]
 800965e:	2200      	movs	r2, #0
 8009660:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009664:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009668:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800966c:	460b      	mov	r3, r1
 800966e:	18db      	adds	r3, r3, r3
 8009670:	643b      	str	r3, [r7, #64]	; 0x40
 8009672:	4613      	mov	r3, r2
 8009674:	eb42 0303 	adc.w	r3, r2, r3
 8009678:	647b      	str	r3, [r7, #68]	; 0x44
 800967a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800967e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009682:	f7f7 fb09 	bl	8000c98 <__aeabi_uldivmod>
 8009686:	4602      	mov	r2, r0
 8009688:	460b      	mov	r3, r1
 800968a:	4611      	mov	r1, r2
 800968c:	4b3b      	ldr	r3, [pc, #236]	; (800977c <UART_SetConfig+0x2d4>)
 800968e:	fba3 2301 	umull	r2, r3, r3, r1
 8009692:	095b      	lsrs	r3, r3, #5
 8009694:	2264      	movs	r2, #100	; 0x64
 8009696:	fb02 f303 	mul.w	r3, r2, r3
 800969a:	1acb      	subs	r3, r1, r3
 800969c:	00db      	lsls	r3, r3, #3
 800969e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80096a2:	4b36      	ldr	r3, [pc, #216]	; (800977c <UART_SetConfig+0x2d4>)
 80096a4:	fba3 2302 	umull	r2, r3, r3, r2
 80096a8:	095b      	lsrs	r3, r3, #5
 80096aa:	005b      	lsls	r3, r3, #1
 80096ac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80096b0:	441c      	add	r4, r3
 80096b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80096b6:	2200      	movs	r2, #0
 80096b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80096bc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80096c0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80096c4:	4642      	mov	r2, r8
 80096c6:	464b      	mov	r3, r9
 80096c8:	1891      	adds	r1, r2, r2
 80096ca:	63b9      	str	r1, [r7, #56]	; 0x38
 80096cc:	415b      	adcs	r3, r3
 80096ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80096d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80096d4:	4641      	mov	r1, r8
 80096d6:	1851      	adds	r1, r2, r1
 80096d8:	6339      	str	r1, [r7, #48]	; 0x30
 80096da:	4649      	mov	r1, r9
 80096dc:	414b      	adcs	r3, r1
 80096de:	637b      	str	r3, [r7, #52]	; 0x34
 80096e0:	f04f 0200 	mov.w	r2, #0
 80096e4:	f04f 0300 	mov.w	r3, #0
 80096e8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80096ec:	4659      	mov	r1, fp
 80096ee:	00cb      	lsls	r3, r1, #3
 80096f0:	4651      	mov	r1, sl
 80096f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80096f6:	4651      	mov	r1, sl
 80096f8:	00ca      	lsls	r2, r1, #3
 80096fa:	4610      	mov	r0, r2
 80096fc:	4619      	mov	r1, r3
 80096fe:	4603      	mov	r3, r0
 8009700:	4642      	mov	r2, r8
 8009702:	189b      	adds	r3, r3, r2
 8009704:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009708:	464b      	mov	r3, r9
 800970a:	460a      	mov	r2, r1
 800970c:	eb42 0303 	adc.w	r3, r2, r3
 8009710:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009718:	685b      	ldr	r3, [r3, #4]
 800971a:	2200      	movs	r2, #0
 800971c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009720:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009724:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009728:	460b      	mov	r3, r1
 800972a:	18db      	adds	r3, r3, r3
 800972c:	62bb      	str	r3, [r7, #40]	; 0x28
 800972e:	4613      	mov	r3, r2
 8009730:	eb42 0303 	adc.w	r3, r2, r3
 8009734:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009736:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800973a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800973e:	f7f7 faab 	bl	8000c98 <__aeabi_uldivmod>
 8009742:	4602      	mov	r2, r0
 8009744:	460b      	mov	r3, r1
 8009746:	4b0d      	ldr	r3, [pc, #52]	; (800977c <UART_SetConfig+0x2d4>)
 8009748:	fba3 1302 	umull	r1, r3, r3, r2
 800974c:	095b      	lsrs	r3, r3, #5
 800974e:	2164      	movs	r1, #100	; 0x64
 8009750:	fb01 f303 	mul.w	r3, r1, r3
 8009754:	1ad3      	subs	r3, r2, r3
 8009756:	00db      	lsls	r3, r3, #3
 8009758:	3332      	adds	r3, #50	; 0x32
 800975a:	4a08      	ldr	r2, [pc, #32]	; (800977c <UART_SetConfig+0x2d4>)
 800975c:	fba2 2303 	umull	r2, r3, r2, r3
 8009760:	095b      	lsrs	r3, r3, #5
 8009762:	f003 0207 	and.w	r2, r3, #7
 8009766:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	4422      	add	r2, r4
 800976e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009770:	e105      	b.n	800997e <UART_SetConfig+0x4d6>
 8009772:	bf00      	nop
 8009774:	40011000 	.word	0x40011000
 8009778:	40011400 	.word	0x40011400
 800977c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009780:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009784:	2200      	movs	r2, #0
 8009786:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800978a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800978e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009792:	4642      	mov	r2, r8
 8009794:	464b      	mov	r3, r9
 8009796:	1891      	adds	r1, r2, r2
 8009798:	6239      	str	r1, [r7, #32]
 800979a:	415b      	adcs	r3, r3
 800979c:	627b      	str	r3, [r7, #36]	; 0x24
 800979e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80097a2:	4641      	mov	r1, r8
 80097a4:	1854      	adds	r4, r2, r1
 80097a6:	4649      	mov	r1, r9
 80097a8:	eb43 0501 	adc.w	r5, r3, r1
 80097ac:	f04f 0200 	mov.w	r2, #0
 80097b0:	f04f 0300 	mov.w	r3, #0
 80097b4:	00eb      	lsls	r3, r5, #3
 80097b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80097ba:	00e2      	lsls	r2, r4, #3
 80097bc:	4614      	mov	r4, r2
 80097be:	461d      	mov	r5, r3
 80097c0:	4643      	mov	r3, r8
 80097c2:	18e3      	adds	r3, r4, r3
 80097c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80097c8:	464b      	mov	r3, r9
 80097ca:	eb45 0303 	adc.w	r3, r5, r3
 80097ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80097d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097d6:	685b      	ldr	r3, [r3, #4]
 80097d8:	2200      	movs	r2, #0
 80097da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80097de:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80097e2:	f04f 0200 	mov.w	r2, #0
 80097e6:	f04f 0300 	mov.w	r3, #0
 80097ea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80097ee:	4629      	mov	r1, r5
 80097f0:	008b      	lsls	r3, r1, #2
 80097f2:	4621      	mov	r1, r4
 80097f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80097f8:	4621      	mov	r1, r4
 80097fa:	008a      	lsls	r2, r1, #2
 80097fc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009800:	f7f7 fa4a 	bl	8000c98 <__aeabi_uldivmod>
 8009804:	4602      	mov	r2, r0
 8009806:	460b      	mov	r3, r1
 8009808:	4b60      	ldr	r3, [pc, #384]	; (800998c <UART_SetConfig+0x4e4>)
 800980a:	fba3 2302 	umull	r2, r3, r3, r2
 800980e:	095b      	lsrs	r3, r3, #5
 8009810:	011c      	lsls	r4, r3, #4
 8009812:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009816:	2200      	movs	r2, #0
 8009818:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800981c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009820:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009824:	4642      	mov	r2, r8
 8009826:	464b      	mov	r3, r9
 8009828:	1891      	adds	r1, r2, r2
 800982a:	61b9      	str	r1, [r7, #24]
 800982c:	415b      	adcs	r3, r3
 800982e:	61fb      	str	r3, [r7, #28]
 8009830:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009834:	4641      	mov	r1, r8
 8009836:	1851      	adds	r1, r2, r1
 8009838:	6139      	str	r1, [r7, #16]
 800983a:	4649      	mov	r1, r9
 800983c:	414b      	adcs	r3, r1
 800983e:	617b      	str	r3, [r7, #20]
 8009840:	f04f 0200 	mov.w	r2, #0
 8009844:	f04f 0300 	mov.w	r3, #0
 8009848:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800984c:	4659      	mov	r1, fp
 800984e:	00cb      	lsls	r3, r1, #3
 8009850:	4651      	mov	r1, sl
 8009852:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009856:	4651      	mov	r1, sl
 8009858:	00ca      	lsls	r2, r1, #3
 800985a:	4610      	mov	r0, r2
 800985c:	4619      	mov	r1, r3
 800985e:	4603      	mov	r3, r0
 8009860:	4642      	mov	r2, r8
 8009862:	189b      	adds	r3, r3, r2
 8009864:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009868:	464b      	mov	r3, r9
 800986a:	460a      	mov	r2, r1
 800986c:	eb42 0303 	adc.w	r3, r2, r3
 8009870:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009878:	685b      	ldr	r3, [r3, #4]
 800987a:	2200      	movs	r2, #0
 800987c:	67bb      	str	r3, [r7, #120]	; 0x78
 800987e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009880:	f04f 0200 	mov.w	r2, #0
 8009884:	f04f 0300 	mov.w	r3, #0
 8009888:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800988c:	4649      	mov	r1, r9
 800988e:	008b      	lsls	r3, r1, #2
 8009890:	4641      	mov	r1, r8
 8009892:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009896:	4641      	mov	r1, r8
 8009898:	008a      	lsls	r2, r1, #2
 800989a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800989e:	f7f7 f9fb 	bl	8000c98 <__aeabi_uldivmod>
 80098a2:	4602      	mov	r2, r0
 80098a4:	460b      	mov	r3, r1
 80098a6:	4b39      	ldr	r3, [pc, #228]	; (800998c <UART_SetConfig+0x4e4>)
 80098a8:	fba3 1302 	umull	r1, r3, r3, r2
 80098ac:	095b      	lsrs	r3, r3, #5
 80098ae:	2164      	movs	r1, #100	; 0x64
 80098b0:	fb01 f303 	mul.w	r3, r1, r3
 80098b4:	1ad3      	subs	r3, r2, r3
 80098b6:	011b      	lsls	r3, r3, #4
 80098b8:	3332      	adds	r3, #50	; 0x32
 80098ba:	4a34      	ldr	r2, [pc, #208]	; (800998c <UART_SetConfig+0x4e4>)
 80098bc:	fba2 2303 	umull	r2, r3, r2, r3
 80098c0:	095b      	lsrs	r3, r3, #5
 80098c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80098c6:	441c      	add	r4, r3
 80098c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80098cc:	2200      	movs	r2, #0
 80098ce:	673b      	str	r3, [r7, #112]	; 0x70
 80098d0:	677a      	str	r2, [r7, #116]	; 0x74
 80098d2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80098d6:	4642      	mov	r2, r8
 80098d8:	464b      	mov	r3, r9
 80098da:	1891      	adds	r1, r2, r2
 80098dc:	60b9      	str	r1, [r7, #8]
 80098de:	415b      	adcs	r3, r3
 80098e0:	60fb      	str	r3, [r7, #12]
 80098e2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80098e6:	4641      	mov	r1, r8
 80098e8:	1851      	adds	r1, r2, r1
 80098ea:	6039      	str	r1, [r7, #0]
 80098ec:	4649      	mov	r1, r9
 80098ee:	414b      	adcs	r3, r1
 80098f0:	607b      	str	r3, [r7, #4]
 80098f2:	f04f 0200 	mov.w	r2, #0
 80098f6:	f04f 0300 	mov.w	r3, #0
 80098fa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80098fe:	4659      	mov	r1, fp
 8009900:	00cb      	lsls	r3, r1, #3
 8009902:	4651      	mov	r1, sl
 8009904:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009908:	4651      	mov	r1, sl
 800990a:	00ca      	lsls	r2, r1, #3
 800990c:	4610      	mov	r0, r2
 800990e:	4619      	mov	r1, r3
 8009910:	4603      	mov	r3, r0
 8009912:	4642      	mov	r2, r8
 8009914:	189b      	adds	r3, r3, r2
 8009916:	66bb      	str	r3, [r7, #104]	; 0x68
 8009918:	464b      	mov	r3, r9
 800991a:	460a      	mov	r2, r1
 800991c:	eb42 0303 	adc.w	r3, r2, r3
 8009920:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009922:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009926:	685b      	ldr	r3, [r3, #4]
 8009928:	2200      	movs	r2, #0
 800992a:	663b      	str	r3, [r7, #96]	; 0x60
 800992c:	667a      	str	r2, [r7, #100]	; 0x64
 800992e:	f04f 0200 	mov.w	r2, #0
 8009932:	f04f 0300 	mov.w	r3, #0
 8009936:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800993a:	4649      	mov	r1, r9
 800993c:	008b      	lsls	r3, r1, #2
 800993e:	4641      	mov	r1, r8
 8009940:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009944:	4641      	mov	r1, r8
 8009946:	008a      	lsls	r2, r1, #2
 8009948:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800994c:	f7f7 f9a4 	bl	8000c98 <__aeabi_uldivmod>
 8009950:	4602      	mov	r2, r0
 8009952:	460b      	mov	r3, r1
 8009954:	4b0d      	ldr	r3, [pc, #52]	; (800998c <UART_SetConfig+0x4e4>)
 8009956:	fba3 1302 	umull	r1, r3, r3, r2
 800995a:	095b      	lsrs	r3, r3, #5
 800995c:	2164      	movs	r1, #100	; 0x64
 800995e:	fb01 f303 	mul.w	r3, r1, r3
 8009962:	1ad3      	subs	r3, r2, r3
 8009964:	011b      	lsls	r3, r3, #4
 8009966:	3332      	adds	r3, #50	; 0x32
 8009968:	4a08      	ldr	r2, [pc, #32]	; (800998c <UART_SetConfig+0x4e4>)
 800996a:	fba2 2303 	umull	r2, r3, r2, r3
 800996e:	095b      	lsrs	r3, r3, #5
 8009970:	f003 020f 	and.w	r2, r3, #15
 8009974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	4422      	add	r2, r4
 800997c:	609a      	str	r2, [r3, #8]
}
 800997e:	bf00      	nop
 8009980:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009984:	46bd      	mov	sp, r7
 8009986:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800998a:	bf00      	nop
 800998c:	51eb851f 	.word	0x51eb851f

08009990 <__errno>:
 8009990:	4b01      	ldr	r3, [pc, #4]	; (8009998 <__errno+0x8>)
 8009992:	6818      	ldr	r0, [r3, #0]
 8009994:	4770      	bx	lr
 8009996:	bf00      	nop
 8009998:	20000028 	.word	0x20000028

0800999c <__libc_init_array>:
 800999c:	b570      	push	{r4, r5, r6, lr}
 800999e:	4d0d      	ldr	r5, [pc, #52]	; (80099d4 <__libc_init_array+0x38>)
 80099a0:	4c0d      	ldr	r4, [pc, #52]	; (80099d8 <__libc_init_array+0x3c>)
 80099a2:	1b64      	subs	r4, r4, r5
 80099a4:	10a4      	asrs	r4, r4, #2
 80099a6:	2600      	movs	r6, #0
 80099a8:	42a6      	cmp	r6, r4
 80099aa:	d109      	bne.n	80099c0 <__libc_init_array+0x24>
 80099ac:	4d0b      	ldr	r5, [pc, #44]	; (80099dc <__libc_init_array+0x40>)
 80099ae:	4c0c      	ldr	r4, [pc, #48]	; (80099e0 <__libc_init_array+0x44>)
 80099b0:	f002 ff76 	bl	800c8a0 <_init>
 80099b4:	1b64      	subs	r4, r4, r5
 80099b6:	10a4      	asrs	r4, r4, #2
 80099b8:	2600      	movs	r6, #0
 80099ba:	42a6      	cmp	r6, r4
 80099bc:	d105      	bne.n	80099ca <__libc_init_array+0x2e>
 80099be:	bd70      	pop	{r4, r5, r6, pc}
 80099c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80099c4:	4798      	blx	r3
 80099c6:	3601      	adds	r6, #1
 80099c8:	e7ee      	b.n	80099a8 <__libc_init_array+0xc>
 80099ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80099ce:	4798      	blx	r3
 80099d0:	3601      	adds	r6, #1
 80099d2:	e7f2      	b.n	80099ba <__libc_init_array+0x1e>
 80099d4:	080158f4 	.word	0x080158f4
 80099d8:	080158f4 	.word	0x080158f4
 80099dc:	080158f4 	.word	0x080158f4
 80099e0:	080158f8 	.word	0x080158f8

080099e4 <memset>:
 80099e4:	4402      	add	r2, r0
 80099e6:	4603      	mov	r3, r0
 80099e8:	4293      	cmp	r3, r2
 80099ea:	d100      	bne.n	80099ee <memset+0xa>
 80099ec:	4770      	bx	lr
 80099ee:	f803 1b01 	strb.w	r1, [r3], #1
 80099f2:	e7f9      	b.n	80099e8 <memset+0x4>

080099f4 <__cvt>:
 80099f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80099f8:	ec55 4b10 	vmov	r4, r5, d0
 80099fc:	2d00      	cmp	r5, #0
 80099fe:	460e      	mov	r6, r1
 8009a00:	4619      	mov	r1, r3
 8009a02:	462b      	mov	r3, r5
 8009a04:	bfbb      	ittet	lt
 8009a06:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009a0a:	461d      	movlt	r5, r3
 8009a0c:	2300      	movge	r3, #0
 8009a0e:	232d      	movlt	r3, #45	; 0x2d
 8009a10:	700b      	strb	r3, [r1, #0]
 8009a12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009a14:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009a18:	4691      	mov	r9, r2
 8009a1a:	f023 0820 	bic.w	r8, r3, #32
 8009a1e:	bfbc      	itt	lt
 8009a20:	4622      	movlt	r2, r4
 8009a22:	4614      	movlt	r4, r2
 8009a24:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009a28:	d005      	beq.n	8009a36 <__cvt+0x42>
 8009a2a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009a2e:	d100      	bne.n	8009a32 <__cvt+0x3e>
 8009a30:	3601      	adds	r6, #1
 8009a32:	2102      	movs	r1, #2
 8009a34:	e000      	b.n	8009a38 <__cvt+0x44>
 8009a36:	2103      	movs	r1, #3
 8009a38:	ab03      	add	r3, sp, #12
 8009a3a:	9301      	str	r3, [sp, #4]
 8009a3c:	ab02      	add	r3, sp, #8
 8009a3e:	9300      	str	r3, [sp, #0]
 8009a40:	ec45 4b10 	vmov	d0, r4, r5
 8009a44:	4653      	mov	r3, sl
 8009a46:	4632      	mov	r2, r6
 8009a48:	f000 fcea 	bl	800a420 <_dtoa_r>
 8009a4c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009a50:	4607      	mov	r7, r0
 8009a52:	d102      	bne.n	8009a5a <__cvt+0x66>
 8009a54:	f019 0f01 	tst.w	r9, #1
 8009a58:	d022      	beq.n	8009aa0 <__cvt+0xac>
 8009a5a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009a5e:	eb07 0906 	add.w	r9, r7, r6
 8009a62:	d110      	bne.n	8009a86 <__cvt+0x92>
 8009a64:	783b      	ldrb	r3, [r7, #0]
 8009a66:	2b30      	cmp	r3, #48	; 0x30
 8009a68:	d10a      	bne.n	8009a80 <__cvt+0x8c>
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	4620      	mov	r0, r4
 8009a70:	4629      	mov	r1, r5
 8009a72:	f7f7 f831 	bl	8000ad8 <__aeabi_dcmpeq>
 8009a76:	b918      	cbnz	r0, 8009a80 <__cvt+0x8c>
 8009a78:	f1c6 0601 	rsb	r6, r6, #1
 8009a7c:	f8ca 6000 	str.w	r6, [sl]
 8009a80:	f8da 3000 	ldr.w	r3, [sl]
 8009a84:	4499      	add	r9, r3
 8009a86:	2200      	movs	r2, #0
 8009a88:	2300      	movs	r3, #0
 8009a8a:	4620      	mov	r0, r4
 8009a8c:	4629      	mov	r1, r5
 8009a8e:	f7f7 f823 	bl	8000ad8 <__aeabi_dcmpeq>
 8009a92:	b108      	cbz	r0, 8009a98 <__cvt+0xa4>
 8009a94:	f8cd 900c 	str.w	r9, [sp, #12]
 8009a98:	2230      	movs	r2, #48	; 0x30
 8009a9a:	9b03      	ldr	r3, [sp, #12]
 8009a9c:	454b      	cmp	r3, r9
 8009a9e:	d307      	bcc.n	8009ab0 <__cvt+0xbc>
 8009aa0:	9b03      	ldr	r3, [sp, #12]
 8009aa2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009aa4:	1bdb      	subs	r3, r3, r7
 8009aa6:	4638      	mov	r0, r7
 8009aa8:	6013      	str	r3, [r2, #0]
 8009aaa:	b004      	add	sp, #16
 8009aac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ab0:	1c59      	adds	r1, r3, #1
 8009ab2:	9103      	str	r1, [sp, #12]
 8009ab4:	701a      	strb	r2, [r3, #0]
 8009ab6:	e7f0      	b.n	8009a9a <__cvt+0xa6>

08009ab8 <__exponent>:
 8009ab8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009aba:	4603      	mov	r3, r0
 8009abc:	2900      	cmp	r1, #0
 8009abe:	bfb8      	it	lt
 8009ac0:	4249      	neglt	r1, r1
 8009ac2:	f803 2b02 	strb.w	r2, [r3], #2
 8009ac6:	bfb4      	ite	lt
 8009ac8:	222d      	movlt	r2, #45	; 0x2d
 8009aca:	222b      	movge	r2, #43	; 0x2b
 8009acc:	2909      	cmp	r1, #9
 8009ace:	7042      	strb	r2, [r0, #1]
 8009ad0:	dd2a      	ble.n	8009b28 <__exponent+0x70>
 8009ad2:	f10d 0407 	add.w	r4, sp, #7
 8009ad6:	46a4      	mov	ip, r4
 8009ad8:	270a      	movs	r7, #10
 8009ada:	46a6      	mov	lr, r4
 8009adc:	460a      	mov	r2, r1
 8009ade:	fb91 f6f7 	sdiv	r6, r1, r7
 8009ae2:	fb07 1516 	mls	r5, r7, r6, r1
 8009ae6:	3530      	adds	r5, #48	; 0x30
 8009ae8:	2a63      	cmp	r2, #99	; 0x63
 8009aea:	f104 34ff 	add.w	r4, r4, #4294967295
 8009aee:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009af2:	4631      	mov	r1, r6
 8009af4:	dcf1      	bgt.n	8009ada <__exponent+0x22>
 8009af6:	3130      	adds	r1, #48	; 0x30
 8009af8:	f1ae 0502 	sub.w	r5, lr, #2
 8009afc:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009b00:	1c44      	adds	r4, r0, #1
 8009b02:	4629      	mov	r1, r5
 8009b04:	4561      	cmp	r1, ip
 8009b06:	d30a      	bcc.n	8009b1e <__exponent+0x66>
 8009b08:	f10d 0209 	add.w	r2, sp, #9
 8009b0c:	eba2 020e 	sub.w	r2, r2, lr
 8009b10:	4565      	cmp	r5, ip
 8009b12:	bf88      	it	hi
 8009b14:	2200      	movhi	r2, #0
 8009b16:	4413      	add	r3, r2
 8009b18:	1a18      	subs	r0, r3, r0
 8009b1a:	b003      	add	sp, #12
 8009b1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009b22:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009b26:	e7ed      	b.n	8009b04 <__exponent+0x4c>
 8009b28:	2330      	movs	r3, #48	; 0x30
 8009b2a:	3130      	adds	r1, #48	; 0x30
 8009b2c:	7083      	strb	r3, [r0, #2]
 8009b2e:	70c1      	strb	r1, [r0, #3]
 8009b30:	1d03      	adds	r3, r0, #4
 8009b32:	e7f1      	b.n	8009b18 <__exponent+0x60>

08009b34 <_printf_float>:
 8009b34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b38:	ed2d 8b02 	vpush	{d8}
 8009b3c:	b08d      	sub	sp, #52	; 0x34
 8009b3e:	460c      	mov	r4, r1
 8009b40:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009b44:	4616      	mov	r6, r2
 8009b46:	461f      	mov	r7, r3
 8009b48:	4605      	mov	r5, r0
 8009b4a:	f001 fa57 	bl	800affc <_localeconv_r>
 8009b4e:	f8d0 a000 	ldr.w	sl, [r0]
 8009b52:	4650      	mov	r0, sl
 8009b54:	f7f6 fb44 	bl	80001e0 <strlen>
 8009b58:	2300      	movs	r3, #0
 8009b5a:	930a      	str	r3, [sp, #40]	; 0x28
 8009b5c:	6823      	ldr	r3, [r4, #0]
 8009b5e:	9305      	str	r3, [sp, #20]
 8009b60:	f8d8 3000 	ldr.w	r3, [r8]
 8009b64:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009b68:	3307      	adds	r3, #7
 8009b6a:	f023 0307 	bic.w	r3, r3, #7
 8009b6e:	f103 0208 	add.w	r2, r3, #8
 8009b72:	f8c8 2000 	str.w	r2, [r8]
 8009b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b7a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009b7e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009b82:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009b86:	9307      	str	r3, [sp, #28]
 8009b88:	f8cd 8018 	str.w	r8, [sp, #24]
 8009b8c:	ee08 0a10 	vmov	s16, r0
 8009b90:	4b9f      	ldr	r3, [pc, #636]	; (8009e10 <_printf_float+0x2dc>)
 8009b92:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009b96:	f04f 32ff 	mov.w	r2, #4294967295
 8009b9a:	f7f6 ffcf 	bl	8000b3c <__aeabi_dcmpun>
 8009b9e:	bb88      	cbnz	r0, 8009c04 <_printf_float+0xd0>
 8009ba0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009ba4:	4b9a      	ldr	r3, [pc, #616]	; (8009e10 <_printf_float+0x2dc>)
 8009ba6:	f04f 32ff 	mov.w	r2, #4294967295
 8009baa:	f7f6 ffa9 	bl	8000b00 <__aeabi_dcmple>
 8009bae:	bb48      	cbnz	r0, 8009c04 <_printf_float+0xd0>
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	4640      	mov	r0, r8
 8009bb6:	4649      	mov	r1, r9
 8009bb8:	f7f6 ff98 	bl	8000aec <__aeabi_dcmplt>
 8009bbc:	b110      	cbz	r0, 8009bc4 <_printf_float+0x90>
 8009bbe:	232d      	movs	r3, #45	; 0x2d
 8009bc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009bc4:	4b93      	ldr	r3, [pc, #588]	; (8009e14 <_printf_float+0x2e0>)
 8009bc6:	4894      	ldr	r0, [pc, #592]	; (8009e18 <_printf_float+0x2e4>)
 8009bc8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009bcc:	bf94      	ite	ls
 8009bce:	4698      	movls	r8, r3
 8009bd0:	4680      	movhi	r8, r0
 8009bd2:	2303      	movs	r3, #3
 8009bd4:	6123      	str	r3, [r4, #16]
 8009bd6:	9b05      	ldr	r3, [sp, #20]
 8009bd8:	f023 0204 	bic.w	r2, r3, #4
 8009bdc:	6022      	str	r2, [r4, #0]
 8009bde:	f04f 0900 	mov.w	r9, #0
 8009be2:	9700      	str	r7, [sp, #0]
 8009be4:	4633      	mov	r3, r6
 8009be6:	aa0b      	add	r2, sp, #44	; 0x2c
 8009be8:	4621      	mov	r1, r4
 8009bea:	4628      	mov	r0, r5
 8009bec:	f000 f9d8 	bl	8009fa0 <_printf_common>
 8009bf0:	3001      	adds	r0, #1
 8009bf2:	f040 8090 	bne.w	8009d16 <_printf_float+0x1e2>
 8009bf6:	f04f 30ff 	mov.w	r0, #4294967295
 8009bfa:	b00d      	add	sp, #52	; 0x34
 8009bfc:	ecbd 8b02 	vpop	{d8}
 8009c00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c04:	4642      	mov	r2, r8
 8009c06:	464b      	mov	r3, r9
 8009c08:	4640      	mov	r0, r8
 8009c0a:	4649      	mov	r1, r9
 8009c0c:	f7f6 ff96 	bl	8000b3c <__aeabi_dcmpun>
 8009c10:	b140      	cbz	r0, 8009c24 <_printf_float+0xf0>
 8009c12:	464b      	mov	r3, r9
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	bfbc      	itt	lt
 8009c18:	232d      	movlt	r3, #45	; 0x2d
 8009c1a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009c1e:	487f      	ldr	r0, [pc, #508]	; (8009e1c <_printf_float+0x2e8>)
 8009c20:	4b7f      	ldr	r3, [pc, #508]	; (8009e20 <_printf_float+0x2ec>)
 8009c22:	e7d1      	b.n	8009bc8 <_printf_float+0x94>
 8009c24:	6863      	ldr	r3, [r4, #4]
 8009c26:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009c2a:	9206      	str	r2, [sp, #24]
 8009c2c:	1c5a      	adds	r2, r3, #1
 8009c2e:	d13f      	bne.n	8009cb0 <_printf_float+0x17c>
 8009c30:	2306      	movs	r3, #6
 8009c32:	6063      	str	r3, [r4, #4]
 8009c34:	9b05      	ldr	r3, [sp, #20]
 8009c36:	6861      	ldr	r1, [r4, #4]
 8009c38:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	9303      	str	r3, [sp, #12]
 8009c40:	ab0a      	add	r3, sp, #40	; 0x28
 8009c42:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009c46:	ab09      	add	r3, sp, #36	; 0x24
 8009c48:	ec49 8b10 	vmov	d0, r8, r9
 8009c4c:	9300      	str	r3, [sp, #0]
 8009c4e:	6022      	str	r2, [r4, #0]
 8009c50:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009c54:	4628      	mov	r0, r5
 8009c56:	f7ff fecd 	bl	80099f4 <__cvt>
 8009c5a:	9b06      	ldr	r3, [sp, #24]
 8009c5c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009c5e:	2b47      	cmp	r3, #71	; 0x47
 8009c60:	4680      	mov	r8, r0
 8009c62:	d108      	bne.n	8009c76 <_printf_float+0x142>
 8009c64:	1cc8      	adds	r0, r1, #3
 8009c66:	db02      	blt.n	8009c6e <_printf_float+0x13a>
 8009c68:	6863      	ldr	r3, [r4, #4]
 8009c6a:	4299      	cmp	r1, r3
 8009c6c:	dd41      	ble.n	8009cf2 <_printf_float+0x1be>
 8009c6e:	f1ab 0b02 	sub.w	fp, fp, #2
 8009c72:	fa5f fb8b 	uxtb.w	fp, fp
 8009c76:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009c7a:	d820      	bhi.n	8009cbe <_printf_float+0x18a>
 8009c7c:	3901      	subs	r1, #1
 8009c7e:	465a      	mov	r2, fp
 8009c80:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009c84:	9109      	str	r1, [sp, #36]	; 0x24
 8009c86:	f7ff ff17 	bl	8009ab8 <__exponent>
 8009c8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009c8c:	1813      	adds	r3, r2, r0
 8009c8e:	2a01      	cmp	r2, #1
 8009c90:	4681      	mov	r9, r0
 8009c92:	6123      	str	r3, [r4, #16]
 8009c94:	dc02      	bgt.n	8009c9c <_printf_float+0x168>
 8009c96:	6822      	ldr	r2, [r4, #0]
 8009c98:	07d2      	lsls	r2, r2, #31
 8009c9a:	d501      	bpl.n	8009ca0 <_printf_float+0x16c>
 8009c9c:	3301      	adds	r3, #1
 8009c9e:	6123      	str	r3, [r4, #16]
 8009ca0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d09c      	beq.n	8009be2 <_printf_float+0xae>
 8009ca8:	232d      	movs	r3, #45	; 0x2d
 8009caa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009cae:	e798      	b.n	8009be2 <_printf_float+0xae>
 8009cb0:	9a06      	ldr	r2, [sp, #24]
 8009cb2:	2a47      	cmp	r2, #71	; 0x47
 8009cb4:	d1be      	bne.n	8009c34 <_printf_float+0x100>
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d1bc      	bne.n	8009c34 <_printf_float+0x100>
 8009cba:	2301      	movs	r3, #1
 8009cbc:	e7b9      	b.n	8009c32 <_printf_float+0xfe>
 8009cbe:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009cc2:	d118      	bne.n	8009cf6 <_printf_float+0x1c2>
 8009cc4:	2900      	cmp	r1, #0
 8009cc6:	6863      	ldr	r3, [r4, #4]
 8009cc8:	dd0b      	ble.n	8009ce2 <_printf_float+0x1ae>
 8009cca:	6121      	str	r1, [r4, #16]
 8009ccc:	b913      	cbnz	r3, 8009cd4 <_printf_float+0x1a0>
 8009cce:	6822      	ldr	r2, [r4, #0]
 8009cd0:	07d0      	lsls	r0, r2, #31
 8009cd2:	d502      	bpl.n	8009cda <_printf_float+0x1a6>
 8009cd4:	3301      	adds	r3, #1
 8009cd6:	440b      	add	r3, r1
 8009cd8:	6123      	str	r3, [r4, #16]
 8009cda:	65a1      	str	r1, [r4, #88]	; 0x58
 8009cdc:	f04f 0900 	mov.w	r9, #0
 8009ce0:	e7de      	b.n	8009ca0 <_printf_float+0x16c>
 8009ce2:	b913      	cbnz	r3, 8009cea <_printf_float+0x1b6>
 8009ce4:	6822      	ldr	r2, [r4, #0]
 8009ce6:	07d2      	lsls	r2, r2, #31
 8009ce8:	d501      	bpl.n	8009cee <_printf_float+0x1ba>
 8009cea:	3302      	adds	r3, #2
 8009cec:	e7f4      	b.n	8009cd8 <_printf_float+0x1a4>
 8009cee:	2301      	movs	r3, #1
 8009cf0:	e7f2      	b.n	8009cd8 <_printf_float+0x1a4>
 8009cf2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009cf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009cf8:	4299      	cmp	r1, r3
 8009cfa:	db05      	blt.n	8009d08 <_printf_float+0x1d4>
 8009cfc:	6823      	ldr	r3, [r4, #0]
 8009cfe:	6121      	str	r1, [r4, #16]
 8009d00:	07d8      	lsls	r0, r3, #31
 8009d02:	d5ea      	bpl.n	8009cda <_printf_float+0x1a6>
 8009d04:	1c4b      	adds	r3, r1, #1
 8009d06:	e7e7      	b.n	8009cd8 <_printf_float+0x1a4>
 8009d08:	2900      	cmp	r1, #0
 8009d0a:	bfd4      	ite	le
 8009d0c:	f1c1 0202 	rsble	r2, r1, #2
 8009d10:	2201      	movgt	r2, #1
 8009d12:	4413      	add	r3, r2
 8009d14:	e7e0      	b.n	8009cd8 <_printf_float+0x1a4>
 8009d16:	6823      	ldr	r3, [r4, #0]
 8009d18:	055a      	lsls	r2, r3, #21
 8009d1a:	d407      	bmi.n	8009d2c <_printf_float+0x1f8>
 8009d1c:	6923      	ldr	r3, [r4, #16]
 8009d1e:	4642      	mov	r2, r8
 8009d20:	4631      	mov	r1, r6
 8009d22:	4628      	mov	r0, r5
 8009d24:	47b8      	blx	r7
 8009d26:	3001      	adds	r0, #1
 8009d28:	d12c      	bne.n	8009d84 <_printf_float+0x250>
 8009d2a:	e764      	b.n	8009bf6 <_printf_float+0xc2>
 8009d2c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009d30:	f240 80e0 	bls.w	8009ef4 <_printf_float+0x3c0>
 8009d34:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009d38:	2200      	movs	r2, #0
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	f7f6 fecc 	bl	8000ad8 <__aeabi_dcmpeq>
 8009d40:	2800      	cmp	r0, #0
 8009d42:	d034      	beq.n	8009dae <_printf_float+0x27a>
 8009d44:	4a37      	ldr	r2, [pc, #220]	; (8009e24 <_printf_float+0x2f0>)
 8009d46:	2301      	movs	r3, #1
 8009d48:	4631      	mov	r1, r6
 8009d4a:	4628      	mov	r0, r5
 8009d4c:	47b8      	blx	r7
 8009d4e:	3001      	adds	r0, #1
 8009d50:	f43f af51 	beq.w	8009bf6 <_printf_float+0xc2>
 8009d54:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009d58:	429a      	cmp	r2, r3
 8009d5a:	db02      	blt.n	8009d62 <_printf_float+0x22e>
 8009d5c:	6823      	ldr	r3, [r4, #0]
 8009d5e:	07d8      	lsls	r0, r3, #31
 8009d60:	d510      	bpl.n	8009d84 <_printf_float+0x250>
 8009d62:	ee18 3a10 	vmov	r3, s16
 8009d66:	4652      	mov	r2, sl
 8009d68:	4631      	mov	r1, r6
 8009d6a:	4628      	mov	r0, r5
 8009d6c:	47b8      	blx	r7
 8009d6e:	3001      	adds	r0, #1
 8009d70:	f43f af41 	beq.w	8009bf6 <_printf_float+0xc2>
 8009d74:	f04f 0800 	mov.w	r8, #0
 8009d78:	f104 091a 	add.w	r9, r4, #26
 8009d7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d7e:	3b01      	subs	r3, #1
 8009d80:	4543      	cmp	r3, r8
 8009d82:	dc09      	bgt.n	8009d98 <_printf_float+0x264>
 8009d84:	6823      	ldr	r3, [r4, #0]
 8009d86:	079b      	lsls	r3, r3, #30
 8009d88:	f100 8105 	bmi.w	8009f96 <_printf_float+0x462>
 8009d8c:	68e0      	ldr	r0, [r4, #12]
 8009d8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d90:	4298      	cmp	r0, r3
 8009d92:	bfb8      	it	lt
 8009d94:	4618      	movlt	r0, r3
 8009d96:	e730      	b.n	8009bfa <_printf_float+0xc6>
 8009d98:	2301      	movs	r3, #1
 8009d9a:	464a      	mov	r2, r9
 8009d9c:	4631      	mov	r1, r6
 8009d9e:	4628      	mov	r0, r5
 8009da0:	47b8      	blx	r7
 8009da2:	3001      	adds	r0, #1
 8009da4:	f43f af27 	beq.w	8009bf6 <_printf_float+0xc2>
 8009da8:	f108 0801 	add.w	r8, r8, #1
 8009dac:	e7e6      	b.n	8009d7c <_printf_float+0x248>
 8009dae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	dc39      	bgt.n	8009e28 <_printf_float+0x2f4>
 8009db4:	4a1b      	ldr	r2, [pc, #108]	; (8009e24 <_printf_float+0x2f0>)
 8009db6:	2301      	movs	r3, #1
 8009db8:	4631      	mov	r1, r6
 8009dba:	4628      	mov	r0, r5
 8009dbc:	47b8      	blx	r7
 8009dbe:	3001      	adds	r0, #1
 8009dc0:	f43f af19 	beq.w	8009bf6 <_printf_float+0xc2>
 8009dc4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009dc8:	4313      	orrs	r3, r2
 8009dca:	d102      	bne.n	8009dd2 <_printf_float+0x29e>
 8009dcc:	6823      	ldr	r3, [r4, #0]
 8009dce:	07d9      	lsls	r1, r3, #31
 8009dd0:	d5d8      	bpl.n	8009d84 <_printf_float+0x250>
 8009dd2:	ee18 3a10 	vmov	r3, s16
 8009dd6:	4652      	mov	r2, sl
 8009dd8:	4631      	mov	r1, r6
 8009dda:	4628      	mov	r0, r5
 8009ddc:	47b8      	blx	r7
 8009dde:	3001      	adds	r0, #1
 8009de0:	f43f af09 	beq.w	8009bf6 <_printf_float+0xc2>
 8009de4:	f04f 0900 	mov.w	r9, #0
 8009de8:	f104 0a1a 	add.w	sl, r4, #26
 8009dec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009dee:	425b      	negs	r3, r3
 8009df0:	454b      	cmp	r3, r9
 8009df2:	dc01      	bgt.n	8009df8 <_printf_float+0x2c4>
 8009df4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009df6:	e792      	b.n	8009d1e <_printf_float+0x1ea>
 8009df8:	2301      	movs	r3, #1
 8009dfa:	4652      	mov	r2, sl
 8009dfc:	4631      	mov	r1, r6
 8009dfe:	4628      	mov	r0, r5
 8009e00:	47b8      	blx	r7
 8009e02:	3001      	adds	r0, #1
 8009e04:	f43f aef7 	beq.w	8009bf6 <_printf_float+0xc2>
 8009e08:	f109 0901 	add.w	r9, r9, #1
 8009e0c:	e7ee      	b.n	8009dec <_printf_float+0x2b8>
 8009e0e:	bf00      	nop
 8009e10:	7fefffff 	.word	0x7fefffff
 8009e14:	08015518 	.word	0x08015518
 8009e18:	0801551c 	.word	0x0801551c
 8009e1c:	08015524 	.word	0x08015524
 8009e20:	08015520 	.word	0x08015520
 8009e24:	08015528 	.word	0x08015528
 8009e28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009e2a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009e2c:	429a      	cmp	r2, r3
 8009e2e:	bfa8      	it	ge
 8009e30:	461a      	movge	r2, r3
 8009e32:	2a00      	cmp	r2, #0
 8009e34:	4691      	mov	r9, r2
 8009e36:	dc37      	bgt.n	8009ea8 <_printf_float+0x374>
 8009e38:	f04f 0b00 	mov.w	fp, #0
 8009e3c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009e40:	f104 021a 	add.w	r2, r4, #26
 8009e44:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009e46:	9305      	str	r3, [sp, #20]
 8009e48:	eba3 0309 	sub.w	r3, r3, r9
 8009e4c:	455b      	cmp	r3, fp
 8009e4e:	dc33      	bgt.n	8009eb8 <_printf_float+0x384>
 8009e50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009e54:	429a      	cmp	r2, r3
 8009e56:	db3b      	blt.n	8009ed0 <_printf_float+0x39c>
 8009e58:	6823      	ldr	r3, [r4, #0]
 8009e5a:	07da      	lsls	r2, r3, #31
 8009e5c:	d438      	bmi.n	8009ed0 <_printf_float+0x39c>
 8009e5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e60:	9a05      	ldr	r2, [sp, #20]
 8009e62:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009e64:	1a9a      	subs	r2, r3, r2
 8009e66:	eba3 0901 	sub.w	r9, r3, r1
 8009e6a:	4591      	cmp	r9, r2
 8009e6c:	bfa8      	it	ge
 8009e6e:	4691      	movge	r9, r2
 8009e70:	f1b9 0f00 	cmp.w	r9, #0
 8009e74:	dc35      	bgt.n	8009ee2 <_printf_float+0x3ae>
 8009e76:	f04f 0800 	mov.w	r8, #0
 8009e7a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009e7e:	f104 0a1a 	add.w	sl, r4, #26
 8009e82:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009e86:	1a9b      	subs	r3, r3, r2
 8009e88:	eba3 0309 	sub.w	r3, r3, r9
 8009e8c:	4543      	cmp	r3, r8
 8009e8e:	f77f af79 	ble.w	8009d84 <_printf_float+0x250>
 8009e92:	2301      	movs	r3, #1
 8009e94:	4652      	mov	r2, sl
 8009e96:	4631      	mov	r1, r6
 8009e98:	4628      	mov	r0, r5
 8009e9a:	47b8      	blx	r7
 8009e9c:	3001      	adds	r0, #1
 8009e9e:	f43f aeaa 	beq.w	8009bf6 <_printf_float+0xc2>
 8009ea2:	f108 0801 	add.w	r8, r8, #1
 8009ea6:	e7ec      	b.n	8009e82 <_printf_float+0x34e>
 8009ea8:	4613      	mov	r3, r2
 8009eaa:	4631      	mov	r1, r6
 8009eac:	4642      	mov	r2, r8
 8009eae:	4628      	mov	r0, r5
 8009eb0:	47b8      	blx	r7
 8009eb2:	3001      	adds	r0, #1
 8009eb4:	d1c0      	bne.n	8009e38 <_printf_float+0x304>
 8009eb6:	e69e      	b.n	8009bf6 <_printf_float+0xc2>
 8009eb8:	2301      	movs	r3, #1
 8009eba:	4631      	mov	r1, r6
 8009ebc:	4628      	mov	r0, r5
 8009ebe:	9205      	str	r2, [sp, #20]
 8009ec0:	47b8      	blx	r7
 8009ec2:	3001      	adds	r0, #1
 8009ec4:	f43f ae97 	beq.w	8009bf6 <_printf_float+0xc2>
 8009ec8:	9a05      	ldr	r2, [sp, #20]
 8009eca:	f10b 0b01 	add.w	fp, fp, #1
 8009ece:	e7b9      	b.n	8009e44 <_printf_float+0x310>
 8009ed0:	ee18 3a10 	vmov	r3, s16
 8009ed4:	4652      	mov	r2, sl
 8009ed6:	4631      	mov	r1, r6
 8009ed8:	4628      	mov	r0, r5
 8009eda:	47b8      	blx	r7
 8009edc:	3001      	adds	r0, #1
 8009ede:	d1be      	bne.n	8009e5e <_printf_float+0x32a>
 8009ee0:	e689      	b.n	8009bf6 <_printf_float+0xc2>
 8009ee2:	9a05      	ldr	r2, [sp, #20]
 8009ee4:	464b      	mov	r3, r9
 8009ee6:	4442      	add	r2, r8
 8009ee8:	4631      	mov	r1, r6
 8009eea:	4628      	mov	r0, r5
 8009eec:	47b8      	blx	r7
 8009eee:	3001      	adds	r0, #1
 8009ef0:	d1c1      	bne.n	8009e76 <_printf_float+0x342>
 8009ef2:	e680      	b.n	8009bf6 <_printf_float+0xc2>
 8009ef4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009ef6:	2a01      	cmp	r2, #1
 8009ef8:	dc01      	bgt.n	8009efe <_printf_float+0x3ca>
 8009efa:	07db      	lsls	r3, r3, #31
 8009efc:	d538      	bpl.n	8009f70 <_printf_float+0x43c>
 8009efe:	2301      	movs	r3, #1
 8009f00:	4642      	mov	r2, r8
 8009f02:	4631      	mov	r1, r6
 8009f04:	4628      	mov	r0, r5
 8009f06:	47b8      	blx	r7
 8009f08:	3001      	adds	r0, #1
 8009f0a:	f43f ae74 	beq.w	8009bf6 <_printf_float+0xc2>
 8009f0e:	ee18 3a10 	vmov	r3, s16
 8009f12:	4652      	mov	r2, sl
 8009f14:	4631      	mov	r1, r6
 8009f16:	4628      	mov	r0, r5
 8009f18:	47b8      	blx	r7
 8009f1a:	3001      	adds	r0, #1
 8009f1c:	f43f ae6b 	beq.w	8009bf6 <_printf_float+0xc2>
 8009f20:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009f24:	2200      	movs	r2, #0
 8009f26:	2300      	movs	r3, #0
 8009f28:	f7f6 fdd6 	bl	8000ad8 <__aeabi_dcmpeq>
 8009f2c:	b9d8      	cbnz	r0, 8009f66 <_printf_float+0x432>
 8009f2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f30:	f108 0201 	add.w	r2, r8, #1
 8009f34:	3b01      	subs	r3, #1
 8009f36:	4631      	mov	r1, r6
 8009f38:	4628      	mov	r0, r5
 8009f3a:	47b8      	blx	r7
 8009f3c:	3001      	adds	r0, #1
 8009f3e:	d10e      	bne.n	8009f5e <_printf_float+0x42a>
 8009f40:	e659      	b.n	8009bf6 <_printf_float+0xc2>
 8009f42:	2301      	movs	r3, #1
 8009f44:	4652      	mov	r2, sl
 8009f46:	4631      	mov	r1, r6
 8009f48:	4628      	mov	r0, r5
 8009f4a:	47b8      	blx	r7
 8009f4c:	3001      	adds	r0, #1
 8009f4e:	f43f ae52 	beq.w	8009bf6 <_printf_float+0xc2>
 8009f52:	f108 0801 	add.w	r8, r8, #1
 8009f56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f58:	3b01      	subs	r3, #1
 8009f5a:	4543      	cmp	r3, r8
 8009f5c:	dcf1      	bgt.n	8009f42 <_printf_float+0x40e>
 8009f5e:	464b      	mov	r3, r9
 8009f60:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009f64:	e6dc      	b.n	8009d20 <_printf_float+0x1ec>
 8009f66:	f04f 0800 	mov.w	r8, #0
 8009f6a:	f104 0a1a 	add.w	sl, r4, #26
 8009f6e:	e7f2      	b.n	8009f56 <_printf_float+0x422>
 8009f70:	2301      	movs	r3, #1
 8009f72:	4642      	mov	r2, r8
 8009f74:	e7df      	b.n	8009f36 <_printf_float+0x402>
 8009f76:	2301      	movs	r3, #1
 8009f78:	464a      	mov	r2, r9
 8009f7a:	4631      	mov	r1, r6
 8009f7c:	4628      	mov	r0, r5
 8009f7e:	47b8      	blx	r7
 8009f80:	3001      	adds	r0, #1
 8009f82:	f43f ae38 	beq.w	8009bf6 <_printf_float+0xc2>
 8009f86:	f108 0801 	add.w	r8, r8, #1
 8009f8a:	68e3      	ldr	r3, [r4, #12]
 8009f8c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009f8e:	1a5b      	subs	r3, r3, r1
 8009f90:	4543      	cmp	r3, r8
 8009f92:	dcf0      	bgt.n	8009f76 <_printf_float+0x442>
 8009f94:	e6fa      	b.n	8009d8c <_printf_float+0x258>
 8009f96:	f04f 0800 	mov.w	r8, #0
 8009f9a:	f104 0919 	add.w	r9, r4, #25
 8009f9e:	e7f4      	b.n	8009f8a <_printf_float+0x456>

08009fa0 <_printf_common>:
 8009fa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fa4:	4616      	mov	r6, r2
 8009fa6:	4699      	mov	r9, r3
 8009fa8:	688a      	ldr	r2, [r1, #8]
 8009faa:	690b      	ldr	r3, [r1, #16]
 8009fac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009fb0:	4293      	cmp	r3, r2
 8009fb2:	bfb8      	it	lt
 8009fb4:	4613      	movlt	r3, r2
 8009fb6:	6033      	str	r3, [r6, #0]
 8009fb8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009fbc:	4607      	mov	r7, r0
 8009fbe:	460c      	mov	r4, r1
 8009fc0:	b10a      	cbz	r2, 8009fc6 <_printf_common+0x26>
 8009fc2:	3301      	adds	r3, #1
 8009fc4:	6033      	str	r3, [r6, #0]
 8009fc6:	6823      	ldr	r3, [r4, #0]
 8009fc8:	0699      	lsls	r1, r3, #26
 8009fca:	bf42      	ittt	mi
 8009fcc:	6833      	ldrmi	r3, [r6, #0]
 8009fce:	3302      	addmi	r3, #2
 8009fd0:	6033      	strmi	r3, [r6, #0]
 8009fd2:	6825      	ldr	r5, [r4, #0]
 8009fd4:	f015 0506 	ands.w	r5, r5, #6
 8009fd8:	d106      	bne.n	8009fe8 <_printf_common+0x48>
 8009fda:	f104 0a19 	add.w	sl, r4, #25
 8009fde:	68e3      	ldr	r3, [r4, #12]
 8009fe0:	6832      	ldr	r2, [r6, #0]
 8009fe2:	1a9b      	subs	r3, r3, r2
 8009fe4:	42ab      	cmp	r3, r5
 8009fe6:	dc26      	bgt.n	800a036 <_printf_common+0x96>
 8009fe8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009fec:	1e13      	subs	r3, r2, #0
 8009fee:	6822      	ldr	r2, [r4, #0]
 8009ff0:	bf18      	it	ne
 8009ff2:	2301      	movne	r3, #1
 8009ff4:	0692      	lsls	r2, r2, #26
 8009ff6:	d42b      	bmi.n	800a050 <_printf_common+0xb0>
 8009ff8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009ffc:	4649      	mov	r1, r9
 8009ffe:	4638      	mov	r0, r7
 800a000:	47c0      	blx	r8
 800a002:	3001      	adds	r0, #1
 800a004:	d01e      	beq.n	800a044 <_printf_common+0xa4>
 800a006:	6823      	ldr	r3, [r4, #0]
 800a008:	68e5      	ldr	r5, [r4, #12]
 800a00a:	6832      	ldr	r2, [r6, #0]
 800a00c:	f003 0306 	and.w	r3, r3, #6
 800a010:	2b04      	cmp	r3, #4
 800a012:	bf08      	it	eq
 800a014:	1aad      	subeq	r5, r5, r2
 800a016:	68a3      	ldr	r3, [r4, #8]
 800a018:	6922      	ldr	r2, [r4, #16]
 800a01a:	bf0c      	ite	eq
 800a01c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a020:	2500      	movne	r5, #0
 800a022:	4293      	cmp	r3, r2
 800a024:	bfc4      	itt	gt
 800a026:	1a9b      	subgt	r3, r3, r2
 800a028:	18ed      	addgt	r5, r5, r3
 800a02a:	2600      	movs	r6, #0
 800a02c:	341a      	adds	r4, #26
 800a02e:	42b5      	cmp	r5, r6
 800a030:	d11a      	bne.n	800a068 <_printf_common+0xc8>
 800a032:	2000      	movs	r0, #0
 800a034:	e008      	b.n	800a048 <_printf_common+0xa8>
 800a036:	2301      	movs	r3, #1
 800a038:	4652      	mov	r2, sl
 800a03a:	4649      	mov	r1, r9
 800a03c:	4638      	mov	r0, r7
 800a03e:	47c0      	blx	r8
 800a040:	3001      	adds	r0, #1
 800a042:	d103      	bne.n	800a04c <_printf_common+0xac>
 800a044:	f04f 30ff 	mov.w	r0, #4294967295
 800a048:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a04c:	3501      	adds	r5, #1
 800a04e:	e7c6      	b.n	8009fde <_printf_common+0x3e>
 800a050:	18e1      	adds	r1, r4, r3
 800a052:	1c5a      	adds	r2, r3, #1
 800a054:	2030      	movs	r0, #48	; 0x30
 800a056:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a05a:	4422      	add	r2, r4
 800a05c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a060:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a064:	3302      	adds	r3, #2
 800a066:	e7c7      	b.n	8009ff8 <_printf_common+0x58>
 800a068:	2301      	movs	r3, #1
 800a06a:	4622      	mov	r2, r4
 800a06c:	4649      	mov	r1, r9
 800a06e:	4638      	mov	r0, r7
 800a070:	47c0      	blx	r8
 800a072:	3001      	adds	r0, #1
 800a074:	d0e6      	beq.n	800a044 <_printf_common+0xa4>
 800a076:	3601      	adds	r6, #1
 800a078:	e7d9      	b.n	800a02e <_printf_common+0x8e>
	...

0800a07c <_printf_i>:
 800a07c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a080:	7e0f      	ldrb	r7, [r1, #24]
 800a082:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a084:	2f78      	cmp	r7, #120	; 0x78
 800a086:	4691      	mov	r9, r2
 800a088:	4680      	mov	r8, r0
 800a08a:	460c      	mov	r4, r1
 800a08c:	469a      	mov	sl, r3
 800a08e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a092:	d807      	bhi.n	800a0a4 <_printf_i+0x28>
 800a094:	2f62      	cmp	r7, #98	; 0x62
 800a096:	d80a      	bhi.n	800a0ae <_printf_i+0x32>
 800a098:	2f00      	cmp	r7, #0
 800a09a:	f000 80d8 	beq.w	800a24e <_printf_i+0x1d2>
 800a09e:	2f58      	cmp	r7, #88	; 0x58
 800a0a0:	f000 80a3 	beq.w	800a1ea <_printf_i+0x16e>
 800a0a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a0a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a0ac:	e03a      	b.n	800a124 <_printf_i+0xa8>
 800a0ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a0b2:	2b15      	cmp	r3, #21
 800a0b4:	d8f6      	bhi.n	800a0a4 <_printf_i+0x28>
 800a0b6:	a101      	add	r1, pc, #4	; (adr r1, 800a0bc <_printf_i+0x40>)
 800a0b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a0bc:	0800a115 	.word	0x0800a115
 800a0c0:	0800a129 	.word	0x0800a129
 800a0c4:	0800a0a5 	.word	0x0800a0a5
 800a0c8:	0800a0a5 	.word	0x0800a0a5
 800a0cc:	0800a0a5 	.word	0x0800a0a5
 800a0d0:	0800a0a5 	.word	0x0800a0a5
 800a0d4:	0800a129 	.word	0x0800a129
 800a0d8:	0800a0a5 	.word	0x0800a0a5
 800a0dc:	0800a0a5 	.word	0x0800a0a5
 800a0e0:	0800a0a5 	.word	0x0800a0a5
 800a0e4:	0800a0a5 	.word	0x0800a0a5
 800a0e8:	0800a235 	.word	0x0800a235
 800a0ec:	0800a159 	.word	0x0800a159
 800a0f0:	0800a217 	.word	0x0800a217
 800a0f4:	0800a0a5 	.word	0x0800a0a5
 800a0f8:	0800a0a5 	.word	0x0800a0a5
 800a0fc:	0800a257 	.word	0x0800a257
 800a100:	0800a0a5 	.word	0x0800a0a5
 800a104:	0800a159 	.word	0x0800a159
 800a108:	0800a0a5 	.word	0x0800a0a5
 800a10c:	0800a0a5 	.word	0x0800a0a5
 800a110:	0800a21f 	.word	0x0800a21f
 800a114:	682b      	ldr	r3, [r5, #0]
 800a116:	1d1a      	adds	r2, r3, #4
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	602a      	str	r2, [r5, #0]
 800a11c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a120:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a124:	2301      	movs	r3, #1
 800a126:	e0a3      	b.n	800a270 <_printf_i+0x1f4>
 800a128:	6820      	ldr	r0, [r4, #0]
 800a12a:	6829      	ldr	r1, [r5, #0]
 800a12c:	0606      	lsls	r6, r0, #24
 800a12e:	f101 0304 	add.w	r3, r1, #4
 800a132:	d50a      	bpl.n	800a14a <_printf_i+0xce>
 800a134:	680e      	ldr	r6, [r1, #0]
 800a136:	602b      	str	r3, [r5, #0]
 800a138:	2e00      	cmp	r6, #0
 800a13a:	da03      	bge.n	800a144 <_printf_i+0xc8>
 800a13c:	232d      	movs	r3, #45	; 0x2d
 800a13e:	4276      	negs	r6, r6
 800a140:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a144:	485e      	ldr	r0, [pc, #376]	; (800a2c0 <_printf_i+0x244>)
 800a146:	230a      	movs	r3, #10
 800a148:	e019      	b.n	800a17e <_printf_i+0x102>
 800a14a:	680e      	ldr	r6, [r1, #0]
 800a14c:	602b      	str	r3, [r5, #0]
 800a14e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a152:	bf18      	it	ne
 800a154:	b236      	sxthne	r6, r6
 800a156:	e7ef      	b.n	800a138 <_printf_i+0xbc>
 800a158:	682b      	ldr	r3, [r5, #0]
 800a15a:	6820      	ldr	r0, [r4, #0]
 800a15c:	1d19      	adds	r1, r3, #4
 800a15e:	6029      	str	r1, [r5, #0]
 800a160:	0601      	lsls	r1, r0, #24
 800a162:	d501      	bpl.n	800a168 <_printf_i+0xec>
 800a164:	681e      	ldr	r6, [r3, #0]
 800a166:	e002      	b.n	800a16e <_printf_i+0xf2>
 800a168:	0646      	lsls	r6, r0, #25
 800a16a:	d5fb      	bpl.n	800a164 <_printf_i+0xe8>
 800a16c:	881e      	ldrh	r6, [r3, #0]
 800a16e:	4854      	ldr	r0, [pc, #336]	; (800a2c0 <_printf_i+0x244>)
 800a170:	2f6f      	cmp	r7, #111	; 0x6f
 800a172:	bf0c      	ite	eq
 800a174:	2308      	moveq	r3, #8
 800a176:	230a      	movne	r3, #10
 800a178:	2100      	movs	r1, #0
 800a17a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a17e:	6865      	ldr	r5, [r4, #4]
 800a180:	60a5      	str	r5, [r4, #8]
 800a182:	2d00      	cmp	r5, #0
 800a184:	bfa2      	ittt	ge
 800a186:	6821      	ldrge	r1, [r4, #0]
 800a188:	f021 0104 	bicge.w	r1, r1, #4
 800a18c:	6021      	strge	r1, [r4, #0]
 800a18e:	b90e      	cbnz	r6, 800a194 <_printf_i+0x118>
 800a190:	2d00      	cmp	r5, #0
 800a192:	d04d      	beq.n	800a230 <_printf_i+0x1b4>
 800a194:	4615      	mov	r5, r2
 800a196:	fbb6 f1f3 	udiv	r1, r6, r3
 800a19a:	fb03 6711 	mls	r7, r3, r1, r6
 800a19e:	5dc7      	ldrb	r7, [r0, r7]
 800a1a0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a1a4:	4637      	mov	r7, r6
 800a1a6:	42bb      	cmp	r3, r7
 800a1a8:	460e      	mov	r6, r1
 800a1aa:	d9f4      	bls.n	800a196 <_printf_i+0x11a>
 800a1ac:	2b08      	cmp	r3, #8
 800a1ae:	d10b      	bne.n	800a1c8 <_printf_i+0x14c>
 800a1b0:	6823      	ldr	r3, [r4, #0]
 800a1b2:	07de      	lsls	r6, r3, #31
 800a1b4:	d508      	bpl.n	800a1c8 <_printf_i+0x14c>
 800a1b6:	6923      	ldr	r3, [r4, #16]
 800a1b8:	6861      	ldr	r1, [r4, #4]
 800a1ba:	4299      	cmp	r1, r3
 800a1bc:	bfde      	ittt	le
 800a1be:	2330      	movle	r3, #48	; 0x30
 800a1c0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a1c4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a1c8:	1b52      	subs	r2, r2, r5
 800a1ca:	6122      	str	r2, [r4, #16]
 800a1cc:	f8cd a000 	str.w	sl, [sp]
 800a1d0:	464b      	mov	r3, r9
 800a1d2:	aa03      	add	r2, sp, #12
 800a1d4:	4621      	mov	r1, r4
 800a1d6:	4640      	mov	r0, r8
 800a1d8:	f7ff fee2 	bl	8009fa0 <_printf_common>
 800a1dc:	3001      	adds	r0, #1
 800a1de:	d14c      	bne.n	800a27a <_printf_i+0x1fe>
 800a1e0:	f04f 30ff 	mov.w	r0, #4294967295
 800a1e4:	b004      	add	sp, #16
 800a1e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1ea:	4835      	ldr	r0, [pc, #212]	; (800a2c0 <_printf_i+0x244>)
 800a1ec:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a1f0:	6829      	ldr	r1, [r5, #0]
 800a1f2:	6823      	ldr	r3, [r4, #0]
 800a1f4:	f851 6b04 	ldr.w	r6, [r1], #4
 800a1f8:	6029      	str	r1, [r5, #0]
 800a1fa:	061d      	lsls	r5, r3, #24
 800a1fc:	d514      	bpl.n	800a228 <_printf_i+0x1ac>
 800a1fe:	07df      	lsls	r7, r3, #31
 800a200:	bf44      	itt	mi
 800a202:	f043 0320 	orrmi.w	r3, r3, #32
 800a206:	6023      	strmi	r3, [r4, #0]
 800a208:	b91e      	cbnz	r6, 800a212 <_printf_i+0x196>
 800a20a:	6823      	ldr	r3, [r4, #0]
 800a20c:	f023 0320 	bic.w	r3, r3, #32
 800a210:	6023      	str	r3, [r4, #0]
 800a212:	2310      	movs	r3, #16
 800a214:	e7b0      	b.n	800a178 <_printf_i+0xfc>
 800a216:	6823      	ldr	r3, [r4, #0]
 800a218:	f043 0320 	orr.w	r3, r3, #32
 800a21c:	6023      	str	r3, [r4, #0]
 800a21e:	2378      	movs	r3, #120	; 0x78
 800a220:	4828      	ldr	r0, [pc, #160]	; (800a2c4 <_printf_i+0x248>)
 800a222:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a226:	e7e3      	b.n	800a1f0 <_printf_i+0x174>
 800a228:	0659      	lsls	r1, r3, #25
 800a22a:	bf48      	it	mi
 800a22c:	b2b6      	uxthmi	r6, r6
 800a22e:	e7e6      	b.n	800a1fe <_printf_i+0x182>
 800a230:	4615      	mov	r5, r2
 800a232:	e7bb      	b.n	800a1ac <_printf_i+0x130>
 800a234:	682b      	ldr	r3, [r5, #0]
 800a236:	6826      	ldr	r6, [r4, #0]
 800a238:	6961      	ldr	r1, [r4, #20]
 800a23a:	1d18      	adds	r0, r3, #4
 800a23c:	6028      	str	r0, [r5, #0]
 800a23e:	0635      	lsls	r5, r6, #24
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	d501      	bpl.n	800a248 <_printf_i+0x1cc>
 800a244:	6019      	str	r1, [r3, #0]
 800a246:	e002      	b.n	800a24e <_printf_i+0x1d2>
 800a248:	0670      	lsls	r0, r6, #25
 800a24a:	d5fb      	bpl.n	800a244 <_printf_i+0x1c8>
 800a24c:	8019      	strh	r1, [r3, #0]
 800a24e:	2300      	movs	r3, #0
 800a250:	6123      	str	r3, [r4, #16]
 800a252:	4615      	mov	r5, r2
 800a254:	e7ba      	b.n	800a1cc <_printf_i+0x150>
 800a256:	682b      	ldr	r3, [r5, #0]
 800a258:	1d1a      	adds	r2, r3, #4
 800a25a:	602a      	str	r2, [r5, #0]
 800a25c:	681d      	ldr	r5, [r3, #0]
 800a25e:	6862      	ldr	r2, [r4, #4]
 800a260:	2100      	movs	r1, #0
 800a262:	4628      	mov	r0, r5
 800a264:	f7f5 ffc4 	bl	80001f0 <memchr>
 800a268:	b108      	cbz	r0, 800a26e <_printf_i+0x1f2>
 800a26a:	1b40      	subs	r0, r0, r5
 800a26c:	6060      	str	r0, [r4, #4]
 800a26e:	6863      	ldr	r3, [r4, #4]
 800a270:	6123      	str	r3, [r4, #16]
 800a272:	2300      	movs	r3, #0
 800a274:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a278:	e7a8      	b.n	800a1cc <_printf_i+0x150>
 800a27a:	6923      	ldr	r3, [r4, #16]
 800a27c:	462a      	mov	r2, r5
 800a27e:	4649      	mov	r1, r9
 800a280:	4640      	mov	r0, r8
 800a282:	47d0      	blx	sl
 800a284:	3001      	adds	r0, #1
 800a286:	d0ab      	beq.n	800a1e0 <_printf_i+0x164>
 800a288:	6823      	ldr	r3, [r4, #0]
 800a28a:	079b      	lsls	r3, r3, #30
 800a28c:	d413      	bmi.n	800a2b6 <_printf_i+0x23a>
 800a28e:	68e0      	ldr	r0, [r4, #12]
 800a290:	9b03      	ldr	r3, [sp, #12]
 800a292:	4298      	cmp	r0, r3
 800a294:	bfb8      	it	lt
 800a296:	4618      	movlt	r0, r3
 800a298:	e7a4      	b.n	800a1e4 <_printf_i+0x168>
 800a29a:	2301      	movs	r3, #1
 800a29c:	4632      	mov	r2, r6
 800a29e:	4649      	mov	r1, r9
 800a2a0:	4640      	mov	r0, r8
 800a2a2:	47d0      	blx	sl
 800a2a4:	3001      	adds	r0, #1
 800a2a6:	d09b      	beq.n	800a1e0 <_printf_i+0x164>
 800a2a8:	3501      	adds	r5, #1
 800a2aa:	68e3      	ldr	r3, [r4, #12]
 800a2ac:	9903      	ldr	r1, [sp, #12]
 800a2ae:	1a5b      	subs	r3, r3, r1
 800a2b0:	42ab      	cmp	r3, r5
 800a2b2:	dcf2      	bgt.n	800a29a <_printf_i+0x21e>
 800a2b4:	e7eb      	b.n	800a28e <_printf_i+0x212>
 800a2b6:	2500      	movs	r5, #0
 800a2b8:	f104 0619 	add.w	r6, r4, #25
 800a2bc:	e7f5      	b.n	800a2aa <_printf_i+0x22e>
 800a2be:	bf00      	nop
 800a2c0:	0801552a 	.word	0x0801552a
 800a2c4:	0801553b 	.word	0x0801553b

0800a2c8 <siprintf>:
 800a2c8:	b40e      	push	{r1, r2, r3}
 800a2ca:	b500      	push	{lr}
 800a2cc:	b09c      	sub	sp, #112	; 0x70
 800a2ce:	ab1d      	add	r3, sp, #116	; 0x74
 800a2d0:	9002      	str	r0, [sp, #8]
 800a2d2:	9006      	str	r0, [sp, #24]
 800a2d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a2d8:	4809      	ldr	r0, [pc, #36]	; (800a300 <siprintf+0x38>)
 800a2da:	9107      	str	r1, [sp, #28]
 800a2dc:	9104      	str	r1, [sp, #16]
 800a2de:	4909      	ldr	r1, [pc, #36]	; (800a304 <siprintf+0x3c>)
 800a2e0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2e4:	9105      	str	r1, [sp, #20]
 800a2e6:	6800      	ldr	r0, [r0, #0]
 800a2e8:	9301      	str	r3, [sp, #4]
 800a2ea:	a902      	add	r1, sp, #8
 800a2ec:	f001 fb76 	bl	800b9dc <_svfiprintf_r>
 800a2f0:	9b02      	ldr	r3, [sp, #8]
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	701a      	strb	r2, [r3, #0]
 800a2f6:	b01c      	add	sp, #112	; 0x70
 800a2f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a2fc:	b003      	add	sp, #12
 800a2fe:	4770      	bx	lr
 800a300:	20000028 	.word	0x20000028
 800a304:	ffff0208 	.word	0xffff0208

0800a308 <quorem>:
 800a308:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a30c:	6903      	ldr	r3, [r0, #16]
 800a30e:	690c      	ldr	r4, [r1, #16]
 800a310:	42a3      	cmp	r3, r4
 800a312:	4607      	mov	r7, r0
 800a314:	f2c0 8081 	blt.w	800a41a <quorem+0x112>
 800a318:	3c01      	subs	r4, #1
 800a31a:	f101 0814 	add.w	r8, r1, #20
 800a31e:	f100 0514 	add.w	r5, r0, #20
 800a322:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a326:	9301      	str	r3, [sp, #4]
 800a328:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a32c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a330:	3301      	adds	r3, #1
 800a332:	429a      	cmp	r2, r3
 800a334:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a338:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a33c:	fbb2 f6f3 	udiv	r6, r2, r3
 800a340:	d331      	bcc.n	800a3a6 <quorem+0x9e>
 800a342:	f04f 0e00 	mov.w	lr, #0
 800a346:	4640      	mov	r0, r8
 800a348:	46ac      	mov	ip, r5
 800a34a:	46f2      	mov	sl, lr
 800a34c:	f850 2b04 	ldr.w	r2, [r0], #4
 800a350:	b293      	uxth	r3, r2
 800a352:	fb06 e303 	mla	r3, r6, r3, lr
 800a356:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a35a:	b29b      	uxth	r3, r3
 800a35c:	ebaa 0303 	sub.w	r3, sl, r3
 800a360:	f8dc a000 	ldr.w	sl, [ip]
 800a364:	0c12      	lsrs	r2, r2, #16
 800a366:	fa13 f38a 	uxtah	r3, r3, sl
 800a36a:	fb06 e202 	mla	r2, r6, r2, lr
 800a36e:	9300      	str	r3, [sp, #0]
 800a370:	9b00      	ldr	r3, [sp, #0]
 800a372:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a376:	b292      	uxth	r2, r2
 800a378:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a37c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a380:	f8bd 3000 	ldrh.w	r3, [sp]
 800a384:	4581      	cmp	r9, r0
 800a386:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a38a:	f84c 3b04 	str.w	r3, [ip], #4
 800a38e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a392:	d2db      	bcs.n	800a34c <quorem+0x44>
 800a394:	f855 300b 	ldr.w	r3, [r5, fp]
 800a398:	b92b      	cbnz	r3, 800a3a6 <quorem+0x9e>
 800a39a:	9b01      	ldr	r3, [sp, #4]
 800a39c:	3b04      	subs	r3, #4
 800a39e:	429d      	cmp	r5, r3
 800a3a0:	461a      	mov	r2, r3
 800a3a2:	d32e      	bcc.n	800a402 <quorem+0xfa>
 800a3a4:	613c      	str	r4, [r7, #16]
 800a3a6:	4638      	mov	r0, r7
 800a3a8:	f001 f8c4 	bl	800b534 <__mcmp>
 800a3ac:	2800      	cmp	r0, #0
 800a3ae:	db24      	blt.n	800a3fa <quorem+0xf2>
 800a3b0:	3601      	adds	r6, #1
 800a3b2:	4628      	mov	r0, r5
 800a3b4:	f04f 0c00 	mov.w	ip, #0
 800a3b8:	f858 2b04 	ldr.w	r2, [r8], #4
 800a3bc:	f8d0 e000 	ldr.w	lr, [r0]
 800a3c0:	b293      	uxth	r3, r2
 800a3c2:	ebac 0303 	sub.w	r3, ip, r3
 800a3c6:	0c12      	lsrs	r2, r2, #16
 800a3c8:	fa13 f38e 	uxtah	r3, r3, lr
 800a3cc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a3d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a3d4:	b29b      	uxth	r3, r3
 800a3d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a3da:	45c1      	cmp	r9, r8
 800a3dc:	f840 3b04 	str.w	r3, [r0], #4
 800a3e0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a3e4:	d2e8      	bcs.n	800a3b8 <quorem+0xb0>
 800a3e6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a3ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a3ee:	b922      	cbnz	r2, 800a3fa <quorem+0xf2>
 800a3f0:	3b04      	subs	r3, #4
 800a3f2:	429d      	cmp	r5, r3
 800a3f4:	461a      	mov	r2, r3
 800a3f6:	d30a      	bcc.n	800a40e <quorem+0x106>
 800a3f8:	613c      	str	r4, [r7, #16]
 800a3fa:	4630      	mov	r0, r6
 800a3fc:	b003      	add	sp, #12
 800a3fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a402:	6812      	ldr	r2, [r2, #0]
 800a404:	3b04      	subs	r3, #4
 800a406:	2a00      	cmp	r2, #0
 800a408:	d1cc      	bne.n	800a3a4 <quorem+0x9c>
 800a40a:	3c01      	subs	r4, #1
 800a40c:	e7c7      	b.n	800a39e <quorem+0x96>
 800a40e:	6812      	ldr	r2, [r2, #0]
 800a410:	3b04      	subs	r3, #4
 800a412:	2a00      	cmp	r2, #0
 800a414:	d1f0      	bne.n	800a3f8 <quorem+0xf0>
 800a416:	3c01      	subs	r4, #1
 800a418:	e7eb      	b.n	800a3f2 <quorem+0xea>
 800a41a:	2000      	movs	r0, #0
 800a41c:	e7ee      	b.n	800a3fc <quorem+0xf4>
	...

0800a420 <_dtoa_r>:
 800a420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a424:	ed2d 8b04 	vpush	{d8-d9}
 800a428:	ec57 6b10 	vmov	r6, r7, d0
 800a42c:	b093      	sub	sp, #76	; 0x4c
 800a42e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a430:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a434:	9106      	str	r1, [sp, #24]
 800a436:	ee10 aa10 	vmov	sl, s0
 800a43a:	4604      	mov	r4, r0
 800a43c:	9209      	str	r2, [sp, #36]	; 0x24
 800a43e:	930c      	str	r3, [sp, #48]	; 0x30
 800a440:	46bb      	mov	fp, r7
 800a442:	b975      	cbnz	r5, 800a462 <_dtoa_r+0x42>
 800a444:	2010      	movs	r0, #16
 800a446:	f000 fddd 	bl	800b004 <malloc>
 800a44a:	4602      	mov	r2, r0
 800a44c:	6260      	str	r0, [r4, #36]	; 0x24
 800a44e:	b920      	cbnz	r0, 800a45a <_dtoa_r+0x3a>
 800a450:	4ba7      	ldr	r3, [pc, #668]	; (800a6f0 <_dtoa_r+0x2d0>)
 800a452:	21ea      	movs	r1, #234	; 0xea
 800a454:	48a7      	ldr	r0, [pc, #668]	; (800a6f4 <_dtoa_r+0x2d4>)
 800a456:	f001 fbd1 	bl	800bbfc <__assert_func>
 800a45a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a45e:	6005      	str	r5, [r0, #0]
 800a460:	60c5      	str	r5, [r0, #12]
 800a462:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a464:	6819      	ldr	r1, [r3, #0]
 800a466:	b151      	cbz	r1, 800a47e <_dtoa_r+0x5e>
 800a468:	685a      	ldr	r2, [r3, #4]
 800a46a:	604a      	str	r2, [r1, #4]
 800a46c:	2301      	movs	r3, #1
 800a46e:	4093      	lsls	r3, r2
 800a470:	608b      	str	r3, [r1, #8]
 800a472:	4620      	mov	r0, r4
 800a474:	f000 fe1c 	bl	800b0b0 <_Bfree>
 800a478:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a47a:	2200      	movs	r2, #0
 800a47c:	601a      	str	r2, [r3, #0]
 800a47e:	1e3b      	subs	r3, r7, #0
 800a480:	bfaa      	itet	ge
 800a482:	2300      	movge	r3, #0
 800a484:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a488:	f8c8 3000 	strge.w	r3, [r8]
 800a48c:	4b9a      	ldr	r3, [pc, #616]	; (800a6f8 <_dtoa_r+0x2d8>)
 800a48e:	bfbc      	itt	lt
 800a490:	2201      	movlt	r2, #1
 800a492:	f8c8 2000 	strlt.w	r2, [r8]
 800a496:	ea33 030b 	bics.w	r3, r3, fp
 800a49a:	d11b      	bne.n	800a4d4 <_dtoa_r+0xb4>
 800a49c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a49e:	f242 730f 	movw	r3, #9999	; 0x270f
 800a4a2:	6013      	str	r3, [r2, #0]
 800a4a4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a4a8:	4333      	orrs	r3, r6
 800a4aa:	f000 8592 	beq.w	800afd2 <_dtoa_r+0xbb2>
 800a4ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a4b0:	b963      	cbnz	r3, 800a4cc <_dtoa_r+0xac>
 800a4b2:	4b92      	ldr	r3, [pc, #584]	; (800a6fc <_dtoa_r+0x2dc>)
 800a4b4:	e022      	b.n	800a4fc <_dtoa_r+0xdc>
 800a4b6:	4b92      	ldr	r3, [pc, #584]	; (800a700 <_dtoa_r+0x2e0>)
 800a4b8:	9301      	str	r3, [sp, #4]
 800a4ba:	3308      	adds	r3, #8
 800a4bc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a4be:	6013      	str	r3, [r2, #0]
 800a4c0:	9801      	ldr	r0, [sp, #4]
 800a4c2:	b013      	add	sp, #76	; 0x4c
 800a4c4:	ecbd 8b04 	vpop	{d8-d9}
 800a4c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4cc:	4b8b      	ldr	r3, [pc, #556]	; (800a6fc <_dtoa_r+0x2dc>)
 800a4ce:	9301      	str	r3, [sp, #4]
 800a4d0:	3303      	adds	r3, #3
 800a4d2:	e7f3      	b.n	800a4bc <_dtoa_r+0x9c>
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	4650      	mov	r0, sl
 800a4da:	4659      	mov	r1, fp
 800a4dc:	f7f6 fafc 	bl	8000ad8 <__aeabi_dcmpeq>
 800a4e0:	ec4b ab19 	vmov	d9, sl, fp
 800a4e4:	4680      	mov	r8, r0
 800a4e6:	b158      	cbz	r0, 800a500 <_dtoa_r+0xe0>
 800a4e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a4ea:	2301      	movs	r3, #1
 800a4ec:	6013      	str	r3, [r2, #0]
 800a4ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	f000 856b 	beq.w	800afcc <_dtoa_r+0xbac>
 800a4f6:	4883      	ldr	r0, [pc, #524]	; (800a704 <_dtoa_r+0x2e4>)
 800a4f8:	6018      	str	r0, [r3, #0]
 800a4fa:	1e43      	subs	r3, r0, #1
 800a4fc:	9301      	str	r3, [sp, #4]
 800a4fe:	e7df      	b.n	800a4c0 <_dtoa_r+0xa0>
 800a500:	ec4b ab10 	vmov	d0, sl, fp
 800a504:	aa10      	add	r2, sp, #64	; 0x40
 800a506:	a911      	add	r1, sp, #68	; 0x44
 800a508:	4620      	mov	r0, r4
 800a50a:	f001 f8b9 	bl	800b680 <__d2b>
 800a50e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a512:	ee08 0a10 	vmov	s16, r0
 800a516:	2d00      	cmp	r5, #0
 800a518:	f000 8084 	beq.w	800a624 <_dtoa_r+0x204>
 800a51c:	ee19 3a90 	vmov	r3, s19
 800a520:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a524:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a528:	4656      	mov	r6, sl
 800a52a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a52e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a532:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a536:	4b74      	ldr	r3, [pc, #464]	; (800a708 <_dtoa_r+0x2e8>)
 800a538:	2200      	movs	r2, #0
 800a53a:	4630      	mov	r0, r6
 800a53c:	4639      	mov	r1, r7
 800a53e:	f7f5 feab 	bl	8000298 <__aeabi_dsub>
 800a542:	a365      	add	r3, pc, #404	; (adr r3, 800a6d8 <_dtoa_r+0x2b8>)
 800a544:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a548:	f7f6 f85e 	bl	8000608 <__aeabi_dmul>
 800a54c:	a364      	add	r3, pc, #400	; (adr r3, 800a6e0 <_dtoa_r+0x2c0>)
 800a54e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a552:	f7f5 fea3 	bl	800029c <__adddf3>
 800a556:	4606      	mov	r6, r0
 800a558:	4628      	mov	r0, r5
 800a55a:	460f      	mov	r7, r1
 800a55c:	f7f5 ffea 	bl	8000534 <__aeabi_i2d>
 800a560:	a361      	add	r3, pc, #388	; (adr r3, 800a6e8 <_dtoa_r+0x2c8>)
 800a562:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a566:	f7f6 f84f 	bl	8000608 <__aeabi_dmul>
 800a56a:	4602      	mov	r2, r0
 800a56c:	460b      	mov	r3, r1
 800a56e:	4630      	mov	r0, r6
 800a570:	4639      	mov	r1, r7
 800a572:	f7f5 fe93 	bl	800029c <__adddf3>
 800a576:	4606      	mov	r6, r0
 800a578:	460f      	mov	r7, r1
 800a57a:	f7f6 faf5 	bl	8000b68 <__aeabi_d2iz>
 800a57e:	2200      	movs	r2, #0
 800a580:	9000      	str	r0, [sp, #0]
 800a582:	2300      	movs	r3, #0
 800a584:	4630      	mov	r0, r6
 800a586:	4639      	mov	r1, r7
 800a588:	f7f6 fab0 	bl	8000aec <__aeabi_dcmplt>
 800a58c:	b150      	cbz	r0, 800a5a4 <_dtoa_r+0x184>
 800a58e:	9800      	ldr	r0, [sp, #0]
 800a590:	f7f5 ffd0 	bl	8000534 <__aeabi_i2d>
 800a594:	4632      	mov	r2, r6
 800a596:	463b      	mov	r3, r7
 800a598:	f7f6 fa9e 	bl	8000ad8 <__aeabi_dcmpeq>
 800a59c:	b910      	cbnz	r0, 800a5a4 <_dtoa_r+0x184>
 800a59e:	9b00      	ldr	r3, [sp, #0]
 800a5a0:	3b01      	subs	r3, #1
 800a5a2:	9300      	str	r3, [sp, #0]
 800a5a4:	9b00      	ldr	r3, [sp, #0]
 800a5a6:	2b16      	cmp	r3, #22
 800a5a8:	d85a      	bhi.n	800a660 <_dtoa_r+0x240>
 800a5aa:	9a00      	ldr	r2, [sp, #0]
 800a5ac:	4b57      	ldr	r3, [pc, #348]	; (800a70c <_dtoa_r+0x2ec>)
 800a5ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a5b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5b6:	ec51 0b19 	vmov	r0, r1, d9
 800a5ba:	f7f6 fa97 	bl	8000aec <__aeabi_dcmplt>
 800a5be:	2800      	cmp	r0, #0
 800a5c0:	d050      	beq.n	800a664 <_dtoa_r+0x244>
 800a5c2:	9b00      	ldr	r3, [sp, #0]
 800a5c4:	3b01      	subs	r3, #1
 800a5c6:	9300      	str	r3, [sp, #0]
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	930b      	str	r3, [sp, #44]	; 0x2c
 800a5cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a5ce:	1b5d      	subs	r5, r3, r5
 800a5d0:	1e6b      	subs	r3, r5, #1
 800a5d2:	9305      	str	r3, [sp, #20]
 800a5d4:	bf45      	ittet	mi
 800a5d6:	f1c5 0301 	rsbmi	r3, r5, #1
 800a5da:	9304      	strmi	r3, [sp, #16]
 800a5dc:	2300      	movpl	r3, #0
 800a5de:	2300      	movmi	r3, #0
 800a5e0:	bf4c      	ite	mi
 800a5e2:	9305      	strmi	r3, [sp, #20]
 800a5e4:	9304      	strpl	r3, [sp, #16]
 800a5e6:	9b00      	ldr	r3, [sp, #0]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	db3d      	blt.n	800a668 <_dtoa_r+0x248>
 800a5ec:	9b05      	ldr	r3, [sp, #20]
 800a5ee:	9a00      	ldr	r2, [sp, #0]
 800a5f0:	920a      	str	r2, [sp, #40]	; 0x28
 800a5f2:	4413      	add	r3, r2
 800a5f4:	9305      	str	r3, [sp, #20]
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	9307      	str	r3, [sp, #28]
 800a5fa:	9b06      	ldr	r3, [sp, #24]
 800a5fc:	2b09      	cmp	r3, #9
 800a5fe:	f200 8089 	bhi.w	800a714 <_dtoa_r+0x2f4>
 800a602:	2b05      	cmp	r3, #5
 800a604:	bfc4      	itt	gt
 800a606:	3b04      	subgt	r3, #4
 800a608:	9306      	strgt	r3, [sp, #24]
 800a60a:	9b06      	ldr	r3, [sp, #24]
 800a60c:	f1a3 0302 	sub.w	r3, r3, #2
 800a610:	bfcc      	ite	gt
 800a612:	2500      	movgt	r5, #0
 800a614:	2501      	movle	r5, #1
 800a616:	2b03      	cmp	r3, #3
 800a618:	f200 8087 	bhi.w	800a72a <_dtoa_r+0x30a>
 800a61c:	e8df f003 	tbb	[pc, r3]
 800a620:	59383a2d 	.word	0x59383a2d
 800a624:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a628:	441d      	add	r5, r3
 800a62a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a62e:	2b20      	cmp	r3, #32
 800a630:	bfc1      	itttt	gt
 800a632:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a636:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a63a:	fa0b f303 	lslgt.w	r3, fp, r3
 800a63e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a642:	bfda      	itte	le
 800a644:	f1c3 0320 	rsble	r3, r3, #32
 800a648:	fa06 f003 	lslle.w	r0, r6, r3
 800a64c:	4318      	orrgt	r0, r3
 800a64e:	f7f5 ff61 	bl	8000514 <__aeabi_ui2d>
 800a652:	2301      	movs	r3, #1
 800a654:	4606      	mov	r6, r0
 800a656:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a65a:	3d01      	subs	r5, #1
 800a65c:	930e      	str	r3, [sp, #56]	; 0x38
 800a65e:	e76a      	b.n	800a536 <_dtoa_r+0x116>
 800a660:	2301      	movs	r3, #1
 800a662:	e7b2      	b.n	800a5ca <_dtoa_r+0x1aa>
 800a664:	900b      	str	r0, [sp, #44]	; 0x2c
 800a666:	e7b1      	b.n	800a5cc <_dtoa_r+0x1ac>
 800a668:	9b04      	ldr	r3, [sp, #16]
 800a66a:	9a00      	ldr	r2, [sp, #0]
 800a66c:	1a9b      	subs	r3, r3, r2
 800a66e:	9304      	str	r3, [sp, #16]
 800a670:	4253      	negs	r3, r2
 800a672:	9307      	str	r3, [sp, #28]
 800a674:	2300      	movs	r3, #0
 800a676:	930a      	str	r3, [sp, #40]	; 0x28
 800a678:	e7bf      	b.n	800a5fa <_dtoa_r+0x1da>
 800a67a:	2300      	movs	r3, #0
 800a67c:	9308      	str	r3, [sp, #32]
 800a67e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a680:	2b00      	cmp	r3, #0
 800a682:	dc55      	bgt.n	800a730 <_dtoa_r+0x310>
 800a684:	2301      	movs	r3, #1
 800a686:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a68a:	461a      	mov	r2, r3
 800a68c:	9209      	str	r2, [sp, #36]	; 0x24
 800a68e:	e00c      	b.n	800a6aa <_dtoa_r+0x28a>
 800a690:	2301      	movs	r3, #1
 800a692:	e7f3      	b.n	800a67c <_dtoa_r+0x25c>
 800a694:	2300      	movs	r3, #0
 800a696:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a698:	9308      	str	r3, [sp, #32]
 800a69a:	9b00      	ldr	r3, [sp, #0]
 800a69c:	4413      	add	r3, r2
 800a69e:	9302      	str	r3, [sp, #8]
 800a6a0:	3301      	adds	r3, #1
 800a6a2:	2b01      	cmp	r3, #1
 800a6a4:	9303      	str	r3, [sp, #12]
 800a6a6:	bfb8      	it	lt
 800a6a8:	2301      	movlt	r3, #1
 800a6aa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	6042      	str	r2, [r0, #4]
 800a6b0:	2204      	movs	r2, #4
 800a6b2:	f102 0614 	add.w	r6, r2, #20
 800a6b6:	429e      	cmp	r6, r3
 800a6b8:	6841      	ldr	r1, [r0, #4]
 800a6ba:	d93d      	bls.n	800a738 <_dtoa_r+0x318>
 800a6bc:	4620      	mov	r0, r4
 800a6be:	f000 fcb7 	bl	800b030 <_Balloc>
 800a6c2:	9001      	str	r0, [sp, #4]
 800a6c4:	2800      	cmp	r0, #0
 800a6c6:	d13b      	bne.n	800a740 <_dtoa_r+0x320>
 800a6c8:	4b11      	ldr	r3, [pc, #68]	; (800a710 <_dtoa_r+0x2f0>)
 800a6ca:	4602      	mov	r2, r0
 800a6cc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a6d0:	e6c0      	b.n	800a454 <_dtoa_r+0x34>
 800a6d2:	2301      	movs	r3, #1
 800a6d4:	e7df      	b.n	800a696 <_dtoa_r+0x276>
 800a6d6:	bf00      	nop
 800a6d8:	636f4361 	.word	0x636f4361
 800a6dc:	3fd287a7 	.word	0x3fd287a7
 800a6e0:	8b60c8b3 	.word	0x8b60c8b3
 800a6e4:	3fc68a28 	.word	0x3fc68a28
 800a6e8:	509f79fb 	.word	0x509f79fb
 800a6ec:	3fd34413 	.word	0x3fd34413
 800a6f0:	08015559 	.word	0x08015559
 800a6f4:	08015570 	.word	0x08015570
 800a6f8:	7ff00000 	.word	0x7ff00000
 800a6fc:	08015555 	.word	0x08015555
 800a700:	0801554c 	.word	0x0801554c
 800a704:	08015529 	.word	0x08015529
 800a708:	3ff80000 	.word	0x3ff80000
 800a70c:	08015660 	.word	0x08015660
 800a710:	080155cb 	.word	0x080155cb
 800a714:	2501      	movs	r5, #1
 800a716:	2300      	movs	r3, #0
 800a718:	9306      	str	r3, [sp, #24]
 800a71a:	9508      	str	r5, [sp, #32]
 800a71c:	f04f 33ff 	mov.w	r3, #4294967295
 800a720:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a724:	2200      	movs	r2, #0
 800a726:	2312      	movs	r3, #18
 800a728:	e7b0      	b.n	800a68c <_dtoa_r+0x26c>
 800a72a:	2301      	movs	r3, #1
 800a72c:	9308      	str	r3, [sp, #32]
 800a72e:	e7f5      	b.n	800a71c <_dtoa_r+0x2fc>
 800a730:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a732:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a736:	e7b8      	b.n	800a6aa <_dtoa_r+0x28a>
 800a738:	3101      	adds	r1, #1
 800a73a:	6041      	str	r1, [r0, #4]
 800a73c:	0052      	lsls	r2, r2, #1
 800a73e:	e7b8      	b.n	800a6b2 <_dtoa_r+0x292>
 800a740:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a742:	9a01      	ldr	r2, [sp, #4]
 800a744:	601a      	str	r2, [r3, #0]
 800a746:	9b03      	ldr	r3, [sp, #12]
 800a748:	2b0e      	cmp	r3, #14
 800a74a:	f200 809d 	bhi.w	800a888 <_dtoa_r+0x468>
 800a74e:	2d00      	cmp	r5, #0
 800a750:	f000 809a 	beq.w	800a888 <_dtoa_r+0x468>
 800a754:	9b00      	ldr	r3, [sp, #0]
 800a756:	2b00      	cmp	r3, #0
 800a758:	dd32      	ble.n	800a7c0 <_dtoa_r+0x3a0>
 800a75a:	4ab7      	ldr	r2, [pc, #732]	; (800aa38 <_dtoa_r+0x618>)
 800a75c:	f003 030f 	and.w	r3, r3, #15
 800a760:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a764:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a768:	9b00      	ldr	r3, [sp, #0]
 800a76a:	05d8      	lsls	r0, r3, #23
 800a76c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a770:	d516      	bpl.n	800a7a0 <_dtoa_r+0x380>
 800a772:	4bb2      	ldr	r3, [pc, #712]	; (800aa3c <_dtoa_r+0x61c>)
 800a774:	ec51 0b19 	vmov	r0, r1, d9
 800a778:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a77c:	f7f6 f86e 	bl	800085c <__aeabi_ddiv>
 800a780:	f007 070f 	and.w	r7, r7, #15
 800a784:	4682      	mov	sl, r0
 800a786:	468b      	mov	fp, r1
 800a788:	2503      	movs	r5, #3
 800a78a:	4eac      	ldr	r6, [pc, #688]	; (800aa3c <_dtoa_r+0x61c>)
 800a78c:	b957      	cbnz	r7, 800a7a4 <_dtoa_r+0x384>
 800a78e:	4642      	mov	r2, r8
 800a790:	464b      	mov	r3, r9
 800a792:	4650      	mov	r0, sl
 800a794:	4659      	mov	r1, fp
 800a796:	f7f6 f861 	bl	800085c <__aeabi_ddiv>
 800a79a:	4682      	mov	sl, r0
 800a79c:	468b      	mov	fp, r1
 800a79e:	e028      	b.n	800a7f2 <_dtoa_r+0x3d2>
 800a7a0:	2502      	movs	r5, #2
 800a7a2:	e7f2      	b.n	800a78a <_dtoa_r+0x36a>
 800a7a4:	07f9      	lsls	r1, r7, #31
 800a7a6:	d508      	bpl.n	800a7ba <_dtoa_r+0x39a>
 800a7a8:	4640      	mov	r0, r8
 800a7aa:	4649      	mov	r1, r9
 800a7ac:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a7b0:	f7f5 ff2a 	bl	8000608 <__aeabi_dmul>
 800a7b4:	3501      	adds	r5, #1
 800a7b6:	4680      	mov	r8, r0
 800a7b8:	4689      	mov	r9, r1
 800a7ba:	107f      	asrs	r7, r7, #1
 800a7bc:	3608      	adds	r6, #8
 800a7be:	e7e5      	b.n	800a78c <_dtoa_r+0x36c>
 800a7c0:	f000 809b 	beq.w	800a8fa <_dtoa_r+0x4da>
 800a7c4:	9b00      	ldr	r3, [sp, #0]
 800a7c6:	4f9d      	ldr	r7, [pc, #628]	; (800aa3c <_dtoa_r+0x61c>)
 800a7c8:	425e      	negs	r6, r3
 800a7ca:	4b9b      	ldr	r3, [pc, #620]	; (800aa38 <_dtoa_r+0x618>)
 800a7cc:	f006 020f 	and.w	r2, r6, #15
 800a7d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a7d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7d8:	ec51 0b19 	vmov	r0, r1, d9
 800a7dc:	f7f5 ff14 	bl	8000608 <__aeabi_dmul>
 800a7e0:	1136      	asrs	r6, r6, #4
 800a7e2:	4682      	mov	sl, r0
 800a7e4:	468b      	mov	fp, r1
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	2502      	movs	r5, #2
 800a7ea:	2e00      	cmp	r6, #0
 800a7ec:	d17a      	bne.n	800a8e4 <_dtoa_r+0x4c4>
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d1d3      	bne.n	800a79a <_dtoa_r+0x37a>
 800a7f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	f000 8082 	beq.w	800a8fe <_dtoa_r+0x4de>
 800a7fa:	4b91      	ldr	r3, [pc, #580]	; (800aa40 <_dtoa_r+0x620>)
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	4650      	mov	r0, sl
 800a800:	4659      	mov	r1, fp
 800a802:	f7f6 f973 	bl	8000aec <__aeabi_dcmplt>
 800a806:	2800      	cmp	r0, #0
 800a808:	d079      	beq.n	800a8fe <_dtoa_r+0x4de>
 800a80a:	9b03      	ldr	r3, [sp, #12]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d076      	beq.n	800a8fe <_dtoa_r+0x4de>
 800a810:	9b02      	ldr	r3, [sp, #8]
 800a812:	2b00      	cmp	r3, #0
 800a814:	dd36      	ble.n	800a884 <_dtoa_r+0x464>
 800a816:	9b00      	ldr	r3, [sp, #0]
 800a818:	4650      	mov	r0, sl
 800a81a:	4659      	mov	r1, fp
 800a81c:	1e5f      	subs	r7, r3, #1
 800a81e:	2200      	movs	r2, #0
 800a820:	4b88      	ldr	r3, [pc, #544]	; (800aa44 <_dtoa_r+0x624>)
 800a822:	f7f5 fef1 	bl	8000608 <__aeabi_dmul>
 800a826:	9e02      	ldr	r6, [sp, #8]
 800a828:	4682      	mov	sl, r0
 800a82a:	468b      	mov	fp, r1
 800a82c:	3501      	adds	r5, #1
 800a82e:	4628      	mov	r0, r5
 800a830:	f7f5 fe80 	bl	8000534 <__aeabi_i2d>
 800a834:	4652      	mov	r2, sl
 800a836:	465b      	mov	r3, fp
 800a838:	f7f5 fee6 	bl	8000608 <__aeabi_dmul>
 800a83c:	4b82      	ldr	r3, [pc, #520]	; (800aa48 <_dtoa_r+0x628>)
 800a83e:	2200      	movs	r2, #0
 800a840:	f7f5 fd2c 	bl	800029c <__adddf3>
 800a844:	46d0      	mov	r8, sl
 800a846:	46d9      	mov	r9, fp
 800a848:	4682      	mov	sl, r0
 800a84a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a84e:	2e00      	cmp	r6, #0
 800a850:	d158      	bne.n	800a904 <_dtoa_r+0x4e4>
 800a852:	4b7e      	ldr	r3, [pc, #504]	; (800aa4c <_dtoa_r+0x62c>)
 800a854:	2200      	movs	r2, #0
 800a856:	4640      	mov	r0, r8
 800a858:	4649      	mov	r1, r9
 800a85a:	f7f5 fd1d 	bl	8000298 <__aeabi_dsub>
 800a85e:	4652      	mov	r2, sl
 800a860:	465b      	mov	r3, fp
 800a862:	4680      	mov	r8, r0
 800a864:	4689      	mov	r9, r1
 800a866:	f7f6 f95f 	bl	8000b28 <__aeabi_dcmpgt>
 800a86a:	2800      	cmp	r0, #0
 800a86c:	f040 8295 	bne.w	800ad9a <_dtoa_r+0x97a>
 800a870:	4652      	mov	r2, sl
 800a872:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a876:	4640      	mov	r0, r8
 800a878:	4649      	mov	r1, r9
 800a87a:	f7f6 f937 	bl	8000aec <__aeabi_dcmplt>
 800a87e:	2800      	cmp	r0, #0
 800a880:	f040 8289 	bne.w	800ad96 <_dtoa_r+0x976>
 800a884:	ec5b ab19 	vmov	sl, fp, d9
 800a888:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	f2c0 8148 	blt.w	800ab20 <_dtoa_r+0x700>
 800a890:	9a00      	ldr	r2, [sp, #0]
 800a892:	2a0e      	cmp	r2, #14
 800a894:	f300 8144 	bgt.w	800ab20 <_dtoa_r+0x700>
 800a898:	4b67      	ldr	r3, [pc, #412]	; (800aa38 <_dtoa_r+0x618>)
 800a89a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a89e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a8a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	f280 80d5 	bge.w	800aa54 <_dtoa_r+0x634>
 800a8aa:	9b03      	ldr	r3, [sp, #12]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	f300 80d1 	bgt.w	800aa54 <_dtoa_r+0x634>
 800a8b2:	f040 826f 	bne.w	800ad94 <_dtoa_r+0x974>
 800a8b6:	4b65      	ldr	r3, [pc, #404]	; (800aa4c <_dtoa_r+0x62c>)
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	4640      	mov	r0, r8
 800a8bc:	4649      	mov	r1, r9
 800a8be:	f7f5 fea3 	bl	8000608 <__aeabi_dmul>
 800a8c2:	4652      	mov	r2, sl
 800a8c4:	465b      	mov	r3, fp
 800a8c6:	f7f6 f925 	bl	8000b14 <__aeabi_dcmpge>
 800a8ca:	9e03      	ldr	r6, [sp, #12]
 800a8cc:	4637      	mov	r7, r6
 800a8ce:	2800      	cmp	r0, #0
 800a8d0:	f040 8245 	bne.w	800ad5e <_dtoa_r+0x93e>
 800a8d4:	9d01      	ldr	r5, [sp, #4]
 800a8d6:	2331      	movs	r3, #49	; 0x31
 800a8d8:	f805 3b01 	strb.w	r3, [r5], #1
 800a8dc:	9b00      	ldr	r3, [sp, #0]
 800a8de:	3301      	adds	r3, #1
 800a8e0:	9300      	str	r3, [sp, #0]
 800a8e2:	e240      	b.n	800ad66 <_dtoa_r+0x946>
 800a8e4:	07f2      	lsls	r2, r6, #31
 800a8e6:	d505      	bpl.n	800a8f4 <_dtoa_r+0x4d4>
 800a8e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a8ec:	f7f5 fe8c 	bl	8000608 <__aeabi_dmul>
 800a8f0:	3501      	adds	r5, #1
 800a8f2:	2301      	movs	r3, #1
 800a8f4:	1076      	asrs	r6, r6, #1
 800a8f6:	3708      	adds	r7, #8
 800a8f8:	e777      	b.n	800a7ea <_dtoa_r+0x3ca>
 800a8fa:	2502      	movs	r5, #2
 800a8fc:	e779      	b.n	800a7f2 <_dtoa_r+0x3d2>
 800a8fe:	9f00      	ldr	r7, [sp, #0]
 800a900:	9e03      	ldr	r6, [sp, #12]
 800a902:	e794      	b.n	800a82e <_dtoa_r+0x40e>
 800a904:	9901      	ldr	r1, [sp, #4]
 800a906:	4b4c      	ldr	r3, [pc, #304]	; (800aa38 <_dtoa_r+0x618>)
 800a908:	4431      	add	r1, r6
 800a90a:	910d      	str	r1, [sp, #52]	; 0x34
 800a90c:	9908      	ldr	r1, [sp, #32]
 800a90e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a912:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a916:	2900      	cmp	r1, #0
 800a918:	d043      	beq.n	800a9a2 <_dtoa_r+0x582>
 800a91a:	494d      	ldr	r1, [pc, #308]	; (800aa50 <_dtoa_r+0x630>)
 800a91c:	2000      	movs	r0, #0
 800a91e:	f7f5 ff9d 	bl	800085c <__aeabi_ddiv>
 800a922:	4652      	mov	r2, sl
 800a924:	465b      	mov	r3, fp
 800a926:	f7f5 fcb7 	bl	8000298 <__aeabi_dsub>
 800a92a:	9d01      	ldr	r5, [sp, #4]
 800a92c:	4682      	mov	sl, r0
 800a92e:	468b      	mov	fp, r1
 800a930:	4649      	mov	r1, r9
 800a932:	4640      	mov	r0, r8
 800a934:	f7f6 f918 	bl	8000b68 <__aeabi_d2iz>
 800a938:	4606      	mov	r6, r0
 800a93a:	f7f5 fdfb 	bl	8000534 <__aeabi_i2d>
 800a93e:	4602      	mov	r2, r0
 800a940:	460b      	mov	r3, r1
 800a942:	4640      	mov	r0, r8
 800a944:	4649      	mov	r1, r9
 800a946:	f7f5 fca7 	bl	8000298 <__aeabi_dsub>
 800a94a:	3630      	adds	r6, #48	; 0x30
 800a94c:	f805 6b01 	strb.w	r6, [r5], #1
 800a950:	4652      	mov	r2, sl
 800a952:	465b      	mov	r3, fp
 800a954:	4680      	mov	r8, r0
 800a956:	4689      	mov	r9, r1
 800a958:	f7f6 f8c8 	bl	8000aec <__aeabi_dcmplt>
 800a95c:	2800      	cmp	r0, #0
 800a95e:	d163      	bne.n	800aa28 <_dtoa_r+0x608>
 800a960:	4642      	mov	r2, r8
 800a962:	464b      	mov	r3, r9
 800a964:	4936      	ldr	r1, [pc, #216]	; (800aa40 <_dtoa_r+0x620>)
 800a966:	2000      	movs	r0, #0
 800a968:	f7f5 fc96 	bl	8000298 <__aeabi_dsub>
 800a96c:	4652      	mov	r2, sl
 800a96e:	465b      	mov	r3, fp
 800a970:	f7f6 f8bc 	bl	8000aec <__aeabi_dcmplt>
 800a974:	2800      	cmp	r0, #0
 800a976:	f040 80b5 	bne.w	800aae4 <_dtoa_r+0x6c4>
 800a97a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a97c:	429d      	cmp	r5, r3
 800a97e:	d081      	beq.n	800a884 <_dtoa_r+0x464>
 800a980:	4b30      	ldr	r3, [pc, #192]	; (800aa44 <_dtoa_r+0x624>)
 800a982:	2200      	movs	r2, #0
 800a984:	4650      	mov	r0, sl
 800a986:	4659      	mov	r1, fp
 800a988:	f7f5 fe3e 	bl	8000608 <__aeabi_dmul>
 800a98c:	4b2d      	ldr	r3, [pc, #180]	; (800aa44 <_dtoa_r+0x624>)
 800a98e:	4682      	mov	sl, r0
 800a990:	468b      	mov	fp, r1
 800a992:	4640      	mov	r0, r8
 800a994:	4649      	mov	r1, r9
 800a996:	2200      	movs	r2, #0
 800a998:	f7f5 fe36 	bl	8000608 <__aeabi_dmul>
 800a99c:	4680      	mov	r8, r0
 800a99e:	4689      	mov	r9, r1
 800a9a0:	e7c6      	b.n	800a930 <_dtoa_r+0x510>
 800a9a2:	4650      	mov	r0, sl
 800a9a4:	4659      	mov	r1, fp
 800a9a6:	f7f5 fe2f 	bl	8000608 <__aeabi_dmul>
 800a9aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a9ac:	9d01      	ldr	r5, [sp, #4]
 800a9ae:	930f      	str	r3, [sp, #60]	; 0x3c
 800a9b0:	4682      	mov	sl, r0
 800a9b2:	468b      	mov	fp, r1
 800a9b4:	4649      	mov	r1, r9
 800a9b6:	4640      	mov	r0, r8
 800a9b8:	f7f6 f8d6 	bl	8000b68 <__aeabi_d2iz>
 800a9bc:	4606      	mov	r6, r0
 800a9be:	f7f5 fdb9 	bl	8000534 <__aeabi_i2d>
 800a9c2:	3630      	adds	r6, #48	; 0x30
 800a9c4:	4602      	mov	r2, r0
 800a9c6:	460b      	mov	r3, r1
 800a9c8:	4640      	mov	r0, r8
 800a9ca:	4649      	mov	r1, r9
 800a9cc:	f7f5 fc64 	bl	8000298 <__aeabi_dsub>
 800a9d0:	f805 6b01 	strb.w	r6, [r5], #1
 800a9d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a9d6:	429d      	cmp	r5, r3
 800a9d8:	4680      	mov	r8, r0
 800a9da:	4689      	mov	r9, r1
 800a9dc:	f04f 0200 	mov.w	r2, #0
 800a9e0:	d124      	bne.n	800aa2c <_dtoa_r+0x60c>
 800a9e2:	4b1b      	ldr	r3, [pc, #108]	; (800aa50 <_dtoa_r+0x630>)
 800a9e4:	4650      	mov	r0, sl
 800a9e6:	4659      	mov	r1, fp
 800a9e8:	f7f5 fc58 	bl	800029c <__adddf3>
 800a9ec:	4602      	mov	r2, r0
 800a9ee:	460b      	mov	r3, r1
 800a9f0:	4640      	mov	r0, r8
 800a9f2:	4649      	mov	r1, r9
 800a9f4:	f7f6 f898 	bl	8000b28 <__aeabi_dcmpgt>
 800a9f8:	2800      	cmp	r0, #0
 800a9fa:	d173      	bne.n	800aae4 <_dtoa_r+0x6c4>
 800a9fc:	4652      	mov	r2, sl
 800a9fe:	465b      	mov	r3, fp
 800aa00:	4913      	ldr	r1, [pc, #76]	; (800aa50 <_dtoa_r+0x630>)
 800aa02:	2000      	movs	r0, #0
 800aa04:	f7f5 fc48 	bl	8000298 <__aeabi_dsub>
 800aa08:	4602      	mov	r2, r0
 800aa0a:	460b      	mov	r3, r1
 800aa0c:	4640      	mov	r0, r8
 800aa0e:	4649      	mov	r1, r9
 800aa10:	f7f6 f86c 	bl	8000aec <__aeabi_dcmplt>
 800aa14:	2800      	cmp	r0, #0
 800aa16:	f43f af35 	beq.w	800a884 <_dtoa_r+0x464>
 800aa1a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800aa1c:	1e6b      	subs	r3, r5, #1
 800aa1e:	930f      	str	r3, [sp, #60]	; 0x3c
 800aa20:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800aa24:	2b30      	cmp	r3, #48	; 0x30
 800aa26:	d0f8      	beq.n	800aa1a <_dtoa_r+0x5fa>
 800aa28:	9700      	str	r7, [sp, #0]
 800aa2a:	e049      	b.n	800aac0 <_dtoa_r+0x6a0>
 800aa2c:	4b05      	ldr	r3, [pc, #20]	; (800aa44 <_dtoa_r+0x624>)
 800aa2e:	f7f5 fdeb 	bl	8000608 <__aeabi_dmul>
 800aa32:	4680      	mov	r8, r0
 800aa34:	4689      	mov	r9, r1
 800aa36:	e7bd      	b.n	800a9b4 <_dtoa_r+0x594>
 800aa38:	08015660 	.word	0x08015660
 800aa3c:	08015638 	.word	0x08015638
 800aa40:	3ff00000 	.word	0x3ff00000
 800aa44:	40240000 	.word	0x40240000
 800aa48:	401c0000 	.word	0x401c0000
 800aa4c:	40140000 	.word	0x40140000
 800aa50:	3fe00000 	.word	0x3fe00000
 800aa54:	9d01      	ldr	r5, [sp, #4]
 800aa56:	4656      	mov	r6, sl
 800aa58:	465f      	mov	r7, fp
 800aa5a:	4642      	mov	r2, r8
 800aa5c:	464b      	mov	r3, r9
 800aa5e:	4630      	mov	r0, r6
 800aa60:	4639      	mov	r1, r7
 800aa62:	f7f5 fefb 	bl	800085c <__aeabi_ddiv>
 800aa66:	f7f6 f87f 	bl	8000b68 <__aeabi_d2iz>
 800aa6a:	4682      	mov	sl, r0
 800aa6c:	f7f5 fd62 	bl	8000534 <__aeabi_i2d>
 800aa70:	4642      	mov	r2, r8
 800aa72:	464b      	mov	r3, r9
 800aa74:	f7f5 fdc8 	bl	8000608 <__aeabi_dmul>
 800aa78:	4602      	mov	r2, r0
 800aa7a:	460b      	mov	r3, r1
 800aa7c:	4630      	mov	r0, r6
 800aa7e:	4639      	mov	r1, r7
 800aa80:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800aa84:	f7f5 fc08 	bl	8000298 <__aeabi_dsub>
 800aa88:	f805 6b01 	strb.w	r6, [r5], #1
 800aa8c:	9e01      	ldr	r6, [sp, #4]
 800aa8e:	9f03      	ldr	r7, [sp, #12]
 800aa90:	1bae      	subs	r6, r5, r6
 800aa92:	42b7      	cmp	r7, r6
 800aa94:	4602      	mov	r2, r0
 800aa96:	460b      	mov	r3, r1
 800aa98:	d135      	bne.n	800ab06 <_dtoa_r+0x6e6>
 800aa9a:	f7f5 fbff 	bl	800029c <__adddf3>
 800aa9e:	4642      	mov	r2, r8
 800aaa0:	464b      	mov	r3, r9
 800aaa2:	4606      	mov	r6, r0
 800aaa4:	460f      	mov	r7, r1
 800aaa6:	f7f6 f83f 	bl	8000b28 <__aeabi_dcmpgt>
 800aaaa:	b9d0      	cbnz	r0, 800aae2 <_dtoa_r+0x6c2>
 800aaac:	4642      	mov	r2, r8
 800aaae:	464b      	mov	r3, r9
 800aab0:	4630      	mov	r0, r6
 800aab2:	4639      	mov	r1, r7
 800aab4:	f7f6 f810 	bl	8000ad8 <__aeabi_dcmpeq>
 800aab8:	b110      	cbz	r0, 800aac0 <_dtoa_r+0x6a0>
 800aaba:	f01a 0f01 	tst.w	sl, #1
 800aabe:	d110      	bne.n	800aae2 <_dtoa_r+0x6c2>
 800aac0:	4620      	mov	r0, r4
 800aac2:	ee18 1a10 	vmov	r1, s16
 800aac6:	f000 faf3 	bl	800b0b0 <_Bfree>
 800aaca:	2300      	movs	r3, #0
 800aacc:	9800      	ldr	r0, [sp, #0]
 800aace:	702b      	strb	r3, [r5, #0]
 800aad0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aad2:	3001      	adds	r0, #1
 800aad4:	6018      	str	r0, [r3, #0]
 800aad6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aad8:	2b00      	cmp	r3, #0
 800aada:	f43f acf1 	beq.w	800a4c0 <_dtoa_r+0xa0>
 800aade:	601d      	str	r5, [r3, #0]
 800aae0:	e4ee      	b.n	800a4c0 <_dtoa_r+0xa0>
 800aae2:	9f00      	ldr	r7, [sp, #0]
 800aae4:	462b      	mov	r3, r5
 800aae6:	461d      	mov	r5, r3
 800aae8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aaec:	2a39      	cmp	r2, #57	; 0x39
 800aaee:	d106      	bne.n	800aafe <_dtoa_r+0x6de>
 800aaf0:	9a01      	ldr	r2, [sp, #4]
 800aaf2:	429a      	cmp	r2, r3
 800aaf4:	d1f7      	bne.n	800aae6 <_dtoa_r+0x6c6>
 800aaf6:	9901      	ldr	r1, [sp, #4]
 800aaf8:	2230      	movs	r2, #48	; 0x30
 800aafa:	3701      	adds	r7, #1
 800aafc:	700a      	strb	r2, [r1, #0]
 800aafe:	781a      	ldrb	r2, [r3, #0]
 800ab00:	3201      	adds	r2, #1
 800ab02:	701a      	strb	r2, [r3, #0]
 800ab04:	e790      	b.n	800aa28 <_dtoa_r+0x608>
 800ab06:	4ba6      	ldr	r3, [pc, #664]	; (800ada0 <_dtoa_r+0x980>)
 800ab08:	2200      	movs	r2, #0
 800ab0a:	f7f5 fd7d 	bl	8000608 <__aeabi_dmul>
 800ab0e:	2200      	movs	r2, #0
 800ab10:	2300      	movs	r3, #0
 800ab12:	4606      	mov	r6, r0
 800ab14:	460f      	mov	r7, r1
 800ab16:	f7f5 ffdf 	bl	8000ad8 <__aeabi_dcmpeq>
 800ab1a:	2800      	cmp	r0, #0
 800ab1c:	d09d      	beq.n	800aa5a <_dtoa_r+0x63a>
 800ab1e:	e7cf      	b.n	800aac0 <_dtoa_r+0x6a0>
 800ab20:	9a08      	ldr	r2, [sp, #32]
 800ab22:	2a00      	cmp	r2, #0
 800ab24:	f000 80d7 	beq.w	800acd6 <_dtoa_r+0x8b6>
 800ab28:	9a06      	ldr	r2, [sp, #24]
 800ab2a:	2a01      	cmp	r2, #1
 800ab2c:	f300 80ba 	bgt.w	800aca4 <_dtoa_r+0x884>
 800ab30:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ab32:	2a00      	cmp	r2, #0
 800ab34:	f000 80b2 	beq.w	800ac9c <_dtoa_r+0x87c>
 800ab38:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ab3c:	9e07      	ldr	r6, [sp, #28]
 800ab3e:	9d04      	ldr	r5, [sp, #16]
 800ab40:	9a04      	ldr	r2, [sp, #16]
 800ab42:	441a      	add	r2, r3
 800ab44:	9204      	str	r2, [sp, #16]
 800ab46:	9a05      	ldr	r2, [sp, #20]
 800ab48:	2101      	movs	r1, #1
 800ab4a:	441a      	add	r2, r3
 800ab4c:	4620      	mov	r0, r4
 800ab4e:	9205      	str	r2, [sp, #20]
 800ab50:	f000 fb66 	bl	800b220 <__i2b>
 800ab54:	4607      	mov	r7, r0
 800ab56:	2d00      	cmp	r5, #0
 800ab58:	dd0c      	ble.n	800ab74 <_dtoa_r+0x754>
 800ab5a:	9b05      	ldr	r3, [sp, #20]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	dd09      	ble.n	800ab74 <_dtoa_r+0x754>
 800ab60:	42ab      	cmp	r3, r5
 800ab62:	9a04      	ldr	r2, [sp, #16]
 800ab64:	bfa8      	it	ge
 800ab66:	462b      	movge	r3, r5
 800ab68:	1ad2      	subs	r2, r2, r3
 800ab6a:	9204      	str	r2, [sp, #16]
 800ab6c:	9a05      	ldr	r2, [sp, #20]
 800ab6e:	1aed      	subs	r5, r5, r3
 800ab70:	1ad3      	subs	r3, r2, r3
 800ab72:	9305      	str	r3, [sp, #20]
 800ab74:	9b07      	ldr	r3, [sp, #28]
 800ab76:	b31b      	cbz	r3, 800abc0 <_dtoa_r+0x7a0>
 800ab78:	9b08      	ldr	r3, [sp, #32]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	f000 80af 	beq.w	800acde <_dtoa_r+0x8be>
 800ab80:	2e00      	cmp	r6, #0
 800ab82:	dd13      	ble.n	800abac <_dtoa_r+0x78c>
 800ab84:	4639      	mov	r1, r7
 800ab86:	4632      	mov	r2, r6
 800ab88:	4620      	mov	r0, r4
 800ab8a:	f000 fc09 	bl	800b3a0 <__pow5mult>
 800ab8e:	ee18 2a10 	vmov	r2, s16
 800ab92:	4601      	mov	r1, r0
 800ab94:	4607      	mov	r7, r0
 800ab96:	4620      	mov	r0, r4
 800ab98:	f000 fb58 	bl	800b24c <__multiply>
 800ab9c:	ee18 1a10 	vmov	r1, s16
 800aba0:	4680      	mov	r8, r0
 800aba2:	4620      	mov	r0, r4
 800aba4:	f000 fa84 	bl	800b0b0 <_Bfree>
 800aba8:	ee08 8a10 	vmov	s16, r8
 800abac:	9b07      	ldr	r3, [sp, #28]
 800abae:	1b9a      	subs	r2, r3, r6
 800abb0:	d006      	beq.n	800abc0 <_dtoa_r+0x7a0>
 800abb2:	ee18 1a10 	vmov	r1, s16
 800abb6:	4620      	mov	r0, r4
 800abb8:	f000 fbf2 	bl	800b3a0 <__pow5mult>
 800abbc:	ee08 0a10 	vmov	s16, r0
 800abc0:	2101      	movs	r1, #1
 800abc2:	4620      	mov	r0, r4
 800abc4:	f000 fb2c 	bl	800b220 <__i2b>
 800abc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800abca:	2b00      	cmp	r3, #0
 800abcc:	4606      	mov	r6, r0
 800abce:	f340 8088 	ble.w	800ace2 <_dtoa_r+0x8c2>
 800abd2:	461a      	mov	r2, r3
 800abd4:	4601      	mov	r1, r0
 800abd6:	4620      	mov	r0, r4
 800abd8:	f000 fbe2 	bl	800b3a0 <__pow5mult>
 800abdc:	9b06      	ldr	r3, [sp, #24]
 800abde:	2b01      	cmp	r3, #1
 800abe0:	4606      	mov	r6, r0
 800abe2:	f340 8081 	ble.w	800ace8 <_dtoa_r+0x8c8>
 800abe6:	f04f 0800 	mov.w	r8, #0
 800abea:	6933      	ldr	r3, [r6, #16]
 800abec:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800abf0:	6918      	ldr	r0, [r3, #16]
 800abf2:	f000 fac5 	bl	800b180 <__hi0bits>
 800abf6:	f1c0 0020 	rsb	r0, r0, #32
 800abfa:	9b05      	ldr	r3, [sp, #20]
 800abfc:	4418      	add	r0, r3
 800abfe:	f010 001f 	ands.w	r0, r0, #31
 800ac02:	f000 8092 	beq.w	800ad2a <_dtoa_r+0x90a>
 800ac06:	f1c0 0320 	rsb	r3, r0, #32
 800ac0a:	2b04      	cmp	r3, #4
 800ac0c:	f340 808a 	ble.w	800ad24 <_dtoa_r+0x904>
 800ac10:	f1c0 001c 	rsb	r0, r0, #28
 800ac14:	9b04      	ldr	r3, [sp, #16]
 800ac16:	4403      	add	r3, r0
 800ac18:	9304      	str	r3, [sp, #16]
 800ac1a:	9b05      	ldr	r3, [sp, #20]
 800ac1c:	4403      	add	r3, r0
 800ac1e:	4405      	add	r5, r0
 800ac20:	9305      	str	r3, [sp, #20]
 800ac22:	9b04      	ldr	r3, [sp, #16]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	dd07      	ble.n	800ac38 <_dtoa_r+0x818>
 800ac28:	ee18 1a10 	vmov	r1, s16
 800ac2c:	461a      	mov	r2, r3
 800ac2e:	4620      	mov	r0, r4
 800ac30:	f000 fc10 	bl	800b454 <__lshift>
 800ac34:	ee08 0a10 	vmov	s16, r0
 800ac38:	9b05      	ldr	r3, [sp, #20]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	dd05      	ble.n	800ac4a <_dtoa_r+0x82a>
 800ac3e:	4631      	mov	r1, r6
 800ac40:	461a      	mov	r2, r3
 800ac42:	4620      	mov	r0, r4
 800ac44:	f000 fc06 	bl	800b454 <__lshift>
 800ac48:	4606      	mov	r6, r0
 800ac4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d06e      	beq.n	800ad2e <_dtoa_r+0x90e>
 800ac50:	ee18 0a10 	vmov	r0, s16
 800ac54:	4631      	mov	r1, r6
 800ac56:	f000 fc6d 	bl	800b534 <__mcmp>
 800ac5a:	2800      	cmp	r0, #0
 800ac5c:	da67      	bge.n	800ad2e <_dtoa_r+0x90e>
 800ac5e:	9b00      	ldr	r3, [sp, #0]
 800ac60:	3b01      	subs	r3, #1
 800ac62:	ee18 1a10 	vmov	r1, s16
 800ac66:	9300      	str	r3, [sp, #0]
 800ac68:	220a      	movs	r2, #10
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	4620      	mov	r0, r4
 800ac6e:	f000 fa41 	bl	800b0f4 <__multadd>
 800ac72:	9b08      	ldr	r3, [sp, #32]
 800ac74:	ee08 0a10 	vmov	s16, r0
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	f000 81b1 	beq.w	800afe0 <_dtoa_r+0xbc0>
 800ac7e:	2300      	movs	r3, #0
 800ac80:	4639      	mov	r1, r7
 800ac82:	220a      	movs	r2, #10
 800ac84:	4620      	mov	r0, r4
 800ac86:	f000 fa35 	bl	800b0f4 <__multadd>
 800ac8a:	9b02      	ldr	r3, [sp, #8]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	4607      	mov	r7, r0
 800ac90:	f300 808e 	bgt.w	800adb0 <_dtoa_r+0x990>
 800ac94:	9b06      	ldr	r3, [sp, #24]
 800ac96:	2b02      	cmp	r3, #2
 800ac98:	dc51      	bgt.n	800ad3e <_dtoa_r+0x91e>
 800ac9a:	e089      	b.n	800adb0 <_dtoa_r+0x990>
 800ac9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ac9e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800aca2:	e74b      	b.n	800ab3c <_dtoa_r+0x71c>
 800aca4:	9b03      	ldr	r3, [sp, #12]
 800aca6:	1e5e      	subs	r6, r3, #1
 800aca8:	9b07      	ldr	r3, [sp, #28]
 800acaa:	42b3      	cmp	r3, r6
 800acac:	bfbf      	itttt	lt
 800acae:	9b07      	ldrlt	r3, [sp, #28]
 800acb0:	9607      	strlt	r6, [sp, #28]
 800acb2:	1af2      	sublt	r2, r6, r3
 800acb4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800acb6:	bfb6      	itet	lt
 800acb8:	189b      	addlt	r3, r3, r2
 800acba:	1b9e      	subge	r6, r3, r6
 800acbc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800acbe:	9b03      	ldr	r3, [sp, #12]
 800acc0:	bfb8      	it	lt
 800acc2:	2600      	movlt	r6, #0
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	bfb7      	itett	lt
 800acc8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800accc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800acd0:	1a9d      	sublt	r5, r3, r2
 800acd2:	2300      	movlt	r3, #0
 800acd4:	e734      	b.n	800ab40 <_dtoa_r+0x720>
 800acd6:	9e07      	ldr	r6, [sp, #28]
 800acd8:	9d04      	ldr	r5, [sp, #16]
 800acda:	9f08      	ldr	r7, [sp, #32]
 800acdc:	e73b      	b.n	800ab56 <_dtoa_r+0x736>
 800acde:	9a07      	ldr	r2, [sp, #28]
 800ace0:	e767      	b.n	800abb2 <_dtoa_r+0x792>
 800ace2:	9b06      	ldr	r3, [sp, #24]
 800ace4:	2b01      	cmp	r3, #1
 800ace6:	dc18      	bgt.n	800ad1a <_dtoa_r+0x8fa>
 800ace8:	f1ba 0f00 	cmp.w	sl, #0
 800acec:	d115      	bne.n	800ad1a <_dtoa_r+0x8fa>
 800acee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800acf2:	b993      	cbnz	r3, 800ad1a <_dtoa_r+0x8fa>
 800acf4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800acf8:	0d1b      	lsrs	r3, r3, #20
 800acfa:	051b      	lsls	r3, r3, #20
 800acfc:	b183      	cbz	r3, 800ad20 <_dtoa_r+0x900>
 800acfe:	9b04      	ldr	r3, [sp, #16]
 800ad00:	3301      	adds	r3, #1
 800ad02:	9304      	str	r3, [sp, #16]
 800ad04:	9b05      	ldr	r3, [sp, #20]
 800ad06:	3301      	adds	r3, #1
 800ad08:	9305      	str	r3, [sp, #20]
 800ad0a:	f04f 0801 	mov.w	r8, #1
 800ad0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	f47f af6a 	bne.w	800abea <_dtoa_r+0x7ca>
 800ad16:	2001      	movs	r0, #1
 800ad18:	e76f      	b.n	800abfa <_dtoa_r+0x7da>
 800ad1a:	f04f 0800 	mov.w	r8, #0
 800ad1e:	e7f6      	b.n	800ad0e <_dtoa_r+0x8ee>
 800ad20:	4698      	mov	r8, r3
 800ad22:	e7f4      	b.n	800ad0e <_dtoa_r+0x8ee>
 800ad24:	f43f af7d 	beq.w	800ac22 <_dtoa_r+0x802>
 800ad28:	4618      	mov	r0, r3
 800ad2a:	301c      	adds	r0, #28
 800ad2c:	e772      	b.n	800ac14 <_dtoa_r+0x7f4>
 800ad2e:	9b03      	ldr	r3, [sp, #12]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	dc37      	bgt.n	800ada4 <_dtoa_r+0x984>
 800ad34:	9b06      	ldr	r3, [sp, #24]
 800ad36:	2b02      	cmp	r3, #2
 800ad38:	dd34      	ble.n	800ada4 <_dtoa_r+0x984>
 800ad3a:	9b03      	ldr	r3, [sp, #12]
 800ad3c:	9302      	str	r3, [sp, #8]
 800ad3e:	9b02      	ldr	r3, [sp, #8]
 800ad40:	b96b      	cbnz	r3, 800ad5e <_dtoa_r+0x93e>
 800ad42:	4631      	mov	r1, r6
 800ad44:	2205      	movs	r2, #5
 800ad46:	4620      	mov	r0, r4
 800ad48:	f000 f9d4 	bl	800b0f4 <__multadd>
 800ad4c:	4601      	mov	r1, r0
 800ad4e:	4606      	mov	r6, r0
 800ad50:	ee18 0a10 	vmov	r0, s16
 800ad54:	f000 fbee 	bl	800b534 <__mcmp>
 800ad58:	2800      	cmp	r0, #0
 800ad5a:	f73f adbb 	bgt.w	800a8d4 <_dtoa_r+0x4b4>
 800ad5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad60:	9d01      	ldr	r5, [sp, #4]
 800ad62:	43db      	mvns	r3, r3
 800ad64:	9300      	str	r3, [sp, #0]
 800ad66:	f04f 0800 	mov.w	r8, #0
 800ad6a:	4631      	mov	r1, r6
 800ad6c:	4620      	mov	r0, r4
 800ad6e:	f000 f99f 	bl	800b0b0 <_Bfree>
 800ad72:	2f00      	cmp	r7, #0
 800ad74:	f43f aea4 	beq.w	800aac0 <_dtoa_r+0x6a0>
 800ad78:	f1b8 0f00 	cmp.w	r8, #0
 800ad7c:	d005      	beq.n	800ad8a <_dtoa_r+0x96a>
 800ad7e:	45b8      	cmp	r8, r7
 800ad80:	d003      	beq.n	800ad8a <_dtoa_r+0x96a>
 800ad82:	4641      	mov	r1, r8
 800ad84:	4620      	mov	r0, r4
 800ad86:	f000 f993 	bl	800b0b0 <_Bfree>
 800ad8a:	4639      	mov	r1, r7
 800ad8c:	4620      	mov	r0, r4
 800ad8e:	f000 f98f 	bl	800b0b0 <_Bfree>
 800ad92:	e695      	b.n	800aac0 <_dtoa_r+0x6a0>
 800ad94:	2600      	movs	r6, #0
 800ad96:	4637      	mov	r7, r6
 800ad98:	e7e1      	b.n	800ad5e <_dtoa_r+0x93e>
 800ad9a:	9700      	str	r7, [sp, #0]
 800ad9c:	4637      	mov	r7, r6
 800ad9e:	e599      	b.n	800a8d4 <_dtoa_r+0x4b4>
 800ada0:	40240000 	.word	0x40240000
 800ada4:	9b08      	ldr	r3, [sp, #32]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	f000 80ca 	beq.w	800af40 <_dtoa_r+0xb20>
 800adac:	9b03      	ldr	r3, [sp, #12]
 800adae:	9302      	str	r3, [sp, #8]
 800adb0:	2d00      	cmp	r5, #0
 800adb2:	dd05      	ble.n	800adc0 <_dtoa_r+0x9a0>
 800adb4:	4639      	mov	r1, r7
 800adb6:	462a      	mov	r2, r5
 800adb8:	4620      	mov	r0, r4
 800adba:	f000 fb4b 	bl	800b454 <__lshift>
 800adbe:	4607      	mov	r7, r0
 800adc0:	f1b8 0f00 	cmp.w	r8, #0
 800adc4:	d05b      	beq.n	800ae7e <_dtoa_r+0xa5e>
 800adc6:	6879      	ldr	r1, [r7, #4]
 800adc8:	4620      	mov	r0, r4
 800adca:	f000 f931 	bl	800b030 <_Balloc>
 800adce:	4605      	mov	r5, r0
 800add0:	b928      	cbnz	r0, 800adde <_dtoa_r+0x9be>
 800add2:	4b87      	ldr	r3, [pc, #540]	; (800aff0 <_dtoa_r+0xbd0>)
 800add4:	4602      	mov	r2, r0
 800add6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800adda:	f7ff bb3b 	b.w	800a454 <_dtoa_r+0x34>
 800adde:	693a      	ldr	r2, [r7, #16]
 800ade0:	3202      	adds	r2, #2
 800ade2:	0092      	lsls	r2, r2, #2
 800ade4:	f107 010c 	add.w	r1, r7, #12
 800ade8:	300c      	adds	r0, #12
 800adea:	f000 f913 	bl	800b014 <memcpy>
 800adee:	2201      	movs	r2, #1
 800adf0:	4629      	mov	r1, r5
 800adf2:	4620      	mov	r0, r4
 800adf4:	f000 fb2e 	bl	800b454 <__lshift>
 800adf8:	9b01      	ldr	r3, [sp, #4]
 800adfa:	f103 0901 	add.w	r9, r3, #1
 800adfe:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800ae02:	4413      	add	r3, r2
 800ae04:	9305      	str	r3, [sp, #20]
 800ae06:	f00a 0301 	and.w	r3, sl, #1
 800ae0a:	46b8      	mov	r8, r7
 800ae0c:	9304      	str	r3, [sp, #16]
 800ae0e:	4607      	mov	r7, r0
 800ae10:	4631      	mov	r1, r6
 800ae12:	ee18 0a10 	vmov	r0, s16
 800ae16:	f7ff fa77 	bl	800a308 <quorem>
 800ae1a:	4641      	mov	r1, r8
 800ae1c:	9002      	str	r0, [sp, #8]
 800ae1e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ae22:	ee18 0a10 	vmov	r0, s16
 800ae26:	f000 fb85 	bl	800b534 <__mcmp>
 800ae2a:	463a      	mov	r2, r7
 800ae2c:	9003      	str	r0, [sp, #12]
 800ae2e:	4631      	mov	r1, r6
 800ae30:	4620      	mov	r0, r4
 800ae32:	f000 fb9b 	bl	800b56c <__mdiff>
 800ae36:	68c2      	ldr	r2, [r0, #12]
 800ae38:	f109 3bff 	add.w	fp, r9, #4294967295
 800ae3c:	4605      	mov	r5, r0
 800ae3e:	bb02      	cbnz	r2, 800ae82 <_dtoa_r+0xa62>
 800ae40:	4601      	mov	r1, r0
 800ae42:	ee18 0a10 	vmov	r0, s16
 800ae46:	f000 fb75 	bl	800b534 <__mcmp>
 800ae4a:	4602      	mov	r2, r0
 800ae4c:	4629      	mov	r1, r5
 800ae4e:	4620      	mov	r0, r4
 800ae50:	9207      	str	r2, [sp, #28]
 800ae52:	f000 f92d 	bl	800b0b0 <_Bfree>
 800ae56:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800ae5a:	ea43 0102 	orr.w	r1, r3, r2
 800ae5e:	9b04      	ldr	r3, [sp, #16]
 800ae60:	430b      	orrs	r3, r1
 800ae62:	464d      	mov	r5, r9
 800ae64:	d10f      	bne.n	800ae86 <_dtoa_r+0xa66>
 800ae66:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ae6a:	d02a      	beq.n	800aec2 <_dtoa_r+0xaa2>
 800ae6c:	9b03      	ldr	r3, [sp, #12]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	dd02      	ble.n	800ae78 <_dtoa_r+0xa58>
 800ae72:	9b02      	ldr	r3, [sp, #8]
 800ae74:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800ae78:	f88b a000 	strb.w	sl, [fp]
 800ae7c:	e775      	b.n	800ad6a <_dtoa_r+0x94a>
 800ae7e:	4638      	mov	r0, r7
 800ae80:	e7ba      	b.n	800adf8 <_dtoa_r+0x9d8>
 800ae82:	2201      	movs	r2, #1
 800ae84:	e7e2      	b.n	800ae4c <_dtoa_r+0xa2c>
 800ae86:	9b03      	ldr	r3, [sp, #12]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	db04      	blt.n	800ae96 <_dtoa_r+0xa76>
 800ae8c:	9906      	ldr	r1, [sp, #24]
 800ae8e:	430b      	orrs	r3, r1
 800ae90:	9904      	ldr	r1, [sp, #16]
 800ae92:	430b      	orrs	r3, r1
 800ae94:	d122      	bne.n	800aedc <_dtoa_r+0xabc>
 800ae96:	2a00      	cmp	r2, #0
 800ae98:	ddee      	ble.n	800ae78 <_dtoa_r+0xa58>
 800ae9a:	ee18 1a10 	vmov	r1, s16
 800ae9e:	2201      	movs	r2, #1
 800aea0:	4620      	mov	r0, r4
 800aea2:	f000 fad7 	bl	800b454 <__lshift>
 800aea6:	4631      	mov	r1, r6
 800aea8:	ee08 0a10 	vmov	s16, r0
 800aeac:	f000 fb42 	bl	800b534 <__mcmp>
 800aeb0:	2800      	cmp	r0, #0
 800aeb2:	dc03      	bgt.n	800aebc <_dtoa_r+0xa9c>
 800aeb4:	d1e0      	bne.n	800ae78 <_dtoa_r+0xa58>
 800aeb6:	f01a 0f01 	tst.w	sl, #1
 800aeba:	d0dd      	beq.n	800ae78 <_dtoa_r+0xa58>
 800aebc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800aec0:	d1d7      	bne.n	800ae72 <_dtoa_r+0xa52>
 800aec2:	2339      	movs	r3, #57	; 0x39
 800aec4:	f88b 3000 	strb.w	r3, [fp]
 800aec8:	462b      	mov	r3, r5
 800aeca:	461d      	mov	r5, r3
 800aecc:	3b01      	subs	r3, #1
 800aece:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800aed2:	2a39      	cmp	r2, #57	; 0x39
 800aed4:	d071      	beq.n	800afba <_dtoa_r+0xb9a>
 800aed6:	3201      	adds	r2, #1
 800aed8:	701a      	strb	r2, [r3, #0]
 800aeda:	e746      	b.n	800ad6a <_dtoa_r+0x94a>
 800aedc:	2a00      	cmp	r2, #0
 800aede:	dd07      	ble.n	800aef0 <_dtoa_r+0xad0>
 800aee0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800aee4:	d0ed      	beq.n	800aec2 <_dtoa_r+0xaa2>
 800aee6:	f10a 0301 	add.w	r3, sl, #1
 800aeea:	f88b 3000 	strb.w	r3, [fp]
 800aeee:	e73c      	b.n	800ad6a <_dtoa_r+0x94a>
 800aef0:	9b05      	ldr	r3, [sp, #20]
 800aef2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800aef6:	4599      	cmp	r9, r3
 800aef8:	d047      	beq.n	800af8a <_dtoa_r+0xb6a>
 800aefa:	ee18 1a10 	vmov	r1, s16
 800aefe:	2300      	movs	r3, #0
 800af00:	220a      	movs	r2, #10
 800af02:	4620      	mov	r0, r4
 800af04:	f000 f8f6 	bl	800b0f4 <__multadd>
 800af08:	45b8      	cmp	r8, r7
 800af0a:	ee08 0a10 	vmov	s16, r0
 800af0e:	f04f 0300 	mov.w	r3, #0
 800af12:	f04f 020a 	mov.w	r2, #10
 800af16:	4641      	mov	r1, r8
 800af18:	4620      	mov	r0, r4
 800af1a:	d106      	bne.n	800af2a <_dtoa_r+0xb0a>
 800af1c:	f000 f8ea 	bl	800b0f4 <__multadd>
 800af20:	4680      	mov	r8, r0
 800af22:	4607      	mov	r7, r0
 800af24:	f109 0901 	add.w	r9, r9, #1
 800af28:	e772      	b.n	800ae10 <_dtoa_r+0x9f0>
 800af2a:	f000 f8e3 	bl	800b0f4 <__multadd>
 800af2e:	4639      	mov	r1, r7
 800af30:	4680      	mov	r8, r0
 800af32:	2300      	movs	r3, #0
 800af34:	220a      	movs	r2, #10
 800af36:	4620      	mov	r0, r4
 800af38:	f000 f8dc 	bl	800b0f4 <__multadd>
 800af3c:	4607      	mov	r7, r0
 800af3e:	e7f1      	b.n	800af24 <_dtoa_r+0xb04>
 800af40:	9b03      	ldr	r3, [sp, #12]
 800af42:	9302      	str	r3, [sp, #8]
 800af44:	9d01      	ldr	r5, [sp, #4]
 800af46:	ee18 0a10 	vmov	r0, s16
 800af4a:	4631      	mov	r1, r6
 800af4c:	f7ff f9dc 	bl	800a308 <quorem>
 800af50:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800af54:	9b01      	ldr	r3, [sp, #4]
 800af56:	f805 ab01 	strb.w	sl, [r5], #1
 800af5a:	1aea      	subs	r2, r5, r3
 800af5c:	9b02      	ldr	r3, [sp, #8]
 800af5e:	4293      	cmp	r3, r2
 800af60:	dd09      	ble.n	800af76 <_dtoa_r+0xb56>
 800af62:	ee18 1a10 	vmov	r1, s16
 800af66:	2300      	movs	r3, #0
 800af68:	220a      	movs	r2, #10
 800af6a:	4620      	mov	r0, r4
 800af6c:	f000 f8c2 	bl	800b0f4 <__multadd>
 800af70:	ee08 0a10 	vmov	s16, r0
 800af74:	e7e7      	b.n	800af46 <_dtoa_r+0xb26>
 800af76:	9b02      	ldr	r3, [sp, #8]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	bfc8      	it	gt
 800af7c:	461d      	movgt	r5, r3
 800af7e:	9b01      	ldr	r3, [sp, #4]
 800af80:	bfd8      	it	le
 800af82:	2501      	movle	r5, #1
 800af84:	441d      	add	r5, r3
 800af86:	f04f 0800 	mov.w	r8, #0
 800af8a:	ee18 1a10 	vmov	r1, s16
 800af8e:	2201      	movs	r2, #1
 800af90:	4620      	mov	r0, r4
 800af92:	f000 fa5f 	bl	800b454 <__lshift>
 800af96:	4631      	mov	r1, r6
 800af98:	ee08 0a10 	vmov	s16, r0
 800af9c:	f000 faca 	bl	800b534 <__mcmp>
 800afa0:	2800      	cmp	r0, #0
 800afa2:	dc91      	bgt.n	800aec8 <_dtoa_r+0xaa8>
 800afa4:	d102      	bne.n	800afac <_dtoa_r+0xb8c>
 800afa6:	f01a 0f01 	tst.w	sl, #1
 800afaa:	d18d      	bne.n	800aec8 <_dtoa_r+0xaa8>
 800afac:	462b      	mov	r3, r5
 800afae:	461d      	mov	r5, r3
 800afb0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800afb4:	2a30      	cmp	r2, #48	; 0x30
 800afb6:	d0fa      	beq.n	800afae <_dtoa_r+0xb8e>
 800afb8:	e6d7      	b.n	800ad6a <_dtoa_r+0x94a>
 800afba:	9a01      	ldr	r2, [sp, #4]
 800afbc:	429a      	cmp	r2, r3
 800afbe:	d184      	bne.n	800aeca <_dtoa_r+0xaaa>
 800afc0:	9b00      	ldr	r3, [sp, #0]
 800afc2:	3301      	adds	r3, #1
 800afc4:	9300      	str	r3, [sp, #0]
 800afc6:	2331      	movs	r3, #49	; 0x31
 800afc8:	7013      	strb	r3, [r2, #0]
 800afca:	e6ce      	b.n	800ad6a <_dtoa_r+0x94a>
 800afcc:	4b09      	ldr	r3, [pc, #36]	; (800aff4 <_dtoa_r+0xbd4>)
 800afce:	f7ff ba95 	b.w	800a4fc <_dtoa_r+0xdc>
 800afd2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	f47f aa6e 	bne.w	800a4b6 <_dtoa_r+0x96>
 800afda:	4b07      	ldr	r3, [pc, #28]	; (800aff8 <_dtoa_r+0xbd8>)
 800afdc:	f7ff ba8e 	b.w	800a4fc <_dtoa_r+0xdc>
 800afe0:	9b02      	ldr	r3, [sp, #8]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	dcae      	bgt.n	800af44 <_dtoa_r+0xb24>
 800afe6:	9b06      	ldr	r3, [sp, #24]
 800afe8:	2b02      	cmp	r3, #2
 800afea:	f73f aea8 	bgt.w	800ad3e <_dtoa_r+0x91e>
 800afee:	e7a9      	b.n	800af44 <_dtoa_r+0xb24>
 800aff0:	080155cb 	.word	0x080155cb
 800aff4:	08015528 	.word	0x08015528
 800aff8:	0801554c 	.word	0x0801554c

0800affc <_localeconv_r>:
 800affc:	4800      	ldr	r0, [pc, #0]	; (800b000 <_localeconv_r+0x4>)
 800affe:	4770      	bx	lr
 800b000:	2000017c 	.word	0x2000017c

0800b004 <malloc>:
 800b004:	4b02      	ldr	r3, [pc, #8]	; (800b010 <malloc+0xc>)
 800b006:	4601      	mov	r1, r0
 800b008:	6818      	ldr	r0, [r3, #0]
 800b00a:	f000 bc17 	b.w	800b83c <_malloc_r>
 800b00e:	bf00      	nop
 800b010:	20000028 	.word	0x20000028

0800b014 <memcpy>:
 800b014:	440a      	add	r2, r1
 800b016:	4291      	cmp	r1, r2
 800b018:	f100 33ff 	add.w	r3, r0, #4294967295
 800b01c:	d100      	bne.n	800b020 <memcpy+0xc>
 800b01e:	4770      	bx	lr
 800b020:	b510      	push	{r4, lr}
 800b022:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b026:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b02a:	4291      	cmp	r1, r2
 800b02c:	d1f9      	bne.n	800b022 <memcpy+0xe>
 800b02e:	bd10      	pop	{r4, pc}

0800b030 <_Balloc>:
 800b030:	b570      	push	{r4, r5, r6, lr}
 800b032:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b034:	4604      	mov	r4, r0
 800b036:	460d      	mov	r5, r1
 800b038:	b976      	cbnz	r6, 800b058 <_Balloc+0x28>
 800b03a:	2010      	movs	r0, #16
 800b03c:	f7ff ffe2 	bl	800b004 <malloc>
 800b040:	4602      	mov	r2, r0
 800b042:	6260      	str	r0, [r4, #36]	; 0x24
 800b044:	b920      	cbnz	r0, 800b050 <_Balloc+0x20>
 800b046:	4b18      	ldr	r3, [pc, #96]	; (800b0a8 <_Balloc+0x78>)
 800b048:	4818      	ldr	r0, [pc, #96]	; (800b0ac <_Balloc+0x7c>)
 800b04a:	2166      	movs	r1, #102	; 0x66
 800b04c:	f000 fdd6 	bl	800bbfc <__assert_func>
 800b050:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b054:	6006      	str	r6, [r0, #0]
 800b056:	60c6      	str	r6, [r0, #12]
 800b058:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b05a:	68f3      	ldr	r3, [r6, #12]
 800b05c:	b183      	cbz	r3, 800b080 <_Balloc+0x50>
 800b05e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b060:	68db      	ldr	r3, [r3, #12]
 800b062:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b066:	b9b8      	cbnz	r0, 800b098 <_Balloc+0x68>
 800b068:	2101      	movs	r1, #1
 800b06a:	fa01 f605 	lsl.w	r6, r1, r5
 800b06e:	1d72      	adds	r2, r6, #5
 800b070:	0092      	lsls	r2, r2, #2
 800b072:	4620      	mov	r0, r4
 800b074:	f000 fb60 	bl	800b738 <_calloc_r>
 800b078:	b160      	cbz	r0, 800b094 <_Balloc+0x64>
 800b07a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b07e:	e00e      	b.n	800b09e <_Balloc+0x6e>
 800b080:	2221      	movs	r2, #33	; 0x21
 800b082:	2104      	movs	r1, #4
 800b084:	4620      	mov	r0, r4
 800b086:	f000 fb57 	bl	800b738 <_calloc_r>
 800b08a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b08c:	60f0      	str	r0, [r6, #12]
 800b08e:	68db      	ldr	r3, [r3, #12]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d1e4      	bne.n	800b05e <_Balloc+0x2e>
 800b094:	2000      	movs	r0, #0
 800b096:	bd70      	pop	{r4, r5, r6, pc}
 800b098:	6802      	ldr	r2, [r0, #0]
 800b09a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b09e:	2300      	movs	r3, #0
 800b0a0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b0a4:	e7f7      	b.n	800b096 <_Balloc+0x66>
 800b0a6:	bf00      	nop
 800b0a8:	08015559 	.word	0x08015559
 800b0ac:	080155dc 	.word	0x080155dc

0800b0b0 <_Bfree>:
 800b0b0:	b570      	push	{r4, r5, r6, lr}
 800b0b2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b0b4:	4605      	mov	r5, r0
 800b0b6:	460c      	mov	r4, r1
 800b0b8:	b976      	cbnz	r6, 800b0d8 <_Bfree+0x28>
 800b0ba:	2010      	movs	r0, #16
 800b0bc:	f7ff ffa2 	bl	800b004 <malloc>
 800b0c0:	4602      	mov	r2, r0
 800b0c2:	6268      	str	r0, [r5, #36]	; 0x24
 800b0c4:	b920      	cbnz	r0, 800b0d0 <_Bfree+0x20>
 800b0c6:	4b09      	ldr	r3, [pc, #36]	; (800b0ec <_Bfree+0x3c>)
 800b0c8:	4809      	ldr	r0, [pc, #36]	; (800b0f0 <_Bfree+0x40>)
 800b0ca:	218a      	movs	r1, #138	; 0x8a
 800b0cc:	f000 fd96 	bl	800bbfc <__assert_func>
 800b0d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b0d4:	6006      	str	r6, [r0, #0]
 800b0d6:	60c6      	str	r6, [r0, #12]
 800b0d8:	b13c      	cbz	r4, 800b0ea <_Bfree+0x3a>
 800b0da:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b0dc:	6862      	ldr	r2, [r4, #4]
 800b0de:	68db      	ldr	r3, [r3, #12]
 800b0e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b0e4:	6021      	str	r1, [r4, #0]
 800b0e6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b0ea:	bd70      	pop	{r4, r5, r6, pc}
 800b0ec:	08015559 	.word	0x08015559
 800b0f0:	080155dc 	.word	0x080155dc

0800b0f4 <__multadd>:
 800b0f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0f8:	690d      	ldr	r5, [r1, #16]
 800b0fa:	4607      	mov	r7, r0
 800b0fc:	460c      	mov	r4, r1
 800b0fe:	461e      	mov	r6, r3
 800b100:	f101 0c14 	add.w	ip, r1, #20
 800b104:	2000      	movs	r0, #0
 800b106:	f8dc 3000 	ldr.w	r3, [ip]
 800b10a:	b299      	uxth	r1, r3
 800b10c:	fb02 6101 	mla	r1, r2, r1, r6
 800b110:	0c1e      	lsrs	r6, r3, #16
 800b112:	0c0b      	lsrs	r3, r1, #16
 800b114:	fb02 3306 	mla	r3, r2, r6, r3
 800b118:	b289      	uxth	r1, r1
 800b11a:	3001      	adds	r0, #1
 800b11c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b120:	4285      	cmp	r5, r0
 800b122:	f84c 1b04 	str.w	r1, [ip], #4
 800b126:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b12a:	dcec      	bgt.n	800b106 <__multadd+0x12>
 800b12c:	b30e      	cbz	r6, 800b172 <__multadd+0x7e>
 800b12e:	68a3      	ldr	r3, [r4, #8]
 800b130:	42ab      	cmp	r3, r5
 800b132:	dc19      	bgt.n	800b168 <__multadd+0x74>
 800b134:	6861      	ldr	r1, [r4, #4]
 800b136:	4638      	mov	r0, r7
 800b138:	3101      	adds	r1, #1
 800b13a:	f7ff ff79 	bl	800b030 <_Balloc>
 800b13e:	4680      	mov	r8, r0
 800b140:	b928      	cbnz	r0, 800b14e <__multadd+0x5a>
 800b142:	4602      	mov	r2, r0
 800b144:	4b0c      	ldr	r3, [pc, #48]	; (800b178 <__multadd+0x84>)
 800b146:	480d      	ldr	r0, [pc, #52]	; (800b17c <__multadd+0x88>)
 800b148:	21b5      	movs	r1, #181	; 0xb5
 800b14a:	f000 fd57 	bl	800bbfc <__assert_func>
 800b14e:	6922      	ldr	r2, [r4, #16]
 800b150:	3202      	adds	r2, #2
 800b152:	f104 010c 	add.w	r1, r4, #12
 800b156:	0092      	lsls	r2, r2, #2
 800b158:	300c      	adds	r0, #12
 800b15a:	f7ff ff5b 	bl	800b014 <memcpy>
 800b15e:	4621      	mov	r1, r4
 800b160:	4638      	mov	r0, r7
 800b162:	f7ff ffa5 	bl	800b0b0 <_Bfree>
 800b166:	4644      	mov	r4, r8
 800b168:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b16c:	3501      	adds	r5, #1
 800b16e:	615e      	str	r6, [r3, #20]
 800b170:	6125      	str	r5, [r4, #16]
 800b172:	4620      	mov	r0, r4
 800b174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b178:	080155cb 	.word	0x080155cb
 800b17c:	080155dc 	.word	0x080155dc

0800b180 <__hi0bits>:
 800b180:	0c03      	lsrs	r3, r0, #16
 800b182:	041b      	lsls	r3, r3, #16
 800b184:	b9d3      	cbnz	r3, 800b1bc <__hi0bits+0x3c>
 800b186:	0400      	lsls	r0, r0, #16
 800b188:	2310      	movs	r3, #16
 800b18a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b18e:	bf04      	itt	eq
 800b190:	0200      	lsleq	r0, r0, #8
 800b192:	3308      	addeq	r3, #8
 800b194:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b198:	bf04      	itt	eq
 800b19a:	0100      	lsleq	r0, r0, #4
 800b19c:	3304      	addeq	r3, #4
 800b19e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b1a2:	bf04      	itt	eq
 800b1a4:	0080      	lsleq	r0, r0, #2
 800b1a6:	3302      	addeq	r3, #2
 800b1a8:	2800      	cmp	r0, #0
 800b1aa:	db05      	blt.n	800b1b8 <__hi0bits+0x38>
 800b1ac:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b1b0:	f103 0301 	add.w	r3, r3, #1
 800b1b4:	bf08      	it	eq
 800b1b6:	2320      	moveq	r3, #32
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	4770      	bx	lr
 800b1bc:	2300      	movs	r3, #0
 800b1be:	e7e4      	b.n	800b18a <__hi0bits+0xa>

0800b1c0 <__lo0bits>:
 800b1c0:	6803      	ldr	r3, [r0, #0]
 800b1c2:	f013 0207 	ands.w	r2, r3, #7
 800b1c6:	4601      	mov	r1, r0
 800b1c8:	d00b      	beq.n	800b1e2 <__lo0bits+0x22>
 800b1ca:	07da      	lsls	r2, r3, #31
 800b1cc:	d423      	bmi.n	800b216 <__lo0bits+0x56>
 800b1ce:	0798      	lsls	r0, r3, #30
 800b1d0:	bf49      	itett	mi
 800b1d2:	085b      	lsrmi	r3, r3, #1
 800b1d4:	089b      	lsrpl	r3, r3, #2
 800b1d6:	2001      	movmi	r0, #1
 800b1d8:	600b      	strmi	r3, [r1, #0]
 800b1da:	bf5c      	itt	pl
 800b1dc:	600b      	strpl	r3, [r1, #0]
 800b1de:	2002      	movpl	r0, #2
 800b1e0:	4770      	bx	lr
 800b1e2:	b298      	uxth	r0, r3
 800b1e4:	b9a8      	cbnz	r0, 800b212 <__lo0bits+0x52>
 800b1e6:	0c1b      	lsrs	r3, r3, #16
 800b1e8:	2010      	movs	r0, #16
 800b1ea:	b2da      	uxtb	r2, r3
 800b1ec:	b90a      	cbnz	r2, 800b1f2 <__lo0bits+0x32>
 800b1ee:	3008      	adds	r0, #8
 800b1f0:	0a1b      	lsrs	r3, r3, #8
 800b1f2:	071a      	lsls	r2, r3, #28
 800b1f4:	bf04      	itt	eq
 800b1f6:	091b      	lsreq	r3, r3, #4
 800b1f8:	3004      	addeq	r0, #4
 800b1fa:	079a      	lsls	r2, r3, #30
 800b1fc:	bf04      	itt	eq
 800b1fe:	089b      	lsreq	r3, r3, #2
 800b200:	3002      	addeq	r0, #2
 800b202:	07da      	lsls	r2, r3, #31
 800b204:	d403      	bmi.n	800b20e <__lo0bits+0x4e>
 800b206:	085b      	lsrs	r3, r3, #1
 800b208:	f100 0001 	add.w	r0, r0, #1
 800b20c:	d005      	beq.n	800b21a <__lo0bits+0x5a>
 800b20e:	600b      	str	r3, [r1, #0]
 800b210:	4770      	bx	lr
 800b212:	4610      	mov	r0, r2
 800b214:	e7e9      	b.n	800b1ea <__lo0bits+0x2a>
 800b216:	2000      	movs	r0, #0
 800b218:	4770      	bx	lr
 800b21a:	2020      	movs	r0, #32
 800b21c:	4770      	bx	lr
	...

0800b220 <__i2b>:
 800b220:	b510      	push	{r4, lr}
 800b222:	460c      	mov	r4, r1
 800b224:	2101      	movs	r1, #1
 800b226:	f7ff ff03 	bl	800b030 <_Balloc>
 800b22a:	4602      	mov	r2, r0
 800b22c:	b928      	cbnz	r0, 800b23a <__i2b+0x1a>
 800b22e:	4b05      	ldr	r3, [pc, #20]	; (800b244 <__i2b+0x24>)
 800b230:	4805      	ldr	r0, [pc, #20]	; (800b248 <__i2b+0x28>)
 800b232:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b236:	f000 fce1 	bl	800bbfc <__assert_func>
 800b23a:	2301      	movs	r3, #1
 800b23c:	6144      	str	r4, [r0, #20]
 800b23e:	6103      	str	r3, [r0, #16]
 800b240:	bd10      	pop	{r4, pc}
 800b242:	bf00      	nop
 800b244:	080155cb 	.word	0x080155cb
 800b248:	080155dc 	.word	0x080155dc

0800b24c <__multiply>:
 800b24c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b250:	4691      	mov	r9, r2
 800b252:	690a      	ldr	r2, [r1, #16]
 800b254:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b258:	429a      	cmp	r2, r3
 800b25a:	bfb8      	it	lt
 800b25c:	460b      	movlt	r3, r1
 800b25e:	460c      	mov	r4, r1
 800b260:	bfbc      	itt	lt
 800b262:	464c      	movlt	r4, r9
 800b264:	4699      	movlt	r9, r3
 800b266:	6927      	ldr	r7, [r4, #16]
 800b268:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b26c:	68a3      	ldr	r3, [r4, #8]
 800b26e:	6861      	ldr	r1, [r4, #4]
 800b270:	eb07 060a 	add.w	r6, r7, sl
 800b274:	42b3      	cmp	r3, r6
 800b276:	b085      	sub	sp, #20
 800b278:	bfb8      	it	lt
 800b27a:	3101      	addlt	r1, #1
 800b27c:	f7ff fed8 	bl	800b030 <_Balloc>
 800b280:	b930      	cbnz	r0, 800b290 <__multiply+0x44>
 800b282:	4602      	mov	r2, r0
 800b284:	4b44      	ldr	r3, [pc, #272]	; (800b398 <__multiply+0x14c>)
 800b286:	4845      	ldr	r0, [pc, #276]	; (800b39c <__multiply+0x150>)
 800b288:	f240 115d 	movw	r1, #349	; 0x15d
 800b28c:	f000 fcb6 	bl	800bbfc <__assert_func>
 800b290:	f100 0514 	add.w	r5, r0, #20
 800b294:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b298:	462b      	mov	r3, r5
 800b29a:	2200      	movs	r2, #0
 800b29c:	4543      	cmp	r3, r8
 800b29e:	d321      	bcc.n	800b2e4 <__multiply+0x98>
 800b2a0:	f104 0314 	add.w	r3, r4, #20
 800b2a4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b2a8:	f109 0314 	add.w	r3, r9, #20
 800b2ac:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b2b0:	9202      	str	r2, [sp, #8]
 800b2b2:	1b3a      	subs	r2, r7, r4
 800b2b4:	3a15      	subs	r2, #21
 800b2b6:	f022 0203 	bic.w	r2, r2, #3
 800b2ba:	3204      	adds	r2, #4
 800b2bc:	f104 0115 	add.w	r1, r4, #21
 800b2c0:	428f      	cmp	r7, r1
 800b2c2:	bf38      	it	cc
 800b2c4:	2204      	movcc	r2, #4
 800b2c6:	9201      	str	r2, [sp, #4]
 800b2c8:	9a02      	ldr	r2, [sp, #8]
 800b2ca:	9303      	str	r3, [sp, #12]
 800b2cc:	429a      	cmp	r2, r3
 800b2ce:	d80c      	bhi.n	800b2ea <__multiply+0x9e>
 800b2d0:	2e00      	cmp	r6, #0
 800b2d2:	dd03      	ble.n	800b2dc <__multiply+0x90>
 800b2d4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d05a      	beq.n	800b392 <__multiply+0x146>
 800b2dc:	6106      	str	r6, [r0, #16]
 800b2de:	b005      	add	sp, #20
 800b2e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2e4:	f843 2b04 	str.w	r2, [r3], #4
 800b2e8:	e7d8      	b.n	800b29c <__multiply+0x50>
 800b2ea:	f8b3 a000 	ldrh.w	sl, [r3]
 800b2ee:	f1ba 0f00 	cmp.w	sl, #0
 800b2f2:	d024      	beq.n	800b33e <__multiply+0xf2>
 800b2f4:	f104 0e14 	add.w	lr, r4, #20
 800b2f8:	46a9      	mov	r9, r5
 800b2fa:	f04f 0c00 	mov.w	ip, #0
 800b2fe:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b302:	f8d9 1000 	ldr.w	r1, [r9]
 800b306:	fa1f fb82 	uxth.w	fp, r2
 800b30a:	b289      	uxth	r1, r1
 800b30c:	fb0a 110b 	mla	r1, sl, fp, r1
 800b310:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b314:	f8d9 2000 	ldr.w	r2, [r9]
 800b318:	4461      	add	r1, ip
 800b31a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b31e:	fb0a c20b 	mla	r2, sl, fp, ip
 800b322:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b326:	b289      	uxth	r1, r1
 800b328:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b32c:	4577      	cmp	r7, lr
 800b32e:	f849 1b04 	str.w	r1, [r9], #4
 800b332:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b336:	d8e2      	bhi.n	800b2fe <__multiply+0xb2>
 800b338:	9a01      	ldr	r2, [sp, #4]
 800b33a:	f845 c002 	str.w	ip, [r5, r2]
 800b33e:	9a03      	ldr	r2, [sp, #12]
 800b340:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b344:	3304      	adds	r3, #4
 800b346:	f1b9 0f00 	cmp.w	r9, #0
 800b34a:	d020      	beq.n	800b38e <__multiply+0x142>
 800b34c:	6829      	ldr	r1, [r5, #0]
 800b34e:	f104 0c14 	add.w	ip, r4, #20
 800b352:	46ae      	mov	lr, r5
 800b354:	f04f 0a00 	mov.w	sl, #0
 800b358:	f8bc b000 	ldrh.w	fp, [ip]
 800b35c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b360:	fb09 220b 	mla	r2, r9, fp, r2
 800b364:	4492      	add	sl, r2
 800b366:	b289      	uxth	r1, r1
 800b368:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b36c:	f84e 1b04 	str.w	r1, [lr], #4
 800b370:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b374:	f8be 1000 	ldrh.w	r1, [lr]
 800b378:	0c12      	lsrs	r2, r2, #16
 800b37a:	fb09 1102 	mla	r1, r9, r2, r1
 800b37e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b382:	4567      	cmp	r7, ip
 800b384:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b388:	d8e6      	bhi.n	800b358 <__multiply+0x10c>
 800b38a:	9a01      	ldr	r2, [sp, #4]
 800b38c:	50a9      	str	r1, [r5, r2]
 800b38e:	3504      	adds	r5, #4
 800b390:	e79a      	b.n	800b2c8 <__multiply+0x7c>
 800b392:	3e01      	subs	r6, #1
 800b394:	e79c      	b.n	800b2d0 <__multiply+0x84>
 800b396:	bf00      	nop
 800b398:	080155cb 	.word	0x080155cb
 800b39c:	080155dc 	.word	0x080155dc

0800b3a0 <__pow5mult>:
 800b3a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b3a4:	4615      	mov	r5, r2
 800b3a6:	f012 0203 	ands.w	r2, r2, #3
 800b3aa:	4606      	mov	r6, r0
 800b3ac:	460f      	mov	r7, r1
 800b3ae:	d007      	beq.n	800b3c0 <__pow5mult+0x20>
 800b3b0:	4c25      	ldr	r4, [pc, #148]	; (800b448 <__pow5mult+0xa8>)
 800b3b2:	3a01      	subs	r2, #1
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b3ba:	f7ff fe9b 	bl	800b0f4 <__multadd>
 800b3be:	4607      	mov	r7, r0
 800b3c0:	10ad      	asrs	r5, r5, #2
 800b3c2:	d03d      	beq.n	800b440 <__pow5mult+0xa0>
 800b3c4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b3c6:	b97c      	cbnz	r4, 800b3e8 <__pow5mult+0x48>
 800b3c8:	2010      	movs	r0, #16
 800b3ca:	f7ff fe1b 	bl	800b004 <malloc>
 800b3ce:	4602      	mov	r2, r0
 800b3d0:	6270      	str	r0, [r6, #36]	; 0x24
 800b3d2:	b928      	cbnz	r0, 800b3e0 <__pow5mult+0x40>
 800b3d4:	4b1d      	ldr	r3, [pc, #116]	; (800b44c <__pow5mult+0xac>)
 800b3d6:	481e      	ldr	r0, [pc, #120]	; (800b450 <__pow5mult+0xb0>)
 800b3d8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b3dc:	f000 fc0e 	bl	800bbfc <__assert_func>
 800b3e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b3e4:	6004      	str	r4, [r0, #0]
 800b3e6:	60c4      	str	r4, [r0, #12]
 800b3e8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b3ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b3f0:	b94c      	cbnz	r4, 800b406 <__pow5mult+0x66>
 800b3f2:	f240 2171 	movw	r1, #625	; 0x271
 800b3f6:	4630      	mov	r0, r6
 800b3f8:	f7ff ff12 	bl	800b220 <__i2b>
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	f8c8 0008 	str.w	r0, [r8, #8]
 800b402:	4604      	mov	r4, r0
 800b404:	6003      	str	r3, [r0, #0]
 800b406:	f04f 0900 	mov.w	r9, #0
 800b40a:	07eb      	lsls	r3, r5, #31
 800b40c:	d50a      	bpl.n	800b424 <__pow5mult+0x84>
 800b40e:	4639      	mov	r1, r7
 800b410:	4622      	mov	r2, r4
 800b412:	4630      	mov	r0, r6
 800b414:	f7ff ff1a 	bl	800b24c <__multiply>
 800b418:	4639      	mov	r1, r7
 800b41a:	4680      	mov	r8, r0
 800b41c:	4630      	mov	r0, r6
 800b41e:	f7ff fe47 	bl	800b0b0 <_Bfree>
 800b422:	4647      	mov	r7, r8
 800b424:	106d      	asrs	r5, r5, #1
 800b426:	d00b      	beq.n	800b440 <__pow5mult+0xa0>
 800b428:	6820      	ldr	r0, [r4, #0]
 800b42a:	b938      	cbnz	r0, 800b43c <__pow5mult+0x9c>
 800b42c:	4622      	mov	r2, r4
 800b42e:	4621      	mov	r1, r4
 800b430:	4630      	mov	r0, r6
 800b432:	f7ff ff0b 	bl	800b24c <__multiply>
 800b436:	6020      	str	r0, [r4, #0]
 800b438:	f8c0 9000 	str.w	r9, [r0]
 800b43c:	4604      	mov	r4, r0
 800b43e:	e7e4      	b.n	800b40a <__pow5mult+0x6a>
 800b440:	4638      	mov	r0, r7
 800b442:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b446:	bf00      	nop
 800b448:	08015728 	.word	0x08015728
 800b44c:	08015559 	.word	0x08015559
 800b450:	080155dc 	.word	0x080155dc

0800b454 <__lshift>:
 800b454:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b458:	460c      	mov	r4, r1
 800b45a:	6849      	ldr	r1, [r1, #4]
 800b45c:	6923      	ldr	r3, [r4, #16]
 800b45e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b462:	68a3      	ldr	r3, [r4, #8]
 800b464:	4607      	mov	r7, r0
 800b466:	4691      	mov	r9, r2
 800b468:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b46c:	f108 0601 	add.w	r6, r8, #1
 800b470:	42b3      	cmp	r3, r6
 800b472:	db0b      	blt.n	800b48c <__lshift+0x38>
 800b474:	4638      	mov	r0, r7
 800b476:	f7ff fddb 	bl	800b030 <_Balloc>
 800b47a:	4605      	mov	r5, r0
 800b47c:	b948      	cbnz	r0, 800b492 <__lshift+0x3e>
 800b47e:	4602      	mov	r2, r0
 800b480:	4b2a      	ldr	r3, [pc, #168]	; (800b52c <__lshift+0xd8>)
 800b482:	482b      	ldr	r0, [pc, #172]	; (800b530 <__lshift+0xdc>)
 800b484:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b488:	f000 fbb8 	bl	800bbfc <__assert_func>
 800b48c:	3101      	adds	r1, #1
 800b48e:	005b      	lsls	r3, r3, #1
 800b490:	e7ee      	b.n	800b470 <__lshift+0x1c>
 800b492:	2300      	movs	r3, #0
 800b494:	f100 0114 	add.w	r1, r0, #20
 800b498:	f100 0210 	add.w	r2, r0, #16
 800b49c:	4618      	mov	r0, r3
 800b49e:	4553      	cmp	r3, sl
 800b4a0:	db37      	blt.n	800b512 <__lshift+0xbe>
 800b4a2:	6920      	ldr	r0, [r4, #16]
 800b4a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b4a8:	f104 0314 	add.w	r3, r4, #20
 800b4ac:	f019 091f 	ands.w	r9, r9, #31
 800b4b0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b4b4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b4b8:	d02f      	beq.n	800b51a <__lshift+0xc6>
 800b4ba:	f1c9 0e20 	rsb	lr, r9, #32
 800b4be:	468a      	mov	sl, r1
 800b4c0:	f04f 0c00 	mov.w	ip, #0
 800b4c4:	681a      	ldr	r2, [r3, #0]
 800b4c6:	fa02 f209 	lsl.w	r2, r2, r9
 800b4ca:	ea42 020c 	orr.w	r2, r2, ip
 800b4ce:	f84a 2b04 	str.w	r2, [sl], #4
 800b4d2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b4d6:	4298      	cmp	r0, r3
 800b4d8:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b4dc:	d8f2      	bhi.n	800b4c4 <__lshift+0x70>
 800b4de:	1b03      	subs	r3, r0, r4
 800b4e0:	3b15      	subs	r3, #21
 800b4e2:	f023 0303 	bic.w	r3, r3, #3
 800b4e6:	3304      	adds	r3, #4
 800b4e8:	f104 0215 	add.w	r2, r4, #21
 800b4ec:	4290      	cmp	r0, r2
 800b4ee:	bf38      	it	cc
 800b4f0:	2304      	movcc	r3, #4
 800b4f2:	f841 c003 	str.w	ip, [r1, r3]
 800b4f6:	f1bc 0f00 	cmp.w	ip, #0
 800b4fa:	d001      	beq.n	800b500 <__lshift+0xac>
 800b4fc:	f108 0602 	add.w	r6, r8, #2
 800b500:	3e01      	subs	r6, #1
 800b502:	4638      	mov	r0, r7
 800b504:	612e      	str	r6, [r5, #16]
 800b506:	4621      	mov	r1, r4
 800b508:	f7ff fdd2 	bl	800b0b0 <_Bfree>
 800b50c:	4628      	mov	r0, r5
 800b50e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b512:	f842 0f04 	str.w	r0, [r2, #4]!
 800b516:	3301      	adds	r3, #1
 800b518:	e7c1      	b.n	800b49e <__lshift+0x4a>
 800b51a:	3904      	subs	r1, #4
 800b51c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b520:	f841 2f04 	str.w	r2, [r1, #4]!
 800b524:	4298      	cmp	r0, r3
 800b526:	d8f9      	bhi.n	800b51c <__lshift+0xc8>
 800b528:	e7ea      	b.n	800b500 <__lshift+0xac>
 800b52a:	bf00      	nop
 800b52c:	080155cb 	.word	0x080155cb
 800b530:	080155dc 	.word	0x080155dc

0800b534 <__mcmp>:
 800b534:	b530      	push	{r4, r5, lr}
 800b536:	6902      	ldr	r2, [r0, #16]
 800b538:	690c      	ldr	r4, [r1, #16]
 800b53a:	1b12      	subs	r2, r2, r4
 800b53c:	d10e      	bne.n	800b55c <__mcmp+0x28>
 800b53e:	f100 0314 	add.w	r3, r0, #20
 800b542:	3114      	adds	r1, #20
 800b544:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b548:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b54c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b550:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b554:	42a5      	cmp	r5, r4
 800b556:	d003      	beq.n	800b560 <__mcmp+0x2c>
 800b558:	d305      	bcc.n	800b566 <__mcmp+0x32>
 800b55a:	2201      	movs	r2, #1
 800b55c:	4610      	mov	r0, r2
 800b55e:	bd30      	pop	{r4, r5, pc}
 800b560:	4283      	cmp	r3, r0
 800b562:	d3f3      	bcc.n	800b54c <__mcmp+0x18>
 800b564:	e7fa      	b.n	800b55c <__mcmp+0x28>
 800b566:	f04f 32ff 	mov.w	r2, #4294967295
 800b56a:	e7f7      	b.n	800b55c <__mcmp+0x28>

0800b56c <__mdiff>:
 800b56c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b570:	460c      	mov	r4, r1
 800b572:	4606      	mov	r6, r0
 800b574:	4611      	mov	r1, r2
 800b576:	4620      	mov	r0, r4
 800b578:	4690      	mov	r8, r2
 800b57a:	f7ff ffdb 	bl	800b534 <__mcmp>
 800b57e:	1e05      	subs	r5, r0, #0
 800b580:	d110      	bne.n	800b5a4 <__mdiff+0x38>
 800b582:	4629      	mov	r1, r5
 800b584:	4630      	mov	r0, r6
 800b586:	f7ff fd53 	bl	800b030 <_Balloc>
 800b58a:	b930      	cbnz	r0, 800b59a <__mdiff+0x2e>
 800b58c:	4b3a      	ldr	r3, [pc, #232]	; (800b678 <__mdiff+0x10c>)
 800b58e:	4602      	mov	r2, r0
 800b590:	f240 2132 	movw	r1, #562	; 0x232
 800b594:	4839      	ldr	r0, [pc, #228]	; (800b67c <__mdiff+0x110>)
 800b596:	f000 fb31 	bl	800bbfc <__assert_func>
 800b59a:	2301      	movs	r3, #1
 800b59c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b5a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5a4:	bfa4      	itt	ge
 800b5a6:	4643      	movge	r3, r8
 800b5a8:	46a0      	movge	r8, r4
 800b5aa:	4630      	mov	r0, r6
 800b5ac:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b5b0:	bfa6      	itte	ge
 800b5b2:	461c      	movge	r4, r3
 800b5b4:	2500      	movge	r5, #0
 800b5b6:	2501      	movlt	r5, #1
 800b5b8:	f7ff fd3a 	bl	800b030 <_Balloc>
 800b5bc:	b920      	cbnz	r0, 800b5c8 <__mdiff+0x5c>
 800b5be:	4b2e      	ldr	r3, [pc, #184]	; (800b678 <__mdiff+0x10c>)
 800b5c0:	4602      	mov	r2, r0
 800b5c2:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b5c6:	e7e5      	b.n	800b594 <__mdiff+0x28>
 800b5c8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b5cc:	6926      	ldr	r6, [r4, #16]
 800b5ce:	60c5      	str	r5, [r0, #12]
 800b5d0:	f104 0914 	add.w	r9, r4, #20
 800b5d4:	f108 0514 	add.w	r5, r8, #20
 800b5d8:	f100 0e14 	add.w	lr, r0, #20
 800b5dc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b5e0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b5e4:	f108 0210 	add.w	r2, r8, #16
 800b5e8:	46f2      	mov	sl, lr
 800b5ea:	2100      	movs	r1, #0
 800b5ec:	f859 3b04 	ldr.w	r3, [r9], #4
 800b5f0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b5f4:	fa1f f883 	uxth.w	r8, r3
 800b5f8:	fa11 f18b 	uxtah	r1, r1, fp
 800b5fc:	0c1b      	lsrs	r3, r3, #16
 800b5fe:	eba1 0808 	sub.w	r8, r1, r8
 800b602:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b606:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b60a:	fa1f f888 	uxth.w	r8, r8
 800b60e:	1419      	asrs	r1, r3, #16
 800b610:	454e      	cmp	r6, r9
 800b612:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b616:	f84a 3b04 	str.w	r3, [sl], #4
 800b61a:	d8e7      	bhi.n	800b5ec <__mdiff+0x80>
 800b61c:	1b33      	subs	r3, r6, r4
 800b61e:	3b15      	subs	r3, #21
 800b620:	f023 0303 	bic.w	r3, r3, #3
 800b624:	3304      	adds	r3, #4
 800b626:	3415      	adds	r4, #21
 800b628:	42a6      	cmp	r6, r4
 800b62a:	bf38      	it	cc
 800b62c:	2304      	movcc	r3, #4
 800b62e:	441d      	add	r5, r3
 800b630:	4473      	add	r3, lr
 800b632:	469e      	mov	lr, r3
 800b634:	462e      	mov	r6, r5
 800b636:	4566      	cmp	r6, ip
 800b638:	d30e      	bcc.n	800b658 <__mdiff+0xec>
 800b63a:	f10c 0203 	add.w	r2, ip, #3
 800b63e:	1b52      	subs	r2, r2, r5
 800b640:	f022 0203 	bic.w	r2, r2, #3
 800b644:	3d03      	subs	r5, #3
 800b646:	45ac      	cmp	ip, r5
 800b648:	bf38      	it	cc
 800b64a:	2200      	movcc	r2, #0
 800b64c:	441a      	add	r2, r3
 800b64e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b652:	b17b      	cbz	r3, 800b674 <__mdiff+0x108>
 800b654:	6107      	str	r7, [r0, #16]
 800b656:	e7a3      	b.n	800b5a0 <__mdiff+0x34>
 800b658:	f856 8b04 	ldr.w	r8, [r6], #4
 800b65c:	fa11 f288 	uxtah	r2, r1, r8
 800b660:	1414      	asrs	r4, r2, #16
 800b662:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b666:	b292      	uxth	r2, r2
 800b668:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b66c:	f84e 2b04 	str.w	r2, [lr], #4
 800b670:	1421      	asrs	r1, r4, #16
 800b672:	e7e0      	b.n	800b636 <__mdiff+0xca>
 800b674:	3f01      	subs	r7, #1
 800b676:	e7ea      	b.n	800b64e <__mdiff+0xe2>
 800b678:	080155cb 	.word	0x080155cb
 800b67c:	080155dc 	.word	0x080155dc

0800b680 <__d2b>:
 800b680:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b684:	4689      	mov	r9, r1
 800b686:	2101      	movs	r1, #1
 800b688:	ec57 6b10 	vmov	r6, r7, d0
 800b68c:	4690      	mov	r8, r2
 800b68e:	f7ff fccf 	bl	800b030 <_Balloc>
 800b692:	4604      	mov	r4, r0
 800b694:	b930      	cbnz	r0, 800b6a4 <__d2b+0x24>
 800b696:	4602      	mov	r2, r0
 800b698:	4b25      	ldr	r3, [pc, #148]	; (800b730 <__d2b+0xb0>)
 800b69a:	4826      	ldr	r0, [pc, #152]	; (800b734 <__d2b+0xb4>)
 800b69c:	f240 310a 	movw	r1, #778	; 0x30a
 800b6a0:	f000 faac 	bl	800bbfc <__assert_func>
 800b6a4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b6a8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b6ac:	bb35      	cbnz	r5, 800b6fc <__d2b+0x7c>
 800b6ae:	2e00      	cmp	r6, #0
 800b6b0:	9301      	str	r3, [sp, #4]
 800b6b2:	d028      	beq.n	800b706 <__d2b+0x86>
 800b6b4:	4668      	mov	r0, sp
 800b6b6:	9600      	str	r6, [sp, #0]
 800b6b8:	f7ff fd82 	bl	800b1c0 <__lo0bits>
 800b6bc:	9900      	ldr	r1, [sp, #0]
 800b6be:	b300      	cbz	r0, 800b702 <__d2b+0x82>
 800b6c0:	9a01      	ldr	r2, [sp, #4]
 800b6c2:	f1c0 0320 	rsb	r3, r0, #32
 800b6c6:	fa02 f303 	lsl.w	r3, r2, r3
 800b6ca:	430b      	orrs	r3, r1
 800b6cc:	40c2      	lsrs	r2, r0
 800b6ce:	6163      	str	r3, [r4, #20]
 800b6d0:	9201      	str	r2, [sp, #4]
 800b6d2:	9b01      	ldr	r3, [sp, #4]
 800b6d4:	61a3      	str	r3, [r4, #24]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	bf14      	ite	ne
 800b6da:	2202      	movne	r2, #2
 800b6dc:	2201      	moveq	r2, #1
 800b6de:	6122      	str	r2, [r4, #16]
 800b6e0:	b1d5      	cbz	r5, 800b718 <__d2b+0x98>
 800b6e2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b6e6:	4405      	add	r5, r0
 800b6e8:	f8c9 5000 	str.w	r5, [r9]
 800b6ec:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b6f0:	f8c8 0000 	str.w	r0, [r8]
 800b6f4:	4620      	mov	r0, r4
 800b6f6:	b003      	add	sp, #12
 800b6f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b6fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b700:	e7d5      	b.n	800b6ae <__d2b+0x2e>
 800b702:	6161      	str	r1, [r4, #20]
 800b704:	e7e5      	b.n	800b6d2 <__d2b+0x52>
 800b706:	a801      	add	r0, sp, #4
 800b708:	f7ff fd5a 	bl	800b1c0 <__lo0bits>
 800b70c:	9b01      	ldr	r3, [sp, #4]
 800b70e:	6163      	str	r3, [r4, #20]
 800b710:	2201      	movs	r2, #1
 800b712:	6122      	str	r2, [r4, #16]
 800b714:	3020      	adds	r0, #32
 800b716:	e7e3      	b.n	800b6e0 <__d2b+0x60>
 800b718:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b71c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b720:	f8c9 0000 	str.w	r0, [r9]
 800b724:	6918      	ldr	r0, [r3, #16]
 800b726:	f7ff fd2b 	bl	800b180 <__hi0bits>
 800b72a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b72e:	e7df      	b.n	800b6f0 <__d2b+0x70>
 800b730:	080155cb 	.word	0x080155cb
 800b734:	080155dc 	.word	0x080155dc

0800b738 <_calloc_r>:
 800b738:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b73a:	fba1 2402 	umull	r2, r4, r1, r2
 800b73e:	b94c      	cbnz	r4, 800b754 <_calloc_r+0x1c>
 800b740:	4611      	mov	r1, r2
 800b742:	9201      	str	r2, [sp, #4]
 800b744:	f000 f87a 	bl	800b83c <_malloc_r>
 800b748:	9a01      	ldr	r2, [sp, #4]
 800b74a:	4605      	mov	r5, r0
 800b74c:	b930      	cbnz	r0, 800b75c <_calloc_r+0x24>
 800b74e:	4628      	mov	r0, r5
 800b750:	b003      	add	sp, #12
 800b752:	bd30      	pop	{r4, r5, pc}
 800b754:	220c      	movs	r2, #12
 800b756:	6002      	str	r2, [r0, #0]
 800b758:	2500      	movs	r5, #0
 800b75a:	e7f8      	b.n	800b74e <_calloc_r+0x16>
 800b75c:	4621      	mov	r1, r4
 800b75e:	f7fe f941 	bl	80099e4 <memset>
 800b762:	e7f4      	b.n	800b74e <_calloc_r+0x16>

0800b764 <_free_r>:
 800b764:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b766:	2900      	cmp	r1, #0
 800b768:	d044      	beq.n	800b7f4 <_free_r+0x90>
 800b76a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b76e:	9001      	str	r0, [sp, #4]
 800b770:	2b00      	cmp	r3, #0
 800b772:	f1a1 0404 	sub.w	r4, r1, #4
 800b776:	bfb8      	it	lt
 800b778:	18e4      	addlt	r4, r4, r3
 800b77a:	f000 fa9b 	bl	800bcb4 <__malloc_lock>
 800b77e:	4a1e      	ldr	r2, [pc, #120]	; (800b7f8 <_free_r+0x94>)
 800b780:	9801      	ldr	r0, [sp, #4]
 800b782:	6813      	ldr	r3, [r2, #0]
 800b784:	b933      	cbnz	r3, 800b794 <_free_r+0x30>
 800b786:	6063      	str	r3, [r4, #4]
 800b788:	6014      	str	r4, [r2, #0]
 800b78a:	b003      	add	sp, #12
 800b78c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b790:	f000 ba96 	b.w	800bcc0 <__malloc_unlock>
 800b794:	42a3      	cmp	r3, r4
 800b796:	d908      	bls.n	800b7aa <_free_r+0x46>
 800b798:	6825      	ldr	r5, [r4, #0]
 800b79a:	1961      	adds	r1, r4, r5
 800b79c:	428b      	cmp	r3, r1
 800b79e:	bf01      	itttt	eq
 800b7a0:	6819      	ldreq	r1, [r3, #0]
 800b7a2:	685b      	ldreq	r3, [r3, #4]
 800b7a4:	1949      	addeq	r1, r1, r5
 800b7a6:	6021      	streq	r1, [r4, #0]
 800b7a8:	e7ed      	b.n	800b786 <_free_r+0x22>
 800b7aa:	461a      	mov	r2, r3
 800b7ac:	685b      	ldr	r3, [r3, #4]
 800b7ae:	b10b      	cbz	r3, 800b7b4 <_free_r+0x50>
 800b7b0:	42a3      	cmp	r3, r4
 800b7b2:	d9fa      	bls.n	800b7aa <_free_r+0x46>
 800b7b4:	6811      	ldr	r1, [r2, #0]
 800b7b6:	1855      	adds	r5, r2, r1
 800b7b8:	42a5      	cmp	r5, r4
 800b7ba:	d10b      	bne.n	800b7d4 <_free_r+0x70>
 800b7bc:	6824      	ldr	r4, [r4, #0]
 800b7be:	4421      	add	r1, r4
 800b7c0:	1854      	adds	r4, r2, r1
 800b7c2:	42a3      	cmp	r3, r4
 800b7c4:	6011      	str	r1, [r2, #0]
 800b7c6:	d1e0      	bne.n	800b78a <_free_r+0x26>
 800b7c8:	681c      	ldr	r4, [r3, #0]
 800b7ca:	685b      	ldr	r3, [r3, #4]
 800b7cc:	6053      	str	r3, [r2, #4]
 800b7ce:	4421      	add	r1, r4
 800b7d0:	6011      	str	r1, [r2, #0]
 800b7d2:	e7da      	b.n	800b78a <_free_r+0x26>
 800b7d4:	d902      	bls.n	800b7dc <_free_r+0x78>
 800b7d6:	230c      	movs	r3, #12
 800b7d8:	6003      	str	r3, [r0, #0]
 800b7da:	e7d6      	b.n	800b78a <_free_r+0x26>
 800b7dc:	6825      	ldr	r5, [r4, #0]
 800b7de:	1961      	adds	r1, r4, r5
 800b7e0:	428b      	cmp	r3, r1
 800b7e2:	bf04      	itt	eq
 800b7e4:	6819      	ldreq	r1, [r3, #0]
 800b7e6:	685b      	ldreq	r3, [r3, #4]
 800b7e8:	6063      	str	r3, [r4, #4]
 800b7ea:	bf04      	itt	eq
 800b7ec:	1949      	addeq	r1, r1, r5
 800b7ee:	6021      	streq	r1, [r4, #0]
 800b7f0:	6054      	str	r4, [r2, #4]
 800b7f2:	e7ca      	b.n	800b78a <_free_r+0x26>
 800b7f4:	b003      	add	sp, #12
 800b7f6:	bd30      	pop	{r4, r5, pc}
 800b7f8:	20000598 	.word	0x20000598

0800b7fc <sbrk_aligned>:
 800b7fc:	b570      	push	{r4, r5, r6, lr}
 800b7fe:	4e0e      	ldr	r6, [pc, #56]	; (800b838 <sbrk_aligned+0x3c>)
 800b800:	460c      	mov	r4, r1
 800b802:	6831      	ldr	r1, [r6, #0]
 800b804:	4605      	mov	r5, r0
 800b806:	b911      	cbnz	r1, 800b80e <sbrk_aligned+0x12>
 800b808:	f000 f9e8 	bl	800bbdc <_sbrk_r>
 800b80c:	6030      	str	r0, [r6, #0]
 800b80e:	4621      	mov	r1, r4
 800b810:	4628      	mov	r0, r5
 800b812:	f000 f9e3 	bl	800bbdc <_sbrk_r>
 800b816:	1c43      	adds	r3, r0, #1
 800b818:	d00a      	beq.n	800b830 <sbrk_aligned+0x34>
 800b81a:	1cc4      	adds	r4, r0, #3
 800b81c:	f024 0403 	bic.w	r4, r4, #3
 800b820:	42a0      	cmp	r0, r4
 800b822:	d007      	beq.n	800b834 <sbrk_aligned+0x38>
 800b824:	1a21      	subs	r1, r4, r0
 800b826:	4628      	mov	r0, r5
 800b828:	f000 f9d8 	bl	800bbdc <_sbrk_r>
 800b82c:	3001      	adds	r0, #1
 800b82e:	d101      	bne.n	800b834 <sbrk_aligned+0x38>
 800b830:	f04f 34ff 	mov.w	r4, #4294967295
 800b834:	4620      	mov	r0, r4
 800b836:	bd70      	pop	{r4, r5, r6, pc}
 800b838:	2000059c 	.word	0x2000059c

0800b83c <_malloc_r>:
 800b83c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b840:	1ccd      	adds	r5, r1, #3
 800b842:	f025 0503 	bic.w	r5, r5, #3
 800b846:	3508      	adds	r5, #8
 800b848:	2d0c      	cmp	r5, #12
 800b84a:	bf38      	it	cc
 800b84c:	250c      	movcc	r5, #12
 800b84e:	2d00      	cmp	r5, #0
 800b850:	4607      	mov	r7, r0
 800b852:	db01      	blt.n	800b858 <_malloc_r+0x1c>
 800b854:	42a9      	cmp	r1, r5
 800b856:	d905      	bls.n	800b864 <_malloc_r+0x28>
 800b858:	230c      	movs	r3, #12
 800b85a:	603b      	str	r3, [r7, #0]
 800b85c:	2600      	movs	r6, #0
 800b85e:	4630      	mov	r0, r6
 800b860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b864:	4e2e      	ldr	r6, [pc, #184]	; (800b920 <_malloc_r+0xe4>)
 800b866:	f000 fa25 	bl	800bcb4 <__malloc_lock>
 800b86a:	6833      	ldr	r3, [r6, #0]
 800b86c:	461c      	mov	r4, r3
 800b86e:	bb34      	cbnz	r4, 800b8be <_malloc_r+0x82>
 800b870:	4629      	mov	r1, r5
 800b872:	4638      	mov	r0, r7
 800b874:	f7ff ffc2 	bl	800b7fc <sbrk_aligned>
 800b878:	1c43      	adds	r3, r0, #1
 800b87a:	4604      	mov	r4, r0
 800b87c:	d14d      	bne.n	800b91a <_malloc_r+0xde>
 800b87e:	6834      	ldr	r4, [r6, #0]
 800b880:	4626      	mov	r6, r4
 800b882:	2e00      	cmp	r6, #0
 800b884:	d140      	bne.n	800b908 <_malloc_r+0xcc>
 800b886:	6823      	ldr	r3, [r4, #0]
 800b888:	4631      	mov	r1, r6
 800b88a:	4638      	mov	r0, r7
 800b88c:	eb04 0803 	add.w	r8, r4, r3
 800b890:	f000 f9a4 	bl	800bbdc <_sbrk_r>
 800b894:	4580      	cmp	r8, r0
 800b896:	d13a      	bne.n	800b90e <_malloc_r+0xd2>
 800b898:	6821      	ldr	r1, [r4, #0]
 800b89a:	3503      	adds	r5, #3
 800b89c:	1a6d      	subs	r5, r5, r1
 800b89e:	f025 0503 	bic.w	r5, r5, #3
 800b8a2:	3508      	adds	r5, #8
 800b8a4:	2d0c      	cmp	r5, #12
 800b8a6:	bf38      	it	cc
 800b8a8:	250c      	movcc	r5, #12
 800b8aa:	4629      	mov	r1, r5
 800b8ac:	4638      	mov	r0, r7
 800b8ae:	f7ff ffa5 	bl	800b7fc <sbrk_aligned>
 800b8b2:	3001      	adds	r0, #1
 800b8b4:	d02b      	beq.n	800b90e <_malloc_r+0xd2>
 800b8b6:	6823      	ldr	r3, [r4, #0]
 800b8b8:	442b      	add	r3, r5
 800b8ba:	6023      	str	r3, [r4, #0]
 800b8bc:	e00e      	b.n	800b8dc <_malloc_r+0xa0>
 800b8be:	6822      	ldr	r2, [r4, #0]
 800b8c0:	1b52      	subs	r2, r2, r5
 800b8c2:	d41e      	bmi.n	800b902 <_malloc_r+0xc6>
 800b8c4:	2a0b      	cmp	r2, #11
 800b8c6:	d916      	bls.n	800b8f6 <_malloc_r+0xba>
 800b8c8:	1961      	adds	r1, r4, r5
 800b8ca:	42a3      	cmp	r3, r4
 800b8cc:	6025      	str	r5, [r4, #0]
 800b8ce:	bf18      	it	ne
 800b8d0:	6059      	strne	r1, [r3, #4]
 800b8d2:	6863      	ldr	r3, [r4, #4]
 800b8d4:	bf08      	it	eq
 800b8d6:	6031      	streq	r1, [r6, #0]
 800b8d8:	5162      	str	r2, [r4, r5]
 800b8da:	604b      	str	r3, [r1, #4]
 800b8dc:	4638      	mov	r0, r7
 800b8de:	f104 060b 	add.w	r6, r4, #11
 800b8e2:	f000 f9ed 	bl	800bcc0 <__malloc_unlock>
 800b8e6:	f026 0607 	bic.w	r6, r6, #7
 800b8ea:	1d23      	adds	r3, r4, #4
 800b8ec:	1af2      	subs	r2, r6, r3
 800b8ee:	d0b6      	beq.n	800b85e <_malloc_r+0x22>
 800b8f0:	1b9b      	subs	r3, r3, r6
 800b8f2:	50a3      	str	r3, [r4, r2]
 800b8f4:	e7b3      	b.n	800b85e <_malloc_r+0x22>
 800b8f6:	6862      	ldr	r2, [r4, #4]
 800b8f8:	42a3      	cmp	r3, r4
 800b8fa:	bf0c      	ite	eq
 800b8fc:	6032      	streq	r2, [r6, #0]
 800b8fe:	605a      	strne	r2, [r3, #4]
 800b900:	e7ec      	b.n	800b8dc <_malloc_r+0xa0>
 800b902:	4623      	mov	r3, r4
 800b904:	6864      	ldr	r4, [r4, #4]
 800b906:	e7b2      	b.n	800b86e <_malloc_r+0x32>
 800b908:	4634      	mov	r4, r6
 800b90a:	6876      	ldr	r6, [r6, #4]
 800b90c:	e7b9      	b.n	800b882 <_malloc_r+0x46>
 800b90e:	230c      	movs	r3, #12
 800b910:	603b      	str	r3, [r7, #0]
 800b912:	4638      	mov	r0, r7
 800b914:	f000 f9d4 	bl	800bcc0 <__malloc_unlock>
 800b918:	e7a1      	b.n	800b85e <_malloc_r+0x22>
 800b91a:	6025      	str	r5, [r4, #0]
 800b91c:	e7de      	b.n	800b8dc <_malloc_r+0xa0>
 800b91e:	bf00      	nop
 800b920:	20000598 	.word	0x20000598

0800b924 <__ssputs_r>:
 800b924:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b928:	688e      	ldr	r6, [r1, #8]
 800b92a:	429e      	cmp	r6, r3
 800b92c:	4682      	mov	sl, r0
 800b92e:	460c      	mov	r4, r1
 800b930:	4690      	mov	r8, r2
 800b932:	461f      	mov	r7, r3
 800b934:	d838      	bhi.n	800b9a8 <__ssputs_r+0x84>
 800b936:	898a      	ldrh	r2, [r1, #12]
 800b938:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b93c:	d032      	beq.n	800b9a4 <__ssputs_r+0x80>
 800b93e:	6825      	ldr	r5, [r4, #0]
 800b940:	6909      	ldr	r1, [r1, #16]
 800b942:	eba5 0901 	sub.w	r9, r5, r1
 800b946:	6965      	ldr	r5, [r4, #20]
 800b948:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b94c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b950:	3301      	adds	r3, #1
 800b952:	444b      	add	r3, r9
 800b954:	106d      	asrs	r5, r5, #1
 800b956:	429d      	cmp	r5, r3
 800b958:	bf38      	it	cc
 800b95a:	461d      	movcc	r5, r3
 800b95c:	0553      	lsls	r3, r2, #21
 800b95e:	d531      	bpl.n	800b9c4 <__ssputs_r+0xa0>
 800b960:	4629      	mov	r1, r5
 800b962:	f7ff ff6b 	bl	800b83c <_malloc_r>
 800b966:	4606      	mov	r6, r0
 800b968:	b950      	cbnz	r0, 800b980 <__ssputs_r+0x5c>
 800b96a:	230c      	movs	r3, #12
 800b96c:	f8ca 3000 	str.w	r3, [sl]
 800b970:	89a3      	ldrh	r3, [r4, #12]
 800b972:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b976:	81a3      	strh	r3, [r4, #12]
 800b978:	f04f 30ff 	mov.w	r0, #4294967295
 800b97c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b980:	6921      	ldr	r1, [r4, #16]
 800b982:	464a      	mov	r2, r9
 800b984:	f7ff fb46 	bl	800b014 <memcpy>
 800b988:	89a3      	ldrh	r3, [r4, #12]
 800b98a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b98e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b992:	81a3      	strh	r3, [r4, #12]
 800b994:	6126      	str	r6, [r4, #16]
 800b996:	6165      	str	r5, [r4, #20]
 800b998:	444e      	add	r6, r9
 800b99a:	eba5 0509 	sub.w	r5, r5, r9
 800b99e:	6026      	str	r6, [r4, #0]
 800b9a0:	60a5      	str	r5, [r4, #8]
 800b9a2:	463e      	mov	r6, r7
 800b9a4:	42be      	cmp	r6, r7
 800b9a6:	d900      	bls.n	800b9aa <__ssputs_r+0x86>
 800b9a8:	463e      	mov	r6, r7
 800b9aa:	6820      	ldr	r0, [r4, #0]
 800b9ac:	4632      	mov	r2, r6
 800b9ae:	4641      	mov	r1, r8
 800b9b0:	f000 f966 	bl	800bc80 <memmove>
 800b9b4:	68a3      	ldr	r3, [r4, #8]
 800b9b6:	1b9b      	subs	r3, r3, r6
 800b9b8:	60a3      	str	r3, [r4, #8]
 800b9ba:	6823      	ldr	r3, [r4, #0]
 800b9bc:	4433      	add	r3, r6
 800b9be:	6023      	str	r3, [r4, #0]
 800b9c0:	2000      	movs	r0, #0
 800b9c2:	e7db      	b.n	800b97c <__ssputs_r+0x58>
 800b9c4:	462a      	mov	r2, r5
 800b9c6:	f000 f981 	bl	800bccc <_realloc_r>
 800b9ca:	4606      	mov	r6, r0
 800b9cc:	2800      	cmp	r0, #0
 800b9ce:	d1e1      	bne.n	800b994 <__ssputs_r+0x70>
 800b9d0:	6921      	ldr	r1, [r4, #16]
 800b9d2:	4650      	mov	r0, sl
 800b9d4:	f7ff fec6 	bl	800b764 <_free_r>
 800b9d8:	e7c7      	b.n	800b96a <__ssputs_r+0x46>
	...

0800b9dc <_svfiprintf_r>:
 800b9dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9e0:	4698      	mov	r8, r3
 800b9e2:	898b      	ldrh	r3, [r1, #12]
 800b9e4:	061b      	lsls	r3, r3, #24
 800b9e6:	b09d      	sub	sp, #116	; 0x74
 800b9e8:	4607      	mov	r7, r0
 800b9ea:	460d      	mov	r5, r1
 800b9ec:	4614      	mov	r4, r2
 800b9ee:	d50e      	bpl.n	800ba0e <_svfiprintf_r+0x32>
 800b9f0:	690b      	ldr	r3, [r1, #16]
 800b9f2:	b963      	cbnz	r3, 800ba0e <_svfiprintf_r+0x32>
 800b9f4:	2140      	movs	r1, #64	; 0x40
 800b9f6:	f7ff ff21 	bl	800b83c <_malloc_r>
 800b9fa:	6028      	str	r0, [r5, #0]
 800b9fc:	6128      	str	r0, [r5, #16]
 800b9fe:	b920      	cbnz	r0, 800ba0a <_svfiprintf_r+0x2e>
 800ba00:	230c      	movs	r3, #12
 800ba02:	603b      	str	r3, [r7, #0]
 800ba04:	f04f 30ff 	mov.w	r0, #4294967295
 800ba08:	e0d1      	b.n	800bbae <_svfiprintf_r+0x1d2>
 800ba0a:	2340      	movs	r3, #64	; 0x40
 800ba0c:	616b      	str	r3, [r5, #20]
 800ba0e:	2300      	movs	r3, #0
 800ba10:	9309      	str	r3, [sp, #36]	; 0x24
 800ba12:	2320      	movs	r3, #32
 800ba14:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ba18:	f8cd 800c 	str.w	r8, [sp, #12]
 800ba1c:	2330      	movs	r3, #48	; 0x30
 800ba1e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800bbc8 <_svfiprintf_r+0x1ec>
 800ba22:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ba26:	f04f 0901 	mov.w	r9, #1
 800ba2a:	4623      	mov	r3, r4
 800ba2c:	469a      	mov	sl, r3
 800ba2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ba32:	b10a      	cbz	r2, 800ba38 <_svfiprintf_r+0x5c>
 800ba34:	2a25      	cmp	r2, #37	; 0x25
 800ba36:	d1f9      	bne.n	800ba2c <_svfiprintf_r+0x50>
 800ba38:	ebba 0b04 	subs.w	fp, sl, r4
 800ba3c:	d00b      	beq.n	800ba56 <_svfiprintf_r+0x7a>
 800ba3e:	465b      	mov	r3, fp
 800ba40:	4622      	mov	r2, r4
 800ba42:	4629      	mov	r1, r5
 800ba44:	4638      	mov	r0, r7
 800ba46:	f7ff ff6d 	bl	800b924 <__ssputs_r>
 800ba4a:	3001      	adds	r0, #1
 800ba4c:	f000 80aa 	beq.w	800bba4 <_svfiprintf_r+0x1c8>
 800ba50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba52:	445a      	add	r2, fp
 800ba54:	9209      	str	r2, [sp, #36]	; 0x24
 800ba56:	f89a 3000 	ldrb.w	r3, [sl]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	f000 80a2 	beq.w	800bba4 <_svfiprintf_r+0x1c8>
 800ba60:	2300      	movs	r3, #0
 800ba62:	f04f 32ff 	mov.w	r2, #4294967295
 800ba66:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ba6a:	f10a 0a01 	add.w	sl, sl, #1
 800ba6e:	9304      	str	r3, [sp, #16]
 800ba70:	9307      	str	r3, [sp, #28]
 800ba72:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ba76:	931a      	str	r3, [sp, #104]	; 0x68
 800ba78:	4654      	mov	r4, sl
 800ba7a:	2205      	movs	r2, #5
 800ba7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba80:	4851      	ldr	r0, [pc, #324]	; (800bbc8 <_svfiprintf_r+0x1ec>)
 800ba82:	f7f4 fbb5 	bl	80001f0 <memchr>
 800ba86:	9a04      	ldr	r2, [sp, #16]
 800ba88:	b9d8      	cbnz	r0, 800bac2 <_svfiprintf_r+0xe6>
 800ba8a:	06d0      	lsls	r0, r2, #27
 800ba8c:	bf44      	itt	mi
 800ba8e:	2320      	movmi	r3, #32
 800ba90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba94:	0711      	lsls	r1, r2, #28
 800ba96:	bf44      	itt	mi
 800ba98:	232b      	movmi	r3, #43	; 0x2b
 800ba9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba9e:	f89a 3000 	ldrb.w	r3, [sl]
 800baa2:	2b2a      	cmp	r3, #42	; 0x2a
 800baa4:	d015      	beq.n	800bad2 <_svfiprintf_r+0xf6>
 800baa6:	9a07      	ldr	r2, [sp, #28]
 800baa8:	4654      	mov	r4, sl
 800baaa:	2000      	movs	r0, #0
 800baac:	f04f 0c0a 	mov.w	ip, #10
 800bab0:	4621      	mov	r1, r4
 800bab2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bab6:	3b30      	subs	r3, #48	; 0x30
 800bab8:	2b09      	cmp	r3, #9
 800baba:	d94e      	bls.n	800bb5a <_svfiprintf_r+0x17e>
 800babc:	b1b0      	cbz	r0, 800baec <_svfiprintf_r+0x110>
 800babe:	9207      	str	r2, [sp, #28]
 800bac0:	e014      	b.n	800baec <_svfiprintf_r+0x110>
 800bac2:	eba0 0308 	sub.w	r3, r0, r8
 800bac6:	fa09 f303 	lsl.w	r3, r9, r3
 800baca:	4313      	orrs	r3, r2
 800bacc:	9304      	str	r3, [sp, #16]
 800bace:	46a2      	mov	sl, r4
 800bad0:	e7d2      	b.n	800ba78 <_svfiprintf_r+0x9c>
 800bad2:	9b03      	ldr	r3, [sp, #12]
 800bad4:	1d19      	adds	r1, r3, #4
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	9103      	str	r1, [sp, #12]
 800bada:	2b00      	cmp	r3, #0
 800badc:	bfbb      	ittet	lt
 800bade:	425b      	neglt	r3, r3
 800bae0:	f042 0202 	orrlt.w	r2, r2, #2
 800bae4:	9307      	strge	r3, [sp, #28]
 800bae6:	9307      	strlt	r3, [sp, #28]
 800bae8:	bfb8      	it	lt
 800baea:	9204      	strlt	r2, [sp, #16]
 800baec:	7823      	ldrb	r3, [r4, #0]
 800baee:	2b2e      	cmp	r3, #46	; 0x2e
 800baf0:	d10c      	bne.n	800bb0c <_svfiprintf_r+0x130>
 800baf2:	7863      	ldrb	r3, [r4, #1]
 800baf4:	2b2a      	cmp	r3, #42	; 0x2a
 800baf6:	d135      	bne.n	800bb64 <_svfiprintf_r+0x188>
 800baf8:	9b03      	ldr	r3, [sp, #12]
 800bafa:	1d1a      	adds	r2, r3, #4
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	9203      	str	r2, [sp, #12]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	bfb8      	it	lt
 800bb04:	f04f 33ff 	movlt.w	r3, #4294967295
 800bb08:	3402      	adds	r4, #2
 800bb0a:	9305      	str	r3, [sp, #20]
 800bb0c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bbd8 <_svfiprintf_r+0x1fc>
 800bb10:	7821      	ldrb	r1, [r4, #0]
 800bb12:	2203      	movs	r2, #3
 800bb14:	4650      	mov	r0, sl
 800bb16:	f7f4 fb6b 	bl	80001f0 <memchr>
 800bb1a:	b140      	cbz	r0, 800bb2e <_svfiprintf_r+0x152>
 800bb1c:	2340      	movs	r3, #64	; 0x40
 800bb1e:	eba0 000a 	sub.w	r0, r0, sl
 800bb22:	fa03 f000 	lsl.w	r0, r3, r0
 800bb26:	9b04      	ldr	r3, [sp, #16]
 800bb28:	4303      	orrs	r3, r0
 800bb2a:	3401      	adds	r4, #1
 800bb2c:	9304      	str	r3, [sp, #16]
 800bb2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb32:	4826      	ldr	r0, [pc, #152]	; (800bbcc <_svfiprintf_r+0x1f0>)
 800bb34:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bb38:	2206      	movs	r2, #6
 800bb3a:	f7f4 fb59 	bl	80001f0 <memchr>
 800bb3e:	2800      	cmp	r0, #0
 800bb40:	d038      	beq.n	800bbb4 <_svfiprintf_r+0x1d8>
 800bb42:	4b23      	ldr	r3, [pc, #140]	; (800bbd0 <_svfiprintf_r+0x1f4>)
 800bb44:	bb1b      	cbnz	r3, 800bb8e <_svfiprintf_r+0x1b2>
 800bb46:	9b03      	ldr	r3, [sp, #12]
 800bb48:	3307      	adds	r3, #7
 800bb4a:	f023 0307 	bic.w	r3, r3, #7
 800bb4e:	3308      	adds	r3, #8
 800bb50:	9303      	str	r3, [sp, #12]
 800bb52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb54:	4433      	add	r3, r6
 800bb56:	9309      	str	r3, [sp, #36]	; 0x24
 800bb58:	e767      	b.n	800ba2a <_svfiprintf_r+0x4e>
 800bb5a:	fb0c 3202 	mla	r2, ip, r2, r3
 800bb5e:	460c      	mov	r4, r1
 800bb60:	2001      	movs	r0, #1
 800bb62:	e7a5      	b.n	800bab0 <_svfiprintf_r+0xd4>
 800bb64:	2300      	movs	r3, #0
 800bb66:	3401      	adds	r4, #1
 800bb68:	9305      	str	r3, [sp, #20]
 800bb6a:	4619      	mov	r1, r3
 800bb6c:	f04f 0c0a 	mov.w	ip, #10
 800bb70:	4620      	mov	r0, r4
 800bb72:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bb76:	3a30      	subs	r2, #48	; 0x30
 800bb78:	2a09      	cmp	r2, #9
 800bb7a:	d903      	bls.n	800bb84 <_svfiprintf_r+0x1a8>
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d0c5      	beq.n	800bb0c <_svfiprintf_r+0x130>
 800bb80:	9105      	str	r1, [sp, #20]
 800bb82:	e7c3      	b.n	800bb0c <_svfiprintf_r+0x130>
 800bb84:	fb0c 2101 	mla	r1, ip, r1, r2
 800bb88:	4604      	mov	r4, r0
 800bb8a:	2301      	movs	r3, #1
 800bb8c:	e7f0      	b.n	800bb70 <_svfiprintf_r+0x194>
 800bb8e:	ab03      	add	r3, sp, #12
 800bb90:	9300      	str	r3, [sp, #0]
 800bb92:	462a      	mov	r2, r5
 800bb94:	4b0f      	ldr	r3, [pc, #60]	; (800bbd4 <_svfiprintf_r+0x1f8>)
 800bb96:	a904      	add	r1, sp, #16
 800bb98:	4638      	mov	r0, r7
 800bb9a:	f7fd ffcb 	bl	8009b34 <_printf_float>
 800bb9e:	1c42      	adds	r2, r0, #1
 800bba0:	4606      	mov	r6, r0
 800bba2:	d1d6      	bne.n	800bb52 <_svfiprintf_r+0x176>
 800bba4:	89ab      	ldrh	r3, [r5, #12]
 800bba6:	065b      	lsls	r3, r3, #25
 800bba8:	f53f af2c 	bmi.w	800ba04 <_svfiprintf_r+0x28>
 800bbac:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bbae:	b01d      	add	sp, #116	; 0x74
 800bbb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbb4:	ab03      	add	r3, sp, #12
 800bbb6:	9300      	str	r3, [sp, #0]
 800bbb8:	462a      	mov	r2, r5
 800bbba:	4b06      	ldr	r3, [pc, #24]	; (800bbd4 <_svfiprintf_r+0x1f8>)
 800bbbc:	a904      	add	r1, sp, #16
 800bbbe:	4638      	mov	r0, r7
 800bbc0:	f7fe fa5c 	bl	800a07c <_printf_i>
 800bbc4:	e7eb      	b.n	800bb9e <_svfiprintf_r+0x1c2>
 800bbc6:	bf00      	nop
 800bbc8:	08015734 	.word	0x08015734
 800bbcc:	0801573e 	.word	0x0801573e
 800bbd0:	08009b35 	.word	0x08009b35
 800bbd4:	0800b925 	.word	0x0800b925
 800bbd8:	0801573a 	.word	0x0801573a

0800bbdc <_sbrk_r>:
 800bbdc:	b538      	push	{r3, r4, r5, lr}
 800bbde:	4d06      	ldr	r5, [pc, #24]	; (800bbf8 <_sbrk_r+0x1c>)
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	4604      	mov	r4, r0
 800bbe4:	4608      	mov	r0, r1
 800bbe6:	602b      	str	r3, [r5, #0]
 800bbe8:	f7f6 ff5a 	bl	8002aa0 <_sbrk>
 800bbec:	1c43      	adds	r3, r0, #1
 800bbee:	d102      	bne.n	800bbf6 <_sbrk_r+0x1a>
 800bbf0:	682b      	ldr	r3, [r5, #0]
 800bbf2:	b103      	cbz	r3, 800bbf6 <_sbrk_r+0x1a>
 800bbf4:	6023      	str	r3, [r4, #0]
 800bbf6:	bd38      	pop	{r3, r4, r5, pc}
 800bbf8:	200005a0 	.word	0x200005a0

0800bbfc <__assert_func>:
 800bbfc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bbfe:	4614      	mov	r4, r2
 800bc00:	461a      	mov	r2, r3
 800bc02:	4b09      	ldr	r3, [pc, #36]	; (800bc28 <__assert_func+0x2c>)
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	4605      	mov	r5, r0
 800bc08:	68d8      	ldr	r0, [r3, #12]
 800bc0a:	b14c      	cbz	r4, 800bc20 <__assert_func+0x24>
 800bc0c:	4b07      	ldr	r3, [pc, #28]	; (800bc2c <__assert_func+0x30>)
 800bc0e:	9100      	str	r1, [sp, #0]
 800bc10:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bc14:	4906      	ldr	r1, [pc, #24]	; (800bc30 <__assert_func+0x34>)
 800bc16:	462b      	mov	r3, r5
 800bc18:	f000 f80e 	bl	800bc38 <fiprintf>
 800bc1c:	f000 faac 	bl	800c178 <abort>
 800bc20:	4b04      	ldr	r3, [pc, #16]	; (800bc34 <__assert_func+0x38>)
 800bc22:	461c      	mov	r4, r3
 800bc24:	e7f3      	b.n	800bc0e <__assert_func+0x12>
 800bc26:	bf00      	nop
 800bc28:	20000028 	.word	0x20000028
 800bc2c:	08015745 	.word	0x08015745
 800bc30:	08015752 	.word	0x08015752
 800bc34:	08015780 	.word	0x08015780

0800bc38 <fiprintf>:
 800bc38:	b40e      	push	{r1, r2, r3}
 800bc3a:	b503      	push	{r0, r1, lr}
 800bc3c:	4601      	mov	r1, r0
 800bc3e:	ab03      	add	r3, sp, #12
 800bc40:	4805      	ldr	r0, [pc, #20]	; (800bc58 <fiprintf+0x20>)
 800bc42:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc46:	6800      	ldr	r0, [r0, #0]
 800bc48:	9301      	str	r3, [sp, #4]
 800bc4a:	f000 f897 	bl	800bd7c <_vfiprintf_r>
 800bc4e:	b002      	add	sp, #8
 800bc50:	f85d eb04 	ldr.w	lr, [sp], #4
 800bc54:	b003      	add	sp, #12
 800bc56:	4770      	bx	lr
 800bc58:	20000028 	.word	0x20000028

0800bc5c <__ascii_mbtowc>:
 800bc5c:	b082      	sub	sp, #8
 800bc5e:	b901      	cbnz	r1, 800bc62 <__ascii_mbtowc+0x6>
 800bc60:	a901      	add	r1, sp, #4
 800bc62:	b142      	cbz	r2, 800bc76 <__ascii_mbtowc+0x1a>
 800bc64:	b14b      	cbz	r3, 800bc7a <__ascii_mbtowc+0x1e>
 800bc66:	7813      	ldrb	r3, [r2, #0]
 800bc68:	600b      	str	r3, [r1, #0]
 800bc6a:	7812      	ldrb	r2, [r2, #0]
 800bc6c:	1e10      	subs	r0, r2, #0
 800bc6e:	bf18      	it	ne
 800bc70:	2001      	movne	r0, #1
 800bc72:	b002      	add	sp, #8
 800bc74:	4770      	bx	lr
 800bc76:	4610      	mov	r0, r2
 800bc78:	e7fb      	b.n	800bc72 <__ascii_mbtowc+0x16>
 800bc7a:	f06f 0001 	mvn.w	r0, #1
 800bc7e:	e7f8      	b.n	800bc72 <__ascii_mbtowc+0x16>

0800bc80 <memmove>:
 800bc80:	4288      	cmp	r0, r1
 800bc82:	b510      	push	{r4, lr}
 800bc84:	eb01 0402 	add.w	r4, r1, r2
 800bc88:	d902      	bls.n	800bc90 <memmove+0x10>
 800bc8a:	4284      	cmp	r4, r0
 800bc8c:	4623      	mov	r3, r4
 800bc8e:	d807      	bhi.n	800bca0 <memmove+0x20>
 800bc90:	1e43      	subs	r3, r0, #1
 800bc92:	42a1      	cmp	r1, r4
 800bc94:	d008      	beq.n	800bca8 <memmove+0x28>
 800bc96:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bc9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bc9e:	e7f8      	b.n	800bc92 <memmove+0x12>
 800bca0:	4402      	add	r2, r0
 800bca2:	4601      	mov	r1, r0
 800bca4:	428a      	cmp	r2, r1
 800bca6:	d100      	bne.n	800bcaa <memmove+0x2a>
 800bca8:	bd10      	pop	{r4, pc}
 800bcaa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bcae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bcb2:	e7f7      	b.n	800bca4 <memmove+0x24>

0800bcb4 <__malloc_lock>:
 800bcb4:	4801      	ldr	r0, [pc, #4]	; (800bcbc <__malloc_lock+0x8>)
 800bcb6:	f000 bc1f 	b.w	800c4f8 <__retarget_lock_acquire_recursive>
 800bcba:	bf00      	nop
 800bcbc:	200005a4 	.word	0x200005a4

0800bcc0 <__malloc_unlock>:
 800bcc0:	4801      	ldr	r0, [pc, #4]	; (800bcc8 <__malloc_unlock+0x8>)
 800bcc2:	f000 bc1a 	b.w	800c4fa <__retarget_lock_release_recursive>
 800bcc6:	bf00      	nop
 800bcc8:	200005a4 	.word	0x200005a4

0800bccc <_realloc_r>:
 800bccc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcd0:	4680      	mov	r8, r0
 800bcd2:	4614      	mov	r4, r2
 800bcd4:	460e      	mov	r6, r1
 800bcd6:	b921      	cbnz	r1, 800bce2 <_realloc_r+0x16>
 800bcd8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bcdc:	4611      	mov	r1, r2
 800bcde:	f7ff bdad 	b.w	800b83c <_malloc_r>
 800bce2:	b92a      	cbnz	r2, 800bcf0 <_realloc_r+0x24>
 800bce4:	f7ff fd3e 	bl	800b764 <_free_r>
 800bce8:	4625      	mov	r5, r4
 800bcea:	4628      	mov	r0, r5
 800bcec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bcf0:	f000 fc6a 	bl	800c5c8 <_malloc_usable_size_r>
 800bcf4:	4284      	cmp	r4, r0
 800bcf6:	4607      	mov	r7, r0
 800bcf8:	d802      	bhi.n	800bd00 <_realloc_r+0x34>
 800bcfa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bcfe:	d812      	bhi.n	800bd26 <_realloc_r+0x5a>
 800bd00:	4621      	mov	r1, r4
 800bd02:	4640      	mov	r0, r8
 800bd04:	f7ff fd9a 	bl	800b83c <_malloc_r>
 800bd08:	4605      	mov	r5, r0
 800bd0a:	2800      	cmp	r0, #0
 800bd0c:	d0ed      	beq.n	800bcea <_realloc_r+0x1e>
 800bd0e:	42bc      	cmp	r4, r7
 800bd10:	4622      	mov	r2, r4
 800bd12:	4631      	mov	r1, r6
 800bd14:	bf28      	it	cs
 800bd16:	463a      	movcs	r2, r7
 800bd18:	f7ff f97c 	bl	800b014 <memcpy>
 800bd1c:	4631      	mov	r1, r6
 800bd1e:	4640      	mov	r0, r8
 800bd20:	f7ff fd20 	bl	800b764 <_free_r>
 800bd24:	e7e1      	b.n	800bcea <_realloc_r+0x1e>
 800bd26:	4635      	mov	r5, r6
 800bd28:	e7df      	b.n	800bcea <_realloc_r+0x1e>

0800bd2a <__sfputc_r>:
 800bd2a:	6893      	ldr	r3, [r2, #8]
 800bd2c:	3b01      	subs	r3, #1
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	b410      	push	{r4}
 800bd32:	6093      	str	r3, [r2, #8]
 800bd34:	da08      	bge.n	800bd48 <__sfputc_r+0x1e>
 800bd36:	6994      	ldr	r4, [r2, #24]
 800bd38:	42a3      	cmp	r3, r4
 800bd3a:	db01      	blt.n	800bd40 <__sfputc_r+0x16>
 800bd3c:	290a      	cmp	r1, #10
 800bd3e:	d103      	bne.n	800bd48 <__sfputc_r+0x1e>
 800bd40:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bd44:	f000 b94a 	b.w	800bfdc <__swbuf_r>
 800bd48:	6813      	ldr	r3, [r2, #0]
 800bd4a:	1c58      	adds	r0, r3, #1
 800bd4c:	6010      	str	r0, [r2, #0]
 800bd4e:	7019      	strb	r1, [r3, #0]
 800bd50:	4608      	mov	r0, r1
 800bd52:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bd56:	4770      	bx	lr

0800bd58 <__sfputs_r>:
 800bd58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd5a:	4606      	mov	r6, r0
 800bd5c:	460f      	mov	r7, r1
 800bd5e:	4614      	mov	r4, r2
 800bd60:	18d5      	adds	r5, r2, r3
 800bd62:	42ac      	cmp	r4, r5
 800bd64:	d101      	bne.n	800bd6a <__sfputs_r+0x12>
 800bd66:	2000      	movs	r0, #0
 800bd68:	e007      	b.n	800bd7a <__sfputs_r+0x22>
 800bd6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd6e:	463a      	mov	r2, r7
 800bd70:	4630      	mov	r0, r6
 800bd72:	f7ff ffda 	bl	800bd2a <__sfputc_r>
 800bd76:	1c43      	adds	r3, r0, #1
 800bd78:	d1f3      	bne.n	800bd62 <__sfputs_r+0xa>
 800bd7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bd7c <_vfiprintf_r>:
 800bd7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd80:	460d      	mov	r5, r1
 800bd82:	b09d      	sub	sp, #116	; 0x74
 800bd84:	4614      	mov	r4, r2
 800bd86:	4698      	mov	r8, r3
 800bd88:	4606      	mov	r6, r0
 800bd8a:	b118      	cbz	r0, 800bd94 <_vfiprintf_r+0x18>
 800bd8c:	6983      	ldr	r3, [r0, #24]
 800bd8e:	b90b      	cbnz	r3, 800bd94 <_vfiprintf_r+0x18>
 800bd90:	f000 fb14 	bl	800c3bc <__sinit>
 800bd94:	4b89      	ldr	r3, [pc, #548]	; (800bfbc <_vfiprintf_r+0x240>)
 800bd96:	429d      	cmp	r5, r3
 800bd98:	d11b      	bne.n	800bdd2 <_vfiprintf_r+0x56>
 800bd9a:	6875      	ldr	r5, [r6, #4]
 800bd9c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bd9e:	07d9      	lsls	r1, r3, #31
 800bda0:	d405      	bmi.n	800bdae <_vfiprintf_r+0x32>
 800bda2:	89ab      	ldrh	r3, [r5, #12]
 800bda4:	059a      	lsls	r2, r3, #22
 800bda6:	d402      	bmi.n	800bdae <_vfiprintf_r+0x32>
 800bda8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bdaa:	f000 fba5 	bl	800c4f8 <__retarget_lock_acquire_recursive>
 800bdae:	89ab      	ldrh	r3, [r5, #12]
 800bdb0:	071b      	lsls	r3, r3, #28
 800bdb2:	d501      	bpl.n	800bdb8 <_vfiprintf_r+0x3c>
 800bdb4:	692b      	ldr	r3, [r5, #16]
 800bdb6:	b9eb      	cbnz	r3, 800bdf4 <_vfiprintf_r+0x78>
 800bdb8:	4629      	mov	r1, r5
 800bdba:	4630      	mov	r0, r6
 800bdbc:	f000 f96e 	bl	800c09c <__swsetup_r>
 800bdc0:	b1c0      	cbz	r0, 800bdf4 <_vfiprintf_r+0x78>
 800bdc2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bdc4:	07dc      	lsls	r4, r3, #31
 800bdc6:	d50e      	bpl.n	800bde6 <_vfiprintf_r+0x6a>
 800bdc8:	f04f 30ff 	mov.w	r0, #4294967295
 800bdcc:	b01d      	add	sp, #116	; 0x74
 800bdce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdd2:	4b7b      	ldr	r3, [pc, #492]	; (800bfc0 <_vfiprintf_r+0x244>)
 800bdd4:	429d      	cmp	r5, r3
 800bdd6:	d101      	bne.n	800bddc <_vfiprintf_r+0x60>
 800bdd8:	68b5      	ldr	r5, [r6, #8]
 800bdda:	e7df      	b.n	800bd9c <_vfiprintf_r+0x20>
 800bddc:	4b79      	ldr	r3, [pc, #484]	; (800bfc4 <_vfiprintf_r+0x248>)
 800bdde:	429d      	cmp	r5, r3
 800bde0:	bf08      	it	eq
 800bde2:	68f5      	ldreq	r5, [r6, #12]
 800bde4:	e7da      	b.n	800bd9c <_vfiprintf_r+0x20>
 800bde6:	89ab      	ldrh	r3, [r5, #12]
 800bde8:	0598      	lsls	r0, r3, #22
 800bdea:	d4ed      	bmi.n	800bdc8 <_vfiprintf_r+0x4c>
 800bdec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bdee:	f000 fb84 	bl	800c4fa <__retarget_lock_release_recursive>
 800bdf2:	e7e9      	b.n	800bdc8 <_vfiprintf_r+0x4c>
 800bdf4:	2300      	movs	r3, #0
 800bdf6:	9309      	str	r3, [sp, #36]	; 0x24
 800bdf8:	2320      	movs	r3, #32
 800bdfa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bdfe:	f8cd 800c 	str.w	r8, [sp, #12]
 800be02:	2330      	movs	r3, #48	; 0x30
 800be04:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bfc8 <_vfiprintf_r+0x24c>
 800be08:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800be0c:	f04f 0901 	mov.w	r9, #1
 800be10:	4623      	mov	r3, r4
 800be12:	469a      	mov	sl, r3
 800be14:	f813 2b01 	ldrb.w	r2, [r3], #1
 800be18:	b10a      	cbz	r2, 800be1e <_vfiprintf_r+0xa2>
 800be1a:	2a25      	cmp	r2, #37	; 0x25
 800be1c:	d1f9      	bne.n	800be12 <_vfiprintf_r+0x96>
 800be1e:	ebba 0b04 	subs.w	fp, sl, r4
 800be22:	d00b      	beq.n	800be3c <_vfiprintf_r+0xc0>
 800be24:	465b      	mov	r3, fp
 800be26:	4622      	mov	r2, r4
 800be28:	4629      	mov	r1, r5
 800be2a:	4630      	mov	r0, r6
 800be2c:	f7ff ff94 	bl	800bd58 <__sfputs_r>
 800be30:	3001      	adds	r0, #1
 800be32:	f000 80aa 	beq.w	800bf8a <_vfiprintf_r+0x20e>
 800be36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800be38:	445a      	add	r2, fp
 800be3a:	9209      	str	r2, [sp, #36]	; 0x24
 800be3c:	f89a 3000 	ldrb.w	r3, [sl]
 800be40:	2b00      	cmp	r3, #0
 800be42:	f000 80a2 	beq.w	800bf8a <_vfiprintf_r+0x20e>
 800be46:	2300      	movs	r3, #0
 800be48:	f04f 32ff 	mov.w	r2, #4294967295
 800be4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800be50:	f10a 0a01 	add.w	sl, sl, #1
 800be54:	9304      	str	r3, [sp, #16]
 800be56:	9307      	str	r3, [sp, #28]
 800be58:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800be5c:	931a      	str	r3, [sp, #104]	; 0x68
 800be5e:	4654      	mov	r4, sl
 800be60:	2205      	movs	r2, #5
 800be62:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be66:	4858      	ldr	r0, [pc, #352]	; (800bfc8 <_vfiprintf_r+0x24c>)
 800be68:	f7f4 f9c2 	bl	80001f0 <memchr>
 800be6c:	9a04      	ldr	r2, [sp, #16]
 800be6e:	b9d8      	cbnz	r0, 800bea8 <_vfiprintf_r+0x12c>
 800be70:	06d1      	lsls	r1, r2, #27
 800be72:	bf44      	itt	mi
 800be74:	2320      	movmi	r3, #32
 800be76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800be7a:	0713      	lsls	r3, r2, #28
 800be7c:	bf44      	itt	mi
 800be7e:	232b      	movmi	r3, #43	; 0x2b
 800be80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800be84:	f89a 3000 	ldrb.w	r3, [sl]
 800be88:	2b2a      	cmp	r3, #42	; 0x2a
 800be8a:	d015      	beq.n	800beb8 <_vfiprintf_r+0x13c>
 800be8c:	9a07      	ldr	r2, [sp, #28]
 800be8e:	4654      	mov	r4, sl
 800be90:	2000      	movs	r0, #0
 800be92:	f04f 0c0a 	mov.w	ip, #10
 800be96:	4621      	mov	r1, r4
 800be98:	f811 3b01 	ldrb.w	r3, [r1], #1
 800be9c:	3b30      	subs	r3, #48	; 0x30
 800be9e:	2b09      	cmp	r3, #9
 800bea0:	d94e      	bls.n	800bf40 <_vfiprintf_r+0x1c4>
 800bea2:	b1b0      	cbz	r0, 800bed2 <_vfiprintf_r+0x156>
 800bea4:	9207      	str	r2, [sp, #28]
 800bea6:	e014      	b.n	800bed2 <_vfiprintf_r+0x156>
 800bea8:	eba0 0308 	sub.w	r3, r0, r8
 800beac:	fa09 f303 	lsl.w	r3, r9, r3
 800beb0:	4313      	orrs	r3, r2
 800beb2:	9304      	str	r3, [sp, #16]
 800beb4:	46a2      	mov	sl, r4
 800beb6:	e7d2      	b.n	800be5e <_vfiprintf_r+0xe2>
 800beb8:	9b03      	ldr	r3, [sp, #12]
 800beba:	1d19      	adds	r1, r3, #4
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	9103      	str	r1, [sp, #12]
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	bfbb      	ittet	lt
 800bec4:	425b      	neglt	r3, r3
 800bec6:	f042 0202 	orrlt.w	r2, r2, #2
 800beca:	9307      	strge	r3, [sp, #28]
 800becc:	9307      	strlt	r3, [sp, #28]
 800bece:	bfb8      	it	lt
 800bed0:	9204      	strlt	r2, [sp, #16]
 800bed2:	7823      	ldrb	r3, [r4, #0]
 800bed4:	2b2e      	cmp	r3, #46	; 0x2e
 800bed6:	d10c      	bne.n	800bef2 <_vfiprintf_r+0x176>
 800bed8:	7863      	ldrb	r3, [r4, #1]
 800beda:	2b2a      	cmp	r3, #42	; 0x2a
 800bedc:	d135      	bne.n	800bf4a <_vfiprintf_r+0x1ce>
 800bede:	9b03      	ldr	r3, [sp, #12]
 800bee0:	1d1a      	adds	r2, r3, #4
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	9203      	str	r2, [sp, #12]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	bfb8      	it	lt
 800beea:	f04f 33ff 	movlt.w	r3, #4294967295
 800beee:	3402      	adds	r4, #2
 800bef0:	9305      	str	r3, [sp, #20]
 800bef2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bfd8 <_vfiprintf_r+0x25c>
 800bef6:	7821      	ldrb	r1, [r4, #0]
 800bef8:	2203      	movs	r2, #3
 800befa:	4650      	mov	r0, sl
 800befc:	f7f4 f978 	bl	80001f0 <memchr>
 800bf00:	b140      	cbz	r0, 800bf14 <_vfiprintf_r+0x198>
 800bf02:	2340      	movs	r3, #64	; 0x40
 800bf04:	eba0 000a 	sub.w	r0, r0, sl
 800bf08:	fa03 f000 	lsl.w	r0, r3, r0
 800bf0c:	9b04      	ldr	r3, [sp, #16]
 800bf0e:	4303      	orrs	r3, r0
 800bf10:	3401      	adds	r4, #1
 800bf12:	9304      	str	r3, [sp, #16]
 800bf14:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf18:	482c      	ldr	r0, [pc, #176]	; (800bfcc <_vfiprintf_r+0x250>)
 800bf1a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bf1e:	2206      	movs	r2, #6
 800bf20:	f7f4 f966 	bl	80001f0 <memchr>
 800bf24:	2800      	cmp	r0, #0
 800bf26:	d03f      	beq.n	800bfa8 <_vfiprintf_r+0x22c>
 800bf28:	4b29      	ldr	r3, [pc, #164]	; (800bfd0 <_vfiprintf_r+0x254>)
 800bf2a:	bb1b      	cbnz	r3, 800bf74 <_vfiprintf_r+0x1f8>
 800bf2c:	9b03      	ldr	r3, [sp, #12]
 800bf2e:	3307      	adds	r3, #7
 800bf30:	f023 0307 	bic.w	r3, r3, #7
 800bf34:	3308      	adds	r3, #8
 800bf36:	9303      	str	r3, [sp, #12]
 800bf38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf3a:	443b      	add	r3, r7
 800bf3c:	9309      	str	r3, [sp, #36]	; 0x24
 800bf3e:	e767      	b.n	800be10 <_vfiprintf_r+0x94>
 800bf40:	fb0c 3202 	mla	r2, ip, r2, r3
 800bf44:	460c      	mov	r4, r1
 800bf46:	2001      	movs	r0, #1
 800bf48:	e7a5      	b.n	800be96 <_vfiprintf_r+0x11a>
 800bf4a:	2300      	movs	r3, #0
 800bf4c:	3401      	adds	r4, #1
 800bf4e:	9305      	str	r3, [sp, #20]
 800bf50:	4619      	mov	r1, r3
 800bf52:	f04f 0c0a 	mov.w	ip, #10
 800bf56:	4620      	mov	r0, r4
 800bf58:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bf5c:	3a30      	subs	r2, #48	; 0x30
 800bf5e:	2a09      	cmp	r2, #9
 800bf60:	d903      	bls.n	800bf6a <_vfiprintf_r+0x1ee>
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d0c5      	beq.n	800bef2 <_vfiprintf_r+0x176>
 800bf66:	9105      	str	r1, [sp, #20]
 800bf68:	e7c3      	b.n	800bef2 <_vfiprintf_r+0x176>
 800bf6a:	fb0c 2101 	mla	r1, ip, r1, r2
 800bf6e:	4604      	mov	r4, r0
 800bf70:	2301      	movs	r3, #1
 800bf72:	e7f0      	b.n	800bf56 <_vfiprintf_r+0x1da>
 800bf74:	ab03      	add	r3, sp, #12
 800bf76:	9300      	str	r3, [sp, #0]
 800bf78:	462a      	mov	r2, r5
 800bf7a:	4b16      	ldr	r3, [pc, #88]	; (800bfd4 <_vfiprintf_r+0x258>)
 800bf7c:	a904      	add	r1, sp, #16
 800bf7e:	4630      	mov	r0, r6
 800bf80:	f7fd fdd8 	bl	8009b34 <_printf_float>
 800bf84:	4607      	mov	r7, r0
 800bf86:	1c78      	adds	r0, r7, #1
 800bf88:	d1d6      	bne.n	800bf38 <_vfiprintf_r+0x1bc>
 800bf8a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bf8c:	07d9      	lsls	r1, r3, #31
 800bf8e:	d405      	bmi.n	800bf9c <_vfiprintf_r+0x220>
 800bf90:	89ab      	ldrh	r3, [r5, #12]
 800bf92:	059a      	lsls	r2, r3, #22
 800bf94:	d402      	bmi.n	800bf9c <_vfiprintf_r+0x220>
 800bf96:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bf98:	f000 faaf 	bl	800c4fa <__retarget_lock_release_recursive>
 800bf9c:	89ab      	ldrh	r3, [r5, #12]
 800bf9e:	065b      	lsls	r3, r3, #25
 800bfa0:	f53f af12 	bmi.w	800bdc8 <_vfiprintf_r+0x4c>
 800bfa4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bfa6:	e711      	b.n	800bdcc <_vfiprintf_r+0x50>
 800bfa8:	ab03      	add	r3, sp, #12
 800bfaa:	9300      	str	r3, [sp, #0]
 800bfac:	462a      	mov	r2, r5
 800bfae:	4b09      	ldr	r3, [pc, #36]	; (800bfd4 <_vfiprintf_r+0x258>)
 800bfb0:	a904      	add	r1, sp, #16
 800bfb2:	4630      	mov	r0, r6
 800bfb4:	f7fe f862 	bl	800a07c <_printf_i>
 800bfb8:	e7e4      	b.n	800bf84 <_vfiprintf_r+0x208>
 800bfba:	bf00      	nop
 800bfbc:	080158ac 	.word	0x080158ac
 800bfc0:	080158cc 	.word	0x080158cc
 800bfc4:	0801588c 	.word	0x0801588c
 800bfc8:	08015734 	.word	0x08015734
 800bfcc:	0801573e 	.word	0x0801573e
 800bfd0:	08009b35 	.word	0x08009b35
 800bfd4:	0800bd59 	.word	0x0800bd59
 800bfd8:	0801573a 	.word	0x0801573a

0800bfdc <__swbuf_r>:
 800bfdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfde:	460e      	mov	r6, r1
 800bfe0:	4614      	mov	r4, r2
 800bfe2:	4605      	mov	r5, r0
 800bfe4:	b118      	cbz	r0, 800bfee <__swbuf_r+0x12>
 800bfe6:	6983      	ldr	r3, [r0, #24]
 800bfe8:	b90b      	cbnz	r3, 800bfee <__swbuf_r+0x12>
 800bfea:	f000 f9e7 	bl	800c3bc <__sinit>
 800bfee:	4b21      	ldr	r3, [pc, #132]	; (800c074 <__swbuf_r+0x98>)
 800bff0:	429c      	cmp	r4, r3
 800bff2:	d12b      	bne.n	800c04c <__swbuf_r+0x70>
 800bff4:	686c      	ldr	r4, [r5, #4]
 800bff6:	69a3      	ldr	r3, [r4, #24]
 800bff8:	60a3      	str	r3, [r4, #8]
 800bffa:	89a3      	ldrh	r3, [r4, #12]
 800bffc:	071a      	lsls	r2, r3, #28
 800bffe:	d52f      	bpl.n	800c060 <__swbuf_r+0x84>
 800c000:	6923      	ldr	r3, [r4, #16]
 800c002:	b36b      	cbz	r3, 800c060 <__swbuf_r+0x84>
 800c004:	6923      	ldr	r3, [r4, #16]
 800c006:	6820      	ldr	r0, [r4, #0]
 800c008:	1ac0      	subs	r0, r0, r3
 800c00a:	6963      	ldr	r3, [r4, #20]
 800c00c:	b2f6      	uxtb	r6, r6
 800c00e:	4283      	cmp	r3, r0
 800c010:	4637      	mov	r7, r6
 800c012:	dc04      	bgt.n	800c01e <__swbuf_r+0x42>
 800c014:	4621      	mov	r1, r4
 800c016:	4628      	mov	r0, r5
 800c018:	f000 f93c 	bl	800c294 <_fflush_r>
 800c01c:	bb30      	cbnz	r0, 800c06c <__swbuf_r+0x90>
 800c01e:	68a3      	ldr	r3, [r4, #8]
 800c020:	3b01      	subs	r3, #1
 800c022:	60a3      	str	r3, [r4, #8]
 800c024:	6823      	ldr	r3, [r4, #0]
 800c026:	1c5a      	adds	r2, r3, #1
 800c028:	6022      	str	r2, [r4, #0]
 800c02a:	701e      	strb	r6, [r3, #0]
 800c02c:	6963      	ldr	r3, [r4, #20]
 800c02e:	3001      	adds	r0, #1
 800c030:	4283      	cmp	r3, r0
 800c032:	d004      	beq.n	800c03e <__swbuf_r+0x62>
 800c034:	89a3      	ldrh	r3, [r4, #12]
 800c036:	07db      	lsls	r3, r3, #31
 800c038:	d506      	bpl.n	800c048 <__swbuf_r+0x6c>
 800c03a:	2e0a      	cmp	r6, #10
 800c03c:	d104      	bne.n	800c048 <__swbuf_r+0x6c>
 800c03e:	4621      	mov	r1, r4
 800c040:	4628      	mov	r0, r5
 800c042:	f000 f927 	bl	800c294 <_fflush_r>
 800c046:	b988      	cbnz	r0, 800c06c <__swbuf_r+0x90>
 800c048:	4638      	mov	r0, r7
 800c04a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c04c:	4b0a      	ldr	r3, [pc, #40]	; (800c078 <__swbuf_r+0x9c>)
 800c04e:	429c      	cmp	r4, r3
 800c050:	d101      	bne.n	800c056 <__swbuf_r+0x7a>
 800c052:	68ac      	ldr	r4, [r5, #8]
 800c054:	e7cf      	b.n	800bff6 <__swbuf_r+0x1a>
 800c056:	4b09      	ldr	r3, [pc, #36]	; (800c07c <__swbuf_r+0xa0>)
 800c058:	429c      	cmp	r4, r3
 800c05a:	bf08      	it	eq
 800c05c:	68ec      	ldreq	r4, [r5, #12]
 800c05e:	e7ca      	b.n	800bff6 <__swbuf_r+0x1a>
 800c060:	4621      	mov	r1, r4
 800c062:	4628      	mov	r0, r5
 800c064:	f000 f81a 	bl	800c09c <__swsetup_r>
 800c068:	2800      	cmp	r0, #0
 800c06a:	d0cb      	beq.n	800c004 <__swbuf_r+0x28>
 800c06c:	f04f 37ff 	mov.w	r7, #4294967295
 800c070:	e7ea      	b.n	800c048 <__swbuf_r+0x6c>
 800c072:	bf00      	nop
 800c074:	080158ac 	.word	0x080158ac
 800c078:	080158cc 	.word	0x080158cc
 800c07c:	0801588c 	.word	0x0801588c

0800c080 <__ascii_wctomb>:
 800c080:	b149      	cbz	r1, 800c096 <__ascii_wctomb+0x16>
 800c082:	2aff      	cmp	r2, #255	; 0xff
 800c084:	bf85      	ittet	hi
 800c086:	238a      	movhi	r3, #138	; 0x8a
 800c088:	6003      	strhi	r3, [r0, #0]
 800c08a:	700a      	strbls	r2, [r1, #0]
 800c08c:	f04f 30ff 	movhi.w	r0, #4294967295
 800c090:	bf98      	it	ls
 800c092:	2001      	movls	r0, #1
 800c094:	4770      	bx	lr
 800c096:	4608      	mov	r0, r1
 800c098:	4770      	bx	lr
	...

0800c09c <__swsetup_r>:
 800c09c:	4b32      	ldr	r3, [pc, #200]	; (800c168 <__swsetup_r+0xcc>)
 800c09e:	b570      	push	{r4, r5, r6, lr}
 800c0a0:	681d      	ldr	r5, [r3, #0]
 800c0a2:	4606      	mov	r6, r0
 800c0a4:	460c      	mov	r4, r1
 800c0a6:	b125      	cbz	r5, 800c0b2 <__swsetup_r+0x16>
 800c0a8:	69ab      	ldr	r3, [r5, #24]
 800c0aa:	b913      	cbnz	r3, 800c0b2 <__swsetup_r+0x16>
 800c0ac:	4628      	mov	r0, r5
 800c0ae:	f000 f985 	bl	800c3bc <__sinit>
 800c0b2:	4b2e      	ldr	r3, [pc, #184]	; (800c16c <__swsetup_r+0xd0>)
 800c0b4:	429c      	cmp	r4, r3
 800c0b6:	d10f      	bne.n	800c0d8 <__swsetup_r+0x3c>
 800c0b8:	686c      	ldr	r4, [r5, #4]
 800c0ba:	89a3      	ldrh	r3, [r4, #12]
 800c0bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c0c0:	0719      	lsls	r1, r3, #28
 800c0c2:	d42c      	bmi.n	800c11e <__swsetup_r+0x82>
 800c0c4:	06dd      	lsls	r5, r3, #27
 800c0c6:	d411      	bmi.n	800c0ec <__swsetup_r+0x50>
 800c0c8:	2309      	movs	r3, #9
 800c0ca:	6033      	str	r3, [r6, #0]
 800c0cc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c0d0:	81a3      	strh	r3, [r4, #12]
 800c0d2:	f04f 30ff 	mov.w	r0, #4294967295
 800c0d6:	e03e      	b.n	800c156 <__swsetup_r+0xba>
 800c0d8:	4b25      	ldr	r3, [pc, #148]	; (800c170 <__swsetup_r+0xd4>)
 800c0da:	429c      	cmp	r4, r3
 800c0dc:	d101      	bne.n	800c0e2 <__swsetup_r+0x46>
 800c0de:	68ac      	ldr	r4, [r5, #8]
 800c0e0:	e7eb      	b.n	800c0ba <__swsetup_r+0x1e>
 800c0e2:	4b24      	ldr	r3, [pc, #144]	; (800c174 <__swsetup_r+0xd8>)
 800c0e4:	429c      	cmp	r4, r3
 800c0e6:	bf08      	it	eq
 800c0e8:	68ec      	ldreq	r4, [r5, #12]
 800c0ea:	e7e6      	b.n	800c0ba <__swsetup_r+0x1e>
 800c0ec:	0758      	lsls	r0, r3, #29
 800c0ee:	d512      	bpl.n	800c116 <__swsetup_r+0x7a>
 800c0f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c0f2:	b141      	cbz	r1, 800c106 <__swsetup_r+0x6a>
 800c0f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c0f8:	4299      	cmp	r1, r3
 800c0fa:	d002      	beq.n	800c102 <__swsetup_r+0x66>
 800c0fc:	4630      	mov	r0, r6
 800c0fe:	f7ff fb31 	bl	800b764 <_free_r>
 800c102:	2300      	movs	r3, #0
 800c104:	6363      	str	r3, [r4, #52]	; 0x34
 800c106:	89a3      	ldrh	r3, [r4, #12]
 800c108:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c10c:	81a3      	strh	r3, [r4, #12]
 800c10e:	2300      	movs	r3, #0
 800c110:	6063      	str	r3, [r4, #4]
 800c112:	6923      	ldr	r3, [r4, #16]
 800c114:	6023      	str	r3, [r4, #0]
 800c116:	89a3      	ldrh	r3, [r4, #12]
 800c118:	f043 0308 	orr.w	r3, r3, #8
 800c11c:	81a3      	strh	r3, [r4, #12]
 800c11e:	6923      	ldr	r3, [r4, #16]
 800c120:	b94b      	cbnz	r3, 800c136 <__swsetup_r+0x9a>
 800c122:	89a3      	ldrh	r3, [r4, #12]
 800c124:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c128:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c12c:	d003      	beq.n	800c136 <__swsetup_r+0x9a>
 800c12e:	4621      	mov	r1, r4
 800c130:	4630      	mov	r0, r6
 800c132:	f000 fa09 	bl	800c548 <__smakebuf_r>
 800c136:	89a0      	ldrh	r0, [r4, #12]
 800c138:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c13c:	f010 0301 	ands.w	r3, r0, #1
 800c140:	d00a      	beq.n	800c158 <__swsetup_r+0xbc>
 800c142:	2300      	movs	r3, #0
 800c144:	60a3      	str	r3, [r4, #8]
 800c146:	6963      	ldr	r3, [r4, #20]
 800c148:	425b      	negs	r3, r3
 800c14a:	61a3      	str	r3, [r4, #24]
 800c14c:	6923      	ldr	r3, [r4, #16]
 800c14e:	b943      	cbnz	r3, 800c162 <__swsetup_r+0xc6>
 800c150:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c154:	d1ba      	bne.n	800c0cc <__swsetup_r+0x30>
 800c156:	bd70      	pop	{r4, r5, r6, pc}
 800c158:	0781      	lsls	r1, r0, #30
 800c15a:	bf58      	it	pl
 800c15c:	6963      	ldrpl	r3, [r4, #20]
 800c15e:	60a3      	str	r3, [r4, #8]
 800c160:	e7f4      	b.n	800c14c <__swsetup_r+0xb0>
 800c162:	2000      	movs	r0, #0
 800c164:	e7f7      	b.n	800c156 <__swsetup_r+0xba>
 800c166:	bf00      	nop
 800c168:	20000028 	.word	0x20000028
 800c16c:	080158ac 	.word	0x080158ac
 800c170:	080158cc 	.word	0x080158cc
 800c174:	0801588c 	.word	0x0801588c

0800c178 <abort>:
 800c178:	b508      	push	{r3, lr}
 800c17a:	2006      	movs	r0, #6
 800c17c:	f000 fa54 	bl	800c628 <raise>
 800c180:	2001      	movs	r0, #1
 800c182:	f7f6 fc15 	bl	80029b0 <_exit>
	...

0800c188 <__sflush_r>:
 800c188:	898a      	ldrh	r2, [r1, #12]
 800c18a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c18e:	4605      	mov	r5, r0
 800c190:	0710      	lsls	r0, r2, #28
 800c192:	460c      	mov	r4, r1
 800c194:	d458      	bmi.n	800c248 <__sflush_r+0xc0>
 800c196:	684b      	ldr	r3, [r1, #4]
 800c198:	2b00      	cmp	r3, #0
 800c19a:	dc05      	bgt.n	800c1a8 <__sflush_r+0x20>
 800c19c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	dc02      	bgt.n	800c1a8 <__sflush_r+0x20>
 800c1a2:	2000      	movs	r0, #0
 800c1a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c1aa:	2e00      	cmp	r6, #0
 800c1ac:	d0f9      	beq.n	800c1a2 <__sflush_r+0x1a>
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c1b4:	682f      	ldr	r7, [r5, #0]
 800c1b6:	602b      	str	r3, [r5, #0]
 800c1b8:	d032      	beq.n	800c220 <__sflush_r+0x98>
 800c1ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c1bc:	89a3      	ldrh	r3, [r4, #12]
 800c1be:	075a      	lsls	r2, r3, #29
 800c1c0:	d505      	bpl.n	800c1ce <__sflush_r+0x46>
 800c1c2:	6863      	ldr	r3, [r4, #4]
 800c1c4:	1ac0      	subs	r0, r0, r3
 800c1c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c1c8:	b10b      	cbz	r3, 800c1ce <__sflush_r+0x46>
 800c1ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c1cc:	1ac0      	subs	r0, r0, r3
 800c1ce:	2300      	movs	r3, #0
 800c1d0:	4602      	mov	r2, r0
 800c1d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c1d4:	6a21      	ldr	r1, [r4, #32]
 800c1d6:	4628      	mov	r0, r5
 800c1d8:	47b0      	blx	r6
 800c1da:	1c43      	adds	r3, r0, #1
 800c1dc:	89a3      	ldrh	r3, [r4, #12]
 800c1de:	d106      	bne.n	800c1ee <__sflush_r+0x66>
 800c1e0:	6829      	ldr	r1, [r5, #0]
 800c1e2:	291d      	cmp	r1, #29
 800c1e4:	d82c      	bhi.n	800c240 <__sflush_r+0xb8>
 800c1e6:	4a2a      	ldr	r2, [pc, #168]	; (800c290 <__sflush_r+0x108>)
 800c1e8:	40ca      	lsrs	r2, r1
 800c1ea:	07d6      	lsls	r6, r2, #31
 800c1ec:	d528      	bpl.n	800c240 <__sflush_r+0xb8>
 800c1ee:	2200      	movs	r2, #0
 800c1f0:	6062      	str	r2, [r4, #4]
 800c1f2:	04d9      	lsls	r1, r3, #19
 800c1f4:	6922      	ldr	r2, [r4, #16]
 800c1f6:	6022      	str	r2, [r4, #0]
 800c1f8:	d504      	bpl.n	800c204 <__sflush_r+0x7c>
 800c1fa:	1c42      	adds	r2, r0, #1
 800c1fc:	d101      	bne.n	800c202 <__sflush_r+0x7a>
 800c1fe:	682b      	ldr	r3, [r5, #0]
 800c200:	b903      	cbnz	r3, 800c204 <__sflush_r+0x7c>
 800c202:	6560      	str	r0, [r4, #84]	; 0x54
 800c204:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c206:	602f      	str	r7, [r5, #0]
 800c208:	2900      	cmp	r1, #0
 800c20a:	d0ca      	beq.n	800c1a2 <__sflush_r+0x1a>
 800c20c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c210:	4299      	cmp	r1, r3
 800c212:	d002      	beq.n	800c21a <__sflush_r+0x92>
 800c214:	4628      	mov	r0, r5
 800c216:	f7ff faa5 	bl	800b764 <_free_r>
 800c21a:	2000      	movs	r0, #0
 800c21c:	6360      	str	r0, [r4, #52]	; 0x34
 800c21e:	e7c1      	b.n	800c1a4 <__sflush_r+0x1c>
 800c220:	6a21      	ldr	r1, [r4, #32]
 800c222:	2301      	movs	r3, #1
 800c224:	4628      	mov	r0, r5
 800c226:	47b0      	blx	r6
 800c228:	1c41      	adds	r1, r0, #1
 800c22a:	d1c7      	bne.n	800c1bc <__sflush_r+0x34>
 800c22c:	682b      	ldr	r3, [r5, #0]
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d0c4      	beq.n	800c1bc <__sflush_r+0x34>
 800c232:	2b1d      	cmp	r3, #29
 800c234:	d001      	beq.n	800c23a <__sflush_r+0xb2>
 800c236:	2b16      	cmp	r3, #22
 800c238:	d101      	bne.n	800c23e <__sflush_r+0xb6>
 800c23a:	602f      	str	r7, [r5, #0]
 800c23c:	e7b1      	b.n	800c1a2 <__sflush_r+0x1a>
 800c23e:	89a3      	ldrh	r3, [r4, #12]
 800c240:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c244:	81a3      	strh	r3, [r4, #12]
 800c246:	e7ad      	b.n	800c1a4 <__sflush_r+0x1c>
 800c248:	690f      	ldr	r7, [r1, #16]
 800c24a:	2f00      	cmp	r7, #0
 800c24c:	d0a9      	beq.n	800c1a2 <__sflush_r+0x1a>
 800c24e:	0793      	lsls	r3, r2, #30
 800c250:	680e      	ldr	r6, [r1, #0]
 800c252:	bf08      	it	eq
 800c254:	694b      	ldreq	r3, [r1, #20]
 800c256:	600f      	str	r7, [r1, #0]
 800c258:	bf18      	it	ne
 800c25a:	2300      	movne	r3, #0
 800c25c:	eba6 0807 	sub.w	r8, r6, r7
 800c260:	608b      	str	r3, [r1, #8]
 800c262:	f1b8 0f00 	cmp.w	r8, #0
 800c266:	dd9c      	ble.n	800c1a2 <__sflush_r+0x1a>
 800c268:	6a21      	ldr	r1, [r4, #32]
 800c26a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c26c:	4643      	mov	r3, r8
 800c26e:	463a      	mov	r2, r7
 800c270:	4628      	mov	r0, r5
 800c272:	47b0      	blx	r6
 800c274:	2800      	cmp	r0, #0
 800c276:	dc06      	bgt.n	800c286 <__sflush_r+0xfe>
 800c278:	89a3      	ldrh	r3, [r4, #12]
 800c27a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c27e:	81a3      	strh	r3, [r4, #12]
 800c280:	f04f 30ff 	mov.w	r0, #4294967295
 800c284:	e78e      	b.n	800c1a4 <__sflush_r+0x1c>
 800c286:	4407      	add	r7, r0
 800c288:	eba8 0800 	sub.w	r8, r8, r0
 800c28c:	e7e9      	b.n	800c262 <__sflush_r+0xda>
 800c28e:	bf00      	nop
 800c290:	20400001 	.word	0x20400001

0800c294 <_fflush_r>:
 800c294:	b538      	push	{r3, r4, r5, lr}
 800c296:	690b      	ldr	r3, [r1, #16]
 800c298:	4605      	mov	r5, r0
 800c29a:	460c      	mov	r4, r1
 800c29c:	b913      	cbnz	r3, 800c2a4 <_fflush_r+0x10>
 800c29e:	2500      	movs	r5, #0
 800c2a0:	4628      	mov	r0, r5
 800c2a2:	bd38      	pop	{r3, r4, r5, pc}
 800c2a4:	b118      	cbz	r0, 800c2ae <_fflush_r+0x1a>
 800c2a6:	6983      	ldr	r3, [r0, #24]
 800c2a8:	b90b      	cbnz	r3, 800c2ae <_fflush_r+0x1a>
 800c2aa:	f000 f887 	bl	800c3bc <__sinit>
 800c2ae:	4b14      	ldr	r3, [pc, #80]	; (800c300 <_fflush_r+0x6c>)
 800c2b0:	429c      	cmp	r4, r3
 800c2b2:	d11b      	bne.n	800c2ec <_fflush_r+0x58>
 800c2b4:	686c      	ldr	r4, [r5, #4]
 800c2b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d0ef      	beq.n	800c29e <_fflush_r+0xa>
 800c2be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c2c0:	07d0      	lsls	r0, r2, #31
 800c2c2:	d404      	bmi.n	800c2ce <_fflush_r+0x3a>
 800c2c4:	0599      	lsls	r1, r3, #22
 800c2c6:	d402      	bmi.n	800c2ce <_fflush_r+0x3a>
 800c2c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c2ca:	f000 f915 	bl	800c4f8 <__retarget_lock_acquire_recursive>
 800c2ce:	4628      	mov	r0, r5
 800c2d0:	4621      	mov	r1, r4
 800c2d2:	f7ff ff59 	bl	800c188 <__sflush_r>
 800c2d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c2d8:	07da      	lsls	r2, r3, #31
 800c2da:	4605      	mov	r5, r0
 800c2dc:	d4e0      	bmi.n	800c2a0 <_fflush_r+0xc>
 800c2de:	89a3      	ldrh	r3, [r4, #12]
 800c2e0:	059b      	lsls	r3, r3, #22
 800c2e2:	d4dd      	bmi.n	800c2a0 <_fflush_r+0xc>
 800c2e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c2e6:	f000 f908 	bl	800c4fa <__retarget_lock_release_recursive>
 800c2ea:	e7d9      	b.n	800c2a0 <_fflush_r+0xc>
 800c2ec:	4b05      	ldr	r3, [pc, #20]	; (800c304 <_fflush_r+0x70>)
 800c2ee:	429c      	cmp	r4, r3
 800c2f0:	d101      	bne.n	800c2f6 <_fflush_r+0x62>
 800c2f2:	68ac      	ldr	r4, [r5, #8]
 800c2f4:	e7df      	b.n	800c2b6 <_fflush_r+0x22>
 800c2f6:	4b04      	ldr	r3, [pc, #16]	; (800c308 <_fflush_r+0x74>)
 800c2f8:	429c      	cmp	r4, r3
 800c2fa:	bf08      	it	eq
 800c2fc:	68ec      	ldreq	r4, [r5, #12]
 800c2fe:	e7da      	b.n	800c2b6 <_fflush_r+0x22>
 800c300:	080158ac 	.word	0x080158ac
 800c304:	080158cc 	.word	0x080158cc
 800c308:	0801588c 	.word	0x0801588c

0800c30c <std>:
 800c30c:	2300      	movs	r3, #0
 800c30e:	b510      	push	{r4, lr}
 800c310:	4604      	mov	r4, r0
 800c312:	e9c0 3300 	strd	r3, r3, [r0]
 800c316:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c31a:	6083      	str	r3, [r0, #8]
 800c31c:	8181      	strh	r1, [r0, #12]
 800c31e:	6643      	str	r3, [r0, #100]	; 0x64
 800c320:	81c2      	strh	r2, [r0, #14]
 800c322:	6183      	str	r3, [r0, #24]
 800c324:	4619      	mov	r1, r3
 800c326:	2208      	movs	r2, #8
 800c328:	305c      	adds	r0, #92	; 0x5c
 800c32a:	f7fd fb5b 	bl	80099e4 <memset>
 800c32e:	4b05      	ldr	r3, [pc, #20]	; (800c344 <std+0x38>)
 800c330:	6263      	str	r3, [r4, #36]	; 0x24
 800c332:	4b05      	ldr	r3, [pc, #20]	; (800c348 <std+0x3c>)
 800c334:	62a3      	str	r3, [r4, #40]	; 0x28
 800c336:	4b05      	ldr	r3, [pc, #20]	; (800c34c <std+0x40>)
 800c338:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c33a:	4b05      	ldr	r3, [pc, #20]	; (800c350 <std+0x44>)
 800c33c:	6224      	str	r4, [r4, #32]
 800c33e:	6323      	str	r3, [r4, #48]	; 0x30
 800c340:	bd10      	pop	{r4, pc}
 800c342:	bf00      	nop
 800c344:	0800c661 	.word	0x0800c661
 800c348:	0800c683 	.word	0x0800c683
 800c34c:	0800c6bb 	.word	0x0800c6bb
 800c350:	0800c6df 	.word	0x0800c6df

0800c354 <_cleanup_r>:
 800c354:	4901      	ldr	r1, [pc, #4]	; (800c35c <_cleanup_r+0x8>)
 800c356:	f000 b8af 	b.w	800c4b8 <_fwalk_reent>
 800c35a:	bf00      	nop
 800c35c:	0800c295 	.word	0x0800c295

0800c360 <__sfmoreglue>:
 800c360:	b570      	push	{r4, r5, r6, lr}
 800c362:	2268      	movs	r2, #104	; 0x68
 800c364:	1e4d      	subs	r5, r1, #1
 800c366:	4355      	muls	r5, r2
 800c368:	460e      	mov	r6, r1
 800c36a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c36e:	f7ff fa65 	bl	800b83c <_malloc_r>
 800c372:	4604      	mov	r4, r0
 800c374:	b140      	cbz	r0, 800c388 <__sfmoreglue+0x28>
 800c376:	2100      	movs	r1, #0
 800c378:	e9c0 1600 	strd	r1, r6, [r0]
 800c37c:	300c      	adds	r0, #12
 800c37e:	60a0      	str	r0, [r4, #8]
 800c380:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c384:	f7fd fb2e 	bl	80099e4 <memset>
 800c388:	4620      	mov	r0, r4
 800c38a:	bd70      	pop	{r4, r5, r6, pc}

0800c38c <__sfp_lock_acquire>:
 800c38c:	4801      	ldr	r0, [pc, #4]	; (800c394 <__sfp_lock_acquire+0x8>)
 800c38e:	f000 b8b3 	b.w	800c4f8 <__retarget_lock_acquire_recursive>
 800c392:	bf00      	nop
 800c394:	200005a5 	.word	0x200005a5

0800c398 <__sfp_lock_release>:
 800c398:	4801      	ldr	r0, [pc, #4]	; (800c3a0 <__sfp_lock_release+0x8>)
 800c39a:	f000 b8ae 	b.w	800c4fa <__retarget_lock_release_recursive>
 800c39e:	bf00      	nop
 800c3a0:	200005a5 	.word	0x200005a5

0800c3a4 <__sinit_lock_acquire>:
 800c3a4:	4801      	ldr	r0, [pc, #4]	; (800c3ac <__sinit_lock_acquire+0x8>)
 800c3a6:	f000 b8a7 	b.w	800c4f8 <__retarget_lock_acquire_recursive>
 800c3aa:	bf00      	nop
 800c3ac:	200005a6 	.word	0x200005a6

0800c3b0 <__sinit_lock_release>:
 800c3b0:	4801      	ldr	r0, [pc, #4]	; (800c3b8 <__sinit_lock_release+0x8>)
 800c3b2:	f000 b8a2 	b.w	800c4fa <__retarget_lock_release_recursive>
 800c3b6:	bf00      	nop
 800c3b8:	200005a6 	.word	0x200005a6

0800c3bc <__sinit>:
 800c3bc:	b510      	push	{r4, lr}
 800c3be:	4604      	mov	r4, r0
 800c3c0:	f7ff fff0 	bl	800c3a4 <__sinit_lock_acquire>
 800c3c4:	69a3      	ldr	r3, [r4, #24]
 800c3c6:	b11b      	cbz	r3, 800c3d0 <__sinit+0x14>
 800c3c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c3cc:	f7ff bff0 	b.w	800c3b0 <__sinit_lock_release>
 800c3d0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c3d4:	6523      	str	r3, [r4, #80]	; 0x50
 800c3d6:	4b13      	ldr	r3, [pc, #76]	; (800c424 <__sinit+0x68>)
 800c3d8:	4a13      	ldr	r2, [pc, #76]	; (800c428 <__sinit+0x6c>)
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	62a2      	str	r2, [r4, #40]	; 0x28
 800c3de:	42a3      	cmp	r3, r4
 800c3e0:	bf04      	itt	eq
 800c3e2:	2301      	moveq	r3, #1
 800c3e4:	61a3      	streq	r3, [r4, #24]
 800c3e6:	4620      	mov	r0, r4
 800c3e8:	f000 f820 	bl	800c42c <__sfp>
 800c3ec:	6060      	str	r0, [r4, #4]
 800c3ee:	4620      	mov	r0, r4
 800c3f0:	f000 f81c 	bl	800c42c <__sfp>
 800c3f4:	60a0      	str	r0, [r4, #8]
 800c3f6:	4620      	mov	r0, r4
 800c3f8:	f000 f818 	bl	800c42c <__sfp>
 800c3fc:	2200      	movs	r2, #0
 800c3fe:	60e0      	str	r0, [r4, #12]
 800c400:	2104      	movs	r1, #4
 800c402:	6860      	ldr	r0, [r4, #4]
 800c404:	f7ff ff82 	bl	800c30c <std>
 800c408:	68a0      	ldr	r0, [r4, #8]
 800c40a:	2201      	movs	r2, #1
 800c40c:	2109      	movs	r1, #9
 800c40e:	f7ff ff7d 	bl	800c30c <std>
 800c412:	68e0      	ldr	r0, [r4, #12]
 800c414:	2202      	movs	r2, #2
 800c416:	2112      	movs	r1, #18
 800c418:	f7ff ff78 	bl	800c30c <std>
 800c41c:	2301      	movs	r3, #1
 800c41e:	61a3      	str	r3, [r4, #24]
 800c420:	e7d2      	b.n	800c3c8 <__sinit+0xc>
 800c422:	bf00      	nop
 800c424:	08015514 	.word	0x08015514
 800c428:	0800c355 	.word	0x0800c355

0800c42c <__sfp>:
 800c42c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c42e:	4607      	mov	r7, r0
 800c430:	f7ff ffac 	bl	800c38c <__sfp_lock_acquire>
 800c434:	4b1e      	ldr	r3, [pc, #120]	; (800c4b0 <__sfp+0x84>)
 800c436:	681e      	ldr	r6, [r3, #0]
 800c438:	69b3      	ldr	r3, [r6, #24]
 800c43a:	b913      	cbnz	r3, 800c442 <__sfp+0x16>
 800c43c:	4630      	mov	r0, r6
 800c43e:	f7ff ffbd 	bl	800c3bc <__sinit>
 800c442:	3648      	adds	r6, #72	; 0x48
 800c444:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c448:	3b01      	subs	r3, #1
 800c44a:	d503      	bpl.n	800c454 <__sfp+0x28>
 800c44c:	6833      	ldr	r3, [r6, #0]
 800c44e:	b30b      	cbz	r3, 800c494 <__sfp+0x68>
 800c450:	6836      	ldr	r6, [r6, #0]
 800c452:	e7f7      	b.n	800c444 <__sfp+0x18>
 800c454:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c458:	b9d5      	cbnz	r5, 800c490 <__sfp+0x64>
 800c45a:	4b16      	ldr	r3, [pc, #88]	; (800c4b4 <__sfp+0x88>)
 800c45c:	60e3      	str	r3, [r4, #12]
 800c45e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c462:	6665      	str	r5, [r4, #100]	; 0x64
 800c464:	f000 f847 	bl	800c4f6 <__retarget_lock_init_recursive>
 800c468:	f7ff ff96 	bl	800c398 <__sfp_lock_release>
 800c46c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c470:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c474:	6025      	str	r5, [r4, #0]
 800c476:	61a5      	str	r5, [r4, #24]
 800c478:	2208      	movs	r2, #8
 800c47a:	4629      	mov	r1, r5
 800c47c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c480:	f7fd fab0 	bl	80099e4 <memset>
 800c484:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c488:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c48c:	4620      	mov	r0, r4
 800c48e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c490:	3468      	adds	r4, #104	; 0x68
 800c492:	e7d9      	b.n	800c448 <__sfp+0x1c>
 800c494:	2104      	movs	r1, #4
 800c496:	4638      	mov	r0, r7
 800c498:	f7ff ff62 	bl	800c360 <__sfmoreglue>
 800c49c:	4604      	mov	r4, r0
 800c49e:	6030      	str	r0, [r6, #0]
 800c4a0:	2800      	cmp	r0, #0
 800c4a2:	d1d5      	bne.n	800c450 <__sfp+0x24>
 800c4a4:	f7ff ff78 	bl	800c398 <__sfp_lock_release>
 800c4a8:	230c      	movs	r3, #12
 800c4aa:	603b      	str	r3, [r7, #0]
 800c4ac:	e7ee      	b.n	800c48c <__sfp+0x60>
 800c4ae:	bf00      	nop
 800c4b0:	08015514 	.word	0x08015514
 800c4b4:	ffff0001 	.word	0xffff0001

0800c4b8 <_fwalk_reent>:
 800c4b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c4bc:	4606      	mov	r6, r0
 800c4be:	4688      	mov	r8, r1
 800c4c0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c4c4:	2700      	movs	r7, #0
 800c4c6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c4ca:	f1b9 0901 	subs.w	r9, r9, #1
 800c4ce:	d505      	bpl.n	800c4dc <_fwalk_reent+0x24>
 800c4d0:	6824      	ldr	r4, [r4, #0]
 800c4d2:	2c00      	cmp	r4, #0
 800c4d4:	d1f7      	bne.n	800c4c6 <_fwalk_reent+0xe>
 800c4d6:	4638      	mov	r0, r7
 800c4d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c4dc:	89ab      	ldrh	r3, [r5, #12]
 800c4de:	2b01      	cmp	r3, #1
 800c4e0:	d907      	bls.n	800c4f2 <_fwalk_reent+0x3a>
 800c4e2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c4e6:	3301      	adds	r3, #1
 800c4e8:	d003      	beq.n	800c4f2 <_fwalk_reent+0x3a>
 800c4ea:	4629      	mov	r1, r5
 800c4ec:	4630      	mov	r0, r6
 800c4ee:	47c0      	blx	r8
 800c4f0:	4307      	orrs	r7, r0
 800c4f2:	3568      	adds	r5, #104	; 0x68
 800c4f4:	e7e9      	b.n	800c4ca <_fwalk_reent+0x12>

0800c4f6 <__retarget_lock_init_recursive>:
 800c4f6:	4770      	bx	lr

0800c4f8 <__retarget_lock_acquire_recursive>:
 800c4f8:	4770      	bx	lr

0800c4fa <__retarget_lock_release_recursive>:
 800c4fa:	4770      	bx	lr

0800c4fc <__swhatbuf_r>:
 800c4fc:	b570      	push	{r4, r5, r6, lr}
 800c4fe:	460e      	mov	r6, r1
 800c500:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c504:	2900      	cmp	r1, #0
 800c506:	b096      	sub	sp, #88	; 0x58
 800c508:	4614      	mov	r4, r2
 800c50a:	461d      	mov	r5, r3
 800c50c:	da08      	bge.n	800c520 <__swhatbuf_r+0x24>
 800c50e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c512:	2200      	movs	r2, #0
 800c514:	602a      	str	r2, [r5, #0]
 800c516:	061a      	lsls	r2, r3, #24
 800c518:	d410      	bmi.n	800c53c <__swhatbuf_r+0x40>
 800c51a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c51e:	e00e      	b.n	800c53e <__swhatbuf_r+0x42>
 800c520:	466a      	mov	r2, sp
 800c522:	f000 f903 	bl	800c72c <_fstat_r>
 800c526:	2800      	cmp	r0, #0
 800c528:	dbf1      	blt.n	800c50e <__swhatbuf_r+0x12>
 800c52a:	9a01      	ldr	r2, [sp, #4]
 800c52c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c530:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c534:	425a      	negs	r2, r3
 800c536:	415a      	adcs	r2, r3
 800c538:	602a      	str	r2, [r5, #0]
 800c53a:	e7ee      	b.n	800c51a <__swhatbuf_r+0x1e>
 800c53c:	2340      	movs	r3, #64	; 0x40
 800c53e:	2000      	movs	r0, #0
 800c540:	6023      	str	r3, [r4, #0]
 800c542:	b016      	add	sp, #88	; 0x58
 800c544:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c548 <__smakebuf_r>:
 800c548:	898b      	ldrh	r3, [r1, #12]
 800c54a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c54c:	079d      	lsls	r5, r3, #30
 800c54e:	4606      	mov	r6, r0
 800c550:	460c      	mov	r4, r1
 800c552:	d507      	bpl.n	800c564 <__smakebuf_r+0x1c>
 800c554:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c558:	6023      	str	r3, [r4, #0]
 800c55a:	6123      	str	r3, [r4, #16]
 800c55c:	2301      	movs	r3, #1
 800c55e:	6163      	str	r3, [r4, #20]
 800c560:	b002      	add	sp, #8
 800c562:	bd70      	pop	{r4, r5, r6, pc}
 800c564:	ab01      	add	r3, sp, #4
 800c566:	466a      	mov	r2, sp
 800c568:	f7ff ffc8 	bl	800c4fc <__swhatbuf_r>
 800c56c:	9900      	ldr	r1, [sp, #0]
 800c56e:	4605      	mov	r5, r0
 800c570:	4630      	mov	r0, r6
 800c572:	f7ff f963 	bl	800b83c <_malloc_r>
 800c576:	b948      	cbnz	r0, 800c58c <__smakebuf_r+0x44>
 800c578:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c57c:	059a      	lsls	r2, r3, #22
 800c57e:	d4ef      	bmi.n	800c560 <__smakebuf_r+0x18>
 800c580:	f023 0303 	bic.w	r3, r3, #3
 800c584:	f043 0302 	orr.w	r3, r3, #2
 800c588:	81a3      	strh	r3, [r4, #12]
 800c58a:	e7e3      	b.n	800c554 <__smakebuf_r+0xc>
 800c58c:	4b0d      	ldr	r3, [pc, #52]	; (800c5c4 <__smakebuf_r+0x7c>)
 800c58e:	62b3      	str	r3, [r6, #40]	; 0x28
 800c590:	89a3      	ldrh	r3, [r4, #12]
 800c592:	6020      	str	r0, [r4, #0]
 800c594:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c598:	81a3      	strh	r3, [r4, #12]
 800c59a:	9b00      	ldr	r3, [sp, #0]
 800c59c:	6163      	str	r3, [r4, #20]
 800c59e:	9b01      	ldr	r3, [sp, #4]
 800c5a0:	6120      	str	r0, [r4, #16]
 800c5a2:	b15b      	cbz	r3, 800c5bc <__smakebuf_r+0x74>
 800c5a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c5a8:	4630      	mov	r0, r6
 800c5aa:	f000 f8d1 	bl	800c750 <_isatty_r>
 800c5ae:	b128      	cbz	r0, 800c5bc <__smakebuf_r+0x74>
 800c5b0:	89a3      	ldrh	r3, [r4, #12]
 800c5b2:	f023 0303 	bic.w	r3, r3, #3
 800c5b6:	f043 0301 	orr.w	r3, r3, #1
 800c5ba:	81a3      	strh	r3, [r4, #12]
 800c5bc:	89a0      	ldrh	r0, [r4, #12]
 800c5be:	4305      	orrs	r5, r0
 800c5c0:	81a5      	strh	r5, [r4, #12]
 800c5c2:	e7cd      	b.n	800c560 <__smakebuf_r+0x18>
 800c5c4:	0800c355 	.word	0x0800c355

0800c5c8 <_malloc_usable_size_r>:
 800c5c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c5cc:	1f18      	subs	r0, r3, #4
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	bfbc      	itt	lt
 800c5d2:	580b      	ldrlt	r3, [r1, r0]
 800c5d4:	18c0      	addlt	r0, r0, r3
 800c5d6:	4770      	bx	lr

0800c5d8 <_raise_r>:
 800c5d8:	291f      	cmp	r1, #31
 800c5da:	b538      	push	{r3, r4, r5, lr}
 800c5dc:	4604      	mov	r4, r0
 800c5de:	460d      	mov	r5, r1
 800c5e0:	d904      	bls.n	800c5ec <_raise_r+0x14>
 800c5e2:	2316      	movs	r3, #22
 800c5e4:	6003      	str	r3, [r0, #0]
 800c5e6:	f04f 30ff 	mov.w	r0, #4294967295
 800c5ea:	bd38      	pop	{r3, r4, r5, pc}
 800c5ec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c5ee:	b112      	cbz	r2, 800c5f6 <_raise_r+0x1e>
 800c5f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c5f4:	b94b      	cbnz	r3, 800c60a <_raise_r+0x32>
 800c5f6:	4620      	mov	r0, r4
 800c5f8:	f000 f830 	bl	800c65c <_getpid_r>
 800c5fc:	462a      	mov	r2, r5
 800c5fe:	4601      	mov	r1, r0
 800c600:	4620      	mov	r0, r4
 800c602:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c606:	f000 b817 	b.w	800c638 <_kill_r>
 800c60a:	2b01      	cmp	r3, #1
 800c60c:	d00a      	beq.n	800c624 <_raise_r+0x4c>
 800c60e:	1c59      	adds	r1, r3, #1
 800c610:	d103      	bne.n	800c61a <_raise_r+0x42>
 800c612:	2316      	movs	r3, #22
 800c614:	6003      	str	r3, [r0, #0]
 800c616:	2001      	movs	r0, #1
 800c618:	e7e7      	b.n	800c5ea <_raise_r+0x12>
 800c61a:	2400      	movs	r4, #0
 800c61c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c620:	4628      	mov	r0, r5
 800c622:	4798      	blx	r3
 800c624:	2000      	movs	r0, #0
 800c626:	e7e0      	b.n	800c5ea <_raise_r+0x12>

0800c628 <raise>:
 800c628:	4b02      	ldr	r3, [pc, #8]	; (800c634 <raise+0xc>)
 800c62a:	4601      	mov	r1, r0
 800c62c:	6818      	ldr	r0, [r3, #0]
 800c62e:	f7ff bfd3 	b.w	800c5d8 <_raise_r>
 800c632:	bf00      	nop
 800c634:	20000028 	.word	0x20000028

0800c638 <_kill_r>:
 800c638:	b538      	push	{r3, r4, r5, lr}
 800c63a:	4d07      	ldr	r5, [pc, #28]	; (800c658 <_kill_r+0x20>)
 800c63c:	2300      	movs	r3, #0
 800c63e:	4604      	mov	r4, r0
 800c640:	4608      	mov	r0, r1
 800c642:	4611      	mov	r1, r2
 800c644:	602b      	str	r3, [r5, #0]
 800c646:	f7f6 f9a3 	bl	8002990 <_kill>
 800c64a:	1c43      	adds	r3, r0, #1
 800c64c:	d102      	bne.n	800c654 <_kill_r+0x1c>
 800c64e:	682b      	ldr	r3, [r5, #0]
 800c650:	b103      	cbz	r3, 800c654 <_kill_r+0x1c>
 800c652:	6023      	str	r3, [r4, #0]
 800c654:	bd38      	pop	{r3, r4, r5, pc}
 800c656:	bf00      	nop
 800c658:	200005a0 	.word	0x200005a0

0800c65c <_getpid_r>:
 800c65c:	f7f6 b990 	b.w	8002980 <_getpid>

0800c660 <__sread>:
 800c660:	b510      	push	{r4, lr}
 800c662:	460c      	mov	r4, r1
 800c664:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c668:	f000 f894 	bl	800c794 <_read_r>
 800c66c:	2800      	cmp	r0, #0
 800c66e:	bfab      	itete	ge
 800c670:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c672:	89a3      	ldrhlt	r3, [r4, #12]
 800c674:	181b      	addge	r3, r3, r0
 800c676:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c67a:	bfac      	ite	ge
 800c67c:	6563      	strge	r3, [r4, #84]	; 0x54
 800c67e:	81a3      	strhlt	r3, [r4, #12]
 800c680:	bd10      	pop	{r4, pc}

0800c682 <__swrite>:
 800c682:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c686:	461f      	mov	r7, r3
 800c688:	898b      	ldrh	r3, [r1, #12]
 800c68a:	05db      	lsls	r3, r3, #23
 800c68c:	4605      	mov	r5, r0
 800c68e:	460c      	mov	r4, r1
 800c690:	4616      	mov	r6, r2
 800c692:	d505      	bpl.n	800c6a0 <__swrite+0x1e>
 800c694:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c698:	2302      	movs	r3, #2
 800c69a:	2200      	movs	r2, #0
 800c69c:	f000 f868 	bl	800c770 <_lseek_r>
 800c6a0:	89a3      	ldrh	r3, [r4, #12]
 800c6a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c6a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c6aa:	81a3      	strh	r3, [r4, #12]
 800c6ac:	4632      	mov	r2, r6
 800c6ae:	463b      	mov	r3, r7
 800c6b0:	4628      	mov	r0, r5
 800c6b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c6b6:	f000 b817 	b.w	800c6e8 <_write_r>

0800c6ba <__sseek>:
 800c6ba:	b510      	push	{r4, lr}
 800c6bc:	460c      	mov	r4, r1
 800c6be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6c2:	f000 f855 	bl	800c770 <_lseek_r>
 800c6c6:	1c43      	adds	r3, r0, #1
 800c6c8:	89a3      	ldrh	r3, [r4, #12]
 800c6ca:	bf15      	itete	ne
 800c6cc:	6560      	strne	r0, [r4, #84]	; 0x54
 800c6ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c6d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c6d6:	81a3      	strheq	r3, [r4, #12]
 800c6d8:	bf18      	it	ne
 800c6da:	81a3      	strhne	r3, [r4, #12]
 800c6dc:	bd10      	pop	{r4, pc}

0800c6de <__sclose>:
 800c6de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6e2:	f000 b813 	b.w	800c70c <_close_r>
	...

0800c6e8 <_write_r>:
 800c6e8:	b538      	push	{r3, r4, r5, lr}
 800c6ea:	4d07      	ldr	r5, [pc, #28]	; (800c708 <_write_r+0x20>)
 800c6ec:	4604      	mov	r4, r0
 800c6ee:	4608      	mov	r0, r1
 800c6f0:	4611      	mov	r1, r2
 800c6f2:	2200      	movs	r2, #0
 800c6f4:	602a      	str	r2, [r5, #0]
 800c6f6:	461a      	mov	r2, r3
 800c6f8:	f7f6 f981 	bl	80029fe <_write>
 800c6fc:	1c43      	adds	r3, r0, #1
 800c6fe:	d102      	bne.n	800c706 <_write_r+0x1e>
 800c700:	682b      	ldr	r3, [r5, #0]
 800c702:	b103      	cbz	r3, 800c706 <_write_r+0x1e>
 800c704:	6023      	str	r3, [r4, #0]
 800c706:	bd38      	pop	{r3, r4, r5, pc}
 800c708:	200005a0 	.word	0x200005a0

0800c70c <_close_r>:
 800c70c:	b538      	push	{r3, r4, r5, lr}
 800c70e:	4d06      	ldr	r5, [pc, #24]	; (800c728 <_close_r+0x1c>)
 800c710:	2300      	movs	r3, #0
 800c712:	4604      	mov	r4, r0
 800c714:	4608      	mov	r0, r1
 800c716:	602b      	str	r3, [r5, #0]
 800c718:	f7f6 f98d 	bl	8002a36 <_close>
 800c71c:	1c43      	adds	r3, r0, #1
 800c71e:	d102      	bne.n	800c726 <_close_r+0x1a>
 800c720:	682b      	ldr	r3, [r5, #0]
 800c722:	b103      	cbz	r3, 800c726 <_close_r+0x1a>
 800c724:	6023      	str	r3, [r4, #0]
 800c726:	bd38      	pop	{r3, r4, r5, pc}
 800c728:	200005a0 	.word	0x200005a0

0800c72c <_fstat_r>:
 800c72c:	b538      	push	{r3, r4, r5, lr}
 800c72e:	4d07      	ldr	r5, [pc, #28]	; (800c74c <_fstat_r+0x20>)
 800c730:	2300      	movs	r3, #0
 800c732:	4604      	mov	r4, r0
 800c734:	4608      	mov	r0, r1
 800c736:	4611      	mov	r1, r2
 800c738:	602b      	str	r3, [r5, #0]
 800c73a:	f7f6 f988 	bl	8002a4e <_fstat>
 800c73e:	1c43      	adds	r3, r0, #1
 800c740:	d102      	bne.n	800c748 <_fstat_r+0x1c>
 800c742:	682b      	ldr	r3, [r5, #0]
 800c744:	b103      	cbz	r3, 800c748 <_fstat_r+0x1c>
 800c746:	6023      	str	r3, [r4, #0]
 800c748:	bd38      	pop	{r3, r4, r5, pc}
 800c74a:	bf00      	nop
 800c74c:	200005a0 	.word	0x200005a0

0800c750 <_isatty_r>:
 800c750:	b538      	push	{r3, r4, r5, lr}
 800c752:	4d06      	ldr	r5, [pc, #24]	; (800c76c <_isatty_r+0x1c>)
 800c754:	2300      	movs	r3, #0
 800c756:	4604      	mov	r4, r0
 800c758:	4608      	mov	r0, r1
 800c75a:	602b      	str	r3, [r5, #0]
 800c75c:	f7f6 f987 	bl	8002a6e <_isatty>
 800c760:	1c43      	adds	r3, r0, #1
 800c762:	d102      	bne.n	800c76a <_isatty_r+0x1a>
 800c764:	682b      	ldr	r3, [r5, #0]
 800c766:	b103      	cbz	r3, 800c76a <_isatty_r+0x1a>
 800c768:	6023      	str	r3, [r4, #0]
 800c76a:	bd38      	pop	{r3, r4, r5, pc}
 800c76c:	200005a0 	.word	0x200005a0

0800c770 <_lseek_r>:
 800c770:	b538      	push	{r3, r4, r5, lr}
 800c772:	4d07      	ldr	r5, [pc, #28]	; (800c790 <_lseek_r+0x20>)
 800c774:	4604      	mov	r4, r0
 800c776:	4608      	mov	r0, r1
 800c778:	4611      	mov	r1, r2
 800c77a:	2200      	movs	r2, #0
 800c77c:	602a      	str	r2, [r5, #0]
 800c77e:	461a      	mov	r2, r3
 800c780:	f7f6 f980 	bl	8002a84 <_lseek>
 800c784:	1c43      	adds	r3, r0, #1
 800c786:	d102      	bne.n	800c78e <_lseek_r+0x1e>
 800c788:	682b      	ldr	r3, [r5, #0]
 800c78a:	b103      	cbz	r3, 800c78e <_lseek_r+0x1e>
 800c78c:	6023      	str	r3, [r4, #0]
 800c78e:	bd38      	pop	{r3, r4, r5, pc}
 800c790:	200005a0 	.word	0x200005a0

0800c794 <_read_r>:
 800c794:	b538      	push	{r3, r4, r5, lr}
 800c796:	4d07      	ldr	r5, [pc, #28]	; (800c7b4 <_read_r+0x20>)
 800c798:	4604      	mov	r4, r0
 800c79a:	4608      	mov	r0, r1
 800c79c:	4611      	mov	r1, r2
 800c79e:	2200      	movs	r2, #0
 800c7a0:	602a      	str	r2, [r5, #0]
 800c7a2:	461a      	mov	r2, r3
 800c7a4:	f7f6 f90e 	bl	80029c4 <_read>
 800c7a8:	1c43      	adds	r3, r0, #1
 800c7aa:	d102      	bne.n	800c7b2 <_read_r+0x1e>
 800c7ac:	682b      	ldr	r3, [r5, #0]
 800c7ae:	b103      	cbz	r3, 800c7b2 <_read_r+0x1e>
 800c7b0:	6023      	str	r3, [r4, #0]
 800c7b2:	bd38      	pop	{r3, r4, r5, pc}
 800c7b4:	200005a0 	.word	0x200005a0

0800c7b8 <trunc>:
 800c7b8:	ec51 0b10 	vmov	r0, r1, d0
 800c7bc:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c7c0:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800c7c4:	2b13      	cmp	r3, #19
 800c7c6:	b5d0      	push	{r4, r6, r7, lr}
 800c7c8:	460c      	mov	r4, r1
 800c7ca:	dc10      	bgt.n	800c7ee <trunc+0x36>
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	bfa5      	ittet	ge
 800c7d0:	4a11      	ldrge	r2, [pc, #68]	; (800c818 <trunc+0x60>)
 800c7d2:	fa42 f303 	asrge.w	r3, r2, r3
 800c7d6:	2100      	movlt	r1, #0
 800c7d8:	2100      	movge	r1, #0
 800c7da:	bfb9      	ittee	lt
 800c7dc:	2000      	movlt	r0, #0
 800c7de:	f004 4100 	andlt.w	r1, r4, #2147483648	; 0x80000000
 800c7e2:	2000      	movge	r0, #0
 800c7e4:	ea24 0103 	bicge.w	r1, r4, r3
 800c7e8:	ec41 0b10 	vmov	d0, r0, r1
 800c7ec:	bdd0      	pop	{r4, r6, r7, pc}
 800c7ee:	2b33      	cmp	r3, #51	; 0x33
 800c7f0:	dd08      	ble.n	800c804 <trunc+0x4c>
 800c7f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c7f6:	d1f7      	bne.n	800c7e8 <trunc+0x30>
 800c7f8:	ee10 2a10 	vmov	r2, s0
 800c7fc:	460b      	mov	r3, r1
 800c7fe:	f7f3 fd4d 	bl	800029c <__adddf3>
 800c802:	e7f1      	b.n	800c7e8 <trunc+0x30>
 800c804:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800c808:	f04f 33ff 	mov.w	r3, #4294967295
 800c80c:	fa23 f202 	lsr.w	r2, r3, r2
 800c810:	ea20 0602 	bic.w	r6, r0, r2
 800c814:	4630      	mov	r0, r6
 800c816:	e7e7      	b.n	800c7e8 <trunc+0x30>
 800c818:	000fffff 	.word	0x000fffff

0800c81c <ceilf>:
 800c81c:	ee10 3a10 	vmov	r3, s0
 800c820:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c824:	3a7f      	subs	r2, #127	; 0x7f
 800c826:	2a16      	cmp	r2, #22
 800c828:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c82c:	dc2a      	bgt.n	800c884 <ceilf+0x68>
 800c82e:	2a00      	cmp	r2, #0
 800c830:	da11      	bge.n	800c856 <ceilf+0x3a>
 800c832:	eddf 7a19 	vldr	s15, [pc, #100]	; 800c898 <ceilf+0x7c>
 800c836:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c83a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c83e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c842:	dd05      	ble.n	800c850 <ceilf+0x34>
 800c844:	2b00      	cmp	r3, #0
 800c846:	db23      	blt.n	800c890 <ceilf+0x74>
 800c848:	2900      	cmp	r1, #0
 800c84a:	bf18      	it	ne
 800c84c:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 800c850:	ee00 3a10 	vmov	s0, r3
 800c854:	4770      	bx	lr
 800c856:	4911      	ldr	r1, [pc, #68]	; (800c89c <ceilf+0x80>)
 800c858:	4111      	asrs	r1, r2
 800c85a:	420b      	tst	r3, r1
 800c85c:	d0fa      	beq.n	800c854 <ceilf+0x38>
 800c85e:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800c898 <ceilf+0x7c>
 800c862:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c866:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c86a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c86e:	ddef      	ble.n	800c850 <ceilf+0x34>
 800c870:	2b00      	cmp	r3, #0
 800c872:	bfc2      	ittt	gt
 800c874:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 800c878:	fa40 f202 	asrgt.w	r2, r0, r2
 800c87c:	189b      	addgt	r3, r3, r2
 800c87e:	ea23 0301 	bic.w	r3, r3, r1
 800c882:	e7e5      	b.n	800c850 <ceilf+0x34>
 800c884:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800c888:	d3e4      	bcc.n	800c854 <ceilf+0x38>
 800c88a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c88e:	4770      	bx	lr
 800c890:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c894:	e7dc      	b.n	800c850 <ceilf+0x34>
 800c896:	bf00      	nop
 800c898:	7149f2ca 	.word	0x7149f2ca
 800c89c:	007fffff 	.word	0x007fffff

0800c8a0 <_init>:
 800c8a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8a2:	bf00      	nop
 800c8a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8a6:	bc08      	pop	{r3}
 800c8a8:	469e      	mov	lr, r3
 800c8aa:	4770      	bx	lr

0800c8ac <_fini>:
 800c8ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8ae:	bf00      	nop
 800c8b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8b2:	bc08      	pop	{r3}
 800c8b4:	469e      	mov	lr, r3
 800c8b6:	4770      	bx	lr
