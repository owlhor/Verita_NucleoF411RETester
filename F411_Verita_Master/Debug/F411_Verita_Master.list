
F411_Verita_Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c0e0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000093fc  0800c280  0800c280  0001c280  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801567c  0801567c  000301f4  2**0
                  CONTENTS
  4 .ARM          00000008  0801567c  0801567c  0002567c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015684  08015684  000301f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015684  08015684  00025684  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015688  08015688  00025688  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0801568c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000035ac  200001f4  08015880  000301f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200037a0  08015880  000337a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001658f  00000000  00000000  00030224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dab  00000000  00000000  000467b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001448  00000000  00000000  00049560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001308  00000000  00000000  0004a9a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019a7c  00000000  00000000  0004bcb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017c93  00000000  00000000  0006572c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009891e  00000000  00000000  0007d3bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00115cdd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000067c0  00000000  00000000  00115d30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f4 	.word	0x200001f4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c268 	.word	0x0800c268

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f8 	.word	0x200001f8
 80001dc:	0800c268 	.word	0x0800c268

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b974 	b.w	8000f98 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468e      	mov	lr, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14d      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4694      	mov	ip, r2
 8000cda:	d969      	bls.n	8000db0 <__udivmoddi4+0xe8>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b152      	cbz	r2, 8000cf8 <__udivmoddi4+0x30>
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	f1c2 0120 	rsb	r1, r2, #32
 8000cea:	fa20 f101 	lsr.w	r1, r0, r1
 8000cee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cf6:	4094      	lsls	r4, r2
 8000cf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cfc:	0c21      	lsrs	r1, r4, #16
 8000cfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000d02:	fa1f f78c 	uxth.w	r7, ip
 8000d06:	fb08 e316 	mls	r3, r8, r6, lr
 8000d0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d0e:	fb06 f107 	mul.w	r1, r6, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1e:	f080 811f 	bcs.w	8000f60 <__udivmoddi4+0x298>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 811c 	bls.w	8000f60 <__udivmoddi4+0x298>
 8000d28:	3e02      	subs	r6, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a5b      	subs	r3, r3, r1
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d34:	fb08 3310 	mls	r3, r8, r0, r3
 8000d38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d3c:	fb00 f707 	mul.w	r7, r0, r7
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x92>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4c:	f080 810a 	bcs.w	8000f64 <__udivmoddi4+0x29c>
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	f240 8107 	bls.w	8000f64 <__udivmoddi4+0x29c>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5e:	1be4      	subs	r4, r4, r7
 8000d60:	2600      	movs	r6, #0
 8000d62:	b11d      	cbz	r5, 8000d6c <__udivmoddi4+0xa4>
 8000d64:	40d4      	lsrs	r4, r2
 8000d66:	2300      	movs	r3, #0
 8000d68:	e9c5 4300 	strd	r4, r3, [r5]
 8000d6c:	4631      	mov	r1, r6
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0xc2>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	f000 80ef 	beq.w	8000f5a <__udivmoddi4+0x292>
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d82:	4630      	mov	r0, r6
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f683 	clz	r6, r3
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	d14a      	bne.n	8000e28 <__udivmoddi4+0x160>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xd4>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80f9 	bhi.w	8000f8e <__udivmoddi4+0x2c6>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	469e      	mov	lr, r3
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d0e0      	beq.n	8000d6c <__udivmoddi4+0xa4>
 8000daa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dae:	e7dd      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000db0:	b902      	cbnz	r2, 8000db4 <__udivmoddi4+0xec>
 8000db2:	deff      	udf	#255	; 0xff
 8000db4:	fab2 f282 	clz	r2, r2
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	f040 8092 	bne.w	8000ee2 <__udivmoddi4+0x21a>
 8000dbe:	eba1 010c 	sub.w	r1, r1, ip
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f fe8c 	uxth.w	lr, ip
 8000dca:	2601      	movs	r6, #1
 8000dcc:	0c20      	lsrs	r0, r4, #16
 8000dce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dda:	fb0e f003 	mul.w	r0, lr, r3
 8000dde:	4288      	cmp	r0, r1
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x12c>
 8000de2:	eb1c 0101 	adds.w	r1, ip, r1
 8000de6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x12a>
 8000dec:	4288      	cmp	r0, r1
 8000dee:	f200 80cb 	bhi.w	8000f88 <__udivmoddi4+0x2c0>
 8000df2:	4643      	mov	r3, r8
 8000df4:	1a09      	subs	r1, r1, r0
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000e00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e04:	fb0e fe00 	mul.w	lr, lr, r0
 8000e08:	45a6      	cmp	lr, r4
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x156>
 8000e0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e14:	d202      	bcs.n	8000e1c <__udivmoddi4+0x154>
 8000e16:	45a6      	cmp	lr, r4
 8000e18:	f200 80bb 	bhi.w	8000f92 <__udivmoddi4+0x2ca>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	eba4 040e 	sub.w	r4, r4, lr
 8000e22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e26:	e79c      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000e28:	f1c6 0720 	rsb	r7, r6, #32
 8000e2c:	40b3      	lsls	r3, r6
 8000e2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e36:	fa20 f407 	lsr.w	r4, r0, r7
 8000e3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3e:	431c      	orrs	r4, r3
 8000e40:	40f9      	lsrs	r1, r7
 8000e42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e46:	fa00 f306 	lsl.w	r3, r0, r6
 8000e4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e4e:	0c20      	lsrs	r0, r4, #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fb09 1118 	mls	r1, r9, r8, r1
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e60:	4288      	cmp	r0, r1
 8000e62:	fa02 f206 	lsl.w	r2, r2, r6
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x1b8>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e70:	f080 8088 	bcs.w	8000f84 <__udivmoddi4+0x2bc>
 8000e74:	4288      	cmp	r0, r1
 8000e76:	f240 8085 	bls.w	8000f84 <__udivmoddi4+0x2bc>
 8000e7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e88:	fb09 1110 	mls	r1, r9, r0, r1
 8000e8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e94:	458e      	cmp	lr, r1
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x1e2>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea0:	d26c      	bcs.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea2:	458e      	cmp	lr, r1
 8000ea4:	d96a      	bls.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4461      	add	r1, ip
 8000eaa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eae:	fba0 9402 	umull	r9, r4, r0, r2
 8000eb2:	eba1 010e 	sub.w	r1, r1, lr
 8000eb6:	42a1      	cmp	r1, r4
 8000eb8:	46c8      	mov	r8, r9
 8000eba:	46a6      	mov	lr, r4
 8000ebc:	d356      	bcc.n	8000f6c <__udivmoddi4+0x2a4>
 8000ebe:	d053      	beq.n	8000f68 <__udivmoddi4+0x2a0>
 8000ec0:	b15d      	cbz	r5, 8000eda <__udivmoddi4+0x212>
 8000ec2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ec6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eca:	fa01 f707 	lsl.w	r7, r1, r7
 8000ece:	fa22 f306 	lsr.w	r3, r2, r6
 8000ed2:	40f1      	lsrs	r1, r6
 8000ed4:	431f      	orrs	r7, r3
 8000ed6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eda:	2600      	movs	r6, #0
 8000edc:	4631      	mov	r1, r6
 8000ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee2:	f1c2 0320 	rsb	r3, r2, #32
 8000ee6:	40d8      	lsrs	r0, r3
 8000ee8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eec:	fa21 f303 	lsr.w	r3, r1, r3
 8000ef0:	4091      	lsls	r1, r2
 8000ef2:	4301      	orrs	r1, r0
 8000ef4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef8:	fa1f fe8c 	uxth.w	lr, ip
 8000efc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f00:	fb07 3610 	mls	r6, r7, r0, r3
 8000f04:	0c0b      	lsrs	r3, r1, #16
 8000f06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f0e:	429e      	cmp	r6, r3
 8000f10:	fa04 f402 	lsl.w	r4, r4, r2
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x260>
 8000f16:	eb1c 0303 	adds.w	r3, ip, r3
 8000f1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f1e:	d22f      	bcs.n	8000f80 <__udivmoddi4+0x2b8>
 8000f20:	429e      	cmp	r6, r3
 8000f22:	d92d      	bls.n	8000f80 <__udivmoddi4+0x2b8>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4463      	add	r3, ip
 8000f28:	1b9b      	subs	r3, r3, r6
 8000f2a:	b289      	uxth	r1, r1
 8000f2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f30:	fb07 3316 	mls	r3, r7, r6, r3
 8000f34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f38:	fb06 f30e 	mul.w	r3, r6, lr
 8000f3c:	428b      	cmp	r3, r1
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x28a>
 8000f40:	eb1c 0101 	adds.w	r1, ip, r1
 8000f44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f48:	d216      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d914      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4e:	3e02      	subs	r6, #2
 8000f50:	4461      	add	r1, ip
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f58:	e738      	b.n	8000dcc <__udivmoddi4+0x104>
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e705      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e3      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6f8      	b.n	8000d5a <__udivmoddi4+0x92>
 8000f68:	454b      	cmp	r3, r9
 8000f6a:	d2a9      	bcs.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7a3      	b.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f78:	4646      	mov	r6, r8
 8000f7a:	e7ea      	b.n	8000f52 <__udivmoddi4+0x28a>
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	e794      	b.n	8000eaa <__udivmoddi4+0x1e2>
 8000f80:	4640      	mov	r0, r8
 8000f82:	e7d1      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f84:	46d0      	mov	r8, sl
 8000f86:	e77b      	b.n	8000e80 <__udivmoddi4+0x1b8>
 8000f88:	3b02      	subs	r3, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	e732      	b.n	8000df4 <__udivmoddi4+0x12c>
 8000f8e:	4630      	mov	r0, r6
 8000f90:	e709      	b.n	8000da6 <__udivmoddi4+0xde>
 8000f92:	4464      	add	r4, ip
 8000f94:	3802      	subs	r0, #2
 8000f96:	e742      	b.n	8000e1e <__udivmoddi4+0x156>

08000f98 <__aeabi_idiv0>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <INA219Read_cx>:
 *  D16[1] :  00 CD  // D8[ 3 2 ]
 *  D16[1] | D16[0] = ABCD
 * */


uint16_t INA219Read_cx(I2C_HandleTypeDef *hi2c,uint8_t dv_addr, uint8_t ina_rg){
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b086      	sub	sp, #24
 8000fa0:	af04      	add	r7, sp, #16
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	70fb      	strb	r3, [r7, #3]
 8000fa8:	4613      	mov	r3, r2
 8000faa:	70bb      	strb	r3, [r7, #2]
	 * @param : ina_rg - register address need to access
	 * @Retval: raw bit value
	 * @ex. answer = INA219Read_cx(&hi2c1, INA219_ADDR_1, INA219_RG_Current);
	 * */

	INACBffr.D32 = 0; //// buffer clear
 8000fac:	4b0d      	ldr	r3, [pc, #52]	; (8000fe4 <INA219Read_cx+0x48>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	601a      	str	r2, [r3, #0]
	HAL_I2C_Mem_Read(hi2c, dv_addr, ina_rg, I2C_MEMADD_SIZE_8BIT, &INACBffr.D8[1], 2, 10);
 8000fb2:	78fb      	ldrb	r3, [r7, #3]
 8000fb4:	b299      	uxth	r1, r3
 8000fb6:	78bb      	ldrb	r3, [r7, #2]
 8000fb8:	b29a      	uxth	r2, r3
 8000fba:	230a      	movs	r3, #10
 8000fbc:	9302      	str	r3, [sp, #8]
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	9301      	str	r3, [sp, #4]
 8000fc2:	4b09      	ldr	r3, [pc, #36]	; (8000fe8 <INA219Read_cx+0x4c>)
 8000fc4:	9300      	str	r3, [sp, #0]
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	6878      	ldr	r0, [r7, #4]
 8000fca:	f003 fb33 	bl	8004634 <HAL_I2C_Mem_Read>
	return INACBffr.D16[1] | INACBffr.D16[0];
 8000fce:	4b05      	ldr	r3, [pc, #20]	; (8000fe4 <INA219Read_cx+0x48>)
 8000fd0:	885a      	ldrh	r2, [r3, #2]
 8000fd2:	4b04      	ldr	r3, [pc, #16]	; (8000fe4 <INA219Read_cx+0x48>)
 8000fd4:	881b      	ldrh	r3, [r3, #0]
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	b29b      	uxth	r3, r3
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	20000210 	.word	0x20000210
 8000fe8:	20000211 	.word	0x20000211
 8000fec:	00000000 	.word	0x00000000

08000ff0 <INA219_INIT_Calibrate>:
	HAL_I2C_Mem_Write(hi2c, dv_addr, INA219_RG_Config, I2C_MEMADD_SIZE_8BIT, &resetx, 2, 10);

}

INA219_Conf_Strc configura;
void INA219_INIT_Calibrate(I2C_HandleTypeDef *hi2c,uint8_t dv_addr){
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b08a      	sub	sp, #40	; 0x28
 8000ff4:	af04      	add	r7, sp, #16
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	70fb      	strb	r3, [r7, #3]
	 * @param : hi2c - HAL_I2C used to read
	 * @param : dv_addr - address of INA219 device in the busline
	 * */

	////// -------------------- Configuration -------------------------------------
	configura.INA219CF.reset = 0;
 8000ffc:	4a52      	ldr	r2, [pc, #328]	; (8001148 <INA219_INIT_Calibrate+0x158>)
 8000ffe:	7853      	ldrb	r3, [r2, #1]
 8001000:	f36f 13c7 	bfc	r3, #7, #1
 8001004:	7053      	strb	r3, [r2, #1]
	configura.INA219CF.BRNG = BRNG_FSR_32V;
 8001006:	4a50      	ldr	r2, [pc, #320]	; (8001148 <INA219_INIT_Calibrate+0x158>)
 8001008:	7853      	ldrb	r3, [r2, #1]
 800100a:	f043 0320 	orr.w	r3, r3, #32
 800100e:	7053      	strb	r3, [r2, #1]
	configura.INA219CF.PGA = PGA_GainD4_160mv;
 8001010:	4a4d      	ldr	r2, [pc, #308]	; (8001148 <INA219_INIT_Calibrate+0x158>)
 8001012:	7853      	ldrb	r3, [r2, #1]
 8001014:	2102      	movs	r1, #2
 8001016:	f361 03c4 	bfi	r3, r1, #3, #2
 800101a:	7053      	strb	r3, [r2, #1]
	configura.INA219CF.BADC = ADCI_12bit_532uS;
 800101c:	4a4a      	ldr	r2, [pc, #296]	; (8001148 <INA219_INIT_Calibrate+0x158>)
 800101e:	8813      	ldrh	r3, [r2, #0]
 8001020:	2103      	movs	r1, #3
 8001022:	f361 13ca 	bfi	r3, r1, #7, #4
 8001026:	8013      	strh	r3, [r2, #0]
	configura.INA219CF.SADC = ADCI_12bit_532uS;
 8001028:	4a47      	ldr	r2, [pc, #284]	; (8001148 <INA219_INIT_Calibrate+0x158>)
 800102a:	7813      	ldrb	r3, [r2, #0]
 800102c:	2103      	movs	r1, #3
 800102e:	f361 03c6 	bfi	r3, r1, #3, #4
 8001032:	7013      	strb	r3, [r2, #0]
	configura.INA219CF.Mode = INAM_ShuntBusV_Continuous;
 8001034:	4a44      	ldr	r2, [pc, #272]	; (8001148 <INA219_INIT_Calibrate+0x158>)
 8001036:	7813      	ldrb	r3, [r2, #0]
 8001038:	f043 0307 	orr.w	r3, r3, #7
 800103c:	7013      	strb	r3, [r2, #0]

	uint8_t confictor_si2c[2] = {configura.D8[1], configura.D8[0]};
 800103e:	4b42      	ldr	r3, [pc, #264]	; (8001148 <INA219_INIT_Calibrate+0x158>)
 8001040:	785b      	ldrb	r3, [r3, #1]
 8001042:	753b      	strb	r3, [r7, #20]
 8001044:	4b40      	ldr	r3, [pc, #256]	; (8001148 <INA219_INIT_Calibrate+0x158>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	757b      	strb	r3, [r7, #21]
	HAL_I2C_Mem_Write(hi2c, dv_addr, INA219_RG_Config, I2C_MEMADD_SIZE_8BIT, &confictor_si2c[0], 2, 10);
 800104a:	78fb      	ldrb	r3, [r7, #3]
 800104c:	b299      	uxth	r1, r3
 800104e:	230a      	movs	r3, #10
 8001050:	9302      	str	r3, [sp, #8]
 8001052:	2302      	movs	r3, #2
 8001054:	9301      	str	r3, [sp, #4]
 8001056:	f107 0314 	add.w	r3, r7, #20
 800105a:	9300      	str	r3, [sp, #0]
 800105c:	2301      	movs	r3, #1
 800105e:	2200      	movs	r2, #0
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f003 f9ed 	bl	8004440 <HAL_I2C_Mem_Write>
		uint16_t U16;
	}calibrator;

	// float current_LSB = INA219_MAX_Expect_Current / 32768.0; // 2^15
	//calibrator.U16 = (int16_t)(trunc( 0.04096 / (current_LSB * INA219_R_SHUNT_Val))) << 1;
	calibrator.U16 = trunc( 0.04096 / (current_LSB * INA219_R_SHUNT_Val));
 8001066:	4b39      	ldr	r3, [pc, #228]	; (800114c <INA219_INIT_Calibrate+0x15c>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff fa74 	bl	8000558 <__aeabi_f2d>
 8001070:	a32d      	add	r3, pc, #180	; (adr r3, 8001128 <INA219_INIT_Calibrate+0x138>)
 8001072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001076:	f7ff fac7 	bl	8000608 <__aeabi_dmul>
 800107a:	4602      	mov	r2, r0
 800107c:	460b      	mov	r3, r1
 800107e:	a12c      	add	r1, pc, #176	; (adr r1, 8001130 <INA219_INIT_Calibrate+0x140>)
 8001080:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001084:	f7ff fbea 	bl	800085c <__aeabi_ddiv>
 8001088:	4602      	mov	r2, r0
 800108a:	460b      	mov	r3, r1
 800108c:	ec43 2b17 	vmov	d7, r2, r3
 8001090:	eeb0 0a47 	vmov.f32	s0, s14
 8001094:	eef0 0a67 	vmov.f32	s1, s15
 8001098:	f00b f872 	bl	800c180 <trunc>
 800109c:	ec53 2b10 	vmov	r2, r3, d0
 80010a0:	4610      	mov	r0, r2
 80010a2:	4619      	mov	r1, r3
 80010a4:	f7ff fd88 	bl	8000bb8 <__aeabi_d2uiz>
 80010a8:	4603      	mov	r3, r0
 80010aa:	b29b      	uxth	r3, r3
 80010ac:	823b      	strh	r3, [r7, #16]
#ifdef calibrate_EQ6
	calibrator.U16 = trunc((calibrator.U16 * MeaShuntCurrent_ExtMeter) / INA219_Current_Raw);
 80010ae:	8a3b      	ldrh	r3, [r7, #16]
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff fa3f 	bl	8000534 <__aeabi_i2d>
 80010b6:	a320      	add	r3, pc, #128	; (adr r3, 8001138 <INA219_INIT_Calibrate+0x148>)
 80010b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010bc:	f7ff faa4 	bl	8000608 <__aeabi_dmul>
 80010c0:	4602      	mov	r2, r0
 80010c2:	460b      	mov	r3, r1
 80010c4:	4610      	mov	r0, r2
 80010c6:	4619      	mov	r1, r3
 80010c8:	a31d      	add	r3, pc, #116	; (adr r3, 8001140 <INA219_INIT_Calibrate+0x150>)
 80010ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ce:	f7ff fbc5 	bl	800085c <__aeabi_ddiv>
 80010d2:	4602      	mov	r2, r0
 80010d4:	460b      	mov	r3, r1
 80010d6:	ec43 2b17 	vmov	d7, r2, r3
 80010da:	eeb0 0a47 	vmov.f32	s0, s14
 80010de:	eef0 0a67 	vmov.f32	s1, s15
 80010e2:	f00b f84d 	bl	800c180 <trunc>
 80010e6:	ec53 2b10 	vmov	r2, r3, d0
 80010ea:	4610      	mov	r0, r2
 80010ec:	4619      	mov	r1, r3
 80010ee:	f7ff fd63 	bl	8000bb8 <__aeabi_d2uiz>
 80010f2:	4603      	mov	r3, r0
 80010f4:	b29b      	uxth	r3, r3
 80010f6:	823b      	strh	r3, [r7, #16]
#endif
	uint8_t calibrator_si2c[2] = {calibrator.U8[1], calibrator.U8[0]}; //// switch byte to send high order first in I2C
 80010f8:	7c7b      	ldrb	r3, [r7, #17]
 80010fa:	733b      	strb	r3, [r7, #12]
 80010fc:	7c3b      	ldrb	r3, [r7, #16]
 80010fe:	737b      	strb	r3, [r7, #13]
	////  ex calibrator(I = 3A, 0.1Rshunt) = 4473 = 0x1179

	HAL_I2C_Mem_Write(hi2c, dv_addr, INA219_RG_Calibra, I2C_MEMADD_SIZE_8BIT, &calibrator_si2c[0], 2, 10);
 8001100:	78fb      	ldrb	r3, [r7, #3]
 8001102:	b299      	uxth	r1, r3
 8001104:	230a      	movs	r3, #10
 8001106:	9302      	str	r3, [sp, #8]
 8001108:	2302      	movs	r3, #2
 800110a:	9301      	str	r3, [sp, #4]
 800110c:	f107 030c 	add.w	r3, r7, #12
 8001110:	9300      	str	r3, [sp, #0]
 8001112:	2301      	movs	r3, #1
 8001114:	2205      	movs	r2, #5
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f003 f992 	bl	8004440 <HAL_I2C_Mem_Write>

}
 800111c:	bf00      	nop
 800111e:	3718      	adds	r7, #24
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	f3af 8000 	nop.w
 8001128:	9999999a 	.word	0x9999999a
 800112c:	3fb99999 	.word	0x3fb99999
 8001130:	88e368f1 	.word	0x88e368f1
 8001134:	3fa4f8b5 	.word	0x3fa4f8b5
 8001138:	9999999a 	.word	0x9999999a
 800113c:	3fe99999 	.word	0x3fe99999
 8001140:	9999999a 	.word	0x9999999a
 8001144:	40059999 	.word	0x40059999
 8001148:	20000214 	.word	0x20000214
 800114c:	20000000 	.word	0x20000000

08001150 <INA219Read_BusV>:
	uint8_t calibrator_si2c[2] = {calibrator.U8[1], calibrator.U8[0]}; //// switch byte to send high order first in I2C
	HAL_I2C_Mem_Write(hi2c, dv_addr, INA219_RG_Calibra, I2C_MEMADD_SIZE_8BIT, &calibrator_si2c[0], 2, 10);

}

uint16_t INA219Read_BusV(I2C_HandleTypeDef *hi2c,uint8_t dv_addr){
 8001150:	b580      	push	{r7, lr}
 8001152:	b086      	sub	sp, #24
 8001154:	af04      	add	r7, sp, #16
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	460b      	mov	r3, r1
 800115a:	70fb      	strb	r3, [r7, #3]
	//	if(INACBffr[2] & 0x01){ // still unsure how to deal with CNVR / OVF
//
//	}


	INACBffr.D32 = 0; //// buffer clear
 800115c:	4b0e      	ldr	r3, [pc, #56]	; (8001198 <INA219Read_BusV+0x48>)
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
	HAL_I2C_Mem_Read(hi2c, dv_addr, INA219_RG_BusV, I2C_MEMADD_SIZE_8BIT, &INACBffr.D8[1], 2, 10);
 8001162:	78fb      	ldrb	r3, [r7, #3]
 8001164:	b299      	uxth	r1, r3
 8001166:	230a      	movs	r3, #10
 8001168:	9302      	str	r3, [sp, #8]
 800116a:	2302      	movs	r3, #2
 800116c:	9301      	str	r3, [sp, #4]
 800116e:	4b0b      	ldr	r3, [pc, #44]	; (800119c <INA219Read_BusV+0x4c>)
 8001170:	9300      	str	r3, [sp, #0]
 8001172:	2301      	movs	r3, #1
 8001174:	2202      	movs	r2, #2
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f003 fa5c 	bl	8004634 <HAL_I2C_Mem_Read>

	return ((INACBffr.D16[1] | INACBffr.D16[0]) >> 3) * 4;
 800117c:	4b06      	ldr	r3, [pc, #24]	; (8001198 <INA219Read_BusV+0x48>)
 800117e:	885a      	ldrh	r2, [r3, #2]
 8001180:	4b05      	ldr	r3, [pc, #20]	; (8001198 <INA219Read_BusV+0x48>)
 8001182:	881b      	ldrh	r3, [r3, #0]
 8001184:	4313      	orrs	r3, r2
 8001186:	b29b      	uxth	r3, r3
 8001188:	08db      	lsrs	r3, r3, #3
 800118a:	b29b      	uxth	r3, r3
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	b29b      	uxth	r3, r3
}
 8001190:	4618      	mov	r0, r3
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	20000210 	.word	0x20000210
 800119c:	20000211 	.word	0x20000211

080011a0 <INA219Read_Current>:

uint16_t INA219Read_Current(I2C_HandleTypeDef *hi2c,uint8_t dv_addr){
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b086      	sub	sp, #24
 80011a4:	af04      	add	r7, sp, #16
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	460b      	mov	r3, r1
 80011aa:	70fb      	strb	r3, [r7, #3]
	 * @param : hi2c - HAL_I2C used to read
	 * @param : dv_addr - address of INA219 device in the busline
	 * @Retval: current in mA
	 * @ex.
	 * */
	INACBffr.D32 = 0; //// buffer clear
 80011ac:	4b0c      	ldr	r3, [pc, #48]	; (80011e0 <INA219Read_Current+0x40>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
	HAL_I2C_Mem_Read(hi2c, dv_addr, INA219_RG_Current, I2C_MEMADD_SIZE_8BIT, &INACBffr.D8[1], 2, 10);
 80011b2:	78fb      	ldrb	r3, [r7, #3]
 80011b4:	b299      	uxth	r1, r3
 80011b6:	230a      	movs	r3, #10
 80011b8:	9302      	str	r3, [sp, #8]
 80011ba:	2302      	movs	r3, #2
 80011bc:	9301      	str	r3, [sp, #4]
 80011be:	4b09      	ldr	r3, [pc, #36]	; (80011e4 <INA219Read_Current+0x44>)
 80011c0:	9300      	str	r3, [sp, #0]
 80011c2:	2301      	movs	r3, #1
 80011c4:	2204      	movs	r2, #4
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f003 fa34 	bl	8004634 <HAL_I2C_Mem_Read>

	return INACBffr.D16[1] | INACBffr.D16[0];
 80011cc:	4b04      	ldr	r3, [pc, #16]	; (80011e0 <INA219Read_Current+0x40>)
 80011ce:	885a      	ldrh	r2, [r3, #2]
 80011d0:	4b03      	ldr	r3, [pc, #12]	; (80011e0 <INA219Read_Current+0x40>)
 80011d2:	881b      	ldrh	r3, [r3, #0]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	b29b      	uxth	r3, r3
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	20000210 	.word	0x20000210
 80011e4:	20000211 	.word	0x20000211

080011e8 <INA219Read_ShuntV>:

float INA219Read_ShuntV(I2C_HandleTypeDef *hi2c,uint8_t dv_addr){
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b088      	sub	sp, #32
 80011ec:	af04      	add	r7, sp, #16
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	460b      	mov	r3, r1
 80011f2:	70fb      	strb	r3, [r7, #3]
	 * @param : hi2c - HAL_I2C used to read
	 * @param : dv_addr - address of INA219 device in the busline
	 * @Retval: shunt voltage in mV (.2f)
	 * @ex.
	 * */
	INACBffr.D32 = 0; //// buffer clear
 80011f4:	4b17      	ldr	r3, [pc, #92]	; (8001254 <INA219Read_ShuntV+0x6c>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	601a      	str	r2, [r3, #0]
	HAL_I2C_Mem_Read(hi2c, dv_addr, INA219_RG_ShuntV, I2C_MEMADD_SIZE_8BIT, &INACBffr.D8[1], 2, 10);
 80011fa:	78fb      	ldrb	r3, [r7, #3]
 80011fc:	b299      	uxth	r1, r3
 80011fe:	230a      	movs	r3, #10
 8001200:	9302      	str	r3, [sp, #8]
 8001202:	2302      	movs	r3, #2
 8001204:	9301      	str	r3, [sp, #4]
 8001206:	4b14      	ldr	r3, [pc, #80]	; (8001258 <INA219Read_ShuntV+0x70>)
 8001208:	9300      	str	r3, [sp, #0]
 800120a:	2301      	movs	r3, #1
 800120c:	2201      	movs	r2, #1
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	f003 fa10 	bl	8004634 <HAL_I2C_Mem_Read>

	//// Convert rawdata To V shunt from Table 7.Shunt Voltage Register Format

    int16_t rawshunt = INACBffr.D16[1] | INACBffr.D16[0];
 8001214:	4b0f      	ldr	r3, [pc, #60]	; (8001254 <INA219Read_ShuntV+0x6c>)
 8001216:	885a      	ldrh	r2, [r3, #2]
 8001218:	4b0e      	ldr	r3, [pc, #56]	; (8001254 <INA219Read_ShuntV+0x6c>)
 800121a:	881b      	ldrh	r3, [r3, #0]
 800121c:	4313      	orrs	r3, r2
 800121e:	b29b      	uxth	r3, r3
 8001220:	81fb      	strh	r3, [r7, #14]
    return rawshunt / 100.0;
 8001222:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff f984 	bl	8000534 <__aeabi_i2d>
 800122c:	f04f 0200 	mov.w	r2, #0
 8001230:	4b0a      	ldr	r3, [pc, #40]	; (800125c <INA219Read_ShuntV+0x74>)
 8001232:	f7ff fb13 	bl	800085c <__aeabi_ddiv>
 8001236:	4602      	mov	r2, r0
 8001238:	460b      	mov	r3, r1
 800123a:	4610      	mov	r0, r2
 800123c:	4619      	mov	r1, r3
 800123e:	f7ff fcdb 	bl	8000bf8 <__aeabi_d2f>
 8001242:	4603      	mov	r3, r0
 8001244:	ee07 3a90 	vmov	s15, r3
//    	return rawshunt / 100.0;
//    }else{
//    	// if 2's complements
//    	return (~rawshunt + 1) / 100.0;
//    }
}
 8001248:	eeb0 0a67 	vmov.f32	s0, s15
 800124c:	3710      	adds	r7, #16
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	20000210 	.word	0x20000210
 8001258:	20000211 	.word	0x20000211
 800125c:	40590000 	.word	0x40590000

08001260 <INA219Read_Power>:

float INA219Read_Power(I2C_HandleTypeDef *hi2c,uint8_t dv_addr){
 8001260:	b5b0      	push	{r4, r5, r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af04      	add	r7, sp, #16
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	460b      	mov	r3, r1
 800126a:	70fb      	strb	r3, [r7, #3]
	 * @param : hi2c - HAL_I2C used to read
	 * @param : dv_addr - address of INA219 device in the busline
	 * @Retval: Power in mW
	 * @ex.
	 * */
	INACBffr.D32 = 0; //// buffer clear
 800126c:	4b1e      	ldr	r3, [pc, #120]	; (80012e8 <INA219Read_Power+0x88>)
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]
	HAL_I2C_Mem_Read(hi2c, dv_addr, INA219_RG_PoWer, I2C_MEMADD_SIZE_8BIT, &INACBffr.D8[1], 2, 10);
 8001272:	78fb      	ldrb	r3, [r7, #3]
 8001274:	b299      	uxth	r1, r3
 8001276:	230a      	movs	r3, #10
 8001278:	9302      	str	r3, [sp, #8]
 800127a:	2302      	movs	r3, #2
 800127c:	9301      	str	r3, [sp, #4]
 800127e:	4b1b      	ldr	r3, [pc, #108]	; (80012ec <INA219Read_Power+0x8c>)
 8001280:	9300      	str	r3, [sp, #0]
 8001282:	2301      	movs	r3, #1
 8001284:	2203      	movs	r2, #3
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f003 f9d4 	bl	8004634 <HAL_I2C_Mem_Read>
	////  * 20, power_LSB = 20 x current_LSB & x 1000 make unit in mW
	return ((INACBffr.D16[1] | INACBffr.D16[0]) * (20000.0 * current_LSB));
 800128c:	4b16      	ldr	r3, [pc, #88]	; (80012e8 <INA219Read_Power+0x88>)
 800128e:	885a      	ldrh	r2, [r3, #2]
 8001290:	4b15      	ldr	r3, [pc, #84]	; (80012e8 <INA219Read_Power+0x88>)
 8001292:	881b      	ldrh	r3, [r3, #0]
 8001294:	4313      	orrs	r3, r2
 8001296:	b29b      	uxth	r3, r3
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff f94b 	bl	8000534 <__aeabi_i2d>
 800129e:	4604      	mov	r4, r0
 80012a0:	460d      	mov	r5, r1
 80012a2:	4b13      	ldr	r3, [pc, #76]	; (80012f0 <INA219Read_Power+0x90>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff f956 	bl	8000558 <__aeabi_f2d>
 80012ac:	a30c      	add	r3, pc, #48	; (adr r3, 80012e0 <INA219Read_Power+0x80>)
 80012ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b2:	f7ff f9a9 	bl	8000608 <__aeabi_dmul>
 80012b6:	4602      	mov	r2, r0
 80012b8:	460b      	mov	r3, r1
 80012ba:	4620      	mov	r0, r4
 80012bc:	4629      	mov	r1, r5
 80012be:	f7ff f9a3 	bl	8000608 <__aeabi_dmul>
 80012c2:	4602      	mov	r2, r0
 80012c4:	460b      	mov	r3, r1
 80012c6:	4610      	mov	r0, r2
 80012c8:	4619      	mov	r1, r3
 80012ca:	f7ff fc95 	bl	8000bf8 <__aeabi_d2f>
 80012ce:	4603      	mov	r3, r0
 80012d0:	ee07 3a90 	vmov	s15, r3
}
 80012d4:	eeb0 0a67 	vmov.f32	s0, s15
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bdb0      	pop	{r4, r5, r7, pc}
 80012de:	bf00      	nop
 80012e0:	00000000 	.word	0x00000000
 80012e4:	40d38800 	.word	0x40d38800
 80012e8:	20000210 	.word	0x20000210
 80012ec:	20000211 	.word	0x20000211
 80012f0:	20000000 	.word	0x20000000

080012f4 <MCP3208_READ_8_DataSPI>:
/* Read using SPI 8 Bit Data size MSB first
 * Ex.
 * AA_bitread = MCP3208_READ_8_DataSPI(&hspi3, M8_CH0);
	VADC_cv =  MCP3208_ADCbit_to_Volt(AA_bitread); // 5 / 4096 * 0.00122
 * */
uint16_t MCP3208_READ_8_DataSPI(SPI_HandleTypeDef *hspi, MCP3208CHSelect M8_channel){
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b086      	sub	sp, #24
 80012f8:	af02      	add	r7, sp, #8
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	460b      	mov	r3, r1
 80012fe:	70fb      	strb	r3, [r7, #3]

	//// Shitty bitshift to the correct position Fig 6-1, MCP3208, MICROCHIP
	uint8_t D8_MOSI[3];
	uint8_t D8_MISO[3];
	D8_MOSI[0] = M8_channel >> 2;
 8001300:	78fb      	ldrb	r3, [r7, #3]
 8001302:	089b      	lsrs	r3, r3, #2
 8001304:	b2db      	uxtb	r3, r3
 8001306:	733b      	strb	r3, [r7, #12]
	D8_MOSI[1] = M8_channel << 6;
 8001308:	78fb      	ldrb	r3, [r7, #3]
 800130a:	019b      	lsls	r3, r3, #6
 800130c:	b2db      	uxtb	r3, r3
 800130e:	737b      	strb	r3, [r7, #13]


	HAL_GPIO_WritePin(MCP3208_SPI_CS_Port,MCP3208_SPI_CS_Pin , GPIO_PIN_RESET);
 8001310:	2200      	movs	r2, #0
 8001312:	2104      	movs	r1, #4
 8001314:	4810      	ldr	r0, [pc, #64]	; (8001358 <MCP3208_READ_8_DataSPI+0x64>)
 8001316:	f002 ff03 	bl	8004120 <HAL_GPIO_WritePin>

	HAL_SPI_TransmitReceive(hspi, &D8_MOSI[0], &D8_MISO[0], 3, 100);
 800131a:	f107 0208 	add.w	r2, r7, #8
 800131e:	f107 010c 	add.w	r1, r7, #12
 8001322:	2364      	movs	r3, #100	; 0x64
 8001324:	9300      	str	r3, [sp, #0]
 8001326:	2303      	movs	r3, #3
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f006 f900 	bl	800752e <HAL_SPI_TransmitReceive>

	//HAL_SPI_Abort(hspi);
	HAL_GPIO_WritePin(MCP3208_SPI_CS_Port,MCP3208_SPI_CS_Pin , GPIO_PIN_SET);
 800132e:	2201      	movs	r2, #1
 8001330:	2104      	movs	r1, #4
 8001332:	4809      	ldr	r0, [pc, #36]	; (8001358 <MCP3208_READ_8_DataSPI+0x64>)
 8001334:	f002 fef4 	bl	8004120 <HAL_GPIO_WritePin>

	return ((D8_MISO[1] << 8) + D8_MISO[2]) & 0x0FFF;
 8001338:	7a7b      	ldrb	r3, [r7, #9]
 800133a:	b29b      	uxth	r3, r3
 800133c:	021b      	lsls	r3, r3, #8
 800133e:	b29a      	uxth	r2, r3
 8001340:	7abb      	ldrb	r3, [r7, #10]
 8001342:	b29b      	uxth	r3, r3
 8001344:	4413      	add	r3, r2
 8001346:	b29b      	uxth	r3, r3
 8001348:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800134c:	b29b      	uxth	r3, r3
}
 800134e:	4618      	mov	r0, r3
 8001350:	3710      	adds	r7, #16
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	40020c00 	.word	0x40020c00
 800135c:	00000000 	.word	0x00000000

08001360 <MCP320x_ADCbit_to_Volt>:


float MCP320x_ADCbit_to_Volt(uint16_t adcbit){
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	4603      	mov	r3, r0
 8001368:	80fb      	strh	r3, [r7, #6]
	return adcbit * 0.00122; // 5/4096
 800136a:	88fb      	ldrh	r3, [r7, #6]
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff f8e1 	bl	8000534 <__aeabi_i2d>
 8001372:	a309      	add	r3, pc, #36	; (adr r3, 8001398 <MCP320x_ADCbit_to_Volt+0x38>)
 8001374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001378:	f7ff f946 	bl	8000608 <__aeabi_dmul>
 800137c:	4602      	mov	r2, r0
 800137e:	460b      	mov	r3, r1
 8001380:	4610      	mov	r0, r2
 8001382:	4619      	mov	r1, r3
 8001384:	f7ff fc38 	bl	8000bf8 <__aeabi_d2f>
 8001388:	4603      	mov	r3, r0
 800138a:	ee07 3a90 	vmov	s15, r3
}
 800138e:	eeb0 0a67 	vmov.f32	s0, s15
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	0678c005 	.word	0x0678c005
 800139c:	3f53fd0d 	.word	0x3f53fd0d

080013a0 <Rx_Verita_engine>:

#include "Verita_PTC.h"

static enum {init, unpack, decode}verita_engine;

VRTPTC_StatusTypedef Rx_Verita_engine(uint8_t *Rxbffr, uint32_t *regisk){
 80013a0:	b490      	push	{r4, r7}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	6039      	str	r1, [r7, #0]
	 * @param Rxbffr - input uart buffer
	 * @param regisk - register need the result be stored
	 */
	static uint8_t logger[12] = {0}; /// log Rxbffr without head packet
	static uint8_t index = 0; // use in case the start of verita is not at Rxbffr[0]
	uint8_t chksum[2]  = {0};
 80013aa:	2300      	movs	r3, #0
 80013ac:	81bb      	strh	r3, [r7, #12]
		uint8_t  U8[4];
		uint32_t U32;
	}logu;


	switch (verita_engine){
 80013ae:	4b6f      	ldr	r3, [pc, #444]	; (800156c <Rx_Verita_engine+0x1cc>)
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	2b01      	cmp	r3, #1
 80013b4:	d023      	beq.n	80013fe <Rx_Verita_engine+0x5e>
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	f000 8082 	beq.w	80014c0 <Rx_Verita_engine+0x120>
	default:
	case init:

		if(Rxbffr[0 + index] == 0x56){ //flag_vrt_en ||
 80013bc:	4b6c      	ldr	r3, [pc, #432]	; (8001570 <Rx_Verita_engine+0x1d0>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	461a      	mov	r2, r3
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4413      	add	r3, r2
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	2b56      	cmp	r3, #86	; 0x56
 80013ca:	d103      	bne.n	80013d4 <Rx_Verita_engine+0x34>
			verita_engine = unpack;
 80013cc:	4b67      	ldr	r3, [pc, #412]	; (800156c <Rx_Verita_engine+0x1cc>)
 80013ce:	2201      	movs	r2, #1
 80013d0:	701a      	strb	r2, [r3, #0]
		}else{
		//// go to next index if head not found
		index+=9;
		index %= RxbufferSize_VRT; // overflow
		}
		break; //// init
 80013d2:	e0c4      	b.n	800155e <Rx_Verita_engine+0x1be>
		index+=9;
 80013d4:	4b66      	ldr	r3, [pc, #408]	; (8001570 <Rx_Verita_engine+0x1d0>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	3309      	adds	r3, #9
 80013da:	b2da      	uxtb	r2, r3
 80013dc:	4b64      	ldr	r3, [pc, #400]	; (8001570 <Rx_Verita_engine+0x1d0>)
 80013de:	701a      	strb	r2, [r3, #0]
		index %= RxbufferSize_VRT; // overflow
 80013e0:	4b63      	ldr	r3, [pc, #396]	; (8001570 <Rx_Verita_engine+0x1d0>)
 80013e2:	781a      	ldrb	r2, [r3, #0]
 80013e4:	4b63      	ldr	r3, [pc, #396]	; (8001574 <Rx_Verita_engine+0x1d4>)
 80013e6:	fba3 1302 	umull	r1, r3, r3, r2
 80013ea:	08d9      	lsrs	r1, r3, #3
 80013ec:	460b      	mov	r3, r1
 80013ee:	00db      	lsls	r3, r3, #3
 80013f0:	440b      	add	r3, r1
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	b2da      	uxtb	r2, r3
 80013f8:	4b5d      	ldr	r3, [pc, #372]	; (8001570 <Rx_Verita_engine+0x1d0>)
 80013fa:	701a      	strb	r2, [r3, #0]
		break; //// init
 80013fc:	e0af      	b.n	800155e <Rx_Verita_engine+0x1be>


	case unpack:

		//// [] Header Check ------------------------------------------------------------------
		if(Rxbffr[index + 0] == 0x56 && Rxbffr[index + 1] == 0x52 && Rxbffr[index + 2] == 0x54){
 80013fe:	4b5c      	ldr	r3, [pc, #368]	; (8001570 <Rx_Verita_engine+0x1d0>)
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	461a      	mov	r2, r3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	4413      	add	r3, r2
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	2b56      	cmp	r3, #86	; 0x56
 800140c:	d13f      	bne.n	800148e <Rx_Verita_engine+0xee>
 800140e:	4b58      	ldr	r3, [pc, #352]	; (8001570 <Rx_Verita_engine+0x1d0>)
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	3301      	adds	r3, #1
 8001414:	687a      	ldr	r2, [r7, #4]
 8001416:	4413      	add	r3, r2
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	2b52      	cmp	r3, #82	; 0x52
 800141c:	d137      	bne.n	800148e <Rx_Verita_engine+0xee>
 800141e:	4b54      	ldr	r3, [pc, #336]	; (8001570 <Rx_Verita_engine+0x1d0>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	3302      	adds	r3, #2
 8001424:	687a      	ldr	r2, [r7, #4]
 8001426:	4413      	add	r3, r2
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	2b54      	cmp	r3, #84	; 0x54
 800142c:	d12f      	bne.n	800148e <Rx_Verita_engine+0xee>

			//// log data first / prevent overwrite
			for(register int k = 0; k < 7; k++){
 800142e:	2400      	movs	r4, #0
 8001430:	e009      	b.n	8001446 <Rx_Verita_engine+0xa6>
				logger[k] = Rxbffr[index + k + 3];
 8001432:	4b4f      	ldr	r3, [pc, #316]	; (8001570 <Rx_Verita_engine+0x1d0>)
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	4423      	add	r3, r4
 8001438:	3303      	adds	r3, #3
 800143a:	687a      	ldr	r2, [r7, #4]
 800143c:	4413      	add	r3, r2
 800143e:	781a      	ldrb	r2, [r3, #0]
 8001440:	4b4d      	ldr	r3, [pc, #308]	; (8001578 <Rx_Verita_engine+0x1d8>)
 8001442:	551a      	strb	r2, [r3, r4]
			for(register int k = 0; k < 7; k++){
 8001444:	3401      	adds	r4, #1
 8001446:	2c06      	cmp	r4, #6
 8001448:	ddf3      	ble.n	8001432 <Rx_Verita_engine+0x92>
			}

			//// checksum here
			for(register int i = 0;i < 5; i++){
 800144a:	2400      	movs	r4, #0
 800144c:	e006      	b.n	800145c <Rx_Verita_engine+0xbc>
				chksum[0] += logger[i];
 800144e:	7b3a      	ldrb	r2, [r7, #12]
 8001450:	4b49      	ldr	r3, [pc, #292]	; (8001578 <Rx_Verita_engine+0x1d8>)
 8001452:	5d1b      	ldrb	r3, [r3, r4]
 8001454:	4413      	add	r3, r2
 8001456:	b2db      	uxtb	r3, r3
 8001458:	733b      	strb	r3, [r7, #12]
			for(register int i = 0;i < 5; i++){
 800145a:	3401      	adds	r4, #1
 800145c:	2c04      	cmp	r4, #4
 800145e:	ddf6      	ble.n	800144e <Rx_Verita_engine+0xae>
			}
			chksum[1] = ~chksum[0];
 8001460:	7b3b      	ldrb	r3, [r7, #12]
 8001462:	43db      	mvns	r3, r3
 8001464:	b2db      	uxtb	r3, r3
 8001466:	737b      	strb	r3, [r7, #13]
			if( chksum[1] == logger[5]){
 8001468:	7b7a      	ldrb	r2, [r7, #13]
 800146a:	4b43      	ldr	r3, [pc, #268]	; (8001578 <Rx_Verita_engine+0x1d8>)
 800146c:	795b      	ldrb	r3, [r3, #5]
 800146e:	429a      	cmp	r2, r3
 8001470:	d10b      	bne.n	800148a <Rx_Verita_engine+0xea>
				// pass
				//// mark that this data is already read
				Rxbffr[0 + index] = 0xFF;
 8001472:	4b3f      	ldr	r3, [pc, #252]	; (8001570 <Rx_Verita_engine+0x1d0>)
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	461a      	mov	r2, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	4413      	add	r3, r2
 800147c:	22ff      	movs	r2, #255	; 0xff
 800147e:	701a      	strb	r2, [r3, #0]
				verita_engine = decode;
 8001480:	4b3a      	ldr	r3, [pc, #232]	; (800156c <Rx_Verita_engine+0x1cc>)
 8001482:	2202      	movs	r2, #2
 8001484:	701a      	strb	r2, [r3, #0]
			if( chksum[1] == logger[5]){
 8001486:	bf00      	nop
//				Rxbffr[i] = 0x00;
//			}
			return VRT_UnEnc;

		}
		break; //// unpack
 8001488:	e069      	b.n	800155e <Rx_Verita_engine+0x1be>
				return VRT_DataLoss;}
 800148a:	2395      	movs	r3, #149	; 0x95
 800148c:	e068      	b.n	8001560 <Rx_Verita_engine+0x1c0>
			verita_engine = init;
 800148e:	4b37      	ldr	r3, [pc, #220]	; (800156c <Rx_Verita_engine+0x1cc>)
 8001490:	2200      	movs	r2, #0
 8001492:	701a      	strb	r2, [r3, #0]
			index+=9;
 8001494:	4b36      	ldr	r3, [pc, #216]	; (8001570 <Rx_Verita_engine+0x1d0>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	3309      	adds	r3, #9
 800149a:	b2da      	uxtb	r2, r3
 800149c:	4b34      	ldr	r3, [pc, #208]	; (8001570 <Rx_Verita_engine+0x1d0>)
 800149e:	701a      	strb	r2, [r3, #0]
			index %= RxbufferSize_VRT; // overflow
 80014a0:	4b33      	ldr	r3, [pc, #204]	; (8001570 <Rx_Verita_engine+0x1d0>)
 80014a2:	781a      	ldrb	r2, [r3, #0]
 80014a4:	4b33      	ldr	r3, [pc, #204]	; (8001574 <Rx_Verita_engine+0x1d4>)
 80014a6:	fba3 1302 	umull	r1, r3, r3, r2
 80014aa:	08d9      	lsrs	r1, r3, #3
 80014ac:	460b      	mov	r3, r1
 80014ae:	00db      	lsls	r3, r3, #3
 80014b0:	440b      	add	r3, r1
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	b2da      	uxtb	r2, r3
 80014b8:	4b2d      	ldr	r3, [pc, #180]	; (8001570 <Rx_Verita_engine+0x1d0>)
 80014ba:	701a      	strb	r2, [r3, #0]
			return VRT_UnEnc;
 80014bc:	2396      	movs	r3, #150	; 0x96
 80014be:	e04f      	b.n	8001560 <Rx_Verita_engine+0x1c0>

	case decode:
		verita_engine = init;
 80014c0:	4b2a      	ldr	r3, [pc, #168]	; (800156c <Rx_Verita_engine+0x1cc>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	701a      	strb	r2, [r3, #0]
		index += Framesize_VRT;
 80014c6:	4b2a      	ldr	r3, [pc, #168]	; (8001570 <Rx_Verita_engine+0x1d0>)
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	3309      	adds	r3, #9
 80014cc:	b2da      	uxtb	r2, r3
 80014ce:	4b28      	ldr	r3, [pc, #160]	; (8001570 <Rx_Verita_engine+0x1d0>)
 80014d0:	701a      	strb	r2, [r3, #0]
		index %= RxbufferSize_VRT; // overflow
 80014d2:	4b27      	ldr	r3, [pc, #156]	; (8001570 <Rx_Verita_engine+0x1d0>)
 80014d4:	781a      	ldrb	r2, [r3, #0]
 80014d6:	4b27      	ldr	r3, [pc, #156]	; (8001574 <Rx_Verita_engine+0x1d4>)
 80014d8:	fba3 1302 	umull	r1, r3, r3, r2
 80014dc:	08d9      	lsrs	r1, r3, #3
 80014de:	460b      	mov	r3, r1
 80014e0:	00db      	lsls	r3, r3, #3
 80014e2:	440b      	add	r3, r1
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	1ad3      	subs	r3, r2, r3
 80014e8:	b2da      	uxtb	r2, r3
 80014ea:	4b21      	ldr	r3, [pc, #132]	; (8001570 <Rx_Verita_engine+0x1d0>)
 80014ec:	701a      	strb	r2, [r3, #0]

		//// DATA phase, insert 32bit data into register box =================================
		if(logger[0] <= 0x20){
 80014ee:	4b22      	ldr	r3, [pc, #136]	; (8001578 <Rx_Verita_engine+0x1d8>)
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	2b20      	cmp	r3, #32
 80014f4:	d814      	bhi.n	8001520 <Rx_Verita_engine+0x180>
			logu.U8[2] = logger[2];
			logu.U8[1] = logger[3];
			logu.U8[0] = logger[4];
#else
			//// Little endian
			logu.U8[0] = logger[1];
 80014f6:	4b20      	ldr	r3, [pc, #128]	; (8001578 <Rx_Verita_engine+0x1d8>)
 80014f8:	785b      	ldrb	r3, [r3, #1]
 80014fa:	723b      	strb	r3, [r7, #8]
			logu.U8[1] = logger[2];
 80014fc:	4b1e      	ldr	r3, [pc, #120]	; (8001578 <Rx_Verita_engine+0x1d8>)
 80014fe:	789b      	ldrb	r3, [r3, #2]
 8001500:	727b      	strb	r3, [r7, #9]
			logu.U8[2] = logger[3];
 8001502:	4b1d      	ldr	r3, [pc, #116]	; (8001578 <Rx_Verita_engine+0x1d8>)
 8001504:	78db      	ldrb	r3, [r3, #3]
 8001506:	72bb      	strb	r3, [r7, #10]
			logu.U8[3] = logger[4];
 8001508:	4b1b      	ldr	r3, [pc, #108]	; (8001578 <Rx_Verita_engine+0x1d8>)
 800150a:	791b      	ldrb	r3, [r3, #4]
 800150c:	72fb      	strb	r3, [r7, #11]
#endif
			// place data into the request register
			regisk[logger[0]] = logu.U32;
 800150e:	4b1a      	ldr	r3, [pc, #104]	; (8001578 <Rx_Verita_engine+0x1d8>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	683a      	ldr	r2, [r7, #0]
 8001516:	4413      	add	r3, r2
 8001518:	68ba      	ldr	r2, [r7, #8]
 800151a:	601a      	str	r2, [r3, #0]


			return VRT_OK;
 800151c:	2391      	movs	r3, #145	; 0x91
 800151e:	e01f      	b.n	8001560 <Rx_Verita_engine+0x1c0>
		} //// -------------------------------------------------------------------------------

		//// CMD phase, return recieved Command =========================================
		if(logger[0] >= 0x90){
 8001520:	4b15      	ldr	r3, [pc, #84]	; (8001578 <Rx_Verita_engine+0x1d8>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	2b8f      	cmp	r3, #143	; 0x8f
 8001526:	d919      	bls.n	800155c <Rx_Verita_engine+0x1bc>
			switch(logger[0]){
 8001528:	4b13      	ldr	r3, [pc, #76]	; (8001578 <Rx_Verita_engine+0x1d8>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	3b91      	subs	r3, #145	; 0x91
 800152e:	2b03      	cmp	r3, #3
 8001530:	d80a      	bhi.n	8001548 <Rx_Verita_engine+0x1a8>
 8001532:	a201      	add	r2, pc, #4	; (adr r2, 8001538 <Rx_Verita_engine+0x198>)
 8001534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001538:	0800154d 	.word	0x0800154d
 800153c:	08001551 	.word	0x08001551
 8001540:	08001555 	.word	0x08001555
 8001544:	08001559 	.word	0x08001559
				default:
				case 0x90:
					return VRT_ERROR;
 8001548:	2390      	movs	r3, #144	; 0x90
 800154a:	e009      	b.n	8001560 <Rx_Verita_engine+0x1c0>
				case 0x91:
					return VRT_OK;
 800154c:	2391      	movs	r3, #145	; 0x91
 800154e:	e007      	b.n	8001560 <Rx_Verita_engine+0x1c0>
				case 0x92:
					return VRT_Busy;
 8001550:	2392      	movs	r3, #146	; 0x92
 8001552:	e005      	b.n	8001560 <Rx_Verita_engine+0x1c0>
				case 0x93:
					return VRT_Regain;
 8001554:	2393      	movs	r3, #147	; 0x93
 8001556:	e003      	b.n	8001560 <Rx_Verita_engine+0x1c0>
				case 0x94:
					return VRT_Next;
 8001558:	2394      	movs	r3, #148	; 0x94
 800155a:	e001      	b.n	8001560 <Rx_Verita_engine+0x1c0>
			}
		}

		//// -------------------------------------------------------------------------------

		break; // decode
 800155c:	bf00      	nop
	} // end switch
	return VRT_ERROR;
 800155e:	2390      	movs	r3, #144	; 0x90
}
 8001560:	4618      	mov	r0, r3
 8001562:	3710      	adds	r7, #16
 8001564:	46bd      	mov	sp, r7
 8001566:	bc90      	pop	{r4, r7}
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	20000216 	.word	0x20000216
 8001570:	20000217 	.word	0x20000217
 8001574:	38e38e39 	.word	0x38e38e39
 8001578:	20000218 	.word	0x20000218

0800157c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800157c:	b5b0      	push	{r4, r5, r7, lr}
 800157e:	b094      	sub	sp, #80	; 0x50
 8001580:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001582:	f001 fe91 	bl	80032a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001586:	f000 f98d 	bl	80018a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800158a:	f000 fb19 	bl	8001bc0 <MX_GPIO_Init>
  MX_DMA_Init();
 800158e:	f000 faf7 	bl	8001b80 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001592:	f000 faa1 	bl	8001ad8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001596:	f000 f9ed 	bl	8001974 <MX_I2C1_Init>
  MX_USART6_UART_Init();
 800159a:	f000 fac7 	bl	8001b2c <MX_USART6_UART_Init>
  MX_SPI3_Init();
 800159e:	f000 fa17 	bl	80019d0 <MX_SPI3_Init>
  MX_TIM10_Init();
 80015a2:	f000 fa4b 	bl	8001a3c <MX_TIM10_Init>
  MX_USART1_UART_Init();
 80015a6:	f000 fa6d 	bl	8001a84 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim10);
 80015aa:	48a4      	ldr	r0, [pc, #656]	; (800183c <main+0x2c0>)
 80015ac:	f006 fa7c 	bl	8007aa8 <HAL_TIM_Base_Start_IT>

  ili9341_Init();
 80015b0:	f001 f860 	bl	8002674 <ili9341_Init>
  ili9341_DisplayOn();
 80015b4:	f001 f842 	bl	800263c <ili9341_DisplayOn>

//  ILI9341_Init();
//  ILI9341_FillScreen(ILI9341_BLACK);

#ifdef INA219_Wrk
  INA219_INIT_Calibrate(&hi2c1, INA219_ADDR_1);
 80015b8:	2180      	movs	r1, #128	; 0x80
 80015ba:	48a1      	ldr	r0, [pc, #644]	; (8001840 <main+0x2c4>)
 80015bc:	f7ff fd18 	bl	8000ff0 <INA219_INIT_Calibrate>
//
//  INA219_INIT(&hi2c1, INA219_ADDR_1, cofgra);
//  INA219_Calibrate(&hi2c1, INA219_ADDR_1);
#endif

  char temp[]="----------------- F411_Verita_Master --------------------\r\n";
 80015c0:	4ba0      	ldr	r3, [pc, #640]	; (8001844 <main+0x2c8>)
 80015c2:	1d3c      	adds	r4, r7, #4
 80015c4:	461d      	mov	r5, r3
 80015c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015d2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80015d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 80015da:	1d3b      	adds	r3, r7, #4
 80015dc:	4618      	mov	r0, r3
 80015de:	f7fe fdff 	bl	80001e0 <strlen>
 80015e2:	4603      	mov	r3, r0
 80015e4:	b29a      	uxth	r2, r3
 80015e6:	1d39      	adds	r1, r7, #4
 80015e8:	230a      	movs	r3, #10
 80015ea:	4897      	ldr	r0, [pc, #604]	; (8001848 <main+0x2cc>)
 80015ec:	f006 fcff 	bl	8007fee <HAL_UART_Transmit>

  ili9341_FillRect(50, 20, 50, 20, cl_RED);
 80015f0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80015f4:	9300      	str	r3, [sp, #0]
 80015f6:	2314      	movs	r3, #20
 80015f8:	2232      	movs	r2, #50	; 0x32
 80015fa:	2114      	movs	r1, #20
 80015fc:	2032      	movs	r0, #50	; 0x32
 80015fe:	f001 f951 	bl	80028a4 <ili9341_FillRect>
  ili9341_FillRect(100, 20, 50, 20, cl_GREEN);
 8001602:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001606:	9300      	str	r3, [sp, #0]
 8001608:	2314      	movs	r3, #20
 800160a:	2232      	movs	r2, #50	; 0x32
 800160c:	2114      	movs	r1, #20
 800160e:	2064      	movs	r0, #100	; 0x64
 8001610:	f001 f948 	bl	80028a4 <ili9341_FillRect>
  ili9341_FillRect(150, 20, 50, 20, cl_BLUE);
 8001614:	231f      	movs	r3, #31
 8001616:	9300      	str	r3, [sp, #0]
 8001618:	2314      	movs	r3, #20
 800161a:	2232      	movs	r2, #50	; 0x32
 800161c:	2114      	movs	r1, #20
 800161e:	2096      	movs	r0, #150	; 0x96
 8001620:	f001 f940 	bl	80028a4 <ili9341_FillRect>

////  ------------- UART Recieve --------------------------
  HAL_UART_Receive_DMA(&huart6, &RxBufferMtCl[0], RxbufferSize_VRT);
 8001624:	2224      	movs	r2, #36	; 0x24
 8001626:	4989      	ldr	r1, [pc, #548]	; (800184c <main+0x2d0>)
 8001628:	4889      	ldr	r0, [pc, #548]	; (8001850 <main+0x2d4>)
 800162a:	f006 fd72 	bl	8008112 <HAL_UART_Receive_DMA>

  //// for storage test only
  for(register int i = 0; i < 3000 ;i++){
 800162e:	2400      	movs	r4, #0
 8001630:	e006      	b.n	8001640 <main+0xc4>
	  flashboot[i] = F411_Verita_Client[i];
 8001632:	4b88      	ldr	r3, [pc, #544]	; (8001854 <main+0x2d8>)
 8001634:	5d1b      	ldrb	r3, [r3, r4]
 8001636:	461a      	mov	r2, r3
 8001638:	4b87      	ldr	r3, [pc, #540]	; (8001858 <main+0x2dc>)
 800163a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  for(register int i = 0; i < 3000 ;i++){
 800163e:	3401      	adds	r4, #1
 8001640:	f640 33b7 	movw	r3, #2999	; 0xbb7
 8001644:	429c      	cmp	r4, r3
 8001646:	ddf4      	ble.n	8001632 <main+0xb6>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //// -------- buzzer & Button -----------------
	  Button_machine();
 8001648:	f000 fbea 	bl	8001e20 <Button_machine>

	  if (HAL_GetTick() >= timestamp_buzbtn){
 800164c:	f001 fe92 	bl	8003374 <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	4b82      	ldr	r3, [pc, #520]	; (800185c <main+0x2e0>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	429a      	cmp	r2, r3
 8001658:	d306      	bcc.n	8001668 <main+0xec>
		timestamp_buzbtn += 10;
 800165a:	4b80      	ldr	r3, [pc, #512]	; (800185c <main+0x2e0>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	330a      	adds	r3, #10
 8001660:	4a7e      	ldr	r2, [pc, #504]	; (800185c <main+0x2e0>)
 8001662:	6013      	str	r3, [r2, #0]

		running_box();
 8001664:	f000 fb96 	bl	8001d94 <running_box>
	  }// timestamp_dis
	  ////  ------------- Verita UART Recieve --------------------------

	  //HAL_UART_Receive_DMA(&huart6, &RxBufferMtCl[0], 9); // Normal DMA
	  //engst = Rx_Verita_engine(RxBufferMtCl, verita_regis);
	  Rx_Verita_engine(RxBufferMtCl, VRB.U32);
 8001668:	497d      	ldr	r1, [pc, #500]	; (8001860 <main+0x2e4>)
 800166a:	4878      	ldr	r0, [pc, #480]	; (800184c <main+0x2d0>)
 800166c:	f7ff fe98 	bl	80013a0 <Rx_Verita_engine>
	  //// ----------------------------------------------------

	  if (HAL_GetTick() >= timestamp_one){
 8001670:	f001 fe80 	bl	8003374 <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	4b7b      	ldr	r3, [pc, #492]	; (8001864 <main+0x2e8>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	429a      	cmp	r2, r3
 800167c:	d3e4      	bcc.n	8001648 <main+0xcc>
		  timestamp_one += 1000;
 800167e:	4b79      	ldr	r3, [pc, #484]	; (8001864 <main+0x2e8>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001686:	4a77      	ldr	r2, [pc, #476]	; (8001864 <main+0x2e8>)
 8001688:	6013      	str	r3, [r2, #0]
		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800168a:	2120      	movs	r1, #32
 800168c:	4876      	ldr	r0, [pc, #472]	; (8001868 <main+0x2ec>)
 800168e:	f002 fd60 	bl	8004152 <HAL_GPIO_TogglePin>
#ifdef INA219_Wrk

		  //INATT.U16[1] = INA219Read_cx(&hi2c1, INA219_ADDR_1, INA219_RG_Config);
		  //INATT.U16[2] = INA219Read_cx(&hi2c1, INA219_ADDR_1, INA219_RG_Current);

		  inata.Bus_V   = INA219Read_BusV(&hi2c1, INA219_ADDR_1);
 8001692:	2180      	movs	r1, #128	; 0x80
 8001694:	486a      	ldr	r0, [pc, #424]	; (8001840 <main+0x2c4>)
 8001696:	f7ff fd5b 	bl	8001150 <INA219Read_BusV>
 800169a:	4603      	mov	r3, r0
 800169c:	461a      	mov	r2, r3
 800169e:	4b73      	ldr	r3, [pc, #460]	; (800186c <main+0x2f0>)
 80016a0:	821a      	strh	r2, [r3, #16]
		  inata.CURRENT = INA219Read_Current(&hi2c1, INA219_ADDR_1);
 80016a2:	2180      	movs	r1, #128	; 0x80
 80016a4:	4866      	ldr	r0, [pc, #408]	; (8001840 <main+0x2c4>)
 80016a6:	f7ff fd7b 	bl	80011a0 <INA219Read_Current>
 80016aa:	4603      	mov	r3, r0
 80016ac:	b21a      	sxth	r2, r3
 80016ae:	4b6f      	ldr	r3, [pc, #444]	; (800186c <main+0x2f0>)
 80016b0:	811a      	strh	r2, [r3, #8]
		  inata.POWER   = INA219Read_Power(&hi2c1, INA219_ADDR_1);
 80016b2:	2180      	movs	r1, #128	; 0x80
 80016b4:	4862      	ldr	r0, [pc, #392]	; (8001840 <main+0x2c4>)
 80016b6:	f7ff fdd3 	bl	8001260 <INA219Read_Power>
 80016ba:	eef0 7a40 	vmov.f32	s15, s0
 80016be:	4b6b      	ldr	r3, [pc, #428]	; (800186c <main+0x2f0>)
 80016c0:	edc3 7a03 	vstr	s15, [r3, #12]
		  inata.SHUNT_V = INA219Read_ShuntV(&hi2c1, INA219_ADDR_1);
 80016c4:	2180      	movs	r1, #128	; 0x80
 80016c6:	485e      	ldr	r0, [pc, #376]	; (8001840 <main+0x2c4>)
 80016c8:	f7ff fd8e 	bl	80011e8 <INA219Read_ShuntV>
 80016cc:	eef0 7a40 	vmov.f32	s15, s0
 80016d0:	4b66      	ldr	r3, [pc, #408]	; (800186c <main+0x2f0>)
 80016d2:	edc3 7a01 	vstr	s15, [r3, #4]

		  inata.Calibra =  INA219Read_cx(&hi2c1, INA219_ADDR_1, INA219_RG_Calibra);
 80016d6:	2205      	movs	r2, #5
 80016d8:	2180      	movs	r1, #128	; 0x80
 80016da:	4859      	ldr	r0, [pc, #356]	; (8001840 <main+0x2c4>)
 80016dc:	f7ff fc5e 	bl	8000f9c <INA219Read_cx>
 80016e0:	4603      	mov	r3, r0
 80016e2:	461a      	mov	r2, r3
 80016e4:	4b61      	ldr	r3, [pc, #388]	; (800186c <main+0x2f0>)
 80016e6:	825a      	strh	r2, [r3, #18]
		  inata.Config = INA219Read_cx(&hi2c1, INA219_ADDR_1, INA219_RG_Config);
 80016e8:	2200      	movs	r2, #0
 80016ea:	2180      	movs	r1, #128	; 0x80
 80016ec:	4854      	ldr	r0, [pc, #336]	; (8001840 <main+0x2c4>)
 80016ee:	f7ff fc55 	bl	8000f9c <INA219Read_cx>
 80016f2:	4603      	mov	r3, r0
 80016f4:	461a      	mov	r2, r3
 80016f6:	4b5d      	ldr	r3, [pc, #372]	; (800186c <main+0x2f0>)
 80016f8:	801a      	strh	r2, [r3, #0]

		  sprintf(TextDispBuffer,"calibrator:%4X", inata.Calibra);
 80016fa:	4b5c      	ldr	r3, [pc, #368]	; (800186c <main+0x2f0>)
 80016fc:	8a5b      	ldrh	r3, [r3, #18]
 80016fe:	461a      	mov	r2, r3
 8001700:	495b      	ldr	r1, [pc, #364]	; (8001870 <main+0x2f4>)
 8001702:	485c      	ldr	r0, [pc, #368]	; (8001874 <main+0x2f8>)
 8001704:	f008 fac4 	bl	8009c90 <siprintf>
		  ili9341_WriteString(20, 50, TextDispBuffer, Font12, cl_GREENYELLOW, cl_BLACK);
 8001708:	4b5b      	ldr	r3, [pc, #364]	; (8001878 <main+0x2fc>)
 800170a:	2200      	movs	r2, #0
 800170c:	9202      	str	r2, [sp, #8]
 800170e:	f64a 72e5 	movw	r2, #45029	; 0xafe5
 8001712:	9201      	str	r2, [sp, #4]
 8001714:	685a      	ldr	r2, [r3, #4]
 8001716:	9200      	str	r2, [sp, #0]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a56      	ldr	r2, [pc, #344]	; (8001874 <main+0x2f8>)
 800171c:	2132      	movs	r1, #50	; 0x32
 800171e:	2014      	movs	r0, #20
 8001720:	f001 f9bd 	bl	8002a9e <ili9341_WriteString>

		  sprintf(TextDispBuffer,"V mV: %d    ", inata.Bus_V);
 8001724:	4b51      	ldr	r3, [pc, #324]	; (800186c <main+0x2f0>)
 8001726:	8a1b      	ldrh	r3, [r3, #16]
 8001728:	461a      	mov	r2, r3
 800172a:	4954      	ldr	r1, [pc, #336]	; (800187c <main+0x300>)
 800172c:	4851      	ldr	r0, [pc, #324]	; (8001874 <main+0x2f8>)
 800172e:	f008 faaf 	bl	8009c90 <siprintf>
		  ili9341_WriteString(20, 70, TextDispBuffer, Font16, cl_CYAN, cl_BLACK);
 8001732:	4b53      	ldr	r3, [pc, #332]	; (8001880 <main+0x304>)
 8001734:	2200      	movs	r2, #0
 8001736:	9202      	str	r2, [sp, #8]
 8001738:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800173c:	9201      	str	r2, [sp, #4]
 800173e:	685a      	ldr	r2, [r3, #4]
 8001740:	9200      	str	r2, [sp, #0]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a4b      	ldr	r2, [pc, #300]	; (8001874 <main+0x2f8>)
 8001746:	2146      	movs	r1, #70	; 0x46
 8001748:	2014      	movs	r0, #20
 800174a:	f001 f9a8 	bl	8002a9e <ili9341_WriteString>

		  sprintf(TextDispBuffer,"I mA: %d    ", inata.CURRENT);
 800174e:	4b47      	ldr	r3, [pc, #284]	; (800186c <main+0x2f0>)
 8001750:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001754:	461a      	mov	r2, r3
 8001756:	494b      	ldr	r1, [pc, #300]	; (8001884 <main+0x308>)
 8001758:	4846      	ldr	r0, [pc, #280]	; (8001874 <main+0x2f8>)
 800175a:	f008 fa99 	bl	8009c90 <siprintf>
		  ili9341_WriteString(20, 95, TextDispBuffer, Font16, cl_CYAN, cl_BLACK);
 800175e:	4b48      	ldr	r3, [pc, #288]	; (8001880 <main+0x304>)
 8001760:	2200      	movs	r2, #0
 8001762:	9202      	str	r2, [sp, #8]
 8001764:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001768:	9201      	str	r2, [sp, #4]
 800176a:	685a      	ldr	r2, [r3, #4]
 800176c:	9200      	str	r2, [sp, #0]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a40      	ldr	r2, [pc, #256]	; (8001874 <main+0x2f8>)
 8001772:	215f      	movs	r1, #95	; 0x5f
 8001774:	2014      	movs	r0, #20
 8001776:	f001 f992 	bl	8002a9e <ili9341_WriteString>

		  sprintf(TextDispBuffer,"P mW: %.2f  ", inata.POWER);
 800177a:	4b3c      	ldr	r3, [pc, #240]	; (800186c <main+0x2f0>)
 800177c:	68db      	ldr	r3, [r3, #12]
 800177e:	4618      	mov	r0, r3
 8001780:	f7fe feea 	bl	8000558 <__aeabi_f2d>
 8001784:	4602      	mov	r2, r0
 8001786:	460b      	mov	r3, r1
 8001788:	493f      	ldr	r1, [pc, #252]	; (8001888 <main+0x30c>)
 800178a:	483a      	ldr	r0, [pc, #232]	; (8001874 <main+0x2f8>)
 800178c:	f008 fa80 	bl	8009c90 <siprintf>
		  ili9341_WriteString(20, 120, TextDispBuffer, Font16, cl_CYAN, cl_BLACK);
 8001790:	4b3b      	ldr	r3, [pc, #236]	; (8001880 <main+0x304>)
 8001792:	2200      	movs	r2, #0
 8001794:	9202      	str	r2, [sp, #8]
 8001796:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800179a:	9201      	str	r2, [sp, #4]
 800179c:	685a      	ldr	r2, [r3, #4]
 800179e:	9200      	str	r2, [sp, #0]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a34      	ldr	r2, [pc, #208]	; (8001874 <main+0x2f8>)
 80017a4:	2178      	movs	r1, #120	; 0x78
 80017a6:	2014      	movs	r0, #20
 80017a8:	f001 f979 	bl	8002a9e <ili9341_WriteString>
#endif

		  mcp_read.raw[0] = MCP3208_READ_8_DataSPI(&hspi3, M8_CH0);
 80017ac:	2118      	movs	r1, #24
 80017ae:	4837      	ldr	r0, [pc, #220]	; (800188c <main+0x310>)
 80017b0:	f7ff fda0 	bl	80012f4 <MCP3208_READ_8_DataSPI>
 80017b4:	4603      	mov	r3, r0
 80017b6:	461a      	mov	r2, r3
 80017b8:	4b35      	ldr	r3, [pc, #212]	; (8001890 <main+0x314>)
 80017ba:	801a      	strh	r2, [r3, #0]
		  mcp_read.cv[0] = MCP320x_ADCbit_to_Volt(mcp_read.raw[0]);
 80017bc:	4b34      	ldr	r3, [pc, #208]	; (8001890 <main+0x314>)
 80017be:	881b      	ldrh	r3, [r3, #0]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7ff fdcd 	bl	8001360 <MCP320x_ADCbit_to_Volt>
 80017c6:	eef0 7a40 	vmov.f32	s15, s0
 80017ca:	4b31      	ldr	r3, [pc, #196]	; (8001890 <main+0x314>)
 80017cc:	edc3 7a02 	vstr	s15, [r3, #8]
		  sprintf(TextDispBuffer,"MCP : %.2f  ", mcp_read.cv[0]);
 80017d0:	4b2f      	ldr	r3, [pc, #188]	; (8001890 <main+0x314>)
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7fe febf 	bl	8000558 <__aeabi_f2d>
 80017da:	4602      	mov	r2, r0
 80017dc:	460b      	mov	r3, r1
 80017de:	492d      	ldr	r1, [pc, #180]	; (8001894 <main+0x318>)
 80017e0:	4824      	ldr	r0, [pc, #144]	; (8001874 <main+0x2f8>)
 80017e2:	f008 fa55 	bl	8009c90 <siprintf>
		  ili9341_WriteString(20, 145, TextDispBuffer, Font16, cl_CYAN, cl_BLACK);
 80017e6:	4b26      	ldr	r3, [pc, #152]	; (8001880 <main+0x304>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	9202      	str	r2, [sp, #8]
 80017ec:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80017f0:	9201      	str	r2, [sp, #4]
 80017f2:	685a      	ldr	r2, [r3, #4]
 80017f4:	9200      	str	r2, [sp, #0]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a1e      	ldr	r2, [pc, #120]	; (8001874 <main+0x2f8>)
 80017fa:	2191      	movs	r1, #145	; 0x91
 80017fc:	2014      	movs	r0, #20
 80017fe:	f001 f94e 	bl	8002a9e <ili9341_WriteString>

		  sprintf(TextDispBuffer,"btn %X %X %d",btn_read[1], btn_read[2], btn_cnt);
 8001802:	4b25      	ldr	r3, [pc, #148]	; (8001898 <main+0x31c>)
 8001804:	785b      	ldrb	r3, [r3, #1]
 8001806:	461a      	mov	r2, r3
 8001808:	4b23      	ldr	r3, [pc, #140]	; (8001898 <main+0x31c>)
 800180a:	789b      	ldrb	r3, [r3, #2]
 800180c:	4619      	mov	r1, r3
 800180e:	4b23      	ldr	r3, [pc, #140]	; (800189c <main+0x320>)
 8001810:	881b      	ldrh	r3, [r3, #0]
 8001812:	9300      	str	r3, [sp, #0]
 8001814:	460b      	mov	r3, r1
 8001816:	4922      	ldr	r1, [pc, #136]	; (80018a0 <main+0x324>)
 8001818:	4816      	ldr	r0, [pc, #88]	; (8001874 <main+0x2f8>)
 800181a:	f008 fa39 	bl	8009c90 <siprintf>
		  ili9341_WriteString(170, 50, TextDispBuffer, Font16, cl_YELLOW, cl_BLACK);
 800181e:	4b18      	ldr	r3, [pc, #96]	; (8001880 <main+0x304>)
 8001820:	2200      	movs	r2, #0
 8001822:	9202      	str	r2, [sp, #8]
 8001824:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001828:	9201      	str	r2, [sp, #4]
 800182a:	685a      	ldr	r2, [r3, #4]
 800182c:	9200      	str	r2, [sp, #0]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a10      	ldr	r2, [pc, #64]	; (8001874 <main+0x2f8>)
 8001832:	2132      	movs	r1, #50	; 0x32
 8001834:	20aa      	movs	r0, #170	; 0xaa
 8001836:	f001 f932 	bl	8002a9e <ili9341_WriteString>
	  Button_machine();
 800183a:	e705      	b.n	8001648 <main+0xcc>
 800183c:	200002d0 	.word	0x200002d0
 8001840:	20000224 	.word	0x20000224
 8001844:	0800c2e0 	.word	0x0800c2e0
 8001848:	2000035c 	.word	0x2000035c
 800184c:	200004a8 	.word	0x200004a8
 8001850:	200003a0 	.word	0x200003a0
 8001854:	0800c388 	.word	0x0800c388
 8001858:	20000534 	.word	0x20000534
 800185c:	20003768 	.word	0x20003768
 8001860:	200004cc 	.word	0x200004cc
 8001864:	20003764 	.word	0x20003764
 8001868:	40020000 	.word	0x40020000
 800186c:	20003734 	.word	0x20003734
 8001870:	0800c280 	.word	0x0800c280
 8001874:	20000444 	.word	0x20000444
 8001878:	2000000c 	.word	0x2000000c
 800187c:	0800c290 	.word	0x0800c290
 8001880:	20000014 	.word	0x20000014
 8001884:	0800c2a0 	.word	0x0800c2a0
 8001888:	0800c2b0 	.word	0x0800c2b0
 800188c:	20000278 	.word	0x20000278
 8001890:	2000374c 	.word	0x2000374c
 8001894:	0800c2c0 	.word	0x0800c2c0
 8001898:	20003778 	.word	0x20003778
 800189c:	2000377c 	.word	0x2000377c
 80018a0:	0800c2d0 	.word	0x0800c2d0

080018a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b094      	sub	sp, #80	; 0x50
 80018a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018aa:	f107 0320 	add.w	r3, r7, #32
 80018ae:	2230      	movs	r2, #48	; 0x30
 80018b0:	2100      	movs	r1, #0
 80018b2:	4618      	mov	r0, r3
 80018b4:	f007 fd7a 	bl	80093ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018b8:	f107 030c 	add.w	r3, r7, #12
 80018bc:	2200      	movs	r2, #0
 80018be:	601a      	str	r2, [r3, #0]
 80018c0:	605a      	str	r2, [r3, #4]
 80018c2:	609a      	str	r2, [r3, #8]
 80018c4:	60da      	str	r2, [r3, #12]
 80018c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018c8:	2300      	movs	r3, #0
 80018ca:	60bb      	str	r3, [r7, #8]
 80018cc:	4b27      	ldr	r3, [pc, #156]	; (800196c <SystemClock_Config+0xc8>)
 80018ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d0:	4a26      	ldr	r2, [pc, #152]	; (800196c <SystemClock_Config+0xc8>)
 80018d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018d6:	6413      	str	r3, [r2, #64]	; 0x40
 80018d8:	4b24      	ldr	r3, [pc, #144]	; (800196c <SystemClock_Config+0xc8>)
 80018da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018e0:	60bb      	str	r3, [r7, #8]
 80018e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018e4:	2300      	movs	r3, #0
 80018e6:	607b      	str	r3, [r7, #4]
 80018e8:	4b21      	ldr	r3, [pc, #132]	; (8001970 <SystemClock_Config+0xcc>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a20      	ldr	r2, [pc, #128]	; (8001970 <SystemClock_Config+0xcc>)
 80018ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80018f2:	6013      	str	r3, [r2, #0]
 80018f4:	4b1e      	ldr	r3, [pc, #120]	; (8001970 <SystemClock_Config+0xcc>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80018fc:	607b      	str	r3, [r7, #4]
 80018fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001900:	2302      	movs	r3, #2
 8001902:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001904:	2301      	movs	r3, #1
 8001906:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001908:	2310      	movs	r3, #16
 800190a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800190c:	2302      	movs	r3, #2
 800190e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001910:	2300      	movs	r3, #0
 8001912:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001914:	2308      	movs	r3, #8
 8001916:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001918:	2364      	movs	r3, #100	; 0x64
 800191a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800191c:	2302      	movs	r3, #2
 800191e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001920:	2304      	movs	r3, #4
 8001922:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001924:	f107 0320 	add.w	r3, r7, #32
 8001928:	4618      	mov	r0, r3
 800192a:	f005 f8df 	bl	8006aec <HAL_RCC_OscConfig>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001934:	f000 fb64 	bl	8002000 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001938:	230f      	movs	r3, #15
 800193a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800193c:	2302      	movs	r3, #2
 800193e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001940:	2300      	movs	r3, #0
 8001942:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001944:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001948:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800194a:	2300      	movs	r3, #0
 800194c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800194e:	f107 030c 	add.w	r3, r7, #12
 8001952:	2103      	movs	r1, #3
 8001954:	4618      	mov	r0, r3
 8001956:	f005 fb41 	bl	8006fdc <HAL_RCC_ClockConfig>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001960:	f000 fb4e 	bl	8002000 <Error_Handler>
  }
}
 8001964:	bf00      	nop
 8001966:	3750      	adds	r7, #80	; 0x50
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	40023800 	.word	0x40023800
 8001970:	40007000 	.word	0x40007000

08001974 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001978:	4b12      	ldr	r3, [pc, #72]	; (80019c4 <MX_I2C1_Init+0x50>)
 800197a:	4a13      	ldr	r2, [pc, #76]	; (80019c8 <MX_I2C1_Init+0x54>)
 800197c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800197e:	4b11      	ldr	r3, [pc, #68]	; (80019c4 <MX_I2C1_Init+0x50>)
 8001980:	4a12      	ldr	r2, [pc, #72]	; (80019cc <MX_I2C1_Init+0x58>)
 8001982:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001984:	4b0f      	ldr	r3, [pc, #60]	; (80019c4 <MX_I2C1_Init+0x50>)
 8001986:	2200      	movs	r2, #0
 8001988:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800198a:	4b0e      	ldr	r3, [pc, #56]	; (80019c4 <MX_I2C1_Init+0x50>)
 800198c:	2200      	movs	r2, #0
 800198e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001990:	4b0c      	ldr	r3, [pc, #48]	; (80019c4 <MX_I2C1_Init+0x50>)
 8001992:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001996:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001998:	4b0a      	ldr	r3, [pc, #40]	; (80019c4 <MX_I2C1_Init+0x50>)
 800199a:	2200      	movs	r2, #0
 800199c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800199e:	4b09      	ldr	r3, [pc, #36]	; (80019c4 <MX_I2C1_Init+0x50>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019a4:	4b07      	ldr	r3, [pc, #28]	; (80019c4 <MX_I2C1_Init+0x50>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019aa:	4b06      	ldr	r3, [pc, #24]	; (80019c4 <MX_I2C1_Init+0x50>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80019b0:	4804      	ldr	r0, [pc, #16]	; (80019c4 <MX_I2C1_Init+0x50>)
 80019b2:	f002 fc01 	bl	80041b8 <HAL_I2C_Init>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80019bc:	f000 fb20 	bl	8002000 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80019c0:	bf00      	nop
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	20000224 	.word	0x20000224
 80019c8:	40005400 	.word	0x40005400
 80019cc:	00061a80 	.word	0x00061a80

080019d0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80019d4:	4b17      	ldr	r3, [pc, #92]	; (8001a34 <MX_SPI3_Init+0x64>)
 80019d6:	4a18      	ldr	r2, [pc, #96]	; (8001a38 <MX_SPI3_Init+0x68>)
 80019d8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80019da:	4b16      	ldr	r3, [pc, #88]	; (8001a34 <MX_SPI3_Init+0x64>)
 80019dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80019e0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80019e2:	4b14      	ldr	r3, [pc, #80]	; (8001a34 <MX_SPI3_Init+0x64>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80019e8:	4b12      	ldr	r3, [pc, #72]	; (8001a34 <MX_SPI3_Init+0x64>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019ee:	4b11      	ldr	r3, [pc, #68]	; (8001a34 <MX_SPI3_Init+0x64>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019f4:	4b0f      	ldr	r3, [pc, #60]	; (8001a34 <MX_SPI3_Init+0x64>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80019fa:	4b0e      	ldr	r3, [pc, #56]	; (8001a34 <MX_SPI3_Init+0x64>)
 80019fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a00:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001a02:	4b0c      	ldr	r3, [pc, #48]	; (8001a34 <MX_SPI3_Init+0x64>)
 8001a04:	2220      	movs	r2, #32
 8001a06:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a08:	4b0a      	ldr	r3, [pc, #40]	; (8001a34 <MX_SPI3_Init+0x64>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a0e:	4b09      	ldr	r3, [pc, #36]	; (8001a34 <MX_SPI3_Init+0x64>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a14:	4b07      	ldr	r3, [pc, #28]	; (8001a34 <MX_SPI3_Init+0x64>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001a1a:	4b06      	ldr	r3, [pc, #24]	; (8001a34 <MX_SPI3_Init+0x64>)
 8001a1c:	220a      	movs	r2, #10
 8001a1e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001a20:	4804      	ldr	r0, [pc, #16]	; (8001a34 <MX_SPI3_Init+0x64>)
 8001a22:	f005 fcfb 	bl	800741c <HAL_SPI_Init>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001a2c:	f000 fae8 	bl	8002000 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001a30:	bf00      	nop
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	20000278 	.word	0x20000278
 8001a38:	40003c00 	.word	0x40003c00

08001a3c <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001a40:	4b0e      	ldr	r3, [pc, #56]	; (8001a7c <MX_TIM10_Init+0x40>)
 8001a42:	4a0f      	ldr	r2, [pc, #60]	; (8001a80 <MX_TIM10_Init+0x44>)
 8001a44:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 999;
 8001a46:	4b0d      	ldr	r3, [pc, #52]	; (8001a7c <MX_TIM10_Init+0x40>)
 8001a48:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a4c:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a4e:	4b0b      	ldr	r3, [pc, #44]	; (8001a7c <MX_TIM10_Init+0x40>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 4999;
 8001a54:	4b09      	ldr	r3, [pc, #36]	; (8001a7c <MX_TIM10_Init+0x40>)
 8001a56:	f241 3287 	movw	r2, #4999	; 0x1387
 8001a5a:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a5c:	4b07      	ldr	r3, [pc, #28]	; (8001a7c <MX_TIM10_Init+0x40>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a62:	4b06      	ldr	r3, [pc, #24]	; (8001a7c <MX_TIM10_Init+0x40>)
 8001a64:	2280      	movs	r2, #128	; 0x80
 8001a66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001a68:	4804      	ldr	r0, [pc, #16]	; (8001a7c <MX_TIM10_Init+0x40>)
 8001a6a:	f005 ffcd 	bl	8007a08 <HAL_TIM_Base_Init>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8001a74:	f000 fac4 	bl	8002000 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001a78:	bf00      	nop
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	200002d0 	.word	0x200002d0
 8001a80:	40014400 	.word	0x40014400

08001a84 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a88:	4b11      	ldr	r3, [pc, #68]	; (8001ad0 <MX_USART1_UART_Init+0x4c>)
 8001a8a:	4a12      	ldr	r2, [pc, #72]	; (8001ad4 <MX_USART1_UART_Init+0x50>)
 8001a8c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001a8e:	4b10      	ldr	r3, [pc, #64]	; (8001ad0 <MX_USART1_UART_Init+0x4c>)
 8001a90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a94:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a96:	4b0e      	ldr	r3, [pc, #56]	; (8001ad0 <MX_USART1_UART_Init+0x4c>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a9c:	4b0c      	ldr	r3, [pc, #48]	; (8001ad0 <MX_USART1_UART_Init+0x4c>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001aa2:	4b0b      	ldr	r3, [pc, #44]	; (8001ad0 <MX_USART1_UART_Init+0x4c>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001aa8:	4b09      	ldr	r3, [pc, #36]	; (8001ad0 <MX_USART1_UART_Init+0x4c>)
 8001aaa:	220c      	movs	r2, #12
 8001aac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001aae:	4b08      	ldr	r3, [pc, #32]	; (8001ad0 <MX_USART1_UART_Init+0x4c>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ab4:	4b06      	ldr	r3, [pc, #24]	; (8001ad0 <MX_USART1_UART_Init+0x4c>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001aba:	4805      	ldr	r0, [pc, #20]	; (8001ad0 <MX_USART1_UART_Init+0x4c>)
 8001abc:	f006 fa4a 	bl	8007f54 <HAL_UART_Init>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001ac6:	f000 fa9b 	bl	8002000 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001aca:	bf00      	nop
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	20000318 	.word	0x20000318
 8001ad4:	40011000 	.word	0x40011000

08001ad8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001adc:	4b11      	ldr	r3, [pc, #68]	; (8001b24 <MX_USART2_UART_Init+0x4c>)
 8001ade:	4a12      	ldr	r2, [pc, #72]	; (8001b28 <MX_USART2_UART_Init+0x50>)
 8001ae0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ae2:	4b10      	ldr	r3, [pc, #64]	; (8001b24 <MX_USART2_UART_Init+0x4c>)
 8001ae4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ae8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001aea:	4b0e      	ldr	r3, [pc, #56]	; (8001b24 <MX_USART2_UART_Init+0x4c>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001af0:	4b0c      	ldr	r3, [pc, #48]	; (8001b24 <MX_USART2_UART_Init+0x4c>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001af6:	4b0b      	ldr	r3, [pc, #44]	; (8001b24 <MX_USART2_UART_Init+0x4c>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001afc:	4b09      	ldr	r3, [pc, #36]	; (8001b24 <MX_USART2_UART_Init+0x4c>)
 8001afe:	220c      	movs	r2, #12
 8001b00:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b02:	4b08      	ldr	r3, [pc, #32]	; (8001b24 <MX_USART2_UART_Init+0x4c>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b08:	4b06      	ldr	r3, [pc, #24]	; (8001b24 <MX_USART2_UART_Init+0x4c>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b0e:	4805      	ldr	r0, [pc, #20]	; (8001b24 <MX_USART2_UART_Init+0x4c>)
 8001b10:	f006 fa20 	bl	8007f54 <HAL_UART_Init>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001b1a:	f000 fa71 	bl	8002000 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b1e:	bf00      	nop
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	2000035c 	.word	0x2000035c
 8001b28:	40004400 	.word	0x40004400

08001b2c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001b30:	4b11      	ldr	r3, [pc, #68]	; (8001b78 <MX_USART6_UART_Init+0x4c>)
 8001b32:	4a12      	ldr	r2, [pc, #72]	; (8001b7c <MX_USART6_UART_Init+0x50>)
 8001b34:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001b36:	4b10      	ldr	r3, [pc, #64]	; (8001b78 <MX_USART6_UART_Init+0x4c>)
 8001b38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b3c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001b3e:	4b0e      	ldr	r3, [pc, #56]	; (8001b78 <MX_USART6_UART_Init+0x4c>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001b44:	4b0c      	ldr	r3, [pc, #48]	; (8001b78 <MX_USART6_UART_Init+0x4c>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001b4a:	4b0b      	ldr	r3, [pc, #44]	; (8001b78 <MX_USART6_UART_Init+0x4c>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001b50:	4b09      	ldr	r3, [pc, #36]	; (8001b78 <MX_USART6_UART_Init+0x4c>)
 8001b52:	220c      	movs	r2, #12
 8001b54:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b56:	4b08      	ldr	r3, [pc, #32]	; (8001b78 <MX_USART6_UART_Init+0x4c>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b5c:	4b06      	ldr	r3, [pc, #24]	; (8001b78 <MX_USART6_UART_Init+0x4c>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001b62:	4805      	ldr	r0, [pc, #20]	; (8001b78 <MX_USART6_UART_Init+0x4c>)
 8001b64:	f006 f9f6 	bl	8007f54 <HAL_UART_Init>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001b6e:	f000 fa47 	bl	8002000 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001b72:	bf00      	nop
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	200003a0 	.word	0x200003a0
 8001b7c:	40011400 	.word	0x40011400

08001b80 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001b86:	2300      	movs	r3, #0
 8001b88:	607b      	str	r3, [r7, #4]
 8001b8a:	4b0c      	ldr	r3, [pc, #48]	; (8001bbc <MX_DMA_Init+0x3c>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8e:	4a0b      	ldr	r2, [pc, #44]	; (8001bbc <MX_DMA_Init+0x3c>)
 8001b90:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b94:	6313      	str	r3, [r2, #48]	; 0x30
 8001b96:	4b09      	ldr	r3, [pc, #36]	; (8001bbc <MX_DMA_Init+0x3c>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b9e:	607b      	str	r3, [r7, #4]
 8001ba0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	2039      	movs	r0, #57	; 0x39
 8001ba8:	f001 fcef 	bl	800358a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001bac:	2039      	movs	r0, #57	; 0x39
 8001bae:	f001 fd08 	bl	80035c2 <HAL_NVIC_EnableIRQ>

}
 8001bb2:	bf00      	nop
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	40023800 	.word	0x40023800

08001bc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b08a      	sub	sp, #40	; 0x28
 8001bc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc6:	f107 0314 	add.w	r3, r7, #20
 8001bca:	2200      	movs	r2, #0
 8001bcc:	601a      	str	r2, [r3, #0]
 8001bce:	605a      	str	r2, [r3, #4]
 8001bd0:	609a      	str	r2, [r3, #8]
 8001bd2:	60da      	str	r2, [r3, #12]
 8001bd4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	613b      	str	r3, [r7, #16]
 8001bda:	4b69      	ldr	r3, [pc, #420]	; (8001d80 <MX_GPIO_Init+0x1c0>)
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bde:	4a68      	ldr	r2, [pc, #416]	; (8001d80 <MX_GPIO_Init+0x1c0>)
 8001be0:	f043 0304 	orr.w	r3, r3, #4
 8001be4:	6313      	str	r3, [r2, #48]	; 0x30
 8001be6:	4b66      	ldr	r3, [pc, #408]	; (8001d80 <MX_GPIO_Init+0x1c0>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bea:	f003 0304 	and.w	r3, r3, #4
 8001bee:	613b      	str	r3, [r7, #16]
 8001bf0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	60fb      	str	r3, [r7, #12]
 8001bf6:	4b62      	ldr	r3, [pc, #392]	; (8001d80 <MX_GPIO_Init+0x1c0>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfa:	4a61      	ldr	r2, [pc, #388]	; (8001d80 <MX_GPIO_Init+0x1c0>)
 8001bfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c00:	6313      	str	r3, [r2, #48]	; 0x30
 8001c02:	4b5f      	ldr	r3, [pc, #380]	; (8001d80 <MX_GPIO_Init+0x1c0>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c0a:	60fb      	str	r3, [r7, #12]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c0e:	2300      	movs	r3, #0
 8001c10:	60bb      	str	r3, [r7, #8]
 8001c12:	4b5b      	ldr	r3, [pc, #364]	; (8001d80 <MX_GPIO_Init+0x1c0>)
 8001c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c16:	4a5a      	ldr	r2, [pc, #360]	; (8001d80 <MX_GPIO_Init+0x1c0>)
 8001c18:	f043 0301 	orr.w	r3, r3, #1
 8001c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c1e:	4b58      	ldr	r3, [pc, #352]	; (8001d80 <MX_GPIO_Init+0x1c0>)
 8001c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c22:	f003 0301 	and.w	r3, r3, #1
 8001c26:	60bb      	str	r3, [r7, #8]
 8001c28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	607b      	str	r3, [r7, #4]
 8001c2e:	4b54      	ldr	r3, [pc, #336]	; (8001d80 <MX_GPIO_Init+0x1c0>)
 8001c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c32:	4a53      	ldr	r2, [pc, #332]	; (8001d80 <MX_GPIO_Init+0x1c0>)
 8001c34:	f043 0302 	orr.w	r3, r3, #2
 8001c38:	6313      	str	r3, [r2, #48]	; 0x30
 8001c3a:	4b51      	ldr	r3, [pc, #324]	; (8001d80 <MX_GPIO_Init+0x1c0>)
 8001c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3e:	f003 0302 	and.w	r3, r3, #2
 8001c42:	607b      	str	r3, [r7, #4]
 8001c44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c46:	2300      	movs	r3, #0
 8001c48:	603b      	str	r3, [r7, #0]
 8001c4a:	4b4d      	ldr	r3, [pc, #308]	; (8001d80 <MX_GPIO_Init+0x1c0>)
 8001c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4e:	4a4c      	ldr	r2, [pc, #304]	; (8001d80 <MX_GPIO_Init+0x1c0>)
 8001c50:	f043 0308 	orr.w	r3, r3, #8
 8001c54:	6313      	str	r3, [r2, #48]	; 0x30
 8001c56:	4b4a      	ldr	r3, [pc, #296]	; (8001d80 <MX_GPIO_Init+0x1c0>)
 8001c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5a:	f003 0308 	and.w	r3, r3, #8
 8001c5e:	603b      	str	r3, [r7, #0]
 8001c60:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_RS_Pin|LCD_CS_Pin|LCD_MOSI_Pin|Buzzer_Pin, GPIO_PIN_RESET);
 8001c62:	2200      	movs	r2, #0
 8001c64:	f240 210b 	movw	r1, #523	; 0x20b
 8001c68:	4846      	ldr	r0, [pc, #280]	; (8001d84 <MX_GPIO_Init+0x1c4>)
 8001c6a:	f002 fa59 	bl	8004120 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RST_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001c6e:	2200      	movs	r2, #0
 8001c70:	2130      	movs	r1, #48	; 0x30
 8001c72:	4845      	ldr	r0, [pc, #276]	; (8001d88 <MX_GPIO_Init+0x1c8>)
 8001c74:	f002 fa54 	bl	8004120 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_SCK_GPIO_Port, LCD_SCK_Pin, GPIO_PIN_RESET);
 8001c78:	2200      	movs	r2, #0
 8001c7a:	2101      	movs	r1, #1
 8001c7c:	4843      	ldr	r0, [pc, #268]	; (8001d8c <MX_GPIO_Init+0x1cc>)
 8001c7e:	f002 fa4f 	bl	8004120 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 8001c82:	2200      	movs	r2, #0
 8001c84:	2104      	movs	r1, #4
 8001c86:	4842      	ldr	r0, [pc, #264]	; (8001d90 <MX_GPIO_Init+0x1d0>)
 8001c88:	f002 fa4a 	bl	8004120 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001c8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001c92:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001c96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001c9c:	f107 0314 	add.w	r3, r7, #20
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	4838      	ldr	r0, [pc, #224]	; (8001d84 <MX_GPIO_Init+0x1c4>)
 8001ca4:	f002 f8b8 	bl	8003e18 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RS_Pin LCD_CS_Pin Buzzer_Pin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_CS_Pin|Buzzer_Pin;
 8001ca8:	f240 2303 	movw	r3, #515	; 0x203
 8001cac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cba:	f107 0314 	add.w	r3, r7, #20
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	4830      	ldr	r0, [pc, #192]	; (8001d84 <MX_GPIO_Init+0x1c4>)
 8001cc2:	f002 f8a9 	bl	8003e18 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_MISO_Pin */
  GPIO_InitStruct.Pin = LCD_MISO_Pin;
 8001cc6:	2304      	movs	r3, #4
 8001cc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LCD_MISO_GPIO_Port, &GPIO_InitStruct);
 8001cd2:	f107 0314 	add.w	r3, r7, #20
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	482a      	ldr	r0, [pc, #168]	; (8001d84 <MX_GPIO_Init+0x1c4>)
 8001cda:	f002 f89d 	bl	8003e18 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_MOSI_Pin */
  GPIO_InitStruct.Pin = LCD_MOSI_Pin;
 8001cde:	2308      	movs	r3, #8
 8001ce0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cea:	2302      	movs	r3, #2
 8001cec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_MOSI_GPIO_Port, &GPIO_InitStruct);
 8001cee:	f107 0314 	add.w	r3, r7, #20
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	4823      	ldr	r0, [pc, #140]	; (8001d84 <MX_GPIO_Init+0x1c4>)
 8001cf6:	f002 f88f 	bl	8003e18 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RST_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LD2_Pin;
 8001cfa:	2330      	movs	r3, #48	; 0x30
 8001cfc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d02:	2300      	movs	r3, #0
 8001d04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d06:	2300      	movs	r3, #0
 8001d08:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d0a:	f107 0314 	add.w	r3, r7, #20
 8001d0e:	4619      	mov	r1, r3
 8001d10:	481d      	ldr	r0, [pc, #116]	; (8001d88 <MX_GPIO_Init+0x1c8>)
 8001d12:	f002 f881 	bl	8003e18 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_SCK_Pin */
  GPIO_InitStruct.Pin = LCD_SCK_Pin;
 8001d16:	2301      	movs	r3, #1
 8001d18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001d22:	2301      	movs	r3, #1
 8001d24:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_SCK_GPIO_Port, &GPIO_InitStruct);
 8001d26:	f107 0314 	add.w	r3, r7, #20
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	4817      	ldr	r0, [pc, #92]	; (8001d8c <MX_GPIO_Init+0x1cc>)
 8001d2e:	f002 f873 	bl	8003e18 <HAL_GPIO_Init>

  /*Configure GPIO pins : Btn_1_Pin Btn_2_Pin Btn_3_Pin Btn_4_Pin */
  GPIO_InitStruct.Pin = Btn_1_Pin|Btn_2_Pin|Btn_3_Pin|Btn_4_Pin;
 8001d32:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001d36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d40:	f107 0314 	add.w	r3, r7, #20
 8001d44:	4619      	mov	r1, r3
 8001d46:	4811      	ldr	r0, [pc, #68]	; (8001d8c <MX_GPIO_Init+0x1cc>)
 8001d48:	f002 f866 	bl	8003e18 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_CS_Pin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 8001d4c:	2304      	movs	r3, #4
 8001d4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d50:	2301      	movs	r3, #1
 8001d52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d54:	2300      	movs	r3, #0
 8001d56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 8001d5c:	f107 0314 	add.w	r3, r7, #20
 8001d60:	4619      	mov	r1, r3
 8001d62:	480b      	ldr	r0, [pc, #44]	; (8001d90 <MX_GPIO_Init+0x1d0>)
 8001d64:	f002 f858 	bl	8003e18 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001d68:	2200      	movs	r2, #0
 8001d6a:	2100      	movs	r1, #0
 8001d6c:	2028      	movs	r0, #40	; 0x28
 8001d6e:	f001 fc0c 	bl	800358a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001d72:	2028      	movs	r0, #40	; 0x28
 8001d74:	f001 fc25 	bl	80035c2 <HAL_NVIC_EnableIRQ>

}
 8001d78:	bf00      	nop
 8001d7a:	3728      	adds	r7, #40	; 0x28
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	40023800 	.word	0x40023800
 8001d84:	40020800 	.word	0x40020800
 8001d88:	40020000 	.word	0x40020000
 8001d8c:	40020400 	.word	0x40020400
 8001d90:	40020c00 	.word	0x40020c00

08001d94 <running_box>:

/* USER CODE BEGIN 4 */

void running_box(){
 8001d94:	b590      	push	{r4, r7, lr}
 8001d96:	b087      	sub	sp, #28
 8001d98:	af02      	add	r7, sp, #8
   //// Running box ------
  int ratte = 1;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	60fb      	str	r3, [r7, #12]
  int sizo = 30;
 8001d9e:	231e      	movs	r3, #30
 8001da0:	60bb      	str	r3, [r7, #8]
  int offs = 190;
 8001da2:	23be      	movs	r3, #190	; 0xbe
 8001da4:	607b      	str	r3, [r7, #4]
  static uint16_t xsh = 0;
  ili9341_FillRect(xsh, offs, ratte ,sizo, cl_MAROON);
 8001da6:	4b1d      	ldr	r3, [pc, #116]	; (8001e1c <running_box+0x88>)
 8001da8:	8818      	ldrh	r0, [r3, #0]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	b299      	uxth	r1, r3
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	b29a      	uxth	r2, r3
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	b29b      	uxth	r3, r3
 8001db6:	f44f 44f0 	mov.w	r4, #30720	; 0x7800
 8001dba:	9400      	str	r4, [sp, #0]
 8001dbc:	f000 fd72 	bl	80028a4 <ili9341_FillRect>
  xsh += ratte;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	b29a      	uxth	r2, r3
 8001dc4:	4b15      	ldr	r3, [pc, #84]	; (8001e1c <running_box+0x88>)
 8001dc6:	881b      	ldrh	r3, [r3, #0]
 8001dc8:	4413      	add	r3, r2
 8001dca:	b29a      	uxth	r2, r3
 8001dcc:	4b13      	ldr	r3, [pc, #76]	; (8001e1c <running_box+0x88>)
 8001dce:	801a      	strh	r2, [r3, #0]
  ili9341_FillRect(xsh, offs, sizo, sizo, cl_CYAN); //// box
 8001dd0:	4b12      	ldr	r3, [pc, #72]	; (8001e1c <running_box+0x88>)
 8001dd2:	8818      	ldrh	r0, [r3, #0]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	b299      	uxth	r1, r3
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	b29a      	uxth	r2, r3
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	f240 74ff 	movw	r4, #2047	; 0x7ff
 8001de4:	9400      	str	r4, [sp, #0]
 8001de6:	f000 fd5d 	bl	80028a4 <ili9341_FillRect>
  if(xsh >= 400){ // clear
 8001dea:	4b0c      	ldr	r3, [pc, #48]	; (8001e1c <running_box+0x88>)
 8001dec:	881b      	ldrh	r3, [r3, #0]
 8001dee:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001df2:	d30f      	bcc.n	8001e14 <running_box+0x80>
	  ili9341_FillRect(xsh, offs, sizo, sizo, cl_MAROON);
 8001df4:	4b09      	ldr	r3, [pc, #36]	; (8001e1c <running_box+0x88>)
 8001df6:	8818      	ldrh	r0, [r3, #0]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	b299      	uxth	r1, r3
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	b29a      	uxth	r2, r3
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	b29b      	uxth	r3, r3
 8001e04:	f44f 44f0 	mov.w	r4, #30720	; 0x7800
 8001e08:	9400      	str	r4, [sp, #0]
 8001e0a:	f000 fd4b 	bl	80028a4 <ili9341_FillRect>
	  xsh = 0;
 8001e0e:	4b03      	ldr	r3, [pc, #12]	; (8001e1c <running_box+0x88>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	801a      	strh	r2, [r3, #0]
		  }

}
 8001e14:	bf00      	nop
 8001e16:	3714      	adds	r7, #20
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd90      	pop	{r4, r7, pc}
 8001e1c:	20003780 	.word	0x20003780

08001e20 <Button_machine>:

void Button_machine(){
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
	 * raw read,
	 * read from 1 as rising detect,
	 * read latest (bdebug),
	 * read latest & erased when fin}
	 */
		btn_read[1] = btn_read[0];
 8001e24:	4b16      	ldr	r3, [pc, #88]	; (8001e80 <Button_machine+0x60>)
 8001e26:	781a      	ldrb	r2, [r3, #0]
 8001e28:	4b15      	ldr	r3, [pc, #84]	; (8001e80 <Button_machine+0x60>)
 8001e2a:	705a      	strb	r2, [r3, #1]
		btn_read[0] = (0x0F & ~(GPIOB->IDR >> 12)); //// available for PB 12 13 14 15 or which the same bank only
 8001e2c:	4b15      	ldr	r3, [pc, #84]	; (8001e84 <Button_machine+0x64>)
 8001e2e:	691b      	ldr	r3, [r3, #16]
 8001e30:	0b1b      	lsrs	r3, r3, #12
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	43db      	mvns	r3, r3
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	f003 030f 	and.w	r3, r3, #15
 8001e3c:	b2da      	uxtb	r2, r3
 8001e3e:	4b10      	ldr	r3, [pc, #64]	; (8001e80 <Button_machine+0x60>)
 8001e40:	701a      	strb	r2, [r3, #0]


		//// rising edge counter
		if(btn_read[0] && btn_read[1] == 0){
 8001e42:	4b0f      	ldr	r3, [pc, #60]	; (8001e80 <Button_machine+0x60>)
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d014      	beq.n	8001e74 <Button_machine+0x54>
 8001e4a:	4b0d      	ldr	r3, [pc, #52]	; (8001e80 <Button_machine+0x60>)
 8001e4c:	785b      	ldrb	r3, [r3, #1]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d110      	bne.n	8001e74 <Button_machine+0x54>
			btn_cnt += btn_read[0]; //// plus at each hex pos
 8001e52:	4b0b      	ldr	r3, [pc, #44]	; (8001e80 <Button_machine+0x60>)
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	b29a      	uxth	r2, r3
 8001e58:	4b0b      	ldr	r3, [pc, #44]	; (8001e88 <Button_machine+0x68>)
 8001e5a:	881b      	ldrh	r3, [r3, #0]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	b29a      	uxth	r2, r3
 8001e60:	4b09      	ldr	r3, [pc, #36]	; (8001e88 <Button_machine+0x68>)
 8001e62:	801a      	strh	r2, [r3, #0]
			btn_read[2] = btn_read[0]; //// read latest, debug
 8001e64:	4b06      	ldr	r3, [pc, #24]	; (8001e80 <Button_machine+0x60>)
 8001e66:	781a      	ldrb	r2, [r3, #0]
 8001e68:	4b05      	ldr	r3, [pc, #20]	; (8001e80 <Button_machine+0x60>)
 8001e6a:	709a      	strb	r2, [r3, #2]
			btn_read[3] = btn_read[0]; //// read latest, clearable
 8001e6c:	4b04      	ldr	r3, [pc, #16]	; (8001e80 <Button_machine+0x60>)
 8001e6e:	781a      	ldrb	r2, [r3, #0]
 8001e70:	4b03      	ldr	r3, [pc, #12]	; (8001e80 <Button_machine+0x60>)
 8001e72:	70da      	strb	r2, [r3, #3]
		}


}
 8001e74:	bf00      	nop
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	20003778 	.word	0x20003778
 8001e84:	40020400 	.word	0x40020400
 8001e88:	2000377c 	.word	0x2000377c

08001e8c <buzzer_scream_cnt>:

void buzzer_scream_cnt(){
 8001e8c:	b598      	push	{r3, r4, r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
	static enum {bz_init, bz_silent, bz_scream} bz_st = bz_init;
	//uint16_t tup = 100, tdn = 50;

		switch(bz_st){
 8001e90:	4b35      	ldr	r3, [pc, #212]	; (8001f68 <buzzer_scream_cnt+0xdc>)
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d039      	beq.n	8001f0c <buzzer_scream_cnt+0x80>
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	d01d      	beq.n	8001ed8 <buzzer_scream_cnt+0x4c>
		default:
		case bz_init:
			//HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);

			if(flagc_bz){
 8001e9c:	4b33      	ldr	r3, [pc, #204]	; (8001f6c <buzzer_scream_cnt+0xe0>)
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d015      	beq.n	8001ed0 <buzzer_scream_cnt+0x44>

				HAL_TIM_Base_Start_IT(&htim10);
 8001ea4:	4832      	ldr	r0, [pc, #200]	; (8001f70 <buzzer_scream_cnt+0xe4>)
 8001ea6:	f005 fdff 	bl	8007aa8 <HAL_TIM_Base_Start_IT>
				timestamp_bz = bzz_t_priod_up + HAL_GetTick(); //
 8001eaa:	4b32      	ldr	r3, [pc, #200]	; (8001f74 <buzzer_scream_cnt+0xe8>)
 8001eac:	881b      	ldrh	r3, [r3, #0]
 8001eae:	461c      	mov	r4, r3
 8001eb0:	f001 fa60 	bl	8003374 <HAL_GetTick>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	4423      	add	r3, r4
 8001eb8:	4a2f      	ldr	r2, [pc, #188]	; (8001f78 <buzzer_scream_cnt+0xec>)
 8001eba:	6013      	str	r3, [r2, #0]

				bz_st = bz_scream;
 8001ebc:	4b2a      	ldr	r3, [pc, #168]	; (8001f68 <buzzer_scream_cnt+0xdc>)
 8001ebe:	2202      	movs	r2, #2
 8001ec0:	701a      	strb	r2, [r3, #0]
				/// down flag_counter every 1 scream
				flagc_bz--;
 8001ec2:	4b2a      	ldr	r3, [pc, #168]	; (8001f6c <buzzer_scream_cnt+0xe0>)
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	3b01      	subs	r3, #1
 8001ec8:	b2da      	uxtb	r2, r3
 8001eca:	4b28      	ldr	r3, [pc, #160]	; (8001f6c <buzzer_scream_cnt+0xe0>)
 8001ecc:	701a      	strb	r2, [r3, #0]
			}else{
				HAL_TIM_Base_Stop_IT(&htim10);
			}

			break;
 8001ece:	e048      	b.n	8001f62 <buzzer_scream_cnt+0xd6>
				HAL_TIM_Base_Stop_IT(&htim10);
 8001ed0:	4827      	ldr	r0, [pc, #156]	; (8001f70 <buzzer_scream_cnt+0xe4>)
 8001ed2:	f005 fe4b 	bl	8007b6c <HAL_TIM_Base_Stop_IT>
			break;
 8001ed6:	e044      	b.n	8001f62 <buzzer_scream_cnt+0xd6>

		case bz_scream:
			HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET);
 8001ed8:	2201      	movs	r2, #1
 8001eda:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ede:	4827      	ldr	r0, [pc, #156]	; (8001f7c <buzzer_scream_cnt+0xf0>)
 8001ee0:	f002 f91e 	bl	8004120 <HAL_GPIO_WritePin>

			if(HAL_GetTick() >= timestamp_bz){
 8001ee4:	f001 fa46 	bl	8003374 <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	4b23      	ldr	r3, [pc, #140]	; (8001f78 <buzzer_scream_cnt+0xec>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d334      	bcc.n	8001f5c <buzzer_scream_cnt+0xd0>
				timestamp_bz = bzz_t_priod_dn + HAL_GetTick();
 8001ef2:	4b23      	ldr	r3, [pc, #140]	; (8001f80 <buzzer_scream_cnt+0xf4>)
 8001ef4:	881b      	ldrh	r3, [r3, #0]
 8001ef6:	461c      	mov	r4, r3
 8001ef8:	f001 fa3c 	bl	8003374 <HAL_GetTick>
 8001efc:	4603      	mov	r3, r0
 8001efe:	4423      	add	r3, r4
 8001f00:	4a1d      	ldr	r2, [pc, #116]	; (8001f78 <buzzer_scream_cnt+0xec>)
 8001f02:	6013      	str	r3, [r2, #0]

				bz_st = bz_silent;
 8001f04:	4b18      	ldr	r3, [pc, #96]	; (8001f68 <buzzer_scream_cnt+0xdc>)
 8001f06:	2201      	movs	r2, #1
 8001f08:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001f0a:	e027      	b.n	8001f5c <buzzer_scream_cnt+0xd0>


		case bz_silent:
			HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f12:	481a      	ldr	r0, [pc, #104]	; (8001f7c <buzzer_scream_cnt+0xf0>)
 8001f14:	f002 f904 	bl	8004120 <HAL_GPIO_WritePin>

			if(HAL_GetTick() >= timestamp_bz){
 8001f18:	f001 fa2c 	bl	8003374 <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	4b16      	ldr	r3, [pc, #88]	; (8001f78 <buzzer_scream_cnt+0xec>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d31c      	bcc.n	8001f60 <buzzer_scream_cnt+0xd4>

				if(flagc_bz){
 8001f26:	4b11      	ldr	r3, [pc, #68]	; (8001f6c <buzzer_scream_cnt+0xe0>)
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d012      	beq.n	8001f54 <buzzer_scream_cnt+0xc8>
					timestamp_bz = bzz_t_priod_up + HAL_GetTick(); //
 8001f2e:	4b11      	ldr	r3, [pc, #68]	; (8001f74 <buzzer_scream_cnt+0xe8>)
 8001f30:	881b      	ldrh	r3, [r3, #0]
 8001f32:	461c      	mov	r4, r3
 8001f34:	f001 fa1e 	bl	8003374 <HAL_GetTick>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	4423      	add	r3, r4
 8001f3c:	4a0e      	ldr	r2, [pc, #56]	; (8001f78 <buzzer_scream_cnt+0xec>)
 8001f3e:	6013      	str	r3, [r2, #0]

					flagc_bz--;
 8001f40:	4b0a      	ldr	r3, [pc, #40]	; (8001f6c <buzzer_scream_cnt+0xe0>)
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	3b01      	subs	r3, #1
 8001f46:	b2da      	uxtb	r2, r3
 8001f48:	4b08      	ldr	r3, [pc, #32]	; (8001f6c <buzzer_scream_cnt+0xe0>)
 8001f4a:	701a      	strb	r2, [r3, #0]
					bz_st = bz_scream;
 8001f4c:	4b06      	ldr	r3, [pc, #24]	; (8001f68 <buzzer_scream_cnt+0xdc>)
 8001f4e:	2202      	movs	r2, #2
 8001f50:	701a      	strb	r2, [r3, #0]
				}else{
				bz_st = bz_init;
				}
			}

			break;
 8001f52:	e005      	b.n	8001f60 <buzzer_scream_cnt+0xd4>
				bz_st = bz_init;
 8001f54:	4b04      	ldr	r3, [pc, #16]	; (8001f68 <buzzer_scream_cnt+0xdc>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	701a      	strb	r2, [r3, #0]
			break;
 8001f5a:	e001      	b.n	8001f60 <buzzer_scream_cnt+0xd4>
			break;
 8001f5c:	bf00      	nop
 8001f5e:	e000      	b.n	8001f62 <buzzer_scream_cnt+0xd6>
			break;
 8001f60:	bf00      	nop
		}

}
 8001f62:	bf00      	nop
 8001f64:	bd98      	pop	{r3, r4, r7, pc}
 8001f66:	bf00      	nop
 8001f68:	20003782 	.word	0x20003782
 8001f6c:	20003774 	.word	0x20003774
 8001f70:	200002d0 	.word	0x200002d0
 8001f74:	20000004 	.word	0x20000004
 8001f78:	2000376c 	.word	0x2000376c
 8001f7c:	40020800 	.word	0x40020800
 8001f80:	20000006 	.word	0x20000006

08001f84 <HAL_GPIO_EXTI_Callback>:

void State_Script_1(){

}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13){
 8001f8e:	88fb      	ldrh	r3, [r7, #6]
 8001f90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f94:	d104      	bne.n	8001fa0 <HAL_GPIO_EXTI_Callback+0x1c>
		//INA219_BitReset(&hi2c1, INA219_ADDR_1);
		flagc_bz = 12;
 8001f96:	4b04      	ldr	r3, [pc, #16]	; (8001fa8 <HAL_GPIO_EXTI_Callback+0x24>)
 8001f98:	220c      	movs	r2, #12
 8001f9a:	701a      	strb	r2, [r3, #0]
		buzzer_scream_cnt();
 8001f9c:	f7ff ff76 	bl	8001e8c <buzzer_scream_cnt>
		}
}
 8001fa0:	bf00      	nop
 8001fa2:	3708      	adds	r7, #8
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	20003774 	.word	0x20003774

08001fac <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
	if(htim == &htim10){
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4a07      	ldr	r2, [pc, #28]	; (8001fd4 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d106      	bne.n	8001fca <HAL_TIM_PeriodElapsedCallback+0x1e>
		_millis++;
 8001fbc:	4b06      	ldr	r3, [pc, #24]	; (8001fd8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	4a05      	ldr	r2, [pc, #20]	; (8001fd8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001fc4:	6013      	str	r3, [r2, #0]
		buzzer_scream_cnt();
 8001fc6:	f7ff ff61 	bl	8001e8c <buzzer_scream_cnt>
	}
}
 8001fca:	bf00      	nop
 8001fcc:	3708      	adds	r7, #8
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	200002d0 	.word	0x200002d0
 8001fd8:	20003770 	.word	0x20003770

08001fdc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
	counter++;
 8001fe4:	4b05      	ldr	r3, [pc, #20]	; (8001ffc <HAL_UART_RxCpltCallback+0x20>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	3301      	adds	r3, #1
 8001fea:	b2da      	uxtb	r2, r3
 8001fec:	4b03      	ldr	r3, [pc, #12]	; (8001ffc <HAL_UART_RxCpltCallback+0x20>)
 8001fee:	701a      	strb	r2, [r3, #0]
}
 8001ff0:	bf00      	nop
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr
 8001ffc:	2000377e 	.word	0x2000377e

08002000 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002004:	b672      	cpsid	i
}
 8002006:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002008:	e7fe      	b.n	8002008 <Error_Handler+0x8>
	...

0800200c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002012:	2300      	movs	r3, #0
 8002014:	607b      	str	r3, [r7, #4]
 8002016:	4b10      	ldr	r3, [pc, #64]	; (8002058 <HAL_MspInit+0x4c>)
 8002018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800201a:	4a0f      	ldr	r2, [pc, #60]	; (8002058 <HAL_MspInit+0x4c>)
 800201c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002020:	6453      	str	r3, [r2, #68]	; 0x44
 8002022:	4b0d      	ldr	r3, [pc, #52]	; (8002058 <HAL_MspInit+0x4c>)
 8002024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002026:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800202a:	607b      	str	r3, [r7, #4]
 800202c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800202e:	2300      	movs	r3, #0
 8002030:	603b      	str	r3, [r7, #0]
 8002032:	4b09      	ldr	r3, [pc, #36]	; (8002058 <HAL_MspInit+0x4c>)
 8002034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002036:	4a08      	ldr	r2, [pc, #32]	; (8002058 <HAL_MspInit+0x4c>)
 8002038:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800203c:	6413      	str	r3, [r2, #64]	; 0x40
 800203e:	4b06      	ldr	r3, [pc, #24]	; (8002058 <HAL_MspInit+0x4c>)
 8002040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002046:	603b      	str	r3, [r7, #0]
 8002048:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800204a:	2007      	movs	r0, #7
 800204c:	f001 fa92 	bl	8003574 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002050:	bf00      	nop
 8002052:	3708      	adds	r7, #8
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	40023800 	.word	0x40023800

0800205c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b08a      	sub	sp, #40	; 0x28
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002064:	f107 0314 	add.w	r3, r7, #20
 8002068:	2200      	movs	r2, #0
 800206a:	601a      	str	r2, [r3, #0]
 800206c:	605a      	str	r2, [r3, #4]
 800206e:	609a      	str	r2, [r3, #8]
 8002070:	60da      	str	r2, [r3, #12]
 8002072:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a21      	ldr	r2, [pc, #132]	; (8002100 <HAL_I2C_MspInit+0xa4>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d13c      	bne.n	80020f8 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800207e:	2300      	movs	r3, #0
 8002080:	613b      	str	r3, [r7, #16]
 8002082:	4b20      	ldr	r3, [pc, #128]	; (8002104 <HAL_I2C_MspInit+0xa8>)
 8002084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002086:	4a1f      	ldr	r2, [pc, #124]	; (8002104 <HAL_I2C_MspInit+0xa8>)
 8002088:	f043 0302 	orr.w	r3, r3, #2
 800208c:	6313      	str	r3, [r2, #48]	; 0x30
 800208e:	4b1d      	ldr	r3, [pc, #116]	; (8002104 <HAL_I2C_MspInit+0xa8>)
 8002090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	613b      	str	r3, [r7, #16]
 8002098:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800209a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800209e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020a0:	2312      	movs	r3, #18
 80020a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a4:	2300      	movs	r3, #0
 80020a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020a8:	2303      	movs	r3, #3
 80020aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80020ac:	2304      	movs	r3, #4
 80020ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020b0:	f107 0314 	add.w	r3, r7, #20
 80020b4:	4619      	mov	r1, r3
 80020b6:	4814      	ldr	r0, [pc, #80]	; (8002108 <HAL_I2C_MspInit+0xac>)
 80020b8:	f001 feae 	bl	8003e18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80020bc:	2300      	movs	r3, #0
 80020be:	60fb      	str	r3, [r7, #12]
 80020c0:	4b10      	ldr	r3, [pc, #64]	; (8002104 <HAL_I2C_MspInit+0xa8>)
 80020c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c4:	4a0f      	ldr	r2, [pc, #60]	; (8002104 <HAL_I2C_MspInit+0xa8>)
 80020c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020ca:	6413      	str	r3, [r2, #64]	; 0x40
 80020cc:	4b0d      	ldr	r3, [pc, #52]	; (8002104 <HAL_I2C_MspInit+0xa8>)
 80020ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020d4:	60fb      	str	r3, [r7, #12]
 80020d6:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80020d8:	2200      	movs	r2, #0
 80020da:	2100      	movs	r1, #0
 80020dc:	201f      	movs	r0, #31
 80020de:	f001 fa54 	bl	800358a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80020e2:	201f      	movs	r0, #31
 80020e4:	f001 fa6d 	bl	80035c2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80020e8:	2200      	movs	r2, #0
 80020ea:	2100      	movs	r1, #0
 80020ec:	2020      	movs	r0, #32
 80020ee:	f001 fa4c 	bl	800358a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80020f2:	2020      	movs	r0, #32
 80020f4:	f001 fa65 	bl	80035c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80020f8:	bf00      	nop
 80020fa:	3728      	adds	r7, #40	; 0x28
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	40005400 	.word	0x40005400
 8002104:	40023800 	.word	0x40023800
 8002108:	40020400 	.word	0x40020400

0800210c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b08a      	sub	sp, #40	; 0x28
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002114:	f107 0314 	add.w	r3, r7, #20
 8002118:	2200      	movs	r2, #0
 800211a:	601a      	str	r2, [r3, #0]
 800211c:	605a      	str	r2, [r3, #4]
 800211e:	609a      	str	r2, [r3, #8]
 8002120:	60da      	str	r2, [r3, #12]
 8002122:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a19      	ldr	r2, [pc, #100]	; (8002190 <HAL_SPI_MspInit+0x84>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d12c      	bne.n	8002188 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800212e:	2300      	movs	r3, #0
 8002130:	613b      	str	r3, [r7, #16]
 8002132:	4b18      	ldr	r3, [pc, #96]	; (8002194 <HAL_SPI_MspInit+0x88>)
 8002134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002136:	4a17      	ldr	r2, [pc, #92]	; (8002194 <HAL_SPI_MspInit+0x88>)
 8002138:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800213c:	6413      	str	r3, [r2, #64]	; 0x40
 800213e:	4b15      	ldr	r3, [pc, #84]	; (8002194 <HAL_SPI_MspInit+0x88>)
 8002140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002142:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002146:	613b      	str	r3, [r7, #16]
 8002148:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800214a:	2300      	movs	r3, #0
 800214c:	60fb      	str	r3, [r7, #12]
 800214e:	4b11      	ldr	r3, [pc, #68]	; (8002194 <HAL_SPI_MspInit+0x88>)
 8002150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002152:	4a10      	ldr	r2, [pc, #64]	; (8002194 <HAL_SPI_MspInit+0x88>)
 8002154:	f043 0304 	orr.w	r3, r3, #4
 8002158:	6313      	str	r3, [r2, #48]	; 0x30
 800215a:	4b0e      	ldr	r3, [pc, #56]	; (8002194 <HAL_SPI_MspInit+0x88>)
 800215c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215e:	f003 0304 	and.w	r3, r3, #4
 8002162:	60fb      	str	r3, [r7, #12]
 8002164:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002166:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800216a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800216c:	2302      	movs	r3, #2
 800216e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002170:	2300      	movs	r3, #0
 8002172:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002174:	2303      	movs	r3, #3
 8002176:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002178:	2306      	movs	r3, #6
 800217a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800217c:	f107 0314 	add.w	r3, r7, #20
 8002180:	4619      	mov	r1, r3
 8002182:	4805      	ldr	r0, [pc, #20]	; (8002198 <HAL_SPI_MspInit+0x8c>)
 8002184:	f001 fe48 	bl	8003e18 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002188:	bf00      	nop
 800218a:	3728      	adds	r7, #40	; 0x28
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}
 8002190:	40003c00 	.word	0x40003c00
 8002194:	40023800 	.word	0x40023800
 8002198:	40020800 	.word	0x40020800

0800219c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a0e      	ldr	r2, [pc, #56]	; (80021e4 <HAL_TIM_Base_MspInit+0x48>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d115      	bne.n	80021da <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 80021ae:	2300      	movs	r3, #0
 80021b0:	60fb      	str	r3, [r7, #12]
 80021b2:	4b0d      	ldr	r3, [pc, #52]	; (80021e8 <HAL_TIM_Base_MspInit+0x4c>)
 80021b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b6:	4a0c      	ldr	r2, [pc, #48]	; (80021e8 <HAL_TIM_Base_MspInit+0x4c>)
 80021b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021bc:	6453      	str	r3, [r2, #68]	; 0x44
 80021be:	4b0a      	ldr	r3, [pc, #40]	; (80021e8 <HAL_TIM_Base_MspInit+0x4c>)
 80021c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021c6:	60fb      	str	r3, [r7, #12]
 80021c8:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80021ca:	2200      	movs	r2, #0
 80021cc:	2100      	movs	r1, #0
 80021ce:	2019      	movs	r0, #25
 80021d0:	f001 f9db 	bl	800358a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80021d4:	2019      	movs	r0, #25
 80021d6:	f001 f9f4 	bl	80035c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 80021da:	bf00      	nop
 80021dc:	3710      	adds	r7, #16
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	40014400 	.word	0x40014400
 80021e8:	40023800 	.word	0x40023800

080021ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b08e      	sub	sp, #56	; 0x38
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021f8:	2200      	movs	r2, #0
 80021fa:	601a      	str	r2, [r3, #0]
 80021fc:	605a      	str	r2, [r3, #4]
 80021fe:	609a      	str	r2, [r3, #8]
 8002200:	60da      	str	r2, [r3, #12]
 8002202:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a67      	ldr	r2, [pc, #412]	; (80023a8 <HAL_UART_MspInit+0x1bc>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d12d      	bne.n	800226a <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800220e:	2300      	movs	r3, #0
 8002210:	623b      	str	r3, [r7, #32]
 8002212:	4b66      	ldr	r3, [pc, #408]	; (80023ac <HAL_UART_MspInit+0x1c0>)
 8002214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002216:	4a65      	ldr	r2, [pc, #404]	; (80023ac <HAL_UART_MspInit+0x1c0>)
 8002218:	f043 0310 	orr.w	r3, r3, #16
 800221c:	6453      	str	r3, [r2, #68]	; 0x44
 800221e:	4b63      	ldr	r3, [pc, #396]	; (80023ac <HAL_UART_MspInit+0x1c0>)
 8002220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002222:	f003 0310 	and.w	r3, r3, #16
 8002226:	623b      	str	r3, [r7, #32]
 8002228:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800222a:	2300      	movs	r3, #0
 800222c:	61fb      	str	r3, [r7, #28]
 800222e:	4b5f      	ldr	r3, [pc, #380]	; (80023ac <HAL_UART_MspInit+0x1c0>)
 8002230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002232:	4a5e      	ldr	r2, [pc, #376]	; (80023ac <HAL_UART_MspInit+0x1c0>)
 8002234:	f043 0301 	orr.w	r3, r3, #1
 8002238:	6313      	str	r3, [r2, #48]	; 0x30
 800223a:	4b5c      	ldr	r3, [pc, #368]	; (80023ac <HAL_UART_MspInit+0x1c0>)
 800223c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	61fb      	str	r3, [r7, #28]
 8002244:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002246:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800224a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800224c:	2302      	movs	r3, #2
 800224e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002250:	2300      	movs	r3, #0
 8002252:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002254:	2303      	movs	r3, #3
 8002256:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002258:	2307      	movs	r3, #7
 800225a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800225c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002260:	4619      	mov	r1, r3
 8002262:	4853      	ldr	r0, [pc, #332]	; (80023b0 <HAL_UART_MspInit+0x1c4>)
 8002264:	f001 fdd8 	bl	8003e18 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002268:	e09a      	b.n	80023a0 <HAL_UART_MspInit+0x1b4>
  else if(huart->Instance==USART2)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a51      	ldr	r2, [pc, #324]	; (80023b4 <HAL_UART_MspInit+0x1c8>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d12c      	bne.n	80022ce <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002274:	2300      	movs	r3, #0
 8002276:	61bb      	str	r3, [r7, #24]
 8002278:	4b4c      	ldr	r3, [pc, #304]	; (80023ac <HAL_UART_MspInit+0x1c0>)
 800227a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227c:	4a4b      	ldr	r2, [pc, #300]	; (80023ac <HAL_UART_MspInit+0x1c0>)
 800227e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002282:	6413      	str	r3, [r2, #64]	; 0x40
 8002284:	4b49      	ldr	r3, [pc, #292]	; (80023ac <HAL_UART_MspInit+0x1c0>)
 8002286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002288:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800228c:	61bb      	str	r3, [r7, #24]
 800228e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002290:	2300      	movs	r3, #0
 8002292:	617b      	str	r3, [r7, #20]
 8002294:	4b45      	ldr	r3, [pc, #276]	; (80023ac <HAL_UART_MspInit+0x1c0>)
 8002296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002298:	4a44      	ldr	r2, [pc, #272]	; (80023ac <HAL_UART_MspInit+0x1c0>)
 800229a:	f043 0301 	orr.w	r3, r3, #1
 800229e:	6313      	str	r3, [r2, #48]	; 0x30
 80022a0:	4b42      	ldr	r3, [pc, #264]	; (80023ac <HAL_UART_MspInit+0x1c0>)
 80022a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a4:	f003 0301 	and.w	r3, r3, #1
 80022a8:	617b      	str	r3, [r7, #20]
 80022aa:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80022ac:	230c      	movs	r3, #12
 80022ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b0:	2302      	movs	r3, #2
 80022b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b4:	2300      	movs	r3, #0
 80022b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022b8:	2303      	movs	r3, #3
 80022ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80022bc:	2307      	movs	r3, #7
 80022be:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022c4:	4619      	mov	r1, r3
 80022c6:	483a      	ldr	r0, [pc, #232]	; (80023b0 <HAL_UART_MspInit+0x1c4>)
 80022c8:	f001 fda6 	bl	8003e18 <HAL_GPIO_Init>
}
 80022cc:	e068      	b.n	80023a0 <HAL_UART_MspInit+0x1b4>
  else if(huart->Instance==USART6)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a39      	ldr	r2, [pc, #228]	; (80023b8 <HAL_UART_MspInit+0x1cc>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d163      	bne.n	80023a0 <HAL_UART_MspInit+0x1b4>
    __HAL_RCC_USART6_CLK_ENABLE();
 80022d8:	2300      	movs	r3, #0
 80022da:	613b      	str	r3, [r7, #16]
 80022dc:	4b33      	ldr	r3, [pc, #204]	; (80023ac <HAL_UART_MspInit+0x1c0>)
 80022de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e0:	4a32      	ldr	r2, [pc, #200]	; (80023ac <HAL_UART_MspInit+0x1c0>)
 80022e2:	f043 0320 	orr.w	r3, r3, #32
 80022e6:	6453      	str	r3, [r2, #68]	; 0x44
 80022e8:	4b30      	ldr	r3, [pc, #192]	; (80023ac <HAL_UART_MspInit+0x1c0>)
 80022ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ec:	f003 0320 	and.w	r3, r3, #32
 80022f0:	613b      	str	r3, [r7, #16]
 80022f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022f4:	2300      	movs	r3, #0
 80022f6:	60fb      	str	r3, [r7, #12]
 80022f8:	4b2c      	ldr	r3, [pc, #176]	; (80023ac <HAL_UART_MspInit+0x1c0>)
 80022fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fc:	4a2b      	ldr	r2, [pc, #172]	; (80023ac <HAL_UART_MspInit+0x1c0>)
 80022fe:	f043 0301 	orr.w	r3, r3, #1
 8002302:	6313      	str	r3, [r2, #48]	; 0x30
 8002304:	4b29      	ldr	r3, [pc, #164]	; (80023ac <HAL_UART_MspInit+0x1c0>)
 8002306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002308:	f003 0301 	and.w	r3, r3, #1
 800230c:	60fb      	str	r3, [r7, #12]
 800230e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002310:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002314:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002316:	2302      	movs	r3, #2
 8002318:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231a:	2300      	movs	r3, #0
 800231c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800231e:	2303      	movs	r3, #3
 8002320:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002322:	2308      	movs	r3, #8
 8002324:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002326:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800232a:	4619      	mov	r1, r3
 800232c:	4820      	ldr	r0, [pc, #128]	; (80023b0 <HAL_UART_MspInit+0x1c4>)
 800232e:	f001 fd73 	bl	8003e18 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8002332:	4b22      	ldr	r3, [pc, #136]	; (80023bc <HAL_UART_MspInit+0x1d0>)
 8002334:	4a22      	ldr	r2, [pc, #136]	; (80023c0 <HAL_UART_MspInit+0x1d4>)
 8002336:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8002338:	4b20      	ldr	r3, [pc, #128]	; (80023bc <HAL_UART_MspInit+0x1d0>)
 800233a:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800233e:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002340:	4b1e      	ldr	r3, [pc, #120]	; (80023bc <HAL_UART_MspInit+0x1d0>)
 8002342:	2200      	movs	r2, #0
 8002344:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002346:	4b1d      	ldr	r3, [pc, #116]	; (80023bc <HAL_UART_MspInit+0x1d0>)
 8002348:	2200      	movs	r2, #0
 800234a:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 800234c:	4b1b      	ldr	r3, [pc, #108]	; (80023bc <HAL_UART_MspInit+0x1d0>)
 800234e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002352:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002354:	4b19      	ldr	r3, [pc, #100]	; (80023bc <HAL_UART_MspInit+0x1d0>)
 8002356:	2200      	movs	r2, #0
 8002358:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800235a:	4b18      	ldr	r3, [pc, #96]	; (80023bc <HAL_UART_MspInit+0x1d0>)
 800235c:	2200      	movs	r2, #0
 800235e:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8002360:	4b16      	ldr	r3, [pc, #88]	; (80023bc <HAL_UART_MspInit+0x1d0>)
 8002362:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002366:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002368:	4b14      	ldr	r3, [pc, #80]	; (80023bc <HAL_UART_MspInit+0x1d0>)
 800236a:	2200      	movs	r2, #0
 800236c:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800236e:	4b13      	ldr	r3, [pc, #76]	; (80023bc <HAL_UART_MspInit+0x1d0>)
 8002370:	2200      	movs	r2, #0
 8002372:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8002374:	4811      	ldr	r0, [pc, #68]	; (80023bc <HAL_UART_MspInit+0x1d0>)
 8002376:	f001 f93f 	bl	80035f8 <HAL_DMA_Init>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d001      	beq.n	8002384 <HAL_UART_MspInit+0x198>
      Error_Handler();
 8002380:	f7ff fe3e 	bl	8002000 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	4a0d      	ldr	r2, [pc, #52]	; (80023bc <HAL_UART_MspInit+0x1d0>)
 8002388:	639a      	str	r2, [r3, #56]	; 0x38
 800238a:	4a0c      	ldr	r2, [pc, #48]	; (80023bc <HAL_UART_MspInit+0x1d0>)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8002390:	2200      	movs	r2, #0
 8002392:	2100      	movs	r1, #0
 8002394:	2047      	movs	r0, #71	; 0x47
 8002396:	f001 f8f8 	bl	800358a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800239a:	2047      	movs	r0, #71	; 0x47
 800239c:	f001 f911 	bl	80035c2 <HAL_NVIC_EnableIRQ>
}
 80023a0:	bf00      	nop
 80023a2:	3738      	adds	r7, #56	; 0x38
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	40011000 	.word	0x40011000
 80023ac:	40023800 	.word	0x40023800
 80023b0:	40020000 	.word	0x40020000
 80023b4:	40004400 	.word	0x40004400
 80023b8:	40011400 	.word	0x40011400
 80023bc:	200003e4 	.word	0x200003e4
 80023c0:	40026428 	.word	0x40026428

080023c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023c8:	e7fe      	b.n	80023c8 <NMI_Handler+0x4>

080023ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023ca:	b480      	push	{r7}
 80023cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023ce:	e7fe      	b.n	80023ce <HardFault_Handler+0x4>

080023d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023d4:	e7fe      	b.n	80023d4 <MemManage_Handler+0x4>

080023d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023d6:	b480      	push	{r7}
 80023d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023da:	e7fe      	b.n	80023da <BusFault_Handler+0x4>

080023dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023e0:	e7fe      	b.n	80023e0 <UsageFault_Handler+0x4>

080023e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023e2:	b480      	push	{r7}
 80023e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023e6:	bf00      	nop
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023f4:	bf00      	nop
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr

080023fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023fe:	b480      	push	{r7}
 8002400:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002402:	bf00      	nop
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr

0800240c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002410:	f000 ff9c 	bl	800334c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002414:	bf00      	nop
 8002416:	bd80      	pop	{r7, pc}

08002418 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 800241c:	4802      	ldr	r0, [pc, #8]	; (8002428 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800241e:	f005 fbd4 	bl	8007bca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002422:	bf00      	nop
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	200002d0 	.word	0x200002d0

0800242c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002430:	4802      	ldr	r0, [pc, #8]	; (800243c <I2C1_EV_IRQHandler+0x10>)
 8002432:	f002 fb25 	bl	8004a80 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002436:	bf00      	nop
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	20000224 	.word	0x20000224

08002440 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002444:	4802      	ldr	r0, [pc, #8]	; (8002450 <I2C1_ER_IRQHandler+0x10>)
 8002446:	f002 fc8c 	bl	8004d62 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800244a:	bf00      	nop
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	20000224 	.word	0x20000224

08002454 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002458:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800245c:	f001 fe94 	bl	8004188 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002460:	bf00      	nop
 8002462:	bd80      	pop	{r7, pc}

08002464 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8002468:	4802      	ldr	r0, [pc, #8]	; (8002474 <DMA2_Stream1_IRQHandler+0x10>)
 800246a:	f001 fa5d 	bl	8003928 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800246e:	bf00      	nop
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	200003e4 	.word	0x200003e4

08002478 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800247c:	4802      	ldr	r0, [pc, #8]	; (8002488 <USART6_IRQHandler+0x10>)
 800247e:	f005 fe79 	bl	8008174 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002482:	bf00      	nop
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	200003a0 	.word	0x200003a0

0800248c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0
	return 1;
 8002490:	2301      	movs	r3, #1
}
 8002492:	4618      	mov	r0, r3
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr

0800249c <_kill>:

int _kill(int pid, int sig)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80024a6:	f006 ff57 	bl	8009358 <__errno>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2216      	movs	r2, #22
 80024ae:	601a      	str	r2, [r3, #0]
	return -1;
 80024b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3708      	adds	r7, #8
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}

080024bc <_exit>:

void _exit (int status)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80024c4:	f04f 31ff 	mov.w	r1, #4294967295
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	f7ff ffe7 	bl	800249c <_kill>
	while (1) {}		/* Make sure we hang here */
 80024ce:	e7fe      	b.n	80024ce <_exit+0x12>

080024d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b086      	sub	sp, #24
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	60f8      	str	r0, [r7, #12]
 80024d8:	60b9      	str	r1, [r7, #8]
 80024da:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024dc:	2300      	movs	r3, #0
 80024de:	617b      	str	r3, [r7, #20]
 80024e0:	e00a      	b.n	80024f8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80024e2:	f3af 8000 	nop.w
 80024e6:	4601      	mov	r1, r0
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	1c5a      	adds	r2, r3, #1
 80024ec:	60ba      	str	r2, [r7, #8]
 80024ee:	b2ca      	uxtb	r2, r1
 80024f0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	3301      	adds	r3, #1
 80024f6:	617b      	str	r3, [r7, #20]
 80024f8:	697a      	ldr	r2, [r7, #20]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	dbf0      	blt.n	80024e2 <_read+0x12>
	}

return len;
 8002500:	687b      	ldr	r3, [r7, #4]
}
 8002502:	4618      	mov	r0, r3
 8002504:	3718      	adds	r7, #24
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}

0800250a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800250a:	b580      	push	{r7, lr}
 800250c:	b086      	sub	sp, #24
 800250e:	af00      	add	r7, sp, #0
 8002510:	60f8      	str	r0, [r7, #12]
 8002512:	60b9      	str	r1, [r7, #8]
 8002514:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002516:	2300      	movs	r3, #0
 8002518:	617b      	str	r3, [r7, #20]
 800251a:	e009      	b.n	8002530 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	1c5a      	adds	r2, r3, #1
 8002520:	60ba      	str	r2, [r7, #8]
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	4618      	mov	r0, r3
 8002526:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	3301      	adds	r3, #1
 800252e:	617b      	str	r3, [r7, #20]
 8002530:	697a      	ldr	r2, [r7, #20]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	429a      	cmp	r2, r3
 8002536:	dbf1      	blt.n	800251c <_write+0x12>
	}
	return len;
 8002538:	687b      	ldr	r3, [r7, #4]
}
 800253a:	4618      	mov	r0, r3
 800253c:	3718      	adds	r7, #24
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}

08002542 <_close>:

int _close(int file)
{
 8002542:	b480      	push	{r7}
 8002544:	b083      	sub	sp, #12
 8002546:	af00      	add	r7, sp, #0
 8002548:	6078      	str	r0, [r7, #4]
	return -1;
 800254a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800254e:	4618      	mov	r0, r3
 8002550:	370c      	adds	r7, #12
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr

0800255a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800255a:	b480      	push	{r7}
 800255c:	b083      	sub	sp, #12
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
 8002562:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800256a:	605a      	str	r2, [r3, #4]
	return 0;
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	370c      	adds	r7, #12
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr

0800257a <_isatty>:

int _isatty(int file)
{
 800257a:	b480      	push	{r7}
 800257c:	b083      	sub	sp, #12
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
	return 1;
 8002582:	2301      	movs	r3, #1
}
 8002584:	4618      	mov	r0, r3
 8002586:	370c      	adds	r7, #12
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002590:	b480      	push	{r7}
 8002592:	b085      	sub	sp, #20
 8002594:	af00      	add	r7, sp, #0
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	60b9      	str	r1, [r7, #8]
 800259a:	607a      	str	r2, [r7, #4]
	return 0;
 800259c:	2300      	movs	r3, #0
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3714      	adds	r7, #20
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
	...

080025ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b086      	sub	sp, #24
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025b4:	4a14      	ldr	r2, [pc, #80]	; (8002608 <_sbrk+0x5c>)
 80025b6:	4b15      	ldr	r3, [pc, #84]	; (800260c <_sbrk+0x60>)
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025c0:	4b13      	ldr	r3, [pc, #76]	; (8002610 <_sbrk+0x64>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d102      	bne.n	80025ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025c8:	4b11      	ldr	r3, [pc, #68]	; (8002610 <_sbrk+0x64>)
 80025ca:	4a12      	ldr	r2, [pc, #72]	; (8002614 <_sbrk+0x68>)
 80025cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025ce:	4b10      	ldr	r3, [pc, #64]	; (8002610 <_sbrk+0x64>)
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4413      	add	r3, r2
 80025d6:	693a      	ldr	r2, [r7, #16]
 80025d8:	429a      	cmp	r2, r3
 80025da:	d207      	bcs.n	80025ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025dc:	f006 febc 	bl	8009358 <__errno>
 80025e0:	4603      	mov	r3, r0
 80025e2:	220c      	movs	r2, #12
 80025e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025e6:	f04f 33ff 	mov.w	r3, #4294967295
 80025ea:	e009      	b.n	8002600 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025ec:	4b08      	ldr	r3, [pc, #32]	; (8002610 <_sbrk+0x64>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025f2:	4b07      	ldr	r3, [pc, #28]	; (8002610 <_sbrk+0x64>)
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4413      	add	r3, r2
 80025fa:	4a05      	ldr	r2, [pc, #20]	; (8002610 <_sbrk+0x64>)
 80025fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025fe:	68fb      	ldr	r3, [r7, #12]
}
 8002600:	4618      	mov	r0, r3
 8002602:	3718      	adds	r7, #24
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	20020000 	.word	0x20020000
 800260c:	00000400 	.word	0x00000400
 8002610:	20003784 	.word	0x20003784
 8002614:	200037a0 	.word	0x200037a0

08002618 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800261c:	4b06      	ldr	r3, [pc, #24]	; (8002638 <SystemInit+0x20>)
 800261e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002622:	4a05      	ldr	r2, [pc, #20]	; (8002638 <SystemInit+0x20>)
 8002624:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002628:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800262c:	bf00      	nop
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop
 8002638:	e000ed00 	.word	0xe000ed00

0800263c <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
  LCD_IO_Bl_OnOff(1);
 8002640:	2001      	movs	r0, #1
 8002642:	f000 fcf0 	bl	8003026 <LCD_IO_Bl_OnOff>
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_SLPOUT);    // Exit Sleep
 8002646:	2011      	movs	r0, #17
 8002648:	f000 fd74 	bl	8003134 <LCD_IO_WriteCmd8>
  ILI9341_LCDMUTEX_POP();
}
 800264c:	bf00      	nop
 800264e:	bd80      	pop	{r7, pc}

08002650 <ili9341_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8002650:	b480      	push	{r7}
 8002652:	af00      	add	r7, sp, #0
  return ILI9341_SIZE_X;
 8002654:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8002658:	4618      	mov	r0, r3
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr

08002662 <ili9341_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8002662:	b480      	push	{r7}
 8002664:	af00      	add	r7, sp, #0
  return ILI9341_SIZE_Y;
 8002666:	23f0      	movs	r3, #240	; 0xf0
}
 8002668:	4618      	mov	r0, r3
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr
	...

08002674 <ili9341_Init>:
/* SPI or paralell mode */
#if ILI9341_INTERFACE_MODE == 1

//-----------------------------------------------------------------------------
void ili9341_Init(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b082      	sub	sp, #8
 8002678:	af02      	add	r7, sp, #8
  if((Is_ili9341_Initialized & ILI9341_LCD_INITIALIZED) == 0)
 800267a:	4b52      	ldr	r3, [pc, #328]	; (80027c4 <ili9341_Init+0x150>)
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	f003 0301 	and.w	r3, r3, #1
 8002682:	2b00      	cmp	r3, #0
 8002684:	d115      	bne.n	80026b2 <ili9341_Init+0x3e>
  {
    Is_ili9341_Initialized |= ILI9341_LCD_INITIALIZED;
 8002686:	4b4f      	ldr	r3, [pc, #316]	; (80027c4 <ili9341_Init+0x150>)
 8002688:	781b      	ldrb	r3, [r3, #0]
 800268a:	f043 0301 	orr.w	r3, r3, #1
 800268e:	b2da      	uxtb	r2, r3
 8002690:	4b4c      	ldr	r3, [pc, #304]	; (80027c4 <ili9341_Init+0x150>)
 8002692:	701a      	strb	r2, [r3, #0]
    if((Is_ili9341_Initialized & ILI9341_IO_INITIALIZED) == 0)
 8002694:	4b4b      	ldr	r3, [pc, #300]	; (80027c4 <ili9341_Init+0x150>)
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	f003 0302 	and.w	r3, r3, #2
 800269c:	2b00      	cmp	r3, #0
 800269e:	d101      	bne.n	80026a4 <ili9341_Init+0x30>
      LCD_IO_Init();
 80026a0:	f000 fccc 	bl	800303c <LCD_IO_Init>
    Is_ili9341_Initialized |= ILI9341_IO_INITIALIZED;
 80026a4:	4b47      	ldr	r3, [pc, #284]	; (80027c4 <ili9341_Init+0x150>)
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	f043 0302 	orr.w	r3, r3, #2
 80026ac:	b2da      	uxtb	r2, r3
 80026ae:	4b45      	ldr	r3, [pc, #276]	; (80027c4 <ili9341_Init+0x150>)
 80026b0:	701a      	strb	r2, [r3, #0]
  }

  LCD_Delay(10);
 80026b2:	200a      	movs	r0, #10
 80026b4:	f000 fcac 	bl	8003010 <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9341_SWRESET);
 80026b8:	2001      	movs	r0, #1
 80026ba:	f000 fd3b 	bl	8003134 <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 80026be:	200a      	movs	r0, #10
 80026c0:	f000 fca6 	bl	8003010 <LCD_Delay>

  LCD_IO_WriteCmd8MultipleData8(0xEF, (uint8_t *)"\x03\x80\x02", 3);
 80026c4:	2203      	movs	r2, #3
 80026c6:	4940      	ldr	r1, [pc, #256]	; (80027c8 <ili9341_Init+0x154>)
 80026c8:	20ef      	movs	r0, #239	; 0xef
 80026ca:	f000 fda1 	bl	8003210 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xCF, (uint8_t *)"\x00\xC1\x30", 3);
 80026ce:	2203      	movs	r2, #3
 80026d0:	493e      	ldr	r1, [pc, #248]	; (80027cc <ili9341_Init+0x158>)
 80026d2:	20cf      	movs	r0, #207	; 0xcf
 80026d4:	f000 fd9c 	bl	8003210 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xED, (uint8_t *)"\x64\x03\x12\x81", 4);
 80026d8:	2204      	movs	r2, #4
 80026da:	493d      	ldr	r1, [pc, #244]	; (80027d0 <ili9341_Init+0x15c>)
 80026dc:	20ed      	movs	r0, #237	; 0xed
 80026de:	f000 fd97 	bl	8003210 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xE8, (uint8_t *)"\x85\x00\x78", 3);
 80026e2:	2203      	movs	r2, #3
 80026e4:	493b      	ldr	r1, [pc, #236]	; (80027d4 <ili9341_Init+0x160>)
 80026e6:	20e8      	movs	r0, #232	; 0xe8
 80026e8:	f000 fd92 	bl	8003210 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xCB, (uint8_t *)"\x39\x2C\x00\x34\x02", 5);
 80026ec:	2205      	movs	r2, #5
 80026ee:	493a      	ldr	r1, [pc, #232]	; (80027d8 <ili9341_Init+0x164>)
 80026f0:	20cb      	movs	r0, #203	; 0xcb
 80026f2:	f000 fd8d 	bl	8003210 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xF7, (uint8_t *)"\x20", 1);
 80026f6:	2201      	movs	r2, #1
 80026f8:	4938      	ldr	r1, [pc, #224]	; (80027dc <ili9341_Init+0x168>)
 80026fa:	20f7      	movs	r0, #247	; 0xf7
 80026fc:	f000 fd88 	bl	8003210 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xEA, (uint8_t *)"\x00\x00", 2);
 8002700:	2202      	movs	r2, #2
 8002702:	4937      	ldr	r1, [pc, #220]	; (80027e0 <ili9341_Init+0x16c>)
 8002704:	20ea      	movs	r0, #234	; 0xea
 8002706:	f000 fd83 	bl	8003210 <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 1 (Vreg1out, Verg2out)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PWCTR1, (uint8_t *)"\x23", 1);
 800270a:	2201      	movs	r2, #1
 800270c:	4935      	ldr	r1, [pc, #212]	; (80027e4 <ili9341_Init+0x170>)
 800270e:	20c0      	movs	r0, #192	; 0xc0
 8002710:	f000 fd7e 	bl	8003210 <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 2 (VGH,VGL)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PWCTR2, (uint8_t *)"\x10", 1);
 8002714:	2201      	movs	r2, #1
 8002716:	4934      	ldr	r1, [pc, #208]	; (80027e8 <ili9341_Init+0x174>)
 8002718:	20c1      	movs	r0, #193	; 0xc1
 800271a:	f000 fd79 	bl	8003210 <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 3 (Vcom)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_VMCTR1, (uint8_t *)"\x3E\x28", 2);
 800271e:	2202      	movs	r2, #2
 8002720:	4932      	ldr	r1, [pc, #200]	; (80027ec <ili9341_Init+0x178>)
 8002722:	20c5      	movs	r0, #197	; 0xc5
 8002724:	f000 fd74 	bl	8003210 <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 3 (Vcom)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_VMCTR2, (uint8_t *)"\x86", 1);
 8002728:	2201      	movs	r2, #1
 800272a:	4931      	ldr	r1, [pc, #196]	; (80027f0 <ili9341_Init+0x17c>)
 800272c:	20c7      	movs	r0, #199	; 0xc7
 800272e:	f000 fd6f 	bl	8003210 <LCD_IO_WriteCmd8MultipleData8>

  // Vertical scroll zero
  LCD_IO_WriteCmd8MultipleData8(ILI9341_VSCRSADD, (uint8_t *)"\x00", 1);
 8002732:	2201      	movs	r2, #1
 8002734:	492f      	ldr	r1, [pc, #188]	; (80027f4 <ili9341_Init+0x180>)
 8002736:	2037      	movs	r0, #55	; 0x37
 8002738:	f000 fd6a 	bl	8003210 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PIXFMT, (uint8_t *)"\x55", 1);
 800273c:	2201      	movs	r2, #1
 800273e:	492e      	ldr	r1, [pc, #184]	; (80027f8 <ili9341_Init+0x184>)
 8002740:	203a      	movs	r0, #58	; 0x3a
 8002742:	f000 fd65 	bl	8003210 <LCD_IO_WriteCmd8MultipleData8>

  // LCD_IO_WriteCmd8MultipleData8(0xF6, (uint8_t *)"\x01\x00\x06", 3);

  LCD_IO_WriteCmd8MultipleData8(ILI9341_FRMCTR1, (uint8_t *)"\x00\x18", 2);
 8002746:	2202      	movs	r2, #2
 8002748:	492c      	ldr	r1, [pc, #176]	; (80027fc <ili9341_Init+0x188>)
 800274a:	20b1      	movs	r0, #177	; 0xb1
 800274c:	f000 fd60 	bl	8003210 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_DFUNCTR, (uint8_t *)"\x08\x82\x27", 3);  // Display Function Control
 8002750:	2203      	movs	r2, #3
 8002752:	492b      	ldr	r1, [pc, #172]	; (8002800 <ili9341_Init+0x18c>)
 8002754:	20b6      	movs	r0, #182	; 0xb6
 8002756:	f000 fd5b 	bl	8003210 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xF2, (uint8_t *)"\x00", 1);            // 3Gamma Function Disable
 800275a:	2201      	movs	r2, #1
 800275c:	4925      	ldr	r1, [pc, #148]	; (80027f4 <ili9341_Init+0x180>)
 800275e:	20f2      	movs	r0, #242	; 0xf2
 8002760:	f000 fd56 	bl	8003210 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_GAMMASET, (uint8_t *)"\x01", 1);// Gamma curve selected
 8002764:	2201      	movs	r2, #1
 8002766:	4927      	ldr	r1, [pc, #156]	; (8002804 <ili9341_Init+0x190>)
 8002768:	2026      	movs	r0, #38	; 0x26
 800276a:	f000 fd51 	bl	8003210 <LCD_IO_WriteCmd8MultipleData8>

  // positive gamma control
  LCD_IO_WriteCmd8MultipleData8(ILI9341_GMCTRP1, (uint8_t *)"\x0F\x31\x2B\x0C\x0E\x08\x4E\xF1\x37\x07\x10\x03\x0E\x09\x00", 15);
 800276e:	220f      	movs	r2, #15
 8002770:	4925      	ldr	r1, [pc, #148]	; (8002808 <ili9341_Init+0x194>)
 8002772:	20e0      	movs	r0, #224	; 0xe0
 8002774:	f000 fd4c 	bl	8003210 <LCD_IO_WriteCmd8MultipleData8>

  // negative gamma control
  LCD_IO_WriteCmd8MultipleData8(ILI9341_GMCTRN1, (uint8_t *)"\x00\x0E\x14\x03\x11\x07\x31\xC1\x48\x08\x0F\x0C\x31\x36\x0F", 15);
 8002778:	220f      	movs	r2, #15
 800277a:	4924      	ldr	r1, [pc, #144]	; (800280c <ili9341_Init+0x198>)
 800277c:	20e1      	movs	r0, #225	; 0xe1
 800277e:	f000 fd47 	bl	8003210 <LCD_IO_WriteCmd8MultipleData8>

  LCD_IO_WriteCmd8(ILI9341_MADCTL); LCD_IO_WriteData8(ILI9341_MAD_DATA_RIGHT_THEN_DOWN);
 8002782:	2036      	movs	r0, #54	; 0x36
 8002784:	f000 fcd6 	bl	8003134 <LCD_IO_WriteCmd8>
 8002788:	20e8      	movs	r0, #232	; 0xe8
 800278a:	f000 fcf1 	bl	8003170 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_SLPOUT);    // Exit Sleep
 800278e:	2011      	movs	r0, #17
 8002790:	f000 fcd0 	bl	8003134 <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 8002794:	200a      	movs	r0, #10
 8002796:	f000 fc3b 	bl	8003010 <LCD_Delay>

  #if ILI9341_INITCLEAR == 1
  ili9341_FillRect(0, 0, ILI9341_SIZE_X, ILI9341_SIZE_Y, 0x0000);
 800279a:	2300      	movs	r3, #0
 800279c:	9300      	str	r3, [sp, #0]
 800279e:	23f0      	movs	r3, #240	; 0xf0
 80027a0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80027a4:	2100      	movs	r1, #0
 80027a6:	2000      	movs	r0, #0
 80027a8:	f000 f87c 	bl	80028a4 <ili9341_FillRect>
  LCD_Delay(10);
 80027ac:	200a      	movs	r0, #10
 80027ae:	f000 fc2f 	bl	8003010 <LCD_Delay>
  #endif
  
  LCD_IO_WriteCmd8(ILI9341_DISPON);    // Display on
 80027b2:	2029      	movs	r0, #41	; 0x29
 80027b4:	f000 fcbe 	bl	8003134 <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 80027b8:	200a      	movs	r0, #10
 80027ba:	f000 fc29 	bl	8003010 <LCD_Delay>
}
 80027be:	bf00      	nop
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	20003788 	.word	0x20003788
 80027c8:	0800c31c 	.word	0x0800c31c
 80027cc:	0800c320 	.word	0x0800c320
 80027d0:	0800c324 	.word	0x0800c324
 80027d4:	0800c32c 	.word	0x0800c32c
 80027d8:	0800c330 	.word	0x0800c330
 80027dc:	0800c338 	.word	0x0800c338
 80027e0:	0800c33c 	.word	0x0800c33c
 80027e4:	0800c340 	.word	0x0800c340
 80027e8:	0800c344 	.word	0x0800c344
 80027ec:	0800c348 	.word	0x0800c348
 80027f0:	0800c34c 	.word	0x0800c34c
 80027f4:	0800c350 	.word	0x0800c350
 80027f8:	0800c354 	.word	0x0800c354
 80027fc:	0800c358 	.word	0x0800c358
 8002800:	0800c35c 	.word	0x0800c35c
 8002804:	0800c360 	.word	0x0800c360
 8002808:	0800c364 	.word	0x0800c364
 800280c:	0800c374 	.word	0x0800c374

08002810 <ili9341_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color
  * @retval None
  */
void ili9341_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b082      	sub	sp, #8
 8002814:	af00      	add	r7, sp, #0
 8002816:	4603      	mov	r3, r0
 8002818:	80fb      	strh	r3, [r7, #6]
 800281a:	460b      	mov	r3, r1
 800281c:	80bb      	strh	r3, [r7, #4]
 800281e:	4613      	mov	r3, r2
 8002820:	807b      	strh	r3, [r7, #2]
  ILI9341_LCDMUTEX_PUSH();
  ILI9341_SETCURSOR(Xpos, Ypos);
 8002822:	202a      	movs	r0, #42	; 0x2a
 8002824:	f000 fc86 	bl	8003134 <LCD_IO_WriteCmd8>
 8002828:	88fb      	ldrh	r3, [r7, #6]
 800282a:	0a1b      	lsrs	r3, r3, #8
 800282c:	b29b      	uxth	r3, r3
 800282e:	b2db      	uxtb	r3, r3
 8002830:	4618      	mov	r0, r3
 8002832:	f000 fc9d 	bl	8003170 <LCD_IO_WriteData8>
 8002836:	88fb      	ldrh	r3, [r7, #6]
 8002838:	b2db      	uxtb	r3, r3
 800283a:	4618      	mov	r0, r3
 800283c:	f000 fc98 	bl	8003170 <LCD_IO_WriteData8>
 8002840:	88fb      	ldrh	r3, [r7, #6]
 8002842:	0a1b      	lsrs	r3, r3, #8
 8002844:	b29b      	uxth	r3, r3
 8002846:	b2db      	uxtb	r3, r3
 8002848:	4618      	mov	r0, r3
 800284a:	f000 fc91 	bl	8003170 <LCD_IO_WriteData8>
 800284e:	88fb      	ldrh	r3, [r7, #6]
 8002850:	b2db      	uxtb	r3, r3
 8002852:	4618      	mov	r0, r3
 8002854:	f000 fc8c 	bl	8003170 <LCD_IO_WriteData8>
 8002858:	202b      	movs	r0, #43	; 0x2b
 800285a:	f000 fc6b 	bl	8003134 <LCD_IO_WriteCmd8>
 800285e:	88bb      	ldrh	r3, [r7, #4]
 8002860:	0a1b      	lsrs	r3, r3, #8
 8002862:	b29b      	uxth	r3, r3
 8002864:	b2db      	uxtb	r3, r3
 8002866:	4618      	mov	r0, r3
 8002868:	f000 fc82 	bl	8003170 <LCD_IO_WriteData8>
 800286c:	88bb      	ldrh	r3, [r7, #4]
 800286e:	b2db      	uxtb	r3, r3
 8002870:	4618      	mov	r0, r3
 8002872:	f000 fc7d 	bl	8003170 <LCD_IO_WriteData8>
 8002876:	88bb      	ldrh	r3, [r7, #4]
 8002878:	0a1b      	lsrs	r3, r3, #8
 800287a:	b29b      	uxth	r3, r3
 800287c:	b2db      	uxtb	r3, r3
 800287e:	4618      	mov	r0, r3
 8002880:	f000 fc76 	bl	8003170 <LCD_IO_WriteData8>
 8002884:	88bb      	ldrh	r3, [r7, #4]
 8002886:	b2db      	uxtb	r3, r3
 8002888:	4618      	mov	r0, r3
 800288a:	f000 fc71 	bl	8003170 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_RAMWR); LCD_IO_WriteData16(RGBCode);
 800288e:	202c      	movs	r0, #44	; 0x2c
 8002890:	f000 fc50 	bl	8003134 <LCD_IO_WriteCmd8>
 8002894:	887b      	ldrh	r3, [r7, #2]
 8002896:	4618      	mov	r0, r3
 8002898:	f000 fc80 	bl	800319c <LCD_IO_WriteData16>
  ILI9341_LCDMUTEX_POP();
}
 800289c:	bf00      	nop
 800289e:	3708      	adds	r7, #8
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}

080028a4 <ili9341_FillRect>:
  * @param  Ysize:    specifies the Y size
  * @param  RGBCode:  specifies the RGB color
  * @retval None
  */
void ili9341_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t RGBCode)
{
 80028a4:	b590      	push	{r4, r7, lr}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	4604      	mov	r4, r0
 80028ac:	4608      	mov	r0, r1
 80028ae:	4611      	mov	r1, r2
 80028b0:	461a      	mov	r2, r3
 80028b2:	4623      	mov	r3, r4
 80028b4:	80fb      	strh	r3, [r7, #6]
 80028b6:	4603      	mov	r3, r0
 80028b8:	80bb      	strh	r3, [r7, #4]
 80028ba:	460b      	mov	r3, r1
 80028bc:	807b      	strh	r3, [r7, #2]
 80028be:	4613      	mov	r3, r2
 80028c0:	803b      	strh	r3, [r7, #0]
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Xsize - 1);
 80028c2:	202a      	movs	r0, #42	; 0x2a
 80028c4:	f000 fc36 	bl	8003134 <LCD_IO_WriteCmd8>
 80028c8:	88fb      	ldrh	r3, [r7, #6]
 80028ca:	0a1b      	lsrs	r3, r3, #8
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	4618      	mov	r0, r3
 80028d2:	f000 fc4d 	bl	8003170 <LCD_IO_WriteData8>
 80028d6:	88fb      	ldrh	r3, [r7, #6]
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	4618      	mov	r0, r3
 80028dc:	f000 fc48 	bl	8003170 <LCD_IO_WriteData8>
 80028e0:	88fa      	ldrh	r2, [r7, #6]
 80028e2:	887b      	ldrh	r3, [r7, #2]
 80028e4:	4413      	add	r3, r2
 80028e6:	3b01      	subs	r3, #1
 80028e8:	121b      	asrs	r3, r3, #8
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	4618      	mov	r0, r3
 80028ee:	f000 fc3f 	bl	8003170 <LCD_IO_WriteData8>
 80028f2:	88fb      	ldrh	r3, [r7, #6]
 80028f4:	b2da      	uxtb	r2, r3
 80028f6:	887b      	ldrh	r3, [r7, #2]
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	4413      	add	r3, r2
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	3b01      	subs	r3, #1
 8002900:	b2db      	uxtb	r3, r3
 8002902:	4618      	mov	r0, r3
 8002904:	f000 fc34 	bl	8003170 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Ysize - 1);
 8002908:	202b      	movs	r0, #43	; 0x2b
 800290a:	f000 fc13 	bl	8003134 <LCD_IO_WriteCmd8>
 800290e:	88bb      	ldrh	r3, [r7, #4]
 8002910:	0a1b      	lsrs	r3, r3, #8
 8002912:	b29b      	uxth	r3, r3
 8002914:	b2db      	uxtb	r3, r3
 8002916:	4618      	mov	r0, r3
 8002918:	f000 fc2a 	bl	8003170 <LCD_IO_WriteData8>
 800291c:	88bb      	ldrh	r3, [r7, #4]
 800291e:	b2db      	uxtb	r3, r3
 8002920:	4618      	mov	r0, r3
 8002922:	f000 fc25 	bl	8003170 <LCD_IO_WriteData8>
 8002926:	88ba      	ldrh	r2, [r7, #4]
 8002928:	883b      	ldrh	r3, [r7, #0]
 800292a:	4413      	add	r3, r2
 800292c:	3b01      	subs	r3, #1
 800292e:	121b      	asrs	r3, r3, #8
 8002930:	b2db      	uxtb	r3, r3
 8002932:	4618      	mov	r0, r3
 8002934:	f000 fc1c 	bl	8003170 <LCD_IO_WriteData8>
 8002938:	88bb      	ldrh	r3, [r7, #4]
 800293a:	b2da      	uxtb	r2, r3
 800293c:	883b      	ldrh	r3, [r7, #0]
 800293e:	b2db      	uxtb	r3, r3
 8002940:	4413      	add	r3, r2
 8002942:	b2db      	uxtb	r3, r3
 8002944:	3b01      	subs	r3, #1
 8002946:	b2db      	uxtb	r3, r3
 8002948:	4618      	mov	r0, r3
 800294a:	f000 fc11 	bl	8003170 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8DataFill16(ILI9341_RAMWR, RGBCode, Xsize * Ysize);
 800294e:	887b      	ldrh	r3, [r7, #2]
 8002950:	883a      	ldrh	r2, [r7, #0]
 8002952:	fb02 f303 	mul.w	r3, r2, r3
 8002956:	461a      	mov	r2, r3
 8002958:	8b3b      	ldrh	r3, [r7, #24]
 800295a:	4619      	mov	r1, r3
 800295c:	202c      	movs	r0, #44	; 0x2c
 800295e:	f000 fc33 	bl	80031c8 <LCD_IO_WriteCmd8DataFill16>
  ILI9341_LCDMUTEX_POP();
}
 8002962:	bf00      	nop
 8002964:	370c      	adds	r7, #12
 8002966:	46bd      	mov	sp, r7
 8002968:	bd90      	pop	{r4, r7, pc}

0800296a <ili9341_WriteChar>:
  * @param  fonto: font select (from font.h)
  * @param  RGB_Coder: Text Color
  * @param  RGB_bg: Char background Color
  * @retval None
  */
void ili9341_WriteChar(uint16_t Xpo, uint16_t Ypo, const char *chr,sFONT fonto, uint16_t RGB_Coder, uint16_t RGB_bg){
 800296a:	b082      	sub	sp, #8
 800296c:	b580      	push	{r7, lr}
 800296e:	b08a      	sub	sp, #40	; 0x28
 8002970:	af00      	add	r7, sp, #0
 8002972:	603a      	str	r2, [r7, #0]
 8002974:	637b      	str	r3, [r7, #52]	; 0x34
 8002976:	4603      	mov	r3, r0
 8002978:	80fb      	strh	r3, [r7, #6]
 800297a:	460b      	mov	r3, r1
 800297c:	80bb      	strh	r3, [r7, #4]
	/*ex
	 * ili9341_WriteChar(140, 50, "E", Font24, cl_ORANGE, cl_BLACK);
	 * */
	//// stored font data
	uint32_t hop32 = 0;
 800297e:	2300      	movs	r3, #0
 8002980:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t b8[4] = {0};
 8002982:	2300      	movs	r3, #0
 8002984:	60fb      	str	r3, [r7, #12]
	 * c = i * rowbox -> jump to next column in next i rowloop
	 * k => jump to next row in that column
	 * */

	//// find num of bit rows per jump in fonts.c
	int rowbox = ceilf((float)(fonto.Width) / 8);
 8002986:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002988:	ee07 3a90 	vmov	s15, r3
 800298c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002990:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8002994:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002998:	eeb0 0a47 	vmov.f32	s0, s14
 800299c:	f009 fc22 	bl	800c1e4 <ceilf>
 80029a0:	eef0 7a40 	vmov.f32	s15, s0
 80029a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80029a8:	ee17 3a90 	vmov	r3, s15
 80029ac:	617b      	str	r3, [r7, #20]

	//// choose MSB check pos for each font size
	//// 0x80 , 0x8000 , 0x 800000
	uint32_t clif_msb = 0x80 << (8 * (rowbox - 1));
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	3b01      	subs	r3, #1
 80029b2:	00db      	lsls	r3, r3, #3
 80029b4:	2280      	movs	r2, #128	; 0x80
 80029b6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ba:	613b      	str	r3, [r7, #16]

	//// -32 to offset sync ASCII Table start " " at 32
	//// double for loop as one char table
	for(int i = 0; i < fonto.Height; i++){
 80029bc:	2300      	movs	r3, #0
 80029be:	623b      	str	r3, [r7, #32]
 80029c0:	e060      	b.n	8002a84 <ili9341_WriteChar+0x11a>
		hop32 = 0;
 80029c2:	2300      	movs	r3, #0
 80029c4:	627b      	str	r3, [r7, #36]	; 0x24
		for(int k = 0;k < rowbox;k++){
 80029c6:	2300      	movs	r3, #0
 80029c8:	61fb      	str	r3, [r7, #28]
 80029ca:	e024      	b.n	8002a16 <ili9341_WriteChar+0xac>
			b8[k] = fonto.table[((int)(*chr - 32) * fonto.Height * rowbox) + (i * rowbox) + k];
 80029cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029ce:	683a      	ldr	r2, [r7, #0]
 80029d0:	7812      	ldrb	r2, [r2, #0]
 80029d2:	3a20      	subs	r2, #32
 80029d4:	8f79      	ldrh	r1, [r7, #58]	; 0x3a
 80029d6:	fb01 f202 	mul.w	r2, r1, r2
 80029da:	6979      	ldr	r1, [r7, #20]
 80029dc:	fb02 f101 	mul.w	r1, r2, r1
 80029e0:	6a3a      	ldr	r2, [r7, #32]
 80029e2:	6978      	ldr	r0, [r7, #20]
 80029e4:	fb00 f202 	mul.w	r2, r0, r2
 80029e8:	4411      	add	r1, r2
 80029ea:	69fa      	ldr	r2, [r7, #28]
 80029ec:	440a      	add	r2, r1
 80029ee:	4413      	add	r3, r2
 80029f0:	7819      	ldrb	r1, [r3, #0]
 80029f2:	f107 020c 	add.w	r2, r7, #12
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	4413      	add	r3, r2
 80029fa:	460a      	mov	r2, r1
 80029fc:	701a      	strb	r2, [r3, #0]
			hop32 = (hop32 << 8) + b8[k];
 80029fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a00:	021b      	lsls	r3, r3, #8
 8002a02:	f107 010c 	add.w	r1, r7, #12
 8002a06:	69fa      	ldr	r2, [r7, #28]
 8002a08:	440a      	add	r2, r1
 8002a0a:	7812      	ldrb	r2, [r2, #0]
 8002a0c:	4413      	add	r3, r2
 8002a0e:	627b      	str	r3, [r7, #36]	; 0x24
		for(int k = 0;k < rowbox;k++){
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	3301      	adds	r3, #1
 8002a14:	61fb      	str	r3, [r7, #28]
 8002a16:	69fa      	ldr	r2, [r7, #28]
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	dbd6      	blt.n	80029cc <ili9341_WriteChar+0x62>
		}

		for(int j = 0; j < fonto.Width; j++){
 8002a1e:	2300      	movs	r3, #0
 8002a20:	61bb      	str	r3, [r7, #24]
 8002a22:	e027      	b.n	8002a74 <ili9341_WriteChar+0x10a>
			//// if valuein fonttable is 1
			if((hop32 << j) & clif_msb){ // buu32.b32
 8002a24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a26:	69bb      	ldr	r3, [r7, #24]
 8002a28:	409a      	lsls	r2, r3
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d00e      	beq.n	8002a50 <ili9341_WriteChar+0xe6>
				ili9341_WritePixel(Xpo + j, Ypo + i, RGB_Coder);
 8002a32:	69bb      	ldr	r3, [r7, #24]
 8002a34:	b29a      	uxth	r2, r3
 8002a36:	88fb      	ldrh	r3, [r7, #6]
 8002a38:	4413      	add	r3, r2
 8002a3a:	b298      	uxth	r0, r3
 8002a3c:	6a3b      	ldr	r3, [r7, #32]
 8002a3e:	b29a      	uxth	r2, r3
 8002a40:	88bb      	ldrh	r3, [r7, #4]
 8002a42:	4413      	add	r3, r2
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8002a48:	4619      	mov	r1, r3
 8002a4a:	f7ff fee1 	bl	8002810 <ili9341_WritePixel>
 8002a4e:	e00e      	b.n	8002a6e <ili9341_WriteChar+0x104>
			}
			//// for background write
			else{
				ili9341_WritePixel(Xpo + j, Ypo + i, RGB_bg);
 8002a50:	69bb      	ldr	r3, [r7, #24]
 8002a52:	b29a      	uxth	r2, r3
 8002a54:	88fb      	ldrh	r3, [r7, #6]
 8002a56:	4413      	add	r3, r2
 8002a58:	b298      	uxth	r0, r3
 8002a5a:	6a3b      	ldr	r3, [r7, #32]
 8002a5c:	b29a      	uxth	r2, r3
 8002a5e:	88bb      	ldrh	r3, [r7, #4]
 8002a60:	4413      	add	r3, r2
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8002a68:	4619      	mov	r1, r3
 8002a6a:	f7ff fed1 	bl	8002810 <ili9341_WritePixel>
		for(int j = 0; j < fonto.Width; j++){
 8002a6e:	69bb      	ldr	r3, [r7, #24]
 8002a70:	3301      	adds	r3, #1
 8002a72:	61bb      	str	r3, [r7, #24]
 8002a74:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002a76:	461a      	mov	r2, r3
 8002a78:	69bb      	ldr	r3, [r7, #24]
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	dbd2      	blt.n	8002a24 <ili9341_WriteChar+0xba>
	for(int i = 0; i < fonto.Height; i++){
 8002a7e:	6a3b      	ldr	r3, [r7, #32]
 8002a80:	3301      	adds	r3, #1
 8002a82:	623b      	str	r3, [r7, #32]
 8002a84:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8002a86:	461a      	mov	r2, r3
 8002a88:	6a3b      	ldr	r3, [r7, #32]
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	db99      	blt.n	80029c2 <ili9341_WriteChar+0x58>
			}

		}
	}
}
 8002a8e:	bf00      	nop
 8002a90:	bf00      	nop
 8002a92:	3728      	adds	r7, #40	; 0x28
 8002a94:	46bd      	mov	sp, r7
 8002a96:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002a9a:	b002      	add	sp, #8
 8002a9c:	4770      	bx	lr

08002a9e <ili9341_WriteString>:
  * @param  fonto: font select (from font.h)
  * @param  RGB_Coder: Text Color
  * @param  RGB_bg: Text background Color
  * @retval None
  */
void ili9341_WriteString(uint16_t Xpo, uint16_t Ypo,const char* strr,sFONT fonto, uint16_t RGB_Coder, uint16_t RGB_bg){
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b088      	sub	sp, #32
 8002aa4:	af04      	add	r7, sp, #16
 8002aa6:	603a      	str	r2, [r7, #0]
 8002aa8:	61fb      	str	r3, [r7, #28]
 8002aaa:	4603      	mov	r3, r0
 8002aac:	80fb      	strh	r3, [r7, #6]
 8002aae:	460b      	mov	r3, r1
 8002ab0:	80bb      	strh	r3, [r7, #4]
	/*ex
	 * ili9341_WriteString(20, 300, "Helios xTerra", Font20, cl_WHITE, cl_BLACK);
	 * */
	uint16_t ili_heigh = ili9341_GetLcdPixelHeight();
 8002ab2:	f7ff fdd6 	bl	8002662 <ili9341_GetLcdPixelHeight>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	81fb      	strh	r3, [r7, #14]
	uint16_t ili_width = ili9341_GetLcdPixelWidth();
 8002aba:	f7ff fdc9 	bl	8002650 <ili9341_GetLcdPixelWidth>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	81bb      	strh	r3, [r7, #12]
	while(*strr){
 8002ac2:	e02c      	b.n	8002b1e <ili9341_WriteString+0x80>
	//// Check screen overflow / new line
		if(Xpo + fonto.Width >= ili_width){
 8002ac4:	88fb      	ldrh	r3, [r7, #6]
 8002ac6:	8c3a      	ldrh	r2, [r7, #32]
 8002ac8:	441a      	add	r2, r3
 8002aca:	89bb      	ldrh	r3, [r7, #12]
 8002acc:	429a      	cmp	r2, r3
 8002ace:	db13      	blt.n	8002af8 <ili9341_WriteString+0x5a>
			Xpo = 0;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	80fb      	strh	r3, [r7, #6]
			Ypo += fonto.Height;
 8002ad4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8002ad6:	88bb      	ldrh	r3, [r7, #4]
 8002ad8:	4413      	add	r3, r2
 8002ada:	80bb      	strh	r3, [r7, #4]

			if(Ypo + fonto.Height >= ili_heigh){
 8002adc:	88bb      	ldrh	r3, [r7, #4]
 8002ade:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8002ae0:	441a      	add	r2, r3
 8002ae2:	89fb      	ldrh	r3, [r7, #14]
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	da1f      	bge.n	8002b28 <ili9341_WriteString+0x8a>
				break;
			}

			if(*strr == ' ') {
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	2b20      	cmp	r3, #32
 8002aee:	d103      	bne.n	8002af8 <ili9341_WriteString+0x5a>
				// skip spaces in the beginning of the new line
				strr++;
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	3301      	adds	r3, #1
 8002af4:	603b      	str	r3, [r7, #0]
				continue;
 8002af6:	e012      	b.n	8002b1e <ili9341_WriteString+0x80>
			}
		}
		//ST7735_WriteChar(x, y, *str, font, color, bgcolor);
		ili9341_WriteChar(Xpo, Ypo, strr, fonto, RGB_Coder, RGB_bg);
 8002af8:	88b9      	ldrh	r1, [r7, #4]
 8002afa:	88f8      	ldrh	r0, [r7, #6]
 8002afc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002afe:	9302      	str	r3, [sp, #8]
 8002b00:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002b02:	9301      	str	r3, [sp, #4]
 8002b04:	6a3b      	ldr	r3, [r7, #32]
 8002b06:	9300      	str	r3, [sp, #0]
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	683a      	ldr	r2, [r7, #0]
 8002b0c:	f7ff ff2d 	bl	800296a <ili9341_WriteChar>
		Xpo += fonto.Width;
 8002b10:	8c3a      	ldrh	r2, [r7, #32]
 8002b12:	88fb      	ldrh	r3, [r7, #6]
 8002b14:	4413      	add	r3, r2
 8002b16:	80fb      	strh	r3, [r7, #6]
		strr++;
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	603b      	str	r3, [r7, #0]
	while(*strr){
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d1ce      	bne.n	8002ac4 <ili9341_WriteString+0x26>
	}
}
 8002b26:	e000      	b.n	8002b2a <ili9341_WriteString+0x8c>
				break;
 8002b28:	bf00      	nop
}
 8002b2a:	bf00      	nop
 8002b2c:	3710      	adds	r7, #16
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002b34:	b002      	add	sp, #8
 8002b36:	4770      	bx	lr

08002b38 <LcdWrite8>:

#define LCD_WRITE_CLK         GPIOX_ODR(LCD_SCK) = 0; LCD_WRITE_DELAY; GPIOX_ODR(LCD_SCK) = 1;
#define LCD_READ_CLK          GPIOX_ODR(LCD_SCK) = 1; GPIOX_ODR(LCD_SCK) = 0; LCD_READ_DELAY;

void LcdWrite8(uint8_t d8)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	4603      	mov	r3, r0
 8002b40:	71fb      	strb	r3, [r7, #7]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 7);
 8002b42:	1dfb      	adds	r3, r7, #7
 8002b44:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002b48:	1dfb      	adds	r3, r7, #7
 8002b4a:	015b      	lsls	r3, r3, #5
 8002b4c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002b50:	f023 031f 	bic.w	r3, r3, #31
 8002b54:	4313      	orrs	r3, r2
 8002b56:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002b5a:	331c      	adds	r3, #28
 8002b5c:	4a53      	ldr	r2, [pc, #332]	; (8002cac <LcdWrite8+0x174>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8002b62:	4b53      	ldr	r3, [pc, #332]	; (8002cb0 <LcdWrite8+0x178>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	601a      	str	r2, [r3, #0]
 8002b68:	4b51      	ldr	r3, [pc, #324]	; (8002cb0 <LcdWrite8+0x178>)
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 6);
 8002b6e:	1dfb      	adds	r3, r7, #7
 8002b70:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002b74:	1dfb      	adds	r3, r7, #7
 8002b76:	015b      	lsls	r3, r3, #5
 8002b78:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002b7c:	f023 031f 	bic.w	r3, r3, #31
 8002b80:	4313      	orrs	r3, r2
 8002b82:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002b86:	3318      	adds	r3, #24
 8002b88:	4a48      	ldr	r2, [pc, #288]	; (8002cac <LcdWrite8+0x174>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8002b8e:	4b48      	ldr	r3, [pc, #288]	; (8002cb0 <LcdWrite8+0x178>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	601a      	str	r2, [r3, #0]
 8002b94:	4b46      	ldr	r3, [pc, #280]	; (8002cb0 <LcdWrite8+0x178>)
 8002b96:	2201      	movs	r2, #1
 8002b98:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 5);
 8002b9a:	1dfb      	adds	r3, r7, #7
 8002b9c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002ba0:	1dfb      	adds	r3, r7, #7
 8002ba2:	015b      	lsls	r3, r3, #5
 8002ba4:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002ba8:	f023 031f 	bic.w	r3, r3, #31
 8002bac:	4313      	orrs	r3, r2
 8002bae:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002bb2:	3314      	adds	r3, #20
 8002bb4:	4a3d      	ldr	r2, [pc, #244]	; (8002cac <LcdWrite8+0x174>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8002bba:	4b3d      	ldr	r3, [pc, #244]	; (8002cb0 <LcdWrite8+0x178>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	601a      	str	r2, [r3, #0]
 8002bc0:	4b3b      	ldr	r3, [pc, #236]	; (8002cb0 <LcdWrite8+0x178>)
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 4);
 8002bc6:	1dfb      	adds	r3, r7, #7
 8002bc8:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002bcc:	1dfb      	adds	r3, r7, #7
 8002bce:	015b      	lsls	r3, r3, #5
 8002bd0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002bd4:	f023 031f 	bic.w	r3, r3, #31
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002bde:	3310      	adds	r3, #16
 8002be0:	4a32      	ldr	r2, [pc, #200]	; (8002cac <LcdWrite8+0x174>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8002be6:	4b32      	ldr	r3, [pc, #200]	; (8002cb0 <LcdWrite8+0x178>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	601a      	str	r2, [r3, #0]
 8002bec:	4b30      	ldr	r3, [pc, #192]	; (8002cb0 <LcdWrite8+0x178>)
 8002bee:	2201      	movs	r2, #1
 8002bf0:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 3);
 8002bf2:	1dfb      	adds	r3, r7, #7
 8002bf4:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002bf8:	1dfb      	adds	r3, r7, #7
 8002bfa:	015b      	lsls	r3, r3, #5
 8002bfc:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002c00:	f023 031f 	bic.w	r3, r3, #31
 8002c04:	4313      	orrs	r3, r2
 8002c06:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002c0a:	330c      	adds	r3, #12
 8002c0c:	4a27      	ldr	r2, [pc, #156]	; (8002cac <LcdWrite8+0x174>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8002c12:	4b27      	ldr	r3, [pc, #156]	; (8002cb0 <LcdWrite8+0x178>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	601a      	str	r2, [r3, #0]
 8002c18:	4b25      	ldr	r3, [pc, #148]	; (8002cb0 <LcdWrite8+0x178>)
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 2);
 8002c1e:	1dfb      	adds	r3, r7, #7
 8002c20:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002c24:	1dfb      	adds	r3, r7, #7
 8002c26:	015b      	lsls	r3, r3, #5
 8002c28:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002c2c:	f023 031f 	bic.w	r3, r3, #31
 8002c30:	4313      	orrs	r3, r2
 8002c32:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002c36:	3308      	adds	r3, #8
 8002c38:	4a1c      	ldr	r2, [pc, #112]	; (8002cac <LcdWrite8+0x174>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8002c3e:	4b1c      	ldr	r3, [pc, #112]	; (8002cb0 <LcdWrite8+0x178>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	601a      	str	r2, [r3, #0]
 8002c44:	4b1a      	ldr	r3, [pc, #104]	; (8002cb0 <LcdWrite8+0x178>)
 8002c46:	2201      	movs	r2, #1
 8002c48:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 1);
 8002c4a:	1dfb      	adds	r3, r7, #7
 8002c4c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002c50:	1dfb      	adds	r3, r7, #7
 8002c52:	015b      	lsls	r3, r3, #5
 8002c54:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002c58:	f023 031f 	bic.w	r3, r3, #31
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002c62:	3304      	adds	r3, #4
 8002c64:	4a11      	ldr	r2, [pc, #68]	; (8002cac <LcdWrite8+0x174>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8002c6a:	4b11      	ldr	r3, [pc, #68]	; (8002cb0 <LcdWrite8+0x178>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	601a      	str	r2, [r3, #0]
 8002c70:	4b0f      	ldr	r3, [pc, #60]	; (8002cb0 <LcdWrite8+0x178>)
 8002c72:	2201      	movs	r2, #1
 8002c74:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 0);
 8002c76:	1dfb      	adds	r3, r7, #7
 8002c78:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002c7c:	1dfb      	adds	r3, r7, #7
 8002c7e:	015b      	lsls	r3, r3, #5
 8002c80:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002c84:	f023 031f 	bic.w	r3, r3, #31
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002c8e:	4a07      	ldr	r2, [pc, #28]	; (8002cac <LcdWrite8+0x174>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8002c94:	4b06      	ldr	r3, [pc, #24]	; (8002cb0 <LcdWrite8+0x178>)
 8002c96:	2200      	movs	r2, #0
 8002c98:	601a      	str	r2, [r3, #0]
 8002c9a:	4b05      	ldr	r3, [pc, #20]	; (8002cb0 <LcdWrite8+0x178>)
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	601a      	str	r2, [r3, #0]
}
 8002ca0:	bf00      	nop
 8002ca2:	370c      	adds	r7, #12
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr
 8002cac:	4241028c 	.word	0x4241028c
 8002cb0:	42408280 	.word	0x42408280

08002cb4 <LcdWrite16>:

void LcdWrite16(uint16_t d16)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	4603      	mov	r3, r0
 8002cbc:	80fb      	strh	r3, [r7, #6]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 15);
 8002cbe:	1dbb      	adds	r3, r7, #6
 8002cc0:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002cc4:	1dbb      	adds	r3, r7, #6
 8002cc6:	015b      	lsls	r3, r3, #5
 8002cc8:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002ccc:	f023 031f 	bic.w	r3, r3, #31
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002cd6:	333c      	adds	r3, #60	; 0x3c
 8002cd8:	4aab      	ldr	r2, [pc, #684]	; (8002f88 <LcdWrite16+0x2d4>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8002cde:	4bab      	ldr	r3, [pc, #684]	; (8002f8c <LcdWrite16+0x2d8>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	601a      	str	r2, [r3, #0]
 8002ce4:	4ba9      	ldr	r3, [pc, #676]	; (8002f8c <LcdWrite16+0x2d8>)
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 14);
 8002cea:	1dbb      	adds	r3, r7, #6
 8002cec:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002cf0:	1dbb      	adds	r3, r7, #6
 8002cf2:	015b      	lsls	r3, r3, #5
 8002cf4:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002cf8:	f023 031f 	bic.w	r3, r3, #31
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002d02:	3338      	adds	r3, #56	; 0x38
 8002d04:	4aa0      	ldr	r2, [pc, #640]	; (8002f88 <LcdWrite16+0x2d4>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8002d0a:	4ba0      	ldr	r3, [pc, #640]	; (8002f8c <LcdWrite16+0x2d8>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	601a      	str	r2, [r3, #0]
 8002d10:	4b9e      	ldr	r3, [pc, #632]	; (8002f8c <LcdWrite16+0x2d8>)
 8002d12:	2201      	movs	r2, #1
 8002d14:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 13);
 8002d16:	1dbb      	adds	r3, r7, #6
 8002d18:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002d1c:	1dbb      	adds	r3, r7, #6
 8002d1e:	015b      	lsls	r3, r3, #5
 8002d20:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002d24:	f023 031f 	bic.w	r3, r3, #31
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002d2e:	3334      	adds	r3, #52	; 0x34
 8002d30:	4a95      	ldr	r2, [pc, #596]	; (8002f88 <LcdWrite16+0x2d4>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8002d36:	4b95      	ldr	r3, [pc, #596]	; (8002f8c <LcdWrite16+0x2d8>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	601a      	str	r2, [r3, #0]
 8002d3c:	4b93      	ldr	r3, [pc, #588]	; (8002f8c <LcdWrite16+0x2d8>)
 8002d3e:	2201      	movs	r2, #1
 8002d40:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 12);
 8002d42:	1dbb      	adds	r3, r7, #6
 8002d44:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002d48:	1dbb      	adds	r3, r7, #6
 8002d4a:	015b      	lsls	r3, r3, #5
 8002d4c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002d50:	f023 031f 	bic.w	r3, r3, #31
 8002d54:	4313      	orrs	r3, r2
 8002d56:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002d5a:	3330      	adds	r3, #48	; 0x30
 8002d5c:	4a8a      	ldr	r2, [pc, #552]	; (8002f88 <LcdWrite16+0x2d4>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8002d62:	4b8a      	ldr	r3, [pc, #552]	; (8002f8c <LcdWrite16+0x2d8>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	601a      	str	r2, [r3, #0]
 8002d68:	4b88      	ldr	r3, [pc, #544]	; (8002f8c <LcdWrite16+0x2d8>)
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 11);
 8002d6e:	1dbb      	adds	r3, r7, #6
 8002d70:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002d74:	1dbb      	adds	r3, r7, #6
 8002d76:	015b      	lsls	r3, r3, #5
 8002d78:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002d7c:	f023 031f 	bic.w	r3, r3, #31
 8002d80:	4313      	orrs	r3, r2
 8002d82:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002d86:	332c      	adds	r3, #44	; 0x2c
 8002d88:	4a7f      	ldr	r2, [pc, #508]	; (8002f88 <LcdWrite16+0x2d4>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8002d8e:	4b7f      	ldr	r3, [pc, #508]	; (8002f8c <LcdWrite16+0x2d8>)
 8002d90:	2200      	movs	r2, #0
 8002d92:	601a      	str	r2, [r3, #0]
 8002d94:	4b7d      	ldr	r3, [pc, #500]	; (8002f8c <LcdWrite16+0x2d8>)
 8002d96:	2201      	movs	r2, #1
 8002d98:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 10);
 8002d9a:	1dbb      	adds	r3, r7, #6
 8002d9c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002da0:	1dbb      	adds	r3, r7, #6
 8002da2:	015b      	lsls	r3, r3, #5
 8002da4:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002da8:	f023 031f 	bic.w	r3, r3, #31
 8002dac:	4313      	orrs	r3, r2
 8002dae:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002db2:	3328      	adds	r3, #40	; 0x28
 8002db4:	4a74      	ldr	r2, [pc, #464]	; (8002f88 <LcdWrite16+0x2d4>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8002dba:	4b74      	ldr	r3, [pc, #464]	; (8002f8c <LcdWrite16+0x2d8>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	601a      	str	r2, [r3, #0]
 8002dc0:	4b72      	ldr	r3, [pc, #456]	; (8002f8c <LcdWrite16+0x2d8>)
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 9);
 8002dc6:	1dbb      	adds	r3, r7, #6
 8002dc8:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002dcc:	1dbb      	adds	r3, r7, #6
 8002dce:	015b      	lsls	r3, r3, #5
 8002dd0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002dd4:	f023 031f 	bic.w	r3, r3, #31
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002dde:	3324      	adds	r3, #36	; 0x24
 8002de0:	4a69      	ldr	r2, [pc, #420]	; (8002f88 <LcdWrite16+0x2d4>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8002de6:	4b69      	ldr	r3, [pc, #420]	; (8002f8c <LcdWrite16+0x2d8>)
 8002de8:	2200      	movs	r2, #0
 8002dea:	601a      	str	r2, [r3, #0]
 8002dec:	4b67      	ldr	r3, [pc, #412]	; (8002f8c <LcdWrite16+0x2d8>)
 8002dee:	2201      	movs	r2, #1
 8002df0:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 8);
 8002df2:	1dbb      	adds	r3, r7, #6
 8002df4:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002df8:	1dbb      	adds	r3, r7, #6
 8002dfa:	015b      	lsls	r3, r3, #5
 8002dfc:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002e00:	f023 031f 	bic.w	r3, r3, #31
 8002e04:	4313      	orrs	r3, r2
 8002e06:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002e0a:	3320      	adds	r3, #32
 8002e0c:	4a5e      	ldr	r2, [pc, #376]	; (8002f88 <LcdWrite16+0x2d4>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8002e12:	4b5e      	ldr	r3, [pc, #376]	; (8002f8c <LcdWrite16+0x2d8>)
 8002e14:	2200      	movs	r2, #0
 8002e16:	601a      	str	r2, [r3, #0]
 8002e18:	4b5c      	ldr	r3, [pc, #368]	; (8002f8c <LcdWrite16+0x2d8>)
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 7);
 8002e1e:	1dbb      	adds	r3, r7, #6
 8002e20:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002e24:	1dbb      	adds	r3, r7, #6
 8002e26:	015b      	lsls	r3, r3, #5
 8002e28:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002e2c:	f023 031f 	bic.w	r3, r3, #31
 8002e30:	4313      	orrs	r3, r2
 8002e32:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002e36:	331c      	adds	r3, #28
 8002e38:	4a53      	ldr	r2, [pc, #332]	; (8002f88 <LcdWrite16+0x2d4>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8002e3e:	4b53      	ldr	r3, [pc, #332]	; (8002f8c <LcdWrite16+0x2d8>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	601a      	str	r2, [r3, #0]
 8002e44:	4b51      	ldr	r3, [pc, #324]	; (8002f8c <LcdWrite16+0x2d8>)
 8002e46:	2201      	movs	r2, #1
 8002e48:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 6);
 8002e4a:	1dbb      	adds	r3, r7, #6
 8002e4c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002e50:	1dbb      	adds	r3, r7, #6
 8002e52:	015b      	lsls	r3, r3, #5
 8002e54:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002e58:	f023 031f 	bic.w	r3, r3, #31
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002e62:	3318      	adds	r3, #24
 8002e64:	4a48      	ldr	r2, [pc, #288]	; (8002f88 <LcdWrite16+0x2d4>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8002e6a:	4b48      	ldr	r3, [pc, #288]	; (8002f8c <LcdWrite16+0x2d8>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	601a      	str	r2, [r3, #0]
 8002e70:	4b46      	ldr	r3, [pc, #280]	; (8002f8c <LcdWrite16+0x2d8>)
 8002e72:	2201      	movs	r2, #1
 8002e74:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 5);
 8002e76:	1dbb      	adds	r3, r7, #6
 8002e78:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002e7c:	1dbb      	adds	r3, r7, #6
 8002e7e:	015b      	lsls	r3, r3, #5
 8002e80:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002e84:	f023 031f 	bic.w	r3, r3, #31
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002e8e:	3314      	adds	r3, #20
 8002e90:	4a3d      	ldr	r2, [pc, #244]	; (8002f88 <LcdWrite16+0x2d4>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8002e96:	4b3d      	ldr	r3, [pc, #244]	; (8002f8c <LcdWrite16+0x2d8>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	601a      	str	r2, [r3, #0]
 8002e9c:	4b3b      	ldr	r3, [pc, #236]	; (8002f8c <LcdWrite16+0x2d8>)
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 4);
 8002ea2:	1dbb      	adds	r3, r7, #6
 8002ea4:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002ea8:	1dbb      	adds	r3, r7, #6
 8002eaa:	015b      	lsls	r3, r3, #5
 8002eac:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002eb0:	f023 031f 	bic.w	r3, r3, #31
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002eba:	3310      	adds	r3, #16
 8002ebc:	4a32      	ldr	r2, [pc, #200]	; (8002f88 <LcdWrite16+0x2d4>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8002ec2:	4b32      	ldr	r3, [pc, #200]	; (8002f8c <LcdWrite16+0x2d8>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	601a      	str	r2, [r3, #0]
 8002ec8:	4b30      	ldr	r3, [pc, #192]	; (8002f8c <LcdWrite16+0x2d8>)
 8002eca:	2201      	movs	r2, #1
 8002ecc:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 3);
 8002ece:	1dbb      	adds	r3, r7, #6
 8002ed0:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002ed4:	1dbb      	adds	r3, r7, #6
 8002ed6:	015b      	lsls	r3, r3, #5
 8002ed8:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002edc:	f023 031f 	bic.w	r3, r3, #31
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002ee6:	330c      	adds	r3, #12
 8002ee8:	4a27      	ldr	r2, [pc, #156]	; (8002f88 <LcdWrite16+0x2d4>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8002eee:	4b27      	ldr	r3, [pc, #156]	; (8002f8c <LcdWrite16+0x2d8>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	601a      	str	r2, [r3, #0]
 8002ef4:	4b25      	ldr	r3, [pc, #148]	; (8002f8c <LcdWrite16+0x2d8>)
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 2);
 8002efa:	1dbb      	adds	r3, r7, #6
 8002efc:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002f00:	1dbb      	adds	r3, r7, #6
 8002f02:	015b      	lsls	r3, r3, #5
 8002f04:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002f08:	f023 031f 	bic.w	r3, r3, #31
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002f12:	3308      	adds	r3, #8
 8002f14:	4a1c      	ldr	r2, [pc, #112]	; (8002f88 <LcdWrite16+0x2d4>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8002f1a:	4b1c      	ldr	r3, [pc, #112]	; (8002f8c <LcdWrite16+0x2d8>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	601a      	str	r2, [r3, #0]
 8002f20:	4b1a      	ldr	r3, [pc, #104]	; (8002f8c <LcdWrite16+0x2d8>)
 8002f22:	2201      	movs	r2, #1
 8002f24:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 1);
 8002f26:	1dbb      	adds	r3, r7, #6
 8002f28:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002f2c:	1dbb      	adds	r3, r7, #6
 8002f2e:	015b      	lsls	r3, r3, #5
 8002f30:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002f34:	f023 031f 	bic.w	r3, r3, #31
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002f3e:	3304      	adds	r3, #4
 8002f40:	4a11      	ldr	r2, [pc, #68]	; (8002f88 <LcdWrite16+0x2d4>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8002f46:	4b11      	ldr	r3, [pc, #68]	; (8002f8c <LcdWrite16+0x2d8>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	601a      	str	r2, [r3, #0]
 8002f4c:	4b0f      	ldr	r3, [pc, #60]	; (8002f8c <LcdWrite16+0x2d8>)
 8002f4e:	2201      	movs	r2, #1
 8002f50:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 0);
 8002f52:	1dbb      	adds	r3, r7, #6
 8002f54:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002f58:	1dbb      	adds	r3, r7, #6
 8002f5a:	015b      	lsls	r3, r3, #5
 8002f5c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002f60:	f023 031f 	bic.w	r3, r3, #31
 8002f64:	4313      	orrs	r3, r2
 8002f66:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002f6a:	4a07      	ldr	r2, [pc, #28]	; (8002f88 <LcdWrite16+0x2d4>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8002f70:	4b06      	ldr	r3, [pc, #24]	; (8002f8c <LcdWrite16+0x2d8>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	601a      	str	r2, [r3, #0]
 8002f76:	4b05      	ldr	r3, [pc, #20]	; (8002f8c <LcdWrite16+0x2d8>)
 8002f78:	2201      	movs	r2, #1
 8002f7a:	601a      	str	r2, [r3, #0]
}
 8002f7c:	bf00      	nop
 8002f7e:	370c      	adds	r7, #12
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr
 8002f88:	4241028c 	.word	0x4241028c
 8002f8c:	42408280 	.word	0x42408280

08002f90 <LCD_IO_WriteMultiData8>:
#if DMANUM(LCD_DMA_TX) == 0 || LCD_SPI == 0

/* SPI TX no DMA */

void LCD_IO_WriteMultiData8(uint8_t * pData, uint32_t Size, uint32_t dinc)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	60f8      	str	r0, [r7, #12]
 8002f98:	60b9      	str	r1, [r7, #8]
 8002f9a:	607a      	str	r2, [r7, #4]
  while(Size--)
 8002f9c:	e00a      	b.n	8002fb4 <LCD_IO_WriteMultiData8+0x24>
  {
    LcdWrite8(*pData);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f7ff fdc8 	bl	8002b38 <LcdWrite8>
    if(dinc)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d002      	beq.n	8002fb4 <LCD_IO_WriteMultiData8+0x24>
      pData++;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	3301      	adds	r3, #1
 8002fb2:	60fb      	str	r3, [r7, #12]
  while(Size--)
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	1e5a      	subs	r2, r3, #1
 8002fb8:	60ba      	str	r2, [r7, #8]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d1ef      	bne.n	8002f9e <LCD_IO_WriteMultiData8+0xe>
  }
  LCD_CS_OFF;
 8002fbe:	4b03      	ldr	r3, [pc, #12]	; (8002fcc <LCD_IO_WriteMultiData8+0x3c>)
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	601a      	str	r2, [r3, #0]
}
 8002fc4:	bf00      	nop
 8002fc6:	3710      	adds	r7, #16
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	42410284 	.word	0x42410284

08002fd0 <LCD_IO_WriteMultiData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteMultiData16(uint16_t * pData, uint32_t Size, uint32_t dinc)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	60f8      	str	r0, [r7, #12]
 8002fd8:	60b9      	str	r1, [r7, #8]
 8002fda:	607a      	str	r2, [r7, #4]
  while(Size--)
 8002fdc:	e00a      	b.n	8002ff4 <LCD_IO_WriteMultiData16+0x24>
  {
    LcdWrite16(*pData);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	881b      	ldrh	r3, [r3, #0]
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f7ff fe66 	bl	8002cb4 <LcdWrite16>
    if(dinc)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d002      	beq.n	8002ff4 <LCD_IO_WriteMultiData16+0x24>
      pData++;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	3302      	adds	r3, #2
 8002ff2:	60fb      	str	r3, [r7, #12]
  while(Size--)
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	1e5a      	subs	r2, r3, #1
 8002ff8:	60ba      	str	r2, [r7, #8]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d1ef      	bne.n	8002fde <LCD_IO_WriteMultiData16+0xe>
  }
  LCD_CS_OFF;
 8002ffe:	4b03      	ldr	r3, [pc, #12]	; (800300c <LCD_IO_WriteMultiData16+0x3c>)
 8003000:	2201      	movs	r2, #1
 8003002:	601a      	str	r2, [r3, #0]
}
 8003004:	bf00      	nop
 8003006:	3710      	adds	r7, #16
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}
 800300c:	42410284 	.word	0x42410284

08003010 <LCD_Delay>:

//=============================================================================
/* Public functions */

void LCD_Delay(uint32_t Delay)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b082      	sub	sp, #8
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f000 f9b7 	bl	800338c <HAL_Delay>
}
 800301e:	bf00      	nop
 8003020:	3708      	adds	r7, #8
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}

08003026 <LCD_IO_Bl_OnOff>:

//-----------------------------------------------------------------------------
void LCD_IO_Bl_OnOff(uint8_t Bl)
{
 8003026:	b480      	push	{r7}
 8003028:	b083      	sub	sp, #12
 800302a:	af00      	add	r7, sp, #0
 800302c:	4603      	mov	r3, r0
 800302e:	71fb      	strb	r3, [r7, #7]
  if(Bl)
    GPIOX_ODR(LCD_BL) = LCD_BLON;
  else
    GPIOX_ODR(LCD_BL) = 1 - LCD_BLON;
  #endif
}
 8003030:	bf00      	nop
 8003032:	370c      	adds	r7, #12
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr

0800303c <LCD_IO_Init>:

//-----------------------------------------------------------------------------
void LCD_IO_Init(void)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	af00      	add	r7, sp, #0
  #define DMA1_CLOCK_RX         0
  #endif
  #endif  // #else LCD_SPI == 0

  /* GPIO, DMA Clocks */
  RCC->AHB1ENR |= GPIOX_CLOCK(LCD_RS) | GPIOX_CLOCK(LCD_CS) | GPIOX_CLOCK(LCD_SCK) | GPIOX_CLOCK(LCD_MOSI) |
 8003040:	4b34      	ldr	r3, [pc, #208]	; (8003114 <LCD_IO_Init+0xd8>)
 8003042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003044:	4a33      	ldr	r2, [pc, #204]	; (8003114 <LCD_IO_Init+0xd8>)
 8003046:	f043 0307 	orr.w	r3, r3, #7
 800304a:	6313      	str	r3, [r2, #48]	; 0x30
  LCD_IO_Bl_OnOff(1);
  #endif

  /* Reset pin = output, reset off */
  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A
  GPIOX_MODER(MODE_OUT, LCD_RST);
 800304c:	4b32      	ldr	r3, [pc, #200]	; (8003118 <LCD_IO_Init+0xdc>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003054:	4a30      	ldr	r2, [pc, #192]	; (8003118 <LCD_IO_Init+0xdc>)
 8003056:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800305a:	6013      	str	r3, [r2, #0]
  GPIOX_OSPEEDR(MODE_SPD_LOW, LCD_RST);
 800305c:	4b2e      	ldr	r3, [pc, #184]	; (8003118 <LCD_IO_Init+0xdc>)
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	4a2d      	ldr	r2, [pc, #180]	; (8003118 <LCD_IO_Init+0xdc>)
 8003062:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003066:	6093      	str	r3, [r2, #8]
  LCD_RST_OFF;
 8003068:	4b2c      	ldr	r3, [pc, #176]	; (800311c <LCD_IO_Init+0xe0>)
 800306a:	2201      	movs	r2, #1
 800306c:	601a      	str	r2, [r3, #0]
  #endif

  LCD_RS_DATA;
 800306e:	4b2c      	ldr	r3, [pc, #176]	; (8003120 <LCD_IO_Init+0xe4>)
 8003070:	2201      	movs	r2, #1
 8003072:	601a      	str	r2, [r3, #0]
  LCD_CS_OFF;
 8003074:	4b2b      	ldr	r3, [pc, #172]	; (8003124 <LCD_IO_Init+0xe8>)
 8003076:	2201      	movs	r2, #1
 8003078:	601a      	str	r2, [r3, #0]
  GPIOX_MODER(MODE_OUT, LCD_RS);
 800307a:	4b2b      	ldr	r3, [pc, #172]	; (8003128 <LCD_IO_Init+0xec>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f023 0303 	bic.w	r3, r3, #3
 8003082:	4a29      	ldr	r2, [pc, #164]	; (8003128 <LCD_IO_Init+0xec>)
 8003084:	f043 0301 	orr.w	r3, r3, #1
 8003088:	6013      	str	r3, [r2, #0]
  GPIOX_MODER(MODE_OUT, LCD_CS);
 800308a:	4b27      	ldr	r3, [pc, #156]	; (8003128 <LCD_IO_Init+0xec>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f023 030c 	bic.w	r3, r3, #12
 8003092:	4a25      	ldr	r2, [pc, #148]	; (8003128 <LCD_IO_Init+0xec>)
 8003094:	f043 0304 	orr.w	r3, r3, #4
 8003098:	6013      	str	r3, [r2, #0]

  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_RS);
 800309a:	4b23      	ldr	r3, [pc, #140]	; (8003128 <LCD_IO_Init+0xec>)
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	4a22      	ldr	r2, [pc, #136]	; (8003128 <LCD_IO_Init+0xec>)
 80030a0:	f043 0303 	orr.w	r3, r3, #3
 80030a4:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_CS);
 80030a6:	4b20      	ldr	r3, [pc, #128]	; (8003128 <LCD_IO_Init+0xec>)
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	4a1f      	ldr	r2, [pc, #124]	; (8003128 <LCD_IO_Init+0xec>)
 80030ac:	f043 030c 	orr.w	r3, r3, #12
 80030b0:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_SCK);
 80030b2:	4b1e      	ldr	r3, [pc, #120]	; (800312c <LCD_IO_Init+0xf0>)
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	4a1d      	ldr	r2, [pc, #116]	; (800312c <LCD_IO_Init+0xf0>)
 80030b8:	f043 0303 	orr.w	r3, r3, #3
 80030bc:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_MOSI);
 80030be:	4b1a      	ldr	r3, [pc, #104]	; (8003128 <LCD_IO_Init+0xec>)
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	4a19      	ldr	r2, [pc, #100]	; (8003128 <LCD_IO_Init+0xec>)
 80030c4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80030c8:	6093      	str	r3, [r2, #8]
  GPIOX_ODR(LCD_SCK) = 1;               // SCK = 1
 80030ca:	4b19      	ldr	r3, [pc, #100]	; (8003130 <LCD_IO_Init+0xf4>)
 80030cc:	2201      	movs	r2, #1
 80030ce:	601a      	str	r2, [r3, #0]

  #if LCD_SPI == 0
  /* Software SPI */
  GPIOX_MODER(MODE_OUT, LCD_SCK);
 80030d0:	4b16      	ldr	r3, [pc, #88]	; (800312c <LCD_IO_Init+0xf0>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f023 0303 	bic.w	r3, r3, #3
 80030d8:	4a14      	ldr	r2, [pc, #80]	; (800312c <LCD_IO_Init+0xf0>)
 80030da:	f043 0301 	orr.w	r3, r3, #1
 80030de:	6013      	str	r3, [r2, #0]
  GPIOX_MODER(MODE_OUT, LCD_MOSI);
 80030e0:	4b11      	ldr	r3, [pc, #68]	; (8003128 <LCD_IO_Init+0xec>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80030e8:	4a0f      	ldr	r2, [pc, #60]	; (8003128 <LCD_IO_Init+0xec>)
 80030ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030ee:	6013      	str	r3, [r2, #0]

  #endif // #else LCD_SPI == 0

  /* Set or Reset the control line */
  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A // reset
  LCD_Delay(10);
 80030f0:	200a      	movs	r0, #10
 80030f2:	f7ff ff8d 	bl	8003010 <LCD_Delay>
  LCD_RST_ON;
 80030f6:	4b09      	ldr	r3, [pc, #36]	; (800311c <LCD_IO_Init+0xe0>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	601a      	str	r2, [r3, #0]
  LCD_Delay(10);
 80030fc:	200a      	movs	r0, #10
 80030fe:	f7ff ff87 	bl	8003010 <LCD_Delay>
  LCD_RST_OFF;
 8003102:	4b06      	ldr	r3, [pc, #24]	; (800311c <LCD_IO_Init+0xe0>)
 8003104:	2201      	movs	r2, #1
 8003106:	601a      	str	r2, [r3, #0]
  #endif
  LCD_Delay(10);
 8003108:	200a      	movs	r0, #10
 800310a:	f7ff ff81 	bl	8003010 <LCD_Delay>
  osSemaphoreDef(spiDmaBinSem);
  spiDmaBinSemHandle = osSemaphoreCreate(osSemaphore(spiDmaBinSem), 1);
  osSemaphoreWait(spiDmaBinSemHandle, 1);
  #endif
  #endif  // #if DMANUM(LCD_DMA_RX) > 0
} // void LCD_IO_Init(void)
 800310e:	bf00      	nop
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	40023800 	.word	0x40023800
 8003118:	40020000 	.word	0x40020000
 800311c:	42400290 	.word	0x42400290
 8003120:	42410280 	.word	0x42410280
 8003124:	42410284 	.word	0x42410284
 8003128:	40020800 	.word	0x40020800
 800312c:	40020400 	.word	0x40020400
 8003130:	42408280 	.word	0x42408280

08003134 <LCD_IO_WriteCmd8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8(uint8_t Cmd)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b082      	sub	sp, #8
 8003138:	af00      	add	r7, sp, #0
 800313a:	4603      	mov	r3, r0
 800313c:	71fb      	strb	r3, [r7, #7]
  WaitForDmaEnd();
  LcdSpiMode8();
  LCD_CS_ON;
 800313e:	4b0a      	ldr	r3, [pc, #40]	; (8003168 <LCD_IO_WriteCmd8+0x34>)
 8003140:	2200      	movs	r2, #0
 8003142:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 8003144:	4b09      	ldr	r3, [pc, #36]	; (800316c <LCD_IO_WriteCmd8+0x38>)
 8003146:	2200      	movs	r2, #0
 8003148:	601a      	str	r2, [r3, #0]
 800314a:	79fb      	ldrb	r3, [r7, #7]
 800314c:	4618      	mov	r0, r3
 800314e:	f7ff fcf3 	bl	8002b38 <LcdWrite8>
 8003152:	4b06      	ldr	r3, [pc, #24]	; (800316c <LCD_IO_WriteCmd8+0x38>)
 8003154:	2201      	movs	r2, #1
 8003156:	601a      	str	r2, [r3, #0]
  LCD_CS_OFF;
 8003158:	4b03      	ldr	r3, [pc, #12]	; (8003168 <LCD_IO_WriteCmd8+0x34>)
 800315a:	2201      	movs	r2, #1
 800315c:	601a      	str	r2, [r3, #0]
}
 800315e:	bf00      	nop
 8003160:	3708      	adds	r7, #8
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	42410284 	.word	0x42410284
 800316c:	42410280 	.word	0x42410280

08003170 <LCD_IO_WriteData8>:
  LCD_CS_OFF;
}

//-----------------------------------------------------------------------------
void LCD_IO_WriteData8(uint8_t Data)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
 8003176:	4603      	mov	r3, r0
 8003178:	71fb      	strb	r3, [r7, #7]
  WaitForDmaEnd();
  LcdSpiMode8();
  LCD_CS_ON;
 800317a:	4b07      	ldr	r3, [pc, #28]	; (8003198 <LCD_IO_WriteData8+0x28>)
 800317c:	2200      	movs	r2, #0
 800317e:	601a      	str	r2, [r3, #0]
  LcdWrite8(Data);
 8003180:	79fb      	ldrb	r3, [r7, #7]
 8003182:	4618      	mov	r0, r3
 8003184:	f7ff fcd8 	bl	8002b38 <LcdWrite8>
  LCD_CS_OFF;
 8003188:	4b03      	ldr	r3, [pc, #12]	; (8003198 <LCD_IO_WriteData8+0x28>)
 800318a:	2201      	movs	r2, #1
 800318c:	601a      	str	r2, [r3, #0]
}
 800318e:	bf00      	nop
 8003190:	3708      	adds	r7, #8
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	42410284 	.word	0x42410284

0800319c <LCD_IO_WriteData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteData16(uint16_t Data)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	4603      	mov	r3, r0
 80031a4:	80fb      	strh	r3, [r7, #6]
  WaitForDmaEnd();
  LcdSpiMode16();
  LCD_CS_ON;
 80031a6:	4b07      	ldr	r3, [pc, #28]	; (80031c4 <LCD_IO_WriteData16+0x28>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	601a      	str	r2, [r3, #0]
  LcdWrite16(Data);
 80031ac:	88fb      	ldrh	r3, [r7, #6]
 80031ae:	4618      	mov	r0, r3
 80031b0:	f7ff fd80 	bl	8002cb4 <LcdWrite16>
  LCD_CS_OFF;
 80031b4:	4b03      	ldr	r3, [pc, #12]	; (80031c4 <LCD_IO_WriteData16+0x28>)
 80031b6:	2201      	movs	r2, #1
 80031b8:	601a      	str	r2, [r3, #0]
}
 80031ba:	bf00      	nop
 80031bc:	3708      	adds	r7, #8
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	42410284 	.word	0x42410284

080031c8 <LCD_IO_WriteCmd8DataFill16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8DataFill16(uint8_t Cmd, uint16_t Data, uint32_t Size)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b082      	sub	sp, #8
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	4603      	mov	r3, r0
 80031d0:	603a      	str	r2, [r7, #0]
 80031d2:	71fb      	strb	r3, [r7, #7]
 80031d4:	460b      	mov	r3, r1
 80031d6:	80bb      	strh	r3, [r7, #4]
  WaitForDmaEnd();
  LcdSpiMode8();
  LCD_CS_ON;
 80031d8:	4b0b      	ldr	r3, [pc, #44]	; (8003208 <LCD_IO_WriteCmd8DataFill16+0x40>)
 80031da:	2200      	movs	r2, #0
 80031dc:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 80031de:	4b0b      	ldr	r3, [pc, #44]	; (800320c <LCD_IO_WriteCmd8DataFill16+0x44>)
 80031e0:	2200      	movs	r2, #0
 80031e2:	601a      	str	r2, [r3, #0]
 80031e4:	79fb      	ldrb	r3, [r7, #7]
 80031e6:	4618      	mov	r0, r3
 80031e8:	f7ff fca6 	bl	8002b38 <LcdWrite8>
 80031ec:	4b07      	ldr	r3, [pc, #28]	; (800320c <LCD_IO_WriteCmd8DataFill16+0x44>)
 80031ee:	2201      	movs	r2, #1
 80031f0:	601a      	str	r2, [r3, #0]
  LcdSpiMode16();
  LCD_IO_WriteMultiData16(&Data, Size, 0);
 80031f2:	1d3b      	adds	r3, r7, #4
 80031f4:	2200      	movs	r2, #0
 80031f6:	6839      	ldr	r1, [r7, #0]
 80031f8:	4618      	mov	r0, r3
 80031fa:	f7ff fee9 	bl	8002fd0 <LCD_IO_WriteMultiData16>
}
 80031fe:	bf00      	nop
 8003200:	3708      	adds	r7, #8
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	42410284 	.word	0x42410284
 800320c:	42410280 	.word	0x42410280

08003210 <LCD_IO_WriteCmd8MultipleData8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8MultipleData8(uint8_t Cmd, uint8_t *pData, uint32_t Size)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
 8003216:	4603      	mov	r3, r0
 8003218:	60b9      	str	r1, [r7, #8]
 800321a:	607a      	str	r2, [r7, #4]
 800321c:	73fb      	strb	r3, [r7, #15]
  WaitForDmaEnd();
  LcdSpiMode8();
  LCD_CS_ON;
 800321e:	4b0b      	ldr	r3, [pc, #44]	; (800324c <LCD_IO_WriteCmd8MultipleData8+0x3c>)
 8003220:	2200      	movs	r2, #0
 8003222:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 8003224:	4b0a      	ldr	r3, [pc, #40]	; (8003250 <LCD_IO_WriteCmd8MultipleData8+0x40>)
 8003226:	2200      	movs	r2, #0
 8003228:	601a      	str	r2, [r3, #0]
 800322a:	7bfb      	ldrb	r3, [r7, #15]
 800322c:	4618      	mov	r0, r3
 800322e:	f7ff fc83 	bl	8002b38 <LcdWrite8>
 8003232:	4b07      	ldr	r3, [pc, #28]	; (8003250 <LCD_IO_WriteCmd8MultipleData8+0x40>)
 8003234:	2201      	movs	r2, #1
 8003236:	601a      	str	r2, [r3, #0]
  LCD_IO_WriteMultiData8(pData, Size, 1);
 8003238:	2201      	movs	r2, #1
 800323a:	6879      	ldr	r1, [r7, #4]
 800323c:	68b8      	ldr	r0, [r7, #8]
 800323e:	f7ff fea7 	bl	8002f90 <LCD_IO_WriteMultiData8>
}
 8003242:	bf00      	nop
 8003244:	3710      	adds	r7, #16
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	42410284 	.word	0x42410284
 8003250:	42410280 	.word	0x42410280

08003254 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003254:	f8df d034 	ldr.w	sp, [pc, #52]	; 800328c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003258:	480d      	ldr	r0, [pc, #52]	; (8003290 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800325a:	490e      	ldr	r1, [pc, #56]	; (8003294 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800325c:	4a0e      	ldr	r2, [pc, #56]	; (8003298 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800325e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003260:	e002      	b.n	8003268 <LoopCopyDataInit>

08003262 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003262:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003264:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003266:	3304      	adds	r3, #4

08003268 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003268:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800326a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800326c:	d3f9      	bcc.n	8003262 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800326e:	4a0b      	ldr	r2, [pc, #44]	; (800329c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003270:	4c0b      	ldr	r4, [pc, #44]	; (80032a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003272:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003274:	e001      	b.n	800327a <LoopFillZerobss>

08003276 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003276:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003278:	3204      	adds	r2, #4

0800327a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800327a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800327c:	d3fb      	bcc.n	8003276 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800327e:	f7ff f9cb 	bl	8002618 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003282:	f006 f86f 	bl	8009364 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003286:	f7fe f979 	bl	800157c <main>
  bx  lr    
 800328a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800328c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003290:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003294:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8003298:	0801568c 	.word	0x0801568c
  ldr r2, =_sbss
 800329c:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 80032a0:	200037a0 	.word	0x200037a0

080032a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80032a4:	e7fe      	b.n	80032a4 <ADC_IRQHandler>
	...

080032a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80032ac:	4b0e      	ldr	r3, [pc, #56]	; (80032e8 <HAL_Init+0x40>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a0d      	ldr	r2, [pc, #52]	; (80032e8 <HAL_Init+0x40>)
 80032b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80032b8:	4b0b      	ldr	r3, [pc, #44]	; (80032e8 <HAL_Init+0x40>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a0a      	ldr	r2, [pc, #40]	; (80032e8 <HAL_Init+0x40>)
 80032be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80032c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80032c4:	4b08      	ldr	r3, [pc, #32]	; (80032e8 <HAL_Init+0x40>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a07      	ldr	r2, [pc, #28]	; (80032e8 <HAL_Init+0x40>)
 80032ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032d0:	2003      	movs	r0, #3
 80032d2:	f000 f94f 	bl	8003574 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80032d6:	2000      	movs	r0, #0
 80032d8:	f000 f808 	bl	80032ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80032dc:	f7fe fe96 	bl	800200c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80032e0:	2300      	movs	r3, #0
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	40023c00 	.word	0x40023c00

080032ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b082      	sub	sp, #8
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80032f4:	4b12      	ldr	r3, [pc, #72]	; (8003340 <HAL_InitTick+0x54>)
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	4b12      	ldr	r3, [pc, #72]	; (8003344 <HAL_InitTick+0x58>)
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	4619      	mov	r1, r3
 80032fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003302:	fbb3 f3f1 	udiv	r3, r3, r1
 8003306:	fbb2 f3f3 	udiv	r3, r2, r3
 800330a:	4618      	mov	r0, r3
 800330c:	f000 f967 	bl	80035de <HAL_SYSTICK_Config>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d001      	beq.n	800331a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e00e      	b.n	8003338 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2b0f      	cmp	r3, #15
 800331e:	d80a      	bhi.n	8003336 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003320:	2200      	movs	r2, #0
 8003322:	6879      	ldr	r1, [r7, #4]
 8003324:	f04f 30ff 	mov.w	r0, #4294967295
 8003328:	f000 f92f 	bl	800358a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800332c:	4a06      	ldr	r2, [pc, #24]	; (8003348 <HAL_InitTick+0x5c>)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003332:	2300      	movs	r3, #0
 8003334:	e000      	b.n	8003338 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
}
 8003338:	4618      	mov	r0, r3
 800333a:	3708      	adds	r7, #8
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}
 8003340:	20000008 	.word	0x20000008
 8003344:	20000020 	.word	0x20000020
 8003348:	2000001c 	.word	0x2000001c

0800334c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800334c:	b480      	push	{r7}
 800334e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003350:	4b06      	ldr	r3, [pc, #24]	; (800336c <HAL_IncTick+0x20>)
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	461a      	mov	r2, r3
 8003356:	4b06      	ldr	r3, [pc, #24]	; (8003370 <HAL_IncTick+0x24>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4413      	add	r3, r2
 800335c:	4a04      	ldr	r2, [pc, #16]	; (8003370 <HAL_IncTick+0x24>)
 800335e:	6013      	str	r3, [r2, #0]
}
 8003360:	bf00      	nop
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr
 800336a:	bf00      	nop
 800336c:	20000020 	.word	0x20000020
 8003370:	2000378c 	.word	0x2000378c

08003374 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003374:	b480      	push	{r7}
 8003376:	af00      	add	r7, sp, #0
  return uwTick;
 8003378:	4b03      	ldr	r3, [pc, #12]	; (8003388 <HAL_GetTick+0x14>)
 800337a:	681b      	ldr	r3, [r3, #0]
}
 800337c:	4618      	mov	r0, r3
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr
 8003386:	bf00      	nop
 8003388:	2000378c 	.word	0x2000378c

0800338c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b084      	sub	sp, #16
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003394:	f7ff ffee 	bl	8003374 <HAL_GetTick>
 8003398:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033a4:	d005      	beq.n	80033b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80033a6:	4b0a      	ldr	r3, [pc, #40]	; (80033d0 <HAL_Delay+0x44>)
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	461a      	mov	r2, r3
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	4413      	add	r3, r2
 80033b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80033b2:	bf00      	nop
 80033b4:	f7ff ffde 	bl	8003374 <HAL_GetTick>
 80033b8:	4602      	mov	r2, r0
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	68fa      	ldr	r2, [r7, #12]
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d8f7      	bhi.n	80033b4 <HAL_Delay+0x28>
  {
  }
}
 80033c4:	bf00      	nop
 80033c6:	bf00      	nop
 80033c8:	3710      	adds	r7, #16
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	20000020 	.word	0x20000020

080033d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b085      	sub	sp, #20
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	f003 0307 	and.w	r3, r3, #7
 80033e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033e4:	4b0c      	ldr	r3, [pc, #48]	; (8003418 <__NVIC_SetPriorityGrouping+0x44>)
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033ea:	68ba      	ldr	r2, [r7, #8]
 80033ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033f0:	4013      	ands	r3, r2
 80033f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003400:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003404:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003406:	4a04      	ldr	r2, [pc, #16]	; (8003418 <__NVIC_SetPriorityGrouping+0x44>)
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	60d3      	str	r3, [r2, #12]
}
 800340c:	bf00      	nop
 800340e:	3714      	adds	r7, #20
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr
 8003418:	e000ed00 	.word	0xe000ed00

0800341c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800341c:	b480      	push	{r7}
 800341e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003420:	4b04      	ldr	r3, [pc, #16]	; (8003434 <__NVIC_GetPriorityGrouping+0x18>)
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	0a1b      	lsrs	r3, r3, #8
 8003426:	f003 0307 	and.w	r3, r3, #7
}
 800342a:	4618      	mov	r0, r3
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr
 8003434:	e000ed00 	.word	0xe000ed00

08003438 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	4603      	mov	r3, r0
 8003440:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003446:	2b00      	cmp	r3, #0
 8003448:	db0b      	blt.n	8003462 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800344a:	79fb      	ldrb	r3, [r7, #7]
 800344c:	f003 021f 	and.w	r2, r3, #31
 8003450:	4907      	ldr	r1, [pc, #28]	; (8003470 <__NVIC_EnableIRQ+0x38>)
 8003452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003456:	095b      	lsrs	r3, r3, #5
 8003458:	2001      	movs	r0, #1
 800345a:	fa00 f202 	lsl.w	r2, r0, r2
 800345e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003462:	bf00      	nop
 8003464:	370c      	adds	r7, #12
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
 800346e:	bf00      	nop
 8003470:	e000e100 	.word	0xe000e100

08003474 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003474:	b480      	push	{r7}
 8003476:	b083      	sub	sp, #12
 8003478:	af00      	add	r7, sp, #0
 800347a:	4603      	mov	r3, r0
 800347c:	6039      	str	r1, [r7, #0]
 800347e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003480:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003484:	2b00      	cmp	r3, #0
 8003486:	db0a      	blt.n	800349e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	b2da      	uxtb	r2, r3
 800348c:	490c      	ldr	r1, [pc, #48]	; (80034c0 <__NVIC_SetPriority+0x4c>)
 800348e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003492:	0112      	lsls	r2, r2, #4
 8003494:	b2d2      	uxtb	r2, r2
 8003496:	440b      	add	r3, r1
 8003498:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800349c:	e00a      	b.n	80034b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	b2da      	uxtb	r2, r3
 80034a2:	4908      	ldr	r1, [pc, #32]	; (80034c4 <__NVIC_SetPriority+0x50>)
 80034a4:	79fb      	ldrb	r3, [r7, #7]
 80034a6:	f003 030f 	and.w	r3, r3, #15
 80034aa:	3b04      	subs	r3, #4
 80034ac:	0112      	lsls	r2, r2, #4
 80034ae:	b2d2      	uxtb	r2, r2
 80034b0:	440b      	add	r3, r1
 80034b2:	761a      	strb	r2, [r3, #24]
}
 80034b4:	bf00      	nop
 80034b6:	370c      	adds	r7, #12
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr
 80034c0:	e000e100 	.word	0xe000e100
 80034c4:	e000ed00 	.word	0xe000ed00

080034c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b089      	sub	sp, #36	; 0x24
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	60f8      	str	r0, [r7, #12]
 80034d0:	60b9      	str	r1, [r7, #8]
 80034d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f003 0307 	and.w	r3, r3, #7
 80034da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	f1c3 0307 	rsb	r3, r3, #7
 80034e2:	2b04      	cmp	r3, #4
 80034e4:	bf28      	it	cs
 80034e6:	2304      	movcs	r3, #4
 80034e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	3304      	adds	r3, #4
 80034ee:	2b06      	cmp	r3, #6
 80034f0:	d902      	bls.n	80034f8 <NVIC_EncodePriority+0x30>
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	3b03      	subs	r3, #3
 80034f6:	e000      	b.n	80034fa <NVIC_EncodePriority+0x32>
 80034f8:	2300      	movs	r3, #0
 80034fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034fc:	f04f 32ff 	mov.w	r2, #4294967295
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	fa02 f303 	lsl.w	r3, r2, r3
 8003506:	43da      	mvns	r2, r3
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	401a      	ands	r2, r3
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003510:	f04f 31ff 	mov.w	r1, #4294967295
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	fa01 f303 	lsl.w	r3, r1, r3
 800351a:	43d9      	mvns	r1, r3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003520:	4313      	orrs	r3, r2
         );
}
 8003522:	4618      	mov	r0, r3
 8003524:	3724      	adds	r7, #36	; 0x24
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr
	...

08003530 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b082      	sub	sp, #8
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	3b01      	subs	r3, #1
 800353c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003540:	d301      	bcc.n	8003546 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003542:	2301      	movs	r3, #1
 8003544:	e00f      	b.n	8003566 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003546:	4a0a      	ldr	r2, [pc, #40]	; (8003570 <SysTick_Config+0x40>)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	3b01      	subs	r3, #1
 800354c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800354e:	210f      	movs	r1, #15
 8003550:	f04f 30ff 	mov.w	r0, #4294967295
 8003554:	f7ff ff8e 	bl	8003474 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003558:	4b05      	ldr	r3, [pc, #20]	; (8003570 <SysTick_Config+0x40>)
 800355a:	2200      	movs	r2, #0
 800355c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800355e:	4b04      	ldr	r3, [pc, #16]	; (8003570 <SysTick_Config+0x40>)
 8003560:	2207      	movs	r2, #7
 8003562:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003564:	2300      	movs	r3, #0
}
 8003566:	4618      	mov	r0, r3
 8003568:	3708      	adds	r7, #8
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
 800356e:	bf00      	nop
 8003570:	e000e010 	.word	0xe000e010

08003574 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b082      	sub	sp, #8
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f7ff ff29 	bl	80033d4 <__NVIC_SetPriorityGrouping>
}
 8003582:	bf00      	nop
 8003584:	3708      	adds	r7, #8
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}

0800358a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800358a:	b580      	push	{r7, lr}
 800358c:	b086      	sub	sp, #24
 800358e:	af00      	add	r7, sp, #0
 8003590:	4603      	mov	r3, r0
 8003592:	60b9      	str	r1, [r7, #8]
 8003594:	607a      	str	r2, [r7, #4]
 8003596:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003598:	2300      	movs	r3, #0
 800359a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800359c:	f7ff ff3e 	bl	800341c <__NVIC_GetPriorityGrouping>
 80035a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	68b9      	ldr	r1, [r7, #8]
 80035a6:	6978      	ldr	r0, [r7, #20]
 80035a8:	f7ff ff8e 	bl	80034c8 <NVIC_EncodePriority>
 80035ac:	4602      	mov	r2, r0
 80035ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035b2:	4611      	mov	r1, r2
 80035b4:	4618      	mov	r0, r3
 80035b6:	f7ff ff5d 	bl	8003474 <__NVIC_SetPriority>
}
 80035ba:	bf00      	nop
 80035bc:	3718      	adds	r7, #24
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}

080035c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035c2:	b580      	push	{r7, lr}
 80035c4:	b082      	sub	sp, #8
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	4603      	mov	r3, r0
 80035ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035d0:	4618      	mov	r0, r3
 80035d2:	f7ff ff31 	bl	8003438 <__NVIC_EnableIRQ>
}
 80035d6:	bf00      	nop
 80035d8:	3708      	adds	r7, #8
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}

080035de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035de:	b580      	push	{r7, lr}
 80035e0:	b082      	sub	sp, #8
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f7ff ffa2 	bl	8003530 <SysTick_Config>
 80035ec:	4603      	mov	r3, r0
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3708      	adds	r7, #8
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
	...

080035f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b086      	sub	sp, #24
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003600:	2300      	movs	r3, #0
 8003602:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003604:	f7ff feb6 	bl	8003374 <HAL_GetTick>
 8003608:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d101      	bne.n	8003614 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e099      	b.n	8003748 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2202      	movs	r2, #2
 8003618:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f022 0201 	bic.w	r2, r2, #1
 8003632:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003634:	e00f      	b.n	8003656 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003636:	f7ff fe9d 	bl	8003374 <HAL_GetTick>
 800363a:	4602      	mov	r2, r0
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	2b05      	cmp	r3, #5
 8003642:	d908      	bls.n	8003656 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2220      	movs	r2, #32
 8003648:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2203      	movs	r2, #3
 800364e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e078      	b.n	8003748 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0301 	and.w	r3, r3, #1
 8003660:	2b00      	cmp	r3, #0
 8003662:	d1e8      	bne.n	8003636 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800366c:	697a      	ldr	r2, [r7, #20]
 800366e:	4b38      	ldr	r3, [pc, #224]	; (8003750 <HAL_DMA_Init+0x158>)
 8003670:	4013      	ands	r3, r2
 8003672:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	685a      	ldr	r2, [r3, #4]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003682:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	691b      	ldr	r3, [r3, #16]
 8003688:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800368e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	699b      	ldr	r3, [r3, #24]
 8003694:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800369a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6a1b      	ldr	r3, [r3, #32]
 80036a0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036a2:	697a      	ldr	r2, [r7, #20]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ac:	2b04      	cmp	r3, #4
 80036ae:	d107      	bne.n	80036c0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b8:	4313      	orrs	r3, r2
 80036ba:	697a      	ldr	r2, [r7, #20]
 80036bc:	4313      	orrs	r3, r2
 80036be:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	697a      	ldr	r2, [r7, #20]
 80036c6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	695b      	ldr	r3, [r3, #20]
 80036ce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	f023 0307 	bic.w	r3, r3, #7
 80036d6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036dc:	697a      	ldr	r2, [r7, #20]
 80036de:	4313      	orrs	r3, r2
 80036e0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e6:	2b04      	cmp	r3, #4
 80036e8:	d117      	bne.n	800371a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ee:	697a      	ldr	r2, [r7, #20]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d00e      	beq.n	800371a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f000 fb0f 	bl	8003d20 <DMA_CheckFifoParam>
 8003702:	4603      	mov	r3, r0
 8003704:	2b00      	cmp	r3, #0
 8003706:	d008      	beq.n	800371a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2240      	movs	r2, #64	; 0x40
 800370c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2201      	movs	r2, #1
 8003712:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003716:	2301      	movs	r3, #1
 8003718:	e016      	b.n	8003748 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	697a      	ldr	r2, [r7, #20]
 8003720:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f000 fac6 	bl	8003cb4 <DMA_CalcBaseAndBitshift>
 8003728:	4603      	mov	r3, r0
 800372a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003730:	223f      	movs	r2, #63	; 0x3f
 8003732:	409a      	lsls	r2, r3
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2201      	movs	r2, #1
 8003742:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003746:	2300      	movs	r3, #0
}
 8003748:	4618      	mov	r0, r3
 800374a:	3718      	adds	r7, #24
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}
 8003750:	f010803f 	.word	0xf010803f

08003754 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b086      	sub	sp, #24
 8003758:	af00      	add	r7, sp, #0
 800375a:	60f8      	str	r0, [r7, #12]
 800375c:	60b9      	str	r1, [r7, #8]
 800375e:	607a      	str	r2, [r7, #4]
 8003760:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003762:	2300      	movs	r3, #0
 8003764:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800376a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003772:	2b01      	cmp	r3, #1
 8003774:	d101      	bne.n	800377a <HAL_DMA_Start_IT+0x26>
 8003776:	2302      	movs	r3, #2
 8003778:	e040      	b.n	80037fc <HAL_DMA_Start_IT+0xa8>
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2201      	movs	r2, #1
 800377e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003788:	b2db      	uxtb	r3, r3
 800378a:	2b01      	cmp	r3, #1
 800378c:	d12f      	bne.n	80037ee <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2202      	movs	r2, #2
 8003792:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2200      	movs	r2, #0
 800379a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	68b9      	ldr	r1, [r7, #8]
 80037a2:	68f8      	ldr	r0, [r7, #12]
 80037a4:	f000 fa58 	bl	8003c58 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ac:	223f      	movs	r2, #63	; 0x3f
 80037ae:	409a      	lsls	r2, r3
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f042 0216 	orr.w	r2, r2, #22
 80037c2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d007      	beq.n	80037dc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f042 0208 	orr.w	r2, r2, #8
 80037da:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f042 0201 	orr.w	r2, r2, #1
 80037ea:	601a      	str	r2, [r3, #0]
 80037ec:	e005      	b.n	80037fa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2200      	movs	r2, #0
 80037f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80037f6:	2302      	movs	r3, #2
 80037f8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80037fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3718      	adds	r7, #24
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}

08003804 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b084      	sub	sp, #16
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003810:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003812:	f7ff fdaf 	bl	8003374 <HAL_GetTick>
 8003816:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800381e:	b2db      	uxtb	r3, r3
 8003820:	2b02      	cmp	r3, #2
 8003822:	d008      	beq.n	8003836 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2280      	movs	r2, #128	; 0x80
 8003828:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e052      	b.n	80038dc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f022 0216 	bic.w	r2, r2, #22
 8003844:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	695a      	ldr	r2, [r3, #20]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003854:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385a:	2b00      	cmp	r3, #0
 800385c:	d103      	bne.n	8003866 <HAL_DMA_Abort+0x62>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003862:	2b00      	cmp	r3, #0
 8003864:	d007      	beq.n	8003876 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f022 0208 	bic.w	r2, r2, #8
 8003874:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f022 0201 	bic.w	r2, r2, #1
 8003884:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003886:	e013      	b.n	80038b0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003888:	f7ff fd74 	bl	8003374 <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	2b05      	cmp	r3, #5
 8003894:	d90c      	bls.n	80038b0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2220      	movs	r2, #32
 800389a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2203      	movs	r2, #3
 80038a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2200      	movs	r2, #0
 80038a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80038ac:	2303      	movs	r3, #3
 80038ae:	e015      	b.n	80038dc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0301 	and.w	r3, r3, #1
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d1e4      	bne.n	8003888 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038c2:	223f      	movs	r2, #63	; 0x3f
 80038c4:	409a      	lsls	r2, r3
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2201      	movs	r2, #1
 80038ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80038da:	2300      	movs	r3, #0
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3710      	adds	r7, #16
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b083      	sub	sp, #12
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	2b02      	cmp	r3, #2
 80038f6:	d004      	beq.n	8003902 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2280      	movs	r2, #128	; 0x80
 80038fc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e00c      	b.n	800391c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2205      	movs	r2, #5
 8003906:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f022 0201 	bic.w	r2, r2, #1
 8003918:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800391a:	2300      	movs	r3, #0
}
 800391c:	4618      	mov	r0, r3
 800391e:	370c      	adds	r7, #12
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr

08003928 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b086      	sub	sp, #24
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003930:	2300      	movs	r3, #0
 8003932:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003934:	4b8e      	ldr	r3, [pc, #568]	; (8003b70 <HAL_DMA_IRQHandler+0x248>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a8e      	ldr	r2, [pc, #568]	; (8003b74 <HAL_DMA_IRQHandler+0x24c>)
 800393a:	fba2 2303 	umull	r2, r3, r2, r3
 800393e:	0a9b      	lsrs	r3, r3, #10
 8003940:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003946:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003952:	2208      	movs	r2, #8
 8003954:	409a      	lsls	r2, r3
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	4013      	ands	r3, r2
 800395a:	2b00      	cmp	r3, #0
 800395c:	d01a      	beq.n	8003994 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 0304 	and.w	r3, r3, #4
 8003968:	2b00      	cmp	r3, #0
 800396a:	d013      	beq.n	8003994 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f022 0204 	bic.w	r2, r2, #4
 800397a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003980:	2208      	movs	r2, #8
 8003982:	409a      	lsls	r2, r3
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800398c:	f043 0201 	orr.w	r2, r3, #1
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003998:	2201      	movs	r2, #1
 800399a:	409a      	lsls	r2, r3
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	4013      	ands	r3, r2
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d012      	beq.n	80039ca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	695b      	ldr	r3, [r3, #20]
 80039aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d00b      	beq.n	80039ca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039b6:	2201      	movs	r2, #1
 80039b8:	409a      	lsls	r2, r3
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039c2:	f043 0202 	orr.w	r2, r3, #2
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ce:	2204      	movs	r2, #4
 80039d0:	409a      	lsls	r2, r3
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	4013      	ands	r3, r2
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d012      	beq.n	8003a00 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 0302 	and.w	r3, r3, #2
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d00b      	beq.n	8003a00 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ec:	2204      	movs	r2, #4
 80039ee:	409a      	lsls	r2, r3
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039f8:	f043 0204 	orr.w	r2, r3, #4
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a04:	2210      	movs	r2, #16
 8003a06:	409a      	lsls	r2, r3
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d043      	beq.n	8003a98 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0308 	and.w	r3, r3, #8
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d03c      	beq.n	8003a98 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a22:	2210      	movs	r2, #16
 8003a24:	409a      	lsls	r2, r3
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d018      	beq.n	8003a6a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d108      	bne.n	8003a58 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d024      	beq.n	8003a98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	4798      	blx	r3
 8003a56:	e01f      	b.n	8003a98 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d01b      	beq.n	8003a98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	4798      	blx	r3
 8003a68:	e016      	b.n	8003a98 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d107      	bne.n	8003a88 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f022 0208 	bic.w	r2, r2, #8
 8003a86:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d003      	beq.n	8003a98 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a9c:	2220      	movs	r2, #32
 8003a9e:	409a      	lsls	r2, r3
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	f000 808f 	beq.w	8003bc8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0310 	and.w	r3, r3, #16
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	f000 8087 	beq.w	8003bc8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003abe:	2220      	movs	r2, #32
 8003ac0:	409a      	lsls	r2, r3
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	2b05      	cmp	r3, #5
 8003ad0:	d136      	bne.n	8003b40 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f022 0216 	bic.w	r2, r2, #22
 8003ae0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	695a      	ldr	r2, [r3, #20]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003af0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d103      	bne.n	8003b02 <HAL_DMA_IRQHandler+0x1da>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d007      	beq.n	8003b12 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f022 0208 	bic.w	r2, r2, #8
 8003b10:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b16:	223f      	movs	r2, #63	; 0x3f
 8003b18:	409a      	lsls	r2, r3
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2201      	movs	r2, #1
 8003b22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d07e      	beq.n	8003c34 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	4798      	blx	r3
        }
        return;
 8003b3e:	e079      	b.n	8003c34 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d01d      	beq.n	8003b8a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d10d      	bne.n	8003b78 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d031      	beq.n	8003bc8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	4798      	blx	r3
 8003b6c:	e02c      	b.n	8003bc8 <HAL_DMA_IRQHandler+0x2a0>
 8003b6e:	bf00      	nop
 8003b70:	20000008 	.word	0x20000008
 8003b74:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d023      	beq.n	8003bc8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	4798      	blx	r3
 8003b88:	e01e      	b.n	8003bc8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d10f      	bne.n	8003bb8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f022 0210 	bic.w	r2, r2, #16
 8003ba6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2201      	movs	r2, #1
 8003bac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d003      	beq.n	8003bc8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d032      	beq.n	8003c36 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bd4:	f003 0301 	and.w	r3, r3, #1
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d022      	beq.n	8003c22 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2205      	movs	r2, #5
 8003be0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f022 0201 	bic.w	r2, r2, #1
 8003bf2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	3301      	adds	r3, #1
 8003bf8:	60bb      	str	r3, [r7, #8]
 8003bfa:	697a      	ldr	r2, [r7, #20]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d307      	bcc.n	8003c10 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0301 	and.w	r3, r3, #1
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d1f2      	bne.n	8003bf4 <HAL_DMA_IRQHandler+0x2cc>
 8003c0e:	e000      	b.n	8003c12 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003c10:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2201      	movs	r2, #1
 8003c16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d005      	beq.n	8003c36 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	4798      	blx	r3
 8003c32:	e000      	b.n	8003c36 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003c34:	bf00      	nop
    }
  }
}
 8003c36:	3718      	adds	r7, #24
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c4a:	b2db      	uxtb	r3, r3
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	370c      	adds	r7, #12
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr

08003c58 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b085      	sub	sp, #20
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	60b9      	str	r1, [r7, #8]
 8003c62:	607a      	str	r2, [r7, #4]
 8003c64:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003c74:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	683a      	ldr	r2, [r7, #0]
 8003c7c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	2b40      	cmp	r3, #64	; 0x40
 8003c84:	d108      	bne.n	8003c98 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	68ba      	ldr	r2, [r7, #8]
 8003c94:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003c96:	e007      	b.n	8003ca8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	68ba      	ldr	r2, [r7, #8]
 8003c9e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	60da      	str	r2, [r3, #12]
}
 8003ca8:	bf00      	nop
 8003caa:	3714      	adds	r7, #20
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr

08003cb4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b085      	sub	sp, #20
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	3b10      	subs	r3, #16
 8003cc4:	4a14      	ldr	r2, [pc, #80]	; (8003d18 <DMA_CalcBaseAndBitshift+0x64>)
 8003cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cca:	091b      	lsrs	r3, r3, #4
 8003ccc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003cce:	4a13      	ldr	r2, [pc, #76]	; (8003d1c <DMA_CalcBaseAndBitshift+0x68>)
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	4413      	add	r3, r2
 8003cd4:	781b      	ldrb	r3, [r3, #0]
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2b03      	cmp	r3, #3
 8003ce0:	d909      	bls.n	8003cf6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003cea:	f023 0303 	bic.w	r3, r3, #3
 8003cee:	1d1a      	adds	r2, r3, #4
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	659a      	str	r2, [r3, #88]	; 0x58
 8003cf4:	e007      	b.n	8003d06 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003cfe:	f023 0303 	bic.w	r3, r3, #3
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3714      	adds	r7, #20
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr
 8003d16:	bf00      	nop
 8003d18:	aaaaaaab 	.word	0xaaaaaaab
 8003d1c:	0801529c 	.word	0x0801529c

08003d20 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b085      	sub	sp, #20
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d30:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	699b      	ldr	r3, [r3, #24]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d11f      	bne.n	8003d7a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	2b03      	cmp	r3, #3
 8003d3e:	d856      	bhi.n	8003dee <DMA_CheckFifoParam+0xce>
 8003d40:	a201      	add	r2, pc, #4	; (adr r2, 8003d48 <DMA_CheckFifoParam+0x28>)
 8003d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d46:	bf00      	nop
 8003d48:	08003d59 	.word	0x08003d59
 8003d4c:	08003d6b 	.word	0x08003d6b
 8003d50:	08003d59 	.word	0x08003d59
 8003d54:	08003def 	.word	0x08003def
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d046      	beq.n	8003df2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d68:	e043      	b.n	8003df2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d6e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d72:	d140      	bne.n	8003df6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d78:	e03d      	b.n	8003df6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	699b      	ldr	r3, [r3, #24]
 8003d7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d82:	d121      	bne.n	8003dc8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	2b03      	cmp	r3, #3
 8003d88:	d837      	bhi.n	8003dfa <DMA_CheckFifoParam+0xda>
 8003d8a:	a201      	add	r2, pc, #4	; (adr r2, 8003d90 <DMA_CheckFifoParam+0x70>)
 8003d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d90:	08003da1 	.word	0x08003da1
 8003d94:	08003da7 	.word	0x08003da7
 8003d98:	08003da1 	.word	0x08003da1
 8003d9c:	08003db9 	.word	0x08003db9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	73fb      	strb	r3, [r7, #15]
      break;
 8003da4:	e030      	b.n	8003e08 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003daa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d025      	beq.n	8003dfe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003db6:	e022      	b.n	8003dfe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dbc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003dc0:	d11f      	bne.n	8003e02 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003dc6:	e01c      	b.n	8003e02 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	2b02      	cmp	r3, #2
 8003dcc:	d903      	bls.n	8003dd6 <DMA_CheckFifoParam+0xb6>
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	2b03      	cmp	r3, #3
 8003dd2:	d003      	beq.n	8003ddc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003dd4:	e018      	b.n	8003e08 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	73fb      	strb	r3, [r7, #15]
      break;
 8003dda:	e015      	b.n	8003e08 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d00e      	beq.n	8003e06 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	73fb      	strb	r3, [r7, #15]
      break;
 8003dec:	e00b      	b.n	8003e06 <DMA_CheckFifoParam+0xe6>
      break;
 8003dee:	bf00      	nop
 8003df0:	e00a      	b.n	8003e08 <DMA_CheckFifoParam+0xe8>
      break;
 8003df2:	bf00      	nop
 8003df4:	e008      	b.n	8003e08 <DMA_CheckFifoParam+0xe8>
      break;
 8003df6:	bf00      	nop
 8003df8:	e006      	b.n	8003e08 <DMA_CheckFifoParam+0xe8>
      break;
 8003dfa:	bf00      	nop
 8003dfc:	e004      	b.n	8003e08 <DMA_CheckFifoParam+0xe8>
      break;
 8003dfe:	bf00      	nop
 8003e00:	e002      	b.n	8003e08 <DMA_CheckFifoParam+0xe8>
      break;   
 8003e02:	bf00      	nop
 8003e04:	e000      	b.n	8003e08 <DMA_CheckFifoParam+0xe8>
      break;
 8003e06:	bf00      	nop
    }
  } 
  
  return status; 
 8003e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3714      	adds	r7, #20
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr
 8003e16:	bf00      	nop

08003e18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b089      	sub	sp, #36	; 0x24
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003e22:	2300      	movs	r3, #0
 8003e24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003e26:	2300      	movs	r3, #0
 8003e28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e2e:	2300      	movs	r3, #0
 8003e30:	61fb      	str	r3, [r7, #28]
 8003e32:	e159      	b.n	80040e8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003e34:	2201      	movs	r2, #1
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	697a      	ldr	r2, [r7, #20]
 8003e44:	4013      	ands	r3, r2
 8003e46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003e48:	693a      	ldr	r2, [r7, #16]
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	f040 8148 	bne.w	80040e2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	f003 0303 	and.w	r3, r3, #3
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d005      	beq.n	8003e6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e66:	2b02      	cmp	r3, #2
 8003e68:	d130      	bne.n	8003ecc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	005b      	lsls	r3, r3, #1
 8003e74:	2203      	movs	r2, #3
 8003e76:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7a:	43db      	mvns	r3, r3
 8003e7c:	69ba      	ldr	r2, [r7, #24]
 8003e7e:	4013      	ands	r3, r2
 8003e80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	68da      	ldr	r2, [r3, #12]
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	005b      	lsls	r3, r3, #1
 8003e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8e:	69ba      	ldr	r2, [r7, #24]
 8003e90:	4313      	orrs	r3, r2
 8003e92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	69ba      	ldr	r2, [r7, #24]
 8003e98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea8:	43db      	mvns	r3, r3
 8003eaa:	69ba      	ldr	r2, [r7, #24]
 8003eac:	4013      	ands	r3, r2
 8003eae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	091b      	lsrs	r3, r3, #4
 8003eb6:	f003 0201 	and.w	r2, r3, #1
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec0:	69ba      	ldr	r2, [r7, #24]
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	69ba      	ldr	r2, [r7, #24]
 8003eca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	f003 0303 	and.w	r3, r3, #3
 8003ed4:	2b03      	cmp	r3, #3
 8003ed6:	d017      	beq.n	8003f08 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003ede:	69fb      	ldr	r3, [r7, #28]
 8003ee0:	005b      	lsls	r3, r3, #1
 8003ee2:	2203      	movs	r2, #3
 8003ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee8:	43db      	mvns	r3, r3
 8003eea:	69ba      	ldr	r2, [r7, #24]
 8003eec:	4013      	ands	r3, r2
 8003eee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	689a      	ldr	r2, [r3, #8]
 8003ef4:	69fb      	ldr	r3, [r7, #28]
 8003ef6:	005b      	lsls	r3, r3, #1
 8003ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8003efc:	69ba      	ldr	r2, [r7, #24]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	69ba      	ldr	r2, [r7, #24]
 8003f06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	f003 0303 	and.w	r3, r3, #3
 8003f10:	2b02      	cmp	r3, #2
 8003f12:	d123      	bne.n	8003f5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	08da      	lsrs	r2, r3, #3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	3208      	adds	r2, #8
 8003f1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	f003 0307 	and.w	r3, r3, #7
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	220f      	movs	r2, #15
 8003f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f30:	43db      	mvns	r3, r3
 8003f32:	69ba      	ldr	r2, [r7, #24]
 8003f34:	4013      	ands	r3, r2
 8003f36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	691a      	ldr	r2, [r3, #16]
 8003f3c:	69fb      	ldr	r3, [r7, #28]
 8003f3e:	f003 0307 	and.w	r3, r3, #7
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	fa02 f303 	lsl.w	r3, r2, r3
 8003f48:	69ba      	ldr	r2, [r7, #24]
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003f4e:	69fb      	ldr	r3, [r7, #28]
 8003f50:	08da      	lsrs	r2, r3, #3
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	3208      	adds	r2, #8
 8003f56:	69b9      	ldr	r1, [r7, #24]
 8003f58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003f62:	69fb      	ldr	r3, [r7, #28]
 8003f64:	005b      	lsls	r3, r3, #1
 8003f66:	2203      	movs	r2, #3
 8003f68:	fa02 f303 	lsl.w	r3, r2, r3
 8003f6c:	43db      	mvns	r3, r3
 8003f6e:	69ba      	ldr	r2, [r7, #24]
 8003f70:	4013      	ands	r3, r2
 8003f72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	f003 0203 	and.w	r2, r3, #3
 8003f7c:	69fb      	ldr	r3, [r7, #28]
 8003f7e:	005b      	lsls	r3, r3, #1
 8003f80:	fa02 f303 	lsl.w	r3, r2, r3
 8003f84:	69ba      	ldr	r2, [r7, #24]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	69ba      	ldr	r2, [r7, #24]
 8003f8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	f000 80a2 	beq.w	80040e2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	60fb      	str	r3, [r7, #12]
 8003fa2:	4b57      	ldr	r3, [pc, #348]	; (8004100 <HAL_GPIO_Init+0x2e8>)
 8003fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fa6:	4a56      	ldr	r2, [pc, #344]	; (8004100 <HAL_GPIO_Init+0x2e8>)
 8003fa8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003fac:	6453      	str	r3, [r2, #68]	; 0x44
 8003fae:	4b54      	ldr	r3, [pc, #336]	; (8004100 <HAL_GPIO_Init+0x2e8>)
 8003fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fb6:	60fb      	str	r3, [r7, #12]
 8003fb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003fba:	4a52      	ldr	r2, [pc, #328]	; (8004104 <HAL_GPIO_Init+0x2ec>)
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	089b      	lsrs	r3, r3, #2
 8003fc0:	3302      	adds	r3, #2
 8003fc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003fc8:	69fb      	ldr	r3, [r7, #28]
 8003fca:	f003 0303 	and.w	r3, r3, #3
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	220f      	movs	r2, #15
 8003fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd6:	43db      	mvns	r3, r3
 8003fd8:	69ba      	ldr	r2, [r7, #24]
 8003fda:	4013      	ands	r3, r2
 8003fdc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4a49      	ldr	r2, [pc, #292]	; (8004108 <HAL_GPIO_Init+0x2f0>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d019      	beq.n	800401a <HAL_GPIO_Init+0x202>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4a48      	ldr	r2, [pc, #288]	; (800410c <HAL_GPIO_Init+0x2f4>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d013      	beq.n	8004016 <HAL_GPIO_Init+0x1fe>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a47      	ldr	r2, [pc, #284]	; (8004110 <HAL_GPIO_Init+0x2f8>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d00d      	beq.n	8004012 <HAL_GPIO_Init+0x1fa>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4a46      	ldr	r2, [pc, #280]	; (8004114 <HAL_GPIO_Init+0x2fc>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d007      	beq.n	800400e <HAL_GPIO_Init+0x1f6>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4a45      	ldr	r2, [pc, #276]	; (8004118 <HAL_GPIO_Init+0x300>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d101      	bne.n	800400a <HAL_GPIO_Init+0x1f2>
 8004006:	2304      	movs	r3, #4
 8004008:	e008      	b.n	800401c <HAL_GPIO_Init+0x204>
 800400a:	2307      	movs	r3, #7
 800400c:	e006      	b.n	800401c <HAL_GPIO_Init+0x204>
 800400e:	2303      	movs	r3, #3
 8004010:	e004      	b.n	800401c <HAL_GPIO_Init+0x204>
 8004012:	2302      	movs	r3, #2
 8004014:	e002      	b.n	800401c <HAL_GPIO_Init+0x204>
 8004016:	2301      	movs	r3, #1
 8004018:	e000      	b.n	800401c <HAL_GPIO_Init+0x204>
 800401a:	2300      	movs	r3, #0
 800401c:	69fa      	ldr	r2, [r7, #28]
 800401e:	f002 0203 	and.w	r2, r2, #3
 8004022:	0092      	lsls	r2, r2, #2
 8004024:	4093      	lsls	r3, r2
 8004026:	69ba      	ldr	r2, [r7, #24]
 8004028:	4313      	orrs	r3, r2
 800402a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800402c:	4935      	ldr	r1, [pc, #212]	; (8004104 <HAL_GPIO_Init+0x2ec>)
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	089b      	lsrs	r3, r3, #2
 8004032:	3302      	adds	r3, #2
 8004034:	69ba      	ldr	r2, [r7, #24]
 8004036:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800403a:	4b38      	ldr	r3, [pc, #224]	; (800411c <HAL_GPIO_Init+0x304>)
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	43db      	mvns	r3, r3
 8004044:	69ba      	ldr	r2, [r7, #24]
 8004046:	4013      	ands	r3, r2
 8004048:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d003      	beq.n	800405e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004056:	69ba      	ldr	r2, [r7, #24]
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	4313      	orrs	r3, r2
 800405c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800405e:	4a2f      	ldr	r2, [pc, #188]	; (800411c <HAL_GPIO_Init+0x304>)
 8004060:	69bb      	ldr	r3, [r7, #24]
 8004062:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004064:	4b2d      	ldr	r3, [pc, #180]	; (800411c <HAL_GPIO_Init+0x304>)
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	43db      	mvns	r3, r3
 800406e:	69ba      	ldr	r2, [r7, #24]
 8004070:	4013      	ands	r3, r2
 8004072:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800407c:	2b00      	cmp	r3, #0
 800407e:	d003      	beq.n	8004088 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004080:	69ba      	ldr	r2, [r7, #24]
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	4313      	orrs	r3, r2
 8004086:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004088:	4a24      	ldr	r2, [pc, #144]	; (800411c <HAL_GPIO_Init+0x304>)
 800408a:	69bb      	ldr	r3, [r7, #24]
 800408c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800408e:	4b23      	ldr	r3, [pc, #140]	; (800411c <HAL_GPIO_Init+0x304>)
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	43db      	mvns	r3, r3
 8004098:	69ba      	ldr	r2, [r7, #24]
 800409a:	4013      	ands	r3, r2
 800409c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d003      	beq.n	80040b2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80040aa:	69ba      	ldr	r2, [r7, #24]
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80040b2:	4a1a      	ldr	r2, [pc, #104]	; (800411c <HAL_GPIO_Init+0x304>)
 80040b4:	69bb      	ldr	r3, [r7, #24]
 80040b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80040b8:	4b18      	ldr	r3, [pc, #96]	; (800411c <HAL_GPIO_Init+0x304>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	43db      	mvns	r3, r3
 80040c2:	69ba      	ldr	r2, [r7, #24]
 80040c4:	4013      	ands	r3, r2
 80040c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d003      	beq.n	80040dc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80040d4:	69ba      	ldr	r2, [r7, #24]
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	4313      	orrs	r3, r2
 80040da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80040dc:	4a0f      	ldr	r2, [pc, #60]	; (800411c <HAL_GPIO_Init+0x304>)
 80040de:	69bb      	ldr	r3, [r7, #24]
 80040e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80040e2:	69fb      	ldr	r3, [r7, #28]
 80040e4:	3301      	adds	r3, #1
 80040e6:	61fb      	str	r3, [r7, #28]
 80040e8:	69fb      	ldr	r3, [r7, #28]
 80040ea:	2b0f      	cmp	r3, #15
 80040ec:	f67f aea2 	bls.w	8003e34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80040f0:	bf00      	nop
 80040f2:	bf00      	nop
 80040f4:	3724      	adds	r7, #36	; 0x24
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr
 80040fe:	bf00      	nop
 8004100:	40023800 	.word	0x40023800
 8004104:	40013800 	.word	0x40013800
 8004108:	40020000 	.word	0x40020000
 800410c:	40020400 	.word	0x40020400
 8004110:	40020800 	.word	0x40020800
 8004114:	40020c00 	.word	0x40020c00
 8004118:	40021000 	.word	0x40021000
 800411c:	40013c00 	.word	0x40013c00

08004120 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	460b      	mov	r3, r1
 800412a:	807b      	strh	r3, [r7, #2]
 800412c:	4613      	mov	r3, r2
 800412e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004130:	787b      	ldrb	r3, [r7, #1]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d003      	beq.n	800413e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004136:	887a      	ldrh	r2, [r7, #2]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800413c:	e003      	b.n	8004146 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800413e:	887b      	ldrh	r3, [r7, #2]
 8004140:	041a      	lsls	r2, r3, #16
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	619a      	str	r2, [r3, #24]
}
 8004146:	bf00      	nop
 8004148:	370c      	adds	r7, #12
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr

08004152 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004152:	b480      	push	{r7}
 8004154:	b085      	sub	sp, #20
 8004156:	af00      	add	r7, sp, #0
 8004158:	6078      	str	r0, [r7, #4]
 800415a:	460b      	mov	r3, r1
 800415c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	695b      	ldr	r3, [r3, #20]
 8004162:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004164:	887a      	ldrh	r2, [r7, #2]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	4013      	ands	r3, r2
 800416a:	041a      	lsls	r2, r3, #16
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	43d9      	mvns	r1, r3
 8004170:	887b      	ldrh	r3, [r7, #2]
 8004172:	400b      	ands	r3, r1
 8004174:	431a      	orrs	r2, r3
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	619a      	str	r2, [r3, #24]
}
 800417a:	bf00      	nop
 800417c:	3714      	adds	r7, #20
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr
	...

08004188 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b082      	sub	sp, #8
 800418c:	af00      	add	r7, sp, #0
 800418e:	4603      	mov	r3, r0
 8004190:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004192:	4b08      	ldr	r3, [pc, #32]	; (80041b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004194:	695a      	ldr	r2, [r3, #20]
 8004196:	88fb      	ldrh	r3, [r7, #6]
 8004198:	4013      	ands	r3, r2
 800419a:	2b00      	cmp	r3, #0
 800419c:	d006      	beq.n	80041ac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800419e:	4a05      	ldr	r2, [pc, #20]	; (80041b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80041a0:	88fb      	ldrh	r3, [r7, #6]
 80041a2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80041a4:	88fb      	ldrh	r3, [r7, #6]
 80041a6:	4618      	mov	r0, r3
 80041a8:	f7fd feec 	bl	8001f84 <HAL_GPIO_EXTI_Callback>
  }
}
 80041ac:	bf00      	nop
 80041ae:	3708      	adds	r7, #8
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}
 80041b4:	40013c00 	.word	0x40013c00

080041b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b084      	sub	sp, #16
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d101      	bne.n	80041ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	e12b      	b.n	8004422 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d106      	bne.n	80041e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2200      	movs	r2, #0
 80041da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f7fd ff3c 	bl	800205c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2224      	movs	r2, #36	; 0x24
 80041e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f022 0201 	bic.w	r2, r2, #1
 80041fa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800420a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800421a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800421c:	f003 f8d6 	bl	80073cc <HAL_RCC_GetPCLK1Freq>
 8004220:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	4a81      	ldr	r2, [pc, #516]	; (800442c <HAL_I2C_Init+0x274>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d807      	bhi.n	800423c <HAL_I2C_Init+0x84>
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	4a80      	ldr	r2, [pc, #512]	; (8004430 <HAL_I2C_Init+0x278>)
 8004230:	4293      	cmp	r3, r2
 8004232:	bf94      	ite	ls
 8004234:	2301      	movls	r3, #1
 8004236:	2300      	movhi	r3, #0
 8004238:	b2db      	uxtb	r3, r3
 800423a:	e006      	b.n	800424a <HAL_I2C_Init+0x92>
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	4a7d      	ldr	r2, [pc, #500]	; (8004434 <HAL_I2C_Init+0x27c>)
 8004240:	4293      	cmp	r3, r2
 8004242:	bf94      	ite	ls
 8004244:	2301      	movls	r3, #1
 8004246:	2300      	movhi	r3, #0
 8004248:	b2db      	uxtb	r3, r3
 800424a:	2b00      	cmp	r3, #0
 800424c:	d001      	beq.n	8004252 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e0e7      	b.n	8004422 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	4a78      	ldr	r2, [pc, #480]	; (8004438 <HAL_I2C_Init+0x280>)
 8004256:	fba2 2303 	umull	r2, r3, r2, r3
 800425a:	0c9b      	lsrs	r3, r3, #18
 800425c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	68ba      	ldr	r2, [r7, #8]
 800426e:	430a      	orrs	r2, r1
 8004270:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	6a1b      	ldr	r3, [r3, #32]
 8004278:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	4a6a      	ldr	r2, [pc, #424]	; (800442c <HAL_I2C_Init+0x274>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d802      	bhi.n	800428c <HAL_I2C_Init+0xd4>
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	3301      	adds	r3, #1
 800428a:	e009      	b.n	80042a0 <HAL_I2C_Init+0xe8>
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004292:	fb02 f303 	mul.w	r3, r2, r3
 8004296:	4a69      	ldr	r2, [pc, #420]	; (800443c <HAL_I2C_Init+0x284>)
 8004298:	fba2 2303 	umull	r2, r3, r2, r3
 800429c:	099b      	lsrs	r3, r3, #6
 800429e:	3301      	adds	r3, #1
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	6812      	ldr	r2, [r2, #0]
 80042a4:	430b      	orrs	r3, r1
 80042a6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	69db      	ldr	r3, [r3, #28]
 80042ae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80042b2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	495c      	ldr	r1, [pc, #368]	; (800442c <HAL_I2C_Init+0x274>)
 80042bc:	428b      	cmp	r3, r1
 80042be:	d819      	bhi.n	80042f4 <HAL_I2C_Init+0x13c>
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	1e59      	subs	r1, r3, #1
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	005b      	lsls	r3, r3, #1
 80042ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80042ce:	1c59      	adds	r1, r3, #1
 80042d0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80042d4:	400b      	ands	r3, r1
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d00a      	beq.n	80042f0 <HAL_I2C_Init+0x138>
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	1e59      	subs	r1, r3, #1
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	005b      	lsls	r3, r3, #1
 80042e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80042e8:	3301      	adds	r3, #1
 80042ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042ee:	e051      	b.n	8004394 <HAL_I2C_Init+0x1dc>
 80042f0:	2304      	movs	r3, #4
 80042f2:	e04f      	b.n	8004394 <HAL_I2C_Init+0x1dc>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d111      	bne.n	8004320 <HAL_I2C_Init+0x168>
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	1e58      	subs	r0, r3, #1
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6859      	ldr	r1, [r3, #4]
 8004304:	460b      	mov	r3, r1
 8004306:	005b      	lsls	r3, r3, #1
 8004308:	440b      	add	r3, r1
 800430a:	fbb0 f3f3 	udiv	r3, r0, r3
 800430e:	3301      	adds	r3, #1
 8004310:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004314:	2b00      	cmp	r3, #0
 8004316:	bf0c      	ite	eq
 8004318:	2301      	moveq	r3, #1
 800431a:	2300      	movne	r3, #0
 800431c:	b2db      	uxtb	r3, r3
 800431e:	e012      	b.n	8004346 <HAL_I2C_Init+0x18e>
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	1e58      	subs	r0, r3, #1
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6859      	ldr	r1, [r3, #4]
 8004328:	460b      	mov	r3, r1
 800432a:	009b      	lsls	r3, r3, #2
 800432c:	440b      	add	r3, r1
 800432e:	0099      	lsls	r1, r3, #2
 8004330:	440b      	add	r3, r1
 8004332:	fbb0 f3f3 	udiv	r3, r0, r3
 8004336:	3301      	adds	r3, #1
 8004338:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800433c:	2b00      	cmp	r3, #0
 800433e:	bf0c      	ite	eq
 8004340:	2301      	moveq	r3, #1
 8004342:	2300      	movne	r3, #0
 8004344:	b2db      	uxtb	r3, r3
 8004346:	2b00      	cmp	r3, #0
 8004348:	d001      	beq.n	800434e <HAL_I2C_Init+0x196>
 800434a:	2301      	movs	r3, #1
 800434c:	e022      	b.n	8004394 <HAL_I2C_Init+0x1dc>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d10e      	bne.n	8004374 <HAL_I2C_Init+0x1bc>
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	1e58      	subs	r0, r3, #1
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6859      	ldr	r1, [r3, #4]
 800435e:	460b      	mov	r3, r1
 8004360:	005b      	lsls	r3, r3, #1
 8004362:	440b      	add	r3, r1
 8004364:	fbb0 f3f3 	udiv	r3, r0, r3
 8004368:	3301      	adds	r3, #1
 800436a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800436e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004372:	e00f      	b.n	8004394 <HAL_I2C_Init+0x1dc>
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	1e58      	subs	r0, r3, #1
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6859      	ldr	r1, [r3, #4]
 800437c:	460b      	mov	r3, r1
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	440b      	add	r3, r1
 8004382:	0099      	lsls	r1, r3, #2
 8004384:	440b      	add	r3, r1
 8004386:	fbb0 f3f3 	udiv	r3, r0, r3
 800438a:	3301      	adds	r3, #1
 800438c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004390:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004394:	6879      	ldr	r1, [r7, #4]
 8004396:	6809      	ldr	r1, [r1, #0]
 8004398:	4313      	orrs	r3, r2
 800439a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	69da      	ldr	r2, [r3, #28]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6a1b      	ldr	r3, [r3, #32]
 80043ae:	431a      	orrs	r2, r3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	430a      	orrs	r2, r1
 80043b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80043c2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80043c6:	687a      	ldr	r2, [r7, #4]
 80043c8:	6911      	ldr	r1, [r2, #16]
 80043ca:	687a      	ldr	r2, [r7, #4]
 80043cc:	68d2      	ldr	r2, [r2, #12]
 80043ce:	4311      	orrs	r1, r2
 80043d0:	687a      	ldr	r2, [r7, #4]
 80043d2:	6812      	ldr	r2, [r2, #0]
 80043d4:	430b      	orrs	r3, r1
 80043d6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	68db      	ldr	r3, [r3, #12]
 80043de:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	695a      	ldr	r2, [r3, #20]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	699b      	ldr	r3, [r3, #24]
 80043ea:	431a      	orrs	r2, r3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	430a      	orrs	r2, r1
 80043f2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f042 0201 	orr.w	r2, r2, #1
 8004402:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2220      	movs	r2, #32
 800440e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004420:	2300      	movs	r3, #0
}
 8004422:	4618      	mov	r0, r3
 8004424:	3710      	adds	r7, #16
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
 800442a:	bf00      	nop
 800442c:	000186a0 	.word	0x000186a0
 8004430:	001e847f 	.word	0x001e847f
 8004434:	003d08ff 	.word	0x003d08ff
 8004438:	431bde83 	.word	0x431bde83
 800443c:	10624dd3 	.word	0x10624dd3

08004440 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b088      	sub	sp, #32
 8004444:	af02      	add	r7, sp, #8
 8004446:	60f8      	str	r0, [r7, #12]
 8004448:	4608      	mov	r0, r1
 800444a:	4611      	mov	r1, r2
 800444c:	461a      	mov	r2, r3
 800444e:	4603      	mov	r3, r0
 8004450:	817b      	strh	r3, [r7, #10]
 8004452:	460b      	mov	r3, r1
 8004454:	813b      	strh	r3, [r7, #8]
 8004456:	4613      	mov	r3, r2
 8004458:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800445a:	f7fe ff8b 	bl	8003374 <HAL_GetTick>
 800445e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004466:	b2db      	uxtb	r3, r3
 8004468:	2b20      	cmp	r3, #32
 800446a:	f040 80d9 	bne.w	8004620 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	9300      	str	r3, [sp, #0]
 8004472:	2319      	movs	r3, #25
 8004474:	2201      	movs	r2, #1
 8004476:	496d      	ldr	r1, [pc, #436]	; (800462c <HAL_I2C_Mem_Write+0x1ec>)
 8004478:	68f8      	ldr	r0, [r7, #12]
 800447a:	f002 f90d 	bl	8006698 <I2C_WaitOnFlagUntilTimeout>
 800447e:	4603      	mov	r3, r0
 8004480:	2b00      	cmp	r3, #0
 8004482:	d001      	beq.n	8004488 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004484:	2302      	movs	r3, #2
 8004486:	e0cc      	b.n	8004622 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800448e:	2b01      	cmp	r3, #1
 8004490:	d101      	bne.n	8004496 <HAL_I2C_Mem_Write+0x56>
 8004492:	2302      	movs	r3, #2
 8004494:	e0c5      	b.n	8004622 <HAL_I2C_Mem_Write+0x1e2>
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2201      	movs	r2, #1
 800449a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f003 0301 	and.w	r3, r3, #1
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d007      	beq.n	80044bc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f042 0201 	orr.w	r2, r2, #1
 80044ba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044ca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2221      	movs	r2, #33	; 0x21
 80044d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2240      	movs	r2, #64	; 0x40
 80044d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2200      	movs	r2, #0
 80044e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	6a3a      	ldr	r2, [r7, #32]
 80044e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80044ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044f2:	b29a      	uxth	r2, r3
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	4a4d      	ldr	r2, [pc, #308]	; (8004630 <HAL_I2C_Mem_Write+0x1f0>)
 80044fc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80044fe:	88f8      	ldrh	r0, [r7, #6]
 8004500:	893a      	ldrh	r2, [r7, #8]
 8004502:	8979      	ldrh	r1, [r7, #10]
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	9301      	str	r3, [sp, #4]
 8004508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800450a:	9300      	str	r3, [sp, #0]
 800450c:	4603      	mov	r3, r0
 800450e:	68f8      	ldr	r0, [r7, #12]
 8004510:	f001 fe9c 	bl	800624c <I2C_RequestMemoryWrite>
 8004514:	4603      	mov	r3, r0
 8004516:	2b00      	cmp	r3, #0
 8004518:	d052      	beq.n	80045c0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e081      	b.n	8004622 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800451e:	697a      	ldr	r2, [r7, #20]
 8004520:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004522:	68f8      	ldr	r0, [r7, #12]
 8004524:	f002 f98e 	bl	8006844 <I2C_WaitOnTXEFlagUntilTimeout>
 8004528:	4603      	mov	r3, r0
 800452a:	2b00      	cmp	r3, #0
 800452c:	d00d      	beq.n	800454a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004532:	2b04      	cmp	r3, #4
 8004534:	d107      	bne.n	8004546 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004544:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	e06b      	b.n	8004622 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454e:	781a      	ldrb	r2, [r3, #0]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455a:	1c5a      	adds	r2, r3, #1
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004564:	3b01      	subs	r3, #1
 8004566:	b29a      	uxth	r2, r3
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004570:	b29b      	uxth	r3, r3
 8004572:	3b01      	subs	r3, #1
 8004574:	b29a      	uxth	r2, r3
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	695b      	ldr	r3, [r3, #20]
 8004580:	f003 0304 	and.w	r3, r3, #4
 8004584:	2b04      	cmp	r3, #4
 8004586:	d11b      	bne.n	80045c0 <HAL_I2C_Mem_Write+0x180>
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800458c:	2b00      	cmp	r3, #0
 800458e:	d017      	beq.n	80045c0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004594:	781a      	ldrb	r2, [r3, #0]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a0:	1c5a      	adds	r2, r3, #1
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045aa:	3b01      	subs	r3, #1
 80045ac:	b29a      	uxth	r2, r3
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	3b01      	subs	r3, #1
 80045ba:	b29a      	uxth	r2, r3
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d1aa      	bne.n	800451e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045c8:	697a      	ldr	r2, [r7, #20]
 80045ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80045cc:	68f8      	ldr	r0, [r7, #12]
 80045ce:	f002 f97a 	bl	80068c6 <I2C_WaitOnBTFFlagUntilTimeout>
 80045d2:	4603      	mov	r3, r0
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d00d      	beq.n	80045f4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045dc:	2b04      	cmp	r3, #4
 80045de:	d107      	bne.n	80045f0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045ee:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	e016      	b.n	8004622 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004602:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2220      	movs	r2, #32
 8004608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2200      	movs	r2, #0
 8004610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2200      	movs	r2, #0
 8004618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800461c:	2300      	movs	r3, #0
 800461e:	e000      	b.n	8004622 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004620:	2302      	movs	r3, #2
  }
}
 8004622:	4618      	mov	r0, r3
 8004624:	3718      	adds	r7, #24
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}
 800462a:	bf00      	nop
 800462c:	00100002 	.word	0x00100002
 8004630:	ffff0000 	.word	0xffff0000

08004634 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b08c      	sub	sp, #48	; 0x30
 8004638:	af02      	add	r7, sp, #8
 800463a:	60f8      	str	r0, [r7, #12]
 800463c:	4608      	mov	r0, r1
 800463e:	4611      	mov	r1, r2
 8004640:	461a      	mov	r2, r3
 8004642:	4603      	mov	r3, r0
 8004644:	817b      	strh	r3, [r7, #10]
 8004646:	460b      	mov	r3, r1
 8004648:	813b      	strh	r3, [r7, #8]
 800464a:	4613      	mov	r3, r2
 800464c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800464e:	f7fe fe91 	bl	8003374 <HAL_GetTick>
 8004652:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800465a:	b2db      	uxtb	r3, r3
 800465c:	2b20      	cmp	r3, #32
 800465e:	f040 8208 	bne.w	8004a72 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004664:	9300      	str	r3, [sp, #0]
 8004666:	2319      	movs	r3, #25
 8004668:	2201      	movs	r2, #1
 800466a:	497b      	ldr	r1, [pc, #492]	; (8004858 <HAL_I2C_Mem_Read+0x224>)
 800466c:	68f8      	ldr	r0, [r7, #12]
 800466e:	f002 f813 	bl	8006698 <I2C_WaitOnFlagUntilTimeout>
 8004672:	4603      	mov	r3, r0
 8004674:	2b00      	cmp	r3, #0
 8004676:	d001      	beq.n	800467c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004678:	2302      	movs	r3, #2
 800467a:	e1fb      	b.n	8004a74 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004682:	2b01      	cmp	r3, #1
 8004684:	d101      	bne.n	800468a <HAL_I2C_Mem_Read+0x56>
 8004686:	2302      	movs	r3, #2
 8004688:	e1f4      	b.n	8004a74 <HAL_I2C_Mem_Read+0x440>
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2201      	movs	r2, #1
 800468e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 0301 	and.w	r3, r3, #1
 800469c:	2b01      	cmp	r3, #1
 800469e:	d007      	beq.n	80046b0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f042 0201 	orr.w	r2, r2, #1
 80046ae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046be:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2222      	movs	r2, #34	; 0x22
 80046c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2240      	movs	r2, #64	; 0x40
 80046cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2200      	movs	r2, #0
 80046d4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80046e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046e6:	b29a      	uxth	r2, r3
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	4a5b      	ldr	r2, [pc, #364]	; (800485c <HAL_I2C_Mem_Read+0x228>)
 80046f0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80046f2:	88f8      	ldrh	r0, [r7, #6]
 80046f4:	893a      	ldrh	r2, [r7, #8]
 80046f6:	8979      	ldrh	r1, [r7, #10]
 80046f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fa:	9301      	str	r3, [sp, #4]
 80046fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046fe:	9300      	str	r3, [sp, #0]
 8004700:	4603      	mov	r3, r0
 8004702:	68f8      	ldr	r0, [r7, #12]
 8004704:	f001 fe38 	bl	8006378 <I2C_RequestMemoryRead>
 8004708:	4603      	mov	r3, r0
 800470a:	2b00      	cmp	r3, #0
 800470c:	d001      	beq.n	8004712 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	e1b0      	b.n	8004a74 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004716:	2b00      	cmp	r3, #0
 8004718:	d113      	bne.n	8004742 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800471a:	2300      	movs	r3, #0
 800471c:	623b      	str	r3, [r7, #32]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	695b      	ldr	r3, [r3, #20]
 8004724:	623b      	str	r3, [r7, #32]
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	699b      	ldr	r3, [r3, #24]
 800472c:	623b      	str	r3, [r7, #32]
 800472e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800473e:	601a      	str	r2, [r3, #0]
 8004740:	e184      	b.n	8004a4c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004746:	2b01      	cmp	r3, #1
 8004748:	d11b      	bne.n	8004782 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004758:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800475a:	2300      	movs	r3, #0
 800475c:	61fb      	str	r3, [r7, #28]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	695b      	ldr	r3, [r3, #20]
 8004764:	61fb      	str	r3, [r7, #28]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	699b      	ldr	r3, [r3, #24]
 800476c:	61fb      	str	r3, [r7, #28]
 800476e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800477e:	601a      	str	r2, [r3, #0]
 8004780:	e164      	b.n	8004a4c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004786:	2b02      	cmp	r3, #2
 8004788:	d11b      	bne.n	80047c2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004798:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047aa:	2300      	movs	r3, #0
 80047ac:	61bb      	str	r3, [r7, #24]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	695b      	ldr	r3, [r3, #20]
 80047b4:	61bb      	str	r3, [r7, #24]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	699b      	ldr	r3, [r3, #24]
 80047bc:	61bb      	str	r3, [r7, #24]
 80047be:	69bb      	ldr	r3, [r7, #24]
 80047c0:	e144      	b.n	8004a4c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047c2:	2300      	movs	r3, #0
 80047c4:	617b      	str	r3, [r7, #20]
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	695b      	ldr	r3, [r3, #20]
 80047cc:	617b      	str	r3, [r7, #20]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	699b      	ldr	r3, [r3, #24]
 80047d4:	617b      	str	r3, [r7, #20]
 80047d6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80047d8:	e138      	b.n	8004a4c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047de:	2b03      	cmp	r3, #3
 80047e0:	f200 80f1 	bhi.w	80049c6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d123      	bne.n	8004834 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047ee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80047f0:	68f8      	ldr	r0, [r7, #12]
 80047f2:	f002 f8db 	bl	80069ac <I2C_WaitOnRXNEFlagUntilTimeout>
 80047f6:	4603      	mov	r3, r0
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d001      	beq.n	8004800 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	e139      	b.n	8004a74 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	691a      	ldr	r2, [r3, #16]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480a:	b2d2      	uxtb	r2, r2
 800480c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004812:	1c5a      	adds	r2, r3, #1
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800481c:	3b01      	subs	r3, #1
 800481e:	b29a      	uxth	r2, r3
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004828:	b29b      	uxth	r3, r3
 800482a:	3b01      	subs	r3, #1
 800482c:	b29a      	uxth	r2, r3
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004832:	e10b      	b.n	8004a4c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004838:	2b02      	cmp	r3, #2
 800483a:	d14e      	bne.n	80048da <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800483c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800483e:	9300      	str	r3, [sp, #0]
 8004840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004842:	2200      	movs	r2, #0
 8004844:	4906      	ldr	r1, [pc, #24]	; (8004860 <HAL_I2C_Mem_Read+0x22c>)
 8004846:	68f8      	ldr	r0, [r7, #12]
 8004848:	f001 ff26 	bl	8006698 <I2C_WaitOnFlagUntilTimeout>
 800484c:	4603      	mov	r3, r0
 800484e:	2b00      	cmp	r3, #0
 8004850:	d008      	beq.n	8004864 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e10e      	b.n	8004a74 <HAL_I2C_Mem_Read+0x440>
 8004856:	bf00      	nop
 8004858:	00100002 	.word	0x00100002
 800485c:	ffff0000 	.word	0xffff0000
 8004860:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004872:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	691a      	ldr	r2, [r3, #16]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487e:	b2d2      	uxtb	r2, r2
 8004880:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004886:	1c5a      	adds	r2, r3, #1
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004890:	3b01      	subs	r3, #1
 8004892:	b29a      	uxth	r2, r3
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800489c:	b29b      	uxth	r3, r3
 800489e:	3b01      	subs	r3, #1
 80048a0:	b29a      	uxth	r2, r3
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	691a      	ldr	r2, [r3, #16]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b0:	b2d2      	uxtb	r2, r2
 80048b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b8:	1c5a      	adds	r2, r3, #1
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048c2:	3b01      	subs	r3, #1
 80048c4:	b29a      	uxth	r2, r3
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	3b01      	subs	r3, #1
 80048d2:	b29a      	uxth	r2, r3
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80048d8:	e0b8      	b.n	8004a4c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80048da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048dc:	9300      	str	r3, [sp, #0]
 80048de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048e0:	2200      	movs	r2, #0
 80048e2:	4966      	ldr	r1, [pc, #408]	; (8004a7c <HAL_I2C_Mem_Read+0x448>)
 80048e4:	68f8      	ldr	r0, [r7, #12]
 80048e6:	f001 fed7 	bl	8006698 <I2C_WaitOnFlagUntilTimeout>
 80048ea:	4603      	mov	r3, r0
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d001      	beq.n	80048f4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	e0bf      	b.n	8004a74 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004902:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	691a      	ldr	r2, [r3, #16]
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490e:	b2d2      	uxtb	r2, r2
 8004910:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004916:	1c5a      	adds	r2, r3, #1
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004920:	3b01      	subs	r3, #1
 8004922:	b29a      	uxth	r2, r3
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800492c:	b29b      	uxth	r3, r3
 800492e:	3b01      	subs	r3, #1
 8004930:	b29a      	uxth	r2, r3
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004938:	9300      	str	r3, [sp, #0]
 800493a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800493c:	2200      	movs	r2, #0
 800493e:	494f      	ldr	r1, [pc, #316]	; (8004a7c <HAL_I2C_Mem_Read+0x448>)
 8004940:	68f8      	ldr	r0, [r7, #12]
 8004942:	f001 fea9 	bl	8006698 <I2C_WaitOnFlagUntilTimeout>
 8004946:	4603      	mov	r3, r0
 8004948:	2b00      	cmp	r3, #0
 800494a:	d001      	beq.n	8004950 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	e091      	b.n	8004a74 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800495e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	691a      	ldr	r2, [r3, #16]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496a:	b2d2      	uxtb	r2, r2
 800496c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004972:	1c5a      	adds	r2, r3, #1
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800497c:	3b01      	subs	r3, #1
 800497e:	b29a      	uxth	r2, r3
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004988:	b29b      	uxth	r3, r3
 800498a:	3b01      	subs	r3, #1
 800498c:	b29a      	uxth	r2, r3
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	691a      	ldr	r2, [r3, #16]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499c:	b2d2      	uxtb	r2, r2
 800499e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a4:	1c5a      	adds	r2, r3, #1
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049ae:	3b01      	subs	r3, #1
 80049b0:	b29a      	uxth	r2, r3
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	3b01      	subs	r3, #1
 80049be:	b29a      	uxth	r2, r3
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80049c4:	e042      	b.n	8004a4c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049c8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80049ca:	68f8      	ldr	r0, [r7, #12]
 80049cc:	f001 ffee 	bl	80069ac <I2C_WaitOnRXNEFlagUntilTimeout>
 80049d0:	4603      	mov	r3, r0
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d001      	beq.n	80049da <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e04c      	b.n	8004a74 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	691a      	ldr	r2, [r3, #16]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e4:	b2d2      	uxtb	r2, r2
 80049e6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ec:	1c5a      	adds	r2, r3, #1
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049f6:	3b01      	subs	r3, #1
 80049f8:	b29a      	uxth	r2, r3
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	3b01      	subs	r3, #1
 8004a06:	b29a      	uxth	r2, r3
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	695b      	ldr	r3, [r3, #20]
 8004a12:	f003 0304 	and.w	r3, r3, #4
 8004a16:	2b04      	cmp	r3, #4
 8004a18:	d118      	bne.n	8004a4c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	691a      	ldr	r2, [r3, #16]
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a24:	b2d2      	uxtb	r2, r2
 8004a26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2c:	1c5a      	adds	r2, r3, #1
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a36:	3b01      	subs	r3, #1
 8004a38:	b29a      	uxth	r2, r3
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	3b01      	subs	r3, #1
 8004a46:	b29a      	uxth	r2, r3
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	f47f aec2 	bne.w	80047da <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2220      	movs	r2, #32
 8004a5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2200      	movs	r2, #0
 8004a62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	e000      	b.n	8004a74 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004a72:	2302      	movs	r3, #2
  }
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3728      	adds	r7, #40	; 0x28
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}
 8004a7c:	00010004 	.word	0x00010004

08004a80 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b088      	sub	sp, #32
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a98:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004aa0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004aa8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004aaa:	7bfb      	ldrb	r3, [r7, #15]
 8004aac:	2b10      	cmp	r3, #16
 8004aae:	d003      	beq.n	8004ab8 <HAL_I2C_EV_IRQHandler+0x38>
 8004ab0:	7bfb      	ldrb	r3, [r7, #15]
 8004ab2:	2b40      	cmp	r3, #64	; 0x40
 8004ab4:	f040 80c1 	bne.w	8004c3a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	699b      	ldr	r3, [r3, #24]
 8004abe:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	695b      	ldr	r3, [r3, #20]
 8004ac6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004ac8:	69fb      	ldr	r3, [r7, #28]
 8004aca:	f003 0301 	and.w	r3, r3, #1
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d10d      	bne.n	8004aee <HAL_I2C_EV_IRQHandler+0x6e>
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004ad8:	d003      	beq.n	8004ae2 <HAL_I2C_EV_IRQHandler+0x62>
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004ae0:	d101      	bne.n	8004ae6 <HAL_I2C_EV_IRQHandler+0x66>
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e000      	b.n	8004ae8 <HAL_I2C_EV_IRQHandler+0x68>
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	f000 8132 	beq.w	8004d52 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004aee:	69fb      	ldr	r3, [r7, #28]
 8004af0:	f003 0301 	and.w	r3, r3, #1
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d00c      	beq.n	8004b12 <HAL_I2C_EV_IRQHandler+0x92>
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	0a5b      	lsrs	r3, r3, #9
 8004afc:	f003 0301 	and.w	r3, r3, #1
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d006      	beq.n	8004b12 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f001 ffd6 	bl	8006ab6 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f000 fd83 	bl	8005616 <I2C_Master_SB>
 8004b10:	e092      	b.n	8004c38 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004b12:	69fb      	ldr	r3, [r7, #28]
 8004b14:	08db      	lsrs	r3, r3, #3
 8004b16:	f003 0301 	and.w	r3, r3, #1
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d009      	beq.n	8004b32 <HAL_I2C_EV_IRQHandler+0xb2>
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	0a5b      	lsrs	r3, r3, #9
 8004b22:	f003 0301 	and.w	r3, r3, #1
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d003      	beq.n	8004b32 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f000 fdf9 	bl	8005722 <I2C_Master_ADD10>
 8004b30:	e082      	b.n	8004c38 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004b32:	69fb      	ldr	r3, [r7, #28]
 8004b34:	085b      	lsrs	r3, r3, #1
 8004b36:	f003 0301 	and.w	r3, r3, #1
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d009      	beq.n	8004b52 <HAL_I2C_EV_IRQHandler+0xd2>
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	0a5b      	lsrs	r3, r3, #9
 8004b42:	f003 0301 	and.w	r3, r3, #1
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d003      	beq.n	8004b52 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f000 fe13 	bl	8005776 <I2C_Master_ADDR>
 8004b50:	e072      	b.n	8004c38 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004b52:	69bb      	ldr	r3, [r7, #24]
 8004b54:	089b      	lsrs	r3, r3, #2
 8004b56:	f003 0301 	and.w	r3, r3, #1
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d03b      	beq.n	8004bd6 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b6c:	f000 80f3 	beq.w	8004d56 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004b70:	69fb      	ldr	r3, [r7, #28]
 8004b72:	09db      	lsrs	r3, r3, #7
 8004b74:	f003 0301 	and.w	r3, r3, #1
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d00f      	beq.n	8004b9c <HAL_I2C_EV_IRQHandler+0x11c>
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	0a9b      	lsrs	r3, r3, #10
 8004b80:	f003 0301 	and.w	r3, r3, #1
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d009      	beq.n	8004b9c <HAL_I2C_EV_IRQHandler+0x11c>
 8004b88:	69fb      	ldr	r3, [r7, #28]
 8004b8a:	089b      	lsrs	r3, r3, #2
 8004b8c:	f003 0301 	and.w	r3, r3, #1
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d103      	bne.n	8004b9c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f000 f9f3 	bl	8004f80 <I2C_MasterTransmit_TXE>
 8004b9a:	e04d      	b.n	8004c38 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004b9c:	69fb      	ldr	r3, [r7, #28]
 8004b9e:	089b      	lsrs	r3, r3, #2
 8004ba0:	f003 0301 	and.w	r3, r3, #1
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	f000 80d6 	beq.w	8004d56 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	0a5b      	lsrs	r3, r3, #9
 8004bae:	f003 0301 	and.w	r3, r3, #1
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	f000 80cf 	beq.w	8004d56 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004bb8:	7bbb      	ldrb	r3, [r7, #14]
 8004bba:	2b21      	cmp	r3, #33	; 0x21
 8004bbc:	d103      	bne.n	8004bc6 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f000 fa7a 	bl	80050b8 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004bc4:	e0c7      	b.n	8004d56 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8004bc6:	7bfb      	ldrb	r3, [r7, #15]
 8004bc8:	2b40      	cmp	r3, #64	; 0x40
 8004bca:	f040 80c4 	bne.w	8004d56 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f000 fae8 	bl	80051a4 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004bd4:	e0bf      	b.n	8004d56 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004be0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004be4:	f000 80b7 	beq.w	8004d56 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004be8:	69fb      	ldr	r3, [r7, #28]
 8004bea:	099b      	lsrs	r3, r3, #6
 8004bec:	f003 0301 	and.w	r3, r3, #1
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d00f      	beq.n	8004c14 <HAL_I2C_EV_IRQHandler+0x194>
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	0a9b      	lsrs	r3, r3, #10
 8004bf8:	f003 0301 	and.w	r3, r3, #1
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d009      	beq.n	8004c14 <HAL_I2C_EV_IRQHandler+0x194>
 8004c00:	69fb      	ldr	r3, [r7, #28]
 8004c02:	089b      	lsrs	r3, r3, #2
 8004c04:	f003 0301 	and.w	r3, r3, #1
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d103      	bne.n	8004c14 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f000 fb5d 	bl	80052cc <I2C_MasterReceive_RXNE>
 8004c12:	e011      	b.n	8004c38 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004c14:	69fb      	ldr	r3, [r7, #28]
 8004c16:	089b      	lsrs	r3, r3, #2
 8004c18:	f003 0301 	and.w	r3, r3, #1
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	f000 809a 	beq.w	8004d56 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	0a5b      	lsrs	r3, r3, #9
 8004c26:	f003 0301 	and.w	r3, r3, #1
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	f000 8093 	beq.w	8004d56 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f000 fc06 	bl	8005442 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004c36:	e08e      	b.n	8004d56 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004c38:	e08d      	b.n	8004d56 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d004      	beq.n	8004c4c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	695b      	ldr	r3, [r3, #20]
 8004c48:	61fb      	str	r3, [r7, #28]
 8004c4a:	e007      	b.n	8004c5c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	699b      	ldr	r3, [r3, #24]
 8004c52:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	695b      	ldr	r3, [r3, #20]
 8004c5a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004c5c:	69fb      	ldr	r3, [r7, #28]
 8004c5e:	085b      	lsrs	r3, r3, #1
 8004c60:	f003 0301 	and.w	r3, r3, #1
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d012      	beq.n	8004c8e <HAL_I2C_EV_IRQHandler+0x20e>
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	0a5b      	lsrs	r3, r3, #9
 8004c6c:	f003 0301 	and.w	r3, r3, #1
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d00c      	beq.n	8004c8e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d003      	beq.n	8004c84 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	699b      	ldr	r3, [r3, #24]
 8004c82:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004c84:	69b9      	ldr	r1, [r7, #24]
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f000 ffc4 	bl	8005c14 <I2C_Slave_ADDR>
 8004c8c:	e066      	b.n	8004d5c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004c8e:	69fb      	ldr	r3, [r7, #28]
 8004c90:	091b      	lsrs	r3, r3, #4
 8004c92:	f003 0301 	and.w	r3, r3, #1
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d009      	beq.n	8004cae <HAL_I2C_EV_IRQHandler+0x22e>
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	0a5b      	lsrs	r3, r3, #9
 8004c9e:	f003 0301 	and.w	r3, r3, #1
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d003      	beq.n	8004cae <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f000 fffe 	bl	8005ca8 <I2C_Slave_STOPF>
 8004cac:	e056      	b.n	8004d5c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004cae:	7bbb      	ldrb	r3, [r7, #14]
 8004cb0:	2b21      	cmp	r3, #33	; 0x21
 8004cb2:	d002      	beq.n	8004cba <HAL_I2C_EV_IRQHandler+0x23a>
 8004cb4:	7bbb      	ldrb	r3, [r7, #14]
 8004cb6:	2b29      	cmp	r3, #41	; 0x29
 8004cb8:	d125      	bne.n	8004d06 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004cba:	69fb      	ldr	r3, [r7, #28]
 8004cbc:	09db      	lsrs	r3, r3, #7
 8004cbe:	f003 0301 	and.w	r3, r3, #1
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d00f      	beq.n	8004ce6 <HAL_I2C_EV_IRQHandler+0x266>
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	0a9b      	lsrs	r3, r3, #10
 8004cca:	f003 0301 	and.w	r3, r3, #1
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d009      	beq.n	8004ce6 <HAL_I2C_EV_IRQHandler+0x266>
 8004cd2:	69fb      	ldr	r3, [r7, #28]
 8004cd4:	089b      	lsrs	r3, r3, #2
 8004cd6:	f003 0301 	and.w	r3, r3, #1
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d103      	bne.n	8004ce6 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f000 feda 	bl	8005a98 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004ce4:	e039      	b.n	8004d5a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004ce6:	69fb      	ldr	r3, [r7, #28]
 8004ce8:	089b      	lsrs	r3, r3, #2
 8004cea:	f003 0301 	and.w	r3, r3, #1
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d033      	beq.n	8004d5a <HAL_I2C_EV_IRQHandler+0x2da>
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	0a5b      	lsrs	r3, r3, #9
 8004cf6:	f003 0301 	and.w	r3, r3, #1
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d02d      	beq.n	8004d5a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f000 ff07 	bl	8005b12 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004d04:	e029      	b.n	8004d5a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004d06:	69fb      	ldr	r3, [r7, #28]
 8004d08:	099b      	lsrs	r3, r3, #6
 8004d0a:	f003 0301 	and.w	r3, r3, #1
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d00f      	beq.n	8004d32 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	0a9b      	lsrs	r3, r3, #10
 8004d16:	f003 0301 	and.w	r3, r3, #1
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d009      	beq.n	8004d32 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004d1e:	69fb      	ldr	r3, [r7, #28]
 8004d20:	089b      	lsrs	r3, r3, #2
 8004d22:	f003 0301 	and.w	r3, r3, #1
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d103      	bne.n	8004d32 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f000 ff12 	bl	8005b54 <I2C_SlaveReceive_RXNE>
 8004d30:	e014      	b.n	8004d5c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004d32:	69fb      	ldr	r3, [r7, #28]
 8004d34:	089b      	lsrs	r3, r3, #2
 8004d36:	f003 0301 	and.w	r3, r3, #1
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d00e      	beq.n	8004d5c <HAL_I2C_EV_IRQHandler+0x2dc>
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	0a5b      	lsrs	r3, r3, #9
 8004d42:	f003 0301 	and.w	r3, r3, #1
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d008      	beq.n	8004d5c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f000 ff40 	bl	8005bd0 <I2C_SlaveReceive_BTF>
 8004d50:	e004      	b.n	8004d5c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8004d52:	bf00      	nop
 8004d54:	e002      	b.n	8004d5c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004d56:	bf00      	nop
 8004d58:	e000      	b.n	8004d5c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004d5a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004d5c:	3720      	adds	r7, #32
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}

08004d62 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004d62:	b580      	push	{r7, lr}
 8004d64:	b08a      	sub	sp, #40	; 0x28
 8004d66:	af00      	add	r7, sp, #0
 8004d68:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	695b      	ldr	r3, [r3, #20]
 8004d70:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d84:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004d86:	6a3b      	ldr	r3, [r7, #32]
 8004d88:	0a1b      	lsrs	r3, r3, #8
 8004d8a:	f003 0301 	and.w	r3, r3, #1
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d00e      	beq.n	8004db0 <HAL_I2C_ER_IRQHandler+0x4e>
 8004d92:	69fb      	ldr	r3, [r7, #28]
 8004d94:	0a1b      	lsrs	r3, r3, #8
 8004d96:	f003 0301 	and.w	r3, r3, #1
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d008      	beq.n	8004db0 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8004d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da0:	f043 0301 	orr.w	r3, r3, #1
 8004da4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004dae:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004db0:	6a3b      	ldr	r3, [r7, #32]
 8004db2:	0a5b      	lsrs	r3, r3, #9
 8004db4:	f003 0301 	and.w	r3, r3, #1
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d00e      	beq.n	8004dda <HAL_I2C_ER_IRQHandler+0x78>
 8004dbc:	69fb      	ldr	r3, [r7, #28]
 8004dbe:	0a1b      	lsrs	r3, r3, #8
 8004dc0:	f003 0301 	and.w	r3, r3, #1
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d008      	beq.n	8004dda <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dca:	f043 0302 	orr.w	r3, r3, #2
 8004dce:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8004dd8:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004dda:	6a3b      	ldr	r3, [r7, #32]
 8004ddc:	0a9b      	lsrs	r3, r3, #10
 8004dde:	f003 0301 	and.w	r3, r3, #1
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d03f      	beq.n	8004e66 <HAL_I2C_ER_IRQHandler+0x104>
 8004de6:	69fb      	ldr	r3, [r7, #28]
 8004de8:	0a1b      	lsrs	r3, r3, #8
 8004dea:	f003 0301 	and.w	r3, r3, #1
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d039      	beq.n	8004e66 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8004df2:	7efb      	ldrb	r3, [r7, #27]
 8004df4:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e04:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e0a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004e0c:	7ebb      	ldrb	r3, [r7, #26]
 8004e0e:	2b20      	cmp	r3, #32
 8004e10:	d112      	bne.n	8004e38 <HAL_I2C_ER_IRQHandler+0xd6>
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d10f      	bne.n	8004e38 <HAL_I2C_ER_IRQHandler+0xd6>
 8004e18:	7cfb      	ldrb	r3, [r7, #19]
 8004e1a:	2b21      	cmp	r3, #33	; 0x21
 8004e1c:	d008      	beq.n	8004e30 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004e1e:	7cfb      	ldrb	r3, [r7, #19]
 8004e20:	2b29      	cmp	r3, #41	; 0x29
 8004e22:	d005      	beq.n	8004e30 <HAL_I2C_ER_IRQHandler+0xce>
 8004e24:	7cfb      	ldrb	r3, [r7, #19]
 8004e26:	2b28      	cmp	r3, #40	; 0x28
 8004e28:	d106      	bne.n	8004e38 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2b21      	cmp	r3, #33	; 0x21
 8004e2e:	d103      	bne.n	8004e38 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f001 f869 	bl	8005f08 <I2C_Slave_AF>
 8004e36:	e016      	b.n	8004e66 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004e40:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8004e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e44:	f043 0304 	orr.w	r3, r3, #4
 8004e48:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004e4a:	7efb      	ldrb	r3, [r7, #27]
 8004e4c:	2b10      	cmp	r3, #16
 8004e4e:	d002      	beq.n	8004e56 <HAL_I2C_ER_IRQHandler+0xf4>
 8004e50:	7efb      	ldrb	r3, [r7, #27]
 8004e52:	2b40      	cmp	r3, #64	; 0x40
 8004e54:	d107      	bne.n	8004e66 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e64:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004e66:	6a3b      	ldr	r3, [r7, #32]
 8004e68:	0adb      	lsrs	r3, r3, #11
 8004e6a:	f003 0301 	and.w	r3, r3, #1
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d00e      	beq.n	8004e90 <HAL_I2C_ER_IRQHandler+0x12e>
 8004e72:	69fb      	ldr	r3, [r7, #28]
 8004e74:	0a1b      	lsrs	r3, r3, #8
 8004e76:	f003 0301 	and.w	r3, r3, #1
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d008      	beq.n	8004e90 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8004e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e80:	f043 0308 	orr.w	r3, r3, #8
 8004e84:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8004e8e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d008      	beq.n	8004ea8 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9c:	431a      	orrs	r2, r3
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f001 f8a0 	bl	8005fe8 <I2C_ITError>
  }
}
 8004ea8:	bf00      	nop
 8004eaa:	3728      	adds	r7, #40	; 0x28
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}

08004eb0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b083      	sub	sp, #12
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004eb8:	bf00      	nop
 8004eba:	370c      	adds	r7, #12
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr

08004ec4 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b083      	sub	sp, #12
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004ecc:	bf00      	nop
 8004ece:	370c      	adds	r7, #12
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr

08004ed8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b083      	sub	sp, #12
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004ee0:	bf00      	nop
 8004ee2:	370c      	adds	r7, #12
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eea:	4770      	bx	lr

08004eec <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b083      	sub	sp, #12
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004ef4:	bf00      	nop
 8004ef6:	370c      	adds	r7, #12
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr

08004f00 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b083      	sub	sp, #12
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
 8004f08:	460b      	mov	r3, r1
 8004f0a:	70fb      	strb	r3, [r7, #3]
 8004f0c:	4613      	mov	r3, r2
 8004f0e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004f10:	bf00      	nop
 8004f12:	370c      	adds	r7, #12
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr

08004f1c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b083      	sub	sp, #12
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004f24:	bf00      	nop
 8004f26:	370c      	adds	r7, #12
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2e:	4770      	bx	lr

08004f30 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b083      	sub	sp, #12
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004f38:	bf00      	nop
 8004f3a:	370c      	adds	r7, #12
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f42:	4770      	bx	lr

08004f44 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b083      	sub	sp, #12
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004f4c:	bf00      	nop
 8004f4e:	370c      	adds	r7, #12
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr

08004f58 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b083      	sub	sp, #12
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004f60:	bf00      	nop
 8004f62:	370c      	adds	r7, #12
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr

08004f6c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b083      	sub	sp, #12
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004f74:	bf00      	nop
 8004f76:	370c      	adds	r7, #12
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr

08004f80 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b084      	sub	sp, #16
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f8e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f96:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f9c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d150      	bne.n	8005048 <I2C_MasterTransmit_TXE+0xc8>
 8004fa6:	7bfb      	ldrb	r3, [r7, #15]
 8004fa8:	2b21      	cmp	r3, #33	; 0x21
 8004faa:	d14d      	bne.n	8005048 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	2b08      	cmp	r3, #8
 8004fb0:	d01d      	beq.n	8004fee <I2C_MasterTransmit_TXE+0x6e>
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	2b20      	cmp	r3, #32
 8004fb6:	d01a      	beq.n	8004fee <I2C_MasterTransmit_TXE+0x6e>
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004fbe:	d016      	beq.n	8004fee <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	685a      	ldr	r2, [r3, #4]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004fce:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2211      	movs	r2, #17
 8004fd4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2220      	movs	r2, #32
 8004fe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f7ff ff62 	bl	8004eb0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004fec:	e060      	b.n	80050b0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	685a      	ldr	r2, [r3, #4]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004ffc:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800500c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2200      	movs	r2, #0
 8005012:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2220      	movs	r2, #32
 8005018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005022:	b2db      	uxtb	r3, r3
 8005024:	2b40      	cmp	r3, #64	; 0x40
 8005026:	d107      	bne.n	8005038 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2200      	movs	r2, #0
 800502c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f7ff ff7d 	bl	8004f30 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005036:	e03b      	b.n	80050b0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2200      	movs	r2, #0
 800503c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f7ff ff35 	bl	8004eb0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005046:	e033      	b.n	80050b0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8005048:	7bfb      	ldrb	r3, [r7, #15]
 800504a:	2b21      	cmp	r3, #33	; 0x21
 800504c:	d005      	beq.n	800505a <I2C_MasterTransmit_TXE+0xda>
 800504e:	7bbb      	ldrb	r3, [r7, #14]
 8005050:	2b40      	cmp	r3, #64	; 0x40
 8005052:	d12d      	bne.n	80050b0 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005054:	7bfb      	ldrb	r3, [r7, #15]
 8005056:	2b22      	cmp	r3, #34	; 0x22
 8005058:	d12a      	bne.n	80050b0 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800505e:	b29b      	uxth	r3, r3
 8005060:	2b00      	cmp	r3, #0
 8005062:	d108      	bne.n	8005076 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	685a      	ldr	r2, [r3, #4]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005072:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005074:	e01c      	b.n	80050b0 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800507c:	b2db      	uxtb	r3, r3
 800507e:	2b40      	cmp	r3, #64	; 0x40
 8005080:	d103      	bne.n	800508a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f000 f88e 	bl	80051a4 <I2C_MemoryTransmit_TXE_BTF>
}
 8005088:	e012      	b.n	80050b0 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800508e:	781a      	ldrb	r2, [r3, #0]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509a:	1c5a      	adds	r2, r3, #1
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050a4:	b29b      	uxth	r3, r3
 80050a6:	3b01      	subs	r3, #1
 80050a8:	b29a      	uxth	r2, r3
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80050ae:	e7ff      	b.n	80050b0 <I2C_MasterTransmit_TXE+0x130>
 80050b0:	bf00      	nop
 80050b2:	3710      	adds	r7, #16
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}

080050b8 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b084      	sub	sp, #16
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c4:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	2b21      	cmp	r3, #33	; 0x21
 80050d0:	d164      	bne.n	800519c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050d6:	b29b      	uxth	r3, r3
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d012      	beq.n	8005102 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e0:	781a      	ldrb	r2, [r3, #0]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ec:	1c5a      	adds	r2, r3, #1
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	3b01      	subs	r3, #1
 80050fa:	b29a      	uxth	r2, r3
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8005100:	e04c      	b.n	800519c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2b08      	cmp	r3, #8
 8005106:	d01d      	beq.n	8005144 <I2C_MasterTransmit_BTF+0x8c>
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2b20      	cmp	r3, #32
 800510c:	d01a      	beq.n	8005144 <I2C_MasterTransmit_BTF+0x8c>
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005114:	d016      	beq.n	8005144 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	685a      	ldr	r2, [r3, #4]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005124:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2211      	movs	r2, #17
 800512a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2200      	movs	r2, #0
 8005130:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2220      	movs	r2, #32
 8005138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f7ff feb7 	bl	8004eb0 <HAL_I2C_MasterTxCpltCallback>
}
 8005142:	e02b      	b.n	800519c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	685a      	ldr	r2, [r3, #4]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005152:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005162:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2200      	movs	r2, #0
 8005168:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2220      	movs	r2, #32
 800516e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005178:	b2db      	uxtb	r3, r3
 800517a:	2b40      	cmp	r3, #64	; 0x40
 800517c:	d107      	bne.n	800518e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2200      	movs	r2, #0
 8005182:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f7ff fed2 	bl	8004f30 <HAL_I2C_MemTxCpltCallback>
}
 800518c:	e006      	b.n	800519c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2200      	movs	r2, #0
 8005192:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f7ff fe8a 	bl	8004eb0 <HAL_I2C_MasterTxCpltCallback>
}
 800519c:	bf00      	nop
 800519e:	3710      	adds	r7, #16
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}

080051a4 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b084      	sub	sp, #16
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051b2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d11d      	bne.n	80051f8 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d10b      	bne.n	80051dc <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051c8:	b2da      	uxtb	r2, r3
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051d4:	1c9a      	adds	r2, r3, #2
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80051da:	e073      	b.n	80052c4 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051e0:	b29b      	uxth	r3, r3
 80051e2:	121b      	asrs	r3, r3, #8
 80051e4:	b2da      	uxtb	r2, r3
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051f0:	1c5a      	adds	r2, r3, #1
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80051f6:	e065      	b.n	80052c4 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d10b      	bne.n	8005218 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005204:	b2da      	uxtb	r2, r3
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005210:	1c5a      	adds	r2, r3, #1
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005216:	e055      	b.n	80052c4 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800521c:	2b02      	cmp	r3, #2
 800521e:	d151      	bne.n	80052c4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8005220:	7bfb      	ldrb	r3, [r7, #15]
 8005222:	2b22      	cmp	r3, #34	; 0x22
 8005224:	d10d      	bne.n	8005242 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005234:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800523a:	1c5a      	adds	r2, r3, #1
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005240:	e040      	b.n	80052c4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005246:	b29b      	uxth	r3, r3
 8005248:	2b00      	cmp	r3, #0
 800524a:	d015      	beq.n	8005278 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800524c:	7bfb      	ldrb	r3, [r7, #15]
 800524e:	2b21      	cmp	r3, #33	; 0x21
 8005250:	d112      	bne.n	8005278 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005256:	781a      	ldrb	r2, [r3, #0]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005262:	1c5a      	adds	r2, r3, #1
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800526c:	b29b      	uxth	r3, r3
 800526e:	3b01      	subs	r3, #1
 8005270:	b29a      	uxth	r2, r3
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005276:	e025      	b.n	80052c4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800527c:	b29b      	uxth	r3, r3
 800527e:	2b00      	cmp	r3, #0
 8005280:	d120      	bne.n	80052c4 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8005282:	7bfb      	ldrb	r3, [r7, #15]
 8005284:	2b21      	cmp	r3, #33	; 0x21
 8005286:	d11d      	bne.n	80052c4 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	685a      	ldr	r2, [r3, #4]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005296:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052a6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2200      	movs	r2, #0
 80052ac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2220      	movs	r2, #32
 80052b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2200      	movs	r2, #0
 80052ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f7ff fe36 	bl	8004f30 <HAL_I2C_MemTxCpltCallback>
}
 80052c4:	bf00      	nop
 80052c6:	3710      	adds	r7, #16
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}

080052cc <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b084      	sub	sp, #16
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	2b22      	cmp	r3, #34	; 0x22
 80052de:	f040 80ac 	bne.w	800543a <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2b03      	cmp	r3, #3
 80052ee:	d921      	bls.n	8005334 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	691a      	ldr	r2, [r3, #16]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052fa:	b2d2      	uxtb	r2, r2
 80052fc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005302:	1c5a      	adds	r2, r3, #1
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800530c:	b29b      	uxth	r3, r3
 800530e:	3b01      	subs	r3, #1
 8005310:	b29a      	uxth	r2, r3
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800531a:	b29b      	uxth	r3, r3
 800531c:	2b03      	cmp	r3, #3
 800531e:	f040 808c 	bne.w	800543a <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	685a      	ldr	r2, [r3, #4]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005330:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8005332:	e082      	b.n	800543a <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005338:	2b02      	cmp	r3, #2
 800533a:	d075      	beq.n	8005428 <I2C_MasterReceive_RXNE+0x15c>
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2b01      	cmp	r3, #1
 8005340:	d002      	beq.n	8005348 <I2C_MasterReceive_RXNE+0x7c>
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d16f      	bne.n	8005428 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	f001 fafd 	bl	8006948 <I2C_WaitOnSTOPRequestThroughIT>
 800534e:	4603      	mov	r3, r0
 8005350:	2b00      	cmp	r3, #0
 8005352:	d142      	bne.n	80053da <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	681a      	ldr	r2, [r3, #0]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005362:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	685a      	ldr	r2, [r3, #4]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005372:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	691a      	ldr	r2, [r3, #16]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537e:	b2d2      	uxtb	r2, r2
 8005380:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005386:	1c5a      	adds	r2, r3, #1
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005390:	b29b      	uxth	r3, r3
 8005392:	3b01      	subs	r3, #1
 8005394:	b29a      	uxth	r2, r3
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2220      	movs	r2, #32
 800539e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80053a8:	b2db      	uxtb	r3, r3
 80053aa:	2b40      	cmp	r3, #64	; 0x40
 80053ac:	d10a      	bne.n	80053c4 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2200      	movs	r2, #0
 80053b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2200      	movs	r2, #0
 80053ba:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f7ff fdc1 	bl	8004f44 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80053c2:	e03a      	b.n	800543a <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2200      	movs	r2, #0
 80053c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2212      	movs	r2, #18
 80053d0:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f7ff fd76 	bl	8004ec4 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80053d8:	e02f      	b.n	800543a <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	685a      	ldr	r2, [r3, #4]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80053e8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	691a      	ldr	r2, [r3, #16]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f4:	b2d2      	uxtb	r2, r2
 80053f6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053fc:	1c5a      	adds	r2, r3, #1
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005406:	b29b      	uxth	r3, r3
 8005408:	3b01      	subs	r3, #1
 800540a:	b29a      	uxth	r2, r3
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2220      	movs	r2, #32
 8005414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2200      	movs	r2, #0
 800541c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f7ff fd99 	bl	8004f58 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005426:	e008      	b.n	800543a <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	685a      	ldr	r2, [r3, #4]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005436:	605a      	str	r2, [r3, #4]
}
 8005438:	e7ff      	b.n	800543a <I2C_MasterReceive_RXNE+0x16e>
 800543a:	bf00      	nop
 800543c:	3710      	adds	r7, #16
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}

08005442 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005442:	b580      	push	{r7, lr}
 8005444:	b084      	sub	sp, #16
 8005446:	af00      	add	r7, sp, #0
 8005448:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800544e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005454:	b29b      	uxth	r3, r3
 8005456:	2b04      	cmp	r3, #4
 8005458:	d11b      	bne.n	8005492 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	685a      	ldr	r2, [r3, #4]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005468:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	691a      	ldr	r2, [r3, #16]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005474:	b2d2      	uxtb	r2, r2
 8005476:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800547c:	1c5a      	adds	r2, r3, #1
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005486:	b29b      	uxth	r3, r3
 8005488:	3b01      	subs	r3, #1
 800548a:	b29a      	uxth	r2, r3
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005490:	e0bd      	b.n	800560e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005496:	b29b      	uxth	r3, r3
 8005498:	2b03      	cmp	r3, #3
 800549a:	d129      	bne.n	80054f0 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	685a      	ldr	r2, [r3, #4]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054aa:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2b04      	cmp	r3, #4
 80054b0:	d00a      	beq.n	80054c8 <I2C_MasterReceive_BTF+0x86>
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2b02      	cmp	r3, #2
 80054b6:	d007      	beq.n	80054c8 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	681a      	ldr	r2, [r3, #0]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054c6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	691a      	ldr	r2, [r3, #16]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d2:	b2d2      	uxtb	r2, r2
 80054d4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054da:	1c5a      	adds	r2, r3, #1
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054e4:	b29b      	uxth	r3, r3
 80054e6:	3b01      	subs	r3, #1
 80054e8:	b29a      	uxth	r2, r3
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80054ee:	e08e      	b.n	800560e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054f4:	b29b      	uxth	r3, r3
 80054f6:	2b02      	cmp	r3, #2
 80054f8:	d176      	bne.n	80055e8 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d002      	beq.n	8005506 <I2C_MasterReceive_BTF+0xc4>
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2b10      	cmp	r3, #16
 8005504:	d108      	bne.n	8005518 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005514:	601a      	str	r2, [r3, #0]
 8005516:	e019      	b.n	800554c <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2b04      	cmp	r3, #4
 800551c:	d002      	beq.n	8005524 <I2C_MasterReceive_BTF+0xe2>
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2b02      	cmp	r3, #2
 8005522:	d108      	bne.n	8005536 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005532:	601a      	str	r2, [r3, #0]
 8005534:	e00a      	b.n	800554c <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2b10      	cmp	r3, #16
 800553a:	d007      	beq.n	800554c <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800554a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	691a      	ldr	r2, [r3, #16]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005556:	b2d2      	uxtb	r2, r2
 8005558:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800555e:	1c5a      	adds	r2, r3, #1
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005568:	b29b      	uxth	r3, r3
 800556a:	3b01      	subs	r3, #1
 800556c:	b29a      	uxth	r2, r3
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	691a      	ldr	r2, [r3, #16]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800557c:	b2d2      	uxtb	r2, r2
 800557e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005584:	1c5a      	adds	r2, r3, #1
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800558e:	b29b      	uxth	r3, r3
 8005590:	3b01      	subs	r3, #1
 8005592:	b29a      	uxth	r2, r3
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	685a      	ldr	r2, [r3, #4]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80055a6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2220      	movs	r2, #32
 80055ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80055b6:	b2db      	uxtb	r3, r3
 80055b8:	2b40      	cmp	r3, #64	; 0x40
 80055ba:	d10a      	bne.n	80055d2 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2200      	movs	r2, #0
 80055c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2200      	movs	r2, #0
 80055c8:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f7ff fcba 	bl	8004f44 <HAL_I2C_MemRxCpltCallback>
}
 80055d0:	e01d      	b.n	800560e <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2200      	movs	r2, #0
 80055d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2212      	movs	r2, #18
 80055de:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f7ff fc6f 	bl	8004ec4 <HAL_I2C_MasterRxCpltCallback>
}
 80055e6:	e012      	b.n	800560e <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	691a      	ldr	r2, [r3, #16]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f2:	b2d2      	uxtb	r2, r2
 80055f4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055fa:	1c5a      	adds	r2, r3, #1
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005604:	b29b      	uxth	r3, r3
 8005606:	3b01      	subs	r3, #1
 8005608:	b29a      	uxth	r2, r3
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800560e:	bf00      	nop
 8005610:	3710      	adds	r7, #16
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}

08005616 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8005616:	b480      	push	{r7}
 8005618:	b083      	sub	sp, #12
 800561a:	af00      	add	r7, sp, #0
 800561c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005624:	b2db      	uxtb	r3, r3
 8005626:	2b40      	cmp	r3, #64	; 0x40
 8005628:	d117      	bne.n	800565a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800562e:	2b00      	cmp	r3, #0
 8005630:	d109      	bne.n	8005646 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005636:	b2db      	uxtb	r3, r3
 8005638:	461a      	mov	r2, r3
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005642:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005644:	e067      	b.n	8005716 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800564a:	b2db      	uxtb	r3, r3
 800564c:	f043 0301 	orr.w	r3, r3, #1
 8005650:	b2da      	uxtb	r2, r3
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	611a      	str	r2, [r3, #16]
}
 8005658:	e05d      	b.n	8005716 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	691b      	ldr	r3, [r3, #16]
 800565e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005662:	d133      	bne.n	80056cc <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800566a:	b2db      	uxtb	r3, r3
 800566c:	2b21      	cmp	r3, #33	; 0x21
 800566e:	d109      	bne.n	8005684 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005674:	b2db      	uxtb	r3, r3
 8005676:	461a      	mov	r2, r3
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005680:	611a      	str	r2, [r3, #16]
 8005682:	e008      	b.n	8005696 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005688:	b2db      	uxtb	r3, r3
 800568a:	f043 0301 	orr.w	r3, r3, #1
 800568e:	b2da      	uxtb	r2, r3
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800569a:	2b00      	cmp	r3, #0
 800569c:	d004      	beq.n	80056a8 <I2C_Master_SB+0x92>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d108      	bne.n	80056ba <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d032      	beq.n	8005716 <I2C_Master_SB+0x100>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d02d      	beq.n	8005716 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	685a      	ldr	r2, [r3, #4]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056c8:	605a      	str	r2, [r3, #4]
}
 80056ca:	e024      	b.n	8005716 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d10e      	bne.n	80056f2 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056d8:	b29b      	uxth	r3, r3
 80056da:	11db      	asrs	r3, r3, #7
 80056dc:	b2db      	uxtb	r3, r3
 80056de:	f003 0306 	and.w	r3, r3, #6
 80056e2:	b2db      	uxtb	r3, r3
 80056e4:	f063 030f 	orn	r3, r3, #15
 80056e8:	b2da      	uxtb	r2, r3
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	611a      	str	r2, [r3, #16]
}
 80056f0:	e011      	b.n	8005716 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	d10d      	bne.n	8005716 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056fe:	b29b      	uxth	r3, r3
 8005700:	11db      	asrs	r3, r3, #7
 8005702:	b2db      	uxtb	r3, r3
 8005704:	f003 0306 	and.w	r3, r3, #6
 8005708:	b2db      	uxtb	r3, r3
 800570a:	f063 030e 	orn	r3, r3, #14
 800570e:	b2da      	uxtb	r2, r3
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	611a      	str	r2, [r3, #16]
}
 8005716:	bf00      	nop
 8005718:	370c      	adds	r7, #12
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr

08005722 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005722:	b480      	push	{r7}
 8005724:	b083      	sub	sp, #12
 8005726:	af00      	add	r7, sp, #0
 8005728:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800572e:	b2da      	uxtb	r2, r3
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800573a:	2b00      	cmp	r3, #0
 800573c:	d004      	beq.n	8005748 <I2C_Master_ADD10+0x26>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005742:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005744:	2b00      	cmp	r3, #0
 8005746:	d108      	bne.n	800575a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800574c:	2b00      	cmp	r3, #0
 800574e:	d00c      	beq.n	800576a <I2C_Master_ADD10+0x48>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005756:	2b00      	cmp	r3, #0
 8005758:	d007      	beq.n	800576a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	685a      	ldr	r2, [r3, #4]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005768:	605a      	str	r2, [r3, #4]
  }
}
 800576a:	bf00      	nop
 800576c:	370c      	adds	r7, #12
 800576e:	46bd      	mov	sp, r7
 8005770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005774:	4770      	bx	lr

08005776 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005776:	b480      	push	{r7}
 8005778:	b091      	sub	sp, #68	; 0x44
 800577a:	af00      	add	r7, sp, #0
 800577c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005784:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800578c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005792:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800579a:	b2db      	uxtb	r3, r3
 800579c:	2b22      	cmp	r3, #34	; 0x22
 800579e:	f040 8169 	bne.w	8005a74 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d10f      	bne.n	80057ca <I2C_Master_ADDR+0x54>
 80057aa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80057ae:	2b40      	cmp	r3, #64	; 0x40
 80057b0:	d10b      	bne.n	80057ca <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057b2:	2300      	movs	r3, #0
 80057b4:	633b      	str	r3, [r7, #48]	; 0x30
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	695b      	ldr	r3, [r3, #20]
 80057bc:	633b      	str	r3, [r7, #48]	; 0x30
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	699b      	ldr	r3, [r3, #24]
 80057c4:	633b      	str	r3, [r7, #48]	; 0x30
 80057c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c8:	e160      	b.n	8005a8c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d11d      	bne.n	800580e <I2C_Master_ADDR+0x98>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	691b      	ldr	r3, [r3, #16]
 80057d6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80057da:	d118      	bne.n	800580e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057dc:	2300      	movs	r3, #0
 80057de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	695b      	ldr	r3, [r3, #20]
 80057e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	699b      	ldr	r3, [r3, #24]
 80057ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	681a      	ldr	r2, [r3, #0]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005800:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005806:	1c5a      	adds	r2, r3, #1
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	651a      	str	r2, [r3, #80]	; 0x50
 800580c:	e13e      	b.n	8005a8c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005812:	b29b      	uxth	r3, r3
 8005814:	2b00      	cmp	r3, #0
 8005816:	d113      	bne.n	8005840 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005818:	2300      	movs	r3, #0
 800581a:	62bb      	str	r3, [r7, #40]	; 0x28
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	695b      	ldr	r3, [r3, #20]
 8005822:	62bb      	str	r3, [r7, #40]	; 0x28
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	699b      	ldr	r3, [r3, #24]
 800582a:	62bb      	str	r3, [r7, #40]	; 0x28
 800582c:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800583c:	601a      	str	r2, [r3, #0]
 800583e:	e115      	b.n	8005a6c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005844:	b29b      	uxth	r3, r3
 8005846:	2b01      	cmp	r3, #1
 8005848:	f040 808a 	bne.w	8005960 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800584c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800584e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005852:	d137      	bne.n	80058c4 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005862:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800586e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005872:	d113      	bne.n	800589c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005882:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005884:	2300      	movs	r3, #0
 8005886:	627b      	str	r3, [r7, #36]	; 0x24
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	695b      	ldr	r3, [r3, #20]
 800588e:	627b      	str	r3, [r7, #36]	; 0x24
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	699b      	ldr	r3, [r3, #24]
 8005896:	627b      	str	r3, [r7, #36]	; 0x24
 8005898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589a:	e0e7      	b.n	8005a6c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800589c:	2300      	movs	r3, #0
 800589e:	623b      	str	r3, [r7, #32]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	695b      	ldr	r3, [r3, #20]
 80058a6:	623b      	str	r3, [r7, #32]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	699b      	ldr	r3, [r3, #24]
 80058ae:	623b      	str	r3, [r7, #32]
 80058b0:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058c0:	601a      	str	r2, [r3, #0]
 80058c2:	e0d3      	b.n	8005a6c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80058c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058c6:	2b08      	cmp	r3, #8
 80058c8:	d02e      	beq.n	8005928 <I2C_Master_ADDR+0x1b2>
 80058ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058cc:	2b20      	cmp	r3, #32
 80058ce:	d02b      	beq.n	8005928 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80058d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058d2:	2b12      	cmp	r3, #18
 80058d4:	d102      	bne.n	80058dc <I2C_Master_ADDR+0x166>
 80058d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d125      	bne.n	8005928 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80058dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058de:	2b04      	cmp	r3, #4
 80058e0:	d00e      	beq.n	8005900 <I2C_Master_ADDR+0x18a>
 80058e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058e4:	2b02      	cmp	r3, #2
 80058e6:	d00b      	beq.n	8005900 <I2C_Master_ADDR+0x18a>
 80058e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ea:	2b10      	cmp	r3, #16
 80058ec:	d008      	beq.n	8005900 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058fc:	601a      	str	r2, [r3, #0]
 80058fe:	e007      	b.n	8005910 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	681a      	ldr	r2, [r3, #0]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800590e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005910:	2300      	movs	r3, #0
 8005912:	61fb      	str	r3, [r7, #28]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	695b      	ldr	r3, [r3, #20]
 800591a:	61fb      	str	r3, [r7, #28]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	699b      	ldr	r3, [r3, #24]
 8005922:	61fb      	str	r3, [r7, #28]
 8005924:	69fb      	ldr	r3, [r7, #28]
 8005926:	e0a1      	b.n	8005a6c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005936:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005938:	2300      	movs	r3, #0
 800593a:	61bb      	str	r3, [r7, #24]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	695b      	ldr	r3, [r3, #20]
 8005942:	61bb      	str	r3, [r7, #24]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	699b      	ldr	r3, [r3, #24]
 800594a:	61bb      	str	r3, [r7, #24]
 800594c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	681a      	ldr	r2, [r3, #0]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800595c:	601a      	str	r2, [r3, #0]
 800595e:	e085      	b.n	8005a6c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005964:	b29b      	uxth	r3, r3
 8005966:	2b02      	cmp	r3, #2
 8005968:	d14d      	bne.n	8005a06 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800596a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800596c:	2b04      	cmp	r3, #4
 800596e:	d016      	beq.n	800599e <I2C_Master_ADDR+0x228>
 8005970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005972:	2b02      	cmp	r3, #2
 8005974:	d013      	beq.n	800599e <I2C_Master_ADDR+0x228>
 8005976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005978:	2b10      	cmp	r3, #16
 800597a:	d010      	beq.n	800599e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800598a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	681a      	ldr	r2, [r3, #0]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800599a:	601a      	str	r2, [r3, #0]
 800599c:	e007      	b.n	80059ae <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80059ac:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059bc:	d117      	bne.n	80059ee <I2C_Master_ADDR+0x278>
 80059be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059c0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80059c4:	d00b      	beq.n	80059de <I2C_Master_ADDR+0x268>
 80059c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d008      	beq.n	80059de <I2C_Master_ADDR+0x268>
 80059cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059ce:	2b08      	cmp	r3, #8
 80059d0:	d005      	beq.n	80059de <I2C_Master_ADDR+0x268>
 80059d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059d4:	2b10      	cmp	r3, #16
 80059d6:	d002      	beq.n	80059de <I2C_Master_ADDR+0x268>
 80059d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059da:	2b20      	cmp	r3, #32
 80059dc:	d107      	bne.n	80059ee <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	685a      	ldr	r2, [r3, #4]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80059ec:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059ee:	2300      	movs	r3, #0
 80059f0:	617b      	str	r3, [r7, #20]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	695b      	ldr	r3, [r3, #20]
 80059f8:	617b      	str	r3, [r7, #20]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	699b      	ldr	r3, [r3, #24]
 8005a00:	617b      	str	r3, [r7, #20]
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	e032      	b.n	8005a6c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	681a      	ldr	r2, [r3, #0]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005a14:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a24:	d117      	bne.n	8005a56 <I2C_Master_ADDR+0x2e0>
 8005a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a28:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005a2c:	d00b      	beq.n	8005a46 <I2C_Master_ADDR+0x2d0>
 8005a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d008      	beq.n	8005a46 <I2C_Master_ADDR+0x2d0>
 8005a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a36:	2b08      	cmp	r3, #8
 8005a38:	d005      	beq.n	8005a46 <I2C_Master_ADDR+0x2d0>
 8005a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a3c:	2b10      	cmp	r3, #16
 8005a3e:	d002      	beq.n	8005a46 <I2C_Master_ADDR+0x2d0>
 8005a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a42:	2b20      	cmp	r3, #32
 8005a44:	d107      	bne.n	8005a56 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	685a      	ldr	r2, [r3, #4]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005a54:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a56:	2300      	movs	r3, #0
 8005a58:	613b      	str	r3, [r7, #16]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	695b      	ldr	r3, [r3, #20]
 8005a60:	613b      	str	r3, [r7, #16]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	699b      	ldr	r3, [r3, #24]
 8005a68:	613b      	str	r3, [r7, #16]
 8005a6a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005a72:	e00b      	b.n	8005a8c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a74:	2300      	movs	r3, #0
 8005a76:	60fb      	str	r3, [r7, #12]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	695b      	ldr	r3, [r3, #20]
 8005a7e:	60fb      	str	r3, [r7, #12]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	699b      	ldr	r3, [r3, #24]
 8005a86:	60fb      	str	r3, [r7, #12]
 8005a88:	68fb      	ldr	r3, [r7, #12]
}
 8005a8a:	e7ff      	b.n	8005a8c <I2C_Master_ADDR+0x316>
 8005a8c:	bf00      	nop
 8005a8e:	3744      	adds	r7, #68	; 0x44
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr

08005a98 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b084      	sub	sp, #16
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005aa6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005aac:	b29b      	uxth	r3, r3
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d02b      	beq.n	8005b0a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab6:	781a      	ldrb	r2, [r3, #0]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac2:	1c5a      	adds	r2, r3, #1
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	3b01      	subs	r3, #1
 8005ad0:	b29a      	uxth	r2, r3
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d114      	bne.n	8005b0a <I2C_SlaveTransmit_TXE+0x72>
 8005ae0:	7bfb      	ldrb	r3, [r7, #15]
 8005ae2:	2b29      	cmp	r3, #41	; 0x29
 8005ae4:	d111      	bne.n	8005b0a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	685a      	ldr	r2, [r3, #4]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005af4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2221      	movs	r2, #33	; 0x21
 8005afa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2228      	movs	r2, #40	; 0x28
 8005b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f7ff f9e7 	bl	8004ed8 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005b0a:	bf00      	nop
 8005b0c:	3710      	adds	r7, #16
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}

08005b12 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005b12:	b480      	push	{r7}
 8005b14:	b083      	sub	sp, #12
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d011      	beq.n	8005b48 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b28:	781a      	ldrb	r2, [r3, #0]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b34:	1c5a      	adds	r2, r3, #1
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b3e:	b29b      	uxth	r3, r3
 8005b40:	3b01      	subs	r3, #1
 8005b42:	b29a      	uxth	r2, r3
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005b48:	bf00      	nop
 8005b4a:	370c      	adds	r7, #12
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b52:	4770      	bx	lr

08005b54 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b084      	sub	sp, #16
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b62:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b68:	b29b      	uxth	r3, r3
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d02c      	beq.n	8005bc8 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	691a      	ldr	r2, [r3, #16]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b78:	b2d2      	uxtb	r2, r2
 8005b7a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b80:	1c5a      	adds	r2, r3, #1
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b8a:	b29b      	uxth	r3, r3
 8005b8c:	3b01      	subs	r3, #1
 8005b8e:	b29a      	uxth	r2, r3
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b98:	b29b      	uxth	r3, r3
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d114      	bne.n	8005bc8 <I2C_SlaveReceive_RXNE+0x74>
 8005b9e:	7bfb      	ldrb	r3, [r7, #15]
 8005ba0:	2b2a      	cmp	r3, #42	; 0x2a
 8005ba2:	d111      	bne.n	8005bc8 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	685a      	ldr	r2, [r3, #4]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bb2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2222      	movs	r2, #34	; 0x22
 8005bb8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2228      	movs	r2, #40	; 0x28
 8005bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f7ff f992 	bl	8004eec <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005bc8:	bf00      	nop
 8005bca:	3710      	adds	r7, #16
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}

08005bd0 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b083      	sub	sp, #12
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bdc:	b29b      	uxth	r3, r3
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d012      	beq.n	8005c08 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	691a      	ldr	r2, [r3, #16]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bec:	b2d2      	uxtb	r2, r2
 8005bee:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf4:	1c5a      	adds	r2, r3, #1
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	3b01      	subs	r3, #1
 8005c02:	b29a      	uxth	r2, r3
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005c08:	bf00      	nop
 8005c0a:	370c      	adds	r7, #12
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr

08005c14 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b084      	sub	sp, #16
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
 8005c1c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c28:	b2db      	uxtb	r3, r3
 8005c2a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005c2e:	2b28      	cmp	r3, #40	; 0x28
 8005c30:	d127      	bne.n	8005c82 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	685a      	ldr	r2, [r3, #4]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c40:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	089b      	lsrs	r3, r3, #2
 8005c46:	f003 0301 	and.w	r3, r3, #1
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d101      	bne.n	8005c52 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	09db      	lsrs	r3, r3, #7
 8005c56:	f003 0301 	and.w	r3, r3, #1
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d103      	bne.n	8005c66 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	68db      	ldr	r3, [r3, #12]
 8005c62:	81bb      	strh	r3, [r7, #12]
 8005c64:	e002      	b.n	8005c6c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	699b      	ldr	r3, [r3, #24]
 8005c6a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005c74:	89ba      	ldrh	r2, [r7, #12]
 8005c76:	7bfb      	ldrb	r3, [r7, #15]
 8005c78:	4619      	mov	r1, r3
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f7ff f940 	bl	8004f00 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005c80:	e00e      	b.n	8005ca0 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c82:	2300      	movs	r3, #0
 8005c84:	60bb      	str	r3, [r7, #8]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	695b      	ldr	r3, [r3, #20]
 8005c8c:	60bb      	str	r3, [r7, #8]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	699b      	ldr	r3, [r3, #24]
 8005c94:	60bb      	str	r3, [r7, #8]
 8005c96:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005ca0:	bf00      	nop
 8005ca2:	3710      	adds	r7, #16
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}

08005ca8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b084      	sub	sp, #16
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cb6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	685a      	ldr	r2, [r3, #4]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005cc6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005cc8:	2300      	movs	r3, #0
 8005cca:	60bb      	str	r3, [r7, #8]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	695b      	ldr	r3, [r3, #20]
 8005cd2:	60bb      	str	r3, [r7, #8]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f042 0201 	orr.w	r2, r2, #1
 8005ce2:	601a      	str	r2, [r3, #0]
 8005ce4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cf4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d04:	d172      	bne.n	8005dec <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005d06:	7bfb      	ldrb	r3, [r7, #15]
 8005d08:	2b22      	cmp	r3, #34	; 0x22
 8005d0a:	d002      	beq.n	8005d12 <I2C_Slave_STOPF+0x6a>
 8005d0c:	7bfb      	ldrb	r3, [r7, #15]
 8005d0e:	2b2a      	cmp	r3, #42	; 0x2a
 8005d10:	d135      	bne.n	8005d7e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	b29a      	uxth	r2, r3
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d005      	beq.n	8005d36 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d2e:	f043 0204 	orr.w	r2, r3, #4
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	685a      	ldr	r2, [r3, #4]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d44:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f7fd ff76 	bl	8003c3c <HAL_DMA_GetState>
 8005d50:	4603      	mov	r3, r0
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	d049      	beq.n	8005dea <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d5a:	4a69      	ldr	r2, [pc, #420]	; (8005f00 <I2C_Slave_STOPF+0x258>)
 8005d5c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d62:	4618      	mov	r0, r3
 8005d64:	f7fd fdbe 	bl	80038e4 <HAL_DMA_Abort_IT>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d03d      	beq.n	8005dea <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d74:	687a      	ldr	r2, [r7, #4]
 8005d76:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005d78:	4610      	mov	r0, r2
 8005d7a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005d7c:	e035      	b.n	8005dea <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	b29a      	uxth	r2, r3
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d90:	b29b      	uxth	r3, r3
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d005      	beq.n	8005da2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d9a:	f043 0204 	orr.w	r2, r3, #4
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	685a      	ldr	r2, [r3, #4]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005db0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005db6:	4618      	mov	r0, r3
 8005db8:	f7fd ff40 	bl	8003c3c <HAL_DMA_GetState>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	2b01      	cmp	r3, #1
 8005dc0:	d014      	beq.n	8005dec <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dc6:	4a4e      	ldr	r2, [pc, #312]	; (8005f00 <I2C_Slave_STOPF+0x258>)
 8005dc8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dce:	4618      	mov	r0, r3
 8005dd0:	f7fd fd88 	bl	80038e4 <HAL_DMA_Abort_IT>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d008      	beq.n	8005dec <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005de4:	4610      	mov	r0, r2
 8005de6:	4798      	blx	r3
 8005de8:	e000      	b.n	8005dec <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005dea:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d03e      	beq.n	8005e74 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	695b      	ldr	r3, [r3, #20]
 8005dfc:	f003 0304 	and.w	r3, r3, #4
 8005e00:	2b04      	cmp	r3, #4
 8005e02:	d112      	bne.n	8005e2a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	691a      	ldr	r2, [r3, #16]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e0e:	b2d2      	uxtb	r2, r2
 8005e10:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e16:	1c5a      	adds	r2, r3, #1
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e20:	b29b      	uxth	r3, r3
 8005e22:	3b01      	subs	r3, #1
 8005e24:	b29a      	uxth	r2, r3
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	695b      	ldr	r3, [r3, #20]
 8005e30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e34:	2b40      	cmp	r3, #64	; 0x40
 8005e36:	d112      	bne.n	8005e5e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	691a      	ldr	r2, [r3, #16]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e42:	b2d2      	uxtb	r2, r2
 8005e44:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e4a:	1c5a      	adds	r2, r3, #1
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e54:	b29b      	uxth	r3, r3
 8005e56:	3b01      	subs	r3, #1
 8005e58:	b29a      	uxth	r2, r3
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d005      	beq.n	8005e74 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e6c:	f043 0204 	orr.w	r2, r3, #4
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d003      	beq.n	8005e84 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	f000 f8b3 	bl	8005fe8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005e82:	e039      	b.n	8005ef8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005e84:	7bfb      	ldrb	r3, [r7, #15]
 8005e86:	2b2a      	cmp	r3, #42	; 0x2a
 8005e88:	d109      	bne.n	8005e9e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2228      	movs	r2, #40	; 0x28
 8005e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f7ff f827 	bl	8004eec <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ea4:	b2db      	uxtb	r3, r3
 8005ea6:	2b28      	cmp	r3, #40	; 0x28
 8005ea8:	d111      	bne.n	8005ece <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	4a15      	ldr	r2, [pc, #84]	; (8005f04 <I2C_Slave_STOPF+0x25c>)
 8005eae:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2220      	movs	r2, #32
 8005eba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f7ff f828 	bl	8004f1c <HAL_I2C_ListenCpltCallback>
}
 8005ecc:	e014      	b.n	8005ef8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ed2:	2b22      	cmp	r3, #34	; 0x22
 8005ed4:	d002      	beq.n	8005edc <I2C_Slave_STOPF+0x234>
 8005ed6:	7bfb      	ldrb	r3, [r7, #15]
 8005ed8:	2b22      	cmp	r3, #34	; 0x22
 8005eda:	d10d      	bne.n	8005ef8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2220      	movs	r2, #32
 8005ee6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2200      	movs	r2, #0
 8005eee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f7fe fffa 	bl	8004eec <HAL_I2C_SlaveRxCpltCallback>
}
 8005ef8:	bf00      	nop
 8005efa:	3710      	adds	r7, #16
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}
 8005f00:	08006549 	.word	0x08006549
 8005f04:	ffff0000 	.word	0xffff0000

08005f08 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b084      	sub	sp, #16
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f16:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f1c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	2b08      	cmp	r3, #8
 8005f22:	d002      	beq.n	8005f2a <I2C_Slave_AF+0x22>
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	2b20      	cmp	r3, #32
 8005f28:	d129      	bne.n	8005f7e <I2C_Slave_AF+0x76>
 8005f2a:	7bfb      	ldrb	r3, [r7, #15]
 8005f2c:	2b28      	cmp	r3, #40	; 0x28
 8005f2e:	d126      	bne.n	8005f7e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	4a2c      	ldr	r2, [pc, #176]	; (8005fe4 <I2C_Slave_AF+0xdc>)
 8005f34:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	685a      	ldr	r2, [r3, #4]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005f44:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005f4e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	681a      	ldr	r2, [r3, #0]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f5e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2200      	movs	r2, #0
 8005f64:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2220      	movs	r2, #32
 8005f6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2200      	movs	r2, #0
 8005f72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f7fe ffd0 	bl	8004f1c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005f7c:	e02e      	b.n	8005fdc <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005f7e:	7bfb      	ldrb	r3, [r7, #15]
 8005f80:	2b21      	cmp	r3, #33	; 0x21
 8005f82:	d126      	bne.n	8005fd2 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	4a17      	ldr	r2, [pc, #92]	; (8005fe4 <I2C_Slave_AF+0xdc>)
 8005f88:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2221      	movs	r2, #33	; 0x21
 8005f8e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2220      	movs	r2, #32
 8005f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	685a      	ldr	r2, [r3, #4]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005fae:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005fb8:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	681a      	ldr	r2, [r3, #0]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fc8:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f7fe ff84 	bl	8004ed8 <HAL_I2C_SlaveTxCpltCallback>
}
 8005fd0:	e004      	b.n	8005fdc <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005fda:	615a      	str	r2, [r3, #20]
}
 8005fdc:	bf00      	nop
 8005fde:	3710      	adds	r7, #16
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}
 8005fe4:	ffff0000 	.word	0xffff0000

08005fe8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b084      	sub	sp, #16
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ff6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ffe:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006000:	7bbb      	ldrb	r3, [r7, #14]
 8006002:	2b10      	cmp	r3, #16
 8006004:	d002      	beq.n	800600c <I2C_ITError+0x24>
 8006006:	7bbb      	ldrb	r3, [r7, #14]
 8006008:	2b40      	cmp	r3, #64	; 0x40
 800600a:	d10a      	bne.n	8006022 <I2C_ITError+0x3a>
 800600c:	7bfb      	ldrb	r3, [r7, #15]
 800600e:	2b22      	cmp	r3, #34	; 0x22
 8006010:	d107      	bne.n	8006022 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	681a      	ldr	r2, [r3, #0]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006020:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006022:	7bfb      	ldrb	r3, [r7, #15]
 8006024:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006028:	2b28      	cmp	r3, #40	; 0x28
 800602a:	d107      	bne.n	800603c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2200      	movs	r2, #0
 8006030:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2228      	movs	r2, #40	; 0x28
 8006036:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800603a:	e015      	b.n	8006068 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006046:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800604a:	d00a      	beq.n	8006062 <I2C_ITError+0x7a>
 800604c:	7bfb      	ldrb	r3, [r7, #15]
 800604e:	2b60      	cmp	r3, #96	; 0x60
 8006050:	d007      	beq.n	8006062 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2220      	movs	r2, #32
 8006056:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2200      	movs	r2, #0
 800605e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2200      	movs	r2, #0
 8006066:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006072:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006076:	d162      	bne.n	800613e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	685a      	ldr	r2, [r3, #4]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006086:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800608c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006090:	b2db      	uxtb	r3, r3
 8006092:	2b01      	cmp	r3, #1
 8006094:	d020      	beq.n	80060d8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800609a:	4a6a      	ldr	r2, [pc, #424]	; (8006244 <I2C_ITError+0x25c>)
 800609c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060a2:	4618      	mov	r0, r3
 80060a4:	f7fd fc1e 	bl	80038e4 <HAL_DMA_Abort_IT>
 80060a8:	4603      	mov	r3, r0
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	f000 8089 	beq.w	80061c2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	681a      	ldr	r2, [r3, #0]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f022 0201 	bic.w	r2, r2, #1
 80060be:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2220      	movs	r2, #32
 80060c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060ce:	687a      	ldr	r2, [r7, #4]
 80060d0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80060d2:	4610      	mov	r0, r2
 80060d4:	4798      	blx	r3
 80060d6:	e074      	b.n	80061c2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060dc:	4a59      	ldr	r2, [pc, #356]	; (8006244 <I2C_ITError+0x25c>)
 80060de:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060e4:	4618      	mov	r0, r3
 80060e6:	f7fd fbfd 	bl	80038e4 <HAL_DMA_Abort_IT>
 80060ea:	4603      	mov	r3, r0
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d068      	beq.n	80061c2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	695b      	ldr	r3, [r3, #20]
 80060f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060fa:	2b40      	cmp	r3, #64	; 0x40
 80060fc:	d10b      	bne.n	8006116 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	691a      	ldr	r2, [r3, #16]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006108:	b2d2      	uxtb	r2, r2
 800610a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006110:	1c5a      	adds	r2, r3, #1
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	681a      	ldr	r2, [r3, #0]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f022 0201 	bic.w	r2, r2, #1
 8006124:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2220      	movs	r2, #32
 800612a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006132:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006134:	687a      	ldr	r2, [r7, #4]
 8006136:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006138:	4610      	mov	r0, r2
 800613a:	4798      	blx	r3
 800613c:	e041      	b.n	80061c2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006144:	b2db      	uxtb	r3, r3
 8006146:	2b60      	cmp	r3, #96	; 0x60
 8006148:	d125      	bne.n	8006196 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2220      	movs	r2, #32
 800614e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2200      	movs	r2, #0
 8006156:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	695b      	ldr	r3, [r3, #20]
 800615e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006162:	2b40      	cmp	r3, #64	; 0x40
 8006164:	d10b      	bne.n	800617e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	691a      	ldr	r2, [r3, #16]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006170:	b2d2      	uxtb	r2, r2
 8006172:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006178:	1c5a      	adds	r2, r3, #1
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	681a      	ldr	r2, [r3, #0]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f022 0201 	bic.w	r2, r2, #1
 800618c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f7fe feec 	bl	8004f6c <HAL_I2C_AbortCpltCallback>
 8006194:	e015      	b.n	80061c2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	695b      	ldr	r3, [r3, #20]
 800619c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061a0:	2b40      	cmp	r3, #64	; 0x40
 80061a2:	d10b      	bne.n	80061bc <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	691a      	ldr	r2, [r3, #16]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ae:	b2d2      	uxtb	r2, r2
 80061b0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b6:	1c5a      	adds	r2, r3, #1
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	f7fe fecb 	bl	8004f58 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061c6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	f003 0301 	and.w	r3, r3, #1
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d10e      	bne.n	80061f0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d109      	bne.n	80061f0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d104      	bne.n	80061f0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d007      	beq.n	8006200 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	685a      	ldr	r2, [r3, #4]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80061fe:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006206:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800620c:	f003 0304 	and.w	r3, r3, #4
 8006210:	2b04      	cmp	r3, #4
 8006212:	d113      	bne.n	800623c <I2C_ITError+0x254>
 8006214:	7bfb      	ldrb	r3, [r7, #15]
 8006216:	2b28      	cmp	r3, #40	; 0x28
 8006218:	d110      	bne.n	800623c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	4a0a      	ldr	r2, [pc, #40]	; (8006248 <I2C_ITError+0x260>)
 800621e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2200      	movs	r2, #0
 8006224:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2220      	movs	r2, #32
 800622a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2200      	movs	r2, #0
 8006232:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f7fe fe70 	bl	8004f1c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800623c:	bf00      	nop
 800623e:	3710      	adds	r7, #16
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}
 8006244:	08006549 	.word	0x08006549
 8006248:	ffff0000 	.word	0xffff0000

0800624c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b088      	sub	sp, #32
 8006250:	af02      	add	r7, sp, #8
 8006252:	60f8      	str	r0, [r7, #12]
 8006254:	4608      	mov	r0, r1
 8006256:	4611      	mov	r1, r2
 8006258:	461a      	mov	r2, r3
 800625a:	4603      	mov	r3, r0
 800625c:	817b      	strh	r3, [r7, #10]
 800625e:	460b      	mov	r3, r1
 8006260:	813b      	strh	r3, [r7, #8]
 8006262:	4613      	mov	r3, r2
 8006264:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	681a      	ldr	r2, [r3, #0]
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006274:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006278:	9300      	str	r3, [sp, #0]
 800627a:	6a3b      	ldr	r3, [r7, #32]
 800627c:	2200      	movs	r2, #0
 800627e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006282:	68f8      	ldr	r0, [r7, #12]
 8006284:	f000 fa08 	bl	8006698 <I2C_WaitOnFlagUntilTimeout>
 8006288:	4603      	mov	r3, r0
 800628a:	2b00      	cmp	r3, #0
 800628c:	d00d      	beq.n	80062aa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006298:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800629c:	d103      	bne.n	80062a6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80062a4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80062a6:	2303      	movs	r3, #3
 80062a8:	e05f      	b.n	800636a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80062aa:	897b      	ldrh	r3, [r7, #10]
 80062ac:	b2db      	uxtb	r3, r3
 80062ae:	461a      	mov	r2, r3
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80062b8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80062ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062bc:	6a3a      	ldr	r2, [r7, #32]
 80062be:	492d      	ldr	r1, [pc, #180]	; (8006374 <I2C_RequestMemoryWrite+0x128>)
 80062c0:	68f8      	ldr	r0, [r7, #12]
 80062c2:	f000 fa40 	bl	8006746 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80062c6:	4603      	mov	r3, r0
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d001      	beq.n	80062d0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80062cc:	2301      	movs	r3, #1
 80062ce:	e04c      	b.n	800636a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80062d0:	2300      	movs	r3, #0
 80062d2:	617b      	str	r3, [r7, #20]
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	695b      	ldr	r3, [r3, #20]
 80062da:	617b      	str	r3, [r7, #20]
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	699b      	ldr	r3, [r3, #24]
 80062e2:	617b      	str	r3, [r7, #20]
 80062e4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80062e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062e8:	6a39      	ldr	r1, [r7, #32]
 80062ea:	68f8      	ldr	r0, [r7, #12]
 80062ec:	f000 faaa 	bl	8006844 <I2C_WaitOnTXEFlagUntilTimeout>
 80062f0:	4603      	mov	r3, r0
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d00d      	beq.n	8006312 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062fa:	2b04      	cmp	r3, #4
 80062fc:	d107      	bne.n	800630e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	681a      	ldr	r2, [r3, #0]
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800630c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800630e:	2301      	movs	r3, #1
 8006310:	e02b      	b.n	800636a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006312:	88fb      	ldrh	r3, [r7, #6]
 8006314:	2b01      	cmp	r3, #1
 8006316:	d105      	bne.n	8006324 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006318:	893b      	ldrh	r3, [r7, #8]
 800631a:	b2da      	uxtb	r2, r3
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	611a      	str	r2, [r3, #16]
 8006322:	e021      	b.n	8006368 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006324:	893b      	ldrh	r3, [r7, #8]
 8006326:	0a1b      	lsrs	r3, r3, #8
 8006328:	b29b      	uxth	r3, r3
 800632a:	b2da      	uxtb	r2, r3
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006332:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006334:	6a39      	ldr	r1, [r7, #32]
 8006336:	68f8      	ldr	r0, [r7, #12]
 8006338:	f000 fa84 	bl	8006844 <I2C_WaitOnTXEFlagUntilTimeout>
 800633c:	4603      	mov	r3, r0
 800633e:	2b00      	cmp	r3, #0
 8006340:	d00d      	beq.n	800635e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006346:	2b04      	cmp	r3, #4
 8006348:	d107      	bne.n	800635a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	681a      	ldr	r2, [r3, #0]
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006358:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800635a:	2301      	movs	r3, #1
 800635c:	e005      	b.n	800636a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800635e:	893b      	ldrh	r3, [r7, #8]
 8006360:	b2da      	uxtb	r2, r3
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006368:	2300      	movs	r3, #0
}
 800636a:	4618      	mov	r0, r3
 800636c:	3718      	adds	r7, #24
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}
 8006372:	bf00      	nop
 8006374:	00010002 	.word	0x00010002

08006378 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b088      	sub	sp, #32
 800637c:	af02      	add	r7, sp, #8
 800637e:	60f8      	str	r0, [r7, #12]
 8006380:	4608      	mov	r0, r1
 8006382:	4611      	mov	r1, r2
 8006384:	461a      	mov	r2, r3
 8006386:	4603      	mov	r3, r0
 8006388:	817b      	strh	r3, [r7, #10]
 800638a:	460b      	mov	r3, r1
 800638c:	813b      	strh	r3, [r7, #8]
 800638e:	4613      	mov	r3, r2
 8006390:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	681a      	ldr	r2, [r3, #0]
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80063a0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	681a      	ldr	r2, [r3, #0]
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80063b0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80063b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b4:	9300      	str	r3, [sp, #0]
 80063b6:	6a3b      	ldr	r3, [r7, #32]
 80063b8:	2200      	movs	r2, #0
 80063ba:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80063be:	68f8      	ldr	r0, [r7, #12]
 80063c0:	f000 f96a 	bl	8006698 <I2C_WaitOnFlagUntilTimeout>
 80063c4:	4603      	mov	r3, r0
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d00d      	beq.n	80063e6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063d8:	d103      	bne.n	80063e2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80063e0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80063e2:	2303      	movs	r3, #3
 80063e4:	e0aa      	b.n	800653c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80063e6:	897b      	ldrh	r3, [r7, #10]
 80063e8:	b2db      	uxtb	r3, r3
 80063ea:	461a      	mov	r2, r3
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80063f4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80063f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f8:	6a3a      	ldr	r2, [r7, #32]
 80063fa:	4952      	ldr	r1, [pc, #328]	; (8006544 <I2C_RequestMemoryRead+0x1cc>)
 80063fc:	68f8      	ldr	r0, [r7, #12]
 80063fe:	f000 f9a2 	bl	8006746 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006402:	4603      	mov	r3, r0
 8006404:	2b00      	cmp	r3, #0
 8006406:	d001      	beq.n	800640c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006408:	2301      	movs	r3, #1
 800640a:	e097      	b.n	800653c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800640c:	2300      	movs	r3, #0
 800640e:	617b      	str	r3, [r7, #20]
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	695b      	ldr	r3, [r3, #20]
 8006416:	617b      	str	r3, [r7, #20]
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	699b      	ldr	r3, [r3, #24]
 800641e:	617b      	str	r3, [r7, #20]
 8006420:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006422:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006424:	6a39      	ldr	r1, [r7, #32]
 8006426:	68f8      	ldr	r0, [r7, #12]
 8006428:	f000 fa0c 	bl	8006844 <I2C_WaitOnTXEFlagUntilTimeout>
 800642c:	4603      	mov	r3, r0
 800642e:	2b00      	cmp	r3, #0
 8006430:	d00d      	beq.n	800644e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006436:	2b04      	cmp	r3, #4
 8006438:	d107      	bne.n	800644a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	681a      	ldr	r2, [r3, #0]
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006448:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800644a:	2301      	movs	r3, #1
 800644c:	e076      	b.n	800653c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800644e:	88fb      	ldrh	r3, [r7, #6]
 8006450:	2b01      	cmp	r3, #1
 8006452:	d105      	bne.n	8006460 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006454:	893b      	ldrh	r3, [r7, #8]
 8006456:	b2da      	uxtb	r2, r3
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	611a      	str	r2, [r3, #16]
 800645e:	e021      	b.n	80064a4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006460:	893b      	ldrh	r3, [r7, #8]
 8006462:	0a1b      	lsrs	r3, r3, #8
 8006464:	b29b      	uxth	r3, r3
 8006466:	b2da      	uxtb	r2, r3
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800646e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006470:	6a39      	ldr	r1, [r7, #32]
 8006472:	68f8      	ldr	r0, [r7, #12]
 8006474:	f000 f9e6 	bl	8006844 <I2C_WaitOnTXEFlagUntilTimeout>
 8006478:	4603      	mov	r3, r0
 800647a:	2b00      	cmp	r3, #0
 800647c:	d00d      	beq.n	800649a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006482:	2b04      	cmp	r3, #4
 8006484:	d107      	bne.n	8006496 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	681a      	ldr	r2, [r3, #0]
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006494:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006496:	2301      	movs	r3, #1
 8006498:	e050      	b.n	800653c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800649a:	893b      	ldrh	r3, [r7, #8]
 800649c:	b2da      	uxtb	r2, r3
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80064a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064a6:	6a39      	ldr	r1, [r7, #32]
 80064a8:	68f8      	ldr	r0, [r7, #12]
 80064aa:	f000 f9cb 	bl	8006844 <I2C_WaitOnTXEFlagUntilTimeout>
 80064ae:	4603      	mov	r3, r0
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d00d      	beq.n	80064d0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b8:	2b04      	cmp	r3, #4
 80064ba:	d107      	bne.n	80064cc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	681a      	ldr	r2, [r3, #0]
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064ca:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80064cc:	2301      	movs	r3, #1
 80064ce:	e035      	b.n	800653c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	681a      	ldr	r2, [r3, #0]
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80064de:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80064e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e2:	9300      	str	r3, [sp, #0]
 80064e4:	6a3b      	ldr	r3, [r7, #32]
 80064e6:	2200      	movs	r2, #0
 80064e8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80064ec:	68f8      	ldr	r0, [r7, #12]
 80064ee:	f000 f8d3 	bl	8006698 <I2C_WaitOnFlagUntilTimeout>
 80064f2:	4603      	mov	r3, r0
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d00d      	beq.n	8006514 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006502:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006506:	d103      	bne.n	8006510 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800650e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006510:	2303      	movs	r3, #3
 8006512:	e013      	b.n	800653c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006514:	897b      	ldrh	r3, [r7, #10]
 8006516:	b2db      	uxtb	r3, r3
 8006518:	f043 0301 	orr.w	r3, r3, #1
 800651c:	b2da      	uxtb	r2, r3
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006526:	6a3a      	ldr	r2, [r7, #32]
 8006528:	4906      	ldr	r1, [pc, #24]	; (8006544 <I2C_RequestMemoryRead+0x1cc>)
 800652a:	68f8      	ldr	r0, [r7, #12]
 800652c:	f000 f90b 	bl	8006746 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006530:	4603      	mov	r3, r0
 8006532:	2b00      	cmp	r3, #0
 8006534:	d001      	beq.n	800653a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006536:	2301      	movs	r3, #1
 8006538:	e000      	b.n	800653c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800653a:	2300      	movs	r3, #0
}
 800653c:	4618      	mov	r0, r3
 800653e:	3718      	adds	r7, #24
 8006540:	46bd      	mov	sp, r7
 8006542:	bd80      	pop	{r7, pc}
 8006544:	00010002 	.word	0x00010002

08006548 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b086      	sub	sp, #24
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006550:	2300      	movs	r3, #0
 8006552:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006558:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006560:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006562:	4b4b      	ldr	r3, [pc, #300]	; (8006690 <I2C_DMAAbort+0x148>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	08db      	lsrs	r3, r3, #3
 8006568:	4a4a      	ldr	r2, [pc, #296]	; (8006694 <I2C_DMAAbort+0x14c>)
 800656a:	fba2 2303 	umull	r2, r3, r2, r3
 800656e:	0a1a      	lsrs	r2, r3, #8
 8006570:	4613      	mov	r3, r2
 8006572:	009b      	lsls	r3, r3, #2
 8006574:	4413      	add	r3, r2
 8006576:	00da      	lsls	r2, r3, #3
 8006578:	1ad3      	subs	r3, r2, r3
 800657a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d106      	bne.n	8006590 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006586:	f043 0220 	orr.w	r2, r3, #32
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800658e:	e00a      	b.n	80065a6 <I2C_DMAAbort+0x5e>
    }
    count--;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	3b01      	subs	r3, #1
 8006594:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80065a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065a4:	d0ea      	beq.n	800657c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d003      	beq.n	80065b6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065b2:	2200      	movs	r2, #0
 80065b4:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d003      	beq.n	80065c6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065c2:	2200      	movs	r2, #0
 80065c4:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	681a      	ldr	r2, [r3, #0]
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065d4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	2200      	movs	r2, #0
 80065da:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d003      	beq.n	80065ec <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065e8:	2200      	movs	r2, #0
 80065ea:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d003      	beq.n	80065fc <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065f8:	2200      	movs	r2, #0
 80065fa:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	681a      	ldr	r2, [r3, #0]
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f022 0201 	bic.w	r2, r2, #1
 800660a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006612:	b2db      	uxtb	r3, r3
 8006614:	2b60      	cmp	r3, #96	; 0x60
 8006616:	d10e      	bne.n	8006636 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	2220      	movs	r2, #32
 800661c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	2200      	movs	r2, #0
 8006624:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	2200      	movs	r2, #0
 800662c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800662e:	6978      	ldr	r0, [r7, #20]
 8006630:	f7fe fc9c 	bl	8004f6c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006634:	e027      	b.n	8006686 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006636:	7cfb      	ldrb	r3, [r7, #19]
 8006638:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800663c:	2b28      	cmp	r3, #40	; 0x28
 800663e:	d117      	bne.n	8006670 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	681a      	ldr	r2, [r3, #0]
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f042 0201 	orr.w	r2, r2, #1
 800664e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	681a      	ldr	r2, [r3, #0]
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800665e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	2200      	movs	r2, #0
 8006664:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	2228      	movs	r2, #40	; 0x28
 800666a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800666e:	e007      	b.n	8006680 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	2220      	movs	r2, #32
 8006674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	2200      	movs	r2, #0
 800667c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006680:	6978      	ldr	r0, [r7, #20]
 8006682:	f7fe fc69 	bl	8004f58 <HAL_I2C_ErrorCallback>
}
 8006686:	bf00      	nop
 8006688:	3718      	adds	r7, #24
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}
 800668e:	bf00      	nop
 8006690:	20000008 	.word	0x20000008
 8006694:	14f8b589 	.word	0x14f8b589

08006698 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b084      	sub	sp, #16
 800669c:	af00      	add	r7, sp, #0
 800669e:	60f8      	str	r0, [r7, #12]
 80066a0:	60b9      	str	r1, [r7, #8]
 80066a2:	603b      	str	r3, [r7, #0]
 80066a4:	4613      	mov	r3, r2
 80066a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80066a8:	e025      	b.n	80066f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066b0:	d021      	beq.n	80066f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066b2:	f7fc fe5f 	bl	8003374 <HAL_GetTick>
 80066b6:	4602      	mov	r2, r0
 80066b8:	69bb      	ldr	r3, [r7, #24]
 80066ba:	1ad3      	subs	r3, r2, r3
 80066bc:	683a      	ldr	r2, [r7, #0]
 80066be:	429a      	cmp	r2, r3
 80066c0:	d302      	bcc.n	80066c8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d116      	bne.n	80066f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	2200      	movs	r2, #0
 80066cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2220      	movs	r2, #32
 80066d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	2200      	movs	r2, #0
 80066da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e2:	f043 0220 	orr.w	r2, r3, #32
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	2200      	movs	r2, #0
 80066ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80066f2:	2301      	movs	r3, #1
 80066f4:	e023      	b.n	800673e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	0c1b      	lsrs	r3, r3, #16
 80066fa:	b2db      	uxtb	r3, r3
 80066fc:	2b01      	cmp	r3, #1
 80066fe:	d10d      	bne.n	800671c <I2C_WaitOnFlagUntilTimeout+0x84>
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	695b      	ldr	r3, [r3, #20]
 8006706:	43da      	mvns	r2, r3
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	4013      	ands	r3, r2
 800670c:	b29b      	uxth	r3, r3
 800670e:	2b00      	cmp	r3, #0
 8006710:	bf0c      	ite	eq
 8006712:	2301      	moveq	r3, #1
 8006714:	2300      	movne	r3, #0
 8006716:	b2db      	uxtb	r3, r3
 8006718:	461a      	mov	r2, r3
 800671a:	e00c      	b.n	8006736 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	699b      	ldr	r3, [r3, #24]
 8006722:	43da      	mvns	r2, r3
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	4013      	ands	r3, r2
 8006728:	b29b      	uxth	r3, r3
 800672a:	2b00      	cmp	r3, #0
 800672c:	bf0c      	ite	eq
 800672e:	2301      	moveq	r3, #1
 8006730:	2300      	movne	r3, #0
 8006732:	b2db      	uxtb	r3, r3
 8006734:	461a      	mov	r2, r3
 8006736:	79fb      	ldrb	r3, [r7, #7]
 8006738:	429a      	cmp	r2, r3
 800673a:	d0b6      	beq.n	80066aa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800673c:	2300      	movs	r3, #0
}
 800673e:	4618      	mov	r0, r3
 8006740:	3710      	adds	r7, #16
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}

08006746 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006746:	b580      	push	{r7, lr}
 8006748:	b084      	sub	sp, #16
 800674a:	af00      	add	r7, sp, #0
 800674c:	60f8      	str	r0, [r7, #12]
 800674e:	60b9      	str	r1, [r7, #8]
 8006750:	607a      	str	r2, [r7, #4]
 8006752:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006754:	e051      	b.n	80067fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	695b      	ldr	r3, [r3, #20]
 800675c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006760:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006764:	d123      	bne.n	80067ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	681a      	ldr	r2, [r3, #0]
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006774:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800677e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	2200      	movs	r2, #0
 8006784:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2220      	movs	r2, #32
 800678a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2200      	movs	r2, #0
 8006792:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800679a:	f043 0204 	orr.w	r2, r3, #4
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2200      	movs	r2, #0
 80067a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80067aa:	2301      	movs	r3, #1
 80067ac:	e046      	b.n	800683c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067b4:	d021      	beq.n	80067fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067b6:	f7fc fddd 	bl	8003374 <HAL_GetTick>
 80067ba:	4602      	mov	r2, r0
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	1ad3      	subs	r3, r2, r3
 80067c0:	687a      	ldr	r2, [r7, #4]
 80067c2:	429a      	cmp	r2, r3
 80067c4:	d302      	bcc.n	80067cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d116      	bne.n	80067fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	2200      	movs	r2, #0
 80067d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	2220      	movs	r2, #32
 80067d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2200      	movs	r2, #0
 80067de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067e6:	f043 0220 	orr.w	r2, r3, #32
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	2200      	movs	r2, #0
 80067f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80067f6:	2301      	movs	r3, #1
 80067f8:	e020      	b.n	800683c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	0c1b      	lsrs	r3, r3, #16
 80067fe:	b2db      	uxtb	r3, r3
 8006800:	2b01      	cmp	r3, #1
 8006802:	d10c      	bne.n	800681e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	695b      	ldr	r3, [r3, #20]
 800680a:	43da      	mvns	r2, r3
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	4013      	ands	r3, r2
 8006810:	b29b      	uxth	r3, r3
 8006812:	2b00      	cmp	r3, #0
 8006814:	bf14      	ite	ne
 8006816:	2301      	movne	r3, #1
 8006818:	2300      	moveq	r3, #0
 800681a:	b2db      	uxtb	r3, r3
 800681c:	e00b      	b.n	8006836 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	699b      	ldr	r3, [r3, #24]
 8006824:	43da      	mvns	r2, r3
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	4013      	ands	r3, r2
 800682a:	b29b      	uxth	r3, r3
 800682c:	2b00      	cmp	r3, #0
 800682e:	bf14      	ite	ne
 8006830:	2301      	movne	r3, #1
 8006832:	2300      	moveq	r3, #0
 8006834:	b2db      	uxtb	r3, r3
 8006836:	2b00      	cmp	r3, #0
 8006838:	d18d      	bne.n	8006756 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800683a:	2300      	movs	r3, #0
}
 800683c:	4618      	mov	r0, r3
 800683e:	3710      	adds	r7, #16
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}

08006844 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b084      	sub	sp, #16
 8006848:	af00      	add	r7, sp, #0
 800684a:	60f8      	str	r0, [r7, #12]
 800684c:	60b9      	str	r1, [r7, #8]
 800684e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006850:	e02d      	b.n	80068ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006852:	68f8      	ldr	r0, [r7, #12]
 8006854:	f000 f900 	bl	8006a58 <I2C_IsAcknowledgeFailed>
 8006858:	4603      	mov	r3, r0
 800685a:	2b00      	cmp	r3, #0
 800685c:	d001      	beq.n	8006862 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800685e:	2301      	movs	r3, #1
 8006860:	e02d      	b.n	80068be <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006868:	d021      	beq.n	80068ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800686a:	f7fc fd83 	bl	8003374 <HAL_GetTick>
 800686e:	4602      	mov	r2, r0
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	1ad3      	subs	r3, r2, r3
 8006874:	68ba      	ldr	r2, [r7, #8]
 8006876:	429a      	cmp	r2, r3
 8006878:	d302      	bcc.n	8006880 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d116      	bne.n	80068ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2200      	movs	r2, #0
 8006884:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2220      	movs	r2, #32
 800688a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2200      	movs	r2, #0
 8006892:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800689a:	f043 0220 	orr.w	r2, r3, #32
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2200      	movs	r2, #0
 80068a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80068aa:	2301      	movs	r3, #1
 80068ac:	e007      	b.n	80068be <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	695b      	ldr	r3, [r3, #20]
 80068b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068b8:	2b80      	cmp	r3, #128	; 0x80
 80068ba:	d1ca      	bne.n	8006852 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80068bc:	2300      	movs	r3, #0
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3710      	adds	r7, #16
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}

080068c6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80068c6:	b580      	push	{r7, lr}
 80068c8:	b084      	sub	sp, #16
 80068ca:	af00      	add	r7, sp, #0
 80068cc:	60f8      	str	r0, [r7, #12]
 80068ce:	60b9      	str	r1, [r7, #8]
 80068d0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80068d2:	e02d      	b.n	8006930 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80068d4:	68f8      	ldr	r0, [r7, #12]
 80068d6:	f000 f8bf 	bl	8006a58 <I2C_IsAcknowledgeFailed>
 80068da:	4603      	mov	r3, r0
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d001      	beq.n	80068e4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80068e0:	2301      	movs	r3, #1
 80068e2:	e02d      	b.n	8006940 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068ea:	d021      	beq.n	8006930 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068ec:	f7fc fd42 	bl	8003374 <HAL_GetTick>
 80068f0:	4602      	mov	r2, r0
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	1ad3      	subs	r3, r2, r3
 80068f6:	68ba      	ldr	r2, [r7, #8]
 80068f8:	429a      	cmp	r2, r3
 80068fa:	d302      	bcc.n	8006902 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d116      	bne.n	8006930 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2200      	movs	r2, #0
 8006906:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2220      	movs	r2, #32
 800690c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	2200      	movs	r2, #0
 8006914:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800691c:	f043 0220 	orr.w	r2, r3, #32
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	2200      	movs	r2, #0
 8006928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800692c:	2301      	movs	r3, #1
 800692e:	e007      	b.n	8006940 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	695b      	ldr	r3, [r3, #20]
 8006936:	f003 0304 	and.w	r3, r3, #4
 800693a:	2b04      	cmp	r3, #4
 800693c:	d1ca      	bne.n	80068d4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800693e:	2300      	movs	r3, #0
}
 8006940:	4618      	mov	r0, r3
 8006942:	3710      	adds	r7, #16
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}

08006948 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006948:	b480      	push	{r7}
 800694a:	b085      	sub	sp, #20
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006950:	2300      	movs	r3, #0
 8006952:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006954:	4b13      	ldr	r3, [pc, #76]	; (80069a4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	08db      	lsrs	r3, r3, #3
 800695a:	4a13      	ldr	r2, [pc, #76]	; (80069a8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800695c:	fba2 2303 	umull	r2, r3, r2, r3
 8006960:	0a1a      	lsrs	r2, r3, #8
 8006962:	4613      	mov	r3, r2
 8006964:	009b      	lsls	r3, r3, #2
 8006966:	4413      	add	r3, r2
 8006968:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	3b01      	subs	r3, #1
 800696e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d107      	bne.n	8006986 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800697a:	f043 0220 	orr.w	r2, r3, #32
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006982:	2301      	movs	r3, #1
 8006984:	e008      	b.n	8006998 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006990:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006994:	d0e9      	beq.n	800696a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8006996:	2300      	movs	r3, #0
}
 8006998:	4618      	mov	r0, r3
 800699a:	3714      	adds	r7, #20
 800699c:	46bd      	mov	sp, r7
 800699e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a2:	4770      	bx	lr
 80069a4:	20000008 	.word	0x20000008
 80069a8:	14f8b589 	.word	0x14f8b589

080069ac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b084      	sub	sp, #16
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	60f8      	str	r0, [r7, #12]
 80069b4:	60b9      	str	r1, [r7, #8]
 80069b6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80069b8:	e042      	b.n	8006a40 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	695b      	ldr	r3, [r3, #20]
 80069c0:	f003 0310 	and.w	r3, r3, #16
 80069c4:	2b10      	cmp	r3, #16
 80069c6:	d119      	bne.n	80069fc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f06f 0210 	mvn.w	r2, #16
 80069d0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2200      	movs	r2, #0
 80069d6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	2220      	movs	r2, #32
 80069dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2200      	movs	r2, #0
 80069e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2200      	movs	r2, #0
 80069f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80069f8:	2301      	movs	r3, #1
 80069fa:	e029      	b.n	8006a50 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069fc:	f7fc fcba 	bl	8003374 <HAL_GetTick>
 8006a00:	4602      	mov	r2, r0
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	1ad3      	subs	r3, r2, r3
 8006a06:	68ba      	ldr	r2, [r7, #8]
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	d302      	bcc.n	8006a12 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d116      	bne.n	8006a40 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2200      	movs	r2, #0
 8006a16:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	2220      	movs	r2, #32
 8006a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	2200      	movs	r2, #0
 8006a24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a2c:	f043 0220 	orr.w	r2, r3, #32
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	2200      	movs	r2, #0
 8006a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	e007      	b.n	8006a50 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	695b      	ldr	r3, [r3, #20]
 8006a46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a4a:	2b40      	cmp	r3, #64	; 0x40
 8006a4c:	d1b5      	bne.n	80069ba <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006a4e:	2300      	movs	r3, #0
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	3710      	adds	r7, #16
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}

08006a58 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b083      	sub	sp, #12
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	695b      	ldr	r3, [r3, #20]
 8006a66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a6e:	d11b      	bne.n	8006aa8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006a78:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2220      	movs	r2, #32
 8006a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a94:	f043 0204 	orr.w	r2, r3, #4
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	e000      	b.n	8006aaa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006aa8:	2300      	movs	r3, #0
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	370c      	adds	r7, #12
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab4:	4770      	bx	lr

08006ab6 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006ab6:	b480      	push	{r7}
 8006ab8:	b083      	sub	sp, #12
 8006aba:	af00      	add	r7, sp, #0
 8006abc:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ac2:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006ac6:	d103      	bne.n	8006ad0 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2201      	movs	r2, #1
 8006acc:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006ace:	e007      	b.n	8006ae0 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ad4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006ad8:	d102      	bne.n	8006ae0 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2208      	movs	r2, #8
 8006ade:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006ae0:	bf00      	nop
 8006ae2:	370c      	adds	r7, #12
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aea:	4770      	bx	lr

08006aec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b086      	sub	sp, #24
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d101      	bne.n	8006afe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006afa:	2301      	movs	r3, #1
 8006afc:	e267      	b.n	8006fce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f003 0301 	and.w	r3, r3, #1
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d075      	beq.n	8006bf6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006b0a:	4b88      	ldr	r3, [pc, #544]	; (8006d2c <HAL_RCC_OscConfig+0x240>)
 8006b0c:	689b      	ldr	r3, [r3, #8]
 8006b0e:	f003 030c 	and.w	r3, r3, #12
 8006b12:	2b04      	cmp	r3, #4
 8006b14:	d00c      	beq.n	8006b30 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006b16:	4b85      	ldr	r3, [pc, #532]	; (8006d2c <HAL_RCC_OscConfig+0x240>)
 8006b18:	689b      	ldr	r3, [r3, #8]
 8006b1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006b1e:	2b08      	cmp	r3, #8
 8006b20:	d112      	bne.n	8006b48 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006b22:	4b82      	ldr	r3, [pc, #520]	; (8006d2c <HAL_RCC_OscConfig+0x240>)
 8006b24:	685b      	ldr	r3, [r3, #4]
 8006b26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b2e:	d10b      	bne.n	8006b48 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b30:	4b7e      	ldr	r3, [pc, #504]	; (8006d2c <HAL_RCC_OscConfig+0x240>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d05b      	beq.n	8006bf4 <HAL_RCC_OscConfig+0x108>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d157      	bne.n	8006bf4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006b44:	2301      	movs	r3, #1
 8006b46:	e242      	b.n	8006fce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	685b      	ldr	r3, [r3, #4]
 8006b4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b50:	d106      	bne.n	8006b60 <HAL_RCC_OscConfig+0x74>
 8006b52:	4b76      	ldr	r3, [pc, #472]	; (8006d2c <HAL_RCC_OscConfig+0x240>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a75      	ldr	r2, [pc, #468]	; (8006d2c <HAL_RCC_OscConfig+0x240>)
 8006b58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b5c:	6013      	str	r3, [r2, #0]
 8006b5e:	e01d      	b.n	8006b9c <HAL_RCC_OscConfig+0xb0>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	685b      	ldr	r3, [r3, #4]
 8006b64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006b68:	d10c      	bne.n	8006b84 <HAL_RCC_OscConfig+0x98>
 8006b6a:	4b70      	ldr	r3, [pc, #448]	; (8006d2c <HAL_RCC_OscConfig+0x240>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a6f      	ldr	r2, [pc, #444]	; (8006d2c <HAL_RCC_OscConfig+0x240>)
 8006b70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006b74:	6013      	str	r3, [r2, #0]
 8006b76:	4b6d      	ldr	r3, [pc, #436]	; (8006d2c <HAL_RCC_OscConfig+0x240>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a6c      	ldr	r2, [pc, #432]	; (8006d2c <HAL_RCC_OscConfig+0x240>)
 8006b7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b80:	6013      	str	r3, [r2, #0]
 8006b82:	e00b      	b.n	8006b9c <HAL_RCC_OscConfig+0xb0>
 8006b84:	4b69      	ldr	r3, [pc, #420]	; (8006d2c <HAL_RCC_OscConfig+0x240>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a68      	ldr	r2, [pc, #416]	; (8006d2c <HAL_RCC_OscConfig+0x240>)
 8006b8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b8e:	6013      	str	r3, [r2, #0]
 8006b90:	4b66      	ldr	r3, [pc, #408]	; (8006d2c <HAL_RCC_OscConfig+0x240>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a65      	ldr	r2, [pc, #404]	; (8006d2c <HAL_RCC_OscConfig+0x240>)
 8006b96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	685b      	ldr	r3, [r3, #4]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d013      	beq.n	8006bcc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ba4:	f7fc fbe6 	bl	8003374 <HAL_GetTick>
 8006ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006baa:	e008      	b.n	8006bbe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006bac:	f7fc fbe2 	bl	8003374 <HAL_GetTick>
 8006bb0:	4602      	mov	r2, r0
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	1ad3      	subs	r3, r2, r3
 8006bb6:	2b64      	cmp	r3, #100	; 0x64
 8006bb8:	d901      	bls.n	8006bbe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006bba:	2303      	movs	r3, #3
 8006bbc:	e207      	b.n	8006fce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006bbe:	4b5b      	ldr	r3, [pc, #364]	; (8006d2c <HAL_RCC_OscConfig+0x240>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d0f0      	beq.n	8006bac <HAL_RCC_OscConfig+0xc0>
 8006bca:	e014      	b.n	8006bf6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bcc:	f7fc fbd2 	bl	8003374 <HAL_GetTick>
 8006bd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006bd2:	e008      	b.n	8006be6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006bd4:	f7fc fbce 	bl	8003374 <HAL_GetTick>
 8006bd8:	4602      	mov	r2, r0
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	1ad3      	subs	r3, r2, r3
 8006bde:	2b64      	cmp	r3, #100	; 0x64
 8006be0:	d901      	bls.n	8006be6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006be2:	2303      	movs	r3, #3
 8006be4:	e1f3      	b.n	8006fce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006be6:	4b51      	ldr	r3, [pc, #324]	; (8006d2c <HAL_RCC_OscConfig+0x240>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d1f0      	bne.n	8006bd4 <HAL_RCC_OscConfig+0xe8>
 8006bf2:	e000      	b.n	8006bf6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006bf4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f003 0302 	and.w	r3, r3, #2
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d063      	beq.n	8006cca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006c02:	4b4a      	ldr	r3, [pc, #296]	; (8006d2c <HAL_RCC_OscConfig+0x240>)
 8006c04:	689b      	ldr	r3, [r3, #8]
 8006c06:	f003 030c 	and.w	r3, r3, #12
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d00b      	beq.n	8006c26 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006c0e:	4b47      	ldr	r3, [pc, #284]	; (8006d2c <HAL_RCC_OscConfig+0x240>)
 8006c10:	689b      	ldr	r3, [r3, #8]
 8006c12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006c16:	2b08      	cmp	r3, #8
 8006c18:	d11c      	bne.n	8006c54 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006c1a:	4b44      	ldr	r3, [pc, #272]	; (8006d2c <HAL_RCC_OscConfig+0x240>)
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d116      	bne.n	8006c54 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c26:	4b41      	ldr	r3, [pc, #260]	; (8006d2c <HAL_RCC_OscConfig+0x240>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f003 0302 	and.w	r3, r3, #2
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d005      	beq.n	8006c3e <HAL_RCC_OscConfig+0x152>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	68db      	ldr	r3, [r3, #12]
 8006c36:	2b01      	cmp	r3, #1
 8006c38:	d001      	beq.n	8006c3e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	e1c7      	b.n	8006fce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c3e:	4b3b      	ldr	r3, [pc, #236]	; (8006d2c <HAL_RCC_OscConfig+0x240>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	691b      	ldr	r3, [r3, #16]
 8006c4a:	00db      	lsls	r3, r3, #3
 8006c4c:	4937      	ldr	r1, [pc, #220]	; (8006d2c <HAL_RCC_OscConfig+0x240>)
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c52:	e03a      	b.n	8006cca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	68db      	ldr	r3, [r3, #12]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d020      	beq.n	8006c9e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006c5c:	4b34      	ldr	r3, [pc, #208]	; (8006d30 <HAL_RCC_OscConfig+0x244>)
 8006c5e:	2201      	movs	r2, #1
 8006c60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c62:	f7fc fb87 	bl	8003374 <HAL_GetTick>
 8006c66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c68:	e008      	b.n	8006c7c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c6a:	f7fc fb83 	bl	8003374 <HAL_GetTick>
 8006c6e:	4602      	mov	r2, r0
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	1ad3      	subs	r3, r2, r3
 8006c74:	2b02      	cmp	r3, #2
 8006c76:	d901      	bls.n	8006c7c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006c78:	2303      	movs	r3, #3
 8006c7a:	e1a8      	b.n	8006fce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c7c:	4b2b      	ldr	r3, [pc, #172]	; (8006d2c <HAL_RCC_OscConfig+0x240>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f003 0302 	and.w	r3, r3, #2
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d0f0      	beq.n	8006c6a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c88:	4b28      	ldr	r3, [pc, #160]	; (8006d2c <HAL_RCC_OscConfig+0x240>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	691b      	ldr	r3, [r3, #16]
 8006c94:	00db      	lsls	r3, r3, #3
 8006c96:	4925      	ldr	r1, [pc, #148]	; (8006d2c <HAL_RCC_OscConfig+0x240>)
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	600b      	str	r3, [r1, #0]
 8006c9c:	e015      	b.n	8006cca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006c9e:	4b24      	ldr	r3, [pc, #144]	; (8006d30 <HAL_RCC_OscConfig+0x244>)
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ca4:	f7fc fb66 	bl	8003374 <HAL_GetTick>
 8006ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006caa:	e008      	b.n	8006cbe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006cac:	f7fc fb62 	bl	8003374 <HAL_GetTick>
 8006cb0:	4602      	mov	r2, r0
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	1ad3      	subs	r3, r2, r3
 8006cb6:	2b02      	cmp	r3, #2
 8006cb8:	d901      	bls.n	8006cbe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006cba:	2303      	movs	r3, #3
 8006cbc:	e187      	b.n	8006fce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006cbe:	4b1b      	ldr	r3, [pc, #108]	; (8006d2c <HAL_RCC_OscConfig+0x240>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f003 0302 	and.w	r3, r3, #2
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d1f0      	bne.n	8006cac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f003 0308 	and.w	r3, r3, #8
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d036      	beq.n	8006d44 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	695b      	ldr	r3, [r3, #20]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d016      	beq.n	8006d0c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006cde:	4b15      	ldr	r3, [pc, #84]	; (8006d34 <HAL_RCC_OscConfig+0x248>)
 8006ce0:	2201      	movs	r2, #1
 8006ce2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ce4:	f7fc fb46 	bl	8003374 <HAL_GetTick>
 8006ce8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006cea:	e008      	b.n	8006cfe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006cec:	f7fc fb42 	bl	8003374 <HAL_GetTick>
 8006cf0:	4602      	mov	r2, r0
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	1ad3      	subs	r3, r2, r3
 8006cf6:	2b02      	cmp	r3, #2
 8006cf8:	d901      	bls.n	8006cfe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006cfa:	2303      	movs	r3, #3
 8006cfc:	e167      	b.n	8006fce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006cfe:	4b0b      	ldr	r3, [pc, #44]	; (8006d2c <HAL_RCC_OscConfig+0x240>)
 8006d00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d02:	f003 0302 	and.w	r3, r3, #2
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d0f0      	beq.n	8006cec <HAL_RCC_OscConfig+0x200>
 8006d0a:	e01b      	b.n	8006d44 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006d0c:	4b09      	ldr	r3, [pc, #36]	; (8006d34 <HAL_RCC_OscConfig+0x248>)
 8006d0e:	2200      	movs	r2, #0
 8006d10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d12:	f7fc fb2f 	bl	8003374 <HAL_GetTick>
 8006d16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d18:	e00e      	b.n	8006d38 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d1a:	f7fc fb2b 	bl	8003374 <HAL_GetTick>
 8006d1e:	4602      	mov	r2, r0
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	1ad3      	subs	r3, r2, r3
 8006d24:	2b02      	cmp	r3, #2
 8006d26:	d907      	bls.n	8006d38 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006d28:	2303      	movs	r3, #3
 8006d2a:	e150      	b.n	8006fce <HAL_RCC_OscConfig+0x4e2>
 8006d2c:	40023800 	.word	0x40023800
 8006d30:	42470000 	.word	0x42470000
 8006d34:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d38:	4b88      	ldr	r3, [pc, #544]	; (8006f5c <HAL_RCC_OscConfig+0x470>)
 8006d3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d3c:	f003 0302 	and.w	r3, r3, #2
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d1ea      	bne.n	8006d1a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f003 0304 	and.w	r3, r3, #4
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	f000 8097 	beq.w	8006e80 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006d52:	2300      	movs	r3, #0
 8006d54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006d56:	4b81      	ldr	r3, [pc, #516]	; (8006f5c <HAL_RCC_OscConfig+0x470>)
 8006d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d10f      	bne.n	8006d82 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d62:	2300      	movs	r3, #0
 8006d64:	60bb      	str	r3, [r7, #8]
 8006d66:	4b7d      	ldr	r3, [pc, #500]	; (8006f5c <HAL_RCC_OscConfig+0x470>)
 8006d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d6a:	4a7c      	ldr	r2, [pc, #496]	; (8006f5c <HAL_RCC_OscConfig+0x470>)
 8006d6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d70:	6413      	str	r3, [r2, #64]	; 0x40
 8006d72:	4b7a      	ldr	r3, [pc, #488]	; (8006f5c <HAL_RCC_OscConfig+0x470>)
 8006d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d7a:	60bb      	str	r3, [r7, #8]
 8006d7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006d7e:	2301      	movs	r3, #1
 8006d80:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d82:	4b77      	ldr	r3, [pc, #476]	; (8006f60 <HAL_RCC_OscConfig+0x474>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d118      	bne.n	8006dc0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006d8e:	4b74      	ldr	r3, [pc, #464]	; (8006f60 <HAL_RCC_OscConfig+0x474>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a73      	ldr	r2, [pc, #460]	; (8006f60 <HAL_RCC_OscConfig+0x474>)
 8006d94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006d9a:	f7fc faeb 	bl	8003374 <HAL_GetTick>
 8006d9e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006da0:	e008      	b.n	8006db4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006da2:	f7fc fae7 	bl	8003374 <HAL_GetTick>
 8006da6:	4602      	mov	r2, r0
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	1ad3      	subs	r3, r2, r3
 8006dac:	2b02      	cmp	r3, #2
 8006dae:	d901      	bls.n	8006db4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006db0:	2303      	movs	r3, #3
 8006db2:	e10c      	b.n	8006fce <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006db4:	4b6a      	ldr	r3, [pc, #424]	; (8006f60 <HAL_RCC_OscConfig+0x474>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d0f0      	beq.n	8006da2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	689b      	ldr	r3, [r3, #8]
 8006dc4:	2b01      	cmp	r3, #1
 8006dc6:	d106      	bne.n	8006dd6 <HAL_RCC_OscConfig+0x2ea>
 8006dc8:	4b64      	ldr	r3, [pc, #400]	; (8006f5c <HAL_RCC_OscConfig+0x470>)
 8006dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dcc:	4a63      	ldr	r2, [pc, #396]	; (8006f5c <HAL_RCC_OscConfig+0x470>)
 8006dce:	f043 0301 	orr.w	r3, r3, #1
 8006dd2:	6713      	str	r3, [r2, #112]	; 0x70
 8006dd4:	e01c      	b.n	8006e10 <HAL_RCC_OscConfig+0x324>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	689b      	ldr	r3, [r3, #8]
 8006dda:	2b05      	cmp	r3, #5
 8006ddc:	d10c      	bne.n	8006df8 <HAL_RCC_OscConfig+0x30c>
 8006dde:	4b5f      	ldr	r3, [pc, #380]	; (8006f5c <HAL_RCC_OscConfig+0x470>)
 8006de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006de2:	4a5e      	ldr	r2, [pc, #376]	; (8006f5c <HAL_RCC_OscConfig+0x470>)
 8006de4:	f043 0304 	orr.w	r3, r3, #4
 8006de8:	6713      	str	r3, [r2, #112]	; 0x70
 8006dea:	4b5c      	ldr	r3, [pc, #368]	; (8006f5c <HAL_RCC_OscConfig+0x470>)
 8006dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dee:	4a5b      	ldr	r2, [pc, #364]	; (8006f5c <HAL_RCC_OscConfig+0x470>)
 8006df0:	f043 0301 	orr.w	r3, r3, #1
 8006df4:	6713      	str	r3, [r2, #112]	; 0x70
 8006df6:	e00b      	b.n	8006e10 <HAL_RCC_OscConfig+0x324>
 8006df8:	4b58      	ldr	r3, [pc, #352]	; (8006f5c <HAL_RCC_OscConfig+0x470>)
 8006dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dfc:	4a57      	ldr	r2, [pc, #348]	; (8006f5c <HAL_RCC_OscConfig+0x470>)
 8006dfe:	f023 0301 	bic.w	r3, r3, #1
 8006e02:	6713      	str	r3, [r2, #112]	; 0x70
 8006e04:	4b55      	ldr	r3, [pc, #340]	; (8006f5c <HAL_RCC_OscConfig+0x470>)
 8006e06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e08:	4a54      	ldr	r2, [pc, #336]	; (8006f5c <HAL_RCC_OscConfig+0x470>)
 8006e0a:	f023 0304 	bic.w	r3, r3, #4
 8006e0e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	689b      	ldr	r3, [r3, #8]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d015      	beq.n	8006e44 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e18:	f7fc faac 	bl	8003374 <HAL_GetTick>
 8006e1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e1e:	e00a      	b.n	8006e36 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e20:	f7fc faa8 	bl	8003374 <HAL_GetTick>
 8006e24:	4602      	mov	r2, r0
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	1ad3      	subs	r3, r2, r3
 8006e2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d901      	bls.n	8006e36 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006e32:	2303      	movs	r3, #3
 8006e34:	e0cb      	b.n	8006fce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e36:	4b49      	ldr	r3, [pc, #292]	; (8006f5c <HAL_RCC_OscConfig+0x470>)
 8006e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e3a:	f003 0302 	and.w	r3, r3, #2
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d0ee      	beq.n	8006e20 <HAL_RCC_OscConfig+0x334>
 8006e42:	e014      	b.n	8006e6e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e44:	f7fc fa96 	bl	8003374 <HAL_GetTick>
 8006e48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e4a:	e00a      	b.n	8006e62 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e4c:	f7fc fa92 	bl	8003374 <HAL_GetTick>
 8006e50:	4602      	mov	r2, r0
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	1ad3      	subs	r3, r2, r3
 8006e56:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d901      	bls.n	8006e62 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006e5e:	2303      	movs	r3, #3
 8006e60:	e0b5      	b.n	8006fce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e62:	4b3e      	ldr	r3, [pc, #248]	; (8006f5c <HAL_RCC_OscConfig+0x470>)
 8006e64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e66:	f003 0302 	and.w	r3, r3, #2
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d1ee      	bne.n	8006e4c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006e6e:	7dfb      	ldrb	r3, [r7, #23]
 8006e70:	2b01      	cmp	r3, #1
 8006e72:	d105      	bne.n	8006e80 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e74:	4b39      	ldr	r3, [pc, #228]	; (8006f5c <HAL_RCC_OscConfig+0x470>)
 8006e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e78:	4a38      	ldr	r2, [pc, #224]	; (8006f5c <HAL_RCC_OscConfig+0x470>)
 8006e7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e7e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	699b      	ldr	r3, [r3, #24]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	f000 80a1 	beq.w	8006fcc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006e8a:	4b34      	ldr	r3, [pc, #208]	; (8006f5c <HAL_RCC_OscConfig+0x470>)
 8006e8c:	689b      	ldr	r3, [r3, #8]
 8006e8e:	f003 030c 	and.w	r3, r3, #12
 8006e92:	2b08      	cmp	r3, #8
 8006e94:	d05c      	beq.n	8006f50 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	699b      	ldr	r3, [r3, #24]
 8006e9a:	2b02      	cmp	r3, #2
 8006e9c:	d141      	bne.n	8006f22 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e9e:	4b31      	ldr	r3, [pc, #196]	; (8006f64 <HAL_RCC_OscConfig+0x478>)
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ea4:	f7fc fa66 	bl	8003374 <HAL_GetTick>
 8006ea8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006eaa:	e008      	b.n	8006ebe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006eac:	f7fc fa62 	bl	8003374 <HAL_GetTick>
 8006eb0:	4602      	mov	r2, r0
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	1ad3      	subs	r3, r2, r3
 8006eb6:	2b02      	cmp	r3, #2
 8006eb8:	d901      	bls.n	8006ebe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006eba:	2303      	movs	r3, #3
 8006ebc:	e087      	b.n	8006fce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ebe:	4b27      	ldr	r3, [pc, #156]	; (8006f5c <HAL_RCC_OscConfig+0x470>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d1f0      	bne.n	8006eac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	69da      	ldr	r2, [r3, #28]
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6a1b      	ldr	r3, [r3, #32]
 8006ed2:	431a      	orrs	r2, r3
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed8:	019b      	lsls	r3, r3, #6
 8006eda:	431a      	orrs	r2, r3
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ee0:	085b      	lsrs	r3, r3, #1
 8006ee2:	3b01      	subs	r3, #1
 8006ee4:	041b      	lsls	r3, r3, #16
 8006ee6:	431a      	orrs	r2, r3
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eec:	061b      	lsls	r3, r3, #24
 8006eee:	491b      	ldr	r1, [pc, #108]	; (8006f5c <HAL_RCC_OscConfig+0x470>)
 8006ef0:	4313      	orrs	r3, r2
 8006ef2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006ef4:	4b1b      	ldr	r3, [pc, #108]	; (8006f64 <HAL_RCC_OscConfig+0x478>)
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006efa:	f7fc fa3b 	bl	8003374 <HAL_GetTick>
 8006efe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f00:	e008      	b.n	8006f14 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f02:	f7fc fa37 	bl	8003374 <HAL_GetTick>
 8006f06:	4602      	mov	r2, r0
 8006f08:	693b      	ldr	r3, [r7, #16]
 8006f0a:	1ad3      	subs	r3, r2, r3
 8006f0c:	2b02      	cmp	r3, #2
 8006f0e:	d901      	bls.n	8006f14 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006f10:	2303      	movs	r3, #3
 8006f12:	e05c      	b.n	8006fce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f14:	4b11      	ldr	r3, [pc, #68]	; (8006f5c <HAL_RCC_OscConfig+0x470>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d0f0      	beq.n	8006f02 <HAL_RCC_OscConfig+0x416>
 8006f20:	e054      	b.n	8006fcc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f22:	4b10      	ldr	r3, [pc, #64]	; (8006f64 <HAL_RCC_OscConfig+0x478>)
 8006f24:	2200      	movs	r2, #0
 8006f26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f28:	f7fc fa24 	bl	8003374 <HAL_GetTick>
 8006f2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f2e:	e008      	b.n	8006f42 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f30:	f7fc fa20 	bl	8003374 <HAL_GetTick>
 8006f34:	4602      	mov	r2, r0
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	1ad3      	subs	r3, r2, r3
 8006f3a:	2b02      	cmp	r3, #2
 8006f3c:	d901      	bls.n	8006f42 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006f3e:	2303      	movs	r3, #3
 8006f40:	e045      	b.n	8006fce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f42:	4b06      	ldr	r3, [pc, #24]	; (8006f5c <HAL_RCC_OscConfig+0x470>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d1f0      	bne.n	8006f30 <HAL_RCC_OscConfig+0x444>
 8006f4e:	e03d      	b.n	8006fcc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	699b      	ldr	r3, [r3, #24]
 8006f54:	2b01      	cmp	r3, #1
 8006f56:	d107      	bne.n	8006f68 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006f58:	2301      	movs	r3, #1
 8006f5a:	e038      	b.n	8006fce <HAL_RCC_OscConfig+0x4e2>
 8006f5c:	40023800 	.word	0x40023800
 8006f60:	40007000 	.word	0x40007000
 8006f64:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006f68:	4b1b      	ldr	r3, [pc, #108]	; (8006fd8 <HAL_RCC_OscConfig+0x4ec>)
 8006f6a:	685b      	ldr	r3, [r3, #4]
 8006f6c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	699b      	ldr	r3, [r3, #24]
 8006f72:	2b01      	cmp	r3, #1
 8006f74:	d028      	beq.n	8006fc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f80:	429a      	cmp	r2, r3
 8006f82:	d121      	bne.n	8006fc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f8e:	429a      	cmp	r2, r3
 8006f90:	d11a      	bne.n	8006fc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006f92:	68fa      	ldr	r2, [r7, #12]
 8006f94:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006f98:	4013      	ands	r3, r2
 8006f9a:	687a      	ldr	r2, [r7, #4]
 8006f9c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006f9e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d111      	bne.n	8006fc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fae:	085b      	lsrs	r3, r3, #1
 8006fb0:	3b01      	subs	r3, #1
 8006fb2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006fb4:	429a      	cmp	r2, r3
 8006fb6:	d107      	bne.n	8006fc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fc2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	d001      	beq.n	8006fcc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006fc8:	2301      	movs	r3, #1
 8006fca:	e000      	b.n	8006fce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006fcc:	2300      	movs	r3, #0
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3718      	adds	r7, #24
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}
 8006fd6:	bf00      	nop
 8006fd8:	40023800 	.word	0x40023800

08006fdc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b084      	sub	sp, #16
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
 8006fe4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d101      	bne.n	8006ff0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006fec:	2301      	movs	r3, #1
 8006fee:	e0cc      	b.n	800718a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006ff0:	4b68      	ldr	r3, [pc, #416]	; (8007194 <HAL_RCC_ClockConfig+0x1b8>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f003 0307 	and.w	r3, r3, #7
 8006ff8:	683a      	ldr	r2, [r7, #0]
 8006ffa:	429a      	cmp	r2, r3
 8006ffc:	d90c      	bls.n	8007018 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ffe:	4b65      	ldr	r3, [pc, #404]	; (8007194 <HAL_RCC_ClockConfig+0x1b8>)
 8007000:	683a      	ldr	r2, [r7, #0]
 8007002:	b2d2      	uxtb	r2, r2
 8007004:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007006:	4b63      	ldr	r3, [pc, #396]	; (8007194 <HAL_RCC_ClockConfig+0x1b8>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f003 0307 	and.w	r3, r3, #7
 800700e:	683a      	ldr	r2, [r7, #0]
 8007010:	429a      	cmp	r2, r3
 8007012:	d001      	beq.n	8007018 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007014:	2301      	movs	r3, #1
 8007016:	e0b8      	b.n	800718a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f003 0302 	and.w	r3, r3, #2
 8007020:	2b00      	cmp	r3, #0
 8007022:	d020      	beq.n	8007066 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f003 0304 	and.w	r3, r3, #4
 800702c:	2b00      	cmp	r3, #0
 800702e:	d005      	beq.n	800703c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007030:	4b59      	ldr	r3, [pc, #356]	; (8007198 <HAL_RCC_ClockConfig+0x1bc>)
 8007032:	689b      	ldr	r3, [r3, #8]
 8007034:	4a58      	ldr	r2, [pc, #352]	; (8007198 <HAL_RCC_ClockConfig+0x1bc>)
 8007036:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800703a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f003 0308 	and.w	r3, r3, #8
 8007044:	2b00      	cmp	r3, #0
 8007046:	d005      	beq.n	8007054 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007048:	4b53      	ldr	r3, [pc, #332]	; (8007198 <HAL_RCC_ClockConfig+0x1bc>)
 800704a:	689b      	ldr	r3, [r3, #8]
 800704c:	4a52      	ldr	r2, [pc, #328]	; (8007198 <HAL_RCC_ClockConfig+0x1bc>)
 800704e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007052:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007054:	4b50      	ldr	r3, [pc, #320]	; (8007198 <HAL_RCC_ClockConfig+0x1bc>)
 8007056:	689b      	ldr	r3, [r3, #8]
 8007058:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	689b      	ldr	r3, [r3, #8]
 8007060:	494d      	ldr	r1, [pc, #308]	; (8007198 <HAL_RCC_ClockConfig+0x1bc>)
 8007062:	4313      	orrs	r3, r2
 8007064:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f003 0301 	and.w	r3, r3, #1
 800706e:	2b00      	cmp	r3, #0
 8007070:	d044      	beq.n	80070fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	2b01      	cmp	r3, #1
 8007078:	d107      	bne.n	800708a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800707a:	4b47      	ldr	r3, [pc, #284]	; (8007198 <HAL_RCC_ClockConfig+0x1bc>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007082:	2b00      	cmp	r3, #0
 8007084:	d119      	bne.n	80070ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007086:	2301      	movs	r3, #1
 8007088:	e07f      	b.n	800718a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	685b      	ldr	r3, [r3, #4]
 800708e:	2b02      	cmp	r3, #2
 8007090:	d003      	beq.n	800709a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007096:	2b03      	cmp	r3, #3
 8007098:	d107      	bne.n	80070aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800709a:	4b3f      	ldr	r3, [pc, #252]	; (8007198 <HAL_RCC_ClockConfig+0x1bc>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d109      	bne.n	80070ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80070a6:	2301      	movs	r3, #1
 80070a8:	e06f      	b.n	800718a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070aa:	4b3b      	ldr	r3, [pc, #236]	; (8007198 <HAL_RCC_ClockConfig+0x1bc>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f003 0302 	and.w	r3, r3, #2
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d101      	bne.n	80070ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80070b6:	2301      	movs	r3, #1
 80070b8:	e067      	b.n	800718a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80070ba:	4b37      	ldr	r3, [pc, #220]	; (8007198 <HAL_RCC_ClockConfig+0x1bc>)
 80070bc:	689b      	ldr	r3, [r3, #8]
 80070be:	f023 0203 	bic.w	r2, r3, #3
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	4934      	ldr	r1, [pc, #208]	; (8007198 <HAL_RCC_ClockConfig+0x1bc>)
 80070c8:	4313      	orrs	r3, r2
 80070ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80070cc:	f7fc f952 	bl	8003374 <HAL_GetTick>
 80070d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070d2:	e00a      	b.n	80070ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80070d4:	f7fc f94e 	bl	8003374 <HAL_GetTick>
 80070d8:	4602      	mov	r2, r0
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	1ad3      	subs	r3, r2, r3
 80070de:	f241 3288 	movw	r2, #5000	; 0x1388
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d901      	bls.n	80070ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80070e6:	2303      	movs	r3, #3
 80070e8:	e04f      	b.n	800718a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070ea:	4b2b      	ldr	r3, [pc, #172]	; (8007198 <HAL_RCC_ClockConfig+0x1bc>)
 80070ec:	689b      	ldr	r3, [r3, #8]
 80070ee:	f003 020c 	and.w	r2, r3, #12
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	009b      	lsls	r3, r3, #2
 80070f8:	429a      	cmp	r2, r3
 80070fa:	d1eb      	bne.n	80070d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80070fc:	4b25      	ldr	r3, [pc, #148]	; (8007194 <HAL_RCC_ClockConfig+0x1b8>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f003 0307 	and.w	r3, r3, #7
 8007104:	683a      	ldr	r2, [r7, #0]
 8007106:	429a      	cmp	r2, r3
 8007108:	d20c      	bcs.n	8007124 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800710a:	4b22      	ldr	r3, [pc, #136]	; (8007194 <HAL_RCC_ClockConfig+0x1b8>)
 800710c:	683a      	ldr	r2, [r7, #0]
 800710e:	b2d2      	uxtb	r2, r2
 8007110:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007112:	4b20      	ldr	r3, [pc, #128]	; (8007194 <HAL_RCC_ClockConfig+0x1b8>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f003 0307 	and.w	r3, r3, #7
 800711a:	683a      	ldr	r2, [r7, #0]
 800711c:	429a      	cmp	r2, r3
 800711e:	d001      	beq.n	8007124 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007120:	2301      	movs	r3, #1
 8007122:	e032      	b.n	800718a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f003 0304 	and.w	r3, r3, #4
 800712c:	2b00      	cmp	r3, #0
 800712e:	d008      	beq.n	8007142 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007130:	4b19      	ldr	r3, [pc, #100]	; (8007198 <HAL_RCC_ClockConfig+0x1bc>)
 8007132:	689b      	ldr	r3, [r3, #8]
 8007134:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	68db      	ldr	r3, [r3, #12]
 800713c:	4916      	ldr	r1, [pc, #88]	; (8007198 <HAL_RCC_ClockConfig+0x1bc>)
 800713e:	4313      	orrs	r3, r2
 8007140:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f003 0308 	and.w	r3, r3, #8
 800714a:	2b00      	cmp	r3, #0
 800714c:	d009      	beq.n	8007162 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800714e:	4b12      	ldr	r3, [pc, #72]	; (8007198 <HAL_RCC_ClockConfig+0x1bc>)
 8007150:	689b      	ldr	r3, [r3, #8]
 8007152:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	691b      	ldr	r3, [r3, #16]
 800715a:	00db      	lsls	r3, r3, #3
 800715c:	490e      	ldr	r1, [pc, #56]	; (8007198 <HAL_RCC_ClockConfig+0x1bc>)
 800715e:	4313      	orrs	r3, r2
 8007160:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007162:	f000 f821 	bl	80071a8 <HAL_RCC_GetSysClockFreq>
 8007166:	4602      	mov	r2, r0
 8007168:	4b0b      	ldr	r3, [pc, #44]	; (8007198 <HAL_RCC_ClockConfig+0x1bc>)
 800716a:	689b      	ldr	r3, [r3, #8]
 800716c:	091b      	lsrs	r3, r3, #4
 800716e:	f003 030f 	and.w	r3, r3, #15
 8007172:	490a      	ldr	r1, [pc, #40]	; (800719c <HAL_RCC_ClockConfig+0x1c0>)
 8007174:	5ccb      	ldrb	r3, [r1, r3]
 8007176:	fa22 f303 	lsr.w	r3, r2, r3
 800717a:	4a09      	ldr	r2, [pc, #36]	; (80071a0 <HAL_RCC_ClockConfig+0x1c4>)
 800717c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800717e:	4b09      	ldr	r3, [pc, #36]	; (80071a4 <HAL_RCC_ClockConfig+0x1c8>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4618      	mov	r0, r3
 8007184:	f7fc f8b2 	bl	80032ec <HAL_InitTick>

  return HAL_OK;
 8007188:	2300      	movs	r3, #0
}
 800718a:	4618      	mov	r0, r3
 800718c:	3710      	adds	r7, #16
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}
 8007192:	bf00      	nop
 8007194:	40023c00 	.word	0x40023c00
 8007198:	40023800 	.word	0x40023800
 800719c:	08014230 	.word	0x08014230
 80071a0:	20000008 	.word	0x20000008
 80071a4:	2000001c 	.word	0x2000001c

080071a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80071a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80071ac:	b094      	sub	sp, #80	; 0x50
 80071ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80071b0:	2300      	movs	r3, #0
 80071b2:	647b      	str	r3, [r7, #68]	; 0x44
 80071b4:	2300      	movs	r3, #0
 80071b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80071b8:	2300      	movs	r3, #0
 80071ba:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80071bc:	2300      	movs	r3, #0
 80071be:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80071c0:	4b79      	ldr	r3, [pc, #484]	; (80073a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80071c2:	689b      	ldr	r3, [r3, #8]
 80071c4:	f003 030c 	and.w	r3, r3, #12
 80071c8:	2b08      	cmp	r3, #8
 80071ca:	d00d      	beq.n	80071e8 <HAL_RCC_GetSysClockFreq+0x40>
 80071cc:	2b08      	cmp	r3, #8
 80071ce:	f200 80e1 	bhi.w	8007394 <HAL_RCC_GetSysClockFreq+0x1ec>
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d002      	beq.n	80071dc <HAL_RCC_GetSysClockFreq+0x34>
 80071d6:	2b04      	cmp	r3, #4
 80071d8:	d003      	beq.n	80071e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80071da:	e0db      	b.n	8007394 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80071dc:	4b73      	ldr	r3, [pc, #460]	; (80073ac <HAL_RCC_GetSysClockFreq+0x204>)
 80071de:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80071e0:	e0db      	b.n	800739a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80071e2:	4b73      	ldr	r3, [pc, #460]	; (80073b0 <HAL_RCC_GetSysClockFreq+0x208>)
 80071e4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80071e6:	e0d8      	b.n	800739a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80071e8:	4b6f      	ldr	r3, [pc, #444]	; (80073a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80071ea:	685b      	ldr	r3, [r3, #4]
 80071ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80071f0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80071f2:	4b6d      	ldr	r3, [pc, #436]	; (80073a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80071f4:	685b      	ldr	r3, [r3, #4]
 80071f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d063      	beq.n	80072c6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80071fe:	4b6a      	ldr	r3, [pc, #424]	; (80073a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8007200:	685b      	ldr	r3, [r3, #4]
 8007202:	099b      	lsrs	r3, r3, #6
 8007204:	2200      	movs	r2, #0
 8007206:	63bb      	str	r3, [r7, #56]	; 0x38
 8007208:	63fa      	str	r2, [r7, #60]	; 0x3c
 800720a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800720c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007210:	633b      	str	r3, [r7, #48]	; 0x30
 8007212:	2300      	movs	r3, #0
 8007214:	637b      	str	r3, [r7, #52]	; 0x34
 8007216:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800721a:	4622      	mov	r2, r4
 800721c:	462b      	mov	r3, r5
 800721e:	f04f 0000 	mov.w	r0, #0
 8007222:	f04f 0100 	mov.w	r1, #0
 8007226:	0159      	lsls	r1, r3, #5
 8007228:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800722c:	0150      	lsls	r0, r2, #5
 800722e:	4602      	mov	r2, r0
 8007230:	460b      	mov	r3, r1
 8007232:	4621      	mov	r1, r4
 8007234:	1a51      	subs	r1, r2, r1
 8007236:	6139      	str	r1, [r7, #16]
 8007238:	4629      	mov	r1, r5
 800723a:	eb63 0301 	sbc.w	r3, r3, r1
 800723e:	617b      	str	r3, [r7, #20]
 8007240:	f04f 0200 	mov.w	r2, #0
 8007244:	f04f 0300 	mov.w	r3, #0
 8007248:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800724c:	4659      	mov	r1, fp
 800724e:	018b      	lsls	r3, r1, #6
 8007250:	4651      	mov	r1, sl
 8007252:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007256:	4651      	mov	r1, sl
 8007258:	018a      	lsls	r2, r1, #6
 800725a:	4651      	mov	r1, sl
 800725c:	ebb2 0801 	subs.w	r8, r2, r1
 8007260:	4659      	mov	r1, fp
 8007262:	eb63 0901 	sbc.w	r9, r3, r1
 8007266:	f04f 0200 	mov.w	r2, #0
 800726a:	f04f 0300 	mov.w	r3, #0
 800726e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007272:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007276:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800727a:	4690      	mov	r8, r2
 800727c:	4699      	mov	r9, r3
 800727e:	4623      	mov	r3, r4
 8007280:	eb18 0303 	adds.w	r3, r8, r3
 8007284:	60bb      	str	r3, [r7, #8]
 8007286:	462b      	mov	r3, r5
 8007288:	eb49 0303 	adc.w	r3, r9, r3
 800728c:	60fb      	str	r3, [r7, #12]
 800728e:	f04f 0200 	mov.w	r2, #0
 8007292:	f04f 0300 	mov.w	r3, #0
 8007296:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800729a:	4629      	mov	r1, r5
 800729c:	024b      	lsls	r3, r1, #9
 800729e:	4621      	mov	r1, r4
 80072a0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80072a4:	4621      	mov	r1, r4
 80072a6:	024a      	lsls	r2, r1, #9
 80072a8:	4610      	mov	r0, r2
 80072aa:	4619      	mov	r1, r3
 80072ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072ae:	2200      	movs	r2, #0
 80072b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80072b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80072b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80072b8:	f7f9 fcee 	bl	8000c98 <__aeabi_uldivmod>
 80072bc:	4602      	mov	r2, r0
 80072be:	460b      	mov	r3, r1
 80072c0:	4613      	mov	r3, r2
 80072c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80072c4:	e058      	b.n	8007378 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80072c6:	4b38      	ldr	r3, [pc, #224]	; (80073a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80072c8:	685b      	ldr	r3, [r3, #4]
 80072ca:	099b      	lsrs	r3, r3, #6
 80072cc:	2200      	movs	r2, #0
 80072ce:	4618      	mov	r0, r3
 80072d0:	4611      	mov	r1, r2
 80072d2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80072d6:	623b      	str	r3, [r7, #32]
 80072d8:	2300      	movs	r3, #0
 80072da:	627b      	str	r3, [r7, #36]	; 0x24
 80072dc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80072e0:	4642      	mov	r2, r8
 80072e2:	464b      	mov	r3, r9
 80072e4:	f04f 0000 	mov.w	r0, #0
 80072e8:	f04f 0100 	mov.w	r1, #0
 80072ec:	0159      	lsls	r1, r3, #5
 80072ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80072f2:	0150      	lsls	r0, r2, #5
 80072f4:	4602      	mov	r2, r0
 80072f6:	460b      	mov	r3, r1
 80072f8:	4641      	mov	r1, r8
 80072fa:	ebb2 0a01 	subs.w	sl, r2, r1
 80072fe:	4649      	mov	r1, r9
 8007300:	eb63 0b01 	sbc.w	fp, r3, r1
 8007304:	f04f 0200 	mov.w	r2, #0
 8007308:	f04f 0300 	mov.w	r3, #0
 800730c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007310:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007314:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007318:	ebb2 040a 	subs.w	r4, r2, sl
 800731c:	eb63 050b 	sbc.w	r5, r3, fp
 8007320:	f04f 0200 	mov.w	r2, #0
 8007324:	f04f 0300 	mov.w	r3, #0
 8007328:	00eb      	lsls	r3, r5, #3
 800732a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800732e:	00e2      	lsls	r2, r4, #3
 8007330:	4614      	mov	r4, r2
 8007332:	461d      	mov	r5, r3
 8007334:	4643      	mov	r3, r8
 8007336:	18e3      	adds	r3, r4, r3
 8007338:	603b      	str	r3, [r7, #0]
 800733a:	464b      	mov	r3, r9
 800733c:	eb45 0303 	adc.w	r3, r5, r3
 8007340:	607b      	str	r3, [r7, #4]
 8007342:	f04f 0200 	mov.w	r2, #0
 8007346:	f04f 0300 	mov.w	r3, #0
 800734a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800734e:	4629      	mov	r1, r5
 8007350:	028b      	lsls	r3, r1, #10
 8007352:	4621      	mov	r1, r4
 8007354:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007358:	4621      	mov	r1, r4
 800735a:	028a      	lsls	r2, r1, #10
 800735c:	4610      	mov	r0, r2
 800735e:	4619      	mov	r1, r3
 8007360:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007362:	2200      	movs	r2, #0
 8007364:	61bb      	str	r3, [r7, #24]
 8007366:	61fa      	str	r2, [r7, #28]
 8007368:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800736c:	f7f9 fc94 	bl	8000c98 <__aeabi_uldivmod>
 8007370:	4602      	mov	r2, r0
 8007372:	460b      	mov	r3, r1
 8007374:	4613      	mov	r3, r2
 8007376:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007378:	4b0b      	ldr	r3, [pc, #44]	; (80073a8 <HAL_RCC_GetSysClockFreq+0x200>)
 800737a:	685b      	ldr	r3, [r3, #4]
 800737c:	0c1b      	lsrs	r3, r3, #16
 800737e:	f003 0303 	and.w	r3, r3, #3
 8007382:	3301      	adds	r3, #1
 8007384:	005b      	lsls	r3, r3, #1
 8007386:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8007388:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800738a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800738c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007390:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007392:	e002      	b.n	800739a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007394:	4b05      	ldr	r3, [pc, #20]	; (80073ac <HAL_RCC_GetSysClockFreq+0x204>)
 8007396:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007398:	bf00      	nop
    }
  }
  return sysclockfreq;
 800739a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800739c:	4618      	mov	r0, r3
 800739e:	3750      	adds	r7, #80	; 0x50
 80073a0:	46bd      	mov	sp, r7
 80073a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80073a6:	bf00      	nop
 80073a8:	40023800 	.word	0x40023800
 80073ac:	00f42400 	.word	0x00f42400
 80073b0:	007a1200 	.word	0x007a1200

080073b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80073b4:	b480      	push	{r7}
 80073b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80073b8:	4b03      	ldr	r3, [pc, #12]	; (80073c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80073ba:	681b      	ldr	r3, [r3, #0]
}
 80073bc:	4618      	mov	r0, r3
 80073be:	46bd      	mov	sp, r7
 80073c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c4:	4770      	bx	lr
 80073c6:	bf00      	nop
 80073c8:	20000008 	.word	0x20000008

080073cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80073d0:	f7ff fff0 	bl	80073b4 <HAL_RCC_GetHCLKFreq>
 80073d4:	4602      	mov	r2, r0
 80073d6:	4b05      	ldr	r3, [pc, #20]	; (80073ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80073d8:	689b      	ldr	r3, [r3, #8]
 80073da:	0a9b      	lsrs	r3, r3, #10
 80073dc:	f003 0307 	and.w	r3, r3, #7
 80073e0:	4903      	ldr	r1, [pc, #12]	; (80073f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80073e2:	5ccb      	ldrb	r3, [r1, r3]
 80073e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	bd80      	pop	{r7, pc}
 80073ec:	40023800 	.word	0x40023800
 80073f0:	08014240 	.word	0x08014240

080073f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80073f8:	f7ff ffdc 	bl	80073b4 <HAL_RCC_GetHCLKFreq>
 80073fc:	4602      	mov	r2, r0
 80073fe:	4b05      	ldr	r3, [pc, #20]	; (8007414 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007400:	689b      	ldr	r3, [r3, #8]
 8007402:	0b5b      	lsrs	r3, r3, #13
 8007404:	f003 0307 	and.w	r3, r3, #7
 8007408:	4903      	ldr	r1, [pc, #12]	; (8007418 <HAL_RCC_GetPCLK2Freq+0x24>)
 800740a:	5ccb      	ldrb	r3, [r1, r3]
 800740c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007410:	4618      	mov	r0, r3
 8007412:	bd80      	pop	{r7, pc}
 8007414:	40023800 	.word	0x40023800
 8007418:	08014240 	.word	0x08014240

0800741c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b082      	sub	sp, #8
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d101      	bne.n	800742e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800742a:	2301      	movs	r3, #1
 800742c:	e07b      	b.n	8007526 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007432:	2b00      	cmp	r3, #0
 8007434:	d108      	bne.n	8007448 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	685b      	ldr	r3, [r3, #4]
 800743a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800743e:	d009      	beq.n	8007454 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2200      	movs	r2, #0
 8007444:	61da      	str	r2, [r3, #28]
 8007446:	e005      	b.n	8007454 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2200      	movs	r2, #0
 800744c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2200      	movs	r2, #0
 8007452:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2200      	movs	r2, #0
 8007458:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007460:	b2db      	uxtb	r3, r3
 8007462:	2b00      	cmp	r3, #0
 8007464:	d106      	bne.n	8007474 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2200      	movs	r2, #0
 800746a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f7fa fe4c 	bl	800210c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2202      	movs	r2, #2
 8007478:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	681a      	ldr	r2, [r3, #0]
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800748a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	685b      	ldr	r3, [r3, #4]
 8007490:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	689b      	ldr	r3, [r3, #8]
 8007498:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800749c:	431a      	orrs	r2, r3
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	68db      	ldr	r3, [r3, #12]
 80074a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80074a6:	431a      	orrs	r2, r3
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	691b      	ldr	r3, [r3, #16]
 80074ac:	f003 0302 	and.w	r3, r3, #2
 80074b0:	431a      	orrs	r2, r3
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	695b      	ldr	r3, [r3, #20]
 80074b6:	f003 0301 	and.w	r3, r3, #1
 80074ba:	431a      	orrs	r2, r3
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	699b      	ldr	r3, [r3, #24]
 80074c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80074c4:	431a      	orrs	r2, r3
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	69db      	ldr	r3, [r3, #28]
 80074ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80074ce:	431a      	orrs	r2, r3
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6a1b      	ldr	r3, [r3, #32]
 80074d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074d8:	ea42 0103 	orr.w	r1, r2, r3
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074e0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	430a      	orrs	r2, r1
 80074ea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	699b      	ldr	r3, [r3, #24]
 80074f0:	0c1b      	lsrs	r3, r3, #16
 80074f2:	f003 0104 	and.w	r1, r3, #4
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074fa:	f003 0210 	and.w	r2, r3, #16
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	430a      	orrs	r2, r1
 8007504:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	69da      	ldr	r2, [r3, #28]
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007514:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2200      	movs	r2, #0
 800751a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2201      	movs	r2, #1
 8007520:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007524:	2300      	movs	r3, #0
}
 8007526:	4618      	mov	r0, r3
 8007528:	3708      	adds	r7, #8
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}

0800752e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800752e:	b580      	push	{r7, lr}
 8007530:	b08c      	sub	sp, #48	; 0x30
 8007532:	af00      	add	r7, sp, #0
 8007534:	60f8      	str	r0, [r7, #12]
 8007536:	60b9      	str	r1, [r7, #8]
 8007538:	607a      	str	r2, [r7, #4]
 800753a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800753c:	2301      	movs	r3, #1
 800753e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007540:	2300      	movs	r3, #0
 8007542:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800754c:	2b01      	cmp	r3, #1
 800754e:	d101      	bne.n	8007554 <HAL_SPI_TransmitReceive+0x26>
 8007550:	2302      	movs	r3, #2
 8007552:	e18a      	b.n	800786a <HAL_SPI_TransmitReceive+0x33c>
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	2201      	movs	r2, #1
 8007558:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800755c:	f7fb ff0a 	bl	8003374 <HAL_GetTick>
 8007560:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007568:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	685b      	ldr	r3, [r3, #4]
 8007570:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007572:	887b      	ldrh	r3, [r7, #2]
 8007574:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007576:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800757a:	2b01      	cmp	r3, #1
 800757c:	d00f      	beq.n	800759e <HAL_SPI_TransmitReceive+0x70>
 800757e:	69fb      	ldr	r3, [r7, #28]
 8007580:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007584:	d107      	bne.n	8007596 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	689b      	ldr	r3, [r3, #8]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d103      	bne.n	8007596 <HAL_SPI_TransmitReceive+0x68>
 800758e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007592:	2b04      	cmp	r3, #4
 8007594:	d003      	beq.n	800759e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007596:	2302      	movs	r3, #2
 8007598:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800759c:	e15b      	b.n	8007856 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d005      	beq.n	80075b0 <HAL_SPI_TransmitReceive+0x82>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d002      	beq.n	80075b0 <HAL_SPI_TransmitReceive+0x82>
 80075aa:	887b      	ldrh	r3, [r7, #2]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d103      	bne.n	80075b8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80075b0:	2301      	movs	r3, #1
 80075b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80075b6:	e14e      	b.n	8007856 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80075be:	b2db      	uxtb	r3, r3
 80075c0:	2b04      	cmp	r3, #4
 80075c2:	d003      	beq.n	80075cc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	2205      	movs	r2, #5
 80075c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	2200      	movs	r2, #0
 80075d0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	687a      	ldr	r2, [r7, #4]
 80075d6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	887a      	ldrh	r2, [r7, #2]
 80075dc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	887a      	ldrh	r2, [r7, #2]
 80075e2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	68ba      	ldr	r2, [r7, #8]
 80075e8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	887a      	ldrh	r2, [r7, #2]
 80075ee:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	887a      	ldrh	r2, [r7, #2]
 80075f4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	2200      	movs	r2, #0
 80075fa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	2200      	movs	r2, #0
 8007600:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800760c:	2b40      	cmp	r3, #64	; 0x40
 800760e:	d007      	beq.n	8007620 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	681a      	ldr	r2, [r3, #0]
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800761e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	68db      	ldr	r3, [r3, #12]
 8007624:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007628:	d178      	bne.n	800771c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	685b      	ldr	r3, [r3, #4]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d002      	beq.n	8007638 <HAL_SPI_TransmitReceive+0x10a>
 8007632:	8b7b      	ldrh	r3, [r7, #26]
 8007634:	2b01      	cmp	r3, #1
 8007636:	d166      	bne.n	8007706 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800763c:	881a      	ldrh	r2, [r3, #0]
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007648:	1c9a      	adds	r2, r3, #2
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007652:	b29b      	uxth	r3, r3
 8007654:	3b01      	subs	r3, #1
 8007656:	b29a      	uxth	r2, r3
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800765c:	e053      	b.n	8007706 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	689b      	ldr	r3, [r3, #8]
 8007664:	f003 0302 	and.w	r3, r3, #2
 8007668:	2b02      	cmp	r3, #2
 800766a:	d11b      	bne.n	80076a4 <HAL_SPI_TransmitReceive+0x176>
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007670:	b29b      	uxth	r3, r3
 8007672:	2b00      	cmp	r3, #0
 8007674:	d016      	beq.n	80076a4 <HAL_SPI_TransmitReceive+0x176>
 8007676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007678:	2b01      	cmp	r3, #1
 800767a:	d113      	bne.n	80076a4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007680:	881a      	ldrh	r2, [r3, #0]
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800768c:	1c9a      	adds	r2, r3, #2
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007696:	b29b      	uxth	r3, r3
 8007698:	3b01      	subs	r3, #1
 800769a:	b29a      	uxth	r2, r3
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80076a0:	2300      	movs	r3, #0
 80076a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	689b      	ldr	r3, [r3, #8]
 80076aa:	f003 0301 	and.w	r3, r3, #1
 80076ae:	2b01      	cmp	r3, #1
 80076b0:	d119      	bne.n	80076e6 <HAL_SPI_TransmitReceive+0x1b8>
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076b6:	b29b      	uxth	r3, r3
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d014      	beq.n	80076e6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	68da      	ldr	r2, [r3, #12]
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076c6:	b292      	uxth	r2, r2
 80076c8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ce:	1c9a      	adds	r2, r3, #2
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076d8:	b29b      	uxth	r3, r3
 80076da:	3b01      	subs	r3, #1
 80076dc:	b29a      	uxth	r2, r3
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80076e2:	2301      	movs	r3, #1
 80076e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80076e6:	f7fb fe45 	bl	8003374 <HAL_GetTick>
 80076ea:	4602      	mov	r2, r0
 80076ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ee:	1ad3      	subs	r3, r2, r3
 80076f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80076f2:	429a      	cmp	r2, r3
 80076f4:	d807      	bhi.n	8007706 <HAL_SPI_TransmitReceive+0x1d8>
 80076f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076fc:	d003      	beq.n	8007706 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80076fe:	2303      	movs	r3, #3
 8007700:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007704:	e0a7      	b.n	8007856 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800770a:	b29b      	uxth	r3, r3
 800770c:	2b00      	cmp	r3, #0
 800770e:	d1a6      	bne.n	800765e <HAL_SPI_TransmitReceive+0x130>
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007714:	b29b      	uxth	r3, r3
 8007716:	2b00      	cmp	r3, #0
 8007718:	d1a1      	bne.n	800765e <HAL_SPI_TransmitReceive+0x130>
 800771a:	e07c      	b.n	8007816 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	685b      	ldr	r3, [r3, #4]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d002      	beq.n	800772a <HAL_SPI_TransmitReceive+0x1fc>
 8007724:	8b7b      	ldrh	r3, [r7, #26]
 8007726:	2b01      	cmp	r3, #1
 8007728:	d16b      	bne.n	8007802 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	330c      	adds	r3, #12
 8007734:	7812      	ldrb	r2, [r2, #0]
 8007736:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800773c:	1c5a      	adds	r2, r3, #1
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007746:	b29b      	uxth	r3, r3
 8007748:	3b01      	subs	r3, #1
 800774a:	b29a      	uxth	r2, r3
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007750:	e057      	b.n	8007802 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	689b      	ldr	r3, [r3, #8]
 8007758:	f003 0302 	and.w	r3, r3, #2
 800775c:	2b02      	cmp	r3, #2
 800775e:	d11c      	bne.n	800779a <HAL_SPI_TransmitReceive+0x26c>
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007764:	b29b      	uxth	r3, r3
 8007766:	2b00      	cmp	r3, #0
 8007768:	d017      	beq.n	800779a <HAL_SPI_TransmitReceive+0x26c>
 800776a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800776c:	2b01      	cmp	r3, #1
 800776e:	d114      	bne.n	800779a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	330c      	adds	r3, #12
 800777a:	7812      	ldrb	r2, [r2, #0]
 800777c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007782:	1c5a      	adds	r2, r3, #1
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800778c:	b29b      	uxth	r3, r3
 800778e:	3b01      	subs	r3, #1
 8007790:	b29a      	uxth	r2, r3
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007796:	2300      	movs	r3, #0
 8007798:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	689b      	ldr	r3, [r3, #8]
 80077a0:	f003 0301 	and.w	r3, r3, #1
 80077a4:	2b01      	cmp	r3, #1
 80077a6:	d119      	bne.n	80077dc <HAL_SPI_TransmitReceive+0x2ae>
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077ac:	b29b      	uxth	r3, r3
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d014      	beq.n	80077dc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	68da      	ldr	r2, [r3, #12]
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077bc:	b2d2      	uxtb	r2, r2
 80077be:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077c4:	1c5a      	adds	r2, r3, #1
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077ce:	b29b      	uxth	r3, r3
 80077d0:	3b01      	subs	r3, #1
 80077d2:	b29a      	uxth	r2, r3
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80077d8:	2301      	movs	r3, #1
 80077da:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80077dc:	f7fb fdca 	bl	8003374 <HAL_GetTick>
 80077e0:	4602      	mov	r2, r0
 80077e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e4:	1ad3      	subs	r3, r2, r3
 80077e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80077e8:	429a      	cmp	r2, r3
 80077ea:	d803      	bhi.n	80077f4 <HAL_SPI_TransmitReceive+0x2c6>
 80077ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077f2:	d102      	bne.n	80077fa <HAL_SPI_TransmitReceive+0x2cc>
 80077f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d103      	bne.n	8007802 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80077fa:	2303      	movs	r3, #3
 80077fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007800:	e029      	b.n	8007856 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007806:	b29b      	uxth	r3, r3
 8007808:	2b00      	cmp	r3, #0
 800780a:	d1a2      	bne.n	8007752 <HAL_SPI_TransmitReceive+0x224>
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007810:	b29b      	uxth	r3, r3
 8007812:	2b00      	cmp	r3, #0
 8007814:	d19d      	bne.n	8007752 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007816:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007818:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800781a:	68f8      	ldr	r0, [r7, #12]
 800781c:	f000 f8b2 	bl	8007984 <SPI_EndRxTxTransaction>
 8007820:	4603      	mov	r3, r0
 8007822:	2b00      	cmp	r3, #0
 8007824:	d006      	beq.n	8007834 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007826:	2301      	movs	r3, #1
 8007828:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	2220      	movs	r2, #32
 8007830:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007832:	e010      	b.n	8007856 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	689b      	ldr	r3, [r3, #8]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d10b      	bne.n	8007854 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800783c:	2300      	movs	r3, #0
 800783e:	617b      	str	r3, [r7, #20]
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	68db      	ldr	r3, [r3, #12]
 8007846:	617b      	str	r3, [r7, #20]
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	689b      	ldr	r3, [r3, #8]
 800784e:	617b      	str	r3, [r7, #20]
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	e000      	b.n	8007856 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007854:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	2201      	movs	r2, #1
 800785a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	2200      	movs	r2, #0
 8007862:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007866:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800786a:	4618      	mov	r0, r3
 800786c:	3730      	adds	r7, #48	; 0x30
 800786e:	46bd      	mov	sp, r7
 8007870:	bd80      	pop	{r7, pc}
	...

08007874 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b088      	sub	sp, #32
 8007878:	af00      	add	r7, sp, #0
 800787a:	60f8      	str	r0, [r7, #12]
 800787c:	60b9      	str	r1, [r7, #8]
 800787e:	603b      	str	r3, [r7, #0]
 8007880:	4613      	mov	r3, r2
 8007882:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007884:	f7fb fd76 	bl	8003374 <HAL_GetTick>
 8007888:	4602      	mov	r2, r0
 800788a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800788c:	1a9b      	subs	r3, r3, r2
 800788e:	683a      	ldr	r2, [r7, #0]
 8007890:	4413      	add	r3, r2
 8007892:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007894:	f7fb fd6e 	bl	8003374 <HAL_GetTick>
 8007898:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800789a:	4b39      	ldr	r3, [pc, #228]	; (8007980 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	015b      	lsls	r3, r3, #5
 80078a0:	0d1b      	lsrs	r3, r3, #20
 80078a2:	69fa      	ldr	r2, [r7, #28]
 80078a4:	fb02 f303 	mul.w	r3, r2, r3
 80078a8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80078aa:	e054      	b.n	8007956 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078b2:	d050      	beq.n	8007956 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80078b4:	f7fb fd5e 	bl	8003374 <HAL_GetTick>
 80078b8:	4602      	mov	r2, r0
 80078ba:	69bb      	ldr	r3, [r7, #24]
 80078bc:	1ad3      	subs	r3, r2, r3
 80078be:	69fa      	ldr	r2, [r7, #28]
 80078c0:	429a      	cmp	r2, r3
 80078c2:	d902      	bls.n	80078ca <SPI_WaitFlagStateUntilTimeout+0x56>
 80078c4:	69fb      	ldr	r3, [r7, #28]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d13d      	bne.n	8007946 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	685a      	ldr	r2, [r3, #4]
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80078d8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	685b      	ldr	r3, [r3, #4]
 80078de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80078e2:	d111      	bne.n	8007908 <SPI_WaitFlagStateUntilTimeout+0x94>
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	689b      	ldr	r3, [r3, #8]
 80078e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078ec:	d004      	beq.n	80078f8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	689b      	ldr	r3, [r3, #8]
 80078f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078f6:	d107      	bne.n	8007908 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	681a      	ldr	r2, [r3, #0]
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007906:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800790c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007910:	d10f      	bne.n	8007932 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	681a      	ldr	r2, [r3, #0]
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007920:	601a      	str	r2, [r3, #0]
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	681a      	ldr	r2, [r3, #0]
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007930:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	2201      	movs	r2, #1
 8007936:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	2200      	movs	r2, #0
 800793e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007942:	2303      	movs	r3, #3
 8007944:	e017      	b.n	8007976 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007946:	697b      	ldr	r3, [r7, #20]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d101      	bne.n	8007950 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800794c:	2300      	movs	r3, #0
 800794e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007950:	697b      	ldr	r3, [r7, #20]
 8007952:	3b01      	subs	r3, #1
 8007954:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	689a      	ldr	r2, [r3, #8]
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	4013      	ands	r3, r2
 8007960:	68ba      	ldr	r2, [r7, #8]
 8007962:	429a      	cmp	r2, r3
 8007964:	bf0c      	ite	eq
 8007966:	2301      	moveq	r3, #1
 8007968:	2300      	movne	r3, #0
 800796a:	b2db      	uxtb	r3, r3
 800796c:	461a      	mov	r2, r3
 800796e:	79fb      	ldrb	r3, [r7, #7]
 8007970:	429a      	cmp	r2, r3
 8007972:	d19b      	bne.n	80078ac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007974:	2300      	movs	r3, #0
}
 8007976:	4618      	mov	r0, r3
 8007978:	3720      	adds	r7, #32
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}
 800797e:	bf00      	nop
 8007980:	20000008 	.word	0x20000008

08007984 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b088      	sub	sp, #32
 8007988:	af02      	add	r7, sp, #8
 800798a:	60f8      	str	r0, [r7, #12]
 800798c:	60b9      	str	r1, [r7, #8]
 800798e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007990:	4b1b      	ldr	r3, [pc, #108]	; (8007a00 <SPI_EndRxTxTransaction+0x7c>)
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4a1b      	ldr	r2, [pc, #108]	; (8007a04 <SPI_EndRxTxTransaction+0x80>)
 8007996:	fba2 2303 	umull	r2, r3, r2, r3
 800799a:	0d5b      	lsrs	r3, r3, #21
 800799c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80079a0:	fb02 f303 	mul.w	r3, r2, r3
 80079a4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	685b      	ldr	r3, [r3, #4]
 80079aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80079ae:	d112      	bne.n	80079d6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	9300      	str	r3, [sp, #0]
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	2200      	movs	r2, #0
 80079b8:	2180      	movs	r1, #128	; 0x80
 80079ba:	68f8      	ldr	r0, [r7, #12]
 80079bc:	f7ff ff5a 	bl	8007874 <SPI_WaitFlagStateUntilTimeout>
 80079c0:	4603      	mov	r3, r0
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d016      	beq.n	80079f4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079ca:	f043 0220 	orr.w	r2, r3, #32
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80079d2:	2303      	movs	r3, #3
 80079d4:	e00f      	b.n	80079f6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80079d6:	697b      	ldr	r3, [r7, #20]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d00a      	beq.n	80079f2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80079dc:	697b      	ldr	r3, [r7, #20]
 80079de:	3b01      	subs	r3, #1
 80079e0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	689b      	ldr	r3, [r3, #8]
 80079e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079ec:	2b80      	cmp	r3, #128	; 0x80
 80079ee:	d0f2      	beq.n	80079d6 <SPI_EndRxTxTransaction+0x52>
 80079f0:	e000      	b.n	80079f4 <SPI_EndRxTxTransaction+0x70>
        break;
 80079f2:	bf00      	nop
  }

  return HAL_OK;
 80079f4:	2300      	movs	r3, #0
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	3718      	adds	r7, #24
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}
 80079fe:	bf00      	nop
 8007a00:	20000008 	.word	0x20000008
 8007a04:	165e9f81 	.word	0x165e9f81

08007a08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b082      	sub	sp, #8
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d101      	bne.n	8007a1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007a16:	2301      	movs	r3, #1
 8007a18:	e041      	b.n	8007a9e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a20:	b2db      	uxtb	r3, r3
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d106      	bne.n	8007a34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f7fa fbb4 	bl	800219c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2202      	movs	r2, #2
 8007a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681a      	ldr	r2, [r3, #0]
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	3304      	adds	r3, #4
 8007a44:	4619      	mov	r1, r3
 8007a46:	4610      	mov	r0, r2
 8007a48:	f000 f9f0 	bl	8007e2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2201      	movs	r2, #1
 8007a50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2201      	movs	r2, #1
 8007a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2201      	movs	r2, #1
 8007a60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2201      	movs	r2, #1
 8007a68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2201      	movs	r2, #1
 8007a70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2201      	movs	r2, #1
 8007a78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2201      	movs	r2, #1
 8007a80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2201      	movs	r2, #1
 8007a88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2201      	movs	r2, #1
 8007a90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2201      	movs	r2, #1
 8007a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007a9c:	2300      	movs	r3, #0
}
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	3708      	adds	r7, #8
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}
	...

08007aa8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b085      	sub	sp, #20
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ab6:	b2db      	uxtb	r3, r3
 8007ab8:	2b01      	cmp	r3, #1
 8007aba:	d001      	beq.n	8007ac0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007abc:	2301      	movs	r3, #1
 8007abe:	e044      	b.n	8007b4a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2202      	movs	r2, #2
 8007ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	68da      	ldr	r2, [r3, #12]
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f042 0201 	orr.w	r2, r2, #1
 8007ad6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4a1e      	ldr	r2, [pc, #120]	; (8007b58 <HAL_TIM_Base_Start_IT+0xb0>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d018      	beq.n	8007b14 <HAL_TIM_Base_Start_IT+0x6c>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007aea:	d013      	beq.n	8007b14 <HAL_TIM_Base_Start_IT+0x6c>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a1a      	ldr	r2, [pc, #104]	; (8007b5c <HAL_TIM_Base_Start_IT+0xb4>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d00e      	beq.n	8007b14 <HAL_TIM_Base_Start_IT+0x6c>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	4a19      	ldr	r2, [pc, #100]	; (8007b60 <HAL_TIM_Base_Start_IT+0xb8>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d009      	beq.n	8007b14 <HAL_TIM_Base_Start_IT+0x6c>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4a17      	ldr	r2, [pc, #92]	; (8007b64 <HAL_TIM_Base_Start_IT+0xbc>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d004      	beq.n	8007b14 <HAL_TIM_Base_Start_IT+0x6c>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	4a16      	ldr	r2, [pc, #88]	; (8007b68 <HAL_TIM_Base_Start_IT+0xc0>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d111      	bne.n	8007b38 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	689b      	ldr	r3, [r3, #8]
 8007b1a:	f003 0307 	and.w	r3, r3, #7
 8007b1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	2b06      	cmp	r3, #6
 8007b24:	d010      	beq.n	8007b48 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	681a      	ldr	r2, [r3, #0]
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f042 0201 	orr.w	r2, r2, #1
 8007b34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b36:	e007      	b.n	8007b48 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	681a      	ldr	r2, [r3, #0]
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f042 0201 	orr.w	r2, r2, #1
 8007b46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007b48:	2300      	movs	r3, #0
}
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	3714      	adds	r7, #20
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b54:	4770      	bx	lr
 8007b56:	bf00      	nop
 8007b58:	40010000 	.word	0x40010000
 8007b5c:	40000400 	.word	0x40000400
 8007b60:	40000800 	.word	0x40000800
 8007b64:	40000c00 	.word	0x40000c00
 8007b68:	40014000 	.word	0x40014000

08007b6c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007b6c:	b480      	push	{r7}
 8007b6e:	b083      	sub	sp, #12
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	68da      	ldr	r2, [r3, #12]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f022 0201 	bic.w	r2, r2, #1
 8007b82:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	6a1a      	ldr	r2, [r3, #32]
 8007b8a:	f241 1311 	movw	r3, #4369	; 0x1111
 8007b8e:	4013      	ands	r3, r2
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d10f      	bne.n	8007bb4 <HAL_TIM_Base_Stop_IT+0x48>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	6a1a      	ldr	r2, [r3, #32]
 8007b9a:	f240 4344 	movw	r3, #1092	; 0x444
 8007b9e:	4013      	ands	r3, r2
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d107      	bne.n	8007bb4 <HAL_TIM_Base_Stop_IT+0x48>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	681a      	ldr	r2, [r3, #0]
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f022 0201 	bic.w	r2, r2, #1
 8007bb2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2201      	movs	r2, #1
 8007bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007bbc:	2300      	movs	r3, #0
}
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	370c      	adds	r7, #12
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc8:	4770      	bx	lr

08007bca <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007bca:	b580      	push	{r7, lr}
 8007bcc:	b082      	sub	sp, #8
 8007bce:	af00      	add	r7, sp, #0
 8007bd0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	691b      	ldr	r3, [r3, #16]
 8007bd8:	f003 0302 	and.w	r3, r3, #2
 8007bdc:	2b02      	cmp	r3, #2
 8007bde:	d122      	bne.n	8007c26 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	68db      	ldr	r3, [r3, #12]
 8007be6:	f003 0302 	and.w	r3, r3, #2
 8007bea:	2b02      	cmp	r3, #2
 8007bec:	d11b      	bne.n	8007c26 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f06f 0202 	mvn.w	r2, #2
 8007bf6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2201      	movs	r2, #1
 8007bfc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	699b      	ldr	r3, [r3, #24]
 8007c04:	f003 0303 	and.w	r3, r3, #3
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d003      	beq.n	8007c14 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	f000 f8ee 	bl	8007dee <HAL_TIM_IC_CaptureCallback>
 8007c12:	e005      	b.n	8007c20 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c14:	6878      	ldr	r0, [r7, #4]
 8007c16:	f000 f8e0 	bl	8007dda <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f000 f8f1 	bl	8007e02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2200      	movs	r2, #0
 8007c24:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	691b      	ldr	r3, [r3, #16]
 8007c2c:	f003 0304 	and.w	r3, r3, #4
 8007c30:	2b04      	cmp	r3, #4
 8007c32:	d122      	bne.n	8007c7a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	68db      	ldr	r3, [r3, #12]
 8007c3a:	f003 0304 	and.w	r3, r3, #4
 8007c3e:	2b04      	cmp	r3, #4
 8007c40:	d11b      	bne.n	8007c7a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f06f 0204 	mvn.w	r2, #4
 8007c4a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2202      	movs	r2, #2
 8007c50:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	699b      	ldr	r3, [r3, #24]
 8007c58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d003      	beq.n	8007c68 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	f000 f8c4 	bl	8007dee <HAL_TIM_IC_CaptureCallback>
 8007c66:	e005      	b.n	8007c74 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f000 f8b6 	bl	8007dda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f000 f8c7 	bl	8007e02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2200      	movs	r2, #0
 8007c78:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	691b      	ldr	r3, [r3, #16]
 8007c80:	f003 0308 	and.w	r3, r3, #8
 8007c84:	2b08      	cmp	r3, #8
 8007c86:	d122      	bne.n	8007cce <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	68db      	ldr	r3, [r3, #12]
 8007c8e:	f003 0308 	and.w	r3, r3, #8
 8007c92:	2b08      	cmp	r3, #8
 8007c94:	d11b      	bne.n	8007cce <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f06f 0208 	mvn.w	r2, #8
 8007c9e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2204      	movs	r2, #4
 8007ca4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	69db      	ldr	r3, [r3, #28]
 8007cac:	f003 0303 	and.w	r3, r3, #3
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d003      	beq.n	8007cbc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007cb4:	6878      	ldr	r0, [r7, #4]
 8007cb6:	f000 f89a 	bl	8007dee <HAL_TIM_IC_CaptureCallback>
 8007cba:	e005      	b.n	8007cc8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f000 f88c 	bl	8007dda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f000 f89d 	bl	8007e02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2200      	movs	r2, #0
 8007ccc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	691b      	ldr	r3, [r3, #16]
 8007cd4:	f003 0310 	and.w	r3, r3, #16
 8007cd8:	2b10      	cmp	r3, #16
 8007cda:	d122      	bne.n	8007d22 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	68db      	ldr	r3, [r3, #12]
 8007ce2:	f003 0310 	and.w	r3, r3, #16
 8007ce6:	2b10      	cmp	r3, #16
 8007ce8:	d11b      	bne.n	8007d22 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f06f 0210 	mvn.w	r2, #16
 8007cf2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2208      	movs	r2, #8
 8007cf8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	69db      	ldr	r3, [r3, #28]
 8007d00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d003      	beq.n	8007d10 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	f000 f870 	bl	8007dee <HAL_TIM_IC_CaptureCallback>
 8007d0e:	e005      	b.n	8007d1c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	f000 f862 	bl	8007dda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f000 f873 	bl	8007e02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	691b      	ldr	r3, [r3, #16]
 8007d28:	f003 0301 	and.w	r3, r3, #1
 8007d2c:	2b01      	cmp	r3, #1
 8007d2e:	d10e      	bne.n	8007d4e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	68db      	ldr	r3, [r3, #12]
 8007d36:	f003 0301 	and.w	r3, r3, #1
 8007d3a:	2b01      	cmp	r3, #1
 8007d3c:	d107      	bne.n	8007d4e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f06f 0201 	mvn.w	r2, #1
 8007d46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007d48:	6878      	ldr	r0, [r7, #4]
 8007d4a:	f7fa f92f 	bl	8001fac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	691b      	ldr	r3, [r3, #16]
 8007d54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d58:	2b80      	cmp	r3, #128	; 0x80
 8007d5a:	d10e      	bne.n	8007d7a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	68db      	ldr	r3, [r3, #12]
 8007d62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d66:	2b80      	cmp	r3, #128	; 0x80
 8007d68:	d107      	bne.n	8007d7a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007d72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f000 f8e3 	bl	8007f40 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	691b      	ldr	r3, [r3, #16]
 8007d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d84:	2b40      	cmp	r3, #64	; 0x40
 8007d86:	d10e      	bne.n	8007da6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	68db      	ldr	r3, [r3, #12]
 8007d8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d92:	2b40      	cmp	r3, #64	; 0x40
 8007d94:	d107      	bne.n	8007da6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007d9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	f000 f838 	bl	8007e16 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	691b      	ldr	r3, [r3, #16]
 8007dac:	f003 0320 	and.w	r3, r3, #32
 8007db0:	2b20      	cmp	r3, #32
 8007db2:	d10e      	bne.n	8007dd2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	68db      	ldr	r3, [r3, #12]
 8007dba:	f003 0320 	and.w	r3, r3, #32
 8007dbe:	2b20      	cmp	r3, #32
 8007dc0:	d107      	bne.n	8007dd2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f06f 0220 	mvn.w	r2, #32
 8007dca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f000 f8ad 	bl	8007f2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007dd2:	bf00      	nop
 8007dd4:	3708      	adds	r7, #8
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}

08007dda <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007dda:	b480      	push	{r7}
 8007ddc:	b083      	sub	sp, #12
 8007dde:	af00      	add	r7, sp, #0
 8007de0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007de2:	bf00      	nop
 8007de4:	370c      	adds	r7, #12
 8007de6:	46bd      	mov	sp, r7
 8007de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dec:	4770      	bx	lr

08007dee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007dee:	b480      	push	{r7}
 8007df0:	b083      	sub	sp, #12
 8007df2:	af00      	add	r7, sp, #0
 8007df4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007df6:	bf00      	nop
 8007df8:	370c      	adds	r7, #12
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e00:	4770      	bx	lr

08007e02 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007e02:	b480      	push	{r7}
 8007e04:	b083      	sub	sp, #12
 8007e06:	af00      	add	r7, sp, #0
 8007e08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007e0a:	bf00      	nop
 8007e0c:	370c      	adds	r7, #12
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e14:	4770      	bx	lr

08007e16 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007e16:	b480      	push	{r7}
 8007e18:	b083      	sub	sp, #12
 8007e1a:	af00      	add	r7, sp, #0
 8007e1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007e1e:	bf00      	nop
 8007e20:	370c      	adds	r7, #12
 8007e22:	46bd      	mov	sp, r7
 8007e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e28:	4770      	bx	lr
	...

08007e2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b085      	sub	sp, #20
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
 8007e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	4a34      	ldr	r2, [pc, #208]	; (8007f10 <TIM_Base_SetConfig+0xe4>)
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d00f      	beq.n	8007e64 <TIM_Base_SetConfig+0x38>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e4a:	d00b      	beq.n	8007e64 <TIM_Base_SetConfig+0x38>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	4a31      	ldr	r2, [pc, #196]	; (8007f14 <TIM_Base_SetConfig+0xe8>)
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d007      	beq.n	8007e64 <TIM_Base_SetConfig+0x38>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	4a30      	ldr	r2, [pc, #192]	; (8007f18 <TIM_Base_SetConfig+0xec>)
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	d003      	beq.n	8007e64 <TIM_Base_SetConfig+0x38>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	4a2f      	ldr	r2, [pc, #188]	; (8007f1c <TIM_Base_SetConfig+0xf0>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d108      	bne.n	8007e76 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	685b      	ldr	r3, [r3, #4]
 8007e70:	68fa      	ldr	r2, [r7, #12]
 8007e72:	4313      	orrs	r3, r2
 8007e74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	4a25      	ldr	r2, [pc, #148]	; (8007f10 <TIM_Base_SetConfig+0xe4>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d01b      	beq.n	8007eb6 <TIM_Base_SetConfig+0x8a>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e84:	d017      	beq.n	8007eb6 <TIM_Base_SetConfig+0x8a>
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	4a22      	ldr	r2, [pc, #136]	; (8007f14 <TIM_Base_SetConfig+0xe8>)
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d013      	beq.n	8007eb6 <TIM_Base_SetConfig+0x8a>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	4a21      	ldr	r2, [pc, #132]	; (8007f18 <TIM_Base_SetConfig+0xec>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d00f      	beq.n	8007eb6 <TIM_Base_SetConfig+0x8a>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	4a20      	ldr	r2, [pc, #128]	; (8007f1c <TIM_Base_SetConfig+0xf0>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d00b      	beq.n	8007eb6 <TIM_Base_SetConfig+0x8a>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	4a1f      	ldr	r2, [pc, #124]	; (8007f20 <TIM_Base_SetConfig+0xf4>)
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d007      	beq.n	8007eb6 <TIM_Base_SetConfig+0x8a>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	4a1e      	ldr	r2, [pc, #120]	; (8007f24 <TIM_Base_SetConfig+0xf8>)
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	d003      	beq.n	8007eb6 <TIM_Base_SetConfig+0x8a>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	4a1d      	ldr	r2, [pc, #116]	; (8007f28 <TIM_Base_SetConfig+0xfc>)
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d108      	bne.n	8007ec8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ebc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	68db      	ldr	r3, [r3, #12]
 8007ec2:	68fa      	ldr	r2, [r7, #12]
 8007ec4:	4313      	orrs	r3, r2
 8007ec6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	695b      	ldr	r3, [r3, #20]
 8007ed2:	4313      	orrs	r3, r2
 8007ed4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	68fa      	ldr	r2, [r7, #12]
 8007eda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	689a      	ldr	r2, [r3, #8]
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	681a      	ldr	r2, [r3, #0]
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	4a08      	ldr	r2, [pc, #32]	; (8007f10 <TIM_Base_SetConfig+0xe4>)
 8007ef0:	4293      	cmp	r3, r2
 8007ef2:	d103      	bne.n	8007efc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	691a      	ldr	r2, [r3, #16]
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2201      	movs	r2, #1
 8007f00:	615a      	str	r2, [r3, #20]
}
 8007f02:	bf00      	nop
 8007f04:	3714      	adds	r7, #20
 8007f06:	46bd      	mov	sp, r7
 8007f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0c:	4770      	bx	lr
 8007f0e:	bf00      	nop
 8007f10:	40010000 	.word	0x40010000
 8007f14:	40000400 	.word	0x40000400
 8007f18:	40000800 	.word	0x40000800
 8007f1c:	40000c00 	.word	0x40000c00
 8007f20:	40014000 	.word	0x40014000
 8007f24:	40014400 	.word	0x40014400
 8007f28:	40014800 	.word	0x40014800

08007f2c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	b083      	sub	sp, #12
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007f34:	bf00      	nop
 8007f36:	370c      	adds	r7, #12
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3e:	4770      	bx	lr

08007f40 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007f40:	b480      	push	{r7}
 8007f42:	b083      	sub	sp, #12
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007f48:	bf00      	nop
 8007f4a:	370c      	adds	r7, #12
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f52:	4770      	bx	lr

08007f54 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b082      	sub	sp, #8
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d101      	bne.n	8007f66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007f62:	2301      	movs	r3, #1
 8007f64:	e03f      	b.n	8007fe6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f6c:	b2db      	uxtb	r3, r3
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d106      	bne.n	8007f80 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2200      	movs	r2, #0
 8007f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f7fa f936 	bl	80021ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2224      	movs	r2, #36	; 0x24
 8007f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	68da      	ldr	r2, [r3, #12]
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007f96:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f000 ff69 	bl	8008e70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	691a      	ldr	r2, [r3, #16]
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007fac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	695a      	ldr	r2, [r3, #20]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007fbc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	68da      	ldr	r2, [r3, #12]
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007fcc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2220      	movs	r2, #32
 8007fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2220      	movs	r2, #32
 8007fe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007fe4:	2300      	movs	r3, #0
}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	3708      	adds	r7, #8
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}

08007fee <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007fee:	b580      	push	{r7, lr}
 8007ff0:	b08a      	sub	sp, #40	; 0x28
 8007ff2:	af02      	add	r7, sp, #8
 8007ff4:	60f8      	str	r0, [r7, #12]
 8007ff6:	60b9      	str	r1, [r7, #8]
 8007ff8:	603b      	str	r3, [r7, #0]
 8007ffa:	4613      	mov	r3, r2
 8007ffc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007ffe:	2300      	movs	r3, #0
 8008000:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008008:	b2db      	uxtb	r3, r3
 800800a:	2b20      	cmp	r3, #32
 800800c:	d17c      	bne.n	8008108 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800800e:	68bb      	ldr	r3, [r7, #8]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d002      	beq.n	800801a <HAL_UART_Transmit+0x2c>
 8008014:	88fb      	ldrh	r3, [r7, #6]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d101      	bne.n	800801e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800801a:	2301      	movs	r3, #1
 800801c:	e075      	b.n	800810a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008024:	2b01      	cmp	r3, #1
 8008026:	d101      	bne.n	800802c <HAL_UART_Transmit+0x3e>
 8008028:	2302      	movs	r3, #2
 800802a:	e06e      	b.n	800810a <HAL_UART_Transmit+0x11c>
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	2201      	movs	r2, #1
 8008030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	2200      	movs	r2, #0
 8008038:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	2221      	movs	r2, #33	; 0x21
 800803e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008042:	f7fb f997 	bl	8003374 <HAL_GetTick>
 8008046:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	88fa      	ldrh	r2, [r7, #6]
 800804c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	88fa      	ldrh	r2, [r7, #6]
 8008052:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	689b      	ldr	r3, [r3, #8]
 8008058:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800805c:	d108      	bne.n	8008070 <HAL_UART_Transmit+0x82>
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	691b      	ldr	r3, [r3, #16]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d104      	bne.n	8008070 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008066:	2300      	movs	r3, #0
 8008068:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	61bb      	str	r3, [r7, #24]
 800806e:	e003      	b.n	8008078 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008074:	2300      	movs	r3, #0
 8008076:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	2200      	movs	r2, #0
 800807c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008080:	e02a      	b.n	80080d8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	9300      	str	r3, [sp, #0]
 8008086:	697b      	ldr	r3, [r7, #20]
 8008088:	2200      	movs	r2, #0
 800808a:	2180      	movs	r1, #128	; 0x80
 800808c:	68f8      	ldr	r0, [r7, #12]
 800808e:	f000 fc21 	bl	80088d4 <UART_WaitOnFlagUntilTimeout>
 8008092:	4603      	mov	r3, r0
 8008094:	2b00      	cmp	r3, #0
 8008096:	d001      	beq.n	800809c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008098:	2303      	movs	r3, #3
 800809a:	e036      	b.n	800810a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800809c:	69fb      	ldr	r3, [r7, #28]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d10b      	bne.n	80080ba <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80080a2:	69bb      	ldr	r3, [r7, #24]
 80080a4:	881b      	ldrh	r3, [r3, #0]
 80080a6:	461a      	mov	r2, r3
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80080b0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80080b2:	69bb      	ldr	r3, [r7, #24]
 80080b4:	3302      	adds	r3, #2
 80080b6:	61bb      	str	r3, [r7, #24]
 80080b8:	e007      	b.n	80080ca <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80080ba:	69fb      	ldr	r3, [r7, #28]
 80080bc:	781a      	ldrb	r2, [r3, #0]
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80080c4:	69fb      	ldr	r3, [r7, #28]
 80080c6:	3301      	adds	r3, #1
 80080c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80080ce:	b29b      	uxth	r3, r3
 80080d0:	3b01      	subs	r3, #1
 80080d2:	b29a      	uxth	r2, r3
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80080dc:	b29b      	uxth	r3, r3
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d1cf      	bne.n	8008082 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	9300      	str	r3, [sp, #0]
 80080e6:	697b      	ldr	r3, [r7, #20]
 80080e8:	2200      	movs	r2, #0
 80080ea:	2140      	movs	r1, #64	; 0x40
 80080ec:	68f8      	ldr	r0, [r7, #12]
 80080ee:	f000 fbf1 	bl	80088d4 <UART_WaitOnFlagUntilTimeout>
 80080f2:	4603      	mov	r3, r0
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d001      	beq.n	80080fc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80080f8:	2303      	movs	r3, #3
 80080fa:	e006      	b.n	800810a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	2220      	movs	r2, #32
 8008100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008104:	2300      	movs	r3, #0
 8008106:	e000      	b.n	800810a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008108:	2302      	movs	r3, #2
  }
}
 800810a:	4618      	mov	r0, r3
 800810c:	3720      	adds	r7, #32
 800810e:	46bd      	mov	sp, r7
 8008110:	bd80      	pop	{r7, pc}

08008112 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008112:	b580      	push	{r7, lr}
 8008114:	b084      	sub	sp, #16
 8008116:	af00      	add	r7, sp, #0
 8008118:	60f8      	str	r0, [r7, #12]
 800811a:	60b9      	str	r1, [r7, #8]
 800811c:	4613      	mov	r3, r2
 800811e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008126:	b2db      	uxtb	r3, r3
 8008128:	2b20      	cmp	r3, #32
 800812a:	d11d      	bne.n	8008168 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d002      	beq.n	8008138 <HAL_UART_Receive_DMA+0x26>
 8008132:	88fb      	ldrh	r3, [r7, #6]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d101      	bne.n	800813c <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8008138:	2301      	movs	r3, #1
 800813a:	e016      	b.n	800816a <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008142:	2b01      	cmp	r3, #1
 8008144:	d101      	bne.n	800814a <HAL_UART_Receive_DMA+0x38>
 8008146:	2302      	movs	r3, #2
 8008148:	e00f      	b.n	800816a <HAL_UART_Receive_DMA+0x58>
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	2201      	movs	r2, #1
 800814e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	2200      	movs	r2, #0
 8008156:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008158:	88fb      	ldrh	r3, [r7, #6]
 800815a:	461a      	mov	r2, r3
 800815c:	68b9      	ldr	r1, [r7, #8]
 800815e:	68f8      	ldr	r0, [r7, #12]
 8008160:	f000 fc26 	bl	80089b0 <UART_Start_Receive_DMA>
 8008164:	4603      	mov	r3, r0
 8008166:	e000      	b.n	800816a <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008168:	2302      	movs	r3, #2
  }
}
 800816a:	4618      	mov	r0, r3
 800816c:	3710      	adds	r7, #16
 800816e:	46bd      	mov	sp, r7
 8008170:	bd80      	pop	{r7, pc}
	...

08008174 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b0ba      	sub	sp, #232	; 0xe8
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	68db      	ldr	r3, [r3, #12]
 800818c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	695b      	ldr	r3, [r3, #20]
 8008196:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800819a:	2300      	movs	r3, #0
 800819c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80081a0:	2300      	movs	r3, #0
 80081a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80081a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081aa:	f003 030f 	and.w	r3, r3, #15
 80081ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80081b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d10f      	bne.n	80081da <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80081ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081be:	f003 0320 	and.w	r3, r3, #32
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d009      	beq.n	80081da <HAL_UART_IRQHandler+0x66>
 80081c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081ca:	f003 0320 	and.w	r3, r3, #32
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d003      	beq.n	80081da <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f000 fd91 	bl	8008cfa <UART_Receive_IT>
      return;
 80081d8:	e256      	b.n	8008688 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80081da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80081de:	2b00      	cmp	r3, #0
 80081e0:	f000 80de 	beq.w	80083a0 <HAL_UART_IRQHandler+0x22c>
 80081e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80081e8:	f003 0301 	and.w	r3, r3, #1
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d106      	bne.n	80081fe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80081f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081f4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	f000 80d1 	beq.w	80083a0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80081fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008202:	f003 0301 	and.w	r3, r3, #1
 8008206:	2b00      	cmp	r3, #0
 8008208:	d00b      	beq.n	8008222 <HAL_UART_IRQHandler+0xae>
 800820a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800820e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008212:	2b00      	cmp	r3, #0
 8008214:	d005      	beq.n	8008222 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800821a:	f043 0201 	orr.w	r2, r3, #1
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008222:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008226:	f003 0304 	and.w	r3, r3, #4
 800822a:	2b00      	cmp	r3, #0
 800822c:	d00b      	beq.n	8008246 <HAL_UART_IRQHandler+0xd2>
 800822e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008232:	f003 0301 	and.w	r3, r3, #1
 8008236:	2b00      	cmp	r3, #0
 8008238:	d005      	beq.n	8008246 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800823e:	f043 0202 	orr.w	r2, r3, #2
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008246:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800824a:	f003 0302 	and.w	r3, r3, #2
 800824e:	2b00      	cmp	r3, #0
 8008250:	d00b      	beq.n	800826a <HAL_UART_IRQHandler+0xf6>
 8008252:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008256:	f003 0301 	and.w	r3, r3, #1
 800825a:	2b00      	cmp	r3, #0
 800825c:	d005      	beq.n	800826a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008262:	f043 0204 	orr.w	r2, r3, #4
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800826a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800826e:	f003 0308 	and.w	r3, r3, #8
 8008272:	2b00      	cmp	r3, #0
 8008274:	d011      	beq.n	800829a <HAL_UART_IRQHandler+0x126>
 8008276:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800827a:	f003 0320 	and.w	r3, r3, #32
 800827e:	2b00      	cmp	r3, #0
 8008280:	d105      	bne.n	800828e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008282:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008286:	f003 0301 	and.w	r3, r3, #1
 800828a:	2b00      	cmp	r3, #0
 800828c:	d005      	beq.n	800829a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008292:	f043 0208 	orr.w	r2, r3, #8
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800829e:	2b00      	cmp	r3, #0
 80082a0:	f000 81ed 	beq.w	800867e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80082a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082a8:	f003 0320 	and.w	r3, r3, #32
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d008      	beq.n	80082c2 <HAL_UART_IRQHandler+0x14e>
 80082b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082b4:	f003 0320 	and.w	r3, r3, #32
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d002      	beq.n	80082c2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	f000 fd1c 	bl	8008cfa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	695b      	ldr	r3, [r3, #20]
 80082c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082cc:	2b40      	cmp	r3, #64	; 0x40
 80082ce:	bf0c      	ite	eq
 80082d0:	2301      	moveq	r3, #1
 80082d2:	2300      	movne	r3, #0
 80082d4:	b2db      	uxtb	r3, r3
 80082d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082de:	f003 0308 	and.w	r3, r3, #8
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d103      	bne.n	80082ee <HAL_UART_IRQHandler+0x17a>
 80082e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d04f      	beq.n	800838e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f000 fc24 	bl	8008b3c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	695b      	ldr	r3, [r3, #20]
 80082fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082fe:	2b40      	cmp	r3, #64	; 0x40
 8008300:	d141      	bne.n	8008386 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	3314      	adds	r3, #20
 8008308:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800830c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008310:	e853 3f00 	ldrex	r3, [r3]
 8008314:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008318:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800831c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008320:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	3314      	adds	r3, #20
 800832a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800832e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008332:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008336:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800833a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800833e:	e841 2300 	strex	r3, r2, [r1]
 8008342:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008346:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800834a:	2b00      	cmp	r3, #0
 800834c:	d1d9      	bne.n	8008302 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008352:	2b00      	cmp	r3, #0
 8008354:	d013      	beq.n	800837e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800835a:	4a7d      	ldr	r2, [pc, #500]	; (8008550 <HAL_UART_IRQHandler+0x3dc>)
 800835c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008362:	4618      	mov	r0, r3
 8008364:	f7fb fabe 	bl	80038e4 <HAL_DMA_Abort_IT>
 8008368:	4603      	mov	r3, r0
 800836a:	2b00      	cmp	r3, #0
 800836c:	d016      	beq.n	800839c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008372:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008374:	687a      	ldr	r2, [r7, #4]
 8008376:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008378:	4610      	mov	r0, r2
 800837a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800837c:	e00e      	b.n	800839c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f000 f99a 	bl	80086b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008384:	e00a      	b.n	800839c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	f000 f996 	bl	80086b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800838c:	e006      	b.n	800839c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f000 f992 	bl	80086b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2200      	movs	r2, #0
 8008398:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800839a:	e170      	b.n	800867e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800839c:	bf00      	nop
    return;
 800839e:	e16e      	b.n	800867e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083a4:	2b01      	cmp	r3, #1
 80083a6:	f040 814a 	bne.w	800863e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80083aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083ae:	f003 0310 	and.w	r3, r3, #16
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	f000 8143 	beq.w	800863e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80083b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80083bc:	f003 0310 	and.w	r3, r3, #16
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	f000 813c 	beq.w	800863e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80083c6:	2300      	movs	r3, #0
 80083c8:	60bb      	str	r3, [r7, #8]
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	60bb      	str	r3, [r7, #8]
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	685b      	ldr	r3, [r3, #4]
 80083d8:	60bb      	str	r3, [r7, #8]
 80083da:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	695b      	ldr	r3, [r3, #20]
 80083e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083e6:	2b40      	cmp	r3, #64	; 0x40
 80083e8:	f040 80b4 	bne.w	8008554 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	685b      	ldr	r3, [r3, #4]
 80083f4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80083f8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	f000 8140 	beq.w	8008682 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008406:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800840a:	429a      	cmp	r2, r3
 800840c:	f080 8139 	bcs.w	8008682 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008416:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800841c:	69db      	ldr	r3, [r3, #28]
 800841e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008422:	f000 8088 	beq.w	8008536 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	330c      	adds	r3, #12
 800842c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008430:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008434:	e853 3f00 	ldrex	r3, [r3]
 8008438:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800843c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008440:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008444:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	330c      	adds	r3, #12
 800844e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008452:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008456:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800845a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800845e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008462:	e841 2300 	strex	r3, r2, [r1]
 8008466:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800846a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800846e:	2b00      	cmp	r3, #0
 8008470:	d1d9      	bne.n	8008426 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	3314      	adds	r3, #20
 8008478:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800847a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800847c:	e853 3f00 	ldrex	r3, [r3]
 8008480:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008482:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008484:	f023 0301 	bic.w	r3, r3, #1
 8008488:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	3314      	adds	r3, #20
 8008492:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008496:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800849a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800849c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800849e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80084a2:	e841 2300 	strex	r3, r2, [r1]
 80084a6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80084a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d1e1      	bne.n	8008472 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	3314      	adds	r3, #20
 80084b4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80084b8:	e853 3f00 	ldrex	r3, [r3]
 80084bc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80084be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80084c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	3314      	adds	r3, #20
 80084ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80084d2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80084d4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084d6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80084d8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80084da:	e841 2300 	strex	r3, r2, [r1]
 80084de:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80084e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d1e3      	bne.n	80084ae <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2220      	movs	r2, #32
 80084ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2200      	movs	r2, #0
 80084f2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	330c      	adds	r3, #12
 80084fa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084fe:	e853 3f00 	ldrex	r3, [r3]
 8008502:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008504:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008506:	f023 0310 	bic.w	r3, r3, #16
 800850a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	330c      	adds	r3, #12
 8008514:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008518:	65ba      	str	r2, [r7, #88]	; 0x58
 800851a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800851c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800851e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008520:	e841 2300 	strex	r3, r2, [r1]
 8008524:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008526:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008528:	2b00      	cmp	r3, #0
 800852a:	d1e3      	bne.n	80084f4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008530:	4618      	mov	r0, r3
 8008532:	f7fb f967 	bl	8003804 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800853e:	b29b      	uxth	r3, r3
 8008540:	1ad3      	subs	r3, r2, r3
 8008542:	b29b      	uxth	r3, r3
 8008544:	4619      	mov	r1, r3
 8008546:	6878      	ldr	r0, [r7, #4]
 8008548:	f000 f8c0 	bl	80086cc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800854c:	e099      	b.n	8008682 <HAL_UART_IRQHandler+0x50e>
 800854e:	bf00      	nop
 8008550:	08008c03 	.word	0x08008c03
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800855c:	b29b      	uxth	r3, r3
 800855e:	1ad3      	subs	r3, r2, r3
 8008560:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008568:	b29b      	uxth	r3, r3
 800856a:	2b00      	cmp	r3, #0
 800856c:	f000 808b 	beq.w	8008686 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008570:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008574:	2b00      	cmp	r3, #0
 8008576:	f000 8086 	beq.w	8008686 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	330c      	adds	r3, #12
 8008580:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008584:	e853 3f00 	ldrex	r3, [r3]
 8008588:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800858a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800858c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008590:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	330c      	adds	r3, #12
 800859a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800859e:	647a      	str	r2, [r7, #68]	; 0x44
 80085a0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085a2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80085a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80085a6:	e841 2300 	strex	r3, r2, [r1]
 80085aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80085ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d1e3      	bne.n	800857a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	3314      	adds	r3, #20
 80085b8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085bc:	e853 3f00 	ldrex	r3, [r3]
 80085c0:	623b      	str	r3, [r7, #32]
   return(result);
 80085c2:	6a3b      	ldr	r3, [r7, #32]
 80085c4:	f023 0301 	bic.w	r3, r3, #1
 80085c8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	3314      	adds	r3, #20
 80085d2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80085d6:	633a      	str	r2, [r7, #48]	; 0x30
 80085d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80085dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085de:	e841 2300 	strex	r3, r2, [r1]
 80085e2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80085e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d1e3      	bne.n	80085b2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2220      	movs	r2, #32
 80085ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2200      	movs	r2, #0
 80085f6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	330c      	adds	r3, #12
 80085fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008600:	693b      	ldr	r3, [r7, #16]
 8008602:	e853 3f00 	ldrex	r3, [r3]
 8008606:	60fb      	str	r3, [r7, #12]
   return(result);
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	f023 0310 	bic.w	r3, r3, #16
 800860e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	330c      	adds	r3, #12
 8008618:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800861c:	61fa      	str	r2, [r7, #28]
 800861e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008620:	69b9      	ldr	r1, [r7, #24]
 8008622:	69fa      	ldr	r2, [r7, #28]
 8008624:	e841 2300 	strex	r3, r2, [r1]
 8008628:	617b      	str	r3, [r7, #20]
   return(result);
 800862a:	697b      	ldr	r3, [r7, #20]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d1e3      	bne.n	80085f8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008630:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008634:	4619      	mov	r1, r3
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f000 f848 	bl	80086cc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800863c:	e023      	b.n	8008686 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800863e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008642:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008646:	2b00      	cmp	r3, #0
 8008648:	d009      	beq.n	800865e <HAL_UART_IRQHandler+0x4ea>
 800864a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800864e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008652:	2b00      	cmp	r3, #0
 8008654:	d003      	beq.n	800865e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f000 fae7 	bl	8008c2a <UART_Transmit_IT>
    return;
 800865c:	e014      	b.n	8008688 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800865e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008662:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008666:	2b00      	cmp	r3, #0
 8008668:	d00e      	beq.n	8008688 <HAL_UART_IRQHandler+0x514>
 800866a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800866e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008672:	2b00      	cmp	r3, #0
 8008674:	d008      	beq.n	8008688 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008676:	6878      	ldr	r0, [r7, #4]
 8008678:	f000 fb27 	bl	8008cca <UART_EndTransmit_IT>
    return;
 800867c:	e004      	b.n	8008688 <HAL_UART_IRQHandler+0x514>
    return;
 800867e:	bf00      	nop
 8008680:	e002      	b.n	8008688 <HAL_UART_IRQHandler+0x514>
      return;
 8008682:	bf00      	nop
 8008684:	e000      	b.n	8008688 <HAL_UART_IRQHandler+0x514>
      return;
 8008686:	bf00      	nop
  }
}
 8008688:	37e8      	adds	r7, #232	; 0xe8
 800868a:	46bd      	mov	sp, r7
 800868c:	bd80      	pop	{r7, pc}
 800868e:	bf00      	nop

08008690 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008690:	b480      	push	{r7}
 8008692:	b083      	sub	sp, #12
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008698:	bf00      	nop
 800869a:	370c      	adds	r7, #12
 800869c:	46bd      	mov	sp, r7
 800869e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a2:	4770      	bx	lr

080086a4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80086a4:	b480      	push	{r7}
 80086a6:	b083      	sub	sp, #12
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80086ac:	bf00      	nop
 80086ae:	370c      	adds	r7, #12
 80086b0:	46bd      	mov	sp, r7
 80086b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b6:	4770      	bx	lr

080086b8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80086b8:	b480      	push	{r7}
 80086ba:	b083      	sub	sp, #12
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80086c0:	bf00      	nop
 80086c2:	370c      	adds	r7, #12
 80086c4:	46bd      	mov	sp, r7
 80086c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ca:	4770      	bx	lr

080086cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80086cc:	b480      	push	{r7}
 80086ce:	b083      	sub	sp, #12
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
 80086d4:	460b      	mov	r3, r1
 80086d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80086d8:	bf00      	nop
 80086da:	370c      	adds	r7, #12
 80086dc:	46bd      	mov	sp, r7
 80086de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e2:	4770      	bx	lr

080086e4 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b09c      	sub	sp, #112	; 0x70
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086f0:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d172      	bne.n	80087e6 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8008700:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008702:	2200      	movs	r2, #0
 8008704:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008706:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	330c      	adds	r3, #12
 800870c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800870e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008710:	e853 3f00 	ldrex	r3, [r3]
 8008714:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008716:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008718:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800871c:	66bb      	str	r3, [r7, #104]	; 0x68
 800871e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	330c      	adds	r3, #12
 8008724:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008726:	65ba      	str	r2, [r7, #88]	; 0x58
 8008728:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800872a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800872c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800872e:	e841 2300 	strex	r3, r2, [r1]
 8008732:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008734:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008736:	2b00      	cmp	r3, #0
 8008738:	d1e5      	bne.n	8008706 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800873a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	3314      	adds	r3, #20
 8008740:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008744:	e853 3f00 	ldrex	r3, [r3]
 8008748:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800874a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800874c:	f023 0301 	bic.w	r3, r3, #1
 8008750:	667b      	str	r3, [r7, #100]	; 0x64
 8008752:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	3314      	adds	r3, #20
 8008758:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800875a:	647a      	str	r2, [r7, #68]	; 0x44
 800875c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800875e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008760:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008762:	e841 2300 	strex	r3, r2, [r1]
 8008766:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008768:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800876a:	2b00      	cmp	r3, #0
 800876c:	d1e5      	bne.n	800873a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800876e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	3314      	adds	r3, #20
 8008774:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008778:	e853 3f00 	ldrex	r3, [r3]
 800877c:	623b      	str	r3, [r7, #32]
   return(result);
 800877e:	6a3b      	ldr	r3, [r7, #32]
 8008780:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008784:	663b      	str	r3, [r7, #96]	; 0x60
 8008786:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	3314      	adds	r3, #20
 800878c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800878e:	633a      	str	r2, [r7, #48]	; 0x30
 8008790:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008792:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008794:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008796:	e841 2300 	strex	r3, r2, [r1]
 800879a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800879c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d1e5      	bne.n	800876e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80087a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087a4:	2220      	movs	r2, #32
 80087a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087ae:	2b01      	cmp	r3, #1
 80087b0:	d119      	bne.n	80087e6 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	330c      	adds	r3, #12
 80087b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ba:	693b      	ldr	r3, [r7, #16]
 80087bc:	e853 3f00 	ldrex	r3, [r3]
 80087c0:	60fb      	str	r3, [r7, #12]
   return(result);
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	f023 0310 	bic.w	r3, r3, #16
 80087c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80087ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	330c      	adds	r3, #12
 80087d0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80087d2:	61fa      	str	r2, [r7, #28]
 80087d4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087d6:	69b9      	ldr	r1, [r7, #24]
 80087d8:	69fa      	ldr	r2, [r7, #28]
 80087da:	e841 2300 	strex	r3, r2, [r1]
 80087de:	617b      	str	r3, [r7, #20]
   return(result);
 80087e0:	697b      	ldr	r3, [r7, #20]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d1e5      	bne.n	80087b2 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087ea:	2b01      	cmp	r3, #1
 80087ec:	d106      	bne.n	80087fc <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80087ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087f0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80087f2:	4619      	mov	r1, r3
 80087f4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80087f6:	f7ff ff69 	bl	80086cc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80087fa:	e002      	b.n	8008802 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80087fc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80087fe:	f7f9 fbed 	bl	8001fdc <HAL_UART_RxCpltCallback>
}
 8008802:	bf00      	nop
 8008804:	3770      	adds	r7, #112	; 0x70
 8008806:	46bd      	mov	sp, r7
 8008808:	bd80      	pop	{r7, pc}

0800880a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800880a:	b580      	push	{r7, lr}
 800880c:	b084      	sub	sp, #16
 800880e:	af00      	add	r7, sp, #0
 8008810:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008816:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800881c:	2b01      	cmp	r3, #1
 800881e:	d108      	bne.n	8008832 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008824:	085b      	lsrs	r3, r3, #1
 8008826:	b29b      	uxth	r3, r3
 8008828:	4619      	mov	r1, r3
 800882a:	68f8      	ldr	r0, [r7, #12]
 800882c:	f7ff ff4e 	bl	80086cc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008830:	e002      	b.n	8008838 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8008832:	68f8      	ldr	r0, [r7, #12]
 8008834:	f7ff ff36 	bl	80086a4 <HAL_UART_RxHalfCpltCallback>
}
 8008838:	bf00      	nop
 800883a:	3710      	adds	r7, #16
 800883c:	46bd      	mov	sp, r7
 800883e:	bd80      	pop	{r7, pc}

08008840 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b084      	sub	sp, #16
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008848:	2300      	movs	r3, #0
 800884a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008850:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008852:	68bb      	ldr	r3, [r7, #8]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	695b      	ldr	r3, [r3, #20]
 8008858:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800885c:	2b80      	cmp	r3, #128	; 0x80
 800885e:	bf0c      	ite	eq
 8008860:	2301      	moveq	r3, #1
 8008862:	2300      	movne	r3, #0
 8008864:	b2db      	uxtb	r3, r3
 8008866:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800886e:	b2db      	uxtb	r3, r3
 8008870:	2b21      	cmp	r3, #33	; 0x21
 8008872:	d108      	bne.n	8008886 <UART_DMAError+0x46>
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d005      	beq.n	8008886 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800887a:	68bb      	ldr	r3, [r7, #8]
 800887c:	2200      	movs	r2, #0
 800887e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008880:	68b8      	ldr	r0, [r7, #8]
 8008882:	f000 f933 	bl	8008aec <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008886:	68bb      	ldr	r3, [r7, #8]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	695b      	ldr	r3, [r3, #20]
 800888c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008890:	2b40      	cmp	r3, #64	; 0x40
 8008892:	bf0c      	ite	eq
 8008894:	2301      	moveq	r3, #1
 8008896:	2300      	movne	r3, #0
 8008898:	b2db      	uxtb	r3, r3
 800889a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80088a2:	b2db      	uxtb	r3, r3
 80088a4:	2b22      	cmp	r3, #34	; 0x22
 80088a6:	d108      	bne.n	80088ba <UART_DMAError+0x7a>
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d005      	beq.n	80088ba <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80088ae:	68bb      	ldr	r3, [r7, #8]
 80088b0:	2200      	movs	r2, #0
 80088b2:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80088b4:	68b8      	ldr	r0, [r7, #8]
 80088b6:	f000 f941 	bl	8008b3c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80088ba:	68bb      	ldr	r3, [r7, #8]
 80088bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088be:	f043 0210 	orr.w	r2, r3, #16
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80088c6:	68b8      	ldr	r0, [r7, #8]
 80088c8:	f7ff fef6 	bl	80086b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80088cc:	bf00      	nop
 80088ce:	3710      	adds	r7, #16
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}

080088d4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b090      	sub	sp, #64	; 0x40
 80088d8:	af00      	add	r7, sp, #0
 80088da:	60f8      	str	r0, [r7, #12]
 80088dc:	60b9      	str	r1, [r7, #8]
 80088de:	603b      	str	r3, [r7, #0]
 80088e0:	4613      	mov	r3, r2
 80088e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80088e4:	e050      	b.n	8008988 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80088e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088ec:	d04c      	beq.n	8008988 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80088ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d007      	beq.n	8008904 <UART_WaitOnFlagUntilTimeout+0x30>
 80088f4:	f7fa fd3e 	bl	8003374 <HAL_GetTick>
 80088f8:	4602      	mov	r2, r0
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	1ad3      	subs	r3, r2, r3
 80088fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008900:	429a      	cmp	r2, r3
 8008902:	d241      	bcs.n	8008988 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	330c      	adds	r3, #12
 800890a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800890c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800890e:	e853 3f00 	ldrex	r3, [r3]
 8008912:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008916:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800891a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	330c      	adds	r3, #12
 8008922:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008924:	637a      	str	r2, [r7, #52]	; 0x34
 8008926:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008928:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800892a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800892c:	e841 2300 	strex	r3, r2, [r1]
 8008930:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008934:	2b00      	cmp	r3, #0
 8008936:	d1e5      	bne.n	8008904 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	3314      	adds	r3, #20
 800893e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008940:	697b      	ldr	r3, [r7, #20]
 8008942:	e853 3f00 	ldrex	r3, [r3]
 8008946:	613b      	str	r3, [r7, #16]
   return(result);
 8008948:	693b      	ldr	r3, [r7, #16]
 800894a:	f023 0301 	bic.w	r3, r3, #1
 800894e:	63bb      	str	r3, [r7, #56]	; 0x38
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	3314      	adds	r3, #20
 8008956:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008958:	623a      	str	r2, [r7, #32]
 800895a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800895c:	69f9      	ldr	r1, [r7, #28]
 800895e:	6a3a      	ldr	r2, [r7, #32]
 8008960:	e841 2300 	strex	r3, r2, [r1]
 8008964:	61bb      	str	r3, [r7, #24]
   return(result);
 8008966:	69bb      	ldr	r3, [r7, #24]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d1e5      	bne.n	8008938 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	2220      	movs	r2, #32
 8008970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	2220      	movs	r2, #32
 8008978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	2200      	movs	r2, #0
 8008980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008984:	2303      	movs	r3, #3
 8008986:	e00f      	b.n	80089a8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	681a      	ldr	r2, [r3, #0]
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	4013      	ands	r3, r2
 8008992:	68ba      	ldr	r2, [r7, #8]
 8008994:	429a      	cmp	r2, r3
 8008996:	bf0c      	ite	eq
 8008998:	2301      	moveq	r3, #1
 800899a:	2300      	movne	r3, #0
 800899c:	b2db      	uxtb	r3, r3
 800899e:	461a      	mov	r2, r3
 80089a0:	79fb      	ldrb	r3, [r7, #7]
 80089a2:	429a      	cmp	r2, r3
 80089a4:	d09f      	beq.n	80088e6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80089a6:	2300      	movs	r3, #0
}
 80089a8:	4618      	mov	r0, r3
 80089aa:	3740      	adds	r7, #64	; 0x40
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bd80      	pop	{r7, pc}

080089b0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b098      	sub	sp, #96	; 0x60
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	60f8      	str	r0, [r7, #12]
 80089b8:	60b9      	str	r1, [r7, #8]
 80089ba:	4613      	mov	r3, r2
 80089bc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80089be:	68ba      	ldr	r2, [r7, #8]
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	88fa      	ldrh	r2, [r7, #6]
 80089c8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	2200      	movs	r2, #0
 80089ce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	2222      	movs	r2, #34	; 0x22
 80089d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089dc:	4a40      	ldr	r2, [pc, #256]	; (8008ae0 <UART_Start_Receive_DMA+0x130>)
 80089de:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089e4:	4a3f      	ldr	r2, [pc, #252]	; (8008ae4 <UART_Start_Receive_DMA+0x134>)
 80089e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089ec:	4a3e      	ldr	r2, [pc, #248]	; (8008ae8 <UART_Start_Receive_DMA+0x138>)
 80089ee:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089f4:	2200      	movs	r2, #0
 80089f6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80089f8:	f107 0308 	add.w	r3, r7, #8
 80089fc:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	3304      	adds	r3, #4
 8008a08:	4619      	mov	r1, r3
 8008a0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008a0c:	681a      	ldr	r2, [r3, #0]
 8008a0e:	88fb      	ldrh	r3, [r7, #6]
 8008a10:	f7fa fea0 	bl	8003754 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8008a14:	2300      	movs	r3, #0
 8008a16:	613b      	str	r3, [r7, #16]
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	613b      	str	r3, [r7, #16]
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	685b      	ldr	r3, [r3, #4]
 8008a26:	613b      	str	r3, [r7, #16]
 8008a28:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	691b      	ldr	r3, [r3, #16]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d019      	beq.n	8008a6e <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	330c      	adds	r3, #12
 8008a40:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a44:	e853 3f00 	ldrex	r3, [r3]
 8008a48:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008a4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a50:	65bb      	str	r3, [r7, #88]	; 0x58
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	330c      	adds	r3, #12
 8008a58:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008a5a:	64fa      	str	r2, [r7, #76]	; 0x4c
 8008a5c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a5e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008a60:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008a62:	e841 2300 	strex	r3, r2, [r1]
 8008a66:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008a68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d1e5      	bne.n	8008a3a <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	3314      	adds	r3, #20
 8008a74:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a78:	e853 3f00 	ldrex	r3, [r3]
 8008a7c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a80:	f043 0301 	orr.w	r3, r3, #1
 8008a84:	657b      	str	r3, [r7, #84]	; 0x54
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	3314      	adds	r3, #20
 8008a8c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008a8e:	63ba      	str	r2, [r7, #56]	; 0x38
 8008a90:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a92:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008a94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008a96:	e841 2300 	strex	r3, r2, [r1]
 8008a9a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d1e5      	bne.n	8008a6e <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	3314      	adds	r3, #20
 8008aa8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aaa:	69bb      	ldr	r3, [r7, #24]
 8008aac:	e853 3f00 	ldrex	r3, [r3]
 8008ab0:	617b      	str	r3, [r7, #20]
   return(result);
 8008ab2:	697b      	ldr	r3, [r7, #20]
 8008ab4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ab8:	653b      	str	r3, [r7, #80]	; 0x50
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	3314      	adds	r3, #20
 8008ac0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008ac2:	627a      	str	r2, [r7, #36]	; 0x24
 8008ac4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ac6:	6a39      	ldr	r1, [r7, #32]
 8008ac8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008aca:	e841 2300 	strex	r3, r2, [r1]
 8008ace:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ad0:	69fb      	ldr	r3, [r7, #28]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d1e5      	bne.n	8008aa2 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8008ad6:	2300      	movs	r3, #0
}
 8008ad8:	4618      	mov	r0, r3
 8008ada:	3760      	adds	r7, #96	; 0x60
 8008adc:	46bd      	mov	sp, r7
 8008ade:	bd80      	pop	{r7, pc}
 8008ae0:	080086e5 	.word	0x080086e5
 8008ae4:	0800880b 	.word	0x0800880b
 8008ae8:	08008841 	.word	0x08008841

08008aec <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008aec:	b480      	push	{r7}
 8008aee:	b089      	sub	sp, #36	; 0x24
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	330c      	adds	r3, #12
 8008afa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	e853 3f00 	ldrex	r3, [r3]
 8008b02:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b04:	68bb      	ldr	r3, [r7, #8]
 8008b06:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008b0a:	61fb      	str	r3, [r7, #28]
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	330c      	adds	r3, #12
 8008b12:	69fa      	ldr	r2, [r7, #28]
 8008b14:	61ba      	str	r2, [r7, #24]
 8008b16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b18:	6979      	ldr	r1, [r7, #20]
 8008b1a:	69ba      	ldr	r2, [r7, #24]
 8008b1c:	e841 2300 	strex	r3, r2, [r1]
 8008b20:	613b      	str	r3, [r7, #16]
   return(result);
 8008b22:	693b      	ldr	r3, [r7, #16]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d1e5      	bne.n	8008af4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2220      	movs	r2, #32
 8008b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8008b30:	bf00      	nop
 8008b32:	3724      	adds	r7, #36	; 0x24
 8008b34:	46bd      	mov	sp, r7
 8008b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3a:	4770      	bx	lr

08008b3c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008b3c:	b480      	push	{r7}
 8008b3e:	b095      	sub	sp, #84	; 0x54
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	330c      	adds	r3, #12
 8008b4a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b4e:	e853 3f00 	ldrex	r3, [r3]
 8008b52:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b56:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008b5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	330c      	adds	r3, #12
 8008b62:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008b64:	643a      	str	r2, [r7, #64]	; 0x40
 8008b66:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b68:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008b6a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008b6c:	e841 2300 	strex	r3, r2, [r1]
 8008b70:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d1e5      	bne.n	8008b44 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	3314      	adds	r3, #20
 8008b7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b80:	6a3b      	ldr	r3, [r7, #32]
 8008b82:	e853 3f00 	ldrex	r3, [r3]
 8008b86:	61fb      	str	r3, [r7, #28]
   return(result);
 8008b88:	69fb      	ldr	r3, [r7, #28]
 8008b8a:	f023 0301 	bic.w	r3, r3, #1
 8008b8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	3314      	adds	r3, #20
 8008b96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008b98:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008b9a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008b9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ba0:	e841 2300 	strex	r3, r2, [r1]
 8008ba4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d1e5      	bne.n	8008b78 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bb0:	2b01      	cmp	r3, #1
 8008bb2:	d119      	bne.n	8008be8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	330c      	adds	r3, #12
 8008bba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	e853 3f00 	ldrex	r3, [r3]
 8008bc2:	60bb      	str	r3, [r7, #8]
   return(result);
 8008bc4:	68bb      	ldr	r3, [r7, #8]
 8008bc6:	f023 0310 	bic.w	r3, r3, #16
 8008bca:	647b      	str	r3, [r7, #68]	; 0x44
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	330c      	adds	r3, #12
 8008bd2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008bd4:	61ba      	str	r2, [r7, #24]
 8008bd6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bd8:	6979      	ldr	r1, [r7, #20]
 8008bda:	69ba      	ldr	r2, [r7, #24]
 8008bdc:	e841 2300 	strex	r3, r2, [r1]
 8008be0:	613b      	str	r3, [r7, #16]
   return(result);
 8008be2:	693b      	ldr	r3, [r7, #16]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d1e5      	bne.n	8008bb4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2220      	movs	r2, #32
 8008bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008bf6:	bf00      	nop
 8008bf8:	3754      	adds	r7, #84	; 0x54
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c00:	4770      	bx	lr

08008c02 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008c02:	b580      	push	{r7, lr}
 8008c04:	b084      	sub	sp, #16
 8008c06:	af00      	add	r7, sp, #0
 8008c08:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c0e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	2200      	movs	r2, #0
 8008c14:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	2200      	movs	r2, #0
 8008c1a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008c1c:	68f8      	ldr	r0, [r7, #12]
 8008c1e:	f7ff fd4b 	bl	80086b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c22:	bf00      	nop
 8008c24:	3710      	adds	r7, #16
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bd80      	pop	{r7, pc}

08008c2a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008c2a:	b480      	push	{r7}
 8008c2c:	b085      	sub	sp, #20
 8008c2e:	af00      	add	r7, sp, #0
 8008c30:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c38:	b2db      	uxtb	r3, r3
 8008c3a:	2b21      	cmp	r3, #33	; 0x21
 8008c3c:	d13e      	bne.n	8008cbc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	689b      	ldr	r3, [r3, #8]
 8008c42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c46:	d114      	bne.n	8008c72 <UART_Transmit_IT+0x48>
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	691b      	ldr	r3, [r3, #16]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d110      	bne.n	8008c72 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	6a1b      	ldr	r3, [r3, #32]
 8008c54:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	881b      	ldrh	r3, [r3, #0]
 8008c5a:	461a      	mov	r2, r3
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008c64:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	6a1b      	ldr	r3, [r3, #32]
 8008c6a:	1c9a      	adds	r2, r3, #2
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	621a      	str	r2, [r3, #32]
 8008c70:	e008      	b.n	8008c84 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6a1b      	ldr	r3, [r3, #32]
 8008c76:	1c59      	adds	r1, r3, #1
 8008c78:	687a      	ldr	r2, [r7, #4]
 8008c7a:	6211      	str	r1, [r2, #32]
 8008c7c:	781a      	ldrb	r2, [r3, #0]
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008c88:	b29b      	uxth	r3, r3
 8008c8a:	3b01      	subs	r3, #1
 8008c8c:	b29b      	uxth	r3, r3
 8008c8e:	687a      	ldr	r2, [r7, #4]
 8008c90:	4619      	mov	r1, r3
 8008c92:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d10f      	bne.n	8008cb8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	68da      	ldr	r2, [r3, #12]
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008ca6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	68da      	ldr	r2, [r3, #12]
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008cb6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008cb8:	2300      	movs	r3, #0
 8008cba:	e000      	b.n	8008cbe <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008cbc:	2302      	movs	r3, #2
  }
}
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	3714      	adds	r7, #20
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc8:	4770      	bx	lr

08008cca <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008cca:	b580      	push	{r7, lr}
 8008ccc:	b082      	sub	sp, #8
 8008cce:	af00      	add	r7, sp, #0
 8008cd0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	68da      	ldr	r2, [r3, #12]
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008ce0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	2220      	movs	r2, #32
 8008ce6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f7ff fcd0 	bl	8008690 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008cf0:	2300      	movs	r3, #0
}
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	3708      	adds	r7, #8
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bd80      	pop	{r7, pc}

08008cfa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008cfa:	b580      	push	{r7, lr}
 8008cfc:	b08c      	sub	sp, #48	; 0x30
 8008cfe:	af00      	add	r7, sp, #0
 8008d00:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008d08:	b2db      	uxtb	r3, r3
 8008d0a:	2b22      	cmp	r3, #34	; 0x22
 8008d0c:	f040 80ab 	bne.w	8008e66 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	689b      	ldr	r3, [r3, #8]
 8008d14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d18:	d117      	bne.n	8008d4a <UART_Receive_IT+0x50>
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	691b      	ldr	r3, [r3, #16]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d113      	bne.n	8008d4a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008d22:	2300      	movs	r3, #0
 8008d24:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d2a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	685b      	ldr	r3, [r3, #4]
 8008d32:	b29b      	uxth	r3, r3
 8008d34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d38:	b29a      	uxth	r2, r3
 8008d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d3c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d42:	1c9a      	adds	r2, r3, #2
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	629a      	str	r2, [r3, #40]	; 0x28
 8008d48:	e026      	b.n	8008d98 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008d50:	2300      	movs	r3, #0
 8008d52:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	689b      	ldr	r3, [r3, #8]
 8008d58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d5c:	d007      	beq.n	8008d6e <UART_Receive_IT+0x74>
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	689b      	ldr	r3, [r3, #8]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d10a      	bne.n	8008d7c <UART_Receive_IT+0x82>
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	691b      	ldr	r3, [r3, #16]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d106      	bne.n	8008d7c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	685b      	ldr	r3, [r3, #4]
 8008d74:	b2da      	uxtb	r2, r3
 8008d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d78:	701a      	strb	r2, [r3, #0]
 8008d7a:	e008      	b.n	8008d8e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	685b      	ldr	r3, [r3, #4]
 8008d82:	b2db      	uxtb	r3, r3
 8008d84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d88:	b2da      	uxtb	r2, r3
 8008d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d8c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d92:	1c5a      	adds	r2, r3, #1
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008d9c:	b29b      	uxth	r3, r3
 8008d9e:	3b01      	subs	r3, #1
 8008da0:	b29b      	uxth	r3, r3
 8008da2:	687a      	ldr	r2, [r7, #4]
 8008da4:	4619      	mov	r1, r3
 8008da6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d15a      	bne.n	8008e62 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	68da      	ldr	r2, [r3, #12]
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f022 0220 	bic.w	r2, r2, #32
 8008dba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	68da      	ldr	r2, [r3, #12]
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008dca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	695a      	ldr	r2, [r3, #20]
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f022 0201 	bic.w	r2, r2, #1
 8008dda:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2220      	movs	r2, #32
 8008de0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008de8:	2b01      	cmp	r3, #1
 8008dea:	d135      	bne.n	8008e58 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2200      	movs	r2, #0
 8008df0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	330c      	adds	r3, #12
 8008df8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dfa:	697b      	ldr	r3, [r7, #20]
 8008dfc:	e853 3f00 	ldrex	r3, [r3]
 8008e00:	613b      	str	r3, [r7, #16]
   return(result);
 8008e02:	693b      	ldr	r3, [r7, #16]
 8008e04:	f023 0310 	bic.w	r3, r3, #16
 8008e08:	627b      	str	r3, [r7, #36]	; 0x24
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	330c      	adds	r3, #12
 8008e10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e12:	623a      	str	r2, [r7, #32]
 8008e14:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e16:	69f9      	ldr	r1, [r7, #28]
 8008e18:	6a3a      	ldr	r2, [r7, #32]
 8008e1a:	e841 2300 	strex	r3, r2, [r1]
 8008e1e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008e20:	69bb      	ldr	r3, [r7, #24]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d1e5      	bne.n	8008df2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	f003 0310 	and.w	r3, r3, #16
 8008e30:	2b10      	cmp	r3, #16
 8008e32:	d10a      	bne.n	8008e4a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008e34:	2300      	movs	r3, #0
 8008e36:	60fb      	str	r3, [r7, #12]
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	60fb      	str	r3, [r7, #12]
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	685b      	ldr	r3, [r3, #4]
 8008e46:	60fb      	str	r3, [r7, #12]
 8008e48:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008e4e:	4619      	mov	r1, r3
 8008e50:	6878      	ldr	r0, [r7, #4]
 8008e52:	f7ff fc3b 	bl	80086cc <HAL_UARTEx_RxEventCallback>
 8008e56:	e002      	b.n	8008e5e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008e58:	6878      	ldr	r0, [r7, #4]
 8008e5a:	f7f9 f8bf 	bl	8001fdc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008e5e:	2300      	movs	r3, #0
 8008e60:	e002      	b.n	8008e68 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008e62:	2300      	movs	r3, #0
 8008e64:	e000      	b.n	8008e68 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008e66:	2302      	movs	r3, #2
  }
}
 8008e68:	4618      	mov	r0, r3
 8008e6a:	3730      	adds	r7, #48	; 0x30
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	bd80      	pop	{r7, pc}

08008e70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008e70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008e74:	b0c0      	sub	sp, #256	; 0x100
 8008e76:	af00      	add	r7, sp, #0
 8008e78:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	691b      	ldr	r3, [r3, #16]
 8008e84:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e8c:	68d9      	ldr	r1, [r3, #12]
 8008e8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e92:	681a      	ldr	r2, [r3, #0]
 8008e94:	ea40 0301 	orr.w	r3, r0, r1
 8008e98:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008e9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e9e:	689a      	ldr	r2, [r3, #8]
 8008ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ea4:	691b      	ldr	r3, [r3, #16]
 8008ea6:	431a      	orrs	r2, r3
 8008ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008eac:	695b      	ldr	r3, [r3, #20]
 8008eae:	431a      	orrs	r2, r3
 8008eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008eb4:	69db      	ldr	r3, [r3, #28]
 8008eb6:	4313      	orrs	r3, r2
 8008eb8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	68db      	ldr	r3, [r3, #12]
 8008ec4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008ec8:	f021 010c 	bic.w	r1, r1, #12
 8008ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ed0:	681a      	ldr	r2, [r3, #0]
 8008ed2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008ed6:	430b      	orrs	r3, r1
 8008ed8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008eda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	695b      	ldr	r3, [r3, #20]
 8008ee2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008ee6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008eea:	6999      	ldr	r1, [r3, #24]
 8008eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ef0:	681a      	ldr	r2, [r3, #0]
 8008ef2:	ea40 0301 	orr.w	r3, r0, r1
 8008ef6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008efc:	681a      	ldr	r2, [r3, #0]
 8008efe:	4b8f      	ldr	r3, [pc, #572]	; (800913c <UART_SetConfig+0x2cc>)
 8008f00:	429a      	cmp	r2, r3
 8008f02:	d005      	beq.n	8008f10 <UART_SetConfig+0xa0>
 8008f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f08:	681a      	ldr	r2, [r3, #0]
 8008f0a:	4b8d      	ldr	r3, [pc, #564]	; (8009140 <UART_SetConfig+0x2d0>)
 8008f0c:	429a      	cmp	r2, r3
 8008f0e:	d104      	bne.n	8008f1a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008f10:	f7fe fa70 	bl	80073f4 <HAL_RCC_GetPCLK2Freq>
 8008f14:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008f18:	e003      	b.n	8008f22 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008f1a:	f7fe fa57 	bl	80073cc <HAL_RCC_GetPCLK1Freq>
 8008f1e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008f22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f26:	69db      	ldr	r3, [r3, #28]
 8008f28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f2c:	f040 810c 	bne.w	8009148 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008f30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f34:	2200      	movs	r2, #0
 8008f36:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008f3a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008f3e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008f42:	4622      	mov	r2, r4
 8008f44:	462b      	mov	r3, r5
 8008f46:	1891      	adds	r1, r2, r2
 8008f48:	65b9      	str	r1, [r7, #88]	; 0x58
 8008f4a:	415b      	adcs	r3, r3
 8008f4c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008f4e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008f52:	4621      	mov	r1, r4
 8008f54:	eb12 0801 	adds.w	r8, r2, r1
 8008f58:	4629      	mov	r1, r5
 8008f5a:	eb43 0901 	adc.w	r9, r3, r1
 8008f5e:	f04f 0200 	mov.w	r2, #0
 8008f62:	f04f 0300 	mov.w	r3, #0
 8008f66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008f6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008f6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008f72:	4690      	mov	r8, r2
 8008f74:	4699      	mov	r9, r3
 8008f76:	4623      	mov	r3, r4
 8008f78:	eb18 0303 	adds.w	r3, r8, r3
 8008f7c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008f80:	462b      	mov	r3, r5
 8008f82:	eb49 0303 	adc.w	r3, r9, r3
 8008f86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008f8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f8e:	685b      	ldr	r3, [r3, #4]
 8008f90:	2200      	movs	r2, #0
 8008f92:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008f96:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008f9a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008f9e:	460b      	mov	r3, r1
 8008fa0:	18db      	adds	r3, r3, r3
 8008fa2:	653b      	str	r3, [r7, #80]	; 0x50
 8008fa4:	4613      	mov	r3, r2
 8008fa6:	eb42 0303 	adc.w	r3, r2, r3
 8008faa:	657b      	str	r3, [r7, #84]	; 0x54
 8008fac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008fb0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008fb4:	f7f7 fe70 	bl	8000c98 <__aeabi_uldivmod>
 8008fb8:	4602      	mov	r2, r0
 8008fba:	460b      	mov	r3, r1
 8008fbc:	4b61      	ldr	r3, [pc, #388]	; (8009144 <UART_SetConfig+0x2d4>)
 8008fbe:	fba3 2302 	umull	r2, r3, r3, r2
 8008fc2:	095b      	lsrs	r3, r3, #5
 8008fc4:	011c      	lsls	r4, r3, #4
 8008fc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008fca:	2200      	movs	r2, #0
 8008fcc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008fd0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008fd4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008fd8:	4642      	mov	r2, r8
 8008fda:	464b      	mov	r3, r9
 8008fdc:	1891      	adds	r1, r2, r2
 8008fde:	64b9      	str	r1, [r7, #72]	; 0x48
 8008fe0:	415b      	adcs	r3, r3
 8008fe2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008fe4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008fe8:	4641      	mov	r1, r8
 8008fea:	eb12 0a01 	adds.w	sl, r2, r1
 8008fee:	4649      	mov	r1, r9
 8008ff0:	eb43 0b01 	adc.w	fp, r3, r1
 8008ff4:	f04f 0200 	mov.w	r2, #0
 8008ff8:	f04f 0300 	mov.w	r3, #0
 8008ffc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009000:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009004:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009008:	4692      	mov	sl, r2
 800900a:	469b      	mov	fp, r3
 800900c:	4643      	mov	r3, r8
 800900e:	eb1a 0303 	adds.w	r3, sl, r3
 8009012:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009016:	464b      	mov	r3, r9
 8009018:	eb4b 0303 	adc.w	r3, fp, r3
 800901c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009024:	685b      	ldr	r3, [r3, #4]
 8009026:	2200      	movs	r2, #0
 8009028:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800902c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009030:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009034:	460b      	mov	r3, r1
 8009036:	18db      	adds	r3, r3, r3
 8009038:	643b      	str	r3, [r7, #64]	; 0x40
 800903a:	4613      	mov	r3, r2
 800903c:	eb42 0303 	adc.w	r3, r2, r3
 8009040:	647b      	str	r3, [r7, #68]	; 0x44
 8009042:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009046:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800904a:	f7f7 fe25 	bl	8000c98 <__aeabi_uldivmod>
 800904e:	4602      	mov	r2, r0
 8009050:	460b      	mov	r3, r1
 8009052:	4611      	mov	r1, r2
 8009054:	4b3b      	ldr	r3, [pc, #236]	; (8009144 <UART_SetConfig+0x2d4>)
 8009056:	fba3 2301 	umull	r2, r3, r3, r1
 800905a:	095b      	lsrs	r3, r3, #5
 800905c:	2264      	movs	r2, #100	; 0x64
 800905e:	fb02 f303 	mul.w	r3, r2, r3
 8009062:	1acb      	subs	r3, r1, r3
 8009064:	00db      	lsls	r3, r3, #3
 8009066:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800906a:	4b36      	ldr	r3, [pc, #216]	; (8009144 <UART_SetConfig+0x2d4>)
 800906c:	fba3 2302 	umull	r2, r3, r3, r2
 8009070:	095b      	lsrs	r3, r3, #5
 8009072:	005b      	lsls	r3, r3, #1
 8009074:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009078:	441c      	add	r4, r3
 800907a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800907e:	2200      	movs	r2, #0
 8009080:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009084:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009088:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800908c:	4642      	mov	r2, r8
 800908e:	464b      	mov	r3, r9
 8009090:	1891      	adds	r1, r2, r2
 8009092:	63b9      	str	r1, [r7, #56]	; 0x38
 8009094:	415b      	adcs	r3, r3
 8009096:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009098:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800909c:	4641      	mov	r1, r8
 800909e:	1851      	adds	r1, r2, r1
 80090a0:	6339      	str	r1, [r7, #48]	; 0x30
 80090a2:	4649      	mov	r1, r9
 80090a4:	414b      	adcs	r3, r1
 80090a6:	637b      	str	r3, [r7, #52]	; 0x34
 80090a8:	f04f 0200 	mov.w	r2, #0
 80090ac:	f04f 0300 	mov.w	r3, #0
 80090b0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80090b4:	4659      	mov	r1, fp
 80090b6:	00cb      	lsls	r3, r1, #3
 80090b8:	4651      	mov	r1, sl
 80090ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80090be:	4651      	mov	r1, sl
 80090c0:	00ca      	lsls	r2, r1, #3
 80090c2:	4610      	mov	r0, r2
 80090c4:	4619      	mov	r1, r3
 80090c6:	4603      	mov	r3, r0
 80090c8:	4642      	mov	r2, r8
 80090ca:	189b      	adds	r3, r3, r2
 80090cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80090d0:	464b      	mov	r3, r9
 80090d2:	460a      	mov	r2, r1
 80090d4:	eb42 0303 	adc.w	r3, r2, r3
 80090d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80090dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090e0:	685b      	ldr	r3, [r3, #4]
 80090e2:	2200      	movs	r2, #0
 80090e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80090e8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80090ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80090f0:	460b      	mov	r3, r1
 80090f2:	18db      	adds	r3, r3, r3
 80090f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80090f6:	4613      	mov	r3, r2
 80090f8:	eb42 0303 	adc.w	r3, r2, r3
 80090fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80090fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009102:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009106:	f7f7 fdc7 	bl	8000c98 <__aeabi_uldivmod>
 800910a:	4602      	mov	r2, r0
 800910c:	460b      	mov	r3, r1
 800910e:	4b0d      	ldr	r3, [pc, #52]	; (8009144 <UART_SetConfig+0x2d4>)
 8009110:	fba3 1302 	umull	r1, r3, r3, r2
 8009114:	095b      	lsrs	r3, r3, #5
 8009116:	2164      	movs	r1, #100	; 0x64
 8009118:	fb01 f303 	mul.w	r3, r1, r3
 800911c:	1ad3      	subs	r3, r2, r3
 800911e:	00db      	lsls	r3, r3, #3
 8009120:	3332      	adds	r3, #50	; 0x32
 8009122:	4a08      	ldr	r2, [pc, #32]	; (8009144 <UART_SetConfig+0x2d4>)
 8009124:	fba2 2303 	umull	r2, r3, r2, r3
 8009128:	095b      	lsrs	r3, r3, #5
 800912a:	f003 0207 	and.w	r2, r3, #7
 800912e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	4422      	add	r2, r4
 8009136:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009138:	e105      	b.n	8009346 <UART_SetConfig+0x4d6>
 800913a:	bf00      	nop
 800913c:	40011000 	.word	0x40011000
 8009140:	40011400 	.word	0x40011400
 8009144:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009148:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800914c:	2200      	movs	r2, #0
 800914e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009152:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009156:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800915a:	4642      	mov	r2, r8
 800915c:	464b      	mov	r3, r9
 800915e:	1891      	adds	r1, r2, r2
 8009160:	6239      	str	r1, [r7, #32]
 8009162:	415b      	adcs	r3, r3
 8009164:	627b      	str	r3, [r7, #36]	; 0x24
 8009166:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800916a:	4641      	mov	r1, r8
 800916c:	1854      	adds	r4, r2, r1
 800916e:	4649      	mov	r1, r9
 8009170:	eb43 0501 	adc.w	r5, r3, r1
 8009174:	f04f 0200 	mov.w	r2, #0
 8009178:	f04f 0300 	mov.w	r3, #0
 800917c:	00eb      	lsls	r3, r5, #3
 800917e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009182:	00e2      	lsls	r2, r4, #3
 8009184:	4614      	mov	r4, r2
 8009186:	461d      	mov	r5, r3
 8009188:	4643      	mov	r3, r8
 800918a:	18e3      	adds	r3, r4, r3
 800918c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009190:	464b      	mov	r3, r9
 8009192:	eb45 0303 	adc.w	r3, r5, r3
 8009196:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800919a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800919e:	685b      	ldr	r3, [r3, #4]
 80091a0:	2200      	movs	r2, #0
 80091a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80091a6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80091aa:	f04f 0200 	mov.w	r2, #0
 80091ae:	f04f 0300 	mov.w	r3, #0
 80091b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80091b6:	4629      	mov	r1, r5
 80091b8:	008b      	lsls	r3, r1, #2
 80091ba:	4621      	mov	r1, r4
 80091bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80091c0:	4621      	mov	r1, r4
 80091c2:	008a      	lsls	r2, r1, #2
 80091c4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80091c8:	f7f7 fd66 	bl	8000c98 <__aeabi_uldivmod>
 80091cc:	4602      	mov	r2, r0
 80091ce:	460b      	mov	r3, r1
 80091d0:	4b60      	ldr	r3, [pc, #384]	; (8009354 <UART_SetConfig+0x4e4>)
 80091d2:	fba3 2302 	umull	r2, r3, r3, r2
 80091d6:	095b      	lsrs	r3, r3, #5
 80091d8:	011c      	lsls	r4, r3, #4
 80091da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80091de:	2200      	movs	r2, #0
 80091e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80091e4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80091e8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80091ec:	4642      	mov	r2, r8
 80091ee:	464b      	mov	r3, r9
 80091f0:	1891      	adds	r1, r2, r2
 80091f2:	61b9      	str	r1, [r7, #24]
 80091f4:	415b      	adcs	r3, r3
 80091f6:	61fb      	str	r3, [r7, #28]
 80091f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80091fc:	4641      	mov	r1, r8
 80091fe:	1851      	adds	r1, r2, r1
 8009200:	6139      	str	r1, [r7, #16]
 8009202:	4649      	mov	r1, r9
 8009204:	414b      	adcs	r3, r1
 8009206:	617b      	str	r3, [r7, #20]
 8009208:	f04f 0200 	mov.w	r2, #0
 800920c:	f04f 0300 	mov.w	r3, #0
 8009210:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009214:	4659      	mov	r1, fp
 8009216:	00cb      	lsls	r3, r1, #3
 8009218:	4651      	mov	r1, sl
 800921a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800921e:	4651      	mov	r1, sl
 8009220:	00ca      	lsls	r2, r1, #3
 8009222:	4610      	mov	r0, r2
 8009224:	4619      	mov	r1, r3
 8009226:	4603      	mov	r3, r0
 8009228:	4642      	mov	r2, r8
 800922a:	189b      	adds	r3, r3, r2
 800922c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009230:	464b      	mov	r3, r9
 8009232:	460a      	mov	r2, r1
 8009234:	eb42 0303 	adc.w	r3, r2, r3
 8009238:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800923c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009240:	685b      	ldr	r3, [r3, #4]
 8009242:	2200      	movs	r2, #0
 8009244:	67bb      	str	r3, [r7, #120]	; 0x78
 8009246:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009248:	f04f 0200 	mov.w	r2, #0
 800924c:	f04f 0300 	mov.w	r3, #0
 8009250:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009254:	4649      	mov	r1, r9
 8009256:	008b      	lsls	r3, r1, #2
 8009258:	4641      	mov	r1, r8
 800925a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800925e:	4641      	mov	r1, r8
 8009260:	008a      	lsls	r2, r1, #2
 8009262:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009266:	f7f7 fd17 	bl	8000c98 <__aeabi_uldivmod>
 800926a:	4602      	mov	r2, r0
 800926c:	460b      	mov	r3, r1
 800926e:	4b39      	ldr	r3, [pc, #228]	; (8009354 <UART_SetConfig+0x4e4>)
 8009270:	fba3 1302 	umull	r1, r3, r3, r2
 8009274:	095b      	lsrs	r3, r3, #5
 8009276:	2164      	movs	r1, #100	; 0x64
 8009278:	fb01 f303 	mul.w	r3, r1, r3
 800927c:	1ad3      	subs	r3, r2, r3
 800927e:	011b      	lsls	r3, r3, #4
 8009280:	3332      	adds	r3, #50	; 0x32
 8009282:	4a34      	ldr	r2, [pc, #208]	; (8009354 <UART_SetConfig+0x4e4>)
 8009284:	fba2 2303 	umull	r2, r3, r2, r3
 8009288:	095b      	lsrs	r3, r3, #5
 800928a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800928e:	441c      	add	r4, r3
 8009290:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009294:	2200      	movs	r2, #0
 8009296:	673b      	str	r3, [r7, #112]	; 0x70
 8009298:	677a      	str	r2, [r7, #116]	; 0x74
 800929a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800929e:	4642      	mov	r2, r8
 80092a0:	464b      	mov	r3, r9
 80092a2:	1891      	adds	r1, r2, r2
 80092a4:	60b9      	str	r1, [r7, #8]
 80092a6:	415b      	adcs	r3, r3
 80092a8:	60fb      	str	r3, [r7, #12]
 80092aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80092ae:	4641      	mov	r1, r8
 80092b0:	1851      	adds	r1, r2, r1
 80092b2:	6039      	str	r1, [r7, #0]
 80092b4:	4649      	mov	r1, r9
 80092b6:	414b      	adcs	r3, r1
 80092b8:	607b      	str	r3, [r7, #4]
 80092ba:	f04f 0200 	mov.w	r2, #0
 80092be:	f04f 0300 	mov.w	r3, #0
 80092c2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80092c6:	4659      	mov	r1, fp
 80092c8:	00cb      	lsls	r3, r1, #3
 80092ca:	4651      	mov	r1, sl
 80092cc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80092d0:	4651      	mov	r1, sl
 80092d2:	00ca      	lsls	r2, r1, #3
 80092d4:	4610      	mov	r0, r2
 80092d6:	4619      	mov	r1, r3
 80092d8:	4603      	mov	r3, r0
 80092da:	4642      	mov	r2, r8
 80092dc:	189b      	adds	r3, r3, r2
 80092de:	66bb      	str	r3, [r7, #104]	; 0x68
 80092e0:	464b      	mov	r3, r9
 80092e2:	460a      	mov	r2, r1
 80092e4:	eb42 0303 	adc.w	r3, r2, r3
 80092e8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80092ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092ee:	685b      	ldr	r3, [r3, #4]
 80092f0:	2200      	movs	r2, #0
 80092f2:	663b      	str	r3, [r7, #96]	; 0x60
 80092f4:	667a      	str	r2, [r7, #100]	; 0x64
 80092f6:	f04f 0200 	mov.w	r2, #0
 80092fa:	f04f 0300 	mov.w	r3, #0
 80092fe:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009302:	4649      	mov	r1, r9
 8009304:	008b      	lsls	r3, r1, #2
 8009306:	4641      	mov	r1, r8
 8009308:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800930c:	4641      	mov	r1, r8
 800930e:	008a      	lsls	r2, r1, #2
 8009310:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009314:	f7f7 fcc0 	bl	8000c98 <__aeabi_uldivmod>
 8009318:	4602      	mov	r2, r0
 800931a:	460b      	mov	r3, r1
 800931c:	4b0d      	ldr	r3, [pc, #52]	; (8009354 <UART_SetConfig+0x4e4>)
 800931e:	fba3 1302 	umull	r1, r3, r3, r2
 8009322:	095b      	lsrs	r3, r3, #5
 8009324:	2164      	movs	r1, #100	; 0x64
 8009326:	fb01 f303 	mul.w	r3, r1, r3
 800932a:	1ad3      	subs	r3, r2, r3
 800932c:	011b      	lsls	r3, r3, #4
 800932e:	3332      	adds	r3, #50	; 0x32
 8009330:	4a08      	ldr	r2, [pc, #32]	; (8009354 <UART_SetConfig+0x4e4>)
 8009332:	fba2 2303 	umull	r2, r3, r2, r3
 8009336:	095b      	lsrs	r3, r3, #5
 8009338:	f003 020f 	and.w	r2, r3, #15
 800933c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	4422      	add	r2, r4
 8009344:	609a      	str	r2, [r3, #8]
}
 8009346:	bf00      	nop
 8009348:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800934c:	46bd      	mov	sp, r7
 800934e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009352:	bf00      	nop
 8009354:	51eb851f 	.word	0x51eb851f

08009358 <__errno>:
 8009358:	4b01      	ldr	r3, [pc, #4]	; (8009360 <__errno+0x8>)
 800935a:	6818      	ldr	r0, [r3, #0]
 800935c:	4770      	bx	lr
 800935e:	bf00      	nop
 8009360:	20000024 	.word	0x20000024

08009364 <__libc_init_array>:
 8009364:	b570      	push	{r4, r5, r6, lr}
 8009366:	4d0d      	ldr	r5, [pc, #52]	; (800939c <__libc_init_array+0x38>)
 8009368:	4c0d      	ldr	r4, [pc, #52]	; (80093a0 <__libc_init_array+0x3c>)
 800936a:	1b64      	subs	r4, r4, r5
 800936c:	10a4      	asrs	r4, r4, #2
 800936e:	2600      	movs	r6, #0
 8009370:	42a6      	cmp	r6, r4
 8009372:	d109      	bne.n	8009388 <__libc_init_array+0x24>
 8009374:	4d0b      	ldr	r5, [pc, #44]	; (80093a4 <__libc_init_array+0x40>)
 8009376:	4c0c      	ldr	r4, [pc, #48]	; (80093a8 <__libc_init_array+0x44>)
 8009378:	f002 ff76 	bl	800c268 <_init>
 800937c:	1b64      	subs	r4, r4, r5
 800937e:	10a4      	asrs	r4, r4, #2
 8009380:	2600      	movs	r6, #0
 8009382:	42a6      	cmp	r6, r4
 8009384:	d105      	bne.n	8009392 <__libc_init_array+0x2e>
 8009386:	bd70      	pop	{r4, r5, r6, pc}
 8009388:	f855 3b04 	ldr.w	r3, [r5], #4
 800938c:	4798      	blx	r3
 800938e:	3601      	adds	r6, #1
 8009390:	e7ee      	b.n	8009370 <__libc_init_array+0xc>
 8009392:	f855 3b04 	ldr.w	r3, [r5], #4
 8009396:	4798      	blx	r3
 8009398:	3601      	adds	r6, #1
 800939a:	e7f2      	b.n	8009382 <__libc_init_array+0x1e>
 800939c:	08015684 	.word	0x08015684
 80093a0:	08015684 	.word	0x08015684
 80093a4:	08015684 	.word	0x08015684
 80093a8:	08015688 	.word	0x08015688

080093ac <memset>:
 80093ac:	4402      	add	r2, r0
 80093ae:	4603      	mov	r3, r0
 80093b0:	4293      	cmp	r3, r2
 80093b2:	d100      	bne.n	80093b6 <memset+0xa>
 80093b4:	4770      	bx	lr
 80093b6:	f803 1b01 	strb.w	r1, [r3], #1
 80093ba:	e7f9      	b.n	80093b0 <memset+0x4>

080093bc <__cvt>:
 80093bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80093c0:	ec55 4b10 	vmov	r4, r5, d0
 80093c4:	2d00      	cmp	r5, #0
 80093c6:	460e      	mov	r6, r1
 80093c8:	4619      	mov	r1, r3
 80093ca:	462b      	mov	r3, r5
 80093cc:	bfbb      	ittet	lt
 80093ce:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80093d2:	461d      	movlt	r5, r3
 80093d4:	2300      	movge	r3, #0
 80093d6:	232d      	movlt	r3, #45	; 0x2d
 80093d8:	700b      	strb	r3, [r1, #0]
 80093da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80093dc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80093e0:	4691      	mov	r9, r2
 80093e2:	f023 0820 	bic.w	r8, r3, #32
 80093e6:	bfbc      	itt	lt
 80093e8:	4622      	movlt	r2, r4
 80093ea:	4614      	movlt	r4, r2
 80093ec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80093f0:	d005      	beq.n	80093fe <__cvt+0x42>
 80093f2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80093f6:	d100      	bne.n	80093fa <__cvt+0x3e>
 80093f8:	3601      	adds	r6, #1
 80093fa:	2102      	movs	r1, #2
 80093fc:	e000      	b.n	8009400 <__cvt+0x44>
 80093fe:	2103      	movs	r1, #3
 8009400:	ab03      	add	r3, sp, #12
 8009402:	9301      	str	r3, [sp, #4]
 8009404:	ab02      	add	r3, sp, #8
 8009406:	9300      	str	r3, [sp, #0]
 8009408:	ec45 4b10 	vmov	d0, r4, r5
 800940c:	4653      	mov	r3, sl
 800940e:	4632      	mov	r2, r6
 8009410:	f000 fcea 	bl	8009de8 <_dtoa_r>
 8009414:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009418:	4607      	mov	r7, r0
 800941a:	d102      	bne.n	8009422 <__cvt+0x66>
 800941c:	f019 0f01 	tst.w	r9, #1
 8009420:	d022      	beq.n	8009468 <__cvt+0xac>
 8009422:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009426:	eb07 0906 	add.w	r9, r7, r6
 800942a:	d110      	bne.n	800944e <__cvt+0x92>
 800942c:	783b      	ldrb	r3, [r7, #0]
 800942e:	2b30      	cmp	r3, #48	; 0x30
 8009430:	d10a      	bne.n	8009448 <__cvt+0x8c>
 8009432:	2200      	movs	r2, #0
 8009434:	2300      	movs	r3, #0
 8009436:	4620      	mov	r0, r4
 8009438:	4629      	mov	r1, r5
 800943a:	f7f7 fb4d 	bl	8000ad8 <__aeabi_dcmpeq>
 800943e:	b918      	cbnz	r0, 8009448 <__cvt+0x8c>
 8009440:	f1c6 0601 	rsb	r6, r6, #1
 8009444:	f8ca 6000 	str.w	r6, [sl]
 8009448:	f8da 3000 	ldr.w	r3, [sl]
 800944c:	4499      	add	r9, r3
 800944e:	2200      	movs	r2, #0
 8009450:	2300      	movs	r3, #0
 8009452:	4620      	mov	r0, r4
 8009454:	4629      	mov	r1, r5
 8009456:	f7f7 fb3f 	bl	8000ad8 <__aeabi_dcmpeq>
 800945a:	b108      	cbz	r0, 8009460 <__cvt+0xa4>
 800945c:	f8cd 900c 	str.w	r9, [sp, #12]
 8009460:	2230      	movs	r2, #48	; 0x30
 8009462:	9b03      	ldr	r3, [sp, #12]
 8009464:	454b      	cmp	r3, r9
 8009466:	d307      	bcc.n	8009478 <__cvt+0xbc>
 8009468:	9b03      	ldr	r3, [sp, #12]
 800946a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800946c:	1bdb      	subs	r3, r3, r7
 800946e:	4638      	mov	r0, r7
 8009470:	6013      	str	r3, [r2, #0]
 8009472:	b004      	add	sp, #16
 8009474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009478:	1c59      	adds	r1, r3, #1
 800947a:	9103      	str	r1, [sp, #12]
 800947c:	701a      	strb	r2, [r3, #0]
 800947e:	e7f0      	b.n	8009462 <__cvt+0xa6>

08009480 <__exponent>:
 8009480:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009482:	4603      	mov	r3, r0
 8009484:	2900      	cmp	r1, #0
 8009486:	bfb8      	it	lt
 8009488:	4249      	neglt	r1, r1
 800948a:	f803 2b02 	strb.w	r2, [r3], #2
 800948e:	bfb4      	ite	lt
 8009490:	222d      	movlt	r2, #45	; 0x2d
 8009492:	222b      	movge	r2, #43	; 0x2b
 8009494:	2909      	cmp	r1, #9
 8009496:	7042      	strb	r2, [r0, #1]
 8009498:	dd2a      	ble.n	80094f0 <__exponent+0x70>
 800949a:	f10d 0407 	add.w	r4, sp, #7
 800949e:	46a4      	mov	ip, r4
 80094a0:	270a      	movs	r7, #10
 80094a2:	46a6      	mov	lr, r4
 80094a4:	460a      	mov	r2, r1
 80094a6:	fb91 f6f7 	sdiv	r6, r1, r7
 80094aa:	fb07 1516 	mls	r5, r7, r6, r1
 80094ae:	3530      	adds	r5, #48	; 0x30
 80094b0:	2a63      	cmp	r2, #99	; 0x63
 80094b2:	f104 34ff 	add.w	r4, r4, #4294967295
 80094b6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80094ba:	4631      	mov	r1, r6
 80094bc:	dcf1      	bgt.n	80094a2 <__exponent+0x22>
 80094be:	3130      	adds	r1, #48	; 0x30
 80094c0:	f1ae 0502 	sub.w	r5, lr, #2
 80094c4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80094c8:	1c44      	adds	r4, r0, #1
 80094ca:	4629      	mov	r1, r5
 80094cc:	4561      	cmp	r1, ip
 80094ce:	d30a      	bcc.n	80094e6 <__exponent+0x66>
 80094d0:	f10d 0209 	add.w	r2, sp, #9
 80094d4:	eba2 020e 	sub.w	r2, r2, lr
 80094d8:	4565      	cmp	r5, ip
 80094da:	bf88      	it	hi
 80094dc:	2200      	movhi	r2, #0
 80094de:	4413      	add	r3, r2
 80094e0:	1a18      	subs	r0, r3, r0
 80094e2:	b003      	add	sp, #12
 80094e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80094e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80094ea:	f804 2f01 	strb.w	r2, [r4, #1]!
 80094ee:	e7ed      	b.n	80094cc <__exponent+0x4c>
 80094f0:	2330      	movs	r3, #48	; 0x30
 80094f2:	3130      	adds	r1, #48	; 0x30
 80094f4:	7083      	strb	r3, [r0, #2]
 80094f6:	70c1      	strb	r1, [r0, #3]
 80094f8:	1d03      	adds	r3, r0, #4
 80094fa:	e7f1      	b.n	80094e0 <__exponent+0x60>

080094fc <_printf_float>:
 80094fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009500:	ed2d 8b02 	vpush	{d8}
 8009504:	b08d      	sub	sp, #52	; 0x34
 8009506:	460c      	mov	r4, r1
 8009508:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800950c:	4616      	mov	r6, r2
 800950e:	461f      	mov	r7, r3
 8009510:	4605      	mov	r5, r0
 8009512:	f001 fa57 	bl	800a9c4 <_localeconv_r>
 8009516:	f8d0 a000 	ldr.w	sl, [r0]
 800951a:	4650      	mov	r0, sl
 800951c:	f7f6 fe60 	bl	80001e0 <strlen>
 8009520:	2300      	movs	r3, #0
 8009522:	930a      	str	r3, [sp, #40]	; 0x28
 8009524:	6823      	ldr	r3, [r4, #0]
 8009526:	9305      	str	r3, [sp, #20]
 8009528:	f8d8 3000 	ldr.w	r3, [r8]
 800952c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009530:	3307      	adds	r3, #7
 8009532:	f023 0307 	bic.w	r3, r3, #7
 8009536:	f103 0208 	add.w	r2, r3, #8
 800953a:	f8c8 2000 	str.w	r2, [r8]
 800953e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009542:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009546:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800954a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800954e:	9307      	str	r3, [sp, #28]
 8009550:	f8cd 8018 	str.w	r8, [sp, #24]
 8009554:	ee08 0a10 	vmov	s16, r0
 8009558:	4b9f      	ldr	r3, [pc, #636]	; (80097d8 <_printf_float+0x2dc>)
 800955a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800955e:	f04f 32ff 	mov.w	r2, #4294967295
 8009562:	f7f7 faeb 	bl	8000b3c <__aeabi_dcmpun>
 8009566:	bb88      	cbnz	r0, 80095cc <_printf_float+0xd0>
 8009568:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800956c:	4b9a      	ldr	r3, [pc, #616]	; (80097d8 <_printf_float+0x2dc>)
 800956e:	f04f 32ff 	mov.w	r2, #4294967295
 8009572:	f7f7 fac5 	bl	8000b00 <__aeabi_dcmple>
 8009576:	bb48      	cbnz	r0, 80095cc <_printf_float+0xd0>
 8009578:	2200      	movs	r2, #0
 800957a:	2300      	movs	r3, #0
 800957c:	4640      	mov	r0, r8
 800957e:	4649      	mov	r1, r9
 8009580:	f7f7 fab4 	bl	8000aec <__aeabi_dcmplt>
 8009584:	b110      	cbz	r0, 800958c <_printf_float+0x90>
 8009586:	232d      	movs	r3, #45	; 0x2d
 8009588:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800958c:	4b93      	ldr	r3, [pc, #588]	; (80097dc <_printf_float+0x2e0>)
 800958e:	4894      	ldr	r0, [pc, #592]	; (80097e0 <_printf_float+0x2e4>)
 8009590:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009594:	bf94      	ite	ls
 8009596:	4698      	movls	r8, r3
 8009598:	4680      	movhi	r8, r0
 800959a:	2303      	movs	r3, #3
 800959c:	6123      	str	r3, [r4, #16]
 800959e:	9b05      	ldr	r3, [sp, #20]
 80095a0:	f023 0204 	bic.w	r2, r3, #4
 80095a4:	6022      	str	r2, [r4, #0]
 80095a6:	f04f 0900 	mov.w	r9, #0
 80095aa:	9700      	str	r7, [sp, #0]
 80095ac:	4633      	mov	r3, r6
 80095ae:	aa0b      	add	r2, sp, #44	; 0x2c
 80095b0:	4621      	mov	r1, r4
 80095b2:	4628      	mov	r0, r5
 80095b4:	f000 f9d8 	bl	8009968 <_printf_common>
 80095b8:	3001      	adds	r0, #1
 80095ba:	f040 8090 	bne.w	80096de <_printf_float+0x1e2>
 80095be:	f04f 30ff 	mov.w	r0, #4294967295
 80095c2:	b00d      	add	sp, #52	; 0x34
 80095c4:	ecbd 8b02 	vpop	{d8}
 80095c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095cc:	4642      	mov	r2, r8
 80095ce:	464b      	mov	r3, r9
 80095d0:	4640      	mov	r0, r8
 80095d2:	4649      	mov	r1, r9
 80095d4:	f7f7 fab2 	bl	8000b3c <__aeabi_dcmpun>
 80095d8:	b140      	cbz	r0, 80095ec <_printf_float+0xf0>
 80095da:	464b      	mov	r3, r9
 80095dc:	2b00      	cmp	r3, #0
 80095de:	bfbc      	itt	lt
 80095e0:	232d      	movlt	r3, #45	; 0x2d
 80095e2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80095e6:	487f      	ldr	r0, [pc, #508]	; (80097e4 <_printf_float+0x2e8>)
 80095e8:	4b7f      	ldr	r3, [pc, #508]	; (80097e8 <_printf_float+0x2ec>)
 80095ea:	e7d1      	b.n	8009590 <_printf_float+0x94>
 80095ec:	6863      	ldr	r3, [r4, #4]
 80095ee:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80095f2:	9206      	str	r2, [sp, #24]
 80095f4:	1c5a      	adds	r2, r3, #1
 80095f6:	d13f      	bne.n	8009678 <_printf_float+0x17c>
 80095f8:	2306      	movs	r3, #6
 80095fa:	6063      	str	r3, [r4, #4]
 80095fc:	9b05      	ldr	r3, [sp, #20]
 80095fe:	6861      	ldr	r1, [r4, #4]
 8009600:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009604:	2300      	movs	r3, #0
 8009606:	9303      	str	r3, [sp, #12]
 8009608:	ab0a      	add	r3, sp, #40	; 0x28
 800960a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800960e:	ab09      	add	r3, sp, #36	; 0x24
 8009610:	ec49 8b10 	vmov	d0, r8, r9
 8009614:	9300      	str	r3, [sp, #0]
 8009616:	6022      	str	r2, [r4, #0]
 8009618:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800961c:	4628      	mov	r0, r5
 800961e:	f7ff fecd 	bl	80093bc <__cvt>
 8009622:	9b06      	ldr	r3, [sp, #24]
 8009624:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009626:	2b47      	cmp	r3, #71	; 0x47
 8009628:	4680      	mov	r8, r0
 800962a:	d108      	bne.n	800963e <_printf_float+0x142>
 800962c:	1cc8      	adds	r0, r1, #3
 800962e:	db02      	blt.n	8009636 <_printf_float+0x13a>
 8009630:	6863      	ldr	r3, [r4, #4]
 8009632:	4299      	cmp	r1, r3
 8009634:	dd41      	ble.n	80096ba <_printf_float+0x1be>
 8009636:	f1ab 0b02 	sub.w	fp, fp, #2
 800963a:	fa5f fb8b 	uxtb.w	fp, fp
 800963e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009642:	d820      	bhi.n	8009686 <_printf_float+0x18a>
 8009644:	3901      	subs	r1, #1
 8009646:	465a      	mov	r2, fp
 8009648:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800964c:	9109      	str	r1, [sp, #36]	; 0x24
 800964e:	f7ff ff17 	bl	8009480 <__exponent>
 8009652:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009654:	1813      	adds	r3, r2, r0
 8009656:	2a01      	cmp	r2, #1
 8009658:	4681      	mov	r9, r0
 800965a:	6123      	str	r3, [r4, #16]
 800965c:	dc02      	bgt.n	8009664 <_printf_float+0x168>
 800965e:	6822      	ldr	r2, [r4, #0]
 8009660:	07d2      	lsls	r2, r2, #31
 8009662:	d501      	bpl.n	8009668 <_printf_float+0x16c>
 8009664:	3301      	adds	r3, #1
 8009666:	6123      	str	r3, [r4, #16]
 8009668:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800966c:	2b00      	cmp	r3, #0
 800966e:	d09c      	beq.n	80095aa <_printf_float+0xae>
 8009670:	232d      	movs	r3, #45	; 0x2d
 8009672:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009676:	e798      	b.n	80095aa <_printf_float+0xae>
 8009678:	9a06      	ldr	r2, [sp, #24]
 800967a:	2a47      	cmp	r2, #71	; 0x47
 800967c:	d1be      	bne.n	80095fc <_printf_float+0x100>
 800967e:	2b00      	cmp	r3, #0
 8009680:	d1bc      	bne.n	80095fc <_printf_float+0x100>
 8009682:	2301      	movs	r3, #1
 8009684:	e7b9      	b.n	80095fa <_printf_float+0xfe>
 8009686:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800968a:	d118      	bne.n	80096be <_printf_float+0x1c2>
 800968c:	2900      	cmp	r1, #0
 800968e:	6863      	ldr	r3, [r4, #4]
 8009690:	dd0b      	ble.n	80096aa <_printf_float+0x1ae>
 8009692:	6121      	str	r1, [r4, #16]
 8009694:	b913      	cbnz	r3, 800969c <_printf_float+0x1a0>
 8009696:	6822      	ldr	r2, [r4, #0]
 8009698:	07d0      	lsls	r0, r2, #31
 800969a:	d502      	bpl.n	80096a2 <_printf_float+0x1a6>
 800969c:	3301      	adds	r3, #1
 800969e:	440b      	add	r3, r1
 80096a0:	6123      	str	r3, [r4, #16]
 80096a2:	65a1      	str	r1, [r4, #88]	; 0x58
 80096a4:	f04f 0900 	mov.w	r9, #0
 80096a8:	e7de      	b.n	8009668 <_printf_float+0x16c>
 80096aa:	b913      	cbnz	r3, 80096b2 <_printf_float+0x1b6>
 80096ac:	6822      	ldr	r2, [r4, #0]
 80096ae:	07d2      	lsls	r2, r2, #31
 80096b0:	d501      	bpl.n	80096b6 <_printf_float+0x1ba>
 80096b2:	3302      	adds	r3, #2
 80096b4:	e7f4      	b.n	80096a0 <_printf_float+0x1a4>
 80096b6:	2301      	movs	r3, #1
 80096b8:	e7f2      	b.n	80096a0 <_printf_float+0x1a4>
 80096ba:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80096be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096c0:	4299      	cmp	r1, r3
 80096c2:	db05      	blt.n	80096d0 <_printf_float+0x1d4>
 80096c4:	6823      	ldr	r3, [r4, #0]
 80096c6:	6121      	str	r1, [r4, #16]
 80096c8:	07d8      	lsls	r0, r3, #31
 80096ca:	d5ea      	bpl.n	80096a2 <_printf_float+0x1a6>
 80096cc:	1c4b      	adds	r3, r1, #1
 80096ce:	e7e7      	b.n	80096a0 <_printf_float+0x1a4>
 80096d0:	2900      	cmp	r1, #0
 80096d2:	bfd4      	ite	le
 80096d4:	f1c1 0202 	rsble	r2, r1, #2
 80096d8:	2201      	movgt	r2, #1
 80096da:	4413      	add	r3, r2
 80096dc:	e7e0      	b.n	80096a0 <_printf_float+0x1a4>
 80096de:	6823      	ldr	r3, [r4, #0]
 80096e0:	055a      	lsls	r2, r3, #21
 80096e2:	d407      	bmi.n	80096f4 <_printf_float+0x1f8>
 80096e4:	6923      	ldr	r3, [r4, #16]
 80096e6:	4642      	mov	r2, r8
 80096e8:	4631      	mov	r1, r6
 80096ea:	4628      	mov	r0, r5
 80096ec:	47b8      	blx	r7
 80096ee:	3001      	adds	r0, #1
 80096f0:	d12c      	bne.n	800974c <_printf_float+0x250>
 80096f2:	e764      	b.n	80095be <_printf_float+0xc2>
 80096f4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80096f8:	f240 80e0 	bls.w	80098bc <_printf_float+0x3c0>
 80096fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009700:	2200      	movs	r2, #0
 8009702:	2300      	movs	r3, #0
 8009704:	f7f7 f9e8 	bl	8000ad8 <__aeabi_dcmpeq>
 8009708:	2800      	cmp	r0, #0
 800970a:	d034      	beq.n	8009776 <_printf_float+0x27a>
 800970c:	4a37      	ldr	r2, [pc, #220]	; (80097ec <_printf_float+0x2f0>)
 800970e:	2301      	movs	r3, #1
 8009710:	4631      	mov	r1, r6
 8009712:	4628      	mov	r0, r5
 8009714:	47b8      	blx	r7
 8009716:	3001      	adds	r0, #1
 8009718:	f43f af51 	beq.w	80095be <_printf_float+0xc2>
 800971c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009720:	429a      	cmp	r2, r3
 8009722:	db02      	blt.n	800972a <_printf_float+0x22e>
 8009724:	6823      	ldr	r3, [r4, #0]
 8009726:	07d8      	lsls	r0, r3, #31
 8009728:	d510      	bpl.n	800974c <_printf_float+0x250>
 800972a:	ee18 3a10 	vmov	r3, s16
 800972e:	4652      	mov	r2, sl
 8009730:	4631      	mov	r1, r6
 8009732:	4628      	mov	r0, r5
 8009734:	47b8      	blx	r7
 8009736:	3001      	adds	r0, #1
 8009738:	f43f af41 	beq.w	80095be <_printf_float+0xc2>
 800973c:	f04f 0800 	mov.w	r8, #0
 8009740:	f104 091a 	add.w	r9, r4, #26
 8009744:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009746:	3b01      	subs	r3, #1
 8009748:	4543      	cmp	r3, r8
 800974a:	dc09      	bgt.n	8009760 <_printf_float+0x264>
 800974c:	6823      	ldr	r3, [r4, #0]
 800974e:	079b      	lsls	r3, r3, #30
 8009750:	f100 8105 	bmi.w	800995e <_printf_float+0x462>
 8009754:	68e0      	ldr	r0, [r4, #12]
 8009756:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009758:	4298      	cmp	r0, r3
 800975a:	bfb8      	it	lt
 800975c:	4618      	movlt	r0, r3
 800975e:	e730      	b.n	80095c2 <_printf_float+0xc6>
 8009760:	2301      	movs	r3, #1
 8009762:	464a      	mov	r2, r9
 8009764:	4631      	mov	r1, r6
 8009766:	4628      	mov	r0, r5
 8009768:	47b8      	blx	r7
 800976a:	3001      	adds	r0, #1
 800976c:	f43f af27 	beq.w	80095be <_printf_float+0xc2>
 8009770:	f108 0801 	add.w	r8, r8, #1
 8009774:	e7e6      	b.n	8009744 <_printf_float+0x248>
 8009776:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009778:	2b00      	cmp	r3, #0
 800977a:	dc39      	bgt.n	80097f0 <_printf_float+0x2f4>
 800977c:	4a1b      	ldr	r2, [pc, #108]	; (80097ec <_printf_float+0x2f0>)
 800977e:	2301      	movs	r3, #1
 8009780:	4631      	mov	r1, r6
 8009782:	4628      	mov	r0, r5
 8009784:	47b8      	blx	r7
 8009786:	3001      	adds	r0, #1
 8009788:	f43f af19 	beq.w	80095be <_printf_float+0xc2>
 800978c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009790:	4313      	orrs	r3, r2
 8009792:	d102      	bne.n	800979a <_printf_float+0x29e>
 8009794:	6823      	ldr	r3, [r4, #0]
 8009796:	07d9      	lsls	r1, r3, #31
 8009798:	d5d8      	bpl.n	800974c <_printf_float+0x250>
 800979a:	ee18 3a10 	vmov	r3, s16
 800979e:	4652      	mov	r2, sl
 80097a0:	4631      	mov	r1, r6
 80097a2:	4628      	mov	r0, r5
 80097a4:	47b8      	blx	r7
 80097a6:	3001      	adds	r0, #1
 80097a8:	f43f af09 	beq.w	80095be <_printf_float+0xc2>
 80097ac:	f04f 0900 	mov.w	r9, #0
 80097b0:	f104 0a1a 	add.w	sl, r4, #26
 80097b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097b6:	425b      	negs	r3, r3
 80097b8:	454b      	cmp	r3, r9
 80097ba:	dc01      	bgt.n	80097c0 <_printf_float+0x2c4>
 80097bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097be:	e792      	b.n	80096e6 <_printf_float+0x1ea>
 80097c0:	2301      	movs	r3, #1
 80097c2:	4652      	mov	r2, sl
 80097c4:	4631      	mov	r1, r6
 80097c6:	4628      	mov	r0, r5
 80097c8:	47b8      	blx	r7
 80097ca:	3001      	adds	r0, #1
 80097cc:	f43f aef7 	beq.w	80095be <_printf_float+0xc2>
 80097d0:	f109 0901 	add.w	r9, r9, #1
 80097d4:	e7ee      	b.n	80097b4 <_printf_float+0x2b8>
 80097d6:	bf00      	nop
 80097d8:	7fefffff 	.word	0x7fefffff
 80097dc:	080152a8 	.word	0x080152a8
 80097e0:	080152ac 	.word	0x080152ac
 80097e4:	080152b4 	.word	0x080152b4
 80097e8:	080152b0 	.word	0x080152b0
 80097ec:	080152b8 	.word	0x080152b8
 80097f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80097f2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80097f4:	429a      	cmp	r2, r3
 80097f6:	bfa8      	it	ge
 80097f8:	461a      	movge	r2, r3
 80097fa:	2a00      	cmp	r2, #0
 80097fc:	4691      	mov	r9, r2
 80097fe:	dc37      	bgt.n	8009870 <_printf_float+0x374>
 8009800:	f04f 0b00 	mov.w	fp, #0
 8009804:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009808:	f104 021a 	add.w	r2, r4, #26
 800980c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800980e:	9305      	str	r3, [sp, #20]
 8009810:	eba3 0309 	sub.w	r3, r3, r9
 8009814:	455b      	cmp	r3, fp
 8009816:	dc33      	bgt.n	8009880 <_printf_float+0x384>
 8009818:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800981c:	429a      	cmp	r2, r3
 800981e:	db3b      	blt.n	8009898 <_printf_float+0x39c>
 8009820:	6823      	ldr	r3, [r4, #0]
 8009822:	07da      	lsls	r2, r3, #31
 8009824:	d438      	bmi.n	8009898 <_printf_float+0x39c>
 8009826:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009828:	9a05      	ldr	r2, [sp, #20]
 800982a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800982c:	1a9a      	subs	r2, r3, r2
 800982e:	eba3 0901 	sub.w	r9, r3, r1
 8009832:	4591      	cmp	r9, r2
 8009834:	bfa8      	it	ge
 8009836:	4691      	movge	r9, r2
 8009838:	f1b9 0f00 	cmp.w	r9, #0
 800983c:	dc35      	bgt.n	80098aa <_printf_float+0x3ae>
 800983e:	f04f 0800 	mov.w	r8, #0
 8009842:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009846:	f104 0a1a 	add.w	sl, r4, #26
 800984a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800984e:	1a9b      	subs	r3, r3, r2
 8009850:	eba3 0309 	sub.w	r3, r3, r9
 8009854:	4543      	cmp	r3, r8
 8009856:	f77f af79 	ble.w	800974c <_printf_float+0x250>
 800985a:	2301      	movs	r3, #1
 800985c:	4652      	mov	r2, sl
 800985e:	4631      	mov	r1, r6
 8009860:	4628      	mov	r0, r5
 8009862:	47b8      	blx	r7
 8009864:	3001      	adds	r0, #1
 8009866:	f43f aeaa 	beq.w	80095be <_printf_float+0xc2>
 800986a:	f108 0801 	add.w	r8, r8, #1
 800986e:	e7ec      	b.n	800984a <_printf_float+0x34e>
 8009870:	4613      	mov	r3, r2
 8009872:	4631      	mov	r1, r6
 8009874:	4642      	mov	r2, r8
 8009876:	4628      	mov	r0, r5
 8009878:	47b8      	blx	r7
 800987a:	3001      	adds	r0, #1
 800987c:	d1c0      	bne.n	8009800 <_printf_float+0x304>
 800987e:	e69e      	b.n	80095be <_printf_float+0xc2>
 8009880:	2301      	movs	r3, #1
 8009882:	4631      	mov	r1, r6
 8009884:	4628      	mov	r0, r5
 8009886:	9205      	str	r2, [sp, #20]
 8009888:	47b8      	blx	r7
 800988a:	3001      	adds	r0, #1
 800988c:	f43f ae97 	beq.w	80095be <_printf_float+0xc2>
 8009890:	9a05      	ldr	r2, [sp, #20]
 8009892:	f10b 0b01 	add.w	fp, fp, #1
 8009896:	e7b9      	b.n	800980c <_printf_float+0x310>
 8009898:	ee18 3a10 	vmov	r3, s16
 800989c:	4652      	mov	r2, sl
 800989e:	4631      	mov	r1, r6
 80098a0:	4628      	mov	r0, r5
 80098a2:	47b8      	blx	r7
 80098a4:	3001      	adds	r0, #1
 80098a6:	d1be      	bne.n	8009826 <_printf_float+0x32a>
 80098a8:	e689      	b.n	80095be <_printf_float+0xc2>
 80098aa:	9a05      	ldr	r2, [sp, #20]
 80098ac:	464b      	mov	r3, r9
 80098ae:	4442      	add	r2, r8
 80098b0:	4631      	mov	r1, r6
 80098b2:	4628      	mov	r0, r5
 80098b4:	47b8      	blx	r7
 80098b6:	3001      	adds	r0, #1
 80098b8:	d1c1      	bne.n	800983e <_printf_float+0x342>
 80098ba:	e680      	b.n	80095be <_printf_float+0xc2>
 80098bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80098be:	2a01      	cmp	r2, #1
 80098c0:	dc01      	bgt.n	80098c6 <_printf_float+0x3ca>
 80098c2:	07db      	lsls	r3, r3, #31
 80098c4:	d538      	bpl.n	8009938 <_printf_float+0x43c>
 80098c6:	2301      	movs	r3, #1
 80098c8:	4642      	mov	r2, r8
 80098ca:	4631      	mov	r1, r6
 80098cc:	4628      	mov	r0, r5
 80098ce:	47b8      	blx	r7
 80098d0:	3001      	adds	r0, #1
 80098d2:	f43f ae74 	beq.w	80095be <_printf_float+0xc2>
 80098d6:	ee18 3a10 	vmov	r3, s16
 80098da:	4652      	mov	r2, sl
 80098dc:	4631      	mov	r1, r6
 80098de:	4628      	mov	r0, r5
 80098e0:	47b8      	blx	r7
 80098e2:	3001      	adds	r0, #1
 80098e4:	f43f ae6b 	beq.w	80095be <_printf_float+0xc2>
 80098e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80098ec:	2200      	movs	r2, #0
 80098ee:	2300      	movs	r3, #0
 80098f0:	f7f7 f8f2 	bl	8000ad8 <__aeabi_dcmpeq>
 80098f4:	b9d8      	cbnz	r0, 800992e <_printf_float+0x432>
 80098f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098f8:	f108 0201 	add.w	r2, r8, #1
 80098fc:	3b01      	subs	r3, #1
 80098fe:	4631      	mov	r1, r6
 8009900:	4628      	mov	r0, r5
 8009902:	47b8      	blx	r7
 8009904:	3001      	adds	r0, #1
 8009906:	d10e      	bne.n	8009926 <_printf_float+0x42a>
 8009908:	e659      	b.n	80095be <_printf_float+0xc2>
 800990a:	2301      	movs	r3, #1
 800990c:	4652      	mov	r2, sl
 800990e:	4631      	mov	r1, r6
 8009910:	4628      	mov	r0, r5
 8009912:	47b8      	blx	r7
 8009914:	3001      	adds	r0, #1
 8009916:	f43f ae52 	beq.w	80095be <_printf_float+0xc2>
 800991a:	f108 0801 	add.w	r8, r8, #1
 800991e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009920:	3b01      	subs	r3, #1
 8009922:	4543      	cmp	r3, r8
 8009924:	dcf1      	bgt.n	800990a <_printf_float+0x40e>
 8009926:	464b      	mov	r3, r9
 8009928:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800992c:	e6dc      	b.n	80096e8 <_printf_float+0x1ec>
 800992e:	f04f 0800 	mov.w	r8, #0
 8009932:	f104 0a1a 	add.w	sl, r4, #26
 8009936:	e7f2      	b.n	800991e <_printf_float+0x422>
 8009938:	2301      	movs	r3, #1
 800993a:	4642      	mov	r2, r8
 800993c:	e7df      	b.n	80098fe <_printf_float+0x402>
 800993e:	2301      	movs	r3, #1
 8009940:	464a      	mov	r2, r9
 8009942:	4631      	mov	r1, r6
 8009944:	4628      	mov	r0, r5
 8009946:	47b8      	blx	r7
 8009948:	3001      	adds	r0, #1
 800994a:	f43f ae38 	beq.w	80095be <_printf_float+0xc2>
 800994e:	f108 0801 	add.w	r8, r8, #1
 8009952:	68e3      	ldr	r3, [r4, #12]
 8009954:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009956:	1a5b      	subs	r3, r3, r1
 8009958:	4543      	cmp	r3, r8
 800995a:	dcf0      	bgt.n	800993e <_printf_float+0x442>
 800995c:	e6fa      	b.n	8009754 <_printf_float+0x258>
 800995e:	f04f 0800 	mov.w	r8, #0
 8009962:	f104 0919 	add.w	r9, r4, #25
 8009966:	e7f4      	b.n	8009952 <_printf_float+0x456>

08009968 <_printf_common>:
 8009968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800996c:	4616      	mov	r6, r2
 800996e:	4699      	mov	r9, r3
 8009970:	688a      	ldr	r2, [r1, #8]
 8009972:	690b      	ldr	r3, [r1, #16]
 8009974:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009978:	4293      	cmp	r3, r2
 800997a:	bfb8      	it	lt
 800997c:	4613      	movlt	r3, r2
 800997e:	6033      	str	r3, [r6, #0]
 8009980:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009984:	4607      	mov	r7, r0
 8009986:	460c      	mov	r4, r1
 8009988:	b10a      	cbz	r2, 800998e <_printf_common+0x26>
 800998a:	3301      	adds	r3, #1
 800998c:	6033      	str	r3, [r6, #0]
 800998e:	6823      	ldr	r3, [r4, #0]
 8009990:	0699      	lsls	r1, r3, #26
 8009992:	bf42      	ittt	mi
 8009994:	6833      	ldrmi	r3, [r6, #0]
 8009996:	3302      	addmi	r3, #2
 8009998:	6033      	strmi	r3, [r6, #0]
 800999a:	6825      	ldr	r5, [r4, #0]
 800999c:	f015 0506 	ands.w	r5, r5, #6
 80099a0:	d106      	bne.n	80099b0 <_printf_common+0x48>
 80099a2:	f104 0a19 	add.w	sl, r4, #25
 80099a6:	68e3      	ldr	r3, [r4, #12]
 80099a8:	6832      	ldr	r2, [r6, #0]
 80099aa:	1a9b      	subs	r3, r3, r2
 80099ac:	42ab      	cmp	r3, r5
 80099ae:	dc26      	bgt.n	80099fe <_printf_common+0x96>
 80099b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80099b4:	1e13      	subs	r3, r2, #0
 80099b6:	6822      	ldr	r2, [r4, #0]
 80099b8:	bf18      	it	ne
 80099ba:	2301      	movne	r3, #1
 80099bc:	0692      	lsls	r2, r2, #26
 80099be:	d42b      	bmi.n	8009a18 <_printf_common+0xb0>
 80099c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80099c4:	4649      	mov	r1, r9
 80099c6:	4638      	mov	r0, r7
 80099c8:	47c0      	blx	r8
 80099ca:	3001      	adds	r0, #1
 80099cc:	d01e      	beq.n	8009a0c <_printf_common+0xa4>
 80099ce:	6823      	ldr	r3, [r4, #0]
 80099d0:	68e5      	ldr	r5, [r4, #12]
 80099d2:	6832      	ldr	r2, [r6, #0]
 80099d4:	f003 0306 	and.w	r3, r3, #6
 80099d8:	2b04      	cmp	r3, #4
 80099da:	bf08      	it	eq
 80099dc:	1aad      	subeq	r5, r5, r2
 80099de:	68a3      	ldr	r3, [r4, #8]
 80099e0:	6922      	ldr	r2, [r4, #16]
 80099e2:	bf0c      	ite	eq
 80099e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80099e8:	2500      	movne	r5, #0
 80099ea:	4293      	cmp	r3, r2
 80099ec:	bfc4      	itt	gt
 80099ee:	1a9b      	subgt	r3, r3, r2
 80099f0:	18ed      	addgt	r5, r5, r3
 80099f2:	2600      	movs	r6, #0
 80099f4:	341a      	adds	r4, #26
 80099f6:	42b5      	cmp	r5, r6
 80099f8:	d11a      	bne.n	8009a30 <_printf_common+0xc8>
 80099fa:	2000      	movs	r0, #0
 80099fc:	e008      	b.n	8009a10 <_printf_common+0xa8>
 80099fe:	2301      	movs	r3, #1
 8009a00:	4652      	mov	r2, sl
 8009a02:	4649      	mov	r1, r9
 8009a04:	4638      	mov	r0, r7
 8009a06:	47c0      	blx	r8
 8009a08:	3001      	adds	r0, #1
 8009a0a:	d103      	bne.n	8009a14 <_printf_common+0xac>
 8009a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8009a10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a14:	3501      	adds	r5, #1
 8009a16:	e7c6      	b.n	80099a6 <_printf_common+0x3e>
 8009a18:	18e1      	adds	r1, r4, r3
 8009a1a:	1c5a      	adds	r2, r3, #1
 8009a1c:	2030      	movs	r0, #48	; 0x30
 8009a1e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009a22:	4422      	add	r2, r4
 8009a24:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009a28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009a2c:	3302      	adds	r3, #2
 8009a2e:	e7c7      	b.n	80099c0 <_printf_common+0x58>
 8009a30:	2301      	movs	r3, #1
 8009a32:	4622      	mov	r2, r4
 8009a34:	4649      	mov	r1, r9
 8009a36:	4638      	mov	r0, r7
 8009a38:	47c0      	blx	r8
 8009a3a:	3001      	adds	r0, #1
 8009a3c:	d0e6      	beq.n	8009a0c <_printf_common+0xa4>
 8009a3e:	3601      	adds	r6, #1
 8009a40:	e7d9      	b.n	80099f6 <_printf_common+0x8e>
	...

08009a44 <_printf_i>:
 8009a44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009a48:	7e0f      	ldrb	r7, [r1, #24]
 8009a4a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009a4c:	2f78      	cmp	r7, #120	; 0x78
 8009a4e:	4691      	mov	r9, r2
 8009a50:	4680      	mov	r8, r0
 8009a52:	460c      	mov	r4, r1
 8009a54:	469a      	mov	sl, r3
 8009a56:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009a5a:	d807      	bhi.n	8009a6c <_printf_i+0x28>
 8009a5c:	2f62      	cmp	r7, #98	; 0x62
 8009a5e:	d80a      	bhi.n	8009a76 <_printf_i+0x32>
 8009a60:	2f00      	cmp	r7, #0
 8009a62:	f000 80d8 	beq.w	8009c16 <_printf_i+0x1d2>
 8009a66:	2f58      	cmp	r7, #88	; 0x58
 8009a68:	f000 80a3 	beq.w	8009bb2 <_printf_i+0x16e>
 8009a6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009a70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009a74:	e03a      	b.n	8009aec <_printf_i+0xa8>
 8009a76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009a7a:	2b15      	cmp	r3, #21
 8009a7c:	d8f6      	bhi.n	8009a6c <_printf_i+0x28>
 8009a7e:	a101      	add	r1, pc, #4	; (adr r1, 8009a84 <_printf_i+0x40>)
 8009a80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009a84:	08009add 	.word	0x08009add
 8009a88:	08009af1 	.word	0x08009af1
 8009a8c:	08009a6d 	.word	0x08009a6d
 8009a90:	08009a6d 	.word	0x08009a6d
 8009a94:	08009a6d 	.word	0x08009a6d
 8009a98:	08009a6d 	.word	0x08009a6d
 8009a9c:	08009af1 	.word	0x08009af1
 8009aa0:	08009a6d 	.word	0x08009a6d
 8009aa4:	08009a6d 	.word	0x08009a6d
 8009aa8:	08009a6d 	.word	0x08009a6d
 8009aac:	08009a6d 	.word	0x08009a6d
 8009ab0:	08009bfd 	.word	0x08009bfd
 8009ab4:	08009b21 	.word	0x08009b21
 8009ab8:	08009bdf 	.word	0x08009bdf
 8009abc:	08009a6d 	.word	0x08009a6d
 8009ac0:	08009a6d 	.word	0x08009a6d
 8009ac4:	08009c1f 	.word	0x08009c1f
 8009ac8:	08009a6d 	.word	0x08009a6d
 8009acc:	08009b21 	.word	0x08009b21
 8009ad0:	08009a6d 	.word	0x08009a6d
 8009ad4:	08009a6d 	.word	0x08009a6d
 8009ad8:	08009be7 	.word	0x08009be7
 8009adc:	682b      	ldr	r3, [r5, #0]
 8009ade:	1d1a      	adds	r2, r3, #4
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	602a      	str	r2, [r5, #0]
 8009ae4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009ae8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009aec:	2301      	movs	r3, #1
 8009aee:	e0a3      	b.n	8009c38 <_printf_i+0x1f4>
 8009af0:	6820      	ldr	r0, [r4, #0]
 8009af2:	6829      	ldr	r1, [r5, #0]
 8009af4:	0606      	lsls	r6, r0, #24
 8009af6:	f101 0304 	add.w	r3, r1, #4
 8009afa:	d50a      	bpl.n	8009b12 <_printf_i+0xce>
 8009afc:	680e      	ldr	r6, [r1, #0]
 8009afe:	602b      	str	r3, [r5, #0]
 8009b00:	2e00      	cmp	r6, #0
 8009b02:	da03      	bge.n	8009b0c <_printf_i+0xc8>
 8009b04:	232d      	movs	r3, #45	; 0x2d
 8009b06:	4276      	negs	r6, r6
 8009b08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b0c:	485e      	ldr	r0, [pc, #376]	; (8009c88 <_printf_i+0x244>)
 8009b0e:	230a      	movs	r3, #10
 8009b10:	e019      	b.n	8009b46 <_printf_i+0x102>
 8009b12:	680e      	ldr	r6, [r1, #0]
 8009b14:	602b      	str	r3, [r5, #0]
 8009b16:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009b1a:	bf18      	it	ne
 8009b1c:	b236      	sxthne	r6, r6
 8009b1e:	e7ef      	b.n	8009b00 <_printf_i+0xbc>
 8009b20:	682b      	ldr	r3, [r5, #0]
 8009b22:	6820      	ldr	r0, [r4, #0]
 8009b24:	1d19      	adds	r1, r3, #4
 8009b26:	6029      	str	r1, [r5, #0]
 8009b28:	0601      	lsls	r1, r0, #24
 8009b2a:	d501      	bpl.n	8009b30 <_printf_i+0xec>
 8009b2c:	681e      	ldr	r6, [r3, #0]
 8009b2e:	e002      	b.n	8009b36 <_printf_i+0xf2>
 8009b30:	0646      	lsls	r6, r0, #25
 8009b32:	d5fb      	bpl.n	8009b2c <_printf_i+0xe8>
 8009b34:	881e      	ldrh	r6, [r3, #0]
 8009b36:	4854      	ldr	r0, [pc, #336]	; (8009c88 <_printf_i+0x244>)
 8009b38:	2f6f      	cmp	r7, #111	; 0x6f
 8009b3a:	bf0c      	ite	eq
 8009b3c:	2308      	moveq	r3, #8
 8009b3e:	230a      	movne	r3, #10
 8009b40:	2100      	movs	r1, #0
 8009b42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009b46:	6865      	ldr	r5, [r4, #4]
 8009b48:	60a5      	str	r5, [r4, #8]
 8009b4a:	2d00      	cmp	r5, #0
 8009b4c:	bfa2      	ittt	ge
 8009b4e:	6821      	ldrge	r1, [r4, #0]
 8009b50:	f021 0104 	bicge.w	r1, r1, #4
 8009b54:	6021      	strge	r1, [r4, #0]
 8009b56:	b90e      	cbnz	r6, 8009b5c <_printf_i+0x118>
 8009b58:	2d00      	cmp	r5, #0
 8009b5a:	d04d      	beq.n	8009bf8 <_printf_i+0x1b4>
 8009b5c:	4615      	mov	r5, r2
 8009b5e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009b62:	fb03 6711 	mls	r7, r3, r1, r6
 8009b66:	5dc7      	ldrb	r7, [r0, r7]
 8009b68:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009b6c:	4637      	mov	r7, r6
 8009b6e:	42bb      	cmp	r3, r7
 8009b70:	460e      	mov	r6, r1
 8009b72:	d9f4      	bls.n	8009b5e <_printf_i+0x11a>
 8009b74:	2b08      	cmp	r3, #8
 8009b76:	d10b      	bne.n	8009b90 <_printf_i+0x14c>
 8009b78:	6823      	ldr	r3, [r4, #0]
 8009b7a:	07de      	lsls	r6, r3, #31
 8009b7c:	d508      	bpl.n	8009b90 <_printf_i+0x14c>
 8009b7e:	6923      	ldr	r3, [r4, #16]
 8009b80:	6861      	ldr	r1, [r4, #4]
 8009b82:	4299      	cmp	r1, r3
 8009b84:	bfde      	ittt	le
 8009b86:	2330      	movle	r3, #48	; 0x30
 8009b88:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009b8c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009b90:	1b52      	subs	r2, r2, r5
 8009b92:	6122      	str	r2, [r4, #16]
 8009b94:	f8cd a000 	str.w	sl, [sp]
 8009b98:	464b      	mov	r3, r9
 8009b9a:	aa03      	add	r2, sp, #12
 8009b9c:	4621      	mov	r1, r4
 8009b9e:	4640      	mov	r0, r8
 8009ba0:	f7ff fee2 	bl	8009968 <_printf_common>
 8009ba4:	3001      	adds	r0, #1
 8009ba6:	d14c      	bne.n	8009c42 <_printf_i+0x1fe>
 8009ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8009bac:	b004      	add	sp, #16
 8009bae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bb2:	4835      	ldr	r0, [pc, #212]	; (8009c88 <_printf_i+0x244>)
 8009bb4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009bb8:	6829      	ldr	r1, [r5, #0]
 8009bba:	6823      	ldr	r3, [r4, #0]
 8009bbc:	f851 6b04 	ldr.w	r6, [r1], #4
 8009bc0:	6029      	str	r1, [r5, #0]
 8009bc2:	061d      	lsls	r5, r3, #24
 8009bc4:	d514      	bpl.n	8009bf0 <_printf_i+0x1ac>
 8009bc6:	07df      	lsls	r7, r3, #31
 8009bc8:	bf44      	itt	mi
 8009bca:	f043 0320 	orrmi.w	r3, r3, #32
 8009bce:	6023      	strmi	r3, [r4, #0]
 8009bd0:	b91e      	cbnz	r6, 8009bda <_printf_i+0x196>
 8009bd2:	6823      	ldr	r3, [r4, #0]
 8009bd4:	f023 0320 	bic.w	r3, r3, #32
 8009bd8:	6023      	str	r3, [r4, #0]
 8009bda:	2310      	movs	r3, #16
 8009bdc:	e7b0      	b.n	8009b40 <_printf_i+0xfc>
 8009bde:	6823      	ldr	r3, [r4, #0]
 8009be0:	f043 0320 	orr.w	r3, r3, #32
 8009be4:	6023      	str	r3, [r4, #0]
 8009be6:	2378      	movs	r3, #120	; 0x78
 8009be8:	4828      	ldr	r0, [pc, #160]	; (8009c8c <_printf_i+0x248>)
 8009bea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009bee:	e7e3      	b.n	8009bb8 <_printf_i+0x174>
 8009bf0:	0659      	lsls	r1, r3, #25
 8009bf2:	bf48      	it	mi
 8009bf4:	b2b6      	uxthmi	r6, r6
 8009bf6:	e7e6      	b.n	8009bc6 <_printf_i+0x182>
 8009bf8:	4615      	mov	r5, r2
 8009bfa:	e7bb      	b.n	8009b74 <_printf_i+0x130>
 8009bfc:	682b      	ldr	r3, [r5, #0]
 8009bfe:	6826      	ldr	r6, [r4, #0]
 8009c00:	6961      	ldr	r1, [r4, #20]
 8009c02:	1d18      	adds	r0, r3, #4
 8009c04:	6028      	str	r0, [r5, #0]
 8009c06:	0635      	lsls	r5, r6, #24
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	d501      	bpl.n	8009c10 <_printf_i+0x1cc>
 8009c0c:	6019      	str	r1, [r3, #0]
 8009c0e:	e002      	b.n	8009c16 <_printf_i+0x1d2>
 8009c10:	0670      	lsls	r0, r6, #25
 8009c12:	d5fb      	bpl.n	8009c0c <_printf_i+0x1c8>
 8009c14:	8019      	strh	r1, [r3, #0]
 8009c16:	2300      	movs	r3, #0
 8009c18:	6123      	str	r3, [r4, #16]
 8009c1a:	4615      	mov	r5, r2
 8009c1c:	e7ba      	b.n	8009b94 <_printf_i+0x150>
 8009c1e:	682b      	ldr	r3, [r5, #0]
 8009c20:	1d1a      	adds	r2, r3, #4
 8009c22:	602a      	str	r2, [r5, #0]
 8009c24:	681d      	ldr	r5, [r3, #0]
 8009c26:	6862      	ldr	r2, [r4, #4]
 8009c28:	2100      	movs	r1, #0
 8009c2a:	4628      	mov	r0, r5
 8009c2c:	f7f6 fae0 	bl	80001f0 <memchr>
 8009c30:	b108      	cbz	r0, 8009c36 <_printf_i+0x1f2>
 8009c32:	1b40      	subs	r0, r0, r5
 8009c34:	6060      	str	r0, [r4, #4]
 8009c36:	6863      	ldr	r3, [r4, #4]
 8009c38:	6123      	str	r3, [r4, #16]
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c40:	e7a8      	b.n	8009b94 <_printf_i+0x150>
 8009c42:	6923      	ldr	r3, [r4, #16]
 8009c44:	462a      	mov	r2, r5
 8009c46:	4649      	mov	r1, r9
 8009c48:	4640      	mov	r0, r8
 8009c4a:	47d0      	blx	sl
 8009c4c:	3001      	adds	r0, #1
 8009c4e:	d0ab      	beq.n	8009ba8 <_printf_i+0x164>
 8009c50:	6823      	ldr	r3, [r4, #0]
 8009c52:	079b      	lsls	r3, r3, #30
 8009c54:	d413      	bmi.n	8009c7e <_printf_i+0x23a>
 8009c56:	68e0      	ldr	r0, [r4, #12]
 8009c58:	9b03      	ldr	r3, [sp, #12]
 8009c5a:	4298      	cmp	r0, r3
 8009c5c:	bfb8      	it	lt
 8009c5e:	4618      	movlt	r0, r3
 8009c60:	e7a4      	b.n	8009bac <_printf_i+0x168>
 8009c62:	2301      	movs	r3, #1
 8009c64:	4632      	mov	r2, r6
 8009c66:	4649      	mov	r1, r9
 8009c68:	4640      	mov	r0, r8
 8009c6a:	47d0      	blx	sl
 8009c6c:	3001      	adds	r0, #1
 8009c6e:	d09b      	beq.n	8009ba8 <_printf_i+0x164>
 8009c70:	3501      	adds	r5, #1
 8009c72:	68e3      	ldr	r3, [r4, #12]
 8009c74:	9903      	ldr	r1, [sp, #12]
 8009c76:	1a5b      	subs	r3, r3, r1
 8009c78:	42ab      	cmp	r3, r5
 8009c7a:	dcf2      	bgt.n	8009c62 <_printf_i+0x21e>
 8009c7c:	e7eb      	b.n	8009c56 <_printf_i+0x212>
 8009c7e:	2500      	movs	r5, #0
 8009c80:	f104 0619 	add.w	r6, r4, #25
 8009c84:	e7f5      	b.n	8009c72 <_printf_i+0x22e>
 8009c86:	bf00      	nop
 8009c88:	080152ba 	.word	0x080152ba
 8009c8c:	080152cb 	.word	0x080152cb

08009c90 <siprintf>:
 8009c90:	b40e      	push	{r1, r2, r3}
 8009c92:	b500      	push	{lr}
 8009c94:	b09c      	sub	sp, #112	; 0x70
 8009c96:	ab1d      	add	r3, sp, #116	; 0x74
 8009c98:	9002      	str	r0, [sp, #8]
 8009c9a:	9006      	str	r0, [sp, #24]
 8009c9c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009ca0:	4809      	ldr	r0, [pc, #36]	; (8009cc8 <siprintf+0x38>)
 8009ca2:	9107      	str	r1, [sp, #28]
 8009ca4:	9104      	str	r1, [sp, #16]
 8009ca6:	4909      	ldr	r1, [pc, #36]	; (8009ccc <siprintf+0x3c>)
 8009ca8:	f853 2b04 	ldr.w	r2, [r3], #4
 8009cac:	9105      	str	r1, [sp, #20]
 8009cae:	6800      	ldr	r0, [r0, #0]
 8009cb0:	9301      	str	r3, [sp, #4]
 8009cb2:	a902      	add	r1, sp, #8
 8009cb4:	f001 fb76 	bl	800b3a4 <_svfiprintf_r>
 8009cb8:	9b02      	ldr	r3, [sp, #8]
 8009cba:	2200      	movs	r2, #0
 8009cbc:	701a      	strb	r2, [r3, #0]
 8009cbe:	b01c      	add	sp, #112	; 0x70
 8009cc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009cc4:	b003      	add	sp, #12
 8009cc6:	4770      	bx	lr
 8009cc8:	20000024 	.word	0x20000024
 8009ccc:	ffff0208 	.word	0xffff0208

08009cd0 <quorem>:
 8009cd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cd4:	6903      	ldr	r3, [r0, #16]
 8009cd6:	690c      	ldr	r4, [r1, #16]
 8009cd8:	42a3      	cmp	r3, r4
 8009cda:	4607      	mov	r7, r0
 8009cdc:	f2c0 8081 	blt.w	8009de2 <quorem+0x112>
 8009ce0:	3c01      	subs	r4, #1
 8009ce2:	f101 0814 	add.w	r8, r1, #20
 8009ce6:	f100 0514 	add.w	r5, r0, #20
 8009cea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009cee:	9301      	str	r3, [sp, #4]
 8009cf0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009cf4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009cf8:	3301      	adds	r3, #1
 8009cfa:	429a      	cmp	r2, r3
 8009cfc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009d00:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009d04:	fbb2 f6f3 	udiv	r6, r2, r3
 8009d08:	d331      	bcc.n	8009d6e <quorem+0x9e>
 8009d0a:	f04f 0e00 	mov.w	lr, #0
 8009d0e:	4640      	mov	r0, r8
 8009d10:	46ac      	mov	ip, r5
 8009d12:	46f2      	mov	sl, lr
 8009d14:	f850 2b04 	ldr.w	r2, [r0], #4
 8009d18:	b293      	uxth	r3, r2
 8009d1a:	fb06 e303 	mla	r3, r6, r3, lr
 8009d1e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009d22:	b29b      	uxth	r3, r3
 8009d24:	ebaa 0303 	sub.w	r3, sl, r3
 8009d28:	f8dc a000 	ldr.w	sl, [ip]
 8009d2c:	0c12      	lsrs	r2, r2, #16
 8009d2e:	fa13 f38a 	uxtah	r3, r3, sl
 8009d32:	fb06 e202 	mla	r2, r6, r2, lr
 8009d36:	9300      	str	r3, [sp, #0]
 8009d38:	9b00      	ldr	r3, [sp, #0]
 8009d3a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009d3e:	b292      	uxth	r2, r2
 8009d40:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009d44:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009d48:	f8bd 3000 	ldrh.w	r3, [sp]
 8009d4c:	4581      	cmp	r9, r0
 8009d4e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009d52:	f84c 3b04 	str.w	r3, [ip], #4
 8009d56:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009d5a:	d2db      	bcs.n	8009d14 <quorem+0x44>
 8009d5c:	f855 300b 	ldr.w	r3, [r5, fp]
 8009d60:	b92b      	cbnz	r3, 8009d6e <quorem+0x9e>
 8009d62:	9b01      	ldr	r3, [sp, #4]
 8009d64:	3b04      	subs	r3, #4
 8009d66:	429d      	cmp	r5, r3
 8009d68:	461a      	mov	r2, r3
 8009d6a:	d32e      	bcc.n	8009dca <quorem+0xfa>
 8009d6c:	613c      	str	r4, [r7, #16]
 8009d6e:	4638      	mov	r0, r7
 8009d70:	f001 f8c4 	bl	800aefc <__mcmp>
 8009d74:	2800      	cmp	r0, #0
 8009d76:	db24      	blt.n	8009dc2 <quorem+0xf2>
 8009d78:	3601      	adds	r6, #1
 8009d7a:	4628      	mov	r0, r5
 8009d7c:	f04f 0c00 	mov.w	ip, #0
 8009d80:	f858 2b04 	ldr.w	r2, [r8], #4
 8009d84:	f8d0 e000 	ldr.w	lr, [r0]
 8009d88:	b293      	uxth	r3, r2
 8009d8a:	ebac 0303 	sub.w	r3, ip, r3
 8009d8e:	0c12      	lsrs	r2, r2, #16
 8009d90:	fa13 f38e 	uxtah	r3, r3, lr
 8009d94:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009d98:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009d9c:	b29b      	uxth	r3, r3
 8009d9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009da2:	45c1      	cmp	r9, r8
 8009da4:	f840 3b04 	str.w	r3, [r0], #4
 8009da8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009dac:	d2e8      	bcs.n	8009d80 <quorem+0xb0>
 8009dae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009db2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009db6:	b922      	cbnz	r2, 8009dc2 <quorem+0xf2>
 8009db8:	3b04      	subs	r3, #4
 8009dba:	429d      	cmp	r5, r3
 8009dbc:	461a      	mov	r2, r3
 8009dbe:	d30a      	bcc.n	8009dd6 <quorem+0x106>
 8009dc0:	613c      	str	r4, [r7, #16]
 8009dc2:	4630      	mov	r0, r6
 8009dc4:	b003      	add	sp, #12
 8009dc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dca:	6812      	ldr	r2, [r2, #0]
 8009dcc:	3b04      	subs	r3, #4
 8009dce:	2a00      	cmp	r2, #0
 8009dd0:	d1cc      	bne.n	8009d6c <quorem+0x9c>
 8009dd2:	3c01      	subs	r4, #1
 8009dd4:	e7c7      	b.n	8009d66 <quorem+0x96>
 8009dd6:	6812      	ldr	r2, [r2, #0]
 8009dd8:	3b04      	subs	r3, #4
 8009dda:	2a00      	cmp	r2, #0
 8009ddc:	d1f0      	bne.n	8009dc0 <quorem+0xf0>
 8009dde:	3c01      	subs	r4, #1
 8009de0:	e7eb      	b.n	8009dba <quorem+0xea>
 8009de2:	2000      	movs	r0, #0
 8009de4:	e7ee      	b.n	8009dc4 <quorem+0xf4>
	...

08009de8 <_dtoa_r>:
 8009de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dec:	ed2d 8b04 	vpush	{d8-d9}
 8009df0:	ec57 6b10 	vmov	r6, r7, d0
 8009df4:	b093      	sub	sp, #76	; 0x4c
 8009df6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009df8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009dfc:	9106      	str	r1, [sp, #24]
 8009dfe:	ee10 aa10 	vmov	sl, s0
 8009e02:	4604      	mov	r4, r0
 8009e04:	9209      	str	r2, [sp, #36]	; 0x24
 8009e06:	930c      	str	r3, [sp, #48]	; 0x30
 8009e08:	46bb      	mov	fp, r7
 8009e0a:	b975      	cbnz	r5, 8009e2a <_dtoa_r+0x42>
 8009e0c:	2010      	movs	r0, #16
 8009e0e:	f000 fddd 	bl	800a9cc <malloc>
 8009e12:	4602      	mov	r2, r0
 8009e14:	6260      	str	r0, [r4, #36]	; 0x24
 8009e16:	b920      	cbnz	r0, 8009e22 <_dtoa_r+0x3a>
 8009e18:	4ba7      	ldr	r3, [pc, #668]	; (800a0b8 <_dtoa_r+0x2d0>)
 8009e1a:	21ea      	movs	r1, #234	; 0xea
 8009e1c:	48a7      	ldr	r0, [pc, #668]	; (800a0bc <_dtoa_r+0x2d4>)
 8009e1e:	f001 fbd1 	bl	800b5c4 <__assert_func>
 8009e22:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009e26:	6005      	str	r5, [r0, #0]
 8009e28:	60c5      	str	r5, [r0, #12]
 8009e2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009e2c:	6819      	ldr	r1, [r3, #0]
 8009e2e:	b151      	cbz	r1, 8009e46 <_dtoa_r+0x5e>
 8009e30:	685a      	ldr	r2, [r3, #4]
 8009e32:	604a      	str	r2, [r1, #4]
 8009e34:	2301      	movs	r3, #1
 8009e36:	4093      	lsls	r3, r2
 8009e38:	608b      	str	r3, [r1, #8]
 8009e3a:	4620      	mov	r0, r4
 8009e3c:	f000 fe1c 	bl	800aa78 <_Bfree>
 8009e40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009e42:	2200      	movs	r2, #0
 8009e44:	601a      	str	r2, [r3, #0]
 8009e46:	1e3b      	subs	r3, r7, #0
 8009e48:	bfaa      	itet	ge
 8009e4a:	2300      	movge	r3, #0
 8009e4c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009e50:	f8c8 3000 	strge.w	r3, [r8]
 8009e54:	4b9a      	ldr	r3, [pc, #616]	; (800a0c0 <_dtoa_r+0x2d8>)
 8009e56:	bfbc      	itt	lt
 8009e58:	2201      	movlt	r2, #1
 8009e5a:	f8c8 2000 	strlt.w	r2, [r8]
 8009e5e:	ea33 030b 	bics.w	r3, r3, fp
 8009e62:	d11b      	bne.n	8009e9c <_dtoa_r+0xb4>
 8009e64:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009e66:	f242 730f 	movw	r3, #9999	; 0x270f
 8009e6a:	6013      	str	r3, [r2, #0]
 8009e6c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009e70:	4333      	orrs	r3, r6
 8009e72:	f000 8592 	beq.w	800a99a <_dtoa_r+0xbb2>
 8009e76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009e78:	b963      	cbnz	r3, 8009e94 <_dtoa_r+0xac>
 8009e7a:	4b92      	ldr	r3, [pc, #584]	; (800a0c4 <_dtoa_r+0x2dc>)
 8009e7c:	e022      	b.n	8009ec4 <_dtoa_r+0xdc>
 8009e7e:	4b92      	ldr	r3, [pc, #584]	; (800a0c8 <_dtoa_r+0x2e0>)
 8009e80:	9301      	str	r3, [sp, #4]
 8009e82:	3308      	adds	r3, #8
 8009e84:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009e86:	6013      	str	r3, [r2, #0]
 8009e88:	9801      	ldr	r0, [sp, #4]
 8009e8a:	b013      	add	sp, #76	; 0x4c
 8009e8c:	ecbd 8b04 	vpop	{d8-d9}
 8009e90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e94:	4b8b      	ldr	r3, [pc, #556]	; (800a0c4 <_dtoa_r+0x2dc>)
 8009e96:	9301      	str	r3, [sp, #4]
 8009e98:	3303      	adds	r3, #3
 8009e9a:	e7f3      	b.n	8009e84 <_dtoa_r+0x9c>
 8009e9c:	2200      	movs	r2, #0
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	4650      	mov	r0, sl
 8009ea2:	4659      	mov	r1, fp
 8009ea4:	f7f6 fe18 	bl	8000ad8 <__aeabi_dcmpeq>
 8009ea8:	ec4b ab19 	vmov	d9, sl, fp
 8009eac:	4680      	mov	r8, r0
 8009eae:	b158      	cbz	r0, 8009ec8 <_dtoa_r+0xe0>
 8009eb0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009eb2:	2301      	movs	r3, #1
 8009eb4:	6013      	str	r3, [r2, #0]
 8009eb6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	f000 856b 	beq.w	800a994 <_dtoa_r+0xbac>
 8009ebe:	4883      	ldr	r0, [pc, #524]	; (800a0cc <_dtoa_r+0x2e4>)
 8009ec0:	6018      	str	r0, [r3, #0]
 8009ec2:	1e43      	subs	r3, r0, #1
 8009ec4:	9301      	str	r3, [sp, #4]
 8009ec6:	e7df      	b.n	8009e88 <_dtoa_r+0xa0>
 8009ec8:	ec4b ab10 	vmov	d0, sl, fp
 8009ecc:	aa10      	add	r2, sp, #64	; 0x40
 8009ece:	a911      	add	r1, sp, #68	; 0x44
 8009ed0:	4620      	mov	r0, r4
 8009ed2:	f001 f8b9 	bl	800b048 <__d2b>
 8009ed6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8009eda:	ee08 0a10 	vmov	s16, r0
 8009ede:	2d00      	cmp	r5, #0
 8009ee0:	f000 8084 	beq.w	8009fec <_dtoa_r+0x204>
 8009ee4:	ee19 3a90 	vmov	r3, s19
 8009ee8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009eec:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009ef0:	4656      	mov	r6, sl
 8009ef2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009ef6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009efa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8009efe:	4b74      	ldr	r3, [pc, #464]	; (800a0d0 <_dtoa_r+0x2e8>)
 8009f00:	2200      	movs	r2, #0
 8009f02:	4630      	mov	r0, r6
 8009f04:	4639      	mov	r1, r7
 8009f06:	f7f6 f9c7 	bl	8000298 <__aeabi_dsub>
 8009f0a:	a365      	add	r3, pc, #404	; (adr r3, 800a0a0 <_dtoa_r+0x2b8>)
 8009f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f10:	f7f6 fb7a 	bl	8000608 <__aeabi_dmul>
 8009f14:	a364      	add	r3, pc, #400	; (adr r3, 800a0a8 <_dtoa_r+0x2c0>)
 8009f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f1a:	f7f6 f9bf 	bl	800029c <__adddf3>
 8009f1e:	4606      	mov	r6, r0
 8009f20:	4628      	mov	r0, r5
 8009f22:	460f      	mov	r7, r1
 8009f24:	f7f6 fb06 	bl	8000534 <__aeabi_i2d>
 8009f28:	a361      	add	r3, pc, #388	; (adr r3, 800a0b0 <_dtoa_r+0x2c8>)
 8009f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f2e:	f7f6 fb6b 	bl	8000608 <__aeabi_dmul>
 8009f32:	4602      	mov	r2, r0
 8009f34:	460b      	mov	r3, r1
 8009f36:	4630      	mov	r0, r6
 8009f38:	4639      	mov	r1, r7
 8009f3a:	f7f6 f9af 	bl	800029c <__adddf3>
 8009f3e:	4606      	mov	r6, r0
 8009f40:	460f      	mov	r7, r1
 8009f42:	f7f6 fe11 	bl	8000b68 <__aeabi_d2iz>
 8009f46:	2200      	movs	r2, #0
 8009f48:	9000      	str	r0, [sp, #0]
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	4630      	mov	r0, r6
 8009f4e:	4639      	mov	r1, r7
 8009f50:	f7f6 fdcc 	bl	8000aec <__aeabi_dcmplt>
 8009f54:	b150      	cbz	r0, 8009f6c <_dtoa_r+0x184>
 8009f56:	9800      	ldr	r0, [sp, #0]
 8009f58:	f7f6 faec 	bl	8000534 <__aeabi_i2d>
 8009f5c:	4632      	mov	r2, r6
 8009f5e:	463b      	mov	r3, r7
 8009f60:	f7f6 fdba 	bl	8000ad8 <__aeabi_dcmpeq>
 8009f64:	b910      	cbnz	r0, 8009f6c <_dtoa_r+0x184>
 8009f66:	9b00      	ldr	r3, [sp, #0]
 8009f68:	3b01      	subs	r3, #1
 8009f6a:	9300      	str	r3, [sp, #0]
 8009f6c:	9b00      	ldr	r3, [sp, #0]
 8009f6e:	2b16      	cmp	r3, #22
 8009f70:	d85a      	bhi.n	800a028 <_dtoa_r+0x240>
 8009f72:	9a00      	ldr	r2, [sp, #0]
 8009f74:	4b57      	ldr	r3, [pc, #348]	; (800a0d4 <_dtoa_r+0x2ec>)
 8009f76:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f7e:	ec51 0b19 	vmov	r0, r1, d9
 8009f82:	f7f6 fdb3 	bl	8000aec <__aeabi_dcmplt>
 8009f86:	2800      	cmp	r0, #0
 8009f88:	d050      	beq.n	800a02c <_dtoa_r+0x244>
 8009f8a:	9b00      	ldr	r3, [sp, #0]
 8009f8c:	3b01      	subs	r3, #1
 8009f8e:	9300      	str	r3, [sp, #0]
 8009f90:	2300      	movs	r3, #0
 8009f92:	930b      	str	r3, [sp, #44]	; 0x2c
 8009f94:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009f96:	1b5d      	subs	r5, r3, r5
 8009f98:	1e6b      	subs	r3, r5, #1
 8009f9a:	9305      	str	r3, [sp, #20]
 8009f9c:	bf45      	ittet	mi
 8009f9e:	f1c5 0301 	rsbmi	r3, r5, #1
 8009fa2:	9304      	strmi	r3, [sp, #16]
 8009fa4:	2300      	movpl	r3, #0
 8009fa6:	2300      	movmi	r3, #0
 8009fa8:	bf4c      	ite	mi
 8009faa:	9305      	strmi	r3, [sp, #20]
 8009fac:	9304      	strpl	r3, [sp, #16]
 8009fae:	9b00      	ldr	r3, [sp, #0]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	db3d      	blt.n	800a030 <_dtoa_r+0x248>
 8009fb4:	9b05      	ldr	r3, [sp, #20]
 8009fb6:	9a00      	ldr	r2, [sp, #0]
 8009fb8:	920a      	str	r2, [sp, #40]	; 0x28
 8009fba:	4413      	add	r3, r2
 8009fbc:	9305      	str	r3, [sp, #20]
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	9307      	str	r3, [sp, #28]
 8009fc2:	9b06      	ldr	r3, [sp, #24]
 8009fc4:	2b09      	cmp	r3, #9
 8009fc6:	f200 8089 	bhi.w	800a0dc <_dtoa_r+0x2f4>
 8009fca:	2b05      	cmp	r3, #5
 8009fcc:	bfc4      	itt	gt
 8009fce:	3b04      	subgt	r3, #4
 8009fd0:	9306      	strgt	r3, [sp, #24]
 8009fd2:	9b06      	ldr	r3, [sp, #24]
 8009fd4:	f1a3 0302 	sub.w	r3, r3, #2
 8009fd8:	bfcc      	ite	gt
 8009fda:	2500      	movgt	r5, #0
 8009fdc:	2501      	movle	r5, #1
 8009fde:	2b03      	cmp	r3, #3
 8009fe0:	f200 8087 	bhi.w	800a0f2 <_dtoa_r+0x30a>
 8009fe4:	e8df f003 	tbb	[pc, r3]
 8009fe8:	59383a2d 	.word	0x59383a2d
 8009fec:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009ff0:	441d      	add	r5, r3
 8009ff2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009ff6:	2b20      	cmp	r3, #32
 8009ff8:	bfc1      	itttt	gt
 8009ffa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009ffe:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a002:	fa0b f303 	lslgt.w	r3, fp, r3
 800a006:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a00a:	bfda      	itte	le
 800a00c:	f1c3 0320 	rsble	r3, r3, #32
 800a010:	fa06 f003 	lslle.w	r0, r6, r3
 800a014:	4318      	orrgt	r0, r3
 800a016:	f7f6 fa7d 	bl	8000514 <__aeabi_ui2d>
 800a01a:	2301      	movs	r3, #1
 800a01c:	4606      	mov	r6, r0
 800a01e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a022:	3d01      	subs	r5, #1
 800a024:	930e      	str	r3, [sp, #56]	; 0x38
 800a026:	e76a      	b.n	8009efe <_dtoa_r+0x116>
 800a028:	2301      	movs	r3, #1
 800a02a:	e7b2      	b.n	8009f92 <_dtoa_r+0x1aa>
 800a02c:	900b      	str	r0, [sp, #44]	; 0x2c
 800a02e:	e7b1      	b.n	8009f94 <_dtoa_r+0x1ac>
 800a030:	9b04      	ldr	r3, [sp, #16]
 800a032:	9a00      	ldr	r2, [sp, #0]
 800a034:	1a9b      	subs	r3, r3, r2
 800a036:	9304      	str	r3, [sp, #16]
 800a038:	4253      	negs	r3, r2
 800a03a:	9307      	str	r3, [sp, #28]
 800a03c:	2300      	movs	r3, #0
 800a03e:	930a      	str	r3, [sp, #40]	; 0x28
 800a040:	e7bf      	b.n	8009fc2 <_dtoa_r+0x1da>
 800a042:	2300      	movs	r3, #0
 800a044:	9308      	str	r3, [sp, #32]
 800a046:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a048:	2b00      	cmp	r3, #0
 800a04a:	dc55      	bgt.n	800a0f8 <_dtoa_r+0x310>
 800a04c:	2301      	movs	r3, #1
 800a04e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a052:	461a      	mov	r2, r3
 800a054:	9209      	str	r2, [sp, #36]	; 0x24
 800a056:	e00c      	b.n	800a072 <_dtoa_r+0x28a>
 800a058:	2301      	movs	r3, #1
 800a05a:	e7f3      	b.n	800a044 <_dtoa_r+0x25c>
 800a05c:	2300      	movs	r3, #0
 800a05e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a060:	9308      	str	r3, [sp, #32]
 800a062:	9b00      	ldr	r3, [sp, #0]
 800a064:	4413      	add	r3, r2
 800a066:	9302      	str	r3, [sp, #8]
 800a068:	3301      	adds	r3, #1
 800a06a:	2b01      	cmp	r3, #1
 800a06c:	9303      	str	r3, [sp, #12]
 800a06e:	bfb8      	it	lt
 800a070:	2301      	movlt	r3, #1
 800a072:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a074:	2200      	movs	r2, #0
 800a076:	6042      	str	r2, [r0, #4]
 800a078:	2204      	movs	r2, #4
 800a07a:	f102 0614 	add.w	r6, r2, #20
 800a07e:	429e      	cmp	r6, r3
 800a080:	6841      	ldr	r1, [r0, #4]
 800a082:	d93d      	bls.n	800a100 <_dtoa_r+0x318>
 800a084:	4620      	mov	r0, r4
 800a086:	f000 fcb7 	bl	800a9f8 <_Balloc>
 800a08a:	9001      	str	r0, [sp, #4]
 800a08c:	2800      	cmp	r0, #0
 800a08e:	d13b      	bne.n	800a108 <_dtoa_r+0x320>
 800a090:	4b11      	ldr	r3, [pc, #68]	; (800a0d8 <_dtoa_r+0x2f0>)
 800a092:	4602      	mov	r2, r0
 800a094:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a098:	e6c0      	b.n	8009e1c <_dtoa_r+0x34>
 800a09a:	2301      	movs	r3, #1
 800a09c:	e7df      	b.n	800a05e <_dtoa_r+0x276>
 800a09e:	bf00      	nop
 800a0a0:	636f4361 	.word	0x636f4361
 800a0a4:	3fd287a7 	.word	0x3fd287a7
 800a0a8:	8b60c8b3 	.word	0x8b60c8b3
 800a0ac:	3fc68a28 	.word	0x3fc68a28
 800a0b0:	509f79fb 	.word	0x509f79fb
 800a0b4:	3fd34413 	.word	0x3fd34413
 800a0b8:	080152e9 	.word	0x080152e9
 800a0bc:	08015300 	.word	0x08015300
 800a0c0:	7ff00000 	.word	0x7ff00000
 800a0c4:	080152e5 	.word	0x080152e5
 800a0c8:	080152dc 	.word	0x080152dc
 800a0cc:	080152b9 	.word	0x080152b9
 800a0d0:	3ff80000 	.word	0x3ff80000
 800a0d4:	080153f0 	.word	0x080153f0
 800a0d8:	0801535b 	.word	0x0801535b
 800a0dc:	2501      	movs	r5, #1
 800a0de:	2300      	movs	r3, #0
 800a0e0:	9306      	str	r3, [sp, #24]
 800a0e2:	9508      	str	r5, [sp, #32]
 800a0e4:	f04f 33ff 	mov.w	r3, #4294967295
 800a0e8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	2312      	movs	r3, #18
 800a0f0:	e7b0      	b.n	800a054 <_dtoa_r+0x26c>
 800a0f2:	2301      	movs	r3, #1
 800a0f4:	9308      	str	r3, [sp, #32]
 800a0f6:	e7f5      	b.n	800a0e4 <_dtoa_r+0x2fc>
 800a0f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0fa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a0fe:	e7b8      	b.n	800a072 <_dtoa_r+0x28a>
 800a100:	3101      	adds	r1, #1
 800a102:	6041      	str	r1, [r0, #4]
 800a104:	0052      	lsls	r2, r2, #1
 800a106:	e7b8      	b.n	800a07a <_dtoa_r+0x292>
 800a108:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a10a:	9a01      	ldr	r2, [sp, #4]
 800a10c:	601a      	str	r2, [r3, #0]
 800a10e:	9b03      	ldr	r3, [sp, #12]
 800a110:	2b0e      	cmp	r3, #14
 800a112:	f200 809d 	bhi.w	800a250 <_dtoa_r+0x468>
 800a116:	2d00      	cmp	r5, #0
 800a118:	f000 809a 	beq.w	800a250 <_dtoa_r+0x468>
 800a11c:	9b00      	ldr	r3, [sp, #0]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	dd32      	ble.n	800a188 <_dtoa_r+0x3a0>
 800a122:	4ab7      	ldr	r2, [pc, #732]	; (800a400 <_dtoa_r+0x618>)
 800a124:	f003 030f 	and.w	r3, r3, #15
 800a128:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a12c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a130:	9b00      	ldr	r3, [sp, #0]
 800a132:	05d8      	lsls	r0, r3, #23
 800a134:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a138:	d516      	bpl.n	800a168 <_dtoa_r+0x380>
 800a13a:	4bb2      	ldr	r3, [pc, #712]	; (800a404 <_dtoa_r+0x61c>)
 800a13c:	ec51 0b19 	vmov	r0, r1, d9
 800a140:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a144:	f7f6 fb8a 	bl	800085c <__aeabi_ddiv>
 800a148:	f007 070f 	and.w	r7, r7, #15
 800a14c:	4682      	mov	sl, r0
 800a14e:	468b      	mov	fp, r1
 800a150:	2503      	movs	r5, #3
 800a152:	4eac      	ldr	r6, [pc, #688]	; (800a404 <_dtoa_r+0x61c>)
 800a154:	b957      	cbnz	r7, 800a16c <_dtoa_r+0x384>
 800a156:	4642      	mov	r2, r8
 800a158:	464b      	mov	r3, r9
 800a15a:	4650      	mov	r0, sl
 800a15c:	4659      	mov	r1, fp
 800a15e:	f7f6 fb7d 	bl	800085c <__aeabi_ddiv>
 800a162:	4682      	mov	sl, r0
 800a164:	468b      	mov	fp, r1
 800a166:	e028      	b.n	800a1ba <_dtoa_r+0x3d2>
 800a168:	2502      	movs	r5, #2
 800a16a:	e7f2      	b.n	800a152 <_dtoa_r+0x36a>
 800a16c:	07f9      	lsls	r1, r7, #31
 800a16e:	d508      	bpl.n	800a182 <_dtoa_r+0x39a>
 800a170:	4640      	mov	r0, r8
 800a172:	4649      	mov	r1, r9
 800a174:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a178:	f7f6 fa46 	bl	8000608 <__aeabi_dmul>
 800a17c:	3501      	adds	r5, #1
 800a17e:	4680      	mov	r8, r0
 800a180:	4689      	mov	r9, r1
 800a182:	107f      	asrs	r7, r7, #1
 800a184:	3608      	adds	r6, #8
 800a186:	e7e5      	b.n	800a154 <_dtoa_r+0x36c>
 800a188:	f000 809b 	beq.w	800a2c2 <_dtoa_r+0x4da>
 800a18c:	9b00      	ldr	r3, [sp, #0]
 800a18e:	4f9d      	ldr	r7, [pc, #628]	; (800a404 <_dtoa_r+0x61c>)
 800a190:	425e      	negs	r6, r3
 800a192:	4b9b      	ldr	r3, [pc, #620]	; (800a400 <_dtoa_r+0x618>)
 800a194:	f006 020f 	and.w	r2, r6, #15
 800a198:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a19c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1a0:	ec51 0b19 	vmov	r0, r1, d9
 800a1a4:	f7f6 fa30 	bl	8000608 <__aeabi_dmul>
 800a1a8:	1136      	asrs	r6, r6, #4
 800a1aa:	4682      	mov	sl, r0
 800a1ac:	468b      	mov	fp, r1
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	2502      	movs	r5, #2
 800a1b2:	2e00      	cmp	r6, #0
 800a1b4:	d17a      	bne.n	800a2ac <_dtoa_r+0x4c4>
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d1d3      	bne.n	800a162 <_dtoa_r+0x37a>
 800a1ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	f000 8082 	beq.w	800a2c6 <_dtoa_r+0x4de>
 800a1c2:	4b91      	ldr	r3, [pc, #580]	; (800a408 <_dtoa_r+0x620>)
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	4650      	mov	r0, sl
 800a1c8:	4659      	mov	r1, fp
 800a1ca:	f7f6 fc8f 	bl	8000aec <__aeabi_dcmplt>
 800a1ce:	2800      	cmp	r0, #0
 800a1d0:	d079      	beq.n	800a2c6 <_dtoa_r+0x4de>
 800a1d2:	9b03      	ldr	r3, [sp, #12]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d076      	beq.n	800a2c6 <_dtoa_r+0x4de>
 800a1d8:	9b02      	ldr	r3, [sp, #8]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	dd36      	ble.n	800a24c <_dtoa_r+0x464>
 800a1de:	9b00      	ldr	r3, [sp, #0]
 800a1e0:	4650      	mov	r0, sl
 800a1e2:	4659      	mov	r1, fp
 800a1e4:	1e5f      	subs	r7, r3, #1
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	4b88      	ldr	r3, [pc, #544]	; (800a40c <_dtoa_r+0x624>)
 800a1ea:	f7f6 fa0d 	bl	8000608 <__aeabi_dmul>
 800a1ee:	9e02      	ldr	r6, [sp, #8]
 800a1f0:	4682      	mov	sl, r0
 800a1f2:	468b      	mov	fp, r1
 800a1f4:	3501      	adds	r5, #1
 800a1f6:	4628      	mov	r0, r5
 800a1f8:	f7f6 f99c 	bl	8000534 <__aeabi_i2d>
 800a1fc:	4652      	mov	r2, sl
 800a1fe:	465b      	mov	r3, fp
 800a200:	f7f6 fa02 	bl	8000608 <__aeabi_dmul>
 800a204:	4b82      	ldr	r3, [pc, #520]	; (800a410 <_dtoa_r+0x628>)
 800a206:	2200      	movs	r2, #0
 800a208:	f7f6 f848 	bl	800029c <__adddf3>
 800a20c:	46d0      	mov	r8, sl
 800a20e:	46d9      	mov	r9, fp
 800a210:	4682      	mov	sl, r0
 800a212:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a216:	2e00      	cmp	r6, #0
 800a218:	d158      	bne.n	800a2cc <_dtoa_r+0x4e4>
 800a21a:	4b7e      	ldr	r3, [pc, #504]	; (800a414 <_dtoa_r+0x62c>)
 800a21c:	2200      	movs	r2, #0
 800a21e:	4640      	mov	r0, r8
 800a220:	4649      	mov	r1, r9
 800a222:	f7f6 f839 	bl	8000298 <__aeabi_dsub>
 800a226:	4652      	mov	r2, sl
 800a228:	465b      	mov	r3, fp
 800a22a:	4680      	mov	r8, r0
 800a22c:	4689      	mov	r9, r1
 800a22e:	f7f6 fc7b 	bl	8000b28 <__aeabi_dcmpgt>
 800a232:	2800      	cmp	r0, #0
 800a234:	f040 8295 	bne.w	800a762 <_dtoa_r+0x97a>
 800a238:	4652      	mov	r2, sl
 800a23a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a23e:	4640      	mov	r0, r8
 800a240:	4649      	mov	r1, r9
 800a242:	f7f6 fc53 	bl	8000aec <__aeabi_dcmplt>
 800a246:	2800      	cmp	r0, #0
 800a248:	f040 8289 	bne.w	800a75e <_dtoa_r+0x976>
 800a24c:	ec5b ab19 	vmov	sl, fp, d9
 800a250:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a252:	2b00      	cmp	r3, #0
 800a254:	f2c0 8148 	blt.w	800a4e8 <_dtoa_r+0x700>
 800a258:	9a00      	ldr	r2, [sp, #0]
 800a25a:	2a0e      	cmp	r2, #14
 800a25c:	f300 8144 	bgt.w	800a4e8 <_dtoa_r+0x700>
 800a260:	4b67      	ldr	r3, [pc, #412]	; (800a400 <_dtoa_r+0x618>)
 800a262:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a266:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a26a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	f280 80d5 	bge.w	800a41c <_dtoa_r+0x634>
 800a272:	9b03      	ldr	r3, [sp, #12]
 800a274:	2b00      	cmp	r3, #0
 800a276:	f300 80d1 	bgt.w	800a41c <_dtoa_r+0x634>
 800a27a:	f040 826f 	bne.w	800a75c <_dtoa_r+0x974>
 800a27e:	4b65      	ldr	r3, [pc, #404]	; (800a414 <_dtoa_r+0x62c>)
 800a280:	2200      	movs	r2, #0
 800a282:	4640      	mov	r0, r8
 800a284:	4649      	mov	r1, r9
 800a286:	f7f6 f9bf 	bl	8000608 <__aeabi_dmul>
 800a28a:	4652      	mov	r2, sl
 800a28c:	465b      	mov	r3, fp
 800a28e:	f7f6 fc41 	bl	8000b14 <__aeabi_dcmpge>
 800a292:	9e03      	ldr	r6, [sp, #12]
 800a294:	4637      	mov	r7, r6
 800a296:	2800      	cmp	r0, #0
 800a298:	f040 8245 	bne.w	800a726 <_dtoa_r+0x93e>
 800a29c:	9d01      	ldr	r5, [sp, #4]
 800a29e:	2331      	movs	r3, #49	; 0x31
 800a2a0:	f805 3b01 	strb.w	r3, [r5], #1
 800a2a4:	9b00      	ldr	r3, [sp, #0]
 800a2a6:	3301      	adds	r3, #1
 800a2a8:	9300      	str	r3, [sp, #0]
 800a2aa:	e240      	b.n	800a72e <_dtoa_r+0x946>
 800a2ac:	07f2      	lsls	r2, r6, #31
 800a2ae:	d505      	bpl.n	800a2bc <_dtoa_r+0x4d4>
 800a2b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a2b4:	f7f6 f9a8 	bl	8000608 <__aeabi_dmul>
 800a2b8:	3501      	adds	r5, #1
 800a2ba:	2301      	movs	r3, #1
 800a2bc:	1076      	asrs	r6, r6, #1
 800a2be:	3708      	adds	r7, #8
 800a2c0:	e777      	b.n	800a1b2 <_dtoa_r+0x3ca>
 800a2c2:	2502      	movs	r5, #2
 800a2c4:	e779      	b.n	800a1ba <_dtoa_r+0x3d2>
 800a2c6:	9f00      	ldr	r7, [sp, #0]
 800a2c8:	9e03      	ldr	r6, [sp, #12]
 800a2ca:	e794      	b.n	800a1f6 <_dtoa_r+0x40e>
 800a2cc:	9901      	ldr	r1, [sp, #4]
 800a2ce:	4b4c      	ldr	r3, [pc, #304]	; (800a400 <_dtoa_r+0x618>)
 800a2d0:	4431      	add	r1, r6
 800a2d2:	910d      	str	r1, [sp, #52]	; 0x34
 800a2d4:	9908      	ldr	r1, [sp, #32]
 800a2d6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a2da:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a2de:	2900      	cmp	r1, #0
 800a2e0:	d043      	beq.n	800a36a <_dtoa_r+0x582>
 800a2e2:	494d      	ldr	r1, [pc, #308]	; (800a418 <_dtoa_r+0x630>)
 800a2e4:	2000      	movs	r0, #0
 800a2e6:	f7f6 fab9 	bl	800085c <__aeabi_ddiv>
 800a2ea:	4652      	mov	r2, sl
 800a2ec:	465b      	mov	r3, fp
 800a2ee:	f7f5 ffd3 	bl	8000298 <__aeabi_dsub>
 800a2f2:	9d01      	ldr	r5, [sp, #4]
 800a2f4:	4682      	mov	sl, r0
 800a2f6:	468b      	mov	fp, r1
 800a2f8:	4649      	mov	r1, r9
 800a2fa:	4640      	mov	r0, r8
 800a2fc:	f7f6 fc34 	bl	8000b68 <__aeabi_d2iz>
 800a300:	4606      	mov	r6, r0
 800a302:	f7f6 f917 	bl	8000534 <__aeabi_i2d>
 800a306:	4602      	mov	r2, r0
 800a308:	460b      	mov	r3, r1
 800a30a:	4640      	mov	r0, r8
 800a30c:	4649      	mov	r1, r9
 800a30e:	f7f5 ffc3 	bl	8000298 <__aeabi_dsub>
 800a312:	3630      	adds	r6, #48	; 0x30
 800a314:	f805 6b01 	strb.w	r6, [r5], #1
 800a318:	4652      	mov	r2, sl
 800a31a:	465b      	mov	r3, fp
 800a31c:	4680      	mov	r8, r0
 800a31e:	4689      	mov	r9, r1
 800a320:	f7f6 fbe4 	bl	8000aec <__aeabi_dcmplt>
 800a324:	2800      	cmp	r0, #0
 800a326:	d163      	bne.n	800a3f0 <_dtoa_r+0x608>
 800a328:	4642      	mov	r2, r8
 800a32a:	464b      	mov	r3, r9
 800a32c:	4936      	ldr	r1, [pc, #216]	; (800a408 <_dtoa_r+0x620>)
 800a32e:	2000      	movs	r0, #0
 800a330:	f7f5 ffb2 	bl	8000298 <__aeabi_dsub>
 800a334:	4652      	mov	r2, sl
 800a336:	465b      	mov	r3, fp
 800a338:	f7f6 fbd8 	bl	8000aec <__aeabi_dcmplt>
 800a33c:	2800      	cmp	r0, #0
 800a33e:	f040 80b5 	bne.w	800a4ac <_dtoa_r+0x6c4>
 800a342:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a344:	429d      	cmp	r5, r3
 800a346:	d081      	beq.n	800a24c <_dtoa_r+0x464>
 800a348:	4b30      	ldr	r3, [pc, #192]	; (800a40c <_dtoa_r+0x624>)
 800a34a:	2200      	movs	r2, #0
 800a34c:	4650      	mov	r0, sl
 800a34e:	4659      	mov	r1, fp
 800a350:	f7f6 f95a 	bl	8000608 <__aeabi_dmul>
 800a354:	4b2d      	ldr	r3, [pc, #180]	; (800a40c <_dtoa_r+0x624>)
 800a356:	4682      	mov	sl, r0
 800a358:	468b      	mov	fp, r1
 800a35a:	4640      	mov	r0, r8
 800a35c:	4649      	mov	r1, r9
 800a35e:	2200      	movs	r2, #0
 800a360:	f7f6 f952 	bl	8000608 <__aeabi_dmul>
 800a364:	4680      	mov	r8, r0
 800a366:	4689      	mov	r9, r1
 800a368:	e7c6      	b.n	800a2f8 <_dtoa_r+0x510>
 800a36a:	4650      	mov	r0, sl
 800a36c:	4659      	mov	r1, fp
 800a36e:	f7f6 f94b 	bl	8000608 <__aeabi_dmul>
 800a372:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a374:	9d01      	ldr	r5, [sp, #4]
 800a376:	930f      	str	r3, [sp, #60]	; 0x3c
 800a378:	4682      	mov	sl, r0
 800a37a:	468b      	mov	fp, r1
 800a37c:	4649      	mov	r1, r9
 800a37e:	4640      	mov	r0, r8
 800a380:	f7f6 fbf2 	bl	8000b68 <__aeabi_d2iz>
 800a384:	4606      	mov	r6, r0
 800a386:	f7f6 f8d5 	bl	8000534 <__aeabi_i2d>
 800a38a:	3630      	adds	r6, #48	; 0x30
 800a38c:	4602      	mov	r2, r0
 800a38e:	460b      	mov	r3, r1
 800a390:	4640      	mov	r0, r8
 800a392:	4649      	mov	r1, r9
 800a394:	f7f5 ff80 	bl	8000298 <__aeabi_dsub>
 800a398:	f805 6b01 	strb.w	r6, [r5], #1
 800a39c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a39e:	429d      	cmp	r5, r3
 800a3a0:	4680      	mov	r8, r0
 800a3a2:	4689      	mov	r9, r1
 800a3a4:	f04f 0200 	mov.w	r2, #0
 800a3a8:	d124      	bne.n	800a3f4 <_dtoa_r+0x60c>
 800a3aa:	4b1b      	ldr	r3, [pc, #108]	; (800a418 <_dtoa_r+0x630>)
 800a3ac:	4650      	mov	r0, sl
 800a3ae:	4659      	mov	r1, fp
 800a3b0:	f7f5 ff74 	bl	800029c <__adddf3>
 800a3b4:	4602      	mov	r2, r0
 800a3b6:	460b      	mov	r3, r1
 800a3b8:	4640      	mov	r0, r8
 800a3ba:	4649      	mov	r1, r9
 800a3bc:	f7f6 fbb4 	bl	8000b28 <__aeabi_dcmpgt>
 800a3c0:	2800      	cmp	r0, #0
 800a3c2:	d173      	bne.n	800a4ac <_dtoa_r+0x6c4>
 800a3c4:	4652      	mov	r2, sl
 800a3c6:	465b      	mov	r3, fp
 800a3c8:	4913      	ldr	r1, [pc, #76]	; (800a418 <_dtoa_r+0x630>)
 800a3ca:	2000      	movs	r0, #0
 800a3cc:	f7f5 ff64 	bl	8000298 <__aeabi_dsub>
 800a3d0:	4602      	mov	r2, r0
 800a3d2:	460b      	mov	r3, r1
 800a3d4:	4640      	mov	r0, r8
 800a3d6:	4649      	mov	r1, r9
 800a3d8:	f7f6 fb88 	bl	8000aec <__aeabi_dcmplt>
 800a3dc:	2800      	cmp	r0, #0
 800a3de:	f43f af35 	beq.w	800a24c <_dtoa_r+0x464>
 800a3e2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a3e4:	1e6b      	subs	r3, r5, #1
 800a3e6:	930f      	str	r3, [sp, #60]	; 0x3c
 800a3e8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a3ec:	2b30      	cmp	r3, #48	; 0x30
 800a3ee:	d0f8      	beq.n	800a3e2 <_dtoa_r+0x5fa>
 800a3f0:	9700      	str	r7, [sp, #0]
 800a3f2:	e049      	b.n	800a488 <_dtoa_r+0x6a0>
 800a3f4:	4b05      	ldr	r3, [pc, #20]	; (800a40c <_dtoa_r+0x624>)
 800a3f6:	f7f6 f907 	bl	8000608 <__aeabi_dmul>
 800a3fa:	4680      	mov	r8, r0
 800a3fc:	4689      	mov	r9, r1
 800a3fe:	e7bd      	b.n	800a37c <_dtoa_r+0x594>
 800a400:	080153f0 	.word	0x080153f0
 800a404:	080153c8 	.word	0x080153c8
 800a408:	3ff00000 	.word	0x3ff00000
 800a40c:	40240000 	.word	0x40240000
 800a410:	401c0000 	.word	0x401c0000
 800a414:	40140000 	.word	0x40140000
 800a418:	3fe00000 	.word	0x3fe00000
 800a41c:	9d01      	ldr	r5, [sp, #4]
 800a41e:	4656      	mov	r6, sl
 800a420:	465f      	mov	r7, fp
 800a422:	4642      	mov	r2, r8
 800a424:	464b      	mov	r3, r9
 800a426:	4630      	mov	r0, r6
 800a428:	4639      	mov	r1, r7
 800a42a:	f7f6 fa17 	bl	800085c <__aeabi_ddiv>
 800a42e:	f7f6 fb9b 	bl	8000b68 <__aeabi_d2iz>
 800a432:	4682      	mov	sl, r0
 800a434:	f7f6 f87e 	bl	8000534 <__aeabi_i2d>
 800a438:	4642      	mov	r2, r8
 800a43a:	464b      	mov	r3, r9
 800a43c:	f7f6 f8e4 	bl	8000608 <__aeabi_dmul>
 800a440:	4602      	mov	r2, r0
 800a442:	460b      	mov	r3, r1
 800a444:	4630      	mov	r0, r6
 800a446:	4639      	mov	r1, r7
 800a448:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a44c:	f7f5 ff24 	bl	8000298 <__aeabi_dsub>
 800a450:	f805 6b01 	strb.w	r6, [r5], #1
 800a454:	9e01      	ldr	r6, [sp, #4]
 800a456:	9f03      	ldr	r7, [sp, #12]
 800a458:	1bae      	subs	r6, r5, r6
 800a45a:	42b7      	cmp	r7, r6
 800a45c:	4602      	mov	r2, r0
 800a45e:	460b      	mov	r3, r1
 800a460:	d135      	bne.n	800a4ce <_dtoa_r+0x6e6>
 800a462:	f7f5 ff1b 	bl	800029c <__adddf3>
 800a466:	4642      	mov	r2, r8
 800a468:	464b      	mov	r3, r9
 800a46a:	4606      	mov	r6, r0
 800a46c:	460f      	mov	r7, r1
 800a46e:	f7f6 fb5b 	bl	8000b28 <__aeabi_dcmpgt>
 800a472:	b9d0      	cbnz	r0, 800a4aa <_dtoa_r+0x6c2>
 800a474:	4642      	mov	r2, r8
 800a476:	464b      	mov	r3, r9
 800a478:	4630      	mov	r0, r6
 800a47a:	4639      	mov	r1, r7
 800a47c:	f7f6 fb2c 	bl	8000ad8 <__aeabi_dcmpeq>
 800a480:	b110      	cbz	r0, 800a488 <_dtoa_r+0x6a0>
 800a482:	f01a 0f01 	tst.w	sl, #1
 800a486:	d110      	bne.n	800a4aa <_dtoa_r+0x6c2>
 800a488:	4620      	mov	r0, r4
 800a48a:	ee18 1a10 	vmov	r1, s16
 800a48e:	f000 faf3 	bl	800aa78 <_Bfree>
 800a492:	2300      	movs	r3, #0
 800a494:	9800      	ldr	r0, [sp, #0]
 800a496:	702b      	strb	r3, [r5, #0]
 800a498:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a49a:	3001      	adds	r0, #1
 800a49c:	6018      	str	r0, [r3, #0]
 800a49e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	f43f acf1 	beq.w	8009e88 <_dtoa_r+0xa0>
 800a4a6:	601d      	str	r5, [r3, #0]
 800a4a8:	e4ee      	b.n	8009e88 <_dtoa_r+0xa0>
 800a4aa:	9f00      	ldr	r7, [sp, #0]
 800a4ac:	462b      	mov	r3, r5
 800a4ae:	461d      	mov	r5, r3
 800a4b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a4b4:	2a39      	cmp	r2, #57	; 0x39
 800a4b6:	d106      	bne.n	800a4c6 <_dtoa_r+0x6de>
 800a4b8:	9a01      	ldr	r2, [sp, #4]
 800a4ba:	429a      	cmp	r2, r3
 800a4bc:	d1f7      	bne.n	800a4ae <_dtoa_r+0x6c6>
 800a4be:	9901      	ldr	r1, [sp, #4]
 800a4c0:	2230      	movs	r2, #48	; 0x30
 800a4c2:	3701      	adds	r7, #1
 800a4c4:	700a      	strb	r2, [r1, #0]
 800a4c6:	781a      	ldrb	r2, [r3, #0]
 800a4c8:	3201      	adds	r2, #1
 800a4ca:	701a      	strb	r2, [r3, #0]
 800a4cc:	e790      	b.n	800a3f0 <_dtoa_r+0x608>
 800a4ce:	4ba6      	ldr	r3, [pc, #664]	; (800a768 <_dtoa_r+0x980>)
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	f7f6 f899 	bl	8000608 <__aeabi_dmul>
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	2300      	movs	r3, #0
 800a4da:	4606      	mov	r6, r0
 800a4dc:	460f      	mov	r7, r1
 800a4de:	f7f6 fafb 	bl	8000ad8 <__aeabi_dcmpeq>
 800a4e2:	2800      	cmp	r0, #0
 800a4e4:	d09d      	beq.n	800a422 <_dtoa_r+0x63a>
 800a4e6:	e7cf      	b.n	800a488 <_dtoa_r+0x6a0>
 800a4e8:	9a08      	ldr	r2, [sp, #32]
 800a4ea:	2a00      	cmp	r2, #0
 800a4ec:	f000 80d7 	beq.w	800a69e <_dtoa_r+0x8b6>
 800a4f0:	9a06      	ldr	r2, [sp, #24]
 800a4f2:	2a01      	cmp	r2, #1
 800a4f4:	f300 80ba 	bgt.w	800a66c <_dtoa_r+0x884>
 800a4f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a4fa:	2a00      	cmp	r2, #0
 800a4fc:	f000 80b2 	beq.w	800a664 <_dtoa_r+0x87c>
 800a500:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a504:	9e07      	ldr	r6, [sp, #28]
 800a506:	9d04      	ldr	r5, [sp, #16]
 800a508:	9a04      	ldr	r2, [sp, #16]
 800a50a:	441a      	add	r2, r3
 800a50c:	9204      	str	r2, [sp, #16]
 800a50e:	9a05      	ldr	r2, [sp, #20]
 800a510:	2101      	movs	r1, #1
 800a512:	441a      	add	r2, r3
 800a514:	4620      	mov	r0, r4
 800a516:	9205      	str	r2, [sp, #20]
 800a518:	f000 fb66 	bl	800abe8 <__i2b>
 800a51c:	4607      	mov	r7, r0
 800a51e:	2d00      	cmp	r5, #0
 800a520:	dd0c      	ble.n	800a53c <_dtoa_r+0x754>
 800a522:	9b05      	ldr	r3, [sp, #20]
 800a524:	2b00      	cmp	r3, #0
 800a526:	dd09      	ble.n	800a53c <_dtoa_r+0x754>
 800a528:	42ab      	cmp	r3, r5
 800a52a:	9a04      	ldr	r2, [sp, #16]
 800a52c:	bfa8      	it	ge
 800a52e:	462b      	movge	r3, r5
 800a530:	1ad2      	subs	r2, r2, r3
 800a532:	9204      	str	r2, [sp, #16]
 800a534:	9a05      	ldr	r2, [sp, #20]
 800a536:	1aed      	subs	r5, r5, r3
 800a538:	1ad3      	subs	r3, r2, r3
 800a53a:	9305      	str	r3, [sp, #20]
 800a53c:	9b07      	ldr	r3, [sp, #28]
 800a53e:	b31b      	cbz	r3, 800a588 <_dtoa_r+0x7a0>
 800a540:	9b08      	ldr	r3, [sp, #32]
 800a542:	2b00      	cmp	r3, #0
 800a544:	f000 80af 	beq.w	800a6a6 <_dtoa_r+0x8be>
 800a548:	2e00      	cmp	r6, #0
 800a54a:	dd13      	ble.n	800a574 <_dtoa_r+0x78c>
 800a54c:	4639      	mov	r1, r7
 800a54e:	4632      	mov	r2, r6
 800a550:	4620      	mov	r0, r4
 800a552:	f000 fc09 	bl	800ad68 <__pow5mult>
 800a556:	ee18 2a10 	vmov	r2, s16
 800a55a:	4601      	mov	r1, r0
 800a55c:	4607      	mov	r7, r0
 800a55e:	4620      	mov	r0, r4
 800a560:	f000 fb58 	bl	800ac14 <__multiply>
 800a564:	ee18 1a10 	vmov	r1, s16
 800a568:	4680      	mov	r8, r0
 800a56a:	4620      	mov	r0, r4
 800a56c:	f000 fa84 	bl	800aa78 <_Bfree>
 800a570:	ee08 8a10 	vmov	s16, r8
 800a574:	9b07      	ldr	r3, [sp, #28]
 800a576:	1b9a      	subs	r2, r3, r6
 800a578:	d006      	beq.n	800a588 <_dtoa_r+0x7a0>
 800a57a:	ee18 1a10 	vmov	r1, s16
 800a57e:	4620      	mov	r0, r4
 800a580:	f000 fbf2 	bl	800ad68 <__pow5mult>
 800a584:	ee08 0a10 	vmov	s16, r0
 800a588:	2101      	movs	r1, #1
 800a58a:	4620      	mov	r0, r4
 800a58c:	f000 fb2c 	bl	800abe8 <__i2b>
 800a590:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a592:	2b00      	cmp	r3, #0
 800a594:	4606      	mov	r6, r0
 800a596:	f340 8088 	ble.w	800a6aa <_dtoa_r+0x8c2>
 800a59a:	461a      	mov	r2, r3
 800a59c:	4601      	mov	r1, r0
 800a59e:	4620      	mov	r0, r4
 800a5a0:	f000 fbe2 	bl	800ad68 <__pow5mult>
 800a5a4:	9b06      	ldr	r3, [sp, #24]
 800a5a6:	2b01      	cmp	r3, #1
 800a5a8:	4606      	mov	r6, r0
 800a5aa:	f340 8081 	ble.w	800a6b0 <_dtoa_r+0x8c8>
 800a5ae:	f04f 0800 	mov.w	r8, #0
 800a5b2:	6933      	ldr	r3, [r6, #16]
 800a5b4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a5b8:	6918      	ldr	r0, [r3, #16]
 800a5ba:	f000 fac5 	bl	800ab48 <__hi0bits>
 800a5be:	f1c0 0020 	rsb	r0, r0, #32
 800a5c2:	9b05      	ldr	r3, [sp, #20]
 800a5c4:	4418      	add	r0, r3
 800a5c6:	f010 001f 	ands.w	r0, r0, #31
 800a5ca:	f000 8092 	beq.w	800a6f2 <_dtoa_r+0x90a>
 800a5ce:	f1c0 0320 	rsb	r3, r0, #32
 800a5d2:	2b04      	cmp	r3, #4
 800a5d4:	f340 808a 	ble.w	800a6ec <_dtoa_r+0x904>
 800a5d8:	f1c0 001c 	rsb	r0, r0, #28
 800a5dc:	9b04      	ldr	r3, [sp, #16]
 800a5de:	4403      	add	r3, r0
 800a5e0:	9304      	str	r3, [sp, #16]
 800a5e2:	9b05      	ldr	r3, [sp, #20]
 800a5e4:	4403      	add	r3, r0
 800a5e6:	4405      	add	r5, r0
 800a5e8:	9305      	str	r3, [sp, #20]
 800a5ea:	9b04      	ldr	r3, [sp, #16]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	dd07      	ble.n	800a600 <_dtoa_r+0x818>
 800a5f0:	ee18 1a10 	vmov	r1, s16
 800a5f4:	461a      	mov	r2, r3
 800a5f6:	4620      	mov	r0, r4
 800a5f8:	f000 fc10 	bl	800ae1c <__lshift>
 800a5fc:	ee08 0a10 	vmov	s16, r0
 800a600:	9b05      	ldr	r3, [sp, #20]
 800a602:	2b00      	cmp	r3, #0
 800a604:	dd05      	ble.n	800a612 <_dtoa_r+0x82a>
 800a606:	4631      	mov	r1, r6
 800a608:	461a      	mov	r2, r3
 800a60a:	4620      	mov	r0, r4
 800a60c:	f000 fc06 	bl	800ae1c <__lshift>
 800a610:	4606      	mov	r6, r0
 800a612:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a614:	2b00      	cmp	r3, #0
 800a616:	d06e      	beq.n	800a6f6 <_dtoa_r+0x90e>
 800a618:	ee18 0a10 	vmov	r0, s16
 800a61c:	4631      	mov	r1, r6
 800a61e:	f000 fc6d 	bl	800aefc <__mcmp>
 800a622:	2800      	cmp	r0, #0
 800a624:	da67      	bge.n	800a6f6 <_dtoa_r+0x90e>
 800a626:	9b00      	ldr	r3, [sp, #0]
 800a628:	3b01      	subs	r3, #1
 800a62a:	ee18 1a10 	vmov	r1, s16
 800a62e:	9300      	str	r3, [sp, #0]
 800a630:	220a      	movs	r2, #10
 800a632:	2300      	movs	r3, #0
 800a634:	4620      	mov	r0, r4
 800a636:	f000 fa41 	bl	800aabc <__multadd>
 800a63a:	9b08      	ldr	r3, [sp, #32]
 800a63c:	ee08 0a10 	vmov	s16, r0
 800a640:	2b00      	cmp	r3, #0
 800a642:	f000 81b1 	beq.w	800a9a8 <_dtoa_r+0xbc0>
 800a646:	2300      	movs	r3, #0
 800a648:	4639      	mov	r1, r7
 800a64a:	220a      	movs	r2, #10
 800a64c:	4620      	mov	r0, r4
 800a64e:	f000 fa35 	bl	800aabc <__multadd>
 800a652:	9b02      	ldr	r3, [sp, #8]
 800a654:	2b00      	cmp	r3, #0
 800a656:	4607      	mov	r7, r0
 800a658:	f300 808e 	bgt.w	800a778 <_dtoa_r+0x990>
 800a65c:	9b06      	ldr	r3, [sp, #24]
 800a65e:	2b02      	cmp	r3, #2
 800a660:	dc51      	bgt.n	800a706 <_dtoa_r+0x91e>
 800a662:	e089      	b.n	800a778 <_dtoa_r+0x990>
 800a664:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a666:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a66a:	e74b      	b.n	800a504 <_dtoa_r+0x71c>
 800a66c:	9b03      	ldr	r3, [sp, #12]
 800a66e:	1e5e      	subs	r6, r3, #1
 800a670:	9b07      	ldr	r3, [sp, #28]
 800a672:	42b3      	cmp	r3, r6
 800a674:	bfbf      	itttt	lt
 800a676:	9b07      	ldrlt	r3, [sp, #28]
 800a678:	9607      	strlt	r6, [sp, #28]
 800a67a:	1af2      	sublt	r2, r6, r3
 800a67c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a67e:	bfb6      	itet	lt
 800a680:	189b      	addlt	r3, r3, r2
 800a682:	1b9e      	subge	r6, r3, r6
 800a684:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a686:	9b03      	ldr	r3, [sp, #12]
 800a688:	bfb8      	it	lt
 800a68a:	2600      	movlt	r6, #0
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	bfb7      	itett	lt
 800a690:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a694:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a698:	1a9d      	sublt	r5, r3, r2
 800a69a:	2300      	movlt	r3, #0
 800a69c:	e734      	b.n	800a508 <_dtoa_r+0x720>
 800a69e:	9e07      	ldr	r6, [sp, #28]
 800a6a0:	9d04      	ldr	r5, [sp, #16]
 800a6a2:	9f08      	ldr	r7, [sp, #32]
 800a6a4:	e73b      	b.n	800a51e <_dtoa_r+0x736>
 800a6a6:	9a07      	ldr	r2, [sp, #28]
 800a6a8:	e767      	b.n	800a57a <_dtoa_r+0x792>
 800a6aa:	9b06      	ldr	r3, [sp, #24]
 800a6ac:	2b01      	cmp	r3, #1
 800a6ae:	dc18      	bgt.n	800a6e2 <_dtoa_r+0x8fa>
 800a6b0:	f1ba 0f00 	cmp.w	sl, #0
 800a6b4:	d115      	bne.n	800a6e2 <_dtoa_r+0x8fa>
 800a6b6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a6ba:	b993      	cbnz	r3, 800a6e2 <_dtoa_r+0x8fa>
 800a6bc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a6c0:	0d1b      	lsrs	r3, r3, #20
 800a6c2:	051b      	lsls	r3, r3, #20
 800a6c4:	b183      	cbz	r3, 800a6e8 <_dtoa_r+0x900>
 800a6c6:	9b04      	ldr	r3, [sp, #16]
 800a6c8:	3301      	adds	r3, #1
 800a6ca:	9304      	str	r3, [sp, #16]
 800a6cc:	9b05      	ldr	r3, [sp, #20]
 800a6ce:	3301      	adds	r3, #1
 800a6d0:	9305      	str	r3, [sp, #20]
 800a6d2:	f04f 0801 	mov.w	r8, #1
 800a6d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	f47f af6a 	bne.w	800a5b2 <_dtoa_r+0x7ca>
 800a6de:	2001      	movs	r0, #1
 800a6e0:	e76f      	b.n	800a5c2 <_dtoa_r+0x7da>
 800a6e2:	f04f 0800 	mov.w	r8, #0
 800a6e6:	e7f6      	b.n	800a6d6 <_dtoa_r+0x8ee>
 800a6e8:	4698      	mov	r8, r3
 800a6ea:	e7f4      	b.n	800a6d6 <_dtoa_r+0x8ee>
 800a6ec:	f43f af7d 	beq.w	800a5ea <_dtoa_r+0x802>
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	301c      	adds	r0, #28
 800a6f4:	e772      	b.n	800a5dc <_dtoa_r+0x7f4>
 800a6f6:	9b03      	ldr	r3, [sp, #12]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	dc37      	bgt.n	800a76c <_dtoa_r+0x984>
 800a6fc:	9b06      	ldr	r3, [sp, #24]
 800a6fe:	2b02      	cmp	r3, #2
 800a700:	dd34      	ble.n	800a76c <_dtoa_r+0x984>
 800a702:	9b03      	ldr	r3, [sp, #12]
 800a704:	9302      	str	r3, [sp, #8]
 800a706:	9b02      	ldr	r3, [sp, #8]
 800a708:	b96b      	cbnz	r3, 800a726 <_dtoa_r+0x93e>
 800a70a:	4631      	mov	r1, r6
 800a70c:	2205      	movs	r2, #5
 800a70e:	4620      	mov	r0, r4
 800a710:	f000 f9d4 	bl	800aabc <__multadd>
 800a714:	4601      	mov	r1, r0
 800a716:	4606      	mov	r6, r0
 800a718:	ee18 0a10 	vmov	r0, s16
 800a71c:	f000 fbee 	bl	800aefc <__mcmp>
 800a720:	2800      	cmp	r0, #0
 800a722:	f73f adbb 	bgt.w	800a29c <_dtoa_r+0x4b4>
 800a726:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a728:	9d01      	ldr	r5, [sp, #4]
 800a72a:	43db      	mvns	r3, r3
 800a72c:	9300      	str	r3, [sp, #0]
 800a72e:	f04f 0800 	mov.w	r8, #0
 800a732:	4631      	mov	r1, r6
 800a734:	4620      	mov	r0, r4
 800a736:	f000 f99f 	bl	800aa78 <_Bfree>
 800a73a:	2f00      	cmp	r7, #0
 800a73c:	f43f aea4 	beq.w	800a488 <_dtoa_r+0x6a0>
 800a740:	f1b8 0f00 	cmp.w	r8, #0
 800a744:	d005      	beq.n	800a752 <_dtoa_r+0x96a>
 800a746:	45b8      	cmp	r8, r7
 800a748:	d003      	beq.n	800a752 <_dtoa_r+0x96a>
 800a74a:	4641      	mov	r1, r8
 800a74c:	4620      	mov	r0, r4
 800a74e:	f000 f993 	bl	800aa78 <_Bfree>
 800a752:	4639      	mov	r1, r7
 800a754:	4620      	mov	r0, r4
 800a756:	f000 f98f 	bl	800aa78 <_Bfree>
 800a75a:	e695      	b.n	800a488 <_dtoa_r+0x6a0>
 800a75c:	2600      	movs	r6, #0
 800a75e:	4637      	mov	r7, r6
 800a760:	e7e1      	b.n	800a726 <_dtoa_r+0x93e>
 800a762:	9700      	str	r7, [sp, #0]
 800a764:	4637      	mov	r7, r6
 800a766:	e599      	b.n	800a29c <_dtoa_r+0x4b4>
 800a768:	40240000 	.word	0x40240000
 800a76c:	9b08      	ldr	r3, [sp, #32]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	f000 80ca 	beq.w	800a908 <_dtoa_r+0xb20>
 800a774:	9b03      	ldr	r3, [sp, #12]
 800a776:	9302      	str	r3, [sp, #8]
 800a778:	2d00      	cmp	r5, #0
 800a77a:	dd05      	ble.n	800a788 <_dtoa_r+0x9a0>
 800a77c:	4639      	mov	r1, r7
 800a77e:	462a      	mov	r2, r5
 800a780:	4620      	mov	r0, r4
 800a782:	f000 fb4b 	bl	800ae1c <__lshift>
 800a786:	4607      	mov	r7, r0
 800a788:	f1b8 0f00 	cmp.w	r8, #0
 800a78c:	d05b      	beq.n	800a846 <_dtoa_r+0xa5e>
 800a78e:	6879      	ldr	r1, [r7, #4]
 800a790:	4620      	mov	r0, r4
 800a792:	f000 f931 	bl	800a9f8 <_Balloc>
 800a796:	4605      	mov	r5, r0
 800a798:	b928      	cbnz	r0, 800a7a6 <_dtoa_r+0x9be>
 800a79a:	4b87      	ldr	r3, [pc, #540]	; (800a9b8 <_dtoa_r+0xbd0>)
 800a79c:	4602      	mov	r2, r0
 800a79e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a7a2:	f7ff bb3b 	b.w	8009e1c <_dtoa_r+0x34>
 800a7a6:	693a      	ldr	r2, [r7, #16]
 800a7a8:	3202      	adds	r2, #2
 800a7aa:	0092      	lsls	r2, r2, #2
 800a7ac:	f107 010c 	add.w	r1, r7, #12
 800a7b0:	300c      	adds	r0, #12
 800a7b2:	f000 f913 	bl	800a9dc <memcpy>
 800a7b6:	2201      	movs	r2, #1
 800a7b8:	4629      	mov	r1, r5
 800a7ba:	4620      	mov	r0, r4
 800a7bc:	f000 fb2e 	bl	800ae1c <__lshift>
 800a7c0:	9b01      	ldr	r3, [sp, #4]
 800a7c2:	f103 0901 	add.w	r9, r3, #1
 800a7c6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a7ca:	4413      	add	r3, r2
 800a7cc:	9305      	str	r3, [sp, #20]
 800a7ce:	f00a 0301 	and.w	r3, sl, #1
 800a7d2:	46b8      	mov	r8, r7
 800a7d4:	9304      	str	r3, [sp, #16]
 800a7d6:	4607      	mov	r7, r0
 800a7d8:	4631      	mov	r1, r6
 800a7da:	ee18 0a10 	vmov	r0, s16
 800a7de:	f7ff fa77 	bl	8009cd0 <quorem>
 800a7e2:	4641      	mov	r1, r8
 800a7e4:	9002      	str	r0, [sp, #8]
 800a7e6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a7ea:	ee18 0a10 	vmov	r0, s16
 800a7ee:	f000 fb85 	bl	800aefc <__mcmp>
 800a7f2:	463a      	mov	r2, r7
 800a7f4:	9003      	str	r0, [sp, #12]
 800a7f6:	4631      	mov	r1, r6
 800a7f8:	4620      	mov	r0, r4
 800a7fa:	f000 fb9b 	bl	800af34 <__mdiff>
 800a7fe:	68c2      	ldr	r2, [r0, #12]
 800a800:	f109 3bff 	add.w	fp, r9, #4294967295
 800a804:	4605      	mov	r5, r0
 800a806:	bb02      	cbnz	r2, 800a84a <_dtoa_r+0xa62>
 800a808:	4601      	mov	r1, r0
 800a80a:	ee18 0a10 	vmov	r0, s16
 800a80e:	f000 fb75 	bl	800aefc <__mcmp>
 800a812:	4602      	mov	r2, r0
 800a814:	4629      	mov	r1, r5
 800a816:	4620      	mov	r0, r4
 800a818:	9207      	str	r2, [sp, #28]
 800a81a:	f000 f92d 	bl	800aa78 <_Bfree>
 800a81e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a822:	ea43 0102 	orr.w	r1, r3, r2
 800a826:	9b04      	ldr	r3, [sp, #16]
 800a828:	430b      	orrs	r3, r1
 800a82a:	464d      	mov	r5, r9
 800a82c:	d10f      	bne.n	800a84e <_dtoa_r+0xa66>
 800a82e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a832:	d02a      	beq.n	800a88a <_dtoa_r+0xaa2>
 800a834:	9b03      	ldr	r3, [sp, #12]
 800a836:	2b00      	cmp	r3, #0
 800a838:	dd02      	ble.n	800a840 <_dtoa_r+0xa58>
 800a83a:	9b02      	ldr	r3, [sp, #8]
 800a83c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a840:	f88b a000 	strb.w	sl, [fp]
 800a844:	e775      	b.n	800a732 <_dtoa_r+0x94a>
 800a846:	4638      	mov	r0, r7
 800a848:	e7ba      	b.n	800a7c0 <_dtoa_r+0x9d8>
 800a84a:	2201      	movs	r2, #1
 800a84c:	e7e2      	b.n	800a814 <_dtoa_r+0xa2c>
 800a84e:	9b03      	ldr	r3, [sp, #12]
 800a850:	2b00      	cmp	r3, #0
 800a852:	db04      	blt.n	800a85e <_dtoa_r+0xa76>
 800a854:	9906      	ldr	r1, [sp, #24]
 800a856:	430b      	orrs	r3, r1
 800a858:	9904      	ldr	r1, [sp, #16]
 800a85a:	430b      	orrs	r3, r1
 800a85c:	d122      	bne.n	800a8a4 <_dtoa_r+0xabc>
 800a85e:	2a00      	cmp	r2, #0
 800a860:	ddee      	ble.n	800a840 <_dtoa_r+0xa58>
 800a862:	ee18 1a10 	vmov	r1, s16
 800a866:	2201      	movs	r2, #1
 800a868:	4620      	mov	r0, r4
 800a86a:	f000 fad7 	bl	800ae1c <__lshift>
 800a86e:	4631      	mov	r1, r6
 800a870:	ee08 0a10 	vmov	s16, r0
 800a874:	f000 fb42 	bl	800aefc <__mcmp>
 800a878:	2800      	cmp	r0, #0
 800a87a:	dc03      	bgt.n	800a884 <_dtoa_r+0xa9c>
 800a87c:	d1e0      	bne.n	800a840 <_dtoa_r+0xa58>
 800a87e:	f01a 0f01 	tst.w	sl, #1
 800a882:	d0dd      	beq.n	800a840 <_dtoa_r+0xa58>
 800a884:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a888:	d1d7      	bne.n	800a83a <_dtoa_r+0xa52>
 800a88a:	2339      	movs	r3, #57	; 0x39
 800a88c:	f88b 3000 	strb.w	r3, [fp]
 800a890:	462b      	mov	r3, r5
 800a892:	461d      	mov	r5, r3
 800a894:	3b01      	subs	r3, #1
 800a896:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a89a:	2a39      	cmp	r2, #57	; 0x39
 800a89c:	d071      	beq.n	800a982 <_dtoa_r+0xb9a>
 800a89e:	3201      	adds	r2, #1
 800a8a0:	701a      	strb	r2, [r3, #0]
 800a8a2:	e746      	b.n	800a732 <_dtoa_r+0x94a>
 800a8a4:	2a00      	cmp	r2, #0
 800a8a6:	dd07      	ble.n	800a8b8 <_dtoa_r+0xad0>
 800a8a8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a8ac:	d0ed      	beq.n	800a88a <_dtoa_r+0xaa2>
 800a8ae:	f10a 0301 	add.w	r3, sl, #1
 800a8b2:	f88b 3000 	strb.w	r3, [fp]
 800a8b6:	e73c      	b.n	800a732 <_dtoa_r+0x94a>
 800a8b8:	9b05      	ldr	r3, [sp, #20]
 800a8ba:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a8be:	4599      	cmp	r9, r3
 800a8c0:	d047      	beq.n	800a952 <_dtoa_r+0xb6a>
 800a8c2:	ee18 1a10 	vmov	r1, s16
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	220a      	movs	r2, #10
 800a8ca:	4620      	mov	r0, r4
 800a8cc:	f000 f8f6 	bl	800aabc <__multadd>
 800a8d0:	45b8      	cmp	r8, r7
 800a8d2:	ee08 0a10 	vmov	s16, r0
 800a8d6:	f04f 0300 	mov.w	r3, #0
 800a8da:	f04f 020a 	mov.w	r2, #10
 800a8de:	4641      	mov	r1, r8
 800a8e0:	4620      	mov	r0, r4
 800a8e2:	d106      	bne.n	800a8f2 <_dtoa_r+0xb0a>
 800a8e4:	f000 f8ea 	bl	800aabc <__multadd>
 800a8e8:	4680      	mov	r8, r0
 800a8ea:	4607      	mov	r7, r0
 800a8ec:	f109 0901 	add.w	r9, r9, #1
 800a8f0:	e772      	b.n	800a7d8 <_dtoa_r+0x9f0>
 800a8f2:	f000 f8e3 	bl	800aabc <__multadd>
 800a8f6:	4639      	mov	r1, r7
 800a8f8:	4680      	mov	r8, r0
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	220a      	movs	r2, #10
 800a8fe:	4620      	mov	r0, r4
 800a900:	f000 f8dc 	bl	800aabc <__multadd>
 800a904:	4607      	mov	r7, r0
 800a906:	e7f1      	b.n	800a8ec <_dtoa_r+0xb04>
 800a908:	9b03      	ldr	r3, [sp, #12]
 800a90a:	9302      	str	r3, [sp, #8]
 800a90c:	9d01      	ldr	r5, [sp, #4]
 800a90e:	ee18 0a10 	vmov	r0, s16
 800a912:	4631      	mov	r1, r6
 800a914:	f7ff f9dc 	bl	8009cd0 <quorem>
 800a918:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a91c:	9b01      	ldr	r3, [sp, #4]
 800a91e:	f805 ab01 	strb.w	sl, [r5], #1
 800a922:	1aea      	subs	r2, r5, r3
 800a924:	9b02      	ldr	r3, [sp, #8]
 800a926:	4293      	cmp	r3, r2
 800a928:	dd09      	ble.n	800a93e <_dtoa_r+0xb56>
 800a92a:	ee18 1a10 	vmov	r1, s16
 800a92e:	2300      	movs	r3, #0
 800a930:	220a      	movs	r2, #10
 800a932:	4620      	mov	r0, r4
 800a934:	f000 f8c2 	bl	800aabc <__multadd>
 800a938:	ee08 0a10 	vmov	s16, r0
 800a93c:	e7e7      	b.n	800a90e <_dtoa_r+0xb26>
 800a93e:	9b02      	ldr	r3, [sp, #8]
 800a940:	2b00      	cmp	r3, #0
 800a942:	bfc8      	it	gt
 800a944:	461d      	movgt	r5, r3
 800a946:	9b01      	ldr	r3, [sp, #4]
 800a948:	bfd8      	it	le
 800a94a:	2501      	movle	r5, #1
 800a94c:	441d      	add	r5, r3
 800a94e:	f04f 0800 	mov.w	r8, #0
 800a952:	ee18 1a10 	vmov	r1, s16
 800a956:	2201      	movs	r2, #1
 800a958:	4620      	mov	r0, r4
 800a95a:	f000 fa5f 	bl	800ae1c <__lshift>
 800a95e:	4631      	mov	r1, r6
 800a960:	ee08 0a10 	vmov	s16, r0
 800a964:	f000 faca 	bl	800aefc <__mcmp>
 800a968:	2800      	cmp	r0, #0
 800a96a:	dc91      	bgt.n	800a890 <_dtoa_r+0xaa8>
 800a96c:	d102      	bne.n	800a974 <_dtoa_r+0xb8c>
 800a96e:	f01a 0f01 	tst.w	sl, #1
 800a972:	d18d      	bne.n	800a890 <_dtoa_r+0xaa8>
 800a974:	462b      	mov	r3, r5
 800a976:	461d      	mov	r5, r3
 800a978:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a97c:	2a30      	cmp	r2, #48	; 0x30
 800a97e:	d0fa      	beq.n	800a976 <_dtoa_r+0xb8e>
 800a980:	e6d7      	b.n	800a732 <_dtoa_r+0x94a>
 800a982:	9a01      	ldr	r2, [sp, #4]
 800a984:	429a      	cmp	r2, r3
 800a986:	d184      	bne.n	800a892 <_dtoa_r+0xaaa>
 800a988:	9b00      	ldr	r3, [sp, #0]
 800a98a:	3301      	adds	r3, #1
 800a98c:	9300      	str	r3, [sp, #0]
 800a98e:	2331      	movs	r3, #49	; 0x31
 800a990:	7013      	strb	r3, [r2, #0]
 800a992:	e6ce      	b.n	800a732 <_dtoa_r+0x94a>
 800a994:	4b09      	ldr	r3, [pc, #36]	; (800a9bc <_dtoa_r+0xbd4>)
 800a996:	f7ff ba95 	b.w	8009ec4 <_dtoa_r+0xdc>
 800a99a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	f47f aa6e 	bne.w	8009e7e <_dtoa_r+0x96>
 800a9a2:	4b07      	ldr	r3, [pc, #28]	; (800a9c0 <_dtoa_r+0xbd8>)
 800a9a4:	f7ff ba8e 	b.w	8009ec4 <_dtoa_r+0xdc>
 800a9a8:	9b02      	ldr	r3, [sp, #8]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	dcae      	bgt.n	800a90c <_dtoa_r+0xb24>
 800a9ae:	9b06      	ldr	r3, [sp, #24]
 800a9b0:	2b02      	cmp	r3, #2
 800a9b2:	f73f aea8 	bgt.w	800a706 <_dtoa_r+0x91e>
 800a9b6:	e7a9      	b.n	800a90c <_dtoa_r+0xb24>
 800a9b8:	0801535b 	.word	0x0801535b
 800a9bc:	080152b8 	.word	0x080152b8
 800a9c0:	080152dc 	.word	0x080152dc

0800a9c4 <_localeconv_r>:
 800a9c4:	4800      	ldr	r0, [pc, #0]	; (800a9c8 <_localeconv_r+0x4>)
 800a9c6:	4770      	bx	lr
 800a9c8:	20000178 	.word	0x20000178

0800a9cc <malloc>:
 800a9cc:	4b02      	ldr	r3, [pc, #8]	; (800a9d8 <malloc+0xc>)
 800a9ce:	4601      	mov	r1, r0
 800a9d0:	6818      	ldr	r0, [r3, #0]
 800a9d2:	f000 bc17 	b.w	800b204 <_malloc_r>
 800a9d6:	bf00      	nop
 800a9d8:	20000024 	.word	0x20000024

0800a9dc <memcpy>:
 800a9dc:	440a      	add	r2, r1
 800a9de:	4291      	cmp	r1, r2
 800a9e0:	f100 33ff 	add.w	r3, r0, #4294967295
 800a9e4:	d100      	bne.n	800a9e8 <memcpy+0xc>
 800a9e6:	4770      	bx	lr
 800a9e8:	b510      	push	{r4, lr}
 800a9ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a9ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a9f2:	4291      	cmp	r1, r2
 800a9f4:	d1f9      	bne.n	800a9ea <memcpy+0xe>
 800a9f6:	bd10      	pop	{r4, pc}

0800a9f8 <_Balloc>:
 800a9f8:	b570      	push	{r4, r5, r6, lr}
 800a9fa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a9fc:	4604      	mov	r4, r0
 800a9fe:	460d      	mov	r5, r1
 800aa00:	b976      	cbnz	r6, 800aa20 <_Balloc+0x28>
 800aa02:	2010      	movs	r0, #16
 800aa04:	f7ff ffe2 	bl	800a9cc <malloc>
 800aa08:	4602      	mov	r2, r0
 800aa0a:	6260      	str	r0, [r4, #36]	; 0x24
 800aa0c:	b920      	cbnz	r0, 800aa18 <_Balloc+0x20>
 800aa0e:	4b18      	ldr	r3, [pc, #96]	; (800aa70 <_Balloc+0x78>)
 800aa10:	4818      	ldr	r0, [pc, #96]	; (800aa74 <_Balloc+0x7c>)
 800aa12:	2166      	movs	r1, #102	; 0x66
 800aa14:	f000 fdd6 	bl	800b5c4 <__assert_func>
 800aa18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aa1c:	6006      	str	r6, [r0, #0]
 800aa1e:	60c6      	str	r6, [r0, #12]
 800aa20:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800aa22:	68f3      	ldr	r3, [r6, #12]
 800aa24:	b183      	cbz	r3, 800aa48 <_Balloc+0x50>
 800aa26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aa28:	68db      	ldr	r3, [r3, #12]
 800aa2a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800aa2e:	b9b8      	cbnz	r0, 800aa60 <_Balloc+0x68>
 800aa30:	2101      	movs	r1, #1
 800aa32:	fa01 f605 	lsl.w	r6, r1, r5
 800aa36:	1d72      	adds	r2, r6, #5
 800aa38:	0092      	lsls	r2, r2, #2
 800aa3a:	4620      	mov	r0, r4
 800aa3c:	f000 fb60 	bl	800b100 <_calloc_r>
 800aa40:	b160      	cbz	r0, 800aa5c <_Balloc+0x64>
 800aa42:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800aa46:	e00e      	b.n	800aa66 <_Balloc+0x6e>
 800aa48:	2221      	movs	r2, #33	; 0x21
 800aa4a:	2104      	movs	r1, #4
 800aa4c:	4620      	mov	r0, r4
 800aa4e:	f000 fb57 	bl	800b100 <_calloc_r>
 800aa52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aa54:	60f0      	str	r0, [r6, #12]
 800aa56:	68db      	ldr	r3, [r3, #12]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d1e4      	bne.n	800aa26 <_Balloc+0x2e>
 800aa5c:	2000      	movs	r0, #0
 800aa5e:	bd70      	pop	{r4, r5, r6, pc}
 800aa60:	6802      	ldr	r2, [r0, #0]
 800aa62:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800aa66:	2300      	movs	r3, #0
 800aa68:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800aa6c:	e7f7      	b.n	800aa5e <_Balloc+0x66>
 800aa6e:	bf00      	nop
 800aa70:	080152e9 	.word	0x080152e9
 800aa74:	0801536c 	.word	0x0801536c

0800aa78 <_Bfree>:
 800aa78:	b570      	push	{r4, r5, r6, lr}
 800aa7a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800aa7c:	4605      	mov	r5, r0
 800aa7e:	460c      	mov	r4, r1
 800aa80:	b976      	cbnz	r6, 800aaa0 <_Bfree+0x28>
 800aa82:	2010      	movs	r0, #16
 800aa84:	f7ff ffa2 	bl	800a9cc <malloc>
 800aa88:	4602      	mov	r2, r0
 800aa8a:	6268      	str	r0, [r5, #36]	; 0x24
 800aa8c:	b920      	cbnz	r0, 800aa98 <_Bfree+0x20>
 800aa8e:	4b09      	ldr	r3, [pc, #36]	; (800aab4 <_Bfree+0x3c>)
 800aa90:	4809      	ldr	r0, [pc, #36]	; (800aab8 <_Bfree+0x40>)
 800aa92:	218a      	movs	r1, #138	; 0x8a
 800aa94:	f000 fd96 	bl	800b5c4 <__assert_func>
 800aa98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aa9c:	6006      	str	r6, [r0, #0]
 800aa9e:	60c6      	str	r6, [r0, #12]
 800aaa0:	b13c      	cbz	r4, 800aab2 <_Bfree+0x3a>
 800aaa2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800aaa4:	6862      	ldr	r2, [r4, #4]
 800aaa6:	68db      	ldr	r3, [r3, #12]
 800aaa8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800aaac:	6021      	str	r1, [r4, #0]
 800aaae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800aab2:	bd70      	pop	{r4, r5, r6, pc}
 800aab4:	080152e9 	.word	0x080152e9
 800aab8:	0801536c 	.word	0x0801536c

0800aabc <__multadd>:
 800aabc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aac0:	690d      	ldr	r5, [r1, #16]
 800aac2:	4607      	mov	r7, r0
 800aac4:	460c      	mov	r4, r1
 800aac6:	461e      	mov	r6, r3
 800aac8:	f101 0c14 	add.w	ip, r1, #20
 800aacc:	2000      	movs	r0, #0
 800aace:	f8dc 3000 	ldr.w	r3, [ip]
 800aad2:	b299      	uxth	r1, r3
 800aad4:	fb02 6101 	mla	r1, r2, r1, r6
 800aad8:	0c1e      	lsrs	r6, r3, #16
 800aada:	0c0b      	lsrs	r3, r1, #16
 800aadc:	fb02 3306 	mla	r3, r2, r6, r3
 800aae0:	b289      	uxth	r1, r1
 800aae2:	3001      	adds	r0, #1
 800aae4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800aae8:	4285      	cmp	r5, r0
 800aaea:	f84c 1b04 	str.w	r1, [ip], #4
 800aaee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800aaf2:	dcec      	bgt.n	800aace <__multadd+0x12>
 800aaf4:	b30e      	cbz	r6, 800ab3a <__multadd+0x7e>
 800aaf6:	68a3      	ldr	r3, [r4, #8]
 800aaf8:	42ab      	cmp	r3, r5
 800aafa:	dc19      	bgt.n	800ab30 <__multadd+0x74>
 800aafc:	6861      	ldr	r1, [r4, #4]
 800aafe:	4638      	mov	r0, r7
 800ab00:	3101      	adds	r1, #1
 800ab02:	f7ff ff79 	bl	800a9f8 <_Balloc>
 800ab06:	4680      	mov	r8, r0
 800ab08:	b928      	cbnz	r0, 800ab16 <__multadd+0x5a>
 800ab0a:	4602      	mov	r2, r0
 800ab0c:	4b0c      	ldr	r3, [pc, #48]	; (800ab40 <__multadd+0x84>)
 800ab0e:	480d      	ldr	r0, [pc, #52]	; (800ab44 <__multadd+0x88>)
 800ab10:	21b5      	movs	r1, #181	; 0xb5
 800ab12:	f000 fd57 	bl	800b5c4 <__assert_func>
 800ab16:	6922      	ldr	r2, [r4, #16]
 800ab18:	3202      	adds	r2, #2
 800ab1a:	f104 010c 	add.w	r1, r4, #12
 800ab1e:	0092      	lsls	r2, r2, #2
 800ab20:	300c      	adds	r0, #12
 800ab22:	f7ff ff5b 	bl	800a9dc <memcpy>
 800ab26:	4621      	mov	r1, r4
 800ab28:	4638      	mov	r0, r7
 800ab2a:	f7ff ffa5 	bl	800aa78 <_Bfree>
 800ab2e:	4644      	mov	r4, r8
 800ab30:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ab34:	3501      	adds	r5, #1
 800ab36:	615e      	str	r6, [r3, #20]
 800ab38:	6125      	str	r5, [r4, #16]
 800ab3a:	4620      	mov	r0, r4
 800ab3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab40:	0801535b 	.word	0x0801535b
 800ab44:	0801536c 	.word	0x0801536c

0800ab48 <__hi0bits>:
 800ab48:	0c03      	lsrs	r3, r0, #16
 800ab4a:	041b      	lsls	r3, r3, #16
 800ab4c:	b9d3      	cbnz	r3, 800ab84 <__hi0bits+0x3c>
 800ab4e:	0400      	lsls	r0, r0, #16
 800ab50:	2310      	movs	r3, #16
 800ab52:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ab56:	bf04      	itt	eq
 800ab58:	0200      	lsleq	r0, r0, #8
 800ab5a:	3308      	addeq	r3, #8
 800ab5c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ab60:	bf04      	itt	eq
 800ab62:	0100      	lsleq	r0, r0, #4
 800ab64:	3304      	addeq	r3, #4
 800ab66:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ab6a:	bf04      	itt	eq
 800ab6c:	0080      	lsleq	r0, r0, #2
 800ab6e:	3302      	addeq	r3, #2
 800ab70:	2800      	cmp	r0, #0
 800ab72:	db05      	blt.n	800ab80 <__hi0bits+0x38>
 800ab74:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ab78:	f103 0301 	add.w	r3, r3, #1
 800ab7c:	bf08      	it	eq
 800ab7e:	2320      	moveq	r3, #32
 800ab80:	4618      	mov	r0, r3
 800ab82:	4770      	bx	lr
 800ab84:	2300      	movs	r3, #0
 800ab86:	e7e4      	b.n	800ab52 <__hi0bits+0xa>

0800ab88 <__lo0bits>:
 800ab88:	6803      	ldr	r3, [r0, #0]
 800ab8a:	f013 0207 	ands.w	r2, r3, #7
 800ab8e:	4601      	mov	r1, r0
 800ab90:	d00b      	beq.n	800abaa <__lo0bits+0x22>
 800ab92:	07da      	lsls	r2, r3, #31
 800ab94:	d423      	bmi.n	800abde <__lo0bits+0x56>
 800ab96:	0798      	lsls	r0, r3, #30
 800ab98:	bf49      	itett	mi
 800ab9a:	085b      	lsrmi	r3, r3, #1
 800ab9c:	089b      	lsrpl	r3, r3, #2
 800ab9e:	2001      	movmi	r0, #1
 800aba0:	600b      	strmi	r3, [r1, #0]
 800aba2:	bf5c      	itt	pl
 800aba4:	600b      	strpl	r3, [r1, #0]
 800aba6:	2002      	movpl	r0, #2
 800aba8:	4770      	bx	lr
 800abaa:	b298      	uxth	r0, r3
 800abac:	b9a8      	cbnz	r0, 800abda <__lo0bits+0x52>
 800abae:	0c1b      	lsrs	r3, r3, #16
 800abb0:	2010      	movs	r0, #16
 800abb2:	b2da      	uxtb	r2, r3
 800abb4:	b90a      	cbnz	r2, 800abba <__lo0bits+0x32>
 800abb6:	3008      	adds	r0, #8
 800abb8:	0a1b      	lsrs	r3, r3, #8
 800abba:	071a      	lsls	r2, r3, #28
 800abbc:	bf04      	itt	eq
 800abbe:	091b      	lsreq	r3, r3, #4
 800abc0:	3004      	addeq	r0, #4
 800abc2:	079a      	lsls	r2, r3, #30
 800abc4:	bf04      	itt	eq
 800abc6:	089b      	lsreq	r3, r3, #2
 800abc8:	3002      	addeq	r0, #2
 800abca:	07da      	lsls	r2, r3, #31
 800abcc:	d403      	bmi.n	800abd6 <__lo0bits+0x4e>
 800abce:	085b      	lsrs	r3, r3, #1
 800abd0:	f100 0001 	add.w	r0, r0, #1
 800abd4:	d005      	beq.n	800abe2 <__lo0bits+0x5a>
 800abd6:	600b      	str	r3, [r1, #0]
 800abd8:	4770      	bx	lr
 800abda:	4610      	mov	r0, r2
 800abdc:	e7e9      	b.n	800abb2 <__lo0bits+0x2a>
 800abde:	2000      	movs	r0, #0
 800abe0:	4770      	bx	lr
 800abe2:	2020      	movs	r0, #32
 800abe4:	4770      	bx	lr
	...

0800abe8 <__i2b>:
 800abe8:	b510      	push	{r4, lr}
 800abea:	460c      	mov	r4, r1
 800abec:	2101      	movs	r1, #1
 800abee:	f7ff ff03 	bl	800a9f8 <_Balloc>
 800abf2:	4602      	mov	r2, r0
 800abf4:	b928      	cbnz	r0, 800ac02 <__i2b+0x1a>
 800abf6:	4b05      	ldr	r3, [pc, #20]	; (800ac0c <__i2b+0x24>)
 800abf8:	4805      	ldr	r0, [pc, #20]	; (800ac10 <__i2b+0x28>)
 800abfa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800abfe:	f000 fce1 	bl	800b5c4 <__assert_func>
 800ac02:	2301      	movs	r3, #1
 800ac04:	6144      	str	r4, [r0, #20]
 800ac06:	6103      	str	r3, [r0, #16]
 800ac08:	bd10      	pop	{r4, pc}
 800ac0a:	bf00      	nop
 800ac0c:	0801535b 	.word	0x0801535b
 800ac10:	0801536c 	.word	0x0801536c

0800ac14 <__multiply>:
 800ac14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac18:	4691      	mov	r9, r2
 800ac1a:	690a      	ldr	r2, [r1, #16]
 800ac1c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ac20:	429a      	cmp	r2, r3
 800ac22:	bfb8      	it	lt
 800ac24:	460b      	movlt	r3, r1
 800ac26:	460c      	mov	r4, r1
 800ac28:	bfbc      	itt	lt
 800ac2a:	464c      	movlt	r4, r9
 800ac2c:	4699      	movlt	r9, r3
 800ac2e:	6927      	ldr	r7, [r4, #16]
 800ac30:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ac34:	68a3      	ldr	r3, [r4, #8]
 800ac36:	6861      	ldr	r1, [r4, #4]
 800ac38:	eb07 060a 	add.w	r6, r7, sl
 800ac3c:	42b3      	cmp	r3, r6
 800ac3e:	b085      	sub	sp, #20
 800ac40:	bfb8      	it	lt
 800ac42:	3101      	addlt	r1, #1
 800ac44:	f7ff fed8 	bl	800a9f8 <_Balloc>
 800ac48:	b930      	cbnz	r0, 800ac58 <__multiply+0x44>
 800ac4a:	4602      	mov	r2, r0
 800ac4c:	4b44      	ldr	r3, [pc, #272]	; (800ad60 <__multiply+0x14c>)
 800ac4e:	4845      	ldr	r0, [pc, #276]	; (800ad64 <__multiply+0x150>)
 800ac50:	f240 115d 	movw	r1, #349	; 0x15d
 800ac54:	f000 fcb6 	bl	800b5c4 <__assert_func>
 800ac58:	f100 0514 	add.w	r5, r0, #20
 800ac5c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ac60:	462b      	mov	r3, r5
 800ac62:	2200      	movs	r2, #0
 800ac64:	4543      	cmp	r3, r8
 800ac66:	d321      	bcc.n	800acac <__multiply+0x98>
 800ac68:	f104 0314 	add.w	r3, r4, #20
 800ac6c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ac70:	f109 0314 	add.w	r3, r9, #20
 800ac74:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ac78:	9202      	str	r2, [sp, #8]
 800ac7a:	1b3a      	subs	r2, r7, r4
 800ac7c:	3a15      	subs	r2, #21
 800ac7e:	f022 0203 	bic.w	r2, r2, #3
 800ac82:	3204      	adds	r2, #4
 800ac84:	f104 0115 	add.w	r1, r4, #21
 800ac88:	428f      	cmp	r7, r1
 800ac8a:	bf38      	it	cc
 800ac8c:	2204      	movcc	r2, #4
 800ac8e:	9201      	str	r2, [sp, #4]
 800ac90:	9a02      	ldr	r2, [sp, #8]
 800ac92:	9303      	str	r3, [sp, #12]
 800ac94:	429a      	cmp	r2, r3
 800ac96:	d80c      	bhi.n	800acb2 <__multiply+0x9e>
 800ac98:	2e00      	cmp	r6, #0
 800ac9a:	dd03      	ble.n	800aca4 <__multiply+0x90>
 800ac9c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d05a      	beq.n	800ad5a <__multiply+0x146>
 800aca4:	6106      	str	r6, [r0, #16]
 800aca6:	b005      	add	sp, #20
 800aca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acac:	f843 2b04 	str.w	r2, [r3], #4
 800acb0:	e7d8      	b.n	800ac64 <__multiply+0x50>
 800acb2:	f8b3 a000 	ldrh.w	sl, [r3]
 800acb6:	f1ba 0f00 	cmp.w	sl, #0
 800acba:	d024      	beq.n	800ad06 <__multiply+0xf2>
 800acbc:	f104 0e14 	add.w	lr, r4, #20
 800acc0:	46a9      	mov	r9, r5
 800acc2:	f04f 0c00 	mov.w	ip, #0
 800acc6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800acca:	f8d9 1000 	ldr.w	r1, [r9]
 800acce:	fa1f fb82 	uxth.w	fp, r2
 800acd2:	b289      	uxth	r1, r1
 800acd4:	fb0a 110b 	mla	r1, sl, fp, r1
 800acd8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800acdc:	f8d9 2000 	ldr.w	r2, [r9]
 800ace0:	4461      	add	r1, ip
 800ace2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ace6:	fb0a c20b 	mla	r2, sl, fp, ip
 800acea:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800acee:	b289      	uxth	r1, r1
 800acf0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800acf4:	4577      	cmp	r7, lr
 800acf6:	f849 1b04 	str.w	r1, [r9], #4
 800acfa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800acfe:	d8e2      	bhi.n	800acc6 <__multiply+0xb2>
 800ad00:	9a01      	ldr	r2, [sp, #4]
 800ad02:	f845 c002 	str.w	ip, [r5, r2]
 800ad06:	9a03      	ldr	r2, [sp, #12]
 800ad08:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ad0c:	3304      	adds	r3, #4
 800ad0e:	f1b9 0f00 	cmp.w	r9, #0
 800ad12:	d020      	beq.n	800ad56 <__multiply+0x142>
 800ad14:	6829      	ldr	r1, [r5, #0]
 800ad16:	f104 0c14 	add.w	ip, r4, #20
 800ad1a:	46ae      	mov	lr, r5
 800ad1c:	f04f 0a00 	mov.w	sl, #0
 800ad20:	f8bc b000 	ldrh.w	fp, [ip]
 800ad24:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ad28:	fb09 220b 	mla	r2, r9, fp, r2
 800ad2c:	4492      	add	sl, r2
 800ad2e:	b289      	uxth	r1, r1
 800ad30:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800ad34:	f84e 1b04 	str.w	r1, [lr], #4
 800ad38:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ad3c:	f8be 1000 	ldrh.w	r1, [lr]
 800ad40:	0c12      	lsrs	r2, r2, #16
 800ad42:	fb09 1102 	mla	r1, r9, r2, r1
 800ad46:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800ad4a:	4567      	cmp	r7, ip
 800ad4c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ad50:	d8e6      	bhi.n	800ad20 <__multiply+0x10c>
 800ad52:	9a01      	ldr	r2, [sp, #4]
 800ad54:	50a9      	str	r1, [r5, r2]
 800ad56:	3504      	adds	r5, #4
 800ad58:	e79a      	b.n	800ac90 <__multiply+0x7c>
 800ad5a:	3e01      	subs	r6, #1
 800ad5c:	e79c      	b.n	800ac98 <__multiply+0x84>
 800ad5e:	bf00      	nop
 800ad60:	0801535b 	.word	0x0801535b
 800ad64:	0801536c 	.word	0x0801536c

0800ad68 <__pow5mult>:
 800ad68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad6c:	4615      	mov	r5, r2
 800ad6e:	f012 0203 	ands.w	r2, r2, #3
 800ad72:	4606      	mov	r6, r0
 800ad74:	460f      	mov	r7, r1
 800ad76:	d007      	beq.n	800ad88 <__pow5mult+0x20>
 800ad78:	4c25      	ldr	r4, [pc, #148]	; (800ae10 <__pow5mult+0xa8>)
 800ad7a:	3a01      	subs	r2, #1
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ad82:	f7ff fe9b 	bl	800aabc <__multadd>
 800ad86:	4607      	mov	r7, r0
 800ad88:	10ad      	asrs	r5, r5, #2
 800ad8a:	d03d      	beq.n	800ae08 <__pow5mult+0xa0>
 800ad8c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ad8e:	b97c      	cbnz	r4, 800adb0 <__pow5mult+0x48>
 800ad90:	2010      	movs	r0, #16
 800ad92:	f7ff fe1b 	bl	800a9cc <malloc>
 800ad96:	4602      	mov	r2, r0
 800ad98:	6270      	str	r0, [r6, #36]	; 0x24
 800ad9a:	b928      	cbnz	r0, 800ada8 <__pow5mult+0x40>
 800ad9c:	4b1d      	ldr	r3, [pc, #116]	; (800ae14 <__pow5mult+0xac>)
 800ad9e:	481e      	ldr	r0, [pc, #120]	; (800ae18 <__pow5mult+0xb0>)
 800ada0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ada4:	f000 fc0e 	bl	800b5c4 <__assert_func>
 800ada8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800adac:	6004      	str	r4, [r0, #0]
 800adae:	60c4      	str	r4, [r0, #12]
 800adb0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800adb4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800adb8:	b94c      	cbnz	r4, 800adce <__pow5mult+0x66>
 800adba:	f240 2171 	movw	r1, #625	; 0x271
 800adbe:	4630      	mov	r0, r6
 800adc0:	f7ff ff12 	bl	800abe8 <__i2b>
 800adc4:	2300      	movs	r3, #0
 800adc6:	f8c8 0008 	str.w	r0, [r8, #8]
 800adca:	4604      	mov	r4, r0
 800adcc:	6003      	str	r3, [r0, #0]
 800adce:	f04f 0900 	mov.w	r9, #0
 800add2:	07eb      	lsls	r3, r5, #31
 800add4:	d50a      	bpl.n	800adec <__pow5mult+0x84>
 800add6:	4639      	mov	r1, r7
 800add8:	4622      	mov	r2, r4
 800adda:	4630      	mov	r0, r6
 800addc:	f7ff ff1a 	bl	800ac14 <__multiply>
 800ade0:	4639      	mov	r1, r7
 800ade2:	4680      	mov	r8, r0
 800ade4:	4630      	mov	r0, r6
 800ade6:	f7ff fe47 	bl	800aa78 <_Bfree>
 800adea:	4647      	mov	r7, r8
 800adec:	106d      	asrs	r5, r5, #1
 800adee:	d00b      	beq.n	800ae08 <__pow5mult+0xa0>
 800adf0:	6820      	ldr	r0, [r4, #0]
 800adf2:	b938      	cbnz	r0, 800ae04 <__pow5mult+0x9c>
 800adf4:	4622      	mov	r2, r4
 800adf6:	4621      	mov	r1, r4
 800adf8:	4630      	mov	r0, r6
 800adfa:	f7ff ff0b 	bl	800ac14 <__multiply>
 800adfe:	6020      	str	r0, [r4, #0]
 800ae00:	f8c0 9000 	str.w	r9, [r0]
 800ae04:	4604      	mov	r4, r0
 800ae06:	e7e4      	b.n	800add2 <__pow5mult+0x6a>
 800ae08:	4638      	mov	r0, r7
 800ae0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae0e:	bf00      	nop
 800ae10:	080154b8 	.word	0x080154b8
 800ae14:	080152e9 	.word	0x080152e9
 800ae18:	0801536c 	.word	0x0801536c

0800ae1c <__lshift>:
 800ae1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae20:	460c      	mov	r4, r1
 800ae22:	6849      	ldr	r1, [r1, #4]
 800ae24:	6923      	ldr	r3, [r4, #16]
 800ae26:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ae2a:	68a3      	ldr	r3, [r4, #8]
 800ae2c:	4607      	mov	r7, r0
 800ae2e:	4691      	mov	r9, r2
 800ae30:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ae34:	f108 0601 	add.w	r6, r8, #1
 800ae38:	42b3      	cmp	r3, r6
 800ae3a:	db0b      	blt.n	800ae54 <__lshift+0x38>
 800ae3c:	4638      	mov	r0, r7
 800ae3e:	f7ff fddb 	bl	800a9f8 <_Balloc>
 800ae42:	4605      	mov	r5, r0
 800ae44:	b948      	cbnz	r0, 800ae5a <__lshift+0x3e>
 800ae46:	4602      	mov	r2, r0
 800ae48:	4b2a      	ldr	r3, [pc, #168]	; (800aef4 <__lshift+0xd8>)
 800ae4a:	482b      	ldr	r0, [pc, #172]	; (800aef8 <__lshift+0xdc>)
 800ae4c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ae50:	f000 fbb8 	bl	800b5c4 <__assert_func>
 800ae54:	3101      	adds	r1, #1
 800ae56:	005b      	lsls	r3, r3, #1
 800ae58:	e7ee      	b.n	800ae38 <__lshift+0x1c>
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	f100 0114 	add.w	r1, r0, #20
 800ae60:	f100 0210 	add.w	r2, r0, #16
 800ae64:	4618      	mov	r0, r3
 800ae66:	4553      	cmp	r3, sl
 800ae68:	db37      	blt.n	800aeda <__lshift+0xbe>
 800ae6a:	6920      	ldr	r0, [r4, #16]
 800ae6c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ae70:	f104 0314 	add.w	r3, r4, #20
 800ae74:	f019 091f 	ands.w	r9, r9, #31
 800ae78:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ae7c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ae80:	d02f      	beq.n	800aee2 <__lshift+0xc6>
 800ae82:	f1c9 0e20 	rsb	lr, r9, #32
 800ae86:	468a      	mov	sl, r1
 800ae88:	f04f 0c00 	mov.w	ip, #0
 800ae8c:	681a      	ldr	r2, [r3, #0]
 800ae8e:	fa02 f209 	lsl.w	r2, r2, r9
 800ae92:	ea42 020c 	orr.w	r2, r2, ip
 800ae96:	f84a 2b04 	str.w	r2, [sl], #4
 800ae9a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae9e:	4298      	cmp	r0, r3
 800aea0:	fa22 fc0e 	lsr.w	ip, r2, lr
 800aea4:	d8f2      	bhi.n	800ae8c <__lshift+0x70>
 800aea6:	1b03      	subs	r3, r0, r4
 800aea8:	3b15      	subs	r3, #21
 800aeaa:	f023 0303 	bic.w	r3, r3, #3
 800aeae:	3304      	adds	r3, #4
 800aeb0:	f104 0215 	add.w	r2, r4, #21
 800aeb4:	4290      	cmp	r0, r2
 800aeb6:	bf38      	it	cc
 800aeb8:	2304      	movcc	r3, #4
 800aeba:	f841 c003 	str.w	ip, [r1, r3]
 800aebe:	f1bc 0f00 	cmp.w	ip, #0
 800aec2:	d001      	beq.n	800aec8 <__lshift+0xac>
 800aec4:	f108 0602 	add.w	r6, r8, #2
 800aec8:	3e01      	subs	r6, #1
 800aeca:	4638      	mov	r0, r7
 800aecc:	612e      	str	r6, [r5, #16]
 800aece:	4621      	mov	r1, r4
 800aed0:	f7ff fdd2 	bl	800aa78 <_Bfree>
 800aed4:	4628      	mov	r0, r5
 800aed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aeda:	f842 0f04 	str.w	r0, [r2, #4]!
 800aede:	3301      	adds	r3, #1
 800aee0:	e7c1      	b.n	800ae66 <__lshift+0x4a>
 800aee2:	3904      	subs	r1, #4
 800aee4:	f853 2b04 	ldr.w	r2, [r3], #4
 800aee8:	f841 2f04 	str.w	r2, [r1, #4]!
 800aeec:	4298      	cmp	r0, r3
 800aeee:	d8f9      	bhi.n	800aee4 <__lshift+0xc8>
 800aef0:	e7ea      	b.n	800aec8 <__lshift+0xac>
 800aef2:	bf00      	nop
 800aef4:	0801535b 	.word	0x0801535b
 800aef8:	0801536c 	.word	0x0801536c

0800aefc <__mcmp>:
 800aefc:	b530      	push	{r4, r5, lr}
 800aefe:	6902      	ldr	r2, [r0, #16]
 800af00:	690c      	ldr	r4, [r1, #16]
 800af02:	1b12      	subs	r2, r2, r4
 800af04:	d10e      	bne.n	800af24 <__mcmp+0x28>
 800af06:	f100 0314 	add.w	r3, r0, #20
 800af0a:	3114      	adds	r1, #20
 800af0c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800af10:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800af14:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800af18:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800af1c:	42a5      	cmp	r5, r4
 800af1e:	d003      	beq.n	800af28 <__mcmp+0x2c>
 800af20:	d305      	bcc.n	800af2e <__mcmp+0x32>
 800af22:	2201      	movs	r2, #1
 800af24:	4610      	mov	r0, r2
 800af26:	bd30      	pop	{r4, r5, pc}
 800af28:	4283      	cmp	r3, r0
 800af2a:	d3f3      	bcc.n	800af14 <__mcmp+0x18>
 800af2c:	e7fa      	b.n	800af24 <__mcmp+0x28>
 800af2e:	f04f 32ff 	mov.w	r2, #4294967295
 800af32:	e7f7      	b.n	800af24 <__mcmp+0x28>

0800af34 <__mdiff>:
 800af34:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af38:	460c      	mov	r4, r1
 800af3a:	4606      	mov	r6, r0
 800af3c:	4611      	mov	r1, r2
 800af3e:	4620      	mov	r0, r4
 800af40:	4690      	mov	r8, r2
 800af42:	f7ff ffdb 	bl	800aefc <__mcmp>
 800af46:	1e05      	subs	r5, r0, #0
 800af48:	d110      	bne.n	800af6c <__mdiff+0x38>
 800af4a:	4629      	mov	r1, r5
 800af4c:	4630      	mov	r0, r6
 800af4e:	f7ff fd53 	bl	800a9f8 <_Balloc>
 800af52:	b930      	cbnz	r0, 800af62 <__mdiff+0x2e>
 800af54:	4b3a      	ldr	r3, [pc, #232]	; (800b040 <__mdiff+0x10c>)
 800af56:	4602      	mov	r2, r0
 800af58:	f240 2132 	movw	r1, #562	; 0x232
 800af5c:	4839      	ldr	r0, [pc, #228]	; (800b044 <__mdiff+0x110>)
 800af5e:	f000 fb31 	bl	800b5c4 <__assert_func>
 800af62:	2301      	movs	r3, #1
 800af64:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800af68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af6c:	bfa4      	itt	ge
 800af6e:	4643      	movge	r3, r8
 800af70:	46a0      	movge	r8, r4
 800af72:	4630      	mov	r0, r6
 800af74:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800af78:	bfa6      	itte	ge
 800af7a:	461c      	movge	r4, r3
 800af7c:	2500      	movge	r5, #0
 800af7e:	2501      	movlt	r5, #1
 800af80:	f7ff fd3a 	bl	800a9f8 <_Balloc>
 800af84:	b920      	cbnz	r0, 800af90 <__mdiff+0x5c>
 800af86:	4b2e      	ldr	r3, [pc, #184]	; (800b040 <__mdiff+0x10c>)
 800af88:	4602      	mov	r2, r0
 800af8a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800af8e:	e7e5      	b.n	800af5c <__mdiff+0x28>
 800af90:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800af94:	6926      	ldr	r6, [r4, #16]
 800af96:	60c5      	str	r5, [r0, #12]
 800af98:	f104 0914 	add.w	r9, r4, #20
 800af9c:	f108 0514 	add.w	r5, r8, #20
 800afa0:	f100 0e14 	add.w	lr, r0, #20
 800afa4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800afa8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800afac:	f108 0210 	add.w	r2, r8, #16
 800afb0:	46f2      	mov	sl, lr
 800afb2:	2100      	movs	r1, #0
 800afb4:	f859 3b04 	ldr.w	r3, [r9], #4
 800afb8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800afbc:	fa1f f883 	uxth.w	r8, r3
 800afc0:	fa11 f18b 	uxtah	r1, r1, fp
 800afc4:	0c1b      	lsrs	r3, r3, #16
 800afc6:	eba1 0808 	sub.w	r8, r1, r8
 800afca:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800afce:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800afd2:	fa1f f888 	uxth.w	r8, r8
 800afd6:	1419      	asrs	r1, r3, #16
 800afd8:	454e      	cmp	r6, r9
 800afda:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800afde:	f84a 3b04 	str.w	r3, [sl], #4
 800afe2:	d8e7      	bhi.n	800afb4 <__mdiff+0x80>
 800afe4:	1b33      	subs	r3, r6, r4
 800afe6:	3b15      	subs	r3, #21
 800afe8:	f023 0303 	bic.w	r3, r3, #3
 800afec:	3304      	adds	r3, #4
 800afee:	3415      	adds	r4, #21
 800aff0:	42a6      	cmp	r6, r4
 800aff2:	bf38      	it	cc
 800aff4:	2304      	movcc	r3, #4
 800aff6:	441d      	add	r5, r3
 800aff8:	4473      	add	r3, lr
 800affa:	469e      	mov	lr, r3
 800affc:	462e      	mov	r6, r5
 800affe:	4566      	cmp	r6, ip
 800b000:	d30e      	bcc.n	800b020 <__mdiff+0xec>
 800b002:	f10c 0203 	add.w	r2, ip, #3
 800b006:	1b52      	subs	r2, r2, r5
 800b008:	f022 0203 	bic.w	r2, r2, #3
 800b00c:	3d03      	subs	r5, #3
 800b00e:	45ac      	cmp	ip, r5
 800b010:	bf38      	it	cc
 800b012:	2200      	movcc	r2, #0
 800b014:	441a      	add	r2, r3
 800b016:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b01a:	b17b      	cbz	r3, 800b03c <__mdiff+0x108>
 800b01c:	6107      	str	r7, [r0, #16]
 800b01e:	e7a3      	b.n	800af68 <__mdiff+0x34>
 800b020:	f856 8b04 	ldr.w	r8, [r6], #4
 800b024:	fa11 f288 	uxtah	r2, r1, r8
 800b028:	1414      	asrs	r4, r2, #16
 800b02a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b02e:	b292      	uxth	r2, r2
 800b030:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b034:	f84e 2b04 	str.w	r2, [lr], #4
 800b038:	1421      	asrs	r1, r4, #16
 800b03a:	e7e0      	b.n	800affe <__mdiff+0xca>
 800b03c:	3f01      	subs	r7, #1
 800b03e:	e7ea      	b.n	800b016 <__mdiff+0xe2>
 800b040:	0801535b 	.word	0x0801535b
 800b044:	0801536c 	.word	0x0801536c

0800b048 <__d2b>:
 800b048:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b04c:	4689      	mov	r9, r1
 800b04e:	2101      	movs	r1, #1
 800b050:	ec57 6b10 	vmov	r6, r7, d0
 800b054:	4690      	mov	r8, r2
 800b056:	f7ff fccf 	bl	800a9f8 <_Balloc>
 800b05a:	4604      	mov	r4, r0
 800b05c:	b930      	cbnz	r0, 800b06c <__d2b+0x24>
 800b05e:	4602      	mov	r2, r0
 800b060:	4b25      	ldr	r3, [pc, #148]	; (800b0f8 <__d2b+0xb0>)
 800b062:	4826      	ldr	r0, [pc, #152]	; (800b0fc <__d2b+0xb4>)
 800b064:	f240 310a 	movw	r1, #778	; 0x30a
 800b068:	f000 faac 	bl	800b5c4 <__assert_func>
 800b06c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b070:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b074:	bb35      	cbnz	r5, 800b0c4 <__d2b+0x7c>
 800b076:	2e00      	cmp	r6, #0
 800b078:	9301      	str	r3, [sp, #4]
 800b07a:	d028      	beq.n	800b0ce <__d2b+0x86>
 800b07c:	4668      	mov	r0, sp
 800b07e:	9600      	str	r6, [sp, #0]
 800b080:	f7ff fd82 	bl	800ab88 <__lo0bits>
 800b084:	9900      	ldr	r1, [sp, #0]
 800b086:	b300      	cbz	r0, 800b0ca <__d2b+0x82>
 800b088:	9a01      	ldr	r2, [sp, #4]
 800b08a:	f1c0 0320 	rsb	r3, r0, #32
 800b08e:	fa02 f303 	lsl.w	r3, r2, r3
 800b092:	430b      	orrs	r3, r1
 800b094:	40c2      	lsrs	r2, r0
 800b096:	6163      	str	r3, [r4, #20]
 800b098:	9201      	str	r2, [sp, #4]
 800b09a:	9b01      	ldr	r3, [sp, #4]
 800b09c:	61a3      	str	r3, [r4, #24]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	bf14      	ite	ne
 800b0a2:	2202      	movne	r2, #2
 800b0a4:	2201      	moveq	r2, #1
 800b0a6:	6122      	str	r2, [r4, #16]
 800b0a8:	b1d5      	cbz	r5, 800b0e0 <__d2b+0x98>
 800b0aa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b0ae:	4405      	add	r5, r0
 800b0b0:	f8c9 5000 	str.w	r5, [r9]
 800b0b4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b0b8:	f8c8 0000 	str.w	r0, [r8]
 800b0bc:	4620      	mov	r0, r4
 800b0be:	b003      	add	sp, #12
 800b0c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b0c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b0c8:	e7d5      	b.n	800b076 <__d2b+0x2e>
 800b0ca:	6161      	str	r1, [r4, #20]
 800b0cc:	e7e5      	b.n	800b09a <__d2b+0x52>
 800b0ce:	a801      	add	r0, sp, #4
 800b0d0:	f7ff fd5a 	bl	800ab88 <__lo0bits>
 800b0d4:	9b01      	ldr	r3, [sp, #4]
 800b0d6:	6163      	str	r3, [r4, #20]
 800b0d8:	2201      	movs	r2, #1
 800b0da:	6122      	str	r2, [r4, #16]
 800b0dc:	3020      	adds	r0, #32
 800b0de:	e7e3      	b.n	800b0a8 <__d2b+0x60>
 800b0e0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b0e4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b0e8:	f8c9 0000 	str.w	r0, [r9]
 800b0ec:	6918      	ldr	r0, [r3, #16]
 800b0ee:	f7ff fd2b 	bl	800ab48 <__hi0bits>
 800b0f2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b0f6:	e7df      	b.n	800b0b8 <__d2b+0x70>
 800b0f8:	0801535b 	.word	0x0801535b
 800b0fc:	0801536c 	.word	0x0801536c

0800b100 <_calloc_r>:
 800b100:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b102:	fba1 2402 	umull	r2, r4, r1, r2
 800b106:	b94c      	cbnz	r4, 800b11c <_calloc_r+0x1c>
 800b108:	4611      	mov	r1, r2
 800b10a:	9201      	str	r2, [sp, #4]
 800b10c:	f000 f87a 	bl	800b204 <_malloc_r>
 800b110:	9a01      	ldr	r2, [sp, #4]
 800b112:	4605      	mov	r5, r0
 800b114:	b930      	cbnz	r0, 800b124 <_calloc_r+0x24>
 800b116:	4628      	mov	r0, r5
 800b118:	b003      	add	sp, #12
 800b11a:	bd30      	pop	{r4, r5, pc}
 800b11c:	220c      	movs	r2, #12
 800b11e:	6002      	str	r2, [r0, #0]
 800b120:	2500      	movs	r5, #0
 800b122:	e7f8      	b.n	800b116 <_calloc_r+0x16>
 800b124:	4621      	mov	r1, r4
 800b126:	f7fe f941 	bl	80093ac <memset>
 800b12a:	e7f4      	b.n	800b116 <_calloc_r+0x16>

0800b12c <_free_r>:
 800b12c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b12e:	2900      	cmp	r1, #0
 800b130:	d044      	beq.n	800b1bc <_free_r+0x90>
 800b132:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b136:	9001      	str	r0, [sp, #4]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	f1a1 0404 	sub.w	r4, r1, #4
 800b13e:	bfb8      	it	lt
 800b140:	18e4      	addlt	r4, r4, r3
 800b142:	f000 fa9b 	bl	800b67c <__malloc_lock>
 800b146:	4a1e      	ldr	r2, [pc, #120]	; (800b1c0 <_free_r+0x94>)
 800b148:	9801      	ldr	r0, [sp, #4]
 800b14a:	6813      	ldr	r3, [r2, #0]
 800b14c:	b933      	cbnz	r3, 800b15c <_free_r+0x30>
 800b14e:	6063      	str	r3, [r4, #4]
 800b150:	6014      	str	r4, [r2, #0]
 800b152:	b003      	add	sp, #12
 800b154:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b158:	f000 ba96 	b.w	800b688 <__malloc_unlock>
 800b15c:	42a3      	cmp	r3, r4
 800b15e:	d908      	bls.n	800b172 <_free_r+0x46>
 800b160:	6825      	ldr	r5, [r4, #0]
 800b162:	1961      	adds	r1, r4, r5
 800b164:	428b      	cmp	r3, r1
 800b166:	bf01      	itttt	eq
 800b168:	6819      	ldreq	r1, [r3, #0]
 800b16a:	685b      	ldreq	r3, [r3, #4]
 800b16c:	1949      	addeq	r1, r1, r5
 800b16e:	6021      	streq	r1, [r4, #0]
 800b170:	e7ed      	b.n	800b14e <_free_r+0x22>
 800b172:	461a      	mov	r2, r3
 800b174:	685b      	ldr	r3, [r3, #4]
 800b176:	b10b      	cbz	r3, 800b17c <_free_r+0x50>
 800b178:	42a3      	cmp	r3, r4
 800b17a:	d9fa      	bls.n	800b172 <_free_r+0x46>
 800b17c:	6811      	ldr	r1, [r2, #0]
 800b17e:	1855      	adds	r5, r2, r1
 800b180:	42a5      	cmp	r5, r4
 800b182:	d10b      	bne.n	800b19c <_free_r+0x70>
 800b184:	6824      	ldr	r4, [r4, #0]
 800b186:	4421      	add	r1, r4
 800b188:	1854      	adds	r4, r2, r1
 800b18a:	42a3      	cmp	r3, r4
 800b18c:	6011      	str	r1, [r2, #0]
 800b18e:	d1e0      	bne.n	800b152 <_free_r+0x26>
 800b190:	681c      	ldr	r4, [r3, #0]
 800b192:	685b      	ldr	r3, [r3, #4]
 800b194:	6053      	str	r3, [r2, #4]
 800b196:	4421      	add	r1, r4
 800b198:	6011      	str	r1, [r2, #0]
 800b19a:	e7da      	b.n	800b152 <_free_r+0x26>
 800b19c:	d902      	bls.n	800b1a4 <_free_r+0x78>
 800b19e:	230c      	movs	r3, #12
 800b1a0:	6003      	str	r3, [r0, #0]
 800b1a2:	e7d6      	b.n	800b152 <_free_r+0x26>
 800b1a4:	6825      	ldr	r5, [r4, #0]
 800b1a6:	1961      	adds	r1, r4, r5
 800b1a8:	428b      	cmp	r3, r1
 800b1aa:	bf04      	itt	eq
 800b1ac:	6819      	ldreq	r1, [r3, #0]
 800b1ae:	685b      	ldreq	r3, [r3, #4]
 800b1b0:	6063      	str	r3, [r4, #4]
 800b1b2:	bf04      	itt	eq
 800b1b4:	1949      	addeq	r1, r1, r5
 800b1b6:	6021      	streq	r1, [r4, #0]
 800b1b8:	6054      	str	r4, [r2, #4]
 800b1ba:	e7ca      	b.n	800b152 <_free_r+0x26>
 800b1bc:	b003      	add	sp, #12
 800b1be:	bd30      	pop	{r4, r5, pc}
 800b1c0:	20003790 	.word	0x20003790

0800b1c4 <sbrk_aligned>:
 800b1c4:	b570      	push	{r4, r5, r6, lr}
 800b1c6:	4e0e      	ldr	r6, [pc, #56]	; (800b200 <sbrk_aligned+0x3c>)
 800b1c8:	460c      	mov	r4, r1
 800b1ca:	6831      	ldr	r1, [r6, #0]
 800b1cc:	4605      	mov	r5, r0
 800b1ce:	b911      	cbnz	r1, 800b1d6 <sbrk_aligned+0x12>
 800b1d0:	f000 f9e8 	bl	800b5a4 <_sbrk_r>
 800b1d4:	6030      	str	r0, [r6, #0]
 800b1d6:	4621      	mov	r1, r4
 800b1d8:	4628      	mov	r0, r5
 800b1da:	f000 f9e3 	bl	800b5a4 <_sbrk_r>
 800b1de:	1c43      	adds	r3, r0, #1
 800b1e0:	d00a      	beq.n	800b1f8 <sbrk_aligned+0x34>
 800b1e2:	1cc4      	adds	r4, r0, #3
 800b1e4:	f024 0403 	bic.w	r4, r4, #3
 800b1e8:	42a0      	cmp	r0, r4
 800b1ea:	d007      	beq.n	800b1fc <sbrk_aligned+0x38>
 800b1ec:	1a21      	subs	r1, r4, r0
 800b1ee:	4628      	mov	r0, r5
 800b1f0:	f000 f9d8 	bl	800b5a4 <_sbrk_r>
 800b1f4:	3001      	adds	r0, #1
 800b1f6:	d101      	bne.n	800b1fc <sbrk_aligned+0x38>
 800b1f8:	f04f 34ff 	mov.w	r4, #4294967295
 800b1fc:	4620      	mov	r0, r4
 800b1fe:	bd70      	pop	{r4, r5, r6, pc}
 800b200:	20003794 	.word	0x20003794

0800b204 <_malloc_r>:
 800b204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b208:	1ccd      	adds	r5, r1, #3
 800b20a:	f025 0503 	bic.w	r5, r5, #3
 800b20e:	3508      	adds	r5, #8
 800b210:	2d0c      	cmp	r5, #12
 800b212:	bf38      	it	cc
 800b214:	250c      	movcc	r5, #12
 800b216:	2d00      	cmp	r5, #0
 800b218:	4607      	mov	r7, r0
 800b21a:	db01      	blt.n	800b220 <_malloc_r+0x1c>
 800b21c:	42a9      	cmp	r1, r5
 800b21e:	d905      	bls.n	800b22c <_malloc_r+0x28>
 800b220:	230c      	movs	r3, #12
 800b222:	603b      	str	r3, [r7, #0]
 800b224:	2600      	movs	r6, #0
 800b226:	4630      	mov	r0, r6
 800b228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b22c:	4e2e      	ldr	r6, [pc, #184]	; (800b2e8 <_malloc_r+0xe4>)
 800b22e:	f000 fa25 	bl	800b67c <__malloc_lock>
 800b232:	6833      	ldr	r3, [r6, #0]
 800b234:	461c      	mov	r4, r3
 800b236:	bb34      	cbnz	r4, 800b286 <_malloc_r+0x82>
 800b238:	4629      	mov	r1, r5
 800b23a:	4638      	mov	r0, r7
 800b23c:	f7ff ffc2 	bl	800b1c4 <sbrk_aligned>
 800b240:	1c43      	adds	r3, r0, #1
 800b242:	4604      	mov	r4, r0
 800b244:	d14d      	bne.n	800b2e2 <_malloc_r+0xde>
 800b246:	6834      	ldr	r4, [r6, #0]
 800b248:	4626      	mov	r6, r4
 800b24a:	2e00      	cmp	r6, #0
 800b24c:	d140      	bne.n	800b2d0 <_malloc_r+0xcc>
 800b24e:	6823      	ldr	r3, [r4, #0]
 800b250:	4631      	mov	r1, r6
 800b252:	4638      	mov	r0, r7
 800b254:	eb04 0803 	add.w	r8, r4, r3
 800b258:	f000 f9a4 	bl	800b5a4 <_sbrk_r>
 800b25c:	4580      	cmp	r8, r0
 800b25e:	d13a      	bne.n	800b2d6 <_malloc_r+0xd2>
 800b260:	6821      	ldr	r1, [r4, #0]
 800b262:	3503      	adds	r5, #3
 800b264:	1a6d      	subs	r5, r5, r1
 800b266:	f025 0503 	bic.w	r5, r5, #3
 800b26a:	3508      	adds	r5, #8
 800b26c:	2d0c      	cmp	r5, #12
 800b26e:	bf38      	it	cc
 800b270:	250c      	movcc	r5, #12
 800b272:	4629      	mov	r1, r5
 800b274:	4638      	mov	r0, r7
 800b276:	f7ff ffa5 	bl	800b1c4 <sbrk_aligned>
 800b27a:	3001      	adds	r0, #1
 800b27c:	d02b      	beq.n	800b2d6 <_malloc_r+0xd2>
 800b27e:	6823      	ldr	r3, [r4, #0]
 800b280:	442b      	add	r3, r5
 800b282:	6023      	str	r3, [r4, #0]
 800b284:	e00e      	b.n	800b2a4 <_malloc_r+0xa0>
 800b286:	6822      	ldr	r2, [r4, #0]
 800b288:	1b52      	subs	r2, r2, r5
 800b28a:	d41e      	bmi.n	800b2ca <_malloc_r+0xc6>
 800b28c:	2a0b      	cmp	r2, #11
 800b28e:	d916      	bls.n	800b2be <_malloc_r+0xba>
 800b290:	1961      	adds	r1, r4, r5
 800b292:	42a3      	cmp	r3, r4
 800b294:	6025      	str	r5, [r4, #0]
 800b296:	bf18      	it	ne
 800b298:	6059      	strne	r1, [r3, #4]
 800b29a:	6863      	ldr	r3, [r4, #4]
 800b29c:	bf08      	it	eq
 800b29e:	6031      	streq	r1, [r6, #0]
 800b2a0:	5162      	str	r2, [r4, r5]
 800b2a2:	604b      	str	r3, [r1, #4]
 800b2a4:	4638      	mov	r0, r7
 800b2a6:	f104 060b 	add.w	r6, r4, #11
 800b2aa:	f000 f9ed 	bl	800b688 <__malloc_unlock>
 800b2ae:	f026 0607 	bic.w	r6, r6, #7
 800b2b2:	1d23      	adds	r3, r4, #4
 800b2b4:	1af2      	subs	r2, r6, r3
 800b2b6:	d0b6      	beq.n	800b226 <_malloc_r+0x22>
 800b2b8:	1b9b      	subs	r3, r3, r6
 800b2ba:	50a3      	str	r3, [r4, r2]
 800b2bc:	e7b3      	b.n	800b226 <_malloc_r+0x22>
 800b2be:	6862      	ldr	r2, [r4, #4]
 800b2c0:	42a3      	cmp	r3, r4
 800b2c2:	bf0c      	ite	eq
 800b2c4:	6032      	streq	r2, [r6, #0]
 800b2c6:	605a      	strne	r2, [r3, #4]
 800b2c8:	e7ec      	b.n	800b2a4 <_malloc_r+0xa0>
 800b2ca:	4623      	mov	r3, r4
 800b2cc:	6864      	ldr	r4, [r4, #4]
 800b2ce:	e7b2      	b.n	800b236 <_malloc_r+0x32>
 800b2d0:	4634      	mov	r4, r6
 800b2d2:	6876      	ldr	r6, [r6, #4]
 800b2d4:	e7b9      	b.n	800b24a <_malloc_r+0x46>
 800b2d6:	230c      	movs	r3, #12
 800b2d8:	603b      	str	r3, [r7, #0]
 800b2da:	4638      	mov	r0, r7
 800b2dc:	f000 f9d4 	bl	800b688 <__malloc_unlock>
 800b2e0:	e7a1      	b.n	800b226 <_malloc_r+0x22>
 800b2e2:	6025      	str	r5, [r4, #0]
 800b2e4:	e7de      	b.n	800b2a4 <_malloc_r+0xa0>
 800b2e6:	bf00      	nop
 800b2e8:	20003790 	.word	0x20003790

0800b2ec <__ssputs_r>:
 800b2ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b2f0:	688e      	ldr	r6, [r1, #8]
 800b2f2:	429e      	cmp	r6, r3
 800b2f4:	4682      	mov	sl, r0
 800b2f6:	460c      	mov	r4, r1
 800b2f8:	4690      	mov	r8, r2
 800b2fa:	461f      	mov	r7, r3
 800b2fc:	d838      	bhi.n	800b370 <__ssputs_r+0x84>
 800b2fe:	898a      	ldrh	r2, [r1, #12]
 800b300:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b304:	d032      	beq.n	800b36c <__ssputs_r+0x80>
 800b306:	6825      	ldr	r5, [r4, #0]
 800b308:	6909      	ldr	r1, [r1, #16]
 800b30a:	eba5 0901 	sub.w	r9, r5, r1
 800b30e:	6965      	ldr	r5, [r4, #20]
 800b310:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b314:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b318:	3301      	adds	r3, #1
 800b31a:	444b      	add	r3, r9
 800b31c:	106d      	asrs	r5, r5, #1
 800b31e:	429d      	cmp	r5, r3
 800b320:	bf38      	it	cc
 800b322:	461d      	movcc	r5, r3
 800b324:	0553      	lsls	r3, r2, #21
 800b326:	d531      	bpl.n	800b38c <__ssputs_r+0xa0>
 800b328:	4629      	mov	r1, r5
 800b32a:	f7ff ff6b 	bl	800b204 <_malloc_r>
 800b32e:	4606      	mov	r6, r0
 800b330:	b950      	cbnz	r0, 800b348 <__ssputs_r+0x5c>
 800b332:	230c      	movs	r3, #12
 800b334:	f8ca 3000 	str.w	r3, [sl]
 800b338:	89a3      	ldrh	r3, [r4, #12]
 800b33a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b33e:	81a3      	strh	r3, [r4, #12]
 800b340:	f04f 30ff 	mov.w	r0, #4294967295
 800b344:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b348:	6921      	ldr	r1, [r4, #16]
 800b34a:	464a      	mov	r2, r9
 800b34c:	f7ff fb46 	bl	800a9dc <memcpy>
 800b350:	89a3      	ldrh	r3, [r4, #12]
 800b352:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b356:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b35a:	81a3      	strh	r3, [r4, #12]
 800b35c:	6126      	str	r6, [r4, #16]
 800b35e:	6165      	str	r5, [r4, #20]
 800b360:	444e      	add	r6, r9
 800b362:	eba5 0509 	sub.w	r5, r5, r9
 800b366:	6026      	str	r6, [r4, #0]
 800b368:	60a5      	str	r5, [r4, #8]
 800b36a:	463e      	mov	r6, r7
 800b36c:	42be      	cmp	r6, r7
 800b36e:	d900      	bls.n	800b372 <__ssputs_r+0x86>
 800b370:	463e      	mov	r6, r7
 800b372:	6820      	ldr	r0, [r4, #0]
 800b374:	4632      	mov	r2, r6
 800b376:	4641      	mov	r1, r8
 800b378:	f000 f966 	bl	800b648 <memmove>
 800b37c:	68a3      	ldr	r3, [r4, #8]
 800b37e:	1b9b      	subs	r3, r3, r6
 800b380:	60a3      	str	r3, [r4, #8]
 800b382:	6823      	ldr	r3, [r4, #0]
 800b384:	4433      	add	r3, r6
 800b386:	6023      	str	r3, [r4, #0]
 800b388:	2000      	movs	r0, #0
 800b38a:	e7db      	b.n	800b344 <__ssputs_r+0x58>
 800b38c:	462a      	mov	r2, r5
 800b38e:	f000 f981 	bl	800b694 <_realloc_r>
 800b392:	4606      	mov	r6, r0
 800b394:	2800      	cmp	r0, #0
 800b396:	d1e1      	bne.n	800b35c <__ssputs_r+0x70>
 800b398:	6921      	ldr	r1, [r4, #16]
 800b39a:	4650      	mov	r0, sl
 800b39c:	f7ff fec6 	bl	800b12c <_free_r>
 800b3a0:	e7c7      	b.n	800b332 <__ssputs_r+0x46>
	...

0800b3a4 <_svfiprintf_r>:
 800b3a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3a8:	4698      	mov	r8, r3
 800b3aa:	898b      	ldrh	r3, [r1, #12]
 800b3ac:	061b      	lsls	r3, r3, #24
 800b3ae:	b09d      	sub	sp, #116	; 0x74
 800b3b0:	4607      	mov	r7, r0
 800b3b2:	460d      	mov	r5, r1
 800b3b4:	4614      	mov	r4, r2
 800b3b6:	d50e      	bpl.n	800b3d6 <_svfiprintf_r+0x32>
 800b3b8:	690b      	ldr	r3, [r1, #16]
 800b3ba:	b963      	cbnz	r3, 800b3d6 <_svfiprintf_r+0x32>
 800b3bc:	2140      	movs	r1, #64	; 0x40
 800b3be:	f7ff ff21 	bl	800b204 <_malloc_r>
 800b3c2:	6028      	str	r0, [r5, #0]
 800b3c4:	6128      	str	r0, [r5, #16]
 800b3c6:	b920      	cbnz	r0, 800b3d2 <_svfiprintf_r+0x2e>
 800b3c8:	230c      	movs	r3, #12
 800b3ca:	603b      	str	r3, [r7, #0]
 800b3cc:	f04f 30ff 	mov.w	r0, #4294967295
 800b3d0:	e0d1      	b.n	800b576 <_svfiprintf_r+0x1d2>
 800b3d2:	2340      	movs	r3, #64	; 0x40
 800b3d4:	616b      	str	r3, [r5, #20]
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	9309      	str	r3, [sp, #36]	; 0x24
 800b3da:	2320      	movs	r3, #32
 800b3dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b3e0:	f8cd 800c 	str.w	r8, [sp, #12]
 800b3e4:	2330      	movs	r3, #48	; 0x30
 800b3e6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b590 <_svfiprintf_r+0x1ec>
 800b3ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b3ee:	f04f 0901 	mov.w	r9, #1
 800b3f2:	4623      	mov	r3, r4
 800b3f4:	469a      	mov	sl, r3
 800b3f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b3fa:	b10a      	cbz	r2, 800b400 <_svfiprintf_r+0x5c>
 800b3fc:	2a25      	cmp	r2, #37	; 0x25
 800b3fe:	d1f9      	bne.n	800b3f4 <_svfiprintf_r+0x50>
 800b400:	ebba 0b04 	subs.w	fp, sl, r4
 800b404:	d00b      	beq.n	800b41e <_svfiprintf_r+0x7a>
 800b406:	465b      	mov	r3, fp
 800b408:	4622      	mov	r2, r4
 800b40a:	4629      	mov	r1, r5
 800b40c:	4638      	mov	r0, r7
 800b40e:	f7ff ff6d 	bl	800b2ec <__ssputs_r>
 800b412:	3001      	adds	r0, #1
 800b414:	f000 80aa 	beq.w	800b56c <_svfiprintf_r+0x1c8>
 800b418:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b41a:	445a      	add	r2, fp
 800b41c:	9209      	str	r2, [sp, #36]	; 0x24
 800b41e:	f89a 3000 	ldrb.w	r3, [sl]
 800b422:	2b00      	cmp	r3, #0
 800b424:	f000 80a2 	beq.w	800b56c <_svfiprintf_r+0x1c8>
 800b428:	2300      	movs	r3, #0
 800b42a:	f04f 32ff 	mov.w	r2, #4294967295
 800b42e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b432:	f10a 0a01 	add.w	sl, sl, #1
 800b436:	9304      	str	r3, [sp, #16]
 800b438:	9307      	str	r3, [sp, #28]
 800b43a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b43e:	931a      	str	r3, [sp, #104]	; 0x68
 800b440:	4654      	mov	r4, sl
 800b442:	2205      	movs	r2, #5
 800b444:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b448:	4851      	ldr	r0, [pc, #324]	; (800b590 <_svfiprintf_r+0x1ec>)
 800b44a:	f7f4 fed1 	bl	80001f0 <memchr>
 800b44e:	9a04      	ldr	r2, [sp, #16]
 800b450:	b9d8      	cbnz	r0, 800b48a <_svfiprintf_r+0xe6>
 800b452:	06d0      	lsls	r0, r2, #27
 800b454:	bf44      	itt	mi
 800b456:	2320      	movmi	r3, #32
 800b458:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b45c:	0711      	lsls	r1, r2, #28
 800b45e:	bf44      	itt	mi
 800b460:	232b      	movmi	r3, #43	; 0x2b
 800b462:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b466:	f89a 3000 	ldrb.w	r3, [sl]
 800b46a:	2b2a      	cmp	r3, #42	; 0x2a
 800b46c:	d015      	beq.n	800b49a <_svfiprintf_r+0xf6>
 800b46e:	9a07      	ldr	r2, [sp, #28]
 800b470:	4654      	mov	r4, sl
 800b472:	2000      	movs	r0, #0
 800b474:	f04f 0c0a 	mov.w	ip, #10
 800b478:	4621      	mov	r1, r4
 800b47a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b47e:	3b30      	subs	r3, #48	; 0x30
 800b480:	2b09      	cmp	r3, #9
 800b482:	d94e      	bls.n	800b522 <_svfiprintf_r+0x17e>
 800b484:	b1b0      	cbz	r0, 800b4b4 <_svfiprintf_r+0x110>
 800b486:	9207      	str	r2, [sp, #28]
 800b488:	e014      	b.n	800b4b4 <_svfiprintf_r+0x110>
 800b48a:	eba0 0308 	sub.w	r3, r0, r8
 800b48e:	fa09 f303 	lsl.w	r3, r9, r3
 800b492:	4313      	orrs	r3, r2
 800b494:	9304      	str	r3, [sp, #16]
 800b496:	46a2      	mov	sl, r4
 800b498:	e7d2      	b.n	800b440 <_svfiprintf_r+0x9c>
 800b49a:	9b03      	ldr	r3, [sp, #12]
 800b49c:	1d19      	adds	r1, r3, #4
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	9103      	str	r1, [sp, #12]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	bfbb      	ittet	lt
 800b4a6:	425b      	neglt	r3, r3
 800b4a8:	f042 0202 	orrlt.w	r2, r2, #2
 800b4ac:	9307      	strge	r3, [sp, #28]
 800b4ae:	9307      	strlt	r3, [sp, #28]
 800b4b0:	bfb8      	it	lt
 800b4b2:	9204      	strlt	r2, [sp, #16]
 800b4b4:	7823      	ldrb	r3, [r4, #0]
 800b4b6:	2b2e      	cmp	r3, #46	; 0x2e
 800b4b8:	d10c      	bne.n	800b4d4 <_svfiprintf_r+0x130>
 800b4ba:	7863      	ldrb	r3, [r4, #1]
 800b4bc:	2b2a      	cmp	r3, #42	; 0x2a
 800b4be:	d135      	bne.n	800b52c <_svfiprintf_r+0x188>
 800b4c0:	9b03      	ldr	r3, [sp, #12]
 800b4c2:	1d1a      	adds	r2, r3, #4
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	9203      	str	r2, [sp, #12]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	bfb8      	it	lt
 800b4cc:	f04f 33ff 	movlt.w	r3, #4294967295
 800b4d0:	3402      	adds	r4, #2
 800b4d2:	9305      	str	r3, [sp, #20]
 800b4d4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b5a0 <_svfiprintf_r+0x1fc>
 800b4d8:	7821      	ldrb	r1, [r4, #0]
 800b4da:	2203      	movs	r2, #3
 800b4dc:	4650      	mov	r0, sl
 800b4de:	f7f4 fe87 	bl	80001f0 <memchr>
 800b4e2:	b140      	cbz	r0, 800b4f6 <_svfiprintf_r+0x152>
 800b4e4:	2340      	movs	r3, #64	; 0x40
 800b4e6:	eba0 000a 	sub.w	r0, r0, sl
 800b4ea:	fa03 f000 	lsl.w	r0, r3, r0
 800b4ee:	9b04      	ldr	r3, [sp, #16]
 800b4f0:	4303      	orrs	r3, r0
 800b4f2:	3401      	adds	r4, #1
 800b4f4:	9304      	str	r3, [sp, #16]
 800b4f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4fa:	4826      	ldr	r0, [pc, #152]	; (800b594 <_svfiprintf_r+0x1f0>)
 800b4fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b500:	2206      	movs	r2, #6
 800b502:	f7f4 fe75 	bl	80001f0 <memchr>
 800b506:	2800      	cmp	r0, #0
 800b508:	d038      	beq.n	800b57c <_svfiprintf_r+0x1d8>
 800b50a:	4b23      	ldr	r3, [pc, #140]	; (800b598 <_svfiprintf_r+0x1f4>)
 800b50c:	bb1b      	cbnz	r3, 800b556 <_svfiprintf_r+0x1b2>
 800b50e:	9b03      	ldr	r3, [sp, #12]
 800b510:	3307      	adds	r3, #7
 800b512:	f023 0307 	bic.w	r3, r3, #7
 800b516:	3308      	adds	r3, #8
 800b518:	9303      	str	r3, [sp, #12]
 800b51a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b51c:	4433      	add	r3, r6
 800b51e:	9309      	str	r3, [sp, #36]	; 0x24
 800b520:	e767      	b.n	800b3f2 <_svfiprintf_r+0x4e>
 800b522:	fb0c 3202 	mla	r2, ip, r2, r3
 800b526:	460c      	mov	r4, r1
 800b528:	2001      	movs	r0, #1
 800b52a:	e7a5      	b.n	800b478 <_svfiprintf_r+0xd4>
 800b52c:	2300      	movs	r3, #0
 800b52e:	3401      	adds	r4, #1
 800b530:	9305      	str	r3, [sp, #20]
 800b532:	4619      	mov	r1, r3
 800b534:	f04f 0c0a 	mov.w	ip, #10
 800b538:	4620      	mov	r0, r4
 800b53a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b53e:	3a30      	subs	r2, #48	; 0x30
 800b540:	2a09      	cmp	r2, #9
 800b542:	d903      	bls.n	800b54c <_svfiprintf_r+0x1a8>
 800b544:	2b00      	cmp	r3, #0
 800b546:	d0c5      	beq.n	800b4d4 <_svfiprintf_r+0x130>
 800b548:	9105      	str	r1, [sp, #20]
 800b54a:	e7c3      	b.n	800b4d4 <_svfiprintf_r+0x130>
 800b54c:	fb0c 2101 	mla	r1, ip, r1, r2
 800b550:	4604      	mov	r4, r0
 800b552:	2301      	movs	r3, #1
 800b554:	e7f0      	b.n	800b538 <_svfiprintf_r+0x194>
 800b556:	ab03      	add	r3, sp, #12
 800b558:	9300      	str	r3, [sp, #0]
 800b55a:	462a      	mov	r2, r5
 800b55c:	4b0f      	ldr	r3, [pc, #60]	; (800b59c <_svfiprintf_r+0x1f8>)
 800b55e:	a904      	add	r1, sp, #16
 800b560:	4638      	mov	r0, r7
 800b562:	f7fd ffcb 	bl	80094fc <_printf_float>
 800b566:	1c42      	adds	r2, r0, #1
 800b568:	4606      	mov	r6, r0
 800b56a:	d1d6      	bne.n	800b51a <_svfiprintf_r+0x176>
 800b56c:	89ab      	ldrh	r3, [r5, #12]
 800b56e:	065b      	lsls	r3, r3, #25
 800b570:	f53f af2c 	bmi.w	800b3cc <_svfiprintf_r+0x28>
 800b574:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b576:	b01d      	add	sp, #116	; 0x74
 800b578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b57c:	ab03      	add	r3, sp, #12
 800b57e:	9300      	str	r3, [sp, #0]
 800b580:	462a      	mov	r2, r5
 800b582:	4b06      	ldr	r3, [pc, #24]	; (800b59c <_svfiprintf_r+0x1f8>)
 800b584:	a904      	add	r1, sp, #16
 800b586:	4638      	mov	r0, r7
 800b588:	f7fe fa5c 	bl	8009a44 <_printf_i>
 800b58c:	e7eb      	b.n	800b566 <_svfiprintf_r+0x1c2>
 800b58e:	bf00      	nop
 800b590:	080154c4 	.word	0x080154c4
 800b594:	080154ce 	.word	0x080154ce
 800b598:	080094fd 	.word	0x080094fd
 800b59c:	0800b2ed 	.word	0x0800b2ed
 800b5a0:	080154ca 	.word	0x080154ca

0800b5a4 <_sbrk_r>:
 800b5a4:	b538      	push	{r3, r4, r5, lr}
 800b5a6:	4d06      	ldr	r5, [pc, #24]	; (800b5c0 <_sbrk_r+0x1c>)
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	4604      	mov	r4, r0
 800b5ac:	4608      	mov	r0, r1
 800b5ae:	602b      	str	r3, [r5, #0]
 800b5b0:	f7f6 fffc 	bl	80025ac <_sbrk>
 800b5b4:	1c43      	adds	r3, r0, #1
 800b5b6:	d102      	bne.n	800b5be <_sbrk_r+0x1a>
 800b5b8:	682b      	ldr	r3, [r5, #0]
 800b5ba:	b103      	cbz	r3, 800b5be <_sbrk_r+0x1a>
 800b5bc:	6023      	str	r3, [r4, #0]
 800b5be:	bd38      	pop	{r3, r4, r5, pc}
 800b5c0:	20003798 	.word	0x20003798

0800b5c4 <__assert_func>:
 800b5c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b5c6:	4614      	mov	r4, r2
 800b5c8:	461a      	mov	r2, r3
 800b5ca:	4b09      	ldr	r3, [pc, #36]	; (800b5f0 <__assert_func+0x2c>)
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	4605      	mov	r5, r0
 800b5d0:	68d8      	ldr	r0, [r3, #12]
 800b5d2:	b14c      	cbz	r4, 800b5e8 <__assert_func+0x24>
 800b5d4:	4b07      	ldr	r3, [pc, #28]	; (800b5f4 <__assert_func+0x30>)
 800b5d6:	9100      	str	r1, [sp, #0]
 800b5d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b5dc:	4906      	ldr	r1, [pc, #24]	; (800b5f8 <__assert_func+0x34>)
 800b5de:	462b      	mov	r3, r5
 800b5e0:	f000 f80e 	bl	800b600 <fiprintf>
 800b5e4:	f000 faac 	bl	800bb40 <abort>
 800b5e8:	4b04      	ldr	r3, [pc, #16]	; (800b5fc <__assert_func+0x38>)
 800b5ea:	461c      	mov	r4, r3
 800b5ec:	e7f3      	b.n	800b5d6 <__assert_func+0x12>
 800b5ee:	bf00      	nop
 800b5f0:	20000024 	.word	0x20000024
 800b5f4:	080154d5 	.word	0x080154d5
 800b5f8:	080154e2 	.word	0x080154e2
 800b5fc:	08015510 	.word	0x08015510

0800b600 <fiprintf>:
 800b600:	b40e      	push	{r1, r2, r3}
 800b602:	b503      	push	{r0, r1, lr}
 800b604:	4601      	mov	r1, r0
 800b606:	ab03      	add	r3, sp, #12
 800b608:	4805      	ldr	r0, [pc, #20]	; (800b620 <fiprintf+0x20>)
 800b60a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b60e:	6800      	ldr	r0, [r0, #0]
 800b610:	9301      	str	r3, [sp, #4]
 800b612:	f000 f897 	bl	800b744 <_vfiprintf_r>
 800b616:	b002      	add	sp, #8
 800b618:	f85d eb04 	ldr.w	lr, [sp], #4
 800b61c:	b003      	add	sp, #12
 800b61e:	4770      	bx	lr
 800b620:	20000024 	.word	0x20000024

0800b624 <__ascii_mbtowc>:
 800b624:	b082      	sub	sp, #8
 800b626:	b901      	cbnz	r1, 800b62a <__ascii_mbtowc+0x6>
 800b628:	a901      	add	r1, sp, #4
 800b62a:	b142      	cbz	r2, 800b63e <__ascii_mbtowc+0x1a>
 800b62c:	b14b      	cbz	r3, 800b642 <__ascii_mbtowc+0x1e>
 800b62e:	7813      	ldrb	r3, [r2, #0]
 800b630:	600b      	str	r3, [r1, #0]
 800b632:	7812      	ldrb	r2, [r2, #0]
 800b634:	1e10      	subs	r0, r2, #0
 800b636:	bf18      	it	ne
 800b638:	2001      	movne	r0, #1
 800b63a:	b002      	add	sp, #8
 800b63c:	4770      	bx	lr
 800b63e:	4610      	mov	r0, r2
 800b640:	e7fb      	b.n	800b63a <__ascii_mbtowc+0x16>
 800b642:	f06f 0001 	mvn.w	r0, #1
 800b646:	e7f8      	b.n	800b63a <__ascii_mbtowc+0x16>

0800b648 <memmove>:
 800b648:	4288      	cmp	r0, r1
 800b64a:	b510      	push	{r4, lr}
 800b64c:	eb01 0402 	add.w	r4, r1, r2
 800b650:	d902      	bls.n	800b658 <memmove+0x10>
 800b652:	4284      	cmp	r4, r0
 800b654:	4623      	mov	r3, r4
 800b656:	d807      	bhi.n	800b668 <memmove+0x20>
 800b658:	1e43      	subs	r3, r0, #1
 800b65a:	42a1      	cmp	r1, r4
 800b65c:	d008      	beq.n	800b670 <memmove+0x28>
 800b65e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b662:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b666:	e7f8      	b.n	800b65a <memmove+0x12>
 800b668:	4402      	add	r2, r0
 800b66a:	4601      	mov	r1, r0
 800b66c:	428a      	cmp	r2, r1
 800b66e:	d100      	bne.n	800b672 <memmove+0x2a>
 800b670:	bd10      	pop	{r4, pc}
 800b672:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b676:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b67a:	e7f7      	b.n	800b66c <memmove+0x24>

0800b67c <__malloc_lock>:
 800b67c:	4801      	ldr	r0, [pc, #4]	; (800b684 <__malloc_lock+0x8>)
 800b67e:	f000 bc1f 	b.w	800bec0 <__retarget_lock_acquire_recursive>
 800b682:	bf00      	nop
 800b684:	2000379c 	.word	0x2000379c

0800b688 <__malloc_unlock>:
 800b688:	4801      	ldr	r0, [pc, #4]	; (800b690 <__malloc_unlock+0x8>)
 800b68a:	f000 bc1a 	b.w	800bec2 <__retarget_lock_release_recursive>
 800b68e:	bf00      	nop
 800b690:	2000379c 	.word	0x2000379c

0800b694 <_realloc_r>:
 800b694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b698:	4680      	mov	r8, r0
 800b69a:	4614      	mov	r4, r2
 800b69c:	460e      	mov	r6, r1
 800b69e:	b921      	cbnz	r1, 800b6aa <_realloc_r+0x16>
 800b6a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b6a4:	4611      	mov	r1, r2
 800b6a6:	f7ff bdad 	b.w	800b204 <_malloc_r>
 800b6aa:	b92a      	cbnz	r2, 800b6b8 <_realloc_r+0x24>
 800b6ac:	f7ff fd3e 	bl	800b12c <_free_r>
 800b6b0:	4625      	mov	r5, r4
 800b6b2:	4628      	mov	r0, r5
 800b6b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6b8:	f000 fc6a 	bl	800bf90 <_malloc_usable_size_r>
 800b6bc:	4284      	cmp	r4, r0
 800b6be:	4607      	mov	r7, r0
 800b6c0:	d802      	bhi.n	800b6c8 <_realloc_r+0x34>
 800b6c2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b6c6:	d812      	bhi.n	800b6ee <_realloc_r+0x5a>
 800b6c8:	4621      	mov	r1, r4
 800b6ca:	4640      	mov	r0, r8
 800b6cc:	f7ff fd9a 	bl	800b204 <_malloc_r>
 800b6d0:	4605      	mov	r5, r0
 800b6d2:	2800      	cmp	r0, #0
 800b6d4:	d0ed      	beq.n	800b6b2 <_realloc_r+0x1e>
 800b6d6:	42bc      	cmp	r4, r7
 800b6d8:	4622      	mov	r2, r4
 800b6da:	4631      	mov	r1, r6
 800b6dc:	bf28      	it	cs
 800b6de:	463a      	movcs	r2, r7
 800b6e0:	f7ff f97c 	bl	800a9dc <memcpy>
 800b6e4:	4631      	mov	r1, r6
 800b6e6:	4640      	mov	r0, r8
 800b6e8:	f7ff fd20 	bl	800b12c <_free_r>
 800b6ec:	e7e1      	b.n	800b6b2 <_realloc_r+0x1e>
 800b6ee:	4635      	mov	r5, r6
 800b6f0:	e7df      	b.n	800b6b2 <_realloc_r+0x1e>

0800b6f2 <__sfputc_r>:
 800b6f2:	6893      	ldr	r3, [r2, #8]
 800b6f4:	3b01      	subs	r3, #1
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	b410      	push	{r4}
 800b6fa:	6093      	str	r3, [r2, #8]
 800b6fc:	da08      	bge.n	800b710 <__sfputc_r+0x1e>
 800b6fe:	6994      	ldr	r4, [r2, #24]
 800b700:	42a3      	cmp	r3, r4
 800b702:	db01      	blt.n	800b708 <__sfputc_r+0x16>
 800b704:	290a      	cmp	r1, #10
 800b706:	d103      	bne.n	800b710 <__sfputc_r+0x1e>
 800b708:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b70c:	f000 b94a 	b.w	800b9a4 <__swbuf_r>
 800b710:	6813      	ldr	r3, [r2, #0]
 800b712:	1c58      	adds	r0, r3, #1
 800b714:	6010      	str	r0, [r2, #0]
 800b716:	7019      	strb	r1, [r3, #0]
 800b718:	4608      	mov	r0, r1
 800b71a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b71e:	4770      	bx	lr

0800b720 <__sfputs_r>:
 800b720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b722:	4606      	mov	r6, r0
 800b724:	460f      	mov	r7, r1
 800b726:	4614      	mov	r4, r2
 800b728:	18d5      	adds	r5, r2, r3
 800b72a:	42ac      	cmp	r4, r5
 800b72c:	d101      	bne.n	800b732 <__sfputs_r+0x12>
 800b72e:	2000      	movs	r0, #0
 800b730:	e007      	b.n	800b742 <__sfputs_r+0x22>
 800b732:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b736:	463a      	mov	r2, r7
 800b738:	4630      	mov	r0, r6
 800b73a:	f7ff ffda 	bl	800b6f2 <__sfputc_r>
 800b73e:	1c43      	adds	r3, r0, #1
 800b740:	d1f3      	bne.n	800b72a <__sfputs_r+0xa>
 800b742:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b744 <_vfiprintf_r>:
 800b744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b748:	460d      	mov	r5, r1
 800b74a:	b09d      	sub	sp, #116	; 0x74
 800b74c:	4614      	mov	r4, r2
 800b74e:	4698      	mov	r8, r3
 800b750:	4606      	mov	r6, r0
 800b752:	b118      	cbz	r0, 800b75c <_vfiprintf_r+0x18>
 800b754:	6983      	ldr	r3, [r0, #24]
 800b756:	b90b      	cbnz	r3, 800b75c <_vfiprintf_r+0x18>
 800b758:	f000 fb14 	bl	800bd84 <__sinit>
 800b75c:	4b89      	ldr	r3, [pc, #548]	; (800b984 <_vfiprintf_r+0x240>)
 800b75e:	429d      	cmp	r5, r3
 800b760:	d11b      	bne.n	800b79a <_vfiprintf_r+0x56>
 800b762:	6875      	ldr	r5, [r6, #4]
 800b764:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b766:	07d9      	lsls	r1, r3, #31
 800b768:	d405      	bmi.n	800b776 <_vfiprintf_r+0x32>
 800b76a:	89ab      	ldrh	r3, [r5, #12]
 800b76c:	059a      	lsls	r2, r3, #22
 800b76e:	d402      	bmi.n	800b776 <_vfiprintf_r+0x32>
 800b770:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b772:	f000 fba5 	bl	800bec0 <__retarget_lock_acquire_recursive>
 800b776:	89ab      	ldrh	r3, [r5, #12]
 800b778:	071b      	lsls	r3, r3, #28
 800b77a:	d501      	bpl.n	800b780 <_vfiprintf_r+0x3c>
 800b77c:	692b      	ldr	r3, [r5, #16]
 800b77e:	b9eb      	cbnz	r3, 800b7bc <_vfiprintf_r+0x78>
 800b780:	4629      	mov	r1, r5
 800b782:	4630      	mov	r0, r6
 800b784:	f000 f96e 	bl	800ba64 <__swsetup_r>
 800b788:	b1c0      	cbz	r0, 800b7bc <_vfiprintf_r+0x78>
 800b78a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b78c:	07dc      	lsls	r4, r3, #31
 800b78e:	d50e      	bpl.n	800b7ae <_vfiprintf_r+0x6a>
 800b790:	f04f 30ff 	mov.w	r0, #4294967295
 800b794:	b01d      	add	sp, #116	; 0x74
 800b796:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b79a:	4b7b      	ldr	r3, [pc, #492]	; (800b988 <_vfiprintf_r+0x244>)
 800b79c:	429d      	cmp	r5, r3
 800b79e:	d101      	bne.n	800b7a4 <_vfiprintf_r+0x60>
 800b7a0:	68b5      	ldr	r5, [r6, #8]
 800b7a2:	e7df      	b.n	800b764 <_vfiprintf_r+0x20>
 800b7a4:	4b79      	ldr	r3, [pc, #484]	; (800b98c <_vfiprintf_r+0x248>)
 800b7a6:	429d      	cmp	r5, r3
 800b7a8:	bf08      	it	eq
 800b7aa:	68f5      	ldreq	r5, [r6, #12]
 800b7ac:	e7da      	b.n	800b764 <_vfiprintf_r+0x20>
 800b7ae:	89ab      	ldrh	r3, [r5, #12]
 800b7b0:	0598      	lsls	r0, r3, #22
 800b7b2:	d4ed      	bmi.n	800b790 <_vfiprintf_r+0x4c>
 800b7b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b7b6:	f000 fb84 	bl	800bec2 <__retarget_lock_release_recursive>
 800b7ba:	e7e9      	b.n	800b790 <_vfiprintf_r+0x4c>
 800b7bc:	2300      	movs	r3, #0
 800b7be:	9309      	str	r3, [sp, #36]	; 0x24
 800b7c0:	2320      	movs	r3, #32
 800b7c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b7c6:	f8cd 800c 	str.w	r8, [sp, #12]
 800b7ca:	2330      	movs	r3, #48	; 0x30
 800b7cc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b990 <_vfiprintf_r+0x24c>
 800b7d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b7d4:	f04f 0901 	mov.w	r9, #1
 800b7d8:	4623      	mov	r3, r4
 800b7da:	469a      	mov	sl, r3
 800b7dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b7e0:	b10a      	cbz	r2, 800b7e6 <_vfiprintf_r+0xa2>
 800b7e2:	2a25      	cmp	r2, #37	; 0x25
 800b7e4:	d1f9      	bne.n	800b7da <_vfiprintf_r+0x96>
 800b7e6:	ebba 0b04 	subs.w	fp, sl, r4
 800b7ea:	d00b      	beq.n	800b804 <_vfiprintf_r+0xc0>
 800b7ec:	465b      	mov	r3, fp
 800b7ee:	4622      	mov	r2, r4
 800b7f0:	4629      	mov	r1, r5
 800b7f2:	4630      	mov	r0, r6
 800b7f4:	f7ff ff94 	bl	800b720 <__sfputs_r>
 800b7f8:	3001      	adds	r0, #1
 800b7fa:	f000 80aa 	beq.w	800b952 <_vfiprintf_r+0x20e>
 800b7fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b800:	445a      	add	r2, fp
 800b802:	9209      	str	r2, [sp, #36]	; 0x24
 800b804:	f89a 3000 	ldrb.w	r3, [sl]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	f000 80a2 	beq.w	800b952 <_vfiprintf_r+0x20e>
 800b80e:	2300      	movs	r3, #0
 800b810:	f04f 32ff 	mov.w	r2, #4294967295
 800b814:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b818:	f10a 0a01 	add.w	sl, sl, #1
 800b81c:	9304      	str	r3, [sp, #16]
 800b81e:	9307      	str	r3, [sp, #28]
 800b820:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b824:	931a      	str	r3, [sp, #104]	; 0x68
 800b826:	4654      	mov	r4, sl
 800b828:	2205      	movs	r2, #5
 800b82a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b82e:	4858      	ldr	r0, [pc, #352]	; (800b990 <_vfiprintf_r+0x24c>)
 800b830:	f7f4 fcde 	bl	80001f0 <memchr>
 800b834:	9a04      	ldr	r2, [sp, #16]
 800b836:	b9d8      	cbnz	r0, 800b870 <_vfiprintf_r+0x12c>
 800b838:	06d1      	lsls	r1, r2, #27
 800b83a:	bf44      	itt	mi
 800b83c:	2320      	movmi	r3, #32
 800b83e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b842:	0713      	lsls	r3, r2, #28
 800b844:	bf44      	itt	mi
 800b846:	232b      	movmi	r3, #43	; 0x2b
 800b848:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b84c:	f89a 3000 	ldrb.w	r3, [sl]
 800b850:	2b2a      	cmp	r3, #42	; 0x2a
 800b852:	d015      	beq.n	800b880 <_vfiprintf_r+0x13c>
 800b854:	9a07      	ldr	r2, [sp, #28]
 800b856:	4654      	mov	r4, sl
 800b858:	2000      	movs	r0, #0
 800b85a:	f04f 0c0a 	mov.w	ip, #10
 800b85e:	4621      	mov	r1, r4
 800b860:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b864:	3b30      	subs	r3, #48	; 0x30
 800b866:	2b09      	cmp	r3, #9
 800b868:	d94e      	bls.n	800b908 <_vfiprintf_r+0x1c4>
 800b86a:	b1b0      	cbz	r0, 800b89a <_vfiprintf_r+0x156>
 800b86c:	9207      	str	r2, [sp, #28]
 800b86e:	e014      	b.n	800b89a <_vfiprintf_r+0x156>
 800b870:	eba0 0308 	sub.w	r3, r0, r8
 800b874:	fa09 f303 	lsl.w	r3, r9, r3
 800b878:	4313      	orrs	r3, r2
 800b87a:	9304      	str	r3, [sp, #16]
 800b87c:	46a2      	mov	sl, r4
 800b87e:	e7d2      	b.n	800b826 <_vfiprintf_r+0xe2>
 800b880:	9b03      	ldr	r3, [sp, #12]
 800b882:	1d19      	adds	r1, r3, #4
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	9103      	str	r1, [sp, #12]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	bfbb      	ittet	lt
 800b88c:	425b      	neglt	r3, r3
 800b88e:	f042 0202 	orrlt.w	r2, r2, #2
 800b892:	9307      	strge	r3, [sp, #28]
 800b894:	9307      	strlt	r3, [sp, #28]
 800b896:	bfb8      	it	lt
 800b898:	9204      	strlt	r2, [sp, #16]
 800b89a:	7823      	ldrb	r3, [r4, #0]
 800b89c:	2b2e      	cmp	r3, #46	; 0x2e
 800b89e:	d10c      	bne.n	800b8ba <_vfiprintf_r+0x176>
 800b8a0:	7863      	ldrb	r3, [r4, #1]
 800b8a2:	2b2a      	cmp	r3, #42	; 0x2a
 800b8a4:	d135      	bne.n	800b912 <_vfiprintf_r+0x1ce>
 800b8a6:	9b03      	ldr	r3, [sp, #12]
 800b8a8:	1d1a      	adds	r2, r3, #4
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	9203      	str	r2, [sp, #12]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	bfb8      	it	lt
 800b8b2:	f04f 33ff 	movlt.w	r3, #4294967295
 800b8b6:	3402      	adds	r4, #2
 800b8b8:	9305      	str	r3, [sp, #20]
 800b8ba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b9a0 <_vfiprintf_r+0x25c>
 800b8be:	7821      	ldrb	r1, [r4, #0]
 800b8c0:	2203      	movs	r2, #3
 800b8c2:	4650      	mov	r0, sl
 800b8c4:	f7f4 fc94 	bl	80001f0 <memchr>
 800b8c8:	b140      	cbz	r0, 800b8dc <_vfiprintf_r+0x198>
 800b8ca:	2340      	movs	r3, #64	; 0x40
 800b8cc:	eba0 000a 	sub.w	r0, r0, sl
 800b8d0:	fa03 f000 	lsl.w	r0, r3, r0
 800b8d4:	9b04      	ldr	r3, [sp, #16]
 800b8d6:	4303      	orrs	r3, r0
 800b8d8:	3401      	adds	r4, #1
 800b8da:	9304      	str	r3, [sp, #16]
 800b8dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8e0:	482c      	ldr	r0, [pc, #176]	; (800b994 <_vfiprintf_r+0x250>)
 800b8e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b8e6:	2206      	movs	r2, #6
 800b8e8:	f7f4 fc82 	bl	80001f0 <memchr>
 800b8ec:	2800      	cmp	r0, #0
 800b8ee:	d03f      	beq.n	800b970 <_vfiprintf_r+0x22c>
 800b8f0:	4b29      	ldr	r3, [pc, #164]	; (800b998 <_vfiprintf_r+0x254>)
 800b8f2:	bb1b      	cbnz	r3, 800b93c <_vfiprintf_r+0x1f8>
 800b8f4:	9b03      	ldr	r3, [sp, #12]
 800b8f6:	3307      	adds	r3, #7
 800b8f8:	f023 0307 	bic.w	r3, r3, #7
 800b8fc:	3308      	adds	r3, #8
 800b8fe:	9303      	str	r3, [sp, #12]
 800b900:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b902:	443b      	add	r3, r7
 800b904:	9309      	str	r3, [sp, #36]	; 0x24
 800b906:	e767      	b.n	800b7d8 <_vfiprintf_r+0x94>
 800b908:	fb0c 3202 	mla	r2, ip, r2, r3
 800b90c:	460c      	mov	r4, r1
 800b90e:	2001      	movs	r0, #1
 800b910:	e7a5      	b.n	800b85e <_vfiprintf_r+0x11a>
 800b912:	2300      	movs	r3, #0
 800b914:	3401      	adds	r4, #1
 800b916:	9305      	str	r3, [sp, #20]
 800b918:	4619      	mov	r1, r3
 800b91a:	f04f 0c0a 	mov.w	ip, #10
 800b91e:	4620      	mov	r0, r4
 800b920:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b924:	3a30      	subs	r2, #48	; 0x30
 800b926:	2a09      	cmp	r2, #9
 800b928:	d903      	bls.n	800b932 <_vfiprintf_r+0x1ee>
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d0c5      	beq.n	800b8ba <_vfiprintf_r+0x176>
 800b92e:	9105      	str	r1, [sp, #20]
 800b930:	e7c3      	b.n	800b8ba <_vfiprintf_r+0x176>
 800b932:	fb0c 2101 	mla	r1, ip, r1, r2
 800b936:	4604      	mov	r4, r0
 800b938:	2301      	movs	r3, #1
 800b93a:	e7f0      	b.n	800b91e <_vfiprintf_r+0x1da>
 800b93c:	ab03      	add	r3, sp, #12
 800b93e:	9300      	str	r3, [sp, #0]
 800b940:	462a      	mov	r2, r5
 800b942:	4b16      	ldr	r3, [pc, #88]	; (800b99c <_vfiprintf_r+0x258>)
 800b944:	a904      	add	r1, sp, #16
 800b946:	4630      	mov	r0, r6
 800b948:	f7fd fdd8 	bl	80094fc <_printf_float>
 800b94c:	4607      	mov	r7, r0
 800b94e:	1c78      	adds	r0, r7, #1
 800b950:	d1d6      	bne.n	800b900 <_vfiprintf_r+0x1bc>
 800b952:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b954:	07d9      	lsls	r1, r3, #31
 800b956:	d405      	bmi.n	800b964 <_vfiprintf_r+0x220>
 800b958:	89ab      	ldrh	r3, [r5, #12]
 800b95a:	059a      	lsls	r2, r3, #22
 800b95c:	d402      	bmi.n	800b964 <_vfiprintf_r+0x220>
 800b95e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b960:	f000 faaf 	bl	800bec2 <__retarget_lock_release_recursive>
 800b964:	89ab      	ldrh	r3, [r5, #12]
 800b966:	065b      	lsls	r3, r3, #25
 800b968:	f53f af12 	bmi.w	800b790 <_vfiprintf_r+0x4c>
 800b96c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b96e:	e711      	b.n	800b794 <_vfiprintf_r+0x50>
 800b970:	ab03      	add	r3, sp, #12
 800b972:	9300      	str	r3, [sp, #0]
 800b974:	462a      	mov	r2, r5
 800b976:	4b09      	ldr	r3, [pc, #36]	; (800b99c <_vfiprintf_r+0x258>)
 800b978:	a904      	add	r1, sp, #16
 800b97a:	4630      	mov	r0, r6
 800b97c:	f7fe f862 	bl	8009a44 <_printf_i>
 800b980:	e7e4      	b.n	800b94c <_vfiprintf_r+0x208>
 800b982:	bf00      	nop
 800b984:	0801563c 	.word	0x0801563c
 800b988:	0801565c 	.word	0x0801565c
 800b98c:	0801561c 	.word	0x0801561c
 800b990:	080154c4 	.word	0x080154c4
 800b994:	080154ce 	.word	0x080154ce
 800b998:	080094fd 	.word	0x080094fd
 800b99c:	0800b721 	.word	0x0800b721
 800b9a0:	080154ca 	.word	0x080154ca

0800b9a4 <__swbuf_r>:
 800b9a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9a6:	460e      	mov	r6, r1
 800b9a8:	4614      	mov	r4, r2
 800b9aa:	4605      	mov	r5, r0
 800b9ac:	b118      	cbz	r0, 800b9b6 <__swbuf_r+0x12>
 800b9ae:	6983      	ldr	r3, [r0, #24]
 800b9b0:	b90b      	cbnz	r3, 800b9b6 <__swbuf_r+0x12>
 800b9b2:	f000 f9e7 	bl	800bd84 <__sinit>
 800b9b6:	4b21      	ldr	r3, [pc, #132]	; (800ba3c <__swbuf_r+0x98>)
 800b9b8:	429c      	cmp	r4, r3
 800b9ba:	d12b      	bne.n	800ba14 <__swbuf_r+0x70>
 800b9bc:	686c      	ldr	r4, [r5, #4]
 800b9be:	69a3      	ldr	r3, [r4, #24]
 800b9c0:	60a3      	str	r3, [r4, #8]
 800b9c2:	89a3      	ldrh	r3, [r4, #12]
 800b9c4:	071a      	lsls	r2, r3, #28
 800b9c6:	d52f      	bpl.n	800ba28 <__swbuf_r+0x84>
 800b9c8:	6923      	ldr	r3, [r4, #16]
 800b9ca:	b36b      	cbz	r3, 800ba28 <__swbuf_r+0x84>
 800b9cc:	6923      	ldr	r3, [r4, #16]
 800b9ce:	6820      	ldr	r0, [r4, #0]
 800b9d0:	1ac0      	subs	r0, r0, r3
 800b9d2:	6963      	ldr	r3, [r4, #20]
 800b9d4:	b2f6      	uxtb	r6, r6
 800b9d6:	4283      	cmp	r3, r0
 800b9d8:	4637      	mov	r7, r6
 800b9da:	dc04      	bgt.n	800b9e6 <__swbuf_r+0x42>
 800b9dc:	4621      	mov	r1, r4
 800b9de:	4628      	mov	r0, r5
 800b9e0:	f000 f93c 	bl	800bc5c <_fflush_r>
 800b9e4:	bb30      	cbnz	r0, 800ba34 <__swbuf_r+0x90>
 800b9e6:	68a3      	ldr	r3, [r4, #8]
 800b9e8:	3b01      	subs	r3, #1
 800b9ea:	60a3      	str	r3, [r4, #8]
 800b9ec:	6823      	ldr	r3, [r4, #0]
 800b9ee:	1c5a      	adds	r2, r3, #1
 800b9f0:	6022      	str	r2, [r4, #0]
 800b9f2:	701e      	strb	r6, [r3, #0]
 800b9f4:	6963      	ldr	r3, [r4, #20]
 800b9f6:	3001      	adds	r0, #1
 800b9f8:	4283      	cmp	r3, r0
 800b9fa:	d004      	beq.n	800ba06 <__swbuf_r+0x62>
 800b9fc:	89a3      	ldrh	r3, [r4, #12]
 800b9fe:	07db      	lsls	r3, r3, #31
 800ba00:	d506      	bpl.n	800ba10 <__swbuf_r+0x6c>
 800ba02:	2e0a      	cmp	r6, #10
 800ba04:	d104      	bne.n	800ba10 <__swbuf_r+0x6c>
 800ba06:	4621      	mov	r1, r4
 800ba08:	4628      	mov	r0, r5
 800ba0a:	f000 f927 	bl	800bc5c <_fflush_r>
 800ba0e:	b988      	cbnz	r0, 800ba34 <__swbuf_r+0x90>
 800ba10:	4638      	mov	r0, r7
 800ba12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba14:	4b0a      	ldr	r3, [pc, #40]	; (800ba40 <__swbuf_r+0x9c>)
 800ba16:	429c      	cmp	r4, r3
 800ba18:	d101      	bne.n	800ba1e <__swbuf_r+0x7a>
 800ba1a:	68ac      	ldr	r4, [r5, #8]
 800ba1c:	e7cf      	b.n	800b9be <__swbuf_r+0x1a>
 800ba1e:	4b09      	ldr	r3, [pc, #36]	; (800ba44 <__swbuf_r+0xa0>)
 800ba20:	429c      	cmp	r4, r3
 800ba22:	bf08      	it	eq
 800ba24:	68ec      	ldreq	r4, [r5, #12]
 800ba26:	e7ca      	b.n	800b9be <__swbuf_r+0x1a>
 800ba28:	4621      	mov	r1, r4
 800ba2a:	4628      	mov	r0, r5
 800ba2c:	f000 f81a 	bl	800ba64 <__swsetup_r>
 800ba30:	2800      	cmp	r0, #0
 800ba32:	d0cb      	beq.n	800b9cc <__swbuf_r+0x28>
 800ba34:	f04f 37ff 	mov.w	r7, #4294967295
 800ba38:	e7ea      	b.n	800ba10 <__swbuf_r+0x6c>
 800ba3a:	bf00      	nop
 800ba3c:	0801563c 	.word	0x0801563c
 800ba40:	0801565c 	.word	0x0801565c
 800ba44:	0801561c 	.word	0x0801561c

0800ba48 <__ascii_wctomb>:
 800ba48:	b149      	cbz	r1, 800ba5e <__ascii_wctomb+0x16>
 800ba4a:	2aff      	cmp	r2, #255	; 0xff
 800ba4c:	bf85      	ittet	hi
 800ba4e:	238a      	movhi	r3, #138	; 0x8a
 800ba50:	6003      	strhi	r3, [r0, #0]
 800ba52:	700a      	strbls	r2, [r1, #0]
 800ba54:	f04f 30ff 	movhi.w	r0, #4294967295
 800ba58:	bf98      	it	ls
 800ba5a:	2001      	movls	r0, #1
 800ba5c:	4770      	bx	lr
 800ba5e:	4608      	mov	r0, r1
 800ba60:	4770      	bx	lr
	...

0800ba64 <__swsetup_r>:
 800ba64:	4b32      	ldr	r3, [pc, #200]	; (800bb30 <__swsetup_r+0xcc>)
 800ba66:	b570      	push	{r4, r5, r6, lr}
 800ba68:	681d      	ldr	r5, [r3, #0]
 800ba6a:	4606      	mov	r6, r0
 800ba6c:	460c      	mov	r4, r1
 800ba6e:	b125      	cbz	r5, 800ba7a <__swsetup_r+0x16>
 800ba70:	69ab      	ldr	r3, [r5, #24]
 800ba72:	b913      	cbnz	r3, 800ba7a <__swsetup_r+0x16>
 800ba74:	4628      	mov	r0, r5
 800ba76:	f000 f985 	bl	800bd84 <__sinit>
 800ba7a:	4b2e      	ldr	r3, [pc, #184]	; (800bb34 <__swsetup_r+0xd0>)
 800ba7c:	429c      	cmp	r4, r3
 800ba7e:	d10f      	bne.n	800baa0 <__swsetup_r+0x3c>
 800ba80:	686c      	ldr	r4, [r5, #4]
 800ba82:	89a3      	ldrh	r3, [r4, #12]
 800ba84:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ba88:	0719      	lsls	r1, r3, #28
 800ba8a:	d42c      	bmi.n	800bae6 <__swsetup_r+0x82>
 800ba8c:	06dd      	lsls	r5, r3, #27
 800ba8e:	d411      	bmi.n	800bab4 <__swsetup_r+0x50>
 800ba90:	2309      	movs	r3, #9
 800ba92:	6033      	str	r3, [r6, #0]
 800ba94:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ba98:	81a3      	strh	r3, [r4, #12]
 800ba9a:	f04f 30ff 	mov.w	r0, #4294967295
 800ba9e:	e03e      	b.n	800bb1e <__swsetup_r+0xba>
 800baa0:	4b25      	ldr	r3, [pc, #148]	; (800bb38 <__swsetup_r+0xd4>)
 800baa2:	429c      	cmp	r4, r3
 800baa4:	d101      	bne.n	800baaa <__swsetup_r+0x46>
 800baa6:	68ac      	ldr	r4, [r5, #8]
 800baa8:	e7eb      	b.n	800ba82 <__swsetup_r+0x1e>
 800baaa:	4b24      	ldr	r3, [pc, #144]	; (800bb3c <__swsetup_r+0xd8>)
 800baac:	429c      	cmp	r4, r3
 800baae:	bf08      	it	eq
 800bab0:	68ec      	ldreq	r4, [r5, #12]
 800bab2:	e7e6      	b.n	800ba82 <__swsetup_r+0x1e>
 800bab4:	0758      	lsls	r0, r3, #29
 800bab6:	d512      	bpl.n	800bade <__swsetup_r+0x7a>
 800bab8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800baba:	b141      	cbz	r1, 800bace <__swsetup_r+0x6a>
 800babc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bac0:	4299      	cmp	r1, r3
 800bac2:	d002      	beq.n	800baca <__swsetup_r+0x66>
 800bac4:	4630      	mov	r0, r6
 800bac6:	f7ff fb31 	bl	800b12c <_free_r>
 800baca:	2300      	movs	r3, #0
 800bacc:	6363      	str	r3, [r4, #52]	; 0x34
 800bace:	89a3      	ldrh	r3, [r4, #12]
 800bad0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bad4:	81a3      	strh	r3, [r4, #12]
 800bad6:	2300      	movs	r3, #0
 800bad8:	6063      	str	r3, [r4, #4]
 800bada:	6923      	ldr	r3, [r4, #16]
 800badc:	6023      	str	r3, [r4, #0]
 800bade:	89a3      	ldrh	r3, [r4, #12]
 800bae0:	f043 0308 	orr.w	r3, r3, #8
 800bae4:	81a3      	strh	r3, [r4, #12]
 800bae6:	6923      	ldr	r3, [r4, #16]
 800bae8:	b94b      	cbnz	r3, 800bafe <__swsetup_r+0x9a>
 800baea:	89a3      	ldrh	r3, [r4, #12]
 800baec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800baf0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800baf4:	d003      	beq.n	800bafe <__swsetup_r+0x9a>
 800baf6:	4621      	mov	r1, r4
 800baf8:	4630      	mov	r0, r6
 800bafa:	f000 fa09 	bl	800bf10 <__smakebuf_r>
 800bafe:	89a0      	ldrh	r0, [r4, #12]
 800bb00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bb04:	f010 0301 	ands.w	r3, r0, #1
 800bb08:	d00a      	beq.n	800bb20 <__swsetup_r+0xbc>
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	60a3      	str	r3, [r4, #8]
 800bb0e:	6963      	ldr	r3, [r4, #20]
 800bb10:	425b      	negs	r3, r3
 800bb12:	61a3      	str	r3, [r4, #24]
 800bb14:	6923      	ldr	r3, [r4, #16]
 800bb16:	b943      	cbnz	r3, 800bb2a <__swsetup_r+0xc6>
 800bb18:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bb1c:	d1ba      	bne.n	800ba94 <__swsetup_r+0x30>
 800bb1e:	bd70      	pop	{r4, r5, r6, pc}
 800bb20:	0781      	lsls	r1, r0, #30
 800bb22:	bf58      	it	pl
 800bb24:	6963      	ldrpl	r3, [r4, #20]
 800bb26:	60a3      	str	r3, [r4, #8]
 800bb28:	e7f4      	b.n	800bb14 <__swsetup_r+0xb0>
 800bb2a:	2000      	movs	r0, #0
 800bb2c:	e7f7      	b.n	800bb1e <__swsetup_r+0xba>
 800bb2e:	bf00      	nop
 800bb30:	20000024 	.word	0x20000024
 800bb34:	0801563c 	.word	0x0801563c
 800bb38:	0801565c 	.word	0x0801565c
 800bb3c:	0801561c 	.word	0x0801561c

0800bb40 <abort>:
 800bb40:	b508      	push	{r3, lr}
 800bb42:	2006      	movs	r0, #6
 800bb44:	f000 fa54 	bl	800bff0 <raise>
 800bb48:	2001      	movs	r0, #1
 800bb4a:	f7f6 fcb7 	bl	80024bc <_exit>
	...

0800bb50 <__sflush_r>:
 800bb50:	898a      	ldrh	r2, [r1, #12]
 800bb52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb56:	4605      	mov	r5, r0
 800bb58:	0710      	lsls	r0, r2, #28
 800bb5a:	460c      	mov	r4, r1
 800bb5c:	d458      	bmi.n	800bc10 <__sflush_r+0xc0>
 800bb5e:	684b      	ldr	r3, [r1, #4]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	dc05      	bgt.n	800bb70 <__sflush_r+0x20>
 800bb64:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	dc02      	bgt.n	800bb70 <__sflush_r+0x20>
 800bb6a:	2000      	movs	r0, #0
 800bb6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bb72:	2e00      	cmp	r6, #0
 800bb74:	d0f9      	beq.n	800bb6a <__sflush_r+0x1a>
 800bb76:	2300      	movs	r3, #0
 800bb78:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bb7c:	682f      	ldr	r7, [r5, #0]
 800bb7e:	602b      	str	r3, [r5, #0]
 800bb80:	d032      	beq.n	800bbe8 <__sflush_r+0x98>
 800bb82:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bb84:	89a3      	ldrh	r3, [r4, #12]
 800bb86:	075a      	lsls	r2, r3, #29
 800bb88:	d505      	bpl.n	800bb96 <__sflush_r+0x46>
 800bb8a:	6863      	ldr	r3, [r4, #4]
 800bb8c:	1ac0      	subs	r0, r0, r3
 800bb8e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bb90:	b10b      	cbz	r3, 800bb96 <__sflush_r+0x46>
 800bb92:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bb94:	1ac0      	subs	r0, r0, r3
 800bb96:	2300      	movs	r3, #0
 800bb98:	4602      	mov	r2, r0
 800bb9a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bb9c:	6a21      	ldr	r1, [r4, #32]
 800bb9e:	4628      	mov	r0, r5
 800bba0:	47b0      	blx	r6
 800bba2:	1c43      	adds	r3, r0, #1
 800bba4:	89a3      	ldrh	r3, [r4, #12]
 800bba6:	d106      	bne.n	800bbb6 <__sflush_r+0x66>
 800bba8:	6829      	ldr	r1, [r5, #0]
 800bbaa:	291d      	cmp	r1, #29
 800bbac:	d82c      	bhi.n	800bc08 <__sflush_r+0xb8>
 800bbae:	4a2a      	ldr	r2, [pc, #168]	; (800bc58 <__sflush_r+0x108>)
 800bbb0:	40ca      	lsrs	r2, r1
 800bbb2:	07d6      	lsls	r6, r2, #31
 800bbb4:	d528      	bpl.n	800bc08 <__sflush_r+0xb8>
 800bbb6:	2200      	movs	r2, #0
 800bbb8:	6062      	str	r2, [r4, #4]
 800bbba:	04d9      	lsls	r1, r3, #19
 800bbbc:	6922      	ldr	r2, [r4, #16]
 800bbbe:	6022      	str	r2, [r4, #0]
 800bbc0:	d504      	bpl.n	800bbcc <__sflush_r+0x7c>
 800bbc2:	1c42      	adds	r2, r0, #1
 800bbc4:	d101      	bne.n	800bbca <__sflush_r+0x7a>
 800bbc6:	682b      	ldr	r3, [r5, #0]
 800bbc8:	b903      	cbnz	r3, 800bbcc <__sflush_r+0x7c>
 800bbca:	6560      	str	r0, [r4, #84]	; 0x54
 800bbcc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bbce:	602f      	str	r7, [r5, #0]
 800bbd0:	2900      	cmp	r1, #0
 800bbd2:	d0ca      	beq.n	800bb6a <__sflush_r+0x1a>
 800bbd4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bbd8:	4299      	cmp	r1, r3
 800bbda:	d002      	beq.n	800bbe2 <__sflush_r+0x92>
 800bbdc:	4628      	mov	r0, r5
 800bbde:	f7ff faa5 	bl	800b12c <_free_r>
 800bbe2:	2000      	movs	r0, #0
 800bbe4:	6360      	str	r0, [r4, #52]	; 0x34
 800bbe6:	e7c1      	b.n	800bb6c <__sflush_r+0x1c>
 800bbe8:	6a21      	ldr	r1, [r4, #32]
 800bbea:	2301      	movs	r3, #1
 800bbec:	4628      	mov	r0, r5
 800bbee:	47b0      	blx	r6
 800bbf0:	1c41      	adds	r1, r0, #1
 800bbf2:	d1c7      	bne.n	800bb84 <__sflush_r+0x34>
 800bbf4:	682b      	ldr	r3, [r5, #0]
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d0c4      	beq.n	800bb84 <__sflush_r+0x34>
 800bbfa:	2b1d      	cmp	r3, #29
 800bbfc:	d001      	beq.n	800bc02 <__sflush_r+0xb2>
 800bbfe:	2b16      	cmp	r3, #22
 800bc00:	d101      	bne.n	800bc06 <__sflush_r+0xb6>
 800bc02:	602f      	str	r7, [r5, #0]
 800bc04:	e7b1      	b.n	800bb6a <__sflush_r+0x1a>
 800bc06:	89a3      	ldrh	r3, [r4, #12]
 800bc08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc0c:	81a3      	strh	r3, [r4, #12]
 800bc0e:	e7ad      	b.n	800bb6c <__sflush_r+0x1c>
 800bc10:	690f      	ldr	r7, [r1, #16]
 800bc12:	2f00      	cmp	r7, #0
 800bc14:	d0a9      	beq.n	800bb6a <__sflush_r+0x1a>
 800bc16:	0793      	lsls	r3, r2, #30
 800bc18:	680e      	ldr	r6, [r1, #0]
 800bc1a:	bf08      	it	eq
 800bc1c:	694b      	ldreq	r3, [r1, #20]
 800bc1e:	600f      	str	r7, [r1, #0]
 800bc20:	bf18      	it	ne
 800bc22:	2300      	movne	r3, #0
 800bc24:	eba6 0807 	sub.w	r8, r6, r7
 800bc28:	608b      	str	r3, [r1, #8]
 800bc2a:	f1b8 0f00 	cmp.w	r8, #0
 800bc2e:	dd9c      	ble.n	800bb6a <__sflush_r+0x1a>
 800bc30:	6a21      	ldr	r1, [r4, #32]
 800bc32:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bc34:	4643      	mov	r3, r8
 800bc36:	463a      	mov	r2, r7
 800bc38:	4628      	mov	r0, r5
 800bc3a:	47b0      	blx	r6
 800bc3c:	2800      	cmp	r0, #0
 800bc3e:	dc06      	bgt.n	800bc4e <__sflush_r+0xfe>
 800bc40:	89a3      	ldrh	r3, [r4, #12]
 800bc42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc46:	81a3      	strh	r3, [r4, #12]
 800bc48:	f04f 30ff 	mov.w	r0, #4294967295
 800bc4c:	e78e      	b.n	800bb6c <__sflush_r+0x1c>
 800bc4e:	4407      	add	r7, r0
 800bc50:	eba8 0800 	sub.w	r8, r8, r0
 800bc54:	e7e9      	b.n	800bc2a <__sflush_r+0xda>
 800bc56:	bf00      	nop
 800bc58:	20400001 	.word	0x20400001

0800bc5c <_fflush_r>:
 800bc5c:	b538      	push	{r3, r4, r5, lr}
 800bc5e:	690b      	ldr	r3, [r1, #16]
 800bc60:	4605      	mov	r5, r0
 800bc62:	460c      	mov	r4, r1
 800bc64:	b913      	cbnz	r3, 800bc6c <_fflush_r+0x10>
 800bc66:	2500      	movs	r5, #0
 800bc68:	4628      	mov	r0, r5
 800bc6a:	bd38      	pop	{r3, r4, r5, pc}
 800bc6c:	b118      	cbz	r0, 800bc76 <_fflush_r+0x1a>
 800bc6e:	6983      	ldr	r3, [r0, #24]
 800bc70:	b90b      	cbnz	r3, 800bc76 <_fflush_r+0x1a>
 800bc72:	f000 f887 	bl	800bd84 <__sinit>
 800bc76:	4b14      	ldr	r3, [pc, #80]	; (800bcc8 <_fflush_r+0x6c>)
 800bc78:	429c      	cmp	r4, r3
 800bc7a:	d11b      	bne.n	800bcb4 <_fflush_r+0x58>
 800bc7c:	686c      	ldr	r4, [r5, #4]
 800bc7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d0ef      	beq.n	800bc66 <_fflush_r+0xa>
 800bc86:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bc88:	07d0      	lsls	r0, r2, #31
 800bc8a:	d404      	bmi.n	800bc96 <_fflush_r+0x3a>
 800bc8c:	0599      	lsls	r1, r3, #22
 800bc8e:	d402      	bmi.n	800bc96 <_fflush_r+0x3a>
 800bc90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bc92:	f000 f915 	bl	800bec0 <__retarget_lock_acquire_recursive>
 800bc96:	4628      	mov	r0, r5
 800bc98:	4621      	mov	r1, r4
 800bc9a:	f7ff ff59 	bl	800bb50 <__sflush_r>
 800bc9e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bca0:	07da      	lsls	r2, r3, #31
 800bca2:	4605      	mov	r5, r0
 800bca4:	d4e0      	bmi.n	800bc68 <_fflush_r+0xc>
 800bca6:	89a3      	ldrh	r3, [r4, #12]
 800bca8:	059b      	lsls	r3, r3, #22
 800bcaa:	d4dd      	bmi.n	800bc68 <_fflush_r+0xc>
 800bcac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bcae:	f000 f908 	bl	800bec2 <__retarget_lock_release_recursive>
 800bcb2:	e7d9      	b.n	800bc68 <_fflush_r+0xc>
 800bcb4:	4b05      	ldr	r3, [pc, #20]	; (800bccc <_fflush_r+0x70>)
 800bcb6:	429c      	cmp	r4, r3
 800bcb8:	d101      	bne.n	800bcbe <_fflush_r+0x62>
 800bcba:	68ac      	ldr	r4, [r5, #8]
 800bcbc:	e7df      	b.n	800bc7e <_fflush_r+0x22>
 800bcbe:	4b04      	ldr	r3, [pc, #16]	; (800bcd0 <_fflush_r+0x74>)
 800bcc0:	429c      	cmp	r4, r3
 800bcc2:	bf08      	it	eq
 800bcc4:	68ec      	ldreq	r4, [r5, #12]
 800bcc6:	e7da      	b.n	800bc7e <_fflush_r+0x22>
 800bcc8:	0801563c 	.word	0x0801563c
 800bccc:	0801565c 	.word	0x0801565c
 800bcd0:	0801561c 	.word	0x0801561c

0800bcd4 <std>:
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	b510      	push	{r4, lr}
 800bcd8:	4604      	mov	r4, r0
 800bcda:	e9c0 3300 	strd	r3, r3, [r0]
 800bcde:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bce2:	6083      	str	r3, [r0, #8]
 800bce4:	8181      	strh	r1, [r0, #12]
 800bce6:	6643      	str	r3, [r0, #100]	; 0x64
 800bce8:	81c2      	strh	r2, [r0, #14]
 800bcea:	6183      	str	r3, [r0, #24]
 800bcec:	4619      	mov	r1, r3
 800bcee:	2208      	movs	r2, #8
 800bcf0:	305c      	adds	r0, #92	; 0x5c
 800bcf2:	f7fd fb5b 	bl	80093ac <memset>
 800bcf6:	4b05      	ldr	r3, [pc, #20]	; (800bd0c <std+0x38>)
 800bcf8:	6263      	str	r3, [r4, #36]	; 0x24
 800bcfa:	4b05      	ldr	r3, [pc, #20]	; (800bd10 <std+0x3c>)
 800bcfc:	62a3      	str	r3, [r4, #40]	; 0x28
 800bcfe:	4b05      	ldr	r3, [pc, #20]	; (800bd14 <std+0x40>)
 800bd00:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bd02:	4b05      	ldr	r3, [pc, #20]	; (800bd18 <std+0x44>)
 800bd04:	6224      	str	r4, [r4, #32]
 800bd06:	6323      	str	r3, [r4, #48]	; 0x30
 800bd08:	bd10      	pop	{r4, pc}
 800bd0a:	bf00      	nop
 800bd0c:	0800c029 	.word	0x0800c029
 800bd10:	0800c04b 	.word	0x0800c04b
 800bd14:	0800c083 	.word	0x0800c083
 800bd18:	0800c0a7 	.word	0x0800c0a7

0800bd1c <_cleanup_r>:
 800bd1c:	4901      	ldr	r1, [pc, #4]	; (800bd24 <_cleanup_r+0x8>)
 800bd1e:	f000 b8af 	b.w	800be80 <_fwalk_reent>
 800bd22:	bf00      	nop
 800bd24:	0800bc5d 	.word	0x0800bc5d

0800bd28 <__sfmoreglue>:
 800bd28:	b570      	push	{r4, r5, r6, lr}
 800bd2a:	2268      	movs	r2, #104	; 0x68
 800bd2c:	1e4d      	subs	r5, r1, #1
 800bd2e:	4355      	muls	r5, r2
 800bd30:	460e      	mov	r6, r1
 800bd32:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bd36:	f7ff fa65 	bl	800b204 <_malloc_r>
 800bd3a:	4604      	mov	r4, r0
 800bd3c:	b140      	cbz	r0, 800bd50 <__sfmoreglue+0x28>
 800bd3e:	2100      	movs	r1, #0
 800bd40:	e9c0 1600 	strd	r1, r6, [r0]
 800bd44:	300c      	adds	r0, #12
 800bd46:	60a0      	str	r0, [r4, #8]
 800bd48:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bd4c:	f7fd fb2e 	bl	80093ac <memset>
 800bd50:	4620      	mov	r0, r4
 800bd52:	bd70      	pop	{r4, r5, r6, pc}

0800bd54 <__sfp_lock_acquire>:
 800bd54:	4801      	ldr	r0, [pc, #4]	; (800bd5c <__sfp_lock_acquire+0x8>)
 800bd56:	f000 b8b3 	b.w	800bec0 <__retarget_lock_acquire_recursive>
 800bd5a:	bf00      	nop
 800bd5c:	2000379d 	.word	0x2000379d

0800bd60 <__sfp_lock_release>:
 800bd60:	4801      	ldr	r0, [pc, #4]	; (800bd68 <__sfp_lock_release+0x8>)
 800bd62:	f000 b8ae 	b.w	800bec2 <__retarget_lock_release_recursive>
 800bd66:	bf00      	nop
 800bd68:	2000379d 	.word	0x2000379d

0800bd6c <__sinit_lock_acquire>:
 800bd6c:	4801      	ldr	r0, [pc, #4]	; (800bd74 <__sinit_lock_acquire+0x8>)
 800bd6e:	f000 b8a7 	b.w	800bec0 <__retarget_lock_acquire_recursive>
 800bd72:	bf00      	nop
 800bd74:	2000379e 	.word	0x2000379e

0800bd78 <__sinit_lock_release>:
 800bd78:	4801      	ldr	r0, [pc, #4]	; (800bd80 <__sinit_lock_release+0x8>)
 800bd7a:	f000 b8a2 	b.w	800bec2 <__retarget_lock_release_recursive>
 800bd7e:	bf00      	nop
 800bd80:	2000379e 	.word	0x2000379e

0800bd84 <__sinit>:
 800bd84:	b510      	push	{r4, lr}
 800bd86:	4604      	mov	r4, r0
 800bd88:	f7ff fff0 	bl	800bd6c <__sinit_lock_acquire>
 800bd8c:	69a3      	ldr	r3, [r4, #24]
 800bd8e:	b11b      	cbz	r3, 800bd98 <__sinit+0x14>
 800bd90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bd94:	f7ff bff0 	b.w	800bd78 <__sinit_lock_release>
 800bd98:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bd9c:	6523      	str	r3, [r4, #80]	; 0x50
 800bd9e:	4b13      	ldr	r3, [pc, #76]	; (800bdec <__sinit+0x68>)
 800bda0:	4a13      	ldr	r2, [pc, #76]	; (800bdf0 <__sinit+0x6c>)
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	62a2      	str	r2, [r4, #40]	; 0x28
 800bda6:	42a3      	cmp	r3, r4
 800bda8:	bf04      	itt	eq
 800bdaa:	2301      	moveq	r3, #1
 800bdac:	61a3      	streq	r3, [r4, #24]
 800bdae:	4620      	mov	r0, r4
 800bdb0:	f000 f820 	bl	800bdf4 <__sfp>
 800bdb4:	6060      	str	r0, [r4, #4]
 800bdb6:	4620      	mov	r0, r4
 800bdb8:	f000 f81c 	bl	800bdf4 <__sfp>
 800bdbc:	60a0      	str	r0, [r4, #8]
 800bdbe:	4620      	mov	r0, r4
 800bdc0:	f000 f818 	bl	800bdf4 <__sfp>
 800bdc4:	2200      	movs	r2, #0
 800bdc6:	60e0      	str	r0, [r4, #12]
 800bdc8:	2104      	movs	r1, #4
 800bdca:	6860      	ldr	r0, [r4, #4]
 800bdcc:	f7ff ff82 	bl	800bcd4 <std>
 800bdd0:	68a0      	ldr	r0, [r4, #8]
 800bdd2:	2201      	movs	r2, #1
 800bdd4:	2109      	movs	r1, #9
 800bdd6:	f7ff ff7d 	bl	800bcd4 <std>
 800bdda:	68e0      	ldr	r0, [r4, #12]
 800bddc:	2202      	movs	r2, #2
 800bdde:	2112      	movs	r1, #18
 800bde0:	f7ff ff78 	bl	800bcd4 <std>
 800bde4:	2301      	movs	r3, #1
 800bde6:	61a3      	str	r3, [r4, #24]
 800bde8:	e7d2      	b.n	800bd90 <__sinit+0xc>
 800bdea:	bf00      	nop
 800bdec:	080152a4 	.word	0x080152a4
 800bdf0:	0800bd1d 	.word	0x0800bd1d

0800bdf4 <__sfp>:
 800bdf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdf6:	4607      	mov	r7, r0
 800bdf8:	f7ff ffac 	bl	800bd54 <__sfp_lock_acquire>
 800bdfc:	4b1e      	ldr	r3, [pc, #120]	; (800be78 <__sfp+0x84>)
 800bdfe:	681e      	ldr	r6, [r3, #0]
 800be00:	69b3      	ldr	r3, [r6, #24]
 800be02:	b913      	cbnz	r3, 800be0a <__sfp+0x16>
 800be04:	4630      	mov	r0, r6
 800be06:	f7ff ffbd 	bl	800bd84 <__sinit>
 800be0a:	3648      	adds	r6, #72	; 0x48
 800be0c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800be10:	3b01      	subs	r3, #1
 800be12:	d503      	bpl.n	800be1c <__sfp+0x28>
 800be14:	6833      	ldr	r3, [r6, #0]
 800be16:	b30b      	cbz	r3, 800be5c <__sfp+0x68>
 800be18:	6836      	ldr	r6, [r6, #0]
 800be1a:	e7f7      	b.n	800be0c <__sfp+0x18>
 800be1c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800be20:	b9d5      	cbnz	r5, 800be58 <__sfp+0x64>
 800be22:	4b16      	ldr	r3, [pc, #88]	; (800be7c <__sfp+0x88>)
 800be24:	60e3      	str	r3, [r4, #12]
 800be26:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800be2a:	6665      	str	r5, [r4, #100]	; 0x64
 800be2c:	f000 f847 	bl	800bebe <__retarget_lock_init_recursive>
 800be30:	f7ff ff96 	bl	800bd60 <__sfp_lock_release>
 800be34:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800be38:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800be3c:	6025      	str	r5, [r4, #0]
 800be3e:	61a5      	str	r5, [r4, #24]
 800be40:	2208      	movs	r2, #8
 800be42:	4629      	mov	r1, r5
 800be44:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800be48:	f7fd fab0 	bl	80093ac <memset>
 800be4c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800be50:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800be54:	4620      	mov	r0, r4
 800be56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be58:	3468      	adds	r4, #104	; 0x68
 800be5a:	e7d9      	b.n	800be10 <__sfp+0x1c>
 800be5c:	2104      	movs	r1, #4
 800be5e:	4638      	mov	r0, r7
 800be60:	f7ff ff62 	bl	800bd28 <__sfmoreglue>
 800be64:	4604      	mov	r4, r0
 800be66:	6030      	str	r0, [r6, #0]
 800be68:	2800      	cmp	r0, #0
 800be6a:	d1d5      	bne.n	800be18 <__sfp+0x24>
 800be6c:	f7ff ff78 	bl	800bd60 <__sfp_lock_release>
 800be70:	230c      	movs	r3, #12
 800be72:	603b      	str	r3, [r7, #0]
 800be74:	e7ee      	b.n	800be54 <__sfp+0x60>
 800be76:	bf00      	nop
 800be78:	080152a4 	.word	0x080152a4
 800be7c:	ffff0001 	.word	0xffff0001

0800be80 <_fwalk_reent>:
 800be80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be84:	4606      	mov	r6, r0
 800be86:	4688      	mov	r8, r1
 800be88:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800be8c:	2700      	movs	r7, #0
 800be8e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800be92:	f1b9 0901 	subs.w	r9, r9, #1
 800be96:	d505      	bpl.n	800bea4 <_fwalk_reent+0x24>
 800be98:	6824      	ldr	r4, [r4, #0]
 800be9a:	2c00      	cmp	r4, #0
 800be9c:	d1f7      	bne.n	800be8e <_fwalk_reent+0xe>
 800be9e:	4638      	mov	r0, r7
 800bea0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bea4:	89ab      	ldrh	r3, [r5, #12]
 800bea6:	2b01      	cmp	r3, #1
 800bea8:	d907      	bls.n	800beba <_fwalk_reent+0x3a>
 800beaa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800beae:	3301      	adds	r3, #1
 800beb0:	d003      	beq.n	800beba <_fwalk_reent+0x3a>
 800beb2:	4629      	mov	r1, r5
 800beb4:	4630      	mov	r0, r6
 800beb6:	47c0      	blx	r8
 800beb8:	4307      	orrs	r7, r0
 800beba:	3568      	adds	r5, #104	; 0x68
 800bebc:	e7e9      	b.n	800be92 <_fwalk_reent+0x12>

0800bebe <__retarget_lock_init_recursive>:
 800bebe:	4770      	bx	lr

0800bec0 <__retarget_lock_acquire_recursive>:
 800bec0:	4770      	bx	lr

0800bec2 <__retarget_lock_release_recursive>:
 800bec2:	4770      	bx	lr

0800bec4 <__swhatbuf_r>:
 800bec4:	b570      	push	{r4, r5, r6, lr}
 800bec6:	460e      	mov	r6, r1
 800bec8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800becc:	2900      	cmp	r1, #0
 800bece:	b096      	sub	sp, #88	; 0x58
 800bed0:	4614      	mov	r4, r2
 800bed2:	461d      	mov	r5, r3
 800bed4:	da08      	bge.n	800bee8 <__swhatbuf_r+0x24>
 800bed6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800beda:	2200      	movs	r2, #0
 800bedc:	602a      	str	r2, [r5, #0]
 800bede:	061a      	lsls	r2, r3, #24
 800bee0:	d410      	bmi.n	800bf04 <__swhatbuf_r+0x40>
 800bee2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bee6:	e00e      	b.n	800bf06 <__swhatbuf_r+0x42>
 800bee8:	466a      	mov	r2, sp
 800beea:	f000 f903 	bl	800c0f4 <_fstat_r>
 800beee:	2800      	cmp	r0, #0
 800bef0:	dbf1      	blt.n	800bed6 <__swhatbuf_r+0x12>
 800bef2:	9a01      	ldr	r2, [sp, #4]
 800bef4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bef8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800befc:	425a      	negs	r2, r3
 800befe:	415a      	adcs	r2, r3
 800bf00:	602a      	str	r2, [r5, #0]
 800bf02:	e7ee      	b.n	800bee2 <__swhatbuf_r+0x1e>
 800bf04:	2340      	movs	r3, #64	; 0x40
 800bf06:	2000      	movs	r0, #0
 800bf08:	6023      	str	r3, [r4, #0]
 800bf0a:	b016      	add	sp, #88	; 0x58
 800bf0c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800bf10 <__smakebuf_r>:
 800bf10:	898b      	ldrh	r3, [r1, #12]
 800bf12:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bf14:	079d      	lsls	r5, r3, #30
 800bf16:	4606      	mov	r6, r0
 800bf18:	460c      	mov	r4, r1
 800bf1a:	d507      	bpl.n	800bf2c <__smakebuf_r+0x1c>
 800bf1c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bf20:	6023      	str	r3, [r4, #0]
 800bf22:	6123      	str	r3, [r4, #16]
 800bf24:	2301      	movs	r3, #1
 800bf26:	6163      	str	r3, [r4, #20]
 800bf28:	b002      	add	sp, #8
 800bf2a:	bd70      	pop	{r4, r5, r6, pc}
 800bf2c:	ab01      	add	r3, sp, #4
 800bf2e:	466a      	mov	r2, sp
 800bf30:	f7ff ffc8 	bl	800bec4 <__swhatbuf_r>
 800bf34:	9900      	ldr	r1, [sp, #0]
 800bf36:	4605      	mov	r5, r0
 800bf38:	4630      	mov	r0, r6
 800bf3a:	f7ff f963 	bl	800b204 <_malloc_r>
 800bf3e:	b948      	cbnz	r0, 800bf54 <__smakebuf_r+0x44>
 800bf40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf44:	059a      	lsls	r2, r3, #22
 800bf46:	d4ef      	bmi.n	800bf28 <__smakebuf_r+0x18>
 800bf48:	f023 0303 	bic.w	r3, r3, #3
 800bf4c:	f043 0302 	orr.w	r3, r3, #2
 800bf50:	81a3      	strh	r3, [r4, #12]
 800bf52:	e7e3      	b.n	800bf1c <__smakebuf_r+0xc>
 800bf54:	4b0d      	ldr	r3, [pc, #52]	; (800bf8c <__smakebuf_r+0x7c>)
 800bf56:	62b3      	str	r3, [r6, #40]	; 0x28
 800bf58:	89a3      	ldrh	r3, [r4, #12]
 800bf5a:	6020      	str	r0, [r4, #0]
 800bf5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf60:	81a3      	strh	r3, [r4, #12]
 800bf62:	9b00      	ldr	r3, [sp, #0]
 800bf64:	6163      	str	r3, [r4, #20]
 800bf66:	9b01      	ldr	r3, [sp, #4]
 800bf68:	6120      	str	r0, [r4, #16]
 800bf6a:	b15b      	cbz	r3, 800bf84 <__smakebuf_r+0x74>
 800bf6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bf70:	4630      	mov	r0, r6
 800bf72:	f000 f8d1 	bl	800c118 <_isatty_r>
 800bf76:	b128      	cbz	r0, 800bf84 <__smakebuf_r+0x74>
 800bf78:	89a3      	ldrh	r3, [r4, #12]
 800bf7a:	f023 0303 	bic.w	r3, r3, #3
 800bf7e:	f043 0301 	orr.w	r3, r3, #1
 800bf82:	81a3      	strh	r3, [r4, #12]
 800bf84:	89a0      	ldrh	r0, [r4, #12]
 800bf86:	4305      	orrs	r5, r0
 800bf88:	81a5      	strh	r5, [r4, #12]
 800bf8a:	e7cd      	b.n	800bf28 <__smakebuf_r+0x18>
 800bf8c:	0800bd1d 	.word	0x0800bd1d

0800bf90 <_malloc_usable_size_r>:
 800bf90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf94:	1f18      	subs	r0, r3, #4
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	bfbc      	itt	lt
 800bf9a:	580b      	ldrlt	r3, [r1, r0]
 800bf9c:	18c0      	addlt	r0, r0, r3
 800bf9e:	4770      	bx	lr

0800bfa0 <_raise_r>:
 800bfa0:	291f      	cmp	r1, #31
 800bfa2:	b538      	push	{r3, r4, r5, lr}
 800bfa4:	4604      	mov	r4, r0
 800bfa6:	460d      	mov	r5, r1
 800bfa8:	d904      	bls.n	800bfb4 <_raise_r+0x14>
 800bfaa:	2316      	movs	r3, #22
 800bfac:	6003      	str	r3, [r0, #0]
 800bfae:	f04f 30ff 	mov.w	r0, #4294967295
 800bfb2:	bd38      	pop	{r3, r4, r5, pc}
 800bfb4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bfb6:	b112      	cbz	r2, 800bfbe <_raise_r+0x1e>
 800bfb8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bfbc:	b94b      	cbnz	r3, 800bfd2 <_raise_r+0x32>
 800bfbe:	4620      	mov	r0, r4
 800bfc0:	f000 f830 	bl	800c024 <_getpid_r>
 800bfc4:	462a      	mov	r2, r5
 800bfc6:	4601      	mov	r1, r0
 800bfc8:	4620      	mov	r0, r4
 800bfca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bfce:	f000 b817 	b.w	800c000 <_kill_r>
 800bfd2:	2b01      	cmp	r3, #1
 800bfd4:	d00a      	beq.n	800bfec <_raise_r+0x4c>
 800bfd6:	1c59      	adds	r1, r3, #1
 800bfd8:	d103      	bne.n	800bfe2 <_raise_r+0x42>
 800bfda:	2316      	movs	r3, #22
 800bfdc:	6003      	str	r3, [r0, #0]
 800bfde:	2001      	movs	r0, #1
 800bfe0:	e7e7      	b.n	800bfb2 <_raise_r+0x12>
 800bfe2:	2400      	movs	r4, #0
 800bfe4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bfe8:	4628      	mov	r0, r5
 800bfea:	4798      	blx	r3
 800bfec:	2000      	movs	r0, #0
 800bfee:	e7e0      	b.n	800bfb2 <_raise_r+0x12>

0800bff0 <raise>:
 800bff0:	4b02      	ldr	r3, [pc, #8]	; (800bffc <raise+0xc>)
 800bff2:	4601      	mov	r1, r0
 800bff4:	6818      	ldr	r0, [r3, #0]
 800bff6:	f7ff bfd3 	b.w	800bfa0 <_raise_r>
 800bffa:	bf00      	nop
 800bffc:	20000024 	.word	0x20000024

0800c000 <_kill_r>:
 800c000:	b538      	push	{r3, r4, r5, lr}
 800c002:	4d07      	ldr	r5, [pc, #28]	; (800c020 <_kill_r+0x20>)
 800c004:	2300      	movs	r3, #0
 800c006:	4604      	mov	r4, r0
 800c008:	4608      	mov	r0, r1
 800c00a:	4611      	mov	r1, r2
 800c00c:	602b      	str	r3, [r5, #0]
 800c00e:	f7f6 fa45 	bl	800249c <_kill>
 800c012:	1c43      	adds	r3, r0, #1
 800c014:	d102      	bne.n	800c01c <_kill_r+0x1c>
 800c016:	682b      	ldr	r3, [r5, #0]
 800c018:	b103      	cbz	r3, 800c01c <_kill_r+0x1c>
 800c01a:	6023      	str	r3, [r4, #0]
 800c01c:	bd38      	pop	{r3, r4, r5, pc}
 800c01e:	bf00      	nop
 800c020:	20003798 	.word	0x20003798

0800c024 <_getpid_r>:
 800c024:	f7f6 ba32 	b.w	800248c <_getpid>

0800c028 <__sread>:
 800c028:	b510      	push	{r4, lr}
 800c02a:	460c      	mov	r4, r1
 800c02c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c030:	f000 f894 	bl	800c15c <_read_r>
 800c034:	2800      	cmp	r0, #0
 800c036:	bfab      	itete	ge
 800c038:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c03a:	89a3      	ldrhlt	r3, [r4, #12]
 800c03c:	181b      	addge	r3, r3, r0
 800c03e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c042:	bfac      	ite	ge
 800c044:	6563      	strge	r3, [r4, #84]	; 0x54
 800c046:	81a3      	strhlt	r3, [r4, #12]
 800c048:	bd10      	pop	{r4, pc}

0800c04a <__swrite>:
 800c04a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c04e:	461f      	mov	r7, r3
 800c050:	898b      	ldrh	r3, [r1, #12]
 800c052:	05db      	lsls	r3, r3, #23
 800c054:	4605      	mov	r5, r0
 800c056:	460c      	mov	r4, r1
 800c058:	4616      	mov	r6, r2
 800c05a:	d505      	bpl.n	800c068 <__swrite+0x1e>
 800c05c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c060:	2302      	movs	r3, #2
 800c062:	2200      	movs	r2, #0
 800c064:	f000 f868 	bl	800c138 <_lseek_r>
 800c068:	89a3      	ldrh	r3, [r4, #12]
 800c06a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c06e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c072:	81a3      	strh	r3, [r4, #12]
 800c074:	4632      	mov	r2, r6
 800c076:	463b      	mov	r3, r7
 800c078:	4628      	mov	r0, r5
 800c07a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c07e:	f000 b817 	b.w	800c0b0 <_write_r>

0800c082 <__sseek>:
 800c082:	b510      	push	{r4, lr}
 800c084:	460c      	mov	r4, r1
 800c086:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c08a:	f000 f855 	bl	800c138 <_lseek_r>
 800c08e:	1c43      	adds	r3, r0, #1
 800c090:	89a3      	ldrh	r3, [r4, #12]
 800c092:	bf15      	itete	ne
 800c094:	6560      	strne	r0, [r4, #84]	; 0x54
 800c096:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c09a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c09e:	81a3      	strheq	r3, [r4, #12]
 800c0a0:	bf18      	it	ne
 800c0a2:	81a3      	strhne	r3, [r4, #12]
 800c0a4:	bd10      	pop	{r4, pc}

0800c0a6 <__sclose>:
 800c0a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0aa:	f000 b813 	b.w	800c0d4 <_close_r>
	...

0800c0b0 <_write_r>:
 800c0b0:	b538      	push	{r3, r4, r5, lr}
 800c0b2:	4d07      	ldr	r5, [pc, #28]	; (800c0d0 <_write_r+0x20>)
 800c0b4:	4604      	mov	r4, r0
 800c0b6:	4608      	mov	r0, r1
 800c0b8:	4611      	mov	r1, r2
 800c0ba:	2200      	movs	r2, #0
 800c0bc:	602a      	str	r2, [r5, #0]
 800c0be:	461a      	mov	r2, r3
 800c0c0:	f7f6 fa23 	bl	800250a <_write>
 800c0c4:	1c43      	adds	r3, r0, #1
 800c0c6:	d102      	bne.n	800c0ce <_write_r+0x1e>
 800c0c8:	682b      	ldr	r3, [r5, #0]
 800c0ca:	b103      	cbz	r3, 800c0ce <_write_r+0x1e>
 800c0cc:	6023      	str	r3, [r4, #0]
 800c0ce:	bd38      	pop	{r3, r4, r5, pc}
 800c0d0:	20003798 	.word	0x20003798

0800c0d4 <_close_r>:
 800c0d4:	b538      	push	{r3, r4, r5, lr}
 800c0d6:	4d06      	ldr	r5, [pc, #24]	; (800c0f0 <_close_r+0x1c>)
 800c0d8:	2300      	movs	r3, #0
 800c0da:	4604      	mov	r4, r0
 800c0dc:	4608      	mov	r0, r1
 800c0de:	602b      	str	r3, [r5, #0]
 800c0e0:	f7f6 fa2f 	bl	8002542 <_close>
 800c0e4:	1c43      	adds	r3, r0, #1
 800c0e6:	d102      	bne.n	800c0ee <_close_r+0x1a>
 800c0e8:	682b      	ldr	r3, [r5, #0]
 800c0ea:	b103      	cbz	r3, 800c0ee <_close_r+0x1a>
 800c0ec:	6023      	str	r3, [r4, #0]
 800c0ee:	bd38      	pop	{r3, r4, r5, pc}
 800c0f0:	20003798 	.word	0x20003798

0800c0f4 <_fstat_r>:
 800c0f4:	b538      	push	{r3, r4, r5, lr}
 800c0f6:	4d07      	ldr	r5, [pc, #28]	; (800c114 <_fstat_r+0x20>)
 800c0f8:	2300      	movs	r3, #0
 800c0fa:	4604      	mov	r4, r0
 800c0fc:	4608      	mov	r0, r1
 800c0fe:	4611      	mov	r1, r2
 800c100:	602b      	str	r3, [r5, #0]
 800c102:	f7f6 fa2a 	bl	800255a <_fstat>
 800c106:	1c43      	adds	r3, r0, #1
 800c108:	d102      	bne.n	800c110 <_fstat_r+0x1c>
 800c10a:	682b      	ldr	r3, [r5, #0]
 800c10c:	b103      	cbz	r3, 800c110 <_fstat_r+0x1c>
 800c10e:	6023      	str	r3, [r4, #0]
 800c110:	bd38      	pop	{r3, r4, r5, pc}
 800c112:	bf00      	nop
 800c114:	20003798 	.word	0x20003798

0800c118 <_isatty_r>:
 800c118:	b538      	push	{r3, r4, r5, lr}
 800c11a:	4d06      	ldr	r5, [pc, #24]	; (800c134 <_isatty_r+0x1c>)
 800c11c:	2300      	movs	r3, #0
 800c11e:	4604      	mov	r4, r0
 800c120:	4608      	mov	r0, r1
 800c122:	602b      	str	r3, [r5, #0]
 800c124:	f7f6 fa29 	bl	800257a <_isatty>
 800c128:	1c43      	adds	r3, r0, #1
 800c12a:	d102      	bne.n	800c132 <_isatty_r+0x1a>
 800c12c:	682b      	ldr	r3, [r5, #0]
 800c12e:	b103      	cbz	r3, 800c132 <_isatty_r+0x1a>
 800c130:	6023      	str	r3, [r4, #0]
 800c132:	bd38      	pop	{r3, r4, r5, pc}
 800c134:	20003798 	.word	0x20003798

0800c138 <_lseek_r>:
 800c138:	b538      	push	{r3, r4, r5, lr}
 800c13a:	4d07      	ldr	r5, [pc, #28]	; (800c158 <_lseek_r+0x20>)
 800c13c:	4604      	mov	r4, r0
 800c13e:	4608      	mov	r0, r1
 800c140:	4611      	mov	r1, r2
 800c142:	2200      	movs	r2, #0
 800c144:	602a      	str	r2, [r5, #0]
 800c146:	461a      	mov	r2, r3
 800c148:	f7f6 fa22 	bl	8002590 <_lseek>
 800c14c:	1c43      	adds	r3, r0, #1
 800c14e:	d102      	bne.n	800c156 <_lseek_r+0x1e>
 800c150:	682b      	ldr	r3, [r5, #0]
 800c152:	b103      	cbz	r3, 800c156 <_lseek_r+0x1e>
 800c154:	6023      	str	r3, [r4, #0]
 800c156:	bd38      	pop	{r3, r4, r5, pc}
 800c158:	20003798 	.word	0x20003798

0800c15c <_read_r>:
 800c15c:	b538      	push	{r3, r4, r5, lr}
 800c15e:	4d07      	ldr	r5, [pc, #28]	; (800c17c <_read_r+0x20>)
 800c160:	4604      	mov	r4, r0
 800c162:	4608      	mov	r0, r1
 800c164:	4611      	mov	r1, r2
 800c166:	2200      	movs	r2, #0
 800c168:	602a      	str	r2, [r5, #0]
 800c16a:	461a      	mov	r2, r3
 800c16c:	f7f6 f9b0 	bl	80024d0 <_read>
 800c170:	1c43      	adds	r3, r0, #1
 800c172:	d102      	bne.n	800c17a <_read_r+0x1e>
 800c174:	682b      	ldr	r3, [r5, #0]
 800c176:	b103      	cbz	r3, 800c17a <_read_r+0x1e>
 800c178:	6023      	str	r3, [r4, #0]
 800c17a:	bd38      	pop	{r3, r4, r5, pc}
 800c17c:	20003798 	.word	0x20003798

0800c180 <trunc>:
 800c180:	ec51 0b10 	vmov	r0, r1, d0
 800c184:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c188:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800c18c:	2b13      	cmp	r3, #19
 800c18e:	b5d0      	push	{r4, r6, r7, lr}
 800c190:	460c      	mov	r4, r1
 800c192:	dc10      	bgt.n	800c1b6 <trunc+0x36>
 800c194:	2b00      	cmp	r3, #0
 800c196:	bfa5      	ittet	ge
 800c198:	4a11      	ldrge	r2, [pc, #68]	; (800c1e0 <trunc+0x60>)
 800c19a:	fa42 f303 	asrge.w	r3, r2, r3
 800c19e:	2100      	movlt	r1, #0
 800c1a0:	2100      	movge	r1, #0
 800c1a2:	bfb9      	ittee	lt
 800c1a4:	2000      	movlt	r0, #0
 800c1a6:	f004 4100 	andlt.w	r1, r4, #2147483648	; 0x80000000
 800c1aa:	2000      	movge	r0, #0
 800c1ac:	ea24 0103 	bicge.w	r1, r4, r3
 800c1b0:	ec41 0b10 	vmov	d0, r0, r1
 800c1b4:	bdd0      	pop	{r4, r6, r7, pc}
 800c1b6:	2b33      	cmp	r3, #51	; 0x33
 800c1b8:	dd08      	ble.n	800c1cc <trunc+0x4c>
 800c1ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c1be:	d1f7      	bne.n	800c1b0 <trunc+0x30>
 800c1c0:	ee10 2a10 	vmov	r2, s0
 800c1c4:	460b      	mov	r3, r1
 800c1c6:	f7f4 f869 	bl	800029c <__adddf3>
 800c1ca:	e7f1      	b.n	800c1b0 <trunc+0x30>
 800c1cc:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800c1d0:	f04f 33ff 	mov.w	r3, #4294967295
 800c1d4:	fa23 f202 	lsr.w	r2, r3, r2
 800c1d8:	ea20 0602 	bic.w	r6, r0, r2
 800c1dc:	4630      	mov	r0, r6
 800c1de:	e7e7      	b.n	800c1b0 <trunc+0x30>
 800c1e0:	000fffff 	.word	0x000fffff

0800c1e4 <ceilf>:
 800c1e4:	ee10 3a10 	vmov	r3, s0
 800c1e8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c1ec:	3a7f      	subs	r2, #127	; 0x7f
 800c1ee:	2a16      	cmp	r2, #22
 800c1f0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c1f4:	dc2a      	bgt.n	800c24c <ceilf+0x68>
 800c1f6:	2a00      	cmp	r2, #0
 800c1f8:	da11      	bge.n	800c21e <ceilf+0x3a>
 800c1fa:	eddf 7a19 	vldr	s15, [pc, #100]	; 800c260 <ceilf+0x7c>
 800c1fe:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c202:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c20a:	dd05      	ble.n	800c218 <ceilf+0x34>
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	db23      	blt.n	800c258 <ceilf+0x74>
 800c210:	2900      	cmp	r1, #0
 800c212:	bf18      	it	ne
 800c214:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 800c218:	ee00 3a10 	vmov	s0, r3
 800c21c:	4770      	bx	lr
 800c21e:	4911      	ldr	r1, [pc, #68]	; (800c264 <ceilf+0x80>)
 800c220:	4111      	asrs	r1, r2
 800c222:	420b      	tst	r3, r1
 800c224:	d0fa      	beq.n	800c21c <ceilf+0x38>
 800c226:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800c260 <ceilf+0x7c>
 800c22a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c22e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c236:	ddef      	ble.n	800c218 <ceilf+0x34>
 800c238:	2b00      	cmp	r3, #0
 800c23a:	bfc2      	ittt	gt
 800c23c:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 800c240:	fa40 f202 	asrgt.w	r2, r0, r2
 800c244:	189b      	addgt	r3, r3, r2
 800c246:	ea23 0301 	bic.w	r3, r3, r1
 800c24a:	e7e5      	b.n	800c218 <ceilf+0x34>
 800c24c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800c250:	d3e4      	bcc.n	800c21c <ceilf+0x38>
 800c252:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c256:	4770      	bx	lr
 800c258:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c25c:	e7dc      	b.n	800c218 <ceilf+0x34>
 800c25e:	bf00      	nop
 800c260:	7149f2ca 	.word	0x7149f2ca
 800c264:	007fffff 	.word	0x007fffff

0800c268 <_init>:
 800c268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c26a:	bf00      	nop
 800c26c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c26e:	bc08      	pop	{r3}
 800c270:	469e      	mov	lr, r3
 800c272:	4770      	bx	lr

0800c274 <_fini>:
 800c274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c276:	bf00      	nop
 800c278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c27a:	bc08      	pop	{r3}
 800c27c:	469e      	mov	lr, r3
 800c27e:	4770      	bx	lr
