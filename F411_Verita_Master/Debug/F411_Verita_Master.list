
F411_Verita_Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a94  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000984  08008c38  08008c38  00018c38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080095bc  080095bc  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  080095bc  080095bc  000195bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080095c4  080095c4  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080095c4  080095c4  000195c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080095c8  080095c8  000195c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  080095cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000134  200001e4  080097b0  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000318  080097b0  00020318  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000102f5  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000245b  00000000  00000000  00030509  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e30  00000000  00000000  00032968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d48  00000000  00000000  00033798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000186ea  00000000  00000000  000344e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011494  00000000  00000000  0004cbca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fbde  00000000  00000000  0005e05e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000edc3c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b30  00000000  00000000  000edc8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e4 	.word	0x200001e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008c1c 	.word	0x08008c1c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e8 	.word	0x200001e8
 80001dc:	08008c1c 	.word	0x08008c1c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b974 	b.w	8000eb8 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468e      	mov	lr, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d14d      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	4694      	mov	ip, r2
 8000bfa:	d969      	bls.n	8000cd0 <__udivmoddi4+0xe8>
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	b152      	cbz	r2, 8000c18 <__udivmoddi4+0x30>
 8000c02:	fa01 f302 	lsl.w	r3, r1, r2
 8000c06:	f1c2 0120 	rsb	r1, r2, #32
 8000c0a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c0e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c12:	ea41 0e03 	orr.w	lr, r1, r3
 8000c16:	4094      	lsls	r4, r2
 8000c18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c1c:	0c21      	lsrs	r1, r4, #16
 8000c1e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c22:	fa1f f78c 	uxth.w	r7, ip
 8000c26:	fb08 e316 	mls	r3, r8, r6, lr
 8000c2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c2e:	fb06 f107 	mul.w	r1, r6, r7
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3e:	f080 811f 	bcs.w	8000e80 <__udivmoddi4+0x298>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 811c 	bls.w	8000e80 <__udivmoddi4+0x298>
 8000c48:	3e02      	subs	r6, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a5b      	subs	r3, r3, r1
 8000c4e:	b2a4      	uxth	r4, r4
 8000c50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c54:	fb08 3310 	mls	r3, r8, r0, r3
 8000c58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c5c:	fb00 f707 	mul.w	r7, r0, r7
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x92>
 8000c64:	eb1c 0404 	adds.w	r4, ip, r4
 8000c68:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6c:	f080 810a 	bcs.w	8000e84 <__udivmoddi4+0x29c>
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	f240 8107 	bls.w	8000e84 <__udivmoddi4+0x29c>
 8000c76:	4464      	add	r4, ip
 8000c78:	3802      	subs	r0, #2
 8000c7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c7e:	1be4      	subs	r4, r4, r7
 8000c80:	2600      	movs	r6, #0
 8000c82:	b11d      	cbz	r5, 8000c8c <__udivmoddi4+0xa4>
 8000c84:	40d4      	lsrs	r4, r2
 8000c86:	2300      	movs	r3, #0
 8000c88:	e9c5 4300 	strd	r4, r3, [r5]
 8000c8c:	4631      	mov	r1, r6
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d909      	bls.n	8000caa <__udivmoddi4+0xc2>
 8000c96:	2d00      	cmp	r5, #0
 8000c98:	f000 80ef 	beq.w	8000e7a <__udivmoddi4+0x292>
 8000c9c:	2600      	movs	r6, #0
 8000c9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca2:	4630      	mov	r0, r6
 8000ca4:	4631      	mov	r1, r6
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	fab3 f683 	clz	r6, r3
 8000cae:	2e00      	cmp	r6, #0
 8000cb0:	d14a      	bne.n	8000d48 <__udivmoddi4+0x160>
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d302      	bcc.n	8000cbc <__udivmoddi4+0xd4>
 8000cb6:	4282      	cmp	r2, r0
 8000cb8:	f200 80f9 	bhi.w	8000eae <__udivmoddi4+0x2c6>
 8000cbc:	1a84      	subs	r4, r0, r2
 8000cbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	469e      	mov	lr, r3
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	d0e0      	beq.n	8000c8c <__udivmoddi4+0xa4>
 8000cca:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cce:	e7dd      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000cd0:	b902      	cbnz	r2, 8000cd4 <__udivmoddi4+0xec>
 8000cd2:	deff      	udf	#255	; 0xff
 8000cd4:	fab2 f282 	clz	r2, r2
 8000cd8:	2a00      	cmp	r2, #0
 8000cda:	f040 8092 	bne.w	8000e02 <__udivmoddi4+0x21a>
 8000cde:	eba1 010c 	sub.w	r1, r1, ip
 8000ce2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce6:	fa1f fe8c 	uxth.w	lr, ip
 8000cea:	2601      	movs	r6, #1
 8000cec:	0c20      	lsrs	r0, r4, #16
 8000cee:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cf2:	fb07 1113 	mls	r1, r7, r3, r1
 8000cf6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cfa:	fb0e f003 	mul.w	r0, lr, r3
 8000cfe:	4288      	cmp	r0, r1
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x12c>
 8000d02:	eb1c 0101 	adds.w	r1, ip, r1
 8000d06:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x12a>
 8000d0c:	4288      	cmp	r0, r1
 8000d0e:	f200 80cb 	bhi.w	8000ea8 <__udivmoddi4+0x2c0>
 8000d12:	4643      	mov	r3, r8
 8000d14:	1a09      	subs	r1, r1, r0
 8000d16:	b2a4      	uxth	r4, r4
 8000d18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d1c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d20:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d24:	fb0e fe00 	mul.w	lr, lr, r0
 8000d28:	45a6      	cmp	lr, r4
 8000d2a:	d908      	bls.n	8000d3e <__udivmoddi4+0x156>
 8000d2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d30:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d34:	d202      	bcs.n	8000d3c <__udivmoddi4+0x154>
 8000d36:	45a6      	cmp	lr, r4
 8000d38:	f200 80bb 	bhi.w	8000eb2 <__udivmoddi4+0x2ca>
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	eba4 040e 	sub.w	r4, r4, lr
 8000d42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d46:	e79c      	b.n	8000c82 <__udivmoddi4+0x9a>
 8000d48:	f1c6 0720 	rsb	r7, r6, #32
 8000d4c:	40b3      	lsls	r3, r6
 8000d4e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d52:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d56:	fa20 f407 	lsr.w	r4, r0, r7
 8000d5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d5e:	431c      	orrs	r4, r3
 8000d60:	40f9      	lsrs	r1, r7
 8000d62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d66:	fa00 f306 	lsl.w	r3, r0, r6
 8000d6a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d6e:	0c20      	lsrs	r0, r4, #16
 8000d70:	fa1f fe8c 	uxth.w	lr, ip
 8000d74:	fb09 1118 	mls	r1, r9, r8, r1
 8000d78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d7c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d80:	4288      	cmp	r0, r1
 8000d82:	fa02 f206 	lsl.w	r2, r2, r6
 8000d86:	d90b      	bls.n	8000da0 <__udivmoddi4+0x1b8>
 8000d88:	eb1c 0101 	adds.w	r1, ip, r1
 8000d8c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d90:	f080 8088 	bcs.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d94:	4288      	cmp	r0, r1
 8000d96:	f240 8085 	bls.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d9a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d9e:	4461      	add	r1, ip
 8000da0:	1a09      	subs	r1, r1, r0
 8000da2:	b2a4      	uxth	r4, r4
 8000da4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000da8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000db0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db4:	458e      	cmp	lr, r1
 8000db6:	d908      	bls.n	8000dca <__udivmoddi4+0x1e2>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc0:	d26c      	bcs.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc2:	458e      	cmp	lr, r1
 8000dc4:	d96a      	bls.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	4461      	add	r1, ip
 8000dca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dce:	fba0 9402 	umull	r9, r4, r0, r2
 8000dd2:	eba1 010e 	sub.w	r1, r1, lr
 8000dd6:	42a1      	cmp	r1, r4
 8000dd8:	46c8      	mov	r8, r9
 8000dda:	46a6      	mov	lr, r4
 8000ddc:	d356      	bcc.n	8000e8c <__udivmoddi4+0x2a4>
 8000dde:	d053      	beq.n	8000e88 <__udivmoddi4+0x2a0>
 8000de0:	b15d      	cbz	r5, 8000dfa <__udivmoddi4+0x212>
 8000de2:	ebb3 0208 	subs.w	r2, r3, r8
 8000de6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dea:	fa01 f707 	lsl.w	r7, r1, r7
 8000dee:	fa22 f306 	lsr.w	r3, r2, r6
 8000df2:	40f1      	lsrs	r1, r6
 8000df4:	431f      	orrs	r7, r3
 8000df6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dfa:	2600      	movs	r6, #0
 8000dfc:	4631      	mov	r1, r6
 8000dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e02:	f1c2 0320 	rsb	r3, r2, #32
 8000e06:	40d8      	lsrs	r0, r3
 8000e08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e0c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e10:	4091      	lsls	r1, r2
 8000e12:	4301      	orrs	r1, r0
 8000e14:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e18:	fa1f fe8c 	uxth.w	lr, ip
 8000e1c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e20:	fb07 3610 	mls	r6, r7, r0, r3
 8000e24:	0c0b      	lsrs	r3, r1, #16
 8000e26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e2a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e2e:	429e      	cmp	r6, r3
 8000e30:	fa04 f402 	lsl.w	r4, r4, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x260>
 8000e36:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e3e:	d22f      	bcs.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e40:	429e      	cmp	r6, r3
 8000e42:	d92d      	bls.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e44:	3802      	subs	r0, #2
 8000e46:	4463      	add	r3, ip
 8000e48:	1b9b      	subs	r3, r3, r6
 8000e4a:	b289      	uxth	r1, r1
 8000e4c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e50:	fb07 3316 	mls	r3, r7, r6, r3
 8000e54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e58:	fb06 f30e 	mul.w	r3, r6, lr
 8000e5c:	428b      	cmp	r3, r1
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x28a>
 8000e60:	eb1c 0101 	adds.w	r1, ip, r1
 8000e64:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e68:	d216      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d914      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6e:	3e02      	subs	r6, #2
 8000e70:	4461      	add	r1, ip
 8000e72:	1ac9      	subs	r1, r1, r3
 8000e74:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e78:	e738      	b.n	8000cec <__udivmoddi4+0x104>
 8000e7a:	462e      	mov	r6, r5
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	e705      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000e80:	4606      	mov	r6, r0
 8000e82:	e6e3      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e84:	4618      	mov	r0, r3
 8000e86:	e6f8      	b.n	8000c7a <__udivmoddi4+0x92>
 8000e88:	454b      	cmp	r3, r9
 8000e8a:	d2a9      	bcs.n	8000de0 <__udivmoddi4+0x1f8>
 8000e8c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e90:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e94:	3801      	subs	r0, #1
 8000e96:	e7a3      	b.n	8000de0 <__udivmoddi4+0x1f8>
 8000e98:	4646      	mov	r6, r8
 8000e9a:	e7ea      	b.n	8000e72 <__udivmoddi4+0x28a>
 8000e9c:	4620      	mov	r0, r4
 8000e9e:	e794      	b.n	8000dca <__udivmoddi4+0x1e2>
 8000ea0:	4640      	mov	r0, r8
 8000ea2:	e7d1      	b.n	8000e48 <__udivmoddi4+0x260>
 8000ea4:	46d0      	mov	r8, sl
 8000ea6:	e77b      	b.n	8000da0 <__udivmoddi4+0x1b8>
 8000ea8:	3b02      	subs	r3, #2
 8000eaa:	4461      	add	r1, ip
 8000eac:	e732      	b.n	8000d14 <__udivmoddi4+0x12c>
 8000eae:	4630      	mov	r0, r6
 8000eb0:	e709      	b.n	8000cc6 <__udivmoddi4+0xde>
 8000eb2:	4464      	add	r4, ip
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	e742      	b.n	8000d3e <__udivmoddi4+0x156>

08000eb8 <__aeabi_idiv0>:
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop

08000ebc <INA219_BitReset>:
	INACBffr.D32 = 0; //// buffer clear
	HAL_I2C_Mem_Read(hi2c, dv_addr, ina_rg, I2C_MEMADD_SIZE_8BIT, &INACBffr.D8[1], 2, 10);
	return INACBffr.D16[1] | INACBffr.D16[0];
}

void INA219_BitReset(I2C_HandleTypeDef *hi2c,uint8_t dv_addr){
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b088      	sub	sp, #32
 8000ec0:	af04      	add	r7, sp, #16
 8000ec2:	6078      	str	r0, [r7, #4]
 8000ec4:	460b      	mov	r3, r1
 8000ec6:	70fb      	strb	r3, [r7, #3]
	/* @brief : generates a system reset that is the same as power-on reset.
	 * 			Don't forget to  Re-calibrate or zero Current & power will be returned
	 * @param : hi2c - HAL_I2C used to read
	 * @param : dv_addr - address of INA219 device in the busline
	 * */
	uint8_t resetx = 0x80;
 8000ec8:	2380      	movs	r3, #128	; 0x80
 8000eca:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(hi2c, dv_addr, INA219_RG_Config, I2C_MEMADD_SIZE_8BIT, &resetx, 2, 10);
 8000ecc:	78fb      	ldrb	r3, [r7, #3]
 8000ece:	b299      	uxth	r1, r3
 8000ed0:	230a      	movs	r3, #10
 8000ed2:	9302      	str	r3, [sp, #8]
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	9301      	str	r3, [sp, #4]
 8000ed8:	f107 030f 	add.w	r3, r7, #15
 8000edc:	9300      	str	r3, [sp, #0]
 8000ede:	2301      	movs	r3, #1
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	6878      	ldr	r0, [r7, #4]
 8000ee4:	f002 f83a 	bl	8002f5c <HAL_I2C_Mem_Write>

}
 8000ee8:	bf00      	nop
 8000eea:	3710      	adds	r7, #16
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ef0:	b5b0      	push	{r4, r5, r7, lr}
 8000ef2:	b096      	sub	sp, #88	; 0x58
 8000ef4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ef6:	f001 fb45 	bl	8002584 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000efa:	f000 f8b7 	bl	800106c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000efe:	f000 f9af 	bl	8001260 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f02:	f000 f983 	bl	800120c <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8000f06:	f000 f949 	bl	800119c <MX_SPI2_Init>
  MX_I2C1_Init();
 8000f0a:	f000 f919 	bl	8001140 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  ili9341_Init();
 8000f0e:	f000 fcd1 	bl	80018b4 <ili9341_Init>
  ili9341_DisplayOn();
 8000f12:	f000 fcb3 	bl	800187c <ili9341_DisplayOn>
//
//  INA219_INIT(&hi2c1, INA219_ADDR_1, cofgra);
//  INA219_Calibrate(&hi2c1, INA219_ADDR_1);
#endif

  char temp[]="----------------- F411_Verita_Master --------------------\r\n";
 8000f16:	4b4d      	ldr	r3, [pc, #308]	; (800104c <main+0x15c>)
 8000f18:	463c      	mov	r4, r7
 8000f1a:	461d      	mov	r5, r3
 8000f1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f28:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f2c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 8000f30:	463b      	mov	r3, r7
 8000f32:	4618      	mov	r0, r3
 8000f34:	f7ff f954 	bl	80001e0 <strlen>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	b29a      	uxth	r2, r3
 8000f3c:	4639      	mov	r1, r7
 8000f3e:	230a      	movs	r3, #10
 8000f40:	4843      	ldr	r0, [pc, #268]	; (8001050 <main+0x160>)
 8000f42:	f004 fd6b 	bl	8005a1c <HAL_UART_Transmit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (HAL_GetTick() >= timestamp_one){
 8000f46:	f001 fb83 	bl	8002650 <HAL_GetTick>
 8000f4a:	4602      	mov	r2, r0
 8000f4c:	4b41      	ldr	r3, [pc, #260]	; (8001054 <main+0x164>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	d331      	bcc.n	8000fb8 <main+0xc8>
		  timestamp_one += 1000;
 8000f54:	4b3f      	ldr	r3, [pc, #252]	; (8001054 <main+0x164>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000f5c:	4a3d      	ldr	r2, [pc, #244]	; (8001054 <main+0x164>)
 8000f5e:	6013      	str	r3, [r2, #0]
		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000f60:	2120      	movs	r1, #32
 8000f62:	483d      	ldr	r0, [pc, #244]	; (8001058 <main+0x168>)
 8000f64:	f001 fe83 	bl	8002c6e <HAL_GPIO_TogglePin>


		  ili9341_FillRect(50, 20, 50, 50, cl_RED);
 8000f68:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000f6c:	9300      	str	r3, [sp, #0]
 8000f6e:	2332      	movs	r3, #50	; 0x32
 8000f70:	2232      	movs	r2, #50	; 0x32
 8000f72:	2114      	movs	r1, #20
 8000f74:	2032      	movs	r0, #50	; 0x32
 8000f76:	f000 fdb5 	bl	8001ae4 <ili9341_FillRect>
		  ili9341_FillRect(100, 20, 50, 50, cl_GREEN);
 8000f7a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000f7e:	9300      	str	r3, [sp, #0]
 8000f80:	2332      	movs	r3, #50	; 0x32
 8000f82:	2232      	movs	r2, #50	; 0x32
 8000f84:	2114      	movs	r1, #20
 8000f86:	2064      	movs	r0, #100	; 0x64
 8000f88:	f000 fdac 	bl	8001ae4 <ili9341_FillRect>
		  ili9341_FillRect(150, 20, 50, 50, cl_BLUE);
 8000f8c:	231f      	movs	r3, #31
 8000f8e:	9300      	str	r3, [sp, #0]
 8000f90:	2332      	movs	r3, #50	; 0x32
 8000f92:	2232      	movs	r2, #50	; 0x32
 8000f94:	2114      	movs	r1, #20
 8000f96:	2096      	movs	r0, #150	; 0x96
 8000f98:	f000 fda4 	bl	8001ae4 <ili9341_FillRect>

		  //ili9341_DrawRGBImage(60, 120, 128, 128, (uint16_t*)image_data_ImageoftestN2);

		  ili9341_WriteString(50, 70, "Helios Terra Renai Kaliber Barx Maxon 129035"
 8000f9c:	4b2f      	ldr	r3, [pc, #188]	; (800105c <main+0x16c>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	9202      	str	r2, [sp, #8]
 8000fa2:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000fa6:	9201      	str	r2, [sp, #4]
 8000fa8:	685a      	ldr	r2, [r3, #4]
 8000faa:	9200      	str	r2, [sp, #0]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4a2c      	ldr	r2, [pc, #176]	; (8001060 <main+0x170>)
 8000fb0:	2146      	movs	r1, #70	; 0x46
 8000fb2:	2032      	movs	r0, #50	; 0x32
 8000fb4:	f000 fe93 	bl	8001cde <ili9341_WriteString>
#endif

		  } // timestamp_one


		  if (HAL_GetTick() >= timestamp_disp){
 8000fb8:	f001 fb4a 	bl	8002650 <HAL_GetTick>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	4b29      	ldr	r3, [pc, #164]	; (8001064 <main+0x174>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	429a      	cmp	r2, r3
 8000fc4:	d3bf      	bcc.n	8000f46 <main+0x56>
			  timestamp_disp += 10;
 8000fc6:	4b27      	ldr	r3, [pc, #156]	; (8001064 <main+0x174>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	330a      	adds	r3, #10
 8000fcc:	4a25      	ldr	r2, [pc, #148]	; (8001064 <main+0x174>)
 8000fce:	6013      	str	r3, [r2, #0]

		   //// Running box ------
		  int ratte = 1;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	647b      	str	r3, [r7, #68]	; 0x44
		  int sizo = 30;
 8000fd4:	231e      	movs	r3, #30
 8000fd6:	643b      	str	r3, [r7, #64]	; 0x40
		  int offs = 140;
 8000fd8:	238c      	movs	r3, #140	; 0x8c
 8000fda:	63fb      	str	r3, [r7, #60]	; 0x3c
		  static uint16_t xsh = 0;
		  ili9341_FillRect(xsh, offs, ratte ,sizo, cl_MAROON);
 8000fdc:	4b22      	ldr	r3, [pc, #136]	; (8001068 <main+0x178>)
 8000fde:	8818      	ldrh	r0, [r3, #0]
 8000fe0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000fe2:	b299      	uxth	r1, r3
 8000fe4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000fe6:	b29a      	uxth	r2, r3
 8000fe8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000fea:	b29b      	uxth	r3, r3
 8000fec:	f44f 44f0 	mov.w	r4, #30720	; 0x7800
 8000ff0:	9400      	str	r4, [sp, #0]
 8000ff2:	f000 fd77 	bl	8001ae4 <ili9341_FillRect>
		  xsh += ratte;
 8000ff6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ff8:	b29a      	uxth	r2, r3
 8000ffa:	4b1b      	ldr	r3, [pc, #108]	; (8001068 <main+0x178>)
 8000ffc:	881b      	ldrh	r3, [r3, #0]
 8000ffe:	4413      	add	r3, r2
 8001000:	b29a      	uxth	r2, r3
 8001002:	4b19      	ldr	r3, [pc, #100]	; (8001068 <main+0x178>)
 8001004:	801a      	strh	r2, [r3, #0]
		  ili9341_FillRect(xsh, offs, sizo, sizo, cl_CYAN); //// box
 8001006:	4b18      	ldr	r3, [pc, #96]	; (8001068 <main+0x178>)
 8001008:	8818      	ldrh	r0, [r3, #0]
 800100a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800100c:	b299      	uxth	r1, r3
 800100e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001010:	b29a      	uxth	r2, r3
 8001012:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001014:	b29b      	uxth	r3, r3
 8001016:	f240 74ff 	movw	r4, #2047	; 0x7ff
 800101a:	9400      	str	r4, [sp, #0]
 800101c:	f000 fd62 	bl	8001ae4 <ili9341_FillRect>
		  if(xsh >= 400){ // clear
 8001020:	4b11      	ldr	r3, [pc, #68]	; (8001068 <main+0x178>)
 8001022:	881b      	ldrh	r3, [r3, #0]
 8001024:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001028:	d38d      	bcc.n	8000f46 <main+0x56>
			  ili9341_FillRect(xsh, offs, sizo, sizo, cl_MAROON);
 800102a:	4b0f      	ldr	r3, [pc, #60]	; (8001068 <main+0x178>)
 800102c:	8818      	ldrh	r0, [r3, #0]
 800102e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001030:	b299      	uxth	r1, r3
 8001032:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001034:	b29a      	uxth	r2, r3
 8001036:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001038:	b29b      	uxth	r3, r3
 800103a:	f44f 44f0 	mov.w	r4, #30720	; 0x7800
 800103e:	9400      	str	r4, [sp, #0]
 8001040:	f000 fd50 	bl	8001ae4 <ili9341_FillRect>
			  xsh = 0;
 8001044:	4b08      	ldr	r3, [pc, #32]	; (8001068 <main+0x178>)
 8001046:	2200      	movs	r2, #0
 8001048:	801a      	strh	r2, [r3, #0]
	  if (HAL_GetTick() >= timestamp_one){
 800104a:	e77c      	b.n	8000f46 <main+0x56>
 800104c:	08008cb0 	.word	0x08008cb0
 8001050:	200002ac 	.word	0x200002ac
 8001054:	200002f0 	.word	0x200002f0
 8001058:	40020000 	.word	0x40020000
 800105c:	20000004 	.word	0x20000004
 8001060:	08008c38 	.word	0x08008c38
 8001064:	200002f4 	.word	0x200002f4
 8001068:	200002f8 	.word	0x200002f8

0800106c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b094      	sub	sp, #80	; 0x50
 8001070:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001072:	f107 0320 	add.w	r3, r7, #32
 8001076:	2230      	movs	r2, #48	; 0x30
 8001078:	2100      	movs	r1, #0
 800107a:	4618      	mov	r0, r3
 800107c:	f005 f86c 	bl	8006158 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001080:	f107 030c 	add.w	r3, r7, #12
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	609a      	str	r2, [r3, #8]
 800108c:	60da      	str	r2, [r3, #12]
 800108e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001090:	2300      	movs	r3, #0
 8001092:	60bb      	str	r3, [r7, #8]
 8001094:	4b28      	ldr	r3, [pc, #160]	; (8001138 <SystemClock_Config+0xcc>)
 8001096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001098:	4a27      	ldr	r2, [pc, #156]	; (8001138 <SystemClock_Config+0xcc>)
 800109a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800109e:	6413      	str	r3, [r2, #64]	; 0x40
 80010a0:	4b25      	ldr	r3, [pc, #148]	; (8001138 <SystemClock_Config+0xcc>)
 80010a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010a8:	60bb      	str	r3, [r7, #8]
 80010aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010ac:	2300      	movs	r3, #0
 80010ae:	607b      	str	r3, [r7, #4]
 80010b0:	4b22      	ldr	r3, [pc, #136]	; (800113c <SystemClock_Config+0xd0>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a21      	ldr	r2, [pc, #132]	; (800113c <SystemClock_Config+0xd0>)
 80010b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010ba:	6013      	str	r3, [r2, #0]
 80010bc:	4b1f      	ldr	r3, [pc, #124]	; (800113c <SystemClock_Config+0xd0>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010c4:	607b      	str	r3, [r7, #4]
 80010c6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010c8:	2302      	movs	r3, #2
 80010ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010cc:	2301      	movs	r3, #1
 80010ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010d0:	2310      	movs	r3, #16
 80010d2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010d4:	2302      	movs	r3, #2
 80010d6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010d8:	2300      	movs	r3, #0
 80010da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80010dc:	2310      	movs	r3, #16
 80010de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80010e0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80010e4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80010e6:	2304      	movs	r3, #4
 80010e8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010ea:	2304      	movs	r3, #4
 80010ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010ee:	f107 0320 	add.w	r3, r7, #32
 80010f2:	4618      	mov	r0, r3
 80010f4:	f003 ff24 	bl	8004f40 <HAL_RCC_OscConfig>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80010fe:	f000 f969 	bl	80013d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001102:	230f      	movs	r3, #15
 8001104:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001106:	2302      	movs	r3, #2
 8001108:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800110a:	2300      	movs	r3, #0
 800110c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800110e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001112:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001114:	2300      	movs	r3, #0
 8001116:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001118:	f107 030c 	add.w	r3, r7, #12
 800111c:	2102      	movs	r1, #2
 800111e:	4618      	mov	r0, r3
 8001120:	f004 f986 	bl	8005430 <HAL_RCC_ClockConfig>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800112a:	f000 f953 	bl	80013d4 <Error_Handler>
  }
}
 800112e:	bf00      	nop
 8001130:	3750      	adds	r7, #80	; 0x50
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	40023800 	.word	0x40023800
 800113c:	40007000 	.word	0x40007000

08001140 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001144:	4b12      	ldr	r3, [pc, #72]	; (8001190 <MX_I2C1_Init+0x50>)
 8001146:	4a13      	ldr	r2, [pc, #76]	; (8001194 <MX_I2C1_Init+0x54>)
 8001148:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800114a:	4b11      	ldr	r3, [pc, #68]	; (8001190 <MX_I2C1_Init+0x50>)
 800114c:	4a12      	ldr	r2, [pc, #72]	; (8001198 <MX_I2C1_Init+0x58>)
 800114e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001150:	4b0f      	ldr	r3, [pc, #60]	; (8001190 <MX_I2C1_Init+0x50>)
 8001152:	2200      	movs	r2, #0
 8001154:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001156:	4b0e      	ldr	r3, [pc, #56]	; (8001190 <MX_I2C1_Init+0x50>)
 8001158:	2200      	movs	r2, #0
 800115a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800115c:	4b0c      	ldr	r3, [pc, #48]	; (8001190 <MX_I2C1_Init+0x50>)
 800115e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001162:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001164:	4b0a      	ldr	r3, [pc, #40]	; (8001190 <MX_I2C1_Init+0x50>)
 8001166:	2200      	movs	r2, #0
 8001168:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800116a:	4b09      	ldr	r3, [pc, #36]	; (8001190 <MX_I2C1_Init+0x50>)
 800116c:	2200      	movs	r2, #0
 800116e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001170:	4b07      	ldr	r3, [pc, #28]	; (8001190 <MX_I2C1_Init+0x50>)
 8001172:	2200      	movs	r2, #0
 8001174:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001176:	4b06      	ldr	r3, [pc, #24]	; (8001190 <MX_I2C1_Init+0x50>)
 8001178:	2200      	movs	r2, #0
 800117a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800117c:	4804      	ldr	r0, [pc, #16]	; (8001190 <MX_I2C1_Init+0x50>)
 800117e:	f001 fda9 	bl	8002cd4 <HAL_I2C_Init>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001188:	f000 f924 	bl	80013d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800118c:	bf00      	nop
 800118e:	bd80      	pop	{r7, pc}
 8001190:	20000200 	.word	0x20000200
 8001194:	40005400 	.word	0x40005400
 8001198:	00061a80 	.word	0x00061a80

0800119c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80011a0:	4b18      	ldr	r3, [pc, #96]	; (8001204 <MX_SPI2_Init+0x68>)
 80011a2:	4a19      	ldr	r2, [pc, #100]	; (8001208 <MX_SPI2_Init+0x6c>)
 80011a4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80011a6:	4b17      	ldr	r3, [pc, #92]	; (8001204 <MX_SPI2_Init+0x68>)
 80011a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011ac:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80011ae:	4b15      	ldr	r3, [pc, #84]	; (8001204 <MX_SPI2_Init+0x68>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80011b4:	4b13      	ldr	r3, [pc, #76]	; (8001204 <MX_SPI2_Init+0x68>)
 80011b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011ba:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011bc:	4b11      	ldr	r3, [pc, #68]	; (8001204 <MX_SPI2_Init+0x68>)
 80011be:	2200      	movs	r2, #0
 80011c0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011c2:	4b10      	ldr	r3, [pc, #64]	; (8001204 <MX_SPI2_Init+0x68>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80011c8:	4b0e      	ldr	r3, [pc, #56]	; (8001204 <MX_SPI2_Init+0x68>)
 80011ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011ce:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80011d0:	4b0c      	ldr	r3, [pc, #48]	; (8001204 <MX_SPI2_Init+0x68>)
 80011d2:	2210      	movs	r2, #16
 80011d4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011d6:	4b0b      	ldr	r3, [pc, #44]	; (8001204 <MX_SPI2_Init+0x68>)
 80011d8:	2200      	movs	r2, #0
 80011da:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80011dc:	4b09      	ldr	r3, [pc, #36]	; (8001204 <MX_SPI2_Init+0x68>)
 80011de:	2200      	movs	r2, #0
 80011e0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011e2:	4b08      	ldr	r3, [pc, #32]	; (8001204 <MX_SPI2_Init+0x68>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80011e8:	4b06      	ldr	r3, [pc, #24]	; (8001204 <MX_SPI2_Init+0x68>)
 80011ea:	220a      	movs	r2, #10
 80011ec:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80011ee:	4805      	ldr	r0, [pc, #20]	; (8001204 <MX_SPI2_Init+0x68>)
 80011f0:	f004 fb3e 	bl	8005870 <HAL_SPI_Init>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 80011fa:	f000 f8eb 	bl	80013d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80011fe:	bf00      	nop
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	20000254 	.word	0x20000254
 8001208:	40003800 	.word	0x40003800

0800120c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001210:	4b11      	ldr	r3, [pc, #68]	; (8001258 <MX_USART2_UART_Init+0x4c>)
 8001212:	4a12      	ldr	r2, [pc, #72]	; (800125c <MX_USART2_UART_Init+0x50>)
 8001214:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001216:	4b10      	ldr	r3, [pc, #64]	; (8001258 <MX_USART2_UART_Init+0x4c>)
 8001218:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800121c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800121e:	4b0e      	ldr	r3, [pc, #56]	; (8001258 <MX_USART2_UART_Init+0x4c>)
 8001220:	2200      	movs	r2, #0
 8001222:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001224:	4b0c      	ldr	r3, [pc, #48]	; (8001258 <MX_USART2_UART_Init+0x4c>)
 8001226:	2200      	movs	r2, #0
 8001228:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800122a:	4b0b      	ldr	r3, [pc, #44]	; (8001258 <MX_USART2_UART_Init+0x4c>)
 800122c:	2200      	movs	r2, #0
 800122e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001230:	4b09      	ldr	r3, [pc, #36]	; (8001258 <MX_USART2_UART_Init+0x4c>)
 8001232:	220c      	movs	r2, #12
 8001234:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001236:	4b08      	ldr	r3, [pc, #32]	; (8001258 <MX_USART2_UART_Init+0x4c>)
 8001238:	2200      	movs	r2, #0
 800123a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800123c:	4b06      	ldr	r3, [pc, #24]	; (8001258 <MX_USART2_UART_Init+0x4c>)
 800123e:	2200      	movs	r2, #0
 8001240:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001242:	4805      	ldr	r0, [pc, #20]	; (8001258 <MX_USART2_UART_Init+0x4c>)
 8001244:	f004 fb9d 	bl	8005982 <HAL_UART_Init>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800124e:	f000 f8c1 	bl	80013d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001252:	bf00      	nop
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	200002ac 	.word	0x200002ac
 800125c:	40004400 	.word	0x40004400

08001260 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b08a      	sub	sp, #40	; 0x28
 8001264:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001266:	f107 0314 	add.w	r3, r7, #20
 800126a:	2200      	movs	r2, #0
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	605a      	str	r2, [r3, #4]
 8001270:	609a      	str	r2, [r3, #8]
 8001272:	60da      	str	r2, [r3, #12]
 8001274:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	613b      	str	r3, [r7, #16]
 800127a:	4b48      	ldr	r3, [pc, #288]	; (800139c <MX_GPIO_Init+0x13c>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	4a47      	ldr	r2, [pc, #284]	; (800139c <MX_GPIO_Init+0x13c>)
 8001280:	f043 0304 	orr.w	r3, r3, #4
 8001284:	6313      	str	r3, [r2, #48]	; 0x30
 8001286:	4b45      	ldr	r3, [pc, #276]	; (800139c <MX_GPIO_Init+0x13c>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	f003 0304 	and.w	r3, r3, #4
 800128e:	613b      	str	r3, [r7, #16]
 8001290:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	60fb      	str	r3, [r7, #12]
 8001296:	4b41      	ldr	r3, [pc, #260]	; (800139c <MX_GPIO_Init+0x13c>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	4a40      	ldr	r2, [pc, #256]	; (800139c <MX_GPIO_Init+0x13c>)
 800129c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012a0:	6313      	str	r3, [r2, #48]	; 0x30
 80012a2:	4b3e      	ldr	r3, [pc, #248]	; (800139c <MX_GPIO_Init+0x13c>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012aa:	60fb      	str	r3, [r7, #12]
 80012ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	60bb      	str	r3, [r7, #8]
 80012b2:	4b3a      	ldr	r3, [pc, #232]	; (800139c <MX_GPIO_Init+0x13c>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	4a39      	ldr	r2, [pc, #228]	; (800139c <MX_GPIO_Init+0x13c>)
 80012b8:	f043 0301 	orr.w	r3, r3, #1
 80012bc:	6313      	str	r3, [r2, #48]	; 0x30
 80012be:	4b37      	ldr	r3, [pc, #220]	; (800139c <MX_GPIO_Init+0x13c>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	60bb      	str	r3, [r7, #8]
 80012c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	607b      	str	r3, [r7, #4]
 80012ce:	4b33      	ldr	r3, [pc, #204]	; (800139c <MX_GPIO_Init+0x13c>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	4a32      	ldr	r2, [pc, #200]	; (800139c <MX_GPIO_Init+0x13c>)
 80012d4:	f043 0302 	orr.w	r3, r3, #2
 80012d8:	6313      	str	r3, [r2, #48]	; 0x30
 80012da:	4b30      	ldr	r3, [pc, #192]	; (800139c <MX_GPIO_Init+0x13c>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	f003 0302 	and.w	r3, r3, #2
 80012e2:	607b      	str	r3, [r7, #4]
 80012e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|ili_DC_Pin, GPIO_PIN_RESET);
 80012e6:	2200      	movs	r2, #0
 80012e8:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80012ec:	482c      	ldr	r0, [pc, #176]	; (80013a0 <MX_GPIO_Init+0x140>)
 80012ee:	f001 fca5 	bl	8002c3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_RES_GPIO_Port, SPI2_RES_Pin, GPIO_PIN_SET);
 80012f2:	2201      	movs	r2, #1
 80012f4:	2180      	movs	r1, #128	; 0x80
 80012f6:	482b      	ldr	r0, [pc, #172]	; (80013a4 <MX_GPIO_Init+0x144>)
 80012f8:	f001 fca0 	bl	8002c3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 80012fc:	2201      	movs	r2, #1
 80012fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001302:	4827      	ldr	r0, [pc, #156]	; (80013a0 <MX_GPIO_Init+0x140>)
 8001304:	f001 fc9a 	bl	8002c3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ili_RES_GPIO_Port, ili_RES_Pin, GPIO_PIN_RESET);
 8001308:	2200      	movs	r2, #0
 800130a:	2120      	movs	r1, #32
 800130c:	4826      	ldr	r0, [pc, #152]	; (80013a8 <MX_GPIO_Init+0x148>)
 800130e:	f001 fc95 	bl	8002c3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001312:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001316:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001318:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800131c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131e:	2300      	movs	r3, #0
 8001320:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001322:	f107 0314 	add.w	r3, r7, #20
 8001326:	4619      	mov	r1, r3
 8001328:	481e      	ldr	r0, [pc, #120]	; (80013a4 <MX_GPIO_Init+0x144>)
 800132a:	f001 fb03 	bl	8002934 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin SPI2_CS_Pin ili_DC_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|SPI2_CS_Pin|ili_DC_Pin;
 800132e:	f44f 63a4 	mov.w	r3, #1312	; 0x520
 8001332:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001334:	2301      	movs	r3, #1
 8001336:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001338:	2300      	movs	r3, #0
 800133a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133c:	2300      	movs	r3, #0
 800133e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001340:	f107 0314 	add.w	r3, r7, #20
 8001344:	4619      	mov	r1, r3
 8001346:	4816      	ldr	r0, [pc, #88]	; (80013a0 <MX_GPIO_Init+0x140>)
 8001348:	f001 faf4 	bl	8002934 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_RES_Pin */
  GPIO_InitStruct.Pin = SPI2_RES_Pin;
 800134c:	2380      	movs	r3, #128	; 0x80
 800134e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001350:	2301      	movs	r3, #1
 8001352:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001354:	2300      	movs	r3, #0
 8001356:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001358:	2300      	movs	r3, #0
 800135a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_RES_GPIO_Port, &GPIO_InitStruct);
 800135c:	f107 0314 	add.w	r3, r7, #20
 8001360:	4619      	mov	r1, r3
 8001362:	4810      	ldr	r0, [pc, #64]	; (80013a4 <MX_GPIO_Init+0x144>)
 8001364:	f001 fae6 	bl	8002934 <HAL_GPIO_Init>

  /*Configure GPIO pin : ili_RES_Pin */
  GPIO_InitStruct.Pin = ili_RES_Pin;
 8001368:	2320      	movs	r3, #32
 800136a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800136c:	2301      	movs	r3, #1
 800136e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001370:	2300      	movs	r3, #0
 8001372:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001374:	2300      	movs	r3, #0
 8001376:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ili_RES_GPIO_Port, &GPIO_InitStruct);
 8001378:	f107 0314 	add.w	r3, r7, #20
 800137c:	4619      	mov	r1, r3
 800137e:	480a      	ldr	r0, [pc, #40]	; (80013a8 <MX_GPIO_Init+0x148>)
 8001380:	f001 fad8 	bl	8002934 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001384:	2200      	movs	r2, #0
 8001386:	2100      	movs	r1, #0
 8001388:	2028      	movs	r0, #40	; 0x28
 800138a:	f001 fa6c 	bl	8002866 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800138e:	2028      	movs	r0, #40	; 0x28
 8001390:	f001 fa85 	bl	800289e <HAL_NVIC_EnableIRQ>

}
 8001394:	bf00      	nop
 8001396:	3728      	adds	r7, #40	; 0x28
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	40023800 	.word	0x40023800
 80013a0:	40020000 	.word	0x40020000
 80013a4:	40020800 	.word	0x40020800
 80013a8:	40020400 	.word	0x40020400

080013ac <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	4603      	mov	r3, r0
 80013b4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13){
 80013b6:	88fb      	ldrh	r3, [r7, #6]
 80013b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80013bc:	d103      	bne.n	80013c6 <HAL_GPIO_EXTI_Callback+0x1a>
		INA219_BitReset(&hi2c1, INA219_ADDR_1);
 80013be:	2180      	movs	r1, #128	; 0x80
 80013c0:	4803      	ldr	r0, [pc, #12]	; (80013d0 <HAL_GPIO_EXTI_Callback+0x24>)
 80013c2:	f7ff fd7b 	bl	8000ebc <INA219_BitReset>
		}
}
 80013c6:	bf00      	nop
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	20000200 	.word	0x20000200

080013d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013d8:	b672      	cpsid	i
}
 80013da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013dc:	e7fe      	b.n	80013dc <Error_Handler+0x8>
	...

080013e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013e6:	2300      	movs	r3, #0
 80013e8:	607b      	str	r3, [r7, #4]
 80013ea:	4b10      	ldr	r3, [pc, #64]	; (800142c <HAL_MspInit+0x4c>)
 80013ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ee:	4a0f      	ldr	r2, [pc, #60]	; (800142c <HAL_MspInit+0x4c>)
 80013f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013f4:	6453      	str	r3, [r2, #68]	; 0x44
 80013f6:	4b0d      	ldr	r3, [pc, #52]	; (800142c <HAL_MspInit+0x4c>)
 80013f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013fe:	607b      	str	r3, [r7, #4]
 8001400:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	603b      	str	r3, [r7, #0]
 8001406:	4b09      	ldr	r3, [pc, #36]	; (800142c <HAL_MspInit+0x4c>)
 8001408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140a:	4a08      	ldr	r2, [pc, #32]	; (800142c <HAL_MspInit+0x4c>)
 800140c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001410:	6413      	str	r3, [r2, #64]	; 0x40
 8001412:	4b06      	ldr	r3, [pc, #24]	; (800142c <HAL_MspInit+0x4c>)
 8001414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800141a:	603b      	str	r3, [r7, #0]
 800141c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800141e:	2007      	movs	r0, #7
 8001420:	f001 fa16 	bl	8002850 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001424:	bf00      	nop
 8001426:	3708      	adds	r7, #8
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	40023800 	.word	0x40023800

08001430 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b08a      	sub	sp, #40	; 0x28
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001438:	f107 0314 	add.w	r3, r7, #20
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	605a      	str	r2, [r3, #4]
 8001442:	609a      	str	r2, [r3, #8]
 8001444:	60da      	str	r2, [r3, #12]
 8001446:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a21      	ldr	r2, [pc, #132]	; (80014d4 <HAL_I2C_MspInit+0xa4>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d13c      	bne.n	80014cc <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	613b      	str	r3, [r7, #16]
 8001456:	4b20      	ldr	r3, [pc, #128]	; (80014d8 <HAL_I2C_MspInit+0xa8>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	4a1f      	ldr	r2, [pc, #124]	; (80014d8 <HAL_I2C_MspInit+0xa8>)
 800145c:	f043 0302 	orr.w	r3, r3, #2
 8001460:	6313      	str	r3, [r2, #48]	; 0x30
 8001462:	4b1d      	ldr	r3, [pc, #116]	; (80014d8 <HAL_I2C_MspInit+0xa8>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	f003 0302 	and.w	r3, r3, #2
 800146a:	613b      	str	r3, [r7, #16]
 800146c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800146e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001472:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001474:	2312      	movs	r3, #18
 8001476:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001478:	2300      	movs	r3, #0
 800147a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800147c:	2303      	movs	r3, #3
 800147e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001480:	2304      	movs	r3, #4
 8001482:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001484:	f107 0314 	add.w	r3, r7, #20
 8001488:	4619      	mov	r1, r3
 800148a:	4814      	ldr	r0, [pc, #80]	; (80014dc <HAL_I2C_MspInit+0xac>)
 800148c:	f001 fa52 	bl	8002934 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001490:	2300      	movs	r3, #0
 8001492:	60fb      	str	r3, [r7, #12]
 8001494:	4b10      	ldr	r3, [pc, #64]	; (80014d8 <HAL_I2C_MspInit+0xa8>)
 8001496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001498:	4a0f      	ldr	r2, [pc, #60]	; (80014d8 <HAL_I2C_MspInit+0xa8>)
 800149a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800149e:	6413      	str	r3, [r2, #64]	; 0x40
 80014a0:	4b0d      	ldr	r3, [pc, #52]	; (80014d8 <HAL_I2C_MspInit+0xa8>)
 80014a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014a8:	60fb      	str	r3, [r7, #12]
 80014aa:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80014ac:	2200      	movs	r2, #0
 80014ae:	2100      	movs	r1, #0
 80014b0:	201f      	movs	r0, #31
 80014b2:	f001 f9d8 	bl	8002866 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80014b6:	201f      	movs	r0, #31
 80014b8:	f001 f9f1 	bl	800289e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80014bc:	2200      	movs	r2, #0
 80014be:	2100      	movs	r1, #0
 80014c0:	2020      	movs	r0, #32
 80014c2:	f001 f9d0 	bl	8002866 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80014c6:	2020      	movs	r0, #32
 80014c8:	f001 f9e9 	bl	800289e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80014cc:	bf00      	nop
 80014ce:	3728      	adds	r7, #40	; 0x28
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	40005400 	.word	0x40005400
 80014d8:	40023800 	.word	0x40023800
 80014dc:	40020400 	.word	0x40020400

080014e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b08a      	sub	sp, #40	; 0x28
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e8:	f107 0314 	add.w	r3, r7, #20
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	605a      	str	r2, [r3, #4]
 80014f2:	609a      	str	r2, [r3, #8]
 80014f4:	60da      	str	r2, [r3, #12]
 80014f6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a28      	ldr	r2, [pc, #160]	; (80015a0 <HAL_SPI_MspInit+0xc0>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d14a      	bne.n	8001598 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	613b      	str	r3, [r7, #16]
 8001506:	4b27      	ldr	r3, [pc, #156]	; (80015a4 <HAL_SPI_MspInit+0xc4>)
 8001508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150a:	4a26      	ldr	r2, [pc, #152]	; (80015a4 <HAL_SPI_MspInit+0xc4>)
 800150c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001510:	6413      	str	r3, [r2, #64]	; 0x40
 8001512:	4b24      	ldr	r3, [pc, #144]	; (80015a4 <HAL_SPI_MspInit+0xc4>)
 8001514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001516:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800151a:	613b      	str	r3, [r7, #16]
 800151c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	60fb      	str	r3, [r7, #12]
 8001522:	4b20      	ldr	r3, [pc, #128]	; (80015a4 <HAL_SPI_MspInit+0xc4>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001526:	4a1f      	ldr	r2, [pc, #124]	; (80015a4 <HAL_SPI_MspInit+0xc4>)
 8001528:	f043 0304 	orr.w	r3, r3, #4
 800152c:	6313      	str	r3, [r2, #48]	; 0x30
 800152e:	4b1d      	ldr	r3, [pc, #116]	; (80015a4 <HAL_SPI_MspInit+0xc4>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001532:	f003 0304 	and.w	r3, r3, #4
 8001536:	60fb      	str	r3, [r7, #12]
 8001538:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	60bb      	str	r3, [r7, #8]
 800153e:	4b19      	ldr	r3, [pc, #100]	; (80015a4 <HAL_SPI_MspInit+0xc4>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	4a18      	ldr	r2, [pc, #96]	; (80015a4 <HAL_SPI_MspInit+0xc4>)
 8001544:	f043 0302 	orr.w	r3, r3, #2
 8001548:	6313      	str	r3, [r2, #48]	; 0x30
 800154a:	4b16      	ldr	r3, [pc, #88]	; (80015a4 <HAL_SPI_MspInit+0xc4>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	f003 0302 	and.w	r3, r3, #2
 8001552:	60bb      	str	r3, [r7, #8]
 8001554:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001556:	230c      	movs	r3, #12
 8001558:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155a:	2302      	movs	r3, #2
 800155c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155e:	2300      	movs	r3, #0
 8001560:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001562:	2303      	movs	r3, #3
 8001564:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001566:	2305      	movs	r3, #5
 8001568:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800156a:	f107 0314 	add.w	r3, r7, #20
 800156e:	4619      	mov	r1, r3
 8001570:	480d      	ldr	r0, [pc, #52]	; (80015a8 <HAL_SPI_MspInit+0xc8>)
 8001572:	f001 f9df 	bl	8002934 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001576:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800157a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157c:	2302      	movs	r3, #2
 800157e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001580:	2300      	movs	r3, #0
 8001582:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001584:	2303      	movs	r3, #3
 8001586:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001588:	2305      	movs	r3, #5
 800158a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800158c:	f107 0314 	add.w	r3, r7, #20
 8001590:	4619      	mov	r1, r3
 8001592:	4806      	ldr	r0, [pc, #24]	; (80015ac <HAL_SPI_MspInit+0xcc>)
 8001594:	f001 f9ce 	bl	8002934 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001598:	bf00      	nop
 800159a:	3728      	adds	r7, #40	; 0x28
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	40003800 	.word	0x40003800
 80015a4:	40023800 	.word	0x40023800
 80015a8:	40020800 	.word	0x40020800
 80015ac:	40020400 	.word	0x40020400

080015b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b08a      	sub	sp, #40	; 0x28
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b8:	f107 0314 	add.w	r3, r7, #20
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	605a      	str	r2, [r3, #4]
 80015c2:	609a      	str	r2, [r3, #8]
 80015c4:	60da      	str	r2, [r3, #12]
 80015c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a19      	ldr	r2, [pc, #100]	; (8001634 <HAL_UART_MspInit+0x84>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d12b      	bne.n	800162a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	613b      	str	r3, [r7, #16]
 80015d6:	4b18      	ldr	r3, [pc, #96]	; (8001638 <HAL_UART_MspInit+0x88>)
 80015d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015da:	4a17      	ldr	r2, [pc, #92]	; (8001638 <HAL_UART_MspInit+0x88>)
 80015dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015e0:	6413      	str	r3, [r2, #64]	; 0x40
 80015e2:	4b15      	ldr	r3, [pc, #84]	; (8001638 <HAL_UART_MspInit+0x88>)
 80015e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ea:	613b      	str	r3, [r7, #16]
 80015ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ee:	2300      	movs	r3, #0
 80015f0:	60fb      	str	r3, [r7, #12]
 80015f2:	4b11      	ldr	r3, [pc, #68]	; (8001638 <HAL_UART_MspInit+0x88>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	4a10      	ldr	r2, [pc, #64]	; (8001638 <HAL_UART_MspInit+0x88>)
 80015f8:	f043 0301 	orr.w	r3, r3, #1
 80015fc:	6313      	str	r3, [r2, #48]	; 0x30
 80015fe:	4b0e      	ldr	r3, [pc, #56]	; (8001638 <HAL_UART_MspInit+0x88>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	f003 0301 	and.w	r3, r3, #1
 8001606:	60fb      	str	r3, [r7, #12]
 8001608:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800160a:	230c      	movs	r3, #12
 800160c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800160e:	2302      	movs	r3, #2
 8001610:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001612:	2300      	movs	r3, #0
 8001614:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001616:	2303      	movs	r3, #3
 8001618:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800161a:	2307      	movs	r3, #7
 800161c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800161e:	f107 0314 	add.w	r3, r7, #20
 8001622:	4619      	mov	r1, r3
 8001624:	4805      	ldr	r0, [pc, #20]	; (800163c <HAL_UART_MspInit+0x8c>)
 8001626:	f001 f985 	bl	8002934 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800162a:	bf00      	nop
 800162c:	3728      	adds	r7, #40	; 0x28
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	40004400 	.word	0x40004400
 8001638:	40023800 	.word	0x40023800
 800163c:	40020000 	.word	0x40020000

08001640 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001644:	e7fe      	b.n	8001644 <NMI_Handler+0x4>

08001646 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001646:	b480      	push	{r7}
 8001648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800164a:	e7fe      	b.n	800164a <HardFault_Handler+0x4>

0800164c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001650:	e7fe      	b.n	8001650 <MemManage_Handler+0x4>

08001652 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001652:	b480      	push	{r7}
 8001654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001656:	e7fe      	b.n	8001656 <BusFault_Handler+0x4>

08001658 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800165c:	e7fe      	b.n	800165c <UsageFault_Handler+0x4>

0800165e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800165e:	b480      	push	{r7}
 8001660:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001662:	bf00      	nop
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr

0800166c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001670:	bf00      	nop
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr

0800167a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800167a:	b480      	push	{r7}
 800167c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800167e:	bf00      	nop
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr

08001688 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800168c:	f000 ffcc 	bl	8002628 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001690:	bf00      	nop
 8001692:	bd80      	pop	{r7, pc}

08001694 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001698:	4802      	ldr	r0, [pc, #8]	; (80016a4 <I2C1_EV_IRQHandler+0x10>)
 800169a:	f001 fd59 	bl	8003150 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800169e:	bf00      	nop
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	20000200 	.word	0x20000200

080016a8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80016ac:	4802      	ldr	r0, [pc, #8]	; (80016b8 <I2C1_ER_IRQHandler+0x10>)
 80016ae:	f001 fec0 	bl	8003432 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80016b2:	bf00      	nop
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	20000200 	.word	0x20000200

080016bc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80016c0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80016c4:	f001 faee 	bl	8002ca4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80016c8:	bf00      	nop
 80016ca:	bd80      	pop	{r7, pc}

080016cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
	return 1;
 80016d0:	2301      	movs	r3, #1
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <_kill>:

int _kill(int pid, int sig)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80016e6:	f004 fd0d 	bl	8006104 <__errno>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2216      	movs	r2, #22
 80016ee:	601a      	str	r2, [r3, #0]
	return -1;
 80016f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3708      	adds	r7, #8
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}

080016fc <_exit>:

void _exit (int status)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001704:	f04f 31ff 	mov.w	r1, #4294967295
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f7ff ffe7 	bl	80016dc <_kill>
	while (1) {}		/* Make sure we hang here */
 800170e:	e7fe      	b.n	800170e <_exit+0x12>

08001710 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b086      	sub	sp, #24
 8001714:	af00      	add	r7, sp, #0
 8001716:	60f8      	str	r0, [r7, #12]
 8001718:	60b9      	str	r1, [r7, #8]
 800171a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800171c:	2300      	movs	r3, #0
 800171e:	617b      	str	r3, [r7, #20]
 8001720:	e00a      	b.n	8001738 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001722:	f3af 8000 	nop.w
 8001726:	4601      	mov	r1, r0
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	1c5a      	adds	r2, r3, #1
 800172c:	60ba      	str	r2, [r7, #8]
 800172e:	b2ca      	uxtb	r2, r1
 8001730:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	3301      	adds	r3, #1
 8001736:	617b      	str	r3, [r7, #20]
 8001738:	697a      	ldr	r2, [r7, #20]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	429a      	cmp	r2, r3
 800173e:	dbf0      	blt.n	8001722 <_read+0x12>
	}

return len;
 8001740:	687b      	ldr	r3, [r7, #4]
}
 8001742:	4618      	mov	r0, r3
 8001744:	3718      	adds	r7, #24
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}

0800174a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800174a:	b580      	push	{r7, lr}
 800174c:	b086      	sub	sp, #24
 800174e:	af00      	add	r7, sp, #0
 8001750:	60f8      	str	r0, [r7, #12]
 8001752:	60b9      	str	r1, [r7, #8]
 8001754:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001756:	2300      	movs	r3, #0
 8001758:	617b      	str	r3, [r7, #20]
 800175a:	e009      	b.n	8001770 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	1c5a      	adds	r2, r3, #1
 8001760:	60ba      	str	r2, [r7, #8]
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	4618      	mov	r0, r3
 8001766:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	3301      	adds	r3, #1
 800176e:	617b      	str	r3, [r7, #20]
 8001770:	697a      	ldr	r2, [r7, #20]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	429a      	cmp	r2, r3
 8001776:	dbf1      	blt.n	800175c <_write+0x12>
	}
	return len;
 8001778:	687b      	ldr	r3, [r7, #4]
}
 800177a:	4618      	mov	r0, r3
 800177c:	3718      	adds	r7, #24
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <_close>:

int _close(int file)
{
 8001782:	b480      	push	{r7}
 8001784:	b083      	sub	sp, #12
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]
	return -1;
 800178a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800178e:	4618      	mov	r0, r3
 8001790:	370c      	adds	r7, #12
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr

0800179a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800179a:	b480      	push	{r7}
 800179c:	b083      	sub	sp, #12
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6078      	str	r0, [r7, #4]
 80017a2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017aa:	605a      	str	r2, [r3, #4]
	return 0;
 80017ac:	2300      	movs	r3, #0
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	370c      	adds	r7, #12
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr

080017ba <_isatty>:

int _isatty(int file)
{
 80017ba:	b480      	push	{r7}
 80017bc:	b083      	sub	sp, #12
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
	return 1;
 80017c2:	2301      	movs	r3, #1
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b085      	sub	sp, #20
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	60f8      	str	r0, [r7, #12]
 80017d8:	60b9      	str	r1, [r7, #8]
 80017da:	607a      	str	r2, [r7, #4]
	return 0;
 80017dc:	2300      	movs	r3, #0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3714      	adds	r7, #20
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
	...

080017ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b086      	sub	sp, #24
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017f4:	4a14      	ldr	r2, [pc, #80]	; (8001848 <_sbrk+0x5c>)
 80017f6:	4b15      	ldr	r3, [pc, #84]	; (800184c <_sbrk+0x60>)
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001800:	4b13      	ldr	r3, [pc, #76]	; (8001850 <_sbrk+0x64>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d102      	bne.n	800180e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001808:	4b11      	ldr	r3, [pc, #68]	; (8001850 <_sbrk+0x64>)
 800180a:	4a12      	ldr	r2, [pc, #72]	; (8001854 <_sbrk+0x68>)
 800180c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800180e:	4b10      	ldr	r3, [pc, #64]	; (8001850 <_sbrk+0x64>)
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4413      	add	r3, r2
 8001816:	693a      	ldr	r2, [r7, #16]
 8001818:	429a      	cmp	r2, r3
 800181a:	d207      	bcs.n	800182c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800181c:	f004 fc72 	bl	8006104 <__errno>
 8001820:	4603      	mov	r3, r0
 8001822:	220c      	movs	r2, #12
 8001824:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001826:	f04f 33ff 	mov.w	r3, #4294967295
 800182a:	e009      	b.n	8001840 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800182c:	4b08      	ldr	r3, [pc, #32]	; (8001850 <_sbrk+0x64>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001832:	4b07      	ldr	r3, [pc, #28]	; (8001850 <_sbrk+0x64>)
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4413      	add	r3, r2
 800183a:	4a05      	ldr	r2, [pc, #20]	; (8001850 <_sbrk+0x64>)
 800183c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800183e:	68fb      	ldr	r3, [r7, #12]
}
 8001840:	4618      	mov	r0, r3
 8001842:	3718      	adds	r7, #24
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	20020000 	.word	0x20020000
 800184c:	00000400 	.word	0x00000400
 8001850:	200002fc 	.word	0x200002fc
 8001854:	20000318 	.word	0x20000318

08001858 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800185c:	4b06      	ldr	r3, [pc, #24]	; (8001878 <SystemInit+0x20>)
 800185e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001862:	4a05      	ldr	r2, [pc, #20]	; (8001878 <SystemInit+0x20>)
 8001864:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001868:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800186c:	bf00      	nop
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	e000ed00 	.word	0xe000ed00

0800187c <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  LCD_IO_Bl_OnOff(1);
 8001880:	2001      	movs	r0, #1
 8001882:	f000 fd3e 	bl	8002302 <LCD_IO_Bl_OnOff>
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_SLPOUT);    // Exit Sleep
 8001886:	2011      	movs	r0, #17
 8001888:	f000 fdc2 	bl	8002410 <LCD_IO_WriteCmd8>
  ILI9341_LCDMUTEX_POP();
}
 800188c:	bf00      	nop
 800188e:	bd80      	pop	{r7, pc}

08001890 <ili9341_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  return ILI9341_SIZE_X;
 8001894:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8001898:	4618      	mov	r0, r3
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr

080018a2 <ili9341_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 80018a2:	b480      	push	{r7}
 80018a4:	af00      	add	r7, sp, #0
  return ILI9341_SIZE_Y;
 80018a6:	23f0      	movs	r3, #240	; 0xf0
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
	...

080018b4 <ili9341_Init>:
/* SPI or paralell mode */
#if ILI9341_INTERFACE_MODE == 1

//-----------------------------------------------------------------------------
void ili9341_Init(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af02      	add	r7, sp, #8
  if((Is_ili9341_Initialized & ILI9341_LCD_INITIALIZED) == 0)
 80018ba:	4b52      	ldr	r3, [pc, #328]	; (8001a04 <ili9341_Init+0x150>)
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	f003 0301 	and.w	r3, r3, #1
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d115      	bne.n	80018f2 <ili9341_Init+0x3e>
  {
    Is_ili9341_Initialized |= ILI9341_LCD_INITIALIZED;
 80018c6:	4b4f      	ldr	r3, [pc, #316]	; (8001a04 <ili9341_Init+0x150>)
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	f043 0301 	orr.w	r3, r3, #1
 80018ce:	b2da      	uxtb	r2, r3
 80018d0:	4b4c      	ldr	r3, [pc, #304]	; (8001a04 <ili9341_Init+0x150>)
 80018d2:	701a      	strb	r2, [r3, #0]
    if((Is_ili9341_Initialized & ILI9341_IO_INITIALIZED) == 0)
 80018d4:	4b4b      	ldr	r3, [pc, #300]	; (8001a04 <ili9341_Init+0x150>)
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	f003 0302 	and.w	r3, r3, #2
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d101      	bne.n	80018e4 <ili9341_Init+0x30>
      LCD_IO_Init();
 80018e0:	f000 fd1a 	bl	8002318 <LCD_IO_Init>
    Is_ili9341_Initialized |= ILI9341_IO_INITIALIZED;
 80018e4:	4b47      	ldr	r3, [pc, #284]	; (8001a04 <ili9341_Init+0x150>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	f043 0302 	orr.w	r3, r3, #2
 80018ec:	b2da      	uxtb	r2, r3
 80018ee:	4b45      	ldr	r3, [pc, #276]	; (8001a04 <ili9341_Init+0x150>)
 80018f0:	701a      	strb	r2, [r3, #0]
  }

  LCD_Delay(10);
 80018f2:	200a      	movs	r0, #10
 80018f4:	f000 fcfa 	bl	80022ec <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9341_SWRESET);
 80018f8:	2001      	movs	r0, #1
 80018fa:	f000 fd89 	bl	8002410 <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 80018fe:	200a      	movs	r0, #10
 8001900:	f000 fcf4 	bl	80022ec <LCD_Delay>

  LCD_IO_WriteCmd8MultipleData8(0xEF, (uint8_t *)"\x03\x80\x02", 3);
 8001904:	2203      	movs	r2, #3
 8001906:	4940      	ldr	r1, [pc, #256]	; (8001a08 <ili9341_Init+0x154>)
 8001908:	20ef      	movs	r0, #239	; 0xef
 800190a:	f000 fdef 	bl	80024ec <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xCF, (uint8_t *)"\x00\xC1\x30", 3);
 800190e:	2203      	movs	r2, #3
 8001910:	493e      	ldr	r1, [pc, #248]	; (8001a0c <ili9341_Init+0x158>)
 8001912:	20cf      	movs	r0, #207	; 0xcf
 8001914:	f000 fdea 	bl	80024ec <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xED, (uint8_t *)"\x64\x03\x12\x81", 4);
 8001918:	2204      	movs	r2, #4
 800191a:	493d      	ldr	r1, [pc, #244]	; (8001a10 <ili9341_Init+0x15c>)
 800191c:	20ed      	movs	r0, #237	; 0xed
 800191e:	f000 fde5 	bl	80024ec <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xE8, (uint8_t *)"\x85\x00\x78", 3);
 8001922:	2203      	movs	r2, #3
 8001924:	493b      	ldr	r1, [pc, #236]	; (8001a14 <ili9341_Init+0x160>)
 8001926:	20e8      	movs	r0, #232	; 0xe8
 8001928:	f000 fde0 	bl	80024ec <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xCB, (uint8_t *)"\x39\x2C\x00\x34\x02", 5);
 800192c:	2205      	movs	r2, #5
 800192e:	493a      	ldr	r1, [pc, #232]	; (8001a18 <ili9341_Init+0x164>)
 8001930:	20cb      	movs	r0, #203	; 0xcb
 8001932:	f000 fddb 	bl	80024ec <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xF7, (uint8_t *)"\x20", 1);
 8001936:	2201      	movs	r2, #1
 8001938:	4938      	ldr	r1, [pc, #224]	; (8001a1c <ili9341_Init+0x168>)
 800193a:	20f7      	movs	r0, #247	; 0xf7
 800193c:	f000 fdd6 	bl	80024ec <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xEA, (uint8_t *)"\x00\x00", 2);
 8001940:	2202      	movs	r2, #2
 8001942:	4937      	ldr	r1, [pc, #220]	; (8001a20 <ili9341_Init+0x16c>)
 8001944:	20ea      	movs	r0, #234	; 0xea
 8001946:	f000 fdd1 	bl	80024ec <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 1 (Vreg1out, Verg2out)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PWCTR1, (uint8_t *)"\x23", 1);
 800194a:	2201      	movs	r2, #1
 800194c:	4935      	ldr	r1, [pc, #212]	; (8001a24 <ili9341_Init+0x170>)
 800194e:	20c0      	movs	r0, #192	; 0xc0
 8001950:	f000 fdcc 	bl	80024ec <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 2 (VGH,VGL)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PWCTR2, (uint8_t *)"\x10", 1);
 8001954:	2201      	movs	r2, #1
 8001956:	4934      	ldr	r1, [pc, #208]	; (8001a28 <ili9341_Init+0x174>)
 8001958:	20c1      	movs	r0, #193	; 0xc1
 800195a:	f000 fdc7 	bl	80024ec <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 3 (Vcom)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_VMCTR1, (uint8_t *)"\x3E\x28", 2);
 800195e:	2202      	movs	r2, #2
 8001960:	4932      	ldr	r1, [pc, #200]	; (8001a2c <ili9341_Init+0x178>)
 8001962:	20c5      	movs	r0, #197	; 0xc5
 8001964:	f000 fdc2 	bl	80024ec <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 3 (Vcom)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_VMCTR2, (uint8_t *)"\x86", 1);
 8001968:	2201      	movs	r2, #1
 800196a:	4931      	ldr	r1, [pc, #196]	; (8001a30 <ili9341_Init+0x17c>)
 800196c:	20c7      	movs	r0, #199	; 0xc7
 800196e:	f000 fdbd 	bl	80024ec <LCD_IO_WriteCmd8MultipleData8>

  // Vertical scroll zero
  LCD_IO_WriteCmd8MultipleData8(ILI9341_VSCRSADD, (uint8_t *)"\x00", 1);
 8001972:	2201      	movs	r2, #1
 8001974:	492f      	ldr	r1, [pc, #188]	; (8001a34 <ili9341_Init+0x180>)
 8001976:	2037      	movs	r0, #55	; 0x37
 8001978:	f000 fdb8 	bl	80024ec <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PIXFMT, (uint8_t *)"\x55", 1);
 800197c:	2201      	movs	r2, #1
 800197e:	492e      	ldr	r1, [pc, #184]	; (8001a38 <ili9341_Init+0x184>)
 8001980:	203a      	movs	r0, #58	; 0x3a
 8001982:	f000 fdb3 	bl	80024ec <LCD_IO_WriteCmd8MultipleData8>

  // LCD_IO_WriteCmd8MultipleData8(0xF6, (uint8_t *)"\x01\x00\x06", 3);

  LCD_IO_WriteCmd8MultipleData8(ILI9341_FRMCTR1, (uint8_t *)"\x00\x18", 2);
 8001986:	2202      	movs	r2, #2
 8001988:	492c      	ldr	r1, [pc, #176]	; (8001a3c <ili9341_Init+0x188>)
 800198a:	20b1      	movs	r0, #177	; 0xb1
 800198c:	f000 fdae 	bl	80024ec <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_DFUNCTR, (uint8_t *)"\x08\x82\x27", 3);  // Display Function Control
 8001990:	2203      	movs	r2, #3
 8001992:	492b      	ldr	r1, [pc, #172]	; (8001a40 <ili9341_Init+0x18c>)
 8001994:	20b6      	movs	r0, #182	; 0xb6
 8001996:	f000 fda9 	bl	80024ec <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xF2, (uint8_t *)"\x00", 1);            // 3Gamma Function Disable
 800199a:	2201      	movs	r2, #1
 800199c:	4925      	ldr	r1, [pc, #148]	; (8001a34 <ili9341_Init+0x180>)
 800199e:	20f2      	movs	r0, #242	; 0xf2
 80019a0:	f000 fda4 	bl	80024ec <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_GAMMASET, (uint8_t *)"\x01", 1);// Gamma curve selected
 80019a4:	2201      	movs	r2, #1
 80019a6:	4927      	ldr	r1, [pc, #156]	; (8001a44 <ili9341_Init+0x190>)
 80019a8:	2026      	movs	r0, #38	; 0x26
 80019aa:	f000 fd9f 	bl	80024ec <LCD_IO_WriteCmd8MultipleData8>

  // positive gamma control
  LCD_IO_WriteCmd8MultipleData8(ILI9341_GMCTRP1, (uint8_t *)"\x0F\x31\x2B\x0C\x0E\x08\x4E\xF1\x37\x07\x10\x03\x0E\x09\x00", 15);
 80019ae:	220f      	movs	r2, #15
 80019b0:	4925      	ldr	r1, [pc, #148]	; (8001a48 <ili9341_Init+0x194>)
 80019b2:	20e0      	movs	r0, #224	; 0xe0
 80019b4:	f000 fd9a 	bl	80024ec <LCD_IO_WriteCmd8MultipleData8>

  // negative gamma control
  LCD_IO_WriteCmd8MultipleData8(ILI9341_GMCTRN1, (uint8_t *)"\x00\x0E\x14\x03\x11\x07\x31\xC1\x48\x08\x0F\x0C\x31\x36\x0F", 15);
 80019b8:	220f      	movs	r2, #15
 80019ba:	4924      	ldr	r1, [pc, #144]	; (8001a4c <ili9341_Init+0x198>)
 80019bc:	20e1      	movs	r0, #225	; 0xe1
 80019be:	f000 fd95 	bl	80024ec <LCD_IO_WriteCmd8MultipleData8>

  LCD_IO_WriteCmd8(ILI9341_MADCTL); LCD_IO_WriteData8(ILI9341_MAD_DATA_RIGHT_THEN_DOWN);
 80019c2:	2036      	movs	r0, #54	; 0x36
 80019c4:	f000 fd24 	bl	8002410 <LCD_IO_WriteCmd8>
 80019c8:	20e8      	movs	r0, #232	; 0xe8
 80019ca:	f000 fd3f 	bl	800244c <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_SLPOUT);    // Exit Sleep
 80019ce:	2011      	movs	r0, #17
 80019d0:	f000 fd1e 	bl	8002410 <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 80019d4:	200a      	movs	r0, #10
 80019d6:	f000 fc89 	bl	80022ec <LCD_Delay>

  #if ILI9341_INITCLEAR == 1
  ili9341_FillRect(0, 0, ILI9341_SIZE_X, ILI9341_SIZE_Y, 0x0000);
 80019da:	2300      	movs	r3, #0
 80019dc:	9300      	str	r3, [sp, #0]
 80019de:	23f0      	movs	r3, #240	; 0xf0
 80019e0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80019e4:	2100      	movs	r1, #0
 80019e6:	2000      	movs	r0, #0
 80019e8:	f000 f87c 	bl	8001ae4 <ili9341_FillRect>
  LCD_Delay(10);
 80019ec:	200a      	movs	r0, #10
 80019ee:	f000 fc7d 	bl	80022ec <LCD_Delay>
  #endif
  
  LCD_IO_WriteCmd8(ILI9341_DISPON);    // Display on
 80019f2:	2029      	movs	r0, #41	; 0x29
 80019f4:	f000 fd0c 	bl	8002410 <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 80019f8:	200a      	movs	r0, #10
 80019fa:	f000 fc77 	bl	80022ec <LCD_Delay>
}
 80019fe:	bf00      	nop
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	20000300 	.word	0x20000300
 8001a08:	08008cec 	.word	0x08008cec
 8001a0c:	08008cf0 	.word	0x08008cf0
 8001a10:	08008cf4 	.word	0x08008cf4
 8001a14:	08008cfc 	.word	0x08008cfc
 8001a18:	08008d00 	.word	0x08008d00
 8001a1c:	08008d08 	.word	0x08008d08
 8001a20:	08008d0c 	.word	0x08008d0c
 8001a24:	08008d10 	.word	0x08008d10
 8001a28:	08008d14 	.word	0x08008d14
 8001a2c:	08008d18 	.word	0x08008d18
 8001a30:	08008d1c 	.word	0x08008d1c
 8001a34:	08008d20 	.word	0x08008d20
 8001a38:	08008d24 	.word	0x08008d24
 8001a3c:	08008d28 	.word	0x08008d28
 8001a40:	08008d2c 	.word	0x08008d2c
 8001a44:	08008d30 	.word	0x08008d30
 8001a48:	08008d34 	.word	0x08008d34
 8001a4c:	08008d44 	.word	0x08008d44

08001a50 <ili9341_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color
  * @retval None
  */
void ili9341_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	4603      	mov	r3, r0
 8001a58:	80fb      	strh	r3, [r7, #6]
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	80bb      	strh	r3, [r7, #4]
 8001a5e:	4613      	mov	r3, r2
 8001a60:	807b      	strh	r3, [r7, #2]
  ILI9341_LCDMUTEX_PUSH();
  ILI9341_SETCURSOR(Xpos, Ypos);
 8001a62:	202a      	movs	r0, #42	; 0x2a
 8001a64:	f000 fcd4 	bl	8002410 <LCD_IO_WriteCmd8>
 8001a68:	88fb      	ldrh	r3, [r7, #6]
 8001a6a:	0a1b      	lsrs	r3, r3, #8
 8001a6c:	b29b      	uxth	r3, r3
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	4618      	mov	r0, r3
 8001a72:	f000 fceb 	bl	800244c <LCD_IO_WriteData8>
 8001a76:	88fb      	ldrh	r3, [r7, #6]
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f000 fce6 	bl	800244c <LCD_IO_WriteData8>
 8001a80:	88fb      	ldrh	r3, [r7, #6]
 8001a82:	0a1b      	lsrs	r3, r3, #8
 8001a84:	b29b      	uxth	r3, r3
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f000 fcdf 	bl	800244c <LCD_IO_WriteData8>
 8001a8e:	88fb      	ldrh	r3, [r7, #6]
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	4618      	mov	r0, r3
 8001a94:	f000 fcda 	bl	800244c <LCD_IO_WriteData8>
 8001a98:	202b      	movs	r0, #43	; 0x2b
 8001a9a:	f000 fcb9 	bl	8002410 <LCD_IO_WriteCmd8>
 8001a9e:	88bb      	ldrh	r3, [r7, #4]
 8001aa0:	0a1b      	lsrs	r3, r3, #8
 8001aa2:	b29b      	uxth	r3, r3
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f000 fcd0 	bl	800244c <LCD_IO_WriteData8>
 8001aac:	88bb      	ldrh	r3, [r7, #4]
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f000 fccb 	bl	800244c <LCD_IO_WriteData8>
 8001ab6:	88bb      	ldrh	r3, [r7, #4]
 8001ab8:	0a1b      	lsrs	r3, r3, #8
 8001aba:	b29b      	uxth	r3, r3
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f000 fcc4 	bl	800244c <LCD_IO_WriteData8>
 8001ac4:	88bb      	ldrh	r3, [r7, #4]
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f000 fcbf 	bl	800244c <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_RAMWR); LCD_IO_WriteData16(RGBCode);
 8001ace:	202c      	movs	r0, #44	; 0x2c
 8001ad0:	f000 fc9e 	bl	8002410 <LCD_IO_WriteCmd8>
 8001ad4:	887b      	ldrh	r3, [r7, #2]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f000 fcce 	bl	8002478 <LCD_IO_WriteData16>
  ILI9341_LCDMUTEX_POP();
}
 8001adc:	bf00      	nop
 8001ade:	3708      	adds	r7, #8
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <ili9341_FillRect>:
  * @param  Ysize:    specifies the Y size
  * @param  RGBCode:  specifies the RGB color
  * @retval None
  */
void ili9341_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t RGBCode)
{
 8001ae4:	b590      	push	{r4, r7, lr}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	4604      	mov	r4, r0
 8001aec:	4608      	mov	r0, r1
 8001aee:	4611      	mov	r1, r2
 8001af0:	461a      	mov	r2, r3
 8001af2:	4623      	mov	r3, r4
 8001af4:	80fb      	strh	r3, [r7, #6]
 8001af6:	4603      	mov	r3, r0
 8001af8:	80bb      	strh	r3, [r7, #4]
 8001afa:	460b      	mov	r3, r1
 8001afc:	807b      	strh	r3, [r7, #2]
 8001afe:	4613      	mov	r3, r2
 8001b00:	803b      	strh	r3, [r7, #0]
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Xsize - 1);
 8001b02:	202a      	movs	r0, #42	; 0x2a
 8001b04:	f000 fc84 	bl	8002410 <LCD_IO_WriteCmd8>
 8001b08:	88fb      	ldrh	r3, [r7, #6]
 8001b0a:	0a1b      	lsrs	r3, r3, #8
 8001b0c:	b29b      	uxth	r3, r3
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	4618      	mov	r0, r3
 8001b12:	f000 fc9b 	bl	800244c <LCD_IO_WriteData8>
 8001b16:	88fb      	ldrh	r3, [r7, #6]
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f000 fc96 	bl	800244c <LCD_IO_WriteData8>
 8001b20:	88fa      	ldrh	r2, [r7, #6]
 8001b22:	887b      	ldrh	r3, [r7, #2]
 8001b24:	4413      	add	r3, r2
 8001b26:	3b01      	subs	r3, #1
 8001b28:	121b      	asrs	r3, r3, #8
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f000 fc8d 	bl	800244c <LCD_IO_WriteData8>
 8001b32:	88fb      	ldrh	r3, [r7, #6]
 8001b34:	b2da      	uxtb	r2, r3
 8001b36:	887b      	ldrh	r3, [r7, #2]
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	4413      	add	r3, r2
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	3b01      	subs	r3, #1
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	4618      	mov	r0, r3
 8001b44:	f000 fc82 	bl	800244c <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Ysize - 1);
 8001b48:	202b      	movs	r0, #43	; 0x2b
 8001b4a:	f000 fc61 	bl	8002410 <LCD_IO_WriteCmd8>
 8001b4e:	88bb      	ldrh	r3, [r7, #4]
 8001b50:	0a1b      	lsrs	r3, r3, #8
 8001b52:	b29b      	uxth	r3, r3
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	4618      	mov	r0, r3
 8001b58:	f000 fc78 	bl	800244c <LCD_IO_WriteData8>
 8001b5c:	88bb      	ldrh	r3, [r7, #4]
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	4618      	mov	r0, r3
 8001b62:	f000 fc73 	bl	800244c <LCD_IO_WriteData8>
 8001b66:	88ba      	ldrh	r2, [r7, #4]
 8001b68:	883b      	ldrh	r3, [r7, #0]
 8001b6a:	4413      	add	r3, r2
 8001b6c:	3b01      	subs	r3, #1
 8001b6e:	121b      	asrs	r3, r3, #8
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	4618      	mov	r0, r3
 8001b74:	f000 fc6a 	bl	800244c <LCD_IO_WriteData8>
 8001b78:	88bb      	ldrh	r3, [r7, #4]
 8001b7a:	b2da      	uxtb	r2, r3
 8001b7c:	883b      	ldrh	r3, [r7, #0]
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	4413      	add	r3, r2
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	3b01      	subs	r3, #1
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f000 fc5f 	bl	800244c <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8DataFill16(ILI9341_RAMWR, RGBCode, Xsize * Ysize);
 8001b8e:	887b      	ldrh	r3, [r7, #2]
 8001b90:	883a      	ldrh	r2, [r7, #0]
 8001b92:	fb02 f303 	mul.w	r3, r2, r3
 8001b96:	461a      	mov	r2, r3
 8001b98:	8b3b      	ldrh	r3, [r7, #24]
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	202c      	movs	r0, #44	; 0x2c
 8001b9e:	f000 fc81 	bl	80024a4 <LCD_IO_WriteCmd8DataFill16>
  ILI9341_LCDMUTEX_POP();
}
 8001ba2:	bf00      	nop
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd90      	pop	{r4, r7, pc}

08001baa <ili9341_WriteChar>:
  * @param  fonto: font select (from font.h)
  * @param  RGB_Coder: Text Color
  * @param  RGB_bg: Char background Color
  * @retval None
  */
void ili9341_WriteChar(uint16_t Xpo, uint16_t Ypo, const char *chr,sFONT fonto, uint16_t RGB_Coder, uint16_t RGB_bg){
 8001baa:	b082      	sub	sp, #8
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b08a      	sub	sp, #40	; 0x28
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	603a      	str	r2, [r7, #0]
 8001bb4:	637b      	str	r3, [r7, #52]	; 0x34
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	80fb      	strh	r3, [r7, #6]
 8001bba:	460b      	mov	r3, r1
 8001bbc:	80bb      	strh	r3, [r7, #4]
	/*ex
	 * ili9341_WriteChar(140, 50, "E", Font24, cl_ORANGE, cl_BLACK);
	 * */
	//// stored font data
	uint32_t hop32 = 0;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t b8[4] = {0};
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	60fb      	str	r3, [r7, #12]
	 * c = i * rowbox -> jump to next column in next i rowloop
	 * k => jump to next row in that column
	 * */

	//// find num of bit rows per jump in fonts.c
	int rowbox = ceilf((float)(fonto.Width) / 8);
 8001bc6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001bc8:	ee07 3a90 	vmov	s15, r3
 8001bcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bd0:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8001bd4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001bd8:	eeb0 0a47 	vmov.f32	s0, s14
 8001bdc:	f006 ffdc 	bl	8008b98 <ceilf>
 8001be0:	eef0 7a40 	vmov.f32	s15, s0
 8001be4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001be8:	ee17 3a90 	vmov	r3, s15
 8001bec:	617b      	str	r3, [r7, #20]

	//// choose MSB check pos for each font size
	//// 0x80 , 0x8000 , 0x 800000
	uint32_t clif_msb = 0x80 << (8 * (rowbox - 1));
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	3b01      	subs	r3, #1
 8001bf2:	00db      	lsls	r3, r3, #3
 8001bf4:	2280      	movs	r2, #128	; 0x80
 8001bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfa:	613b      	str	r3, [r7, #16]

	//// -32 to offset sync ASCII Table start " " at 32
	//// double for loop as one char table
	for(int i = 0; i < fonto.Height; i++){
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	623b      	str	r3, [r7, #32]
 8001c00:	e060      	b.n	8001cc4 <ili9341_WriteChar+0x11a>
		hop32 = 0;
 8001c02:	2300      	movs	r3, #0
 8001c04:	627b      	str	r3, [r7, #36]	; 0x24
		for(int k = 0;k < rowbox;k++){
 8001c06:	2300      	movs	r3, #0
 8001c08:	61fb      	str	r3, [r7, #28]
 8001c0a:	e024      	b.n	8001c56 <ili9341_WriteChar+0xac>
			b8[k] = fonto.table[((int)(*chr - 32) * fonto.Height * rowbox) + (i * rowbox) + k];
 8001c0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c0e:	683a      	ldr	r2, [r7, #0]
 8001c10:	7812      	ldrb	r2, [r2, #0]
 8001c12:	3a20      	subs	r2, #32
 8001c14:	8f79      	ldrh	r1, [r7, #58]	; 0x3a
 8001c16:	fb01 f202 	mul.w	r2, r1, r2
 8001c1a:	6979      	ldr	r1, [r7, #20]
 8001c1c:	fb02 f101 	mul.w	r1, r2, r1
 8001c20:	6a3a      	ldr	r2, [r7, #32]
 8001c22:	6978      	ldr	r0, [r7, #20]
 8001c24:	fb00 f202 	mul.w	r2, r0, r2
 8001c28:	4411      	add	r1, r2
 8001c2a:	69fa      	ldr	r2, [r7, #28]
 8001c2c:	440a      	add	r2, r1
 8001c2e:	4413      	add	r3, r2
 8001c30:	7819      	ldrb	r1, [r3, #0]
 8001c32:	f107 020c 	add.w	r2, r7, #12
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	4413      	add	r3, r2
 8001c3a:	460a      	mov	r2, r1
 8001c3c:	701a      	strb	r2, [r3, #0]
			hop32 = (hop32 << 8) + b8[k];
 8001c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c40:	021b      	lsls	r3, r3, #8
 8001c42:	f107 010c 	add.w	r1, r7, #12
 8001c46:	69fa      	ldr	r2, [r7, #28]
 8001c48:	440a      	add	r2, r1
 8001c4a:	7812      	ldrb	r2, [r2, #0]
 8001c4c:	4413      	add	r3, r2
 8001c4e:	627b      	str	r3, [r7, #36]	; 0x24
		for(int k = 0;k < rowbox;k++){
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	3301      	adds	r3, #1
 8001c54:	61fb      	str	r3, [r7, #28]
 8001c56:	69fa      	ldr	r2, [r7, #28]
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	dbd6      	blt.n	8001c0c <ili9341_WriteChar+0x62>
		}

		for(int j = 0; j < fonto.Width; j++){
 8001c5e:	2300      	movs	r3, #0
 8001c60:	61bb      	str	r3, [r7, #24]
 8001c62:	e027      	b.n	8001cb4 <ili9341_WriteChar+0x10a>
			//// if valuein fonttable is 1
			if((hop32 << j) & clif_msb){ // buu32.b32
 8001c64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c66:	69bb      	ldr	r3, [r7, #24]
 8001c68:	409a      	lsls	r2, r3
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d00e      	beq.n	8001c90 <ili9341_WriteChar+0xe6>
				ili9341_WritePixel(Xpo + j, Ypo + i, RGB_Coder);
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	b29a      	uxth	r2, r3
 8001c76:	88fb      	ldrh	r3, [r7, #6]
 8001c78:	4413      	add	r3, r2
 8001c7a:	b298      	uxth	r0, r3
 8001c7c:	6a3b      	ldr	r3, [r7, #32]
 8001c7e:	b29a      	uxth	r2, r3
 8001c80:	88bb      	ldrh	r3, [r7, #4]
 8001c82:	4413      	add	r3, r2
 8001c84:	b29b      	uxth	r3, r3
 8001c86:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8001c88:	4619      	mov	r1, r3
 8001c8a:	f7ff fee1 	bl	8001a50 <ili9341_WritePixel>
 8001c8e:	e00e      	b.n	8001cae <ili9341_WriteChar+0x104>
			}
			//// for background write
			else{
				ili9341_WritePixel(Xpo + j, Ypo + i, RGB_bg);
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	b29a      	uxth	r2, r3
 8001c94:	88fb      	ldrh	r3, [r7, #6]
 8001c96:	4413      	add	r3, r2
 8001c98:	b298      	uxth	r0, r3
 8001c9a:	6a3b      	ldr	r3, [r7, #32]
 8001c9c:	b29a      	uxth	r2, r3
 8001c9e:	88bb      	ldrh	r3, [r7, #4]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	b29b      	uxth	r3, r3
 8001ca4:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8001ca8:	4619      	mov	r1, r3
 8001caa:	f7ff fed1 	bl	8001a50 <ili9341_WritePixel>
		for(int j = 0; j < fonto.Width; j++){
 8001cae:	69bb      	ldr	r3, [r7, #24]
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	61bb      	str	r3, [r7, #24]
 8001cb4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	69bb      	ldr	r3, [r7, #24]
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	dbd2      	blt.n	8001c64 <ili9341_WriteChar+0xba>
	for(int i = 0; i < fonto.Height; i++){
 8001cbe:	6a3b      	ldr	r3, [r7, #32]
 8001cc0:	3301      	adds	r3, #1
 8001cc2:	623b      	str	r3, [r7, #32]
 8001cc4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	6a3b      	ldr	r3, [r7, #32]
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	db99      	blt.n	8001c02 <ili9341_WriteChar+0x58>
			}

		}
	}
}
 8001cce:	bf00      	nop
 8001cd0:	bf00      	nop
 8001cd2:	3728      	adds	r7, #40	; 0x28
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001cda:	b002      	add	sp, #8
 8001cdc:	4770      	bx	lr

08001cde <ili9341_WriteString>:
  * @param  fonto: font select (from font.h)
  * @param  RGB_Coder: Text Color
  * @param  RGB_bg: Text background Color
  * @retval None
  */
void ili9341_WriteString(uint16_t Xpo, uint16_t Ypo,const char* strr,sFONT fonto, uint16_t RGB_Coder, uint16_t RGB_bg){
 8001cde:	b082      	sub	sp, #8
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b088      	sub	sp, #32
 8001ce4:	af04      	add	r7, sp, #16
 8001ce6:	603a      	str	r2, [r7, #0]
 8001ce8:	61fb      	str	r3, [r7, #28]
 8001cea:	4603      	mov	r3, r0
 8001cec:	80fb      	strh	r3, [r7, #6]
 8001cee:	460b      	mov	r3, r1
 8001cf0:	80bb      	strh	r3, [r7, #4]
	/*ex
	 * ili9341_WriteString(20, 300, "Helios xTerra", Font20, cl_WHITE, cl_BLACK);
	 * */
	uint16_t ili_heigh = ili9341_GetLcdPixelHeight();
 8001cf2:	f7ff fdd6 	bl	80018a2 <ili9341_GetLcdPixelHeight>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	81fb      	strh	r3, [r7, #14]
	uint16_t ili_width = ili9341_GetLcdPixelWidth();
 8001cfa:	f7ff fdc9 	bl	8001890 <ili9341_GetLcdPixelWidth>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	81bb      	strh	r3, [r7, #12]
	while(*strr){
 8001d02:	e02c      	b.n	8001d5e <ili9341_WriteString+0x80>
	//// Check screen overflow / new line
		if(Xpo + fonto.Width >= ili_width){
 8001d04:	88fb      	ldrh	r3, [r7, #6]
 8001d06:	8c3a      	ldrh	r2, [r7, #32]
 8001d08:	441a      	add	r2, r3
 8001d0a:	89bb      	ldrh	r3, [r7, #12]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	db13      	blt.n	8001d38 <ili9341_WriteString+0x5a>
			Xpo = 0;
 8001d10:	2300      	movs	r3, #0
 8001d12:	80fb      	strh	r3, [r7, #6]
			Ypo += fonto.Height;
 8001d14:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001d16:	88bb      	ldrh	r3, [r7, #4]
 8001d18:	4413      	add	r3, r2
 8001d1a:	80bb      	strh	r3, [r7, #4]

			if(Ypo + fonto.Height >= ili_heigh){
 8001d1c:	88bb      	ldrh	r3, [r7, #4]
 8001d1e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001d20:	441a      	add	r2, r3
 8001d22:	89fb      	ldrh	r3, [r7, #14]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	da1f      	bge.n	8001d68 <ili9341_WriteString+0x8a>
				break;
			}

			if(*strr == ' ') {
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	2b20      	cmp	r3, #32
 8001d2e:	d103      	bne.n	8001d38 <ili9341_WriteString+0x5a>
				// skip spaces in the beginning of the new line
				strr++;
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	3301      	adds	r3, #1
 8001d34:	603b      	str	r3, [r7, #0]
				continue;
 8001d36:	e012      	b.n	8001d5e <ili9341_WriteString+0x80>
			}
		}
		//ST7735_WriteChar(x, y, *str, font, color, bgcolor);
		ili9341_WriteChar(Xpo, Ypo, strr, fonto, RGB_Coder, RGB_bg);
 8001d38:	88b9      	ldrh	r1, [r7, #4]
 8001d3a:	88f8      	ldrh	r0, [r7, #6]
 8001d3c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001d3e:	9302      	str	r3, [sp, #8]
 8001d40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001d42:	9301      	str	r3, [sp, #4]
 8001d44:	6a3b      	ldr	r3, [r7, #32]
 8001d46:	9300      	str	r3, [sp, #0]
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	683a      	ldr	r2, [r7, #0]
 8001d4c:	f7ff ff2d 	bl	8001baa <ili9341_WriteChar>
		Xpo += fonto.Width;
 8001d50:	8c3a      	ldrh	r2, [r7, #32]
 8001d52:	88fb      	ldrh	r3, [r7, #6]
 8001d54:	4413      	add	r3, r2
 8001d56:	80fb      	strh	r3, [r7, #6]
		strr++;
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	603b      	str	r3, [r7, #0]
	while(*strr){
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d1ce      	bne.n	8001d04 <ili9341_WriteString+0x26>
	}
}
 8001d66:	e000      	b.n	8001d6a <ili9341_WriteString+0x8c>
				break;
 8001d68:	bf00      	nop
}
 8001d6a:	bf00      	nop
 8001d6c:	3710      	adds	r7, #16
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001d74:	b002      	add	sp, #8
 8001d76:	4770      	bx	lr

08001d78 <LcdWrite8>:

#define LCD_WRITE_CLK         GPIOX_ODR(LCD_SCK) = 0; LCD_WRITE_DELAY; GPIOX_ODR(LCD_SCK) = 1;
#define LCD_READ_CLK          GPIOX_ODR(LCD_SCK) = 1; GPIOX_ODR(LCD_SCK) = 0; LCD_READ_DELAY;

void LcdWrite8(uint8_t d8)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	4603      	mov	r3, r0
 8001d80:	71fb      	strb	r3, [r7, #7]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 7);
 8001d82:	1dfb      	adds	r3, r7, #7
 8001d84:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8001d88:	1dfb      	adds	r3, r7, #7
 8001d8a:	015b      	lsls	r3, r3, #5
 8001d8c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8001d90:	f023 031f 	bic.w	r3, r3, #31
 8001d94:	4313      	orrs	r3, r2
 8001d96:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8001d9a:	331c      	adds	r3, #28
 8001d9c:	4a5f      	ldr	r2, [pc, #380]	; (8001f1c <LcdWrite8+0x1a4>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8001da2:	4b5f      	ldr	r3, [pc, #380]	; (8001f20 <LcdWrite8+0x1a8>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]
 8001da8:	4b5d      	ldr	r3, [pc, #372]	; (8001f20 <LcdWrite8+0x1a8>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	601a      	str	r2, [r3, #0]
 8001dae:	4b5c      	ldr	r3, [pc, #368]	; (8001f20 <LcdWrite8+0x1a8>)
 8001db0:	2201      	movs	r2, #1
 8001db2:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 6);
 8001db4:	1dfb      	adds	r3, r7, #7
 8001db6:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8001dba:	1dfb      	adds	r3, r7, #7
 8001dbc:	015b      	lsls	r3, r3, #5
 8001dbe:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8001dc2:	f023 031f 	bic.w	r3, r3, #31
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8001dcc:	3318      	adds	r3, #24
 8001dce:	4a53      	ldr	r2, [pc, #332]	; (8001f1c <LcdWrite8+0x1a4>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8001dd4:	4b52      	ldr	r3, [pc, #328]	; (8001f20 <LcdWrite8+0x1a8>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	601a      	str	r2, [r3, #0]
 8001dda:	4b51      	ldr	r3, [pc, #324]	; (8001f20 <LcdWrite8+0x1a8>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]
 8001de0:	4b4f      	ldr	r3, [pc, #316]	; (8001f20 <LcdWrite8+0x1a8>)
 8001de2:	2201      	movs	r2, #1
 8001de4:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 5);
 8001de6:	1dfb      	adds	r3, r7, #7
 8001de8:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8001dec:	1dfb      	adds	r3, r7, #7
 8001dee:	015b      	lsls	r3, r3, #5
 8001df0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8001df4:	f023 031f 	bic.w	r3, r3, #31
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8001dfe:	3314      	adds	r3, #20
 8001e00:	4a46      	ldr	r2, [pc, #280]	; (8001f1c <LcdWrite8+0x1a4>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8001e06:	4b46      	ldr	r3, [pc, #280]	; (8001f20 <LcdWrite8+0x1a8>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	601a      	str	r2, [r3, #0]
 8001e0c:	4b44      	ldr	r3, [pc, #272]	; (8001f20 <LcdWrite8+0x1a8>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	601a      	str	r2, [r3, #0]
 8001e12:	4b43      	ldr	r3, [pc, #268]	; (8001f20 <LcdWrite8+0x1a8>)
 8001e14:	2201      	movs	r2, #1
 8001e16:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 4);
 8001e18:	1dfb      	adds	r3, r7, #7
 8001e1a:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8001e1e:	1dfb      	adds	r3, r7, #7
 8001e20:	015b      	lsls	r3, r3, #5
 8001e22:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8001e26:	f023 031f 	bic.w	r3, r3, #31
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8001e30:	3310      	adds	r3, #16
 8001e32:	4a3a      	ldr	r2, [pc, #232]	; (8001f1c <LcdWrite8+0x1a4>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8001e38:	4b39      	ldr	r3, [pc, #228]	; (8001f20 <LcdWrite8+0x1a8>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	601a      	str	r2, [r3, #0]
 8001e3e:	4b38      	ldr	r3, [pc, #224]	; (8001f20 <LcdWrite8+0x1a8>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	601a      	str	r2, [r3, #0]
 8001e44:	4b36      	ldr	r3, [pc, #216]	; (8001f20 <LcdWrite8+0x1a8>)
 8001e46:	2201      	movs	r2, #1
 8001e48:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 3);
 8001e4a:	1dfb      	adds	r3, r7, #7
 8001e4c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8001e50:	1dfb      	adds	r3, r7, #7
 8001e52:	015b      	lsls	r3, r3, #5
 8001e54:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8001e58:	f023 031f 	bic.w	r3, r3, #31
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8001e62:	330c      	adds	r3, #12
 8001e64:	4a2d      	ldr	r2, [pc, #180]	; (8001f1c <LcdWrite8+0x1a4>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8001e6a:	4b2d      	ldr	r3, [pc, #180]	; (8001f20 <LcdWrite8+0x1a8>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	601a      	str	r2, [r3, #0]
 8001e70:	4b2b      	ldr	r3, [pc, #172]	; (8001f20 <LcdWrite8+0x1a8>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	601a      	str	r2, [r3, #0]
 8001e76:	4b2a      	ldr	r3, [pc, #168]	; (8001f20 <LcdWrite8+0x1a8>)
 8001e78:	2201      	movs	r2, #1
 8001e7a:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 2);
 8001e7c:	1dfb      	adds	r3, r7, #7
 8001e7e:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8001e82:	1dfb      	adds	r3, r7, #7
 8001e84:	015b      	lsls	r3, r3, #5
 8001e86:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8001e8a:	f023 031f 	bic.w	r3, r3, #31
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8001e94:	3308      	adds	r3, #8
 8001e96:	4a21      	ldr	r2, [pc, #132]	; (8001f1c <LcdWrite8+0x1a4>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8001e9c:	4b20      	ldr	r3, [pc, #128]	; (8001f20 <LcdWrite8+0x1a8>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	601a      	str	r2, [r3, #0]
 8001ea2:	4b1f      	ldr	r3, [pc, #124]	; (8001f20 <LcdWrite8+0x1a8>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	4b1d      	ldr	r3, [pc, #116]	; (8001f20 <LcdWrite8+0x1a8>)
 8001eaa:	2201      	movs	r2, #1
 8001eac:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 1);
 8001eae:	1dfb      	adds	r3, r7, #7
 8001eb0:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8001eb4:	1dfb      	adds	r3, r7, #7
 8001eb6:	015b      	lsls	r3, r3, #5
 8001eb8:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8001ebc:	f023 031f 	bic.w	r3, r3, #31
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8001ec6:	3304      	adds	r3, #4
 8001ec8:	4a14      	ldr	r2, [pc, #80]	; (8001f1c <LcdWrite8+0x1a4>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8001ece:	4b14      	ldr	r3, [pc, #80]	; (8001f20 <LcdWrite8+0x1a8>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	601a      	str	r2, [r3, #0]
 8001ed4:	4b12      	ldr	r3, [pc, #72]	; (8001f20 <LcdWrite8+0x1a8>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	601a      	str	r2, [r3, #0]
 8001eda:	4b11      	ldr	r3, [pc, #68]	; (8001f20 <LcdWrite8+0x1a8>)
 8001edc:	2201      	movs	r2, #1
 8001ede:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 0);
 8001ee0:	1dfb      	adds	r3, r7, #7
 8001ee2:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8001ee6:	1dfb      	adds	r3, r7, #7
 8001ee8:	015b      	lsls	r3, r3, #5
 8001eea:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8001eee:	f023 031f 	bic.w	r3, r3, #31
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8001ef8:	4a08      	ldr	r2, [pc, #32]	; (8001f1c <LcdWrite8+0x1a4>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8001efe:	4b08      	ldr	r3, [pc, #32]	; (8001f20 <LcdWrite8+0x1a8>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	601a      	str	r2, [r3, #0]
 8001f04:	4b06      	ldr	r3, [pc, #24]	; (8001f20 <LcdWrite8+0x1a8>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	601a      	str	r2, [r3, #0]
 8001f0a:	4b05      	ldr	r3, [pc, #20]	; (8001f20 <LcdWrite8+0x1a8>)
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	601a      	str	r2, [r3, #0]
}
 8001f10:	bf00      	nop
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr
 8001f1c:	4241028c 	.word	0x4241028c
 8001f20:	424082a8 	.word	0x424082a8

08001f24 <LcdWrite16>:

void LcdWrite16(uint16_t d16)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	80fb      	strh	r3, [r7, #6]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 15);
 8001f2e:	1dbb      	adds	r3, r7, #6
 8001f30:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8001f34:	1dbb      	adds	r3, r7, #6
 8001f36:	015b      	lsls	r3, r3, #5
 8001f38:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8001f3c:	f023 031f 	bic.w	r3, r3, #31
 8001f40:	4313      	orrs	r3, r2
 8001f42:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8001f46:	333c      	adds	r3, #60	; 0x3c
 8001f48:	4aba      	ldr	r2, [pc, #744]	; (8002234 <LcdWrite16+0x310>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8001f4e:	4bba      	ldr	r3, [pc, #744]	; (8002238 <LcdWrite16+0x314>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]
 8001f54:	4bb8      	ldr	r3, [pc, #736]	; (8002238 <LcdWrite16+0x314>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	601a      	str	r2, [r3, #0]
 8001f5a:	4bb7      	ldr	r3, [pc, #732]	; (8002238 <LcdWrite16+0x314>)
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 14);
 8001f60:	1dbb      	adds	r3, r7, #6
 8001f62:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8001f66:	1dbb      	adds	r3, r7, #6
 8001f68:	015b      	lsls	r3, r3, #5
 8001f6a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8001f6e:	f023 031f 	bic.w	r3, r3, #31
 8001f72:	4313      	orrs	r3, r2
 8001f74:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8001f78:	3338      	adds	r3, #56	; 0x38
 8001f7a:	4aae      	ldr	r2, [pc, #696]	; (8002234 <LcdWrite16+0x310>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8001f80:	4bad      	ldr	r3, [pc, #692]	; (8002238 <LcdWrite16+0x314>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	601a      	str	r2, [r3, #0]
 8001f86:	4bac      	ldr	r3, [pc, #688]	; (8002238 <LcdWrite16+0x314>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]
 8001f8c:	4baa      	ldr	r3, [pc, #680]	; (8002238 <LcdWrite16+0x314>)
 8001f8e:	2201      	movs	r2, #1
 8001f90:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 13);
 8001f92:	1dbb      	adds	r3, r7, #6
 8001f94:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8001f98:	1dbb      	adds	r3, r7, #6
 8001f9a:	015b      	lsls	r3, r3, #5
 8001f9c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8001fa0:	f023 031f 	bic.w	r3, r3, #31
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8001faa:	3334      	adds	r3, #52	; 0x34
 8001fac:	4aa1      	ldr	r2, [pc, #644]	; (8002234 <LcdWrite16+0x310>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8001fb2:	4ba1      	ldr	r3, [pc, #644]	; (8002238 <LcdWrite16+0x314>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	601a      	str	r2, [r3, #0]
 8001fb8:	4b9f      	ldr	r3, [pc, #636]	; (8002238 <LcdWrite16+0x314>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	601a      	str	r2, [r3, #0]
 8001fbe:	4b9e      	ldr	r3, [pc, #632]	; (8002238 <LcdWrite16+0x314>)
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 12);
 8001fc4:	1dbb      	adds	r3, r7, #6
 8001fc6:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8001fca:	1dbb      	adds	r3, r7, #6
 8001fcc:	015b      	lsls	r3, r3, #5
 8001fce:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8001fd2:	f023 031f 	bic.w	r3, r3, #31
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8001fdc:	3330      	adds	r3, #48	; 0x30
 8001fde:	4a95      	ldr	r2, [pc, #596]	; (8002234 <LcdWrite16+0x310>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8001fe4:	4b94      	ldr	r3, [pc, #592]	; (8002238 <LcdWrite16+0x314>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	601a      	str	r2, [r3, #0]
 8001fea:	4b93      	ldr	r3, [pc, #588]	; (8002238 <LcdWrite16+0x314>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	601a      	str	r2, [r3, #0]
 8001ff0:	4b91      	ldr	r3, [pc, #580]	; (8002238 <LcdWrite16+0x314>)
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 11);
 8001ff6:	1dbb      	adds	r3, r7, #6
 8001ff8:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8001ffc:	1dbb      	adds	r3, r7, #6
 8001ffe:	015b      	lsls	r3, r3, #5
 8002000:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002004:	f023 031f 	bic.w	r3, r3, #31
 8002008:	4313      	orrs	r3, r2
 800200a:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800200e:	332c      	adds	r3, #44	; 0x2c
 8002010:	4a88      	ldr	r2, [pc, #544]	; (8002234 <LcdWrite16+0x310>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8002016:	4b88      	ldr	r3, [pc, #544]	; (8002238 <LcdWrite16+0x314>)
 8002018:	2200      	movs	r2, #0
 800201a:	601a      	str	r2, [r3, #0]
 800201c:	4b86      	ldr	r3, [pc, #536]	; (8002238 <LcdWrite16+0x314>)
 800201e:	2200      	movs	r2, #0
 8002020:	601a      	str	r2, [r3, #0]
 8002022:	4b85      	ldr	r3, [pc, #532]	; (8002238 <LcdWrite16+0x314>)
 8002024:	2201      	movs	r2, #1
 8002026:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 10);
 8002028:	1dbb      	adds	r3, r7, #6
 800202a:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800202e:	1dbb      	adds	r3, r7, #6
 8002030:	015b      	lsls	r3, r3, #5
 8002032:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002036:	f023 031f 	bic.w	r3, r3, #31
 800203a:	4313      	orrs	r3, r2
 800203c:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002040:	3328      	adds	r3, #40	; 0x28
 8002042:	4a7c      	ldr	r2, [pc, #496]	; (8002234 <LcdWrite16+0x310>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8002048:	4b7b      	ldr	r3, [pc, #492]	; (8002238 <LcdWrite16+0x314>)
 800204a:	2200      	movs	r2, #0
 800204c:	601a      	str	r2, [r3, #0]
 800204e:	4b7a      	ldr	r3, [pc, #488]	; (8002238 <LcdWrite16+0x314>)
 8002050:	2200      	movs	r2, #0
 8002052:	601a      	str	r2, [r3, #0]
 8002054:	4b78      	ldr	r3, [pc, #480]	; (8002238 <LcdWrite16+0x314>)
 8002056:	2201      	movs	r2, #1
 8002058:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 9);
 800205a:	1dbb      	adds	r3, r7, #6
 800205c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002060:	1dbb      	adds	r3, r7, #6
 8002062:	015b      	lsls	r3, r3, #5
 8002064:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002068:	f023 031f 	bic.w	r3, r3, #31
 800206c:	4313      	orrs	r3, r2
 800206e:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002072:	3324      	adds	r3, #36	; 0x24
 8002074:	4a6f      	ldr	r2, [pc, #444]	; (8002234 <LcdWrite16+0x310>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 800207a:	4b6f      	ldr	r3, [pc, #444]	; (8002238 <LcdWrite16+0x314>)
 800207c:	2200      	movs	r2, #0
 800207e:	601a      	str	r2, [r3, #0]
 8002080:	4b6d      	ldr	r3, [pc, #436]	; (8002238 <LcdWrite16+0x314>)
 8002082:	2200      	movs	r2, #0
 8002084:	601a      	str	r2, [r3, #0]
 8002086:	4b6c      	ldr	r3, [pc, #432]	; (8002238 <LcdWrite16+0x314>)
 8002088:	2201      	movs	r2, #1
 800208a:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 8);
 800208c:	1dbb      	adds	r3, r7, #6
 800208e:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002092:	1dbb      	adds	r3, r7, #6
 8002094:	015b      	lsls	r3, r3, #5
 8002096:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 800209a:	f023 031f 	bic.w	r3, r3, #31
 800209e:	4313      	orrs	r3, r2
 80020a0:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80020a4:	3320      	adds	r3, #32
 80020a6:	4a63      	ldr	r2, [pc, #396]	; (8002234 <LcdWrite16+0x310>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 80020ac:	4b62      	ldr	r3, [pc, #392]	; (8002238 <LcdWrite16+0x314>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	601a      	str	r2, [r3, #0]
 80020b2:	4b61      	ldr	r3, [pc, #388]	; (8002238 <LcdWrite16+0x314>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	601a      	str	r2, [r3, #0]
 80020b8:	4b5f      	ldr	r3, [pc, #380]	; (8002238 <LcdWrite16+0x314>)
 80020ba:	2201      	movs	r2, #1
 80020bc:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 7);
 80020be:	1dbb      	adds	r3, r7, #6
 80020c0:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80020c4:	1dbb      	adds	r3, r7, #6
 80020c6:	015b      	lsls	r3, r3, #5
 80020c8:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80020cc:	f023 031f 	bic.w	r3, r3, #31
 80020d0:	4313      	orrs	r3, r2
 80020d2:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80020d6:	331c      	adds	r3, #28
 80020d8:	4a56      	ldr	r2, [pc, #344]	; (8002234 <LcdWrite16+0x310>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 80020de:	4b56      	ldr	r3, [pc, #344]	; (8002238 <LcdWrite16+0x314>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	601a      	str	r2, [r3, #0]
 80020e4:	4b54      	ldr	r3, [pc, #336]	; (8002238 <LcdWrite16+0x314>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	601a      	str	r2, [r3, #0]
 80020ea:	4b53      	ldr	r3, [pc, #332]	; (8002238 <LcdWrite16+0x314>)
 80020ec:	2201      	movs	r2, #1
 80020ee:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 6);
 80020f0:	1dbb      	adds	r3, r7, #6
 80020f2:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80020f6:	1dbb      	adds	r3, r7, #6
 80020f8:	015b      	lsls	r3, r3, #5
 80020fa:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80020fe:	f023 031f 	bic.w	r3, r3, #31
 8002102:	4313      	orrs	r3, r2
 8002104:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002108:	3318      	adds	r3, #24
 800210a:	4a4a      	ldr	r2, [pc, #296]	; (8002234 <LcdWrite16+0x310>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8002110:	4b49      	ldr	r3, [pc, #292]	; (8002238 <LcdWrite16+0x314>)
 8002112:	2200      	movs	r2, #0
 8002114:	601a      	str	r2, [r3, #0]
 8002116:	4b48      	ldr	r3, [pc, #288]	; (8002238 <LcdWrite16+0x314>)
 8002118:	2200      	movs	r2, #0
 800211a:	601a      	str	r2, [r3, #0]
 800211c:	4b46      	ldr	r3, [pc, #280]	; (8002238 <LcdWrite16+0x314>)
 800211e:	2201      	movs	r2, #1
 8002120:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 5);
 8002122:	1dbb      	adds	r3, r7, #6
 8002124:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002128:	1dbb      	adds	r3, r7, #6
 800212a:	015b      	lsls	r3, r3, #5
 800212c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002130:	f023 031f 	bic.w	r3, r3, #31
 8002134:	4313      	orrs	r3, r2
 8002136:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800213a:	3314      	adds	r3, #20
 800213c:	4a3d      	ldr	r2, [pc, #244]	; (8002234 <LcdWrite16+0x310>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8002142:	4b3d      	ldr	r3, [pc, #244]	; (8002238 <LcdWrite16+0x314>)
 8002144:	2200      	movs	r2, #0
 8002146:	601a      	str	r2, [r3, #0]
 8002148:	4b3b      	ldr	r3, [pc, #236]	; (8002238 <LcdWrite16+0x314>)
 800214a:	2200      	movs	r2, #0
 800214c:	601a      	str	r2, [r3, #0]
 800214e:	4b3a      	ldr	r3, [pc, #232]	; (8002238 <LcdWrite16+0x314>)
 8002150:	2201      	movs	r2, #1
 8002152:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 4);
 8002154:	1dbb      	adds	r3, r7, #6
 8002156:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800215a:	1dbb      	adds	r3, r7, #6
 800215c:	015b      	lsls	r3, r3, #5
 800215e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002162:	f023 031f 	bic.w	r3, r3, #31
 8002166:	4313      	orrs	r3, r2
 8002168:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800216c:	3310      	adds	r3, #16
 800216e:	4a31      	ldr	r2, [pc, #196]	; (8002234 <LcdWrite16+0x310>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8002174:	4b30      	ldr	r3, [pc, #192]	; (8002238 <LcdWrite16+0x314>)
 8002176:	2200      	movs	r2, #0
 8002178:	601a      	str	r2, [r3, #0]
 800217a:	4b2f      	ldr	r3, [pc, #188]	; (8002238 <LcdWrite16+0x314>)
 800217c:	2200      	movs	r2, #0
 800217e:	601a      	str	r2, [r3, #0]
 8002180:	4b2d      	ldr	r3, [pc, #180]	; (8002238 <LcdWrite16+0x314>)
 8002182:	2201      	movs	r2, #1
 8002184:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 3);
 8002186:	1dbb      	adds	r3, r7, #6
 8002188:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800218c:	1dbb      	adds	r3, r7, #6
 800218e:	015b      	lsls	r3, r3, #5
 8002190:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002194:	f023 031f 	bic.w	r3, r3, #31
 8002198:	4313      	orrs	r3, r2
 800219a:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800219e:	330c      	adds	r3, #12
 80021a0:	4a24      	ldr	r2, [pc, #144]	; (8002234 <LcdWrite16+0x310>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 80021a6:	4b24      	ldr	r3, [pc, #144]	; (8002238 <LcdWrite16+0x314>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	601a      	str	r2, [r3, #0]
 80021ac:	4b22      	ldr	r3, [pc, #136]	; (8002238 <LcdWrite16+0x314>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	601a      	str	r2, [r3, #0]
 80021b2:	4b21      	ldr	r3, [pc, #132]	; (8002238 <LcdWrite16+0x314>)
 80021b4:	2201      	movs	r2, #1
 80021b6:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 2);
 80021b8:	1dbb      	adds	r3, r7, #6
 80021ba:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80021be:	1dbb      	adds	r3, r7, #6
 80021c0:	015b      	lsls	r3, r3, #5
 80021c2:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80021c6:	f023 031f 	bic.w	r3, r3, #31
 80021ca:	4313      	orrs	r3, r2
 80021cc:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80021d0:	3308      	adds	r3, #8
 80021d2:	4a18      	ldr	r2, [pc, #96]	; (8002234 <LcdWrite16+0x310>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 80021d8:	4b17      	ldr	r3, [pc, #92]	; (8002238 <LcdWrite16+0x314>)
 80021da:	2200      	movs	r2, #0
 80021dc:	601a      	str	r2, [r3, #0]
 80021de:	4b16      	ldr	r3, [pc, #88]	; (8002238 <LcdWrite16+0x314>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	601a      	str	r2, [r3, #0]
 80021e4:	4b14      	ldr	r3, [pc, #80]	; (8002238 <LcdWrite16+0x314>)
 80021e6:	2201      	movs	r2, #1
 80021e8:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 1);
 80021ea:	1dbb      	adds	r3, r7, #6
 80021ec:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80021f0:	1dbb      	adds	r3, r7, #6
 80021f2:	015b      	lsls	r3, r3, #5
 80021f4:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80021f8:	f023 031f 	bic.w	r3, r3, #31
 80021fc:	4313      	orrs	r3, r2
 80021fe:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002202:	3304      	adds	r3, #4
 8002204:	4a0b      	ldr	r2, [pc, #44]	; (8002234 <LcdWrite16+0x310>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 800220a:	4b0b      	ldr	r3, [pc, #44]	; (8002238 <LcdWrite16+0x314>)
 800220c:	2200      	movs	r2, #0
 800220e:	601a      	str	r2, [r3, #0]
 8002210:	4b09      	ldr	r3, [pc, #36]	; (8002238 <LcdWrite16+0x314>)
 8002212:	2200      	movs	r2, #0
 8002214:	601a      	str	r2, [r3, #0]
 8002216:	4b08      	ldr	r3, [pc, #32]	; (8002238 <LcdWrite16+0x314>)
 8002218:	2201      	movs	r2, #1
 800221a:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 0);
 800221c:	1dbb      	adds	r3, r7, #6
 800221e:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002222:	1dbb      	adds	r3, r7, #6
 8002224:	015b      	lsls	r3, r3, #5
 8002226:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 800222a:	f023 031f 	bic.w	r3, r3, #31
 800222e:	4313      	orrs	r3, r2
 8002230:	e004      	b.n	800223c <LcdWrite16+0x318>
 8002232:	bf00      	nop
 8002234:	4241028c 	.word	0x4241028c
 8002238:	424082a8 	.word	0x424082a8
 800223c:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002240:	4a08      	ldr	r2, [pc, #32]	; (8002264 <LcdWrite16+0x340>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8002246:	4b08      	ldr	r3, [pc, #32]	; (8002268 <LcdWrite16+0x344>)
 8002248:	2200      	movs	r2, #0
 800224a:	601a      	str	r2, [r3, #0]
 800224c:	4b06      	ldr	r3, [pc, #24]	; (8002268 <LcdWrite16+0x344>)
 800224e:	2200      	movs	r2, #0
 8002250:	601a      	str	r2, [r3, #0]
 8002252:	4b05      	ldr	r3, [pc, #20]	; (8002268 <LcdWrite16+0x344>)
 8002254:	2201      	movs	r2, #1
 8002256:	601a      	str	r2, [r3, #0]
}
 8002258:	bf00      	nop
 800225a:	370c      	adds	r7, #12
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr
 8002264:	4241028c 	.word	0x4241028c
 8002268:	424082a8 	.word	0x424082a8

0800226c <LCD_IO_WriteMultiData8>:
#if DMANUM(LCD_DMA_TX) == 0 || LCD_SPI == 0

/* SPI TX no DMA */

void LCD_IO_WriteMultiData8(uint8_t * pData, uint32_t Size, uint32_t dinc)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b084      	sub	sp, #16
 8002270:	af00      	add	r7, sp, #0
 8002272:	60f8      	str	r0, [r7, #12]
 8002274:	60b9      	str	r1, [r7, #8]
 8002276:	607a      	str	r2, [r7, #4]
  while(Size--)
 8002278:	e00a      	b.n	8002290 <LCD_IO_WriteMultiData8+0x24>
  {
    LcdWrite8(*pData);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	4618      	mov	r0, r3
 8002280:	f7ff fd7a 	bl	8001d78 <LcdWrite8>
    if(dinc)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d002      	beq.n	8002290 <LCD_IO_WriteMultiData8+0x24>
      pData++;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	3301      	adds	r3, #1
 800228e:	60fb      	str	r3, [r7, #12]
  while(Size--)
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	1e5a      	subs	r2, r3, #1
 8002294:	60ba      	str	r2, [r7, #8]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d1ef      	bne.n	800227a <LCD_IO_WriteMultiData8+0xe>
  }
  LCD_CS_OFF;
 800229a:	4b03      	ldr	r3, [pc, #12]	; (80022a8 <LCD_IO_WriteMultiData8+0x3c>)
 800229c:	2201      	movs	r2, #1
 800229e:	601a      	str	r2, [r3, #0]
}
 80022a0:	bf00      	nop
 80022a2:	3710      	adds	r7, #16
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	424002a0 	.word	0x424002a0

080022ac <LCD_IO_WriteMultiData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteMultiData16(uint16_t * pData, uint32_t Size, uint32_t dinc)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	60f8      	str	r0, [r7, #12]
 80022b4:	60b9      	str	r1, [r7, #8]
 80022b6:	607a      	str	r2, [r7, #4]
  while(Size--)
 80022b8:	e00a      	b.n	80022d0 <LCD_IO_WriteMultiData16+0x24>
  {
    LcdWrite16(*pData);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	881b      	ldrh	r3, [r3, #0]
 80022be:	4618      	mov	r0, r3
 80022c0:	f7ff fe30 	bl	8001f24 <LcdWrite16>
    if(dinc)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d002      	beq.n	80022d0 <LCD_IO_WriteMultiData16+0x24>
      pData++;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	3302      	adds	r3, #2
 80022ce:	60fb      	str	r3, [r7, #12]
  while(Size--)
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	1e5a      	subs	r2, r3, #1
 80022d4:	60ba      	str	r2, [r7, #8]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d1ef      	bne.n	80022ba <LCD_IO_WriteMultiData16+0xe>
  }
  LCD_CS_OFF;
 80022da:	4b03      	ldr	r3, [pc, #12]	; (80022e8 <LCD_IO_WriteMultiData16+0x3c>)
 80022dc:	2201      	movs	r2, #1
 80022de:	601a      	str	r2, [r3, #0]
}
 80022e0:	bf00      	nop
 80022e2:	3710      	adds	r7, #16
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	424002a0 	.word	0x424002a0

080022ec <LCD_Delay>:

//=============================================================================
/* Public functions */

void LCD_Delay(uint32_t Delay)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f000 f9b7 	bl	8002668 <HAL_Delay>
}
 80022fa:	bf00      	nop
 80022fc:	3708      	adds	r7, #8
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}

08002302 <LCD_IO_Bl_OnOff>:

//-----------------------------------------------------------------------------
void LCD_IO_Bl_OnOff(uint8_t Bl)
{
 8002302:	b480      	push	{r7}
 8002304:	b083      	sub	sp, #12
 8002306:	af00      	add	r7, sp, #0
 8002308:	4603      	mov	r3, r0
 800230a:	71fb      	strb	r3, [r7, #7]
  if(Bl)
    GPIOX_ODR(LCD_BL) = LCD_BLON;
  else
    GPIOX_ODR(LCD_BL) = 1 - LCD_BLON;
  #endif
}
 800230c:	bf00      	nop
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <LCD_IO_Init>:

//-----------------------------------------------------------------------------
void LCD_IO_Init(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
  #define DMA1_CLOCK_RX         0
  #endif
  #endif  // #else LCD_SPI == 0

  /* GPIO, DMA Clocks */
  RCC->AHB1ENR |= GPIOX_CLOCK(LCD_RS) | GPIOX_CLOCK(LCD_CS) | GPIOX_CLOCK(LCD_SCK) | GPIOX_CLOCK(LCD_MOSI) |
 800231c:	4b34      	ldr	r3, [pc, #208]	; (80023f0 <LCD_IO_Init+0xd8>)
 800231e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002320:	4a33      	ldr	r2, [pc, #204]	; (80023f0 <LCD_IO_Init+0xd8>)
 8002322:	f043 0307 	orr.w	r3, r3, #7
 8002326:	6313      	str	r3, [r2, #48]	; 0x30
  LCD_IO_Bl_OnOff(1);
  #endif

  /* Reset pin = output, reset off */
  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A
  GPIOX_MODER(MODE_OUT, LCD_RST);
 8002328:	4b32      	ldr	r3, [pc, #200]	; (80023f4 <LCD_IO_Init+0xdc>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002330:	4a30      	ldr	r2, [pc, #192]	; (80023f4 <LCD_IO_Init+0xdc>)
 8002332:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002336:	6013      	str	r3, [r2, #0]
  GPIOX_OSPEEDR(MODE_SPD_LOW, LCD_RST);
 8002338:	4b2e      	ldr	r3, [pc, #184]	; (80023f4 <LCD_IO_Init+0xdc>)
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	4a2d      	ldr	r2, [pc, #180]	; (80023f4 <LCD_IO_Init+0xdc>)
 800233e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002342:	6093      	str	r3, [r2, #8]
  LCD_RST_OFF;
 8002344:	4b2c      	ldr	r3, [pc, #176]	; (80023f8 <LCD_IO_Init+0xe0>)
 8002346:	2201      	movs	r2, #1
 8002348:	601a      	str	r2, [r3, #0]
  #endif

  LCD_RS_DATA;
 800234a:	4b2c      	ldr	r3, [pc, #176]	; (80023fc <LCD_IO_Init+0xe4>)
 800234c:	2201      	movs	r2, #1
 800234e:	601a      	str	r2, [r3, #0]
  LCD_CS_OFF;
 8002350:	4b2b      	ldr	r3, [pc, #172]	; (8002400 <LCD_IO_Init+0xe8>)
 8002352:	2201      	movs	r2, #1
 8002354:	601a      	str	r2, [r3, #0]
  GPIOX_MODER(MODE_OUT, LCD_RS);
 8002356:	4b2b      	ldr	r3, [pc, #172]	; (8002404 <LCD_IO_Init+0xec>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800235e:	4a29      	ldr	r2, [pc, #164]	; (8002404 <LCD_IO_Init+0xec>)
 8002360:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002364:	6013      	str	r3, [r2, #0]
  GPIOX_MODER(MODE_OUT, LCD_CS);
 8002366:	4b27      	ldr	r3, [pc, #156]	; (8002404 <LCD_IO_Init+0xec>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800236e:	4a25      	ldr	r2, [pc, #148]	; (8002404 <LCD_IO_Init+0xec>)
 8002370:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002374:	6013      	str	r3, [r2, #0]

  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_RS);
 8002376:	4b23      	ldr	r3, [pc, #140]	; (8002404 <LCD_IO_Init+0xec>)
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	4a22      	ldr	r2, [pc, #136]	; (8002404 <LCD_IO_Init+0xec>)
 800237c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8002380:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_CS);
 8002382:	4b20      	ldr	r3, [pc, #128]	; (8002404 <LCD_IO_Init+0xec>)
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	4a1f      	ldr	r2, [pc, #124]	; (8002404 <LCD_IO_Init+0xec>)
 8002388:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 800238c:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_SCK);
 800238e:	4b19      	ldr	r3, [pc, #100]	; (80023f4 <LCD_IO_Init+0xdc>)
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	4a18      	ldr	r2, [pc, #96]	; (80023f4 <LCD_IO_Init+0xdc>)
 8002394:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8002398:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_MOSI);
 800239a:	4b1b      	ldr	r3, [pc, #108]	; (8002408 <LCD_IO_Init+0xf0>)
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	4a1a      	ldr	r2, [pc, #104]	; (8002408 <LCD_IO_Init+0xf0>)
 80023a0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80023a4:	6093      	str	r3, [r2, #8]
  GPIOX_ODR(LCD_SCK) = 1;               // SCK = 1
 80023a6:	4b19      	ldr	r3, [pc, #100]	; (800240c <LCD_IO_Init+0xf4>)
 80023a8:	2201      	movs	r2, #1
 80023aa:	601a      	str	r2, [r3, #0]

  #if LCD_SPI == 0
  /* Software SPI */
  GPIOX_MODER(MODE_OUT, LCD_SCK);
 80023ac:	4b11      	ldr	r3, [pc, #68]	; (80023f4 <LCD_IO_Init+0xdc>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80023b4:	4a0f      	ldr	r2, [pc, #60]	; (80023f4 <LCD_IO_Init+0xdc>)
 80023b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023ba:	6013      	str	r3, [r2, #0]
  GPIOX_MODER(MODE_OUT, LCD_MOSI);
 80023bc:	4b12      	ldr	r3, [pc, #72]	; (8002408 <LCD_IO_Init+0xf0>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80023c4:	4a10      	ldr	r2, [pc, #64]	; (8002408 <LCD_IO_Init+0xf0>)
 80023c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023ca:	6013      	str	r3, [r2, #0]

  #endif // #else LCD_SPI == 0

  /* Set or Reset the control line */
  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A // reset
  LCD_Delay(10);
 80023cc:	200a      	movs	r0, #10
 80023ce:	f7ff ff8d 	bl	80022ec <LCD_Delay>
  LCD_RST_ON;
 80023d2:	4b09      	ldr	r3, [pc, #36]	; (80023f8 <LCD_IO_Init+0xe0>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	601a      	str	r2, [r3, #0]
  LCD_Delay(10);
 80023d8:	200a      	movs	r0, #10
 80023da:	f7ff ff87 	bl	80022ec <LCD_Delay>
  LCD_RST_OFF;
 80023de:	4b06      	ldr	r3, [pc, #24]	; (80023f8 <LCD_IO_Init+0xe0>)
 80023e0:	2201      	movs	r2, #1
 80023e2:	601a      	str	r2, [r3, #0]
  #endif
  LCD_Delay(10);
 80023e4:	200a      	movs	r0, #10
 80023e6:	f7ff ff81 	bl	80022ec <LCD_Delay>
  osSemaphoreDef(spiDmaBinSem);
  spiDmaBinSemHandle = osSemaphoreCreate(osSemaphore(spiDmaBinSem), 1);
  osSemaphoreWait(spiDmaBinSemHandle, 1);
  #endif
  #endif  // #if DMANUM(LCD_DMA_RX) > 0
} // void LCD_IO_Init(void)
 80023ea:	bf00      	nop
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	40023800 	.word	0x40023800
 80023f4:	40020400 	.word	0x40020400
 80023f8:	42408294 	.word	0x42408294
 80023fc:	424002a8 	.word	0x424002a8
 8002400:	424002a0 	.word	0x424002a0
 8002404:	40020000 	.word	0x40020000
 8002408:	40020800 	.word	0x40020800
 800240c:	424082a8 	.word	0x424082a8

08002410 <LCD_IO_WriteCmd8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8(uint8_t Cmd)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
 8002416:	4603      	mov	r3, r0
 8002418:	71fb      	strb	r3, [r7, #7]
  WaitForDmaEnd();
  LcdSpiMode8();
  LCD_CS_ON;
 800241a:	4b0a      	ldr	r3, [pc, #40]	; (8002444 <LCD_IO_WriteCmd8+0x34>)
 800241c:	2200      	movs	r2, #0
 800241e:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 8002420:	4b09      	ldr	r3, [pc, #36]	; (8002448 <LCD_IO_WriteCmd8+0x38>)
 8002422:	2200      	movs	r2, #0
 8002424:	601a      	str	r2, [r3, #0]
 8002426:	79fb      	ldrb	r3, [r7, #7]
 8002428:	4618      	mov	r0, r3
 800242a:	f7ff fca5 	bl	8001d78 <LcdWrite8>
 800242e:	4b06      	ldr	r3, [pc, #24]	; (8002448 <LCD_IO_WriteCmd8+0x38>)
 8002430:	2201      	movs	r2, #1
 8002432:	601a      	str	r2, [r3, #0]
  LCD_CS_OFF;
 8002434:	4b03      	ldr	r3, [pc, #12]	; (8002444 <LCD_IO_WriteCmd8+0x34>)
 8002436:	2201      	movs	r2, #1
 8002438:	601a      	str	r2, [r3, #0]
}
 800243a:	bf00      	nop
 800243c:	3708      	adds	r7, #8
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	424002a0 	.word	0x424002a0
 8002448:	424002a8 	.word	0x424002a8

0800244c <LCD_IO_WriteData8>:
  LCD_CS_OFF;
}

//-----------------------------------------------------------------------------
void LCD_IO_WriteData8(uint8_t Data)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
 8002452:	4603      	mov	r3, r0
 8002454:	71fb      	strb	r3, [r7, #7]
  WaitForDmaEnd();
  LcdSpiMode8();
  LCD_CS_ON;
 8002456:	4b07      	ldr	r3, [pc, #28]	; (8002474 <LCD_IO_WriteData8+0x28>)
 8002458:	2200      	movs	r2, #0
 800245a:	601a      	str	r2, [r3, #0]
  LcdWrite8(Data);
 800245c:	79fb      	ldrb	r3, [r7, #7]
 800245e:	4618      	mov	r0, r3
 8002460:	f7ff fc8a 	bl	8001d78 <LcdWrite8>
  LCD_CS_OFF;
 8002464:	4b03      	ldr	r3, [pc, #12]	; (8002474 <LCD_IO_WriteData8+0x28>)
 8002466:	2201      	movs	r2, #1
 8002468:	601a      	str	r2, [r3, #0]
}
 800246a:	bf00      	nop
 800246c:	3708      	adds	r7, #8
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	424002a0 	.word	0x424002a0

08002478 <LCD_IO_WriteData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteData16(uint16_t Data)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
 800247e:	4603      	mov	r3, r0
 8002480:	80fb      	strh	r3, [r7, #6]
  WaitForDmaEnd();
  LcdSpiMode16();
  LCD_CS_ON;
 8002482:	4b07      	ldr	r3, [pc, #28]	; (80024a0 <LCD_IO_WriteData16+0x28>)
 8002484:	2200      	movs	r2, #0
 8002486:	601a      	str	r2, [r3, #0]
  LcdWrite16(Data);
 8002488:	88fb      	ldrh	r3, [r7, #6]
 800248a:	4618      	mov	r0, r3
 800248c:	f7ff fd4a 	bl	8001f24 <LcdWrite16>
  LCD_CS_OFF;
 8002490:	4b03      	ldr	r3, [pc, #12]	; (80024a0 <LCD_IO_WriteData16+0x28>)
 8002492:	2201      	movs	r2, #1
 8002494:	601a      	str	r2, [r3, #0]
}
 8002496:	bf00      	nop
 8002498:	3708      	adds	r7, #8
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	424002a0 	.word	0x424002a0

080024a4 <LCD_IO_WriteCmd8DataFill16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8DataFill16(uint8_t Cmd, uint16_t Data, uint32_t Size)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	4603      	mov	r3, r0
 80024ac:	603a      	str	r2, [r7, #0]
 80024ae:	71fb      	strb	r3, [r7, #7]
 80024b0:	460b      	mov	r3, r1
 80024b2:	80bb      	strh	r3, [r7, #4]
  WaitForDmaEnd();
  LcdSpiMode8();
  LCD_CS_ON;
 80024b4:	4b0b      	ldr	r3, [pc, #44]	; (80024e4 <LCD_IO_WriteCmd8DataFill16+0x40>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 80024ba:	4b0b      	ldr	r3, [pc, #44]	; (80024e8 <LCD_IO_WriteCmd8DataFill16+0x44>)
 80024bc:	2200      	movs	r2, #0
 80024be:	601a      	str	r2, [r3, #0]
 80024c0:	79fb      	ldrb	r3, [r7, #7]
 80024c2:	4618      	mov	r0, r3
 80024c4:	f7ff fc58 	bl	8001d78 <LcdWrite8>
 80024c8:	4b07      	ldr	r3, [pc, #28]	; (80024e8 <LCD_IO_WriteCmd8DataFill16+0x44>)
 80024ca:	2201      	movs	r2, #1
 80024cc:	601a      	str	r2, [r3, #0]
  LcdSpiMode16();
  LCD_IO_WriteMultiData16(&Data, Size, 0);
 80024ce:	1d3b      	adds	r3, r7, #4
 80024d0:	2200      	movs	r2, #0
 80024d2:	6839      	ldr	r1, [r7, #0]
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7ff fee9 	bl	80022ac <LCD_IO_WriteMultiData16>
}
 80024da:	bf00      	nop
 80024dc:	3708      	adds	r7, #8
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	424002a0 	.word	0x424002a0
 80024e8:	424002a8 	.word	0x424002a8

080024ec <LCD_IO_WriteCmd8MultipleData8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8MultipleData8(uint8_t Cmd, uint8_t *pData, uint32_t Size)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	4603      	mov	r3, r0
 80024f4:	60b9      	str	r1, [r7, #8]
 80024f6:	607a      	str	r2, [r7, #4]
 80024f8:	73fb      	strb	r3, [r7, #15]
  WaitForDmaEnd();
  LcdSpiMode8();
  LCD_CS_ON;
 80024fa:	4b0b      	ldr	r3, [pc, #44]	; (8002528 <LCD_IO_WriteCmd8MultipleData8+0x3c>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 8002500:	4b0a      	ldr	r3, [pc, #40]	; (800252c <LCD_IO_WriteCmd8MultipleData8+0x40>)
 8002502:	2200      	movs	r2, #0
 8002504:	601a      	str	r2, [r3, #0]
 8002506:	7bfb      	ldrb	r3, [r7, #15]
 8002508:	4618      	mov	r0, r3
 800250a:	f7ff fc35 	bl	8001d78 <LcdWrite8>
 800250e:	4b07      	ldr	r3, [pc, #28]	; (800252c <LCD_IO_WriteCmd8MultipleData8+0x40>)
 8002510:	2201      	movs	r2, #1
 8002512:	601a      	str	r2, [r3, #0]
  LCD_IO_WriteMultiData8(pData, Size, 1);
 8002514:	2201      	movs	r2, #1
 8002516:	6879      	ldr	r1, [r7, #4]
 8002518:	68b8      	ldr	r0, [r7, #8]
 800251a:	f7ff fea7 	bl	800226c <LCD_IO_WriteMultiData8>
}
 800251e:	bf00      	nop
 8002520:	3710      	adds	r7, #16
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	424002a0 	.word	0x424002a0
 800252c:	424002a8 	.word	0x424002a8

08002530 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002530:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002568 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002534:	480d      	ldr	r0, [pc, #52]	; (800256c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002536:	490e      	ldr	r1, [pc, #56]	; (8002570 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002538:	4a0e      	ldr	r2, [pc, #56]	; (8002574 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800253a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800253c:	e002      	b.n	8002544 <LoopCopyDataInit>

0800253e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800253e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002540:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002542:	3304      	adds	r3, #4

08002544 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002544:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002546:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002548:	d3f9      	bcc.n	800253e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800254a:	4a0b      	ldr	r2, [pc, #44]	; (8002578 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800254c:	4c0b      	ldr	r4, [pc, #44]	; (800257c <LoopFillZerobss+0x26>)
  movs r3, #0
 800254e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002550:	e001      	b.n	8002556 <LoopFillZerobss>

08002552 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002552:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002554:	3204      	adds	r2, #4

08002556 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002556:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002558:	d3fb      	bcc.n	8002552 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800255a:	f7ff f97d 	bl	8001858 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800255e:	f003 fdd7 	bl	8006110 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002562:	f7fe fcc5 	bl	8000ef0 <main>
  bx  lr    
 8002566:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002568:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800256c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002570:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002574:	080095cc 	.word	0x080095cc
  ldr r2, =_sbss
 8002578:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 800257c:	20000318 	.word	0x20000318

08002580 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002580:	e7fe      	b.n	8002580 <ADC_IRQHandler>
	...

08002584 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002588:	4b0e      	ldr	r3, [pc, #56]	; (80025c4 <HAL_Init+0x40>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a0d      	ldr	r2, [pc, #52]	; (80025c4 <HAL_Init+0x40>)
 800258e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002592:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002594:	4b0b      	ldr	r3, [pc, #44]	; (80025c4 <HAL_Init+0x40>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a0a      	ldr	r2, [pc, #40]	; (80025c4 <HAL_Init+0x40>)
 800259a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800259e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025a0:	4b08      	ldr	r3, [pc, #32]	; (80025c4 <HAL_Init+0x40>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a07      	ldr	r2, [pc, #28]	; (80025c4 <HAL_Init+0x40>)
 80025a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025ac:	2003      	movs	r0, #3
 80025ae:	f000 f94f 	bl	8002850 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025b2:	2000      	movs	r0, #0
 80025b4:	f000 f808 	bl	80025c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025b8:	f7fe ff12 	bl	80013e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	40023c00 	.word	0x40023c00

080025c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025d0:	4b12      	ldr	r3, [pc, #72]	; (800261c <HAL_InitTick+0x54>)
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	4b12      	ldr	r3, [pc, #72]	; (8002620 <HAL_InitTick+0x58>)
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	4619      	mov	r1, r3
 80025da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025de:	fbb3 f3f1 	udiv	r3, r3, r1
 80025e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80025e6:	4618      	mov	r0, r3
 80025e8:	f000 f967 	bl	80028ba <HAL_SYSTICK_Config>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d001      	beq.n	80025f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e00e      	b.n	8002614 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2b0f      	cmp	r3, #15
 80025fa:	d80a      	bhi.n	8002612 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025fc:	2200      	movs	r2, #0
 80025fe:	6879      	ldr	r1, [r7, #4]
 8002600:	f04f 30ff 	mov.w	r0, #4294967295
 8002604:	f000 f92f 	bl	8002866 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002608:	4a06      	ldr	r2, [pc, #24]	; (8002624 <HAL_InitTick+0x5c>)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800260e:	2300      	movs	r3, #0
 8002610:	e000      	b.n	8002614 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
}
 8002614:	4618      	mov	r0, r3
 8002616:	3708      	adds	r7, #8
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	20000000 	.word	0x20000000
 8002620:	20000010 	.word	0x20000010
 8002624:	2000000c 	.word	0x2000000c

08002628 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800262c:	4b06      	ldr	r3, [pc, #24]	; (8002648 <HAL_IncTick+0x20>)
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	461a      	mov	r2, r3
 8002632:	4b06      	ldr	r3, [pc, #24]	; (800264c <HAL_IncTick+0x24>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4413      	add	r3, r2
 8002638:	4a04      	ldr	r2, [pc, #16]	; (800264c <HAL_IncTick+0x24>)
 800263a:	6013      	str	r3, [r2, #0]
}
 800263c:	bf00      	nop
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr
 8002646:	bf00      	nop
 8002648:	20000010 	.word	0x20000010
 800264c:	20000304 	.word	0x20000304

08002650 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002650:	b480      	push	{r7}
 8002652:	af00      	add	r7, sp, #0
  return uwTick;
 8002654:	4b03      	ldr	r3, [pc, #12]	; (8002664 <HAL_GetTick+0x14>)
 8002656:	681b      	ldr	r3, [r3, #0]
}
 8002658:	4618      	mov	r0, r3
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop
 8002664:	20000304 	.word	0x20000304

08002668 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002670:	f7ff ffee 	bl	8002650 <HAL_GetTick>
 8002674:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002680:	d005      	beq.n	800268e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002682:	4b0a      	ldr	r3, [pc, #40]	; (80026ac <HAL_Delay+0x44>)
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	461a      	mov	r2, r3
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	4413      	add	r3, r2
 800268c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800268e:	bf00      	nop
 8002690:	f7ff ffde 	bl	8002650 <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	68fa      	ldr	r2, [r7, #12]
 800269c:	429a      	cmp	r2, r3
 800269e:	d8f7      	bhi.n	8002690 <HAL_Delay+0x28>
  {
  }
}
 80026a0:	bf00      	nop
 80026a2:	bf00      	nop
 80026a4:	3710      	adds	r7, #16
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	20000010 	.word	0x20000010

080026b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b085      	sub	sp, #20
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f003 0307 	and.w	r3, r3, #7
 80026be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026c0:	4b0c      	ldr	r3, [pc, #48]	; (80026f4 <__NVIC_SetPriorityGrouping+0x44>)
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026c6:	68ba      	ldr	r2, [r7, #8]
 80026c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026cc:	4013      	ands	r3, r2
 80026ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026e2:	4a04      	ldr	r2, [pc, #16]	; (80026f4 <__NVIC_SetPriorityGrouping+0x44>)
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	60d3      	str	r3, [r2, #12]
}
 80026e8:	bf00      	nop
 80026ea:	3714      	adds	r7, #20
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr
 80026f4:	e000ed00 	.word	0xe000ed00

080026f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026fc:	4b04      	ldr	r3, [pc, #16]	; (8002710 <__NVIC_GetPriorityGrouping+0x18>)
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	0a1b      	lsrs	r3, r3, #8
 8002702:	f003 0307 	and.w	r3, r3, #7
}
 8002706:	4618      	mov	r0, r3
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr
 8002710:	e000ed00 	.word	0xe000ed00

08002714 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	4603      	mov	r3, r0
 800271c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800271e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002722:	2b00      	cmp	r3, #0
 8002724:	db0b      	blt.n	800273e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002726:	79fb      	ldrb	r3, [r7, #7]
 8002728:	f003 021f 	and.w	r2, r3, #31
 800272c:	4907      	ldr	r1, [pc, #28]	; (800274c <__NVIC_EnableIRQ+0x38>)
 800272e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002732:	095b      	lsrs	r3, r3, #5
 8002734:	2001      	movs	r0, #1
 8002736:	fa00 f202 	lsl.w	r2, r0, r2
 800273a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800273e:	bf00      	nop
 8002740:	370c      	adds	r7, #12
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	e000e100 	.word	0xe000e100

08002750 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	4603      	mov	r3, r0
 8002758:	6039      	str	r1, [r7, #0]
 800275a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800275c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002760:	2b00      	cmp	r3, #0
 8002762:	db0a      	blt.n	800277a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	b2da      	uxtb	r2, r3
 8002768:	490c      	ldr	r1, [pc, #48]	; (800279c <__NVIC_SetPriority+0x4c>)
 800276a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800276e:	0112      	lsls	r2, r2, #4
 8002770:	b2d2      	uxtb	r2, r2
 8002772:	440b      	add	r3, r1
 8002774:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002778:	e00a      	b.n	8002790 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	b2da      	uxtb	r2, r3
 800277e:	4908      	ldr	r1, [pc, #32]	; (80027a0 <__NVIC_SetPriority+0x50>)
 8002780:	79fb      	ldrb	r3, [r7, #7]
 8002782:	f003 030f 	and.w	r3, r3, #15
 8002786:	3b04      	subs	r3, #4
 8002788:	0112      	lsls	r2, r2, #4
 800278a:	b2d2      	uxtb	r2, r2
 800278c:	440b      	add	r3, r1
 800278e:	761a      	strb	r2, [r3, #24]
}
 8002790:	bf00      	nop
 8002792:	370c      	adds	r7, #12
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr
 800279c:	e000e100 	.word	0xe000e100
 80027a0:	e000ed00 	.word	0xe000ed00

080027a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b089      	sub	sp, #36	; 0x24
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	60b9      	str	r1, [r7, #8]
 80027ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f003 0307 	and.w	r3, r3, #7
 80027b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	f1c3 0307 	rsb	r3, r3, #7
 80027be:	2b04      	cmp	r3, #4
 80027c0:	bf28      	it	cs
 80027c2:	2304      	movcs	r3, #4
 80027c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	3304      	adds	r3, #4
 80027ca:	2b06      	cmp	r3, #6
 80027cc:	d902      	bls.n	80027d4 <NVIC_EncodePriority+0x30>
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	3b03      	subs	r3, #3
 80027d2:	e000      	b.n	80027d6 <NVIC_EncodePriority+0x32>
 80027d4:	2300      	movs	r3, #0
 80027d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027d8:	f04f 32ff 	mov.w	r2, #4294967295
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	fa02 f303 	lsl.w	r3, r2, r3
 80027e2:	43da      	mvns	r2, r3
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	401a      	ands	r2, r3
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027ec:	f04f 31ff 	mov.w	r1, #4294967295
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	fa01 f303 	lsl.w	r3, r1, r3
 80027f6:	43d9      	mvns	r1, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027fc:	4313      	orrs	r3, r2
         );
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3724      	adds	r7, #36	; 0x24
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr
	...

0800280c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	3b01      	subs	r3, #1
 8002818:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800281c:	d301      	bcc.n	8002822 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800281e:	2301      	movs	r3, #1
 8002820:	e00f      	b.n	8002842 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002822:	4a0a      	ldr	r2, [pc, #40]	; (800284c <SysTick_Config+0x40>)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	3b01      	subs	r3, #1
 8002828:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800282a:	210f      	movs	r1, #15
 800282c:	f04f 30ff 	mov.w	r0, #4294967295
 8002830:	f7ff ff8e 	bl	8002750 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002834:	4b05      	ldr	r3, [pc, #20]	; (800284c <SysTick_Config+0x40>)
 8002836:	2200      	movs	r2, #0
 8002838:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800283a:	4b04      	ldr	r3, [pc, #16]	; (800284c <SysTick_Config+0x40>)
 800283c:	2207      	movs	r2, #7
 800283e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002840:	2300      	movs	r3, #0
}
 8002842:	4618      	mov	r0, r3
 8002844:	3708      	adds	r7, #8
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	e000e010 	.word	0xe000e010

08002850 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f7ff ff29 	bl	80026b0 <__NVIC_SetPriorityGrouping>
}
 800285e:	bf00      	nop
 8002860:	3708      	adds	r7, #8
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}

08002866 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002866:	b580      	push	{r7, lr}
 8002868:	b086      	sub	sp, #24
 800286a:	af00      	add	r7, sp, #0
 800286c:	4603      	mov	r3, r0
 800286e:	60b9      	str	r1, [r7, #8]
 8002870:	607a      	str	r2, [r7, #4]
 8002872:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002874:	2300      	movs	r3, #0
 8002876:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002878:	f7ff ff3e 	bl	80026f8 <__NVIC_GetPriorityGrouping>
 800287c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	68b9      	ldr	r1, [r7, #8]
 8002882:	6978      	ldr	r0, [r7, #20]
 8002884:	f7ff ff8e 	bl	80027a4 <NVIC_EncodePriority>
 8002888:	4602      	mov	r2, r0
 800288a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800288e:	4611      	mov	r1, r2
 8002890:	4618      	mov	r0, r3
 8002892:	f7ff ff5d 	bl	8002750 <__NVIC_SetPriority>
}
 8002896:	bf00      	nop
 8002898:	3718      	adds	r7, #24
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}

0800289e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800289e:	b580      	push	{r7, lr}
 80028a0:	b082      	sub	sp, #8
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	4603      	mov	r3, r0
 80028a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ac:	4618      	mov	r0, r3
 80028ae:	f7ff ff31 	bl	8002714 <__NVIC_EnableIRQ>
}
 80028b2:	bf00      	nop
 80028b4:	3708      	adds	r7, #8
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}

080028ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028ba:	b580      	push	{r7, lr}
 80028bc:	b082      	sub	sp, #8
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f7ff ffa2 	bl	800280c <SysTick_Config>
 80028c8:	4603      	mov	r3, r0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3708      	adds	r7, #8
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}

080028d2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80028d2:	b480      	push	{r7}
 80028d4:	b083      	sub	sp, #12
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d004      	beq.n	80028f0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2280      	movs	r2, #128	; 0x80
 80028ea:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e00c      	b.n	800290a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2205      	movs	r2, #5
 80028f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f022 0201 	bic.w	r2, r2, #1
 8002906:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002908:	2300      	movs	r3, #0
}
 800290a:	4618      	mov	r0, r3
 800290c:	370c      	adds	r7, #12
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr

08002916 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002916:	b480      	push	{r7}
 8002918:	b083      	sub	sp, #12
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002924:	b2db      	uxtb	r3, r3
}
 8002926:	4618      	mov	r0, r3
 8002928:	370c      	adds	r7, #12
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
	...

08002934 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002934:	b480      	push	{r7}
 8002936:	b089      	sub	sp, #36	; 0x24
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800293e:	2300      	movs	r3, #0
 8002940:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002942:	2300      	movs	r3, #0
 8002944:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002946:	2300      	movs	r3, #0
 8002948:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800294a:	2300      	movs	r3, #0
 800294c:	61fb      	str	r3, [r7, #28]
 800294e:	e159      	b.n	8002c04 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002950:	2201      	movs	r2, #1
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	fa02 f303 	lsl.w	r3, r2, r3
 8002958:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	697a      	ldr	r2, [r7, #20]
 8002960:	4013      	ands	r3, r2
 8002962:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002964:	693a      	ldr	r2, [r7, #16]
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	429a      	cmp	r2, r3
 800296a:	f040 8148 	bne.w	8002bfe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f003 0303 	and.w	r3, r3, #3
 8002976:	2b01      	cmp	r3, #1
 8002978:	d005      	beq.n	8002986 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002982:	2b02      	cmp	r3, #2
 8002984:	d130      	bne.n	80029e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	005b      	lsls	r3, r3, #1
 8002990:	2203      	movs	r2, #3
 8002992:	fa02 f303 	lsl.w	r3, r2, r3
 8002996:	43db      	mvns	r3, r3
 8002998:	69ba      	ldr	r2, [r7, #24]
 800299a:	4013      	ands	r3, r2
 800299c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	68da      	ldr	r2, [r3, #12]
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	005b      	lsls	r3, r3, #1
 80029a6:	fa02 f303 	lsl.w	r3, r2, r3
 80029aa:	69ba      	ldr	r2, [r7, #24]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	69ba      	ldr	r2, [r7, #24]
 80029b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029bc:	2201      	movs	r2, #1
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	fa02 f303 	lsl.w	r3, r2, r3
 80029c4:	43db      	mvns	r3, r3
 80029c6:	69ba      	ldr	r2, [r7, #24]
 80029c8:	4013      	ands	r3, r2
 80029ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	091b      	lsrs	r3, r3, #4
 80029d2:	f003 0201 	and.w	r2, r3, #1
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	fa02 f303 	lsl.w	r3, r2, r3
 80029dc:	69ba      	ldr	r2, [r7, #24]
 80029de:	4313      	orrs	r3, r2
 80029e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	69ba      	ldr	r2, [r7, #24]
 80029e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f003 0303 	and.w	r3, r3, #3
 80029f0:	2b03      	cmp	r3, #3
 80029f2:	d017      	beq.n	8002a24 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	005b      	lsls	r3, r3, #1
 80029fe:	2203      	movs	r2, #3
 8002a00:	fa02 f303 	lsl.w	r3, r2, r3
 8002a04:	43db      	mvns	r3, r3
 8002a06:	69ba      	ldr	r2, [r7, #24]
 8002a08:	4013      	ands	r3, r2
 8002a0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	689a      	ldr	r2, [r3, #8]
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	005b      	lsls	r3, r3, #1
 8002a14:	fa02 f303 	lsl.w	r3, r2, r3
 8002a18:	69ba      	ldr	r2, [r7, #24]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	69ba      	ldr	r2, [r7, #24]
 8002a22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f003 0303 	and.w	r3, r3, #3
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d123      	bne.n	8002a78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	08da      	lsrs	r2, r3, #3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	3208      	adds	r2, #8
 8002a38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	f003 0307 	and.w	r3, r3, #7
 8002a44:	009b      	lsls	r3, r3, #2
 8002a46:	220f      	movs	r2, #15
 8002a48:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4c:	43db      	mvns	r3, r3
 8002a4e:	69ba      	ldr	r2, [r7, #24]
 8002a50:	4013      	ands	r3, r2
 8002a52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	691a      	ldr	r2, [r3, #16]
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	f003 0307 	and.w	r3, r3, #7
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	fa02 f303 	lsl.w	r3, r2, r3
 8002a64:	69ba      	ldr	r2, [r7, #24]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	08da      	lsrs	r2, r3, #3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	3208      	adds	r2, #8
 8002a72:	69b9      	ldr	r1, [r7, #24]
 8002a74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	005b      	lsls	r3, r3, #1
 8002a82:	2203      	movs	r2, #3
 8002a84:	fa02 f303 	lsl.w	r3, r2, r3
 8002a88:	43db      	mvns	r3, r3
 8002a8a:	69ba      	ldr	r2, [r7, #24]
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f003 0203 	and.w	r2, r3, #3
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	005b      	lsls	r3, r3, #1
 8002a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa0:	69ba      	ldr	r2, [r7, #24]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	69ba      	ldr	r2, [r7, #24]
 8002aaa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	f000 80a2 	beq.w	8002bfe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002aba:	2300      	movs	r3, #0
 8002abc:	60fb      	str	r3, [r7, #12]
 8002abe:	4b57      	ldr	r3, [pc, #348]	; (8002c1c <HAL_GPIO_Init+0x2e8>)
 8002ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac2:	4a56      	ldr	r2, [pc, #344]	; (8002c1c <HAL_GPIO_Init+0x2e8>)
 8002ac4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ac8:	6453      	str	r3, [r2, #68]	; 0x44
 8002aca:	4b54      	ldr	r3, [pc, #336]	; (8002c1c <HAL_GPIO_Init+0x2e8>)
 8002acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ace:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ad2:	60fb      	str	r3, [r7, #12]
 8002ad4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ad6:	4a52      	ldr	r2, [pc, #328]	; (8002c20 <HAL_GPIO_Init+0x2ec>)
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	089b      	lsrs	r3, r3, #2
 8002adc:	3302      	adds	r3, #2
 8002ade:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	f003 0303 	and.w	r3, r3, #3
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	220f      	movs	r2, #15
 8002aee:	fa02 f303 	lsl.w	r3, r2, r3
 8002af2:	43db      	mvns	r3, r3
 8002af4:	69ba      	ldr	r2, [r7, #24]
 8002af6:	4013      	ands	r3, r2
 8002af8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4a49      	ldr	r2, [pc, #292]	; (8002c24 <HAL_GPIO_Init+0x2f0>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d019      	beq.n	8002b36 <HAL_GPIO_Init+0x202>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a48      	ldr	r2, [pc, #288]	; (8002c28 <HAL_GPIO_Init+0x2f4>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d013      	beq.n	8002b32 <HAL_GPIO_Init+0x1fe>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a47      	ldr	r2, [pc, #284]	; (8002c2c <HAL_GPIO_Init+0x2f8>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d00d      	beq.n	8002b2e <HAL_GPIO_Init+0x1fa>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a46      	ldr	r2, [pc, #280]	; (8002c30 <HAL_GPIO_Init+0x2fc>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d007      	beq.n	8002b2a <HAL_GPIO_Init+0x1f6>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4a45      	ldr	r2, [pc, #276]	; (8002c34 <HAL_GPIO_Init+0x300>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d101      	bne.n	8002b26 <HAL_GPIO_Init+0x1f2>
 8002b22:	2304      	movs	r3, #4
 8002b24:	e008      	b.n	8002b38 <HAL_GPIO_Init+0x204>
 8002b26:	2307      	movs	r3, #7
 8002b28:	e006      	b.n	8002b38 <HAL_GPIO_Init+0x204>
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e004      	b.n	8002b38 <HAL_GPIO_Init+0x204>
 8002b2e:	2302      	movs	r3, #2
 8002b30:	e002      	b.n	8002b38 <HAL_GPIO_Init+0x204>
 8002b32:	2301      	movs	r3, #1
 8002b34:	e000      	b.n	8002b38 <HAL_GPIO_Init+0x204>
 8002b36:	2300      	movs	r3, #0
 8002b38:	69fa      	ldr	r2, [r7, #28]
 8002b3a:	f002 0203 	and.w	r2, r2, #3
 8002b3e:	0092      	lsls	r2, r2, #2
 8002b40:	4093      	lsls	r3, r2
 8002b42:	69ba      	ldr	r2, [r7, #24]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b48:	4935      	ldr	r1, [pc, #212]	; (8002c20 <HAL_GPIO_Init+0x2ec>)
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	089b      	lsrs	r3, r3, #2
 8002b4e:	3302      	adds	r3, #2
 8002b50:	69ba      	ldr	r2, [r7, #24]
 8002b52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b56:	4b38      	ldr	r3, [pc, #224]	; (8002c38 <HAL_GPIO_Init+0x304>)
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	43db      	mvns	r3, r3
 8002b60:	69ba      	ldr	r2, [r7, #24]
 8002b62:	4013      	ands	r3, r2
 8002b64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d003      	beq.n	8002b7a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002b72:	69ba      	ldr	r2, [r7, #24]
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b7a:	4a2f      	ldr	r2, [pc, #188]	; (8002c38 <HAL_GPIO_Init+0x304>)
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b80:	4b2d      	ldr	r3, [pc, #180]	; (8002c38 <HAL_GPIO_Init+0x304>)
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	43db      	mvns	r3, r3
 8002b8a:	69ba      	ldr	r2, [r7, #24]
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d003      	beq.n	8002ba4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002b9c:	69ba      	ldr	r2, [r7, #24]
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ba4:	4a24      	ldr	r2, [pc, #144]	; (8002c38 <HAL_GPIO_Init+0x304>)
 8002ba6:	69bb      	ldr	r3, [r7, #24]
 8002ba8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002baa:	4b23      	ldr	r3, [pc, #140]	; (8002c38 <HAL_GPIO_Init+0x304>)
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	43db      	mvns	r3, r3
 8002bb4:	69ba      	ldr	r2, [r7, #24]
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d003      	beq.n	8002bce <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002bc6:	69ba      	ldr	r2, [r7, #24]
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002bce:	4a1a      	ldr	r2, [pc, #104]	; (8002c38 <HAL_GPIO_Init+0x304>)
 8002bd0:	69bb      	ldr	r3, [r7, #24]
 8002bd2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bd4:	4b18      	ldr	r3, [pc, #96]	; (8002c38 <HAL_GPIO_Init+0x304>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	43db      	mvns	r3, r3
 8002bde:	69ba      	ldr	r2, [r7, #24]
 8002be0:	4013      	ands	r3, r2
 8002be2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d003      	beq.n	8002bf8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002bf0:	69ba      	ldr	r2, [r7, #24]
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002bf8:	4a0f      	ldr	r2, [pc, #60]	; (8002c38 <HAL_GPIO_Init+0x304>)
 8002bfa:	69bb      	ldr	r3, [r7, #24]
 8002bfc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	3301      	adds	r3, #1
 8002c02:	61fb      	str	r3, [r7, #28]
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	2b0f      	cmp	r3, #15
 8002c08:	f67f aea2 	bls.w	8002950 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c0c:	bf00      	nop
 8002c0e:	bf00      	nop
 8002c10:	3724      	adds	r7, #36	; 0x24
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
 8002c1a:	bf00      	nop
 8002c1c:	40023800 	.word	0x40023800
 8002c20:	40013800 	.word	0x40013800
 8002c24:	40020000 	.word	0x40020000
 8002c28:	40020400 	.word	0x40020400
 8002c2c:	40020800 	.word	0x40020800
 8002c30:	40020c00 	.word	0x40020c00
 8002c34:	40021000 	.word	0x40021000
 8002c38:	40013c00 	.word	0x40013c00

08002c3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	460b      	mov	r3, r1
 8002c46:	807b      	strh	r3, [r7, #2]
 8002c48:	4613      	mov	r3, r2
 8002c4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c4c:	787b      	ldrb	r3, [r7, #1]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d003      	beq.n	8002c5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c52:	887a      	ldrh	r2, [r7, #2]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c58:	e003      	b.n	8002c62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c5a:	887b      	ldrh	r3, [r7, #2]
 8002c5c:	041a      	lsls	r2, r3, #16
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	619a      	str	r2, [r3, #24]
}
 8002c62:	bf00      	nop
 8002c64:	370c      	adds	r7, #12
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr

08002c6e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c6e:	b480      	push	{r7}
 8002c70:	b085      	sub	sp, #20
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]
 8002c76:	460b      	mov	r3, r1
 8002c78:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	695b      	ldr	r3, [r3, #20]
 8002c7e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002c80:	887a      	ldrh	r2, [r7, #2]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	4013      	ands	r3, r2
 8002c86:	041a      	lsls	r2, r3, #16
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	43d9      	mvns	r1, r3
 8002c8c:	887b      	ldrh	r3, [r7, #2]
 8002c8e:	400b      	ands	r3, r1
 8002c90:	431a      	orrs	r2, r3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	619a      	str	r2, [r3, #24]
}
 8002c96:	bf00      	nop
 8002c98:	3714      	adds	r7, #20
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
	...

08002ca4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	4603      	mov	r3, r0
 8002cac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002cae:	4b08      	ldr	r3, [pc, #32]	; (8002cd0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002cb0:	695a      	ldr	r2, [r3, #20]
 8002cb2:	88fb      	ldrh	r3, [r7, #6]
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d006      	beq.n	8002cc8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002cba:	4a05      	ldr	r2, [pc, #20]	; (8002cd0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002cbc:	88fb      	ldrh	r3, [r7, #6]
 8002cbe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002cc0:	88fb      	ldrh	r3, [r7, #6]
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f7fe fb72 	bl	80013ac <HAL_GPIO_EXTI_Callback>
  }
}
 8002cc8:	bf00      	nop
 8002cca:	3708      	adds	r7, #8
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	40013c00 	.word	0x40013c00

08002cd4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b084      	sub	sp, #16
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d101      	bne.n	8002ce6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e12b      	b.n	8002f3e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d106      	bne.n	8002d00 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f7fe fb98 	bl	8001430 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2224      	movs	r2, #36	; 0x24
 8002d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f022 0201 	bic.w	r2, r2, #1
 8002d16:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d26:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d36:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d38:	f002 fd72 	bl	8005820 <HAL_RCC_GetPCLK1Freq>
 8002d3c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	4a81      	ldr	r2, [pc, #516]	; (8002f48 <HAL_I2C_Init+0x274>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d807      	bhi.n	8002d58 <HAL_I2C_Init+0x84>
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	4a80      	ldr	r2, [pc, #512]	; (8002f4c <HAL_I2C_Init+0x278>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	bf94      	ite	ls
 8002d50:	2301      	movls	r3, #1
 8002d52:	2300      	movhi	r3, #0
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	e006      	b.n	8002d66 <HAL_I2C_Init+0x92>
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	4a7d      	ldr	r2, [pc, #500]	; (8002f50 <HAL_I2C_Init+0x27c>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	bf94      	ite	ls
 8002d60:	2301      	movls	r3, #1
 8002d62:	2300      	movhi	r3, #0
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d001      	beq.n	8002d6e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e0e7      	b.n	8002f3e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	4a78      	ldr	r2, [pc, #480]	; (8002f54 <HAL_I2C_Init+0x280>)
 8002d72:	fba2 2303 	umull	r2, r3, r2, r3
 8002d76:	0c9b      	lsrs	r3, r3, #18
 8002d78:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	68ba      	ldr	r2, [r7, #8]
 8002d8a:	430a      	orrs	r2, r1
 8002d8c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	6a1b      	ldr	r3, [r3, #32]
 8002d94:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	4a6a      	ldr	r2, [pc, #424]	; (8002f48 <HAL_I2C_Init+0x274>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d802      	bhi.n	8002da8 <HAL_I2C_Init+0xd4>
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	3301      	adds	r3, #1
 8002da6:	e009      	b.n	8002dbc <HAL_I2C_Init+0xe8>
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002dae:	fb02 f303 	mul.w	r3, r2, r3
 8002db2:	4a69      	ldr	r2, [pc, #420]	; (8002f58 <HAL_I2C_Init+0x284>)
 8002db4:	fba2 2303 	umull	r2, r3, r2, r3
 8002db8:	099b      	lsrs	r3, r3, #6
 8002dba:	3301      	adds	r3, #1
 8002dbc:	687a      	ldr	r2, [r7, #4]
 8002dbe:	6812      	ldr	r2, [r2, #0]
 8002dc0:	430b      	orrs	r3, r1
 8002dc2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	69db      	ldr	r3, [r3, #28]
 8002dca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002dce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	495c      	ldr	r1, [pc, #368]	; (8002f48 <HAL_I2C_Init+0x274>)
 8002dd8:	428b      	cmp	r3, r1
 8002dda:	d819      	bhi.n	8002e10 <HAL_I2C_Init+0x13c>
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	1e59      	subs	r1, r3, #1
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	005b      	lsls	r3, r3, #1
 8002de6:	fbb1 f3f3 	udiv	r3, r1, r3
 8002dea:	1c59      	adds	r1, r3, #1
 8002dec:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002df0:	400b      	ands	r3, r1
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d00a      	beq.n	8002e0c <HAL_I2C_Init+0x138>
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	1e59      	subs	r1, r3, #1
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	005b      	lsls	r3, r3, #1
 8002e00:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e04:	3301      	adds	r3, #1
 8002e06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e0a:	e051      	b.n	8002eb0 <HAL_I2C_Init+0x1dc>
 8002e0c:	2304      	movs	r3, #4
 8002e0e:	e04f      	b.n	8002eb0 <HAL_I2C_Init+0x1dc>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d111      	bne.n	8002e3c <HAL_I2C_Init+0x168>
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	1e58      	subs	r0, r3, #1
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6859      	ldr	r1, [r3, #4]
 8002e20:	460b      	mov	r3, r1
 8002e22:	005b      	lsls	r3, r3, #1
 8002e24:	440b      	add	r3, r1
 8002e26:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	bf0c      	ite	eq
 8002e34:	2301      	moveq	r3, #1
 8002e36:	2300      	movne	r3, #0
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	e012      	b.n	8002e62 <HAL_I2C_Init+0x18e>
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	1e58      	subs	r0, r3, #1
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6859      	ldr	r1, [r3, #4]
 8002e44:	460b      	mov	r3, r1
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	440b      	add	r3, r1
 8002e4a:	0099      	lsls	r1, r3, #2
 8002e4c:	440b      	add	r3, r1
 8002e4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e52:	3301      	adds	r3, #1
 8002e54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	bf0c      	ite	eq
 8002e5c:	2301      	moveq	r3, #1
 8002e5e:	2300      	movne	r3, #0
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d001      	beq.n	8002e6a <HAL_I2C_Init+0x196>
 8002e66:	2301      	movs	r3, #1
 8002e68:	e022      	b.n	8002eb0 <HAL_I2C_Init+0x1dc>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d10e      	bne.n	8002e90 <HAL_I2C_Init+0x1bc>
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	1e58      	subs	r0, r3, #1
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6859      	ldr	r1, [r3, #4]
 8002e7a:	460b      	mov	r3, r1
 8002e7c:	005b      	lsls	r3, r3, #1
 8002e7e:	440b      	add	r3, r1
 8002e80:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e84:	3301      	adds	r3, #1
 8002e86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e8e:	e00f      	b.n	8002eb0 <HAL_I2C_Init+0x1dc>
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	1e58      	subs	r0, r3, #1
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6859      	ldr	r1, [r3, #4]
 8002e98:	460b      	mov	r3, r1
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	440b      	add	r3, r1
 8002e9e:	0099      	lsls	r1, r3, #2
 8002ea0:	440b      	add	r3, r1
 8002ea2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ea6:	3301      	adds	r3, #1
 8002ea8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002eb0:	6879      	ldr	r1, [r7, #4]
 8002eb2:	6809      	ldr	r1, [r1, #0]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	69da      	ldr	r2, [r3, #28]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a1b      	ldr	r3, [r3, #32]
 8002eca:	431a      	orrs	r2, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	430a      	orrs	r2, r1
 8002ed2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002ede:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	6911      	ldr	r1, [r2, #16]
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	68d2      	ldr	r2, [r2, #12]
 8002eea:	4311      	orrs	r1, r2
 8002eec:	687a      	ldr	r2, [r7, #4]
 8002eee:	6812      	ldr	r2, [r2, #0]
 8002ef0:	430b      	orrs	r3, r1
 8002ef2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	68db      	ldr	r3, [r3, #12]
 8002efa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	695a      	ldr	r2, [r3, #20]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	699b      	ldr	r3, [r3, #24]
 8002f06:	431a      	orrs	r2, r3
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	430a      	orrs	r2, r1
 8002f0e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f042 0201 	orr.w	r2, r2, #1
 8002f1e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2200      	movs	r2, #0
 8002f24:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2220      	movs	r2, #32
 8002f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2200      	movs	r2, #0
 8002f32:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2200      	movs	r2, #0
 8002f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f3c:	2300      	movs	r3, #0
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3710      	adds	r7, #16
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	000186a0 	.word	0x000186a0
 8002f4c:	001e847f 	.word	0x001e847f
 8002f50:	003d08ff 	.word	0x003d08ff
 8002f54:	431bde83 	.word	0x431bde83
 8002f58:	10624dd3 	.word	0x10624dd3

08002f5c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b088      	sub	sp, #32
 8002f60:	af02      	add	r7, sp, #8
 8002f62:	60f8      	str	r0, [r7, #12]
 8002f64:	4608      	mov	r0, r1
 8002f66:	4611      	mov	r1, r2
 8002f68:	461a      	mov	r2, r3
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	817b      	strh	r3, [r7, #10]
 8002f6e:	460b      	mov	r3, r1
 8002f70:	813b      	strh	r3, [r7, #8]
 8002f72:	4613      	mov	r3, r2
 8002f74:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f76:	f7ff fb6b 	bl	8002650 <HAL_GetTick>
 8002f7a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	2b20      	cmp	r3, #32
 8002f86:	f040 80d9 	bne.w	800313c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	9300      	str	r3, [sp, #0]
 8002f8e:	2319      	movs	r3, #25
 8002f90:	2201      	movs	r2, #1
 8002f92:	496d      	ldr	r1, [pc, #436]	; (8003148 <HAL_I2C_Mem_Write+0x1ec>)
 8002f94:	68f8      	ldr	r0, [r7, #12]
 8002f96:	f001 fdff 	bl	8004b98 <I2C_WaitOnFlagUntilTimeout>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d001      	beq.n	8002fa4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002fa0:	2302      	movs	r3, #2
 8002fa2:	e0cc      	b.n	800313e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d101      	bne.n	8002fb2 <HAL_I2C_Mem_Write+0x56>
 8002fae:	2302      	movs	r3, #2
 8002fb0:	e0c5      	b.n	800313e <HAL_I2C_Mem_Write+0x1e2>
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0301 	and.w	r3, r3, #1
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d007      	beq.n	8002fd8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f042 0201 	orr.w	r2, r2, #1
 8002fd6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fe6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2221      	movs	r2, #33	; 0x21
 8002fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2240      	movs	r2, #64	; 0x40
 8002ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6a3a      	ldr	r2, [r7, #32]
 8003002:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003008:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800300e:	b29a      	uxth	r2, r3
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	4a4d      	ldr	r2, [pc, #308]	; (800314c <HAL_I2C_Mem_Write+0x1f0>)
 8003018:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800301a:	88f8      	ldrh	r0, [r7, #6]
 800301c:	893a      	ldrh	r2, [r7, #8]
 800301e:	8979      	ldrh	r1, [r7, #10]
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	9301      	str	r3, [sp, #4]
 8003024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003026:	9300      	str	r3, [sp, #0]
 8003028:	4603      	mov	r3, r0
 800302a:	68f8      	ldr	r0, [r7, #12]
 800302c:	f001 fc76 	bl	800491c <I2C_RequestMemoryWrite>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d052      	beq.n	80030dc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e081      	b.n	800313e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800303a:	697a      	ldr	r2, [r7, #20]
 800303c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800303e:	68f8      	ldr	r0, [r7, #12]
 8003040:	f001 fe80 	bl	8004d44 <I2C_WaitOnTXEFlagUntilTimeout>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d00d      	beq.n	8003066 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304e:	2b04      	cmp	r3, #4
 8003050:	d107      	bne.n	8003062 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003060:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e06b      	b.n	800313e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306a:	781a      	ldrb	r2, [r3, #0]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003076:	1c5a      	adds	r2, r3, #1
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003080:	3b01      	subs	r3, #1
 8003082:	b29a      	uxth	r2, r3
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800308c:	b29b      	uxth	r3, r3
 800308e:	3b01      	subs	r3, #1
 8003090:	b29a      	uxth	r2, r3
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	695b      	ldr	r3, [r3, #20]
 800309c:	f003 0304 	and.w	r3, r3, #4
 80030a0:	2b04      	cmp	r3, #4
 80030a2:	d11b      	bne.n	80030dc <HAL_I2C_Mem_Write+0x180>
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d017      	beq.n	80030dc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b0:	781a      	ldrb	r2, [r3, #0]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030bc:	1c5a      	adds	r2, r3, #1
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030c6:	3b01      	subs	r3, #1
 80030c8:	b29a      	uxth	r2, r3
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	3b01      	subs	r3, #1
 80030d6:	b29a      	uxth	r2, r3
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d1aa      	bne.n	800303a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030e4:	697a      	ldr	r2, [r7, #20]
 80030e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030e8:	68f8      	ldr	r0, [r7, #12]
 80030ea:	f001 fe6c 	bl	8004dc6 <I2C_WaitOnBTFFlagUntilTimeout>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d00d      	beq.n	8003110 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f8:	2b04      	cmp	r3, #4
 80030fa:	d107      	bne.n	800310c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800310a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e016      	b.n	800313e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800311e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2220      	movs	r2, #32
 8003124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2200      	movs	r2, #0
 800312c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2200      	movs	r2, #0
 8003134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003138:	2300      	movs	r3, #0
 800313a:	e000      	b.n	800313e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800313c:	2302      	movs	r3, #2
  }
}
 800313e:	4618      	mov	r0, r3
 8003140:	3718      	adds	r7, #24
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	00100002 	.word	0x00100002
 800314c:	ffff0000 	.word	0xffff0000

08003150 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b088      	sub	sp, #32
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003158:	2300      	movs	r3, #0
 800315a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003168:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003170:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003178:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800317a:	7bfb      	ldrb	r3, [r7, #15]
 800317c:	2b10      	cmp	r3, #16
 800317e:	d003      	beq.n	8003188 <HAL_I2C_EV_IRQHandler+0x38>
 8003180:	7bfb      	ldrb	r3, [r7, #15]
 8003182:	2b40      	cmp	r3, #64	; 0x40
 8003184:	f040 80c1 	bne.w	800330a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	699b      	ldr	r3, [r3, #24]
 800318e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	695b      	ldr	r3, [r3, #20]
 8003196:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	f003 0301 	and.w	r3, r3, #1
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d10d      	bne.n	80031be <HAL_I2C_EV_IRQHandler+0x6e>
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80031a8:	d003      	beq.n	80031b2 <HAL_I2C_EV_IRQHandler+0x62>
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80031b0:	d101      	bne.n	80031b6 <HAL_I2C_EV_IRQHandler+0x66>
 80031b2:	2301      	movs	r3, #1
 80031b4:	e000      	b.n	80031b8 <HAL_I2C_EV_IRQHandler+0x68>
 80031b6:	2300      	movs	r3, #0
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	f000 8132 	beq.w	8003422 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	f003 0301 	and.w	r3, r3, #1
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d00c      	beq.n	80031e2 <HAL_I2C_EV_IRQHandler+0x92>
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	0a5b      	lsrs	r3, r3, #9
 80031cc:	f003 0301 	and.w	r3, r3, #1
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d006      	beq.n	80031e2 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f001 fe98 	bl	8004f0a <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f000 fd83 	bl	8003ce6 <I2C_Master_SB>
 80031e0:	e092      	b.n	8003308 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	08db      	lsrs	r3, r3, #3
 80031e6:	f003 0301 	and.w	r3, r3, #1
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d009      	beq.n	8003202 <HAL_I2C_EV_IRQHandler+0xb2>
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	0a5b      	lsrs	r3, r3, #9
 80031f2:	f003 0301 	and.w	r3, r3, #1
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d003      	beq.n	8003202 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f000 fdf9 	bl	8003df2 <I2C_Master_ADD10>
 8003200:	e082      	b.n	8003308 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	085b      	lsrs	r3, r3, #1
 8003206:	f003 0301 	and.w	r3, r3, #1
 800320a:	2b00      	cmp	r3, #0
 800320c:	d009      	beq.n	8003222 <HAL_I2C_EV_IRQHandler+0xd2>
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	0a5b      	lsrs	r3, r3, #9
 8003212:	f003 0301 	and.w	r3, r3, #1
 8003216:	2b00      	cmp	r3, #0
 8003218:	d003      	beq.n	8003222 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f000 fe13 	bl	8003e46 <I2C_Master_ADDR>
 8003220:	e072      	b.n	8003308 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003222:	69bb      	ldr	r3, [r7, #24]
 8003224:	089b      	lsrs	r3, r3, #2
 8003226:	f003 0301 	and.w	r3, r3, #1
 800322a:	2b00      	cmp	r3, #0
 800322c:	d03b      	beq.n	80032a6 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003238:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800323c:	f000 80f3 	beq.w	8003426 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003240:	69fb      	ldr	r3, [r7, #28]
 8003242:	09db      	lsrs	r3, r3, #7
 8003244:	f003 0301 	and.w	r3, r3, #1
 8003248:	2b00      	cmp	r3, #0
 800324a:	d00f      	beq.n	800326c <HAL_I2C_EV_IRQHandler+0x11c>
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	0a9b      	lsrs	r3, r3, #10
 8003250:	f003 0301 	and.w	r3, r3, #1
 8003254:	2b00      	cmp	r3, #0
 8003256:	d009      	beq.n	800326c <HAL_I2C_EV_IRQHandler+0x11c>
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	089b      	lsrs	r3, r3, #2
 800325c:	f003 0301 	and.w	r3, r3, #1
 8003260:	2b00      	cmp	r3, #0
 8003262:	d103      	bne.n	800326c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	f000 f9f3 	bl	8003650 <I2C_MasterTransmit_TXE>
 800326a:	e04d      	b.n	8003308 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	089b      	lsrs	r3, r3, #2
 8003270:	f003 0301 	and.w	r3, r3, #1
 8003274:	2b00      	cmp	r3, #0
 8003276:	f000 80d6 	beq.w	8003426 <HAL_I2C_EV_IRQHandler+0x2d6>
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	0a5b      	lsrs	r3, r3, #9
 800327e:	f003 0301 	and.w	r3, r3, #1
 8003282:	2b00      	cmp	r3, #0
 8003284:	f000 80cf 	beq.w	8003426 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003288:	7bbb      	ldrb	r3, [r7, #14]
 800328a:	2b21      	cmp	r3, #33	; 0x21
 800328c:	d103      	bne.n	8003296 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f000 fa7a 	bl	8003788 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003294:	e0c7      	b.n	8003426 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003296:	7bfb      	ldrb	r3, [r7, #15]
 8003298:	2b40      	cmp	r3, #64	; 0x40
 800329a:	f040 80c4 	bne.w	8003426 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f000 fae8 	bl	8003874 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032a4:	e0bf      	b.n	8003426 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032b4:	f000 80b7 	beq.w	8003426 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	099b      	lsrs	r3, r3, #6
 80032bc:	f003 0301 	and.w	r3, r3, #1
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d00f      	beq.n	80032e4 <HAL_I2C_EV_IRQHandler+0x194>
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	0a9b      	lsrs	r3, r3, #10
 80032c8:	f003 0301 	and.w	r3, r3, #1
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d009      	beq.n	80032e4 <HAL_I2C_EV_IRQHandler+0x194>
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	089b      	lsrs	r3, r3, #2
 80032d4:	f003 0301 	and.w	r3, r3, #1
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d103      	bne.n	80032e4 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	f000 fb5d 	bl	800399c <I2C_MasterReceive_RXNE>
 80032e2:	e011      	b.n	8003308 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	089b      	lsrs	r3, r3, #2
 80032e8:	f003 0301 	and.w	r3, r3, #1
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	f000 809a 	beq.w	8003426 <HAL_I2C_EV_IRQHandler+0x2d6>
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	0a5b      	lsrs	r3, r3, #9
 80032f6:	f003 0301 	and.w	r3, r3, #1
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	f000 8093 	beq.w	8003426 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f000 fc06 	bl	8003b12 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003306:	e08e      	b.n	8003426 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003308:	e08d      	b.n	8003426 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330e:	2b00      	cmp	r3, #0
 8003310:	d004      	beq.n	800331c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	695b      	ldr	r3, [r3, #20]
 8003318:	61fb      	str	r3, [r7, #28]
 800331a:	e007      	b.n	800332c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	699b      	ldr	r3, [r3, #24]
 8003322:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	695b      	ldr	r3, [r3, #20]
 800332a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	085b      	lsrs	r3, r3, #1
 8003330:	f003 0301 	and.w	r3, r3, #1
 8003334:	2b00      	cmp	r3, #0
 8003336:	d012      	beq.n	800335e <HAL_I2C_EV_IRQHandler+0x20e>
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	0a5b      	lsrs	r3, r3, #9
 800333c:	f003 0301 	and.w	r3, r3, #1
 8003340:	2b00      	cmp	r3, #0
 8003342:	d00c      	beq.n	800335e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003348:	2b00      	cmp	r3, #0
 800334a:	d003      	beq.n	8003354 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	699b      	ldr	r3, [r3, #24]
 8003352:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003354:	69b9      	ldr	r1, [r7, #24]
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f000 ffc4 	bl	80042e4 <I2C_Slave_ADDR>
 800335c:	e066      	b.n	800342c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	091b      	lsrs	r3, r3, #4
 8003362:	f003 0301 	and.w	r3, r3, #1
 8003366:	2b00      	cmp	r3, #0
 8003368:	d009      	beq.n	800337e <HAL_I2C_EV_IRQHandler+0x22e>
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	0a5b      	lsrs	r3, r3, #9
 800336e:	f003 0301 	and.w	r3, r3, #1
 8003372:	2b00      	cmp	r3, #0
 8003374:	d003      	beq.n	800337e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f000 fffe 	bl	8004378 <I2C_Slave_STOPF>
 800337c:	e056      	b.n	800342c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800337e:	7bbb      	ldrb	r3, [r7, #14]
 8003380:	2b21      	cmp	r3, #33	; 0x21
 8003382:	d002      	beq.n	800338a <HAL_I2C_EV_IRQHandler+0x23a>
 8003384:	7bbb      	ldrb	r3, [r7, #14]
 8003386:	2b29      	cmp	r3, #41	; 0x29
 8003388:	d125      	bne.n	80033d6 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	09db      	lsrs	r3, r3, #7
 800338e:	f003 0301 	and.w	r3, r3, #1
 8003392:	2b00      	cmp	r3, #0
 8003394:	d00f      	beq.n	80033b6 <HAL_I2C_EV_IRQHandler+0x266>
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	0a9b      	lsrs	r3, r3, #10
 800339a:	f003 0301 	and.w	r3, r3, #1
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d009      	beq.n	80033b6 <HAL_I2C_EV_IRQHandler+0x266>
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	089b      	lsrs	r3, r3, #2
 80033a6:	f003 0301 	and.w	r3, r3, #1
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d103      	bne.n	80033b6 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f000 feda 	bl	8004168 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80033b4:	e039      	b.n	800342a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	089b      	lsrs	r3, r3, #2
 80033ba:	f003 0301 	and.w	r3, r3, #1
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d033      	beq.n	800342a <HAL_I2C_EV_IRQHandler+0x2da>
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	0a5b      	lsrs	r3, r3, #9
 80033c6:	f003 0301 	and.w	r3, r3, #1
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d02d      	beq.n	800342a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f000 ff07 	bl	80041e2 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80033d4:	e029      	b.n	800342a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	099b      	lsrs	r3, r3, #6
 80033da:	f003 0301 	and.w	r3, r3, #1
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d00f      	beq.n	8003402 <HAL_I2C_EV_IRQHandler+0x2b2>
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	0a9b      	lsrs	r3, r3, #10
 80033e6:	f003 0301 	and.w	r3, r3, #1
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d009      	beq.n	8003402 <HAL_I2C_EV_IRQHandler+0x2b2>
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	089b      	lsrs	r3, r3, #2
 80033f2:	f003 0301 	and.w	r3, r3, #1
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d103      	bne.n	8003402 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f000 ff12 	bl	8004224 <I2C_SlaveReceive_RXNE>
 8003400:	e014      	b.n	800342c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	089b      	lsrs	r3, r3, #2
 8003406:	f003 0301 	and.w	r3, r3, #1
 800340a:	2b00      	cmp	r3, #0
 800340c:	d00e      	beq.n	800342c <HAL_I2C_EV_IRQHandler+0x2dc>
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	0a5b      	lsrs	r3, r3, #9
 8003412:	f003 0301 	and.w	r3, r3, #1
 8003416:	2b00      	cmp	r3, #0
 8003418:	d008      	beq.n	800342c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f000 ff40 	bl	80042a0 <I2C_SlaveReceive_BTF>
 8003420:	e004      	b.n	800342c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8003422:	bf00      	nop
 8003424:	e002      	b.n	800342c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003426:	bf00      	nop
 8003428:	e000      	b.n	800342c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800342a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800342c:	3720      	adds	r7, #32
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}

08003432 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003432:	b580      	push	{r7, lr}
 8003434:	b08a      	sub	sp, #40	; 0x28
 8003436:	af00      	add	r7, sp, #0
 8003438:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	695b      	ldr	r3, [r3, #20]
 8003440:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800344a:	2300      	movs	r3, #0
 800344c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003454:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003456:	6a3b      	ldr	r3, [r7, #32]
 8003458:	0a1b      	lsrs	r3, r3, #8
 800345a:	f003 0301 	and.w	r3, r3, #1
 800345e:	2b00      	cmp	r3, #0
 8003460:	d00e      	beq.n	8003480 <HAL_I2C_ER_IRQHandler+0x4e>
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	0a1b      	lsrs	r3, r3, #8
 8003466:	f003 0301 	and.w	r3, r3, #1
 800346a:	2b00      	cmp	r3, #0
 800346c:	d008      	beq.n	8003480 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800346e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003470:	f043 0301 	orr.w	r3, r3, #1
 8003474:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800347e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003480:	6a3b      	ldr	r3, [r7, #32]
 8003482:	0a5b      	lsrs	r3, r3, #9
 8003484:	f003 0301 	and.w	r3, r3, #1
 8003488:	2b00      	cmp	r3, #0
 800348a:	d00e      	beq.n	80034aa <HAL_I2C_ER_IRQHandler+0x78>
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	0a1b      	lsrs	r3, r3, #8
 8003490:	f003 0301 	and.w	r3, r3, #1
 8003494:	2b00      	cmp	r3, #0
 8003496:	d008      	beq.n	80034aa <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349a:	f043 0302 	orr.w	r3, r3, #2
 800349e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80034a8:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80034aa:	6a3b      	ldr	r3, [r7, #32]
 80034ac:	0a9b      	lsrs	r3, r3, #10
 80034ae:	f003 0301 	and.w	r3, r3, #1
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d03f      	beq.n	8003536 <HAL_I2C_ER_IRQHandler+0x104>
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	0a1b      	lsrs	r3, r3, #8
 80034ba:	f003 0301 	and.w	r3, r3, #1
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d039      	beq.n	8003536 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80034c2:	7efb      	ldrb	r3, [r7, #27]
 80034c4:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034d4:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034da:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80034dc:	7ebb      	ldrb	r3, [r7, #26]
 80034de:	2b20      	cmp	r3, #32
 80034e0:	d112      	bne.n	8003508 <HAL_I2C_ER_IRQHandler+0xd6>
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d10f      	bne.n	8003508 <HAL_I2C_ER_IRQHandler+0xd6>
 80034e8:	7cfb      	ldrb	r3, [r7, #19]
 80034ea:	2b21      	cmp	r3, #33	; 0x21
 80034ec:	d008      	beq.n	8003500 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80034ee:	7cfb      	ldrb	r3, [r7, #19]
 80034f0:	2b29      	cmp	r3, #41	; 0x29
 80034f2:	d005      	beq.n	8003500 <HAL_I2C_ER_IRQHandler+0xce>
 80034f4:	7cfb      	ldrb	r3, [r7, #19]
 80034f6:	2b28      	cmp	r3, #40	; 0x28
 80034f8:	d106      	bne.n	8003508 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2b21      	cmp	r3, #33	; 0x21
 80034fe:	d103      	bne.n	8003508 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f001 f869 	bl	80045d8 <I2C_Slave_AF>
 8003506:	e016      	b.n	8003536 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003510:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003514:	f043 0304 	orr.w	r3, r3, #4
 8003518:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800351a:	7efb      	ldrb	r3, [r7, #27]
 800351c:	2b10      	cmp	r3, #16
 800351e:	d002      	beq.n	8003526 <HAL_I2C_ER_IRQHandler+0xf4>
 8003520:	7efb      	ldrb	r3, [r7, #27]
 8003522:	2b40      	cmp	r3, #64	; 0x40
 8003524:	d107      	bne.n	8003536 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003534:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003536:	6a3b      	ldr	r3, [r7, #32]
 8003538:	0adb      	lsrs	r3, r3, #11
 800353a:	f003 0301 	and.w	r3, r3, #1
 800353e:	2b00      	cmp	r3, #0
 8003540:	d00e      	beq.n	8003560 <HAL_I2C_ER_IRQHandler+0x12e>
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	0a1b      	lsrs	r3, r3, #8
 8003546:	f003 0301 	and.w	r3, r3, #1
 800354a:	2b00      	cmp	r3, #0
 800354c:	d008      	beq.n	8003560 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800354e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003550:	f043 0308 	orr.w	r3, r3, #8
 8003554:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800355e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003562:	2b00      	cmp	r3, #0
 8003564:	d008      	beq.n	8003578 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800356a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356c:	431a      	orrs	r2, r3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f001 f8a0 	bl	80046b8 <I2C_ITError>
  }
}
 8003578:	bf00      	nop
 800357a:	3728      	adds	r7, #40	; 0x28
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}

08003580 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003580:	b480      	push	{r7}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003588:	bf00      	nop
 800358a:	370c      	adds	r7, #12
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr

08003594 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800359c:	bf00      	nop
 800359e:	370c      	adds	r7, #12
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr

080035a8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80035b0:	bf00      	nop
 80035b2:	370c      	adds	r7, #12
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr

080035bc <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80035c4:	bf00      	nop
 80035c6:	370c      	adds	r7, #12
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr

080035d0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b083      	sub	sp, #12
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	460b      	mov	r3, r1
 80035da:	70fb      	strb	r3, [r7, #3]
 80035dc:	4613      	mov	r3, r2
 80035de:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80035e0:	bf00      	nop
 80035e2:	370c      	adds	r7, #12
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr

080035ec <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80035f4:	bf00      	nop
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr

08003600 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003608:	bf00      	nop
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003614:	b480      	push	{r7}
 8003616:	b083      	sub	sp, #12
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800361c:	bf00      	nop
 800361e:	370c      	adds	r7, #12
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr

08003628 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003630:	bf00      	nop
 8003632:	370c      	adds	r7, #12
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr

0800363c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003644:	bf00      	nop
 8003646:	370c      	adds	r7, #12
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr

08003650 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b084      	sub	sp, #16
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800365e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003666:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800366c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003672:	2b00      	cmp	r3, #0
 8003674:	d150      	bne.n	8003718 <I2C_MasterTransmit_TXE+0xc8>
 8003676:	7bfb      	ldrb	r3, [r7, #15]
 8003678:	2b21      	cmp	r3, #33	; 0x21
 800367a:	d14d      	bne.n	8003718 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	2b08      	cmp	r3, #8
 8003680:	d01d      	beq.n	80036be <I2C_MasterTransmit_TXE+0x6e>
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	2b20      	cmp	r3, #32
 8003686:	d01a      	beq.n	80036be <I2C_MasterTransmit_TXE+0x6e>
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800368e:	d016      	beq.n	80036be <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	685a      	ldr	r2, [r3, #4]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800369e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2211      	movs	r2, #17
 80036a4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2220      	movs	r2, #32
 80036b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f7ff ff62 	bl	8003580 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80036bc:	e060      	b.n	8003780 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	685a      	ldr	r2, [r3, #4]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80036cc:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036dc:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2220      	movs	r2, #32
 80036e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	2b40      	cmp	r3, #64	; 0x40
 80036f6:	d107      	bne.n	8003708 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f7ff ff7d 	bl	8003600 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003706:	e03b      	b.n	8003780 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2200      	movs	r2, #0
 800370c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f7ff ff35 	bl	8003580 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003716:	e033      	b.n	8003780 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003718:	7bfb      	ldrb	r3, [r7, #15]
 800371a:	2b21      	cmp	r3, #33	; 0x21
 800371c:	d005      	beq.n	800372a <I2C_MasterTransmit_TXE+0xda>
 800371e:	7bbb      	ldrb	r3, [r7, #14]
 8003720:	2b40      	cmp	r3, #64	; 0x40
 8003722:	d12d      	bne.n	8003780 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003724:	7bfb      	ldrb	r3, [r7, #15]
 8003726:	2b22      	cmp	r3, #34	; 0x22
 8003728:	d12a      	bne.n	8003780 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800372e:	b29b      	uxth	r3, r3
 8003730:	2b00      	cmp	r3, #0
 8003732:	d108      	bne.n	8003746 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	685a      	ldr	r2, [r3, #4]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003742:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003744:	e01c      	b.n	8003780 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800374c:	b2db      	uxtb	r3, r3
 800374e:	2b40      	cmp	r3, #64	; 0x40
 8003750:	d103      	bne.n	800375a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f000 f88e 	bl	8003874 <I2C_MemoryTransmit_TXE_BTF>
}
 8003758:	e012      	b.n	8003780 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375e:	781a      	ldrb	r2, [r3, #0]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376a:	1c5a      	adds	r2, r3, #1
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003774:	b29b      	uxth	r3, r3
 8003776:	3b01      	subs	r3, #1
 8003778:	b29a      	uxth	r2, r3
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800377e:	e7ff      	b.n	8003780 <I2C_MasterTransmit_TXE+0x130>
 8003780:	bf00      	nop
 8003782:	3710      	adds	r7, #16
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}

08003788 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003794:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800379c:	b2db      	uxtb	r3, r3
 800379e:	2b21      	cmp	r3, #33	; 0x21
 80037a0:	d164      	bne.n	800386c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d012      	beq.n	80037d2 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b0:	781a      	ldrb	r2, [r3, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037bc:	1c5a      	adds	r2, r3, #1
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	3b01      	subs	r3, #1
 80037ca:	b29a      	uxth	r2, r3
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80037d0:	e04c      	b.n	800386c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2b08      	cmp	r3, #8
 80037d6:	d01d      	beq.n	8003814 <I2C_MasterTransmit_BTF+0x8c>
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2b20      	cmp	r3, #32
 80037dc:	d01a      	beq.n	8003814 <I2C_MasterTransmit_BTF+0x8c>
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80037e4:	d016      	beq.n	8003814 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	685a      	ldr	r2, [r3, #4]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80037f4:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2211      	movs	r2, #17
 80037fa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2220      	movs	r2, #32
 8003808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f7ff feb7 	bl	8003580 <HAL_I2C_MasterTxCpltCallback>
}
 8003812:	e02b      	b.n	800386c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	685a      	ldr	r2, [r3, #4]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003822:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003832:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2220      	movs	r2, #32
 800383e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003848:	b2db      	uxtb	r3, r3
 800384a:	2b40      	cmp	r3, #64	; 0x40
 800384c:	d107      	bne.n	800385e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f7ff fed2 	bl	8003600 <HAL_I2C_MemTxCpltCallback>
}
 800385c:	e006      	b.n	800386c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f7ff fe8a 	bl	8003580 <HAL_I2C_MasterTxCpltCallback>
}
 800386c:	bf00      	nop
 800386e:	3710      	adds	r7, #16
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}

08003874 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003882:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003888:	2b00      	cmp	r3, #0
 800388a:	d11d      	bne.n	80038c8 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003890:	2b01      	cmp	r3, #1
 8003892:	d10b      	bne.n	80038ac <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003898:	b2da      	uxtb	r2, r3
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038a4:	1c9a      	adds	r2, r3, #2
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80038aa:	e073      	b.n	8003994 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	121b      	asrs	r3, r3, #8
 80038b4:	b2da      	uxtb	r2, r3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038c0:	1c5a      	adds	r2, r3, #1
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80038c6:	e065      	b.n	8003994 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d10b      	bne.n	80038e8 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038d4:	b2da      	uxtb	r2, r3
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038e0:	1c5a      	adds	r2, r3, #1
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80038e6:	e055      	b.n	8003994 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038ec:	2b02      	cmp	r3, #2
 80038ee:	d151      	bne.n	8003994 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80038f0:	7bfb      	ldrb	r3, [r7, #15]
 80038f2:	2b22      	cmp	r3, #34	; 0x22
 80038f4:	d10d      	bne.n	8003912 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003904:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800390a:	1c5a      	adds	r2, r3, #1
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003910:	e040      	b.n	8003994 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003916:	b29b      	uxth	r3, r3
 8003918:	2b00      	cmp	r3, #0
 800391a:	d015      	beq.n	8003948 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800391c:	7bfb      	ldrb	r3, [r7, #15]
 800391e:	2b21      	cmp	r3, #33	; 0x21
 8003920:	d112      	bne.n	8003948 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003926:	781a      	ldrb	r2, [r3, #0]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003932:	1c5a      	adds	r2, r3, #1
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800393c:	b29b      	uxth	r3, r3
 800393e:	3b01      	subs	r3, #1
 8003940:	b29a      	uxth	r2, r3
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003946:	e025      	b.n	8003994 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800394c:	b29b      	uxth	r3, r3
 800394e:	2b00      	cmp	r3, #0
 8003950:	d120      	bne.n	8003994 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8003952:	7bfb      	ldrb	r3, [r7, #15]
 8003954:	2b21      	cmp	r3, #33	; 0x21
 8003956:	d11d      	bne.n	8003994 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	685a      	ldr	r2, [r3, #4]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003966:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003976:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2220      	movs	r2, #32
 8003982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f7ff fe36 	bl	8003600 <HAL_I2C_MemTxCpltCallback>
}
 8003994:	bf00      	nop
 8003996:	3710      	adds	r7, #16
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}

0800399c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	2b22      	cmp	r3, #34	; 0x22
 80039ae:	f040 80ac 	bne.w	8003b0a <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2b03      	cmp	r3, #3
 80039be:	d921      	bls.n	8003a04 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	691a      	ldr	r2, [r3, #16]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ca:	b2d2      	uxtb	r2, r2
 80039cc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d2:	1c5a      	adds	r2, r3, #1
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039dc:	b29b      	uxth	r3, r3
 80039de:	3b01      	subs	r3, #1
 80039e0:	b29a      	uxth	r2, r3
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	2b03      	cmp	r3, #3
 80039ee:	f040 808c 	bne.w	8003b0a <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	685a      	ldr	r2, [r3, #4]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a00:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003a02:	e082      	b.n	8003b0a <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a08:	2b02      	cmp	r3, #2
 8003a0a:	d075      	beq.n	8003af8 <I2C_MasterReceive_RXNE+0x15c>
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d002      	beq.n	8003a18 <I2C_MasterReceive_RXNE+0x7c>
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d16f      	bne.n	8003af8 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f001 fa15 	bl	8004e48 <I2C_WaitOnSTOPRequestThroughIT>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d142      	bne.n	8003aaa <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a32:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	685a      	ldr	r2, [r3, #4]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a42:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	691a      	ldr	r2, [r3, #16]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4e:	b2d2      	uxtb	r2, r2
 8003a50:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a56:	1c5a      	adds	r2, r3, #1
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	3b01      	subs	r3, #1
 8003a64:	b29a      	uxth	r2, r3
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2220      	movs	r2, #32
 8003a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	2b40      	cmp	r3, #64	; 0x40
 8003a7c:	d10a      	bne.n	8003a94 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f7ff fdc1 	bl	8003614 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003a92:	e03a      	b.n	8003b0a <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2212      	movs	r2, #18
 8003aa0:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f7ff fd76 	bl	8003594 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003aa8:	e02f      	b.n	8003b0a <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	685a      	ldr	r2, [r3, #4]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003ab8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	691a      	ldr	r2, [r3, #16]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac4:	b2d2      	uxtb	r2, r2
 8003ac6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003acc:	1c5a      	adds	r2, r3, #1
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	3b01      	subs	r3, #1
 8003ada:	b29a      	uxth	r2, r3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2220      	movs	r2, #32
 8003ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f7ff fd99 	bl	8003628 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003af6:	e008      	b.n	8003b0a <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	685a      	ldr	r2, [r3, #4]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b06:	605a      	str	r2, [r3, #4]
}
 8003b08:	e7ff      	b.n	8003b0a <I2C_MasterReceive_RXNE+0x16e>
 8003b0a:	bf00      	nop
 8003b0c:	3710      	adds	r7, #16
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}

08003b12 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003b12:	b580      	push	{r7, lr}
 8003b14:	b084      	sub	sp, #16
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b1e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	2b04      	cmp	r3, #4
 8003b28:	d11b      	bne.n	8003b62 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	685a      	ldr	r2, [r3, #4]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b38:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	691a      	ldr	r2, [r3, #16]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b44:	b2d2      	uxtb	r2, r2
 8003b46:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4c:	1c5a      	adds	r2, r3, #1
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b56:	b29b      	uxth	r3, r3
 8003b58:	3b01      	subs	r3, #1
 8003b5a:	b29a      	uxth	r2, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003b60:	e0bd      	b.n	8003cde <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	2b03      	cmp	r3, #3
 8003b6a:	d129      	bne.n	8003bc0 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	685a      	ldr	r2, [r3, #4]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b7a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2b04      	cmp	r3, #4
 8003b80:	d00a      	beq.n	8003b98 <I2C_MasterReceive_BTF+0x86>
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2b02      	cmp	r3, #2
 8003b86:	d007      	beq.n	8003b98 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b96:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	691a      	ldr	r2, [r3, #16]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba2:	b2d2      	uxtb	r2, r2
 8003ba4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003baa:	1c5a      	adds	r2, r3, #1
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	3b01      	subs	r3, #1
 8003bb8:	b29a      	uxth	r2, r3
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003bbe:	e08e      	b.n	8003cde <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	2b02      	cmp	r3, #2
 8003bc8:	d176      	bne.n	8003cb8 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d002      	beq.n	8003bd6 <I2C_MasterReceive_BTF+0xc4>
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2b10      	cmp	r3, #16
 8003bd4:	d108      	bne.n	8003be8 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003be4:	601a      	str	r2, [r3, #0]
 8003be6:	e019      	b.n	8003c1c <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2b04      	cmp	r3, #4
 8003bec:	d002      	beq.n	8003bf4 <I2C_MasterReceive_BTF+0xe2>
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d108      	bne.n	8003c06 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003c02:	601a      	str	r2, [r3, #0]
 8003c04:	e00a      	b.n	8003c1c <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2b10      	cmp	r3, #16
 8003c0a:	d007      	beq.n	8003c1c <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c1a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	691a      	ldr	r2, [r3, #16]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c26:	b2d2      	uxtb	r2, r2
 8003c28:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2e:	1c5a      	adds	r2, r3, #1
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c38:	b29b      	uxth	r3, r3
 8003c3a:	3b01      	subs	r3, #1
 8003c3c:	b29a      	uxth	r2, r3
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	691a      	ldr	r2, [r3, #16]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4c:	b2d2      	uxtb	r2, r2
 8003c4e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c54:	1c5a      	adds	r2, r3, #1
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	3b01      	subs	r3, #1
 8003c62:	b29a      	uxth	r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	685a      	ldr	r2, [r3, #4]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003c76:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2220      	movs	r2, #32
 8003c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	2b40      	cmp	r3, #64	; 0x40
 8003c8a:	d10a      	bne.n	8003ca2 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f7ff fcba 	bl	8003614 <HAL_I2C_MemRxCpltCallback>
}
 8003ca0:	e01d      	b.n	8003cde <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2212      	movs	r2, #18
 8003cae:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f7ff fc6f 	bl	8003594 <HAL_I2C_MasterRxCpltCallback>
}
 8003cb6:	e012      	b.n	8003cde <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	691a      	ldr	r2, [r3, #16]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc2:	b2d2      	uxtb	r2, r2
 8003cc4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cca:	1c5a      	adds	r2, r3, #1
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	3b01      	subs	r3, #1
 8003cd8:	b29a      	uxth	r2, r3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003cde:	bf00      	nop
 8003ce0:	3710      	adds	r7, #16
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}

08003ce6 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003ce6:	b480      	push	{r7}
 8003ce8:	b083      	sub	sp, #12
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	2b40      	cmp	r3, #64	; 0x40
 8003cf8:	d117      	bne.n	8003d2a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d109      	bne.n	8003d16 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	461a      	mov	r2, r3
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003d12:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003d14:	e067      	b.n	8003de6 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	f043 0301 	orr.w	r3, r3, #1
 8003d20:	b2da      	uxtb	r2, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	611a      	str	r2, [r3, #16]
}
 8003d28:	e05d      	b.n	8003de6 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	691b      	ldr	r3, [r3, #16]
 8003d2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d32:	d133      	bne.n	8003d9c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	2b21      	cmp	r3, #33	; 0x21
 8003d3e:	d109      	bne.n	8003d54 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	461a      	mov	r2, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003d50:	611a      	str	r2, [r3, #16]
 8003d52:	e008      	b.n	8003d66 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	f043 0301 	orr.w	r3, r3, #1
 8003d5e:	b2da      	uxtb	r2, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d004      	beq.n	8003d78 <I2C_Master_SB+0x92>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d108      	bne.n	8003d8a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d032      	beq.n	8003de6 <I2C_Master_SB+0x100>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d02d      	beq.n	8003de6 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	685a      	ldr	r2, [r3, #4]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d98:	605a      	str	r2, [r3, #4]
}
 8003d9a:	e024      	b.n	8003de6 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d10e      	bne.n	8003dc2 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	11db      	asrs	r3, r3, #7
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	f003 0306 	and.w	r3, r3, #6
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	f063 030f 	orn	r3, r3, #15
 8003db8:	b2da      	uxtb	r2, r3
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	611a      	str	r2, [r3, #16]
}
 8003dc0:	e011      	b.n	8003de6 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d10d      	bne.n	8003de6 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	11db      	asrs	r3, r3, #7
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	f003 0306 	and.w	r3, r3, #6
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	f063 030e 	orn	r3, r3, #14
 8003dde:	b2da      	uxtb	r2, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	611a      	str	r2, [r3, #16]
}
 8003de6:	bf00      	nop
 8003de8:	370c      	adds	r7, #12
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr

08003df2 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003df2:	b480      	push	{r7}
 8003df4:	b083      	sub	sp, #12
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dfe:	b2da      	uxtb	r2, r3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d004      	beq.n	8003e18 <I2C_Master_ADD10+0x26>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d108      	bne.n	8003e2a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d00c      	beq.n	8003e3a <I2C_Master_ADD10+0x48>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d007      	beq.n	8003e3a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	685a      	ldr	r2, [r3, #4]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e38:	605a      	str	r2, [r3, #4]
  }
}
 8003e3a:	bf00      	nop
 8003e3c:	370c      	adds	r7, #12
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr

08003e46 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003e46:	b480      	push	{r7}
 8003e48:	b091      	sub	sp, #68	; 0x44
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e54:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e5c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e62:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	2b22      	cmp	r3, #34	; 0x22
 8003e6e:	f040 8169 	bne.w	8004144 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d10f      	bne.n	8003e9a <I2C_Master_ADDR+0x54>
 8003e7a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003e7e:	2b40      	cmp	r3, #64	; 0x40
 8003e80:	d10b      	bne.n	8003e9a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e82:	2300      	movs	r3, #0
 8003e84:	633b      	str	r3, [r7, #48]	; 0x30
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	695b      	ldr	r3, [r3, #20]
 8003e8c:	633b      	str	r3, [r7, #48]	; 0x30
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	699b      	ldr	r3, [r3, #24]
 8003e94:	633b      	str	r3, [r7, #48]	; 0x30
 8003e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e98:	e160      	b.n	800415c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d11d      	bne.n	8003ede <I2C_Master_ADDR+0x98>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	691b      	ldr	r3, [r3, #16]
 8003ea6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003eaa:	d118      	bne.n	8003ede <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003eac:	2300      	movs	r3, #0
 8003eae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	695b      	ldr	r3, [r3, #20]
 8003eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	699b      	ldr	r3, [r3, #24]
 8003ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ed0:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ed6:	1c5a      	adds	r2, r3, #1
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	651a      	str	r2, [r3, #80]	; 0x50
 8003edc:	e13e      	b.n	800415c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d113      	bne.n	8003f10 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ee8:	2300      	movs	r3, #0
 8003eea:	62bb      	str	r3, [r7, #40]	; 0x28
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	695b      	ldr	r3, [r3, #20]
 8003ef2:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	699b      	ldr	r3, [r3, #24]
 8003efa:	62bb      	str	r3, [r7, #40]	; 0x28
 8003efc:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f0c:	601a      	str	r2, [r3, #0]
 8003f0e:	e115      	b.n	800413c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	f040 808a 	bne.w	8004030 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f1e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003f22:	d137      	bne.n	8003f94 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f32:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f42:	d113      	bne.n	8003f6c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f52:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f54:	2300      	movs	r3, #0
 8003f56:	627b      	str	r3, [r7, #36]	; 0x24
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	695b      	ldr	r3, [r3, #20]
 8003f5e:	627b      	str	r3, [r7, #36]	; 0x24
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	699b      	ldr	r3, [r3, #24]
 8003f66:	627b      	str	r3, [r7, #36]	; 0x24
 8003f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6a:	e0e7      	b.n	800413c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	623b      	str	r3, [r7, #32]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	695b      	ldr	r3, [r3, #20]
 8003f76:	623b      	str	r3, [r7, #32]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	699b      	ldr	r3, [r3, #24]
 8003f7e:	623b      	str	r3, [r7, #32]
 8003f80:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f90:	601a      	str	r2, [r3, #0]
 8003f92:	e0d3      	b.n	800413c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f96:	2b08      	cmp	r3, #8
 8003f98:	d02e      	beq.n	8003ff8 <I2C_Master_ADDR+0x1b2>
 8003f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f9c:	2b20      	cmp	r3, #32
 8003f9e:	d02b      	beq.n	8003ff8 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003fa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fa2:	2b12      	cmp	r3, #18
 8003fa4:	d102      	bne.n	8003fac <I2C_Master_ADDR+0x166>
 8003fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d125      	bne.n	8003ff8 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fae:	2b04      	cmp	r3, #4
 8003fb0:	d00e      	beq.n	8003fd0 <I2C_Master_ADDR+0x18a>
 8003fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d00b      	beq.n	8003fd0 <I2C_Master_ADDR+0x18a>
 8003fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fba:	2b10      	cmp	r3, #16
 8003fbc:	d008      	beq.n	8003fd0 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fcc:	601a      	str	r2, [r3, #0]
 8003fce:	e007      	b.n	8003fe0 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003fde:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	61fb      	str	r3, [r7, #28]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	695b      	ldr	r3, [r3, #20]
 8003fea:	61fb      	str	r3, [r7, #28]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	699b      	ldr	r3, [r3, #24]
 8003ff2:	61fb      	str	r3, [r7, #28]
 8003ff4:	69fb      	ldr	r3, [r7, #28]
 8003ff6:	e0a1      	b.n	800413c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004006:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004008:	2300      	movs	r3, #0
 800400a:	61bb      	str	r3, [r7, #24]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	695b      	ldr	r3, [r3, #20]
 8004012:	61bb      	str	r3, [r7, #24]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	699b      	ldr	r3, [r3, #24]
 800401a:	61bb      	str	r3, [r7, #24]
 800401c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800402c:	601a      	str	r2, [r3, #0]
 800402e:	e085      	b.n	800413c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004034:	b29b      	uxth	r3, r3
 8004036:	2b02      	cmp	r3, #2
 8004038:	d14d      	bne.n	80040d6 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800403a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800403c:	2b04      	cmp	r3, #4
 800403e:	d016      	beq.n	800406e <I2C_Master_ADDR+0x228>
 8004040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004042:	2b02      	cmp	r3, #2
 8004044:	d013      	beq.n	800406e <I2C_Master_ADDR+0x228>
 8004046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004048:	2b10      	cmp	r3, #16
 800404a:	d010      	beq.n	800406e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800405a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800406a:	601a      	str	r2, [r3, #0]
 800406c:	e007      	b.n	800407e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800407c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004088:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800408c:	d117      	bne.n	80040be <I2C_Master_ADDR+0x278>
 800408e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004090:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004094:	d00b      	beq.n	80040ae <I2C_Master_ADDR+0x268>
 8004096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004098:	2b01      	cmp	r3, #1
 800409a:	d008      	beq.n	80040ae <I2C_Master_ADDR+0x268>
 800409c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800409e:	2b08      	cmp	r3, #8
 80040a0:	d005      	beq.n	80040ae <I2C_Master_ADDR+0x268>
 80040a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040a4:	2b10      	cmp	r3, #16
 80040a6:	d002      	beq.n	80040ae <I2C_Master_ADDR+0x268>
 80040a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040aa:	2b20      	cmp	r3, #32
 80040ac:	d107      	bne.n	80040be <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	685a      	ldr	r2, [r3, #4]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80040bc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040be:	2300      	movs	r3, #0
 80040c0:	617b      	str	r3, [r7, #20]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	695b      	ldr	r3, [r3, #20]
 80040c8:	617b      	str	r3, [r7, #20]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	699b      	ldr	r3, [r3, #24]
 80040d0:	617b      	str	r3, [r7, #20]
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	e032      	b.n	800413c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80040e4:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040f4:	d117      	bne.n	8004126 <I2C_Master_ADDR+0x2e0>
 80040f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040f8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80040fc:	d00b      	beq.n	8004116 <I2C_Master_ADDR+0x2d0>
 80040fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004100:	2b01      	cmp	r3, #1
 8004102:	d008      	beq.n	8004116 <I2C_Master_ADDR+0x2d0>
 8004104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004106:	2b08      	cmp	r3, #8
 8004108:	d005      	beq.n	8004116 <I2C_Master_ADDR+0x2d0>
 800410a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800410c:	2b10      	cmp	r3, #16
 800410e:	d002      	beq.n	8004116 <I2C_Master_ADDR+0x2d0>
 8004110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004112:	2b20      	cmp	r3, #32
 8004114:	d107      	bne.n	8004126 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	685a      	ldr	r2, [r3, #4]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004124:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004126:	2300      	movs	r3, #0
 8004128:	613b      	str	r3, [r7, #16]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	695b      	ldr	r3, [r3, #20]
 8004130:	613b      	str	r3, [r7, #16]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	699b      	ldr	r3, [r3, #24]
 8004138:	613b      	str	r3, [r7, #16]
 800413a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004142:	e00b      	b.n	800415c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004144:	2300      	movs	r3, #0
 8004146:	60fb      	str	r3, [r7, #12]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	695b      	ldr	r3, [r3, #20]
 800414e:	60fb      	str	r3, [r7, #12]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	699b      	ldr	r3, [r3, #24]
 8004156:	60fb      	str	r3, [r7, #12]
 8004158:	68fb      	ldr	r3, [r7, #12]
}
 800415a:	e7ff      	b.n	800415c <I2C_Master_ADDR+0x316>
 800415c:	bf00      	nop
 800415e:	3744      	adds	r7, #68	; 0x44
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr

08004168 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b084      	sub	sp, #16
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004176:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800417c:	b29b      	uxth	r3, r3
 800417e:	2b00      	cmp	r3, #0
 8004180:	d02b      	beq.n	80041da <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004186:	781a      	ldrb	r2, [r3, #0]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004192:	1c5a      	adds	r2, r3, #1
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800419c:	b29b      	uxth	r3, r3
 800419e:	3b01      	subs	r3, #1
 80041a0:	b29a      	uxth	r2, r3
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d114      	bne.n	80041da <I2C_SlaveTransmit_TXE+0x72>
 80041b0:	7bfb      	ldrb	r3, [r7, #15]
 80041b2:	2b29      	cmp	r3, #41	; 0x29
 80041b4:	d111      	bne.n	80041da <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	685a      	ldr	r2, [r3, #4]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041c4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2221      	movs	r2, #33	; 0x21
 80041ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2228      	movs	r2, #40	; 0x28
 80041d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f7ff f9e7 	bl	80035a8 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80041da:	bf00      	nop
 80041dc:	3710      	adds	r7, #16
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}

080041e2 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80041e2:	b480      	push	{r7}
 80041e4:	b083      	sub	sp, #12
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d011      	beq.n	8004218 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f8:	781a      	ldrb	r2, [r3, #0]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004204:	1c5a      	adds	r2, r3, #1
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800420e:	b29b      	uxth	r3, r3
 8004210:	3b01      	subs	r3, #1
 8004212:	b29a      	uxth	r2, r3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004218:	bf00      	nop
 800421a:	370c      	adds	r7, #12
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr

08004224 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b084      	sub	sp, #16
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004232:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004238:	b29b      	uxth	r3, r3
 800423a:	2b00      	cmp	r3, #0
 800423c:	d02c      	beq.n	8004298 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	691a      	ldr	r2, [r3, #16]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004248:	b2d2      	uxtb	r2, r2
 800424a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004250:	1c5a      	adds	r2, r3, #1
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800425a:	b29b      	uxth	r3, r3
 800425c:	3b01      	subs	r3, #1
 800425e:	b29a      	uxth	r2, r3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004268:	b29b      	uxth	r3, r3
 800426a:	2b00      	cmp	r3, #0
 800426c:	d114      	bne.n	8004298 <I2C_SlaveReceive_RXNE+0x74>
 800426e:	7bfb      	ldrb	r3, [r7, #15]
 8004270:	2b2a      	cmp	r3, #42	; 0x2a
 8004272:	d111      	bne.n	8004298 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	685a      	ldr	r2, [r3, #4]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004282:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2222      	movs	r2, #34	; 0x22
 8004288:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2228      	movs	r2, #40	; 0x28
 800428e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f7ff f992 	bl	80035bc <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004298:	bf00      	nop
 800429a:	3710      	adds	r7, #16
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}

080042a0 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d012      	beq.n	80042d8 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	691a      	ldr	r2, [r3, #16]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042bc:	b2d2      	uxtb	r2, r2
 80042be:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c4:	1c5a      	adds	r2, r3, #1
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	3b01      	subs	r3, #1
 80042d2:	b29a      	uxth	r2, r3
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80042d8:	bf00      	nop
 80042da:	370c      	adds	r7, #12
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr

080042e4 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b084      	sub	sp, #16
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80042ee:	2300      	movs	r3, #0
 80042f0:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80042fe:	2b28      	cmp	r3, #40	; 0x28
 8004300:	d127      	bne.n	8004352 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	685a      	ldr	r2, [r3, #4]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004310:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	089b      	lsrs	r3, r3, #2
 8004316:	f003 0301 	and.w	r3, r3, #1
 800431a:	2b00      	cmp	r3, #0
 800431c:	d101      	bne.n	8004322 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800431e:	2301      	movs	r3, #1
 8004320:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	09db      	lsrs	r3, r3, #7
 8004326:	f003 0301 	and.w	r3, r3, #1
 800432a:	2b00      	cmp	r3, #0
 800432c:	d103      	bne.n	8004336 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	81bb      	strh	r3, [r7, #12]
 8004334:	e002      	b.n	800433c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	699b      	ldr	r3, [r3, #24]
 800433a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2200      	movs	r2, #0
 8004340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004344:	89ba      	ldrh	r2, [r7, #12]
 8004346:	7bfb      	ldrb	r3, [r7, #15]
 8004348:	4619      	mov	r1, r3
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f7ff f940 	bl	80035d0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004350:	e00e      	b.n	8004370 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004352:	2300      	movs	r3, #0
 8004354:	60bb      	str	r3, [r7, #8]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	695b      	ldr	r3, [r3, #20]
 800435c:	60bb      	str	r3, [r7, #8]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	699b      	ldr	r3, [r3, #24]
 8004364:	60bb      	str	r3, [r7, #8]
 8004366:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004370:	bf00      	nop
 8004372:	3710      	adds	r7, #16
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}

08004378 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b084      	sub	sp, #16
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004386:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	685a      	ldr	r2, [r3, #4]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004396:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004398:	2300      	movs	r3, #0
 800439a:	60bb      	str	r3, [r7, #8]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	695b      	ldr	r3, [r3, #20]
 80043a2:	60bb      	str	r3, [r7, #8]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f042 0201 	orr.w	r2, r2, #1
 80043b2:	601a      	str	r2, [r3, #0]
 80043b4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043c4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043d4:	d172      	bne.n	80044bc <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80043d6:	7bfb      	ldrb	r3, [r7, #15]
 80043d8:	2b22      	cmp	r3, #34	; 0x22
 80043da:	d002      	beq.n	80043e2 <I2C_Slave_STOPF+0x6a>
 80043dc:	7bfb      	ldrb	r3, [r7, #15]
 80043de:	2b2a      	cmp	r3, #42	; 0x2a
 80043e0:	d135      	bne.n	800444e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	b29a      	uxth	r2, r3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043f4:	b29b      	uxth	r3, r3
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d005      	beq.n	8004406 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fe:	f043 0204 	orr.w	r2, r3, #4
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	685a      	ldr	r2, [r3, #4]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004414:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800441a:	4618      	mov	r0, r3
 800441c:	f7fe fa7b 	bl	8002916 <HAL_DMA_GetState>
 8004420:	4603      	mov	r3, r0
 8004422:	2b01      	cmp	r3, #1
 8004424:	d049      	beq.n	80044ba <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800442a:	4a69      	ldr	r2, [pc, #420]	; (80045d0 <I2C_Slave_STOPF+0x258>)
 800442c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004432:	4618      	mov	r0, r3
 8004434:	f7fe fa4d 	bl	80028d2 <HAL_DMA_Abort_IT>
 8004438:	4603      	mov	r3, r0
 800443a:	2b00      	cmp	r3, #0
 800443c:	d03d      	beq.n	80044ba <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004442:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004444:	687a      	ldr	r2, [r7, #4]
 8004446:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004448:	4610      	mov	r0, r2
 800444a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800444c:	e035      	b.n	80044ba <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	b29a      	uxth	r2, r3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004460:	b29b      	uxth	r3, r3
 8004462:	2b00      	cmp	r3, #0
 8004464:	d005      	beq.n	8004472 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446a:	f043 0204 	orr.w	r2, r3, #4
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	685a      	ldr	r2, [r3, #4]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004480:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004486:	4618      	mov	r0, r3
 8004488:	f7fe fa45 	bl	8002916 <HAL_DMA_GetState>
 800448c:	4603      	mov	r3, r0
 800448e:	2b01      	cmp	r3, #1
 8004490:	d014      	beq.n	80044bc <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004496:	4a4e      	ldr	r2, [pc, #312]	; (80045d0 <I2C_Slave_STOPF+0x258>)
 8004498:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800449e:	4618      	mov	r0, r3
 80044a0:	f7fe fa17 	bl	80028d2 <HAL_DMA_Abort_IT>
 80044a4:	4603      	mov	r3, r0
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d008      	beq.n	80044bc <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80044b4:	4610      	mov	r0, r2
 80044b6:	4798      	blx	r3
 80044b8:	e000      	b.n	80044bc <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80044ba:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d03e      	beq.n	8004544 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	695b      	ldr	r3, [r3, #20]
 80044cc:	f003 0304 	and.w	r3, r3, #4
 80044d0:	2b04      	cmp	r3, #4
 80044d2:	d112      	bne.n	80044fa <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	691a      	ldr	r2, [r3, #16]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044de:	b2d2      	uxtb	r2, r2
 80044e0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e6:	1c5a      	adds	r2, r3, #1
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	3b01      	subs	r3, #1
 80044f4:	b29a      	uxth	r2, r3
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	695b      	ldr	r3, [r3, #20]
 8004500:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004504:	2b40      	cmp	r3, #64	; 0x40
 8004506:	d112      	bne.n	800452e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	691a      	ldr	r2, [r3, #16]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004512:	b2d2      	uxtb	r2, r2
 8004514:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800451a:	1c5a      	adds	r2, r3, #1
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004524:	b29b      	uxth	r3, r3
 8004526:	3b01      	subs	r3, #1
 8004528:	b29a      	uxth	r2, r3
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004532:	b29b      	uxth	r3, r3
 8004534:	2b00      	cmp	r3, #0
 8004536:	d005      	beq.n	8004544 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453c:	f043 0204 	orr.w	r2, r3, #4
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004548:	2b00      	cmp	r3, #0
 800454a:	d003      	beq.n	8004554 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f000 f8b3 	bl	80046b8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004552:	e039      	b.n	80045c8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004554:	7bfb      	ldrb	r3, [r7, #15]
 8004556:	2b2a      	cmp	r3, #42	; 0x2a
 8004558:	d109      	bne.n	800456e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2228      	movs	r2, #40	; 0x28
 8004564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f7ff f827 	bl	80035bc <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004574:	b2db      	uxtb	r3, r3
 8004576:	2b28      	cmp	r3, #40	; 0x28
 8004578:	d111      	bne.n	800459e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	4a15      	ldr	r2, [pc, #84]	; (80045d4 <I2C_Slave_STOPF+0x25c>)
 800457e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2220      	movs	r2, #32
 800458a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2200      	movs	r2, #0
 8004592:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f7ff f828 	bl	80035ec <HAL_I2C_ListenCpltCallback>
}
 800459c:	e014      	b.n	80045c8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045a2:	2b22      	cmp	r3, #34	; 0x22
 80045a4:	d002      	beq.n	80045ac <I2C_Slave_STOPF+0x234>
 80045a6:	7bfb      	ldrb	r3, [r7, #15]
 80045a8:	2b22      	cmp	r3, #34	; 0x22
 80045aa:	d10d      	bne.n	80045c8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2200      	movs	r2, #0
 80045b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2220      	movs	r2, #32
 80045b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f7fe fffa 	bl	80035bc <HAL_I2C_SlaveRxCpltCallback>
}
 80045c8:	bf00      	nop
 80045ca:	3710      	adds	r7, #16
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}
 80045d0:	08004a49 	.word	0x08004a49
 80045d4:	ffff0000 	.word	0xffff0000

080045d8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b084      	sub	sp, #16
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045e6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ec:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	2b08      	cmp	r3, #8
 80045f2:	d002      	beq.n	80045fa <I2C_Slave_AF+0x22>
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	2b20      	cmp	r3, #32
 80045f8:	d129      	bne.n	800464e <I2C_Slave_AF+0x76>
 80045fa:	7bfb      	ldrb	r3, [r7, #15]
 80045fc:	2b28      	cmp	r3, #40	; 0x28
 80045fe:	d126      	bne.n	800464e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	4a2c      	ldr	r2, [pc, #176]	; (80046b4 <I2C_Slave_AF+0xdc>)
 8004604:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	685a      	ldr	r2, [r3, #4]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004614:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800461e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800462e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2200      	movs	r2, #0
 8004634:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2220      	movs	r2, #32
 800463a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f7fe ffd0 	bl	80035ec <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800464c:	e02e      	b.n	80046ac <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800464e:	7bfb      	ldrb	r3, [r7, #15]
 8004650:	2b21      	cmp	r3, #33	; 0x21
 8004652:	d126      	bne.n	80046a2 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	4a17      	ldr	r2, [pc, #92]	; (80046b4 <I2C_Slave_AF+0xdc>)
 8004658:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2221      	movs	r2, #33	; 0x21
 800465e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2220      	movs	r2, #32
 8004664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2200      	movs	r2, #0
 800466c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	685a      	ldr	r2, [r3, #4]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800467e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004688:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004698:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f7fe ff84 	bl	80035a8 <HAL_I2C_SlaveTxCpltCallback>
}
 80046a0:	e004      	b.n	80046ac <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80046aa:	615a      	str	r2, [r3, #20]
}
 80046ac:	bf00      	nop
 80046ae:	3710      	adds	r7, #16
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}
 80046b4:	ffff0000 	.word	0xffff0000

080046b8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b084      	sub	sp, #16
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046c6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046ce:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80046d0:	7bbb      	ldrb	r3, [r7, #14]
 80046d2:	2b10      	cmp	r3, #16
 80046d4:	d002      	beq.n	80046dc <I2C_ITError+0x24>
 80046d6:	7bbb      	ldrb	r3, [r7, #14]
 80046d8:	2b40      	cmp	r3, #64	; 0x40
 80046da:	d10a      	bne.n	80046f2 <I2C_ITError+0x3a>
 80046dc:	7bfb      	ldrb	r3, [r7, #15]
 80046de:	2b22      	cmp	r3, #34	; 0x22
 80046e0:	d107      	bne.n	80046f2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046f0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80046f2:	7bfb      	ldrb	r3, [r7, #15]
 80046f4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80046f8:	2b28      	cmp	r3, #40	; 0x28
 80046fa:	d107      	bne.n	800470c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2200      	movs	r2, #0
 8004700:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2228      	movs	r2, #40	; 0x28
 8004706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800470a:	e015      	b.n	8004738 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004716:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800471a:	d00a      	beq.n	8004732 <I2C_ITError+0x7a>
 800471c:	7bfb      	ldrb	r3, [r7, #15]
 800471e:	2b60      	cmp	r3, #96	; 0x60
 8004720:	d007      	beq.n	8004732 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2220      	movs	r2, #32
 8004726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2200      	movs	r2, #0
 8004736:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004742:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004746:	d162      	bne.n	800480e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	685a      	ldr	r2, [r3, #4]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004756:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800475c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004760:	b2db      	uxtb	r3, r3
 8004762:	2b01      	cmp	r3, #1
 8004764:	d020      	beq.n	80047a8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800476a:	4a6a      	ldr	r2, [pc, #424]	; (8004914 <I2C_ITError+0x25c>)
 800476c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004772:	4618      	mov	r0, r3
 8004774:	f7fe f8ad 	bl	80028d2 <HAL_DMA_Abort_IT>
 8004778:	4603      	mov	r3, r0
 800477a:	2b00      	cmp	r3, #0
 800477c:	f000 8089 	beq.w	8004892 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f022 0201 	bic.w	r2, r2, #1
 800478e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2220      	movs	r2, #32
 8004794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800479c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80047a2:	4610      	mov	r0, r2
 80047a4:	4798      	blx	r3
 80047a6:	e074      	b.n	8004892 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ac:	4a59      	ldr	r2, [pc, #356]	; (8004914 <I2C_ITError+0x25c>)
 80047ae:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b4:	4618      	mov	r0, r3
 80047b6:	f7fe f88c 	bl	80028d2 <HAL_DMA_Abort_IT>
 80047ba:	4603      	mov	r3, r0
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d068      	beq.n	8004892 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	695b      	ldr	r3, [r3, #20]
 80047c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047ca:	2b40      	cmp	r3, #64	; 0x40
 80047cc:	d10b      	bne.n	80047e6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	691a      	ldr	r2, [r3, #16]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d8:	b2d2      	uxtb	r2, r2
 80047da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e0:	1c5a      	adds	r2, r3, #1
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f022 0201 	bic.w	r2, r2, #1
 80047f4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2220      	movs	r2, #32
 80047fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004802:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004808:	4610      	mov	r0, r2
 800480a:	4798      	blx	r3
 800480c:	e041      	b.n	8004892 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004814:	b2db      	uxtb	r3, r3
 8004816:	2b60      	cmp	r3, #96	; 0x60
 8004818:	d125      	bne.n	8004866 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2220      	movs	r2, #32
 800481e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	695b      	ldr	r3, [r3, #20]
 800482e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004832:	2b40      	cmp	r3, #64	; 0x40
 8004834:	d10b      	bne.n	800484e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	691a      	ldr	r2, [r3, #16]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004840:	b2d2      	uxtb	r2, r2
 8004842:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004848:	1c5a      	adds	r2, r3, #1
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f022 0201 	bic.w	r2, r2, #1
 800485c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f7fe feec 	bl	800363c <HAL_I2C_AbortCpltCallback>
 8004864:	e015      	b.n	8004892 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	695b      	ldr	r3, [r3, #20]
 800486c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004870:	2b40      	cmp	r3, #64	; 0x40
 8004872:	d10b      	bne.n	800488c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	691a      	ldr	r2, [r3, #16]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487e:	b2d2      	uxtb	r2, r2
 8004880:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004886:	1c5a      	adds	r2, r3, #1
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	f7fe fecb 	bl	8003628 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004896:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	f003 0301 	and.w	r3, r3, #1
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d10e      	bne.n	80048c0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d109      	bne.n	80048c0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d104      	bne.n	80048c0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d007      	beq.n	80048d0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	685a      	ldr	r2, [r3, #4]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80048ce:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048d6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048dc:	f003 0304 	and.w	r3, r3, #4
 80048e0:	2b04      	cmp	r3, #4
 80048e2:	d113      	bne.n	800490c <I2C_ITError+0x254>
 80048e4:	7bfb      	ldrb	r3, [r7, #15]
 80048e6:	2b28      	cmp	r3, #40	; 0x28
 80048e8:	d110      	bne.n	800490c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	4a0a      	ldr	r2, [pc, #40]	; (8004918 <I2C_ITError+0x260>)
 80048ee:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2200      	movs	r2, #0
 80048f4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2220      	movs	r2, #32
 80048fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f7fe fe70 	bl	80035ec <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800490c:	bf00      	nop
 800490e:	3710      	adds	r7, #16
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}
 8004914:	08004a49 	.word	0x08004a49
 8004918:	ffff0000 	.word	0xffff0000

0800491c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b088      	sub	sp, #32
 8004920:	af02      	add	r7, sp, #8
 8004922:	60f8      	str	r0, [r7, #12]
 8004924:	4608      	mov	r0, r1
 8004926:	4611      	mov	r1, r2
 8004928:	461a      	mov	r2, r3
 800492a:	4603      	mov	r3, r0
 800492c:	817b      	strh	r3, [r7, #10]
 800492e:	460b      	mov	r3, r1
 8004930:	813b      	strh	r3, [r7, #8]
 8004932:	4613      	mov	r3, r2
 8004934:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004944:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004948:	9300      	str	r3, [sp, #0]
 800494a:	6a3b      	ldr	r3, [r7, #32]
 800494c:	2200      	movs	r2, #0
 800494e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004952:	68f8      	ldr	r0, [r7, #12]
 8004954:	f000 f920 	bl	8004b98 <I2C_WaitOnFlagUntilTimeout>
 8004958:	4603      	mov	r3, r0
 800495a:	2b00      	cmp	r3, #0
 800495c:	d00d      	beq.n	800497a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004968:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800496c:	d103      	bne.n	8004976 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004974:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004976:	2303      	movs	r3, #3
 8004978:	e05f      	b.n	8004a3a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800497a:	897b      	ldrh	r3, [r7, #10]
 800497c:	b2db      	uxtb	r3, r3
 800497e:	461a      	mov	r2, r3
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004988:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800498a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498c:	6a3a      	ldr	r2, [r7, #32]
 800498e:	492d      	ldr	r1, [pc, #180]	; (8004a44 <I2C_RequestMemoryWrite+0x128>)
 8004990:	68f8      	ldr	r0, [r7, #12]
 8004992:	f000 f958 	bl	8004c46 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004996:	4603      	mov	r3, r0
 8004998:	2b00      	cmp	r3, #0
 800499a:	d001      	beq.n	80049a0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	e04c      	b.n	8004a3a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049a0:	2300      	movs	r3, #0
 80049a2:	617b      	str	r3, [r7, #20]
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	695b      	ldr	r3, [r3, #20]
 80049aa:	617b      	str	r3, [r7, #20]
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	699b      	ldr	r3, [r3, #24]
 80049b2:	617b      	str	r3, [r7, #20]
 80049b4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049b8:	6a39      	ldr	r1, [r7, #32]
 80049ba:	68f8      	ldr	r0, [r7, #12]
 80049bc:	f000 f9c2 	bl	8004d44 <I2C_WaitOnTXEFlagUntilTimeout>
 80049c0:	4603      	mov	r3, r0
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d00d      	beq.n	80049e2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ca:	2b04      	cmp	r3, #4
 80049cc:	d107      	bne.n	80049de <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049dc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e02b      	b.n	8004a3a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80049e2:	88fb      	ldrh	r3, [r7, #6]
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d105      	bne.n	80049f4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80049e8:	893b      	ldrh	r3, [r7, #8]
 80049ea:	b2da      	uxtb	r2, r3
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	611a      	str	r2, [r3, #16]
 80049f2:	e021      	b.n	8004a38 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80049f4:	893b      	ldrh	r3, [r7, #8]
 80049f6:	0a1b      	lsrs	r3, r3, #8
 80049f8:	b29b      	uxth	r3, r3
 80049fa:	b2da      	uxtb	r2, r3
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a04:	6a39      	ldr	r1, [r7, #32]
 8004a06:	68f8      	ldr	r0, [r7, #12]
 8004a08:	f000 f99c 	bl	8004d44 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d00d      	beq.n	8004a2e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a16:	2b04      	cmp	r3, #4
 8004a18:	d107      	bne.n	8004a2a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a28:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e005      	b.n	8004a3a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a2e:	893b      	ldrh	r3, [r7, #8]
 8004a30:	b2da      	uxtb	r2, r3
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004a38:	2300      	movs	r3, #0
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3718      	adds	r7, #24
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	bf00      	nop
 8004a44:	00010002 	.word	0x00010002

08004a48 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b086      	sub	sp, #24
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004a50:	2300      	movs	r3, #0
 8004a52:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a58:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a60:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004a62:	4b4b      	ldr	r3, [pc, #300]	; (8004b90 <I2C_DMAAbort+0x148>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	08db      	lsrs	r3, r3, #3
 8004a68:	4a4a      	ldr	r2, [pc, #296]	; (8004b94 <I2C_DMAAbort+0x14c>)
 8004a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a6e:	0a1a      	lsrs	r2, r3, #8
 8004a70:	4613      	mov	r3, r2
 8004a72:	009b      	lsls	r3, r3, #2
 8004a74:	4413      	add	r3, r2
 8004a76:	00da      	lsls	r2, r3, #3
 8004a78:	1ad3      	subs	r3, r2, r3
 8004a7a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d106      	bne.n	8004a90 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a86:	f043 0220 	orr.w	r2, r3, #32
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004a8e:	e00a      	b.n	8004aa6 <I2C_DMAAbort+0x5e>
    }
    count--;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	3b01      	subs	r3, #1
 8004a94:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004aa0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004aa4:	d0ea      	beq.n	8004a7c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d003      	beq.n	8004ab6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d003      	beq.n	8004ac6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ad4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d003      	beq.n	8004aec <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ae8:	2200      	movs	r2, #0
 8004aea:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d003      	beq.n	8004afc <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af8:	2200      	movs	r2, #0
 8004afa:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f022 0201 	bic.w	r2, r2, #1
 8004b0a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b12:	b2db      	uxtb	r3, r3
 8004b14:	2b60      	cmp	r3, #96	; 0x60
 8004b16:	d10e      	bne.n	8004b36 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	2220      	movs	r2, #32
 8004b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	2200      	movs	r2, #0
 8004b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004b2e:	6978      	ldr	r0, [r7, #20]
 8004b30:	f7fe fd84 	bl	800363c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004b34:	e027      	b.n	8004b86 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004b36:	7cfb      	ldrb	r3, [r7, #19]
 8004b38:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004b3c:	2b28      	cmp	r3, #40	; 0x28
 8004b3e:	d117      	bne.n	8004b70 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f042 0201 	orr.w	r2, r2, #1
 8004b4e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b5e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	2200      	movs	r2, #0
 8004b64:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	2228      	movs	r2, #40	; 0x28
 8004b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004b6e:	e007      	b.n	8004b80 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	2220      	movs	r2, #32
 8004b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004b80:	6978      	ldr	r0, [r7, #20]
 8004b82:	f7fe fd51 	bl	8003628 <HAL_I2C_ErrorCallback>
}
 8004b86:	bf00      	nop
 8004b88:	3718      	adds	r7, #24
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}
 8004b8e:	bf00      	nop
 8004b90:	20000000 	.word	0x20000000
 8004b94:	14f8b589 	.word	0x14f8b589

08004b98 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b084      	sub	sp, #16
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	60f8      	str	r0, [r7, #12]
 8004ba0:	60b9      	str	r1, [r7, #8]
 8004ba2:	603b      	str	r3, [r7, #0]
 8004ba4:	4613      	mov	r3, r2
 8004ba6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ba8:	e025      	b.n	8004bf6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bb0:	d021      	beq.n	8004bf6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bb2:	f7fd fd4d 	bl	8002650 <HAL_GetTick>
 8004bb6:	4602      	mov	r2, r0
 8004bb8:	69bb      	ldr	r3, [r7, #24]
 8004bba:	1ad3      	subs	r3, r2, r3
 8004bbc:	683a      	ldr	r2, [r7, #0]
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d302      	bcc.n	8004bc8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d116      	bne.n	8004bf6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2220      	movs	r2, #32
 8004bd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be2:	f043 0220 	orr.w	r2, r3, #32
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2200      	movs	r2, #0
 8004bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e023      	b.n	8004c3e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	0c1b      	lsrs	r3, r3, #16
 8004bfa:	b2db      	uxtb	r3, r3
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d10d      	bne.n	8004c1c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	695b      	ldr	r3, [r3, #20]
 8004c06:	43da      	mvns	r2, r3
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	4013      	ands	r3, r2
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	bf0c      	ite	eq
 8004c12:	2301      	moveq	r3, #1
 8004c14:	2300      	movne	r3, #0
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	461a      	mov	r2, r3
 8004c1a:	e00c      	b.n	8004c36 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	699b      	ldr	r3, [r3, #24]
 8004c22:	43da      	mvns	r2, r3
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	4013      	ands	r3, r2
 8004c28:	b29b      	uxth	r3, r3
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	bf0c      	ite	eq
 8004c2e:	2301      	moveq	r3, #1
 8004c30:	2300      	movne	r3, #0
 8004c32:	b2db      	uxtb	r3, r3
 8004c34:	461a      	mov	r2, r3
 8004c36:	79fb      	ldrb	r3, [r7, #7]
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d0b6      	beq.n	8004baa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004c3c:	2300      	movs	r3, #0
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3710      	adds	r7, #16
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}

08004c46 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004c46:	b580      	push	{r7, lr}
 8004c48:	b084      	sub	sp, #16
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	60f8      	str	r0, [r7, #12]
 8004c4e:	60b9      	str	r1, [r7, #8]
 8004c50:	607a      	str	r2, [r7, #4]
 8004c52:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c54:	e051      	b.n	8004cfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	695b      	ldr	r3, [r3, #20]
 8004c5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c64:	d123      	bne.n	8004cae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c74:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004c7e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2200      	movs	r2, #0
 8004c84:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2220      	movs	r2, #32
 8004c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2200      	movs	r2, #0
 8004c92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9a:	f043 0204 	orr.w	r2, r3, #4
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	e046      	b.n	8004d3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cb4:	d021      	beq.n	8004cfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cb6:	f7fd fccb 	bl	8002650 <HAL_GetTick>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	1ad3      	subs	r3, r2, r3
 8004cc0:	687a      	ldr	r2, [r7, #4]
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d302      	bcc.n	8004ccc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d116      	bne.n	8004cfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2220      	movs	r2, #32
 8004cd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce6:	f043 0220 	orr.w	r2, r3, #32
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e020      	b.n	8004d3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	0c1b      	lsrs	r3, r3, #16
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d10c      	bne.n	8004d1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	695b      	ldr	r3, [r3, #20]
 8004d0a:	43da      	mvns	r2, r3
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	4013      	ands	r3, r2
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	bf14      	ite	ne
 8004d16:	2301      	movne	r3, #1
 8004d18:	2300      	moveq	r3, #0
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	e00b      	b.n	8004d36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	699b      	ldr	r3, [r3, #24]
 8004d24:	43da      	mvns	r2, r3
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	4013      	ands	r3, r2
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	bf14      	ite	ne
 8004d30:	2301      	movne	r3, #1
 8004d32:	2300      	moveq	r3, #0
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d18d      	bne.n	8004c56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004d3a:	2300      	movs	r3, #0
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	3710      	adds	r7, #16
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}

08004d44 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b084      	sub	sp, #16
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	60f8      	str	r0, [r7, #12]
 8004d4c:	60b9      	str	r1, [r7, #8]
 8004d4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d50:	e02d      	b.n	8004dae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004d52:	68f8      	ldr	r0, [r7, #12]
 8004d54:	f000 f8aa 	bl	8004eac <I2C_IsAcknowledgeFailed>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d001      	beq.n	8004d62 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e02d      	b.n	8004dbe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d68:	d021      	beq.n	8004dae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d6a:	f7fd fc71 	bl	8002650 <HAL_GetTick>
 8004d6e:	4602      	mov	r2, r0
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	1ad3      	subs	r3, r2, r3
 8004d74:	68ba      	ldr	r2, [r7, #8]
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d302      	bcc.n	8004d80 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d116      	bne.n	8004dae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2200      	movs	r2, #0
 8004d84:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2220      	movs	r2, #32
 8004d8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2200      	movs	r2, #0
 8004d92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9a:	f043 0220 	orr.w	r2, r3, #32
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2200      	movs	r2, #0
 8004da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e007      	b.n	8004dbe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	695b      	ldr	r3, [r3, #20]
 8004db4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004db8:	2b80      	cmp	r3, #128	; 0x80
 8004dba:	d1ca      	bne.n	8004d52 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004dbc:	2300      	movs	r3, #0
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3710      	adds	r7, #16
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}

08004dc6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004dc6:	b580      	push	{r7, lr}
 8004dc8:	b084      	sub	sp, #16
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	60f8      	str	r0, [r7, #12]
 8004dce:	60b9      	str	r1, [r7, #8]
 8004dd0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004dd2:	e02d      	b.n	8004e30 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004dd4:	68f8      	ldr	r0, [r7, #12]
 8004dd6:	f000 f869 	bl	8004eac <I2C_IsAcknowledgeFailed>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d001      	beq.n	8004de4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	e02d      	b.n	8004e40 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dea:	d021      	beq.n	8004e30 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dec:	f7fd fc30 	bl	8002650 <HAL_GetTick>
 8004df0:	4602      	mov	r2, r0
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	68ba      	ldr	r2, [r7, #8]
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d302      	bcc.n	8004e02 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d116      	bne.n	8004e30 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2200      	movs	r2, #0
 8004e06:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2220      	movs	r2, #32
 8004e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2200      	movs	r2, #0
 8004e14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e1c:	f043 0220 	orr.w	r2, r3, #32
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2200      	movs	r2, #0
 8004e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	e007      	b.n	8004e40 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	695b      	ldr	r3, [r3, #20]
 8004e36:	f003 0304 	and.w	r3, r3, #4
 8004e3a:	2b04      	cmp	r3, #4
 8004e3c:	d1ca      	bne.n	8004dd4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e3e:	2300      	movs	r3, #0
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3710      	adds	r7, #16
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}

08004e48 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b085      	sub	sp, #20
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004e50:	2300      	movs	r3, #0
 8004e52:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004e54:	4b13      	ldr	r3, [pc, #76]	; (8004ea4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	08db      	lsrs	r3, r3, #3
 8004e5a:	4a13      	ldr	r2, [pc, #76]	; (8004ea8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004e5c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e60:	0a1a      	lsrs	r2, r3, #8
 8004e62:	4613      	mov	r3, r2
 8004e64:	009b      	lsls	r3, r3, #2
 8004e66:	4413      	add	r3, r2
 8004e68:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	3b01      	subs	r3, #1
 8004e6e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d107      	bne.n	8004e86 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e7a:	f043 0220 	orr.w	r2, r3, #32
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	e008      	b.n	8004e98 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e94:	d0e9      	beq.n	8004e6a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004e96:	2300      	movs	r3, #0
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3714      	adds	r7, #20
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr
 8004ea4:	20000000 	.word	0x20000000
 8004ea8:	14f8b589 	.word	0x14f8b589

08004eac <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b083      	sub	sp, #12
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	695b      	ldr	r3, [r3, #20]
 8004eba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ebe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ec2:	d11b      	bne.n	8004efc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004ecc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2220      	movs	r2, #32
 8004ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee8:	f043 0204 	orr.w	r2, r3, #4
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	e000      	b.n	8004efe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004efc:	2300      	movs	r3, #0
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	370c      	adds	r7, #12
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr

08004f0a <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004f0a:	b480      	push	{r7}
 8004f0c:	b083      	sub	sp, #12
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f16:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004f1a:	d103      	bne.n	8004f24 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004f22:	e007      	b.n	8004f34 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f28:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004f2c:	d102      	bne.n	8004f34 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2208      	movs	r2, #8
 8004f32:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004f34:	bf00      	nop
 8004f36:	370c      	adds	r7, #12
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr

08004f40 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b086      	sub	sp, #24
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d101      	bne.n	8004f52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e267      	b.n	8005422 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f003 0301 	and.w	r3, r3, #1
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d075      	beq.n	800504a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004f5e:	4b88      	ldr	r3, [pc, #544]	; (8005180 <HAL_RCC_OscConfig+0x240>)
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	f003 030c 	and.w	r3, r3, #12
 8004f66:	2b04      	cmp	r3, #4
 8004f68:	d00c      	beq.n	8004f84 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f6a:	4b85      	ldr	r3, [pc, #532]	; (8005180 <HAL_RCC_OscConfig+0x240>)
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004f72:	2b08      	cmp	r3, #8
 8004f74:	d112      	bne.n	8004f9c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f76:	4b82      	ldr	r3, [pc, #520]	; (8005180 <HAL_RCC_OscConfig+0x240>)
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f82:	d10b      	bne.n	8004f9c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f84:	4b7e      	ldr	r3, [pc, #504]	; (8005180 <HAL_RCC_OscConfig+0x240>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d05b      	beq.n	8005048 <HAL_RCC_OscConfig+0x108>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d157      	bne.n	8005048 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	e242      	b.n	8005422 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fa4:	d106      	bne.n	8004fb4 <HAL_RCC_OscConfig+0x74>
 8004fa6:	4b76      	ldr	r3, [pc, #472]	; (8005180 <HAL_RCC_OscConfig+0x240>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a75      	ldr	r2, [pc, #468]	; (8005180 <HAL_RCC_OscConfig+0x240>)
 8004fac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fb0:	6013      	str	r3, [r2, #0]
 8004fb2:	e01d      	b.n	8004ff0 <HAL_RCC_OscConfig+0xb0>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004fbc:	d10c      	bne.n	8004fd8 <HAL_RCC_OscConfig+0x98>
 8004fbe:	4b70      	ldr	r3, [pc, #448]	; (8005180 <HAL_RCC_OscConfig+0x240>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a6f      	ldr	r2, [pc, #444]	; (8005180 <HAL_RCC_OscConfig+0x240>)
 8004fc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004fc8:	6013      	str	r3, [r2, #0]
 8004fca:	4b6d      	ldr	r3, [pc, #436]	; (8005180 <HAL_RCC_OscConfig+0x240>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a6c      	ldr	r2, [pc, #432]	; (8005180 <HAL_RCC_OscConfig+0x240>)
 8004fd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fd4:	6013      	str	r3, [r2, #0]
 8004fd6:	e00b      	b.n	8004ff0 <HAL_RCC_OscConfig+0xb0>
 8004fd8:	4b69      	ldr	r3, [pc, #420]	; (8005180 <HAL_RCC_OscConfig+0x240>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a68      	ldr	r2, [pc, #416]	; (8005180 <HAL_RCC_OscConfig+0x240>)
 8004fde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fe2:	6013      	str	r3, [r2, #0]
 8004fe4:	4b66      	ldr	r3, [pc, #408]	; (8005180 <HAL_RCC_OscConfig+0x240>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a65      	ldr	r2, [pc, #404]	; (8005180 <HAL_RCC_OscConfig+0x240>)
 8004fea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004fee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d013      	beq.n	8005020 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ff8:	f7fd fb2a 	bl	8002650 <HAL_GetTick>
 8004ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ffe:	e008      	b.n	8005012 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005000:	f7fd fb26 	bl	8002650 <HAL_GetTick>
 8005004:	4602      	mov	r2, r0
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	1ad3      	subs	r3, r2, r3
 800500a:	2b64      	cmp	r3, #100	; 0x64
 800500c:	d901      	bls.n	8005012 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800500e:	2303      	movs	r3, #3
 8005010:	e207      	b.n	8005422 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005012:	4b5b      	ldr	r3, [pc, #364]	; (8005180 <HAL_RCC_OscConfig+0x240>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800501a:	2b00      	cmp	r3, #0
 800501c:	d0f0      	beq.n	8005000 <HAL_RCC_OscConfig+0xc0>
 800501e:	e014      	b.n	800504a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005020:	f7fd fb16 	bl	8002650 <HAL_GetTick>
 8005024:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005026:	e008      	b.n	800503a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005028:	f7fd fb12 	bl	8002650 <HAL_GetTick>
 800502c:	4602      	mov	r2, r0
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	1ad3      	subs	r3, r2, r3
 8005032:	2b64      	cmp	r3, #100	; 0x64
 8005034:	d901      	bls.n	800503a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005036:	2303      	movs	r3, #3
 8005038:	e1f3      	b.n	8005422 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800503a:	4b51      	ldr	r3, [pc, #324]	; (8005180 <HAL_RCC_OscConfig+0x240>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005042:	2b00      	cmp	r3, #0
 8005044:	d1f0      	bne.n	8005028 <HAL_RCC_OscConfig+0xe8>
 8005046:	e000      	b.n	800504a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005048:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 0302 	and.w	r3, r3, #2
 8005052:	2b00      	cmp	r3, #0
 8005054:	d063      	beq.n	800511e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005056:	4b4a      	ldr	r3, [pc, #296]	; (8005180 <HAL_RCC_OscConfig+0x240>)
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	f003 030c 	and.w	r3, r3, #12
 800505e:	2b00      	cmp	r3, #0
 8005060:	d00b      	beq.n	800507a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005062:	4b47      	ldr	r3, [pc, #284]	; (8005180 <HAL_RCC_OscConfig+0x240>)
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800506a:	2b08      	cmp	r3, #8
 800506c:	d11c      	bne.n	80050a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800506e:	4b44      	ldr	r3, [pc, #272]	; (8005180 <HAL_RCC_OscConfig+0x240>)
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005076:	2b00      	cmp	r3, #0
 8005078:	d116      	bne.n	80050a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800507a:	4b41      	ldr	r3, [pc, #260]	; (8005180 <HAL_RCC_OscConfig+0x240>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 0302 	and.w	r3, r3, #2
 8005082:	2b00      	cmp	r3, #0
 8005084:	d005      	beq.n	8005092 <HAL_RCC_OscConfig+0x152>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	68db      	ldr	r3, [r3, #12]
 800508a:	2b01      	cmp	r3, #1
 800508c:	d001      	beq.n	8005092 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	e1c7      	b.n	8005422 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005092:	4b3b      	ldr	r3, [pc, #236]	; (8005180 <HAL_RCC_OscConfig+0x240>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	691b      	ldr	r3, [r3, #16]
 800509e:	00db      	lsls	r3, r3, #3
 80050a0:	4937      	ldr	r1, [pc, #220]	; (8005180 <HAL_RCC_OscConfig+0x240>)
 80050a2:	4313      	orrs	r3, r2
 80050a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050a6:	e03a      	b.n	800511e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	68db      	ldr	r3, [r3, #12]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d020      	beq.n	80050f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80050b0:	4b34      	ldr	r3, [pc, #208]	; (8005184 <HAL_RCC_OscConfig+0x244>)
 80050b2:	2201      	movs	r2, #1
 80050b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050b6:	f7fd facb 	bl	8002650 <HAL_GetTick>
 80050ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050bc:	e008      	b.n	80050d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050be:	f7fd fac7 	bl	8002650 <HAL_GetTick>
 80050c2:	4602      	mov	r2, r0
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	1ad3      	subs	r3, r2, r3
 80050c8:	2b02      	cmp	r3, #2
 80050ca:	d901      	bls.n	80050d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80050cc:	2303      	movs	r3, #3
 80050ce:	e1a8      	b.n	8005422 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050d0:	4b2b      	ldr	r3, [pc, #172]	; (8005180 <HAL_RCC_OscConfig+0x240>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f003 0302 	and.w	r3, r3, #2
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d0f0      	beq.n	80050be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050dc:	4b28      	ldr	r3, [pc, #160]	; (8005180 <HAL_RCC_OscConfig+0x240>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	691b      	ldr	r3, [r3, #16]
 80050e8:	00db      	lsls	r3, r3, #3
 80050ea:	4925      	ldr	r1, [pc, #148]	; (8005180 <HAL_RCC_OscConfig+0x240>)
 80050ec:	4313      	orrs	r3, r2
 80050ee:	600b      	str	r3, [r1, #0]
 80050f0:	e015      	b.n	800511e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050f2:	4b24      	ldr	r3, [pc, #144]	; (8005184 <HAL_RCC_OscConfig+0x244>)
 80050f4:	2200      	movs	r2, #0
 80050f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050f8:	f7fd faaa 	bl	8002650 <HAL_GetTick>
 80050fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050fe:	e008      	b.n	8005112 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005100:	f7fd faa6 	bl	8002650 <HAL_GetTick>
 8005104:	4602      	mov	r2, r0
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	1ad3      	subs	r3, r2, r3
 800510a:	2b02      	cmp	r3, #2
 800510c:	d901      	bls.n	8005112 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800510e:	2303      	movs	r3, #3
 8005110:	e187      	b.n	8005422 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005112:	4b1b      	ldr	r3, [pc, #108]	; (8005180 <HAL_RCC_OscConfig+0x240>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 0302 	and.w	r3, r3, #2
 800511a:	2b00      	cmp	r3, #0
 800511c:	d1f0      	bne.n	8005100 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 0308 	and.w	r3, r3, #8
 8005126:	2b00      	cmp	r3, #0
 8005128:	d036      	beq.n	8005198 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	695b      	ldr	r3, [r3, #20]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d016      	beq.n	8005160 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005132:	4b15      	ldr	r3, [pc, #84]	; (8005188 <HAL_RCC_OscConfig+0x248>)
 8005134:	2201      	movs	r2, #1
 8005136:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005138:	f7fd fa8a 	bl	8002650 <HAL_GetTick>
 800513c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800513e:	e008      	b.n	8005152 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005140:	f7fd fa86 	bl	8002650 <HAL_GetTick>
 8005144:	4602      	mov	r2, r0
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	1ad3      	subs	r3, r2, r3
 800514a:	2b02      	cmp	r3, #2
 800514c:	d901      	bls.n	8005152 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800514e:	2303      	movs	r3, #3
 8005150:	e167      	b.n	8005422 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005152:	4b0b      	ldr	r3, [pc, #44]	; (8005180 <HAL_RCC_OscConfig+0x240>)
 8005154:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005156:	f003 0302 	and.w	r3, r3, #2
 800515a:	2b00      	cmp	r3, #0
 800515c:	d0f0      	beq.n	8005140 <HAL_RCC_OscConfig+0x200>
 800515e:	e01b      	b.n	8005198 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005160:	4b09      	ldr	r3, [pc, #36]	; (8005188 <HAL_RCC_OscConfig+0x248>)
 8005162:	2200      	movs	r2, #0
 8005164:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005166:	f7fd fa73 	bl	8002650 <HAL_GetTick>
 800516a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800516c:	e00e      	b.n	800518c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800516e:	f7fd fa6f 	bl	8002650 <HAL_GetTick>
 8005172:	4602      	mov	r2, r0
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	1ad3      	subs	r3, r2, r3
 8005178:	2b02      	cmp	r3, #2
 800517a:	d907      	bls.n	800518c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800517c:	2303      	movs	r3, #3
 800517e:	e150      	b.n	8005422 <HAL_RCC_OscConfig+0x4e2>
 8005180:	40023800 	.word	0x40023800
 8005184:	42470000 	.word	0x42470000
 8005188:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800518c:	4b88      	ldr	r3, [pc, #544]	; (80053b0 <HAL_RCC_OscConfig+0x470>)
 800518e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005190:	f003 0302 	and.w	r3, r3, #2
 8005194:	2b00      	cmp	r3, #0
 8005196:	d1ea      	bne.n	800516e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f003 0304 	and.w	r3, r3, #4
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	f000 8097 	beq.w	80052d4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051a6:	2300      	movs	r3, #0
 80051a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051aa:	4b81      	ldr	r3, [pc, #516]	; (80053b0 <HAL_RCC_OscConfig+0x470>)
 80051ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d10f      	bne.n	80051d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051b6:	2300      	movs	r3, #0
 80051b8:	60bb      	str	r3, [r7, #8]
 80051ba:	4b7d      	ldr	r3, [pc, #500]	; (80053b0 <HAL_RCC_OscConfig+0x470>)
 80051bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051be:	4a7c      	ldr	r2, [pc, #496]	; (80053b0 <HAL_RCC_OscConfig+0x470>)
 80051c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051c4:	6413      	str	r3, [r2, #64]	; 0x40
 80051c6:	4b7a      	ldr	r3, [pc, #488]	; (80053b0 <HAL_RCC_OscConfig+0x470>)
 80051c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051ce:	60bb      	str	r3, [r7, #8]
 80051d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051d2:	2301      	movs	r3, #1
 80051d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051d6:	4b77      	ldr	r3, [pc, #476]	; (80053b4 <HAL_RCC_OscConfig+0x474>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d118      	bne.n	8005214 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80051e2:	4b74      	ldr	r3, [pc, #464]	; (80053b4 <HAL_RCC_OscConfig+0x474>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a73      	ldr	r2, [pc, #460]	; (80053b4 <HAL_RCC_OscConfig+0x474>)
 80051e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051ee:	f7fd fa2f 	bl	8002650 <HAL_GetTick>
 80051f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051f4:	e008      	b.n	8005208 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051f6:	f7fd fa2b 	bl	8002650 <HAL_GetTick>
 80051fa:	4602      	mov	r2, r0
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	1ad3      	subs	r3, r2, r3
 8005200:	2b02      	cmp	r3, #2
 8005202:	d901      	bls.n	8005208 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005204:	2303      	movs	r3, #3
 8005206:	e10c      	b.n	8005422 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005208:	4b6a      	ldr	r3, [pc, #424]	; (80053b4 <HAL_RCC_OscConfig+0x474>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005210:	2b00      	cmp	r3, #0
 8005212:	d0f0      	beq.n	80051f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	2b01      	cmp	r3, #1
 800521a:	d106      	bne.n	800522a <HAL_RCC_OscConfig+0x2ea>
 800521c:	4b64      	ldr	r3, [pc, #400]	; (80053b0 <HAL_RCC_OscConfig+0x470>)
 800521e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005220:	4a63      	ldr	r2, [pc, #396]	; (80053b0 <HAL_RCC_OscConfig+0x470>)
 8005222:	f043 0301 	orr.w	r3, r3, #1
 8005226:	6713      	str	r3, [r2, #112]	; 0x70
 8005228:	e01c      	b.n	8005264 <HAL_RCC_OscConfig+0x324>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	2b05      	cmp	r3, #5
 8005230:	d10c      	bne.n	800524c <HAL_RCC_OscConfig+0x30c>
 8005232:	4b5f      	ldr	r3, [pc, #380]	; (80053b0 <HAL_RCC_OscConfig+0x470>)
 8005234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005236:	4a5e      	ldr	r2, [pc, #376]	; (80053b0 <HAL_RCC_OscConfig+0x470>)
 8005238:	f043 0304 	orr.w	r3, r3, #4
 800523c:	6713      	str	r3, [r2, #112]	; 0x70
 800523e:	4b5c      	ldr	r3, [pc, #368]	; (80053b0 <HAL_RCC_OscConfig+0x470>)
 8005240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005242:	4a5b      	ldr	r2, [pc, #364]	; (80053b0 <HAL_RCC_OscConfig+0x470>)
 8005244:	f043 0301 	orr.w	r3, r3, #1
 8005248:	6713      	str	r3, [r2, #112]	; 0x70
 800524a:	e00b      	b.n	8005264 <HAL_RCC_OscConfig+0x324>
 800524c:	4b58      	ldr	r3, [pc, #352]	; (80053b0 <HAL_RCC_OscConfig+0x470>)
 800524e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005250:	4a57      	ldr	r2, [pc, #348]	; (80053b0 <HAL_RCC_OscConfig+0x470>)
 8005252:	f023 0301 	bic.w	r3, r3, #1
 8005256:	6713      	str	r3, [r2, #112]	; 0x70
 8005258:	4b55      	ldr	r3, [pc, #340]	; (80053b0 <HAL_RCC_OscConfig+0x470>)
 800525a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800525c:	4a54      	ldr	r2, [pc, #336]	; (80053b0 <HAL_RCC_OscConfig+0x470>)
 800525e:	f023 0304 	bic.w	r3, r3, #4
 8005262:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d015      	beq.n	8005298 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800526c:	f7fd f9f0 	bl	8002650 <HAL_GetTick>
 8005270:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005272:	e00a      	b.n	800528a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005274:	f7fd f9ec 	bl	8002650 <HAL_GetTick>
 8005278:	4602      	mov	r2, r0
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	1ad3      	subs	r3, r2, r3
 800527e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005282:	4293      	cmp	r3, r2
 8005284:	d901      	bls.n	800528a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	e0cb      	b.n	8005422 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800528a:	4b49      	ldr	r3, [pc, #292]	; (80053b0 <HAL_RCC_OscConfig+0x470>)
 800528c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800528e:	f003 0302 	and.w	r3, r3, #2
 8005292:	2b00      	cmp	r3, #0
 8005294:	d0ee      	beq.n	8005274 <HAL_RCC_OscConfig+0x334>
 8005296:	e014      	b.n	80052c2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005298:	f7fd f9da 	bl	8002650 <HAL_GetTick>
 800529c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800529e:	e00a      	b.n	80052b6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052a0:	f7fd f9d6 	bl	8002650 <HAL_GetTick>
 80052a4:	4602      	mov	r2, r0
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	1ad3      	subs	r3, r2, r3
 80052aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d901      	bls.n	80052b6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80052b2:	2303      	movs	r3, #3
 80052b4:	e0b5      	b.n	8005422 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052b6:	4b3e      	ldr	r3, [pc, #248]	; (80053b0 <HAL_RCC_OscConfig+0x470>)
 80052b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052ba:	f003 0302 	and.w	r3, r3, #2
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d1ee      	bne.n	80052a0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80052c2:	7dfb      	ldrb	r3, [r7, #23]
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d105      	bne.n	80052d4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052c8:	4b39      	ldr	r3, [pc, #228]	; (80053b0 <HAL_RCC_OscConfig+0x470>)
 80052ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052cc:	4a38      	ldr	r2, [pc, #224]	; (80053b0 <HAL_RCC_OscConfig+0x470>)
 80052ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052d2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	699b      	ldr	r3, [r3, #24]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	f000 80a1 	beq.w	8005420 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80052de:	4b34      	ldr	r3, [pc, #208]	; (80053b0 <HAL_RCC_OscConfig+0x470>)
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	f003 030c 	and.w	r3, r3, #12
 80052e6:	2b08      	cmp	r3, #8
 80052e8:	d05c      	beq.n	80053a4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	699b      	ldr	r3, [r3, #24]
 80052ee:	2b02      	cmp	r3, #2
 80052f0:	d141      	bne.n	8005376 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052f2:	4b31      	ldr	r3, [pc, #196]	; (80053b8 <HAL_RCC_OscConfig+0x478>)
 80052f4:	2200      	movs	r2, #0
 80052f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052f8:	f7fd f9aa 	bl	8002650 <HAL_GetTick>
 80052fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052fe:	e008      	b.n	8005312 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005300:	f7fd f9a6 	bl	8002650 <HAL_GetTick>
 8005304:	4602      	mov	r2, r0
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	1ad3      	subs	r3, r2, r3
 800530a:	2b02      	cmp	r3, #2
 800530c:	d901      	bls.n	8005312 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800530e:	2303      	movs	r3, #3
 8005310:	e087      	b.n	8005422 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005312:	4b27      	ldr	r3, [pc, #156]	; (80053b0 <HAL_RCC_OscConfig+0x470>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800531a:	2b00      	cmp	r3, #0
 800531c:	d1f0      	bne.n	8005300 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	69da      	ldr	r2, [r3, #28]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6a1b      	ldr	r3, [r3, #32]
 8005326:	431a      	orrs	r2, r3
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800532c:	019b      	lsls	r3, r3, #6
 800532e:	431a      	orrs	r2, r3
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005334:	085b      	lsrs	r3, r3, #1
 8005336:	3b01      	subs	r3, #1
 8005338:	041b      	lsls	r3, r3, #16
 800533a:	431a      	orrs	r2, r3
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005340:	061b      	lsls	r3, r3, #24
 8005342:	491b      	ldr	r1, [pc, #108]	; (80053b0 <HAL_RCC_OscConfig+0x470>)
 8005344:	4313      	orrs	r3, r2
 8005346:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005348:	4b1b      	ldr	r3, [pc, #108]	; (80053b8 <HAL_RCC_OscConfig+0x478>)
 800534a:	2201      	movs	r2, #1
 800534c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800534e:	f7fd f97f 	bl	8002650 <HAL_GetTick>
 8005352:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005354:	e008      	b.n	8005368 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005356:	f7fd f97b 	bl	8002650 <HAL_GetTick>
 800535a:	4602      	mov	r2, r0
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	1ad3      	subs	r3, r2, r3
 8005360:	2b02      	cmp	r3, #2
 8005362:	d901      	bls.n	8005368 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005364:	2303      	movs	r3, #3
 8005366:	e05c      	b.n	8005422 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005368:	4b11      	ldr	r3, [pc, #68]	; (80053b0 <HAL_RCC_OscConfig+0x470>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005370:	2b00      	cmp	r3, #0
 8005372:	d0f0      	beq.n	8005356 <HAL_RCC_OscConfig+0x416>
 8005374:	e054      	b.n	8005420 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005376:	4b10      	ldr	r3, [pc, #64]	; (80053b8 <HAL_RCC_OscConfig+0x478>)
 8005378:	2200      	movs	r2, #0
 800537a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800537c:	f7fd f968 	bl	8002650 <HAL_GetTick>
 8005380:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005382:	e008      	b.n	8005396 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005384:	f7fd f964 	bl	8002650 <HAL_GetTick>
 8005388:	4602      	mov	r2, r0
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	1ad3      	subs	r3, r2, r3
 800538e:	2b02      	cmp	r3, #2
 8005390:	d901      	bls.n	8005396 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005392:	2303      	movs	r3, #3
 8005394:	e045      	b.n	8005422 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005396:	4b06      	ldr	r3, [pc, #24]	; (80053b0 <HAL_RCC_OscConfig+0x470>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d1f0      	bne.n	8005384 <HAL_RCC_OscConfig+0x444>
 80053a2:	e03d      	b.n	8005420 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	699b      	ldr	r3, [r3, #24]
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d107      	bne.n	80053bc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80053ac:	2301      	movs	r3, #1
 80053ae:	e038      	b.n	8005422 <HAL_RCC_OscConfig+0x4e2>
 80053b0:	40023800 	.word	0x40023800
 80053b4:	40007000 	.word	0x40007000
 80053b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80053bc:	4b1b      	ldr	r3, [pc, #108]	; (800542c <HAL_RCC_OscConfig+0x4ec>)
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	699b      	ldr	r3, [r3, #24]
 80053c6:	2b01      	cmp	r3, #1
 80053c8:	d028      	beq.n	800541c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053d4:	429a      	cmp	r2, r3
 80053d6:	d121      	bne.n	800541c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053e2:	429a      	cmp	r2, r3
 80053e4:	d11a      	bne.n	800541c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80053e6:	68fa      	ldr	r2, [r7, #12]
 80053e8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80053ec:	4013      	ands	r3, r2
 80053ee:	687a      	ldr	r2, [r7, #4]
 80053f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80053f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d111      	bne.n	800541c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005402:	085b      	lsrs	r3, r3, #1
 8005404:	3b01      	subs	r3, #1
 8005406:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005408:	429a      	cmp	r2, r3
 800540a:	d107      	bne.n	800541c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005416:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005418:	429a      	cmp	r2, r3
 800541a:	d001      	beq.n	8005420 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	e000      	b.n	8005422 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005420:	2300      	movs	r3, #0
}
 8005422:	4618      	mov	r0, r3
 8005424:	3718      	adds	r7, #24
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
 800542a:	bf00      	nop
 800542c:	40023800 	.word	0x40023800

08005430 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b084      	sub	sp, #16
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d101      	bne.n	8005444 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005440:	2301      	movs	r3, #1
 8005442:	e0cc      	b.n	80055de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005444:	4b68      	ldr	r3, [pc, #416]	; (80055e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f003 0307 	and.w	r3, r3, #7
 800544c:	683a      	ldr	r2, [r7, #0]
 800544e:	429a      	cmp	r2, r3
 8005450:	d90c      	bls.n	800546c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005452:	4b65      	ldr	r3, [pc, #404]	; (80055e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005454:	683a      	ldr	r2, [r7, #0]
 8005456:	b2d2      	uxtb	r2, r2
 8005458:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800545a:	4b63      	ldr	r3, [pc, #396]	; (80055e8 <HAL_RCC_ClockConfig+0x1b8>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f003 0307 	and.w	r3, r3, #7
 8005462:	683a      	ldr	r2, [r7, #0]
 8005464:	429a      	cmp	r2, r3
 8005466:	d001      	beq.n	800546c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	e0b8      	b.n	80055de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f003 0302 	and.w	r3, r3, #2
 8005474:	2b00      	cmp	r3, #0
 8005476:	d020      	beq.n	80054ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f003 0304 	and.w	r3, r3, #4
 8005480:	2b00      	cmp	r3, #0
 8005482:	d005      	beq.n	8005490 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005484:	4b59      	ldr	r3, [pc, #356]	; (80055ec <HAL_RCC_ClockConfig+0x1bc>)
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	4a58      	ldr	r2, [pc, #352]	; (80055ec <HAL_RCC_ClockConfig+0x1bc>)
 800548a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800548e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f003 0308 	and.w	r3, r3, #8
 8005498:	2b00      	cmp	r3, #0
 800549a:	d005      	beq.n	80054a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800549c:	4b53      	ldr	r3, [pc, #332]	; (80055ec <HAL_RCC_ClockConfig+0x1bc>)
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	4a52      	ldr	r2, [pc, #328]	; (80055ec <HAL_RCC_ClockConfig+0x1bc>)
 80054a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80054a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054a8:	4b50      	ldr	r3, [pc, #320]	; (80055ec <HAL_RCC_ClockConfig+0x1bc>)
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	494d      	ldr	r1, [pc, #308]	; (80055ec <HAL_RCC_ClockConfig+0x1bc>)
 80054b6:	4313      	orrs	r3, r2
 80054b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f003 0301 	and.w	r3, r3, #1
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d044      	beq.n	8005550 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	2b01      	cmp	r3, #1
 80054cc:	d107      	bne.n	80054de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054ce:	4b47      	ldr	r3, [pc, #284]	; (80055ec <HAL_RCC_ClockConfig+0x1bc>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d119      	bne.n	800550e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	e07f      	b.n	80055de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	2b02      	cmp	r3, #2
 80054e4:	d003      	beq.n	80054ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80054ea:	2b03      	cmp	r3, #3
 80054ec:	d107      	bne.n	80054fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054ee:	4b3f      	ldr	r3, [pc, #252]	; (80055ec <HAL_RCC_ClockConfig+0x1bc>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d109      	bne.n	800550e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	e06f      	b.n	80055de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054fe:	4b3b      	ldr	r3, [pc, #236]	; (80055ec <HAL_RCC_ClockConfig+0x1bc>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f003 0302 	and.w	r3, r3, #2
 8005506:	2b00      	cmp	r3, #0
 8005508:	d101      	bne.n	800550e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	e067      	b.n	80055de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800550e:	4b37      	ldr	r3, [pc, #220]	; (80055ec <HAL_RCC_ClockConfig+0x1bc>)
 8005510:	689b      	ldr	r3, [r3, #8]
 8005512:	f023 0203 	bic.w	r2, r3, #3
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	4934      	ldr	r1, [pc, #208]	; (80055ec <HAL_RCC_ClockConfig+0x1bc>)
 800551c:	4313      	orrs	r3, r2
 800551e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005520:	f7fd f896 	bl	8002650 <HAL_GetTick>
 8005524:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005526:	e00a      	b.n	800553e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005528:	f7fd f892 	bl	8002650 <HAL_GetTick>
 800552c:	4602      	mov	r2, r0
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	1ad3      	subs	r3, r2, r3
 8005532:	f241 3288 	movw	r2, #5000	; 0x1388
 8005536:	4293      	cmp	r3, r2
 8005538:	d901      	bls.n	800553e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800553a:	2303      	movs	r3, #3
 800553c:	e04f      	b.n	80055de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800553e:	4b2b      	ldr	r3, [pc, #172]	; (80055ec <HAL_RCC_ClockConfig+0x1bc>)
 8005540:	689b      	ldr	r3, [r3, #8]
 8005542:	f003 020c 	and.w	r2, r3, #12
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	009b      	lsls	r3, r3, #2
 800554c:	429a      	cmp	r2, r3
 800554e:	d1eb      	bne.n	8005528 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005550:	4b25      	ldr	r3, [pc, #148]	; (80055e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f003 0307 	and.w	r3, r3, #7
 8005558:	683a      	ldr	r2, [r7, #0]
 800555a:	429a      	cmp	r2, r3
 800555c:	d20c      	bcs.n	8005578 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800555e:	4b22      	ldr	r3, [pc, #136]	; (80055e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005560:	683a      	ldr	r2, [r7, #0]
 8005562:	b2d2      	uxtb	r2, r2
 8005564:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005566:	4b20      	ldr	r3, [pc, #128]	; (80055e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f003 0307 	and.w	r3, r3, #7
 800556e:	683a      	ldr	r2, [r7, #0]
 8005570:	429a      	cmp	r2, r3
 8005572:	d001      	beq.n	8005578 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005574:	2301      	movs	r3, #1
 8005576:	e032      	b.n	80055de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f003 0304 	and.w	r3, r3, #4
 8005580:	2b00      	cmp	r3, #0
 8005582:	d008      	beq.n	8005596 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005584:	4b19      	ldr	r3, [pc, #100]	; (80055ec <HAL_RCC_ClockConfig+0x1bc>)
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	68db      	ldr	r3, [r3, #12]
 8005590:	4916      	ldr	r1, [pc, #88]	; (80055ec <HAL_RCC_ClockConfig+0x1bc>)
 8005592:	4313      	orrs	r3, r2
 8005594:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f003 0308 	and.w	r3, r3, #8
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d009      	beq.n	80055b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80055a2:	4b12      	ldr	r3, [pc, #72]	; (80055ec <HAL_RCC_ClockConfig+0x1bc>)
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	691b      	ldr	r3, [r3, #16]
 80055ae:	00db      	lsls	r3, r3, #3
 80055b0:	490e      	ldr	r1, [pc, #56]	; (80055ec <HAL_RCC_ClockConfig+0x1bc>)
 80055b2:	4313      	orrs	r3, r2
 80055b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80055b6:	f000 f821 	bl	80055fc <HAL_RCC_GetSysClockFreq>
 80055ba:	4602      	mov	r2, r0
 80055bc:	4b0b      	ldr	r3, [pc, #44]	; (80055ec <HAL_RCC_ClockConfig+0x1bc>)
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	091b      	lsrs	r3, r3, #4
 80055c2:	f003 030f 	and.w	r3, r3, #15
 80055c6:	490a      	ldr	r1, [pc, #40]	; (80055f0 <HAL_RCC_ClockConfig+0x1c0>)
 80055c8:	5ccb      	ldrb	r3, [r1, r3]
 80055ca:	fa22 f303 	lsr.w	r3, r2, r3
 80055ce:	4a09      	ldr	r2, [pc, #36]	; (80055f4 <HAL_RCC_ClockConfig+0x1c4>)
 80055d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80055d2:	4b09      	ldr	r3, [pc, #36]	; (80055f8 <HAL_RCC_ClockConfig+0x1c8>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4618      	mov	r0, r3
 80055d8:	f7fc fff6 	bl	80025c8 <HAL_InitTick>

  return HAL_OK;
 80055dc:	2300      	movs	r3, #0
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3710      	adds	r7, #16
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}
 80055e6:	bf00      	nop
 80055e8:	40023c00 	.word	0x40023c00
 80055ec:	40023800 	.word	0x40023800
 80055f0:	08008d58 	.word	0x08008d58
 80055f4:	20000000 	.word	0x20000000
 80055f8:	2000000c 	.word	0x2000000c

080055fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80055fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005600:	b094      	sub	sp, #80	; 0x50
 8005602:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005604:	2300      	movs	r3, #0
 8005606:	647b      	str	r3, [r7, #68]	; 0x44
 8005608:	2300      	movs	r3, #0
 800560a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800560c:	2300      	movs	r3, #0
 800560e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005610:	2300      	movs	r3, #0
 8005612:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005614:	4b79      	ldr	r3, [pc, #484]	; (80057fc <HAL_RCC_GetSysClockFreq+0x200>)
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	f003 030c 	and.w	r3, r3, #12
 800561c:	2b08      	cmp	r3, #8
 800561e:	d00d      	beq.n	800563c <HAL_RCC_GetSysClockFreq+0x40>
 8005620:	2b08      	cmp	r3, #8
 8005622:	f200 80e1 	bhi.w	80057e8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005626:	2b00      	cmp	r3, #0
 8005628:	d002      	beq.n	8005630 <HAL_RCC_GetSysClockFreq+0x34>
 800562a:	2b04      	cmp	r3, #4
 800562c:	d003      	beq.n	8005636 <HAL_RCC_GetSysClockFreq+0x3a>
 800562e:	e0db      	b.n	80057e8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005630:	4b73      	ldr	r3, [pc, #460]	; (8005800 <HAL_RCC_GetSysClockFreq+0x204>)
 8005632:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005634:	e0db      	b.n	80057ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005636:	4b73      	ldr	r3, [pc, #460]	; (8005804 <HAL_RCC_GetSysClockFreq+0x208>)
 8005638:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800563a:	e0d8      	b.n	80057ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800563c:	4b6f      	ldr	r3, [pc, #444]	; (80057fc <HAL_RCC_GetSysClockFreq+0x200>)
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005644:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005646:	4b6d      	ldr	r3, [pc, #436]	; (80057fc <HAL_RCC_GetSysClockFreq+0x200>)
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800564e:	2b00      	cmp	r3, #0
 8005650:	d063      	beq.n	800571a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005652:	4b6a      	ldr	r3, [pc, #424]	; (80057fc <HAL_RCC_GetSysClockFreq+0x200>)
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	099b      	lsrs	r3, r3, #6
 8005658:	2200      	movs	r2, #0
 800565a:	63bb      	str	r3, [r7, #56]	; 0x38
 800565c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800565e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005660:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005664:	633b      	str	r3, [r7, #48]	; 0x30
 8005666:	2300      	movs	r3, #0
 8005668:	637b      	str	r3, [r7, #52]	; 0x34
 800566a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800566e:	4622      	mov	r2, r4
 8005670:	462b      	mov	r3, r5
 8005672:	f04f 0000 	mov.w	r0, #0
 8005676:	f04f 0100 	mov.w	r1, #0
 800567a:	0159      	lsls	r1, r3, #5
 800567c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005680:	0150      	lsls	r0, r2, #5
 8005682:	4602      	mov	r2, r0
 8005684:	460b      	mov	r3, r1
 8005686:	4621      	mov	r1, r4
 8005688:	1a51      	subs	r1, r2, r1
 800568a:	6139      	str	r1, [r7, #16]
 800568c:	4629      	mov	r1, r5
 800568e:	eb63 0301 	sbc.w	r3, r3, r1
 8005692:	617b      	str	r3, [r7, #20]
 8005694:	f04f 0200 	mov.w	r2, #0
 8005698:	f04f 0300 	mov.w	r3, #0
 800569c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80056a0:	4659      	mov	r1, fp
 80056a2:	018b      	lsls	r3, r1, #6
 80056a4:	4651      	mov	r1, sl
 80056a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80056aa:	4651      	mov	r1, sl
 80056ac:	018a      	lsls	r2, r1, #6
 80056ae:	4651      	mov	r1, sl
 80056b0:	ebb2 0801 	subs.w	r8, r2, r1
 80056b4:	4659      	mov	r1, fp
 80056b6:	eb63 0901 	sbc.w	r9, r3, r1
 80056ba:	f04f 0200 	mov.w	r2, #0
 80056be:	f04f 0300 	mov.w	r3, #0
 80056c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80056c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80056ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80056ce:	4690      	mov	r8, r2
 80056d0:	4699      	mov	r9, r3
 80056d2:	4623      	mov	r3, r4
 80056d4:	eb18 0303 	adds.w	r3, r8, r3
 80056d8:	60bb      	str	r3, [r7, #8]
 80056da:	462b      	mov	r3, r5
 80056dc:	eb49 0303 	adc.w	r3, r9, r3
 80056e0:	60fb      	str	r3, [r7, #12]
 80056e2:	f04f 0200 	mov.w	r2, #0
 80056e6:	f04f 0300 	mov.w	r3, #0
 80056ea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80056ee:	4629      	mov	r1, r5
 80056f0:	024b      	lsls	r3, r1, #9
 80056f2:	4621      	mov	r1, r4
 80056f4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80056f8:	4621      	mov	r1, r4
 80056fa:	024a      	lsls	r2, r1, #9
 80056fc:	4610      	mov	r0, r2
 80056fe:	4619      	mov	r1, r3
 8005700:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005702:	2200      	movs	r2, #0
 8005704:	62bb      	str	r3, [r7, #40]	; 0x28
 8005706:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005708:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800570c:	f7fb fa54 	bl	8000bb8 <__aeabi_uldivmod>
 8005710:	4602      	mov	r2, r0
 8005712:	460b      	mov	r3, r1
 8005714:	4613      	mov	r3, r2
 8005716:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005718:	e058      	b.n	80057cc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800571a:	4b38      	ldr	r3, [pc, #224]	; (80057fc <HAL_RCC_GetSysClockFreq+0x200>)
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	099b      	lsrs	r3, r3, #6
 8005720:	2200      	movs	r2, #0
 8005722:	4618      	mov	r0, r3
 8005724:	4611      	mov	r1, r2
 8005726:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800572a:	623b      	str	r3, [r7, #32]
 800572c:	2300      	movs	r3, #0
 800572e:	627b      	str	r3, [r7, #36]	; 0x24
 8005730:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005734:	4642      	mov	r2, r8
 8005736:	464b      	mov	r3, r9
 8005738:	f04f 0000 	mov.w	r0, #0
 800573c:	f04f 0100 	mov.w	r1, #0
 8005740:	0159      	lsls	r1, r3, #5
 8005742:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005746:	0150      	lsls	r0, r2, #5
 8005748:	4602      	mov	r2, r0
 800574a:	460b      	mov	r3, r1
 800574c:	4641      	mov	r1, r8
 800574e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005752:	4649      	mov	r1, r9
 8005754:	eb63 0b01 	sbc.w	fp, r3, r1
 8005758:	f04f 0200 	mov.w	r2, #0
 800575c:	f04f 0300 	mov.w	r3, #0
 8005760:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005764:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005768:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800576c:	ebb2 040a 	subs.w	r4, r2, sl
 8005770:	eb63 050b 	sbc.w	r5, r3, fp
 8005774:	f04f 0200 	mov.w	r2, #0
 8005778:	f04f 0300 	mov.w	r3, #0
 800577c:	00eb      	lsls	r3, r5, #3
 800577e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005782:	00e2      	lsls	r2, r4, #3
 8005784:	4614      	mov	r4, r2
 8005786:	461d      	mov	r5, r3
 8005788:	4643      	mov	r3, r8
 800578a:	18e3      	adds	r3, r4, r3
 800578c:	603b      	str	r3, [r7, #0]
 800578e:	464b      	mov	r3, r9
 8005790:	eb45 0303 	adc.w	r3, r5, r3
 8005794:	607b      	str	r3, [r7, #4]
 8005796:	f04f 0200 	mov.w	r2, #0
 800579a:	f04f 0300 	mov.w	r3, #0
 800579e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80057a2:	4629      	mov	r1, r5
 80057a4:	028b      	lsls	r3, r1, #10
 80057a6:	4621      	mov	r1, r4
 80057a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80057ac:	4621      	mov	r1, r4
 80057ae:	028a      	lsls	r2, r1, #10
 80057b0:	4610      	mov	r0, r2
 80057b2:	4619      	mov	r1, r3
 80057b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057b6:	2200      	movs	r2, #0
 80057b8:	61bb      	str	r3, [r7, #24]
 80057ba:	61fa      	str	r2, [r7, #28]
 80057bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80057c0:	f7fb f9fa 	bl	8000bb8 <__aeabi_uldivmod>
 80057c4:	4602      	mov	r2, r0
 80057c6:	460b      	mov	r3, r1
 80057c8:	4613      	mov	r3, r2
 80057ca:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80057cc:	4b0b      	ldr	r3, [pc, #44]	; (80057fc <HAL_RCC_GetSysClockFreq+0x200>)
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	0c1b      	lsrs	r3, r3, #16
 80057d2:	f003 0303 	and.w	r3, r3, #3
 80057d6:	3301      	adds	r3, #1
 80057d8:	005b      	lsls	r3, r3, #1
 80057da:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80057dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80057de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80057e4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80057e6:	e002      	b.n	80057ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80057e8:	4b05      	ldr	r3, [pc, #20]	; (8005800 <HAL_RCC_GetSysClockFreq+0x204>)
 80057ea:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80057ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80057ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	3750      	adds	r7, #80	; 0x50
 80057f4:	46bd      	mov	sp, r7
 80057f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057fa:	bf00      	nop
 80057fc:	40023800 	.word	0x40023800
 8005800:	00f42400 	.word	0x00f42400
 8005804:	007a1200 	.word	0x007a1200

08005808 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005808:	b480      	push	{r7}
 800580a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800580c:	4b03      	ldr	r3, [pc, #12]	; (800581c <HAL_RCC_GetHCLKFreq+0x14>)
 800580e:	681b      	ldr	r3, [r3, #0]
}
 8005810:	4618      	mov	r0, r3
 8005812:	46bd      	mov	sp, r7
 8005814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005818:	4770      	bx	lr
 800581a:	bf00      	nop
 800581c:	20000000 	.word	0x20000000

08005820 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005824:	f7ff fff0 	bl	8005808 <HAL_RCC_GetHCLKFreq>
 8005828:	4602      	mov	r2, r0
 800582a:	4b05      	ldr	r3, [pc, #20]	; (8005840 <HAL_RCC_GetPCLK1Freq+0x20>)
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	0a9b      	lsrs	r3, r3, #10
 8005830:	f003 0307 	and.w	r3, r3, #7
 8005834:	4903      	ldr	r1, [pc, #12]	; (8005844 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005836:	5ccb      	ldrb	r3, [r1, r3]
 8005838:	fa22 f303 	lsr.w	r3, r2, r3
}
 800583c:	4618      	mov	r0, r3
 800583e:	bd80      	pop	{r7, pc}
 8005840:	40023800 	.word	0x40023800
 8005844:	08008d68 	.word	0x08008d68

08005848 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800584c:	f7ff ffdc 	bl	8005808 <HAL_RCC_GetHCLKFreq>
 8005850:	4602      	mov	r2, r0
 8005852:	4b05      	ldr	r3, [pc, #20]	; (8005868 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	0b5b      	lsrs	r3, r3, #13
 8005858:	f003 0307 	and.w	r3, r3, #7
 800585c:	4903      	ldr	r1, [pc, #12]	; (800586c <HAL_RCC_GetPCLK2Freq+0x24>)
 800585e:	5ccb      	ldrb	r3, [r1, r3]
 8005860:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005864:	4618      	mov	r0, r3
 8005866:	bd80      	pop	{r7, pc}
 8005868:	40023800 	.word	0x40023800
 800586c:	08008d68 	.word	0x08008d68

08005870 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b082      	sub	sp, #8
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d101      	bne.n	8005882 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	e07b      	b.n	800597a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005886:	2b00      	cmp	r3, #0
 8005888:	d108      	bne.n	800589c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005892:	d009      	beq.n	80058a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2200      	movs	r2, #0
 8005898:	61da      	str	r2, [r3, #28]
 800589a:	e005      	b.n	80058a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2200      	movs	r2, #0
 80058a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2200      	movs	r2, #0
 80058a6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2200      	movs	r2, #0
 80058ac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d106      	bne.n	80058c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2200      	movs	r2, #0
 80058be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f7fb fe0c 	bl	80014e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2202      	movs	r2, #2
 80058cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058de:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80058f0:	431a      	orrs	r2, r3
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	68db      	ldr	r3, [r3, #12]
 80058f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058fa:	431a      	orrs	r2, r3
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	691b      	ldr	r3, [r3, #16]
 8005900:	f003 0302 	and.w	r3, r3, #2
 8005904:	431a      	orrs	r2, r3
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	695b      	ldr	r3, [r3, #20]
 800590a:	f003 0301 	and.w	r3, r3, #1
 800590e:	431a      	orrs	r2, r3
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	699b      	ldr	r3, [r3, #24]
 8005914:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005918:	431a      	orrs	r2, r3
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	69db      	ldr	r3, [r3, #28]
 800591e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005922:	431a      	orrs	r2, r3
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6a1b      	ldr	r3, [r3, #32]
 8005928:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800592c:	ea42 0103 	orr.w	r1, r2, r3
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005934:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	430a      	orrs	r2, r1
 800593e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	699b      	ldr	r3, [r3, #24]
 8005944:	0c1b      	lsrs	r3, r3, #16
 8005946:	f003 0104 	and.w	r1, r3, #4
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800594e:	f003 0210 	and.w	r2, r3, #16
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	430a      	orrs	r2, r1
 8005958:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	69da      	ldr	r2, [r3, #28]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005968:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2200      	movs	r2, #0
 800596e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2201      	movs	r2, #1
 8005974:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005978:	2300      	movs	r3, #0
}
 800597a:	4618      	mov	r0, r3
 800597c:	3708      	adds	r7, #8
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}

08005982 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005982:	b580      	push	{r7, lr}
 8005984:	b082      	sub	sp, #8
 8005986:	af00      	add	r7, sp, #0
 8005988:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d101      	bne.n	8005994 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005990:	2301      	movs	r3, #1
 8005992:	e03f      	b.n	8005a14 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800599a:	b2db      	uxtb	r3, r3
 800599c:	2b00      	cmp	r3, #0
 800599e:	d106      	bne.n	80059ae <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2200      	movs	r2, #0
 80059a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f7fb fe01 	bl	80015b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2224      	movs	r2, #36	; 0x24
 80059b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	68da      	ldr	r2, [r3, #12]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80059c4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f000 f928 	bl	8005c1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	691a      	ldr	r2, [r3, #16]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80059da:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	695a      	ldr	r2, [r3, #20]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80059ea:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	68da      	ldr	r2, [r3, #12]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80059fa:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2200      	movs	r2, #0
 8005a00:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2220      	movs	r2, #32
 8005a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2220      	movs	r2, #32
 8005a0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005a12:	2300      	movs	r3, #0
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	3708      	adds	r7, #8
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}

08005a1c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b08a      	sub	sp, #40	; 0x28
 8005a20:	af02      	add	r7, sp, #8
 8005a22:	60f8      	str	r0, [r7, #12]
 8005a24:	60b9      	str	r1, [r7, #8]
 8005a26:	603b      	str	r3, [r7, #0]
 8005a28:	4613      	mov	r3, r2
 8005a2a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a36:	b2db      	uxtb	r3, r3
 8005a38:	2b20      	cmp	r3, #32
 8005a3a:	d17c      	bne.n	8005b36 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d002      	beq.n	8005a48 <HAL_UART_Transmit+0x2c>
 8005a42:	88fb      	ldrh	r3, [r7, #6]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d101      	bne.n	8005a4c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	e075      	b.n	8005b38 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a52:	2b01      	cmp	r3, #1
 8005a54:	d101      	bne.n	8005a5a <HAL_UART_Transmit+0x3e>
 8005a56:	2302      	movs	r3, #2
 8005a58:	e06e      	b.n	8005b38 <HAL_UART_Transmit+0x11c>
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2200      	movs	r2, #0
 8005a66:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2221      	movs	r2, #33	; 0x21
 8005a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a70:	f7fc fdee 	bl	8002650 <HAL_GetTick>
 8005a74:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	88fa      	ldrh	r2, [r7, #6]
 8005a7a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	88fa      	ldrh	r2, [r7, #6]
 8005a80:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	689b      	ldr	r3, [r3, #8]
 8005a86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a8a:	d108      	bne.n	8005a9e <HAL_UART_Transmit+0x82>
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	691b      	ldr	r3, [r3, #16]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d104      	bne.n	8005a9e <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005a94:	2300      	movs	r3, #0
 8005a96:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	61bb      	str	r3, [r7, #24]
 8005a9c:	e003      	b.n	8005aa6 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005aae:	e02a      	b.n	8005b06 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	9300      	str	r3, [sp, #0]
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	2180      	movs	r1, #128	; 0x80
 8005aba:	68f8      	ldr	r0, [r7, #12]
 8005abc:	f000 f840 	bl	8005b40 <UART_WaitOnFlagUntilTimeout>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d001      	beq.n	8005aca <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005ac6:	2303      	movs	r3, #3
 8005ac8:	e036      	b.n	8005b38 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005aca:	69fb      	ldr	r3, [r7, #28]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d10b      	bne.n	8005ae8 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005ad0:	69bb      	ldr	r3, [r7, #24]
 8005ad2:	881b      	ldrh	r3, [r3, #0]
 8005ad4:	461a      	mov	r2, r3
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ade:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005ae0:	69bb      	ldr	r3, [r7, #24]
 8005ae2:	3302      	adds	r3, #2
 8005ae4:	61bb      	str	r3, [r7, #24]
 8005ae6:	e007      	b.n	8005af8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005ae8:	69fb      	ldr	r3, [r7, #28]
 8005aea:	781a      	ldrb	r2, [r3, #0]
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005af2:	69fb      	ldr	r3, [r7, #28]
 8005af4:	3301      	adds	r3, #1
 8005af6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005afc:	b29b      	uxth	r3, r3
 8005afe:	3b01      	subs	r3, #1
 8005b00:	b29a      	uxth	r2, r3
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b0a:	b29b      	uxth	r3, r3
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d1cf      	bne.n	8005ab0 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	9300      	str	r3, [sp, #0]
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	2200      	movs	r2, #0
 8005b18:	2140      	movs	r1, #64	; 0x40
 8005b1a:	68f8      	ldr	r0, [r7, #12]
 8005b1c:	f000 f810 	bl	8005b40 <UART_WaitOnFlagUntilTimeout>
 8005b20:	4603      	mov	r3, r0
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d001      	beq.n	8005b2a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005b26:	2303      	movs	r3, #3
 8005b28:	e006      	b.n	8005b38 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2220      	movs	r2, #32
 8005b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005b32:	2300      	movs	r3, #0
 8005b34:	e000      	b.n	8005b38 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005b36:	2302      	movs	r3, #2
  }
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3720      	adds	r7, #32
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}

08005b40 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b090      	sub	sp, #64	; 0x40
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	60f8      	str	r0, [r7, #12]
 8005b48:	60b9      	str	r1, [r7, #8]
 8005b4a:	603b      	str	r3, [r7, #0]
 8005b4c:	4613      	mov	r3, r2
 8005b4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b50:	e050      	b.n	8005bf4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b58:	d04c      	beq.n	8005bf4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005b5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d007      	beq.n	8005b70 <UART_WaitOnFlagUntilTimeout+0x30>
 8005b60:	f7fc fd76 	bl	8002650 <HAL_GetTick>
 8005b64:	4602      	mov	r2, r0
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	1ad3      	subs	r3, r2, r3
 8005b6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d241      	bcs.n	8005bf4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	330c      	adds	r3, #12
 8005b76:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b7a:	e853 3f00 	ldrex	r3, [r3]
 8005b7e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b82:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005b86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	330c      	adds	r3, #12
 8005b8e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005b90:	637a      	str	r2, [r7, #52]	; 0x34
 8005b92:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b94:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005b96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b98:	e841 2300 	strex	r3, r2, [r1]
 8005b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d1e5      	bne.n	8005b70 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	3314      	adds	r3, #20
 8005baa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	e853 3f00 	ldrex	r3, [r3]
 8005bb2:	613b      	str	r3, [r7, #16]
   return(result);
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	f023 0301 	bic.w	r3, r3, #1
 8005bba:	63bb      	str	r3, [r7, #56]	; 0x38
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	3314      	adds	r3, #20
 8005bc2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005bc4:	623a      	str	r2, [r7, #32]
 8005bc6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bc8:	69f9      	ldr	r1, [r7, #28]
 8005bca:	6a3a      	ldr	r2, [r7, #32]
 8005bcc:	e841 2300 	strex	r3, r2, [r1]
 8005bd0:	61bb      	str	r3, [r7, #24]
   return(result);
 8005bd2:	69bb      	ldr	r3, [r7, #24]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d1e5      	bne.n	8005ba4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2220      	movs	r2, #32
 8005bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2220      	movs	r2, #32
 8005be4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2200      	movs	r2, #0
 8005bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005bf0:	2303      	movs	r3, #3
 8005bf2:	e00f      	b.n	8005c14 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	4013      	ands	r3, r2
 8005bfe:	68ba      	ldr	r2, [r7, #8]
 8005c00:	429a      	cmp	r2, r3
 8005c02:	bf0c      	ite	eq
 8005c04:	2301      	moveq	r3, #1
 8005c06:	2300      	movne	r3, #0
 8005c08:	b2db      	uxtb	r3, r3
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	79fb      	ldrb	r3, [r7, #7]
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	d09f      	beq.n	8005b52 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005c12:	2300      	movs	r3, #0
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	3740      	adds	r7, #64	; 0x40
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}

08005c1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c20:	b0c0      	sub	sp, #256	; 0x100
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	691b      	ldr	r3, [r3, #16]
 8005c30:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c38:	68d9      	ldr	r1, [r3, #12]
 8005c3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	ea40 0301 	orr.w	r3, r0, r1
 8005c44:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005c46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c4a:	689a      	ldr	r2, [r3, #8]
 8005c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c50:	691b      	ldr	r3, [r3, #16]
 8005c52:	431a      	orrs	r2, r3
 8005c54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c58:	695b      	ldr	r3, [r3, #20]
 8005c5a:	431a      	orrs	r2, r3
 8005c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c60:	69db      	ldr	r3, [r3, #28]
 8005c62:	4313      	orrs	r3, r2
 8005c64:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	68db      	ldr	r3, [r3, #12]
 8005c70:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005c74:	f021 010c 	bic.w	r1, r1, #12
 8005c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c7c:	681a      	ldr	r2, [r3, #0]
 8005c7e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005c82:	430b      	orrs	r3, r1
 8005c84:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005c86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	695b      	ldr	r3, [r3, #20]
 8005c8e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005c92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c96:	6999      	ldr	r1, [r3, #24]
 8005c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	ea40 0301 	orr.w	r3, r0, r1
 8005ca2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	4b8f      	ldr	r3, [pc, #572]	; (8005ee8 <UART_SetConfig+0x2cc>)
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d005      	beq.n	8005cbc <UART_SetConfig+0xa0>
 8005cb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cb4:	681a      	ldr	r2, [r3, #0]
 8005cb6:	4b8d      	ldr	r3, [pc, #564]	; (8005eec <UART_SetConfig+0x2d0>)
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d104      	bne.n	8005cc6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005cbc:	f7ff fdc4 	bl	8005848 <HAL_RCC_GetPCLK2Freq>
 8005cc0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005cc4:	e003      	b.n	8005cce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005cc6:	f7ff fdab 	bl	8005820 <HAL_RCC_GetPCLK1Freq>
 8005cca:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005cce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cd2:	69db      	ldr	r3, [r3, #28]
 8005cd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cd8:	f040 810c 	bne.w	8005ef4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005cdc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005ce6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005cea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005cee:	4622      	mov	r2, r4
 8005cf0:	462b      	mov	r3, r5
 8005cf2:	1891      	adds	r1, r2, r2
 8005cf4:	65b9      	str	r1, [r7, #88]	; 0x58
 8005cf6:	415b      	adcs	r3, r3
 8005cf8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005cfa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005cfe:	4621      	mov	r1, r4
 8005d00:	eb12 0801 	adds.w	r8, r2, r1
 8005d04:	4629      	mov	r1, r5
 8005d06:	eb43 0901 	adc.w	r9, r3, r1
 8005d0a:	f04f 0200 	mov.w	r2, #0
 8005d0e:	f04f 0300 	mov.w	r3, #0
 8005d12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005d16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005d1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005d1e:	4690      	mov	r8, r2
 8005d20:	4699      	mov	r9, r3
 8005d22:	4623      	mov	r3, r4
 8005d24:	eb18 0303 	adds.w	r3, r8, r3
 8005d28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005d2c:	462b      	mov	r3, r5
 8005d2e:	eb49 0303 	adc.w	r3, r9, r3
 8005d32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005d36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005d42:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005d46:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005d4a:	460b      	mov	r3, r1
 8005d4c:	18db      	adds	r3, r3, r3
 8005d4e:	653b      	str	r3, [r7, #80]	; 0x50
 8005d50:	4613      	mov	r3, r2
 8005d52:	eb42 0303 	adc.w	r3, r2, r3
 8005d56:	657b      	str	r3, [r7, #84]	; 0x54
 8005d58:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005d5c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005d60:	f7fa ff2a 	bl	8000bb8 <__aeabi_uldivmod>
 8005d64:	4602      	mov	r2, r0
 8005d66:	460b      	mov	r3, r1
 8005d68:	4b61      	ldr	r3, [pc, #388]	; (8005ef0 <UART_SetConfig+0x2d4>)
 8005d6a:	fba3 2302 	umull	r2, r3, r3, r2
 8005d6e:	095b      	lsrs	r3, r3, #5
 8005d70:	011c      	lsls	r4, r3, #4
 8005d72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d76:	2200      	movs	r2, #0
 8005d78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005d7c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005d80:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005d84:	4642      	mov	r2, r8
 8005d86:	464b      	mov	r3, r9
 8005d88:	1891      	adds	r1, r2, r2
 8005d8a:	64b9      	str	r1, [r7, #72]	; 0x48
 8005d8c:	415b      	adcs	r3, r3
 8005d8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d90:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005d94:	4641      	mov	r1, r8
 8005d96:	eb12 0a01 	adds.w	sl, r2, r1
 8005d9a:	4649      	mov	r1, r9
 8005d9c:	eb43 0b01 	adc.w	fp, r3, r1
 8005da0:	f04f 0200 	mov.w	r2, #0
 8005da4:	f04f 0300 	mov.w	r3, #0
 8005da8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005dac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005db0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005db4:	4692      	mov	sl, r2
 8005db6:	469b      	mov	fp, r3
 8005db8:	4643      	mov	r3, r8
 8005dba:	eb1a 0303 	adds.w	r3, sl, r3
 8005dbe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005dc2:	464b      	mov	r3, r9
 8005dc4:	eb4b 0303 	adc.w	r3, fp, r3
 8005dc8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005dd8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005ddc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005de0:	460b      	mov	r3, r1
 8005de2:	18db      	adds	r3, r3, r3
 8005de4:	643b      	str	r3, [r7, #64]	; 0x40
 8005de6:	4613      	mov	r3, r2
 8005de8:	eb42 0303 	adc.w	r3, r2, r3
 8005dec:	647b      	str	r3, [r7, #68]	; 0x44
 8005dee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005df2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005df6:	f7fa fedf 	bl	8000bb8 <__aeabi_uldivmod>
 8005dfa:	4602      	mov	r2, r0
 8005dfc:	460b      	mov	r3, r1
 8005dfe:	4611      	mov	r1, r2
 8005e00:	4b3b      	ldr	r3, [pc, #236]	; (8005ef0 <UART_SetConfig+0x2d4>)
 8005e02:	fba3 2301 	umull	r2, r3, r3, r1
 8005e06:	095b      	lsrs	r3, r3, #5
 8005e08:	2264      	movs	r2, #100	; 0x64
 8005e0a:	fb02 f303 	mul.w	r3, r2, r3
 8005e0e:	1acb      	subs	r3, r1, r3
 8005e10:	00db      	lsls	r3, r3, #3
 8005e12:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005e16:	4b36      	ldr	r3, [pc, #216]	; (8005ef0 <UART_SetConfig+0x2d4>)
 8005e18:	fba3 2302 	umull	r2, r3, r3, r2
 8005e1c:	095b      	lsrs	r3, r3, #5
 8005e1e:	005b      	lsls	r3, r3, #1
 8005e20:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005e24:	441c      	add	r4, r3
 8005e26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005e30:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005e34:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005e38:	4642      	mov	r2, r8
 8005e3a:	464b      	mov	r3, r9
 8005e3c:	1891      	adds	r1, r2, r2
 8005e3e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005e40:	415b      	adcs	r3, r3
 8005e42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e44:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005e48:	4641      	mov	r1, r8
 8005e4a:	1851      	adds	r1, r2, r1
 8005e4c:	6339      	str	r1, [r7, #48]	; 0x30
 8005e4e:	4649      	mov	r1, r9
 8005e50:	414b      	adcs	r3, r1
 8005e52:	637b      	str	r3, [r7, #52]	; 0x34
 8005e54:	f04f 0200 	mov.w	r2, #0
 8005e58:	f04f 0300 	mov.w	r3, #0
 8005e5c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005e60:	4659      	mov	r1, fp
 8005e62:	00cb      	lsls	r3, r1, #3
 8005e64:	4651      	mov	r1, sl
 8005e66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e6a:	4651      	mov	r1, sl
 8005e6c:	00ca      	lsls	r2, r1, #3
 8005e6e:	4610      	mov	r0, r2
 8005e70:	4619      	mov	r1, r3
 8005e72:	4603      	mov	r3, r0
 8005e74:	4642      	mov	r2, r8
 8005e76:	189b      	adds	r3, r3, r2
 8005e78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005e7c:	464b      	mov	r3, r9
 8005e7e:	460a      	mov	r2, r1
 8005e80:	eb42 0303 	adc.w	r3, r2, r3
 8005e84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005e94:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005e98:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005e9c:	460b      	mov	r3, r1
 8005e9e:	18db      	adds	r3, r3, r3
 8005ea0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ea2:	4613      	mov	r3, r2
 8005ea4:	eb42 0303 	adc.w	r3, r2, r3
 8005ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005eaa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005eae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005eb2:	f7fa fe81 	bl	8000bb8 <__aeabi_uldivmod>
 8005eb6:	4602      	mov	r2, r0
 8005eb8:	460b      	mov	r3, r1
 8005eba:	4b0d      	ldr	r3, [pc, #52]	; (8005ef0 <UART_SetConfig+0x2d4>)
 8005ebc:	fba3 1302 	umull	r1, r3, r3, r2
 8005ec0:	095b      	lsrs	r3, r3, #5
 8005ec2:	2164      	movs	r1, #100	; 0x64
 8005ec4:	fb01 f303 	mul.w	r3, r1, r3
 8005ec8:	1ad3      	subs	r3, r2, r3
 8005eca:	00db      	lsls	r3, r3, #3
 8005ecc:	3332      	adds	r3, #50	; 0x32
 8005ece:	4a08      	ldr	r2, [pc, #32]	; (8005ef0 <UART_SetConfig+0x2d4>)
 8005ed0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ed4:	095b      	lsrs	r3, r3, #5
 8005ed6:	f003 0207 	and.w	r2, r3, #7
 8005eda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4422      	add	r2, r4
 8005ee2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005ee4:	e105      	b.n	80060f2 <UART_SetConfig+0x4d6>
 8005ee6:	bf00      	nop
 8005ee8:	40011000 	.word	0x40011000
 8005eec:	40011400 	.word	0x40011400
 8005ef0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005ef4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ef8:	2200      	movs	r2, #0
 8005efa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005efe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005f02:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005f06:	4642      	mov	r2, r8
 8005f08:	464b      	mov	r3, r9
 8005f0a:	1891      	adds	r1, r2, r2
 8005f0c:	6239      	str	r1, [r7, #32]
 8005f0e:	415b      	adcs	r3, r3
 8005f10:	627b      	str	r3, [r7, #36]	; 0x24
 8005f12:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005f16:	4641      	mov	r1, r8
 8005f18:	1854      	adds	r4, r2, r1
 8005f1a:	4649      	mov	r1, r9
 8005f1c:	eb43 0501 	adc.w	r5, r3, r1
 8005f20:	f04f 0200 	mov.w	r2, #0
 8005f24:	f04f 0300 	mov.w	r3, #0
 8005f28:	00eb      	lsls	r3, r5, #3
 8005f2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005f2e:	00e2      	lsls	r2, r4, #3
 8005f30:	4614      	mov	r4, r2
 8005f32:	461d      	mov	r5, r3
 8005f34:	4643      	mov	r3, r8
 8005f36:	18e3      	adds	r3, r4, r3
 8005f38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005f3c:	464b      	mov	r3, r9
 8005f3e:	eb45 0303 	adc.w	r3, r5, r3
 8005f42:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005f46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005f52:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005f56:	f04f 0200 	mov.w	r2, #0
 8005f5a:	f04f 0300 	mov.w	r3, #0
 8005f5e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005f62:	4629      	mov	r1, r5
 8005f64:	008b      	lsls	r3, r1, #2
 8005f66:	4621      	mov	r1, r4
 8005f68:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f6c:	4621      	mov	r1, r4
 8005f6e:	008a      	lsls	r2, r1, #2
 8005f70:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005f74:	f7fa fe20 	bl	8000bb8 <__aeabi_uldivmod>
 8005f78:	4602      	mov	r2, r0
 8005f7a:	460b      	mov	r3, r1
 8005f7c:	4b60      	ldr	r3, [pc, #384]	; (8006100 <UART_SetConfig+0x4e4>)
 8005f7e:	fba3 2302 	umull	r2, r3, r3, r2
 8005f82:	095b      	lsrs	r3, r3, #5
 8005f84:	011c      	lsls	r4, r3, #4
 8005f86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005f90:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005f94:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005f98:	4642      	mov	r2, r8
 8005f9a:	464b      	mov	r3, r9
 8005f9c:	1891      	adds	r1, r2, r2
 8005f9e:	61b9      	str	r1, [r7, #24]
 8005fa0:	415b      	adcs	r3, r3
 8005fa2:	61fb      	str	r3, [r7, #28]
 8005fa4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005fa8:	4641      	mov	r1, r8
 8005faa:	1851      	adds	r1, r2, r1
 8005fac:	6139      	str	r1, [r7, #16]
 8005fae:	4649      	mov	r1, r9
 8005fb0:	414b      	adcs	r3, r1
 8005fb2:	617b      	str	r3, [r7, #20]
 8005fb4:	f04f 0200 	mov.w	r2, #0
 8005fb8:	f04f 0300 	mov.w	r3, #0
 8005fbc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005fc0:	4659      	mov	r1, fp
 8005fc2:	00cb      	lsls	r3, r1, #3
 8005fc4:	4651      	mov	r1, sl
 8005fc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005fca:	4651      	mov	r1, sl
 8005fcc:	00ca      	lsls	r2, r1, #3
 8005fce:	4610      	mov	r0, r2
 8005fd0:	4619      	mov	r1, r3
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	4642      	mov	r2, r8
 8005fd6:	189b      	adds	r3, r3, r2
 8005fd8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005fdc:	464b      	mov	r3, r9
 8005fde:	460a      	mov	r2, r1
 8005fe0:	eb42 0303 	adc.w	r3, r2, r3
 8005fe4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	67bb      	str	r3, [r7, #120]	; 0x78
 8005ff2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005ff4:	f04f 0200 	mov.w	r2, #0
 8005ff8:	f04f 0300 	mov.w	r3, #0
 8005ffc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006000:	4649      	mov	r1, r9
 8006002:	008b      	lsls	r3, r1, #2
 8006004:	4641      	mov	r1, r8
 8006006:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800600a:	4641      	mov	r1, r8
 800600c:	008a      	lsls	r2, r1, #2
 800600e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006012:	f7fa fdd1 	bl	8000bb8 <__aeabi_uldivmod>
 8006016:	4602      	mov	r2, r0
 8006018:	460b      	mov	r3, r1
 800601a:	4b39      	ldr	r3, [pc, #228]	; (8006100 <UART_SetConfig+0x4e4>)
 800601c:	fba3 1302 	umull	r1, r3, r3, r2
 8006020:	095b      	lsrs	r3, r3, #5
 8006022:	2164      	movs	r1, #100	; 0x64
 8006024:	fb01 f303 	mul.w	r3, r1, r3
 8006028:	1ad3      	subs	r3, r2, r3
 800602a:	011b      	lsls	r3, r3, #4
 800602c:	3332      	adds	r3, #50	; 0x32
 800602e:	4a34      	ldr	r2, [pc, #208]	; (8006100 <UART_SetConfig+0x4e4>)
 8006030:	fba2 2303 	umull	r2, r3, r2, r3
 8006034:	095b      	lsrs	r3, r3, #5
 8006036:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800603a:	441c      	add	r4, r3
 800603c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006040:	2200      	movs	r2, #0
 8006042:	673b      	str	r3, [r7, #112]	; 0x70
 8006044:	677a      	str	r2, [r7, #116]	; 0x74
 8006046:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800604a:	4642      	mov	r2, r8
 800604c:	464b      	mov	r3, r9
 800604e:	1891      	adds	r1, r2, r2
 8006050:	60b9      	str	r1, [r7, #8]
 8006052:	415b      	adcs	r3, r3
 8006054:	60fb      	str	r3, [r7, #12]
 8006056:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800605a:	4641      	mov	r1, r8
 800605c:	1851      	adds	r1, r2, r1
 800605e:	6039      	str	r1, [r7, #0]
 8006060:	4649      	mov	r1, r9
 8006062:	414b      	adcs	r3, r1
 8006064:	607b      	str	r3, [r7, #4]
 8006066:	f04f 0200 	mov.w	r2, #0
 800606a:	f04f 0300 	mov.w	r3, #0
 800606e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006072:	4659      	mov	r1, fp
 8006074:	00cb      	lsls	r3, r1, #3
 8006076:	4651      	mov	r1, sl
 8006078:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800607c:	4651      	mov	r1, sl
 800607e:	00ca      	lsls	r2, r1, #3
 8006080:	4610      	mov	r0, r2
 8006082:	4619      	mov	r1, r3
 8006084:	4603      	mov	r3, r0
 8006086:	4642      	mov	r2, r8
 8006088:	189b      	adds	r3, r3, r2
 800608a:	66bb      	str	r3, [r7, #104]	; 0x68
 800608c:	464b      	mov	r3, r9
 800608e:	460a      	mov	r2, r1
 8006090:	eb42 0303 	adc.w	r3, r2, r3
 8006094:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006096:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	2200      	movs	r2, #0
 800609e:	663b      	str	r3, [r7, #96]	; 0x60
 80060a0:	667a      	str	r2, [r7, #100]	; 0x64
 80060a2:	f04f 0200 	mov.w	r2, #0
 80060a6:	f04f 0300 	mov.w	r3, #0
 80060aa:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80060ae:	4649      	mov	r1, r9
 80060b0:	008b      	lsls	r3, r1, #2
 80060b2:	4641      	mov	r1, r8
 80060b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80060b8:	4641      	mov	r1, r8
 80060ba:	008a      	lsls	r2, r1, #2
 80060bc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80060c0:	f7fa fd7a 	bl	8000bb8 <__aeabi_uldivmod>
 80060c4:	4602      	mov	r2, r0
 80060c6:	460b      	mov	r3, r1
 80060c8:	4b0d      	ldr	r3, [pc, #52]	; (8006100 <UART_SetConfig+0x4e4>)
 80060ca:	fba3 1302 	umull	r1, r3, r3, r2
 80060ce:	095b      	lsrs	r3, r3, #5
 80060d0:	2164      	movs	r1, #100	; 0x64
 80060d2:	fb01 f303 	mul.w	r3, r1, r3
 80060d6:	1ad3      	subs	r3, r2, r3
 80060d8:	011b      	lsls	r3, r3, #4
 80060da:	3332      	adds	r3, #50	; 0x32
 80060dc:	4a08      	ldr	r2, [pc, #32]	; (8006100 <UART_SetConfig+0x4e4>)
 80060de:	fba2 2303 	umull	r2, r3, r2, r3
 80060e2:	095b      	lsrs	r3, r3, #5
 80060e4:	f003 020f 	and.w	r2, r3, #15
 80060e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4422      	add	r2, r4
 80060f0:	609a      	str	r2, [r3, #8]
}
 80060f2:	bf00      	nop
 80060f4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80060f8:	46bd      	mov	sp, r7
 80060fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80060fe:	bf00      	nop
 8006100:	51eb851f 	.word	0x51eb851f

08006104 <__errno>:
 8006104:	4b01      	ldr	r3, [pc, #4]	; (800610c <__errno+0x8>)
 8006106:	6818      	ldr	r0, [r3, #0]
 8006108:	4770      	bx	lr
 800610a:	bf00      	nop
 800610c:	20000014 	.word	0x20000014

08006110 <__libc_init_array>:
 8006110:	b570      	push	{r4, r5, r6, lr}
 8006112:	4d0d      	ldr	r5, [pc, #52]	; (8006148 <__libc_init_array+0x38>)
 8006114:	4c0d      	ldr	r4, [pc, #52]	; (800614c <__libc_init_array+0x3c>)
 8006116:	1b64      	subs	r4, r4, r5
 8006118:	10a4      	asrs	r4, r4, #2
 800611a:	2600      	movs	r6, #0
 800611c:	42a6      	cmp	r6, r4
 800611e:	d109      	bne.n	8006134 <__libc_init_array+0x24>
 8006120:	4d0b      	ldr	r5, [pc, #44]	; (8006150 <__libc_init_array+0x40>)
 8006122:	4c0c      	ldr	r4, [pc, #48]	; (8006154 <__libc_init_array+0x44>)
 8006124:	f002 fd7a 	bl	8008c1c <_init>
 8006128:	1b64      	subs	r4, r4, r5
 800612a:	10a4      	asrs	r4, r4, #2
 800612c:	2600      	movs	r6, #0
 800612e:	42a6      	cmp	r6, r4
 8006130:	d105      	bne.n	800613e <__libc_init_array+0x2e>
 8006132:	bd70      	pop	{r4, r5, r6, pc}
 8006134:	f855 3b04 	ldr.w	r3, [r5], #4
 8006138:	4798      	blx	r3
 800613a:	3601      	adds	r6, #1
 800613c:	e7ee      	b.n	800611c <__libc_init_array+0xc>
 800613e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006142:	4798      	blx	r3
 8006144:	3601      	adds	r6, #1
 8006146:	e7f2      	b.n	800612e <__libc_init_array+0x1e>
 8006148:	080095c4 	.word	0x080095c4
 800614c:	080095c4 	.word	0x080095c4
 8006150:	080095c4 	.word	0x080095c4
 8006154:	080095c8 	.word	0x080095c8

08006158 <memset>:
 8006158:	4402      	add	r2, r0
 800615a:	4603      	mov	r3, r0
 800615c:	4293      	cmp	r3, r2
 800615e:	d100      	bne.n	8006162 <memset+0xa>
 8006160:	4770      	bx	lr
 8006162:	f803 1b01 	strb.w	r1, [r3], #1
 8006166:	e7f9      	b.n	800615c <memset+0x4>

08006168 <__cvt>:
 8006168:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800616c:	ec55 4b10 	vmov	r4, r5, d0
 8006170:	2d00      	cmp	r5, #0
 8006172:	460e      	mov	r6, r1
 8006174:	4619      	mov	r1, r3
 8006176:	462b      	mov	r3, r5
 8006178:	bfbb      	ittet	lt
 800617a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800617e:	461d      	movlt	r5, r3
 8006180:	2300      	movge	r3, #0
 8006182:	232d      	movlt	r3, #45	; 0x2d
 8006184:	700b      	strb	r3, [r1, #0]
 8006186:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006188:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800618c:	4691      	mov	r9, r2
 800618e:	f023 0820 	bic.w	r8, r3, #32
 8006192:	bfbc      	itt	lt
 8006194:	4622      	movlt	r2, r4
 8006196:	4614      	movlt	r4, r2
 8006198:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800619c:	d005      	beq.n	80061aa <__cvt+0x42>
 800619e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80061a2:	d100      	bne.n	80061a6 <__cvt+0x3e>
 80061a4:	3601      	adds	r6, #1
 80061a6:	2102      	movs	r1, #2
 80061a8:	e000      	b.n	80061ac <__cvt+0x44>
 80061aa:	2103      	movs	r1, #3
 80061ac:	ab03      	add	r3, sp, #12
 80061ae:	9301      	str	r3, [sp, #4]
 80061b0:	ab02      	add	r3, sp, #8
 80061b2:	9300      	str	r3, [sp, #0]
 80061b4:	ec45 4b10 	vmov	d0, r4, r5
 80061b8:	4653      	mov	r3, sl
 80061ba:	4632      	mov	r2, r6
 80061bc:	f000 fccc 	bl	8006b58 <_dtoa_r>
 80061c0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80061c4:	4607      	mov	r7, r0
 80061c6:	d102      	bne.n	80061ce <__cvt+0x66>
 80061c8:	f019 0f01 	tst.w	r9, #1
 80061cc:	d022      	beq.n	8006214 <__cvt+0xac>
 80061ce:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80061d2:	eb07 0906 	add.w	r9, r7, r6
 80061d6:	d110      	bne.n	80061fa <__cvt+0x92>
 80061d8:	783b      	ldrb	r3, [r7, #0]
 80061da:	2b30      	cmp	r3, #48	; 0x30
 80061dc:	d10a      	bne.n	80061f4 <__cvt+0x8c>
 80061de:	2200      	movs	r2, #0
 80061e0:	2300      	movs	r3, #0
 80061e2:	4620      	mov	r0, r4
 80061e4:	4629      	mov	r1, r5
 80061e6:	f7fa fc77 	bl	8000ad8 <__aeabi_dcmpeq>
 80061ea:	b918      	cbnz	r0, 80061f4 <__cvt+0x8c>
 80061ec:	f1c6 0601 	rsb	r6, r6, #1
 80061f0:	f8ca 6000 	str.w	r6, [sl]
 80061f4:	f8da 3000 	ldr.w	r3, [sl]
 80061f8:	4499      	add	r9, r3
 80061fa:	2200      	movs	r2, #0
 80061fc:	2300      	movs	r3, #0
 80061fe:	4620      	mov	r0, r4
 8006200:	4629      	mov	r1, r5
 8006202:	f7fa fc69 	bl	8000ad8 <__aeabi_dcmpeq>
 8006206:	b108      	cbz	r0, 800620c <__cvt+0xa4>
 8006208:	f8cd 900c 	str.w	r9, [sp, #12]
 800620c:	2230      	movs	r2, #48	; 0x30
 800620e:	9b03      	ldr	r3, [sp, #12]
 8006210:	454b      	cmp	r3, r9
 8006212:	d307      	bcc.n	8006224 <__cvt+0xbc>
 8006214:	9b03      	ldr	r3, [sp, #12]
 8006216:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006218:	1bdb      	subs	r3, r3, r7
 800621a:	4638      	mov	r0, r7
 800621c:	6013      	str	r3, [r2, #0]
 800621e:	b004      	add	sp, #16
 8006220:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006224:	1c59      	adds	r1, r3, #1
 8006226:	9103      	str	r1, [sp, #12]
 8006228:	701a      	strb	r2, [r3, #0]
 800622a:	e7f0      	b.n	800620e <__cvt+0xa6>

0800622c <__exponent>:
 800622c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800622e:	4603      	mov	r3, r0
 8006230:	2900      	cmp	r1, #0
 8006232:	bfb8      	it	lt
 8006234:	4249      	neglt	r1, r1
 8006236:	f803 2b02 	strb.w	r2, [r3], #2
 800623a:	bfb4      	ite	lt
 800623c:	222d      	movlt	r2, #45	; 0x2d
 800623e:	222b      	movge	r2, #43	; 0x2b
 8006240:	2909      	cmp	r1, #9
 8006242:	7042      	strb	r2, [r0, #1]
 8006244:	dd2a      	ble.n	800629c <__exponent+0x70>
 8006246:	f10d 0407 	add.w	r4, sp, #7
 800624a:	46a4      	mov	ip, r4
 800624c:	270a      	movs	r7, #10
 800624e:	46a6      	mov	lr, r4
 8006250:	460a      	mov	r2, r1
 8006252:	fb91 f6f7 	sdiv	r6, r1, r7
 8006256:	fb07 1516 	mls	r5, r7, r6, r1
 800625a:	3530      	adds	r5, #48	; 0x30
 800625c:	2a63      	cmp	r2, #99	; 0x63
 800625e:	f104 34ff 	add.w	r4, r4, #4294967295
 8006262:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006266:	4631      	mov	r1, r6
 8006268:	dcf1      	bgt.n	800624e <__exponent+0x22>
 800626a:	3130      	adds	r1, #48	; 0x30
 800626c:	f1ae 0502 	sub.w	r5, lr, #2
 8006270:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006274:	1c44      	adds	r4, r0, #1
 8006276:	4629      	mov	r1, r5
 8006278:	4561      	cmp	r1, ip
 800627a:	d30a      	bcc.n	8006292 <__exponent+0x66>
 800627c:	f10d 0209 	add.w	r2, sp, #9
 8006280:	eba2 020e 	sub.w	r2, r2, lr
 8006284:	4565      	cmp	r5, ip
 8006286:	bf88      	it	hi
 8006288:	2200      	movhi	r2, #0
 800628a:	4413      	add	r3, r2
 800628c:	1a18      	subs	r0, r3, r0
 800628e:	b003      	add	sp, #12
 8006290:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006292:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006296:	f804 2f01 	strb.w	r2, [r4, #1]!
 800629a:	e7ed      	b.n	8006278 <__exponent+0x4c>
 800629c:	2330      	movs	r3, #48	; 0x30
 800629e:	3130      	adds	r1, #48	; 0x30
 80062a0:	7083      	strb	r3, [r0, #2]
 80062a2:	70c1      	strb	r1, [r0, #3]
 80062a4:	1d03      	adds	r3, r0, #4
 80062a6:	e7f1      	b.n	800628c <__exponent+0x60>

080062a8 <_printf_float>:
 80062a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062ac:	ed2d 8b02 	vpush	{d8}
 80062b0:	b08d      	sub	sp, #52	; 0x34
 80062b2:	460c      	mov	r4, r1
 80062b4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80062b8:	4616      	mov	r6, r2
 80062ba:	461f      	mov	r7, r3
 80062bc:	4605      	mov	r5, r0
 80062be:	f001 fa39 	bl	8007734 <_localeconv_r>
 80062c2:	f8d0 a000 	ldr.w	sl, [r0]
 80062c6:	4650      	mov	r0, sl
 80062c8:	f7f9 ff8a 	bl	80001e0 <strlen>
 80062cc:	2300      	movs	r3, #0
 80062ce:	930a      	str	r3, [sp, #40]	; 0x28
 80062d0:	6823      	ldr	r3, [r4, #0]
 80062d2:	9305      	str	r3, [sp, #20]
 80062d4:	f8d8 3000 	ldr.w	r3, [r8]
 80062d8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80062dc:	3307      	adds	r3, #7
 80062de:	f023 0307 	bic.w	r3, r3, #7
 80062e2:	f103 0208 	add.w	r2, r3, #8
 80062e6:	f8c8 2000 	str.w	r2, [r8]
 80062ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ee:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80062f2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80062f6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80062fa:	9307      	str	r3, [sp, #28]
 80062fc:	f8cd 8018 	str.w	r8, [sp, #24]
 8006300:	ee08 0a10 	vmov	s16, r0
 8006304:	4b9f      	ldr	r3, [pc, #636]	; (8006584 <_printf_float+0x2dc>)
 8006306:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800630a:	f04f 32ff 	mov.w	r2, #4294967295
 800630e:	f7fa fc15 	bl	8000b3c <__aeabi_dcmpun>
 8006312:	bb88      	cbnz	r0, 8006378 <_printf_float+0xd0>
 8006314:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006318:	4b9a      	ldr	r3, [pc, #616]	; (8006584 <_printf_float+0x2dc>)
 800631a:	f04f 32ff 	mov.w	r2, #4294967295
 800631e:	f7fa fbef 	bl	8000b00 <__aeabi_dcmple>
 8006322:	bb48      	cbnz	r0, 8006378 <_printf_float+0xd0>
 8006324:	2200      	movs	r2, #0
 8006326:	2300      	movs	r3, #0
 8006328:	4640      	mov	r0, r8
 800632a:	4649      	mov	r1, r9
 800632c:	f7fa fbde 	bl	8000aec <__aeabi_dcmplt>
 8006330:	b110      	cbz	r0, 8006338 <_printf_float+0x90>
 8006332:	232d      	movs	r3, #45	; 0x2d
 8006334:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006338:	4b93      	ldr	r3, [pc, #588]	; (8006588 <_printf_float+0x2e0>)
 800633a:	4894      	ldr	r0, [pc, #592]	; (800658c <_printf_float+0x2e4>)
 800633c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006340:	bf94      	ite	ls
 8006342:	4698      	movls	r8, r3
 8006344:	4680      	movhi	r8, r0
 8006346:	2303      	movs	r3, #3
 8006348:	6123      	str	r3, [r4, #16]
 800634a:	9b05      	ldr	r3, [sp, #20]
 800634c:	f023 0204 	bic.w	r2, r3, #4
 8006350:	6022      	str	r2, [r4, #0]
 8006352:	f04f 0900 	mov.w	r9, #0
 8006356:	9700      	str	r7, [sp, #0]
 8006358:	4633      	mov	r3, r6
 800635a:	aa0b      	add	r2, sp, #44	; 0x2c
 800635c:	4621      	mov	r1, r4
 800635e:	4628      	mov	r0, r5
 8006360:	f000 f9d8 	bl	8006714 <_printf_common>
 8006364:	3001      	adds	r0, #1
 8006366:	f040 8090 	bne.w	800648a <_printf_float+0x1e2>
 800636a:	f04f 30ff 	mov.w	r0, #4294967295
 800636e:	b00d      	add	sp, #52	; 0x34
 8006370:	ecbd 8b02 	vpop	{d8}
 8006374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006378:	4642      	mov	r2, r8
 800637a:	464b      	mov	r3, r9
 800637c:	4640      	mov	r0, r8
 800637e:	4649      	mov	r1, r9
 8006380:	f7fa fbdc 	bl	8000b3c <__aeabi_dcmpun>
 8006384:	b140      	cbz	r0, 8006398 <_printf_float+0xf0>
 8006386:	464b      	mov	r3, r9
 8006388:	2b00      	cmp	r3, #0
 800638a:	bfbc      	itt	lt
 800638c:	232d      	movlt	r3, #45	; 0x2d
 800638e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006392:	487f      	ldr	r0, [pc, #508]	; (8006590 <_printf_float+0x2e8>)
 8006394:	4b7f      	ldr	r3, [pc, #508]	; (8006594 <_printf_float+0x2ec>)
 8006396:	e7d1      	b.n	800633c <_printf_float+0x94>
 8006398:	6863      	ldr	r3, [r4, #4]
 800639a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800639e:	9206      	str	r2, [sp, #24]
 80063a0:	1c5a      	adds	r2, r3, #1
 80063a2:	d13f      	bne.n	8006424 <_printf_float+0x17c>
 80063a4:	2306      	movs	r3, #6
 80063a6:	6063      	str	r3, [r4, #4]
 80063a8:	9b05      	ldr	r3, [sp, #20]
 80063aa:	6861      	ldr	r1, [r4, #4]
 80063ac:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80063b0:	2300      	movs	r3, #0
 80063b2:	9303      	str	r3, [sp, #12]
 80063b4:	ab0a      	add	r3, sp, #40	; 0x28
 80063b6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80063ba:	ab09      	add	r3, sp, #36	; 0x24
 80063bc:	ec49 8b10 	vmov	d0, r8, r9
 80063c0:	9300      	str	r3, [sp, #0]
 80063c2:	6022      	str	r2, [r4, #0]
 80063c4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80063c8:	4628      	mov	r0, r5
 80063ca:	f7ff fecd 	bl	8006168 <__cvt>
 80063ce:	9b06      	ldr	r3, [sp, #24]
 80063d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80063d2:	2b47      	cmp	r3, #71	; 0x47
 80063d4:	4680      	mov	r8, r0
 80063d6:	d108      	bne.n	80063ea <_printf_float+0x142>
 80063d8:	1cc8      	adds	r0, r1, #3
 80063da:	db02      	blt.n	80063e2 <_printf_float+0x13a>
 80063dc:	6863      	ldr	r3, [r4, #4]
 80063de:	4299      	cmp	r1, r3
 80063e0:	dd41      	ble.n	8006466 <_printf_float+0x1be>
 80063e2:	f1ab 0b02 	sub.w	fp, fp, #2
 80063e6:	fa5f fb8b 	uxtb.w	fp, fp
 80063ea:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80063ee:	d820      	bhi.n	8006432 <_printf_float+0x18a>
 80063f0:	3901      	subs	r1, #1
 80063f2:	465a      	mov	r2, fp
 80063f4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80063f8:	9109      	str	r1, [sp, #36]	; 0x24
 80063fa:	f7ff ff17 	bl	800622c <__exponent>
 80063fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006400:	1813      	adds	r3, r2, r0
 8006402:	2a01      	cmp	r2, #1
 8006404:	4681      	mov	r9, r0
 8006406:	6123      	str	r3, [r4, #16]
 8006408:	dc02      	bgt.n	8006410 <_printf_float+0x168>
 800640a:	6822      	ldr	r2, [r4, #0]
 800640c:	07d2      	lsls	r2, r2, #31
 800640e:	d501      	bpl.n	8006414 <_printf_float+0x16c>
 8006410:	3301      	adds	r3, #1
 8006412:	6123      	str	r3, [r4, #16]
 8006414:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006418:	2b00      	cmp	r3, #0
 800641a:	d09c      	beq.n	8006356 <_printf_float+0xae>
 800641c:	232d      	movs	r3, #45	; 0x2d
 800641e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006422:	e798      	b.n	8006356 <_printf_float+0xae>
 8006424:	9a06      	ldr	r2, [sp, #24]
 8006426:	2a47      	cmp	r2, #71	; 0x47
 8006428:	d1be      	bne.n	80063a8 <_printf_float+0x100>
 800642a:	2b00      	cmp	r3, #0
 800642c:	d1bc      	bne.n	80063a8 <_printf_float+0x100>
 800642e:	2301      	movs	r3, #1
 8006430:	e7b9      	b.n	80063a6 <_printf_float+0xfe>
 8006432:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006436:	d118      	bne.n	800646a <_printf_float+0x1c2>
 8006438:	2900      	cmp	r1, #0
 800643a:	6863      	ldr	r3, [r4, #4]
 800643c:	dd0b      	ble.n	8006456 <_printf_float+0x1ae>
 800643e:	6121      	str	r1, [r4, #16]
 8006440:	b913      	cbnz	r3, 8006448 <_printf_float+0x1a0>
 8006442:	6822      	ldr	r2, [r4, #0]
 8006444:	07d0      	lsls	r0, r2, #31
 8006446:	d502      	bpl.n	800644e <_printf_float+0x1a6>
 8006448:	3301      	adds	r3, #1
 800644a:	440b      	add	r3, r1
 800644c:	6123      	str	r3, [r4, #16]
 800644e:	65a1      	str	r1, [r4, #88]	; 0x58
 8006450:	f04f 0900 	mov.w	r9, #0
 8006454:	e7de      	b.n	8006414 <_printf_float+0x16c>
 8006456:	b913      	cbnz	r3, 800645e <_printf_float+0x1b6>
 8006458:	6822      	ldr	r2, [r4, #0]
 800645a:	07d2      	lsls	r2, r2, #31
 800645c:	d501      	bpl.n	8006462 <_printf_float+0x1ba>
 800645e:	3302      	adds	r3, #2
 8006460:	e7f4      	b.n	800644c <_printf_float+0x1a4>
 8006462:	2301      	movs	r3, #1
 8006464:	e7f2      	b.n	800644c <_printf_float+0x1a4>
 8006466:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800646a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800646c:	4299      	cmp	r1, r3
 800646e:	db05      	blt.n	800647c <_printf_float+0x1d4>
 8006470:	6823      	ldr	r3, [r4, #0]
 8006472:	6121      	str	r1, [r4, #16]
 8006474:	07d8      	lsls	r0, r3, #31
 8006476:	d5ea      	bpl.n	800644e <_printf_float+0x1a6>
 8006478:	1c4b      	adds	r3, r1, #1
 800647a:	e7e7      	b.n	800644c <_printf_float+0x1a4>
 800647c:	2900      	cmp	r1, #0
 800647e:	bfd4      	ite	le
 8006480:	f1c1 0202 	rsble	r2, r1, #2
 8006484:	2201      	movgt	r2, #1
 8006486:	4413      	add	r3, r2
 8006488:	e7e0      	b.n	800644c <_printf_float+0x1a4>
 800648a:	6823      	ldr	r3, [r4, #0]
 800648c:	055a      	lsls	r2, r3, #21
 800648e:	d407      	bmi.n	80064a0 <_printf_float+0x1f8>
 8006490:	6923      	ldr	r3, [r4, #16]
 8006492:	4642      	mov	r2, r8
 8006494:	4631      	mov	r1, r6
 8006496:	4628      	mov	r0, r5
 8006498:	47b8      	blx	r7
 800649a:	3001      	adds	r0, #1
 800649c:	d12c      	bne.n	80064f8 <_printf_float+0x250>
 800649e:	e764      	b.n	800636a <_printf_float+0xc2>
 80064a0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80064a4:	f240 80e0 	bls.w	8006668 <_printf_float+0x3c0>
 80064a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80064ac:	2200      	movs	r2, #0
 80064ae:	2300      	movs	r3, #0
 80064b0:	f7fa fb12 	bl	8000ad8 <__aeabi_dcmpeq>
 80064b4:	2800      	cmp	r0, #0
 80064b6:	d034      	beq.n	8006522 <_printf_float+0x27a>
 80064b8:	4a37      	ldr	r2, [pc, #220]	; (8006598 <_printf_float+0x2f0>)
 80064ba:	2301      	movs	r3, #1
 80064bc:	4631      	mov	r1, r6
 80064be:	4628      	mov	r0, r5
 80064c0:	47b8      	blx	r7
 80064c2:	3001      	adds	r0, #1
 80064c4:	f43f af51 	beq.w	800636a <_printf_float+0xc2>
 80064c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80064cc:	429a      	cmp	r2, r3
 80064ce:	db02      	blt.n	80064d6 <_printf_float+0x22e>
 80064d0:	6823      	ldr	r3, [r4, #0]
 80064d2:	07d8      	lsls	r0, r3, #31
 80064d4:	d510      	bpl.n	80064f8 <_printf_float+0x250>
 80064d6:	ee18 3a10 	vmov	r3, s16
 80064da:	4652      	mov	r2, sl
 80064dc:	4631      	mov	r1, r6
 80064de:	4628      	mov	r0, r5
 80064e0:	47b8      	blx	r7
 80064e2:	3001      	adds	r0, #1
 80064e4:	f43f af41 	beq.w	800636a <_printf_float+0xc2>
 80064e8:	f04f 0800 	mov.w	r8, #0
 80064ec:	f104 091a 	add.w	r9, r4, #26
 80064f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064f2:	3b01      	subs	r3, #1
 80064f4:	4543      	cmp	r3, r8
 80064f6:	dc09      	bgt.n	800650c <_printf_float+0x264>
 80064f8:	6823      	ldr	r3, [r4, #0]
 80064fa:	079b      	lsls	r3, r3, #30
 80064fc:	f100 8105 	bmi.w	800670a <_printf_float+0x462>
 8006500:	68e0      	ldr	r0, [r4, #12]
 8006502:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006504:	4298      	cmp	r0, r3
 8006506:	bfb8      	it	lt
 8006508:	4618      	movlt	r0, r3
 800650a:	e730      	b.n	800636e <_printf_float+0xc6>
 800650c:	2301      	movs	r3, #1
 800650e:	464a      	mov	r2, r9
 8006510:	4631      	mov	r1, r6
 8006512:	4628      	mov	r0, r5
 8006514:	47b8      	blx	r7
 8006516:	3001      	adds	r0, #1
 8006518:	f43f af27 	beq.w	800636a <_printf_float+0xc2>
 800651c:	f108 0801 	add.w	r8, r8, #1
 8006520:	e7e6      	b.n	80064f0 <_printf_float+0x248>
 8006522:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006524:	2b00      	cmp	r3, #0
 8006526:	dc39      	bgt.n	800659c <_printf_float+0x2f4>
 8006528:	4a1b      	ldr	r2, [pc, #108]	; (8006598 <_printf_float+0x2f0>)
 800652a:	2301      	movs	r3, #1
 800652c:	4631      	mov	r1, r6
 800652e:	4628      	mov	r0, r5
 8006530:	47b8      	blx	r7
 8006532:	3001      	adds	r0, #1
 8006534:	f43f af19 	beq.w	800636a <_printf_float+0xc2>
 8006538:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800653c:	4313      	orrs	r3, r2
 800653e:	d102      	bne.n	8006546 <_printf_float+0x29e>
 8006540:	6823      	ldr	r3, [r4, #0]
 8006542:	07d9      	lsls	r1, r3, #31
 8006544:	d5d8      	bpl.n	80064f8 <_printf_float+0x250>
 8006546:	ee18 3a10 	vmov	r3, s16
 800654a:	4652      	mov	r2, sl
 800654c:	4631      	mov	r1, r6
 800654e:	4628      	mov	r0, r5
 8006550:	47b8      	blx	r7
 8006552:	3001      	adds	r0, #1
 8006554:	f43f af09 	beq.w	800636a <_printf_float+0xc2>
 8006558:	f04f 0900 	mov.w	r9, #0
 800655c:	f104 0a1a 	add.w	sl, r4, #26
 8006560:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006562:	425b      	negs	r3, r3
 8006564:	454b      	cmp	r3, r9
 8006566:	dc01      	bgt.n	800656c <_printf_float+0x2c4>
 8006568:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800656a:	e792      	b.n	8006492 <_printf_float+0x1ea>
 800656c:	2301      	movs	r3, #1
 800656e:	4652      	mov	r2, sl
 8006570:	4631      	mov	r1, r6
 8006572:	4628      	mov	r0, r5
 8006574:	47b8      	blx	r7
 8006576:	3001      	adds	r0, #1
 8006578:	f43f aef7 	beq.w	800636a <_printf_float+0xc2>
 800657c:	f109 0901 	add.w	r9, r9, #1
 8006580:	e7ee      	b.n	8006560 <_printf_float+0x2b8>
 8006582:	bf00      	nop
 8006584:	7fefffff 	.word	0x7fefffff
 8006588:	080091e8 	.word	0x080091e8
 800658c:	080091ec 	.word	0x080091ec
 8006590:	080091f4 	.word	0x080091f4
 8006594:	080091f0 	.word	0x080091f0
 8006598:	080091f8 	.word	0x080091f8
 800659c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800659e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80065a0:	429a      	cmp	r2, r3
 80065a2:	bfa8      	it	ge
 80065a4:	461a      	movge	r2, r3
 80065a6:	2a00      	cmp	r2, #0
 80065a8:	4691      	mov	r9, r2
 80065aa:	dc37      	bgt.n	800661c <_printf_float+0x374>
 80065ac:	f04f 0b00 	mov.w	fp, #0
 80065b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80065b4:	f104 021a 	add.w	r2, r4, #26
 80065b8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80065ba:	9305      	str	r3, [sp, #20]
 80065bc:	eba3 0309 	sub.w	r3, r3, r9
 80065c0:	455b      	cmp	r3, fp
 80065c2:	dc33      	bgt.n	800662c <_printf_float+0x384>
 80065c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80065c8:	429a      	cmp	r2, r3
 80065ca:	db3b      	blt.n	8006644 <_printf_float+0x39c>
 80065cc:	6823      	ldr	r3, [r4, #0]
 80065ce:	07da      	lsls	r2, r3, #31
 80065d0:	d438      	bmi.n	8006644 <_printf_float+0x39c>
 80065d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065d4:	9a05      	ldr	r2, [sp, #20]
 80065d6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80065d8:	1a9a      	subs	r2, r3, r2
 80065da:	eba3 0901 	sub.w	r9, r3, r1
 80065de:	4591      	cmp	r9, r2
 80065e0:	bfa8      	it	ge
 80065e2:	4691      	movge	r9, r2
 80065e4:	f1b9 0f00 	cmp.w	r9, #0
 80065e8:	dc35      	bgt.n	8006656 <_printf_float+0x3ae>
 80065ea:	f04f 0800 	mov.w	r8, #0
 80065ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80065f2:	f104 0a1a 	add.w	sl, r4, #26
 80065f6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80065fa:	1a9b      	subs	r3, r3, r2
 80065fc:	eba3 0309 	sub.w	r3, r3, r9
 8006600:	4543      	cmp	r3, r8
 8006602:	f77f af79 	ble.w	80064f8 <_printf_float+0x250>
 8006606:	2301      	movs	r3, #1
 8006608:	4652      	mov	r2, sl
 800660a:	4631      	mov	r1, r6
 800660c:	4628      	mov	r0, r5
 800660e:	47b8      	blx	r7
 8006610:	3001      	adds	r0, #1
 8006612:	f43f aeaa 	beq.w	800636a <_printf_float+0xc2>
 8006616:	f108 0801 	add.w	r8, r8, #1
 800661a:	e7ec      	b.n	80065f6 <_printf_float+0x34e>
 800661c:	4613      	mov	r3, r2
 800661e:	4631      	mov	r1, r6
 8006620:	4642      	mov	r2, r8
 8006622:	4628      	mov	r0, r5
 8006624:	47b8      	blx	r7
 8006626:	3001      	adds	r0, #1
 8006628:	d1c0      	bne.n	80065ac <_printf_float+0x304>
 800662a:	e69e      	b.n	800636a <_printf_float+0xc2>
 800662c:	2301      	movs	r3, #1
 800662e:	4631      	mov	r1, r6
 8006630:	4628      	mov	r0, r5
 8006632:	9205      	str	r2, [sp, #20]
 8006634:	47b8      	blx	r7
 8006636:	3001      	adds	r0, #1
 8006638:	f43f ae97 	beq.w	800636a <_printf_float+0xc2>
 800663c:	9a05      	ldr	r2, [sp, #20]
 800663e:	f10b 0b01 	add.w	fp, fp, #1
 8006642:	e7b9      	b.n	80065b8 <_printf_float+0x310>
 8006644:	ee18 3a10 	vmov	r3, s16
 8006648:	4652      	mov	r2, sl
 800664a:	4631      	mov	r1, r6
 800664c:	4628      	mov	r0, r5
 800664e:	47b8      	blx	r7
 8006650:	3001      	adds	r0, #1
 8006652:	d1be      	bne.n	80065d2 <_printf_float+0x32a>
 8006654:	e689      	b.n	800636a <_printf_float+0xc2>
 8006656:	9a05      	ldr	r2, [sp, #20]
 8006658:	464b      	mov	r3, r9
 800665a:	4442      	add	r2, r8
 800665c:	4631      	mov	r1, r6
 800665e:	4628      	mov	r0, r5
 8006660:	47b8      	blx	r7
 8006662:	3001      	adds	r0, #1
 8006664:	d1c1      	bne.n	80065ea <_printf_float+0x342>
 8006666:	e680      	b.n	800636a <_printf_float+0xc2>
 8006668:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800666a:	2a01      	cmp	r2, #1
 800666c:	dc01      	bgt.n	8006672 <_printf_float+0x3ca>
 800666e:	07db      	lsls	r3, r3, #31
 8006670:	d538      	bpl.n	80066e4 <_printf_float+0x43c>
 8006672:	2301      	movs	r3, #1
 8006674:	4642      	mov	r2, r8
 8006676:	4631      	mov	r1, r6
 8006678:	4628      	mov	r0, r5
 800667a:	47b8      	blx	r7
 800667c:	3001      	adds	r0, #1
 800667e:	f43f ae74 	beq.w	800636a <_printf_float+0xc2>
 8006682:	ee18 3a10 	vmov	r3, s16
 8006686:	4652      	mov	r2, sl
 8006688:	4631      	mov	r1, r6
 800668a:	4628      	mov	r0, r5
 800668c:	47b8      	blx	r7
 800668e:	3001      	adds	r0, #1
 8006690:	f43f ae6b 	beq.w	800636a <_printf_float+0xc2>
 8006694:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006698:	2200      	movs	r2, #0
 800669a:	2300      	movs	r3, #0
 800669c:	f7fa fa1c 	bl	8000ad8 <__aeabi_dcmpeq>
 80066a0:	b9d8      	cbnz	r0, 80066da <_printf_float+0x432>
 80066a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066a4:	f108 0201 	add.w	r2, r8, #1
 80066a8:	3b01      	subs	r3, #1
 80066aa:	4631      	mov	r1, r6
 80066ac:	4628      	mov	r0, r5
 80066ae:	47b8      	blx	r7
 80066b0:	3001      	adds	r0, #1
 80066b2:	d10e      	bne.n	80066d2 <_printf_float+0x42a>
 80066b4:	e659      	b.n	800636a <_printf_float+0xc2>
 80066b6:	2301      	movs	r3, #1
 80066b8:	4652      	mov	r2, sl
 80066ba:	4631      	mov	r1, r6
 80066bc:	4628      	mov	r0, r5
 80066be:	47b8      	blx	r7
 80066c0:	3001      	adds	r0, #1
 80066c2:	f43f ae52 	beq.w	800636a <_printf_float+0xc2>
 80066c6:	f108 0801 	add.w	r8, r8, #1
 80066ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066cc:	3b01      	subs	r3, #1
 80066ce:	4543      	cmp	r3, r8
 80066d0:	dcf1      	bgt.n	80066b6 <_printf_float+0x40e>
 80066d2:	464b      	mov	r3, r9
 80066d4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80066d8:	e6dc      	b.n	8006494 <_printf_float+0x1ec>
 80066da:	f04f 0800 	mov.w	r8, #0
 80066de:	f104 0a1a 	add.w	sl, r4, #26
 80066e2:	e7f2      	b.n	80066ca <_printf_float+0x422>
 80066e4:	2301      	movs	r3, #1
 80066e6:	4642      	mov	r2, r8
 80066e8:	e7df      	b.n	80066aa <_printf_float+0x402>
 80066ea:	2301      	movs	r3, #1
 80066ec:	464a      	mov	r2, r9
 80066ee:	4631      	mov	r1, r6
 80066f0:	4628      	mov	r0, r5
 80066f2:	47b8      	blx	r7
 80066f4:	3001      	adds	r0, #1
 80066f6:	f43f ae38 	beq.w	800636a <_printf_float+0xc2>
 80066fa:	f108 0801 	add.w	r8, r8, #1
 80066fe:	68e3      	ldr	r3, [r4, #12]
 8006700:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006702:	1a5b      	subs	r3, r3, r1
 8006704:	4543      	cmp	r3, r8
 8006706:	dcf0      	bgt.n	80066ea <_printf_float+0x442>
 8006708:	e6fa      	b.n	8006500 <_printf_float+0x258>
 800670a:	f04f 0800 	mov.w	r8, #0
 800670e:	f104 0919 	add.w	r9, r4, #25
 8006712:	e7f4      	b.n	80066fe <_printf_float+0x456>

08006714 <_printf_common>:
 8006714:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006718:	4616      	mov	r6, r2
 800671a:	4699      	mov	r9, r3
 800671c:	688a      	ldr	r2, [r1, #8]
 800671e:	690b      	ldr	r3, [r1, #16]
 8006720:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006724:	4293      	cmp	r3, r2
 8006726:	bfb8      	it	lt
 8006728:	4613      	movlt	r3, r2
 800672a:	6033      	str	r3, [r6, #0]
 800672c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006730:	4607      	mov	r7, r0
 8006732:	460c      	mov	r4, r1
 8006734:	b10a      	cbz	r2, 800673a <_printf_common+0x26>
 8006736:	3301      	adds	r3, #1
 8006738:	6033      	str	r3, [r6, #0]
 800673a:	6823      	ldr	r3, [r4, #0]
 800673c:	0699      	lsls	r1, r3, #26
 800673e:	bf42      	ittt	mi
 8006740:	6833      	ldrmi	r3, [r6, #0]
 8006742:	3302      	addmi	r3, #2
 8006744:	6033      	strmi	r3, [r6, #0]
 8006746:	6825      	ldr	r5, [r4, #0]
 8006748:	f015 0506 	ands.w	r5, r5, #6
 800674c:	d106      	bne.n	800675c <_printf_common+0x48>
 800674e:	f104 0a19 	add.w	sl, r4, #25
 8006752:	68e3      	ldr	r3, [r4, #12]
 8006754:	6832      	ldr	r2, [r6, #0]
 8006756:	1a9b      	subs	r3, r3, r2
 8006758:	42ab      	cmp	r3, r5
 800675a:	dc26      	bgt.n	80067aa <_printf_common+0x96>
 800675c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006760:	1e13      	subs	r3, r2, #0
 8006762:	6822      	ldr	r2, [r4, #0]
 8006764:	bf18      	it	ne
 8006766:	2301      	movne	r3, #1
 8006768:	0692      	lsls	r2, r2, #26
 800676a:	d42b      	bmi.n	80067c4 <_printf_common+0xb0>
 800676c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006770:	4649      	mov	r1, r9
 8006772:	4638      	mov	r0, r7
 8006774:	47c0      	blx	r8
 8006776:	3001      	adds	r0, #1
 8006778:	d01e      	beq.n	80067b8 <_printf_common+0xa4>
 800677a:	6823      	ldr	r3, [r4, #0]
 800677c:	68e5      	ldr	r5, [r4, #12]
 800677e:	6832      	ldr	r2, [r6, #0]
 8006780:	f003 0306 	and.w	r3, r3, #6
 8006784:	2b04      	cmp	r3, #4
 8006786:	bf08      	it	eq
 8006788:	1aad      	subeq	r5, r5, r2
 800678a:	68a3      	ldr	r3, [r4, #8]
 800678c:	6922      	ldr	r2, [r4, #16]
 800678e:	bf0c      	ite	eq
 8006790:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006794:	2500      	movne	r5, #0
 8006796:	4293      	cmp	r3, r2
 8006798:	bfc4      	itt	gt
 800679a:	1a9b      	subgt	r3, r3, r2
 800679c:	18ed      	addgt	r5, r5, r3
 800679e:	2600      	movs	r6, #0
 80067a0:	341a      	adds	r4, #26
 80067a2:	42b5      	cmp	r5, r6
 80067a4:	d11a      	bne.n	80067dc <_printf_common+0xc8>
 80067a6:	2000      	movs	r0, #0
 80067a8:	e008      	b.n	80067bc <_printf_common+0xa8>
 80067aa:	2301      	movs	r3, #1
 80067ac:	4652      	mov	r2, sl
 80067ae:	4649      	mov	r1, r9
 80067b0:	4638      	mov	r0, r7
 80067b2:	47c0      	blx	r8
 80067b4:	3001      	adds	r0, #1
 80067b6:	d103      	bne.n	80067c0 <_printf_common+0xac>
 80067b8:	f04f 30ff 	mov.w	r0, #4294967295
 80067bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067c0:	3501      	adds	r5, #1
 80067c2:	e7c6      	b.n	8006752 <_printf_common+0x3e>
 80067c4:	18e1      	adds	r1, r4, r3
 80067c6:	1c5a      	adds	r2, r3, #1
 80067c8:	2030      	movs	r0, #48	; 0x30
 80067ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80067ce:	4422      	add	r2, r4
 80067d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80067d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80067d8:	3302      	adds	r3, #2
 80067da:	e7c7      	b.n	800676c <_printf_common+0x58>
 80067dc:	2301      	movs	r3, #1
 80067de:	4622      	mov	r2, r4
 80067e0:	4649      	mov	r1, r9
 80067e2:	4638      	mov	r0, r7
 80067e4:	47c0      	blx	r8
 80067e6:	3001      	adds	r0, #1
 80067e8:	d0e6      	beq.n	80067b8 <_printf_common+0xa4>
 80067ea:	3601      	adds	r6, #1
 80067ec:	e7d9      	b.n	80067a2 <_printf_common+0x8e>
	...

080067f0 <_printf_i>:
 80067f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80067f4:	7e0f      	ldrb	r7, [r1, #24]
 80067f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80067f8:	2f78      	cmp	r7, #120	; 0x78
 80067fa:	4691      	mov	r9, r2
 80067fc:	4680      	mov	r8, r0
 80067fe:	460c      	mov	r4, r1
 8006800:	469a      	mov	sl, r3
 8006802:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006806:	d807      	bhi.n	8006818 <_printf_i+0x28>
 8006808:	2f62      	cmp	r7, #98	; 0x62
 800680a:	d80a      	bhi.n	8006822 <_printf_i+0x32>
 800680c:	2f00      	cmp	r7, #0
 800680e:	f000 80d8 	beq.w	80069c2 <_printf_i+0x1d2>
 8006812:	2f58      	cmp	r7, #88	; 0x58
 8006814:	f000 80a3 	beq.w	800695e <_printf_i+0x16e>
 8006818:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800681c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006820:	e03a      	b.n	8006898 <_printf_i+0xa8>
 8006822:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006826:	2b15      	cmp	r3, #21
 8006828:	d8f6      	bhi.n	8006818 <_printf_i+0x28>
 800682a:	a101      	add	r1, pc, #4	; (adr r1, 8006830 <_printf_i+0x40>)
 800682c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006830:	08006889 	.word	0x08006889
 8006834:	0800689d 	.word	0x0800689d
 8006838:	08006819 	.word	0x08006819
 800683c:	08006819 	.word	0x08006819
 8006840:	08006819 	.word	0x08006819
 8006844:	08006819 	.word	0x08006819
 8006848:	0800689d 	.word	0x0800689d
 800684c:	08006819 	.word	0x08006819
 8006850:	08006819 	.word	0x08006819
 8006854:	08006819 	.word	0x08006819
 8006858:	08006819 	.word	0x08006819
 800685c:	080069a9 	.word	0x080069a9
 8006860:	080068cd 	.word	0x080068cd
 8006864:	0800698b 	.word	0x0800698b
 8006868:	08006819 	.word	0x08006819
 800686c:	08006819 	.word	0x08006819
 8006870:	080069cb 	.word	0x080069cb
 8006874:	08006819 	.word	0x08006819
 8006878:	080068cd 	.word	0x080068cd
 800687c:	08006819 	.word	0x08006819
 8006880:	08006819 	.word	0x08006819
 8006884:	08006993 	.word	0x08006993
 8006888:	682b      	ldr	r3, [r5, #0]
 800688a:	1d1a      	adds	r2, r3, #4
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	602a      	str	r2, [r5, #0]
 8006890:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006894:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006898:	2301      	movs	r3, #1
 800689a:	e0a3      	b.n	80069e4 <_printf_i+0x1f4>
 800689c:	6820      	ldr	r0, [r4, #0]
 800689e:	6829      	ldr	r1, [r5, #0]
 80068a0:	0606      	lsls	r6, r0, #24
 80068a2:	f101 0304 	add.w	r3, r1, #4
 80068a6:	d50a      	bpl.n	80068be <_printf_i+0xce>
 80068a8:	680e      	ldr	r6, [r1, #0]
 80068aa:	602b      	str	r3, [r5, #0]
 80068ac:	2e00      	cmp	r6, #0
 80068ae:	da03      	bge.n	80068b8 <_printf_i+0xc8>
 80068b0:	232d      	movs	r3, #45	; 0x2d
 80068b2:	4276      	negs	r6, r6
 80068b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80068b8:	485e      	ldr	r0, [pc, #376]	; (8006a34 <_printf_i+0x244>)
 80068ba:	230a      	movs	r3, #10
 80068bc:	e019      	b.n	80068f2 <_printf_i+0x102>
 80068be:	680e      	ldr	r6, [r1, #0]
 80068c0:	602b      	str	r3, [r5, #0]
 80068c2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80068c6:	bf18      	it	ne
 80068c8:	b236      	sxthne	r6, r6
 80068ca:	e7ef      	b.n	80068ac <_printf_i+0xbc>
 80068cc:	682b      	ldr	r3, [r5, #0]
 80068ce:	6820      	ldr	r0, [r4, #0]
 80068d0:	1d19      	adds	r1, r3, #4
 80068d2:	6029      	str	r1, [r5, #0]
 80068d4:	0601      	lsls	r1, r0, #24
 80068d6:	d501      	bpl.n	80068dc <_printf_i+0xec>
 80068d8:	681e      	ldr	r6, [r3, #0]
 80068da:	e002      	b.n	80068e2 <_printf_i+0xf2>
 80068dc:	0646      	lsls	r6, r0, #25
 80068de:	d5fb      	bpl.n	80068d8 <_printf_i+0xe8>
 80068e0:	881e      	ldrh	r6, [r3, #0]
 80068e2:	4854      	ldr	r0, [pc, #336]	; (8006a34 <_printf_i+0x244>)
 80068e4:	2f6f      	cmp	r7, #111	; 0x6f
 80068e6:	bf0c      	ite	eq
 80068e8:	2308      	moveq	r3, #8
 80068ea:	230a      	movne	r3, #10
 80068ec:	2100      	movs	r1, #0
 80068ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80068f2:	6865      	ldr	r5, [r4, #4]
 80068f4:	60a5      	str	r5, [r4, #8]
 80068f6:	2d00      	cmp	r5, #0
 80068f8:	bfa2      	ittt	ge
 80068fa:	6821      	ldrge	r1, [r4, #0]
 80068fc:	f021 0104 	bicge.w	r1, r1, #4
 8006900:	6021      	strge	r1, [r4, #0]
 8006902:	b90e      	cbnz	r6, 8006908 <_printf_i+0x118>
 8006904:	2d00      	cmp	r5, #0
 8006906:	d04d      	beq.n	80069a4 <_printf_i+0x1b4>
 8006908:	4615      	mov	r5, r2
 800690a:	fbb6 f1f3 	udiv	r1, r6, r3
 800690e:	fb03 6711 	mls	r7, r3, r1, r6
 8006912:	5dc7      	ldrb	r7, [r0, r7]
 8006914:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006918:	4637      	mov	r7, r6
 800691a:	42bb      	cmp	r3, r7
 800691c:	460e      	mov	r6, r1
 800691e:	d9f4      	bls.n	800690a <_printf_i+0x11a>
 8006920:	2b08      	cmp	r3, #8
 8006922:	d10b      	bne.n	800693c <_printf_i+0x14c>
 8006924:	6823      	ldr	r3, [r4, #0]
 8006926:	07de      	lsls	r6, r3, #31
 8006928:	d508      	bpl.n	800693c <_printf_i+0x14c>
 800692a:	6923      	ldr	r3, [r4, #16]
 800692c:	6861      	ldr	r1, [r4, #4]
 800692e:	4299      	cmp	r1, r3
 8006930:	bfde      	ittt	le
 8006932:	2330      	movle	r3, #48	; 0x30
 8006934:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006938:	f105 35ff 	addle.w	r5, r5, #4294967295
 800693c:	1b52      	subs	r2, r2, r5
 800693e:	6122      	str	r2, [r4, #16]
 8006940:	f8cd a000 	str.w	sl, [sp]
 8006944:	464b      	mov	r3, r9
 8006946:	aa03      	add	r2, sp, #12
 8006948:	4621      	mov	r1, r4
 800694a:	4640      	mov	r0, r8
 800694c:	f7ff fee2 	bl	8006714 <_printf_common>
 8006950:	3001      	adds	r0, #1
 8006952:	d14c      	bne.n	80069ee <_printf_i+0x1fe>
 8006954:	f04f 30ff 	mov.w	r0, #4294967295
 8006958:	b004      	add	sp, #16
 800695a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800695e:	4835      	ldr	r0, [pc, #212]	; (8006a34 <_printf_i+0x244>)
 8006960:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006964:	6829      	ldr	r1, [r5, #0]
 8006966:	6823      	ldr	r3, [r4, #0]
 8006968:	f851 6b04 	ldr.w	r6, [r1], #4
 800696c:	6029      	str	r1, [r5, #0]
 800696e:	061d      	lsls	r5, r3, #24
 8006970:	d514      	bpl.n	800699c <_printf_i+0x1ac>
 8006972:	07df      	lsls	r7, r3, #31
 8006974:	bf44      	itt	mi
 8006976:	f043 0320 	orrmi.w	r3, r3, #32
 800697a:	6023      	strmi	r3, [r4, #0]
 800697c:	b91e      	cbnz	r6, 8006986 <_printf_i+0x196>
 800697e:	6823      	ldr	r3, [r4, #0]
 8006980:	f023 0320 	bic.w	r3, r3, #32
 8006984:	6023      	str	r3, [r4, #0]
 8006986:	2310      	movs	r3, #16
 8006988:	e7b0      	b.n	80068ec <_printf_i+0xfc>
 800698a:	6823      	ldr	r3, [r4, #0]
 800698c:	f043 0320 	orr.w	r3, r3, #32
 8006990:	6023      	str	r3, [r4, #0]
 8006992:	2378      	movs	r3, #120	; 0x78
 8006994:	4828      	ldr	r0, [pc, #160]	; (8006a38 <_printf_i+0x248>)
 8006996:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800699a:	e7e3      	b.n	8006964 <_printf_i+0x174>
 800699c:	0659      	lsls	r1, r3, #25
 800699e:	bf48      	it	mi
 80069a0:	b2b6      	uxthmi	r6, r6
 80069a2:	e7e6      	b.n	8006972 <_printf_i+0x182>
 80069a4:	4615      	mov	r5, r2
 80069a6:	e7bb      	b.n	8006920 <_printf_i+0x130>
 80069a8:	682b      	ldr	r3, [r5, #0]
 80069aa:	6826      	ldr	r6, [r4, #0]
 80069ac:	6961      	ldr	r1, [r4, #20]
 80069ae:	1d18      	adds	r0, r3, #4
 80069b0:	6028      	str	r0, [r5, #0]
 80069b2:	0635      	lsls	r5, r6, #24
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	d501      	bpl.n	80069bc <_printf_i+0x1cc>
 80069b8:	6019      	str	r1, [r3, #0]
 80069ba:	e002      	b.n	80069c2 <_printf_i+0x1d2>
 80069bc:	0670      	lsls	r0, r6, #25
 80069be:	d5fb      	bpl.n	80069b8 <_printf_i+0x1c8>
 80069c0:	8019      	strh	r1, [r3, #0]
 80069c2:	2300      	movs	r3, #0
 80069c4:	6123      	str	r3, [r4, #16]
 80069c6:	4615      	mov	r5, r2
 80069c8:	e7ba      	b.n	8006940 <_printf_i+0x150>
 80069ca:	682b      	ldr	r3, [r5, #0]
 80069cc:	1d1a      	adds	r2, r3, #4
 80069ce:	602a      	str	r2, [r5, #0]
 80069d0:	681d      	ldr	r5, [r3, #0]
 80069d2:	6862      	ldr	r2, [r4, #4]
 80069d4:	2100      	movs	r1, #0
 80069d6:	4628      	mov	r0, r5
 80069d8:	f7f9 fc0a 	bl	80001f0 <memchr>
 80069dc:	b108      	cbz	r0, 80069e2 <_printf_i+0x1f2>
 80069de:	1b40      	subs	r0, r0, r5
 80069e0:	6060      	str	r0, [r4, #4]
 80069e2:	6863      	ldr	r3, [r4, #4]
 80069e4:	6123      	str	r3, [r4, #16]
 80069e6:	2300      	movs	r3, #0
 80069e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069ec:	e7a8      	b.n	8006940 <_printf_i+0x150>
 80069ee:	6923      	ldr	r3, [r4, #16]
 80069f0:	462a      	mov	r2, r5
 80069f2:	4649      	mov	r1, r9
 80069f4:	4640      	mov	r0, r8
 80069f6:	47d0      	blx	sl
 80069f8:	3001      	adds	r0, #1
 80069fa:	d0ab      	beq.n	8006954 <_printf_i+0x164>
 80069fc:	6823      	ldr	r3, [r4, #0]
 80069fe:	079b      	lsls	r3, r3, #30
 8006a00:	d413      	bmi.n	8006a2a <_printf_i+0x23a>
 8006a02:	68e0      	ldr	r0, [r4, #12]
 8006a04:	9b03      	ldr	r3, [sp, #12]
 8006a06:	4298      	cmp	r0, r3
 8006a08:	bfb8      	it	lt
 8006a0a:	4618      	movlt	r0, r3
 8006a0c:	e7a4      	b.n	8006958 <_printf_i+0x168>
 8006a0e:	2301      	movs	r3, #1
 8006a10:	4632      	mov	r2, r6
 8006a12:	4649      	mov	r1, r9
 8006a14:	4640      	mov	r0, r8
 8006a16:	47d0      	blx	sl
 8006a18:	3001      	adds	r0, #1
 8006a1a:	d09b      	beq.n	8006954 <_printf_i+0x164>
 8006a1c:	3501      	adds	r5, #1
 8006a1e:	68e3      	ldr	r3, [r4, #12]
 8006a20:	9903      	ldr	r1, [sp, #12]
 8006a22:	1a5b      	subs	r3, r3, r1
 8006a24:	42ab      	cmp	r3, r5
 8006a26:	dcf2      	bgt.n	8006a0e <_printf_i+0x21e>
 8006a28:	e7eb      	b.n	8006a02 <_printf_i+0x212>
 8006a2a:	2500      	movs	r5, #0
 8006a2c:	f104 0619 	add.w	r6, r4, #25
 8006a30:	e7f5      	b.n	8006a1e <_printf_i+0x22e>
 8006a32:	bf00      	nop
 8006a34:	080091fa 	.word	0x080091fa
 8006a38:	0800920b 	.word	0x0800920b

08006a3c <quorem>:
 8006a3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a40:	6903      	ldr	r3, [r0, #16]
 8006a42:	690c      	ldr	r4, [r1, #16]
 8006a44:	42a3      	cmp	r3, r4
 8006a46:	4607      	mov	r7, r0
 8006a48:	f2c0 8081 	blt.w	8006b4e <quorem+0x112>
 8006a4c:	3c01      	subs	r4, #1
 8006a4e:	f101 0814 	add.w	r8, r1, #20
 8006a52:	f100 0514 	add.w	r5, r0, #20
 8006a56:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006a5a:	9301      	str	r3, [sp, #4]
 8006a5c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006a60:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006a64:	3301      	adds	r3, #1
 8006a66:	429a      	cmp	r2, r3
 8006a68:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006a6c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006a70:	fbb2 f6f3 	udiv	r6, r2, r3
 8006a74:	d331      	bcc.n	8006ada <quorem+0x9e>
 8006a76:	f04f 0e00 	mov.w	lr, #0
 8006a7a:	4640      	mov	r0, r8
 8006a7c:	46ac      	mov	ip, r5
 8006a7e:	46f2      	mov	sl, lr
 8006a80:	f850 2b04 	ldr.w	r2, [r0], #4
 8006a84:	b293      	uxth	r3, r2
 8006a86:	fb06 e303 	mla	r3, r6, r3, lr
 8006a8a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006a8e:	b29b      	uxth	r3, r3
 8006a90:	ebaa 0303 	sub.w	r3, sl, r3
 8006a94:	f8dc a000 	ldr.w	sl, [ip]
 8006a98:	0c12      	lsrs	r2, r2, #16
 8006a9a:	fa13 f38a 	uxtah	r3, r3, sl
 8006a9e:	fb06 e202 	mla	r2, r6, r2, lr
 8006aa2:	9300      	str	r3, [sp, #0]
 8006aa4:	9b00      	ldr	r3, [sp, #0]
 8006aa6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006aaa:	b292      	uxth	r2, r2
 8006aac:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006ab0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006ab4:	f8bd 3000 	ldrh.w	r3, [sp]
 8006ab8:	4581      	cmp	r9, r0
 8006aba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006abe:	f84c 3b04 	str.w	r3, [ip], #4
 8006ac2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006ac6:	d2db      	bcs.n	8006a80 <quorem+0x44>
 8006ac8:	f855 300b 	ldr.w	r3, [r5, fp]
 8006acc:	b92b      	cbnz	r3, 8006ada <quorem+0x9e>
 8006ace:	9b01      	ldr	r3, [sp, #4]
 8006ad0:	3b04      	subs	r3, #4
 8006ad2:	429d      	cmp	r5, r3
 8006ad4:	461a      	mov	r2, r3
 8006ad6:	d32e      	bcc.n	8006b36 <quorem+0xfa>
 8006ad8:	613c      	str	r4, [r7, #16]
 8006ada:	4638      	mov	r0, r7
 8006adc:	f001 f8c6 	bl	8007c6c <__mcmp>
 8006ae0:	2800      	cmp	r0, #0
 8006ae2:	db24      	blt.n	8006b2e <quorem+0xf2>
 8006ae4:	3601      	adds	r6, #1
 8006ae6:	4628      	mov	r0, r5
 8006ae8:	f04f 0c00 	mov.w	ip, #0
 8006aec:	f858 2b04 	ldr.w	r2, [r8], #4
 8006af0:	f8d0 e000 	ldr.w	lr, [r0]
 8006af4:	b293      	uxth	r3, r2
 8006af6:	ebac 0303 	sub.w	r3, ip, r3
 8006afa:	0c12      	lsrs	r2, r2, #16
 8006afc:	fa13 f38e 	uxtah	r3, r3, lr
 8006b00:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006b04:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006b08:	b29b      	uxth	r3, r3
 8006b0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006b0e:	45c1      	cmp	r9, r8
 8006b10:	f840 3b04 	str.w	r3, [r0], #4
 8006b14:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006b18:	d2e8      	bcs.n	8006aec <quorem+0xb0>
 8006b1a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006b1e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006b22:	b922      	cbnz	r2, 8006b2e <quorem+0xf2>
 8006b24:	3b04      	subs	r3, #4
 8006b26:	429d      	cmp	r5, r3
 8006b28:	461a      	mov	r2, r3
 8006b2a:	d30a      	bcc.n	8006b42 <quorem+0x106>
 8006b2c:	613c      	str	r4, [r7, #16]
 8006b2e:	4630      	mov	r0, r6
 8006b30:	b003      	add	sp, #12
 8006b32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b36:	6812      	ldr	r2, [r2, #0]
 8006b38:	3b04      	subs	r3, #4
 8006b3a:	2a00      	cmp	r2, #0
 8006b3c:	d1cc      	bne.n	8006ad8 <quorem+0x9c>
 8006b3e:	3c01      	subs	r4, #1
 8006b40:	e7c7      	b.n	8006ad2 <quorem+0x96>
 8006b42:	6812      	ldr	r2, [r2, #0]
 8006b44:	3b04      	subs	r3, #4
 8006b46:	2a00      	cmp	r2, #0
 8006b48:	d1f0      	bne.n	8006b2c <quorem+0xf0>
 8006b4a:	3c01      	subs	r4, #1
 8006b4c:	e7eb      	b.n	8006b26 <quorem+0xea>
 8006b4e:	2000      	movs	r0, #0
 8006b50:	e7ee      	b.n	8006b30 <quorem+0xf4>
 8006b52:	0000      	movs	r0, r0
 8006b54:	0000      	movs	r0, r0
	...

08006b58 <_dtoa_r>:
 8006b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b5c:	ed2d 8b04 	vpush	{d8-d9}
 8006b60:	ec57 6b10 	vmov	r6, r7, d0
 8006b64:	b093      	sub	sp, #76	; 0x4c
 8006b66:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006b68:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006b6c:	9106      	str	r1, [sp, #24]
 8006b6e:	ee10 aa10 	vmov	sl, s0
 8006b72:	4604      	mov	r4, r0
 8006b74:	9209      	str	r2, [sp, #36]	; 0x24
 8006b76:	930c      	str	r3, [sp, #48]	; 0x30
 8006b78:	46bb      	mov	fp, r7
 8006b7a:	b975      	cbnz	r5, 8006b9a <_dtoa_r+0x42>
 8006b7c:	2010      	movs	r0, #16
 8006b7e:	f000 fddd 	bl	800773c <malloc>
 8006b82:	4602      	mov	r2, r0
 8006b84:	6260      	str	r0, [r4, #36]	; 0x24
 8006b86:	b920      	cbnz	r0, 8006b92 <_dtoa_r+0x3a>
 8006b88:	4ba7      	ldr	r3, [pc, #668]	; (8006e28 <_dtoa_r+0x2d0>)
 8006b8a:	21ea      	movs	r1, #234	; 0xea
 8006b8c:	48a7      	ldr	r0, [pc, #668]	; (8006e2c <_dtoa_r+0x2d4>)
 8006b8e:	f001 fa75 	bl	800807c <__assert_func>
 8006b92:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006b96:	6005      	str	r5, [r0, #0]
 8006b98:	60c5      	str	r5, [r0, #12]
 8006b9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b9c:	6819      	ldr	r1, [r3, #0]
 8006b9e:	b151      	cbz	r1, 8006bb6 <_dtoa_r+0x5e>
 8006ba0:	685a      	ldr	r2, [r3, #4]
 8006ba2:	604a      	str	r2, [r1, #4]
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	4093      	lsls	r3, r2
 8006ba8:	608b      	str	r3, [r1, #8]
 8006baa:	4620      	mov	r0, r4
 8006bac:	f000 fe1c 	bl	80077e8 <_Bfree>
 8006bb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	601a      	str	r2, [r3, #0]
 8006bb6:	1e3b      	subs	r3, r7, #0
 8006bb8:	bfaa      	itet	ge
 8006bba:	2300      	movge	r3, #0
 8006bbc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006bc0:	f8c8 3000 	strge.w	r3, [r8]
 8006bc4:	4b9a      	ldr	r3, [pc, #616]	; (8006e30 <_dtoa_r+0x2d8>)
 8006bc6:	bfbc      	itt	lt
 8006bc8:	2201      	movlt	r2, #1
 8006bca:	f8c8 2000 	strlt.w	r2, [r8]
 8006bce:	ea33 030b 	bics.w	r3, r3, fp
 8006bd2:	d11b      	bne.n	8006c0c <_dtoa_r+0xb4>
 8006bd4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006bd6:	f242 730f 	movw	r3, #9999	; 0x270f
 8006bda:	6013      	str	r3, [r2, #0]
 8006bdc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006be0:	4333      	orrs	r3, r6
 8006be2:	f000 8592 	beq.w	800770a <_dtoa_r+0xbb2>
 8006be6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006be8:	b963      	cbnz	r3, 8006c04 <_dtoa_r+0xac>
 8006bea:	4b92      	ldr	r3, [pc, #584]	; (8006e34 <_dtoa_r+0x2dc>)
 8006bec:	e022      	b.n	8006c34 <_dtoa_r+0xdc>
 8006bee:	4b92      	ldr	r3, [pc, #584]	; (8006e38 <_dtoa_r+0x2e0>)
 8006bf0:	9301      	str	r3, [sp, #4]
 8006bf2:	3308      	adds	r3, #8
 8006bf4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006bf6:	6013      	str	r3, [r2, #0]
 8006bf8:	9801      	ldr	r0, [sp, #4]
 8006bfa:	b013      	add	sp, #76	; 0x4c
 8006bfc:	ecbd 8b04 	vpop	{d8-d9}
 8006c00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c04:	4b8b      	ldr	r3, [pc, #556]	; (8006e34 <_dtoa_r+0x2dc>)
 8006c06:	9301      	str	r3, [sp, #4]
 8006c08:	3303      	adds	r3, #3
 8006c0a:	e7f3      	b.n	8006bf4 <_dtoa_r+0x9c>
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	2300      	movs	r3, #0
 8006c10:	4650      	mov	r0, sl
 8006c12:	4659      	mov	r1, fp
 8006c14:	f7f9 ff60 	bl	8000ad8 <__aeabi_dcmpeq>
 8006c18:	ec4b ab19 	vmov	d9, sl, fp
 8006c1c:	4680      	mov	r8, r0
 8006c1e:	b158      	cbz	r0, 8006c38 <_dtoa_r+0xe0>
 8006c20:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006c22:	2301      	movs	r3, #1
 8006c24:	6013      	str	r3, [r2, #0]
 8006c26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	f000 856b 	beq.w	8007704 <_dtoa_r+0xbac>
 8006c2e:	4883      	ldr	r0, [pc, #524]	; (8006e3c <_dtoa_r+0x2e4>)
 8006c30:	6018      	str	r0, [r3, #0]
 8006c32:	1e43      	subs	r3, r0, #1
 8006c34:	9301      	str	r3, [sp, #4]
 8006c36:	e7df      	b.n	8006bf8 <_dtoa_r+0xa0>
 8006c38:	ec4b ab10 	vmov	d0, sl, fp
 8006c3c:	aa10      	add	r2, sp, #64	; 0x40
 8006c3e:	a911      	add	r1, sp, #68	; 0x44
 8006c40:	4620      	mov	r0, r4
 8006c42:	f001 f8b9 	bl	8007db8 <__d2b>
 8006c46:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006c4a:	ee08 0a10 	vmov	s16, r0
 8006c4e:	2d00      	cmp	r5, #0
 8006c50:	f000 8084 	beq.w	8006d5c <_dtoa_r+0x204>
 8006c54:	ee19 3a90 	vmov	r3, s19
 8006c58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c5c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006c60:	4656      	mov	r6, sl
 8006c62:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006c66:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006c6a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8006c6e:	4b74      	ldr	r3, [pc, #464]	; (8006e40 <_dtoa_r+0x2e8>)
 8006c70:	2200      	movs	r2, #0
 8006c72:	4630      	mov	r0, r6
 8006c74:	4639      	mov	r1, r7
 8006c76:	f7f9 fb0f 	bl	8000298 <__aeabi_dsub>
 8006c7a:	a365      	add	r3, pc, #404	; (adr r3, 8006e10 <_dtoa_r+0x2b8>)
 8006c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c80:	f7f9 fcc2 	bl	8000608 <__aeabi_dmul>
 8006c84:	a364      	add	r3, pc, #400	; (adr r3, 8006e18 <_dtoa_r+0x2c0>)
 8006c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c8a:	f7f9 fb07 	bl	800029c <__adddf3>
 8006c8e:	4606      	mov	r6, r0
 8006c90:	4628      	mov	r0, r5
 8006c92:	460f      	mov	r7, r1
 8006c94:	f7f9 fc4e 	bl	8000534 <__aeabi_i2d>
 8006c98:	a361      	add	r3, pc, #388	; (adr r3, 8006e20 <_dtoa_r+0x2c8>)
 8006c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c9e:	f7f9 fcb3 	bl	8000608 <__aeabi_dmul>
 8006ca2:	4602      	mov	r2, r0
 8006ca4:	460b      	mov	r3, r1
 8006ca6:	4630      	mov	r0, r6
 8006ca8:	4639      	mov	r1, r7
 8006caa:	f7f9 faf7 	bl	800029c <__adddf3>
 8006cae:	4606      	mov	r6, r0
 8006cb0:	460f      	mov	r7, r1
 8006cb2:	f7f9 ff59 	bl	8000b68 <__aeabi_d2iz>
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	9000      	str	r0, [sp, #0]
 8006cba:	2300      	movs	r3, #0
 8006cbc:	4630      	mov	r0, r6
 8006cbe:	4639      	mov	r1, r7
 8006cc0:	f7f9 ff14 	bl	8000aec <__aeabi_dcmplt>
 8006cc4:	b150      	cbz	r0, 8006cdc <_dtoa_r+0x184>
 8006cc6:	9800      	ldr	r0, [sp, #0]
 8006cc8:	f7f9 fc34 	bl	8000534 <__aeabi_i2d>
 8006ccc:	4632      	mov	r2, r6
 8006cce:	463b      	mov	r3, r7
 8006cd0:	f7f9 ff02 	bl	8000ad8 <__aeabi_dcmpeq>
 8006cd4:	b910      	cbnz	r0, 8006cdc <_dtoa_r+0x184>
 8006cd6:	9b00      	ldr	r3, [sp, #0]
 8006cd8:	3b01      	subs	r3, #1
 8006cda:	9300      	str	r3, [sp, #0]
 8006cdc:	9b00      	ldr	r3, [sp, #0]
 8006cde:	2b16      	cmp	r3, #22
 8006ce0:	d85a      	bhi.n	8006d98 <_dtoa_r+0x240>
 8006ce2:	9a00      	ldr	r2, [sp, #0]
 8006ce4:	4b57      	ldr	r3, [pc, #348]	; (8006e44 <_dtoa_r+0x2ec>)
 8006ce6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cee:	ec51 0b19 	vmov	r0, r1, d9
 8006cf2:	f7f9 fefb 	bl	8000aec <__aeabi_dcmplt>
 8006cf6:	2800      	cmp	r0, #0
 8006cf8:	d050      	beq.n	8006d9c <_dtoa_r+0x244>
 8006cfa:	9b00      	ldr	r3, [sp, #0]
 8006cfc:	3b01      	subs	r3, #1
 8006cfe:	9300      	str	r3, [sp, #0]
 8006d00:	2300      	movs	r3, #0
 8006d02:	930b      	str	r3, [sp, #44]	; 0x2c
 8006d04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006d06:	1b5d      	subs	r5, r3, r5
 8006d08:	1e6b      	subs	r3, r5, #1
 8006d0a:	9305      	str	r3, [sp, #20]
 8006d0c:	bf45      	ittet	mi
 8006d0e:	f1c5 0301 	rsbmi	r3, r5, #1
 8006d12:	9304      	strmi	r3, [sp, #16]
 8006d14:	2300      	movpl	r3, #0
 8006d16:	2300      	movmi	r3, #0
 8006d18:	bf4c      	ite	mi
 8006d1a:	9305      	strmi	r3, [sp, #20]
 8006d1c:	9304      	strpl	r3, [sp, #16]
 8006d1e:	9b00      	ldr	r3, [sp, #0]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	db3d      	blt.n	8006da0 <_dtoa_r+0x248>
 8006d24:	9b05      	ldr	r3, [sp, #20]
 8006d26:	9a00      	ldr	r2, [sp, #0]
 8006d28:	920a      	str	r2, [sp, #40]	; 0x28
 8006d2a:	4413      	add	r3, r2
 8006d2c:	9305      	str	r3, [sp, #20]
 8006d2e:	2300      	movs	r3, #0
 8006d30:	9307      	str	r3, [sp, #28]
 8006d32:	9b06      	ldr	r3, [sp, #24]
 8006d34:	2b09      	cmp	r3, #9
 8006d36:	f200 8089 	bhi.w	8006e4c <_dtoa_r+0x2f4>
 8006d3a:	2b05      	cmp	r3, #5
 8006d3c:	bfc4      	itt	gt
 8006d3e:	3b04      	subgt	r3, #4
 8006d40:	9306      	strgt	r3, [sp, #24]
 8006d42:	9b06      	ldr	r3, [sp, #24]
 8006d44:	f1a3 0302 	sub.w	r3, r3, #2
 8006d48:	bfcc      	ite	gt
 8006d4a:	2500      	movgt	r5, #0
 8006d4c:	2501      	movle	r5, #1
 8006d4e:	2b03      	cmp	r3, #3
 8006d50:	f200 8087 	bhi.w	8006e62 <_dtoa_r+0x30a>
 8006d54:	e8df f003 	tbb	[pc, r3]
 8006d58:	59383a2d 	.word	0x59383a2d
 8006d5c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006d60:	441d      	add	r5, r3
 8006d62:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006d66:	2b20      	cmp	r3, #32
 8006d68:	bfc1      	itttt	gt
 8006d6a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006d6e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006d72:	fa0b f303 	lslgt.w	r3, fp, r3
 8006d76:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006d7a:	bfda      	itte	le
 8006d7c:	f1c3 0320 	rsble	r3, r3, #32
 8006d80:	fa06 f003 	lslle.w	r0, r6, r3
 8006d84:	4318      	orrgt	r0, r3
 8006d86:	f7f9 fbc5 	bl	8000514 <__aeabi_ui2d>
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	4606      	mov	r6, r0
 8006d8e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006d92:	3d01      	subs	r5, #1
 8006d94:	930e      	str	r3, [sp, #56]	; 0x38
 8006d96:	e76a      	b.n	8006c6e <_dtoa_r+0x116>
 8006d98:	2301      	movs	r3, #1
 8006d9a:	e7b2      	b.n	8006d02 <_dtoa_r+0x1aa>
 8006d9c:	900b      	str	r0, [sp, #44]	; 0x2c
 8006d9e:	e7b1      	b.n	8006d04 <_dtoa_r+0x1ac>
 8006da0:	9b04      	ldr	r3, [sp, #16]
 8006da2:	9a00      	ldr	r2, [sp, #0]
 8006da4:	1a9b      	subs	r3, r3, r2
 8006da6:	9304      	str	r3, [sp, #16]
 8006da8:	4253      	negs	r3, r2
 8006daa:	9307      	str	r3, [sp, #28]
 8006dac:	2300      	movs	r3, #0
 8006dae:	930a      	str	r3, [sp, #40]	; 0x28
 8006db0:	e7bf      	b.n	8006d32 <_dtoa_r+0x1da>
 8006db2:	2300      	movs	r3, #0
 8006db4:	9308      	str	r3, [sp, #32]
 8006db6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	dc55      	bgt.n	8006e68 <_dtoa_r+0x310>
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006dc2:	461a      	mov	r2, r3
 8006dc4:	9209      	str	r2, [sp, #36]	; 0x24
 8006dc6:	e00c      	b.n	8006de2 <_dtoa_r+0x28a>
 8006dc8:	2301      	movs	r3, #1
 8006dca:	e7f3      	b.n	8006db4 <_dtoa_r+0x25c>
 8006dcc:	2300      	movs	r3, #0
 8006dce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006dd0:	9308      	str	r3, [sp, #32]
 8006dd2:	9b00      	ldr	r3, [sp, #0]
 8006dd4:	4413      	add	r3, r2
 8006dd6:	9302      	str	r3, [sp, #8]
 8006dd8:	3301      	adds	r3, #1
 8006dda:	2b01      	cmp	r3, #1
 8006ddc:	9303      	str	r3, [sp, #12]
 8006dde:	bfb8      	it	lt
 8006de0:	2301      	movlt	r3, #1
 8006de2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006de4:	2200      	movs	r2, #0
 8006de6:	6042      	str	r2, [r0, #4]
 8006de8:	2204      	movs	r2, #4
 8006dea:	f102 0614 	add.w	r6, r2, #20
 8006dee:	429e      	cmp	r6, r3
 8006df0:	6841      	ldr	r1, [r0, #4]
 8006df2:	d93d      	bls.n	8006e70 <_dtoa_r+0x318>
 8006df4:	4620      	mov	r0, r4
 8006df6:	f000 fcb7 	bl	8007768 <_Balloc>
 8006dfa:	9001      	str	r0, [sp, #4]
 8006dfc:	2800      	cmp	r0, #0
 8006dfe:	d13b      	bne.n	8006e78 <_dtoa_r+0x320>
 8006e00:	4b11      	ldr	r3, [pc, #68]	; (8006e48 <_dtoa_r+0x2f0>)
 8006e02:	4602      	mov	r2, r0
 8006e04:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006e08:	e6c0      	b.n	8006b8c <_dtoa_r+0x34>
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	e7df      	b.n	8006dce <_dtoa_r+0x276>
 8006e0e:	bf00      	nop
 8006e10:	636f4361 	.word	0x636f4361
 8006e14:	3fd287a7 	.word	0x3fd287a7
 8006e18:	8b60c8b3 	.word	0x8b60c8b3
 8006e1c:	3fc68a28 	.word	0x3fc68a28
 8006e20:	509f79fb 	.word	0x509f79fb
 8006e24:	3fd34413 	.word	0x3fd34413
 8006e28:	08009229 	.word	0x08009229
 8006e2c:	08009240 	.word	0x08009240
 8006e30:	7ff00000 	.word	0x7ff00000
 8006e34:	08009225 	.word	0x08009225
 8006e38:	0800921c 	.word	0x0800921c
 8006e3c:	080091f9 	.word	0x080091f9
 8006e40:	3ff80000 	.word	0x3ff80000
 8006e44:	08009330 	.word	0x08009330
 8006e48:	0800929b 	.word	0x0800929b
 8006e4c:	2501      	movs	r5, #1
 8006e4e:	2300      	movs	r3, #0
 8006e50:	9306      	str	r3, [sp, #24]
 8006e52:	9508      	str	r5, [sp, #32]
 8006e54:	f04f 33ff 	mov.w	r3, #4294967295
 8006e58:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	2312      	movs	r3, #18
 8006e60:	e7b0      	b.n	8006dc4 <_dtoa_r+0x26c>
 8006e62:	2301      	movs	r3, #1
 8006e64:	9308      	str	r3, [sp, #32]
 8006e66:	e7f5      	b.n	8006e54 <_dtoa_r+0x2fc>
 8006e68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e6a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006e6e:	e7b8      	b.n	8006de2 <_dtoa_r+0x28a>
 8006e70:	3101      	adds	r1, #1
 8006e72:	6041      	str	r1, [r0, #4]
 8006e74:	0052      	lsls	r2, r2, #1
 8006e76:	e7b8      	b.n	8006dea <_dtoa_r+0x292>
 8006e78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e7a:	9a01      	ldr	r2, [sp, #4]
 8006e7c:	601a      	str	r2, [r3, #0]
 8006e7e:	9b03      	ldr	r3, [sp, #12]
 8006e80:	2b0e      	cmp	r3, #14
 8006e82:	f200 809d 	bhi.w	8006fc0 <_dtoa_r+0x468>
 8006e86:	2d00      	cmp	r5, #0
 8006e88:	f000 809a 	beq.w	8006fc0 <_dtoa_r+0x468>
 8006e8c:	9b00      	ldr	r3, [sp, #0]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	dd32      	ble.n	8006ef8 <_dtoa_r+0x3a0>
 8006e92:	4ab7      	ldr	r2, [pc, #732]	; (8007170 <_dtoa_r+0x618>)
 8006e94:	f003 030f 	and.w	r3, r3, #15
 8006e98:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006e9c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006ea0:	9b00      	ldr	r3, [sp, #0]
 8006ea2:	05d8      	lsls	r0, r3, #23
 8006ea4:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006ea8:	d516      	bpl.n	8006ed8 <_dtoa_r+0x380>
 8006eaa:	4bb2      	ldr	r3, [pc, #712]	; (8007174 <_dtoa_r+0x61c>)
 8006eac:	ec51 0b19 	vmov	r0, r1, d9
 8006eb0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006eb4:	f7f9 fcd2 	bl	800085c <__aeabi_ddiv>
 8006eb8:	f007 070f 	and.w	r7, r7, #15
 8006ebc:	4682      	mov	sl, r0
 8006ebe:	468b      	mov	fp, r1
 8006ec0:	2503      	movs	r5, #3
 8006ec2:	4eac      	ldr	r6, [pc, #688]	; (8007174 <_dtoa_r+0x61c>)
 8006ec4:	b957      	cbnz	r7, 8006edc <_dtoa_r+0x384>
 8006ec6:	4642      	mov	r2, r8
 8006ec8:	464b      	mov	r3, r9
 8006eca:	4650      	mov	r0, sl
 8006ecc:	4659      	mov	r1, fp
 8006ece:	f7f9 fcc5 	bl	800085c <__aeabi_ddiv>
 8006ed2:	4682      	mov	sl, r0
 8006ed4:	468b      	mov	fp, r1
 8006ed6:	e028      	b.n	8006f2a <_dtoa_r+0x3d2>
 8006ed8:	2502      	movs	r5, #2
 8006eda:	e7f2      	b.n	8006ec2 <_dtoa_r+0x36a>
 8006edc:	07f9      	lsls	r1, r7, #31
 8006ede:	d508      	bpl.n	8006ef2 <_dtoa_r+0x39a>
 8006ee0:	4640      	mov	r0, r8
 8006ee2:	4649      	mov	r1, r9
 8006ee4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006ee8:	f7f9 fb8e 	bl	8000608 <__aeabi_dmul>
 8006eec:	3501      	adds	r5, #1
 8006eee:	4680      	mov	r8, r0
 8006ef0:	4689      	mov	r9, r1
 8006ef2:	107f      	asrs	r7, r7, #1
 8006ef4:	3608      	adds	r6, #8
 8006ef6:	e7e5      	b.n	8006ec4 <_dtoa_r+0x36c>
 8006ef8:	f000 809b 	beq.w	8007032 <_dtoa_r+0x4da>
 8006efc:	9b00      	ldr	r3, [sp, #0]
 8006efe:	4f9d      	ldr	r7, [pc, #628]	; (8007174 <_dtoa_r+0x61c>)
 8006f00:	425e      	negs	r6, r3
 8006f02:	4b9b      	ldr	r3, [pc, #620]	; (8007170 <_dtoa_r+0x618>)
 8006f04:	f006 020f 	and.w	r2, r6, #15
 8006f08:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f10:	ec51 0b19 	vmov	r0, r1, d9
 8006f14:	f7f9 fb78 	bl	8000608 <__aeabi_dmul>
 8006f18:	1136      	asrs	r6, r6, #4
 8006f1a:	4682      	mov	sl, r0
 8006f1c:	468b      	mov	fp, r1
 8006f1e:	2300      	movs	r3, #0
 8006f20:	2502      	movs	r5, #2
 8006f22:	2e00      	cmp	r6, #0
 8006f24:	d17a      	bne.n	800701c <_dtoa_r+0x4c4>
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d1d3      	bne.n	8006ed2 <_dtoa_r+0x37a>
 8006f2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	f000 8082 	beq.w	8007036 <_dtoa_r+0x4de>
 8006f32:	4b91      	ldr	r3, [pc, #580]	; (8007178 <_dtoa_r+0x620>)
 8006f34:	2200      	movs	r2, #0
 8006f36:	4650      	mov	r0, sl
 8006f38:	4659      	mov	r1, fp
 8006f3a:	f7f9 fdd7 	bl	8000aec <__aeabi_dcmplt>
 8006f3e:	2800      	cmp	r0, #0
 8006f40:	d079      	beq.n	8007036 <_dtoa_r+0x4de>
 8006f42:	9b03      	ldr	r3, [sp, #12]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d076      	beq.n	8007036 <_dtoa_r+0x4de>
 8006f48:	9b02      	ldr	r3, [sp, #8]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	dd36      	ble.n	8006fbc <_dtoa_r+0x464>
 8006f4e:	9b00      	ldr	r3, [sp, #0]
 8006f50:	4650      	mov	r0, sl
 8006f52:	4659      	mov	r1, fp
 8006f54:	1e5f      	subs	r7, r3, #1
 8006f56:	2200      	movs	r2, #0
 8006f58:	4b88      	ldr	r3, [pc, #544]	; (800717c <_dtoa_r+0x624>)
 8006f5a:	f7f9 fb55 	bl	8000608 <__aeabi_dmul>
 8006f5e:	9e02      	ldr	r6, [sp, #8]
 8006f60:	4682      	mov	sl, r0
 8006f62:	468b      	mov	fp, r1
 8006f64:	3501      	adds	r5, #1
 8006f66:	4628      	mov	r0, r5
 8006f68:	f7f9 fae4 	bl	8000534 <__aeabi_i2d>
 8006f6c:	4652      	mov	r2, sl
 8006f6e:	465b      	mov	r3, fp
 8006f70:	f7f9 fb4a 	bl	8000608 <__aeabi_dmul>
 8006f74:	4b82      	ldr	r3, [pc, #520]	; (8007180 <_dtoa_r+0x628>)
 8006f76:	2200      	movs	r2, #0
 8006f78:	f7f9 f990 	bl	800029c <__adddf3>
 8006f7c:	46d0      	mov	r8, sl
 8006f7e:	46d9      	mov	r9, fp
 8006f80:	4682      	mov	sl, r0
 8006f82:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006f86:	2e00      	cmp	r6, #0
 8006f88:	d158      	bne.n	800703c <_dtoa_r+0x4e4>
 8006f8a:	4b7e      	ldr	r3, [pc, #504]	; (8007184 <_dtoa_r+0x62c>)
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	4640      	mov	r0, r8
 8006f90:	4649      	mov	r1, r9
 8006f92:	f7f9 f981 	bl	8000298 <__aeabi_dsub>
 8006f96:	4652      	mov	r2, sl
 8006f98:	465b      	mov	r3, fp
 8006f9a:	4680      	mov	r8, r0
 8006f9c:	4689      	mov	r9, r1
 8006f9e:	f7f9 fdc3 	bl	8000b28 <__aeabi_dcmpgt>
 8006fa2:	2800      	cmp	r0, #0
 8006fa4:	f040 8295 	bne.w	80074d2 <_dtoa_r+0x97a>
 8006fa8:	4652      	mov	r2, sl
 8006faa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006fae:	4640      	mov	r0, r8
 8006fb0:	4649      	mov	r1, r9
 8006fb2:	f7f9 fd9b 	bl	8000aec <__aeabi_dcmplt>
 8006fb6:	2800      	cmp	r0, #0
 8006fb8:	f040 8289 	bne.w	80074ce <_dtoa_r+0x976>
 8006fbc:	ec5b ab19 	vmov	sl, fp, d9
 8006fc0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	f2c0 8148 	blt.w	8007258 <_dtoa_r+0x700>
 8006fc8:	9a00      	ldr	r2, [sp, #0]
 8006fca:	2a0e      	cmp	r2, #14
 8006fcc:	f300 8144 	bgt.w	8007258 <_dtoa_r+0x700>
 8006fd0:	4b67      	ldr	r3, [pc, #412]	; (8007170 <_dtoa_r+0x618>)
 8006fd2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006fd6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006fda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	f280 80d5 	bge.w	800718c <_dtoa_r+0x634>
 8006fe2:	9b03      	ldr	r3, [sp, #12]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	f300 80d1 	bgt.w	800718c <_dtoa_r+0x634>
 8006fea:	f040 826f 	bne.w	80074cc <_dtoa_r+0x974>
 8006fee:	4b65      	ldr	r3, [pc, #404]	; (8007184 <_dtoa_r+0x62c>)
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	4640      	mov	r0, r8
 8006ff4:	4649      	mov	r1, r9
 8006ff6:	f7f9 fb07 	bl	8000608 <__aeabi_dmul>
 8006ffa:	4652      	mov	r2, sl
 8006ffc:	465b      	mov	r3, fp
 8006ffe:	f7f9 fd89 	bl	8000b14 <__aeabi_dcmpge>
 8007002:	9e03      	ldr	r6, [sp, #12]
 8007004:	4637      	mov	r7, r6
 8007006:	2800      	cmp	r0, #0
 8007008:	f040 8245 	bne.w	8007496 <_dtoa_r+0x93e>
 800700c:	9d01      	ldr	r5, [sp, #4]
 800700e:	2331      	movs	r3, #49	; 0x31
 8007010:	f805 3b01 	strb.w	r3, [r5], #1
 8007014:	9b00      	ldr	r3, [sp, #0]
 8007016:	3301      	adds	r3, #1
 8007018:	9300      	str	r3, [sp, #0]
 800701a:	e240      	b.n	800749e <_dtoa_r+0x946>
 800701c:	07f2      	lsls	r2, r6, #31
 800701e:	d505      	bpl.n	800702c <_dtoa_r+0x4d4>
 8007020:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007024:	f7f9 faf0 	bl	8000608 <__aeabi_dmul>
 8007028:	3501      	adds	r5, #1
 800702a:	2301      	movs	r3, #1
 800702c:	1076      	asrs	r6, r6, #1
 800702e:	3708      	adds	r7, #8
 8007030:	e777      	b.n	8006f22 <_dtoa_r+0x3ca>
 8007032:	2502      	movs	r5, #2
 8007034:	e779      	b.n	8006f2a <_dtoa_r+0x3d2>
 8007036:	9f00      	ldr	r7, [sp, #0]
 8007038:	9e03      	ldr	r6, [sp, #12]
 800703a:	e794      	b.n	8006f66 <_dtoa_r+0x40e>
 800703c:	9901      	ldr	r1, [sp, #4]
 800703e:	4b4c      	ldr	r3, [pc, #304]	; (8007170 <_dtoa_r+0x618>)
 8007040:	4431      	add	r1, r6
 8007042:	910d      	str	r1, [sp, #52]	; 0x34
 8007044:	9908      	ldr	r1, [sp, #32]
 8007046:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800704a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800704e:	2900      	cmp	r1, #0
 8007050:	d043      	beq.n	80070da <_dtoa_r+0x582>
 8007052:	494d      	ldr	r1, [pc, #308]	; (8007188 <_dtoa_r+0x630>)
 8007054:	2000      	movs	r0, #0
 8007056:	f7f9 fc01 	bl	800085c <__aeabi_ddiv>
 800705a:	4652      	mov	r2, sl
 800705c:	465b      	mov	r3, fp
 800705e:	f7f9 f91b 	bl	8000298 <__aeabi_dsub>
 8007062:	9d01      	ldr	r5, [sp, #4]
 8007064:	4682      	mov	sl, r0
 8007066:	468b      	mov	fp, r1
 8007068:	4649      	mov	r1, r9
 800706a:	4640      	mov	r0, r8
 800706c:	f7f9 fd7c 	bl	8000b68 <__aeabi_d2iz>
 8007070:	4606      	mov	r6, r0
 8007072:	f7f9 fa5f 	bl	8000534 <__aeabi_i2d>
 8007076:	4602      	mov	r2, r0
 8007078:	460b      	mov	r3, r1
 800707a:	4640      	mov	r0, r8
 800707c:	4649      	mov	r1, r9
 800707e:	f7f9 f90b 	bl	8000298 <__aeabi_dsub>
 8007082:	3630      	adds	r6, #48	; 0x30
 8007084:	f805 6b01 	strb.w	r6, [r5], #1
 8007088:	4652      	mov	r2, sl
 800708a:	465b      	mov	r3, fp
 800708c:	4680      	mov	r8, r0
 800708e:	4689      	mov	r9, r1
 8007090:	f7f9 fd2c 	bl	8000aec <__aeabi_dcmplt>
 8007094:	2800      	cmp	r0, #0
 8007096:	d163      	bne.n	8007160 <_dtoa_r+0x608>
 8007098:	4642      	mov	r2, r8
 800709a:	464b      	mov	r3, r9
 800709c:	4936      	ldr	r1, [pc, #216]	; (8007178 <_dtoa_r+0x620>)
 800709e:	2000      	movs	r0, #0
 80070a0:	f7f9 f8fa 	bl	8000298 <__aeabi_dsub>
 80070a4:	4652      	mov	r2, sl
 80070a6:	465b      	mov	r3, fp
 80070a8:	f7f9 fd20 	bl	8000aec <__aeabi_dcmplt>
 80070ac:	2800      	cmp	r0, #0
 80070ae:	f040 80b5 	bne.w	800721c <_dtoa_r+0x6c4>
 80070b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80070b4:	429d      	cmp	r5, r3
 80070b6:	d081      	beq.n	8006fbc <_dtoa_r+0x464>
 80070b8:	4b30      	ldr	r3, [pc, #192]	; (800717c <_dtoa_r+0x624>)
 80070ba:	2200      	movs	r2, #0
 80070bc:	4650      	mov	r0, sl
 80070be:	4659      	mov	r1, fp
 80070c0:	f7f9 faa2 	bl	8000608 <__aeabi_dmul>
 80070c4:	4b2d      	ldr	r3, [pc, #180]	; (800717c <_dtoa_r+0x624>)
 80070c6:	4682      	mov	sl, r0
 80070c8:	468b      	mov	fp, r1
 80070ca:	4640      	mov	r0, r8
 80070cc:	4649      	mov	r1, r9
 80070ce:	2200      	movs	r2, #0
 80070d0:	f7f9 fa9a 	bl	8000608 <__aeabi_dmul>
 80070d4:	4680      	mov	r8, r0
 80070d6:	4689      	mov	r9, r1
 80070d8:	e7c6      	b.n	8007068 <_dtoa_r+0x510>
 80070da:	4650      	mov	r0, sl
 80070dc:	4659      	mov	r1, fp
 80070de:	f7f9 fa93 	bl	8000608 <__aeabi_dmul>
 80070e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80070e4:	9d01      	ldr	r5, [sp, #4]
 80070e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80070e8:	4682      	mov	sl, r0
 80070ea:	468b      	mov	fp, r1
 80070ec:	4649      	mov	r1, r9
 80070ee:	4640      	mov	r0, r8
 80070f0:	f7f9 fd3a 	bl	8000b68 <__aeabi_d2iz>
 80070f4:	4606      	mov	r6, r0
 80070f6:	f7f9 fa1d 	bl	8000534 <__aeabi_i2d>
 80070fa:	3630      	adds	r6, #48	; 0x30
 80070fc:	4602      	mov	r2, r0
 80070fe:	460b      	mov	r3, r1
 8007100:	4640      	mov	r0, r8
 8007102:	4649      	mov	r1, r9
 8007104:	f7f9 f8c8 	bl	8000298 <__aeabi_dsub>
 8007108:	f805 6b01 	strb.w	r6, [r5], #1
 800710c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800710e:	429d      	cmp	r5, r3
 8007110:	4680      	mov	r8, r0
 8007112:	4689      	mov	r9, r1
 8007114:	f04f 0200 	mov.w	r2, #0
 8007118:	d124      	bne.n	8007164 <_dtoa_r+0x60c>
 800711a:	4b1b      	ldr	r3, [pc, #108]	; (8007188 <_dtoa_r+0x630>)
 800711c:	4650      	mov	r0, sl
 800711e:	4659      	mov	r1, fp
 8007120:	f7f9 f8bc 	bl	800029c <__adddf3>
 8007124:	4602      	mov	r2, r0
 8007126:	460b      	mov	r3, r1
 8007128:	4640      	mov	r0, r8
 800712a:	4649      	mov	r1, r9
 800712c:	f7f9 fcfc 	bl	8000b28 <__aeabi_dcmpgt>
 8007130:	2800      	cmp	r0, #0
 8007132:	d173      	bne.n	800721c <_dtoa_r+0x6c4>
 8007134:	4652      	mov	r2, sl
 8007136:	465b      	mov	r3, fp
 8007138:	4913      	ldr	r1, [pc, #76]	; (8007188 <_dtoa_r+0x630>)
 800713a:	2000      	movs	r0, #0
 800713c:	f7f9 f8ac 	bl	8000298 <__aeabi_dsub>
 8007140:	4602      	mov	r2, r0
 8007142:	460b      	mov	r3, r1
 8007144:	4640      	mov	r0, r8
 8007146:	4649      	mov	r1, r9
 8007148:	f7f9 fcd0 	bl	8000aec <__aeabi_dcmplt>
 800714c:	2800      	cmp	r0, #0
 800714e:	f43f af35 	beq.w	8006fbc <_dtoa_r+0x464>
 8007152:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007154:	1e6b      	subs	r3, r5, #1
 8007156:	930f      	str	r3, [sp, #60]	; 0x3c
 8007158:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800715c:	2b30      	cmp	r3, #48	; 0x30
 800715e:	d0f8      	beq.n	8007152 <_dtoa_r+0x5fa>
 8007160:	9700      	str	r7, [sp, #0]
 8007162:	e049      	b.n	80071f8 <_dtoa_r+0x6a0>
 8007164:	4b05      	ldr	r3, [pc, #20]	; (800717c <_dtoa_r+0x624>)
 8007166:	f7f9 fa4f 	bl	8000608 <__aeabi_dmul>
 800716a:	4680      	mov	r8, r0
 800716c:	4689      	mov	r9, r1
 800716e:	e7bd      	b.n	80070ec <_dtoa_r+0x594>
 8007170:	08009330 	.word	0x08009330
 8007174:	08009308 	.word	0x08009308
 8007178:	3ff00000 	.word	0x3ff00000
 800717c:	40240000 	.word	0x40240000
 8007180:	401c0000 	.word	0x401c0000
 8007184:	40140000 	.word	0x40140000
 8007188:	3fe00000 	.word	0x3fe00000
 800718c:	9d01      	ldr	r5, [sp, #4]
 800718e:	4656      	mov	r6, sl
 8007190:	465f      	mov	r7, fp
 8007192:	4642      	mov	r2, r8
 8007194:	464b      	mov	r3, r9
 8007196:	4630      	mov	r0, r6
 8007198:	4639      	mov	r1, r7
 800719a:	f7f9 fb5f 	bl	800085c <__aeabi_ddiv>
 800719e:	f7f9 fce3 	bl	8000b68 <__aeabi_d2iz>
 80071a2:	4682      	mov	sl, r0
 80071a4:	f7f9 f9c6 	bl	8000534 <__aeabi_i2d>
 80071a8:	4642      	mov	r2, r8
 80071aa:	464b      	mov	r3, r9
 80071ac:	f7f9 fa2c 	bl	8000608 <__aeabi_dmul>
 80071b0:	4602      	mov	r2, r0
 80071b2:	460b      	mov	r3, r1
 80071b4:	4630      	mov	r0, r6
 80071b6:	4639      	mov	r1, r7
 80071b8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80071bc:	f7f9 f86c 	bl	8000298 <__aeabi_dsub>
 80071c0:	f805 6b01 	strb.w	r6, [r5], #1
 80071c4:	9e01      	ldr	r6, [sp, #4]
 80071c6:	9f03      	ldr	r7, [sp, #12]
 80071c8:	1bae      	subs	r6, r5, r6
 80071ca:	42b7      	cmp	r7, r6
 80071cc:	4602      	mov	r2, r0
 80071ce:	460b      	mov	r3, r1
 80071d0:	d135      	bne.n	800723e <_dtoa_r+0x6e6>
 80071d2:	f7f9 f863 	bl	800029c <__adddf3>
 80071d6:	4642      	mov	r2, r8
 80071d8:	464b      	mov	r3, r9
 80071da:	4606      	mov	r6, r0
 80071dc:	460f      	mov	r7, r1
 80071de:	f7f9 fca3 	bl	8000b28 <__aeabi_dcmpgt>
 80071e2:	b9d0      	cbnz	r0, 800721a <_dtoa_r+0x6c2>
 80071e4:	4642      	mov	r2, r8
 80071e6:	464b      	mov	r3, r9
 80071e8:	4630      	mov	r0, r6
 80071ea:	4639      	mov	r1, r7
 80071ec:	f7f9 fc74 	bl	8000ad8 <__aeabi_dcmpeq>
 80071f0:	b110      	cbz	r0, 80071f8 <_dtoa_r+0x6a0>
 80071f2:	f01a 0f01 	tst.w	sl, #1
 80071f6:	d110      	bne.n	800721a <_dtoa_r+0x6c2>
 80071f8:	4620      	mov	r0, r4
 80071fa:	ee18 1a10 	vmov	r1, s16
 80071fe:	f000 faf3 	bl	80077e8 <_Bfree>
 8007202:	2300      	movs	r3, #0
 8007204:	9800      	ldr	r0, [sp, #0]
 8007206:	702b      	strb	r3, [r5, #0]
 8007208:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800720a:	3001      	adds	r0, #1
 800720c:	6018      	str	r0, [r3, #0]
 800720e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007210:	2b00      	cmp	r3, #0
 8007212:	f43f acf1 	beq.w	8006bf8 <_dtoa_r+0xa0>
 8007216:	601d      	str	r5, [r3, #0]
 8007218:	e4ee      	b.n	8006bf8 <_dtoa_r+0xa0>
 800721a:	9f00      	ldr	r7, [sp, #0]
 800721c:	462b      	mov	r3, r5
 800721e:	461d      	mov	r5, r3
 8007220:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007224:	2a39      	cmp	r2, #57	; 0x39
 8007226:	d106      	bne.n	8007236 <_dtoa_r+0x6de>
 8007228:	9a01      	ldr	r2, [sp, #4]
 800722a:	429a      	cmp	r2, r3
 800722c:	d1f7      	bne.n	800721e <_dtoa_r+0x6c6>
 800722e:	9901      	ldr	r1, [sp, #4]
 8007230:	2230      	movs	r2, #48	; 0x30
 8007232:	3701      	adds	r7, #1
 8007234:	700a      	strb	r2, [r1, #0]
 8007236:	781a      	ldrb	r2, [r3, #0]
 8007238:	3201      	adds	r2, #1
 800723a:	701a      	strb	r2, [r3, #0]
 800723c:	e790      	b.n	8007160 <_dtoa_r+0x608>
 800723e:	4ba6      	ldr	r3, [pc, #664]	; (80074d8 <_dtoa_r+0x980>)
 8007240:	2200      	movs	r2, #0
 8007242:	f7f9 f9e1 	bl	8000608 <__aeabi_dmul>
 8007246:	2200      	movs	r2, #0
 8007248:	2300      	movs	r3, #0
 800724a:	4606      	mov	r6, r0
 800724c:	460f      	mov	r7, r1
 800724e:	f7f9 fc43 	bl	8000ad8 <__aeabi_dcmpeq>
 8007252:	2800      	cmp	r0, #0
 8007254:	d09d      	beq.n	8007192 <_dtoa_r+0x63a>
 8007256:	e7cf      	b.n	80071f8 <_dtoa_r+0x6a0>
 8007258:	9a08      	ldr	r2, [sp, #32]
 800725a:	2a00      	cmp	r2, #0
 800725c:	f000 80d7 	beq.w	800740e <_dtoa_r+0x8b6>
 8007260:	9a06      	ldr	r2, [sp, #24]
 8007262:	2a01      	cmp	r2, #1
 8007264:	f300 80ba 	bgt.w	80073dc <_dtoa_r+0x884>
 8007268:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800726a:	2a00      	cmp	r2, #0
 800726c:	f000 80b2 	beq.w	80073d4 <_dtoa_r+0x87c>
 8007270:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007274:	9e07      	ldr	r6, [sp, #28]
 8007276:	9d04      	ldr	r5, [sp, #16]
 8007278:	9a04      	ldr	r2, [sp, #16]
 800727a:	441a      	add	r2, r3
 800727c:	9204      	str	r2, [sp, #16]
 800727e:	9a05      	ldr	r2, [sp, #20]
 8007280:	2101      	movs	r1, #1
 8007282:	441a      	add	r2, r3
 8007284:	4620      	mov	r0, r4
 8007286:	9205      	str	r2, [sp, #20]
 8007288:	f000 fb66 	bl	8007958 <__i2b>
 800728c:	4607      	mov	r7, r0
 800728e:	2d00      	cmp	r5, #0
 8007290:	dd0c      	ble.n	80072ac <_dtoa_r+0x754>
 8007292:	9b05      	ldr	r3, [sp, #20]
 8007294:	2b00      	cmp	r3, #0
 8007296:	dd09      	ble.n	80072ac <_dtoa_r+0x754>
 8007298:	42ab      	cmp	r3, r5
 800729a:	9a04      	ldr	r2, [sp, #16]
 800729c:	bfa8      	it	ge
 800729e:	462b      	movge	r3, r5
 80072a0:	1ad2      	subs	r2, r2, r3
 80072a2:	9204      	str	r2, [sp, #16]
 80072a4:	9a05      	ldr	r2, [sp, #20]
 80072a6:	1aed      	subs	r5, r5, r3
 80072a8:	1ad3      	subs	r3, r2, r3
 80072aa:	9305      	str	r3, [sp, #20]
 80072ac:	9b07      	ldr	r3, [sp, #28]
 80072ae:	b31b      	cbz	r3, 80072f8 <_dtoa_r+0x7a0>
 80072b0:	9b08      	ldr	r3, [sp, #32]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	f000 80af 	beq.w	8007416 <_dtoa_r+0x8be>
 80072b8:	2e00      	cmp	r6, #0
 80072ba:	dd13      	ble.n	80072e4 <_dtoa_r+0x78c>
 80072bc:	4639      	mov	r1, r7
 80072be:	4632      	mov	r2, r6
 80072c0:	4620      	mov	r0, r4
 80072c2:	f000 fc09 	bl	8007ad8 <__pow5mult>
 80072c6:	ee18 2a10 	vmov	r2, s16
 80072ca:	4601      	mov	r1, r0
 80072cc:	4607      	mov	r7, r0
 80072ce:	4620      	mov	r0, r4
 80072d0:	f000 fb58 	bl	8007984 <__multiply>
 80072d4:	ee18 1a10 	vmov	r1, s16
 80072d8:	4680      	mov	r8, r0
 80072da:	4620      	mov	r0, r4
 80072dc:	f000 fa84 	bl	80077e8 <_Bfree>
 80072e0:	ee08 8a10 	vmov	s16, r8
 80072e4:	9b07      	ldr	r3, [sp, #28]
 80072e6:	1b9a      	subs	r2, r3, r6
 80072e8:	d006      	beq.n	80072f8 <_dtoa_r+0x7a0>
 80072ea:	ee18 1a10 	vmov	r1, s16
 80072ee:	4620      	mov	r0, r4
 80072f0:	f000 fbf2 	bl	8007ad8 <__pow5mult>
 80072f4:	ee08 0a10 	vmov	s16, r0
 80072f8:	2101      	movs	r1, #1
 80072fa:	4620      	mov	r0, r4
 80072fc:	f000 fb2c 	bl	8007958 <__i2b>
 8007300:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007302:	2b00      	cmp	r3, #0
 8007304:	4606      	mov	r6, r0
 8007306:	f340 8088 	ble.w	800741a <_dtoa_r+0x8c2>
 800730a:	461a      	mov	r2, r3
 800730c:	4601      	mov	r1, r0
 800730e:	4620      	mov	r0, r4
 8007310:	f000 fbe2 	bl	8007ad8 <__pow5mult>
 8007314:	9b06      	ldr	r3, [sp, #24]
 8007316:	2b01      	cmp	r3, #1
 8007318:	4606      	mov	r6, r0
 800731a:	f340 8081 	ble.w	8007420 <_dtoa_r+0x8c8>
 800731e:	f04f 0800 	mov.w	r8, #0
 8007322:	6933      	ldr	r3, [r6, #16]
 8007324:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007328:	6918      	ldr	r0, [r3, #16]
 800732a:	f000 fac5 	bl	80078b8 <__hi0bits>
 800732e:	f1c0 0020 	rsb	r0, r0, #32
 8007332:	9b05      	ldr	r3, [sp, #20]
 8007334:	4418      	add	r0, r3
 8007336:	f010 001f 	ands.w	r0, r0, #31
 800733a:	f000 8092 	beq.w	8007462 <_dtoa_r+0x90a>
 800733e:	f1c0 0320 	rsb	r3, r0, #32
 8007342:	2b04      	cmp	r3, #4
 8007344:	f340 808a 	ble.w	800745c <_dtoa_r+0x904>
 8007348:	f1c0 001c 	rsb	r0, r0, #28
 800734c:	9b04      	ldr	r3, [sp, #16]
 800734e:	4403      	add	r3, r0
 8007350:	9304      	str	r3, [sp, #16]
 8007352:	9b05      	ldr	r3, [sp, #20]
 8007354:	4403      	add	r3, r0
 8007356:	4405      	add	r5, r0
 8007358:	9305      	str	r3, [sp, #20]
 800735a:	9b04      	ldr	r3, [sp, #16]
 800735c:	2b00      	cmp	r3, #0
 800735e:	dd07      	ble.n	8007370 <_dtoa_r+0x818>
 8007360:	ee18 1a10 	vmov	r1, s16
 8007364:	461a      	mov	r2, r3
 8007366:	4620      	mov	r0, r4
 8007368:	f000 fc10 	bl	8007b8c <__lshift>
 800736c:	ee08 0a10 	vmov	s16, r0
 8007370:	9b05      	ldr	r3, [sp, #20]
 8007372:	2b00      	cmp	r3, #0
 8007374:	dd05      	ble.n	8007382 <_dtoa_r+0x82a>
 8007376:	4631      	mov	r1, r6
 8007378:	461a      	mov	r2, r3
 800737a:	4620      	mov	r0, r4
 800737c:	f000 fc06 	bl	8007b8c <__lshift>
 8007380:	4606      	mov	r6, r0
 8007382:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007384:	2b00      	cmp	r3, #0
 8007386:	d06e      	beq.n	8007466 <_dtoa_r+0x90e>
 8007388:	ee18 0a10 	vmov	r0, s16
 800738c:	4631      	mov	r1, r6
 800738e:	f000 fc6d 	bl	8007c6c <__mcmp>
 8007392:	2800      	cmp	r0, #0
 8007394:	da67      	bge.n	8007466 <_dtoa_r+0x90e>
 8007396:	9b00      	ldr	r3, [sp, #0]
 8007398:	3b01      	subs	r3, #1
 800739a:	ee18 1a10 	vmov	r1, s16
 800739e:	9300      	str	r3, [sp, #0]
 80073a0:	220a      	movs	r2, #10
 80073a2:	2300      	movs	r3, #0
 80073a4:	4620      	mov	r0, r4
 80073a6:	f000 fa41 	bl	800782c <__multadd>
 80073aa:	9b08      	ldr	r3, [sp, #32]
 80073ac:	ee08 0a10 	vmov	s16, r0
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	f000 81b1 	beq.w	8007718 <_dtoa_r+0xbc0>
 80073b6:	2300      	movs	r3, #0
 80073b8:	4639      	mov	r1, r7
 80073ba:	220a      	movs	r2, #10
 80073bc:	4620      	mov	r0, r4
 80073be:	f000 fa35 	bl	800782c <__multadd>
 80073c2:	9b02      	ldr	r3, [sp, #8]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	4607      	mov	r7, r0
 80073c8:	f300 808e 	bgt.w	80074e8 <_dtoa_r+0x990>
 80073cc:	9b06      	ldr	r3, [sp, #24]
 80073ce:	2b02      	cmp	r3, #2
 80073d0:	dc51      	bgt.n	8007476 <_dtoa_r+0x91e>
 80073d2:	e089      	b.n	80074e8 <_dtoa_r+0x990>
 80073d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80073d6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80073da:	e74b      	b.n	8007274 <_dtoa_r+0x71c>
 80073dc:	9b03      	ldr	r3, [sp, #12]
 80073de:	1e5e      	subs	r6, r3, #1
 80073e0:	9b07      	ldr	r3, [sp, #28]
 80073e2:	42b3      	cmp	r3, r6
 80073e4:	bfbf      	itttt	lt
 80073e6:	9b07      	ldrlt	r3, [sp, #28]
 80073e8:	9607      	strlt	r6, [sp, #28]
 80073ea:	1af2      	sublt	r2, r6, r3
 80073ec:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80073ee:	bfb6      	itet	lt
 80073f0:	189b      	addlt	r3, r3, r2
 80073f2:	1b9e      	subge	r6, r3, r6
 80073f4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80073f6:	9b03      	ldr	r3, [sp, #12]
 80073f8:	bfb8      	it	lt
 80073fa:	2600      	movlt	r6, #0
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	bfb7      	itett	lt
 8007400:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007404:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007408:	1a9d      	sublt	r5, r3, r2
 800740a:	2300      	movlt	r3, #0
 800740c:	e734      	b.n	8007278 <_dtoa_r+0x720>
 800740e:	9e07      	ldr	r6, [sp, #28]
 8007410:	9d04      	ldr	r5, [sp, #16]
 8007412:	9f08      	ldr	r7, [sp, #32]
 8007414:	e73b      	b.n	800728e <_dtoa_r+0x736>
 8007416:	9a07      	ldr	r2, [sp, #28]
 8007418:	e767      	b.n	80072ea <_dtoa_r+0x792>
 800741a:	9b06      	ldr	r3, [sp, #24]
 800741c:	2b01      	cmp	r3, #1
 800741e:	dc18      	bgt.n	8007452 <_dtoa_r+0x8fa>
 8007420:	f1ba 0f00 	cmp.w	sl, #0
 8007424:	d115      	bne.n	8007452 <_dtoa_r+0x8fa>
 8007426:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800742a:	b993      	cbnz	r3, 8007452 <_dtoa_r+0x8fa>
 800742c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007430:	0d1b      	lsrs	r3, r3, #20
 8007432:	051b      	lsls	r3, r3, #20
 8007434:	b183      	cbz	r3, 8007458 <_dtoa_r+0x900>
 8007436:	9b04      	ldr	r3, [sp, #16]
 8007438:	3301      	adds	r3, #1
 800743a:	9304      	str	r3, [sp, #16]
 800743c:	9b05      	ldr	r3, [sp, #20]
 800743e:	3301      	adds	r3, #1
 8007440:	9305      	str	r3, [sp, #20]
 8007442:	f04f 0801 	mov.w	r8, #1
 8007446:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007448:	2b00      	cmp	r3, #0
 800744a:	f47f af6a 	bne.w	8007322 <_dtoa_r+0x7ca>
 800744e:	2001      	movs	r0, #1
 8007450:	e76f      	b.n	8007332 <_dtoa_r+0x7da>
 8007452:	f04f 0800 	mov.w	r8, #0
 8007456:	e7f6      	b.n	8007446 <_dtoa_r+0x8ee>
 8007458:	4698      	mov	r8, r3
 800745a:	e7f4      	b.n	8007446 <_dtoa_r+0x8ee>
 800745c:	f43f af7d 	beq.w	800735a <_dtoa_r+0x802>
 8007460:	4618      	mov	r0, r3
 8007462:	301c      	adds	r0, #28
 8007464:	e772      	b.n	800734c <_dtoa_r+0x7f4>
 8007466:	9b03      	ldr	r3, [sp, #12]
 8007468:	2b00      	cmp	r3, #0
 800746a:	dc37      	bgt.n	80074dc <_dtoa_r+0x984>
 800746c:	9b06      	ldr	r3, [sp, #24]
 800746e:	2b02      	cmp	r3, #2
 8007470:	dd34      	ble.n	80074dc <_dtoa_r+0x984>
 8007472:	9b03      	ldr	r3, [sp, #12]
 8007474:	9302      	str	r3, [sp, #8]
 8007476:	9b02      	ldr	r3, [sp, #8]
 8007478:	b96b      	cbnz	r3, 8007496 <_dtoa_r+0x93e>
 800747a:	4631      	mov	r1, r6
 800747c:	2205      	movs	r2, #5
 800747e:	4620      	mov	r0, r4
 8007480:	f000 f9d4 	bl	800782c <__multadd>
 8007484:	4601      	mov	r1, r0
 8007486:	4606      	mov	r6, r0
 8007488:	ee18 0a10 	vmov	r0, s16
 800748c:	f000 fbee 	bl	8007c6c <__mcmp>
 8007490:	2800      	cmp	r0, #0
 8007492:	f73f adbb 	bgt.w	800700c <_dtoa_r+0x4b4>
 8007496:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007498:	9d01      	ldr	r5, [sp, #4]
 800749a:	43db      	mvns	r3, r3
 800749c:	9300      	str	r3, [sp, #0]
 800749e:	f04f 0800 	mov.w	r8, #0
 80074a2:	4631      	mov	r1, r6
 80074a4:	4620      	mov	r0, r4
 80074a6:	f000 f99f 	bl	80077e8 <_Bfree>
 80074aa:	2f00      	cmp	r7, #0
 80074ac:	f43f aea4 	beq.w	80071f8 <_dtoa_r+0x6a0>
 80074b0:	f1b8 0f00 	cmp.w	r8, #0
 80074b4:	d005      	beq.n	80074c2 <_dtoa_r+0x96a>
 80074b6:	45b8      	cmp	r8, r7
 80074b8:	d003      	beq.n	80074c2 <_dtoa_r+0x96a>
 80074ba:	4641      	mov	r1, r8
 80074bc:	4620      	mov	r0, r4
 80074be:	f000 f993 	bl	80077e8 <_Bfree>
 80074c2:	4639      	mov	r1, r7
 80074c4:	4620      	mov	r0, r4
 80074c6:	f000 f98f 	bl	80077e8 <_Bfree>
 80074ca:	e695      	b.n	80071f8 <_dtoa_r+0x6a0>
 80074cc:	2600      	movs	r6, #0
 80074ce:	4637      	mov	r7, r6
 80074d0:	e7e1      	b.n	8007496 <_dtoa_r+0x93e>
 80074d2:	9700      	str	r7, [sp, #0]
 80074d4:	4637      	mov	r7, r6
 80074d6:	e599      	b.n	800700c <_dtoa_r+0x4b4>
 80074d8:	40240000 	.word	0x40240000
 80074dc:	9b08      	ldr	r3, [sp, #32]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	f000 80ca 	beq.w	8007678 <_dtoa_r+0xb20>
 80074e4:	9b03      	ldr	r3, [sp, #12]
 80074e6:	9302      	str	r3, [sp, #8]
 80074e8:	2d00      	cmp	r5, #0
 80074ea:	dd05      	ble.n	80074f8 <_dtoa_r+0x9a0>
 80074ec:	4639      	mov	r1, r7
 80074ee:	462a      	mov	r2, r5
 80074f0:	4620      	mov	r0, r4
 80074f2:	f000 fb4b 	bl	8007b8c <__lshift>
 80074f6:	4607      	mov	r7, r0
 80074f8:	f1b8 0f00 	cmp.w	r8, #0
 80074fc:	d05b      	beq.n	80075b6 <_dtoa_r+0xa5e>
 80074fe:	6879      	ldr	r1, [r7, #4]
 8007500:	4620      	mov	r0, r4
 8007502:	f000 f931 	bl	8007768 <_Balloc>
 8007506:	4605      	mov	r5, r0
 8007508:	b928      	cbnz	r0, 8007516 <_dtoa_r+0x9be>
 800750a:	4b87      	ldr	r3, [pc, #540]	; (8007728 <_dtoa_r+0xbd0>)
 800750c:	4602      	mov	r2, r0
 800750e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007512:	f7ff bb3b 	b.w	8006b8c <_dtoa_r+0x34>
 8007516:	693a      	ldr	r2, [r7, #16]
 8007518:	3202      	adds	r2, #2
 800751a:	0092      	lsls	r2, r2, #2
 800751c:	f107 010c 	add.w	r1, r7, #12
 8007520:	300c      	adds	r0, #12
 8007522:	f000 f913 	bl	800774c <memcpy>
 8007526:	2201      	movs	r2, #1
 8007528:	4629      	mov	r1, r5
 800752a:	4620      	mov	r0, r4
 800752c:	f000 fb2e 	bl	8007b8c <__lshift>
 8007530:	9b01      	ldr	r3, [sp, #4]
 8007532:	f103 0901 	add.w	r9, r3, #1
 8007536:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800753a:	4413      	add	r3, r2
 800753c:	9305      	str	r3, [sp, #20]
 800753e:	f00a 0301 	and.w	r3, sl, #1
 8007542:	46b8      	mov	r8, r7
 8007544:	9304      	str	r3, [sp, #16]
 8007546:	4607      	mov	r7, r0
 8007548:	4631      	mov	r1, r6
 800754a:	ee18 0a10 	vmov	r0, s16
 800754e:	f7ff fa75 	bl	8006a3c <quorem>
 8007552:	4641      	mov	r1, r8
 8007554:	9002      	str	r0, [sp, #8]
 8007556:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800755a:	ee18 0a10 	vmov	r0, s16
 800755e:	f000 fb85 	bl	8007c6c <__mcmp>
 8007562:	463a      	mov	r2, r7
 8007564:	9003      	str	r0, [sp, #12]
 8007566:	4631      	mov	r1, r6
 8007568:	4620      	mov	r0, r4
 800756a:	f000 fb9b 	bl	8007ca4 <__mdiff>
 800756e:	68c2      	ldr	r2, [r0, #12]
 8007570:	f109 3bff 	add.w	fp, r9, #4294967295
 8007574:	4605      	mov	r5, r0
 8007576:	bb02      	cbnz	r2, 80075ba <_dtoa_r+0xa62>
 8007578:	4601      	mov	r1, r0
 800757a:	ee18 0a10 	vmov	r0, s16
 800757e:	f000 fb75 	bl	8007c6c <__mcmp>
 8007582:	4602      	mov	r2, r0
 8007584:	4629      	mov	r1, r5
 8007586:	4620      	mov	r0, r4
 8007588:	9207      	str	r2, [sp, #28]
 800758a:	f000 f92d 	bl	80077e8 <_Bfree>
 800758e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007592:	ea43 0102 	orr.w	r1, r3, r2
 8007596:	9b04      	ldr	r3, [sp, #16]
 8007598:	430b      	orrs	r3, r1
 800759a:	464d      	mov	r5, r9
 800759c:	d10f      	bne.n	80075be <_dtoa_r+0xa66>
 800759e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80075a2:	d02a      	beq.n	80075fa <_dtoa_r+0xaa2>
 80075a4:	9b03      	ldr	r3, [sp, #12]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	dd02      	ble.n	80075b0 <_dtoa_r+0xa58>
 80075aa:	9b02      	ldr	r3, [sp, #8]
 80075ac:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80075b0:	f88b a000 	strb.w	sl, [fp]
 80075b4:	e775      	b.n	80074a2 <_dtoa_r+0x94a>
 80075b6:	4638      	mov	r0, r7
 80075b8:	e7ba      	b.n	8007530 <_dtoa_r+0x9d8>
 80075ba:	2201      	movs	r2, #1
 80075bc:	e7e2      	b.n	8007584 <_dtoa_r+0xa2c>
 80075be:	9b03      	ldr	r3, [sp, #12]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	db04      	blt.n	80075ce <_dtoa_r+0xa76>
 80075c4:	9906      	ldr	r1, [sp, #24]
 80075c6:	430b      	orrs	r3, r1
 80075c8:	9904      	ldr	r1, [sp, #16]
 80075ca:	430b      	orrs	r3, r1
 80075cc:	d122      	bne.n	8007614 <_dtoa_r+0xabc>
 80075ce:	2a00      	cmp	r2, #0
 80075d0:	ddee      	ble.n	80075b0 <_dtoa_r+0xa58>
 80075d2:	ee18 1a10 	vmov	r1, s16
 80075d6:	2201      	movs	r2, #1
 80075d8:	4620      	mov	r0, r4
 80075da:	f000 fad7 	bl	8007b8c <__lshift>
 80075de:	4631      	mov	r1, r6
 80075e0:	ee08 0a10 	vmov	s16, r0
 80075e4:	f000 fb42 	bl	8007c6c <__mcmp>
 80075e8:	2800      	cmp	r0, #0
 80075ea:	dc03      	bgt.n	80075f4 <_dtoa_r+0xa9c>
 80075ec:	d1e0      	bne.n	80075b0 <_dtoa_r+0xa58>
 80075ee:	f01a 0f01 	tst.w	sl, #1
 80075f2:	d0dd      	beq.n	80075b0 <_dtoa_r+0xa58>
 80075f4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80075f8:	d1d7      	bne.n	80075aa <_dtoa_r+0xa52>
 80075fa:	2339      	movs	r3, #57	; 0x39
 80075fc:	f88b 3000 	strb.w	r3, [fp]
 8007600:	462b      	mov	r3, r5
 8007602:	461d      	mov	r5, r3
 8007604:	3b01      	subs	r3, #1
 8007606:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800760a:	2a39      	cmp	r2, #57	; 0x39
 800760c:	d071      	beq.n	80076f2 <_dtoa_r+0xb9a>
 800760e:	3201      	adds	r2, #1
 8007610:	701a      	strb	r2, [r3, #0]
 8007612:	e746      	b.n	80074a2 <_dtoa_r+0x94a>
 8007614:	2a00      	cmp	r2, #0
 8007616:	dd07      	ble.n	8007628 <_dtoa_r+0xad0>
 8007618:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800761c:	d0ed      	beq.n	80075fa <_dtoa_r+0xaa2>
 800761e:	f10a 0301 	add.w	r3, sl, #1
 8007622:	f88b 3000 	strb.w	r3, [fp]
 8007626:	e73c      	b.n	80074a2 <_dtoa_r+0x94a>
 8007628:	9b05      	ldr	r3, [sp, #20]
 800762a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800762e:	4599      	cmp	r9, r3
 8007630:	d047      	beq.n	80076c2 <_dtoa_r+0xb6a>
 8007632:	ee18 1a10 	vmov	r1, s16
 8007636:	2300      	movs	r3, #0
 8007638:	220a      	movs	r2, #10
 800763a:	4620      	mov	r0, r4
 800763c:	f000 f8f6 	bl	800782c <__multadd>
 8007640:	45b8      	cmp	r8, r7
 8007642:	ee08 0a10 	vmov	s16, r0
 8007646:	f04f 0300 	mov.w	r3, #0
 800764a:	f04f 020a 	mov.w	r2, #10
 800764e:	4641      	mov	r1, r8
 8007650:	4620      	mov	r0, r4
 8007652:	d106      	bne.n	8007662 <_dtoa_r+0xb0a>
 8007654:	f000 f8ea 	bl	800782c <__multadd>
 8007658:	4680      	mov	r8, r0
 800765a:	4607      	mov	r7, r0
 800765c:	f109 0901 	add.w	r9, r9, #1
 8007660:	e772      	b.n	8007548 <_dtoa_r+0x9f0>
 8007662:	f000 f8e3 	bl	800782c <__multadd>
 8007666:	4639      	mov	r1, r7
 8007668:	4680      	mov	r8, r0
 800766a:	2300      	movs	r3, #0
 800766c:	220a      	movs	r2, #10
 800766e:	4620      	mov	r0, r4
 8007670:	f000 f8dc 	bl	800782c <__multadd>
 8007674:	4607      	mov	r7, r0
 8007676:	e7f1      	b.n	800765c <_dtoa_r+0xb04>
 8007678:	9b03      	ldr	r3, [sp, #12]
 800767a:	9302      	str	r3, [sp, #8]
 800767c:	9d01      	ldr	r5, [sp, #4]
 800767e:	ee18 0a10 	vmov	r0, s16
 8007682:	4631      	mov	r1, r6
 8007684:	f7ff f9da 	bl	8006a3c <quorem>
 8007688:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800768c:	9b01      	ldr	r3, [sp, #4]
 800768e:	f805 ab01 	strb.w	sl, [r5], #1
 8007692:	1aea      	subs	r2, r5, r3
 8007694:	9b02      	ldr	r3, [sp, #8]
 8007696:	4293      	cmp	r3, r2
 8007698:	dd09      	ble.n	80076ae <_dtoa_r+0xb56>
 800769a:	ee18 1a10 	vmov	r1, s16
 800769e:	2300      	movs	r3, #0
 80076a0:	220a      	movs	r2, #10
 80076a2:	4620      	mov	r0, r4
 80076a4:	f000 f8c2 	bl	800782c <__multadd>
 80076a8:	ee08 0a10 	vmov	s16, r0
 80076ac:	e7e7      	b.n	800767e <_dtoa_r+0xb26>
 80076ae:	9b02      	ldr	r3, [sp, #8]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	bfc8      	it	gt
 80076b4:	461d      	movgt	r5, r3
 80076b6:	9b01      	ldr	r3, [sp, #4]
 80076b8:	bfd8      	it	le
 80076ba:	2501      	movle	r5, #1
 80076bc:	441d      	add	r5, r3
 80076be:	f04f 0800 	mov.w	r8, #0
 80076c2:	ee18 1a10 	vmov	r1, s16
 80076c6:	2201      	movs	r2, #1
 80076c8:	4620      	mov	r0, r4
 80076ca:	f000 fa5f 	bl	8007b8c <__lshift>
 80076ce:	4631      	mov	r1, r6
 80076d0:	ee08 0a10 	vmov	s16, r0
 80076d4:	f000 faca 	bl	8007c6c <__mcmp>
 80076d8:	2800      	cmp	r0, #0
 80076da:	dc91      	bgt.n	8007600 <_dtoa_r+0xaa8>
 80076dc:	d102      	bne.n	80076e4 <_dtoa_r+0xb8c>
 80076de:	f01a 0f01 	tst.w	sl, #1
 80076e2:	d18d      	bne.n	8007600 <_dtoa_r+0xaa8>
 80076e4:	462b      	mov	r3, r5
 80076e6:	461d      	mov	r5, r3
 80076e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80076ec:	2a30      	cmp	r2, #48	; 0x30
 80076ee:	d0fa      	beq.n	80076e6 <_dtoa_r+0xb8e>
 80076f0:	e6d7      	b.n	80074a2 <_dtoa_r+0x94a>
 80076f2:	9a01      	ldr	r2, [sp, #4]
 80076f4:	429a      	cmp	r2, r3
 80076f6:	d184      	bne.n	8007602 <_dtoa_r+0xaaa>
 80076f8:	9b00      	ldr	r3, [sp, #0]
 80076fa:	3301      	adds	r3, #1
 80076fc:	9300      	str	r3, [sp, #0]
 80076fe:	2331      	movs	r3, #49	; 0x31
 8007700:	7013      	strb	r3, [r2, #0]
 8007702:	e6ce      	b.n	80074a2 <_dtoa_r+0x94a>
 8007704:	4b09      	ldr	r3, [pc, #36]	; (800772c <_dtoa_r+0xbd4>)
 8007706:	f7ff ba95 	b.w	8006c34 <_dtoa_r+0xdc>
 800770a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800770c:	2b00      	cmp	r3, #0
 800770e:	f47f aa6e 	bne.w	8006bee <_dtoa_r+0x96>
 8007712:	4b07      	ldr	r3, [pc, #28]	; (8007730 <_dtoa_r+0xbd8>)
 8007714:	f7ff ba8e 	b.w	8006c34 <_dtoa_r+0xdc>
 8007718:	9b02      	ldr	r3, [sp, #8]
 800771a:	2b00      	cmp	r3, #0
 800771c:	dcae      	bgt.n	800767c <_dtoa_r+0xb24>
 800771e:	9b06      	ldr	r3, [sp, #24]
 8007720:	2b02      	cmp	r3, #2
 8007722:	f73f aea8 	bgt.w	8007476 <_dtoa_r+0x91e>
 8007726:	e7a9      	b.n	800767c <_dtoa_r+0xb24>
 8007728:	0800929b 	.word	0x0800929b
 800772c:	080091f8 	.word	0x080091f8
 8007730:	0800921c 	.word	0x0800921c

08007734 <_localeconv_r>:
 8007734:	4800      	ldr	r0, [pc, #0]	; (8007738 <_localeconv_r+0x4>)
 8007736:	4770      	bx	lr
 8007738:	20000168 	.word	0x20000168

0800773c <malloc>:
 800773c:	4b02      	ldr	r3, [pc, #8]	; (8007748 <malloc+0xc>)
 800773e:	4601      	mov	r1, r0
 8007740:	6818      	ldr	r0, [r3, #0]
 8007742:	f000 bc17 	b.w	8007f74 <_malloc_r>
 8007746:	bf00      	nop
 8007748:	20000014 	.word	0x20000014

0800774c <memcpy>:
 800774c:	440a      	add	r2, r1
 800774e:	4291      	cmp	r1, r2
 8007750:	f100 33ff 	add.w	r3, r0, #4294967295
 8007754:	d100      	bne.n	8007758 <memcpy+0xc>
 8007756:	4770      	bx	lr
 8007758:	b510      	push	{r4, lr}
 800775a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800775e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007762:	4291      	cmp	r1, r2
 8007764:	d1f9      	bne.n	800775a <memcpy+0xe>
 8007766:	bd10      	pop	{r4, pc}

08007768 <_Balloc>:
 8007768:	b570      	push	{r4, r5, r6, lr}
 800776a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800776c:	4604      	mov	r4, r0
 800776e:	460d      	mov	r5, r1
 8007770:	b976      	cbnz	r6, 8007790 <_Balloc+0x28>
 8007772:	2010      	movs	r0, #16
 8007774:	f7ff ffe2 	bl	800773c <malloc>
 8007778:	4602      	mov	r2, r0
 800777a:	6260      	str	r0, [r4, #36]	; 0x24
 800777c:	b920      	cbnz	r0, 8007788 <_Balloc+0x20>
 800777e:	4b18      	ldr	r3, [pc, #96]	; (80077e0 <_Balloc+0x78>)
 8007780:	4818      	ldr	r0, [pc, #96]	; (80077e4 <_Balloc+0x7c>)
 8007782:	2166      	movs	r1, #102	; 0x66
 8007784:	f000 fc7a 	bl	800807c <__assert_func>
 8007788:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800778c:	6006      	str	r6, [r0, #0]
 800778e:	60c6      	str	r6, [r0, #12]
 8007790:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007792:	68f3      	ldr	r3, [r6, #12]
 8007794:	b183      	cbz	r3, 80077b8 <_Balloc+0x50>
 8007796:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007798:	68db      	ldr	r3, [r3, #12]
 800779a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800779e:	b9b8      	cbnz	r0, 80077d0 <_Balloc+0x68>
 80077a0:	2101      	movs	r1, #1
 80077a2:	fa01 f605 	lsl.w	r6, r1, r5
 80077a6:	1d72      	adds	r2, r6, #5
 80077a8:	0092      	lsls	r2, r2, #2
 80077aa:	4620      	mov	r0, r4
 80077ac:	f000 fb60 	bl	8007e70 <_calloc_r>
 80077b0:	b160      	cbz	r0, 80077cc <_Balloc+0x64>
 80077b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80077b6:	e00e      	b.n	80077d6 <_Balloc+0x6e>
 80077b8:	2221      	movs	r2, #33	; 0x21
 80077ba:	2104      	movs	r1, #4
 80077bc:	4620      	mov	r0, r4
 80077be:	f000 fb57 	bl	8007e70 <_calloc_r>
 80077c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80077c4:	60f0      	str	r0, [r6, #12]
 80077c6:	68db      	ldr	r3, [r3, #12]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d1e4      	bne.n	8007796 <_Balloc+0x2e>
 80077cc:	2000      	movs	r0, #0
 80077ce:	bd70      	pop	{r4, r5, r6, pc}
 80077d0:	6802      	ldr	r2, [r0, #0]
 80077d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80077d6:	2300      	movs	r3, #0
 80077d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80077dc:	e7f7      	b.n	80077ce <_Balloc+0x66>
 80077de:	bf00      	nop
 80077e0:	08009229 	.word	0x08009229
 80077e4:	080092ac 	.word	0x080092ac

080077e8 <_Bfree>:
 80077e8:	b570      	push	{r4, r5, r6, lr}
 80077ea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80077ec:	4605      	mov	r5, r0
 80077ee:	460c      	mov	r4, r1
 80077f0:	b976      	cbnz	r6, 8007810 <_Bfree+0x28>
 80077f2:	2010      	movs	r0, #16
 80077f4:	f7ff ffa2 	bl	800773c <malloc>
 80077f8:	4602      	mov	r2, r0
 80077fa:	6268      	str	r0, [r5, #36]	; 0x24
 80077fc:	b920      	cbnz	r0, 8007808 <_Bfree+0x20>
 80077fe:	4b09      	ldr	r3, [pc, #36]	; (8007824 <_Bfree+0x3c>)
 8007800:	4809      	ldr	r0, [pc, #36]	; (8007828 <_Bfree+0x40>)
 8007802:	218a      	movs	r1, #138	; 0x8a
 8007804:	f000 fc3a 	bl	800807c <__assert_func>
 8007808:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800780c:	6006      	str	r6, [r0, #0]
 800780e:	60c6      	str	r6, [r0, #12]
 8007810:	b13c      	cbz	r4, 8007822 <_Bfree+0x3a>
 8007812:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007814:	6862      	ldr	r2, [r4, #4]
 8007816:	68db      	ldr	r3, [r3, #12]
 8007818:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800781c:	6021      	str	r1, [r4, #0]
 800781e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007822:	bd70      	pop	{r4, r5, r6, pc}
 8007824:	08009229 	.word	0x08009229
 8007828:	080092ac 	.word	0x080092ac

0800782c <__multadd>:
 800782c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007830:	690d      	ldr	r5, [r1, #16]
 8007832:	4607      	mov	r7, r0
 8007834:	460c      	mov	r4, r1
 8007836:	461e      	mov	r6, r3
 8007838:	f101 0c14 	add.w	ip, r1, #20
 800783c:	2000      	movs	r0, #0
 800783e:	f8dc 3000 	ldr.w	r3, [ip]
 8007842:	b299      	uxth	r1, r3
 8007844:	fb02 6101 	mla	r1, r2, r1, r6
 8007848:	0c1e      	lsrs	r6, r3, #16
 800784a:	0c0b      	lsrs	r3, r1, #16
 800784c:	fb02 3306 	mla	r3, r2, r6, r3
 8007850:	b289      	uxth	r1, r1
 8007852:	3001      	adds	r0, #1
 8007854:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007858:	4285      	cmp	r5, r0
 800785a:	f84c 1b04 	str.w	r1, [ip], #4
 800785e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007862:	dcec      	bgt.n	800783e <__multadd+0x12>
 8007864:	b30e      	cbz	r6, 80078aa <__multadd+0x7e>
 8007866:	68a3      	ldr	r3, [r4, #8]
 8007868:	42ab      	cmp	r3, r5
 800786a:	dc19      	bgt.n	80078a0 <__multadd+0x74>
 800786c:	6861      	ldr	r1, [r4, #4]
 800786e:	4638      	mov	r0, r7
 8007870:	3101      	adds	r1, #1
 8007872:	f7ff ff79 	bl	8007768 <_Balloc>
 8007876:	4680      	mov	r8, r0
 8007878:	b928      	cbnz	r0, 8007886 <__multadd+0x5a>
 800787a:	4602      	mov	r2, r0
 800787c:	4b0c      	ldr	r3, [pc, #48]	; (80078b0 <__multadd+0x84>)
 800787e:	480d      	ldr	r0, [pc, #52]	; (80078b4 <__multadd+0x88>)
 8007880:	21b5      	movs	r1, #181	; 0xb5
 8007882:	f000 fbfb 	bl	800807c <__assert_func>
 8007886:	6922      	ldr	r2, [r4, #16]
 8007888:	3202      	adds	r2, #2
 800788a:	f104 010c 	add.w	r1, r4, #12
 800788e:	0092      	lsls	r2, r2, #2
 8007890:	300c      	adds	r0, #12
 8007892:	f7ff ff5b 	bl	800774c <memcpy>
 8007896:	4621      	mov	r1, r4
 8007898:	4638      	mov	r0, r7
 800789a:	f7ff ffa5 	bl	80077e8 <_Bfree>
 800789e:	4644      	mov	r4, r8
 80078a0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80078a4:	3501      	adds	r5, #1
 80078a6:	615e      	str	r6, [r3, #20]
 80078a8:	6125      	str	r5, [r4, #16]
 80078aa:	4620      	mov	r0, r4
 80078ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078b0:	0800929b 	.word	0x0800929b
 80078b4:	080092ac 	.word	0x080092ac

080078b8 <__hi0bits>:
 80078b8:	0c03      	lsrs	r3, r0, #16
 80078ba:	041b      	lsls	r3, r3, #16
 80078bc:	b9d3      	cbnz	r3, 80078f4 <__hi0bits+0x3c>
 80078be:	0400      	lsls	r0, r0, #16
 80078c0:	2310      	movs	r3, #16
 80078c2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80078c6:	bf04      	itt	eq
 80078c8:	0200      	lsleq	r0, r0, #8
 80078ca:	3308      	addeq	r3, #8
 80078cc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80078d0:	bf04      	itt	eq
 80078d2:	0100      	lsleq	r0, r0, #4
 80078d4:	3304      	addeq	r3, #4
 80078d6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80078da:	bf04      	itt	eq
 80078dc:	0080      	lsleq	r0, r0, #2
 80078de:	3302      	addeq	r3, #2
 80078e0:	2800      	cmp	r0, #0
 80078e2:	db05      	blt.n	80078f0 <__hi0bits+0x38>
 80078e4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80078e8:	f103 0301 	add.w	r3, r3, #1
 80078ec:	bf08      	it	eq
 80078ee:	2320      	moveq	r3, #32
 80078f0:	4618      	mov	r0, r3
 80078f2:	4770      	bx	lr
 80078f4:	2300      	movs	r3, #0
 80078f6:	e7e4      	b.n	80078c2 <__hi0bits+0xa>

080078f8 <__lo0bits>:
 80078f8:	6803      	ldr	r3, [r0, #0]
 80078fa:	f013 0207 	ands.w	r2, r3, #7
 80078fe:	4601      	mov	r1, r0
 8007900:	d00b      	beq.n	800791a <__lo0bits+0x22>
 8007902:	07da      	lsls	r2, r3, #31
 8007904:	d423      	bmi.n	800794e <__lo0bits+0x56>
 8007906:	0798      	lsls	r0, r3, #30
 8007908:	bf49      	itett	mi
 800790a:	085b      	lsrmi	r3, r3, #1
 800790c:	089b      	lsrpl	r3, r3, #2
 800790e:	2001      	movmi	r0, #1
 8007910:	600b      	strmi	r3, [r1, #0]
 8007912:	bf5c      	itt	pl
 8007914:	600b      	strpl	r3, [r1, #0]
 8007916:	2002      	movpl	r0, #2
 8007918:	4770      	bx	lr
 800791a:	b298      	uxth	r0, r3
 800791c:	b9a8      	cbnz	r0, 800794a <__lo0bits+0x52>
 800791e:	0c1b      	lsrs	r3, r3, #16
 8007920:	2010      	movs	r0, #16
 8007922:	b2da      	uxtb	r2, r3
 8007924:	b90a      	cbnz	r2, 800792a <__lo0bits+0x32>
 8007926:	3008      	adds	r0, #8
 8007928:	0a1b      	lsrs	r3, r3, #8
 800792a:	071a      	lsls	r2, r3, #28
 800792c:	bf04      	itt	eq
 800792e:	091b      	lsreq	r3, r3, #4
 8007930:	3004      	addeq	r0, #4
 8007932:	079a      	lsls	r2, r3, #30
 8007934:	bf04      	itt	eq
 8007936:	089b      	lsreq	r3, r3, #2
 8007938:	3002      	addeq	r0, #2
 800793a:	07da      	lsls	r2, r3, #31
 800793c:	d403      	bmi.n	8007946 <__lo0bits+0x4e>
 800793e:	085b      	lsrs	r3, r3, #1
 8007940:	f100 0001 	add.w	r0, r0, #1
 8007944:	d005      	beq.n	8007952 <__lo0bits+0x5a>
 8007946:	600b      	str	r3, [r1, #0]
 8007948:	4770      	bx	lr
 800794a:	4610      	mov	r0, r2
 800794c:	e7e9      	b.n	8007922 <__lo0bits+0x2a>
 800794e:	2000      	movs	r0, #0
 8007950:	4770      	bx	lr
 8007952:	2020      	movs	r0, #32
 8007954:	4770      	bx	lr
	...

08007958 <__i2b>:
 8007958:	b510      	push	{r4, lr}
 800795a:	460c      	mov	r4, r1
 800795c:	2101      	movs	r1, #1
 800795e:	f7ff ff03 	bl	8007768 <_Balloc>
 8007962:	4602      	mov	r2, r0
 8007964:	b928      	cbnz	r0, 8007972 <__i2b+0x1a>
 8007966:	4b05      	ldr	r3, [pc, #20]	; (800797c <__i2b+0x24>)
 8007968:	4805      	ldr	r0, [pc, #20]	; (8007980 <__i2b+0x28>)
 800796a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800796e:	f000 fb85 	bl	800807c <__assert_func>
 8007972:	2301      	movs	r3, #1
 8007974:	6144      	str	r4, [r0, #20]
 8007976:	6103      	str	r3, [r0, #16]
 8007978:	bd10      	pop	{r4, pc}
 800797a:	bf00      	nop
 800797c:	0800929b 	.word	0x0800929b
 8007980:	080092ac 	.word	0x080092ac

08007984 <__multiply>:
 8007984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007988:	4691      	mov	r9, r2
 800798a:	690a      	ldr	r2, [r1, #16]
 800798c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007990:	429a      	cmp	r2, r3
 8007992:	bfb8      	it	lt
 8007994:	460b      	movlt	r3, r1
 8007996:	460c      	mov	r4, r1
 8007998:	bfbc      	itt	lt
 800799a:	464c      	movlt	r4, r9
 800799c:	4699      	movlt	r9, r3
 800799e:	6927      	ldr	r7, [r4, #16]
 80079a0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80079a4:	68a3      	ldr	r3, [r4, #8]
 80079a6:	6861      	ldr	r1, [r4, #4]
 80079a8:	eb07 060a 	add.w	r6, r7, sl
 80079ac:	42b3      	cmp	r3, r6
 80079ae:	b085      	sub	sp, #20
 80079b0:	bfb8      	it	lt
 80079b2:	3101      	addlt	r1, #1
 80079b4:	f7ff fed8 	bl	8007768 <_Balloc>
 80079b8:	b930      	cbnz	r0, 80079c8 <__multiply+0x44>
 80079ba:	4602      	mov	r2, r0
 80079bc:	4b44      	ldr	r3, [pc, #272]	; (8007ad0 <__multiply+0x14c>)
 80079be:	4845      	ldr	r0, [pc, #276]	; (8007ad4 <__multiply+0x150>)
 80079c0:	f240 115d 	movw	r1, #349	; 0x15d
 80079c4:	f000 fb5a 	bl	800807c <__assert_func>
 80079c8:	f100 0514 	add.w	r5, r0, #20
 80079cc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80079d0:	462b      	mov	r3, r5
 80079d2:	2200      	movs	r2, #0
 80079d4:	4543      	cmp	r3, r8
 80079d6:	d321      	bcc.n	8007a1c <__multiply+0x98>
 80079d8:	f104 0314 	add.w	r3, r4, #20
 80079dc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80079e0:	f109 0314 	add.w	r3, r9, #20
 80079e4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80079e8:	9202      	str	r2, [sp, #8]
 80079ea:	1b3a      	subs	r2, r7, r4
 80079ec:	3a15      	subs	r2, #21
 80079ee:	f022 0203 	bic.w	r2, r2, #3
 80079f2:	3204      	adds	r2, #4
 80079f4:	f104 0115 	add.w	r1, r4, #21
 80079f8:	428f      	cmp	r7, r1
 80079fa:	bf38      	it	cc
 80079fc:	2204      	movcc	r2, #4
 80079fe:	9201      	str	r2, [sp, #4]
 8007a00:	9a02      	ldr	r2, [sp, #8]
 8007a02:	9303      	str	r3, [sp, #12]
 8007a04:	429a      	cmp	r2, r3
 8007a06:	d80c      	bhi.n	8007a22 <__multiply+0x9e>
 8007a08:	2e00      	cmp	r6, #0
 8007a0a:	dd03      	ble.n	8007a14 <__multiply+0x90>
 8007a0c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d05a      	beq.n	8007aca <__multiply+0x146>
 8007a14:	6106      	str	r6, [r0, #16]
 8007a16:	b005      	add	sp, #20
 8007a18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a1c:	f843 2b04 	str.w	r2, [r3], #4
 8007a20:	e7d8      	b.n	80079d4 <__multiply+0x50>
 8007a22:	f8b3 a000 	ldrh.w	sl, [r3]
 8007a26:	f1ba 0f00 	cmp.w	sl, #0
 8007a2a:	d024      	beq.n	8007a76 <__multiply+0xf2>
 8007a2c:	f104 0e14 	add.w	lr, r4, #20
 8007a30:	46a9      	mov	r9, r5
 8007a32:	f04f 0c00 	mov.w	ip, #0
 8007a36:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007a3a:	f8d9 1000 	ldr.w	r1, [r9]
 8007a3e:	fa1f fb82 	uxth.w	fp, r2
 8007a42:	b289      	uxth	r1, r1
 8007a44:	fb0a 110b 	mla	r1, sl, fp, r1
 8007a48:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007a4c:	f8d9 2000 	ldr.w	r2, [r9]
 8007a50:	4461      	add	r1, ip
 8007a52:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007a56:	fb0a c20b 	mla	r2, sl, fp, ip
 8007a5a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007a5e:	b289      	uxth	r1, r1
 8007a60:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007a64:	4577      	cmp	r7, lr
 8007a66:	f849 1b04 	str.w	r1, [r9], #4
 8007a6a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007a6e:	d8e2      	bhi.n	8007a36 <__multiply+0xb2>
 8007a70:	9a01      	ldr	r2, [sp, #4]
 8007a72:	f845 c002 	str.w	ip, [r5, r2]
 8007a76:	9a03      	ldr	r2, [sp, #12]
 8007a78:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007a7c:	3304      	adds	r3, #4
 8007a7e:	f1b9 0f00 	cmp.w	r9, #0
 8007a82:	d020      	beq.n	8007ac6 <__multiply+0x142>
 8007a84:	6829      	ldr	r1, [r5, #0]
 8007a86:	f104 0c14 	add.w	ip, r4, #20
 8007a8a:	46ae      	mov	lr, r5
 8007a8c:	f04f 0a00 	mov.w	sl, #0
 8007a90:	f8bc b000 	ldrh.w	fp, [ip]
 8007a94:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007a98:	fb09 220b 	mla	r2, r9, fp, r2
 8007a9c:	4492      	add	sl, r2
 8007a9e:	b289      	uxth	r1, r1
 8007aa0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007aa4:	f84e 1b04 	str.w	r1, [lr], #4
 8007aa8:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007aac:	f8be 1000 	ldrh.w	r1, [lr]
 8007ab0:	0c12      	lsrs	r2, r2, #16
 8007ab2:	fb09 1102 	mla	r1, r9, r2, r1
 8007ab6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007aba:	4567      	cmp	r7, ip
 8007abc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007ac0:	d8e6      	bhi.n	8007a90 <__multiply+0x10c>
 8007ac2:	9a01      	ldr	r2, [sp, #4]
 8007ac4:	50a9      	str	r1, [r5, r2]
 8007ac6:	3504      	adds	r5, #4
 8007ac8:	e79a      	b.n	8007a00 <__multiply+0x7c>
 8007aca:	3e01      	subs	r6, #1
 8007acc:	e79c      	b.n	8007a08 <__multiply+0x84>
 8007ace:	bf00      	nop
 8007ad0:	0800929b 	.word	0x0800929b
 8007ad4:	080092ac 	.word	0x080092ac

08007ad8 <__pow5mult>:
 8007ad8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007adc:	4615      	mov	r5, r2
 8007ade:	f012 0203 	ands.w	r2, r2, #3
 8007ae2:	4606      	mov	r6, r0
 8007ae4:	460f      	mov	r7, r1
 8007ae6:	d007      	beq.n	8007af8 <__pow5mult+0x20>
 8007ae8:	4c25      	ldr	r4, [pc, #148]	; (8007b80 <__pow5mult+0xa8>)
 8007aea:	3a01      	subs	r2, #1
 8007aec:	2300      	movs	r3, #0
 8007aee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007af2:	f7ff fe9b 	bl	800782c <__multadd>
 8007af6:	4607      	mov	r7, r0
 8007af8:	10ad      	asrs	r5, r5, #2
 8007afa:	d03d      	beq.n	8007b78 <__pow5mult+0xa0>
 8007afc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007afe:	b97c      	cbnz	r4, 8007b20 <__pow5mult+0x48>
 8007b00:	2010      	movs	r0, #16
 8007b02:	f7ff fe1b 	bl	800773c <malloc>
 8007b06:	4602      	mov	r2, r0
 8007b08:	6270      	str	r0, [r6, #36]	; 0x24
 8007b0a:	b928      	cbnz	r0, 8007b18 <__pow5mult+0x40>
 8007b0c:	4b1d      	ldr	r3, [pc, #116]	; (8007b84 <__pow5mult+0xac>)
 8007b0e:	481e      	ldr	r0, [pc, #120]	; (8007b88 <__pow5mult+0xb0>)
 8007b10:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007b14:	f000 fab2 	bl	800807c <__assert_func>
 8007b18:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007b1c:	6004      	str	r4, [r0, #0]
 8007b1e:	60c4      	str	r4, [r0, #12]
 8007b20:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007b24:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007b28:	b94c      	cbnz	r4, 8007b3e <__pow5mult+0x66>
 8007b2a:	f240 2171 	movw	r1, #625	; 0x271
 8007b2e:	4630      	mov	r0, r6
 8007b30:	f7ff ff12 	bl	8007958 <__i2b>
 8007b34:	2300      	movs	r3, #0
 8007b36:	f8c8 0008 	str.w	r0, [r8, #8]
 8007b3a:	4604      	mov	r4, r0
 8007b3c:	6003      	str	r3, [r0, #0]
 8007b3e:	f04f 0900 	mov.w	r9, #0
 8007b42:	07eb      	lsls	r3, r5, #31
 8007b44:	d50a      	bpl.n	8007b5c <__pow5mult+0x84>
 8007b46:	4639      	mov	r1, r7
 8007b48:	4622      	mov	r2, r4
 8007b4a:	4630      	mov	r0, r6
 8007b4c:	f7ff ff1a 	bl	8007984 <__multiply>
 8007b50:	4639      	mov	r1, r7
 8007b52:	4680      	mov	r8, r0
 8007b54:	4630      	mov	r0, r6
 8007b56:	f7ff fe47 	bl	80077e8 <_Bfree>
 8007b5a:	4647      	mov	r7, r8
 8007b5c:	106d      	asrs	r5, r5, #1
 8007b5e:	d00b      	beq.n	8007b78 <__pow5mult+0xa0>
 8007b60:	6820      	ldr	r0, [r4, #0]
 8007b62:	b938      	cbnz	r0, 8007b74 <__pow5mult+0x9c>
 8007b64:	4622      	mov	r2, r4
 8007b66:	4621      	mov	r1, r4
 8007b68:	4630      	mov	r0, r6
 8007b6a:	f7ff ff0b 	bl	8007984 <__multiply>
 8007b6e:	6020      	str	r0, [r4, #0]
 8007b70:	f8c0 9000 	str.w	r9, [r0]
 8007b74:	4604      	mov	r4, r0
 8007b76:	e7e4      	b.n	8007b42 <__pow5mult+0x6a>
 8007b78:	4638      	mov	r0, r7
 8007b7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b7e:	bf00      	nop
 8007b80:	080093f8 	.word	0x080093f8
 8007b84:	08009229 	.word	0x08009229
 8007b88:	080092ac 	.word	0x080092ac

08007b8c <__lshift>:
 8007b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b90:	460c      	mov	r4, r1
 8007b92:	6849      	ldr	r1, [r1, #4]
 8007b94:	6923      	ldr	r3, [r4, #16]
 8007b96:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007b9a:	68a3      	ldr	r3, [r4, #8]
 8007b9c:	4607      	mov	r7, r0
 8007b9e:	4691      	mov	r9, r2
 8007ba0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007ba4:	f108 0601 	add.w	r6, r8, #1
 8007ba8:	42b3      	cmp	r3, r6
 8007baa:	db0b      	blt.n	8007bc4 <__lshift+0x38>
 8007bac:	4638      	mov	r0, r7
 8007bae:	f7ff fddb 	bl	8007768 <_Balloc>
 8007bb2:	4605      	mov	r5, r0
 8007bb4:	b948      	cbnz	r0, 8007bca <__lshift+0x3e>
 8007bb6:	4602      	mov	r2, r0
 8007bb8:	4b2a      	ldr	r3, [pc, #168]	; (8007c64 <__lshift+0xd8>)
 8007bba:	482b      	ldr	r0, [pc, #172]	; (8007c68 <__lshift+0xdc>)
 8007bbc:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007bc0:	f000 fa5c 	bl	800807c <__assert_func>
 8007bc4:	3101      	adds	r1, #1
 8007bc6:	005b      	lsls	r3, r3, #1
 8007bc8:	e7ee      	b.n	8007ba8 <__lshift+0x1c>
 8007bca:	2300      	movs	r3, #0
 8007bcc:	f100 0114 	add.w	r1, r0, #20
 8007bd0:	f100 0210 	add.w	r2, r0, #16
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	4553      	cmp	r3, sl
 8007bd8:	db37      	blt.n	8007c4a <__lshift+0xbe>
 8007bda:	6920      	ldr	r0, [r4, #16]
 8007bdc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007be0:	f104 0314 	add.w	r3, r4, #20
 8007be4:	f019 091f 	ands.w	r9, r9, #31
 8007be8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007bec:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007bf0:	d02f      	beq.n	8007c52 <__lshift+0xc6>
 8007bf2:	f1c9 0e20 	rsb	lr, r9, #32
 8007bf6:	468a      	mov	sl, r1
 8007bf8:	f04f 0c00 	mov.w	ip, #0
 8007bfc:	681a      	ldr	r2, [r3, #0]
 8007bfe:	fa02 f209 	lsl.w	r2, r2, r9
 8007c02:	ea42 020c 	orr.w	r2, r2, ip
 8007c06:	f84a 2b04 	str.w	r2, [sl], #4
 8007c0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c0e:	4298      	cmp	r0, r3
 8007c10:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007c14:	d8f2      	bhi.n	8007bfc <__lshift+0x70>
 8007c16:	1b03      	subs	r3, r0, r4
 8007c18:	3b15      	subs	r3, #21
 8007c1a:	f023 0303 	bic.w	r3, r3, #3
 8007c1e:	3304      	adds	r3, #4
 8007c20:	f104 0215 	add.w	r2, r4, #21
 8007c24:	4290      	cmp	r0, r2
 8007c26:	bf38      	it	cc
 8007c28:	2304      	movcc	r3, #4
 8007c2a:	f841 c003 	str.w	ip, [r1, r3]
 8007c2e:	f1bc 0f00 	cmp.w	ip, #0
 8007c32:	d001      	beq.n	8007c38 <__lshift+0xac>
 8007c34:	f108 0602 	add.w	r6, r8, #2
 8007c38:	3e01      	subs	r6, #1
 8007c3a:	4638      	mov	r0, r7
 8007c3c:	612e      	str	r6, [r5, #16]
 8007c3e:	4621      	mov	r1, r4
 8007c40:	f7ff fdd2 	bl	80077e8 <_Bfree>
 8007c44:	4628      	mov	r0, r5
 8007c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c4a:	f842 0f04 	str.w	r0, [r2, #4]!
 8007c4e:	3301      	adds	r3, #1
 8007c50:	e7c1      	b.n	8007bd6 <__lshift+0x4a>
 8007c52:	3904      	subs	r1, #4
 8007c54:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c58:	f841 2f04 	str.w	r2, [r1, #4]!
 8007c5c:	4298      	cmp	r0, r3
 8007c5e:	d8f9      	bhi.n	8007c54 <__lshift+0xc8>
 8007c60:	e7ea      	b.n	8007c38 <__lshift+0xac>
 8007c62:	bf00      	nop
 8007c64:	0800929b 	.word	0x0800929b
 8007c68:	080092ac 	.word	0x080092ac

08007c6c <__mcmp>:
 8007c6c:	b530      	push	{r4, r5, lr}
 8007c6e:	6902      	ldr	r2, [r0, #16]
 8007c70:	690c      	ldr	r4, [r1, #16]
 8007c72:	1b12      	subs	r2, r2, r4
 8007c74:	d10e      	bne.n	8007c94 <__mcmp+0x28>
 8007c76:	f100 0314 	add.w	r3, r0, #20
 8007c7a:	3114      	adds	r1, #20
 8007c7c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007c80:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007c84:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007c88:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007c8c:	42a5      	cmp	r5, r4
 8007c8e:	d003      	beq.n	8007c98 <__mcmp+0x2c>
 8007c90:	d305      	bcc.n	8007c9e <__mcmp+0x32>
 8007c92:	2201      	movs	r2, #1
 8007c94:	4610      	mov	r0, r2
 8007c96:	bd30      	pop	{r4, r5, pc}
 8007c98:	4283      	cmp	r3, r0
 8007c9a:	d3f3      	bcc.n	8007c84 <__mcmp+0x18>
 8007c9c:	e7fa      	b.n	8007c94 <__mcmp+0x28>
 8007c9e:	f04f 32ff 	mov.w	r2, #4294967295
 8007ca2:	e7f7      	b.n	8007c94 <__mcmp+0x28>

08007ca4 <__mdiff>:
 8007ca4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ca8:	460c      	mov	r4, r1
 8007caa:	4606      	mov	r6, r0
 8007cac:	4611      	mov	r1, r2
 8007cae:	4620      	mov	r0, r4
 8007cb0:	4690      	mov	r8, r2
 8007cb2:	f7ff ffdb 	bl	8007c6c <__mcmp>
 8007cb6:	1e05      	subs	r5, r0, #0
 8007cb8:	d110      	bne.n	8007cdc <__mdiff+0x38>
 8007cba:	4629      	mov	r1, r5
 8007cbc:	4630      	mov	r0, r6
 8007cbe:	f7ff fd53 	bl	8007768 <_Balloc>
 8007cc2:	b930      	cbnz	r0, 8007cd2 <__mdiff+0x2e>
 8007cc4:	4b3a      	ldr	r3, [pc, #232]	; (8007db0 <__mdiff+0x10c>)
 8007cc6:	4602      	mov	r2, r0
 8007cc8:	f240 2132 	movw	r1, #562	; 0x232
 8007ccc:	4839      	ldr	r0, [pc, #228]	; (8007db4 <__mdiff+0x110>)
 8007cce:	f000 f9d5 	bl	800807c <__assert_func>
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007cd8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cdc:	bfa4      	itt	ge
 8007cde:	4643      	movge	r3, r8
 8007ce0:	46a0      	movge	r8, r4
 8007ce2:	4630      	mov	r0, r6
 8007ce4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007ce8:	bfa6      	itte	ge
 8007cea:	461c      	movge	r4, r3
 8007cec:	2500      	movge	r5, #0
 8007cee:	2501      	movlt	r5, #1
 8007cf0:	f7ff fd3a 	bl	8007768 <_Balloc>
 8007cf4:	b920      	cbnz	r0, 8007d00 <__mdiff+0x5c>
 8007cf6:	4b2e      	ldr	r3, [pc, #184]	; (8007db0 <__mdiff+0x10c>)
 8007cf8:	4602      	mov	r2, r0
 8007cfa:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007cfe:	e7e5      	b.n	8007ccc <__mdiff+0x28>
 8007d00:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007d04:	6926      	ldr	r6, [r4, #16]
 8007d06:	60c5      	str	r5, [r0, #12]
 8007d08:	f104 0914 	add.w	r9, r4, #20
 8007d0c:	f108 0514 	add.w	r5, r8, #20
 8007d10:	f100 0e14 	add.w	lr, r0, #20
 8007d14:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007d18:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007d1c:	f108 0210 	add.w	r2, r8, #16
 8007d20:	46f2      	mov	sl, lr
 8007d22:	2100      	movs	r1, #0
 8007d24:	f859 3b04 	ldr.w	r3, [r9], #4
 8007d28:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007d2c:	fa1f f883 	uxth.w	r8, r3
 8007d30:	fa11 f18b 	uxtah	r1, r1, fp
 8007d34:	0c1b      	lsrs	r3, r3, #16
 8007d36:	eba1 0808 	sub.w	r8, r1, r8
 8007d3a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007d3e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007d42:	fa1f f888 	uxth.w	r8, r8
 8007d46:	1419      	asrs	r1, r3, #16
 8007d48:	454e      	cmp	r6, r9
 8007d4a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007d4e:	f84a 3b04 	str.w	r3, [sl], #4
 8007d52:	d8e7      	bhi.n	8007d24 <__mdiff+0x80>
 8007d54:	1b33      	subs	r3, r6, r4
 8007d56:	3b15      	subs	r3, #21
 8007d58:	f023 0303 	bic.w	r3, r3, #3
 8007d5c:	3304      	adds	r3, #4
 8007d5e:	3415      	adds	r4, #21
 8007d60:	42a6      	cmp	r6, r4
 8007d62:	bf38      	it	cc
 8007d64:	2304      	movcc	r3, #4
 8007d66:	441d      	add	r5, r3
 8007d68:	4473      	add	r3, lr
 8007d6a:	469e      	mov	lr, r3
 8007d6c:	462e      	mov	r6, r5
 8007d6e:	4566      	cmp	r6, ip
 8007d70:	d30e      	bcc.n	8007d90 <__mdiff+0xec>
 8007d72:	f10c 0203 	add.w	r2, ip, #3
 8007d76:	1b52      	subs	r2, r2, r5
 8007d78:	f022 0203 	bic.w	r2, r2, #3
 8007d7c:	3d03      	subs	r5, #3
 8007d7e:	45ac      	cmp	ip, r5
 8007d80:	bf38      	it	cc
 8007d82:	2200      	movcc	r2, #0
 8007d84:	441a      	add	r2, r3
 8007d86:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007d8a:	b17b      	cbz	r3, 8007dac <__mdiff+0x108>
 8007d8c:	6107      	str	r7, [r0, #16]
 8007d8e:	e7a3      	b.n	8007cd8 <__mdiff+0x34>
 8007d90:	f856 8b04 	ldr.w	r8, [r6], #4
 8007d94:	fa11 f288 	uxtah	r2, r1, r8
 8007d98:	1414      	asrs	r4, r2, #16
 8007d9a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007d9e:	b292      	uxth	r2, r2
 8007da0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007da4:	f84e 2b04 	str.w	r2, [lr], #4
 8007da8:	1421      	asrs	r1, r4, #16
 8007daa:	e7e0      	b.n	8007d6e <__mdiff+0xca>
 8007dac:	3f01      	subs	r7, #1
 8007dae:	e7ea      	b.n	8007d86 <__mdiff+0xe2>
 8007db0:	0800929b 	.word	0x0800929b
 8007db4:	080092ac 	.word	0x080092ac

08007db8 <__d2b>:
 8007db8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007dbc:	4689      	mov	r9, r1
 8007dbe:	2101      	movs	r1, #1
 8007dc0:	ec57 6b10 	vmov	r6, r7, d0
 8007dc4:	4690      	mov	r8, r2
 8007dc6:	f7ff fccf 	bl	8007768 <_Balloc>
 8007dca:	4604      	mov	r4, r0
 8007dcc:	b930      	cbnz	r0, 8007ddc <__d2b+0x24>
 8007dce:	4602      	mov	r2, r0
 8007dd0:	4b25      	ldr	r3, [pc, #148]	; (8007e68 <__d2b+0xb0>)
 8007dd2:	4826      	ldr	r0, [pc, #152]	; (8007e6c <__d2b+0xb4>)
 8007dd4:	f240 310a 	movw	r1, #778	; 0x30a
 8007dd8:	f000 f950 	bl	800807c <__assert_func>
 8007ddc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007de0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007de4:	bb35      	cbnz	r5, 8007e34 <__d2b+0x7c>
 8007de6:	2e00      	cmp	r6, #0
 8007de8:	9301      	str	r3, [sp, #4]
 8007dea:	d028      	beq.n	8007e3e <__d2b+0x86>
 8007dec:	4668      	mov	r0, sp
 8007dee:	9600      	str	r6, [sp, #0]
 8007df0:	f7ff fd82 	bl	80078f8 <__lo0bits>
 8007df4:	9900      	ldr	r1, [sp, #0]
 8007df6:	b300      	cbz	r0, 8007e3a <__d2b+0x82>
 8007df8:	9a01      	ldr	r2, [sp, #4]
 8007dfa:	f1c0 0320 	rsb	r3, r0, #32
 8007dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8007e02:	430b      	orrs	r3, r1
 8007e04:	40c2      	lsrs	r2, r0
 8007e06:	6163      	str	r3, [r4, #20]
 8007e08:	9201      	str	r2, [sp, #4]
 8007e0a:	9b01      	ldr	r3, [sp, #4]
 8007e0c:	61a3      	str	r3, [r4, #24]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	bf14      	ite	ne
 8007e12:	2202      	movne	r2, #2
 8007e14:	2201      	moveq	r2, #1
 8007e16:	6122      	str	r2, [r4, #16]
 8007e18:	b1d5      	cbz	r5, 8007e50 <__d2b+0x98>
 8007e1a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007e1e:	4405      	add	r5, r0
 8007e20:	f8c9 5000 	str.w	r5, [r9]
 8007e24:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007e28:	f8c8 0000 	str.w	r0, [r8]
 8007e2c:	4620      	mov	r0, r4
 8007e2e:	b003      	add	sp, #12
 8007e30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007e34:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007e38:	e7d5      	b.n	8007de6 <__d2b+0x2e>
 8007e3a:	6161      	str	r1, [r4, #20]
 8007e3c:	e7e5      	b.n	8007e0a <__d2b+0x52>
 8007e3e:	a801      	add	r0, sp, #4
 8007e40:	f7ff fd5a 	bl	80078f8 <__lo0bits>
 8007e44:	9b01      	ldr	r3, [sp, #4]
 8007e46:	6163      	str	r3, [r4, #20]
 8007e48:	2201      	movs	r2, #1
 8007e4a:	6122      	str	r2, [r4, #16]
 8007e4c:	3020      	adds	r0, #32
 8007e4e:	e7e3      	b.n	8007e18 <__d2b+0x60>
 8007e50:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007e54:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007e58:	f8c9 0000 	str.w	r0, [r9]
 8007e5c:	6918      	ldr	r0, [r3, #16]
 8007e5e:	f7ff fd2b 	bl	80078b8 <__hi0bits>
 8007e62:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007e66:	e7df      	b.n	8007e28 <__d2b+0x70>
 8007e68:	0800929b 	.word	0x0800929b
 8007e6c:	080092ac 	.word	0x080092ac

08007e70 <_calloc_r>:
 8007e70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007e72:	fba1 2402 	umull	r2, r4, r1, r2
 8007e76:	b94c      	cbnz	r4, 8007e8c <_calloc_r+0x1c>
 8007e78:	4611      	mov	r1, r2
 8007e7a:	9201      	str	r2, [sp, #4]
 8007e7c:	f000 f87a 	bl	8007f74 <_malloc_r>
 8007e80:	9a01      	ldr	r2, [sp, #4]
 8007e82:	4605      	mov	r5, r0
 8007e84:	b930      	cbnz	r0, 8007e94 <_calloc_r+0x24>
 8007e86:	4628      	mov	r0, r5
 8007e88:	b003      	add	sp, #12
 8007e8a:	bd30      	pop	{r4, r5, pc}
 8007e8c:	220c      	movs	r2, #12
 8007e8e:	6002      	str	r2, [r0, #0]
 8007e90:	2500      	movs	r5, #0
 8007e92:	e7f8      	b.n	8007e86 <_calloc_r+0x16>
 8007e94:	4621      	mov	r1, r4
 8007e96:	f7fe f95f 	bl	8006158 <memset>
 8007e9a:	e7f4      	b.n	8007e86 <_calloc_r+0x16>

08007e9c <_free_r>:
 8007e9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007e9e:	2900      	cmp	r1, #0
 8007ea0:	d044      	beq.n	8007f2c <_free_r+0x90>
 8007ea2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ea6:	9001      	str	r0, [sp, #4]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	f1a1 0404 	sub.w	r4, r1, #4
 8007eae:	bfb8      	it	lt
 8007eb0:	18e4      	addlt	r4, r4, r3
 8007eb2:	f000 f925 	bl	8008100 <__malloc_lock>
 8007eb6:	4a1e      	ldr	r2, [pc, #120]	; (8007f30 <_free_r+0x94>)
 8007eb8:	9801      	ldr	r0, [sp, #4]
 8007eba:	6813      	ldr	r3, [r2, #0]
 8007ebc:	b933      	cbnz	r3, 8007ecc <_free_r+0x30>
 8007ebe:	6063      	str	r3, [r4, #4]
 8007ec0:	6014      	str	r4, [r2, #0]
 8007ec2:	b003      	add	sp, #12
 8007ec4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007ec8:	f000 b920 	b.w	800810c <__malloc_unlock>
 8007ecc:	42a3      	cmp	r3, r4
 8007ece:	d908      	bls.n	8007ee2 <_free_r+0x46>
 8007ed0:	6825      	ldr	r5, [r4, #0]
 8007ed2:	1961      	adds	r1, r4, r5
 8007ed4:	428b      	cmp	r3, r1
 8007ed6:	bf01      	itttt	eq
 8007ed8:	6819      	ldreq	r1, [r3, #0]
 8007eda:	685b      	ldreq	r3, [r3, #4]
 8007edc:	1949      	addeq	r1, r1, r5
 8007ede:	6021      	streq	r1, [r4, #0]
 8007ee0:	e7ed      	b.n	8007ebe <_free_r+0x22>
 8007ee2:	461a      	mov	r2, r3
 8007ee4:	685b      	ldr	r3, [r3, #4]
 8007ee6:	b10b      	cbz	r3, 8007eec <_free_r+0x50>
 8007ee8:	42a3      	cmp	r3, r4
 8007eea:	d9fa      	bls.n	8007ee2 <_free_r+0x46>
 8007eec:	6811      	ldr	r1, [r2, #0]
 8007eee:	1855      	adds	r5, r2, r1
 8007ef0:	42a5      	cmp	r5, r4
 8007ef2:	d10b      	bne.n	8007f0c <_free_r+0x70>
 8007ef4:	6824      	ldr	r4, [r4, #0]
 8007ef6:	4421      	add	r1, r4
 8007ef8:	1854      	adds	r4, r2, r1
 8007efa:	42a3      	cmp	r3, r4
 8007efc:	6011      	str	r1, [r2, #0]
 8007efe:	d1e0      	bne.n	8007ec2 <_free_r+0x26>
 8007f00:	681c      	ldr	r4, [r3, #0]
 8007f02:	685b      	ldr	r3, [r3, #4]
 8007f04:	6053      	str	r3, [r2, #4]
 8007f06:	4421      	add	r1, r4
 8007f08:	6011      	str	r1, [r2, #0]
 8007f0a:	e7da      	b.n	8007ec2 <_free_r+0x26>
 8007f0c:	d902      	bls.n	8007f14 <_free_r+0x78>
 8007f0e:	230c      	movs	r3, #12
 8007f10:	6003      	str	r3, [r0, #0]
 8007f12:	e7d6      	b.n	8007ec2 <_free_r+0x26>
 8007f14:	6825      	ldr	r5, [r4, #0]
 8007f16:	1961      	adds	r1, r4, r5
 8007f18:	428b      	cmp	r3, r1
 8007f1a:	bf04      	itt	eq
 8007f1c:	6819      	ldreq	r1, [r3, #0]
 8007f1e:	685b      	ldreq	r3, [r3, #4]
 8007f20:	6063      	str	r3, [r4, #4]
 8007f22:	bf04      	itt	eq
 8007f24:	1949      	addeq	r1, r1, r5
 8007f26:	6021      	streq	r1, [r4, #0]
 8007f28:	6054      	str	r4, [r2, #4]
 8007f2a:	e7ca      	b.n	8007ec2 <_free_r+0x26>
 8007f2c:	b003      	add	sp, #12
 8007f2e:	bd30      	pop	{r4, r5, pc}
 8007f30:	20000308 	.word	0x20000308

08007f34 <sbrk_aligned>:
 8007f34:	b570      	push	{r4, r5, r6, lr}
 8007f36:	4e0e      	ldr	r6, [pc, #56]	; (8007f70 <sbrk_aligned+0x3c>)
 8007f38:	460c      	mov	r4, r1
 8007f3a:	6831      	ldr	r1, [r6, #0]
 8007f3c:	4605      	mov	r5, r0
 8007f3e:	b911      	cbnz	r1, 8007f46 <sbrk_aligned+0x12>
 8007f40:	f000 f88c 	bl	800805c <_sbrk_r>
 8007f44:	6030      	str	r0, [r6, #0]
 8007f46:	4621      	mov	r1, r4
 8007f48:	4628      	mov	r0, r5
 8007f4a:	f000 f887 	bl	800805c <_sbrk_r>
 8007f4e:	1c43      	adds	r3, r0, #1
 8007f50:	d00a      	beq.n	8007f68 <sbrk_aligned+0x34>
 8007f52:	1cc4      	adds	r4, r0, #3
 8007f54:	f024 0403 	bic.w	r4, r4, #3
 8007f58:	42a0      	cmp	r0, r4
 8007f5a:	d007      	beq.n	8007f6c <sbrk_aligned+0x38>
 8007f5c:	1a21      	subs	r1, r4, r0
 8007f5e:	4628      	mov	r0, r5
 8007f60:	f000 f87c 	bl	800805c <_sbrk_r>
 8007f64:	3001      	adds	r0, #1
 8007f66:	d101      	bne.n	8007f6c <sbrk_aligned+0x38>
 8007f68:	f04f 34ff 	mov.w	r4, #4294967295
 8007f6c:	4620      	mov	r0, r4
 8007f6e:	bd70      	pop	{r4, r5, r6, pc}
 8007f70:	2000030c 	.word	0x2000030c

08007f74 <_malloc_r>:
 8007f74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f78:	1ccd      	adds	r5, r1, #3
 8007f7a:	f025 0503 	bic.w	r5, r5, #3
 8007f7e:	3508      	adds	r5, #8
 8007f80:	2d0c      	cmp	r5, #12
 8007f82:	bf38      	it	cc
 8007f84:	250c      	movcc	r5, #12
 8007f86:	2d00      	cmp	r5, #0
 8007f88:	4607      	mov	r7, r0
 8007f8a:	db01      	blt.n	8007f90 <_malloc_r+0x1c>
 8007f8c:	42a9      	cmp	r1, r5
 8007f8e:	d905      	bls.n	8007f9c <_malloc_r+0x28>
 8007f90:	230c      	movs	r3, #12
 8007f92:	603b      	str	r3, [r7, #0]
 8007f94:	2600      	movs	r6, #0
 8007f96:	4630      	mov	r0, r6
 8007f98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f9c:	4e2e      	ldr	r6, [pc, #184]	; (8008058 <_malloc_r+0xe4>)
 8007f9e:	f000 f8af 	bl	8008100 <__malloc_lock>
 8007fa2:	6833      	ldr	r3, [r6, #0]
 8007fa4:	461c      	mov	r4, r3
 8007fa6:	bb34      	cbnz	r4, 8007ff6 <_malloc_r+0x82>
 8007fa8:	4629      	mov	r1, r5
 8007faa:	4638      	mov	r0, r7
 8007fac:	f7ff ffc2 	bl	8007f34 <sbrk_aligned>
 8007fb0:	1c43      	adds	r3, r0, #1
 8007fb2:	4604      	mov	r4, r0
 8007fb4:	d14d      	bne.n	8008052 <_malloc_r+0xde>
 8007fb6:	6834      	ldr	r4, [r6, #0]
 8007fb8:	4626      	mov	r6, r4
 8007fba:	2e00      	cmp	r6, #0
 8007fbc:	d140      	bne.n	8008040 <_malloc_r+0xcc>
 8007fbe:	6823      	ldr	r3, [r4, #0]
 8007fc0:	4631      	mov	r1, r6
 8007fc2:	4638      	mov	r0, r7
 8007fc4:	eb04 0803 	add.w	r8, r4, r3
 8007fc8:	f000 f848 	bl	800805c <_sbrk_r>
 8007fcc:	4580      	cmp	r8, r0
 8007fce:	d13a      	bne.n	8008046 <_malloc_r+0xd2>
 8007fd0:	6821      	ldr	r1, [r4, #0]
 8007fd2:	3503      	adds	r5, #3
 8007fd4:	1a6d      	subs	r5, r5, r1
 8007fd6:	f025 0503 	bic.w	r5, r5, #3
 8007fda:	3508      	adds	r5, #8
 8007fdc:	2d0c      	cmp	r5, #12
 8007fde:	bf38      	it	cc
 8007fe0:	250c      	movcc	r5, #12
 8007fe2:	4629      	mov	r1, r5
 8007fe4:	4638      	mov	r0, r7
 8007fe6:	f7ff ffa5 	bl	8007f34 <sbrk_aligned>
 8007fea:	3001      	adds	r0, #1
 8007fec:	d02b      	beq.n	8008046 <_malloc_r+0xd2>
 8007fee:	6823      	ldr	r3, [r4, #0]
 8007ff0:	442b      	add	r3, r5
 8007ff2:	6023      	str	r3, [r4, #0]
 8007ff4:	e00e      	b.n	8008014 <_malloc_r+0xa0>
 8007ff6:	6822      	ldr	r2, [r4, #0]
 8007ff8:	1b52      	subs	r2, r2, r5
 8007ffa:	d41e      	bmi.n	800803a <_malloc_r+0xc6>
 8007ffc:	2a0b      	cmp	r2, #11
 8007ffe:	d916      	bls.n	800802e <_malloc_r+0xba>
 8008000:	1961      	adds	r1, r4, r5
 8008002:	42a3      	cmp	r3, r4
 8008004:	6025      	str	r5, [r4, #0]
 8008006:	bf18      	it	ne
 8008008:	6059      	strne	r1, [r3, #4]
 800800a:	6863      	ldr	r3, [r4, #4]
 800800c:	bf08      	it	eq
 800800e:	6031      	streq	r1, [r6, #0]
 8008010:	5162      	str	r2, [r4, r5]
 8008012:	604b      	str	r3, [r1, #4]
 8008014:	4638      	mov	r0, r7
 8008016:	f104 060b 	add.w	r6, r4, #11
 800801a:	f000 f877 	bl	800810c <__malloc_unlock>
 800801e:	f026 0607 	bic.w	r6, r6, #7
 8008022:	1d23      	adds	r3, r4, #4
 8008024:	1af2      	subs	r2, r6, r3
 8008026:	d0b6      	beq.n	8007f96 <_malloc_r+0x22>
 8008028:	1b9b      	subs	r3, r3, r6
 800802a:	50a3      	str	r3, [r4, r2]
 800802c:	e7b3      	b.n	8007f96 <_malloc_r+0x22>
 800802e:	6862      	ldr	r2, [r4, #4]
 8008030:	42a3      	cmp	r3, r4
 8008032:	bf0c      	ite	eq
 8008034:	6032      	streq	r2, [r6, #0]
 8008036:	605a      	strne	r2, [r3, #4]
 8008038:	e7ec      	b.n	8008014 <_malloc_r+0xa0>
 800803a:	4623      	mov	r3, r4
 800803c:	6864      	ldr	r4, [r4, #4]
 800803e:	e7b2      	b.n	8007fa6 <_malloc_r+0x32>
 8008040:	4634      	mov	r4, r6
 8008042:	6876      	ldr	r6, [r6, #4]
 8008044:	e7b9      	b.n	8007fba <_malloc_r+0x46>
 8008046:	230c      	movs	r3, #12
 8008048:	603b      	str	r3, [r7, #0]
 800804a:	4638      	mov	r0, r7
 800804c:	f000 f85e 	bl	800810c <__malloc_unlock>
 8008050:	e7a1      	b.n	8007f96 <_malloc_r+0x22>
 8008052:	6025      	str	r5, [r4, #0]
 8008054:	e7de      	b.n	8008014 <_malloc_r+0xa0>
 8008056:	bf00      	nop
 8008058:	20000308 	.word	0x20000308

0800805c <_sbrk_r>:
 800805c:	b538      	push	{r3, r4, r5, lr}
 800805e:	4d06      	ldr	r5, [pc, #24]	; (8008078 <_sbrk_r+0x1c>)
 8008060:	2300      	movs	r3, #0
 8008062:	4604      	mov	r4, r0
 8008064:	4608      	mov	r0, r1
 8008066:	602b      	str	r3, [r5, #0]
 8008068:	f7f9 fbc0 	bl	80017ec <_sbrk>
 800806c:	1c43      	adds	r3, r0, #1
 800806e:	d102      	bne.n	8008076 <_sbrk_r+0x1a>
 8008070:	682b      	ldr	r3, [r5, #0]
 8008072:	b103      	cbz	r3, 8008076 <_sbrk_r+0x1a>
 8008074:	6023      	str	r3, [r4, #0]
 8008076:	bd38      	pop	{r3, r4, r5, pc}
 8008078:	20000310 	.word	0x20000310

0800807c <__assert_func>:
 800807c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800807e:	4614      	mov	r4, r2
 8008080:	461a      	mov	r2, r3
 8008082:	4b09      	ldr	r3, [pc, #36]	; (80080a8 <__assert_func+0x2c>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	4605      	mov	r5, r0
 8008088:	68d8      	ldr	r0, [r3, #12]
 800808a:	b14c      	cbz	r4, 80080a0 <__assert_func+0x24>
 800808c:	4b07      	ldr	r3, [pc, #28]	; (80080ac <__assert_func+0x30>)
 800808e:	9100      	str	r1, [sp, #0]
 8008090:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008094:	4906      	ldr	r1, [pc, #24]	; (80080b0 <__assert_func+0x34>)
 8008096:	462b      	mov	r3, r5
 8008098:	f000 f80e 	bl	80080b8 <fiprintf>
 800809c:	f000 fa64 	bl	8008568 <abort>
 80080a0:	4b04      	ldr	r3, [pc, #16]	; (80080b4 <__assert_func+0x38>)
 80080a2:	461c      	mov	r4, r3
 80080a4:	e7f3      	b.n	800808e <__assert_func+0x12>
 80080a6:	bf00      	nop
 80080a8:	20000014 	.word	0x20000014
 80080ac:	08009404 	.word	0x08009404
 80080b0:	08009411 	.word	0x08009411
 80080b4:	0800943f 	.word	0x0800943f

080080b8 <fiprintf>:
 80080b8:	b40e      	push	{r1, r2, r3}
 80080ba:	b503      	push	{r0, r1, lr}
 80080bc:	4601      	mov	r1, r0
 80080be:	ab03      	add	r3, sp, #12
 80080c0:	4805      	ldr	r0, [pc, #20]	; (80080d8 <fiprintf+0x20>)
 80080c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80080c6:	6800      	ldr	r0, [r0, #0]
 80080c8:	9301      	str	r3, [sp, #4]
 80080ca:	f000 f84f 	bl	800816c <_vfiprintf_r>
 80080ce:	b002      	add	sp, #8
 80080d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80080d4:	b003      	add	sp, #12
 80080d6:	4770      	bx	lr
 80080d8:	20000014 	.word	0x20000014

080080dc <__ascii_mbtowc>:
 80080dc:	b082      	sub	sp, #8
 80080de:	b901      	cbnz	r1, 80080e2 <__ascii_mbtowc+0x6>
 80080e0:	a901      	add	r1, sp, #4
 80080e2:	b142      	cbz	r2, 80080f6 <__ascii_mbtowc+0x1a>
 80080e4:	b14b      	cbz	r3, 80080fa <__ascii_mbtowc+0x1e>
 80080e6:	7813      	ldrb	r3, [r2, #0]
 80080e8:	600b      	str	r3, [r1, #0]
 80080ea:	7812      	ldrb	r2, [r2, #0]
 80080ec:	1e10      	subs	r0, r2, #0
 80080ee:	bf18      	it	ne
 80080f0:	2001      	movne	r0, #1
 80080f2:	b002      	add	sp, #8
 80080f4:	4770      	bx	lr
 80080f6:	4610      	mov	r0, r2
 80080f8:	e7fb      	b.n	80080f2 <__ascii_mbtowc+0x16>
 80080fa:	f06f 0001 	mvn.w	r0, #1
 80080fe:	e7f8      	b.n	80080f2 <__ascii_mbtowc+0x16>

08008100 <__malloc_lock>:
 8008100:	4801      	ldr	r0, [pc, #4]	; (8008108 <__malloc_lock+0x8>)
 8008102:	f000 bbf1 	b.w	80088e8 <__retarget_lock_acquire_recursive>
 8008106:	bf00      	nop
 8008108:	20000314 	.word	0x20000314

0800810c <__malloc_unlock>:
 800810c:	4801      	ldr	r0, [pc, #4]	; (8008114 <__malloc_unlock+0x8>)
 800810e:	f000 bbec 	b.w	80088ea <__retarget_lock_release_recursive>
 8008112:	bf00      	nop
 8008114:	20000314 	.word	0x20000314

08008118 <__sfputc_r>:
 8008118:	6893      	ldr	r3, [r2, #8]
 800811a:	3b01      	subs	r3, #1
 800811c:	2b00      	cmp	r3, #0
 800811e:	b410      	push	{r4}
 8008120:	6093      	str	r3, [r2, #8]
 8008122:	da08      	bge.n	8008136 <__sfputc_r+0x1e>
 8008124:	6994      	ldr	r4, [r2, #24]
 8008126:	42a3      	cmp	r3, r4
 8008128:	db01      	blt.n	800812e <__sfputc_r+0x16>
 800812a:	290a      	cmp	r1, #10
 800812c:	d103      	bne.n	8008136 <__sfputc_r+0x1e>
 800812e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008132:	f000 b94b 	b.w	80083cc <__swbuf_r>
 8008136:	6813      	ldr	r3, [r2, #0]
 8008138:	1c58      	adds	r0, r3, #1
 800813a:	6010      	str	r0, [r2, #0]
 800813c:	7019      	strb	r1, [r3, #0]
 800813e:	4608      	mov	r0, r1
 8008140:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008144:	4770      	bx	lr

08008146 <__sfputs_r>:
 8008146:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008148:	4606      	mov	r6, r0
 800814a:	460f      	mov	r7, r1
 800814c:	4614      	mov	r4, r2
 800814e:	18d5      	adds	r5, r2, r3
 8008150:	42ac      	cmp	r4, r5
 8008152:	d101      	bne.n	8008158 <__sfputs_r+0x12>
 8008154:	2000      	movs	r0, #0
 8008156:	e007      	b.n	8008168 <__sfputs_r+0x22>
 8008158:	f814 1b01 	ldrb.w	r1, [r4], #1
 800815c:	463a      	mov	r2, r7
 800815e:	4630      	mov	r0, r6
 8008160:	f7ff ffda 	bl	8008118 <__sfputc_r>
 8008164:	1c43      	adds	r3, r0, #1
 8008166:	d1f3      	bne.n	8008150 <__sfputs_r+0xa>
 8008168:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800816c <_vfiprintf_r>:
 800816c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008170:	460d      	mov	r5, r1
 8008172:	b09d      	sub	sp, #116	; 0x74
 8008174:	4614      	mov	r4, r2
 8008176:	4698      	mov	r8, r3
 8008178:	4606      	mov	r6, r0
 800817a:	b118      	cbz	r0, 8008184 <_vfiprintf_r+0x18>
 800817c:	6983      	ldr	r3, [r0, #24]
 800817e:	b90b      	cbnz	r3, 8008184 <_vfiprintf_r+0x18>
 8008180:	f000 fb14 	bl	80087ac <__sinit>
 8008184:	4b89      	ldr	r3, [pc, #548]	; (80083ac <_vfiprintf_r+0x240>)
 8008186:	429d      	cmp	r5, r3
 8008188:	d11b      	bne.n	80081c2 <_vfiprintf_r+0x56>
 800818a:	6875      	ldr	r5, [r6, #4]
 800818c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800818e:	07d9      	lsls	r1, r3, #31
 8008190:	d405      	bmi.n	800819e <_vfiprintf_r+0x32>
 8008192:	89ab      	ldrh	r3, [r5, #12]
 8008194:	059a      	lsls	r2, r3, #22
 8008196:	d402      	bmi.n	800819e <_vfiprintf_r+0x32>
 8008198:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800819a:	f000 fba5 	bl	80088e8 <__retarget_lock_acquire_recursive>
 800819e:	89ab      	ldrh	r3, [r5, #12]
 80081a0:	071b      	lsls	r3, r3, #28
 80081a2:	d501      	bpl.n	80081a8 <_vfiprintf_r+0x3c>
 80081a4:	692b      	ldr	r3, [r5, #16]
 80081a6:	b9eb      	cbnz	r3, 80081e4 <_vfiprintf_r+0x78>
 80081a8:	4629      	mov	r1, r5
 80081aa:	4630      	mov	r0, r6
 80081ac:	f000 f96e 	bl	800848c <__swsetup_r>
 80081b0:	b1c0      	cbz	r0, 80081e4 <_vfiprintf_r+0x78>
 80081b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80081b4:	07dc      	lsls	r4, r3, #31
 80081b6:	d50e      	bpl.n	80081d6 <_vfiprintf_r+0x6a>
 80081b8:	f04f 30ff 	mov.w	r0, #4294967295
 80081bc:	b01d      	add	sp, #116	; 0x74
 80081be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081c2:	4b7b      	ldr	r3, [pc, #492]	; (80083b0 <_vfiprintf_r+0x244>)
 80081c4:	429d      	cmp	r5, r3
 80081c6:	d101      	bne.n	80081cc <_vfiprintf_r+0x60>
 80081c8:	68b5      	ldr	r5, [r6, #8]
 80081ca:	e7df      	b.n	800818c <_vfiprintf_r+0x20>
 80081cc:	4b79      	ldr	r3, [pc, #484]	; (80083b4 <_vfiprintf_r+0x248>)
 80081ce:	429d      	cmp	r5, r3
 80081d0:	bf08      	it	eq
 80081d2:	68f5      	ldreq	r5, [r6, #12]
 80081d4:	e7da      	b.n	800818c <_vfiprintf_r+0x20>
 80081d6:	89ab      	ldrh	r3, [r5, #12]
 80081d8:	0598      	lsls	r0, r3, #22
 80081da:	d4ed      	bmi.n	80081b8 <_vfiprintf_r+0x4c>
 80081dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80081de:	f000 fb84 	bl	80088ea <__retarget_lock_release_recursive>
 80081e2:	e7e9      	b.n	80081b8 <_vfiprintf_r+0x4c>
 80081e4:	2300      	movs	r3, #0
 80081e6:	9309      	str	r3, [sp, #36]	; 0x24
 80081e8:	2320      	movs	r3, #32
 80081ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80081ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80081f2:	2330      	movs	r3, #48	; 0x30
 80081f4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80083b8 <_vfiprintf_r+0x24c>
 80081f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80081fc:	f04f 0901 	mov.w	r9, #1
 8008200:	4623      	mov	r3, r4
 8008202:	469a      	mov	sl, r3
 8008204:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008208:	b10a      	cbz	r2, 800820e <_vfiprintf_r+0xa2>
 800820a:	2a25      	cmp	r2, #37	; 0x25
 800820c:	d1f9      	bne.n	8008202 <_vfiprintf_r+0x96>
 800820e:	ebba 0b04 	subs.w	fp, sl, r4
 8008212:	d00b      	beq.n	800822c <_vfiprintf_r+0xc0>
 8008214:	465b      	mov	r3, fp
 8008216:	4622      	mov	r2, r4
 8008218:	4629      	mov	r1, r5
 800821a:	4630      	mov	r0, r6
 800821c:	f7ff ff93 	bl	8008146 <__sfputs_r>
 8008220:	3001      	adds	r0, #1
 8008222:	f000 80aa 	beq.w	800837a <_vfiprintf_r+0x20e>
 8008226:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008228:	445a      	add	r2, fp
 800822a:	9209      	str	r2, [sp, #36]	; 0x24
 800822c:	f89a 3000 	ldrb.w	r3, [sl]
 8008230:	2b00      	cmp	r3, #0
 8008232:	f000 80a2 	beq.w	800837a <_vfiprintf_r+0x20e>
 8008236:	2300      	movs	r3, #0
 8008238:	f04f 32ff 	mov.w	r2, #4294967295
 800823c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008240:	f10a 0a01 	add.w	sl, sl, #1
 8008244:	9304      	str	r3, [sp, #16]
 8008246:	9307      	str	r3, [sp, #28]
 8008248:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800824c:	931a      	str	r3, [sp, #104]	; 0x68
 800824e:	4654      	mov	r4, sl
 8008250:	2205      	movs	r2, #5
 8008252:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008256:	4858      	ldr	r0, [pc, #352]	; (80083b8 <_vfiprintf_r+0x24c>)
 8008258:	f7f7 ffca 	bl	80001f0 <memchr>
 800825c:	9a04      	ldr	r2, [sp, #16]
 800825e:	b9d8      	cbnz	r0, 8008298 <_vfiprintf_r+0x12c>
 8008260:	06d1      	lsls	r1, r2, #27
 8008262:	bf44      	itt	mi
 8008264:	2320      	movmi	r3, #32
 8008266:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800826a:	0713      	lsls	r3, r2, #28
 800826c:	bf44      	itt	mi
 800826e:	232b      	movmi	r3, #43	; 0x2b
 8008270:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008274:	f89a 3000 	ldrb.w	r3, [sl]
 8008278:	2b2a      	cmp	r3, #42	; 0x2a
 800827a:	d015      	beq.n	80082a8 <_vfiprintf_r+0x13c>
 800827c:	9a07      	ldr	r2, [sp, #28]
 800827e:	4654      	mov	r4, sl
 8008280:	2000      	movs	r0, #0
 8008282:	f04f 0c0a 	mov.w	ip, #10
 8008286:	4621      	mov	r1, r4
 8008288:	f811 3b01 	ldrb.w	r3, [r1], #1
 800828c:	3b30      	subs	r3, #48	; 0x30
 800828e:	2b09      	cmp	r3, #9
 8008290:	d94e      	bls.n	8008330 <_vfiprintf_r+0x1c4>
 8008292:	b1b0      	cbz	r0, 80082c2 <_vfiprintf_r+0x156>
 8008294:	9207      	str	r2, [sp, #28]
 8008296:	e014      	b.n	80082c2 <_vfiprintf_r+0x156>
 8008298:	eba0 0308 	sub.w	r3, r0, r8
 800829c:	fa09 f303 	lsl.w	r3, r9, r3
 80082a0:	4313      	orrs	r3, r2
 80082a2:	9304      	str	r3, [sp, #16]
 80082a4:	46a2      	mov	sl, r4
 80082a6:	e7d2      	b.n	800824e <_vfiprintf_r+0xe2>
 80082a8:	9b03      	ldr	r3, [sp, #12]
 80082aa:	1d19      	adds	r1, r3, #4
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	9103      	str	r1, [sp, #12]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	bfbb      	ittet	lt
 80082b4:	425b      	neglt	r3, r3
 80082b6:	f042 0202 	orrlt.w	r2, r2, #2
 80082ba:	9307      	strge	r3, [sp, #28]
 80082bc:	9307      	strlt	r3, [sp, #28]
 80082be:	bfb8      	it	lt
 80082c0:	9204      	strlt	r2, [sp, #16]
 80082c2:	7823      	ldrb	r3, [r4, #0]
 80082c4:	2b2e      	cmp	r3, #46	; 0x2e
 80082c6:	d10c      	bne.n	80082e2 <_vfiprintf_r+0x176>
 80082c8:	7863      	ldrb	r3, [r4, #1]
 80082ca:	2b2a      	cmp	r3, #42	; 0x2a
 80082cc:	d135      	bne.n	800833a <_vfiprintf_r+0x1ce>
 80082ce:	9b03      	ldr	r3, [sp, #12]
 80082d0:	1d1a      	adds	r2, r3, #4
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	9203      	str	r2, [sp, #12]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	bfb8      	it	lt
 80082da:	f04f 33ff 	movlt.w	r3, #4294967295
 80082de:	3402      	adds	r4, #2
 80082e0:	9305      	str	r3, [sp, #20]
 80082e2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80083c8 <_vfiprintf_r+0x25c>
 80082e6:	7821      	ldrb	r1, [r4, #0]
 80082e8:	2203      	movs	r2, #3
 80082ea:	4650      	mov	r0, sl
 80082ec:	f7f7 ff80 	bl	80001f0 <memchr>
 80082f0:	b140      	cbz	r0, 8008304 <_vfiprintf_r+0x198>
 80082f2:	2340      	movs	r3, #64	; 0x40
 80082f4:	eba0 000a 	sub.w	r0, r0, sl
 80082f8:	fa03 f000 	lsl.w	r0, r3, r0
 80082fc:	9b04      	ldr	r3, [sp, #16]
 80082fe:	4303      	orrs	r3, r0
 8008300:	3401      	adds	r4, #1
 8008302:	9304      	str	r3, [sp, #16]
 8008304:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008308:	482c      	ldr	r0, [pc, #176]	; (80083bc <_vfiprintf_r+0x250>)
 800830a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800830e:	2206      	movs	r2, #6
 8008310:	f7f7 ff6e 	bl	80001f0 <memchr>
 8008314:	2800      	cmp	r0, #0
 8008316:	d03f      	beq.n	8008398 <_vfiprintf_r+0x22c>
 8008318:	4b29      	ldr	r3, [pc, #164]	; (80083c0 <_vfiprintf_r+0x254>)
 800831a:	bb1b      	cbnz	r3, 8008364 <_vfiprintf_r+0x1f8>
 800831c:	9b03      	ldr	r3, [sp, #12]
 800831e:	3307      	adds	r3, #7
 8008320:	f023 0307 	bic.w	r3, r3, #7
 8008324:	3308      	adds	r3, #8
 8008326:	9303      	str	r3, [sp, #12]
 8008328:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800832a:	443b      	add	r3, r7
 800832c:	9309      	str	r3, [sp, #36]	; 0x24
 800832e:	e767      	b.n	8008200 <_vfiprintf_r+0x94>
 8008330:	fb0c 3202 	mla	r2, ip, r2, r3
 8008334:	460c      	mov	r4, r1
 8008336:	2001      	movs	r0, #1
 8008338:	e7a5      	b.n	8008286 <_vfiprintf_r+0x11a>
 800833a:	2300      	movs	r3, #0
 800833c:	3401      	adds	r4, #1
 800833e:	9305      	str	r3, [sp, #20]
 8008340:	4619      	mov	r1, r3
 8008342:	f04f 0c0a 	mov.w	ip, #10
 8008346:	4620      	mov	r0, r4
 8008348:	f810 2b01 	ldrb.w	r2, [r0], #1
 800834c:	3a30      	subs	r2, #48	; 0x30
 800834e:	2a09      	cmp	r2, #9
 8008350:	d903      	bls.n	800835a <_vfiprintf_r+0x1ee>
 8008352:	2b00      	cmp	r3, #0
 8008354:	d0c5      	beq.n	80082e2 <_vfiprintf_r+0x176>
 8008356:	9105      	str	r1, [sp, #20]
 8008358:	e7c3      	b.n	80082e2 <_vfiprintf_r+0x176>
 800835a:	fb0c 2101 	mla	r1, ip, r1, r2
 800835e:	4604      	mov	r4, r0
 8008360:	2301      	movs	r3, #1
 8008362:	e7f0      	b.n	8008346 <_vfiprintf_r+0x1da>
 8008364:	ab03      	add	r3, sp, #12
 8008366:	9300      	str	r3, [sp, #0]
 8008368:	462a      	mov	r2, r5
 800836a:	4b16      	ldr	r3, [pc, #88]	; (80083c4 <_vfiprintf_r+0x258>)
 800836c:	a904      	add	r1, sp, #16
 800836e:	4630      	mov	r0, r6
 8008370:	f7fd ff9a 	bl	80062a8 <_printf_float>
 8008374:	4607      	mov	r7, r0
 8008376:	1c78      	adds	r0, r7, #1
 8008378:	d1d6      	bne.n	8008328 <_vfiprintf_r+0x1bc>
 800837a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800837c:	07d9      	lsls	r1, r3, #31
 800837e:	d405      	bmi.n	800838c <_vfiprintf_r+0x220>
 8008380:	89ab      	ldrh	r3, [r5, #12]
 8008382:	059a      	lsls	r2, r3, #22
 8008384:	d402      	bmi.n	800838c <_vfiprintf_r+0x220>
 8008386:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008388:	f000 faaf 	bl	80088ea <__retarget_lock_release_recursive>
 800838c:	89ab      	ldrh	r3, [r5, #12]
 800838e:	065b      	lsls	r3, r3, #25
 8008390:	f53f af12 	bmi.w	80081b8 <_vfiprintf_r+0x4c>
 8008394:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008396:	e711      	b.n	80081bc <_vfiprintf_r+0x50>
 8008398:	ab03      	add	r3, sp, #12
 800839a:	9300      	str	r3, [sp, #0]
 800839c:	462a      	mov	r2, r5
 800839e:	4b09      	ldr	r3, [pc, #36]	; (80083c4 <_vfiprintf_r+0x258>)
 80083a0:	a904      	add	r1, sp, #16
 80083a2:	4630      	mov	r0, r6
 80083a4:	f7fe fa24 	bl	80067f0 <_printf_i>
 80083a8:	e7e4      	b.n	8008374 <_vfiprintf_r+0x208>
 80083aa:	bf00      	nop
 80083ac:	0800957c 	.word	0x0800957c
 80083b0:	0800959c 	.word	0x0800959c
 80083b4:	0800955c 	.word	0x0800955c
 80083b8:	0800944a 	.word	0x0800944a
 80083bc:	08009454 	.word	0x08009454
 80083c0:	080062a9 	.word	0x080062a9
 80083c4:	08008147 	.word	0x08008147
 80083c8:	08009450 	.word	0x08009450

080083cc <__swbuf_r>:
 80083cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083ce:	460e      	mov	r6, r1
 80083d0:	4614      	mov	r4, r2
 80083d2:	4605      	mov	r5, r0
 80083d4:	b118      	cbz	r0, 80083de <__swbuf_r+0x12>
 80083d6:	6983      	ldr	r3, [r0, #24]
 80083d8:	b90b      	cbnz	r3, 80083de <__swbuf_r+0x12>
 80083da:	f000 f9e7 	bl	80087ac <__sinit>
 80083de:	4b21      	ldr	r3, [pc, #132]	; (8008464 <__swbuf_r+0x98>)
 80083e0:	429c      	cmp	r4, r3
 80083e2:	d12b      	bne.n	800843c <__swbuf_r+0x70>
 80083e4:	686c      	ldr	r4, [r5, #4]
 80083e6:	69a3      	ldr	r3, [r4, #24]
 80083e8:	60a3      	str	r3, [r4, #8]
 80083ea:	89a3      	ldrh	r3, [r4, #12]
 80083ec:	071a      	lsls	r2, r3, #28
 80083ee:	d52f      	bpl.n	8008450 <__swbuf_r+0x84>
 80083f0:	6923      	ldr	r3, [r4, #16]
 80083f2:	b36b      	cbz	r3, 8008450 <__swbuf_r+0x84>
 80083f4:	6923      	ldr	r3, [r4, #16]
 80083f6:	6820      	ldr	r0, [r4, #0]
 80083f8:	1ac0      	subs	r0, r0, r3
 80083fa:	6963      	ldr	r3, [r4, #20]
 80083fc:	b2f6      	uxtb	r6, r6
 80083fe:	4283      	cmp	r3, r0
 8008400:	4637      	mov	r7, r6
 8008402:	dc04      	bgt.n	800840e <__swbuf_r+0x42>
 8008404:	4621      	mov	r1, r4
 8008406:	4628      	mov	r0, r5
 8008408:	f000 f93c 	bl	8008684 <_fflush_r>
 800840c:	bb30      	cbnz	r0, 800845c <__swbuf_r+0x90>
 800840e:	68a3      	ldr	r3, [r4, #8]
 8008410:	3b01      	subs	r3, #1
 8008412:	60a3      	str	r3, [r4, #8]
 8008414:	6823      	ldr	r3, [r4, #0]
 8008416:	1c5a      	adds	r2, r3, #1
 8008418:	6022      	str	r2, [r4, #0]
 800841a:	701e      	strb	r6, [r3, #0]
 800841c:	6963      	ldr	r3, [r4, #20]
 800841e:	3001      	adds	r0, #1
 8008420:	4283      	cmp	r3, r0
 8008422:	d004      	beq.n	800842e <__swbuf_r+0x62>
 8008424:	89a3      	ldrh	r3, [r4, #12]
 8008426:	07db      	lsls	r3, r3, #31
 8008428:	d506      	bpl.n	8008438 <__swbuf_r+0x6c>
 800842a:	2e0a      	cmp	r6, #10
 800842c:	d104      	bne.n	8008438 <__swbuf_r+0x6c>
 800842e:	4621      	mov	r1, r4
 8008430:	4628      	mov	r0, r5
 8008432:	f000 f927 	bl	8008684 <_fflush_r>
 8008436:	b988      	cbnz	r0, 800845c <__swbuf_r+0x90>
 8008438:	4638      	mov	r0, r7
 800843a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800843c:	4b0a      	ldr	r3, [pc, #40]	; (8008468 <__swbuf_r+0x9c>)
 800843e:	429c      	cmp	r4, r3
 8008440:	d101      	bne.n	8008446 <__swbuf_r+0x7a>
 8008442:	68ac      	ldr	r4, [r5, #8]
 8008444:	e7cf      	b.n	80083e6 <__swbuf_r+0x1a>
 8008446:	4b09      	ldr	r3, [pc, #36]	; (800846c <__swbuf_r+0xa0>)
 8008448:	429c      	cmp	r4, r3
 800844a:	bf08      	it	eq
 800844c:	68ec      	ldreq	r4, [r5, #12]
 800844e:	e7ca      	b.n	80083e6 <__swbuf_r+0x1a>
 8008450:	4621      	mov	r1, r4
 8008452:	4628      	mov	r0, r5
 8008454:	f000 f81a 	bl	800848c <__swsetup_r>
 8008458:	2800      	cmp	r0, #0
 800845a:	d0cb      	beq.n	80083f4 <__swbuf_r+0x28>
 800845c:	f04f 37ff 	mov.w	r7, #4294967295
 8008460:	e7ea      	b.n	8008438 <__swbuf_r+0x6c>
 8008462:	bf00      	nop
 8008464:	0800957c 	.word	0x0800957c
 8008468:	0800959c 	.word	0x0800959c
 800846c:	0800955c 	.word	0x0800955c

08008470 <__ascii_wctomb>:
 8008470:	b149      	cbz	r1, 8008486 <__ascii_wctomb+0x16>
 8008472:	2aff      	cmp	r2, #255	; 0xff
 8008474:	bf85      	ittet	hi
 8008476:	238a      	movhi	r3, #138	; 0x8a
 8008478:	6003      	strhi	r3, [r0, #0]
 800847a:	700a      	strbls	r2, [r1, #0]
 800847c:	f04f 30ff 	movhi.w	r0, #4294967295
 8008480:	bf98      	it	ls
 8008482:	2001      	movls	r0, #1
 8008484:	4770      	bx	lr
 8008486:	4608      	mov	r0, r1
 8008488:	4770      	bx	lr
	...

0800848c <__swsetup_r>:
 800848c:	4b32      	ldr	r3, [pc, #200]	; (8008558 <__swsetup_r+0xcc>)
 800848e:	b570      	push	{r4, r5, r6, lr}
 8008490:	681d      	ldr	r5, [r3, #0]
 8008492:	4606      	mov	r6, r0
 8008494:	460c      	mov	r4, r1
 8008496:	b125      	cbz	r5, 80084a2 <__swsetup_r+0x16>
 8008498:	69ab      	ldr	r3, [r5, #24]
 800849a:	b913      	cbnz	r3, 80084a2 <__swsetup_r+0x16>
 800849c:	4628      	mov	r0, r5
 800849e:	f000 f985 	bl	80087ac <__sinit>
 80084a2:	4b2e      	ldr	r3, [pc, #184]	; (800855c <__swsetup_r+0xd0>)
 80084a4:	429c      	cmp	r4, r3
 80084a6:	d10f      	bne.n	80084c8 <__swsetup_r+0x3c>
 80084a8:	686c      	ldr	r4, [r5, #4]
 80084aa:	89a3      	ldrh	r3, [r4, #12]
 80084ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80084b0:	0719      	lsls	r1, r3, #28
 80084b2:	d42c      	bmi.n	800850e <__swsetup_r+0x82>
 80084b4:	06dd      	lsls	r5, r3, #27
 80084b6:	d411      	bmi.n	80084dc <__swsetup_r+0x50>
 80084b8:	2309      	movs	r3, #9
 80084ba:	6033      	str	r3, [r6, #0]
 80084bc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80084c0:	81a3      	strh	r3, [r4, #12]
 80084c2:	f04f 30ff 	mov.w	r0, #4294967295
 80084c6:	e03e      	b.n	8008546 <__swsetup_r+0xba>
 80084c8:	4b25      	ldr	r3, [pc, #148]	; (8008560 <__swsetup_r+0xd4>)
 80084ca:	429c      	cmp	r4, r3
 80084cc:	d101      	bne.n	80084d2 <__swsetup_r+0x46>
 80084ce:	68ac      	ldr	r4, [r5, #8]
 80084d0:	e7eb      	b.n	80084aa <__swsetup_r+0x1e>
 80084d2:	4b24      	ldr	r3, [pc, #144]	; (8008564 <__swsetup_r+0xd8>)
 80084d4:	429c      	cmp	r4, r3
 80084d6:	bf08      	it	eq
 80084d8:	68ec      	ldreq	r4, [r5, #12]
 80084da:	e7e6      	b.n	80084aa <__swsetup_r+0x1e>
 80084dc:	0758      	lsls	r0, r3, #29
 80084de:	d512      	bpl.n	8008506 <__swsetup_r+0x7a>
 80084e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80084e2:	b141      	cbz	r1, 80084f6 <__swsetup_r+0x6a>
 80084e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80084e8:	4299      	cmp	r1, r3
 80084ea:	d002      	beq.n	80084f2 <__swsetup_r+0x66>
 80084ec:	4630      	mov	r0, r6
 80084ee:	f7ff fcd5 	bl	8007e9c <_free_r>
 80084f2:	2300      	movs	r3, #0
 80084f4:	6363      	str	r3, [r4, #52]	; 0x34
 80084f6:	89a3      	ldrh	r3, [r4, #12]
 80084f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80084fc:	81a3      	strh	r3, [r4, #12]
 80084fe:	2300      	movs	r3, #0
 8008500:	6063      	str	r3, [r4, #4]
 8008502:	6923      	ldr	r3, [r4, #16]
 8008504:	6023      	str	r3, [r4, #0]
 8008506:	89a3      	ldrh	r3, [r4, #12]
 8008508:	f043 0308 	orr.w	r3, r3, #8
 800850c:	81a3      	strh	r3, [r4, #12]
 800850e:	6923      	ldr	r3, [r4, #16]
 8008510:	b94b      	cbnz	r3, 8008526 <__swsetup_r+0x9a>
 8008512:	89a3      	ldrh	r3, [r4, #12]
 8008514:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008518:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800851c:	d003      	beq.n	8008526 <__swsetup_r+0x9a>
 800851e:	4621      	mov	r1, r4
 8008520:	4630      	mov	r0, r6
 8008522:	f000 fa09 	bl	8008938 <__smakebuf_r>
 8008526:	89a0      	ldrh	r0, [r4, #12]
 8008528:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800852c:	f010 0301 	ands.w	r3, r0, #1
 8008530:	d00a      	beq.n	8008548 <__swsetup_r+0xbc>
 8008532:	2300      	movs	r3, #0
 8008534:	60a3      	str	r3, [r4, #8]
 8008536:	6963      	ldr	r3, [r4, #20]
 8008538:	425b      	negs	r3, r3
 800853a:	61a3      	str	r3, [r4, #24]
 800853c:	6923      	ldr	r3, [r4, #16]
 800853e:	b943      	cbnz	r3, 8008552 <__swsetup_r+0xc6>
 8008540:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008544:	d1ba      	bne.n	80084bc <__swsetup_r+0x30>
 8008546:	bd70      	pop	{r4, r5, r6, pc}
 8008548:	0781      	lsls	r1, r0, #30
 800854a:	bf58      	it	pl
 800854c:	6963      	ldrpl	r3, [r4, #20]
 800854e:	60a3      	str	r3, [r4, #8]
 8008550:	e7f4      	b.n	800853c <__swsetup_r+0xb0>
 8008552:	2000      	movs	r0, #0
 8008554:	e7f7      	b.n	8008546 <__swsetup_r+0xba>
 8008556:	bf00      	nop
 8008558:	20000014 	.word	0x20000014
 800855c:	0800957c 	.word	0x0800957c
 8008560:	0800959c 	.word	0x0800959c
 8008564:	0800955c 	.word	0x0800955c

08008568 <abort>:
 8008568:	b508      	push	{r3, lr}
 800856a:	2006      	movs	r0, #6
 800856c:	f000 fa4c 	bl	8008a08 <raise>
 8008570:	2001      	movs	r0, #1
 8008572:	f7f9 f8c3 	bl	80016fc <_exit>
	...

08008578 <__sflush_r>:
 8008578:	898a      	ldrh	r2, [r1, #12]
 800857a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800857e:	4605      	mov	r5, r0
 8008580:	0710      	lsls	r0, r2, #28
 8008582:	460c      	mov	r4, r1
 8008584:	d458      	bmi.n	8008638 <__sflush_r+0xc0>
 8008586:	684b      	ldr	r3, [r1, #4]
 8008588:	2b00      	cmp	r3, #0
 800858a:	dc05      	bgt.n	8008598 <__sflush_r+0x20>
 800858c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800858e:	2b00      	cmp	r3, #0
 8008590:	dc02      	bgt.n	8008598 <__sflush_r+0x20>
 8008592:	2000      	movs	r0, #0
 8008594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008598:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800859a:	2e00      	cmp	r6, #0
 800859c:	d0f9      	beq.n	8008592 <__sflush_r+0x1a>
 800859e:	2300      	movs	r3, #0
 80085a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80085a4:	682f      	ldr	r7, [r5, #0]
 80085a6:	602b      	str	r3, [r5, #0]
 80085a8:	d032      	beq.n	8008610 <__sflush_r+0x98>
 80085aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80085ac:	89a3      	ldrh	r3, [r4, #12]
 80085ae:	075a      	lsls	r2, r3, #29
 80085b0:	d505      	bpl.n	80085be <__sflush_r+0x46>
 80085b2:	6863      	ldr	r3, [r4, #4]
 80085b4:	1ac0      	subs	r0, r0, r3
 80085b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80085b8:	b10b      	cbz	r3, 80085be <__sflush_r+0x46>
 80085ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80085bc:	1ac0      	subs	r0, r0, r3
 80085be:	2300      	movs	r3, #0
 80085c0:	4602      	mov	r2, r0
 80085c2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80085c4:	6a21      	ldr	r1, [r4, #32]
 80085c6:	4628      	mov	r0, r5
 80085c8:	47b0      	blx	r6
 80085ca:	1c43      	adds	r3, r0, #1
 80085cc:	89a3      	ldrh	r3, [r4, #12]
 80085ce:	d106      	bne.n	80085de <__sflush_r+0x66>
 80085d0:	6829      	ldr	r1, [r5, #0]
 80085d2:	291d      	cmp	r1, #29
 80085d4:	d82c      	bhi.n	8008630 <__sflush_r+0xb8>
 80085d6:	4a2a      	ldr	r2, [pc, #168]	; (8008680 <__sflush_r+0x108>)
 80085d8:	40ca      	lsrs	r2, r1
 80085da:	07d6      	lsls	r6, r2, #31
 80085dc:	d528      	bpl.n	8008630 <__sflush_r+0xb8>
 80085de:	2200      	movs	r2, #0
 80085e0:	6062      	str	r2, [r4, #4]
 80085e2:	04d9      	lsls	r1, r3, #19
 80085e4:	6922      	ldr	r2, [r4, #16]
 80085e6:	6022      	str	r2, [r4, #0]
 80085e8:	d504      	bpl.n	80085f4 <__sflush_r+0x7c>
 80085ea:	1c42      	adds	r2, r0, #1
 80085ec:	d101      	bne.n	80085f2 <__sflush_r+0x7a>
 80085ee:	682b      	ldr	r3, [r5, #0]
 80085f0:	b903      	cbnz	r3, 80085f4 <__sflush_r+0x7c>
 80085f2:	6560      	str	r0, [r4, #84]	; 0x54
 80085f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80085f6:	602f      	str	r7, [r5, #0]
 80085f8:	2900      	cmp	r1, #0
 80085fa:	d0ca      	beq.n	8008592 <__sflush_r+0x1a>
 80085fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008600:	4299      	cmp	r1, r3
 8008602:	d002      	beq.n	800860a <__sflush_r+0x92>
 8008604:	4628      	mov	r0, r5
 8008606:	f7ff fc49 	bl	8007e9c <_free_r>
 800860a:	2000      	movs	r0, #0
 800860c:	6360      	str	r0, [r4, #52]	; 0x34
 800860e:	e7c1      	b.n	8008594 <__sflush_r+0x1c>
 8008610:	6a21      	ldr	r1, [r4, #32]
 8008612:	2301      	movs	r3, #1
 8008614:	4628      	mov	r0, r5
 8008616:	47b0      	blx	r6
 8008618:	1c41      	adds	r1, r0, #1
 800861a:	d1c7      	bne.n	80085ac <__sflush_r+0x34>
 800861c:	682b      	ldr	r3, [r5, #0]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d0c4      	beq.n	80085ac <__sflush_r+0x34>
 8008622:	2b1d      	cmp	r3, #29
 8008624:	d001      	beq.n	800862a <__sflush_r+0xb2>
 8008626:	2b16      	cmp	r3, #22
 8008628:	d101      	bne.n	800862e <__sflush_r+0xb6>
 800862a:	602f      	str	r7, [r5, #0]
 800862c:	e7b1      	b.n	8008592 <__sflush_r+0x1a>
 800862e:	89a3      	ldrh	r3, [r4, #12]
 8008630:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008634:	81a3      	strh	r3, [r4, #12]
 8008636:	e7ad      	b.n	8008594 <__sflush_r+0x1c>
 8008638:	690f      	ldr	r7, [r1, #16]
 800863a:	2f00      	cmp	r7, #0
 800863c:	d0a9      	beq.n	8008592 <__sflush_r+0x1a>
 800863e:	0793      	lsls	r3, r2, #30
 8008640:	680e      	ldr	r6, [r1, #0]
 8008642:	bf08      	it	eq
 8008644:	694b      	ldreq	r3, [r1, #20]
 8008646:	600f      	str	r7, [r1, #0]
 8008648:	bf18      	it	ne
 800864a:	2300      	movne	r3, #0
 800864c:	eba6 0807 	sub.w	r8, r6, r7
 8008650:	608b      	str	r3, [r1, #8]
 8008652:	f1b8 0f00 	cmp.w	r8, #0
 8008656:	dd9c      	ble.n	8008592 <__sflush_r+0x1a>
 8008658:	6a21      	ldr	r1, [r4, #32]
 800865a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800865c:	4643      	mov	r3, r8
 800865e:	463a      	mov	r2, r7
 8008660:	4628      	mov	r0, r5
 8008662:	47b0      	blx	r6
 8008664:	2800      	cmp	r0, #0
 8008666:	dc06      	bgt.n	8008676 <__sflush_r+0xfe>
 8008668:	89a3      	ldrh	r3, [r4, #12]
 800866a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800866e:	81a3      	strh	r3, [r4, #12]
 8008670:	f04f 30ff 	mov.w	r0, #4294967295
 8008674:	e78e      	b.n	8008594 <__sflush_r+0x1c>
 8008676:	4407      	add	r7, r0
 8008678:	eba8 0800 	sub.w	r8, r8, r0
 800867c:	e7e9      	b.n	8008652 <__sflush_r+0xda>
 800867e:	bf00      	nop
 8008680:	20400001 	.word	0x20400001

08008684 <_fflush_r>:
 8008684:	b538      	push	{r3, r4, r5, lr}
 8008686:	690b      	ldr	r3, [r1, #16]
 8008688:	4605      	mov	r5, r0
 800868a:	460c      	mov	r4, r1
 800868c:	b913      	cbnz	r3, 8008694 <_fflush_r+0x10>
 800868e:	2500      	movs	r5, #0
 8008690:	4628      	mov	r0, r5
 8008692:	bd38      	pop	{r3, r4, r5, pc}
 8008694:	b118      	cbz	r0, 800869e <_fflush_r+0x1a>
 8008696:	6983      	ldr	r3, [r0, #24]
 8008698:	b90b      	cbnz	r3, 800869e <_fflush_r+0x1a>
 800869a:	f000 f887 	bl	80087ac <__sinit>
 800869e:	4b14      	ldr	r3, [pc, #80]	; (80086f0 <_fflush_r+0x6c>)
 80086a0:	429c      	cmp	r4, r3
 80086a2:	d11b      	bne.n	80086dc <_fflush_r+0x58>
 80086a4:	686c      	ldr	r4, [r5, #4]
 80086a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d0ef      	beq.n	800868e <_fflush_r+0xa>
 80086ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80086b0:	07d0      	lsls	r0, r2, #31
 80086b2:	d404      	bmi.n	80086be <_fflush_r+0x3a>
 80086b4:	0599      	lsls	r1, r3, #22
 80086b6:	d402      	bmi.n	80086be <_fflush_r+0x3a>
 80086b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80086ba:	f000 f915 	bl	80088e8 <__retarget_lock_acquire_recursive>
 80086be:	4628      	mov	r0, r5
 80086c0:	4621      	mov	r1, r4
 80086c2:	f7ff ff59 	bl	8008578 <__sflush_r>
 80086c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80086c8:	07da      	lsls	r2, r3, #31
 80086ca:	4605      	mov	r5, r0
 80086cc:	d4e0      	bmi.n	8008690 <_fflush_r+0xc>
 80086ce:	89a3      	ldrh	r3, [r4, #12]
 80086d0:	059b      	lsls	r3, r3, #22
 80086d2:	d4dd      	bmi.n	8008690 <_fflush_r+0xc>
 80086d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80086d6:	f000 f908 	bl	80088ea <__retarget_lock_release_recursive>
 80086da:	e7d9      	b.n	8008690 <_fflush_r+0xc>
 80086dc:	4b05      	ldr	r3, [pc, #20]	; (80086f4 <_fflush_r+0x70>)
 80086de:	429c      	cmp	r4, r3
 80086e0:	d101      	bne.n	80086e6 <_fflush_r+0x62>
 80086e2:	68ac      	ldr	r4, [r5, #8]
 80086e4:	e7df      	b.n	80086a6 <_fflush_r+0x22>
 80086e6:	4b04      	ldr	r3, [pc, #16]	; (80086f8 <_fflush_r+0x74>)
 80086e8:	429c      	cmp	r4, r3
 80086ea:	bf08      	it	eq
 80086ec:	68ec      	ldreq	r4, [r5, #12]
 80086ee:	e7da      	b.n	80086a6 <_fflush_r+0x22>
 80086f0:	0800957c 	.word	0x0800957c
 80086f4:	0800959c 	.word	0x0800959c
 80086f8:	0800955c 	.word	0x0800955c

080086fc <std>:
 80086fc:	2300      	movs	r3, #0
 80086fe:	b510      	push	{r4, lr}
 8008700:	4604      	mov	r4, r0
 8008702:	e9c0 3300 	strd	r3, r3, [r0]
 8008706:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800870a:	6083      	str	r3, [r0, #8]
 800870c:	8181      	strh	r1, [r0, #12]
 800870e:	6643      	str	r3, [r0, #100]	; 0x64
 8008710:	81c2      	strh	r2, [r0, #14]
 8008712:	6183      	str	r3, [r0, #24]
 8008714:	4619      	mov	r1, r3
 8008716:	2208      	movs	r2, #8
 8008718:	305c      	adds	r0, #92	; 0x5c
 800871a:	f7fd fd1d 	bl	8006158 <memset>
 800871e:	4b05      	ldr	r3, [pc, #20]	; (8008734 <std+0x38>)
 8008720:	6263      	str	r3, [r4, #36]	; 0x24
 8008722:	4b05      	ldr	r3, [pc, #20]	; (8008738 <std+0x3c>)
 8008724:	62a3      	str	r3, [r4, #40]	; 0x28
 8008726:	4b05      	ldr	r3, [pc, #20]	; (800873c <std+0x40>)
 8008728:	62e3      	str	r3, [r4, #44]	; 0x2c
 800872a:	4b05      	ldr	r3, [pc, #20]	; (8008740 <std+0x44>)
 800872c:	6224      	str	r4, [r4, #32]
 800872e:	6323      	str	r3, [r4, #48]	; 0x30
 8008730:	bd10      	pop	{r4, pc}
 8008732:	bf00      	nop
 8008734:	08008a41 	.word	0x08008a41
 8008738:	08008a63 	.word	0x08008a63
 800873c:	08008a9b 	.word	0x08008a9b
 8008740:	08008abf 	.word	0x08008abf

08008744 <_cleanup_r>:
 8008744:	4901      	ldr	r1, [pc, #4]	; (800874c <_cleanup_r+0x8>)
 8008746:	f000 b8af 	b.w	80088a8 <_fwalk_reent>
 800874a:	bf00      	nop
 800874c:	08008685 	.word	0x08008685

08008750 <__sfmoreglue>:
 8008750:	b570      	push	{r4, r5, r6, lr}
 8008752:	2268      	movs	r2, #104	; 0x68
 8008754:	1e4d      	subs	r5, r1, #1
 8008756:	4355      	muls	r5, r2
 8008758:	460e      	mov	r6, r1
 800875a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800875e:	f7ff fc09 	bl	8007f74 <_malloc_r>
 8008762:	4604      	mov	r4, r0
 8008764:	b140      	cbz	r0, 8008778 <__sfmoreglue+0x28>
 8008766:	2100      	movs	r1, #0
 8008768:	e9c0 1600 	strd	r1, r6, [r0]
 800876c:	300c      	adds	r0, #12
 800876e:	60a0      	str	r0, [r4, #8]
 8008770:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008774:	f7fd fcf0 	bl	8006158 <memset>
 8008778:	4620      	mov	r0, r4
 800877a:	bd70      	pop	{r4, r5, r6, pc}

0800877c <__sfp_lock_acquire>:
 800877c:	4801      	ldr	r0, [pc, #4]	; (8008784 <__sfp_lock_acquire+0x8>)
 800877e:	f000 b8b3 	b.w	80088e8 <__retarget_lock_acquire_recursive>
 8008782:	bf00      	nop
 8008784:	20000315 	.word	0x20000315

08008788 <__sfp_lock_release>:
 8008788:	4801      	ldr	r0, [pc, #4]	; (8008790 <__sfp_lock_release+0x8>)
 800878a:	f000 b8ae 	b.w	80088ea <__retarget_lock_release_recursive>
 800878e:	bf00      	nop
 8008790:	20000315 	.word	0x20000315

08008794 <__sinit_lock_acquire>:
 8008794:	4801      	ldr	r0, [pc, #4]	; (800879c <__sinit_lock_acquire+0x8>)
 8008796:	f000 b8a7 	b.w	80088e8 <__retarget_lock_acquire_recursive>
 800879a:	bf00      	nop
 800879c:	20000316 	.word	0x20000316

080087a0 <__sinit_lock_release>:
 80087a0:	4801      	ldr	r0, [pc, #4]	; (80087a8 <__sinit_lock_release+0x8>)
 80087a2:	f000 b8a2 	b.w	80088ea <__retarget_lock_release_recursive>
 80087a6:	bf00      	nop
 80087a8:	20000316 	.word	0x20000316

080087ac <__sinit>:
 80087ac:	b510      	push	{r4, lr}
 80087ae:	4604      	mov	r4, r0
 80087b0:	f7ff fff0 	bl	8008794 <__sinit_lock_acquire>
 80087b4:	69a3      	ldr	r3, [r4, #24]
 80087b6:	b11b      	cbz	r3, 80087c0 <__sinit+0x14>
 80087b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087bc:	f7ff bff0 	b.w	80087a0 <__sinit_lock_release>
 80087c0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80087c4:	6523      	str	r3, [r4, #80]	; 0x50
 80087c6:	4b13      	ldr	r3, [pc, #76]	; (8008814 <__sinit+0x68>)
 80087c8:	4a13      	ldr	r2, [pc, #76]	; (8008818 <__sinit+0x6c>)
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	62a2      	str	r2, [r4, #40]	; 0x28
 80087ce:	42a3      	cmp	r3, r4
 80087d0:	bf04      	itt	eq
 80087d2:	2301      	moveq	r3, #1
 80087d4:	61a3      	streq	r3, [r4, #24]
 80087d6:	4620      	mov	r0, r4
 80087d8:	f000 f820 	bl	800881c <__sfp>
 80087dc:	6060      	str	r0, [r4, #4]
 80087de:	4620      	mov	r0, r4
 80087e0:	f000 f81c 	bl	800881c <__sfp>
 80087e4:	60a0      	str	r0, [r4, #8]
 80087e6:	4620      	mov	r0, r4
 80087e8:	f000 f818 	bl	800881c <__sfp>
 80087ec:	2200      	movs	r2, #0
 80087ee:	60e0      	str	r0, [r4, #12]
 80087f0:	2104      	movs	r1, #4
 80087f2:	6860      	ldr	r0, [r4, #4]
 80087f4:	f7ff ff82 	bl	80086fc <std>
 80087f8:	68a0      	ldr	r0, [r4, #8]
 80087fa:	2201      	movs	r2, #1
 80087fc:	2109      	movs	r1, #9
 80087fe:	f7ff ff7d 	bl	80086fc <std>
 8008802:	68e0      	ldr	r0, [r4, #12]
 8008804:	2202      	movs	r2, #2
 8008806:	2112      	movs	r1, #18
 8008808:	f7ff ff78 	bl	80086fc <std>
 800880c:	2301      	movs	r3, #1
 800880e:	61a3      	str	r3, [r4, #24]
 8008810:	e7d2      	b.n	80087b8 <__sinit+0xc>
 8008812:	bf00      	nop
 8008814:	080091e4 	.word	0x080091e4
 8008818:	08008745 	.word	0x08008745

0800881c <__sfp>:
 800881c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800881e:	4607      	mov	r7, r0
 8008820:	f7ff ffac 	bl	800877c <__sfp_lock_acquire>
 8008824:	4b1e      	ldr	r3, [pc, #120]	; (80088a0 <__sfp+0x84>)
 8008826:	681e      	ldr	r6, [r3, #0]
 8008828:	69b3      	ldr	r3, [r6, #24]
 800882a:	b913      	cbnz	r3, 8008832 <__sfp+0x16>
 800882c:	4630      	mov	r0, r6
 800882e:	f7ff ffbd 	bl	80087ac <__sinit>
 8008832:	3648      	adds	r6, #72	; 0x48
 8008834:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008838:	3b01      	subs	r3, #1
 800883a:	d503      	bpl.n	8008844 <__sfp+0x28>
 800883c:	6833      	ldr	r3, [r6, #0]
 800883e:	b30b      	cbz	r3, 8008884 <__sfp+0x68>
 8008840:	6836      	ldr	r6, [r6, #0]
 8008842:	e7f7      	b.n	8008834 <__sfp+0x18>
 8008844:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008848:	b9d5      	cbnz	r5, 8008880 <__sfp+0x64>
 800884a:	4b16      	ldr	r3, [pc, #88]	; (80088a4 <__sfp+0x88>)
 800884c:	60e3      	str	r3, [r4, #12]
 800884e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008852:	6665      	str	r5, [r4, #100]	; 0x64
 8008854:	f000 f847 	bl	80088e6 <__retarget_lock_init_recursive>
 8008858:	f7ff ff96 	bl	8008788 <__sfp_lock_release>
 800885c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008860:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008864:	6025      	str	r5, [r4, #0]
 8008866:	61a5      	str	r5, [r4, #24]
 8008868:	2208      	movs	r2, #8
 800886a:	4629      	mov	r1, r5
 800886c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008870:	f7fd fc72 	bl	8006158 <memset>
 8008874:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008878:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800887c:	4620      	mov	r0, r4
 800887e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008880:	3468      	adds	r4, #104	; 0x68
 8008882:	e7d9      	b.n	8008838 <__sfp+0x1c>
 8008884:	2104      	movs	r1, #4
 8008886:	4638      	mov	r0, r7
 8008888:	f7ff ff62 	bl	8008750 <__sfmoreglue>
 800888c:	4604      	mov	r4, r0
 800888e:	6030      	str	r0, [r6, #0]
 8008890:	2800      	cmp	r0, #0
 8008892:	d1d5      	bne.n	8008840 <__sfp+0x24>
 8008894:	f7ff ff78 	bl	8008788 <__sfp_lock_release>
 8008898:	230c      	movs	r3, #12
 800889a:	603b      	str	r3, [r7, #0]
 800889c:	e7ee      	b.n	800887c <__sfp+0x60>
 800889e:	bf00      	nop
 80088a0:	080091e4 	.word	0x080091e4
 80088a4:	ffff0001 	.word	0xffff0001

080088a8 <_fwalk_reent>:
 80088a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088ac:	4606      	mov	r6, r0
 80088ae:	4688      	mov	r8, r1
 80088b0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80088b4:	2700      	movs	r7, #0
 80088b6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80088ba:	f1b9 0901 	subs.w	r9, r9, #1
 80088be:	d505      	bpl.n	80088cc <_fwalk_reent+0x24>
 80088c0:	6824      	ldr	r4, [r4, #0]
 80088c2:	2c00      	cmp	r4, #0
 80088c4:	d1f7      	bne.n	80088b6 <_fwalk_reent+0xe>
 80088c6:	4638      	mov	r0, r7
 80088c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088cc:	89ab      	ldrh	r3, [r5, #12]
 80088ce:	2b01      	cmp	r3, #1
 80088d0:	d907      	bls.n	80088e2 <_fwalk_reent+0x3a>
 80088d2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80088d6:	3301      	adds	r3, #1
 80088d8:	d003      	beq.n	80088e2 <_fwalk_reent+0x3a>
 80088da:	4629      	mov	r1, r5
 80088dc:	4630      	mov	r0, r6
 80088de:	47c0      	blx	r8
 80088e0:	4307      	orrs	r7, r0
 80088e2:	3568      	adds	r5, #104	; 0x68
 80088e4:	e7e9      	b.n	80088ba <_fwalk_reent+0x12>

080088e6 <__retarget_lock_init_recursive>:
 80088e6:	4770      	bx	lr

080088e8 <__retarget_lock_acquire_recursive>:
 80088e8:	4770      	bx	lr

080088ea <__retarget_lock_release_recursive>:
 80088ea:	4770      	bx	lr

080088ec <__swhatbuf_r>:
 80088ec:	b570      	push	{r4, r5, r6, lr}
 80088ee:	460e      	mov	r6, r1
 80088f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088f4:	2900      	cmp	r1, #0
 80088f6:	b096      	sub	sp, #88	; 0x58
 80088f8:	4614      	mov	r4, r2
 80088fa:	461d      	mov	r5, r3
 80088fc:	da08      	bge.n	8008910 <__swhatbuf_r+0x24>
 80088fe:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008902:	2200      	movs	r2, #0
 8008904:	602a      	str	r2, [r5, #0]
 8008906:	061a      	lsls	r2, r3, #24
 8008908:	d410      	bmi.n	800892c <__swhatbuf_r+0x40>
 800890a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800890e:	e00e      	b.n	800892e <__swhatbuf_r+0x42>
 8008910:	466a      	mov	r2, sp
 8008912:	f000 f8fb 	bl	8008b0c <_fstat_r>
 8008916:	2800      	cmp	r0, #0
 8008918:	dbf1      	blt.n	80088fe <__swhatbuf_r+0x12>
 800891a:	9a01      	ldr	r2, [sp, #4]
 800891c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008920:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008924:	425a      	negs	r2, r3
 8008926:	415a      	adcs	r2, r3
 8008928:	602a      	str	r2, [r5, #0]
 800892a:	e7ee      	b.n	800890a <__swhatbuf_r+0x1e>
 800892c:	2340      	movs	r3, #64	; 0x40
 800892e:	2000      	movs	r0, #0
 8008930:	6023      	str	r3, [r4, #0]
 8008932:	b016      	add	sp, #88	; 0x58
 8008934:	bd70      	pop	{r4, r5, r6, pc}
	...

08008938 <__smakebuf_r>:
 8008938:	898b      	ldrh	r3, [r1, #12]
 800893a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800893c:	079d      	lsls	r5, r3, #30
 800893e:	4606      	mov	r6, r0
 8008940:	460c      	mov	r4, r1
 8008942:	d507      	bpl.n	8008954 <__smakebuf_r+0x1c>
 8008944:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008948:	6023      	str	r3, [r4, #0]
 800894a:	6123      	str	r3, [r4, #16]
 800894c:	2301      	movs	r3, #1
 800894e:	6163      	str	r3, [r4, #20]
 8008950:	b002      	add	sp, #8
 8008952:	bd70      	pop	{r4, r5, r6, pc}
 8008954:	ab01      	add	r3, sp, #4
 8008956:	466a      	mov	r2, sp
 8008958:	f7ff ffc8 	bl	80088ec <__swhatbuf_r>
 800895c:	9900      	ldr	r1, [sp, #0]
 800895e:	4605      	mov	r5, r0
 8008960:	4630      	mov	r0, r6
 8008962:	f7ff fb07 	bl	8007f74 <_malloc_r>
 8008966:	b948      	cbnz	r0, 800897c <__smakebuf_r+0x44>
 8008968:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800896c:	059a      	lsls	r2, r3, #22
 800896e:	d4ef      	bmi.n	8008950 <__smakebuf_r+0x18>
 8008970:	f023 0303 	bic.w	r3, r3, #3
 8008974:	f043 0302 	orr.w	r3, r3, #2
 8008978:	81a3      	strh	r3, [r4, #12]
 800897a:	e7e3      	b.n	8008944 <__smakebuf_r+0xc>
 800897c:	4b0d      	ldr	r3, [pc, #52]	; (80089b4 <__smakebuf_r+0x7c>)
 800897e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008980:	89a3      	ldrh	r3, [r4, #12]
 8008982:	6020      	str	r0, [r4, #0]
 8008984:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008988:	81a3      	strh	r3, [r4, #12]
 800898a:	9b00      	ldr	r3, [sp, #0]
 800898c:	6163      	str	r3, [r4, #20]
 800898e:	9b01      	ldr	r3, [sp, #4]
 8008990:	6120      	str	r0, [r4, #16]
 8008992:	b15b      	cbz	r3, 80089ac <__smakebuf_r+0x74>
 8008994:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008998:	4630      	mov	r0, r6
 800899a:	f000 f8c9 	bl	8008b30 <_isatty_r>
 800899e:	b128      	cbz	r0, 80089ac <__smakebuf_r+0x74>
 80089a0:	89a3      	ldrh	r3, [r4, #12]
 80089a2:	f023 0303 	bic.w	r3, r3, #3
 80089a6:	f043 0301 	orr.w	r3, r3, #1
 80089aa:	81a3      	strh	r3, [r4, #12]
 80089ac:	89a0      	ldrh	r0, [r4, #12]
 80089ae:	4305      	orrs	r5, r0
 80089b0:	81a5      	strh	r5, [r4, #12]
 80089b2:	e7cd      	b.n	8008950 <__smakebuf_r+0x18>
 80089b4:	08008745 	.word	0x08008745

080089b8 <_raise_r>:
 80089b8:	291f      	cmp	r1, #31
 80089ba:	b538      	push	{r3, r4, r5, lr}
 80089bc:	4604      	mov	r4, r0
 80089be:	460d      	mov	r5, r1
 80089c0:	d904      	bls.n	80089cc <_raise_r+0x14>
 80089c2:	2316      	movs	r3, #22
 80089c4:	6003      	str	r3, [r0, #0]
 80089c6:	f04f 30ff 	mov.w	r0, #4294967295
 80089ca:	bd38      	pop	{r3, r4, r5, pc}
 80089cc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80089ce:	b112      	cbz	r2, 80089d6 <_raise_r+0x1e>
 80089d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80089d4:	b94b      	cbnz	r3, 80089ea <_raise_r+0x32>
 80089d6:	4620      	mov	r0, r4
 80089d8:	f000 f830 	bl	8008a3c <_getpid_r>
 80089dc:	462a      	mov	r2, r5
 80089de:	4601      	mov	r1, r0
 80089e0:	4620      	mov	r0, r4
 80089e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80089e6:	f000 b817 	b.w	8008a18 <_kill_r>
 80089ea:	2b01      	cmp	r3, #1
 80089ec:	d00a      	beq.n	8008a04 <_raise_r+0x4c>
 80089ee:	1c59      	adds	r1, r3, #1
 80089f0:	d103      	bne.n	80089fa <_raise_r+0x42>
 80089f2:	2316      	movs	r3, #22
 80089f4:	6003      	str	r3, [r0, #0]
 80089f6:	2001      	movs	r0, #1
 80089f8:	e7e7      	b.n	80089ca <_raise_r+0x12>
 80089fa:	2400      	movs	r4, #0
 80089fc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008a00:	4628      	mov	r0, r5
 8008a02:	4798      	blx	r3
 8008a04:	2000      	movs	r0, #0
 8008a06:	e7e0      	b.n	80089ca <_raise_r+0x12>

08008a08 <raise>:
 8008a08:	4b02      	ldr	r3, [pc, #8]	; (8008a14 <raise+0xc>)
 8008a0a:	4601      	mov	r1, r0
 8008a0c:	6818      	ldr	r0, [r3, #0]
 8008a0e:	f7ff bfd3 	b.w	80089b8 <_raise_r>
 8008a12:	bf00      	nop
 8008a14:	20000014 	.word	0x20000014

08008a18 <_kill_r>:
 8008a18:	b538      	push	{r3, r4, r5, lr}
 8008a1a:	4d07      	ldr	r5, [pc, #28]	; (8008a38 <_kill_r+0x20>)
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	4604      	mov	r4, r0
 8008a20:	4608      	mov	r0, r1
 8008a22:	4611      	mov	r1, r2
 8008a24:	602b      	str	r3, [r5, #0]
 8008a26:	f7f8 fe59 	bl	80016dc <_kill>
 8008a2a:	1c43      	adds	r3, r0, #1
 8008a2c:	d102      	bne.n	8008a34 <_kill_r+0x1c>
 8008a2e:	682b      	ldr	r3, [r5, #0]
 8008a30:	b103      	cbz	r3, 8008a34 <_kill_r+0x1c>
 8008a32:	6023      	str	r3, [r4, #0]
 8008a34:	bd38      	pop	{r3, r4, r5, pc}
 8008a36:	bf00      	nop
 8008a38:	20000310 	.word	0x20000310

08008a3c <_getpid_r>:
 8008a3c:	f7f8 be46 	b.w	80016cc <_getpid>

08008a40 <__sread>:
 8008a40:	b510      	push	{r4, lr}
 8008a42:	460c      	mov	r4, r1
 8008a44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a48:	f000 f894 	bl	8008b74 <_read_r>
 8008a4c:	2800      	cmp	r0, #0
 8008a4e:	bfab      	itete	ge
 8008a50:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008a52:	89a3      	ldrhlt	r3, [r4, #12]
 8008a54:	181b      	addge	r3, r3, r0
 8008a56:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008a5a:	bfac      	ite	ge
 8008a5c:	6563      	strge	r3, [r4, #84]	; 0x54
 8008a5e:	81a3      	strhlt	r3, [r4, #12]
 8008a60:	bd10      	pop	{r4, pc}

08008a62 <__swrite>:
 8008a62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a66:	461f      	mov	r7, r3
 8008a68:	898b      	ldrh	r3, [r1, #12]
 8008a6a:	05db      	lsls	r3, r3, #23
 8008a6c:	4605      	mov	r5, r0
 8008a6e:	460c      	mov	r4, r1
 8008a70:	4616      	mov	r6, r2
 8008a72:	d505      	bpl.n	8008a80 <__swrite+0x1e>
 8008a74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a78:	2302      	movs	r3, #2
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	f000 f868 	bl	8008b50 <_lseek_r>
 8008a80:	89a3      	ldrh	r3, [r4, #12]
 8008a82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008a8a:	81a3      	strh	r3, [r4, #12]
 8008a8c:	4632      	mov	r2, r6
 8008a8e:	463b      	mov	r3, r7
 8008a90:	4628      	mov	r0, r5
 8008a92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a96:	f000 b817 	b.w	8008ac8 <_write_r>

08008a9a <__sseek>:
 8008a9a:	b510      	push	{r4, lr}
 8008a9c:	460c      	mov	r4, r1
 8008a9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008aa2:	f000 f855 	bl	8008b50 <_lseek_r>
 8008aa6:	1c43      	adds	r3, r0, #1
 8008aa8:	89a3      	ldrh	r3, [r4, #12]
 8008aaa:	bf15      	itete	ne
 8008aac:	6560      	strne	r0, [r4, #84]	; 0x54
 8008aae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008ab2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008ab6:	81a3      	strheq	r3, [r4, #12]
 8008ab8:	bf18      	it	ne
 8008aba:	81a3      	strhne	r3, [r4, #12]
 8008abc:	bd10      	pop	{r4, pc}

08008abe <__sclose>:
 8008abe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ac2:	f000 b813 	b.w	8008aec <_close_r>
	...

08008ac8 <_write_r>:
 8008ac8:	b538      	push	{r3, r4, r5, lr}
 8008aca:	4d07      	ldr	r5, [pc, #28]	; (8008ae8 <_write_r+0x20>)
 8008acc:	4604      	mov	r4, r0
 8008ace:	4608      	mov	r0, r1
 8008ad0:	4611      	mov	r1, r2
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	602a      	str	r2, [r5, #0]
 8008ad6:	461a      	mov	r2, r3
 8008ad8:	f7f8 fe37 	bl	800174a <_write>
 8008adc:	1c43      	adds	r3, r0, #1
 8008ade:	d102      	bne.n	8008ae6 <_write_r+0x1e>
 8008ae0:	682b      	ldr	r3, [r5, #0]
 8008ae2:	b103      	cbz	r3, 8008ae6 <_write_r+0x1e>
 8008ae4:	6023      	str	r3, [r4, #0]
 8008ae6:	bd38      	pop	{r3, r4, r5, pc}
 8008ae8:	20000310 	.word	0x20000310

08008aec <_close_r>:
 8008aec:	b538      	push	{r3, r4, r5, lr}
 8008aee:	4d06      	ldr	r5, [pc, #24]	; (8008b08 <_close_r+0x1c>)
 8008af0:	2300      	movs	r3, #0
 8008af2:	4604      	mov	r4, r0
 8008af4:	4608      	mov	r0, r1
 8008af6:	602b      	str	r3, [r5, #0]
 8008af8:	f7f8 fe43 	bl	8001782 <_close>
 8008afc:	1c43      	adds	r3, r0, #1
 8008afe:	d102      	bne.n	8008b06 <_close_r+0x1a>
 8008b00:	682b      	ldr	r3, [r5, #0]
 8008b02:	b103      	cbz	r3, 8008b06 <_close_r+0x1a>
 8008b04:	6023      	str	r3, [r4, #0]
 8008b06:	bd38      	pop	{r3, r4, r5, pc}
 8008b08:	20000310 	.word	0x20000310

08008b0c <_fstat_r>:
 8008b0c:	b538      	push	{r3, r4, r5, lr}
 8008b0e:	4d07      	ldr	r5, [pc, #28]	; (8008b2c <_fstat_r+0x20>)
 8008b10:	2300      	movs	r3, #0
 8008b12:	4604      	mov	r4, r0
 8008b14:	4608      	mov	r0, r1
 8008b16:	4611      	mov	r1, r2
 8008b18:	602b      	str	r3, [r5, #0]
 8008b1a:	f7f8 fe3e 	bl	800179a <_fstat>
 8008b1e:	1c43      	adds	r3, r0, #1
 8008b20:	d102      	bne.n	8008b28 <_fstat_r+0x1c>
 8008b22:	682b      	ldr	r3, [r5, #0]
 8008b24:	b103      	cbz	r3, 8008b28 <_fstat_r+0x1c>
 8008b26:	6023      	str	r3, [r4, #0]
 8008b28:	bd38      	pop	{r3, r4, r5, pc}
 8008b2a:	bf00      	nop
 8008b2c:	20000310 	.word	0x20000310

08008b30 <_isatty_r>:
 8008b30:	b538      	push	{r3, r4, r5, lr}
 8008b32:	4d06      	ldr	r5, [pc, #24]	; (8008b4c <_isatty_r+0x1c>)
 8008b34:	2300      	movs	r3, #0
 8008b36:	4604      	mov	r4, r0
 8008b38:	4608      	mov	r0, r1
 8008b3a:	602b      	str	r3, [r5, #0]
 8008b3c:	f7f8 fe3d 	bl	80017ba <_isatty>
 8008b40:	1c43      	adds	r3, r0, #1
 8008b42:	d102      	bne.n	8008b4a <_isatty_r+0x1a>
 8008b44:	682b      	ldr	r3, [r5, #0]
 8008b46:	b103      	cbz	r3, 8008b4a <_isatty_r+0x1a>
 8008b48:	6023      	str	r3, [r4, #0]
 8008b4a:	bd38      	pop	{r3, r4, r5, pc}
 8008b4c:	20000310 	.word	0x20000310

08008b50 <_lseek_r>:
 8008b50:	b538      	push	{r3, r4, r5, lr}
 8008b52:	4d07      	ldr	r5, [pc, #28]	; (8008b70 <_lseek_r+0x20>)
 8008b54:	4604      	mov	r4, r0
 8008b56:	4608      	mov	r0, r1
 8008b58:	4611      	mov	r1, r2
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	602a      	str	r2, [r5, #0]
 8008b5e:	461a      	mov	r2, r3
 8008b60:	f7f8 fe36 	bl	80017d0 <_lseek>
 8008b64:	1c43      	adds	r3, r0, #1
 8008b66:	d102      	bne.n	8008b6e <_lseek_r+0x1e>
 8008b68:	682b      	ldr	r3, [r5, #0]
 8008b6a:	b103      	cbz	r3, 8008b6e <_lseek_r+0x1e>
 8008b6c:	6023      	str	r3, [r4, #0]
 8008b6e:	bd38      	pop	{r3, r4, r5, pc}
 8008b70:	20000310 	.word	0x20000310

08008b74 <_read_r>:
 8008b74:	b538      	push	{r3, r4, r5, lr}
 8008b76:	4d07      	ldr	r5, [pc, #28]	; (8008b94 <_read_r+0x20>)
 8008b78:	4604      	mov	r4, r0
 8008b7a:	4608      	mov	r0, r1
 8008b7c:	4611      	mov	r1, r2
 8008b7e:	2200      	movs	r2, #0
 8008b80:	602a      	str	r2, [r5, #0]
 8008b82:	461a      	mov	r2, r3
 8008b84:	f7f8 fdc4 	bl	8001710 <_read>
 8008b88:	1c43      	adds	r3, r0, #1
 8008b8a:	d102      	bne.n	8008b92 <_read_r+0x1e>
 8008b8c:	682b      	ldr	r3, [r5, #0]
 8008b8e:	b103      	cbz	r3, 8008b92 <_read_r+0x1e>
 8008b90:	6023      	str	r3, [r4, #0]
 8008b92:	bd38      	pop	{r3, r4, r5, pc}
 8008b94:	20000310 	.word	0x20000310

08008b98 <ceilf>:
 8008b98:	ee10 3a10 	vmov	r3, s0
 8008b9c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8008ba0:	3a7f      	subs	r2, #127	; 0x7f
 8008ba2:	2a16      	cmp	r2, #22
 8008ba4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008ba8:	dc2a      	bgt.n	8008c00 <ceilf+0x68>
 8008baa:	2a00      	cmp	r2, #0
 8008bac:	da11      	bge.n	8008bd2 <ceilf+0x3a>
 8008bae:	eddf 7a19 	vldr	s15, [pc, #100]	; 8008c14 <ceilf+0x7c>
 8008bb2:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008bb6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008bba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bbe:	dd05      	ble.n	8008bcc <ceilf+0x34>
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	db23      	blt.n	8008c0c <ceilf+0x74>
 8008bc4:	2900      	cmp	r1, #0
 8008bc6:	bf18      	it	ne
 8008bc8:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 8008bcc:	ee00 3a10 	vmov	s0, r3
 8008bd0:	4770      	bx	lr
 8008bd2:	4911      	ldr	r1, [pc, #68]	; (8008c18 <ceilf+0x80>)
 8008bd4:	4111      	asrs	r1, r2
 8008bd6:	420b      	tst	r3, r1
 8008bd8:	d0fa      	beq.n	8008bd0 <ceilf+0x38>
 8008bda:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8008c14 <ceilf+0x7c>
 8008bde:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008be2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008be6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bea:	ddef      	ble.n	8008bcc <ceilf+0x34>
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	bfc2      	ittt	gt
 8008bf0:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 8008bf4:	fa40 f202 	asrgt.w	r2, r0, r2
 8008bf8:	189b      	addgt	r3, r3, r2
 8008bfa:	ea23 0301 	bic.w	r3, r3, r1
 8008bfe:	e7e5      	b.n	8008bcc <ceilf+0x34>
 8008c00:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8008c04:	d3e4      	bcc.n	8008bd0 <ceilf+0x38>
 8008c06:	ee30 0a00 	vadd.f32	s0, s0, s0
 8008c0a:	4770      	bx	lr
 8008c0c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008c10:	e7dc      	b.n	8008bcc <ceilf+0x34>
 8008c12:	bf00      	nop
 8008c14:	7149f2ca 	.word	0x7149f2ca
 8008c18:	007fffff 	.word	0x007fffff

08008c1c <_init>:
 8008c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c1e:	bf00      	nop
 8008c20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c22:	bc08      	pop	{r3}
 8008c24:	469e      	mov	lr, r3
 8008c26:	4770      	bx	lr

08008c28 <_fini>:
 8008c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c2a:	bf00      	nop
 8008c2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c2e:	bc08      	pop	{r3}
 8008c30:	469e      	mov	lr, r3
 8008c32:	4770      	bx	lr
