
F411_Verita_Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c068  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001554  0800c208  0800c208  0001c208  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d75c  0800d75c  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800d75c  0800d75c  0001d75c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d764  0800d764  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d764  0800d764  0001d764  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d768  0800d768  0001d768  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800d76c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000380  200001f4  0800d960  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000574  0800d960  00020574  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000163c8  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d87  00000000  00000000  000365ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001440  00000000  00000000  00039378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001300  00000000  00000000  0003a7b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019a21  00000000  00000000  0003bab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017c54  00000000  00000000  000554d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000987b5  00000000  00000000  0006d12d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001058e2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006798  00000000  00000000  00105934  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f4 	.word	0x200001f4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c1f0 	.word	0x0800c1f0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f8 	.word	0x200001f8
 80001dc:	0800c1f0 	.word	0x0800c1f0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b974 	b.w	8000f98 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468e      	mov	lr, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14d      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4694      	mov	ip, r2
 8000cda:	d969      	bls.n	8000db0 <__udivmoddi4+0xe8>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b152      	cbz	r2, 8000cf8 <__udivmoddi4+0x30>
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	f1c2 0120 	rsb	r1, r2, #32
 8000cea:	fa20 f101 	lsr.w	r1, r0, r1
 8000cee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cf6:	4094      	lsls	r4, r2
 8000cf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cfc:	0c21      	lsrs	r1, r4, #16
 8000cfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000d02:	fa1f f78c 	uxth.w	r7, ip
 8000d06:	fb08 e316 	mls	r3, r8, r6, lr
 8000d0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d0e:	fb06 f107 	mul.w	r1, r6, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1e:	f080 811f 	bcs.w	8000f60 <__udivmoddi4+0x298>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 811c 	bls.w	8000f60 <__udivmoddi4+0x298>
 8000d28:	3e02      	subs	r6, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a5b      	subs	r3, r3, r1
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d34:	fb08 3310 	mls	r3, r8, r0, r3
 8000d38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d3c:	fb00 f707 	mul.w	r7, r0, r7
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x92>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4c:	f080 810a 	bcs.w	8000f64 <__udivmoddi4+0x29c>
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	f240 8107 	bls.w	8000f64 <__udivmoddi4+0x29c>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5e:	1be4      	subs	r4, r4, r7
 8000d60:	2600      	movs	r6, #0
 8000d62:	b11d      	cbz	r5, 8000d6c <__udivmoddi4+0xa4>
 8000d64:	40d4      	lsrs	r4, r2
 8000d66:	2300      	movs	r3, #0
 8000d68:	e9c5 4300 	strd	r4, r3, [r5]
 8000d6c:	4631      	mov	r1, r6
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0xc2>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	f000 80ef 	beq.w	8000f5a <__udivmoddi4+0x292>
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d82:	4630      	mov	r0, r6
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f683 	clz	r6, r3
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	d14a      	bne.n	8000e28 <__udivmoddi4+0x160>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xd4>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80f9 	bhi.w	8000f8e <__udivmoddi4+0x2c6>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	469e      	mov	lr, r3
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d0e0      	beq.n	8000d6c <__udivmoddi4+0xa4>
 8000daa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dae:	e7dd      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000db0:	b902      	cbnz	r2, 8000db4 <__udivmoddi4+0xec>
 8000db2:	deff      	udf	#255	; 0xff
 8000db4:	fab2 f282 	clz	r2, r2
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	f040 8092 	bne.w	8000ee2 <__udivmoddi4+0x21a>
 8000dbe:	eba1 010c 	sub.w	r1, r1, ip
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f fe8c 	uxth.w	lr, ip
 8000dca:	2601      	movs	r6, #1
 8000dcc:	0c20      	lsrs	r0, r4, #16
 8000dce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dda:	fb0e f003 	mul.w	r0, lr, r3
 8000dde:	4288      	cmp	r0, r1
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x12c>
 8000de2:	eb1c 0101 	adds.w	r1, ip, r1
 8000de6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x12a>
 8000dec:	4288      	cmp	r0, r1
 8000dee:	f200 80cb 	bhi.w	8000f88 <__udivmoddi4+0x2c0>
 8000df2:	4643      	mov	r3, r8
 8000df4:	1a09      	subs	r1, r1, r0
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000e00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e04:	fb0e fe00 	mul.w	lr, lr, r0
 8000e08:	45a6      	cmp	lr, r4
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x156>
 8000e0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e14:	d202      	bcs.n	8000e1c <__udivmoddi4+0x154>
 8000e16:	45a6      	cmp	lr, r4
 8000e18:	f200 80bb 	bhi.w	8000f92 <__udivmoddi4+0x2ca>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	eba4 040e 	sub.w	r4, r4, lr
 8000e22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e26:	e79c      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000e28:	f1c6 0720 	rsb	r7, r6, #32
 8000e2c:	40b3      	lsls	r3, r6
 8000e2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e36:	fa20 f407 	lsr.w	r4, r0, r7
 8000e3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3e:	431c      	orrs	r4, r3
 8000e40:	40f9      	lsrs	r1, r7
 8000e42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e46:	fa00 f306 	lsl.w	r3, r0, r6
 8000e4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e4e:	0c20      	lsrs	r0, r4, #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fb09 1118 	mls	r1, r9, r8, r1
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e60:	4288      	cmp	r0, r1
 8000e62:	fa02 f206 	lsl.w	r2, r2, r6
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x1b8>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e70:	f080 8088 	bcs.w	8000f84 <__udivmoddi4+0x2bc>
 8000e74:	4288      	cmp	r0, r1
 8000e76:	f240 8085 	bls.w	8000f84 <__udivmoddi4+0x2bc>
 8000e7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e88:	fb09 1110 	mls	r1, r9, r0, r1
 8000e8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e94:	458e      	cmp	lr, r1
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x1e2>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea0:	d26c      	bcs.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea2:	458e      	cmp	lr, r1
 8000ea4:	d96a      	bls.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4461      	add	r1, ip
 8000eaa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eae:	fba0 9402 	umull	r9, r4, r0, r2
 8000eb2:	eba1 010e 	sub.w	r1, r1, lr
 8000eb6:	42a1      	cmp	r1, r4
 8000eb8:	46c8      	mov	r8, r9
 8000eba:	46a6      	mov	lr, r4
 8000ebc:	d356      	bcc.n	8000f6c <__udivmoddi4+0x2a4>
 8000ebe:	d053      	beq.n	8000f68 <__udivmoddi4+0x2a0>
 8000ec0:	b15d      	cbz	r5, 8000eda <__udivmoddi4+0x212>
 8000ec2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ec6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eca:	fa01 f707 	lsl.w	r7, r1, r7
 8000ece:	fa22 f306 	lsr.w	r3, r2, r6
 8000ed2:	40f1      	lsrs	r1, r6
 8000ed4:	431f      	orrs	r7, r3
 8000ed6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eda:	2600      	movs	r6, #0
 8000edc:	4631      	mov	r1, r6
 8000ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee2:	f1c2 0320 	rsb	r3, r2, #32
 8000ee6:	40d8      	lsrs	r0, r3
 8000ee8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eec:	fa21 f303 	lsr.w	r3, r1, r3
 8000ef0:	4091      	lsls	r1, r2
 8000ef2:	4301      	orrs	r1, r0
 8000ef4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef8:	fa1f fe8c 	uxth.w	lr, ip
 8000efc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f00:	fb07 3610 	mls	r6, r7, r0, r3
 8000f04:	0c0b      	lsrs	r3, r1, #16
 8000f06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f0e:	429e      	cmp	r6, r3
 8000f10:	fa04 f402 	lsl.w	r4, r4, r2
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x260>
 8000f16:	eb1c 0303 	adds.w	r3, ip, r3
 8000f1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f1e:	d22f      	bcs.n	8000f80 <__udivmoddi4+0x2b8>
 8000f20:	429e      	cmp	r6, r3
 8000f22:	d92d      	bls.n	8000f80 <__udivmoddi4+0x2b8>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4463      	add	r3, ip
 8000f28:	1b9b      	subs	r3, r3, r6
 8000f2a:	b289      	uxth	r1, r1
 8000f2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f30:	fb07 3316 	mls	r3, r7, r6, r3
 8000f34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f38:	fb06 f30e 	mul.w	r3, r6, lr
 8000f3c:	428b      	cmp	r3, r1
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x28a>
 8000f40:	eb1c 0101 	adds.w	r1, ip, r1
 8000f44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f48:	d216      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d914      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4e:	3e02      	subs	r6, #2
 8000f50:	4461      	add	r1, ip
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f58:	e738      	b.n	8000dcc <__udivmoddi4+0x104>
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e705      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e3      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6f8      	b.n	8000d5a <__udivmoddi4+0x92>
 8000f68:	454b      	cmp	r3, r9
 8000f6a:	d2a9      	bcs.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7a3      	b.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f78:	4646      	mov	r6, r8
 8000f7a:	e7ea      	b.n	8000f52 <__udivmoddi4+0x28a>
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	e794      	b.n	8000eaa <__udivmoddi4+0x1e2>
 8000f80:	4640      	mov	r0, r8
 8000f82:	e7d1      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f84:	46d0      	mov	r8, sl
 8000f86:	e77b      	b.n	8000e80 <__udivmoddi4+0x1b8>
 8000f88:	3b02      	subs	r3, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	e732      	b.n	8000df4 <__udivmoddi4+0x12c>
 8000f8e:	4630      	mov	r0, r6
 8000f90:	e709      	b.n	8000da6 <__udivmoddi4+0xde>
 8000f92:	4464      	add	r4, ip
 8000f94:	3802      	subs	r0, #2
 8000f96:	e742      	b.n	8000e1e <__udivmoddi4+0x156>

08000f98 <__aeabi_idiv0>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <INA219Read_cx>:
 *  D16[1] :  00 CD  // D8[ 3 2 ]
 *  D16[1] | D16[0] = ABCD
 * */


uint16_t INA219Read_cx(I2C_HandleTypeDef *hi2c,uint8_t dv_addr, uint8_t ina_rg){
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b086      	sub	sp, #24
 8000fa0:	af04      	add	r7, sp, #16
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	70fb      	strb	r3, [r7, #3]
 8000fa8:	4613      	mov	r3, r2
 8000faa:	70bb      	strb	r3, [r7, #2]
	 * @param : ina_rg - register address need to access
	 * @Retval: raw bit value
	 * @ex. answer = INA219Read_cx(&hi2c1, INA219_ADDR_1, INA219_RG_Current);
	 * */

	INACBffr.D32 = 0; //// buffer clear
 8000fac:	4b0d      	ldr	r3, [pc, #52]	; (8000fe4 <INA219Read_cx+0x48>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	601a      	str	r2, [r3, #0]
	HAL_I2C_Mem_Read(hi2c, dv_addr, ina_rg, I2C_MEMADD_SIZE_8BIT, &INACBffr.D8[1], 2, 10);
 8000fb2:	78fb      	ldrb	r3, [r7, #3]
 8000fb4:	b299      	uxth	r1, r3
 8000fb6:	78bb      	ldrb	r3, [r7, #2]
 8000fb8:	b29a      	uxth	r2, r3
 8000fba:	230a      	movs	r3, #10
 8000fbc:	9302      	str	r3, [sp, #8]
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	9301      	str	r3, [sp, #4]
 8000fc2:	4b09      	ldr	r3, [pc, #36]	; (8000fe8 <INA219Read_cx+0x4c>)
 8000fc4:	9300      	str	r3, [sp, #0]
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	6878      	ldr	r0, [r7, #4]
 8000fca:	f003 faeb 	bl	80045a4 <HAL_I2C_Mem_Read>
	return INACBffr.D16[1] | INACBffr.D16[0];
 8000fce:	4b05      	ldr	r3, [pc, #20]	; (8000fe4 <INA219Read_cx+0x48>)
 8000fd0:	885a      	ldrh	r2, [r3, #2]
 8000fd2:	4b04      	ldr	r3, [pc, #16]	; (8000fe4 <INA219Read_cx+0x48>)
 8000fd4:	881b      	ldrh	r3, [r3, #0]
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	b29b      	uxth	r3, r3
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	20000210 	.word	0x20000210
 8000fe8:	20000211 	.word	0x20000211
 8000fec:	00000000 	.word	0x00000000

08000ff0 <INA219_INIT_Calibrate>:
	HAL_I2C_Mem_Write(hi2c, dv_addr, INA219_RG_Config, I2C_MEMADD_SIZE_8BIT, &resetx, 2, 10);

}

INA219_Conf_Strc configura;
void INA219_INIT_Calibrate(I2C_HandleTypeDef *hi2c,uint8_t dv_addr){
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b08a      	sub	sp, #40	; 0x28
 8000ff4:	af04      	add	r7, sp, #16
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	70fb      	strb	r3, [r7, #3]
	 * @param : hi2c - HAL_I2C used to read
	 * @param : dv_addr - address of INA219 device in the busline
	 * */

	////// -------------------- Configuration -------------------------------------
	configura.INA219CF.reset = 0;
 8000ffc:	4a52      	ldr	r2, [pc, #328]	; (8001148 <INA219_INIT_Calibrate+0x158>)
 8000ffe:	7853      	ldrb	r3, [r2, #1]
 8001000:	f36f 13c7 	bfc	r3, #7, #1
 8001004:	7053      	strb	r3, [r2, #1]
	configura.INA219CF.BRNG = BRNG_FSR_32V;
 8001006:	4a50      	ldr	r2, [pc, #320]	; (8001148 <INA219_INIT_Calibrate+0x158>)
 8001008:	7853      	ldrb	r3, [r2, #1]
 800100a:	f043 0320 	orr.w	r3, r3, #32
 800100e:	7053      	strb	r3, [r2, #1]
	configura.INA219CF.PGA = PGA_GainD4_160mv;
 8001010:	4a4d      	ldr	r2, [pc, #308]	; (8001148 <INA219_INIT_Calibrate+0x158>)
 8001012:	7853      	ldrb	r3, [r2, #1]
 8001014:	2102      	movs	r1, #2
 8001016:	f361 03c4 	bfi	r3, r1, #3, #2
 800101a:	7053      	strb	r3, [r2, #1]
	configura.INA219CF.BADC = ADCI_12bit_532uS;
 800101c:	4a4a      	ldr	r2, [pc, #296]	; (8001148 <INA219_INIT_Calibrate+0x158>)
 800101e:	8813      	ldrh	r3, [r2, #0]
 8001020:	2103      	movs	r1, #3
 8001022:	f361 13ca 	bfi	r3, r1, #7, #4
 8001026:	8013      	strh	r3, [r2, #0]
	configura.INA219CF.SADC = ADCI_12bit_532uS;
 8001028:	4a47      	ldr	r2, [pc, #284]	; (8001148 <INA219_INIT_Calibrate+0x158>)
 800102a:	7813      	ldrb	r3, [r2, #0]
 800102c:	2103      	movs	r1, #3
 800102e:	f361 03c6 	bfi	r3, r1, #3, #4
 8001032:	7013      	strb	r3, [r2, #0]
	configura.INA219CF.Mode = INAM_ShuntBusV_Continuous;
 8001034:	4a44      	ldr	r2, [pc, #272]	; (8001148 <INA219_INIT_Calibrate+0x158>)
 8001036:	7813      	ldrb	r3, [r2, #0]
 8001038:	f043 0307 	orr.w	r3, r3, #7
 800103c:	7013      	strb	r3, [r2, #0]

	uint8_t confictor_si2c[2] = {configura.D8[1], configura.D8[0]};
 800103e:	4b42      	ldr	r3, [pc, #264]	; (8001148 <INA219_INIT_Calibrate+0x158>)
 8001040:	785b      	ldrb	r3, [r3, #1]
 8001042:	753b      	strb	r3, [r7, #20]
 8001044:	4b40      	ldr	r3, [pc, #256]	; (8001148 <INA219_INIT_Calibrate+0x158>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	757b      	strb	r3, [r7, #21]
	HAL_I2C_Mem_Write(hi2c, dv_addr, INA219_RG_Config, I2C_MEMADD_SIZE_8BIT, &confictor_si2c[0], 2, 10);
 800104a:	78fb      	ldrb	r3, [r7, #3]
 800104c:	b299      	uxth	r1, r3
 800104e:	230a      	movs	r3, #10
 8001050:	9302      	str	r3, [sp, #8]
 8001052:	2302      	movs	r3, #2
 8001054:	9301      	str	r3, [sp, #4]
 8001056:	f107 0314 	add.w	r3, r7, #20
 800105a:	9300      	str	r3, [sp, #0]
 800105c:	2301      	movs	r3, #1
 800105e:	2200      	movs	r2, #0
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f003 f9a5 	bl	80043b0 <HAL_I2C_Mem_Write>
		uint16_t U16;
	}calibrator;

	// float current_LSB = INA219_MAX_Expect_Current / 32768.0; // 2^15
	//calibrator.U16 = (int16_t)(trunc( 0.04096 / (current_LSB * INA219_R_SHUNT_Val))) << 1;
	calibrator.U16 = trunc( 0.04096 / (current_LSB * INA219_R_SHUNT_Val));
 8001066:	4b39      	ldr	r3, [pc, #228]	; (800114c <INA219_INIT_Calibrate+0x15c>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff fa74 	bl	8000558 <__aeabi_f2d>
 8001070:	a32d      	add	r3, pc, #180	; (adr r3, 8001128 <INA219_INIT_Calibrate+0x138>)
 8001072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001076:	f7ff fac7 	bl	8000608 <__aeabi_dmul>
 800107a:	4602      	mov	r2, r0
 800107c:	460b      	mov	r3, r1
 800107e:	a12c      	add	r1, pc, #176	; (adr r1, 8001130 <INA219_INIT_Calibrate+0x140>)
 8001080:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001084:	f7ff fbea 	bl	800085c <__aeabi_ddiv>
 8001088:	4602      	mov	r2, r0
 800108a:	460b      	mov	r3, r1
 800108c:	ec43 2b17 	vmov	d7, r2, r3
 8001090:	eeb0 0a47 	vmov.f32	s0, s14
 8001094:	eef0 0a67 	vmov.f32	s1, s15
 8001098:	f00b f836 	bl	800c108 <trunc>
 800109c:	ec53 2b10 	vmov	r2, r3, d0
 80010a0:	4610      	mov	r0, r2
 80010a2:	4619      	mov	r1, r3
 80010a4:	f7ff fd88 	bl	8000bb8 <__aeabi_d2uiz>
 80010a8:	4603      	mov	r3, r0
 80010aa:	b29b      	uxth	r3, r3
 80010ac:	823b      	strh	r3, [r7, #16]
#ifdef calibrate_EQ6
	calibrator.U16 = trunc((calibrator.U16 * MeaShuntCurrent_ExtMeter) / INA219_Current_Raw);
 80010ae:	8a3b      	ldrh	r3, [r7, #16]
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff fa3f 	bl	8000534 <__aeabi_i2d>
 80010b6:	a320      	add	r3, pc, #128	; (adr r3, 8001138 <INA219_INIT_Calibrate+0x148>)
 80010b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010bc:	f7ff faa4 	bl	8000608 <__aeabi_dmul>
 80010c0:	4602      	mov	r2, r0
 80010c2:	460b      	mov	r3, r1
 80010c4:	4610      	mov	r0, r2
 80010c6:	4619      	mov	r1, r3
 80010c8:	a31d      	add	r3, pc, #116	; (adr r3, 8001140 <INA219_INIT_Calibrate+0x150>)
 80010ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ce:	f7ff fbc5 	bl	800085c <__aeabi_ddiv>
 80010d2:	4602      	mov	r2, r0
 80010d4:	460b      	mov	r3, r1
 80010d6:	ec43 2b17 	vmov	d7, r2, r3
 80010da:	eeb0 0a47 	vmov.f32	s0, s14
 80010de:	eef0 0a67 	vmov.f32	s1, s15
 80010e2:	f00b f811 	bl	800c108 <trunc>
 80010e6:	ec53 2b10 	vmov	r2, r3, d0
 80010ea:	4610      	mov	r0, r2
 80010ec:	4619      	mov	r1, r3
 80010ee:	f7ff fd63 	bl	8000bb8 <__aeabi_d2uiz>
 80010f2:	4603      	mov	r3, r0
 80010f4:	b29b      	uxth	r3, r3
 80010f6:	823b      	strh	r3, [r7, #16]
#endif
	uint8_t calibrator_si2c[2] = {calibrator.U8[1], calibrator.U8[0]}; //// switch byte to send high order first in I2C
 80010f8:	7c7b      	ldrb	r3, [r7, #17]
 80010fa:	733b      	strb	r3, [r7, #12]
 80010fc:	7c3b      	ldrb	r3, [r7, #16]
 80010fe:	737b      	strb	r3, [r7, #13]
	////  ex calibrator(I = 3A, 0.1Rshunt) = 4473 = 0x1179

	HAL_I2C_Mem_Write(hi2c, dv_addr, INA219_RG_Calibra, I2C_MEMADD_SIZE_8BIT, &calibrator_si2c[0], 2, 10);
 8001100:	78fb      	ldrb	r3, [r7, #3]
 8001102:	b299      	uxth	r1, r3
 8001104:	230a      	movs	r3, #10
 8001106:	9302      	str	r3, [sp, #8]
 8001108:	2302      	movs	r3, #2
 800110a:	9301      	str	r3, [sp, #4]
 800110c:	f107 030c 	add.w	r3, r7, #12
 8001110:	9300      	str	r3, [sp, #0]
 8001112:	2301      	movs	r3, #1
 8001114:	2205      	movs	r2, #5
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f003 f94a 	bl	80043b0 <HAL_I2C_Mem_Write>

}
 800111c:	bf00      	nop
 800111e:	3718      	adds	r7, #24
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	f3af 8000 	nop.w
 8001128:	9999999a 	.word	0x9999999a
 800112c:	3fb99999 	.word	0x3fb99999
 8001130:	88e368f1 	.word	0x88e368f1
 8001134:	3fa4f8b5 	.word	0x3fa4f8b5
 8001138:	9999999a 	.word	0x9999999a
 800113c:	3fe99999 	.word	0x3fe99999
 8001140:	9999999a 	.word	0x9999999a
 8001144:	40059999 	.word	0x40059999
 8001148:	20000214 	.word	0x20000214
 800114c:	20000000 	.word	0x20000000

08001150 <INA219Read_BusV>:
	uint8_t calibrator_si2c[2] = {calibrator.U8[1], calibrator.U8[0]}; //// switch byte to send high order first in I2C
	HAL_I2C_Mem_Write(hi2c, dv_addr, INA219_RG_Calibra, I2C_MEMADD_SIZE_8BIT, &calibrator_si2c[0], 2, 10);

}

uint16_t INA219Read_BusV(I2C_HandleTypeDef *hi2c,uint8_t dv_addr){
 8001150:	b580      	push	{r7, lr}
 8001152:	b086      	sub	sp, #24
 8001154:	af04      	add	r7, sp, #16
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	460b      	mov	r3, r1
 800115a:	70fb      	strb	r3, [r7, #3]
	//	if(INACBffr[2] & 0x01){ // still unsure how to deal with CNVR / OVF
//
//	}


	INACBffr.D32 = 0; //// buffer clear
 800115c:	4b0e      	ldr	r3, [pc, #56]	; (8001198 <INA219Read_BusV+0x48>)
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
	HAL_I2C_Mem_Read(hi2c, dv_addr, INA219_RG_BusV, I2C_MEMADD_SIZE_8BIT, &INACBffr.D8[1], 2, 10);
 8001162:	78fb      	ldrb	r3, [r7, #3]
 8001164:	b299      	uxth	r1, r3
 8001166:	230a      	movs	r3, #10
 8001168:	9302      	str	r3, [sp, #8]
 800116a:	2302      	movs	r3, #2
 800116c:	9301      	str	r3, [sp, #4]
 800116e:	4b0b      	ldr	r3, [pc, #44]	; (800119c <INA219Read_BusV+0x4c>)
 8001170:	9300      	str	r3, [sp, #0]
 8001172:	2301      	movs	r3, #1
 8001174:	2202      	movs	r2, #2
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f003 fa14 	bl	80045a4 <HAL_I2C_Mem_Read>

	return ((INACBffr.D16[1] | INACBffr.D16[0]) >> 3) * 4;
 800117c:	4b06      	ldr	r3, [pc, #24]	; (8001198 <INA219Read_BusV+0x48>)
 800117e:	885a      	ldrh	r2, [r3, #2]
 8001180:	4b05      	ldr	r3, [pc, #20]	; (8001198 <INA219Read_BusV+0x48>)
 8001182:	881b      	ldrh	r3, [r3, #0]
 8001184:	4313      	orrs	r3, r2
 8001186:	b29b      	uxth	r3, r3
 8001188:	08db      	lsrs	r3, r3, #3
 800118a:	b29b      	uxth	r3, r3
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	b29b      	uxth	r3, r3
}
 8001190:	4618      	mov	r0, r3
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	20000210 	.word	0x20000210
 800119c:	20000211 	.word	0x20000211

080011a0 <INA219Read_Current>:

uint16_t INA219Read_Current(I2C_HandleTypeDef *hi2c,uint8_t dv_addr){
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b086      	sub	sp, #24
 80011a4:	af04      	add	r7, sp, #16
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	460b      	mov	r3, r1
 80011aa:	70fb      	strb	r3, [r7, #3]
	 * @param : hi2c - HAL_I2C used to read
	 * @param : dv_addr - address of INA219 device in the busline
	 * @Retval: current in mA
	 * @ex.
	 * */
	INACBffr.D32 = 0; //// buffer clear
 80011ac:	4b0c      	ldr	r3, [pc, #48]	; (80011e0 <INA219Read_Current+0x40>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
	HAL_I2C_Mem_Read(hi2c, dv_addr, INA219_RG_Current, I2C_MEMADD_SIZE_8BIT, &INACBffr.D8[1], 2, 10);
 80011b2:	78fb      	ldrb	r3, [r7, #3]
 80011b4:	b299      	uxth	r1, r3
 80011b6:	230a      	movs	r3, #10
 80011b8:	9302      	str	r3, [sp, #8]
 80011ba:	2302      	movs	r3, #2
 80011bc:	9301      	str	r3, [sp, #4]
 80011be:	4b09      	ldr	r3, [pc, #36]	; (80011e4 <INA219Read_Current+0x44>)
 80011c0:	9300      	str	r3, [sp, #0]
 80011c2:	2301      	movs	r3, #1
 80011c4:	2204      	movs	r2, #4
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f003 f9ec 	bl	80045a4 <HAL_I2C_Mem_Read>

	return INACBffr.D16[1] | INACBffr.D16[0];
 80011cc:	4b04      	ldr	r3, [pc, #16]	; (80011e0 <INA219Read_Current+0x40>)
 80011ce:	885a      	ldrh	r2, [r3, #2]
 80011d0:	4b03      	ldr	r3, [pc, #12]	; (80011e0 <INA219Read_Current+0x40>)
 80011d2:	881b      	ldrh	r3, [r3, #0]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	b29b      	uxth	r3, r3
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	20000210 	.word	0x20000210
 80011e4:	20000211 	.word	0x20000211

080011e8 <INA219Read_ShuntV>:

float INA219Read_ShuntV(I2C_HandleTypeDef *hi2c,uint8_t dv_addr){
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b088      	sub	sp, #32
 80011ec:	af04      	add	r7, sp, #16
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	460b      	mov	r3, r1
 80011f2:	70fb      	strb	r3, [r7, #3]
	 * @param : hi2c - HAL_I2C used to read
	 * @param : dv_addr - address of INA219 device in the busline
	 * @Retval: shunt voltage in mV (.2f)
	 * @ex.
	 * */
	INACBffr.D32 = 0; //// buffer clear
 80011f4:	4b17      	ldr	r3, [pc, #92]	; (8001254 <INA219Read_ShuntV+0x6c>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	601a      	str	r2, [r3, #0]
	HAL_I2C_Mem_Read(hi2c, dv_addr, INA219_RG_ShuntV, I2C_MEMADD_SIZE_8BIT, &INACBffr.D8[1], 2, 10);
 80011fa:	78fb      	ldrb	r3, [r7, #3]
 80011fc:	b299      	uxth	r1, r3
 80011fe:	230a      	movs	r3, #10
 8001200:	9302      	str	r3, [sp, #8]
 8001202:	2302      	movs	r3, #2
 8001204:	9301      	str	r3, [sp, #4]
 8001206:	4b14      	ldr	r3, [pc, #80]	; (8001258 <INA219Read_ShuntV+0x70>)
 8001208:	9300      	str	r3, [sp, #0]
 800120a:	2301      	movs	r3, #1
 800120c:	2201      	movs	r2, #1
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	f003 f9c8 	bl	80045a4 <HAL_I2C_Mem_Read>

	//// Convert rawdata To V shunt from Table 7.Shunt Voltage Register Format

    int16_t rawshunt = INACBffr.D16[1] | INACBffr.D16[0];
 8001214:	4b0f      	ldr	r3, [pc, #60]	; (8001254 <INA219Read_ShuntV+0x6c>)
 8001216:	885a      	ldrh	r2, [r3, #2]
 8001218:	4b0e      	ldr	r3, [pc, #56]	; (8001254 <INA219Read_ShuntV+0x6c>)
 800121a:	881b      	ldrh	r3, [r3, #0]
 800121c:	4313      	orrs	r3, r2
 800121e:	b29b      	uxth	r3, r3
 8001220:	81fb      	strh	r3, [r7, #14]
    return rawshunt / 100.0;
 8001222:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff f984 	bl	8000534 <__aeabi_i2d>
 800122c:	f04f 0200 	mov.w	r2, #0
 8001230:	4b0a      	ldr	r3, [pc, #40]	; (800125c <INA219Read_ShuntV+0x74>)
 8001232:	f7ff fb13 	bl	800085c <__aeabi_ddiv>
 8001236:	4602      	mov	r2, r0
 8001238:	460b      	mov	r3, r1
 800123a:	4610      	mov	r0, r2
 800123c:	4619      	mov	r1, r3
 800123e:	f7ff fcdb 	bl	8000bf8 <__aeabi_d2f>
 8001242:	4603      	mov	r3, r0
 8001244:	ee07 3a90 	vmov	s15, r3
//    	return rawshunt / 100.0;
//    }else{
//    	// if 2's complements
//    	return (~rawshunt + 1) / 100.0;
//    }
}
 8001248:	eeb0 0a67 	vmov.f32	s0, s15
 800124c:	3710      	adds	r7, #16
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	20000210 	.word	0x20000210
 8001258:	20000211 	.word	0x20000211
 800125c:	40590000 	.word	0x40590000

08001260 <INA219Read_Power>:

float INA219Read_Power(I2C_HandleTypeDef *hi2c,uint8_t dv_addr){
 8001260:	b5b0      	push	{r4, r5, r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af04      	add	r7, sp, #16
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	460b      	mov	r3, r1
 800126a:	70fb      	strb	r3, [r7, #3]
	 * @param : hi2c - HAL_I2C used to read
	 * @param : dv_addr - address of INA219 device in the busline
	 * @Retval: Power in mW
	 * @ex.
	 * */
	INACBffr.D32 = 0; //// buffer clear
 800126c:	4b1e      	ldr	r3, [pc, #120]	; (80012e8 <INA219Read_Power+0x88>)
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]
	HAL_I2C_Mem_Read(hi2c, dv_addr, INA219_RG_PoWer, I2C_MEMADD_SIZE_8BIT, &INACBffr.D8[1], 2, 10);
 8001272:	78fb      	ldrb	r3, [r7, #3]
 8001274:	b299      	uxth	r1, r3
 8001276:	230a      	movs	r3, #10
 8001278:	9302      	str	r3, [sp, #8]
 800127a:	2302      	movs	r3, #2
 800127c:	9301      	str	r3, [sp, #4]
 800127e:	4b1b      	ldr	r3, [pc, #108]	; (80012ec <INA219Read_Power+0x8c>)
 8001280:	9300      	str	r3, [sp, #0]
 8001282:	2301      	movs	r3, #1
 8001284:	2203      	movs	r2, #3
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f003 f98c 	bl	80045a4 <HAL_I2C_Mem_Read>
	////  * 20, power_LSB = 20 x current_LSB & x 1000 make unit in mW
	return ((INACBffr.D16[1] | INACBffr.D16[0]) * (20000.0 * current_LSB));
 800128c:	4b16      	ldr	r3, [pc, #88]	; (80012e8 <INA219Read_Power+0x88>)
 800128e:	885a      	ldrh	r2, [r3, #2]
 8001290:	4b15      	ldr	r3, [pc, #84]	; (80012e8 <INA219Read_Power+0x88>)
 8001292:	881b      	ldrh	r3, [r3, #0]
 8001294:	4313      	orrs	r3, r2
 8001296:	b29b      	uxth	r3, r3
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff f94b 	bl	8000534 <__aeabi_i2d>
 800129e:	4604      	mov	r4, r0
 80012a0:	460d      	mov	r5, r1
 80012a2:	4b13      	ldr	r3, [pc, #76]	; (80012f0 <INA219Read_Power+0x90>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff f956 	bl	8000558 <__aeabi_f2d>
 80012ac:	a30c      	add	r3, pc, #48	; (adr r3, 80012e0 <INA219Read_Power+0x80>)
 80012ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b2:	f7ff f9a9 	bl	8000608 <__aeabi_dmul>
 80012b6:	4602      	mov	r2, r0
 80012b8:	460b      	mov	r3, r1
 80012ba:	4620      	mov	r0, r4
 80012bc:	4629      	mov	r1, r5
 80012be:	f7ff f9a3 	bl	8000608 <__aeabi_dmul>
 80012c2:	4602      	mov	r2, r0
 80012c4:	460b      	mov	r3, r1
 80012c6:	4610      	mov	r0, r2
 80012c8:	4619      	mov	r1, r3
 80012ca:	f7ff fc95 	bl	8000bf8 <__aeabi_d2f>
 80012ce:	4603      	mov	r3, r0
 80012d0:	ee07 3a90 	vmov	s15, r3
}
 80012d4:	eeb0 0a67 	vmov.f32	s0, s15
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bdb0      	pop	{r4, r5, r7, pc}
 80012de:	bf00      	nop
 80012e0:	00000000 	.word	0x00000000
 80012e4:	40d38800 	.word	0x40d38800
 80012e8:	20000210 	.word	0x20000210
 80012ec:	20000211 	.word	0x20000211
 80012f0:	20000000 	.word	0x20000000

080012f4 <MCP3208_READ_8_DataSPI>:
/* Read using SPI 8 Bit Data size MSB first
 * Ex.
 * AA_bitread = MCP3208_READ_8_DataSPI(&hspi3, M8_CH0);
	VADC_cv =  MCP3208_ADCbit_to_Volt(AA_bitread); // 5 / 4096 * 0.00122
 * */
uint16_t MCP3208_READ_8_DataSPI(SPI_HandleTypeDef *hspi, MCP3208CHSelect M8_channel){
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b086      	sub	sp, #24
 80012f8:	af02      	add	r7, sp, #8
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	460b      	mov	r3, r1
 80012fe:	70fb      	strb	r3, [r7, #3]

	//// Shitty bitshift to the correct position Fig 6-1, MCP3208, MICROCHIP
	uint8_t D8_MOSI[3];
	uint8_t D8_MISO[3];
	D8_MOSI[0] = M8_channel >> 2;
 8001300:	78fb      	ldrb	r3, [r7, #3]
 8001302:	089b      	lsrs	r3, r3, #2
 8001304:	b2db      	uxtb	r3, r3
 8001306:	733b      	strb	r3, [r7, #12]
	D8_MOSI[1] = M8_channel << 6;
 8001308:	78fb      	ldrb	r3, [r7, #3]
 800130a:	019b      	lsls	r3, r3, #6
 800130c:	b2db      	uxtb	r3, r3
 800130e:	737b      	strb	r3, [r7, #13]


	HAL_GPIO_WritePin(MCP3208_SPI_CS_Port,MCP3208_SPI_CS_Pin , GPIO_PIN_RESET);
 8001310:	2200      	movs	r2, #0
 8001312:	2104      	movs	r1, #4
 8001314:	4810      	ldr	r0, [pc, #64]	; (8001358 <MCP3208_READ_8_DataSPI+0x64>)
 8001316:	f002 febb 	bl	8004090 <HAL_GPIO_WritePin>

	HAL_SPI_TransmitReceive(hspi, &D8_MOSI[0], &D8_MISO[0], 3, 100);
 800131a:	f107 0208 	add.w	r2, r7, #8
 800131e:	f107 010c 	add.w	r1, r7, #12
 8001322:	2364      	movs	r3, #100	; 0x64
 8001324:	9300      	str	r3, [sp, #0]
 8001326:	2303      	movs	r3, #3
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f006 f8b8 	bl	800749e <HAL_SPI_TransmitReceive>

	//HAL_SPI_Abort(hspi);
	HAL_GPIO_WritePin(MCP3208_SPI_CS_Port,MCP3208_SPI_CS_Pin , GPIO_PIN_SET);
 800132e:	2201      	movs	r2, #1
 8001330:	2104      	movs	r1, #4
 8001332:	4809      	ldr	r0, [pc, #36]	; (8001358 <MCP3208_READ_8_DataSPI+0x64>)
 8001334:	f002 feac 	bl	8004090 <HAL_GPIO_WritePin>

	return ((D8_MISO[1] << 8) + D8_MISO[2]) & 0x0FFF;
 8001338:	7a7b      	ldrb	r3, [r7, #9]
 800133a:	b29b      	uxth	r3, r3
 800133c:	021b      	lsls	r3, r3, #8
 800133e:	b29a      	uxth	r2, r3
 8001340:	7abb      	ldrb	r3, [r7, #10]
 8001342:	b29b      	uxth	r3, r3
 8001344:	4413      	add	r3, r2
 8001346:	b29b      	uxth	r3, r3
 8001348:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800134c:	b29b      	uxth	r3, r3
}
 800134e:	4618      	mov	r0, r3
 8001350:	3710      	adds	r7, #16
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	40020c00 	.word	0x40020c00
 800135c:	00000000 	.word	0x00000000

08001360 <MCP320x_ADCbit_to_Volt>:


float MCP320x_ADCbit_to_Volt(uint16_t adcbit){
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	4603      	mov	r3, r0
 8001368:	80fb      	strh	r3, [r7, #6]
	return adcbit * 0.00122; // 5/4096
 800136a:	88fb      	ldrh	r3, [r7, #6]
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff f8e1 	bl	8000534 <__aeabi_i2d>
 8001372:	a309      	add	r3, pc, #36	; (adr r3, 8001398 <MCP320x_ADCbit_to_Volt+0x38>)
 8001374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001378:	f7ff f946 	bl	8000608 <__aeabi_dmul>
 800137c:	4602      	mov	r2, r0
 800137e:	460b      	mov	r3, r1
 8001380:	4610      	mov	r0, r2
 8001382:	4619      	mov	r1, r3
 8001384:	f7ff fc38 	bl	8000bf8 <__aeabi_d2f>
 8001388:	4603      	mov	r3, r0
 800138a:	ee07 3a90 	vmov	s15, r3
}
 800138e:	eeb0 0a67 	vmov.f32	s0, s15
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	0678c005 	.word	0x0678c005
 800139c:	3f53fd0d 	.word	0x3f53fd0d

080013a0 <Rx_Verita_engine>:

#include "Verita_PTC.h"

static enum {init, unpack, decode}verita_engine;

VRTPTC_StatusTypedef Rx_Verita_engine(uint8_t *Rxbffr, uint32_t *regisk){
 80013a0:	b490      	push	{r4, r7}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	6039      	str	r1, [r7, #0]
	union{
		uint8_t  U8[4];
		uint32_t U32;
	}logu;

	uint8_t chksum = 0;
 80013aa:	2300      	movs	r3, #0
 80013ac:	73fb      	strb	r3, [r7, #15]

	switch (verita_engine){
 80013ae:	4b4a      	ldr	r3, [pc, #296]	; (80014d8 <Rx_Verita_engine+0x138>)
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	2b01      	cmp	r3, #1
 80013b4:	d00a      	beq.n	80013cc <Rx_Verita_engine+0x2c>
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	d04a      	beq.n	8001450 <Rx_Verita_engine+0xb0>
	default:
	case init:

		if(Rxbffr[0] == 0x56){ //flag_vrt_en ||
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	2b56      	cmp	r3, #86	; 0x56
 80013c0:	f040 8080 	bne.w	80014c4 <Rx_Verita_engine+0x124>
			verita_engine = unpack;
 80013c4:	4b44      	ldr	r3, [pc, #272]	; (80014d8 <Rx_Verita_engine+0x138>)
 80013c6:	2201      	movs	r2, #1
 80013c8:	701a      	strb	r2, [r3, #0]
		}
		break;
 80013ca:	e07b      	b.n	80014c4 <Rx_Verita_engine+0x124>

	case unpack:

		if(Rxbffr[0] == 0x56 && Rxbffr[1] == 0x52 && Rxbffr[2] == 0x54){
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	2b56      	cmp	r3, #86	; 0x56
 80013d2:	d12e      	bne.n	8001432 <Rx_Verita_engine+0x92>
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	3301      	adds	r3, #1
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	2b52      	cmp	r3, #82	; 0x52
 80013dc:	d129      	bne.n	8001432 <Rx_Verita_engine+0x92>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	3302      	adds	r3, #2
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	2b54      	cmp	r3, #84	; 0x54
 80013e6:	d124      	bne.n	8001432 <Rx_Verita_engine+0x92>

			//// log data first / prevent overwrite
			for(register int k = 0; k < 7; k++){
 80013e8:	2400      	movs	r4, #0
 80013ea:	e007      	b.n	80013fc <Rx_Verita_engine+0x5c>
				logger[k] = Rxbffr[k+3];
 80013ec:	4623      	mov	r3, r4
 80013ee:	3303      	adds	r3, #3
 80013f0:	687a      	ldr	r2, [r7, #4]
 80013f2:	4413      	add	r3, r2
 80013f4:	781a      	ldrb	r2, [r3, #0]
 80013f6:	4b39      	ldr	r3, [pc, #228]	; (80014dc <Rx_Verita_engine+0x13c>)
 80013f8:	551a      	strb	r2, [r3, r4]
			for(register int k = 0; k < 7; k++){
 80013fa:	3401      	adds	r4, #1
 80013fc:	2c06      	cmp	r4, #6
 80013fe:	ddf5      	ble.n	80013ec <Rx_Verita_engine+0x4c>
			}

			//// checksum here
			for(register int i = 0;i < 5; i++){
 8001400:	2400      	movs	r4, #0
 8001402:	e005      	b.n	8001410 <Rx_Verita_engine+0x70>
				chksum += logger[i];
 8001404:	4b35      	ldr	r3, [pc, #212]	; (80014dc <Rx_Verita_engine+0x13c>)
 8001406:	5d1a      	ldrb	r2, [r3, r4]
 8001408:	7bfb      	ldrb	r3, [r7, #15]
 800140a:	4413      	add	r3, r2
 800140c:	73fb      	strb	r3, [r7, #15]
			for(register int i = 0;i < 5; i++){
 800140e:	3401      	adds	r4, #1
 8001410:	2c04      	cmp	r4, #4
 8001412:	ddf7      	ble.n	8001404 <Rx_Verita_engine+0x64>
			}
			if(~chksum == logger[6]){
 8001414:	7bfb      	ldrb	r3, [r7, #15]
 8001416:	43db      	mvns	r3, r3
 8001418:	4a30      	ldr	r2, [pc, #192]	; (80014dc <Rx_Verita_engine+0x13c>)
 800141a:	7992      	ldrb	r2, [r2, #6]
 800141c:	4293      	cmp	r3, r2
 800141e:	d001      	beq.n	8001424 <Rx_Verita_engine+0x84>
				// pass

			}
			else{
				return VRT_DataLoss;
 8001420:	2395      	movs	r3, #149	; 0x95
 8001422:	e053      	b.n	80014cc <Rx_Verita_engine+0x12c>
			}

			//// mark that this data is already read
			Rxbffr[0] = 0xFF;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	22ff      	movs	r2, #255	; 0xff
 8001428:	701a      	strb	r2, [r3, #0]
			verita_engine = decode;
 800142a:	4b2b      	ldr	r3, [pc, #172]	; (80014d8 <Rx_Verita_engine+0x138>)
 800142c:	2202      	movs	r2, #2
 800142e:	701a      	strb	r2, [r3, #0]
			//// destroy data
			for(register int i = 0;i < sizeof(Rxbffr); i++){
				Rxbffr[i] = 0x00;
			}
		}
		break;
 8001430:	e04b      	b.n	80014ca <Rx_Verita_engine+0x12a>
			verita_engine = init;
 8001432:	4b29      	ldr	r3, [pc, #164]	; (80014d8 <Rx_Verita_engine+0x138>)
 8001434:	2200      	movs	r2, #0
 8001436:	701a      	strb	r2, [r3, #0]
			for(register int i = 0;i < sizeof(Rxbffr); i++){
 8001438:	2400      	movs	r4, #0
 800143a:	e005      	b.n	8001448 <Rx_Verita_engine+0xa8>
				Rxbffr[i] = 0x00;
 800143c:	4622      	mov	r2, r4
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4413      	add	r3, r2
 8001442:	2200      	movs	r2, #0
 8001444:	701a      	strb	r2, [r3, #0]
			for(register int i = 0;i < sizeof(Rxbffr); i++){
 8001446:	3401      	adds	r4, #1
 8001448:	4623      	mov	r3, r4
 800144a:	2b03      	cmp	r3, #3
 800144c:	d9f6      	bls.n	800143c <Rx_Verita_engine+0x9c>
		break;
 800144e:	e03c      	b.n	80014ca <Rx_Verita_engine+0x12a>

	case decode:
		verita_engine = init;
 8001450:	4b21      	ldr	r3, [pc, #132]	; (80014d8 <Rx_Verita_engine+0x138>)
 8001452:	2200      	movs	r2, #0
 8001454:	701a      	strb	r2, [r3, #0]

		//// DATA phase, insert 32bit data into register box
		if(logger[0] <= 0x20){
 8001456:	4b21      	ldr	r3, [pc, #132]	; (80014dc <Rx_Verita_engine+0x13c>)
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	2b20      	cmp	r3, #32
 800145c:	d814      	bhi.n	8001488 <Rx_Verita_engine+0xe8>

			logu.U8[3] = logger[1];
 800145e:	4b1f      	ldr	r3, [pc, #124]	; (80014dc <Rx_Verita_engine+0x13c>)
 8001460:	785b      	ldrb	r3, [r3, #1]
 8001462:	72fb      	strb	r3, [r7, #11]
			logu.U8[2] = logger[2];
 8001464:	4b1d      	ldr	r3, [pc, #116]	; (80014dc <Rx_Verita_engine+0x13c>)
 8001466:	789b      	ldrb	r3, [r3, #2]
 8001468:	72bb      	strb	r3, [r7, #10]
			logu.U8[1] = logger[3];
 800146a:	4b1c      	ldr	r3, [pc, #112]	; (80014dc <Rx_Verita_engine+0x13c>)
 800146c:	78db      	ldrb	r3, [r3, #3]
 800146e:	727b      	strb	r3, [r7, #9]
			logu.U8[0] = logger[4];
 8001470:	4b1a      	ldr	r3, [pc, #104]	; (80014dc <Rx_Verita_engine+0x13c>)
 8001472:	791b      	ldrb	r3, [r3, #4]
 8001474:	723b      	strb	r3, [r7, #8]

			regisk[logger[0]] = logu.U32;
 8001476:	4b19      	ldr	r3, [pc, #100]	; (80014dc <Rx_Verita_engine+0x13c>)
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	683a      	ldr	r2, [r7, #0]
 800147e:	4413      	add	r3, r2
 8001480:	68ba      	ldr	r2, [r7, #8]
 8001482:	601a      	str	r2, [r3, #0]
			return VRT_OK;
 8001484:	2391      	movs	r3, #145	; 0x91
 8001486:	e021      	b.n	80014cc <Rx_Verita_engine+0x12c>
		}

		//// CMD phase, return recieved Command
		if(logger[0] >= 0x90){
 8001488:	4b14      	ldr	r3, [pc, #80]	; (80014dc <Rx_Verita_engine+0x13c>)
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	2b8f      	cmp	r3, #143	; 0x8f
 800148e:	d91b      	bls.n	80014c8 <Rx_Verita_engine+0x128>
			switch(logger[0]){
 8001490:	4b12      	ldr	r3, [pc, #72]	; (80014dc <Rx_Verita_engine+0x13c>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	3b91      	subs	r3, #145	; 0x91
 8001496:	2b03      	cmp	r3, #3
 8001498:	d80a      	bhi.n	80014b0 <Rx_Verita_engine+0x110>
 800149a:	a201      	add	r2, pc, #4	; (adr r2, 80014a0 <Rx_Verita_engine+0x100>)
 800149c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014a0:	080014b5 	.word	0x080014b5
 80014a4:	080014b9 	.word	0x080014b9
 80014a8:	080014bd 	.word	0x080014bd
 80014ac:	080014c1 	.word	0x080014c1
				default:
				case 0x90:
					return VRT_ERROR;
 80014b0:	2390      	movs	r3, #144	; 0x90
 80014b2:	e00b      	b.n	80014cc <Rx_Verita_engine+0x12c>
				case 0x91:
					return VRT_OK;
 80014b4:	2391      	movs	r3, #145	; 0x91
 80014b6:	e009      	b.n	80014cc <Rx_Verita_engine+0x12c>
				case 0x92:
					return VRT_Busy;
 80014b8:	2392      	movs	r3, #146	; 0x92
 80014ba:	e007      	b.n	80014cc <Rx_Verita_engine+0x12c>
				case 0x93:
					return VRT_Regain;
 80014bc:	2393      	movs	r3, #147	; 0x93
 80014be:	e005      	b.n	80014cc <Rx_Verita_engine+0x12c>
				case 0x94:
					return VRT_Next;
 80014c0:	2394      	movs	r3, #148	; 0x94
 80014c2:	e003      	b.n	80014cc <Rx_Verita_engine+0x12c>
		break;
 80014c4:	bf00      	nop
 80014c6:	e000      	b.n	80014ca <Rx_Verita_engine+0x12a>
			}
		}

		break;
 80014c8:	bf00      	nop
	}
	return VRT_ERROR;
 80014ca:	2390      	movs	r3, #144	; 0x90
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3710      	adds	r7, #16
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bc90      	pop	{r4, r7}
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	20000216 	.word	0x20000216
 80014dc:	20000218 	.word	0x20000218

080014e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014e0:	b5b0      	push	{r4, r5, r7, lr}
 80014e2:	b094      	sub	sp, #80	; 0x50
 80014e4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014e6:	f001 fe97 	bl	8003218 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014ea:	f000 f983 	bl	80017f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014ee:	f000 fb1d 	bl	8001b2c <MX_GPIO_Init>
  MX_DMA_Init();
 80014f2:	f000 fafb 	bl	8001aec <MX_DMA_Init>
  MX_USART2_UART_Init();
 80014f6:	f000 faa5 	bl	8001a44 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 80014fa:	f000 fa11 	bl	8001920 <MX_SPI2_Init>
  MX_I2C1_Init();
 80014fe:	f000 f9e1 	bl	80018c4 <MX_I2C1_Init>
  MX_USART6_UART_Init();
 8001502:	f000 fac9 	bl	8001a98 <MX_USART6_UART_Init>
  MX_SPI3_Init();
 8001506:	f000 fa43 	bl	8001990 <MX_SPI3_Init>
  MX_TIM10_Init();
 800150a:	f000 fa77 	bl	80019fc <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim10);
 800150e:	48a0      	ldr	r0, [pc, #640]	; (8001790 <main+0x2b0>)
 8001510:	f006 fa82 	bl	8007a18 <HAL_TIM_Base_Start_IT>

  ili9341_Init();
 8001514:	f001 f866 	bl	80025e4 <ili9341_Init>
  ili9341_DisplayOn();
 8001518:	f001 f848 	bl	80025ac <ili9341_DisplayOn>

//  ILI9341_Init();
//  ILI9341_FillScreen(ILI9341_BLACK);

#ifdef INA219_Wrk
  INA219_INIT_Calibrate(&hi2c1, INA219_ADDR_1);
 800151c:	2180      	movs	r1, #128	; 0x80
 800151e:	489d      	ldr	r0, [pc, #628]	; (8001794 <main+0x2b4>)
 8001520:	f7ff fd66 	bl	8000ff0 <INA219_INIT_Calibrate>
//
//  INA219_INIT(&hi2c1, INA219_ADDR_1, cofgra);
//  INA219_Calibrate(&hi2c1, INA219_ADDR_1);
#endif

  char temp[]="----------------- F411_Verita_Master --------------------\r\n";
 8001524:	4b9c      	ldr	r3, [pc, #624]	; (8001798 <main+0x2b8>)
 8001526:	1d3c      	adds	r4, r7, #4
 8001528:	461d      	mov	r5, r3
 800152a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800152c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800152e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001530:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001532:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001534:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001536:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800153a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 800153e:	1d3b      	adds	r3, r7, #4
 8001540:	4618      	mov	r0, r3
 8001542:	f7fe fe4d 	bl	80001e0 <strlen>
 8001546:	4603      	mov	r3, r0
 8001548:	b29a      	uxth	r2, r3
 800154a:	1d39      	adds	r1, r7, #4
 800154c:	230a      	movs	r3, #10
 800154e:	4893      	ldr	r0, [pc, #588]	; (800179c <main+0x2bc>)
 8001550:	f006 fd05 	bl	8007f5e <HAL_UART_Transmit>

  ili9341_FillRect(50, 20, 50, 20, cl_RED);
 8001554:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001558:	9300      	str	r3, [sp, #0]
 800155a:	2314      	movs	r3, #20
 800155c:	2232      	movs	r2, #50	; 0x32
 800155e:	2114      	movs	r1, #20
 8001560:	2032      	movs	r0, #50	; 0x32
 8001562:	f001 f957 	bl	8002814 <ili9341_FillRect>
  ili9341_FillRect(100, 20, 50, 20, cl_GREEN);
 8001566:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800156a:	9300      	str	r3, [sp, #0]
 800156c:	2314      	movs	r3, #20
 800156e:	2232      	movs	r2, #50	; 0x32
 8001570:	2114      	movs	r1, #20
 8001572:	2064      	movs	r0, #100	; 0x64
 8001574:	f001 f94e 	bl	8002814 <ili9341_FillRect>
  ili9341_FillRect(150, 20, 50, 20, cl_BLUE);
 8001578:	231f      	movs	r3, #31
 800157a:	9300      	str	r3, [sp, #0]
 800157c:	2314      	movs	r3, #20
 800157e:	2232      	movs	r2, #50	; 0x32
 8001580:	2114      	movs	r1, #20
 8001582:	2096      	movs	r0, #150	; 0x96
 8001584:	f001 f946 	bl	8002814 <ili9341_FillRect>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //// -------- buzzer & Button -----------------
	  Button_machine();
 8001588:	f000 fbf4 	bl	8001d74 <Button_machine>

	  if (HAL_GetTick() >= timestamp_buzbtn){
 800158c:	f001 feaa 	bl	80032e4 <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	4b83      	ldr	r3, [pc, #524]	; (80017a0 <main+0x2c0>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	429a      	cmp	r2, r3
 8001598:	d306      	bcc.n	80015a8 <main+0xc8>
		timestamp_buzbtn += 10;
 800159a:	4b81      	ldr	r3, [pc, #516]	; (80017a0 <main+0x2c0>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	330a      	adds	r3, #10
 80015a0:	4a7f      	ldr	r2, [pc, #508]	; (80017a0 <main+0x2c0>)
 80015a2:	6013      	str	r3, [r2, #0]

		running_box();
 80015a4:	f000 fba0 	bl	8001ce8 <running_box>
		//buzzer_scream_cnt();
	  }// timestamp_dis
	  ////  ------------- UART Recieve --------------------------
	  HAL_UART_Receive_DMA(&huart6, &RxBufferMtCl[0], 10);
 80015a8:	220a      	movs	r2, #10
 80015aa:	497e      	ldr	r1, [pc, #504]	; (80017a4 <main+0x2c4>)
 80015ac:	487e      	ldr	r0, [pc, #504]	; (80017a8 <main+0x2c8>)
 80015ae:	f006 fd68 	bl	8008082 <HAL_UART_Receive_DMA>
	  engst = Rx_Verita_engine(RxBufferMtCl, verita_regis);
 80015b2:	497e      	ldr	r1, [pc, #504]	; (80017ac <main+0x2cc>)
 80015b4:	487b      	ldr	r0, [pc, #492]	; (80017a4 <main+0x2c4>)
 80015b6:	f7ff fef3 	bl	80013a0 <Rx_Verita_engine>
 80015ba:	4603      	mov	r3, r0
 80015bc:	461a      	mov	r2, r3
 80015be:	4b7c      	ldr	r3, [pc, #496]	; (80017b0 <main+0x2d0>)
 80015c0:	701a      	strb	r2, [r3, #0]
	  //// ----------------------------------------------------

	  if (HAL_GetTick() >= timestamp_one){
 80015c2:	f001 fe8f 	bl	80032e4 <HAL_GetTick>
 80015c6:	4602      	mov	r2, r0
 80015c8:	4b7a      	ldr	r3, [pc, #488]	; (80017b4 <main+0x2d4>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d3db      	bcc.n	8001588 <main+0xa8>
		  timestamp_one += 1000;
 80015d0:	4b78      	ldr	r3, [pc, #480]	; (80017b4 <main+0x2d4>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80015d8:	4a76      	ldr	r2, [pc, #472]	; (80017b4 <main+0x2d4>)
 80015da:	6013      	str	r3, [r2, #0]
		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80015dc:	2120      	movs	r1, #32
 80015de:	4876      	ldr	r0, [pc, #472]	; (80017b8 <main+0x2d8>)
 80015e0:	f002 fd6f 	bl	80040c2 <HAL_GPIO_TogglePin>
#ifdef INA219_Wrk

		  //INATT.U16[1] = INA219Read_cx(&hi2c1, INA219_ADDR_1, INA219_RG_Config);
		  //INATT.U16[2] = INA219Read_cx(&hi2c1, INA219_ADDR_1, INA219_RG_Current);

		  inata.Bus_V   = INA219Read_BusV(&hi2c1, INA219_ADDR_1);
 80015e4:	2180      	movs	r1, #128	; 0x80
 80015e6:	486b      	ldr	r0, [pc, #428]	; (8001794 <main+0x2b4>)
 80015e8:	f7ff fdb2 	bl	8001150 <INA219Read_BusV>
 80015ec:	4603      	mov	r3, r0
 80015ee:	461a      	mov	r2, r3
 80015f0:	4b72      	ldr	r3, [pc, #456]	; (80017bc <main+0x2dc>)
 80015f2:	821a      	strh	r2, [r3, #16]
		  inata.CURRENT = INA219Read_Current(&hi2c1, INA219_ADDR_1);
 80015f4:	2180      	movs	r1, #128	; 0x80
 80015f6:	4867      	ldr	r0, [pc, #412]	; (8001794 <main+0x2b4>)
 80015f8:	f7ff fdd2 	bl	80011a0 <INA219Read_Current>
 80015fc:	4603      	mov	r3, r0
 80015fe:	b21a      	sxth	r2, r3
 8001600:	4b6e      	ldr	r3, [pc, #440]	; (80017bc <main+0x2dc>)
 8001602:	811a      	strh	r2, [r3, #8]
		  inata.POWER   = INA219Read_Power(&hi2c1, INA219_ADDR_1);
 8001604:	2180      	movs	r1, #128	; 0x80
 8001606:	4863      	ldr	r0, [pc, #396]	; (8001794 <main+0x2b4>)
 8001608:	f7ff fe2a 	bl	8001260 <INA219Read_Power>
 800160c:	eef0 7a40 	vmov.f32	s15, s0
 8001610:	4b6a      	ldr	r3, [pc, #424]	; (80017bc <main+0x2dc>)
 8001612:	edc3 7a03 	vstr	s15, [r3, #12]
		  inata.SHUNT_V = INA219Read_ShuntV(&hi2c1, INA219_ADDR_1);
 8001616:	2180      	movs	r1, #128	; 0x80
 8001618:	485e      	ldr	r0, [pc, #376]	; (8001794 <main+0x2b4>)
 800161a:	f7ff fde5 	bl	80011e8 <INA219Read_ShuntV>
 800161e:	eef0 7a40 	vmov.f32	s15, s0
 8001622:	4b66      	ldr	r3, [pc, #408]	; (80017bc <main+0x2dc>)
 8001624:	edc3 7a01 	vstr	s15, [r3, #4]

		  inata.Calibra =  INA219Read_cx(&hi2c1, INA219_ADDR_1, INA219_RG_Calibra);
 8001628:	2205      	movs	r2, #5
 800162a:	2180      	movs	r1, #128	; 0x80
 800162c:	4859      	ldr	r0, [pc, #356]	; (8001794 <main+0x2b4>)
 800162e:	f7ff fcb5 	bl	8000f9c <INA219Read_cx>
 8001632:	4603      	mov	r3, r0
 8001634:	461a      	mov	r2, r3
 8001636:	4b61      	ldr	r3, [pc, #388]	; (80017bc <main+0x2dc>)
 8001638:	825a      	strh	r2, [r3, #18]
		  inata.Config = INA219Read_cx(&hi2c1, INA219_ADDR_1, INA219_RG_Config);
 800163a:	2200      	movs	r2, #0
 800163c:	2180      	movs	r1, #128	; 0x80
 800163e:	4855      	ldr	r0, [pc, #340]	; (8001794 <main+0x2b4>)
 8001640:	f7ff fcac 	bl	8000f9c <INA219Read_cx>
 8001644:	4603      	mov	r3, r0
 8001646:	461a      	mov	r2, r3
 8001648:	4b5c      	ldr	r3, [pc, #368]	; (80017bc <main+0x2dc>)
 800164a:	801a      	strh	r2, [r3, #0]

		  sprintf(TextDispBuffer,"calibrator:%4X", inata.Calibra);
 800164c:	4b5b      	ldr	r3, [pc, #364]	; (80017bc <main+0x2dc>)
 800164e:	8a5b      	ldrh	r3, [r3, #18]
 8001650:	461a      	mov	r2, r3
 8001652:	495b      	ldr	r1, [pc, #364]	; (80017c0 <main+0x2e0>)
 8001654:	485b      	ldr	r0, [pc, #364]	; (80017c4 <main+0x2e4>)
 8001656:	f008 fadd 	bl	8009c14 <siprintf>
		  ili9341_WriteString(20, 50, TextDispBuffer, Font12, cl_GREENYELLOW, cl_BLACK);
 800165a:	4b5b      	ldr	r3, [pc, #364]	; (80017c8 <main+0x2e8>)
 800165c:	2200      	movs	r2, #0
 800165e:	9202      	str	r2, [sp, #8]
 8001660:	f64a 72e5 	movw	r2, #45029	; 0xafe5
 8001664:	9201      	str	r2, [sp, #4]
 8001666:	685a      	ldr	r2, [r3, #4]
 8001668:	9200      	str	r2, [sp, #0]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a55      	ldr	r2, [pc, #340]	; (80017c4 <main+0x2e4>)
 800166e:	2132      	movs	r1, #50	; 0x32
 8001670:	2014      	movs	r0, #20
 8001672:	f001 f9cc 	bl	8002a0e <ili9341_WriteString>

		  sprintf(TextDispBuffer,"V mV: %d    ", inata.Bus_V);
 8001676:	4b51      	ldr	r3, [pc, #324]	; (80017bc <main+0x2dc>)
 8001678:	8a1b      	ldrh	r3, [r3, #16]
 800167a:	461a      	mov	r2, r3
 800167c:	4953      	ldr	r1, [pc, #332]	; (80017cc <main+0x2ec>)
 800167e:	4851      	ldr	r0, [pc, #324]	; (80017c4 <main+0x2e4>)
 8001680:	f008 fac8 	bl	8009c14 <siprintf>
		  ili9341_WriteString(20, 70, TextDispBuffer, Font16, cl_CYAN, cl_BLACK);
 8001684:	4b52      	ldr	r3, [pc, #328]	; (80017d0 <main+0x2f0>)
 8001686:	2200      	movs	r2, #0
 8001688:	9202      	str	r2, [sp, #8]
 800168a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800168e:	9201      	str	r2, [sp, #4]
 8001690:	685a      	ldr	r2, [r3, #4]
 8001692:	9200      	str	r2, [sp, #0]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a4b      	ldr	r2, [pc, #300]	; (80017c4 <main+0x2e4>)
 8001698:	2146      	movs	r1, #70	; 0x46
 800169a:	2014      	movs	r0, #20
 800169c:	f001 f9b7 	bl	8002a0e <ili9341_WriteString>

		  sprintf(TextDispBuffer,"I mA: %d    ", inata.CURRENT);
 80016a0:	4b46      	ldr	r3, [pc, #280]	; (80017bc <main+0x2dc>)
 80016a2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80016a6:	461a      	mov	r2, r3
 80016a8:	494a      	ldr	r1, [pc, #296]	; (80017d4 <main+0x2f4>)
 80016aa:	4846      	ldr	r0, [pc, #280]	; (80017c4 <main+0x2e4>)
 80016ac:	f008 fab2 	bl	8009c14 <siprintf>
		  ili9341_WriteString(20, 95, TextDispBuffer, Font16, cl_CYAN, cl_BLACK);
 80016b0:	4b47      	ldr	r3, [pc, #284]	; (80017d0 <main+0x2f0>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	9202      	str	r2, [sp, #8]
 80016b6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80016ba:	9201      	str	r2, [sp, #4]
 80016bc:	685a      	ldr	r2, [r3, #4]
 80016be:	9200      	str	r2, [sp, #0]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a40      	ldr	r2, [pc, #256]	; (80017c4 <main+0x2e4>)
 80016c4:	215f      	movs	r1, #95	; 0x5f
 80016c6:	2014      	movs	r0, #20
 80016c8:	f001 f9a1 	bl	8002a0e <ili9341_WriteString>

		  sprintf(TextDispBuffer,"P mW: %.2f  ", inata.POWER);
 80016cc:	4b3b      	ldr	r3, [pc, #236]	; (80017bc <main+0x2dc>)
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7fe ff41 	bl	8000558 <__aeabi_f2d>
 80016d6:	4602      	mov	r2, r0
 80016d8:	460b      	mov	r3, r1
 80016da:	493f      	ldr	r1, [pc, #252]	; (80017d8 <main+0x2f8>)
 80016dc:	4839      	ldr	r0, [pc, #228]	; (80017c4 <main+0x2e4>)
 80016de:	f008 fa99 	bl	8009c14 <siprintf>
		  ili9341_WriteString(20, 120, TextDispBuffer, Font16, cl_CYAN, cl_BLACK);
 80016e2:	4b3b      	ldr	r3, [pc, #236]	; (80017d0 <main+0x2f0>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	9202      	str	r2, [sp, #8]
 80016e8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80016ec:	9201      	str	r2, [sp, #4]
 80016ee:	685a      	ldr	r2, [r3, #4]
 80016f0:	9200      	str	r2, [sp, #0]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a33      	ldr	r2, [pc, #204]	; (80017c4 <main+0x2e4>)
 80016f6:	2178      	movs	r1, #120	; 0x78
 80016f8:	2014      	movs	r0, #20
 80016fa:	f001 f988 	bl	8002a0e <ili9341_WriteString>
#endif

		  mcp_read.raw[0] = MCP3208_READ_8_DataSPI(&hspi3, M8_CH0);
 80016fe:	2118      	movs	r1, #24
 8001700:	4836      	ldr	r0, [pc, #216]	; (80017dc <main+0x2fc>)
 8001702:	f7ff fdf7 	bl	80012f4 <MCP3208_READ_8_DataSPI>
 8001706:	4603      	mov	r3, r0
 8001708:	461a      	mov	r2, r3
 800170a:	4b35      	ldr	r3, [pc, #212]	; (80017e0 <main+0x300>)
 800170c:	801a      	strh	r2, [r3, #0]
		  mcp_read.cv[0] = MCP320x_ADCbit_to_Volt(mcp_read.raw[0]);
 800170e:	4b34      	ldr	r3, [pc, #208]	; (80017e0 <main+0x300>)
 8001710:	881b      	ldrh	r3, [r3, #0]
 8001712:	4618      	mov	r0, r3
 8001714:	f7ff fe24 	bl	8001360 <MCP320x_ADCbit_to_Volt>
 8001718:	eef0 7a40 	vmov.f32	s15, s0
 800171c:	4b30      	ldr	r3, [pc, #192]	; (80017e0 <main+0x300>)
 800171e:	edc3 7a02 	vstr	s15, [r3, #8]
		  sprintf(TextDispBuffer,"MCP : %.2f  ", mcp_read.cv[0]);
 8001722:	4b2f      	ldr	r3, [pc, #188]	; (80017e0 <main+0x300>)
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	4618      	mov	r0, r3
 8001728:	f7fe ff16 	bl	8000558 <__aeabi_f2d>
 800172c:	4602      	mov	r2, r0
 800172e:	460b      	mov	r3, r1
 8001730:	492c      	ldr	r1, [pc, #176]	; (80017e4 <main+0x304>)
 8001732:	4824      	ldr	r0, [pc, #144]	; (80017c4 <main+0x2e4>)
 8001734:	f008 fa6e 	bl	8009c14 <siprintf>
		  ili9341_WriteString(20, 145, TextDispBuffer, Font16, cl_CYAN, cl_BLACK);
 8001738:	4b25      	ldr	r3, [pc, #148]	; (80017d0 <main+0x2f0>)
 800173a:	2200      	movs	r2, #0
 800173c:	9202      	str	r2, [sp, #8]
 800173e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001742:	9201      	str	r2, [sp, #4]
 8001744:	685a      	ldr	r2, [r3, #4]
 8001746:	9200      	str	r2, [sp, #0]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a1e      	ldr	r2, [pc, #120]	; (80017c4 <main+0x2e4>)
 800174c:	2191      	movs	r1, #145	; 0x91
 800174e:	2014      	movs	r0, #20
 8001750:	f001 f95d 	bl	8002a0e <ili9341_WriteString>

		  sprintf(TextDispBuffer,"btn %X %X %d",btn_read[1], btn_read[2], btn_cnt);
 8001754:	4b24      	ldr	r3, [pc, #144]	; (80017e8 <main+0x308>)
 8001756:	785b      	ldrb	r3, [r3, #1]
 8001758:	461a      	mov	r2, r3
 800175a:	4b23      	ldr	r3, [pc, #140]	; (80017e8 <main+0x308>)
 800175c:	789b      	ldrb	r3, [r3, #2]
 800175e:	4619      	mov	r1, r3
 8001760:	4b22      	ldr	r3, [pc, #136]	; (80017ec <main+0x30c>)
 8001762:	881b      	ldrh	r3, [r3, #0]
 8001764:	9300      	str	r3, [sp, #0]
 8001766:	460b      	mov	r3, r1
 8001768:	4921      	ldr	r1, [pc, #132]	; (80017f0 <main+0x310>)
 800176a:	4816      	ldr	r0, [pc, #88]	; (80017c4 <main+0x2e4>)
 800176c:	f008 fa52 	bl	8009c14 <siprintf>
		  ili9341_WriteString(170, 50, TextDispBuffer, Font16, cl_YELLOW, cl_BLACK);
 8001770:	4b17      	ldr	r3, [pc, #92]	; (80017d0 <main+0x2f0>)
 8001772:	2200      	movs	r2, #0
 8001774:	9202      	str	r2, [sp, #8]
 8001776:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800177a:	9201      	str	r2, [sp, #4]
 800177c:	685a      	ldr	r2, [r3, #4]
 800177e:	9200      	str	r2, [sp, #0]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a10      	ldr	r2, [pc, #64]	; (80017c4 <main+0x2e4>)
 8001784:	2132      	movs	r1, #50	; 0x32
 8001786:	20aa      	movs	r0, #170	; 0xaa
 8001788:	f001 f941 	bl	8002a0e <ili9341_WriteString>
	  Button_machine();
 800178c:	e6fc      	b.n	8001588 <main+0xa8>
 800178e:	bf00      	nop
 8001790:	20000328 	.word	0x20000328
 8001794:	20000224 	.word	0x20000224
 8001798:	0800c268 	.word	0x0800c268
 800179c:	20000370 	.word	0x20000370
 80017a0:	2000053c 	.word	0x2000053c
 80017a4:	200004bc 	.word	0x200004bc
 80017a8:	200003b4 	.word	0x200003b4
 80017ac:	200004c8 	.word	0x200004c8
 80017b0:	200004c6 	.word	0x200004c6
 80017b4:	20000538 	.word	0x20000538
 80017b8:	40020000 	.word	0x40020000
 80017bc:	20000508 	.word	0x20000508
 80017c0:	0800c208 	.word	0x0800c208
 80017c4:	20000458 	.word	0x20000458
 80017c8:	2000000c 	.word	0x2000000c
 80017cc:	0800c218 	.word	0x0800c218
 80017d0:	20000014 	.word	0x20000014
 80017d4:	0800c228 	.word	0x0800c228
 80017d8:	0800c238 	.word	0x0800c238
 80017dc:	200002d0 	.word	0x200002d0
 80017e0:	20000520 	.word	0x20000520
 80017e4:	0800c248 	.word	0x0800c248
 80017e8:	2000054c 	.word	0x2000054c
 80017ec:	20000550 	.word	0x20000550
 80017f0:	0800c258 	.word	0x0800c258

080017f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b094      	sub	sp, #80	; 0x50
 80017f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017fa:	f107 0320 	add.w	r3, r7, #32
 80017fe:	2230      	movs	r2, #48	; 0x30
 8001800:	2100      	movs	r1, #0
 8001802:	4618      	mov	r0, r3
 8001804:	f007 fd94 	bl	8009330 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001808:	f107 030c 	add.w	r3, r7, #12
 800180c:	2200      	movs	r2, #0
 800180e:	601a      	str	r2, [r3, #0]
 8001810:	605a      	str	r2, [r3, #4]
 8001812:	609a      	str	r2, [r3, #8]
 8001814:	60da      	str	r2, [r3, #12]
 8001816:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001818:	2300      	movs	r3, #0
 800181a:	60bb      	str	r3, [r7, #8]
 800181c:	4b27      	ldr	r3, [pc, #156]	; (80018bc <SystemClock_Config+0xc8>)
 800181e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001820:	4a26      	ldr	r2, [pc, #152]	; (80018bc <SystemClock_Config+0xc8>)
 8001822:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001826:	6413      	str	r3, [r2, #64]	; 0x40
 8001828:	4b24      	ldr	r3, [pc, #144]	; (80018bc <SystemClock_Config+0xc8>)
 800182a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001830:	60bb      	str	r3, [r7, #8]
 8001832:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001834:	2300      	movs	r3, #0
 8001836:	607b      	str	r3, [r7, #4]
 8001838:	4b21      	ldr	r3, [pc, #132]	; (80018c0 <SystemClock_Config+0xcc>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a20      	ldr	r2, [pc, #128]	; (80018c0 <SystemClock_Config+0xcc>)
 800183e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001842:	6013      	str	r3, [r2, #0]
 8001844:	4b1e      	ldr	r3, [pc, #120]	; (80018c0 <SystemClock_Config+0xcc>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800184c:	607b      	str	r3, [r7, #4]
 800184e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001850:	2302      	movs	r3, #2
 8001852:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001854:	2301      	movs	r3, #1
 8001856:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001858:	2310      	movs	r3, #16
 800185a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800185c:	2302      	movs	r3, #2
 800185e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001860:	2300      	movs	r3, #0
 8001862:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001864:	2308      	movs	r3, #8
 8001866:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001868:	2364      	movs	r3, #100	; 0x64
 800186a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800186c:	2302      	movs	r3, #2
 800186e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001870:	2304      	movs	r3, #4
 8001872:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001874:	f107 0320 	add.w	r3, r7, #32
 8001878:	4618      	mov	r0, r3
 800187a:	f005 f8ef 	bl	8006a5c <HAL_RCC_OscConfig>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001884:	f000 fb54 	bl	8001f30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001888:	230f      	movs	r3, #15
 800188a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800188c:	2302      	movs	r3, #2
 800188e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001890:	2300      	movs	r3, #0
 8001892:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001894:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001898:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800189a:	2300      	movs	r3, #0
 800189c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800189e:	f107 030c 	add.w	r3, r7, #12
 80018a2:	2103      	movs	r1, #3
 80018a4:	4618      	mov	r0, r3
 80018a6:	f005 fb51 	bl	8006f4c <HAL_RCC_ClockConfig>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80018b0:	f000 fb3e 	bl	8001f30 <Error_Handler>
  }
}
 80018b4:	bf00      	nop
 80018b6:	3750      	adds	r7, #80	; 0x50
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	40023800 	.word	0x40023800
 80018c0:	40007000 	.word	0x40007000

080018c4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80018c8:	4b12      	ldr	r3, [pc, #72]	; (8001914 <MX_I2C1_Init+0x50>)
 80018ca:	4a13      	ldr	r2, [pc, #76]	; (8001918 <MX_I2C1_Init+0x54>)
 80018cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80018ce:	4b11      	ldr	r3, [pc, #68]	; (8001914 <MX_I2C1_Init+0x50>)
 80018d0:	4a12      	ldr	r2, [pc, #72]	; (800191c <MX_I2C1_Init+0x58>)
 80018d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018d4:	4b0f      	ldr	r3, [pc, #60]	; (8001914 <MX_I2C1_Init+0x50>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80018da:	4b0e      	ldr	r3, [pc, #56]	; (8001914 <MX_I2C1_Init+0x50>)
 80018dc:	2200      	movs	r2, #0
 80018de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018e0:	4b0c      	ldr	r3, [pc, #48]	; (8001914 <MX_I2C1_Init+0x50>)
 80018e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018e6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018e8:	4b0a      	ldr	r3, [pc, #40]	; (8001914 <MX_I2C1_Init+0x50>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80018ee:	4b09      	ldr	r3, [pc, #36]	; (8001914 <MX_I2C1_Init+0x50>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018f4:	4b07      	ldr	r3, [pc, #28]	; (8001914 <MX_I2C1_Init+0x50>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018fa:	4b06      	ldr	r3, [pc, #24]	; (8001914 <MX_I2C1_Init+0x50>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001900:	4804      	ldr	r0, [pc, #16]	; (8001914 <MX_I2C1_Init+0x50>)
 8001902:	f002 fc11 	bl	8004128 <HAL_I2C_Init>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800190c:	f000 fb10 	bl	8001f30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001910:	bf00      	nop
 8001912:	bd80      	pop	{r7, pc}
 8001914:	20000224 	.word	0x20000224
 8001918:	40005400 	.word	0x40005400
 800191c:	00061a80 	.word	0x00061a80

08001920 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001924:	4b18      	ldr	r3, [pc, #96]	; (8001988 <MX_SPI2_Init+0x68>)
 8001926:	4a19      	ldr	r2, [pc, #100]	; (800198c <MX_SPI2_Init+0x6c>)
 8001928:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800192a:	4b17      	ldr	r3, [pc, #92]	; (8001988 <MX_SPI2_Init+0x68>)
 800192c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001930:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001932:	4b15      	ldr	r3, [pc, #84]	; (8001988 <MX_SPI2_Init+0x68>)
 8001934:	2200      	movs	r2, #0
 8001936:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8001938:	4b13      	ldr	r3, [pc, #76]	; (8001988 <MX_SPI2_Init+0x68>)
 800193a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800193e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001940:	4b11      	ldr	r3, [pc, #68]	; (8001988 <MX_SPI2_Init+0x68>)
 8001942:	2200      	movs	r2, #0
 8001944:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001946:	4b10      	ldr	r3, [pc, #64]	; (8001988 <MX_SPI2_Init+0x68>)
 8001948:	2200      	movs	r2, #0
 800194a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800194c:	4b0e      	ldr	r3, [pc, #56]	; (8001988 <MX_SPI2_Init+0x68>)
 800194e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001952:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001954:	4b0c      	ldr	r3, [pc, #48]	; (8001988 <MX_SPI2_Init+0x68>)
 8001956:	2210      	movs	r2, #16
 8001958:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800195a:	4b0b      	ldr	r3, [pc, #44]	; (8001988 <MX_SPI2_Init+0x68>)
 800195c:	2200      	movs	r2, #0
 800195e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001960:	4b09      	ldr	r3, [pc, #36]	; (8001988 <MX_SPI2_Init+0x68>)
 8001962:	2200      	movs	r2, #0
 8001964:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001966:	4b08      	ldr	r3, [pc, #32]	; (8001988 <MX_SPI2_Init+0x68>)
 8001968:	2200      	movs	r2, #0
 800196a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800196c:	4b06      	ldr	r3, [pc, #24]	; (8001988 <MX_SPI2_Init+0x68>)
 800196e:	220a      	movs	r2, #10
 8001970:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001972:	4805      	ldr	r0, [pc, #20]	; (8001988 <MX_SPI2_Init+0x68>)
 8001974:	f005 fd0a 	bl	800738c <HAL_SPI_Init>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 800197e:	f000 fad7 	bl	8001f30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001982:	bf00      	nop
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	20000278 	.word	0x20000278
 800198c:	40003800 	.word	0x40003800

08001990 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001994:	4b17      	ldr	r3, [pc, #92]	; (80019f4 <MX_SPI3_Init+0x64>)
 8001996:	4a18      	ldr	r2, [pc, #96]	; (80019f8 <MX_SPI3_Init+0x68>)
 8001998:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800199a:	4b16      	ldr	r3, [pc, #88]	; (80019f4 <MX_SPI3_Init+0x64>)
 800199c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80019a0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80019a2:	4b14      	ldr	r3, [pc, #80]	; (80019f4 <MX_SPI3_Init+0x64>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80019a8:	4b12      	ldr	r3, [pc, #72]	; (80019f4 <MX_SPI3_Init+0x64>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019ae:	4b11      	ldr	r3, [pc, #68]	; (80019f4 <MX_SPI3_Init+0x64>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019b4:	4b0f      	ldr	r3, [pc, #60]	; (80019f4 <MX_SPI3_Init+0x64>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80019ba:	4b0e      	ldr	r3, [pc, #56]	; (80019f4 <MX_SPI3_Init+0x64>)
 80019bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019c0:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80019c2:	4b0c      	ldr	r3, [pc, #48]	; (80019f4 <MX_SPI3_Init+0x64>)
 80019c4:	2220      	movs	r2, #32
 80019c6:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019c8:	4b0a      	ldr	r3, [pc, #40]	; (80019f4 <MX_SPI3_Init+0x64>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80019ce:	4b09      	ldr	r3, [pc, #36]	; (80019f4 <MX_SPI3_Init+0x64>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019d4:	4b07      	ldr	r3, [pc, #28]	; (80019f4 <MX_SPI3_Init+0x64>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80019da:	4b06      	ldr	r3, [pc, #24]	; (80019f4 <MX_SPI3_Init+0x64>)
 80019dc:	220a      	movs	r2, #10
 80019de:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80019e0:	4804      	ldr	r0, [pc, #16]	; (80019f4 <MX_SPI3_Init+0x64>)
 80019e2:	f005 fcd3 	bl	800738c <HAL_SPI_Init>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80019ec:	f000 faa0 	bl	8001f30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80019f0:	bf00      	nop
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	200002d0 	.word	0x200002d0
 80019f8:	40003c00 	.word	0x40003c00

080019fc <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001a00:	4b0e      	ldr	r3, [pc, #56]	; (8001a3c <MX_TIM10_Init+0x40>)
 8001a02:	4a0f      	ldr	r2, [pc, #60]	; (8001a40 <MX_TIM10_Init+0x44>)
 8001a04:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 999;
 8001a06:	4b0d      	ldr	r3, [pc, #52]	; (8001a3c <MX_TIM10_Init+0x40>)
 8001a08:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a0c:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a0e:	4b0b      	ldr	r3, [pc, #44]	; (8001a3c <MX_TIM10_Init+0x40>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 4999;
 8001a14:	4b09      	ldr	r3, [pc, #36]	; (8001a3c <MX_TIM10_Init+0x40>)
 8001a16:	f241 3287 	movw	r2, #4999	; 0x1387
 8001a1a:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a1c:	4b07      	ldr	r3, [pc, #28]	; (8001a3c <MX_TIM10_Init+0x40>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a22:	4b06      	ldr	r3, [pc, #24]	; (8001a3c <MX_TIM10_Init+0x40>)
 8001a24:	2280      	movs	r2, #128	; 0x80
 8001a26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001a28:	4804      	ldr	r0, [pc, #16]	; (8001a3c <MX_TIM10_Init+0x40>)
 8001a2a:	f005 ffa5 	bl	8007978 <HAL_TIM_Base_Init>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8001a34:	f000 fa7c 	bl	8001f30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001a38:	bf00      	nop
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	20000328 	.word	0x20000328
 8001a40:	40014400 	.word	0x40014400

08001a44 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a48:	4b11      	ldr	r3, [pc, #68]	; (8001a90 <MX_USART2_UART_Init+0x4c>)
 8001a4a:	4a12      	ldr	r2, [pc, #72]	; (8001a94 <MX_USART2_UART_Init+0x50>)
 8001a4c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a4e:	4b10      	ldr	r3, [pc, #64]	; (8001a90 <MX_USART2_UART_Init+0x4c>)
 8001a50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a54:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a56:	4b0e      	ldr	r3, [pc, #56]	; (8001a90 <MX_USART2_UART_Init+0x4c>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a5c:	4b0c      	ldr	r3, [pc, #48]	; (8001a90 <MX_USART2_UART_Init+0x4c>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a62:	4b0b      	ldr	r3, [pc, #44]	; (8001a90 <MX_USART2_UART_Init+0x4c>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a68:	4b09      	ldr	r3, [pc, #36]	; (8001a90 <MX_USART2_UART_Init+0x4c>)
 8001a6a:	220c      	movs	r2, #12
 8001a6c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a6e:	4b08      	ldr	r3, [pc, #32]	; (8001a90 <MX_USART2_UART_Init+0x4c>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a74:	4b06      	ldr	r3, [pc, #24]	; (8001a90 <MX_USART2_UART_Init+0x4c>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a7a:	4805      	ldr	r0, [pc, #20]	; (8001a90 <MX_USART2_UART_Init+0x4c>)
 8001a7c:	f006 fa22 	bl	8007ec4 <HAL_UART_Init>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001a86:	f000 fa53 	bl	8001f30 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a8a:	bf00      	nop
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	20000370 	.word	0x20000370
 8001a94:	40004400 	.word	0x40004400

08001a98 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001a9c:	4b11      	ldr	r3, [pc, #68]	; (8001ae4 <MX_USART6_UART_Init+0x4c>)
 8001a9e:	4a12      	ldr	r2, [pc, #72]	; (8001ae8 <MX_USART6_UART_Init+0x50>)
 8001aa0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001aa2:	4b10      	ldr	r3, [pc, #64]	; (8001ae4 <MX_USART6_UART_Init+0x4c>)
 8001aa4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001aa8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001aaa:	4b0e      	ldr	r3, [pc, #56]	; (8001ae4 <MX_USART6_UART_Init+0x4c>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001ab0:	4b0c      	ldr	r3, [pc, #48]	; (8001ae4 <MX_USART6_UART_Init+0x4c>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001ab6:	4b0b      	ldr	r3, [pc, #44]	; (8001ae4 <MX_USART6_UART_Init+0x4c>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001abc:	4b09      	ldr	r3, [pc, #36]	; (8001ae4 <MX_USART6_UART_Init+0x4c>)
 8001abe:	220c      	movs	r2, #12
 8001ac0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ac2:	4b08      	ldr	r3, [pc, #32]	; (8001ae4 <MX_USART6_UART_Init+0x4c>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ac8:	4b06      	ldr	r3, [pc, #24]	; (8001ae4 <MX_USART6_UART_Init+0x4c>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001ace:	4805      	ldr	r0, [pc, #20]	; (8001ae4 <MX_USART6_UART_Init+0x4c>)
 8001ad0:	f006 f9f8 	bl	8007ec4 <HAL_UART_Init>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001ada:	f000 fa29 	bl	8001f30 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001ade:	bf00      	nop
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	200003b4 	.word	0x200003b4
 8001ae8:	40011400 	.word	0x40011400

08001aec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001af2:	2300      	movs	r3, #0
 8001af4:	607b      	str	r3, [r7, #4]
 8001af6:	4b0c      	ldr	r3, [pc, #48]	; (8001b28 <MX_DMA_Init+0x3c>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afa:	4a0b      	ldr	r2, [pc, #44]	; (8001b28 <MX_DMA_Init+0x3c>)
 8001afc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b00:	6313      	str	r3, [r2, #48]	; 0x30
 8001b02:	4b09      	ldr	r3, [pc, #36]	; (8001b28 <MX_DMA_Init+0x3c>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b0a:	607b      	str	r3, [r7, #4]
 8001b0c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001b0e:	2200      	movs	r2, #0
 8001b10:	2100      	movs	r1, #0
 8001b12:	2039      	movs	r0, #57	; 0x39
 8001b14:	f001 fcf1 	bl	80034fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001b18:	2039      	movs	r0, #57	; 0x39
 8001b1a:	f001 fd0a 	bl	8003532 <HAL_NVIC_EnableIRQ>

}
 8001b1e:	bf00      	nop
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	40023800 	.word	0x40023800

08001b2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b08a      	sub	sp, #40	; 0x28
 8001b30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b32:	f107 0314 	add.w	r3, r7, #20
 8001b36:	2200      	movs	r2, #0
 8001b38:	601a      	str	r2, [r3, #0]
 8001b3a:	605a      	str	r2, [r3, #4]
 8001b3c:	609a      	str	r2, [r3, #8]
 8001b3e:	60da      	str	r2, [r3, #12]
 8001b40:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b42:	2300      	movs	r3, #0
 8001b44:	613b      	str	r3, [r7, #16]
 8001b46:	4b63      	ldr	r3, [pc, #396]	; (8001cd4 <MX_GPIO_Init+0x1a8>)
 8001b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4a:	4a62      	ldr	r2, [pc, #392]	; (8001cd4 <MX_GPIO_Init+0x1a8>)
 8001b4c:	f043 0304 	orr.w	r3, r3, #4
 8001b50:	6313      	str	r3, [r2, #48]	; 0x30
 8001b52:	4b60      	ldr	r3, [pc, #384]	; (8001cd4 <MX_GPIO_Init+0x1a8>)
 8001b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b56:	f003 0304 	and.w	r3, r3, #4
 8001b5a:	613b      	str	r3, [r7, #16]
 8001b5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b5e:	2300      	movs	r3, #0
 8001b60:	60fb      	str	r3, [r7, #12]
 8001b62:	4b5c      	ldr	r3, [pc, #368]	; (8001cd4 <MX_GPIO_Init+0x1a8>)
 8001b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b66:	4a5b      	ldr	r2, [pc, #364]	; (8001cd4 <MX_GPIO_Init+0x1a8>)
 8001b68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b6e:	4b59      	ldr	r3, [pc, #356]	; (8001cd4 <MX_GPIO_Init+0x1a8>)
 8001b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b76:	60fb      	str	r3, [r7, #12]
 8001b78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	60bb      	str	r3, [r7, #8]
 8001b7e:	4b55      	ldr	r3, [pc, #340]	; (8001cd4 <MX_GPIO_Init+0x1a8>)
 8001b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b82:	4a54      	ldr	r2, [pc, #336]	; (8001cd4 <MX_GPIO_Init+0x1a8>)
 8001b84:	f043 0301 	orr.w	r3, r3, #1
 8001b88:	6313      	str	r3, [r2, #48]	; 0x30
 8001b8a:	4b52      	ldr	r3, [pc, #328]	; (8001cd4 <MX_GPIO_Init+0x1a8>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8e:	f003 0301 	and.w	r3, r3, #1
 8001b92:	60bb      	str	r3, [r7, #8]
 8001b94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b96:	2300      	movs	r3, #0
 8001b98:	607b      	str	r3, [r7, #4]
 8001b9a:	4b4e      	ldr	r3, [pc, #312]	; (8001cd4 <MX_GPIO_Init+0x1a8>)
 8001b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9e:	4a4d      	ldr	r2, [pc, #308]	; (8001cd4 <MX_GPIO_Init+0x1a8>)
 8001ba0:	f043 0302 	orr.w	r3, r3, #2
 8001ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ba6:	4b4b      	ldr	r3, [pc, #300]	; (8001cd4 <MX_GPIO_Init+0x1a8>)
 8001ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001baa:	f003 0302 	and.w	r3, r3, #2
 8001bae:	607b      	str	r3, [r7, #4]
 8001bb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	603b      	str	r3, [r7, #0]
 8001bb6:	4b47      	ldr	r3, [pc, #284]	; (8001cd4 <MX_GPIO_Init+0x1a8>)
 8001bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bba:	4a46      	ldr	r2, [pc, #280]	; (8001cd4 <MX_GPIO_Init+0x1a8>)
 8001bbc:	f043 0308 	orr.w	r3, r3, #8
 8001bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bc2:	4b44      	ldr	r3, [pc, #272]	; (8001cd4 <MX_GPIO_Init+0x1a8>)
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc6:	f003 0308 	and.w	r3, r3, #8
 8001bca:	603b      	str	r3, [r7, #0]
 8001bcc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|ili_DC_Pin, GPIO_PIN_RESET);
 8001bce:	2200      	movs	r2, #0
 8001bd0:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8001bd4:	4840      	ldr	r0, [pc, #256]	; (8001cd8 <MX_GPIO_Init+0x1ac>)
 8001bd6:	f002 fa5b 	bl	8004090 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_RES_GPIO_Port, SPI2_RES_Pin, GPIO_PIN_SET);
 8001bda:	2201      	movs	r2, #1
 8001bdc:	2180      	movs	r1, #128	; 0x80
 8001bde:	483f      	ldr	r0, [pc, #252]	; (8001cdc <MX_GPIO_Init+0x1b0>)
 8001be0:	f002 fa56 	bl	8004090 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 8001be4:	2200      	movs	r2, #0
 8001be6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001bea:	483c      	ldr	r0, [pc, #240]	; (8001cdc <MX_GPIO_Init+0x1b0>)
 8001bec:	f002 fa50 	bl	8004090 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bf6:	4838      	ldr	r0, [pc, #224]	; (8001cd8 <MX_GPIO_Init+0x1ac>)
 8001bf8:	f002 fa4a 	bl	8004090 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	2104      	movs	r1, #4
 8001c00:	4837      	ldr	r0, [pc, #220]	; (8001ce0 <MX_GPIO_Init+0x1b4>)
 8001c02:	f002 fa45 	bl	8004090 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ili_RES_GPIO_Port, ili_RES_Pin, GPIO_PIN_RESET);
 8001c06:	2200      	movs	r2, #0
 8001c08:	2120      	movs	r1, #32
 8001c0a:	4836      	ldr	r0, [pc, #216]	; (8001ce4 <MX_GPIO_Init+0x1b8>)
 8001c0c:	f002 fa40 	bl	8004090 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001c10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001c16:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001c1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001c20:	f107 0314 	add.w	r3, r7, #20
 8001c24:	4619      	mov	r1, r3
 8001c26:	482d      	ldr	r0, [pc, #180]	; (8001cdc <MX_GPIO_Init+0x1b0>)
 8001c28:	f002 f8ae 	bl	8003d88 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin SPI2_CS_Pin ili_DC_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|SPI2_CS_Pin|ili_DC_Pin;
 8001c2c:	f44f 63a4 	mov.w	r3, #1312	; 0x520
 8001c30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c32:	2301      	movs	r3, #1
 8001c34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c36:	2300      	movs	r3, #0
 8001c38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c3e:	f107 0314 	add.w	r3, r7, #20
 8001c42:	4619      	mov	r1, r3
 8001c44:	4824      	ldr	r0, [pc, #144]	; (8001cd8 <MX_GPIO_Init+0x1ac>)
 8001c46:	f002 f89f 	bl	8003d88 <HAL_GPIO_Init>

  /*Configure GPIO pins : Btn_1_Pin Btn_2_Pin Btn_3_Pin Btn_4_Pin */
  GPIO_InitStruct.Pin = Btn_1_Pin|Btn_2_Pin|Btn_3_Pin|Btn_4_Pin;
 8001c4a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001c4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c50:	2300      	movs	r3, #0
 8001c52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c54:	2300      	movs	r3, #0
 8001c56:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c58:	f107 0314 	add.w	r3, r7, #20
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	4821      	ldr	r0, [pc, #132]	; (8001ce4 <MX_GPIO_Init+0x1b8>)
 8001c60:	f002 f892 	bl	8003d88 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_RES_Pin Buzzer_Pin */
  GPIO_InitStruct.Pin = SPI2_RES_Pin|Buzzer_Pin;
 8001c64:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001c68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c72:	2300      	movs	r3, #0
 8001c74:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c76:	f107 0314 	add.w	r3, r7, #20
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	4817      	ldr	r0, [pc, #92]	; (8001cdc <MX_GPIO_Init+0x1b0>)
 8001c7e:	f002 f883 	bl	8003d88 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_CS_Pin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 8001c82:	2304      	movs	r3, #4
 8001c84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c86:	2301      	movs	r3, #1
 8001c88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 8001c92:	f107 0314 	add.w	r3, r7, #20
 8001c96:	4619      	mov	r1, r3
 8001c98:	4811      	ldr	r0, [pc, #68]	; (8001ce0 <MX_GPIO_Init+0x1b4>)
 8001c9a:	f002 f875 	bl	8003d88 <HAL_GPIO_Init>

  /*Configure GPIO pin : ili_RES_Pin */
  GPIO_InitStruct.Pin = ili_RES_Pin;
 8001c9e:	2320      	movs	r3, #32
 8001ca0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001caa:	2300      	movs	r3, #0
 8001cac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ili_RES_GPIO_Port, &GPIO_InitStruct);
 8001cae:	f107 0314 	add.w	r3, r7, #20
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	480b      	ldr	r0, [pc, #44]	; (8001ce4 <MX_GPIO_Init+0x1b8>)
 8001cb6:	f002 f867 	bl	8003d88 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001cba:	2200      	movs	r2, #0
 8001cbc:	2100      	movs	r1, #0
 8001cbe:	2028      	movs	r0, #40	; 0x28
 8001cc0:	f001 fc1b 	bl	80034fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001cc4:	2028      	movs	r0, #40	; 0x28
 8001cc6:	f001 fc34 	bl	8003532 <HAL_NVIC_EnableIRQ>

}
 8001cca:	bf00      	nop
 8001ccc:	3728      	adds	r7, #40	; 0x28
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	40023800 	.word	0x40023800
 8001cd8:	40020000 	.word	0x40020000
 8001cdc:	40020800 	.word	0x40020800
 8001ce0:	40020c00 	.word	0x40020c00
 8001ce4:	40020400 	.word	0x40020400

08001ce8 <running_box>:

/* USER CODE BEGIN 4 */

void running_box(){
 8001ce8:	b590      	push	{r4, r7, lr}
 8001cea:	b087      	sub	sp, #28
 8001cec:	af02      	add	r7, sp, #8
   //// Running box ------
  int ratte = 1;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	60fb      	str	r3, [r7, #12]
  int sizo = 30;
 8001cf2:	231e      	movs	r3, #30
 8001cf4:	60bb      	str	r3, [r7, #8]
  int offs = 190;
 8001cf6:	23be      	movs	r3, #190	; 0xbe
 8001cf8:	607b      	str	r3, [r7, #4]
  static uint16_t xsh = 0;
  ili9341_FillRect(xsh, offs, ratte ,sizo, cl_MAROON);
 8001cfa:	4b1d      	ldr	r3, [pc, #116]	; (8001d70 <running_box+0x88>)
 8001cfc:	8818      	ldrh	r0, [r3, #0]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	b299      	uxth	r1, r3
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	b29a      	uxth	r2, r3
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	b29b      	uxth	r3, r3
 8001d0a:	f44f 44f0 	mov.w	r4, #30720	; 0x7800
 8001d0e:	9400      	str	r4, [sp, #0]
 8001d10:	f000 fd80 	bl	8002814 <ili9341_FillRect>
  xsh += ratte;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	b29a      	uxth	r2, r3
 8001d18:	4b15      	ldr	r3, [pc, #84]	; (8001d70 <running_box+0x88>)
 8001d1a:	881b      	ldrh	r3, [r3, #0]
 8001d1c:	4413      	add	r3, r2
 8001d1e:	b29a      	uxth	r2, r3
 8001d20:	4b13      	ldr	r3, [pc, #76]	; (8001d70 <running_box+0x88>)
 8001d22:	801a      	strh	r2, [r3, #0]
  ili9341_FillRect(xsh, offs, sizo, sizo, cl_CYAN); //// box
 8001d24:	4b12      	ldr	r3, [pc, #72]	; (8001d70 <running_box+0x88>)
 8001d26:	8818      	ldrh	r0, [r3, #0]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	b299      	uxth	r1, r3
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	b29a      	uxth	r2, r3
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	b29b      	uxth	r3, r3
 8001d34:	f240 74ff 	movw	r4, #2047	; 0x7ff
 8001d38:	9400      	str	r4, [sp, #0]
 8001d3a:	f000 fd6b 	bl	8002814 <ili9341_FillRect>
  if(xsh >= 400){ // clear
 8001d3e:	4b0c      	ldr	r3, [pc, #48]	; (8001d70 <running_box+0x88>)
 8001d40:	881b      	ldrh	r3, [r3, #0]
 8001d42:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001d46:	d30f      	bcc.n	8001d68 <running_box+0x80>
	  ili9341_FillRect(xsh, offs, sizo, sizo, cl_MAROON);
 8001d48:	4b09      	ldr	r3, [pc, #36]	; (8001d70 <running_box+0x88>)
 8001d4a:	8818      	ldrh	r0, [r3, #0]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	b299      	uxth	r1, r3
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	b29a      	uxth	r2, r3
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	f44f 44f0 	mov.w	r4, #30720	; 0x7800
 8001d5c:	9400      	str	r4, [sp, #0]
 8001d5e:	f000 fd59 	bl	8002814 <ili9341_FillRect>
	  xsh = 0;
 8001d62:	4b03      	ldr	r3, [pc, #12]	; (8001d70 <running_box+0x88>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	801a      	strh	r2, [r3, #0]
		  }

}
 8001d68:	bf00      	nop
 8001d6a:	3714      	adds	r7, #20
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd90      	pop	{r4, r7, pc}
 8001d70:	20000552 	.word	0x20000552

08001d74 <Button_machine>:

void Button_machine(){
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
	 * raw read,
	 * read from 1 as rising detect,
	 * read latest (bdebug),
	 * read latest & erased when fin}
	 */
		btn_read[1] = btn_read[0];
 8001d78:	4b16      	ldr	r3, [pc, #88]	; (8001dd4 <Button_machine+0x60>)
 8001d7a:	781a      	ldrb	r2, [r3, #0]
 8001d7c:	4b15      	ldr	r3, [pc, #84]	; (8001dd4 <Button_machine+0x60>)
 8001d7e:	705a      	strb	r2, [r3, #1]
		btn_read[0] = (0x0F & ~(GPIOB->IDR >> 12));
 8001d80:	4b15      	ldr	r3, [pc, #84]	; (8001dd8 <Button_machine+0x64>)
 8001d82:	691b      	ldr	r3, [r3, #16]
 8001d84:	0b1b      	lsrs	r3, r3, #12
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	43db      	mvns	r3, r3
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	f003 030f 	and.w	r3, r3, #15
 8001d90:	b2da      	uxtb	r2, r3
 8001d92:	4b10      	ldr	r3, [pc, #64]	; (8001dd4 <Button_machine+0x60>)
 8001d94:	701a      	strb	r2, [r3, #0]


		//// rising edge counter
		if(btn_read[0] && btn_read[1] == 0){
 8001d96:	4b0f      	ldr	r3, [pc, #60]	; (8001dd4 <Button_machine+0x60>)
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d014      	beq.n	8001dc8 <Button_machine+0x54>
 8001d9e:	4b0d      	ldr	r3, [pc, #52]	; (8001dd4 <Button_machine+0x60>)
 8001da0:	785b      	ldrb	r3, [r3, #1]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d110      	bne.n	8001dc8 <Button_machine+0x54>
			btn_cnt += btn_read[0]; //// plus at each hex pos
 8001da6:	4b0b      	ldr	r3, [pc, #44]	; (8001dd4 <Button_machine+0x60>)
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	b29a      	uxth	r2, r3
 8001dac:	4b0b      	ldr	r3, [pc, #44]	; (8001ddc <Button_machine+0x68>)
 8001dae:	881b      	ldrh	r3, [r3, #0]
 8001db0:	4413      	add	r3, r2
 8001db2:	b29a      	uxth	r2, r3
 8001db4:	4b09      	ldr	r3, [pc, #36]	; (8001ddc <Button_machine+0x68>)
 8001db6:	801a      	strh	r2, [r3, #0]
			btn_read[2] = btn_read[0]; //// read latest, debug
 8001db8:	4b06      	ldr	r3, [pc, #24]	; (8001dd4 <Button_machine+0x60>)
 8001dba:	781a      	ldrb	r2, [r3, #0]
 8001dbc:	4b05      	ldr	r3, [pc, #20]	; (8001dd4 <Button_machine+0x60>)
 8001dbe:	709a      	strb	r2, [r3, #2]
			btn_read[3] = btn_read[0]; //// read latest, clearable
 8001dc0:	4b04      	ldr	r3, [pc, #16]	; (8001dd4 <Button_machine+0x60>)
 8001dc2:	781a      	ldrb	r2, [r3, #0]
 8001dc4:	4b03      	ldr	r3, [pc, #12]	; (8001dd4 <Button_machine+0x60>)
 8001dc6:	70da      	strb	r2, [r3, #3]
		}


}
 8001dc8:	bf00      	nop
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	2000054c 	.word	0x2000054c
 8001dd8:	40020400 	.word	0x40020400
 8001ddc:	20000550 	.word	0x20000550

08001de0 <buzzer_scream_cnt>:

void buzzer_scream_cnt(){
 8001de0:	b598      	push	{r3, r4, r7, lr}
 8001de2:	af00      	add	r7, sp, #0
	static enum {bz_init, bz_silent, bz_scream} bz_st = bz_init;
	//uint16_t tup = 100, tdn = 50;

		switch(bz_st){
 8001de4:	4b35      	ldr	r3, [pc, #212]	; (8001ebc <buzzer_scream_cnt+0xdc>)
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d039      	beq.n	8001e60 <buzzer_scream_cnt+0x80>
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d01d      	beq.n	8001e2c <buzzer_scream_cnt+0x4c>
		default:
		case bz_init:
			//HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);

			if(flagc_bz){
 8001df0:	4b33      	ldr	r3, [pc, #204]	; (8001ec0 <buzzer_scream_cnt+0xe0>)
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d015      	beq.n	8001e24 <buzzer_scream_cnt+0x44>

				HAL_TIM_Base_Start_IT(&htim10);
 8001df8:	4832      	ldr	r0, [pc, #200]	; (8001ec4 <buzzer_scream_cnt+0xe4>)
 8001dfa:	f005 fe0d 	bl	8007a18 <HAL_TIM_Base_Start_IT>
				timestamp_bz = bzz_t_priod_up + HAL_GetTick(); //
 8001dfe:	4b32      	ldr	r3, [pc, #200]	; (8001ec8 <buzzer_scream_cnt+0xe8>)
 8001e00:	881b      	ldrh	r3, [r3, #0]
 8001e02:	461c      	mov	r4, r3
 8001e04:	f001 fa6e 	bl	80032e4 <HAL_GetTick>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	4423      	add	r3, r4
 8001e0c:	4a2f      	ldr	r2, [pc, #188]	; (8001ecc <buzzer_scream_cnt+0xec>)
 8001e0e:	6013      	str	r3, [r2, #0]

				bz_st = bz_scream;
 8001e10:	4b2a      	ldr	r3, [pc, #168]	; (8001ebc <buzzer_scream_cnt+0xdc>)
 8001e12:	2202      	movs	r2, #2
 8001e14:	701a      	strb	r2, [r3, #0]
				/// down flag_counter every 1 scream
				flagc_bz--;
 8001e16:	4b2a      	ldr	r3, [pc, #168]	; (8001ec0 <buzzer_scream_cnt+0xe0>)
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	3b01      	subs	r3, #1
 8001e1c:	b2da      	uxtb	r2, r3
 8001e1e:	4b28      	ldr	r3, [pc, #160]	; (8001ec0 <buzzer_scream_cnt+0xe0>)
 8001e20:	701a      	strb	r2, [r3, #0]
			}else{
				HAL_TIM_Base_Stop_IT(&htim10);
			}

			break;
 8001e22:	e048      	b.n	8001eb6 <buzzer_scream_cnt+0xd6>
				HAL_TIM_Base_Stop_IT(&htim10);
 8001e24:	4827      	ldr	r0, [pc, #156]	; (8001ec4 <buzzer_scream_cnt+0xe4>)
 8001e26:	f005 fe59 	bl	8007adc <HAL_TIM_Base_Stop_IT>
			break;
 8001e2a:	e044      	b.n	8001eb6 <buzzer_scream_cnt+0xd6>

		case bz_scream:
			HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET);
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e32:	4827      	ldr	r0, [pc, #156]	; (8001ed0 <buzzer_scream_cnt+0xf0>)
 8001e34:	f002 f92c 	bl	8004090 <HAL_GPIO_WritePin>

			if(HAL_GetTick() >= timestamp_bz){
 8001e38:	f001 fa54 	bl	80032e4 <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	4b23      	ldr	r3, [pc, #140]	; (8001ecc <buzzer_scream_cnt+0xec>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	429a      	cmp	r2, r3
 8001e44:	d334      	bcc.n	8001eb0 <buzzer_scream_cnt+0xd0>
				timestamp_bz = bzz_t_priod_dn + HAL_GetTick();
 8001e46:	4b23      	ldr	r3, [pc, #140]	; (8001ed4 <buzzer_scream_cnt+0xf4>)
 8001e48:	881b      	ldrh	r3, [r3, #0]
 8001e4a:	461c      	mov	r4, r3
 8001e4c:	f001 fa4a 	bl	80032e4 <HAL_GetTick>
 8001e50:	4603      	mov	r3, r0
 8001e52:	4423      	add	r3, r4
 8001e54:	4a1d      	ldr	r2, [pc, #116]	; (8001ecc <buzzer_scream_cnt+0xec>)
 8001e56:	6013      	str	r3, [r2, #0]

				bz_st = bz_silent;
 8001e58:	4b18      	ldr	r3, [pc, #96]	; (8001ebc <buzzer_scream_cnt+0xdc>)
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001e5e:	e027      	b.n	8001eb0 <buzzer_scream_cnt+0xd0>


		case bz_silent:
			HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 8001e60:	2200      	movs	r2, #0
 8001e62:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e66:	481a      	ldr	r0, [pc, #104]	; (8001ed0 <buzzer_scream_cnt+0xf0>)
 8001e68:	f002 f912 	bl	8004090 <HAL_GPIO_WritePin>

			if(HAL_GetTick() >= timestamp_bz){
 8001e6c:	f001 fa3a 	bl	80032e4 <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	4b16      	ldr	r3, [pc, #88]	; (8001ecc <buzzer_scream_cnt+0xec>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d31c      	bcc.n	8001eb4 <buzzer_scream_cnt+0xd4>

				if(flagc_bz){
 8001e7a:	4b11      	ldr	r3, [pc, #68]	; (8001ec0 <buzzer_scream_cnt+0xe0>)
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d012      	beq.n	8001ea8 <buzzer_scream_cnt+0xc8>
					timestamp_bz = bzz_t_priod_up + HAL_GetTick(); //
 8001e82:	4b11      	ldr	r3, [pc, #68]	; (8001ec8 <buzzer_scream_cnt+0xe8>)
 8001e84:	881b      	ldrh	r3, [r3, #0]
 8001e86:	461c      	mov	r4, r3
 8001e88:	f001 fa2c 	bl	80032e4 <HAL_GetTick>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	4423      	add	r3, r4
 8001e90:	4a0e      	ldr	r2, [pc, #56]	; (8001ecc <buzzer_scream_cnt+0xec>)
 8001e92:	6013      	str	r3, [r2, #0]

					flagc_bz--;
 8001e94:	4b0a      	ldr	r3, [pc, #40]	; (8001ec0 <buzzer_scream_cnt+0xe0>)
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	3b01      	subs	r3, #1
 8001e9a:	b2da      	uxtb	r2, r3
 8001e9c:	4b08      	ldr	r3, [pc, #32]	; (8001ec0 <buzzer_scream_cnt+0xe0>)
 8001e9e:	701a      	strb	r2, [r3, #0]
					bz_st = bz_scream;
 8001ea0:	4b06      	ldr	r3, [pc, #24]	; (8001ebc <buzzer_scream_cnt+0xdc>)
 8001ea2:	2202      	movs	r2, #2
 8001ea4:	701a      	strb	r2, [r3, #0]
				}else{
				bz_st = bz_init;
				}
			}

			break;
 8001ea6:	e005      	b.n	8001eb4 <buzzer_scream_cnt+0xd4>
				bz_st = bz_init;
 8001ea8:	4b04      	ldr	r3, [pc, #16]	; (8001ebc <buzzer_scream_cnt+0xdc>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	701a      	strb	r2, [r3, #0]
			break;
 8001eae:	e001      	b.n	8001eb4 <buzzer_scream_cnt+0xd4>
			break;
 8001eb0:	bf00      	nop
 8001eb2:	e000      	b.n	8001eb6 <buzzer_scream_cnt+0xd6>
			break;
 8001eb4:	bf00      	nop
		}

}
 8001eb6:	bf00      	nop
 8001eb8:	bd98      	pop	{r3, r4, r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	20000554 	.word	0x20000554
 8001ec0:	20000548 	.word	0x20000548
 8001ec4:	20000328 	.word	0x20000328
 8001ec8:	20000004 	.word	0x20000004
 8001ecc:	20000540 	.word	0x20000540
 8001ed0:	40020800 	.word	0x40020800
 8001ed4:	20000006 	.word	0x20000006

08001ed8 <HAL_GPIO_EXTI_Callback>:

void State_Script_1(){

}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	4603      	mov	r3, r0
 8001ee0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13){
 8001ee2:	88fb      	ldrh	r3, [r7, #6]
 8001ee4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ee8:	d104      	bne.n	8001ef4 <HAL_GPIO_EXTI_Callback+0x1c>
		//INA219_BitReset(&hi2c1, INA219_ADDR_1);
		flagc_bz = 12;
 8001eea:	4b04      	ldr	r3, [pc, #16]	; (8001efc <HAL_GPIO_EXTI_Callback+0x24>)
 8001eec:	220c      	movs	r2, #12
 8001eee:	701a      	strb	r2, [r3, #0]
		buzzer_scream_cnt();
 8001ef0:	f7ff ff76 	bl	8001de0 <buzzer_scream_cnt>
		}
}
 8001ef4:	bf00      	nop
 8001ef6:	3708      	adds	r7, #8
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	20000548 	.word	0x20000548

08001f00 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
	if(htim == &htim10){
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	4a07      	ldr	r2, [pc, #28]	; (8001f28 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d106      	bne.n	8001f1e <HAL_TIM_PeriodElapsedCallback+0x1e>
		_millis++;
 8001f10:	4b06      	ldr	r3, [pc, #24]	; (8001f2c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	3301      	adds	r3, #1
 8001f16:	4a05      	ldr	r2, [pc, #20]	; (8001f2c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001f18:	6013      	str	r3, [r2, #0]
		buzzer_scream_cnt();
 8001f1a:	f7ff ff61 	bl	8001de0 <buzzer_scream_cnt>
	}
}
 8001f1e:	bf00      	nop
 8001f20:	3708      	adds	r7, #8
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	20000328 	.word	0x20000328
 8001f2c:	20000544 	.word	0x20000544

08001f30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f34:	b672      	cpsid	i
}
 8001f36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f38:	e7fe      	b.n	8001f38 <Error_Handler+0x8>
	...

08001f3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f42:	2300      	movs	r3, #0
 8001f44:	607b      	str	r3, [r7, #4]
 8001f46:	4b10      	ldr	r3, [pc, #64]	; (8001f88 <HAL_MspInit+0x4c>)
 8001f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f4a:	4a0f      	ldr	r2, [pc, #60]	; (8001f88 <HAL_MspInit+0x4c>)
 8001f4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f50:	6453      	str	r3, [r2, #68]	; 0x44
 8001f52:	4b0d      	ldr	r3, [pc, #52]	; (8001f88 <HAL_MspInit+0x4c>)
 8001f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f5a:	607b      	str	r3, [r7, #4]
 8001f5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f5e:	2300      	movs	r3, #0
 8001f60:	603b      	str	r3, [r7, #0]
 8001f62:	4b09      	ldr	r3, [pc, #36]	; (8001f88 <HAL_MspInit+0x4c>)
 8001f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f66:	4a08      	ldr	r2, [pc, #32]	; (8001f88 <HAL_MspInit+0x4c>)
 8001f68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f6c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f6e:	4b06      	ldr	r3, [pc, #24]	; (8001f88 <HAL_MspInit+0x4c>)
 8001f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f76:	603b      	str	r3, [r7, #0]
 8001f78:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001f7a:	2007      	movs	r0, #7
 8001f7c:	f001 fab2 	bl	80034e4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f80:	bf00      	nop
 8001f82:	3708      	adds	r7, #8
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	40023800 	.word	0x40023800

08001f8c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b08a      	sub	sp, #40	; 0x28
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f94:	f107 0314 	add.w	r3, r7, #20
 8001f98:	2200      	movs	r2, #0
 8001f9a:	601a      	str	r2, [r3, #0]
 8001f9c:	605a      	str	r2, [r3, #4]
 8001f9e:	609a      	str	r2, [r3, #8]
 8001fa0:	60da      	str	r2, [r3, #12]
 8001fa2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a21      	ldr	r2, [pc, #132]	; (8002030 <HAL_I2C_MspInit+0xa4>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d13c      	bne.n	8002028 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fae:	2300      	movs	r3, #0
 8001fb0:	613b      	str	r3, [r7, #16]
 8001fb2:	4b20      	ldr	r3, [pc, #128]	; (8002034 <HAL_I2C_MspInit+0xa8>)
 8001fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb6:	4a1f      	ldr	r2, [pc, #124]	; (8002034 <HAL_I2C_MspInit+0xa8>)
 8001fb8:	f043 0302 	orr.w	r3, r3, #2
 8001fbc:	6313      	str	r3, [r2, #48]	; 0x30
 8001fbe:	4b1d      	ldr	r3, [pc, #116]	; (8002034 <HAL_I2C_MspInit+0xa8>)
 8001fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc2:	f003 0302 	and.w	r3, r3, #2
 8001fc6:	613b      	str	r3, [r7, #16]
 8001fc8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001fca:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001fce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fd0:	2312      	movs	r3, #18
 8001fd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001fdc:	2304      	movs	r3, #4
 8001fde:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fe0:	f107 0314 	add.w	r3, r7, #20
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	4814      	ldr	r0, [pc, #80]	; (8002038 <HAL_I2C_MspInit+0xac>)
 8001fe8:	f001 fece 	bl	8003d88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001fec:	2300      	movs	r3, #0
 8001fee:	60fb      	str	r3, [r7, #12]
 8001ff0:	4b10      	ldr	r3, [pc, #64]	; (8002034 <HAL_I2C_MspInit+0xa8>)
 8001ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff4:	4a0f      	ldr	r2, [pc, #60]	; (8002034 <HAL_I2C_MspInit+0xa8>)
 8001ff6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ffa:	6413      	str	r3, [r2, #64]	; 0x40
 8001ffc:	4b0d      	ldr	r3, [pc, #52]	; (8002034 <HAL_I2C_MspInit+0xa8>)
 8001ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002000:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002004:	60fb      	str	r3, [r7, #12]
 8002006:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002008:	2200      	movs	r2, #0
 800200a:	2100      	movs	r1, #0
 800200c:	201f      	movs	r0, #31
 800200e:	f001 fa74 	bl	80034fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002012:	201f      	movs	r0, #31
 8002014:	f001 fa8d 	bl	8003532 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8002018:	2200      	movs	r2, #0
 800201a:	2100      	movs	r1, #0
 800201c:	2020      	movs	r0, #32
 800201e:	f001 fa6c 	bl	80034fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002022:	2020      	movs	r0, #32
 8002024:	f001 fa85 	bl	8003532 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002028:	bf00      	nop
 800202a:	3728      	adds	r7, #40	; 0x28
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}
 8002030:	40005400 	.word	0x40005400
 8002034:	40023800 	.word	0x40023800
 8002038:	40020400 	.word	0x40020400

0800203c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b08c      	sub	sp, #48	; 0x30
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002044:	f107 031c 	add.w	r3, r7, #28
 8002048:	2200      	movs	r2, #0
 800204a:	601a      	str	r2, [r3, #0]
 800204c:	605a      	str	r2, [r3, #4]
 800204e:	609a      	str	r2, [r3, #8]
 8002050:	60da      	str	r2, [r3, #12]
 8002052:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a42      	ldr	r2, [pc, #264]	; (8002164 <HAL_SPI_MspInit+0x128>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d14b      	bne.n	80020f6 <HAL_SPI_MspInit+0xba>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800205e:	2300      	movs	r3, #0
 8002060:	61bb      	str	r3, [r7, #24]
 8002062:	4b41      	ldr	r3, [pc, #260]	; (8002168 <HAL_SPI_MspInit+0x12c>)
 8002064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002066:	4a40      	ldr	r2, [pc, #256]	; (8002168 <HAL_SPI_MspInit+0x12c>)
 8002068:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800206c:	6413      	str	r3, [r2, #64]	; 0x40
 800206e:	4b3e      	ldr	r3, [pc, #248]	; (8002168 <HAL_SPI_MspInit+0x12c>)
 8002070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002072:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002076:	61bb      	str	r3, [r7, #24]
 8002078:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800207a:	2300      	movs	r3, #0
 800207c:	617b      	str	r3, [r7, #20]
 800207e:	4b3a      	ldr	r3, [pc, #232]	; (8002168 <HAL_SPI_MspInit+0x12c>)
 8002080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002082:	4a39      	ldr	r2, [pc, #228]	; (8002168 <HAL_SPI_MspInit+0x12c>)
 8002084:	f043 0304 	orr.w	r3, r3, #4
 8002088:	6313      	str	r3, [r2, #48]	; 0x30
 800208a:	4b37      	ldr	r3, [pc, #220]	; (8002168 <HAL_SPI_MspInit+0x12c>)
 800208c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208e:	f003 0304 	and.w	r3, r3, #4
 8002092:	617b      	str	r3, [r7, #20]
 8002094:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002096:	2300      	movs	r3, #0
 8002098:	613b      	str	r3, [r7, #16]
 800209a:	4b33      	ldr	r3, [pc, #204]	; (8002168 <HAL_SPI_MspInit+0x12c>)
 800209c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209e:	4a32      	ldr	r2, [pc, #200]	; (8002168 <HAL_SPI_MspInit+0x12c>)
 80020a0:	f043 0302 	orr.w	r3, r3, #2
 80020a4:	6313      	str	r3, [r2, #48]	; 0x30
 80020a6:	4b30      	ldr	r3, [pc, #192]	; (8002168 <HAL_SPI_MspInit+0x12c>)
 80020a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020aa:	f003 0302 	and.w	r3, r3, #2
 80020ae:	613b      	str	r3, [r7, #16]
 80020b0:	693b      	ldr	r3, [r7, #16]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80020b2:	230c      	movs	r3, #12
 80020b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b6:	2302      	movs	r3, #2
 80020b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ba:	2300      	movs	r3, #0
 80020bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020be:	2303      	movs	r3, #3
 80020c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80020c2:	2305      	movs	r3, #5
 80020c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020c6:	f107 031c 	add.w	r3, r7, #28
 80020ca:	4619      	mov	r1, r3
 80020cc:	4827      	ldr	r0, [pc, #156]	; (800216c <HAL_SPI_MspInit+0x130>)
 80020ce:	f001 fe5b 	bl	8003d88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80020d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d8:	2302      	movs	r3, #2
 80020da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020dc:	2300      	movs	r3, #0
 80020de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020e0:	2303      	movs	r3, #3
 80020e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80020e4:	2305      	movs	r3, #5
 80020e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020e8:	f107 031c 	add.w	r3, r7, #28
 80020ec:	4619      	mov	r1, r3
 80020ee:	4820      	ldr	r0, [pc, #128]	; (8002170 <HAL_SPI_MspInit+0x134>)
 80020f0:	f001 fe4a 	bl	8003d88 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80020f4:	e031      	b.n	800215a <HAL_SPI_MspInit+0x11e>
  else if(hspi->Instance==SPI3)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a1e      	ldr	r2, [pc, #120]	; (8002174 <HAL_SPI_MspInit+0x138>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d12c      	bne.n	800215a <HAL_SPI_MspInit+0x11e>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002100:	2300      	movs	r3, #0
 8002102:	60fb      	str	r3, [r7, #12]
 8002104:	4b18      	ldr	r3, [pc, #96]	; (8002168 <HAL_SPI_MspInit+0x12c>)
 8002106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002108:	4a17      	ldr	r2, [pc, #92]	; (8002168 <HAL_SPI_MspInit+0x12c>)
 800210a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800210e:	6413      	str	r3, [r2, #64]	; 0x40
 8002110:	4b15      	ldr	r3, [pc, #84]	; (8002168 <HAL_SPI_MspInit+0x12c>)
 8002112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002114:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002118:	60fb      	str	r3, [r7, #12]
 800211a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800211c:	2300      	movs	r3, #0
 800211e:	60bb      	str	r3, [r7, #8]
 8002120:	4b11      	ldr	r3, [pc, #68]	; (8002168 <HAL_SPI_MspInit+0x12c>)
 8002122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002124:	4a10      	ldr	r2, [pc, #64]	; (8002168 <HAL_SPI_MspInit+0x12c>)
 8002126:	f043 0304 	orr.w	r3, r3, #4
 800212a:	6313      	str	r3, [r2, #48]	; 0x30
 800212c:	4b0e      	ldr	r3, [pc, #56]	; (8002168 <HAL_SPI_MspInit+0x12c>)
 800212e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002130:	f003 0304 	and.w	r3, r3, #4
 8002134:	60bb      	str	r3, [r7, #8]
 8002136:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002138:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800213c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800213e:	2302      	movs	r3, #2
 8002140:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002142:	2300      	movs	r3, #0
 8002144:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002146:	2303      	movs	r3, #3
 8002148:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800214a:	2306      	movs	r3, #6
 800214c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800214e:	f107 031c 	add.w	r3, r7, #28
 8002152:	4619      	mov	r1, r3
 8002154:	4805      	ldr	r0, [pc, #20]	; (800216c <HAL_SPI_MspInit+0x130>)
 8002156:	f001 fe17 	bl	8003d88 <HAL_GPIO_Init>
}
 800215a:	bf00      	nop
 800215c:	3730      	adds	r7, #48	; 0x30
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	40003800 	.word	0x40003800
 8002168:	40023800 	.word	0x40023800
 800216c:	40020800 	.word	0x40020800
 8002170:	40020400 	.word	0x40020400
 8002174:	40003c00 	.word	0x40003c00

08002178 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a0e      	ldr	r2, [pc, #56]	; (80021c0 <HAL_TIM_Base_MspInit+0x48>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d115      	bne.n	80021b6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 800218a:	2300      	movs	r3, #0
 800218c:	60fb      	str	r3, [r7, #12]
 800218e:	4b0d      	ldr	r3, [pc, #52]	; (80021c4 <HAL_TIM_Base_MspInit+0x4c>)
 8002190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002192:	4a0c      	ldr	r2, [pc, #48]	; (80021c4 <HAL_TIM_Base_MspInit+0x4c>)
 8002194:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002198:	6453      	str	r3, [r2, #68]	; 0x44
 800219a:	4b0a      	ldr	r3, [pc, #40]	; (80021c4 <HAL_TIM_Base_MspInit+0x4c>)
 800219c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800219e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021a2:	60fb      	str	r3, [r7, #12]
 80021a4:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80021a6:	2200      	movs	r2, #0
 80021a8:	2100      	movs	r1, #0
 80021aa:	2019      	movs	r0, #25
 80021ac:	f001 f9a5 	bl	80034fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80021b0:	2019      	movs	r0, #25
 80021b2:	f001 f9be 	bl	8003532 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 80021b6:	bf00      	nop
 80021b8:	3710      	adds	r7, #16
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	40014400 	.word	0x40014400
 80021c4:	40023800 	.word	0x40023800

080021c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b08c      	sub	sp, #48	; 0x30
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021d0:	f107 031c 	add.w	r3, r7, #28
 80021d4:	2200      	movs	r2, #0
 80021d6:	601a      	str	r2, [r3, #0]
 80021d8:	605a      	str	r2, [r3, #4]
 80021da:	609a      	str	r2, [r3, #8]
 80021dc:	60da      	str	r2, [r3, #12]
 80021de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a4d      	ldr	r2, [pc, #308]	; (800231c <HAL_UART_MspInit+0x154>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d12c      	bne.n	8002244 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80021ea:	2300      	movs	r3, #0
 80021ec:	61bb      	str	r3, [r7, #24]
 80021ee:	4b4c      	ldr	r3, [pc, #304]	; (8002320 <HAL_UART_MspInit+0x158>)
 80021f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f2:	4a4b      	ldr	r2, [pc, #300]	; (8002320 <HAL_UART_MspInit+0x158>)
 80021f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021f8:	6413      	str	r3, [r2, #64]	; 0x40
 80021fa:	4b49      	ldr	r3, [pc, #292]	; (8002320 <HAL_UART_MspInit+0x158>)
 80021fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002202:	61bb      	str	r3, [r7, #24]
 8002204:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002206:	2300      	movs	r3, #0
 8002208:	617b      	str	r3, [r7, #20]
 800220a:	4b45      	ldr	r3, [pc, #276]	; (8002320 <HAL_UART_MspInit+0x158>)
 800220c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220e:	4a44      	ldr	r2, [pc, #272]	; (8002320 <HAL_UART_MspInit+0x158>)
 8002210:	f043 0301 	orr.w	r3, r3, #1
 8002214:	6313      	str	r3, [r2, #48]	; 0x30
 8002216:	4b42      	ldr	r3, [pc, #264]	; (8002320 <HAL_UART_MspInit+0x158>)
 8002218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221a:	f003 0301 	and.w	r3, r3, #1
 800221e:	617b      	str	r3, [r7, #20]
 8002220:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002222:	230c      	movs	r3, #12
 8002224:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002226:	2302      	movs	r3, #2
 8002228:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222a:	2300      	movs	r3, #0
 800222c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800222e:	2303      	movs	r3, #3
 8002230:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002232:	2307      	movs	r3, #7
 8002234:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002236:	f107 031c 	add.w	r3, r7, #28
 800223a:	4619      	mov	r1, r3
 800223c:	4839      	ldr	r0, [pc, #228]	; (8002324 <HAL_UART_MspInit+0x15c>)
 800223e:	f001 fda3 	bl	8003d88 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002242:	e067      	b.n	8002314 <HAL_UART_MspInit+0x14c>
  else if(huart->Instance==USART6)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a37      	ldr	r2, [pc, #220]	; (8002328 <HAL_UART_MspInit+0x160>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d162      	bne.n	8002314 <HAL_UART_MspInit+0x14c>
    __HAL_RCC_USART6_CLK_ENABLE();
 800224e:	2300      	movs	r3, #0
 8002250:	613b      	str	r3, [r7, #16]
 8002252:	4b33      	ldr	r3, [pc, #204]	; (8002320 <HAL_UART_MspInit+0x158>)
 8002254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002256:	4a32      	ldr	r2, [pc, #200]	; (8002320 <HAL_UART_MspInit+0x158>)
 8002258:	f043 0320 	orr.w	r3, r3, #32
 800225c:	6453      	str	r3, [r2, #68]	; 0x44
 800225e:	4b30      	ldr	r3, [pc, #192]	; (8002320 <HAL_UART_MspInit+0x158>)
 8002260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002262:	f003 0320 	and.w	r3, r3, #32
 8002266:	613b      	str	r3, [r7, #16]
 8002268:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800226a:	2300      	movs	r3, #0
 800226c:	60fb      	str	r3, [r7, #12]
 800226e:	4b2c      	ldr	r3, [pc, #176]	; (8002320 <HAL_UART_MspInit+0x158>)
 8002270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002272:	4a2b      	ldr	r2, [pc, #172]	; (8002320 <HAL_UART_MspInit+0x158>)
 8002274:	f043 0301 	orr.w	r3, r3, #1
 8002278:	6313      	str	r3, [r2, #48]	; 0x30
 800227a:	4b29      	ldr	r3, [pc, #164]	; (8002320 <HAL_UART_MspInit+0x158>)
 800227c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227e:	f003 0301 	and.w	r3, r3, #1
 8002282:	60fb      	str	r3, [r7, #12]
 8002284:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002286:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800228a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800228c:	2302      	movs	r3, #2
 800228e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002290:	2300      	movs	r3, #0
 8002292:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002294:	2303      	movs	r3, #3
 8002296:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002298:	2308      	movs	r3, #8
 800229a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800229c:	f107 031c 	add.w	r3, r7, #28
 80022a0:	4619      	mov	r1, r3
 80022a2:	4820      	ldr	r0, [pc, #128]	; (8002324 <HAL_UART_MspInit+0x15c>)
 80022a4:	f001 fd70 	bl	8003d88 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80022a8:	4b20      	ldr	r3, [pc, #128]	; (800232c <HAL_UART_MspInit+0x164>)
 80022aa:	4a21      	ldr	r2, [pc, #132]	; (8002330 <HAL_UART_MspInit+0x168>)
 80022ac:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80022ae:	4b1f      	ldr	r3, [pc, #124]	; (800232c <HAL_UART_MspInit+0x164>)
 80022b0:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80022b4:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80022b6:	4b1d      	ldr	r3, [pc, #116]	; (800232c <HAL_UART_MspInit+0x164>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80022bc:	4b1b      	ldr	r3, [pc, #108]	; (800232c <HAL_UART_MspInit+0x164>)
 80022be:	2200      	movs	r2, #0
 80022c0:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80022c2:	4b1a      	ldr	r3, [pc, #104]	; (800232c <HAL_UART_MspInit+0x164>)
 80022c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022c8:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80022ca:	4b18      	ldr	r3, [pc, #96]	; (800232c <HAL_UART_MspInit+0x164>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80022d0:	4b16      	ldr	r3, [pc, #88]	; (800232c <HAL_UART_MspInit+0x164>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 80022d6:	4b15      	ldr	r3, [pc, #84]	; (800232c <HAL_UART_MspInit+0x164>)
 80022d8:	2200      	movs	r2, #0
 80022da:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 80022dc:	4b13      	ldr	r3, [pc, #76]	; (800232c <HAL_UART_MspInit+0x164>)
 80022de:	2200      	movs	r2, #0
 80022e0:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80022e2:	4b12      	ldr	r3, [pc, #72]	; (800232c <HAL_UART_MspInit+0x164>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80022e8:	4810      	ldr	r0, [pc, #64]	; (800232c <HAL_UART_MspInit+0x164>)
 80022ea:	f001 f93d 	bl	8003568 <HAL_DMA_Init>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d001      	beq.n	80022f8 <HAL_UART_MspInit+0x130>
      Error_Handler();
 80022f4:	f7ff fe1c 	bl	8001f30 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	4a0c      	ldr	r2, [pc, #48]	; (800232c <HAL_UART_MspInit+0x164>)
 80022fc:	639a      	str	r2, [r3, #56]	; 0x38
 80022fe:	4a0b      	ldr	r2, [pc, #44]	; (800232c <HAL_UART_MspInit+0x164>)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8002304:	2200      	movs	r2, #0
 8002306:	2100      	movs	r1, #0
 8002308:	2047      	movs	r0, #71	; 0x47
 800230a:	f001 f8f6 	bl	80034fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800230e:	2047      	movs	r0, #71	; 0x47
 8002310:	f001 f90f 	bl	8003532 <HAL_NVIC_EnableIRQ>
}
 8002314:	bf00      	nop
 8002316:	3730      	adds	r7, #48	; 0x30
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	40004400 	.word	0x40004400
 8002320:	40023800 	.word	0x40023800
 8002324:	40020000 	.word	0x40020000
 8002328:	40011400 	.word	0x40011400
 800232c:	200003f8 	.word	0x200003f8
 8002330:	40026428 	.word	0x40026428

08002334 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002338:	e7fe      	b.n	8002338 <NMI_Handler+0x4>

0800233a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800233a:	b480      	push	{r7}
 800233c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800233e:	e7fe      	b.n	800233e <HardFault_Handler+0x4>

08002340 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002344:	e7fe      	b.n	8002344 <MemManage_Handler+0x4>

08002346 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002346:	b480      	push	{r7}
 8002348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800234a:	e7fe      	b.n	800234a <BusFault_Handler+0x4>

0800234c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002350:	e7fe      	b.n	8002350 <UsageFault_Handler+0x4>

08002352 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002352:	b480      	push	{r7}
 8002354:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002356:	bf00      	nop
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr

08002360 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002364:	bf00      	nop
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr

0800236e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800236e:	b480      	push	{r7}
 8002370:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002372:	bf00      	nop
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr

0800237c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002380:	f000 ff9c 	bl	80032bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002384:	bf00      	nop
 8002386:	bd80      	pop	{r7, pc}

08002388 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 800238c:	4802      	ldr	r0, [pc, #8]	; (8002398 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800238e:	f005 fbd4 	bl	8007b3a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002392:	bf00      	nop
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	20000328 	.word	0x20000328

0800239c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80023a0:	4802      	ldr	r0, [pc, #8]	; (80023ac <I2C1_EV_IRQHandler+0x10>)
 80023a2:	f002 fb25 	bl	80049f0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80023a6:	bf00      	nop
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	20000224 	.word	0x20000224

080023b0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80023b4:	4802      	ldr	r0, [pc, #8]	; (80023c0 <I2C1_ER_IRQHandler+0x10>)
 80023b6:	f002 fc8c 	bl	8004cd2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80023ba:	bf00      	nop
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	20000224 	.word	0x20000224

080023c4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80023c8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80023cc:	f001 fe94 	bl	80040f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80023d0:	bf00      	nop
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 80023d8:	4802      	ldr	r0, [pc, #8]	; (80023e4 <DMA2_Stream1_IRQHandler+0x10>)
 80023da:	f001 fa5d 	bl	8003898 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80023de:	bf00      	nop
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	200003f8 	.word	0x200003f8

080023e8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80023ec:	4802      	ldr	r0, [pc, #8]	; (80023f8 <USART6_IRQHandler+0x10>)
 80023ee:	f005 fe79 	bl	80080e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80023f2:	bf00      	nop
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	200003b4 	.word	0x200003b4

080023fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
	return 1;
 8002400:	2301      	movs	r3, #1
}
 8002402:	4618      	mov	r0, r3
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr

0800240c <_kill>:

int _kill(int pid, int sig)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002416:	f006 ff61 	bl	80092dc <__errno>
 800241a:	4603      	mov	r3, r0
 800241c:	2216      	movs	r2, #22
 800241e:	601a      	str	r2, [r3, #0]
	return -1;
 8002420:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002424:	4618      	mov	r0, r3
 8002426:	3708      	adds	r7, #8
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}

0800242c <_exit>:

void _exit (int status)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002434:	f04f 31ff 	mov.w	r1, #4294967295
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f7ff ffe7 	bl	800240c <_kill>
	while (1) {}		/* Make sure we hang here */
 800243e:	e7fe      	b.n	800243e <_exit+0x12>

08002440 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b086      	sub	sp, #24
 8002444:	af00      	add	r7, sp, #0
 8002446:	60f8      	str	r0, [r7, #12]
 8002448:	60b9      	str	r1, [r7, #8]
 800244a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800244c:	2300      	movs	r3, #0
 800244e:	617b      	str	r3, [r7, #20]
 8002450:	e00a      	b.n	8002468 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002452:	f3af 8000 	nop.w
 8002456:	4601      	mov	r1, r0
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	1c5a      	adds	r2, r3, #1
 800245c:	60ba      	str	r2, [r7, #8]
 800245e:	b2ca      	uxtb	r2, r1
 8002460:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	3301      	adds	r3, #1
 8002466:	617b      	str	r3, [r7, #20]
 8002468:	697a      	ldr	r2, [r7, #20]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	429a      	cmp	r2, r3
 800246e:	dbf0      	blt.n	8002452 <_read+0x12>
	}

return len;
 8002470:	687b      	ldr	r3, [r7, #4]
}
 8002472:	4618      	mov	r0, r3
 8002474:	3718      	adds	r7, #24
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}

0800247a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800247a:	b580      	push	{r7, lr}
 800247c:	b086      	sub	sp, #24
 800247e:	af00      	add	r7, sp, #0
 8002480:	60f8      	str	r0, [r7, #12]
 8002482:	60b9      	str	r1, [r7, #8]
 8002484:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002486:	2300      	movs	r3, #0
 8002488:	617b      	str	r3, [r7, #20]
 800248a:	e009      	b.n	80024a0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	1c5a      	adds	r2, r3, #1
 8002490:	60ba      	str	r2, [r7, #8]
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	4618      	mov	r0, r3
 8002496:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	3301      	adds	r3, #1
 800249e:	617b      	str	r3, [r7, #20]
 80024a0:	697a      	ldr	r2, [r7, #20]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	dbf1      	blt.n	800248c <_write+0x12>
	}
	return len;
 80024a8:	687b      	ldr	r3, [r7, #4]
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3718      	adds	r7, #24
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <_close>:

int _close(int file)
{
 80024b2:	b480      	push	{r7}
 80024b4:	b083      	sub	sp, #12
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
	return -1;
 80024ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024be:	4618      	mov	r0, r3
 80024c0:	370c      	adds	r7, #12
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr

080024ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80024ca:	b480      	push	{r7}
 80024cc:	b083      	sub	sp, #12
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
 80024d2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80024da:	605a      	str	r2, [r3, #4]
	return 0;
 80024dc:	2300      	movs	r3, #0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	370c      	adds	r7, #12
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr

080024ea <_isatty>:

int _isatty(int file)
{
 80024ea:	b480      	push	{r7}
 80024ec:	b083      	sub	sp, #12
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	6078      	str	r0, [r7, #4]
	return 1;
 80024f2:	2301      	movs	r3, #1
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002500:	b480      	push	{r7}
 8002502:	b085      	sub	sp, #20
 8002504:	af00      	add	r7, sp, #0
 8002506:	60f8      	str	r0, [r7, #12]
 8002508:	60b9      	str	r1, [r7, #8]
 800250a:	607a      	str	r2, [r7, #4]
	return 0;
 800250c:	2300      	movs	r3, #0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3714      	adds	r7, #20
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
	...

0800251c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b086      	sub	sp, #24
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002524:	4a14      	ldr	r2, [pc, #80]	; (8002578 <_sbrk+0x5c>)
 8002526:	4b15      	ldr	r3, [pc, #84]	; (800257c <_sbrk+0x60>)
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002530:	4b13      	ldr	r3, [pc, #76]	; (8002580 <_sbrk+0x64>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d102      	bne.n	800253e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002538:	4b11      	ldr	r3, [pc, #68]	; (8002580 <_sbrk+0x64>)
 800253a:	4a12      	ldr	r2, [pc, #72]	; (8002584 <_sbrk+0x68>)
 800253c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800253e:	4b10      	ldr	r3, [pc, #64]	; (8002580 <_sbrk+0x64>)
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4413      	add	r3, r2
 8002546:	693a      	ldr	r2, [r7, #16]
 8002548:	429a      	cmp	r2, r3
 800254a:	d207      	bcs.n	800255c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800254c:	f006 fec6 	bl	80092dc <__errno>
 8002550:	4603      	mov	r3, r0
 8002552:	220c      	movs	r2, #12
 8002554:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002556:	f04f 33ff 	mov.w	r3, #4294967295
 800255a:	e009      	b.n	8002570 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800255c:	4b08      	ldr	r3, [pc, #32]	; (8002580 <_sbrk+0x64>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002562:	4b07      	ldr	r3, [pc, #28]	; (8002580 <_sbrk+0x64>)
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4413      	add	r3, r2
 800256a:	4a05      	ldr	r2, [pc, #20]	; (8002580 <_sbrk+0x64>)
 800256c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800256e:	68fb      	ldr	r3, [r7, #12]
}
 8002570:	4618      	mov	r0, r3
 8002572:	3718      	adds	r7, #24
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}
 8002578:	20020000 	.word	0x20020000
 800257c:	00000400 	.word	0x00000400
 8002580:	20000558 	.word	0x20000558
 8002584:	20000578 	.word	0x20000578

08002588 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800258c:	4b06      	ldr	r3, [pc, #24]	; (80025a8 <SystemInit+0x20>)
 800258e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002592:	4a05      	ldr	r2, [pc, #20]	; (80025a8 <SystemInit+0x20>)
 8002594:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002598:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800259c:	bf00      	nop
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	e000ed00 	.word	0xe000ed00

080025ac <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	af00      	add	r7, sp, #0
  LCD_IO_Bl_OnOff(1);
 80025b0:	2001      	movs	r0, #1
 80025b2:	f000 fcf0 	bl	8002f96 <LCD_IO_Bl_OnOff>
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_SLPOUT);    // Exit Sleep
 80025b6:	2011      	movs	r0, #17
 80025b8:	f000 fd74 	bl	80030a4 <LCD_IO_WriteCmd8>
  ILI9341_LCDMUTEX_POP();
}
 80025bc:	bf00      	nop
 80025be:	bd80      	pop	{r7, pc}

080025c0 <ili9341_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	af00      	add	r7, sp, #0
  return ILI9341_SIZE_X;
 80025c4:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr

080025d2 <ili9341_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 80025d2:	b480      	push	{r7}
 80025d4:	af00      	add	r7, sp, #0
  return ILI9341_SIZE_Y;
 80025d6:	23f0      	movs	r3, #240	; 0xf0
}
 80025d8:	4618      	mov	r0, r3
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
	...

080025e4 <ili9341_Init>:
/* SPI or paralell mode */
#if ILI9341_INTERFACE_MODE == 1

//-----------------------------------------------------------------------------
void ili9341_Init(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af02      	add	r7, sp, #8
  if((Is_ili9341_Initialized & ILI9341_LCD_INITIALIZED) == 0)
 80025ea:	4b52      	ldr	r3, [pc, #328]	; (8002734 <ili9341_Init+0x150>)
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	f003 0301 	and.w	r3, r3, #1
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d115      	bne.n	8002622 <ili9341_Init+0x3e>
  {
    Is_ili9341_Initialized |= ILI9341_LCD_INITIALIZED;
 80025f6:	4b4f      	ldr	r3, [pc, #316]	; (8002734 <ili9341_Init+0x150>)
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	f043 0301 	orr.w	r3, r3, #1
 80025fe:	b2da      	uxtb	r2, r3
 8002600:	4b4c      	ldr	r3, [pc, #304]	; (8002734 <ili9341_Init+0x150>)
 8002602:	701a      	strb	r2, [r3, #0]
    if((Is_ili9341_Initialized & ILI9341_IO_INITIALIZED) == 0)
 8002604:	4b4b      	ldr	r3, [pc, #300]	; (8002734 <ili9341_Init+0x150>)
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	f003 0302 	and.w	r3, r3, #2
 800260c:	2b00      	cmp	r3, #0
 800260e:	d101      	bne.n	8002614 <ili9341_Init+0x30>
      LCD_IO_Init();
 8002610:	f000 fccc 	bl	8002fac <LCD_IO_Init>
    Is_ili9341_Initialized |= ILI9341_IO_INITIALIZED;
 8002614:	4b47      	ldr	r3, [pc, #284]	; (8002734 <ili9341_Init+0x150>)
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	f043 0302 	orr.w	r3, r3, #2
 800261c:	b2da      	uxtb	r2, r3
 800261e:	4b45      	ldr	r3, [pc, #276]	; (8002734 <ili9341_Init+0x150>)
 8002620:	701a      	strb	r2, [r3, #0]
  }

  LCD_Delay(10);
 8002622:	200a      	movs	r0, #10
 8002624:	f000 fcac 	bl	8002f80 <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9341_SWRESET);
 8002628:	2001      	movs	r0, #1
 800262a:	f000 fd3b 	bl	80030a4 <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 800262e:	200a      	movs	r0, #10
 8002630:	f000 fca6 	bl	8002f80 <LCD_Delay>

  LCD_IO_WriteCmd8MultipleData8(0xEF, (uint8_t *)"\x03\x80\x02", 3);
 8002634:	2203      	movs	r2, #3
 8002636:	4940      	ldr	r1, [pc, #256]	; (8002738 <ili9341_Init+0x154>)
 8002638:	20ef      	movs	r0, #239	; 0xef
 800263a:	f000 fda1 	bl	8003180 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xCF, (uint8_t *)"\x00\xC1\x30", 3);
 800263e:	2203      	movs	r2, #3
 8002640:	493e      	ldr	r1, [pc, #248]	; (800273c <ili9341_Init+0x158>)
 8002642:	20cf      	movs	r0, #207	; 0xcf
 8002644:	f000 fd9c 	bl	8003180 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xED, (uint8_t *)"\x64\x03\x12\x81", 4);
 8002648:	2204      	movs	r2, #4
 800264a:	493d      	ldr	r1, [pc, #244]	; (8002740 <ili9341_Init+0x15c>)
 800264c:	20ed      	movs	r0, #237	; 0xed
 800264e:	f000 fd97 	bl	8003180 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xE8, (uint8_t *)"\x85\x00\x78", 3);
 8002652:	2203      	movs	r2, #3
 8002654:	493b      	ldr	r1, [pc, #236]	; (8002744 <ili9341_Init+0x160>)
 8002656:	20e8      	movs	r0, #232	; 0xe8
 8002658:	f000 fd92 	bl	8003180 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xCB, (uint8_t *)"\x39\x2C\x00\x34\x02", 5);
 800265c:	2205      	movs	r2, #5
 800265e:	493a      	ldr	r1, [pc, #232]	; (8002748 <ili9341_Init+0x164>)
 8002660:	20cb      	movs	r0, #203	; 0xcb
 8002662:	f000 fd8d 	bl	8003180 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xF7, (uint8_t *)"\x20", 1);
 8002666:	2201      	movs	r2, #1
 8002668:	4938      	ldr	r1, [pc, #224]	; (800274c <ili9341_Init+0x168>)
 800266a:	20f7      	movs	r0, #247	; 0xf7
 800266c:	f000 fd88 	bl	8003180 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xEA, (uint8_t *)"\x00\x00", 2);
 8002670:	2202      	movs	r2, #2
 8002672:	4937      	ldr	r1, [pc, #220]	; (8002750 <ili9341_Init+0x16c>)
 8002674:	20ea      	movs	r0, #234	; 0xea
 8002676:	f000 fd83 	bl	8003180 <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 1 (Vreg1out, Verg2out)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PWCTR1, (uint8_t *)"\x23", 1);
 800267a:	2201      	movs	r2, #1
 800267c:	4935      	ldr	r1, [pc, #212]	; (8002754 <ili9341_Init+0x170>)
 800267e:	20c0      	movs	r0, #192	; 0xc0
 8002680:	f000 fd7e 	bl	8003180 <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 2 (VGH,VGL)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PWCTR2, (uint8_t *)"\x10", 1);
 8002684:	2201      	movs	r2, #1
 8002686:	4934      	ldr	r1, [pc, #208]	; (8002758 <ili9341_Init+0x174>)
 8002688:	20c1      	movs	r0, #193	; 0xc1
 800268a:	f000 fd79 	bl	8003180 <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 3 (Vcom)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_VMCTR1, (uint8_t *)"\x3E\x28", 2);
 800268e:	2202      	movs	r2, #2
 8002690:	4932      	ldr	r1, [pc, #200]	; (800275c <ili9341_Init+0x178>)
 8002692:	20c5      	movs	r0, #197	; 0xc5
 8002694:	f000 fd74 	bl	8003180 <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 3 (Vcom)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_VMCTR2, (uint8_t *)"\x86", 1);
 8002698:	2201      	movs	r2, #1
 800269a:	4931      	ldr	r1, [pc, #196]	; (8002760 <ili9341_Init+0x17c>)
 800269c:	20c7      	movs	r0, #199	; 0xc7
 800269e:	f000 fd6f 	bl	8003180 <LCD_IO_WriteCmd8MultipleData8>

  // Vertical scroll zero
  LCD_IO_WriteCmd8MultipleData8(ILI9341_VSCRSADD, (uint8_t *)"\x00", 1);
 80026a2:	2201      	movs	r2, #1
 80026a4:	492f      	ldr	r1, [pc, #188]	; (8002764 <ili9341_Init+0x180>)
 80026a6:	2037      	movs	r0, #55	; 0x37
 80026a8:	f000 fd6a 	bl	8003180 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PIXFMT, (uint8_t *)"\x55", 1);
 80026ac:	2201      	movs	r2, #1
 80026ae:	492e      	ldr	r1, [pc, #184]	; (8002768 <ili9341_Init+0x184>)
 80026b0:	203a      	movs	r0, #58	; 0x3a
 80026b2:	f000 fd65 	bl	8003180 <LCD_IO_WriteCmd8MultipleData8>

  // LCD_IO_WriteCmd8MultipleData8(0xF6, (uint8_t *)"\x01\x00\x06", 3);

  LCD_IO_WriteCmd8MultipleData8(ILI9341_FRMCTR1, (uint8_t *)"\x00\x18", 2);
 80026b6:	2202      	movs	r2, #2
 80026b8:	492c      	ldr	r1, [pc, #176]	; (800276c <ili9341_Init+0x188>)
 80026ba:	20b1      	movs	r0, #177	; 0xb1
 80026bc:	f000 fd60 	bl	8003180 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_DFUNCTR, (uint8_t *)"\x08\x82\x27", 3);  // Display Function Control
 80026c0:	2203      	movs	r2, #3
 80026c2:	492b      	ldr	r1, [pc, #172]	; (8002770 <ili9341_Init+0x18c>)
 80026c4:	20b6      	movs	r0, #182	; 0xb6
 80026c6:	f000 fd5b 	bl	8003180 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xF2, (uint8_t *)"\x00", 1);            // 3Gamma Function Disable
 80026ca:	2201      	movs	r2, #1
 80026cc:	4925      	ldr	r1, [pc, #148]	; (8002764 <ili9341_Init+0x180>)
 80026ce:	20f2      	movs	r0, #242	; 0xf2
 80026d0:	f000 fd56 	bl	8003180 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_GAMMASET, (uint8_t *)"\x01", 1);// Gamma curve selected
 80026d4:	2201      	movs	r2, #1
 80026d6:	4927      	ldr	r1, [pc, #156]	; (8002774 <ili9341_Init+0x190>)
 80026d8:	2026      	movs	r0, #38	; 0x26
 80026da:	f000 fd51 	bl	8003180 <LCD_IO_WriteCmd8MultipleData8>

  // positive gamma control
  LCD_IO_WriteCmd8MultipleData8(ILI9341_GMCTRP1, (uint8_t *)"\x0F\x31\x2B\x0C\x0E\x08\x4E\xF1\x37\x07\x10\x03\x0E\x09\x00", 15);
 80026de:	220f      	movs	r2, #15
 80026e0:	4925      	ldr	r1, [pc, #148]	; (8002778 <ili9341_Init+0x194>)
 80026e2:	20e0      	movs	r0, #224	; 0xe0
 80026e4:	f000 fd4c 	bl	8003180 <LCD_IO_WriteCmd8MultipleData8>

  // negative gamma control
  LCD_IO_WriteCmd8MultipleData8(ILI9341_GMCTRN1, (uint8_t *)"\x00\x0E\x14\x03\x11\x07\x31\xC1\x48\x08\x0F\x0C\x31\x36\x0F", 15);
 80026e8:	220f      	movs	r2, #15
 80026ea:	4924      	ldr	r1, [pc, #144]	; (800277c <ili9341_Init+0x198>)
 80026ec:	20e1      	movs	r0, #225	; 0xe1
 80026ee:	f000 fd47 	bl	8003180 <LCD_IO_WriteCmd8MultipleData8>

  LCD_IO_WriteCmd8(ILI9341_MADCTL); LCD_IO_WriteData8(ILI9341_MAD_DATA_RIGHT_THEN_DOWN);
 80026f2:	2036      	movs	r0, #54	; 0x36
 80026f4:	f000 fcd6 	bl	80030a4 <LCD_IO_WriteCmd8>
 80026f8:	20e8      	movs	r0, #232	; 0xe8
 80026fa:	f000 fcf1 	bl	80030e0 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_SLPOUT);    // Exit Sleep
 80026fe:	2011      	movs	r0, #17
 8002700:	f000 fcd0 	bl	80030a4 <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 8002704:	200a      	movs	r0, #10
 8002706:	f000 fc3b 	bl	8002f80 <LCD_Delay>

  #if ILI9341_INITCLEAR == 1
  ili9341_FillRect(0, 0, ILI9341_SIZE_X, ILI9341_SIZE_Y, 0x0000);
 800270a:	2300      	movs	r3, #0
 800270c:	9300      	str	r3, [sp, #0]
 800270e:	23f0      	movs	r3, #240	; 0xf0
 8002710:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002714:	2100      	movs	r1, #0
 8002716:	2000      	movs	r0, #0
 8002718:	f000 f87c 	bl	8002814 <ili9341_FillRect>
  LCD_Delay(10);
 800271c:	200a      	movs	r0, #10
 800271e:	f000 fc2f 	bl	8002f80 <LCD_Delay>
  #endif
  
  LCD_IO_WriteCmd8(ILI9341_DISPON);    // Display on
 8002722:	2029      	movs	r0, #41	; 0x29
 8002724:	f000 fcbe 	bl	80030a4 <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 8002728:	200a      	movs	r0, #10
 800272a:	f000 fc29 	bl	8002f80 <LCD_Delay>
}
 800272e:	bf00      	nop
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}
 8002734:	2000055c 	.word	0x2000055c
 8002738:	0800c2a4 	.word	0x0800c2a4
 800273c:	0800c2a8 	.word	0x0800c2a8
 8002740:	0800c2ac 	.word	0x0800c2ac
 8002744:	0800c2b4 	.word	0x0800c2b4
 8002748:	0800c2b8 	.word	0x0800c2b8
 800274c:	0800c2c0 	.word	0x0800c2c0
 8002750:	0800c2c4 	.word	0x0800c2c4
 8002754:	0800c2c8 	.word	0x0800c2c8
 8002758:	0800c2cc 	.word	0x0800c2cc
 800275c:	0800c2d0 	.word	0x0800c2d0
 8002760:	0800c2d4 	.word	0x0800c2d4
 8002764:	0800c2d8 	.word	0x0800c2d8
 8002768:	0800c2dc 	.word	0x0800c2dc
 800276c:	0800c2e0 	.word	0x0800c2e0
 8002770:	0800c2e4 	.word	0x0800c2e4
 8002774:	0800c2e8 	.word	0x0800c2e8
 8002778:	0800c2ec 	.word	0x0800c2ec
 800277c:	0800c2fc 	.word	0x0800c2fc

08002780 <ili9341_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color
  * @retval None
  */
void ili9341_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
 8002786:	4603      	mov	r3, r0
 8002788:	80fb      	strh	r3, [r7, #6]
 800278a:	460b      	mov	r3, r1
 800278c:	80bb      	strh	r3, [r7, #4]
 800278e:	4613      	mov	r3, r2
 8002790:	807b      	strh	r3, [r7, #2]
  ILI9341_LCDMUTEX_PUSH();
  ILI9341_SETCURSOR(Xpos, Ypos);
 8002792:	202a      	movs	r0, #42	; 0x2a
 8002794:	f000 fc86 	bl	80030a4 <LCD_IO_WriteCmd8>
 8002798:	88fb      	ldrh	r3, [r7, #6]
 800279a:	0a1b      	lsrs	r3, r3, #8
 800279c:	b29b      	uxth	r3, r3
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	4618      	mov	r0, r3
 80027a2:	f000 fc9d 	bl	80030e0 <LCD_IO_WriteData8>
 80027a6:	88fb      	ldrh	r3, [r7, #6]
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	4618      	mov	r0, r3
 80027ac:	f000 fc98 	bl	80030e0 <LCD_IO_WriteData8>
 80027b0:	88fb      	ldrh	r3, [r7, #6]
 80027b2:	0a1b      	lsrs	r3, r3, #8
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	4618      	mov	r0, r3
 80027ba:	f000 fc91 	bl	80030e0 <LCD_IO_WriteData8>
 80027be:	88fb      	ldrh	r3, [r7, #6]
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	4618      	mov	r0, r3
 80027c4:	f000 fc8c 	bl	80030e0 <LCD_IO_WriteData8>
 80027c8:	202b      	movs	r0, #43	; 0x2b
 80027ca:	f000 fc6b 	bl	80030a4 <LCD_IO_WriteCmd8>
 80027ce:	88bb      	ldrh	r3, [r7, #4]
 80027d0:	0a1b      	lsrs	r3, r3, #8
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	4618      	mov	r0, r3
 80027d8:	f000 fc82 	bl	80030e0 <LCD_IO_WriteData8>
 80027dc:	88bb      	ldrh	r3, [r7, #4]
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	4618      	mov	r0, r3
 80027e2:	f000 fc7d 	bl	80030e0 <LCD_IO_WriteData8>
 80027e6:	88bb      	ldrh	r3, [r7, #4]
 80027e8:	0a1b      	lsrs	r3, r3, #8
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	4618      	mov	r0, r3
 80027f0:	f000 fc76 	bl	80030e0 <LCD_IO_WriteData8>
 80027f4:	88bb      	ldrh	r3, [r7, #4]
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	4618      	mov	r0, r3
 80027fa:	f000 fc71 	bl	80030e0 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_RAMWR); LCD_IO_WriteData16(RGBCode);
 80027fe:	202c      	movs	r0, #44	; 0x2c
 8002800:	f000 fc50 	bl	80030a4 <LCD_IO_WriteCmd8>
 8002804:	887b      	ldrh	r3, [r7, #2]
 8002806:	4618      	mov	r0, r3
 8002808:	f000 fc80 	bl	800310c <LCD_IO_WriteData16>
  ILI9341_LCDMUTEX_POP();
}
 800280c:	bf00      	nop
 800280e:	3708      	adds	r7, #8
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}

08002814 <ili9341_FillRect>:
  * @param  Ysize:    specifies the Y size
  * @param  RGBCode:  specifies the RGB color
  * @retval None
  */
void ili9341_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t RGBCode)
{
 8002814:	b590      	push	{r4, r7, lr}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	4604      	mov	r4, r0
 800281c:	4608      	mov	r0, r1
 800281e:	4611      	mov	r1, r2
 8002820:	461a      	mov	r2, r3
 8002822:	4623      	mov	r3, r4
 8002824:	80fb      	strh	r3, [r7, #6]
 8002826:	4603      	mov	r3, r0
 8002828:	80bb      	strh	r3, [r7, #4]
 800282a:	460b      	mov	r3, r1
 800282c:	807b      	strh	r3, [r7, #2]
 800282e:	4613      	mov	r3, r2
 8002830:	803b      	strh	r3, [r7, #0]
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Xsize - 1);
 8002832:	202a      	movs	r0, #42	; 0x2a
 8002834:	f000 fc36 	bl	80030a4 <LCD_IO_WriteCmd8>
 8002838:	88fb      	ldrh	r3, [r7, #6]
 800283a:	0a1b      	lsrs	r3, r3, #8
 800283c:	b29b      	uxth	r3, r3
 800283e:	b2db      	uxtb	r3, r3
 8002840:	4618      	mov	r0, r3
 8002842:	f000 fc4d 	bl	80030e0 <LCD_IO_WriteData8>
 8002846:	88fb      	ldrh	r3, [r7, #6]
 8002848:	b2db      	uxtb	r3, r3
 800284a:	4618      	mov	r0, r3
 800284c:	f000 fc48 	bl	80030e0 <LCD_IO_WriteData8>
 8002850:	88fa      	ldrh	r2, [r7, #6]
 8002852:	887b      	ldrh	r3, [r7, #2]
 8002854:	4413      	add	r3, r2
 8002856:	3b01      	subs	r3, #1
 8002858:	121b      	asrs	r3, r3, #8
 800285a:	b2db      	uxtb	r3, r3
 800285c:	4618      	mov	r0, r3
 800285e:	f000 fc3f 	bl	80030e0 <LCD_IO_WriteData8>
 8002862:	88fb      	ldrh	r3, [r7, #6]
 8002864:	b2da      	uxtb	r2, r3
 8002866:	887b      	ldrh	r3, [r7, #2]
 8002868:	b2db      	uxtb	r3, r3
 800286a:	4413      	add	r3, r2
 800286c:	b2db      	uxtb	r3, r3
 800286e:	3b01      	subs	r3, #1
 8002870:	b2db      	uxtb	r3, r3
 8002872:	4618      	mov	r0, r3
 8002874:	f000 fc34 	bl	80030e0 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Ysize - 1);
 8002878:	202b      	movs	r0, #43	; 0x2b
 800287a:	f000 fc13 	bl	80030a4 <LCD_IO_WriteCmd8>
 800287e:	88bb      	ldrh	r3, [r7, #4]
 8002880:	0a1b      	lsrs	r3, r3, #8
 8002882:	b29b      	uxth	r3, r3
 8002884:	b2db      	uxtb	r3, r3
 8002886:	4618      	mov	r0, r3
 8002888:	f000 fc2a 	bl	80030e0 <LCD_IO_WriteData8>
 800288c:	88bb      	ldrh	r3, [r7, #4]
 800288e:	b2db      	uxtb	r3, r3
 8002890:	4618      	mov	r0, r3
 8002892:	f000 fc25 	bl	80030e0 <LCD_IO_WriteData8>
 8002896:	88ba      	ldrh	r2, [r7, #4]
 8002898:	883b      	ldrh	r3, [r7, #0]
 800289a:	4413      	add	r3, r2
 800289c:	3b01      	subs	r3, #1
 800289e:	121b      	asrs	r3, r3, #8
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	4618      	mov	r0, r3
 80028a4:	f000 fc1c 	bl	80030e0 <LCD_IO_WriteData8>
 80028a8:	88bb      	ldrh	r3, [r7, #4]
 80028aa:	b2da      	uxtb	r2, r3
 80028ac:	883b      	ldrh	r3, [r7, #0]
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	4413      	add	r3, r2
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	3b01      	subs	r3, #1
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	4618      	mov	r0, r3
 80028ba:	f000 fc11 	bl	80030e0 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8DataFill16(ILI9341_RAMWR, RGBCode, Xsize * Ysize);
 80028be:	887b      	ldrh	r3, [r7, #2]
 80028c0:	883a      	ldrh	r2, [r7, #0]
 80028c2:	fb02 f303 	mul.w	r3, r2, r3
 80028c6:	461a      	mov	r2, r3
 80028c8:	8b3b      	ldrh	r3, [r7, #24]
 80028ca:	4619      	mov	r1, r3
 80028cc:	202c      	movs	r0, #44	; 0x2c
 80028ce:	f000 fc33 	bl	8003138 <LCD_IO_WriteCmd8DataFill16>
  ILI9341_LCDMUTEX_POP();
}
 80028d2:	bf00      	nop
 80028d4:	370c      	adds	r7, #12
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd90      	pop	{r4, r7, pc}

080028da <ili9341_WriteChar>:
  * @param  fonto: font select (from font.h)
  * @param  RGB_Coder: Text Color
  * @param  RGB_bg: Char background Color
  * @retval None
  */
void ili9341_WriteChar(uint16_t Xpo, uint16_t Ypo, const char *chr,sFONT fonto, uint16_t RGB_Coder, uint16_t RGB_bg){
 80028da:	b082      	sub	sp, #8
 80028dc:	b580      	push	{r7, lr}
 80028de:	b08a      	sub	sp, #40	; 0x28
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	603a      	str	r2, [r7, #0]
 80028e4:	637b      	str	r3, [r7, #52]	; 0x34
 80028e6:	4603      	mov	r3, r0
 80028e8:	80fb      	strh	r3, [r7, #6]
 80028ea:	460b      	mov	r3, r1
 80028ec:	80bb      	strh	r3, [r7, #4]
	/*ex
	 * ili9341_WriteChar(140, 50, "E", Font24, cl_ORANGE, cl_BLACK);
	 * */
	//// stored font data
	uint32_t hop32 = 0;
 80028ee:	2300      	movs	r3, #0
 80028f0:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t b8[4] = {0};
 80028f2:	2300      	movs	r3, #0
 80028f4:	60fb      	str	r3, [r7, #12]
	 * c = i * rowbox -> jump to next column in next i rowloop
	 * k => jump to next row in that column
	 * */

	//// find num of bit rows per jump in fonts.c
	int rowbox = ceilf((float)(fonto.Width) / 8);
 80028f6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80028f8:	ee07 3a90 	vmov	s15, r3
 80028fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002900:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8002904:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002908:	eeb0 0a47 	vmov.f32	s0, s14
 800290c:	f009 fc2e 	bl	800c16c <ceilf>
 8002910:	eef0 7a40 	vmov.f32	s15, s0
 8002914:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002918:	ee17 3a90 	vmov	r3, s15
 800291c:	617b      	str	r3, [r7, #20]

	//// choose MSB check pos for each font size
	//// 0x80 , 0x8000 , 0x 800000
	uint32_t clif_msb = 0x80 << (8 * (rowbox - 1));
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	3b01      	subs	r3, #1
 8002922:	00db      	lsls	r3, r3, #3
 8002924:	2280      	movs	r2, #128	; 0x80
 8002926:	fa02 f303 	lsl.w	r3, r2, r3
 800292a:	613b      	str	r3, [r7, #16]

	//// -32 to offset sync ASCII Table start " " at 32
	//// double for loop as one char table
	for(int i = 0; i < fonto.Height; i++){
 800292c:	2300      	movs	r3, #0
 800292e:	623b      	str	r3, [r7, #32]
 8002930:	e060      	b.n	80029f4 <ili9341_WriteChar+0x11a>
		hop32 = 0;
 8002932:	2300      	movs	r3, #0
 8002934:	627b      	str	r3, [r7, #36]	; 0x24
		for(int k = 0;k < rowbox;k++){
 8002936:	2300      	movs	r3, #0
 8002938:	61fb      	str	r3, [r7, #28]
 800293a:	e024      	b.n	8002986 <ili9341_WriteChar+0xac>
			b8[k] = fonto.table[((int)(*chr - 32) * fonto.Height * rowbox) + (i * rowbox) + k];
 800293c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800293e:	683a      	ldr	r2, [r7, #0]
 8002940:	7812      	ldrb	r2, [r2, #0]
 8002942:	3a20      	subs	r2, #32
 8002944:	8f79      	ldrh	r1, [r7, #58]	; 0x3a
 8002946:	fb01 f202 	mul.w	r2, r1, r2
 800294a:	6979      	ldr	r1, [r7, #20]
 800294c:	fb02 f101 	mul.w	r1, r2, r1
 8002950:	6a3a      	ldr	r2, [r7, #32]
 8002952:	6978      	ldr	r0, [r7, #20]
 8002954:	fb00 f202 	mul.w	r2, r0, r2
 8002958:	4411      	add	r1, r2
 800295a:	69fa      	ldr	r2, [r7, #28]
 800295c:	440a      	add	r2, r1
 800295e:	4413      	add	r3, r2
 8002960:	7819      	ldrb	r1, [r3, #0]
 8002962:	f107 020c 	add.w	r2, r7, #12
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	4413      	add	r3, r2
 800296a:	460a      	mov	r2, r1
 800296c:	701a      	strb	r2, [r3, #0]
			hop32 = (hop32 << 8) + b8[k];
 800296e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002970:	021b      	lsls	r3, r3, #8
 8002972:	f107 010c 	add.w	r1, r7, #12
 8002976:	69fa      	ldr	r2, [r7, #28]
 8002978:	440a      	add	r2, r1
 800297a:	7812      	ldrb	r2, [r2, #0]
 800297c:	4413      	add	r3, r2
 800297e:	627b      	str	r3, [r7, #36]	; 0x24
		for(int k = 0;k < rowbox;k++){
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	3301      	adds	r3, #1
 8002984:	61fb      	str	r3, [r7, #28]
 8002986:	69fa      	ldr	r2, [r7, #28]
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	429a      	cmp	r2, r3
 800298c:	dbd6      	blt.n	800293c <ili9341_WriteChar+0x62>
		}

		for(int j = 0; j < fonto.Width; j++){
 800298e:	2300      	movs	r3, #0
 8002990:	61bb      	str	r3, [r7, #24]
 8002992:	e027      	b.n	80029e4 <ili9341_WriteChar+0x10a>
			//// if valuein fonttable is 1
			if((hop32 << j) & clif_msb){ // buu32.b32
 8002994:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	409a      	lsls	r2, r3
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	4013      	ands	r3, r2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d00e      	beq.n	80029c0 <ili9341_WriteChar+0xe6>
				ili9341_WritePixel(Xpo + j, Ypo + i, RGB_Coder);
 80029a2:	69bb      	ldr	r3, [r7, #24]
 80029a4:	b29a      	uxth	r2, r3
 80029a6:	88fb      	ldrh	r3, [r7, #6]
 80029a8:	4413      	add	r3, r2
 80029aa:	b298      	uxth	r0, r3
 80029ac:	6a3b      	ldr	r3, [r7, #32]
 80029ae:	b29a      	uxth	r2, r3
 80029b0:	88bb      	ldrh	r3, [r7, #4]
 80029b2:	4413      	add	r3, r2
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 80029b8:	4619      	mov	r1, r3
 80029ba:	f7ff fee1 	bl	8002780 <ili9341_WritePixel>
 80029be:	e00e      	b.n	80029de <ili9341_WriteChar+0x104>
			}
			//// for background write
			else{
				ili9341_WritePixel(Xpo + j, Ypo + i, RGB_bg);
 80029c0:	69bb      	ldr	r3, [r7, #24]
 80029c2:	b29a      	uxth	r2, r3
 80029c4:	88fb      	ldrh	r3, [r7, #6]
 80029c6:	4413      	add	r3, r2
 80029c8:	b298      	uxth	r0, r3
 80029ca:	6a3b      	ldr	r3, [r7, #32]
 80029cc:	b29a      	uxth	r2, r3
 80029ce:	88bb      	ldrh	r3, [r7, #4]
 80029d0:	4413      	add	r3, r2
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80029d8:	4619      	mov	r1, r3
 80029da:	f7ff fed1 	bl	8002780 <ili9341_WritePixel>
		for(int j = 0; j < fonto.Width; j++){
 80029de:	69bb      	ldr	r3, [r7, #24]
 80029e0:	3301      	adds	r3, #1
 80029e2:	61bb      	str	r3, [r7, #24]
 80029e4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80029e6:	461a      	mov	r2, r3
 80029e8:	69bb      	ldr	r3, [r7, #24]
 80029ea:	4293      	cmp	r3, r2
 80029ec:	dbd2      	blt.n	8002994 <ili9341_WriteChar+0xba>
	for(int i = 0; i < fonto.Height; i++){
 80029ee:	6a3b      	ldr	r3, [r7, #32]
 80029f0:	3301      	adds	r3, #1
 80029f2:	623b      	str	r3, [r7, #32]
 80029f4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80029f6:	461a      	mov	r2, r3
 80029f8:	6a3b      	ldr	r3, [r7, #32]
 80029fa:	4293      	cmp	r3, r2
 80029fc:	db99      	blt.n	8002932 <ili9341_WriteChar+0x58>
			}

		}
	}
}
 80029fe:	bf00      	nop
 8002a00:	bf00      	nop
 8002a02:	3728      	adds	r7, #40	; 0x28
 8002a04:	46bd      	mov	sp, r7
 8002a06:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002a0a:	b002      	add	sp, #8
 8002a0c:	4770      	bx	lr

08002a0e <ili9341_WriteString>:
  * @param  fonto: font select (from font.h)
  * @param  RGB_Coder: Text Color
  * @param  RGB_bg: Text background Color
  * @retval None
  */
void ili9341_WriteString(uint16_t Xpo, uint16_t Ypo,const char* strr,sFONT fonto, uint16_t RGB_Coder, uint16_t RGB_bg){
 8002a0e:	b082      	sub	sp, #8
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b088      	sub	sp, #32
 8002a14:	af04      	add	r7, sp, #16
 8002a16:	603a      	str	r2, [r7, #0]
 8002a18:	61fb      	str	r3, [r7, #28]
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	80fb      	strh	r3, [r7, #6]
 8002a1e:	460b      	mov	r3, r1
 8002a20:	80bb      	strh	r3, [r7, #4]
	/*ex
	 * ili9341_WriteString(20, 300, "Helios xTerra", Font20, cl_WHITE, cl_BLACK);
	 * */
	uint16_t ili_heigh = ili9341_GetLcdPixelHeight();
 8002a22:	f7ff fdd6 	bl	80025d2 <ili9341_GetLcdPixelHeight>
 8002a26:	4603      	mov	r3, r0
 8002a28:	81fb      	strh	r3, [r7, #14]
	uint16_t ili_width = ili9341_GetLcdPixelWidth();
 8002a2a:	f7ff fdc9 	bl	80025c0 <ili9341_GetLcdPixelWidth>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	81bb      	strh	r3, [r7, #12]
	while(*strr){
 8002a32:	e02c      	b.n	8002a8e <ili9341_WriteString+0x80>
	//// Check screen overflow / new line
		if(Xpo + fonto.Width >= ili_width){
 8002a34:	88fb      	ldrh	r3, [r7, #6]
 8002a36:	8c3a      	ldrh	r2, [r7, #32]
 8002a38:	441a      	add	r2, r3
 8002a3a:	89bb      	ldrh	r3, [r7, #12]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	db13      	blt.n	8002a68 <ili9341_WriteString+0x5a>
			Xpo = 0;
 8002a40:	2300      	movs	r3, #0
 8002a42:	80fb      	strh	r3, [r7, #6]
			Ypo += fonto.Height;
 8002a44:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8002a46:	88bb      	ldrh	r3, [r7, #4]
 8002a48:	4413      	add	r3, r2
 8002a4a:	80bb      	strh	r3, [r7, #4]

			if(Ypo + fonto.Height >= ili_heigh){
 8002a4c:	88bb      	ldrh	r3, [r7, #4]
 8002a4e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8002a50:	441a      	add	r2, r3
 8002a52:	89fb      	ldrh	r3, [r7, #14]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	da1f      	bge.n	8002a98 <ili9341_WriteString+0x8a>
				break;
			}

			if(*strr == ' ') {
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	2b20      	cmp	r3, #32
 8002a5e:	d103      	bne.n	8002a68 <ili9341_WriteString+0x5a>
				// skip spaces in the beginning of the new line
				strr++;
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	3301      	adds	r3, #1
 8002a64:	603b      	str	r3, [r7, #0]
				continue;
 8002a66:	e012      	b.n	8002a8e <ili9341_WriteString+0x80>
			}
		}
		//ST7735_WriteChar(x, y, *str, font, color, bgcolor);
		ili9341_WriteChar(Xpo, Ypo, strr, fonto, RGB_Coder, RGB_bg);
 8002a68:	88b9      	ldrh	r1, [r7, #4]
 8002a6a:	88f8      	ldrh	r0, [r7, #6]
 8002a6c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002a6e:	9302      	str	r3, [sp, #8]
 8002a70:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002a72:	9301      	str	r3, [sp, #4]
 8002a74:	6a3b      	ldr	r3, [r7, #32]
 8002a76:	9300      	str	r3, [sp, #0]
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	683a      	ldr	r2, [r7, #0]
 8002a7c:	f7ff ff2d 	bl	80028da <ili9341_WriteChar>
		Xpo += fonto.Width;
 8002a80:	8c3a      	ldrh	r2, [r7, #32]
 8002a82:	88fb      	ldrh	r3, [r7, #6]
 8002a84:	4413      	add	r3, r2
 8002a86:	80fb      	strh	r3, [r7, #6]
		strr++;
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	603b      	str	r3, [r7, #0]
	while(*strr){
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d1ce      	bne.n	8002a34 <ili9341_WriteString+0x26>
	}
}
 8002a96:	e000      	b.n	8002a9a <ili9341_WriteString+0x8c>
				break;
 8002a98:	bf00      	nop
}
 8002a9a:	bf00      	nop
 8002a9c:	3710      	adds	r7, #16
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002aa4:	b002      	add	sp, #8
 8002aa6:	4770      	bx	lr

08002aa8 <LcdWrite8>:

#define LCD_WRITE_CLK         GPIOX_ODR(LCD_SCK) = 0; LCD_WRITE_DELAY; GPIOX_ODR(LCD_SCK) = 1;
#define LCD_READ_CLK          GPIOX_ODR(LCD_SCK) = 1; GPIOX_ODR(LCD_SCK) = 0; LCD_READ_DELAY;

void LcdWrite8(uint8_t d8)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	4603      	mov	r3, r0
 8002ab0:	71fb      	strb	r3, [r7, #7]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 7);
 8002ab2:	1dfb      	adds	r3, r7, #7
 8002ab4:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002ab8:	1dfb      	adds	r3, r7, #7
 8002aba:	015b      	lsls	r3, r3, #5
 8002abc:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002ac0:	f023 031f 	bic.w	r3, r3, #31
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002aca:	331c      	adds	r3, #28
 8002acc:	4a53      	ldr	r2, [pc, #332]	; (8002c1c <LcdWrite8+0x174>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8002ad2:	4b53      	ldr	r3, [pc, #332]	; (8002c20 <LcdWrite8+0x178>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	601a      	str	r2, [r3, #0]
 8002ad8:	4b51      	ldr	r3, [pc, #324]	; (8002c20 <LcdWrite8+0x178>)
 8002ada:	2201      	movs	r2, #1
 8002adc:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 6);
 8002ade:	1dfb      	adds	r3, r7, #7
 8002ae0:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002ae4:	1dfb      	adds	r3, r7, #7
 8002ae6:	015b      	lsls	r3, r3, #5
 8002ae8:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002aec:	f023 031f 	bic.w	r3, r3, #31
 8002af0:	4313      	orrs	r3, r2
 8002af2:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002af6:	3318      	adds	r3, #24
 8002af8:	4a48      	ldr	r2, [pc, #288]	; (8002c1c <LcdWrite8+0x174>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8002afe:	4b48      	ldr	r3, [pc, #288]	; (8002c20 <LcdWrite8+0x178>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	601a      	str	r2, [r3, #0]
 8002b04:	4b46      	ldr	r3, [pc, #280]	; (8002c20 <LcdWrite8+0x178>)
 8002b06:	2201      	movs	r2, #1
 8002b08:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 5);
 8002b0a:	1dfb      	adds	r3, r7, #7
 8002b0c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002b10:	1dfb      	adds	r3, r7, #7
 8002b12:	015b      	lsls	r3, r3, #5
 8002b14:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002b18:	f023 031f 	bic.w	r3, r3, #31
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002b22:	3314      	adds	r3, #20
 8002b24:	4a3d      	ldr	r2, [pc, #244]	; (8002c1c <LcdWrite8+0x174>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8002b2a:	4b3d      	ldr	r3, [pc, #244]	; (8002c20 <LcdWrite8+0x178>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	601a      	str	r2, [r3, #0]
 8002b30:	4b3b      	ldr	r3, [pc, #236]	; (8002c20 <LcdWrite8+0x178>)
 8002b32:	2201      	movs	r2, #1
 8002b34:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 4);
 8002b36:	1dfb      	adds	r3, r7, #7
 8002b38:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002b3c:	1dfb      	adds	r3, r7, #7
 8002b3e:	015b      	lsls	r3, r3, #5
 8002b40:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002b44:	f023 031f 	bic.w	r3, r3, #31
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002b4e:	3310      	adds	r3, #16
 8002b50:	4a32      	ldr	r2, [pc, #200]	; (8002c1c <LcdWrite8+0x174>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8002b56:	4b32      	ldr	r3, [pc, #200]	; (8002c20 <LcdWrite8+0x178>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	601a      	str	r2, [r3, #0]
 8002b5c:	4b30      	ldr	r3, [pc, #192]	; (8002c20 <LcdWrite8+0x178>)
 8002b5e:	2201      	movs	r2, #1
 8002b60:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 3);
 8002b62:	1dfb      	adds	r3, r7, #7
 8002b64:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002b68:	1dfb      	adds	r3, r7, #7
 8002b6a:	015b      	lsls	r3, r3, #5
 8002b6c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002b70:	f023 031f 	bic.w	r3, r3, #31
 8002b74:	4313      	orrs	r3, r2
 8002b76:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002b7a:	330c      	adds	r3, #12
 8002b7c:	4a27      	ldr	r2, [pc, #156]	; (8002c1c <LcdWrite8+0x174>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8002b82:	4b27      	ldr	r3, [pc, #156]	; (8002c20 <LcdWrite8+0x178>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	601a      	str	r2, [r3, #0]
 8002b88:	4b25      	ldr	r3, [pc, #148]	; (8002c20 <LcdWrite8+0x178>)
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 2);
 8002b8e:	1dfb      	adds	r3, r7, #7
 8002b90:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002b94:	1dfb      	adds	r3, r7, #7
 8002b96:	015b      	lsls	r3, r3, #5
 8002b98:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002b9c:	f023 031f 	bic.w	r3, r3, #31
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002ba6:	3308      	adds	r3, #8
 8002ba8:	4a1c      	ldr	r2, [pc, #112]	; (8002c1c <LcdWrite8+0x174>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8002bae:	4b1c      	ldr	r3, [pc, #112]	; (8002c20 <LcdWrite8+0x178>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	601a      	str	r2, [r3, #0]
 8002bb4:	4b1a      	ldr	r3, [pc, #104]	; (8002c20 <LcdWrite8+0x178>)
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 1);
 8002bba:	1dfb      	adds	r3, r7, #7
 8002bbc:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002bc0:	1dfb      	adds	r3, r7, #7
 8002bc2:	015b      	lsls	r3, r3, #5
 8002bc4:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002bc8:	f023 031f 	bic.w	r3, r3, #31
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002bd2:	3304      	adds	r3, #4
 8002bd4:	4a11      	ldr	r2, [pc, #68]	; (8002c1c <LcdWrite8+0x174>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8002bda:	4b11      	ldr	r3, [pc, #68]	; (8002c20 <LcdWrite8+0x178>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	601a      	str	r2, [r3, #0]
 8002be0:	4b0f      	ldr	r3, [pc, #60]	; (8002c20 <LcdWrite8+0x178>)
 8002be2:	2201      	movs	r2, #1
 8002be4:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 0);
 8002be6:	1dfb      	adds	r3, r7, #7
 8002be8:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002bec:	1dfb      	adds	r3, r7, #7
 8002bee:	015b      	lsls	r3, r3, #5
 8002bf0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002bf4:	f023 031f 	bic.w	r3, r3, #31
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002bfe:	4a07      	ldr	r2, [pc, #28]	; (8002c1c <LcdWrite8+0x174>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8002c04:	4b06      	ldr	r3, [pc, #24]	; (8002c20 <LcdWrite8+0x178>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	601a      	str	r2, [r3, #0]
 8002c0a:	4b05      	ldr	r3, [pc, #20]	; (8002c20 <LcdWrite8+0x178>)
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	601a      	str	r2, [r3, #0]
}
 8002c10:	bf00      	nop
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr
 8002c1c:	4241028c 	.word	0x4241028c
 8002c20:	424082a8 	.word	0x424082a8

08002c24 <LcdWrite16>:

void LcdWrite16(uint16_t d16)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	80fb      	strh	r3, [r7, #6]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 15);
 8002c2e:	1dbb      	adds	r3, r7, #6
 8002c30:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002c34:	1dbb      	adds	r3, r7, #6
 8002c36:	015b      	lsls	r3, r3, #5
 8002c38:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002c3c:	f023 031f 	bic.w	r3, r3, #31
 8002c40:	4313      	orrs	r3, r2
 8002c42:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002c46:	333c      	adds	r3, #60	; 0x3c
 8002c48:	4aab      	ldr	r2, [pc, #684]	; (8002ef8 <LcdWrite16+0x2d4>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8002c4e:	4bab      	ldr	r3, [pc, #684]	; (8002efc <LcdWrite16+0x2d8>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	601a      	str	r2, [r3, #0]
 8002c54:	4ba9      	ldr	r3, [pc, #676]	; (8002efc <LcdWrite16+0x2d8>)
 8002c56:	2201      	movs	r2, #1
 8002c58:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 14);
 8002c5a:	1dbb      	adds	r3, r7, #6
 8002c5c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002c60:	1dbb      	adds	r3, r7, #6
 8002c62:	015b      	lsls	r3, r3, #5
 8002c64:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002c68:	f023 031f 	bic.w	r3, r3, #31
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002c72:	3338      	adds	r3, #56	; 0x38
 8002c74:	4aa0      	ldr	r2, [pc, #640]	; (8002ef8 <LcdWrite16+0x2d4>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8002c7a:	4ba0      	ldr	r3, [pc, #640]	; (8002efc <LcdWrite16+0x2d8>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	601a      	str	r2, [r3, #0]
 8002c80:	4b9e      	ldr	r3, [pc, #632]	; (8002efc <LcdWrite16+0x2d8>)
 8002c82:	2201      	movs	r2, #1
 8002c84:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 13);
 8002c86:	1dbb      	adds	r3, r7, #6
 8002c88:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002c8c:	1dbb      	adds	r3, r7, #6
 8002c8e:	015b      	lsls	r3, r3, #5
 8002c90:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002c94:	f023 031f 	bic.w	r3, r3, #31
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002c9e:	3334      	adds	r3, #52	; 0x34
 8002ca0:	4a95      	ldr	r2, [pc, #596]	; (8002ef8 <LcdWrite16+0x2d4>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8002ca6:	4b95      	ldr	r3, [pc, #596]	; (8002efc <LcdWrite16+0x2d8>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	601a      	str	r2, [r3, #0]
 8002cac:	4b93      	ldr	r3, [pc, #588]	; (8002efc <LcdWrite16+0x2d8>)
 8002cae:	2201      	movs	r2, #1
 8002cb0:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 12);
 8002cb2:	1dbb      	adds	r3, r7, #6
 8002cb4:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002cb8:	1dbb      	adds	r3, r7, #6
 8002cba:	015b      	lsls	r3, r3, #5
 8002cbc:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002cc0:	f023 031f 	bic.w	r3, r3, #31
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002cca:	3330      	adds	r3, #48	; 0x30
 8002ccc:	4a8a      	ldr	r2, [pc, #552]	; (8002ef8 <LcdWrite16+0x2d4>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8002cd2:	4b8a      	ldr	r3, [pc, #552]	; (8002efc <LcdWrite16+0x2d8>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	601a      	str	r2, [r3, #0]
 8002cd8:	4b88      	ldr	r3, [pc, #544]	; (8002efc <LcdWrite16+0x2d8>)
 8002cda:	2201      	movs	r2, #1
 8002cdc:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 11);
 8002cde:	1dbb      	adds	r3, r7, #6
 8002ce0:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002ce4:	1dbb      	adds	r3, r7, #6
 8002ce6:	015b      	lsls	r3, r3, #5
 8002ce8:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002cec:	f023 031f 	bic.w	r3, r3, #31
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002cf6:	332c      	adds	r3, #44	; 0x2c
 8002cf8:	4a7f      	ldr	r2, [pc, #508]	; (8002ef8 <LcdWrite16+0x2d4>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8002cfe:	4b7f      	ldr	r3, [pc, #508]	; (8002efc <LcdWrite16+0x2d8>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	601a      	str	r2, [r3, #0]
 8002d04:	4b7d      	ldr	r3, [pc, #500]	; (8002efc <LcdWrite16+0x2d8>)
 8002d06:	2201      	movs	r2, #1
 8002d08:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 10);
 8002d0a:	1dbb      	adds	r3, r7, #6
 8002d0c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002d10:	1dbb      	adds	r3, r7, #6
 8002d12:	015b      	lsls	r3, r3, #5
 8002d14:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002d18:	f023 031f 	bic.w	r3, r3, #31
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002d22:	3328      	adds	r3, #40	; 0x28
 8002d24:	4a74      	ldr	r2, [pc, #464]	; (8002ef8 <LcdWrite16+0x2d4>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8002d2a:	4b74      	ldr	r3, [pc, #464]	; (8002efc <LcdWrite16+0x2d8>)
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	601a      	str	r2, [r3, #0]
 8002d30:	4b72      	ldr	r3, [pc, #456]	; (8002efc <LcdWrite16+0x2d8>)
 8002d32:	2201      	movs	r2, #1
 8002d34:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 9);
 8002d36:	1dbb      	adds	r3, r7, #6
 8002d38:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002d3c:	1dbb      	adds	r3, r7, #6
 8002d3e:	015b      	lsls	r3, r3, #5
 8002d40:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002d44:	f023 031f 	bic.w	r3, r3, #31
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002d4e:	3324      	adds	r3, #36	; 0x24
 8002d50:	4a69      	ldr	r2, [pc, #420]	; (8002ef8 <LcdWrite16+0x2d4>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8002d56:	4b69      	ldr	r3, [pc, #420]	; (8002efc <LcdWrite16+0x2d8>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	601a      	str	r2, [r3, #0]
 8002d5c:	4b67      	ldr	r3, [pc, #412]	; (8002efc <LcdWrite16+0x2d8>)
 8002d5e:	2201      	movs	r2, #1
 8002d60:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 8);
 8002d62:	1dbb      	adds	r3, r7, #6
 8002d64:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002d68:	1dbb      	adds	r3, r7, #6
 8002d6a:	015b      	lsls	r3, r3, #5
 8002d6c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002d70:	f023 031f 	bic.w	r3, r3, #31
 8002d74:	4313      	orrs	r3, r2
 8002d76:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002d7a:	3320      	adds	r3, #32
 8002d7c:	4a5e      	ldr	r2, [pc, #376]	; (8002ef8 <LcdWrite16+0x2d4>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8002d82:	4b5e      	ldr	r3, [pc, #376]	; (8002efc <LcdWrite16+0x2d8>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	601a      	str	r2, [r3, #0]
 8002d88:	4b5c      	ldr	r3, [pc, #368]	; (8002efc <LcdWrite16+0x2d8>)
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 7);
 8002d8e:	1dbb      	adds	r3, r7, #6
 8002d90:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002d94:	1dbb      	adds	r3, r7, #6
 8002d96:	015b      	lsls	r3, r3, #5
 8002d98:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002d9c:	f023 031f 	bic.w	r3, r3, #31
 8002da0:	4313      	orrs	r3, r2
 8002da2:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002da6:	331c      	adds	r3, #28
 8002da8:	4a53      	ldr	r2, [pc, #332]	; (8002ef8 <LcdWrite16+0x2d4>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8002dae:	4b53      	ldr	r3, [pc, #332]	; (8002efc <LcdWrite16+0x2d8>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	601a      	str	r2, [r3, #0]
 8002db4:	4b51      	ldr	r3, [pc, #324]	; (8002efc <LcdWrite16+0x2d8>)
 8002db6:	2201      	movs	r2, #1
 8002db8:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 6);
 8002dba:	1dbb      	adds	r3, r7, #6
 8002dbc:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002dc0:	1dbb      	adds	r3, r7, #6
 8002dc2:	015b      	lsls	r3, r3, #5
 8002dc4:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002dc8:	f023 031f 	bic.w	r3, r3, #31
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002dd2:	3318      	adds	r3, #24
 8002dd4:	4a48      	ldr	r2, [pc, #288]	; (8002ef8 <LcdWrite16+0x2d4>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8002dda:	4b48      	ldr	r3, [pc, #288]	; (8002efc <LcdWrite16+0x2d8>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	601a      	str	r2, [r3, #0]
 8002de0:	4b46      	ldr	r3, [pc, #280]	; (8002efc <LcdWrite16+0x2d8>)
 8002de2:	2201      	movs	r2, #1
 8002de4:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 5);
 8002de6:	1dbb      	adds	r3, r7, #6
 8002de8:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002dec:	1dbb      	adds	r3, r7, #6
 8002dee:	015b      	lsls	r3, r3, #5
 8002df0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002df4:	f023 031f 	bic.w	r3, r3, #31
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002dfe:	3314      	adds	r3, #20
 8002e00:	4a3d      	ldr	r2, [pc, #244]	; (8002ef8 <LcdWrite16+0x2d4>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8002e06:	4b3d      	ldr	r3, [pc, #244]	; (8002efc <LcdWrite16+0x2d8>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	601a      	str	r2, [r3, #0]
 8002e0c:	4b3b      	ldr	r3, [pc, #236]	; (8002efc <LcdWrite16+0x2d8>)
 8002e0e:	2201      	movs	r2, #1
 8002e10:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 4);
 8002e12:	1dbb      	adds	r3, r7, #6
 8002e14:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002e18:	1dbb      	adds	r3, r7, #6
 8002e1a:	015b      	lsls	r3, r3, #5
 8002e1c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002e20:	f023 031f 	bic.w	r3, r3, #31
 8002e24:	4313      	orrs	r3, r2
 8002e26:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002e2a:	3310      	adds	r3, #16
 8002e2c:	4a32      	ldr	r2, [pc, #200]	; (8002ef8 <LcdWrite16+0x2d4>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8002e32:	4b32      	ldr	r3, [pc, #200]	; (8002efc <LcdWrite16+0x2d8>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	601a      	str	r2, [r3, #0]
 8002e38:	4b30      	ldr	r3, [pc, #192]	; (8002efc <LcdWrite16+0x2d8>)
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 3);
 8002e3e:	1dbb      	adds	r3, r7, #6
 8002e40:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002e44:	1dbb      	adds	r3, r7, #6
 8002e46:	015b      	lsls	r3, r3, #5
 8002e48:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002e4c:	f023 031f 	bic.w	r3, r3, #31
 8002e50:	4313      	orrs	r3, r2
 8002e52:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002e56:	330c      	adds	r3, #12
 8002e58:	4a27      	ldr	r2, [pc, #156]	; (8002ef8 <LcdWrite16+0x2d4>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8002e5e:	4b27      	ldr	r3, [pc, #156]	; (8002efc <LcdWrite16+0x2d8>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	601a      	str	r2, [r3, #0]
 8002e64:	4b25      	ldr	r3, [pc, #148]	; (8002efc <LcdWrite16+0x2d8>)
 8002e66:	2201      	movs	r2, #1
 8002e68:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 2);
 8002e6a:	1dbb      	adds	r3, r7, #6
 8002e6c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002e70:	1dbb      	adds	r3, r7, #6
 8002e72:	015b      	lsls	r3, r3, #5
 8002e74:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002e78:	f023 031f 	bic.w	r3, r3, #31
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002e82:	3308      	adds	r3, #8
 8002e84:	4a1c      	ldr	r2, [pc, #112]	; (8002ef8 <LcdWrite16+0x2d4>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8002e8a:	4b1c      	ldr	r3, [pc, #112]	; (8002efc <LcdWrite16+0x2d8>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	601a      	str	r2, [r3, #0]
 8002e90:	4b1a      	ldr	r3, [pc, #104]	; (8002efc <LcdWrite16+0x2d8>)
 8002e92:	2201      	movs	r2, #1
 8002e94:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 1);
 8002e96:	1dbb      	adds	r3, r7, #6
 8002e98:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002e9c:	1dbb      	adds	r3, r7, #6
 8002e9e:	015b      	lsls	r3, r3, #5
 8002ea0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002ea4:	f023 031f 	bic.w	r3, r3, #31
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002eae:	3304      	adds	r3, #4
 8002eb0:	4a11      	ldr	r2, [pc, #68]	; (8002ef8 <LcdWrite16+0x2d4>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8002eb6:	4b11      	ldr	r3, [pc, #68]	; (8002efc <LcdWrite16+0x2d8>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	601a      	str	r2, [r3, #0]
 8002ebc:	4b0f      	ldr	r3, [pc, #60]	; (8002efc <LcdWrite16+0x2d8>)
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 0);
 8002ec2:	1dbb      	adds	r3, r7, #6
 8002ec4:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002ec8:	1dbb      	adds	r3, r7, #6
 8002eca:	015b      	lsls	r3, r3, #5
 8002ecc:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002ed0:	f023 031f 	bic.w	r3, r3, #31
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002eda:	4a07      	ldr	r2, [pc, #28]	; (8002ef8 <LcdWrite16+0x2d4>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8002ee0:	4b06      	ldr	r3, [pc, #24]	; (8002efc <LcdWrite16+0x2d8>)
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	601a      	str	r2, [r3, #0]
 8002ee6:	4b05      	ldr	r3, [pc, #20]	; (8002efc <LcdWrite16+0x2d8>)
 8002ee8:	2201      	movs	r2, #1
 8002eea:	601a      	str	r2, [r3, #0]
}
 8002eec:	bf00      	nop
 8002eee:	370c      	adds	r7, #12
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr
 8002ef8:	4241028c 	.word	0x4241028c
 8002efc:	424082a8 	.word	0x424082a8

08002f00 <LCD_IO_WriteMultiData8>:
#if DMANUM(LCD_DMA_TX) == 0 || LCD_SPI == 0

/* SPI TX no DMA */

void LCD_IO_WriteMultiData8(uint8_t * pData, uint32_t Size, uint32_t dinc)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	60f8      	str	r0, [r7, #12]
 8002f08:	60b9      	str	r1, [r7, #8]
 8002f0a:	607a      	str	r2, [r7, #4]
  while(Size--)
 8002f0c:	e00a      	b.n	8002f24 <LCD_IO_WriteMultiData8+0x24>
  {
    LcdWrite8(*pData);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	4618      	mov	r0, r3
 8002f14:	f7ff fdc8 	bl	8002aa8 <LcdWrite8>
    if(dinc)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d002      	beq.n	8002f24 <LCD_IO_WriteMultiData8+0x24>
      pData++;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	3301      	adds	r3, #1
 8002f22:	60fb      	str	r3, [r7, #12]
  while(Size--)
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	1e5a      	subs	r2, r3, #1
 8002f28:	60ba      	str	r2, [r7, #8]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d1ef      	bne.n	8002f0e <LCD_IO_WriteMultiData8+0xe>
  }
  LCD_CS_OFF;
 8002f2e:	4b03      	ldr	r3, [pc, #12]	; (8002f3c <LCD_IO_WriteMultiData8+0x3c>)
 8002f30:	2201      	movs	r2, #1
 8002f32:	601a      	str	r2, [r3, #0]
}
 8002f34:	bf00      	nop
 8002f36:	3710      	adds	r7, #16
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	424002a0 	.word	0x424002a0

08002f40 <LCD_IO_WriteMultiData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteMultiData16(uint16_t * pData, uint32_t Size, uint32_t dinc)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	60b9      	str	r1, [r7, #8]
 8002f4a:	607a      	str	r2, [r7, #4]
  while(Size--)
 8002f4c:	e00a      	b.n	8002f64 <LCD_IO_WriteMultiData16+0x24>
  {
    LcdWrite16(*pData);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	881b      	ldrh	r3, [r3, #0]
 8002f52:	4618      	mov	r0, r3
 8002f54:	f7ff fe66 	bl	8002c24 <LcdWrite16>
    if(dinc)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d002      	beq.n	8002f64 <LCD_IO_WriteMultiData16+0x24>
      pData++;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	3302      	adds	r3, #2
 8002f62:	60fb      	str	r3, [r7, #12]
  while(Size--)
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	1e5a      	subs	r2, r3, #1
 8002f68:	60ba      	str	r2, [r7, #8]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d1ef      	bne.n	8002f4e <LCD_IO_WriteMultiData16+0xe>
  }
  LCD_CS_OFF;
 8002f6e:	4b03      	ldr	r3, [pc, #12]	; (8002f7c <LCD_IO_WriteMultiData16+0x3c>)
 8002f70:	2201      	movs	r2, #1
 8002f72:	601a      	str	r2, [r3, #0]
}
 8002f74:	bf00      	nop
 8002f76:	3710      	adds	r7, #16
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	424002a0 	.word	0x424002a0

08002f80 <LCD_Delay>:

//=============================================================================
/* Public functions */

void LCD_Delay(uint32_t Delay)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f000 f9b7 	bl	80032fc <HAL_Delay>
}
 8002f8e:	bf00      	nop
 8002f90:	3708      	adds	r7, #8
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <LCD_IO_Bl_OnOff>:

//-----------------------------------------------------------------------------
void LCD_IO_Bl_OnOff(uint8_t Bl)
{
 8002f96:	b480      	push	{r7}
 8002f98:	b083      	sub	sp, #12
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	71fb      	strb	r3, [r7, #7]
  if(Bl)
    GPIOX_ODR(LCD_BL) = LCD_BLON;
  else
    GPIOX_ODR(LCD_BL) = 1 - LCD_BLON;
  #endif
}
 8002fa0:	bf00      	nop
 8002fa2:	370c      	adds	r7, #12
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr

08002fac <LCD_IO_Init>:

//-----------------------------------------------------------------------------
void LCD_IO_Init(void)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	af00      	add	r7, sp, #0
  #define DMA1_CLOCK_RX         0
  #endif
  #endif  // #else LCD_SPI == 0

  /* GPIO, DMA Clocks */
  RCC->AHB1ENR |= GPIOX_CLOCK(LCD_RS) | GPIOX_CLOCK(LCD_CS) | GPIOX_CLOCK(LCD_SCK) | GPIOX_CLOCK(LCD_MOSI) |
 8002fb0:	4b34      	ldr	r3, [pc, #208]	; (8003084 <LCD_IO_Init+0xd8>)
 8002fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb4:	4a33      	ldr	r2, [pc, #204]	; (8003084 <LCD_IO_Init+0xd8>)
 8002fb6:	f043 0307 	orr.w	r3, r3, #7
 8002fba:	6313      	str	r3, [r2, #48]	; 0x30
  LCD_IO_Bl_OnOff(1);
  #endif

  /* Reset pin = output, reset off */
  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A
  GPIOX_MODER(MODE_OUT, LCD_RST);
 8002fbc:	4b32      	ldr	r3, [pc, #200]	; (8003088 <LCD_IO_Init+0xdc>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002fc4:	4a30      	ldr	r2, [pc, #192]	; (8003088 <LCD_IO_Init+0xdc>)
 8002fc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002fca:	6013      	str	r3, [r2, #0]
  GPIOX_OSPEEDR(MODE_SPD_LOW, LCD_RST);
 8002fcc:	4b2e      	ldr	r3, [pc, #184]	; (8003088 <LCD_IO_Init+0xdc>)
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	4a2d      	ldr	r2, [pc, #180]	; (8003088 <LCD_IO_Init+0xdc>)
 8002fd2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002fd6:	6093      	str	r3, [r2, #8]
  LCD_RST_OFF;
 8002fd8:	4b2c      	ldr	r3, [pc, #176]	; (800308c <LCD_IO_Init+0xe0>)
 8002fda:	2201      	movs	r2, #1
 8002fdc:	601a      	str	r2, [r3, #0]
  #endif

  LCD_RS_DATA;
 8002fde:	4b2c      	ldr	r3, [pc, #176]	; (8003090 <LCD_IO_Init+0xe4>)
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	601a      	str	r2, [r3, #0]
  LCD_CS_OFF;
 8002fe4:	4b2b      	ldr	r3, [pc, #172]	; (8003094 <LCD_IO_Init+0xe8>)
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	601a      	str	r2, [r3, #0]
  GPIOX_MODER(MODE_OUT, LCD_RS);
 8002fea:	4b2b      	ldr	r3, [pc, #172]	; (8003098 <LCD_IO_Init+0xec>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002ff2:	4a29      	ldr	r2, [pc, #164]	; (8003098 <LCD_IO_Init+0xec>)
 8002ff4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ff8:	6013      	str	r3, [r2, #0]
  GPIOX_MODER(MODE_OUT, LCD_CS);
 8002ffa:	4b27      	ldr	r3, [pc, #156]	; (8003098 <LCD_IO_Init+0xec>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003002:	4a25      	ldr	r2, [pc, #148]	; (8003098 <LCD_IO_Init+0xec>)
 8003004:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003008:	6013      	str	r3, [r2, #0]

  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_RS);
 800300a:	4b23      	ldr	r3, [pc, #140]	; (8003098 <LCD_IO_Init+0xec>)
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	4a22      	ldr	r2, [pc, #136]	; (8003098 <LCD_IO_Init+0xec>)
 8003010:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8003014:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_CS);
 8003016:	4b20      	ldr	r3, [pc, #128]	; (8003098 <LCD_IO_Init+0xec>)
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	4a1f      	ldr	r2, [pc, #124]	; (8003098 <LCD_IO_Init+0xec>)
 800301c:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8003020:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_SCK);
 8003022:	4b19      	ldr	r3, [pc, #100]	; (8003088 <LCD_IO_Init+0xdc>)
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	4a18      	ldr	r2, [pc, #96]	; (8003088 <LCD_IO_Init+0xdc>)
 8003028:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800302c:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_MOSI);
 800302e:	4b1b      	ldr	r3, [pc, #108]	; (800309c <LCD_IO_Init+0xf0>)
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	4a1a      	ldr	r2, [pc, #104]	; (800309c <LCD_IO_Init+0xf0>)
 8003034:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003038:	6093      	str	r3, [r2, #8]
  GPIOX_ODR(LCD_SCK) = 1;               // SCK = 1
 800303a:	4b19      	ldr	r3, [pc, #100]	; (80030a0 <LCD_IO_Init+0xf4>)
 800303c:	2201      	movs	r2, #1
 800303e:	601a      	str	r2, [r3, #0]

  #if LCD_SPI == 0
  /* Software SPI */
  GPIOX_MODER(MODE_OUT, LCD_SCK);
 8003040:	4b11      	ldr	r3, [pc, #68]	; (8003088 <LCD_IO_Init+0xdc>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003048:	4a0f      	ldr	r2, [pc, #60]	; (8003088 <LCD_IO_Init+0xdc>)
 800304a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800304e:	6013      	str	r3, [r2, #0]
  GPIOX_MODER(MODE_OUT, LCD_MOSI);
 8003050:	4b12      	ldr	r3, [pc, #72]	; (800309c <LCD_IO_Init+0xf0>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003058:	4a10      	ldr	r2, [pc, #64]	; (800309c <LCD_IO_Init+0xf0>)
 800305a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800305e:	6013      	str	r3, [r2, #0]

  #endif // #else LCD_SPI == 0

  /* Set or Reset the control line */
  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A // reset
  LCD_Delay(10);
 8003060:	200a      	movs	r0, #10
 8003062:	f7ff ff8d 	bl	8002f80 <LCD_Delay>
  LCD_RST_ON;
 8003066:	4b09      	ldr	r3, [pc, #36]	; (800308c <LCD_IO_Init+0xe0>)
 8003068:	2200      	movs	r2, #0
 800306a:	601a      	str	r2, [r3, #0]
  LCD_Delay(10);
 800306c:	200a      	movs	r0, #10
 800306e:	f7ff ff87 	bl	8002f80 <LCD_Delay>
  LCD_RST_OFF;
 8003072:	4b06      	ldr	r3, [pc, #24]	; (800308c <LCD_IO_Init+0xe0>)
 8003074:	2201      	movs	r2, #1
 8003076:	601a      	str	r2, [r3, #0]
  #endif
  LCD_Delay(10);
 8003078:	200a      	movs	r0, #10
 800307a:	f7ff ff81 	bl	8002f80 <LCD_Delay>
  osSemaphoreDef(spiDmaBinSem);
  spiDmaBinSemHandle = osSemaphoreCreate(osSemaphore(spiDmaBinSem), 1);
  osSemaphoreWait(spiDmaBinSemHandle, 1);
  #endif
  #endif  // #if DMANUM(LCD_DMA_RX) > 0
} // void LCD_IO_Init(void)
 800307e:	bf00      	nop
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	40023800 	.word	0x40023800
 8003088:	40020400 	.word	0x40020400
 800308c:	42408294 	.word	0x42408294
 8003090:	424002a8 	.word	0x424002a8
 8003094:	424002a0 	.word	0x424002a0
 8003098:	40020000 	.word	0x40020000
 800309c:	40020800 	.word	0x40020800
 80030a0:	424082a8 	.word	0x424082a8

080030a4 <LCD_IO_WriteCmd8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8(uint8_t Cmd)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b082      	sub	sp, #8
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	4603      	mov	r3, r0
 80030ac:	71fb      	strb	r3, [r7, #7]
  WaitForDmaEnd();
  LcdSpiMode8();
  LCD_CS_ON;
 80030ae:	4b0a      	ldr	r3, [pc, #40]	; (80030d8 <LCD_IO_WriteCmd8+0x34>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 80030b4:	4b09      	ldr	r3, [pc, #36]	; (80030dc <LCD_IO_WriteCmd8+0x38>)
 80030b6:	2200      	movs	r2, #0
 80030b8:	601a      	str	r2, [r3, #0]
 80030ba:	79fb      	ldrb	r3, [r7, #7]
 80030bc:	4618      	mov	r0, r3
 80030be:	f7ff fcf3 	bl	8002aa8 <LcdWrite8>
 80030c2:	4b06      	ldr	r3, [pc, #24]	; (80030dc <LCD_IO_WriteCmd8+0x38>)
 80030c4:	2201      	movs	r2, #1
 80030c6:	601a      	str	r2, [r3, #0]
  LCD_CS_OFF;
 80030c8:	4b03      	ldr	r3, [pc, #12]	; (80030d8 <LCD_IO_WriteCmd8+0x34>)
 80030ca:	2201      	movs	r2, #1
 80030cc:	601a      	str	r2, [r3, #0]
}
 80030ce:	bf00      	nop
 80030d0:	3708      	adds	r7, #8
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	424002a0 	.word	0x424002a0
 80030dc:	424002a8 	.word	0x424002a8

080030e0 <LCD_IO_WriteData8>:
  LCD_CS_OFF;
}

//-----------------------------------------------------------------------------
void LCD_IO_WriteData8(uint8_t Data)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	4603      	mov	r3, r0
 80030e8:	71fb      	strb	r3, [r7, #7]
  WaitForDmaEnd();
  LcdSpiMode8();
  LCD_CS_ON;
 80030ea:	4b07      	ldr	r3, [pc, #28]	; (8003108 <LCD_IO_WriteData8+0x28>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	601a      	str	r2, [r3, #0]
  LcdWrite8(Data);
 80030f0:	79fb      	ldrb	r3, [r7, #7]
 80030f2:	4618      	mov	r0, r3
 80030f4:	f7ff fcd8 	bl	8002aa8 <LcdWrite8>
  LCD_CS_OFF;
 80030f8:	4b03      	ldr	r3, [pc, #12]	; (8003108 <LCD_IO_WriteData8+0x28>)
 80030fa:	2201      	movs	r2, #1
 80030fc:	601a      	str	r2, [r3, #0]
}
 80030fe:	bf00      	nop
 8003100:	3708      	adds	r7, #8
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	424002a0 	.word	0x424002a0

0800310c <LCD_IO_WriteData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteData16(uint16_t Data)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
 8003112:	4603      	mov	r3, r0
 8003114:	80fb      	strh	r3, [r7, #6]
  WaitForDmaEnd();
  LcdSpiMode16();
  LCD_CS_ON;
 8003116:	4b07      	ldr	r3, [pc, #28]	; (8003134 <LCD_IO_WriteData16+0x28>)
 8003118:	2200      	movs	r2, #0
 800311a:	601a      	str	r2, [r3, #0]
  LcdWrite16(Data);
 800311c:	88fb      	ldrh	r3, [r7, #6]
 800311e:	4618      	mov	r0, r3
 8003120:	f7ff fd80 	bl	8002c24 <LcdWrite16>
  LCD_CS_OFF;
 8003124:	4b03      	ldr	r3, [pc, #12]	; (8003134 <LCD_IO_WriteData16+0x28>)
 8003126:	2201      	movs	r2, #1
 8003128:	601a      	str	r2, [r3, #0]
}
 800312a:	bf00      	nop
 800312c:	3708      	adds	r7, #8
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	424002a0 	.word	0x424002a0

08003138 <LCD_IO_WriteCmd8DataFill16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8DataFill16(uint8_t Cmd, uint16_t Data, uint32_t Size)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b082      	sub	sp, #8
 800313c:	af00      	add	r7, sp, #0
 800313e:	4603      	mov	r3, r0
 8003140:	603a      	str	r2, [r7, #0]
 8003142:	71fb      	strb	r3, [r7, #7]
 8003144:	460b      	mov	r3, r1
 8003146:	80bb      	strh	r3, [r7, #4]
  WaitForDmaEnd();
  LcdSpiMode8();
  LCD_CS_ON;
 8003148:	4b0b      	ldr	r3, [pc, #44]	; (8003178 <LCD_IO_WriteCmd8DataFill16+0x40>)
 800314a:	2200      	movs	r2, #0
 800314c:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 800314e:	4b0b      	ldr	r3, [pc, #44]	; (800317c <LCD_IO_WriteCmd8DataFill16+0x44>)
 8003150:	2200      	movs	r2, #0
 8003152:	601a      	str	r2, [r3, #0]
 8003154:	79fb      	ldrb	r3, [r7, #7]
 8003156:	4618      	mov	r0, r3
 8003158:	f7ff fca6 	bl	8002aa8 <LcdWrite8>
 800315c:	4b07      	ldr	r3, [pc, #28]	; (800317c <LCD_IO_WriteCmd8DataFill16+0x44>)
 800315e:	2201      	movs	r2, #1
 8003160:	601a      	str	r2, [r3, #0]
  LcdSpiMode16();
  LCD_IO_WriteMultiData16(&Data, Size, 0);
 8003162:	1d3b      	adds	r3, r7, #4
 8003164:	2200      	movs	r2, #0
 8003166:	6839      	ldr	r1, [r7, #0]
 8003168:	4618      	mov	r0, r3
 800316a:	f7ff fee9 	bl	8002f40 <LCD_IO_WriteMultiData16>
}
 800316e:	bf00      	nop
 8003170:	3708      	adds	r7, #8
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
 8003176:	bf00      	nop
 8003178:	424002a0 	.word	0x424002a0
 800317c:	424002a8 	.word	0x424002a8

08003180 <LCD_IO_WriteCmd8MultipleData8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8MultipleData8(uint8_t Cmd, uint8_t *pData, uint32_t Size)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b084      	sub	sp, #16
 8003184:	af00      	add	r7, sp, #0
 8003186:	4603      	mov	r3, r0
 8003188:	60b9      	str	r1, [r7, #8]
 800318a:	607a      	str	r2, [r7, #4]
 800318c:	73fb      	strb	r3, [r7, #15]
  WaitForDmaEnd();
  LcdSpiMode8();
  LCD_CS_ON;
 800318e:	4b0b      	ldr	r3, [pc, #44]	; (80031bc <LCD_IO_WriteCmd8MultipleData8+0x3c>)
 8003190:	2200      	movs	r2, #0
 8003192:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 8003194:	4b0a      	ldr	r3, [pc, #40]	; (80031c0 <LCD_IO_WriteCmd8MultipleData8+0x40>)
 8003196:	2200      	movs	r2, #0
 8003198:	601a      	str	r2, [r3, #0]
 800319a:	7bfb      	ldrb	r3, [r7, #15]
 800319c:	4618      	mov	r0, r3
 800319e:	f7ff fc83 	bl	8002aa8 <LcdWrite8>
 80031a2:	4b07      	ldr	r3, [pc, #28]	; (80031c0 <LCD_IO_WriteCmd8MultipleData8+0x40>)
 80031a4:	2201      	movs	r2, #1
 80031a6:	601a      	str	r2, [r3, #0]
  LCD_IO_WriteMultiData8(pData, Size, 1);
 80031a8:	2201      	movs	r2, #1
 80031aa:	6879      	ldr	r1, [r7, #4]
 80031ac:	68b8      	ldr	r0, [r7, #8]
 80031ae:	f7ff fea7 	bl	8002f00 <LCD_IO_WriteMultiData8>
}
 80031b2:	bf00      	nop
 80031b4:	3710      	adds	r7, #16
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	424002a0 	.word	0x424002a0
 80031c0:	424002a8 	.word	0x424002a8

080031c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80031c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80031fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80031c8:	480d      	ldr	r0, [pc, #52]	; (8003200 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80031ca:	490e      	ldr	r1, [pc, #56]	; (8003204 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80031cc:	4a0e      	ldr	r2, [pc, #56]	; (8003208 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80031ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80031d0:	e002      	b.n	80031d8 <LoopCopyDataInit>

080031d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031d6:	3304      	adds	r3, #4

080031d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031dc:	d3f9      	bcc.n	80031d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031de:	4a0b      	ldr	r2, [pc, #44]	; (800320c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80031e0:	4c0b      	ldr	r4, [pc, #44]	; (8003210 <LoopFillZerobss+0x26>)
  movs r3, #0
 80031e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031e4:	e001      	b.n	80031ea <LoopFillZerobss>

080031e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031e8:	3204      	adds	r2, #4

080031ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031ec:	d3fb      	bcc.n	80031e6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80031ee:	f7ff f9cb 	bl	8002588 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80031f2:	f006 f879 	bl	80092e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80031f6:	f7fe f973 	bl	80014e0 <main>
  bx  lr    
 80031fa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80031fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003200:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003204:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8003208:	0800d76c 	.word	0x0800d76c
  ldr r2, =_sbss
 800320c:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8003210:	20000574 	.word	0x20000574

08003214 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003214:	e7fe      	b.n	8003214 <ADC_IRQHandler>
	...

08003218 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800321c:	4b0e      	ldr	r3, [pc, #56]	; (8003258 <HAL_Init+0x40>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a0d      	ldr	r2, [pc, #52]	; (8003258 <HAL_Init+0x40>)
 8003222:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003226:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003228:	4b0b      	ldr	r3, [pc, #44]	; (8003258 <HAL_Init+0x40>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a0a      	ldr	r2, [pc, #40]	; (8003258 <HAL_Init+0x40>)
 800322e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003232:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003234:	4b08      	ldr	r3, [pc, #32]	; (8003258 <HAL_Init+0x40>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a07      	ldr	r2, [pc, #28]	; (8003258 <HAL_Init+0x40>)
 800323a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800323e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003240:	2003      	movs	r0, #3
 8003242:	f000 f94f 	bl	80034e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003246:	2000      	movs	r0, #0
 8003248:	f000 f808 	bl	800325c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800324c:	f7fe fe76 	bl	8001f3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	40023c00 	.word	0x40023c00

0800325c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b082      	sub	sp, #8
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003264:	4b12      	ldr	r3, [pc, #72]	; (80032b0 <HAL_InitTick+0x54>)
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	4b12      	ldr	r3, [pc, #72]	; (80032b4 <HAL_InitTick+0x58>)
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	4619      	mov	r1, r3
 800326e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003272:	fbb3 f3f1 	udiv	r3, r3, r1
 8003276:	fbb2 f3f3 	udiv	r3, r2, r3
 800327a:	4618      	mov	r0, r3
 800327c:	f000 f967 	bl	800354e <HAL_SYSTICK_Config>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d001      	beq.n	800328a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e00e      	b.n	80032a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2b0f      	cmp	r3, #15
 800328e:	d80a      	bhi.n	80032a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003290:	2200      	movs	r2, #0
 8003292:	6879      	ldr	r1, [r7, #4]
 8003294:	f04f 30ff 	mov.w	r0, #4294967295
 8003298:	f000 f92f 	bl	80034fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800329c:	4a06      	ldr	r2, [pc, #24]	; (80032b8 <HAL_InitTick+0x5c>)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80032a2:	2300      	movs	r3, #0
 80032a4:	e000      	b.n	80032a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3708      	adds	r7, #8
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	20000008 	.word	0x20000008
 80032b4:	20000020 	.word	0x20000020
 80032b8:	2000001c 	.word	0x2000001c

080032bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032bc:	b480      	push	{r7}
 80032be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80032c0:	4b06      	ldr	r3, [pc, #24]	; (80032dc <HAL_IncTick+0x20>)
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	461a      	mov	r2, r3
 80032c6:	4b06      	ldr	r3, [pc, #24]	; (80032e0 <HAL_IncTick+0x24>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4413      	add	r3, r2
 80032cc:	4a04      	ldr	r2, [pc, #16]	; (80032e0 <HAL_IncTick+0x24>)
 80032ce:	6013      	str	r3, [r2, #0]
}
 80032d0:	bf00      	nop
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr
 80032da:	bf00      	nop
 80032dc:	20000020 	.word	0x20000020
 80032e0:	20000560 	.word	0x20000560

080032e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032e4:	b480      	push	{r7}
 80032e6:	af00      	add	r7, sp, #0
  return uwTick;
 80032e8:	4b03      	ldr	r3, [pc, #12]	; (80032f8 <HAL_GetTick+0x14>)
 80032ea:	681b      	ldr	r3, [r3, #0]
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr
 80032f6:	bf00      	nop
 80032f8:	20000560 	.word	0x20000560

080032fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b084      	sub	sp, #16
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003304:	f7ff ffee 	bl	80032e4 <HAL_GetTick>
 8003308:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003314:	d005      	beq.n	8003322 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003316:	4b0a      	ldr	r3, [pc, #40]	; (8003340 <HAL_Delay+0x44>)
 8003318:	781b      	ldrb	r3, [r3, #0]
 800331a:	461a      	mov	r2, r3
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	4413      	add	r3, r2
 8003320:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003322:	bf00      	nop
 8003324:	f7ff ffde 	bl	80032e4 <HAL_GetTick>
 8003328:	4602      	mov	r2, r0
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	68fa      	ldr	r2, [r7, #12]
 8003330:	429a      	cmp	r2, r3
 8003332:	d8f7      	bhi.n	8003324 <HAL_Delay+0x28>
  {
  }
}
 8003334:	bf00      	nop
 8003336:	bf00      	nop
 8003338:	3710      	adds	r7, #16
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	20000020 	.word	0x20000020

08003344 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003344:	b480      	push	{r7}
 8003346:	b085      	sub	sp, #20
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f003 0307 	and.w	r3, r3, #7
 8003352:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003354:	4b0c      	ldr	r3, [pc, #48]	; (8003388 <__NVIC_SetPriorityGrouping+0x44>)
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800335a:	68ba      	ldr	r2, [r7, #8]
 800335c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003360:	4013      	ands	r3, r2
 8003362:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800336c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003370:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003374:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003376:	4a04      	ldr	r2, [pc, #16]	; (8003388 <__NVIC_SetPriorityGrouping+0x44>)
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	60d3      	str	r3, [r2, #12]
}
 800337c:	bf00      	nop
 800337e:	3714      	adds	r7, #20
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr
 8003388:	e000ed00 	.word	0xe000ed00

0800338c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800338c:	b480      	push	{r7}
 800338e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003390:	4b04      	ldr	r3, [pc, #16]	; (80033a4 <__NVIC_GetPriorityGrouping+0x18>)
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	0a1b      	lsrs	r3, r3, #8
 8003396:	f003 0307 	and.w	r3, r3, #7
}
 800339a:	4618      	mov	r0, r3
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr
 80033a4:	e000ed00 	.word	0xe000ed00

080033a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	4603      	mov	r3, r0
 80033b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	db0b      	blt.n	80033d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033ba:	79fb      	ldrb	r3, [r7, #7]
 80033bc:	f003 021f 	and.w	r2, r3, #31
 80033c0:	4907      	ldr	r1, [pc, #28]	; (80033e0 <__NVIC_EnableIRQ+0x38>)
 80033c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033c6:	095b      	lsrs	r3, r3, #5
 80033c8:	2001      	movs	r0, #1
 80033ca:	fa00 f202 	lsl.w	r2, r0, r2
 80033ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80033d2:	bf00      	nop
 80033d4:	370c      	adds	r7, #12
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop
 80033e0:	e000e100 	.word	0xe000e100

080033e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	4603      	mov	r3, r0
 80033ec:	6039      	str	r1, [r7, #0]
 80033ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	db0a      	blt.n	800340e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	b2da      	uxtb	r2, r3
 80033fc:	490c      	ldr	r1, [pc, #48]	; (8003430 <__NVIC_SetPriority+0x4c>)
 80033fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003402:	0112      	lsls	r2, r2, #4
 8003404:	b2d2      	uxtb	r2, r2
 8003406:	440b      	add	r3, r1
 8003408:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800340c:	e00a      	b.n	8003424 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	b2da      	uxtb	r2, r3
 8003412:	4908      	ldr	r1, [pc, #32]	; (8003434 <__NVIC_SetPriority+0x50>)
 8003414:	79fb      	ldrb	r3, [r7, #7]
 8003416:	f003 030f 	and.w	r3, r3, #15
 800341a:	3b04      	subs	r3, #4
 800341c:	0112      	lsls	r2, r2, #4
 800341e:	b2d2      	uxtb	r2, r2
 8003420:	440b      	add	r3, r1
 8003422:	761a      	strb	r2, [r3, #24]
}
 8003424:	bf00      	nop
 8003426:	370c      	adds	r7, #12
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr
 8003430:	e000e100 	.word	0xe000e100
 8003434:	e000ed00 	.word	0xe000ed00

08003438 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003438:	b480      	push	{r7}
 800343a:	b089      	sub	sp, #36	; 0x24
 800343c:	af00      	add	r7, sp, #0
 800343e:	60f8      	str	r0, [r7, #12]
 8003440:	60b9      	str	r1, [r7, #8]
 8003442:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f003 0307 	and.w	r3, r3, #7
 800344a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800344c:	69fb      	ldr	r3, [r7, #28]
 800344e:	f1c3 0307 	rsb	r3, r3, #7
 8003452:	2b04      	cmp	r3, #4
 8003454:	bf28      	it	cs
 8003456:	2304      	movcs	r3, #4
 8003458:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	3304      	adds	r3, #4
 800345e:	2b06      	cmp	r3, #6
 8003460:	d902      	bls.n	8003468 <NVIC_EncodePriority+0x30>
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	3b03      	subs	r3, #3
 8003466:	e000      	b.n	800346a <NVIC_EncodePriority+0x32>
 8003468:	2300      	movs	r3, #0
 800346a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800346c:	f04f 32ff 	mov.w	r2, #4294967295
 8003470:	69bb      	ldr	r3, [r7, #24]
 8003472:	fa02 f303 	lsl.w	r3, r2, r3
 8003476:	43da      	mvns	r2, r3
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	401a      	ands	r2, r3
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003480:	f04f 31ff 	mov.w	r1, #4294967295
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	fa01 f303 	lsl.w	r3, r1, r3
 800348a:	43d9      	mvns	r1, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003490:	4313      	orrs	r3, r2
         );
}
 8003492:	4618      	mov	r0, r3
 8003494:	3724      	adds	r7, #36	; 0x24
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr
	...

080034a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b082      	sub	sp, #8
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	3b01      	subs	r3, #1
 80034ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034b0:	d301      	bcc.n	80034b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034b2:	2301      	movs	r3, #1
 80034b4:	e00f      	b.n	80034d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034b6:	4a0a      	ldr	r2, [pc, #40]	; (80034e0 <SysTick_Config+0x40>)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	3b01      	subs	r3, #1
 80034bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034be:	210f      	movs	r1, #15
 80034c0:	f04f 30ff 	mov.w	r0, #4294967295
 80034c4:	f7ff ff8e 	bl	80033e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034c8:	4b05      	ldr	r3, [pc, #20]	; (80034e0 <SysTick_Config+0x40>)
 80034ca:	2200      	movs	r2, #0
 80034cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034ce:	4b04      	ldr	r3, [pc, #16]	; (80034e0 <SysTick_Config+0x40>)
 80034d0:	2207      	movs	r2, #7
 80034d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034d4:	2300      	movs	r3, #0
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3708      	adds	r7, #8
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	e000e010 	.word	0xe000e010

080034e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b082      	sub	sp, #8
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f7ff ff29 	bl	8003344 <__NVIC_SetPriorityGrouping>
}
 80034f2:	bf00      	nop
 80034f4:	3708      	adds	r7, #8
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}

080034fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034fa:	b580      	push	{r7, lr}
 80034fc:	b086      	sub	sp, #24
 80034fe:	af00      	add	r7, sp, #0
 8003500:	4603      	mov	r3, r0
 8003502:	60b9      	str	r1, [r7, #8]
 8003504:	607a      	str	r2, [r7, #4]
 8003506:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003508:	2300      	movs	r3, #0
 800350a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800350c:	f7ff ff3e 	bl	800338c <__NVIC_GetPriorityGrouping>
 8003510:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	68b9      	ldr	r1, [r7, #8]
 8003516:	6978      	ldr	r0, [r7, #20]
 8003518:	f7ff ff8e 	bl	8003438 <NVIC_EncodePriority>
 800351c:	4602      	mov	r2, r0
 800351e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003522:	4611      	mov	r1, r2
 8003524:	4618      	mov	r0, r3
 8003526:	f7ff ff5d 	bl	80033e4 <__NVIC_SetPriority>
}
 800352a:	bf00      	nop
 800352c:	3718      	adds	r7, #24
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}

08003532 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003532:	b580      	push	{r7, lr}
 8003534:	b082      	sub	sp, #8
 8003536:	af00      	add	r7, sp, #0
 8003538:	4603      	mov	r3, r0
 800353a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800353c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003540:	4618      	mov	r0, r3
 8003542:	f7ff ff31 	bl	80033a8 <__NVIC_EnableIRQ>
}
 8003546:	bf00      	nop
 8003548:	3708      	adds	r7, #8
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}

0800354e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800354e:	b580      	push	{r7, lr}
 8003550:	b082      	sub	sp, #8
 8003552:	af00      	add	r7, sp, #0
 8003554:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f7ff ffa2 	bl	80034a0 <SysTick_Config>
 800355c:	4603      	mov	r3, r0
}
 800355e:	4618      	mov	r0, r3
 8003560:	3708      	adds	r7, #8
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
	...

08003568 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b086      	sub	sp, #24
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003570:	2300      	movs	r3, #0
 8003572:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003574:	f7ff feb6 	bl	80032e4 <HAL_GetTick>
 8003578:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d101      	bne.n	8003584 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e099      	b.n	80036b8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2202      	movs	r2, #2
 8003588:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2200      	movs	r2, #0
 8003590:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f022 0201 	bic.w	r2, r2, #1
 80035a2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035a4:	e00f      	b.n	80035c6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80035a6:	f7ff fe9d 	bl	80032e4 <HAL_GetTick>
 80035aa:	4602      	mov	r2, r0
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	1ad3      	subs	r3, r2, r3
 80035b0:	2b05      	cmp	r3, #5
 80035b2:	d908      	bls.n	80035c6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2220      	movs	r2, #32
 80035b8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2203      	movs	r2, #3
 80035be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	e078      	b.n	80036b8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0301 	and.w	r3, r3, #1
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d1e8      	bne.n	80035a6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80035dc:	697a      	ldr	r2, [r7, #20]
 80035de:	4b38      	ldr	r3, [pc, #224]	; (80036c0 <HAL_DMA_Init+0x158>)
 80035e0:	4013      	ands	r3, r2
 80035e2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	685a      	ldr	r2, [r3, #4]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80035f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	691b      	ldr	r3, [r3, #16]
 80035f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	699b      	ldr	r3, [r3, #24]
 8003604:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800360a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6a1b      	ldr	r3, [r3, #32]
 8003610:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003612:	697a      	ldr	r2, [r7, #20]
 8003614:	4313      	orrs	r3, r2
 8003616:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361c:	2b04      	cmp	r3, #4
 800361e:	d107      	bne.n	8003630 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003628:	4313      	orrs	r3, r2
 800362a:	697a      	ldr	r2, [r7, #20]
 800362c:	4313      	orrs	r3, r2
 800362e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	697a      	ldr	r2, [r7, #20]
 8003636:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	695b      	ldr	r3, [r3, #20]
 800363e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	f023 0307 	bic.w	r3, r3, #7
 8003646:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364c:	697a      	ldr	r2, [r7, #20]
 800364e:	4313      	orrs	r3, r2
 8003650:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003656:	2b04      	cmp	r3, #4
 8003658:	d117      	bne.n	800368a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800365e:	697a      	ldr	r2, [r7, #20]
 8003660:	4313      	orrs	r3, r2
 8003662:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003668:	2b00      	cmp	r3, #0
 800366a:	d00e      	beq.n	800368a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f000 fb0f 	bl	8003c90 <DMA_CheckFifoParam>
 8003672:	4603      	mov	r3, r0
 8003674:	2b00      	cmp	r3, #0
 8003676:	d008      	beq.n	800368a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2240      	movs	r2, #64	; 0x40
 800367c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2201      	movs	r2, #1
 8003682:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003686:	2301      	movs	r3, #1
 8003688:	e016      	b.n	80036b8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	697a      	ldr	r2, [r7, #20]
 8003690:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f000 fac6 	bl	8003c24 <DMA_CalcBaseAndBitshift>
 8003698:	4603      	mov	r3, r0
 800369a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036a0:	223f      	movs	r2, #63	; 0x3f
 80036a2:	409a      	lsls	r2, r3
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2201      	movs	r2, #1
 80036b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80036b6:	2300      	movs	r3, #0
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3718      	adds	r7, #24
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	f010803f 	.word	0xf010803f

080036c4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b086      	sub	sp, #24
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	60f8      	str	r0, [r7, #12]
 80036cc:	60b9      	str	r1, [r7, #8]
 80036ce:	607a      	str	r2, [r7, #4]
 80036d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036d2:	2300      	movs	r3, #0
 80036d4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036da:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d101      	bne.n	80036ea <HAL_DMA_Start_IT+0x26>
 80036e6:	2302      	movs	r3, #2
 80036e8:	e040      	b.n	800376c <HAL_DMA_Start_IT+0xa8>
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2201      	movs	r2, #1
 80036ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d12f      	bne.n	800375e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2202      	movs	r2, #2
 8003702:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2200      	movs	r2, #0
 800370a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	68b9      	ldr	r1, [r7, #8]
 8003712:	68f8      	ldr	r0, [r7, #12]
 8003714:	f000 fa58 	bl	8003bc8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800371c:	223f      	movs	r2, #63	; 0x3f
 800371e:	409a      	lsls	r2, r3
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f042 0216 	orr.w	r2, r2, #22
 8003732:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003738:	2b00      	cmp	r3, #0
 800373a:	d007      	beq.n	800374c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f042 0208 	orr.w	r2, r2, #8
 800374a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f042 0201 	orr.w	r2, r2, #1
 800375a:	601a      	str	r2, [r3, #0]
 800375c:	e005      	b.n	800376a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003766:	2302      	movs	r3, #2
 8003768:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800376a:	7dfb      	ldrb	r3, [r7, #23]
}
 800376c:	4618      	mov	r0, r3
 800376e:	3718      	adds	r7, #24
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}

08003774 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003780:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003782:	f7ff fdaf 	bl	80032e4 <HAL_GetTick>
 8003786:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800378e:	b2db      	uxtb	r3, r3
 8003790:	2b02      	cmp	r3, #2
 8003792:	d008      	beq.n	80037a6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2280      	movs	r2, #128	; 0x80
 8003798:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e052      	b.n	800384c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f022 0216 	bic.w	r2, r2, #22
 80037b4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	695a      	ldr	r2, [r3, #20]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037c4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d103      	bne.n	80037d6 <HAL_DMA_Abort+0x62>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d007      	beq.n	80037e6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f022 0208 	bic.w	r2, r2, #8
 80037e4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f022 0201 	bic.w	r2, r2, #1
 80037f4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037f6:	e013      	b.n	8003820 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80037f8:	f7ff fd74 	bl	80032e4 <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	2b05      	cmp	r3, #5
 8003804:	d90c      	bls.n	8003820 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2220      	movs	r2, #32
 800380a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2203      	movs	r2, #3
 8003810:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800381c:	2303      	movs	r3, #3
 800381e:	e015      	b.n	800384c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0301 	and.w	r3, r3, #1
 800382a:	2b00      	cmp	r3, #0
 800382c:	d1e4      	bne.n	80037f8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003832:	223f      	movs	r2, #63	; 0x3f
 8003834:	409a      	lsls	r2, r3
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2201      	movs	r2, #1
 800383e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800384a:	2300      	movs	r3, #0
}
 800384c:	4618      	mov	r0, r3
 800384e:	3710      	adds	r7, #16
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}

08003854 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003862:	b2db      	uxtb	r3, r3
 8003864:	2b02      	cmp	r3, #2
 8003866:	d004      	beq.n	8003872 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2280      	movs	r2, #128	; 0x80
 800386c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e00c      	b.n	800388c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2205      	movs	r2, #5
 8003876:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f022 0201 	bic.w	r2, r2, #1
 8003888:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800388a:	2300      	movs	r3, #0
}
 800388c:	4618      	mov	r0, r3
 800388e:	370c      	adds	r7, #12
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr

08003898 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b086      	sub	sp, #24
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80038a0:	2300      	movs	r3, #0
 80038a2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80038a4:	4b8e      	ldr	r3, [pc, #568]	; (8003ae0 <HAL_DMA_IRQHandler+0x248>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a8e      	ldr	r2, [pc, #568]	; (8003ae4 <HAL_DMA_IRQHandler+0x24c>)
 80038aa:	fba2 2303 	umull	r2, r3, r2, r3
 80038ae:	0a9b      	lsrs	r3, r3, #10
 80038b0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038b6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038c2:	2208      	movs	r2, #8
 80038c4:	409a      	lsls	r2, r3
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	4013      	ands	r3, r2
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d01a      	beq.n	8003904 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0304 	and.w	r3, r3, #4
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d013      	beq.n	8003904 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f022 0204 	bic.w	r2, r2, #4
 80038ea:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038f0:	2208      	movs	r2, #8
 80038f2:	409a      	lsls	r2, r3
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038fc:	f043 0201 	orr.w	r2, r3, #1
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003908:	2201      	movs	r2, #1
 800390a:	409a      	lsls	r2, r3
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	4013      	ands	r3, r2
 8003910:	2b00      	cmp	r3, #0
 8003912:	d012      	beq.n	800393a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	695b      	ldr	r3, [r3, #20]
 800391a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800391e:	2b00      	cmp	r3, #0
 8003920:	d00b      	beq.n	800393a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003926:	2201      	movs	r2, #1
 8003928:	409a      	lsls	r2, r3
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003932:	f043 0202 	orr.w	r2, r3, #2
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800393e:	2204      	movs	r2, #4
 8003940:	409a      	lsls	r2, r3
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	4013      	ands	r3, r2
 8003946:	2b00      	cmp	r3, #0
 8003948:	d012      	beq.n	8003970 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 0302 	and.w	r3, r3, #2
 8003954:	2b00      	cmp	r3, #0
 8003956:	d00b      	beq.n	8003970 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800395c:	2204      	movs	r2, #4
 800395e:	409a      	lsls	r2, r3
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003968:	f043 0204 	orr.w	r2, r3, #4
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003974:	2210      	movs	r2, #16
 8003976:	409a      	lsls	r2, r3
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	4013      	ands	r3, r2
 800397c:	2b00      	cmp	r3, #0
 800397e:	d043      	beq.n	8003a08 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0308 	and.w	r3, r3, #8
 800398a:	2b00      	cmp	r3, #0
 800398c:	d03c      	beq.n	8003a08 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003992:	2210      	movs	r2, #16
 8003994:	409a      	lsls	r2, r3
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d018      	beq.n	80039da <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d108      	bne.n	80039c8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d024      	beq.n	8003a08 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	4798      	blx	r3
 80039c6:	e01f      	b.n	8003a08 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d01b      	beq.n	8003a08 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	4798      	blx	r3
 80039d8:	e016      	b.n	8003a08 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d107      	bne.n	80039f8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f022 0208 	bic.w	r2, r2, #8
 80039f6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d003      	beq.n	8003a08 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a0c:	2220      	movs	r2, #32
 8003a0e:	409a      	lsls	r2, r3
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	4013      	ands	r3, r2
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	f000 808f 	beq.w	8003b38 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0310 	and.w	r3, r3, #16
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	f000 8087 	beq.w	8003b38 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a2e:	2220      	movs	r2, #32
 8003a30:	409a      	lsls	r2, r3
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	2b05      	cmp	r3, #5
 8003a40:	d136      	bne.n	8003ab0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f022 0216 	bic.w	r2, r2, #22
 8003a50:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	695a      	ldr	r2, [r3, #20]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a60:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d103      	bne.n	8003a72 <HAL_DMA_IRQHandler+0x1da>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d007      	beq.n	8003a82 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f022 0208 	bic.w	r2, r2, #8
 8003a80:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a86:	223f      	movs	r2, #63	; 0x3f
 8003a88:	409a      	lsls	r2, r3
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2201      	movs	r2, #1
 8003a92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d07e      	beq.n	8003ba4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	4798      	blx	r3
        }
        return;
 8003aae:	e079      	b.n	8003ba4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d01d      	beq.n	8003afa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d10d      	bne.n	8003ae8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d031      	beq.n	8003b38 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	4798      	blx	r3
 8003adc:	e02c      	b.n	8003b38 <HAL_DMA_IRQHandler+0x2a0>
 8003ade:	bf00      	nop
 8003ae0:	20000008 	.word	0x20000008
 8003ae4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d023      	beq.n	8003b38 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	4798      	blx	r3
 8003af8:	e01e      	b.n	8003b38 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d10f      	bne.n	8003b28 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f022 0210 	bic.w	r2, r2, #16
 8003b16:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2200      	movs	r2, #0
 8003b24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d003      	beq.n	8003b38 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d032      	beq.n	8003ba6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b44:	f003 0301 	and.w	r3, r3, #1
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d022      	beq.n	8003b92 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2205      	movs	r2, #5
 8003b50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f022 0201 	bic.w	r2, r2, #1
 8003b62:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	3301      	adds	r3, #1
 8003b68:	60bb      	str	r3, [r7, #8]
 8003b6a:	697a      	ldr	r2, [r7, #20]
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d307      	bcc.n	8003b80 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0301 	and.w	r3, r3, #1
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d1f2      	bne.n	8003b64 <HAL_DMA_IRQHandler+0x2cc>
 8003b7e:	e000      	b.n	8003b82 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003b80:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2201      	movs	r2, #1
 8003b86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d005      	beq.n	8003ba6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	4798      	blx	r3
 8003ba2:	e000      	b.n	8003ba6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003ba4:	bf00      	nop
    }
  }
}
 8003ba6:	3718      	adds	r7, #24
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}

08003bac <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003bba:	b2db      	uxtb	r3, r3
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	370c      	adds	r7, #12
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr

08003bc8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b085      	sub	sp, #20
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	60f8      	str	r0, [r7, #12]
 8003bd0:	60b9      	str	r1, [r7, #8]
 8003bd2:	607a      	str	r2, [r7, #4]
 8003bd4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003be4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	683a      	ldr	r2, [r7, #0]
 8003bec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	2b40      	cmp	r3, #64	; 0x40
 8003bf4:	d108      	bne.n	8003c08 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	68ba      	ldr	r2, [r7, #8]
 8003c04:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003c06:	e007      	b.n	8003c18 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	68ba      	ldr	r2, [r7, #8]
 8003c0e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	60da      	str	r2, [r3, #12]
}
 8003c18:	bf00      	nop
 8003c1a:	3714      	adds	r7, #20
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr

08003c24 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b085      	sub	sp, #20
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	3b10      	subs	r3, #16
 8003c34:	4a14      	ldr	r2, [pc, #80]	; (8003c88 <DMA_CalcBaseAndBitshift+0x64>)
 8003c36:	fba2 2303 	umull	r2, r3, r2, r3
 8003c3a:	091b      	lsrs	r3, r3, #4
 8003c3c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003c3e:	4a13      	ldr	r2, [pc, #76]	; (8003c8c <DMA_CalcBaseAndBitshift+0x68>)
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	4413      	add	r3, r2
 8003c44:	781b      	ldrb	r3, [r3, #0]
 8003c46:	461a      	mov	r2, r3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2b03      	cmp	r3, #3
 8003c50:	d909      	bls.n	8003c66 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003c5a:	f023 0303 	bic.w	r3, r3, #3
 8003c5e:	1d1a      	adds	r2, r3, #4
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	659a      	str	r2, [r3, #88]	; 0x58
 8003c64:	e007      	b.n	8003c76 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003c6e:	f023 0303 	bic.w	r3, r3, #3
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3714      	adds	r7, #20
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr
 8003c86:	bf00      	nop
 8003c88:	aaaaaaab 	.word	0xaaaaaaab
 8003c8c:	0800d37c 	.word	0x0800d37c

08003c90 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b085      	sub	sp, #20
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	699b      	ldr	r3, [r3, #24]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d11f      	bne.n	8003cea <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	2b03      	cmp	r3, #3
 8003cae:	d856      	bhi.n	8003d5e <DMA_CheckFifoParam+0xce>
 8003cb0:	a201      	add	r2, pc, #4	; (adr r2, 8003cb8 <DMA_CheckFifoParam+0x28>)
 8003cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cb6:	bf00      	nop
 8003cb8:	08003cc9 	.word	0x08003cc9
 8003cbc:	08003cdb 	.word	0x08003cdb
 8003cc0:	08003cc9 	.word	0x08003cc9
 8003cc4:	08003d5f 	.word	0x08003d5f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ccc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d046      	beq.n	8003d62 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cd8:	e043      	b.n	8003d62 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cde:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003ce2:	d140      	bne.n	8003d66 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ce8:	e03d      	b.n	8003d66 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	699b      	ldr	r3, [r3, #24]
 8003cee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cf2:	d121      	bne.n	8003d38 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	2b03      	cmp	r3, #3
 8003cf8:	d837      	bhi.n	8003d6a <DMA_CheckFifoParam+0xda>
 8003cfa:	a201      	add	r2, pc, #4	; (adr r2, 8003d00 <DMA_CheckFifoParam+0x70>)
 8003cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d00:	08003d11 	.word	0x08003d11
 8003d04:	08003d17 	.word	0x08003d17
 8003d08:	08003d11 	.word	0x08003d11
 8003d0c:	08003d29 	.word	0x08003d29
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	73fb      	strb	r3, [r7, #15]
      break;
 8003d14:	e030      	b.n	8003d78 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d1a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d025      	beq.n	8003d6e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d26:	e022      	b.n	8003d6e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d2c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d30:	d11f      	bne.n	8003d72 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003d36:	e01c      	b.n	8003d72 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	d903      	bls.n	8003d46 <DMA_CheckFifoParam+0xb6>
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	2b03      	cmp	r3, #3
 8003d42:	d003      	beq.n	8003d4c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003d44:	e018      	b.n	8003d78 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	73fb      	strb	r3, [r7, #15]
      break;
 8003d4a:	e015      	b.n	8003d78 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d00e      	beq.n	8003d76 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	73fb      	strb	r3, [r7, #15]
      break;
 8003d5c:	e00b      	b.n	8003d76 <DMA_CheckFifoParam+0xe6>
      break;
 8003d5e:	bf00      	nop
 8003d60:	e00a      	b.n	8003d78 <DMA_CheckFifoParam+0xe8>
      break;
 8003d62:	bf00      	nop
 8003d64:	e008      	b.n	8003d78 <DMA_CheckFifoParam+0xe8>
      break;
 8003d66:	bf00      	nop
 8003d68:	e006      	b.n	8003d78 <DMA_CheckFifoParam+0xe8>
      break;
 8003d6a:	bf00      	nop
 8003d6c:	e004      	b.n	8003d78 <DMA_CheckFifoParam+0xe8>
      break;
 8003d6e:	bf00      	nop
 8003d70:	e002      	b.n	8003d78 <DMA_CheckFifoParam+0xe8>
      break;   
 8003d72:	bf00      	nop
 8003d74:	e000      	b.n	8003d78 <DMA_CheckFifoParam+0xe8>
      break;
 8003d76:	bf00      	nop
    }
  } 
  
  return status; 
 8003d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3714      	adds	r7, #20
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr
 8003d86:	bf00      	nop

08003d88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b089      	sub	sp, #36	; 0x24
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003d92:	2300      	movs	r3, #0
 8003d94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003d96:	2300      	movs	r3, #0
 8003d98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d9e:	2300      	movs	r3, #0
 8003da0:	61fb      	str	r3, [r7, #28]
 8003da2:	e159      	b.n	8004058 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003da4:	2201      	movs	r2, #1
 8003da6:	69fb      	ldr	r3, [r7, #28]
 8003da8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	697a      	ldr	r2, [r7, #20]
 8003db4:	4013      	ands	r3, r2
 8003db6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003db8:	693a      	ldr	r2, [r7, #16]
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	f040 8148 	bne.w	8004052 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	f003 0303 	and.w	r3, r3, #3
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d005      	beq.n	8003dda <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003dd6:	2b02      	cmp	r3, #2
 8003dd8:	d130      	bne.n	8003e3c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	005b      	lsls	r3, r3, #1
 8003de4:	2203      	movs	r2, #3
 8003de6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dea:	43db      	mvns	r3, r3
 8003dec:	69ba      	ldr	r2, [r7, #24]
 8003dee:	4013      	ands	r3, r2
 8003df0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	68da      	ldr	r2, [r3, #12]
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	005b      	lsls	r3, r3, #1
 8003dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfe:	69ba      	ldr	r2, [r7, #24]
 8003e00:	4313      	orrs	r3, r2
 8003e02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	69ba      	ldr	r2, [r7, #24]
 8003e08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e10:	2201      	movs	r2, #1
 8003e12:	69fb      	ldr	r3, [r7, #28]
 8003e14:	fa02 f303 	lsl.w	r3, r2, r3
 8003e18:	43db      	mvns	r3, r3
 8003e1a:	69ba      	ldr	r2, [r7, #24]
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	091b      	lsrs	r3, r3, #4
 8003e26:	f003 0201 	and.w	r2, r3, #1
 8003e2a:	69fb      	ldr	r3, [r7, #28]
 8003e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e30:	69ba      	ldr	r2, [r7, #24]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	69ba      	ldr	r2, [r7, #24]
 8003e3a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	f003 0303 	and.w	r3, r3, #3
 8003e44:	2b03      	cmp	r3, #3
 8003e46:	d017      	beq.n	8003e78 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003e4e:	69fb      	ldr	r3, [r7, #28]
 8003e50:	005b      	lsls	r3, r3, #1
 8003e52:	2203      	movs	r2, #3
 8003e54:	fa02 f303 	lsl.w	r3, r2, r3
 8003e58:	43db      	mvns	r3, r3
 8003e5a:	69ba      	ldr	r2, [r7, #24]
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	689a      	ldr	r2, [r3, #8]
 8003e64:	69fb      	ldr	r3, [r7, #28]
 8003e66:	005b      	lsls	r3, r3, #1
 8003e68:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6c:	69ba      	ldr	r2, [r7, #24]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	69ba      	ldr	r2, [r7, #24]
 8003e76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	f003 0303 	and.w	r3, r3, #3
 8003e80:	2b02      	cmp	r3, #2
 8003e82:	d123      	bne.n	8003ecc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	08da      	lsrs	r2, r3, #3
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	3208      	adds	r2, #8
 8003e8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e90:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	f003 0307 	and.w	r3, r3, #7
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	220f      	movs	r2, #15
 8003e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea0:	43db      	mvns	r3, r3
 8003ea2:	69ba      	ldr	r2, [r7, #24]
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	691a      	ldr	r2, [r3, #16]
 8003eac:	69fb      	ldr	r3, [r7, #28]
 8003eae:	f003 0307 	and.w	r3, r3, #7
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb8:	69ba      	ldr	r2, [r7, #24]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	08da      	lsrs	r2, r3, #3
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	3208      	adds	r2, #8
 8003ec6:	69b9      	ldr	r1, [r7, #24]
 8003ec8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003ed2:	69fb      	ldr	r3, [r7, #28]
 8003ed4:	005b      	lsls	r3, r3, #1
 8003ed6:	2203      	movs	r2, #3
 8003ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8003edc:	43db      	mvns	r3, r3
 8003ede:	69ba      	ldr	r2, [r7, #24]
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	f003 0203 	and.w	r2, r3, #3
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	005b      	lsls	r3, r3, #1
 8003ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef4:	69ba      	ldr	r2, [r7, #24]
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	69ba      	ldr	r2, [r7, #24]
 8003efe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	f000 80a2 	beq.w	8004052 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f0e:	2300      	movs	r3, #0
 8003f10:	60fb      	str	r3, [r7, #12]
 8003f12:	4b57      	ldr	r3, [pc, #348]	; (8004070 <HAL_GPIO_Init+0x2e8>)
 8003f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f16:	4a56      	ldr	r2, [pc, #344]	; (8004070 <HAL_GPIO_Init+0x2e8>)
 8003f18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f1c:	6453      	str	r3, [r2, #68]	; 0x44
 8003f1e:	4b54      	ldr	r3, [pc, #336]	; (8004070 <HAL_GPIO_Init+0x2e8>)
 8003f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f26:	60fb      	str	r3, [r7, #12]
 8003f28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003f2a:	4a52      	ldr	r2, [pc, #328]	; (8004074 <HAL_GPIO_Init+0x2ec>)
 8003f2c:	69fb      	ldr	r3, [r7, #28]
 8003f2e:	089b      	lsrs	r3, r3, #2
 8003f30:	3302      	adds	r3, #2
 8003f32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003f38:	69fb      	ldr	r3, [r7, #28]
 8003f3a:	f003 0303 	and.w	r3, r3, #3
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	220f      	movs	r2, #15
 8003f42:	fa02 f303 	lsl.w	r3, r2, r3
 8003f46:	43db      	mvns	r3, r3
 8003f48:	69ba      	ldr	r2, [r7, #24]
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	4a49      	ldr	r2, [pc, #292]	; (8004078 <HAL_GPIO_Init+0x2f0>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d019      	beq.n	8003f8a <HAL_GPIO_Init+0x202>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4a48      	ldr	r2, [pc, #288]	; (800407c <HAL_GPIO_Init+0x2f4>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d013      	beq.n	8003f86 <HAL_GPIO_Init+0x1fe>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	4a47      	ldr	r2, [pc, #284]	; (8004080 <HAL_GPIO_Init+0x2f8>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d00d      	beq.n	8003f82 <HAL_GPIO_Init+0x1fa>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	4a46      	ldr	r2, [pc, #280]	; (8004084 <HAL_GPIO_Init+0x2fc>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d007      	beq.n	8003f7e <HAL_GPIO_Init+0x1f6>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	4a45      	ldr	r2, [pc, #276]	; (8004088 <HAL_GPIO_Init+0x300>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d101      	bne.n	8003f7a <HAL_GPIO_Init+0x1f2>
 8003f76:	2304      	movs	r3, #4
 8003f78:	e008      	b.n	8003f8c <HAL_GPIO_Init+0x204>
 8003f7a:	2307      	movs	r3, #7
 8003f7c:	e006      	b.n	8003f8c <HAL_GPIO_Init+0x204>
 8003f7e:	2303      	movs	r3, #3
 8003f80:	e004      	b.n	8003f8c <HAL_GPIO_Init+0x204>
 8003f82:	2302      	movs	r3, #2
 8003f84:	e002      	b.n	8003f8c <HAL_GPIO_Init+0x204>
 8003f86:	2301      	movs	r3, #1
 8003f88:	e000      	b.n	8003f8c <HAL_GPIO_Init+0x204>
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	69fa      	ldr	r2, [r7, #28]
 8003f8e:	f002 0203 	and.w	r2, r2, #3
 8003f92:	0092      	lsls	r2, r2, #2
 8003f94:	4093      	lsls	r3, r2
 8003f96:	69ba      	ldr	r2, [r7, #24]
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f9c:	4935      	ldr	r1, [pc, #212]	; (8004074 <HAL_GPIO_Init+0x2ec>)
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	089b      	lsrs	r3, r3, #2
 8003fa2:	3302      	adds	r3, #2
 8003fa4:	69ba      	ldr	r2, [r7, #24]
 8003fa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003faa:	4b38      	ldr	r3, [pc, #224]	; (800408c <HAL_GPIO_Init+0x304>)
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	43db      	mvns	r3, r3
 8003fb4:	69ba      	ldr	r2, [r7, #24]
 8003fb6:	4013      	ands	r3, r2
 8003fb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d003      	beq.n	8003fce <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003fc6:	69ba      	ldr	r2, [r7, #24]
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003fce:	4a2f      	ldr	r2, [pc, #188]	; (800408c <HAL_GPIO_Init+0x304>)
 8003fd0:	69bb      	ldr	r3, [r7, #24]
 8003fd2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003fd4:	4b2d      	ldr	r3, [pc, #180]	; (800408c <HAL_GPIO_Init+0x304>)
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	43db      	mvns	r3, r3
 8003fde:	69ba      	ldr	r2, [r7, #24]
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d003      	beq.n	8003ff8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003ff0:	69ba      	ldr	r2, [r7, #24]
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ff8:	4a24      	ldr	r2, [pc, #144]	; (800408c <HAL_GPIO_Init+0x304>)
 8003ffa:	69bb      	ldr	r3, [r7, #24]
 8003ffc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003ffe:	4b23      	ldr	r3, [pc, #140]	; (800408c <HAL_GPIO_Init+0x304>)
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	43db      	mvns	r3, r3
 8004008:	69ba      	ldr	r2, [r7, #24]
 800400a:	4013      	ands	r3, r2
 800400c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d003      	beq.n	8004022 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800401a:	69ba      	ldr	r2, [r7, #24]
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	4313      	orrs	r3, r2
 8004020:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004022:	4a1a      	ldr	r2, [pc, #104]	; (800408c <HAL_GPIO_Init+0x304>)
 8004024:	69bb      	ldr	r3, [r7, #24]
 8004026:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004028:	4b18      	ldr	r3, [pc, #96]	; (800408c <HAL_GPIO_Init+0x304>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	43db      	mvns	r3, r3
 8004032:	69ba      	ldr	r2, [r7, #24]
 8004034:	4013      	ands	r3, r2
 8004036:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004040:	2b00      	cmp	r3, #0
 8004042:	d003      	beq.n	800404c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004044:	69ba      	ldr	r2, [r7, #24]
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	4313      	orrs	r3, r2
 800404a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800404c:	4a0f      	ldr	r2, [pc, #60]	; (800408c <HAL_GPIO_Init+0x304>)
 800404e:	69bb      	ldr	r3, [r7, #24]
 8004050:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	3301      	adds	r3, #1
 8004056:	61fb      	str	r3, [r7, #28]
 8004058:	69fb      	ldr	r3, [r7, #28]
 800405a:	2b0f      	cmp	r3, #15
 800405c:	f67f aea2 	bls.w	8003da4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004060:	bf00      	nop
 8004062:	bf00      	nop
 8004064:	3724      	adds	r7, #36	; 0x24
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr
 800406e:	bf00      	nop
 8004070:	40023800 	.word	0x40023800
 8004074:	40013800 	.word	0x40013800
 8004078:	40020000 	.word	0x40020000
 800407c:	40020400 	.word	0x40020400
 8004080:	40020800 	.word	0x40020800
 8004084:	40020c00 	.word	0x40020c00
 8004088:	40021000 	.word	0x40021000
 800408c:	40013c00 	.word	0x40013c00

08004090 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
 8004098:	460b      	mov	r3, r1
 800409a:	807b      	strh	r3, [r7, #2]
 800409c:	4613      	mov	r3, r2
 800409e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80040a0:	787b      	ldrb	r3, [r7, #1]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d003      	beq.n	80040ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80040a6:	887a      	ldrh	r2, [r7, #2]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80040ac:	e003      	b.n	80040b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80040ae:	887b      	ldrh	r3, [r7, #2]
 80040b0:	041a      	lsls	r2, r3, #16
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	619a      	str	r2, [r3, #24]
}
 80040b6:	bf00      	nop
 80040b8:	370c      	adds	r7, #12
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr

080040c2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80040c2:	b480      	push	{r7}
 80040c4:	b085      	sub	sp, #20
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	6078      	str	r0, [r7, #4]
 80040ca:	460b      	mov	r3, r1
 80040cc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	695b      	ldr	r3, [r3, #20]
 80040d2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80040d4:	887a      	ldrh	r2, [r7, #2]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	4013      	ands	r3, r2
 80040da:	041a      	lsls	r2, r3, #16
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	43d9      	mvns	r1, r3
 80040e0:	887b      	ldrh	r3, [r7, #2]
 80040e2:	400b      	ands	r3, r1
 80040e4:	431a      	orrs	r2, r3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	619a      	str	r2, [r3, #24]
}
 80040ea:	bf00      	nop
 80040ec:	3714      	adds	r7, #20
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr
	...

080040f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b082      	sub	sp, #8
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	4603      	mov	r3, r0
 8004100:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004102:	4b08      	ldr	r3, [pc, #32]	; (8004124 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004104:	695a      	ldr	r2, [r3, #20]
 8004106:	88fb      	ldrh	r3, [r7, #6]
 8004108:	4013      	ands	r3, r2
 800410a:	2b00      	cmp	r3, #0
 800410c:	d006      	beq.n	800411c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800410e:	4a05      	ldr	r2, [pc, #20]	; (8004124 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004110:	88fb      	ldrh	r3, [r7, #6]
 8004112:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004114:	88fb      	ldrh	r3, [r7, #6]
 8004116:	4618      	mov	r0, r3
 8004118:	f7fd fede 	bl	8001ed8 <HAL_GPIO_EXTI_Callback>
  }
}
 800411c:	bf00      	nop
 800411e:	3708      	adds	r7, #8
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}
 8004124:	40013c00 	.word	0x40013c00

08004128 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d101      	bne.n	800413a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e12b      	b.n	8004392 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004140:	b2db      	uxtb	r3, r3
 8004142:	2b00      	cmp	r3, #0
 8004144:	d106      	bne.n	8004154 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2200      	movs	r2, #0
 800414a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f7fd ff1c 	bl	8001f8c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2224      	movs	r2, #36	; 0x24
 8004158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f022 0201 	bic.w	r2, r2, #1
 800416a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800417a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800418a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800418c:	f003 f8d6 	bl	800733c <HAL_RCC_GetPCLK1Freq>
 8004190:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	4a81      	ldr	r2, [pc, #516]	; (800439c <HAL_I2C_Init+0x274>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d807      	bhi.n	80041ac <HAL_I2C_Init+0x84>
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	4a80      	ldr	r2, [pc, #512]	; (80043a0 <HAL_I2C_Init+0x278>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	bf94      	ite	ls
 80041a4:	2301      	movls	r3, #1
 80041a6:	2300      	movhi	r3, #0
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	e006      	b.n	80041ba <HAL_I2C_Init+0x92>
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	4a7d      	ldr	r2, [pc, #500]	; (80043a4 <HAL_I2C_Init+0x27c>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	bf94      	ite	ls
 80041b4:	2301      	movls	r3, #1
 80041b6:	2300      	movhi	r3, #0
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d001      	beq.n	80041c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e0e7      	b.n	8004392 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	4a78      	ldr	r2, [pc, #480]	; (80043a8 <HAL_I2C_Init+0x280>)
 80041c6:	fba2 2303 	umull	r2, r3, r2, r3
 80041ca:	0c9b      	lsrs	r3, r3, #18
 80041cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	68ba      	ldr	r2, [r7, #8]
 80041de:	430a      	orrs	r2, r1
 80041e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	6a1b      	ldr	r3, [r3, #32]
 80041e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	4a6a      	ldr	r2, [pc, #424]	; (800439c <HAL_I2C_Init+0x274>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d802      	bhi.n	80041fc <HAL_I2C_Init+0xd4>
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	3301      	adds	r3, #1
 80041fa:	e009      	b.n	8004210 <HAL_I2C_Init+0xe8>
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004202:	fb02 f303 	mul.w	r3, r2, r3
 8004206:	4a69      	ldr	r2, [pc, #420]	; (80043ac <HAL_I2C_Init+0x284>)
 8004208:	fba2 2303 	umull	r2, r3, r2, r3
 800420c:	099b      	lsrs	r3, r3, #6
 800420e:	3301      	adds	r3, #1
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	6812      	ldr	r2, [r2, #0]
 8004214:	430b      	orrs	r3, r1
 8004216:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	69db      	ldr	r3, [r3, #28]
 800421e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004222:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	495c      	ldr	r1, [pc, #368]	; (800439c <HAL_I2C_Init+0x274>)
 800422c:	428b      	cmp	r3, r1
 800422e:	d819      	bhi.n	8004264 <HAL_I2C_Init+0x13c>
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	1e59      	subs	r1, r3, #1
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	005b      	lsls	r3, r3, #1
 800423a:	fbb1 f3f3 	udiv	r3, r1, r3
 800423e:	1c59      	adds	r1, r3, #1
 8004240:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004244:	400b      	ands	r3, r1
 8004246:	2b00      	cmp	r3, #0
 8004248:	d00a      	beq.n	8004260 <HAL_I2C_Init+0x138>
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	1e59      	subs	r1, r3, #1
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	005b      	lsls	r3, r3, #1
 8004254:	fbb1 f3f3 	udiv	r3, r1, r3
 8004258:	3301      	adds	r3, #1
 800425a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800425e:	e051      	b.n	8004304 <HAL_I2C_Init+0x1dc>
 8004260:	2304      	movs	r3, #4
 8004262:	e04f      	b.n	8004304 <HAL_I2C_Init+0x1dc>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d111      	bne.n	8004290 <HAL_I2C_Init+0x168>
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	1e58      	subs	r0, r3, #1
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6859      	ldr	r1, [r3, #4]
 8004274:	460b      	mov	r3, r1
 8004276:	005b      	lsls	r3, r3, #1
 8004278:	440b      	add	r3, r1
 800427a:	fbb0 f3f3 	udiv	r3, r0, r3
 800427e:	3301      	adds	r3, #1
 8004280:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004284:	2b00      	cmp	r3, #0
 8004286:	bf0c      	ite	eq
 8004288:	2301      	moveq	r3, #1
 800428a:	2300      	movne	r3, #0
 800428c:	b2db      	uxtb	r3, r3
 800428e:	e012      	b.n	80042b6 <HAL_I2C_Init+0x18e>
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	1e58      	subs	r0, r3, #1
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6859      	ldr	r1, [r3, #4]
 8004298:	460b      	mov	r3, r1
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	440b      	add	r3, r1
 800429e:	0099      	lsls	r1, r3, #2
 80042a0:	440b      	add	r3, r1
 80042a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80042a6:	3301      	adds	r3, #1
 80042a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	bf0c      	ite	eq
 80042b0:	2301      	moveq	r3, #1
 80042b2:	2300      	movne	r3, #0
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d001      	beq.n	80042be <HAL_I2C_Init+0x196>
 80042ba:	2301      	movs	r3, #1
 80042bc:	e022      	b.n	8004304 <HAL_I2C_Init+0x1dc>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d10e      	bne.n	80042e4 <HAL_I2C_Init+0x1bc>
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	1e58      	subs	r0, r3, #1
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6859      	ldr	r1, [r3, #4]
 80042ce:	460b      	mov	r3, r1
 80042d0:	005b      	lsls	r3, r3, #1
 80042d2:	440b      	add	r3, r1
 80042d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80042d8:	3301      	adds	r3, #1
 80042da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042e2:	e00f      	b.n	8004304 <HAL_I2C_Init+0x1dc>
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	1e58      	subs	r0, r3, #1
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6859      	ldr	r1, [r3, #4]
 80042ec:	460b      	mov	r3, r1
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	440b      	add	r3, r1
 80042f2:	0099      	lsls	r1, r3, #2
 80042f4:	440b      	add	r3, r1
 80042f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80042fa:	3301      	adds	r3, #1
 80042fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004300:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004304:	6879      	ldr	r1, [r7, #4]
 8004306:	6809      	ldr	r1, [r1, #0]
 8004308:	4313      	orrs	r3, r2
 800430a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	69da      	ldr	r2, [r3, #28]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6a1b      	ldr	r3, [r3, #32]
 800431e:	431a      	orrs	r2, r3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	430a      	orrs	r2, r1
 8004326:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004332:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	6911      	ldr	r1, [r2, #16]
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	68d2      	ldr	r2, [r2, #12]
 800433e:	4311      	orrs	r1, r2
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	6812      	ldr	r2, [r2, #0]
 8004344:	430b      	orrs	r3, r1
 8004346:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	68db      	ldr	r3, [r3, #12]
 800434e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	695a      	ldr	r2, [r3, #20]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	699b      	ldr	r3, [r3, #24]
 800435a:	431a      	orrs	r2, r3
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	430a      	orrs	r2, r1
 8004362:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f042 0201 	orr.w	r2, r2, #1
 8004372:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2200      	movs	r2, #0
 8004378:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2220      	movs	r2, #32
 800437e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2200      	movs	r2, #0
 800438c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004390:	2300      	movs	r3, #0
}
 8004392:	4618      	mov	r0, r3
 8004394:	3710      	adds	r7, #16
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
 800439a:	bf00      	nop
 800439c:	000186a0 	.word	0x000186a0
 80043a0:	001e847f 	.word	0x001e847f
 80043a4:	003d08ff 	.word	0x003d08ff
 80043a8:	431bde83 	.word	0x431bde83
 80043ac:	10624dd3 	.word	0x10624dd3

080043b0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b088      	sub	sp, #32
 80043b4:	af02      	add	r7, sp, #8
 80043b6:	60f8      	str	r0, [r7, #12]
 80043b8:	4608      	mov	r0, r1
 80043ba:	4611      	mov	r1, r2
 80043bc:	461a      	mov	r2, r3
 80043be:	4603      	mov	r3, r0
 80043c0:	817b      	strh	r3, [r7, #10]
 80043c2:	460b      	mov	r3, r1
 80043c4:	813b      	strh	r3, [r7, #8]
 80043c6:	4613      	mov	r3, r2
 80043c8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80043ca:	f7fe ff8b 	bl	80032e4 <HAL_GetTick>
 80043ce:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	2b20      	cmp	r3, #32
 80043da:	f040 80d9 	bne.w	8004590 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	9300      	str	r3, [sp, #0]
 80043e2:	2319      	movs	r3, #25
 80043e4:	2201      	movs	r2, #1
 80043e6:	496d      	ldr	r1, [pc, #436]	; (800459c <HAL_I2C_Mem_Write+0x1ec>)
 80043e8:	68f8      	ldr	r0, [r7, #12]
 80043ea:	f002 f90d 	bl	8006608 <I2C_WaitOnFlagUntilTimeout>
 80043ee:	4603      	mov	r3, r0
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d001      	beq.n	80043f8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80043f4:	2302      	movs	r3, #2
 80043f6:	e0cc      	b.n	8004592 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d101      	bne.n	8004406 <HAL_I2C_Mem_Write+0x56>
 8004402:	2302      	movs	r3, #2
 8004404:	e0c5      	b.n	8004592 <HAL_I2C_Mem_Write+0x1e2>
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2201      	movs	r2, #1
 800440a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f003 0301 	and.w	r3, r3, #1
 8004418:	2b01      	cmp	r3, #1
 800441a:	d007      	beq.n	800442c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f042 0201 	orr.w	r2, r2, #1
 800442a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800443a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2221      	movs	r2, #33	; 0x21
 8004440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2240      	movs	r2, #64	; 0x40
 8004448:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2200      	movs	r2, #0
 8004450:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	6a3a      	ldr	r2, [r7, #32]
 8004456:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800445c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004462:	b29a      	uxth	r2, r3
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	4a4d      	ldr	r2, [pc, #308]	; (80045a0 <HAL_I2C_Mem_Write+0x1f0>)
 800446c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800446e:	88f8      	ldrh	r0, [r7, #6]
 8004470:	893a      	ldrh	r2, [r7, #8]
 8004472:	8979      	ldrh	r1, [r7, #10]
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	9301      	str	r3, [sp, #4]
 8004478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800447a:	9300      	str	r3, [sp, #0]
 800447c:	4603      	mov	r3, r0
 800447e:	68f8      	ldr	r0, [r7, #12]
 8004480:	f001 fe9c 	bl	80061bc <I2C_RequestMemoryWrite>
 8004484:	4603      	mov	r3, r0
 8004486:	2b00      	cmp	r3, #0
 8004488:	d052      	beq.n	8004530 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e081      	b.n	8004592 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800448e:	697a      	ldr	r2, [r7, #20]
 8004490:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004492:	68f8      	ldr	r0, [r7, #12]
 8004494:	f002 f98e 	bl	80067b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004498:	4603      	mov	r3, r0
 800449a:	2b00      	cmp	r3, #0
 800449c:	d00d      	beq.n	80044ba <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a2:	2b04      	cmp	r3, #4
 80044a4:	d107      	bne.n	80044b6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044b4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e06b      	b.n	8004592 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044be:	781a      	ldrb	r2, [r3, #0]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ca:	1c5a      	adds	r2, r3, #1
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044d4:	3b01      	subs	r3, #1
 80044d6:	b29a      	uxth	r2, r3
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044e0:	b29b      	uxth	r3, r3
 80044e2:	3b01      	subs	r3, #1
 80044e4:	b29a      	uxth	r2, r3
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	695b      	ldr	r3, [r3, #20]
 80044f0:	f003 0304 	and.w	r3, r3, #4
 80044f4:	2b04      	cmp	r3, #4
 80044f6:	d11b      	bne.n	8004530 <HAL_I2C_Mem_Write+0x180>
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d017      	beq.n	8004530 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004504:	781a      	ldrb	r2, [r3, #0]
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004510:	1c5a      	adds	r2, r3, #1
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800451a:	3b01      	subs	r3, #1
 800451c:	b29a      	uxth	r2, r3
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004526:	b29b      	uxth	r3, r3
 8004528:	3b01      	subs	r3, #1
 800452a:	b29a      	uxth	r2, r3
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004534:	2b00      	cmp	r3, #0
 8004536:	d1aa      	bne.n	800448e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004538:	697a      	ldr	r2, [r7, #20]
 800453a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800453c:	68f8      	ldr	r0, [r7, #12]
 800453e:	f002 f97a 	bl	8006836 <I2C_WaitOnBTFFlagUntilTimeout>
 8004542:	4603      	mov	r3, r0
 8004544:	2b00      	cmp	r3, #0
 8004546:	d00d      	beq.n	8004564 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454c:	2b04      	cmp	r3, #4
 800454e:	d107      	bne.n	8004560 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800455e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	e016      	b.n	8004592 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004572:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2220      	movs	r2, #32
 8004578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2200      	movs	r2, #0
 8004580:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2200      	movs	r2, #0
 8004588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800458c:	2300      	movs	r3, #0
 800458e:	e000      	b.n	8004592 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004590:	2302      	movs	r3, #2
  }
}
 8004592:	4618      	mov	r0, r3
 8004594:	3718      	adds	r7, #24
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	00100002 	.word	0x00100002
 80045a0:	ffff0000 	.word	0xffff0000

080045a4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b08c      	sub	sp, #48	; 0x30
 80045a8:	af02      	add	r7, sp, #8
 80045aa:	60f8      	str	r0, [r7, #12]
 80045ac:	4608      	mov	r0, r1
 80045ae:	4611      	mov	r1, r2
 80045b0:	461a      	mov	r2, r3
 80045b2:	4603      	mov	r3, r0
 80045b4:	817b      	strh	r3, [r7, #10]
 80045b6:	460b      	mov	r3, r1
 80045b8:	813b      	strh	r3, [r7, #8]
 80045ba:	4613      	mov	r3, r2
 80045bc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80045be:	f7fe fe91 	bl	80032e4 <HAL_GetTick>
 80045c2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	2b20      	cmp	r3, #32
 80045ce:	f040 8208 	bne.w	80049e2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80045d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d4:	9300      	str	r3, [sp, #0]
 80045d6:	2319      	movs	r3, #25
 80045d8:	2201      	movs	r2, #1
 80045da:	497b      	ldr	r1, [pc, #492]	; (80047c8 <HAL_I2C_Mem_Read+0x224>)
 80045dc:	68f8      	ldr	r0, [r7, #12]
 80045de:	f002 f813 	bl	8006608 <I2C_WaitOnFlagUntilTimeout>
 80045e2:	4603      	mov	r3, r0
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d001      	beq.n	80045ec <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80045e8:	2302      	movs	r3, #2
 80045ea:	e1fb      	b.n	80049e4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d101      	bne.n	80045fa <HAL_I2C_Mem_Read+0x56>
 80045f6:	2302      	movs	r3, #2
 80045f8:	e1f4      	b.n	80049e4 <HAL_I2C_Mem_Read+0x440>
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2201      	movs	r2, #1
 80045fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 0301 	and.w	r3, r3, #1
 800460c:	2b01      	cmp	r3, #1
 800460e:	d007      	beq.n	8004620 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f042 0201 	orr.w	r2, r2, #1
 800461e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800462e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2222      	movs	r2, #34	; 0x22
 8004634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2240      	movs	r2, #64	; 0x40
 800463c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2200      	movs	r2, #0
 8004644:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800464a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004650:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004656:	b29a      	uxth	r2, r3
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	4a5b      	ldr	r2, [pc, #364]	; (80047cc <HAL_I2C_Mem_Read+0x228>)
 8004660:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004662:	88f8      	ldrh	r0, [r7, #6]
 8004664:	893a      	ldrh	r2, [r7, #8]
 8004666:	8979      	ldrh	r1, [r7, #10]
 8004668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466a:	9301      	str	r3, [sp, #4]
 800466c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800466e:	9300      	str	r3, [sp, #0]
 8004670:	4603      	mov	r3, r0
 8004672:	68f8      	ldr	r0, [r7, #12]
 8004674:	f001 fe38 	bl	80062e8 <I2C_RequestMemoryRead>
 8004678:	4603      	mov	r3, r0
 800467a:	2b00      	cmp	r3, #0
 800467c:	d001      	beq.n	8004682 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e1b0      	b.n	80049e4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004686:	2b00      	cmp	r3, #0
 8004688:	d113      	bne.n	80046b2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800468a:	2300      	movs	r3, #0
 800468c:	623b      	str	r3, [r7, #32]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	695b      	ldr	r3, [r3, #20]
 8004694:	623b      	str	r3, [r7, #32]
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	699b      	ldr	r3, [r3, #24]
 800469c:	623b      	str	r3, [r7, #32]
 800469e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046ae:	601a      	str	r2, [r3, #0]
 80046b0:	e184      	b.n	80049bc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d11b      	bne.n	80046f2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046ca:	2300      	movs	r3, #0
 80046cc:	61fb      	str	r3, [r7, #28]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	695b      	ldr	r3, [r3, #20]
 80046d4:	61fb      	str	r3, [r7, #28]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	699b      	ldr	r3, [r3, #24]
 80046dc:	61fb      	str	r3, [r7, #28]
 80046de:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046ee:	601a      	str	r2, [r3, #0]
 80046f0:	e164      	b.n	80049bc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046f6:	2b02      	cmp	r3, #2
 80046f8:	d11b      	bne.n	8004732 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004708:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004718:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800471a:	2300      	movs	r3, #0
 800471c:	61bb      	str	r3, [r7, #24]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	695b      	ldr	r3, [r3, #20]
 8004724:	61bb      	str	r3, [r7, #24]
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	699b      	ldr	r3, [r3, #24]
 800472c:	61bb      	str	r3, [r7, #24]
 800472e:	69bb      	ldr	r3, [r7, #24]
 8004730:	e144      	b.n	80049bc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004732:	2300      	movs	r3, #0
 8004734:	617b      	str	r3, [r7, #20]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	695b      	ldr	r3, [r3, #20]
 800473c:	617b      	str	r3, [r7, #20]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	699b      	ldr	r3, [r3, #24]
 8004744:	617b      	str	r3, [r7, #20]
 8004746:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004748:	e138      	b.n	80049bc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800474e:	2b03      	cmp	r3, #3
 8004750:	f200 80f1 	bhi.w	8004936 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004758:	2b01      	cmp	r3, #1
 800475a:	d123      	bne.n	80047a4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800475c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800475e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004760:	68f8      	ldr	r0, [r7, #12]
 8004762:	f002 f8db 	bl	800691c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004766:	4603      	mov	r3, r0
 8004768:	2b00      	cmp	r3, #0
 800476a:	d001      	beq.n	8004770 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	e139      	b.n	80049e4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	691a      	ldr	r2, [r3, #16]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477a:	b2d2      	uxtb	r2, r2
 800477c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004782:	1c5a      	adds	r2, r3, #1
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800478c:	3b01      	subs	r3, #1
 800478e:	b29a      	uxth	r2, r3
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004798:	b29b      	uxth	r3, r3
 800479a:	3b01      	subs	r3, #1
 800479c:	b29a      	uxth	r2, r3
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80047a2:	e10b      	b.n	80049bc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047a8:	2b02      	cmp	r3, #2
 80047aa:	d14e      	bne.n	800484a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80047ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ae:	9300      	str	r3, [sp, #0]
 80047b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047b2:	2200      	movs	r2, #0
 80047b4:	4906      	ldr	r1, [pc, #24]	; (80047d0 <HAL_I2C_Mem_Read+0x22c>)
 80047b6:	68f8      	ldr	r0, [r7, #12]
 80047b8:	f001 ff26 	bl	8006608 <I2C_WaitOnFlagUntilTimeout>
 80047bc:	4603      	mov	r3, r0
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d008      	beq.n	80047d4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	e10e      	b.n	80049e4 <HAL_I2C_Mem_Read+0x440>
 80047c6:	bf00      	nop
 80047c8:	00100002 	.word	0x00100002
 80047cc:	ffff0000 	.word	0xffff0000
 80047d0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	691a      	ldr	r2, [r3, #16]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ee:	b2d2      	uxtb	r2, r2
 80047f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f6:	1c5a      	adds	r2, r3, #1
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004800:	3b01      	subs	r3, #1
 8004802:	b29a      	uxth	r2, r3
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800480c:	b29b      	uxth	r3, r3
 800480e:	3b01      	subs	r3, #1
 8004810:	b29a      	uxth	r2, r3
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	691a      	ldr	r2, [r3, #16]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004820:	b2d2      	uxtb	r2, r2
 8004822:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004828:	1c5a      	adds	r2, r3, #1
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004832:	3b01      	subs	r3, #1
 8004834:	b29a      	uxth	r2, r3
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800483e:	b29b      	uxth	r3, r3
 8004840:	3b01      	subs	r3, #1
 8004842:	b29a      	uxth	r2, r3
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004848:	e0b8      	b.n	80049bc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800484a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484c:	9300      	str	r3, [sp, #0]
 800484e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004850:	2200      	movs	r2, #0
 8004852:	4966      	ldr	r1, [pc, #408]	; (80049ec <HAL_I2C_Mem_Read+0x448>)
 8004854:	68f8      	ldr	r0, [r7, #12]
 8004856:	f001 fed7 	bl	8006608 <I2C_WaitOnFlagUntilTimeout>
 800485a:	4603      	mov	r3, r0
 800485c:	2b00      	cmp	r3, #0
 800485e:	d001      	beq.n	8004864 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	e0bf      	b.n	80049e4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004872:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	691a      	ldr	r2, [r3, #16]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487e:	b2d2      	uxtb	r2, r2
 8004880:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004886:	1c5a      	adds	r2, r3, #1
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004890:	3b01      	subs	r3, #1
 8004892:	b29a      	uxth	r2, r3
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800489c:	b29b      	uxth	r3, r3
 800489e:	3b01      	subs	r3, #1
 80048a0:	b29a      	uxth	r2, r3
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80048a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a8:	9300      	str	r3, [sp, #0]
 80048aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048ac:	2200      	movs	r2, #0
 80048ae:	494f      	ldr	r1, [pc, #316]	; (80049ec <HAL_I2C_Mem_Read+0x448>)
 80048b0:	68f8      	ldr	r0, [r7, #12]
 80048b2:	f001 fea9 	bl	8006608 <I2C_WaitOnFlagUntilTimeout>
 80048b6:	4603      	mov	r3, r0
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d001      	beq.n	80048c0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	e091      	b.n	80049e4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	691a      	ldr	r2, [r3, #16]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048da:	b2d2      	uxtb	r2, r2
 80048dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e2:	1c5a      	adds	r2, r3, #1
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048ec:	3b01      	subs	r3, #1
 80048ee:	b29a      	uxth	r2, r3
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	3b01      	subs	r3, #1
 80048fc:	b29a      	uxth	r2, r3
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	691a      	ldr	r2, [r3, #16]
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490c:	b2d2      	uxtb	r2, r2
 800490e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004914:	1c5a      	adds	r2, r3, #1
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800491e:	3b01      	subs	r3, #1
 8004920:	b29a      	uxth	r2, r3
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800492a:	b29b      	uxth	r3, r3
 800492c:	3b01      	subs	r3, #1
 800492e:	b29a      	uxth	r2, r3
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004934:	e042      	b.n	80049bc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004936:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004938:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800493a:	68f8      	ldr	r0, [r7, #12]
 800493c:	f001 ffee 	bl	800691c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004940:	4603      	mov	r3, r0
 8004942:	2b00      	cmp	r3, #0
 8004944:	d001      	beq.n	800494a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	e04c      	b.n	80049e4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	691a      	ldr	r2, [r3, #16]
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004954:	b2d2      	uxtb	r2, r2
 8004956:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495c:	1c5a      	adds	r2, r3, #1
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004966:	3b01      	subs	r3, #1
 8004968:	b29a      	uxth	r2, r3
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004972:	b29b      	uxth	r3, r3
 8004974:	3b01      	subs	r3, #1
 8004976:	b29a      	uxth	r2, r3
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	695b      	ldr	r3, [r3, #20]
 8004982:	f003 0304 	and.w	r3, r3, #4
 8004986:	2b04      	cmp	r3, #4
 8004988:	d118      	bne.n	80049bc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	691a      	ldr	r2, [r3, #16]
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004994:	b2d2      	uxtb	r2, r2
 8004996:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499c:	1c5a      	adds	r2, r3, #1
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049a6:	3b01      	subs	r3, #1
 80049a8:	b29a      	uxth	r2, r3
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049b2:	b29b      	uxth	r3, r3
 80049b4:	3b01      	subs	r3, #1
 80049b6:	b29a      	uxth	r2, r3
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	f47f aec2 	bne.w	800474a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2220      	movs	r2, #32
 80049ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2200      	movs	r2, #0
 80049d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2200      	movs	r2, #0
 80049da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80049de:	2300      	movs	r3, #0
 80049e0:	e000      	b.n	80049e4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80049e2:	2302      	movs	r3, #2
  }
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3728      	adds	r7, #40	; 0x28
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}
 80049ec:	00010004 	.word	0x00010004

080049f0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b088      	sub	sp, #32
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80049f8:	2300      	movs	r3, #0
 80049fa:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a08:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a10:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a18:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004a1a:	7bfb      	ldrb	r3, [r7, #15]
 8004a1c:	2b10      	cmp	r3, #16
 8004a1e:	d003      	beq.n	8004a28 <HAL_I2C_EV_IRQHandler+0x38>
 8004a20:	7bfb      	ldrb	r3, [r7, #15]
 8004a22:	2b40      	cmp	r3, #64	; 0x40
 8004a24:	f040 80c1 	bne.w	8004baa <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	699b      	ldr	r3, [r3, #24]
 8004a2e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	695b      	ldr	r3, [r3, #20]
 8004a36:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004a38:	69fb      	ldr	r3, [r7, #28]
 8004a3a:	f003 0301 	and.w	r3, r3, #1
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d10d      	bne.n	8004a5e <HAL_I2C_EV_IRQHandler+0x6e>
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004a48:	d003      	beq.n	8004a52 <HAL_I2C_EV_IRQHandler+0x62>
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004a50:	d101      	bne.n	8004a56 <HAL_I2C_EV_IRQHandler+0x66>
 8004a52:	2301      	movs	r3, #1
 8004a54:	e000      	b.n	8004a58 <HAL_I2C_EV_IRQHandler+0x68>
 8004a56:	2300      	movs	r3, #0
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	f000 8132 	beq.w	8004cc2 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a5e:	69fb      	ldr	r3, [r7, #28]
 8004a60:	f003 0301 	and.w	r3, r3, #1
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d00c      	beq.n	8004a82 <HAL_I2C_EV_IRQHandler+0x92>
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	0a5b      	lsrs	r3, r3, #9
 8004a6c:	f003 0301 	and.w	r3, r3, #1
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d006      	beq.n	8004a82 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f001 ffd6 	bl	8006a26 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f000 fd83 	bl	8005586 <I2C_Master_SB>
 8004a80:	e092      	b.n	8004ba8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a82:	69fb      	ldr	r3, [r7, #28]
 8004a84:	08db      	lsrs	r3, r3, #3
 8004a86:	f003 0301 	and.w	r3, r3, #1
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d009      	beq.n	8004aa2 <HAL_I2C_EV_IRQHandler+0xb2>
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	0a5b      	lsrs	r3, r3, #9
 8004a92:	f003 0301 	and.w	r3, r3, #1
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d003      	beq.n	8004aa2 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f000 fdf9 	bl	8005692 <I2C_Master_ADD10>
 8004aa0:	e082      	b.n	8004ba8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004aa2:	69fb      	ldr	r3, [r7, #28]
 8004aa4:	085b      	lsrs	r3, r3, #1
 8004aa6:	f003 0301 	and.w	r3, r3, #1
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d009      	beq.n	8004ac2 <HAL_I2C_EV_IRQHandler+0xd2>
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	0a5b      	lsrs	r3, r3, #9
 8004ab2:	f003 0301 	and.w	r3, r3, #1
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d003      	beq.n	8004ac2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f000 fe13 	bl	80056e6 <I2C_Master_ADDR>
 8004ac0:	e072      	b.n	8004ba8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004ac2:	69bb      	ldr	r3, [r7, #24]
 8004ac4:	089b      	lsrs	r3, r3, #2
 8004ac6:	f003 0301 	and.w	r3, r3, #1
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d03b      	beq.n	8004b46 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ad8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004adc:	f000 80f3 	beq.w	8004cc6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004ae0:	69fb      	ldr	r3, [r7, #28]
 8004ae2:	09db      	lsrs	r3, r3, #7
 8004ae4:	f003 0301 	and.w	r3, r3, #1
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d00f      	beq.n	8004b0c <HAL_I2C_EV_IRQHandler+0x11c>
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	0a9b      	lsrs	r3, r3, #10
 8004af0:	f003 0301 	and.w	r3, r3, #1
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d009      	beq.n	8004b0c <HAL_I2C_EV_IRQHandler+0x11c>
 8004af8:	69fb      	ldr	r3, [r7, #28]
 8004afa:	089b      	lsrs	r3, r3, #2
 8004afc:	f003 0301 	and.w	r3, r3, #1
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d103      	bne.n	8004b0c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f000 f9f3 	bl	8004ef0 <I2C_MasterTransmit_TXE>
 8004b0a:	e04d      	b.n	8004ba8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004b0c:	69fb      	ldr	r3, [r7, #28]
 8004b0e:	089b      	lsrs	r3, r3, #2
 8004b10:	f003 0301 	and.w	r3, r3, #1
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	f000 80d6 	beq.w	8004cc6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	0a5b      	lsrs	r3, r3, #9
 8004b1e:	f003 0301 	and.w	r3, r3, #1
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	f000 80cf 	beq.w	8004cc6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004b28:	7bbb      	ldrb	r3, [r7, #14]
 8004b2a:	2b21      	cmp	r3, #33	; 0x21
 8004b2c:	d103      	bne.n	8004b36 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f000 fa7a 	bl	8005028 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004b34:	e0c7      	b.n	8004cc6 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8004b36:	7bfb      	ldrb	r3, [r7, #15]
 8004b38:	2b40      	cmp	r3, #64	; 0x40
 8004b3a:	f040 80c4 	bne.w	8004cc6 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f000 fae8 	bl	8005114 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004b44:	e0bf      	b.n	8004cc6 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b54:	f000 80b7 	beq.w	8004cc6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004b58:	69fb      	ldr	r3, [r7, #28]
 8004b5a:	099b      	lsrs	r3, r3, #6
 8004b5c:	f003 0301 	and.w	r3, r3, #1
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d00f      	beq.n	8004b84 <HAL_I2C_EV_IRQHandler+0x194>
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	0a9b      	lsrs	r3, r3, #10
 8004b68:	f003 0301 	and.w	r3, r3, #1
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d009      	beq.n	8004b84 <HAL_I2C_EV_IRQHandler+0x194>
 8004b70:	69fb      	ldr	r3, [r7, #28]
 8004b72:	089b      	lsrs	r3, r3, #2
 8004b74:	f003 0301 	and.w	r3, r3, #1
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d103      	bne.n	8004b84 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f000 fb5d 	bl	800523c <I2C_MasterReceive_RXNE>
 8004b82:	e011      	b.n	8004ba8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004b84:	69fb      	ldr	r3, [r7, #28]
 8004b86:	089b      	lsrs	r3, r3, #2
 8004b88:	f003 0301 	and.w	r3, r3, #1
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	f000 809a 	beq.w	8004cc6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	0a5b      	lsrs	r3, r3, #9
 8004b96:	f003 0301 	and.w	r3, r3, #1
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	f000 8093 	beq.w	8004cc6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f000 fc06 	bl	80053b2 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004ba6:	e08e      	b.n	8004cc6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004ba8:	e08d      	b.n	8004cc6 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d004      	beq.n	8004bbc <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	695b      	ldr	r3, [r3, #20]
 8004bb8:	61fb      	str	r3, [r7, #28]
 8004bba:	e007      	b.n	8004bcc <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	699b      	ldr	r3, [r3, #24]
 8004bc2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	695b      	ldr	r3, [r3, #20]
 8004bca:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004bcc:	69fb      	ldr	r3, [r7, #28]
 8004bce:	085b      	lsrs	r3, r3, #1
 8004bd0:	f003 0301 	and.w	r3, r3, #1
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d012      	beq.n	8004bfe <HAL_I2C_EV_IRQHandler+0x20e>
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	0a5b      	lsrs	r3, r3, #9
 8004bdc:	f003 0301 	and.w	r3, r3, #1
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d00c      	beq.n	8004bfe <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d003      	beq.n	8004bf4 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	699b      	ldr	r3, [r3, #24]
 8004bf2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004bf4:	69b9      	ldr	r1, [r7, #24]
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f000 ffc4 	bl	8005b84 <I2C_Slave_ADDR>
 8004bfc:	e066      	b.n	8004ccc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004bfe:	69fb      	ldr	r3, [r7, #28]
 8004c00:	091b      	lsrs	r3, r3, #4
 8004c02:	f003 0301 	and.w	r3, r3, #1
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d009      	beq.n	8004c1e <HAL_I2C_EV_IRQHandler+0x22e>
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	0a5b      	lsrs	r3, r3, #9
 8004c0e:	f003 0301 	and.w	r3, r3, #1
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d003      	beq.n	8004c1e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f000 fffe 	bl	8005c18 <I2C_Slave_STOPF>
 8004c1c:	e056      	b.n	8004ccc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004c1e:	7bbb      	ldrb	r3, [r7, #14]
 8004c20:	2b21      	cmp	r3, #33	; 0x21
 8004c22:	d002      	beq.n	8004c2a <HAL_I2C_EV_IRQHandler+0x23a>
 8004c24:	7bbb      	ldrb	r3, [r7, #14]
 8004c26:	2b29      	cmp	r3, #41	; 0x29
 8004c28:	d125      	bne.n	8004c76 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004c2a:	69fb      	ldr	r3, [r7, #28]
 8004c2c:	09db      	lsrs	r3, r3, #7
 8004c2e:	f003 0301 	and.w	r3, r3, #1
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d00f      	beq.n	8004c56 <HAL_I2C_EV_IRQHandler+0x266>
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	0a9b      	lsrs	r3, r3, #10
 8004c3a:	f003 0301 	and.w	r3, r3, #1
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d009      	beq.n	8004c56 <HAL_I2C_EV_IRQHandler+0x266>
 8004c42:	69fb      	ldr	r3, [r7, #28]
 8004c44:	089b      	lsrs	r3, r3, #2
 8004c46:	f003 0301 	and.w	r3, r3, #1
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d103      	bne.n	8004c56 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f000 feda 	bl	8005a08 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004c54:	e039      	b.n	8004cca <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004c56:	69fb      	ldr	r3, [r7, #28]
 8004c58:	089b      	lsrs	r3, r3, #2
 8004c5a:	f003 0301 	and.w	r3, r3, #1
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d033      	beq.n	8004cca <HAL_I2C_EV_IRQHandler+0x2da>
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	0a5b      	lsrs	r3, r3, #9
 8004c66:	f003 0301 	and.w	r3, r3, #1
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d02d      	beq.n	8004cca <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f000 ff07 	bl	8005a82 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004c74:	e029      	b.n	8004cca <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004c76:	69fb      	ldr	r3, [r7, #28]
 8004c78:	099b      	lsrs	r3, r3, #6
 8004c7a:	f003 0301 	and.w	r3, r3, #1
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d00f      	beq.n	8004ca2 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	0a9b      	lsrs	r3, r3, #10
 8004c86:	f003 0301 	and.w	r3, r3, #1
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d009      	beq.n	8004ca2 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004c8e:	69fb      	ldr	r3, [r7, #28]
 8004c90:	089b      	lsrs	r3, r3, #2
 8004c92:	f003 0301 	and.w	r3, r3, #1
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d103      	bne.n	8004ca2 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f000 ff12 	bl	8005ac4 <I2C_SlaveReceive_RXNE>
 8004ca0:	e014      	b.n	8004ccc <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004ca2:	69fb      	ldr	r3, [r7, #28]
 8004ca4:	089b      	lsrs	r3, r3, #2
 8004ca6:	f003 0301 	and.w	r3, r3, #1
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d00e      	beq.n	8004ccc <HAL_I2C_EV_IRQHandler+0x2dc>
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	0a5b      	lsrs	r3, r3, #9
 8004cb2:	f003 0301 	and.w	r3, r3, #1
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d008      	beq.n	8004ccc <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f000 ff40 	bl	8005b40 <I2C_SlaveReceive_BTF>
 8004cc0:	e004      	b.n	8004ccc <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8004cc2:	bf00      	nop
 8004cc4:	e002      	b.n	8004ccc <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004cc6:	bf00      	nop
 8004cc8:	e000      	b.n	8004ccc <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004cca:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004ccc:	3720      	adds	r7, #32
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}

08004cd2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004cd2:	b580      	push	{r7, lr}
 8004cd4:	b08a      	sub	sp, #40	; 0x28
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	695b      	ldr	r3, [r3, #20]
 8004ce0:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8004cea:	2300      	movs	r3, #0
 8004cec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004cf4:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004cf6:	6a3b      	ldr	r3, [r7, #32]
 8004cf8:	0a1b      	lsrs	r3, r3, #8
 8004cfa:	f003 0301 	and.w	r3, r3, #1
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d00e      	beq.n	8004d20 <HAL_I2C_ER_IRQHandler+0x4e>
 8004d02:	69fb      	ldr	r3, [r7, #28]
 8004d04:	0a1b      	lsrs	r3, r3, #8
 8004d06:	f003 0301 	and.w	r3, r3, #1
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d008      	beq.n	8004d20 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8004d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d10:	f043 0301 	orr.w	r3, r3, #1
 8004d14:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004d1e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004d20:	6a3b      	ldr	r3, [r7, #32]
 8004d22:	0a5b      	lsrs	r3, r3, #9
 8004d24:	f003 0301 	and.w	r3, r3, #1
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d00e      	beq.n	8004d4a <HAL_I2C_ER_IRQHandler+0x78>
 8004d2c:	69fb      	ldr	r3, [r7, #28]
 8004d2e:	0a1b      	lsrs	r3, r3, #8
 8004d30:	f003 0301 	and.w	r3, r3, #1
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d008      	beq.n	8004d4a <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3a:	f043 0302 	orr.w	r3, r3, #2
 8004d3e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8004d48:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004d4a:	6a3b      	ldr	r3, [r7, #32]
 8004d4c:	0a9b      	lsrs	r3, r3, #10
 8004d4e:	f003 0301 	and.w	r3, r3, #1
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d03f      	beq.n	8004dd6 <HAL_I2C_ER_IRQHandler+0x104>
 8004d56:	69fb      	ldr	r3, [r7, #28]
 8004d58:	0a1b      	lsrs	r3, r3, #8
 8004d5a:	f003 0301 	and.w	r3, r3, #1
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d039      	beq.n	8004dd6 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8004d62:	7efb      	ldrb	r3, [r7, #27]
 8004d64:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d74:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d7a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004d7c:	7ebb      	ldrb	r3, [r7, #26]
 8004d7e:	2b20      	cmp	r3, #32
 8004d80:	d112      	bne.n	8004da8 <HAL_I2C_ER_IRQHandler+0xd6>
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d10f      	bne.n	8004da8 <HAL_I2C_ER_IRQHandler+0xd6>
 8004d88:	7cfb      	ldrb	r3, [r7, #19]
 8004d8a:	2b21      	cmp	r3, #33	; 0x21
 8004d8c:	d008      	beq.n	8004da0 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004d8e:	7cfb      	ldrb	r3, [r7, #19]
 8004d90:	2b29      	cmp	r3, #41	; 0x29
 8004d92:	d005      	beq.n	8004da0 <HAL_I2C_ER_IRQHandler+0xce>
 8004d94:	7cfb      	ldrb	r3, [r7, #19]
 8004d96:	2b28      	cmp	r3, #40	; 0x28
 8004d98:	d106      	bne.n	8004da8 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2b21      	cmp	r3, #33	; 0x21
 8004d9e:	d103      	bne.n	8004da8 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	f001 f869 	bl	8005e78 <I2C_Slave_AF>
 8004da6:	e016      	b.n	8004dd6 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004db0:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8004db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db4:	f043 0304 	orr.w	r3, r3, #4
 8004db8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004dba:	7efb      	ldrb	r3, [r7, #27]
 8004dbc:	2b10      	cmp	r3, #16
 8004dbe:	d002      	beq.n	8004dc6 <HAL_I2C_ER_IRQHandler+0xf4>
 8004dc0:	7efb      	ldrb	r3, [r7, #27]
 8004dc2:	2b40      	cmp	r3, #64	; 0x40
 8004dc4:	d107      	bne.n	8004dd6 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dd4:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004dd6:	6a3b      	ldr	r3, [r7, #32]
 8004dd8:	0adb      	lsrs	r3, r3, #11
 8004dda:	f003 0301 	and.w	r3, r3, #1
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d00e      	beq.n	8004e00 <HAL_I2C_ER_IRQHandler+0x12e>
 8004de2:	69fb      	ldr	r3, [r7, #28]
 8004de4:	0a1b      	lsrs	r3, r3, #8
 8004de6:	f003 0301 	and.w	r3, r3, #1
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d008      	beq.n	8004e00 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8004dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df0:	f043 0308 	orr.w	r3, r3, #8
 8004df4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8004dfe:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d008      	beq.n	8004e18 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0c:	431a      	orrs	r2, r3
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f001 f8a0 	bl	8005f58 <I2C_ITError>
  }
}
 8004e18:	bf00      	nop
 8004e1a:	3728      	adds	r7, #40	; 0x28
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}

08004e20 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b083      	sub	sp, #12
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004e28:	bf00      	nop
 8004e2a:	370c      	adds	r7, #12
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr

08004e34 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b083      	sub	sp, #12
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004e3c:	bf00      	nop
 8004e3e:	370c      	adds	r7, #12
 8004e40:	46bd      	mov	sp, r7
 8004e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e46:	4770      	bx	lr

08004e48 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b083      	sub	sp, #12
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004e50:	bf00      	nop
 8004e52:	370c      	adds	r7, #12
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr

08004e5c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b083      	sub	sp, #12
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004e64:	bf00      	nop
 8004e66:	370c      	adds	r7, #12
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr

08004e70 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b083      	sub	sp, #12
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
 8004e78:	460b      	mov	r3, r1
 8004e7a:	70fb      	strb	r3, [r7, #3]
 8004e7c:	4613      	mov	r3, r2
 8004e7e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004e80:	bf00      	nop
 8004e82:	370c      	adds	r7, #12
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr

08004e8c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b083      	sub	sp, #12
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004e94:	bf00      	nop
 8004e96:	370c      	adds	r7, #12
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9e:	4770      	bx	lr

08004ea0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b083      	sub	sp, #12
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004ea8:	bf00      	nop
 8004eaa:	370c      	adds	r7, #12
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr

08004eb4 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b083      	sub	sp, #12
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004ebc:	bf00      	nop
 8004ebe:	370c      	adds	r7, #12
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec6:	4770      	bx	lr

08004ec8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b083      	sub	sp, #12
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004ed0:	bf00      	nop
 8004ed2:	370c      	adds	r7, #12
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr

08004edc <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b083      	sub	sp, #12
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004ee4:	bf00      	nop
 8004ee6:	370c      	adds	r7, #12
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eee:	4770      	bx	lr

08004ef0 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b084      	sub	sp, #16
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004efe:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f06:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f0c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d150      	bne.n	8004fb8 <I2C_MasterTransmit_TXE+0xc8>
 8004f16:	7bfb      	ldrb	r3, [r7, #15]
 8004f18:	2b21      	cmp	r3, #33	; 0x21
 8004f1a:	d14d      	bne.n	8004fb8 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	2b08      	cmp	r3, #8
 8004f20:	d01d      	beq.n	8004f5e <I2C_MasterTransmit_TXE+0x6e>
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	2b20      	cmp	r3, #32
 8004f26:	d01a      	beq.n	8004f5e <I2C_MasterTransmit_TXE+0x6e>
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004f2e:	d016      	beq.n	8004f5e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	685a      	ldr	r2, [r3, #4]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004f3e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2211      	movs	r2, #17
 8004f44:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2220      	movs	r2, #32
 8004f52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f7ff ff62 	bl	8004e20 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004f5c:	e060      	b.n	8005020 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	685a      	ldr	r2, [r3, #4]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004f6c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f7c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2200      	movs	r2, #0
 8004f82:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2220      	movs	r2, #32
 8004f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f92:	b2db      	uxtb	r3, r3
 8004f94:	2b40      	cmp	r3, #64	; 0x40
 8004f96:	d107      	bne.n	8004fa8 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f7ff ff7d 	bl	8004ea0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004fa6:	e03b      	b.n	8005020 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2200      	movs	r2, #0
 8004fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f7ff ff35 	bl	8004e20 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004fb6:	e033      	b.n	8005020 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004fb8:	7bfb      	ldrb	r3, [r7, #15]
 8004fba:	2b21      	cmp	r3, #33	; 0x21
 8004fbc:	d005      	beq.n	8004fca <I2C_MasterTransmit_TXE+0xda>
 8004fbe:	7bbb      	ldrb	r3, [r7, #14]
 8004fc0:	2b40      	cmp	r3, #64	; 0x40
 8004fc2:	d12d      	bne.n	8005020 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004fc4:	7bfb      	ldrb	r3, [r7, #15]
 8004fc6:	2b22      	cmp	r3, #34	; 0x22
 8004fc8:	d12a      	bne.n	8005020 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fce:	b29b      	uxth	r3, r3
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d108      	bne.n	8004fe6 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	685a      	ldr	r2, [r3, #4]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fe2:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004fe4:	e01c      	b.n	8005020 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	2b40      	cmp	r3, #64	; 0x40
 8004ff0:	d103      	bne.n	8004ffa <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f000 f88e 	bl	8005114 <I2C_MemoryTransmit_TXE_BTF>
}
 8004ff8:	e012      	b.n	8005020 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ffe:	781a      	ldrb	r2, [r3, #0]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500a:	1c5a      	adds	r2, r3, #1
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005014:	b29b      	uxth	r3, r3
 8005016:	3b01      	subs	r3, #1
 8005018:	b29a      	uxth	r2, r3
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800501e:	e7ff      	b.n	8005020 <I2C_MasterTransmit_TXE+0x130>
 8005020:	bf00      	nop
 8005022:	3710      	adds	r7, #16
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}

08005028 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b084      	sub	sp, #16
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005034:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800503c:	b2db      	uxtb	r3, r3
 800503e:	2b21      	cmp	r3, #33	; 0x21
 8005040:	d164      	bne.n	800510c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005046:	b29b      	uxth	r3, r3
 8005048:	2b00      	cmp	r3, #0
 800504a:	d012      	beq.n	8005072 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005050:	781a      	ldrb	r2, [r3, #0]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800505c:	1c5a      	adds	r2, r3, #1
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005066:	b29b      	uxth	r3, r3
 8005068:	3b01      	subs	r3, #1
 800506a:	b29a      	uxth	r2, r3
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8005070:	e04c      	b.n	800510c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2b08      	cmp	r3, #8
 8005076:	d01d      	beq.n	80050b4 <I2C_MasterTransmit_BTF+0x8c>
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2b20      	cmp	r3, #32
 800507c:	d01a      	beq.n	80050b4 <I2C_MasterTransmit_BTF+0x8c>
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005084:	d016      	beq.n	80050b4 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	685a      	ldr	r2, [r3, #4]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005094:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2211      	movs	r2, #17
 800509a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2200      	movs	r2, #0
 80050a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2220      	movs	r2, #32
 80050a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f7ff feb7 	bl	8004e20 <HAL_I2C_MasterTxCpltCallback>
}
 80050b2:	e02b      	b.n	800510c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	685a      	ldr	r2, [r3, #4]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80050c2:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050d2:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2200      	movs	r2, #0
 80050d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2220      	movs	r2, #32
 80050de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	2b40      	cmp	r3, #64	; 0x40
 80050ec:	d107      	bne.n	80050fe <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2200      	movs	r2, #0
 80050f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f7ff fed2 	bl	8004ea0 <HAL_I2C_MemTxCpltCallback>
}
 80050fc:	e006      	b.n	800510c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2200      	movs	r2, #0
 8005102:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f7ff fe8a 	bl	8004e20 <HAL_I2C_MasterTxCpltCallback>
}
 800510c:	bf00      	nop
 800510e:	3710      	adds	r7, #16
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}

08005114 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b084      	sub	sp, #16
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005122:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005128:	2b00      	cmp	r3, #0
 800512a:	d11d      	bne.n	8005168 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005130:	2b01      	cmp	r3, #1
 8005132:	d10b      	bne.n	800514c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005138:	b2da      	uxtb	r2, r3
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005144:	1c9a      	adds	r2, r3, #2
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800514a:	e073      	b.n	8005234 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005150:	b29b      	uxth	r3, r3
 8005152:	121b      	asrs	r3, r3, #8
 8005154:	b2da      	uxtb	r2, r3
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005160:	1c5a      	adds	r2, r3, #1
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005166:	e065      	b.n	8005234 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800516c:	2b01      	cmp	r3, #1
 800516e:	d10b      	bne.n	8005188 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005174:	b2da      	uxtb	r2, r3
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005180:	1c5a      	adds	r2, r3, #1
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005186:	e055      	b.n	8005234 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800518c:	2b02      	cmp	r3, #2
 800518e:	d151      	bne.n	8005234 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8005190:	7bfb      	ldrb	r3, [r7, #15]
 8005192:	2b22      	cmp	r3, #34	; 0x22
 8005194:	d10d      	bne.n	80051b2 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051a4:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051aa:	1c5a      	adds	r2, r3, #1
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	651a      	str	r2, [r3, #80]	; 0x50
}
 80051b0:	e040      	b.n	8005234 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051b6:	b29b      	uxth	r3, r3
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d015      	beq.n	80051e8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80051bc:	7bfb      	ldrb	r3, [r7, #15]
 80051be:	2b21      	cmp	r3, #33	; 0x21
 80051c0:	d112      	bne.n	80051e8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c6:	781a      	ldrb	r2, [r3, #0]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d2:	1c5a      	adds	r2, r3, #1
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051dc:	b29b      	uxth	r3, r3
 80051de:	3b01      	subs	r3, #1
 80051e0:	b29a      	uxth	r2, r3
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80051e6:	e025      	b.n	8005234 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d120      	bne.n	8005234 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80051f2:	7bfb      	ldrb	r3, [r7, #15]
 80051f4:	2b21      	cmp	r3, #33	; 0x21
 80051f6:	d11d      	bne.n	8005234 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	685a      	ldr	r2, [r3, #4]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005206:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005216:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2200      	movs	r2, #0
 800521c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2220      	movs	r2, #32
 8005222:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2200      	movs	r2, #0
 800522a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f7ff fe36 	bl	8004ea0 <HAL_I2C_MemTxCpltCallback>
}
 8005234:	bf00      	nop
 8005236:	3710      	adds	r7, #16
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}

0800523c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b084      	sub	sp, #16
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800524a:	b2db      	uxtb	r3, r3
 800524c:	2b22      	cmp	r3, #34	; 0x22
 800524e:	f040 80ac 	bne.w	80053aa <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005256:	b29b      	uxth	r3, r3
 8005258:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2b03      	cmp	r3, #3
 800525e:	d921      	bls.n	80052a4 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	691a      	ldr	r2, [r3, #16]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526a:	b2d2      	uxtb	r2, r2
 800526c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005272:	1c5a      	adds	r2, r3, #1
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800527c:	b29b      	uxth	r3, r3
 800527e:	3b01      	subs	r3, #1
 8005280:	b29a      	uxth	r2, r3
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800528a:	b29b      	uxth	r3, r3
 800528c:	2b03      	cmp	r3, #3
 800528e:	f040 808c 	bne.w	80053aa <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	685a      	ldr	r2, [r3, #4]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052a0:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80052a2:	e082      	b.n	80053aa <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052a8:	2b02      	cmp	r3, #2
 80052aa:	d075      	beq.n	8005398 <I2C_MasterReceive_RXNE+0x15c>
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	d002      	beq.n	80052b8 <I2C_MasterReceive_RXNE+0x7c>
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d16f      	bne.n	8005398 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f001 fafd 	bl	80068b8 <I2C_WaitOnSTOPRequestThroughIT>
 80052be:	4603      	mov	r3, r0
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d142      	bne.n	800534a <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052d2:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	685a      	ldr	r2, [r3, #4]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80052e2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	691a      	ldr	r2, [r3, #16]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ee:	b2d2      	uxtb	r2, r2
 80052f0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f6:	1c5a      	adds	r2, r3, #1
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005300:	b29b      	uxth	r3, r3
 8005302:	3b01      	subs	r3, #1
 8005304:	b29a      	uxth	r2, r3
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2220      	movs	r2, #32
 800530e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005318:	b2db      	uxtb	r3, r3
 800531a:	2b40      	cmp	r3, #64	; 0x40
 800531c:	d10a      	bne.n	8005334 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2200      	movs	r2, #0
 8005322:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f7ff fdc1 	bl	8004eb4 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005332:	e03a      	b.n	80053aa <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2200      	movs	r2, #0
 8005338:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2212      	movs	r2, #18
 8005340:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f7ff fd76 	bl	8004e34 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005348:	e02f      	b.n	80053aa <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	685a      	ldr	r2, [r3, #4]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005358:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	691a      	ldr	r2, [r3, #16]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005364:	b2d2      	uxtb	r2, r2
 8005366:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536c:	1c5a      	adds	r2, r3, #1
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005376:	b29b      	uxth	r3, r3
 8005378:	3b01      	subs	r3, #1
 800537a:	b29a      	uxth	r2, r3
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2220      	movs	r2, #32
 8005384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2200      	movs	r2, #0
 800538c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f7ff fd99 	bl	8004ec8 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005396:	e008      	b.n	80053aa <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	685a      	ldr	r2, [r3, #4]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053a6:	605a      	str	r2, [r3, #4]
}
 80053a8:	e7ff      	b.n	80053aa <I2C_MasterReceive_RXNE+0x16e>
 80053aa:	bf00      	nop
 80053ac:	3710      	adds	r7, #16
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}

080053b2 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80053b2:	b580      	push	{r7, lr}
 80053b4:	b084      	sub	sp, #16
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053be:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	2b04      	cmp	r3, #4
 80053c8:	d11b      	bne.n	8005402 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	685a      	ldr	r2, [r3, #4]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053d8:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	691a      	ldr	r2, [r3, #16]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e4:	b2d2      	uxtb	r2, r2
 80053e6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ec:	1c5a      	adds	r2, r3, #1
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053f6:	b29b      	uxth	r3, r3
 80053f8:	3b01      	subs	r3, #1
 80053fa:	b29a      	uxth	r2, r3
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005400:	e0bd      	b.n	800557e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005406:	b29b      	uxth	r3, r3
 8005408:	2b03      	cmp	r3, #3
 800540a:	d129      	bne.n	8005460 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	685a      	ldr	r2, [r3, #4]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800541a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2b04      	cmp	r3, #4
 8005420:	d00a      	beq.n	8005438 <I2C_MasterReceive_BTF+0x86>
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2b02      	cmp	r3, #2
 8005426:	d007      	beq.n	8005438 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005436:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	691a      	ldr	r2, [r3, #16]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005442:	b2d2      	uxtb	r2, r2
 8005444:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544a:	1c5a      	adds	r2, r3, #1
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005454:	b29b      	uxth	r3, r3
 8005456:	3b01      	subs	r3, #1
 8005458:	b29a      	uxth	r2, r3
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800545e:	e08e      	b.n	800557e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005464:	b29b      	uxth	r3, r3
 8005466:	2b02      	cmp	r3, #2
 8005468:	d176      	bne.n	8005558 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2b01      	cmp	r3, #1
 800546e:	d002      	beq.n	8005476 <I2C_MasterReceive_BTF+0xc4>
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2b10      	cmp	r3, #16
 8005474:	d108      	bne.n	8005488 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005484:	601a      	str	r2, [r3, #0]
 8005486:	e019      	b.n	80054bc <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2b04      	cmp	r3, #4
 800548c:	d002      	beq.n	8005494 <I2C_MasterReceive_BTF+0xe2>
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2b02      	cmp	r3, #2
 8005492:	d108      	bne.n	80054a6 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	681a      	ldr	r2, [r3, #0]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80054a2:	601a      	str	r2, [r3, #0]
 80054a4:	e00a      	b.n	80054bc <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2b10      	cmp	r3, #16
 80054aa:	d007      	beq.n	80054bc <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054ba:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	691a      	ldr	r2, [r3, #16]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c6:	b2d2      	uxtb	r2, r2
 80054c8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ce:	1c5a      	adds	r2, r3, #1
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054d8:	b29b      	uxth	r3, r3
 80054da:	3b01      	subs	r3, #1
 80054dc:	b29a      	uxth	r2, r3
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	691a      	ldr	r2, [r3, #16]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ec:	b2d2      	uxtb	r2, r2
 80054ee:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f4:	1c5a      	adds	r2, r3, #1
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054fe:	b29b      	uxth	r3, r3
 8005500:	3b01      	subs	r3, #1
 8005502:	b29a      	uxth	r2, r3
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	685a      	ldr	r2, [r3, #4]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005516:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2220      	movs	r2, #32
 800551c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005526:	b2db      	uxtb	r3, r3
 8005528:	2b40      	cmp	r3, #64	; 0x40
 800552a:	d10a      	bne.n	8005542 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2200      	movs	r2, #0
 8005530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2200      	movs	r2, #0
 8005538:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f7ff fcba 	bl	8004eb4 <HAL_I2C_MemRxCpltCallback>
}
 8005540:	e01d      	b.n	800557e <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2200      	movs	r2, #0
 8005546:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2212      	movs	r2, #18
 800554e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f7ff fc6f 	bl	8004e34 <HAL_I2C_MasterRxCpltCallback>
}
 8005556:	e012      	b.n	800557e <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	691a      	ldr	r2, [r3, #16]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005562:	b2d2      	uxtb	r2, r2
 8005564:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800556a:	1c5a      	adds	r2, r3, #1
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005574:	b29b      	uxth	r3, r3
 8005576:	3b01      	subs	r3, #1
 8005578:	b29a      	uxth	r2, r3
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800557e:	bf00      	nop
 8005580:	3710      	adds	r7, #16
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}

08005586 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8005586:	b480      	push	{r7}
 8005588:	b083      	sub	sp, #12
 800558a:	af00      	add	r7, sp, #0
 800558c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005594:	b2db      	uxtb	r3, r3
 8005596:	2b40      	cmp	r3, #64	; 0x40
 8005598:	d117      	bne.n	80055ca <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d109      	bne.n	80055b6 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055a6:	b2db      	uxtb	r3, r3
 80055a8:	461a      	mov	r2, r3
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80055b2:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80055b4:	e067      	b.n	8005686 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055ba:	b2db      	uxtb	r3, r3
 80055bc:	f043 0301 	orr.w	r3, r3, #1
 80055c0:	b2da      	uxtb	r2, r3
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	611a      	str	r2, [r3, #16]
}
 80055c8:	e05d      	b.n	8005686 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	691b      	ldr	r3, [r3, #16]
 80055ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80055d2:	d133      	bne.n	800563c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055da:	b2db      	uxtb	r3, r3
 80055dc:	2b21      	cmp	r3, #33	; 0x21
 80055de:	d109      	bne.n	80055f4 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055e4:	b2db      	uxtb	r3, r3
 80055e6:	461a      	mov	r2, r3
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80055f0:	611a      	str	r2, [r3, #16]
 80055f2:	e008      	b.n	8005606 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055f8:	b2db      	uxtb	r3, r3
 80055fa:	f043 0301 	orr.w	r3, r3, #1
 80055fe:	b2da      	uxtb	r2, r3
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800560a:	2b00      	cmp	r3, #0
 800560c:	d004      	beq.n	8005618 <I2C_Master_SB+0x92>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005612:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005614:	2b00      	cmp	r3, #0
 8005616:	d108      	bne.n	800562a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800561c:	2b00      	cmp	r3, #0
 800561e:	d032      	beq.n	8005686 <I2C_Master_SB+0x100>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005624:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005626:	2b00      	cmp	r3, #0
 8005628:	d02d      	beq.n	8005686 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	685a      	ldr	r2, [r3, #4]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005638:	605a      	str	r2, [r3, #4]
}
 800563a:	e024      	b.n	8005686 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005640:	2b00      	cmp	r3, #0
 8005642:	d10e      	bne.n	8005662 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005648:	b29b      	uxth	r3, r3
 800564a:	11db      	asrs	r3, r3, #7
 800564c:	b2db      	uxtb	r3, r3
 800564e:	f003 0306 	and.w	r3, r3, #6
 8005652:	b2db      	uxtb	r3, r3
 8005654:	f063 030f 	orn	r3, r3, #15
 8005658:	b2da      	uxtb	r2, r3
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	611a      	str	r2, [r3, #16]
}
 8005660:	e011      	b.n	8005686 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005666:	2b01      	cmp	r3, #1
 8005668:	d10d      	bne.n	8005686 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800566e:	b29b      	uxth	r3, r3
 8005670:	11db      	asrs	r3, r3, #7
 8005672:	b2db      	uxtb	r3, r3
 8005674:	f003 0306 	and.w	r3, r3, #6
 8005678:	b2db      	uxtb	r3, r3
 800567a:	f063 030e 	orn	r3, r3, #14
 800567e:	b2da      	uxtb	r2, r3
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	611a      	str	r2, [r3, #16]
}
 8005686:	bf00      	nop
 8005688:	370c      	adds	r7, #12
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr

08005692 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005692:	b480      	push	{r7}
 8005694:	b083      	sub	sp, #12
 8005696:	af00      	add	r7, sp, #0
 8005698:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800569e:	b2da      	uxtb	r2, r3
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d004      	beq.n	80056b8 <I2C_Master_ADD10+0x26>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d108      	bne.n	80056ca <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d00c      	beq.n	80056da <I2C_Master_ADD10+0x48>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d007      	beq.n	80056da <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	685a      	ldr	r2, [r3, #4]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056d8:	605a      	str	r2, [r3, #4]
  }
}
 80056da:	bf00      	nop
 80056dc:	370c      	adds	r7, #12
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr

080056e6 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80056e6:	b480      	push	{r7}
 80056e8:	b091      	sub	sp, #68	; 0x44
 80056ea:	af00      	add	r7, sp, #0
 80056ec:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80056f4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056fc:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005702:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800570a:	b2db      	uxtb	r3, r3
 800570c:	2b22      	cmp	r3, #34	; 0x22
 800570e:	f040 8169 	bne.w	80059e4 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005716:	2b00      	cmp	r3, #0
 8005718:	d10f      	bne.n	800573a <I2C_Master_ADDR+0x54>
 800571a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800571e:	2b40      	cmp	r3, #64	; 0x40
 8005720:	d10b      	bne.n	800573a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005722:	2300      	movs	r3, #0
 8005724:	633b      	str	r3, [r7, #48]	; 0x30
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	695b      	ldr	r3, [r3, #20]
 800572c:	633b      	str	r3, [r7, #48]	; 0x30
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	699b      	ldr	r3, [r3, #24]
 8005734:	633b      	str	r3, [r7, #48]	; 0x30
 8005736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005738:	e160      	b.n	80059fc <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800573e:	2b00      	cmp	r3, #0
 8005740:	d11d      	bne.n	800577e <I2C_Master_ADDR+0x98>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	691b      	ldr	r3, [r3, #16]
 8005746:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800574a:	d118      	bne.n	800577e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800574c:	2300      	movs	r3, #0
 800574e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	695b      	ldr	r3, [r3, #20]
 8005756:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	699b      	ldr	r3, [r3, #24]
 800575e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005760:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005770:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005776:	1c5a      	adds	r2, r3, #1
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	651a      	str	r2, [r3, #80]	; 0x50
 800577c:	e13e      	b.n	80059fc <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005782:	b29b      	uxth	r3, r3
 8005784:	2b00      	cmp	r3, #0
 8005786:	d113      	bne.n	80057b0 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005788:	2300      	movs	r3, #0
 800578a:	62bb      	str	r3, [r7, #40]	; 0x28
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	695b      	ldr	r3, [r3, #20]
 8005792:	62bb      	str	r3, [r7, #40]	; 0x28
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	699b      	ldr	r3, [r3, #24]
 800579a:	62bb      	str	r3, [r7, #40]	; 0x28
 800579c:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057ac:	601a      	str	r2, [r3, #0]
 80057ae:	e115      	b.n	80059dc <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	f040 808a 	bne.w	80058d0 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80057bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057be:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80057c2:	d137      	bne.n	8005834 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	681a      	ldr	r2, [r3, #0]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057d2:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057e2:	d113      	bne.n	800580c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	681a      	ldr	r2, [r3, #0]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057f2:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057f4:	2300      	movs	r3, #0
 80057f6:	627b      	str	r3, [r7, #36]	; 0x24
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	695b      	ldr	r3, [r3, #20]
 80057fe:	627b      	str	r3, [r7, #36]	; 0x24
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	699b      	ldr	r3, [r3, #24]
 8005806:	627b      	str	r3, [r7, #36]	; 0x24
 8005808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580a:	e0e7      	b.n	80059dc <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800580c:	2300      	movs	r3, #0
 800580e:	623b      	str	r3, [r7, #32]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	695b      	ldr	r3, [r3, #20]
 8005816:	623b      	str	r3, [r7, #32]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	699b      	ldr	r3, [r3, #24]
 800581e:	623b      	str	r3, [r7, #32]
 8005820:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005830:	601a      	str	r2, [r3, #0]
 8005832:	e0d3      	b.n	80059dc <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005836:	2b08      	cmp	r3, #8
 8005838:	d02e      	beq.n	8005898 <I2C_Master_ADDR+0x1b2>
 800583a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800583c:	2b20      	cmp	r3, #32
 800583e:	d02b      	beq.n	8005898 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005842:	2b12      	cmp	r3, #18
 8005844:	d102      	bne.n	800584c <I2C_Master_ADDR+0x166>
 8005846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005848:	2b01      	cmp	r3, #1
 800584a:	d125      	bne.n	8005898 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800584c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800584e:	2b04      	cmp	r3, #4
 8005850:	d00e      	beq.n	8005870 <I2C_Master_ADDR+0x18a>
 8005852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005854:	2b02      	cmp	r3, #2
 8005856:	d00b      	beq.n	8005870 <I2C_Master_ADDR+0x18a>
 8005858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800585a:	2b10      	cmp	r3, #16
 800585c:	d008      	beq.n	8005870 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800586c:	601a      	str	r2, [r3, #0]
 800586e:	e007      	b.n	8005880 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	681a      	ldr	r2, [r3, #0]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800587e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005880:	2300      	movs	r3, #0
 8005882:	61fb      	str	r3, [r7, #28]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	695b      	ldr	r3, [r3, #20]
 800588a:	61fb      	str	r3, [r7, #28]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	699b      	ldr	r3, [r3, #24]
 8005892:	61fb      	str	r3, [r7, #28]
 8005894:	69fb      	ldr	r3, [r7, #28]
 8005896:	e0a1      	b.n	80059dc <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058a6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058a8:	2300      	movs	r3, #0
 80058aa:	61bb      	str	r3, [r7, #24]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	695b      	ldr	r3, [r3, #20]
 80058b2:	61bb      	str	r3, [r7, #24]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	699b      	ldr	r3, [r3, #24]
 80058ba:	61bb      	str	r3, [r7, #24]
 80058bc:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058cc:	601a      	str	r2, [r3, #0]
 80058ce:	e085      	b.n	80059dc <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	2b02      	cmp	r3, #2
 80058d8:	d14d      	bne.n	8005976 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80058da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058dc:	2b04      	cmp	r3, #4
 80058de:	d016      	beq.n	800590e <I2C_Master_ADDR+0x228>
 80058e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058e2:	2b02      	cmp	r3, #2
 80058e4:	d013      	beq.n	800590e <I2C_Master_ADDR+0x228>
 80058e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058e8:	2b10      	cmp	r3, #16
 80058ea:	d010      	beq.n	800590e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	681a      	ldr	r2, [r3, #0]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058fa:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800590a:	601a      	str	r2, [r3, #0]
 800590c:	e007      	b.n	800591e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800591c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005928:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800592c:	d117      	bne.n	800595e <I2C_Master_ADDR+0x278>
 800592e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005930:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005934:	d00b      	beq.n	800594e <I2C_Master_ADDR+0x268>
 8005936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005938:	2b01      	cmp	r3, #1
 800593a:	d008      	beq.n	800594e <I2C_Master_ADDR+0x268>
 800593c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800593e:	2b08      	cmp	r3, #8
 8005940:	d005      	beq.n	800594e <I2C_Master_ADDR+0x268>
 8005942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005944:	2b10      	cmp	r3, #16
 8005946:	d002      	beq.n	800594e <I2C_Master_ADDR+0x268>
 8005948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800594a:	2b20      	cmp	r3, #32
 800594c:	d107      	bne.n	800595e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	685a      	ldr	r2, [r3, #4]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800595c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800595e:	2300      	movs	r3, #0
 8005960:	617b      	str	r3, [r7, #20]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	695b      	ldr	r3, [r3, #20]
 8005968:	617b      	str	r3, [r7, #20]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	699b      	ldr	r3, [r3, #24]
 8005970:	617b      	str	r3, [r7, #20]
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	e032      	b.n	80059dc <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005984:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005990:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005994:	d117      	bne.n	80059c6 <I2C_Master_ADDR+0x2e0>
 8005996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005998:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800599c:	d00b      	beq.n	80059b6 <I2C_Master_ADDR+0x2d0>
 800599e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	d008      	beq.n	80059b6 <I2C_Master_ADDR+0x2d0>
 80059a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059a6:	2b08      	cmp	r3, #8
 80059a8:	d005      	beq.n	80059b6 <I2C_Master_ADDR+0x2d0>
 80059aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059ac:	2b10      	cmp	r3, #16
 80059ae:	d002      	beq.n	80059b6 <I2C_Master_ADDR+0x2d0>
 80059b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059b2:	2b20      	cmp	r3, #32
 80059b4:	d107      	bne.n	80059c6 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	685a      	ldr	r2, [r3, #4]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80059c4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059c6:	2300      	movs	r3, #0
 80059c8:	613b      	str	r3, [r7, #16]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	695b      	ldr	r3, [r3, #20]
 80059d0:	613b      	str	r3, [r7, #16]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	699b      	ldr	r3, [r3, #24]
 80059d8:	613b      	str	r3, [r7, #16]
 80059da:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2200      	movs	r2, #0
 80059e0:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80059e2:	e00b      	b.n	80059fc <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059e4:	2300      	movs	r3, #0
 80059e6:	60fb      	str	r3, [r7, #12]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	695b      	ldr	r3, [r3, #20]
 80059ee:	60fb      	str	r3, [r7, #12]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	699b      	ldr	r3, [r3, #24]
 80059f6:	60fb      	str	r3, [r7, #12]
 80059f8:	68fb      	ldr	r3, [r7, #12]
}
 80059fa:	e7ff      	b.n	80059fc <I2C_Master_ADDR+0x316>
 80059fc:	bf00      	nop
 80059fe:	3744      	adds	r7, #68	; 0x44
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	4770      	bx	lr

08005a08 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b084      	sub	sp, #16
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a16:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a1c:	b29b      	uxth	r3, r3
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d02b      	beq.n	8005a7a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a26:	781a      	ldrb	r2, [r3, #0]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a32:	1c5a      	adds	r2, r3, #1
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	3b01      	subs	r3, #1
 8005a40:	b29a      	uxth	r2, r3
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d114      	bne.n	8005a7a <I2C_SlaveTransmit_TXE+0x72>
 8005a50:	7bfb      	ldrb	r3, [r7, #15]
 8005a52:	2b29      	cmp	r3, #41	; 0x29
 8005a54:	d111      	bne.n	8005a7a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	685a      	ldr	r2, [r3, #4]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a64:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2221      	movs	r2, #33	; 0x21
 8005a6a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2228      	movs	r2, #40	; 0x28
 8005a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f7ff f9e7 	bl	8004e48 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005a7a:	bf00      	nop
 8005a7c:	3710      	adds	r7, #16
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}

08005a82 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005a82:	b480      	push	{r7}
 8005a84:	b083      	sub	sp, #12
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d011      	beq.n	8005ab8 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a98:	781a      	ldrb	r2, [r3, #0]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa4:	1c5a      	adds	r2, r3, #1
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	3b01      	subs	r3, #1
 8005ab2:	b29a      	uxth	r2, r3
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005ab8:	bf00      	nop
 8005aba:	370c      	adds	r7, #12
 8005abc:	46bd      	mov	sp, r7
 8005abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac2:	4770      	bx	lr

08005ac4 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b084      	sub	sp, #16
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ad2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d02c      	beq.n	8005b38 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	691a      	ldr	r2, [r3, #16]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae8:	b2d2      	uxtb	r2, r2
 8005aea:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af0:	1c5a      	adds	r2, r3, #1
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005afa:	b29b      	uxth	r3, r3
 8005afc:	3b01      	subs	r3, #1
 8005afe:	b29a      	uxth	r2, r3
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d114      	bne.n	8005b38 <I2C_SlaveReceive_RXNE+0x74>
 8005b0e:	7bfb      	ldrb	r3, [r7, #15]
 8005b10:	2b2a      	cmp	r3, #42	; 0x2a
 8005b12:	d111      	bne.n	8005b38 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	685a      	ldr	r2, [r3, #4]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b22:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2222      	movs	r2, #34	; 0x22
 8005b28:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2228      	movs	r2, #40	; 0x28
 8005b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f7ff f992 	bl	8004e5c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005b38:	bf00      	nop
 8005b3a:	3710      	adds	r7, #16
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}

08005b40 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b083      	sub	sp, #12
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b4c:	b29b      	uxth	r3, r3
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d012      	beq.n	8005b78 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	691a      	ldr	r2, [r3, #16]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b5c:	b2d2      	uxtb	r2, r2
 8005b5e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b64:	1c5a      	adds	r2, r3, #1
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	3b01      	subs	r3, #1
 8005b72:	b29a      	uxth	r2, r3
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005b78:	bf00      	nop
 8005b7a:	370c      	adds	r7, #12
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr

08005b84 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b084      	sub	sp, #16
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
 8005b8c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b98:	b2db      	uxtb	r3, r3
 8005b9a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005b9e:	2b28      	cmp	r3, #40	; 0x28
 8005ba0:	d127      	bne.n	8005bf2 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	685a      	ldr	r2, [r3, #4]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bb0:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	089b      	lsrs	r3, r3, #2
 8005bb6:	f003 0301 	and.w	r3, r3, #1
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d101      	bne.n	8005bc2 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	09db      	lsrs	r3, r3, #7
 8005bc6:	f003 0301 	and.w	r3, r3, #1
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d103      	bne.n	8005bd6 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	68db      	ldr	r3, [r3, #12]
 8005bd2:	81bb      	strh	r3, [r7, #12]
 8005bd4:	e002      	b.n	8005bdc <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	699b      	ldr	r3, [r3, #24]
 8005bda:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2200      	movs	r2, #0
 8005be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005be4:	89ba      	ldrh	r2, [r7, #12]
 8005be6:	7bfb      	ldrb	r3, [r7, #15]
 8005be8:	4619      	mov	r1, r3
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f7ff f940 	bl	8004e70 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005bf0:	e00e      	b.n	8005c10 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	60bb      	str	r3, [r7, #8]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	695b      	ldr	r3, [r3, #20]
 8005bfc:	60bb      	str	r3, [r7, #8]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	699b      	ldr	r3, [r3, #24]
 8005c04:	60bb      	str	r3, [r7, #8]
 8005c06:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005c10:	bf00      	nop
 8005c12:	3710      	adds	r7, #16
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}

08005c18 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b084      	sub	sp, #16
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c26:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	685a      	ldr	r2, [r3, #4]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005c36:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005c38:	2300      	movs	r3, #0
 8005c3a:	60bb      	str	r3, [r7, #8]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	695b      	ldr	r3, [r3, #20]
 8005c42:	60bb      	str	r3, [r7, #8]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	681a      	ldr	r2, [r3, #0]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f042 0201 	orr.w	r2, r2, #1
 8005c52:	601a      	str	r2, [r3, #0]
 8005c54:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	681a      	ldr	r2, [r3, #0]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c64:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c74:	d172      	bne.n	8005d5c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005c76:	7bfb      	ldrb	r3, [r7, #15]
 8005c78:	2b22      	cmp	r3, #34	; 0x22
 8005c7a:	d002      	beq.n	8005c82 <I2C_Slave_STOPF+0x6a>
 8005c7c:	7bfb      	ldrb	r3, [r7, #15]
 8005c7e:	2b2a      	cmp	r3, #42	; 0x2a
 8005c80:	d135      	bne.n	8005cee <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	b29a      	uxth	r2, r3
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c94:	b29b      	uxth	r3, r3
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d005      	beq.n	8005ca6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c9e:	f043 0204 	orr.w	r2, r3, #4
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	685a      	ldr	r2, [r3, #4]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005cb4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f7fd ff76 	bl	8003bac <HAL_DMA_GetState>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	2b01      	cmp	r3, #1
 8005cc4:	d049      	beq.n	8005d5a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cca:	4a69      	ldr	r2, [pc, #420]	; (8005e70 <I2C_Slave_STOPF+0x258>)
 8005ccc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f7fd fdbe 	bl	8003854 <HAL_DMA_Abort_IT>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d03d      	beq.n	8005d5a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ce2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ce4:	687a      	ldr	r2, [r7, #4]
 8005ce6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005ce8:	4610      	mov	r0, r2
 8005cea:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005cec:	e035      	b.n	8005d5a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	b29a      	uxth	r2, r3
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d005      	beq.n	8005d12 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d0a:	f043 0204 	orr.w	r2, r3, #4
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	685a      	ldr	r2, [r3, #4]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d20:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d26:	4618      	mov	r0, r3
 8005d28:	f7fd ff40 	bl	8003bac <HAL_DMA_GetState>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	2b01      	cmp	r3, #1
 8005d30:	d014      	beq.n	8005d5c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d36:	4a4e      	ldr	r2, [pc, #312]	; (8005e70 <I2C_Slave_STOPF+0x258>)
 8005d38:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f7fd fd88 	bl	8003854 <HAL_DMA_Abort_IT>
 8005d44:	4603      	mov	r3, r0
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d008      	beq.n	8005d5c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d50:	687a      	ldr	r2, [r7, #4]
 8005d52:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005d54:	4610      	mov	r0, r2
 8005d56:	4798      	blx	r3
 8005d58:	e000      	b.n	8005d5c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005d5a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d60:	b29b      	uxth	r3, r3
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d03e      	beq.n	8005de4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	695b      	ldr	r3, [r3, #20]
 8005d6c:	f003 0304 	and.w	r3, r3, #4
 8005d70:	2b04      	cmp	r3, #4
 8005d72:	d112      	bne.n	8005d9a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	691a      	ldr	r2, [r3, #16]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d7e:	b2d2      	uxtb	r2, r2
 8005d80:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d86:	1c5a      	adds	r2, r3, #1
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d90:	b29b      	uxth	r3, r3
 8005d92:	3b01      	subs	r3, #1
 8005d94:	b29a      	uxth	r2, r3
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	695b      	ldr	r3, [r3, #20]
 8005da0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005da4:	2b40      	cmp	r3, #64	; 0x40
 8005da6:	d112      	bne.n	8005dce <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	691a      	ldr	r2, [r3, #16]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db2:	b2d2      	uxtb	r2, r2
 8005db4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dba:	1c5a      	adds	r2, r3, #1
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dc4:	b29b      	uxth	r3, r3
 8005dc6:	3b01      	subs	r3, #1
 8005dc8:	b29a      	uxth	r2, r3
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d005      	beq.n	8005de4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ddc:	f043 0204 	orr.w	r2, r3, #4
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d003      	beq.n	8005df4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	f000 f8b3 	bl	8005f58 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005df2:	e039      	b.n	8005e68 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005df4:	7bfb      	ldrb	r3, [r7, #15]
 8005df6:	2b2a      	cmp	r3, #42	; 0x2a
 8005df8:	d109      	bne.n	8005e0e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2228      	movs	r2, #40	; 0x28
 8005e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	f7ff f827 	bl	8004e5c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e14:	b2db      	uxtb	r3, r3
 8005e16:	2b28      	cmp	r3, #40	; 0x28
 8005e18:	d111      	bne.n	8005e3e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	4a15      	ldr	r2, [pc, #84]	; (8005e74 <I2C_Slave_STOPF+0x25c>)
 8005e1e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2200      	movs	r2, #0
 8005e24:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2220      	movs	r2, #32
 8005e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2200      	movs	r2, #0
 8005e32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f7ff f828 	bl	8004e8c <HAL_I2C_ListenCpltCallback>
}
 8005e3c:	e014      	b.n	8005e68 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e42:	2b22      	cmp	r3, #34	; 0x22
 8005e44:	d002      	beq.n	8005e4c <I2C_Slave_STOPF+0x234>
 8005e46:	7bfb      	ldrb	r3, [r7, #15]
 8005e48:	2b22      	cmp	r3, #34	; 0x22
 8005e4a:	d10d      	bne.n	8005e68 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2220      	movs	r2, #32
 8005e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f7fe fffa 	bl	8004e5c <HAL_I2C_SlaveRxCpltCallback>
}
 8005e68:	bf00      	nop
 8005e6a:	3710      	adds	r7, #16
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bd80      	pop	{r7, pc}
 8005e70:	080064b9 	.word	0x080064b9
 8005e74:	ffff0000 	.word	0xffff0000

08005e78 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b084      	sub	sp, #16
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e86:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e8c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	2b08      	cmp	r3, #8
 8005e92:	d002      	beq.n	8005e9a <I2C_Slave_AF+0x22>
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	2b20      	cmp	r3, #32
 8005e98:	d129      	bne.n	8005eee <I2C_Slave_AF+0x76>
 8005e9a:	7bfb      	ldrb	r3, [r7, #15]
 8005e9c:	2b28      	cmp	r3, #40	; 0x28
 8005e9e:	d126      	bne.n	8005eee <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	4a2c      	ldr	r2, [pc, #176]	; (8005f54 <I2C_Slave_AF+0xdc>)
 8005ea4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	685a      	ldr	r2, [r3, #4]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005eb4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005ebe:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ece:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2220      	movs	r2, #32
 8005eda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f7fe ffd0 	bl	8004e8c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005eec:	e02e      	b.n	8005f4c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005eee:	7bfb      	ldrb	r3, [r7, #15]
 8005ef0:	2b21      	cmp	r3, #33	; 0x21
 8005ef2:	d126      	bne.n	8005f42 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	4a17      	ldr	r2, [pc, #92]	; (8005f54 <I2C_Slave_AF+0xdc>)
 8005ef8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2221      	movs	r2, #33	; 0x21
 8005efe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2220      	movs	r2, #32
 8005f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	685a      	ldr	r2, [r3, #4]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005f1e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005f28:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	681a      	ldr	r2, [r3, #0]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f38:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f7fe ff84 	bl	8004e48 <HAL_I2C_SlaveTxCpltCallback>
}
 8005f40:	e004      	b.n	8005f4c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005f4a:	615a      	str	r2, [r3, #20]
}
 8005f4c:	bf00      	nop
 8005f4e:	3710      	adds	r7, #16
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}
 8005f54:	ffff0000 	.word	0xffff0000

08005f58 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b084      	sub	sp, #16
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f66:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f6e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005f70:	7bbb      	ldrb	r3, [r7, #14]
 8005f72:	2b10      	cmp	r3, #16
 8005f74:	d002      	beq.n	8005f7c <I2C_ITError+0x24>
 8005f76:	7bbb      	ldrb	r3, [r7, #14]
 8005f78:	2b40      	cmp	r3, #64	; 0x40
 8005f7a:	d10a      	bne.n	8005f92 <I2C_ITError+0x3a>
 8005f7c:	7bfb      	ldrb	r3, [r7, #15]
 8005f7e:	2b22      	cmp	r3, #34	; 0x22
 8005f80:	d107      	bne.n	8005f92 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f90:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005f92:	7bfb      	ldrb	r3, [r7, #15]
 8005f94:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005f98:	2b28      	cmp	r3, #40	; 0x28
 8005f9a:	d107      	bne.n	8005fac <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2228      	movs	r2, #40	; 0x28
 8005fa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005faa:	e015      	b.n	8005fd8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005fb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fba:	d00a      	beq.n	8005fd2 <I2C_ITError+0x7a>
 8005fbc:	7bfb      	ldrb	r3, [r7, #15]
 8005fbe:	2b60      	cmp	r3, #96	; 0x60
 8005fc0:	d007      	beq.n	8005fd2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2220      	movs	r2, #32
 8005fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005fe2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fe6:	d162      	bne.n	80060ae <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	685a      	ldr	r2, [r3, #4]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ff6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ffc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006000:	b2db      	uxtb	r3, r3
 8006002:	2b01      	cmp	r3, #1
 8006004:	d020      	beq.n	8006048 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800600a:	4a6a      	ldr	r2, [pc, #424]	; (80061b4 <I2C_ITError+0x25c>)
 800600c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006012:	4618      	mov	r0, r3
 8006014:	f7fd fc1e 	bl	8003854 <HAL_DMA_Abort_IT>
 8006018:	4603      	mov	r3, r0
 800601a:	2b00      	cmp	r3, #0
 800601c:	f000 8089 	beq.w	8006132 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f022 0201 	bic.w	r2, r2, #1
 800602e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2220      	movs	r2, #32
 8006034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800603c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800603e:	687a      	ldr	r2, [r7, #4]
 8006040:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006042:	4610      	mov	r0, r2
 8006044:	4798      	blx	r3
 8006046:	e074      	b.n	8006132 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800604c:	4a59      	ldr	r2, [pc, #356]	; (80061b4 <I2C_ITError+0x25c>)
 800604e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006054:	4618      	mov	r0, r3
 8006056:	f7fd fbfd 	bl	8003854 <HAL_DMA_Abort_IT>
 800605a:	4603      	mov	r3, r0
 800605c:	2b00      	cmp	r3, #0
 800605e:	d068      	beq.n	8006132 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	695b      	ldr	r3, [r3, #20]
 8006066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800606a:	2b40      	cmp	r3, #64	; 0x40
 800606c:	d10b      	bne.n	8006086 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	691a      	ldr	r2, [r3, #16]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006078:	b2d2      	uxtb	r2, r2
 800607a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006080:	1c5a      	adds	r2, r3, #1
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	681a      	ldr	r2, [r3, #0]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f022 0201 	bic.w	r2, r2, #1
 8006094:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2220      	movs	r2, #32
 800609a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060a4:	687a      	ldr	r2, [r7, #4]
 80060a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80060a8:	4610      	mov	r0, r2
 80060aa:	4798      	blx	r3
 80060ac:	e041      	b.n	8006132 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060b4:	b2db      	uxtb	r3, r3
 80060b6:	2b60      	cmp	r3, #96	; 0x60
 80060b8:	d125      	bne.n	8006106 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2220      	movs	r2, #32
 80060be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2200      	movs	r2, #0
 80060c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	695b      	ldr	r3, [r3, #20]
 80060ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060d2:	2b40      	cmp	r3, #64	; 0x40
 80060d4:	d10b      	bne.n	80060ee <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	691a      	ldr	r2, [r3, #16]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e0:	b2d2      	uxtb	r2, r2
 80060e2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e8:	1c5a      	adds	r2, r3, #1
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	681a      	ldr	r2, [r3, #0]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f022 0201 	bic.w	r2, r2, #1
 80060fc:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f7fe feec 	bl	8004edc <HAL_I2C_AbortCpltCallback>
 8006104:	e015      	b.n	8006132 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	695b      	ldr	r3, [r3, #20]
 800610c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006110:	2b40      	cmp	r3, #64	; 0x40
 8006112:	d10b      	bne.n	800612c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	691a      	ldr	r2, [r3, #16]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800611e:	b2d2      	uxtb	r2, r2
 8006120:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006126:	1c5a      	adds	r2, r3, #1
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f7fe fecb 	bl	8004ec8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006136:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	f003 0301 	and.w	r3, r3, #1
 800613e:	2b00      	cmp	r3, #0
 8006140:	d10e      	bne.n	8006160 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006148:	2b00      	cmp	r3, #0
 800614a:	d109      	bne.n	8006160 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006152:	2b00      	cmp	r3, #0
 8006154:	d104      	bne.n	8006160 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800615c:	2b00      	cmp	r3, #0
 800615e:	d007      	beq.n	8006170 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	685a      	ldr	r2, [r3, #4]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800616e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006176:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800617c:	f003 0304 	and.w	r3, r3, #4
 8006180:	2b04      	cmp	r3, #4
 8006182:	d113      	bne.n	80061ac <I2C_ITError+0x254>
 8006184:	7bfb      	ldrb	r3, [r7, #15]
 8006186:	2b28      	cmp	r3, #40	; 0x28
 8006188:	d110      	bne.n	80061ac <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	4a0a      	ldr	r2, [pc, #40]	; (80061b8 <I2C_ITError+0x260>)
 800618e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2200      	movs	r2, #0
 8006194:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2220      	movs	r2, #32
 800619a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2200      	movs	r2, #0
 80061a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f7fe fe70 	bl	8004e8c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80061ac:	bf00      	nop
 80061ae:	3710      	adds	r7, #16
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}
 80061b4:	080064b9 	.word	0x080064b9
 80061b8:	ffff0000 	.word	0xffff0000

080061bc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b088      	sub	sp, #32
 80061c0:	af02      	add	r7, sp, #8
 80061c2:	60f8      	str	r0, [r7, #12]
 80061c4:	4608      	mov	r0, r1
 80061c6:	4611      	mov	r1, r2
 80061c8:	461a      	mov	r2, r3
 80061ca:	4603      	mov	r3, r0
 80061cc:	817b      	strh	r3, [r7, #10]
 80061ce:	460b      	mov	r3, r1
 80061d0:	813b      	strh	r3, [r7, #8]
 80061d2:	4613      	mov	r3, r2
 80061d4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	681a      	ldr	r2, [r3, #0]
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80061e4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80061e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e8:	9300      	str	r3, [sp, #0]
 80061ea:	6a3b      	ldr	r3, [r7, #32]
 80061ec:	2200      	movs	r2, #0
 80061ee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80061f2:	68f8      	ldr	r0, [r7, #12]
 80061f4:	f000 fa08 	bl	8006608 <I2C_WaitOnFlagUntilTimeout>
 80061f8:	4603      	mov	r3, r0
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d00d      	beq.n	800621a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006208:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800620c:	d103      	bne.n	8006216 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006214:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006216:	2303      	movs	r3, #3
 8006218:	e05f      	b.n	80062da <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800621a:	897b      	ldrh	r3, [r7, #10]
 800621c:	b2db      	uxtb	r3, r3
 800621e:	461a      	mov	r2, r3
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006228:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800622a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800622c:	6a3a      	ldr	r2, [r7, #32]
 800622e:	492d      	ldr	r1, [pc, #180]	; (80062e4 <I2C_RequestMemoryWrite+0x128>)
 8006230:	68f8      	ldr	r0, [r7, #12]
 8006232:	f000 fa40 	bl	80066b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006236:	4603      	mov	r3, r0
 8006238:	2b00      	cmp	r3, #0
 800623a:	d001      	beq.n	8006240 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800623c:	2301      	movs	r3, #1
 800623e:	e04c      	b.n	80062da <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006240:	2300      	movs	r3, #0
 8006242:	617b      	str	r3, [r7, #20]
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	695b      	ldr	r3, [r3, #20]
 800624a:	617b      	str	r3, [r7, #20]
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	699b      	ldr	r3, [r3, #24]
 8006252:	617b      	str	r3, [r7, #20]
 8006254:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006256:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006258:	6a39      	ldr	r1, [r7, #32]
 800625a:	68f8      	ldr	r0, [r7, #12]
 800625c:	f000 faaa 	bl	80067b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006260:	4603      	mov	r3, r0
 8006262:	2b00      	cmp	r3, #0
 8006264:	d00d      	beq.n	8006282 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800626a:	2b04      	cmp	r3, #4
 800626c:	d107      	bne.n	800627e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	681a      	ldr	r2, [r3, #0]
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800627c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800627e:	2301      	movs	r3, #1
 8006280:	e02b      	b.n	80062da <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006282:	88fb      	ldrh	r3, [r7, #6]
 8006284:	2b01      	cmp	r3, #1
 8006286:	d105      	bne.n	8006294 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006288:	893b      	ldrh	r3, [r7, #8]
 800628a:	b2da      	uxtb	r2, r3
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	611a      	str	r2, [r3, #16]
 8006292:	e021      	b.n	80062d8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006294:	893b      	ldrh	r3, [r7, #8]
 8006296:	0a1b      	lsrs	r3, r3, #8
 8006298:	b29b      	uxth	r3, r3
 800629a:	b2da      	uxtb	r2, r3
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80062a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062a4:	6a39      	ldr	r1, [r7, #32]
 80062a6:	68f8      	ldr	r0, [r7, #12]
 80062a8:	f000 fa84 	bl	80067b4 <I2C_WaitOnTXEFlagUntilTimeout>
 80062ac:	4603      	mov	r3, r0
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d00d      	beq.n	80062ce <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062b6:	2b04      	cmp	r3, #4
 80062b8:	d107      	bne.n	80062ca <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	681a      	ldr	r2, [r3, #0]
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062c8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80062ca:	2301      	movs	r3, #1
 80062cc:	e005      	b.n	80062da <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80062ce:	893b      	ldrh	r3, [r7, #8]
 80062d0:	b2da      	uxtb	r2, r3
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80062d8:	2300      	movs	r3, #0
}
 80062da:	4618      	mov	r0, r3
 80062dc:	3718      	adds	r7, #24
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}
 80062e2:	bf00      	nop
 80062e4:	00010002 	.word	0x00010002

080062e8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b088      	sub	sp, #32
 80062ec:	af02      	add	r7, sp, #8
 80062ee:	60f8      	str	r0, [r7, #12]
 80062f0:	4608      	mov	r0, r1
 80062f2:	4611      	mov	r1, r2
 80062f4:	461a      	mov	r2, r3
 80062f6:	4603      	mov	r3, r0
 80062f8:	817b      	strh	r3, [r7, #10]
 80062fa:	460b      	mov	r3, r1
 80062fc:	813b      	strh	r3, [r7, #8]
 80062fe:	4613      	mov	r3, r2
 8006300:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	681a      	ldr	r2, [r3, #0]
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006310:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	681a      	ldr	r2, [r3, #0]
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006320:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006324:	9300      	str	r3, [sp, #0]
 8006326:	6a3b      	ldr	r3, [r7, #32]
 8006328:	2200      	movs	r2, #0
 800632a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800632e:	68f8      	ldr	r0, [r7, #12]
 8006330:	f000 f96a 	bl	8006608 <I2C_WaitOnFlagUntilTimeout>
 8006334:	4603      	mov	r3, r0
 8006336:	2b00      	cmp	r3, #0
 8006338:	d00d      	beq.n	8006356 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006344:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006348:	d103      	bne.n	8006352 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006350:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006352:	2303      	movs	r3, #3
 8006354:	e0aa      	b.n	80064ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006356:	897b      	ldrh	r3, [r7, #10]
 8006358:	b2db      	uxtb	r3, r3
 800635a:	461a      	mov	r2, r3
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006364:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006368:	6a3a      	ldr	r2, [r7, #32]
 800636a:	4952      	ldr	r1, [pc, #328]	; (80064b4 <I2C_RequestMemoryRead+0x1cc>)
 800636c:	68f8      	ldr	r0, [r7, #12]
 800636e:	f000 f9a2 	bl	80066b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006372:	4603      	mov	r3, r0
 8006374:	2b00      	cmp	r3, #0
 8006376:	d001      	beq.n	800637c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006378:	2301      	movs	r3, #1
 800637a:	e097      	b.n	80064ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800637c:	2300      	movs	r3, #0
 800637e:	617b      	str	r3, [r7, #20]
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	695b      	ldr	r3, [r3, #20]
 8006386:	617b      	str	r3, [r7, #20]
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	699b      	ldr	r3, [r3, #24]
 800638e:	617b      	str	r3, [r7, #20]
 8006390:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006392:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006394:	6a39      	ldr	r1, [r7, #32]
 8006396:	68f8      	ldr	r0, [r7, #12]
 8006398:	f000 fa0c 	bl	80067b4 <I2C_WaitOnTXEFlagUntilTimeout>
 800639c:	4603      	mov	r3, r0
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d00d      	beq.n	80063be <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a6:	2b04      	cmp	r3, #4
 80063a8:	d107      	bne.n	80063ba <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	681a      	ldr	r2, [r3, #0]
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063b8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80063ba:	2301      	movs	r3, #1
 80063bc:	e076      	b.n	80064ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80063be:	88fb      	ldrh	r3, [r7, #6]
 80063c0:	2b01      	cmp	r3, #1
 80063c2:	d105      	bne.n	80063d0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80063c4:	893b      	ldrh	r3, [r7, #8]
 80063c6:	b2da      	uxtb	r2, r3
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	611a      	str	r2, [r3, #16]
 80063ce:	e021      	b.n	8006414 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80063d0:	893b      	ldrh	r3, [r7, #8]
 80063d2:	0a1b      	lsrs	r3, r3, #8
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	b2da      	uxtb	r2, r3
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80063de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063e0:	6a39      	ldr	r1, [r7, #32]
 80063e2:	68f8      	ldr	r0, [r7, #12]
 80063e4:	f000 f9e6 	bl	80067b4 <I2C_WaitOnTXEFlagUntilTimeout>
 80063e8:	4603      	mov	r3, r0
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d00d      	beq.n	800640a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063f2:	2b04      	cmp	r3, #4
 80063f4:	d107      	bne.n	8006406 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	681a      	ldr	r2, [r3, #0]
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006404:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006406:	2301      	movs	r3, #1
 8006408:	e050      	b.n	80064ac <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800640a:	893b      	ldrh	r3, [r7, #8]
 800640c:	b2da      	uxtb	r2, r3
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006414:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006416:	6a39      	ldr	r1, [r7, #32]
 8006418:	68f8      	ldr	r0, [r7, #12]
 800641a:	f000 f9cb 	bl	80067b4 <I2C_WaitOnTXEFlagUntilTimeout>
 800641e:	4603      	mov	r3, r0
 8006420:	2b00      	cmp	r3, #0
 8006422:	d00d      	beq.n	8006440 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006428:	2b04      	cmp	r3, #4
 800642a:	d107      	bne.n	800643c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	681a      	ldr	r2, [r3, #0]
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800643a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800643c:	2301      	movs	r3, #1
 800643e:	e035      	b.n	80064ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	681a      	ldr	r2, [r3, #0]
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800644e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006452:	9300      	str	r3, [sp, #0]
 8006454:	6a3b      	ldr	r3, [r7, #32]
 8006456:	2200      	movs	r2, #0
 8006458:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800645c:	68f8      	ldr	r0, [r7, #12]
 800645e:	f000 f8d3 	bl	8006608 <I2C_WaitOnFlagUntilTimeout>
 8006462:	4603      	mov	r3, r0
 8006464:	2b00      	cmp	r3, #0
 8006466:	d00d      	beq.n	8006484 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006472:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006476:	d103      	bne.n	8006480 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800647e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006480:	2303      	movs	r3, #3
 8006482:	e013      	b.n	80064ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006484:	897b      	ldrh	r3, [r7, #10]
 8006486:	b2db      	uxtb	r3, r3
 8006488:	f043 0301 	orr.w	r3, r3, #1
 800648c:	b2da      	uxtb	r2, r3
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006496:	6a3a      	ldr	r2, [r7, #32]
 8006498:	4906      	ldr	r1, [pc, #24]	; (80064b4 <I2C_RequestMemoryRead+0x1cc>)
 800649a:	68f8      	ldr	r0, [r7, #12]
 800649c:	f000 f90b 	bl	80066b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80064a0:	4603      	mov	r3, r0
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d001      	beq.n	80064aa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80064a6:	2301      	movs	r3, #1
 80064a8:	e000      	b.n	80064ac <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80064aa:	2300      	movs	r3, #0
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	3718      	adds	r7, #24
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}
 80064b4:	00010002 	.word	0x00010002

080064b8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b086      	sub	sp, #24
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80064c0:	2300      	movs	r3, #0
 80064c2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064c8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064d0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80064d2:	4b4b      	ldr	r3, [pc, #300]	; (8006600 <I2C_DMAAbort+0x148>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	08db      	lsrs	r3, r3, #3
 80064d8:	4a4a      	ldr	r2, [pc, #296]	; (8006604 <I2C_DMAAbort+0x14c>)
 80064da:	fba2 2303 	umull	r2, r3, r2, r3
 80064de:	0a1a      	lsrs	r2, r3, #8
 80064e0:	4613      	mov	r3, r2
 80064e2:	009b      	lsls	r3, r3, #2
 80064e4:	4413      	add	r3, r2
 80064e6:	00da      	lsls	r2, r3, #3
 80064e8:	1ad3      	subs	r3, r2, r3
 80064ea:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d106      	bne.n	8006500 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064f6:	f043 0220 	orr.w	r2, r3, #32
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80064fe:	e00a      	b.n	8006516 <I2C_DMAAbort+0x5e>
    }
    count--;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	3b01      	subs	r3, #1
 8006504:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006510:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006514:	d0ea      	beq.n	80064ec <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800651a:	2b00      	cmp	r3, #0
 800651c:	d003      	beq.n	8006526 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006522:	2200      	movs	r2, #0
 8006524:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800652a:	2b00      	cmp	r3, #0
 800652c:	d003      	beq.n	8006536 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006532:	2200      	movs	r2, #0
 8006534:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	681a      	ldr	r2, [r3, #0]
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006544:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	2200      	movs	r2, #0
 800654a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006550:	2b00      	cmp	r3, #0
 8006552:	d003      	beq.n	800655c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006558:	2200      	movs	r2, #0
 800655a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800655c:	697b      	ldr	r3, [r7, #20]
 800655e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006560:	2b00      	cmp	r3, #0
 8006562:	d003      	beq.n	800656c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006568:	2200      	movs	r2, #0
 800656a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800656c:	697b      	ldr	r3, [r7, #20]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	681a      	ldr	r2, [r3, #0]
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f022 0201 	bic.w	r2, r2, #1
 800657a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006582:	b2db      	uxtb	r3, r3
 8006584:	2b60      	cmp	r3, #96	; 0x60
 8006586:	d10e      	bne.n	80065a6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	2220      	movs	r2, #32
 800658c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	2200      	movs	r2, #0
 8006594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	2200      	movs	r2, #0
 800659c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800659e:	6978      	ldr	r0, [r7, #20]
 80065a0:	f7fe fc9c 	bl	8004edc <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80065a4:	e027      	b.n	80065f6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80065a6:	7cfb      	ldrb	r3, [r7, #19]
 80065a8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80065ac:	2b28      	cmp	r3, #40	; 0x28
 80065ae:	d117      	bne.n	80065e0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	681a      	ldr	r2, [r3, #0]
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f042 0201 	orr.w	r2, r2, #1
 80065be:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	681a      	ldr	r2, [r3, #0]
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80065ce:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	2200      	movs	r2, #0
 80065d4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	2228      	movs	r2, #40	; 0x28
 80065da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80065de:	e007      	b.n	80065f0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	2220      	movs	r2, #32
 80065e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80065e8:	697b      	ldr	r3, [r7, #20]
 80065ea:	2200      	movs	r2, #0
 80065ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80065f0:	6978      	ldr	r0, [r7, #20]
 80065f2:	f7fe fc69 	bl	8004ec8 <HAL_I2C_ErrorCallback>
}
 80065f6:	bf00      	nop
 80065f8:	3718      	adds	r7, #24
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}
 80065fe:	bf00      	nop
 8006600:	20000008 	.word	0x20000008
 8006604:	14f8b589 	.word	0x14f8b589

08006608 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b084      	sub	sp, #16
 800660c:	af00      	add	r7, sp, #0
 800660e:	60f8      	str	r0, [r7, #12]
 8006610:	60b9      	str	r1, [r7, #8]
 8006612:	603b      	str	r3, [r7, #0]
 8006614:	4613      	mov	r3, r2
 8006616:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006618:	e025      	b.n	8006666 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006620:	d021      	beq.n	8006666 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006622:	f7fc fe5f 	bl	80032e4 <HAL_GetTick>
 8006626:	4602      	mov	r2, r0
 8006628:	69bb      	ldr	r3, [r7, #24]
 800662a:	1ad3      	subs	r3, r2, r3
 800662c:	683a      	ldr	r2, [r7, #0]
 800662e:	429a      	cmp	r2, r3
 8006630:	d302      	bcc.n	8006638 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d116      	bne.n	8006666 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	2200      	movs	r2, #0
 800663c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2220      	movs	r2, #32
 8006642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	2200      	movs	r2, #0
 800664a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006652:	f043 0220 	orr.w	r2, r3, #32
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	2200      	movs	r2, #0
 800665e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006662:	2301      	movs	r3, #1
 8006664:	e023      	b.n	80066ae <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	0c1b      	lsrs	r3, r3, #16
 800666a:	b2db      	uxtb	r3, r3
 800666c:	2b01      	cmp	r3, #1
 800666e:	d10d      	bne.n	800668c <I2C_WaitOnFlagUntilTimeout+0x84>
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	695b      	ldr	r3, [r3, #20]
 8006676:	43da      	mvns	r2, r3
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	4013      	ands	r3, r2
 800667c:	b29b      	uxth	r3, r3
 800667e:	2b00      	cmp	r3, #0
 8006680:	bf0c      	ite	eq
 8006682:	2301      	moveq	r3, #1
 8006684:	2300      	movne	r3, #0
 8006686:	b2db      	uxtb	r3, r3
 8006688:	461a      	mov	r2, r3
 800668a:	e00c      	b.n	80066a6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	699b      	ldr	r3, [r3, #24]
 8006692:	43da      	mvns	r2, r3
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	4013      	ands	r3, r2
 8006698:	b29b      	uxth	r3, r3
 800669a:	2b00      	cmp	r3, #0
 800669c:	bf0c      	ite	eq
 800669e:	2301      	moveq	r3, #1
 80066a0:	2300      	movne	r3, #0
 80066a2:	b2db      	uxtb	r3, r3
 80066a4:	461a      	mov	r2, r3
 80066a6:	79fb      	ldrb	r3, [r7, #7]
 80066a8:	429a      	cmp	r2, r3
 80066aa:	d0b6      	beq.n	800661a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80066ac:	2300      	movs	r3, #0
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3710      	adds	r7, #16
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}

080066b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80066b6:	b580      	push	{r7, lr}
 80066b8:	b084      	sub	sp, #16
 80066ba:	af00      	add	r7, sp, #0
 80066bc:	60f8      	str	r0, [r7, #12]
 80066be:	60b9      	str	r1, [r7, #8]
 80066c0:	607a      	str	r2, [r7, #4]
 80066c2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80066c4:	e051      	b.n	800676a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	695b      	ldr	r3, [r3, #20]
 80066cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066d4:	d123      	bne.n	800671e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	681a      	ldr	r2, [r3, #0]
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066e4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80066ee:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	2200      	movs	r2, #0
 80066f4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2220      	movs	r2, #32
 80066fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	2200      	movs	r2, #0
 8006702:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800670a:	f043 0204 	orr.w	r2, r3, #4
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2200      	movs	r2, #0
 8006716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800671a:	2301      	movs	r3, #1
 800671c:	e046      	b.n	80067ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006724:	d021      	beq.n	800676a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006726:	f7fc fddd 	bl	80032e4 <HAL_GetTick>
 800672a:	4602      	mov	r2, r0
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	1ad3      	subs	r3, r2, r3
 8006730:	687a      	ldr	r2, [r7, #4]
 8006732:	429a      	cmp	r2, r3
 8006734:	d302      	bcc.n	800673c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d116      	bne.n	800676a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2200      	movs	r2, #0
 8006740:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2220      	movs	r2, #32
 8006746:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	2200      	movs	r2, #0
 800674e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006756:	f043 0220 	orr.w	r2, r3, #32
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	2200      	movs	r2, #0
 8006762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006766:	2301      	movs	r3, #1
 8006768:	e020      	b.n	80067ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	0c1b      	lsrs	r3, r3, #16
 800676e:	b2db      	uxtb	r3, r3
 8006770:	2b01      	cmp	r3, #1
 8006772:	d10c      	bne.n	800678e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	695b      	ldr	r3, [r3, #20]
 800677a:	43da      	mvns	r2, r3
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	4013      	ands	r3, r2
 8006780:	b29b      	uxth	r3, r3
 8006782:	2b00      	cmp	r3, #0
 8006784:	bf14      	ite	ne
 8006786:	2301      	movne	r3, #1
 8006788:	2300      	moveq	r3, #0
 800678a:	b2db      	uxtb	r3, r3
 800678c:	e00b      	b.n	80067a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	699b      	ldr	r3, [r3, #24]
 8006794:	43da      	mvns	r2, r3
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	4013      	ands	r3, r2
 800679a:	b29b      	uxth	r3, r3
 800679c:	2b00      	cmp	r3, #0
 800679e:	bf14      	ite	ne
 80067a0:	2301      	movne	r3, #1
 80067a2:	2300      	moveq	r3, #0
 80067a4:	b2db      	uxtb	r3, r3
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d18d      	bne.n	80066c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80067aa:	2300      	movs	r3, #0
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	3710      	adds	r7, #16
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}

080067b4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b084      	sub	sp, #16
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	60f8      	str	r0, [r7, #12]
 80067bc:	60b9      	str	r1, [r7, #8]
 80067be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80067c0:	e02d      	b.n	800681e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80067c2:	68f8      	ldr	r0, [r7, #12]
 80067c4:	f000 f900 	bl	80069c8 <I2C_IsAcknowledgeFailed>
 80067c8:	4603      	mov	r3, r0
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d001      	beq.n	80067d2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80067ce:	2301      	movs	r3, #1
 80067d0:	e02d      	b.n	800682e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067d8:	d021      	beq.n	800681e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067da:	f7fc fd83 	bl	80032e4 <HAL_GetTick>
 80067de:	4602      	mov	r2, r0
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	1ad3      	subs	r3, r2, r3
 80067e4:	68ba      	ldr	r2, [r7, #8]
 80067e6:	429a      	cmp	r2, r3
 80067e8:	d302      	bcc.n	80067f0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d116      	bne.n	800681e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2200      	movs	r2, #0
 80067f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2220      	movs	r2, #32
 80067fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2200      	movs	r2, #0
 8006802:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800680a:	f043 0220 	orr.w	r2, r3, #32
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2200      	movs	r2, #0
 8006816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800681a:	2301      	movs	r3, #1
 800681c:	e007      	b.n	800682e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	695b      	ldr	r3, [r3, #20]
 8006824:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006828:	2b80      	cmp	r3, #128	; 0x80
 800682a:	d1ca      	bne.n	80067c2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800682c:	2300      	movs	r3, #0
}
 800682e:	4618      	mov	r0, r3
 8006830:	3710      	adds	r7, #16
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}

08006836 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006836:	b580      	push	{r7, lr}
 8006838:	b084      	sub	sp, #16
 800683a:	af00      	add	r7, sp, #0
 800683c:	60f8      	str	r0, [r7, #12]
 800683e:	60b9      	str	r1, [r7, #8]
 8006840:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006842:	e02d      	b.n	80068a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006844:	68f8      	ldr	r0, [r7, #12]
 8006846:	f000 f8bf 	bl	80069c8 <I2C_IsAcknowledgeFailed>
 800684a:	4603      	mov	r3, r0
 800684c:	2b00      	cmp	r3, #0
 800684e:	d001      	beq.n	8006854 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006850:	2301      	movs	r3, #1
 8006852:	e02d      	b.n	80068b0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800685a:	d021      	beq.n	80068a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800685c:	f7fc fd42 	bl	80032e4 <HAL_GetTick>
 8006860:	4602      	mov	r2, r0
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	1ad3      	subs	r3, r2, r3
 8006866:	68ba      	ldr	r2, [r7, #8]
 8006868:	429a      	cmp	r2, r3
 800686a:	d302      	bcc.n	8006872 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d116      	bne.n	80068a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2200      	movs	r2, #0
 8006876:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2220      	movs	r2, #32
 800687c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2200      	movs	r2, #0
 8006884:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800688c:	f043 0220 	orr.w	r2, r3, #32
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2200      	movs	r2, #0
 8006898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800689c:	2301      	movs	r3, #1
 800689e:	e007      	b.n	80068b0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	695b      	ldr	r3, [r3, #20]
 80068a6:	f003 0304 	and.w	r3, r3, #4
 80068aa:	2b04      	cmp	r3, #4
 80068ac:	d1ca      	bne.n	8006844 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80068ae:	2300      	movs	r3, #0
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	3710      	adds	r7, #16
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}

080068b8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b085      	sub	sp, #20
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80068c0:	2300      	movs	r3, #0
 80068c2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80068c4:	4b13      	ldr	r3, [pc, #76]	; (8006914 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	08db      	lsrs	r3, r3, #3
 80068ca:	4a13      	ldr	r2, [pc, #76]	; (8006918 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80068cc:	fba2 2303 	umull	r2, r3, r2, r3
 80068d0:	0a1a      	lsrs	r2, r3, #8
 80068d2:	4613      	mov	r3, r2
 80068d4:	009b      	lsls	r3, r3, #2
 80068d6:	4413      	add	r3, r2
 80068d8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	3b01      	subs	r3, #1
 80068de:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d107      	bne.n	80068f6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ea:	f043 0220 	orr.w	r2, r3, #32
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80068f2:	2301      	movs	r3, #1
 80068f4:	e008      	b.n	8006908 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006900:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006904:	d0e9      	beq.n	80068da <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8006906:	2300      	movs	r3, #0
}
 8006908:	4618      	mov	r0, r3
 800690a:	3714      	adds	r7, #20
 800690c:	46bd      	mov	sp, r7
 800690e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006912:	4770      	bx	lr
 8006914:	20000008 	.word	0x20000008
 8006918:	14f8b589 	.word	0x14f8b589

0800691c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b084      	sub	sp, #16
 8006920:	af00      	add	r7, sp, #0
 8006922:	60f8      	str	r0, [r7, #12]
 8006924:	60b9      	str	r1, [r7, #8]
 8006926:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006928:	e042      	b.n	80069b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	695b      	ldr	r3, [r3, #20]
 8006930:	f003 0310 	and.w	r3, r3, #16
 8006934:	2b10      	cmp	r3, #16
 8006936:	d119      	bne.n	800696c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f06f 0210 	mvn.w	r2, #16
 8006940:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	2200      	movs	r2, #0
 8006946:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2220      	movs	r2, #32
 800694c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2200      	movs	r2, #0
 8006954:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2200      	movs	r2, #0
 8006964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006968:	2301      	movs	r3, #1
 800696a:	e029      	b.n	80069c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800696c:	f7fc fcba 	bl	80032e4 <HAL_GetTick>
 8006970:	4602      	mov	r2, r0
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	1ad3      	subs	r3, r2, r3
 8006976:	68ba      	ldr	r2, [r7, #8]
 8006978:	429a      	cmp	r2, r3
 800697a:	d302      	bcc.n	8006982 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d116      	bne.n	80069b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	2200      	movs	r2, #0
 8006986:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	2220      	movs	r2, #32
 800698c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2200      	movs	r2, #0
 8006994:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800699c:	f043 0220 	orr.w	r2, r3, #32
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2200      	movs	r2, #0
 80069a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80069ac:	2301      	movs	r3, #1
 80069ae:	e007      	b.n	80069c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	695b      	ldr	r3, [r3, #20]
 80069b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069ba:	2b40      	cmp	r3, #64	; 0x40
 80069bc:	d1b5      	bne.n	800692a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80069be:	2300      	movs	r3, #0
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	3710      	adds	r7, #16
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}

080069c8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b083      	sub	sp, #12
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	695b      	ldr	r3, [r3, #20]
 80069d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069de:	d11b      	bne.n	8006a18 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80069e8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2200      	movs	r2, #0
 80069ee:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2220      	movs	r2, #32
 80069f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2200      	movs	r2, #0
 80069fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a04:	f043 0204 	orr.w	r2, r3, #4
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006a14:	2301      	movs	r3, #1
 8006a16:	e000      	b.n	8006a1a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006a18:	2300      	movs	r3, #0
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	370c      	adds	r7, #12
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a24:	4770      	bx	lr

08006a26 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006a26:	b480      	push	{r7}
 8006a28:	b083      	sub	sp, #12
 8006a2a:	af00      	add	r7, sp, #0
 8006a2c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a32:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006a36:	d103      	bne.n	8006a40 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2201      	movs	r2, #1
 8006a3c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006a3e:	e007      	b.n	8006a50 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a44:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006a48:	d102      	bne.n	8006a50 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2208      	movs	r2, #8
 8006a4e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006a50:	bf00      	nop
 8006a52:	370c      	adds	r7, #12
 8006a54:	46bd      	mov	sp, r7
 8006a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5a:	4770      	bx	lr

08006a5c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b086      	sub	sp, #24
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d101      	bne.n	8006a6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	e267      	b.n	8006f3e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f003 0301 	and.w	r3, r3, #1
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d075      	beq.n	8006b66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006a7a:	4b88      	ldr	r3, [pc, #544]	; (8006c9c <HAL_RCC_OscConfig+0x240>)
 8006a7c:	689b      	ldr	r3, [r3, #8]
 8006a7e:	f003 030c 	and.w	r3, r3, #12
 8006a82:	2b04      	cmp	r3, #4
 8006a84:	d00c      	beq.n	8006aa0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006a86:	4b85      	ldr	r3, [pc, #532]	; (8006c9c <HAL_RCC_OscConfig+0x240>)
 8006a88:	689b      	ldr	r3, [r3, #8]
 8006a8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006a8e:	2b08      	cmp	r3, #8
 8006a90:	d112      	bne.n	8006ab8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006a92:	4b82      	ldr	r3, [pc, #520]	; (8006c9c <HAL_RCC_OscConfig+0x240>)
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a9e:	d10b      	bne.n	8006ab8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006aa0:	4b7e      	ldr	r3, [pc, #504]	; (8006c9c <HAL_RCC_OscConfig+0x240>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d05b      	beq.n	8006b64 <HAL_RCC_OscConfig+0x108>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d157      	bne.n	8006b64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	e242      	b.n	8006f3e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ac0:	d106      	bne.n	8006ad0 <HAL_RCC_OscConfig+0x74>
 8006ac2:	4b76      	ldr	r3, [pc, #472]	; (8006c9c <HAL_RCC_OscConfig+0x240>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a75      	ldr	r2, [pc, #468]	; (8006c9c <HAL_RCC_OscConfig+0x240>)
 8006ac8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006acc:	6013      	str	r3, [r2, #0]
 8006ace:	e01d      	b.n	8006b0c <HAL_RCC_OscConfig+0xb0>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006ad8:	d10c      	bne.n	8006af4 <HAL_RCC_OscConfig+0x98>
 8006ada:	4b70      	ldr	r3, [pc, #448]	; (8006c9c <HAL_RCC_OscConfig+0x240>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a6f      	ldr	r2, [pc, #444]	; (8006c9c <HAL_RCC_OscConfig+0x240>)
 8006ae0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006ae4:	6013      	str	r3, [r2, #0]
 8006ae6:	4b6d      	ldr	r3, [pc, #436]	; (8006c9c <HAL_RCC_OscConfig+0x240>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a6c      	ldr	r2, [pc, #432]	; (8006c9c <HAL_RCC_OscConfig+0x240>)
 8006aec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006af0:	6013      	str	r3, [r2, #0]
 8006af2:	e00b      	b.n	8006b0c <HAL_RCC_OscConfig+0xb0>
 8006af4:	4b69      	ldr	r3, [pc, #420]	; (8006c9c <HAL_RCC_OscConfig+0x240>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a68      	ldr	r2, [pc, #416]	; (8006c9c <HAL_RCC_OscConfig+0x240>)
 8006afa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006afe:	6013      	str	r3, [r2, #0]
 8006b00:	4b66      	ldr	r3, [pc, #408]	; (8006c9c <HAL_RCC_OscConfig+0x240>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a65      	ldr	r2, [pc, #404]	; (8006c9c <HAL_RCC_OscConfig+0x240>)
 8006b06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d013      	beq.n	8006b3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b14:	f7fc fbe6 	bl	80032e4 <HAL_GetTick>
 8006b18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b1a:	e008      	b.n	8006b2e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b1c:	f7fc fbe2 	bl	80032e4 <HAL_GetTick>
 8006b20:	4602      	mov	r2, r0
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	1ad3      	subs	r3, r2, r3
 8006b26:	2b64      	cmp	r3, #100	; 0x64
 8006b28:	d901      	bls.n	8006b2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006b2a:	2303      	movs	r3, #3
 8006b2c:	e207      	b.n	8006f3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b2e:	4b5b      	ldr	r3, [pc, #364]	; (8006c9c <HAL_RCC_OscConfig+0x240>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d0f0      	beq.n	8006b1c <HAL_RCC_OscConfig+0xc0>
 8006b3a:	e014      	b.n	8006b66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b3c:	f7fc fbd2 	bl	80032e4 <HAL_GetTick>
 8006b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b42:	e008      	b.n	8006b56 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b44:	f7fc fbce 	bl	80032e4 <HAL_GetTick>
 8006b48:	4602      	mov	r2, r0
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	1ad3      	subs	r3, r2, r3
 8006b4e:	2b64      	cmp	r3, #100	; 0x64
 8006b50:	d901      	bls.n	8006b56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006b52:	2303      	movs	r3, #3
 8006b54:	e1f3      	b.n	8006f3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b56:	4b51      	ldr	r3, [pc, #324]	; (8006c9c <HAL_RCC_OscConfig+0x240>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d1f0      	bne.n	8006b44 <HAL_RCC_OscConfig+0xe8>
 8006b62:	e000      	b.n	8006b66 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f003 0302 	and.w	r3, r3, #2
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d063      	beq.n	8006c3a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006b72:	4b4a      	ldr	r3, [pc, #296]	; (8006c9c <HAL_RCC_OscConfig+0x240>)
 8006b74:	689b      	ldr	r3, [r3, #8]
 8006b76:	f003 030c 	and.w	r3, r3, #12
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d00b      	beq.n	8006b96 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006b7e:	4b47      	ldr	r3, [pc, #284]	; (8006c9c <HAL_RCC_OscConfig+0x240>)
 8006b80:	689b      	ldr	r3, [r3, #8]
 8006b82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006b86:	2b08      	cmp	r3, #8
 8006b88:	d11c      	bne.n	8006bc4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006b8a:	4b44      	ldr	r3, [pc, #272]	; (8006c9c <HAL_RCC_OscConfig+0x240>)
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d116      	bne.n	8006bc4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b96:	4b41      	ldr	r3, [pc, #260]	; (8006c9c <HAL_RCC_OscConfig+0x240>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f003 0302 	and.w	r3, r3, #2
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d005      	beq.n	8006bae <HAL_RCC_OscConfig+0x152>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	68db      	ldr	r3, [r3, #12]
 8006ba6:	2b01      	cmp	r3, #1
 8006ba8:	d001      	beq.n	8006bae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006baa:	2301      	movs	r3, #1
 8006bac:	e1c7      	b.n	8006f3e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bae:	4b3b      	ldr	r3, [pc, #236]	; (8006c9c <HAL_RCC_OscConfig+0x240>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	691b      	ldr	r3, [r3, #16]
 8006bba:	00db      	lsls	r3, r3, #3
 8006bbc:	4937      	ldr	r1, [pc, #220]	; (8006c9c <HAL_RCC_OscConfig+0x240>)
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006bc2:	e03a      	b.n	8006c3a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	68db      	ldr	r3, [r3, #12]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d020      	beq.n	8006c0e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006bcc:	4b34      	ldr	r3, [pc, #208]	; (8006ca0 <HAL_RCC_OscConfig+0x244>)
 8006bce:	2201      	movs	r2, #1
 8006bd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bd2:	f7fc fb87 	bl	80032e4 <HAL_GetTick>
 8006bd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006bd8:	e008      	b.n	8006bec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006bda:	f7fc fb83 	bl	80032e4 <HAL_GetTick>
 8006bde:	4602      	mov	r2, r0
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	1ad3      	subs	r3, r2, r3
 8006be4:	2b02      	cmp	r3, #2
 8006be6:	d901      	bls.n	8006bec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006be8:	2303      	movs	r3, #3
 8006bea:	e1a8      	b.n	8006f3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006bec:	4b2b      	ldr	r3, [pc, #172]	; (8006c9c <HAL_RCC_OscConfig+0x240>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f003 0302 	and.w	r3, r3, #2
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d0f0      	beq.n	8006bda <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bf8:	4b28      	ldr	r3, [pc, #160]	; (8006c9c <HAL_RCC_OscConfig+0x240>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	691b      	ldr	r3, [r3, #16]
 8006c04:	00db      	lsls	r3, r3, #3
 8006c06:	4925      	ldr	r1, [pc, #148]	; (8006c9c <HAL_RCC_OscConfig+0x240>)
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	600b      	str	r3, [r1, #0]
 8006c0c:	e015      	b.n	8006c3a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006c0e:	4b24      	ldr	r3, [pc, #144]	; (8006ca0 <HAL_RCC_OscConfig+0x244>)
 8006c10:	2200      	movs	r2, #0
 8006c12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c14:	f7fc fb66 	bl	80032e4 <HAL_GetTick>
 8006c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c1a:	e008      	b.n	8006c2e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c1c:	f7fc fb62 	bl	80032e4 <HAL_GetTick>
 8006c20:	4602      	mov	r2, r0
 8006c22:	693b      	ldr	r3, [r7, #16]
 8006c24:	1ad3      	subs	r3, r2, r3
 8006c26:	2b02      	cmp	r3, #2
 8006c28:	d901      	bls.n	8006c2e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006c2a:	2303      	movs	r3, #3
 8006c2c:	e187      	b.n	8006f3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c2e:	4b1b      	ldr	r3, [pc, #108]	; (8006c9c <HAL_RCC_OscConfig+0x240>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f003 0302 	and.w	r3, r3, #2
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d1f0      	bne.n	8006c1c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f003 0308 	and.w	r3, r3, #8
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d036      	beq.n	8006cb4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	695b      	ldr	r3, [r3, #20]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d016      	beq.n	8006c7c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006c4e:	4b15      	ldr	r3, [pc, #84]	; (8006ca4 <HAL_RCC_OscConfig+0x248>)
 8006c50:	2201      	movs	r2, #1
 8006c52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c54:	f7fc fb46 	bl	80032e4 <HAL_GetTick>
 8006c58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c5a:	e008      	b.n	8006c6e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006c5c:	f7fc fb42 	bl	80032e4 <HAL_GetTick>
 8006c60:	4602      	mov	r2, r0
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	1ad3      	subs	r3, r2, r3
 8006c66:	2b02      	cmp	r3, #2
 8006c68:	d901      	bls.n	8006c6e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006c6a:	2303      	movs	r3, #3
 8006c6c:	e167      	b.n	8006f3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c6e:	4b0b      	ldr	r3, [pc, #44]	; (8006c9c <HAL_RCC_OscConfig+0x240>)
 8006c70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c72:	f003 0302 	and.w	r3, r3, #2
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d0f0      	beq.n	8006c5c <HAL_RCC_OscConfig+0x200>
 8006c7a:	e01b      	b.n	8006cb4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006c7c:	4b09      	ldr	r3, [pc, #36]	; (8006ca4 <HAL_RCC_OscConfig+0x248>)
 8006c7e:	2200      	movs	r2, #0
 8006c80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c82:	f7fc fb2f 	bl	80032e4 <HAL_GetTick>
 8006c86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c88:	e00e      	b.n	8006ca8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006c8a:	f7fc fb2b 	bl	80032e4 <HAL_GetTick>
 8006c8e:	4602      	mov	r2, r0
 8006c90:	693b      	ldr	r3, [r7, #16]
 8006c92:	1ad3      	subs	r3, r2, r3
 8006c94:	2b02      	cmp	r3, #2
 8006c96:	d907      	bls.n	8006ca8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006c98:	2303      	movs	r3, #3
 8006c9a:	e150      	b.n	8006f3e <HAL_RCC_OscConfig+0x4e2>
 8006c9c:	40023800 	.word	0x40023800
 8006ca0:	42470000 	.word	0x42470000
 8006ca4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ca8:	4b88      	ldr	r3, [pc, #544]	; (8006ecc <HAL_RCC_OscConfig+0x470>)
 8006caa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cac:	f003 0302 	and.w	r3, r3, #2
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d1ea      	bne.n	8006c8a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f003 0304 	and.w	r3, r3, #4
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	f000 8097 	beq.w	8006df0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006cc6:	4b81      	ldr	r3, [pc, #516]	; (8006ecc <HAL_RCC_OscConfig+0x470>)
 8006cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d10f      	bne.n	8006cf2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	60bb      	str	r3, [r7, #8]
 8006cd6:	4b7d      	ldr	r3, [pc, #500]	; (8006ecc <HAL_RCC_OscConfig+0x470>)
 8006cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cda:	4a7c      	ldr	r2, [pc, #496]	; (8006ecc <HAL_RCC_OscConfig+0x470>)
 8006cdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ce0:	6413      	str	r3, [r2, #64]	; 0x40
 8006ce2:	4b7a      	ldr	r3, [pc, #488]	; (8006ecc <HAL_RCC_OscConfig+0x470>)
 8006ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ce6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cea:	60bb      	str	r3, [r7, #8]
 8006cec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006cee:	2301      	movs	r3, #1
 8006cf0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006cf2:	4b77      	ldr	r3, [pc, #476]	; (8006ed0 <HAL_RCC_OscConfig+0x474>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d118      	bne.n	8006d30 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006cfe:	4b74      	ldr	r3, [pc, #464]	; (8006ed0 <HAL_RCC_OscConfig+0x474>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a73      	ldr	r2, [pc, #460]	; (8006ed0 <HAL_RCC_OscConfig+0x474>)
 8006d04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006d0a:	f7fc faeb 	bl	80032e4 <HAL_GetTick>
 8006d0e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d10:	e008      	b.n	8006d24 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d12:	f7fc fae7 	bl	80032e4 <HAL_GetTick>
 8006d16:	4602      	mov	r2, r0
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	1ad3      	subs	r3, r2, r3
 8006d1c:	2b02      	cmp	r3, #2
 8006d1e:	d901      	bls.n	8006d24 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006d20:	2303      	movs	r3, #3
 8006d22:	e10c      	b.n	8006f3e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d24:	4b6a      	ldr	r3, [pc, #424]	; (8006ed0 <HAL_RCC_OscConfig+0x474>)
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d0f0      	beq.n	8006d12 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	689b      	ldr	r3, [r3, #8]
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	d106      	bne.n	8006d46 <HAL_RCC_OscConfig+0x2ea>
 8006d38:	4b64      	ldr	r3, [pc, #400]	; (8006ecc <HAL_RCC_OscConfig+0x470>)
 8006d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d3c:	4a63      	ldr	r2, [pc, #396]	; (8006ecc <HAL_RCC_OscConfig+0x470>)
 8006d3e:	f043 0301 	orr.w	r3, r3, #1
 8006d42:	6713      	str	r3, [r2, #112]	; 0x70
 8006d44:	e01c      	b.n	8006d80 <HAL_RCC_OscConfig+0x324>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	689b      	ldr	r3, [r3, #8]
 8006d4a:	2b05      	cmp	r3, #5
 8006d4c:	d10c      	bne.n	8006d68 <HAL_RCC_OscConfig+0x30c>
 8006d4e:	4b5f      	ldr	r3, [pc, #380]	; (8006ecc <HAL_RCC_OscConfig+0x470>)
 8006d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d52:	4a5e      	ldr	r2, [pc, #376]	; (8006ecc <HAL_RCC_OscConfig+0x470>)
 8006d54:	f043 0304 	orr.w	r3, r3, #4
 8006d58:	6713      	str	r3, [r2, #112]	; 0x70
 8006d5a:	4b5c      	ldr	r3, [pc, #368]	; (8006ecc <HAL_RCC_OscConfig+0x470>)
 8006d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d5e:	4a5b      	ldr	r2, [pc, #364]	; (8006ecc <HAL_RCC_OscConfig+0x470>)
 8006d60:	f043 0301 	orr.w	r3, r3, #1
 8006d64:	6713      	str	r3, [r2, #112]	; 0x70
 8006d66:	e00b      	b.n	8006d80 <HAL_RCC_OscConfig+0x324>
 8006d68:	4b58      	ldr	r3, [pc, #352]	; (8006ecc <HAL_RCC_OscConfig+0x470>)
 8006d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d6c:	4a57      	ldr	r2, [pc, #348]	; (8006ecc <HAL_RCC_OscConfig+0x470>)
 8006d6e:	f023 0301 	bic.w	r3, r3, #1
 8006d72:	6713      	str	r3, [r2, #112]	; 0x70
 8006d74:	4b55      	ldr	r3, [pc, #340]	; (8006ecc <HAL_RCC_OscConfig+0x470>)
 8006d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d78:	4a54      	ldr	r2, [pc, #336]	; (8006ecc <HAL_RCC_OscConfig+0x470>)
 8006d7a:	f023 0304 	bic.w	r3, r3, #4
 8006d7e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	689b      	ldr	r3, [r3, #8]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d015      	beq.n	8006db4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d88:	f7fc faac 	bl	80032e4 <HAL_GetTick>
 8006d8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d8e:	e00a      	b.n	8006da6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006d90:	f7fc faa8 	bl	80032e4 <HAL_GetTick>
 8006d94:	4602      	mov	r2, r0
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	1ad3      	subs	r3, r2, r3
 8006d9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d901      	bls.n	8006da6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006da2:	2303      	movs	r3, #3
 8006da4:	e0cb      	b.n	8006f3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006da6:	4b49      	ldr	r3, [pc, #292]	; (8006ecc <HAL_RCC_OscConfig+0x470>)
 8006da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006daa:	f003 0302 	and.w	r3, r3, #2
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d0ee      	beq.n	8006d90 <HAL_RCC_OscConfig+0x334>
 8006db2:	e014      	b.n	8006dde <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006db4:	f7fc fa96 	bl	80032e4 <HAL_GetTick>
 8006db8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006dba:	e00a      	b.n	8006dd2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006dbc:	f7fc fa92 	bl	80032e4 <HAL_GetTick>
 8006dc0:	4602      	mov	r2, r0
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	1ad3      	subs	r3, r2, r3
 8006dc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d901      	bls.n	8006dd2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006dce:	2303      	movs	r3, #3
 8006dd0:	e0b5      	b.n	8006f3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006dd2:	4b3e      	ldr	r3, [pc, #248]	; (8006ecc <HAL_RCC_OscConfig+0x470>)
 8006dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dd6:	f003 0302 	and.w	r3, r3, #2
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d1ee      	bne.n	8006dbc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006dde:	7dfb      	ldrb	r3, [r7, #23]
 8006de0:	2b01      	cmp	r3, #1
 8006de2:	d105      	bne.n	8006df0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006de4:	4b39      	ldr	r3, [pc, #228]	; (8006ecc <HAL_RCC_OscConfig+0x470>)
 8006de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006de8:	4a38      	ldr	r2, [pc, #224]	; (8006ecc <HAL_RCC_OscConfig+0x470>)
 8006dea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006dee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	699b      	ldr	r3, [r3, #24]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	f000 80a1 	beq.w	8006f3c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006dfa:	4b34      	ldr	r3, [pc, #208]	; (8006ecc <HAL_RCC_OscConfig+0x470>)
 8006dfc:	689b      	ldr	r3, [r3, #8]
 8006dfe:	f003 030c 	and.w	r3, r3, #12
 8006e02:	2b08      	cmp	r3, #8
 8006e04:	d05c      	beq.n	8006ec0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	699b      	ldr	r3, [r3, #24]
 8006e0a:	2b02      	cmp	r3, #2
 8006e0c:	d141      	bne.n	8006e92 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e0e:	4b31      	ldr	r3, [pc, #196]	; (8006ed4 <HAL_RCC_OscConfig+0x478>)
 8006e10:	2200      	movs	r2, #0
 8006e12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e14:	f7fc fa66 	bl	80032e4 <HAL_GetTick>
 8006e18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e1a:	e008      	b.n	8006e2e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e1c:	f7fc fa62 	bl	80032e4 <HAL_GetTick>
 8006e20:	4602      	mov	r2, r0
 8006e22:	693b      	ldr	r3, [r7, #16]
 8006e24:	1ad3      	subs	r3, r2, r3
 8006e26:	2b02      	cmp	r3, #2
 8006e28:	d901      	bls.n	8006e2e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006e2a:	2303      	movs	r3, #3
 8006e2c:	e087      	b.n	8006f3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e2e:	4b27      	ldr	r3, [pc, #156]	; (8006ecc <HAL_RCC_OscConfig+0x470>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d1f0      	bne.n	8006e1c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	69da      	ldr	r2, [r3, #28]
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6a1b      	ldr	r3, [r3, #32]
 8006e42:	431a      	orrs	r2, r3
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e48:	019b      	lsls	r3, r3, #6
 8006e4a:	431a      	orrs	r2, r3
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e50:	085b      	lsrs	r3, r3, #1
 8006e52:	3b01      	subs	r3, #1
 8006e54:	041b      	lsls	r3, r3, #16
 8006e56:	431a      	orrs	r2, r3
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e5c:	061b      	lsls	r3, r3, #24
 8006e5e:	491b      	ldr	r1, [pc, #108]	; (8006ecc <HAL_RCC_OscConfig+0x470>)
 8006e60:	4313      	orrs	r3, r2
 8006e62:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006e64:	4b1b      	ldr	r3, [pc, #108]	; (8006ed4 <HAL_RCC_OscConfig+0x478>)
 8006e66:	2201      	movs	r2, #1
 8006e68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e6a:	f7fc fa3b 	bl	80032e4 <HAL_GetTick>
 8006e6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e70:	e008      	b.n	8006e84 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e72:	f7fc fa37 	bl	80032e4 <HAL_GetTick>
 8006e76:	4602      	mov	r2, r0
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	1ad3      	subs	r3, r2, r3
 8006e7c:	2b02      	cmp	r3, #2
 8006e7e:	d901      	bls.n	8006e84 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006e80:	2303      	movs	r3, #3
 8006e82:	e05c      	b.n	8006f3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e84:	4b11      	ldr	r3, [pc, #68]	; (8006ecc <HAL_RCC_OscConfig+0x470>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d0f0      	beq.n	8006e72 <HAL_RCC_OscConfig+0x416>
 8006e90:	e054      	b.n	8006f3c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e92:	4b10      	ldr	r3, [pc, #64]	; (8006ed4 <HAL_RCC_OscConfig+0x478>)
 8006e94:	2200      	movs	r2, #0
 8006e96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e98:	f7fc fa24 	bl	80032e4 <HAL_GetTick>
 8006e9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e9e:	e008      	b.n	8006eb2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ea0:	f7fc fa20 	bl	80032e4 <HAL_GetTick>
 8006ea4:	4602      	mov	r2, r0
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	1ad3      	subs	r3, r2, r3
 8006eaa:	2b02      	cmp	r3, #2
 8006eac:	d901      	bls.n	8006eb2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006eae:	2303      	movs	r3, #3
 8006eb0:	e045      	b.n	8006f3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006eb2:	4b06      	ldr	r3, [pc, #24]	; (8006ecc <HAL_RCC_OscConfig+0x470>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d1f0      	bne.n	8006ea0 <HAL_RCC_OscConfig+0x444>
 8006ebe:	e03d      	b.n	8006f3c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	699b      	ldr	r3, [r3, #24]
 8006ec4:	2b01      	cmp	r3, #1
 8006ec6:	d107      	bne.n	8006ed8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006ec8:	2301      	movs	r3, #1
 8006eca:	e038      	b.n	8006f3e <HAL_RCC_OscConfig+0x4e2>
 8006ecc:	40023800 	.word	0x40023800
 8006ed0:	40007000 	.word	0x40007000
 8006ed4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006ed8:	4b1b      	ldr	r3, [pc, #108]	; (8006f48 <HAL_RCC_OscConfig+0x4ec>)
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	699b      	ldr	r3, [r3, #24]
 8006ee2:	2b01      	cmp	r3, #1
 8006ee4:	d028      	beq.n	8006f38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ef0:	429a      	cmp	r2, r3
 8006ef2:	d121      	bne.n	8006f38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006efe:	429a      	cmp	r2, r3
 8006f00:	d11a      	bne.n	8006f38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006f02:	68fa      	ldr	r2, [r7, #12]
 8006f04:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006f08:	4013      	ands	r3, r2
 8006f0a:	687a      	ldr	r2, [r7, #4]
 8006f0c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006f0e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d111      	bne.n	8006f38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f1e:	085b      	lsrs	r3, r3, #1
 8006f20:	3b01      	subs	r3, #1
 8006f22:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006f24:	429a      	cmp	r2, r3
 8006f26:	d107      	bne.n	8006f38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f32:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006f34:	429a      	cmp	r2, r3
 8006f36:	d001      	beq.n	8006f3c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006f38:	2301      	movs	r3, #1
 8006f3a:	e000      	b.n	8006f3e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006f3c:	2300      	movs	r3, #0
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	3718      	adds	r7, #24
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}
 8006f46:	bf00      	nop
 8006f48:	40023800 	.word	0x40023800

08006f4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b084      	sub	sp, #16
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
 8006f54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d101      	bne.n	8006f60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	e0cc      	b.n	80070fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006f60:	4b68      	ldr	r3, [pc, #416]	; (8007104 <HAL_RCC_ClockConfig+0x1b8>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f003 0307 	and.w	r3, r3, #7
 8006f68:	683a      	ldr	r2, [r7, #0]
 8006f6a:	429a      	cmp	r2, r3
 8006f6c:	d90c      	bls.n	8006f88 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f6e:	4b65      	ldr	r3, [pc, #404]	; (8007104 <HAL_RCC_ClockConfig+0x1b8>)
 8006f70:	683a      	ldr	r2, [r7, #0]
 8006f72:	b2d2      	uxtb	r2, r2
 8006f74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f76:	4b63      	ldr	r3, [pc, #396]	; (8007104 <HAL_RCC_ClockConfig+0x1b8>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f003 0307 	and.w	r3, r3, #7
 8006f7e:	683a      	ldr	r2, [r7, #0]
 8006f80:	429a      	cmp	r2, r3
 8006f82:	d001      	beq.n	8006f88 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006f84:	2301      	movs	r3, #1
 8006f86:	e0b8      	b.n	80070fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f003 0302 	and.w	r3, r3, #2
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d020      	beq.n	8006fd6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f003 0304 	and.w	r3, r3, #4
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d005      	beq.n	8006fac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006fa0:	4b59      	ldr	r3, [pc, #356]	; (8007108 <HAL_RCC_ClockConfig+0x1bc>)
 8006fa2:	689b      	ldr	r3, [r3, #8]
 8006fa4:	4a58      	ldr	r2, [pc, #352]	; (8007108 <HAL_RCC_ClockConfig+0x1bc>)
 8006fa6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006faa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f003 0308 	and.w	r3, r3, #8
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d005      	beq.n	8006fc4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006fb8:	4b53      	ldr	r3, [pc, #332]	; (8007108 <HAL_RCC_ClockConfig+0x1bc>)
 8006fba:	689b      	ldr	r3, [r3, #8]
 8006fbc:	4a52      	ldr	r2, [pc, #328]	; (8007108 <HAL_RCC_ClockConfig+0x1bc>)
 8006fbe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006fc2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006fc4:	4b50      	ldr	r3, [pc, #320]	; (8007108 <HAL_RCC_ClockConfig+0x1bc>)
 8006fc6:	689b      	ldr	r3, [r3, #8]
 8006fc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	689b      	ldr	r3, [r3, #8]
 8006fd0:	494d      	ldr	r1, [pc, #308]	; (8007108 <HAL_RCC_ClockConfig+0x1bc>)
 8006fd2:	4313      	orrs	r3, r2
 8006fd4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f003 0301 	and.w	r3, r3, #1
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d044      	beq.n	800706c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	2b01      	cmp	r3, #1
 8006fe8:	d107      	bne.n	8006ffa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006fea:	4b47      	ldr	r3, [pc, #284]	; (8007108 <HAL_RCC_ClockConfig+0x1bc>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d119      	bne.n	800702a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	e07f      	b.n	80070fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	2b02      	cmp	r3, #2
 8007000:	d003      	beq.n	800700a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007006:	2b03      	cmp	r3, #3
 8007008:	d107      	bne.n	800701a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800700a:	4b3f      	ldr	r3, [pc, #252]	; (8007108 <HAL_RCC_ClockConfig+0x1bc>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007012:	2b00      	cmp	r3, #0
 8007014:	d109      	bne.n	800702a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007016:	2301      	movs	r3, #1
 8007018:	e06f      	b.n	80070fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800701a:	4b3b      	ldr	r3, [pc, #236]	; (8007108 <HAL_RCC_ClockConfig+0x1bc>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f003 0302 	and.w	r3, r3, #2
 8007022:	2b00      	cmp	r3, #0
 8007024:	d101      	bne.n	800702a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007026:	2301      	movs	r3, #1
 8007028:	e067      	b.n	80070fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800702a:	4b37      	ldr	r3, [pc, #220]	; (8007108 <HAL_RCC_ClockConfig+0x1bc>)
 800702c:	689b      	ldr	r3, [r3, #8]
 800702e:	f023 0203 	bic.w	r2, r3, #3
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	4934      	ldr	r1, [pc, #208]	; (8007108 <HAL_RCC_ClockConfig+0x1bc>)
 8007038:	4313      	orrs	r3, r2
 800703a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800703c:	f7fc f952 	bl	80032e4 <HAL_GetTick>
 8007040:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007042:	e00a      	b.n	800705a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007044:	f7fc f94e 	bl	80032e4 <HAL_GetTick>
 8007048:	4602      	mov	r2, r0
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	1ad3      	subs	r3, r2, r3
 800704e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007052:	4293      	cmp	r3, r2
 8007054:	d901      	bls.n	800705a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007056:	2303      	movs	r3, #3
 8007058:	e04f      	b.n	80070fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800705a:	4b2b      	ldr	r3, [pc, #172]	; (8007108 <HAL_RCC_ClockConfig+0x1bc>)
 800705c:	689b      	ldr	r3, [r3, #8]
 800705e:	f003 020c 	and.w	r2, r3, #12
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	685b      	ldr	r3, [r3, #4]
 8007066:	009b      	lsls	r3, r3, #2
 8007068:	429a      	cmp	r2, r3
 800706a:	d1eb      	bne.n	8007044 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800706c:	4b25      	ldr	r3, [pc, #148]	; (8007104 <HAL_RCC_ClockConfig+0x1b8>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f003 0307 	and.w	r3, r3, #7
 8007074:	683a      	ldr	r2, [r7, #0]
 8007076:	429a      	cmp	r2, r3
 8007078:	d20c      	bcs.n	8007094 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800707a:	4b22      	ldr	r3, [pc, #136]	; (8007104 <HAL_RCC_ClockConfig+0x1b8>)
 800707c:	683a      	ldr	r2, [r7, #0]
 800707e:	b2d2      	uxtb	r2, r2
 8007080:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007082:	4b20      	ldr	r3, [pc, #128]	; (8007104 <HAL_RCC_ClockConfig+0x1b8>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f003 0307 	and.w	r3, r3, #7
 800708a:	683a      	ldr	r2, [r7, #0]
 800708c:	429a      	cmp	r2, r3
 800708e:	d001      	beq.n	8007094 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007090:	2301      	movs	r3, #1
 8007092:	e032      	b.n	80070fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f003 0304 	and.w	r3, r3, #4
 800709c:	2b00      	cmp	r3, #0
 800709e:	d008      	beq.n	80070b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80070a0:	4b19      	ldr	r3, [pc, #100]	; (8007108 <HAL_RCC_ClockConfig+0x1bc>)
 80070a2:	689b      	ldr	r3, [r3, #8]
 80070a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	68db      	ldr	r3, [r3, #12]
 80070ac:	4916      	ldr	r1, [pc, #88]	; (8007108 <HAL_RCC_ClockConfig+0x1bc>)
 80070ae:	4313      	orrs	r3, r2
 80070b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f003 0308 	and.w	r3, r3, #8
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d009      	beq.n	80070d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80070be:	4b12      	ldr	r3, [pc, #72]	; (8007108 <HAL_RCC_ClockConfig+0x1bc>)
 80070c0:	689b      	ldr	r3, [r3, #8]
 80070c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	691b      	ldr	r3, [r3, #16]
 80070ca:	00db      	lsls	r3, r3, #3
 80070cc:	490e      	ldr	r1, [pc, #56]	; (8007108 <HAL_RCC_ClockConfig+0x1bc>)
 80070ce:	4313      	orrs	r3, r2
 80070d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80070d2:	f000 f821 	bl	8007118 <HAL_RCC_GetSysClockFreq>
 80070d6:	4602      	mov	r2, r0
 80070d8:	4b0b      	ldr	r3, [pc, #44]	; (8007108 <HAL_RCC_ClockConfig+0x1bc>)
 80070da:	689b      	ldr	r3, [r3, #8]
 80070dc:	091b      	lsrs	r3, r3, #4
 80070de:	f003 030f 	and.w	r3, r3, #15
 80070e2:	490a      	ldr	r1, [pc, #40]	; (800710c <HAL_RCC_ClockConfig+0x1c0>)
 80070e4:	5ccb      	ldrb	r3, [r1, r3]
 80070e6:	fa22 f303 	lsr.w	r3, r2, r3
 80070ea:	4a09      	ldr	r2, [pc, #36]	; (8007110 <HAL_RCC_ClockConfig+0x1c4>)
 80070ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80070ee:	4b09      	ldr	r3, [pc, #36]	; (8007114 <HAL_RCC_ClockConfig+0x1c8>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4618      	mov	r0, r3
 80070f4:	f7fc f8b2 	bl	800325c <HAL_InitTick>

  return HAL_OK;
 80070f8:	2300      	movs	r3, #0
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3710      	adds	r7, #16
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}
 8007102:	bf00      	nop
 8007104:	40023c00 	.word	0x40023c00
 8007108:	40023800 	.word	0x40023800
 800710c:	0800c310 	.word	0x0800c310
 8007110:	20000008 	.word	0x20000008
 8007114:	2000001c 	.word	0x2000001c

08007118 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007118:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800711c:	b094      	sub	sp, #80	; 0x50
 800711e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007120:	2300      	movs	r3, #0
 8007122:	647b      	str	r3, [r7, #68]	; 0x44
 8007124:	2300      	movs	r3, #0
 8007126:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007128:	2300      	movs	r3, #0
 800712a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800712c:	2300      	movs	r3, #0
 800712e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007130:	4b79      	ldr	r3, [pc, #484]	; (8007318 <HAL_RCC_GetSysClockFreq+0x200>)
 8007132:	689b      	ldr	r3, [r3, #8]
 8007134:	f003 030c 	and.w	r3, r3, #12
 8007138:	2b08      	cmp	r3, #8
 800713a:	d00d      	beq.n	8007158 <HAL_RCC_GetSysClockFreq+0x40>
 800713c:	2b08      	cmp	r3, #8
 800713e:	f200 80e1 	bhi.w	8007304 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007142:	2b00      	cmp	r3, #0
 8007144:	d002      	beq.n	800714c <HAL_RCC_GetSysClockFreq+0x34>
 8007146:	2b04      	cmp	r3, #4
 8007148:	d003      	beq.n	8007152 <HAL_RCC_GetSysClockFreq+0x3a>
 800714a:	e0db      	b.n	8007304 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800714c:	4b73      	ldr	r3, [pc, #460]	; (800731c <HAL_RCC_GetSysClockFreq+0x204>)
 800714e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8007150:	e0db      	b.n	800730a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007152:	4b73      	ldr	r3, [pc, #460]	; (8007320 <HAL_RCC_GetSysClockFreq+0x208>)
 8007154:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007156:	e0d8      	b.n	800730a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007158:	4b6f      	ldr	r3, [pc, #444]	; (8007318 <HAL_RCC_GetSysClockFreq+0x200>)
 800715a:	685b      	ldr	r3, [r3, #4]
 800715c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007160:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007162:	4b6d      	ldr	r3, [pc, #436]	; (8007318 <HAL_RCC_GetSysClockFreq+0x200>)
 8007164:	685b      	ldr	r3, [r3, #4]
 8007166:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800716a:	2b00      	cmp	r3, #0
 800716c:	d063      	beq.n	8007236 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800716e:	4b6a      	ldr	r3, [pc, #424]	; (8007318 <HAL_RCC_GetSysClockFreq+0x200>)
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	099b      	lsrs	r3, r3, #6
 8007174:	2200      	movs	r2, #0
 8007176:	63bb      	str	r3, [r7, #56]	; 0x38
 8007178:	63fa      	str	r2, [r7, #60]	; 0x3c
 800717a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800717c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007180:	633b      	str	r3, [r7, #48]	; 0x30
 8007182:	2300      	movs	r3, #0
 8007184:	637b      	str	r3, [r7, #52]	; 0x34
 8007186:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800718a:	4622      	mov	r2, r4
 800718c:	462b      	mov	r3, r5
 800718e:	f04f 0000 	mov.w	r0, #0
 8007192:	f04f 0100 	mov.w	r1, #0
 8007196:	0159      	lsls	r1, r3, #5
 8007198:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800719c:	0150      	lsls	r0, r2, #5
 800719e:	4602      	mov	r2, r0
 80071a0:	460b      	mov	r3, r1
 80071a2:	4621      	mov	r1, r4
 80071a4:	1a51      	subs	r1, r2, r1
 80071a6:	6139      	str	r1, [r7, #16]
 80071a8:	4629      	mov	r1, r5
 80071aa:	eb63 0301 	sbc.w	r3, r3, r1
 80071ae:	617b      	str	r3, [r7, #20]
 80071b0:	f04f 0200 	mov.w	r2, #0
 80071b4:	f04f 0300 	mov.w	r3, #0
 80071b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80071bc:	4659      	mov	r1, fp
 80071be:	018b      	lsls	r3, r1, #6
 80071c0:	4651      	mov	r1, sl
 80071c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80071c6:	4651      	mov	r1, sl
 80071c8:	018a      	lsls	r2, r1, #6
 80071ca:	4651      	mov	r1, sl
 80071cc:	ebb2 0801 	subs.w	r8, r2, r1
 80071d0:	4659      	mov	r1, fp
 80071d2:	eb63 0901 	sbc.w	r9, r3, r1
 80071d6:	f04f 0200 	mov.w	r2, #0
 80071da:	f04f 0300 	mov.w	r3, #0
 80071de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80071e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80071e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80071ea:	4690      	mov	r8, r2
 80071ec:	4699      	mov	r9, r3
 80071ee:	4623      	mov	r3, r4
 80071f0:	eb18 0303 	adds.w	r3, r8, r3
 80071f4:	60bb      	str	r3, [r7, #8]
 80071f6:	462b      	mov	r3, r5
 80071f8:	eb49 0303 	adc.w	r3, r9, r3
 80071fc:	60fb      	str	r3, [r7, #12]
 80071fe:	f04f 0200 	mov.w	r2, #0
 8007202:	f04f 0300 	mov.w	r3, #0
 8007206:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800720a:	4629      	mov	r1, r5
 800720c:	024b      	lsls	r3, r1, #9
 800720e:	4621      	mov	r1, r4
 8007210:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007214:	4621      	mov	r1, r4
 8007216:	024a      	lsls	r2, r1, #9
 8007218:	4610      	mov	r0, r2
 800721a:	4619      	mov	r1, r3
 800721c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800721e:	2200      	movs	r2, #0
 8007220:	62bb      	str	r3, [r7, #40]	; 0x28
 8007222:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007224:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007228:	f7f9 fd36 	bl	8000c98 <__aeabi_uldivmod>
 800722c:	4602      	mov	r2, r0
 800722e:	460b      	mov	r3, r1
 8007230:	4613      	mov	r3, r2
 8007232:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007234:	e058      	b.n	80072e8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007236:	4b38      	ldr	r3, [pc, #224]	; (8007318 <HAL_RCC_GetSysClockFreq+0x200>)
 8007238:	685b      	ldr	r3, [r3, #4]
 800723a:	099b      	lsrs	r3, r3, #6
 800723c:	2200      	movs	r2, #0
 800723e:	4618      	mov	r0, r3
 8007240:	4611      	mov	r1, r2
 8007242:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007246:	623b      	str	r3, [r7, #32]
 8007248:	2300      	movs	r3, #0
 800724a:	627b      	str	r3, [r7, #36]	; 0x24
 800724c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007250:	4642      	mov	r2, r8
 8007252:	464b      	mov	r3, r9
 8007254:	f04f 0000 	mov.w	r0, #0
 8007258:	f04f 0100 	mov.w	r1, #0
 800725c:	0159      	lsls	r1, r3, #5
 800725e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007262:	0150      	lsls	r0, r2, #5
 8007264:	4602      	mov	r2, r0
 8007266:	460b      	mov	r3, r1
 8007268:	4641      	mov	r1, r8
 800726a:	ebb2 0a01 	subs.w	sl, r2, r1
 800726e:	4649      	mov	r1, r9
 8007270:	eb63 0b01 	sbc.w	fp, r3, r1
 8007274:	f04f 0200 	mov.w	r2, #0
 8007278:	f04f 0300 	mov.w	r3, #0
 800727c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007280:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007284:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007288:	ebb2 040a 	subs.w	r4, r2, sl
 800728c:	eb63 050b 	sbc.w	r5, r3, fp
 8007290:	f04f 0200 	mov.w	r2, #0
 8007294:	f04f 0300 	mov.w	r3, #0
 8007298:	00eb      	lsls	r3, r5, #3
 800729a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800729e:	00e2      	lsls	r2, r4, #3
 80072a0:	4614      	mov	r4, r2
 80072a2:	461d      	mov	r5, r3
 80072a4:	4643      	mov	r3, r8
 80072a6:	18e3      	adds	r3, r4, r3
 80072a8:	603b      	str	r3, [r7, #0]
 80072aa:	464b      	mov	r3, r9
 80072ac:	eb45 0303 	adc.w	r3, r5, r3
 80072b0:	607b      	str	r3, [r7, #4]
 80072b2:	f04f 0200 	mov.w	r2, #0
 80072b6:	f04f 0300 	mov.w	r3, #0
 80072ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80072be:	4629      	mov	r1, r5
 80072c0:	028b      	lsls	r3, r1, #10
 80072c2:	4621      	mov	r1, r4
 80072c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80072c8:	4621      	mov	r1, r4
 80072ca:	028a      	lsls	r2, r1, #10
 80072cc:	4610      	mov	r0, r2
 80072ce:	4619      	mov	r1, r3
 80072d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072d2:	2200      	movs	r2, #0
 80072d4:	61bb      	str	r3, [r7, #24]
 80072d6:	61fa      	str	r2, [r7, #28]
 80072d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80072dc:	f7f9 fcdc 	bl	8000c98 <__aeabi_uldivmod>
 80072e0:	4602      	mov	r2, r0
 80072e2:	460b      	mov	r3, r1
 80072e4:	4613      	mov	r3, r2
 80072e6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80072e8:	4b0b      	ldr	r3, [pc, #44]	; (8007318 <HAL_RCC_GetSysClockFreq+0x200>)
 80072ea:	685b      	ldr	r3, [r3, #4]
 80072ec:	0c1b      	lsrs	r3, r3, #16
 80072ee:	f003 0303 	and.w	r3, r3, #3
 80072f2:	3301      	adds	r3, #1
 80072f4:	005b      	lsls	r3, r3, #1
 80072f6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80072f8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80072fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007300:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007302:	e002      	b.n	800730a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007304:	4b05      	ldr	r3, [pc, #20]	; (800731c <HAL_RCC_GetSysClockFreq+0x204>)
 8007306:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007308:	bf00      	nop
    }
  }
  return sysclockfreq;
 800730a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800730c:	4618      	mov	r0, r3
 800730e:	3750      	adds	r7, #80	; 0x50
 8007310:	46bd      	mov	sp, r7
 8007312:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007316:	bf00      	nop
 8007318:	40023800 	.word	0x40023800
 800731c:	00f42400 	.word	0x00f42400
 8007320:	007a1200 	.word	0x007a1200

08007324 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007324:	b480      	push	{r7}
 8007326:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007328:	4b03      	ldr	r3, [pc, #12]	; (8007338 <HAL_RCC_GetHCLKFreq+0x14>)
 800732a:	681b      	ldr	r3, [r3, #0]
}
 800732c:	4618      	mov	r0, r3
 800732e:	46bd      	mov	sp, r7
 8007330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007334:	4770      	bx	lr
 8007336:	bf00      	nop
 8007338:	20000008 	.word	0x20000008

0800733c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007340:	f7ff fff0 	bl	8007324 <HAL_RCC_GetHCLKFreq>
 8007344:	4602      	mov	r2, r0
 8007346:	4b05      	ldr	r3, [pc, #20]	; (800735c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007348:	689b      	ldr	r3, [r3, #8]
 800734a:	0a9b      	lsrs	r3, r3, #10
 800734c:	f003 0307 	and.w	r3, r3, #7
 8007350:	4903      	ldr	r1, [pc, #12]	; (8007360 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007352:	5ccb      	ldrb	r3, [r1, r3]
 8007354:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007358:	4618      	mov	r0, r3
 800735a:	bd80      	pop	{r7, pc}
 800735c:	40023800 	.word	0x40023800
 8007360:	0800c320 	.word	0x0800c320

08007364 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007368:	f7ff ffdc 	bl	8007324 <HAL_RCC_GetHCLKFreq>
 800736c:	4602      	mov	r2, r0
 800736e:	4b05      	ldr	r3, [pc, #20]	; (8007384 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007370:	689b      	ldr	r3, [r3, #8]
 8007372:	0b5b      	lsrs	r3, r3, #13
 8007374:	f003 0307 	and.w	r3, r3, #7
 8007378:	4903      	ldr	r1, [pc, #12]	; (8007388 <HAL_RCC_GetPCLK2Freq+0x24>)
 800737a:	5ccb      	ldrb	r3, [r1, r3]
 800737c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007380:	4618      	mov	r0, r3
 8007382:	bd80      	pop	{r7, pc}
 8007384:	40023800 	.word	0x40023800
 8007388:	0800c320 	.word	0x0800c320

0800738c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b082      	sub	sp, #8
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d101      	bne.n	800739e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800739a:	2301      	movs	r3, #1
 800739c:	e07b      	b.n	8007496 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d108      	bne.n	80073b8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	685b      	ldr	r3, [r3, #4]
 80073aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80073ae:	d009      	beq.n	80073c4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2200      	movs	r2, #0
 80073b4:	61da      	str	r2, [r3, #28]
 80073b6:	e005      	b.n	80073c4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2200      	movs	r2, #0
 80073bc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2200      	movs	r2, #0
 80073c2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2200      	movs	r2, #0
 80073c8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80073d0:	b2db      	uxtb	r3, r3
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d106      	bne.n	80073e4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2200      	movs	r2, #0
 80073da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f7fa fe2c 	bl	800203c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2202      	movs	r2, #2
 80073e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	681a      	ldr	r2, [r3, #0]
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073fa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	685b      	ldr	r3, [r3, #4]
 8007400:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	689b      	ldr	r3, [r3, #8]
 8007408:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800740c:	431a      	orrs	r2, r3
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	68db      	ldr	r3, [r3, #12]
 8007412:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007416:	431a      	orrs	r2, r3
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	691b      	ldr	r3, [r3, #16]
 800741c:	f003 0302 	and.w	r3, r3, #2
 8007420:	431a      	orrs	r2, r3
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	695b      	ldr	r3, [r3, #20]
 8007426:	f003 0301 	and.w	r3, r3, #1
 800742a:	431a      	orrs	r2, r3
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	699b      	ldr	r3, [r3, #24]
 8007430:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007434:	431a      	orrs	r2, r3
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	69db      	ldr	r3, [r3, #28]
 800743a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800743e:	431a      	orrs	r2, r3
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6a1b      	ldr	r3, [r3, #32]
 8007444:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007448:	ea42 0103 	orr.w	r1, r2, r3
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007450:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	430a      	orrs	r2, r1
 800745a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	699b      	ldr	r3, [r3, #24]
 8007460:	0c1b      	lsrs	r3, r3, #16
 8007462:	f003 0104 	and.w	r1, r3, #4
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800746a:	f003 0210 	and.w	r2, r3, #16
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	430a      	orrs	r2, r1
 8007474:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	69da      	ldr	r2, [r3, #28]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007484:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2200      	movs	r2, #0
 800748a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2201      	movs	r2, #1
 8007490:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007494:	2300      	movs	r3, #0
}
 8007496:	4618      	mov	r0, r3
 8007498:	3708      	adds	r7, #8
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}

0800749e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800749e:	b580      	push	{r7, lr}
 80074a0:	b08c      	sub	sp, #48	; 0x30
 80074a2:	af00      	add	r7, sp, #0
 80074a4:	60f8      	str	r0, [r7, #12]
 80074a6:	60b9      	str	r1, [r7, #8]
 80074a8:	607a      	str	r2, [r7, #4]
 80074aa:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80074ac:	2301      	movs	r3, #1
 80074ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80074b0:	2300      	movs	r3, #0
 80074b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80074bc:	2b01      	cmp	r3, #1
 80074be:	d101      	bne.n	80074c4 <HAL_SPI_TransmitReceive+0x26>
 80074c0:	2302      	movs	r3, #2
 80074c2:	e18a      	b.n	80077da <HAL_SPI_TransmitReceive+0x33c>
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	2201      	movs	r2, #1
 80074c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80074cc:	f7fb ff0a 	bl	80032e4 <HAL_GetTick>
 80074d0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80074d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	685b      	ldr	r3, [r3, #4]
 80074e0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80074e2:	887b      	ldrh	r3, [r7, #2]
 80074e4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80074e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80074ea:	2b01      	cmp	r3, #1
 80074ec:	d00f      	beq.n	800750e <HAL_SPI_TransmitReceive+0x70>
 80074ee:	69fb      	ldr	r3, [r7, #28]
 80074f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80074f4:	d107      	bne.n	8007506 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	689b      	ldr	r3, [r3, #8]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d103      	bne.n	8007506 <HAL_SPI_TransmitReceive+0x68>
 80074fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007502:	2b04      	cmp	r3, #4
 8007504:	d003      	beq.n	800750e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007506:	2302      	movs	r3, #2
 8007508:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800750c:	e15b      	b.n	80077c6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d005      	beq.n	8007520 <HAL_SPI_TransmitReceive+0x82>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d002      	beq.n	8007520 <HAL_SPI_TransmitReceive+0x82>
 800751a:	887b      	ldrh	r3, [r7, #2]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d103      	bne.n	8007528 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007520:	2301      	movs	r3, #1
 8007522:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007526:	e14e      	b.n	80077c6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800752e:	b2db      	uxtb	r3, r3
 8007530:	2b04      	cmp	r3, #4
 8007532:	d003      	beq.n	800753c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	2205      	movs	r2, #5
 8007538:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	2200      	movs	r2, #0
 8007540:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	687a      	ldr	r2, [r7, #4]
 8007546:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	887a      	ldrh	r2, [r7, #2]
 800754c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	887a      	ldrh	r2, [r7, #2]
 8007552:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	68ba      	ldr	r2, [r7, #8]
 8007558:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	887a      	ldrh	r2, [r7, #2]
 800755e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	887a      	ldrh	r2, [r7, #2]
 8007564:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	2200      	movs	r2, #0
 800756a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	2200      	movs	r2, #0
 8007570:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800757c:	2b40      	cmp	r3, #64	; 0x40
 800757e:	d007      	beq.n	8007590 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	681a      	ldr	r2, [r3, #0]
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800758e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	68db      	ldr	r3, [r3, #12]
 8007594:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007598:	d178      	bne.n	800768c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	685b      	ldr	r3, [r3, #4]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d002      	beq.n	80075a8 <HAL_SPI_TransmitReceive+0x10a>
 80075a2:	8b7b      	ldrh	r3, [r7, #26]
 80075a4:	2b01      	cmp	r3, #1
 80075a6:	d166      	bne.n	8007676 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ac:	881a      	ldrh	r2, [r3, #0]
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075b8:	1c9a      	adds	r2, r3, #2
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075c2:	b29b      	uxth	r3, r3
 80075c4:	3b01      	subs	r3, #1
 80075c6:	b29a      	uxth	r2, r3
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80075cc:	e053      	b.n	8007676 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	689b      	ldr	r3, [r3, #8]
 80075d4:	f003 0302 	and.w	r3, r3, #2
 80075d8:	2b02      	cmp	r3, #2
 80075da:	d11b      	bne.n	8007614 <HAL_SPI_TransmitReceive+0x176>
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075e0:	b29b      	uxth	r3, r3
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d016      	beq.n	8007614 <HAL_SPI_TransmitReceive+0x176>
 80075e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	d113      	bne.n	8007614 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075f0:	881a      	ldrh	r2, [r3, #0]
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075fc:	1c9a      	adds	r2, r3, #2
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007606:	b29b      	uxth	r3, r3
 8007608:	3b01      	subs	r3, #1
 800760a:	b29a      	uxth	r2, r3
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007610:	2300      	movs	r3, #0
 8007612:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	689b      	ldr	r3, [r3, #8]
 800761a:	f003 0301 	and.w	r3, r3, #1
 800761e:	2b01      	cmp	r3, #1
 8007620:	d119      	bne.n	8007656 <HAL_SPI_TransmitReceive+0x1b8>
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007626:	b29b      	uxth	r3, r3
 8007628:	2b00      	cmp	r3, #0
 800762a:	d014      	beq.n	8007656 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	68da      	ldr	r2, [r3, #12]
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007636:	b292      	uxth	r2, r2
 8007638:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800763e:	1c9a      	adds	r2, r3, #2
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007648:	b29b      	uxth	r3, r3
 800764a:	3b01      	subs	r3, #1
 800764c:	b29a      	uxth	r2, r3
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007652:	2301      	movs	r3, #1
 8007654:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007656:	f7fb fe45 	bl	80032e4 <HAL_GetTick>
 800765a:	4602      	mov	r2, r0
 800765c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800765e:	1ad3      	subs	r3, r2, r3
 8007660:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007662:	429a      	cmp	r2, r3
 8007664:	d807      	bhi.n	8007676 <HAL_SPI_TransmitReceive+0x1d8>
 8007666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800766c:	d003      	beq.n	8007676 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800766e:	2303      	movs	r3, #3
 8007670:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007674:	e0a7      	b.n	80077c6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800767a:	b29b      	uxth	r3, r3
 800767c:	2b00      	cmp	r3, #0
 800767e:	d1a6      	bne.n	80075ce <HAL_SPI_TransmitReceive+0x130>
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007684:	b29b      	uxth	r3, r3
 8007686:	2b00      	cmp	r3, #0
 8007688:	d1a1      	bne.n	80075ce <HAL_SPI_TransmitReceive+0x130>
 800768a:	e07c      	b.n	8007786 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	685b      	ldr	r3, [r3, #4]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d002      	beq.n	800769a <HAL_SPI_TransmitReceive+0x1fc>
 8007694:	8b7b      	ldrh	r3, [r7, #26]
 8007696:	2b01      	cmp	r3, #1
 8007698:	d16b      	bne.n	8007772 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	330c      	adds	r3, #12
 80076a4:	7812      	ldrb	r2, [r2, #0]
 80076a6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ac:	1c5a      	adds	r2, r3, #1
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076b6:	b29b      	uxth	r3, r3
 80076b8:	3b01      	subs	r3, #1
 80076ba:	b29a      	uxth	r2, r3
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80076c0:	e057      	b.n	8007772 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	689b      	ldr	r3, [r3, #8]
 80076c8:	f003 0302 	and.w	r3, r3, #2
 80076cc:	2b02      	cmp	r3, #2
 80076ce:	d11c      	bne.n	800770a <HAL_SPI_TransmitReceive+0x26c>
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076d4:	b29b      	uxth	r3, r3
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d017      	beq.n	800770a <HAL_SPI_TransmitReceive+0x26c>
 80076da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076dc:	2b01      	cmp	r3, #1
 80076de:	d114      	bne.n	800770a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	330c      	adds	r3, #12
 80076ea:	7812      	ldrb	r2, [r2, #0]
 80076ec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076f2:	1c5a      	adds	r2, r3, #1
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076fc:	b29b      	uxth	r3, r3
 80076fe:	3b01      	subs	r3, #1
 8007700:	b29a      	uxth	r2, r3
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007706:	2300      	movs	r3, #0
 8007708:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	689b      	ldr	r3, [r3, #8]
 8007710:	f003 0301 	and.w	r3, r3, #1
 8007714:	2b01      	cmp	r3, #1
 8007716:	d119      	bne.n	800774c <HAL_SPI_TransmitReceive+0x2ae>
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800771c:	b29b      	uxth	r3, r3
 800771e:	2b00      	cmp	r3, #0
 8007720:	d014      	beq.n	800774c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	68da      	ldr	r2, [r3, #12]
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800772c:	b2d2      	uxtb	r2, r2
 800772e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007734:	1c5a      	adds	r2, r3, #1
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800773e:	b29b      	uxth	r3, r3
 8007740:	3b01      	subs	r3, #1
 8007742:	b29a      	uxth	r2, r3
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007748:	2301      	movs	r3, #1
 800774a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800774c:	f7fb fdca 	bl	80032e4 <HAL_GetTick>
 8007750:	4602      	mov	r2, r0
 8007752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007754:	1ad3      	subs	r3, r2, r3
 8007756:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007758:	429a      	cmp	r2, r3
 800775a:	d803      	bhi.n	8007764 <HAL_SPI_TransmitReceive+0x2c6>
 800775c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800775e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007762:	d102      	bne.n	800776a <HAL_SPI_TransmitReceive+0x2cc>
 8007764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007766:	2b00      	cmp	r3, #0
 8007768:	d103      	bne.n	8007772 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800776a:	2303      	movs	r3, #3
 800776c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007770:	e029      	b.n	80077c6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007776:	b29b      	uxth	r3, r3
 8007778:	2b00      	cmp	r3, #0
 800777a:	d1a2      	bne.n	80076c2 <HAL_SPI_TransmitReceive+0x224>
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007780:	b29b      	uxth	r3, r3
 8007782:	2b00      	cmp	r3, #0
 8007784:	d19d      	bne.n	80076c2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007786:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007788:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800778a:	68f8      	ldr	r0, [r7, #12]
 800778c:	f000 f8b2 	bl	80078f4 <SPI_EndRxTxTransaction>
 8007790:	4603      	mov	r3, r0
 8007792:	2b00      	cmp	r3, #0
 8007794:	d006      	beq.n	80077a4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007796:	2301      	movs	r3, #1
 8007798:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	2220      	movs	r2, #32
 80077a0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80077a2:	e010      	b.n	80077c6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	689b      	ldr	r3, [r3, #8]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d10b      	bne.n	80077c4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80077ac:	2300      	movs	r3, #0
 80077ae:	617b      	str	r3, [r7, #20]
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	68db      	ldr	r3, [r3, #12]
 80077b6:	617b      	str	r3, [r7, #20]
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	689b      	ldr	r3, [r3, #8]
 80077be:	617b      	str	r3, [r7, #20]
 80077c0:	697b      	ldr	r3, [r7, #20]
 80077c2:	e000      	b.n	80077c6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80077c4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	2201      	movs	r2, #1
 80077ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	2200      	movs	r2, #0
 80077d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80077d6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80077da:	4618      	mov	r0, r3
 80077dc:	3730      	adds	r7, #48	; 0x30
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}
	...

080077e4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b088      	sub	sp, #32
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	60f8      	str	r0, [r7, #12]
 80077ec:	60b9      	str	r1, [r7, #8]
 80077ee:	603b      	str	r3, [r7, #0]
 80077f0:	4613      	mov	r3, r2
 80077f2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80077f4:	f7fb fd76 	bl	80032e4 <HAL_GetTick>
 80077f8:	4602      	mov	r2, r0
 80077fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077fc:	1a9b      	subs	r3, r3, r2
 80077fe:	683a      	ldr	r2, [r7, #0]
 8007800:	4413      	add	r3, r2
 8007802:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007804:	f7fb fd6e 	bl	80032e4 <HAL_GetTick>
 8007808:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800780a:	4b39      	ldr	r3, [pc, #228]	; (80078f0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	015b      	lsls	r3, r3, #5
 8007810:	0d1b      	lsrs	r3, r3, #20
 8007812:	69fa      	ldr	r2, [r7, #28]
 8007814:	fb02 f303 	mul.w	r3, r2, r3
 8007818:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800781a:	e054      	b.n	80078c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007822:	d050      	beq.n	80078c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007824:	f7fb fd5e 	bl	80032e4 <HAL_GetTick>
 8007828:	4602      	mov	r2, r0
 800782a:	69bb      	ldr	r3, [r7, #24]
 800782c:	1ad3      	subs	r3, r2, r3
 800782e:	69fa      	ldr	r2, [r7, #28]
 8007830:	429a      	cmp	r2, r3
 8007832:	d902      	bls.n	800783a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007834:	69fb      	ldr	r3, [r7, #28]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d13d      	bne.n	80078b6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	685a      	ldr	r2, [r3, #4]
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007848:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	685b      	ldr	r3, [r3, #4]
 800784e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007852:	d111      	bne.n	8007878 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	689b      	ldr	r3, [r3, #8]
 8007858:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800785c:	d004      	beq.n	8007868 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	689b      	ldr	r3, [r3, #8]
 8007862:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007866:	d107      	bne.n	8007878 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	681a      	ldr	r2, [r3, #0]
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007876:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800787c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007880:	d10f      	bne.n	80078a2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	681a      	ldr	r2, [r3, #0]
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007890:	601a      	str	r2, [r3, #0]
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	681a      	ldr	r2, [r3, #0]
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80078a0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	2201      	movs	r2, #1
 80078a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	2200      	movs	r2, #0
 80078ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80078b2:	2303      	movs	r3, #3
 80078b4:	e017      	b.n	80078e6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d101      	bne.n	80078c0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80078bc:	2300      	movs	r3, #0
 80078be:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80078c0:	697b      	ldr	r3, [r7, #20]
 80078c2:	3b01      	subs	r3, #1
 80078c4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	689a      	ldr	r2, [r3, #8]
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	4013      	ands	r3, r2
 80078d0:	68ba      	ldr	r2, [r7, #8]
 80078d2:	429a      	cmp	r2, r3
 80078d4:	bf0c      	ite	eq
 80078d6:	2301      	moveq	r3, #1
 80078d8:	2300      	movne	r3, #0
 80078da:	b2db      	uxtb	r3, r3
 80078dc:	461a      	mov	r2, r3
 80078de:	79fb      	ldrb	r3, [r7, #7]
 80078e0:	429a      	cmp	r2, r3
 80078e2:	d19b      	bne.n	800781c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80078e4:	2300      	movs	r3, #0
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	3720      	adds	r7, #32
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}
 80078ee:	bf00      	nop
 80078f0:	20000008 	.word	0x20000008

080078f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b088      	sub	sp, #32
 80078f8:	af02      	add	r7, sp, #8
 80078fa:	60f8      	str	r0, [r7, #12]
 80078fc:	60b9      	str	r1, [r7, #8]
 80078fe:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007900:	4b1b      	ldr	r3, [pc, #108]	; (8007970 <SPI_EndRxTxTransaction+0x7c>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	4a1b      	ldr	r2, [pc, #108]	; (8007974 <SPI_EndRxTxTransaction+0x80>)
 8007906:	fba2 2303 	umull	r2, r3, r2, r3
 800790a:	0d5b      	lsrs	r3, r3, #21
 800790c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007910:	fb02 f303 	mul.w	r3, r2, r3
 8007914:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	685b      	ldr	r3, [r3, #4]
 800791a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800791e:	d112      	bne.n	8007946 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	9300      	str	r3, [sp, #0]
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	2200      	movs	r2, #0
 8007928:	2180      	movs	r1, #128	; 0x80
 800792a:	68f8      	ldr	r0, [r7, #12]
 800792c:	f7ff ff5a 	bl	80077e4 <SPI_WaitFlagStateUntilTimeout>
 8007930:	4603      	mov	r3, r0
 8007932:	2b00      	cmp	r3, #0
 8007934:	d016      	beq.n	8007964 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800793a:	f043 0220 	orr.w	r2, r3, #32
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007942:	2303      	movs	r3, #3
 8007944:	e00f      	b.n	8007966 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007946:	697b      	ldr	r3, [r7, #20]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d00a      	beq.n	8007962 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	3b01      	subs	r3, #1
 8007950:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	689b      	ldr	r3, [r3, #8]
 8007958:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800795c:	2b80      	cmp	r3, #128	; 0x80
 800795e:	d0f2      	beq.n	8007946 <SPI_EndRxTxTransaction+0x52>
 8007960:	e000      	b.n	8007964 <SPI_EndRxTxTransaction+0x70>
        break;
 8007962:	bf00      	nop
  }

  return HAL_OK;
 8007964:	2300      	movs	r3, #0
}
 8007966:	4618      	mov	r0, r3
 8007968:	3718      	adds	r7, #24
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}
 800796e:	bf00      	nop
 8007970:	20000008 	.word	0x20000008
 8007974:	165e9f81 	.word	0x165e9f81

08007978 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b082      	sub	sp, #8
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d101      	bne.n	800798a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007986:	2301      	movs	r3, #1
 8007988:	e041      	b.n	8007a0e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007990:	b2db      	uxtb	r3, r3
 8007992:	2b00      	cmp	r3, #0
 8007994:	d106      	bne.n	80079a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2200      	movs	r2, #0
 800799a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f7fa fbea 	bl	8002178 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2202      	movs	r2, #2
 80079a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681a      	ldr	r2, [r3, #0]
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	3304      	adds	r3, #4
 80079b4:	4619      	mov	r1, r3
 80079b6:	4610      	mov	r0, r2
 80079b8:	f000 f9f0 	bl	8007d9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2201      	movs	r2, #1
 80079c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2201      	movs	r2, #1
 80079c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2201      	movs	r2, #1
 80079d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2201      	movs	r2, #1
 80079d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2201      	movs	r2, #1
 80079e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2201      	movs	r2, #1
 80079e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2201      	movs	r2, #1
 80079f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2201      	movs	r2, #1
 80079f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2201      	movs	r2, #1
 8007a00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2201      	movs	r2, #1
 8007a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007a0c:	2300      	movs	r3, #0
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	3708      	adds	r7, #8
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}
	...

08007a18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b085      	sub	sp, #20
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a26:	b2db      	uxtb	r3, r3
 8007a28:	2b01      	cmp	r3, #1
 8007a2a:	d001      	beq.n	8007a30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	e044      	b.n	8007aba <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2202      	movs	r2, #2
 8007a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	68da      	ldr	r2, [r3, #12]
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f042 0201 	orr.w	r2, r2, #1
 8007a46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	4a1e      	ldr	r2, [pc, #120]	; (8007ac8 <HAL_TIM_Base_Start_IT+0xb0>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d018      	beq.n	8007a84 <HAL_TIM_Base_Start_IT+0x6c>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a5a:	d013      	beq.n	8007a84 <HAL_TIM_Base_Start_IT+0x6c>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	4a1a      	ldr	r2, [pc, #104]	; (8007acc <HAL_TIM_Base_Start_IT+0xb4>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d00e      	beq.n	8007a84 <HAL_TIM_Base_Start_IT+0x6c>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	4a19      	ldr	r2, [pc, #100]	; (8007ad0 <HAL_TIM_Base_Start_IT+0xb8>)
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d009      	beq.n	8007a84 <HAL_TIM_Base_Start_IT+0x6c>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	4a17      	ldr	r2, [pc, #92]	; (8007ad4 <HAL_TIM_Base_Start_IT+0xbc>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d004      	beq.n	8007a84 <HAL_TIM_Base_Start_IT+0x6c>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	4a16      	ldr	r2, [pc, #88]	; (8007ad8 <HAL_TIM_Base_Start_IT+0xc0>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d111      	bne.n	8007aa8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	689b      	ldr	r3, [r3, #8]
 8007a8a:	f003 0307 	and.w	r3, r3, #7
 8007a8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	2b06      	cmp	r3, #6
 8007a94:	d010      	beq.n	8007ab8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	681a      	ldr	r2, [r3, #0]
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f042 0201 	orr.w	r2, r2, #1
 8007aa4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007aa6:	e007      	b.n	8007ab8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	681a      	ldr	r2, [r3, #0]
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f042 0201 	orr.w	r2, r2, #1
 8007ab6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007ab8:	2300      	movs	r3, #0
}
 8007aba:	4618      	mov	r0, r3
 8007abc:	3714      	adds	r7, #20
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac4:	4770      	bx	lr
 8007ac6:	bf00      	nop
 8007ac8:	40010000 	.word	0x40010000
 8007acc:	40000400 	.word	0x40000400
 8007ad0:	40000800 	.word	0x40000800
 8007ad4:	40000c00 	.word	0x40000c00
 8007ad8:	40014000 	.word	0x40014000

08007adc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007adc:	b480      	push	{r7}
 8007ade:	b083      	sub	sp, #12
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	68da      	ldr	r2, [r3, #12]
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f022 0201 	bic.w	r2, r2, #1
 8007af2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	6a1a      	ldr	r2, [r3, #32]
 8007afa:	f241 1311 	movw	r3, #4369	; 0x1111
 8007afe:	4013      	ands	r3, r2
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d10f      	bne.n	8007b24 <HAL_TIM_Base_Stop_IT+0x48>
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	6a1a      	ldr	r2, [r3, #32]
 8007b0a:	f240 4344 	movw	r3, #1092	; 0x444
 8007b0e:	4013      	ands	r3, r2
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d107      	bne.n	8007b24 <HAL_TIM_Base_Stop_IT+0x48>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	681a      	ldr	r2, [r3, #0]
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f022 0201 	bic.w	r2, r2, #1
 8007b22:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2201      	movs	r2, #1
 8007b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007b2c:	2300      	movs	r3, #0
}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	370c      	adds	r7, #12
 8007b32:	46bd      	mov	sp, r7
 8007b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b38:	4770      	bx	lr

08007b3a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007b3a:	b580      	push	{r7, lr}
 8007b3c:	b082      	sub	sp, #8
 8007b3e:	af00      	add	r7, sp, #0
 8007b40:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	691b      	ldr	r3, [r3, #16]
 8007b48:	f003 0302 	and.w	r3, r3, #2
 8007b4c:	2b02      	cmp	r3, #2
 8007b4e:	d122      	bne.n	8007b96 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	68db      	ldr	r3, [r3, #12]
 8007b56:	f003 0302 	and.w	r3, r3, #2
 8007b5a:	2b02      	cmp	r3, #2
 8007b5c:	d11b      	bne.n	8007b96 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f06f 0202 	mvn.w	r2, #2
 8007b66:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	699b      	ldr	r3, [r3, #24]
 8007b74:	f003 0303 	and.w	r3, r3, #3
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d003      	beq.n	8007b84 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f000 f8ee 	bl	8007d5e <HAL_TIM_IC_CaptureCallback>
 8007b82:	e005      	b.n	8007b90 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f000 f8e0 	bl	8007d4a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f000 f8f1 	bl	8007d72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2200      	movs	r2, #0
 8007b94:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	691b      	ldr	r3, [r3, #16]
 8007b9c:	f003 0304 	and.w	r3, r3, #4
 8007ba0:	2b04      	cmp	r3, #4
 8007ba2:	d122      	bne.n	8007bea <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	68db      	ldr	r3, [r3, #12]
 8007baa:	f003 0304 	and.w	r3, r3, #4
 8007bae:	2b04      	cmp	r3, #4
 8007bb0:	d11b      	bne.n	8007bea <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f06f 0204 	mvn.w	r2, #4
 8007bba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2202      	movs	r2, #2
 8007bc0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	699b      	ldr	r3, [r3, #24]
 8007bc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d003      	beq.n	8007bd8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007bd0:	6878      	ldr	r0, [r7, #4]
 8007bd2:	f000 f8c4 	bl	8007d5e <HAL_TIM_IC_CaptureCallback>
 8007bd6:	e005      	b.n	8007be4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	f000 f8b6 	bl	8007d4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f000 f8c7 	bl	8007d72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2200      	movs	r2, #0
 8007be8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	691b      	ldr	r3, [r3, #16]
 8007bf0:	f003 0308 	and.w	r3, r3, #8
 8007bf4:	2b08      	cmp	r3, #8
 8007bf6:	d122      	bne.n	8007c3e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	68db      	ldr	r3, [r3, #12]
 8007bfe:	f003 0308 	and.w	r3, r3, #8
 8007c02:	2b08      	cmp	r3, #8
 8007c04:	d11b      	bne.n	8007c3e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f06f 0208 	mvn.w	r2, #8
 8007c0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2204      	movs	r2, #4
 8007c14:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	69db      	ldr	r3, [r3, #28]
 8007c1c:	f003 0303 	and.w	r3, r3, #3
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d003      	beq.n	8007c2c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	f000 f89a 	bl	8007d5e <HAL_TIM_IC_CaptureCallback>
 8007c2a:	e005      	b.n	8007c38 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c2c:	6878      	ldr	r0, [r7, #4]
 8007c2e:	f000 f88c 	bl	8007d4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f000 f89d 	bl	8007d72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	691b      	ldr	r3, [r3, #16]
 8007c44:	f003 0310 	and.w	r3, r3, #16
 8007c48:	2b10      	cmp	r3, #16
 8007c4a:	d122      	bne.n	8007c92 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	68db      	ldr	r3, [r3, #12]
 8007c52:	f003 0310 	and.w	r3, r3, #16
 8007c56:	2b10      	cmp	r3, #16
 8007c58:	d11b      	bne.n	8007c92 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f06f 0210 	mvn.w	r2, #16
 8007c62:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2208      	movs	r2, #8
 8007c68:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	69db      	ldr	r3, [r3, #28]
 8007c70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d003      	beq.n	8007c80 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f000 f870 	bl	8007d5e <HAL_TIM_IC_CaptureCallback>
 8007c7e:	e005      	b.n	8007c8c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f000 f862 	bl	8007d4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f000 f873 	bl	8007d72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2200      	movs	r2, #0
 8007c90:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	691b      	ldr	r3, [r3, #16]
 8007c98:	f003 0301 	and.w	r3, r3, #1
 8007c9c:	2b01      	cmp	r3, #1
 8007c9e:	d10e      	bne.n	8007cbe <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	68db      	ldr	r3, [r3, #12]
 8007ca6:	f003 0301 	and.w	r3, r3, #1
 8007caa:	2b01      	cmp	r3, #1
 8007cac:	d107      	bne.n	8007cbe <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f06f 0201 	mvn.w	r2, #1
 8007cb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f7fa f921 	bl	8001f00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	691b      	ldr	r3, [r3, #16]
 8007cc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cc8:	2b80      	cmp	r3, #128	; 0x80
 8007cca:	d10e      	bne.n	8007cea <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	68db      	ldr	r3, [r3, #12]
 8007cd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cd6:	2b80      	cmp	r3, #128	; 0x80
 8007cd8:	d107      	bne.n	8007cea <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007ce2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007ce4:	6878      	ldr	r0, [r7, #4]
 8007ce6:	f000 f8e3 	bl	8007eb0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	691b      	ldr	r3, [r3, #16]
 8007cf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cf4:	2b40      	cmp	r3, #64	; 0x40
 8007cf6:	d10e      	bne.n	8007d16 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	68db      	ldr	r3, [r3, #12]
 8007cfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d02:	2b40      	cmp	r3, #64	; 0x40
 8007d04:	d107      	bne.n	8007d16 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007d0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	f000 f838 	bl	8007d86 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	691b      	ldr	r3, [r3, #16]
 8007d1c:	f003 0320 	and.w	r3, r3, #32
 8007d20:	2b20      	cmp	r3, #32
 8007d22:	d10e      	bne.n	8007d42 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	68db      	ldr	r3, [r3, #12]
 8007d2a:	f003 0320 	and.w	r3, r3, #32
 8007d2e:	2b20      	cmp	r3, #32
 8007d30:	d107      	bne.n	8007d42 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f06f 0220 	mvn.w	r2, #32
 8007d3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	f000 f8ad 	bl	8007e9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007d42:	bf00      	nop
 8007d44:	3708      	adds	r7, #8
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd80      	pop	{r7, pc}

08007d4a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007d4a:	b480      	push	{r7}
 8007d4c:	b083      	sub	sp, #12
 8007d4e:	af00      	add	r7, sp, #0
 8007d50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007d52:	bf00      	nop
 8007d54:	370c      	adds	r7, #12
 8007d56:	46bd      	mov	sp, r7
 8007d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5c:	4770      	bx	lr

08007d5e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007d5e:	b480      	push	{r7}
 8007d60:	b083      	sub	sp, #12
 8007d62:	af00      	add	r7, sp, #0
 8007d64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007d66:	bf00      	nop
 8007d68:	370c      	adds	r7, #12
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d70:	4770      	bx	lr

08007d72 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007d72:	b480      	push	{r7}
 8007d74:	b083      	sub	sp, #12
 8007d76:	af00      	add	r7, sp, #0
 8007d78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007d7a:	bf00      	nop
 8007d7c:	370c      	adds	r7, #12
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d84:	4770      	bx	lr

08007d86 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007d86:	b480      	push	{r7}
 8007d88:	b083      	sub	sp, #12
 8007d8a:	af00      	add	r7, sp, #0
 8007d8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007d8e:	bf00      	nop
 8007d90:	370c      	adds	r7, #12
 8007d92:	46bd      	mov	sp, r7
 8007d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d98:	4770      	bx	lr
	...

08007d9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007d9c:	b480      	push	{r7}
 8007d9e:	b085      	sub	sp, #20
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
 8007da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	4a34      	ldr	r2, [pc, #208]	; (8007e80 <TIM_Base_SetConfig+0xe4>)
 8007db0:	4293      	cmp	r3, r2
 8007db2:	d00f      	beq.n	8007dd4 <TIM_Base_SetConfig+0x38>
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007dba:	d00b      	beq.n	8007dd4 <TIM_Base_SetConfig+0x38>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	4a31      	ldr	r2, [pc, #196]	; (8007e84 <TIM_Base_SetConfig+0xe8>)
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d007      	beq.n	8007dd4 <TIM_Base_SetConfig+0x38>
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	4a30      	ldr	r2, [pc, #192]	; (8007e88 <TIM_Base_SetConfig+0xec>)
 8007dc8:	4293      	cmp	r3, r2
 8007dca:	d003      	beq.n	8007dd4 <TIM_Base_SetConfig+0x38>
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	4a2f      	ldr	r2, [pc, #188]	; (8007e8c <TIM_Base_SetConfig+0xf0>)
 8007dd0:	4293      	cmp	r3, r2
 8007dd2:	d108      	bne.n	8007de6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	685b      	ldr	r3, [r3, #4]
 8007de0:	68fa      	ldr	r2, [r7, #12]
 8007de2:	4313      	orrs	r3, r2
 8007de4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	4a25      	ldr	r2, [pc, #148]	; (8007e80 <TIM_Base_SetConfig+0xe4>)
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d01b      	beq.n	8007e26 <TIM_Base_SetConfig+0x8a>
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007df4:	d017      	beq.n	8007e26 <TIM_Base_SetConfig+0x8a>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	4a22      	ldr	r2, [pc, #136]	; (8007e84 <TIM_Base_SetConfig+0xe8>)
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d013      	beq.n	8007e26 <TIM_Base_SetConfig+0x8a>
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	4a21      	ldr	r2, [pc, #132]	; (8007e88 <TIM_Base_SetConfig+0xec>)
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d00f      	beq.n	8007e26 <TIM_Base_SetConfig+0x8a>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	4a20      	ldr	r2, [pc, #128]	; (8007e8c <TIM_Base_SetConfig+0xf0>)
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d00b      	beq.n	8007e26 <TIM_Base_SetConfig+0x8a>
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	4a1f      	ldr	r2, [pc, #124]	; (8007e90 <TIM_Base_SetConfig+0xf4>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d007      	beq.n	8007e26 <TIM_Base_SetConfig+0x8a>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	4a1e      	ldr	r2, [pc, #120]	; (8007e94 <TIM_Base_SetConfig+0xf8>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d003      	beq.n	8007e26 <TIM_Base_SetConfig+0x8a>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	4a1d      	ldr	r2, [pc, #116]	; (8007e98 <TIM_Base_SetConfig+0xfc>)
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d108      	bne.n	8007e38 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	68db      	ldr	r3, [r3, #12]
 8007e32:	68fa      	ldr	r2, [r7, #12]
 8007e34:	4313      	orrs	r3, r2
 8007e36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	695b      	ldr	r3, [r3, #20]
 8007e42:	4313      	orrs	r3, r2
 8007e44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	68fa      	ldr	r2, [r7, #12]
 8007e4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	689a      	ldr	r2, [r3, #8]
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	681a      	ldr	r2, [r3, #0]
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	4a08      	ldr	r2, [pc, #32]	; (8007e80 <TIM_Base_SetConfig+0xe4>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d103      	bne.n	8007e6c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	691a      	ldr	r2, [r3, #16]
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2201      	movs	r2, #1
 8007e70:	615a      	str	r2, [r3, #20]
}
 8007e72:	bf00      	nop
 8007e74:	3714      	adds	r7, #20
 8007e76:	46bd      	mov	sp, r7
 8007e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7c:	4770      	bx	lr
 8007e7e:	bf00      	nop
 8007e80:	40010000 	.word	0x40010000
 8007e84:	40000400 	.word	0x40000400
 8007e88:	40000800 	.word	0x40000800
 8007e8c:	40000c00 	.word	0x40000c00
 8007e90:	40014000 	.word	0x40014000
 8007e94:	40014400 	.word	0x40014400
 8007e98:	40014800 	.word	0x40014800

08007e9c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	b083      	sub	sp, #12
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007ea4:	bf00      	nop
 8007ea6:	370c      	adds	r7, #12
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eae:	4770      	bx	lr

08007eb0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	b083      	sub	sp, #12
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007eb8:	bf00      	nop
 8007eba:	370c      	adds	r7, #12
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec2:	4770      	bx	lr

08007ec4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b082      	sub	sp, #8
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d101      	bne.n	8007ed6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	e03f      	b.n	8007f56 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007edc:	b2db      	uxtb	r3, r3
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d106      	bne.n	8007ef0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f7fa f96c 	bl	80021c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2224      	movs	r2, #36	; 0x24
 8007ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	68da      	ldr	r2, [r3, #12]
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007f06:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f000 ff73 	bl	8008df4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	691a      	ldr	r2, [r3, #16]
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007f1c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	695a      	ldr	r2, [r3, #20]
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007f2c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	68da      	ldr	r2, [r3, #12]
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007f3c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2200      	movs	r2, #0
 8007f42:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2220      	movs	r2, #32
 8007f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2220      	movs	r2, #32
 8007f50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007f54:	2300      	movs	r3, #0
}
 8007f56:	4618      	mov	r0, r3
 8007f58:	3708      	adds	r7, #8
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}

08007f5e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f5e:	b580      	push	{r7, lr}
 8007f60:	b08a      	sub	sp, #40	; 0x28
 8007f62:	af02      	add	r7, sp, #8
 8007f64:	60f8      	str	r0, [r7, #12]
 8007f66:	60b9      	str	r1, [r7, #8]
 8007f68:	603b      	str	r3, [r7, #0]
 8007f6a:	4613      	mov	r3, r2
 8007f6c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007f6e:	2300      	movs	r3, #0
 8007f70:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f78:	b2db      	uxtb	r3, r3
 8007f7a:	2b20      	cmp	r3, #32
 8007f7c:	d17c      	bne.n	8008078 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f7e:	68bb      	ldr	r3, [r7, #8]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d002      	beq.n	8007f8a <HAL_UART_Transmit+0x2c>
 8007f84:	88fb      	ldrh	r3, [r7, #6]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d101      	bne.n	8007f8e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	e075      	b.n	800807a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f94:	2b01      	cmp	r3, #1
 8007f96:	d101      	bne.n	8007f9c <HAL_UART_Transmit+0x3e>
 8007f98:	2302      	movs	r3, #2
 8007f9a:	e06e      	b.n	800807a <HAL_UART_Transmit+0x11c>
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	2201      	movs	r2, #1
 8007fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	2221      	movs	r2, #33	; 0x21
 8007fae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007fb2:	f7fb f997 	bl	80032e4 <HAL_GetTick>
 8007fb6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	88fa      	ldrh	r2, [r7, #6]
 8007fbc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	88fa      	ldrh	r2, [r7, #6]
 8007fc2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	689b      	ldr	r3, [r3, #8]
 8007fc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fcc:	d108      	bne.n	8007fe0 <HAL_UART_Transmit+0x82>
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	691b      	ldr	r3, [r3, #16]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d104      	bne.n	8007fe0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	61bb      	str	r3, [r7, #24]
 8007fde:	e003      	b.n	8007fe8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007fe0:	68bb      	ldr	r3, [r7, #8]
 8007fe2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	2200      	movs	r2, #0
 8007fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007ff0:	e02a      	b.n	8008048 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	9300      	str	r3, [sp, #0]
 8007ff6:	697b      	ldr	r3, [r7, #20]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	2180      	movs	r1, #128	; 0x80
 8007ffc:	68f8      	ldr	r0, [r7, #12]
 8007ffe:	f000 fc2b 	bl	8008858 <UART_WaitOnFlagUntilTimeout>
 8008002:	4603      	mov	r3, r0
 8008004:	2b00      	cmp	r3, #0
 8008006:	d001      	beq.n	800800c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008008:	2303      	movs	r3, #3
 800800a:	e036      	b.n	800807a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800800c:	69fb      	ldr	r3, [r7, #28]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d10b      	bne.n	800802a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008012:	69bb      	ldr	r3, [r7, #24]
 8008014:	881b      	ldrh	r3, [r3, #0]
 8008016:	461a      	mov	r2, r3
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008020:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008022:	69bb      	ldr	r3, [r7, #24]
 8008024:	3302      	adds	r3, #2
 8008026:	61bb      	str	r3, [r7, #24]
 8008028:	e007      	b.n	800803a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800802a:	69fb      	ldr	r3, [r7, #28]
 800802c:	781a      	ldrb	r2, [r3, #0]
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008034:	69fb      	ldr	r3, [r7, #28]
 8008036:	3301      	adds	r3, #1
 8008038:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800803e:	b29b      	uxth	r3, r3
 8008040:	3b01      	subs	r3, #1
 8008042:	b29a      	uxth	r2, r3
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800804c:	b29b      	uxth	r3, r3
 800804e:	2b00      	cmp	r3, #0
 8008050:	d1cf      	bne.n	8007ff2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	9300      	str	r3, [sp, #0]
 8008056:	697b      	ldr	r3, [r7, #20]
 8008058:	2200      	movs	r2, #0
 800805a:	2140      	movs	r1, #64	; 0x40
 800805c:	68f8      	ldr	r0, [r7, #12]
 800805e:	f000 fbfb 	bl	8008858 <UART_WaitOnFlagUntilTimeout>
 8008062:	4603      	mov	r3, r0
 8008064:	2b00      	cmp	r3, #0
 8008066:	d001      	beq.n	800806c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008068:	2303      	movs	r3, #3
 800806a:	e006      	b.n	800807a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	2220      	movs	r2, #32
 8008070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008074:	2300      	movs	r3, #0
 8008076:	e000      	b.n	800807a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008078:	2302      	movs	r3, #2
  }
}
 800807a:	4618      	mov	r0, r3
 800807c:	3720      	adds	r7, #32
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}

08008082 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008082:	b580      	push	{r7, lr}
 8008084:	b084      	sub	sp, #16
 8008086:	af00      	add	r7, sp, #0
 8008088:	60f8      	str	r0, [r7, #12]
 800808a:	60b9      	str	r1, [r7, #8]
 800808c:	4613      	mov	r3, r2
 800808e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008096:	b2db      	uxtb	r3, r3
 8008098:	2b20      	cmp	r3, #32
 800809a:	d11d      	bne.n	80080d8 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d002      	beq.n	80080a8 <HAL_UART_Receive_DMA+0x26>
 80080a2:	88fb      	ldrh	r3, [r7, #6]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d101      	bne.n	80080ac <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80080a8:	2301      	movs	r3, #1
 80080aa:	e016      	b.n	80080da <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080b2:	2b01      	cmp	r3, #1
 80080b4:	d101      	bne.n	80080ba <HAL_UART_Receive_DMA+0x38>
 80080b6:	2302      	movs	r3, #2
 80080b8:	e00f      	b.n	80080da <HAL_UART_Receive_DMA+0x58>
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	2201      	movs	r2, #1
 80080be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	2200      	movs	r2, #0
 80080c6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80080c8:	88fb      	ldrh	r3, [r7, #6]
 80080ca:	461a      	mov	r2, r3
 80080cc:	68b9      	ldr	r1, [r7, #8]
 80080ce:	68f8      	ldr	r0, [r7, #12]
 80080d0:	f000 fc30 	bl	8008934 <UART_Start_Receive_DMA>
 80080d4:	4603      	mov	r3, r0
 80080d6:	e000      	b.n	80080da <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80080d8:	2302      	movs	r3, #2
  }
}
 80080da:	4618      	mov	r0, r3
 80080dc:	3710      	adds	r7, #16
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}
	...

080080e4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b0ba      	sub	sp, #232	; 0xe8
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	68db      	ldr	r3, [r3, #12]
 80080fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	695b      	ldr	r3, [r3, #20]
 8008106:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800810a:	2300      	movs	r3, #0
 800810c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008110:	2300      	movs	r3, #0
 8008112:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008116:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800811a:	f003 030f 	and.w	r3, r3, #15
 800811e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008122:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008126:	2b00      	cmp	r3, #0
 8008128:	d10f      	bne.n	800814a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800812a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800812e:	f003 0320 	and.w	r3, r3, #32
 8008132:	2b00      	cmp	r3, #0
 8008134:	d009      	beq.n	800814a <HAL_UART_IRQHandler+0x66>
 8008136:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800813a:	f003 0320 	and.w	r3, r3, #32
 800813e:	2b00      	cmp	r3, #0
 8008140:	d003      	beq.n	800814a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f000 fd9b 	bl	8008c7e <UART_Receive_IT>
      return;
 8008148:	e256      	b.n	80085f8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800814a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800814e:	2b00      	cmp	r3, #0
 8008150:	f000 80de 	beq.w	8008310 <HAL_UART_IRQHandler+0x22c>
 8008154:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008158:	f003 0301 	and.w	r3, r3, #1
 800815c:	2b00      	cmp	r3, #0
 800815e:	d106      	bne.n	800816e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008160:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008164:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008168:	2b00      	cmp	r3, #0
 800816a:	f000 80d1 	beq.w	8008310 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800816e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008172:	f003 0301 	and.w	r3, r3, #1
 8008176:	2b00      	cmp	r3, #0
 8008178:	d00b      	beq.n	8008192 <HAL_UART_IRQHandler+0xae>
 800817a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800817e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008182:	2b00      	cmp	r3, #0
 8008184:	d005      	beq.n	8008192 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800818a:	f043 0201 	orr.w	r2, r3, #1
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008192:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008196:	f003 0304 	and.w	r3, r3, #4
 800819a:	2b00      	cmp	r3, #0
 800819c:	d00b      	beq.n	80081b6 <HAL_UART_IRQHandler+0xd2>
 800819e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80081a2:	f003 0301 	and.w	r3, r3, #1
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d005      	beq.n	80081b6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ae:	f043 0202 	orr.w	r2, r3, #2
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80081b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081ba:	f003 0302 	and.w	r3, r3, #2
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d00b      	beq.n	80081da <HAL_UART_IRQHandler+0xf6>
 80081c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80081c6:	f003 0301 	and.w	r3, r3, #1
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d005      	beq.n	80081da <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081d2:	f043 0204 	orr.w	r2, r3, #4
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80081da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081de:	f003 0308 	and.w	r3, r3, #8
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d011      	beq.n	800820a <HAL_UART_IRQHandler+0x126>
 80081e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081ea:	f003 0320 	and.w	r3, r3, #32
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d105      	bne.n	80081fe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80081f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80081f6:	f003 0301 	and.w	r3, r3, #1
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d005      	beq.n	800820a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008202:	f043 0208 	orr.w	r2, r3, #8
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800820e:	2b00      	cmp	r3, #0
 8008210:	f000 81ed 	beq.w	80085ee <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008214:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008218:	f003 0320 	and.w	r3, r3, #32
 800821c:	2b00      	cmp	r3, #0
 800821e:	d008      	beq.n	8008232 <HAL_UART_IRQHandler+0x14e>
 8008220:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008224:	f003 0320 	and.w	r3, r3, #32
 8008228:	2b00      	cmp	r3, #0
 800822a:	d002      	beq.n	8008232 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800822c:	6878      	ldr	r0, [r7, #4]
 800822e:	f000 fd26 	bl	8008c7e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	695b      	ldr	r3, [r3, #20]
 8008238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800823c:	2b40      	cmp	r3, #64	; 0x40
 800823e:	bf0c      	ite	eq
 8008240:	2301      	moveq	r3, #1
 8008242:	2300      	movne	r3, #0
 8008244:	b2db      	uxtb	r3, r3
 8008246:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800824e:	f003 0308 	and.w	r3, r3, #8
 8008252:	2b00      	cmp	r3, #0
 8008254:	d103      	bne.n	800825e <HAL_UART_IRQHandler+0x17a>
 8008256:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800825a:	2b00      	cmp	r3, #0
 800825c:	d04f      	beq.n	80082fe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f000 fc2e 	bl	8008ac0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	695b      	ldr	r3, [r3, #20]
 800826a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800826e:	2b40      	cmp	r3, #64	; 0x40
 8008270:	d141      	bne.n	80082f6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	3314      	adds	r3, #20
 8008278:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800827c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008280:	e853 3f00 	ldrex	r3, [r3]
 8008284:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008288:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800828c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008290:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	3314      	adds	r3, #20
 800829a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800829e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80082a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082a6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80082aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80082ae:	e841 2300 	strex	r3, r2, [r1]
 80082b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80082b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d1d9      	bne.n	8008272 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d013      	beq.n	80082ee <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082ca:	4a7d      	ldr	r2, [pc, #500]	; (80084c0 <HAL_UART_IRQHandler+0x3dc>)
 80082cc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082d2:	4618      	mov	r0, r3
 80082d4:	f7fb fabe 	bl	8003854 <HAL_DMA_Abort_IT>
 80082d8:	4603      	mov	r3, r0
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d016      	beq.n	800830c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082e4:	687a      	ldr	r2, [r7, #4]
 80082e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80082e8:	4610      	mov	r0, r2
 80082ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082ec:	e00e      	b.n	800830c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f000 f9a4 	bl	800863c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082f4:	e00a      	b.n	800830c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f000 f9a0 	bl	800863c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082fc:	e006      	b.n	800830c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f000 f99c 	bl	800863c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2200      	movs	r2, #0
 8008308:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800830a:	e170      	b.n	80085ee <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800830c:	bf00      	nop
    return;
 800830e:	e16e      	b.n	80085ee <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008314:	2b01      	cmp	r3, #1
 8008316:	f040 814a 	bne.w	80085ae <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800831a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800831e:	f003 0310 	and.w	r3, r3, #16
 8008322:	2b00      	cmp	r3, #0
 8008324:	f000 8143 	beq.w	80085ae <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008328:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800832c:	f003 0310 	and.w	r3, r3, #16
 8008330:	2b00      	cmp	r3, #0
 8008332:	f000 813c 	beq.w	80085ae <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008336:	2300      	movs	r3, #0
 8008338:	60bb      	str	r3, [r7, #8]
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	60bb      	str	r3, [r7, #8]
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	685b      	ldr	r3, [r3, #4]
 8008348:	60bb      	str	r3, [r7, #8]
 800834a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	695b      	ldr	r3, [r3, #20]
 8008352:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008356:	2b40      	cmp	r3, #64	; 0x40
 8008358:	f040 80b4 	bne.w	80084c4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	685b      	ldr	r3, [r3, #4]
 8008364:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008368:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800836c:	2b00      	cmp	r3, #0
 800836e:	f000 8140 	beq.w	80085f2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008376:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800837a:	429a      	cmp	r2, r3
 800837c:	f080 8139 	bcs.w	80085f2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008386:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800838c:	69db      	ldr	r3, [r3, #28]
 800838e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008392:	f000 8088 	beq.w	80084a6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	330c      	adds	r3, #12
 800839c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80083a4:	e853 3f00 	ldrex	r3, [r3]
 80083a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80083ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80083b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80083b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	330c      	adds	r3, #12
 80083be:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80083c2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80083c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ca:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80083ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80083d2:	e841 2300 	strex	r3, r2, [r1]
 80083d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80083da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d1d9      	bne.n	8008396 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	3314      	adds	r3, #20
 80083e8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80083ec:	e853 3f00 	ldrex	r3, [r3]
 80083f0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80083f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80083f4:	f023 0301 	bic.w	r3, r3, #1
 80083f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	3314      	adds	r3, #20
 8008402:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008406:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800840a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800840c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800840e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008412:	e841 2300 	strex	r3, r2, [r1]
 8008416:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008418:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800841a:	2b00      	cmp	r3, #0
 800841c:	d1e1      	bne.n	80083e2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	3314      	adds	r3, #20
 8008424:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008426:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008428:	e853 3f00 	ldrex	r3, [r3]
 800842c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800842e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008430:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008434:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	3314      	adds	r3, #20
 800843e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008442:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008444:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008446:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008448:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800844a:	e841 2300 	strex	r3, r2, [r1]
 800844e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008450:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008452:	2b00      	cmp	r3, #0
 8008454:	d1e3      	bne.n	800841e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2220      	movs	r2, #32
 800845a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2200      	movs	r2, #0
 8008462:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	330c      	adds	r3, #12
 800846a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800846c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800846e:	e853 3f00 	ldrex	r3, [r3]
 8008472:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008474:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008476:	f023 0310 	bic.w	r3, r3, #16
 800847a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	330c      	adds	r3, #12
 8008484:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008488:	65ba      	str	r2, [r7, #88]	; 0x58
 800848a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800848c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800848e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008490:	e841 2300 	strex	r3, r2, [r1]
 8008494:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008496:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008498:	2b00      	cmp	r3, #0
 800849a:	d1e3      	bne.n	8008464 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084a0:	4618      	mov	r0, r3
 80084a2:	f7fb f967 	bl	8003774 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80084ae:	b29b      	uxth	r3, r3
 80084b0:	1ad3      	subs	r3, r2, r3
 80084b2:	b29b      	uxth	r3, r3
 80084b4:	4619      	mov	r1, r3
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f000 f8ca 	bl	8008650 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80084bc:	e099      	b.n	80085f2 <HAL_UART_IRQHandler+0x50e>
 80084be:	bf00      	nop
 80084c0:	08008b87 	.word	0x08008b87
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80084cc:	b29b      	uxth	r3, r3
 80084ce:	1ad3      	subs	r3, r2, r3
 80084d0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80084d8:	b29b      	uxth	r3, r3
 80084da:	2b00      	cmp	r3, #0
 80084dc:	f000 808b 	beq.w	80085f6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80084e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	f000 8086 	beq.w	80085f6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	330c      	adds	r3, #12
 80084f0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084f4:	e853 3f00 	ldrex	r3, [r3]
 80084f8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80084fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008500:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	330c      	adds	r3, #12
 800850a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800850e:	647a      	str	r2, [r7, #68]	; 0x44
 8008510:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008512:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008514:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008516:	e841 2300 	strex	r3, r2, [r1]
 800851a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800851c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800851e:	2b00      	cmp	r3, #0
 8008520:	d1e3      	bne.n	80084ea <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	3314      	adds	r3, #20
 8008528:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800852a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800852c:	e853 3f00 	ldrex	r3, [r3]
 8008530:	623b      	str	r3, [r7, #32]
   return(result);
 8008532:	6a3b      	ldr	r3, [r7, #32]
 8008534:	f023 0301 	bic.w	r3, r3, #1
 8008538:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	3314      	adds	r3, #20
 8008542:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008546:	633a      	str	r2, [r7, #48]	; 0x30
 8008548:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800854a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800854c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800854e:	e841 2300 	strex	r3, r2, [r1]
 8008552:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008556:	2b00      	cmp	r3, #0
 8008558:	d1e3      	bne.n	8008522 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2220      	movs	r2, #32
 800855e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2200      	movs	r2, #0
 8008566:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	330c      	adds	r3, #12
 800856e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008570:	693b      	ldr	r3, [r7, #16]
 8008572:	e853 3f00 	ldrex	r3, [r3]
 8008576:	60fb      	str	r3, [r7, #12]
   return(result);
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	f023 0310 	bic.w	r3, r3, #16
 800857e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	330c      	adds	r3, #12
 8008588:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800858c:	61fa      	str	r2, [r7, #28]
 800858e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008590:	69b9      	ldr	r1, [r7, #24]
 8008592:	69fa      	ldr	r2, [r7, #28]
 8008594:	e841 2300 	strex	r3, r2, [r1]
 8008598:	617b      	str	r3, [r7, #20]
   return(result);
 800859a:	697b      	ldr	r3, [r7, #20]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d1e3      	bne.n	8008568 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80085a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80085a4:	4619      	mov	r1, r3
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	f000 f852 	bl	8008650 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80085ac:	e023      	b.n	80085f6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80085ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d009      	beq.n	80085ce <HAL_UART_IRQHandler+0x4ea>
 80085ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80085be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d003      	beq.n	80085ce <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80085c6:	6878      	ldr	r0, [r7, #4]
 80085c8:	f000 faf1 	bl	8008bae <UART_Transmit_IT>
    return;
 80085cc:	e014      	b.n	80085f8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80085ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d00e      	beq.n	80085f8 <HAL_UART_IRQHandler+0x514>
 80085da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80085de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d008      	beq.n	80085f8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80085e6:	6878      	ldr	r0, [r7, #4]
 80085e8:	f000 fb31 	bl	8008c4e <UART_EndTransmit_IT>
    return;
 80085ec:	e004      	b.n	80085f8 <HAL_UART_IRQHandler+0x514>
    return;
 80085ee:	bf00      	nop
 80085f0:	e002      	b.n	80085f8 <HAL_UART_IRQHandler+0x514>
      return;
 80085f2:	bf00      	nop
 80085f4:	e000      	b.n	80085f8 <HAL_UART_IRQHandler+0x514>
      return;
 80085f6:	bf00      	nop
  }
}
 80085f8:	37e8      	adds	r7, #232	; 0xe8
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd80      	pop	{r7, pc}
 80085fe:	bf00      	nop

08008600 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008600:	b480      	push	{r7}
 8008602:	b083      	sub	sp, #12
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008608:	bf00      	nop
 800860a:	370c      	adds	r7, #12
 800860c:	46bd      	mov	sp, r7
 800860e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008612:	4770      	bx	lr

08008614 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008614:	b480      	push	{r7}
 8008616:	b083      	sub	sp, #12
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800861c:	bf00      	nop
 800861e:	370c      	adds	r7, #12
 8008620:	46bd      	mov	sp, r7
 8008622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008626:	4770      	bx	lr

08008628 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008628:	b480      	push	{r7}
 800862a:	b083      	sub	sp, #12
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008630:	bf00      	nop
 8008632:	370c      	adds	r7, #12
 8008634:	46bd      	mov	sp, r7
 8008636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863a:	4770      	bx	lr

0800863c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800863c:	b480      	push	{r7}
 800863e:	b083      	sub	sp, #12
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008644:	bf00      	nop
 8008646:	370c      	adds	r7, #12
 8008648:	46bd      	mov	sp, r7
 800864a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864e:	4770      	bx	lr

08008650 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008650:	b480      	push	{r7}
 8008652:	b083      	sub	sp, #12
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
 8008658:	460b      	mov	r3, r1
 800865a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800865c:	bf00      	nop
 800865e:	370c      	adds	r7, #12
 8008660:	46bd      	mov	sp, r7
 8008662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008666:	4770      	bx	lr

08008668 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b09c      	sub	sp, #112	; 0x70
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008674:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008680:	2b00      	cmp	r3, #0
 8008682:	d172      	bne.n	800876a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8008684:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008686:	2200      	movs	r2, #0
 8008688:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800868a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	330c      	adds	r3, #12
 8008690:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008692:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008694:	e853 3f00 	ldrex	r3, [r3]
 8008698:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800869a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800869c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80086a0:	66bb      	str	r3, [r7, #104]	; 0x68
 80086a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	330c      	adds	r3, #12
 80086a8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80086aa:	65ba      	str	r2, [r7, #88]	; 0x58
 80086ac:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ae:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80086b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80086b2:	e841 2300 	strex	r3, r2, [r1]
 80086b6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80086b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d1e5      	bne.n	800868a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	3314      	adds	r3, #20
 80086c4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086c8:	e853 3f00 	ldrex	r3, [r3]
 80086cc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80086ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086d0:	f023 0301 	bic.w	r3, r3, #1
 80086d4:	667b      	str	r3, [r7, #100]	; 0x64
 80086d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	3314      	adds	r3, #20
 80086dc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80086de:	647a      	str	r2, [r7, #68]	; 0x44
 80086e0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80086e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80086e6:	e841 2300 	strex	r3, r2, [r1]
 80086ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80086ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d1e5      	bne.n	80086be <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80086f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	3314      	adds	r3, #20
 80086f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086fc:	e853 3f00 	ldrex	r3, [r3]
 8008700:	623b      	str	r3, [r7, #32]
   return(result);
 8008702:	6a3b      	ldr	r3, [r7, #32]
 8008704:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008708:	663b      	str	r3, [r7, #96]	; 0x60
 800870a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	3314      	adds	r3, #20
 8008710:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008712:	633a      	str	r2, [r7, #48]	; 0x30
 8008714:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008716:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008718:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800871a:	e841 2300 	strex	r3, r2, [r1]
 800871e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008722:	2b00      	cmp	r3, #0
 8008724:	d1e5      	bne.n	80086f2 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008726:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008728:	2220      	movs	r2, #32
 800872a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800872e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008732:	2b01      	cmp	r3, #1
 8008734:	d119      	bne.n	800876a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008736:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	330c      	adds	r3, #12
 800873c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800873e:	693b      	ldr	r3, [r7, #16]
 8008740:	e853 3f00 	ldrex	r3, [r3]
 8008744:	60fb      	str	r3, [r7, #12]
   return(result);
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	f023 0310 	bic.w	r3, r3, #16
 800874c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800874e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	330c      	adds	r3, #12
 8008754:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008756:	61fa      	str	r2, [r7, #28]
 8008758:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800875a:	69b9      	ldr	r1, [r7, #24]
 800875c:	69fa      	ldr	r2, [r7, #28]
 800875e:	e841 2300 	strex	r3, r2, [r1]
 8008762:	617b      	str	r3, [r7, #20]
   return(result);
 8008764:	697b      	ldr	r3, [r7, #20]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d1e5      	bne.n	8008736 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800876a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800876c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800876e:	2b01      	cmp	r3, #1
 8008770:	d106      	bne.n	8008780 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008772:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008774:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008776:	4619      	mov	r1, r3
 8008778:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800877a:	f7ff ff69 	bl	8008650 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800877e:	e002      	b.n	8008786 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8008780:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008782:	f7ff ff47 	bl	8008614 <HAL_UART_RxCpltCallback>
}
 8008786:	bf00      	nop
 8008788:	3770      	adds	r7, #112	; 0x70
 800878a:	46bd      	mov	sp, r7
 800878c:	bd80      	pop	{r7, pc}

0800878e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800878e:	b580      	push	{r7, lr}
 8008790:	b084      	sub	sp, #16
 8008792:	af00      	add	r7, sp, #0
 8008794:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800879a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087a0:	2b01      	cmp	r3, #1
 80087a2:	d108      	bne.n	80087b6 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80087a8:	085b      	lsrs	r3, r3, #1
 80087aa:	b29b      	uxth	r3, r3
 80087ac:	4619      	mov	r1, r3
 80087ae:	68f8      	ldr	r0, [r7, #12]
 80087b0:	f7ff ff4e 	bl	8008650 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80087b4:	e002      	b.n	80087bc <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80087b6:	68f8      	ldr	r0, [r7, #12]
 80087b8:	f7ff ff36 	bl	8008628 <HAL_UART_RxHalfCpltCallback>
}
 80087bc:	bf00      	nop
 80087be:	3710      	adds	r7, #16
 80087c0:	46bd      	mov	sp, r7
 80087c2:	bd80      	pop	{r7, pc}

080087c4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b084      	sub	sp, #16
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80087cc:	2300      	movs	r3, #0
 80087ce:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087d4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	695b      	ldr	r3, [r3, #20]
 80087dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087e0:	2b80      	cmp	r3, #128	; 0x80
 80087e2:	bf0c      	ite	eq
 80087e4:	2301      	moveq	r3, #1
 80087e6:	2300      	movne	r3, #0
 80087e8:	b2db      	uxtb	r3, r3
 80087ea:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80087ec:	68bb      	ldr	r3, [r7, #8]
 80087ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80087f2:	b2db      	uxtb	r3, r3
 80087f4:	2b21      	cmp	r3, #33	; 0x21
 80087f6:	d108      	bne.n	800880a <UART_DMAError+0x46>
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d005      	beq.n	800880a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	2200      	movs	r2, #0
 8008802:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008804:	68b8      	ldr	r0, [r7, #8]
 8008806:	f000 f933 	bl	8008a70 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800880a:	68bb      	ldr	r3, [r7, #8]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	695b      	ldr	r3, [r3, #20]
 8008810:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008814:	2b40      	cmp	r3, #64	; 0x40
 8008816:	bf0c      	ite	eq
 8008818:	2301      	moveq	r3, #1
 800881a:	2300      	movne	r3, #0
 800881c:	b2db      	uxtb	r3, r3
 800881e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008820:	68bb      	ldr	r3, [r7, #8]
 8008822:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008826:	b2db      	uxtb	r3, r3
 8008828:	2b22      	cmp	r3, #34	; 0x22
 800882a:	d108      	bne.n	800883e <UART_DMAError+0x7a>
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d005      	beq.n	800883e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	2200      	movs	r2, #0
 8008836:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008838:	68b8      	ldr	r0, [r7, #8]
 800883a:	f000 f941 	bl	8008ac0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008842:	f043 0210 	orr.w	r2, r3, #16
 8008846:	68bb      	ldr	r3, [r7, #8]
 8008848:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800884a:	68b8      	ldr	r0, [r7, #8]
 800884c:	f7ff fef6 	bl	800863c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008850:	bf00      	nop
 8008852:	3710      	adds	r7, #16
 8008854:	46bd      	mov	sp, r7
 8008856:	bd80      	pop	{r7, pc}

08008858 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b090      	sub	sp, #64	; 0x40
 800885c:	af00      	add	r7, sp, #0
 800885e:	60f8      	str	r0, [r7, #12]
 8008860:	60b9      	str	r1, [r7, #8]
 8008862:	603b      	str	r3, [r7, #0]
 8008864:	4613      	mov	r3, r2
 8008866:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008868:	e050      	b.n	800890c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800886a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800886c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008870:	d04c      	beq.n	800890c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008872:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008874:	2b00      	cmp	r3, #0
 8008876:	d007      	beq.n	8008888 <UART_WaitOnFlagUntilTimeout+0x30>
 8008878:	f7fa fd34 	bl	80032e4 <HAL_GetTick>
 800887c:	4602      	mov	r2, r0
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	1ad3      	subs	r3, r2, r3
 8008882:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008884:	429a      	cmp	r2, r3
 8008886:	d241      	bcs.n	800890c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	330c      	adds	r3, #12
 800888e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008892:	e853 3f00 	ldrex	r3, [r3]
 8008896:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800889a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800889e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	330c      	adds	r3, #12
 80088a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80088a8:	637a      	str	r2, [r7, #52]	; 0x34
 80088aa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80088ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80088b0:	e841 2300 	strex	r3, r2, [r1]
 80088b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80088b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d1e5      	bne.n	8008888 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	3314      	adds	r3, #20
 80088c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088c4:	697b      	ldr	r3, [r7, #20]
 80088c6:	e853 3f00 	ldrex	r3, [r3]
 80088ca:	613b      	str	r3, [r7, #16]
   return(result);
 80088cc:	693b      	ldr	r3, [r7, #16]
 80088ce:	f023 0301 	bic.w	r3, r3, #1
 80088d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	3314      	adds	r3, #20
 80088da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80088dc:	623a      	str	r2, [r7, #32]
 80088de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088e0:	69f9      	ldr	r1, [r7, #28]
 80088e2:	6a3a      	ldr	r2, [r7, #32]
 80088e4:	e841 2300 	strex	r3, r2, [r1]
 80088e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80088ea:	69bb      	ldr	r3, [r7, #24]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d1e5      	bne.n	80088bc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	2220      	movs	r2, #32
 80088f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	2220      	movs	r2, #32
 80088fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	2200      	movs	r2, #0
 8008904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008908:	2303      	movs	r3, #3
 800890a:	e00f      	b.n	800892c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	681a      	ldr	r2, [r3, #0]
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	4013      	ands	r3, r2
 8008916:	68ba      	ldr	r2, [r7, #8]
 8008918:	429a      	cmp	r2, r3
 800891a:	bf0c      	ite	eq
 800891c:	2301      	moveq	r3, #1
 800891e:	2300      	movne	r3, #0
 8008920:	b2db      	uxtb	r3, r3
 8008922:	461a      	mov	r2, r3
 8008924:	79fb      	ldrb	r3, [r7, #7]
 8008926:	429a      	cmp	r2, r3
 8008928:	d09f      	beq.n	800886a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800892a:	2300      	movs	r3, #0
}
 800892c:	4618      	mov	r0, r3
 800892e:	3740      	adds	r7, #64	; 0x40
 8008930:	46bd      	mov	sp, r7
 8008932:	bd80      	pop	{r7, pc}

08008934 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b098      	sub	sp, #96	; 0x60
 8008938:	af00      	add	r7, sp, #0
 800893a:	60f8      	str	r0, [r7, #12]
 800893c:	60b9      	str	r1, [r7, #8]
 800893e:	4613      	mov	r3, r2
 8008940:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8008942:	68ba      	ldr	r2, [r7, #8]
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	88fa      	ldrh	r2, [r7, #6]
 800894c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	2200      	movs	r2, #0
 8008952:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	2222      	movs	r2, #34	; 0x22
 8008958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008960:	4a40      	ldr	r2, [pc, #256]	; (8008a64 <UART_Start_Receive_DMA+0x130>)
 8008962:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008968:	4a3f      	ldr	r2, [pc, #252]	; (8008a68 <UART_Start_Receive_DMA+0x134>)
 800896a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008970:	4a3e      	ldr	r2, [pc, #248]	; (8008a6c <UART_Start_Receive_DMA+0x138>)
 8008972:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008978:	2200      	movs	r2, #0
 800897a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800897c:	f107 0308 	add.w	r3, r7, #8
 8008980:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	3304      	adds	r3, #4
 800898c:	4619      	mov	r1, r3
 800898e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008990:	681a      	ldr	r2, [r3, #0]
 8008992:	88fb      	ldrh	r3, [r7, #6]
 8008994:	f7fa fe96 	bl	80036c4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8008998:	2300      	movs	r3, #0
 800899a:	613b      	str	r3, [r7, #16]
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	613b      	str	r3, [r7, #16]
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	685b      	ldr	r3, [r3, #4]
 80089aa:	613b      	str	r3, [r7, #16]
 80089ac:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	2200      	movs	r2, #0
 80089b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	691b      	ldr	r3, [r3, #16]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d019      	beq.n	80089f2 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	330c      	adds	r3, #12
 80089c4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089c8:	e853 3f00 	ldrex	r3, [r3]
 80089cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80089ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80089d4:	65bb      	str	r3, [r7, #88]	; 0x58
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	330c      	adds	r3, #12
 80089dc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80089de:	64fa      	str	r2, [r7, #76]	; 0x4c
 80089e0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089e2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80089e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80089e6:	e841 2300 	strex	r3, r2, [r1]
 80089ea:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80089ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d1e5      	bne.n	80089be <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	3314      	adds	r3, #20
 80089f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089fc:	e853 3f00 	ldrex	r3, [r3]
 8008a00:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a04:	f043 0301 	orr.w	r3, r3, #1
 8008a08:	657b      	str	r3, [r7, #84]	; 0x54
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	3314      	adds	r3, #20
 8008a10:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008a12:	63ba      	str	r2, [r7, #56]	; 0x38
 8008a14:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a16:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008a18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008a1a:	e841 2300 	strex	r3, r2, [r1]
 8008a1e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d1e5      	bne.n	80089f2 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	3314      	adds	r3, #20
 8008a2c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a2e:	69bb      	ldr	r3, [r7, #24]
 8008a30:	e853 3f00 	ldrex	r3, [r3]
 8008a34:	617b      	str	r3, [r7, #20]
   return(result);
 8008a36:	697b      	ldr	r3, [r7, #20]
 8008a38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a3c:	653b      	str	r3, [r7, #80]	; 0x50
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	3314      	adds	r3, #20
 8008a44:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008a46:	627a      	str	r2, [r7, #36]	; 0x24
 8008a48:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a4a:	6a39      	ldr	r1, [r7, #32]
 8008a4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a4e:	e841 2300 	strex	r3, r2, [r1]
 8008a52:	61fb      	str	r3, [r7, #28]
   return(result);
 8008a54:	69fb      	ldr	r3, [r7, #28]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d1e5      	bne.n	8008a26 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8008a5a:	2300      	movs	r3, #0
}
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	3760      	adds	r7, #96	; 0x60
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd80      	pop	{r7, pc}
 8008a64:	08008669 	.word	0x08008669
 8008a68:	0800878f 	.word	0x0800878f
 8008a6c:	080087c5 	.word	0x080087c5

08008a70 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008a70:	b480      	push	{r7}
 8008a72:	b089      	sub	sp, #36	; 0x24
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	330c      	adds	r3, #12
 8008a7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	e853 3f00 	ldrex	r3, [r3]
 8008a86:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a88:	68bb      	ldr	r3, [r7, #8]
 8008a8a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008a8e:	61fb      	str	r3, [r7, #28]
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	330c      	adds	r3, #12
 8008a96:	69fa      	ldr	r2, [r7, #28]
 8008a98:	61ba      	str	r2, [r7, #24]
 8008a9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a9c:	6979      	ldr	r1, [r7, #20]
 8008a9e:	69ba      	ldr	r2, [r7, #24]
 8008aa0:	e841 2300 	strex	r3, r2, [r1]
 8008aa4:	613b      	str	r3, [r7, #16]
   return(result);
 8008aa6:	693b      	ldr	r3, [r7, #16]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d1e5      	bne.n	8008a78 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2220      	movs	r2, #32
 8008ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8008ab4:	bf00      	nop
 8008ab6:	3724      	adds	r7, #36	; 0x24
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008abe:	4770      	bx	lr

08008ac0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008ac0:	b480      	push	{r7}
 8008ac2:	b095      	sub	sp, #84	; 0x54
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	330c      	adds	r3, #12
 8008ace:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ad2:	e853 3f00 	ldrex	r3, [r3]
 8008ad6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ada:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008ade:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	330c      	adds	r3, #12
 8008ae6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008ae8:	643a      	str	r2, [r7, #64]	; 0x40
 8008aea:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008aee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008af0:	e841 2300 	strex	r3, r2, [r1]
 8008af4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d1e5      	bne.n	8008ac8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	3314      	adds	r3, #20
 8008b02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b04:	6a3b      	ldr	r3, [r7, #32]
 8008b06:	e853 3f00 	ldrex	r3, [r3]
 8008b0a:	61fb      	str	r3, [r7, #28]
   return(result);
 8008b0c:	69fb      	ldr	r3, [r7, #28]
 8008b0e:	f023 0301 	bic.w	r3, r3, #1
 8008b12:	64bb      	str	r3, [r7, #72]	; 0x48
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	3314      	adds	r3, #20
 8008b1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008b1c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008b1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008b22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b24:	e841 2300 	strex	r3, r2, [r1]
 8008b28:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d1e5      	bne.n	8008afc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b34:	2b01      	cmp	r3, #1
 8008b36:	d119      	bne.n	8008b6c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	330c      	adds	r3, #12
 8008b3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	e853 3f00 	ldrex	r3, [r3]
 8008b46:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	f023 0310 	bic.w	r3, r3, #16
 8008b4e:	647b      	str	r3, [r7, #68]	; 0x44
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	330c      	adds	r3, #12
 8008b56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008b58:	61ba      	str	r2, [r7, #24]
 8008b5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b5c:	6979      	ldr	r1, [r7, #20]
 8008b5e:	69ba      	ldr	r2, [r7, #24]
 8008b60:	e841 2300 	strex	r3, r2, [r1]
 8008b64:	613b      	str	r3, [r7, #16]
   return(result);
 8008b66:	693b      	ldr	r3, [r7, #16]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d1e5      	bne.n	8008b38 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2220      	movs	r2, #32
 8008b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2200      	movs	r2, #0
 8008b78:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008b7a:	bf00      	nop
 8008b7c:	3754      	adds	r7, #84	; 0x54
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b84:	4770      	bx	lr

08008b86 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008b86:	b580      	push	{r7, lr}
 8008b88:	b084      	sub	sp, #16
 8008b8a:	af00      	add	r7, sp, #0
 8008b8c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b92:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	2200      	movs	r2, #0
 8008b98:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008ba0:	68f8      	ldr	r0, [r7, #12]
 8008ba2:	f7ff fd4b 	bl	800863c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ba6:	bf00      	nop
 8008ba8:	3710      	adds	r7, #16
 8008baa:	46bd      	mov	sp, r7
 8008bac:	bd80      	pop	{r7, pc}

08008bae <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008bae:	b480      	push	{r7}
 8008bb0:	b085      	sub	sp, #20
 8008bb2:	af00      	add	r7, sp, #0
 8008bb4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008bbc:	b2db      	uxtb	r3, r3
 8008bbe:	2b21      	cmp	r3, #33	; 0x21
 8008bc0:	d13e      	bne.n	8008c40 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	689b      	ldr	r3, [r3, #8]
 8008bc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008bca:	d114      	bne.n	8008bf6 <UART_Transmit_IT+0x48>
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	691b      	ldr	r3, [r3, #16]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d110      	bne.n	8008bf6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	6a1b      	ldr	r3, [r3, #32]
 8008bd8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	881b      	ldrh	r3, [r3, #0]
 8008bde:	461a      	mov	r2, r3
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008be8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6a1b      	ldr	r3, [r3, #32]
 8008bee:	1c9a      	adds	r2, r3, #2
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	621a      	str	r2, [r3, #32]
 8008bf4:	e008      	b.n	8008c08 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6a1b      	ldr	r3, [r3, #32]
 8008bfa:	1c59      	adds	r1, r3, #1
 8008bfc:	687a      	ldr	r2, [r7, #4]
 8008bfe:	6211      	str	r1, [r2, #32]
 8008c00:	781a      	ldrb	r2, [r3, #0]
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008c0c:	b29b      	uxth	r3, r3
 8008c0e:	3b01      	subs	r3, #1
 8008c10:	b29b      	uxth	r3, r3
 8008c12:	687a      	ldr	r2, [r7, #4]
 8008c14:	4619      	mov	r1, r3
 8008c16:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d10f      	bne.n	8008c3c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	68da      	ldr	r2, [r3, #12]
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008c2a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	68da      	ldr	r2, [r3, #12]
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008c3a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	e000      	b.n	8008c42 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008c40:	2302      	movs	r3, #2
  }
}
 8008c42:	4618      	mov	r0, r3
 8008c44:	3714      	adds	r7, #20
 8008c46:	46bd      	mov	sp, r7
 8008c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4c:	4770      	bx	lr

08008c4e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008c4e:	b580      	push	{r7, lr}
 8008c50:	b082      	sub	sp, #8
 8008c52:	af00      	add	r7, sp, #0
 8008c54:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	68da      	ldr	r2, [r3, #12]
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008c64:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	2220      	movs	r2, #32
 8008c6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	f7ff fcc6 	bl	8008600 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008c74:	2300      	movs	r3, #0
}
 8008c76:	4618      	mov	r0, r3
 8008c78:	3708      	adds	r7, #8
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}

08008c7e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008c7e:	b580      	push	{r7, lr}
 8008c80:	b08c      	sub	sp, #48	; 0x30
 8008c82:	af00      	add	r7, sp, #0
 8008c84:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008c8c:	b2db      	uxtb	r3, r3
 8008c8e:	2b22      	cmp	r3, #34	; 0x22
 8008c90:	f040 80ab 	bne.w	8008dea <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	689b      	ldr	r3, [r3, #8]
 8008c98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c9c:	d117      	bne.n	8008cce <UART_Receive_IT+0x50>
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	691b      	ldr	r3, [r3, #16]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d113      	bne.n	8008cce <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cae:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	685b      	ldr	r3, [r3, #4]
 8008cb6:	b29b      	uxth	r3, r3
 8008cb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cbc:	b29a      	uxth	r2, r3
 8008cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cc0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cc6:	1c9a      	adds	r2, r3, #2
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	629a      	str	r2, [r3, #40]	; 0x28
 8008ccc:	e026      	b.n	8008d1c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	689b      	ldr	r3, [r3, #8]
 8008cdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ce0:	d007      	beq.n	8008cf2 <UART_Receive_IT+0x74>
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	689b      	ldr	r3, [r3, #8]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d10a      	bne.n	8008d00 <UART_Receive_IT+0x82>
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	691b      	ldr	r3, [r3, #16]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d106      	bne.n	8008d00 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	685b      	ldr	r3, [r3, #4]
 8008cf8:	b2da      	uxtb	r2, r3
 8008cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cfc:	701a      	strb	r2, [r3, #0]
 8008cfe:	e008      	b.n	8008d12 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	685b      	ldr	r3, [r3, #4]
 8008d06:	b2db      	uxtb	r3, r3
 8008d08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d0c:	b2da      	uxtb	r2, r3
 8008d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d10:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d16:	1c5a      	adds	r2, r3, #1
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008d20:	b29b      	uxth	r3, r3
 8008d22:	3b01      	subs	r3, #1
 8008d24:	b29b      	uxth	r3, r3
 8008d26:	687a      	ldr	r2, [r7, #4]
 8008d28:	4619      	mov	r1, r3
 8008d2a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d15a      	bne.n	8008de6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	68da      	ldr	r2, [r3, #12]
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f022 0220 	bic.w	r2, r2, #32
 8008d3e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	68da      	ldr	r2, [r3, #12]
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008d4e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	695a      	ldr	r2, [r3, #20]
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	f022 0201 	bic.w	r2, r2, #1
 8008d5e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2220      	movs	r2, #32
 8008d64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d6c:	2b01      	cmp	r3, #1
 8008d6e:	d135      	bne.n	8008ddc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2200      	movs	r2, #0
 8008d74:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	330c      	adds	r3, #12
 8008d7c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d7e:	697b      	ldr	r3, [r7, #20]
 8008d80:	e853 3f00 	ldrex	r3, [r3]
 8008d84:	613b      	str	r3, [r7, #16]
   return(result);
 8008d86:	693b      	ldr	r3, [r7, #16]
 8008d88:	f023 0310 	bic.w	r3, r3, #16
 8008d8c:	627b      	str	r3, [r7, #36]	; 0x24
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	330c      	adds	r3, #12
 8008d94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d96:	623a      	str	r2, [r7, #32]
 8008d98:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d9a:	69f9      	ldr	r1, [r7, #28]
 8008d9c:	6a3a      	ldr	r2, [r7, #32]
 8008d9e:	e841 2300 	strex	r3, r2, [r1]
 8008da2:	61bb      	str	r3, [r7, #24]
   return(result);
 8008da4:	69bb      	ldr	r3, [r7, #24]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d1e5      	bne.n	8008d76 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	f003 0310 	and.w	r3, r3, #16
 8008db4:	2b10      	cmp	r3, #16
 8008db6:	d10a      	bne.n	8008dce <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008db8:	2300      	movs	r3, #0
 8008dba:	60fb      	str	r3, [r7, #12]
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	60fb      	str	r3, [r7, #12]
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	685b      	ldr	r3, [r3, #4]
 8008dca:	60fb      	str	r3, [r7, #12]
 8008dcc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008dd2:	4619      	mov	r1, r3
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	f7ff fc3b 	bl	8008650 <HAL_UARTEx_RxEventCallback>
 8008dda:	e002      	b.n	8008de2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008ddc:	6878      	ldr	r0, [r7, #4]
 8008dde:	f7ff fc19 	bl	8008614 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008de2:	2300      	movs	r3, #0
 8008de4:	e002      	b.n	8008dec <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008de6:	2300      	movs	r3, #0
 8008de8:	e000      	b.n	8008dec <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008dea:	2302      	movs	r3, #2
  }
}
 8008dec:	4618      	mov	r0, r3
 8008dee:	3730      	adds	r7, #48	; 0x30
 8008df0:	46bd      	mov	sp, r7
 8008df2:	bd80      	pop	{r7, pc}

08008df4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008df4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008df8:	b0c0      	sub	sp, #256	; 0x100
 8008dfa:	af00      	add	r7, sp, #0
 8008dfc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	691b      	ldr	r3, [r3, #16]
 8008e08:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e10:	68d9      	ldr	r1, [r3, #12]
 8008e12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e16:	681a      	ldr	r2, [r3, #0]
 8008e18:	ea40 0301 	orr.w	r3, r0, r1
 8008e1c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008e1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e22:	689a      	ldr	r2, [r3, #8]
 8008e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e28:	691b      	ldr	r3, [r3, #16]
 8008e2a:	431a      	orrs	r2, r3
 8008e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e30:	695b      	ldr	r3, [r3, #20]
 8008e32:	431a      	orrs	r2, r3
 8008e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e38:	69db      	ldr	r3, [r3, #28]
 8008e3a:	4313      	orrs	r3, r2
 8008e3c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	68db      	ldr	r3, [r3, #12]
 8008e48:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008e4c:	f021 010c 	bic.w	r1, r1, #12
 8008e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e54:	681a      	ldr	r2, [r3, #0]
 8008e56:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008e5a:	430b      	orrs	r3, r1
 8008e5c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008e5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	695b      	ldr	r3, [r3, #20]
 8008e66:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008e6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e6e:	6999      	ldr	r1, [r3, #24]
 8008e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e74:	681a      	ldr	r2, [r3, #0]
 8008e76:	ea40 0301 	orr.w	r3, r0, r1
 8008e7a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e80:	681a      	ldr	r2, [r3, #0]
 8008e82:	4b8f      	ldr	r3, [pc, #572]	; (80090c0 <UART_SetConfig+0x2cc>)
 8008e84:	429a      	cmp	r2, r3
 8008e86:	d005      	beq.n	8008e94 <UART_SetConfig+0xa0>
 8008e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e8c:	681a      	ldr	r2, [r3, #0]
 8008e8e:	4b8d      	ldr	r3, [pc, #564]	; (80090c4 <UART_SetConfig+0x2d0>)
 8008e90:	429a      	cmp	r2, r3
 8008e92:	d104      	bne.n	8008e9e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008e94:	f7fe fa66 	bl	8007364 <HAL_RCC_GetPCLK2Freq>
 8008e98:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008e9c:	e003      	b.n	8008ea6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008e9e:	f7fe fa4d 	bl	800733c <HAL_RCC_GetPCLK1Freq>
 8008ea2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008ea6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008eaa:	69db      	ldr	r3, [r3, #28]
 8008eac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008eb0:	f040 810c 	bne.w	80090cc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008eb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008eb8:	2200      	movs	r2, #0
 8008eba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008ebe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008ec2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008ec6:	4622      	mov	r2, r4
 8008ec8:	462b      	mov	r3, r5
 8008eca:	1891      	adds	r1, r2, r2
 8008ecc:	65b9      	str	r1, [r7, #88]	; 0x58
 8008ece:	415b      	adcs	r3, r3
 8008ed0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008ed2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008ed6:	4621      	mov	r1, r4
 8008ed8:	eb12 0801 	adds.w	r8, r2, r1
 8008edc:	4629      	mov	r1, r5
 8008ede:	eb43 0901 	adc.w	r9, r3, r1
 8008ee2:	f04f 0200 	mov.w	r2, #0
 8008ee6:	f04f 0300 	mov.w	r3, #0
 8008eea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008eee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008ef2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008ef6:	4690      	mov	r8, r2
 8008ef8:	4699      	mov	r9, r3
 8008efa:	4623      	mov	r3, r4
 8008efc:	eb18 0303 	adds.w	r3, r8, r3
 8008f00:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008f04:	462b      	mov	r3, r5
 8008f06:	eb49 0303 	adc.w	r3, r9, r3
 8008f0a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008f0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f12:	685b      	ldr	r3, [r3, #4]
 8008f14:	2200      	movs	r2, #0
 8008f16:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008f1a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008f1e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008f22:	460b      	mov	r3, r1
 8008f24:	18db      	adds	r3, r3, r3
 8008f26:	653b      	str	r3, [r7, #80]	; 0x50
 8008f28:	4613      	mov	r3, r2
 8008f2a:	eb42 0303 	adc.w	r3, r2, r3
 8008f2e:	657b      	str	r3, [r7, #84]	; 0x54
 8008f30:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008f34:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008f38:	f7f7 feae 	bl	8000c98 <__aeabi_uldivmod>
 8008f3c:	4602      	mov	r2, r0
 8008f3e:	460b      	mov	r3, r1
 8008f40:	4b61      	ldr	r3, [pc, #388]	; (80090c8 <UART_SetConfig+0x2d4>)
 8008f42:	fba3 2302 	umull	r2, r3, r3, r2
 8008f46:	095b      	lsrs	r3, r3, #5
 8008f48:	011c      	lsls	r4, r3, #4
 8008f4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f4e:	2200      	movs	r2, #0
 8008f50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008f54:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008f58:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008f5c:	4642      	mov	r2, r8
 8008f5e:	464b      	mov	r3, r9
 8008f60:	1891      	adds	r1, r2, r2
 8008f62:	64b9      	str	r1, [r7, #72]	; 0x48
 8008f64:	415b      	adcs	r3, r3
 8008f66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008f68:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008f6c:	4641      	mov	r1, r8
 8008f6e:	eb12 0a01 	adds.w	sl, r2, r1
 8008f72:	4649      	mov	r1, r9
 8008f74:	eb43 0b01 	adc.w	fp, r3, r1
 8008f78:	f04f 0200 	mov.w	r2, #0
 8008f7c:	f04f 0300 	mov.w	r3, #0
 8008f80:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008f84:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008f88:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008f8c:	4692      	mov	sl, r2
 8008f8e:	469b      	mov	fp, r3
 8008f90:	4643      	mov	r3, r8
 8008f92:	eb1a 0303 	adds.w	r3, sl, r3
 8008f96:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008f9a:	464b      	mov	r3, r9
 8008f9c:	eb4b 0303 	adc.w	r3, fp, r3
 8008fa0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fa8:	685b      	ldr	r3, [r3, #4]
 8008faa:	2200      	movs	r2, #0
 8008fac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008fb0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008fb4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008fb8:	460b      	mov	r3, r1
 8008fba:	18db      	adds	r3, r3, r3
 8008fbc:	643b      	str	r3, [r7, #64]	; 0x40
 8008fbe:	4613      	mov	r3, r2
 8008fc0:	eb42 0303 	adc.w	r3, r2, r3
 8008fc4:	647b      	str	r3, [r7, #68]	; 0x44
 8008fc6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008fca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008fce:	f7f7 fe63 	bl	8000c98 <__aeabi_uldivmod>
 8008fd2:	4602      	mov	r2, r0
 8008fd4:	460b      	mov	r3, r1
 8008fd6:	4611      	mov	r1, r2
 8008fd8:	4b3b      	ldr	r3, [pc, #236]	; (80090c8 <UART_SetConfig+0x2d4>)
 8008fda:	fba3 2301 	umull	r2, r3, r3, r1
 8008fde:	095b      	lsrs	r3, r3, #5
 8008fe0:	2264      	movs	r2, #100	; 0x64
 8008fe2:	fb02 f303 	mul.w	r3, r2, r3
 8008fe6:	1acb      	subs	r3, r1, r3
 8008fe8:	00db      	lsls	r3, r3, #3
 8008fea:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008fee:	4b36      	ldr	r3, [pc, #216]	; (80090c8 <UART_SetConfig+0x2d4>)
 8008ff0:	fba3 2302 	umull	r2, r3, r3, r2
 8008ff4:	095b      	lsrs	r3, r3, #5
 8008ff6:	005b      	lsls	r3, r3, #1
 8008ff8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008ffc:	441c      	add	r4, r3
 8008ffe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009002:	2200      	movs	r2, #0
 8009004:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009008:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800900c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009010:	4642      	mov	r2, r8
 8009012:	464b      	mov	r3, r9
 8009014:	1891      	adds	r1, r2, r2
 8009016:	63b9      	str	r1, [r7, #56]	; 0x38
 8009018:	415b      	adcs	r3, r3
 800901a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800901c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009020:	4641      	mov	r1, r8
 8009022:	1851      	adds	r1, r2, r1
 8009024:	6339      	str	r1, [r7, #48]	; 0x30
 8009026:	4649      	mov	r1, r9
 8009028:	414b      	adcs	r3, r1
 800902a:	637b      	str	r3, [r7, #52]	; 0x34
 800902c:	f04f 0200 	mov.w	r2, #0
 8009030:	f04f 0300 	mov.w	r3, #0
 8009034:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009038:	4659      	mov	r1, fp
 800903a:	00cb      	lsls	r3, r1, #3
 800903c:	4651      	mov	r1, sl
 800903e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009042:	4651      	mov	r1, sl
 8009044:	00ca      	lsls	r2, r1, #3
 8009046:	4610      	mov	r0, r2
 8009048:	4619      	mov	r1, r3
 800904a:	4603      	mov	r3, r0
 800904c:	4642      	mov	r2, r8
 800904e:	189b      	adds	r3, r3, r2
 8009050:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009054:	464b      	mov	r3, r9
 8009056:	460a      	mov	r2, r1
 8009058:	eb42 0303 	adc.w	r3, r2, r3
 800905c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009064:	685b      	ldr	r3, [r3, #4]
 8009066:	2200      	movs	r2, #0
 8009068:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800906c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009070:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009074:	460b      	mov	r3, r1
 8009076:	18db      	adds	r3, r3, r3
 8009078:	62bb      	str	r3, [r7, #40]	; 0x28
 800907a:	4613      	mov	r3, r2
 800907c:	eb42 0303 	adc.w	r3, r2, r3
 8009080:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009082:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009086:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800908a:	f7f7 fe05 	bl	8000c98 <__aeabi_uldivmod>
 800908e:	4602      	mov	r2, r0
 8009090:	460b      	mov	r3, r1
 8009092:	4b0d      	ldr	r3, [pc, #52]	; (80090c8 <UART_SetConfig+0x2d4>)
 8009094:	fba3 1302 	umull	r1, r3, r3, r2
 8009098:	095b      	lsrs	r3, r3, #5
 800909a:	2164      	movs	r1, #100	; 0x64
 800909c:	fb01 f303 	mul.w	r3, r1, r3
 80090a0:	1ad3      	subs	r3, r2, r3
 80090a2:	00db      	lsls	r3, r3, #3
 80090a4:	3332      	adds	r3, #50	; 0x32
 80090a6:	4a08      	ldr	r2, [pc, #32]	; (80090c8 <UART_SetConfig+0x2d4>)
 80090a8:	fba2 2303 	umull	r2, r3, r2, r3
 80090ac:	095b      	lsrs	r3, r3, #5
 80090ae:	f003 0207 	and.w	r2, r3, #7
 80090b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	4422      	add	r2, r4
 80090ba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80090bc:	e105      	b.n	80092ca <UART_SetConfig+0x4d6>
 80090be:	bf00      	nop
 80090c0:	40011000 	.word	0x40011000
 80090c4:	40011400 	.word	0x40011400
 80090c8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80090cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80090d0:	2200      	movs	r2, #0
 80090d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80090d6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80090da:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80090de:	4642      	mov	r2, r8
 80090e0:	464b      	mov	r3, r9
 80090e2:	1891      	adds	r1, r2, r2
 80090e4:	6239      	str	r1, [r7, #32]
 80090e6:	415b      	adcs	r3, r3
 80090e8:	627b      	str	r3, [r7, #36]	; 0x24
 80090ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80090ee:	4641      	mov	r1, r8
 80090f0:	1854      	adds	r4, r2, r1
 80090f2:	4649      	mov	r1, r9
 80090f4:	eb43 0501 	adc.w	r5, r3, r1
 80090f8:	f04f 0200 	mov.w	r2, #0
 80090fc:	f04f 0300 	mov.w	r3, #0
 8009100:	00eb      	lsls	r3, r5, #3
 8009102:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009106:	00e2      	lsls	r2, r4, #3
 8009108:	4614      	mov	r4, r2
 800910a:	461d      	mov	r5, r3
 800910c:	4643      	mov	r3, r8
 800910e:	18e3      	adds	r3, r4, r3
 8009110:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009114:	464b      	mov	r3, r9
 8009116:	eb45 0303 	adc.w	r3, r5, r3
 800911a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800911e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009122:	685b      	ldr	r3, [r3, #4]
 8009124:	2200      	movs	r2, #0
 8009126:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800912a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800912e:	f04f 0200 	mov.w	r2, #0
 8009132:	f04f 0300 	mov.w	r3, #0
 8009136:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800913a:	4629      	mov	r1, r5
 800913c:	008b      	lsls	r3, r1, #2
 800913e:	4621      	mov	r1, r4
 8009140:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009144:	4621      	mov	r1, r4
 8009146:	008a      	lsls	r2, r1, #2
 8009148:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800914c:	f7f7 fda4 	bl	8000c98 <__aeabi_uldivmod>
 8009150:	4602      	mov	r2, r0
 8009152:	460b      	mov	r3, r1
 8009154:	4b60      	ldr	r3, [pc, #384]	; (80092d8 <UART_SetConfig+0x4e4>)
 8009156:	fba3 2302 	umull	r2, r3, r3, r2
 800915a:	095b      	lsrs	r3, r3, #5
 800915c:	011c      	lsls	r4, r3, #4
 800915e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009162:	2200      	movs	r2, #0
 8009164:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009168:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800916c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009170:	4642      	mov	r2, r8
 8009172:	464b      	mov	r3, r9
 8009174:	1891      	adds	r1, r2, r2
 8009176:	61b9      	str	r1, [r7, #24]
 8009178:	415b      	adcs	r3, r3
 800917a:	61fb      	str	r3, [r7, #28]
 800917c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009180:	4641      	mov	r1, r8
 8009182:	1851      	adds	r1, r2, r1
 8009184:	6139      	str	r1, [r7, #16]
 8009186:	4649      	mov	r1, r9
 8009188:	414b      	adcs	r3, r1
 800918a:	617b      	str	r3, [r7, #20]
 800918c:	f04f 0200 	mov.w	r2, #0
 8009190:	f04f 0300 	mov.w	r3, #0
 8009194:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009198:	4659      	mov	r1, fp
 800919a:	00cb      	lsls	r3, r1, #3
 800919c:	4651      	mov	r1, sl
 800919e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80091a2:	4651      	mov	r1, sl
 80091a4:	00ca      	lsls	r2, r1, #3
 80091a6:	4610      	mov	r0, r2
 80091a8:	4619      	mov	r1, r3
 80091aa:	4603      	mov	r3, r0
 80091ac:	4642      	mov	r2, r8
 80091ae:	189b      	adds	r3, r3, r2
 80091b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80091b4:	464b      	mov	r3, r9
 80091b6:	460a      	mov	r2, r1
 80091b8:	eb42 0303 	adc.w	r3, r2, r3
 80091bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80091c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091c4:	685b      	ldr	r3, [r3, #4]
 80091c6:	2200      	movs	r2, #0
 80091c8:	67bb      	str	r3, [r7, #120]	; 0x78
 80091ca:	67fa      	str	r2, [r7, #124]	; 0x7c
 80091cc:	f04f 0200 	mov.w	r2, #0
 80091d0:	f04f 0300 	mov.w	r3, #0
 80091d4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80091d8:	4649      	mov	r1, r9
 80091da:	008b      	lsls	r3, r1, #2
 80091dc:	4641      	mov	r1, r8
 80091de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80091e2:	4641      	mov	r1, r8
 80091e4:	008a      	lsls	r2, r1, #2
 80091e6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80091ea:	f7f7 fd55 	bl	8000c98 <__aeabi_uldivmod>
 80091ee:	4602      	mov	r2, r0
 80091f0:	460b      	mov	r3, r1
 80091f2:	4b39      	ldr	r3, [pc, #228]	; (80092d8 <UART_SetConfig+0x4e4>)
 80091f4:	fba3 1302 	umull	r1, r3, r3, r2
 80091f8:	095b      	lsrs	r3, r3, #5
 80091fa:	2164      	movs	r1, #100	; 0x64
 80091fc:	fb01 f303 	mul.w	r3, r1, r3
 8009200:	1ad3      	subs	r3, r2, r3
 8009202:	011b      	lsls	r3, r3, #4
 8009204:	3332      	adds	r3, #50	; 0x32
 8009206:	4a34      	ldr	r2, [pc, #208]	; (80092d8 <UART_SetConfig+0x4e4>)
 8009208:	fba2 2303 	umull	r2, r3, r2, r3
 800920c:	095b      	lsrs	r3, r3, #5
 800920e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009212:	441c      	add	r4, r3
 8009214:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009218:	2200      	movs	r2, #0
 800921a:	673b      	str	r3, [r7, #112]	; 0x70
 800921c:	677a      	str	r2, [r7, #116]	; 0x74
 800921e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009222:	4642      	mov	r2, r8
 8009224:	464b      	mov	r3, r9
 8009226:	1891      	adds	r1, r2, r2
 8009228:	60b9      	str	r1, [r7, #8]
 800922a:	415b      	adcs	r3, r3
 800922c:	60fb      	str	r3, [r7, #12]
 800922e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009232:	4641      	mov	r1, r8
 8009234:	1851      	adds	r1, r2, r1
 8009236:	6039      	str	r1, [r7, #0]
 8009238:	4649      	mov	r1, r9
 800923a:	414b      	adcs	r3, r1
 800923c:	607b      	str	r3, [r7, #4]
 800923e:	f04f 0200 	mov.w	r2, #0
 8009242:	f04f 0300 	mov.w	r3, #0
 8009246:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800924a:	4659      	mov	r1, fp
 800924c:	00cb      	lsls	r3, r1, #3
 800924e:	4651      	mov	r1, sl
 8009250:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009254:	4651      	mov	r1, sl
 8009256:	00ca      	lsls	r2, r1, #3
 8009258:	4610      	mov	r0, r2
 800925a:	4619      	mov	r1, r3
 800925c:	4603      	mov	r3, r0
 800925e:	4642      	mov	r2, r8
 8009260:	189b      	adds	r3, r3, r2
 8009262:	66bb      	str	r3, [r7, #104]	; 0x68
 8009264:	464b      	mov	r3, r9
 8009266:	460a      	mov	r2, r1
 8009268:	eb42 0303 	adc.w	r3, r2, r3
 800926c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800926e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009272:	685b      	ldr	r3, [r3, #4]
 8009274:	2200      	movs	r2, #0
 8009276:	663b      	str	r3, [r7, #96]	; 0x60
 8009278:	667a      	str	r2, [r7, #100]	; 0x64
 800927a:	f04f 0200 	mov.w	r2, #0
 800927e:	f04f 0300 	mov.w	r3, #0
 8009282:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009286:	4649      	mov	r1, r9
 8009288:	008b      	lsls	r3, r1, #2
 800928a:	4641      	mov	r1, r8
 800928c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009290:	4641      	mov	r1, r8
 8009292:	008a      	lsls	r2, r1, #2
 8009294:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009298:	f7f7 fcfe 	bl	8000c98 <__aeabi_uldivmod>
 800929c:	4602      	mov	r2, r0
 800929e:	460b      	mov	r3, r1
 80092a0:	4b0d      	ldr	r3, [pc, #52]	; (80092d8 <UART_SetConfig+0x4e4>)
 80092a2:	fba3 1302 	umull	r1, r3, r3, r2
 80092a6:	095b      	lsrs	r3, r3, #5
 80092a8:	2164      	movs	r1, #100	; 0x64
 80092aa:	fb01 f303 	mul.w	r3, r1, r3
 80092ae:	1ad3      	subs	r3, r2, r3
 80092b0:	011b      	lsls	r3, r3, #4
 80092b2:	3332      	adds	r3, #50	; 0x32
 80092b4:	4a08      	ldr	r2, [pc, #32]	; (80092d8 <UART_SetConfig+0x4e4>)
 80092b6:	fba2 2303 	umull	r2, r3, r2, r3
 80092ba:	095b      	lsrs	r3, r3, #5
 80092bc:	f003 020f 	and.w	r2, r3, #15
 80092c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	4422      	add	r2, r4
 80092c8:	609a      	str	r2, [r3, #8]
}
 80092ca:	bf00      	nop
 80092cc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80092d0:	46bd      	mov	sp, r7
 80092d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80092d6:	bf00      	nop
 80092d8:	51eb851f 	.word	0x51eb851f

080092dc <__errno>:
 80092dc:	4b01      	ldr	r3, [pc, #4]	; (80092e4 <__errno+0x8>)
 80092de:	6818      	ldr	r0, [r3, #0]
 80092e0:	4770      	bx	lr
 80092e2:	bf00      	nop
 80092e4:	20000024 	.word	0x20000024

080092e8 <__libc_init_array>:
 80092e8:	b570      	push	{r4, r5, r6, lr}
 80092ea:	4d0d      	ldr	r5, [pc, #52]	; (8009320 <__libc_init_array+0x38>)
 80092ec:	4c0d      	ldr	r4, [pc, #52]	; (8009324 <__libc_init_array+0x3c>)
 80092ee:	1b64      	subs	r4, r4, r5
 80092f0:	10a4      	asrs	r4, r4, #2
 80092f2:	2600      	movs	r6, #0
 80092f4:	42a6      	cmp	r6, r4
 80092f6:	d109      	bne.n	800930c <__libc_init_array+0x24>
 80092f8:	4d0b      	ldr	r5, [pc, #44]	; (8009328 <__libc_init_array+0x40>)
 80092fa:	4c0c      	ldr	r4, [pc, #48]	; (800932c <__libc_init_array+0x44>)
 80092fc:	f002 ff78 	bl	800c1f0 <_init>
 8009300:	1b64      	subs	r4, r4, r5
 8009302:	10a4      	asrs	r4, r4, #2
 8009304:	2600      	movs	r6, #0
 8009306:	42a6      	cmp	r6, r4
 8009308:	d105      	bne.n	8009316 <__libc_init_array+0x2e>
 800930a:	bd70      	pop	{r4, r5, r6, pc}
 800930c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009310:	4798      	blx	r3
 8009312:	3601      	adds	r6, #1
 8009314:	e7ee      	b.n	80092f4 <__libc_init_array+0xc>
 8009316:	f855 3b04 	ldr.w	r3, [r5], #4
 800931a:	4798      	blx	r3
 800931c:	3601      	adds	r6, #1
 800931e:	e7f2      	b.n	8009306 <__libc_init_array+0x1e>
 8009320:	0800d764 	.word	0x0800d764
 8009324:	0800d764 	.word	0x0800d764
 8009328:	0800d764 	.word	0x0800d764
 800932c:	0800d768 	.word	0x0800d768

08009330 <memset>:
 8009330:	4402      	add	r2, r0
 8009332:	4603      	mov	r3, r0
 8009334:	4293      	cmp	r3, r2
 8009336:	d100      	bne.n	800933a <memset+0xa>
 8009338:	4770      	bx	lr
 800933a:	f803 1b01 	strb.w	r1, [r3], #1
 800933e:	e7f9      	b.n	8009334 <memset+0x4>

08009340 <__cvt>:
 8009340:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009344:	ec55 4b10 	vmov	r4, r5, d0
 8009348:	2d00      	cmp	r5, #0
 800934a:	460e      	mov	r6, r1
 800934c:	4619      	mov	r1, r3
 800934e:	462b      	mov	r3, r5
 8009350:	bfbb      	ittet	lt
 8009352:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009356:	461d      	movlt	r5, r3
 8009358:	2300      	movge	r3, #0
 800935a:	232d      	movlt	r3, #45	; 0x2d
 800935c:	700b      	strb	r3, [r1, #0]
 800935e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009360:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009364:	4691      	mov	r9, r2
 8009366:	f023 0820 	bic.w	r8, r3, #32
 800936a:	bfbc      	itt	lt
 800936c:	4622      	movlt	r2, r4
 800936e:	4614      	movlt	r4, r2
 8009370:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009374:	d005      	beq.n	8009382 <__cvt+0x42>
 8009376:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800937a:	d100      	bne.n	800937e <__cvt+0x3e>
 800937c:	3601      	adds	r6, #1
 800937e:	2102      	movs	r1, #2
 8009380:	e000      	b.n	8009384 <__cvt+0x44>
 8009382:	2103      	movs	r1, #3
 8009384:	ab03      	add	r3, sp, #12
 8009386:	9301      	str	r3, [sp, #4]
 8009388:	ab02      	add	r3, sp, #8
 800938a:	9300      	str	r3, [sp, #0]
 800938c:	ec45 4b10 	vmov	d0, r4, r5
 8009390:	4653      	mov	r3, sl
 8009392:	4632      	mov	r2, r6
 8009394:	f000 fcec 	bl	8009d70 <_dtoa_r>
 8009398:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800939c:	4607      	mov	r7, r0
 800939e:	d102      	bne.n	80093a6 <__cvt+0x66>
 80093a0:	f019 0f01 	tst.w	r9, #1
 80093a4:	d022      	beq.n	80093ec <__cvt+0xac>
 80093a6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80093aa:	eb07 0906 	add.w	r9, r7, r6
 80093ae:	d110      	bne.n	80093d2 <__cvt+0x92>
 80093b0:	783b      	ldrb	r3, [r7, #0]
 80093b2:	2b30      	cmp	r3, #48	; 0x30
 80093b4:	d10a      	bne.n	80093cc <__cvt+0x8c>
 80093b6:	2200      	movs	r2, #0
 80093b8:	2300      	movs	r3, #0
 80093ba:	4620      	mov	r0, r4
 80093bc:	4629      	mov	r1, r5
 80093be:	f7f7 fb8b 	bl	8000ad8 <__aeabi_dcmpeq>
 80093c2:	b918      	cbnz	r0, 80093cc <__cvt+0x8c>
 80093c4:	f1c6 0601 	rsb	r6, r6, #1
 80093c8:	f8ca 6000 	str.w	r6, [sl]
 80093cc:	f8da 3000 	ldr.w	r3, [sl]
 80093d0:	4499      	add	r9, r3
 80093d2:	2200      	movs	r2, #0
 80093d4:	2300      	movs	r3, #0
 80093d6:	4620      	mov	r0, r4
 80093d8:	4629      	mov	r1, r5
 80093da:	f7f7 fb7d 	bl	8000ad8 <__aeabi_dcmpeq>
 80093de:	b108      	cbz	r0, 80093e4 <__cvt+0xa4>
 80093e0:	f8cd 900c 	str.w	r9, [sp, #12]
 80093e4:	2230      	movs	r2, #48	; 0x30
 80093e6:	9b03      	ldr	r3, [sp, #12]
 80093e8:	454b      	cmp	r3, r9
 80093ea:	d307      	bcc.n	80093fc <__cvt+0xbc>
 80093ec:	9b03      	ldr	r3, [sp, #12]
 80093ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80093f0:	1bdb      	subs	r3, r3, r7
 80093f2:	4638      	mov	r0, r7
 80093f4:	6013      	str	r3, [r2, #0]
 80093f6:	b004      	add	sp, #16
 80093f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093fc:	1c59      	adds	r1, r3, #1
 80093fe:	9103      	str	r1, [sp, #12]
 8009400:	701a      	strb	r2, [r3, #0]
 8009402:	e7f0      	b.n	80093e6 <__cvt+0xa6>

08009404 <__exponent>:
 8009404:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009406:	4603      	mov	r3, r0
 8009408:	2900      	cmp	r1, #0
 800940a:	bfb8      	it	lt
 800940c:	4249      	neglt	r1, r1
 800940e:	f803 2b02 	strb.w	r2, [r3], #2
 8009412:	bfb4      	ite	lt
 8009414:	222d      	movlt	r2, #45	; 0x2d
 8009416:	222b      	movge	r2, #43	; 0x2b
 8009418:	2909      	cmp	r1, #9
 800941a:	7042      	strb	r2, [r0, #1]
 800941c:	dd2a      	ble.n	8009474 <__exponent+0x70>
 800941e:	f10d 0407 	add.w	r4, sp, #7
 8009422:	46a4      	mov	ip, r4
 8009424:	270a      	movs	r7, #10
 8009426:	46a6      	mov	lr, r4
 8009428:	460a      	mov	r2, r1
 800942a:	fb91 f6f7 	sdiv	r6, r1, r7
 800942e:	fb07 1516 	mls	r5, r7, r6, r1
 8009432:	3530      	adds	r5, #48	; 0x30
 8009434:	2a63      	cmp	r2, #99	; 0x63
 8009436:	f104 34ff 	add.w	r4, r4, #4294967295
 800943a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800943e:	4631      	mov	r1, r6
 8009440:	dcf1      	bgt.n	8009426 <__exponent+0x22>
 8009442:	3130      	adds	r1, #48	; 0x30
 8009444:	f1ae 0502 	sub.w	r5, lr, #2
 8009448:	f804 1c01 	strb.w	r1, [r4, #-1]
 800944c:	1c44      	adds	r4, r0, #1
 800944e:	4629      	mov	r1, r5
 8009450:	4561      	cmp	r1, ip
 8009452:	d30a      	bcc.n	800946a <__exponent+0x66>
 8009454:	f10d 0209 	add.w	r2, sp, #9
 8009458:	eba2 020e 	sub.w	r2, r2, lr
 800945c:	4565      	cmp	r5, ip
 800945e:	bf88      	it	hi
 8009460:	2200      	movhi	r2, #0
 8009462:	4413      	add	r3, r2
 8009464:	1a18      	subs	r0, r3, r0
 8009466:	b003      	add	sp, #12
 8009468:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800946a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800946e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009472:	e7ed      	b.n	8009450 <__exponent+0x4c>
 8009474:	2330      	movs	r3, #48	; 0x30
 8009476:	3130      	adds	r1, #48	; 0x30
 8009478:	7083      	strb	r3, [r0, #2]
 800947a:	70c1      	strb	r1, [r0, #3]
 800947c:	1d03      	adds	r3, r0, #4
 800947e:	e7f1      	b.n	8009464 <__exponent+0x60>

08009480 <_printf_float>:
 8009480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009484:	ed2d 8b02 	vpush	{d8}
 8009488:	b08d      	sub	sp, #52	; 0x34
 800948a:	460c      	mov	r4, r1
 800948c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009490:	4616      	mov	r6, r2
 8009492:	461f      	mov	r7, r3
 8009494:	4605      	mov	r5, r0
 8009496:	f001 fa59 	bl	800a94c <_localeconv_r>
 800949a:	f8d0 a000 	ldr.w	sl, [r0]
 800949e:	4650      	mov	r0, sl
 80094a0:	f7f6 fe9e 	bl	80001e0 <strlen>
 80094a4:	2300      	movs	r3, #0
 80094a6:	930a      	str	r3, [sp, #40]	; 0x28
 80094a8:	6823      	ldr	r3, [r4, #0]
 80094aa:	9305      	str	r3, [sp, #20]
 80094ac:	f8d8 3000 	ldr.w	r3, [r8]
 80094b0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80094b4:	3307      	adds	r3, #7
 80094b6:	f023 0307 	bic.w	r3, r3, #7
 80094ba:	f103 0208 	add.w	r2, r3, #8
 80094be:	f8c8 2000 	str.w	r2, [r8]
 80094c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094c6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80094ca:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80094ce:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80094d2:	9307      	str	r3, [sp, #28]
 80094d4:	f8cd 8018 	str.w	r8, [sp, #24]
 80094d8:	ee08 0a10 	vmov	s16, r0
 80094dc:	4b9f      	ldr	r3, [pc, #636]	; (800975c <_printf_float+0x2dc>)
 80094de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80094e2:	f04f 32ff 	mov.w	r2, #4294967295
 80094e6:	f7f7 fb29 	bl	8000b3c <__aeabi_dcmpun>
 80094ea:	bb88      	cbnz	r0, 8009550 <_printf_float+0xd0>
 80094ec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80094f0:	4b9a      	ldr	r3, [pc, #616]	; (800975c <_printf_float+0x2dc>)
 80094f2:	f04f 32ff 	mov.w	r2, #4294967295
 80094f6:	f7f7 fb03 	bl	8000b00 <__aeabi_dcmple>
 80094fa:	bb48      	cbnz	r0, 8009550 <_printf_float+0xd0>
 80094fc:	2200      	movs	r2, #0
 80094fe:	2300      	movs	r3, #0
 8009500:	4640      	mov	r0, r8
 8009502:	4649      	mov	r1, r9
 8009504:	f7f7 faf2 	bl	8000aec <__aeabi_dcmplt>
 8009508:	b110      	cbz	r0, 8009510 <_printf_float+0x90>
 800950a:	232d      	movs	r3, #45	; 0x2d
 800950c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009510:	4b93      	ldr	r3, [pc, #588]	; (8009760 <_printf_float+0x2e0>)
 8009512:	4894      	ldr	r0, [pc, #592]	; (8009764 <_printf_float+0x2e4>)
 8009514:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009518:	bf94      	ite	ls
 800951a:	4698      	movls	r8, r3
 800951c:	4680      	movhi	r8, r0
 800951e:	2303      	movs	r3, #3
 8009520:	6123      	str	r3, [r4, #16]
 8009522:	9b05      	ldr	r3, [sp, #20]
 8009524:	f023 0204 	bic.w	r2, r3, #4
 8009528:	6022      	str	r2, [r4, #0]
 800952a:	f04f 0900 	mov.w	r9, #0
 800952e:	9700      	str	r7, [sp, #0]
 8009530:	4633      	mov	r3, r6
 8009532:	aa0b      	add	r2, sp, #44	; 0x2c
 8009534:	4621      	mov	r1, r4
 8009536:	4628      	mov	r0, r5
 8009538:	f000 f9d8 	bl	80098ec <_printf_common>
 800953c:	3001      	adds	r0, #1
 800953e:	f040 8090 	bne.w	8009662 <_printf_float+0x1e2>
 8009542:	f04f 30ff 	mov.w	r0, #4294967295
 8009546:	b00d      	add	sp, #52	; 0x34
 8009548:	ecbd 8b02 	vpop	{d8}
 800954c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009550:	4642      	mov	r2, r8
 8009552:	464b      	mov	r3, r9
 8009554:	4640      	mov	r0, r8
 8009556:	4649      	mov	r1, r9
 8009558:	f7f7 faf0 	bl	8000b3c <__aeabi_dcmpun>
 800955c:	b140      	cbz	r0, 8009570 <_printf_float+0xf0>
 800955e:	464b      	mov	r3, r9
 8009560:	2b00      	cmp	r3, #0
 8009562:	bfbc      	itt	lt
 8009564:	232d      	movlt	r3, #45	; 0x2d
 8009566:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800956a:	487f      	ldr	r0, [pc, #508]	; (8009768 <_printf_float+0x2e8>)
 800956c:	4b7f      	ldr	r3, [pc, #508]	; (800976c <_printf_float+0x2ec>)
 800956e:	e7d1      	b.n	8009514 <_printf_float+0x94>
 8009570:	6863      	ldr	r3, [r4, #4]
 8009572:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009576:	9206      	str	r2, [sp, #24]
 8009578:	1c5a      	adds	r2, r3, #1
 800957a:	d13f      	bne.n	80095fc <_printf_float+0x17c>
 800957c:	2306      	movs	r3, #6
 800957e:	6063      	str	r3, [r4, #4]
 8009580:	9b05      	ldr	r3, [sp, #20]
 8009582:	6861      	ldr	r1, [r4, #4]
 8009584:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009588:	2300      	movs	r3, #0
 800958a:	9303      	str	r3, [sp, #12]
 800958c:	ab0a      	add	r3, sp, #40	; 0x28
 800958e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009592:	ab09      	add	r3, sp, #36	; 0x24
 8009594:	ec49 8b10 	vmov	d0, r8, r9
 8009598:	9300      	str	r3, [sp, #0]
 800959a:	6022      	str	r2, [r4, #0]
 800959c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80095a0:	4628      	mov	r0, r5
 80095a2:	f7ff fecd 	bl	8009340 <__cvt>
 80095a6:	9b06      	ldr	r3, [sp, #24]
 80095a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80095aa:	2b47      	cmp	r3, #71	; 0x47
 80095ac:	4680      	mov	r8, r0
 80095ae:	d108      	bne.n	80095c2 <_printf_float+0x142>
 80095b0:	1cc8      	adds	r0, r1, #3
 80095b2:	db02      	blt.n	80095ba <_printf_float+0x13a>
 80095b4:	6863      	ldr	r3, [r4, #4]
 80095b6:	4299      	cmp	r1, r3
 80095b8:	dd41      	ble.n	800963e <_printf_float+0x1be>
 80095ba:	f1ab 0b02 	sub.w	fp, fp, #2
 80095be:	fa5f fb8b 	uxtb.w	fp, fp
 80095c2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80095c6:	d820      	bhi.n	800960a <_printf_float+0x18a>
 80095c8:	3901      	subs	r1, #1
 80095ca:	465a      	mov	r2, fp
 80095cc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80095d0:	9109      	str	r1, [sp, #36]	; 0x24
 80095d2:	f7ff ff17 	bl	8009404 <__exponent>
 80095d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80095d8:	1813      	adds	r3, r2, r0
 80095da:	2a01      	cmp	r2, #1
 80095dc:	4681      	mov	r9, r0
 80095de:	6123      	str	r3, [r4, #16]
 80095e0:	dc02      	bgt.n	80095e8 <_printf_float+0x168>
 80095e2:	6822      	ldr	r2, [r4, #0]
 80095e4:	07d2      	lsls	r2, r2, #31
 80095e6:	d501      	bpl.n	80095ec <_printf_float+0x16c>
 80095e8:	3301      	adds	r3, #1
 80095ea:	6123      	str	r3, [r4, #16]
 80095ec:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d09c      	beq.n	800952e <_printf_float+0xae>
 80095f4:	232d      	movs	r3, #45	; 0x2d
 80095f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80095fa:	e798      	b.n	800952e <_printf_float+0xae>
 80095fc:	9a06      	ldr	r2, [sp, #24]
 80095fe:	2a47      	cmp	r2, #71	; 0x47
 8009600:	d1be      	bne.n	8009580 <_printf_float+0x100>
 8009602:	2b00      	cmp	r3, #0
 8009604:	d1bc      	bne.n	8009580 <_printf_float+0x100>
 8009606:	2301      	movs	r3, #1
 8009608:	e7b9      	b.n	800957e <_printf_float+0xfe>
 800960a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800960e:	d118      	bne.n	8009642 <_printf_float+0x1c2>
 8009610:	2900      	cmp	r1, #0
 8009612:	6863      	ldr	r3, [r4, #4]
 8009614:	dd0b      	ble.n	800962e <_printf_float+0x1ae>
 8009616:	6121      	str	r1, [r4, #16]
 8009618:	b913      	cbnz	r3, 8009620 <_printf_float+0x1a0>
 800961a:	6822      	ldr	r2, [r4, #0]
 800961c:	07d0      	lsls	r0, r2, #31
 800961e:	d502      	bpl.n	8009626 <_printf_float+0x1a6>
 8009620:	3301      	adds	r3, #1
 8009622:	440b      	add	r3, r1
 8009624:	6123      	str	r3, [r4, #16]
 8009626:	65a1      	str	r1, [r4, #88]	; 0x58
 8009628:	f04f 0900 	mov.w	r9, #0
 800962c:	e7de      	b.n	80095ec <_printf_float+0x16c>
 800962e:	b913      	cbnz	r3, 8009636 <_printf_float+0x1b6>
 8009630:	6822      	ldr	r2, [r4, #0]
 8009632:	07d2      	lsls	r2, r2, #31
 8009634:	d501      	bpl.n	800963a <_printf_float+0x1ba>
 8009636:	3302      	adds	r3, #2
 8009638:	e7f4      	b.n	8009624 <_printf_float+0x1a4>
 800963a:	2301      	movs	r3, #1
 800963c:	e7f2      	b.n	8009624 <_printf_float+0x1a4>
 800963e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009642:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009644:	4299      	cmp	r1, r3
 8009646:	db05      	blt.n	8009654 <_printf_float+0x1d4>
 8009648:	6823      	ldr	r3, [r4, #0]
 800964a:	6121      	str	r1, [r4, #16]
 800964c:	07d8      	lsls	r0, r3, #31
 800964e:	d5ea      	bpl.n	8009626 <_printf_float+0x1a6>
 8009650:	1c4b      	adds	r3, r1, #1
 8009652:	e7e7      	b.n	8009624 <_printf_float+0x1a4>
 8009654:	2900      	cmp	r1, #0
 8009656:	bfd4      	ite	le
 8009658:	f1c1 0202 	rsble	r2, r1, #2
 800965c:	2201      	movgt	r2, #1
 800965e:	4413      	add	r3, r2
 8009660:	e7e0      	b.n	8009624 <_printf_float+0x1a4>
 8009662:	6823      	ldr	r3, [r4, #0]
 8009664:	055a      	lsls	r2, r3, #21
 8009666:	d407      	bmi.n	8009678 <_printf_float+0x1f8>
 8009668:	6923      	ldr	r3, [r4, #16]
 800966a:	4642      	mov	r2, r8
 800966c:	4631      	mov	r1, r6
 800966e:	4628      	mov	r0, r5
 8009670:	47b8      	blx	r7
 8009672:	3001      	adds	r0, #1
 8009674:	d12c      	bne.n	80096d0 <_printf_float+0x250>
 8009676:	e764      	b.n	8009542 <_printf_float+0xc2>
 8009678:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800967c:	f240 80e0 	bls.w	8009840 <_printf_float+0x3c0>
 8009680:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009684:	2200      	movs	r2, #0
 8009686:	2300      	movs	r3, #0
 8009688:	f7f7 fa26 	bl	8000ad8 <__aeabi_dcmpeq>
 800968c:	2800      	cmp	r0, #0
 800968e:	d034      	beq.n	80096fa <_printf_float+0x27a>
 8009690:	4a37      	ldr	r2, [pc, #220]	; (8009770 <_printf_float+0x2f0>)
 8009692:	2301      	movs	r3, #1
 8009694:	4631      	mov	r1, r6
 8009696:	4628      	mov	r0, r5
 8009698:	47b8      	blx	r7
 800969a:	3001      	adds	r0, #1
 800969c:	f43f af51 	beq.w	8009542 <_printf_float+0xc2>
 80096a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80096a4:	429a      	cmp	r2, r3
 80096a6:	db02      	blt.n	80096ae <_printf_float+0x22e>
 80096a8:	6823      	ldr	r3, [r4, #0]
 80096aa:	07d8      	lsls	r0, r3, #31
 80096ac:	d510      	bpl.n	80096d0 <_printf_float+0x250>
 80096ae:	ee18 3a10 	vmov	r3, s16
 80096b2:	4652      	mov	r2, sl
 80096b4:	4631      	mov	r1, r6
 80096b6:	4628      	mov	r0, r5
 80096b8:	47b8      	blx	r7
 80096ba:	3001      	adds	r0, #1
 80096bc:	f43f af41 	beq.w	8009542 <_printf_float+0xc2>
 80096c0:	f04f 0800 	mov.w	r8, #0
 80096c4:	f104 091a 	add.w	r9, r4, #26
 80096c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096ca:	3b01      	subs	r3, #1
 80096cc:	4543      	cmp	r3, r8
 80096ce:	dc09      	bgt.n	80096e4 <_printf_float+0x264>
 80096d0:	6823      	ldr	r3, [r4, #0]
 80096d2:	079b      	lsls	r3, r3, #30
 80096d4:	f100 8105 	bmi.w	80098e2 <_printf_float+0x462>
 80096d8:	68e0      	ldr	r0, [r4, #12]
 80096da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80096dc:	4298      	cmp	r0, r3
 80096de:	bfb8      	it	lt
 80096e0:	4618      	movlt	r0, r3
 80096e2:	e730      	b.n	8009546 <_printf_float+0xc6>
 80096e4:	2301      	movs	r3, #1
 80096e6:	464a      	mov	r2, r9
 80096e8:	4631      	mov	r1, r6
 80096ea:	4628      	mov	r0, r5
 80096ec:	47b8      	blx	r7
 80096ee:	3001      	adds	r0, #1
 80096f0:	f43f af27 	beq.w	8009542 <_printf_float+0xc2>
 80096f4:	f108 0801 	add.w	r8, r8, #1
 80096f8:	e7e6      	b.n	80096c8 <_printf_float+0x248>
 80096fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	dc39      	bgt.n	8009774 <_printf_float+0x2f4>
 8009700:	4a1b      	ldr	r2, [pc, #108]	; (8009770 <_printf_float+0x2f0>)
 8009702:	2301      	movs	r3, #1
 8009704:	4631      	mov	r1, r6
 8009706:	4628      	mov	r0, r5
 8009708:	47b8      	blx	r7
 800970a:	3001      	adds	r0, #1
 800970c:	f43f af19 	beq.w	8009542 <_printf_float+0xc2>
 8009710:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009714:	4313      	orrs	r3, r2
 8009716:	d102      	bne.n	800971e <_printf_float+0x29e>
 8009718:	6823      	ldr	r3, [r4, #0]
 800971a:	07d9      	lsls	r1, r3, #31
 800971c:	d5d8      	bpl.n	80096d0 <_printf_float+0x250>
 800971e:	ee18 3a10 	vmov	r3, s16
 8009722:	4652      	mov	r2, sl
 8009724:	4631      	mov	r1, r6
 8009726:	4628      	mov	r0, r5
 8009728:	47b8      	blx	r7
 800972a:	3001      	adds	r0, #1
 800972c:	f43f af09 	beq.w	8009542 <_printf_float+0xc2>
 8009730:	f04f 0900 	mov.w	r9, #0
 8009734:	f104 0a1a 	add.w	sl, r4, #26
 8009738:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800973a:	425b      	negs	r3, r3
 800973c:	454b      	cmp	r3, r9
 800973e:	dc01      	bgt.n	8009744 <_printf_float+0x2c4>
 8009740:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009742:	e792      	b.n	800966a <_printf_float+0x1ea>
 8009744:	2301      	movs	r3, #1
 8009746:	4652      	mov	r2, sl
 8009748:	4631      	mov	r1, r6
 800974a:	4628      	mov	r0, r5
 800974c:	47b8      	blx	r7
 800974e:	3001      	adds	r0, #1
 8009750:	f43f aef7 	beq.w	8009542 <_printf_float+0xc2>
 8009754:	f109 0901 	add.w	r9, r9, #1
 8009758:	e7ee      	b.n	8009738 <_printf_float+0x2b8>
 800975a:	bf00      	nop
 800975c:	7fefffff 	.word	0x7fefffff
 8009760:	0800d388 	.word	0x0800d388
 8009764:	0800d38c 	.word	0x0800d38c
 8009768:	0800d394 	.word	0x0800d394
 800976c:	0800d390 	.word	0x0800d390
 8009770:	0800d398 	.word	0x0800d398
 8009774:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009776:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009778:	429a      	cmp	r2, r3
 800977a:	bfa8      	it	ge
 800977c:	461a      	movge	r2, r3
 800977e:	2a00      	cmp	r2, #0
 8009780:	4691      	mov	r9, r2
 8009782:	dc37      	bgt.n	80097f4 <_printf_float+0x374>
 8009784:	f04f 0b00 	mov.w	fp, #0
 8009788:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800978c:	f104 021a 	add.w	r2, r4, #26
 8009790:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009792:	9305      	str	r3, [sp, #20]
 8009794:	eba3 0309 	sub.w	r3, r3, r9
 8009798:	455b      	cmp	r3, fp
 800979a:	dc33      	bgt.n	8009804 <_printf_float+0x384>
 800979c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80097a0:	429a      	cmp	r2, r3
 80097a2:	db3b      	blt.n	800981c <_printf_float+0x39c>
 80097a4:	6823      	ldr	r3, [r4, #0]
 80097a6:	07da      	lsls	r2, r3, #31
 80097a8:	d438      	bmi.n	800981c <_printf_float+0x39c>
 80097aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097ac:	9a05      	ldr	r2, [sp, #20]
 80097ae:	9909      	ldr	r1, [sp, #36]	; 0x24
 80097b0:	1a9a      	subs	r2, r3, r2
 80097b2:	eba3 0901 	sub.w	r9, r3, r1
 80097b6:	4591      	cmp	r9, r2
 80097b8:	bfa8      	it	ge
 80097ba:	4691      	movge	r9, r2
 80097bc:	f1b9 0f00 	cmp.w	r9, #0
 80097c0:	dc35      	bgt.n	800982e <_printf_float+0x3ae>
 80097c2:	f04f 0800 	mov.w	r8, #0
 80097c6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80097ca:	f104 0a1a 	add.w	sl, r4, #26
 80097ce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80097d2:	1a9b      	subs	r3, r3, r2
 80097d4:	eba3 0309 	sub.w	r3, r3, r9
 80097d8:	4543      	cmp	r3, r8
 80097da:	f77f af79 	ble.w	80096d0 <_printf_float+0x250>
 80097de:	2301      	movs	r3, #1
 80097e0:	4652      	mov	r2, sl
 80097e2:	4631      	mov	r1, r6
 80097e4:	4628      	mov	r0, r5
 80097e6:	47b8      	blx	r7
 80097e8:	3001      	adds	r0, #1
 80097ea:	f43f aeaa 	beq.w	8009542 <_printf_float+0xc2>
 80097ee:	f108 0801 	add.w	r8, r8, #1
 80097f2:	e7ec      	b.n	80097ce <_printf_float+0x34e>
 80097f4:	4613      	mov	r3, r2
 80097f6:	4631      	mov	r1, r6
 80097f8:	4642      	mov	r2, r8
 80097fa:	4628      	mov	r0, r5
 80097fc:	47b8      	blx	r7
 80097fe:	3001      	adds	r0, #1
 8009800:	d1c0      	bne.n	8009784 <_printf_float+0x304>
 8009802:	e69e      	b.n	8009542 <_printf_float+0xc2>
 8009804:	2301      	movs	r3, #1
 8009806:	4631      	mov	r1, r6
 8009808:	4628      	mov	r0, r5
 800980a:	9205      	str	r2, [sp, #20]
 800980c:	47b8      	blx	r7
 800980e:	3001      	adds	r0, #1
 8009810:	f43f ae97 	beq.w	8009542 <_printf_float+0xc2>
 8009814:	9a05      	ldr	r2, [sp, #20]
 8009816:	f10b 0b01 	add.w	fp, fp, #1
 800981a:	e7b9      	b.n	8009790 <_printf_float+0x310>
 800981c:	ee18 3a10 	vmov	r3, s16
 8009820:	4652      	mov	r2, sl
 8009822:	4631      	mov	r1, r6
 8009824:	4628      	mov	r0, r5
 8009826:	47b8      	blx	r7
 8009828:	3001      	adds	r0, #1
 800982a:	d1be      	bne.n	80097aa <_printf_float+0x32a>
 800982c:	e689      	b.n	8009542 <_printf_float+0xc2>
 800982e:	9a05      	ldr	r2, [sp, #20]
 8009830:	464b      	mov	r3, r9
 8009832:	4442      	add	r2, r8
 8009834:	4631      	mov	r1, r6
 8009836:	4628      	mov	r0, r5
 8009838:	47b8      	blx	r7
 800983a:	3001      	adds	r0, #1
 800983c:	d1c1      	bne.n	80097c2 <_printf_float+0x342>
 800983e:	e680      	b.n	8009542 <_printf_float+0xc2>
 8009840:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009842:	2a01      	cmp	r2, #1
 8009844:	dc01      	bgt.n	800984a <_printf_float+0x3ca>
 8009846:	07db      	lsls	r3, r3, #31
 8009848:	d538      	bpl.n	80098bc <_printf_float+0x43c>
 800984a:	2301      	movs	r3, #1
 800984c:	4642      	mov	r2, r8
 800984e:	4631      	mov	r1, r6
 8009850:	4628      	mov	r0, r5
 8009852:	47b8      	blx	r7
 8009854:	3001      	adds	r0, #1
 8009856:	f43f ae74 	beq.w	8009542 <_printf_float+0xc2>
 800985a:	ee18 3a10 	vmov	r3, s16
 800985e:	4652      	mov	r2, sl
 8009860:	4631      	mov	r1, r6
 8009862:	4628      	mov	r0, r5
 8009864:	47b8      	blx	r7
 8009866:	3001      	adds	r0, #1
 8009868:	f43f ae6b 	beq.w	8009542 <_printf_float+0xc2>
 800986c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009870:	2200      	movs	r2, #0
 8009872:	2300      	movs	r3, #0
 8009874:	f7f7 f930 	bl	8000ad8 <__aeabi_dcmpeq>
 8009878:	b9d8      	cbnz	r0, 80098b2 <_printf_float+0x432>
 800987a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800987c:	f108 0201 	add.w	r2, r8, #1
 8009880:	3b01      	subs	r3, #1
 8009882:	4631      	mov	r1, r6
 8009884:	4628      	mov	r0, r5
 8009886:	47b8      	blx	r7
 8009888:	3001      	adds	r0, #1
 800988a:	d10e      	bne.n	80098aa <_printf_float+0x42a>
 800988c:	e659      	b.n	8009542 <_printf_float+0xc2>
 800988e:	2301      	movs	r3, #1
 8009890:	4652      	mov	r2, sl
 8009892:	4631      	mov	r1, r6
 8009894:	4628      	mov	r0, r5
 8009896:	47b8      	blx	r7
 8009898:	3001      	adds	r0, #1
 800989a:	f43f ae52 	beq.w	8009542 <_printf_float+0xc2>
 800989e:	f108 0801 	add.w	r8, r8, #1
 80098a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098a4:	3b01      	subs	r3, #1
 80098a6:	4543      	cmp	r3, r8
 80098a8:	dcf1      	bgt.n	800988e <_printf_float+0x40e>
 80098aa:	464b      	mov	r3, r9
 80098ac:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80098b0:	e6dc      	b.n	800966c <_printf_float+0x1ec>
 80098b2:	f04f 0800 	mov.w	r8, #0
 80098b6:	f104 0a1a 	add.w	sl, r4, #26
 80098ba:	e7f2      	b.n	80098a2 <_printf_float+0x422>
 80098bc:	2301      	movs	r3, #1
 80098be:	4642      	mov	r2, r8
 80098c0:	e7df      	b.n	8009882 <_printf_float+0x402>
 80098c2:	2301      	movs	r3, #1
 80098c4:	464a      	mov	r2, r9
 80098c6:	4631      	mov	r1, r6
 80098c8:	4628      	mov	r0, r5
 80098ca:	47b8      	blx	r7
 80098cc:	3001      	adds	r0, #1
 80098ce:	f43f ae38 	beq.w	8009542 <_printf_float+0xc2>
 80098d2:	f108 0801 	add.w	r8, r8, #1
 80098d6:	68e3      	ldr	r3, [r4, #12]
 80098d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80098da:	1a5b      	subs	r3, r3, r1
 80098dc:	4543      	cmp	r3, r8
 80098de:	dcf0      	bgt.n	80098c2 <_printf_float+0x442>
 80098e0:	e6fa      	b.n	80096d8 <_printf_float+0x258>
 80098e2:	f04f 0800 	mov.w	r8, #0
 80098e6:	f104 0919 	add.w	r9, r4, #25
 80098ea:	e7f4      	b.n	80098d6 <_printf_float+0x456>

080098ec <_printf_common>:
 80098ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098f0:	4616      	mov	r6, r2
 80098f2:	4699      	mov	r9, r3
 80098f4:	688a      	ldr	r2, [r1, #8]
 80098f6:	690b      	ldr	r3, [r1, #16]
 80098f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80098fc:	4293      	cmp	r3, r2
 80098fe:	bfb8      	it	lt
 8009900:	4613      	movlt	r3, r2
 8009902:	6033      	str	r3, [r6, #0]
 8009904:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009908:	4607      	mov	r7, r0
 800990a:	460c      	mov	r4, r1
 800990c:	b10a      	cbz	r2, 8009912 <_printf_common+0x26>
 800990e:	3301      	adds	r3, #1
 8009910:	6033      	str	r3, [r6, #0]
 8009912:	6823      	ldr	r3, [r4, #0]
 8009914:	0699      	lsls	r1, r3, #26
 8009916:	bf42      	ittt	mi
 8009918:	6833      	ldrmi	r3, [r6, #0]
 800991a:	3302      	addmi	r3, #2
 800991c:	6033      	strmi	r3, [r6, #0]
 800991e:	6825      	ldr	r5, [r4, #0]
 8009920:	f015 0506 	ands.w	r5, r5, #6
 8009924:	d106      	bne.n	8009934 <_printf_common+0x48>
 8009926:	f104 0a19 	add.w	sl, r4, #25
 800992a:	68e3      	ldr	r3, [r4, #12]
 800992c:	6832      	ldr	r2, [r6, #0]
 800992e:	1a9b      	subs	r3, r3, r2
 8009930:	42ab      	cmp	r3, r5
 8009932:	dc26      	bgt.n	8009982 <_printf_common+0x96>
 8009934:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009938:	1e13      	subs	r3, r2, #0
 800993a:	6822      	ldr	r2, [r4, #0]
 800993c:	bf18      	it	ne
 800993e:	2301      	movne	r3, #1
 8009940:	0692      	lsls	r2, r2, #26
 8009942:	d42b      	bmi.n	800999c <_printf_common+0xb0>
 8009944:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009948:	4649      	mov	r1, r9
 800994a:	4638      	mov	r0, r7
 800994c:	47c0      	blx	r8
 800994e:	3001      	adds	r0, #1
 8009950:	d01e      	beq.n	8009990 <_printf_common+0xa4>
 8009952:	6823      	ldr	r3, [r4, #0]
 8009954:	68e5      	ldr	r5, [r4, #12]
 8009956:	6832      	ldr	r2, [r6, #0]
 8009958:	f003 0306 	and.w	r3, r3, #6
 800995c:	2b04      	cmp	r3, #4
 800995e:	bf08      	it	eq
 8009960:	1aad      	subeq	r5, r5, r2
 8009962:	68a3      	ldr	r3, [r4, #8]
 8009964:	6922      	ldr	r2, [r4, #16]
 8009966:	bf0c      	ite	eq
 8009968:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800996c:	2500      	movne	r5, #0
 800996e:	4293      	cmp	r3, r2
 8009970:	bfc4      	itt	gt
 8009972:	1a9b      	subgt	r3, r3, r2
 8009974:	18ed      	addgt	r5, r5, r3
 8009976:	2600      	movs	r6, #0
 8009978:	341a      	adds	r4, #26
 800997a:	42b5      	cmp	r5, r6
 800997c:	d11a      	bne.n	80099b4 <_printf_common+0xc8>
 800997e:	2000      	movs	r0, #0
 8009980:	e008      	b.n	8009994 <_printf_common+0xa8>
 8009982:	2301      	movs	r3, #1
 8009984:	4652      	mov	r2, sl
 8009986:	4649      	mov	r1, r9
 8009988:	4638      	mov	r0, r7
 800998a:	47c0      	blx	r8
 800998c:	3001      	adds	r0, #1
 800998e:	d103      	bne.n	8009998 <_printf_common+0xac>
 8009990:	f04f 30ff 	mov.w	r0, #4294967295
 8009994:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009998:	3501      	adds	r5, #1
 800999a:	e7c6      	b.n	800992a <_printf_common+0x3e>
 800999c:	18e1      	adds	r1, r4, r3
 800999e:	1c5a      	adds	r2, r3, #1
 80099a0:	2030      	movs	r0, #48	; 0x30
 80099a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80099a6:	4422      	add	r2, r4
 80099a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80099ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80099b0:	3302      	adds	r3, #2
 80099b2:	e7c7      	b.n	8009944 <_printf_common+0x58>
 80099b4:	2301      	movs	r3, #1
 80099b6:	4622      	mov	r2, r4
 80099b8:	4649      	mov	r1, r9
 80099ba:	4638      	mov	r0, r7
 80099bc:	47c0      	blx	r8
 80099be:	3001      	adds	r0, #1
 80099c0:	d0e6      	beq.n	8009990 <_printf_common+0xa4>
 80099c2:	3601      	adds	r6, #1
 80099c4:	e7d9      	b.n	800997a <_printf_common+0x8e>
	...

080099c8 <_printf_i>:
 80099c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80099cc:	7e0f      	ldrb	r7, [r1, #24]
 80099ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80099d0:	2f78      	cmp	r7, #120	; 0x78
 80099d2:	4691      	mov	r9, r2
 80099d4:	4680      	mov	r8, r0
 80099d6:	460c      	mov	r4, r1
 80099d8:	469a      	mov	sl, r3
 80099da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80099de:	d807      	bhi.n	80099f0 <_printf_i+0x28>
 80099e0:	2f62      	cmp	r7, #98	; 0x62
 80099e2:	d80a      	bhi.n	80099fa <_printf_i+0x32>
 80099e4:	2f00      	cmp	r7, #0
 80099e6:	f000 80d8 	beq.w	8009b9a <_printf_i+0x1d2>
 80099ea:	2f58      	cmp	r7, #88	; 0x58
 80099ec:	f000 80a3 	beq.w	8009b36 <_printf_i+0x16e>
 80099f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80099f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80099f8:	e03a      	b.n	8009a70 <_printf_i+0xa8>
 80099fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80099fe:	2b15      	cmp	r3, #21
 8009a00:	d8f6      	bhi.n	80099f0 <_printf_i+0x28>
 8009a02:	a101      	add	r1, pc, #4	; (adr r1, 8009a08 <_printf_i+0x40>)
 8009a04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009a08:	08009a61 	.word	0x08009a61
 8009a0c:	08009a75 	.word	0x08009a75
 8009a10:	080099f1 	.word	0x080099f1
 8009a14:	080099f1 	.word	0x080099f1
 8009a18:	080099f1 	.word	0x080099f1
 8009a1c:	080099f1 	.word	0x080099f1
 8009a20:	08009a75 	.word	0x08009a75
 8009a24:	080099f1 	.word	0x080099f1
 8009a28:	080099f1 	.word	0x080099f1
 8009a2c:	080099f1 	.word	0x080099f1
 8009a30:	080099f1 	.word	0x080099f1
 8009a34:	08009b81 	.word	0x08009b81
 8009a38:	08009aa5 	.word	0x08009aa5
 8009a3c:	08009b63 	.word	0x08009b63
 8009a40:	080099f1 	.word	0x080099f1
 8009a44:	080099f1 	.word	0x080099f1
 8009a48:	08009ba3 	.word	0x08009ba3
 8009a4c:	080099f1 	.word	0x080099f1
 8009a50:	08009aa5 	.word	0x08009aa5
 8009a54:	080099f1 	.word	0x080099f1
 8009a58:	080099f1 	.word	0x080099f1
 8009a5c:	08009b6b 	.word	0x08009b6b
 8009a60:	682b      	ldr	r3, [r5, #0]
 8009a62:	1d1a      	adds	r2, r3, #4
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	602a      	str	r2, [r5, #0]
 8009a68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009a6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009a70:	2301      	movs	r3, #1
 8009a72:	e0a3      	b.n	8009bbc <_printf_i+0x1f4>
 8009a74:	6820      	ldr	r0, [r4, #0]
 8009a76:	6829      	ldr	r1, [r5, #0]
 8009a78:	0606      	lsls	r6, r0, #24
 8009a7a:	f101 0304 	add.w	r3, r1, #4
 8009a7e:	d50a      	bpl.n	8009a96 <_printf_i+0xce>
 8009a80:	680e      	ldr	r6, [r1, #0]
 8009a82:	602b      	str	r3, [r5, #0]
 8009a84:	2e00      	cmp	r6, #0
 8009a86:	da03      	bge.n	8009a90 <_printf_i+0xc8>
 8009a88:	232d      	movs	r3, #45	; 0x2d
 8009a8a:	4276      	negs	r6, r6
 8009a8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a90:	485e      	ldr	r0, [pc, #376]	; (8009c0c <_printf_i+0x244>)
 8009a92:	230a      	movs	r3, #10
 8009a94:	e019      	b.n	8009aca <_printf_i+0x102>
 8009a96:	680e      	ldr	r6, [r1, #0]
 8009a98:	602b      	str	r3, [r5, #0]
 8009a9a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009a9e:	bf18      	it	ne
 8009aa0:	b236      	sxthne	r6, r6
 8009aa2:	e7ef      	b.n	8009a84 <_printf_i+0xbc>
 8009aa4:	682b      	ldr	r3, [r5, #0]
 8009aa6:	6820      	ldr	r0, [r4, #0]
 8009aa8:	1d19      	adds	r1, r3, #4
 8009aaa:	6029      	str	r1, [r5, #0]
 8009aac:	0601      	lsls	r1, r0, #24
 8009aae:	d501      	bpl.n	8009ab4 <_printf_i+0xec>
 8009ab0:	681e      	ldr	r6, [r3, #0]
 8009ab2:	e002      	b.n	8009aba <_printf_i+0xf2>
 8009ab4:	0646      	lsls	r6, r0, #25
 8009ab6:	d5fb      	bpl.n	8009ab0 <_printf_i+0xe8>
 8009ab8:	881e      	ldrh	r6, [r3, #0]
 8009aba:	4854      	ldr	r0, [pc, #336]	; (8009c0c <_printf_i+0x244>)
 8009abc:	2f6f      	cmp	r7, #111	; 0x6f
 8009abe:	bf0c      	ite	eq
 8009ac0:	2308      	moveq	r3, #8
 8009ac2:	230a      	movne	r3, #10
 8009ac4:	2100      	movs	r1, #0
 8009ac6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009aca:	6865      	ldr	r5, [r4, #4]
 8009acc:	60a5      	str	r5, [r4, #8]
 8009ace:	2d00      	cmp	r5, #0
 8009ad0:	bfa2      	ittt	ge
 8009ad2:	6821      	ldrge	r1, [r4, #0]
 8009ad4:	f021 0104 	bicge.w	r1, r1, #4
 8009ad8:	6021      	strge	r1, [r4, #0]
 8009ada:	b90e      	cbnz	r6, 8009ae0 <_printf_i+0x118>
 8009adc:	2d00      	cmp	r5, #0
 8009ade:	d04d      	beq.n	8009b7c <_printf_i+0x1b4>
 8009ae0:	4615      	mov	r5, r2
 8009ae2:	fbb6 f1f3 	udiv	r1, r6, r3
 8009ae6:	fb03 6711 	mls	r7, r3, r1, r6
 8009aea:	5dc7      	ldrb	r7, [r0, r7]
 8009aec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009af0:	4637      	mov	r7, r6
 8009af2:	42bb      	cmp	r3, r7
 8009af4:	460e      	mov	r6, r1
 8009af6:	d9f4      	bls.n	8009ae2 <_printf_i+0x11a>
 8009af8:	2b08      	cmp	r3, #8
 8009afa:	d10b      	bne.n	8009b14 <_printf_i+0x14c>
 8009afc:	6823      	ldr	r3, [r4, #0]
 8009afe:	07de      	lsls	r6, r3, #31
 8009b00:	d508      	bpl.n	8009b14 <_printf_i+0x14c>
 8009b02:	6923      	ldr	r3, [r4, #16]
 8009b04:	6861      	ldr	r1, [r4, #4]
 8009b06:	4299      	cmp	r1, r3
 8009b08:	bfde      	ittt	le
 8009b0a:	2330      	movle	r3, #48	; 0x30
 8009b0c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009b10:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009b14:	1b52      	subs	r2, r2, r5
 8009b16:	6122      	str	r2, [r4, #16]
 8009b18:	f8cd a000 	str.w	sl, [sp]
 8009b1c:	464b      	mov	r3, r9
 8009b1e:	aa03      	add	r2, sp, #12
 8009b20:	4621      	mov	r1, r4
 8009b22:	4640      	mov	r0, r8
 8009b24:	f7ff fee2 	bl	80098ec <_printf_common>
 8009b28:	3001      	adds	r0, #1
 8009b2a:	d14c      	bne.n	8009bc6 <_printf_i+0x1fe>
 8009b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8009b30:	b004      	add	sp, #16
 8009b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b36:	4835      	ldr	r0, [pc, #212]	; (8009c0c <_printf_i+0x244>)
 8009b38:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009b3c:	6829      	ldr	r1, [r5, #0]
 8009b3e:	6823      	ldr	r3, [r4, #0]
 8009b40:	f851 6b04 	ldr.w	r6, [r1], #4
 8009b44:	6029      	str	r1, [r5, #0]
 8009b46:	061d      	lsls	r5, r3, #24
 8009b48:	d514      	bpl.n	8009b74 <_printf_i+0x1ac>
 8009b4a:	07df      	lsls	r7, r3, #31
 8009b4c:	bf44      	itt	mi
 8009b4e:	f043 0320 	orrmi.w	r3, r3, #32
 8009b52:	6023      	strmi	r3, [r4, #0]
 8009b54:	b91e      	cbnz	r6, 8009b5e <_printf_i+0x196>
 8009b56:	6823      	ldr	r3, [r4, #0]
 8009b58:	f023 0320 	bic.w	r3, r3, #32
 8009b5c:	6023      	str	r3, [r4, #0]
 8009b5e:	2310      	movs	r3, #16
 8009b60:	e7b0      	b.n	8009ac4 <_printf_i+0xfc>
 8009b62:	6823      	ldr	r3, [r4, #0]
 8009b64:	f043 0320 	orr.w	r3, r3, #32
 8009b68:	6023      	str	r3, [r4, #0]
 8009b6a:	2378      	movs	r3, #120	; 0x78
 8009b6c:	4828      	ldr	r0, [pc, #160]	; (8009c10 <_printf_i+0x248>)
 8009b6e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009b72:	e7e3      	b.n	8009b3c <_printf_i+0x174>
 8009b74:	0659      	lsls	r1, r3, #25
 8009b76:	bf48      	it	mi
 8009b78:	b2b6      	uxthmi	r6, r6
 8009b7a:	e7e6      	b.n	8009b4a <_printf_i+0x182>
 8009b7c:	4615      	mov	r5, r2
 8009b7e:	e7bb      	b.n	8009af8 <_printf_i+0x130>
 8009b80:	682b      	ldr	r3, [r5, #0]
 8009b82:	6826      	ldr	r6, [r4, #0]
 8009b84:	6961      	ldr	r1, [r4, #20]
 8009b86:	1d18      	adds	r0, r3, #4
 8009b88:	6028      	str	r0, [r5, #0]
 8009b8a:	0635      	lsls	r5, r6, #24
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	d501      	bpl.n	8009b94 <_printf_i+0x1cc>
 8009b90:	6019      	str	r1, [r3, #0]
 8009b92:	e002      	b.n	8009b9a <_printf_i+0x1d2>
 8009b94:	0670      	lsls	r0, r6, #25
 8009b96:	d5fb      	bpl.n	8009b90 <_printf_i+0x1c8>
 8009b98:	8019      	strh	r1, [r3, #0]
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	6123      	str	r3, [r4, #16]
 8009b9e:	4615      	mov	r5, r2
 8009ba0:	e7ba      	b.n	8009b18 <_printf_i+0x150>
 8009ba2:	682b      	ldr	r3, [r5, #0]
 8009ba4:	1d1a      	adds	r2, r3, #4
 8009ba6:	602a      	str	r2, [r5, #0]
 8009ba8:	681d      	ldr	r5, [r3, #0]
 8009baa:	6862      	ldr	r2, [r4, #4]
 8009bac:	2100      	movs	r1, #0
 8009bae:	4628      	mov	r0, r5
 8009bb0:	f7f6 fb1e 	bl	80001f0 <memchr>
 8009bb4:	b108      	cbz	r0, 8009bba <_printf_i+0x1f2>
 8009bb6:	1b40      	subs	r0, r0, r5
 8009bb8:	6060      	str	r0, [r4, #4]
 8009bba:	6863      	ldr	r3, [r4, #4]
 8009bbc:	6123      	str	r3, [r4, #16]
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009bc4:	e7a8      	b.n	8009b18 <_printf_i+0x150>
 8009bc6:	6923      	ldr	r3, [r4, #16]
 8009bc8:	462a      	mov	r2, r5
 8009bca:	4649      	mov	r1, r9
 8009bcc:	4640      	mov	r0, r8
 8009bce:	47d0      	blx	sl
 8009bd0:	3001      	adds	r0, #1
 8009bd2:	d0ab      	beq.n	8009b2c <_printf_i+0x164>
 8009bd4:	6823      	ldr	r3, [r4, #0]
 8009bd6:	079b      	lsls	r3, r3, #30
 8009bd8:	d413      	bmi.n	8009c02 <_printf_i+0x23a>
 8009bda:	68e0      	ldr	r0, [r4, #12]
 8009bdc:	9b03      	ldr	r3, [sp, #12]
 8009bde:	4298      	cmp	r0, r3
 8009be0:	bfb8      	it	lt
 8009be2:	4618      	movlt	r0, r3
 8009be4:	e7a4      	b.n	8009b30 <_printf_i+0x168>
 8009be6:	2301      	movs	r3, #1
 8009be8:	4632      	mov	r2, r6
 8009bea:	4649      	mov	r1, r9
 8009bec:	4640      	mov	r0, r8
 8009bee:	47d0      	blx	sl
 8009bf0:	3001      	adds	r0, #1
 8009bf2:	d09b      	beq.n	8009b2c <_printf_i+0x164>
 8009bf4:	3501      	adds	r5, #1
 8009bf6:	68e3      	ldr	r3, [r4, #12]
 8009bf8:	9903      	ldr	r1, [sp, #12]
 8009bfa:	1a5b      	subs	r3, r3, r1
 8009bfc:	42ab      	cmp	r3, r5
 8009bfe:	dcf2      	bgt.n	8009be6 <_printf_i+0x21e>
 8009c00:	e7eb      	b.n	8009bda <_printf_i+0x212>
 8009c02:	2500      	movs	r5, #0
 8009c04:	f104 0619 	add.w	r6, r4, #25
 8009c08:	e7f5      	b.n	8009bf6 <_printf_i+0x22e>
 8009c0a:	bf00      	nop
 8009c0c:	0800d39a 	.word	0x0800d39a
 8009c10:	0800d3ab 	.word	0x0800d3ab

08009c14 <siprintf>:
 8009c14:	b40e      	push	{r1, r2, r3}
 8009c16:	b500      	push	{lr}
 8009c18:	b09c      	sub	sp, #112	; 0x70
 8009c1a:	ab1d      	add	r3, sp, #116	; 0x74
 8009c1c:	9002      	str	r0, [sp, #8]
 8009c1e:	9006      	str	r0, [sp, #24]
 8009c20:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009c24:	4809      	ldr	r0, [pc, #36]	; (8009c4c <siprintf+0x38>)
 8009c26:	9107      	str	r1, [sp, #28]
 8009c28:	9104      	str	r1, [sp, #16]
 8009c2a:	4909      	ldr	r1, [pc, #36]	; (8009c50 <siprintf+0x3c>)
 8009c2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c30:	9105      	str	r1, [sp, #20]
 8009c32:	6800      	ldr	r0, [r0, #0]
 8009c34:	9301      	str	r3, [sp, #4]
 8009c36:	a902      	add	r1, sp, #8
 8009c38:	f001 fb78 	bl	800b32c <_svfiprintf_r>
 8009c3c:	9b02      	ldr	r3, [sp, #8]
 8009c3e:	2200      	movs	r2, #0
 8009c40:	701a      	strb	r2, [r3, #0]
 8009c42:	b01c      	add	sp, #112	; 0x70
 8009c44:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c48:	b003      	add	sp, #12
 8009c4a:	4770      	bx	lr
 8009c4c:	20000024 	.word	0x20000024
 8009c50:	ffff0208 	.word	0xffff0208

08009c54 <quorem>:
 8009c54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c58:	6903      	ldr	r3, [r0, #16]
 8009c5a:	690c      	ldr	r4, [r1, #16]
 8009c5c:	42a3      	cmp	r3, r4
 8009c5e:	4607      	mov	r7, r0
 8009c60:	f2c0 8081 	blt.w	8009d66 <quorem+0x112>
 8009c64:	3c01      	subs	r4, #1
 8009c66:	f101 0814 	add.w	r8, r1, #20
 8009c6a:	f100 0514 	add.w	r5, r0, #20
 8009c6e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009c72:	9301      	str	r3, [sp, #4]
 8009c74:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009c78:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009c7c:	3301      	adds	r3, #1
 8009c7e:	429a      	cmp	r2, r3
 8009c80:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009c84:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009c88:	fbb2 f6f3 	udiv	r6, r2, r3
 8009c8c:	d331      	bcc.n	8009cf2 <quorem+0x9e>
 8009c8e:	f04f 0e00 	mov.w	lr, #0
 8009c92:	4640      	mov	r0, r8
 8009c94:	46ac      	mov	ip, r5
 8009c96:	46f2      	mov	sl, lr
 8009c98:	f850 2b04 	ldr.w	r2, [r0], #4
 8009c9c:	b293      	uxth	r3, r2
 8009c9e:	fb06 e303 	mla	r3, r6, r3, lr
 8009ca2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009ca6:	b29b      	uxth	r3, r3
 8009ca8:	ebaa 0303 	sub.w	r3, sl, r3
 8009cac:	f8dc a000 	ldr.w	sl, [ip]
 8009cb0:	0c12      	lsrs	r2, r2, #16
 8009cb2:	fa13 f38a 	uxtah	r3, r3, sl
 8009cb6:	fb06 e202 	mla	r2, r6, r2, lr
 8009cba:	9300      	str	r3, [sp, #0]
 8009cbc:	9b00      	ldr	r3, [sp, #0]
 8009cbe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009cc2:	b292      	uxth	r2, r2
 8009cc4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009cc8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009ccc:	f8bd 3000 	ldrh.w	r3, [sp]
 8009cd0:	4581      	cmp	r9, r0
 8009cd2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009cd6:	f84c 3b04 	str.w	r3, [ip], #4
 8009cda:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009cde:	d2db      	bcs.n	8009c98 <quorem+0x44>
 8009ce0:	f855 300b 	ldr.w	r3, [r5, fp]
 8009ce4:	b92b      	cbnz	r3, 8009cf2 <quorem+0x9e>
 8009ce6:	9b01      	ldr	r3, [sp, #4]
 8009ce8:	3b04      	subs	r3, #4
 8009cea:	429d      	cmp	r5, r3
 8009cec:	461a      	mov	r2, r3
 8009cee:	d32e      	bcc.n	8009d4e <quorem+0xfa>
 8009cf0:	613c      	str	r4, [r7, #16]
 8009cf2:	4638      	mov	r0, r7
 8009cf4:	f001 f8c6 	bl	800ae84 <__mcmp>
 8009cf8:	2800      	cmp	r0, #0
 8009cfa:	db24      	blt.n	8009d46 <quorem+0xf2>
 8009cfc:	3601      	adds	r6, #1
 8009cfe:	4628      	mov	r0, r5
 8009d00:	f04f 0c00 	mov.w	ip, #0
 8009d04:	f858 2b04 	ldr.w	r2, [r8], #4
 8009d08:	f8d0 e000 	ldr.w	lr, [r0]
 8009d0c:	b293      	uxth	r3, r2
 8009d0e:	ebac 0303 	sub.w	r3, ip, r3
 8009d12:	0c12      	lsrs	r2, r2, #16
 8009d14:	fa13 f38e 	uxtah	r3, r3, lr
 8009d18:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009d1c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009d20:	b29b      	uxth	r3, r3
 8009d22:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009d26:	45c1      	cmp	r9, r8
 8009d28:	f840 3b04 	str.w	r3, [r0], #4
 8009d2c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009d30:	d2e8      	bcs.n	8009d04 <quorem+0xb0>
 8009d32:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009d36:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009d3a:	b922      	cbnz	r2, 8009d46 <quorem+0xf2>
 8009d3c:	3b04      	subs	r3, #4
 8009d3e:	429d      	cmp	r5, r3
 8009d40:	461a      	mov	r2, r3
 8009d42:	d30a      	bcc.n	8009d5a <quorem+0x106>
 8009d44:	613c      	str	r4, [r7, #16]
 8009d46:	4630      	mov	r0, r6
 8009d48:	b003      	add	sp, #12
 8009d4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d4e:	6812      	ldr	r2, [r2, #0]
 8009d50:	3b04      	subs	r3, #4
 8009d52:	2a00      	cmp	r2, #0
 8009d54:	d1cc      	bne.n	8009cf0 <quorem+0x9c>
 8009d56:	3c01      	subs	r4, #1
 8009d58:	e7c7      	b.n	8009cea <quorem+0x96>
 8009d5a:	6812      	ldr	r2, [r2, #0]
 8009d5c:	3b04      	subs	r3, #4
 8009d5e:	2a00      	cmp	r2, #0
 8009d60:	d1f0      	bne.n	8009d44 <quorem+0xf0>
 8009d62:	3c01      	subs	r4, #1
 8009d64:	e7eb      	b.n	8009d3e <quorem+0xea>
 8009d66:	2000      	movs	r0, #0
 8009d68:	e7ee      	b.n	8009d48 <quorem+0xf4>
 8009d6a:	0000      	movs	r0, r0
 8009d6c:	0000      	movs	r0, r0
	...

08009d70 <_dtoa_r>:
 8009d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d74:	ed2d 8b04 	vpush	{d8-d9}
 8009d78:	ec57 6b10 	vmov	r6, r7, d0
 8009d7c:	b093      	sub	sp, #76	; 0x4c
 8009d7e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009d80:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009d84:	9106      	str	r1, [sp, #24]
 8009d86:	ee10 aa10 	vmov	sl, s0
 8009d8a:	4604      	mov	r4, r0
 8009d8c:	9209      	str	r2, [sp, #36]	; 0x24
 8009d8e:	930c      	str	r3, [sp, #48]	; 0x30
 8009d90:	46bb      	mov	fp, r7
 8009d92:	b975      	cbnz	r5, 8009db2 <_dtoa_r+0x42>
 8009d94:	2010      	movs	r0, #16
 8009d96:	f000 fddd 	bl	800a954 <malloc>
 8009d9a:	4602      	mov	r2, r0
 8009d9c:	6260      	str	r0, [r4, #36]	; 0x24
 8009d9e:	b920      	cbnz	r0, 8009daa <_dtoa_r+0x3a>
 8009da0:	4ba7      	ldr	r3, [pc, #668]	; (800a040 <_dtoa_r+0x2d0>)
 8009da2:	21ea      	movs	r1, #234	; 0xea
 8009da4:	48a7      	ldr	r0, [pc, #668]	; (800a044 <_dtoa_r+0x2d4>)
 8009da6:	f001 fbd1 	bl	800b54c <__assert_func>
 8009daa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009dae:	6005      	str	r5, [r0, #0]
 8009db0:	60c5      	str	r5, [r0, #12]
 8009db2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009db4:	6819      	ldr	r1, [r3, #0]
 8009db6:	b151      	cbz	r1, 8009dce <_dtoa_r+0x5e>
 8009db8:	685a      	ldr	r2, [r3, #4]
 8009dba:	604a      	str	r2, [r1, #4]
 8009dbc:	2301      	movs	r3, #1
 8009dbe:	4093      	lsls	r3, r2
 8009dc0:	608b      	str	r3, [r1, #8]
 8009dc2:	4620      	mov	r0, r4
 8009dc4:	f000 fe1c 	bl	800aa00 <_Bfree>
 8009dc8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009dca:	2200      	movs	r2, #0
 8009dcc:	601a      	str	r2, [r3, #0]
 8009dce:	1e3b      	subs	r3, r7, #0
 8009dd0:	bfaa      	itet	ge
 8009dd2:	2300      	movge	r3, #0
 8009dd4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009dd8:	f8c8 3000 	strge.w	r3, [r8]
 8009ddc:	4b9a      	ldr	r3, [pc, #616]	; (800a048 <_dtoa_r+0x2d8>)
 8009dde:	bfbc      	itt	lt
 8009de0:	2201      	movlt	r2, #1
 8009de2:	f8c8 2000 	strlt.w	r2, [r8]
 8009de6:	ea33 030b 	bics.w	r3, r3, fp
 8009dea:	d11b      	bne.n	8009e24 <_dtoa_r+0xb4>
 8009dec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009dee:	f242 730f 	movw	r3, #9999	; 0x270f
 8009df2:	6013      	str	r3, [r2, #0]
 8009df4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009df8:	4333      	orrs	r3, r6
 8009dfa:	f000 8592 	beq.w	800a922 <_dtoa_r+0xbb2>
 8009dfe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009e00:	b963      	cbnz	r3, 8009e1c <_dtoa_r+0xac>
 8009e02:	4b92      	ldr	r3, [pc, #584]	; (800a04c <_dtoa_r+0x2dc>)
 8009e04:	e022      	b.n	8009e4c <_dtoa_r+0xdc>
 8009e06:	4b92      	ldr	r3, [pc, #584]	; (800a050 <_dtoa_r+0x2e0>)
 8009e08:	9301      	str	r3, [sp, #4]
 8009e0a:	3308      	adds	r3, #8
 8009e0c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009e0e:	6013      	str	r3, [r2, #0]
 8009e10:	9801      	ldr	r0, [sp, #4]
 8009e12:	b013      	add	sp, #76	; 0x4c
 8009e14:	ecbd 8b04 	vpop	{d8-d9}
 8009e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e1c:	4b8b      	ldr	r3, [pc, #556]	; (800a04c <_dtoa_r+0x2dc>)
 8009e1e:	9301      	str	r3, [sp, #4]
 8009e20:	3303      	adds	r3, #3
 8009e22:	e7f3      	b.n	8009e0c <_dtoa_r+0x9c>
 8009e24:	2200      	movs	r2, #0
 8009e26:	2300      	movs	r3, #0
 8009e28:	4650      	mov	r0, sl
 8009e2a:	4659      	mov	r1, fp
 8009e2c:	f7f6 fe54 	bl	8000ad8 <__aeabi_dcmpeq>
 8009e30:	ec4b ab19 	vmov	d9, sl, fp
 8009e34:	4680      	mov	r8, r0
 8009e36:	b158      	cbz	r0, 8009e50 <_dtoa_r+0xe0>
 8009e38:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009e3a:	2301      	movs	r3, #1
 8009e3c:	6013      	str	r3, [r2, #0]
 8009e3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	f000 856b 	beq.w	800a91c <_dtoa_r+0xbac>
 8009e46:	4883      	ldr	r0, [pc, #524]	; (800a054 <_dtoa_r+0x2e4>)
 8009e48:	6018      	str	r0, [r3, #0]
 8009e4a:	1e43      	subs	r3, r0, #1
 8009e4c:	9301      	str	r3, [sp, #4]
 8009e4e:	e7df      	b.n	8009e10 <_dtoa_r+0xa0>
 8009e50:	ec4b ab10 	vmov	d0, sl, fp
 8009e54:	aa10      	add	r2, sp, #64	; 0x40
 8009e56:	a911      	add	r1, sp, #68	; 0x44
 8009e58:	4620      	mov	r0, r4
 8009e5a:	f001 f8b9 	bl	800afd0 <__d2b>
 8009e5e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8009e62:	ee08 0a10 	vmov	s16, r0
 8009e66:	2d00      	cmp	r5, #0
 8009e68:	f000 8084 	beq.w	8009f74 <_dtoa_r+0x204>
 8009e6c:	ee19 3a90 	vmov	r3, s19
 8009e70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009e74:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009e78:	4656      	mov	r6, sl
 8009e7a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009e7e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009e82:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8009e86:	4b74      	ldr	r3, [pc, #464]	; (800a058 <_dtoa_r+0x2e8>)
 8009e88:	2200      	movs	r2, #0
 8009e8a:	4630      	mov	r0, r6
 8009e8c:	4639      	mov	r1, r7
 8009e8e:	f7f6 fa03 	bl	8000298 <__aeabi_dsub>
 8009e92:	a365      	add	r3, pc, #404	; (adr r3, 800a028 <_dtoa_r+0x2b8>)
 8009e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e98:	f7f6 fbb6 	bl	8000608 <__aeabi_dmul>
 8009e9c:	a364      	add	r3, pc, #400	; (adr r3, 800a030 <_dtoa_r+0x2c0>)
 8009e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ea2:	f7f6 f9fb 	bl	800029c <__adddf3>
 8009ea6:	4606      	mov	r6, r0
 8009ea8:	4628      	mov	r0, r5
 8009eaa:	460f      	mov	r7, r1
 8009eac:	f7f6 fb42 	bl	8000534 <__aeabi_i2d>
 8009eb0:	a361      	add	r3, pc, #388	; (adr r3, 800a038 <_dtoa_r+0x2c8>)
 8009eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eb6:	f7f6 fba7 	bl	8000608 <__aeabi_dmul>
 8009eba:	4602      	mov	r2, r0
 8009ebc:	460b      	mov	r3, r1
 8009ebe:	4630      	mov	r0, r6
 8009ec0:	4639      	mov	r1, r7
 8009ec2:	f7f6 f9eb 	bl	800029c <__adddf3>
 8009ec6:	4606      	mov	r6, r0
 8009ec8:	460f      	mov	r7, r1
 8009eca:	f7f6 fe4d 	bl	8000b68 <__aeabi_d2iz>
 8009ece:	2200      	movs	r2, #0
 8009ed0:	9000      	str	r0, [sp, #0]
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	4630      	mov	r0, r6
 8009ed6:	4639      	mov	r1, r7
 8009ed8:	f7f6 fe08 	bl	8000aec <__aeabi_dcmplt>
 8009edc:	b150      	cbz	r0, 8009ef4 <_dtoa_r+0x184>
 8009ede:	9800      	ldr	r0, [sp, #0]
 8009ee0:	f7f6 fb28 	bl	8000534 <__aeabi_i2d>
 8009ee4:	4632      	mov	r2, r6
 8009ee6:	463b      	mov	r3, r7
 8009ee8:	f7f6 fdf6 	bl	8000ad8 <__aeabi_dcmpeq>
 8009eec:	b910      	cbnz	r0, 8009ef4 <_dtoa_r+0x184>
 8009eee:	9b00      	ldr	r3, [sp, #0]
 8009ef0:	3b01      	subs	r3, #1
 8009ef2:	9300      	str	r3, [sp, #0]
 8009ef4:	9b00      	ldr	r3, [sp, #0]
 8009ef6:	2b16      	cmp	r3, #22
 8009ef8:	d85a      	bhi.n	8009fb0 <_dtoa_r+0x240>
 8009efa:	9a00      	ldr	r2, [sp, #0]
 8009efc:	4b57      	ldr	r3, [pc, #348]	; (800a05c <_dtoa_r+0x2ec>)
 8009efe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f06:	ec51 0b19 	vmov	r0, r1, d9
 8009f0a:	f7f6 fdef 	bl	8000aec <__aeabi_dcmplt>
 8009f0e:	2800      	cmp	r0, #0
 8009f10:	d050      	beq.n	8009fb4 <_dtoa_r+0x244>
 8009f12:	9b00      	ldr	r3, [sp, #0]
 8009f14:	3b01      	subs	r3, #1
 8009f16:	9300      	str	r3, [sp, #0]
 8009f18:	2300      	movs	r3, #0
 8009f1a:	930b      	str	r3, [sp, #44]	; 0x2c
 8009f1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009f1e:	1b5d      	subs	r5, r3, r5
 8009f20:	1e6b      	subs	r3, r5, #1
 8009f22:	9305      	str	r3, [sp, #20]
 8009f24:	bf45      	ittet	mi
 8009f26:	f1c5 0301 	rsbmi	r3, r5, #1
 8009f2a:	9304      	strmi	r3, [sp, #16]
 8009f2c:	2300      	movpl	r3, #0
 8009f2e:	2300      	movmi	r3, #0
 8009f30:	bf4c      	ite	mi
 8009f32:	9305      	strmi	r3, [sp, #20]
 8009f34:	9304      	strpl	r3, [sp, #16]
 8009f36:	9b00      	ldr	r3, [sp, #0]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	db3d      	blt.n	8009fb8 <_dtoa_r+0x248>
 8009f3c:	9b05      	ldr	r3, [sp, #20]
 8009f3e:	9a00      	ldr	r2, [sp, #0]
 8009f40:	920a      	str	r2, [sp, #40]	; 0x28
 8009f42:	4413      	add	r3, r2
 8009f44:	9305      	str	r3, [sp, #20]
 8009f46:	2300      	movs	r3, #0
 8009f48:	9307      	str	r3, [sp, #28]
 8009f4a:	9b06      	ldr	r3, [sp, #24]
 8009f4c:	2b09      	cmp	r3, #9
 8009f4e:	f200 8089 	bhi.w	800a064 <_dtoa_r+0x2f4>
 8009f52:	2b05      	cmp	r3, #5
 8009f54:	bfc4      	itt	gt
 8009f56:	3b04      	subgt	r3, #4
 8009f58:	9306      	strgt	r3, [sp, #24]
 8009f5a:	9b06      	ldr	r3, [sp, #24]
 8009f5c:	f1a3 0302 	sub.w	r3, r3, #2
 8009f60:	bfcc      	ite	gt
 8009f62:	2500      	movgt	r5, #0
 8009f64:	2501      	movle	r5, #1
 8009f66:	2b03      	cmp	r3, #3
 8009f68:	f200 8087 	bhi.w	800a07a <_dtoa_r+0x30a>
 8009f6c:	e8df f003 	tbb	[pc, r3]
 8009f70:	59383a2d 	.word	0x59383a2d
 8009f74:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009f78:	441d      	add	r5, r3
 8009f7a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009f7e:	2b20      	cmp	r3, #32
 8009f80:	bfc1      	itttt	gt
 8009f82:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009f86:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009f8a:	fa0b f303 	lslgt.w	r3, fp, r3
 8009f8e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009f92:	bfda      	itte	le
 8009f94:	f1c3 0320 	rsble	r3, r3, #32
 8009f98:	fa06 f003 	lslle.w	r0, r6, r3
 8009f9c:	4318      	orrgt	r0, r3
 8009f9e:	f7f6 fab9 	bl	8000514 <__aeabi_ui2d>
 8009fa2:	2301      	movs	r3, #1
 8009fa4:	4606      	mov	r6, r0
 8009fa6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009faa:	3d01      	subs	r5, #1
 8009fac:	930e      	str	r3, [sp, #56]	; 0x38
 8009fae:	e76a      	b.n	8009e86 <_dtoa_r+0x116>
 8009fb0:	2301      	movs	r3, #1
 8009fb2:	e7b2      	b.n	8009f1a <_dtoa_r+0x1aa>
 8009fb4:	900b      	str	r0, [sp, #44]	; 0x2c
 8009fb6:	e7b1      	b.n	8009f1c <_dtoa_r+0x1ac>
 8009fb8:	9b04      	ldr	r3, [sp, #16]
 8009fba:	9a00      	ldr	r2, [sp, #0]
 8009fbc:	1a9b      	subs	r3, r3, r2
 8009fbe:	9304      	str	r3, [sp, #16]
 8009fc0:	4253      	negs	r3, r2
 8009fc2:	9307      	str	r3, [sp, #28]
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	930a      	str	r3, [sp, #40]	; 0x28
 8009fc8:	e7bf      	b.n	8009f4a <_dtoa_r+0x1da>
 8009fca:	2300      	movs	r3, #0
 8009fcc:	9308      	str	r3, [sp, #32]
 8009fce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	dc55      	bgt.n	800a080 <_dtoa_r+0x310>
 8009fd4:	2301      	movs	r3, #1
 8009fd6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009fda:	461a      	mov	r2, r3
 8009fdc:	9209      	str	r2, [sp, #36]	; 0x24
 8009fde:	e00c      	b.n	8009ffa <_dtoa_r+0x28a>
 8009fe0:	2301      	movs	r3, #1
 8009fe2:	e7f3      	b.n	8009fcc <_dtoa_r+0x25c>
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009fe8:	9308      	str	r3, [sp, #32]
 8009fea:	9b00      	ldr	r3, [sp, #0]
 8009fec:	4413      	add	r3, r2
 8009fee:	9302      	str	r3, [sp, #8]
 8009ff0:	3301      	adds	r3, #1
 8009ff2:	2b01      	cmp	r3, #1
 8009ff4:	9303      	str	r3, [sp, #12]
 8009ff6:	bfb8      	it	lt
 8009ff8:	2301      	movlt	r3, #1
 8009ffa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	6042      	str	r2, [r0, #4]
 800a000:	2204      	movs	r2, #4
 800a002:	f102 0614 	add.w	r6, r2, #20
 800a006:	429e      	cmp	r6, r3
 800a008:	6841      	ldr	r1, [r0, #4]
 800a00a:	d93d      	bls.n	800a088 <_dtoa_r+0x318>
 800a00c:	4620      	mov	r0, r4
 800a00e:	f000 fcb7 	bl	800a980 <_Balloc>
 800a012:	9001      	str	r0, [sp, #4]
 800a014:	2800      	cmp	r0, #0
 800a016:	d13b      	bne.n	800a090 <_dtoa_r+0x320>
 800a018:	4b11      	ldr	r3, [pc, #68]	; (800a060 <_dtoa_r+0x2f0>)
 800a01a:	4602      	mov	r2, r0
 800a01c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a020:	e6c0      	b.n	8009da4 <_dtoa_r+0x34>
 800a022:	2301      	movs	r3, #1
 800a024:	e7df      	b.n	8009fe6 <_dtoa_r+0x276>
 800a026:	bf00      	nop
 800a028:	636f4361 	.word	0x636f4361
 800a02c:	3fd287a7 	.word	0x3fd287a7
 800a030:	8b60c8b3 	.word	0x8b60c8b3
 800a034:	3fc68a28 	.word	0x3fc68a28
 800a038:	509f79fb 	.word	0x509f79fb
 800a03c:	3fd34413 	.word	0x3fd34413
 800a040:	0800d3c9 	.word	0x0800d3c9
 800a044:	0800d3e0 	.word	0x0800d3e0
 800a048:	7ff00000 	.word	0x7ff00000
 800a04c:	0800d3c5 	.word	0x0800d3c5
 800a050:	0800d3bc 	.word	0x0800d3bc
 800a054:	0800d399 	.word	0x0800d399
 800a058:	3ff80000 	.word	0x3ff80000
 800a05c:	0800d4d0 	.word	0x0800d4d0
 800a060:	0800d43b 	.word	0x0800d43b
 800a064:	2501      	movs	r5, #1
 800a066:	2300      	movs	r3, #0
 800a068:	9306      	str	r3, [sp, #24]
 800a06a:	9508      	str	r5, [sp, #32]
 800a06c:	f04f 33ff 	mov.w	r3, #4294967295
 800a070:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a074:	2200      	movs	r2, #0
 800a076:	2312      	movs	r3, #18
 800a078:	e7b0      	b.n	8009fdc <_dtoa_r+0x26c>
 800a07a:	2301      	movs	r3, #1
 800a07c:	9308      	str	r3, [sp, #32]
 800a07e:	e7f5      	b.n	800a06c <_dtoa_r+0x2fc>
 800a080:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a082:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a086:	e7b8      	b.n	8009ffa <_dtoa_r+0x28a>
 800a088:	3101      	adds	r1, #1
 800a08a:	6041      	str	r1, [r0, #4]
 800a08c:	0052      	lsls	r2, r2, #1
 800a08e:	e7b8      	b.n	800a002 <_dtoa_r+0x292>
 800a090:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a092:	9a01      	ldr	r2, [sp, #4]
 800a094:	601a      	str	r2, [r3, #0]
 800a096:	9b03      	ldr	r3, [sp, #12]
 800a098:	2b0e      	cmp	r3, #14
 800a09a:	f200 809d 	bhi.w	800a1d8 <_dtoa_r+0x468>
 800a09e:	2d00      	cmp	r5, #0
 800a0a0:	f000 809a 	beq.w	800a1d8 <_dtoa_r+0x468>
 800a0a4:	9b00      	ldr	r3, [sp, #0]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	dd32      	ble.n	800a110 <_dtoa_r+0x3a0>
 800a0aa:	4ab7      	ldr	r2, [pc, #732]	; (800a388 <_dtoa_r+0x618>)
 800a0ac:	f003 030f 	and.w	r3, r3, #15
 800a0b0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a0b4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a0b8:	9b00      	ldr	r3, [sp, #0]
 800a0ba:	05d8      	lsls	r0, r3, #23
 800a0bc:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a0c0:	d516      	bpl.n	800a0f0 <_dtoa_r+0x380>
 800a0c2:	4bb2      	ldr	r3, [pc, #712]	; (800a38c <_dtoa_r+0x61c>)
 800a0c4:	ec51 0b19 	vmov	r0, r1, d9
 800a0c8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a0cc:	f7f6 fbc6 	bl	800085c <__aeabi_ddiv>
 800a0d0:	f007 070f 	and.w	r7, r7, #15
 800a0d4:	4682      	mov	sl, r0
 800a0d6:	468b      	mov	fp, r1
 800a0d8:	2503      	movs	r5, #3
 800a0da:	4eac      	ldr	r6, [pc, #688]	; (800a38c <_dtoa_r+0x61c>)
 800a0dc:	b957      	cbnz	r7, 800a0f4 <_dtoa_r+0x384>
 800a0de:	4642      	mov	r2, r8
 800a0e0:	464b      	mov	r3, r9
 800a0e2:	4650      	mov	r0, sl
 800a0e4:	4659      	mov	r1, fp
 800a0e6:	f7f6 fbb9 	bl	800085c <__aeabi_ddiv>
 800a0ea:	4682      	mov	sl, r0
 800a0ec:	468b      	mov	fp, r1
 800a0ee:	e028      	b.n	800a142 <_dtoa_r+0x3d2>
 800a0f0:	2502      	movs	r5, #2
 800a0f2:	e7f2      	b.n	800a0da <_dtoa_r+0x36a>
 800a0f4:	07f9      	lsls	r1, r7, #31
 800a0f6:	d508      	bpl.n	800a10a <_dtoa_r+0x39a>
 800a0f8:	4640      	mov	r0, r8
 800a0fa:	4649      	mov	r1, r9
 800a0fc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a100:	f7f6 fa82 	bl	8000608 <__aeabi_dmul>
 800a104:	3501      	adds	r5, #1
 800a106:	4680      	mov	r8, r0
 800a108:	4689      	mov	r9, r1
 800a10a:	107f      	asrs	r7, r7, #1
 800a10c:	3608      	adds	r6, #8
 800a10e:	e7e5      	b.n	800a0dc <_dtoa_r+0x36c>
 800a110:	f000 809b 	beq.w	800a24a <_dtoa_r+0x4da>
 800a114:	9b00      	ldr	r3, [sp, #0]
 800a116:	4f9d      	ldr	r7, [pc, #628]	; (800a38c <_dtoa_r+0x61c>)
 800a118:	425e      	negs	r6, r3
 800a11a:	4b9b      	ldr	r3, [pc, #620]	; (800a388 <_dtoa_r+0x618>)
 800a11c:	f006 020f 	and.w	r2, r6, #15
 800a120:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a124:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a128:	ec51 0b19 	vmov	r0, r1, d9
 800a12c:	f7f6 fa6c 	bl	8000608 <__aeabi_dmul>
 800a130:	1136      	asrs	r6, r6, #4
 800a132:	4682      	mov	sl, r0
 800a134:	468b      	mov	fp, r1
 800a136:	2300      	movs	r3, #0
 800a138:	2502      	movs	r5, #2
 800a13a:	2e00      	cmp	r6, #0
 800a13c:	d17a      	bne.n	800a234 <_dtoa_r+0x4c4>
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d1d3      	bne.n	800a0ea <_dtoa_r+0x37a>
 800a142:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a144:	2b00      	cmp	r3, #0
 800a146:	f000 8082 	beq.w	800a24e <_dtoa_r+0x4de>
 800a14a:	4b91      	ldr	r3, [pc, #580]	; (800a390 <_dtoa_r+0x620>)
 800a14c:	2200      	movs	r2, #0
 800a14e:	4650      	mov	r0, sl
 800a150:	4659      	mov	r1, fp
 800a152:	f7f6 fccb 	bl	8000aec <__aeabi_dcmplt>
 800a156:	2800      	cmp	r0, #0
 800a158:	d079      	beq.n	800a24e <_dtoa_r+0x4de>
 800a15a:	9b03      	ldr	r3, [sp, #12]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d076      	beq.n	800a24e <_dtoa_r+0x4de>
 800a160:	9b02      	ldr	r3, [sp, #8]
 800a162:	2b00      	cmp	r3, #0
 800a164:	dd36      	ble.n	800a1d4 <_dtoa_r+0x464>
 800a166:	9b00      	ldr	r3, [sp, #0]
 800a168:	4650      	mov	r0, sl
 800a16a:	4659      	mov	r1, fp
 800a16c:	1e5f      	subs	r7, r3, #1
 800a16e:	2200      	movs	r2, #0
 800a170:	4b88      	ldr	r3, [pc, #544]	; (800a394 <_dtoa_r+0x624>)
 800a172:	f7f6 fa49 	bl	8000608 <__aeabi_dmul>
 800a176:	9e02      	ldr	r6, [sp, #8]
 800a178:	4682      	mov	sl, r0
 800a17a:	468b      	mov	fp, r1
 800a17c:	3501      	adds	r5, #1
 800a17e:	4628      	mov	r0, r5
 800a180:	f7f6 f9d8 	bl	8000534 <__aeabi_i2d>
 800a184:	4652      	mov	r2, sl
 800a186:	465b      	mov	r3, fp
 800a188:	f7f6 fa3e 	bl	8000608 <__aeabi_dmul>
 800a18c:	4b82      	ldr	r3, [pc, #520]	; (800a398 <_dtoa_r+0x628>)
 800a18e:	2200      	movs	r2, #0
 800a190:	f7f6 f884 	bl	800029c <__adddf3>
 800a194:	46d0      	mov	r8, sl
 800a196:	46d9      	mov	r9, fp
 800a198:	4682      	mov	sl, r0
 800a19a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a19e:	2e00      	cmp	r6, #0
 800a1a0:	d158      	bne.n	800a254 <_dtoa_r+0x4e4>
 800a1a2:	4b7e      	ldr	r3, [pc, #504]	; (800a39c <_dtoa_r+0x62c>)
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	4640      	mov	r0, r8
 800a1a8:	4649      	mov	r1, r9
 800a1aa:	f7f6 f875 	bl	8000298 <__aeabi_dsub>
 800a1ae:	4652      	mov	r2, sl
 800a1b0:	465b      	mov	r3, fp
 800a1b2:	4680      	mov	r8, r0
 800a1b4:	4689      	mov	r9, r1
 800a1b6:	f7f6 fcb7 	bl	8000b28 <__aeabi_dcmpgt>
 800a1ba:	2800      	cmp	r0, #0
 800a1bc:	f040 8295 	bne.w	800a6ea <_dtoa_r+0x97a>
 800a1c0:	4652      	mov	r2, sl
 800a1c2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a1c6:	4640      	mov	r0, r8
 800a1c8:	4649      	mov	r1, r9
 800a1ca:	f7f6 fc8f 	bl	8000aec <__aeabi_dcmplt>
 800a1ce:	2800      	cmp	r0, #0
 800a1d0:	f040 8289 	bne.w	800a6e6 <_dtoa_r+0x976>
 800a1d4:	ec5b ab19 	vmov	sl, fp, d9
 800a1d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	f2c0 8148 	blt.w	800a470 <_dtoa_r+0x700>
 800a1e0:	9a00      	ldr	r2, [sp, #0]
 800a1e2:	2a0e      	cmp	r2, #14
 800a1e4:	f300 8144 	bgt.w	800a470 <_dtoa_r+0x700>
 800a1e8:	4b67      	ldr	r3, [pc, #412]	; (800a388 <_dtoa_r+0x618>)
 800a1ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a1ee:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a1f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	f280 80d5 	bge.w	800a3a4 <_dtoa_r+0x634>
 800a1fa:	9b03      	ldr	r3, [sp, #12]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	f300 80d1 	bgt.w	800a3a4 <_dtoa_r+0x634>
 800a202:	f040 826f 	bne.w	800a6e4 <_dtoa_r+0x974>
 800a206:	4b65      	ldr	r3, [pc, #404]	; (800a39c <_dtoa_r+0x62c>)
 800a208:	2200      	movs	r2, #0
 800a20a:	4640      	mov	r0, r8
 800a20c:	4649      	mov	r1, r9
 800a20e:	f7f6 f9fb 	bl	8000608 <__aeabi_dmul>
 800a212:	4652      	mov	r2, sl
 800a214:	465b      	mov	r3, fp
 800a216:	f7f6 fc7d 	bl	8000b14 <__aeabi_dcmpge>
 800a21a:	9e03      	ldr	r6, [sp, #12]
 800a21c:	4637      	mov	r7, r6
 800a21e:	2800      	cmp	r0, #0
 800a220:	f040 8245 	bne.w	800a6ae <_dtoa_r+0x93e>
 800a224:	9d01      	ldr	r5, [sp, #4]
 800a226:	2331      	movs	r3, #49	; 0x31
 800a228:	f805 3b01 	strb.w	r3, [r5], #1
 800a22c:	9b00      	ldr	r3, [sp, #0]
 800a22e:	3301      	adds	r3, #1
 800a230:	9300      	str	r3, [sp, #0]
 800a232:	e240      	b.n	800a6b6 <_dtoa_r+0x946>
 800a234:	07f2      	lsls	r2, r6, #31
 800a236:	d505      	bpl.n	800a244 <_dtoa_r+0x4d4>
 800a238:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a23c:	f7f6 f9e4 	bl	8000608 <__aeabi_dmul>
 800a240:	3501      	adds	r5, #1
 800a242:	2301      	movs	r3, #1
 800a244:	1076      	asrs	r6, r6, #1
 800a246:	3708      	adds	r7, #8
 800a248:	e777      	b.n	800a13a <_dtoa_r+0x3ca>
 800a24a:	2502      	movs	r5, #2
 800a24c:	e779      	b.n	800a142 <_dtoa_r+0x3d2>
 800a24e:	9f00      	ldr	r7, [sp, #0]
 800a250:	9e03      	ldr	r6, [sp, #12]
 800a252:	e794      	b.n	800a17e <_dtoa_r+0x40e>
 800a254:	9901      	ldr	r1, [sp, #4]
 800a256:	4b4c      	ldr	r3, [pc, #304]	; (800a388 <_dtoa_r+0x618>)
 800a258:	4431      	add	r1, r6
 800a25a:	910d      	str	r1, [sp, #52]	; 0x34
 800a25c:	9908      	ldr	r1, [sp, #32]
 800a25e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a262:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a266:	2900      	cmp	r1, #0
 800a268:	d043      	beq.n	800a2f2 <_dtoa_r+0x582>
 800a26a:	494d      	ldr	r1, [pc, #308]	; (800a3a0 <_dtoa_r+0x630>)
 800a26c:	2000      	movs	r0, #0
 800a26e:	f7f6 faf5 	bl	800085c <__aeabi_ddiv>
 800a272:	4652      	mov	r2, sl
 800a274:	465b      	mov	r3, fp
 800a276:	f7f6 f80f 	bl	8000298 <__aeabi_dsub>
 800a27a:	9d01      	ldr	r5, [sp, #4]
 800a27c:	4682      	mov	sl, r0
 800a27e:	468b      	mov	fp, r1
 800a280:	4649      	mov	r1, r9
 800a282:	4640      	mov	r0, r8
 800a284:	f7f6 fc70 	bl	8000b68 <__aeabi_d2iz>
 800a288:	4606      	mov	r6, r0
 800a28a:	f7f6 f953 	bl	8000534 <__aeabi_i2d>
 800a28e:	4602      	mov	r2, r0
 800a290:	460b      	mov	r3, r1
 800a292:	4640      	mov	r0, r8
 800a294:	4649      	mov	r1, r9
 800a296:	f7f5 ffff 	bl	8000298 <__aeabi_dsub>
 800a29a:	3630      	adds	r6, #48	; 0x30
 800a29c:	f805 6b01 	strb.w	r6, [r5], #1
 800a2a0:	4652      	mov	r2, sl
 800a2a2:	465b      	mov	r3, fp
 800a2a4:	4680      	mov	r8, r0
 800a2a6:	4689      	mov	r9, r1
 800a2a8:	f7f6 fc20 	bl	8000aec <__aeabi_dcmplt>
 800a2ac:	2800      	cmp	r0, #0
 800a2ae:	d163      	bne.n	800a378 <_dtoa_r+0x608>
 800a2b0:	4642      	mov	r2, r8
 800a2b2:	464b      	mov	r3, r9
 800a2b4:	4936      	ldr	r1, [pc, #216]	; (800a390 <_dtoa_r+0x620>)
 800a2b6:	2000      	movs	r0, #0
 800a2b8:	f7f5 ffee 	bl	8000298 <__aeabi_dsub>
 800a2bc:	4652      	mov	r2, sl
 800a2be:	465b      	mov	r3, fp
 800a2c0:	f7f6 fc14 	bl	8000aec <__aeabi_dcmplt>
 800a2c4:	2800      	cmp	r0, #0
 800a2c6:	f040 80b5 	bne.w	800a434 <_dtoa_r+0x6c4>
 800a2ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a2cc:	429d      	cmp	r5, r3
 800a2ce:	d081      	beq.n	800a1d4 <_dtoa_r+0x464>
 800a2d0:	4b30      	ldr	r3, [pc, #192]	; (800a394 <_dtoa_r+0x624>)
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	4650      	mov	r0, sl
 800a2d6:	4659      	mov	r1, fp
 800a2d8:	f7f6 f996 	bl	8000608 <__aeabi_dmul>
 800a2dc:	4b2d      	ldr	r3, [pc, #180]	; (800a394 <_dtoa_r+0x624>)
 800a2de:	4682      	mov	sl, r0
 800a2e0:	468b      	mov	fp, r1
 800a2e2:	4640      	mov	r0, r8
 800a2e4:	4649      	mov	r1, r9
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	f7f6 f98e 	bl	8000608 <__aeabi_dmul>
 800a2ec:	4680      	mov	r8, r0
 800a2ee:	4689      	mov	r9, r1
 800a2f0:	e7c6      	b.n	800a280 <_dtoa_r+0x510>
 800a2f2:	4650      	mov	r0, sl
 800a2f4:	4659      	mov	r1, fp
 800a2f6:	f7f6 f987 	bl	8000608 <__aeabi_dmul>
 800a2fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a2fc:	9d01      	ldr	r5, [sp, #4]
 800a2fe:	930f      	str	r3, [sp, #60]	; 0x3c
 800a300:	4682      	mov	sl, r0
 800a302:	468b      	mov	fp, r1
 800a304:	4649      	mov	r1, r9
 800a306:	4640      	mov	r0, r8
 800a308:	f7f6 fc2e 	bl	8000b68 <__aeabi_d2iz>
 800a30c:	4606      	mov	r6, r0
 800a30e:	f7f6 f911 	bl	8000534 <__aeabi_i2d>
 800a312:	3630      	adds	r6, #48	; 0x30
 800a314:	4602      	mov	r2, r0
 800a316:	460b      	mov	r3, r1
 800a318:	4640      	mov	r0, r8
 800a31a:	4649      	mov	r1, r9
 800a31c:	f7f5 ffbc 	bl	8000298 <__aeabi_dsub>
 800a320:	f805 6b01 	strb.w	r6, [r5], #1
 800a324:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a326:	429d      	cmp	r5, r3
 800a328:	4680      	mov	r8, r0
 800a32a:	4689      	mov	r9, r1
 800a32c:	f04f 0200 	mov.w	r2, #0
 800a330:	d124      	bne.n	800a37c <_dtoa_r+0x60c>
 800a332:	4b1b      	ldr	r3, [pc, #108]	; (800a3a0 <_dtoa_r+0x630>)
 800a334:	4650      	mov	r0, sl
 800a336:	4659      	mov	r1, fp
 800a338:	f7f5 ffb0 	bl	800029c <__adddf3>
 800a33c:	4602      	mov	r2, r0
 800a33e:	460b      	mov	r3, r1
 800a340:	4640      	mov	r0, r8
 800a342:	4649      	mov	r1, r9
 800a344:	f7f6 fbf0 	bl	8000b28 <__aeabi_dcmpgt>
 800a348:	2800      	cmp	r0, #0
 800a34a:	d173      	bne.n	800a434 <_dtoa_r+0x6c4>
 800a34c:	4652      	mov	r2, sl
 800a34e:	465b      	mov	r3, fp
 800a350:	4913      	ldr	r1, [pc, #76]	; (800a3a0 <_dtoa_r+0x630>)
 800a352:	2000      	movs	r0, #0
 800a354:	f7f5 ffa0 	bl	8000298 <__aeabi_dsub>
 800a358:	4602      	mov	r2, r0
 800a35a:	460b      	mov	r3, r1
 800a35c:	4640      	mov	r0, r8
 800a35e:	4649      	mov	r1, r9
 800a360:	f7f6 fbc4 	bl	8000aec <__aeabi_dcmplt>
 800a364:	2800      	cmp	r0, #0
 800a366:	f43f af35 	beq.w	800a1d4 <_dtoa_r+0x464>
 800a36a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a36c:	1e6b      	subs	r3, r5, #1
 800a36e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a370:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a374:	2b30      	cmp	r3, #48	; 0x30
 800a376:	d0f8      	beq.n	800a36a <_dtoa_r+0x5fa>
 800a378:	9700      	str	r7, [sp, #0]
 800a37a:	e049      	b.n	800a410 <_dtoa_r+0x6a0>
 800a37c:	4b05      	ldr	r3, [pc, #20]	; (800a394 <_dtoa_r+0x624>)
 800a37e:	f7f6 f943 	bl	8000608 <__aeabi_dmul>
 800a382:	4680      	mov	r8, r0
 800a384:	4689      	mov	r9, r1
 800a386:	e7bd      	b.n	800a304 <_dtoa_r+0x594>
 800a388:	0800d4d0 	.word	0x0800d4d0
 800a38c:	0800d4a8 	.word	0x0800d4a8
 800a390:	3ff00000 	.word	0x3ff00000
 800a394:	40240000 	.word	0x40240000
 800a398:	401c0000 	.word	0x401c0000
 800a39c:	40140000 	.word	0x40140000
 800a3a0:	3fe00000 	.word	0x3fe00000
 800a3a4:	9d01      	ldr	r5, [sp, #4]
 800a3a6:	4656      	mov	r6, sl
 800a3a8:	465f      	mov	r7, fp
 800a3aa:	4642      	mov	r2, r8
 800a3ac:	464b      	mov	r3, r9
 800a3ae:	4630      	mov	r0, r6
 800a3b0:	4639      	mov	r1, r7
 800a3b2:	f7f6 fa53 	bl	800085c <__aeabi_ddiv>
 800a3b6:	f7f6 fbd7 	bl	8000b68 <__aeabi_d2iz>
 800a3ba:	4682      	mov	sl, r0
 800a3bc:	f7f6 f8ba 	bl	8000534 <__aeabi_i2d>
 800a3c0:	4642      	mov	r2, r8
 800a3c2:	464b      	mov	r3, r9
 800a3c4:	f7f6 f920 	bl	8000608 <__aeabi_dmul>
 800a3c8:	4602      	mov	r2, r0
 800a3ca:	460b      	mov	r3, r1
 800a3cc:	4630      	mov	r0, r6
 800a3ce:	4639      	mov	r1, r7
 800a3d0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a3d4:	f7f5 ff60 	bl	8000298 <__aeabi_dsub>
 800a3d8:	f805 6b01 	strb.w	r6, [r5], #1
 800a3dc:	9e01      	ldr	r6, [sp, #4]
 800a3de:	9f03      	ldr	r7, [sp, #12]
 800a3e0:	1bae      	subs	r6, r5, r6
 800a3e2:	42b7      	cmp	r7, r6
 800a3e4:	4602      	mov	r2, r0
 800a3e6:	460b      	mov	r3, r1
 800a3e8:	d135      	bne.n	800a456 <_dtoa_r+0x6e6>
 800a3ea:	f7f5 ff57 	bl	800029c <__adddf3>
 800a3ee:	4642      	mov	r2, r8
 800a3f0:	464b      	mov	r3, r9
 800a3f2:	4606      	mov	r6, r0
 800a3f4:	460f      	mov	r7, r1
 800a3f6:	f7f6 fb97 	bl	8000b28 <__aeabi_dcmpgt>
 800a3fa:	b9d0      	cbnz	r0, 800a432 <_dtoa_r+0x6c2>
 800a3fc:	4642      	mov	r2, r8
 800a3fe:	464b      	mov	r3, r9
 800a400:	4630      	mov	r0, r6
 800a402:	4639      	mov	r1, r7
 800a404:	f7f6 fb68 	bl	8000ad8 <__aeabi_dcmpeq>
 800a408:	b110      	cbz	r0, 800a410 <_dtoa_r+0x6a0>
 800a40a:	f01a 0f01 	tst.w	sl, #1
 800a40e:	d110      	bne.n	800a432 <_dtoa_r+0x6c2>
 800a410:	4620      	mov	r0, r4
 800a412:	ee18 1a10 	vmov	r1, s16
 800a416:	f000 faf3 	bl	800aa00 <_Bfree>
 800a41a:	2300      	movs	r3, #0
 800a41c:	9800      	ldr	r0, [sp, #0]
 800a41e:	702b      	strb	r3, [r5, #0]
 800a420:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a422:	3001      	adds	r0, #1
 800a424:	6018      	str	r0, [r3, #0]
 800a426:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a428:	2b00      	cmp	r3, #0
 800a42a:	f43f acf1 	beq.w	8009e10 <_dtoa_r+0xa0>
 800a42e:	601d      	str	r5, [r3, #0]
 800a430:	e4ee      	b.n	8009e10 <_dtoa_r+0xa0>
 800a432:	9f00      	ldr	r7, [sp, #0]
 800a434:	462b      	mov	r3, r5
 800a436:	461d      	mov	r5, r3
 800a438:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a43c:	2a39      	cmp	r2, #57	; 0x39
 800a43e:	d106      	bne.n	800a44e <_dtoa_r+0x6de>
 800a440:	9a01      	ldr	r2, [sp, #4]
 800a442:	429a      	cmp	r2, r3
 800a444:	d1f7      	bne.n	800a436 <_dtoa_r+0x6c6>
 800a446:	9901      	ldr	r1, [sp, #4]
 800a448:	2230      	movs	r2, #48	; 0x30
 800a44a:	3701      	adds	r7, #1
 800a44c:	700a      	strb	r2, [r1, #0]
 800a44e:	781a      	ldrb	r2, [r3, #0]
 800a450:	3201      	adds	r2, #1
 800a452:	701a      	strb	r2, [r3, #0]
 800a454:	e790      	b.n	800a378 <_dtoa_r+0x608>
 800a456:	4ba6      	ldr	r3, [pc, #664]	; (800a6f0 <_dtoa_r+0x980>)
 800a458:	2200      	movs	r2, #0
 800a45a:	f7f6 f8d5 	bl	8000608 <__aeabi_dmul>
 800a45e:	2200      	movs	r2, #0
 800a460:	2300      	movs	r3, #0
 800a462:	4606      	mov	r6, r0
 800a464:	460f      	mov	r7, r1
 800a466:	f7f6 fb37 	bl	8000ad8 <__aeabi_dcmpeq>
 800a46a:	2800      	cmp	r0, #0
 800a46c:	d09d      	beq.n	800a3aa <_dtoa_r+0x63a>
 800a46e:	e7cf      	b.n	800a410 <_dtoa_r+0x6a0>
 800a470:	9a08      	ldr	r2, [sp, #32]
 800a472:	2a00      	cmp	r2, #0
 800a474:	f000 80d7 	beq.w	800a626 <_dtoa_r+0x8b6>
 800a478:	9a06      	ldr	r2, [sp, #24]
 800a47a:	2a01      	cmp	r2, #1
 800a47c:	f300 80ba 	bgt.w	800a5f4 <_dtoa_r+0x884>
 800a480:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a482:	2a00      	cmp	r2, #0
 800a484:	f000 80b2 	beq.w	800a5ec <_dtoa_r+0x87c>
 800a488:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a48c:	9e07      	ldr	r6, [sp, #28]
 800a48e:	9d04      	ldr	r5, [sp, #16]
 800a490:	9a04      	ldr	r2, [sp, #16]
 800a492:	441a      	add	r2, r3
 800a494:	9204      	str	r2, [sp, #16]
 800a496:	9a05      	ldr	r2, [sp, #20]
 800a498:	2101      	movs	r1, #1
 800a49a:	441a      	add	r2, r3
 800a49c:	4620      	mov	r0, r4
 800a49e:	9205      	str	r2, [sp, #20]
 800a4a0:	f000 fb66 	bl	800ab70 <__i2b>
 800a4a4:	4607      	mov	r7, r0
 800a4a6:	2d00      	cmp	r5, #0
 800a4a8:	dd0c      	ble.n	800a4c4 <_dtoa_r+0x754>
 800a4aa:	9b05      	ldr	r3, [sp, #20]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	dd09      	ble.n	800a4c4 <_dtoa_r+0x754>
 800a4b0:	42ab      	cmp	r3, r5
 800a4b2:	9a04      	ldr	r2, [sp, #16]
 800a4b4:	bfa8      	it	ge
 800a4b6:	462b      	movge	r3, r5
 800a4b8:	1ad2      	subs	r2, r2, r3
 800a4ba:	9204      	str	r2, [sp, #16]
 800a4bc:	9a05      	ldr	r2, [sp, #20]
 800a4be:	1aed      	subs	r5, r5, r3
 800a4c0:	1ad3      	subs	r3, r2, r3
 800a4c2:	9305      	str	r3, [sp, #20]
 800a4c4:	9b07      	ldr	r3, [sp, #28]
 800a4c6:	b31b      	cbz	r3, 800a510 <_dtoa_r+0x7a0>
 800a4c8:	9b08      	ldr	r3, [sp, #32]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	f000 80af 	beq.w	800a62e <_dtoa_r+0x8be>
 800a4d0:	2e00      	cmp	r6, #0
 800a4d2:	dd13      	ble.n	800a4fc <_dtoa_r+0x78c>
 800a4d4:	4639      	mov	r1, r7
 800a4d6:	4632      	mov	r2, r6
 800a4d8:	4620      	mov	r0, r4
 800a4da:	f000 fc09 	bl	800acf0 <__pow5mult>
 800a4de:	ee18 2a10 	vmov	r2, s16
 800a4e2:	4601      	mov	r1, r0
 800a4e4:	4607      	mov	r7, r0
 800a4e6:	4620      	mov	r0, r4
 800a4e8:	f000 fb58 	bl	800ab9c <__multiply>
 800a4ec:	ee18 1a10 	vmov	r1, s16
 800a4f0:	4680      	mov	r8, r0
 800a4f2:	4620      	mov	r0, r4
 800a4f4:	f000 fa84 	bl	800aa00 <_Bfree>
 800a4f8:	ee08 8a10 	vmov	s16, r8
 800a4fc:	9b07      	ldr	r3, [sp, #28]
 800a4fe:	1b9a      	subs	r2, r3, r6
 800a500:	d006      	beq.n	800a510 <_dtoa_r+0x7a0>
 800a502:	ee18 1a10 	vmov	r1, s16
 800a506:	4620      	mov	r0, r4
 800a508:	f000 fbf2 	bl	800acf0 <__pow5mult>
 800a50c:	ee08 0a10 	vmov	s16, r0
 800a510:	2101      	movs	r1, #1
 800a512:	4620      	mov	r0, r4
 800a514:	f000 fb2c 	bl	800ab70 <__i2b>
 800a518:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	4606      	mov	r6, r0
 800a51e:	f340 8088 	ble.w	800a632 <_dtoa_r+0x8c2>
 800a522:	461a      	mov	r2, r3
 800a524:	4601      	mov	r1, r0
 800a526:	4620      	mov	r0, r4
 800a528:	f000 fbe2 	bl	800acf0 <__pow5mult>
 800a52c:	9b06      	ldr	r3, [sp, #24]
 800a52e:	2b01      	cmp	r3, #1
 800a530:	4606      	mov	r6, r0
 800a532:	f340 8081 	ble.w	800a638 <_dtoa_r+0x8c8>
 800a536:	f04f 0800 	mov.w	r8, #0
 800a53a:	6933      	ldr	r3, [r6, #16]
 800a53c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a540:	6918      	ldr	r0, [r3, #16]
 800a542:	f000 fac5 	bl	800aad0 <__hi0bits>
 800a546:	f1c0 0020 	rsb	r0, r0, #32
 800a54a:	9b05      	ldr	r3, [sp, #20]
 800a54c:	4418      	add	r0, r3
 800a54e:	f010 001f 	ands.w	r0, r0, #31
 800a552:	f000 8092 	beq.w	800a67a <_dtoa_r+0x90a>
 800a556:	f1c0 0320 	rsb	r3, r0, #32
 800a55a:	2b04      	cmp	r3, #4
 800a55c:	f340 808a 	ble.w	800a674 <_dtoa_r+0x904>
 800a560:	f1c0 001c 	rsb	r0, r0, #28
 800a564:	9b04      	ldr	r3, [sp, #16]
 800a566:	4403      	add	r3, r0
 800a568:	9304      	str	r3, [sp, #16]
 800a56a:	9b05      	ldr	r3, [sp, #20]
 800a56c:	4403      	add	r3, r0
 800a56e:	4405      	add	r5, r0
 800a570:	9305      	str	r3, [sp, #20]
 800a572:	9b04      	ldr	r3, [sp, #16]
 800a574:	2b00      	cmp	r3, #0
 800a576:	dd07      	ble.n	800a588 <_dtoa_r+0x818>
 800a578:	ee18 1a10 	vmov	r1, s16
 800a57c:	461a      	mov	r2, r3
 800a57e:	4620      	mov	r0, r4
 800a580:	f000 fc10 	bl	800ada4 <__lshift>
 800a584:	ee08 0a10 	vmov	s16, r0
 800a588:	9b05      	ldr	r3, [sp, #20]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	dd05      	ble.n	800a59a <_dtoa_r+0x82a>
 800a58e:	4631      	mov	r1, r6
 800a590:	461a      	mov	r2, r3
 800a592:	4620      	mov	r0, r4
 800a594:	f000 fc06 	bl	800ada4 <__lshift>
 800a598:	4606      	mov	r6, r0
 800a59a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d06e      	beq.n	800a67e <_dtoa_r+0x90e>
 800a5a0:	ee18 0a10 	vmov	r0, s16
 800a5a4:	4631      	mov	r1, r6
 800a5a6:	f000 fc6d 	bl	800ae84 <__mcmp>
 800a5aa:	2800      	cmp	r0, #0
 800a5ac:	da67      	bge.n	800a67e <_dtoa_r+0x90e>
 800a5ae:	9b00      	ldr	r3, [sp, #0]
 800a5b0:	3b01      	subs	r3, #1
 800a5b2:	ee18 1a10 	vmov	r1, s16
 800a5b6:	9300      	str	r3, [sp, #0]
 800a5b8:	220a      	movs	r2, #10
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	4620      	mov	r0, r4
 800a5be:	f000 fa41 	bl	800aa44 <__multadd>
 800a5c2:	9b08      	ldr	r3, [sp, #32]
 800a5c4:	ee08 0a10 	vmov	s16, r0
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	f000 81b1 	beq.w	800a930 <_dtoa_r+0xbc0>
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	4639      	mov	r1, r7
 800a5d2:	220a      	movs	r2, #10
 800a5d4:	4620      	mov	r0, r4
 800a5d6:	f000 fa35 	bl	800aa44 <__multadd>
 800a5da:	9b02      	ldr	r3, [sp, #8]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	4607      	mov	r7, r0
 800a5e0:	f300 808e 	bgt.w	800a700 <_dtoa_r+0x990>
 800a5e4:	9b06      	ldr	r3, [sp, #24]
 800a5e6:	2b02      	cmp	r3, #2
 800a5e8:	dc51      	bgt.n	800a68e <_dtoa_r+0x91e>
 800a5ea:	e089      	b.n	800a700 <_dtoa_r+0x990>
 800a5ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a5ee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a5f2:	e74b      	b.n	800a48c <_dtoa_r+0x71c>
 800a5f4:	9b03      	ldr	r3, [sp, #12]
 800a5f6:	1e5e      	subs	r6, r3, #1
 800a5f8:	9b07      	ldr	r3, [sp, #28]
 800a5fa:	42b3      	cmp	r3, r6
 800a5fc:	bfbf      	itttt	lt
 800a5fe:	9b07      	ldrlt	r3, [sp, #28]
 800a600:	9607      	strlt	r6, [sp, #28]
 800a602:	1af2      	sublt	r2, r6, r3
 800a604:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a606:	bfb6      	itet	lt
 800a608:	189b      	addlt	r3, r3, r2
 800a60a:	1b9e      	subge	r6, r3, r6
 800a60c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a60e:	9b03      	ldr	r3, [sp, #12]
 800a610:	bfb8      	it	lt
 800a612:	2600      	movlt	r6, #0
 800a614:	2b00      	cmp	r3, #0
 800a616:	bfb7      	itett	lt
 800a618:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a61c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a620:	1a9d      	sublt	r5, r3, r2
 800a622:	2300      	movlt	r3, #0
 800a624:	e734      	b.n	800a490 <_dtoa_r+0x720>
 800a626:	9e07      	ldr	r6, [sp, #28]
 800a628:	9d04      	ldr	r5, [sp, #16]
 800a62a:	9f08      	ldr	r7, [sp, #32]
 800a62c:	e73b      	b.n	800a4a6 <_dtoa_r+0x736>
 800a62e:	9a07      	ldr	r2, [sp, #28]
 800a630:	e767      	b.n	800a502 <_dtoa_r+0x792>
 800a632:	9b06      	ldr	r3, [sp, #24]
 800a634:	2b01      	cmp	r3, #1
 800a636:	dc18      	bgt.n	800a66a <_dtoa_r+0x8fa>
 800a638:	f1ba 0f00 	cmp.w	sl, #0
 800a63c:	d115      	bne.n	800a66a <_dtoa_r+0x8fa>
 800a63e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a642:	b993      	cbnz	r3, 800a66a <_dtoa_r+0x8fa>
 800a644:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a648:	0d1b      	lsrs	r3, r3, #20
 800a64a:	051b      	lsls	r3, r3, #20
 800a64c:	b183      	cbz	r3, 800a670 <_dtoa_r+0x900>
 800a64e:	9b04      	ldr	r3, [sp, #16]
 800a650:	3301      	adds	r3, #1
 800a652:	9304      	str	r3, [sp, #16]
 800a654:	9b05      	ldr	r3, [sp, #20]
 800a656:	3301      	adds	r3, #1
 800a658:	9305      	str	r3, [sp, #20]
 800a65a:	f04f 0801 	mov.w	r8, #1
 800a65e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a660:	2b00      	cmp	r3, #0
 800a662:	f47f af6a 	bne.w	800a53a <_dtoa_r+0x7ca>
 800a666:	2001      	movs	r0, #1
 800a668:	e76f      	b.n	800a54a <_dtoa_r+0x7da>
 800a66a:	f04f 0800 	mov.w	r8, #0
 800a66e:	e7f6      	b.n	800a65e <_dtoa_r+0x8ee>
 800a670:	4698      	mov	r8, r3
 800a672:	e7f4      	b.n	800a65e <_dtoa_r+0x8ee>
 800a674:	f43f af7d 	beq.w	800a572 <_dtoa_r+0x802>
 800a678:	4618      	mov	r0, r3
 800a67a:	301c      	adds	r0, #28
 800a67c:	e772      	b.n	800a564 <_dtoa_r+0x7f4>
 800a67e:	9b03      	ldr	r3, [sp, #12]
 800a680:	2b00      	cmp	r3, #0
 800a682:	dc37      	bgt.n	800a6f4 <_dtoa_r+0x984>
 800a684:	9b06      	ldr	r3, [sp, #24]
 800a686:	2b02      	cmp	r3, #2
 800a688:	dd34      	ble.n	800a6f4 <_dtoa_r+0x984>
 800a68a:	9b03      	ldr	r3, [sp, #12]
 800a68c:	9302      	str	r3, [sp, #8]
 800a68e:	9b02      	ldr	r3, [sp, #8]
 800a690:	b96b      	cbnz	r3, 800a6ae <_dtoa_r+0x93e>
 800a692:	4631      	mov	r1, r6
 800a694:	2205      	movs	r2, #5
 800a696:	4620      	mov	r0, r4
 800a698:	f000 f9d4 	bl	800aa44 <__multadd>
 800a69c:	4601      	mov	r1, r0
 800a69e:	4606      	mov	r6, r0
 800a6a0:	ee18 0a10 	vmov	r0, s16
 800a6a4:	f000 fbee 	bl	800ae84 <__mcmp>
 800a6a8:	2800      	cmp	r0, #0
 800a6aa:	f73f adbb 	bgt.w	800a224 <_dtoa_r+0x4b4>
 800a6ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6b0:	9d01      	ldr	r5, [sp, #4]
 800a6b2:	43db      	mvns	r3, r3
 800a6b4:	9300      	str	r3, [sp, #0]
 800a6b6:	f04f 0800 	mov.w	r8, #0
 800a6ba:	4631      	mov	r1, r6
 800a6bc:	4620      	mov	r0, r4
 800a6be:	f000 f99f 	bl	800aa00 <_Bfree>
 800a6c2:	2f00      	cmp	r7, #0
 800a6c4:	f43f aea4 	beq.w	800a410 <_dtoa_r+0x6a0>
 800a6c8:	f1b8 0f00 	cmp.w	r8, #0
 800a6cc:	d005      	beq.n	800a6da <_dtoa_r+0x96a>
 800a6ce:	45b8      	cmp	r8, r7
 800a6d0:	d003      	beq.n	800a6da <_dtoa_r+0x96a>
 800a6d2:	4641      	mov	r1, r8
 800a6d4:	4620      	mov	r0, r4
 800a6d6:	f000 f993 	bl	800aa00 <_Bfree>
 800a6da:	4639      	mov	r1, r7
 800a6dc:	4620      	mov	r0, r4
 800a6de:	f000 f98f 	bl	800aa00 <_Bfree>
 800a6e2:	e695      	b.n	800a410 <_dtoa_r+0x6a0>
 800a6e4:	2600      	movs	r6, #0
 800a6e6:	4637      	mov	r7, r6
 800a6e8:	e7e1      	b.n	800a6ae <_dtoa_r+0x93e>
 800a6ea:	9700      	str	r7, [sp, #0]
 800a6ec:	4637      	mov	r7, r6
 800a6ee:	e599      	b.n	800a224 <_dtoa_r+0x4b4>
 800a6f0:	40240000 	.word	0x40240000
 800a6f4:	9b08      	ldr	r3, [sp, #32]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	f000 80ca 	beq.w	800a890 <_dtoa_r+0xb20>
 800a6fc:	9b03      	ldr	r3, [sp, #12]
 800a6fe:	9302      	str	r3, [sp, #8]
 800a700:	2d00      	cmp	r5, #0
 800a702:	dd05      	ble.n	800a710 <_dtoa_r+0x9a0>
 800a704:	4639      	mov	r1, r7
 800a706:	462a      	mov	r2, r5
 800a708:	4620      	mov	r0, r4
 800a70a:	f000 fb4b 	bl	800ada4 <__lshift>
 800a70e:	4607      	mov	r7, r0
 800a710:	f1b8 0f00 	cmp.w	r8, #0
 800a714:	d05b      	beq.n	800a7ce <_dtoa_r+0xa5e>
 800a716:	6879      	ldr	r1, [r7, #4]
 800a718:	4620      	mov	r0, r4
 800a71a:	f000 f931 	bl	800a980 <_Balloc>
 800a71e:	4605      	mov	r5, r0
 800a720:	b928      	cbnz	r0, 800a72e <_dtoa_r+0x9be>
 800a722:	4b87      	ldr	r3, [pc, #540]	; (800a940 <_dtoa_r+0xbd0>)
 800a724:	4602      	mov	r2, r0
 800a726:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a72a:	f7ff bb3b 	b.w	8009da4 <_dtoa_r+0x34>
 800a72e:	693a      	ldr	r2, [r7, #16]
 800a730:	3202      	adds	r2, #2
 800a732:	0092      	lsls	r2, r2, #2
 800a734:	f107 010c 	add.w	r1, r7, #12
 800a738:	300c      	adds	r0, #12
 800a73a:	f000 f913 	bl	800a964 <memcpy>
 800a73e:	2201      	movs	r2, #1
 800a740:	4629      	mov	r1, r5
 800a742:	4620      	mov	r0, r4
 800a744:	f000 fb2e 	bl	800ada4 <__lshift>
 800a748:	9b01      	ldr	r3, [sp, #4]
 800a74a:	f103 0901 	add.w	r9, r3, #1
 800a74e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a752:	4413      	add	r3, r2
 800a754:	9305      	str	r3, [sp, #20]
 800a756:	f00a 0301 	and.w	r3, sl, #1
 800a75a:	46b8      	mov	r8, r7
 800a75c:	9304      	str	r3, [sp, #16]
 800a75e:	4607      	mov	r7, r0
 800a760:	4631      	mov	r1, r6
 800a762:	ee18 0a10 	vmov	r0, s16
 800a766:	f7ff fa75 	bl	8009c54 <quorem>
 800a76a:	4641      	mov	r1, r8
 800a76c:	9002      	str	r0, [sp, #8]
 800a76e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a772:	ee18 0a10 	vmov	r0, s16
 800a776:	f000 fb85 	bl	800ae84 <__mcmp>
 800a77a:	463a      	mov	r2, r7
 800a77c:	9003      	str	r0, [sp, #12]
 800a77e:	4631      	mov	r1, r6
 800a780:	4620      	mov	r0, r4
 800a782:	f000 fb9b 	bl	800aebc <__mdiff>
 800a786:	68c2      	ldr	r2, [r0, #12]
 800a788:	f109 3bff 	add.w	fp, r9, #4294967295
 800a78c:	4605      	mov	r5, r0
 800a78e:	bb02      	cbnz	r2, 800a7d2 <_dtoa_r+0xa62>
 800a790:	4601      	mov	r1, r0
 800a792:	ee18 0a10 	vmov	r0, s16
 800a796:	f000 fb75 	bl	800ae84 <__mcmp>
 800a79a:	4602      	mov	r2, r0
 800a79c:	4629      	mov	r1, r5
 800a79e:	4620      	mov	r0, r4
 800a7a0:	9207      	str	r2, [sp, #28]
 800a7a2:	f000 f92d 	bl	800aa00 <_Bfree>
 800a7a6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a7aa:	ea43 0102 	orr.w	r1, r3, r2
 800a7ae:	9b04      	ldr	r3, [sp, #16]
 800a7b0:	430b      	orrs	r3, r1
 800a7b2:	464d      	mov	r5, r9
 800a7b4:	d10f      	bne.n	800a7d6 <_dtoa_r+0xa66>
 800a7b6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a7ba:	d02a      	beq.n	800a812 <_dtoa_r+0xaa2>
 800a7bc:	9b03      	ldr	r3, [sp, #12]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	dd02      	ble.n	800a7c8 <_dtoa_r+0xa58>
 800a7c2:	9b02      	ldr	r3, [sp, #8]
 800a7c4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a7c8:	f88b a000 	strb.w	sl, [fp]
 800a7cc:	e775      	b.n	800a6ba <_dtoa_r+0x94a>
 800a7ce:	4638      	mov	r0, r7
 800a7d0:	e7ba      	b.n	800a748 <_dtoa_r+0x9d8>
 800a7d2:	2201      	movs	r2, #1
 800a7d4:	e7e2      	b.n	800a79c <_dtoa_r+0xa2c>
 800a7d6:	9b03      	ldr	r3, [sp, #12]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	db04      	blt.n	800a7e6 <_dtoa_r+0xa76>
 800a7dc:	9906      	ldr	r1, [sp, #24]
 800a7de:	430b      	orrs	r3, r1
 800a7e0:	9904      	ldr	r1, [sp, #16]
 800a7e2:	430b      	orrs	r3, r1
 800a7e4:	d122      	bne.n	800a82c <_dtoa_r+0xabc>
 800a7e6:	2a00      	cmp	r2, #0
 800a7e8:	ddee      	ble.n	800a7c8 <_dtoa_r+0xa58>
 800a7ea:	ee18 1a10 	vmov	r1, s16
 800a7ee:	2201      	movs	r2, #1
 800a7f0:	4620      	mov	r0, r4
 800a7f2:	f000 fad7 	bl	800ada4 <__lshift>
 800a7f6:	4631      	mov	r1, r6
 800a7f8:	ee08 0a10 	vmov	s16, r0
 800a7fc:	f000 fb42 	bl	800ae84 <__mcmp>
 800a800:	2800      	cmp	r0, #0
 800a802:	dc03      	bgt.n	800a80c <_dtoa_r+0xa9c>
 800a804:	d1e0      	bne.n	800a7c8 <_dtoa_r+0xa58>
 800a806:	f01a 0f01 	tst.w	sl, #1
 800a80a:	d0dd      	beq.n	800a7c8 <_dtoa_r+0xa58>
 800a80c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a810:	d1d7      	bne.n	800a7c2 <_dtoa_r+0xa52>
 800a812:	2339      	movs	r3, #57	; 0x39
 800a814:	f88b 3000 	strb.w	r3, [fp]
 800a818:	462b      	mov	r3, r5
 800a81a:	461d      	mov	r5, r3
 800a81c:	3b01      	subs	r3, #1
 800a81e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a822:	2a39      	cmp	r2, #57	; 0x39
 800a824:	d071      	beq.n	800a90a <_dtoa_r+0xb9a>
 800a826:	3201      	adds	r2, #1
 800a828:	701a      	strb	r2, [r3, #0]
 800a82a:	e746      	b.n	800a6ba <_dtoa_r+0x94a>
 800a82c:	2a00      	cmp	r2, #0
 800a82e:	dd07      	ble.n	800a840 <_dtoa_r+0xad0>
 800a830:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a834:	d0ed      	beq.n	800a812 <_dtoa_r+0xaa2>
 800a836:	f10a 0301 	add.w	r3, sl, #1
 800a83a:	f88b 3000 	strb.w	r3, [fp]
 800a83e:	e73c      	b.n	800a6ba <_dtoa_r+0x94a>
 800a840:	9b05      	ldr	r3, [sp, #20]
 800a842:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a846:	4599      	cmp	r9, r3
 800a848:	d047      	beq.n	800a8da <_dtoa_r+0xb6a>
 800a84a:	ee18 1a10 	vmov	r1, s16
 800a84e:	2300      	movs	r3, #0
 800a850:	220a      	movs	r2, #10
 800a852:	4620      	mov	r0, r4
 800a854:	f000 f8f6 	bl	800aa44 <__multadd>
 800a858:	45b8      	cmp	r8, r7
 800a85a:	ee08 0a10 	vmov	s16, r0
 800a85e:	f04f 0300 	mov.w	r3, #0
 800a862:	f04f 020a 	mov.w	r2, #10
 800a866:	4641      	mov	r1, r8
 800a868:	4620      	mov	r0, r4
 800a86a:	d106      	bne.n	800a87a <_dtoa_r+0xb0a>
 800a86c:	f000 f8ea 	bl	800aa44 <__multadd>
 800a870:	4680      	mov	r8, r0
 800a872:	4607      	mov	r7, r0
 800a874:	f109 0901 	add.w	r9, r9, #1
 800a878:	e772      	b.n	800a760 <_dtoa_r+0x9f0>
 800a87a:	f000 f8e3 	bl	800aa44 <__multadd>
 800a87e:	4639      	mov	r1, r7
 800a880:	4680      	mov	r8, r0
 800a882:	2300      	movs	r3, #0
 800a884:	220a      	movs	r2, #10
 800a886:	4620      	mov	r0, r4
 800a888:	f000 f8dc 	bl	800aa44 <__multadd>
 800a88c:	4607      	mov	r7, r0
 800a88e:	e7f1      	b.n	800a874 <_dtoa_r+0xb04>
 800a890:	9b03      	ldr	r3, [sp, #12]
 800a892:	9302      	str	r3, [sp, #8]
 800a894:	9d01      	ldr	r5, [sp, #4]
 800a896:	ee18 0a10 	vmov	r0, s16
 800a89a:	4631      	mov	r1, r6
 800a89c:	f7ff f9da 	bl	8009c54 <quorem>
 800a8a0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a8a4:	9b01      	ldr	r3, [sp, #4]
 800a8a6:	f805 ab01 	strb.w	sl, [r5], #1
 800a8aa:	1aea      	subs	r2, r5, r3
 800a8ac:	9b02      	ldr	r3, [sp, #8]
 800a8ae:	4293      	cmp	r3, r2
 800a8b0:	dd09      	ble.n	800a8c6 <_dtoa_r+0xb56>
 800a8b2:	ee18 1a10 	vmov	r1, s16
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	220a      	movs	r2, #10
 800a8ba:	4620      	mov	r0, r4
 800a8bc:	f000 f8c2 	bl	800aa44 <__multadd>
 800a8c0:	ee08 0a10 	vmov	s16, r0
 800a8c4:	e7e7      	b.n	800a896 <_dtoa_r+0xb26>
 800a8c6:	9b02      	ldr	r3, [sp, #8]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	bfc8      	it	gt
 800a8cc:	461d      	movgt	r5, r3
 800a8ce:	9b01      	ldr	r3, [sp, #4]
 800a8d0:	bfd8      	it	le
 800a8d2:	2501      	movle	r5, #1
 800a8d4:	441d      	add	r5, r3
 800a8d6:	f04f 0800 	mov.w	r8, #0
 800a8da:	ee18 1a10 	vmov	r1, s16
 800a8de:	2201      	movs	r2, #1
 800a8e0:	4620      	mov	r0, r4
 800a8e2:	f000 fa5f 	bl	800ada4 <__lshift>
 800a8e6:	4631      	mov	r1, r6
 800a8e8:	ee08 0a10 	vmov	s16, r0
 800a8ec:	f000 faca 	bl	800ae84 <__mcmp>
 800a8f0:	2800      	cmp	r0, #0
 800a8f2:	dc91      	bgt.n	800a818 <_dtoa_r+0xaa8>
 800a8f4:	d102      	bne.n	800a8fc <_dtoa_r+0xb8c>
 800a8f6:	f01a 0f01 	tst.w	sl, #1
 800a8fa:	d18d      	bne.n	800a818 <_dtoa_r+0xaa8>
 800a8fc:	462b      	mov	r3, r5
 800a8fe:	461d      	mov	r5, r3
 800a900:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a904:	2a30      	cmp	r2, #48	; 0x30
 800a906:	d0fa      	beq.n	800a8fe <_dtoa_r+0xb8e>
 800a908:	e6d7      	b.n	800a6ba <_dtoa_r+0x94a>
 800a90a:	9a01      	ldr	r2, [sp, #4]
 800a90c:	429a      	cmp	r2, r3
 800a90e:	d184      	bne.n	800a81a <_dtoa_r+0xaaa>
 800a910:	9b00      	ldr	r3, [sp, #0]
 800a912:	3301      	adds	r3, #1
 800a914:	9300      	str	r3, [sp, #0]
 800a916:	2331      	movs	r3, #49	; 0x31
 800a918:	7013      	strb	r3, [r2, #0]
 800a91a:	e6ce      	b.n	800a6ba <_dtoa_r+0x94a>
 800a91c:	4b09      	ldr	r3, [pc, #36]	; (800a944 <_dtoa_r+0xbd4>)
 800a91e:	f7ff ba95 	b.w	8009e4c <_dtoa_r+0xdc>
 800a922:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a924:	2b00      	cmp	r3, #0
 800a926:	f47f aa6e 	bne.w	8009e06 <_dtoa_r+0x96>
 800a92a:	4b07      	ldr	r3, [pc, #28]	; (800a948 <_dtoa_r+0xbd8>)
 800a92c:	f7ff ba8e 	b.w	8009e4c <_dtoa_r+0xdc>
 800a930:	9b02      	ldr	r3, [sp, #8]
 800a932:	2b00      	cmp	r3, #0
 800a934:	dcae      	bgt.n	800a894 <_dtoa_r+0xb24>
 800a936:	9b06      	ldr	r3, [sp, #24]
 800a938:	2b02      	cmp	r3, #2
 800a93a:	f73f aea8 	bgt.w	800a68e <_dtoa_r+0x91e>
 800a93e:	e7a9      	b.n	800a894 <_dtoa_r+0xb24>
 800a940:	0800d43b 	.word	0x0800d43b
 800a944:	0800d398 	.word	0x0800d398
 800a948:	0800d3bc 	.word	0x0800d3bc

0800a94c <_localeconv_r>:
 800a94c:	4800      	ldr	r0, [pc, #0]	; (800a950 <_localeconv_r+0x4>)
 800a94e:	4770      	bx	lr
 800a950:	20000178 	.word	0x20000178

0800a954 <malloc>:
 800a954:	4b02      	ldr	r3, [pc, #8]	; (800a960 <malloc+0xc>)
 800a956:	4601      	mov	r1, r0
 800a958:	6818      	ldr	r0, [r3, #0]
 800a95a:	f000 bc17 	b.w	800b18c <_malloc_r>
 800a95e:	bf00      	nop
 800a960:	20000024 	.word	0x20000024

0800a964 <memcpy>:
 800a964:	440a      	add	r2, r1
 800a966:	4291      	cmp	r1, r2
 800a968:	f100 33ff 	add.w	r3, r0, #4294967295
 800a96c:	d100      	bne.n	800a970 <memcpy+0xc>
 800a96e:	4770      	bx	lr
 800a970:	b510      	push	{r4, lr}
 800a972:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a976:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a97a:	4291      	cmp	r1, r2
 800a97c:	d1f9      	bne.n	800a972 <memcpy+0xe>
 800a97e:	bd10      	pop	{r4, pc}

0800a980 <_Balloc>:
 800a980:	b570      	push	{r4, r5, r6, lr}
 800a982:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a984:	4604      	mov	r4, r0
 800a986:	460d      	mov	r5, r1
 800a988:	b976      	cbnz	r6, 800a9a8 <_Balloc+0x28>
 800a98a:	2010      	movs	r0, #16
 800a98c:	f7ff ffe2 	bl	800a954 <malloc>
 800a990:	4602      	mov	r2, r0
 800a992:	6260      	str	r0, [r4, #36]	; 0x24
 800a994:	b920      	cbnz	r0, 800a9a0 <_Balloc+0x20>
 800a996:	4b18      	ldr	r3, [pc, #96]	; (800a9f8 <_Balloc+0x78>)
 800a998:	4818      	ldr	r0, [pc, #96]	; (800a9fc <_Balloc+0x7c>)
 800a99a:	2166      	movs	r1, #102	; 0x66
 800a99c:	f000 fdd6 	bl	800b54c <__assert_func>
 800a9a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a9a4:	6006      	str	r6, [r0, #0]
 800a9a6:	60c6      	str	r6, [r0, #12]
 800a9a8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a9aa:	68f3      	ldr	r3, [r6, #12]
 800a9ac:	b183      	cbz	r3, 800a9d0 <_Balloc+0x50>
 800a9ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a9b0:	68db      	ldr	r3, [r3, #12]
 800a9b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a9b6:	b9b8      	cbnz	r0, 800a9e8 <_Balloc+0x68>
 800a9b8:	2101      	movs	r1, #1
 800a9ba:	fa01 f605 	lsl.w	r6, r1, r5
 800a9be:	1d72      	adds	r2, r6, #5
 800a9c0:	0092      	lsls	r2, r2, #2
 800a9c2:	4620      	mov	r0, r4
 800a9c4:	f000 fb60 	bl	800b088 <_calloc_r>
 800a9c8:	b160      	cbz	r0, 800a9e4 <_Balloc+0x64>
 800a9ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a9ce:	e00e      	b.n	800a9ee <_Balloc+0x6e>
 800a9d0:	2221      	movs	r2, #33	; 0x21
 800a9d2:	2104      	movs	r1, #4
 800a9d4:	4620      	mov	r0, r4
 800a9d6:	f000 fb57 	bl	800b088 <_calloc_r>
 800a9da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a9dc:	60f0      	str	r0, [r6, #12]
 800a9de:	68db      	ldr	r3, [r3, #12]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d1e4      	bne.n	800a9ae <_Balloc+0x2e>
 800a9e4:	2000      	movs	r0, #0
 800a9e6:	bd70      	pop	{r4, r5, r6, pc}
 800a9e8:	6802      	ldr	r2, [r0, #0]
 800a9ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a9f4:	e7f7      	b.n	800a9e6 <_Balloc+0x66>
 800a9f6:	bf00      	nop
 800a9f8:	0800d3c9 	.word	0x0800d3c9
 800a9fc:	0800d44c 	.word	0x0800d44c

0800aa00 <_Bfree>:
 800aa00:	b570      	push	{r4, r5, r6, lr}
 800aa02:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800aa04:	4605      	mov	r5, r0
 800aa06:	460c      	mov	r4, r1
 800aa08:	b976      	cbnz	r6, 800aa28 <_Bfree+0x28>
 800aa0a:	2010      	movs	r0, #16
 800aa0c:	f7ff ffa2 	bl	800a954 <malloc>
 800aa10:	4602      	mov	r2, r0
 800aa12:	6268      	str	r0, [r5, #36]	; 0x24
 800aa14:	b920      	cbnz	r0, 800aa20 <_Bfree+0x20>
 800aa16:	4b09      	ldr	r3, [pc, #36]	; (800aa3c <_Bfree+0x3c>)
 800aa18:	4809      	ldr	r0, [pc, #36]	; (800aa40 <_Bfree+0x40>)
 800aa1a:	218a      	movs	r1, #138	; 0x8a
 800aa1c:	f000 fd96 	bl	800b54c <__assert_func>
 800aa20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aa24:	6006      	str	r6, [r0, #0]
 800aa26:	60c6      	str	r6, [r0, #12]
 800aa28:	b13c      	cbz	r4, 800aa3a <_Bfree+0x3a>
 800aa2a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800aa2c:	6862      	ldr	r2, [r4, #4]
 800aa2e:	68db      	ldr	r3, [r3, #12]
 800aa30:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800aa34:	6021      	str	r1, [r4, #0]
 800aa36:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800aa3a:	bd70      	pop	{r4, r5, r6, pc}
 800aa3c:	0800d3c9 	.word	0x0800d3c9
 800aa40:	0800d44c 	.word	0x0800d44c

0800aa44 <__multadd>:
 800aa44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa48:	690d      	ldr	r5, [r1, #16]
 800aa4a:	4607      	mov	r7, r0
 800aa4c:	460c      	mov	r4, r1
 800aa4e:	461e      	mov	r6, r3
 800aa50:	f101 0c14 	add.w	ip, r1, #20
 800aa54:	2000      	movs	r0, #0
 800aa56:	f8dc 3000 	ldr.w	r3, [ip]
 800aa5a:	b299      	uxth	r1, r3
 800aa5c:	fb02 6101 	mla	r1, r2, r1, r6
 800aa60:	0c1e      	lsrs	r6, r3, #16
 800aa62:	0c0b      	lsrs	r3, r1, #16
 800aa64:	fb02 3306 	mla	r3, r2, r6, r3
 800aa68:	b289      	uxth	r1, r1
 800aa6a:	3001      	adds	r0, #1
 800aa6c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800aa70:	4285      	cmp	r5, r0
 800aa72:	f84c 1b04 	str.w	r1, [ip], #4
 800aa76:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800aa7a:	dcec      	bgt.n	800aa56 <__multadd+0x12>
 800aa7c:	b30e      	cbz	r6, 800aac2 <__multadd+0x7e>
 800aa7e:	68a3      	ldr	r3, [r4, #8]
 800aa80:	42ab      	cmp	r3, r5
 800aa82:	dc19      	bgt.n	800aab8 <__multadd+0x74>
 800aa84:	6861      	ldr	r1, [r4, #4]
 800aa86:	4638      	mov	r0, r7
 800aa88:	3101      	adds	r1, #1
 800aa8a:	f7ff ff79 	bl	800a980 <_Balloc>
 800aa8e:	4680      	mov	r8, r0
 800aa90:	b928      	cbnz	r0, 800aa9e <__multadd+0x5a>
 800aa92:	4602      	mov	r2, r0
 800aa94:	4b0c      	ldr	r3, [pc, #48]	; (800aac8 <__multadd+0x84>)
 800aa96:	480d      	ldr	r0, [pc, #52]	; (800aacc <__multadd+0x88>)
 800aa98:	21b5      	movs	r1, #181	; 0xb5
 800aa9a:	f000 fd57 	bl	800b54c <__assert_func>
 800aa9e:	6922      	ldr	r2, [r4, #16]
 800aaa0:	3202      	adds	r2, #2
 800aaa2:	f104 010c 	add.w	r1, r4, #12
 800aaa6:	0092      	lsls	r2, r2, #2
 800aaa8:	300c      	adds	r0, #12
 800aaaa:	f7ff ff5b 	bl	800a964 <memcpy>
 800aaae:	4621      	mov	r1, r4
 800aab0:	4638      	mov	r0, r7
 800aab2:	f7ff ffa5 	bl	800aa00 <_Bfree>
 800aab6:	4644      	mov	r4, r8
 800aab8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800aabc:	3501      	adds	r5, #1
 800aabe:	615e      	str	r6, [r3, #20]
 800aac0:	6125      	str	r5, [r4, #16]
 800aac2:	4620      	mov	r0, r4
 800aac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aac8:	0800d43b 	.word	0x0800d43b
 800aacc:	0800d44c 	.word	0x0800d44c

0800aad0 <__hi0bits>:
 800aad0:	0c03      	lsrs	r3, r0, #16
 800aad2:	041b      	lsls	r3, r3, #16
 800aad4:	b9d3      	cbnz	r3, 800ab0c <__hi0bits+0x3c>
 800aad6:	0400      	lsls	r0, r0, #16
 800aad8:	2310      	movs	r3, #16
 800aada:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800aade:	bf04      	itt	eq
 800aae0:	0200      	lsleq	r0, r0, #8
 800aae2:	3308      	addeq	r3, #8
 800aae4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800aae8:	bf04      	itt	eq
 800aaea:	0100      	lsleq	r0, r0, #4
 800aaec:	3304      	addeq	r3, #4
 800aaee:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800aaf2:	bf04      	itt	eq
 800aaf4:	0080      	lsleq	r0, r0, #2
 800aaf6:	3302      	addeq	r3, #2
 800aaf8:	2800      	cmp	r0, #0
 800aafa:	db05      	blt.n	800ab08 <__hi0bits+0x38>
 800aafc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ab00:	f103 0301 	add.w	r3, r3, #1
 800ab04:	bf08      	it	eq
 800ab06:	2320      	moveq	r3, #32
 800ab08:	4618      	mov	r0, r3
 800ab0a:	4770      	bx	lr
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	e7e4      	b.n	800aada <__hi0bits+0xa>

0800ab10 <__lo0bits>:
 800ab10:	6803      	ldr	r3, [r0, #0]
 800ab12:	f013 0207 	ands.w	r2, r3, #7
 800ab16:	4601      	mov	r1, r0
 800ab18:	d00b      	beq.n	800ab32 <__lo0bits+0x22>
 800ab1a:	07da      	lsls	r2, r3, #31
 800ab1c:	d423      	bmi.n	800ab66 <__lo0bits+0x56>
 800ab1e:	0798      	lsls	r0, r3, #30
 800ab20:	bf49      	itett	mi
 800ab22:	085b      	lsrmi	r3, r3, #1
 800ab24:	089b      	lsrpl	r3, r3, #2
 800ab26:	2001      	movmi	r0, #1
 800ab28:	600b      	strmi	r3, [r1, #0]
 800ab2a:	bf5c      	itt	pl
 800ab2c:	600b      	strpl	r3, [r1, #0]
 800ab2e:	2002      	movpl	r0, #2
 800ab30:	4770      	bx	lr
 800ab32:	b298      	uxth	r0, r3
 800ab34:	b9a8      	cbnz	r0, 800ab62 <__lo0bits+0x52>
 800ab36:	0c1b      	lsrs	r3, r3, #16
 800ab38:	2010      	movs	r0, #16
 800ab3a:	b2da      	uxtb	r2, r3
 800ab3c:	b90a      	cbnz	r2, 800ab42 <__lo0bits+0x32>
 800ab3e:	3008      	adds	r0, #8
 800ab40:	0a1b      	lsrs	r3, r3, #8
 800ab42:	071a      	lsls	r2, r3, #28
 800ab44:	bf04      	itt	eq
 800ab46:	091b      	lsreq	r3, r3, #4
 800ab48:	3004      	addeq	r0, #4
 800ab4a:	079a      	lsls	r2, r3, #30
 800ab4c:	bf04      	itt	eq
 800ab4e:	089b      	lsreq	r3, r3, #2
 800ab50:	3002      	addeq	r0, #2
 800ab52:	07da      	lsls	r2, r3, #31
 800ab54:	d403      	bmi.n	800ab5e <__lo0bits+0x4e>
 800ab56:	085b      	lsrs	r3, r3, #1
 800ab58:	f100 0001 	add.w	r0, r0, #1
 800ab5c:	d005      	beq.n	800ab6a <__lo0bits+0x5a>
 800ab5e:	600b      	str	r3, [r1, #0]
 800ab60:	4770      	bx	lr
 800ab62:	4610      	mov	r0, r2
 800ab64:	e7e9      	b.n	800ab3a <__lo0bits+0x2a>
 800ab66:	2000      	movs	r0, #0
 800ab68:	4770      	bx	lr
 800ab6a:	2020      	movs	r0, #32
 800ab6c:	4770      	bx	lr
	...

0800ab70 <__i2b>:
 800ab70:	b510      	push	{r4, lr}
 800ab72:	460c      	mov	r4, r1
 800ab74:	2101      	movs	r1, #1
 800ab76:	f7ff ff03 	bl	800a980 <_Balloc>
 800ab7a:	4602      	mov	r2, r0
 800ab7c:	b928      	cbnz	r0, 800ab8a <__i2b+0x1a>
 800ab7e:	4b05      	ldr	r3, [pc, #20]	; (800ab94 <__i2b+0x24>)
 800ab80:	4805      	ldr	r0, [pc, #20]	; (800ab98 <__i2b+0x28>)
 800ab82:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ab86:	f000 fce1 	bl	800b54c <__assert_func>
 800ab8a:	2301      	movs	r3, #1
 800ab8c:	6144      	str	r4, [r0, #20]
 800ab8e:	6103      	str	r3, [r0, #16]
 800ab90:	bd10      	pop	{r4, pc}
 800ab92:	bf00      	nop
 800ab94:	0800d43b 	.word	0x0800d43b
 800ab98:	0800d44c 	.word	0x0800d44c

0800ab9c <__multiply>:
 800ab9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aba0:	4691      	mov	r9, r2
 800aba2:	690a      	ldr	r2, [r1, #16]
 800aba4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800aba8:	429a      	cmp	r2, r3
 800abaa:	bfb8      	it	lt
 800abac:	460b      	movlt	r3, r1
 800abae:	460c      	mov	r4, r1
 800abb0:	bfbc      	itt	lt
 800abb2:	464c      	movlt	r4, r9
 800abb4:	4699      	movlt	r9, r3
 800abb6:	6927      	ldr	r7, [r4, #16]
 800abb8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800abbc:	68a3      	ldr	r3, [r4, #8]
 800abbe:	6861      	ldr	r1, [r4, #4]
 800abc0:	eb07 060a 	add.w	r6, r7, sl
 800abc4:	42b3      	cmp	r3, r6
 800abc6:	b085      	sub	sp, #20
 800abc8:	bfb8      	it	lt
 800abca:	3101      	addlt	r1, #1
 800abcc:	f7ff fed8 	bl	800a980 <_Balloc>
 800abd0:	b930      	cbnz	r0, 800abe0 <__multiply+0x44>
 800abd2:	4602      	mov	r2, r0
 800abd4:	4b44      	ldr	r3, [pc, #272]	; (800ace8 <__multiply+0x14c>)
 800abd6:	4845      	ldr	r0, [pc, #276]	; (800acec <__multiply+0x150>)
 800abd8:	f240 115d 	movw	r1, #349	; 0x15d
 800abdc:	f000 fcb6 	bl	800b54c <__assert_func>
 800abe0:	f100 0514 	add.w	r5, r0, #20
 800abe4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800abe8:	462b      	mov	r3, r5
 800abea:	2200      	movs	r2, #0
 800abec:	4543      	cmp	r3, r8
 800abee:	d321      	bcc.n	800ac34 <__multiply+0x98>
 800abf0:	f104 0314 	add.w	r3, r4, #20
 800abf4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800abf8:	f109 0314 	add.w	r3, r9, #20
 800abfc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ac00:	9202      	str	r2, [sp, #8]
 800ac02:	1b3a      	subs	r2, r7, r4
 800ac04:	3a15      	subs	r2, #21
 800ac06:	f022 0203 	bic.w	r2, r2, #3
 800ac0a:	3204      	adds	r2, #4
 800ac0c:	f104 0115 	add.w	r1, r4, #21
 800ac10:	428f      	cmp	r7, r1
 800ac12:	bf38      	it	cc
 800ac14:	2204      	movcc	r2, #4
 800ac16:	9201      	str	r2, [sp, #4]
 800ac18:	9a02      	ldr	r2, [sp, #8]
 800ac1a:	9303      	str	r3, [sp, #12]
 800ac1c:	429a      	cmp	r2, r3
 800ac1e:	d80c      	bhi.n	800ac3a <__multiply+0x9e>
 800ac20:	2e00      	cmp	r6, #0
 800ac22:	dd03      	ble.n	800ac2c <__multiply+0x90>
 800ac24:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d05a      	beq.n	800ace2 <__multiply+0x146>
 800ac2c:	6106      	str	r6, [r0, #16]
 800ac2e:	b005      	add	sp, #20
 800ac30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac34:	f843 2b04 	str.w	r2, [r3], #4
 800ac38:	e7d8      	b.n	800abec <__multiply+0x50>
 800ac3a:	f8b3 a000 	ldrh.w	sl, [r3]
 800ac3e:	f1ba 0f00 	cmp.w	sl, #0
 800ac42:	d024      	beq.n	800ac8e <__multiply+0xf2>
 800ac44:	f104 0e14 	add.w	lr, r4, #20
 800ac48:	46a9      	mov	r9, r5
 800ac4a:	f04f 0c00 	mov.w	ip, #0
 800ac4e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ac52:	f8d9 1000 	ldr.w	r1, [r9]
 800ac56:	fa1f fb82 	uxth.w	fp, r2
 800ac5a:	b289      	uxth	r1, r1
 800ac5c:	fb0a 110b 	mla	r1, sl, fp, r1
 800ac60:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ac64:	f8d9 2000 	ldr.w	r2, [r9]
 800ac68:	4461      	add	r1, ip
 800ac6a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ac6e:	fb0a c20b 	mla	r2, sl, fp, ip
 800ac72:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ac76:	b289      	uxth	r1, r1
 800ac78:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ac7c:	4577      	cmp	r7, lr
 800ac7e:	f849 1b04 	str.w	r1, [r9], #4
 800ac82:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ac86:	d8e2      	bhi.n	800ac4e <__multiply+0xb2>
 800ac88:	9a01      	ldr	r2, [sp, #4]
 800ac8a:	f845 c002 	str.w	ip, [r5, r2]
 800ac8e:	9a03      	ldr	r2, [sp, #12]
 800ac90:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ac94:	3304      	adds	r3, #4
 800ac96:	f1b9 0f00 	cmp.w	r9, #0
 800ac9a:	d020      	beq.n	800acde <__multiply+0x142>
 800ac9c:	6829      	ldr	r1, [r5, #0]
 800ac9e:	f104 0c14 	add.w	ip, r4, #20
 800aca2:	46ae      	mov	lr, r5
 800aca4:	f04f 0a00 	mov.w	sl, #0
 800aca8:	f8bc b000 	ldrh.w	fp, [ip]
 800acac:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800acb0:	fb09 220b 	mla	r2, r9, fp, r2
 800acb4:	4492      	add	sl, r2
 800acb6:	b289      	uxth	r1, r1
 800acb8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800acbc:	f84e 1b04 	str.w	r1, [lr], #4
 800acc0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800acc4:	f8be 1000 	ldrh.w	r1, [lr]
 800acc8:	0c12      	lsrs	r2, r2, #16
 800acca:	fb09 1102 	mla	r1, r9, r2, r1
 800acce:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800acd2:	4567      	cmp	r7, ip
 800acd4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800acd8:	d8e6      	bhi.n	800aca8 <__multiply+0x10c>
 800acda:	9a01      	ldr	r2, [sp, #4]
 800acdc:	50a9      	str	r1, [r5, r2]
 800acde:	3504      	adds	r5, #4
 800ace0:	e79a      	b.n	800ac18 <__multiply+0x7c>
 800ace2:	3e01      	subs	r6, #1
 800ace4:	e79c      	b.n	800ac20 <__multiply+0x84>
 800ace6:	bf00      	nop
 800ace8:	0800d43b 	.word	0x0800d43b
 800acec:	0800d44c 	.word	0x0800d44c

0800acf0 <__pow5mult>:
 800acf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800acf4:	4615      	mov	r5, r2
 800acf6:	f012 0203 	ands.w	r2, r2, #3
 800acfa:	4606      	mov	r6, r0
 800acfc:	460f      	mov	r7, r1
 800acfe:	d007      	beq.n	800ad10 <__pow5mult+0x20>
 800ad00:	4c25      	ldr	r4, [pc, #148]	; (800ad98 <__pow5mult+0xa8>)
 800ad02:	3a01      	subs	r2, #1
 800ad04:	2300      	movs	r3, #0
 800ad06:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ad0a:	f7ff fe9b 	bl	800aa44 <__multadd>
 800ad0e:	4607      	mov	r7, r0
 800ad10:	10ad      	asrs	r5, r5, #2
 800ad12:	d03d      	beq.n	800ad90 <__pow5mult+0xa0>
 800ad14:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ad16:	b97c      	cbnz	r4, 800ad38 <__pow5mult+0x48>
 800ad18:	2010      	movs	r0, #16
 800ad1a:	f7ff fe1b 	bl	800a954 <malloc>
 800ad1e:	4602      	mov	r2, r0
 800ad20:	6270      	str	r0, [r6, #36]	; 0x24
 800ad22:	b928      	cbnz	r0, 800ad30 <__pow5mult+0x40>
 800ad24:	4b1d      	ldr	r3, [pc, #116]	; (800ad9c <__pow5mult+0xac>)
 800ad26:	481e      	ldr	r0, [pc, #120]	; (800ada0 <__pow5mult+0xb0>)
 800ad28:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ad2c:	f000 fc0e 	bl	800b54c <__assert_func>
 800ad30:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ad34:	6004      	str	r4, [r0, #0]
 800ad36:	60c4      	str	r4, [r0, #12]
 800ad38:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ad3c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ad40:	b94c      	cbnz	r4, 800ad56 <__pow5mult+0x66>
 800ad42:	f240 2171 	movw	r1, #625	; 0x271
 800ad46:	4630      	mov	r0, r6
 800ad48:	f7ff ff12 	bl	800ab70 <__i2b>
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	f8c8 0008 	str.w	r0, [r8, #8]
 800ad52:	4604      	mov	r4, r0
 800ad54:	6003      	str	r3, [r0, #0]
 800ad56:	f04f 0900 	mov.w	r9, #0
 800ad5a:	07eb      	lsls	r3, r5, #31
 800ad5c:	d50a      	bpl.n	800ad74 <__pow5mult+0x84>
 800ad5e:	4639      	mov	r1, r7
 800ad60:	4622      	mov	r2, r4
 800ad62:	4630      	mov	r0, r6
 800ad64:	f7ff ff1a 	bl	800ab9c <__multiply>
 800ad68:	4639      	mov	r1, r7
 800ad6a:	4680      	mov	r8, r0
 800ad6c:	4630      	mov	r0, r6
 800ad6e:	f7ff fe47 	bl	800aa00 <_Bfree>
 800ad72:	4647      	mov	r7, r8
 800ad74:	106d      	asrs	r5, r5, #1
 800ad76:	d00b      	beq.n	800ad90 <__pow5mult+0xa0>
 800ad78:	6820      	ldr	r0, [r4, #0]
 800ad7a:	b938      	cbnz	r0, 800ad8c <__pow5mult+0x9c>
 800ad7c:	4622      	mov	r2, r4
 800ad7e:	4621      	mov	r1, r4
 800ad80:	4630      	mov	r0, r6
 800ad82:	f7ff ff0b 	bl	800ab9c <__multiply>
 800ad86:	6020      	str	r0, [r4, #0]
 800ad88:	f8c0 9000 	str.w	r9, [r0]
 800ad8c:	4604      	mov	r4, r0
 800ad8e:	e7e4      	b.n	800ad5a <__pow5mult+0x6a>
 800ad90:	4638      	mov	r0, r7
 800ad92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad96:	bf00      	nop
 800ad98:	0800d598 	.word	0x0800d598
 800ad9c:	0800d3c9 	.word	0x0800d3c9
 800ada0:	0800d44c 	.word	0x0800d44c

0800ada4 <__lshift>:
 800ada4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ada8:	460c      	mov	r4, r1
 800adaa:	6849      	ldr	r1, [r1, #4]
 800adac:	6923      	ldr	r3, [r4, #16]
 800adae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800adb2:	68a3      	ldr	r3, [r4, #8]
 800adb4:	4607      	mov	r7, r0
 800adb6:	4691      	mov	r9, r2
 800adb8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800adbc:	f108 0601 	add.w	r6, r8, #1
 800adc0:	42b3      	cmp	r3, r6
 800adc2:	db0b      	blt.n	800addc <__lshift+0x38>
 800adc4:	4638      	mov	r0, r7
 800adc6:	f7ff fddb 	bl	800a980 <_Balloc>
 800adca:	4605      	mov	r5, r0
 800adcc:	b948      	cbnz	r0, 800ade2 <__lshift+0x3e>
 800adce:	4602      	mov	r2, r0
 800add0:	4b2a      	ldr	r3, [pc, #168]	; (800ae7c <__lshift+0xd8>)
 800add2:	482b      	ldr	r0, [pc, #172]	; (800ae80 <__lshift+0xdc>)
 800add4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800add8:	f000 fbb8 	bl	800b54c <__assert_func>
 800addc:	3101      	adds	r1, #1
 800adde:	005b      	lsls	r3, r3, #1
 800ade0:	e7ee      	b.n	800adc0 <__lshift+0x1c>
 800ade2:	2300      	movs	r3, #0
 800ade4:	f100 0114 	add.w	r1, r0, #20
 800ade8:	f100 0210 	add.w	r2, r0, #16
 800adec:	4618      	mov	r0, r3
 800adee:	4553      	cmp	r3, sl
 800adf0:	db37      	blt.n	800ae62 <__lshift+0xbe>
 800adf2:	6920      	ldr	r0, [r4, #16]
 800adf4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800adf8:	f104 0314 	add.w	r3, r4, #20
 800adfc:	f019 091f 	ands.w	r9, r9, #31
 800ae00:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ae04:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ae08:	d02f      	beq.n	800ae6a <__lshift+0xc6>
 800ae0a:	f1c9 0e20 	rsb	lr, r9, #32
 800ae0e:	468a      	mov	sl, r1
 800ae10:	f04f 0c00 	mov.w	ip, #0
 800ae14:	681a      	ldr	r2, [r3, #0]
 800ae16:	fa02 f209 	lsl.w	r2, r2, r9
 800ae1a:	ea42 020c 	orr.w	r2, r2, ip
 800ae1e:	f84a 2b04 	str.w	r2, [sl], #4
 800ae22:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae26:	4298      	cmp	r0, r3
 800ae28:	fa22 fc0e 	lsr.w	ip, r2, lr
 800ae2c:	d8f2      	bhi.n	800ae14 <__lshift+0x70>
 800ae2e:	1b03      	subs	r3, r0, r4
 800ae30:	3b15      	subs	r3, #21
 800ae32:	f023 0303 	bic.w	r3, r3, #3
 800ae36:	3304      	adds	r3, #4
 800ae38:	f104 0215 	add.w	r2, r4, #21
 800ae3c:	4290      	cmp	r0, r2
 800ae3e:	bf38      	it	cc
 800ae40:	2304      	movcc	r3, #4
 800ae42:	f841 c003 	str.w	ip, [r1, r3]
 800ae46:	f1bc 0f00 	cmp.w	ip, #0
 800ae4a:	d001      	beq.n	800ae50 <__lshift+0xac>
 800ae4c:	f108 0602 	add.w	r6, r8, #2
 800ae50:	3e01      	subs	r6, #1
 800ae52:	4638      	mov	r0, r7
 800ae54:	612e      	str	r6, [r5, #16]
 800ae56:	4621      	mov	r1, r4
 800ae58:	f7ff fdd2 	bl	800aa00 <_Bfree>
 800ae5c:	4628      	mov	r0, r5
 800ae5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae62:	f842 0f04 	str.w	r0, [r2, #4]!
 800ae66:	3301      	adds	r3, #1
 800ae68:	e7c1      	b.n	800adee <__lshift+0x4a>
 800ae6a:	3904      	subs	r1, #4
 800ae6c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae70:	f841 2f04 	str.w	r2, [r1, #4]!
 800ae74:	4298      	cmp	r0, r3
 800ae76:	d8f9      	bhi.n	800ae6c <__lshift+0xc8>
 800ae78:	e7ea      	b.n	800ae50 <__lshift+0xac>
 800ae7a:	bf00      	nop
 800ae7c:	0800d43b 	.word	0x0800d43b
 800ae80:	0800d44c 	.word	0x0800d44c

0800ae84 <__mcmp>:
 800ae84:	b530      	push	{r4, r5, lr}
 800ae86:	6902      	ldr	r2, [r0, #16]
 800ae88:	690c      	ldr	r4, [r1, #16]
 800ae8a:	1b12      	subs	r2, r2, r4
 800ae8c:	d10e      	bne.n	800aeac <__mcmp+0x28>
 800ae8e:	f100 0314 	add.w	r3, r0, #20
 800ae92:	3114      	adds	r1, #20
 800ae94:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ae98:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ae9c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800aea0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800aea4:	42a5      	cmp	r5, r4
 800aea6:	d003      	beq.n	800aeb0 <__mcmp+0x2c>
 800aea8:	d305      	bcc.n	800aeb6 <__mcmp+0x32>
 800aeaa:	2201      	movs	r2, #1
 800aeac:	4610      	mov	r0, r2
 800aeae:	bd30      	pop	{r4, r5, pc}
 800aeb0:	4283      	cmp	r3, r0
 800aeb2:	d3f3      	bcc.n	800ae9c <__mcmp+0x18>
 800aeb4:	e7fa      	b.n	800aeac <__mcmp+0x28>
 800aeb6:	f04f 32ff 	mov.w	r2, #4294967295
 800aeba:	e7f7      	b.n	800aeac <__mcmp+0x28>

0800aebc <__mdiff>:
 800aebc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aec0:	460c      	mov	r4, r1
 800aec2:	4606      	mov	r6, r0
 800aec4:	4611      	mov	r1, r2
 800aec6:	4620      	mov	r0, r4
 800aec8:	4690      	mov	r8, r2
 800aeca:	f7ff ffdb 	bl	800ae84 <__mcmp>
 800aece:	1e05      	subs	r5, r0, #0
 800aed0:	d110      	bne.n	800aef4 <__mdiff+0x38>
 800aed2:	4629      	mov	r1, r5
 800aed4:	4630      	mov	r0, r6
 800aed6:	f7ff fd53 	bl	800a980 <_Balloc>
 800aeda:	b930      	cbnz	r0, 800aeea <__mdiff+0x2e>
 800aedc:	4b3a      	ldr	r3, [pc, #232]	; (800afc8 <__mdiff+0x10c>)
 800aede:	4602      	mov	r2, r0
 800aee0:	f240 2132 	movw	r1, #562	; 0x232
 800aee4:	4839      	ldr	r0, [pc, #228]	; (800afcc <__mdiff+0x110>)
 800aee6:	f000 fb31 	bl	800b54c <__assert_func>
 800aeea:	2301      	movs	r3, #1
 800aeec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800aef0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aef4:	bfa4      	itt	ge
 800aef6:	4643      	movge	r3, r8
 800aef8:	46a0      	movge	r8, r4
 800aefa:	4630      	mov	r0, r6
 800aefc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800af00:	bfa6      	itte	ge
 800af02:	461c      	movge	r4, r3
 800af04:	2500      	movge	r5, #0
 800af06:	2501      	movlt	r5, #1
 800af08:	f7ff fd3a 	bl	800a980 <_Balloc>
 800af0c:	b920      	cbnz	r0, 800af18 <__mdiff+0x5c>
 800af0e:	4b2e      	ldr	r3, [pc, #184]	; (800afc8 <__mdiff+0x10c>)
 800af10:	4602      	mov	r2, r0
 800af12:	f44f 7110 	mov.w	r1, #576	; 0x240
 800af16:	e7e5      	b.n	800aee4 <__mdiff+0x28>
 800af18:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800af1c:	6926      	ldr	r6, [r4, #16]
 800af1e:	60c5      	str	r5, [r0, #12]
 800af20:	f104 0914 	add.w	r9, r4, #20
 800af24:	f108 0514 	add.w	r5, r8, #20
 800af28:	f100 0e14 	add.w	lr, r0, #20
 800af2c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800af30:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800af34:	f108 0210 	add.w	r2, r8, #16
 800af38:	46f2      	mov	sl, lr
 800af3a:	2100      	movs	r1, #0
 800af3c:	f859 3b04 	ldr.w	r3, [r9], #4
 800af40:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800af44:	fa1f f883 	uxth.w	r8, r3
 800af48:	fa11 f18b 	uxtah	r1, r1, fp
 800af4c:	0c1b      	lsrs	r3, r3, #16
 800af4e:	eba1 0808 	sub.w	r8, r1, r8
 800af52:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800af56:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800af5a:	fa1f f888 	uxth.w	r8, r8
 800af5e:	1419      	asrs	r1, r3, #16
 800af60:	454e      	cmp	r6, r9
 800af62:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800af66:	f84a 3b04 	str.w	r3, [sl], #4
 800af6a:	d8e7      	bhi.n	800af3c <__mdiff+0x80>
 800af6c:	1b33      	subs	r3, r6, r4
 800af6e:	3b15      	subs	r3, #21
 800af70:	f023 0303 	bic.w	r3, r3, #3
 800af74:	3304      	adds	r3, #4
 800af76:	3415      	adds	r4, #21
 800af78:	42a6      	cmp	r6, r4
 800af7a:	bf38      	it	cc
 800af7c:	2304      	movcc	r3, #4
 800af7e:	441d      	add	r5, r3
 800af80:	4473      	add	r3, lr
 800af82:	469e      	mov	lr, r3
 800af84:	462e      	mov	r6, r5
 800af86:	4566      	cmp	r6, ip
 800af88:	d30e      	bcc.n	800afa8 <__mdiff+0xec>
 800af8a:	f10c 0203 	add.w	r2, ip, #3
 800af8e:	1b52      	subs	r2, r2, r5
 800af90:	f022 0203 	bic.w	r2, r2, #3
 800af94:	3d03      	subs	r5, #3
 800af96:	45ac      	cmp	ip, r5
 800af98:	bf38      	it	cc
 800af9a:	2200      	movcc	r2, #0
 800af9c:	441a      	add	r2, r3
 800af9e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800afa2:	b17b      	cbz	r3, 800afc4 <__mdiff+0x108>
 800afa4:	6107      	str	r7, [r0, #16]
 800afa6:	e7a3      	b.n	800aef0 <__mdiff+0x34>
 800afa8:	f856 8b04 	ldr.w	r8, [r6], #4
 800afac:	fa11 f288 	uxtah	r2, r1, r8
 800afb0:	1414      	asrs	r4, r2, #16
 800afb2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800afb6:	b292      	uxth	r2, r2
 800afb8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800afbc:	f84e 2b04 	str.w	r2, [lr], #4
 800afc0:	1421      	asrs	r1, r4, #16
 800afc2:	e7e0      	b.n	800af86 <__mdiff+0xca>
 800afc4:	3f01      	subs	r7, #1
 800afc6:	e7ea      	b.n	800af9e <__mdiff+0xe2>
 800afc8:	0800d43b 	.word	0x0800d43b
 800afcc:	0800d44c 	.word	0x0800d44c

0800afd0 <__d2b>:
 800afd0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800afd4:	4689      	mov	r9, r1
 800afd6:	2101      	movs	r1, #1
 800afd8:	ec57 6b10 	vmov	r6, r7, d0
 800afdc:	4690      	mov	r8, r2
 800afde:	f7ff fccf 	bl	800a980 <_Balloc>
 800afe2:	4604      	mov	r4, r0
 800afe4:	b930      	cbnz	r0, 800aff4 <__d2b+0x24>
 800afe6:	4602      	mov	r2, r0
 800afe8:	4b25      	ldr	r3, [pc, #148]	; (800b080 <__d2b+0xb0>)
 800afea:	4826      	ldr	r0, [pc, #152]	; (800b084 <__d2b+0xb4>)
 800afec:	f240 310a 	movw	r1, #778	; 0x30a
 800aff0:	f000 faac 	bl	800b54c <__assert_func>
 800aff4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800aff8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800affc:	bb35      	cbnz	r5, 800b04c <__d2b+0x7c>
 800affe:	2e00      	cmp	r6, #0
 800b000:	9301      	str	r3, [sp, #4]
 800b002:	d028      	beq.n	800b056 <__d2b+0x86>
 800b004:	4668      	mov	r0, sp
 800b006:	9600      	str	r6, [sp, #0]
 800b008:	f7ff fd82 	bl	800ab10 <__lo0bits>
 800b00c:	9900      	ldr	r1, [sp, #0]
 800b00e:	b300      	cbz	r0, 800b052 <__d2b+0x82>
 800b010:	9a01      	ldr	r2, [sp, #4]
 800b012:	f1c0 0320 	rsb	r3, r0, #32
 800b016:	fa02 f303 	lsl.w	r3, r2, r3
 800b01a:	430b      	orrs	r3, r1
 800b01c:	40c2      	lsrs	r2, r0
 800b01e:	6163      	str	r3, [r4, #20]
 800b020:	9201      	str	r2, [sp, #4]
 800b022:	9b01      	ldr	r3, [sp, #4]
 800b024:	61a3      	str	r3, [r4, #24]
 800b026:	2b00      	cmp	r3, #0
 800b028:	bf14      	ite	ne
 800b02a:	2202      	movne	r2, #2
 800b02c:	2201      	moveq	r2, #1
 800b02e:	6122      	str	r2, [r4, #16]
 800b030:	b1d5      	cbz	r5, 800b068 <__d2b+0x98>
 800b032:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b036:	4405      	add	r5, r0
 800b038:	f8c9 5000 	str.w	r5, [r9]
 800b03c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b040:	f8c8 0000 	str.w	r0, [r8]
 800b044:	4620      	mov	r0, r4
 800b046:	b003      	add	sp, #12
 800b048:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b04c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b050:	e7d5      	b.n	800affe <__d2b+0x2e>
 800b052:	6161      	str	r1, [r4, #20]
 800b054:	e7e5      	b.n	800b022 <__d2b+0x52>
 800b056:	a801      	add	r0, sp, #4
 800b058:	f7ff fd5a 	bl	800ab10 <__lo0bits>
 800b05c:	9b01      	ldr	r3, [sp, #4]
 800b05e:	6163      	str	r3, [r4, #20]
 800b060:	2201      	movs	r2, #1
 800b062:	6122      	str	r2, [r4, #16]
 800b064:	3020      	adds	r0, #32
 800b066:	e7e3      	b.n	800b030 <__d2b+0x60>
 800b068:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b06c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b070:	f8c9 0000 	str.w	r0, [r9]
 800b074:	6918      	ldr	r0, [r3, #16]
 800b076:	f7ff fd2b 	bl	800aad0 <__hi0bits>
 800b07a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b07e:	e7df      	b.n	800b040 <__d2b+0x70>
 800b080:	0800d43b 	.word	0x0800d43b
 800b084:	0800d44c 	.word	0x0800d44c

0800b088 <_calloc_r>:
 800b088:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b08a:	fba1 2402 	umull	r2, r4, r1, r2
 800b08e:	b94c      	cbnz	r4, 800b0a4 <_calloc_r+0x1c>
 800b090:	4611      	mov	r1, r2
 800b092:	9201      	str	r2, [sp, #4]
 800b094:	f000 f87a 	bl	800b18c <_malloc_r>
 800b098:	9a01      	ldr	r2, [sp, #4]
 800b09a:	4605      	mov	r5, r0
 800b09c:	b930      	cbnz	r0, 800b0ac <_calloc_r+0x24>
 800b09e:	4628      	mov	r0, r5
 800b0a0:	b003      	add	sp, #12
 800b0a2:	bd30      	pop	{r4, r5, pc}
 800b0a4:	220c      	movs	r2, #12
 800b0a6:	6002      	str	r2, [r0, #0]
 800b0a8:	2500      	movs	r5, #0
 800b0aa:	e7f8      	b.n	800b09e <_calloc_r+0x16>
 800b0ac:	4621      	mov	r1, r4
 800b0ae:	f7fe f93f 	bl	8009330 <memset>
 800b0b2:	e7f4      	b.n	800b09e <_calloc_r+0x16>

0800b0b4 <_free_r>:
 800b0b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b0b6:	2900      	cmp	r1, #0
 800b0b8:	d044      	beq.n	800b144 <_free_r+0x90>
 800b0ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b0be:	9001      	str	r0, [sp, #4]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	f1a1 0404 	sub.w	r4, r1, #4
 800b0c6:	bfb8      	it	lt
 800b0c8:	18e4      	addlt	r4, r4, r3
 800b0ca:	f000 fa9b 	bl	800b604 <__malloc_lock>
 800b0ce:	4a1e      	ldr	r2, [pc, #120]	; (800b148 <_free_r+0x94>)
 800b0d0:	9801      	ldr	r0, [sp, #4]
 800b0d2:	6813      	ldr	r3, [r2, #0]
 800b0d4:	b933      	cbnz	r3, 800b0e4 <_free_r+0x30>
 800b0d6:	6063      	str	r3, [r4, #4]
 800b0d8:	6014      	str	r4, [r2, #0]
 800b0da:	b003      	add	sp, #12
 800b0dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b0e0:	f000 ba96 	b.w	800b610 <__malloc_unlock>
 800b0e4:	42a3      	cmp	r3, r4
 800b0e6:	d908      	bls.n	800b0fa <_free_r+0x46>
 800b0e8:	6825      	ldr	r5, [r4, #0]
 800b0ea:	1961      	adds	r1, r4, r5
 800b0ec:	428b      	cmp	r3, r1
 800b0ee:	bf01      	itttt	eq
 800b0f0:	6819      	ldreq	r1, [r3, #0]
 800b0f2:	685b      	ldreq	r3, [r3, #4]
 800b0f4:	1949      	addeq	r1, r1, r5
 800b0f6:	6021      	streq	r1, [r4, #0]
 800b0f8:	e7ed      	b.n	800b0d6 <_free_r+0x22>
 800b0fa:	461a      	mov	r2, r3
 800b0fc:	685b      	ldr	r3, [r3, #4]
 800b0fe:	b10b      	cbz	r3, 800b104 <_free_r+0x50>
 800b100:	42a3      	cmp	r3, r4
 800b102:	d9fa      	bls.n	800b0fa <_free_r+0x46>
 800b104:	6811      	ldr	r1, [r2, #0]
 800b106:	1855      	adds	r5, r2, r1
 800b108:	42a5      	cmp	r5, r4
 800b10a:	d10b      	bne.n	800b124 <_free_r+0x70>
 800b10c:	6824      	ldr	r4, [r4, #0]
 800b10e:	4421      	add	r1, r4
 800b110:	1854      	adds	r4, r2, r1
 800b112:	42a3      	cmp	r3, r4
 800b114:	6011      	str	r1, [r2, #0]
 800b116:	d1e0      	bne.n	800b0da <_free_r+0x26>
 800b118:	681c      	ldr	r4, [r3, #0]
 800b11a:	685b      	ldr	r3, [r3, #4]
 800b11c:	6053      	str	r3, [r2, #4]
 800b11e:	4421      	add	r1, r4
 800b120:	6011      	str	r1, [r2, #0]
 800b122:	e7da      	b.n	800b0da <_free_r+0x26>
 800b124:	d902      	bls.n	800b12c <_free_r+0x78>
 800b126:	230c      	movs	r3, #12
 800b128:	6003      	str	r3, [r0, #0]
 800b12a:	e7d6      	b.n	800b0da <_free_r+0x26>
 800b12c:	6825      	ldr	r5, [r4, #0]
 800b12e:	1961      	adds	r1, r4, r5
 800b130:	428b      	cmp	r3, r1
 800b132:	bf04      	itt	eq
 800b134:	6819      	ldreq	r1, [r3, #0]
 800b136:	685b      	ldreq	r3, [r3, #4]
 800b138:	6063      	str	r3, [r4, #4]
 800b13a:	bf04      	itt	eq
 800b13c:	1949      	addeq	r1, r1, r5
 800b13e:	6021      	streq	r1, [r4, #0]
 800b140:	6054      	str	r4, [r2, #4]
 800b142:	e7ca      	b.n	800b0da <_free_r+0x26>
 800b144:	b003      	add	sp, #12
 800b146:	bd30      	pop	{r4, r5, pc}
 800b148:	20000564 	.word	0x20000564

0800b14c <sbrk_aligned>:
 800b14c:	b570      	push	{r4, r5, r6, lr}
 800b14e:	4e0e      	ldr	r6, [pc, #56]	; (800b188 <sbrk_aligned+0x3c>)
 800b150:	460c      	mov	r4, r1
 800b152:	6831      	ldr	r1, [r6, #0]
 800b154:	4605      	mov	r5, r0
 800b156:	b911      	cbnz	r1, 800b15e <sbrk_aligned+0x12>
 800b158:	f000 f9e8 	bl	800b52c <_sbrk_r>
 800b15c:	6030      	str	r0, [r6, #0]
 800b15e:	4621      	mov	r1, r4
 800b160:	4628      	mov	r0, r5
 800b162:	f000 f9e3 	bl	800b52c <_sbrk_r>
 800b166:	1c43      	adds	r3, r0, #1
 800b168:	d00a      	beq.n	800b180 <sbrk_aligned+0x34>
 800b16a:	1cc4      	adds	r4, r0, #3
 800b16c:	f024 0403 	bic.w	r4, r4, #3
 800b170:	42a0      	cmp	r0, r4
 800b172:	d007      	beq.n	800b184 <sbrk_aligned+0x38>
 800b174:	1a21      	subs	r1, r4, r0
 800b176:	4628      	mov	r0, r5
 800b178:	f000 f9d8 	bl	800b52c <_sbrk_r>
 800b17c:	3001      	adds	r0, #1
 800b17e:	d101      	bne.n	800b184 <sbrk_aligned+0x38>
 800b180:	f04f 34ff 	mov.w	r4, #4294967295
 800b184:	4620      	mov	r0, r4
 800b186:	bd70      	pop	{r4, r5, r6, pc}
 800b188:	20000568 	.word	0x20000568

0800b18c <_malloc_r>:
 800b18c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b190:	1ccd      	adds	r5, r1, #3
 800b192:	f025 0503 	bic.w	r5, r5, #3
 800b196:	3508      	adds	r5, #8
 800b198:	2d0c      	cmp	r5, #12
 800b19a:	bf38      	it	cc
 800b19c:	250c      	movcc	r5, #12
 800b19e:	2d00      	cmp	r5, #0
 800b1a0:	4607      	mov	r7, r0
 800b1a2:	db01      	blt.n	800b1a8 <_malloc_r+0x1c>
 800b1a4:	42a9      	cmp	r1, r5
 800b1a6:	d905      	bls.n	800b1b4 <_malloc_r+0x28>
 800b1a8:	230c      	movs	r3, #12
 800b1aa:	603b      	str	r3, [r7, #0]
 800b1ac:	2600      	movs	r6, #0
 800b1ae:	4630      	mov	r0, r6
 800b1b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1b4:	4e2e      	ldr	r6, [pc, #184]	; (800b270 <_malloc_r+0xe4>)
 800b1b6:	f000 fa25 	bl	800b604 <__malloc_lock>
 800b1ba:	6833      	ldr	r3, [r6, #0]
 800b1bc:	461c      	mov	r4, r3
 800b1be:	bb34      	cbnz	r4, 800b20e <_malloc_r+0x82>
 800b1c0:	4629      	mov	r1, r5
 800b1c2:	4638      	mov	r0, r7
 800b1c4:	f7ff ffc2 	bl	800b14c <sbrk_aligned>
 800b1c8:	1c43      	adds	r3, r0, #1
 800b1ca:	4604      	mov	r4, r0
 800b1cc:	d14d      	bne.n	800b26a <_malloc_r+0xde>
 800b1ce:	6834      	ldr	r4, [r6, #0]
 800b1d0:	4626      	mov	r6, r4
 800b1d2:	2e00      	cmp	r6, #0
 800b1d4:	d140      	bne.n	800b258 <_malloc_r+0xcc>
 800b1d6:	6823      	ldr	r3, [r4, #0]
 800b1d8:	4631      	mov	r1, r6
 800b1da:	4638      	mov	r0, r7
 800b1dc:	eb04 0803 	add.w	r8, r4, r3
 800b1e0:	f000 f9a4 	bl	800b52c <_sbrk_r>
 800b1e4:	4580      	cmp	r8, r0
 800b1e6:	d13a      	bne.n	800b25e <_malloc_r+0xd2>
 800b1e8:	6821      	ldr	r1, [r4, #0]
 800b1ea:	3503      	adds	r5, #3
 800b1ec:	1a6d      	subs	r5, r5, r1
 800b1ee:	f025 0503 	bic.w	r5, r5, #3
 800b1f2:	3508      	adds	r5, #8
 800b1f4:	2d0c      	cmp	r5, #12
 800b1f6:	bf38      	it	cc
 800b1f8:	250c      	movcc	r5, #12
 800b1fa:	4629      	mov	r1, r5
 800b1fc:	4638      	mov	r0, r7
 800b1fe:	f7ff ffa5 	bl	800b14c <sbrk_aligned>
 800b202:	3001      	adds	r0, #1
 800b204:	d02b      	beq.n	800b25e <_malloc_r+0xd2>
 800b206:	6823      	ldr	r3, [r4, #0]
 800b208:	442b      	add	r3, r5
 800b20a:	6023      	str	r3, [r4, #0]
 800b20c:	e00e      	b.n	800b22c <_malloc_r+0xa0>
 800b20e:	6822      	ldr	r2, [r4, #0]
 800b210:	1b52      	subs	r2, r2, r5
 800b212:	d41e      	bmi.n	800b252 <_malloc_r+0xc6>
 800b214:	2a0b      	cmp	r2, #11
 800b216:	d916      	bls.n	800b246 <_malloc_r+0xba>
 800b218:	1961      	adds	r1, r4, r5
 800b21a:	42a3      	cmp	r3, r4
 800b21c:	6025      	str	r5, [r4, #0]
 800b21e:	bf18      	it	ne
 800b220:	6059      	strne	r1, [r3, #4]
 800b222:	6863      	ldr	r3, [r4, #4]
 800b224:	bf08      	it	eq
 800b226:	6031      	streq	r1, [r6, #0]
 800b228:	5162      	str	r2, [r4, r5]
 800b22a:	604b      	str	r3, [r1, #4]
 800b22c:	4638      	mov	r0, r7
 800b22e:	f104 060b 	add.w	r6, r4, #11
 800b232:	f000 f9ed 	bl	800b610 <__malloc_unlock>
 800b236:	f026 0607 	bic.w	r6, r6, #7
 800b23a:	1d23      	adds	r3, r4, #4
 800b23c:	1af2      	subs	r2, r6, r3
 800b23e:	d0b6      	beq.n	800b1ae <_malloc_r+0x22>
 800b240:	1b9b      	subs	r3, r3, r6
 800b242:	50a3      	str	r3, [r4, r2]
 800b244:	e7b3      	b.n	800b1ae <_malloc_r+0x22>
 800b246:	6862      	ldr	r2, [r4, #4]
 800b248:	42a3      	cmp	r3, r4
 800b24a:	bf0c      	ite	eq
 800b24c:	6032      	streq	r2, [r6, #0]
 800b24e:	605a      	strne	r2, [r3, #4]
 800b250:	e7ec      	b.n	800b22c <_malloc_r+0xa0>
 800b252:	4623      	mov	r3, r4
 800b254:	6864      	ldr	r4, [r4, #4]
 800b256:	e7b2      	b.n	800b1be <_malloc_r+0x32>
 800b258:	4634      	mov	r4, r6
 800b25a:	6876      	ldr	r6, [r6, #4]
 800b25c:	e7b9      	b.n	800b1d2 <_malloc_r+0x46>
 800b25e:	230c      	movs	r3, #12
 800b260:	603b      	str	r3, [r7, #0]
 800b262:	4638      	mov	r0, r7
 800b264:	f000 f9d4 	bl	800b610 <__malloc_unlock>
 800b268:	e7a1      	b.n	800b1ae <_malloc_r+0x22>
 800b26a:	6025      	str	r5, [r4, #0]
 800b26c:	e7de      	b.n	800b22c <_malloc_r+0xa0>
 800b26e:	bf00      	nop
 800b270:	20000564 	.word	0x20000564

0800b274 <__ssputs_r>:
 800b274:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b278:	688e      	ldr	r6, [r1, #8]
 800b27a:	429e      	cmp	r6, r3
 800b27c:	4682      	mov	sl, r0
 800b27e:	460c      	mov	r4, r1
 800b280:	4690      	mov	r8, r2
 800b282:	461f      	mov	r7, r3
 800b284:	d838      	bhi.n	800b2f8 <__ssputs_r+0x84>
 800b286:	898a      	ldrh	r2, [r1, #12]
 800b288:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b28c:	d032      	beq.n	800b2f4 <__ssputs_r+0x80>
 800b28e:	6825      	ldr	r5, [r4, #0]
 800b290:	6909      	ldr	r1, [r1, #16]
 800b292:	eba5 0901 	sub.w	r9, r5, r1
 800b296:	6965      	ldr	r5, [r4, #20]
 800b298:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b29c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b2a0:	3301      	adds	r3, #1
 800b2a2:	444b      	add	r3, r9
 800b2a4:	106d      	asrs	r5, r5, #1
 800b2a6:	429d      	cmp	r5, r3
 800b2a8:	bf38      	it	cc
 800b2aa:	461d      	movcc	r5, r3
 800b2ac:	0553      	lsls	r3, r2, #21
 800b2ae:	d531      	bpl.n	800b314 <__ssputs_r+0xa0>
 800b2b0:	4629      	mov	r1, r5
 800b2b2:	f7ff ff6b 	bl	800b18c <_malloc_r>
 800b2b6:	4606      	mov	r6, r0
 800b2b8:	b950      	cbnz	r0, 800b2d0 <__ssputs_r+0x5c>
 800b2ba:	230c      	movs	r3, #12
 800b2bc:	f8ca 3000 	str.w	r3, [sl]
 800b2c0:	89a3      	ldrh	r3, [r4, #12]
 800b2c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b2c6:	81a3      	strh	r3, [r4, #12]
 800b2c8:	f04f 30ff 	mov.w	r0, #4294967295
 800b2cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2d0:	6921      	ldr	r1, [r4, #16]
 800b2d2:	464a      	mov	r2, r9
 800b2d4:	f7ff fb46 	bl	800a964 <memcpy>
 800b2d8:	89a3      	ldrh	r3, [r4, #12]
 800b2da:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b2de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2e2:	81a3      	strh	r3, [r4, #12]
 800b2e4:	6126      	str	r6, [r4, #16]
 800b2e6:	6165      	str	r5, [r4, #20]
 800b2e8:	444e      	add	r6, r9
 800b2ea:	eba5 0509 	sub.w	r5, r5, r9
 800b2ee:	6026      	str	r6, [r4, #0]
 800b2f0:	60a5      	str	r5, [r4, #8]
 800b2f2:	463e      	mov	r6, r7
 800b2f4:	42be      	cmp	r6, r7
 800b2f6:	d900      	bls.n	800b2fa <__ssputs_r+0x86>
 800b2f8:	463e      	mov	r6, r7
 800b2fa:	6820      	ldr	r0, [r4, #0]
 800b2fc:	4632      	mov	r2, r6
 800b2fe:	4641      	mov	r1, r8
 800b300:	f000 f966 	bl	800b5d0 <memmove>
 800b304:	68a3      	ldr	r3, [r4, #8]
 800b306:	1b9b      	subs	r3, r3, r6
 800b308:	60a3      	str	r3, [r4, #8]
 800b30a:	6823      	ldr	r3, [r4, #0]
 800b30c:	4433      	add	r3, r6
 800b30e:	6023      	str	r3, [r4, #0]
 800b310:	2000      	movs	r0, #0
 800b312:	e7db      	b.n	800b2cc <__ssputs_r+0x58>
 800b314:	462a      	mov	r2, r5
 800b316:	f000 f981 	bl	800b61c <_realloc_r>
 800b31a:	4606      	mov	r6, r0
 800b31c:	2800      	cmp	r0, #0
 800b31e:	d1e1      	bne.n	800b2e4 <__ssputs_r+0x70>
 800b320:	6921      	ldr	r1, [r4, #16]
 800b322:	4650      	mov	r0, sl
 800b324:	f7ff fec6 	bl	800b0b4 <_free_r>
 800b328:	e7c7      	b.n	800b2ba <__ssputs_r+0x46>
	...

0800b32c <_svfiprintf_r>:
 800b32c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b330:	4698      	mov	r8, r3
 800b332:	898b      	ldrh	r3, [r1, #12]
 800b334:	061b      	lsls	r3, r3, #24
 800b336:	b09d      	sub	sp, #116	; 0x74
 800b338:	4607      	mov	r7, r0
 800b33a:	460d      	mov	r5, r1
 800b33c:	4614      	mov	r4, r2
 800b33e:	d50e      	bpl.n	800b35e <_svfiprintf_r+0x32>
 800b340:	690b      	ldr	r3, [r1, #16]
 800b342:	b963      	cbnz	r3, 800b35e <_svfiprintf_r+0x32>
 800b344:	2140      	movs	r1, #64	; 0x40
 800b346:	f7ff ff21 	bl	800b18c <_malloc_r>
 800b34a:	6028      	str	r0, [r5, #0]
 800b34c:	6128      	str	r0, [r5, #16]
 800b34e:	b920      	cbnz	r0, 800b35a <_svfiprintf_r+0x2e>
 800b350:	230c      	movs	r3, #12
 800b352:	603b      	str	r3, [r7, #0]
 800b354:	f04f 30ff 	mov.w	r0, #4294967295
 800b358:	e0d1      	b.n	800b4fe <_svfiprintf_r+0x1d2>
 800b35a:	2340      	movs	r3, #64	; 0x40
 800b35c:	616b      	str	r3, [r5, #20]
 800b35e:	2300      	movs	r3, #0
 800b360:	9309      	str	r3, [sp, #36]	; 0x24
 800b362:	2320      	movs	r3, #32
 800b364:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b368:	f8cd 800c 	str.w	r8, [sp, #12]
 800b36c:	2330      	movs	r3, #48	; 0x30
 800b36e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b518 <_svfiprintf_r+0x1ec>
 800b372:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b376:	f04f 0901 	mov.w	r9, #1
 800b37a:	4623      	mov	r3, r4
 800b37c:	469a      	mov	sl, r3
 800b37e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b382:	b10a      	cbz	r2, 800b388 <_svfiprintf_r+0x5c>
 800b384:	2a25      	cmp	r2, #37	; 0x25
 800b386:	d1f9      	bne.n	800b37c <_svfiprintf_r+0x50>
 800b388:	ebba 0b04 	subs.w	fp, sl, r4
 800b38c:	d00b      	beq.n	800b3a6 <_svfiprintf_r+0x7a>
 800b38e:	465b      	mov	r3, fp
 800b390:	4622      	mov	r2, r4
 800b392:	4629      	mov	r1, r5
 800b394:	4638      	mov	r0, r7
 800b396:	f7ff ff6d 	bl	800b274 <__ssputs_r>
 800b39a:	3001      	adds	r0, #1
 800b39c:	f000 80aa 	beq.w	800b4f4 <_svfiprintf_r+0x1c8>
 800b3a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b3a2:	445a      	add	r2, fp
 800b3a4:	9209      	str	r2, [sp, #36]	; 0x24
 800b3a6:	f89a 3000 	ldrb.w	r3, [sl]
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	f000 80a2 	beq.w	800b4f4 <_svfiprintf_r+0x1c8>
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	f04f 32ff 	mov.w	r2, #4294967295
 800b3b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b3ba:	f10a 0a01 	add.w	sl, sl, #1
 800b3be:	9304      	str	r3, [sp, #16]
 800b3c0:	9307      	str	r3, [sp, #28]
 800b3c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b3c6:	931a      	str	r3, [sp, #104]	; 0x68
 800b3c8:	4654      	mov	r4, sl
 800b3ca:	2205      	movs	r2, #5
 800b3cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3d0:	4851      	ldr	r0, [pc, #324]	; (800b518 <_svfiprintf_r+0x1ec>)
 800b3d2:	f7f4 ff0d 	bl	80001f0 <memchr>
 800b3d6:	9a04      	ldr	r2, [sp, #16]
 800b3d8:	b9d8      	cbnz	r0, 800b412 <_svfiprintf_r+0xe6>
 800b3da:	06d0      	lsls	r0, r2, #27
 800b3dc:	bf44      	itt	mi
 800b3de:	2320      	movmi	r3, #32
 800b3e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b3e4:	0711      	lsls	r1, r2, #28
 800b3e6:	bf44      	itt	mi
 800b3e8:	232b      	movmi	r3, #43	; 0x2b
 800b3ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b3ee:	f89a 3000 	ldrb.w	r3, [sl]
 800b3f2:	2b2a      	cmp	r3, #42	; 0x2a
 800b3f4:	d015      	beq.n	800b422 <_svfiprintf_r+0xf6>
 800b3f6:	9a07      	ldr	r2, [sp, #28]
 800b3f8:	4654      	mov	r4, sl
 800b3fa:	2000      	movs	r0, #0
 800b3fc:	f04f 0c0a 	mov.w	ip, #10
 800b400:	4621      	mov	r1, r4
 800b402:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b406:	3b30      	subs	r3, #48	; 0x30
 800b408:	2b09      	cmp	r3, #9
 800b40a:	d94e      	bls.n	800b4aa <_svfiprintf_r+0x17e>
 800b40c:	b1b0      	cbz	r0, 800b43c <_svfiprintf_r+0x110>
 800b40e:	9207      	str	r2, [sp, #28]
 800b410:	e014      	b.n	800b43c <_svfiprintf_r+0x110>
 800b412:	eba0 0308 	sub.w	r3, r0, r8
 800b416:	fa09 f303 	lsl.w	r3, r9, r3
 800b41a:	4313      	orrs	r3, r2
 800b41c:	9304      	str	r3, [sp, #16]
 800b41e:	46a2      	mov	sl, r4
 800b420:	e7d2      	b.n	800b3c8 <_svfiprintf_r+0x9c>
 800b422:	9b03      	ldr	r3, [sp, #12]
 800b424:	1d19      	adds	r1, r3, #4
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	9103      	str	r1, [sp, #12]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	bfbb      	ittet	lt
 800b42e:	425b      	neglt	r3, r3
 800b430:	f042 0202 	orrlt.w	r2, r2, #2
 800b434:	9307      	strge	r3, [sp, #28]
 800b436:	9307      	strlt	r3, [sp, #28]
 800b438:	bfb8      	it	lt
 800b43a:	9204      	strlt	r2, [sp, #16]
 800b43c:	7823      	ldrb	r3, [r4, #0]
 800b43e:	2b2e      	cmp	r3, #46	; 0x2e
 800b440:	d10c      	bne.n	800b45c <_svfiprintf_r+0x130>
 800b442:	7863      	ldrb	r3, [r4, #1]
 800b444:	2b2a      	cmp	r3, #42	; 0x2a
 800b446:	d135      	bne.n	800b4b4 <_svfiprintf_r+0x188>
 800b448:	9b03      	ldr	r3, [sp, #12]
 800b44a:	1d1a      	adds	r2, r3, #4
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	9203      	str	r2, [sp, #12]
 800b450:	2b00      	cmp	r3, #0
 800b452:	bfb8      	it	lt
 800b454:	f04f 33ff 	movlt.w	r3, #4294967295
 800b458:	3402      	adds	r4, #2
 800b45a:	9305      	str	r3, [sp, #20]
 800b45c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b528 <_svfiprintf_r+0x1fc>
 800b460:	7821      	ldrb	r1, [r4, #0]
 800b462:	2203      	movs	r2, #3
 800b464:	4650      	mov	r0, sl
 800b466:	f7f4 fec3 	bl	80001f0 <memchr>
 800b46a:	b140      	cbz	r0, 800b47e <_svfiprintf_r+0x152>
 800b46c:	2340      	movs	r3, #64	; 0x40
 800b46e:	eba0 000a 	sub.w	r0, r0, sl
 800b472:	fa03 f000 	lsl.w	r0, r3, r0
 800b476:	9b04      	ldr	r3, [sp, #16]
 800b478:	4303      	orrs	r3, r0
 800b47a:	3401      	adds	r4, #1
 800b47c:	9304      	str	r3, [sp, #16]
 800b47e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b482:	4826      	ldr	r0, [pc, #152]	; (800b51c <_svfiprintf_r+0x1f0>)
 800b484:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b488:	2206      	movs	r2, #6
 800b48a:	f7f4 feb1 	bl	80001f0 <memchr>
 800b48e:	2800      	cmp	r0, #0
 800b490:	d038      	beq.n	800b504 <_svfiprintf_r+0x1d8>
 800b492:	4b23      	ldr	r3, [pc, #140]	; (800b520 <_svfiprintf_r+0x1f4>)
 800b494:	bb1b      	cbnz	r3, 800b4de <_svfiprintf_r+0x1b2>
 800b496:	9b03      	ldr	r3, [sp, #12]
 800b498:	3307      	adds	r3, #7
 800b49a:	f023 0307 	bic.w	r3, r3, #7
 800b49e:	3308      	adds	r3, #8
 800b4a0:	9303      	str	r3, [sp, #12]
 800b4a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4a4:	4433      	add	r3, r6
 800b4a6:	9309      	str	r3, [sp, #36]	; 0x24
 800b4a8:	e767      	b.n	800b37a <_svfiprintf_r+0x4e>
 800b4aa:	fb0c 3202 	mla	r2, ip, r2, r3
 800b4ae:	460c      	mov	r4, r1
 800b4b0:	2001      	movs	r0, #1
 800b4b2:	e7a5      	b.n	800b400 <_svfiprintf_r+0xd4>
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	3401      	adds	r4, #1
 800b4b8:	9305      	str	r3, [sp, #20]
 800b4ba:	4619      	mov	r1, r3
 800b4bc:	f04f 0c0a 	mov.w	ip, #10
 800b4c0:	4620      	mov	r0, r4
 800b4c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b4c6:	3a30      	subs	r2, #48	; 0x30
 800b4c8:	2a09      	cmp	r2, #9
 800b4ca:	d903      	bls.n	800b4d4 <_svfiprintf_r+0x1a8>
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d0c5      	beq.n	800b45c <_svfiprintf_r+0x130>
 800b4d0:	9105      	str	r1, [sp, #20]
 800b4d2:	e7c3      	b.n	800b45c <_svfiprintf_r+0x130>
 800b4d4:	fb0c 2101 	mla	r1, ip, r1, r2
 800b4d8:	4604      	mov	r4, r0
 800b4da:	2301      	movs	r3, #1
 800b4dc:	e7f0      	b.n	800b4c0 <_svfiprintf_r+0x194>
 800b4de:	ab03      	add	r3, sp, #12
 800b4e0:	9300      	str	r3, [sp, #0]
 800b4e2:	462a      	mov	r2, r5
 800b4e4:	4b0f      	ldr	r3, [pc, #60]	; (800b524 <_svfiprintf_r+0x1f8>)
 800b4e6:	a904      	add	r1, sp, #16
 800b4e8:	4638      	mov	r0, r7
 800b4ea:	f7fd ffc9 	bl	8009480 <_printf_float>
 800b4ee:	1c42      	adds	r2, r0, #1
 800b4f0:	4606      	mov	r6, r0
 800b4f2:	d1d6      	bne.n	800b4a2 <_svfiprintf_r+0x176>
 800b4f4:	89ab      	ldrh	r3, [r5, #12]
 800b4f6:	065b      	lsls	r3, r3, #25
 800b4f8:	f53f af2c 	bmi.w	800b354 <_svfiprintf_r+0x28>
 800b4fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b4fe:	b01d      	add	sp, #116	; 0x74
 800b500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b504:	ab03      	add	r3, sp, #12
 800b506:	9300      	str	r3, [sp, #0]
 800b508:	462a      	mov	r2, r5
 800b50a:	4b06      	ldr	r3, [pc, #24]	; (800b524 <_svfiprintf_r+0x1f8>)
 800b50c:	a904      	add	r1, sp, #16
 800b50e:	4638      	mov	r0, r7
 800b510:	f7fe fa5a 	bl	80099c8 <_printf_i>
 800b514:	e7eb      	b.n	800b4ee <_svfiprintf_r+0x1c2>
 800b516:	bf00      	nop
 800b518:	0800d5a4 	.word	0x0800d5a4
 800b51c:	0800d5ae 	.word	0x0800d5ae
 800b520:	08009481 	.word	0x08009481
 800b524:	0800b275 	.word	0x0800b275
 800b528:	0800d5aa 	.word	0x0800d5aa

0800b52c <_sbrk_r>:
 800b52c:	b538      	push	{r3, r4, r5, lr}
 800b52e:	4d06      	ldr	r5, [pc, #24]	; (800b548 <_sbrk_r+0x1c>)
 800b530:	2300      	movs	r3, #0
 800b532:	4604      	mov	r4, r0
 800b534:	4608      	mov	r0, r1
 800b536:	602b      	str	r3, [r5, #0]
 800b538:	f7f6 fff0 	bl	800251c <_sbrk>
 800b53c:	1c43      	adds	r3, r0, #1
 800b53e:	d102      	bne.n	800b546 <_sbrk_r+0x1a>
 800b540:	682b      	ldr	r3, [r5, #0]
 800b542:	b103      	cbz	r3, 800b546 <_sbrk_r+0x1a>
 800b544:	6023      	str	r3, [r4, #0]
 800b546:	bd38      	pop	{r3, r4, r5, pc}
 800b548:	2000056c 	.word	0x2000056c

0800b54c <__assert_func>:
 800b54c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b54e:	4614      	mov	r4, r2
 800b550:	461a      	mov	r2, r3
 800b552:	4b09      	ldr	r3, [pc, #36]	; (800b578 <__assert_func+0x2c>)
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	4605      	mov	r5, r0
 800b558:	68d8      	ldr	r0, [r3, #12]
 800b55a:	b14c      	cbz	r4, 800b570 <__assert_func+0x24>
 800b55c:	4b07      	ldr	r3, [pc, #28]	; (800b57c <__assert_func+0x30>)
 800b55e:	9100      	str	r1, [sp, #0]
 800b560:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b564:	4906      	ldr	r1, [pc, #24]	; (800b580 <__assert_func+0x34>)
 800b566:	462b      	mov	r3, r5
 800b568:	f000 f80e 	bl	800b588 <fiprintf>
 800b56c:	f000 faac 	bl	800bac8 <abort>
 800b570:	4b04      	ldr	r3, [pc, #16]	; (800b584 <__assert_func+0x38>)
 800b572:	461c      	mov	r4, r3
 800b574:	e7f3      	b.n	800b55e <__assert_func+0x12>
 800b576:	bf00      	nop
 800b578:	20000024 	.word	0x20000024
 800b57c:	0800d5b5 	.word	0x0800d5b5
 800b580:	0800d5c2 	.word	0x0800d5c2
 800b584:	0800d5f0 	.word	0x0800d5f0

0800b588 <fiprintf>:
 800b588:	b40e      	push	{r1, r2, r3}
 800b58a:	b503      	push	{r0, r1, lr}
 800b58c:	4601      	mov	r1, r0
 800b58e:	ab03      	add	r3, sp, #12
 800b590:	4805      	ldr	r0, [pc, #20]	; (800b5a8 <fiprintf+0x20>)
 800b592:	f853 2b04 	ldr.w	r2, [r3], #4
 800b596:	6800      	ldr	r0, [r0, #0]
 800b598:	9301      	str	r3, [sp, #4]
 800b59a:	f000 f897 	bl	800b6cc <_vfiprintf_r>
 800b59e:	b002      	add	sp, #8
 800b5a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b5a4:	b003      	add	sp, #12
 800b5a6:	4770      	bx	lr
 800b5a8:	20000024 	.word	0x20000024

0800b5ac <__ascii_mbtowc>:
 800b5ac:	b082      	sub	sp, #8
 800b5ae:	b901      	cbnz	r1, 800b5b2 <__ascii_mbtowc+0x6>
 800b5b0:	a901      	add	r1, sp, #4
 800b5b2:	b142      	cbz	r2, 800b5c6 <__ascii_mbtowc+0x1a>
 800b5b4:	b14b      	cbz	r3, 800b5ca <__ascii_mbtowc+0x1e>
 800b5b6:	7813      	ldrb	r3, [r2, #0]
 800b5b8:	600b      	str	r3, [r1, #0]
 800b5ba:	7812      	ldrb	r2, [r2, #0]
 800b5bc:	1e10      	subs	r0, r2, #0
 800b5be:	bf18      	it	ne
 800b5c0:	2001      	movne	r0, #1
 800b5c2:	b002      	add	sp, #8
 800b5c4:	4770      	bx	lr
 800b5c6:	4610      	mov	r0, r2
 800b5c8:	e7fb      	b.n	800b5c2 <__ascii_mbtowc+0x16>
 800b5ca:	f06f 0001 	mvn.w	r0, #1
 800b5ce:	e7f8      	b.n	800b5c2 <__ascii_mbtowc+0x16>

0800b5d0 <memmove>:
 800b5d0:	4288      	cmp	r0, r1
 800b5d2:	b510      	push	{r4, lr}
 800b5d4:	eb01 0402 	add.w	r4, r1, r2
 800b5d8:	d902      	bls.n	800b5e0 <memmove+0x10>
 800b5da:	4284      	cmp	r4, r0
 800b5dc:	4623      	mov	r3, r4
 800b5de:	d807      	bhi.n	800b5f0 <memmove+0x20>
 800b5e0:	1e43      	subs	r3, r0, #1
 800b5e2:	42a1      	cmp	r1, r4
 800b5e4:	d008      	beq.n	800b5f8 <memmove+0x28>
 800b5e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b5ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b5ee:	e7f8      	b.n	800b5e2 <memmove+0x12>
 800b5f0:	4402      	add	r2, r0
 800b5f2:	4601      	mov	r1, r0
 800b5f4:	428a      	cmp	r2, r1
 800b5f6:	d100      	bne.n	800b5fa <memmove+0x2a>
 800b5f8:	bd10      	pop	{r4, pc}
 800b5fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b5fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b602:	e7f7      	b.n	800b5f4 <memmove+0x24>

0800b604 <__malloc_lock>:
 800b604:	4801      	ldr	r0, [pc, #4]	; (800b60c <__malloc_lock+0x8>)
 800b606:	f000 bc1f 	b.w	800be48 <__retarget_lock_acquire_recursive>
 800b60a:	bf00      	nop
 800b60c:	20000570 	.word	0x20000570

0800b610 <__malloc_unlock>:
 800b610:	4801      	ldr	r0, [pc, #4]	; (800b618 <__malloc_unlock+0x8>)
 800b612:	f000 bc1a 	b.w	800be4a <__retarget_lock_release_recursive>
 800b616:	bf00      	nop
 800b618:	20000570 	.word	0x20000570

0800b61c <_realloc_r>:
 800b61c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b620:	4680      	mov	r8, r0
 800b622:	4614      	mov	r4, r2
 800b624:	460e      	mov	r6, r1
 800b626:	b921      	cbnz	r1, 800b632 <_realloc_r+0x16>
 800b628:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b62c:	4611      	mov	r1, r2
 800b62e:	f7ff bdad 	b.w	800b18c <_malloc_r>
 800b632:	b92a      	cbnz	r2, 800b640 <_realloc_r+0x24>
 800b634:	f7ff fd3e 	bl	800b0b4 <_free_r>
 800b638:	4625      	mov	r5, r4
 800b63a:	4628      	mov	r0, r5
 800b63c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b640:	f000 fc6a 	bl	800bf18 <_malloc_usable_size_r>
 800b644:	4284      	cmp	r4, r0
 800b646:	4607      	mov	r7, r0
 800b648:	d802      	bhi.n	800b650 <_realloc_r+0x34>
 800b64a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b64e:	d812      	bhi.n	800b676 <_realloc_r+0x5a>
 800b650:	4621      	mov	r1, r4
 800b652:	4640      	mov	r0, r8
 800b654:	f7ff fd9a 	bl	800b18c <_malloc_r>
 800b658:	4605      	mov	r5, r0
 800b65a:	2800      	cmp	r0, #0
 800b65c:	d0ed      	beq.n	800b63a <_realloc_r+0x1e>
 800b65e:	42bc      	cmp	r4, r7
 800b660:	4622      	mov	r2, r4
 800b662:	4631      	mov	r1, r6
 800b664:	bf28      	it	cs
 800b666:	463a      	movcs	r2, r7
 800b668:	f7ff f97c 	bl	800a964 <memcpy>
 800b66c:	4631      	mov	r1, r6
 800b66e:	4640      	mov	r0, r8
 800b670:	f7ff fd20 	bl	800b0b4 <_free_r>
 800b674:	e7e1      	b.n	800b63a <_realloc_r+0x1e>
 800b676:	4635      	mov	r5, r6
 800b678:	e7df      	b.n	800b63a <_realloc_r+0x1e>

0800b67a <__sfputc_r>:
 800b67a:	6893      	ldr	r3, [r2, #8]
 800b67c:	3b01      	subs	r3, #1
 800b67e:	2b00      	cmp	r3, #0
 800b680:	b410      	push	{r4}
 800b682:	6093      	str	r3, [r2, #8]
 800b684:	da08      	bge.n	800b698 <__sfputc_r+0x1e>
 800b686:	6994      	ldr	r4, [r2, #24]
 800b688:	42a3      	cmp	r3, r4
 800b68a:	db01      	blt.n	800b690 <__sfputc_r+0x16>
 800b68c:	290a      	cmp	r1, #10
 800b68e:	d103      	bne.n	800b698 <__sfputc_r+0x1e>
 800b690:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b694:	f000 b94a 	b.w	800b92c <__swbuf_r>
 800b698:	6813      	ldr	r3, [r2, #0]
 800b69a:	1c58      	adds	r0, r3, #1
 800b69c:	6010      	str	r0, [r2, #0]
 800b69e:	7019      	strb	r1, [r3, #0]
 800b6a0:	4608      	mov	r0, r1
 800b6a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b6a6:	4770      	bx	lr

0800b6a8 <__sfputs_r>:
 800b6a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6aa:	4606      	mov	r6, r0
 800b6ac:	460f      	mov	r7, r1
 800b6ae:	4614      	mov	r4, r2
 800b6b0:	18d5      	adds	r5, r2, r3
 800b6b2:	42ac      	cmp	r4, r5
 800b6b4:	d101      	bne.n	800b6ba <__sfputs_r+0x12>
 800b6b6:	2000      	movs	r0, #0
 800b6b8:	e007      	b.n	800b6ca <__sfputs_r+0x22>
 800b6ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6be:	463a      	mov	r2, r7
 800b6c0:	4630      	mov	r0, r6
 800b6c2:	f7ff ffda 	bl	800b67a <__sfputc_r>
 800b6c6:	1c43      	adds	r3, r0, #1
 800b6c8:	d1f3      	bne.n	800b6b2 <__sfputs_r+0xa>
 800b6ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b6cc <_vfiprintf_r>:
 800b6cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6d0:	460d      	mov	r5, r1
 800b6d2:	b09d      	sub	sp, #116	; 0x74
 800b6d4:	4614      	mov	r4, r2
 800b6d6:	4698      	mov	r8, r3
 800b6d8:	4606      	mov	r6, r0
 800b6da:	b118      	cbz	r0, 800b6e4 <_vfiprintf_r+0x18>
 800b6dc:	6983      	ldr	r3, [r0, #24]
 800b6de:	b90b      	cbnz	r3, 800b6e4 <_vfiprintf_r+0x18>
 800b6e0:	f000 fb14 	bl	800bd0c <__sinit>
 800b6e4:	4b89      	ldr	r3, [pc, #548]	; (800b90c <_vfiprintf_r+0x240>)
 800b6e6:	429d      	cmp	r5, r3
 800b6e8:	d11b      	bne.n	800b722 <_vfiprintf_r+0x56>
 800b6ea:	6875      	ldr	r5, [r6, #4]
 800b6ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b6ee:	07d9      	lsls	r1, r3, #31
 800b6f0:	d405      	bmi.n	800b6fe <_vfiprintf_r+0x32>
 800b6f2:	89ab      	ldrh	r3, [r5, #12]
 800b6f4:	059a      	lsls	r2, r3, #22
 800b6f6:	d402      	bmi.n	800b6fe <_vfiprintf_r+0x32>
 800b6f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b6fa:	f000 fba5 	bl	800be48 <__retarget_lock_acquire_recursive>
 800b6fe:	89ab      	ldrh	r3, [r5, #12]
 800b700:	071b      	lsls	r3, r3, #28
 800b702:	d501      	bpl.n	800b708 <_vfiprintf_r+0x3c>
 800b704:	692b      	ldr	r3, [r5, #16]
 800b706:	b9eb      	cbnz	r3, 800b744 <_vfiprintf_r+0x78>
 800b708:	4629      	mov	r1, r5
 800b70a:	4630      	mov	r0, r6
 800b70c:	f000 f96e 	bl	800b9ec <__swsetup_r>
 800b710:	b1c0      	cbz	r0, 800b744 <_vfiprintf_r+0x78>
 800b712:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b714:	07dc      	lsls	r4, r3, #31
 800b716:	d50e      	bpl.n	800b736 <_vfiprintf_r+0x6a>
 800b718:	f04f 30ff 	mov.w	r0, #4294967295
 800b71c:	b01d      	add	sp, #116	; 0x74
 800b71e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b722:	4b7b      	ldr	r3, [pc, #492]	; (800b910 <_vfiprintf_r+0x244>)
 800b724:	429d      	cmp	r5, r3
 800b726:	d101      	bne.n	800b72c <_vfiprintf_r+0x60>
 800b728:	68b5      	ldr	r5, [r6, #8]
 800b72a:	e7df      	b.n	800b6ec <_vfiprintf_r+0x20>
 800b72c:	4b79      	ldr	r3, [pc, #484]	; (800b914 <_vfiprintf_r+0x248>)
 800b72e:	429d      	cmp	r5, r3
 800b730:	bf08      	it	eq
 800b732:	68f5      	ldreq	r5, [r6, #12]
 800b734:	e7da      	b.n	800b6ec <_vfiprintf_r+0x20>
 800b736:	89ab      	ldrh	r3, [r5, #12]
 800b738:	0598      	lsls	r0, r3, #22
 800b73a:	d4ed      	bmi.n	800b718 <_vfiprintf_r+0x4c>
 800b73c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b73e:	f000 fb84 	bl	800be4a <__retarget_lock_release_recursive>
 800b742:	e7e9      	b.n	800b718 <_vfiprintf_r+0x4c>
 800b744:	2300      	movs	r3, #0
 800b746:	9309      	str	r3, [sp, #36]	; 0x24
 800b748:	2320      	movs	r3, #32
 800b74a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b74e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b752:	2330      	movs	r3, #48	; 0x30
 800b754:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b918 <_vfiprintf_r+0x24c>
 800b758:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b75c:	f04f 0901 	mov.w	r9, #1
 800b760:	4623      	mov	r3, r4
 800b762:	469a      	mov	sl, r3
 800b764:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b768:	b10a      	cbz	r2, 800b76e <_vfiprintf_r+0xa2>
 800b76a:	2a25      	cmp	r2, #37	; 0x25
 800b76c:	d1f9      	bne.n	800b762 <_vfiprintf_r+0x96>
 800b76e:	ebba 0b04 	subs.w	fp, sl, r4
 800b772:	d00b      	beq.n	800b78c <_vfiprintf_r+0xc0>
 800b774:	465b      	mov	r3, fp
 800b776:	4622      	mov	r2, r4
 800b778:	4629      	mov	r1, r5
 800b77a:	4630      	mov	r0, r6
 800b77c:	f7ff ff94 	bl	800b6a8 <__sfputs_r>
 800b780:	3001      	adds	r0, #1
 800b782:	f000 80aa 	beq.w	800b8da <_vfiprintf_r+0x20e>
 800b786:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b788:	445a      	add	r2, fp
 800b78a:	9209      	str	r2, [sp, #36]	; 0x24
 800b78c:	f89a 3000 	ldrb.w	r3, [sl]
 800b790:	2b00      	cmp	r3, #0
 800b792:	f000 80a2 	beq.w	800b8da <_vfiprintf_r+0x20e>
 800b796:	2300      	movs	r3, #0
 800b798:	f04f 32ff 	mov.w	r2, #4294967295
 800b79c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b7a0:	f10a 0a01 	add.w	sl, sl, #1
 800b7a4:	9304      	str	r3, [sp, #16]
 800b7a6:	9307      	str	r3, [sp, #28]
 800b7a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b7ac:	931a      	str	r3, [sp, #104]	; 0x68
 800b7ae:	4654      	mov	r4, sl
 800b7b0:	2205      	movs	r2, #5
 800b7b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7b6:	4858      	ldr	r0, [pc, #352]	; (800b918 <_vfiprintf_r+0x24c>)
 800b7b8:	f7f4 fd1a 	bl	80001f0 <memchr>
 800b7bc:	9a04      	ldr	r2, [sp, #16]
 800b7be:	b9d8      	cbnz	r0, 800b7f8 <_vfiprintf_r+0x12c>
 800b7c0:	06d1      	lsls	r1, r2, #27
 800b7c2:	bf44      	itt	mi
 800b7c4:	2320      	movmi	r3, #32
 800b7c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b7ca:	0713      	lsls	r3, r2, #28
 800b7cc:	bf44      	itt	mi
 800b7ce:	232b      	movmi	r3, #43	; 0x2b
 800b7d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b7d4:	f89a 3000 	ldrb.w	r3, [sl]
 800b7d8:	2b2a      	cmp	r3, #42	; 0x2a
 800b7da:	d015      	beq.n	800b808 <_vfiprintf_r+0x13c>
 800b7dc:	9a07      	ldr	r2, [sp, #28]
 800b7de:	4654      	mov	r4, sl
 800b7e0:	2000      	movs	r0, #0
 800b7e2:	f04f 0c0a 	mov.w	ip, #10
 800b7e6:	4621      	mov	r1, r4
 800b7e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b7ec:	3b30      	subs	r3, #48	; 0x30
 800b7ee:	2b09      	cmp	r3, #9
 800b7f0:	d94e      	bls.n	800b890 <_vfiprintf_r+0x1c4>
 800b7f2:	b1b0      	cbz	r0, 800b822 <_vfiprintf_r+0x156>
 800b7f4:	9207      	str	r2, [sp, #28]
 800b7f6:	e014      	b.n	800b822 <_vfiprintf_r+0x156>
 800b7f8:	eba0 0308 	sub.w	r3, r0, r8
 800b7fc:	fa09 f303 	lsl.w	r3, r9, r3
 800b800:	4313      	orrs	r3, r2
 800b802:	9304      	str	r3, [sp, #16]
 800b804:	46a2      	mov	sl, r4
 800b806:	e7d2      	b.n	800b7ae <_vfiprintf_r+0xe2>
 800b808:	9b03      	ldr	r3, [sp, #12]
 800b80a:	1d19      	adds	r1, r3, #4
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	9103      	str	r1, [sp, #12]
 800b810:	2b00      	cmp	r3, #0
 800b812:	bfbb      	ittet	lt
 800b814:	425b      	neglt	r3, r3
 800b816:	f042 0202 	orrlt.w	r2, r2, #2
 800b81a:	9307      	strge	r3, [sp, #28]
 800b81c:	9307      	strlt	r3, [sp, #28]
 800b81e:	bfb8      	it	lt
 800b820:	9204      	strlt	r2, [sp, #16]
 800b822:	7823      	ldrb	r3, [r4, #0]
 800b824:	2b2e      	cmp	r3, #46	; 0x2e
 800b826:	d10c      	bne.n	800b842 <_vfiprintf_r+0x176>
 800b828:	7863      	ldrb	r3, [r4, #1]
 800b82a:	2b2a      	cmp	r3, #42	; 0x2a
 800b82c:	d135      	bne.n	800b89a <_vfiprintf_r+0x1ce>
 800b82e:	9b03      	ldr	r3, [sp, #12]
 800b830:	1d1a      	adds	r2, r3, #4
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	9203      	str	r2, [sp, #12]
 800b836:	2b00      	cmp	r3, #0
 800b838:	bfb8      	it	lt
 800b83a:	f04f 33ff 	movlt.w	r3, #4294967295
 800b83e:	3402      	adds	r4, #2
 800b840:	9305      	str	r3, [sp, #20]
 800b842:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b928 <_vfiprintf_r+0x25c>
 800b846:	7821      	ldrb	r1, [r4, #0]
 800b848:	2203      	movs	r2, #3
 800b84a:	4650      	mov	r0, sl
 800b84c:	f7f4 fcd0 	bl	80001f0 <memchr>
 800b850:	b140      	cbz	r0, 800b864 <_vfiprintf_r+0x198>
 800b852:	2340      	movs	r3, #64	; 0x40
 800b854:	eba0 000a 	sub.w	r0, r0, sl
 800b858:	fa03 f000 	lsl.w	r0, r3, r0
 800b85c:	9b04      	ldr	r3, [sp, #16]
 800b85e:	4303      	orrs	r3, r0
 800b860:	3401      	adds	r4, #1
 800b862:	9304      	str	r3, [sp, #16]
 800b864:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b868:	482c      	ldr	r0, [pc, #176]	; (800b91c <_vfiprintf_r+0x250>)
 800b86a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b86e:	2206      	movs	r2, #6
 800b870:	f7f4 fcbe 	bl	80001f0 <memchr>
 800b874:	2800      	cmp	r0, #0
 800b876:	d03f      	beq.n	800b8f8 <_vfiprintf_r+0x22c>
 800b878:	4b29      	ldr	r3, [pc, #164]	; (800b920 <_vfiprintf_r+0x254>)
 800b87a:	bb1b      	cbnz	r3, 800b8c4 <_vfiprintf_r+0x1f8>
 800b87c:	9b03      	ldr	r3, [sp, #12]
 800b87e:	3307      	adds	r3, #7
 800b880:	f023 0307 	bic.w	r3, r3, #7
 800b884:	3308      	adds	r3, #8
 800b886:	9303      	str	r3, [sp, #12]
 800b888:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b88a:	443b      	add	r3, r7
 800b88c:	9309      	str	r3, [sp, #36]	; 0x24
 800b88e:	e767      	b.n	800b760 <_vfiprintf_r+0x94>
 800b890:	fb0c 3202 	mla	r2, ip, r2, r3
 800b894:	460c      	mov	r4, r1
 800b896:	2001      	movs	r0, #1
 800b898:	e7a5      	b.n	800b7e6 <_vfiprintf_r+0x11a>
 800b89a:	2300      	movs	r3, #0
 800b89c:	3401      	adds	r4, #1
 800b89e:	9305      	str	r3, [sp, #20]
 800b8a0:	4619      	mov	r1, r3
 800b8a2:	f04f 0c0a 	mov.w	ip, #10
 800b8a6:	4620      	mov	r0, r4
 800b8a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b8ac:	3a30      	subs	r2, #48	; 0x30
 800b8ae:	2a09      	cmp	r2, #9
 800b8b0:	d903      	bls.n	800b8ba <_vfiprintf_r+0x1ee>
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d0c5      	beq.n	800b842 <_vfiprintf_r+0x176>
 800b8b6:	9105      	str	r1, [sp, #20]
 800b8b8:	e7c3      	b.n	800b842 <_vfiprintf_r+0x176>
 800b8ba:	fb0c 2101 	mla	r1, ip, r1, r2
 800b8be:	4604      	mov	r4, r0
 800b8c0:	2301      	movs	r3, #1
 800b8c2:	e7f0      	b.n	800b8a6 <_vfiprintf_r+0x1da>
 800b8c4:	ab03      	add	r3, sp, #12
 800b8c6:	9300      	str	r3, [sp, #0]
 800b8c8:	462a      	mov	r2, r5
 800b8ca:	4b16      	ldr	r3, [pc, #88]	; (800b924 <_vfiprintf_r+0x258>)
 800b8cc:	a904      	add	r1, sp, #16
 800b8ce:	4630      	mov	r0, r6
 800b8d0:	f7fd fdd6 	bl	8009480 <_printf_float>
 800b8d4:	4607      	mov	r7, r0
 800b8d6:	1c78      	adds	r0, r7, #1
 800b8d8:	d1d6      	bne.n	800b888 <_vfiprintf_r+0x1bc>
 800b8da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b8dc:	07d9      	lsls	r1, r3, #31
 800b8de:	d405      	bmi.n	800b8ec <_vfiprintf_r+0x220>
 800b8e0:	89ab      	ldrh	r3, [r5, #12]
 800b8e2:	059a      	lsls	r2, r3, #22
 800b8e4:	d402      	bmi.n	800b8ec <_vfiprintf_r+0x220>
 800b8e6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b8e8:	f000 faaf 	bl	800be4a <__retarget_lock_release_recursive>
 800b8ec:	89ab      	ldrh	r3, [r5, #12]
 800b8ee:	065b      	lsls	r3, r3, #25
 800b8f0:	f53f af12 	bmi.w	800b718 <_vfiprintf_r+0x4c>
 800b8f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b8f6:	e711      	b.n	800b71c <_vfiprintf_r+0x50>
 800b8f8:	ab03      	add	r3, sp, #12
 800b8fa:	9300      	str	r3, [sp, #0]
 800b8fc:	462a      	mov	r2, r5
 800b8fe:	4b09      	ldr	r3, [pc, #36]	; (800b924 <_vfiprintf_r+0x258>)
 800b900:	a904      	add	r1, sp, #16
 800b902:	4630      	mov	r0, r6
 800b904:	f7fe f860 	bl	80099c8 <_printf_i>
 800b908:	e7e4      	b.n	800b8d4 <_vfiprintf_r+0x208>
 800b90a:	bf00      	nop
 800b90c:	0800d71c 	.word	0x0800d71c
 800b910:	0800d73c 	.word	0x0800d73c
 800b914:	0800d6fc 	.word	0x0800d6fc
 800b918:	0800d5a4 	.word	0x0800d5a4
 800b91c:	0800d5ae 	.word	0x0800d5ae
 800b920:	08009481 	.word	0x08009481
 800b924:	0800b6a9 	.word	0x0800b6a9
 800b928:	0800d5aa 	.word	0x0800d5aa

0800b92c <__swbuf_r>:
 800b92c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b92e:	460e      	mov	r6, r1
 800b930:	4614      	mov	r4, r2
 800b932:	4605      	mov	r5, r0
 800b934:	b118      	cbz	r0, 800b93e <__swbuf_r+0x12>
 800b936:	6983      	ldr	r3, [r0, #24]
 800b938:	b90b      	cbnz	r3, 800b93e <__swbuf_r+0x12>
 800b93a:	f000 f9e7 	bl	800bd0c <__sinit>
 800b93e:	4b21      	ldr	r3, [pc, #132]	; (800b9c4 <__swbuf_r+0x98>)
 800b940:	429c      	cmp	r4, r3
 800b942:	d12b      	bne.n	800b99c <__swbuf_r+0x70>
 800b944:	686c      	ldr	r4, [r5, #4]
 800b946:	69a3      	ldr	r3, [r4, #24]
 800b948:	60a3      	str	r3, [r4, #8]
 800b94a:	89a3      	ldrh	r3, [r4, #12]
 800b94c:	071a      	lsls	r2, r3, #28
 800b94e:	d52f      	bpl.n	800b9b0 <__swbuf_r+0x84>
 800b950:	6923      	ldr	r3, [r4, #16]
 800b952:	b36b      	cbz	r3, 800b9b0 <__swbuf_r+0x84>
 800b954:	6923      	ldr	r3, [r4, #16]
 800b956:	6820      	ldr	r0, [r4, #0]
 800b958:	1ac0      	subs	r0, r0, r3
 800b95a:	6963      	ldr	r3, [r4, #20]
 800b95c:	b2f6      	uxtb	r6, r6
 800b95e:	4283      	cmp	r3, r0
 800b960:	4637      	mov	r7, r6
 800b962:	dc04      	bgt.n	800b96e <__swbuf_r+0x42>
 800b964:	4621      	mov	r1, r4
 800b966:	4628      	mov	r0, r5
 800b968:	f000 f93c 	bl	800bbe4 <_fflush_r>
 800b96c:	bb30      	cbnz	r0, 800b9bc <__swbuf_r+0x90>
 800b96e:	68a3      	ldr	r3, [r4, #8]
 800b970:	3b01      	subs	r3, #1
 800b972:	60a3      	str	r3, [r4, #8]
 800b974:	6823      	ldr	r3, [r4, #0]
 800b976:	1c5a      	adds	r2, r3, #1
 800b978:	6022      	str	r2, [r4, #0]
 800b97a:	701e      	strb	r6, [r3, #0]
 800b97c:	6963      	ldr	r3, [r4, #20]
 800b97e:	3001      	adds	r0, #1
 800b980:	4283      	cmp	r3, r0
 800b982:	d004      	beq.n	800b98e <__swbuf_r+0x62>
 800b984:	89a3      	ldrh	r3, [r4, #12]
 800b986:	07db      	lsls	r3, r3, #31
 800b988:	d506      	bpl.n	800b998 <__swbuf_r+0x6c>
 800b98a:	2e0a      	cmp	r6, #10
 800b98c:	d104      	bne.n	800b998 <__swbuf_r+0x6c>
 800b98e:	4621      	mov	r1, r4
 800b990:	4628      	mov	r0, r5
 800b992:	f000 f927 	bl	800bbe4 <_fflush_r>
 800b996:	b988      	cbnz	r0, 800b9bc <__swbuf_r+0x90>
 800b998:	4638      	mov	r0, r7
 800b99a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b99c:	4b0a      	ldr	r3, [pc, #40]	; (800b9c8 <__swbuf_r+0x9c>)
 800b99e:	429c      	cmp	r4, r3
 800b9a0:	d101      	bne.n	800b9a6 <__swbuf_r+0x7a>
 800b9a2:	68ac      	ldr	r4, [r5, #8]
 800b9a4:	e7cf      	b.n	800b946 <__swbuf_r+0x1a>
 800b9a6:	4b09      	ldr	r3, [pc, #36]	; (800b9cc <__swbuf_r+0xa0>)
 800b9a8:	429c      	cmp	r4, r3
 800b9aa:	bf08      	it	eq
 800b9ac:	68ec      	ldreq	r4, [r5, #12]
 800b9ae:	e7ca      	b.n	800b946 <__swbuf_r+0x1a>
 800b9b0:	4621      	mov	r1, r4
 800b9b2:	4628      	mov	r0, r5
 800b9b4:	f000 f81a 	bl	800b9ec <__swsetup_r>
 800b9b8:	2800      	cmp	r0, #0
 800b9ba:	d0cb      	beq.n	800b954 <__swbuf_r+0x28>
 800b9bc:	f04f 37ff 	mov.w	r7, #4294967295
 800b9c0:	e7ea      	b.n	800b998 <__swbuf_r+0x6c>
 800b9c2:	bf00      	nop
 800b9c4:	0800d71c 	.word	0x0800d71c
 800b9c8:	0800d73c 	.word	0x0800d73c
 800b9cc:	0800d6fc 	.word	0x0800d6fc

0800b9d0 <__ascii_wctomb>:
 800b9d0:	b149      	cbz	r1, 800b9e6 <__ascii_wctomb+0x16>
 800b9d2:	2aff      	cmp	r2, #255	; 0xff
 800b9d4:	bf85      	ittet	hi
 800b9d6:	238a      	movhi	r3, #138	; 0x8a
 800b9d8:	6003      	strhi	r3, [r0, #0]
 800b9da:	700a      	strbls	r2, [r1, #0]
 800b9dc:	f04f 30ff 	movhi.w	r0, #4294967295
 800b9e0:	bf98      	it	ls
 800b9e2:	2001      	movls	r0, #1
 800b9e4:	4770      	bx	lr
 800b9e6:	4608      	mov	r0, r1
 800b9e8:	4770      	bx	lr
	...

0800b9ec <__swsetup_r>:
 800b9ec:	4b32      	ldr	r3, [pc, #200]	; (800bab8 <__swsetup_r+0xcc>)
 800b9ee:	b570      	push	{r4, r5, r6, lr}
 800b9f0:	681d      	ldr	r5, [r3, #0]
 800b9f2:	4606      	mov	r6, r0
 800b9f4:	460c      	mov	r4, r1
 800b9f6:	b125      	cbz	r5, 800ba02 <__swsetup_r+0x16>
 800b9f8:	69ab      	ldr	r3, [r5, #24]
 800b9fa:	b913      	cbnz	r3, 800ba02 <__swsetup_r+0x16>
 800b9fc:	4628      	mov	r0, r5
 800b9fe:	f000 f985 	bl	800bd0c <__sinit>
 800ba02:	4b2e      	ldr	r3, [pc, #184]	; (800babc <__swsetup_r+0xd0>)
 800ba04:	429c      	cmp	r4, r3
 800ba06:	d10f      	bne.n	800ba28 <__swsetup_r+0x3c>
 800ba08:	686c      	ldr	r4, [r5, #4]
 800ba0a:	89a3      	ldrh	r3, [r4, #12]
 800ba0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ba10:	0719      	lsls	r1, r3, #28
 800ba12:	d42c      	bmi.n	800ba6e <__swsetup_r+0x82>
 800ba14:	06dd      	lsls	r5, r3, #27
 800ba16:	d411      	bmi.n	800ba3c <__swsetup_r+0x50>
 800ba18:	2309      	movs	r3, #9
 800ba1a:	6033      	str	r3, [r6, #0]
 800ba1c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ba20:	81a3      	strh	r3, [r4, #12]
 800ba22:	f04f 30ff 	mov.w	r0, #4294967295
 800ba26:	e03e      	b.n	800baa6 <__swsetup_r+0xba>
 800ba28:	4b25      	ldr	r3, [pc, #148]	; (800bac0 <__swsetup_r+0xd4>)
 800ba2a:	429c      	cmp	r4, r3
 800ba2c:	d101      	bne.n	800ba32 <__swsetup_r+0x46>
 800ba2e:	68ac      	ldr	r4, [r5, #8]
 800ba30:	e7eb      	b.n	800ba0a <__swsetup_r+0x1e>
 800ba32:	4b24      	ldr	r3, [pc, #144]	; (800bac4 <__swsetup_r+0xd8>)
 800ba34:	429c      	cmp	r4, r3
 800ba36:	bf08      	it	eq
 800ba38:	68ec      	ldreq	r4, [r5, #12]
 800ba3a:	e7e6      	b.n	800ba0a <__swsetup_r+0x1e>
 800ba3c:	0758      	lsls	r0, r3, #29
 800ba3e:	d512      	bpl.n	800ba66 <__swsetup_r+0x7a>
 800ba40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ba42:	b141      	cbz	r1, 800ba56 <__swsetup_r+0x6a>
 800ba44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ba48:	4299      	cmp	r1, r3
 800ba4a:	d002      	beq.n	800ba52 <__swsetup_r+0x66>
 800ba4c:	4630      	mov	r0, r6
 800ba4e:	f7ff fb31 	bl	800b0b4 <_free_r>
 800ba52:	2300      	movs	r3, #0
 800ba54:	6363      	str	r3, [r4, #52]	; 0x34
 800ba56:	89a3      	ldrh	r3, [r4, #12]
 800ba58:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ba5c:	81a3      	strh	r3, [r4, #12]
 800ba5e:	2300      	movs	r3, #0
 800ba60:	6063      	str	r3, [r4, #4]
 800ba62:	6923      	ldr	r3, [r4, #16]
 800ba64:	6023      	str	r3, [r4, #0]
 800ba66:	89a3      	ldrh	r3, [r4, #12]
 800ba68:	f043 0308 	orr.w	r3, r3, #8
 800ba6c:	81a3      	strh	r3, [r4, #12]
 800ba6e:	6923      	ldr	r3, [r4, #16]
 800ba70:	b94b      	cbnz	r3, 800ba86 <__swsetup_r+0x9a>
 800ba72:	89a3      	ldrh	r3, [r4, #12]
 800ba74:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ba78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ba7c:	d003      	beq.n	800ba86 <__swsetup_r+0x9a>
 800ba7e:	4621      	mov	r1, r4
 800ba80:	4630      	mov	r0, r6
 800ba82:	f000 fa09 	bl	800be98 <__smakebuf_r>
 800ba86:	89a0      	ldrh	r0, [r4, #12]
 800ba88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ba8c:	f010 0301 	ands.w	r3, r0, #1
 800ba90:	d00a      	beq.n	800baa8 <__swsetup_r+0xbc>
 800ba92:	2300      	movs	r3, #0
 800ba94:	60a3      	str	r3, [r4, #8]
 800ba96:	6963      	ldr	r3, [r4, #20]
 800ba98:	425b      	negs	r3, r3
 800ba9a:	61a3      	str	r3, [r4, #24]
 800ba9c:	6923      	ldr	r3, [r4, #16]
 800ba9e:	b943      	cbnz	r3, 800bab2 <__swsetup_r+0xc6>
 800baa0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800baa4:	d1ba      	bne.n	800ba1c <__swsetup_r+0x30>
 800baa6:	bd70      	pop	{r4, r5, r6, pc}
 800baa8:	0781      	lsls	r1, r0, #30
 800baaa:	bf58      	it	pl
 800baac:	6963      	ldrpl	r3, [r4, #20]
 800baae:	60a3      	str	r3, [r4, #8]
 800bab0:	e7f4      	b.n	800ba9c <__swsetup_r+0xb0>
 800bab2:	2000      	movs	r0, #0
 800bab4:	e7f7      	b.n	800baa6 <__swsetup_r+0xba>
 800bab6:	bf00      	nop
 800bab8:	20000024 	.word	0x20000024
 800babc:	0800d71c 	.word	0x0800d71c
 800bac0:	0800d73c 	.word	0x0800d73c
 800bac4:	0800d6fc 	.word	0x0800d6fc

0800bac8 <abort>:
 800bac8:	b508      	push	{r3, lr}
 800baca:	2006      	movs	r0, #6
 800bacc:	f000 fa54 	bl	800bf78 <raise>
 800bad0:	2001      	movs	r0, #1
 800bad2:	f7f6 fcab 	bl	800242c <_exit>
	...

0800bad8 <__sflush_r>:
 800bad8:	898a      	ldrh	r2, [r1, #12]
 800bada:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bade:	4605      	mov	r5, r0
 800bae0:	0710      	lsls	r0, r2, #28
 800bae2:	460c      	mov	r4, r1
 800bae4:	d458      	bmi.n	800bb98 <__sflush_r+0xc0>
 800bae6:	684b      	ldr	r3, [r1, #4]
 800bae8:	2b00      	cmp	r3, #0
 800baea:	dc05      	bgt.n	800baf8 <__sflush_r+0x20>
 800baec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800baee:	2b00      	cmp	r3, #0
 800baf0:	dc02      	bgt.n	800baf8 <__sflush_r+0x20>
 800baf2:	2000      	movs	r0, #0
 800baf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800baf8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bafa:	2e00      	cmp	r6, #0
 800bafc:	d0f9      	beq.n	800baf2 <__sflush_r+0x1a>
 800bafe:	2300      	movs	r3, #0
 800bb00:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bb04:	682f      	ldr	r7, [r5, #0]
 800bb06:	602b      	str	r3, [r5, #0]
 800bb08:	d032      	beq.n	800bb70 <__sflush_r+0x98>
 800bb0a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bb0c:	89a3      	ldrh	r3, [r4, #12]
 800bb0e:	075a      	lsls	r2, r3, #29
 800bb10:	d505      	bpl.n	800bb1e <__sflush_r+0x46>
 800bb12:	6863      	ldr	r3, [r4, #4]
 800bb14:	1ac0      	subs	r0, r0, r3
 800bb16:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bb18:	b10b      	cbz	r3, 800bb1e <__sflush_r+0x46>
 800bb1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bb1c:	1ac0      	subs	r0, r0, r3
 800bb1e:	2300      	movs	r3, #0
 800bb20:	4602      	mov	r2, r0
 800bb22:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bb24:	6a21      	ldr	r1, [r4, #32]
 800bb26:	4628      	mov	r0, r5
 800bb28:	47b0      	blx	r6
 800bb2a:	1c43      	adds	r3, r0, #1
 800bb2c:	89a3      	ldrh	r3, [r4, #12]
 800bb2e:	d106      	bne.n	800bb3e <__sflush_r+0x66>
 800bb30:	6829      	ldr	r1, [r5, #0]
 800bb32:	291d      	cmp	r1, #29
 800bb34:	d82c      	bhi.n	800bb90 <__sflush_r+0xb8>
 800bb36:	4a2a      	ldr	r2, [pc, #168]	; (800bbe0 <__sflush_r+0x108>)
 800bb38:	40ca      	lsrs	r2, r1
 800bb3a:	07d6      	lsls	r6, r2, #31
 800bb3c:	d528      	bpl.n	800bb90 <__sflush_r+0xb8>
 800bb3e:	2200      	movs	r2, #0
 800bb40:	6062      	str	r2, [r4, #4]
 800bb42:	04d9      	lsls	r1, r3, #19
 800bb44:	6922      	ldr	r2, [r4, #16]
 800bb46:	6022      	str	r2, [r4, #0]
 800bb48:	d504      	bpl.n	800bb54 <__sflush_r+0x7c>
 800bb4a:	1c42      	adds	r2, r0, #1
 800bb4c:	d101      	bne.n	800bb52 <__sflush_r+0x7a>
 800bb4e:	682b      	ldr	r3, [r5, #0]
 800bb50:	b903      	cbnz	r3, 800bb54 <__sflush_r+0x7c>
 800bb52:	6560      	str	r0, [r4, #84]	; 0x54
 800bb54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bb56:	602f      	str	r7, [r5, #0]
 800bb58:	2900      	cmp	r1, #0
 800bb5a:	d0ca      	beq.n	800baf2 <__sflush_r+0x1a>
 800bb5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bb60:	4299      	cmp	r1, r3
 800bb62:	d002      	beq.n	800bb6a <__sflush_r+0x92>
 800bb64:	4628      	mov	r0, r5
 800bb66:	f7ff faa5 	bl	800b0b4 <_free_r>
 800bb6a:	2000      	movs	r0, #0
 800bb6c:	6360      	str	r0, [r4, #52]	; 0x34
 800bb6e:	e7c1      	b.n	800baf4 <__sflush_r+0x1c>
 800bb70:	6a21      	ldr	r1, [r4, #32]
 800bb72:	2301      	movs	r3, #1
 800bb74:	4628      	mov	r0, r5
 800bb76:	47b0      	blx	r6
 800bb78:	1c41      	adds	r1, r0, #1
 800bb7a:	d1c7      	bne.n	800bb0c <__sflush_r+0x34>
 800bb7c:	682b      	ldr	r3, [r5, #0]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d0c4      	beq.n	800bb0c <__sflush_r+0x34>
 800bb82:	2b1d      	cmp	r3, #29
 800bb84:	d001      	beq.n	800bb8a <__sflush_r+0xb2>
 800bb86:	2b16      	cmp	r3, #22
 800bb88:	d101      	bne.n	800bb8e <__sflush_r+0xb6>
 800bb8a:	602f      	str	r7, [r5, #0]
 800bb8c:	e7b1      	b.n	800baf2 <__sflush_r+0x1a>
 800bb8e:	89a3      	ldrh	r3, [r4, #12]
 800bb90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb94:	81a3      	strh	r3, [r4, #12]
 800bb96:	e7ad      	b.n	800baf4 <__sflush_r+0x1c>
 800bb98:	690f      	ldr	r7, [r1, #16]
 800bb9a:	2f00      	cmp	r7, #0
 800bb9c:	d0a9      	beq.n	800baf2 <__sflush_r+0x1a>
 800bb9e:	0793      	lsls	r3, r2, #30
 800bba0:	680e      	ldr	r6, [r1, #0]
 800bba2:	bf08      	it	eq
 800bba4:	694b      	ldreq	r3, [r1, #20]
 800bba6:	600f      	str	r7, [r1, #0]
 800bba8:	bf18      	it	ne
 800bbaa:	2300      	movne	r3, #0
 800bbac:	eba6 0807 	sub.w	r8, r6, r7
 800bbb0:	608b      	str	r3, [r1, #8]
 800bbb2:	f1b8 0f00 	cmp.w	r8, #0
 800bbb6:	dd9c      	ble.n	800baf2 <__sflush_r+0x1a>
 800bbb8:	6a21      	ldr	r1, [r4, #32]
 800bbba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bbbc:	4643      	mov	r3, r8
 800bbbe:	463a      	mov	r2, r7
 800bbc0:	4628      	mov	r0, r5
 800bbc2:	47b0      	blx	r6
 800bbc4:	2800      	cmp	r0, #0
 800bbc6:	dc06      	bgt.n	800bbd6 <__sflush_r+0xfe>
 800bbc8:	89a3      	ldrh	r3, [r4, #12]
 800bbca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bbce:	81a3      	strh	r3, [r4, #12]
 800bbd0:	f04f 30ff 	mov.w	r0, #4294967295
 800bbd4:	e78e      	b.n	800baf4 <__sflush_r+0x1c>
 800bbd6:	4407      	add	r7, r0
 800bbd8:	eba8 0800 	sub.w	r8, r8, r0
 800bbdc:	e7e9      	b.n	800bbb2 <__sflush_r+0xda>
 800bbde:	bf00      	nop
 800bbe0:	20400001 	.word	0x20400001

0800bbe4 <_fflush_r>:
 800bbe4:	b538      	push	{r3, r4, r5, lr}
 800bbe6:	690b      	ldr	r3, [r1, #16]
 800bbe8:	4605      	mov	r5, r0
 800bbea:	460c      	mov	r4, r1
 800bbec:	b913      	cbnz	r3, 800bbf4 <_fflush_r+0x10>
 800bbee:	2500      	movs	r5, #0
 800bbf0:	4628      	mov	r0, r5
 800bbf2:	bd38      	pop	{r3, r4, r5, pc}
 800bbf4:	b118      	cbz	r0, 800bbfe <_fflush_r+0x1a>
 800bbf6:	6983      	ldr	r3, [r0, #24]
 800bbf8:	b90b      	cbnz	r3, 800bbfe <_fflush_r+0x1a>
 800bbfa:	f000 f887 	bl	800bd0c <__sinit>
 800bbfe:	4b14      	ldr	r3, [pc, #80]	; (800bc50 <_fflush_r+0x6c>)
 800bc00:	429c      	cmp	r4, r3
 800bc02:	d11b      	bne.n	800bc3c <_fflush_r+0x58>
 800bc04:	686c      	ldr	r4, [r5, #4]
 800bc06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d0ef      	beq.n	800bbee <_fflush_r+0xa>
 800bc0e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bc10:	07d0      	lsls	r0, r2, #31
 800bc12:	d404      	bmi.n	800bc1e <_fflush_r+0x3a>
 800bc14:	0599      	lsls	r1, r3, #22
 800bc16:	d402      	bmi.n	800bc1e <_fflush_r+0x3a>
 800bc18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bc1a:	f000 f915 	bl	800be48 <__retarget_lock_acquire_recursive>
 800bc1e:	4628      	mov	r0, r5
 800bc20:	4621      	mov	r1, r4
 800bc22:	f7ff ff59 	bl	800bad8 <__sflush_r>
 800bc26:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bc28:	07da      	lsls	r2, r3, #31
 800bc2a:	4605      	mov	r5, r0
 800bc2c:	d4e0      	bmi.n	800bbf0 <_fflush_r+0xc>
 800bc2e:	89a3      	ldrh	r3, [r4, #12]
 800bc30:	059b      	lsls	r3, r3, #22
 800bc32:	d4dd      	bmi.n	800bbf0 <_fflush_r+0xc>
 800bc34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bc36:	f000 f908 	bl	800be4a <__retarget_lock_release_recursive>
 800bc3a:	e7d9      	b.n	800bbf0 <_fflush_r+0xc>
 800bc3c:	4b05      	ldr	r3, [pc, #20]	; (800bc54 <_fflush_r+0x70>)
 800bc3e:	429c      	cmp	r4, r3
 800bc40:	d101      	bne.n	800bc46 <_fflush_r+0x62>
 800bc42:	68ac      	ldr	r4, [r5, #8]
 800bc44:	e7df      	b.n	800bc06 <_fflush_r+0x22>
 800bc46:	4b04      	ldr	r3, [pc, #16]	; (800bc58 <_fflush_r+0x74>)
 800bc48:	429c      	cmp	r4, r3
 800bc4a:	bf08      	it	eq
 800bc4c:	68ec      	ldreq	r4, [r5, #12]
 800bc4e:	e7da      	b.n	800bc06 <_fflush_r+0x22>
 800bc50:	0800d71c 	.word	0x0800d71c
 800bc54:	0800d73c 	.word	0x0800d73c
 800bc58:	0800d6fc 	.word	0x0800d6fc

0800bc5c <std>:
 800bc5c:	2300      	movs	r3, #0
 800bc5e:	b510      	push	{r4, lr}
 800bc60:	4604      	mov	r4, r0
 800bc62:	e9c0 3300 	strd	r3, r3, [r0]
 800bc66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bc6a:	6083      	str	r3, [r0, #8]
 800bc6c:	8181      	strh	r1, [r0, #12]
 800bc6e:	6643      	str	r3, [r0, #100]	; 0x64
 800bc70:	81c2      	strh	r2, [r0, #14]
 800bc72:	6183      	str	r3, [r0, #24]
 800bc74:	4619      	mov	r1, r3
 800bc76:	2208      	movs	r2, #8
 800bc78:	305c      	adds	r0, #92	; 0x5c
 800bc7a:	f7fd fb59 	bl	8009330 <memset>
 800bc7e:	4b05      	ldr	r3, [pc, #20]	; (800bc94 <std+0x38>)
 800bc80:	6263      	str	r3, [r4, #36]	; 0x24
 800bc82:	4b05      	ldr	r3, [pc, #20]	; (800bc98 <std+0x3c>)
 800bc84:	62a3      	str	r3, [r4, #40]	; 0x28
 800bc86:	4b05      	ldr	r3, [pc, #20]	; (800bc9c <std+0x40>)
 800bc88:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bc8a:	4b05      	ldr	r3, [pc, #20]	; (800bca0 <std+0x44>)
 800bc8c:	6224      	str	r4, [r4, #32]
 800bc8e:	6323      	str	r3, [r4, #48]	; 0x30
 800bc90:	bd10      	pop	{r4, pc}
 800bc92:	bf00      	nop
 800bc94:	0800bfb1 	.word	0x0800bfb1
 800bc98:	0800bfd3 	.word	0x0800bfd3
 800bc9c:	0800c00b 	.word	0x0800c00b
 800bca0:	0800c02f 	.word	0x0800c02f

0800bca4 <_cleanup_r>:
 800bca4:	4901      	ldr	r1, [pc, #4]	; (800bcac <_cleanup_r+0x8>)
 800bca6:	f000 b8af 	b.w	800be08 <_fwalk_reent>
 800bcaa:	bf00      	nop
 800bcac:	0800bbe5 	.word	0x0800bbe5

0800bcb0 <__sfmoreglue>:
 800bcb0:	b570      	push	{r4, r5, r6, lr}
 800bcb2:	2268      	movs	r2, #104	; 0x68
 800bcb4:	1e4d      	subs	r5, r1, #1
 800bcb6:	4355      	muls	r5, r2
 800bcb8:	460e      	mov	r6, r1
 800bcba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bcbe:	f7ff fa65 	bl	800b18c <_malloc_r>
 800bcc2:	4604      	mov	r4, r0
 800bcc4:	b140      	cbz	r0, 800bcd8 <__sfmoreglue+0x28>
 800bcc6:	2100      	movs	r1, #0
 800bcc8:	e9c0 1600 	strd	r1, r6, [r0]
 800bccc:	300c      	adds	r0, #12
 800bcce:	60a0      	str	r0, [r4, #8]
 800bcd0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bcd4:	f7fd fb2c 	bl	8009330 <memset>
 800bcd8:	4620      	mov	r0, r4
 800bcda:	bd70      	pop	{r4, r5, r6, pc}

0800bcdc <__sfp_lock_acquire>:
 800bcdc:	4801      	ldr	r0, [pc, #4]	; (800bce4 <__sfp_lock_acquire+0x8>)
 800bcde:	f000 b8b3 	b.w	800be48 <__retarget_lock_acquire_recursive>
 800bce2:	bf00      	nop
 800bce4:	20000571 	.word	0x20000571

0800bce8 <__sfp_lock_release>:
 800bce8:	4801      	ldr	r0, [pc, #4]	; (800bcf0 <__sfp_lock_release+0x8>)
 800bcea:	f000 b8ae 	b.w	800be4a <__retarget_lock_release_recursive>
 800bcee:	bf00      	nop
 800bcf0:	20000571 	.word	0x20000571

0800bcf4 <__sinit_lock_acquire>:
 800bcf4:	4801      	ldr	r0, [pc, #4]	; (800bcfc <__sinit_lock_acquire+0x8>)
 800bcf6:	f000 b8a7 	b.w	800be48 <__retarget_lock_acquire_recursive>
 800bcfa:	bf00      	nop
 800bcfc:	20000572 	.word	0x20000572

0800bd00 <__sinit_lock_release>:
 800bd00:	4801      	ldr	r0, [pc, #4]	; (800bd08 <__sinit_lock_release+0x8>)
 800bd02:	f000 b8a2 	b.w	800be4a <__retarget_lock_release_recursive>
 800bd06:	bf00      	nop
 800bd08:	20000572 	.word	0x20000572

0800bd0c <__sinit>:
 800bd0c:	b510      	push	{r4, lr}
 800bd0e:	4604      	mov	r4, r0
 800bd10:	f7ff fff0 	bl	800bcf4 <__sinit_lock_acquire>
 800bd14:	69a3      	ldr	r3, [r4, #24]
 800bd16:	b11b      	cbz	r3, 800bd20 <__sinit+0x14>
 800bd18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bd1c:	f7ff bff0 	b.w	800bd00 <__sinit_lock_release>
 800bd20:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bd24:	6523      	str	r3, [r4, #80]	; 0x50
 800bd26:	4b13      	ldr	r3, [pc, #76]	; (800bd74 <__sinit+0x68>)
 800bd28:	4a13      	ldr	r2, [pc, #76]	; (800bd78 <__sinit+0x6c>)
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	62a2      	str	r2, [r4, #40]	; 0x28
 800bd2e:	42a3      	cmp	r3, r4
 800bd30:	bf04      	itt	eq
 800bd32:	2301      	moveq	r3, #1
 800bd34:	61a3      	streq	r3, [r4, #24]
 800bd36:	4620      	mov	r0, r4
 800bd38:	f000 f820 	bl	800bd7c <__sfp>
 800bd3c:	6060      	str	r0, [r4, #4]
 800bd3e:	4620      	mov	r0, r4
 800bd40:	f000 f81c 	bl	800bd7c <__sfp>
 800bd44:	60a0      	str	r0, [r4, #8]
 800bd46:	4620      	mov	r0, r4
 800bd48:	f000 f818 	bl	800bd7c <__sfp>
 800bd4c:	2200      	movs	r2, #0
 800bd4e:	60e0      	str	r0, [r4, #12]
 800bd50:	2104      	movs	r1, #4
 800bd52:	6860      	ldr	r0, [r4, #4]
 800bd54:	f7ff ff82 	bl	800bc5c <std>
 800bd58:	68a0      	ldr	r0, [r4, #8]
 800bd5a:	2201      	movs	r2, #1
 800bd5c:	2109      	movs	r1, #9
 800bd5e:	f7ff ff7d 	bl	800bc5c <std>
 800bd62:	68e0      	ldr	r0, [r4, #12]
 800bd64:	2202      	movs	r2, #2
 800bd66:	2112      	movs	r1, #18
 800bd68:	f7ff ff78 	bl	800bc5c <std>
 800bd6c:	2301      	movs	r3, #1
 800bd6e:	61a3      	str	r3, [r4, #24]
 800bd70:	e7d2      	b.n	800bd18 <__sinit+0xc>
 800bd72:	bf00      	nop
 800bd74:	0800d384 	.word	0x0800d384
 800bd78:	0800bca5 	.word	0x0800bca5

0800bd7c <__sfp>:
 800bd7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd7e:	4607      	mov	r7, r0
 800bd80:	f7ff ffac 	bl	800bcdc <__sfp_lock_acquire>
 800bd84:	4b1e      	ldr	r3, [pc, #120]	; (800be00 <__sfp+0x84>)
 800bd86:	681e      	ldr	r6, [r3, #0]
 800bd88:	69b3      	ldr	r3, [r6, #24]
 800bd8a:	b913      	cbnz	r3, 800bd92 <__sfp+0x16>
 800bd8c:	4630      	mov	r0, r6
 800bd8e:	f7ff ffbd 	bl	800bd0c <__sinit>
 800bd92:	3648      	adds	r6, #72	; 0x48
 800bd94:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bd98:	3b01      	subs	r3, #1
 800bd9a:	d503      	bpl.n	800bda4 <__sfp+0x28>
 800bd9c:	6833      	ldr	r3, [r6, #0]
 800bd9e:	b30b      	cbz	r3, 800bde4 <__sfp+0x68>
 800bda0:	6836      	ldr	r6, [r6, #0]
 800bda2:	e7f7      	b.n	800bd94 <__sfp+0x18>
 800bda4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bda8:	b9d5      	cbnz	r5, 800bde0 <__sfp+0x64>
 800bdaa:	4b16      	ldr	r3, [pc, #88]	; (800be04 <__sfp+0x88>)
 800bdac:	60e3      	str	r3, [r4, #12]
 800bdae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bdb2:	6665      	str	r5, [r4, #100]	; 0x64
 800bdb4:	f000 f847 	bl	800be46 <__retarget_lock_init_recursive>
 800bdb8:	f7ff ff96 	bl	800bce8 <__sfp_lock_release>
 800bdbc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bdc0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bdc4:	6025      	str	r5, [r4, #0]
 800bdc6:	61a5      	str	r5, [r4, #24]
 800bdc8:	2208      	movs	r2, #8
 800bdca:	4629      	mov	r1, r5
 800bdcc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bdd0:	f7fd faae 	bl	8009330 <memset>
 800bdd4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bdd8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bddc:	4620      	mov	r0, r4
 800bdde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bde0:	3468      	adds	r4, #104	; 0x68
 800bde2:	e7d9      	b.n	800bd98 <__sfp+0x1c>
 800bde4:	2104      	movs	r1, #4
 800bde6:	4638      	mov	r0, r7
 800bde8:	f7ff ff62 	bl	800bcb0 <__sfmoreglue>
 800bdec:	4604      	mov	r4, r0
 800bdee:	6030      	str	r0, [r6, #0]
 800bdf0:	2800      	cmp	r0, #0
 800bdf2:	d1d5      	bne.n	800bda0 <__sfp+0x24>
 800bdf4:	f7ff ff78 	bl	800bce8 <__sfp_lock_release>
 800bdf8:	230c      	movs	r3, #12
 800bdfa:	603b      	str	r3, [r7, #0]
 800bdfc:	e7ee      	b.n	800bddc <__sfp+0x60>
 800bdfe:	bf00      	nop
 800be00:	0800d384 	.word	0x0800d384
 800be04:	ffff0001 	.word	0xffff0001

0800be08 <_fwalk_reent>:
 800be08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be0c:	4606      	mov	r6, r0
 800be0e:	4688      	mov	r8, r1
 800be10:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800be14:	2700      	movs	r7, #0
 800be16:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800be1a:	f1b9 0901 	subs.w	r9, r9, #1
 800be1e:	d505      	bpl.n	800be2c <_fwalk_reent+0x24>
 800be20:	6824      	ldr	r4, [r4, #0]
 800be22:	2c00      	cmp	r4, #0
 800be24:	d1f7      	bne.n	800be16 <_fwalk_reent+0xe>
 800be26:	4638      	mov	r0, r7
 800be28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be2c:	89ab      	ldrh	r3, [r5, #12]
 800be2e:	2b01      	cmp	r3, #1
 800be30:	d907      	bls.n	800be42 <_fwalk_reent+0x3a>
 800be32:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800be36:	3301      	adds	r3, #1
 800be38:	d003      	beq.n	800be42 <_fwalk_reent+0x3a>
 800be3a:	4629      	mov	r1, r5
 800be3c:	4630      	mov	r0, r6
 800be3e:	47c0      	blx	r8
 800be40:	4307      	orrs	r7, r0
 800be42:	3568      	adds	r5, #104	; 0x68
 800be44:	e7e9      	b.n	800be1a <_fwalk_reent+0x12>

0800be46 <__retarget_lock_init_recursive>:
 800be46:	4770      	bx	lr

0800be48 <__retarget_lock_acquire_recursive>:
 800be48:	4770      	bx	lr

0800be4a <__retarget_lock_release_recursive>:
 800be4a:	4770      	bx	lr

0800be4c <__swhatbuf_r>:
 800be4c:	b570      	push	{r4, r5, r6, lr}
 800be4e:	460e      	mov	r6, r1
 800be50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be54:	2900      	cmp	r1, #0
 800be56:	b096      	sub	sp, #88	; 0x58
 800be58:	4614      	mov	r4, r2
 800be5a:	461d      	mov	r5, r3
 800be5c:	da08      	bge.n	800be70 <__swhatbuf_r+0x24>
 800be5e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800be62:	2200      	movs	r2, #0
 800be64:	602a      	str	r2, [r5, #0]
 800be66:	061a      	lsls	r2, r3, #24
 800be68:	d410      	bmi.n	800be8c <__swhatbuf_r+0x40>
 800be6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800be6e:	e00e      	b.n	800be8e <__swhatbuf_r+0x42>
 800be70:	466a      	mov	r2, sp
 800be72:	f000 f903 	bl	800c07c <_fstat_r>
 800be76:	2800      	cmp	r0, #0
 800be78:	dbf1      	blt.n	800be5e <__swhatbuf_r+0x12>
 800be7a:	9a01      	ldr	r2, [sp, #4]
 800be7c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800be80:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800be84:	425a      	negs	r2, r3
 800be86:	415a      	adcs	r2, r3
 800be88:	602a      	str	r2, [r5, #0]
 800be8a:	e7ee      	b.n	800be6a <__swhatbuf_r+0x1e>
 800be8c:	2340      	movs	r3, #64	; 0x40
 800be8e:	2000      	movs	r0, #0
 800be90:	6023      	str	r3, [r4, #0]
 800be92:	b016      	add	sp, #88	; 0x58
 800be94:	bd70      	pop	{r4, r5, r6, pc}
	...

0800be98 <__smakebuf_r>:
 800be98:	898b      	ldrh	r3, [r1, #12]
 800be9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800be9c:	079d      	lsls	r5, r3, #30
 800be9e:	4606      	mov	r6, r0
 800bea0:	460c      	mov	r4, r1
 800bea2:	d507      	bpl.n	800beb4 <__smakebuf_r+0x1c>
 800bea4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bea8:	6023      	str	r3, [r4, #0]
 800beaa:	6123      	str	r3, [r4, #16]
 800beac:	2301      	movs	r3, #1
 800beae:	6163      	str	r3, [r4, #20]
 800beb0:	b002      	add	sp, #8
 800beb2:	bd70      	pop	{r4, r5, r6, pc}
 800beb4:	ab01      	add	r3, sp, #4
 800beb6:	466a      	mov	r2, sp
 800beb8:	f7ff ffc8 	bl	800be4c <__swhatbuf_r>
 800bebc:	9900      	ldr	r1, [sp, #0]
 800bebe:	4605      	mov	r5, r0
 800bec0:	4630      	mov	r0, r6
 800bec2:	f7ff f963 	bl	800b18c <_malloc_r>
 800bec6:	b948      	cbnz	r0, 800bedc <__smakebuf_r+0x44>
 800bec8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800becc:	059a      	lsls	r2, r3, #22
 800bece:	d4ef      	bmi.n	800beb0 <__smakebuf_r+0x18>
 800bed0:	f023 0303 	bic.w	r3, r3, #3
 800bed4:	f043 0302 	orr.w	r3, r3, #2
 800bed8:	81a3      	strh	r3, [r4, #12]
 800beda:	e7e3      	b.n	800bea4 <__smakebuf_r+0xc>
 800bedc:	4b0d      	ldr	r3, [pc, #52]	; (800bf14 <__smakebuf_r+0x7c>)
 800bede:	62b3      	str	r3, [r6, #40]	; 0x28
 800bee0:	89a3      	ldrh	r3, [r4, #12]
 800bee2:	6020      	str	r0, [r4, #0]
 800bee4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bee8:	81a3      	strh	r3, [r4, #12]
 800beea:	9b00      	ldr	r3, [sp, #0]
 800beec:	6163      	str	r3, [r4, #20]
 800beee:	9b01      	ldr	r3, [sp, #4]
 800bef0:	6120      	str	r0, [r4, #16]
 800bef2:	b15b      	cbz	r3, 800bf0c <__smakebuf_r+0x74>
 800bef4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bef8:	4630      	mov	r0, r6
 800befa:	f000 f8d1 	bl	800c0a0 <_isatty_r>
 800befe:	b128      	cbz	r0, 800bf0c <__smakebuf_r+0x74>
 800bf00:	89a3      	ldrh	r3, [r4, #12]
 800bf02:	f023 0303 	bic.w	r3, r3, #3
 800bf06:	f043 0301 	orr.w	r3, r3, #1
 800bf0a:	81a3      	strh	r3, [r4, #12]
 800bf0c:	89a0      	ldrh	r0, [r4, #12]
 800bf0e:	4305      	orrs	r5, r0
 800bf10:	81a5      	strh	r5, [r4, #12]
 800bf12:	e7cd      	b.n	800beb0 <__smakebuf_r+0x18>
 800bf14:	0800bca5 	.word	0x0800bca5

0800bf18 <_malloc_usable_size_r>:
 800bf18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf1c:	1f18      	subs	r0, r3, #4
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	bfbc      	itt	lt
 800bf22:	580b      	ldrlt	r3, [r1, r0]
 800bf24:	18c0      	addlt	r0, r0, r3
 800bf26:	4770      	bx	lr

0800bf28 <_raise_r>:
 800bf28:	291f      	cmp	r1, #31
 800bf2a:	b538      	push	{r3, r4, r5, lr}
 800bf2c:	4604      	mov	r4, r0
 800bf2e:	460d      	mov	r5, r1
 800bf30:	d904      	bls.n	800bf3c <_raise_r+0x14>
 800bf32:	2316      	movs	r3, #22
 800bf34:	6003      	str	r3, [r0, #0]
 800bf36:	f04f 30ff 	mov.w	r0, #4294967295
 800bf3a:	bd38      	pop	{r3, r4, r5, pc}
 800bf3c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bf3e:	b112      	cbz	r2, 800bf46 <_raise_r+0x1e>
 800bf40:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bf44:	b94b      	cbnz	r3, 800bf5a <_raise_r+0x32>
 800bf46:	4620      	mov	r0, r4
 800bf48:	f000 f830 	bl	800bfac <_getpid_r>
 800bf4c:	462a      	mov	r2, r5
 800bf4e:	4601      	mov	r1, r0
 800bf50:	4620      	mov	r0, r4
 800bf52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bf56:	f000 b817 	b.w	800bf88 <_kill_r>
 800bf5a:	2b01      	cmp	r3, #1
 800bf5c:	d00a      	beq.n	800bf74 <_raise_r+0x4c>
 800bf5e:	1c59      	adds	r1, r3, #1
 800bf60:	d103      	bne.n	800bf6a <_raise_r+0x42>
 800bf62:	2316      	movs	r3, #22
 800bf64:	6003      	str	r3, [r0, #0]
 800bf66:	2001      	movs	r0, #1
 800bf68:	e7e7      	b.n	800bf3a <_raise_r+0x12>
 800bf6a:	2400      	movs	r4, #0
 800bf6c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bf70:	4628      	mov	r0, r5
 800bf72:	4798      	blx	r3
 800bf74:	2000      	movs	r0, #0
 800bf76:	e7e0      	b.n	800bf3a <_raise_r+0x12>

0800bf78 <raise>:
 800bf78:	4b02      	ldr	r3, [pc, #8]	; (800bf84 <raise+0xc>)
 800bf7a:	4601      	mov	r1, r0
 800bf7c:	6818      	ldr	r0, [r3, #0]
 800bf7e:	f7ff bfd3 	b.w	800bf28 <_raise_r>
 800bf82:	bf00      	nop
 800bf84:	20000024 	.word	0x20000024

0800bf88 <_kill_r>:
 800bf88:	b538      	push	{r3, r4, r5, lr}
 800bf8a:	4d07      	ldr	r5, [pc, #28]	; (800bfa8 <_kill_r+0x20>)
 800bf8c:	2300      	movs	r3, #0
 800bf8e:	4604      	mov	r4, r0
 800bf90:	4608      	mov	r0, r1
 800bf92:	4611      	mov	r1, r2
 800bf94:	602b      	str	r3, [r5, #0]
 800bf96:	f7f6 fa39 	bl	800240c <_kill>
 800bf9a:	1c43      	adds	r3, r0, #1
 800bf9c:	d102      	bne.n	800bfa4 <_kill_r+0x1c>
 800bf9e:	682b      	ldr	r3, [r5, #0]
 800bfa0:	b103      	cbz	r3, 800bfa4 <_kill_r+0x1c>
 800bfa2:	6023      	str	r3, [r4, #0]
 800bfa4:	bd38      	pop	{r3, r4, r5, pc}
 800bfa6:	bf00      	nop
 800bfa8:	2000056c 	.word	0x2000056c

0800bfac <_getpid_r>:
 800bfac:	f7f6 ba26 	b.w	80023fc <_getpid>

0800bfb0 <__sread>:
 800bfb0:	b510      	push	{r4, lr}
 800bfb2:	460c      	mov	r4, r1
 800bfb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bfb8:	f000 f894 	bl	800c0e4 <_read_r>
 800bfbc:	2800      	cmp	r0, #0
 800bfbe:	bfab      	itete	ge
 800bfc0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bfc2:	89a3      	ldrhlt	r3, [r4, #12]
 800bfc4:	181b      	addge	r3, r3, r0
 800bfc6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bfca:	bfac      	ite	ge
 800bfcc:	6563      	strge	r3, [r4, #84]	; 0x54
 800bfce:	81a3      	strhlt	r3, [r4, #12]
 800bfd0:	bd10      	pop	{r4, pc}

0800bfd2 <__swrite>:
 800bfd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfd6:	461f      	mov	r7, r3
 800bfd8:	898b      	ldrh	r3, [r1, #12]
 800bfda:	05db      	lsls	r3, r3, #23
 800bfdc:	4605      	mov	r5, r0
 800bfde:	460c      	mov	r4, r1
 800bfe0:	4616      	mov	r6, r2
 800bfe2:	d505      	bpl.n	800bff0 <__swrite+0x1e>
 800bfe4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bfe8:	2302      	movs	r3, #2
 800bfea:	2200      	movs	r2, #0
 800bfec:	f000 f868 	bl	800c0c0 <_lseek_r>
 800bff0:	89a3      	ldrh	r3, [r4, #12]
 800bff2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bff6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bffa:	81a3      	strh	r3, [r4, #12]
 800bffc:	4632      	mov	r2, r6
 800bffe:	463b      	mov	r3, r7
 800c000:	4628      	mov	r0, r5
 800c002:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c006:	f000 b817 	b.w	800c038 <_write_r>

0800c00a <__sseek>:
 800c00a:	b510      	push	{r4, lr}
 800c00c:	460c      	mov	r4, r1
 800c00e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c012:	f000 f855 	bl	800c0c0 <_lseek_r>
 800c016:	1c43      	adds	r3, r0, #1
 800c018:	89a3      	ldrh	r3, [r4, #12]
 800c01a:	bf15      	itete	ne
 800c01c:	6560      	strne	r0, [r4, #84]	; 0x54
 800c01e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c022:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c026:	81a3      	strheq	r3, [r4, #12]
 800c028:	bf18      	it	ne
 800c02a:	81a3      	strhne	r3, [r4, #12]
 800c02c:	bd10      	pop	{r4, pc}

0800c02e <__sclose>:
 800c02e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c032:	f000 b813 	b.w	800c05c <_close_r>
	...

0800c038 <_write_r>:
 800c038:	b538      	push	{r3, r4, r5, lr}
 800c03a:	4d07      	ldr	r5, [pc, #28]	; (800c058 <_write_r+0x20>)
 800c03c:	4604      	mov	r4, r0
 800c03e:	4608      	mov	r0, r1
 800c040:	4611      	mov	r1, r2
 800c042:	2200      	movs	r2, #0
 800c044:	602a      	str	r2, [r5, #0]
 800c046:	461a      	mov	r2, r3
 800c048:	f7f6 fa17 	bl	800247a <_write>
 800c04c:	1c43      	adds	r3, r0, #1
 800c04e:	d102      	bne.n	800c056 <_write_r+0x1e>
 800c050:	682b      	ldr	r3, [r5, #0]
 800c052:	b103      	cbz	r3, 800c056 <_write_r+0x1e>
 800c054:	6023      	str	r3, [r4, #0]
 800c056:	bd38      	pop	{r3, r4, r5, pc}
 800c058:	2000056c 	.word	0x2000056c

0800c05c <_close_r>:
 800c05c:	b538      	push	{r3, r4, r5, lr}
 800c05e:	4d06      	ldr	r5, [pc, #24]	; (800c078 <_close_r+0x1c>)
 800c060:	2300      	movs	r3, #0
 800c062:	4604      	mov	r4, r0
 800c064:	4608      	mov	r0, r1
 800c066:	602b      	str	r3, [r5, #0]
 800c068:	f7f6 fa23 	bl	80024b2 <_close>
 800c06c:	1c43      	adds	r3, r0, #1
 800c06e:	d102      	bne.n	800c076 <_close_r+0x1a>
 800c070:	682b      	ldr	r3, [r5, #0]
 800c072:	b103      	cbz	r3, 800c076 <_close_r+0x1a>
 800c074:	6023      	str	r3, [r4, #0]
 800c076:	bd38      	pop	{r3, r4, r5, pc}
 800c078:	2000056c 	.word	0x2000056c

0800c07c <_fstat_r>:
 800c07c:	b538      	push	{r3, r4, r5, lr}
 800c07e:	4d07      	ldr	r5, [pc, #28]	; (800c09c <_fstat_r+0x20>)
 800c080:	2300      	movs	r3, #0
 800c082:	4604      	mov	r4, r0
 800c084:	4608      	mov	r0, r1
 800c086:	4611      	mov	r1, r2
 800c088:	602b      	str	r3, [r5, #0]
 800c08a:	f7f6 fa1e 	bl	80024ca <_fstat>
 800c08e:	1c43      	adds	r3, r0, #1
 800c090:	d102      	bne.n	800c098 <_fstat_r+0x1c>
 800c092:	682b      	ldr	r3, [r5, #0]
 800c094:	b103      	cbz	r3, 800c098 <_fstat_r+0x1c>
 800c096:	6023      	str	r3, [r4, #0]
 800c098:	bd38      	pop	{r3, r4, r5, pc}
 800c09a:	bf00      	nop
 800c09c:	2000056c 	.word	0x2000056c

0800c0a0 <_isatty_r>:
 800c0a0:	b538      	push	{r3, r4, r5, lr}
 800c0a2:	4d06      	ldr	r5, [pc, #24]	; (800c0bc <_isatty_r+0x1c>)
 800c0a4:	2300      	movs	r3, #0
 800c0a6:	4604      	mov	r4, r0
 800c0a8:	4608      	mov	r0, r1
 800c0aa:	602b      	str	r3, [r5, #0]
 800c0ac:	f7f6 fa1d 	bl	80024ea <_isatty>
 800c0b0:	1c43      	adds	r3, r0, #1
 800c0b2:	d102      	bne.n	800c0ba <_isatty_r+0x1a>
 800c0b4:	682b      	ldr	r3, [r5, #0]
 800c0b6:	b103      	cbz	r3, 800c0ba <_isatty_r+0x1a>
 800c0b8:	6023      	str	r3, [r4, #0]
 800c0ba:	bd38      	pop	{r3, r4, r5, pc}
 800c0bc:	2000056c 	.word	0x2000056c

0800c0c0 <_lseek_r>:
 800c0c0:	b538      	push	{r3, r4, r5, lr}
 800c0c2:	4d07      	ldr	r5, [pc, #28]	; (800c0e0 <_lseek_r+0x20>)
 800c0c4:	4604      	mov	r4, r0
 800c0c6:	4608      	mov	r0, r1
 800c0c8:	4611      	mov	r1, r2
 800c0ca:	2200      	movs	r2, #0
 800c0cc:	602a      	str	r2, [r5, #0]
 800c0ce:	461a      	mov	r2, r3
 800c0d0:	f7f6 fa16 	bl	8002500 <_lseek>
 800c0d4:	1c43      	adds	r3, r0, #1
 800c0d6:	d102      	bne.n	800c0de <_lseek_r+0x1e>
 800c0d8:	682b      	ldr	r3, [r5, #0]
 800c0da:	b103      	cbz	r3, 800c0de <_lseek_r+0x1e>
 800c0dc:	6023      	str	r3, [r4, #0]
 800c0de:	bd38      	pop	{r3, r4, r5, pc}
 800c0e0:	2000056c 	.word	0x2000056c

0800c0e4 <_read_r>:
 800c0e4:	b538      	push	{r3, r4, r5, lr}
 800c0e6:	4d07      	ldr	r5, [pc, #28]	; (800c104 <_read_r+0x20>)
 800c0e8:	4604      	mov	r4, r0
 800c0ea:	4608      	mov	r0, r1
 800c0ec:	4611      	mov	r1, r2
 800c0ee:	2200      	movs	r2, #0
 800c0f0:	602a      	str	r2, [r5, #0]
 800c0f2:	461a      	mov	r2, r3
 800c0f4:	f7f6 f9a4 	bl	8002440 <_read>
 800c0f8:	1c43      	adds	r3, r0, #1
 800c0fa:	d102      	bne.n	800c102 <_read_r+0x1e>
 800c0fc:	682b      	ldr	r3, [r5, #0]
 800c0fe:	b103      	cbz	r3, 800c102 <_read_r+0x1e>
 800c100:	6023      	str	r3, [r4, #0]
 800c102:	bd38      	pop	{r3, r4, r5, pc}
 800c104:	2000056c 	.word	0x2000056c

0800c108 <trunc>:
 800c108:	ec51 0b10 	vmov	r0, r1, d0
 800c10c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c110:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800c114:	2b13      	cmp	r3, #19
 800c116:	b5d0      	push	{r4, r6, r7, lr}
 800c118:	460c      	mov	r4, r1
 800c11a:	dc10      	bgt.n	800c13e <trunc+0x36>
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	bfa5      	ittet	ge
 800c120:	4a11      	ldrge	r2, [pc, #68]	; (800c168 <trunc+0x60>)
 800c122:	fa42 f303 	asrge.w	r3, r2, r3
 800c126:	2100      	movlt	r1, #0
 800c128:	2100      	movge	r1, #0
 800c12a:	bfb9      	ittee	lt
 800c12c:	2000      	movlt	r0, #0
 800c12e:	f004 4100 	andlt.w	r1, r4, #2147483648	; 0x80000000
 800c132:	2000      	movge	r0, #0
 800c134:	ea24 0103 	bicge.w	r1, r4, r3
 800c138:	ec41 0b10 	vmov	d0, r0, r1
 800c13c:	bdd0      	pop	{r4, r6, r7, pc}
 800c13e:	2b33      	cmp	r3, #51	; 0x33
 800c140:	dd08      	ble.n	800c154 <trunc+0x4c>
 800c142:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c146:	d1f7      	bne.n	800c138 <trunc+0x30>
 800c148:	ee10 2a10 	vmov	r2, s0
 800c14c:	460b      	mov	r3, r1
 800c14e:	f7f4 f8a5 	bl	800029c <__adddf3>
 800c152:	e7f1      	b.n	800c138 <trunc+0x30>
 800c154:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800c158:	f04f 33ff 	mov.w	r3, #4294967295
 800c15c:	fa23 f202 	lsr.w	r2, r3, r2
 800c160:	ea20 0602 	bic.w	r6, r0, r2
 800c164:	4630      	mov	r0, r6
 800c166:	e7e7      	b.n	800c138 <trunc+0x30>
 800c168:	000fffff 	.word	0x000fffff

0800c16c <ceilf>:
 800c16c:	ee10 3a10 	vmov	r3, s0
 800c170:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c174:	3a7f      	subs	r2, #127	; 0x7f
 800c176:	2a16      	cmp	r2, #22
 800c178:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c17c:	dc2a      	bgt.n	800c1d4 <ceilf+0x68>
 800c17e:	2a00      	cmp	r2, #0
 800c180:	da11      	bge.n	800c1a6 <ceilf+0x3a>
 800c182:	eddf 7a19 	vldr	s15, [pc, #100]	; 800c1e8 <ceilf+0x7c>
 800c186:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c18a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c18e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c192:	dd05      	ble.n	800c1a0 <ceilf+0x34>
 800c194:	2b00      	cmp	r3, #0
 800c196:	db23      	blt.n	800c1e0 <ceilf+0x74>
 800c198:	2900      	cmp	r1, #0
 800c19a:	bf18      	it	ne
 800c19c:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 800c1a0:	ee00 3a10 	vmov	s0, r3
 800c1a4:	4770      	bx	lr
 800c1a6:	4911      	ldr	r1, [pc, #68]	; (800c1ec <ceilf+0x80>)
 800c1a8:	4111      	asrs	r1, r2
 800c1aa:	420b      	tst	r3, r1
 800c1ac:	d0fa      	beq.n	800c1a4 <ceilf+0x38>
 800c1ae:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800c1e8 <ceilf+0x7c>
 800c1b2:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c1b6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c1ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1be:	ddef      	ble.n	800c1a0 <ceilf+0x34>
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	bfc2      	ittt	gt
 800c1c4:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 800c1c8:	fa40 f202 	asrgt.w	r2, r0, r2
 800c1cc:	189b      	addgt	r3, r3, r2
 800c1ce:	ea23 0301 	bic.w	r3, r3, r1
 800c1d2:	e7e5      	b.n	800c1a0 <ceilf+0x34>
 800c1d4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800c1d8:	d3e4      	bcc.n	800c1a4 <ceilf+0x38>
 800c1da:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c1de:	4770      	bx	lr
 800c1e0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c1e4:	e7dc      	b.n	800c1a0 <ceilf+0x34>
 800c1e6:	bf00      	nop
 800c1e8:	7149f2ca 	.word	0x7149f2ca
 800c1ec:	007fffff 	.word	0x007fffff

0800c1f0 <_init>:
 800c1f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1f2:	bf00      	nop
 800c1f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1f6:	bc08      	pop	{r3}
 800c1f8:	469e      	mov	lr, r3
 800c1fa:	4770      	bx	lr

0800c1fc <_fini>:
 800c1fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1fe:	bf00      	nop
 800c200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c202:	bc08      	pop	{r3}
 800c204:	469e      	mov	lr, r3
 800c206:	4770      	bx	lr
