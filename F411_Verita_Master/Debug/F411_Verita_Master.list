
F411_Verita_Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ac0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001f94  08009c60  08009c60  00019c60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bbf4  0800bbf4  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800bbf4  0800bbf4  0001bbf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bbfc  0800bbfc  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bbfc  0800bbfc  0001bbfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bc00  0800bc00  0001bc00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800bc04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  200001f0  0800bdf4  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003a8  0800bdf4  000203a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010529  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000252b  00000000  00000000  00030749  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e50  00000000  00000000  00032c78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d50  00000000  00000000  00033ac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018775  00000000  00000000  00034818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011887  00000000  00000000  0004cf8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fc97  00000000  00000000  0005e814  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ee4ab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d54  00000000  00000000  000ee4fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f0 	.word	0x200001f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009c48 	.word	0x08009c48

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f4 	.word	0x200001f4
 80001dc:	08009c48 	.word	0x08009c48

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b974 	b.w	8000f98 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468e      	mov	lr, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14d      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4694      	mov	ip, r2
 8000cda:	d969      	bls.n	8000db0 <__udivmoddi4+0xe8>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b152      	cbz	r2, 8000cf8 <__udivmoddi4+0x30>
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	f1c2 0120 	rsb	r1, r2, #32
 8000cea:	fa20 f101 	lsr.w	r1, r0, r1
 8000cee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cf6:	4094      	lsls	r4, r2
 8000cf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cfc:	0c21      	lsrs	r1, r4, #16
 8000cfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000d02:	fa1f f78c 	uxth.w	r7, ip
 8000d06:	fb08 e316 	mls	r3, r8, r6, lr
 8000d0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d0e:	fb06 f107 	mul.w	r1, r6, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1e:	f080 811f 	bcs.w	8000f60 <__udivmoddi4+0x298>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 811c 	bls.w	8000f60 <__udivmoddi4+0x298>
 8000d28:	3e02      	subs	r6, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a5b      	subs	r3, r3, r1
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d34:	fb08 3310 	mls	r3, r8, r0, r3
 8000d38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d3c:	fb00 f707 	mul.w	r7, r0, r7
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x92>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4c:	f080 810a 	bcs.w	8000f64 <__udivmoddi4+0x29c>
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	f240 8107 	bls.w	8000f64 <__udivmoddi4+0x29c>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5e:	1be4      	subs	r4, r4, r7
 8000d60:	2600      	movs	r6, #0
 8000d62:	b11d      	cbz	r5, 8000d6c <__udivmoddi4+0xa4>
 8000d64:	40d4      	lsrs	r4, r2
 8000d66:	2300      	movs	r3, #0
 8000d68:	e9c5 4300 	strd	r4, r3, [r5]
 8000d6c:	4631      	mov	r1, r6
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0xc2>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	f000 80ef 	beq.w	8000f5a <__udivmoddi4+0x292>
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d82:	4630      	mov	r0, r6
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f683 	clz	r6, r3
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	d14a      	bne.n	8000e28 <__udivmoddi4+0x160>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xd4>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80f9 	bhi.w	8000f8e <__udivmoddi4+0x2c6>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	469e      	mov	lr, r3
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d0e0      	beq.n	8000d6c <__udivmoddi4+0xa4>
 8000daa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dae:	e7dd      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000db0:	b902      	cbnz	r2, 8000db4 <__udivmoddi4+0xec>
 8000db2:	deff      	udf	#255	; 0xff
 8000db4:	fab2 f282 	clz	r2, r2
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	f040 8092 	bne.w	8000ee2 <__udivmoddi4+0x21a>
 8000dbe:	eba1 010c 	sub.w	r1, r1, ip
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f fe8c 	uxth.w	lr, ip
 8000dca:	2601      	movs	r6, #1
 8000dcc:	0c20      	lsrs	r0, r4, #16
 8000dce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dda:	fb0e f003 	mul.w	r0, lr, r3
 8000dde:	4288      	cmp	r0, r1
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x12c>
 8000de2:	eb1c 0101 	adds.w	r1, ip, r1
 8000de6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x12a>
 8000dec:	4288      	cmp	r0, r1
 8000dee:	f200 80cb 	bhi.w	8000f88 <__udivmoddi4+0x2c0>
 8000df2:	4643      	mov	r3, r8
 8000df4:	1a09      	subs	r1, r1, r0
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000e00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e04:	fb0e fe00 	mul.w	lr, lr, r0
 8000e08:	45a6      	cmp	lr, r4
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x156>
 8000e0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e14:	d202      	bcs.n	8000e1c <__udivmoddi4+0x154>
 8000e16:	45a6      	cmp	lr, r4
 8000e18:	f200 80bb 	bhi.w	8000f92 <__udivmoddi4+0x2ca>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	eba4 040e 	sub.w	r4, r4, lr
 8000e22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e26:	e79c      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000e28:	f1c6 0720 	rsb	r7, r6, #32
 8000e2c:	40b3      	lsls	r3, r6
 8000e2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e36:	fa20 f407 	lsr.w	r4, r0, r7
 8000e3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3e:	431c      	orrs	r4, r3
 8000e40:	40f9      	lsrs	r1, r7
 8000e42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e46:	fa00 f306 	lsl.w	r3, r0, r6
 8000e4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e4e:	0c20      	lsrs	r0, r4, #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fb09 1118 	mls	r1, r9, r8, r1
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e60:	4288      	cmp	r0, r1
 8000e62:	fa02 f206 	lsl.w	r2, r2, r6
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x1b8>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e70:	f080 8088 	bcs.w	8000f84 <__udivmoddi4+0x2bc>
 8000e74:	4288      	cmp	r0, r1
 8000e76:	f240 8085 	bls.w	8000f84 <__udivmoddi4+0x2bc>
 8000e7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e88:	fb09 1110 	mls	r1, r9, r0, r1
 8000e8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e94:	458e      	cmp	lr, r1
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x1e2>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea0:	d26c      	bcs.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea2:	458e      	cmp	lr, r1
 8000ea4:	d96a      	bls.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4461      	add	r1, ip
 8000eaa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eae:	fba0 9402 	umull	r9, r4, r0, r2
 8000eb2:	eba1 010e 	sub.w	r1, r1, lr
 8000eb6:	42a1      	cmp	r1, r4
 8000eb8:	46c8      	mov	r8, r9
 8000eba:	46a6      	mov	lr, r4
 8000ebc:	d356      	bcc.n	8000f6c <__udivmoddi4+0x2a4>
 8000ebe:	d053      	beq.n	8000f68 <__udivmoddi4+0x2a0>
 8000ec0:	b15d      	cbz	r5, 8000eda <__udivmoddi4+0x212>
 8000ec2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ec6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eca:	fa01 f707 	lsl.w	r7, r1, r7
 8000ece:	fa22 f306 	lsr.w	r3, r2, r6
 8000ed2:	40f1      	lsrs	r1, r6
 8000ed4:	431f      	orrs	r7, r3
 8000ed6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eda:	2600      	movs	r6, #0
 8000edc:	4631      	mov	r1, r6
 8000ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee2:	f1c2 0320 	rsb	r3, r2, #32
 8000ee6:	40d8      	lsrs	r0, r3
 8000ee8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eec:	fa21 f303 	lsr.w	r3, r1, r3
 8000ef0:	4091      	lsls	r1, r2
 8000ef2:	4301      	orrs	r1, r0
 8000ef4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef8:	fa1f fe8c 	uxth.w	lr, ip
 8000efc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f00:	fb07 3610 	mls	r6, r7, r0, r3
 8000f04:	0c0b      	lsrs	r3, r1, #16
 8000f06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f0e:	429e      	cmp	r6, r3
 8000f10:	fa04 f402 	lsl.w	r4, r4, r2
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x260>
 8000f16:	eb1c 0303 	adds.w	r3, ip, r3
 8000f1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f1e:	d22f      	bcs.n	8000f80 <__udivmoddi4+0x2b8>
 8000f20:	429e      	cmp	r6, r3
 8000f22:	d92d      	bls.n	8000f80 <__udivmoddi4+0x2b8>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4463      	add	r3, ip
 8000f28:	1b9b      	subs	r3, r3, r6
 8000f2a:	b289      	uxth	r1, r1
 8000f2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f30:	fb07 3316 	mls	r3, r7, r6, r3
 8000f34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f38:	fb06 f30e 	mul.w	r3, r6, lr
 8000f3c:	428b      	cmp	r3, r1
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x28a>
 8000f40:	eb1c 0101 	adds.w	r1, ip, r1
 8000f44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f48:	d216      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d914      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4e:	3e02      	subs	r6, #2
 8000f50:	4461      	add	r1, ip
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f58:	e738      	b.n	8000dcc <__udivmoddi4+0x104>
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e705      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e3      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6f8      	b.n	8000d5a <__udivmoddi4+0x92>
 8000f68:	454b      	cmp	r3, r9
 8000f6a:	d2a9      	bcs.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7a3      	b.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f78:	4646      	mov	r6, r8
 8000f7a:	e7ea      	b.n	8000f52 <__udivmoddi4+0x28a>
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	e794      	b.n	8000eaa <__udivmoddi4+0x1e2>
 8000f80:	4640      	mov	r0, r8
 8000f82:	e7d1      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f84:	46d0      	mov	r8, sl
 8000f86:	e77b      	b.n	8000e80 <__udivmoddi4+0x1b8>
 8000f88:	3b02      	subs	r3, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	e732      	b.n	8000df4 <__udivmoddi4+0x12c>
 8000f8e:	4630      	mov	r0, r6
 8000f90:	e709      	b.n	8000da6 <__udivmoddi4+0xde>
 8000f92:	4464      	add	r4, ip
 8000f94:	3802      	subs	r0, #2
 8000f96:	e742      	b.n	8000e1e <__udivmoddi4+0x156>

08000f98 <__aeabi_idiv0>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <INA219Read_cx>:
 *  D16[1] :  00 CD  // D8[ 3 2 ]
 *  D16[1] | D16[0] = ABCD
 * */


uint16_t INA219Read_cx(I2C_HandleTypeDef *hi2c,uint8_t dv_addr, uint8_t ina_rg){
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b086      	sub	sp, #24
 8000fa0:	af04      	add	r7, sp, #16
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	70fb      	strb	r3, [r7, #3]
 8000fa8:	4613      	mov	r3, r2
 8000faa:	70bb      	strb	r3, [r7, #2]
	 * @param : ina_rg - register address need to access
	 * @Retval: raw bit value
	 * @ex. answer = INA219Read_cx(&hi2c1, INA219_ADDR_1, INA219_RG_Current);
	 * */

	INACBffr.D32 = 0; //// buffer clear
 8000fac:	4b0d      	ldr	r3, [pc, #52]	; (8000fe4 <INA219Read_cx+0x48>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	601a      	str	r2, [r3, #0]
	HAL_I2C_Mem_Read(hi2c, dv_addr, ina_rg, I2C_MEMADD_SIZE_8BIT, &INACBffr.D8[1], 2, 10);
 8000fb2:	78fb      	ldrb	r3, [r7, #3]
 8000fb4:	b299      	uxth	r1, r3
 8000fb6:	78bb      	ldrb	r3, [r7, #2]
 8000fb8:	b29a      	uxth	r2, r3
 8000fba:	230a      	movs	r3, #10
 8000fbc:	9302      	str	r3, [sp, #8]
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	9301      	str	r3, [sp, #4]
 8000fc2:	4b09      	ldr	r3, [pc, #36]	; (8000fe8 <INA219Read_cx+0x4c>)
 8000fc4:	9300      	str	r3, [sp, #0]
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	6878      	ldr	r0, [r7, #4]
 8000fca:	f002 fb77 	bl	80036bc <HAL_I2C_Mem_Read>
	return INACBffr.D16[1] | INACBffr.D16[0];
 8000fce:	4b05      	ldr	r3, [pc, #20]	; (8000fe4 <INA219Read_cx+0x48>)
 8000fd0:	885a      	ldrh	r2, [r3, #2]
 8000fd2:	4b04      	ldr	r3, [pc, #16]	; (8000fe4 <INA219Read_cx+0x48>)
 8000fd4:	881b      	ldrh	r3, [r3, #0]
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	b29b      	uxth	r3, r3
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	2000020c 	.word	0x2000020c
 8000fe8:	2000020d 	.word	0x2000020d

08000fec <INA219_BitReset>:

void INA219_BitReset(I2C_HandleTypeDef *hi2c,uint8_t dv_addr){
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b088      	sub	sp, #32
 8000ff0:	af04      	add	r7, sp, #16
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	70fb      	strb	r3, [r7, #3]
	/* @brief : generates a system reset that is the same as power-on reset.
	 * 			Don't forget to  Re-calibrate or zero Current & power will be returned
	 * @param : hi2c - HAL_I2C used to read
	 * @param : dv_addr - address of INA219 device in the busline
	 * */
	uint8_t resetx = 0x80;
 8000ff8:	2380      	movs	r3, #128	; 0x80
 8000ffa:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(hi2c, dv_addr, INA219_RG_Config, I2C_MEMADD_SIZE_8BIT, &resetx, 2, 10);
 8000ffc:	78fb      	ldrb	r3, [r7, #3]
 8000ffe:	b299      	uxth	r1, r3
 8001000:	230a      	movs	r3, #10
 8001002:	9302      	str	r3, [sp, #8]
 8001004:	2302      	movs	r3, #2
 8001006:	9301      	str	r3, [sp, #4]
 8001008:	f107 030f 	add.w	r3, r7, #15
 800100c:	9300      	str	r3, [sp, #0]
 800100e:	2301      	movs	r3, #1
 8001010:	2200      	movs	r2, #0
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	f002 fa58 	bl	80034c8 <HAL_I2C_Mem_Write>

}
 8001018:	bf00      	nop
 800101a:	3710      	adds	r7, #16
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}

08001020 <INA219_INIT_Calibrate>:

INA219_Conf_Strc configura;
void INA219_INIT_Calibrate(I2C_HandleTypeDef *hi2c,uint8_t dv_addr){
 8001020:	b580      	push	{r7, lr}
 8001022:	b08a      	sub	sp, #40	; 0x28
 8001024:	af04      	add	r7, sp, #16
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	460b      	mov	r3, r1
 800102a:	70fb      	strb	r3, [r7, #3]
	 * @param : hi2c - HAL_I2C used to read
	 * @param : dv_addr - address of INA219 device in the busline
	 * */

	////// -------------------- Configuration -------------------------------------
	configura.INA219CF.reset = 0;
 800102c:	4a52      	ldr	r2, [pc, #328]	; (8001178 <INA219_INIT_Calibrate+0x158>)
 800102e:	7853      	ldrb	r3, [r2, #1]
 8001030:	f36f 13c7 	bfc	r3, #7, #1
 8001034:	7053      	strb	r3, [r2, #1]
	configura.INA219CF.BRNG = BRNG_FSR_32V;
 8001036:	4a50      	ldr	r2, [pc, #320]	; (8001178 <INA219_INIT_Calibrate+0x158>)
 8001038:	7853      	ldrb	r3, [r2, #1]
 800103a:	f043 0320 	orr.w	r3, r3, #32
 800103e:	7053      	strb	r3, [r2, #1]
	configura.INA219CF.PGA = PGA_GainD4_160mv;
 8001040:	4a4d      	ldr	r2, [pc, #308]	; (8001178 <INA219_INIT_Calibrate+0x158>)
 8001042:	7853      	ldrb	r3, [r2, #1]
 8001044:	2102      	movs	r1, #2
 8001046:	f361 03c4 	bfi	r3, r1, #3, #2
 800104a:	7053      	strb	r3, [r2, #1]
	configura.INA219CF.BADC = ADCI_12bit_532uS;
 800104c:	4a4a      	ldr	r2, [pc, #296]	; (8001178 <INA219_INIT_Calibrate+0x158>)
 800104e:	8813      	ldrh	r3, [r2, #0]
 8001050:	2103      	movs	r1, #3
 8001052:	f361 13ca 	bfi	r3, r1, #7, #4
 8001056:	8013      	strh	r3, [r2, #0]
	configura.INA219CF.SADC = ADCI_12bit_532uS;
 8001058:	4a47      	ldr	r2, [pc, #284]	; (8001178 <INA219_INIT_Calibrate+0x158>)
 800105a:	7813      	ldrb	r3, [r2, #0]
 800105c:	2103      	movs	r1, #3
 800105e:	f361 03c6 	bfi	r3, r1, #3, #4
 8001062:	7013      	strb	r3, [r2, #0]
	configura.INA219CF.Mode = INAM_ShuntBusV_Continuous;
 8001064:	4a44      	ldr	r2, [pc, #272]	; (8001178 <INA219_INIT_Calibrate+0x158>)
 8001066:	7813      	ldrb	r3, [r2, #0]
 8001068:	f043 0307 	orr.w	r3, r3, #7
 800106c:	7013      	strb	r3, [r2, #0]

	uint8_t confictor_si2c[2] = {configura.D8[1], configura.D8[0]};
 800106e:	4b42      	ldr	r3, [pc, #264]	; (8001178 <INA219_INIT_Calibrate+0x158>)
 8001070:	785b      	ldrb	r3, [r3, #1]
 8001072:	753b      	strb	r3, [r7, #20]
 8001074:	4b40      	ldr	r3, [pc, #256]	; (8001178 <INA219_INIT_Calibrate+0x158>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	757b      	strb	r3, [r7, #21]
	HAL_I2C_Mem_Write(hi2c, dv_addr, INA219_RG_Config, I2C_MEMADD_SIZE_8BIT, &confictor_si2c[0], 2, 10);
 800107a:	78fb      	ldrb	r3, [r7, #3]
 800107c:	b299      	uxth	r1, r3
 800107e:	230a      	movs	r3, #10
 8001080:	9302      	str	r3, [sp, #8]
 8001082:	2302      	movs	r3, #2
 8001084:	9301      	str	r3, [sp, #4]
 8001086:	f107 0314 	add.w	r3, r7, #20
 800108a:	9300      	str	r3, [sp, #0]
 800108c:	2301      	movs	r3, #1
 800108e:	2200      	movs	r2, #0
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	f002 fa19 	bl	80034c8 <HAL_I2C_Mem_Write>
		uint16_t U16;
	}calibrator;

	// float current_LSB = INA219_MAX_Expect_Current / 32768.0; // 2^15
	//calibrator.U16 = (int16_t)(trunc( 0.04096 / (current_LSB * INA219_R_SHUNT_Val))) << 1;
	calibrator.U16 = trunc( 0.04096 / (current_LSB * INA219_R_SHUNT_Val));
 8001096:	4b39      	ldr	r3, [pc, #228]	; (800117c <INA219_INIT_Calibrate+0x15c>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff fa5c 	bl	8000558 <__aeabi_f2d>
 80010a0:	a32d      	add	r3, pc, #180	; (adr r3, 8001158 <INA219_INIT_Calibrate+0x138>)
 80010a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010a6:	f7ff faaf 	bl	8000608 <__aeabi_dmul>
 80010aa:	4602      	mov	r2, r0
 80010ac:	460b      	mov	r3, r1
 80010ae:	a12c      	add	r1, pc, #176	; (adr r1, 8001160 <INA219_INIT_Calibrate+0x140>)
 80010b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80010b4:	f7ff fbd2 	bl	800085c <__aeabi_ddiv>
 80010b8:	4602      	mov	r2, r0
 80010ba:	460b      	mov	r3, r1
 80010bc:	ec43 2b17 	vmov	d7, r2, r3
 80010c0:	eeb0 0a47 	vmov.f32	s0, s14
 80010c4:	eef0 0a67 	vmov.f32	s1, s15
 80010c8:	f008 fd4a 	bl	8009b60 <trunc>
 80010cc:	ec53 2b10 	vmov	r2, r3, d0
 80010d0:	4610      	mov	r0, r2
 80010d2:	4619      	mov	r1, r3
 80010d4:	f7ff fd70 	bl	8000bb8 <__aeabi_d2uiz>
 80010d8:	4603      	mov	r3, r0
 80010da:	b29b      	uxth	r3, r3
 80010dc:	823b      	strh	r3, [r7, #16]
#ifdef calibrate_EQ6
	calibrator.U16 = trunc((calibrator.U16 * MeaShuntCurrent_ExtMeter) / INA219_Current_Raw);
 80010de:	8a3b      	ldrh	r3, [r7, #16]
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff fa27 	bl	8000534 <__aeabi_i2d>
 80010e6:	a320      	add	r3, pc, #128	; (adr r3, 8001168 <INA219_INIT_Calibrate+0x148>)
 80010e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ec:	f7ff fa8c 	bl	8000608 <__aeabi_dmul>
 80010f0:	4602      	mov	r2, r0
 80010f2:	460b      	mov	r3, r1
 80010f4:	4610      	mov	r0, r2
 80010f6:	4619      	mov	r1, r3
 80010f8:	a31d      	add	r3, pc, #116	; (adr r3, 8001170 <INA219_INIT_Calibrate+0x150>)
 80010fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010fe:	f7ff fbad 	bl	800085c <__aeabi_ddiv>
 8001102:	4602      	mov	r2, r0
 8001104:	460b      	mov	r3, r1
 8001106:	ec43 2b17 	vmov	d7, r2, r3
 800110a:	eeb0 0a47 	vmov.f32	s0, s14
 800110e:	eef0 0a67 	vmov.f32	s1, s15
 8001112:	f008 fd25 	bl	8009b60 <trunc>
 8001116:	ec53 2b10 	vmov	r2, r3, d0
 800111a:	4610      	mov	r0, r2
 800111c:	4619      	mov	r1, r3
 800111e:	f7ff fd4b 	bl	8000bb8 <__aeabi_d2uiz>
 8001122:	4603      	mov	r3, r0
 8001124:	b29b      	uxth	r3, r3
 8001126:	823b      	strh	r3, [r7, #16]
#endif
	uint8_t calibrator_si2c[2] = {calibrator.U8[1], calibrator.U8[0]}; //// switch byte to send high order first in I2C
 8001128:	7c7b      	ldrb	r3, [r7, #17]
 800112a:	733b      	strb	r3, [r7, #12]
 800112c:	7c3b      	ldrb	r3, [r7, #16]
 800112e:	737b      	strb	r3, [r7, #13]
	////  ex calibrator(I = 3A, 0.1Rshunt) = 4473 = 0x1179

	HAL_I2C_Mem_Write(hi2c, dv_addr, INA219_RG_Calibra, I2C_MEMADD_SIZE_8BIT, &calibrator_si2c[0], 2, 10);
 8001130:	78fb      	ldrb	r3, [r7, #3]
 8001132:	b299      	uxth	r1, r3
 8001134:	230a      	movs	r3, #10
 8001136:	9302      	str	r3, [sp, #8]
 8001138:	2302      	movs	r3, #2
 800113a:	9301      	str	r3, [sp, #4]
 800113c:	f107 030c 	add.w	r3, r7, #12
 8001140:	9300      	str	r3, [sp, #0]
 8001142:	2301      	movs	r3, #1
 8001144:	2205      	movs	r2, #5
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f002 f9be 	bl	80034c8 <HAL_I2C_Mem_Write>

}
 800114c:	bf00      	nop
 800114e:	3718      	adds	r7, #24
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	f3af 8000 	nop.w
 8001158:	9999999a 	.word	0x9999999a
 800115c:	3fb99999 	.word	0x3fb99999
 8001160:	88e368f1 	.word	0x88e368f1
 8001164:	3fa4f8b5 	.word	0x3fa4f8b5
 8001168:	9999999a 	.word	0x9999999a
 800116c:	3fe99999 	.word	0x3fe99999
 8001170:	9999999a 	.word	0x9999999a
 8001174:	40059999 	.word	0x40059999
 8001178:	20000210 	.word	0x20000210
 800117c:	20000000 	.word	0x20000000

08001180 <INA219Read_BusV>:
	uint8_t calibrator_si2c[2] = {calibrator.U8[1], calibrator.U8[0]}; //// switch byte to send high order first in I2C
	HAL_I2C_Mem_Write(hi2c, dv_addr, INA219_RG_Calibra, I2C_MEMADD_SIZE_8BIT, &calibrator_si2c[0], 2, 10);

}

uint16_t INA219Read_BusV(I2C_HandleTypeDef *hi2c,uint8_t dv_addr){
 8001180:	b580      	push	{r7, lr}
 8001182:	b086      	sub	sp, #24
 8001184:	af04      	add	r7, sp, #16
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	460b      	mov	r3, r1
 800118a:	70fb      	strb	r3, [r7, #3]
	//	if(INACBffr[2] & 0x01){ // still unsure how to deal with CNVR / OVF
//
//	}


	INACBffr.D32 = 0; //// buffer clear
 800118c:	4b0e      	ldr	r3, [pc, #56]	; (80011c8 <INA219Read_BusV+0x48>)
 800118e:	2200      	movs	r2, #0
 8001190:	601a      	str	r2, [r3, #0]
	HAL_I2C_Mem_Read(hi2c, dv_addr, INA219_RG_BusV, I2C_MEMADD_SIZE_8BIT, &INACBffr.D8[1], 2, 10);
 8001192:	78fb      	ldrb	r3, [r7, #3]
 8001194:	b299      	uxth	r1, r3
 8001196:	230a      	movs	r3, #10
 8001198:	9302      	str	r3, [sp, #8]
 800119a:	2302      	movs	r3, #2
 800119c:	9301      	str	r3, [sp, #4]
 800119e:	4b0b      	ldr	r3, [pc, #44]	; (80011cc <INA219Read_BusV+0x4c>)
 80011a0:	9300      	str	r3, [sp, #0]
 80011a2:	2301      	movs	r3, #1
 80011a4:	2202      	movs	r2, #2
 80011a6:	6878      	ldr	r0, [r7, #4]
 80011a8:	f002 fa88 	bl	80036bc <HAL_I2C_Mem_Read>

	return ((INACBffr.D16[1] | INACBffr.D16[0]) >> 3) * 4;
 80011ac:	4b06      	ldr	r3, [pc, #24]	; (80011c8 <INA219Read_BusV+0x48>)
 80011ae:	885a      	ldrh	r2, [r3, #2]
 80011b0:	4b05      	ldr	r3, [pc, #20]	; (80011c8 <INA219Read_BusV+0x48>)
 80011b2:	881b      	ldrh	r3, [r3, #0]
 80011b4:	4313      	orrs	r3, r2
 80011b6:	b29b      	uxth	r3, r3
 80011b8:	08db      	lsrs	r3, r3, #3
 80011ba:	b29b      	uxth	r3, r3
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	b29b      	uxth	r3, r3
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3708      	adds	r7, #8
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	2000020c 	.word	0x2000020c
 80011cc:	2000020d 	.word	0x2000020d

080011d0 <INA219Read_Current>:

uint16_t INA219Read_Current(I2C_HandleTypeDef *hi2c,uint8_t dv_addr){
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b086      	sub	sp, #24
 80011d4:	af04      	add	r7, sp, #16
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	460b      	mov	r3, r1
 80011da:	70fb      	strb	r3, [r7, #3]
	 * @param : hi2c - HAL_I2C used to read
	 * @param : dv_addr - address of INA219 device in the busline
	 * @Retval: current in mA
	 * @ex.
	 * */
	INACBffr.D32 = 0; //// buffer clear
 80011dc:	4b0c      	ldr	r3, [pc, #48]	; (8001210 <INA219Read_Current+0x40>)
 80011de:	2200      	movs	r2, #0
 80011e0:	601a      	str	r2, [r3, #0]
	HAL_I2C_Mem_Read(hi2c, dv_addr, INA219_RG_Current, I2C_MEMADD_SIZE_8BIT, &INACBffr.D8[1], 2, 10);
 80011e2:	78fb      	ldrb	r3, [r7, #3]
 80011e4:	b299      	uxth	r1, r3
 80011e6:	230a      	movs	r3, #10
 80011e8:	9302      	str	r3, [sp, #8]
 80011ea:	2302      	movs	r3, #2
 80011ec:	9301      	str	r3, [sp, #4]
 80011ee:	4b09      	ldr	r3, [pc, #36]	; (8001214 <INA219Read_Current+0x44>)
 80011f0:	9300      	str	r3, [sp, #0]
 80011f2:	2301      	movs	r3, #1
 80011f4:	2204      	movs	r2, #4
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f002 fa60 	bl	80036bc <HAL_I2C_Mem_Read>

	return INACBffr.D16[1] | INACBffr.D16[0];
 80011fc:	4b04      	ldr	r3, [pc, #16]	; (8001210 <INA219Read_Current+0x40>)
 80011fe:	885a      	ldrh	r2, [r3, #2]
 8001200:	4b03      	ldr	r3, [pc, #12]	; (8001210 <INA219Read_Current+0x40>)
 8001202:	881b      	ldrh	r3, [r3, #0]
 8001204:	4313      	orrs	r3, r2
 8001206:	b29b      	uxth	r3, r3
}
 8001208:	4618      	mov	r0, r3
 800120a:	3708      	adds	r7, #8
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	2000020c 	.word	0x2000020c
 8001214:	2000020d 	.word	0x2000020d

08001218 <INA219Read_ShuntV>:

float INA219Read_ShuntV(I2C_HandleTypeDef *hi2c,uint8_t dv_addr){
 8001218:	b580      	push	{r7, lr}
 800121a:	b088      	sub	sp, #32
 800121c:	af04      	add	r7, sp, #16
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	460b      	mov	r3, r1
 8001222:	70fb      	strb	r3, [r7, #3]
	 * @param : hi2c - HAL_I2C used to read
	 * @param : dv_addr - address of INA219 device in the busline
	 * @Retval: shunt voltage in mV (.2f)
	 * @ex.
	 * */
	INACBffr.D32 = 0; //// buffer clear
 8001224:	4b17      	ldr	r3, [pc, #92]	; (8001284 <INA219Read_ShuntV+0x6c>)
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
	HAL_I2C_Mem_Read(hi2c, dv_addr, INA219_RG_ShuntV, I2C_MEMADD_SIZE_8BIT, &INACBffr.D8[1], 2, 10);
 800122a:	78fb      	ldrb	r3, [r7, #3]
 800122c:	b299      	uxth	r1, r3
 800122e:	230a      	movs	r3, #10
 8001230:	9302      	str	r3, [sp, #8]
 8001232:	2302      	movs	r3, #2
 8001234:	9301      	str	r3, [sp, #4]
 8001236:	4b14      	ldr	r3, [pc, #80]	; (8001288 <INA219Read_ShuntV+0x70>)
 8001238:	9300      	str	r3, [sp, #0]
 800123a:	2301      	movs	r3, #1
 800123c:	2201      	movs	r2, #1
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f002 fa3c 	bl	80036bc <HAL_I2C_Mem_Read>

	//// Convert rawdata To V shunt from Table 7.Shunt Voltage Register Format

    int16_t rawshunt = INACBffr.D16[1] | INACBffr.D16[0];
 8001244:	4b0f      	ldr	r3, [pc, #60]	; (8001284 <INA219Read_ShuntV+0x6c>)
 8001246:	885a      	ldrh	r2, [r3, #2]
 8001248:	4b0e      	ldr	r3, [pc, #56]	; (8001284 <INA219Read_ShuntV+0x6c>)
 800124a:	881b      	ldrh	r3, [r3, #0]
 800124c:	4313      	orrs	r3, r2
 800124e:	b29b      	uxth	r3, r3
 8001250:	81fb      	strh	r3, [r7, #14]
    return rawshunt / 100.0;
 8001252:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff f96c 	bl	8000534 <__aeabi_i2d>
 800125c:	f04f 0200 	mov.w	r2, #0
 8001260:	4b0a      	ldr	r3, [pc, #40]	; (800128c <INA219Read_ShuntV+0x74>)
 8001262:	f7ff fafb 	bl	800085c <__aeabi_ddiv>
 8001266:	4602      	mov	r2, r0
 8001268:	460b      	mov	r3, r1
 800126a:	4610      	mov	r0, r2
 800126c:	4619      	mov	r1, r3
 800126e:	f7ff fcc3 	bl	8000bf8 <__aeabi_d2f>
 8001272:	4603      	mov	r3, r0
 8001274:	ee07 3a90 	vmov	s15, r3
//    	return rawshunt / 100.0;
//    }else{
//    	// if 2's complements
//    	return (~rawshunt + 1) / 100.0;
//    }
}
 8001278:	eeb0 0a67 	vmov.f32	s0, s15
 800127c:	3710      	adds	r7, #16
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	2000020c 	.word	0x2000020c
 8001288:	2000020d 	.word	0x2000020d
 800128c:	40590000 	.word	0x40590000

08001290 <INA219Read_Power>:

float INA219Read_Power(I2C_HandleTypeDef *hi2c,uint8_t dv_addr){
 8001290:	b5b0      	push	{r4, r5, r7, lr}
 8001292:	b086      	sub	sp, #24
 8001294:	af04      	add	r7, sp, #16
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	460b      	mov	r3, r1
 800129a:	70fb      	strb	r3, [r7, #3]
	 * @param : hi2c - HAL_I2C used to read
	 * @param : dv_addr - address of INA219 device in the busline
	 * @Retval: Power in mW
	 * @ex.
	 * */
	INACBffr.D32 = 0; //// buffer clear
 800129c:	4b1e      	ldr	r3, [pc, #120]	; (8001318 <INA219Read_Power+0x88>)
 800129e:	2200      	movs	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]
	HAL_I2C_Mem_Read(hi2c, dv_addr, INA219_RG_PoWer, I2C_MEMADD_SIZE_8BIT, &INACBffr.D8[1], 2, 10);
 80012a2:	78fb      	ldrb	r3, [r7, #3]
 80012a4:	b299      	uxth	r1, r3
 80012a6:	230a      	movs	r3, #10
 80012a8:	9302      	str	r3, [sp, #8]
 80012aa:	2302      	movs	r3, #2
 80012ac:	9301      	str	r3, [sp, #4]
 80012ae:	4b1b      	ldr	r3, [pc, #108]	; (800131c <INA219Read_Power+0x8c>)
 80012b0:	9300      	str	r3, [sp, #0]
 80012b2:	2301      	movs	r3, #1
 80012b4:	2203      	movs	r2, #3
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f002 fa00 	bl	80036bc <HAL_I2C_Mem_Read>
	////  * 20, power_LSB = 20 x current_LSB & x 1000 make unit in mW
	return ((INACBffr.D16[1] | INACBffr.D16[0]) * (20000.0 * current_LSB));
 80012bc:	4b16      	ldr	r3, [pc, #88]	; (8001318 <INA219Read_Power+0x88>)
 80012be:	885a      	ldrh	r2, [r3, #2]
 80012c0:	4b15      	ldr	r3, [pc, #84]	; (8001318 <INA219Read_Power+0x88>)
 80012c2:	881b      	ldrh	r3, [r3, #0]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	b29b      	uxth	r3, r3
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff f933 	bl	8000534 <__aeabi_i2d>
 80012ce:	4604      	mov	r4, r0
 80012d0:	460d      	mov	r5, r1
 80012d2:	4b13      	ldr	r3, [pc, #76]	; (8001320 <INA219Read_Power+0x90>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff f93e 	bl	8000558 <__aeabi_f2d>
 80012dc:	a30c      	add	r3, pc, #48	; (adr r3, 8001310 <INA219Read_Power+0x80>)
 80012de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e2:	f7ff f991 	bl	8000608 <__aeabi_dmul>
 80012e6:	4602      	mov	r2, r0
 80012e8:	460b      	mov	r3, r1
 80012ea:	4620      	mov	r0, r4
 80012ec:	4629      	mov	r1, r5
 80012ee:	f7ff f98b 	bl	8000608 <__aeabi_dmul>
 80012f2:	4602      	mov	r2, r0
 80012f4:	460b      	mov	r3, r1
 80012f6:	4610      	mov	r0, r2
 80012f8:	4619      	mov	r1, r3
 80012fa:	f7ff fc7d 	bl	8000bf8 <__aeabi_d2f>
 80012fe:	4603      	mov	r3, r0
 8001300:	ee07 3a90 	vmov	s15, r3
}
 8001304:	eeb0 0a67 	vmov.f32	s0, s15
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bdb0      	pop	{r4, r5, r7, pc}
 800130e:	bf00      	nop
 8001310:	00000000 	.word	0x00000000
 8001314:	40d38800 	.word	0x40d38800
 8001318:	2000020c 	.word	0x2000020c
 800131c:	2000020d 	.word	0x2000020d
 8001320:	20000000 	.word	0x20000000

08001324 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001324:	b5b0      	push	{r4, r5, r7, lr}
 8001326:	b094      	sub	sp, #80	; 0x50
 8001328:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800132a:	f001 fbe1 	bl	8002af0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800132e:	f000 f90d 	bl	800154c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001332:	f000 fa05 	bl	8001740 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001336:	f000 f9d9 	bl	80016ec <MX_USART2_UART_Init>
  MX_SPI2_Init();
 800133a:	f000 f99f 	bl	800167c <MX_SPI2_Init>
  MX_I2C1_Init();
 800133e:	f000 f96f 	bl	8001620 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  ili9341_Init();
 8001342:	f000 fd6d 	bl	8001e20 <ili9341_Init>
  ili9341_DisplayOn();
 8001346:	f000 fd4f 	bl	8001de8 <ili9341_DisplayOn>

//  ILI9341_Init();
//  ILI9341_FillScreen(ILI9341_BLACK);

#ifdef INA219_Wrk
  INA219_INIT_Calibrate(&hi2c1, INA219_ADDR_1);
 800134a:	2180      	movs	r1, #128	; 0x80
 800134c:	4871      	ldr	r0, [pc, #452]	; (8001514 <main+0x1f0>)
 800134e:	f7ff fe67 	bl	8001020 <INA219_INIT_Calibrate>
//
//  INA219_INIT(&hi2c1, INA219_ADDR_1, cofgra);
//  INA219_Calibrate(&hi2c1, INA219_ADDR_1);
#endif

  char temp[]="----------------- F411_Verita_Master --------------------\r\n";
 8001352:	4b71      	ldr	r3, [pc, #452]	; (8001518 <main+0x1f4>)
 8001354:	1d3c      	adds	r4, r7, #4
 8001356:	461d      	mov	r5, r3
 8001358:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800135a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800135c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800135e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001360:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001362:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001364:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001368:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 800136c:	1d3b      	adds	r3, r7, #4
 800136e:	4618      	mov	r0, r3
 8001370:	f7fe ff36 	bl	80001e0 <strlen>
 8001374:	4603      	mov	r3, r0
 8001376:	b29a      	uxth	r2, r3
 8001378:	1d39      	adds	r1, r7, #4
 800137a:	230a      	movs	r3, #10
 800137c:	4867      	ldr	r0, [pc, #412]	; (800151c <main+0x1f8>)
 800137e:	f005 f967 	bl	8006650 <HAL_UART_Transmit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (HAL_GetTick() >= timestamp_one){
 8001382:	f001 fc1b 	bl	8002bbc <HAL_GetTick>
 8001386:	4602      	mov	r2, r0
 8001388:	4b65      	ldr	r3, [pc, #404]	; (8001520 <main+0x1fc>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	429a      	cmp	r2, r3
 800138e:	f0c0 80b1 	bcc.w	80014f4 <main+0x1d0>
		  timestamp_one += 1000;
 8001392:	4b63      	ldr	r3, [pc, #396]	; (8001520 <main+0x1fc>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800139a:	4a61      	ldr	r2, [pc, #388]	; (8001520 <main+0x1fc>)
 800139c:	6013      	str	r3, [r2, #0]
		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800139e:	2120      	movs	r1, #32
 80013a0:	4860      	ldr	r0, [pc, #384]	; (8001524 <main+0x200>)
 80013a2:	f001 ff1a 	bl	80031da <HAL_GPIO_TogglePin>


		  ili9341_FillRect(50, 20, 50, 20, cl_RED);
 80013a6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80013aa:	9300      	str	r3, [sp, #0]
 80013ac:	2314      	movs	r3, #20
 80013ae:	2232      	movs	r2, #50	; 0x32
 80013b0:	2114      	movs	r1, #20
 80013b2:	2032      	movs	r0, #50	; 0x32
 80013b4:	f000 fe4c 	bl	8002050 <ili9341_FillRect>
		  ili9341_FillRect(100, 20, 50, 20, cl_GREEN);
 80013b8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80013bc:	9300      	str	r3, [sp, #0]
 80013be:	2314      	movs	r3, #20
 80013c0:	2232      	movs	r2, #50	; 0x32
 80013c2:	2114      	movs	r1, #20
 80013c4:	2064      	movs	r0, #100	; 0x64
 80013c6:	f000 fe43 	bl	8002050 <ili9341_FillRect>
		  ili9341_FillRect(150, 20, 50, 20, cl_BLUE);
 80013ca:	231f      	movs	r3, #31
 80013cc:	9300      	str	r3, [sp, #0]
 80013ce:	2314      	movs	r3, #20
 80013d0:	2232      	movs	r2, #50	; 0x32
 80013d2:	2114      	movs	r1, #20
 80013d4:	2096      	movs	r0, #150	; 0x96
 80013d6:	f000 fe3b 	bl	8002050 <ili9341_FillRect>
//		  INATT.U16[3] = (INATT.U8[0] << 8) | INATT.U8[1];

		  //INATT.U16[1] = INA219Read_cx(&hi2c1, INA219_ADDR_1, INA219_RG_Config);
		  //INATT.U16[2] = INA219Read_cx(&hi2c1, INA219_ADDR_1, INA219_RG_Current);

		  inata.Bus_V   = INA219Read_BusV(&hi2c1, INA219_ADDR_1);
 80013da:	2180      	movs	r1, #128	; 0x80
 80013dc:	484d      	ldr	r0, [pc, #308]	; (8001514 <main+0x1f0>)
 80013de:	f7ff fecf 	bl	8001180 <INA219Read_BusV>
 80013e2:	4603      	mov	r3, r0
 80013e4:	461a      	mov	r2, r3
 80013e6:	4b50      	ldr	r3, [pc, #320]	; (8001528 <main+0x204>)
 80013e8:	821a      	strh	r2, [r3, #16]
		  inata.CURRENT = INA219Read_Current(&hi2c1, INA219_ADDR_1);
 80013ea:	2180      	movs	r1, #128	; 0x80
 80013ec:	4849      	ldr	r0, [pc, #292]	; (8001514 <main+0x1f0>)
 80013ee:	f7ff feef 	bl	80011d0 <INA219Read_Current>
 80013f2:	4603      	mov	r3, r0
 80013f4:	b21a      	sxth	r2, r3
 80013f6:	4b4c      	ldr	r3, [pc, #304]	; (8001528 <main+0x204>)
 80013f8:	811a      	strh	r2, [r3, #8]
		  inata.POWER   = INA219Read_Power(&hi2c1, INA219_ADDR_1);
 80013fa:	2180      	movs	r1, #128	; 0x80
 80013fc:	4845      	ldr	r0, [pc, #276]	; (8001514 <main+0x1f0>)
 80013fe:	f7ff ff47 	bl	8001290 <INA219Read_Power>
 8001402:	eef0 7a40 	vmov.f32	s15, s0
 8001406:	4b48      	ldr	r3, [pc, #288]	; (8001528 <main+0x204>)
 8001408:	edc3 7a03 	vstr	s15, [r3, #12]
		  inata.SHUNT_V = INA219Read_ShuntV(&hi2c1, INA219_ADDR_1);
 800140c:	2180      	movs	r1, #128	; 0x80
 800140e:	4841      	ldr	r0, [pc, #260]	; (8001514 <main+0x1f0>)
 8001410:	f7ff ff02 	bl	8001218 <INA219Read_ShuntV>
 8001414:	eef0 7a40 	vmov.f32	s15, s0
 8001418:	4b43      	ldr	r3, [pc, #268]	; (8001528 <main+0x204>)
 800141a:	edc3 7a01 	vstr	s15, [r3, #4]

		  inata.Calibra =  INA219Read_cx(&hi2c1, INA219_ADDR_1, INA219_RG_Calibra);
 800141e:	2205      	movs	r2, #5
 8001420:	2180      	movs	r1, #128	; 0x80
 8001422:	483c      	ldr	r0, [pc, #240]	; (8001514 <main+0x1f0>)
 8001424:	f7ff fdba 	bl	8000f9c <INA219Read_cx>
 8001428:	4603      	mov	r3, r0
 800142a:	461a      	mov	r2, r3
 800142c:	4b3e      	ldr	r3, [pc, #248]	; (8001528 <main+0x204>)
 800142e:	825a      	strh	r2, [r3, #18]
		  inata.Config = INA219Read_cx(&hi2c1, INA219_ADDR_1, INA219_RG_Config);
 8001430:	2200      	movs	r2, #0
 8001432:	2180      	movs	r1, #128	; 0x80
 8001434:	4837      	ldr	r0, [pc, #220]	; (8001514 <main+0x1f0>)
 8001436:	f7ff fdb1 	bl	8000f9c <INA219Read_cx>
 800143a:	4603      	mov	r3, r0
 800143c:	461a      	mov	r2, r3
 800143e:	4b3a      	ldr	r3, [pc, #232]	; (8001528 <main+0x204>)
 8001440:	801a      	strh	r2, [r3, #0]

		  sprintf(TextDispBuffer,"calibrator: %4X", inata.Calibra);
 8001442:	4b39      	ldr	r3, [pc, #228]	; (8001528 <main+0x204>)
 8001444:	8a5b      	ldrh	r3, [r3, #18]
 8001446:	461a      	mov	r2, r3
 8001448:	4938      	ldr	r1, [pc, #224]	; (800152c <main+0x208>)
 800144a:	4839      	ldr	r0, [pc, #228]	; (8001530 <main+0x20c>)
 800144c:	f006 f910 	bl	8007670 <siprintf>
		  ili9341_WriteString(20, 50, TextDispBuffer, Font16, cl_GREENYELLOW, cl_BLACK);
 8001450:	4b38      	ldr	r3, [pc, #224]	; (8001534 <main+0x210>)
 8001452:	2200      	movs	r2, #0
 8001454:	9202      	str	r2, [sp, #8]
 8001456:	f64a 72e5 	movw	r2, #45029	; 0xafe5
 800145a:	9201      	str	r2, [sp, #4]
 800145c:	685a      	ldr	r2, [r3, #4]
 800145e:	9200      	str	r2, [sp, #0]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a33      	ldr	r2, [pc, #204]	; (8001530 <main+0x20c>)
 8001464:	2132      	movs	r1, #50	; 0x32
 8001466:	2014      	movs	r0, #20
 8001468:	f000 feef 	bl	800224a <ili9341_WriteString>

		  sprintf(TextDispBuffer,"V mV: %d    ", inata.Bus_V);
 800146c:	4b2e      	ldr	r3, [pc, #184]	; (8001528 <main+0x204>)
 800146e:	8a1b      	ldrh	r3, [r3, #16]
 8001470:	461a      	mov	r2, r3
 8001472:	4931      	ldr	r1, [pc, #196]	; (8001538 <main+0x214>)
 8001474:	482e      	ldr	r0, [pc, #184]	; (8001530 <main+0x20c>)
 8001476:	f006 f8fb 	bl	8007670 <siprintf>
		  ili9341_WriteString(20, 70, TextDispBuffer, Font20, cl_CYAN, cl_BLACK);
 800147a:	4b30      	ldr	r3, [pc, #192]	; (800153c <main+0x218>)
 800147c:	2200      	movs	r2, #0
 800147e:	9202      	str	r2, [sp, #8]
 8001480:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001484:	9201      	str	r2, [sp, #4]
 8001486:	685a      	ldr	r2, [r3, #4]
 8001488:	9200      	str	r2, [sp, #0]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a28      	ldr	r2, [pc, #160]	; (8001530 <main+0x20c>)
 800148e:	2146      	movs	r1, #70	; 0x46
 8001490:	2014      	movs	r0, #20
 8001492:	f000 feda 	bl	800224a <ili9341_WriteString>

		  sprintf(TextDispBuffer,"I mA: %d    ", inata.CURRENT);
 8001496:	4b24      	ldr	r3, [pc, #144]	; (8001528 <main+0x204>)
 8001498:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800149c:	461a      	mov	r2, r3
 800149e:	4928      	ldr	r1, [pc, #160]	; (8001540 <main+0x21c>)
 80014a0:	4823      	ldr	r0, [pc, #140]	; (8001530 <main+0x20c>)
 80014a2:	f006 f8e5 	bl	8007670 <siprintf>
		  ili9341_WriteString(20, 95, TextDispBuffer, Font20, cl_CYAN, cl_BLACK);
 80014a6:	4b25      	ldr	r3, [pc, #148]	; (800153c <main+0x218>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	9202      	str	r2, [sp, #8]
 80014ac:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80014b0:	9201      	str	r2, [sp, #4]
 80014b2:	685a      	ldr	r2, [r3, #4]
 80014b4:	9200      	str	r2, [sp, #0]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a1d      	ldr	r2, [pc, #116]	; (8001530 <main+0x20c>)
 80014ba:	215f      	movs	r1, #95	; 0x5f
 80014bc:	2014      	movs	r0, #20
 80014be:	f000 fec4 	bl	800224a <ili9341_WriteString>

		  sprintf(TextDispBuffer,"P mW: %.4f  ", inata.POWER);
 80014c2:	4b19      	ldr	r3, [pc, #100]	; (8001528 <main+0x204>)
 80014c4:	68db      	ldr	r3, [r3, #12]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff f846 	bl	8000558 <__aeabi_f2d>
 80014cc:	4602      	mov	r2, r0
 80014ce:	460b      	mov	r3, r1
 80014d0:	491c      	ldr	r1, [pc, #112]	; (8001544 <main+0x220>)
 80014d2:	4817      	ldr	r0, [pc, #92]	; (8001530 <main+0x20c>)
 80014d4:	f006 f8cc 	bl	8007670 <siprintf>
		  ili9341_WriteString(20, 120, TextDispBuffer, Font20, cl_CYAN, cl_BLACK);
 80014d8:	4b18      	ldr	r3, [pc, #96]	; (800153c <main+0x218>)
 80014da:	2200      	movs	r2, #0
 80014dc:	9202      	str	r2, [sp, #8]
 80014de:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80014e2:	9201      	str	r2, [sp, #4]
 80014e4:	685a      	ldr	r2, [r3, #4]
 80014e6:	9200      	str	r2, [sp, #0]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a11      	ldr	r2, [pc, #68]	; (8001530 <main+0x20c>)
 80014ec:	2178      	movs	r1, #120	; 0x78
 80014ee:	2014      	movs	r0, #20
 80014f0:	f000 feab 	bl	800224a <ili9341_WriteString>

#endif

		  } // timestamp_one

	  if (HAL_GetTick() >= timestamp_disp){
 80014f4:	f001 fb62 	bl	8002bbc <HAL_GetTick>
 80014f8:	4602      	mov	r2, r0
 80014fa:	4b13      	ldr	r3, [pc, #76]	; (8001548 <main+0x224>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	429a      	cmp	r2, r3
 8001500:	f4ff af3f 	bcc.w	8001382 <main+0x5e>
	  		timestamp_disp += 10;
 8001504:	4b10      	ldr	r3, [pc, #64]	; (8001548 <main+0x224>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	330a      	adds	r3, #10
 800150a:	4a0f      	ldr	r2, [pc, #60]	; (8001548 <main+0x224>)
 800150c:	6013      	str	r3, [r2, #0]
	  		running_box();
 800150e:	f000 f9d1 	bl	80018b4 <running_box>
	  if (HAL_GetTick() >= timestamp_one){
 8001512:	e736      	b.n	8001382 <main+0x5e>
 8001514:	20000214 	.word	0x20000214
 8001518:	08009ca0 	.word	0x08009ca0
 800151c:	200002c0 	.word	0x200002c0
 8001520:	20000380 	.word	0x20000380
 8001524:	40020000 	.word	0x40020000
 8001528:	20000368 	.word	0x20000368
 800152c:	08009c60 	.word	0x08009c60
 8001530:	20000304 	.word	0x20000304
 8001534:	20000008 	.word	0x20000008
 8001538:	08009c70 	.word	0x08009c70
 800153c:	20000010 	.word	0x20000010
 8001540:	08009c80 	.word	0x08009c80
 8001544:	08009c90 	.word	0x08009c90
 8001548:	20000384 	.word	0x20000384

0800154c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b094      	sub	sp, #80	; 0x50
 8001550:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001552:	f107 0320 	add.w	r3, r7, #32
 8001556:	2230      	movs	r2, #48	; 0x30
 8001558:	2100      	movs	r1, #0
 800155a:	4618      	mov	r0, r3
 800155c:	f005 fc16 	bl	8006d8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001560:	f107 030c 	add.w	r3, r7, #12
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	605a      	str	r2, [r3, #4]
 800156a:	609a      	str	r2, [r3, #8]
 800156c:	60da      	str	r2, [r3, #12]
 800156e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001570:	2300      	movs	r3, #0
 8001572:	60bb      	str	r3, [r7, #8]
 8001574:	4b28      	ldr	r3, [pc, #160]	; (8001618 <SystemClock_Config+0xcc>)
 8001576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001578:	4a27      	ldr	r2, [pc, #156]	; (8001618 <SystemClock_Config+0xcc>)
 800157a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800157e:	6413      	str	r3, [r2, #64]	; 0x40
 8001580:	4b25      	ldr	r3, [pc, #148]	; (8001618 <SystemClock_Config+0xcc>)
 8001582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001584:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001588:	60bb      	str	r3, [r7, #8]
 800158a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800158c:	2300      	movs	r3, #0
 800158e:	607b      	str	r3, [r7, #4]
 8001590:	4b22      	ldr	r3, [pc, #136]	; (800161c <SystemClock_Config+0xd0>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a21      	ldr	r2, [pc, #132]	; (800161c <SystemClock_Config+0xd0>)
 8001596:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800159a:	6013      	str	r3, [r2, #0]
 800159c:	4b1f      	ldr	r3, [pc, #124]	; (800161c <SystemClock_Config+0xd0>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80015a4:	607b      	str	r3, [r7, #4]
 80015a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015a8:	2302      	movs	r3, #2
 80015aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015ac:	2301      	movs	r3, #1
 80015ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015b0:	2310      	movs	r3, #16
 80015b2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015b4:	2302      	movs	r3, #2
 80015b6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015b8:	2300      	movs	r3, #0
 80015ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80015bc:	2310      	movs	r3, #16
 80015be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80015c0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80015c4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80015c6:	2304      	movs	r3, #4
 80015c8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80015ca:	2304      	movs	r3, #4
 80015cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015ce:	f107 0320 	add.w	r3, r7, #32
 80015d2:	4618      	mov	r0, r3
 80015d4:	f004 face 	bl	8005b74 <HAL_RCC_OscConfig>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80015de:	f000 f9af 	bl	8001940 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015e2:	230f      	movs	r3, #15
 80015e4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015e6:	2302      	movs	r3, #2
 80015e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015ea:	2300      	movs	r3, #0
 80015ec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015f4:	2300      	movs	r3, #0
 80015f6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015f8:	f107 030c 	add.w	r3, r7, #12
 80015fc:	2102      	movs	r1, #2
 80015fe:	4618      	mov	r0, r3
 8001600:	f004 fd30 	bl	8006064 <HAL_RCC_ClockConfig>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800160a:	f000 f999 	bl	8001940 <Error_Handler>
  }
}
 800160e:	bf00      	nop
 8001610:	3750      	adds	r7, #80	; 0x50
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	40023800 	.word	0x40023800
 800161c:	40007000 	.word	0x40007000

08001620 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001624:	4b12      	ldr	r3, [pc, #72]	; (8001670 <MX_I2C1_Init+0x50>)
 8001626:	4a13      	ldr	r2, [pc, #76]	; (8001674 <MX_I2C1_Init+0x54>)
 8001628:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800162a:	4b11      	ldr	r3, [pc, #68]	; (8001670 <MX_I2C1_Init+0x50>)
 800162c:	4a12      	ldr	r2, [pc, #72]	; (8001678 <MX_I2C1_Init+0x58>)
 800162e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001630:	4b0f      	ldr	r3, [pc, #60]	; (8001670 <MX_I2C1_Init+0x50>)
 8001632:	2200      	movs	r2, #0
 8001634:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001636:	4b0e      	ldr	r3, [pc, #56]	; (8001670 <MX_I2C1_Init+0x50>)
 8001638:	2200      	movs	r2, #0
 800163a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800163c:	4b0c      	ldr	r3, [pc, #48]	; (8001670 <MX_I2C1_Init+0x50>)
 800163e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001642:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001644:	4b0a      	ldr	r3, [pc, #40]	; (8001670 <MX_I2C1_Init+0x50>)
 8001646:	2200      	movs	r2, #0
 8001648:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800164a:	4b09      	ldr	r3, [pc, #36]	; (8001670 <MX_I2C1_Init+0x50>)
 800164c:	2200      	movs	r2, #0
 800164e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001650:	4b07      	ldr	r3, [pc, #28]	; (8001670 <MX_I2C1_Init+0x50>)
 8001652:	2200      	movs	r2, #0
 8001654:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001656:	4b06      	ldr	r3, [pc, #24]	; (8001670 <MX_I2C1_Init+0x50>)
 8001658:	2200      	movs	r2, #0
 800165a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800165c:	4804      	ldr	r0, [pc, #16]	; (8001670 <MX_I2C1_Init+0x50>)
 800165e:	f001 fdef 	bl	8003240 <HAL_I2C_Init>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001668:	f000 f96a 	bl	8001940 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800166c:	bf00      	nop
 800166e:	bd80      	pop	{r7, pc}
 8001670:	20000214 	.word	0x20000214
 8001674:	40005400 	.word	0x40005400
 8001678:	00061a80 	.word	0x00061a80

0800167c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001680:	4b18      	ldr	r3, [pc, #96]	; (80016e4 <MX_SPI2_Init+0x68>)
 8001682:	4a19      	ldr	r2, [pc, #100]	; (80016e8 <MX_SPI2_Init+0x6c>)
 8001684:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001686:	4b17      	ldr	r3, [pc, #92]	; (80016e4 <MX_SPI2_Init+0x68>)
 8001688:	f44f 7282 	mov.w	r2, #260	; 0x104
 800168c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800168e:	4b15      	ldr	r3, [pc, #84]	; (80016e4 <MX_SPI2_Init+0x68>)
 8001690:	2200      	movs	r2, #0
 8001692:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8001694:	4b13      	ldr	r3, [pc, #76]	; (80016e4 <MX_SPI2_Init+0x68>)
 8001696:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800169a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800169c:	4b11      	ldr	r3, [pc, #68]	; (80016e4 <MX_SPI2_Init+0x68>)
 800169e:	2200      	movs	r2, #0
 80016a0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016a2:	4b10      	ldr	r3, [pc, #64]	; (80016e4 <MX_SPI2_Init+0x68>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80016a8:	4b0e      	ldr	r3, [pc, #56]	; (80016e4 <MX_SPI2_Init+0x68>)
 80016aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016ae:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80016b0:	4b0c      	ldr	r3, [pc, #48]	; (80016e4 <MX_SPI2_Init+0x68>)
 80016b2:	2210      	movs	r2, #16
 80016b4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016b6:	4b0b      	ldr	r3, [pc, #44]	; (80016e4 <MX_SPI2_Init+0x68>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80016bc:	4b09      	ldr	r3, [pc, #36]	; (80016e4 <MX_SPI2_Init+0x68>)
 80016be:	2200      	movs	r2, #0
 80016c0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016c2:	4b08      	ldr	r3, [pc, #32]	; (80016e4 <MX_SPI2_Init+0x68>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80016c8:	4b06      	ldr	r3, [pc, #24]	; (80016e4 <MX_SPI2_Init+0x68>)
 80016ca:	220a      	movs	r2, #10
 80016cc:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80016ce:	4805      	ldr	r0, [pc, #20]	; (80016e4 <MX_SPI2_Init+0x68>)
 80016d0:	f004 fee8 	bl	80064a4 <HAL_SPI_Init>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 80016da:	f000 f931 	bl	8001940 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80016de:	bf00      	nop
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	20000268 	.word	0x20000268
 80016e8:	40003800 	.word	0x40003800

080016ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016f0:	4b11      	ldr	r3, [pc, #68]	; (8001738 <MX_USART2_UART_Init+0x4c>)
 80016f2:	4a12      	ldr	r2, [pc, #72]	; (800173c <MX_USART2_UART_Init+0x50>)
 80016f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016f6:	4b10      	ldr	r3, [pc, #64]	; (8001738 <MX_USART2_UART_Init+0x4c>)
 80016f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016fe:	4b0e      	ldr	r3, [pc, #56]	; (8001738 <MX_USART2_UART_Init+0x4c>)
 8001700:	2200      	movs	r2, #0
 8001702:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001704:	4b0c      	ldr	r3, [pc, #48]	; (8001738 <MX_USART2_UART_Init+0x4c>)
 8001706:	2200      	movs	r2, #0
 8001708:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800170a:	4b0b      	ldr	r3, [pc, #44]	; (8001738 <MX_USART2_UART_Init+0x4c>)
 800170c:	2200      	movs	r2, #0
 800170e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001710:	4b09      	ldr	r3, [pc, #36]	; (8001738 <MX_USART2_UART_Init+0x4c>)
 8001712:	220c      	movs	r2, #12
 8001714:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001716:	4b08      	ldr	r3, [pc, #32]	; (8001738 <MX_USART2_UART_Init+0x4c>)
 8001718:	2200      	movs	r2, #0
 800171a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800171c:	4b06      	ldr	r3, [pc, #24]	; (8001738 <MX_USART2_UART_Init+0x4c>)
 800171e:	2200      	movs	r2, #0
 8001720:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001722:	4805      	ldr	r0, [pc, #20]	; (8001738 <MX_USART2_UART_Init+0x4c>)
 8001724:	f004 ff47 	bl	80065b6 <HAL_UART_Init>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800172e:	f000 f907 	bl	8001940 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001732:	bf00      	nop
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	200002c0 	.word	0x200002c0
 800173c:	40004400 	.word	0x40004400

08001740 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b08a      	sub	sp, #40	; 0x28
 8001744:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001746:	f107 0314 	add.w	r3, r7, #20
 800174a:	2200      	movs	r2, #0
 800174c:	601a      	str	r2, [r3, #0]
 800174e:	605a      	str	r2, [r3, #4]
 8001750:	609a      	str	r2, [r3, #8]
 8001752:	60da      	str	r2, [r3, #12]
 8001754:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001756:	2300      	movs	r3, #0
 8001758:	613b      	str	r3, [r7, #16]
 800175a:	4b48      	ldr	r3, [pc, #288]	; (800187c <MX_GPIO_Init+0x13c>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175e:	4a47      	ldr	r2, [pc, #284]	; (800187c <MX_GPIO_Init+0x13c>)
 8001760:	f043 0304 	orr.w	r3, r3, #4
 8001764:	6313      	str	r3, [r2, #48]	; 0x30
 8001766:	4b45      	ldr	r3, [pc, #276]	; (800187c <MX_GPIO_Init+0x13c>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176a:	f003 0304 	and.w	r3, r3, #4
 800176e:	613b      	str	r3, [r7, #16]
 8001770:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001772:	2300      	movs	r3, #0
 8001774:	60fb      	str	r3, [r7, #12]
 8001776:	4b41      	ldr	r3, [pc, #260]	; (800187c <MX_GPIO_Init+0x13c>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	4a40      	ldr	r2, [pc, #256]	; (800187c <MX_GPIO_Init+0x13c>)
 800177c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001780:	6313      	str	r3, [r2, #48]	; 0x30
 8001782:	4b3e      	ldr	r3, [pc, #248]	; (800187c <MX_GPIO_Init+0x13c>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800178a:	60fb      	str	r3, [r7, #12]
 800178c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	60bb      	str	r3, [r7, #8]
 8001792:	4b3a      	ldr	r3, [pc, #232]	; (800187c <MX_GPIO_Init+0x13c>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001796:	4a39      	ldr	r2, [pc, #228]	; (800187c <MX_GPIO_Init+0x13c>)
 8001798:	f043 0301 	orr.w	r3, r3, #1
 800179c:	6313      	str	r3, [r2, #48]	; 0x30
 800179e:	4b37      	ldr	r3, [pc, #220]	; (800187c <MX_GPIO_Init+0x13c>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a2:	f003 0301 	and.w	r3, r3, #1
 80017a6:	60bb      	str	r3, [r7, #8]
 80017a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017aa:	2300      	movs	r3, #0
 80017ac:	607b      	str	r3, [r7, #4]
 80017ae:	4b33      	ldr	r3, [pc, #204]	; (800187c <MX_GPIO_Init+0x13c>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b2:	4a32      	ldr	r2, [pc, #200]	; (800187c <MX_GPIO_Init+0x13c>)
 80017b4:	f043 0302 	orr.w	r3, r3, #2
 80017b8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ba:	4b30      	ldr	r3, [pc, #192]	; (800187c <MX_GPIO_Init+0x13c>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	607b      	str	r3, [r7, #4]
 80017c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|ili_DC_Pin, GPIO_PIN_RESET);
 80017c6:	2200      	movs	r2, #0
 80017c8:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80017cc:	482c      	ldr	r0, [pc, #176]	; (8001880 <MX_GPIO_Init+0x140>)
 80017ce:	f001 fceb 	bl	80031a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_RES_GPIO_Port, SPI2_RES_Pin, GPIO_PIN_SET);
 80017d2:	2201      	movs	r2, #1
 80017d4:	2180      	movs	r1, #128	; 0x80
 80017d6:	482b      	ldr	r0, [pc, #172]	; (8001884 <MX_GPIO_Init+0x144>)
 80017d8:	f001 fce6 	bl	80031a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 80017dc:	2201      	movs	r2, #1
 80017de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017e2:	4827      	ldr	r0, [pc, #156]	; (8001880 <MX_GPIO_Init+0x140>)
 80017e4:	f001 fce0 	bl	80031a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ili_RES_GPIO_Port, ili_RES_Pin, GPIO_PIN_RESET);
 80017e8:	2200      	movs	r2, #0
 80017ea:	2120      	movs	r1, #32
 80017ec:	4826      	ldr	r0, [pc, #152]	; (8001888 <MX_GPIO_Init+0x148>)
 80017ee:	f001 fcdb 	bl	80031a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80017f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80017f8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80017fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fe:	2300      	movs	r3, #0
 8001800:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001802:	f107 0314 	add.w	r3, r7, #20
 8001806:	4619      	mov	r1, r3
 8001808:	481e      	ldr	r0, [pc, #120]	; (8001884 <MX_GPIO_Init+0x144>)
 800180a:	f001 fb49 	bl	8002ea0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin SPI2_CS_Pin ili_DC_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|SPI2_CS_Pin|ili_DC_Pin;
 800180e:	f44f 63a4 	mov.w	r3, #1312	; 0x520
 8001812:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001814:	2301      	movs	r3, #1
 8001816:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001818:	2300      	movs	r3, #0
 800181a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800181c:	2300      	movs	r3, #0
 800181e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001820:	f107 0314 	add.w	r3, r7, #20
 8001824:	4619      	mov	r1, r3
 8001826:	4816      	ldr	r0, [pc, #88]	; (8001880 <MX_GPIO_Init+0x140>)
 8001828:	f001 fb3a 	bl	8002ea0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_RES_Pin */
  GPIO_InitStruct.Pin = SPI2_RES_Pin;
 800182c:	2380      	movs	r3, #128	; 0x80
 800182e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001830:	2301      	movs	r3, #1
 8001832:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001834:	2300      	movs	r3, #0
 8001836:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001838:	2300      	movs	r3, #0
 800183a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_RES_GPIO_Port, &GPIO_InitStruct);
 800183c:	f107 0314 	add.w	r3, r7, #20
 8001840:	4619      	mov	r1, r3
 8001842:	4810      	ldr	r0, [pc, #64]	; (8001884 <MX_GPIO_Init+0x144>)
 8001844:	f001 fb2c 	bl	8002ea0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ili_RES_Pin */
  GPIO_InitStruct.Pin = ili_RES_Pin;
 8001848:	2320      	movs	r3, #32
 800184a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800184c:	2301      	movs	r3, #1
 800184e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001850:	2300      	movs	r3, #0
 8001852:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001854:	2300      	movs	r3, #0
 8001856:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ili_RES_GPIO_Port, &GPIO_InitStruct);
 8001858:	f107 0314 	add.w	r3, r7, #20
 800185c:	4619      	mov	r1, r3
 800185e:	480a      	ldr	r0, [pc, #40]	; (8001888 <MX_GPIO_Init+0x148>)
 8001860:	f001 fb1e 	bl	8002ea0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001864:	2200      	movs	r2, #0
 8001866:	2100      	movs	r1, #0
 8001868:	2028      	movs	r0, #40	; 0x28
 800186a:	f001 fab2 	bl	8002dd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800186e:	2028      	movs	r0, #40	; 0x28
 8001870:	f001 facb 	bl	8002e0a <HAL_NVIC_EnableIRQ>

}
 8001874:	bf00      	nop
 8001876:	3728      	adds	r7, #40	; 0x28
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	40023800 	.word	0x40023800
 8001880:	40020000 	.word	0x40020000
 8001884:	40020800 	.word	0x40020800
 8001888:	40020400 	.word	0x40020400

0800188c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	4603      	mov	r3, r0
 8001894:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13){
 8001896:	88fb      	ldrh	r3, [r7, #6]
 8001898:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800189c:	d103      	bne.n	80018a6 <HAL_GPIO_EXTI_Callback+0x1a>
		INA219_BitReset(&hi2c1, INA219_ADDR_1);
 800189e:	2180      	movs	r1, #128	; 0x80
 80018a0:	4803      	ldr	r0, [pc, #12]	; (80018b0 <HAL_GPIO_EXTI_Callback+0x24>)
 80018a2:	f7ff fba3 	bl	8000fec <INA219_BitReset>
		}
}
 80018a6:	bf00      	nop
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	20000214 	.word	0x20000214

080018b4 <running_box>:

void running_box(){
 80018b4:	b590      	push	{r4, r7, lr}
 80018b6:	b087      	sub	sp, #28
 80018b8:	af02      	add	r7, sp, #8
   //// Running box ------
  int ratte = 1;
 80018ba:	2301      	movs	r3, #1
 80018bc:	60fb      	str	r3, [r7, #12]
  int sizo = 30;
 80018be:	231e      	movs	r3, #30
 80018c0:	60bb      	str	r3, [r7, #8]
  int offs = 180;
 80018c2:	23b4      	movs	r3, #180	; 0xb4
 80018c4:	607b      	str	r3, [r7, #4]
  static uint16_t xsh = 0;
  ili9341_FillRect(xsh, offs, ratte ,sizo, cl_MAROON);
 80018c6:	4b1d      	ldr	r3, [pc, #116]	; (800193c <running_box+0x88>)
 80018c8:	8818      	ldrh	r0, [r3, #0]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	b299      	uxth	r1, r3
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	b29a      	uxth	r2, r3
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	b29b      	uxth	r3, r3
 80018d6:	f44f 44f0 	mov.w	r4, #30720	; 0x7800
 80018da:	9400      	str	r4, [sp, #0]
 80018dc:	f000 fbb8 	bl	8002050 <ili9341_FillRect>
  xsh += ratte;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	b29a      	uxth	r2, r3
 80018e4:	4b15      	ldr	r3, [pc, #84]	; (800193c <running_box+0x88>)
 80018e6:	881b      	ldrh	r3, [r3, #0]
 80018e8:	4413      	add	r3, r2
 80018ea:	b29a      	uxth	r2, r3
 80018ec:	4b13      	ldr	r3, [pc, #76]	; (800193c <running_box+0x88>)
 80018ee:	801a      	strh	r2, [r3, #0]
  ili9341_FillRect(xsh, offs, sizo, sizo, cl_CYAN); //// box
 80018f0:	4b12      	ldr	r3, [pc, #72]	; (800193c <running_box+0x88>)
 80018f2:	8818      	ldrh	r0, [r3, #0]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	b299      	uxth	r1, r3
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	b29a      	uxth	r2, r3
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	b29b      	uxth	r3, r3
 8001900:	f240 74ff 	movw	r4, #2047	; 0x7ff
 8001904:	9400      	str	r4, [sp, #0]
 8001906:	f000 fba3 	bl	8002050 <ili9341_FillRect>
  if(xsh >= 400){ // clear
 800190a:	4b0c      	ldr	r3, [pc, #48]	; (800193c <running_box+0x88>)
 800190c:	881b      	ldrh	r3, [r3, #0]
 800190e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001912:	d30f      	bcc.n	8001934 <running_box+0x80>
	  ili9341_FillRect(xsh, offs, sizo, sizo, cl_MAROON);
 8001914:	4b09      	ldr	r3, [pc, #36]	; (800193c <running_box+0x88>)
 8001916:	8818      	ldrh	r0, [r3, #0]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	b299      	uxth	r1, r3
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	b29a      	uxth	r2, r3
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	b29b      	uxth	r3, r3
 8001924:	f44f 44f0 	mov.w	r4, #30720	; 0x7800
 8001928:	9400      	str	r4, [sp, #0]
 800192a:	f000 fb91 	bl	8002050 <ili9341_FillRect>
	  xsh = 0;
 800192e:	4b03      	ldr	r3, [pc, #12]	; (800193c <running_box+0x88>)
 8001930:	2200      	movs	r2, #0
 8001932:	801a      	strh	r2, [r3, #0]
		  }

}
 8001934:	bf00      	nop
 8001936:	3714      	adds	r7, #20
 8001938:	46bd      	mov	sp, r7
 800193a:	bd90      	pop	{r4, r7, pc}
 800193c:	20000388 	.word	0x20000388

08001940 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001944:	b672      	cpsid	i
}
 8001946:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001948:	e7fe      	b.n	8001948 <Error_Handler+0x8>
	...

0800194c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001952:	2300      	movs	r3, #0
 8001954:	607b      	str	r3, [r7, #4]
 8001956:	4b10      	ldr	r3, [pc, #64]	; (8001998 <HAL_MspInit+0x4c>)
 8001958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800195a:	4a0f      	ldr	r2, [pc, #60]	; (8001998 <HAL_MspInit+0x4c>)
 800195c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001960:	6453      	str	r3, [r2, #68]	; 0x44
 8001962:	4b0d      	ldr	r3, [pc, #52]	; (8001998 <HAL_MspInit+0x4c>)
 8001964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001966:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800196a:	607b      	str	r3, [r7, #4]
 800196c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800196e:	2300      	movs	r3, #0
 8001970:	603b      	str	r3, [r7, #0]
 8001972:	4b09      	ldr	r3, [pc, #36]	; (8001998 <HAL_MspInit+0x4c>)
 8001974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001976:	4a08      	ldr	r2, [pc, #32]	; (8001998 <HAL_MspInit+0x4c>)
 8001978:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800197c:	6413      	str	r3, [r2, #64]	; 0x40
 800197e:	4b06      	ldr	r3, [pc, #24]	; (8001998 <HAL_MspInit+0x4c>)
 8001980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001986:	603b      	str	r3, [r7, #0]
 8001988:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800198a:	2007      	movs	r0, #7
 800198c:	f001 fa16 	bl	8002dbc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001990:	bf00      	nop
 8001992:	3708      	adds	r7, #8
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	40023800 	.word	0x40023800

0800199c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b08a      	sub	sp, #40	; 0x28
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a4:	f107 0314 	add.w	r3, r7, #20
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	605a      	str	r2, [r3, #4]
 80019ae:	609a      	str	r2, [r3, #8]
 80019b0:	60da      	str	r2, [r3, #12]
 80019b2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a21      	ldr	r2, [pc, #132]	; (8001a40 <HAL_I2C_MspInit+0xa4>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d13c      	bne.n	8001a38 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019be:	2300      	movs	r3, #0
 80019c0:	613b      	str	r3, [r7, #16]
 80019c2:	4b20      	ldr	r3, [pc, #128]	; (8001a44 <HAL_I2C_MspInit+0xa8>)
 80019c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c6:	4a1f      	ldr	r2, [pc, #124]	; (8001a44 <HAL_I2C_MspInit+0xa8>)
 80019c8:	f043 0302 	orr.w	r3, r3, #2
 80019cc:	6313      	str	r3, [r2, #48]	; 0x30
 80019ce:	4b1d      	ldr	r3, [pc, #116]	; (8001a44 <HAL_I2C_MspInit+0xa8>)
 80019d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d2:	f003 0302 	and.w	r3, r3, #2
 80019d6:	613b      	str	r3, [r7, #16]
 80019d8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80019da:	f44f 7340 	mov.w	r3, #768	; 0x300
 80019de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019e0:	2312      	movs	r3, #18
 80019e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e4:	2300      	movs	r3, #0
 80019e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019e8:	2303      	movs	r3, #3
 80019ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019ec:	2304      	movs	r3, #4
 80019ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019f0:	f107 0314 	add.w	r3, r7, #20
 80019f4:	4619      	mov	r1, r3
 80019f6:	4814      	ldr	r0, [pc, #80]	; (8001a48 <HAL_I2C_MspInit+0xac>)
 80019f8:	f001 fa52 	bl	8002ea0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019fc:	2300      	movs	r3, #0
 80019fe:	60fb      	str	r3, [r7, #12]
 8001a00:	4b10      	ldr	r3, [pc, #64]	; (8001a44 <HAL_I2C_MspInit+0xa8>)
 8001a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a04:	4a0f      	ldr	r2, [pc, #60]	; (8001a44 <HAL_I2C_MspInit+0xa8>)
 8001a06:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a0a:	6413      	str	r3, [r2, #64]	; 0x40
 8001a0c:	4b0d      	ldr	r3, [pc, #52]	; (8001a44 <HAL_I2C_MspInit+0xa8>)
 8001a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a14:	60fb      	str	r3, [r7, #12]
 8001a16:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001a18:	2200      	movs	r2, #0
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	201f      	movs	r0, #31
 8001a1e:	f001 f9d8 	bl	8002dd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001a22:	201f      	movs	r0, #31
 8001a24:	f001 f9f1 	bl	8002e0a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001a28:	2200      	movs	r2, #0
 8001a2a:	2100      	movs	r1, #0
 8001a2c:	2020      	movs	r0, #32
 8001a2e:	f001 f9d0 	bl	8002dd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001a32:	2020      	movs	r0, #32
 8001a34:	f001 f9e9 	bl	8002e0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a38:	bf00      	nop
 8001a3a:	3728      	adds	r7, #40	; 0x28
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	40005400 	.word	0x40005400
 8001a44:	40023800 	.word	0x40023800
 8001a48:	40020400 	.word	0x40020400

08001a4c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b08a      	sub	sp, #40	; 0x28
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a54:	f107 0314 	add.w	r3, r7, #20
 8001a58:	2200      	movs	r2, #0
 8001a5a:	601a      	str	r2, [r3, #0]
 8001a5c:	605a      	str	r2, [r3, #4]
 8001a5e:	609a      	str	r2, [r3, #8]
 8001a60:	60da      	str	r2, [r3, #12]
 8001a62:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a28      	ldr	r2, [pc, #160]	; (8001b0c <HAL_SPI_MspInit+0xc0>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d14a      	bne.n	8001b04 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001a6e:	2300      	movs	r3, #0
 8001a70:	613b      	str	r3, [r7, #16]
 8001a72:	4b27      	ldr	r3, [pc, #156]	; (8001b10 <HAL_SPI_MspInit+0xc4>)
 8001a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a76:	4a26      	ldr	r2, [pc, #152]	; (8001b10 <HAL_SPI_MspInit+0xc4>)
 8001a78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a7c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a7e:	4b24      	ldr	r3, [pc, #144]	; (8001b10 <HAL_SPI_MspInit+0xc4>)
 8001a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a86:	613b      	str	r3, [r7, #16]
 8001a88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	60fb      	str	r3, [r7, #12]
 8001a8e:	4b20      	ldr	r3, [pc, #128]	; (8001b10 <HAL_SPI_MspInit+0xc4>)
 8001a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a92:	4a1f      	ldr	r2, [pc, #124]	; (8001b10 <HAL_SPI_MspInit+0xc4>)
 8001a94:	f043 0304 	orr.w	r3, r3, #4
 8001a98:	6313      	str	r3, [r2, #48]	; 0x30
 8001a9a:	4b1d      	ldr	r3, [pc, #116]	; (8001b10 <HAL_SPI_MspInit+0xc4>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9e:	f003 0304 	and.w	r3, r3, #4
 8001aa2:	60fb      	str	r3, [r7, #12]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	60bb      	str	r3, [r7, #8]
 8001aaa:	4b19      	ldr	r3, [pc, #100]	; (8001b10 <HAL_SPI_MspInit+0xc4>)
 8001aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aae:	4a18      	ldr	r2, [pc, #96]	; (8001b10 <HAL_SPI_MspInit+0xc4>)
 8001ab0:	f043 0302 	orr.w	r3, r3, #2
 8001ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ab6:	4b16      	ldr	r3, [pc, #88]	; (8001b10 <HAL_SPI_MspInit+0xc4>)
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aba:	f003 0302 	and.w	r3, r3, #2
 8001abe:	60bb      	str	r3, [r7, #8]
 8001ac0:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001ac2:	230c      	movs	r3, #12
 8001ac4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aca:	2300      	movs	r3, #0
 8001acc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ad2:	2305      	movs	r3, #5
 8001ad4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ad6:	f107 0314 	add.w	r3, r7, #20
 8001ada:	4619      	mov	r1, r3
 8001adc:	480d      	ldr	r0, [pc, #52]	; (8001b14 <HAL_SPI_MspInit+0xc8>)
 8001ade:	f001 f9df 	bl	8002ea0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ae2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ae6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae8:	2302      	movs	r3, #2
 8001aea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aec:	2300      	movs	r3, #0
 8001aee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001af0:	2303      	movs	r3, #3
 8001af2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001af4:	2305      	movs	r3, #5
 8001af6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001af8:	f107 0314 	add.w	r3, r7, #20
 8001afc:	4619      	mov	r1, r3
 8001afe:	4806      	ldr	r0, [pc, #24]	; (8001b18 <HAL_SPI_MspInit+0xcc>)
 8001b00:	f001 f9ce 	bl	8002ea0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001b04:	bf00      	nop
 8001b06:	3728      	adds	r7, #40	; 0x28
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	40003800 	.word	0x40003800
 8001b10:	40023800 	.word	0x40023800
 8001b14:	40020800 	.word	0x40020800
 8001b18:	40020400 	.word	0x40020400

08001b1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b08a      	sub	sp, #40	; 0x28
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b24:	f107 0314 	add.w	r3, r7, #20
 8001b28:	2200      	movs	r2, #0
 8001b2a:	601a      	str	r2, [r3, #0]
 8001b2c:	605a      	str	r2, [r3, #4]
 8001b2e:	609a      	str	r2, [r3, #8]
 8001b30:	60da      	str	r2, [r3, #12]
 8001b32:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a19      	ldr	r2, [pc, #100]	; (8001ba0 <HAL_UART_MspInit+0x84>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d12b      	bne.n	8001b96 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b3e:	2300      	movs	r3, #0
 8001b40:	613b      	str	r3, [r7, #16]
 8001b42:	4b18      	ldr	r3, [pc, #96]	; (8001ba4 <HAL_UART_MspInit+0x88>)
 8001b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b46:	4a17      	ldr	r2, [pc, #92]	; (8001ba4 <HAL_UART_MspInit+0x88>)
 8001b48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b4c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b4e:	4b15      	ldr	r3, [pc, #84]	; (8001ba4 <HAL_UART_MspInit+0x88>)
 8001b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b56:	613b      	str	r3, [r7, #16]
 8001b58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	60fb      	str	r3, [r7, #12]
 8001b5e:	4b11      	ldr	r3, [pc, #68]	; (8001ba4 <HAL_UART_MspInit+0x88>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b62:	4a10      	ldr	r2, [pc, #64]	; (8001ba4 <HAL_UART_MspInit+0x88>)
 8001b64:	f043 0301 	orr.w	r3, r3, #1
 8001b68:	6313      	str	r3, [r2, #48]	; 0x30
 8001b6a:	4b0e      	ldr	r3, [pc, #56]	; (8001ba4 <HAL_UART_MspInit+0x88>)
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6e:	f003 0301 	and.w	r3, r3, #1
 8001b72:	60fb      	str	r3, [r7, #12]
 8001b74:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001b76:	230c      	movs	r3, #12
 8001b78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b82:	2303      	movs	r3, #3
 8001b84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b86:	2307      	movs	r3, #7
 8001b88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b8a:	f107 0314 	add.w	r3, r7, #20
 8001b8e:	4619      	mov	r1, r3
 8001b90:	4805      	ldr	r0, [pc, #20]	; (8001ba8 <HAL_UART_MspInit+0x8c>)
 8001b92:	f001 f985 	bl	8002ea0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b96:	bf00      	nop
 8001b98:	3728      	adds	r7, #40	; 0x28
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	40004400 	.word	0x40004400
 8001ba4:	40023800 	.word	0x40023800
 8001ba8:	40020000 	.word	0x40020000

08001bac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bb0:	e7fe      	b.n	8001bb0 <NMI_Handler+0x4>

08001bb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bb2:	b480      	push	{r7}
 8001bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bb6:	e7fe      	b.n	8001bb6 <HardFault_Handler+0x4>

08001bb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bbc:	e7fe      	b.n	8001bbc <MemManage_Handler+0x4>

08001bbe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bc2:	e7fe      	b.n	8001bc2 <BusFault_Handler+0x4>

08001bc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bc8:	e7fe      	b.n	8001bc8 <UsageFault_Handler+0x4>

08001bca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bce:	bf00      	nop
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bdc:	bf00      	nop
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr

08001be6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001be6:	b480      	push	{r7}
 8001be8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bea:	bf00      	nop
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bf8:	f000 ffcc 	bl	8002b94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bfc:	bf00      	nop
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001c04:	4802      	ldr	r0, [pc, #8]	; (8001c10 <I2C1_EV_IRQHandler+0x10>)
 8001c06:	f001 ff7f 	bl	8003b08 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001c0a:	bf00      	nop
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	20000214 	.word	0x20000214

08001c14 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001c18:	4802      	ldr	r0, [pc, #8]	; (8001c24 <I2C1_ER_IRQHandler+0x10>)
 8001c1a:	f002 f8e6 	bl	8003dea <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001c1e:	bf00      	nop
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	20000214 	.word	0x20000214

08001c28 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001c2c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001c30:	f001 faee 	bl	8003210 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001c34:	bf00      	nop
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
	return 1;
 8001c3c:	2301      	movs	r3, #1
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <_kill>:

int _kill(int pid, int sig)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001c52:	f005 f871 	bl	8006d38 <__errno>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2216      	movs	r2, #22
 8001c5a:	601a      	str	r2, [r3, #0]
	return -1;
 8001c5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3708      	adds	r7, #8
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <_exit>:

void _exit (int status)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001c70:	f04f 31ff 	mov.w	r1, #4294967295
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f7ff ffe7 	bl	8001c48 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001c7a:	e7fe      	b.n	8001c7a <_exit+0x12>

08001c7c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b086      	sub	sp, #24
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	60f8      	str	r0, [r7, #12]
 8001c84:	60b9      	str	r1, [r7, #8]
 8001c86:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c88:	2300      	movs	r3, #0
 8001c8a:	617b      	str	r3, [r7, #20]
 8001c8c:	e00a      	b.n	8001ca4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c8e:	f3af 8000 	nop.w
 8001c92:	4601      	mov	r1, r0
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	1c5a      	adds	r2, r3, #1
 8001c98:	60ba      	str	r2, [r7, #8]
 8001c9a:	b2ca      	uxtb	r2, r1
 8001c9c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	617b      	str	r3, [r7, #20]
 8001ca4:	697a      	ldr	r2, [r7, #20]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	dbf0      	blt.n	8001c8e <_read+0x12>
	}

return len;
 8001cac:	687b      	ldr	r3, [r7, #4]
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3718      	adds	r7, #24
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	b086      	sub	sp, #24
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	60f8      	str	r0, [r7, #12]
 8001cbe:	60b9      	str	r1, [r7, #8]
 8001cc0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	617b      	str	r3, [r7, #20]
 8001cc6:	e009      	b.n	8001cdc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	1c5a      	adds	r2, r3, #1
 8001ccc:	60ba      	str	r2, [r7, #8]
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	3301      	adds	r3, #1
 8001cda:	617b      	str	r3, [r7, #20]
 8001cdc:	697a      	ldr	r2, [r7, #20]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	dbf1      	blt.n	8001cc8 <_write+0x12>
	}
	return len;
 8001ce4:	687b      	ldr	r3, [r7, #4]
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3718      	adds	r7, #24
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}

08001cee <_close>:

int _close(int file)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	b083      	sub	sp, #12
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
	return -1;
 8001cf6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr

08001d06 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d06:	b480      	push	{r7}
 8001d08:	b083      	sub	sp, #12
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
 8001d0e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d16:	605a      	str	r2, [r3, #4]
	return 0;
 8001d18:	2300      	movs	r3, #0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	370c      	adds	r7, #12
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr

08001d26 <_isatty>:

int _isatty(int file)
{
 8001d26:	b480      	push	{r7}
 8001d28:	b083      	sub	sp, #12
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
	return 1;
 8001d2e:	2301      	movs	r3, #1
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b085      	sub	sp, #20
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	60f8      	str	r0, [r7, #12]
 8001d44:	60b9      	str	r1, [r7, #8]
 8001d46:	607a      	str	r2, [r7, #4]
	return 0;
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3714      	adds	r7, #20
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
	...

08001d58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d60:	4a14      	ldr	r2, [pc, #80]	; (8001db4 <_sbrk+0x5c>)
 8001d62:	4b15      	ldr	r3, [pc, #84]	; (8001db8 <_sbrk+0x60>)
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d6c:	4b13      	ldr	r3, [pc, #76]	; (8001dbc <_sbrk+0x64>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d102      	bne.n	8001d7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d74:	4b11      	ldr	r3, [pc, #68]	; (8001dbc <_sbrk+0x64>)
 8001d76:	4a12      	ldr	r2, [pc, #72]	; (8001dc0 <_sbrk+0x68>)
 8001d78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d7a:	4b10      	ldr	r3, [pc, #64]	; (8001dbc <_sbrk+0x64>)
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4413      	add	r3, r2
 8001d82:	693a      	ldr	r2, [r7, #16]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d207      	bcs.n	8001d98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d88:	f004 ffd6 	bl	8006d38 <__errno>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	220c      	movs	r2, #12
 8001d90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d92:	f04f 33ff 	mov.w	r3, #4294967295
 8001d96:	e009      	b.n	8001dac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d98:	4b08      	ldr	r3, [pc, #32]	; (8001dbc <_sbrk+0x64>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d9e:	4b07      	ldr	r3, [pc, #28]	; (8001dbc <_sbrk+0x64>)
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4413      	add	r3, r2
 8001da6:	4a05      	ldr	r2, [pc, #20]	; (8001dbc <_sbrk+0x64>)
 8001da8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001daa:	68fb      	ldr	r3, [r7, #12]
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3718      	adds	r7, #24
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	20020000 	.word	0x20020000
 8001db8:	00000400 	.word	0x00000400
 8001dbc:	2000038c 	.word	0x2000038c
 8001dc0:	200003a8 	.word	0x200003a8

08001dc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001dc8:	4b06      	ldr	r3, [pc, #24]	; (8001de4 <SystemInit+0x20>)
 8001dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dce:	4a05      	ldr	r2, [pc, #20]	; (8001de4 <SystemInit+0x20>)
 8001dd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001dd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001dd8:	bf00      	nop
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	e000ed00 	.word	0xe000ed00

08001de8 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
  LCD_IO_Bl_OnOff(1);
 8001dec:	2001      	movs	r0, #1
 8001dee:	f000 fd3e 	bl	800286e <LCD_IO_Bl_OnOff>
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_SLPOUT);    // Exit Sleep
 8001df2:	2011      	movs	r0, #17
 8001df4:	f000 fdc2 	bl	800297c <LCD_IO_WriteCmd8>
  ILI9341_LCDMUTEX_POP();
}
 8001df8:	bf00      	nop
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <ili9341_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  return ILI9341_SIZE_X;
 8001e00:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr

08001e0e <ili9341_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8001e0e:	b480      	push	{r7}
 8001e10:	af00      	add	r7, sp, #0
  return ILI9341_SIZE_Y;
 8001e12:	23f0      	movs	r3, #240	; 0xf0
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
	...

08001e20 <ili9341_Init>:
/* SPI or paralell mode */
#if ILI9341_INTERFACE_MODE == 1

//-----------------------------------------------------------------------------
void ili9341_Init(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af02      	add	r7, sp, #8
  if((Is_ili9341_Initialized & ILI9341_LCD_INITIALIZED) == 0)
 8001e26:	4b52      	ldr	r3, [pc, #328]	; (8001f70 <ili9341_Init+0x150>)
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	f003 0301 	and.w	r3, r3, #1
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d115      	bne.n	8001e5e <ili9341_Init+0x3e>
  {
    Is_ili9341_Initialized |= ILI9341_LCD_INITIALIZED;
 8001e32:	4b4f      	ldr	r3, [pc, #316]	; (8001f70 <ili9341_Init+0x150>)
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	f043 0301 	orr.w	r3, r3, #1
 8001e3a:	b2da      	uxtb	r2, r3
 8001e3c:	4b4c      	ldr	r3, [pc, #304]	; (8001f70 <ili9341_Init+0x150>)
 8001e3e:	701a      	strb	r2, [r3, #0]
    if((Is_ili9341_Initialized & ILI9341_IO_INITIALIZED) == 0)
 8001e40:	4b4b      	ldr	r3, [pc, #300]	; (8001f70 <ili9341_Init+0x150>)
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	f003 0302 	and.w	r3, r3, #2
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d101      	bne.n	8001e50 <ili9341_Init+0x30>
      LCD_IO_Init();
 8001e4c:	f000 fd1a 	bl	8002884 <LCD_IO_Init>
    Is_ili9341_Initialized |= ILI9341_IO_INITIALIZED;
 8001e50:	4b47      	ldr	r3, [pc, #284]	; (8001f70 <ili9341_Init+0x150>)
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	f043 0302 	orr.w	r3, r3, #2
 8001e58:	b2da      	uxtb	r2, r3
 8001e5a:	4b45      	ldr	r3, [pc, #276]	; (8001f70 <ili9341_Init+0x150>)
 8001e5c:	701a      	strb	r2, [r3, #0]
  }

  LCD_Delay(10);
 8001e5e:	200a      	movs	r0, #10
 8001e60:	f000 fcfa 	bl	8002858 <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9341_SWRESET);
 8001e64:	2001      	movs	r0, #1
 8001e66:	f000 fd89 	bl	800297c <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 8001e6a:	200a      	movs	r0, #10
 8001e6c:	f000 fcf4 	bl	8002858 <LCD_Delay>

  LCD_IO_WriteCmd8MultipleData8(0xEF, (uint8_t *)"\x03\x80\x02", 3);
 8001e70:	2203      	movs	r2, #3
 8001e72:	4940      	ldr	r1, [pc, #256]	; (8001f74 <ili9341_Init+0x154>)
 8001e74:	20ef      	movs	r0, #239	; 0xef
 8001e76:	f000 fdef 	bl	8002a58 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xCF, (uint8_t *)"\x00\xC1\x30", 3);
 8001e7a:	2203      	movs	r2, #3
 8001e7c:	493e      	ldr	r1, [pc, #248]	; (8001f78 <ili9341_Init+0x158>)
 8001e7e:	20cf      	movs	r0, #207	; 0xcf
 8001e80:	f000 fdea 	bl	8002a58 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xED, (uint8_t *)"\x64\x03\x12\x81", 4);
 8001e84:	2204      	movs	r2, #4
 8001e86:	493d      	ldr	r1, [pc, #244]	; (8001f7c <ili9341_Init+0x15c>)
 8001e88:	20ed      	movs	r0, #237	; 0xed
 8001e8a:	f000 fde5 	bl	8002a58 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xE8, (uint8_t *)"\x85\x00\x78", 3);
 8001e8e:	2203      	movs	r2, #3
 8001e90:	493b      	ldr	r1, [pc, #236]	; (8001f80 <ili9341_Init+0x160>)
 8001e92:	20e8      	movs	r0, #232	; 0xe8
 8001e94:	f000 fde0 	bl	8002a58 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xCB, (uint8_t *)"\x39\x2C\x00\x34\x02", 5);
 8001e98:	2205      	movs	r2, #5
 8001e9a:	493a      	ldr	r1, [pc, #232]	; (8001f84 <ili9341_Init+0x164>)
 8001e9c:	20cb      	movs	r0, #203	; 0xcb
 8001e9e:	f000 fddb 	bl	8002a58 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xF7, (uint8_t *)"\x20", 1);
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	4938      	ldr	r1, [pc, #224]	; (8001f88 <ili9341_Init+0x168>)
 8001ea6:	20f7      	movs	r0, #247	; 0xf7
 8001ea8:	f000 fdd6 	bl	8002a58 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xEA, (uint8_t *)"\x00\x00", 2);
 8001eac:	2202      	movs	r2, #2
 8001eae:	4937      	ldr	r1, [pc, #220]	; (8001f8c <ili9341_Init+0x16c>)
 8001eb0:	20ea      	movs	r0, #234	; 0xea
 8001eb2:	f000 fdd1 	bl	8002a58 <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 1 (Vreg1out, Verg2out)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PWCTR1, (uint8_t *)"\x23", 1);
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	4935      	ldr	r1, [pc, #212]	; (8001f90 <ili9341_Init+0x170>)
 8001eba:	20c0      	movs	r0, #192	; 0xc0
 8001ebc:	f000 fdcc 	bl	8002a58 <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 2 (VGH,VGL)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PWCTR2, (uint8_t *)"\x10", 1);
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	4934      	ldr	r1, [pc, #208]	; (8001f94 <ili9341_Init+0x174>)
 8001ec4:	20c1      	movs	r0, #193	; 0xc1
 8001ec6:	f000 fdc7 	bl	8002a58 <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 3 (Vcom)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_VMCTR1, (uint8_t *)"\x3E\x28", 2);
 8001eca:	2202      	movs	r2, #2
 8001ecc:	4932      	ldr	r1, [pc, #200]	; (8001f98 <ili9341_Init+0x178>)
 8001ece:	20c5      	movs	r0, #197	; 0xc5
 8001ed0:	f000 fdc2 	bl	8002a58 <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 3 (Vcom)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_VMCTR2, (uint8_t *)"\x86", 1);
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	4931      	ldr	r1, [pc, #196]	; (8001f9c <ili9341_Init+0x17c>)
 8001ed8:	20c7      	movs	r0, #199	; 0xc7
 8001eda:	f000 fdbd 	bl	8002a58 <LCD_IO_WriteCmd8MultipleData8>

  // Vertical scroll zero
  LCD_IO_WriteCmd8MultipleData8(ILI9341_VSCRSADD, (uint8_t *)"\x00", 1);
 8001ede:	2201      	movs	r2, #1
 8001ee0:	492f      	ldr	r1, [pc, #188]	; (8001fa0 <ili9341_Init+0x180>)
 8001ee2:	2037      	movs	r0, #55	; 0x37
 8001ee4:	f000 fdb8 	bl	8002a58 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PIXFMT, (uint8_t *)"\x55", 1);
 8001ee8:	2201      	movs	r2, #1
 8001eea:	492e      	ldr	r1, [pc, #184]	; (8001fa4 <ili9341_Init+0x184>)
 8001eec:	203a      	movs	r0, #58	; 0x3a
 8001eee:	f000 fdb3 	bl	8002a58 <LCD_IO_WriteCmd8MultipleData8>

  // LCD_IO_WriteCmd8MultipleData8(0xF6, (uint8_t *)"\x01\x00\x06", 3);

  LCD_IO_WriteCmd8MultipleData8(ILI9341_FRMCTR1, (uint8_t *)"\x00\x18", 2);
 8001ef2:	2202      	movs	r2, #2
 8001ef4:	492c      	ldr	r1, [pc, #176]	; (8001fa8 <ili9341_Init+0x188>)
 8001ef6:	20b1      	movs	r0, #177	; 0xb1
 8001ef8:	f000 fdae 	bl	8002a58 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_DFUNCTR, (uint8_t *)"\x08\x82\x27", 3);  // Display Function Control
 8001efc:	2203      	movs	r2, #3
 8001efe:	492b      	ldr	r1, [pc, #172]	; (8001fac <ili9341_Init+0x18c>)
 8001f00:	20b6      	movs	r0, #182	; 0xb6
 8001f02:	f000 fda9 	bl	8002a58 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xF2, (uint8_t *)"\x00", 1);            // 3Gamma Function Disable
 8001f06:	2201      	movs	r2, #1
 8001f08:	4925      	ldr	r1, [pc, #148]	; (8001fa0 <ili9341_Init+0x180>)
 8001f0a:	20f2      	movs	r0, #242	; 0xf2
 8001f0c:	f000 fda4 	bl	8002a58 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_GAMMASET, (uint8_t *)"\x01", 1);// Gamma curve selected
 8001f10:	2201      	movs	r2, #1
 8001f12:	4927      	ldr	r1, [pc, #156]	; (8001fb0 <ili9341_Init+0x190>)
 8001f14:	2026      	movs	r0, #38	; 0x26
 8001f16:	f000 fd9f 	bl	8002a58 <LCD_IO_WriteCmd8MultipleData8>

  // positive gamma control
  LCD_IO_WriteCmd8MultipleData8(ILI9341_GMCTRP1, (uint8_t *)"\x0F\x31\x2B\x0C\x0E\x08\x4E\xF1\x37\x07\x10\x03\x0E\x09\x00", 15);
 8001f1a:	220f      	movs	r2, #15
 8001f1c:	4925      	ldr	r1, [pc, #148]	; (8001fb4 <ili9341_Init+0x194>)
 8001f1e:	20e0      	movs	r0, #224	; 0xe0
 8001f20:	f000 fd9a 	bl	8002a58 <LCD_IO_WriteCmd8MultipleData8>

  // negative gamma control
  LCD_IO_WriteCmd8MultipleData8(ILI9341_GMCTRN1, (uint8_t *)"\x00\x0E\x14\x03\x11\x07\x31\xC1\x48\x08\x0F\x0C\x31\x36\x0F", 15);
 8001f24:	220f      	movs	r2, #15
 8001f26:	4924      	ldr	r1, [pc, #144]	; (8001fb8 <ili9341_Init+0x198>)
 8001f28:	20e1      	movs	r0, #225	; 0xe1
 8001f2a:	f000 fd95 	bl	8002a58 <LCD_IO_WriteCmd8MultipleData8>

  LCD_IO_WriteCmd8(ILI9341_MADCTL); LCD_IO_WriteData8(ILI9341_MAD_DATA_RIGHT_THEN_DOWN);
 8001f2e:	2036      	movs	r0, #54	; 0x36
 8001f30:	f000 fd24 	bl	800297c <LCD_IO_WriteCmd8>
 8001f34:	20e8      	movs	r0, #232	; 0xe8
 8001f36:	f000 fd3f 	bl	80029b8 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_SLPOUT);    // Exit Sleep
 8001f3a:	2011      	movs	r0, #17
 8001f3c:	f000 fd1e 	bl	800297c <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 8001f40:	200a      	movs	r0, #10
 8001f42:	f000 fc89 	bl	8002858 <LCD_Delay>

  #if ILI9341_INITCLEAR == 1
  ili9341_FillRect(0, 0, ILI9341_SIZE_X, ILI9341_SIZE_Y, 0x0000);
 8001f46:	2300      	movs	r3, #0
 8001f48:	9300      	str	r3, [sp, #0]
 8001f4a:	23f0      	movs	r3, #240	; 0xf0
 8001f4c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001f50:	2100      	movs	r1, #0
 8001f52:	2000      	movs	r0, #0
 8001f54:	f000 f87c 	bl	8002050 <ili9341_FillRect>
  LCD_Delay(10);
 8001f58:	200a      	movs	r0, #10
 8001f5a:	f000 fc7d 	bl	8002858 <LCD_Delay>
  #endif
  
  LCD_IO_WriteCmd8(ILI9341_DISPON);    // Display on
 8001f5e:	2029      	movs	r0, #41	; 0x29
 8001f60:	f000 fd0c 	bl	800297c <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 8001f64:	200a      	movs	r0, #10
 8001f66:	f000 fc77 	bl	8002858 <LCD_Delay>
}
 8001f6a:	bf00      	nop
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	20000390 	.word	0x20000390
 8001f74:	08009cdc 	.word	0x08009cdc
 8001f78:	08009ce0 	.word	0x08009ce0
 8001f7c:	08009ce4 	.word	0x08009ce4
 8001f80:	08009cec 	.word	0x08009cec
 8001f84:	08009cf0 	.word	0x08009cf0
 8001f88:	08009cf8 	.word	0x08009cf8
 8001f8c:	08009cfc 	.word	0x08009cfc
 8001f90:	08009d00 	.word	0x08009d00
 8001f94:	08009d04 	.word	0x08009d04
 8001f98:	08009d08 	.word	0x08009d08
 8001f9c:	08009d0c 	.word	0x08009d0c
 8001fa0:	08009d10 	.word	0x08009d10
 8001fa4:	08009d14 	.word	0x08009d14
 8001fa8:	08009d18 	.word	0x08009d18
 8001fac:	08009d1c 	.word	0x08009d1c
 8001fb0:	08009d20 	.word	0x08009d20
 8001fb4:	08009d24 	.word	0x08009d24
 8001fb8:	08009d34 	.word	0x08009d34

08001fbc <ili9341_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color
  * @retval None
  */
void ili9341_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	80fb      	strh	r3, [r7, #6]
 8001fc6:	460b      	mov	r3, r1
 8001fc8:	80bb      	strh	r3, [r7, #4]
 8001fca:	4613      	mov	r3, r2
 8001fcc:	807b      	strh	r3, [r7, #2]
  ILI9341_LCDMUTEX_PUSH();
  ILI9341_SETCURSOR(Xpos, Ypos);
 8001fce:	202a      	movs	r0, #42	; 0x2a
 8001fd0:	f000 fcd4 	bl	800297c <LCD_IO_WriteCmd8>
 8001fd4:	88fb      	ldrh	r3, [r7, #6]
 8001fd6:	0a1b      	lsrs	r3, r3, #8
 8001fd8:	b29b      	uxth	r3, r3
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f000 fceb 	bl	80029b8 <LCD_IO_WriteData8>
 8001fe2:	88fb      	ldrh	r3, [r7, #6]
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f000 fce6 	bl	80029b8 <LCD_IO_WriteData8>
 8001fec:	88fb      	ldrh	r3, [r7, #6]
 8001fee:	0a1b      	lsrs	r3, r3, #8
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f000 fcdf 	bl	80029b8 <LCD_IO_WriteData8>
 8001ffa:	88fb      	ldrh	r3, [r7, #6]
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	4618      	mov	r0, r3
 8002000:	f000 fcda 	bl	80029b8 <LCD_IO_WriteData8>
 8002004:	202b      	movs	r0, #43	; 0x2b
 8002006:	f000 fcb9 	bl	800297c <LCD_IO_WriteCmd8>
 800200a:	88bb      	ldrh	r3, [r7, #4]
 800200c:	0a1b      	lsrs	r3, r3, #8
 800200e:	b29b      	uxth	r3, r3
 8002010:	b2db      	uxtb	r3, r3
 8002012:	4618      	mov	r0, r3
 8002014:	f000 fcd0 	bl	80029b8 <LCD_IO_WriteData8>
 8002018:	88bb      	ldrh	r3, [r7, #4]
 800201a:	b2db      	uxtb	r3, r3
 800201c:	4618      	mov	r0, r3
 800201e:	f000 fccb 	bl	80029b8 <LCD_IO_WriteData8>
 8002022:	88bb      	ldrh	r3, [r7, #4]
 8002024:	0a1b      	lsrs	r3, r3, #8
 8002026:	b29b      	uxth	r3, r3
 8002028:	b2db      	uxtb	r3, r3
 800202a:	4618      	mov	r0, r3
 800202c:	f000 fcc4 	bl	80029b8 <LCD_IO_WriteData8>
 8002030:	88bb      	ldrh	r3, [r7, #4]
 8002032:	b2db      	uxtb	r3, r3
 8002034:	4618      	mov	r0, r3
 8002036:	f000 fcbf 	bl	80029b8 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_RAMWR); LCD_IO_WriteData16(RGBCode);
 800203a:	202c      	movs	r0, #44	; 0x2c
 800203c:	f000 fc9e 	bl	800297c <LCD_IO_WriteCmd8>
 8002040:	887b      	ldrh	r3, [r7, #2]
 8002042:	4618      	mov	r0, r3
 8002044:	f000 fcce 	bl	80029e4 <LCD_IO_WriteData16>
  ILI9341_LCDMUTEX_POP();
}
 8002048:	bf00      	nop
 800204a:	3708      	adds	r7, #8
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}

08002050 <ili9341_FillRect>:
  * @param  Ysize:    specifies the Y size
  * @param  RGBCode:  specifies the RGB color
  * @retval None
  */
void ili9341_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t RGBCode)
{
 8002050:	b590      	push	{r4, r7, lr}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	4604      	mov	r4, r0
 8002058:	4608      	mov	r0, r1
 800205a:	4611      	mov	r1, r2
 800205c:	461a      	mov	r2, r3
 800205e:	4623      	mov	r3, r4
 8002060:	80fb      	strh	r3, [r7, #6]
 8002062:	4603      	mov	r3, r0
 8002064:	80bb      	strh	r3, [r7, #4]
 8002066:	460b      	mov	r3, r1
 8002068:	807b      	strh	r3, [r7, #2]
 800206a:	4613      	mov	r3, r2
 800206c:	803b      	strh	r3, [r7, #0]
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Xsize - 1);
 800206e:	202a      	movs	r0, #42	; 0x2a
 8002070:	f000 fc84 	bl	800297c <LCD_IO_WriteCmd8>
 8002074:	88fb      	ldrh	r3, [r7, #6]
 8002076:	0a1b      	lsrs	r3, r3, #8
 8002078:	b29b      	uxth	r3, r3
 800207a:	b2db      	uxtb	r3, r3
 800207c:	4618      	mov	r0, r3
 800207e:	f000 fc9b 	bl	80029b8 <LCD_IO_WriteData8>
 8002082:	88fb      	ldrh	r3, [r7, #6]
 8002084:	b2db      	uxtb	r3, r3
 8002086:	4618      	mov	r0, r3
 8002088:	f000 fc96 	bl	80029b8 <LCD_IO_WriteData8>
 800208c:	88fa      	ldrh	r2, [r7, #6]
 800208e:	887b      	ldrh	r3, [r7, #2]
 8002090:	4413      	add	r3, r2
 8002092:	3b01      	subs	r3, #1
 8002094:	121b      	asrs	r3, r3, #8
 8002096:	b2db      	uxtb	r3, r3
 8002098:	4618      	mov	r0, r3
 800209a:	f000 fc8d 	bl	80029b8 <LCD_IO_WriteData8>
 800209e:	88fb      	ldrh	r3, [r7, #6]
 80020a0:	b2da      	uxtb	r2, r3
 80020a2:	887b      	ldrh	r3, [r7, #2]
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	4413      	add	r3, r2
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	3b01      	subs	r3, #1
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	4618      	mov	r0, r3
 80020b0:	f000 fc82 	bl	80029b8 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Ysize - 1);
 80020b4:	202b      	movs	r0, #43	; 0x2b
 80020b6:	f000 fc61 	bl	800297c <LCD_IO_WriteCmd8>
 80020ba:	88bb      	ldrh	r3, [r7, #4]
 80020bc:	0a1b      	lsrs	r3, r3, #8
 80020be:	b29b      	uxth	r3, r3
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	4618      	mov	r0, r3
 80020c4:	f000 fc78 	bl	80029b8 <LCD_IO_WriteData8>
 80020c8:	88bb      	ldrh	r3, [r7, #4]
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	4618      	mov	r0, r3
 80020ce:	f000 fc73 	bl	80029b8 <LCD_IO_WriteData8>
 80020d2:	88ba      	ldrh	r2, [r7, #4]
 80020d4:	883b      	ldrh	r3, [r7, #0]
 80020d6:	4413      	add	r3, r2
 80020d8:	3b01      	subs	r3, #1
 80020da:	121b      	asrs	r3, r3, #8
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	4618      	mov	r0, r3
 80020e0:	f000 fc6a 	bl	80029b8 <LCD_IO_WriteData8>
 80020e4:	88bb      	ldrh	r3, [r7, #4]
 80020e6:	b2da      	uxtb	r2, r3
 80020e8:	883b      	ldrh	r3, [r7, #0]
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	4413      	add	r3, r2
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	3b01      	subs	r3, #1
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	4618      	mov	r0, r3
 80020f6:	f000 fc5f 	bl	80029b8 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8DataFill16(ILI9341_RAMWR, RGBCode, Xsize * Ysize);
 80020fa:	887b      	ldrh	r3, [r7, #2]
 80020fc:	883a      	ldrh	r2, [r7, #0]
 80020fe:	fb02 f303 	mul.w	r3, r2, r3
 8002102:	461a      	mov	r2, r3
 8002104:	8b3b      	ldrh	r3, [r7, #24]
 8002106:	4619      	mov	r1, r3
 8002108:	202c      	movs	r0, #44	; 0x2c
 800210a:	f000 fc81 	bl	8002a10 <LCD_IO_WriteCmd8DataFill16>
  ILI9341_LCDMUTEX_POP();
}
 800210e:	bf00      	nop
 8002110:	370c      	adds	r7, #12
 8002112:	46bd      	mov	sp, r7
 8002114:	bd90      	pop	{r4, r7, pc}

08002116 <ili9341_WriteChar>:
  * @param  fonto: font select (from font.h)
  * @param  RGB_Coder: Text Color
  * @param  RGB_bg: Char background Color
  * @retval None
  */
void ili9341_WriteChar(uint16_t Xpo, uint16_t Ypo, const char *chr,sFONT fonto, uint16_t RGB_Coder, uint16_t RGB_bg){
 8002116:	b082      	sub	sp, #8
 8002118:	b580      	push	{r7, lr}
 800211a:	b08a      	sub	sp, #40	; 0x28
 800211c:	af00      	add	r7, sp, #0
 800211e:	603a      	str	r2, [r7, #0]
 8002120:	637b      	str	r3, [r7, #52]	; 0x34
 8002122:	4603      	mov	r3, r0
 8002124:	80fb      	strh	r3, [r7, #6]
 8002126:	460b      	mov	r3, r1
 8002128:	80bb      	strh	r3, [r7, #4]
	/*ex
	 * ili9341_WriteChar(140, 50, "E", Font24, cl_ORANGE, cl_BLACK);
	 * */
	//// stored font data
	uint32_t hop32 = 0;
 800212a:	2300      	movs	r3, #0
 800212c:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t b8[4] = {0};
 800212e:	2300      	movs	r3, #0
 8002130:	60fb      	str	r3, [r7, #12]
	 * c = i * rowbox -> jump to next column in next i rowloop
	 * k => jump to next row in that column
	 * */

	//// find num of bit rows per jump in fonts.c
	int rowbox = ceilf((float)(fonto.Width) / 8);
 8002132:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002134:	ee07 3a90 	vmov	s15, r3
 8002138:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800213c:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8002140:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002144:	eeb0 0a47 	vmov.f32	s0, s14
 8002148:	f007 fd3c 	bl	8009bc4 <ceilf>
 800214c:	eef0 7a40 	vmov.f32	s15, s0
 8002150:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002154:	ee17 3a90 	vmov	r3, s15
 8002158:	617b      	str	r3, [r7, #20]

	//// choose MSB check pos for each font size
	//// 0x80 , 0x8000 , 0x 800000
	uint32_t clif_msb = 0x80 << (8 * (rowbox - 1));
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	3b01      	subs	r3, #1
 800215e:	00db      	lsls	r3, r3, #3
 8002160:	2280      	movs	r2, #128	; 0x80
 8002162:	fa02 f303 	lsl.w	r3, r2, r3
 8002166:	613b      	str	r3, [r7, #16]

	//// -32 to offset sync ASCII Table start " " at 32
	//// double for loop as one char table
	for(int i = 0; i < fonto.Height; i++){
 8002168:	2300      	movs	r3, #0
 800216a:	623b      	str	r3, [r7, #32]
 800216c:	e060      	b.n	8002230 <ili9341_WriteChar+0x11a>
		hop32 = 0;
 800216e:	2300      	movs	r3, #0
 8002170:	627b      	str	r3, [r7, #36]	; 0x24
		for(int k = 0;k < rowbox;k++){
 8002172:	2300      	movs	r3, #0
 8002174:	61fb      	str	r3, [r7, #28]
 8002176:	e024      	b.n	80021c2 <ili9341_WriteChar+0xac>
			b8[k] = fonto.table[((int)(*chr - 32) * fonto.Height * rowbox) + (i * rowbox) + k];
 8002178:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800217a:	683a      	ldr	r2, [r7, #0]
 800217c:	7812      	ldrb	r2, [r2, #0]
 800217e:	3a20      	subs	r2, #32
 8002180:	8f79      	ldrh	r1, [r7, #58]	; 0x3a
 8002182:	fb01 f202 	mul.w	r2, r1, r2
 8002186:	6979      	ldr	r1, [r7, #20]
 8002188:	fb02 f101 	mul.w	r1, r2, r1
 800218c:	6a3a      	ldr	r2, [r7, #32]
 800218e:	6978      	ldr	r0, [r7, #20]
 8002190:	fb00 f202 	mul.w	r2, r0, r2
 8002194:	4411      	add	r1, r2
 8002196:	69fa      	ldr	r2, [r7, #28]
 8002198:	440a      	add	r2, r1
 800219a:	4413      	add	r3, r2
 800219c:	7819      	ldrb	r1, [r3, #0]
 800219e:	f107 020c 	add.w	r2, r7, #12
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	4413      	add	r3, r2
 80021a6:	460a      	mov	r2, r1
 80021a8:	701a      	strb	r2, [r3, #0]
			hop32 = (hop32 << 8) + b8[k];
 80021aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ac:	021b      	lsls	r3, r3, #8
 80021ae:	f107 010c 	add.w	r1, r7, #12
 80021b2:	69fa      	ldr	r2, [r7, #28]
 80021b4:	440a      	add	r2, r1
 80021b6:	7812      	ldrb	r2, [r2, #0]
 80021b8:	4413      	add	r3, r2
 80021ba:	627b      	str	r3, [r7, #36]	; 0x24
		for(int k = 0;k < rowbox;k++){
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	3301      	adds	r3, #1
 80021c0:	61fb      	str	r3, [r7, #28]
 80021c2:	69fa      	ldr	r2, [r7, #28]
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	429a      	cmp	r2, r3
 80021c8:	dbd6      	blt.n	8002178 <ili9341_WriteChar+0x62>
		}

		for(int j = 0; j < fonto.Width; j++){
 80021ca:	2300      	movs	r3, #0
 80021cc:	61bb      	str	r3, [r7, #24]
 80021ce:	e027      	b.n	8002220 <ili9341_WriteChar+0x10a>
			//// if valuein fonttable is 1
			if((hop32 << j) & clif_msb){ // buu32.b32
 80021d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	409a      	lsls	r2, r3
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	4013      	ands	r3, r2
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d00e      	beq.n	80021fc <ili9341_WriteChar+0xe6>
				ili9341_WritePixel(Xpo + j, Ypo + i, RGB_Coder);
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	b29a      	uxth	r2, r3
 80021e2:	88fb      	ldrh	r3, [r7, #6]
 80021e4:	4413      	add	r3, r2
 80021e6:	b298      	uxth	r0, r3
 80021e8:	6a3b      	ldr	r3, [r7, #32]
 80021ea:	b29a      	uxth	r2, r3
 80021ec:	88bb      	ldrh	r3, [r7, #4]
 80021ee:	4413      	add	r3, r2
 80021f0:	b29b      	uxth	r3, r3
 80021f2:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 80021f4:	4619      	mov	r1, r3
 80021f6:	f7ff fee1 	bl	8001fbc <ili9341_WritePixel>
 80021fa:	e00e      	b.n	800221a <ili9341_WriteChar+0x104>
			}
			//// for background write
			else{
				ili9341_WritePixel(Xpo + j, Ypo + i, RGB_bg);
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	b29a      	uxth	r2, r3
 8002200:	88fb      	ldrh	r3, [r7, #6]
 8002202:	4413      	add	r3, r2
 8002204:	b298      	uxth	r0, r3
 8002206:	6a3b      	ldr	r3, [r7, #32]
 8002208:	b29a      	uxth	r2, r3
 800220a:	88bb      	ldrh	r3, [r7, #4]
 800220c:	4413      	add	r3, r2
 800220e:	b29b      	uxth	r3, r3
 8002210:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8002214:	4619      	mov	r1, r3
 8002216:	f7ff fed1 	bl	8001fbc <ili9341_WritePixel>
		for(int j = 0; j < fonto.Width; j++){
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	3301      	adds	r3, #1
 800221e:	61bb      	str	r3, [r7, #24]
 8002220:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002222:	461a      	mov	r2, r3
 8002224:	69bb      	ldr	r3, [r7, #24]
 8002226:	4293      	cmp	r3, r2
 8002228:	dbd2      	blt.n	80021d0 <ili9341_WriteChar+0xba>
	for(int i = 0; i < fonto.Height; i++){
 800222a:	6a3b      	ldr	r3, [r7, #32]
 800222c:	3301      	adds	r3, #1
 800222e:	623b      	str	r3, [r7, #32]
 8002230:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8002232:	461a      	mov	r2, r3
 8002234:	6a3b      	ldr	r3, [r7, #32]
 8002236:	4293      	cmp	r3, r2
 8002238:	db99      	blt.n	800216e <ili9341_WriteChar+0x58>
			}

		}
	}
}
 800223a:	bf00      	nop
 800223c:	bf00      	nop
 800223e:	3728      	adds	r7, #40	; 0x28
 8002240:	46bd      	mov	sp, r7
 8002242:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002246:	b002      	add	sp, #8
 8002248:	4770      	bx	lr

0800224a <ili9341_WriteString>:
  * @param  fonto: font select (from font.h)
  * @param  RGB_Coder: Text Color
  * @param  RGB_bg: Text background Color
  * @retval None
  */
void ili9341_WriteString(uint16_t Xpo, uint16_t Ypo,const char* strr,sFONT fonto, uint16_t RGB_Coder, uint16_t RGB_bg){
 800224a:	b082      	sub	sp, #8
 800224c:	b580      	push	{r7, lr}
 800224e:	b088      	sub	sp, #32
 8002250:	af04      	add	r7, sp, #16
 8002252:	603a      	str	r2, [r7, #0]
 8002254:	61fb      	str	r3, [r7, #28]
 8002256:	4603      	mov	r3, r0
 8002258:	80fb      	strh	r3, [r7, #6]
 800225a:	460b      	mov	r3, r1
 800225c:	80bb      	strh	r3, [r7, #4]
	/*ex
	 * ili9341_WriteString(20, 300, "Helios xTerra", Font20, cl_WHITE, cl_BLACK);
	 * */
	uint16_t ili_heigh = ili9341_GetLcdPixelHeight();
 800225e:	f7ff fdd6 	bl	8001e0e <ili9341_GetLcdPixelHeight>
 8002262:	4603      	mov	r3, r0
 8002264:	81fb      	strh	r3, [r7, #14]
	uint16_t ili_width = ili9341_GetLcdPixelWidth();
 8002266:	f7ff fdc9 	bl	8001dfc <ili9341_GetLcdPixelWidth>
 800226a:	4603      	mov	r3, r0
 800226c:	81bb      	strh	r3, [r7, #12]
	while(*strr){
 800226e:	e02c      	b.n	80022ca <ili9341_WriteString+0x80>
	//// Check screen overflow / new line
		if(Xpo + fonto.Width >= ili_width){
 8002270:	88fb      	ldrh	r3, [r7, #6]
 8002272:	8c3a      	ldrh	r2, [r7, #32]
 8002274:	441a      	add	r2, r3
 8002276:	89bb      	ldrh	r3, [r7, #12]
 8002278:	429a      	cmp	r2, r3
 800227a:	db13      	blt.n	80022a4 <ili9341_WriteString+0x5a>
			Xpo = 0;
 800227c:	2300      	movs	r3, #0
 800227e:	80fb      	strh	r3, [r7, #6]
			Ypo += fonto.Height;
 8002280:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8002282:	88bb      	ldrh	r3, [r7, #4]
 8002284:	4413      	add	r3, r2
 8002286:	80bb      	strh	r3, [r7, #4]

			if(Ypo + fonto.Height >= ili_heigh){
 8002288:	88bb      	ldrh	r3, [r7, #4]
 800228a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800228c:	441a      	add	r2, r3
 800228e:	89fb      	ldrh	r3, [r7, #14]
 8002290:	429a      	cmp	r2, r3
 8002292:	da1f      	bge.n	80022d4 <ili9341_WriteString+0x8a>
				break;
			}

			if(*strr == ' ') {
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	2b20      	cmp	r3, #32
 800229a:	d103      	bne.n	80022a4 <ili9341_WriteString+0x5a>
				// skip spaces in the beginning of the new line
				strr++;
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	3301      	adds	r3, #1
 80022a0:	603b      	str	r3, [r7, #0]
				continue;
 80022a2:	e012      	b.n	80022ca <ili9341_WriteString+0x80>
			}
		}
		//ST7735_WriteChar(x, y, *str, font, color, bgcolor);
		ili9341_WriteChar(Xpo, Ypo, strr, fonto, RGB_Coder, RGB_bg);
 80022a4:	88b9      	ldrh	r1, [r7, #4]
 80022a6:	88f8      	ldrh	r0, [r7, #6]
 80022a8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80022aa:	9302      	str	r3, [sp, #8]
 80022ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80022ae:	9301      	str	r3, [sp, #4]
 80022b0:	6a3b      	ldr	r3, [r7, #32]
 80022b2:	9300      	str	r3, [sp, #0]
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	683a      	ldr	r2, [r7, #0]
 80022b8:	f7ff ff2d 	bl	8002116 <ili9341_WriteChar>
		Xpo += fonto.Width;
 80022bc:	8c3a      	ldrh	r2, [r7, #32]
 80022be:	88fb      	ldrh	r3, [r7, #6]
 80022c0:	4413      	add	r3, r2
 80022c2:	80fb      	strh	r3, [r7, #6]
		strr++;
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	3301      	adds	r3, #1
 80022c8:	603b      	str	r3, [r7, #0]
	while(*strr){
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d1ce      	bne.n	8002270 <ili9341_WriteString+0x26>
	}
}
 80022d2:	e000      	b.n	80022d6 <ili9341_WriteString+0x8c>
				break;
 80022d4:	bf00      	nop
}
 80022d6:	bf00      	nop
 80022d8:	3710      	adds	r7, #16
 80022da:	46bd      	mov	sp, r7
 80022dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80022e0:	b002      	add	sp, #8
 80022e2:	4770      	bx	lr

080022e4 <LcdWrite8>:

#define LCD_WRITE_CLK         GPIOX_ODR(LCD_SCK) = 0; LCD_WRITE_DELAY; GPIOX_ODR(LCD_SCK) = 1;
#define LCD_READ_CLK          GPIOX_ODR(LCD_SCK) = 1; GPIOX_ODR(LCD_SCK) = 0; LCD_READ_DELAY;

void LcdWrite8(uint8_t d8)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	4603      	mov	r3, r0
 80022ec:	71fb      	strb	r3, [r7, #7]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 7);
 80022ee:	1dfb      	adds	r3, r7, #7
 80022f0:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80022f4:	1dfb      	adds	r3, r7, #7
 80022f6:	015b      	lsls	r3, r3, #5
 80022f8:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80022fc:	f023 031f 	bic.w	r3, r3, #31
 8002300:	4313      	orrs	r3, r2
 8002302:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002306:	331c      	adds	r3, #28
 8002308:	4a5f      	ldr	r2, [pc, #380]	; (8002488 <LcdWrite8+0x1a4>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 800230e:	4b5f      	ldr	r3, [pc, #380]	; (800248c <LcdWrite8+0x1a8>)
 8002310:	2200      	movs	r2, #0
 8002312:	601a      	str	r2, [r3, #0]
 8002314:	4b5d      	ldr	r3, [pc, #372]	; (800248c <LcdWrite8+0x1a8>)
 8002316:	2200      	movs	r2, #0
 8002318:	601a      	str	r2, [r3, #0]
 800231a:	4b5c      	ldr	r3, [pc, #368]	; (800248c <LcdWrite8+0x1a8>)
 800231c:	2201      	movs	r2, #1
 800231e:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 6);
 8002320:	1dfb      	adds	r3, r7, #7
 8002322:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002326:	1dfb      	adds	r3, r7, #7
 8002328:	015b      	lsls	r3, r3, #5
 800232a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 800232e:	f023 031f 	bic.w	r3, r3, #31
 8002332:	4313      	orrs	r3, r2
 8002334:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002338:	3318      	adds	r3, #24
 800233a:	4a53      	ldr	r2, [pc, #332]	; (8002488 <LcdWrite8+0x1a4>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8002340:	4b52      	ldr	r3, [pc, #328]	; (800248c <LcdWrite8+0x1a8>)
 8002342:	2200      	movs	r2, #0
 8002344:	601a      	str	r2, [r3, #0]
 8002346:	4b51      	ldr	r3, [pc, #324]	; (800248c <LcdWrite8+0x1a8>)
 8002348:	2200      	movs	r2, #0
 800234a:	601a      	str	r2, [r3, #0]
 800234c:	4b4f      	ldr	r3, [pc, #316]	; (800248c <LcdWrite8+0x1a8>)
 800234e:	2201      	movs	r2, #1
 8002350:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 5);
 8002352:	1dfb      	adds	r3, r7, #7
 8002354:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002358:	1dfb      	adds	r3, r7, #7
 800235a:	015b      	lsls	r3, r3, #5
 800235c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002360:	f023 031f 	bic.w	r3, r3, #31
 8002364:	4313      	orrs	r3, r2
 8002366:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800236a:	3314      	adds	r3, #20
 800236c:	4a46      	ldr	r2, [pc, #280]	; (8002488 <LcdWrite8+0x1a4>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8002372:	4b46      	ldr	r3, [pc, #280]	; (800248c <LcdWrite8+0x1a8>)
 8002374:	2200      	movs	r2, #0
 8002376:	601a      	str	r2, [r3, #0]
 8002378:	4b44      	ldr	r3, [pc, #272]	; (800248c <LcdWrite8+0x1a8>)
 800237a:	2200      	movs	r2, #0
 800237c:	601a      	str	r2, [r3, #0]
 800237e:	4b43      	ldr	r3, [pc, #268]	; (800248c <LcdWrite8+0x1a8>)
 8002380:	2201      	movs	r2, #1
 8002382:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 4);
 8002384:	1dfb      	adds	r3, r7, #7
 8002386:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800238a:	1dfb      	adds	r3, r7, #7
 800238c:	015b      	lsls	r3, r3, #5
 800238e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002392:	f023 031f 	bic.w	r3, r3, #31
 8002396:	4313      	orrs	r3, r2
 8002398:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800239c:	3310      	adds	r3, #16
 800239e:	4a3a      	ldr	r2, [pc, #232]	; (8002488 <LcdWrite8+0x1a4>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 80023a4:	4b39      	ldr	r3, [pc, #228]	; (800248c <LcdWrite8+0x1a8>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	601a      	str	r2, [r3, #0]
 80023aa:	4b38      	ldr	r3, [pc, #224]	; (800248c <LcdWrite8+0x1a8>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	601a      	str	r2, [r3, #0]
 80023b0:	4b36      	ldr	r3, [pc, #216]	; (800248c <LcdWrite8+0x1a8>)
 80023b2:	2201      	movs	r2, #1
 80023b4:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 3);
 80023b6:	1dfb      	adds	r3, r7, #7
 80023b8:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80023bc:	1dfb      	adds	r3, r7, #7
 80023be:	015b      	lsls	r3, r3, #5
 80023c0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80023c4:	f023 031f 	bic.w	r3, r3, #31
 80023c8:	4313      	orrs	r3, r2
 80023ca:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80023ce:	330c      	adds	r3, #12
 80023d0:	4a2d      	ldr	r2, [pc, #180]	; (8002488 <LcdWrite8+0x1a4>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 80023d6:	4b2d      	ldr	r3, [pc, #180]	; (800248c <LcdWrite8+0x1a8>)
 80023d8:	2200      	movs	r2, #0
 80023da:	601a      	str	r2, [r3, #0]
 80023dc:	4b2b      	ldr	r3, [pc, #172]	; (800248c <LcdWrite8+0x1a8>)
 80023de:	2200      	movs	r2, #0
 80023e0:	601a      	str	r2, [r3, #0]
 80023e2:	4b2a      	ldr	r3, [pc, #168]	; (800248c <LcdWrite8+0x1a8>)
 80023e4:	2201      	movs	r2, #1
 80023e6:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 2);
 80023e8:	1dfb      	adds	r3, r7, #7
 80023ea:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80023ee:	1dfb      	adds	r3, r7, #7
 80023f0:	015b      	lsls	r3, r3, #5
 80023f2:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80023f6:	f023 031f 	bic.w	r3, r3, #31
 80023fa:	4313      	orrs	r3, r2
 80023fc:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002400:	3308      	adds	r3, #8
 8002402:	4a21      	ldr	r2, [pc, #132]	; (8002488 <LcdWrite8+0x1a4>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8002408:	4b20      	ldr	r3, [pc, #128]	; (800248c <LcdWrite8+0x1a8>)
 800240a:	2200      	movs	r2, #0
 800240c:	601a      	str	r2, [r3, #0]
 800240e:	4b1f      	ldr	r3, [pc, #124]	; (800248c <LcdWrite8+0x1a8>)
 8002410:	2200      	movs	r2, #0
 8002412:	601a      	str	r2, [r3, #0]
 8002414:	4b1d      	ldr	r3, [pc, #116]	; (800248c <LcdWrite8+0x1a8>)
 8002416:	2201      	movs	r2, #1
 8002418:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 1);
 800241a:	1dfb      	adds	r3, r7, #7
 800241c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002420:	1dfb      	adds	r3, r7, #7
 8002422:	015b      	lsls	r3, r3, #5
 8002424:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002428:	f023 031f 	bic.w	r3, r3, #31
 800242c:	4313      	orrs	r3, r2
 800242e:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002432:	3304      	adds	r3, #4
 8002434:	4a14      	ldr	r2, [pc, #80]	; (8002488 <LcdWrite8+0x1a4>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 800243a:	4b14      	ldr	r3, [pc, #80]	; (800248c <LcdWrite8+0x1a8>)
 800243c:	2200      	movs	r2, #0
 800243e:	601a      	str	r2, [r3, #0]
 8002440:	4b12      	ldr	r3, [pc, #72]	; (800248c <LcdWrite8+0x1a8>)
 8002442:	2200      	movs	r2, #0
 8002444:	601a      	str	r2, [r3, #0]
 8002446:	4b11      	ldr	r3, [pc, #68]	; (800248c <LcdWrite8+0x1a8>)
 8002448:	2201      	movs	r2, #1
 800244a:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 0);
 800244c:	1dfb      	adds	r3, r7, #7
 800244e:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002452:	1dfb      	adds	r3, r7, #7
 8002454:	015b      	lsls	r3, r3, #5
 8002456:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 800245a:	f023 031f 	bic.w	r3, r3, #31
 800245e:	4313      	orrs	r3, r2
 8002460:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002464:	4a08      	ldr	r2, [pc, #32]	; (8002488 <LcdWrite8+0x1a4>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 800246a:	4b08      	ldr	r3, [pc, #32]	; (800248c <LcdWrite8+0x1a8>)
 800246c:	2200      	movs	r2, #0
 800246e:	601a      	str	r2, [r3, #0]
 8002470:	4b06      	ldr	r3, [pc, #24]	; (800248c <LcdWrite8+0x1a8>)
 8002472:	2200      	movs	r2, #0
 8002474:	601a      	str	r2, [r3, #0]
 8002476:	4b05      	ldr	r3, [pc, #20]	; (800248c <LcdWrite8+0x1a8>)
 8002478:	2201      	movs	r2, #1
 800247a:	601a      	str	r2, [r3, #0]
}
 800247c:	bf00      	nop
 800247e:	370c      	adds	r7, #12
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr
 8002488:	4241028c 	.word	0x4241028c
 800248c:	424082a8 	.word	0x424082a8

08002490 <LcdWrite16>:

void LcdWrite16(uint16_t d16)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	4603      	mov	r3, r0
 8002498:	80fb      	strh	r3, [r7, #6]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 15);
 800249a:	1dbb      	adds	r3, r7, #6
 800249c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80024a0:	1dbb      	adds	r3, r7, #6
 80024a2:	015b      	lsls	r3, r3, #5
 80024a4:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80024a8:	f023 031f 	bic.w	r3, r3, #31
 80024ac:	4313      	orrs	r3, r2
 80024ae:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80024b2:	333c      	adds	r3, #60	; 0x3c
 80024b4:	4aba      	ldr	r2, [pc, #744]	; (80027a0 <LcdWrite16+0x310>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 80024ba:	4bba      	ldr	r3, [pc, #744]	; (80027a4 <LcdWrite16+0x314>)
 80024bc:	2200      	movs	r2, #0
 80024be:	601a      	str	r2, [r3, #0]
 80024c0:	4bb8      	ldr	r3, [pc, #736]	; (80027a4 <LcdWrite16+0x314>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	601a      	str	r2, [r3, #0]
 80024c6:	4bb7      	ldr	r3, [pc, #732]	; (80027a4 <LcdWrite16+0x314>)
 80024c8:	2201      	movs	r2, #1
 80024ca:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 14);
 80024cc:	1dbb      	adds	r3, r7, #6
 80024ce:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80024d2:	1dbb      	adds	r3, r7, #6
 80024d4:	015b      	lsls	r3, r3, #5
 80024d6:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80024da:	f023 031f 	bic.w	r3, r3, #31
 80024de:	4313      	orrs	r3, r2
 80024e0:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80024e4:	3338      	adds	r3, #56	; 0x38
 80024e6:	4aae      	ldr	r2, [pc, #696]	; (80027a0 <LcdWrite16+0x310>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 80024ec:	4bad      	ldr	r3, [pc, #692]	; (80027a4 <LcdWrite16+0x314>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	601a      	str	r2, [r3, #0]
 80024f2:	4bac      	ldr	r3, [pc, #688]	; (80027a4 <LcdWrite16+0x314>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	601a      	str	r2, [r3, #0]
 80024f8:	4baa      	ldr	r3, [pc, #680]	; (80027a4 <LcdWrite16+0x314>)
 80024fa:	2201      	movs	r2, #1
 80024fc:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 13);
 80024fe:	1dbb      	adds	r3, r7, #6
 8002500:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002504:	1dbb      	adds	r3, r7, #6
 8002506:	015b      	lsls	r3, r3, #5
 8002508:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 800250c:	f023 031f 	bic.w	r3, r3, #31
 8002510:	4313      	orrs	r3, r2
 8002512:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002516:	3334      	adds	r3, #52	; 0x34
 8002518:	4aa1      	ldr	r2, [pc, #644]	; (80027a0 <LcdWrite16+0x310>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 800251e:	4ba1      	ldr	r3, [pc, #644]	; (80027a4 <LcdWrite16+0x314>)
 8002520:	2200      	movs	r2, #0
 8002522:	601a      	str	r2, [r3, #0]
 8002524:	4b9f      	ldr	r3, [pc, #636]	; (80027a4 <LcdWrite16+0x314>)
 8002526:	2200      	movs	r2, #0
 8002528:	601a      	str	r2, [r3, #0]
 800252a:	4b9e      	ldr	r3, [pc, #632]	; (80027a4 <LcdWrite16+0x314>)
 800252c:	2201      	movs	r2, #1
 800252e:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 12);
 8002530:	1dbb      	adds	r3, r7, #6
 8002532:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002536:	1dbb      	adds	r3, r7, #6
 8002538:	015b      	lsls	r3, r3, #5
 800253a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 800253e:	f023 031f 	bic.w	r3, r3, #31
 8002542:	4313      	orrs	r3, r2
 8002544:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002548:	3330      	adds	r3, #48	; 0x30
 800254a:	4a95      	ldr	r2, [pc, #596]	; (80027a0 <LcdWrite16+0x310>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8002550:	4b94      	ldr	r3, [pc, #592]	; (80027a4 <LcdWrite16+0x314>)
 8002552:	2200      	movs	r2, #0
 8002554:	601a      	str	r2, [r3, #0]
 8002556:	4b93      	ldr	r3, [pc, #588]	; (80027a4 <LcdWrite16+0x314>)
 8002558:	2200      	movs	r2, #0
 800255a:	601a      	str	r2, [r3, #0]
 800255c:	4b91      	ldr	r3, [pc, #580]	; (80027a4 <LcdWrite16+0x314>)
 800255e:	2201      	movs	r2, #1
 8002560:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 11);
 8002562:	1dbb      	adds	r3, r7, #6
 8002564:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002568:	1dbb      	adds	r3, r7, #6
 800256a:	015b      	lsls	r3, r3, #5
 800256c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002570:	f023 031f 	bic.w	r3, r3, #31
 8002574:	4313      	orrs	r3, r2
 8002576:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800257a:	332c      	adds	r3, #44	; 0x2c
 800257c:	4a88      	ldr	r2, [pc, #544]	; (80027a0 <LcdWrite16+0x310>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8002582:	4b88      	ldr	r3, [pc, #544]	; (80027a4 <LcdWrite16+0x314>)
 8002584:	2200      	movs	r2, #0
 8002586:	601a      	str	r2, [r3, #0]
 8002588:	4b86      	ldr	r3, [pc, #536]	; (80027a4 <LcdWrite16+0x314>)
 800258a:	2200      	movs	r2, #0
 800258c:	601a      	str	r2, [r3, #0]
 800258e:	4b85      	ldr	r3, [pc, #532]	; (80027a4 <LcdWrite16+0x314>)
 8002590:	2201      	movs	r2, #1
 8002592:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 10);
 8002594:	1dbb      	adds	r3, r7, #6
 8002596:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800259a:	1dbb      	adds	r3, r7, #6
 800259c:	015b      	lsls	r3, r3, #5
 800259e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80025a2:	f023 031f 	bic.w	r3, r3, #31
 80025a6:	4313      	orrs	r3, r2
 80025a8:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80025ac:	3328      	adds	r3, #40	; 0x28
 80025ae:	4a7c      	ldr	r2, [pc, #496]	; (80027a0 <LcdWrite16+0x310>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 80025b4:	4b7b      	ldr	r3, [pc, #492]	; (80027a4 <LcdWrite16+0x314>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	601a      	str	r2, [r3, #0]
 80025ba:	4b7a      	ldr	r3, [pc, #488]	; (80027a4 <LcdWrite16+0x314>)
 80025bc:	2200      	movs	r2, #0
 80025be:	601a      	str	r2, [r3, #0]
 80025c0:	4b78      	ldr	r3, [pc, #480]	; (80027a4 <LcdWrite16+0x314>)
 80025c2:	2201      	movs	r2, #1
 80025c4:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 9);
 80025c6:	1dbb      	adds	r3, r7, #6
 80025c8:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80025cc:	1dbb      	adds	r3, r7, #6
 80025ce:	015b      	lsls	r3, r3, #5
 80025d0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80025d4:	f023 031f 	bic.w	r3, r3, #31
 80025d8:	4313      	orrs	r3, r2
 80025da:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80025de:	3324      	adds	r3, #36	; 0x24
 80025e0:	4a6f      	ldr	r2, [pc, #444]	; (80027a0 <LcdWrite16+0x310>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 80025e6:	4b6f      	ldr	r3, [pc, #444]	; (80027a4 <LcdWrite16+0x314>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	601a      	str	r2, [r3, #0]
 80025ec:	4b6d      	ldr	r3, [pc, #436]	; (80027a4 <LcdWrite16+0x314>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	601a      	str	r2, [r3, #0]
 80025f2:	4b6c      	ldr	r3, [pc, #432]	; (80027a4 <LcdWrite16+0x314>)
 80025f4:	2201      	movs	r2, #1
 80025f6:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 8);
 80025f8:	1dbb      	adds	r3, r7, #6
 80025fa:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80025fe:	1dbb      	adds	r3, r7, #6
 8002600:	015b      	lsls	r3, r3, #5
 8002602:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002606:	f023 031f 	bic.w	r3, r3, #31
 800260a:	4313      	orrs	r3, r2
 800260c:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002610:	3320      	adds	r3, #32
 8002612:	4a63      	ldr	r2, [pc, #396]	; (80027a0 <LcdWrite16+0x310>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8002618:	4b62      	ldr	r3, [pc, #392]	; (80027a4 <LcdWrite16+0x314>)
 800261a:	2200      	movs	r2, #0
 800261c:	601a      	str	r2, [r3, #0]
 800261e:	4b61      	ldr	r3, [pc, #388]	; (80027a4 <LcdWrite16+0x314>)
 8002620:	2200      	movs	r2, #0
 8002622:	601a      	str	r2, [r3, #0]
 8002624:	4b5f      	ldr	r3, [pc, #380]	; (80027a4 <LcdWrite16+0x314>)
 8002626:	2201      	movs	r2, #1
 8002628:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 7);
 800262a:	1dbb      	adds	r3, r7, #6
 800262c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002630:	1dbb      	adds	r3, r7, #6
 8002632:	015b      	lsls	r3, r3, #5
 8002634:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002638:	f023 031f 	bic.w	r3, r3, #31
 800263c:	4313      	orrs	r3, r2
 800263e:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002642:	331c      	adds	r3, #28
 8002644:	4a56      	ldr	r2, [pc, #344]	; (80027a0 <LcdWrite16+0x310>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 800264a:	4b56      	ldr	r3, [pc, #344]	; (80027a4 <LcdWrite16+0x314>)
 800264c:	2200      	movs	r2, #0
 800264e:	601a      	str	r2, [r3, #0]
 8002650:	4b54      	ldr	r3, [pc, #336]	; (80027a4 <LcdWrite16+0x314>)
 8002652:	2200      	movs	r2, #0
 8002654:	601a      	str	r2, [r3, #0]
 8002656:	4b53      	ldr	r3, [pc, #332]	; (80027a4 <LcdWrite16+0x314>)
 8002658:	2201      	movs	r2, #1
 800265a:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 6);
 800265c:	1dbb      	adds	r3, r7, #6
 800265e:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002662:	1dbb      	adds	r3, r7, #6
 8002664:	015b      	lsls	r3, r3, #5
 8002666:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 800266a:	f023 031f 	bic.w	r3, r3, #31
 800266e:	4313      	orrs	r3, r2
 8002670:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002674:	3318      	adds	r3, #24
 8002676:	4a4a      	ldr	r2, [pc, #296]	; (80027a0 <LcdWrite16+0x310>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 800267c:	4b49      	ldr	r3, [pc, #292]	; (80027a4 <LcdWrite16+0x314>)
 800267e:	2200      	movs	r2, #0
 8002680:	601a      	str	r2, [r3, #0]
 8002682:	4b48      	ldr	r3, [pc, #288]	; (80027a4 <LcdWrite16+0x314>)
 8002684:	2200      	movs	r2, #0
 8002686:	601a      	str	r2, [r3, #0]
 8002688:	4b46      	ldr	r3, [pc, #280]	; (80027a4 <LcdWrite16+0x314>)
 800268a:	2201      	movs	r2, #1
 800268c:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 5);
 800268e:	1dbb      	adds	r3, r7, #6
 8002690:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002694:	1dbb      	adds	r3, r7, #6
 8002696:	015b      	lsls	r3, r3, #5
 8002698:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 800269c:	f023 031f 	bic.w	r3, r3, #31
 80026a0:	4313      	orrs	r3, r2
 80026a2:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80026a6:	3314      	adds	r3, #20
 80026a8:	4a3d      	ldr	r2, [pc, #244]	; (80027a0 <LcdWrite16+0x310>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 80026ae:	4b3d      	ldr	r3, [pc, #244]	; (80027a4 <LcdWrite16+0x314>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	601a      	str	r2, [r3, #0]
 80026b4:	4b3b      	ldr	r3, [pc, #236]	; (80027a4 <LcdWrite16+0x314>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	601a      	str	r2, [r3, #0]
 80026ba:	4b3a      	ldr	r3, [pc, #232]	; (80027a4 <LcdWrite16+0x314>)
 80026bc:	2201      	movs	r2, #1
 80026be:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 4);
 80026c0:	1dbb      	adds	r3, r7, #6
 80026c2:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80026c6:	1dbb      	adds	r3, r7, #6
 80026c8:	015b      	lsls	r3, r3, #5
 80026ca:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80026ce:	f023 031f 	bic.w	r3, r3, #31
 80026d2:	4313      	orrs	r3, r2
 80026d4:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80026d8:	3310      	adds	r3, #16
 80026da:	4a31      	ldr	r2, [pc, #196]	; (80027a0 <LcdWrite16+0x310>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 80026e0:	4b30      	ldr	r3, [pc, #192]	; (80027a4 <LcdWrite16+0x314>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	601a      	str	r2, [r3, #0]
 80026e6:	4b2f      	ldr	r3, [pc, #188]	; (80027a4 <LcdWrite16+0x314>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	601a      	str	r2, [r3, #0]
 80026ec:	4b2d      	ldr	r3, [pc, #180]	; (80027a4 <LcdWrite16+0x314>)
 80026ee:	2201      	movs	r2, #1
 80026f0:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 3);
 80026f2:	1dbb      	adds	r3, r7, #6
 80026f4:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80026f8:	1dbb      	adds	r3, r7, #6
 80026fa:	015b      	lsls	r3, r3, #5
 80026fc:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002700:	f023 031f 	bic.w	r3, r3, #31
 8002704:	4313      	orrs	r3, r2
 8002706:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800270a:	330c      	adds	r3, #12
 800270c:	4a24      	ldr	r2, [pc, #144]	; (80027a0 <LcdWrite16+0x310>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8002712:	4b24      	ldr	r3, [pc, #144]	; (80027a4 <LcdWrite16+0x314>)
 8002714:	2200      	movs	r2, #0
 8002716:	601a      	str	r2, [r3, #0]
 8002718:	4b22      	ldr	r3, [pc, #136]	; (80027a4 <LcdWrite16+0x314>)
 800271a:	2200      	movs	r2, #0
 800271c:	601a      	str	r2, [r3, #0]
 800271e:	4b21      	ldr	r3, [pc, #132]	; (80027a4 <LcdWrite16+0x314>)
 8002720:	2201      	movs	r2, #1
 8002722:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 2);
 8002724:	1dbb      	adds	r3, r7, #6
 8002726:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800272a:	1dbb      	adds	r3, r7, #6
 800272c:	015b      	lsls	r3, r3, #5
 800272e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002732:	f023 031f 	bic.w	r3, r3, #31
 8002736:	4313      	orrs	r3, r2
 8002738:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800273c:	3308      	adds	r3, #8
 800273e:	4a18      	ldr	r2, [pc, #96]	; (80027a0 <LcdWrite16+0x310>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8002744:	4b17      	ldr	r3, [pc, #92]	; (80027a4 <LcdWrite16+0x314>)
 8002746:	2200      	movs	r2, #0
 8002748:	601a      	str	r2, [r3, #0]
 800274a:	4b16      	ldr	r3, [pc, #88]	; (80027a4 <LcdWrite16+0x314>)
 800274c:	2200      	movs	r2, #0
 800274e:	601a      	str	r2, [r3, #0]
 8002750:	4b14      	ldr	r3, [pc, #80]	; (80027a4 <LcdWrite16+0x314>)
 8002752:	2201      	movs	r2, #1
 8002754:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 1);
 8002756:	1dbb      	adds	r3, r7, #6
 8002758:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800275c:	1dbb      	adds	r3, r7, #6
 800275e:	015b      	lsls	r3, r3, #5
 8002760:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002764:	f023 031f 	bic.w	r3, r3, #31
 8002768:	4313      	orrs	r3, r2
 800276a:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800276e:	3304      	adds	r3, #4
 8002770:	4a0b      	ldr	r2, [pc, #44]	; (80027a0 <LcdWrite16+0x310>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8002776:	4b0b      	ldr	r3, [pc, #44]	; (80027a4 <LcdWrite16+0x314>)
 8002778:	2200      	movs	r2, #0
 800277a:	601a      	str	r2, [r3, #0]
 800277c:	4b09      	ldr	r3, [pc, #36]	; (80027a4 <LcdWrite16+0x314>)
 800277e:	2200      	movs	r2, #0
 8002780:	601a      	str	r2, [r3, #0]
 8002782:	4b08      	ldr	r3, [pc, #32]	; (80027a4 <LcdWrite16+0x314>)
 8002784:	2201      	movs	r2, #1
 8002786:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 0);
 8002788:	1dbb      	adds	r3, r7, #6
 800278a:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800278e:	1dbb      	adds	r3, r7, #6
 8002790:	015b      	lsls	r3, r3, #5
 8002792:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002796:	f023 031f 	bic.w	r3, r3, #31
 800279a:	4313      	orrs	r3, r2
 800279c:	e004      	b.n	80027a8 <LcdWrite16+0x318>
 800279e:	bf00      	nop
 80027a0:	4241028c 	.word	0x4241028c
 80027a4:	424082a8 	.word	0x424082a8
 80027a8:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80027ac:	4a08      	ldr	r2, [pc, #32]	; (80027d0 <LcdWrite16+0x340>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 80027b2:	4b08      	ldr	r3, [pc, #32]	; (80027d4 <LcdWrite16+0x344>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	601a      	str	r2, [r3, #0]
 80027b8:	4b06      	ldr	r3, [pc, #24]	; (80027d4 <LcdWrite16+0x344>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	601a      	str	r2, [r3, #0]
 80027be:	4b05      	ldr	r3, [pc, #20]	; (80027d4 <LcdWrite16+0x344>)
 80027c0:	2201      	movs	r2, #1
 80027c2:	601a      	str	r2, [r3, #0]
}
 80027c4:	bf00      	nop
 80027c6:	370c      	adds	r7, #12
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr
 80027d0:	4241028c 	.word	0x4241028c
 80027d4:	424082a8 	.word	0x424082a8

080027d8 <LCD_IO_WriteMultiData8>:
#if DMANUM(LCD_DMA_TX) == 0 || LCD_SPI == 0

/* SPI TX no DMA */

void LCD_IO_WriteMultiData8(uint8_t * pData, uint32_t Size, uint32_t dinc)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	60b9      	str	r1, [r7, #8]
 80027e2:	607a      	str	r2, [r7, #4]
  while(Size--)
 80027e4:	e00a      	b.n	80027fc <LCD_IO_WriteMultiData8+0x24>
  {
    LcdWrite8(*pData);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	4618      	mov	r0, r3
 80027ec:	f7ff fd7a 	bl	80022e4 <LcdWrite8>
    if(dinc)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d002      	beq.n	80027fc <LCD_IO_WriteMultiData8+0x24>
      pData++;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	3301      	adds	r3, #1
 80027fa:	60fb      	str	r3, [r7, #12]
  while(Size--)
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	1e5a      	subs	r2, r3, #1
 8002800:	60ba      	str	r2, [r7, #8]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d1ef      	bne.n	80027e6 <LCD_IO_WriteMultiData8+0xe>
  }
  LCD_CS_OFF;
 8002806:	4b03      	ldr	r3, [pc, #12]	; (8002814 <LCD_IO_WriteMultiData8+0x3c>)
 8002808:	2201      	movs	r2, #1
 800280a:	601a      	str	r2, [r3, #0]
}
 800280c:	bf00      	nop
 800280e:	3710      	adds	r7, #16
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	424002a0 	.word	0x424002a0

08002818 <LCD_IO_WriteMultiData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteMultiData16(uint16_t * pData, uint32_t Size, uint32_t dinc)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	60b9      	str	r1, [r7, #8]
 8002822:	607a      	str	r2, [r7, #4]
  while(Size--)
 8002824:	e00a      	b.n	800283c <LCD_IO_WriteMultiData16+0x24>
  {
    LcdWrite16(*pData);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	881b      	ldrh	r3, [r3, #0]
 800282a:	4618      	mov	r0, r3
 800282c:	f7ff fe30 	bl	8002490 <LcdWrite16>
    if(dinc)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d002      	beq.n	800283c <LCD_IO_WriteMultiData16+0x24>
      pData++;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	3302      	adds	r3, #2
 800283a:	60fb      	str	r3, [r7, #12]
  while(Size--)
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	1e5a      	subs	r2, r3, #1
 8002840:	60ba      	str	r2, [r7, #8]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d1ef      	bne.n	8002826 <LCD_IO_WriteMultiData16+0xe>
  }
  LCD_CS_OFF;
 8002846:	4b03      	ldr	r3, [pc, #12]	; (8002854 <LCD_IO_WriteMultiData16+0x3c>)
 8002848:	2201      	movs	r2, #1
 800284a:	601a      	str	r2, [r3, #0]
}
 800284c:	bf00      	nop
 800284e:	3710      	adds	r7, #16
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}
 8002854:	424002a0 	.word	0x424002a0

08002858 <LCD_Delay>:

//=============================================================================
/* Public functions */

void LCD_Delay(uint32_t Delay)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f000 f9b7 	bl	8002bd4 <HAL_Delay>
}
 8002866:	bf00      	nop
 8002868:	3708      	adds	r7, #8
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}

0800286e <LCD_IO_Bl_OnOff>:

//-----------------------------------------------------------------------------
void LCD_IO_Bl_OnOff(uint8_t Bl)
{
 800286e:	b480      	push	{r7}
 8002870:	b083      	sub	sp, #12
 8002872:	af00      	add	r7, sp, #0
 8002874:	4603      	mov	r3, r0
 8002876:	71fb      	strb	r3, [r7, #7]
  if(Bl)
    GPIOX_ODR(LCD_BL) = LCD_BLON;
  else
    GPIOX_ODR(LCD_BL) = 1 - LCD_BLON;
  #endif
}
 8002878:	bf00      	nop
 800287a:	370c      	adds	r7, #12
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr

08002884 <LCD_IO_Init>:

//-----------------------------------------------------------------------------
void LCD_IO_Init(void)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	af00      	add	r7, sp, #0
  #define DMA1_CLOCK_RX         0
  #endif
  #endif  // #else LCD_SPI == 0

  /* GPIO, DMA Clocks */
  RCC->AHB1ENR |= GPIOX_CLOCK(LCD_RS) | GPIOX_CLOCK(LCD_CS) | GPIOX_CLOCK(LCD_SCK) | GPIOX_CLOCK(LCD_MOSI) |
 8002888:	4b34      	ldr	r3, [pc, #208]	; (800295c <LCD_IO_Init+0xd8>)
 800288a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288c:	4a33      	ldr	r2, [pc, #204]	; (800295c <LCD_IO_Init+0xd8>)
 800288e:	f043 0307 	orr.w	r3, r3, #7
 8002892:	6313      	str	r3, [r2, #48]	; 0x30
  LCD_IO_Bl_OnOff(1);
  #endif

  /* Reset pin = output, reset off */
  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A
  GPIOX_MODER(MODE_OUT, LCD_RST);
 8002894:	4b32      	ldr	r3, [pc, #200]	; (8002960 <LCD_IO_Init+0xdc>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800289c:	4a30      	ldr	r2, [pc, #192]	; (8002960 <LCD_IO_Init+0xdc>)
 800289e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028a2:	6013      	str	r3, [r2, #0]
  GPIOX_OSPEEDR(MODE_SPD_LOW, LCD_RST);
 80028a4:	4b2e      	ldr	r3, [pc, #184]	; (8002960 <LCD_IO_Init+0xdc>)
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	4a2d      	ldr	r2, [pc, #180]	; (8002960 <LCD_IO_Init+0xdc>)
 80028aa:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80028ae:	6093      	str	r3, [r2, #8]
  LCD_RST_OFF;
 80028b0:	4b2c      	ldr	r3, [pc, #176]	; (8002964 <LCD_IO_Init+0xe0>)
 80028b2:	2201      	movs	r2, #1
 80028b4:	601a      	str	r2, [r3, #0]
  #endif

  LCD_RS_DATA;
 80028b6:	4b2c      	ldr	r3, [pc, #176]	; (8002968 <LCD_IO_Init+0xe4>)
 80028b8:	2201      	movs	r2, #1
 80028ba:	601a      	str	r2, [r3, #0]
  LCD_CS_OFF;
 80028bc:	4b2b      	ldr	r3, [pc, #172]	; (800296c <LCD_IO_Init+0xe8>)
 80028be:	2201      	movs	r2, #1
 80028c0:	601a      	str	r2, [r3, #0]
  GPIOX_MODER(MODE_OUT, LCD_RS);
 80028c2:	4b2b      	ldr	r3, [pc, #172]	; (8002970 <LCD_IO_Init+0xec>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80028ca:	4a29      	ldr	r2, [pc, #164]	; (8002970 <LCD_IO_Init+0xec>)
 80028cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028d0:	6013      	str	r3, [r2, #0]
  GPIOX_MODER(MODE_OUT, LCD_CS);
 80028d2:	4b27      	ldr	r3, [pc, #156]	; (8002970 <LCD_IO_Init+0xec>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80028da:	4a25      	ldr	r2, [pc, #148]	; (8002970 <LCD_IO_Init+0xec>)
 80028dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028e0:	6013      	str	r3, [r2, #0]

  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_RS);
 80028e2:	4b23      	ldr	r3, [pc, #140]	; (8002970 <LCD_IO_Init+0xec>)
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	4a22      	ldr	r2, [pc, #136]	; (8002970 <LCD_IO_Init+0xec>)
 80028e8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80028ec:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_CS);
 80028ee:	4b20      	ldr	r3, [pc, #128]	; (8002970 <LCD_IO_Init+0xec>)
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	4a1f      	ldr	r2, [pc, #124]	; (8002970 <LCD_IO_Init+0xec>)
 80028f4:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 80028f8:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_SCK);
 80028fa:	4b19      	ldr	r3, [pc, #100]	; (8002960 <LCD_IO_Init+0xdc>)
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	4a18      	ldr	r2, [pc, #96]	; (8002960 <LCD_IO_Init+0xdc>)
 8002900:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8002904:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_MOSI);
 8002906:	4b1b      	ldr	r3, [pc, #108]	; (8002974 <LCD_IO_Init+0xf0>)
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	4a1a      	ldr	r2, [pc, #104]	; (8002974 <LCD_IO_Init+0xf0>)
 800290c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002910:	6093      	str	r3, [r2, #8]
  GPIOX_ODR(LCD_SCK) = 1;               // SCK = 1
 8002912:	4b19      	ldr	r3, [pc, #100]	; (8002978 <LCD_IO_Init+0xf4>)
 8002914:	2201      	movs	r2, #1
 8002916:	601a      	str	r2, [r3, #0]

  #if LCD_SPI == 0
  /* Software SPI */
  GPIOX_MODER(MODE_OUT, LCD_SCK);
 8002918:	4b11      	ldr	r3, [pc, #68]	; (8002960 <LCD_IO_Init+0xdc>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002920:	4a0f      	ldr	r2, [pc, #60]	; (8002960 <LCD_IO_Init+0xdc>)
 8002922:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002926:	6013      	str	r3, [r2, #0]
  GPIOX_MODER(MODE_OUT, LCD_MOSI);
 8002928:	4b12      	ldr	r3, [pc, #72]	; (8002974 <LCD_IO_Init+0xf0>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002930:	4a10      	ldr	r2, [pc, #64]	; (8002974 <LCD_IO_Init+0xf0>)
 8002932:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002936:	6013      	str	r3, [r2, #0]

  #endif // #else LCD_SPI == 0

  /* Set or Reset the control line */
  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A // reset
  LCD_Delay(10);
 8002938:	200a      	movs	r0, #10
 800293a:	f7ff ff8d 	bl	8002858 <LCD_Delay>
  LCD_RST_ON;
 800293e:	4b09      	ldr	r3, [pc, #36]	; (8002964 <LCD_IO_Init+0xe0>)
 8002940:	2200      	movs	r2, #0
 8002942:	601a      	str	r2, [r3, #0]
  LCD_Delay(10);
 8002944:	200a      	movs	r0, #10
 8002946:	f7ff ff87 	bl	8002858 <LCD_Delay>
  LCD_RST_OFF;
 800294a:	4b06      	ldr	r3, [pc, #24]	; (8002964 <LCD_IO_Init+0xe0>)
 800294c:	2201      	movs	r2, #1
 800294e:	601a      	str	r2, [r3, #0]
  #endif
  LCD_Delay(10);
 8002950:	200a      	movs	r0, #10
 8002952:	f7ff ff81 	bl	8002858 <LCD_Delay>
  osSemaphoreDef(spiDmaBinSem);
  spiDmaBinSemHandle = osSemaphoreCreate(osSemaphore(spiDmaBinSem), 1);
  osSemaphoreWait(spiDmaBinSemHandle, 1);
  #endif
  #endif  // #if DMANUM(LCD_DMA_RX) > 0
} // void LCD_IO_Init(void)
 8002956:	bf00      	nop
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	40023800 	.word	0x40023800
 8002960:	40020400 	.word	0x40020400
 8002964:	42408294 	.word	0x42408294
 8002968:	424002a8 	.word	0x424002a8
 800296c:	424002a0 	.word	0x424002a0
 8002970:	40020000 	.word	0x40020000
 8002974:	40020800 	.word	0x40020800
 8002978:	424082a8 	.word	0x424082a8

0800297c <LCD_IO_WriteCmd8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8(uint8_t Cmd)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b082      	sub	sp, #8
 8002980:	af00      	add	r7, sp, #0
 8002982:	4603      	mov	r3, r0
 8002984:	71fb      	strb	r3, [r7, #7]
  WaitForDmaEnd();
  LcdSpiMode8();
  LCD_CS_ON;
 8002986:	4b0a      	ldr	r3, [pc, #40]	; (80029b0 <LCD_IO_WriteCmd8+0x34>)
 8002988:	2200      	movs	r2, #0
 800298a:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 800298c:	4b09      	ldr	r3, [pc, #36]	; (80029b4 <LCD_IO_WriteCmd8+0x38>)
 800298e:	2200      	movs	r2, #0
 8002990:	601a      	str	r2, [r3, #0]
 8002992:	79fb      	ldrb	r3, [r7, #7]
 8002994:	4618      	mov	r0, r3
 8002996:	f7ff fca5 	bl	80022e4 <LcdWrite8>
 800299a:	4b06      	ldr	r3, [pc, #24]	; (80029b4 <LCD_IO_WriteCmd8+0x38>)
 800299c:	2201      	movs	r2, #1
 800299e:	601a      	str	r2, [r3, #0]
  LCD_CS_OFF;
 80029a0:	4b03      	ldr	r3, [pc, #12]	; (80029b0 <LCD_IO_WriteCmd8+0x34>)
 80029a2:	2201      	movs	r2, #1
 80029a4:	601a      	str	r2, [r3, #0]
}
 80029a6:	bf00      	nop
 80029a8:	3708      	adds	r7, #8
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	424002a0 	.word	0x424002a0
 80029b4:	424002a8 	.word	0x424002a8

080029b8 <LCD_IO_WriteData8>:
  LCD_CS_OFF;
}

//-----------------------------------------------------------------------------
void LCD_IO_WriteData8(uint8_t Data)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	4603      	mov	r3, r0
 80029c0:	71fb      	strb	r3, [r7, #7]
  WaitForDmaEnd();
  LcdSpiMode8();
  LCD_CS_ON;
 80029c2:	4b07      	ldr	r3, [pc, #28]	; (80029e0 <LCD_IO_WriteData8+0x28>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	601a      	str	r2, [r3, #0]
  LcdWrite8(Data);
 80029c8:	79fb      	ldrb	r3, [r7, #7]
 80029ca:	4618      	mov	r0, r3
 80029cc:	f7ff fc8a 	bl	80022e4 <LcdWrite8>
  LCD_CS_OFF;
 80029d0:	4b03      	ldr	r3, [pc, #12]	; (80029e0 <LCD_IO_WriteData8+0x28>)
 80029d2:	2201      	movs	r2, #1
 80029d4:	601a      	str	r2, [r3, #0]
}
 80029d6:	bf00      	nop
 80029d8:	3708      	adds	r7, #8
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	424002a0 	.word	0x424002a0

080029e4 <LCD_IO_WriteData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteData16(uint16_t Data)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	4603      	mov	r3, r0
 80029ec:	80fb      	strh	r3, [r7, #6]
  WaitForDmaEnd();
  LcdSpiMode16();
  LCD_CS_ON;
 80029ee:	4b07      	ldr	r3, [pc, #28]	; (8002a0c <LCD_IO_WriteData16+0x28>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	601a      	str	r2, [r3, #0]
  LcdWrite16(Data);
 80029f4:	88fb      	ldrh	r3, [r7, #6]
 80029f6:	4618      	mov	r0, r3
 80029f8:	f7ff fd4a 	bl	8002490 <LcdWrite16>
  LCD_CS_OFF;
 80029fc:	4b03      	ldr	r3, [pc, #12]	; (8002a0c <LCD_IO_WriteData16+0x28>)
 80029fe:	2201      	movs	r2, #1
 8002a00:	601a      	str	r2, [r3, #0]
}
 8002a02:	bf00      	nop
 8002a04:	3708      	adds	r7, #8
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	424002a0 	.word	0x424002a0

08002a10 <LCD_IO_WriteCmd8DataFill16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8DataFill16(uint8_t Cmd, uint16_t Data, uint32_t Size)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	4603      	mov	r3, r0
 8002a18:	603a      	str	r2, [r7, #0]
 8002a1a:	71fb      	strb	r3, [r7, #7]
 8002a1c:	460b      	mov	r3, r1
 8002a1e:	80bb      	strh	r3, [r7, #4]
  WaitForDmaEnd();
  LcdSpiMode8();
  LCD_CS_ON;
 8002a20:	4b0b      	ldr	r3, [pc, #44]	; (8002a50 <LCD_IO_WriteCmd8DataFill16+0x40>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 8002a26:	4b0b      	ldr	r3, [pc, #44]	; (8002a54 <LCD_IO_WriteCmd8DataFill16+0x44>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	601a      	str	r2, [r3, #0]
 8002a2c:	79fb      	ldrb	r3, [r7, #7]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7ff fc58 	bl	80022e4 <LcdWrite8>
 8002a34:	4b07      	ldr	r3, [pc, #28]	; (8002a54 <LCD_IO_WriteCmd8DataFill16+0x44>)
 8002a36:	2201      	movs	r2, #1
 8002a38:	601a      	str	r2, [r3, #0]
  LcdSpiMode16();
  LCD_IO_WriteMultiData16(&Data, Size, 0);
 8002a3a:	1d3b      	adds	r3, r7, #4
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	6839      	ldr	r1, [r7, #0]
 8002a40:	4618      	mov	r0, r3
 8002a42:	f7ff fee9 	bl	8002818 <LCD_IO_WriteMultiData16>
}
 8002a46:	bf00      	nop
 8002a48:	3708      	adds	r7, #8
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	424002a0 	.word	0x424002a0
 8002a54:	424002a8 	.word	0x424002a8

08002a58 <LCD_IO_WriteCmd8MultipleData8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8MultipleData8(uint8_t Cmd, uint8_t *pData, uint32_t Size)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	4603      	mov	r3, r0
 8002a60:	60b9      	str	r1, [r7, #8]
 8002a62:	607a      	str	r2, [r7, #4]
 8002a64:	73fb      	strb	r3, [r7, #15]
  WaitForDmaEnd();
  LcdSpiMode8();
  LCD_CS_ON;
 8002a66:	4b0b      	ldr	r3, [pc, #44]	; (8002a94 <LCD_IO_WriteCmd8MultipleData8+0x3c>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 8002a6c:	4b0a      	ldr	r3, [pc, #40]	; (8002a98 <LCD_IO_WriteCmd8MultipleData8+0x40>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	601a      	str	r2, [r3, #0]
 8002a72:	7bfb      	ldrb	r3, [r7, #15]
 8002a74:	4618      	mov	r0, r3
 8002a76:	f7ff fc35 	bl	80022e4 <LcdWrite8>
 8002a7a:	4b07      	ldr	r3, [pc, #28]	; (8002a98 <LCD_IO_WriteCmd8MultipleData8+0x40>)
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	601a      	str	r2, [r3, #0]
  LCD_IO_WriteMultiData8(pData, Size, 1);
 8002a80:	2201      	movs	r2, #1
 8002a82:	6879      	ldr	r1, [r7, #4]
 8002a84:	68b8      	ldr	r0, [r7, #8]
 8002a86:	f7ff fea7 	bl	80027d8 <LCD_IO_WriteMultiData8>
}
 8002a8a:	bf00      	nop
 8002a8c:	3710      	adds	r7, #16
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	424002a0 	.word	0x424002a0
 8002a98:	424002a8 	.word	0x424002a8

08002a9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002a9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ad4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002aa0:	480d      	ldr	r0, [pc, #52]	; (8002ad8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002aa2:	490e      	ldr	r1, [pc, #56]	; (8002adc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002aa4:	4a0e      	ldr	r2, [pc, #56]	; (8002ae0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002aa6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002aa8:	e002      	b.n	8002ab0 <LoopCopyDataInit>

08002aaa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002aaa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002aac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002aae:	3304      	adds	r3, #4

08002ab0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ab0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ab2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ab4:	d3f9      	bcc.n	8002aaa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ab6:	4a0b      	ldr	r2, [pc, #44]	; (8002ae4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002ab8:	4c0b      	ldr	r4, [pc, #44]	; (8002ae8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002aba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002abc:	e001      	b.n	8002ac2 <LoopFillZerobss>

08002abe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002abe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ac0:	3204      	adds	r2, #4

08002ac2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ac2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ac4:	d3fb      	bcc.n	8002abe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002ac6:	f7ff f97d 	bl	8001dc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002aca:	f004 f93b 	bl	8006d44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ace:	f7fe fc29 	bl	8001324 <main>
  bx  lr    
 8002ad2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002ad4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002ad8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002adc:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8002ae0:	0800bc04 	.word	0x0800bc04
  ldr r2, =_sbss
 8002ae4:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8002ae8:	200003a8 	.word	0x200003a8

08002aec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002aec:	e7fe      	b.n	8002aec <ADC_IRQHandler>
	...

08002af0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002af4:	4b0e      	ldr	r3, [pc, #56]	; (8002b30 <HAL_Init+0x40>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a0d      	ldr	r2, [pc, #52]	; (8002b30 <HAL_Init+0x40>)
 8002afa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002afe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b00:	4b0b      	ldr	r3, [pc, #44]	; (8002b30 <HAL_Init+0x40>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a0a      	ldr	r2, [pc, #40]	; (8002b30 <HAL_Init+0x40>)
 8002b06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b0a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b0c:	4b08      	ldr	r3, [pc, #32]	; (8002b30 <HAL_Init+0x40>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a07      	ldr	r2, [pc, #28]	; (8002b30 <HAL_Init+0x40>)
 8002b12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b18:	2003      	movs	r0, #3
 8002b1a:	f000 f94f 	bl	8002dbc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b1e:	2000      	movs	r0, #0
 8002b20:	f000 f808 	bl	8002b34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b24:	f7fe ff12 	bl	800194c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b28:	2300      	movs	r3, #0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	40023c00 	.word	0x40023c00

08002b34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b3c:	4b12      	ldr	r3, [pc, #72]	; (8002b88 <HAL_InitTick+0x54>)
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	4b12      	ldr	r3, [pc, #72]	; (8002b8c <HAL_InitTick+0x58>)
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	4619      	mov	r1, r3
 8002b46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b52:	4618      	mov	r0, r3
 8002b54:	f000 f967 	bl	8002e26 <HAL_SYSTICK_Config>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d001      	beq.n	8002b62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e00e      	b.n	8002b80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2b0f      	cmp	r3, #15
 8002b66:	d80a      	bhi.n	8002b7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b68:	2200      	movs	r2, #0
 8002b6a:	6879      	ldr	r1, [r7, #4]
 8002b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b70:	f000 f92f 	bl	8002dd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b74:	4a06      	ldr	r2, [pc, #24]	; (8002b90 <HAL_InitTick+0x5c>)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	e000      	b.n	8002b80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3708      	adds	r7, #8
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	20000004 	.word	0x20000004
 8002b8c:	2000001c 	.word	0x2000001c
 8002b90:	20000018 	.word	0x20000018

08002b94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b94:	b480      	push	{r7}
 8002b96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b98:	4b06      	ldr	r3, [pc, #24]	; (8002bb4 <HAL_IncTick+0x20>)
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	4b06      	ldr	r3, [pc, #24]	; (8002bb8 <HAL_IncTick+0x24>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4413      	add	r3, r2
 8002ba4:	4a04      	ldr	r2, [pc, #16]	; (8002bb8 <HAL_IncTick+0x24>)
 8002ba6:	6013      	str	r3, [r2, #0]
}
 8002ba8:	bf00      	nop
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	2000001c 	.word	0x2000001c
 8002bb8:	20000394 	.word	0x20000394

08002bbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	af00      	add	r7, sp, #0
  return uwTick;
 8002bc0:	4b03      	ldr	r3, [pc, #12]	; (8002bd0 <HAL_GetTick+0x14>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr
 8002bce:	bf00      	nop
 8002bd0:	20000394 	.word	0x20000394

08002bd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bdc:	f7ff ffee 	bl	8002bbc <HAL_GetTick>
 8002be0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bec:	d005      	beq.n	8002bfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002bee:	4b0a      	ldr	r3, [pc, #40]	; (8002c18 <HAL_Delay+0x44>)
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	4413      	add	r3, r2
 8002bf8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002bfa:	bf00      	nop
 8002bfc:	f7ff ffde 	bl	8002bbc <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	68fa      	ldr	r2, [r7, #12]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d8f7      	bhi.n	8002bfc <HAL_Delay+0x28>
  {
  }
}
 8002c0c:	bf00      	nop
 8002c0e:	bf00      	nop
 8002c10:	3710      	adds	r7, #16
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	2000001c 	.word	0x2000001c

08002c1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b085      	sub	sp, #20
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	f003 0307 	and.w	r3, r3, #7
 8002c2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c2c:	4b0c      	ldr	r3, [pc, #48]	; (8002c60 <__NVIC_SetPriorityGrouping+0x44>)
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c32:	68ba      	ldr	r2, [r7, #8]
 8002c34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c38:	4013      	ands	r3, r2
 8002c3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c4e:	4a04      	ldr	r2, [pc, #16]	; (8002c60 <__NVIC_SetPriorityGrouping+0x44>)
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	60d3      	str	r3, [r2, #12]
}
 8002c54:	bf00      	nop
 8002c56:	3714      	adds	r7, #20
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr
 8002c60:	e000ed00 	.word	0xe000ed00

08002c64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c64:	b480      	push	{r7}
 8002c66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c68:	4b04      	ldr	r3, [pc, #16]	; (8002c7c <__NVIC_GetPriorityGrouping+0x18>)
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	0a1b      	lsrs	r3, r3, #8
 8002c6e:	f003 0307 	and.w	r3, r3, #7
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr
 8002c7c:	e000ed00 	.word	0xe000ed00

08002c80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	4603      	mov	r3, r0
 8002c88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	db0b      	blt.n	8002caa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c92:	79fb      	ldrb	r3, [r7, #7]
 8002c94:	f003 021f 	and.w	r2, r3, #31
 8002c98:	4907      	ldr	r1, [pc, #28]	; (8002cb8 <__NVIC_EnableIRQ+0x38>)
 8002c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c9e:	095b      	lsrs	r3, r3, #5
 8002ca0:	2001      	movs	r0, #1
 8002ca2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ca6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002caa:	bf00      	nop
 8002cac:	370c      	adds	r7, #12
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	e000e100 	.word	0xe000e100

08002cbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	6039      	str	r1, [r7, #0]
 8002cc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	db0a      	blt.n	8002ce6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	b2da      	uxtb	r2, r3
 8002cd4:	490c      	ldr	r1, [pc, #48]	; (8002d08 <__NVIC_SetPriority+0x4c>)
 8002cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cda:	0112      	lsls	r2, r2, #4
 8002cdc:	b2d2      	uxtb	r2, r2
 8002cde:	440b      	add	r3, r1
 8002ce0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ce4:	e00a      	b.n	8002cfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	b2da      	uxtb	r2, r3
 8002cea:	4908      	ldr	r1, [pc, #32]	; (8002d0c <__NVIC_SetPriority+0x50>)
 8002cec:	79fb      	ldrb	r3, [r7, #7]
 8002cee:	f003 030f 	and.w	r3, r3, #15
 8002cf2:	3b04      	subs	r3, #4
 8002cf4:	0112      	lsls	r2, r2, #4
 8002cf6:	b2d2      	uxtb	r2, r2
 8002cf8:	440b      	add	r3, r1
 8002cfa:	761a      	strb	r2, [r3, #24]
}
 8002cfc:	bf00      	nop
 8002cfe:	370c      	adds	r7, #12
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr
 8002d08:	e000e100 	.word	0xe000e100
 8002d0c:	e000ed00 	.word	0xe000ed00

08002d10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b089      	sub	sp, #36	; 0x24
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	60f8      	str	r0, [r7, #12]
 8002d18:	60b9      	str	r1, [r7, #8]
 8002d1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f003 0307 	and.w	r3, r3, #7
 8002d22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	f1c3 0307 	rsb	r3, r3, #7
 8002d2a:	2b04      	cmp	r3, #4
 8002d2c:	bf28      	it	cs
 8002d2e:	2304      	movcs	r3, #4
 8002d30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	3304      	adds	r3, #4
 8002d36:	2b06      	cmp	r3, #6
 8002d38:	d902      	bls.n	8002d40 <NVIC_EncodePriority+0x30>
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	3b03      	subs	r3, #3
 8002d3e:	e000      	b.n	8002d42 <NVIC_EncodePriority+0x32>
 8002d40:	2300      	movs	r3, #0
 8002d42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d44:	f04f 32ff 	mov.w	r2, #4294967295
 8002d48:	69bb      	ldr	r3, [r7, #24]
 8002d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4e:	43da      	mvns	r2, r3
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	401a      	ands	r2, r3
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d58:	f04f 31ff 	mov.w	r1, #4294967295
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d62:	43d9      	mvns	r1, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d68:	4313      	orrs	r3, r2
         );
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3724      	adds	r7, #36	; 0x24
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
	...

08002d78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b082      	sub	sp, #8
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	3b01      	subs	r3, #1
 8002d84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d88:	d301      	bcc.n	8002d8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e00f      	b.n	8002dae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d8e:	4a0a      	ldr	r2, [pc, #40]	; (8002db8 <SysTick_Config+0x40>)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	3b01      	subs	r3, #1
 8002d94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d96:	210f      	movs	r1, #15
 8002d98:	f04f 30ff 	mov.w	r0, #4294967295
 8002d9c:	f7ff ff8e 	bl	8002cbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002da0:	4b05      	ldr	r3, [pc, #20]	; (8002db8 <SysTick_Config+0x40>)
 8002da2:	2200      	movs	r2, #0
 8002da4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002da6:	4b04      	ldr	r3, [pc, #16]	; (8002db8 <SysTick_Config+0x40>)
 8002da8:	2207      	movs	r2, #7
 8002daa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002dac:	2300      	movs	r3, #0
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3708      	adds	r7, #8
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	e000e010 	.word	0xe000e010

08002dbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b082      	sub	sp, #8
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f7ff ff29 	bl	8002c1c <__NVIC_SetPriorityGrouping>
}
 8002dca:	bf00      	nop
 8002dcc:	3708      	adds	r7, #8
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}

08002dd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002dd2:	b580      	push	{r7, lr}
 8002dd4:	b086      	sub	sp, #24
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	4603      	mov	r3, r0
 8002dda:	60b9      	str	r1, [r7, #8]
 8002ddc:	607a      	str	r2, [r7, #4]
 8002dde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002de0:	2300      	movs	r3, #0
 8002de2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002de4:	f7ff ff3e 	bl	8002c64 <__NVIC_GetPriorityGrouping>
 8002de8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	68b9      	ldr	r1, [r7, #8]
 8002dee:	6978      	ldr	r0, [r7, #20]
 8002df0:	f7ff ff8e 	bl	8002d10 <NVIC_EncodePriority>
 8002df4:	4602      	mov	r2, r0
 8002df6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dfa:	4611      	mov	r1, r2
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f7ff ff5d 	bl	8002cbc <__NVIC_SetPriority>
}
 8002e02:	bf00      	nop
 8002e04:	3718      	adds	r7, #24
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}

08002e0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e0a:	b580      	push	{r7, lr}
 8002e0c:	b082      	sub	sp, #8
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	4603      	mov	r3, r0
 8002e12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f7ff ff31 	bl	8002c80 <__NVIC_EnableIRQ>
}
 8002e1e:	bf00      	nop
 8002e20:	3708      	adds	r7, #8
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}

08002e26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e26:	b580      	push	{r7, lr}
 8002e28:	b082      	sub	sp, #8
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f7ff ffa2 	bl	8002d78 <SysTick_Config>
 8002e34:	4603      	mov	r3, r0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3708      	adds	r7, #8
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}

08002e3e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e3e:	b480      	push	{r7}
 8002e40:	b083      	sub	sp, #12
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d004      	beq.n	8002e5c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2280      	movs	r2, #128	; 0x80
 8002e56:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e00c      	b.n	8002e76 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2205      	movs	r2, #5
 8002e60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f022 0201 	bic.w	r2, r2, #1
 8002e72:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	370c      	adds	r7, #12
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr

08002e82 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002e82:	b480      	push	{r7}
 8002e84:	b083      	sub	sp, #12
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e90:	b2db      	uxtb	r3, r3
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	370c      	adds	r7, #12
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
	...

08002ea0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b089      	sub	sp, #36	; 0x24
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	61fb      	str	r3, [r7, #28]
 8002eba:	e159      	b.n	8003170 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	697a      	ldr	r2, [r7, #20]
 8002ecc:	4013      	ands	r3, r2
 8002ece:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ed0:	693a      	ldr	r2, [r7, #16]
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	f040 8148 	bne.w	800316a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	f003 0303 	and.w	r3, r3, #3
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d005      	beq.n	8002ef2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d130      	bne.n	8002f54 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	005b      	lsls	r3, r3, #1
 8002efc:	2203      	movs	r2, #3
 8002efe:	fa02 f303 	lsl.w	r3, r2, r3
 8002f02:	43db      	mvns	r3, r3
 8002f04:	69ba      	ldr	r2, [r7, #24]
 8002f06:	4013      	ands	r3, r2
 8002f08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	68da      	ldr	r2, [r3, #12]
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	005b      	lsls	r3, r3, #1
 8002f12:	fa02 f303 	lsl.w	r3, r2, r3
 8002f16:	69ba      	ldr	r2, [r7, #24]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	69ba      	ldr	r2, [r7, #24]
 8002f20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f28:	2201      	movs	r2, #1
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f30:	43db      	mvns	r3, r3
 8002f32:	69ba      	ldr	r2, [r7, #24]
 8002f34:	4013      	ands	r3, r2
 8002f36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	091b      	lsrs	r3, r3, #4
 8002f3e:	f003 0201 	and.w	r2, r3, #1
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	fa02 f303 	lsl.w	r3, r2, r3
 8002f48:	69ba      	ldr	r2, [r7, #24]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	69ba      	ldr	r2, [r7, #24]
 8002f52:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f003 0303 	and.w	r3, r3, #3
 8002f5c:	2b03      	cmp	r3, #3
 8002f5e:	d017      	beq.n	8002f90 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	005b      	lsls	r3, r3, #1
 8002f6a:	2203      	movs	r2, #3
 8002f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f70:	43db      	mvns	r3, r3
 8002f72:	69ba      	ldr	r2, [r7, #24]
 8002f74:	4013      	ands	r3, r2
 8002f76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	689a      	ldr	r2, [r3, #8]
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	005b      	lsls	r3, r3, #1
 8002f80:	fa02 f303 	lsl.w	r3, r2, r3
 8002f84:	69ba      	ldr	r2, [r7, #24]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	69ba      	ldr	r2, [r7, #24]
 8002f8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f003 0303 	and.w	r3, r3, #3
 8002f98:	2b02      	cmp	r3, #2
 8002f9a:	d123      	bne.n	8002fe4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	08da      	lsrs	r2, r3, #3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	3208      	adds	r2, #8
 8002fa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	f003 0307 	and.w	r3, r3, #7
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	220f      	movs	r2, #15
 8002fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb8:	43db      	mvns	r3, r3
 8002fba:	69ba      	ldr	r2, [r7, #24]
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	691a      	ldr	r2, [r3, #16]
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	f003 0307 	and.w	r3, r3, #7
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd0:	69ba      	ldr	r2, [r7, #24]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	08da      	lsrs	r2, r3, #3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	3208      	adds	r2, #8
 8002fde:	69b9      	ldr	r1, [r7, #24]
 8002fe0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	005b      	lsls	r3, r3, #1
 8002fee:	2203      	movs	r2, #3
 8002ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff4:	43db      	mvns	r3, r3
 8002ff6:	69ba      	ldr	r2, [r7, #24]
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	f003 0203 	and.w	r2, r3, #3
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	005b      	lsls	r3, r3, #1
 8003008:	fa02 f303 	lsl.w	r3, r2, r3
 800300c:	69ba      	ldr	r2, [r7, #24]
 800300e:	4313      	orrs	r3, r2
 8003010:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	69ba      	ldr	r2, [r7, #24]
 8003016:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003020:	2b00      	cmp	r3, #0
 8003022:	f000 80a2 	beq.w	800316a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003026:	2300      	movs	r3, #0
 8003028:	60fb      	str	r3, [r7, #12]
 800302a:	4b57      	ldr	r3, [pc, #348]	; (8003188 <HAL_GPIO_Init+0x2e8>)
 800302c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800302e:	4a56      	ldr	r2, [pc, #344]	; (8003188 <HAL_GPIO_Init+0x2e8>)
 8003030:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003034:	6453      	str	r3, [r2, #68]	; 0x44
 8003036:	4b54      	ldr	r3, [pc, #336]	; (8003188 <HAL_GPIO_Init+0x2e8>)
 8003038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800303a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800303e:	60fb      	str	r3, [r7, #12]
 8003040:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003042:	4a52      	ldr	r2, [pc, #328]	; (800318c <HAL_GPIO_Init+0x2ec>)
 8003044:	69fb      	ldr	r3, [r7, #28]
 8003046:	089b      	lsrs	r3, r3, #2
 8003048:	3302      	adds	r3, #2
 800304a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800304e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	f003 0303 	and.w	r3, r3, #3
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	220f      	movs	r2, #15
 800305a:	fa02 f303 	lsl.w	r3, r2, r3
 800305e:	43db      	mvns	r3, r3
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	4013      	ands	r3, r2
 8003064:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4a49      	ldr	r2, [pc, #292]	; (8003190 <HAL_GPIO_Init+0x2f0>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d019      	beq.n	80030a2 <HAL_GPIO_Init+0x202>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4a48      	ldr	r2, [pc, #288]	; (8003194 <HAL_GPIO_Init+0x2f4>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d013      	beq.n	800309e <HAL_GPIO_Init+0x1fe>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4a47      	ldr	r2, [pc, #284]	; (8003198 <HAL_GPIO_Init+0x2f8>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d00d      	beq.n	800309a <HAL_GPIO_Init+0x1fa>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4a46      	ldr	r2, [pc, #280]	; (800319c <HAL_GPIO_Init+0x2fc>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d007      	beq.n	8003096 <HAL_GPIO_Init+0x1f6>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4a45      	ldr	r2, [pc, #276]	; (80031a0 <HAL_GPIO_Init+0x300>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d101      	bne.n	8003092 <HAL_GPIO_Init+0x1f2>
 800308e:	2304      	movs	r3, #4
 8003090:	e008      	b.n	80030a4 <HAL_GPIO_Init+0x204>
 8003092:	2307      	movs	r3, #7
 8003094:	e006      	b.n	80030a4 <HAL_GPIO_Init+0x204>
 8003096:	2303      	movs	r3, #3
 8003098:	e004      	b.n	80030a4 <HAL_GPIO_Init+0x204>
 800309a:	2302      	movs	r3, #2
 800309c:	e002      	b.n	80030a4 <HAL_GPIO_Init+0x204>
 800309e:	2301      	movs	r3, #1
 80030a0:	e000      	b.n	80030a4 <HAL_GPIO_Init+0x204>
 80030a2:	2300      	movs	r3, #0
 80030a4:	69fa      	ldr	r2, [r7, #28]
 80030a6:	f002 0203 	and.w	r2, r2, #3
 80030aa:	0092      	lsls	r2, r2, #2
 80030ac:	4093      	lsls	r3, r2
 80030ae:	69ba      	ldr	r2, [r7, #24]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80030b4:	4935      	ldr	r1, [pc, #212]	; (800318c <HAL_GPIO_Init+0x2ec>)
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	089b      	lsrs	r3, r3, #2
 80030ba:	3302      	adds	r3, #2
 80030bc:	69ba      	ldr	r2, [r7, #24]
 80030be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80030c2:	4b38      	ldr	r3, [pc, #224]	; (80031a4 <HAL_GPIO_Init+0x304>)
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	43db      	mvns	r3, r3
 80030cc:	69ba      	ldr	r2, [r7, #24]
 80030ce:	4013      	ands	r3, r2
 80030d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d003      	beq.n	80030e6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80030de:	69ba      	ldr	r2, [r7, #24]
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80030e6:	4a2f      	ldr	r2, [pc, #188]	; (80031a4 <HAL_GPIO_Init+0x304>)
 80030e8:	69bb      	ldr	r3, [r7, #24]
 80030ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80030ec:	4b2d      	ldr	r3, [pc, #180]	; (80031a4 <HAL_GPIO_Init+0x304>)
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	43db      	mvns	r3, r3
 80030f6:	69ba      	ldr	r2, [r7, #24]
 80030f8:	4013      	ands	r3, r2
 80030fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003104:	2b00      	cmp	r3, #0
 8003106:	d003      	beq.n	8003110 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003108:	69ba      	ldr	r2, [r7, #24]
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	4313      	orrs	r3, r2
 800310e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003110:	4a24      	ldr	r2, [pc, #144]	; (80031a4 <HAL_GPIO_Init+0x304>)
 8003112:	69bb      	ldr	r3, [r7, #24]
 8003114:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003116:	4b23      	ldr	r3, [pc, #140]	; (80031a4 <HAL_GPIO_Init+0x304>)
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	43db      	mvns	r3, r3
 8003120:	69ba      	ldr	r2, [r7, #24]
 8003122:	4013      	ands	r3, r2
 8003124:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d003      	beq.n	800313a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003132:	69ba      	ldr	r2, [r7, #24]
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	4313      	orrs	r3, r2
 8003138:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800313a:	4a1a      	ldr	r2, [pc, #104]	; (80031a4 <HAL_GPIO_Init+0x304>)
 800313c:	69bb      	ldr	r3, [r7, #24]
 800313e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003140:	4b18      	ldr	r3, [pc, #96]	; (80031a4 <HAL_GPIO_Init+0x304>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	43db      	mvns	r3, r3
 800314a:	69ba      	ldr	r2, [r7, #24]
 800314c:	4013      	ands	r3, r2
 800314e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003158:	2b00      	cmp	r3, #0
 800315a:	d003      	beq.n	8003164 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800315c:	69ba      	ldr	r2, [r7, #24]
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	4313      	orrs	r3, r2
 8003162:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003164:	4a0f      	ldr	r2, [pc, #60]	; (80031a4 <HAL_GPIO_Init+0x304>)
 8003166:	69bb      	ldr	r3, [r7, #24]
 8003168:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	3301      	adds	r3, #1
 800316e:	61fb      	str	r3, [r7, #28]
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	2b0f      	cmp	r3, #15
 8003174:	f67f aea2 	bls.w	8002ebc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003178:	bf00      	nop
 800317a:	bf00      	nop
 800317c:	3724      	adds	r7, #36	; 0x24
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr
 8003186:	bf00      	nop
 8003188:	40023800 	.word	0x40023800
 800318c:	40013800 	.word	0x40013800
 8003190:	40020000 	.word	0x40020000
 8003194:	40020400 	.word	0x40020400
 8003198:	40020800 	.word	0x40020800
 800319c:	40020c00 	.word	0x40020c00
 80031a0:	40021000 	.word	0x40021000
 80031a4:	40013c00 	.word	0x40013c00

080031a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	460b      	mov	r3, r1
 80031b2:	807b      	strh	r3, [r7, #2]
 80031b4:	4613      	mov	r3, r2
 80031b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80031b8:	787b      	ldrb	r3, [r7, #1]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d003      	beq.n	80031c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80031be:	887a      	ldrh	r2, [r7, #2]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80031c4:	e003      	b.n	80031ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80031c6:	887b      	ldrh	r3, [r7, #2]
 80031c8:	041a      	lsls	r2, r3, #16
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	619a      	str	r2, [r3, #24]
}
 80031ce:	bf00      	nop
 80031d0:	370c      	adds	r7, #12
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr

080031da <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80031da:	b480      	push	{r7}
 80031dc:	b085      	sub	sp, #20
 80031de:	af00      	add	r7, sp, #0
 80031e0:	6078      	str	r0, [r7, #4]
 80031e2:	460b      	mov	r3, r1
 80031e4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	695b      	ldr	r3, [r3, #20]
 80031ea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80031ec:	887a      	ldrh	r2, [r7, #2]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	4013      	ands	r3, r2
 80031f2:	041a      	lsls	r2, r3, #16
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	43d9      	mvns	r1, r3
 80031f8:	887b      	ldrh	r3, [r7, #2]
 80031fa:	400b      	ands	r3, r1
 80031fc:	431a      	orrs	r2, r3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	619a      	str	r2, [r3, #24]
}
 8003202:	bf00      	nop
 8003204:	3714      	adds	r7, #20
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr
	...

08003210 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
 8003216:	4603      	mov	r3, r0
 8003218:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800321a:	4b08      	ldr	r3, [pc, #32]	; (800323c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800321c:	695a      	ldr	r2, [r3, #20]
 800321e:	88fb      	ldrh	r3, [r7, #6]
 8003220:	4013      	ands	r3, r2
 8003222:	2b00      	cmp	r3, #0
 8003224:	d006      	beq.n	8003234 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003226:	4a05      	ldr	r2, [pc, #20]	; (800323c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003228:	88fb      	ldrh	r3, [r7, #6]
 800322a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800322c:	88fb      	ldrh	r3, [r7, #6]
 800322e:	4618      	mov	r0, r3
 8003230:	f7fe fb2c 	bl	800188c <HAL_GPIO_EXTI_Callback>
  }
}
 8003234:	bf00      	nop
 8003236:	3708      	adds	r7, #8
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}
 800323c:	40013c00 	.word	0x40013c00

08003240 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b084      	sub	sp, #16
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d101      	bne.n	8003252 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e12b      	b.n	80034aa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003258:	b2db      	uxtb	r3, r3
 800325a:	2b00      	cmp	r3, #0
 800325c:	d106      	bne.n	800326c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f7fe fb98 	bl	800199c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2224      	movs	r2, #36	; 0x24
 8003270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f022 0201 	bic.w	r2, r2, #1
 8003282:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003292:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80032a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80032a4:	f003 f8d6 	bl	8006454 <HAL_RCC_GetPCLK1Freq>
 80032a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	4a81      	ldr	r2, [pc, #516]	; (80034b4 <HAL_I2C_Init+0x274>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d807      	bhi.n	80032c4 <HAL_I2C_Init+0x84>
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	4a80      	ldr	r2, [pc, #512]	; (80034b8 <HAL_I2C_Init+0x278>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	bf94      	ite	ls
 80032bc:	2301      	movls	r3, #1
 80032be:	2300      	movhi	r3, #0
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	e006      	b.n	80032d2 <HAL_I2C_Init+0x92>
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	4a7d      	ldr	r2, [pc, #500]	; (80034bc <HAL_I2C_Init+0x27c>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	bf94      	ite	ls
 80032cc:	2301      	movls	r3, #1
 80032ce:	2300      	movhi	r3, #0
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d001      	beq.n	80032da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e0e7      	b.n	80034aa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	4a78      	ldr	r2, [pc, #480]	; (80034c0 <HAL_I2C_Init+0x280>)
 80032de:	fba2 2303 	umull	r2, r3, r2, r3
 80032e2:	0c9b      	lsrs	r3, r3, #18
 80032e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	68ba      	ldr	r2, [r7, #8]
 80032f6:	430a      	orrs	r2, r1
 80032f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	6a1b      	ldr	r3, [r3, #32]
 8003300:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	4a6a      	ldr	r2, [pc, #424]	; (80034b4 <HAL_I2C_Init+0x274>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d802      	bhi.n	8003314 <HAL_I2C_Init+0xd4>
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	3301      	adds	r3, #1
 8003312:	e009      	b.n	8003328 <HAL_I2C_Init+0xe8>
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800331a:	fb02 f303 	mul.w	r3, r2, r3
 800331e:	4a69      	ldr	r2, [pc, #420]	; (80034c4 <HAL_I2C_Init+0x284>)
 8003320:	fba2 2303 	umull	r2, r3, r2, r3
 8003324:	099b      	lsrs	r3, r3, #6
 8003326:	3301      	adds	r3, #1
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	6812      	ldr	r2, [r2, #0]
 800332c:	430b      	orrs	r3, r1
 800332e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	69db      	ldr	r3, [r3, #28]
 8003336:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800333a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	495c      	ldr	r1, [pc, #368]	; (80034b4 <HAL_I2C_Init+0x274>)
 8003344:	428b      	cmp	r3, r1
 8003346:	d819      	bhi.n	800337c <HAL_I2C_Init+0x13c>
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	1e59      	subs	r1, r3, #1
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	005b      	lsls	r3, r3, #1
 8003352:	fbb1 f3f3 	udiv	r3, r1, r3
 8003356:	1c59      	adds	r1, r3, #1
 8003358:	f640 73fc 	movw	r3, #4092	; 0xffc
 800335c:	400b      	ands	r3, r1
 800335e:	2b00      	cmp	r3, #0
 8003360:	d00a      	beq.n	8003378 <HAL_I2C_Init+0x138>
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	1e59      	subs	r1, r3, #1
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	005b      	lsls	r3, r3, #1
 800336c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003370:	3301      	adds	r3, #1
 8003372:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003376:	e051      	b.n	800341c <HAL_I2C_Init+0x1dc>
 8003378:	2304      	movs	r3, #4
 800337a:	e04f      	b.n	800341c <HAL_I2C_Init+0x1dc>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d111      	bne.n	80033a8 <HAL_I2C_Init+0x168>
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	1e58      	subs	r0, r3, #1
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6859      	ldr	r1, [r3, #4]
 800338c:	460b      	mov	r3, r1
 800338e:	005b      	lsls	r3, r3, #1
 8003390:	440b      	add	r3, r1
 8003392:	fbb0 f3f3 	udiv	r3, r0, r3
 8003396:	3301      	adds	r3, #1
 8003398:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800339c:	2b00      	cmp	r3, #0
 800339e:	bf0c      	ite	eq
 80033a0:	2301      	moveq	r3, #1
 80033a2:	2300      	movne	r3, #0
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	e012      	b.n	80033ce <HAL_I2C_Init+0x18e>
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	1e58      	subs	r0, r3, #1
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6859      	ldr	r1, [r3, #4]
 80033b0:	460b      	mov	r3, r1
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	440b      	add	r3, r1
 80033b6:	0099      	lsls	r1, r3, #2
 80033b8:	440b      	add	r3, r1
 80033ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80033be:	3301      	adds	r3, #1
 80033c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	bf0c      	ite	eq
 80033c8:	2301      	moveq	r3, #1
 80033ca:	2300      	movne	r3, #0
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d001      	beq.n	80033d6 <HAL_I2C_Init+0x196>
 80033d2:	2301      	movs	r3, #1
 80033d4:	e022      	b.n	800341c <HAL_I2C_Init+0x1dc>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d10e      	bne.n	80033fc <HAL_I2C_Init+0x1bc>
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	1e58      	subs	r0, r3, #1
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6859      	ldr	r1, [r3, #4]
 80033e6:	460b      	mov	r3, r1
 80033e8:	005b      	lsls	r3, r3, #1
 80033ea:	440b      	add	r3, r1
 80033ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80033f0:	3301      	adds	r3, #1
 80033f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033fa:	e00f      	b.n	800341c <HAL_I2C_Init+0x1dc>
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	1e58      	subs	r0, r3, #1
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6859      	ldr	r1, [r3, #4]
 8003404:	460b      	mov	r3, r1
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	440b      	add	r3, r1
 800340a:	0099      	lsls	r1, r3, #2
 800340c:	440b      	add	r3, r1
 800340e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003412:	3301      	adds	r3, #1
 8003414:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003418:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800341c:	6879      	ldr	r1, [r7, #4]
 800341e:	6809      	ldr	r1, [r1, #0]
 8003420:	4313      	orrs	r3, r2
 8003422:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	69da      	ldr	r2, [r3, #28]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6a1b      	ldr	r3, [r3, #32]
 8003436:	431a      	orrs	r2, r3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	430a      	orrs	r2, r1
 800343e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800344a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	6911      	ldr	r1, [r2, #16]
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	68d2      	ldr	r2, [r2, #12]
 8003456:	4311      	orrs	r1, r2
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	6812      	ldr	r2, [r2, #0]
 800345c:	430b      	orrs	r3, r1
 800345e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	695a      	ldr	r2, [r3, #20]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	699b      	ldr	r3, [r3, #24]
 8003472:	431a      	orrs	r2, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	430a      	orrs	r2, r1
 800347a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f042 0201 	orr.w	r2, r2, #1
 800348a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2220      	movs	r2, #32
 8003496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80034a8:	2300      	movs	r3, #0
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3710      	adds	r7, #16
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	000186a0 	.word	0x000186a0
 80034b8:	001e847f 	.word	0x001e847f
 80034bc:	003d08ff 	.word	0x003d08ff
 80034c0:	431bde83 	.word	0x431bde83
 80034c4:	10624dd3 	.word	0x10624dd3

080034c8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b088      	sub	sp, #32
 80034cc:	af02      	add	r7, sp, #8
 80034ce:	60f8      	str	r0, [r7, #12]
 80034d0:	4608      	mov	r0, r1
 80034d2:	4611      	mov	r1, r2
 80034d4:	461a      	mov	r2, r3
 80034d6:	4603      	mov	r3, r0
 80034d8:	817b      	strh	r3, [r7, #10]
 80034da:	460b      	mov	r3, r1
 80034dc:	813b      	strh	r3, [r7, #8]
 80034de:	4613      	mov	r3, r2
 80034e0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80034e2:	f7ff fb6b 	bl	8002bbc <HAL_GetTick>
 80034e6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	2b20      	cmp	r3, #32
 80034f2:	f040 80d9 	bne.w	80036a8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	9300      	str	r3, [sp, #0]
 80034fa:	2319      	movs	r3, #25
 80034fc:	2201      	movs	r2, #1
 80034fe:	496d      	ldr	r1, [pc, #436]	; (80036b4 <HAL_I2C_Mem_Write+0x1ec>)
 8003500:	68f8      	ldr	r0, [r7, #12]
 8003502:	f002 f90d 	bl	8005720 <I2C_WaitOnFlagUntilTimeout>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d001      	beq.n	8003510 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800350c:	2302      	movs	r3, #2
 800350e:	e0cc      	b.n	80036aa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003516:	2b01      	cmp	r3, #1
 8003518:	d101      	bne.n	800351e <HAL_I2C_Mem_Write+0x56>
 800351a:	2302      	movs	r3, #2
 800351c:	e0c5      	b.n	80036aa <HAL_I2C_Mem_Write+0x1e2>
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2201      	movs	r2, #1
 8003522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 0301 	and.w	r3, r3, #1
 8003530:	2b01      	cmp	r3, #1
 8003532:	d007      	beq.n	8003544 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f042 0201 	orr.w	r2, r2, #1
 8003542:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003552:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2221      	movs	r2, #33	; 0x21
 8003558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2240      	movs	r2, #64	; 0x40
 8003560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2200      	movs	r2, #0
 8003568:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	6a3a      	ldr	r2, [r7, #32]
 800356e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003574:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800357a:	b29a      	uxth	r2, r3
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	4a4d      	ldr	r2, [pc, #308]	; (80036b8 <HAL_I2C_Mem_Write+0x1f0>)
 8003584:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003586:	88f8      	ldrh	r0, [r7, #6]
 8003588:	893a      	ldrh	r2, [r7, #8]
 800358a:	8979      	ldrh	r1, [r7, #10]
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	9301      	str	r3, [sp, #4]
 8003590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003592:	9300      	str	r3, [sp, #0]
 8003594:	4603      	mov	r3, r0
 8003596:	68f8      	ldr	r0, [r7, #12]
 8003598:	f001 fe9c 	bl	80052d4 <I2C_RequestMemoryWrite>
 800359c:	4603      	mov	r3, r0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d052      	beq.n	8003648 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e081      	b.n	80036aa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035a6:	697a      	ldr	r2, [r7, #20]
 80035a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035aa:	68f8      	ldr	r0, [r7, #12]
 80035ac:	f002 f98e 	bl	80058cc <I2C_WaitOnTXEFlagUntilTimeout>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d00d      	beq.n	80035d2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ba:	2b04      	cmp	r3, #4
 80035bc:	d107      	bne.n	80035ce <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035cc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e06b      	b.n	80036aa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d6:	781a      	ldrb	r2, [r3, #0]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e2:	1c5a      	adds	r2, r3, #1
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035ec:	3b01      	subs	r3, #1
 80035ee:	b29a      	uxth	r2, r3
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	3b01      	subs	r3, #1
 80035fc:	b29a      	uxth	r2, r3
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	695b      	ldr	r3, [r3, #20]
 8003608:	f003 0304 	and.w	r3, r3, #4
 800360c:	2b04      	cmp	r3, #4
 800360e:	d11b      	bne.n	8003648 <HAL_I2C_Mem_Write+0x180>
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003614:	2b00      	cmp	r3, #0
 8003616:	d017      	beq.n	8003648 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361c:	781a      	ldrb	r2, [r3, #0]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003628:	1c5a      	adds	r2, r3, #1
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003632:	3b01      	subs	r3, #1
 8003634:	b29a      	uxth	r2, r3
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800363e:	b29b      	uxth	r3, r3
 8003640:	3b01      	subs	r3, #1
 8003642:	b29a      	uxth	r2, r3
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800364c:	2b00      	cmp	r3, #0
 800364e:	d1aa      	bne.n	80035a6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003650:	697a      	ldr	r2, [r7, #20]
 8003652:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003654:	68f8      	ldr	r0, [r7, #12]
 8003656:	f002 f97a 	bl	800594e <I2C_WaitOnBTFFlagUntilTimeout>
 800365a:	4603      	mov	r3, r0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d00d      	beq.n	800367c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003664:	2b04      	cmp	r3, #4
 8003666:	d107      	bne.n	8003678 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003676:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e016      	b.n	80036aa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800368a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2220      	movs	r2, #32
 8003690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2200      	movs	r2, #0
 8003698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2200      	movs	r2, #0
 80036a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80036a4:	2300      	movs	r3, #0
 80036a6:	e000      	b.n	80036aa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80036a8:	2302      	movs	r3, #2
  }
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3718      	adds	r7, #24
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	00100002 	.word	0x00100002
 80036b8:	ffff0000 	.word	0xffff0000

080036bc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b08c      	sub	sp, #48	; 0x30
 80036c0:	af02      	add	r7, sp, #8
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	4608      	mov	r0, r1
 80036c6:	4611      	mov	r1, r2
 80036c8:	461a      	mov	r2, r3
 80036ca:	4603      	mov	r3, r0
 80036cc:	817b      	strh	r3, [r7, #10]
 80036ce:	460b      	mov	r3, r1
 80036d0:	813b      	strh	r3, [r7, #8]
 80036d2:	4613      	mov	r3, r2
 80036d4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80036d6:	f7ff fa71 	bl	8002bbc <HAL_GetTick>
 80036da:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	2b20      	cmp	r3, #32
 80036e6:	f040 8208 	bne.w	8003afa <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80036ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ec:	9300      	str	r3, [sp, #0]
 80036ee:	2319      	movs	r3, #25
 80036f0:	2201      	movs	r2, #1
 80036f2:	497b      	ldr	r1, [pc, #492]	; (80038e0 <HAL_I2C_Mem_Read+0x224>)
 80036f4:	68f8      	ldr	r0, [r7, #12]
 80036f6:	f002 f813 	bl	8005720 <I2C_WaitOnFlagUntilTimeout>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d001      	beq.n	8003704 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003700:	2302      	movs	r3, #2
 8003702:	e1fb      	b.n	8003afc <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800370a:	2b01      	cmp	r3, #1
 800370c:	d101      	bne.n	8003712 <HAL_I2C_Mem_Read+0x56>
 800370e:	2302      	movs	r3, #2
 8003710:	e1f4      	b.n	8003afc <HAL_I2C_Mem_Read+0x440>
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2201      	movs	r2, #1
 8003716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0301 	and.w	r3, r3, #1
 8003724:	2b01      	cmp	r3, #1
 8003726:	d007      	beq.n	8003738 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f042 0201 	orr.w	r2, r2, #1
 8003736:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003746:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2222      	movs	r2, #34	; 0x22
 800374c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2240      	movs	r2, #64	; 0x40
 8003754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2200      	movs	r2, #0
 800375c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003762:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003768:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800376e:	b29a      	uxth	r2, r3
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	4a5b      	ldr	r2, [pc, #364]	; (80038e4 <HAL_I2C_Mem_Read+0x228>)
 8003778:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800377a:	88f8      	ldrh	r0, [r7, #6]
 800377c:	893a      	ldrh	r2, [r7, #8]
 800377e:	8979      	ldrh	r1, [r7, #10]
 8003780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003782:	9301      	str	r3, [sp, #4]
 8003784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003786:	9300      	str	r3, [sp, #0]
 8003788:	4603      	mov	r3, r0
 800378a:	68f8      	ldr	r0, [r7, #12]
 800378c:	f001 fe38 	bl	8005400 <I2C_RequestMemoryRead>
 8003790:	4603      	mov	r3, r0
 8003792:	2b00      	cmp	r3, #0
 8003794:	d001      	beq.n	800379a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e1b0      	b.n	8003afc <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d113      	bne.n	80037ca <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037a2:	2300      	movs	r3, #0
 80037a4:	623b      	str	r3, [r7, #32]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	695b      	ldr	r3, [r3, #20]
 80037ac:	623b      	str	r3, [r7, #32]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	699b      	ldr	r3, [r3, #24]
 80037b4:	623b      	str	r3, [r7, #32]
 80037b6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037c6:	601a      	str	r2, [r3, #0]
 80037c8:	e184      	b.n	8003ad4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d11b      	bne.n	800380a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037e0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037e2:	2300      	movs	r3, #0
 80037e4:	61fb      	str	r3, [r7, #28]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	695b      	ldr	r3, [r3, #20]
 80037ec:	61fb      	str	r3, [r7, #28]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	699b      	ldr	r3, [r3, #24]
 80037f4:	61fb      	str	r3, [r7, #28]
 80037f6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003806:	601a      	str	r2, [r3, #0]
 8003808:	e164      	b.n	8003ad4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800380e:	2b02      	cmp	r3, #2
 8003810:	d11b      	bne.n	800384a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003820:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003830:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003832:	2300      	movs	r3, #0
 8003834:	61bb      	str	r3, [r7, #24]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	695b      	ldr	r3, [r3, #20]
 800383c:	61bb      	str	r3, [r7, #24]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	699b      	ldr	r3, [r3, #24]
 8003844:	61bb      	str	r3, [r7, #24]
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	e144      	b.n	8003ad4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800384a:	2300      	movs	r3, #0
 800384c:	617b      	str	r3, [r7, #20]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	695b      	ldr	r3, [r3, #20]
 8003854:	617b      	str	r3, [r7, #20]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	699b      	ldr	r3, [r3, #24]
 800385c:	617b      	str	r3, [r7, #20]
 800385e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003860:	e138      	b.n	8003ad4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003866:	2b03      	cmp	r3, #3
 8003868:	f200 80f1 	bhi.w	8003a4e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003870:	2b01      	cmp	r3, #1
 8003872:	d123      	bne.n	80038bc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003874:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003876:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003878:	68f8      	ldr	r0, [r7, #12]
 800387a:	f002 f8db 	bl	8005a34 <I2C_WaitOnRXNEFlagUntilTimeout>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d001      	beq.n	8003888 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e139      	b.n	8003afc <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	691a      	ldr	r2, [r3, #16]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003892:	b2d2      	uxtb	r2, r2
 8003894:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389a:	1c5a      	adds	r2, r3, #1
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038a4:	3b01      	subs	r3, #1
 80038a6:	b29a      	uxth	r2, r3
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	3b01      	subs	r3, #1
 80038b4:	b29a      	uxth	r2, r3
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80038ba:	e10b      	b.n	8003ad4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038c0:	2b02      	cmp	r3, #2
 80038c2:	d14e      	bne.n	8003962 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80038c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c6:	9300      	str	r3, [sp, #0]
 80038c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038ca:	2200      	movs	r2, #0
 80038cc:	4906      	ldr	r1, [pc, #24]	; (80038e8 <HAL_I2C_Mem_Read+0x22c>)
 80038ce:	68f8      	ldr	r0, [r7, #12]
 80038d0:	f001 ff26 	bl	8005720 <I2C_WaitOnFlagUntilTimeout>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d008      	beq.n	80038ec <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e10e      	b.n	8003afc <HAL_I2C_Mem_Read+0x440>
 80038de:	bf00      	nop
 80038e0:	00100002 	.word	0x00100002
 80038e4:	ffff0000 	.word	0xffff0000
 80038e8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	691a      	ldr	r2, [r3, #16]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003906:	b2d2      	uxtb	r2, r2
 8003908:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390e:	1c5a      	adds	r2, r3, #1
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003918:	3b01      	subs	r3, #1
 800391a:	b29a      	uxth	r2, r3
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003924:	b29b      	uxth	r3, r3
 8003926:	3b01      	subs	r3, #1
 8003928:	b29a      	uxth	r2, r3
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	691a      	ldr	r2, [r3, #16]
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003938:	b2d2      	uxtb	r2, r2
 800393a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003940:	1c5a      	adds	r2, r3, #1
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800394a:	3b01      	subs	r3, #1
 800394c:	b29a      	uxth	r2, r3
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003956:	b29b      	uxth	r3, r3
 8003958:	3b01      	subs	r3, #1
 800395a:	b29a      	uxth	r2, r3
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003960:	e0b8      	b.n	8003ad4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003964:	9300      	str	r3, [sp, #0]
 8003966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003968:	2200      	movs	r2, #0
 800396a:	4966      	ldr	r1, [pc, #408]	; (8003b04 <HAL_I2C_Mem_Read+0x448>)
 800396c:	68f8      	ldr	r0, [r7, #12]
 800396e:	f001 fed7 	bl	8005720 <I2C_WaitOnFlagUntilTimeout>
 8003972:	4603      	mov	r3, r0
 8003974:	2b00      	cmp	r3, #0
 8003976:	d001      	beq.n	800397c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e0bf      	b.n	8003afc <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800398a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	691a      	ldr	r2, [r3, #16]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003996:	b2d2      	uxtb	r2, r2
 8003998:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399e:	1c5a      	adds	r2, r3, #1
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039a8:	3b01      	subs	r3, #1
 80039aa:	b29a      	uxth	r2, r3
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	3b01      	subs	r3, #1
 80039b8:	b29a      	uxth	r2, r3
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80039be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c0:	9300      	str	r3, [sp, #0]
 80039c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039c4:	2200      	movs	r2, #0
 80039c6:	494f      	ldr	r1, [pc, #316]	; (8003b04 <HAL_I2C_Mem_Read+0x448>)
 80039c8:	68f8      	ldr	r0, [r7, #12]
 80039ca:	f001 fea9 	bl	8005720 <I2C_WaitOnFlagUntilTimeout>
 80039ce:	4603      	mov	r3, r0
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d001      	beq.n	80039d8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e091      	b.n	8003afc <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	691a      	ldr	r2, [r3, #16]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f2:	b2d2      	uxtb	r2, r2
 80039f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fa:	1c5a      	adds	r2, r3, #1
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a04:	3b01      	subs	r3, #1
 8003a06:	b29a      	uxth	r2, r3
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	3b01      	subs	r3, #1
 8003a14:	b29a      	uxth	r2, r3
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	691a      	ldr	r2, [r3, #16]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a24:	b2d2      	uxtb	r2, r2
 8003a26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2c:	1c5a      	adds	r2, r3, #1
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a36:	3b01      	subs	r3, #1
 8003a38:	b29a      	uxth	r2, r3
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	3b01      	subs	r3, #1
 8003a46:	b29a      	uxth	r2, r3
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003a4c:	e042      	b.n	8003ad4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a50:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003a52:	68f8      	ldr	r0, [r7, #12]
 8003a54:	f001 ffee 	bl	8005a34 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d001      	beq.n	8003a62 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e04c      	b.n	8003afc <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	691a      	ldr	r2, [r3, #16]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6c:	b2d2      	uxtb	r2, r2
 8003a6e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a74:	1c5a      	adds	r2, r3, #1
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a7e:	3b01      	subs	r3, #1
 8003a80:	b29a      	uxth	r2, r3
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	3b01      	subs	r3, #1
 8003a8e:	b29a      	uxth	r2, r3
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	695b      	ldr	r3, [r3, #20]
 8003a9a:	f003 0304 	and.w	r3, r3, #4
 8003a9e:	2b04      	cmp	r3, #4
 8003aa0:	d118      	bne.n	8003ad4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	691a      	ldr	r2, [r3, #16]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aac:	b2d2      	uxtb	r2, r2
 8003aae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab4:	1c5a      	adds	r2, r3, #1
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003abe:	3b01      	subs	r3, #1
 8003ac0:	b29a      	uxth	r2, r3
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	3b01      	subs	r3, #1
 8003ace:	b29a      	uxth	r2, r3
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	f47f aec2 	bne.w	8003862 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2220      	movs	r2, #32
 8003ae2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2200      	movs	r2, #0
 8003af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003af6:	2300      	movs	r3, #0
 8003af8:	e000      	b.n	8003afc <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003afa:	2302      	movs	r3, #2
  }
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3728      	adds	r7, #40	; 0x28
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	00010004 	.word	0x00010004

08003b08 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b088      	sub	sp, #32
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003b10:	2300      	movs	r3, #0
 8003b12:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b20:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b28:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b30:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003b32:	7bfb      	ldrb	r3, [r7, #15]
 8003b34:	2b10      	cmp	r3, #16
 8003b36:	d003      	beq.n	8003b40 <HAL_I2C_EV_IRQHandler+0x38>
 8003b38:	7bfb      	ldrb	r3, [r7, #15]
 8003b3a:	2b40      	cmp	r3, #64	; 0x40
 8003b3c:	f040 80c1 	bne.w	8003cc2 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	699b      	ldr	r3, [r3, #24]
 8003b46:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	695b      	ldr	r3, [r3, #20]
 8003b4e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	f003 0301 	and.w	r3, r3, #1
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d10d      	bne.n	8003b76 <HAL_I2C_EV_IRQHandler+0x6e>
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003b60:	d003      	beq.n	8003b6a <HAL_I2C_EV_IRQHandler+0x62>
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003b68:	d101      	bne.n	8003b6e <HAL_I2C_EV_IRQHandler+0x66>
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e000      	b.n	8003b70 <HAL_I2C_EV_IRQHandler+0x68>
 8003b6e:	2300      	movs	r3, #0
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	f000 8132 	beq.w	8003dda <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	f003 0301 	and.w	r3, r3, #1
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d00c      	beq.n	8003b9a <HAL_I2C_EV_IRQHandler+0x92>
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	0a5b      	lsrs	r3, r3, #9
 8003b84:	f003 0301 	and.w	r3, r3, #1
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d006      	beq.n	8003b9a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f001 ffd6 	bl	8005b3e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f000 fd83 	bl	800469e <I2C_Master_SB>
 8003b98:	e092      	b.n	8003cc0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b9a:	69fb      	ldr	r3, [r7, #28]
 8003b9c:	08db      	lsrs	r3, r3, #3
 8003b9e:	f003 0301 	and.w	r3, r3, #1
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d009      	beq.n	8003bba <HAL_I2C_EV_IRQHandler+0xb2>
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	0a5b      	lsrs	r3, r3, #9
 8003baa:	f003 0301 	and.w	r3, r3, #1
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d003      	beq.n	8003bba <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f000 fdf9 	bl	80047aa <I2C_Master_ADD10>
 8003bb8:	e082      	b.n	8003cc0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	085b      	lsrs	r3, r3, #1
 8003bbe:	f003 0301 	and.w	r3, r3, #1
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d009      	beq.n	8003bda <HAL_I2C_EV_IRQHandler+0xd2>
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	0a5b      	lsrs	r3, r3, #9
 8003bca:	f003 0301 	and.w	r3, r3, #1
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d003      	beq.n	8003bda <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f000 fe13 	bl	80047fe <I2C_Master_ADDR>
 8003bd8:	e072      	b.n	8003cc0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003bda:	69bb      	ldr	r3, [r7, #24]
 8003bdc:	089b      	lsrs	r3, r3, #2
 8003bde:	f003 0301 	and.w	r3, r3, #1
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d03b      	beq.n	8003c5e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bf0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bf4:	f000 80f3 	beq.w	8003dde <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003bf8:	69fb      	ldr	r3, [r7, #28]
 8003bfa:	09db      	lsrs	r3, r3, #7
 8003bfc:	f003 0301 	and.w	r3, r3, #1
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d00f      	beq.n	8003c24 <HAL_I2C_EV_IRQHandler+0x11c>
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	0a9b      	lsrs	r3, r3, #10
 8003c08:	f003 0301 	and.w	r3, r3, #1
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d009      	beq.n	8003c24 <HAL_I2C_EV_IRQHandler+0x11c>
 8003c10:	69fb      	ldr	r3, [r7, #28]
 8003c12:	089b      	lsrs	r3, r3, #2
 8003c14:	f003 0301 	and.w	r3, r3, #1
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d103      	bne.n	8003c24 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f000 f9f3 	bl	8004008 <I2C_MasterTransmit_TXE>
 8003c22:	e04d      	b.n	8003cc0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	089b      	lsrs	r3, r3, #2
 8003c28:	f003 0301 	and.w	r3, r3, #1
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	f000 80d6 	beq.w	8003dde <HAL_I2C_EV_IRQHandler+0x2d6>
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	0a5b      	lsrs	r3, r3, #9
 8003c36:	f003 0301 	and.w	r3, r3, #1
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	f000 80cf 	beq.w	8003dde <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003c40:	7bbb      	ldrb	r3, [r7, #14]
 8003c42:	2b21      	cmp	r3, #33	; 0x21
 8003c44:	d103      	bne.n	8003c4e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f000 fa7a 	bl	8004140 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c4c:	e0c7      	b.n	8003dde <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003c4e:	7bfb      	ldrb	r3, [r7, #15]
 8003c50:	2b40      	cmp	r3, #64	; 0x40
 8003c52:	f040 80c4 	bne.w	8003dde <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f000 fae8 	bl	800422c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c5c:	e0bf      	b.n	8003dde <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c6c:	f000 80b7 	beq.w	8003dde <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003c70:	69fb      	ldr	r3, [r7, #28]
 8003c72:	099b      	lsrs	r3, r3, #6
 8003c74:	f003 0301 	and.w	r3, r3, #1
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d00f      	beq.n	8003c9c <HAL_I2C_EV_IRQHandler+0x194>
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	0a9b      	lsrs	r3, r3, #10
 8003c80:	f003 0301 	and.w	r3, r3, #1
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d009      	beq.n	8003c9c <HAL_I2C_EV_IRQHandler+0x194>
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	089b      	lsrs	r3, r3, #2
 8003c8c:	f003 0301 	and.w	r3, r3, #1
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d103      	bne.n	8003c9c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f000 fb5d 	bl	8004354 <I2C_MasterReceive_RXNE>
 8003c9a:	e011      	b.n	8003cc0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	089b      	lsrs	r3, r3, #2
 8003ca0:	f003 0301 	and.w	r3, r3, #1
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	f000 809a 	beq.w	8003dde <HAL_I2C_EV_IRQHandler+0x2d6>
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	0a5b      	lsrs	r3, r3, #9
 8003cae:	f003 0301 	and.w	r3, r3, #1
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	f000 8093 	beq.w	8003dde <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f000 fc06 	bl	80044ca <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003cbe:	e08e      	b.n	8003dde <HAL_I2C_EV_IRQHandler+0x2d6>
 8003cc0:	e08d      	b.n	8003dde <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d004      	beq.n	8003cd4 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	695b      	ldr	r3, [r3, #20]
 8003cd0:	61fb      	str	r3, [r7, #28]
 8003cd2:	e007      	b.n	8003ce4 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	699b      	ldr	r3, [r3, #24]
 8003cda:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	695b      	ldr	r3, [r3, #20]
 8003ce2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	085b      	lsrs	r3, r3, #1
 8003ce8:	f003 0301 	and.w	r3, r3, #1
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d012      	beq.n	8003d16 <HAL_I2C_EV_IRQHandler+0x20e>
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	0a5b      	lsrs	r3, r3, #9
 8003cf4:	f003 0301 	and.w	r3, r3, #1
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d00c      	beq.n	8003d16 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d003      	beq.n	8003d0c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	699b      	ldr	r3, [r3, #24]
 8003d0a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003d0c:	69b9      	ldr	r1, [r7, #24]
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f000 ffc4 	bl	8004c9c <I2C_Slave_ADDR>
 8003d14:	e066      	b.n	8003de4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	091b      	lsrs	r3, r3, #4
 8003d1a:	f003 0301 	and.w	r3, r3, #1
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d009      	beq.n	8003d36 <HAL_I2C_EV_IRQHandler+0x22e>
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	0a5b      	lsrs	r3, r3, #9
 8003d26:	f003 0301 	and.w	r3, r3, #1
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d003      	beq.n	8003d36 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f000 fffe 	bl	8004d30 <I2C_Slave_STOPF>
 8003d34:	e056      	b.n	8003de4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003d36:	7bbb      	ldrb	r3, [r7, #14]
 8003d38:	2b21      	cmp	r3, #33	; 0x21
 8003d3a:	d002      	beq.n	8003d42 <HAL_I2C_EV_IRQHandler+0x23a>
 8003d3c:	7bbb      	ldrb	r3, [r7, #14]
 8003d3e:	2b29      	cmp	r3, #41	; 0x29
 8003d40:	d125      	bne.n	8003d8e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	09db      	lsrs	r3, r3, #7
 8003d46:	f003 0301 	and.w	r3, r3, #1
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d00f      	beq.n	8003d6e <HAL_I2C_EV_IRQHandler+0x266>
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	0a9b      	lsrs	r3, r3, #10
 8003d52:	f003 0301 	and.w	r3, r3, #1
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d009      	beq.n	8003d6e <HAL_I2C_EV_IRQHandler+0x266>
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	089b      	lsrs	r3, r3, #2
 8003d5e:	f003 0301 	and.w	r3, r3, #1
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d103      	bne.n	8003d6e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f000 feda 	bl	8004b20 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003d6c:	e039      	b.n	8003de2 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	089b      	lsrs	r3, r3, #2
 8003d72:	f003 0301 	and.w	r3, r3, #1
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d033      	beq.n	8003de2 <HAL_I2C_EV_IRQHandler+0x2da>
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	0a5b      	lsrs	r3, r3, #9
 8003d7e:	f003 0301 	and.w	r3, r3, #1
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d02d      	beq.n	8003de2 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f000 ff07 	bl	8004b9a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003d8c:	e029      	b.n	8003de2 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003d8e:	69fb      	ldr	r3, [r7, #28]
 8003d90:	099b      	lsrs	r3, r3, #6
 8003d92:	f003 0301 	and.w	r3, r3, #1
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d00f      	beq.n	8003dba <HAL_I2C_EV_IRQHandler+0x2b2>
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	0a9b      	lsrs	r3, r3, #10
 8003d9e:	f003 0301 	and.w	r3, r3, #1
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d009      	beq.n	8003dba <HAL_I2C_EV_IRQHandler+0x2b2>
 8003da6:	69fb      	ldr	r3, [r7, #28]
 8003da8:	089b      	lsrs	r3, r3, #2
 8003daa:	f003 0301 	and.w	r3, r3, #1
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d103      	bne.n	8003dba <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f000 ff12 	bl	8004bdc <I2C_SlaveReceive_RXNE>
 8003db8:	e014      	b.n	8003de4 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	089b      	lsrs	r3, r3, #2
 8003dbe:	f003 0301 	and.w	r3, r3, #1
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d00e      	beq.n	8003de4 <HAL_I2C_EV_IRQHandler+0x2dc>
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	0a5b      	lsrs	r3, r3, #9
 8003dca:	f003 0301 	and.w	r3, r3, #1
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d008      	beq.n	8003de4 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f000 ff40 	bl	8004c58 <I2C_SlaveReceive_BTF>
 8003dd8:	e004      	b.n	8003de4 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8003dda:	bf00      	nop
 8003ddc:	e002      	b.n	8003de4 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003dde:	bf00      	nop
 8003de0:	e000      	b.n	8003de4 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003de2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003de4:	3720      	adds	r7, #32
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}

08003dea <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003dea:	b580      	push	{r7, lr}
 8003dec:	b08a      	sub	sp, #40	; 0x28
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	695b      	ldr	r3, [r3, #20]
 8003df8:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003e02:	2300      	movs	r3, #0
 8003e04:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e0c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003e0e:	6a3b      	ldr	r3, [r7, #32]
 8003e10:	0a1b      	lsrs	r3, r3, #8
 8003e12:	f003 0301 	and.w	r3, r3, #1
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d00e      	beq.n	8003e38 <HAL_I2C_ER_IRQHandler+0x4e>
 8003e1a:	69fb      	ldr	r3, [r7, #28]
 8003e1c:	0a1b      	lsrs	r3, r3, #8
 8003e1e:	f003 0301 	and.w	r3, r3, #1
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d008      	beq.n	8003e38 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e28:	f043 0301 	orr.w	r3, r3, #1
 8003e2c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003e36:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003e38:	6a3b      	ldr	r3, [r7, #32]
 8003e3a:	0a5b      	lsrs	r3, r3, #9
 8003e3c:	f003 0301 	and.w	r3, r3, #1
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d00e      	beq.n	8003e62 <HAL_I2C_ER_IRQHandler+0x78>
 8003e44:	69fb      	ldr	r3, [r7, #28]
 8003e46:	0a1b      	lsrs	r3, r3, #8
 8003e48:	f003 0301 	and.w	r3, r3, #1
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d008      	beq.n	8003e62 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e52:	f043 0302 	orr.w	r3, r3, #2
 8003e56:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003e60:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003e62:	6a3b      	ldr	r3, [r7, #32]
 8003e64:	0a9b      	lsrs	r3, r3, #10
 8003e66:	f003 0301 	and.w	r3, r3, #1
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d03f      	beq.n	8003eee <HAL_I2C_ER_IRQHandler+0x104>
 8003e6e:	69fb      	ldr	r3, [r7, #28]
 8003e70:	0a1b      	lsrs	r3, r3, #8
 8003e72:	f003 0301 	and.w	r3, r3, #1
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d039      	beq.n	8003eee <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8003e7a:	7efb      	ldrb	r3, [r7, #27]
 8003e7c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e8c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e92:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003e94:	7ebb      	ldrb	r3, [r7, #26]
 8003e96:	2b20      	cmp	r3, #32
 8003e98:	d112      	bne.n	8003ec0 <HAL_I2C_ER_IRQHandler+0xd6>
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d10f      	bne.n	8003ec0 <HAL_I2C_ER_IRQHandler+0xd6>
 8003ea0:	7cfb      	ldrb	r3, [r7, #19]
 8003ea2:	2b21      	cmp	r3, #33	; 0x21
 8003ea4:	d008      	beq.n	8003eb8 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003ea6:	7cfb      	ldrb	r3, [r7, #19]
 8003ea8:	2b29      	cmp	r3, #41	; 0x29
 8003eaa:	d005      	beq.n	8003eb8 <HAL_I2C_ER_IRQHandler+0xce>
 8003eac:	7cfb      	ldrb	r3, [r7, #19]
 8003eae:	2b28      	cmp	r3, #40	; 0x28
 8003eb0:	d106      	bne.n	8003ec0 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2b21      	cmp	r3, #33	; 0x21
 8003eb6:	d103      	bne.n	8003ec0 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f001 f869 	bl	8004f90 <I2C_Slave_AF>
 8003ebe:	e016      	b.n	8003eee <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003ec8:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ecc:	f043 0304 	orr.w	r3, r3, #4
 8003ed0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003ed2:	7efb      	ldrb	r3, [r7, #27]
 8003ed4:	2b10      	cmp	r3, #16
 8003ed6:	d002      	beq.n	8003ede <HAL_I2C_ER_IRQHandler+0xf4>
 8003ed8:	7efb      	ldrb	r3, [r7, #27]
 8003eda:	2b40      	cmp	r3, #64	; 0x40
 8003edc:	d107      	bne.n	8003eee <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eec:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003eee:	6a3b      	ldr	r3, [r7, #32]
 8003ef0:	0adb      	lsrs	r3, r3, #11
 8003ef2:	f003 0301 	and.w	r3, r3, #1
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d00e      	beq.n	8003f18 <HAL_I2C_ER_IRQHandler+0x12e>
 8003efa:	69fb      	ldr	r3, [r7, #28]
 8003efc:	0a1b      	lsrs	r3, r3, #8
 8003efe:	f003 0301 	and.w	r3, r3, #1
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d008      	beq.n	8003f18 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f08:	f043 0308 	orr.w	r3, r3, #8
 8003f0c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8003f16:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d008      	beq.n	8003f30 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f24:	431a      	orrs	r2, r3
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f001 f8a0 	bl	8005070 <I2C_ITError>
  }
}
 8003f30:	bf00      	nop
 8003f32:	3728      	adds	r7, #40	; 0x28
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}

08003f38 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b083      	sub	sp, #12
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003f40:	bf00      	nop
 8003f42:	370c      	adds	r7, #12
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr

08003f4c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b083      	sub	sp, #12
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003f54:	bf00      	nop
 8003f56:	370c      	adds	r7, #12
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr

08003f60 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003f68:	bf00      	nop
 8003f6a:	370c      	adds	r7, #12
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr

08003f74 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b083      	sub	sp, #12
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003f7c:	bf00      	nop
 8003f7e:	370c      	adds	r7, #12
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr

08003f88 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b083      	sub	sp, #12
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	460b      	mov	r3, r1
 8003f92:	70fb      	strb	r3, [r7, #3]
 8003f94:	4613      	mov	r3, r2
 8003f96:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003f98:	bf00      	nop
 8003f9a:	370c      	adds	r7, #12
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr

08003fa4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b083      	sub	sp, #12
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003fac:	bf00      	nop
 8003fae:	370c      	adds	r7, #12
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr

08003fb8 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b083      	sub	sp, #12
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003fc0:	bf00      	nop
 8003fc2:	370c      	adds	r7, #12
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr

08003fcc <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b083      	sub	sp, #12
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003fd4:	bf00      	nop
 8003fd6:	370c      	adds	r7, #12
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr

08003fe0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b083      	sub	sp, #12
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003fe8:	bf00      	nop
 8003fea:	370c      	adds	r7, #12
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr

08003ff4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b083      	sub	sp, #12
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003ffc:	bf00      	nop
 8003ffe:	370c      	adds	r7, #12
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr

08004008 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b084      	sub	sp, #16
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004016:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800401e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004024:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800402a:	2b00      	cmp	r3, #0
 800402c:	d150      	bne.n	80040d0 <I2C_MasterTransmit_TXE+0xc8>
 800402e:	7bfb      	ldrb	r3, [r7, #15]
 8004030:	2b21      	cmp	r3, #33	; 0x21
 8004032:	d14d      	bne.n	80040d0 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	2b08      	cmp	r3, #8
 8004038:	d01d      	beq.n	8004076 <I2C_MasterTransmit_TXE+0x6e>
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	2b20      	cmp	r3, #32
 800403e:	d01a      	beq.n	8004076 <I2C_MasterTransmit_TXE+0x6e>
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004046:	d016      	beq.n	8004076 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	685a      	ldr	r2, [r3, #4]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004056:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2211      	movs	r2, #17
 800405c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2220      	movs	r2, #32
 800406a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f7ff ff62 	bl	8003f38 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004074:	e060      	b.n	8004138 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	685a      	ldr	r2, [r3, #4]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004084:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004094:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2200      	movs	r2, #0
 800409a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2220      	movs	r2, #32
 80040a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	2b40      	cmp	r3, #64	; 0x40
 80040ae:	d107      	bne.n	80040c0 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2200      	movs	r2, #0
 80040b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f7ff ff7d 	bl	8003fb8 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80040be:	e03b      	b.n	8004138 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f7ff ff35 	bl	8003f38 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80040ce:	e033      	b.n	8004138 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80040d0:	7bfb      	ldrb	r3, [r7, #15]
 80040d2:	2b21      	cmp	r3, #33	; 0x21
 80040d4:	d005      	beq.n	80040e2 <I2C_MasterTransmit_TXE+0xda>
 80040d6:	7bbb      	ldrb	r3, [r7, #14]
 80040d8:	2b40      	cmp	r3, #64	; 0x40
 80040da:	d12d      	bne.n	8004138 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80040dc:	7bfb      	ldrb	r3, [r7, #15]
 80040de:	2b22      	cmp	r3, #34	; 0x22
 80040e0:	d12a      	bne.n	8004138 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d108      	bne.n	80040fe <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	685a      	ldr	r2, [r3, #4]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040fa:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80040fc:	e01c      	b.n	8004138 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004104:	b2db      	uxtb	r3, r3
 8004106:	2b40      	cmp	r3, #64	; 0x40
 8004108:	d103      	bne.n	8004112 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f000 f88e 	bl	800422c <I2C_MemoryTransmit_TXE_BTF>
}
 8004110:	e012      	b.n	8004138 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004116:	781a      	ldrb	r2, [r3, #0]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004122:	1c5a      	adds	r2, r3, #1
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800412c:	b29b      	uxth	r3, r3
 800412e:	3b01      	subs	r3, #1
 8004130:	b29a      	uxth	r2, r3
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004136:	e7ff      	b.n	8004138 <I2C_MasterTransmit_TXE+0x130>
 8004138:	bf00      	nop
 800413a:	3710      	adds	r7, #16
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}

08004140 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b084      	sub	sp, #16
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800414c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004154:	b2db      	uxtb	r3, r3
 8004156:	2b21      	cmp	r3, #33	; 0x21
 8004158:	d164      	bne.n	8004224 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800415e:	b29b      	uxth	r3, r3
 8004160:	2b00      	cmp	r3, #0
 8004162:	d012      	beq.n	800418a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004168:	781a      	ldrb	r2, [r3, #0]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004174:	1c5a      	adds	r2, r3, #1
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800417e:	b29b      	uxth	r3, r3
 8004180:	3b01      	subs	r3, #1
 8004182:	b29a      	uxth	r2, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004188:	e04c      	b.n	8004224 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2b08      	cmp	r3, #8
 800418e:	d01d      	beq.n	80041cc <I2C_MasterTransmit_BTF+0x8c>
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2b20      	cmp	r3, #32
 8004194:	d01a      	beq.n	80041cc <I2C_MasterTransmit_BTF+0x8c>
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800419c:	d016      	beq.n	80041cc <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	685a      	ldr	r2, [r3, #4]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80041ac:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2211      	movs	r2, #17
 80041b2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2200      	movs	r2, #0
 80041b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2220      	movs	r2, #32
 80041c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	f7ff feb7 	bl	8003f38 <HAL_I2C_MasterTxCpltCallback>
}
 80041ca:	e02b      	b.n	8004224 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	685a      	ldr	r2, [r3, #4]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80041da:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041ea:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2200      	movs	r2, #0
 80041f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2220      	movs	r2, #32
 80041f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004200:	b2db      	uxtb	r3, r3
 8004202:	2b40      	cmp	r3, #64	; 0x40
 8004204:	d107      	bne.n	8004216 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f7ff fed2 	bl	8003fb8 <HAL_I2C_MemTxCpltCallback>
}
 8004214:	e006      	b.n	8004224 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f7ff fe8a 	bl	8003f38 <HAL_I2C_MasterTxCpltCallback>
}
 8004224:	bf00      	nop
 8004226:	3710      	adds	r7, #16
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}

0800422c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b084      	sub	sp, #16
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800423a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004240:	2b00      	cmp	r3, #0
 8004242:	d11d      	bne.n	8004280 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004248:	2b01      	cmp	r3, #1
 800424a:	d10b      	bne.n	8004264 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004250:	b2da      	uxtb	r2, r3
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800425c:	1c9a      	adds	r2, r3, #2
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004262:	e073      	b.n	800434c <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004268:	b29b      	uxth	r3, r3
 800426a:	121b      	asrs	r3, r3, #8
 800426c:	b2da      	uxtb	r2, r3
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004278:	1c5a      	adds	r2, r3, #1
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800427e:	e065      	b.n	800434c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004284:	2b01      	cmp	r3, #1
 8004286:	d10b      	bne.n	80042a0 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800428c:	b2da      	uxtb	r2, r3
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004298:	1c5a      	adds	r2, r3, #1
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800429e:	e055      	b.n	800434c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042a4:	2b02      	cmp	r3, #2
 80042a6:	d151      	bne.n	800434c <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80042a8:	7bfb      	ldrb	r3, [r7, #15]
 80042aa:	2b22      	cmp	r3, #34	; 0x22
 80042ac:	d10d      	bne.n	80042ca <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042bc:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042c2:	1c5a      	adds	r2, r3, #1
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80042c8:	e040      	b.n	800434c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d015      	beq.n	8004300 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80042d4:	7bfb      	ldrb	r3, [r7, #15]
 80042d6:	2b21      	cmp	r3, #33	; 0x21
 80042d8:	d112      	bne.n	8004300 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042de:	781a      	ldrb	r2, [r3, #0]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ea:	1c5a      	adds	r2, r3, #1
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	3b01      	subs	r3, #1
 80042f8:	b29a      	uxth	r2, r3
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80042fe:	e025      	b.n	800434c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004304:	b29b      	uxth	r3, r3
 8004306:	2b00      	cmp	r3, #0
 8004308:	d120      	bne.n	800434c <I2C_MemoryTransmit_TXE_BTF+0x120>
 800430a:	7bfb      	ldrb	r3, [r7, #15]
 800430c:	2b21      	cmp	r3, #33	; 0x21
 800430e:	d11d      	bne.n	800434c <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	685a      	ldr	r2, [r3, #4]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800431e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800432e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2200      	movs	r2, #0
 8004334:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2220      	movs	r2, #32
 800433a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f7ff fe36 	bl	8003fb8 <HAL_I2C_MemTxCpltCallback>
}
 800434c:	bf00      	nop
 800434e:	3710      	adds	r7, #16
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}

08004354 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b084      	sub	sp, #16
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004362:	b2db      	uxtb	r3, r3
 8004364:	2b22      	cmp	r3, #34	; 0x22
 8004366:	f040 80ac 	bne.w	80044c2 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800436e:	b29b      	uxth	r3, r3
 8004370:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2b03      	cmp	r3, #3
 8004376:	d921      	bls.n	80043bc <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	691a      	ldr	r2, [r3, #16]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004382:	b2d2      	uxtb	r2, r2
 8004384:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438a:	1c5a      	adds	r2, r3, #1
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004394:	b29b      	uxth	r3, r3
 8004396:	3b01      	subs	r3, #1
 8004398:	b29a      	uxth	r2, r3
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	2b03      	cmp	r3, #3
 80043a6:	f040 808c 	bne.w	80044c2 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	685a      	ldr	r2, [r3, #4]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043b8:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80043ba:	e082      	b.n	80044c2 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c0:	2b02      	cmp	r3, #2
 80043c2:	d075      	beq.n	80044b0 <I2C_MasterReceive_RXNE+0x15c>
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d002      	beq.n	80043d0 <I2C_MasterReceive_RXNE+0x7c>
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d16f      	bne.n	80044b0 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f001 fafd 	bl	80059d0 <I2C_WaitOnSTOPRequestThroughIT>
 80043d6:	4603      	mov	r3, r0
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d142      	bne.n	8004462 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043ea:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	685a      	ldr	r2, [r3, #4]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80043fa:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	691a      	ldr	r2, [r3, #16]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004406:	b2d2      	uxtb	r2, r2
 8004408:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440e:	1c5a      	adds	r2, r3, #1
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004418:	b29b      	uxth	r3, r3
 800441a:	3b01      	subs	r3, #1
 800441c:	b29a      	uxth	r2, r3
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2220      	movs	r2, #32
 8004426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004430:	b2db      	uxtb	r3, r3
 8004432:	2b40      	cmp	r3, #64	; 0x40
 8004434:	d10a      	bne.n	800444c <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2200      	movs	r2, #0
 8004442:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	f7ff fdc1 	bl	8003fcc <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800444a:	e03a      	b.n	80044c2 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2200      	movs	r2, #0
 8004450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2212      	movs	r2, #18
 8004458:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f7ff fd76 	bl	8003f4c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004460:	e02f      	b.n	80044c2 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	685a      	ldr	r2, [r3, #4]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004470:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	691a      	ldr	r2, [r3, #16]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447c:	b2d2      	uxtb	r2, r2
 800447e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004484:	1c5a      	adds	r2, r3, #1
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800448e:	b29b      	uxth	r3, r3
 8004490:	3b01      	subs	r3, #1
 8004492:	b29a      	uxth	r2, r3
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2220      	movs	r2, #32
 800449c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f7ff fd99 	bl	8003fe0 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80044ae:	e008      	b.n	80044c2 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	685a      	ldr	r2, [r3, #4]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044be:	605a      	str	r2, [r3, #4]
}
 80044c0:	e7ff      	b.n	80044c2 <I2C_MasterReceive_RXNE+0x16e>
 80044c2:	bf00      	nop
 80044c4:	3710      	adds	r7, #16
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}

080044ca <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80044ca:	b580      	push	{r7, lr}
 80044cc:	b084      	sub	sp, #16
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d6:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044dc:	b29b      	uxth	r3, r3
 80044de:	2b04      	cmp	r3, #4
 80044e0:	d11b      	bne.n	800451a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	685a      	ldr	r2, [r3, #4]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044f0:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	691a      	ldr	r2, [r3, #16]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fc:	b2d2      	uxtb	r2, r2
 80044fe:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004504:	1c5a      	adds	r2, r3, #1
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800450e:	b29b      	uxth	r3, r3
 8004510:	3b01      	subs	r3, #1
 8004512:	b29a      	uxth	r2, r3
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004518:	e0bd      	b.n	8004696 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800451e:	b29b      	uxth	r3, r3
 8004520:	2b03      	cmp	r3, #3
 8004522:	d129      	bne.n	8004578 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	685a      	ldr	r2, [r3, #4]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004532:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2b04      	cmp	r3, #4
 8004538:	d00a      	beq.n	8004550 <I2C_MasterReceive_BTF+0x86>
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2b02      	cmp	r3, #2
 800453e:	d007      	beq.n	8004550 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800454e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	691a      	ldr	r2, [r3, #16]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455a:	b2d2      	uxtb	r2, r2
 800455c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004562:	1c5a      	adds	r2, r3, #1
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800456c:	b29b      	uxth	r3, r3
 800456e:	3b01      	subs	r3, #1
 8004570:	b29a      	uxth	r2, r3
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004576:	e08e      	b.n	8004696 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800457c:	b29b      	uxth	r3, r3
 800457e:	2b02      	cmp	r3, #2
 8004580:	d176      	bne.n	8004670 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2b01      	cmp	r3, #1
 8004586:	d002      	beq.n	800458e <I2C_MasterReceive_BTF+0xc4>
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2b10      	cmp	r3, #16
 800458c:	d108      	bne.n	80045a0 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800459c:	601a      	str	r2, [r3, #0]
 800459e:	e019      	b.n	80045d4 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2b04      	cmp	r3, #4
 80045a4:	d002      	beq.n	80045ac <I2C_MasterReceive_BTF+0xe2>
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2b02      	cmp	r3, #2
 80045aa:	d108      	bne.n	80045be <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80045ba:	601a      	str	r2, [r3, #0]
 80045bc:	e00a      	b.n	80045d4 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2b10      	cmp	r3, #16
 80045c2:	d007      	beq.n	80045d4 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045d2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	691a      	ldr	r2, [r3, #16]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045de:	b2d2      	uxtb	r2, r2
 80045e0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e6:	1c5a      	adds	r2, r3, #1
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	3b01      	subs	r3, #1
 80045f4:	b29a      	uxth	r2, r3
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	691a      	ldr	r2, [r3, #16]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004604:	b2d2      	uxtb	r2, r2
 8004606:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460c:	1c5a      	adds	r2, r3, #1
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004616:	b29b      	uxth	r3, r3
 8004618:	3b01      	subs	r3, #1
 800461a:	b29a      	uxth	r2, r3
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	685a      	ldr	r2, [r3, #4]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800462e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2220      	movs	r2, #32
 8004634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800463e:	b2db      	uxtb	r3, r3
 8004640:	2b40      	cmp	r3, #64	; 0x40
 8004642:	d10a      	bne.n	800465a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f7ff fcba 	bl	8003fcc <HAL_I2C_MemRxCpltCallback>
}
 8004658:	e01d      	b.n	8004696 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2200      	movs	r2, #0
 800465e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2212      	movs	r2, #18
 8004666:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	f7ff fc6f 	bl	8003f4c <HAL_I2C_MasterRxCpltCallback>
}
 800466e:	e012      	b.n	8004696 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	691a      	ldr	r2, [r3, #16]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467a:	b2d2      	uxtb	r2, r2
 800467c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004682:	1c5a      	adds	r2, r3, #1
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800468c:	b29b      	uxth	r3, r3
 800468e:	3b01      	subs	r3, #1
 8004690:	b29a      	uxth	r2, r3
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004696:	bf00      	nop
 8004698:	3710      	adds	r7, #16
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}

0800469e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800469e:	b480      	push	{r7}
 80046a0:	b083      	sub	sp, #12
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	2b40      	cmp	r3, #64	; 0x40
 80046b0:	d117      	bne.n	80046e2 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d109      	bne.n	80046ce <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	461a      	mov	r2, r3
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80046ca:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80046cc:	e067      	b.n	800479e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	f043 0301 	orr.w	r3, r3, #1
 80046d8:	b2da      	uxtb	r2, r3
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	611a      	str	r2, [r3, #16]
}
 80046e0:	e05d      	b.n	800479e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	691b      	ldr	r3, [r3, #16]
 80046e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046ea:	d133      	bne.n	8004754 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	2b21      	cmp	r3, #33	; 0x21
 80046f6:	d109      	bne.n	800470c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	461a      	mov	r2, r3
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004708:	611a      	str	r2, [r3, #16]
 800470a:	e008      	b.n	800471e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004710:	b2db      	uxtb	r3, r3
 8004712:	f043 0301 	orr.w	r3, r3, #1
 8004716:	b2da      	uxtb	r2, r3
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004722:	2b00      	cmp	r3, #0
 8004724:	d004      	beq.n	8004730 <I2C_Master_SB+0x92>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800472a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800472c:	2b00      	cmp	r3, #0
 800472e:	d108      	bne.n	8004742 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004734:	2b00      	cmp	r3, #0
 8004736:	d032      	beq.n	800479e <I2C_Master_SB+0x100>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800473c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800473e:	2b00      	cmp	r3, #0
 8004740:	d02d      	beq.n	800479e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	685a      	ldr	r2, [r3, #4]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004750:	605a      	str	r2, [r3, #4]
}
 8004752:	e024      	b.n	800479e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004758:	2b00      	cmp	r3, #0
 800475a:	d10e      	bne.n	800477a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004760:	b29b      	uxth	r3, r3
 8004762:	11db      	asrs	r3, r3, #7
 8004764:	b2db      	uxtb	r3, r3
 8004766:	f003 0306 	and.w	r3, r3, #6
 800476a:	b2db      	uxtb	r3, r3
 800476c:	f063 030f 	orn	r3, r3, #15
 8004770:	b2da      	uxtb	r2, r3
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	611a      	str	r2, [r3, #16]
}
 8004778:	e011      	b.n	800479e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800477e:	2b01      	cmp	r3, #1
 8004780:	d10d      	bne.n	800479e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004786:	b29b      	uxth	r3, r3
 8004788:	11db      	asrs	r3, r3, #7
 800478a:	b2db      	uxtb	r3, r3
 800478c:	f003 0306 	and.w	r3, r3, #6
 8004790:	b2db      	uxtb	r3, r3
 8004792:	f063 030e 	orn	r3, r3, #14
 8004796:	b2da      	uxtb	r2, r3
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	611a      	str	r2, [r3, #16]
}
 800479e:	bf00      	nop
 80047a0:	370c      	adds	r7, #12
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr

080047aa <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80047aa:	b480      	push	{r7}
 80047ac:	b083      	sub	sp, #12
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047b6:	b2da      	uxtb	r2, r3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d004      	beq.n	80047d0 <I2C_Master_ADD10+0x26>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d108      	bne.n	80047e2 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d00c      	beq.n	80047f2 <I2C_Master_ADD10+0x48>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d007      	beq.n	80047f2 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	685a      	ldr	r2, [r3, #4]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047f0:	605a      	str	r2, [r3, #4]
  }
}
 80047f2:	bf00      	nop
 80047f4:	370c      	adds	r7, #12
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr

080047fe <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80047fe:	b480      	push	{r7}
 8004800:	b091      	sub	sp, #68	; 0x44
 8004802:	af00      	add	r7, sp, #0
 8004804:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800480c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004814:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800481a:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004822:	b2db      	uxtb	r3, r3
 8004824:	2b22      	cmp	r3, #34	; 0x22
 8004826:	f040 8169 	bne.w	8004afc <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800482e:	2b00      	cmp	r3, #0
 8004830:	d10f      	bne.n	8004852 <I2C_Master_ADDR+0x54>
 8004832:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004836:	2b40      	cmp	r3, #64	; 0x40
 8004838:	d10b      	bne.n	8004852 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800483a:	2300      	movs	r3, #0
 800483c:	633b      	str	r3, [r7, #48]	; 0x30
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	695b      	ldr	r3, [r3, #20]
 8004844:	633b      	str	r3, [r7, #48]	; 0x30
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	699b      	ldr	r3, [r3, #24]
 800484c:	633b      	str	r3, [r7, #48]	; 0x30
 800484e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004850:	e160      	b.n	8004b14 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004856:	2b00      	cmp	r3, #0
 8004858:	d11d      	bne.n	8004896 <I2C_Master_ADDR+0x98>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	691b      	ldr	r3, [r3, #16]
 800485e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004862:	d118      	bne.n	8004896 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004864:	2300      	movs	r3, #0
 8004866:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	695b      	ldr	r3, [r3, #20]
 800486e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	699b      	ldr	r3, [r3, #24]
 8004876:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004878:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004888:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800488e:	1c5a      	adds	r2, r3, #1
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	651a      	str	r2, [r3, #80]	; 0x50
 8004894:	e13e      	b.n	8004b14 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800489a:	b29b      	uxth	r3, r3
 800489c:	2b00      	cmp	r3, #0
 800489e:	d113      	bne.n	80048c8 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048a0:	2300      	movs	r3, #0
 80048a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	695b      	ldr	r3, [r3, #20]
 80048aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	699b      	ldr	r3, [r3, #24]
 80048b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80048b4:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048c4:	601a      	str	r2, [r3, #0]
 80048c6:	e115      	b.n	8004af4 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	f040 808a 	bne.w	80049e8 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80048d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048d6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80048da:	d137      	bne.n	800494c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048ea:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048fa:	d113      	bne.n	8004924 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800490a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800490c:	2300      	movs	r3, #0
 800490e:	627b      	str	r3, [r7, #36]	; 0x24
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	695b      	ldr	r3, [r3, #20]
 8004916:	627b      	str	r3, [r7, #36]	; 0x24
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	699b      	ldr	r3, [r3, #24]
 800491e:	627b      	str	r3, [r7, #36]	; 0x24
 8004920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004922:	e0e7      	b.n	8004af4 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004924:	2300      	movs	r3, #0
 8004926:	623b      	str	r3, [r7, #32]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	695b      	ldr	r3, [r3, #20]
 800492e:	623b      	str	r3, [r7, #32]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	699b      	ldr	r3, [r3, #24]
 8004936:	623b      	str	r3, [r7, #32]
 8004938:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004948:	601a      	str	r2, [r3, #0]
 800494a:	e0d3      	b.n	8004af4 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800494c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800494e:	2b08      	cmp	r3, #8
 8004950:	d02e      	beq.n	80049b0 <I2C_Master_ADDR+0x1b2>
 8004952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004954:	2b20      	cmp	r3, #32
 8004956:	d02b      	beq.n	80049b0 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800495a:	2b12      	cmp	r3, #18
 800495c:	d102      	bne.n	8004964 <I2C_Master_ADDR+0x166>
 800495e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004960:	2b01      	cmp	r3, #1
 8004962:	d125      	bne.n	80049b0 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004966:	2b04      	cmp	r3, #4
 8004968:	d00e      	beq.n	8004988 <I2C_Master_ADDR+0x18a>
 800496a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800496c:	2b02      	cmp	r3, #2
 800496e:	d00b      	beq.n	8004988 <I2C_Master_ADDR+0x18a>
 8004970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004972:	2b10      	cmp	r3, #16
 8004974:	d008      	beq.n	8004988 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004984:	601a      	str	r2, [r3, #0]
 8004986:	e007      	b.n	8004998 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004996:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004998:	2300      	movs	r3, #0
 800499a:	61fb      	str	r3, [r7, #28]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	695b      	ldr	r3, [r3, #20]
 80049a2:	61fb      	str	r3, [r7, #28]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	699b      	ldr	r3, [r3, #24]
 80049aa:	61fb      	str	r3, [r7, #28]
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	e0a1      	b.n	8004af4 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049be:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049c0:	2300      	movs	r3, #0
 80049c2:	61bb      	str	r3, [r7, #24]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	695b      	ldr	r3, [r3, #20]
 80049ca:	61bb      	str	r3, [r7, #24]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	699b      	ldr	r3, [r3, #24]
 80049d2:	61bb      	str	r3, [r7, #24]
 80049d4:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049e4:	601a      	str	r2, [r3, #0]
 80049e6:	e085      	b.n	8004af4 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	2b02      	cmp	r3, #2
 80049f0:	d14d      	bne.n	8004a8e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80049f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049f4:	2b04      	cmp	r3, #4
 80049f6:	d016      	beq.n	8004a26 <I2C_Master_ADDR+0x228>
 80049f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049fa:	2b02      	cmp	r3, #2
 80049fc:	d013      	beq.n	8004a26 <I2C_Master_ADDR+0x228>
 80049fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a00:	2b10      	cmp	r3, #16
 8004a02:	d010      	beq.n	8004a26 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a12:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a22:	601a      	str	r2, [r3, #0]
 8004a24:	e007      	b.n	8004a36 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a34:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a44:	d117      	bne.n	8004a76 <I2C_Master_ADDR+0x278>
 8004a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a48:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004a4c:	d00b      	beq.n	8004a66 <I2C_Master_ADDR+0x268>
 8004a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d008      	beq.n	8004a66 <I2C_Master_ADDR+0x268>
 8004a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a56:	2b08      	cmp	r3, #8
 8004a58:	d005      	beq.n	8004a66 <I2C_Master_ADDR+0x268>
 8004a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a5c:	2b10      	cmp	r3, #16
 8004a5e:	d002      	beq.n	8004a66 <I2C_Master_ADDR+0x268>
 8004a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a62:	2b20      	cmp	r3, #32
 8004a64:	d107      	bne.n	8004a76 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	685a      	ldr	r2, [r3, #4]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004a74:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a76:	2300      	movs	r3, #0
 8004a78:	617b      	str	r3, [r7, #20]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	695b      	ldr	r3, [r3, #20]
 8004a80:	617b      	str	r3, [r7, #20]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	699b      	ldr	r3, [r3, #24]
 8004a88:	617b      	str	r3, [r7, #20]
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	e032      	b.n	8004af4 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a9c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004aa8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004aac:	d117      	bne.n	8004ade <I2C_Master_ADDR+0x2e0>
 8004aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ab0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004ab4:	d00b      	beq.n	8004ace <I2C_Master_ADDR+0x2d0>
 8004ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d008      	beq.n	8004ace <I2C_Master_ADDR+0x2d0>
 8004abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004abe:	2b08      	cmp	r3, #8
 8004ac0:	d005      	beq.n	8004ace <I2C_Master_ADDR+0x2d0>
 8004ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ac4:	2b10      	cmp	r3, #16
 8004ac6:	d002      	beq.n	8004ace <I2C_Master_ADDR+0x2d0>
 8004ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aca:	2b20      	cmp	r3, #32
 8004acc:	d107      	bne.n	8004ade <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	685a      	ldr	r2, [r3, #4]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004adc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ade:	2300      	movs	r3, #0
 8004ae0:	613b      	str	r3, [r7, #16]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	695b      	ldr	r3, [r3, #20]
 8004ae8:	613b      	str	r3, [r7, #16]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	699b      	ldr	r3, [r3, #24]
 8004af0:	613b      	str	r3, [r7, #16]
 8004af2:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2200      	movs	r2, #0
 8004af8:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004afa:	e00b      	b.n	8004b14 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004afc:	2300      	movs	r3, #0
 8004afe:	60fb      	str	r3, [r7, #12]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	695b      	ldr	r3, [r3, #20]
 8004b06:	60fb      	str	r3, [r7, #12]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	699b      	ldr	r3, [r3, #24]
 8004b0e:	60fb      	str	r3, [r7, #12]
 8004b10:	68fb      	ldr	r3, [r7, #12]
}
 8004b12:	e7ff      	b.n	8004b14 <I2C_Master_ADDR+0x316>
 8004b14:	bf00      	nop
 8004b16:	3744      	adds	r7, #68	; 0x44
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr

08004b20 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b084      	sub	sp, #16
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b2e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d02b      	beq.n	8004b92 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b3e:	781a      	ldrb	r2, [r3, #0]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b4a:	1c5a      	adds	r2, r3, #1
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	3b01      	subs	r3, #1
 8004b58:	b29a      	uxth	r2, r3
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d114      	bne.n	8004b92 <I2C_SlaveTransmit_TXE+0x72>
 8004b68:	7bfb      	ldrb	r3, [r7, #15]
 8004b6a:	2b29      	cmp	r3, #41	; 0x29
 8004b6c:	d111      	bne.n	8004b92 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	685a      	ldr	r2, [r3, #4]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b7c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2221      	movs	r2, #33	; 0x21
 8004b82:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2228      	movs	r2, #40	; 0x28
 8004b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	f7ff f9e7 	bl	8003f60 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004b92:	bf00      	nop
 8004b94:	3710      	adds	r7, #16
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}

08004b9a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004b9a:	b480      	push	{r7}
 8004b9c:	b083      	sub	sp, #12
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d011      	beq.n	8004bd0 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb0:	781a      	ldrb	r2, [r3, #0]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bbc:	1c5a      	adds	r2, r3, #1
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bc6:	b29b      	uxth	r3, r3
 8004bc8:	3b01      	subs	r3, #1
 8004bca:	b29a      	uxth	r2, r3
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004bd0:	bf00      	nop
 8004bd2:	370c      	adds	r7, #12
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr

08004bdc <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b084      	sub	sp, #16
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bea:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d02c      	beq.n	8004c50 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	691a      	ldr	r2, [r3, #16]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c00:	b2d2      	uxtb	r2, r2
 8004c02:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c08:	1c5a      	adds	r2, r3, #1
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	3b01      	subs	r3, #1
 8004c16:	b29a      	uxth	r2, r3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c20:	b29b      	uxth	r3, r3
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d114      	bne.n	8004c50 <I2C_SlaveReceive_RXNE+0x74>
 8004c26:	7bfb      	ldrb	r3, [r7, #15]
 8004c28:	2b2a      	cmp	r3, #42	; 0x2a
 8004c2a:	d111      	bne.n	8004c50 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	685a      	ldr	r2, [r3, #4]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c3a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2222      	movs	r2, #34	; 0x22
 8004c40:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2228      	movs	r2, #40	; 0x28
 8004c46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f7ff f992 	bl	8003f74 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004c50:	bf00      	nop
 8004c52:	3710      	adds	r7, #16
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}

08004c58 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b083      	sub	sp, #12
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c64:	b29b      	uxth	r3, r3
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d012      	beq.n	8004c90 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	691a      	ldr	r2, [r3, #16]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c74:	b2d2      	uxtb	r2, r2
 8004c76:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7c:	1c5a      	adds	r2, r3, #1
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c86:	b29b      	uxth	r3, r3
 8004c88:	3b01      	subs	r3, #1
 8004c8a:	b29a      	uxth	r2, r3
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004c90:	bf00      	nop
 8004c92:	370c      	adds	r7, #12
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr

08004c9c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b084      	sub	sp, #16
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004cb6:	2b28      	cmp	r3, #40	; 0x28
 8004cb8:	d127      	bne.n	8004d0a <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	685a      	ldr	r2, [r3, #4]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cc8:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	089b      	lsrs	r3, r3, #2
 8004cce:	f003 0301 	and.w	r3, r3, #1
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d101      	bne.n	8004cda <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	09db      	lsrs	r3, r3, #7
 8004cde:	f003 0301 	and.w	r3, r3, #1
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d103      	bne.n	8004cee <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	68db      	ldr	r3, [r3, #12]
 8004cea:	81bb      	strh	r3, [r7, #12]
 8004cec:	e002      	b.n	8004cf4 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	699b      	ldr	r3, [r3, #24]
 8004cf2:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004cfc:	89ba      	ldrh	r2, [r7, #12]
 8004cfe:	7bfb      	ldrb	r3, [r7, #15]
 8004d00:	4619      	mov	r1, r3
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f7ff f940 	bl	8003f88 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004d08:	e00e      	b.n	8004d28 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	60bb      	str	r3, [r7, #8]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	695b      	ldr	r3, [r3, #20]
 8004d14:	60bb      	str	r3, [r7, #8]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	699b      	ldr	r3, [r3, #24]
 8004d1c:	60bb      	str	r3, [r7, #8]
 8004d1e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2200      	movs	r2, #0
 8004d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004d28:	bf00      	nop
 8004d2a:	3710      	adds	r7, #16
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}

08004d30 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b084      	sub	sp, #16
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d3e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	685a      	ldr	r2, [r3, #4]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004d4e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004d50:	2300      	movs	r3, #0
 8004d52:	60bb      	str	r3, [r7, #8]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	695b      	ldr	r3, [r3, #20]
 8004d5a:	60bb      	str	r3, [r7, #8]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f042 0201 	orr.w	r2, r2, #1
 8004d6a:	601a      	str	r2, [r3, #0]
 8004d6c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d7c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d8c:	d172      	bne.n	8004e74 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004d8e:	7bfb      	ldrb	r3, [r7, #15]
 8004d90:	2b22      	cmp	r3, #34	; 0x22
 8004d92:	d002      	beq.n	8004d9a <I2C_Slave_STOPF+0x6a>
 8004d94:	7bfb      	ldrb	r3, [r7, #15]
 8004d96:	2b2a      	cmp	r3, #42	; 0x2a
 8004d98:	d135      	bne.n	8004e06 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	b29a      	uxth	r2, r3
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d005      	beq.n	8004dbe <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db6:	f043 0204 	orr.w	r2, r3, #4
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	685a      	ldr	r2, [r3, #4]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004dcc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f7fe f855 	bl	8002e82 <HAL_DMA_GetState>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d049      	beq.n	8004e72 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de2:	4a69      	ldr	r2, [pc, #420]	; (8004f88 <I2C_Slave_STOPF+0x258>)
 8004de4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dea:	4618      	mov	r0, r3
 8004dec:	f7fe f827 	bl	8002e3e <HAL_DMA_Abort_IT>
 8004df0:	4603      	mov	r3, r0
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d03d      	beq.n	8004e72 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dfc:	687a      	ldr	r2, [r7, #4]
 8004dfe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004e00:	4610      	mov	r0, r2
 8004e02:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004e04:	e035      	b.n	8004e72 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	b29a      	uxth	r2, r3
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d005      	beq.n	8004e2a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e22:	f043 0204 	orr.w	r2, r3, #4
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	685a      	ldr	r2, [r3, #4]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e38:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f7fe f81f 	bl	8002e82 <HAL_DMA_GetState>
 8004e44:	4603      	mov	r3, r0
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d014      	beq.n	8004e74 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e4e:	4a4e      	ldr	r2, [pc, #312]	; (8004f88 <I2C_Slave_STOPF+0x258>)
 8004e50:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e56:	4618      	mov	r0, r3
 8004e58:	f7fd fff1 	bl	8002e3e <HAL_DMA_Abort_IT>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d008      	beq.n	8004e74 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e68:	687a      	ldr	r2, [r7, #4]
 8004e6a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004e6c:	4610      	mov	r0, r2
 8004e6e:	4798      	blx	r3
 8004e70:	e000      	b.n	8004e74 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004e72:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d03e      	beq.n	8004efc <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	695b      	ldr	r3, [r3, #20]
 8004e84:	f003 0304 	and.w	r3, r3, #4
 8004e88:	2b04      	cmp	r3, #4
 8004e8a:	d112      	bne.n	8004eb2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	691a      	ldr	r2, [r3, #16]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e96:	b2d2      	uxtb	r2, r2
 8004e98:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9e:	1c5a      	adds	r2, r3, #1
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ea8:	b29b      	uxth	r3, r3
 8004eaa:	3b01      	subs	r3, #1
 8004eac:	b29a      	uxth	r2, r3
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	695b      	ldr	r3, [r3, #20]
 8004eb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ebc:	2b40      	cmp	r3, #64	; 0x40
 8004ebe:	d112      	bne.n	8004ee6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	691a      	ldr	r2, [r3, #16]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eca:	b2d2      	uxtb	r2, r2
 8004ecc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed2:	1c5a      	adds	r2, r3, #1
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004edc:	b29b      	uxth	r3, r3
 8004ede:	3b01      	subs	r3, #1
 8004ee0:	b29a      	uxth	r2, r3
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d005      	beq.n	8004efc <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef4:	f043 0204 	orr.w	r2, r3, #4
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d003      	beq.n	8004f0c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f000 f8b3 	bl	8005070 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004f0a:	e039      	b.n	8004f80 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004f0c:	7bfb      	ldrb	r3, [r7, #15]
 8004f0e:	2b2a      	cmp	r3, #42	; 0x2a
 8004f10:	d109      	bne.n	8004f26 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2200      	movs	r2, #0
 8004f16:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2228      	movs	r2, #40	; 0x28
 8004f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f7ff f827 	bl	8003f74 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	2b28      	cmp	r3, #40	; 0x28
 8004f30:	d111      	bne.n	8004f56 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	4a15      	ldr	r2, [pc, #84]	; (8004f8c <I2C_Slave_STOPF+0x25c>)
 8004f36:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2220      	movs	r2, #32
 8004f42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f7ff f828 	bl	8003fa4 <HAL_I2C_ListenCpltCallback>
}
 8004f54:	e014      	b.n	8004f80 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f5a:	2b22      	cmp	r3, #34	; 0x22
 8004f5c:	d002      	beq.n	8004f64 <I2C_Slave_STOPF+0x234>
 8004f5e:	7bfb      	ldrb	r3, [r7, #15]
 8004f60:	2b22      	cmp	r3, #34	; 0x22
 8004f62:	d10d      	bne.n	8004f80 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2200      	movs	r2, #0
 8004f68:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2220      	movs	r2, #32
 8004f6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2200      	movs	r2, #0
 8004f76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f7fe fffa 	bl	8003f74 <HAL_I2C_SlaveRxCpltCallback>
}
 8004f80:	bf00      	nop
 8004f82:	3710      	adds	r7, #16
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}
 8004f88:	080055d1 	.word	0x080055d1
 8004f8c:	ffff0000 	.word	0xffff0000

08004f90 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b084      	sub	sp, #16
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f9e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa4:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	2b08      	cmp	r3, #8
 8004faa:	d002      	beq.n	8004fb2 <I2C_Slave_AF+0x22>
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	2b20      	cmp	r3, #32
 8004fb0:	d129      	bne.n	8005006 <I2C_Slave_AF+0x76>
 8004fb2:	7bfb      	ldrb	r3, [r7, #15]
 8004fb4:	2b28      	cmp	r3, #40	; 0x28
 8004fb6:	d126      	bne.n	8005006 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	4a2c      	ldr	r2, [pc, #176]	; (800506c <I2C_Slave_AF+0xdc>)
 8004fbc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	685a      	ldr	r2, [r3, #4]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004fcc:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004fd6:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fe6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2200      	movs	r2, #0
 8004fec:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2220      	movs	r2, #32
 8004ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f7fe ffd0 	bl	8003fa4 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005004:	e02e      	b.n	8005064 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005006:	7bfb      	ldrb	r3, [r7, #15]
 8005008:	2b21      	cmp	r3, #33	; 0x21
 800500a:	d126      	bne.n	800505a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	4a17      	ldr	r2, [pc, #92]	; (800506c <I2C_Slave_AF+0xdc>)
 8005010:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2221      	movs	r2, #33	; 0x21
 8005016:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2220      	movs	r2, #32
 800501c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2200      	movs	r2, #0
 8005024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	685a      	ldr	r2, [r3, #4]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005036:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005040:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005050:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f7fe ff84 	bl	8003f60 <HAL_I2C_SlaveTxCpltCallback>
}
 8005058:	e004      	b.n	8005064 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005062:	615a      	str	r2, [r3, #20]
}
 8005064:	bf00      	nop
 8005066:	3710      	adds	r7, #16
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}
 800506c:	ffff0000 	.word	0xffff0000

08005070 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b084      	sub	sp, #16
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800507e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005086:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005088:	7bbb      	ldrb	r3, [r7, #14]
 800508a:	2b10      	cmp	r3, #16
 800508c:	d002      	beq.n	8005094 <I2C_ITError+0x24>
 800508e:	7bbb      	ldrb	r3, [r7, #14]
 8005090:	2b40      	cmp	r3, #64	; 0x40
 8005092:	d10a      	bne.n	80050aa <I2C_ITError+0x3a>
 8005094:	7bfb      	ldrb	r3, [r7, #15]
 8005096:	2b22      	cmp	r3, #34	; 0x22
 8005098:	d107      	bne.n	80050aa <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80050a8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80050aa:	7bfb      	ldrb	r3, [r7, #15]
 80050ac:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80050b0:	2b28      	cmp	r3, #40	; 0x28
 80050b2:	d107      	bne.n	80050c4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2200      	movs	r2, #0
 80050b8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2228      	movs	r2, #40	; 0x28
 80050be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80050c2:	e015      	b.n	80050f0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050d2:	d00a      	beq.n	80050ea <I2C_ITError+0x7a>
 80050d4:	7bfb      	ldrb	r3, [r7, #15]
 80050d6:	2b60      	cmp	r3, #96	; 0x60
 80050d8:	d007      	beq.n	80050ea <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2220      	movs	r2, #32
 80050de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2200      	movs	r2, #0
 80050e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2200      	movs	r2, #0
 80050ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050fe:	d162      	bne.n	80051c6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	685a      	ldr	r2, [r3, #4]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800510e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005114:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005118:	b2db      	uxtb	r3, r3
 800511a:	2b01      	cmp	r3, #1
 800511c:	d020      	beq.n	8005160 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005122:	4a6a      	ldr	r2, [pc, #424]	; (80052cc <I2C_ITError+0x25c>)
 8005124:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800512a:	4618      	mov	r0, r3
 800512c:	f7fd fe87 	bl	8002e3e <HAL_DMA_Abort_IT>
 8005130:	4603      	mov	r3, r0
 8005132:	2b00      	cmp	r3, #0
 8005134:	f000 8089 	beq.w	800524a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	681a      	ldr	r2, [r3, #0]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f022 0201 	bic.w	r2, r2, #1
 8005146:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2220      	movs	r2, #32
 800514c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005154:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005156:	687a      	ldr	r2, [r7, #4]
 8005158:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800515a:	4610      	mov	r0, r2
 800515c:	4798      	blx	r3
 800515e:	e074      	b.n	800524a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005164:	4a59      	ldr	r2, [pc, #356]	; (80052cc <I2C_ITError+0x25c>)
 8005166:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800516c:	4618      	mov	r0, r3
 800516e:	f7fd fe66 	bl	8002e3e <HAL_DMA_Abort_IT>
 8005172:	4603      	mov	r3, r0
 8005174:	2b00      	cmp	r3, #0
 8005176:	d068      	beq.n	800524a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	695b      	ldr	r3, [r3, #20]
 800517e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005182:	2b40      	cmp	r3, #64	; 0x40
 8005184:	d10b      	bne.n	800519e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	691a      	ldr	r2, [r3, #16]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005190:	b2d2      	uxtb	r2, r2
 8005192:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005198:	1c5a      	adds	r2, r3, #1
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f022 0201 	bic.w	r2, r2, #1
 80051ac:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2220      	movs	r2, #32
 80051b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051bc:	687a      	ldr	r2, [r7, #4]
 80051be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80051c0:	4610      	mov	r0, r2
 80051c2:	4798      	blx	r3
 80051c4:	e041      	b.n	800524a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	2b60      	cmp	r3, #96	; 0x60
 80051d0:	d125      	bne.n	800521e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2220      	movs	r2, #32
 80051d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2200      	movs	r2, #0
 80051de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	695b      	ldr	r3, [r3, #20]
 80051e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051ea:	2b40      	cmp	r3, #64	; 0x40
 80051ec:	d10b      	bne.n	8005206 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	691a      	ldr	r2, [r3, #16]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f8:	b2d2      	uxtb	r2, r2
 80051fa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005200:	1c5a      	adds	r2, r3, #1
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f022 0201 	bic.w	r2, r2, #1
 8005214:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f7fe feec 	bl	8003ff4 <HAL_I2C_AbortCpltCallback>
 800521c:	e015      	b.n	800524a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	695b      	ldr	r3, [r3, #20]
 8005224:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005228:	2b40      	cmp	r3, #64	; 0x40
 800522a:	d10b      	bne.n	8005244 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	691a      	ldr	r2, [r3, #16]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005236:	b2d2      	uxtb	r2, r2
 8005238:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523e:	1c5a      	adds	r2, r3, #1
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f7fe fecb 	bl	8003fe0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800524e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	f003 0301 	and.w	r3, r3, #1
 8005256:	2b00      	cmp	r3, #0
 8005258:	d10e      	bne.n	8005278 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005260:	2b00      	cmp	r3, #0
 8005262:	d109      	bne.n	8005278 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800526a:	2b00      	cmp	r3, #0
 800526c:	d104      	bne.n	8005278 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005274:	2b00      	cmp	r3, #0
 8005276:	d007      	beq.n	8005288 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	685a      	ldr	r2, [r3, #4]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005286:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800528e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005294:	f003 0304 	and.w	r3, r3, #4
 8005298:	2b04      	cmp	r3, #4
 800529a:	d113      	bne.n	80052c4 <I2C_ITError+0x254>
 800529c:	7bfb      	ldrb	r3, [r7, #15]
 800529e:	2b28      	cmp	r3, #40	; 0x28
 80052a0:	d110      	bne.n	80052c4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4a0a      	ldr	r2, [pc, #40]	; (80052d0 <I2C_ITError+0x260>)
 80052a6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2200      	movs	r2, #0
 80052ac:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2220      	movs	r2, #32
 80052b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2200      	movs	r2, #0
 80052ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f7fe fe70 	bl	8003fa4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80052c4:	bf00      	nop
 80052c6:	3710      	adds	r7, #16
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}
 80052cc:	080055d1 	.word	0x080055d1
 80052d0:	ffff0000 	.word	0xffff0000

080052d4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b088      	sub	sp, #32
 80052d8:	af02      	add	r7, sp, #8
 80052da:	60f8      	str	r0, [r7, #12]
 80052dc:	4608      	mov	r0, r1
 80052de:	4611      	mov	r1, r2
 80052e0:	461a      	mov	r2, r3
 80052e2:	4603      	mov	r3, r0
 80052e4:	817b      	strh	r3, [r7, #10]
 80052e6:	460b      	mov	r3, r1
 80052e8:	813b      	strh	r3, [r7, #8]
 80052ea:	4613      	mov	r3, r2
 80052ec:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052fc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80052fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005300:	9300      	str	r3, [sp, #0]
 8005302:	6a3b      	ldr	r3, [r7, #32]
 8005304:	2200      	movs	r2, #0
 8005306:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800530a:	68f8      	ldr	r0, [r7, #12]
 800530c:	f000 fa08 	bl	8005720 <I2C_WaitOnFlagUntilTimeout>
 8005310:	4603      	mov	r3, r0
 8005312:	2b00      	cmp	r3, #0
 8005314:	d00d      	beq.n	8005332 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005320:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005324:	d103      	bne.n	800532e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	f44f 7200 	mov.w	r2, #512	; 0x200
 800532c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800532e:	2303      	movs	r3, #3
 8005330:	e05f      	b.n	80053f2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005332:	897b      	ldrh	r3, [r7, #10]
 8005334:	b2db      	uxtb	r3, r3
 8005336:	461a      	mov	r2, r3
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005340:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005344:	6a3a      	ldr	r2, [r7, #32]
 8005346:	492d      	ldr	r1, [pc, #180]	; (80053fc <I2C_RequestMemoryWrite+0x128>)
 8005348:	68f8      	ldr	r0, [r7, #12]
 800534a:	f000 fa40 	bl	80057ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800534e:	4603      	mov	r3, r0
 8005350:	2b00      	cmp	r3, #0
 8005352:	d001      	beq.n	8005358 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	e04c      	b.n	80053f2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005358:	2300      	movs	r3, #0
 800535a:	617b      	str	r3, [r7, #20]
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	695b      	ldr	r3, [r3, #20]
 8005362:	617b      	str	r3, [r7, #20]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	699b      	ldr	r3, [r3, #24]
 800536a:	617b      	str	r3, [r7, #20]
 800536c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800536e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005370:	6a39      	ldr	r1, [r7, #32]
 8005372:	68f8      	ldr	r0, [r7, #12]
 8005374:	f000 faaa 	bl	80058cc <I2C_WaitOnTXEFlagUntilTimeout>
 8005378:	4603      	mov	r3, r0
 800537a:	2b00      	cmp	r3, #0
 800537c:	d00d      	beq.n	800539a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005382:	2b04      	cmp	r3, #4
 8005384:	d107      	bne.n	8005396 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005394:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	e02b      	b.n	80053f2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800539a:	88fb      	ldrh	r3, [r7, #6]
 800539c:	2b01      	cmp	r3, #1
 800539e:	d105      	bne.n	80053ac <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80053a0:	893b      	ldrh	r3, [r7, #8]
 80053a2:	b2da      	uxtb	r2, r3
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	611a      	str	r2, [r3, #16]
 80053aa:	e021      	b.n	80053f0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80053ac:	893b      	ldrh	r3, [r7, #8]
 80053ae:	0a1b      	lsrs	r3, r3, #8
 80053b0:	b29b      	uxth	r3, r3
 80053b2:	b2da      	uxtb	r2, r3
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053bc:	6a39      	ldr	r1, [r7, #32]
 80053be:	68f8      	ldr	r0, [r7, #12]
 80053c0:	f000 fa84 	bl	80058cc <I2C_WaitOnTXEFlagUntilTimeout>
 80053c4:	4603      	mov	r3, r0
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d00d      	beq.n	80053e6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ce:	2b04      	cmp	r3, #4
 80053d0:	d107      	bne.n	80053e2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053e0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	e005      	b.n	80053f2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80053e6:	893b      	ldrh	r3, [r7, #8]
 80053e8:	b2da      	uxtb	r2, r3
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80053f0:	2300      	movs	r3, #0
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3718      	adds	r7, #24
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}
 80053fa:	bf00      	nop
 80053fc:	00010002 	.word	0x00010002

08005400 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b088      	sub	sp, #32
 8005404:	af02      	add	r7, sp, #8
 8005406:	60f8      	str	r0, [r7, #12]
 8005408:	4608      	mov	r0, r1
 800540a:	4611      	mov	r1, r2
 800540c:	461a      	mov	r2, r3
 800540e:	4603      	mov	r3, r0
 8005410:	817b      	strh	r3, [r7, #10]
 8005412:	460b      	mov	r3, r1
 8005414:	813b      	strh	r3, [r7, #8]
 8005416:	4613      	mov	r3, r2
 8005418:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005428:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005438:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800543a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543c:	9300      	str	r3, [sp, #0]
 800543e:	6a3b      	ldr	r3, [r7, #32]
 8005440:	2200      	movs	r2, #0
 8005442:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005446:	68f8      	ldr	r0, [r7, #12]
 8005448:	f000 f96a 	bl	8005720 <I2C_WaitOnFlagUntilTimeout>
 800544c:	4603      	mov	r3, r0
 800544e:	2b00      	cmp	r3, #0
 8005450:	d00d      	beq.n	800546e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800545c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005460:	d103      	bne.n	800546a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005468:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800546a:	2303      	movs	r3, #3
 800546c:	e0aa      	b.n	80055c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800546e:	897b      	ldrh	r3, [r7, #10]
 8005470:	b2db      	uxtb	r3, r3
 8005472:	461a      	mov	r2, r3
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800547c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800547e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005480:	6a3a      	ldr	r2, [r7, #32]
 8005482:	4952      	ldr	r1, [pc, #328]	; (80055cc <I2C_RequestMemoryRead+0x1cc>)
 8005484:	68f8      	ldr	r0, [r7, #12]
 8005486:	f000 f9a2 	bl	80057ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800548a:	4603      	mov	r3, r0
 800548c:	2b00      	cmp	r3, #0
 800548e:	d001      	beq.n	8005494 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005490:	2301      	movs	r3, #1
 8005492:	e097      	b.n	80055c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005494:	2300      	movs	r3, #0
 8005496:	617b      	str	r3, [r7, #20]
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	695b      	ldr	r3, [r3, #20]
 800549e:	617b      	str	r3, [r7, #20]
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	699b      	ldr	r3, [r3, #24]
 80054a6:	617b      	str	r3, [r7, #20]
 80054a8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054ac:	6a39      	ldr	r1, [r7, #32]
 80054ae:	68f8      	ldr	r0, [r7, #12]
 80054b0:	f000 fa0c 	bl	80058cc <I2C_WaitOnTXEFlagUntilTimeout>
 80054b4:	4603      	mov	r3, r0
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d00d      	beq.n	80054d6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054be:	2b04      	cmp	r3, #4
 80054c0:	d107      	bne.n	80054d2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054d0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	e076      	b.n	80055c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80054d6:	88fb      	ldrh	r3, [r7, #6]
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d105      	bne.n	80054e8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80054dc:	893b      	ldrh	r3, [r7, #8]
 80054de:	b2da      	uxtb	r2, r3
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	611a      	str	r2, [r3, #16]
 80054e6:	e021      	b.n	800552c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80054e8:	893b      	ldrh	r3, [r7, #8]
 80054ea:	0a1b      	lsrs	r3, r3, #8
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	b2da      	uxtb	r2, r3
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054f8:	6a39      	ldr	r1, [r7, #32]
 80054fa:	68f8      	ldr	r0, [r7, #12]
 80054fc:	f000 f9e6 	bl	80058cc <I2C_WaitOnTXEFlagUntilTimeout>
 8005500:	4603      	mov	r3, r0
 8005502:	2b00      	cmp	r3, #0
 8005504:	d00d      	beq.n	8005522 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800550a:	2b04      	cmp	r3, #4
 800550c:	d107      	bne.n	800551e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800551c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	e050      	b.n	80055c4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005522:	893b      	ldrh	r3, [r7, #8]
 8005524:	b2da      	uxtb	r2, r3
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800552c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800552e:	6a39      	ldr	r1, [r7, #32]
 8005530:	68f8      	ldr	r0, [r7, #12]
 8005532:	f000 f9cb 	bl	80058cc <I2C_WaitOnTXEFlagUntilTimeout>
 8005536:	4603      	mov	r3, r0
 8005538:	2b00      	cmp	r3, #0
 800553a:	d00d      	beq.n	8005558 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005540:	2b04      	cmp	r3, #4
 8005542:	d107      	bne.n	8005554 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005552:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005554:	2301      	movs	r3, #1
 8005556:	e035      	b.n	80055c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005566:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800556a:	9300      	str	r3, [sp, #0]
 800556c:	6a3b      	ldr	r3, [r7, #32]
 800556e:	2200      	movs	r2, #0
 8005570:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005574:	68f8      	ldr	r0, [r7, #12]
 8005576:	f000 f8d3 	bl	8005720 <I2C_WaitOnFlagUntilTimeout>
 800557a:	4603      	mov	r3, r0
 800557c:	2b00      	cmp	r3, #0
 800557e:	d00d      	beq.n	800559c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800558a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800558e:	d103      	bne.n	8005598 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005596:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005598:	2303      	movs	r3, #3
 800559a:	e013      	b.n	80055c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800559c:	897b      	ldrh	r3, [r7, #10]
 800559e:	b2db      	uxtb	r3, r3
 80055a0:	f043 0301 	orr.w	r3, r3, #1
 80055a4:	b2da      	uxtb	r2, r3
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80055ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ae:	6a3a      	ldr	r2, [r7, #32]
 80055b0:	4906      	ldr	r1, [pc, #24]	; (80055cc <I2C_RequestMemoryRead+0x1cc>)
 80055b2:	68f8      	ldr	r0, [r7, #12]
 80055b4:	f000 f90b 	bl	80057ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d001      	beq.n	80055c2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	e000      	b.n	80055c4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80055c2:	2300      	movs	r3, #0
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3718      	adds	r7, #24
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}
 80055cc:	00010002 	.word	0x00010002

080055d0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b086      	sub	sp, #24
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80055d8:	2300      	movs	r3, #0
 80055da:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055e0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055e8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80055ea:	4b4b      	ldr	r3, [pc, #300]	; (8005718 <I2C_DMAAbort+0x148>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	08db      	lsrs	r3, r3, #3
 80055f0:	4a4a      	ldr	r2, [pc, #296]	; (800571c <I2C_DMAAbort+0x14c>)
 80055f2:	fba2 2303 	umull	r2, r3, r2, r3
 80055f6:	0a1a      	lsrs	r2, r3, #8
 80055f8:	4613      	mov	r3, r2
 80055fa:	009b      	lsls	r3, r3, #2
 80055fc:	4413      	add	r3, r2
 80055fe:	00da      	lsls	r2, r3, #3
 8005600:	1ad3      	subs	r3, r2, r3
 8005602:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d106      	bne.n	8005618 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800560e:	f043 0220 	orr.w	r2, r3, #32
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8005616:	e00a      	b.n	800562e <I2C_DMAAbort+0x5e>
    }
    count--;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	3b01      	subs	r3, #1
 800561c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005628:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800562c:	d0ea      	beq.n	8005604 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005632:	2b00      	cmp	r3, #0
 8005634:	d003      	beq.n	800563e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800563a:	2200      	movs	r2, #0
 800563c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005642:	2b00      	cmp	r3, #0
 8005644:	d003      	beq.n	800564e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800564a:	2200      	movs	r2, #0
 800564c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800565c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	2200      	movs	r2, #0
 8005662:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005668:	2b00      	cmp	r3, #0
 800566a:	d003      	beq.n	8005674 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005670:	2200      	movs	r2, #0
 8005672:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005678:	2b00      	cmp	r3, #0
 800567a:	d003      	beq.n	8005684 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005680:	2200      	movs	r2, #0
 8005682:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f022 0201 	bic.w	r2, r2, #1
 8005692:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800569a:	b2db      	uxtb	r3, r3
 800569c:	2b60      	cmp	r3, #96	; 0x60
 800569e:	d10e      	bne.n	80056be <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	2220      	movs	r2, #32
 80056a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	2200      	movs	r2, #0
 80056ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	2200      	movs	r2, #0
 80056b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80056b6:	6978      	ldr	r0, [r7, #20]
 80056b8:	f7fe fc9c 	bl	8003ff4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80056bc:	e027      	b.n	800570e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80056be:	7cfb      	ldrb	r3, [r7, #19]
 80056c0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80056c4:	2b28      	cmp	r3, #40	; 0x28
 80056c6:	d117      	bne.n	80056f8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	681a      	ldr	r2, [r3, #0]
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f042 0201 	orr.w	r2, r2, #1
 80056d6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80056e6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	2200      	movs	r2, #0
 80056ec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	2228      	movs	r2, #40	; 0x28
 80056f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80056f6:	e007      	b.n	8005708 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	2220      	movs	r2, #32
 80056fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	2200      	movs	r2, #0
 8005704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005708:	6978      	ldr	r0, [r7, #20]
 800570a:	f7fe fc69 	bl	8003fe0 <HAL_I2C_ErrorCallback>
}
 800570e:	bf00      	nop
 8005710:	3718      	adds	r7, #24
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}
 8005716:	bf00      	nop
 8005718:	20000004 	.word	0x20000004
 800571c:	14f8b589 	.word	0x14f8b589

08005720 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b084      	sub	sp, #16
 8005724:	af00      	add	r7, sp, #0
 8005726:	60f8      	str	r0, [r7, #12]
 8005728:	60b9      	str	r1, [r7, #8]
 800572a:	603b      	str	r3, [r7, #0]
 800572c:	4613      	mov	r3, r2
 800572e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005730:	e025      	b.n	800577e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005738:	d021      	beq.n	800577e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800573a:	f7fd fa3f 	bl	8002bbc <HAL_GetTick>
 800573e:	4602      	mov	r2, r0
 8005740:	69bb      	ldr	r3, [r7, #24]
 8005742:	1ad3      	subs	r3, r2, r3
 8005744:	683a      	ldr	r2, [r7, #0]
 8005746:	429a      	cmp	r2, r3
 8005748:	d302      	bcc.n	8005750 <I2C_WaitOnFlagUntilTimeout+0x30>
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d116      	bne.n	800577e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2200      	movs	r2, #0
 8005754:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2220      	movs	r2, #32
 800575a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2200      	movs	r2, #0
 8005762:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800576a:	f043 0220 	orr.w	r2, r3, #32
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2200      	movs	r2, #0
 8005776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800577a:	2301      	movs	r3, #1
 800577c:	e023      	b.n	80057c6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	0c1b      	lsrs	r3, r3, #16
 8005782:	b2db      	uxtb	r3, r3
 8005784:	2b01      	cmp	r3, #1
 8005786:	d10d      	bne.n	80057a4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	695b      	ldr	r3, [r3, #20]
 800578e:	43da      	mvns	r2, r3
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	4013      	ands	r3, r2
 8005794:	b29b      	uxth	r3, r3
 8005796:	2b00      	cmp	r3, #0
 8005798:	bf0c      	ite	eq
 800579a:	2301      	moveq	r3, #1
 800579c:	2300      	movne	r3, #0
 800579e:	b2db      	uxtb	r3, r3
 80057a0:	461a      	mov	r2, r3
 80057a2:	e00c      	b.n	80057be <I2C_WaitOnFlagUntilTimeout+0x9e>
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	699b      	ldr	r3, [r3, #24]
 80057aa:	43da      	mvns	r2, r3
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	4013      	ands	r3, r2
 80057b0:	b29b      	uxth	r3, r3
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	bf0c      	ite	eq
 80057b6:	2301      	moveq	r3, #1
 80057b8:	2300      	movne	r3, #0
 80057ba:	b2db      	uxtb	r3, r3
 80057bc:	461a      	mov	r2, r3
 80057be:	79fb      	ldrb	r3, [r7, #7]
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d0b6      	beq.n	8005732 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80057c4:	2300      	movs	r3, #0
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3710      	adds	r7, #16
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}

080057ce <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80057ce:	b580      	push	{r7, lr}
 80057d0:	b084      	sub	sp, #16
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	60f8      	str	r0, [r7, #12]
 80057d6:	60b9      	str	r1, [r7, #8]
 80057d8:	607a      	str	r2, [r7, #4]
 80057da:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80057dc:	e051      	b.n	8005882 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	695b      	ldr	r3, [r3, #20]
 80057e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057ec:	d123      	bne.n	8005836 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	681a      	ldr	r2, [r3, #0]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057fc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005806:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2200      	movs	r2, #0
 800580c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2220      	movs	r2, #32
 8005812:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2200      	movs	r2, #0
 800581a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005822:	f043 0204 	orr.w	r2, r3, #4
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2200      	movs	r2, #0
 800582e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e046      	b.n	80058c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800583c:	d021      	beq.n	8005882 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800583e:	f7fd f9bd 	bl	8002bbc <HAL_GetTick>
 8005842:	4602      	mov	r2, r0
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	1ad3      	subs	r3, r2, r3
 8005848:	687a      	ldr	r2, [r7, #4]
 800584a:	429a      	cmp	r2, r3
 800584c:	d302      	bcc.n	8005854 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d116      	bne.n	8005882 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2200      	movs	r2, #0
 8005858:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2220      	movs	r2, #32
 800585e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2200      	movs	r2, #0
 8005866:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800586e:	f043 0220 	orr.w	r2, r3, #32
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2200      	movs	r2, #0
 800587a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	e020      	b.n	80058c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	0c1b      	lsrs	r3, r3, #16
 8005886:	b2db      	uxtb	r3, r3
 8005888:	2b01      	cmp	r3, #1
 800588a:	d10c      	bne.n	80058a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	695b      	ldr	r3, [r3, #20]
 8005892:	43da      	mvns	r2, r3
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	4013      	ands	r3, r2
 8005898:	b29b      	uxth	r3, r3
 800589a:	2b00      	cmp	r3, #0
 800589c:	bf14      	ite	ne
 800589e:	2301      	movne	r3, #1
 80058a0:	2300      	moveq	r3, #0
 80058a2:	b2db      	uxtb	r3, r3
 80058a4:	e00b      	b.n	80058be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	699b      	ldr	r3, [r3, #24]
 80058ac:	43da      	mvns	r2, r3
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	4013      	ands	r3, r2
 80058b2:	b29b      	uxth	r3, r3
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	bf14      	ite	ne
 80058b8:	2301      	movne	r3, #1
 80058ba:	2300      	moveq	r3, #0
 80058bc:	b2db      	uxtb	r3, r3
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d18d      	bne.n	80057de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80058c2:	2300      	movs	r3, #0
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	3710      	adds	r7, #16
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}

080058cc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b084      	sub	sp, #16
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	60f8      	str	r0, [r7, #12]
 80058d4:	60b9      	str	r1, [r7, #8]
 80058d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80058d8:	e02d      	b.n	8005936 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80058da:	68f8      	ldr	r0, [r7, #12]
 80058dc:	f000 f900 	bl	8005ae0 <I2C_IsAcknowledgeFailed>
 80058e0:	4603      	mov	r3, r0
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d001      	beq.n	80058ea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	e02d      	b.n	8005946 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058f0:	d021      	beq.n	8005936 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058f2:	f7fd f963 	bl	8002bbc <HAL_GetTick>
 80058f6:	4602      	mov	r2, r0
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	1ad3      	subs	r3, r2, r3
 80058fc:	68ba      	ldr	r2, [r7, #8]
 80058fe:	429a      	cmp	r2, r3
 8005900:	d302      	bcc.n	8005908 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d116      	bne.n	8005936 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2200      	movs	r2, #0
 800590c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2220      	movs	r2, #32
 8005912:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2200      	movs	r2, #0
 800591a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005922:	f043 0220 	orr.w	r2, r3, #32
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2200      	movs	r2, #0
 800592e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005932:	2301      	movs	r3, #1
 8005934:	e007      	b.n	8005946 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	695b      	ldr	r3, [r3, #20]
 800593c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005940:	2b80      	cmp	r3, #128	; 0x80
 8005942:	d1ca      	bne.n	80058da <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005944:	2300      	movs	r3, #0
}
 8005946:	4618      	mov	r0, r3
 8005948:	3710      	adds	r7, #16
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}

0800594e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800594e:	b580      	push	{r7, lr}
 8005950:	b084      	sub	sp, #16
 8005952:	af00      	add	r7, sp, #0
 8005954:	60f8      	str	r0, [r7, #12]
 8005956:	60b9      	str	r1, [r7, #8]
 8005958:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800595a:	e02d      	b.n	80059b8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800595c:	68f8      	ldr	r0, [r7, #12]
 800595e:	f000 f8bf 	bl	8005ae0 <I2C_IsAcknowledgeFailed>
 8005962:	4603      	mov	r3, r0
 8005964:	2b00      	cmp	r3, #0
 8005966:	d001      	beq.n	800596c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005968:	2301      	movs	r3, #1
 800596a:	e02d      	b.n	80059c8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005972:	d021      	beq.n	80059b8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005974:	f7fd f922 	bl	8002bbc <HAL_GetTick>
 8005978:	4602      	mov	r2, r0
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	1ad3      	subs	r3, r2, r3
 800597e:	68ba      	ldr	r2, [r7, #8]
 8005980:	429a      	cmp	r2, r3
 8005982:	d302      	bcc.n	800598a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d116      	bne.n	80059b8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2200      	movs	r2, #0
 800598e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2220      	movs	r2, #32
 8005994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2200      	movs	r2, #0
 800599c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a4:	f043 0220 	orr.w	r2, r3, #32
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2200      	movs	r2, #0
 80059b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	e007      	b.n	80059c8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	695b      	ldr	r3, [r3, #20]
 80059be:	f003 0304 	and.w	r3, r3, #4
 80059c2:	2b04      	cmp	r3, #4
 80059c4:	d1ca      	bne.n	800595c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80059c6:	2300      	movs	r3, #0
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3710      	adds	r7, #16
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}

080059d0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b085      	sub	sp, #20
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80059d8:	2300      	movs	r3, #0
 80059da:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80059dc:	4b13      	ldr	r3, [pc, #76]	; (8005a2c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	08db      	lsrs	r3, r3, #3
 80059e2:	4a13      	ldr	r2, [pc, #76]	; (8005a30 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80059e4:	fba2 2303 	umull	r2, r3, r2, r3
 80059e8:	0a1a      	lsrs	r2, r3, #8
 80059ea:	4613      	mov	r3, r2
 80059ec:	009b      	lsls	r3, r3, #2
 80059ee:	4413      	add	r3, r2
 80059f0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	3b01      	subs	r3, #1
 80059f6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d107      	bne.n	8005a0e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a02:	f043 0220 	orr.w	r2, r3, #32
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	e008      	b.n	8005a20 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a1c:	d0e9      	beq.n	80059f2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005a1e:	2300      	movs	r3, #0
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3714      	adds	r7, #20
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr
 8005a2c:	20000004 	.word	0x20000004
 8005a30:	14f8b589 	.word	0x14f8b589

08005a34 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b084      	sub	sp, #16
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	60f8      	str	r0, [r7, #12]
 8005a3c:	60b9      	str	r1, [r7, #8]
 8005a3e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005a40:	e042      	b.n	8005ac8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	695b      	ldr	r3, [r3, #20]
 8005a48:	f003 0310 	and.w	r3, r3, #16
 8005a4c:	2b10      	cmp	r3, #16
 8005a4e:	d119      	bne.n	8005a84 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f06f 0210 	mvn.w	r2, #16
 8005a58:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2220      	movs	r2, #32
 8005a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	e029      	b.n	8005ad8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a84:	f7fd f89a 	bl	8002bbc <HAL_GetTick>
 8005a88:	4602      	mov	r2, r0
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	1ad3      	subs	r3, r2, r3
 8005a8e:	68ba      	ldr	r2, [r7, #8]
 8005a90:	429a      	cmp	r2, r3
 8005a92:	d302      	bcc.n	8005a9a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d116      	bne.n	8005ac8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2220      	movs	r2, #32
 8005aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab4:	f043 0220 	orr.w	r2, r3, #32
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	e007      	b.n	8005ad8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	695b      	ldr	r3, [r3, #20]
 8005ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ad2:	2b40      	cmp	r3, #64	; 0x40
 8005ad4:	d1b5      	bne.n	8005a42 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005ad6:	2300      	movs	r3, #0
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3710      	adds	r7, #16
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}

08005ae0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b083      	sub	sp, #12
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	695b      	ldr	r3, [r3, #20]
 8005aee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005af2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005af6:	d11b      	bne.n	8005b30 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005b00:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2200      	movs	r2, #0
 8005b06:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2220      	movs	r2, #32
 8005b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2200      	movs	r2, #0
 8005b14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b1c:	f043 0204 	orr.w	r2, r3, #4
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2200      	movs	r2, #0
 8005b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	e000      	b.n	8005b32 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005b30:	2300      	movs	r3, #0
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	370c      	adds	r7, #12
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr

08005b3e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005b3e:	b480      	push	{r7}
 8005b40:	b083      	sub	sp, #12
 8005b42:	af00      	add	r7, sp, #0
 8005b44:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b4a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005b4e:	d103      	bne.n	8005b58 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2201      	movs	r2, #1
 8005b54:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005b56:	e007      	b.n	8005b68 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b5c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005b60:	d102      	bne.n	8005b68 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2208      	movs	r2, #8
 8005b66:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005b68:	bf00      	nop
 8005b6a:	370c      	adds	r7, #12
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr

08005b74 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b086      	sub	sp, #24
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d101      	bne.n	8005b86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005b82:	2301      	movs	r3, #1
 8005b84:	e267      	b.n	8006056 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f003 0301 	and.w	r3, r3, #1
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d075      	beq.n	8005c7e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005b92:	4b88      	ldr	r3, [pc, #544]	; (8005db4 <HAL_RCC_OscConfig+0x240>)
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	f003 030c 	and.w	r3, r3, #12
 8005b9a:	2b04      	cmp	r3, #4
 8005b9c:	d00c      	beq.n	8005bb8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b9e:	4b85      	ldr	r3, [pc, #532]	; (8005db4 <HAL_RCC_OscConfig+0x240>)
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005ba6:	2b08      	cmp	r3, #8
 8005ba8:	d112      	bne.n	8005bd0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005baa:	4b82      	ldr	r3, [pc, #520]	; (8005db4 <HAL_RCC_OscConfig+0x240>)
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005bb6:	d10b      	bne.n	8005bd0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005bb8:	4b7e      	ldr	r3, [pc, #504]	; (8005db4 <HAL_RCC_OscConfig+0x240>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d05b      	beq.n	8005c7c <HAL_RCC_OscConfig+0x108>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d157      	bne.n	8005c7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	e242      	b.n	8006056 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bd8:	d106      	bne.n	8005be8 <HAL_RCC_OscConfig+0x74>
 8005bda:	4b76      	ldr	r3, [pc, #472]	; (8005db4 <HAL_RCC_OscConfig+0x240>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a75      	ldr	r2, [pc, #468]	; (8005db4 <HAL_RCC_OscConfig+0x240>)
 8005be0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005be4:	6013      	str	r3, [r2, #0]
 8005be6:	e01d      	b.n	8005c24 <HAL_RCC_OscConfig+0xb0>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005bf0:	d10c      	bne.n	8005c0c <HAL_RCC_OscConfig+0x98>
 8005bf2:	4b70      	ldr	r3, [pc, #448]	; (8005db4 <HAL_RCC_OscConfig+0x240>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a6f      	ldr	r2, [pc, #444]	; (8005db4 <HAL_RCC_OscConfig+0x240>)
 8005bf8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005bfc:	6013      	str	r3, [r2, #0]
 8005bfe:	4b6d      	ldr	r3, [pc, #436]	; (8005db4 <HAL_RCC_OscConfig+0x240>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a6c      	ldr	r2, [pc, #432]	; (8005db4 <HAL_RCC_OscConfig+0x240>)
 8005c04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c08:	6013      	str	r3, [r2, #0]
 8005c0a:	e00b      	b.n	8005c24 <HAL_RCC_OscConfig+0xb0>
 8005c0c:	4b69      	ldr	r3, [pc, #420]	; (8005db4 <HAL_RCC_OscConfig+0x240>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a68      	ldr	r2, [pc, #416]	; (8005db4 <HAL_RCC_OscConfig+0x240>)
 8005c12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c16:	6013      	str	r3, [r2, #0]
 8005c18:	4b66      	ldr	r3, [pc, #408]	; (8005db4 <HAL_RCC_OscConfig+0x240>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a65      	ldr	r2, [pc, #404]	; (8005db4 <HAL_RCC_OscConfig+0x240>)
 8005c1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d013      	beq.n	8005c54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c2c:	f7fc ffc6 	bl	8002bbc <HAL_GetTick>
 8005c30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c32:	e008      	b.n	8005c46 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c34:	f7fc ffc2 	bl	8002bbc <HAL_GetTick>
 8005c38:	4602      	mov	r2, r0
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	1ad3      	subs	r3, r2, r3
 8005c3e:	2b64      	cmp	r3, #100	; 0x64
 8005c40:	d901      	bls.n	8005c46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005c42:	2303      	movs	r3, #3
 8005c44:	e207      	b.n	8006056 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c46:	4b5b      	ldr	r3, [pc, #364]	; (8005db4 <HAL_RCC_OscConfig+0x240>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d0f0      	beq.n	8005c34 <HAL_RCC_OscConfig+0xc0>
 8005c52:	e014      	b.n	8005c7e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c54:	f7fc ffb2 	bl	8002bbc <HAL_GetTick>
 8005c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c5a:	e008      	b.n	8005c6e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c5c:	f7fc ffae 	bl	8002bbc <HAL_GetTick>
 8005c60:	4602      	mov	r2, r0
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	1ad3      	subs	r3, r2, r3
 8005c66:	2b64      	cmp	r3, #100	; 0x64
 8005c68:	d901      	bls.n	8005c6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005c6a:	2303      	movs	r3, #3
 8005c6c:	e1f3      	b.n	8006056 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c6e:	4b51      	ldr	r3, [pc, #324]	; (8005db4 <HAL_RCC_OscConfig+0x240>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d1f0      	bne.n	8005c5c <HAL_RCC_OscConfig+0xe8>
 8005c7a:	e000      	b.n	8005c7e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f003 0302 	and.w	r3, r3, #2
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d063      	beq.n	8005d52 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005c8a:	4b4a      	ldr	r3, [pc, #296]	; (8005db4 <HAL_RCC_OscConfig+0x240>)
 8005c8c:	689b      	ldr	r3, [r3, #8]
 8005c8e:	f003 030c 	and.w	r3, r3, #12
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d00b      	beq.n	8005cae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005c96:	4b47      	ldr	r3, [pc, #284]	; (8005db4 <HAL_RCC_OscConfig+0x240>)
 8005c98:	689b      	ldr	r3, [r3, #8]
 8005c9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005c9e:	2b08      	cmp	r3, #8
 8005ca0:	d11c      	bne.n	8005cdc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005ca2:	4b44      	ldr	r3, [pc, #272]	; (8005db4 <HAL_RCC_OscConfig+0x240>)
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d116      	bne.n	8005cdc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005cae:	4b41      	ldr	r3, [pc, #260]	; (8005db4 <HAL_RCC_OscConfig+0x240>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f003 0302 	and.w	r3, r3, #2
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d005      	beq.n	8005cc6 <HAL_RCC_OscConfig+0x152>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	68db      	ldr	r3, [r3, #12]
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d001      	beq.n	8005cc6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	e1c7      	b.n	8006056 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cc6:	4b3b      	ldr	r3, [pc, #236]	; (8005db4 <HAL_RCC_OscConfig+0x240>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	691b      	ldr	r3, [r3, #16]
 8005cd2:	00db      	lsls	r3, r3, #3
 8005cd4:	4937      	ldr	r1, [pc, #220]	; (8005db4 <HAL_RCC_OscConfig+0x240>)
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005cda:	e03a      	b.n	8005d52 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	68db      	ldr	r3, [r3, #12]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d020      	beq.n	8005d26 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005ce4:	4b34      	ldr	r3, [pc, #208]	; (8005db8 <HAL_RCC_OscConfig+0x244>)
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cea:	f7fc ff67 	bl	8002bbc <HAL_GetTick>
 8005cee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cf0:	e008      	b.n	8005d04 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005cf2:	f7fc ff63 	bl	8002bbc <HAL_GetTick>
 8005cf6:	4602      	mov	r2, r0
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	1ad3      	subs	r3, r2, r3
 8005cfc:	2b02      	cmp	r3, #2
 8005cfe:	d901      	bls.n	8005d04 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005d00:	2303      	movs	r3, #3
 8005d02:	e1a8      	b.n	8006056 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d04:	4b2b      	ldr	r3, [pc, #172]	; (8005db4 <HAL_RCC_OscConfig+0x240>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f003 0302 	and.w	r3, r3, #2
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d0f0      	beq.n	8005cf2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d10:	4b28      	ldr	r3, [pc, #160]	; (8005db4 <HAL_RCC_OscConfig+0x240>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	691b      	ldr	r3, [r3, #16]
 8005d1c:	00db      	lsls	r3, r3, #3
 8005d1e:	4925      	ldr	r1, [pc, #148]	; (8005db4 <HAL_RCC_OscConfig+0x240>)
 8005d20:	4313      	orrs	r3, r2
 8005d22:	600b      	str	r3, [r1, #0]
 8005d24:	e015      	b.n	8005d52 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d26:	4b24      	ldr	r3, [pc, #144]	; (8005db8 <HAL_RCC_OscConfig+0x244>)
 8005d28:	2200      	movs	r2, #0
 8005d2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d2c:	f7fc ff46 	bl	8002bbc <HAL_GetTick>
 8005d30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d32:	e008      	b.n	8005d46 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d34:	f7fc ff42 	bl	8002bbc <HAL_GetTick>
 8005d38:	4602      	mov	r2, r0
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	1ad3      	subs	r3, r2, r3
 8005d3e:	2b02      	cmp	r3, #2
 8005d40:	d901      	bls.n	8005d46 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005d42:	2303      	movs	r3, #3
 8005d44:	e187      	b.n	8006056 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d46:	4b1b      	ldr	r3, [pc, #108]	; (8005db4 <HAL_RCC_OscConfig+0x240>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f003 0302 	and.w	r3, r3, #2
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d1f0      	bne.n	8005d34 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f003 0308 	and.w	r3, r3, #8
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d036      	beq.n	8005dcc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	695b      	ldr	r3, [r3, #20]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d016      	beq.n	8005d94 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d66:	4b15      	ldr	r3, [pc, #84]	; (8005dbc <HAL_RCC_OscConfig+0x248>)
 8005d68:	2201      	movs	r2, #1
 8005d6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d6c:	f7fc ff26 	bl	8002bbc <HAL_GetTick>
 8005d70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d72:	e008      	b.n	8005d86 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d74:	f7fc ff22 	bl	8002bbc <HAL_GetTick>
 8005d78:	4602      	mov	r2, r0
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	1ad3      	subs	r3, r2, r3
 8005d7e:	2b02      	cmp	r3, #2
 8005d80:	d901      	bls.n	8005d86 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005d82:	2303      	movs	r3, #3
 8005d84:	e167      	b.n	8006056 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d86:	4b0b      	ldr	r3, [pc, #44]	; (8005db4 <HAL_RCC_OscConfig+0x240>)
 8005d88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d8a:	f003 0302 	and.w	r3, r3, #2
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d0f0      	beq.n	8005d74 <HAL_RCC_OscConfig+0x200>
 8005d92:	e01b      	b.n	8005dcc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d94:	4b09      	ldr	r3, [pc, #36]	; (8005dbc <HAL_RCC_OscConfig+0x248>)
 8005d96:	2200      	movs	r2, #0
 8005d98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d9a:	f7fc ff0f 	bl	8002bbc <HAL_GetTick>
 8005d9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005da0:	e00e      	b.n	8005dc0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005da2:	f7fc ff0b 	bl	8002bbc <HAL_GetTick>
 8005da6:	4602      	mov	r2, r0
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	1ad3      	subs	r3, r2, r3
 8005dac:	2b02      	cmp	r3, #2
 8005dae:	d907      	bls.n	8005dc0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005db0:	2303      	movs	r3, #3
 8005db2:	e150      	b.n	8006056 <HAL_RCC_OscConfig+0x4e2>
 8005db4:	40023800 	.word	0x40023800
 8005db8:	42470000 	.word	0x42470000
 8005dbc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005dc0:	4b88      	ldr	r3, [pc, #544]	; (8005fe4 <HAL_RCC_OscConfig+0x470>)
 8005dc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005dc4:	f003 0302 	and.w	r3, r3, #2
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d1ea      	bne.n	8005da2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f003 0304 	and.w	r3, r3, #4
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	f000 8097 	beq.w	8005f08 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005dde:	4b81      	ldr	r3, [pc, #516]	; (8005fe4 <HAL_RCC_OscConfig+0x470>)
 8005de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d10f      	bne.n	8005e0a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005dea:	2300      	movs	r3, #0
 8005dec:	60bb      	str	r3, [r7, #8]
 8005dee:	4b7d      	ldr	r3, [pc, #500]	; (8005fe4 <HAL_RCC_OscConfig+0x470>)
 8005df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df2:	4a7c      	ldr	r2, [pc, #496]	; (8005fe4 <HAL_RCC_OscConfig+0x470>)
 8005df4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005df8:	6413      	str	r3, [r2, #64]	; 0x40
 8005dfa:	4b7a      	ldr	r3, [pc, #488]	; (8005fe4 <HAL_RCC_OscConfig+0x470>)
 8005dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e02:	60bb      	str	r3, [r7, #8]
 8005e04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e06:	2301      	movs	r3, #1
 8005e08:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e0a:	4b77      	ldr	r3, [pc, #476]	; (8005fe8 <HAL_RCC_OscConfig+0x474>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d118      	bne.n	8005e48 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005e16:	4b74      	ldr	r3, [pc, #464]	; (8005fe8 <HAL_RCC_OscConfig+0x474>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a73      	ldr	r2, [pc, #460]	; (8005fe8 <HAL_RCC_OscConfig+0x474>)
 8005e1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e22:	f7fc fecb 	bl	8002bbc <HAL_GetTick>
 8005e26:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e28:	e008      	b.n	8005e3c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e2a:	f7fc fec7 	bl	8002bbc <HAL_GetTick>
 8005e2e:	4602      	mov	r2, r0
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	1ad3      	subs	r3, r2, r3
 8005e34:	2b02      	cmp	r3, #2
 8005e36:	d901      	bls.n	8005e3c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005e38:	2303      	movs	r3, #3
 8005e3a:	e10c      	b.n	8006056 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e3c:	4b6a      	ldr	r3, [pc, #424]	; (8005fe8 <HAL_RCC_OscConfig+0x474>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d0f0      	beq.n	8005e2a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d106      	bne.n	8005e5e <HAL_RCC_OscConfig+0x2ea>
 8005e50:	4b64      	ldr	r3, [pc, #400]	; (8005fe4 <HAL_RCC_OscConfig+0x470>)
 8005e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e54:	4a63      	ldr	r2, [pc, #396]	; (8005fe4 <HAL_RCC_OscConfig+0x470>)
 8005e56:	f043 0301 	orr.w	r3, r3, #1
 8005e5a:	6713      	str	r3, [r2, #112]	; 0x70
 8005e5c:	e01c      	b.n	8005e98 <HAL_RCC_OscConfig+0x324>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	2b05      	cmp	r3, #5
 8005e64:	d10c      	bne.n	8005e80 <HAL_RCC_OscConfig+0x30c>
 8005e66:	4b5f      	ldr	r3, [pc, #380]	; (8005fe4 <HAL_RCC_OscConfig+0x470>)
 8005e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e6a:	4a5e      	ldr	r2, [pc, #376]	; (8005fe4 <HAL_RCC_OscConfig+0x470>)
 8005e6c:	f043 0304 	orr.w	r3, r3, #4
 8005e70:	6713      	str	r3, [r2, #112]	; 0x70
 8005e72:	4b5c      	ldr	r3, [pc, #368]	; (8005fe4 <HAL_RCC_OscConfig+0x470>)
 8005e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e76:	4a5b      	ldr	r2, [pc, #364]	; (8005fe4 <HAL_RCC_OscConfig+0x470>)
 8005e78:	f043 0301 	orr.w	r3, r3, #1
 8005e7c:	6713      	str	r3, [r2, #112]	; 0x70
 8005e7e:	e00b      	b.n	8005e98 <HAL_RCC_OscConfig+0x324>
 8005e80:	4b58      	ldr	r3, [pc, #352]	; (8005fe4 <HAL_RCC_OscConfig+0x470>)
 8005e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e84:	4a57      	ldr	r2, [pc, #348]	; (8005fe4 <HAL_RCC_OscConfig+0x470>)
 8005e86:	f023 0301 	bic.w	r3, r3, #1
 8005e8a:	6713      	str	r3, [r2, #112]	; 0x70
 8005e8c:	4b55      	ldr	r3, [pc, #340]	; (8005fe4 <HAL_RCC_OscConfig+0x470>)
 8005e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e90:	4a54      	ldr	r2, [pc, #336]	; (8005fe4 <HAL_RCC_OscConfig+0x470>)
 8005e92:	f023 0304 	bic.w	r3, r3, #4
 8005e96:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	689b      	ldr	r3, [r3, #8]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d015      	beq.n	8005ecc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ea0:	f7fc fe8c 	bl	8002bbc <HAL_GetTick>
 8005ea4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ea6:	e00a      	b.n	8005ebe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ea8:	f7fc fe88 	bl	8002bbc <HAL_GetTick>
 8005eac:	4602      	mov	r2, r0
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	1ad3      	subs	r3, r2, r3
 8005eb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d901      	bls.n	8005ebe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005eba:	2303      	movs	r3, #3
 8005ebc:	e0cb      	b.n	8006056 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ebe:	4b49      	ldr	r3, [pc, #292]	; (8005fe4 <HAL_RCC_OscConfig+0x470>)
 8005ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ec2:	f003 0302 	and.w	r3, r3, #2
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d0ee      	beq.n	8005ea8 <HAL_RCC_OscConfig+0x334>
 8005eca:	e014      	b.n	8005ef6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ecc:	f7fc fe76 	bl	8002bbc <HAL_GetTick>
 8005ed0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ed2:	e00a      	b.n	8005eea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ed4:	f7fc fe72 	bl	8002bbc <HAL_GetTick>
 8005ed8:	4602      	mov	r2, r0
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	1ad3      	subs	r3, r2, r3
 8005ede:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d901      	bls.n	8005eea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005ee6:	2303      	movs	r3, #3
 8005ee8:	e0b5      	b.n	8006056 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005eea:	4b3e      	ldr	r3, [pc, #248]	; (8005fe4 <HAL_RCC_OscConfig+0x470>)
 8005eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eee:	f003 0302 	and.w	r3, r3, #2
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d1ee      	bne.n	8005ed4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005ef6:	7dfb      	ldrb	r3, [r7, #23]
 8005ef8:	2b01      	cmp	r3, #1
 8005efa:	d105      	bne.n	8005f08 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005efc:	4b39      	ldr	r3, [pc, #228]	; (8005fe4 <HAL_RCC_OscConfig+0x470>)
 8005efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f00:	4a38      	ldr	r2, [pc, #224]	; (8005fe4 <HAL_RCC_OscConfig+0x470>)
 8005f02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f06:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	699b      	ldr	r3, [r3, #24]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	f000 80a1 	beq.w	8006054 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005f12:	4b34      	ldr	r3, [pc, #208]	; (8005fe4 <HAL_RCC_OscConfig+0x470>)
 8005f14:	689b      	ldr	r3, [r3, #8]
 8005f16:	f003 030c 	and.w	r3, r3, #12
 8005f1a:	2b08      	cmp	r3, #8
 8005f1c:	d05c      	beq.n	8005fd8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	699b      	ldr	r3, [r3, #24]
 8005f22:	2b02      	cmp	r3, #2
 8005f24:	d141      	bne.n	8005faa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f26:	4b31      	ldr	r3, [pc, #196]	; (8005fec <HAL_RCC_OscConfig+0x478>)
 8005f28:	2200      	movs	r2, #0
 8005f2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f2c:	f7fc fe46 	bl	8002bbc <HAL_GetTick>
 8005f30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f32:	e008      	b.n	8005f46 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f34:	f7fc fe42 	bl	8002bbc <HAL_GetTick>
 8005f38:	4602      	mov	r2, r0
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	1ad3      	subs	r3, r2, r3
 8005f3e:	2b02      	cmp	r3, #2
 8005f40:	d901      	bls.n	8005f46 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005f42:	2303      	movs	r3, #3
 8005f44:	e087      	b.n	8006056 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f46:	4b27      	ldr	r3, [pc, #156]	; (8005fe4 <HAL_RCC_OscConfig+0x470>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d1f0      	bne.n	8005f34 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	69da      	ldr	r2, [r3, #28]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6a1b      	ldr	r3, [r3, #32]
 8005f5a:	431a      	orrs	r2, r3
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f60:	019b      	lsls	r3, r3, #6
 8005f62:	431a      	orrs	r2, r3
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f68:	085b      	lsrs	r3, r3, #1
 8005f6a:	3b01      	subs	r3, #1
 8005f6c:	041b      	lsls	r3, r3, #16
 8005f6e:	431a      	orrs	r2, r3
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f74:	061b      	lsls	r3, r3, #24
 8005f76:	491b      	ldr	r1, [pc, #108]	; (8005fe4 <HAL_RCC_OscConfig+0x470>)
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005f7c:	4b1b      	ldr	r3, [pc, #108]	; (8005fec <HAL_RCC_OscConfig+0x478>)
 8005f7e:	2201      	movs	r2, #1
 8005f80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f82:	f7fc fe1b 	bl	8002bbc <HAL_GetTick>
 8005f86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f88:	e008      	b.n	8005f9c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f8a:	f7fc fe17 	bl	8002bbc <HAL_GetTick>
 8005f8e:	4602      	mov	r2, r0
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	1ad3      	subs	r3, r2, r3
 8005f94:	2b02      	cmp	r3, #2
 8005f96:	d901      	bls.n	8005f9c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005f98:	2303      	movs	r3, #3
 8005f9a:	e05c      	b.n	8006056 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f9c:	4b11      	ldr	r3, [pc, #68]	; (8005fe4 <HAL_RCC_OscConfig+0x470>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d0f0      	beq.n	8005f8a <HAL_RCC_OscConfig+0x416>
 8005fa8:	e054      	b.n	8006054 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005faa:	4b10      	ldr	r3, [pc, #64]	; (8005fec <HAL_RCC_OscConfig+0x478>)
 8005fac:	2200      	movs	r2, #0
 8005fae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fb0:	f7fc fe04 	bl	8002bbc <HAL_GetTick>
 8005fb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fb6:	e008      	b.n	8005fca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005fb8:	f7fc fe00 	bl	8002bbc <HAL_GetTick>
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	1ad3      	subs	r3, r2, r3
 8005fc2:	2b02      	cmp	r3, #2
 8005fc4:	d901      	bls.n	8005fca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005fc6:	2303      	movs	r3, #3
 8005fc8:	e045      	b.n	8006056 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fca:	4b06      	ldr	r3, [pc, #24]	; (8005fe4 <HAL_RCC_OscConfig+0x470>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d1f0      	bne.n	8005fb8 <HAL_RCC_OscConfig+0x444>
 8005fd6:	e03d      	b.n	8006054 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	699b      	ldr	r3, [r3, #24]
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	d107      	bne.n	8005ff0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	e038      	b.n	8006056 <HAL_RCC_OscConfig+0x4e2>
 8005fe4:	40023800 	.word	0x40023800
 8005fe8:	40007000 	.word	0x40007000
 8005fec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005ff0:	4b1b      	ldr	r3, [pc, #108]	; (8006060 <HAL_RCC_OscConfig+0x4ec>)
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	699b      	ldr	r3, [r3, #24]
 8005ffa:	2b01      	cmp	r3, #1
 8005ffc:	d028      	beq.n	8006050 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006008:	429a      	cmp	r2, r3
 800600a:	d121      	bne.n	8006050 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006016:	429a      	cmp	r2, r3
 8006018:	d11a      	bne.n	8006050 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800601a:	68fa      	ldr	r2, [r7, #12]
 800601c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006020:	4013      	ands	r3, r2
 8006022:	687a      	ldr	r2, [r7, #4]
 8006024:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006026:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006028:	4293      	cmp	r3, r2
 800602a:	d111      	bne.n	8006050 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006036:	085b      	lsrs	r3, r3, #1
 8006038:	3b01      	subs	r3, #1
 800603a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800603c:	429a      	cmp	r2, r3
 800603e:	d107      	bne.n	8006050 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800604a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800604c:	429a      	cmp	r2, r3
 800604e:	d001      	beq.n	8006054 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	e000      	b.n	8006056 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006054:	2300      	movs	r3, #0
}
 8006056:	4618      	mov	r0, r3
 8006058:	3718      	adds	r7, #24
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}
 800605e:	bf00      	nop
 8006060:	40023800 	.word	0x40023800

08006064 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b084      	sub	sp, #16
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
 800606c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d101      	bne.n	8006078 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006074:	2301      	movs	r3, #1
 8006076:	e0cc      	b.n	8006212 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006078:	4b68      	ldr	r3, [pc, #416]	; (800621c <HAL_RCC_ClockConfig+0x1b8>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f003 0307 	and.w	r3, r3, #7
 8006080:	683a      	ldr	r2, [r7, #0]
 8006082:	429a      	cmp	r2, r3
 8006084:	d90c      	bls.n	80060a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006086:	4b65      	ldr	r3, [pc, #404]	; (800621c <HAL_RCC_ClockConfig+0x1b8>)
 8006088:	683a      	ldr	r2, [r7, #0]
 800608a:	b2d2      	uxtb	r2, r2
 800608c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800608e:	4b63      	ldr	r3, [pc, #396]	; (800621c <HAL_RCC_ClockConfig+0x1b8>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f003 0307 	and.w	r3, r3, #7
 8006096:	683a      	ldr	r2, [r7, #0]
 8006098:	429a      	cmp	r2, r3
 800609a:	d001      	beq.n	80060a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800609c:	2301      	movs	r3, #1
 800609e:	e0b8      	b.n	8006212 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f003 0302 	and.w	r3, r3, #2
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d020      	beq.n	80060ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f003 0304 	and.w	r3, r3, #4
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d005      	beq.n	80060c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80060b8:	4b59      	ldr	r3, [pc, #356]	; (8006220 <HAL_RCC_ClockConfig+0x1bc>)
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	4a58      	ldr	r2, [pc, #352]	; (8006220 <HAL_RCC_ClockConfig+0x1bc>)
 80060be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80060c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f003 0308 	and.w	r3, r3, #8
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d005      	beq.n	80060dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80060d0:	4b53      	ldr	r3, [pc, #332]	; (8006220 <HAL_RCC_ClockConfig+0x1bc>)
 80060d2:	689b      	ldr	r3, [r3, #8]
 80060d4:	4a52      	ldr	r2, [pc, #328]	; (8006220 <HAL_RCC_ClockConfig+0x1bc>)
 80060d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80060da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80060dc:	4b50      	ldr	r3, [pc, #320]	; (8006220 <HAL_RCC_ClockConfig+0x1bc>)
 80060de:	689b      	ldr	r3, [r3, #8]
 80060e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	689b      	ldr	r3, [r3, #8]
 80060e8:	494d      	ldr	r1, [pc, #308]	; (8006220 <HAL_RCC_ClockConfig+0x1bc>)
 80060ea:	4313      	orrs	r3, r2
 80060ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f003 0301 	and.w	r3, r3, #1
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d044      	beq.n	8006184 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	2b01      	cmp	r3, #1
 8006100:	d107      	bne.n	8006112 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006102:	4b47      	ldr	r3, [pc, #284]	; (8006220 <HAL_RCC_ClockConfig+0x1bc>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800610a:	2b00      	cmp	r3, #0
 800610c:	d119      	bne.n	8006142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800610e:	2301      	movs	r3, #1
 8006110:	e07f      	b.n	8006212 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	2b02      	cmp	r3, #2
 8006118:	d003      	beq.n	8006122 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800611e:	2b03      	cmp	r3, #3
 8006120:	d107      	bne.n	8006132 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006122:	4b3f      	ldr	r3, [pc, #252]	; (8006220 <HAL_RCC_ClockConfig+0x1bc>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800612a:	2b00      	cmp	r3, #0
 800612c:	d109      	bne.n	8006142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800612e:	2301      	movs	r3, #1
 8006130:	e06f      	b.n	8006212 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006132:	4b3b      	ldr	r3, [pc, #236]	; (8006220 <HAL_RCC_ClockConfig+0x1bc>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f003 0302 	and.w	r3, r3, #2
 800613a:	2b00      	cmp	r3, #0
 800613c:	d101      	bne.n	8006142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800613e:	2301      	movs	r3, #1
 8006140:	e067      	b.n	8006212 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006142:	4b37      	ldr	r3, [pc, #220]	; (8006220 <HAL_RCC_ClockConfig+0x1bc>)
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	f023 0203 	bic.w	r2, r3, #3
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	4934      	ldr	r1, [pc, #208]	; (8006220 <HAL_RCC_ClockConfig+0x1bc>)
 8006150:	4313      	orrs	r3, r2
 8006152:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006154:	f7fc fd32 	bl	8002bbc <HAL_GetTick>
 8006158:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800615a:	e00a      	b.n	8006172 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800615c:	f7fc fd2e 	bl	8002bbc <HAL_GetTick>
 8006160:	4602      	mov	r2, r0
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	1ad3      	subs	r3, r2, r3
 8006166:	f241 3288 	movw	r2, #5000	; 0x1388
 800616a:	4293      	cmp	r3, r2
 800616c:	d901      	bls.n	8006172 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800616e:	2303      	movs	r3, #3
 8006170:	e04f      	b.n	8006212 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006172:	4b2b      	ldr	r3, [pc, #172]	; (8006220 <HAL_RCC_ClockConfig+0x1bc>)
 8006174:	689b      	ldr	r3, [r3, #8]
 8006176:	f003 020c 	and.w	r2, r3, #12
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	009b      	lsls	r3, r3, #2
 8006180:	429a      	cmp	r2, r3
 8006182:	d1eb      	bne.n	800615c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006184:	4b25      	ldr	r3, [pc, #148]	; (800621c <HAL_RCC_ClockConfig+0x1b8>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f003 0307 	and.w	r3, r3, #7
 800618c:	683a      	ldr	r2, [r7, #0]
 800618e:	429a      	cmp	r2, r3
 8006190:	d20c      	bcs.n	80061ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006192:	4b22      	ldr	r3, [pc, #136]	; (800621c <HAL_RCC_ClockConfig+0x1b8>)
 8006194:	683a      	ldr	r2, [r7, #0]
 8006196:	b2d2      	uxtb	r2, r2
 8006198:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800619a:	4b20      	ldr	r3, [pc, #128]	; (800621c <HAL_RCC_ClockConfig+0x1b8>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f003 0307 	and.w	r3, r3, #7
 80061a2:	683a      	ldr	r2, [r7, #0]
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d001      	beq.n	80061ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80061a8:	2301      	movs	r3, #1
 80061aa:	e032      	b.n	8006212 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f003 0304 	and.w	r3, r3, #4
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d008      	beq.n	80061ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80061b8:	4b19      	ldr	r3, [pc, #100]	; (8006220 <HAL_RCC_ClockConfig+0x1bc>)
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	68db      	ldr	r3, [r3, #12]
 80061c4:	4916      	ldr	r1, [pc, #88]	; (8006220 <HAL_RCC_ClockConfig+0x1bc>)
 80061c6:	4313      	orrs	r3, r2
 80061c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f003 0308 	and.w	r3, r3, #8
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d009      	beq.n	80061ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80061d6:	4b12      	ldr	r3, [pc, #72]	; (8006220 <HAL_RCC_ClockConfig+0x1bc>)
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	691b      	ldr	r3, [r3, #16]
 80061e2:	00db      	lsls	r3, r3, #3
 80061e4:	490e      	ldr	r1, [pc, #56]	; (8006220 <HAL_RCC_ClockConfig+0x1bc>)
 80061e6:	4313      	orrs	r3, r2
 80061e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80061ea:	f000 f821 	bl	8006230 <HAL_RCC_GetSysClockFreq>
 80061ee:	4602      	mov	r2, r0
 80061f0:	4b0b      	ldr	r3, [pc, #44]	; (8006220 <HAL_RCC_ClockConfig+0x1bc>)
 80061f2:	689b      	ldr	r3, [r3, #8]
 80061f4:	091b      	lsrs	r3, r3, #4
 80061f6:	f003 030f 	and.w	r3, r3, #15
 80061fa:	490a      	ldr	r1, [pc, #40]	; (8006224 <HAL_RCC_ClockConfig+0x1c0>)
 80061fc:	5ccb      	ldrb	r3, [r1, r3]
 80061fe:	fa22 f303 	lsr.w	r3, r2, r3
 8006202:	4a09      	ldr	r2, [pc, #36]	; (8006228 <HAL_RCC_ClockConfig+0x1c4>)
 8006204:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006206:	4b09      	ldr	r3, [pc, #36]	; (800622c <HAL_RCC_ClockConfig+0x1c8>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4618      	mov	r0, r3
 800620c:	f7fc fc92 	bl	8002b34 <HAL_InitTick>

  return HAL_OK;
 8006210:	2300      	movs	r3, #0
}
 8006212:	4618      	mov	r0, r3
 8006214:	3710      	adds	r7, #16
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}
 800621a:	bf00      	nop
 800621c:	40023c00 	.word	0x40023c00
 8006220:	40023800 	.word	0x40023800
 8006224:	08009d48 	.word	0x08009d48
 8006228:	20000004 	.word	0x20000004
 800622c:	20000018 	.word	0x20000018

08006230 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006230:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006234:	b094      	sub	sp, #80	; 0x50
 8006236:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006238:	2300      	movs	r3, #0
 800623a:	647b      	str	r3, [r7, #68]	; 0x44
 800623c:	2300      	movs	r3, #0
 800623e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006240:	2300      	movs	r3, #0
 8006242:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006244:	2300      	movs	r3, #0
 8006246:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006248:	4b79      	ldr	r3, [pc, #484]	; (8006430 <HAL_RCC_GetSysClockFreq+0x200>)
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	f003 030c 	and.w	r3, r3, #12
 8006250:	2b08      	cmp	r3, #8
 8006252:	d00d      	beq.n	8006270 <HAL_RCC_GetSysClockFreq+0x40>
 8006254:	2b08      	cmp	r3, #8
 8006256:	f200 80e1 	bhi.w	800641c <HAL_RCC_GetSysClockFreq+0x1ec>
 800625a:	2b00      	cmp	r3, #0
 800625c:	d002      	beq.n	8006264 <HAL_RCC_GetSysClockFreq+0x34>
 800625e:	2b04      	cmp	r3, #4
 8006260:	d003      	beq.n	800626a <HAL_RCC_GetSysClockFreq+0x3a>
 8006262:	e0db      	b.n	800641c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006264:	4b73      	ldr	r3, [pc, #460]	; (8006434 <HAL_RCC_GetSysClockFreq+0x204>)
 8006266:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006268:	e0db      	b.n	8006422 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800626a:	4b73      	ldr	r3, [pc, #460]	; (8006438 <HAL_RCC_GetSysClockFreq+0x208>)
 800626c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800626e:	e0d8      	b.n	8006422 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006270:	4b6f      	ldr	r3, [pc, #444]	; (8006430 <HAL_RCC_GetSysClockFreq+0x200>)
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006278:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800627a:	4b6d      	ldr	r3, [pc, #436]	; (8006430 <HAL_RCC_GetSysClockFreq+0x200>)
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006282:	2b00      	cmp	r3, #0
 8006284:	d063      	beq.n	800634e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006286:	4b6a      	ldr	r3, [pc, #424]	; (8006430 <HAL_RCC_GetSysClockFreq+0x200>)
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	099b      	lsrs	r3, r3, #6
 800628c:	2200      	movs	r2, #0
 800628e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006290:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006294:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006298:	633b      	str	r3, [r7, #48]	; 0x30
 800629a:	2300      	movs	r3, #0
 800629c:	637b      	str	r3, [r7, #52]	; 0x34
 800629e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80062a2:	4622      	mov	r2, r4
 80062a4:	462b      	mov	r3, r5
 80062a6:	f04f 0000 	mov.w	r0, #0
 80062aa:	f04f 0100 	mov.w	r1, #0
 80062ae:	0159      	lsls	r1, r3, #5
 80062b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80062b4:	0150      	lsls	r0, r2, #5
 80062b6:	4602      	mov	r2, r0
 80062b8:	460b      	mov	r3, r1
 80062ba:	4621      	mov	r1, r4
 80062bc:	1a51      	subs	r1, r2, r1
 80062be:	6139      	str	r1, [r7, #16]
 80062c0:	4629      	mov	r1, r5
 80062c2:	eb63 0301 	sbc.w	r3, r3, r1
 80062c6:	617b      	str	r3, [r7, #20]
 80062c8:	f04f 0200 	mov.w	r2, #0
 80062cc:	f04f 0300 	mov.w	r3, #0
 80062d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80062d4:	4659      	mov	r1, fp
 80062d6:	018b      	lsls	r3, r1, #6
 80062d8:	4651      	mov	r1, sl
 80062da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80062de:	4651      	mov	r1, sl
 80062e0:	018a      	lsls	r2, r1, #6
 80062e2:	4651      	mov	r1, sl
 80062e4:	ebb2 0801 	subs.w	r8, r2, r1
 80062e8:	4659      	mov	r1, fp
 80062ea:	eb63 0901 	sbc.w	r9, r3, r1
 80062ee:	f04f 0200 	mov.w	r2, #0
 80062f2:	f04f 0300 	mov.w	r3, #0
 80062f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80062fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80062fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006302:	4690      	mov	r8, r2
 8006304:	4699      	mov	r9, r3
 8006306:	4623      	mov	r3, r4
 8006308:	eb18 0303 	adds.w	r3, r8, r3
 800630c:	60bb      	str	r3, [r7, #8]
 800630e:	462b      	mov	r3, r5
 8006310:	eb49 0303 	adc.w	r3, r9, r3
 8006314:	60fb      	str	r3, [r7, #12]
 8006316:	f04f 0200 	mov.w	r2, #0
 800631a:	f04f 0300 	mov.w	r3, #0
 800631e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006322:	4629      	mov	r1, r5
 8006324:	024b      	lsls	r3, r1, #9
 8006326:	4621      	mov	r1, r4
 8006328:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800632c:	4621      	mov	r1, r4
 800632e:	024a      	lsls	r2, r1, #9
 8006330:	4610      	mov	r0, r2
 8006332:	4619      	mov	r1, r3
 8006334:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006336:	2200      	movs	r2, #0
 8006338:	62bb      	str	r3, [r7, #40]	; 0x28
 800633a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800633c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006340:	f7fa fcaa 	bl	8000c98 <__aeabi_uldivmod>
 8006344:	4602      	mov	r2, r0
 8006346:	460b      	mov	r3, r1
 8006348:	4613      	mov	r3, r2
 800634a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800634c:	e058      	b.n	8006400 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800634e:	4b38      	ldr	r3, [pc, #224]	; (8006430 <HAL_RCC_GetSysClockFreq+0x200>)
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	099b      	lsrs	r3, r3, #6
 8006354:	2200      	movs	r2, #0
 8006356:	4618      	mov	r0, r3
 8006358:	4611      	mov	r1, r2
 800635a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800635e:	623b      	str	r3, [r7, #32]
 8006360:	2300      	movs	r3, #0
 8006362:	627b      	str	r3, [r7, #36]	; 0x24
 8006364:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006368:	4642      	mov	r2, r8
 800636a:	464b      	mov	r3, r9
 800636c:	f04f 0000 	mov.w	r0, #0
 8006370:	f04f 0100 	mov.w	r1, #0
 8006374:	0159      	lsls	r1, r3, #5
 8006376:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800637a:	0150      	lsls	r0, r2, #5
 800637c:	4602      	mov	r2, r0
 800637e:	460b      	mov	r3, r1
 8006380:	4641      	mov	r1, r8
 8006382:	ebb2 0a01 	subs.w	sl, r2, r1
 8006386:	4649      	mov	r1, r9
 8006388:	eb63 0b01 	sbc.w	fp, r3, r1
 800638c:	f04f 0200 	mov.w	r2, #0
 8006390:	f04f 0300 	mov.w	r3, #0
 8006394:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006398:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800639c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80063a0:	ebb2 040a 	subs.w	r4, r2, sl
 80063a4:	eb63 050b 	sbc.w	r5, r3, fp
 80063a8:	f04f 0200 	mov.w	r2, #0
 80063ac:	f04f 0300 	mov.w	r3, #0
 80063b0:	00eb      	lsls	r3, r5, #3
 80063b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80063b6:	00e2      	lsls	r2, r4, #3
 80063b8:	4614      	mov	r4, r2
 80063ba:	461d      	mov	r5, r3
 80063bc:	4643      	mov	r3, r8
 80063be:	18e3      	adds	r3, r4, r3
 80063c0:	603b      	str	r3, [r7, #0]
 80063c2:	464b      	mov	r3, r9
 80063c4:	eb45 0303 	adc.w	r3, r5, r3
 80063c8:	607b      	str	r3, [r7, #4]
 80063ca:	f04f 0200 	mov.w	r2, #0
 80063ce:	f04f 0300 	mov.w	r3, #0
 80063d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80063d6:	4629      	mov	r1, r5
 80063d8:	028b      	lsls	r3, r1, #10
 80063da:	4621      	mov	r1, r4
 80063dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80063e0:	4621      	mov	r1, r4
 80063e2:	028a      	lsls	r2, r1, #10
 80063e4:	4610      	mov	r0, r2
 80063e6:	4619      	mov	r1, r3
 80063e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063ea:	2200      	movs	r2, #0
 80063ec:	61bb      	str	r3, [r7, #24]
 80063ee:	61fa      	str	r2, [r7, #28]
 80063f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80063f4:	f7fa fc50 	bl	8000c98 <__aeabi_uldivmod>
 80063f8:	4602      	mov	r2, r0
 80063fa:	460b      	mov	r3, r1
 80063fc:	4613      	mov	r3, r2
 80063fe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006400:	4b0b      	ldr	r3, [pc, #44]	; (8006430 <HAL_RCC_GetSysClockFreq+0x200>)
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	0c1b      	lsrs	r3, r3, #16
 8006406:	f003 0303 	and.w	r3, r3, #3
 800640a:	3301      	adds	r3, #1
 800640c:	005b      	lsls	r3, r3, #1
 800640e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006410:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006412:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006414:	fbb2 f3f3 	udiv	r3, r2, r3
 8006418:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800641a:	e002      	b.n	8006422 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800641c:	4b05      	ldr	r3, [pc, #20]	; (8006434 <HAL_RCC_GetSysClockFreq+0x204>)
 800641e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006420:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006422:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006424:	4618      	mov	r0, r3
 8006426:	3750      	adds	r7, #80	; 0x50
 8006428:	46bd      	mov	sp, r7
 800642a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800642e:	bf00      	nop
 8006430:	40023800 	.word	0x40023800
 8006434:	00f42400 	.word	0x00f42400
 8006438:	007a1200 	.word	0x007a1200

0800643c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800643c:	b480      	push	{r7}
 800643e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006440:	4b03      	ldr	r3, [pc, #12]	; (8006450 <HAL_RCC_GetHCLKFreq+0x14>)
 8006442:	681b      	ldr	r3, [r3, #0]
}
 8006444:	4618      	mov	r0, r3
 8006446:	46bd      	mov	sp, r7
 8006448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644c:	4770      	bx	lr
 800644e:	bf00      	nop
 8006450:	20000004 	.word	0x20000004

08006454 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006458:	f7ff fff0 	bl	800643c <HAL_RCC_GetHCLKFreq>
 800645c:	4602      	mov	r2, r0
 800645e:	4b05      	ldr	r3, [pc, #20]	; (8006474 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006460:	689b      	ldr	r3, [r3, #8]
 8006462:	0a9b      	lsrs	r3, r3, #10
 8006464:	f003 0307 	and.w	r3, r3, #7
 8006468:	4903      	ldr	r1, [pc, #12]	; (8006478 <HAL_RCC_GetPCLK1Freq+0x24>)
 800646a:	5ccb      	ldrb	r3, [r1, r3]
 800646c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006470:	4618      	mov	r0, r3
 8006472:	bd80      	pop	{r7, pc}
 8006474:	40023800 	.word	0x40023800
 8006478:	08009d58 	.word	0x08009d58

0800647c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006480:	f7ff ffdc 	bl	800643c <HAL_RCC_GetHCLKFreq>
 8006484:	4602      	mov	r2, r0
 8006486:	4b05      	ldr	r3, [pc, #20]	; (800649c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006488:	689b      	ldr	r3, [r3, #8]
 800648a:	0b5b      	lsrs	r3, r3, #13
 800648c:	f003 0307 	and.w	r3, r3, #7
 8006490:	4903      	ldr	r1, [pc, #12]	; (80064a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006492:	5ccb      	ldrb	r3, [r1, r3]
 8006494:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006498:	4618      	mov	r0, r3
 800649a:	bd80      	pop	{r7, pc}
 800649c:	40023800 	.word	0x40023800
 80064a0:	08009d58 	.word	0x08009d58

080064a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b082      	sub	sp, #8
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d101      	bne.n	80064b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80064b2:	2301      	movs	r3, #1
 80064b4:	e07b      	b.n	80065ae <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d108      	bne.n	80064d0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80064c6:	d009      	beq.n	80064dc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2200      	movs	r2, #0
 80064cc:	61da      	str	r2, [r3, #28]
 80064ce:	e005      	b.n	80064dc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2200      	movs	r2, #0
 80064d4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2200      	movs	r2, #0
 80064da:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2200      	movs	r2, #0
 80064e0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80064e8:	b2db      	uxtb	r3, r3
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d106      	bne.n	80064fc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2200      	movs	r2, #0
 80064f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f7fb faa8 	bl	8001a4c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2202      	movs	r2, #2
 8006500:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	681a      	ldr	r2, [r3, #0]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006512:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	689b      	ldr	r3, [r3, #8]
 8006520:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006524:	431a      	orrs	r2, r3
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	68db      	ldr	r3, [r3, #12]
 800652a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800652e:	431a      	orrs	r2, r3
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	691b      	ldr	r3, [r3, #16]
 8006534:	f003 0302 	and.w	r3, r3, #2
 8006538:	431a      	orrs	r2, r3
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	695b      	ldr	r3, [r3, #20]
 800653e:	f003 0301 	and.w	r3, r3, #1
 8006542:	431a      	orrs	r2, r3
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	699b      	ldr	r3, [r3, #24]
 8006548:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800654c:	431a      	orrs	r2, r3
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	69db      	ldr	r3, [r3, #28]
 8006552:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006556:	431a      	orrs	r2, r3
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6a1b      	ldr	r3, [r3, #32]
 800655c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006560:	ea42 0103 	orr.w	r1, r2, r3
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006568:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	430a      	orrs	r2, r1
 8006572:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	699b      	ldr	r3, [r3, #24]
 8006578:	0c1b      	lsrs	r3, r3, #16
 800657a:	f003 0104 	and.w	r1, r3, #4
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006582:	f003 0210 	and.w	r2, r3, #16
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	430a      	orrs	r2, r1
 800658c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	69da      	ldr	r2, [r3, #28]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800659c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2200      	movs	r2, #0
 80065a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2201      	movs	r2, #1
 80065a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80065ac:	2300      	movs	r3, #0
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3708      	adds	r7, #8
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}

080065b6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80065b6:	b580      	push	{r7, lr}
 80065b8:	b082      	sub	sp, #8
 80065ba:	af00      	add	r7, sp, #0
 80065bc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d101      	bne.n	80065c8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80065c4:	2301      	movs	r3, #1
 80065c6:	e03f      	b.n	8006648 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065ce:	b2db      	uxtb	r3, r3
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d106      	bne.n	80065e2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2200      	movs	r2, #0
 80065d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f7fb fa9d 	bl	8001b1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2224      	movs	r2, #36	; 0x24
 80065e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	68da      	ldr	r2, [r3, #12]
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80065f8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f000 f928 	bl	8006850 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	691a      	ldr	r2, [r3, #16]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800660e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	695a      	ldr	r2, [r3, #20]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800661e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	68da      	ldr	r2, [r3, #12]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800662e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2200      	movs	r2, #0
 8006634:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2220      	movs	r2, #32
 800663a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2220      	movs	r2, #32
 8006642:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006646:	2300      	movs	r3, #0
}
 8006648:	4618      	mov	r0, r3
 800664a:	3708      	adds	r7, #8
 800664c:	46bd      	mov	sp, r7
 800664e:	bd80      	pop	{r7, pc}

08006650 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b08a      	sub	sp, #40	; 0x28
 8006654:	af02      	add	r7, sp, #8
 8006656:	60f8      	str	r0, [r7, #12]
 8006658:	60b9      	str	r1, [r7, #8]
 800665a:	603b      	str	r3, [r7, #0]
 800665c:	4613      	mov	r3, r2
 800665e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006660:	2300      	movs	r3, #0
 8006662:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800666a:	b2db      	uxtb	r3, r3
 800666c:	2b20      	cmp	r3, #32
 800666e:	d17c      	bne.n	800676a <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d002      	beq.n	800667c <HAL_UART_Transmit+0x2c>
 8006676:	88fb      	ldrh	r3, [r7, #6]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d101      	bne.n	8006680 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800667c:	2301      	movs	r3, #1
 800667e:	e075      	b.n	800676c <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006686:	2b01      	cmp	r3, #1
 8006688:	d101      	bne.n	800668e <HAL_UART_Transmit+0x3e>
 800668a:	2302      	movs	r3, #2
 800668c:	e06e      	b.n	800676c <HAL_UART_Transmit+0x11c>
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2201      	movs	r2, #1
 8006692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2200      	movs	r2, #0
 800669a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	2221      	movs	r2, #33	; 0x21
 80066a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80066a4:	f7fc fa8a 	bl	8002bbc <HAL_GetTick>
 80066a8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	88fa      	ldrh	r2, [r7, #6]
 80066ae:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	88fa      	ldrh	r2, [r7, #6]
 80066b4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	689b      	ldr	r3, [r3, #8]
 80066ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066be:	d108      	bne.n	80066d2 <HAL_UART_Transmit+0x82>
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	691b      	ldr	r3, [r3, #16]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d104      	bne.n	80066d2 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80066c8:	2300      	movs	r3, #0
 80066ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	61bb      	str	r3, [r7, #24]
 80066d0:	e003      	b.n	80066da <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80066d6:	2300      	movs	r3, #0
 80066d8:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2200      	movs	r2, #0
 80066de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80066e2:	e02a      	b.n	800673a <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	9300      	str	r3, [sp, #0]
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	2200      	movs	r2, #0
 80066ec:	2180      	movs	r1, #128	; 0x80
 80066ee:	68f8      	ldr	r0, [r7, #12]
 80066f0:	f000 f840 	bl	8006774 <UART_WaitOnFlagUntilTimeout>
 80066f4:	4603      	mov	r3, r0
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d001      	beq.n	80066fe <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80066fa:	2303      	movs	r3, #3
 80066fc:	e036      	b.n	800676c <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80066fe:	69fb      	ldr	r3, [r7, #28]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d10b      	bne.n	800671c <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006704:	69bb      	ldr	r3, [r7, #24]
 8006706:	881b      	ldrh	r3, [r3, #0]
 8006708:	461a      	mov	r2, r3
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006712:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006714:	69bb      	ldr	r3, [r7, #24]
 8006716:	3302      	adds	r3, #2
 8006718:	61bb      	str	r3, [r7, #24]
 800671a:	e007      	b.n	800672c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800671c:	69fb      	ldr	r3, [r7, #28]
 800671e:	781a      	ldrb	r2, [r3, #0]
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006726:	69fb      	ldr	r3, [r7, #28]
 8006728:	3301      	adds	r3, #1
 800672a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006730:	b29b      	uxth	r3, r3
 8006732:	3b01      	subs	r3, #1
 8006734:	b29a      	uxth	r2, r3
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800673e:	b29b      	uxth	r3, r3
 8006740:	2b00      	cmp	r3, #0
 8006742:	d1cf      	bne.n	80066e4 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	9300      	str	r3, [sp, #0]
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	2200      	movs	r2, #0
 800674c:	2140      	movs	r1, #64	; 0x40
 800674e:	68f8      	ldr	r0, [r7, #12]
 8006750:	f000 f810 	bl	8006774 <UART_WaitOnFlagUntilTimeout>
 8006754:	4603      	mov	r3, r0
 8006756:	2b00      	cmp	r3, #0
 8006758:	d001      	beq.n	800675e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800675a:	2303      	movs	r3, #3
 800675c:	e006      	b.n	800676c <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	2220      	movs	r2, #32
 8006762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006766:	2300      	movs	r3, #0
 8006768:	e000      	b.n	800676c <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800676a:	2302      	movs	r3, #2
  }
}
 800676c:	4618      	mov	r0, r3
 800676e:	3720      	adds	r7, #32
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}

08006774 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b090      	sub	sp, #64	; 0x40
 8006778:	af00      	add	r7, sp, #0
 800677a:	60f8      	str	r0, [r7, #12]
 800677c:	60b9      	str	r1, [r7, #8]
 800677e:	603b      	str	r3, [r7, #0]
 8006780:	4613      	mov	r3, r2
 8006782:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006784:	e050      	b.n	8006828 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006786:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800678c:	d04c      	beq.n	8006828 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800678e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006790:	2b00      	cmp	r3, #0
 8006792:	d007      	beq.n	80067a4 <UART_WaitOnFlagUntilTimeout+0x30>
 8006794:	f7fc fa12 	bl	8002bbc <HAL_GetTick>
 8006798:	4602      	mov	r2, r0
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	1ad3      	subs	r3, r2, r3
 800679e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80067a0:	429a      	cmp	r2, r3
 80067a2:	d241      	bcs.n	8006828 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	330c      	adds	r3, #12
 80067aa:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ae:	e853 3f00 	ldrex	r3, [r3]
 80067b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80067b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80067ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	330c      	adds	r3, #12
 80067c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80067c4:	637a      	str	r2, [r7, #52]	; 0x34
 80067c6:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80067ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80067cc:	e841 2300 	strex	r3, r2, [r1]
 80067d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80067d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d1e5      	bne.n	80067a4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	3314      	adds	r3, #20
 80067de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	e853 3f00 	ldrex	r3, [r3]
 80067e6:	613b      	str	r3, [r7, #16]
   return(result);
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	f023 0301 	bic.w	r3, r3, #1
 80067ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	3314      	adds	r3, #20
 80067f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80067f8:	623a      	str	r2, [r7, #32]
 80067fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067fc:	69f9      	ldr	r1, [r7, #28]
 80067fe:	6a3a      	ldr	r2, [r7, #32]
 8006800:	e841 2300 	strex	r3, r2, [r1]
 8006804:	61bb      	str	r3, [r7, #24]
   return(result);
 8006806:	69bb      	ldr	r3, [r7, #24]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d1e5      	bne.n	80067d8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	2220      	movs	r2, #32
 8006810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2220      	movs	r2, #32
 8006818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	2200      	movs	r2, #0
 8006820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006824:	2303      	movs	r3, #3
 8006826:	e00f      	b.n	8006848 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	681a      	ldr	r2, [r3, #0]
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	4013      	ands	r3, r2
 8006832:	68ba      	ldr	r2, [r7, #8]
 8006834:	429a      	cmp	r2, r3
 8006836:	bf0c      	ite	eq
 8006838:	2301      	moveq	r3, #1
 800683a:	2300      	movne	r3, #0
 800683c:	b2db      	uxtb	r3, r3
 800683e:	461a      	mov	r2, r3
 8006840:	79fb      	ldrb	r3, [r7, #7]
 8006842:	429a      	cmp	r2, r3
 8006844:	d09f      	beq.n	8006786 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006846:	2300      	movs	r3, #0
}
 8006848:	4618      	mov	r0, r3
 800684a:	3740      	adds	r7, #64	; 0x40
 800684c:	46bd      	mov	sp, r7
 800684e:	bd80      	pop	{r7, pc}

08006850 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006850:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006854:	b0c0      	sub	sp, #256	; 0x100
 8006856:	af00      	add	r7, sp, #0
 8006858:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800685c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	691b      	ldr	r3, [r3, #16]
 8006864:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800686c:	68d9      	ldr	r1, [r3, #12]
 800686e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006872:	681a      	ldr	r2, [r3, #0]
 8006874:	ea40 0301 	orr.w	r3, r0, r1
 8006878:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800687a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800687e:	689a      	ldr	r2, [r3, #8]
 8006880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006884:	691b      	ldr	r3, [r3, #16]
 8006886:	431a      	orrs	r2, r3
 8006888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800688c:	695b      	ldr	r3, [r3, #20]
 800688e:	431a      	orrs	r2, r3
 8006890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006894:	69db      	ldr	r3, [r3, #28]
 8006896:	4313      	orrs	r3, r2
 8006898:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800689c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	68db      	ldr	r3, [r3, #12]
 80068a4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80068a8:	f021 010c 	bic.w	r1, r1, #12
 80068ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80068b6:	430b      	orrs	r3, r1
 80068b8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80068ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	695b      	ldr	r3, [r3, #20]
 80068c2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80068c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068ca:	6999      	ldr	r1, [r3, #24]
 80068cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068d0:	681a      	ldr	r2, [r3, #0]
 80068d2:	ea40 0301 	orr.w	r3, r0, r1
 80068d6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80068d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068dc:	681a      	ldr	r2, [r3, #0]
 80068de:	4b8f      	ldr	r3, [pc, #572]	; (8006b1c <UART_SetConfig+0x2cc>)
 80068e0:	429a      	cmp	r2, r3
 80068e2:	d005      	beq.n	80068f0 <UART_SetConfig+0xa0>
 80068e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068e8:	681a      	ldr	r2, [r3, #0]
 80068ea:	4b8d      	ldr	r3, [pc, #564]	; (8006b20 <UART_SetConfig+0x2d0>)
 80068ec:	429a      	cmp	r2, r3
 80068ee:	d104      	bne.n	80068fa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80068f0:	f7ff fdc4 	bl	800647c <HAL_RCC_GetPCLK2Freq>
 80068f4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80068f8:	e003      	b.n	8006902 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80068fa:	f7ff fdab 	bl	8006454 <HAL_RCC_GetPCLK1Freq>
 80068fe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006902:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006906:	69db      	ldr	r3, [r3, #28]
 8006908:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800690c:	f040 810c 	bne.w	8006b28 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006910:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006914:	2200      	movs	r2, #0
 8006916:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800691a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800691e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006922:	4622      	mov	r2, r4
 8006924:	462b      	mov	r3, r5
 8006926:	1891      	adds	r1, r2, r2
 8006928:	65b9      	str	r1, [r7, #88]	; 0x58
 800692a:	415b      	adcs	r3, r3
 800692c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800692e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006932:	4621      	mov	r1, r4
 8006934:	eb12 0801 	adds.w	r8, r2, r1
 8006938:	4629      	mov	r1, r5
 800693a:	eb43 0901 	adc.w	r9, r3, r1
 800693e:	f04f 0200 	mov.w	r2, #0
 8006942:	f04f 0300 	mov.w	r3, #0
 8006946:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800694a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800694e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006952:	4690      	mov	r8, r2
 8006954:	4699      	mov	r9, r3
 8006956:	4623      	mov	r3, r4
 8006958:	eb18 0303 	adds.w	r3, r8, r3
 800695c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006960:	462b      	mov	r3, r5
 8006962:	eb49 0303 	adc.w	r3, r9, r3
 8006966:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800696a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	2200      	movs	r2, #0
 8006972:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006976:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800697a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800697e:	460b      	mov	r3, r1
 8006980:	18db      	adds	r3, r3, r3
 8006982:	653b      	str	r3, [r7, #80]	; 0x50
 8006984:	4613      	mov	r3, r2
 8006986:	eb42 0303 	adc.w	r3, r2, r3
 800698a:	657b      	str	r3, [r7, #84]	; 0x54
 800698c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006990:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006994:	f7fa f980 	bl	8000c98 <__aeabi_uldivmod>
 8006998:	4602      	mov	r2, r0
 800699a:	460b      	mov	r3, r1
 800699c:	4b61      	ldr	r3, [pc, #388]	; (8006b24 <UART_SetConfig+0x2d4>)
 800699e:	fba3 2302 	umull	r2, r3, r3, r2
 80069a2:	095b      	lsrs	r3, r3, #5
 80069a4:	011c      	lsls	r4, r3, #4
 80069a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069aa:	2200      	movs	r2, #0
 80069ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80069b0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80069b4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80069b8:	4642      	mov	r2, r8
 80069ba:	464b      	mov	r3, r9
 80069bc:	1891      	adds	r1, r2, r2
 80069be:	64b9      	str	r1, [r7, #72]	; 0x48
 80069c0:	415b      	adcs	r3, r3
 80069c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80069c4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80069c8:	4641      	mov	r1, r8
 80069ca:	eb12 0a01 	adds.w	sl, r2, r1
 80069ce:	4649      	mov	r1, r9
 80069d0:	eb43 0b01 	adc.w	fp, r3, r1
 80069d4:	f04f 0200 	mov.w	r2, #0
 80069d8:	f04f 0300 	mov.w	r3, #0
 80069dc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80069e0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80069e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80069e8:	4692      	mov	sl, r2
 80069ea:	469b      	mov	fp, r3
 80069ec:	4643      	mov	r3, r8
 80069ee:	eb1a 0303 	adds.w	r3, sl, r3
 80069f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80069f6:	464b      	mov	r3, r9
 80069f8:	eb4b 0303 	adc.w	r3, fp, r3
 80069fc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	2200      	movs	r2, #0
 8006a08:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006a0c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006a10:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006a14:	460b      	mov	r3, r1
 8006a16:	18db      	adds	r3, r3, r3
 8006a18:	643b      	str	r3, [r7, #64]	; 0x40
 8006a1a:	4613      	mov	r3, r2
 8006a1c:	eb42 0303 	adc.w	r3, r2, r3
 8006a20:	647b      	str	r3, [r7, #68]	; 0x44
 8006a22:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006a26:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006a2a:	f7fa f935 	bl	8000c98 <__aeabi_uldivmod>
 8006a2e:	4602      	mov	r2, r0
 8006a30:	460b      	mov	r3, r1
 8006a32:	4611      	mov	r1, r2
 8006a34:	4b3b      	ldr	r3, [pc, #236]	; (8006b24 <UART_SetConfig+0x2d4>)
 8006a36:	fba3 2301 	umull	r2, r3, r3, r1
 8006a3a:	095b      	lsrs	r3, r3, #5
 8006a3c:	2264      	movs	r2, #100	; 0x64
 8006a3e:	fb02 f303 	mul.w	r3, r2, r3
 8006a42:	1acb      	subs	r3, r1, r3
 8006a44:	00db      	lsls	r3, r3, #3
 8006a46:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006a4a:	4b36      	ldr	r3, [pc, #216]	; (8006b24 <UART_SetConfig+0x2d4>)
 8006a4c:	fba3 2302 	umull	r2, r3, r3, r2
 8006a50:	095b      	lsrs	r3, r3, #5
 8006a52:	005b      	lsls	r3, r3, #1
 8006a54:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006a58:	441c      	add	r4, r3
 8006a5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a5e:	2200      	movs	r2, #0
 8006a60:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006a64:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006a68:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006a6c:	4642      	mov	r2, r8
 8006a6e:	464b      	mov	r3, r9
 8006a70:	1891      	adds	r1, r2, r2
 8006a72:	63b9      	str	r1, [r7, #56]	; 0x38
 8006a74:	415b      	adcs	r3, r3
 8006a76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a78:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006a7c:	4641      	mov	r1, r8
 8006a7e:	1851      	adds	r1, r2, r1
 8006a80:	6339      	str	r1, [r7, #48]	; 0x30
 8006a82:	4649      	mov	r1, r9
 8006a84:	414b      	adcs	r3, r1
 8006a86:	637b      	str	r3, [r7, #52]	; 0x34
 8006a88:	f04f 0200 	mov.w	r2, #0
 8006a8c:	f04f 0300 	mov.w	r3, #0
 8006a90:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006a94:	4659      	mov	r1, fp
 8006a96:	00cb      	lsls	r3, r1, #3
 8006a98:	4651      	mov	r1, sl
 8006a9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a9e:	4651      	mov	r1, sl
 8006aa0:	00ca      	lsls	r2, r1, #3
 8006aa2:	4610      	mov	r0, r2
 8006aa4:	4619      	mov	r1, r3
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	4642      	mov	r2, r8
 8006aaa:	189b      	adds	r3, r3, r2
 8006aac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006ab0:	464b      	mov	r3, r9
 8006ab2:	460a      	mov	r2, r1
 8006ab4:	eb42 0303 	adc.w	r3, r2, r3
 8006ab8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006abc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ac0:	685b      	ldr	r3, [r3, #4]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006ac8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006acc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006ad0:	460b      	mov	r3, r1
 8006ad2:	18db      	adds	r3, r3, r3
 8006ad4:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ad6:	4613      	mov	r3, r2
 8006ad8:	eb42 0303 	adc.w	r3, r2, r3
 8006adc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ade:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006ae2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006ae6:	f7fa f8d7 	bl	8000c98 <__aeabi_uldivmod>
 8006aea:	4602      	mov	r2, r0
 8006aec:	460b      	mov	r3, r1
 8006aee:	4b0d      	ldr	r3, [pc, #52]	; (8006b24 <UART_SetConfig+0x2d4>)
 8006af0:	fba3 1302 	umull	r1, r3, r3, r2
 8006af4:	095b      	lsrs	r3, r3, #5
 8006af6:	2164      	movs	r1, #100	; 0x64
 8006af8:	fb01 f303 	mul.w	r3, r1, r3
 8006afc:	1ad3      	subs	r3, r2, r3
 8006afe:	00db      	lsls	r3, r3, #3
 8006b00:	3332      	adds	r3, #50	; 0x32
 8006b02:	4a08      	ldr	r2, [pc, #32]	; (8006b24 <UART_SetConfig+0x2d4>)
 8006b04:	fba2 2303 	umull	r2, r3, r2, r3
 8006b08:	095b      	lsrs	r3, r3, #5
 8006b0a:	f003 0207 	and.w	r2, r3, #7
 8006b0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4422      	add	r2, r4
 8006b16:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006b18:	e105      	b.n	8006d26 <UART_SetConfig+0x4d6>
 8006b1a:	bf00      	nop
 8006b1c:	40011000 	.word	0x40011000
 8006b20:	40011400 	.word	0x40011400
 8006b24:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006b28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006b32:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006b36:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006b3a:	4642      	mov	r2, r8
 8006b3c:	464b      	mov	r3, r9
 8006b3e:	1891      	adds	r1, r2, r2
 8006b40:	6239      	str	r1, [r7, #32]
 8006b42:	415b      	adcs	r3, r3
 8006b44:	627b      	str	r3, [r7, #36]	; 0x24
 8006b46:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006b4a:	4641      	mov	r1, r8
 8006b4c:	1854      	adds	r4, r2, r1
 8006b4e:	4649      	mov	r1, r9
 8006b50:	eb43 0501 	adc.w	r5, r3, r1
 8006b54:	f04f 0200 	mov.w	r2, #0
 8006b58:	f04f 0300 	mov.w	r3, #0
 8006b5c:	00eb      	lsls	r3, r5, #3
 8006b5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006b62:	00e2      	lsls	r2, r4, #3
 8006b64:	4614      	mov	r4, r2
 8006b66:	461d      	mov	r5, r3
 8006b68:	4643      	mov	r3, r8
 8006b6a:	18e3      	adds	r3, r4, r3
 8006b6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006b70:	464b      	mov	r3, r9
 8006b72:	eb45 0303 	adc.w	r3, r5, r3
 8006b76:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006b7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b7e:	685b      	ldr	r3, [r3, #4]
 8006b80:	2200      	movs	r2, #0
 8006b82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006b86:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006b8a:	f04f 0200 	mov.w	r2, #0
 8006b8e:	f04f 0300 	mov.w	r3, #0
 8006b92:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006b96:	4629      	mov	r1, r5
 8006b98:	008b      	lsls	r3, r1, #2
 8006b9a:	4621      	mov	r1, r4
 8006b9c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006ba0:	4621      	mov	r1, r4
 8006ba2:	008a      	lsls	r2, r1, #2
 8006ba4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006ba8:	f7fa f876 	bl	8000c98 <__aeabi_uldivmod>
 8006bac:	4602      	mov	r2, r0
 8006bae:	460b      	mov	r3, r1
 8006bb0:	4b60      	ldr	r3, [pc, #384]	; (8006d34 <UART_SetConfig+0x4e4>)
 8006bb2:	fba3 2302 	umull	r2, r3, r3, r2
 8006bb6:	095b      	lsrs	r3, r3, #5
 8006bb8:	011c      	lsls	r4, r3, #4
 8006bba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006bc4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006bc8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006bcc:	4642      	mov	r2, r8
 8006bce:	464b      	mov	r3, r9
 8006bd0:	1891      	adds	r1, r2, r2
 8006bd2:	61b9      	str	r1, [r7, #24]
 8006bd4:	415b      	adcs	r3, r3
 8006bd6:	61fb      	str	r3, [r7, #28]
 8006bd8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006bdc:	4641      	mov	r1, r8
 8006bde:	1851      	adds	r1, r2, r1
 8006be0:	6139      	str	r1, [r7, #16]
 8006be2:	4649      	mov	r1, r9
 8006be4:	414b      	adcs	r3, r1
 8006be6:	617b      	str	r3, [r7, #20]
 8006be8:	f04f 0200 	mov.w	r2, #0
 8006bec:	f04f 0300 	mov.w	r3, #0
 8006bf0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006bf4:	4659      	mov	r1, fp
 8006bf6:	00cb      	lsls	r3, r1, #3
 8006bf8:	4651      	mov	r1, sl
 8006bfa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006bfe:	4651      	mov	r1, sl
 8006c00:	00ca      	lsls	r2, r1, #3
 8006c02:	4610      	mov	r0, r2
 8006c04:	4619      	mov	r1, r3
 8006c06:	4603      	mov	r3, r0
 8006c08:	4642      	mov	r2, r8
 8006c0a:	189b      	adds	r3, r3, r2
 8006c0c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006c10:	464b      	mov	r3, r9
 8006c12:	460a      	mov	r2, r1
 8006c14:	eb42 0303 	adc.w	r3, r2, r3
 8006c18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	2200      	movs	r2, #0
 8006c24:	67bb      	str	r3, [r7, #120]	; 0x78
 8006c26:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006c28:	f04f 0200 	mov.w	r2, #0
 8006c2c:	f04f 0300 	mov.w	r3, #0
 8006c30:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006c34:	4649      	mov	r1, r9
 8006c36:	008b      	lsls	r3, r1, #2
 8006c38:	4641      	mov	r1, r8
 8006c3a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006c3e:	4641      	mov	r1, r8
 8006c40:	008a      	lsls	r2, r1, #2
 8006c42:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006c46:	f7fa f827 	bl	8000c98 <__aeabi_uldivmod>
 8006c4a:	4602      	mov	r2, r0
 8006c4c:	460b      	mov	r3, r1
 8006c4e:	4b39      	ldr	r3, [pc, #228]	; (8006d34 <UART_SetConfig+0x4e4>)
 8006c50:	fba3 1302 	umull	r1, r3, r3, r2
 8006c54:	095b      	lsrs	r3, r3, #5
 8006c56:	2164      	movs	r1, #100	; 0x64
 8006c58:	fb01 f303 	mul.w	r3, r1, r3
 8006c5c:	1ad3      	subs	r3, r2, r3
 8006c5e:	011b      	lsls	r3, r3, #4
 8006c60:	3332      	adds	r3, #50	; 0x32
 8006c62:	4a34      	ldr	r2, [pc, #208]	; (8006d34 <UART_SetConfig+0x4e4>)
 8006c64:	fba2 2303 	umull	r2, r3, r2, r3
 8006c68:	095b      	lsrs	r3, r3, #5
 8006c6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006c6e:	441c      	add	r4, r3
 8006c70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c74:	2200      	movs	r2, #0
 8006c76:	673b      	str	r3, [r7, #112]	; 0x70
 8006c78:	677a      	str	r2, [r7, #116]	; 0x74
 8006c7a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006c7e:	4642      	mov	r2, r8
 8006c80:	464b      	mov	r3, r9
 8006c82:	1891      	adds	r1, r2, r2
 8006c84:	60b9      	str	r1, [r7, #8]
 8006c86:	415b      	adcs	r3, r3
 8006c88:	60fb      	str	r3, [r7, #12]
 8006c8a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006c8e:	4641      	mov	r1, r8
 8006c90:	1851      	adds	r1, r2, r1
 8006c92:	6039      	str	r1, [r7, #0]
 8006c94:	4649      	mov	r1, r9
 8006c96:	414b      	adcs	r3, r1
 8006c98:	607b      	str	r3, [r7, #4]
 8006c9a:	f04f 0200 	mov.w	r2, #0
 8006c9e:	f04f 0300 	mov.w	r3, #0
 8006ca2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006ca6:	4659      	mov	r1, fp
 8006ca8:	00cb      	lsls	r3, r1, #3
 8006caa:	4651      	mov	r1, sl
 8006cac:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006cb0:	4651      	mov	r1, sl
 8006cb2:	00ca      	lsls	r2, r1, #3
 8006cb4:	4610      	mov	r0, r2
 8006cb6:	4619      	mov	r1, r3
 8006cb8:	4603      	mov	r3, r0
 8006cba:	4642      	mov	r2, r8
 8006cbc:	189b      	adds	r3, r3, r2
 8006cbe:	66bb      	str	r3, [r7, #104]	; 0x68
 8006cc0:	464b      	mov	r3, r9
 8006cc2:	460a      	mov	r2, r1
 8006cc4:	eb42 0303 	adc.w	r3, r2, r3
 8006cc8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006cca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cce:	685b      	ldr	r3, [r3, #4]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	663b      	str	r3, [r7, #96]	; 0x60
 8006cd4:	667a      	str	r2, [r7, #100]	; 0x64
 8006cd6:	f04f 0200 	mov.w	r2, #0
 8006cda:	f04f 0300 	mov.w	r3, #0
 8006cde:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006ce2:	4649      	mov	r1, r9
 8006ce4:	008b      	lsls	r3, r1, #2
 8006ce6:	4641      	mov	r1, r8
 8006ce8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006cec:	4641      	mov	r1, r8
 8006cee:	008a      	lsls	r2, r1, #2
 8006cf0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006cf4:	f7f9 ffd0 	bl	8000c98 <__aeabi_uldivmod>
 8006cf8:	4602      	mov	r2, r0
 8006cfa:	460b      	mov	r3, r1
 8006cfc:	4b0d      	ldr	r3, [pc, #52]	; (8006d34 <UART_SetConfig+0x4e4>)
 8006cfe:	fba3 1302 	umull	r1, r3, r3, r2
 8006d02:	095b      	lsrs	r3, r3, #5
 8006d04:	2164      	movs	r1, #100	; 0x64
 8006d06:	fb01 f303 	mul.w	r3, r1, r3
 8006d0a:	1ad3      	subs	r3, r2, r3
 8006d0c:	011b      	lsls	r3, r3, #4
 8006d0e:	3332      	adds	r3, #50	; 0x32
 8006d10:	4a08      	ldr	r2, [pc, #32]	; (8006d34 <UART_SetConfig+0x4e4>)
 8006d12:	fba2 2303 	umull	r2, r3, r2, r3
 8006d16:	095b      	lsrs	r3, r3, #5
 8006d18:	f003 020f 	and.w	r2, r3, #15
 8006d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4422      	add	r2, r4
 8006d24:	609a      	str	r2, [r3, #8]
}
 8006d26:	bf00      	nop
 8006d28:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d32:	bf00      	nop
 8006d34:	51eb851f 	.word	0x51eb851f

08006d38 <__errno>:
 8006d38:	4b01      	ldr	r3, [pc, #4]	; (8006d40 <__errno+0x8>)
 8006d3a:	6818      	ldr	r0, [r3, #0]
 8006d3c:	4770      	bx	lr
 8006d3e:	bf00      	nop
 8006d40:	20000020 	.word	0x20000020

08006d44 <__libc_init_array>:
 8006d44:	b570      	push	{r4, r5, r6, lr}
 8006d46:	4d0d      	ldr	r5, [pc, #52]	; (8006d7c <__libc_init_array+0x38>)
 8006d48:	4c0d      	ldr	r4, [pc, #52]	; (8006d80 <__libc_init_array+0x3c>)
 8006d4a:	1b64      	subs	r4, r4, r5
 8006d4c:	10a4      	asrs	r4, r4, #2
 8006d4e:	2600      	movs	r6, #0
 8006d50:	42a6      	cmp	r6, r4
 8006d52:	d109      	bne.n	8006d68 <__libc_init_array+0x24>
 8006d54:	4d0b      	ldr	r5, [pc, #44]	; (8006d84 <__libc_init_array+0x40>)
 8006d56:	4c0c      	ldr	r4, [pc, #48]	; (8006d88 <__libc_init_array+0x44>)
 8006d58:	f002 ff76 	bl	8009c48 <_init>
 8006d5c:	1b64      	subs	r4, r4, r5
 8006d5e:	10a4      	asrs	r4, r4, #2
 8006d60:	2600      	movs	r6, #0
 8006d62:	42a6      	cmp	r6, r4
 8006d64:	d105      	bne.n	8006d72 <__libc_init_array+0x2e>
 8006d66:	bd70      	pop	{r4, r5, r6, pc}
 8006d68:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d6c:	4798      	blx	r3
 8006d6e:	3601      	adds	r6, #1
 8006d70:	e7ee      	b.n	8006d50 <__libc_init_array+0xc>
 8006d72:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d76:	4798      	blx	r3
 8006d78:	3601      	adds	r6, #1
 8006d7a:	e7f2      	b.n	8006d62 <__libc_init_array+0x1e>
 8006d7c:	0800bbfc 	.word	0x0800bbfc
 8006d80:	0800bbfc 	.word	0x0800bbfc
 8006d84:	0800bbfc 	.word	0x0800bbfc
 8006d88:	0800bc00 	.word	0x0800bc00

08006d8c <memset>:
 8006d8c:	4402      	add	r2, r0
 8006d8e:	4603      	mov	r3, r0
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d100      	bne.n	8006d96 <memset+0xa>
 8006d94:	4770      	bx	lr
 8006d96:	f803 1b01 	strb.w	r1, [r3], #1
 8006d9a:	e7f9      	b.n	8006d90 <memset+0x4>

08006d9c <__cvt>:
 8006d9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006da0:	ec55 4b10 	vmov	r4, r5, d0
 8006da4:	2d00      	cmp	r5, #0
 8006da6:	460e      	mov	r6, r1
 8006da8:	4619      	mov	r1, r3
 8006daa:	462b      	mov	r3, r5
 8006dac:	bfbb      	ittet	lt
 8006dae:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006db2:	461d      	movlt	r5, r3
 8006db4:	2300      	movge	r3, #0
 8006db6:	232d      	movlt	r3, #45	; 0x2d
 8006db8:	700b      	strb	r3, [r1, #0]
 8006dba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006dbc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006dc0:	4691      	mov	r9, r2
 8006dc2:	f023 0820 	bic.w	r8, r3, #32
 8006dc6:	bfbc      	itt	lt
 8006dc8:	4622      	movlt	r2, r4
 8006dca:	4614      	movlt	r4, r2
 8006dcc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006dd0:	d005      	beq.n	8006dde <__cvt+0x42>
 8006dd2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006dd6:	d100      	bne.n	8006dda <__cvt+0x3e>
 8006dd8:	3601      	adds	r6, #1
 8006dda:	2102      	movs	r1, #2
 8006ddc:	e000      	b.n	8006de0 <__cvt+0x44>
 8006dde:	2103      	movs	r1, #3
 8006de0:	ab03      	add	r3, sp, #12
 8006de2:	9301      	str	r3, [sp, #4]
 8006de4:	ab02      	add	r3, sp, #8
 8006de6:	9300      	str	r3, [sp, #0]
 8006de8:	ec45 4b10 	vmov	d0, r4, r5
 8006dec:	4653      	mov	r3, sl
 8006dee:	4632      	mov	r2, r6
 8006df0:	f000 fcea 	bl	80077c8 <_dtoa_r>
 8006df4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006df8:	4607      	mov	r7, r0
 8006dfa:	d102      	bne.n	8006e02 <__cvt+0x66>
 8006dfc:	f019 0f01 	tst.w	r9, #1
 8006e00:	d022      	beq.n	8006e48 <__cvt+0xac>
 8006e02:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006e06:	eb07 0906 	add.w	r9, r7, r6
 8006e0a:	d110      	bne.n	8006e2e <__cvt+0x92>
 8006e0c:	783b      	ldrb	r3, [r7, #0]
 8006e0e:	2b30      	cmp	r3, #48	; 0x30
 8006e10:	d10a      	bne.n	8006e28 <__cvt+0x8c>
 8006e12:	2200      	movs	r2, #0
 8006e14:	2300      	movs	r3, #0
 8006e16:	4620      	mov	r0, r4
 8006e18:	4629      	mov	r1, r5
 8006e1a:	f7f9 fe5d 	bl	8000ad8 <__aeabi_dcmpeq>
 8006e1e:	b918      	cbnz	r0, 8006e28 <__cvt+0x8c>
 8006e20:	f1c6 0601 	rsb	r6, r6, #1
 8006e24:	f8ca 6000 	str.w	r6, [sl]
 8006e28:	f8da 3000 	ldr.w	r3, [sl]
 8006e2c:	4499      	add	r9, r3
 8006e2e:	2200      	movs	r2, #0
 8006e30:	2300      	movs	r3, #0
 8006e32:	4620      	mov	r0, r4
 8006e34:	4629      	mov	r1, r5
 8006e36:	f7f9 fe4f 	bl	8000ad8 <__aeabi_dcmpeq>
 8006e3a:	b108      	cbz	r0, 8006e40 <__cvt+0xa4>
 8006e3c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006e40:	2230      	movs	r2, #48	; 0x30
 8006e42:	9b03      	ldr	r3, [sp, #12]
 8006e44:	454b      	cmp	r3, r9
 8006e46:	d307      	bcc.n	8006e58 <__cvt+0xbc>
 8006e48:	9b03      	ldr	r3, [sp, #12]
 8006e4a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006e4c:	1bdb      	subs	r3, r3, r7
 8006e4e:	4638      	mov	r0, r7
 8006e50:	6013      	str	r3, [r2, #0]
 8006e52:	b004      	add	sp, #16
 8006e54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e58:	1c59      	adds	r1, r3, #1
 8006e5a:	9103      	str	r1, [sp, #12]
 8006e5c:	701a      	strb	r2, [r3, #0]
 8006e5e:	e7f0      	b.n	8006e42 <__cvt+0xa6>

08006e60 <__exponent>:
 8006e60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e62:	4603      	mov	r3, r0
 8006e64:	2900      	cmp	r1, #0
 8006e66:	bfb8      	it	lt
 8006e68:	4249      	neglt	r1, r1
 8006e6a:	f803 2b02 	strb.w	r2, [r3], #2
 8006e6e:	bfb4      	ite	lt
 8006e70:	222d      	movlt	r2, #45	; 0x2d
 8006e72:	222b      	movge	r2, #43	; 0x2b
 8006e74:	2909      	cmp	r1, #9
 8006e76:	7042      	strb	r2, [r0, #1]
 8006e78:	dd2a      	ble.n	8006ed0 <__exponent+0x70>
 8006e7a:	f10d 0407 	add.w	r4, sp, #7
 8006e7e:	46a4      	mov	ip, r4
 8006e80:	270a      	movs	r7, #10
 8006e82:	46a6      	mov	lr, r4
 8006e84:	460a      	mov	r2, r1
 8006e86:	fb91 f6f7 	sdiv	r6, r1, r7
 8006e8a:	fb07 1516 	mls	r5, r7, r6, r1
 8006e8e:	3530      	adds	r5, #48	; 0x30
 8006e90:	2a63      	cmp	r2, #99	; 0x63
 8006e92:	f104 34ff 	add.w	r4, r4, #4294967295
 8006e96:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006e9a:	4631      	mov	r1, r6
 8006e9c:	dcf1      	bgt.n	8006e82 <__exponent+0x22>
 8006e9e:	3130      	adds	r1, #48	; 0x30
 8006ea0:	f1ae 0502 	sub.w	r5, lr, #2
 8006ea4:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006ea8:	1c44      	adds	r4, r0, #1
 8006eaa:	4629      	mov	r1, r5
 8006eac:	4561      	cmp	r1, ip
 8006eae:	d30a      	bcc.n	8006ec6 <__exponent+0x66>
 8006eb0:	f10d 0209 	add.w	r2, sp, #9
 8006eb4:	eba2 020e 	sub.w	r2, r2, lr
 8006eb8:	4565      	cmp	r5, ip
 8006eba:	bf88      	it	hi
 8006ebc:	2200      	movhi	r2, #0
 8006ebe:	4413      	add	r3, r2
 8006ec0:	1a18      	subs	r0, r3, r0
 8006ec2:	b003      	add	sp, #12
 8006ec4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ec6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006eca:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006ece:	e7ed      	b.n	8006eac <__exponent+0x4c>
 8006ed0:	2330      	movs	r3, #48	; 0x30
 8006ed2:	3130      	adds	r1, #48	; 0x30
 8006ed4:	7083      	strb	r3, [r0, #2]
 8006ed6:	70c1      	strb	r1, [r0, #3]
 8006ed8:	1d03      	adds	r3, r0, #4
 8006eda:	e7f1      	b.n	8006ec0 <__exponent+0x60>

08006edc <_printf_float>:
 8006edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ee0:	ed2d 8b02 	vpush	{d8}
 8006ee4:	b08d      	sub	sp, #52	; 0x34
 8006ee6:	460c      	mov	r4, r1
 8006ee8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006eec:	4616      	mov	r6, r2
 8006eee:	461f      	mov	r7, r3
 8006ef0:	4605      	mov	r5, r0
 8006ef2:	f001 fa57 	bl	80083a4 <_localeconv_r>
 8006ef6:	f8d0 a000 	ldr.w	sl, [r0]
 8006efa:	4650      	mov	r0, sl
 8006efc:	f7f9 f970 	bl	80001e0 <strlen>
 8006f00:	2300      	movs	r3, #0
 8006f02:	930a      	str	r3, [sp, #40]	; 0x28
 8006f04:	6823      	ldr	r3, [r4, #0]
 8006f06:	9305      	str	r3, [sp, #20]
 8006f08:	f8d8 3000 	ldr.w	r3, [r8]
 8006f0c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006f10:	3307      	adds	r3, #7
 8006f12:	f023 0307 	bic.w	r3, r3, #7
 8006f16:	f103 0208 	add.w	r2, r3, #8
 8006f1a:	f8c8 2000 	str.w	r2, [r8]
 8006f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f22:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006f26:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006f2a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006f2e:	9307      	str	r3, [sp, #28]
 8006f30:	f8cd 8018 	str.w	r8, [sp, #24]
 8006f34:	ee08 0a10 	vmov	s16, r0
 8006f38:	4b9f      	ldr	r3, [pc, #636]	; (80071b8 <_printf_float+0x2dc>)
 8006f3a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006f3e:	f04f 32ff 	mov.w	r2, #4294967295
 8006f42:	f7f9 fdfb 	bl	8000b3c <__aeabi_dcmpun>
 8006f46:	bb88      	cbnz	r0, 8006fac <_printf_float+0xd0>
 8006f48:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006f4c:	4b9a      	ldr	r3, [pc, #616]	; (80071b8 <_printf_float+0x2dc>)
 8006f4e:	f04f 32ff 	mov.w	r2, #4294967295
 8006f52:	f7f9 fdd5 	bl	8000b00 <__aeabi_dcmple>
 8006f56:	bb48      	cbnz	r0, 8006fac <_printf_float+0xd0>
 8006f58:	2200      	movs	r2, #0
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	4640      	mov	r0, r8
 8006f5e:	4649      	mov	r1, r9
 8006f60:	f7f9 fdc4 	bl	8000aec <__aeabi_dcmplt>
 8006f64:	b110      	cbz	r0, 8006f6c <_printf_float+0x90>
 8006f66:	232d      	movs	r3, #45	; 0x2d
 8006f68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f6c:	4b93      	ldr	r3, [pc, #588]	; (80071bc <_printf_float+0x2e0>)
 8006f6e:	4894      	ldr	r0, [pc, #592]	; (80071c0 <_printf_float+0x2e4>)
 8006f70:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006f74:	bf94      	ite	ls
 8006f76:	4698      	movls	r8, r3
 8006f78:	4680      	movhi	r8, r0
 8006f7a:	2303      	movs	r3, #3
 8006f7c:	6123      	str	r3, [r4, #16]
 8006f7e:	9b05      	ldr	r3, [sp, #20]
 8006f80:	f023 0204 	bic.w	r2, r3, #4
 8006f84:	6022      	str	r2, [r4, #0]
 8006f86:	f04f 0900 	mov.w	r9, #0
 8006f8a:	9700      	str	r7, [sp, #0]
 8006f8c:	4633      	mov	r3, r6
 8006f8e:	aa0b      	add	r2, sp, #44	; 0x2c
 8006f90:	4621      	mov	r1, r4
 8006f92:	4628      	mov	r0, r5
 8006f94:	f000 f9d8 	bl	8007348 <_printf_common>
 8006f98:	3001      	adds	r0, #1
 8006f9a:	f040 8090 	bne.w	80070be <_printf_float+0x1e2>
 8006f9e:	f04f 30ff 	mov.w	r0, #4294967295
 8006fa2:	b00d      	add	sp, #52	; 0x34
 8006fa4:	ecbd 8b02 	vpop	{d8}
 8006fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fac:	4642      	mov	r2, r8
 8006fae:	464b      	mov	r3, r9
 8006fb0:	4640      	mov	r0, r8
 8006fb2:	4649      	mov	r1, r9
 8006fb4:	f7f9 fdc2 	bl	8000b3c <__aeabi_dcmpun>
 8006fb8:	b140      	cbz	r0, 8006fcc <_printf_float+0xf0>
 8006fba:	464b      	mov	r3, r9
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	bfbc      	itt	lt
 8006fc0:	232d      	movlt	r3, #45	; 0x2d
 8006fc2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006fc6:	487f      	ldr	r0, [pc, #508]	; (80071c4 <_printf_float+0x2e8>)
 8006fc8:	4b7f      	ldr	r3, [pc, #508]	; (80071c8 <_printf_float+0x2ec>)
 8006fca:	e7d1      	b.n	8006f70 <_printf_float+0x94>
 8006fcc:	6863      	ldr	r3, [r4, #4]
 8006fce:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006fd2:	9206      	str	r2, [sp, #24]
 8006fd4:	1c5a      	adds	r2, r3, #1
 8006fd6:	d13f      	bne.n	8007058 <_printf_float+0x17c>
 8006fd8:	2306      	movs	r3, #6
 8006fda:	6063      	str	r3, [r4, #4]
 8006fdc:	9b05      	ldr	r3, [sp, #20]
 8006fde:	6861      	ldr	r1, [r4, #4]
 8006fe0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	9303      	str	r3, [sp, #12]
 8006fe8:	ab0a      	add	r3, sp, #40	; 0x28
 8006fea:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006fee:	ab09      	add	r3, sp, #36	; 0x24
 8006ff0:	ec49 8b10 	vmov	d0, r8, r9
 8006ff4:	9300      	str	r3, [sp, #0]
 8006ff6:	6022      	str	r2, [r4, #0]
 8006ff8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006ffc:	4628      	mov	r0, r5
 8006ffe:	f7ff fecd 	bl	8006d9c <__cvt>
 8007002:	9b06      	ldr	r3, [sp, #24]
 8007004:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007006:	2b47      	cmp	r3, #71	; 0x47
 8007008:	4680      	mov	r8, r0
 800700a:	d108      	bne.n	800701e <_printf_float+0x142>
 800700c:	1cc8      	adds	r0, r1, #3
 800700e:	db02      	blt.n	8007016 <_printf_float+0x13a>
 8007010:	6863      	ldr	r3, [r4, #4]
 8007012:	4299      	cmp	r1, r3
 8007014:	dd41      	ble.n	800709a <_printf_float+0x1be>
 8007016:	f1ab 0b02 	sub.w	fp, fp, #2
 800701a:	fa5f fb8b 	uxtb.w	fp, fp
 800701e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007022:	d820      	bhi.n	8007066 <_printf_float+0x18a>
 8007024:	3901      	subs	r1, #1
 8007026:	465a      	mov	r2, fp
 8007028:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800702c:	9109      	str	r1, [sp, #36]	; 0x24
 800702e:	f7ff ff17 	bl	8006e60 <__exponent>
 8007032:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007034:	1813      	adds	r3, r2, r0
 8007036:	2a01      	cmp	r2, #1
 8007038:	4681      	mov	r9, r0
 800703a:	6123      	str	r3, [r4, #16]
 800703c:	dc02      	bgt.n	8007044 <_printf_float+0x168>
 800703e:	6822      	ldr	r2, [r4, #0]
 8007040:	07d2      	lsls	r2, r2, #31
 8007042:	d501      	bpl.n	8007048 <_printf_float+0x16c>
 8007044:	3301      	adds	r3, #1
 8007046:	6123      	str	r3, [r4, #16]
 8007048:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800704c:	2b00      	cmp	r3, #0
 800704e:	d09c      	beq.n	8006f8a <_printf_float+0xae>
 8007050:	232d      	movs	r3, #45	; 0x2d
 8007052:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007056:	e798      	b.n	8006f8a <_printf_float+0xae>
 8007058:	9a06      	ldr	r2, [sp, #24]
 800705a:	2a47      	cmp	r2, #71	; 0x47
 800705c:	d1be      	bne.n	8006fdc <_printf_float+0x100>
 800705e:	2b00      	cmp	r3, #0
 8007060:	d1bc      	bne.n	8006fdc <_printf_float+0x100>
 8007062:	2301      	movs	r3, #1
 8007064:	e7b9      	b.n	8006fda <_printf_float+0xfe>
 8007066:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800706a:	d118      	bne.n	800709e <_printf_float+0x1c2>
 800706c:	2900      	cmp	r1, #0
 800706e:	6863      	ldr	r3, [r4, #4]
 8007070:	dd0b      	ble.n	800708a <_printf_float+0x1ae>
 8007072:	6121      	str	r1, [r4, #16]
 8007074:	b913      	cbnz	r3, 800707c <_printf_float+0x1a0>
 8007076:	6822      	ldr	r2, [r4, #0]
 8007078:	07d0      	lsls	r0, r2, #31
 800707a:	d502      	bpl.n	8007082 <_printf_float+0x1a6>
 800707c:	3301      	adds	r3, #1
 800707e:	440b      	add	r3, r1
 8007080:	6123      	str	r3, [r4, #16]
 8007082:	65a1      	str	r1, [r4, #88]	; 0x58
 8007084:	f04f 0900 	mov.w	r9, #0
 8007088:	e7de      	b.n	8007048 <_printf_float+0x16c>
 800708a:	b913      	cbnz	r3, 8007092 <_printf_float+0x1b6>
 800708c:	6822      	ldr	r2, [r4, #0]
 800708e:	07d2      	lsls	r2, r2, #31
 8007090:	d501      	bpl.n	8007096 <_printf_float+0x1ba>
 8007092:	3302      	adds	r3, #2
 8007094:	e7f4      	b.n	8007080 <_printf_float+0x1a4>
 8007096:	2301      	movs	r3, #1
 8007098:	e7f2      	b.n	8007080 <_printf_float+0x1a4>
 800709a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800709e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070a0:	4299      	cmp	r1, r3
 80070a2:	db05      	blt.n	80070b0 <_printf_float+0x1d4>
 80070a4:	6823      	ldr	r3, [r4, #0]
 80070a6:	6121      	str	r1, [r4, #16]
 80070a8:	07d8      	lsls	r0, r3, #31
 80070aa:	d5ea      	bpl.n	8007082 <_printf_float+0x1a6>
 80070ac:	1c4b      	adds	r3, r1, #1
 80070ae:	e7e7      	b.n	8007080 <_printf_float+0x1a4>
 80070b0:	2900      	cmp	r1, #0
 80070b2:	bfd4      	ite	le
 80070b4:	f1c1 0202 	rsble	r2, r1, #2
 80070b8:	2201      	movgt	r2, #1
 80070ba:	4413      	add	r3, r2
 80070bc:	e7e0      	b.n	8007080 <_printf_float+0x1a4>
 80070be:	6823      	ldr	r3, [r4, #0]
 80070c0:	055a      	lsls	r2, r3, #21
 80070c2:	d407      	bmi.n	80070d4 <_printf_float+0x1f8>
 80070c4:	6923      	ldr	r3, [r4, #16]
 80070c6:	4642      	mov	r2, r8
 80070c8:	4631      	mov	r1, r6
 80070ca:	4628      	mov	r0, r5
 80070cc:	47b8      	blx	r7
 80070ce:	3001      	adds	r0, #1
 80070d0:	d12c      	bne.n	800712c <_printf_float+0x250>
 80070d2:	e764      	b.n	8006f9e <_printf_float+0xc2>
 80070d4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80070d8:	f240 80e0 	bls.w	800729c <_printf_float+0x3c0>
 80070dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80070e0:	2200      	movs	r2, #0
 80070e2:	2300      	movs	r3, #0
 80070e4:	f7f9 fcf8 	bl	8000ad8 <__aeabi_dcmpeq>
 80070e8:	2800      	cmp	r0, #0
 80070ea:	d034      	beq.n	8007156 <_printf_float+0x27a>
 80070ec:	4a37      	ldr	r2, [pc, #220]	; (80071cc <_printf_float+0x2f0>)
 80070ee:	2301      	movs	r3, #1
 80070f0:	4631      	mov	r1, r6
 80070f2:	4628      	mov	r0, r5
 80070f4:	47b8      	blx	r7
 80070f6:	3001      	adds	r0, #1
 80070f8:	f43f af51 	beq.w	8006f9e <_printf_float+0xc2>
 80070fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007100:	429a      	cmp	r2, r3
 8007102:	db02      	blt.n	800710a <_printf_float+0x22e>
 8007104:	6823      	ldr	r3, [r4, #0]
 8007106:	07d8      	lsls	r0, r3, #31
 8007108:	d510      	bpl.n	800712c <_printf_float+0x250>
 800710a:	ee18 3a10 	vmov	r3, s16
 800710e:	4652      	mov	r2, sl
 8007110:	4631      	mov	r1, r6
 8007112:	4628      	mov	r0, r5
 8007114:	47b8      	blx	r7
 8007116:	3001      	adds	r0, #1
 8007118:	f43f af41 	beq.w	8006f9e <_printf_float+0xc2>
 800711c:	f04f 0800 	mov.w	r8, #0
 8007120:	f104 091a 	add.w	r9, r4, #26
 8007124:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007126:	3b01      	subs	r3, #1
 8007128:	4543      	cmp	r3, r8
 800712a:	dc09      	bgt.n	8007140 <_printf_float+0x264>
 800712c:	6823      	ldr	r3, [r4, #0]
 800712e:	079b      	lsls	r3, r3, #30
 8007130:	f100 8105 	bmi.w	800733e <_printf_float+0x462>
 8007134:	68e0      	ldr	r0, [r4, #12]
 8007136:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007138:	4298      	cmp	r0, r3
 800713a:	bfb8      	it	lt
 800713c:	4618      	movlt	r0, r3
 800713e:	e730      	b.n	8006fa2 <_printf_float+0xc6>
 8007140:	2301      	movs	r3, #1
 8007142:	464a      	mov	r2, r9
 8007144:	4631      	mov	r1, r6
 8007146:	4628      	mov	r0, r5
 8007148:	47b8      	blx	r7
 800714a:	3001      	adds	r0, #1
 800714c:	f43f af27 	beq.w	8006f9e <_printf_float+0xc2>
 8007150:	f108 0801 	add.w	r8, r8, #1
 8007154:	e7e6      	b.n	8007124 <_printf_float+0x248>
 8007156:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007158:	2b00      	cmp	r3, #0
 800715a:	dc39      	bgt.n	80071d0 <_printf_float+0x2f4>
 800715c:	4a1b      	ldr	r2, [pc, #108]	; (80071cc <_printf_float+0x2f0>)
 800715e:	2301      	movs	r3, #1
 8007160:	4631      	mov	r1, r6
 8007162:	4628      	mov	r0, r5
 8007164:	47b8      	blx	r7
 8007166:	3001      	adds	r0, #1
 8007168:	f43f af19 	beq.w	8006f9e <_printf_float+0xc2>
 800716c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007170:	4313      	orrs	r3, r2
 8007172:	d102      	bne.n	800717a <_printf_float+0x29e>
 8007174:	6823      	ldr	r3, [r4, #0]
 8007176:	07d9      	lsls	r1, r3, #31
 8007178:	d5d8      	bpl.n	800712c <_printf_float+0x250>
 800717a:	ee18 3a10 	vmov	r3, s16
 800717e:	4652      	mov	r2, sl
 8007180:	4631      	mov	r1, r6
 8007182:	4628      	mov	r0, r5
 8007184:	47b8      	blx	r7
 8007186:	3001      	adds	r0, #1
 8007188:	f43f af09 	beq.w	8006f9e <_printf_float+0xc2>
 800718c:	f04f 0900 	mov.w	r9, #0
 8007190:	f104 0a1a 	add.w	sl, r4, #26
 8007194:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007196:	425b      	negs	r3, r3
 8007198:	454b      	cmp	r3, r9
 800719a:	dc01      	bgt.n	80071a0 <_printf_float+0x2c4>
 800719c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800719e:	e792      	b.n	80070c6 <_printf_float+0x1ea>
 80071a0:	2301      	movs	r3, #1
 80071a2:	4652      	mov	r2, sl
 80071a4:	4631      	mov	r1, r6
 80071a6:	4628      	mov	r0, r5
 80071a8:	47b8      	blx	r7
 80071aa:	3001      	adds	r0, #1
 80071ac:	f43f aef7 	beq.w	8006f9e <_printf_float+0xc2>
 80071b0:	f109 0901 	add.w	r9, r9, #1
 80071b4:	e7ee      	b.n	8007194 <_printf_float+0x2b8>
 80071b6:	bf00      	nop
 80071b8:	7fefffff 	.word	0x7fefffff
 80071bc:	0800b81c 	.word	0x0800b81c
 80071c0:	0800b820 	.word	0x0800b820
 80071c4:	0800b828 	.word	0x0800b828
 80071c8:	0800b824 	.word	0x0800b824
 80071cc:	0800b82c 	.word	0x0800b82c
 80071d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80071d2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80071d4:	429a      	cmp	r2, r3
 80071d6:	bfa8      	it	ge
 80071d8:	461a      	movge	r2, r3
 80071da:	2a00      	cmp	r2, #0
 80071dc:	4691      	mov	r9, r2
 80071de:	dc37      	bgt.n	8007250 <_printf_float+0x374>
 80071e0:	f04f 0b00 	mov.w	fp, #0
 80071e4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80071e8:	f104 021a 	add.w	r2, r4, #26
 80071ec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80071ee:	9305      	str	r3, [sp, #20]
 80071f0:	eba3 0309 	sub.w	r3, r3, r9
 80071f4:	455b      	cmp	r3, fp
 80071f6:	dc33      	bgt.n	8007260 <_printf_float+0x384>
 80071f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80071fc:	429a      	cmp	r2, r3
 80071fe:	db3b      	blt.n	8007278 <_printf_float+0x39c>
 8007200:	6823      	ldr	r3, [r4, #0]
 8007202:	07da      	lsls	r2, r3, #31
 8007204:	d438      	bmi.n	8007278 <_printf_float+0x39c>
 8007206:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007208:	9a05      	ldr	r2, [sp, #20]
 800720a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800720c:	1a9a      	subs	r2, r3, r2
 800720e:	eba3 0901 	sub.w	r9, r3, r1
 8007212:	4591      	cmp	r9, r2
 8007214:	bfa8      	it	ge
 8007216:	4691      	movge	r9, r2
 8007218:	f1b9 0f00 	cmp.w	r9, #0
 800721c:	dc35      	bgt.n	800728a <_printf_float+0x3ae>
 800721e:	f04f 0800 	mov.w	r8, #0
 8007222:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007226:	f104 0a1a 	add.w	sl, r4, #26
 800722a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800722e:	1a9b      	subs	r3, r3, r2
 8007230:	eba3 0309 	sub.w	r3, r3, r9
 8007234:	4543      	cmp	r3, r8
 8007236:	f77f af79 	ble.w	800712c <_printf_float+0x250>
 800723a:	2301      	movs	r3, #1
 800723c:	4652      	mov	r2, sl
 800723e:	4631      	mov	r1, r6
 8007240:	4628      	mov	r0, r5
 8007242:	47b8      	blx	r7
 8007244:	3001      	adds	r0, #1
 8007246:	f43f aeaa 	beq.w	8006f9e <_printf_float+0xc2>
 800724a:	f108 0801 	add.w	r8, r8, #1
 800724e:	e7ec      	b.n	800722a <_printf_float+0x34e>
 8007250:	4613      	mov	r3, r2
 8007252:	4631      	mov	r1, r6
 8007254:	4642      	mov	r2, r8
 8007256:	4628      	mov	r0, r5
 8007258:	47b8      	blx	r7
 800725a:	3001      	adds	r0, #1
 800725c:	d1c0      	bne.n	80071e0 <_printf_float+0x304>
 800725e:	e69e      	b.n	8006f9e <_printf_float+0xc2>
 8007260:	2301      	movs	r3, #1
 8007262:	4631      	mov	r1, r6
 8007264:	4628      	mov	r0, r5
 8007266:	9205      	str	r2, [sp, #20]
 8007268:	47b8      	blx	r7
 800726a:	3001      	adds	r0, #1
 800726c:	f43f ae97 	beq.w	8006f9e <_printf_float+0xc2>
 8007270:	9a05      	ldr	r2, [sp, #20]
 8007272:	f10b 0b01 	add.w	fp, fp, #1
 8007276:	e7b9      	b.n	80071ec <_printf_float+0x310>
 8007278:	ee18 3a10 	vmov	r3, s16
 800727c:	4652      	mov	r2, sl
 800727e:	4631      	mov	r1, r6
 8007280:	4628      	mov	r0, r5
 8007282:	47b8      	blx	r7
 8007284:	3001      	adds	r0, #1
 8007286:	d1be      	bne.n	8007206 <_printf_float+0x32a>
 8007288:	e689      	b.n	8006f9e <_printf_float+0xc2>
 800728a:	9a05      	ldr	r2, [sp, #20]
 800728c:	464b      	mov	r3, r9
 800728e:	4442      	add	r2, r8
 8007290:	4631      	mov	r1, r6
 8007292:	4628      	mov	r0, r5
 8007294:	47b8      	blx	r7
 8007296:	3001      	adds	r0, #1
 8007298:	d1c1      	bne.n	800721e <_printf_float+0x342>
 800729a:	e680      	b.n	8006f9e <_printf_float+0xc2>
 800729c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800729e:	2a01      	cmp	r2, #1
 80072a0:	dc01      	bgt.n	80072a6 <_printf_float+0x3ca>
 80072a2:	07db      	lsls	r3, r3, #31
 80072a4:	d538      	bpl.n	8007318 <_printf_float+0x43c>
 80072a6:	2301      	movs	r3, #1
 80072a8:	4642      	mov	r2, r8
 80072aa:	4631      	mov	r1, r6
 80072ac:	4628      	mov	r0, r5
 80072ae:	47b8      	blx	r7
 80072b0:	3001      	adds	r0, #1
 80072b2:	f43f ae74 	beq.w	8006f9e <_printf_float+0xc2>
 80072b6:	ee18 3a10 	vmov	r3, s16
 80072ba:	4652      	mov	r2, sl
 80072bc:	4631      	mov	r1, r6
 80072be:	4628      	mov	r0, r5
 80072c0:	47b8      	blx	r7
 80072c2:	3001      	adds	r0, #1
 80072c4:	f43f ae6b 	beq.w	8006f9e <_printf_float+0xc2>
 80072c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80072cc:	2200      	movs	r2, #0
 80072ce:	2300      	movs	r3, #0
 80072d0:	f7f9 fc02 	bl	8000ad8 <__aeabi_dcmpeq>
 80072d4:	b9d8      	cbnz	r0, 800730e <_printf_float+0x432>
 80072d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072d8:	f108 0201 	add.w	r2, r8, #1
 80072dc:	3b01      	subs	r3, #1
 80072de:	4631      	mov	r1, r6
 80072e0:	4628      	mov	r0, r5
 80072e2:	47b8      	blx	r7
 80072e4:	3001      	adds	r0, #1
 80072e6:	d10e      	bne.n	8007306 <_printf_float+0x42a>
 80072e8:	e659      	b.n	8006f9e <_printf_float+0xc2>
 80072ea:	2301      	movs	r3, #1
 80072ec:	4652      	mov	r2, sl
 80072ee:	4631      	mov	r1, r6
 80072f0:	4628      	mov	r0, r5
 80072f2:	47b8      	blx	r7
 80072f4:	3001      	adds	r0, #1
 80072f6:	f43f ae52 	beq.w	8006f9e <_printf_float+0xc2>
 80072fa:	f108 0801 	add.w	r8, r8, #1
 80072fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007300:	3b01      	subs	r3, #1
 8007302:	4543      	cmp	r3, r8
 8007304:	dcf1      	bgt.n	80072ea <_printf_float+0x40e>
 8007306:	464b      	mov	r3, r9
 8007308:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800730c:	e6dc      	b.n	80070c8 <_printf_float+0x1ec>
 800730e:	f04f 0800 	mov.w	r8, #0
 8007312:	f104 0a1a 	add.w	sl, r4, #26
 8007316:	e7f2      	b.n	80072fe <_printf_float+0x422>
 8007318:	2301      	movs	r3, #1
 800731a:	4642      	mov	r2, r8
 800731c:	e7df      	b.n	80072de <_printf_float+0x402>
 800731e:	2301      	movs	r3, #1
 8007320:	464a      	mov	r2, r9
 8007322:	4631      	mov	r1, r6
 8007324:	4628      	mov	r0, r5
 8007326:	47b8      	blx	r7
 8007328:	3001      	adds	r0, #1
 800732a:	f43f ae38 	beq.w	8006f9e <_printf_float+0xc2>
 800732e:	f108 0801 	add.w	r8, r8, #1
 8007332:	68e3      	ldr	r3, [r4, #12]
 8007334:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007336:	1a5b      	subs	r3, r3, r1
 8007338:	4543      	cmp	r3, r8
 800733a:	dcf0      	bgt.n	800731e <_printf_float+0x442>
 800733c:	e6fa      	b.n	8007134 <_printf_float+0x258>
 800733e:	f04f 0800 	mov.w	r8, #0
 8007342:	f104 0919 	add.w	r9, r4, #25
 8007346:	e7f4      	b.n	8007332 <_printf_float+0x456>

08007348 <_printf_common>:
 8007348:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800734c:	4616      	mov	r6, r2
 800734e:	4699      	mov	r9, r3
 8007350:	688a      	ldr	r2, [r1, #8]
 8007352:	690b      	ldr	r3, [r1, #16]
 8007354:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007358:	4293      	cmp	r3, r2
 800735a:	bfb8      	it	lt
 800735c:	4613      	movlt	r3, r2
 800735e:	6033      	str	r3, [r6, #0]
 8007360:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007364:	4607      	mov	r7, r0
 8007366:	460c      	mov	r4, r1
 8007368:	b10a      	cbz	r2, 800736e <_printf_common+0x26>
 800736a:	3301      	adds	r3, #1
 800736c:	6033      	str	r3, [r6, #0]
 800736e:	6823      	ldr	r3, [r4, #0]
 8007370:	0699      	lsls	r1, r3, #26
 8007372:	bf42      	ittt	mi
 8007374:	6833      	ldrmi	r3, [r6, #0]
 8007376:	3302      	addmi	r3, #2
 8007378:	6033      	strmi	r3, [r6, #0]
 800737a:	6825      	ldr	r5, [r4, #0]
 800737c:	f015 0506 	ands.w	r5, r5, #6
 8007380:	d106      	bne.n	8007390 <_printf_common+0x48>
 8007382:	f104 0a19 	add.w	sl, r4, #25
 8007386:	68e3      	ldr	r3, [r4, #12]
 8007388:	6832      	ldr	r2, [r6, #0]
 800738a:	1a9b      	subs	r3, r3, r2
 800738c:	42ab      	cmp	r3, r5
 800738e:	dc26      	bgt.n	80073de <_printf_common+0x96>
 8007390:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007394:	1e13      	subs	r3, r2, #0
 8007396:	6822      	ldr	r2, [r4, #0]
 8007398:	bf18      	it	ne
 800739a:	2301      	movne	r3, #1
 800739c:	0692      	lsls	r2, r2, #26
 800739e:	d42b      	bmi.n	80073f8 <_printf_common+0xb0>
 80073a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80073a4:	4649      	mov	r1, r9
 80073a6:	4638      	mov	r0, r7
 80073a8:	47c0      	blx	r8
 80073aa:	3001      	adds	r0, #1
 80073ac:	d01e      	beq.n	80073ec <_printf_common+0xa4>
 80073ae:	6823      	ldr	r3, [r4, #0]
 80073b0:	68e5      	ldr	r5, [r4, #12]
 80073b2:	6832      	ldr	r2, [r6, #0]
 80073b4:	f003 0306 	and.w	r3, r3, #6
 80073b8:	2b04      	cmp	r3, #4
 80073ba:	bf08      	it	eq
 80073bc:	1aad      	subeq	r5, r5, r2
 80073be:	68a3      	ldr	r3, [r4, #8]
 80073c0:	6922      	ldr	r2, [r4, #16]
 80073c2:	bf0c      	ite	eq
 80073c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80073c8:	2500      	movne	r5, #0
 80073ca:	4293      	cmp	r3, r2
 80073cc:	bfc4      	itt	gt
 80073ce:	1a9b      	subgt	r3, r3, r2
 80073d0:	18ed      	addgt	r5, r5, r3
 80073d2:	2600      	movs	r6, #0
 80073d4:	341a      	adds	r4, #26
 80073d6:	42b5      	cmp	r5, r6
 80073d8:	d11a      	bne.n	8007410 <_printf_common+0xc8>
 80073da:	2000      	movs	r0, #0
 80073dc:	e008      	b.n	80073f0 <_printf_common+0xa8>
 80073de:	2301      	movs	r3, #1
 80073e0:	4652      	mov	r2, sl
 80073e2:	4649      	mov	r1, r9
 80073e4:	4638      	mov	r0, r7
 80073e6:	47c0      	blx	r8
 80073e8:	3001      	adds	r0, #1
 80073ea:	d103      	bne.n	80073f4 <_printf_common+0xac>
 80073ec:	f04f 30ff 	mov.w	r0, #4294967295
 80073f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073f4:	3501      	adds	r5, #1
 80073f6:	e7c6      	b.n	8007386 <_printf_common+0x3e>
 80073f8:	18e1      	adds	r1, r4, r3
 80073fa:	1c5a      	adds	r2, r3, #1
 80073fc:	2030      	movs	r0, #48	; 0x30
 80073fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007402:	4422      	add	r2, r4
 8007404:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007408:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800740c:	3302      	adds	r3, #2
 800740e:	e7c7      	b.n	80073a0 <_printf_common+0x58>
 8007410:	2301      	movs	r3, #1
 8007412:	4622      	mov	r2, r4
 8007414:	4649      	mov	r1, r9
 8007416:	4638      	mov	r0, r7
 8007418:	47c0      	blx	r8
 800741a:	3001      	adds	r0, #1
 800741c:	d0e6      	beq.n	80073ec <_printf_common+0xa4>
 800741e:	3601      	adds	r6, #1
 8007420:	e7d9      	b.n	80073d6 <_printf_common+0x8e>
	...

08007424 <_printf_i>:
 8007424:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007428:	7e0f      	ldrb	r7, [r1, #24]
 800742a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800742c:	2f78      	cmp	r7, #120	; 0x78
 800742e:	4691      	mov	r9, r2
 8007430:	4680      	mov	r8, r0
 8007432:	460c      	mov	r4, r1
 8007434:	469a      	mov	sl, r3
 8007436:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800743a:	d807      	bhi.n	800744c <_printf_i+0x28>
 800743c:	2f62      	cmp	r7, #98	; 0x62
 800743e:	d80a      	bhi.n	8007456 <_printf_i+0x32>
 8007440:	2f00      	cmp	r7, #0
 8007442:	f000 80d8 	beq.w	80075f6 <_printf_i+0x1d2>
 8007446:	2f58      	cmp	r7, #88	; 0x58
 8007448:	f000 80a3 	beq.w	8007592 <_printf_i+0x16e>
 800744c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007450:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007454:	e03a      	b.n	80074cc <_printf_i+0xa8>
 8007456:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800745a:	2b15      	cmp	r3, #21
 800745c:	d8f6      	bhi.n	800744c <_printf_i+0x28>
 800745e:	a101      	add	r1, pc, #4	; (adr r1, 8007464 <_printf_i+0x40>)
 8007460:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007464:	080074bd 	.word	0x080074bd
 8007468:	080074d1 	.word	0x080074d1
 800746c:	0800744d 	.word	0x0800744d
 8007470:	0800744d 	.word	0x0800744d
 8007474:	0800744d 	.word	0x0800744d
 8007478:	0800744d 	.word	0x0800744d
 800747c:	080074d1 	.word	0x080074d1
 8007480:	0800744d 	.word	0x0800744d
 8007484:	0800744d 	.word	0x0800744d
 8007488:	0800744d 	.word	0x0800744d
 800748c:	0800744d 	.word	0x0800744d
 8007490:	080075dd 	.word	0x080075dd
 8007494:	08007501 	.word	0x08007501
 8007498:	080075bf 	.word	0x080075bf
 800749c:	0800744d 	.word	0x0800744d
 80074a0:	0800744d 	.word	0x0800744d
 80074a4:	080075ff 	.word	0x080075ff
 80074a8:	0800744d 	.word	0x0800744d
 80074ac:	08007501 	.word	0x08007501
 80074b0:	0800744d 	.word	0x0800744d
 80074b4:	0800744d 	.word	0x0800744d
 80074b8:	080075c7 	.word	0x080075c7
 80074bc:	682b      	ldr	r3, [r5, #0]
 80074be:	1d1a      	adds	r2, r3, #4
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	602a      	str	r2, [r5, #0]
 80074c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80074c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80074cc:	2301      	movs	r3, #1
 80074ce:	e0a3      	b.n	8007618 <_printf_i+0x1f4>
 80074d0:	6820      	ldr	r0, [r4, #0]
 80074d2:	6829      	ldr	r1, [r5, #0]
 80074d4:	0606      	lsls	r6, r0, #24
 80074d6:	f101 0304 	add.w	r3, r1, #4
 80074da:	d50a      	bpl.n	80074f2 <_printf_i+0xce>
 80074dc:	680e      	ldr	r6, [r1, #0]
 80074de:	602b      	str	r3, [r5, #0]
 80074e0:	2e00      	cmp	r6, #0
 80074e2:	da03      	bge.n	80074ec <_printf_i+0xc8>
 80074e4:	232d      	movs	r3, #45	; 0x2d
 80074e6:	4276      	negs	r6, r6
 80074e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074ec:	485e      	ldr	r0, [pc, #376]	; (8007668 <_printf_i+0x244>)
 80074ee:	230a      	movs	r3, #10
 80074f0:	e019      	b.n	8007526 <_printf_i+0x102>
 80074f2:	680e      	ldr	r6, [r1, #0]
 80074f4:	602b      	str	r3, [r5, #0]
 80074f6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80074fa:	bf18      	it	ne
 80074fc:	b236      	sxthne	r6, r6
 80074fe:	e7ef      	b.n	80074e0 <_printf_i+0xbc>
 8007500:	682b      	ldr	r3, [r5, #0]
 8007502:	6820      	ldr	r0, [r4, #0]
 8007504:	1d19      	adds	r1, r3, #4
 8007506:	6029      	str	r1, [r5, #0]
 8007508:	0601      	lsls	r1, r0, #24
 800750a:	d501      	bpl.n	8007510 <_printf_i+0xec>
 800750c:	681e      	ldr	r6, [r3, #0]
 800750e:	e002      	b.n	8007516 <_printf_i+0xf2>
 8007510:	0646      	lsls	r6, r0, #25
 8007512:	d5fb      	bpl.n	800750c <_printf_i+0xe8>
 8007514:	881e      	ldrh	r6, [r3, #0]
 8007516:	4854      	ldr	r0, [pc, #336]	; (8007668 <_printf_i+0x244>)
 8007518:	2f6f      	cmp	r7, #111	; 0x6f
 800751a:	bf0c      	ite	eq
 800751c:	2308      	moveq	r3, #8
 800751e:	230a      	movne	r3, #10
 8007520:	2100      	movs	r1, #0
 8007522:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007526:	6865      	ldr	r5, [r4, #4]
 8007528:	60a5      	str	r5, [r4, #8]
 800752a:	2d00      	cmp	r5, #0
 800752c:	bfa2      	ittt	ge
 800752e:	6821      	ldrge	r1, [r4, #0]
 8007530:	f021 0104 	bicge.w	r1, r1, #4
 8007534:	6021      	strge	r1, [r4, #0]
 8007536:	b90e      	cbnz	r6, 800753c <_printf_i+0x118>
 8007538:	2d00      	cmp	r5, #0
 800753a:	d04d      	beq.n	80075d8 <_printf_i+0x1b4>
 800753c:	4615      	mov	r5, r2
 800753e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007542:	fb03 6711 	mls	r7, r3, r1, r6
 8007546:	5dc7      	ldrb	r7, [r0, r7]
 8007548:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800754c:	4637      	mov	r7, r6
 800754e:	42bb      	cmp	r3, r7
 8007550:	460e      	mov	r6, r1
 8007552:	d9f4      	bls.n	800753e <_printf_i+0x11a>
 8007554:	2b08      	cmp	r3, #8
 8007556:	d10b      	bne.n	8007570 <_printf_i+0x14c>
 8007558:	6823      	ldr	r3, [r4, #0]
 800755a:	07de      	lsls	r6, r3, #31
 800755c:	d508      	bpl.n	8007570 <_printf_i+0x14c>
 800755e:	6923      	ldr	r3, [r4, #16]
 8007560:	6861      	ldr	r1, [r4, #4]
 8007562:	4299      	cmp	r1, r3
 8007564:	bfde      	ittt	le
 8007566:	2330      	movle	r3, #48	; 0x30
 8007568:	f805 3c01 	strble.w	r3, [r5, #-1]
 800756c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007570:	1b52      	subs	r2, r2, r5
 8007572:	6122      	str	r2, [r4, #16]
 8007574:	f8cd a000 	str.w	sl, [sp]
 8007578:	464b      	mov	r3, r9
 800757a:	aa03      	add	r2, sp, #12
 800757c:	4621      	mov	r1, r4
 800757e:	4640      	mov	r0, r8
 8007580:	f7ff fee2 	bl	8007348 <_printf_common>
 8007584:	3001      	adds	r0, #1
 8007586:	d14c      	bne.n	8007622 <_printf_i+0x1fe>
 8007588:	f04f 30ff 	mov.w	r0, #4294967295
 800758c:	b004      	add	sp, #16
 800758e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007592:	4835      	ldr	r0, [pc, #212]	; (8007668 <_printf_i+0x244>)
 8007594:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007598:	6829      	ldr	r1, [r5, #0]
 800759a:	6823      	ldr	r3, [r4, #0]
 800759c:	f851 6b04 	ldr.w	r6, [r1], #4
 80075a0:	6029      	str	r1, [r5, #0]
 80075a2:	061d      	lsls	r5, r3, #24
 80075a4:	d514      	bpl.n	80075d0 <_printf_i+0x1ac>
 80075a6:	07df      	lsls	r7, r3, #31
 80075a8:	bf44      	itt	mi
 80075aa:	f043 0320 	orrmi.w	r3, r3, #32
 80075ae:	6023      	strmi	r3, [r4, #0]
 80075b0:	b91e      	cbnz	r6, 80075ba <_printf_i+0x196>
 80075b2:	6823      	ldr	r3, [r4, #0]
 80075b4:	f023 0320 	bic.w	r3, r3, #32
 80075b8:	6023      	str	r3, [r4, #0]
 80075ba:	2310      	movs	r3, #16
 80075bc:	e7b0      	b.n	8007520 <_printf_i+0xfc>
 80075be:	6823      	ldr	r3, [r4, #0]
 80075c0:	f043 0320 	orr.w	r3, r3, #32
 80075c4:	6023      	str	r3, [r4, #0]
 80075c6:	2378      	movs	r3, #120	; 0x78
 80075c8:	4828      	ldr	r0, [pc, #160]	; (800766c <_printf_i+0x248>)
 80075ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80075ce:	e7e3      	b.n	8007598 <_printf_i+0x174>
 80075d0:	0659      	lsls	r1, r3, #25
 80075d2:	bf48      	it	mi
 80075d4:	b2b6      	uxthmi	r6, r6
 80075d6:	e7e6      	b.n	80075a6 <_printf_i+0x182>
 80075d8:	4615      	mov	r5, r2
 80075da:	e7bb      	b.n	8007554 <_printf_i+0x130>
 80075dc:	682b      	ldr	r3, [r5, #0]
 80075de:	6826      	ldr	r6, [r4, #0]
 80075e0:	6961      	ldr	r1, [r4, #20]
 80075e2:	1d18      	adds	r0, r3, #4
 80075e4:	6028      	str	r0, [r5, #0]
 80075e6:	0635      	lsls	r5, r6, #24
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	d501      	bpl.n	80075f0 <_printf_i+0x1cc>
 80075ec:	6019      	str	r1, [r3, #0]
 80075ee:	e002      	b.n	80075f6 <_printf_i+0x1d2>
 80075f0:	0670      	lsls	r0, r6, #25
 80075f2:	d5fb      	bpl.n	80075ec <_printf_i+0x1c8>
 80075f4:	8019      	strh	r1, [r3, #0]
 80075f6:	2300      	movs	r3, #0
 80075f8:	6123      	str	r3, [r4, #16]
 80075fa:	4615      	mov	r5, r2
 80075fc:	e7ba      	b.n	8007574 <_printf_i+0x150>
 80075fe:	682b      	ldr	r3, [r5, #0]
 8007600:	1d1a      	adds	r2, r3, #4
 8007602:	602a      	str	r2, [r5, #0]
 8007604:	681d      	ldr	r5, [r3, #0]
 8007606:	6862      	ldr	r2, [r4, #4]
 8007608:	2100      	movs	r1, #0
 800760a:	4628      	mov	r0, r5
 800760c:	f7f8 fdf0 	bl	80001f0 <memchr>
 8007610:	b108      	cbz	r0, 8007616 <_printf_i+0x1f2>
 8007612:	1b40      	subs	r0, r0, r5
 8007614:	6060      	str	r0, [r4, #4]
 8007616:	6863      	ldr	r3, [r4, #4]
 8007618:	6123      	str	r3, [r4, #16]
 800761a:	2300      	movs	r3, #0
 800761c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007620:	e7a8      	b.n	8007574 <_printf_i+0x150>
 8007622:	6923      	ldr	r3, [r4, #16]
 8007624:	462a      	mov	r2, r5
 8007626:	4649      	mov	r1, r9
 8007628:	4640      	mov	r0, r8
 800762a:	47d0      	blx	sl
 800762c:	3001      	adds	r0, #1
 800762e:	d0ab      	beq.n	8007588 <_printf_i+0x164>
 8007630:	6823      	ldr	r3, [r4, #0]
 8007632:	079b      	lsls	r3, r3, #30
 8007634:	d413      	bmi.n	800765e <_printf_i+0x23a>
 8007636:	68e0      	ldr	r0, [r4, #12]
 8007638:	9b03      	ldr	r3, [sp, #12]
 800763a:	4298      	cmp	r0, r3
 800763c:	bfb8      	it	lt
 800763e:	4618      	movlt	r0, r3
 8007640:	e7a4      	b.n	800758c <_printf_i+0x168>
 8007642:	2301      	movs	r3, #1
 8007644:	4632      	mov	r2, r6
 8007646:	4649      	mov	r1, r9
 8007648:	4640      	mov	r0, r8
 800764a:	47d0      	blx	sl
 800764c:	3001      	adds	r0, #1
 800764e:	d09b      	beq.n	8007588 <_printf_i+0x164>
 8007650:	3501      	adds	r5, #1
 8007652:	68e3      	ldr	r3, [r4, #12]
 8007654:	9903      	ldr	r1, [sp, #12]
 8007656:	1a5b      	subs	r3, r3, r1
 8007658:	42ab      	cmp	r3, r5
 800765a:	dcf2      	bgt.n	8007642 <_printf_i+0x21e>
 800765c:	e7eb      	b.n	8007636 <_printf_i+0x212>
 800765e:	2500      	movs	r5, #0
 8007660:	f104 0619 	add.w	r6, r4, #25
 8007664:	e7f5      	b.n	8007652 <_printf_i+0x22e>
 8007666:	bf00      	nop
 8007668:	0800b82e 	.word	0x0800b82e
 800766c:	0800b83f 	.word	0x0800b83f

08007670 <siprintf>:
 8007670:	b40e      	push	{r1, r2, r3}
 8007672:	b500      	push	{lr}
 8007674:	b09c      	sub	sp, #112	; 0x70
 8007676:	ab1d      	add	r3, sp, #116	; 0x74
 8007678:	9002      	str	r0, [sp, #8]
 800767a:	9006      	str	r0, [sp, #24]
 800767c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007680:	4809      	ldr	r0, [pc, #36]	; (80076a8 <siprintf+0x38>)
 8007682:	9107      	str	r1, [sp, #28]
 8007684:	9104      	str	r1, [sp, #16]
 8007686:	4909      	ldr	r1, [pc, #36]	; (80076ac <siprintf+0x3c>)
 8007688:	f853 2b04 	ldr.w	r2, [r3], #4
 800768c:	9105      	str	r1, [sp, #20]
 800768e:	6800      	ldr	r0, [r0, #0]
 8007690:	9301      	str	r3, [sp, #4]
 8007692:	a902      	add	r1, sp, #8
 8007694:	f001 fb76 	bl	8008d84 <_svfiprintf_r>
 8007698:	9b02      	ldr	r3, [sp, #8]
 800769a:	2200      	movs	r2, #0
 800769c:	701a      	strb	r2, [r3, #0]
 800769e:	b01c      	add	sp, #112	; 0x70
 80076a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80076a4:	b003      	add	sp, #12
 80076a6:	4770      	bx	lr
 80076a8:	20000020 	.word	0x20000020
 80076ac:	ffff0208 	.word	0xffff0208

080076b0 <quorem>:
 80076b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076b4:	6903      	ldr	r3, [r0, #16]
 80076b6:	690c      	ldr	r4, [r1, #16]
 80076b8:	42a3      	cmp	r3, r4
 80076ba:	4607      	mov	r7, r0
 80076bc:	f2c0 8081 	blt.w	80077c2 <quorem+0x112>
 80076c0:	3c01      	subs	r4, #1
 80076c2:	f101 0814 	add.w	r8, r1, #20
 80076c6:	f100 0514 	add.w	r5, r0, #20
 80076ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80076ce:	9301      	str	r3, [sp, #4]
 80076d0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80076d4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80076d8:	3301      	adds	r3, #1
 80076da:	429a      	cmp	r2, r3
 80076dc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80076e0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80076e4:	fbb2 f6f3 	udiv	r6, r2, r3
 80076e8:	d331      	bcc.n	800774e <quorem+0x9e>
 80076ea:	f04f 0e00 	mov.w	lr, #0
 80076ee:	4640      	mov	r0, r8
 80076f0:	46ac      	mov	ip, r5
 80076f2:	46f2      	mov	sl, lr
 80076f4:	f850 2b04 	ldr.w	r2, [r0], #4
 80076f8:	b293      	uxth	r3, r2
 80076fa:	fb06 e303 	mla	r3, r6, r3, lr
 80076fe:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007702:	b29b      	uxth	r3, r3
 8007704:	ebaa 0303 	sub.w	r3, sl, r3
 8007708:	f8dc a000 	ldr.w	sl, [ip]
 800770c:	0c12      	lsrs	r2, r2, #16
 800770e:	fa13 f38a 	uxtah	r3, r3, sl
 8007712:	fb06 e202 	mla	r2, r6, r2, lr
 8007716:	9300      	str	r3, [sp, #0]
 8007718:	9b00      	ldr	r3, [sp, #0]
 800771a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800771e:	b292      	uxth	r2, r2
 8007720:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007724:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007728:	f8bd 3000 	ldrh.w	r3, [sp]
 800772c:	4581      	cmp	r9, r0
 800772e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007732:	f84c 3b04 	str.w	r3, [ip], #4
 8007736:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800773a:	d2db      	bcs.n	80076f4 <quorem+0x44>
 800773c:	f855 300b 	ldr.w	r3, [r5, fp]
 8007740:	b92b      	cbnz	r3, 800774e <quorem+0x9e>
 8007742:	9b01      	ldr	r3, [sp, #4]
 8007744:	3b04      	subs	r3, #4
 8007746:	429d      	cmp	r5, r3
 8007748:	461a      	mov	r2, r3
 800774a:	d32e      	bcc.n	80077aa <quorem+0xfa>
 800774c:	613c      	str	r4, [r7, #16]
 800774e:	4638      	mov	r0, r7
 8007750:	f001 f8c4 	bl	80088dc <__mcmp>
 8007754:	2800      	cmp	r0, #0
 8007756:	db24      	blt.n	80077a2 <quorem+0xf2>
 8007758:	3601      	adds	r6, #1
 800775a:	4628      	mov	r0, r5
 800775c:	f04f 0c00 	mov.w	ip, #0
 8007760:	f858 2b04 	ldr.w	r2, [r8], #4
 8007764:	f8d0 e000 	ldr.w	lr, [r0]
 8007768:	b293      	uxth	r3, r2
 800776a:	ebac 0303 	sub.w	r3, ip, r3
 800776e:	0c12      	lsrs	r2, r2, #16
 8007770:	fa13 f38e 	uxtah	r3, r3, lr
 8007774:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007778:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800777c:	b29b      	uxth	r3, r3
 800777e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007782:	45c1      	cmp	r9, r8
 8007784:	f840 3b04 	str.w	r3, [r0], #4
 8007788:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800778c:	d2e8      	bcs.n	8007760 <quorem+0xb0>
 800778e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007792:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007796:	b922      	cbnz	r2, 80077a2 <quorem+0xf2>
 8007798:	3b04      	subs	r3, #4
 800779a:	429d      	cmp	r5, r3
 800779c:	461a      	mov	r2, r3
 800779e:	d30a      	bcc.n	80077b6 <quorem+0x106>
 80077a0:	613c      	str	r4, [r7, #16]
 80077a2:	4630      	mov	r0, r6
 80077a4:	b003      	add	sp, #12
 80077a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077aa:	6812      	ldr	r2, [r2, #0]
 80077ac:	3b04      	subs	r3, #4
 80077ae:	2a00      	cmp	r2, #0
 80077b0:	d1cc      	bne.n	800774c <quorem+0x9c>
 80077b2:	3c01      	subs	r4, #1
 80077b4:	e7c7      	b.n	8007746 <quorem+0x96>
 80077b6:	6812      	ldr	r2, [r2, #0]
 80077b8:	3b04      	subs	r3, #4
 80077ba:	2a00      	cmp	r2, #0
 80077bc:	d1f0      	bne.n	80077a0 <quorem+0xf0>
 80077be:	3c01      	subs	r4, #1
 80077c0:	e7eb      	b.n	800779a <quorem+0xea>
 80077c2:	2000      	movs	r0, #0
 80077c4:	e7ee      	b.n	80077a4 <quorem+0xf4>
	...

080077c8 <_dtoa_r>:
 80077c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077cc:	ed2d 8b04 	vpush	{d8-d9}
 80077d0:	ec57 6b10 	vmov	r6, r7, d0
 80077d4:	b093      	sub	sp, #76	; 0x4c
 80077d6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80077d8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80077dc:	9106      	str	r1, [sp, #24]
 80077de:	ee10 aa10 	vmov	sl, s0
 80077e2:	4604      	mov	r4, r0
 80077e4:	9209      	str	r2, [sp, #36]	; 0x24
 80077e6:	930c      	str	r3, [sp, #48]	; 0x30
 80077e8:	46bb      	mov	fp, r7
 80077ea:	b975      	cbnz	r5, 800780a <_dtoa_r+0x42>
 80077ec:	2010      	movs	r0, #16
 80077ee:	f000 fddd 	bl	80083ac <malloc>
 80077f2:	4602      	mov	r2, r0
 80077f4:	6260      	str	r0, [r4, #36]	; 0x24
 80077f6:	b920      	cbnz	r0, 8007802 <_dtoa_r+0x3a>
 80077f8:	4ba7      	ldr	r3, [pc, #668]	; (8007a98 <_dtoa_r+0x2d0>)
 80077fa:	21ea      	movs	r1, #234	; 0xea
 80077fc:	48a7      	ldr	r0, [pc, #668]	; (8007a9c <_dtoa_r+0x2d4>)
 80077fe:	f001 fbd1 	bl	8008fa4 <__assert_func>
 8007802:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007806:	6005      	str	r5, [r0, #0]
 8007808:	60c5      	str	r5, [r0, #12]
 800780a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800780c:	6819      	ldr	r1, [r3, #0]
 800780e:	b151      	cbz	r1, 8007826 <_dtoa_r+0x5e>
 8007810:	685a      	ldr	r2, [r3, #4]
 8007812:	604a      	str	r2, [r1, #4]
 8007814:	2301      	movs	r3, #1
 8007816:	4093      	lsls	r3, r2
 8007818:	608b      	str	r3, [r1, #8]
 800781a:	4620      	mov	r0, r4
 800781c:	f000 fe1c 	bl	8008458 <_Bfree>
 8007820:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007822:	2200      	movs	r2, #0
 8007824:	601a      	str	r2, [r3, #0]
 8007826:	1e3b      	subs	r3, r7, #0
 8007828:	bfaa      	itet	ge
 800782a:	2300      	movge	r3, #0
 800782c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007830:	f8c8 3000 	strge.w	r3, [r8]
 8007834:	4b9a      	ldr	r3, [pc, #616]	; (8007aa0 <_dtoa_r+0x2d8>)
 8007836:	bfbc      	itt	lt
 8007838:	2201      	movlt	r2, #1
 800783a:	f8c8 2000 	strlt.w	r2, [r8]
 800783e:	ea33 030b 	bics.w	r3, r3, fp
 8007842:	d11b      	bne.n	800787c <_dtoa_r+0xb4>
 8007844:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007846:	f242 730f 	movw	r3, #9999	; 0x270f
 800784a:	6013      	str	r3, [r2, #0]
 800784c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007850:	4333      	orrs	r3, r6
 8007852:	f000 8592 	beq.w	800837a <_dtoa_r+0xbb2>
 8007856:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007858:	b963      	cbnz	r3, 8007874 <_dtoa_r+0xac>
 800785a:	4b92      	ldr	r3, [pc, #584]	; (8007aa4 <_dtoa_r+0x2dc>)
 800785c:	e022      	b.n	80078a4 <_dtoa_r+0xdc>
 800785e:	4b92      	ldr	r3, [pc, #584]	; (8007aa8 <_dtoa_r+0x2e0>)
 8007860:	9301      	str	r3, [sp, #4]
 8007862:	3308      	adds	r3, #8
 8007864:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007866:	6013      	str	r3, [r2, #0]
 8007868:	9801      	ldr	r0, [sp, #4]
 800786a:	b013      	add	sp, #76	; 0x4c
 800786c:	ecbd 8b04 	vpop	{d8-d9}
 8007870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007874:	4b8b      	ldr	r3, [pc, #556]	; (8007aa4 <_dtoa_r+0x2dc>)
 8007876:	9301      	str	r3, [sp, #4]
 8007878:	3303      	adds	r3, #3
 800787a:	e7f3      	b.n	8007864 <_dtoa_r+0x9c>
 800787c:	2200      	movs	r2, #0
 800787e:	2300      	movs	r3, #0
 8007880:	4650      	mov	r0, sl
 8007882:	4659      	mov	r1, fp
 8007884:	f7f9 f928 	bl	8000ad8 <__aeabi_dcmpeq>
 8007888:	ec4b ab19 	vmov	d9, sl, fp
 800788c:	4680      	mov	r8, r0
 800788e:	b158      	cbz	r0, 80078a8 <_dtoa_r+0xe0>
 8007890:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007892:	2301      	movs	r3, #1
 8007894:	6013      	str	r3, [r2, #0]
 8007896:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007898:	2b00      	cmp	r3, #0
 800789a:	f000 856b 	beq.w	8008374 <_dtoa_r+0xbac>
 800789e:	4883      	ldr	r0, [pc, #524]	; (8007aac <_dtoa_r+0x2e4>)
 80078a0:	6018      	str	r0, [r3, #0]
 80078a2:	1e43      	subs	r3, r0, #1
 80078a4:	9301      	str	r3, [sp, #4]
 80078a6:	e7df      	b.n	8007868 <_dtoa_r+0xa0>
 80078a8:	ec4b ab10 	vmov	d0, sl, fp
 80078ac:	aa10      	add	r2, sp, #64	; 0x40
 80078ae:	a911      	add	r1, sp, #68	; 0x44
 80078b0:	4620      	mov	r0, r4
 80078b2:	f001 f8b9 	bl	8008a28 <__d2b>
 80078b6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80078ba:	ee08 0a10 	vmov	s16, r0
 80078be:	2d00      	cmp	r5, #0
 80078c0:	f000 8084 	beq.w	80079cc <_dtoa_r+0x204>
 80078c4:	ee19 3a90 	vmov	r3, s19
 80078c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80078cc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80078d0:	4656      	mov	r6, sl
 80078d2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80078d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80078da:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80078de:	4b74      	ldr	r3, [pc, #464]	; (8007ab0 <_dtoa_r+0x2e8>)
 80078e0:	2200      	movs	r2, #0
 80078e2:	4630      	mov	r0, r6
 80078e4:	4639      	mov	r1, r7
 80078e6:	f7f8 fcd7 	bl	8000298 <__aeabi_dsub>
 80078ea:	a365      	add	r3, pc, #404	; (adr r3, 8007a80 <_dtoa_r+0x2b8>)
 80078ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078f0:	f7f8 fe8a 	bl	8000608 <__aeabi_dmul>
 80078f4:	a364      	add	r3, pc, #400	; (adr r3, 8007a88 <_dtoa_r+0x2c0>)
 80078f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078fa:	f7f8 fccf 	bl	800029c <__adddf3>
 80078fe:	4606      	mov	r6, r0
 8007900:	4628      	mov	r0, r5
 8007902:	460f      	mov	r7, r1
 8007904:	f7f8 fe16 	bl	8000534 <__aeabi_i2d>
 8007908:	a361      	add	r3, pc, #388	; (adr r3, 8007a90 <_dtoa_r+0x2c8>)
 800790a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800790e:	f7f8 fe7b 	bl	8000608 <__aeabi_dmul>
 8007912:	4602      	mov	r2, r0
 8007914:	460b      	mov	r3, r1
 8007916:	4630      	mov	r0, r6
 8007918:	4639      	mov	r1, r7
 800791a:	f7f8 fcbf 	bl	800029c <__adddf3>
 800791e:	4606      	mov	r6, r0
 8007920:	460f      	mov	r7, r1
 8007922:	f7f9 f921 	bl	8000b68 <__aeabi_d2iz>
 8007926:	2200      	movs	r2, #0
 8007928:	9000      	str	r0, [sp, #0]
 800792a:	2300      	movs	r3, #0
 800792c:	4630      	mov	r0, r6
 800792e:	4639      	mov	r1, r7
 8007930:	f7f9 f8dc 	bl	8000aec <__aeabi_dcmplt>
 8007934:	b150      	cbz	r0, 800794c <_dtoa_r+0x184>
 8007936:	9800      	ldr	r0, [sp, #0]
 8007938:	f7f8 fdfc 	bl	8000534 <__aeabi_i2d>
 800793c:	4632      	mov	r2, r6
 800793e:	463b      	mov	r3, r7
 8007940:	f7f9 f8ca 	bl	8000ad8 <__aeabi_dcmpeq>
 8007944:	b910      	cbnz	r0, 800794c <_dtoa_r+0x184>
 8007946:	9b00      	ldr	r3, [sp, #0]
 8007948:	3b01      	subs	r3, #1
 800794a:	9300      	str	r3, [sp, #0]
 800794c:	9b00      	ldr	r3, [sp, #0]
 800794e:	2b16      	cmp	r3, #22
 8007950:	d85a      	bhi.n	8007a08 <_dtoa_r+0x240>
 8007952:	9a00      	ldr	r2, [sp, #0]
 8007954:	4b57      	ldr	r3, [pc, #348]	; (8007ab4 <_dtoa_r+0x2ec>)
 8007956:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800795a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800795e:	ec51 0b19 	vmov	r0, r1, d9
 8007962:	f7f9 f8c3 	bl	8000aec <__aeabi_dcmplt>
 8007966:	2800      	cmp	r0, #0
 8007968:	d050      	beq.n	8007a0c <_dtoa_r+0x244>
 800796a:	9b00      	ldr	r3, [sp, #0]
 800796c:	3b01      	subs	r3, #1
 800796e:	9300      	str	r3, [sp, #0]
 8007970:	2300      	movs	r3, #0
 8007972:	930b      	str	r3, [sp, #44]	; 0x2c
 8007974:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007976:	1b5d      	subs	r5, r3, r5
 8007978:	1e6b      	subs	r3, r5, #1
 800797a:	9305      	str	r3, [sp, #20]
 800797c:	bf45      	ittet	mi
 800797e:	f1c5 0301 	rsbmi	r3, r5, #1
 8007982:	9304      	strmi	r3, [sp, #16]
 8007984:	2300      	movpl	r3, #0
 8007986:	2300      	movmi	r3, #0
 8007988:	bf4c      	ite	mi
 800798a:	9305      	strmi	r3, [sp, #20]
 800798c:	9304      	strpl	r3, [sp, #16]
 800798e:	9b00      	ldr	r3, [sp, #0]
 8007990:	2b00      	cmp	r3, #0
 8007992:	db3d      	blt.n	8007a10 <_dtoa_r+0x248>
 8007994:	9b05      	ldr	r3, [sp, #20]
 8007996:	9a00      	ldr	r2, [sp, #0]
 8007998:	920a      	str	r2, [sp, #40]	; 0x28
 800799a:	4413      	add	r3, r2
 800799c:	9305      	str	r3, [sp, #20]
 800799e:	2300      	movs	r3, #0
 80079a0:	9307      	str	r3, [sp, #28]
 80079a2:	9b06      	ldr	r3, [sp, #24]
 80079a4:	2b09      	cmp	r3, #9
 80079a6:	f200 8089 	bhi.w	8007abc <_dtoa_r+0x2f4>
 80079aa:	2b05      	cmp	r3, #5
 80079ac:	bfc4      	itt	gt
 80079ae:	3b04      	subgt	r3, #4
 80079b0:	9306      	strgt	r3, [sp, #24]
 80079b2:	9b06      	ldr	r3, [sp, #24]
 80079b4:	f1a3 0302 	sub.w	r3, r3, #2
 80079b8:	bfcc      	ite	gt
 80079ba:	2500      	movgt	r5, #0
 80079bc:	2501      	movle	r5, #1
 80079be:	2b03      	cmp	r3, #3
 80079c0:	f200 8087 	bhi.w	8007ad2 <_dtoa_r+0x30a>
 80079c4:	e8df f003 	tbb	[pc, r3]
 80079c8:	59383a2d 	.word	0x59383a2d
 80079cc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80079d0:	441d      	add	r5, r3
 80079d2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80079d6:	2b20      	cmp	r3, #32
 80079d8:	bfc1      	itttt	gt
 80079da:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80079de:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80079e2:	fa0b f303 	lslgt.w	r3, fp, r3
 80079e6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80079ea:	bfda      	itte	le
 80079ec:	f1c3 0320 	rsble	r3, r3, #32
 80079f0:	fa06 f003 	lslle.w	r0, r6, r3
 80079f4:	4318      	orrgt	r0, r3
 80079f6:	f7f8 fd8d 	bl	8000514 <__aeabi_ui2d>
 80079fa:	2301      	movs	r3, #1
 80079fc:	4606      	mov	r6, r0
 80079fe:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007a02:	3d01      	subs	r5, #1
 8007a04:	930e      	str	r3, [sp, #56]	; 0x38
 8007a06:	e76a      	b.n	80078de <_dtoa_r+0x116>
 8007a08:	2301      	movs	r3, #1
 8007a0a:	e7b2      	b.n	8007972 <_dtoa_r+0x1aa>
 8007a0c:	900b      	str	r0, [sp, #44]	; 0x2c
 8007a0e:	e7b1      	b.n	8007974 <_dtoa_r+0x1ac>
 8007a10:	9b04      	ldr	r3, [sp, #16]
 8007a12:	9a00      	ldr	r2, [sp, #0]
 8007a14:	1a9b      	subs	r3, r3, r2
 8007a16:	9304      	str	r3, [sp, #16]
 8007a18:	4253      	negs	r3, r2
 8007a1a:	9307      	str	r3, [sp, #28]
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	930a      	str	r3, [sp, #40]	; 0x28
 8007a20:	e7bf      	b.n	80079a2 <_dtoa_r+0x1da>
 8007a22:	2300      	movs	r3, #0
 8007a24:	9308      	str	r3, [sp, #32]
 8007a26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	dc55      	bgt.n	8007ad8 <_dtoa_r+0x310>
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007a32:	461a      	mov	r2, r3
 8007a34:	9209      	str	r2, [sp, #36]	; 0x24
 8007a36:	e00c      	b.n	8007a52 <_dtoa_r+0x28a>
 8007a38:	2301      	movs	r3, #1
 8007a3a:	e7f3      	b.n	8007a24 <_dtoa_r+0x25c>
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a40:	9308      	str	r3, [sp, #32]
 8007a42:	9b00      	ldr	r3, [sp, #0]
 8007a44:	4413      	add	r3, r2
 8007a46:	9302      	str	r3, [sp, #8]
 8007a48:	3301      	adds	r3, #1
 8007a4a:	2b01      	cmp	r3, #1
 8007a4c:	9303      	str	r3, [sp, #12]
 8007a4e:	bfb8      	it	lt
 8007a50:	2301      	movlt	r3, #1
 8007a52:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007a54:	2200      	movs	r2, #0
 8007a56:	6042      	str	r2, [r0, #4]
 8007a58:	2204      	movs	r2, #4
 8007a5a:	f102 0614 	add.w	r6, r2, #20
 8007a5e:	429e      	cmp	r6, r3
 8007a60:	6841      	ldr	r1, [r0, #4]
 8007a62:	d93d      	bls.n	8007ae0 <_dtoa_r+0x318>
 8007a64:	4620      	mov	r0, r4
 8007a66:	f000 fcb7 	bl	80083d8 <_Balloc>
 8007a6a:	9001      	str	r0, [sp, #4]
 8007a6c:	2800      	cmp	r0, #0
 8007a6e:	d13b      	bne.n	8007ae8 <_dtoa_r+0x320>
 8007a70:	4b11      	ldr	r3, [pc, #68]	; (8007ab8 <_dtoa_r+0x2f0>)
 8007a72:	4602      	mov	r2, r0
 8007a74:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007a78:	e6c0      	b.n	80077fc <_dtoa_r+0x34>
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	e7df      	b.n	8007a3e <_dtoa_r+0x276>
 8007a7e:	bf00      	nop
 8007a80:	636f4361 	.word	0x636f4361
 8007a84:	3fd287a7 	.word	0x3fd287a7
 8007a88:	8b60c8b3 	.word	0x8b60c8b3
 8007a8c:	3fc68a28 	.word	0x3fc68a28
 8007a90:	509f79fb 	.word	0x509f79fb
 8007a94:	3fd34413 	.word	0x3fd34413
 8007a98:	0800b85d 	.word	0x0800b85d
 8007a9c:	0800b874 	.word	0x0800b874
 8007aa0:	7ff00000 	.word	0x7ff00000
 8007aa4:	0800b859 	.word	0x0800b859
 8007aa8:	0800b850 	.word	0x0800b850
 8007aac:	0800b82d 	.word	0x0800b82d
 8007ab0:	3ff80000 	.word	0x3ff80000
 8007ab4:	0800b968 	.word	0x0800b968
 8007ab8:	0800b8cf 	.word	0x0800b8cf
 8007abc:	2501      	movs	r5, #1
 8007abe:	2300      	movs	r3, #0
 8007ac0:	9306      	str	r3, [sp, #24]
 8007ac2:	9508      	str	r5, [sp, #32]
 8007ac4:	f04f 33ff 	mov.w	r3, #4294967295
 8007ac8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007acc:	2200      	movs	r2, #0
 8007ace:	2312      	movs	r3, #18
 8007ad0:	e7b0      	b.n	8007a34 <_dtoa_r+0x26c>
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	9308      	str	r3, [sp, #32]
 8007ad6:	e7f5      	b.n	8007ac4 <_dtoa_r+0x2fc>
 8007ad8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ada:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007ade:	e7b8      	b.n	8007a52 <_dtoa_r+0x28a>
 8007ae0:	3101      	adds	r1, #1
 8007ae2:	6041      	str	r1, [r0, #4]
 8007ae4:	0052      	lsls	r2, r2, #1
 8007ae6:	e7b8      	b.n	8007a5a <_dtoa_r+0x292>
 8007ae8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007aea:	9a01      	ldr	r2, [sp, #4]
 8007aec:	601a      	str	r2, [r3, #0]
 8007aee:	9b03      	ldr	r3, [sp, #12]
 8007af0:	2b0e      	cmp	r3, #14
 8007af2:	f200 809d 	bhi.w	8007c30 <_dtoa_r+0x468>
 8007af6:	2d00      	cmp	r5, #0
 8007af8:	f000 809a 	beq.w	8007c30 <_dtoa_r+0x468>
 8007afc:	9b00      	ldr	r3, [sp, #0]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	dd32      	ble.n	8007b68 <_dtoa_r+0x3a0>
 8007b02:	4ab7      	ldr	r2, [pc, #732]	; (8007de0 <_dtoa_r+0x618>)
 8007b04:	f003 030f 	and.w	r3, r3, #15
 8007b08:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007b0c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007b10:	9b00      	ldr	r3, [sp, #0]
 8007b12:	05d8      	lsls	r0, r3, #23
 8007b14:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007b18:	d516      	bpl.n	8007b48 <_dtoa_r+0x380>
 8007b1a:	4bb2      	ldr	r3, [pc, #712]	; (8007de4 <_dtoa_r+0x61c>)
 8007b1c:	ec51 0b19 	vmov	r0, r1, d9
 8007b20:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007b24:	f7f8 fe9a 	bl	800085c <__aeabi_ddiv>
 8007b28:	f007 070f 	and.w	r7, r7, #15
 8007b2c:	4682      	mov	sl, r0
 8007b2e:	468b      	mov	fp, r1
 8007b30:	2503      	movs	r5, #3
 8007b32:	4eac      	ldr	r6, [pc, #688]	; (8007de4 <_dtoa_r+0x61c>)
 8007b34:	b957      	cbnz	r7, 8007b4c <_dtoa_r+0x384>
 8007b36:	4642      	mov	r2, r8
 8007b38:	464b      	mov	r3, r9
 8007b3a:	4650      	mov	r0, sl
 8007b3c:	4659      	mov	r1, fp
 8007b3e:	f7f8 fe8d 	bl	800085c <__aeabi_ddiv>
 8007b42:	4682      	mov	sl, r0
 8007b44:	468b      	mov	fp, r1
 8007b46:	e028      	b.n	8007b9a <_dtoa_r+0x3d2>
 8007b48:	2502      	movs	r5, #2
 8007b4a:	e7f2      	b.n	8007b32 <_dtoa_r+0x36a>
 8007b4c:	07f9      	lsls	r1, r7, #31
 8007b4e:	d508      	bpl.n	8007b62 <_dtoa_r+0x39a>
 8007b50:	4640      	mov	r0, r8
 8007b52:	4649      	mov	r1, r9
 8007b54:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007b58:	f7f8 fd56 	bl	8000608 <__aeabi_dmul>
 8007b5c:	3501      	adds	r5, #1
 8007b5e:	4680      	mov	r8, r0
 8007b60:	4689      	mov	r9, r1
 8007b62:	107f      	asrs	r7, r7, #1
 8007b64:	3608      	adds	r6, #8
 8007b66:	e7e5      	b.n	8007b34 <_dtoa_r+0x36c>
 8007b68:	f000 809b 	beq.w	8007ca2 <_dtoa_r+0x4da>
 8007b6c:	9b00      	ldr	r3, [sp, #0]
 8007b6e:	4f9d      	ldr	r7, [pc, #628]	; (8007de4 <_dtoa_r+0x61c>)
 8007b70:	425e      	negs	r6, r3
 8007b72:	4b9b      	ldr	r3, [pc, #620]	; (8007de0 <_dtoa_r+0x618>)
 8007b74:	f006 020f 	and.w	r2, r6, #15
 8007b78:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b80:	ec51 0b19 	vmov	r0, r1, d9
 8007b84:	f7f8 fd40 	bl	8000608 <__aeabi_dmul>
 8007b88:	1136      	asrs	r6, r6, #4
 8007b8a:	4682      	mov	sl, r0
 8007b8c:	468b      	mov	fp, r1
 8007b8e:	2300      	movs	r3, #0
 8007b90:	2502      	movs	r5, #2
 8007b92:	2e00      	cmp	r6, #0
 8007b94:	d17a      	bne.n	8007c8c <_dtoa_r+0x4c4>
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d1d3      	bne.n	8007b42 <_dtoa_r+0x37a>
 8007b9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	f000 8082 	beq.w	8007ca6 <_dtoa_r+0x4de>
 8007ba2:	4b91      	ldr	r3, [pc, #580]	; (8007de8 <_dtoa_r+0x620>)
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	4650      	mov	r0, sl
 8007ba8:	4659      	mov	r1, fp
 8007baa:	f7f8 ff9f 	bl	8000aec <__aeabi_dcmplt>
 8007bae:	2800      	cmp	r0, #0
 8007bb0:	d079      	beq.n	8007ca6 <_dtoa_r+0x4de>
 8007bb2:	9b03      	ldr	r3, [sp, #12]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d076      	beq.n	8007ca6 <_dtoa_r+0x4de>
 8007bb8:	9b02      	ldr	r3, [sp, #8]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	dd36      	ble.n	8007c2c <_dtoa_r+0x464>
 8007bbe:	9b00      	ldr	r3, [sp, #0]
 8007bc0:	4650      	mov	r0, sl
 8007bc2:	4659      	mov	r1, fp
 8007bc4:	1e5f      	subs	r7, r3, #1
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	4b88      	ldr	r3, [pc, #544]	; (8007dec <_dtoa_r+0x624>)
 8007bca:	f7f8 fd1d 	bl	8000608 <__aeabi_dmul>
 8007bce:	9e02      	ldr	r6, [sp, #8]
 8007bd0:	4682      	mov	sl, r0
 8007bd2:	468b      	mov	fp, r1
 8007bd4:	3501      	adds	r5, #1
 8007bd6:	4628      	mov	r0, r5
 8007bd8:	f7f8 fcac 	bl	8000534 <__aeabi_i2d>
 8007bdc:	4652      	mov	r2, sl
 8007bde:	465b      	mov	r3, fp
 8007be0:	f7f8 fd12 	bl	8000608 <__aeabi_dmul>
 8007be4:	4b82      	ldr	r3, [pc, #520]	; (8007df0 <_dtoa_r+0x628>)
 8007be6:	2200      	movs	r2, #0
 8007be8:	f7f8 fb58 	bl	800029c <__adddf3>
 8007bec:	46d0      	mov	r8, sl
 8007bee:	46d9      	mov	r9, fp
 8007bf0:	4682      	mov	sl, r0
 8007bf2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007bf6:	2e00      	cmp	r6, #0
 8007bf8:	d158      	bne.n	8007cac <_dtoa_r+0x4e4>
 8007bfa:	4b7e      	ldr	r3, [pc, #504]	; (8007df4 <_dtoa_r+0x62c>)
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	4640      	mov	r0, r8
 8007c00:	4649      	mov	r1, r9
 8007c02:	f7f8 fb49 	bl	8000298 <__aeabi_dsub>
 8007c06:	4652      	mov	r2, sl
 8007c08:	465b      	mov	r3, fp
 8007c0a:	4680      	mov	r8, r0
 8007c0c:	4689      	mov	r9, r1
 8007c0e:	f7f8 ff8b 	bl	8000b28 <__aeabi_dcmpgt>
 8007c12:	2800      	cmp	r0, #0
 8007c14:	f040 8295 	bne.w	8008142 <_dtoa_r+0x97a>
 8007c18:	4652      	mov	r2, sl
 8007c1a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007c1e:	4640      	mov	r0, r8
 8007c20:	4649      	mov	r1, r9
 8007c22:	f7f8 ff63 	bl	8000aec <__aeabi_dcmplt>
 8007c26:	2800      	cmp	r0, #0
 8007c28:	f040 8289 	bne.w	800813e <_dtoa_r+0x976>
 8007c2c:	ec5b ab19 	vmov	sl, fp, d9
 8007c30:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	f2c0 8148 	blt.w	8007ec8 <_dtoa_r+0x700>
 8007c38:	9a00      	ldr	r2, [sp, #0]
 8007c3a:	2a0e      	cmp	r2, #14
 8007c3c:	f300 8144 	bgt.w	8007ec8 <_dtoa_r+0x700>
 8007c40:	4b67      	ldr	r3, [pc, #412]	; (8007de0 <_dtoa_r+0x618>)
 8007c42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007c46:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007c4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	f280 80d5 	bge.w	8007dfc <_dtoa_r+0x634>
 8007c52:	9b03      	ldr	r3, [sp, #12]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	f300 80d1 	bgt.w	8007dfc <_dtoa_r+0x634>
 8007c5a:	f040 826f 	bne.w	800813c <_dtoa_r+0x974>
 8007c5e:	4b65      	ldr	r3, [pc, #404]	; (8007df4 <_dtoa_r+0x62c>)
 8007c60:	2200      	movs	r2, #0
 8007c62:	4640      	mov	r0, r8
 8007c64:	4649      	mov	r1, r9
 8007c66:	f7f8 fccf 	bl	8000608 <__aeabi_dmul>
 8007c6a:	4652      	mov	r2, sl
 8007c6c:	465b      	mov	r3, fp
 8007c6e:	f7f8 ff51 	bl	8000b14 <__aeabi_dcmpge>
 8007c72:	9e03      	ldr	r6, [sp, #12]
 8007c74:	4637      	mov	r7, r6
 8007c76:	2800      	cmp	r0, #0
 8007c78:	f040 8245 	bne.w	8008106 <_dtoa_r+0x93e>
 8007c7c:	9d01      	ldr	r5, [sp, #4]
 8007c7e:	2331      	movs	r3, #49	; 0x31
 8007c80:	f805 3b01 	strb.w	r3, [r5], #1
 8007c84:	9b00      	ldr	r3, [sp, #0]
 8007c86:	3301      	adds	r3, #1
 8007c88:	9300      	str	r3, [sp, #0]
 8007c8a:	e240      	b.n	800810e <_dtoa_r+0x946>
 8007c8c:	07f2      	lsls	r2, r6, #31
 8007c8e:	d505      	bpl.n	8007c9c <_dtoa_r+0x4d4>
 8007c90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c94:	f7f8 fcb8 	bl	8000608 <__aeabi_dmul>
 8007c98:	3501      	adds	r5, #1
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	1076      	asrs	r6, r6, #1
 8007c9e:	3708      	adds	r7, #8
 8007ca0:	e777      	b.n	8007b92 <_dtoa_r+0x3ca>
 8007ca2:	2502      	movs	r5, #2
 8007ca4:	e779      	b.n	8007b9a <_dtoa_r+0x3d2>
 8007ca6:	9f00      	ldr	r7, [sp, #0]
 8007ca8:	9e03      	ldr	r6, [sp, #12]
 8007caa:	e794      	b.n	8007bd6 <_dtoa_r+0x40e>
 8007cac:	9901      	ldr	r1, [sp, #4]
 8007cae:	4b4c      	ldr	r3, [pc, #304]	; (8007de0 <_dtoa_r+0x618>)
 8007cb0:	4431      	add	r1, r6
 8007cb2:	910d      	str	r1, [sp, #52]	; 0x34
 8007cb4:	9908      	ldr	r1, [sp, #32]
 8007cb6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007cba:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007cbe:	2900      	cmp	r1, #0
 8007cc0:	d043      	beq.n	8007d4a <_dtoa_r+0x582>
 8007cc2:	494d      	ldr	r1, [pc, #308]	; (8007df8 <_dtoa_r+0x630>)
 8007cc4:	2000      	movs	r0, #0
 8007cc6:	f7f8 fdc9 	bl	800085c <__aeabi_ddiv>
 8007cca:	4652      	mov	r2, sl
 8007ccc:	465b      	mov	r3, fp
 8007cce:	f7f8 fae3 	bl	8000298 <__aeabi_dsub>
 8007cd2:	9d01      	ldr	r5, [sp, #4]
 8007cd4:	4682      	mov	sl, r0
 8007cd6:	468b      	mov	fp, r1
 8007cd8:	4649      	mov	r1, r9
 8007cda:	4640      	mov	r0, r8
 8007cdc:	f7f8 ff44 	bl	8000b68 <__aeabi_d2iz>
 8007ce0:	4606      	mov	r6, r0
 8007ce2:	f7f8 fc27 	bl	8000534 <__aeabi_i2d>
 8007ce6:	4602      	mov	r2, r0
 8007ce8:	460b      	mov	r3, r1
 8007cea:	4640      	mov	r0, r8
 8007cec:	4649      	mov	r1, r9
 8007cee:	f7f8 fad3 	bl	8000298 <__aeabi_dsub>
 8007cf2:	3630      	adds	r6, #48	; 0x30
 8007cf4:	f805 6b01 	strb.w	r6, [r5], #1
 8007cf8:	4652      	mov	r2, sl
 8007cfa:	465b      	mov	r3, fp
 8007cfc:	4680      	mov	r8, r0
 8007cfe:	4689      	mov	r9, r1
 8007d00:	f7f8 fef4 	bl	8000aec <__aeabi_dcmplt>
 8007d04:	2800      	cmp	r0, #0
 8007d06:	d163      	bne.n	8007dd0 <_dtoa_r+0x608>
 8007d08:	4642      	mov	r2, r8
 8007d0a:	464b      	mov	r3, r9
 8007d0c:	4936      	ldr	r1, [pc, #216]	; (8007de8 <_dtoa_r+0x620>)
 8007d0e:	2000      	movs	r0, #0
 8007d10:	f7f8 fac2 	bl	8000298 <__aeabi_dsub>
 8007d14:	4652      	mov	r2, sl
 8007d16:	465b      	mov	r3, fp
 8007d18:	f7f8 fee8 	bl	8000aec <__aeabi_dcmplt>
 8007d1c:	2800      	cmp	r0, #0
 8007d1e:	f040 80b5 	bne.w	8007e8c <_dtoa_r+0x6c4>
 8007d22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d24:	429d      	cmp	r5, r3
 8007d26:	d081      	beq.n	8007c2c <_dtoa_r+0x464>
 8007d28:	4b30      	ldr	r3, [pc, #192]	; (8007dec <_dtoa_r+0x624>)
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	4650      	mov	r0, sl
 8007d2e:	4659      	mov	r1, fp
 8007d30:	f7f8 fc6a 	bl	8000608 <__aeabi_dmul>
 8007d34:	4b2d      	ldr	r3, [pc, #180]	; (8007dec <_dtoa_r+0x624>)
 8007d36:	4682      	mov	sl, r0
 8007d38:	468b      	mov	fp, r1
 8007d3a:	4640      	mov	r0, r8
 8007d3c:	4649      	mov	r1, r9
 8007d3e:	2200      	movs	r2, #0
 8007d40:	f7f8 fc62 	bl	8000608 <__aeabi_dmul>
 8007d44:	4680      	mov	r8, r0
 8007d46:	4689      	mov	r9, r1
 8007d48:	e7c6      	b.n	8007cd8 <_dtoa_r+0x510>
 8007d4a:	4650      	mov	r0, sl
 8007d4c:	4659      	mov	r1, fp
 8007d4e:	f7f8 fc5b 	bl	8000608 <__aeabi_dmul>
 8007d52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d54:	9d01      	ldr	r5, [sp, #4]
 8007d56:	930f      	str	r3, [sp, #60]	; 0x3c
 8007d58:	4682      	mov	sl, r0
 8007d5a:	468b      	mov	fp, r1
 8007d5c:	4649      	mov	r1, r9
 8007d5e:	4640      	mov	r0, r8
 8007d60:	f7f8 ff02 	bl	8000b68 <__aeabi_d2iz>
 8007d64:	4606      	mov	r6, r0
 8007d66:	f7f8 fbe5 	bl	8000534 <__aeabi_i2d>
 8007d6a:	3630      	adds	r6, #48	; 0x30
 8007d6c:	4602      	mov	r2, r0
 8007d6e:	460b      	mov	r3, r1
 8007d70:	4640      	mov	r0, r8
 8007d72:	4649      	mov	r1, r9
 8007d74:	f7f8 fa90 	bl	8000298 <__aeabi_dsub>
 8007d78:	f805 6b01 	strb.w	r6, [r5], #1
 8007d7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d7e:	429d      	cmp	r5, r3
 8007d80:	4680      	mov	r8, r0
 8007d82:	4689      	mov	r9, r1
 8007d84:	f04f 0200 	mov.w	r2, #0
 8007d88:	d124      	bne.n	8007dd4 <_dtoa_r+0x60c>
 8007d8a:	4b1b      	ldr	r3, [pc, #108]	; (8007df8 <_dtoa_r+0x630>)
 8007d8c:	4650      	mov	r0, sl
 8007d8e:	4659      	mov	r1, fp
 8007d90:	f7f8 fa84 	bl	800029c <__adddf3>
 8007d94:	4602      	mov	r2, r0
 8007d96:	460b      	mov	r3, r1
 8007d98:	4640      	mov	r0, r8
 8007d9a:	4649      	mov	r1, r9
 8007d9c:	f7f8 fec4 	bl	8000b28 <__aeabi_dcmpgt>
 8007da0:	2800      	cmp	r0, #0
 8007da2:	d173      	bne.n	8007e8c <_dtoa_r+0x6c4>
 8007da4:	4652      	mov	r2, sl
 8007da6:	465b      	mov	r3, fp
 8007da8:	4913      	ldr	r1, [pc, #76]	; (8007df8 <_dtoa_r+0x630>)
 8007daa:	2000      	movs	r0, #0
 8007dac:	f7f8 fa74 	bl	8000298 <__aeabi_dsub>
 8007db0:	4602      	mov	r2, r0
 8007db2:	460b      	mov	r3, r1
 8007db4:	4640      	mov	r0, r8
 8007db6:	4649      	mov	r1, r9
 8007db8:	f7f8 fe98 	bl	8000aec <__aeabi_dcmplt>
 8007dbc:	2800      	cmp	r0, #0
 8007dbe:	f43f af35 	beq.w	8007c2c <_dtoa_r+0x464>
 8007dc2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007dc4:	1e6b      	subs	r3, r5, #1
 8007dc6:	930f      	str	r3, [sp, #60]	; 0x3c
 8007dc8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007dcc:	2b30      	cmp	r3, #48	; 0x30
 8007dce:	d0f8      	beq.n	8007dc2 <_dtoa_r+0x5fa>
 8007dd0:	9700      	str	r7, [sp, #0]
 8007dd2:	e049      	b.n	8007e68 <_dtoa_r+0x6a0>
 8007dd4:	4b05      	ldr	r3, [pc, #20]	; (8007dec <_dtoa_r+0x624>)
 8007dd6:	f7f8 fc17 	bl	8000608 <__aeabi_dmul>
 8007dda:	4680      	mov	r8, r0
 8007ddc:	4689      	mov	r9, r1
 8007dde:	e7bd      	b.n	8007d5c <_dtoa_r+0x594>
 8007de0:	0800b968 	.word	0x0800b968
 8007de4:	0800b940 	.word	0x0800b940
 8007de8:	3ff00000 	.word	0x3ff00000
 8007dec:	40240000 	.word	0x40240000
 8007df0:	401c0000 	.word	0x401c0000
 8007df4:	40140000 	.word	0x40140000
 8007df8:	3fe00000 	.word	0x3fe00000
 8007dfc:	9d01      	ldr	r5, [sp, #4]
 8007dfe:	4656      	mov	r6, sl
 8007e00:	465f      	mov	r7, fp
 8007e02:	4642      	mov	r2, r8
 8007e04:	464b      	mov	r3, r9
 8007e06:	4630      	mov	r0, r6
 8007e08:	4639      	mov	r1, r7
 8007e0a:	f7f8 fd27 	bl	800085c <__aeabi_ddiv>
 8007e0e:	f7f8 feab 	bl	8000b68 <__aeabi_d2iz>
 8007e12:	4682      	mov	sl, r0
 8007e14:	f7f8 fb8e 	bl	8000534 <__aeabi_i2d>
 8007e18:	4642      	mov	r2, r8
 8007e1a:	464b      	mov	r3, r9
 8007e1c:	f7f8 fbf4 	bl	8000608 <__aeabi_dmul>
 8007e20:	4602      	mov	r2, r0
 8007e22:	460b      	mov	r3, r1
 8007e24:	4630      	mov	r0, r6
 8007e26:	4639      	mov	r1, r7
 8007e28:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007e2c:	f7f8 fa34 	bl	8000298 <__aeabi_dsub>
 8007e30:	f805 6b01 	strb.w	r6, [r5], #1
 8007e34:	9e01      	ldr	r6, [sp, #4]
 8007e36:	9f03      	ldr	r7, [sp, #12]
 8007e38:	1bae      	subs	r6, r5, r6
 8007e3a:	42b7      	cmp	r7, r6
 8007e3c:	4602      	mov	r2, r0
 8007e3e:	460b      	mov	r3, r1
 8007e40:	d135      	bne.n	8007eae <_dtoa_r+0x6e6>
 8007e42:	f7f8 fa2b 	bl	800029c <__adddf3>
 8007e46:	4642      	mov	r2, r8
 8007e48:	464b      	mov	r3, r9
 8007e4a:	4606      	mov	r6, r0
 8007e4c:	460f      	mov	r7, r1
 8007e4e:	f7f8 fe6b 	bl	8000b28 <__aeabi_dcmpgt>
 8007e52:	b9d0      	cbnz	r0, 8007e8a <_dtoa_r+0x6c2>
 8007e54:	4642      	mov	r2, r8
 8007e56:	464b      	mov	r3, r9
 8007e58:	4630      	mov	r0, r6
 8007e5a:	4639      	mov	r1, r7
 8007e5c:	f7f8 fe3c 	bl	8000ad8 <__aeabi_dcmpeq>
 8007e60:	b110      	cbz	r0, 8007e68 <_dtoa_r+0x6a0>
 8007e62:	f01a 0f01 	tst.w	sl, #1
 8007e66:	d110      	bne.n	8007e8a <_dtoa_r+0x6c2>
 8007e68:	4620      	mov	r0, r4
 8007e6a:	ee18 1a10 	vmov	r1, s16
 8007e6e:	f000 faf3 	bl	8008458 <_Bfree>
 8007e72:	2300      	movs	r3, #0
 8007e74:	9800      	ldr	r0, [sp, #0]
 8007e76:	702b      	strb	r3, [r5, #0]
 8007e78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007e7a:	3001      	adds	r0, #1
 8007e7c:	6018      	str	r0, [r3, #0]
 8007e7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	f43f acf1 	beq.w	8007868 <_dtoa_r+0xa0>
 8007e86:	601d      	str	r5, [r3, #0]
 8007e88:	e4ee      	b.n	8007868 <_dtoa_r+0xa0>
 8007e8a:	9f00      	ldr	r7, [sp, #0]
 8007e8c:	462b      	mov	r3, r5
 8007e8e:	461d      	mov	r5, r3
 8007e90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007e94:	2a39      	cmp	r2, #57	; 0x39
 8007e96:	d106      	bne.n	8007ea6 <_dtoa_r+0x6de>
 8007e98:	9a01      	ldr	r2, [sp, #4]
 8007e9a:	429a      	cmp	r2, r3
 8007e9c:	d1f7      	bne.n	8007e8e <_dtoa_r+0x6c6>
 8007e9e:	9901      	ldr	r1, [sp, #4]
 8007ea0:	2230      	movs	r2, #48	; 0x30
 8007ea2:	3701      	adds	r7, #1
 8007ea4:	700a      	strb	r2, [r1, #0]
 8007ea6:	781a      	ldrb	r2, [r3, #0]
 8007ea8:	3201      	adds	r2, #1
 8007eaa:	701a      	strb	r2, [r3, #0]
 8007eac:	e790      	b.n	8007dd0 <_dtoa_r+0x608>
 8007eae:	4ba6      	ldr	r3, [pc, #664]	; (8008148 <_dtoa_r+0x980>)
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	f7f8 fba9 	bl	8000608 <__aeabi_dmul>
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	2300      	movs	r3, #0
 8007eba:	4606      	mov	r6, r0
 8007ebc:	460f      	mov	r7, r1
 8007ebe:	f7f8 fe0b 	bl	8000ad8 <__aeabi_dcmpeq>
 8007ec2:	2800      	cmp	r0, #0
 8007ec4:	d09d      	beq.n	8007e02 <_dtoa_r+0x63a>
 8007ec6:	e7cf      	b.n	8007e68 <_dtoa_r+0x6a0>
 8007ec8:	9a08      	ldr	r2, [sp, #32]
 8007eca:	2a00      	cmp	r2, #0
 8007ecc:	f000 80d7 	beq.w	800807e <_dtoa_r+0x8b6>
 8007ed0:	9a06      	ldr	r2, [sp, #24]
 8007ed2:	2a01      	cmp	r2, #1
 8007ed4:	f300 80ba 	bgt.w	800804c <_dtoa_r+0x884>
 8007ed8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007eda:	2a00      	cmp	r2, #0
 8007edc:	f000 80b2 	beq.w	8008044 <_dtoa_r+0x87c>
 8007ee0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007ee4:	9e07      	ldr	r6, [sp, #28]
 8007ee6:	9d04      	ldr	r5, [sp, #16]
 8007ee8:	9a04      	ldr	r2, [sp, #16]
 8007eea:	441a      	add	r2, r3
 8007eec:	9204      	str	r2, [sp, #16]
 8007eee:	9a05      	ldr	r2, [sp, #20]
 8007ef0:	2101      	movs	r1, #1
 8007ef2:	441a      	add	r2, r3
 8007ef4:	4620      	mov	r0, r4
 8007ef6:	9205      	str	r2, [sp, #20]
 8007ef8:	f000 fb66 	bl	80085c8 <__i2b>
 8007efc:	4607      	mov	r7, r0
 8007efe:	2d00      	cmp	r5, #0
 8007f00:	dd0c      	ble.n	8007f1c <_dtoa_r+0x754>
 8007f02:	9b05      	ldr	r3, [sp, #20]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	dd09      	ble.n	8007f1c <_dtoa_r+0x754>
 8007f08:	42ab      	cmp	r3, r5
 8007f0a:	9a04      	ldr	r2, [sp, #16]
 8007f0c:	bfa8      	it	ge
 8007f0e:	462b      	movge	r3, r5
 8007f10:	1ad2      	subs	r2, r2, r3
 8007f12:	9204      	str	r2, [sp, #16]
 8007f14:	9a05      	ldr	r2, [sp, #20]
 8007f16:	1aed      	subs	r5, r5, r3
 8007f18:	1ad3      	subs	r3, r2, r3
 8007f1a:	9305      	str	r3, [sp, #20]
 8007f1c:	9b07      	ldr	r3, [sp, #28]
 8007f1e:	b31b      	cbz	r3, 8007f68 <_dtoa_r+0x7a0>
 8007f20:	9b08      	ldr	r3, [sp, #32]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	f000 80af 	beq.w	8008086 <_dtoa_r+0x8be>
 8007f28:	2e00      	cmp	r6, #0
 8007f2a:	dd13      	ble.n	8007f54 <_dtoa_r+0x78c>
 8007f2c:	4639      	mov	r1, r7
 8007f2e:	4632      	mov	r2, r6
 8007f30:	4620      	mov	r0, r4
 8007f32:	f000 fc09 	bl	8008748 <__pow5mult>
 8007f36:	ee18 2a10 	vmov	r2, s16
 8007f3a:	4601      	mov	r1, r0
 8007f3c:	4607      	mov	r7, r0
 8007f3e:	4620      	mov	r0, r4
 8007f40:	f000 fb58 	bl	80085f4 <__multiply>
 8007f44:	ee18 1a10 	vmov	r1, s16
 8007f48:	4680      	mov	r8, r0
 8007f4a:	4620      	mov	r0, r4
 8007f4c:	f000 fa84 	bl	8008458 <_Bfree>
 8007f50:	ee08 8a10 	vmov	s16, r8
 8007f54:	9b07      	ldr	r3, [sp, #28]
 8007f56:	1b9a      	subs	r2, r3, r6
 8007f58:	d006      	beq.n	8007f68 <_dtoa_r+0x7a0>
 8007f5a:	ee18 1a10 	vmov	r1, s16
 8007f5e:	4620      	mov	r0, r4
 8007f60:	f000 fbf2 	bl	8008748 <__pow5mult>
 8007f64:	ee08 0a10 	vmov	s16, r0
 8007f68:	2101      	movs	r1, #1
 8007f6a:	4620      	mov	r0, r4
 8007f6c:	f000 fb2c 	bl	80085c8 <__i2b>
 8007f70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	4606      	mov	r6, r0
 8007f76:	f340 8088 	ble.w	800808a <_dtoa_r+0x8c2>
 8007f7a:	461a      	mov	r2, r3
 8007f7c:	4601      	mov	r1, r0
 8007f7e:	4620      	mov	r0, r4
 8007f80:	f000 fbe2 	bl	8008748 <__pow5mult>
 8007f84:	9b06      	ldr	r3, [sp, #24]
 8007f86:	2b01      	cmp	r3, #1
 8007f88:	4606      	mov	r6, r0
 8007f8a:	f340 8081 	ble.w	8008090 <_dtoa_r+0x8c8>
 8007f8e:	f04f 0800 	mov.w	r8, #0
 8007f92:	6933      	ldr	r3, [r6, #16]
 8007f94:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007f98:	6918      	ldr	r0, [r3, #16]
 8007f9a:	f000 fac5 	bl	8008528 <__hi0bits>
 8007f9e:	f1c0 0020 	rsb	r0, r0, #32
 8007fa2:	9b05      	ldr	r3, [sp, #20]
 8007fa4:	4418      	add	r0, r3
 8007fa6:	f010 001f 	ands.w	r0, r0, #31
 8007faa:	f000 8092 	beq.w	80080d2 <_dtoa_r+0x90a>
 8007fae:	f1c0 0320 	rsb	r3, r0, #32
 8007fb2:	2b04      	cmp	r3, #4
 8007fb4:	f340 808a 	ble.w	80080cc <_dtoa_r+0x904>
 8007fb8:	f1c0 001c 	rsb	r0, r0, #28
 8007fbc:	9b04      	ldr	r3, [sp, #16]
 8007fbe:	4403      	add	r3, r0
 8007fc0:	9304      	str	r3, [sp, #16]
 8007fc2:	9b05      	ldr	r3, [sp, #20]
 8007fc4:	4403      	add	r3, r0
 8007fc6:	4405      	add	r5, r0
 8007fc8:	9305      	str	r3, [sp, #20]
 8007fca:	9b04      	ldr	r3, [sp, #16]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	dd07      	ble.n	8007fe0 <_dtoa_r+0x818>
 8007fd0:	ee18 1a10 	vmov	r1, s16
 8007fd4:	461a      	mov	r2, r3
 8007fd6:	4620      	mov	r0, r4
 8007fd8:	f000 fc10 	bl	80087fc <__lshift>
 8007fdc:	ee08 0a10 	vmov	s16, r0
 8007fe0:	9b05      	ldr	r3, [sp, #20]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	dd05      	ble.n	8007ff2 <_dtoa_r+0x82a>
 8007fe6:	4631      	mov	r1, r6
 8007fe8:	461a      	mov	r2, r3
 8007fea:	4620      	mov	r0, r4
 8007fec:	f000 fc06 	bl	80087fc <__lshift>
 8007ff0:	4606      	mov	r6, r0
 8007ff2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d06e      	beq.n	80080d6 <_dtoa_r+0x90e>
 8007ff8:	ee18 0a10 	vmov	r0, s16
 8007ffc:	4631      	mov	r1, r6
 8007ffe:	f000 fc6d 	bl	80088dc <__mcmp>
 8008002:	2800      	cmp	r0, #0
 8008004:	da67      	bge.n	80080d6 <_dtoa_r+0x90e>
 8008006:	9b00      	ldr	r3, [sp, #0]
 8008008:	3b01      	subs	r3, #1
 800800a:	ee18 1a10 	vmov	r1, s16
 800800e:	9300      	str	r3, [sp, #0]
 8008010:	220a      	movs	r2, #10
 8008012:	2300      	movs	r3, #0
 8008014:	4620      	mov	r0, r4
 8008016:	f000 fa41 	bl	800849c <__multadd>
 800801a:	9b08      	ldr	r3, [sp, #32]
 800801c:	ee08 0a10 	vmov	s16, r0
 8008020:	2b00      	cmp	r3, #0
 8008022:	f000 81b1 	beq.w	8008388 <_dtoa_r+0xbc0>
 8008026:	2300      	movs	r3, #0
 8008028:	4639      	mov	r1, r7
 800802a:	220a      	movs	r2, #10
 800802c:	4620      	mov	r0, r4
 800802e:	f000 fa35 	bl	800849c <__multadd>
 8008032:	9b02      	ldr	r3, [sp, #8]
 8008034:	2b00      	cmp	r3, #0
 8008036:	4607      	mov	r7, r0
 8008038:	f300 808e 	bgt.w	8008158 <_dtoa_r+0x990>
 800803c:	9b06      	ldr	r3, [sp, #24]
 800803e:	2b02      	cmp	r3, #2
 8008040:	dc51      	bgt.n	80080e6 <_dtoa_r+0x91e>
 8008042:	e089      	b.n	8008158 <_dtoa_r+0x990>
 8008044:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008046:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800804a:	e74b      	b.n	8007ee4 <_dtoa_r+0x71c>
 800804c:	9b03      	ldr	r3, [sp, #12]
 800804e:	1e5e      	subs	r6, r3, #1
 8008050:	9b07      	ldr	r3, [sp, #28]
 8008052:	42b3      	cmp	r3, r6
 8008054:	bfbf      	itttt	lt
 8008056:	9b07      	ldrlt	r3, [sp, #28]
 8008058:	9607      	strlt	r6, [sp, #28]
 800805a:	1af2      	sublt	r2, r6, r3
 800805c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800805e:	bfb6      	itet	lt
 8008060:	189b      	addlt	r3, r3, r2
 8008062:	1b9e      	subge	r6, r3, r6
 8008064:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008066:	9b03      	ldr	r3, [sp, #12]
 8008068:	bfb8      	it	lt
 800806a:	2600      	movlt	r6, #0
 800806c:	2b00      	cmp	r3, #0
 800806e:	bfb7      	itett	lt
 8008070:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008074:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008078:	1a9d      	sublt	r5, r3, r2
 800807a:	2300      	movlt	r3, #0
 800807c:	e734      	b.n	8007ee8 <_dtoa_r+0x720>
 800807e:	9e07      	ldr	r6, [sp, #28]
 8008080:	9d04      	ldr	r5, [sp, #16]
 8008082:	9f08      	ldr	r7, [sp, #32]
 8008084:	e73b      	b.n	8007efe <_dtoa_r+0x736>
 8008086:	9a07      	ldr	r2, [sp, #28]
 8008088:	e767      	b.n	8007f5a <_dtoa_r+0x792>
 800808a:	9b06      	ldr	r3, [sp, #24]
 800808c:	2b01      	cmp	r3, #1
 800808e:	dc18      	bgt.n	80080c2 <_dtoa_r+0x8fa>
 8008090:	f1ba 0f00 	cmp.w	sl, #0
 8008094:	d115      	bne.n	80080c2 <_dtoa_r+0x8fa>
 8008096:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800809a:	b993      	cbnz	r3, 80080c2 <_dtoa_r+0x8fa>
 800809c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80080a0:	0d1b      	lsrs	r3, r3, #20
 80080a2:	051b      	lsls	r3, r3, #20
 80080a4:	b183      	cbz	r3, 80080c8 <_dtoa_r+0x900>
 80080a6:	9b04      	ldr	r3, [sp, #16]
 80080a8:	3301      	adds	r3, #1
 80080aa:	9304      	str	r3, [sp, #16]
 80080ac:	9b05      	ldr	r3, [sp, #20]
 80080ae:	3301      	adds	r3, #1
 80080b0:	9305      	str	r3, [sp, #20]
 80080b2:	f04f 0801 	mov.w	r8, #1
 80080b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	f47f af6a 	bne.w	8007f92 <_dtoa_r+0x7ca>
 80080be:	2001      	movs	r0, #1
 80080c0:	e76f      	b.n	8007fa2 <_dtoa_r+0x7da>
 80080c2:	f04f 0800 	mov.w	r8, #0
 80080c6:	e7f6      	b.n	80080b6 <_dtoa_r+0x8ee>
 80080c8:	4698      	mov	r8, r3
 80080ca:	e7f4      	b.n	80080b6 <_dtoa_r+0x8ee>
 80080cc:	f43f af7d 	beq.w	8007fca <_dtoa_r+0x802>
 80080d0:	4618      	mov	r0, r3
 80080d2:	301c      	adds	r0, #28
 80080d4:	e772      	b.n	8007fbc <_dtoa_r+0x7f4>
 80080d6:	9b03      	ldr	r3, [sp, #12]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	dc37      	bgt.n	800814c <_dtoa_r+0x984>
 80080dc:	9b06      	ldr	r3, [sp, #24]
 80080de:	2b02      	cmp	r3, #2
 80080e0:	dd34      	ble.n	800814c <_dtoa_r+0x984>
 80080e2:	9b03      	ldr	r3, [sp, #12]
 80080e4:	9302      	str	r3, [sp, #8]
 80080e6:	9b02      	ldr	r3, [sp, #8]
 80080e8:	b96b      	cbnz	r3, 8008106 <_dtoa_r+0x93e>
 80080ea:	4631      	mov	r1, r6
 80080ec:	2205      	movs	r2, #5
 80080ee:	4620      	mov	r0, r4
 80080f0:	f000 f9d4 	bl	800849c <__multadd>
 80080f4:	4601      	mov	r1, r0
 80080f6:	4606      	mov	r6, r0
 80080f8:	ee18 0a10 	vmov	r0, s16
 80080fc:	f000 fbee 	bl	80088dc <__mcmp>
 8008100:	2800      	cmp	r0, #0
 8008102:	f73f adbb 	bgt.w	8007c7c <_dtoa_r+0x4b4>
 8008106:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008108:	9d01      	ldr	r5, [sp, #4]
 800810a:	43db      	mvns	r3, r3
 800810c:	9300      	str	r3, [sp, #0]
 800810e:	f04f 0800 	mov.w	r8, #0
 8008112:	4631      	mov	r1, r6
 8008114:	4620      	mov	r0, r4
 8008116:	f000 f99f 	bl	8008458 <_Bfree>
 800811a:	2f00      	cmp	r7, #0
 800811c:	f43f aea4 	beq.w	8007e68 <_dtoa_r+0x6a0>
 8008120:	f1b8 0f00 	cmp.w	r8, #0
 8008124:	d005      	beq.n	8008132 <_dtoa_r+0x96a>
 8008126:	45b8      	cmp	r8, r7
 8008128:	d003      	beq.n	8008132 <_dtoa_r+0x96a>
 800812a:	4641      	mov	r1, r8
 800812c:	4620      	mov	r0, r4
 800812e:	f000 f993 	bl	8008458 <_Bfree>
 8008132:	4639      	mov	r1, r7
 8008134:	4620      	mov	r0, r4
 8008136:	f000 f98f 	bl	8008458 <_Bfree>
 800813a:	e695      	b.n	8007e68 <_dtoa_r+0x6a0>
 800813c:	2600      	movs	r6, #0
 800813e:	4637      	mov	r7, r6
 8008140:	e7e1      	b.n	8008106 <_dtoa_r+0x93e>
 8008142:	9700      	str	r7, [sp, #0]
 8008144:	4637      	mov	r7, r6
 8008146:	e599      	b.n	8007c7c <_dtoa_r+0x4b4>
 8008148:	40240000 	.word	0x40240000
 800814c:	9b08      	ldr	r3, [sp, #32]
 800814e:	2b00      	cmp	r3, #0
 8008150:	f000 80ca 	beq.w	80082e8 <_dtoa_r+0xb20>
 8008154:	9b03      	ldr	r3, [sp, #12]
 8008156:	9302      	str	r3, [sp, #8]
 8008158:	2d00      	cmp	r5, #0
 800815a:	dd05      	ble.n	8008168 <_dtoa_r+0x9a0>
 800815c:	4639      	mov	r1, r7
 800815e:	462a      	mov	r2, r5
 8008160:	4620      	mov	r0, r4
 8008162:	f000 fb4b 	bl	80087fc <__lshift>
 8008166:	4607      	mov	r7, r0
 8008168:	f1b8 0f00 	cmp.w	r8, #0
 800816c:	d05b      	beq.n	8008226 <_dtoa_r+0xa5e>
 800816e:	6879      	ldr	r1, [r7, #4]
 8008170:	4620      	mov	r0, r4
 8008172:	f000 f931 	bl	80083d8 <_Balloc>
 8008176:	4605      	mov	r5, r0
 8008178:	b928      	cbnz	r0, 8008186 <_dtoa_r+0x9be>
 800817a:	4b87      	ldr	r3, [pc, #540]	; (8008398 <_dtoa_r+0xbd0>)
 800817c:	4602      	mov	r2, r0
 800817e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008182:	f7ff bb3b 	b.w	80077fc <_dtoa_r+0x34>
 8008186:	693a      	ldr	r2, [r7, #16]
 8008188:	3202      	adds	r2, #2
 800818a:	0092      	lsls	r2, r2, #2
 800818c:	f107 010c 	add.w	r1, r7, #12
 8008190:	300c      	adds	r0, #12
 8008192:	f000 f913 	bl	80083bc <memcpy>
 8008196:	2201      	movs	r2, #1
 8008198:	4629      	mov	r1, r5
 800819a:	4620      	mov	r0, r4
 800819c:	f000 fb2e 	bl	80087fc <__lshift>
 80081a0:	9b01      	ldr	r3, [sp, #4]
 80081a2:	f103 0901 	add.w	r9, r3, #1
 80081a6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80081aa:	4413      	add	r3, r2
 80081ac:	9305      	str	r3, [sp, #20]
 80081ae:	f00a 0301 	and.w	r3, sl, #1
 80081b2:	46b8      	mov	r8, r7
 80081b4:	9304      	str	r3, [sp, #16]
 80081b6:	4607      	mov	r7, r0
 80081b8:	4631      	mov	r1, r6
 80081ba:	ee18 0a10 	vmov	r0, s16
 80081be:	f7ff fa77 	bl	80076b0 <quorem>
 80081c2:	4641      	mov	r1, r8
 80081c4:	9002      	str	r0, [sp, #8]
 80081c6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80081ca:	ee18 0a10 	vmov	r0, s16
 80081ce:	f000 fb85 	bl	80088dc <__mcmp>
 80081d2:	463a      	mov	r2, r7
 80081d4:	9003      	str	r0, [sp, #12]
 80081d6:	4631      	mov	r1, r6
 80081d8:	4620      	mov	r0, r4
 80081da:	f000 fb9b 	bl	8008914 <__mdiff>
 80081de:	68c2      	ldr	r2, [r0, #12]
 80081e0:	f109 3bff 	add.w	fp, r9, #4294967295
 80081e4:	4605      	mov	r5, r0
 80081e6:	bb02      	cbnz	r2, 800822a <_dtoa_r+0xa62>
 80081e8:	4601      	mov	r1, r0
 80081ea:	ee18 0a10 	vmov	r0, s16
 80081ee:	f000 fb75 	bl	80088dc <__mcmp>
 80081f2:	4602      	mov	r2, r0
 80081f4:	4629      	mov	r1, r5
 80081f6:	4620      	mov	r0, r4
 80081f8:	9207      	str	r2, [sp, #28]
 80081fa:	f000 f92d 	bl	8008458 <_Bfree>
 80081fe:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008202:	ea43 0102 	orr.w	r1, r3, r2
 8008206:	9b04      	ldr	r3, [sp, #16]
 8008208:	430b      	orrs	r3, r1
 800820a:	464d      	mov	r5, r9
 800820c:	d10f      	bne.n	800822e <_dtoa_r+0xa66>
 800820e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008212:	d02a      	beq.n	800826a <_dtoa_r+0xaa2>
 8008214:	9b03      	ldr	r3, [sp, #12]
 8008216:	2b00      	cmp	r3, #0
 8008218:	dd02      	ble.n	8008220 <_dtoa_r+0xa58>
 800821a:	9b02      	ldr	r3, [sp, #8]
 800821c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008220:	f88b a000 	strb.w	sl, [fp]
 8008224:	e775      	b.n	8008112 <_dtoa_r+0x94a>
 8008226:	4638      	mov	r0, r7
 8008228:	e7ba      	b.n	80081a0 <_dtoa_r+0x9d8>
 800822a:	2201      	movs	r2, #1
 800822c:	e7e2      	b.n	80081f4 <_dtoa_r+0xa2c>
 800822e:	9b03      	ldr	r3, [sp, #12]
 8008230:	2b00      	cmp	r3, #0
 8008232:	db04      	blt.n	800823e <_dtoa_r+0xa76>
 8008234:	9906      	ldr	r1, [sp, #24]
 8008236:	430b      	orrs	r3, r1
 8008238:	9904      	ldr	r1, [sp, #16]
 800823a:	430b      	orrs	r3, r1
 800823c:	d122      	bne.n	8008284 <_dtoa_r+0xabc>
 800823e:	2a00      	cmp	r2, #0
 8008240:	ddee      	ble.n	8008220 <_dtoa_r+0xa58>
 8008242:	ee18 1a10 	vmov	r1, s16
 8008246:	2201      	movs	r2, #1
 8008248:	4620      	mov	r0, r4
 800824a:	f000 fad7 	bl	80087fc <__lshift>
 800824e:	4631      	mov	r1, r6
 8008250:	ee08 0a10 	vmov	s16, r0
 8008254:	f000 fb42 	bl	80088dc <__mcmp>
 8008258:	2800      	cmp	r0, #0
 800825a:	dc03      	bgt.n	8008264 <_dtoa_r+0xa9c>
 800825c:	d1e0      	bne.n	8008220 <_dtoa_r+0xa58>
 800825e:	f01a 0f01 	tst.w	sl, #1
 8008262:	d0dd      	beq.n	8008220 <_dtoa_r+0xa58>
 8008264:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008268:	d1d7      	bne.n	800821a <_dtoa_r+0xa52>
 800826a:	2339      	movs	r3, #57	; 0x39
 800826c:	f88b 3000 	strb.w	r3, [fp]
 8008270:	462b      	mov	r3, r5
 8008272:	461d      	mov	r5, r3
 8008274:	3b01      	subs	r3, #1
 8008276:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800827a:	2a39      	cmp	r2, #57	; 0x39
 800827c:	d071      	beq.n	8008362 <_dtoa_r+0xb9a>
 800827e:	3201      	adds	r2, #1
 8008280:	701a      	strb	r2, [r3, #0]
 8008282:	e746      	b.n	8008112 <_dtoa_r+0x94a>
 8008284:	2a00      	cmp	r2, #0
 8008286:	dd07      	ble.n	8008298 <_dtoa_r+0xad0>
 8008288:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800828c:	d0ed      	beq.n	800826a <_dtoa_r+0xaa2>
 800828e:	f10a 0301 	add.w	r3, sl, #1
 8008292:	f88b 3000 	strb.w	r3, [fp]
 8008296:	e73c      	b.n	8008112 <_dtoa_r+0x94a>
 8008298:	9b05      	ldr	r3, [sp, #20]
 800829a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800829e:	4599      	cmp	r9, r3
 80082a0:	d047      	beq.n	8008332 <_dtoa_r+0xb6a>
 80082a2:	ee18 1a10 	vmov	r1, s16
 80082a6:	2300      	movs	r3, #0
 80082a8:	220a      	movs	r2, #10
 80082aa:	4620      	mov	r0, r4
 80082ac:	f000 f8f6 	bl	800849c <__multadd>
 80082b0:	45b8      	cmp	r8, r7
 80082b2:	ee08 0a10 	vmov	s16, r0
 80082b6:	f04f 0300 	mov.w	r3, #0
 80082ba:	f04f 020a 	mov.w	r2, #10
 80082be:	4641      	mov	r1, r8
 80082c0:	4620      	mov	r0, r4
 80082c2:	d106      	bne.n	80082d2 <_dtoa_r+0xb0a>
 80082c4:	f000 f8ea 	bl	800849c <__multadd>
 80082c8:	4680      	mov	r8, r0
 80082ca:	4607      	mov	r7, r0
 80082cc:	f109 0901 	add.w	r9, r9, #1
 80082d0:	e772      	b.n	80081b8 <_dtoa_r+0x9f0>
 80082d2:	f000 f8e3 	bl	800849c <__multadd>
 80082d6:	4639      	mov	r1, r7
 80082d8:	4680      	mov	r8, r0
 80082da:	2300      	movs	r3, #0
 80082dc:	220a      	movs	r2, #10
 80082de:	4620      	mov	r0, r4
 80082e0:	f000 f8dc 	bl	800849c <__multadd>
 80082e4:	4607      	mov	r7, r0
 80082e6:	e7f1      	b.n	80082cc <_dtoa_r+0xb04>
 80082e8:	9b03      	ldr	r3, [sp, #12]
 80082ea:	9302      	str	r3, [sp, #8]
 80082ec:	9d01      	ldr	r5, [sp, #4]
 80082ee:	ee18 0a10 	vmov	r0, s16
 80082f2:	4631      	mov	r1, r6
 80082f4:	f7ff f9dc 	bl	80076b0 <quorem>
 80082f8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80082fc:	9b01      	ldr	r3, [sp, #4]
 80082fe:	f805 ab01 	strb.w	sl, [r5], #1
 8008302:	1aea      	subs	r2, r5, r3
 8008304:	9b02      	ldr	r3, [sp, #8]
 8008306:	4293      	cmp	r3, r2
 8008308:	dd09      	ble.n	800831e <_dtoa_r+0xb56>
 800830a:	ee18 1a10 	vmov	r1, s16
 800830e:	2300      	movs	r3, #0
 8008310:	220a      	movs	r2, #10
 8008312:	4620      	mov	r0, r4
 8008314:	f000 f8c2 	bl	800849c <__multadd>
 8008318:	ee08 0a10 	vmov	s16, r0
 800831c:	e7e7      	b.n	80082ee <_dtoa_r+0xb26>
 800831e:	9b02      	ldr	r3, [sp, #8]
 8008320:	2b00      	cmp	r3, #0
 8008322:	bfc8      	it	gt
 8008324:	461d      	movgt	r5, r3
 8008326:	9b01      	ldr	r3, [sp, #4]
 8008328:	bfd8      	it	le
 800832a:	2501      	movle	r5, #1
 800832c:	441d      	add	r5, r3
 800832e:	f04f 0800 	mov.w	r8, #0
 8008332:	ee18 1a10 	vmov	r1, s16
 8008336:	2201      	movs	r2, #1
 8008338:	4620      	mov	r0, r4
 800833a:	f000 fa5f 	bl	80087fc <__lshift>
 800833e:	4631      	mov	r1, r6
 8008340:	ee08 0a10 	vmov	s16, r0
 8008344:	f000 faca 	bl	80088dc <__mcmp>
 8008348:	2800      	cmp	r0, #0
 800834a:	dc91      	bgt.n	8008270 <_dtoa_r+0xaa8>
 800834c:	d102      	bne.n	8008354 <_dtoa_r+0xb8c>
 800834e:	f01a 0f01 	tst.w	sl, #1
 8008352:	d18d      	bne.n	8008270 <_dtoa_r+0xaa8>
 8008354:	462b      	mov	r3, r5
 8008356:	461d      	mov	r5, r3
 8008358:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800835c:	2a30      	cmp	r2, #48	; 0x30
 800835e:	d0fa      	beq.n	8008356 <_dtoa_r+0xb8e>
 8008360:	e6d7      	b.n	8008112 <_dtoa_r+0x94a>
 8008362:	9a01      	ldr	r2, [sp, #4]
 8008364:	429a      	cmp	r2, r3
 8008366:	d184      	bne.n	8008272 <_dtoa_r+0xaaa>
 8008368:	9b00      	ldr	r3, [sp, #0]
 800836a:	3301      	adds	r3, #1
 800836c:	9300      	str	r3, [sp, #0]
 800836e:	2331      	movs	r3, #49	; 0x31
 8008370:	7013      	strb	r3, [r2, #0]
 8008372:	e6ce      	b.n	8008112 <_dtoa_r+0x94a>
 8008374:	4b09      	ldr	r3, [pc, #36]	; (800839c <_dtoa_r+0xbd4>)
 8008376:	f7ff ba95 	b.w	80078a4 <_dtoa_r+0xdc>
 800837a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800837c:	2b00      	cmp	r3, #0
 800837e:	f47f aa6e 	bne.w	800785e <_dtoa_r+0x96>
 8008382:	4b07      	ldr	r3, [pc, #28]	; (80083a0 <_dtoa_r+0xbd8>)
 8008384:	f7ff ba8e 	b.w	80078a4 <_dtoa_r+0xdc>
 8008388:	9b02      	ldr	r3, [sp, #8]
 800838a:	2b00      	cmp	r3, #0
 800838c:	dcae      	bgt.n	80082ec <_dtoa_r+0xb24>
 800838e:	9b06      	ldr	r3, [sp, #24]
 8008390:	2b02      	cmp	r3, #2
 8008392:	f73f aea8 	bgt.w	80080e6 <_dtoa_r+0x91e>
 8008396:	e7a9      	b.n	80082ec <_dtoa_r+0xb24>
 8008398:	0800b8cf 	.word	0x0800b8cf
 800839c:	0800b82c 	.word	0x0800b82c
 80083a0:	0800b850 	.word	0x0800b850

080083a4 <_localeconv_r>:
 80083a4:	4800      	ldr	r0, [pc, #0]	; (80083a8 <_localeconv_r+0x4>)
 80083a6:	4770      	bx	lr
 80083a8:	20000174 	.word	0x20000174

080083ac <malloc>:
 80083ac:	4b02      	ldr	r3, [pc, #8]	; (80083b8 <malloc+0xc>)
 80083ae:	4601      	mov	r1, r0
 80083b0:	6818      	ldr	r0, [r3, #0]
 80083b2:	f000 bc17 	b.w	8008be4 <_malloc_r>
 80083b6:	bf00      	nop
 80083b8:	20000020 	.word	0x20000020

080083bc <memcpy>:
 80083bc:	440a      	add	r2, r1
 80083be:	4291      	cmp	r1, r2
 80083c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80083c4:	d100      	bne.n	80083c8 <memcpy+0xc>
 80083c6:	4770      	bx	lr
 80083c8:	b510      	push	{r4, lr}
 80083ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80083d2:	4291      	cmp	r1, r2
 80083d4:	d1f9      	bne.n	80083ca <memcpy+0xe>
 80083d6:	bd10      	pop	{r4, pc}

080083d8 <_Balloc>:
 80083d8:	b570      	push	{r4, r5, r6, lr}
 80083da:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80083dc:	4604      	mov	r4, r0
 80083de:	460d      	mov	r5, r1
 80083e0:	b976      	cbnz	r6, 8008400 <_Balloc+0x28>
 80083e2:	2010      	movs	r0, #16
 80083e4:	f7ff ffe2 	bl	80083ac <malloc>
 80083e8:	4602      	mov	r2, r0
 80083ea:	6260      	str	r0, [r4, #36]	; 0x24
 80083ec:	b920      	cbnz	r0, 80083f8 <_Balloc+0x20>
 80083ee:	4b18      	ldr	r3, [pc, #96]	; (8008450 <_Balloc+0x78>)
 80083f0:	4818      	ldr	r0, [pc, #96]	; (8008454 <_Balloc+0x7c>)
 80083f2:	2166      	movs	r1, #102	; 0x66
 80083f4:	f000 fdd6 	bl	8008fa4 <__assert_func>
 80083f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80083fc:	6006      	str	r6, [r0, #0]
 80083fe:	60c6      	str	r6, [r0, #12]
 8008400:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008402:	68f3      	ldr	r3, [r6, #12]
 8008404:	b183      	cbz	r3, 8008428 <_Balloc+0x50>
 8008406:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008408:	68db      	ldr	r3, [r3, #12]
 800840a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800840e:	b9b8      	cbnz	r0, 8008440 <_Balloc+0x68>
 8008410:	2101      	movs	r1, #1
 8008412:	fa01 f605 	lsl.w	r6, r1, r5
 8008416:	1d72      	adds	r2, r6, #5
 8008418:	0092      	lsls	r2, r2, #2
 800841a:	4620      	mov	r0, r4
 800841c:	f000 fb60 	bl	8008ae0 <_calloc_r>
 8008420:	b160      	cbz	r0, 800843c <_Balloc+0x64>
 8008422:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008426:	e00e      	b.n	8008446 <_Balloc+0x6e>
 8008428:	2221      	movs	r2, #33	; 0x21
 800842a:	2104      	movs	r1, #4
 800842c:	4620      	mov	r0, r4
 800842e:	f000 fb57 	bl	8008ae0 <_calloc_r>
 8008432:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008434:	60f0      	str	r0, [r6, #12]
 8008436:	68db      	ldr	r3, [r3, #12]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d1e4      	bne.n	8008406 <_Balloc+0x2e>
 800843c:	2000      	movs	r0, #0
 800843e:	bd70      	pop	{r4, r5, r6, pc}
 8008440:	6802      	ldr	r2, [r0, #0]
 8008442:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008446:	2300      	movs	r3, #0
 8008448:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800844c:	e7f7      	b.n	800843e <_Balloc+0x66>
 800844e:	bf00      	nop
 8008450:	0800b85d 	.word	0x0800b85d
 8008454:	0800b8e0 	.word	0x0800b8e0

08008458 <_Bfree>:
 8008458:	b570      	push	{r4, r5, r6, lr}
 800845a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800845c:	4605      	mov	r5, r0
 800845e:	460c      	mov	r4, r1
 8008460:	b976      	cbnz	r6, 8008480 <_Bfree+0x28>
 8008462:	2010      	movs	r0, #16
 8008464:	f7ff ffa2 	bl	80083ac <malloc>
 8008468:	4602      	mov	r2, r0
 800846a:	6268      	str	r0, [r5, #36]	; 0x24
 800846c:	b920      	cbnz	r0, 8008478 <_Bfree+0x20>
 800846e:	4b09      	ldr	r3, [pc, #36]	; (8008494 <_Bfree+0x3c>)
 8008470:	4809      	ldr	r0, [pc, #36]	; (8008498 <_Bfree+0x40>)
 8008472:	218a      	movs	r1, #138	; 0x8a
 8008474:	f000 fd96 	bl	8008fa4 <__assert_func>
 8008478:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800847c:	6006      	str	r6, [r0, #0]
 800847e:	60c6      	str	r6, [r0, #12]
 8008480:	b13c      	cbz	r4, 8008492 <_Bfree+0x3a>
 8008482:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008484:	6862      	ldr	r2, [r4, #4]
 8008486:	68db      	ldr	r3, [r3, #12]
 8008488:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800848c:	6021      	str	r1, [r4, #0]
 800848e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008492:	bd70      	pop	{r4, r5, r6, pc}
 8008494:	0800b85d 	.word	0x0800b85d
 8008498:	0800b8e0 	.word	0x0800b8e0

0800849c <__multadd>:
 800849c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084a0:	690d      	ldr	r5, [r1, #16]
 80084a2:	4607      	mov	r7, r0
 80084a4:	460c      	mov	r4, r1
 80084a6:	461e      	mov	r6, r3
 80084a8:	f101 0c14 	add.w	ip, r1, #20
 80084ac:	2000      	movs	r0, #0
 80084ae:	f8dc 3000 	ldr.w	r3, [ip]
 80084b2:	b299      	uxth	r1, r3
 80084b4:	fb02 6101 	mla	r1, r2, r1, r6
 80084b8:	0c1e      	lsrs	r6, r3, #16
 80084ba:	0c0b      	lsrs	r3, r1, #16
 80084bc:	fb02 3306 	mla	r3, r2, r6, r3
 80084c0:	b289      	uxth	r1, r1
 80084c2:	3001      	adds	r0, #1
 80084c4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80084c8:	4285      	cmp	r5, r0
 80084ca:	f84c 1b04 	str.w	r1, [ip], #4
 80084ce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80084d2:	dcec      	bgt.n	80084ae <__multadd+0x12>
 80084d4:	b30e      	cbz	r6, 800851a <__multadd+0x7e>
 80084d6:	68a3      	ldr	r3, [r4, #8]
 80084d8:	42ab      	cmp	r3, r5
 80084da:	dc19      	bgt.n	8008510 <__multadd+0x74>
 80084dc:	6861      	ldr	r1, [r4, #4]
 80084de:	4638      	mov	r0, r7
 80084e0:	3101      	adds	r1, #1
 80084e2:	f7ff ff79 	bl	80083d8 <_Balloc>
 80084e6:	4680      	mov	r8, r0
 80084e8:	b928      	cbnz	r0, 80084f6 <__multadd+0x5a>
 80084ea:	4602      	mov	r2, r0
 80084ec:	4b0c      	ldr	r3, [pc, #48]	; (8008520 <__multadd+0x84>)
 80084ee:	480d      	ldr	r0, [pc, #52]	; (8008524 <__multadd+0x88>)
 80084f0:	21b5      	movs	r1, #181	; 0xb5
 80084f2:	f000 fd57 	bl	8008fa4 <__assert_func>
 80084f6:	6922      	ldr	r2, [r4, #16]
 80084f8:	3202      	adds	r2, #2
 80084fa:	f104 010c 	add.w	r1, r4, #12
 80084fe:	0092      	lsls	r2, r2, #2
 8008500:	300c      	adds	r0, #12
 8008502:	f7ff ff5b 	bl	80083bc <memcpy>
 8008506:	4621      	mov	r1, r4
 8008508:	4638      	mov	r0, r7
 800850a:	f7ff ffa5 	bl	8008458 <_Bfree>
 800850e:	4644      	mov	r4, r8
 8008510:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008514:	3501      	adds	r5, #1
 8008516:	615e      	str	r6, [r3, #20]
 8008518:	6125      	str	r5, [r4, #16]
 800851a:	4620      	mov	r0, r4
 800851c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008520:	0800b8cf 	.word	0x0800b8cf
 8008524:	0800b8e0 	.word	0x0800b8e0

08008528 <__hi0bits>:
 8008528:	0c03      	lsrs	r3, r0, #16
 800852a:	041b      	lsls	r3, r3, #16
 800852c:	b9d3      	cbnz	r3, 8008564 <__hi0bits+0x3c>
 800852e:	0400      	lsls	r0, r0, #16
 8008530:	2310      	movs	r3, #16
 8008532:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008536:	bf04      	itt	eq
 8008538:	0200      	lsleq	r0, r0, #8
 800853a:	3308      	addeq	r3, #8
 800853c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008540:	bf04      	itt	eq
 8008542:	0100      	lsleq	r0, r0, #4
 8008544:	3304      	addeq	r3, #4
 8008546:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800854a:	bf04      	itt	eq
 800854c:	0080      	lsleq	r0, r0, #2
 800854e:	3302      	addeq	r3, #2
 8008550:	2800      	cmp	r0, #0
 8008552:	db05      	blt.n	8008560 <__hi0bits+0x38>
 8008554:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008558:	f103 0301 	add.w	r3, r3, #1
 800855c:	bf08      	it	eq
 800855e:	2320      	moveq	r3, #32
 8008560:	4618      	mov	r0, r3
 8008562:	4770      	bx	lr
 8008564:	2300      	movs	r3, #0
 8008566:	e7e4      	b.n	8008532 <__hi0bits+0xa>

08008568 <__lo0bits>:
 8008568:	6803      	ldr	r3, [r0, #0]
 800856a:	f013 0207 	ands.w	r2, r3, #7
 800856e:	4601      	mov	r1, r0
 8008570:	d00b      	beq.n	800858a <__lo0bits+0x22>
 8008572:	07da      	lsls	r2, r3, #31
 8008574:	d423      	bmi.n	80085be <__lo0bits+0x56>
 8008576:	0798      	lsls	r0, r3, #30
 8008578:	bf49      	itett	mi
 800857a:	085b      	lsrmi	r3, r3, #1
 800857c:	089b      	lsrpl	r3, r3, #2
 800857e:	2001      	movmi	r0, #1
 8008580:	600b      	strmi	r3, [r1, #0]
 8008582:	bf5c      	itt	pl
 8008584:	600b      	strpl	r3, [r1, #0]
 8008586:	2002      	movpl	r0, #2
 8008588:	4770      	bx	lr
 800858a:	b298      	uxth	r0, r3
 800858c:	b9a8      	cbnz	r0, 80085ba <__lo0bits+0x52>
 800858e:	0c1b      	lsrs	r3, r3, #16
 8008590:	2010      	movs	r0, #16
 8008592:	b2da      	uxtb	r2, r3
 8008594:	b90a      	cbnz	r2, 800859a <__lo0bits+0x32>
 8008596:	3008      	adds	r0, #8
 8008598:	0a1b      	lsrs	r3, r3, #8
 800859a:	071a      	lsls	r2, r3, #28
 800859c:	bf04      	itt	eq
 800859e:	091b      	lsreq	r3, r3, #4
 80085a0:	3004      	addeq	r0, #4
 80085a2:	079a      	lsls	r2, r3, #30
 80085a4:	bf04      	itt	eq
 80085a6:	089b      	lsreq	r3, r3, #2
 80085a8:	3002      	addeq	r0, #2
 80085aa:	07da      	lsls	r2, r3, #31
 80085ac:	d403      	bmi.n	80085b6 <__lo0bits+0x4e>
 80085ae:	085b      	lsrs	r3, r3, #1
 80085b0:	f100 0001 	add.w	r0, r0, #1
 80085b4:	d005      	beq.n	80085c2 <__lo0bits+0x5a>
 80085b6:	600b      	str	r3, [r1, #0]
 80085b8:	4770      	bx	lr
 80085ba:	4610      	mov	r0, r2
 80085bc:	e7e9      	b.n	8008592 <__lo0bits+0x2a>
 80085be:	2000      	movs	r0, #0
 80085c0:	4770      	bx	lr
 80085c2:	2020      	movs	r0, #32
 80085c4:	4770      	bx	lr
	...

080085c8 <__i2b>:
 80085c8:	b510      	push	{r4, lr}
 80085ca:	460c      	mov	r4, r1
 80085cc:	2101      	movs	r1, #1
 80085ce:	f7ff ff03 	bl	80083d8 <_Balloc>
 80085d2:	4602      	mov	r2, r0
 80085d4:	b928      	cbnz	r0, 80085e2 <__i2b+0x1a>
 80085d6:	4b05      	ldr	r3, [pc, #20]	; (80085ec <__i2b+0x24>)
 80085d8:	4805      	ldr	r0, [pc, #20]	; (80085f0 <__i2b+0x28>)
 80085da:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80085de:	f000 fce1 	bl	8008fa4 <__assert_func>
 80085e2:	2301      	movs	r3, #1
 80085e4:	6144      	str	r4, [r0, #20]
 80085e6:	6103      	str	r3, [r0, #16]
 80085e8:	bd10      	pop	{r4, pc}
 80085ea:	bf00      	nop
 80085ec:	0800b8cf 	.word	0x0800b8cf
 80085f0:	0800b8e0 	.word	0x0800b8e0

080085f4 <__multiply>:
 80085f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085f8:	4691      	mov	r9, r2
 80085fa:	690a      	ldr	r2, [r1, #16]
 80085fc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008600:	429a      	cmp	r2, r3
 8008602:	bfb8      	it	lt
 8008604:	460b      	movlt	r3, r1
 8008606:	460c      	mov	r4, r1
 8008608:	bfbc      	itt	lt
 800860a:	464c      	movlt	r4, r9
 800860c:	4699      	movlt	r9, r3
 800860e:	6927      	ldr	r7, [r4, #16]
 8008610:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008614:	68a3      	ldr	r3, [r4, #8]
 8008616:	6861      	ldr	r1, [r4, #4]
 8008618:	eb07 060a 	add.w	r6, r7, sl
 800861c:	42b3      	cmp	r3, r6
 800861e:	b085      	sub	sp, #20
 8008620:	bfb8      	it	lt
 8008622:	3101      	addlt	r1, #1
 8008624:	f7ff fed8 	bl	80083d8 <_Balloc>
 8008628:	b930      	cbnz	r0, 8008638 <__multiply+0x44>
 800862a:	4602      	mov	r2, r0
 800862c:	4b44      	ldr	r3, [pc, #272]	; (8008740 <__multiply+0x14c>)
 800862e:	4845      	ldr	r0, [pc, #276]	; (8008744 <__multiply+0x150>)
 8008630:	f240 115d 	movw	r1, #349	; 0x15d
 8008634:	f000 fcb6 	bl	8008fa4 <__assert_func>
 8008638:	f100 0514 	add.w	r5, r0, #20
 800863c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008640:	462b      	mov	r3, r5
 8008642:	2200      	movs	r2, #0
 8008644:	4543      	cmp	r3, r8
 8008646:	d321      	bcc.n	800868c <__multiply+0x98>
 8008648:	f104 0314 	add.w	r3, r4, #20
 800864c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008650:	f109 0314 	add.w	r3, r9, #20
 8008654:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008658:	9202      	str	r2, [sp, #8]
 800865a:	1b3a      	subs	r2, r7, r4
 800865c:	3a15      	subs	r2, #21
 800865e:	f022 0203 	bic.w	r2, r2, #3
 8008662:	3204      	adds	r2, #4
 8008664:	f104 0115 	add.w	r1, r4, #21
 8008668:	428f      	cmp	r7, r1
 800866a:	bf38      	it	cc
 800866c:	2204      	movcc	r2, #4
 800866e:	9201      	str	r2, [sp, #4]
 8008670:	9a02      	ldr	r2, [sp, #8]
 8008672:	9303      	str	r3, [sp, #12]
 8008674:	429a      	cmp	r2, r3
 8008676:	d80c      	bhi.n	8008692 <__multiply+0x9e>
 8008678:	2e00      	cmp	r6, #0
 800867a:	dd03      	ble.n	8008684 <__multiply+0x90>
 800867c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008680:	2b00      	cmp	r3, #0
 8008682:	d05a      	beq.n	800873a <__multiply+0x146>
 8008684:	6106      	str	r6, [r0, #16]
 8008686:	b005      	add	sp, #20
 8008688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800868c:	f843 2b04 	str.w	r2, [r3], #4
 8008690:	e7d8      	b.n	8008644 <__multiply+0x50>
 8008692:	f8b3 a000 	ldrh.w	sl, [r3]
 8008696:	f1ba 0f00 	cmp.w	sl, #0
 800869a:	d024      	beq.n	80086e6 <__multiply+0xf2>
 800869c:	f104 0e14 	add.w	lr, r4, #20
 80086a0:	46a9      	mov	r9, r5
 80086a2:	f04f 0c00 	mov.w	ip, #0
 80086a6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80086aa:	f8d9 1000 	ldr.w	r1, [r9]
 80086ae:	fa1f fb82 	uxth.w	fp, r2
 80086b2:	b289      	uxth	r1, r1
 80086b4:	fb0a 110b 	mla	r1, sl, fp, r1
 80086b8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80086bc:	f8d9 2000 	ldr.w	r2, [r9]
 80086c0:	4461      	add	r1, ip
 80086c2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80086c6:	fb0a c20b 	mla	r2, sl, fp, ip
 80086ca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80086ce:	b289      	uxth	r1, r1
 80086d0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80086d4:	4577      	cmp	r7, lr
 80086d6:	f849 1b04 	str.w	r1, [r9], #4
 80086da:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80086de:	d8e2      	bhi.n	80086a6 <__multiply+0xb2>
 80086e0:	9a01      	ldr	r2, [sp, #4]
 80086e2:	f845 c002 	str.w	ip, [r5, r2]
 80086e6:	9a03      	ldr	r2, [sp, #12]
 80086e8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80086ec:	3304      	adds	r3, #4
 80086ee:	f1b9 0f00 	cmp.w	r9, #0
 80086f2:	d020      	beq.n	8008736 <__multiply+0x142>
 80086f4:	6829      	ldr	r1, [r5, #0]
 80086f6:	f104 0c14 	add.w	ip, r4, #20
 80086fa:	46ae      	mov	lr, r5
 80086fc:	f04f 0a00 	mov.w	sl, #0
 8008700:	f8bc b000 	ldrh.w	fp, [ip]
 8008704:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008708:	fb09 220b 	mla	r2, r9, fp, r2
 800870c:	4492      	add	sl, r2
 800870e:	b289      	uxth	r1, r1
 8008710:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008714:	f84e 1b04 	str.w	r1, [lr], #4
 8008718:	f85c 2b04 	ldr.w	r2, [ip], #4
 800871c:	f8be 1000 	ldrh.w	r1, [lr]
 8008720:	0c12      	lsrs	r2, r2, #16
 8008722:	fb09 1102 	mla	r1, r9, r2, r1
 8008726:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800872a:	4567      	cmp	r7, ip
 800872c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008730:	d8e6      	bhi.n	8008700 <__multiply+0x10c>
 8008732:	9a01      	ldr	r2, [sp, #4]
 8008734:	50a9      	str	r1, [r5, r2]
 8008736:	3504      	adds	r5, #4
 8008738:	e79a      	b.n	8008670 <__multiply+0x7c>
 800873a:	3e01      	subs	r6, #1
 800873c:	e79c      	b.n	8008678 <__multiply+0x84>
 800873e:	bf00      	nop
 8008740:	0800b8cf 	.word	0x0800b8cf
 8008744:	0800b8e0 	.word	0x0800b8e0

08008748 <__pow5mult>:
 8008748:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800874c:	4615      	mov	r5, r2
 800874e:	f012 0203 	ands.w	r2, r2, #3
 8008752:	4606      	mov	r6, r0
 8008754:	460f      	mov	r7, r1
 8008756:	d007      	beq.n	8008768 <__pow5mult+0x20>
 8008758:	4c25      	ldr	r4, [pc, #148]	; (80087f0 <__pow5mult+0xa8>)
 800875a:	3a01      	subs	r2, #1
 800875c:	2300      	movs	r3, #0
 800875e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008762:	f7ff fe9b 	bl	800849c <__multadd>
 8008766:	4607      	mov	r7, r0
 8008768:	10ad      	asrs	r5, r5, #2
 800876a:	d03d      	beq.n	80087e8 <__pow5mult+0xa0>
 800876c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800876e:	b97c      	cbnz	r4, 8008790 <__pow5mult+0x48>
 8008770:	2010      	movs	r0, #16
 8008772:	f7ff fe1b 	bl	80083ac <malloc>
 8008776:	4602      	mov	r2, r0
 8008778:	6270      	str	r0, [r6, #36]	; 0x24
 800877a:	b928      	cbnz	r0, 8008788 <__pow5mult+0x40>
 800877c:	4b1d      	ldr	r3, [pc, #116]	; (80087f4 <__pow5mult+0xac>)
 800877e:	481e      	ldr	r0, [pc, #120]	; (80087f8 <__pow5mult+0xb0>)
 8008780:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008784:	f000 fc0e 	bl	8008fa4 <__assert_func>
 8008788:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800878c:	6004      	str	r4, [r0, #0]
 800878e:	60c4      	str	r4, [r0, #12]
 8008790:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008794:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008798:	b94c      	cbnz	r4, 80087ae <__pow5mult+0x66>
 800879a:	f240 2171 	movw	r1, #625	; 0x271
 800879e:	4630      	mov	r0, r6
 80087a0:	f7ff ff12 	bl	80085c8 <__i2b>
 80087a4:	2300      	movs	r3, #0
 80087a6:	f8c8 0008 	str.w	r0, [r8, #8]
 80087aa:	4604      	mov	r4, r0
 80087ac:	6003      	str	r3, [r0, #0]
 80087ae:	f04f 0900 	mov.w	r9, #0
 80087b2:	07eb      	lsls	r3, r5, #31
 80087b4:	d50a      	bpl.n	80087cc <__pow5mult+0x84>
 80087b6:	4639      	mov	r1, r7
 80087b8:	4622      	mov	r2, r4
 80087ba:	4630      	mov	r0, r6
 80087bc:	f7ff ff1a 	bl	80085f4 <__multiply>
 80087c0:	4639      	mov	r1, r7
 80087c2:	4680      	mov	r8, r0
 80087c4:	4630      	mov	r0, r6
 80087c6:	f7ff fe47 	bl	8008458 <_Bfree>
 80087ca:	4647      	mov	r7, r8
 80087cc:	106d      	asrs	r5, r5, #1
 80087ce:	d00b      	beq.n	80087e8 <__pow5mult+0xa0>
 80087d0:	6820      	ldr	r0, [r4, #0]
 80087d2:	b938      	cbnz	r0, 80087e4 <__pow5mult+0x9c>
 80087d4:	4622      	mov	r2, r4
 80087d6:	4621      	mov	r1, r4
 80087d8:	4630      	mov	r0, r6
 80087da:	f7ff ff0b 	bl	80085f4 <__multiply>
 80087de:	6020      	str	r0, [r4, #0]
 80087e0:	f8c0 9000 	str.w	r9, [r0]
 80087e4:	4604      	mov	r4, r0
 80087e6:	e7e4      	b.n	80087b2 <__pow5mult+0x6a>
 80087e8:	4638      	mov	r0, r7
 80087ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087ee:	bf00      	nop
 80087f0:	0800ba30 	.word	0x0800ba30
 80087f4:	0800b85d 	.word	0x0800b85d
 80087f8:	0800b8e0 	.word	0x0800b8e0

080087fc <__lshift>:
 80087fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008800:	460c      	mov	r4, r1
 8008802:	6849      	ldr	r1, [r1, #4]
 8008804:	6923      	ldr	r3, [r4, #16]
 8008806:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800880a:	68a3      	ldr	r3, [r4, #8]
 800880c:	4607      	mov	r7, r0
 800880e:	4691      	mov	r9, r2
 8008810:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008814:	f108 0601 	add.w	r6, r8, #1
 8008818:	42b3      	cmp	r3, r6
 800881a:	db0b      	blt.n	8008834 <__lshift+0x38>
 800881c:	4638      	mov	r0, r7
 800881e:	f7ff fddb 	bl	80083d8 <_Balloc>
 8008822:	4605      	mov	r5, r0
 8008824:	b948      	cbnz	r0, 800883a <__lshift+0x3e>
 8008826:	4602      	mov	r2, r0
 8008828:	4b2a      	ldr	r3, [pc, #168]	; (80088d4 <__lshift+0xd8>)
 800882a:	482b      	ldr	r0, [pc, #172]	; (80088d8 <__lshift+0xdc>)
 800882c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008830:	f000 fbb8 	bl	8008fa4 <__assert_func>
 8008834:	3101      	adds	r1, #1
 8008836:	005b      	lsls	r3, r3, #1
 8008838:	e7ee      	b.n	8008818 <__lshift+0x1c>
 800883a:	2300      	movs	r3, #0
 800883c:	f100 0114 	add.w	r1, r0, #20
 8008840:	f100 0210 	add.w	r2, r0, #16
 8008844:	4618      	mov	r0, r3
 8008846:	4553      	cmp	r3, sl
 8008848:	db37      	blt.n	80088ba <__lshift+0xbe>
 800884a:	6920      	ldr	r0, [r4, #16]
 800884c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008850:	f104 0314 	add.w	r3, r4, #20
 8008854:	f019 091f 	ands.w	r9, r9, #31
 8008858:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800885c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008860:	d02f      	beq.n	80088c2 <__lshift+0xc6>
 8008862:	f1c9 0e20 	rsb	lr, r9, #32
 8008866:	468a      	mov	sl, r1
 8008868:	f04f 0c00 	mov.w	ip, #0
 800886c:	681a      	ldr	r2, [r3, #0]
 800886e:	fa02 f209 	lsl.w	r2, r2, r9
 8008872:	ea42 020c 	orr.w	r2, r2, ip
 8008876:	f84a 2b04 	str.w	r2, [sl], #4
 800887a:	f853 2b04 	ldr.w	r2, [r3], #4
 800887e:	4298      	cmp	r0, r3
 8008880:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008884:	d8f2      	bhi.n	800886c <__lshift+0x70>
 8008886:	1b03      	subs	r3, r0, r4
 8008888:	3b15      	subs	r3, #21
 800888a:	f023 0303 	bic.w	r3, r3, #3
 800888e:	3304      	adds	r3, #4
 8008890:	f104 0215 	add.w	r2, r4, #21
 8008894:	4290      	cmp	r0, r2
 8008896:	bf38      	it	cc
 8008898:	2304      	movcc	r3, #4
 800889a:	f841 c003 	str.w	ip, [r1, r3]
 800889e:	f1bc 0f00 	cmp.w	ip, #0
 80088a2:	d001      	beq.n	80088a8 <__lshift+0xac>
 80088a4:	f108 0602 	add.w	r6, r8, #2
 80088a8:	3e01      	subs	r6, #1
 80088aa:	4638      	mov	r0, r7
 80088ac:	612e      	str	r6, [r5, #16]
 80088ae:	4621      	mov	r1, r4
 80088b0:	f7ff fdd2 	bl	8008458 <_Bfree>
 80088b4:	4628      	mov	r0, r5
 80088b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088ba:	f842 0f04 	str.w	r0, [r2, #4]!
 80088be:	3301      	adds	r3, #1
 80088c0:	e7c1      	b.n	8008846 <__lshift+0x4a>
 80088c2:	3904      	subs	r1, #4
 80088c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80088c8:	f841 2f04 	str.w	r2, [r1, #4]!
 80088cc:	4298      	cmp	r0, r3
 80088ce:	d8f9      	bhi.n	80088c4 <__lshift+0xc8>
 80088d0:	e7ea      	b.n	80088a8 <__lshift+0xac>
 80088d2:	bf00      	nop
 80088d4:	0800b8cf 	.word	0x0800b8cf
 80088d8:	0800b8e0 	.word	0x0800b8e0

080088dc <__mcmp>:
 80088dc:	b530      	push	{r4, r5, lr}
 80088de:	6902      	ldr	r2, [r0, #16]
 80088e0:	690c      	ldr	r4, [r1, #16]
 80088e2:	1b12      	subs	r2, r2, r4
 80088e4:	d10e      	bne.n	8008904 <__mcmp+0x28>
 80088e6:	f100 0314 	add.w	r3, r0, #20
 80088ea:	3114      	adds	r1, #20
 80088ec:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80088f0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80088f4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80088f8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80088fc:	42a5      	cmp	r5, r4
 80088fe:	d003      	beq.n	8008908 <__mcmp+0x2c>
 8008900:	d305      	bcc.n	800890e <__mcmp+0x32>
 8008902:	2201      	movs	r2, #1
 8008904:	4610      	mov	r0, r2
 8008906:	bd30      	pop	{r4, r5, pc}
 8008908:	4283      	cmp	r3, r0
 800890a:	d3f3      	bcc.n	80088f4 <__mcmp+0x18>
 800890c:	e7fa      	b.n	8008904 <__mcmp+0x28>
 800890e:	f04f 32ff 	mov.w	r2, #4294967295
 8008912:	e7f7      	b.n	8008904 <__mcmp+0x28>

08008914 <__mdiff>:
 8008914:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008918:	460c      	mov	r4, r1
 800891a:	4606      	mov	r6, r0
 800891c:	4611      	mov	r1, r2
 800891e:	4620      	mov	r0, r4
 8008920:	4690      	mov	r8, r2
 8008922:	f7ff ffdb 	bl	80088dc <__mcmp>
 8008926:	1e05      	subs	r5, r0, #0
 8008928:	d110      	bne.n	800894c <__mdiff+0x38>
 800892a:	4629      	mov	r1, r5
 800892c:	4630      	mov	r0, r6
 800892e:	f7ff fd53 	bl	80083d8 <_Balloc>
 8008932:	b930      	cbnz	r0, 8008942 <__mdiff+0x2e>
 8008934:	4b3a      	ldr	r3, [pc, #232]	; (8008a20 <__mdiff+0x10c>)
 8008936:	4602      	mov	r2, r0
 8008938:	f240 2132 	movw	r1, #562	; 0x232
 800893c:	4839      	ldr	r0, [pc, #228]	; (8008a24 <__mdiff+0x110>)
 800893e:	f000 fb31 	bl	8008fa4 <__assert_func>
 8008942:	2301      	movs	r3, #1
 8008944:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008948:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800894c:	bfa4      	itt	ge
 800894e:	4643      	movge	r3, r8
 8008950:	46a0      	movge	r8, r4
 8008952:	4630      	mov	r0, r6
 8008954:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008958:	bfa6      	itte	ge
 800895a:	461c      	movge	r4, r3
 800895c:	2500      	movge	r5, #0
 800895e:	2501      	movlt	r5, #1
 8008960:	f7ff fd3a 	bl	80083d8 <_Balloc>
 8008964:	b920      	cbnz	r0, 8008970 <__mdiff+0x5c>
 8008966:	4b2e      	ldr	r3, [pc, #184]	; (8008a20 <__mdiff+0x10c>)
 8008968:	4602      	mov	r2, r0
 800896a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800896e:	e7e5      	b.n	800893c <__mdiff+0x28>
 8008970:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008974:	6926      	ldr	r6, [r4, #16]
 8008976:	60c5      	str	r5, [r0, #12]
 8008978:	f104 0914 	add.w	r9, r4, #20
 800897c:	f108 0514 	add.w	r5, r8, #20
 8008980:	f100 0e14 	add.w	lr, r0, #20
 8008984:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008988:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800898c:	f108 0210 	add.w	r2, r8, #16
 8008990:	46f2      	mov	sl, lr
 8008992:	2100      	movs	r1, #0
 8008994:	f859 3b04 	ldr.w	r3, [r9], #4
 8008998:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800899c:	fa1f f883 	uxth.w	r8, r3
 80089a0:	fa11 f18b 	uxtah	r1, r1, fp
 80089a4:	0c1b      	lsrs	r3, r3, #16
 80089a6:	eba1 0808 	sub.w	r8, r1, r8
 80089aa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80089ae:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80089b2:	fa1f f888 	uxth.w	r8, r8
 80089b6:	1419      	asrs	r1, r3, #16
 80089b8:	454e      	cmp	r6, r9
 80089ba:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80089be:	f84a 3b04 	str.w	r3, [sl], #4
 80089c2:	d8e7      	bhi.n	8008994 <__mdiff+0x80>
 80089c4:	1b33      	subs	r3, r6, r4
 80089c6:	3b15      	subs	r3, #21
 80089c8:	f023 0303 	bic.w	r3, r3, #3
 80089cc:	3304      	adds	r3, #4
 80089ce:	3415      	adds	r4, #21
 80089d0:	42a6      	cmp	r6, r4
 80089d2:	bf38      	it	cc
 80089d4:	2304      	movcc	r3, #4
 80089d6:	441d      	add	r5, r3
 80089d8:	4473      	add	r3, lr
 80089da:	469e      	mov	lr, r3
 80089dc:	462e      	mov	r6, r5
 80089de:	4566      	cmp	r6, ip
 80089e0:	d30e      	bcc.n	8008a00 <__mdiff+0xec>
 80089e2:	f10c 0203 	add.w	r2, ip, #3
 80089e6:	1b52      	subs	r2, r2, r5
 80089e8:	f022 0203 	bic.w	r2, r2, #3
 80089ec:	3d03      	subs	r5, #3
 80089ee:	45ac      	cmp	ip, r5
 80089f0:	bf38      	it	cc
 80089f2:	2200      	movcc	r2, #0
 80089f4:	441a      	add	r2, r3
 80089f6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80089fa:	b17b      	cbz	r3, 8008a1c <__mdiff+0x108>
 80089fc:	6107      	str	r7, [r0, #16]
 80089fe:	e7a3      	b.n	8008948 <__mdiff+0x34>
 8008a00:	f856 8b04 	ldr.w	r8, [r6], #4
 8008a04:	fa11 f288 	uxtah	r2, r1, r8
 8008a08:	1414      	asrs	r4, r2, #16
 8008a0a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008a0e:	b292      	uxth	r2, r2
 8008a10:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008a14:	f84e 2b04 	str.w	r2, [lr], #4
 8008a18:	1421      	asrs	r1, r4, #16
 8008a1a:	e7e0      	b.n	80089de <__mdiff+0xca>
 8008a1c:	3f01      	subs	r7, #1
 8008a1e:	e7ea      	b.n	80089f6 <__mdiff+0xe2>
 8008a20:	0800b8cf 	.word	0x0800b8cf
 8008a24:	0800b8e0 	.word	0x0800b8e0

08008a28 <__d2b>:
 8008a28:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008a2c:	4689      	mov	r9, r1
 8008a2e:	2101      	movs	r1, #1
 8008a30:	ec57 6b10 	vmov	r6, r7, d0
 8008a34:	4690      	mov	r8, r2
 8008a36:	f7ff fccf 	bl	80083d8 <_Balloc>
 8008a3a:	4604      	mov	r4, r0
 8008a3c:	b930      	cbnz	r0, 8008a4c <__d2b+0x24>
 8008a3e:	4602      	mov	r2, r0
 8008a40:	4b25      	ldr	r3, [pc, #148]	; (8008ad8 <__d2b+0xb0>)
 8008a42:	4826      	ldr	r0, [pc, #152]	; (8008adc <__d2b+0xb4>)
 8008a44:	f240 310a 	movw	r1, #778	; 0x30a
 8008a48:	f000 faac 	bl	8008fa4 <__assert_func>
 8008a4c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008a50:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008a54:	bb35      	cbnz	r5, 8008aa4 <__d2b+0x7c>
 8008a56:	2e00      	cmp	r6, #0
 8008a58:	9301      	str	r3, [sp, #4]
 8008a5a:	d028      	beq.n	8008aae <__d2b+0x86>
 8008a5c:	4668      	mov	r0, sp
 8008a5e:	9600      	str	r6, [sp, #0]
 8008a60:	f7ff fd82 	bl	8008568 <__lo0bits>
 8008a64:	9900      	ldr	r1, [sp, #0]
 8008a66:	b300      	cbz	r0, 8008aaa <__d2b+0x82>
 8008a68:	9a01      	ldr	r2, [sp, #4]
 8008a6a:	f1c0 0320 	rsb	r3, r0, #32
 8008a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8008a72:	430b      	orrs	r3, r1
 8008a74:	40c2      	lsrs	r2, r0
 8008a76:	6163      	str	r3, [r4, #20]
 8008a78:	9201      	str	r2, [sp, #4]
 8008a7a:	9b01      	ldr	r3, [sp, #4]
 8008a7c:	61a3      	str	r3, [r4, #24]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	bf14      	ite	ne
 8008a82:	2202      	movne	r2, #2
 8008a84:	2201      	moveq	r2, #1
 8008a86:	6122      	str	r2, [r4, #16]
 8008a88:	b1d5      	cbz	r5, 8008ac0 <__d2b+0x98>
 8008a8a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008a8e:	4405      	add	r5, r0
 8008a90:	f8c9 5000 	str.w	r5, [r9]
 8008a94:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008a98:	f8c8 0000 	str.w	r0, [r8]
 8008a9c:	4620      	mov	r0, r4
 8008a9e:	b003      	add	sp, #12
 8008aa0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008aa4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008aa8:	e7d5      	b.n	8008a56 <__d2b+0x2e>
 8008aaa:	6161      	str	r1, [r4, #20]
 8008aac:	e7e5      	b.n	8008a7a <__d2b+0x52>
 8008aae:	a801      	add	r0, sp, #4
 8008ab0:	f7ff fd5a 	bl	8008568 <__lo0bits>
 8008ab4:	9b01      	ldr	r3, [sp, #4]
 8008ab6:	6163      	str	r3, [r4, #20]
 8008ab8:	2201      	movs	r2, #1
 8008aba:	6122      	str	r2, [r4, #16]
 8008abc:	3020      	adds	r0, #32
 8008abe:	e7e3      	b.n	8008a88 <__d2b+0x60>
 8008ac0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008ac4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008ac8:	f8c9 0000 	str.w	r0, [r9]
 8008acc:	6918      	ldr	r0, [r3, #16]
 8008ace:	f7ff fd2b 	bl	8008528 <__hi0bits>
 8008ad2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008ad6:	e7df      	b.n	8008a98 <__d2b+0x70>
 8008ad8:	0800b8cf 	.word	0x0800b8cf
 8008adc:	0800b8e0 	.word	0x0800b8e0

08008ae0 <_calloc_r>:
 8008ae0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008ae2:	fba1 2402 	umull	r2, r4, r1, r2
 8008ae6:	b94c      	cbnz	r4, 8008afc <_calloc_r+0x1c>
 8008ae8:	4611      	mov	r1, r2
 8008aea:	9201      	str	r2, [sp, #4]
 8008aec:	f000 f87a 	bl	8008be4 <_malloc_r>
 8008af0:	9a01      	ldr	r2, [sp, #4]
 8008af2:	4605      	mov	r5, r0
 8008af4:	b930      	cbnz	r0, 8008b04 <_calloc_r+0x24>
 8008af6:	4628      	mov	r0, r5
 8008af8:	b003      	add	sp, #12
 8008afa:	bd30      	pop	{r4, r5, pc}
 8008afc:	220c      	movs	r2, #12
 8008afe:	6002      	str	r2, [r0, #0]
 8008b00:	2500      	movs	r5, #0
 8008b02:	e7f8      	b.n	8008af6 <_calloc_r+0x16>
 8008b04:	4621      	mov	r1, r4
 8008b06:	f7fe f941 	bl	8006d8c <memset>
 8008b0a:	e7f4      	b.n	8008af6 <_calloc_r+0x16>

08008b0c <_free_r>:
 8008b0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008b0e:	2900      	cmp	r1, #0
 8008b10:	d044      	beq.n	8008b9c <_free_r+0x90>
 8008b12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b16:	9001      	str	r0, [sp, #4]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	f1a1 0404 	sub.w	r4, r1, #4
 8008b1e:	bfb8      	it	lt
 8008b20:	18e4      	addlt	r4, r4, r3
 8008b22:	f000 fa9b 	bl	800905c <__malloc_lock>
 8008b26:	4a1e      	ldr	r2, [pc, #120]	; (8008ba0 <_free_r+0x94>)
 8008b28:	9801      	ldr	r0, [sp, #4]
 8008b2a:	6813      	ldr	r3, [r2, #0]
 8008b2c:	b933      	cbnz	r3, 8008b3c <_free_r+0x30>
 8008b2e:	6063      	str	r3, [r4, #4]
 8008b30:	6014      	str	r4, [r2, #0]
 8008b32:	b003      	add	sp, #12
 8008b34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008b38:	f000 ba96 	b.w	8009068 <__malloc_unlock>
 8008b3c:	42a3      	cmp	r3, r4
 8008b3e:	d908      	bls.n	8008b52 <_free_r+0x46>
 8008b40:	6825      	ldr	r5, [r4, #0]
 8008b42:	1961      	adds	r1, r4, r5
 8008b44:	428b      	cmp	r3, r1
 8008b46:	bf01      	itttt	eq
 8008b48:	6819      	ldreq	r1, [r3, #0]
 8008b4a:	685b      	ldreq	r3, [r3, #4]
 8008b4c:	1949      	addeq	r1, r1, r5
 8008b4e:	6021      	streq	r1, [r4, #0]
 8008b50:	e7ed      	b.n	8008b2e <_free_r+0x22>
 8008b52:	461a      	mov	r2, r3
 8008b54:	685b      	ldr	r3, [r3, #4]
 8008b56:	b10b      	cbz	r3, 8008b5c <_free_r+0x50>
 8008b58:	42a3      	cmp	r3, r4
 8008b5a:	d9fa      	bls.n	8008b52 <_free_r+0x46>
 8008b5c:	6811      	ldr	r1, [r2, #0]
 8008b5e:	1855      	adds	r5, r2, r1
 8008b60:	42a5      	cmp	r5, r4
 8008b62:	d10b      	bne.n	8008b7c <_free_r+0x70>
 8008b64:	6824      	ldr	r4, [r4, #0]
 8008b66:	4421      	add	r1, r4
 8008b68:	1854      	adds	r4, r2, r1
 8008b6a:	42a3      	cmp	r3, r4
 8008b6c:	6011      	str	r1, [r2, #0]
 8008b6e:	d1e0      	bne.n	8008b32 <_free_r+0x26>
 8008b70:	681c      	ldr	r4, [r3, #0]
 8008b72:	685b      	ldr	r3, [r3, #4]
 8008b74:	6053      	str	r3, [r2, #4]
 8008b76:	4421      	add	r1, r4
 8008b78:	6011      	str	r1, [r2, #0]
 8008b7a:	e7da      	b.n	8008b32 <_free_r+0x26>
 8008b7c:	d902      	bls.n	8008b84 <_free_r+0x78>
 8008b7e:	230c      	movs	r3, #12
 8008b80:	6003      	str	r3, [r0, #0]
 8008b82:	e7d6      	b.n	8008b32 <_free_r+0x26>
 8008b84:	6825      	ldr	r5, [r4, #0]
 8008b86:	1961      	adds	r1, r4, r5
 8008b88:	428b      	cmp	r3, r1
 8008b8a:	bf04      	itt	eq
 8008b8c:	6819      	ldreq	r1, [r3, #0]
 8008b8e:	685b      	ldreq	r3, [r3, #4]
 8008b90:	6063      	str	r3, [r4, #4]
 8008b92:	bf04      	itt	eq
 8008b94:	1949      	addeq	r1, r1, r5
 8008b96:	6021      	streq	r1, [r4, #0]
 8008b98:	6054      	str	r4, [r2, #4]
 8008b9a:	e7ca      	b.n	8008b32 <_free_r+0x26>
 8008b9c:	b003      	add	sp, #12
 8008b9e:	bd30      	pop	{r4, r5, pc}
 8008ba0:	20000398 	.word	0x20000398

08008ba4 <sbrk_aligned>:
 8008ba4:	b570      	push	{r4, r5, r6, lr}
 8008ba6:	4e0e      	ldr	r6, [pc, #56]	; (8008be0 <sbrk_aligned+0x3c>)
 8008ba8:	460c      	mov	r4, r1
 8008baa:	6831      	ldr	r1, [r6, #0]
 8008bac:	4605      	mov	r5, r0
 8008bae:	b911      	cbnz	r1, 8008bb6 <sbrk_aligned+0x12>
 8008bb0:	f000 f9e8 	bl	8008f84 <_sbrk_r>
 8008bb4:	6030      	str	r0, [r6, #0]
 8008bb6:	4621      	mov	r1, r4
 8008bb8:	4628      	mov	r0, r5
 8008bba:	f000 f9e3 	bl	8008f84 <_sbrk_r>
 8008bbe:	1c43      	adds	r3, r0, #1
 8008bc0:	d00a      	beq.n	8008bd8 <sbrk_aligned+0x34>
 8008bc2:	1cc4      	adds	r4, r0, #3
 8008bc4:	f024 0403 	bic.w	r4, r4, #3
 8008bc8:	42a0      	cmp	r0, r4
 8008bca:	d007      	beq.n	8008bdc <sbrk_aligned+0x38>
 8008bcc:	1a21      	subs	r1, r4, r0
 8008bce:	4628      	mov	r0, r5
 8008bd0:	f000 f9d8 	bl	8008f84 <_sbrk_r>
 8008bd4:	3001      	adds	r0, #1
 8008bd6:	d101      	bne.n	8008bdc <sbrk_aligned+0x38>
 8008bd8:	f04f 34ff 	mov.w	r4, #4294967295
 8008bdc:	4620      	mov	r0, r4
 8008bde:	bd70      	pop	{r4, r5, r6, pc}
 8008be0:	2000039c 	.word	0x2000039c

08008be4 <_malloc_r>:
 8008be4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008be8:	1ccd      	adds	r5, r1, #3
 8008bea:	f025 0503 	bic.w	r5, r5, #3
 8008bee:	3508      	adds	r5, #8
 8008bf0:	2d0c      	cmp	r5, #12
 8008bf2:	bf38      	it	cc
 8008bf4:	250c      	movcc	r5, #12
 8008bf6:	2d00      	cmp	r5, #0
 8008bf8:	4607      	mov	r7, r0
 8008bfa:	db01      	blt.n	8008c00 <_malloc_r+0x1c>
 8008bfc:	42a9      	cmp	r1, r5
 8008bfe:	d905      	bls.n	8008c0c <_malloc_r+0x28>
 8008c00:	230c      	movs	r3, #12
 8008c02:	603b      	str	r3, [r7, #0]
 8008c04:	2600      	movs	r6, #0
 8008c06:	4630      	mov	r0, r6
 8008c08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c0c:	4e2e      	ldr	r6, [pc, #184]	; (8008cc8 <_malloc_r+0xe4>)
 8008c0e:	f000 fa25 	bl	800905c <__malloc_lock>
 8008c12:	6833      	ldr	r3, [r6, #0]
 8008c14:	461c      	mov	r4, r3
 8008c16:	bb34      	cbnz	r4, 8008c66 <_malloc_r+0x82>
 8008c18:	4629      	mov	r1, r5
 8008c1a:	4638      	mov	r0, r7
 8008c1c:	f7ff ffc2 	bl	8008ba4 <sbrk_aligned>
 8008c20:	1c43      	adds	r3, r0, #1
 8008c22:	4604      	mov	r4, r0
 8008c24:	d14d      	bne.n	8008cc2 <_malloc_r+0xde>
 8008c26:	6834      	ldr	r4, [r6, #0]
 8008c28:	4626      	mov	r6, r4
 8008c2a:	2e00      	cmp	r6, #0
 8008c2c:	d140      	bne.n	8008cb0 <_malloc_r+0xcc>
 8008c2e:	6823      	ldr	r3, [r4, #0]
 8008c30:	4631      	mov	r1, r6
 8008c32:	4638      	mov	r0, r7
 8008c34:	eb04 0803 	add.w	r8, r4, r3
 8008c38:	f000 f9a4 	bl	8008f84 <_sbrk_r>
 8008c3c:	4580      	cmp	r8, r0
 8008c3e:	d13a      	bne.n	8008cb6 <_malloc_r+0xd2>
 8008c40:	6821      	ldr	r1, [r4, #0]
 8008c42:	3503      	adds	r5, #3
 8008c44:	1a6d      	subs	r5, r5, r1
 8008c46:	f025 0503 	bic.w	r5, r5, #3
 8008c4a:	3508      	adds	r5, #8
 8008c4c:	2d0c      	cmp	r5, #12
 8008c4e:	bf38      	it	cc
 8008c50:	250c      	movcc	r5, #12
 8008c52:	4629      	mov	r1, r5
 8008c54:	4638      	mov	r0, r7
 8008c56:	f7ff ffa5 	bl	8008ba4 <sbrk_aligned>
 8008c5a:	3001      	adds	r0, #1
 8008c5c:	d02b      	beq.n	8008cb6 <_malloc_r+0xd2>
 8008c5e:	6823      	ldr	r3, [r4, #0]
 8008c60:	442b      	add	r3, r5
 8008c62:	6023      	str	r3, [r4, #0]
 8008c64:	e00e      	b.n	8008c84 <_malloc_r+0xa0>
 8008c66:	6822      	ldr	r2, [r4, #0]
 8008c68:	1b52      	subs	r2, r2, r5
 8008c6a:	d41e      	bmi.n	8008caa <_malloc_r+0xc6>
 8008c6c:	2a0b      	cmp	r2, #11
 8008c6e:	d916      	bls.n	8008c9e <_malloc_r+0xba>
 8008c70:	1961      	adds	r1, r4, r5
 8008c72:	42a3      	cmp	r3, r4
 8008c74:	6025      	str	r5, [r4, #0]
 8008c76:	bf18      	it	ne
 8008c78:	6059      	strne	r1, [r3, #4]
 8008c7a:	6863      	ldr	r3, [r4, #4]
 8008c7c:	bf08      	it	eq
 8008c7e:	6031      	streq	r1, [r6, #0]
 8008c80:	5162      	str	r2, [r4, r5]
 8008c82:	604b      	str	r3, [r1, #4]
 8008c84:	4638      	mov	r0, r7
 8008c86:	f104 060b 	add.w	r6, r4, #11
 8008c8a:	f000 f9ed 	bl	8009068 <__malloc_unlock>
 8008c8e:	f026 0607 	bic.w	r6, r6, #7
 8008c92:	1d23      	adds	r3, r4, #4
 8008c94:	1af2      	subs	r2, r6, r3
 8008c96:	d0b6      	beq.n	8008c06 <_malloc_r+0x22>
 8008c98:	1b9b      	subs	r3, r3, r6
 8008c9a:	50a3      	str	r3, [r4, r2]
 8008c9c:	e7b3      	b.n	8008c06 <_malloc_r+0x22>
 8008c9e:	6862      	ldr	r2, [r4, #4]
 8008ca0:	42a3      	cmp	r3, r4
 8008ca2:	bf0c      	ite	eq
 8008ca4:	6032      	streq	r2, [r6, #0]
 8008ca6:	605a      	strne	r2, [r3, #4]
 8008ca8:	e7ec      	b.n	8008c84 <_malloc_r+0xa0>
 8008caa:	4623      	mov	r3, r4
 8008cac:	6864      	ldr	r4, [r4, #4]
 8008cae:	e7b2      	b.n	8008c16 <_malloc_r+0x32>
 8008cb0:	4634      	mov	r4, r6
 8008cb2:	6876      	ldr	r6, [r6, #4]
 8008cb4:	e7b9      	b.n	8008c2a <_malloc_r+0x46>
 8008cb6:	230c      	movs	r3, #12
 8008cb8:	603b      	str	r3, [r7, #0]
 8008cba:	4638      	mov	r0, r7
 8008cbc:	f000 f9d4 	bl	8009068 <__malloc_unlock>
 8008cc0:	e7a1      	b.n	8008c06 <_malloc_r+0x22>
 8008cc2:	6025      	str	r5, [r4, #0]
 8008cc4:	e7de      	b.n	8008c84 <_malloc_r+0xa0>
 8008cc6:	bf00      	nop
 8008cc8:	20000398 	.word	0x20000398

08008ccc <__ssputs_r>:
 8008ccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cd0:	688e      	ldr	r6, [r1, #8]
 8008cd2:	429e      	cmp	r6, r3
 8008cd4:	4682      	mov	sl, r0
 8008cd6:	460c      	mov	r4, r1
 8008cd8:	4690      	mov	r8, r2
 8008cda:	461f      	mov	r7, r3
 8008cdc:	d838      	bhi.n	8008d50 <__ssputs_r+0x84>
 8008cde:	898a      	ldrh	r2, [r1, #12]
 8008ce0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008ce4:	d032      	beq.n	8008d4c <__ssputs_r+0x80>
 8008ce6:	6825      	ldr	r5, [r4, #0]
 8008ce8:	6909      	ldr	r1, [r1, #16]
 8008cea:	eba5 0901 	sub.w	r9, r5, r1
 8008cee:	6965      	ldr	r5, [r4, #20]
 8008cf0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008cf4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008cf8:	3301      	adds	r3, #1
 8008cfa:	444b      	add	r3, r9
 8008cfc:	106d      	asrs	r5, r5, #1
 8008cfe:	429d      	cmp	r5, r3
 8008d00:	bf38      	it	cc
 8008d02:	461d      	movcc	r5, r3
 8008d04:	0553      	lsls	r3, r2, #21
 8008d06:	d531      	bpl.n	8008d6c <__ssputs_r+0xa0>
 8008d08:	4629      	mov	r1, r5
 8008d0a:	f7ff ff6b 	bl	8008be4 <_malloc_r>
 8008d0e:	4606      	mov	r6, r0
 8008d10:	b950      	cbnz	r0, 8008d28 <__ssputs_r+0x5c>
 8008d12:	230c      	movs	r3, #12
 8008d14:	f8ca 3000 	str.w	r3, [sl]
 8008d18:	89a3      	ldrh	r3, [r4, #12]
 8008d1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d1e:	81a3      	strh	r3, [r4, #12]
 8008d20:	f04f 30ff 	mov.w	r0, #4294967295
 8008d24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d28:	6921      	ldr	r1, [r4, #16]
 8008d2a:	464a      	mov	r2, r9
 8008d2c:	f7ff fb46 	bl	80083bc <memcpy>
 8008d30:	89a3      	ldrh	r3, [r4, #12]
 8008d32:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008d36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d3a:	81a3      	strh	r3, [r4, #12]
 8008d3c:	6126      	str	r6, [r4, #16]
 8008d3e:	6165      	str	r5, [r4, #20]
 8008d40:	444e      	add	r6, r9
 8008d42:	eba5 0509 	sub.w	r5, r5, r9
 8008d46:	6026      	str	r6, [r4, #0]
 8008d48:	60a5      	str	r5, [r4, #8]
 8008d4a:	463e      	mov	r6, r7
 8008d4c:	42be      	cmp	r6, r7
 8008d4e:	d900      	bls.n	8008d52 <__ssputs_r+0x86>
 8008d50:	463e      	mov	r6, r7
 8008d52:	6820      	ldr	r0, [r4, #0]
 8008d54:	4632      	mov	r2, r6
 8008d56:	4641      	mov	r1, r8
 8008d58:	f000 f966 	bl	8009028 <memmove>
 8008d5c:	68a3      	ldr	r3, [r4, #8]
 8008d5e:	1b9b      	subs	r3, r3, r6
 8008d60:	60a3      	str	r3, [r4, #8]
 8008d62:	6823      	ldr	r3, [r4, #0]
 8008d64:	4433      	add	r3, r6
 8008d66:	6023      	str	r3, [r4, #0]
 8008d68:	2000      	movs	r0, #0
 8008d6a:	e7db      	b.n	8008d24 <__ssputs_r+0x58>
 8008d6c:	462a      	mov	r2, r5
 8008d6e:	f000 f981 	bl	8009074 <_realloc_r>
 8008d72:	4606      	mov	r6, r0
 8008d74:	2800      	cmp	r0, #0
 8008d76:	d1e1      	bne.n	8008d3c <__ssputs_r+0x70>
 8008d78:	6921      	ldr	r1, [r4, #16]
 8008d7a:	4650      	mov	r0, sl
 8008d7c:	f7ff fec6 	bl	8008b0c <_free_r>
 8008d80:	e7c7      	b.n	8008d12 <__ssputs_r+0x46>
	...

08008d84 <_svfiprintf_r>:
 8008d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d88:	4698      	mov	r8, r3
 8008d8a:	898b      	ldrh	r3, [r1, #12]
 8008d8c:	061b      	lsls	r3, r3, #24
 8008d8e:	b09d      	sub	sp, #116	; 0x74
 8008d90:	4607      	mov	r7, r0
 8008d92:	460d      	mov	r5, r1
 8008d94:	4614      	mov	r4, r2
 8008d96:	d50e      	bpl.n	8008db6 <_svfiprintf_r+0x32>
 8008d98:	690b      	ldr	r3, [r1, #16]
 8008d9a:	b963      	cbnz	r3, 8008db6 <_svfiprintf_r+0x32>
 8008d9c:	2140      	movs	r1, #64	; 0x40
 8008d9e:	f7ff ff21 	bl	8008be4 <_malloc_r>
 8008da2:	6028      	str	r0, [r5, #0]
 8008da4:	6128      	str	r0, [r5, #16]
 8008da6:	b920      	cbnz	r0, 8008db2 <_svfiprintf_r+0x2e>
 8008da8:	230c      	movs	r3, #12
 8008daa:	603b      	str	r3, [r7, #0]
 8008dac:	f04f 30ff 	mov.w	r0, #4294967295
 8008db0:	e0d1      	b.n	8008f56 <_svfiprintf_r+0x1d2>
 8008db2:	2340      	movs	r3, #64	; 0x40
 8008db4:	616b      	str	r3, [r5, #20]
 8008db6:	2300      	movs	r3, #0
 8008db8:	9309      	str	r3, [sp, #36]	; 0x24
 8008dba:	2320      	movs	r3, #32
 8008dbc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008dc0:	f8cd 800c 	str.w	r8, [sp, #12]
 8008dc4:	2330      	movs	r3, #48	; 0x30
 8008dc6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008f70 <_svfiprintf_r+0x1ec>
 8008dca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008dce:	f04f 0901 	mov.w	r9, #1
 8008dd2:	4623      	mov	r3, r4
 8008dd4:	469a      	mov	sl, r3
 8008dd6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008dda:	b10a      	cbz	r2, 8008de0 <_svfiprintf_r+0x5c>
 8008ddc:	2a25      	cmp	r2, #37	; 0x25
 8008dde:	d1f9      	bne.n	8008dd4 <_svfiprintf_r+0x50>
 8008de0:	ebba 0b04 	subs.w	fp, sl, r4
 8008de4:	d00b      	beq.n	8008dfe <_svfiprintf_r+0x7a>
 8008de6:	465b      	mov	r3, fp
 8008de8:	4622      	mov	r2, r4
 8008dea:	4629      	mov	r1, r5
 8008dec:	4638      	mov	r0, r7
 8008dee:	f7ff ff6d 	bl	8008ccc <__ssputs_r>
 8008df2:	3001      	adds	r0, #1
 8008df4:	f000 80aa 	beq.w	8008f4c <_svfiprintf_r+0x1c8>
 8008df8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008dfa:	445a      	add	r2, fp
 8008dfc:	9209      	str	r2, [sp, #36]	; 0x24
 8008dfe:	f89a 3000 	ldrb.w	r3, [sl]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	f000 80a2 	beq.w	8008f4c <_svfiprintf_r+0x1c8>
 8008e08:	2300      	movs	r3, #0
 8008e0a:	f04f 32ff 	mov.w	r2, #4294967295
 8008e0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e12:	f10a 0a01 	add.w	sl, sl, #1
 8008e16:	9304      	str	r3, [sp, #16]
 8008e18:	9307      	str	r3, [sp, #28]
 8008e1a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008e1e:	931a      	str	r3, [sp, #104]	; 0x68
 8008e20:	4654      	mov	r4, sl
 8008e22:	2205      	movs	r2, #5
 8008e24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e28:	4851      	ldr	r0, [pc, #324]	; (8008f70 <_svfiprintf_r+0x1ec>)
 8008e2a:	f7f7 f9e1 	bl	80001f0 <memchr>
 8008e2e:	9a04      	ldr	r2, [sp, #16]
 8008e30:	b9d8      	cbnz	r0, 8008e6a <_svfiprintf_r+0xe6>
 8008e32:	06d0      	lsls	r0, r2, #27
 8008e34:	bf44      	itt	mi
 8008e36:	2320      	movmi	r3, #32
 8008e38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e3c:	0711      	lsls	r1, r2, #28
 8008e3e:	bf44      	itt	mi
 8008e40:	232b      	movmi	r3, #43	; 0x2b
 8008e42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e46:	f89a 3000 	ldrb.w	r3, [sl]
 8008e4a:	2b2a      	cmp	r3, #42	; 0x2a
 8008e4c:	d015      	beq.n	8008e7a <_svfiprintf_r+0xf6>
 8008e4e:	9a07      	ldr	r2, [sp, #28]
 8008e50:	4654      	mov	r4, sl
 8008e52:	2000      	movs	r0, #0
 8008e54:	f04f 0c0a 	mov.w	ip, #10
 8008e58:	4621      	mov	r1, r4
 8008e5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e5e:	3b30      	subs	r3, #48	; 0x30
 8008e60:	2b09      	cmp	r3, #9
 8008e62:	d94e      	bls.n	8008f02 <_svfiprintf_r+0x17e>
 8008e64:	b1b0      	cbz	r0, 8008e94 <_svfiprintf_r+0x110>
 8008e66:	9207      	str	r2, [sp, #28]
 8008e68:	e014      	b.n	8008e94 <_svfiprintf_r+0x110>
 8008e6a:	eba0 0308 	sub.w	r3, r0, r8
 8008e6e:	fa09 f303 	lsl.w	r3, r9, r3
 8008e72:	4313      	orrs	r3, r2
 8008e74:	9304      	str	r3, [sp, #16]
 8008e76:	46a2      	mov	sl, r4
 8008e78:	e7d2      	b.n	8008e20 <_svfiprintf_r+0x9c>
 8008e7a:	9b03      	ldr	r3, [sp, #12]
 8008e7c:	1d19      	adds	r1, r3, #4
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	9103      	str	r1, [sp, #12]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	bfbb      	ittet	lt
 8008e86:	425b      	neglt	r3, r3
 8008e88:	f042 0202 	orrlt.w	r2, r2, #2
 8008e8c:	9307      	strge	r3, [sp, #28]
 8008e8e:	9307      	strlt	r3, [sp, #28]
 8008e90:	bfb8      	it	lt
 8008e92:	9204      	strlt	r2, [sp, #16]
 8008e94:	7823      	ldrb	r3, [r4, #0]
 8008e96:	2b2e      	cmp	r3, #46	; 0x2e
 8008e98:	d10c      	bne.n	8008eb4 <_svfiprintf_r+0x130>
 8008e9a:	7863      	ldrb	r3, [r4, #1]
 8008e9c:	2b2a      	cmp	r3, #42	; 0x2a
 8008e9e:	d135      	bne.n	8008f0c <_svfiprintf_r+0x188>
 8008ea0:	9b03      	ldr	r3, [sp, #12]
 8008ea2:	1d1a      	adds	r2, r3, #4
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	9203      	str	r2, [sp, #12]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	bfb8      	it	lt
 8008eac:	f04f 33ff 	movlt.w	r3, #4294967295
 8008eb0:	3402      	adds	r4, #2
 8008eb2:	9305      	str	r3, [sp, #20]
 8008eb4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008f80 <_svfiprintf_r+0x1fc>
 8008eb8:	7821      	ldrb	r1, [r4, #0]
 8008eba:	2203      	movs	r2, #3
 8008ebc:	4650      	mov	r0, sl
 8008ebe:	f7f7 f997 	bl	80001f0 <memchr>
 8008ec2:	b140      	cbz	r0, 8008ed6 <_svfiprintf_r+0x152>
 8008ec4:	2340      	movs	r3, #64	; 0x40
 8008ec6:	eba0 000a 	sub.w	r0, r0, sl
 8008eca:	fa03 f000 	lsl.w	r0, r3, r0
 8008ece:	9b04      	ldr	r3, [sp, #16]
 8008ed0:	4303      	orrs	r3, r0
 8008ed2:	3401      	adds	r4, #1
 8008ed4:	9304      	str	r3, [sp, #16]
 8008ed6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008eda:	4826      	ldr	r0, [pc, #152]	; (8008f74 <_svfiprintf_r+0x1f0>)
 8008edc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008ee0:	2206      	movs	r2, #6
 8008ee2:	f7f7 f985 	bl	80001f0 <memchr>
 8008ee6:	2800      	cmp	r0, #0
 8008ee8:	d038      	beq.n	8008f5c <_svfiprintf_r+0x1d8>
 8008eea:	4b23      	ldr	r3, [pc, #140]	; (8008f78 <_svfiprintf_r+0x1f4>)
 8008eec:	bb1b      	cbnz	r3, 8008f36 <_svfiprintf_r+0x1b2>
 8008eee:	9b03      	ldr	r3, [sp, #12]
 8008ef0:	3307      	adds	r3, #7
 8008ef2:	f023 0307 	bic.w	r3, r3, #7
 8008ef6:	3308      	adds	r3, #8
 8008ef8:	9303      	str	r3, [sp, #12]
 8008efa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008efc:	4433      	add	r3, r6
 8008efe:	9309      	str	r3, [sp, #36]	; 0x24
 8008f00:	e767      	b.n	8008dd2 <_svfiprintf_r+0x4e>
 8008f02:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f06:	460c      	mov	r4, r1
 8008f08:	2001      	movs	r0, #1
 8008f0a:	e7a5      	b.n	8008e58 <_svfiprintf_r+0xd4>
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	3401      	adds	r4, #1
 8008f10:	9305      	str	r3, [sp, #20]
 8008f12:	4619      	mov	r1, r3
 8008f14:	f04f 0c0a 	mov.w	ip, #10
 8008f18:	4620      	mov	r0, r4
 8008f1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f1e:	3a30      	subs	r2, #48	; 0x30
 8008f20:	2a09      	cmp	r2, #9
 8008f22:	d903      	bls.n	8008f2c <_svfiprintf_r+0x1a8>
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d0c5      	beq.n	8008eb4 <_svfiprintf_r+0x130>
 8008f28:	9105      	str	r1, [sp, #20]
 8008f2a:	e7c3      	b.n	8008eb4 <_svfiprintf_r+0x130>
 8008f2c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f30:	4604      	mov	r4, r0
 8008f32:	2301      	movs	r3, #1
 8008f34:	e7f0      	b.n	8008f18 <_svfiprintf_r+0x194>
 8008f36:	ab03      	add	r3, sp, #12
 8008f38:	9300      	str	r3, [sp, #0]
 8008f3a:	462a      	mov	r2, r5
 8008f3c:	4b0f      	ldr	r3, [pc, #60]	; (8008f7c <_svfiprintf_r+0x1f8>)
 8008f3e:	a904      	add	r1, sp, #16
 8008f40:	4638      	mov	r0, r7
 8008f42:	f7fd ffcb 	bl	8006edc <_printf_float>
 8008f46:	1c42      	adds	r2, r0, #1
 8008f48:	4606      	mov	r6, r0
 8008f4a:	d1d6      	bne.n	8008efa <_svfiprintf_r+0x176>
 8008f4c:	89ab      	ldrh	r3, [r5, #12]
 8008f4e:	065b      	lsls	r3, r3, #25
 8008f50:	f53f af2c 	bmi.w	8008dac <_svfiprintf_r+0x28>
 8008f54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008f56:	b01d      	add	sp, #116	; 0x74
 8008f58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f5c:	ab03      	add	r3, sp, #12
 8008f5e:	9300      	str	r3, [sp, #0]
 8008f60:	462a      	mov	r2, r5
 8008f62:	4b06      	ldr	r3, [pc, #24]	; (8008f7c <_svfiprintf_r+0x1f8>)
 8008f64:	a904      	add	r1, sp, #16
 8008f66:	4638      	mov	r0, r7
 8008f68:	f7fe fa5c 	bl	8007424 <_printf_i>
 8008f6c:	e7eb      	b.n	8008f46 <_svfiprintf_r+0x1c2>
 8008f6e:	bf00      	nop
 8008f70:	0800ba3c 	.word	0x0800ba3c
 8008f74:	0800ba46 	.word	0x0800ba46
 8008f78:	08006edd 	.word	0x08006edd
 8008f7c:	08008ccd 	.word	0x08008ccd
 8008f80:	0800ba42 	.word	0x0800ba42

08008f84 <_sbrk_r>:
 8008f84:	b538      	push	{r3, r4, r5, lr}
 8008f86:	4d06      	ldr	r5, [pc, #24]	; (8008fa0 <_sbrk_r+0x1c>)
 8008f88:	2300      	movs	r3, #0
 8008f8a:	4604      	mov	r4, r0
 8008f8c:	4608      	mov	r0, r1
 8008f8e:	602b      	str	r3, [r5, #0]
 8008f90:	f7f8 fee2 	bl	8001d58 <_sbrk>
 8008f94:	1c43      	adds	r3, r0, #1
 8008f96:	d102      	bne.n	8008f9e <_sbrk_r+0x1a>
 8008f98:	682b      	ldr	r3, [r5, #0]
 8008f9a:	b103      	cbz	r3, 8008f9e <_sbrk_r+0x1a>
 8008f9c:	6023      	str	r3, [r4, #0]
 8008f9e:	bd38      	pop	{r3, r4, r5, pc}
 8008fa0:	200003a0 	.word	0x200003a0

08008fa4 <__assert_func>:
 8008fa4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008fa6:	4614      	mov	r4, r2
 8008fa8:	461a      	mov	r2, r3
 8008faa:	4b09      	ldr	r3, [pc, #36]	; (8008fd0 <__assert_func+0x2c>)
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	4605      	mov	r5, r0
 8008fb0:	68d8      	ldr	r0, [r3, #12]
 8008fb2:	b14c      	cbz	r4, 8008fc8 <__assert_func+0x24>
 8008fb4:	4b07      	ldr	r3, [pc, #28]	; (8008fd4 <__assert_func+0x30>)
 8008fb6:	9100      	str	r1, [sp, #0]
 8008fb8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008fbc:	4906      	ldr	r1, [pc, #24]	; (8008fd8 <__assert_func+0x34>)
 8008fbe:	462b      	mov	r3, r5
 8008fc0:	f000 f80e 	bl	8008fe0 <fiprintf>
 8008fc4:	f000 faac 	bl	8009520 <abort>
 8008fc8:	4b04      	ldr	r3, [pc, #16]	; (8008fdc <__assert_func+0x38>)
 8008fca:	461c      	mov	r4, r3
 8008fcc:	e7f3      	b.n	8008fb6 <__assert_func+0x12>
 8008fce:	bf00      	nop
 8008fd0:	20000020 	.word	0x20000020
 8008fd4:	0800ba4d 	.word	0x0800ba4d
 8008fd8:	0800ba5a 	.word	0x0800ba5a
 8008fdc:	0800ba88 	.word	0x0800ba88

08008fe0 <fiprintf>:
 8008fe0:	b40e      	push	{r1, r2, r3}
 8008fe2:	b503      	push	{r0, r1, lr}
 8008fe4:	4601      	mov	r1, r0
 8008fe6:	ab03      	add	r3, sp, #12
 8008fe8:	4805      	ldr	r0, [pc, #20]	; (8009000 <fiprintf+0x20>)
 8008fea:	f853 2b04 	ldr.w	r2, [r3], #4
 8008fee:	6800      	ldr	r0, [r0, #0]
 8008ff0:	9301      	str	r3, [sp, #4]
 8008ff2:	f000 f897 	bl	8009124 <_vfiprintf_r>
 8008ff6:	b002      	add	sp, #8
 8008ff8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ffc:	b003      	add	sp, #12
 8008ffe:	4770      	bx	lr
 8009000:	20000020 	.word	0x20000020

08009004 <__ascii_mbtowc>:
 8009004:	b082      	sub	sp, #8
 8009006:	b901      	cbnz	r1, 800900a <__ascii_mbtowc+0x6>
 8009008:	a901      	add	r1, sp, #4
 800900a:	b142      	cbz	r2, 800901e <__ascii_mbtowc+0x1a>
 800900c:	b14b      	cbz	r3, 8009022 <__ascii_mbtowc+0x1e>
 800900e:	7813      	ldrb	r3, [r2, #0]
 8009010:	600b      	str	r3, [r1, #0]
 8009012:	7812      	ldrb	r2, [r2, #0]
 8009014:	1e10      	subs	r0, r2, #0
 8009016:	bf18      	it	ne
 8009018:	2001      	movne	r0, #1
 800901a:	b002      	add	sp, #8
 800901c:	4770      	bx	lr
 800901e:	4610      	mov	r0, r2
 8009020:	e7fb      	b.n	800901a <__ascii_mbtowc+0x16>
 8009022:	f06f 0001 	mvn.w	r0, #1
 8009026:	e7f8      	b.n	800901a <__ascii_mbtowc+0x16>

08009028 <memmove>:
 8009028:	4288      	cmp	r0, r1
 800902a:	b510      	push	{r4, lr}
 800902c:	eb01 0402 	add.w	r4, r1, r2
 8009030:	d902      	bls.n	8009038 <memmove+0x10>
 8009032:	4284      	cmp	r4, r0
 8009034:	4623      	mov	r3, r4
 8009036:	d807      	bhi.n	8009048 <memmove+0x20>
 8009038:	1e43      	subs	r3, r0, #1
 800903a:	42a1      	cmp	r1, r4
 800903c:	d008      	beq.n	8009050 <memmove+0x28>
 800903e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009042:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009046:	e7f8      	b.n	800903a <memmove+0x12>
 8009048:	4402      	add	r2, r0
 800904a:	4601      	mov	r1, r0
 800904c:	428a      	cmp	r2, r1
 800904e:	d100      	bne.n	8009052 <memmove+0x2a>
 8009050:	bd10      	pop	{r4, pc}
 8009052:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009056:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800905a:	e7f7      	b.n	800904c <memmove+0x24>

0800905c <__malloc_lock>:
 800905c:	4801      	ldr	r0, [pc, #4]	; (8009064 <__malloc_lock+0x8>)
 800905e:	f000 bc1f 	b.w	80098a0 <__retarget_lock_acquire_recursive>
 8009062:	bf00      	nop
 8009064:	200003a4 	.word	0x200003a4

08009068 <__malloc_unlock>:
 8009068:	4801      	ldr	r0, [pc, #4]	; (8009070 <__malloc_unlock+0x8>)
 800906a:	f000 bc1a 	b.w	80098a2 <__retarget_lock_release_recursive>
 800906e:	bf00      	nop
 8009070:	200003a4 	.word	0x200003a4

08009074 <_realloc_r>:
 8009074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009078:	4680      	mov	r8, r0
 800907a:	4614      	mov	r4, r2
 800907c:	460e      	mov	r6, r1
 800907e:	b921      	cbnz	r1, 800908a <_realloc_r+0x16>
 8009080:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009084:	4611      	mov	r1, r2
 8009086:	f7ff bdad 	b.w	8008be4 <_malloc_r>
 800908a:	b92a      	cbnz	r2, 8009098 <_realloc_r+0x24>
 800908c:	f7ff fd3e 	bl	8008b0c <_free_r>
 8009090:	4625      	mov	r5, r4
 8009092:	4628      	mov	r0, r5
 8009094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009098:	f000 fc6a 	bl	8009970 <_malloc_usable_size_r>
 800909c:	4284      	cmp	r4, r0
 800909e:	4607      	mov	r7, r0
 80090a0:	d802      	bhi.n	80090a8 <_realloc_r+0x34>
 80090a2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80090a6:	d812      	bhi.n	80090ce <_realloc_r+0x5a>
 80090a8:	4621      	mov	r1, r4
 80090aa:	4640      	mov	r0, r8
 80090ac:	f7ff fd9a 	bl	8008be4 <_malloc_r>
 80090b0:	4605      	mov	r5, r0
 80090b2:	2800      	cmp	r0, #0
 80090b4:	d0ed      	beq.n	8009092 <_realloc_r+0x1e>
 80090b6:	42bc      	cmp	r4, r7
 80090b8:	4622      	mov	r2, r4
 80090ba:	4631      	mov	r1, r6
 80090bc:	bf28      	it	cs
 80090be:	463a      	movcs	r2, r7
 80090c0:	f7ff f97c 	bl	80083bc <memcpy>
 80090c4:	4631      	mov	r1, r6
 80090c6:	4640      	mov	r0, r8
 80090c8:	f7ff fd20 	bl	8008b0c <_free_r>
 80090cc:	e7e1      	b.n	8009092 <_realloc_r+0x1e>
 80090ce:	4635      	mov	r5, r6
 80090d0:	e7df      	b.n	8009092 <_realloc_r+0x1e>

080090d2 <__sfputc_r>:
 80090d2:	6893      	ldr	r3, [r2, #8]
 80090d4:	3b01      	subs	r3, #1
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	b410      	push	{r4}
 80090da:	6093      	str	r3, [r2, #8]
 80090dc:	da08      	bge.n	80090f0 <__sfputc_r+0x1e>
 80090de:	6994      	ldr	r4, [r2, #24]
 80090e0:	42a3      	cmp	r3, r4
 80090e2:	db01      	blt.n	80090e8 <__sfputc_r+0x16>
 80090e4:	290a      	cmp	r1, #10
 80090e6:	d103      	bne.n	80090f0 <__sfputc_r+0x1e>
 80090e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80090ec:	f000 b94a 	b.w	8009384 <__swbuf_r>
 80090f0:	6813      	ldr	r3, [r2, #0]
 80090f2:	1c58      	adds	r0, r3, #1
 80090f4:	6010      	str	r0, [r2, #0]
 80090f6:	7019      	strb	r1, [r3, #0]
 80090f8:	4608      	mov	r0, r1
 80090fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80090fe:	4770      	bx	lr

08009100 <__sfputs_r>:
 8009100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009102:	4606      	mov	r6, r0
 8009104:	460f      	mov	r7, r1
 8009106:	4614      	mov	r4, r2
 8009108:	18d5      	adds	r5, r2, r3
 800910a:	42ac      	cmp	r4, r5
 800910c:	d101      	bne.n	8009112 <__sfputs_r+0x12>
 800910e:	2000      	movs	r0, #0
 8009110:	e007      	b.n	8009122 <__sfputs_r+0x22>
 8009112:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009116:	463a      	mov	r2, r7
 8009118:	4630      	mov	r0, r6
 800911a:	f7ff ffda 	bl	80090d2 <__sfputc_r>
 800911e:	1c43      	adds	r3, r0, #1
 8009120:	d1f3      	bne.n	800910a <__sfputs_r+0xa>
 8009122:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009124 <_vfiprintf_r>:
 8009124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009128:	460d      	mov	r5, r1
 800912a:	b09d      	sub	sp, #116	; 0x74
 800912c:	4614      	mov	r4, r2
 800912e:	4698      	mov	r8, r3
 8009130:	4606      	mov	r6, r0
 8009132:	b118      	cbz	r0, 800913c <_vfiprintf_r+0x18>
 8009134:	6983      	ldr	r3, [r0, #24]
 8009136:	b90b      	cbnz	r3, 800913c <_vfiprintf_r+0x18>
 8009138:	f000 fb14 	bl	8009764 <__sinit>
 800913c:	4b89      	ldr	r3, [pc, #548]	; (8009364 <_vfiprintf_r+0x240>)
 800913e:	429d      	cmp	r5, r3
 8009140:	d11b      	bne.n	800917a <_vfiprintf_r+0x56>
 8009142:	6875      	ldr	r5, [r6, #4]
 8009144:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009146:	07d9      	lsls	r1, r3, #31
 8009148:	d405      	bmi.n	8009156 <_vfiprintf_r+0x32>
 800914a:	89ab      	ldrh	r3, [r5, #12]
 800914c:	059a      	lsls	r2, r3, #22
 800914e:	d402      	bmi.n	8009156 <_vfiprintf_r+0x32>
 8009150:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009152:	f000 fba5 	bl	80098a0 <__retarget_lock_acquire_recursive>
 8009156:	89ab      	ldrh	r3, [r5, #12]
 8009158:	071b      	lsls	r3, r3, #28
 800915a:	d501      	bpl.n	8009160 <_vfiprintf_r+0x3c>
 800915c:	692b      	ldr	r3, [r5, #16]
 800915e:	b9eb      	cbnz	r3, 800919c <_vfiprintf_r+0x78>
 8009160:	4629      	mov	r1, r5
 8009162:	4630      	mov	r0, r6
 8009164:	f000 f96e 	bl	8009444 <__swsetup_r>
 8009168:	b1c0      	cbz	r0, 800919c <_vfiprintf_r+0x78>
 800916a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800916c:	07dc      	lsls	r4, r3, #31
 800916e:	d50e      	bpl.n	800918e <_vfiprintf_r+0x6a>
 8009170:	f04f 30ff 	mov.w	r0, #4294967295
 8009174:	b01d      	add	sp, #116	; 0x74
 8009176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800917a:	4b7b      	ldr	r3, [pc, #492]	; (8009368 <_vfiprintf_r+0x244>)
 800917c:	429d      	cmp	r5, r3
 800917e:	d101      	bne.n	8009184 <_vfiprintf_r+0x60>
 8009180:	68b5      	ldr	r5, [r6, #8]
 8009182:	e7df      	b.n	8009144 <_vfiprintf_r+0x20>
 8009184:	4b79      	ldr	r3, [pc, #484]	; (800936c <_vfiprintf_r+0x248>)
 8009186:	429d      	cmp	r5, r3
 8009188:	bf08      	it	eq
 800918a:	68f5      	ldreq	r5, [r6, #12]
 800918c:	e7da      	b.n	8009144 <_vfiprintf_r+0x20>
 800918e:	89ab      	ldrh	r3, [r5, #12]
 8009190:	0598      	lsls	r0, r3, #22
 8009192:	d4ed      	bmi.n	8009170 <_vfiprintf_r+0x4c>
 8009194:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009196:	f000 fb84 	bl	80098a2 <__retarget_lock_release_recursive>
 800919a:	e7e9      	b.n	8009170 <_vfiprintf_r+0x4c>
 800919c:	2300      	movs	r3, #0
 800919e:	9309      	str	r3, [sp, #36]	; 0x24
 80091a0:	2320      	movs	r3, #32
 80091a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80091a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80091aa:	2330      	movs	r3, #48	; 0x30
 80091ac:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009370 <_vfiprintf_r+0x24c>
 80091b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80091b4:	f04f 0901 	mov.w	r9, #1
 80091b8:	4623      	mov	r3, r4
 80091ba:	469a      	mov	sl, r3
 80091bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80091c0:	b10a      	cbz	r2, 80091c6 <_vfiprintf_r+0xa2>
 80091c2:	2a25      	cmp	r2, #37	; 0x25
 80091c4:	d1f9      	bne.n	80091ba <_vfiprintf_r+0x96>
 80091c6:	ebba 0b04 	subs.w	fp, sl, r4
 80091ca:	d00b      	beq.n	80091e4 <_vfiprintf_r+0xc0>
 80091cc:	465b      	mov	r3, fp
 80091ce:	4622      	mov	r2, r4
 80091d0:	4629      	mov	r1, r5
 80091d2:	4630      	mov	r0, r6
 80091d4:	f7ff ff94 	bl	8009100 <__sfputs_r>
 80091d8:	3001      	adds	r0, #1
 80091da:	f000 80aa 	beq.w	8009332 <_vfiprintf_r+0x20e>
 80091de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80091e0:	445a      	add	r2, fp
 80091e2:	9209      	str	r2, [sp, #36]	; 0x24
 80091e4:	f89a 3000 	ldrb.w	r3, [sl]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	f000 80a2 	beq.w	8009332 <_vfiprintf_r+0x20e>
 80091ee:	2300      	movs	r3, #0
 80091f0:	f04f 32ff 	mov.w	r2, #4294967295
 80091f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80091f8:	f10a 0a01 	add.w	sl, sl, #1
 80091fc:	9304      	str	r3, [sp, #16]
 80091fe:	9307      	str	r3, [sp, #28]
 8009200:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009204:	931a      	str	r3, [sp, #104]	; 0x68
 8009206:	4654      	mov	r4, sl
 8009208:	2205      	movs	r2, #5
 800920a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800920e:	4858      	ldr	r0, [pc, #352]	; (8009370 <_vfiprintf_r+0x24c>)
 8009210:	f7f6 ffee 	bl	80001f0 <memchr>
 8009214:	9a04      	ldr	r2, [sp, #16]
 8009216:	b9d8      	cbnz	r0, 8009250 <_vfiprintf_r+0x12c>
 8009218:	06d1      	lsls	r1, r2, #27
 800921a:	bf44      	itt	mi
 800921c:	2320      	movmi	r3, #32
 800921e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009222:	0713      	lsls	r3, r2, #28
 8009224:	bf44      	itt	mi
 8009226:	232b      	movmi	r3, #43	; 0x2b
 8009228:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800922c:	f89a 3000 	ldrb.w	r3, [sl]
 8009230:	2b2a      	cmp	r3, #42	; 0x2a
 8009232:	d015      	beq.n	8009260 <_vfiprintf_r+0x13c>
 8009234:	9a07      	ldr	r2, [sp, #28]
 8009236:	4654      	mov	r4, sl
 8009238:	2000      	movs	r0, #0
 800923a:	f04f 0c0a 	mov.w	ip, #10
 800923e:	4621      	mov	r1, r4
 8009240:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009244:	3b30      	subs	r3, #48	; 0x30
 8009246:	2b09      	cmp	r3, #9
 8009248:	d94e      	bls.n	80092e8 <_vfiprintf_r+0x1c4>
 800924a:	b1b0      	cbz	r0, 800927a <_vfiprintf_r+0x156>
 800924c:	9207      	str	r2, [sp, #28]
 800924e:	e014      	b.n	800927a <_vfiprintf_r+0x156>
 8009250:	eba0 0308 	sub.w	r3, r0, r8
 8009254:	fa09 f303 	lsl.w	r3, r9, r3
 8009258:	4313      	orrs	r3, r2
 800925a:	9304      	str	r3, [sp, #16]
 800925c:	46a2      	mov	sl, r4
 800925e:	e7d2      	b.n	8009206 <_vfiprintf_r+0xe2>
 8009260:	9b03      	ldr	r3, [sp, #12]
 8009262:	1d19      	adds	r1, r3, #4
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	9103      	str	r1, [sp, #12]
 8009268:	2b00      	cmp	r3, #0
 800926a:	bfbb      	ittet	lt
 800926c:	425b      	neglt	r3, r3
 800926e:	f042 0202 	orrlt.w	r2, r2, #2
 8009272:	9307      	strge	r3, [sp, #28]
 8009274:	9307      	strlt	r3, [sp, #28]
 8009276:	bfb8      	it	lt
 8009278:	9204      	strlt	r2, [sp, #16]
 800927a:	7823      	ldrb	r3, [r4, #0]
 800927c:	2b2e      	cmp	r3, #46	; 0x2e
 800927e:	d10c      	bne.n	800929a <_vfiprintf_r+0x176>
 8009280:	7863      	ldrb	r3, [r4, #1]
 8009282:	2b2a      	cmp	r3, #42	; 0x2a
 8009284:	d135      	bne.n	80092f2 <_vfiprintf_r+0x1ce>
 8009286:	9b03      	ldr	r3, [sp, #12]
 8009288:	1d1a      	adds	r2, r3, #4
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	9203      	str	r2, [sp, #12]
 800928e:	2b00      	cmp	r3, #0
 8009290:	bfb8      	it	lt
 8009292:	f04f 33ff 	movlt.w	r3, #4294967295
 8009296:	3402      	adds	r4, #2
 8009298:	9305      	str	r3, [sp, #20]
 800929a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009380 <_vfiprintf_r+0x25c>
 800929e:	7821      	ldrb	r1, [r4, #0]
 80092a0:	2203      	movs	r2, #3
 80092a2:	4650      	mov	r0, sl
 80092a4:	f7f6 ffa4 	bl	80001f0 <memchr>
 80092a8:	b140      	cbz	r0, 80092bc <_vfiprintf_r+0x198>
 80092aa:	2340      	movs	r3, #64	; 0x40
 80092ac:	eba0 000a 	sub.w	r0, r0, sl
 80092b0:	fa03 f000 	lsl.w	r0, r3, r0
 80092b4:	9b04      	ldr	r3, [sp, #16]
 80092b6:	4303      	orrs	r3, r0
 80092b8:	3401      	adds	r4, #1
 80092ba:	9304      	str	r3, [sp, #16]
 80092bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092c0:	482c      	ldr	r0, [pc, #176]	; (8009374 <_vfiprintf_r+0x250>)
 80092c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80092c6:	2206      	movs	r2, #6
 80092c8:	f7f6 ff92 	bl	80001f0 <memchr>
 80092cc:	2800      	cmp	r0, #0
 80092ce:	d03f      	beq.n	8009350 <_vfiprintf_r+0x22c>
 80092d0:	4b29      	ldr	r3, [pc, #164]	; (8009378 <_vfiprintf_r+0x254>)
 80092d2:	bb1b      	cbnz	r3, 800931c <_vfiprintf_r+0x1f8>
 80092d4:	9b03      	ldr	r3, [sp, #12]
 80092d6:	3307      	adds	r3, #7
 80092d8:	f023 0307 	bic.w	r3, r3, #7
 80092dc:	3308      	adds	r3, #8
 80092de:	9303      	str	r3, [sp, #12]
 80092e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092e2:	443b      	add	r3, r7
 80092e4:	9309      	str	r3, [sp, #36]	; 0x24
 80092e6:	e767      	b.n	80091b8 <_vfiprintf_r+0x94>
 80092e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80092ec:	460c      	mov	r4, r1
 80092ee:	2001      	movs	r0, #1
 80092f0:	e7a5      	b.n	800923e <_vfiprintf_r+0x11a>
 80092f2:	2300      	movs	r3, #0
 80092f4:	3401      	adds	r4, #1
 80092f6:	9305      	str	r3, [sp, #20]
 80092f8:	4619      	mov	r1, r3
 80092fa:	f04f 0c0a 	mov.w	ip, #10
 80092fe:	4620      	mov	r0, r4
 8009300:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009304:	3a30      	subs	r2, #48	; 0x30
 8009306:	2a09      	cmp	r2, #9
 8009308:	d903      	bls.n	8009312 <_vfiprintf_r+0x1ee>
 800930a:	2b00      	cmp	r3, #0
 800930c:	d0c5      	beq.n	800929a <_vfiprintf_r+0x176>
 800930e:	9105      	str	r1, [sp, #20]
 8009310:	e7c3      	b.n	800929a <_vfiprintf_r+0x176>
 8009312:	fb0c 2101 	mla	r1, ip, r1, r2
 8009316:	4604      	mov	r4, r0
 8009318:	2301      	movs	r3, #1
 800931a:	e7f0      	b.n	80092fe <_vfiprintf_r+0x1da>
 800931c:	ab03      	add	r3, sp, #12
 800931e:	9300      	str	r3, [sp, #0]
 8009320:	462a      	mov	r2, r5
 8009322:	4b16      	ldr	r3, [pc, #88]	; (800937c <_vfiprintf_r+0x258>)
 8009324:	a904      	add	r1, sp, #16
 8009326:	4630      	mov	r0, r6
 8009328:	f7fd fdd8 	bl	8006edc <_printf_float>
 800932c:	4607      	mov	r7, r0
 800932e:	1c78      	adds	r0, r7, #1
 8009330:	d1d6      	bne.n	80092e0 <_vfiprintf_r+0x1bc>
 8009332:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009334:	07d9      	lsls	r1, r3, #31
 8009336:	d405      	bmi.n	8009344 <_vfiprintf_r+0x220>
 8009338:	89ab      	ldrh	r3, [r5, #12]
 800933a:	059a      	lsls	r2, r3, #22
 800933c:	d402      	bmi.n	8009344 <_vfiprintf_r+0x220>
 800933e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009340:	f000 faaf 	bl	80098a2 <__retarget_lock_release_recursive>
 8009344:	89ab      	ldrh	r3, [r5, #12]
 8009346:	065b      	lsls	r3, r3, #25
 8009348:	f53f af12 	bmi.w	8009170 <_vfiprintf_r+0x4c>
 800934c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800934e:	e711      	b.n	8009174 <_vfiprintf_r+0x50>
 8009350:	ab03      	add	r3, sp, #12
 8009352:	9300      	str	r3, [sp, #0]
 8009354:	462a      	mov	r2, r5
 8009356:	4b09      	ldr	r3, [pc, #36]	; (800937c <_vfiprintf_r+0x258>)
 8009358:	a904      	add	r1, sp, #16
 800935a:	4630      	mov	r0, r6
 800935c:	f7fe f862 	bl	8007424 <_printf_i>
 8009360:	e7e4      	b.n	800932c <_vfiprintf_r+0x208>
 8009362:	bf00      	nop
 8009364:	0800bbb4 	.word	0x0800bbb4
 8009368:	0800bbd4 	.word	0x0800bbd4
 800936c:	0800bb94 	.word	0x0800bb94
 8009370:	0800ba3c 	.word	0x0800ba3c
 8009374:	0800ba46 	.word	0x0800ba46
 8009378:	08006edd 	.word	0x08006edd
 800937c:	08009101 	.word	0x08009101
 8009380:	0800ba42 	.word	0x0800ba42

08009384 <__swbuf_r>:
 8009384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009386:	460e      	mov	r6, r1
 8009388:	4614      	mov	r4, r2
 800938a:	4605      	mov	r5, r0
 800938c:	b118      	cbz	r0, 8009396 <__swbuf_r+0x12>
 800938e:	6983      	ldr	r3, [r0, #24]
 8009390:	b90b      	cbnz	r3, 8009396 <__swbuf_r+0x12>
 8009392:	f000 f9e7 	bl	8009764 <__sinit>
 8009396:	4b21      	ldr	r3, [pc, #132]	; (800941c <__swbuf_r+0x98>)
 8009398:	429c      	cmp	r4, r3
 800939a:	d12b      	bne.n	80093f4 <__swbuf_r+0x70>
 800939c:	686c      	ldr	r4, [r5, #4]
 800939e:	69a3      	ldr	r3, [r4, #24]
 80093a0:	60a3      	str	r3, [r4, #8]
 80093a2:	89a3      	ldrh	r3, [r4, #12]
 80093a4:	071a      	lsls	r2, r3, #28
 80093a6:	d52f      	bpl.n	8009408 <__swbuf_r+0x84>
 80093a8:	6923      	ldr	r3, [r4, #16]
 80093aa:	b36b      	cbz	r3, 8009408 <__swbuf_r+0x84>
 80093ac:	6923      	ldr	r3, [r4, #16]
 80093ae:	6820      	ldr	r0, [r4, #0]
 80093b0:	1ac0      	subs	r0, r0, r3
 80093b2:	6963      	ldr	r3, [r4, #20]
 80093b4:	b2f6      	uxtb	r6, r6
 80093b6:	4283      	cmp	r3, r0
 80093b8:	4637      	mov	r7, r6
 80093ba:	dc04      	bgt.n	80093c6 <__swbuf_r+0x42>
 80093bc:	4621      	mov	r1, r4
 80093be:	4628      	mov	r0, r5
 80093c0:	f000 f93c 	bl	800963c <_fflush_r>
 80093c4:	bb30      	cbnz	r0, 8009414 <__swbuf_r+0x90>
 80093c6:	68a3      	ldr	r3, [r4, #8]
 80093c8:	3b01      	subs	r3, #1
 80093ca:	60a3      	str	r3, [r4, #8]
 80093cc:	6823      	ldr	r3, [r4, #0]
 80093ce:	1c5a      	adds	r2, r3, #1
 80093d0:	6022      	str	r2, [r4, #0]
 80093d2:	701e      	strb	r6, [r3, #0]
 80093d4:	6963      	ldr	r3, [r4, #20]
 80093d6:	3001      	adds	r0, #1
 80093d8:	4283      	cmp	r3, r0
 80093da:	d004      	beq.n	80093e6 <__swbuf_r+0x62>
 80093dc:	89a3      	ldrh	r3, [r4, #12]
 80093de:	07db      	lsls	r3, r3, #31
 80093e0:	d506      	bpl.n	80093f0 <__swbuf_r+0x6c>
 80093e2:	2e0a      	cmp	r6, #10
 80093e4:	d104      	bne.n	80093f0 <__swbuf_r+0x6c>
 80093e6:	4621      	mov	r1, r4
 80093e8:	4628      	mov	r0, r5
 80093ea:	f000 f927 	bl	800963c <_fflush_r>
 80093ee:	b988      	cbnz	r0, 8009414 <__swbuf_r+0x90>
 80093f0:	4638      	mov	r0, r7
 80093f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80093f4:	4b0a      	ldr	r3, [pc, #40]	; (8009420 <__swbuf_r+0x9c>)
 80093f6:	429c      	cmp	r4, r3
 80093f8:	d101      	bne.n	80093fe <__swbuf_r+0x7a>
 80093fa:	68ac      	ldr	r4, [r5, #8]
 80093fc:	e7cf      	b.n	800939e <__swbuf_r+0x1a>
 80093fe:	4b09      	ldr	r3, [pc, #36]	; (8009424 <__swbuf_r+0xa0>)
 8009400:	429c      	cmp	r4, r3
 8009402:	bf08      	it	eq
 8009404:	68ec      	ldreq	r4, [r5, #12]
 8009406:	e7ca      	b.n	800939e <__swbuf_r+0x1a>
 8009408:	4621      	mov	r1, r4
 800940a:	4628      	mov	r0, r5
 800940c:	f000 f81a 	bl	8009444 <__swsetup_r>
 8009410:	2800      	cmp	r0, #0
 8009412:	d0cb      	beq.n	80093ac <__swbuf_r+0x28>
 8009414:	f04f 37ff 	mov.w	r7, #4294967295
 8009418:	e7ea      	b.n	80093f0 <__swbuf_r+0x6c>
 800941a:	bf00      	nop
 800941c:	0800bbb4 	.word	0x0800bbb4
 8009420:	0800bbd4 	.word	0x0800bbd4
 8009424:	0800bb94 	.word	0x0800bb94

08009428 <__ascii_wctomb>:
 8009428:	b149      	cbz	r1, 800943e <__ascii_wctomb+0x16>
 800942a:	2aff      	cmp	r2, #255	; 0xff
 800942c:	bf85      	ittet	hi
 800942e:	238a      	movhi	r3, #138	; 0x8a
 8009430:	6003      	strhi	r3, [r0, #0]
 8009432:	700a      	strbls	r2, [r1, #0]
 8009434:	f04f 30ff 	movhi.w	r0, #4294967295
 8009438:	bf98      	it	ls
 800943a:	2001      	movls	r0, #1
 800943c:	4770      	bx	lr
 800943e:	4608      	mov	r0, r1
 8009440:	4770      	bx	lr
	...

08009444 <__swsetup_r>:
 8009444:	4b32      	ldr	r3, [pc, #200]	; (8009510 <__swsetup_r+0xcc>)
 8009446:	b570      	push	{r4, r5, r6, lr}
 8009448:	681d      	ldr	r5, [r3, #0]
 800944a:	4606      	mov	r6, r0
 800944c:	460c      	mov	r4, r1
 800944e:	b125      	cbz	r5, 800945a <__swsetup_r+0x16>
 8009450:	69ab      	ldr	r3, [r5, #24]
 8009452:	b913      	cbnz	r3, 800945a <__swsetup_r+0x16>
 8009454:	4628      	mov	r0, r5
 8009456:	f000 f985 	bl	8009764 <__sinit>
 800945a:	4b2e      	ldr	r3, [pc, #184]	; (8009514 <__swsetup_r+0xd0>)
 800945c:	429c      	cmp	r4, r3
 800945e:	d10f      	bne.n	8009480 <__swsetup_r+0x3c>
 8009460:	686c      	ldr	r4, [r5, #4]
 8009462:	89a3      	ldrh	r3, [r4, #12]
 8009464:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009468:	0719      	lsls	r1, r3, #28
 800946a:	d42c      	bmi.n	80094c6 <__swsetup_r+0x82>
 800946c:	06dd      	lsls	r5, r3, #27
 800946e:	d411      	bmi.n	8009494 <__swsetup_r+0x50>
 8009470:	2309      	movs	r3, #9
 8009472:	6033      	str	r3, [r6, #0]
 8009474:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009478:	81a3      	strh	r3, [r4, #12]
 800947a:	f04f 30ff 	mov.w	r0, #4294967295
 800947e:	e03e      	b.n	80094fe <__swsetup_r+0xba>
 8009480:	4b25      	ldr	r3, [pc, #148]	; (8009518 <__swsetup_r+0xd4>)
 8009482:	429c      	cmp	r4, r3
 8009484:	d101      	bne.n	800948a <__swsetup_r+0x46>
 8009486:	68ac      	ldr	r4, [r5, #8]
 8009488:	e7eb      	b.n	8009462 <__swsetup_r+0x1e>
 800948a:	4b24      	ldr	r3, [pc, #144]	; (800951c <__swsetup_r+0xd8>)
 800948c:	429c      	cmp	r4, r3
 800948e:	bf08      	it	eq
 8009490:	68ec      	ldreq	r4, [r5, #12]
 8009492:	e7e6      	b.n	8009462 <__swsetup_r+0x1e>
 8009494:	0758      	lsls	r0, r3, #29
 8009496:	d512      	bpl.n	80094be <__swsetup_r+0x7a>
 8009498:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800949a:	b141      	cbz	r1, 80094ae <__swsetup_r+0x6a>
 800949c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80094a0:	4299      	cmp	r1, r3
 80094a2:	d002      	beq.n	80094aa <__swsetup_r+0x66>
 80094a4:	4630      	mov	r0, r6
 80094a6:	f7ff fb31 	bl	8008b0c <_free_r>
 80094aa:	2300      	movs	r3, #0
 80094ac:	6363      	str	r3, [r4, #52]	; 0x34
 80094ae:	89a3      	ldrh	r3, [r4, #12]
 80094b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80094b4:	81a3      	strh	r3, [r4, #12]
 80094b6:	2300      	movs	r3, #0
 80094b8:	6063      	str	r3, [r4, #4]
 80094ba:	6923      	ldr	r3, [r4, #16]
 80094bc:	6023      	str	r3, [r4, #0]
 80094be:	89a3      	ldrh	r3, [r4, #12]
 80094c0:	f043 0308 	orr.w	r3, r3, #8
 80094c4:	81a3      	strh	r3, [r4, #12]
 80094c6:	6923      	ldr	r3, [r4, #16]
 80094c8:	b94b      	cbnz	r3, 80094de <__swsetup_r+0x9a>
 80094ca:	89a3      	ldrh	r3, [r4, #12]
 80094cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80094d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80094d4:	d003      	beq.n	80094de <__swsetup_r+0x9a>
 80094d6:	4621      	mov	r1, r4
 80094d8:	4630      	mov	r0, r6
 80094da:	f000 fa09 	bl	80098f0 <__smakebuf_r>
 80094de:	89a0      	ldrh	r0, [r4, #12]
 80094e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80094e4:	f010 0301 	ands.w	r3, r0, #1
 80094e8:	d00a      	beq.n	8009500 <__swsetup_r+0xbc>
 80094ea:	2300      	movs	r3, #0
 80094ec:	60a3      	str	r3, [r4, #8]
 80094ee:	6963      	ldr	r3, [r4, #20]
 80094f0:	425b      	negs	r3, r3
 80094f2:	61a3      	str	r3, [r4, #24]
 80094f4:	6923      	ldr	r3, [r4, #16]
 80094f6:	b943      	cbnz	r3, 800950a <__swsetup_r+0xc6>
 80094f8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80094fc:	d1ba      	bne.n	8009474 <__swsetup_r+0x30>
 80094fe:	bd70      	pop	{r4, r5, r6, pc}
 8009500:	0781      	lsls	r1, r0, #30
 8009502:	bf58      	it	pl
 8009504:	6963      	ldrpl	r3, [r4, #20]
 8009506:	60a3      	str	r3, [r4, #8]
 8009508:	e7f4      	b.n	80094f4 <__swsetup_r+0xb0>
 800950a:	2000      	movs	r0, #0
 800950c:	e7f7      	b.n	80094fe <__swsetup_r+0xba>
 800950e:	bf00      	nop
 8009510:	20000020 	.word	0x20000020
 8009514:	0800bbb4 	.word	0x0800bbb4
 8009518:	0800bbd4 	.word	0x0800bbd4
 800951c:	0800bb94 	.word	0x0800bb94

08009520 <abort>:
 8009520:	b508      	push	{r3, lr}
 8009522:	2006      	movs	r0, #6
 8009524:	f000 fa54 	bl	80099d0 <raise>
 8009528:	2001      	movs	r0, #1
 800952a:	f7f8 fb9d 	bl	8001c68 <_exit>
	...

08009530 <__sflush_r>:
 8009530:	898a      	ldrh	r2, [r1, #12]
 8009532:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009536:	4605      	mov	r5, r0
 8009538:	0710      	lsls	r0, r2, #28
 800953a:	460c      	mov	r4, r1
 800953c:	d458      	bmi.n	80095f0 <__sflush_r+0xc0>
 800953e:	684b      	ldr	r3, [r1, #4]
 8009540:	2b00      	cmp	r3, #0
 8009542:	dc05      	bgt.n	8009550 <__sflush_r+0x20>
 8009544:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009546:	2b00      	cmp	r3, #0
 8009548:	dc02      	bgt.n	8009550 <__sflush_r+0x20>
 800954a:	2000      	movs	r0, #0
 800954c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009550:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009552:	2e00      	cmp	r6, #0
 8009554:	d0f9      	beq.n	800954a <__sflush_r+0x1a>
 8009556:	2300      	movs	r3, #0
 8009558:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800955c:	682f      	ldr	r7, [r5, #0]
 800955e:	602b      	str	r3, [r5, #0]
 8009560:	d032      	beq.n	80095c8 <__sflush_r+0x98>
 8009562:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009564:	89a3      	ldrh	r3, [r4, #12]
 8009566:	075a      	lsls	r2, r3, #29
 8009568:	d505      	bpl.n	8009576 <__sflush_r+0x46>
 800956a:	6863      	ldr	r3, [r4, #4]
 800956c:	1ac0      	subs	r0, r0, r3
 800956e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009570:	b10b      	cbz	r3, 8009576 <__sflush_r+0x46>
 8009572:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009574:	1ac0      	subs	r0, r0, r3
 8009576:	2300      	movs	r3, #0
 8009578:	4602      	mov	r2, r0
 800957a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800957c:	6a21      	ldr	r1, [r4, #32]
 800957e:	4628      	mov	r0, r5
 8009580:	47b0      	blx	r6
 8009582:	1c43      	adds	r3, r0, #1
 8009584:	89a3      	ldrh	r3, [r4, #12]
 8009586:	d106      	bne.n	8009596 <__sflush_r+0x66>
 8009588:	6829      	ldr	r1, [r5, #0]
 800958a:	291d      	cmp	r1, #29
 800958c:	d82c      	bhi.n	80095e8 <__sflush_r+0xb8>
 800958e:	4a2a      	ldr	r2, [pc, #168]	; (8009638 <__sflush_r+0x108>)
 8009590:	40ca      	lsrs	r2, r1
 8009592:	07d6      	lsls	r6, r2, #31
 8009594:	d528      	bpl.n	80095e8 <__sflush_r+0xb8>
 8009596:	2200      	movs	r2, #0
 8009598:	6062      	str	r2, [r4, #4]
 800959a:	04d9      	lsls	r1, r3, #19
 800959c:	6922      	ldr	r2, [r4, #16]
 800959e:	6022      	str	r2, [r4, #0]
 80095a0:	d504      	bpl.n	80095ac <__sflush_r+0x7c>
 80095a2:	1c42      	adds	r2, r0, #1
 80095a4:	d101      	bne.n	80095aa <__sflush_r+0x7a>
 80095a6:	682b      	ldr	r3, [r5, #0]
 80095a8:	b903      	cbnz	r3, 80095ac <__sflush_r+0x7c>
 80095aa:	6560      	str	r0, [r4, #84]	; 0x54
 80095ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80095ae:	602f      	str	r7, [r5, #0]
 80095b0:	2900      	cmp	r1, #0
 80095b2:	d0ca      	beq.n	800954a <__sflush_r+0x1a>
 80095b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80095b8:	4299      	cmp	r1, r3
 80095ba:	d002      	beq.n	80095c2 <__sflush_r+0x92>
 80095bc:	4628      	mov	r0, r5
 80095be:	f7ff faa5 	bl	8008b0c <_free_r>
 80095c2:	2000      	movs	r0, #0
 80095c4:	6360      	str	r0, [r4, #52]	; 0x34
 80095c6:	e7c1      	b.n	800954c <__sflush_r+0x1c>
 80095c8:	6a21      	ldr	r1, [r4, #32]
 80095ca:	2301      	movs	r3, #1
 80095cc:	4628      	mov	r0, r5
 80095ce:	47b0      	blx	r6
 80095d0:	1c41      	adds	r1, r0, #1
 80095d2:	d1c7      	bne.n	8009564 <__sflush_r+0x34>
 80095d4:	682b      	ldr	r3, [r5, #0]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d0c4      	beq.n	8009564 <__sflush_r+0x34>
 80095da:	2b1d      	cmp	r3, #29
 80095dc:	d001      	beq.n	80095e2 <__sflush_r+0xb2>
 80095de:	2b16      	cmp	r3, #22
 80095e0:	d101      	bne.n	80095e6 <__sflush_r+0xb6>
 80095e2:	602f      	str	r7, [r5, #0]
 80095e4:	e7b1      	b.n	800954a <__sflush_r+0x1a>
 80095e6:	89a3      	ldrh	r3, [r4, #12]
 80095e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80095ec:	81a3      	strh	r3, [r4, #12]
 80095ee:	e7ad      	b.n	800954c <__sflush_r+0x1c>
 80095f0:	690f      	ldr	r7, [r1, #16]
 80095f2:	2f00      	cmp	r7, #0
 80095f4:	d0a9      	beq.n	800954a <__sflush_r+0x1a>
 80095f6:	0793      	lsls	r3, r2, #30
 80095f8:	680e      	ldr	r6, [r1, #0]
 80095fa:	bf08      	it	eq
 80095fc:	694b      	ldreq	r3, [r1, #20]
 80095fe:	600f      	str	r7, [r1, #0]
 8009600:	bf18      	it	ne
 8009602:	2300      	movne	r3, #0
 8009604:	eba6 0807 	sub.w	r8, r6, r7
 8009608:	608b      	str	r3, [r1, #8]
 800960a:	f1b8 0f00 	cmp.w	r8, #0
 800960e:	dd9c      	ble.n	800954a <__sflush_r+0x1a>
 8009610:	6a21      	ldr	r1, [r4, #32]
 8009612:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009614:	4643      	mov	r3, r8
 8009616:	463a      	mov	r2, r7
 8009618:	4628      	mov	r0, r5
 800961a:	47b0      	blx	r6
 800961c:	2800      	cmp	r0, #0
 800961e:	dc06      	bgt.n	800962e <__sflush_r+0xfe>
 8009620:	89a3      	ldrh	r3, [r4, #12]
 8009622:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009626:	81a3      	strh	r3, [r4, #12]
 8009628:	f04f 30ff 	mov.w	r0, #4294967295
 800962c:	e78e      	b.n	800954c <__sflush_r+0x1c>
 800962e:	4407      	add	r7, r0
 8009630:	eba8 0800 	sub.w	r8, r8, r0
 8009634:	e7e9      	b.n	800960a <__sflush_r+0xda>
 8009636:	bf00      	nop
 8009638:	20400001 	.word	0x20400001

0800963c <_fflush_r>:
 800963c:	b538      	push	{r3, r4, r5, lr}
 800963e:	690b      	ldr	r3, [r1, #16]
 8009640:	4605      	mov	r5, r0
 8009642:	460c      	mov	r4, r1
 8009644:	b913      	cbnz	r3, 800964c <_fflush_r+0x10>
 8009646:	2500      	movs	r5, #0
 8009648:	4628      	mov	r0, r5
 800964a:	bd38      	pop	{r3, r4, r5, pc}
 800964c:	b118      	cbz	r0, 8009656 <_fflush_r+0x1a>
 800964e:	6983      	ldr	r3, [r0, #24]
 8009650:	b90b      	cbnz	r3, 8009656 <_fflush_r+0x1a>
 8009652:	f000 f887 	bl	8009764 <__sinit>
 8009656:	4b14      	ldr	r3, [pc, #80]	; (80096a8 <_fflush_r+0x6c>)
 8009658:	429c      	cmp	r4, r3
 800965a:	d11b      	bne.n	8009694 <_fflush_r+0x58>
 800965c:	686c      	ldr	r4, [r5, #4]
 800965e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d0ef      	beq.n	8009646 <_fflush_r+0xa>
 8009666:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009668:	07d0      	lsls	r0, r2, #31
 800966a:	d404      	bmi.n	8009676 <_fflush_r+0x3a>
 800966c:	0599      	lsls	r1, r3, #22
 800966e:	d402      	bmi.n	8009676 <_fflush_r+0x3a>
 8009670:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009672:	f000 f915 	bl	80098a0 <__retarget_lock_acquire_recursive>
 8009676:	4628      	mov	r0, r5
 8009678:	4621      	mov	r1, r4
 800967a:	f7ff ff59 	bl	8009530 <__sflush_r>
 800967e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009680:	07da      	lsls	r2, r3, #31
 8009682:	4605      	mov	r5, r0
 8009684:	d4e0      	bmi.n	8009648 <_fflush_r+0xc>
 8009686:	89a3      	ldrh	r3, [r4, #12]
 8009688:	059b      	lsls	r3, r3, #22
 800968a:	d4dd      	bmi.n	8009648 <_fflush_r+0xc>
 800968c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800968e:	f000 f908 	bl	80098a2 <__retarget_lock_release_recursive>
 8009692:	e7d9      	b.n	8009648 <_fflush_r+0xc>
 8009694:	4b05      	ldr	r3, [pc, #20]	; (80096ac <_fflush_r+0x70>)
 8009696:	429c      	cmp	r4, r3
 8009698:	d101      	bne.n	800969e <_fflush_r+0x62>
 800969a:	68ac      	ldr	r4, [r5, #8]
 800969c:	e7df      	b.n	800965e <_fflush_r+0x22>
 800969e:	4b04      	ldr	r3, [pc, #16]	; (80096b0 <_fflush_r+0x74>)
 80096a0:	429c      	cmp	r4, r3
 80096a2:	bf08      	it	eq
 80096a4:	68ec      	ldreq	r4, [r5, #12]
 80096a6:	e7da      	b.n	800965e <_fflush_r+0x22>
 80096a8:	0800bbb4 	.word	0x0800bbb4
 80096ac:	0800bbd4 	.word	0x0800bbd4
 80096b0:	0800bb94 	.word	0x0800bb94

080096b4 <std>:
 80096b4:	2300      	movs	r3, #0
 80096b6:	b510      	push	{r4, lr}
 80096b8:	4604      	mov	r4, r0
 80096ba:	e9c0 3300 	strd	r3, r3, [r0]
 80096be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80096c2:	6083      	str	r3, [r0, #8]
 80096c4:	8181      	strh	r1, [r0, #12]
 80096c6:	6643      	str	r3, [r0, #100]	; 0x64
 80096c8:	81c2      	strh	r2, [r0, #14]
 80096ca:	6183      	str	r3, [r0, #24]
 80096cc:	4619      	mov	r1, r3
 80096ce:	2208      	movs	r2, #8
 80096d0:	305c      	adds	r0, #92	; 0x5c
 80096d2:	f7fd fb5b 	bl	8006d8c <memset>
 80096d6:	4b05      	ldr	r3, [pc, #20]	; (80096ec <std+0x38>)
 80096d8:	6263      	str	r3, [r4, #36]	; 0x24
 80096da:	4b05      	ldr	r3, [pc, #20]	; (80096f0 <std+0x3c>)
 80096dc:	62a3      	str	r3, [r4, #40]	; 0x28
 80096de:	4b05      	ldr	r3, [pc, #20]	; (80096f4 <std+0x40>)
 80096e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80096e2:	4b05      	ldr	r3, [pc, #20]	; (80096f8 <std+0x44>)
 80096e4:	6224      	str	r4, [r4, #32]
 80096e6:	6323      	str	r3, [r4, #48]	; 0x30
 80096e8:	bd10      	pop	{r4, pc}
 80096ea:	bf00      	nop
 80096ec:	08009a09 	.word	0x08009a09
 80096f0:	08009a2b 	.word	0x08009a2b
 80096f4:	08009a63 	.word	0x08009a63
 80096f8:	08009a87 	.word	0x08009a87

080096fc <_cleanup_r>:
 80096fc:	4901      	ldr	r1, [pc, #4]	; (8009704 <_cleanup_r+0x8>)
 80096fe:	f000 b8af 	b.w	8009860 <_fwalk_reent>
 8009702:	bf00      	nop
 8009704:	0800963d 	.word	0x0800963d

08009708 <__sfmoreglue>:
 8009708:	b570      	push	{r4, r5, r6, lr}
 800970a:	2268      	movs	r2, #104	; 0x68
 800970c:	1e4d      	subs	r5, r1, #1
 800970e:	4355      	muls	r5, r2
 8009710:	460e      	mov	r6, r1
 8009712:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009716:	f7ff fa65 	bl	8008be4 <_malloc_r>
 800971a:	4604      	mov	r4, r0
 800971c:	b140      	cbz	r0, 8009730 <__sfmoreglue+0x28>
 800971e:	2100      	movs	r1, #0
 8009720:	e9c0 1600 	strd	r1, r6, [r0]
 8009724:	300c      	adds	r0, #12
 8009726:	60a0      	str	r0, [r4, #8]
 8009728:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800972c:	f7fd fb2e 	bl	8006d8c <memset>
 8009730:	4620      	mov	r0, r4
 8009732:	bd70      	pop	{r4, r5, r6, pc}

08009734 <__sfp_lock_acquire>:
 8009734:	4801      	ldr	r0, [pc, #4]	; (800973c <__sfp_lock_acquire+0x8>)
 8009736:	f000 b8b3 	b.w	80098a0 <__retarget_lock_acquire_recursive>
 800973a:	bf00      	nop
 800973c:	200003a5 	.word	0x200003a5

08009740 <__sfp_lock_release>:
 8009740:	4801      	ldr	r0, [pc, #4]	; (8009748 <__sfp_lock_release+0x8>)
 8009742:	f000 b8ae 	b.w	80098a2 <__retarget_lock_release_recursive>
 8009746:	bf00      	nop
 8009748:	200003a5 	.word	0x200003a5

0800974c <__sinit_lock_acquire>:
 800974c:	4801      	ldr	r0, [pc, #4]	; (8009754 <__sinit_lock_acquire+0x8>)
 800974e:	f000 b8a7 	b.w	80098a0 <__retarget_lock_acquire_recursive>
 8009752:	bf00      	nop
 8009754:	200003a6 	.word	0x200003a6

08009758 <__sinit_lock_release>:
 8009758:	4801      	ldr	r0, [pc, #4]	; (8009760 <__sinit_lock_release+0x8>)
 800975a:	f000 b8a2 	b.w	80098a2 <__retarget_lock_release_recursive>
 800975e:	bf00      	nop
 8009760:	200003a6 	.word	0x200003a6

08009764 <__sinit>:
 8009764:	b510      	push	{r4, lr}
 8009766:	4604      	mov	r4, r0
 8009768:	f7ff fff0 	bl	800974c <__sinit_lock_acquire>
 800976c:	69a3      	ldr	r3, [r4, #24]
 800976e:	b11b      	cbz	r3, 8009778 <__sinit+0x14>
 8009770:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009774:	f7ff bff0 	b.w	8009758 <__sinit_lock_release>
 8009778:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800977c:	6523      	str	r3, [r4, #80]	; 0x50
 800977e:	4b13      	ldr	r3, [pc, #76]	; (80097cc <__sinit+0x68>)
 8009780:	4a13      	ldr	r2, [pc, #76]	; (80097d0 <__sinit+0x6c>)
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	62a2      	str	r2, [r4, #40]	; 0x28
 8009786:	42a3      	cmp	r3, r4
 8009788:	bf04      	itt	eq
 800978a:	2301      	moveq	r3, #1
 800978c:	61a3      	streq	r3, [r4, #24]
 800978e:	4620      	mov	r0, r4
 8009790:	f000 f820 	bl	80097d4 <__sfp>
 8009794:	6060      	str	r0, [r4, #4]
 8009796:	4620      	mov	r0, r4
 8009798:	f000 f81c 	bl	80097d4 <__sfp>
 800979c:	60a0      	str	r0, [r4, #8]
 800979e:	4620      	mov	r0, r4
 80097a0:	f000 f818 	bl	80097d4 <__sfp>
 80097a4:	2200      	movs	r2, #0
 80097a6:	60e0      	str	r0, [r4, #12]
 80097a8:	2104      	movs	r1, #4
 80097aa:	6860      	ldr	r0, [r4, #4]
 80097ac:	f7ff ff82 	bl	80096b4 <std>
 80097b0:	68a0      	ldr	r0, [r4, #8]
 80097b2:	2201      	movs	r2, #1
 80097b4:	2109      	movs	r1, #9
 80097b6:	f7ff ff7d 	bl	80096b4 <std>
 80097ba:	68e0      	ldr	r0, [r4, #12]
 80097bc:	2202      	movs	r2, #2
 80097be:	2112      	movs	r1, #18
 80097c0:	f7ff ff78 	bl	80096b4 <std>
 80097c4:	2301      	movs	r3, #1
 80097c6:	61a3      	str	r3, [r4, #24]
 80097c8:	e7d2      	b.n	8009770 <__sinit+0xc>
 80097ca:	bf00      	nop
 80097cc:	0800b818 	.word	0x0800b818
 80097d0:	080096fd 	.word	0x080096fd

080097d4 <__sfp>:
 80097d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097d6:	4607      	mov	r7, r0
 80097d8:	f7ff ffac 	bl	8009734 <__sfp_lock_acquire>
 80097dc:	4b1e      	ldr	r3, [pc, #120]	; (8009858 <__sfp+0x84>)
 80097de:	681e      	ldr	r6, [r3, #0]
 80097e0:	69b3      	ldr	r3, [r6, #24]
 80097e2:	b913      	cbnz	r3, 80097ea <__sfp+0x16>
 80097e4:	4630      	mov	r0, r6
 80097e6:	f7ff ffbd 	bl	8009764 <__sinit>
 80097ea:	3648      	adds	r6, #72	; 0x48
 80097ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80097f0:	3b01      	subs	r3, #1
 80097f2:	d503      	bpl.n	80097fc <__sfp+0x28>
 80097f4:	6833      	ldr	r3, [r6, #0]
 80097f6:	b30b      	cbz	r3, 800983c <__sfp+0x68>
 80097f8:	6836      	ldr	r6, [r6, #0]
 80097fa:	e7f7      	b.n	80097ec <__sfp+0x18>
 80097fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009800:	b9d5      	cbnz	r5, 8009838 <__sfp+0x64>
 8009802:	4b16      	ldr	r3, [pc, #88]	; (800985c <__sfp+0x88>)
 8009804:	60e3      	str	r3, [r4, #12]
 8009806:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800980a:	6665      	str	r5, [r4, #100]	; 0x64
 800980c:	f000 f847 	bl	800989e <__retarget_lock_init_recursive>
 8009810:	f7ff ff96 	bl	8009740 <__sfp_lock_release>
 8009814:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009818:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800981c:	6025      	str	r5, [r4, #0]
 800981e:	61a5      	str	r5, [r4, #24]
 8009820:	2208      	movs	r2, #8
 8009822:	4629      	mov	r1, r5
 8009824:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009828:	f7fd fab0 	bl	8006d8c <memset>
 800982c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009830:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009834:	4620      	mov	r0, r4
 8009836:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009838:	3468      	adds	r4, #104	; 0x68
 800983a:	e7d9      	b.n	80097f0 <__sfp+0x1c>
 800983c:	2104      	movs	r1, #4
 800983e:	4638      	mov	r0, r7
 8009840:	f7ff ff62 	bl	8009708 <__sfmoreglue>
 8009844:	4604      	mov	r4, r0
 8009846:	6030      	str	r0, [r6, #0]
 8009848:	2800      	cmp	r0, #0
 800984a:	d1d5      	bne.n	80097f8 <__sfp+0x24>
 800984c:	f7ff ff78 	bl	8009740 <__sfp_lock_release>
 8009850:	230c      	movs	r3, #12
 8009852:	603b      	str	r3, [r7, #0]
 8009854:	e7ee      	b.n	8009834 <__sfp+0x60>
 8009856:	bf00      	nop
 8009858:	0800b818 	.word	0x0800b818
 800985c:	ffff0001 	.word	0xffff0001

08009860 <_fwalk_reent>:
 8009860:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009864:	4606      	mov	r6, r0
 8009866:	4688      	mov	r8, r1
 8009868:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800986c:	2700      	movs	r7, #0
 800986e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009872:	f1b9 0901 	subs.w	r9, r9, #1
 8009876:	d505      	bpl.n	8009884 <_fwalk_reent+0x24>
 8009878:	6824      	ldr	r4, [r4, #0]
 800987a:	2c00      	cmp	r4, #0
 800987c:	d1f7      	bne.n	800986e <_fwalk_reent+0xe>
 800987e:	4638      	mov	r0, r7
 8009880:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009884:	89ab      	ldrh	r3, [r5, #12]
 8009886:	2b01      	cmp	r3, #1
 8009888:	d907      	bls.n	800989a <_fwalk_reent+0x3a>
 800988a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800988e:	3301      	adds	r3, #1
 8009890:	d003      	beq.n	800989a <_fwalk_reent+0x3a>
 8009892:	4629      	mov	r1, r5
 8009894:	4630      	mov	r0, r6
 8009896:	47c0      	blx	r8
 8009898:	4307      	orrs	r7, r0
 800989a:	3568      	adds	r5, #104	; 0x68
 800989c:	e7e9      	b.n	8009872 <_fwalk_reent+0x12>

0800989e <__retarget_lock_init_recursive>:
 800989e:	4770      	bx	lr

080098a0 <__retarget_lock_acquire_recursive>:
 80098a0:	4770      	bx	lr

080098a2 <__retarget_lock_release_recursive>:
 80098a2:	4770      	bx	lr

080098a4 <__swhatbuf_r>:
 80098a4:	b570      	push	{r4, r5, r6, lr}
 80098a6:	460e      	mov	r6, r1
 80098a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098ac:	2900      	cmp	r1, #0
 80098ae:	b096      	sub	sp, #88	; 0x58
 80098b0:	4614      	mov	r4, r2
 80098b2:	461d      	mov	r5, r3
 80098b4:	da08      	bge.n	80098c8 <__swhatbuf_r+0x24>
 80098b6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80098ba:	2200      	movs	r2, #0
 80098bc:	602a      	str	r2, [r5, #0]
 80098be:	061a      	lsls	r2, r3, #24
 80098c0:	d410      	bmi.n	80098e4 <__swhatbuf_r+0x40>
 80098c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80098c6:	e00e      	b.n	80098e6 <__swhatbuf_r+0x42>
 80098c8:	466a      	mov	r2, sp
 80098ca:	f000 f903 	bl	8009ad4 <_fstat_r>
 80098ce:	2800      	cmp	r0, #0
 80098d0:	dbf1      	blt.n	80098b6 <__swhatbuf_r+0x12>
 80098d2:	9a01      	ldr	r2, [sp, #4]
 80098d4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80098d8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80098dc:	425a      	negs	r2, r3
 80098de:	415a      	adcs	r2, r3
 80098e0:	602a      	str	r2, [r5, #0]
 80098e2:	e7ee      	b.n	80098c2 <__swhatbuf_r+0x1e>
 80098e4:	2340      	movs	r3, #64	; 0x40
 80098e6:	2000      	movs	r0, #0
 80098e8:	6023      	str	r3, [r4, #0]
 80098ea:	b016      	add	sp, #88	; 0x58
 80098ec:	bd70      	pop	{r4, r5, r6, pc}
	...

080098f0 <__smakebuf_r>:
 80098f0:	898b      	ldrh	r3, [r1, #12]
 80098f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80098f4:	079d      	lsls	r5, r3, #30
 80098f6:	4606      	mov	r6, r0
 80098f8:	460c      	mov	r4, r1
 80098fa:	d507      	bpl.n	800990c <__smakebuf_r+0x1c>
 80098fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009900:	6023      	str	r3, [r4, #0]
 8009902:	6123      	str	r3, [r4, #16]
 8009904:	2301      	movs	r3, #1
 8009906:	6163      	str	r3, [r4, #20]
 8009908:	b002      	add	sp, #8
 800990a:	bd70      	pop	{r4, r5, r6, pc}
 800990c:	ab01      	add	r3, sp, #4
 800990e:	466a      	mov	r2, sp
 8009910:	f7ff ffc8 	bl	80098a4 <__swhatbuf_r>
 8009914:	9900      	ldr	r1, [sp, #0]
 8009916:	4605      	mov	r5, r0
 8009918:	4630      	mov	r0, r6
 800991a:	f7ff f963 	bl	8008be4 <_malloc_r>
 800991e:	b948      	cbnz	r0, 8009934 <__smakebuf_r+0x44>
 8009920:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009924:	059a      	lsls	r2, r3, #22
 8009926:	d4ef      	bmi.n	8009908 <__smakebuf_r+0x18>
 8009928:	f023 0303 	bic.w	r3, r3, #3
 800992c:	f043 0302 	orr.w	r3, r3, #2
 8009930:	81a3      	strh	r3, [r4, #12]
 8009932:	e7e3      	b.n	80098fc <__smakebuf_r+0xc>
 8009934:	4b0d      	ldr	r3, [pc, #52]	; (800996c <__smakebuf_r+0x7c>)
 8009936:	62b3      	str	r3, [r6, #40]	; 0x28
 8009938:	89a3      	ldrh	r3, [r4, #12]
 800993a:	6020      	str	r0, [r4, #0]
 800993c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009940:	81a3      	strh	r3, [r4, #12]
 8009942:	9b00      	ldr	r3, [sp, #0]
 8009944:	6163      	str	r3, [r4, #20]
 8009946:	9b01      	ldr	r3, [sp, #4]
 8009948:	6120      	str	r0, [r4, #16]
 800994a:	b15b      	cbz	r3, 8009964 <__smakebuf_r+0x74>
 800994c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009950:	4630      	mov	r0, r6
 8009952:	f000 f8d1 	bl	8009af8 <_isatty_r>
 8009956:	b128      	cbz	r0, 8009964 <__smakebuf_r+0x74>
 8009958:	89a3      	ldrh	r3, [r4, #12]
 800995a:	f023 0303 	bic.w	r3, r3, #3
 800995e:	f043 0301 	orr.w	r3, r3, #1
 8009962:	81a3      	strh	r3, [r4, #12]
 8009964:	89a0      	ldrh	r0, [r4, #12]
 8009966:	4305      	orrs	r5, r0
 8009968:	81a5      	strh	r5, [r4, #12]
 800996a:	e7cd      	b.n	8009908 <__smakebuf_r+0x18>
 800996c:	080096fd 	.word	0x080096fd

08009970 <_malloc_usable_size_r>:
 8009970:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009974:	1f18      	subs	r0, r3, #4
 8009976:	2b00      	cmp	r3, #0
 8009978:	bfbc      	itt	lt
 800997a:	580b      	ldrlt	r3, [r1, r0]
 800997c:	18c0      	addlt	r0, r0, r3
 800997e:	4770      	bx	lr

08009980 <_raise_r>:
 8009980:	291f      	cmp	r1, #31
 8009982:	b538      	push	{r3, r4, r5, lr}
 8009984:	4604      	mov	r4, r0
 8009986:	460d      	mov	r5, r1
 8009988:	d904      	bls.n	8009994 <_raise_r+0x14>
 800998a:	2316      	movs	r3, #22
 800998c:	6003      	str	r3, [r0, #0]
 800998e:	f04f 30ff 	mov.w	r0, #4294967295
 8009992:	bd38      	pop	{r3, r4, r5, pc}
 8009994:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009996:	b112      	cbz	r2, 800999e <_raise_r+0x1e>
 8009998:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800999c:	b94b      	cbnz	r3, 80099b2 <_raise_r+0x32>
 800999e:	4620      	mov	r0, r4
 80099a0:	f000 f830 	bl	8009a04 <_getpid_r>
 80099a4:	462a      	mov	r2, r5
 80099a6:	4601      	mov	r1, r0
 80099a8:	4620      	mov	r0, r4
 80099aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80099ae:	f000 b817 	b.w	80099e0 <_kill_r>
 80099b2:	2b01      	cmp	r3, #1
 80099b4:	d00a      	beq.n	80099cc <_raise_r+0x4c>
 80099b6:	1c59      	adds	r1, r3, #1
 80099b8:	d103      	bne.n	80099c2 <_raise_r+0x42>
 80099ba:	2316      	movs	r3, #22
 80099bc:	6003      	str	r3, [r0, #0]
 80099be:	2001      	movs	r0, #1
 80099c0:	e7e7      	b.n	8009992 <_raise_r+0x12>
 80099c2:	2400      	movs	r4, #0
 80099c4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80099c8:	4628      	mov	r0, r5
 80099ca:	4798      	blx	r3
 80099cc:	2000      	movs	r0, #0
 80099ce:	e7e0      	b.n	8009992 <_raise_r+0x12>

080099d0 <raise>:
 80099d0:	4b02      	ldr	r3, [pc, #8]	; (80099dc <raise+0xc>)
 80099d2:	4601      	mov	r1, r0
 80099d4:	6818      	ldr	r0, [r3, #0]
 80099d6:	f7ff bfd3 	b.w	8009980 <_raise_r>
 80099da:	bf00      	nop
 80099dc:	20000020 	.word	0x20000020

080099e0 <_kill_r>:
 80099e0:	b538      	push	{r3, r4, r5, lr}
 80099e2:	4d07      	ldr	r5, [pc, #28]	; (8009a00 <_kill_r+0x20>)
 80099e4:	2300      	movs	r3, #0
 80099e6:	4604      	mov	r4, r0
 80099e8:	4608      	mov	r0, r1
 80099ea:	4611      	mov	r1, r2
 80099ec:	602b      	str	r3, [r5, #0]
 80099ee:	f7f8 f92b 	bl	8001c48 <_kill>
 80099f2:	1c43      	adds	r3, r0, #1
 80099f4:	d102      	bne.n	80099fc <_kill_r+0x1c>
 80099f6:	682b      	ldr	r3, [r5, #0]
 80099f8:	b103      	cbz	r3, 80099fc <_kill_r+0x1c>
 80099fa:	6023      	str	r3, [r4, #0]
 80099fc:	bd38      	pop	{r3, r4, r5, pc}
 80099fe:	bf00      	nop
 8009a00:	200003a0 	.word	0x200003a0

08009a04 <_getpid_r>:
 8009a04:	f7f8 b918 	b.w	8001c38 <_getpid>

08009a08 <__sread>:
 8009a08:	b510      	push	{r4, lr}
 8009a0a:	460c      	mov	r4, r1
 8009a0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a10:	f000 f894 	bl	8009b3c <_read_r>
 8009a14:	2800      	cmp	r0, #0
 8009a16:	bfab      	itete	ge
 8009a18:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009a1a:	89a3      	ldrhlt	r3, [r4, #12]
 8009a1c:	181b      	addge	r3, r3, r0
 8009a1e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009a22:	bfac      	ite	ge
 8009a24:	6563      	strge	r3, [r4, #84]	; 0x54
 8009a26:	81a3      	strhlt	r3, [r4, #12]
 8009a28:	bd10      	pop	{r4, pc}

08009a2a <__swrite>:
 8009a2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a2e:	461f      	mov	r7, r3
 8009a30:	898b      	ldrh	r3, [r1, #12]
 8009a32:	05db      	lsls	r3, r3, #23
 8009a34:	4605      	mov	r5, r0
 8009a36:	460c      	mov	r4, r1
 8009a38:	4616      	mov	r6, r2
 8009a3a:	d505      	bpl.n	8009a48 <__swrite+0x1e>
 8009a3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a40:	2302      	movs	r3, #2
 8009a42:	2200      	movs	r2, #0
 8009a44:	f000 f868 	bl	8009b18 <_lseek_r>
 8009a48:	89a3      	ldrh	r3, [r4, #12]
 8009a4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a4e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009a52:	81a3      	strh	r3, [r4, #12]
 8009a54:	4632      	mov	r2, r6
 8009a56:	463b      	mov	r3, r7
 8009a58:	4628      	mov	r0, r5
 8009a5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a5e:	f000 b817 	b.w	8009a90 <_write_r>

08009a62 <__sseek>:
 8009a62:	b510      	push	{r4, lr}
 8009a64:	460c      	mov	r4, r1
 8009a66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a6a:	f000 f855 	bl	8009b18 <_lseek_r>
 8009a6e:	1c43      	adds	r3, r0, #1
 8009a70:	89a3      	ldrh	r3, [r4, #12]
 8009a72:	bf15      	itete	ne
 8009a74:	6560      	strne	r0, [r4, #84]	; 0x54
 8009a76:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009a7a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009a7e:	81a3      	strheq	r3, [r4, #12]
 8009a80:	bf18      	it	ne
 8009a82:	81a3      	strhne	r3, [r4, #12]
 8009a84:	bd10      	pop	{r4, pc}

08009a86 <__sclose>:
 8009a86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a8a:	f000 b813 	b.w	8009ab4 <_close_r>
	...

08009a90 <_write_r>:
 8009a90:	b538      	push	{r3, r4, r5, lr}
 8009a92:	4d07      	ldr	r5, [pc, #28]	; (8009ab0 <_write_r+0x20>)
 8009a94:	4604      	mov	r4, r0
 8009a96:	4608      	mov	r0, r1
 8009a98:	4611      	mov	r1, r2
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	602a      	str	r2, [r5, #0]
 8009a9e:	461a      	mov	r2, r3
 8009aa0:	f7f8 f909 	bl	8001cb6 <_write>
 8009aa4:	1c43      	adds	r3, r0, #1
 8009aa6:	d102      	bne.n	8009aae <_write_r+0x1e>
 8009aa8:	682b      	ldr	r3, [r5, #0]
 8009aaa:	b103      	cbz	r3, 8009aae <_write_r+0x1e>
 8009aac:	6023      	str	r3, [r4, #0]
 8009aae:	bd38      	pop	{r3, r4, r5, pc}
 8009ab0:	200003a0 	.word	0x200003a0

08009ab4 <_close_r>:
 8009ab4:	b538      	push	{r3, r4, r5, lr}
 8009ab6:	4d06      	ldr	r5, [pc, #24]	; (8009ad0 <_close_r+0x1c>)
 8009ab8:	2300      	movs	r3, #0
 8009aba:	4604      	mov	r4, r0
 8009abc:	4608      	mov	r0, r1
 8009abe:	602b      	str	r3, [r5, #0]
 8009ac0:	f7f8 f915 	bl	8001cee <_close>
 8009ac4:	1c43      	adds	r3, r0, #1
 8009ac6:	d102      	bne.n	8009ace <_close_r+0x1a>
 8009ac8:	682b      	ldr	r3, [r5, #0]
 8009aca:	b103      	cbz	r3, 8009ace <_close_r+0x1a>
 8009acc:	6023      	str	r3, [r4, #0]
 8009ace:	bd38      	pop	{r3, r4, r5, pc}
 8009ad0:	200003a0 	.word	0x200003a0

08009ad4 <_fstat_r>:
 8009ad4:	b538      	push	{r3, r4, r5, lr}
 8009ad6:	4d07      	ldr	r5, [pc, #28]	; (8009af4 <_fstat_r+0x20>)
 8009ad8:	2300      	movs	r3, #0
 8009ada:	4604      	mov	r4, r0
 8009adc:	4608      	mov	r0, r1
 8009ade:	4611      	mov	r1, r2
 8009ae0:	602b      	str	r3, [r5, #0]
 8009ae2:	f7f8 f910 	bl	8001d06 <_fstat>
 8009ae6:	1c43      	adds	r3, r0, #1
 8009ae8:	d102      	bne.n	8009af0 <_fstat_r+0x1c>
 8009aea:	682b      	ldr	r3, [r5, #0]
 8009aec:	b103      	cbz	r3, 8009af0 <_fstat_r+0x1c>
 8009aee:	6023      	str	r3, [r4, #0]
 8009af0:	bd38      	pop	{r3, r4, r5, pc}
 8009af2:	bf00      	nop
 8009af4:	200003a0 	.word	0x200003a0

08009af8 <_isatty_r>:
 8009af8:	b538      	push	{r3, r4, r5, lr}
 8009afa:	4d06      	ldr	r5, [pc, #24]	; (8009b14 <_isatty_r+0x1c>)
 8009afc:	2300      	movs	r3, #0
 8009afe:	4604      	mov	r4, r0
 8009b00:	4608      	mov	r0, r1
 8009b02:	602b      	str	r3, [r5, #0]
 8009b04:	f7f8 f90f 	bl	8001d26 <_isatty>
 8009b08:	1c43      	adds	r3, r0, #1
 8009b0a:	d102      	bne.n	8009b12 <_isatty_r+0x1a>
 8009b0c:	682b      	ldr	r3, [r5, #0]
 8009b0e:	b103      	cbz	r3, 8009b12 <_isatty_r+0x1a>
 8009b10:	6023      	str	r3, [r4, #0]
 8009b12:	bd38      	pop	{r3, r4, r5, pc}
 8009b14:	200003a0 	.word	0x200003a0

08009b18 <_lseek_r>:
 8009b18:	b538      	push	{r3, r4, r5, lr}
 8009b1a:	4d07      	ldr	r5, [pc, #28]	; (8009b38 <_lseek_r+0x20>)
 8009b1c:	4604      	mov	r4, r0
 8009b1e:	4608      	mov	r0, r1
 8009b20:	4611      	mov	r1, r2
 8009b22:	2200      	movs	r2, #0
 8009b24:	602a      	str	r2, [r5, #0]
 8009b26:	461a      	mov	r2, r3
 8009b28:	f7f8 f908 	bl	8001d3c <_lseek>
 8009b2c:	1c43      	adds	r3, r0, #1
 8009b2e:	d102      	bne.n	8009b36 <_lseek_r+0x1e>
 8009b30:	682b      	ldr	r3, [r5, #0]
 8009b32:	b103      	cbz	r3, 8009b36 <_lseek_r+0x1e>
 8009b34:	6023      	str	r3, [r4, #0]
 8009b36:	bd38      	pop	{r3, r4, r5, pc}
 8009b38:	200003a0 	.word	0x200003a0

08009b3c <_read_r>:
 8009b3c:	b538      	push	{r3, r4, r5, lr}
 8009b3e:	4d07      	ldr	r5, [pc, #28]	; (8009b5c <_read_r+0x20>)
 8009b40:	4604      	mov	r4, r0
 8009b42:	4608      	mov	r0, r1
 8009b44:	4611      	mov	r1, r2
 8009b46:	2200      	movs	r2, #0
 8009b48:	602a      	str	r2, [r5, #0]
 8009b4a:	461a      	mov	r2, r3
 8009b4c:	f7f8 f896 	bl	8001c7c <_read>
 8009b50:	1c43      	adds	r3, r0, #1
 8009b52:	d102      	bne.n	8009b5a <_read_r+0x1e>
 8009b54:	682b      	ldr	r3, [r5, #0]
 8009b56:	b103      	cbz	r3, 8009b5a <_read_r+0x1e>
 8009b58:	6023      	str	r3, [r4, #0]
 8009b5a:	bd38      	pop	{r3, r4, r5, pc}
 8009b5c:	200003a0 	.word	0x200003a0

08009b60 <trunc>:
 8009b60:	ec51 0b10 	vmov	r0, r1, d0
 8009b64:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009b68:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8009b6c:	2b13      	cmp	r3, #19
 8009b6e:	b5d0      	push	{r4, r6, r7, lr}
 8009b70:	460c      	mov	r4, r1
 8009b72:	dc10      	bgt.n	8009b96 <trunc+0x36>
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	bfa5      	ittet	ge
 8009b78:	4a11      	ldrge	r2, [pc, #68]	; (8009bc0 <trunc+0x60>)
 8009b7a:	fa42 f303 	asrge.w	r3, r2, r3
 8009b7e:	2100      	movlt	r1, #0
 8009b80:	2100      	movge	r1, #0
 8009b82:	bfb9      	ittee	lt
 8009b84:	2000      	movlt	r0, #0
 8009b86:	f004 4100 	andlt.w	r1, r4, #2147483648	; 0x80000000
 8009b8a:	2000      	movge	r0, #0
 8009b8c:	ea24 0103 	bicge.w	r1, r4, r3
 8009b90:	ec41 0b10 	vmov	d0, r0, r1
 8009b94:	bdd0      	pop	{r4, r6, r7, pc}
 8009b96:	2b33      	cmp	r3, #51	; 0x33
 8009b98:	dd08      	ble.n	8009bac <trunc+0x4c>
 8009b9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b9e:	d1f7      	bne.n	8009b90 <trunc+0x30>
 8009ba0:	ee10 2a10 	vmov	r2, s0
 8009ba4:	460b      	mov	r3, r1
 8009ba6:	f7f6 fb79 	bl	800029c <__adddf3>
 8009baa:	e7f1      	b.n	8009b90 <trunc+0x30>
 8009bac:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8009bb0:	f04f 33ff 	mov.w	r3, #4294967295
 8009bb4:	fa23 f202 	lsr.w	r2, r3, r2
 8009bb8:	ea20 0602 	bic.w	r6, r0, r2
 8009bbc:	4630      	mov	r0, r6
 8009bbe:	e7e7      	b.n	8009b90 <trunc+0x30>
 8009bc0:	000fffff 	.word	0x000fffff

08009bc4 <ceilf>:
 8009bc4:	ee10 3a10 	vmov	r3, s0
 8009bc8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8009bcc:	3a7f      	subs	r2, #127	; 0x7f
 8009bce:	2a16      	cmp	r2, #22
 8009bd0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009bd4:	dc2a      	bgt.n	8009c2c <ceilf+0x68>
 8009bd6:	2a00      	cmp	r2, #0
 8009bd8:	da11      	bge.n	8009bfe <ceilf+0x3a>
 8009bda:	eddf 7a19 	vldr	s15, [pc, #100]	; 8009c40 <ceilf+0x7c>
 8009bde:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009be2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009be6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bea:	dd05      	ble.n	8009bf8 <ceilf+0x34>
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	db23      	blt.n	8009c38 <ceilf+0x74>
 8009bf0:	2900      	cmp	r1, #0
 8009bf2:	bf18      	it	ne
 8009bf4:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 8009bf8:	ee00 3a10 	vmov	s0, r3
 8009bfc:	4770      	bx	lr
 8009bfe:	4911      	ldr	r1, [pc, #68]	; (8009c44 <ceilf+0x80>)
 8009c00:	4111      	asrs	r1, r2
 8009c02:	420b      	tst	r3, r1
 8009c04:	d0fa      	beq.n	8009bfc <ceilf+0x38>
 8009c06:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8009c40 <ceilf+0x7c>
 8009c0a:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009c0e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009c12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c16:	ddef      	ble.n	8009bf8 <ceilf+0x34>
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	bfc2      	ittt	gt
 8009c1c:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 8009c20:	fa40 f202 	asrgt.w	r2, r0, r2
 8009c24:	189b      	addgt	r3, r3, r2
 8009c26:	ea23 0301 	bic.w	r3, r3, r1
 8009c2a:	e7e5      	b.n	8009bf8 <ceilf+0x34>
 8009c2c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8009c30:	d3e4      	bcc.n	8009bfc <ceilf+0x38>
 8009c32:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009c36:	4770      	bx	lr
 8009c38:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009c3c:	e7dc      	b.n	8009bf8 <ceilf+0x34>
 8009c3e:	bf00      	nop
 8009c40:	7149f2ca 	.word	0x7149f2ca
 8009c44:	007fffff 	.word	0x007fffff

08009c48 <_init>:
 8009c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c4a:	bf00      	nop
 8009c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c4e:	bc08      	pop	{r3}
 8009c50:	469e      	mov	lr, r3
 8009c52:	4770      	bx	lr

08009c54 <_fini>:
 8009c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c56:	bf00      	nop
 8009c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c5a:	bc08      	pop	{r3}
 8009c5c:	469e      	mov	lr, r3
 8009c5e:	4770      	bx	lr
