
F411_Verita_Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fbc0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0002d8a4  0800fd60  0800fd60  0001fd60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0803d604  0803d604  00050420  2**0
                  CONTENTS
  4 .ARM          00000008  0803d604  0803d604  0004d604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0803d60c  0803d60c  00050420  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0803d60c  0803d60c  0004d60c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0803d610  0803d610  0004d610  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000420  20000000  0803d614  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004b8  20000420  0803da34  00050420  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200008d8  0803da34  000508d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00050420  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018b9b  00000000  00000000  00050450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003376  00000000  00000000  00068feb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015b0  00000000  00000000  0006c368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001430  00000000  00000000  0006d918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a32a  00000000  00000000  0006ed48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001af80  00000000  00000000  00089072  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a46b  00000000  00000000  000a3ff2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013e45d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006cfc  00000000  00000000  0013e4b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000420 	.word	0x20000420
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800fd48 	.word	0x0800fd48

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000424 	.word	0x20000424
 80001dc:	0800fd48 	.word	0x0800fd48

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b974 	b.w	8000f98 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468e      	mov	lr, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14d      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4694      	mov	ip, r2
 8000cda:	d969      	bls.n	8000db0 <__udivmoddi4+0xe8>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b152      	cbz	r2, 8000cf8 <__udivmoddi4+0x30>
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	f1c2 0120 	rsb	r1, r2, #32
 8000cea:	fa20 f101 	lsr.w	r1, r0, r1
 8000cee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cf6:	4094      	lsls	r4, r2
 8000cf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cfc:	0c21      	lsrs	r1, r4, #16
 8000cfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000d02:	fa1f f78c 	uxth.w	r7, ip
 8000d06:	fb08 e316 	mls	r3, r8, r6, lr
 8000d0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d0e:	fb06 f107 	mul.w	r1, r6, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1e:	f080 811f 	bcs.w	8000f60 <__udivmoddi4+0x298>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 811c 	bls.w	8000f60 <__udivmoddi4+0x298>
 8000d28:	3e02      	subs	r6, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a5b      	subs	r3, r3, r1
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d34:	fb08 3310 	mls	r3, r8, r0, r3
 8000d38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d3c:	fb00 f707 	mul.w	r7, r0, r7
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x92>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4c:	f080 810a 	bcs.w	8000f64 <__udivmoddi4+0x29c>
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	f240 8107 	bls.w	8000f64 <__udivmoddi4+0x29c>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5e:	1be4      	subs	r4, r4, r7
 8000d60:	2600      	movs	r6, #0
 8000d62:	b11d      	cbz	r5, 8000d6c <__udivmoddi4+0xa4>
 8000d64:	40d4      	lsrs	r4, r2
 8000d66:	2300      	movs	r3, #0
 8000d68:	e9c5 4300 	strd	r4, r3, [r5]
 8000d6c:	4631      	mov	r1, r6
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0xc2>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	f000 80ef 	beq.w	8000f5a <__udivmoddi4+0x292>
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d82:	4630      	mov	r0, r6
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f683 	clz	r6, r3
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	d14a      	bne.n	8000e28 <__udivmoddi4+0x160>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xd4>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80f9 	bhi.w	8000f8e <__udivmoddi4+0x2c6>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	469e      	mov	lr, r3
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d0e0      	beq.n	8000d6c <__udivmoddi4+0xa4>
 8000daa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dae:	e7dd      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000db0:	b902      	cbnz	r2, 8000db4 <__udivmoddi4+0xec>
 8000db2:	deff      	udf	#255	; 0xff
 8000db4:	fab2 f282 	clz	r2, r2
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	f040 8092 	bne.w	8000ee2 <__udivmoddi4+0x21a>
 8000dbe:	eba1 010c 	sub.w	r1, r1, ip
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f fe8c 	uxth.w	lr, ip
 8000dca:	2601      	movs	r6, #1
 8000dcc:	0c20      	lsrs	r0, r4, #16
 8000dce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dda:	fb0e f003 	mul.w	r0, lr, r3
 8000dde:	4288      	cmp	r0, r1
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x12c>
 8000de2:	eb1c 0101 	adds.w	r1, ip, r1
 8000de6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x12a>
 8000dec:	4288      	cmp	r0, r1
 8000dee:	f200 80cb 	bhi.w	8000f88 <__udivmoddi4+0x2c0>
 8000df2:	4643      	mov	r3, r8
 8000df4:	1a09      	subs	r1, r1, r0
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000e00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e04:	fb0e fe00 	mul.w	lr, lr, r0
 8000e08:	45a6      	cmp	lr, r4
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x156>
 8000e0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e14:	d202      	bcs.n	8000e1c <__udivmoddi4+0x154>
 8000e16:	45a6      	cmp	lr, r4
 8000e18:	f200 80bb 	bhi.w	8000f92 <__udivmoddi4+0x2ca>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	eba4 040e 	sub.w	r4, r4, lr
 8000e22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e26:	e79c      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000e28:	f1c6 0720 	rsb	r7, r6, #32
 8000e2c:	40b3      	lsls	r3, r6
 8000e2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e36:	fa20 f407 	lsr.w	r4, r0, r7
 8000e3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3e:	431c      	orrs	r4, r3
 8000e40:	40f9      	lsrs	r1, r7
 8000e42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e46:	fa00 f306 	lsl.w	r3, r0, r6
 8000e4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e4e:	0c20      	lsrs	r0, r4, #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fb09 1118 	mls	r1, r9, r8, r1
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e60:	4288      	cmp	r0, r1
 8000e62:	fa02 f206 	lsl.w	r2, r2, r6
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x1b8>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e70:	f080 8088 	bcs.w	8000f84 <__udivmoddi4+0x2bc>
 8000e74:	4288      	cmp	r0, r1
 8000e76:	f240 8085 	bls.w	8000f84 <__udivmoddi4+0x2bc>
 8000e7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e88:	fb09 1110 	mls	r1, r9, r0, r1
 8000e8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e94:	458e      	cmp	lr, r1
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x1e2>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea0:	d26c      	bcs.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea2:	458e      	cmp	lr, r1
 8000ea4:	d96a      	bls.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4461      	add	r1, ip
 8000eaa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eae:	fba0 9402 	umull	r9, r4, r0, r2
 8000eb2:	eba1 010e 	sub.w	r1, r1, lr
 8000eb6:	42a1      	cmp	r1, r4
 8000eb8:	46c8      	mov	r8, r9
 8000eba:	46a6      	mov	lr, r4
 8000ebc:	d356      	bcc.n	8000f6c <__udivmoddi4+0x2a4>
 8000ebe:	d053      	beq.n	8000f68 <__udivmoddi4+0x2a0>
 8000ec0:	b15d      	cbz	r5, 8000eda <__udivmoddi4+0x212>
 8000ec2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ec6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eca:	fa01 f707 	lsl.w	r7, r1, r7
 8000ece:	fa22 f306 	lsr.w	r3, r2, r6
 8000ed2:	40f1      	lsrs	r1, r6
 8000ed4:	431f      	orrs	r7, r3
 8000ed6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eda:	2600      	movs	r6, #0
 8000edc:	4631      	mov	r1, r6
 8000ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee2:	f1c2 0320 	rsb	r3, r2, #32
 8000ee6:	40d8      	lsrs	r0, r3
 8000ee8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eec:	fa21 f303 	lsr.w	r3, r1, r3
 8000ef0:	4091      	lsls	r1, r2
 8000ef2:	4301      	orrs	r1, r0
 8000ef4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef8:	fa1f fe8c 	uxth.w	lr, ip
 8000efc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f00:	fb07 3610 	mls	r6, r7, r0, r3
 8000f04:	0c0b      	lsrs	r3, r1, #16
 8000f06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f0e:	429e      	cmp	r6, r3
 8000f10:	fa04 f402 	lsl.w	r4, r4, r2
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x260>
 8000f16:	eb1c 0303 	adds.w	r3, ip, r3
 8000f1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f1e:	d22f      	bcs.n	8000f80 <__udivmoddi4+0x2b8>
 8000f20:	429e      	cmp	r6, r3
 8000f22:	d92d      	bls.n	8000f80 <__udivmoddi4+0x2b8>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4463      	add	r3, ip
 8000f28:	1b9b      	subs	r3, r3, r6
 8000f2a:	b289      	uxth	r1, r1
 8000f2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f30:	fb07 3316 	mls	r3, r7, r6, r3
 8000f34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f38:	fb06 f30e 	mul.w	r3, r6, lr
 8000f3c:	428b      	cmp	r3, r1
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x28a>
 8000f40:	eb1c 0101 	adds.w	r1, ip, r1
 8000f44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f48:	d216      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d914      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4e:	3e02      	subs	r6, #2
 8000f50:	4461      	add	r1, ip
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f58:	e738      	b.n	8000dcc <__udivmoddi4+0x104>
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e705      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e3      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6f8      	b.n	8000d5a <__udivmoddi4+0x92>
 8000f68:	454b      	cmp	r3, r9
 8000f6a:	d2a9      	bcs.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7a3      	b.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f78:	4646      	mov	r6, r8
 8000f7a:	e7ea      	b.n	8000f52 <__udivmoddi4+0x28a>
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	e794      	b.n	8000eaa <__udivmoddi4+0x1e2>
 8000f80:	4640      	mov	r0, r8
 8000f82:	e7d1      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f84:	46d0      	mov	r8, sl
 8000f86:	e77b      	b.n	8000e80 <__udivmoddi4+0x1b8>
 8000f88:	3b02      	subs	r3, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	e732      	b.n	8000df4 <__udivmoddi4+0x12c>
 8000f8e:	4630      	mov	r0, r6
 8000f90:	e709      	b.n	8000da6 <__udivmoddi4+0xde>
 8000f92:	4464      	add	r4, ip
 8000f94:	3802      	subs	r0, #2
 8000f96:	e742      	b.n	8000e1e <__udivmoddi4+0x156>

08000f98 <__aeabi_idiv0>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	0000      	movs	r0, r0
	...

08000fa0 <INA219_INIT_Calibrate>:
	HAL_I2C_Mem_Write(hi2c, dv_addr, INA219_RG_Config, I2C_MEMADD_SIZE_8BIT, &resetx, 2, 10);

}

INA219_Conf_Strc configura;
void INA219_INIT_Calibrate(I2C_HandleTypeDef *hi2c,uint8_t dv_addr){
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b08a      	sub	sp, #40	; 0x28
 8000fa4:	af04      	add	r7, sp, #16
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	460b      	mov	r3, r1
 8000faa:	70fb      	strb	r3, [r7, #3]
	 * @param : hi2c - HAL_I2C used to read
	 * @param : dv_addr - address of INA219 device in the busline
	 * */

	////// -------------------- Configuration -------------------------------------
	configura.INA219CF.reset = 0;
 8000fac:	4a52      	ldr	r2, [pc, #328]	; (80010f8 <INA219_INIT_Calibrate+0x158>)
 8000fae:	7853      	ldrb	r3, [r2, #1]
 8000fb0:	f36f 13c7 	bfc	r3, #7, #1
 8000fb4:	7053      	strb	r3, [r2, #1]
	configura.INA219CF.BRNG = BRNG_FSR_32V;
 8000fb6:	4a50      	ldr	r2, [pc, #320]	; (80010f8 <INA219_INIT_Calibrate+0x158>)
 8000fb8:	7853      	ldrb	r3, [r2, #1]
 8000fba:	f043 0320 	orr.w	r3, r3, #32
 8000fbe:	7053      	strb	r3, [r2, #1]
	configura.INA219CF.PGA = PGA_GainD4_160mv;
 8000fc0:	4a4d      	ldr	r2, [pc, #308]	; (80010f8 <INA219_INIT_Calibrate+0x158>)
 8000fc2:	7853      	ldrb	r3, [r2, #1]
 8000fc4:	2102      	movs	r1, #2
 8000fc6:	f361 03c4 	bfi	r3, r1, #3, #2
 8000fca:	7053      	strb	r3, [r2, #1]
	configura.INA219CF.BADC = ADCI_12bit_532uS;
 8000fcc:	4a4a      	ldr	r2, [pc, #296]	; (80010f8 <INA219_INIT_Calibrate+0x158>)
 8000fce:	8813      	ldrh	r3, [r2, #0]
 8000fd0:	2103      	movs	r1, #3
 8000fd2:	f361 13ca 	bfi	r3, r1, #7, #4
 8000fd6:	8013      	strh	r3, [r2, #0]
	configura.INA219CF.SADC = ADCI_12bit_532uS;
 8000fd8:	4a47      	ldr	r2, [pc, #284]	; (80010f8 <INA219_INIT_Calibrate+0x158>)
 8000fda:	7813      	ldrb	r3, [r2, #0]
 8000fdc:	2103      	movs	r1, #3
 8000fde:	f361 03c6 	bfi	r3, r1, #3, #4
 8000fe2:	7013      	strb	r3, [r2, #0]
	configura.INA219CF.Mode = INAM_ShuntBusV_Continuous;
 8000fe4:	4a44      	ldr	r2, [pc, #272]	; (80010f8 <INA219_INIT_Calibrate+0x158>)
 8000fe6:	7813      	ldrb	r3, [r2, #0]
 8000fe8:	f043 0307 	orr.w	r3, r3, #7
 8000fec:	7013      	strb	r3, [r2, #0]

	uint8_t confictor_si2c[2] = {configura.D8[1], configura.D8[0]};
 8000fee:	4b42      	ldr	r3, [pc, #264]	; (80010f8 <INA219_INIT_Calibrate+0x158>)
 8000ff0:	785b      	ldrb	r3, [r3, #1]
 8000ff2:	753b      	strb	r3, [r7, #20]
 8000ff4:	4b40      	ldr	r3, [pc, #256]	; (80010f8 <INA219_INIT_Calibrate+0x158>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	757b      	strb	r3, [r7, #21]
	HAL_I2C_Mem_Write(hi2c, dv_addr, INA219_RG_Config, I2C_MEMADD_SIZE_8BIT, &confictor_si2c[0], 2, 10);
 8000ffa:	78fb      	ldrb	r3, [r7, #3]
 8000ffc:	b299      	uxth	r1, r3
 8000ffe:	230a      	movs	r3, #10
 8001000:	9302      	str	r3, [sp, #8]
 8001002:	2302      	movs	r3, #2
 8001004:	9301      	str	r3, [sp, #4]
 8001006:	f107 0314 	add.w	r3, r7, #20
 800100a:	9300      	str	r3, [sp, #0]
 800100c:	2301      	movs	r3, #1
 800100e:	2200      	movs	r2, #0
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f006 fd09 	bl	8007a28 <HAL_I2C_Mem_Write>
		uint16_t U16;
	}calibrator;

	// float current_LSB = INA219_MAX_Expect_Current / 32768.0; // 2^15
	//calibrator.U16 = (int16_t)(trunc( 0.04096 / (current_LSB * INA219_R_SHUNT_Val))) << 1;
	calibrator.U16 = trunc( 0.04096 / (current_LSB * INA219_R_SHUNT_Val));
 8001016:	4b39      	ldr	r3, [pc, #228]	; (80010fc <INA219_INIT_Calibrate+0x15c>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4618      	mov	r0, r3
 800101c:	f7ff fa9c 	bl	8000558 <__aeabi_f2d>
 8001020:	a32d      	add	r3, pc, #180	; (adr r3, 80010d8 <INA219_INIT_Calibrate+0x138>)
 8001022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001026:	f7ff faef 	bl	8000608 <__aeabi_dmul>
 800102a:	4602      	mov	r2, r0
 800102c:	460b      	mov	r3, r1
 800102e:	a12c      	add	r1, pc, #176	; (adr r1, 80010e0 <INA219_INIT_Calibrate+0x140>)
 8001030:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001034:	f7ff fc12 	bl	800085c <__aeabi_ddiv>
 8001038:	4602      	mov	r2, r0
 800103a:	460b      	mov	r3, r1
 800103c:	ec43 2b17 	vmov	d7, r2, r3
 8001040:	eeb0 0a47 	vmov.f32	s0, s14
 8001044:	eef0 0a67 	vmov.f32	s1, s15
 8001048:	f00e fe0a 	bl	800fc60 <trunc>
 800104c:	ec53 2b10 	vmov	r2, r3, d0
 8001050:	4610      	mov	r0, r2
 8001052:	4619      	mov	r1, r3
 8001054:	f7ff fdb0 	bl	8000bb8 <__aeabi_d2uiz>
 8001058:	4603      	mov	r3, r0
 800105a:	b29b      	uxth	r3, r3
 800105c:	823b      	strh	r3, [r7, #16]
#ifdef calibrate_EQ6
	calibrator.U16 = trunc((calibrator.U16 * MeaShuntCurrent_ExtMeter) / INA219_Current_Raw);
 800105e:	8a3b      	ldrh	r3, [r7, #16]
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff fa67 	bl	8000534 <__aeabi_i2d>
 8001066:	a320      	add	r3, pc, #128	; (adr r3, 80010e8 <INA219_INIT_Calibrate+0x148>)
 8001068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800106c:	f7ff facc 	bl	8000608 <__aeabi_dmul>
 8001070:	4602      	mov	r2, r0
 8001072:	460b      	mov	r3, r1
 8001074:	4610      	mov	r0, r2
 8001076:	4619      	mov	r1, r3
 8001078:	a31d      	add	r3, pc, #116	; (adr r3, 80010f0 <INA219_INIT_Calibrate+0x150>)
 800107a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800107e:	f7ff fbed 	bl	800085c <__aeabi_ddiv>
 8001082:	4602      	mov	r2, r0
 8001084:	460b      	mov	r3, r1
 8001086:	ec43 2b17 	vmov	d7, r2, r3
 800108a:	eeb0 0a47 	vmov.f32	s0, s14
 800108e:	eef0 0a67 	vmov.f32	s1, s15
 8001092:	f00e fde5 	bl	800fc60 <trunc>
 8001096:	ec53 2b10 	vmov	r2, r3, d0
 800109a:	4610      	mov	r0, r2
 800109c:	4619      	mov	r1, r3
 800109e:	f7ff fd8b 	bl	8000bb8 <__aeabi_d2uiz>
 80010a2:	4603      	mov	r3, r0
 80010a4:	b29b      	uxth	r3, r3
 80010a6:	823b      	strh	r3, [r7, #16]
#endif
	uint8_t calibrator_si2c[2] = {calibrator.U8[1], calibrator.U8[0]}; //// switch byte to send high order first in I2C
 80010a8:	7c7b      	ldrb	r3, [r7, #17]
 80010aa:	733b      	strb	r3, [r7, #12]
 80010ac:	7c3b      	ldrb	r3, [r7, #16]
 80010ae:	737b      	strb	r3, [r7, #13]
	////  ex calibrator(I = 3A, 0.1Rshunt) = 4473 = 0x1179

	HAL_I2C_Mem_Write(hi2c, dv_addr, INA219_RG_Calibra, I2C_MEMADD_SIZE_8BIT, &calibrator_si2c[0], 2, 10);
 80010b0:	78fb      	ldrb	r3, [r7, #3]
 80010b2:	b299      	uxth	r1, r3
 80010b4:	230a      	movs	r3, #10
 80010b6:	9302      	str	r3, [sp, #8]
 80010b8:	2302      	movs	r3, #2
 80010ba:	9301      	str	r3, [sp, #4]
 80010bc:	f107 030c 	add.w	r3, r7, #12
 80010c0:	9300      	str	r3, [sp, #0]
 80010c2:	2301      	movs	r3, #1
 80010c4:	2205      	movs	r2, #5
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f006 fcae 	bl	8007a28 <HAL_I2C_Mem_Write>

}
 80010cc:	bf00      	nop
 80010ce:	3718      	adds	r7, #24
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	f3af 8000 	nop.w
 80010d8:	9999999a 	.word	0x9999999a
 80010dc:	3fb99999 	.word	0x3fb99999
 80010e0:	88e368f1 	.word	0x88e368f1
 80010e4:	3fa4f8b5 	.word	0x3fa4f8b5
 80010e8:	9999999a 	.word	0x9999999a
 80010ec:	3fe99999 	.word	0x3fe99999
 80010f0:	9999999a 	.word	0x9999999a
 80010f4:	40059999 	.word	0x40059999
 80010f8:	20000440 	.word	0x20000440
 80010fc:	20000000 	.word	0x20000000

08001100 <INA219Read_BusV>:
	uint8_t calibrator_si2c[2] = {calibrator.U8[1], calibrator.U8[0]}; //// switch byte to send high order first in I2C
	HAL_I2C_Mem_Write(hi2c, dv_addr, INA219_RG_Calibra, I2C_MEMADD_SIZE_8BIT, &calibrator_si2c[0], 2, 10);

}

uint16_t INA219Read_BusV(I2C_HandleTypeDef *hi2c,uint8_t dv_addr){
 8001100:	b580      	push	{r7, lr}
 8001102:	b086      	sub	sp, #24
 8001104:	af04      	add	r7, sp, #16
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	460b      	mov	r3, r1
 800110a:	70fb      	strb	r3, [r7, #3]
	//	if(INACBffr[2] & 0x01){ // still unsure how to deal with CNVR / OVF
//
//	}


	INACBffr.D32 = 0; //// buffer clear
 800110c:	4b0e      	ldr	r3, [pc, #56]	; (8001148 <INA219Read_BusV+0x48>)
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
	HAL_I2C_Mem_Read(hi2c, dv_addr, INA219_RG_BusV, I2C_MEMADD_SIZE_8BIT, &INACBffr.D8[1], 2, 10);
 8001112:	78fb      	ldrb	r3, [r7, #3]
 8001114:	b299      	uxth	r1, r3
 8001116:	230a      	movs	r3, #10
 8001118:	9302      	str	r3, [sp, #8]
 800111a:	2302      	movs	r3, #2
 800111c:	9301      	str	r3, [sp, #4]
 800111e:	4b0b      	ldr	r3, [pc, #44]	; (800114c <INA219Read_BusV+0x4c>)
 8001120:	9300      	str	r3, [sp, #0]
 8001122:	2301      	movs	r3, #1
 8001124:	2202      	movs	r2, #2
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f006 fd78 	bl	8007c1c <HAL_I2C_Mem_Read>

	return ((INACBffr.D16[1] | INACBffr.D16[0]) >> 3) * 4;
 800112c:	4b06      	ldr	r3, [pc, #24]	; (8001148 <INA219Read_BusV+0x48>)
 800112e:	885a      	ldrh	r2, [r3, #2]
 8001130:	4b05      	ldr	r3, [pc, #20]	; (8001148 <INA219Read_BusV+0x48>)
 8001132:	881b      	ldrh	r3, [r3, #0]
 8001134:	4313      	orrs	r3, r2
 8001136:	b29b      	uxth	r3, r3
 8001138:	08db      	lsrs	r3, r3, #3
 800113a:	b29b      	uxth	r3, r3
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	b29b      	uxth	r3, r3
}
 8001140:	4618      	mov	r0, r3
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	2000043c 	.word	0x2000043c
 800114c:	2000043d 	.word	0x2000043d

08001150 <INA219Read_Current>:

uint16_t INA219Read_Current(I2C_HandleTypeDef *hi2c,uint8_t dv_addr){
 8001150:	b580      	push	{r7, lr}
 8001152:	b086      	sub	sp, #24
 8001154:	af04      	add	r7, sp, #16
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	460b      	mov	r3, r1
 800115a:	70fb      	strb	r3, [r7, #3]
	 * @param : hi2c - HAL_I2C used to read
	 * @param : dv_addr - address of INA219 device in the busline
	 * @Retval: current in mA
	 * @ex.
	 * */
	INACBffr.D32 = 0; //// buffer clear
 800115c:	4b0c      	ldr	r3, [pc, #48]	; (8001190 <INA219Read_Current+0x40>)
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
	HAL_I2C_Mem_Read(hi2c, dv_addr, INA219_RG_Current, I2C_MEMADD_SIZE_8BIT, &INACBffr.D8[1], 2, 10);
 8001162:	78fb      	ldrb	r3, [r7, #3]
 8001164:	b299      	uxth	r1, r3
 8001166:	230a      	movs	r3, #10
 8001168:	9302      	str	r3, [sp, #8]
 800116a:	2302      	movs	r3, #2
 800116c:	9301      	str	r3, [sp, #4]
 800116e:	4b09      	ldr	r3, [pc, #36]	; (8001194 <INA219Read_Current+0x44>)
 8001170:	9300      	str	r3, [sp, #0]
 8001172:	2301      	movs	r3, #1
 8001174:	2204      	movs	r2, #4
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f006 fd50 	bl	8007c1c <HAL_I2C_Mem_Read>

	return INACBffr.D16[1] | INACBffr.D16[0];
 800117c:	4b04      	ldr	r3, [pc, #16]	; (8001190 <INA219Read_Current+0x40>)
 800117e:	885a      	ldrh	r2, [r3, #2]
 8001180:	4b03      	ldr	r3, [pc, #12]	; (8001190 <INA219Read_Current+0x40>)
 8001182:	881b      	ldrh	r3, [r3, #0]
 8001184:	4313      	orrs	r3, r2
 8001186:	b29b      	uxth	r3, r3
}
 8001188:	4618      	mov	r0, r3
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	2000043c 	.word	0x2000043c
 8001194:	2000043d 	.word	0x2000043d

08001198 <INA219Read_ShuntV>:

float INA219Read_ShuntV(I2C_HandleTypeDef *hi2c,uint8_t dv_addr){
 8001198:	b580      	push	{r7, lr}
 800119a:	b088      	sub	sp, #32
 800119c:	af04      	add	r7, sp, #16
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	460b      	mov	r3, r1
 80011a2:	70fb      	strb	r3, [r7, #3]
	 * @param : hi2c - HAL_I2C used to read
	 * @param : dv_addr - address of INA219 device in the busline
	 * @Retval: shunt voltage in mV (.2f)
	 * @ex.
	 * */
	INACBffr.D32 = 0; //// buffer clear
 80011a4:	4b17      	ldr	r3, [pc, #92]	; (8001204 <INA219Read_ShuntV+0x6c>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]
	HAL_I2C_Mem_Read(hi2c, dv_addr, INA219_RG_ShuntV, I2C_MEMADD_SIZE_8BIT, &INACBffr.D8[1], 2, 10);
 80011aa:	78fb      	ldrb	r3, [r7, #3]
 80011ac:	b299      	uxth	r1, r3
 80011ae:	230a      	movs	r3, #10
 80011b0:	9302      	str	r3, [sp, #8]
 80011b2:	2302      	movs	r3, #2
 80011b4:	9301      	str	r3, [sp, #4]
 80011b6:	4b14      	ldr	r3, [pc, #80]	; (8001208 <INA219Read_ShuntV+0x70>)
 80011b8:	9300      	str	r3, [sp, #0]
 80011ba:	2301      	movs	r3, #1
 80011bc:	2201      	movs	r2, #1
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f006 fd2c 	bl	8007c1c <HAL_I2C_Mem_Read>

	//// Convert rawdata To V shunt from Table 7.Shunt Voltage Register Format

    int16_t rawshunt = INACBffr.D16[1] | INACBffr.D16[0];
 80011c4:	4b0f      	ldr	r3, [pc, #60]	; (8001204 <INA219Read_ShuntV+0x6c>)
 80011c6:	885a      	ldrh	r2, [r3, #2]
 80011c8:	4b0e      	ldr	r3, [pc, #56]	; (8001204 <INA219Read_ShuntV+0x6c>)
 80011ca:	881b      	ldrh	r3, [r3, #0]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	b29b      	uxth	r3, r3
 80011d0:	81fb      	strh	r3, [r7, #14]
    return rawshunt / 100.0;
 80011d2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff f9ac 	bl	8000534 <__aeabi_i2d>
 80011dc:	f04f 0200 	mov.w	r2, #0
 80011e0:	4b0a      	ldr	r3, [pc, #40]	; (800120c <INA219Read_ShuntV+0x74>)
 80011e2:	f7ff fb3b 	bl	800085c <__aeabi_ddiv>
 80011e6:	4602      	mov	r2, r0
 80011e8:	460b      	mov	r3, r1
 80011ea:	4610      	mov	r0, r2
 80011ec:	4619      	mov	r1, r3
 80011ee:	f7ff fd03 	bl	8000bf8 <__aeabi_d2f>
 80011f2:	4603      	mov	r3, r0
 80011f4:	ee07 3a90 	vmov	s15, r3
//    	return rawshunt / 100.0;
//    }else{
//    	// if 2's complements
//    	return (~rawshunt + 1) / 100.0;
//    }
}
 80011f8:	eeb0 0a67 	vmov.f32	s0, s15
 80011fc:	3710      	adds	r7, #16
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	2000043c 	.word	0x2000043c
 8001208:	2000043d 	.word	0x2000043d
 800120c:	40590000 	.word	0x40590000

08001210 <INA219Read_Power>:

float INA219Read_Power(I2C_HandleTypeDef *hi2c,uint8_t dv_addr){
 8001210:	b5b0      	push	{r4, r5, r7, lr}
 8001212:	b086      	sub	sp, #24
 8001214:	af04      	add	r7, sp, #16
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	460b      	mov	r3, r1
 800121a:	70fb      	strb	r3, [r7, #3]
	 * @param : hi2c - HAL_I2C used to read
	 * @param : dv_addr - address of INA219 device in the busline
	 * @Retval: Power in mW
	 * @ex.
	 * */
	INACBffr.D32 = 0; //// buffer clear
 800121c:	4b1e      	ldr	r3, [pc, #120]	; (8001298 <INA219Read_Power+0x88>)
 800121e:	2200      	movs	r2, #0
 8001220:	601a      	str	r2, [r3, #0]
	HAL_I2C_Mem_Read(hi2c, dv_addr, INA219_RG_PoWer, I2C_MEMADD_SIZE_8BIT, &INACBffr.D8[1], 2, 10);
 8001222:	78fb      	ldrb	r3, [r7, #3]
 8001224:	b299      	uxth	r1, r3
 8001226:	230a      	movs	r3, #10
 8001228:	9302      	str	r3, [sp, #8]
 800122a:	2302      	movs	r3, #2
 800122c:	9301      	str	r3, [sp, #4]
 800122e:	4b1b      	ldr	r3, [pc, #108]	; (800129c <INA219Read_Power+0x8c>)
 8001230:	9300      	str	r3, [sp, #0]
 8001232:	2301      	movs	r3, #1
 8001234:	2203      	movs	r2, #3
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f006 fcf0 	bl	8007c1c <HAL_I2C_Mem_Read>
	////  * 20, power_LSB = 20 x current_LSB & x 1000 make unit in mW
	return ((INACBffr.D16[1] | INACBffr.D16[0]) * (20000.0 * current_LSB));
 800123c:	4b16      	ldr	r3, [pc, #88]	; (8001298 <INA219Read_Power+0x88>)
 800123e:	885a      	ldrh	r2, [r3, #2]
 8001240:	4b15      	ldr	r3, [pc, #84]	; (8001298 <INA219Read_Power+0x88>)
 8001242:	881b      	ldrh	r3, [r3, #0]
 8001244:	4313      	orrs	r3, r2
 8001246:	b29b      	uxth	r3, r3
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff f973 	bl	8000534 <__aeabi_i2d>
 800124e:	4604      	mov	r4, r0
 8001250:	460d      	mov	r5, r1
 8001252:	4b13      	ldr	r3, [pc, #76]	; (80012a0 <INA219Read_Power+0x90>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff f97e 	bl	8000558 <__aeabi_f2d>
 800125c:	a30c      	add	r3, pc, #48	; (adr r3, 8001290 <INA219Read_Power+0x80>)
 800125e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001262:	f7ff f9d1 	bl	8000608 <__aeabi_dmul>
 8001266:	4602      	mov	r2, r0
 8001268:	460b      	mov	r3, r1
 800126a:	4620      	mov	r0, r4
 800126c:	4629      	mov	r1, r5
 800126e:	f7ff f9cb 	bl	8000608 <__aeabi_dmul>
 8001272:	4602      	mov	r2, r0
 8001274:	460b      	mov	r3, r1
 8001276:	4610      	mov	r0, r2
 8001278:	4619      	mov	r1, r3
 800127a:	f7ff fcbd 	bl	8000bf8 <__aeabi_d2f>
 800127e:	4603      	mov	r3, r0
 8001280:	ee07 3a90 	vmov	s15, r3
}
 8001284:	eeb0 0a67 	vmov.f32	s0, s15
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bdb0      	pop	{r4, r5, r7, pc}
 800128e:	bf00      	nop
 8001290:	00000000 	.word	0x00000000
 8001294:	40d38800 	.word	0x40d38800
 8001298:	2000043c 	.word	0x2000043c
 800129c:	2000043d 	.word	0x2000043d
 80012a0:	20000000 	.word	0x20000000

080012a4 <MCP3208_READ_8_DataSPI>:
/* Read using SPI 8 Bit Data size MSB first
 * Ex.
 * AA_bitread = MCP3208_READ_8_DataSPI(&hspi3, M8_CH0);
	VADC_cv =  MCP3208_ADCbit_to_Volt(AA_bitread); // 5 / 4096 * 0.00122
 * */
uint16_t MCP3208_READ_8_DataSPI(SPI_HandleTypeDef *hspi, MCP3208CHSelect M8_channel){
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b086      	sub	sp, #24
 80012a8:	af02      	add	r7, sp, #8
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	460b      	mov	r3, r1
 80012ae:	70fb      	strb	r3, [r7, #3]

	//// Shitty bitshift to the correct position Fig 6-1, MCP3208, MICROCHIP
	uint8_t D8_MOSI[3];
	uint8_t D8_MISO[3];
	D8_MOSI[0] = M8_channel >> 2;
 80012b0:	78fb      	ldrb	r3, [r7, #3]
 80012b2:	089b      	lsrs	r3, r3, #2
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	733b      	strb	r3, [r7, #12]
	D8_MOSI[1] = M8_channel << 6;
 80012b8:	78fb      	ldrb	r3, [r7, #3]
 80012ba:	019b      	lsls	r3, r3, #6
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	737b      	strb	r3, [r7, #13]


	HAL_GPIO_WritePin(MCP3208_SPI_CS_Port,MCP3208_SPI_CS_Pin , GPIO_PIN_RESET);
 80012c0:	2200      	movs	r2, #0
 80012c2:	2104      	movs	r1, #4
 80012c4:	4810      	ldr	r0, [pc, #64]	; (8001308 <MCP3208_READ_8_DataSPI+0x64>)
 80012c6:	f006 fa1f 	bl	8007708 <HAL_GPIO_WritePin>

	HAL_SPI_TransmitReceive(hspi, &D8_MOSI[0], &D8_MISO[0], 3, 100);
 80012ca:	f107 0208 	add.w	r2, r7, #8
 80012ce:	f107 010c 	add.w	r1, r7, #12
 80012d2:	2364      	movs	r3, #100	; 0x64
 80012d4:	9300      	str	r3, [sp, #0]
 80012d6:	2303      	movs	r3, #3
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f009 fc1c 	bl	800ab16 <HAL_SPI_TransmitReceive>

	//HAL_SPI_Abort(hspi);
	HAL_GPIO_WritePin(MCP3208_SPI_CS_Port,MCP3208_SPI_CS_Pin , GPIO_PIN_SET);
 80012de:	2201      	movs	r2, #1
 80012e0:	2104      	movs	r1, #4
 80012e2:	4809      	ldr	r0, [pc, #36]	; (8001308 <MCP3208_READ_8_DataSPI+0x64>)
 80012e4:	f006 fa10 	bl	8007708 <HAL_GPIO_WritePin>

	return ((D8_MISO[1] << 8) + D8_MISO[2]) & 0x0FFF;
 80012e8:	7a7b      	ldrb	r3, [r7, #9]
 80012ea:	b29b      	uxth	r3, r3
 80012ec:	021b      	lsls	r3, r3, #8
 80012ee:	b29a      	uxth	r2, r3
 80012f0:	7abb      	ldrb	r3, [r7, #10]
 80012f2:	b29b      	uxth	r3, r3
 80012f4:	4413      	add	r3, r2
 80012f6:	b29b      	uxth	r3, r3
 80012f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012fc:	b29b      	uxth	r3, r3
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3710      	adds	r7, #16
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	40020c00 	.word	0x40020c00
 800130c:	00000000 	.word	0x00000000

08001310 <MCP320x_ADCbit_to_Volt>:


float MCP320x_ADCbit_to_Volt(uint16_t adcbit){
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	80fb      	strh	r3, [r7, #6]
	return adcbit * 0.00122; // 5/4096
 800131a:	88fb      	ldrh	r3, [r7, #6]
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff f909 	bl	8000534 <__aeabi_i2d>
 8001322:	a309      	add	r3, pc, #36	; (adr r3, 8001348 <MCP320x_ADCbit_to_Volt+0x38>)
 8001324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001328:	f7ff f96e 	bl	8000608 <__aeabi_dmul>
 800132c:	4602      	mov	r2, r0
 800132e:	460b      	mov	r3, r1
 8001330:	4610      	mov	r0, r2
 8001332:	4619      	mov	r1, r3
 8001334:	f7ff fc60 	bl	8000bf8 <__aeabi_d2f>
 8001338:	4603      	mov	r3, r0
 800133a:	ee07 3a90 	vmov	s15, r3
	//return adcbit * 0.001215; // 4.98/4096
	//return adcbit * 0.001225; // 5.02/4096
}
 800133e:	eeb0 0a67 	vmov.f32	s0, s15
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	0678c005 	.word	0x0678c005
 800134c:	3f53fd0d 	.word	0x3f53fd0d

08001350 <Rx_Verita_engine_callBak>:

	return VRT_ERROR;
}


VRTPTC_StatusTypedef Rx_Verita_engine_callBak(uint8_t *Rxbffr, Verita_Register_Bank *regisk){ //uint32_t *regisk
 8001350:	b490      	push	{r4, r7}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	6039      	str	r1, [r7, #0]
	 * @param Rxbffr - input uart buffer
	 * @param regisk - register need the result be stored
	 */
	static uint8_t logger[12] = {0}; /// log Rxbffr without head packet
	static uint8_t index = 0; // use in case the start of verita is not at Rxbffr[0]
	uint8_t chksum[2]  = {0};
 800135a:	2300      	movs	r3, #0
 800135c:	81bb      	strh	r3, [r7, #12]
		uint32_t U32;
	}logu;


		/// chk All headers
		if(Rxbffr[index + 0] == 0x56 && Rxbffr[index + 1] == 0x52 && Rxbffr[index + 2] == 0x54){
 800135e:	4b74      	ldr	r3, [pc, #464]	; (8001530 <Rx_Verita_engine_callBak+0x1e0>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	461a      	mov	r2, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	4413      	add	r3, r2
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	2b56      	cmp	r3, #86	; 0x56
 800136c:	f040 80c5 	bne.w	80014fa <Rx_Verita_engine_callBak+0x1aa>
 8001370:	4b6f      	ldr	r3, [pc, #444]	; (8001530 <Rx_Verita_engine_callBak+0x1e0>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	3301      	adds	r3, #1
 8001376:	687a      	ldr	r2, [r7, #4]
 8001378:	4413      	add	r3, r2
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	2b52      	cmp	r3, #82	; 0x52
 800137e:	f040 80bc 	bne.w	80014fa <Rx_Verita_engine_callBak+0x1aa>
 8001382:	4b6b      	ldr	r3, [pc, #428]	; (8001530 <Rx_Verita_engine_callBak+0x1e0>)
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	3302      	adds	r3, #2
 8001388:	687a      	ldr	r2, [r7, #4]
 800138a:	4413      	add	r3, r2
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	2b54      	cmp	r3, #84	; 0x54
 8001390:	f040 80b3 	bne.w	80014fa <Rx_Verita_engine_callBak+0x1aa>

			//// log data first / prevent overwrite
			for(register int k = 0; k < 7; k++){
 8001394:	2400      	movs	r4, #0
 8001396:	e009      	b.n	80013ac <Rx_Verita_engine_callBak+0x5c>
				logger[k] = Rxbffr[index + k + 3];
 8001398:	4b65      	ldr	r3, [pc, #404]	; (8001530 <Rx_Verita_engine_callBak+0x1e0>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	4423      	add	r3, r4
 800139e:	3303      	adds	r3, #3
 80013a0:	687a      	ldr	r2, [r7, #4]
 80013a2:	4413      	add	r3, r2
 80013a4:	781a      	ldrb	r2, [r3, #0]
 80013a6:	4b63      	ldr	r3, [pc, #396]	; (8001534 <Rx_Verita_engine_callBak+0x1e4>)
 80013a8:	551a      	strb	r2, [r3, r4]
			for(register int k = 0; k < 7; k++){
 80013aa:	3401      	adds	r4, #1
 80013ac:	2c06      	cmp	r4, #6
 80013ae:	ddf3      	ble.n	8001398 <Rx_Verita_engine_callBak+0x48>
			}

			//// checksum here
			for(register int i = 0;i < 5; i++){
 80013b0:	2400      	movs	r4, #0
 80013b2:	e006      	b.n	80013c2 <Rx_Verita_engine_callBak+0x72>
				chksum[0] += logger[i];
 80013b4:	7b3a      	ldrb	r2, [r7, #12]
 80013b6:	4b5f      	ldr	r3, [pc, #380]	; (8001534 <Rx_Verita_engine_callBak+0x1e4>)
 80013b8:	5d1b      	ldrb	r3, [r3, r4]
 80013ba:	4413      	add	r3, r2
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	733b      	strb	r3, [r7, #12]
			for(register int i = 0;i < 5; i++){
 80013c0:	3401      	adds	r4, #1
 80013c2:	2c04      	cmp	r4, #4
 80013c4:	ddf6      	ble.n	80013b4 <Rx_Verita_engine_callBak+0x64>
			}
			chksum[1] = ~chksum[0];
 80013c6:	7b3b      	ldrb	r3, [r7, #12]
 80013c8:	43db      	mvns	r3, r3
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	737b      	strb	r3, [r7, #13]

			if( chksum[1] == logger[5]){
 80013ce:	7b7a      	ldrb	r2, [r7, #13]
 80013d0:	4b58      	ldr	r3, [pc, #352]	; (8001534 <Rx_Verita_engine_callBak+0x1e4>)
 80013d2:	795b      	ldrb	r3, [r3, #5]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	f040 808e 	bne.w	80014f6 <Rx_Verita_engine_callBak+0x1a6>

				Rxbffr[0 + index] = 0xFF;//// mark that this data is already read
 80013da:	4b55      	ldr	r3, [pc, #340]	; (8001530 <Rx_Verita_engine_callBak+0x1e0>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	461a      	mov	r2, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	4413      	add	r3, r2
 80013e4:	22ff      	movs	r2, #255	; 0xff
 80013e6:	701a      	strb	r2, [r3, #0]

				/////////////////////// decode phase  //////////////////
				index += Framesize_VRT;
 80013e8:	4b51      	ldr	r3, [pc, #324]	; (8001530 <Rx_Verita_engine_callBak+0x1e0>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	3309      	adds	r3, #9
 80013ee:	b2da      	uxtb	r2, r3
 80013f0:	4b4f      	ldr	r3, [pc, #316]	; (8001530 <Rx_Verita_engine_callBak+0x1e0>)
 80013f2:	701a      	strb	r2, [r3, #0]
				index %= RxbufferSize_VRT; // overflow
 80013f4:	4b4e      	ldr	r3, [pc, #312]	; (8001530 <Rx_Verita_engine_callBak+0x1e0>)
 80013f6:	781a      	ldrb	r2, [r3, #0]
 80013f8:	4b4f      	ldr	r3, [pc, #316]	; (8001538 <Rx_Verita_engine_callBak+0x1e8>)
 80013fa:	fba3 1302 	umull	r1, r3, r3, r2
 80013fe:	0859      	lsrs	r1, r3, #1
 8001400:	460b      	mov	r3, r1
 8001402:	00db      	lsls	r3, r3, #3
 8001404:	440b      	add	r3, r1
 8001406:	1ad3      	subs	r3, r2, r3
 8001408:	b2da      	uxtb	r2, r3
 800140a:	4b49      	ldr	r3, [pc, #292]	; (8001530 <Rx_Verita_engine_callBak+0x1e0>)
 800140c:	701a      	strb	r2, [r3, #0]
				logu.U8[2] = logger[2];
				logu.U8[1] = logger[3];
				logu.U8[0] = logger[4];
#else
				//// Little endian
				logu.U8[0] = logger[1];
 800140e:	4b49      	ldr	r3, [pc, #292]	; (8001534 <Rx_Verita_engine_callBak+0x1e4>)
 8001410:	785b      	ldrb	r3, [r3, #1]
 8001412:	723b      	strb	r3, [r7, #8]
				logu.U8[1] = logger[2];
 8001414:	4b47      	ldr	r3, [pc, #284]	; (8001534 <Rx_Verita_engine_callBak+0x1e4>)
 8001416:	789b      	ldrb	r3, [r3, #2]
 8001418:	727b      	strb	r3, [r7, #9]
				logu.U8[2] = logger[3];
 800141a:	4b46      	ldr	r3, [pc, #280]	; (8001534 <Rx_Verita_engine_callBak+0x1e4>)
 800141c:	78db      	ldrb	r3, [r3, #3]
 800141e:	72bb      	strb	r3, [r7, #10]
				logu.U8[3] = logger[4];
 8001420:	4b44      	ldr	r3, [pc, #272]	; (8001534 <Rx_Verita_engine_callBak+0x1e4>)
 8001422:	791b      	ldrb	r3, [r3, #4]
 8001424:	72fb      	strb	r3, [r7, #11]
#endif

				//// DATA phase, insert 32bit data into register box =================================
				if(logger[0] <= 0x20){
 8001426:	4b43      	ldr	r3, [pc, #268]	; (8001534 <Rx_Verita_engine_callBak+0x1e4>)
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	2b20      	cmp	r3, #32
 800142c:	d808      	bhi.n	8001440 <Rx_Verita_engine_callBak+0xf0>
					// place data into the request register
					regisk->U32[logger[0]] = logu.U32;
 800142e:	4b41      	ldr	r3, [pc, #260]	; (8001534 <Rx_Verita_engine_callBak+0x1e4>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	4619      	mov	r1, r3
 8001434:	68ba      	ldr	r2, [r7, #8]
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
					return VRT_OK;
 800143c:	2391      	movs	r3, #145	; 0x91
 800143e:	e072      	b.n	8001526 <Rx_Verita_engine_callBak+0x1d6>
				} //// -------------------------------------------------------------------------------

				//// CMD phase, return recieved Command =========================================
				if(logger[0] >= 0x90){
 8001440:	4b3c      	ldr	r3, [pc, #240]	; (8001534 <Rx_Verita_engine_callBak+0x1e4>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	2b8f      	cmp	r3, #143	; 0x8f
 8001446:	d96c      	bls.n	8001522 <Rx_Verita_engine_callBak+0x1d2>
					switch(logger[0]){
 8001448:	4b3a      	ldr	r3, [pc, #232]	; (8001534 <Rx_Verita_engine_callBak+0x1e4>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	3b91      	subs	r3, #145	; 0x91
 800144e:	2b13      	cmp	r3, #19
 8001450:	d82a      	bhi.n	80014a8 <Rx_Verita_engine_callBak+0x158>
 8001452:	a201      	add	r2, pc, #4	; (adr r2, 8001458 <Rx_Verita_engine_callBak+0x108>)
 8001454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001458:	080014ad 	.word	0x080014ad
 800145c:	080014b1 	.word	0x080014b1
 8001460:	080014b5 	.word	0x080014b5
 8001464:	080014b9 	.word	0x080014b9
 8001468:	080014a9 	.word	0x080014a9
 800146c:	080014a9 	.word	0x080014a9
 8001470:	080014a9 	.word	0x080014a9
 8001474:	080014a9 	.word	0x080014a9
 8001478:	080014a9 	.word	0x080014a9
 800147c:	080014a9 	.word	0x080014a9
 8001480:	080014a9 	.word	0x080014a9
 8001484:	080014a9 	.word	0x080014a9
 8001488:	080014a9 	.word	0x080014a9
 800148c:	080014a9 	.word	0x080014a9
 8001490:	080014a9 	.word	0x080014a9
 8001494:	080014bd 	.word	0x080014bd
 8001498:	080014c7 	.word	0x080014c7
 800149c:	080014d3 	.word	0x080014d3
 80014a0:	080014df 	.word	0x080014df
 80014a4:	080014eb 	.word	0x080014eb
						//// Status -------
						default:
						case 0x90:
							return VRT_ERROR;
 80014a8:	2390      	movs	r3, #144	; 0x90
 80014aa:	e03c      	b.n	8001526 <Rx_Verita_engine_callBak+0x1d6>
						case 0x91:
							return VRT_OK;
 80014ac:	2391      	movs	r3, #145	; 0x91
 80014ae:	e03a      	b.n	8001526 <Rx_Verita_engine_callBak+0x1d6>
						case 0x92:
							return VRT_Busy;
 80014b0:	2392      	movs	r3, #146	; 0x92
 80014b2:	e038      	b.n	8001526 <Rx_Verita_engine_callBak+0x1d6>
						case 0x93:
							return VRT_DataLoss;
 80014b4:	2393      	movs	r3, #147	; 0x93
 80014b6:	e036      	b.n	8001526 <Rx_Verita_engine_callBak+0x1d6>
						case 0x94:
							return VRT_UnEnc;
 80014b8:	2394      	movs	r3, #148	; 0x94
 80014ba:	e034      	b.n	8001526 <Rx_Verita_engine_callBak+0x1d6>

						//// Command -------------
						case VRC_Request:
							//// place Regis request & FlagRQ for Tx_RQ_Engine
							regisk->U32[VR_DataReq] = logu.U32;
 80014bc:	68ba      	ldr	r2, [r7, #8]
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	601a      	str	r2, [r3, #0]
							return VRT_OK;
 80014c2:	2391      	movs	r3, #145	; 0x91
 80014c4:	e02f      	b.n	8001526 <Rx_Verita_engine_callBak+0x1d6>

						case VRC_Flag_ger:
							regisk->Mark.Flag_ger = logu.U8[0];
 80014c6:	7a3a      	ldrb	r2, [r7, #8]
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
							return VRT_OK;
 80014ce:	2391      	movs	r3, #145	; 0x91
 80014d0:	e029      	b.n	8001526 <Rx_Verita_engine_callBak+0x1d6>

						case VRC_Next:
							regisk->Mark.Flag_next = 0xFF; return VRC_Next;
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	22ff      	movs	r2, #255	; 0xff
 80014d6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 80014da:	23a2      	movs	r3, #162	; 0xa2
 80014dc:	e023      	b.n	8001526 <Rx_Verita_engine_callBak+0x1d6>

						case VRC_Flag_aa:
							regisk->Mark.Flag_aa = logu.U8[0]; return VRC_Flag_aa;
 80014de:	7a3a      	ldrb	r2, [r7, #8]
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 80014e6:	23a3      	movs	r3, #163	; 0xa3
 80014e8:	e01d      	b.n	8001526 <Rx_Verita_engine_callBak+0x1d6>

						case VRC_Flag_bb:
							regisk->Mark.Flag_bb = logu.U8[0]; return VRC_Flag_bb;
 80014ea:	7a3a      	ldrb	r2, [r7, #8]
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
 80014f2:	23a4      	movs	r3, #164	; 0xa4
 80014f4:	e017      	b.n	8001526 <Rx_Verita_engine_callBak+0x1d6>
					}
				}

				/////////////////////// decode phase  //////////////////
			}
			else{return VRT_DataLoss;}//// checksum wrong
 80014f6:	2393      	movs	r3, #147	; 0x93
 80014f8:	e015      	b.n	8001526 <Rx_Verita_engine_callBak+0x1d6>

		}
		else{//// else wrong header
			index += Framesize_VRT; // 9
 80014fa:	4b0d      	ldr	r3, [pc, #52]	; (8001530 <Rx_Verita_engine_callBak+0x1e0>)
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	3309      	adds	r3, #9
 8001500:	b2da      	uxtb	r2, r3
 8001502:	4b0b      	ldr	r3, [pc, #44]	; (8001530 <Rx_Verita_engine_callBak+0x1e0>)
 8001504:	701a      	strb	r2, [r3, #0]
			index %= RxbufferSize_VRT; // overflow
 8001506:	4b0a      	ldr	r3, [pc, #40]	; (8001530 <Rx_Verita_engine_callBak+0x1e0>)
 8001508:	781a      	ldrb	r2, [r3, #0]
 800150a:	4b0b      	ldr	r3, [pc, #44]	; (8001538 <Rx_Verita_engine_callBak+0x1e8>)
 800150c:	fba3 1302 	umull	r1, r3, r3, r2
 8001510:	0859      	lsrs	r1, r3, #1
 8001512:	460b      	mov	r3, r1
 8001514:	00db      	lsls	r3, r3, #3
 8001516:	440b      	add	r3, r1
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	b2da      	uxtb	r2, r3
 800151c:	4b04      	ldr	r3, [pc, #16]	; (8001530 <Rx_Verita_engine_callBak+0x1e0>)
 800151e:	701a      	strb	r2, [r3, #0]
 8001520:	e000      	b.n	8001524 <Rx_Verita_engine_callBak+0x1d4>
			if( chksum[1] == logger[5]){
 8001522:	bf00      	nop
		}


	return VRT_ERROR;
 8001524:	2390      	movs	r3, #144	; 0x90
}
 8001526:	4618      	mov	r0, r3
 8001528:	3710      	adds	r7, #16
 800152a:	46bd      	mov	sp, r7
 800152c:	bc90      	pop	{r4, r7}
 800152e:	4770      	bx	lr
 8001530:	20000442 	.word	0x20000442
 8001534:	20000444 	.word	0x20000444
 8001538:	38e38e39 	.word	0x38e38e39

0800153c <Tx_Rq_Verita_engine>:

VRTPTC_StatusTypedef Tx_Rq_Verita_engine(UART_HandleTypeDef *huart, Verita_Register_Bank *vrg_intn){
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	6039      	str	r1, [r7, #0]
	/* @brief Send data back when request is flagged , recommend for client's use
	 * @param vrg_intn - Bank which collect request register & Flag // internal regis
	 * @param regist - databank array collect data to send
	 * */

	if(vrg_intn->Mark.flag_dataREQ){ // if flag is up
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	885b      	ldrh	r3, [r3, #2]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d011      	beq.n	8001572 <Tx_Rq_Verita_engine+0x36>

		uint8_t regis_RQ = (uint8_t)vrg_intn->Mark.DataReq;
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	881b      	ldrh	r3, [r3, #0]
 8001552:	73fb      	strb	r3, [r7, #15]
		//uint32_t data_reg = vrg_intn->U32[regis_RQ];

		//// send data
		Tx_UART_Verita_Packet_u32(huart, regis_RQ, vrg_intn->U32[regis_RQ]);
 8001554:	7bfa      	ldrb	r2, [r7, #15]
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800155c:	7bfb      	ldrb	r3, [r7, #15]
 800155e:	4619      	mov	r1, r3
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	f000 f80b 	bl	800157c <Tx_UART_Verita_Packet_u32>
		//// erase flag
		//vrg_intn->U32[VR_DataReq] = 0x00;
		vrg_intn->Mark.DataReq = 0x00;
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	2200      	movs	r2, #0
 800156a:	801a      	strh	r2, [r3, #0]
		vrg_intn->Mark.flag_dataREQ = 0x00;
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	2200      	movs	r2, #0
 8001570:	805a      	strh	r2, [r3, #2]
	}

	return VRT_OK;
 8001572:	2391      	movs	r3, #145	; 0x91
}
 8001574:	4618      	mov	r0, r3
 8001576:	3710      	adds	r7, #16
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}

0800157c <Tx_UART_Verita_Packet_u32>:


	HAL_UART_Transmit(huart, (uint8_t*)pack, posit+1, 40);
}

void Tx_UART_Verita_Packet_u32(UART_HandleTypeDef *huart, uint8_t regis,uint32_t pdata){
 800157c:	b590      	push	{r4, r7, lr}
 800157e:	b08b      	sub	sp, #44	; 0x2c
 8001580:	af00      	add	r7, sp, #0
 8001582:	60f8      	str	r0, [r7, #12]
 8001584:	460b      	mov	r3, r1
 8001586:	607a      	str	r2, [r7, #4]
 8001588:	72fb      	strb	r3, [r7, #11]
	 * @param size  - Amount of data elements (u8 or u16) to be received.
	 *
	 * */

	//// Verita Header ////
	uint8_t pack[16] = {0x56, 0x52, 0x54, regis};
 800158a:	f107 0314 	add.w	r3, r7, #20
 800158e:	2200      	movs	r2, #0
 8001590:	601a      	str	r2, [r3, #0]
 8001592:	605a      	str	r2, [r3, #4]
 8001594:	609a      	str	r2, [r3, #8]
 8001596:	60da      	str	r2, [r3, #12]
 8001598:	2356      	movs	r3, #86	; 0x56
 800159a:	753b      	strb	r3, [r7, #20]
 800159c:	2352      	movs	r3, #82	; 0x52
 800159e:	757b      	strb	r3, [r7, #21]
 80015a0:	2354      	movs	r3, #84	; 0x54
 80015a2:	75bb      	strb	r3, [r7, #22]
 80015a4:	7afb      	ldrb	r3, [r7, #11]
 80015a6:	75fb      	strb	r3, [r7, #23]

	uint8_t posit = 4; // start new position
 80015a8:	2304      	movs	r3, #4
 80015aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t chksum = 0;
 80015ae:	2300      	movs	r3, #0
 80015b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		uint8_t  U8[4];
		uint32_t U32;
	}logu;

	//// add data to packet
	logu.U32 = pdata;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	613b      	str	r3, [r7, #16]
	for(register int j = 4; j < 8; j++){
 80015b8:	2404      	movs	r4, #4
 80015ba:	e00f      	b.n	80015dc <Tx_UART_Verita_Packet_u32+0x60>
			pack[j] = logu.U8[j-4];
 80015bc:	1f23      	subs	r3, r4, #4
 80015be:	3328      	adds	r3, #40	; 0x28
 80015c0:	443b      	add	r3, r7
 80015c2:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 80015c6:	f104 0328 	add.w	r3, r4, #40	; 0x28
 80015ca:	443b      	add	r3, r7
 80015cc:	f803 2c14 	strb.w	r2, [r3, #-20]
			posit++;
 80015d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80015d4:	3301      	adds	r3, #1
 80015d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for(register int j = 4; j < 8; j++){
 80015da:	3401      	adds	r4, #1
 80015dc:	2c07      	cmp	r4, #7
 80015de:	dded      	ble.n	80015bc <Tx_UART_Verita_Packet_u32+0x40>
		}
	//// Checksum generate , +4 means +3 start pack & +1 regis
	for(register int j = 3; j < 8; j++){
 80015e0:	2403      	movs	r4, #3
 80015e2:	e00a      	b.n	80015fa <Tx_UART_Verita_Packet_u32+0x7e>
		chksum += pack[j];
 80015e4:	f104 0328 	add.w	r3, r4, #40	; 0x28
 80015e8:	443b      	add	r3, r7
 80015ea:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 80015ee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80015f2:	4413      	add	r3, r2
 80015f4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	for(register int j = 3; j < 8; j++){
 80015f8:	3401      	adds	r4, #1
 80015fa:	2c07      	cmp	r4, #7
 80015fc:	ddf2      	ble.n	80015e4 <Tx_UART_Verita_Packet_u32+0x68>
	}
	pack[posit] = ~chksum;
 80015fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001602:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001606:	43d2      	mvns	r2, r2
 8001608:	b2d2      	uxtb	r2, r2
 800160a:	3328      	adds	r3, #40	; 0x28
 800160c:	443b      	add	r3, r7
 800160e:	f803 2c14 	strb.w	r2, [r3, #-20]


	HAL_UART_Transmit(huart, (uint8_t*)pack, posit+1, 50);
 8001612:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001616:	b29b      	uxth	r3, r3
 8001618:	3301      	adds	r3, #1
 800161a:	b29a      	uxth	r2, r3
 800161c:	f107 0114 	add.w	r1, r7, #20
 8001620:	2332      	movs	r3, #50	; 0x32
 8001622:	68f8      	ldr	r0, [r7, #12]
 8001624:	f00a f99f 	bl	800b966 <HAL_UART_Transmit>
}
 8001628:	bf00      	nop
 800162a:	372c      	adds	r7, #44	; 0x2c
 800162c:	46bd      	mov	sp, r7
 800162e:	bd90      	pop	{r4, r7, pc}

08001630 <Tx_UART_Verita_Command>:

void Tx_UART_Verita_Command(UART_HandleTypeDef *huart, VRTPTC_CMDef cmd, uint8_t regis){
 8001630:	b590      	push	{r4, r7, lr}
 8001632:	b089      	sub	sp, #36	; 0x24
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	460b      	mov	r3, r1
 800163a:	70fb      	strb	r3, [r7, #3]
 800163c:	4613      	mov	r3, r2
 800163e:	70bb      	strb	r3, [r7, #2]
	 * 				  [VRC_Request] destination register need to request
	 * */

	//// Verita Header ////
	//// Send data request & Flag
	uint8_t pack[16] = {0x56, 0x52, 0x54, cmd, regis, 0x00, 0xFF, 0xAA};
 8001640:	f107 030c 	add.w	r3, r7, #12
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	605a      	str	r2, [r3, #4]
 800164a:	609a      	str	r2, [r3, #8]
 800164c:	60da      	str	r2, [r3, #12]
 800164e:	2356      	movs	r3, #86	; 0x56
 8001650:	733b      	strb	r3, [r7, #12]
 8001652:	2352      	movs	r3, #82	; 0x52
 8001654:	737b      	strb	r3, [r7, #13]
 8001656:	2354      	movs	r3, #84	; 0x54
 8001658:	73bb      	strb	r3, [r7, #14]
 800165a:	78fb      	ldrb	r3, [r7, #3]
 800165c:	73fb      	strb	r3, [r7, #15]
 800165e:	78bb      	ldrb	r3, [r7, #2]
 8001660:	743b      	strb	r3, [r7, #16]
 8001662:	23ff      	movs	r3, #255	; 0xff
 8001664:	74bb      	strb	r3, [r7, #18]
 8001666:	23aa      	movs	r3, #170	; 0xaa
 8001668:	74fb      	strb	r3, [r7, #19]

	//uint8_t posit = 4; // start new position
	uint8_t chksum = 0;
 800166a:	2300      	movs	r3, #0
 800166c:	77fb      	strb	r3, [r7, #31]

	//if(cmd == VRC_Request){}

	//// Checksum generate , +4 means +3 start pack & +1 regis
	for(register int j = 3; j < 8; j++){
 800166e:	2403      	movs	r4, #3
 8001670:	e008      	b.n	8001684 <Tx_UART_Verita_Command+0x54>
		chksum += pack[j];
 8001672:	f104 0320 	add.w	r3, r4, #32
 8001676:	443b      	add	r3, r7
 8001678:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 800167c:	7ffb      	ldrb	r3, [r7, #31]
 800167e:	4413      	add	r3, r2
 8001680:	77fb      	strb	r3, [r7, #31]
	for(register int j = 3; j < 8; j++){
 8001682:	3401      	adds	r4, #1
 8001684:	2c07      	cmp	r4, #7
 8001686:	ddf4      	ble.n	8001672 <Tx_UART_Verita_Command+0x42>
	}
	pack[8] = ~chksum;
 8001688:	7ffb      	ldrb	r3, [r7, #31]
 800168a:	43db      	mvns	r3, r3
 800168c:	b2db      	uxtb	r3, r3
 800168e:	753b      	strb	r3, [r7, #20]

	HAL_UART_Transmit(huart, (uint8_t*)pack, 9, 30);
 8001690:	f107 010c 	add.w	r1, r7, #12
 8001694:	231e      	movs	r3, #30
 8001696:	2209      	movs	r2, #9
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f00a f964 	bl	800b966 <HAL_UART_Transmit>
}
 800169e:	bf00      	nop
 80016a0:	3724      	adds	r7, #36	; 0x24
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd90      	pop	{r4, r7, pc}
	...

080016a8 <BL_UART_Start>:
 *  BL_UART_Readout_UnProtect(UART_HandleTypeDef *huart);
 *  BL_UART_Write_Protect(UART_HandleTypeDef *huart);
 *  BL_UART_Write_UnProtect(UART_HandleTypeDef *huart);
 * */

void BL_UART_Start(UART_HandleTypeDef *huart){
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]

	uint8_t UARTBL_Start = 0x7F;
 80016b0:	237f      	movs	r3, #127	; 0x7f
 80016b2:	73fb      	strb	r3, [r7, #15]
	//// step 1: Push BOOT0 -> HIGH
	HAL_GPIO_WritePin(BOOT0_Trigger_GPIO_PORT, BOOT0_Trigger_GPIO_PIN, GPIO_PIN_SET);
 80016b4:	2201      	movs	r2, #1
 80016b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016ba:	4811      	ldr	r0, [pc, #68]	; (8001700 <BL_UART_Start+0x58>)
 80016bc:	f006 f824 	bl	8007708 <HAL_GPIO_WritePin>

	//// step 2: Reset Client, push SET NMOS
	HAL_GPIO_WritePin(Client_NRST_Trg_GPIO_PORT, Client_NRST_Trg_GPIO_PIN, GPIO_PIN_SET);
 80016c0:	2201      	movs	r2, #1
 80016c2:	2140      	movs	r1, #64	; 0x40
 80016c4:	480f      	ldr	r0, [pc, #60]	; (8001704 <BL_UART_Start+0x5c>)
 80016c6:	f006 f81f 	bl	8007708 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80016ca:	2014      	movs	r0, #20
 80016cc:	f005 f93a 	bl	8006944 <HAL_Delay>
	HAL_GPIO_WritePin(Client_NRST_Trg_GPIO_PORT, Client_NRST_Trg_GPIO_PIN, GPIO_PIN_RESET);
 80016d0:	2200      	movs	r2, #0
 80016d2:	2140      	movs	r1, #64	; 0x40
 80016d4:	480b      	ldr	r0, [pc, #44]	; (8001704 <BL_UART_Start+0x5c>)
 80016d6:	f006 f817 	bl	8007708 <HAL_GPIO_WritePin>
	//// step 3: wait bootloader startup for 74.5ms ++
	HAL_Delay(85); // 80 is not enough
 80016da:	2055      	movs	r0, #85	; 0x55
 80016dc:	f005 f932 	bl	8006944 <HAL_Delay>

	//// send 0x7F
	HAL_UART_Transmit(huart, &UARTBL_Start, 1, 10);
 80016e0:	f107 010f 	add.w	r1, r7, #15
 80016e4:	230a      	movs	r3, #10
 80016e6:	2201      	movs	r2, #1
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f00a f93c 	bl	800b966 <HAL_UART_Transmit>
	BL_UART_wait_ACK(huart, 20);
 80016ee:	2114      	movs	r1, #20
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f000 f999 	bl	8001a28 <BL_UART_wait_ACK>

}
 80016f6:	bf00      	nop
 80016f8:	3710      	adds	r7, #16
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	40020000 	.word	0x40020000
 8001704:	40020800 	.word	0x40020800

08001708 <BL_UART_Finish>:

void BL_UART_Finish(){
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0

	//// reserve, pending for any operation that might be unfinished
	HAL_Delay(100);
 800170c:	2064      	movs	r0, #100	; 0x64
 800170e:	f005 f919 	bl	8006944 <HAL_Delay>
	//// pull BOOT0 back
	HAL_GPIO_WritePin(BOOT0_Trigger_GPIO_PORT, BOOT0_Trigger_GPIO_PIN, GPIO_PIN_RESET);
 8001712:	2200      	movs	r2, #0
 8001714:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001718:	4808      	ldr	r0, [pc, #32]	; (800173c <BL_UART_Finish+0x34>)
 800171a:	f005 fff5 	bl	8007708 <HAL_GPIO_WritePin>

	//// step 2: Reset Client, push SET NMOS
	HAL_GPIO_WritePin(Client_NRST_Trg_GPIO_PORT, Client_NRST_Trg_GPIO_PIN, GPIO_PIN_SET);
 800171e:	2201      	movs	r2, #1
 8001720:	2140      	movs	r1, #64	; 0x40
 8001722:	4807      	ldr	r0, [pc, #28]	; (8001740 <BL_UART_Finish+0x38>)
 8001724:	f005 fff0 	bl	8007708 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8001728:	2014      	movs	r0, #20
 800172a:	f005 f90b 	bl	8006944 <HAL_Delay>
	HAL_GPIO_WritePin(Client_NRST_Trg_GPIO_PORT, Client_NRST_Trg_GPIO_PIN, GPIO_PIN_RESET);
 800172e:	2200      	movs	r2, #0
 8001730:	2140      	movs	r1, #64	; 0x40
 8001732:	4803      	ldr	r0, [pc, #12]	; (8001740 <BL_UART_Finish+0x38>)
 8001734:	f005 ffe8 	bl	8007708 <HAL_GPIO_WritePin>
}
 8001738:	bf00      	nop
 800173a:	bd80      	pop	{r7, pc}
 800173c:	40020000 	.word	0x40020000
 8001740:	40020800 	.word	0x40020800

08001744 <BL_UART_WriteMem>:
	}else{return UB_NACK;}

	return UB_NACK;
}

UARTBootloader_state BL_UART_WriteMem(UART_HandleTypeDef *huart,uint32_t addr32, uint8_t numbyte,const uint8_t *wdatum){
 8001744:	b590      	push	{r4, r7, lr}
 8001746:	b0cb      	sub	sp, #300	; 0x12c
 8001748:	af00      	add	r7, sp, #0
 800174a:	f507 7494 	add.w	r4, r7, #296	; 0x128
 800174e:	f5a4 748e 	sub.w	r4, r4, #284	; 0x11c
 8001752:	6020      	str	r0, [r4, #0]
 8001754:	f507 7094 	add.w	r0, r7, #296	; 0x128
 8001758:	f5a0 7090 	sub.w	r0, r0, #288	; 0x120
 800175c:	6001      	str	r1, [r0, #0]
 800175e:	4611      	mov	r1, r2
 8001760:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8001764:	f5a2 7294 	sub.w	r2, r2, #296	; 0x128
 8001768:	6013      	str	r3, [r2, #0]
 800176a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800176e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8001772:	460a      	mov	r2, r1
 8001774:	701a      	strb	r2, [r3, #0]
	 * - receives the user data ((N + 1) bytes) and the checksum (XOR of N and of all data bytes)
	 * - programs the user data to memory starting from the received address
	 * - at the end of the command, if the write operation was successful, the bootloader
	 * 		transmits the ACK byte; otherwise it transmits an NACK byte to the application and aborts the command.
	 * */
	uint8_t Start_WM[2] = {0x31, 0xCE};
 8001776:	f64c 6331 	movw	r3, #52785	; 0xce31
 800177a:	f8a7 3124 	strh.w	r3, [r7, #292]	; 0x124
	uint8_t response = 0;
 800177e:	2300      	movs	r3, #0
 8001780:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
	uint8_t numbytx[2] = {0};
 8001784:	2300      	movs	r3, #0
 8001786:	f8a7 3120 	strh.w	r3, [r7, #288]	; 0x120
	uint8_t addr8[5] = {0};
 800178a:	2300      	movs	r3, #0
 800178c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8001790:	2300      	movs	r3, #0
 8001792:	f887 311c 	strb.w	r3, [r7, #284]	; 0x11c

	uint8_t bffr[260] = {0};
 8001796:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800179a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800179e:	2200      	movs	r2, #0
 80017a0:	601a      	str	r2, [r3, #0]
 80017a2:	3304      	adds	r3, #4
 80017a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017a8:	2100      	movs	r1, #0
 80017aa:	4618      	mov	r0, r3
 80017ac:	f00b fb5c 	bl	800ce68 <memset>
		uint8_t  U8[4];
		uint32_t U32;
	}loga;

	//// block from do sth in danger zone (option bytes, system memory)
	if(addr32 >= 0x1FFF0000 && addr32 <= 0x1FFFFFFF){
 80017b0:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80017b4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a77      	ldr	r2, [pc, #476]	; (8001998 <BL_UART_WriteMem+0x254>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d909      	bls.n	80017d4 <BL_UART_WriteMem+0x90>
 80017c0:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80017c4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80017ce:	d201      	bcs.n	80017d4 <BL_UART_WriteMem+0x90>
		return UB_ParamERR;
 80017d0:	23bc      	movs	r3, #188	; 0xbc
 80017d2:	e0dc      	b.n	800198e <BL_UART_WriteMem+0x24a>
	}

	loga.U32 = addr32;
 80017d4:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80017d8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80017dc:	f507 7294 	add.w	r2, r7, #296	; 0x128
 80017e0:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 80017e4:	6812      	ldr	r2, [r2, #0]
 80017e6:	601a      	str	r2, [r3, #0]
	//// prepare address byte 3: MSB, byte 6: LSB
	addr8[0] = loga.U8[3];
 80017e8:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80017ec:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80017f0:	78db      	ldrb	r3, [r3, #3]
 80017f2:	f887 3118 	strb.w	r3, [r7, #280]	; 0x118
	addr8[1] = loga.U8[2];
 80017f6:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80017fa:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80017fe:	789b      	ldrb	r3, [r3, #2]
 8001800:	f887 3119 	strb.w	r3, [r7, #281]	; 0x119
	addr8[2] = loga.U8[1];
 8001804:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001808:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800180c:	785b      	ldrb	r3, [r3, #1]
 800180e:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
	addr8[3] = loga.U8[0];
 8001812:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001816:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b

	//// XOR Chksum addr
	addr8[4] = addr8[0]^addr8[1]^addr8[2]^addr8[3];
 8001820:	f897 2118 	ldrb.w	r2, [r7, #280]	; 0x118
 8001824:	f897 3119 	ldrb.w	r3, [r7, #281]	; 0x119
 8001828:	4053      	eors	r3, r2
 800182a:	b2da      	uxtb	r2, r3
 800182c:	f897 311a 	ldrb.w	r3, [r7, #282]	; 0x11a
 8001830:	4053      	eors	r3, r2
 8001832:	b2da      	uxtb	r2, r3
 8001834:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8001838:	4053      	eors	r3, r2
 800183a:	b2db      	uxtb	r3, r3
 800183c:	f887 311c 	strb.w	r3, [r7, #284]	; 0x11c

	//// XOR Chksum  (XOR of N and of all data bytes)
	numbytx[0] = numbyte;
 8001840:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001844:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	f887 3120 	strb.w	r3, [r7, #288]	; 0x120

	bffr[0] = numbyte;
 800184e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001852:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001856:	f507 7294 	add.w	r2, r7, #296	; 0x128
 800185a:	f2a2 1221 	subw	r2, r2, #289	; 0x121
 800185e:	7812      	ldrb	r2, [r2, #0]
 8001860:	701a      	strb	r2, [r3, #0]

	numbytx[1] = numbyte;
 8001862:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001866:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	f887 3121 	strb.w	r3, [r7, #289]	; 0x121
	for(register int i = 0;i <= numbyte;i++){
 8001870:	2400      	movs	r4, #0
 8001872:	e01c      	b.n	80018ae <BL_UART_WriteMem+0x16a>
		numbytx[1] = numbytx[1]^wdatum[i];
 8001874:	f897 2121 	ldrb.w	r2, [r7, #289]	; 0x121
 8001878:	4621      	mov	r1, r4
 800187a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800187e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	440b      	add	r3, r1
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	4053      	eors	r3, r2
 800188a:	b2db      	uxtb	r3, r3
 800188c:	f887 3121 	strb.w	r3, [r7, #289]	; 0x121
		//// try
		bffr[i+1] = wdatum[i]; // bffr[i] = wdatum[i];
 8001890:	4622      	mov	r2, r4
 8001892:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001896:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	441a      	add	r2, r3
 800189e:	1c63      	adds	r3, r4, #1
 80018a0:	7811      	ldrb	r1, [r2, #0]
 80018a2:	f507 7294 	add.w	r2, r7, #296	; 0x128
 80018a6:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
 80018aa:	54d1      	strb	r1, [r2, r3]
	for(register int i = 0;i <= numbyte;i++){
 80018ac:	3401      	adds	r4, #1
 80018ae:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80018b2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	429c      	cmp	r4, r3
 80018ba:	dddb      	ble.n	8001874 <BL_UART_WriteMem+0x130>
	}

	// add chksum to the last buffer,
	bffr[numbyte+2] = numbytx[1];
 80018bc:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80018c0:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	3302      	adds	r3, #2
 80018c8:	f897 1121 	ldrb.w	r1, [r7, #289]	; 0x121
 80018cc:	f507 7294 	add.w	r2, r7, #296	; 0x128
 80018d0:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
 80018d4:	54d1      	strb	r1, [r2, r3]

	//// Bytes 1-2
	HAL_UART_Transmit(huart, &Start_WM[0], 2, 10);
 80018d6:	f507 7192 	add.w	r1, r7, #292	; 0x124
 80018da:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80018de:	f5a3 708e 	sub.w	r0, r3, #284	; 0x11c
 80018e2:	230a      	movs	r3, #10
 80018e4:	2202      	movs	r2, #2
 80018e6:	6800      	ldr	r0, [r0, #0]
 80018e8:	f00a f83d 	bl	800b966 <HAL_UART_Transmit>

	response = BL_UART_wait_ACK(huart, 10);
 80018ec:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80018f0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80018f4:	210a      	movs	r1, #10
 80018f6:	6818      	ldr	r0, [r3, #0]
 80018f8:	f000 f896 	bl	8001a28 <BL_UART_wait_ACK>
 80018fc:	4603      	mov	r3, r0
 80018fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
	if(response == UB_ACK){
 8001902:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8001906:	2b79      	cmp	r3, #121	; 0x79
 8001908:	d140      	bne.n	800198c <BL_UART_WriteMem+0x248>

		//// Bytes 3-6 Send ADDR Bytes +
		//// Byte  7 chksum
		HAL_UART_Transmit(huart, &addr8[0], 5, 15);
 800190a:	f507 718c 	add.w	r1, r7, #280	; 0x118
 800190e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001912:	f5a3 708e 	sub.w	r0, r3, #284	; 0x11c
 8001916:	230f      	movs	r3, #15
 8001918:	2205      	movs	r2, #5
 800191a:	6800      	ldr	r0, [r0, #0]
 800191c:	f00a f823 	bl	800b966 <HAL_UART_Transmit>

		response = BL_UART_wait_ACK(huart, 10);
 8001920:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001924:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001928:	210a      	movs	r1, #10
 800192a:	6818      	ldr	r0, [r3, #0]
 800192c:	f000 f87c 	bl	8001a28 <BL_UART_wait_ACK>
 8001930:	4603      	mov	r3, r0
 8001932:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
		if(response == UB_ACK){
 8001936:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800193a:	2b79      	cmp	r3, #121	; 0x79
 800193c:	d124      	bne.n	8001988 <BL_UART_WriteMem+0x244>
//			HAL_UART_Transmit(huart, wdatum, numbyte+1, 100);
//			HAL_UART_Transmit(huart, &numbytx[1], 1, 5); //// chksum

			//// byte 8-n numbyte+ Writedata +chksum
			//HAL_UART_Transmit(huart, &numbytx[0], 1, 5);
			HAL_UART_Transmit(huart, bffr, numbyte+3, 100); //
 800193e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001942:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	b29b      	uxth	r3, r3
 800194a:	3303      	adds	r3, #3
 800194c:	b29a      	uxth	r2, r3
 800194e:	f107 0114 	add.w	r1, r7, #20
 8001952:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001956:	f5a3 708e 	sub.w	r0, r3, #284	; 0x11c
 800195a:	2364      	movs	r3, #100	; 0x64
 800195c:	6800      	ldr	r0, [r0, #0]
 800195e:	f00a f802 	bl	800b966 <HAL_UART_Transmit>

			response = BL_UART_wait_ACK(huart, 10);
 8001962:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001966:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800196a:	210a      	movs	r1, #10
 800196c:	6818      	ldr	r0, [r3, #0]
 800196e:	f000 f85b 	bl	8001a28 <BL_UART_wait_ACK>
 8001972:	4603      	mov	r3, r0
 8001974:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
			if(response == UB_ACK){
 8001978:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800197c:	2b79      	cmp	r3, #121	; 0x79
 800197e:	d101      	bne.n	8001984 <BL_UART_WriteMem+0x240>
				return UB_ACK;
 8001980:	2379      	movs	r3, #121	; 0x79
 8001982:	e004      	b.n	800198e <BL_UART_WriteMem+0x24a>
			}else{return UB_NACK;}
 8001984:	231f      	movs	r3, #31
 8001986:	e002      	b.n	800198e <BL_UART_WriteMem+0x24a>


		}else{return UB_NACK;}
 8001988:	231f      	movs	r3, #31
 800198a:	e000      	b.n	800198e <BL_UART_WriteMem+0x24a>

	}else{return UB_NACK;}
 800198c:	231f      	movs	r3, #31

	return UB_NACK;
}
 800198e:	4618      	mov	r0, r3
 8001990:	f507 7796 	add.w	r7, r7, #300	; 0x12c
 8001994:	46bd      	mov	sp, r7
 8001996:	bd90      	pop	{r4, r7, pc}
 8001998:	1ffeffff 	.word	0x1ffeffff

0800199c <BL_UART_ExtendEraseMem_SP>:

UARTBootloader_state BL_UART_ExtendEraseMem_SP(UART_HandleTypeDef *huart,UARTBootloader_Erase_CMD erasa){
 800199c:	b580      	push	{r7, lr}
 800199e:	b086      	sub	sp, #24
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	460b      	mov	r3, r1
 80019a6:	807b      	strh	r3, [r7, #2]
	 * @param huart   - Pointer to a UART_HandleTypeDef structure that contains
     *                  the configuration information for the specified UART module.
     * @param erasa N number of pages to be erased, Use UARTBootloader_Erase_CMD as special erase
	 *
	 * */
	uint8_t Start_EER[2] = {0x44, 0xBB};
 80019a8:	f64b 3344 	movw	r3, #47940	; 0xbb44
 80019ac:	82bb      	strh	r3, [r7, #20]
	uint8_t response = 0;
 80019ae:	2300      	movs	r3, #0
 80019b0:	75fb      	strb	r3, [r7, #23]
	uint8_t cmd[3] = {0};
 80019b2:	4b1c      	ldr	r3, [pc, #112]	; (8001a24 <BL_UART_ExtendEraseMem_SP+0x88>)
 80019b4:	881b      	ldrh	r3, [r3, #0]
 80019b6:	823b      	strh	r3, [r7, #16]
 80019b8:	2300      	movs	r3, #0
 80019ba:	74bb      	strb	r3, [r7, #18]
	union{
		uint8_t  U8[2];
		uint16_t U16;
	}loga;

	loga.U16 = erasa;
 80019bc:	887b      	ldrh	r3, [r7, #2]
 80019be:	81bb      	strh	r3, [r7, #12]

	//// prepare Special erase CMD & Chksum
	cmd[0] = loga.U8[1];
 80019c0:	7b7b      	ldrb	r3, [r7, #13]
 80019c2:	743b      	strb	r3, [r7, #16]
	cmd[1] = loga.U8[0];
 80019c4:	7b3b      	ldrb	r3, [r7, #12]
 80019c6:	747b      	strb	r3, [r7, #17]
	cmd[2] = loga.U8[0]^loga.U8[1];
 80019c8:	7b3a      	ldrb	r2, [r7, #12]
 80019ca:	7b7b      	ldrb	r3, [r7, #13]
 80019cc:	4053      	eors	r3, r2
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	74bb      	strb	r3, [r7, #18]

	//// Bytes 1-2
	HAL_UART_Transmit(huart, &Start_EER[0], 2, 10);
 80019d2:	f107 0114 	add.w	r1, r7, #20
 80019d6:	230a      	movs	r3, #10
 80019d8:	2202      	movs	r2, #2
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f009 ffc3 	bl	800b966 <HAL_UART_Transmit>

	response = BL_UART_wait_ACK(huart, 10);
 80019e0:	210a      	movs	r1, #10
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f000 f820 	bl	8001a28 <BL_UART_wait_ACK>
 80019e8:	4603      	mov	r3, r0
 80019ea:	75fb      	strb	r3, [r7, #23]
	if(response == UB_ACK){
 80019ec:	7dfb      	ldrb	r3, [r7, #23]
 80019ee:	2b79      	cmp	r3, #121	; 0x79
 80019f0:	d113      	bne.n	8001a1a <BL_UART_ExtendEraseMem_SP+0x7e>

		//// Bytes 3-4 Send Special erase +
		//// Byte  5 chksum
		HAL_UART_Transmit(huart, &cmd[0], 3, 15);
 80019f2:	f107 0110 	add.w	r1, r7, #16
 80019f6:	230f      	movs	r3, #15
 80019f8:	2203      	movs	r2, #3
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f009 ffb3 	bl	800b966 <HAL_UART_Transmit>

		response = BL_UART_wait_ACK(huart, 20);
 8001a00:	2114      	movs	r1, #20
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f000 f810 	bl	8001a28 <BL_UART_wait_ACK>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	75fb      	strb	r3, [r7, #23]
		if(response == UB_ACK){
 8001a0c:	7dfb      	ldrb	r3, [r7, #23]
 8001a0e:	2b79      	cmp	r3, #121	; 0x79
 8001a10:	d101      	bne.n	8001a16 <BL_UART_ExtendEraseMem_SP+0x7a>
				return UB_ACK;
 8001a12:	2379      	movs	r3, #121	; 0x79
 8001a14:	e002      	b.n	8001a1c <BL_UART_ExtendEraseMem_SP+0x80>

		}else{return UB_NACK;}
 8001a16:	231f      	movs	r3, #31
 8001a18:	e000      	b.n	8001a1c <BL_UART_ExtendEraseMem_SP+0x80>

	}else{return UB_NACK;}
 8001a1a:	231f      	movs	r3, #31

	return UB_NACK;
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3718      	adds	r7, #24
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	0800fd60 	.word	0x0800fd60

08001a28 <BL_UART_wait_ACK>:
	return BL_UART_wait_ACK(huart, 500);

}


UARTBootloader_state BL_UART_wait_ACK(UART_HandleTypeDef *huart, uint16_t timeout){
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b086      	sub	sp, #24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	460b      	mov	r3, r1
 8001a32:	807b      	strh	r3, [r7, #2]
	uint8_t tick = 1;
 8001a34:	2301      	movs	r3, #1
 8001a36:	75fb      	strb	r3, [r7, #23]
	uint8_t response = 0;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	73fb      	strb	r3, [r7, #15]
	uint32_t timestick;

	timestick = HAL_GetTick() + timeout;
 8001a3c:	f004 ff76 	bl	800692c <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	887b      	ldrh	r3, [r7, #2]
 8001a44:	4413      	add	r3, r2
 8001a46:	613b      	str	r3, [r7, #16]

	while(tick){
 8001a48:	e018      	b.n	8001a7c <BL_UART_wait_ACK+0x54>
		HAL_UART_Receive(huart, &response, 1, 2);
 8001a4a:	f107 010f 	add.w	r1, r7, #15
 8001a4e:	2302      	movs	r3, #2
 8001a50:	2201      	movs	r2, #1
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f00a f819 	bl	800ba8a <HAL_UART_Receive>

		if(response == 0x79){
 8001a58:	7bfb      	ldrb	r3, [r7, #15]
 8001a5a:	2b79      	cmp	r3, #121	; 0x79
 8001a5c:	d101      	bne.n	8001a62 <BL_UART_wait_ACK+0x3a>
			return UB_ACK;
 8001a5e:	2379      	movs	r3, #121	; 0x79
 8001a60:	e010      	b.n	8001a84 <BL_UART_wait_ACK+0x5c>
		}else if(response == 0x1F){
 8001a62:	7bfb      	ldrb	r3, [r7, #15]
 8001a64:	2b1f      	cmp	r3, #31
 8001a66:	d101      	bne.n	8001a6c <BL_UART_wait_ACK+0x44>
			return UB_NACK;
 8001a68:	231f      	movs	r3, #31
 8001a6a:	e00b      	b.n	8001a84 <BL_UART_wait_ACK+0x5c>
		}else{}

		if(HAL_GetTick()>= timestick){
 8001a6c:	f004 ff5e 	bl	800692c <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d801      	bhi.n	8001a7c <BL_UART_wait_ACK+0x54>
			return UB_Timeout;
 8001a78:	23ab      	movs	r3, #171	; 0xab
 8001a7a:	e003      	b.n	8001a84 <BL_UART_wait_ACK+0x5c>
	while(tick){
 8001a7c:	7dfb      	ldrb	r3, [r7, #23]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d1e3      	bne.n	8001a4a <BL_UART_wait_ACK+0x22>
		}
	}
	return UB_NACK;
 8001a82:	231f      	movs	r3, #31
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3718      	adds	r7, #24
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a90:	b09a      	sub	sp, #104	; 0x68
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a94:	f004 fee4 	bl	8006860 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a98:	f000 fa3c 	bl	8001f14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a9c:	f000 fc1e 	bl	80022dc <MX_GPIO_Init>
  MX_DMA_Init();
 8001aa0:	f000 fbfc 	bl	800229c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001aa4:	f000 fba6 	bl	80021f4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001aa8:	f000 fa9c 	bl	8001fe4 <MX_I2C1_Init>
  MX_USART6_UART_Init();
 8001aac:	f000 fbcc 	bl	8002248 <MX_USART6_UART_Init>
  MX_SPI3_Init();
 8001ab0:	f000 fac6 	bl	8002040 <MX_SPI3_Init>
  MX_TIM10_Init();
 8001ab4:	f000 fb4e 	bl	8002154 <MX_TIM10_Init>
  MX_USART1_UART_Init();
 8001ab8:	f000 fb70 	bl	800219c <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8001abc:	f000 faf6 	bl	80020ac <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /// Timers Start
  HAL_TIM_Base_Start_IT(&htim10); // buzzer timer
 8001ac0:	487b      	ldr	r0, [pc, #492]	; (8001cb0 <main+0x224>)
 8001ac2:	f009 fae5 	bl	800b090 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8001ac6:	2104      	movs	r1, #4
 8001ac8:	487a      	ldr	r0, [pc, #488]	; (8001cb4 <main+0x228>)
 8001aca:	f009 fc18 	bl	800b2fe <HAL_TIM_Encoder_Start>
  //// start QEI counter from the center 32768
  TIM3->CNT = 0x8000;
 8001ace:	4a7a      	ldr	r2, [pc, #488]	; (8001cb8 <main+0x22c>)
 8001ad0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ad4:	6253      	str	r3, [r2, #36]	; 0x24
  knobtick[0] = TIM3->CNT;
 8001ad6:	4b78      	ldr	r3, [pc, #480]	; (8001cb8 <main+0x22c>)
 8001ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	4a77      	ldr	r2, [pc, #476]	; (8001cbc <main+0x230>)
 8001ade:	8013      	strh	r3, [r2, #0]

  //// buzzer raram setting
  buzzr.flag = 1;
 8001ae0:	4a77      	ldr	r2, [pc, #476]	; (8001cc0 <main+0x234>)
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	7013      	strb	r3, [r2, #0]
  buzzr.priod_up = 250;
 8001ae6:	4a76      	ldr	r2, [pc, #472]	; (8001cc0 <main+0x234>)
 8001ae8:	23fa      	movs	r3, #250	; 0xfa
 8001aea:	8053      	strh	r3, [r2, #2]
  buzzr.priod_dn = 100;
 8001aec:	4a74      	ldr	r2, [pc, #464]	; (8001cc0 <main+0x234>)
 8001aee:	2364      	movs	r3, #100	; 0x64
 8001af0:	8093      	strh	r3, [r2, #4]
  buzzr.timestamp = 0;
 8001af2:	4a73      	ldr	r2, [pc, #460]	; (8001cc0 <main+0x234>)
 8001af4:	2300      	movs	r3, #0
 8001af6:	6093      	str	r3, [r2, #8]

  stboxp.flag_start = 0;
 8001af8:	4a72      	ldr	r2, [pc, #456]	; (8001cc4 <main+0x238>)
 8001afa:	2300      	movs	r3, #0
 8001afc:	7013      	strb	r3, [r2, #0]
  stboxp.choice_set = bpoxy_lobby;
 8001afe:	4a71      	ldr	r2, [pc, #452]	; (8001cc4 <main+0x238>)
 8001b00:	2301      	movs	r3, #1
 8001b02:	7053      	strb	r3, [r2, #1]
  stboxp.ch_is = 0;
 8001b04:	4a6f      	ldr	r2, [pc, #444]	; (8001cc4 <main+0x238>)
 8001b06:	2300      	movs	r3, #0
 8001b08:	7093      	strb	r3, [r2, #2]

  gScr.counter_overcurrent = 0;
 8001b0a:	4a6f      	ldr	r2, [pc, #444]	; (8001cc8 <main+0x23c>)
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	7053      	strb	r3, [r2, #1]
  gScr.fullflag = 0;
 8001b10:	4a6d      	ldr	r2, [pc, #436]	; (8001cc8 <main+0x23c>)
 8001b12:	2300      	movs	r3, #0
 8001b14:	7013      	strb	r3, [r2, #0]

  k_flag.cnt = 0; k_flag.dn = 0; k_flag.up = 0;
 8001b16:	4a6d      	ldr	r2, [pc, #436]	; (8001ccc <main+0x240>)
 8001b18:	2300      	movs	r3, #0
 8001b1a:	7093      	strb	r3, [r2, #2]
 8001b1c:	4a6b      	ldr	r2, [pc, #428]	; (8001ccc <main+0x240>)
 8001b1e:	2300      	movs	r3, #0
 8001b20:	7053      	strb	r3, [r2, #1]
 8001b22:	4a6a      	ldr	r2, [pc, #424]	; (8001ccc <main+0x240>)
 8001b24:	2300      	movs	r3, #0
 8001b26:	7013      	strb	r3, [r2, #0]

  //// make sure
  HAL_GPIO_WritePin(Client_NRST_Trg_GPIO_PORT, Client_NRST_Trg_GPIO_PIN, GPIO_PIN_RESET);
 8001b28:	2200      	movs	r2, #0
 8001b2a:	2140      	movs	r1, #64	; 0x40
 8001b2c:	4868      	ldr	r0, [pc, #416]	; (8001cd0 <main+0x244>)
 8001b2e:	f005 fdeb 	bl	8007708 <HAL_GPIO_WritePin>


  ili9341_Init();
 8001b32:	f003 fe4b 	bl	80057cc <ili9341_Init>
  ili9341_DisplayOn();
 8001b36:	f003 fe2d 	bl	8005794 <ili9341_DisplayOn>
//  ili9341_FillRect(50, 20, 50, 20, cl_RED);
//  ili9341_FillRect(100, 20, 50, 20, cl_GREEN);
//  ili9341_FillRect(150, 20, 50, 20, cl_BLUE);

#ifdef INA219_Wrk
  INA219_INIT_Calibrate(&hi2c1, INA219_ADDR_1);
 8001b3a:	2180      	movs	r1, #128	; 0x80
 8001b3c:	4865      	ldr	r0, [pc, #404]	; (8001cd4 <main+0x248>)
 8001b3e:	f7ff fa2f 	bl	8000fa0 <INA219_INIT_Calibrate>
  INA219_INIT_Calibrate(&hi2c1, INA219_ADDR_2);
 8001b42:	2188      	movs	r1, #136	; 0x88
 8001b44:	4863      	ldr	r0, [pc, #396]	; (8001cd4 <main+0x248>)
 8001b46:	f7ff fa2b 	bl	8000fa0 <INA219_INIT_Calibrate>
//
//  INA219_INIT(&hi2c1, INA219_ADDR_1, cofgra);
//  INA219_Calibrate(&hi2c1, INA219_ADDR_1);
#endif

  char temp[]="----------------- F411_Verita_Master --------------------\r\n";
 8001b4a:	4b63      	ldr	r3, [pc, #396]	; (8001cd8 <main+0x24c>)
 8001b4c:	f107 052c 	add.w	r5, r7, #44	; 0x2c
 8001b50:	461c      	mov	r4, r3
 8001b52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b5e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001b62:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 8001b66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7fe fb38 	bl	80001e0 <strlen>
 8001b70:	4603      	mov	r3, r0
 8001b72:	b29a      	uxth	r2, r3
 8001b74:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001b78:	230a      	movs	r3, #10
 8001b7a:	4858      	ldr	r0, [pc, #352]	; (8001cdc <main+0x250>)
 8001b7c:	f009 fef3 	bl	800b966 <HAL_UART_Transmit>


////  ------------- UART Recieve --------------------------
   HAL_UART_Receive_DMA(&huart6, RxBufferMtCl, RxbufferSize_VRT);
 8001b80:	2209      	movs	r2, #9
 8001b82:	4957      	ldr	r1, [pc, #348]	; (8001ce0 <main+0x254>)
 8001b84:	4857      	ldr	r0, [pc, #348]	; (8001ce4 <main+0x258>)
 8001b86:	f00a f822 	bl	800bbce <HAL_UART_Receive_DMA>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  //// -------- buzzer & Button -----------------
	  Button_machine();
 8001b8a:	f000 fd55 	bl	8002638 <Button_machine>
	  //Rx_Verita_engine(RxBufferMtCl, &VRB_CL); //  Use callback instead
	  //Tx_Rq_Verita_engine(&huart6, &VRB_CL);
	  //// ----------------------------------------------------


	  if (HAL_GetTick() >= timestamp_buzbtn){
 8001b8e:	f004 fecd 	bl	800692c <HAL_GetTick>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2200      	movs	r2, #0
 8001b96:	469a      	mov	sl, r3
 8001b98:	4693      	mov	fp, r2
 8001b9a:	4b53      	ldr	r3, [pc, #332]	; (8001ce8 <main+0x25c>)
 8001b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba0:	4592      	cmp	sl, r2
 8001ba2:	eb7b 0303 	sbcs.w	r3, fp, r3
 8001ba6:	f0c0 80a5 	bcc.w	8001cf4 <main+0x268>
		timestamp_buzbtn += 20;
 8001baa:	4b4f      	ldr	r3, [pc, #316]	; (8001ce8 <main+0x25c>)
 8001bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bb0:	f112 0114 	adds.w	r1, r2, #20
 8001bb4:	6239      	str	r1, [r7, #32]
 8001bb6:	f143 0300 	adc.w	r3, r3, #0
 8001bba:	627b      	str	r3, [r7, #36]	; 0x24
 8001bbc:	4b4a      	ldr	r3, [pc, #296]	; (8001ce8 <main+0x25c>)
 8001bbe:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8001bc2:	e9c3 1200 	strd	r1, r2, [r3]

		knob_rotter();
 8001bc6:	f000 fda5 	bl	8002714 <knob_rotter>
		//running_box();
		//if(stboxp.choice_set){

		switch (boxpoint_runner){
 8001bca:	4b48      	ldr	r3, [pc, #288]	; (8001cec <main+0x260>)
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d045      	beq.n	8001c5e <main+0x1d2>

		default:
		case a_wait:

			if(k_flag.up){
 8001bd2:	4b3e      	ldr	r3, [pc, #248]	; (8001ccc <main+0x240>)
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d00b      	beq.n	8001bf2 <main+0x166>

				stboxp.ch_is++;
 8001bda:	4b3a      	ldr	r3, [pc, #232]	; (8001cc4 <main+0x238>)
 8001bdc:	789b      	ldrb	r3, [r3, #2]
 8001bde:	3301      	adds	r3, #1
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	4a38      	ldr	r2, [pc, #224]	; (8001cc4 <main+0x238>)
 8001be4:	7093      	strb	r3, [r2, #2]

				k_flag.up = 0;
 8001be6:	4a39      	ldr	r2, [pc, #228]	; (8001ccc <main+0x240>)
 8001be8:	2300      	movs	r3, #0
 8001bea:	7013      	strb	r3, [r2, #0]
				boxpoint_runner = a_change;}
 8001bec:	4a3f      	ldr	r2, [pc, #252]	; (8001cec <main+0x260>)
 8001bee:	2301      	movs	r3, #1
 8001bf0:	7013      	strb	r3, [r2, #0]
			if(k_flag.dn){
 8001bf2:	4b36      	ldr	r3, [pc, #216]	; (8001ccc <main+0x240>)
 8001bf4:	785b      	ldrb	r3, [r3, #1]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d01d      	beq.n	8001c36 <main+0x1aa>
				//stboxp.ch_is--;
				//stboxp.ch_is = (stboxp.ch_is < 0) ? bposxy[stboxp.choice_set].n_s - 1 : stboxp.ch_is;
				//if(stboxp.ch_is  < 0){
				//	stboxp.ch_is  = bposxy[stboxp.choice_set].n_s - 1;}

				if(stboxp.ch_is == 0){
 8001bfa:	4b32      	ldr	r3, [pc, #200]	; (8001cc4 <main+0x238>)
 8001bfc:	789b      	ldrb	r3, [r3, #2]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d10d      	bne.n	8001c1e <main+0x192>
						stboxp.ch_is  = bposxy[stboxp.choice_set].n_s - 1;}
 8001c02:	4b30      	ldr	r3, [pc, #192]	; (8001cc4 <main+0x238>)
 8001c04:	785b      	ldrb	r3, [r3, #1]
 8001c06:	4619      	mov	r1, r3
 8001c08:	4a39      	ldr	r2, [pc, #228]	; (8001cf0 <main+0x264>)
 8001c0a:	232a      	movs	r3, #42	; 0x2a
 8001c0c:	fb01 f303 	mul.w	r3, r1, r3
 8001c10:	4413      	add	r3, r2
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	3b01      	subs	r3, #1
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	4a2a      	ldr	r2, [pc, #168]	; (8001cc4 <main+0x238>)
 8001c1a:	7093      	strb	r3, [r2, #2]
 8001c1c:	e005      	b.n	8001c2a <main+0x19e>
				else{stboxp.ch_is--;}
 8001c1e:	4b29      	ldr	r3, [pc, #164]	; (8001cc4 <main+0x238>)
 8001c20:	789b      	ldrb	r3, [r3, #2]
 8001c22:	3b01      	subs	r3, #1
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	4a27      	ldr	r2, [pc, #156]	; (8001cc4 <main+0x238>)
 8001c28:	7093      	strb	r3, [r2, #2]

				 k_flag.dn = 0;
 8001c2a:	4a28      	ldr	r2, [pc, #160]	; (8001ccc <main+0x240>)
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	7053      	strb	r3, [r2, #1]
				 boxpoint_runner = a_change;}
 8001c30:	4a2e      	ldr	r2, [pc, #184]	; (8001cec <main+0x260>)
 8001c32:	2301      	movs	r3, #1
 8001c34:	7013      	strb	r3, [r2, #0]

			stboxp.ch_is %= bposxy[stboxp.choice_set].n_s; // don't be more than spec of Grandstate sub
 8001c36:	4b23      	ldr	r3, [pc, #140]	; (8001cc4 <main+0x238>)
 8001c38:	7898      	ldrb	r0, [r3, #2]
 8001c3a:	4b22      	ldr	r3, [pc, #136]	; (8001cc4 <main+0x238>)
 8001c3c:	785b      	ldrb	r3, [r3, #1]
 8001c3e:	4619      	mov	r1, r3
 8001c40:	4a2b      	ldr	r2, [pc, #172]	; (8001cf0 <main+0x264>)
 8001c42:	232a      	movs	r3, #42	; 0x2a
 8001c44:	fb01 f303 	mul.w	r3, r1, r3
 8001c48:	4413      	add	r3, r2
 8001c4a:	781a      	ldrb	r2, [r3, #0]
 8001c4c:	fbb0 f3f2 	udiv	r3, r0, r2
 8001c50:	fb02 f303 	mul.w	r3, r2, r3
 8001c54:	1ac3      	subs	r3, r0, r3
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	4a1a      	ldr	r2, [pc, #104]	; (8001cc4 <main+0x238>)
 8001c5a:	7093      	strb	r3, [r2, #2]

			break;
 8001c5c:	e04b      	b.n	8001cf6 <main+0x26a>

		case a_change:

			box_pointer(bposxy[stboxp.choice_set].x[stboxp.ch_is], bposxy[stboxp.choice_set].y[stboxp.ch_is]);
 8001c5e:	4b19      	ldr	r3, [pc, #100]	; (8001cc4 <main+0x238>)
 8001c60:	785b      	ldrb	r3, [r3, #1]
 8001c62:	4618      	mov	r0, r3
 8001c64:	4b17      	ldr	r3, [pc, #92]	; (8001cc4 <main+0x238>)
 8001c66:	789b      	ldrb	r3, [r3, #2]
 8001c68:	461c      	mov	r4, r3
 8001c6a:	4921      	ldr	r1, [pc, #132]	; (8001cf0 <main+0x264>)
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	0052      	lsls	r2, r2, #1
 8001c70:	4402      	add	r2, r0
 8001c72:	00d3      	lsls	r3, r2, #3
 8001c74:	1a9b      	subs	r3, r3, r2
 8001c76:	4423      	add	r3, r4
 8001c78:	005b      	lsls	r3, r3, #1
 8001c7a:	440b      	add	r3, r1
 8001c7c:	885d      	ldrh	r5, [r3, #2]
 8001c7e:	4b11      	ldr	r3, [pc, #68]	; (8001cc4 <main+0x238>)
 8001c80:	785b      	ldrb	r3, [r3, #1]
 8001c82:	4619      	mov	r1, r3
 8001c84:	4b0f      	ldr	r3, [pc, #60]	; (8001cc4 <main+0x238>)
 8001c86:	789b      	ldrb	r3, [r3, #2]
 8001c88:	461c      	mov	r4, r3
 8001c8a:	4819      	ldr	r0, [pc, #100]	; (8001cf0 <main+0x264>)
 8001c8c:	460a      	mov	r2, r1
 8001c8e:	0052      	lsls	r2, r2, #1
 8001c90:	440a      	add	r2, r1
 8001c92:	00d3      	lsls	r3, r2, #3
 8001c94:	1a9b      	subs	r3, r3, r2
 8001c96:	4423      	add	r3, r4
 8001c98:	3308      	adds	r3, #8
 8001c9a:	005b      	lsls	r3, r3, #1
 8001c9c:	4403      	add	r3, r0
 8001c9e:	88db      	ldrh	r3, [r3, #6]
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	4628      	mov	r0, r5
 8001ca4:	f000 fc28 	bl	80024f8 <box_pointer>
			boxpoint_runner = a_wait;
 8001ca8:	4a10      	ldr	r2, [pc, #64]	; (8001cec <main+0x260>)
 8001caa:	2300      	movs	r3, #0
 8001cac:	7013      	strb	r3, [r2, #0]
			break;
 8001cae:	e022      	b.n	8001cf6 <main+0x26a>
 8001cb0:	20000544 	.word	0x20000544
 8001cb4:	200004fc 	.word	0x200004fc
 8001cb8:	40000400 	.word	0x40000400
 8001cbc:	2000088c 	.word	0x2000088c
 8001cc0:	20000878 	.word	0x20000878
 8001cc4:	200008ac 	.word	0x200008ac
 8001cc8:	20000894 	.word	0x20000894
 8001ccc:	20000890 	.word	0x20000890
 8001cd0:	40020800 	.word	0x40020800
 8001cd4:	20000450 	.word	0x20000450
 8001cd8:	0800fd64 	.word	0x0800fd64
 8001cdc:	200005d0 	.word	0x200005d0
 8001ce0:	200007e8 	.word	0x200007e8
 8001ce4:	20000614 	.word	0x20000614
 8001ce8:	20000868 	.word	0x20000868
 8001cec:	200008a8 	.word	0x200008a8
 8001cf0:	2000017c 	.word	0x2000017c

			}
		//}


	  }// timestamp_dis
 8001cf4:	bf00      	nop


	  if (HAL_GetTick() >= timestamp_one){
 8001cf6:	f004 fe19 	bl	800692c <HAL_GetTick>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	61bb      	str	r3, [r7, #24]
 8001d00:	61fa      	str	r2, [r7, #28]
 8001d02:	4b78      	ldr	r3, [pc, #480]	; (8001ee4 <main+0x458>)
 8001d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d08:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8001d0c:	4621      	mov	r1, r4
 8001d0e:	4291      	cmp	r1, r2
 8001d10:	4629      	mov	r1, r5
 8001d12:	eb71 0303 	sbcs.w	r3, r1, r3
 8001d16:	d313      	bcc.n	8001d40 <main+0x2b4>
		  timestamp_one += 500;
 8001d18:	4b72      	ldr	r3, [pc, #456]	; (8001ee4 <main+0x458>)
 8001d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d1e:	f512 71fa 	adds.w	r1, r2, #500	; 0x1f4
 8001d22:	6139      	str	r1, [r7, #16]
 8001d24:	f143 0300 	adc.w	r3, r3, #0
 8001d28:	617b      	str	r3, [r7, #20]
 8001d2a:	4b6e      	ldr	r3, [pc, #440]	; (8001ee4 <main+0x458>)
 8001d2c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001d30:	e9c3 1200 	strd	r1, r2, [r3]
		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001d34:	2120      	movs	r1, #32
 8001d36:	486c      	ldr	r0, [pc, #432]	; (8001ee8 <main+0x45c>)
 8001d38:	f005 fcff 	bl	800773a <HAL_GPIO_TogglePin>

		  GrandState_Verita();
 8001d3c:	f000 ff50 	bl	8002be0 <GrandState_Verita>

		  } // timestamp_one


	  if(HAL_GetTick() >= timestamp_sensors + 125){
 8001d40:	f004 fdf4 	bl	800692c <HAL_GetTick>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2200      	movs	r2, #0
 8001d48:	60bb      	str	r3, [r7, #8]
 8001d4a:	60fa      	str	r2, [r7, #12]
 8001d4c:	4b67      	ldr	r3, [pc, #412]	; (8001eec <main+0x460>)
 8001d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d52:	f112 087d 	adds.w	r8, r2, #125	; 0x7d
 8001d56:	f143 0900 	adc.w	r9, r3, #0
 8001d5a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001d5e:	460b      	mov	r3, r1
 8001d60:	4543      	cmp	r3, r8
 8001d62:	4613      	mov	r3, r2
 8001d64:	eb73 0309 	sbcs.w	r3, r3, r9
 8001d68:	f4ff af0f 	bcc.w	8001b8a <main+0xfe>
		  timestamp_sensors = HAL_GetTick(); // in case this func is temporary terminate, can continue
 8001d6c:	f004 fdde 	bl	800692c <HAL_GetTick>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2200      	movs	r2, #0
 8001d74:	603b      	str	r3, [r7, #0]
 8001d76:	607a      	str	r2, [r7, #4]
 8001d78:	4b5c      	ldr	r3, [pc, #368]	; (8001eec <main+0x460>)
 8001d7a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001d7e:	e9c3 1200 	strd	r1, r2, [r3]
		   *  - MCP3208 CH[0..7]
		   *  - Client's MCU temp rwquest
		   * */

		  //if(GrandState != pre_gpio_chk){
		  if(GrandState == monitor || GrandState == gpio_chk){
 8001d82:	4b5b      	ldr	r3, [pc, #364]	; (8001ef0 <main+0x464>)
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	2b0c      	cmp	r3, #12
 8001d88:	d003      	beq.n	8001d92 <main+0x306>
 8001d8a:	4b59      	ldr	r3, [pc, #356]	; (8001ef0 <main+0x464>)
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	2b0e      	cmp	r3, #14
 8001d90:	d104      	bne.n	8001d9c <main+0x310>
			  Tx_UART_Verita_Command(&huart6, VRC_Request, VR_CPU_Temp);// request first > pending > convert
 8001d92:	2211      	movs	r2, #17
 8001d94:	21a0      	movs	r1, #160	; 0xa0
 8001d96:	4857      	ldr	r0, [pc, #348]	; (8001ef4 <main+0x468>)
 8001d98:	f7ff fc4a 	bl	8001630 <Tx_UART_Verita_Command>
		  }


		  inata.Bus_V   = INA219Read_BusV(&hi2c1, INA219_ADDR_1);
 8001d9c:	2180      	movs	r1, #128	; 0x80
 8001d9e:	4856      	ldr	r0, [pc, #344]	; (8001ef8 <main+0x46c>)
 8001da0:	f7ff f9ae 	bl	8001100 <INA219Read_BusV>
 8001da4:	4603      	mov	r3, r0
 8001da6:	4a55      	ldr	r2, [pc, #340]	; (8001efc <main+0x470>)
 8001da8:	8213      	strh	r3, [r2, #16]
		  inata.CURRENT = INA219Read_Current(&hi2c1, INA219_ADDR_1);
 8001daa:	2180      	movs	r1, #128	; 0x80
 8001dac:	4852      	ldr	r0, [pc, #328]	; (8001ef8 <main+0x46c>)
 8001dae:	f7ff f9cf 	bl	8001150 <INA219Read_Current>
 8001db2:	4603      	mov	r3, r0
 8001db4:	b21b      	sxth	r3, r3
 8001db6:	4a51      	ldr	r2, [pc, #324]	; (8001efc <main+0x470>)
 8001db8:	8113      	strh	r3, [r2, #8]
		  inata.POWER   = INA219Read_Power(&hi2c1, INA219_ADDR_1);
 8001dba:	2180      	movs	r1, #128	; 0x80
 8001dbc:	484e      	ldr	r0, [pc, #312]	; (8001ef8 <main+0x46c>)
 8001dbe:	f7ff fa27 	bl	8001210 <INA219Read_Power>
 8001dc2:	eef0 7a40 	vmov.f32	s15, s0
 8001dc6:	4b4d      	ldr	r3, [pc, #308]	; (8001efc <main+0x470>)
 8001dc8:	edc3 7a03 	vstr	s15, [r3, #12]
		  inata.SHUNT_V = INA219Read_ShuntV(&hi2c1, INA219_ADDR_1);
 8001dcc:	2180      	movs	r1, #128	; 0x80
 8001dce:	484a      	ldr	r0, [pc, #296]	; (8001ef8 <main+0x46c>)
 8001dd0:	f7ff f9e2 	bl	8001198 <INA219Read_ShuntV>
 8001dd4:	eef0 7a40 	vmov.f32	s15, s0
 8001dd8:	4b48      	ldr	r3, [pc, #288]	; (8001efc <main+0x470>)
 8001dda:	edc3 7a01 	vstr	s15, [r3, #4]

		  inatb.Bus_V   = INA219Read_BusV(&hi2c1, INA219_ADDR_2);
 8001dde:	2188      	movs	r1, #136	; 0x88
 8001de0:	4845      	ldr	r0, [pc, #276]	; (8001ef8 <main+0x46c>)
 8001de2:	f7ff f98d 	bl	8001100 <INA219Read_BusV>
 8001de6:	4603      	mov	r3, r0
 8001de8:	4a45      	ldr	r2, [pc, #276]	; (8001f00 <main+0x474>)
 8001dea:	8213      	strh	r3, [r2, #16]
		  inatb.CURRENT = INA219Read_Current(&hi2c1, INA219_ADDR_2);
 8001dec:	2188      	movs	r1, #136	; 0x88
 8001dee:	4842      	ldr	r0, [pc, #264]	; (8001ef8 <main+0x46c>)
 8001df0:	f7ff f9ae 	bl	8001150 <INA219Read_Current>
 8001df4:	4603      	mov	r3, r0
 8001df6:	b21b      	sxth	r3, r3
 8001df8:	4a41      	ldr	r2, [pc, #260]	; (8001f00 <main+0x474>)
 8001dfa:	8113      	strh	r3, [r2, #8]
		  inatb.POWER   = INA219Read_Power(&hi2c1, INA219_ADDR_2);
 8001dfc:	2188      	movs	r1, #136	; 0x88
 8001dfe:	483e      	ldr	r0, [pc, #248]	; (8001ef8 <main+0x46c>)
 8001e00:	f7ff fa06 	bl	8001210 <INA219Read_Power>
 8001e04:	eef0 7a40 	vmov.f32	s15, s0
 8001e08:	4b3d      	ldr	r3, [pc, #244]	; (8001f00 <main+0x474>)
 8001e0a:	edc3 7a03 	vstr	s15, [r3, #12]
		  inatb.SHUNT_V = INA219Read_ShuntV(&hi2c1, INA219_ADDR_2);
 8001e0e:	2188      	movs	r1, #136	; 0x88
 8001e10:	4839      	ldr	r0, [pc, #228]	; (8001ef8 <main+0x46c>)
 8001e12:	f7ff f9c1 	bl	8001198 <INA219Read_ShuntV>
 8001e16:	eef0 7a40 	vmov.f32	s15, s0
 8001e1a:	4b39      	ldr	r3, [pc, #228]	; (8001f00 <main+0x474>)
 8001e1c:	edc3 7a01 	vstr	s15, [r3, #4]

		  mcp_read.raw[0] = MCP3208_READ_8_DataSPI(&hspi3, M8_CH0);
 8001e20:	2118      	movs	r1, #24
 8001e22:	4838      	ldr	r0, [pc, #224]	; (8001f04 <main+0x478>)
 8001e24:	f7ff fa3e 	bl	80012a4 <MCP3208_READ_8_DataSPI>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	4a37      	ldr	r2, [pc, #220]	; (8001f08 <main+0x47c>)
 8001e2c:	8013      	strh	r3, [r2, #0]
		  mcp_read.raw[1] = MCP3208_READ_8_DataSPI(&hspi3, M8_CH1);
 8001e2e:	2119      	movs	r1, #25
 8001e30:	4834      	ldr	r0, [pc, #208]	; (8001f04 <main+0x478>)
 8001e32:	f7ff fa37 	bl	80012a4 <MCP3208_READ_8_DataSPI>
 8001e36:	4603      	mov	r3, r0
 8001e38:	4a33      	ldr	r2, [pc, #204]	; (8001f08 <main+0x47c>)
 8001e3a:	8053      	strh	r3, [r2, #2]
		  mcp_read.raw[2] = MCP3208_READ_8_DataSPI(&hspi3, M8_CH2);
 8001e3c:	211a      	movs	r1, #26
 8001e3e:	4831      	ldr	r0, [pc, #196]	; (8001f04 <main+0x478>)
 8001e40:	f7ff fa30 	bl	80012a4 <MCP3208_READ_8_DataSPI>
 8001e44:	4603      	mov	r3, r0
 8001e46:	4a30      	ldr	r2, [pc, #192]	; (8001f08 <main+0x47c>)
 8001e48:	8093      	strh	r3, [r2, #4]
		  mcp_read.raw[3] = MCP3208_READ_8_DataSPI(&hspi3, M8_CH3);
 8001e4a:	211b      	movs	r1, #27
 8001e4c:	482d      	ldr	r0, [pc, #180]	; (8001f04 <main+0x478>)
 8001e4e:	f7ff fa29 	bl	80012a4 <MCP3208_READ_8_DataSPI>
 8001e52:	4603      	mov	r3, r0
 8001e54:	4a2c      	ldr	r2, [pc, #176]	; (8001f08 <main+0x47c>)
 8001e56:	80d3      	strh	r3, [r2, #6]
		  mcp_read.raw[4] = MCP3208_READ_8_DataSPI(&hspi3, M8_CH4);
 8001e58:	211c      	movs	r1, #28
 8001e5a:	482a      	ldr	r0, [pc, #168]	; (8001f04 <main+0x478>)
 8001e5c:	f7ff fa22 	bl	80012a4 <MCP3208_READ_8_DataSPI>
 8001e60:	4603      	mov	r3, r0
 8001e62:	4a29      	ldr	r2, [pc, #164]	; (8001f08 <main+0x47c>)
 8001e64:	8113      	strh	r3, [r2, #8]
		  mcp_read.raw[5] = MCP3208_READ_8_DataSPI(&hspi3, M8_CH5);
 8001e66:	211d      	movs	r1, #29
 8001e68:	4826      	ldr	r0, [pc, #152]	; (8001f04 <main+0x478>)
 8001e6a:	f7ff fa1b 	bl	80012a4 <MCP3208_READ_8_DataSPI>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	4a25      	ldr	r2, [pc, #148]	; (8001f08 <main+0x47c>)
 8001e72:	8153      	strh	r3, [r2, #10]
		  mcp_read.raw[6] = MCP3208_READ_8_DataSPI(&hspi3, M8_CH6);
 8001e74:	211e      	movs	r1, #30
 8001e76:	4823      	ldr	r0, [pc, #140]	; (8001f04 <main+0x478>)
 8001e78:	f7ff fa14 	bl	80012a4 <MCP3208_READ_8_DataSPI>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	4a22      	ldr	r2, [pc, #136]	; (8001f08 <main+0x47c>)
 8001e80:	8193      	strh	r3, [r2, #12]
		  mcp_read.raw[7] = MCP3208_READ_8_DataSPI(&hspi3, M8_CH7);
 8001e82:	211f      	movs	r1, #31
 8001e84:	481f      	ldr	r0, [pc, #124]	; (8001f04 <main+0x478>)
 8001e86:	f7ff fa0d 	bl	80012a4 <MCP3208_READ_8_DataSPI>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	4a1e      	ldr	r2, [pc, #120]	; (8001f08 <main+0x47c>)
 8001e8e:	81d3      	strh	r3, [r2, #14]

		  for(register int i = 0;i <= 7;i++){
 8001e90:	2400      	movs	r4, #0
 8001e92:	e00e      	b.n	8001eb2 <main+0x426>
			  mcp_read.cv[i] = MCP320x_ADCbit_to_Volt(mcp_read.raw[i]);
 8001e94:	4b1c      	ldr	r3, [pc, #112]	; (8001f08 <main+0x47c>)
 8001e96:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f7ff fa38 	bl	8001310 <MCP320x_ADCbit_to_Volt>
 8001ea0:	eef0 7a40 	vmov.f32	s15, s0
 8001ea4:	4a18      	ldr	r2, [pc, #96]	; (8001f08 <main+0x47c>)
 8001ea6:	1d23      	adds	r3, r4, #4
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	4413      	add	r3, r2
 8001eac:	edc3 7a00 	vstr	s15, [r3]
		  for(register int i = 0;i <= 7;i++){
 8001eb0:	3401      	adds	r4, #1
 8001eb2:	2c07      	cmp	r4, #7
 8001eb4:	ddee      	ble.n	8001e94 <main+0x408>
		  }


		  client_temp_mcuCC = TempEquat(ADCTVolta(VRB_CL.Mark.cputemp));
 8001eb6:	4b15      	ldr	r3, [pc, #84]	; (8001f0c <main+0x480>)
 8001eb8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f002 ffc7 	bl	8004e50 <ADCTVolta>
 8001ec2:	eef0 7a40 	vmov.f32	s15, s0
 8001ec6:	eeb0 0a67 	vmov.f32	s0, s15
 8001eca:	f002 fff1 	bl	8004eb0 <TempEquat>
 8001ece:	eef0 7a40 	vmov.f32	s15, s0
 8001ed2:	4b0f      	ldr	r3, [pc, #60]	; (8001f10 <main+0x484>)
 8001ed4:	edc3 7a00 	vstr	s15, [r3]


		  Protection_machine();
 8001ed8:	f000 fc6e 	bl	80027b8 <Protection_machine>
		  manual_relay();
 8001edc:	f000 fcb8 	bl	8002850 <manual_relay>
	  Button_machine();
 8001ee0:	e653      	b.n	8001b8a <main+0xfe>
 8001ee2:	bf00      	nop
 8001ee4:	20000858 	.word	0x20000858
 8001ee8:	40020000 	.word	0x40020000
 8001eec:	20000860 	.word	0x20000860
 8001ef0:	20000006 	.word	0x20000006
 8001ef4:	20000614 	.word	0x20000614
 8001ef8:	20000450 	.word	0x20000450
 8001efc:	200007f8 	.word	0x200007f8
 8001f00:	20000810 	.word	0x20000810
 8001f04:	200004a4 	.word	0x200004a4
 8001f08:	20000828 	.word	0x20000828
 8001f0c:	20000784 	.word	0x20000784
 8001f10:	200007f4 	.word	0x200007f4

08001f14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b094      	sub	sp, #80	; 0x50
 8001f18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f1a:	f107 0320 	add.w	r3, r7, #32
 8001f1e:	2230      	movs	r2, #48	; 0x30
 8001f20:	2100      	movs	r1, #0
 8001f22:	4618      	mov	r0, r3
 8001f24:	f00a ffa0 	bl	800ce68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f28:	f107 030c 	add.w	r3, r7, #12
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	601a      	str	r2, [r3, #0]
 8001f30:	605a      	str	r2, [r3, #4]
 8001f32:	609a      	str	r2, [r3, #8]
 8001f34:	60da      	str	r2, [r3, #12]
 8001f36:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f38:	2300      	movs	r3, #0
 8001f3a:	60bb      	str	r3, [r7, #8]
 8001f3c:	4b27      	ldr	r3, [pc, #156]	; (8001fdc <SystemClock_Config+0xc8>)
 8001f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f40:	4a26      	ldr	r2, [pc, #152]	; (8001fdc <SystemClock_Config+0xc8>)
 8001f42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f46:	6413      	str	r3, [r2, #64]	; 0x40
 8001f48:	4b24      	ldr	r3, [pc, #144]	; (8001fdc <SystemClock_Config+0xc8>)
 8001f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f50:	60bb      	str	r3, [r7, #8]
 8001f52:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f54:	2300      	movs	r3, #0
 8001f56:	607b      	str	r3, [r7, #4]
 8001f58:	4b21      	ldr	r3, [pc, #132]	; (8001fe0 <SystemClock_Config+0xcc>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a20      	ldr	r2, [pc, #128]	; (8001fe0 <SystemClock_Config+0xcc>)
 8001f5e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f62:	6013      	str	r3, [r2, #0]
 8001f64:	4b1e      	ldr	r3, [pc, #120]	; (8001fe0 <SystemClock_Config+0xcc>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001f6c:	607b      	str	r3, [r7, #4]
 8001f6e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f70:	2302      	movs	r3, #2
 8001f72:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f74:	2301      	movs	r3, #1
 8001f76:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f78:	2310      	movs	r3, #16
 8001f7a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001f80:	2300      	movs	r3, #0
 8001f82:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001f84:	2308      	movs	r3, #8
 8001f86:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001f88:	2364      	movs	r3, #100	; 0x64
 8001f8a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001f90:	2304      	movs	r3, #4
 8001f92:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f94:	f107 0320 	add.w	r3, r7, #32
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f008 f89b 	bl	800a0d4 <HAL_RCC_OscConfig>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d001      	beq.n	8001fa8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001fa4:	f003 f864 	bl	8005070 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fa8:	230f      	movs	r3, #15
 8001faa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fac:	2302      	movs	r3, #2
 8001fae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001fb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fb8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001fbe:	f107 030c 	add.w	r3, r7, #12
 8001fc2:	2103      	movs	r1, #3
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f008 fafd 	bl	800a5c4 <HAL_RCC_ClockConfig>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d001      	beq.n	8001fd4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001fd0:	f003 f84e 	bl	8005070 <Error_Handler>
  }
}
 8001fd4:	bf00      	nop
 8001fd6:	3750      	adds	r7, #80	; 0x50
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	40023800 	.word	0x40023800
 8001fe0:	40007000 	.word	0x40007000

08001fe4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001fe8:	4b12      	ldr	r3, [pc, #72]	; (8002034 <MX_I2C1_Init+0x50>)
 8001fea:	4a13      	ldr	r2, [pc, #76]	; (8002038 <MX_I2C1_Init+0x54>)
 8001fec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001fee:	4b11      	ldr	r3, [pc, #68]	; (8002034 <MX_I2C1_Init+0x50>)
 8001ff0:	4a12      	ldr	r2, [pc, #72]	; (800203c <MX_I2C1_Init+0x58>)
 8001ff2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ff4:	4b0f      	ldr	r3, [pc, #60]	; (8002034 <MX_I2C1_Init+0x50>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001ffa:	4b0e      	ldr	r3, [pc, #56]	; (8002034 <MX_I2C1_Init+0x50>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002000:	4b0c      	ldr	r3, [pc, #48]	; (8002034 <MX_I2C1_Init+0x50>)
 8002002:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002006:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002008:	4b0a      	ldr	r3, [pc, #40]	; (8002034 <MX_I2C1_Init+0x50>)
 800200a:	2200      	movs	r2, #0
 800200c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800200e:	4b09      	ldr	r3, [pc, #36]	; (8002034 <MX_I2C1_Init+0x50>)
 8002010:	2200      	movs	r2, #0
 8002012:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002014:	4b07      	ldr	r3, [pc, #28]	; (8002034 <MX_I2C1_Init+0x50>)
 8002016:	2200      	movs	r2, #0
 8002018:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800201a:	4b06      	ldr	r3, [pc, #24]	; (8002034 <MX_I2C1_Init+0x50>)
 800201c:	2200      	movs	r2, #0
 800201e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002020:	4804      	ldr	r0, [pc, #16]	; (8002034 <MX_I2C1_Init+0x50>)
 8002022:	f005 fbbd 	bl	80077a0 <HAL_I2C_Init>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d001      	beq.n	8002030 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800202c:	f003 f820 	bl	8005070 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002030:	bf00      	nop
 8002032:	bd80      	pop	{r7, pc}
 8002034:	20000450 	.word	0x20000450
 8002038:	40005400 	.word	0x40005400
 800203c:	00061a80 	.word	0x00061a80

08002040 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8002044:	4b17      	ldr	r3, [pc, #92]	; (80020a4 <MX_SPI3_Init+0x64>)
 8002046:	4a18      	ldr	r2, [pc, #96]	; (80020a8 <MX_SPI3_Init+0x68>)
 8002048:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800204a:	4b16      	ldr	r3, [pc, #88]	; (80020a4 <MX_SPI3_Init+0x64>)
 800204c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002050:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002052:	4b14      	ldr	r3, [pc, #80]	; (80020a4 <MX_SPI3_Init+0x64>)
 8002054:	2200      	movs	r2, #0
 8002056:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002058:	4b12      	ldr	r3, [pc, #72]	; (80020a4 <MX_SPI3_Init+0x64>)
 800205a:	2200      	movs	r2, #0
 800205c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800205e:	4b11      	ldr	r3, [pc, #68]	; (80020a4 <MX_SPI3_Init+0x64>)
 8002060:	2200      	movs	r2, #0
 8002062:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002064:	4b0f      	ldr	r3, [pc, #60]	; (80020a4 <MX_SPI3_Init+0x64>)
 8002066:	2200      	movs	r2, #0
 8002068:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800206a:	4b0e      	ldr	r3, [pc, #56]	; (80020a4 <MX_SPI3_Init+0x64>)
 800206c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002070:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002072:	4b0c      	ldr	r3, [pc, #48]	; (80020a4 <MX_SPI3_Init+0x64>)
 8002074:	2220      	movs	r2, #32
 8002076:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002078:	4b0a      	ldr	r3, [pc, #40]	; (80020a4 <MX_SPI3_Init+0x64>)
 800207a:	2200      	movs	r2, #0
 800207c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800207e:	4b09      	ldr	r3, [pc, #36]	; (80020a4 <MX_SPI3_Init+0x64>)
 8002080:	2200      	movs	r2, #0
 8002082:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002084:	4b07      	ldr	r3, [pc, #28]	; (80020a4 <MX_SPI3_Init+0x64>)
 8002086:	2200      	movs	r2, #0
 8002088:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800208a:	4b06      	ldr	r3, [pc, #24]	; (80020a4 <MX_SPI3_Init+0x64>)
 800208c:	220a      	movs	r2, #10
 800208e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002090:	4804      	ldr	r0, [pc, #16]	; (80020a4 <MX_SPI3_Init+0x64>)
 8002092:	f008 fcb7 	bl	800aa04 <HAL_SPI_Init>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d001      	beq.n	80020a0 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800209c:	f002 ffe8 	bl	8005070 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80020a0:	bf00      	nop
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	200004a4 	.word	0x200004a4
 80020a8:	40003c00 	.word	0x40003c00

080020ac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b08c      	sub	sp, #48	; 0x30
 80020b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80020b2:	f107 030c 	add.w	r3, r7, #12
 80020b6:	2224      	movs	r2, #36	; 0x24
 80020b8:	2100      	movs	r1, #0
 80020ba:	4618      	mov	r0, r3
 80020bc:	f00a fed4 	bl	800ce68 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020c0:	1d3b      	adds	r3, r7, #4
 80020c2:	2200      	movs	r2, #0
 80020c4:	601a      	str	r2, [r3, #0]
 80020c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80020c8:	4b20      	ldr	r3, [pc, #128]	; (800214c <MX_TIM3_Init+0xa0>)
 80020ca:	4a21      	ldr	r2, [pc, #132]	; (8002150 <MX_TIM3_Init+0xa4>)
 80020cc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3;
 80020ce:	4b1f      	ldr	r3, [pc, #124]	; (800214c <MX_TIM3_Init+0xa0>)
 80020d0:	2203      	movs	r2, #3
 80020d2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80020d4:	4b1d      	ldr	r3, [pc, #116]	; (800214c <MX_TIM3_Init+0xa0>)
 80020d6:	2210      	movs	r2, #16
 80020d8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80020da:	4b1c      	ldr	r3, [pc, #112]	; (800214c <MX_TIM3_Init+0xa0>)
 80020dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020e0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020e2:	4b1a      	ldr	r3, [pc, #104]	; (800214c <MX_TIM3_Init+0xa0>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80020e8:	4b18      	ldr	r3, [pc, #96]	; (800214c <MX_TIM3_Init+0xa0>)
 80020ea:	2280      	movs	r2, #128	; 0x80
 80020ec:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80020ee:	2303      	movs	r3, #3
 80020f0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80020f2:	2302      	movs	r3, #2
 80020f4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80020f6:	2301      	movs	r3, #1
 80020f8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV2;
 80020fa:	2304      	movs	r3, #4
 80020fc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 8;
 80020fe:	2308      	movs	r3, #8
 8002100:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8002102:	2302      	movs	r3, #2
 8002104:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002106:	2301      	movs	r3, #1
 8002108:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV2;
 800210a:	2304      	movs	r3, #4
 800210c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 8;
 800210e:	2308      	movs	r3, #8
 8002110:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002112:	f107 030c 	add.w	r3, r7, #12
 8002116:	4619      	mov	r1, r3
 8002118:	480c      	ldr	r0, [pc, #48]	; (800214c <MX_TIM3_Init+0xa0>)
 800211a:	f009 f84a 	bl	800b1b2 <HAL_TIM_Encoder_Init>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d001      	beq.n	8002128 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002124:	f002 ffa4 	bl	8005070 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002128:	2300      	movs	r3, #0
 800212a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800212c:	2300      	movs	r3, #0
 800212e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002130:	1d3b      	adds	r3, r7, #4
 8002132:	4619      	mov	r1, r3
 8002134:	4805      	ldr	r0, [pc, #20]	; (800214c <MX_TIM3_Init+0xa0>)
 8002136:	f009 fb47 	bl	800b7c8 <HAL_TIMEx_MasterConfigSynchronization>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d001      	beq.n	8002144 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002140:	f002 ff96 	bl	8005070 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002144:	bf00      	nop
 8002146:	3730      	adds	r7, #48	; 0x30
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	200004fc 	.word	0x200004fc
 8002150:	40000400 	.word	0x40000400

08002154 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002158:	4b0e      	ldr	r3, [pc, #56]	; (8002194 <MX_TIM10_Init+0x40>)
 800215a:	4a0f      	ldr	r2, [pc, #60]	; (8002198 <MX_TIM10_Init+0x44>)
 800215c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 999;
 800215e:	4b0d      	ldr	r3, [pc, #52]	; (8002194 <MX_TIM10_Init+0x40>)
 8002160:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002164:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002166:	4b0b      	ldr	r3, [pc, #44]	; (8002194 <MX_TIM10_Init+0x40>)
 8002168:	2200      	movs	r2, #0
 800216a:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 4999;
 800216c:	4b09      	ldr	r3, [pc, #36]	; (8002194 <MX_TIM10_Init+0x40>)
 800216e:	f241 3287 	movw	r2, #4999	; 0x1387
 8002172:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002174:	4b07      	ldr	r3, [pc, #28]	; (8002194 <MX_TIM10_Init+0x40>)
 8002176:	2200      	movs	r2, #0
 8002178:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800217a:	4b06      	ldr	r3, [pc, #24]	; (8002194 <MX_TIM10_Init+0x40>)
 800217c:	2280      	movs	r2, #128	; 0x80
 800217e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002180:	4804      	ldr	r0, [pc, #16]	; (8002194 <MX_TIM10_Init+0x40>)
 8002182:	f008 ff35 	bl	800aff0 <HAL_TIM_Base_Init>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d001      	beq.n	8002190 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 800218c:	f002 ff70 	bl	8005070 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8002190:	bf00      	nop
 8002192:	bd80      	pop	{r7, pc}
 8002194:	20000544 	.word	0x20000544
 8002198:	40014400 	.word	0x40014400

0800219c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80021a0:	4b12      	ldr	r3, [pc, #72]	; (80021ec <MX_USART1_UART_Init+0x50>)
 80021a2:	4a13      	ldr	r2, [pc, #76]	; (80021f0 <MX_USART1_UART_Init+0x54>)
 80021a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80021a6:	4b11      	ldr	r3, [pc, #68]	; (80021ec <MX_USART1_UART_Init+0x50>)
 80021a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80021ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 80021ae:	4b0f      	ldr	r3, [pc, #60]	; (80021ec <MX_USART1_UART_Init+0x50>)
 80021b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80021b4:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80021b6:	4b0d      	ldr	r3, [pc, #52]	; (80021ec <MX_USART1_UART_Init+0x50>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 80021bc:	4b0b      	ldr	r3, [pc, #44]	; (80021ec <MX_USART1_UART_Init+0x50>)
 80021be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80021c4:	4b09      	ldr	r3, [pc, #36]	; (80021ec <MX_USART1_UART_Init+0x50>)
 80021c6:	220c      	movs	r2, #12
 80021c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021ca:	4b08      	ldr	r3, [pc, #32]	; (80021ec <MX_USART1_UART_Init+0x50>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80021d0:	4b06      	ldr	r3, [pc, #24]	; (80021ec <MX_USART1_UART_Init+0x50>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80021d6:	4805      	ldr	r0, [pc, #20]	; (80021ec <MX_USART1_UART_Init+0x50>)
 80021d8:	f009 fb78 	bl	800b8cc <HAL_UART_Init>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d001      	beq.n	80021e6 <MX_USART1_UART_Init+0x4a>
  {
    Error_Handler();
 80021e2:	f002 ff45 	bl	8005070 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80021e6:	bf00      	nop
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	2000058c 	.word	0x2000058c
 80021f0:	40011000 	.word	0x40011000

080021f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80021f8:	4b11      	ldr	r3, [pc, #68]	; (8002240 <MX_USART2_UART_Init+0x4c>)
 80021fa:	4a12      	ldr	r2, [pc, #72]	; (8002244 <MX_USART2_UART_Init+0x50>)
 80021fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80021fe:	4b10      	ldr	r3, [pc, #64]	; (8002240 <MX_USART2_UART_Init+0x4c>)
 8002200:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002204:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002206:	4b0e      	ldr	r3, [pc, #56]	; (8002240 <MX_USART2_UART_Init+0x4c>)
 8002208:	2200      	movs	r2, #0
 800220a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800220c:	4b0c      	ldr	r3, [pc, #48]	; (8002240 <MX_USART2_UART_Init+0x4c>)
 800220e:	2200      	movs	r2, #0
 8002210:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002212:	4b0b      	ldr	r3, [pc, #44]	; (8002240 <MX_USART2_UART_Init+0x4c>)
 8002214:	2200      	movs	r2, #0
 8002216:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002218:	4b09      	ldr	r3, [pc, #36]	; (8002240 <MX_USART2_UART_Init+0x4c>)
 800221a:	220c      	movs	r2, #12
 800221c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800221e:	4b08      	ldr	r3, [pc, #32]	; (8002240 <MX_USART2_UART_Init+0x4c>)
 8002220:	2200      	movs	r2, #0
 8002222:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002224:	4b06      	ldr	r3, [pc, #24]	; (8002240 <MX_USART2_UART_Init+0x4c>)
 8002226:	2200      	movs	r2, #0
 8002228:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800222a:	4805      	ldr	r0, [pc, #20]	; (8002240 <MX_USART2_UART_Init+0x4c>)
 800222c:	f009 fb4e 	bl	800b8cc <HAL_UART_Init>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002236:	f002 ff1b 	bl	8005070 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800223a:	bf00      	nop
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	200005d0 	.word	0x200005d0
 8002244:	40004400 	.word	0x40004400

08002248 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800224c:	4b11      	ldr	r3, [pc, #68]	; (8002294 <MX_USART6_UART_Init+0x4c>)
 800224e:	4a12      	ldr	r2, [pc, #72]	; (8002298 <MX_USART6_UART_Init+0x50>)
 8002250:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002252:	4b10      	ldr	r3, [pc, #64]	; (8002294 <MX_USART6_UART_Init+0x4c>)
 8002254:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002258:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800225a:	4b0e      	ldr	r3, [pc, #56]	; (8002294 <MX_USART6_UART_Init+0x4c>)
 800225c:	2200      	movs	r2, #0
 800225e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002260:	4b0c      	ldr	r3, [pc, #48]	; (8002294 <MX_USART6_UART_Init+0x4c>)
 8002262:	2200      	movs	r2, #0
 8002264:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002266:	4b0b      	ldr	r3, [pc, #44]	; (8002294 <MX_USART6_UART_Init+0x4c>)
 8002268:	2200      	movs	r2, #0
 800226a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800226c:	4b09      	ldr	r3, [pc, #36]	; (8002294 <MX_USART6_UART_Init+0x4c>)
 800226e:	220c      	movs	r2, #12
 8002270:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002272:	4b08      	ldr	r3, [pc, #32]	; (8002294 <MX_USART6_UART_Init+0x4c>)
 8002274:	2200      	movs	r2, #0
 8002276:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002278:	4b06      	ldr	r3, [pc, #24]	; (8002294 <MX_USART6_UART_Init+0x4c>)
 800227a:	2200      	movs	r2, #0
 800227c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800227e:	4805      	ldr	r0, [pc, #20]	; (8002294 <MX_USART6_UART_Init+0x4c>)
 8002280:	f009 fb24 	bl	800b8cc <HAL_UART_Init>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d001      	beq.n	800228e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800228a:	f002 fef1 	bl	8005070 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800228e:	bf00      	nop
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	20000614 	.word	0x20000614
 8002298:	40011400 	.word	0x40011400

0800229c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80022a2:	2300      	movs	r3, #0
 80022a4:	607b      	str	r3, [r7, #4]
 80022a6:	4b0c      	ldr	r3, [pc, #48]	; (80022d8 <MX_DMA_Init+0x3c>)
 80022a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022aa:	4a0b      	ldr	r2, [pc, #44]	; (80022d8 <MX_DMA_Init+0x3c>)
 80022ac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80022b0:	6313      	str	r3, [r2, #48]	; 0x30
 80022b2:	4b09      	ldr	r3, [pc, #36]	; (80022d8 <MX_DMA_Init+0x3c>)
 80022b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022ba:	607b      	str	r3, [r7, #4]
 80022bc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80022be:	2200      	movs	r2, #0
 80022c0:	2100      	movs	r1, #0
 80022c2:	2039      	movs	r0, #57	; 0x39
 80022c4:	f004 fc3d 	bl	8006b42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80022c8:	2039      	movs	r0, #57	; 0x39
 80022ca:	f004 fc56 	bl	8006b7a <HAL_NVIC_EnableIRQ>

}
 80022ce:	bf00      	nop
 80022d0:	3708      	adds	r7, #8
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	40023800 	.word	0x40023800

080022dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b08a      	sub	sp, #40	; 0x28
 80022e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022e2:	f107 0314 	add.w	r3, r7, #20
 80022e6:	2200      	movs	r2, #0
 80022e8:	601a      	str	r2, [r3, #0]
 80022ea:	605a      	str	r2, [r3, #4]
 80022ec:	609a      	str	r2, [r3, #8]
 80022ee:	60da      	str	r2, [r3, #12]
 80022f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022f2:	2300      	movs	r3, #0
 80022f4:	613b      	str	r3, [r7, #16]
 80022f6:	4b7b      	ldr	r3, [pc, #492]	; (80024e4 <MX_GPIO_Init+0x208>)
 80022f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fa:	4a7a      	ldr	r2, [pc, #488]	; (80024e4 <MX_GPIO_Init+0x208>)
 80022fc:	f043 0304 	orr.w	r3, r3, #4
 8002300:	6313      	str	r3, [r2, #48]	; 0x30
 8002302:	4b78      	ldr	r3, [pc, #480]	; (80024e4 <MX_GPIO_Init+0x208>)
 8002304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002306:	f003 0304 	and.w	r3, r3, #4
 800230a:	613b      	str	r3, [r7, #16]
 800230c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800230e:	2300      	movs	r3, #0
 8002310:	60fb      	str	r3, [r7, #12]
 8002312:	4b74      	ldr	r3, [pc, #464]	; (80024e4 <MX_GPIO_Init+0x208>)
 8002314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002316:	4a73      	ldr	r2, [pc, #460]	; (80024e4 <MX_GPIO_Init+0x208>)
 8002318:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800231c:	6313      	str	r3, [r2, #48]	; 0x30
 800231e:	4b71      	ldr	r3, [pc, #452]	; (80024e4 <MX_GPIO_Init+0x208>)
 8002320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002322:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002326:	60fb      	str	r3, [r7, #12]
 8002328:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800232a:	2300      	movs	r3, #0
 800232c:	60bb      	str	r3, [r7, #8]
 800232e:	4b6d      	ldr	r3, [pc, #436]	; (80024e4 <MX_GPIO_Init+0x208>)
 8002330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002332:	4a6c      	ldr	r2, [pc, #432]	; (80024e4 <MX_GPIO_Init+0x208>)
 8002334:	f043 0301 	orr.w	r3, r3, #1
 8002338:	6313      	str	r3, [r2, #48]	; 0x30
 800233a:	4b6a      	ldr	r3, [pc, #424]	; (80024e4 <MX_GPIO_Init+0x208>)
 800233c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	60bb      	str	r3, [r7, #8]
 8002344:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002346:	2300      	movs	r3, #0
 8002348:	607b      	str	r3, [r7, #4]
 800234a:	4b66      	ldr	r3, [pc, #408]	; (80024e4 <MX_GPIO_Init+0x208>)
 800234c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234e:	4a65      	ldr	r2, [pc, #404]	; (80024e4 <MX_GPIO_Init+0x208>)
 8002350:	f043 0302 	orr.w	r3, r3, #2
 8002354:	6313      	str	r3, [r2, #48]	; 0x30
 8002356:	4b63      	ldr	r3, [pc, #396]	; (80024e4 <MX_GPIO_Init+0x208>)
 8002358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	607b      	str	r3, [r7, #4]
 8002360:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002362:	2300      	movs	r3, #0
 8002364:	603b      	str	r3, [r7, #0]
 8002366:	4b5f      	ldr	r3, [pc, #380]	; (80024e4 <MX_GPIO_Init+0x208>)
 8002368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236a:	4a5e      	ldr	r2, [pc, #376]	; (80024e4 <MX_GPIO_Init+0x208>)
 800236c:	f043 0308 	orr.w	r3, r3, #8
 8002370:	6313      	str	r3, [r2, #48]	; 0x30
 8002372:	4b5c      	ldr	r3, [pc, #368]	; (80024e4 <MX_GPIO_Init+0x208>)
 8002374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002376:	f003 0308 	and.w	r3, r3, #8
 800237a:	603b      	str	r3, [r7, #0]
 800237c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_RS_Pin|LCD_CS_Pin|LCD_MOSI_Pin|client_NRST_Pin
 800237e:	2200      	movs	r2, #0
 8002380:	f240 314b 	movw	r1, #843	; 0x34b
 8002384:	4858      	ldr	r0, [pc, #352]	; (80024e8 <MX_GPIO_Init+0x20c>)
 8002386:	f005 f9bf 	bl	8007708 <HAL_GPIO_WritePin>
                          |Buzzer_Pin|RelayClient_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RST_Pin|LD2_Pin|boot0_trigger_Pin, GPIO_PIN_RESET);
 800238a:	2200      	movs	r2, #0
 800238c:	f44f 7198 	mov.w	r1, #304	; 0x130
 8002390:	4856      	ldr	r0, [pc, #344]	; (80024ec <MX_GPIO_Init+0x210>)
 8002392:	f005 f9b9 	bl	8007708 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_SCK_GPIO_Port, LCD_SCK_Pin, GPIO_PIN_RESET);
 8002396:	2200      	movs	r2, #0
 8002398:	2101      	movs	r1, #1
 800239a:	4855      	ldr	r0, [pc, #340]	; (80024f0 <MX_GPIO_Init+0x214>)
 800239c:	f005 f9b4 	bl	8007708 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 80023a0:	2200      	movs	r2, #0
 80023a2:	2104      	movs	r1, #4
 80023a4:	4853      	ldr	r0, [pc, #332]	; (80024f4 <MX_GPIO_Init+0x218>)
 80023a6:	f005 f9af 	bl	8007708 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80023aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80023b0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80023b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b6:	2300      	movs	r3, #0
 80023b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80023ba:	f107 0314 	add.w	r3, r7, #20
 80023be:	4619      	mov	r1, r3
 80023c0:	4849      	ldr	r0, [pc, #292]	; (80024e8 <MX_GPIO_Init+0x20c>)
 80023c2:	f005 f805 	bl	80073d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RS_Pin LCD_CS_Pin client_NRST_Pin Buzzer_Pin
                           RelayClient_Pin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_CS_Pin|client_NRST_Pin|Buzzer_Pin
 80023c6:	f240 3343 	movw	r3, #835	; 0x343
 80023ca:	617b      	str	r3, [r7, #20]
                          |RelayClient_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023cc:	2301      	movs	r3, #1
 80023ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d0:	2300      	movs	r3, #0
 80023d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023d4:	2300      	movs	r3, #0
 80023d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023d8:	f107 0314 	add.w	r3, r7, #20
 80023dc:	4619      	mov	r1, r3
 80023de:	4842      	ldr	r0, [pc, #264]	; (80024e8 <MX_GPIO_Init+0x20c>)
 80023e0:	f004 fff6 	bl	80073d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_MISO_Pin */
  GPIO_InitStruct.Pin = LCD_MISO_Pin;
 80023e4:	2304      	movs	r3, #4
 80023e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023e8:	2300      	movs	r3, #0
 80023ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ec:	2300      	movs	r3, #0
 80023ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LCD_MISO_GPIO_Port, &GPIO_InitStruct);
 80023f0:	f107 0314 	add.w	r3, r7, #20
 80023f4:	4619      	mov	r1, r3
 80023f6:	483c      	ldr	r0, [pc, #240]	; (80024e8 <MX_GPIO_Init+0x20c>)
 80023f8:	f004 ffea 	bl	80073d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_MOSI_Pin */
  GPIO_InitStruct.Pin = LCD_MOSI_Pin;
 80023fc:	2308      	movs	r3, #8
 80023fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002400:	2301      	movs	r3, #1
 8002402:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002404:	2300      	movs	r3, #0
 8002406:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002408:	2302      	movs	r3, #2
 800240a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_MOSI_GPIO_Port, &GPIO_InitStruct);
 800240c:	f107 0314 	add.w	r3, r7, #20
 8002410:	4619      	mov	r1, r3
 8002412:	4835      	ldr	r0, [pc, #212]	; (80024e8 <MX_GPIO_Init+0x20c>)
 8002414:	f004 ffdc 	bl	80073d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RST_Pin LD2_Pin boot0_trigger_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LD2_Pin|boot0_trigger_Pin;
 8002418:	f44f 7398 	mov.w	r3, #304	; 0x130
 800241c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800241e:	2301      	movs	r3, #1
 8002420:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002422:	2300      	movs	r3, #0
 8002424:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002426:	2300      	movs	r3, #0
 8002428:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800242a:	f107 0314 	add.w	r3, r7, #20
 800242e:	4619      	mov	r1, r3
 8002430:	482e      	ldr	r0, [pc, #184]	; (80024ec <MX_GPIO_Init+0x210>)
 8002432:	f004 ffcd 	bl	80073d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_SCK_Pin */
  GPIO_InitStruct.Pin = LCD_SCK_Pin;
 8002436:	2301      	movs	r3, #1
 8002438:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800243a:	2301      	movs	r3, #1
 800243c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243e:	2300      	movs	r3, #0
 8002440:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002442:	2301      	movs	r3, #1
 8002444:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_SCK_GPIO_Port, &GPIO_InitStruct);
 8002446:	f107 0314 	add.w	r3, r7, #20
 800244a:	4619      	mov	r1, r3
 800244c:	4828      	ldr	r0, [pc, #160]	; (80024f0 <MX_GPIO_Init+0x214>)
 800244e:	f004 ffbf 	bl	80073d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Btn_1_Pin Btn_2_Pin Btn_3_Pin Btn_4_Pin */
  GPIO_InitStruct.Pin = Btn_1_Pin|Btn_2_Pin|Btn_3_Pin|Btn_4_Pin;
 8002452:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002456:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002458:	2300      	movs	r3, #0
 800245a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800245c:	2300      	movs	r3, #0
 800245e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002460:	f107 0314 	add.w	r3, r7, #20
 8002464:	4619      	mov	r1, r3
 8002466:	4822      	ldr	r0, [pc, #136]	; (80024f0 <MX_GPIO_Init+0x214>)
 8002468:	f004 ffb2 	bl	80073d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800246c:	2380      	movs	r3, #128	; 0x80
 800246e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002470:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002474:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002476:	2301      	movs	r3, #1
 8002478:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800247a:	f107 0314 	add.w	r3, r7, #20
 800247e:	4619      	mov	r1, r3
 8002480:	4819      	ldr	r0, [pc, #100]	; (80024e8 <MX_GPIO_Init+0x20c>)
 8002482:	f004 ffa5 	bl	80073d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_CS_Pin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 8002486:	2304      	movs	r3, #4
 8002488:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800248a:	2301      	movs	r3, #1
 800248c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248e:	2300      	movs	r3, #0
 8002490:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002492:	2300      	movs	r3, #0
 8002494:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 8002496:	f107 0314 	add.w	r3, r7, #20
 800249a:	4619      	mov	r1, r3
 800249c:	4815      	ldr	r0, [pc, #84]	; (80024f4 <MX_GPIO_Init+0x218>)
 800249e:	f004 ff97 	bl	80073d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : KnobBTN_Pin */
  GPIO_InitStruct.Pin = KnobBTN_Pin;
 80024a2:	2340      	movs	r3, #64	; 0x40
 80024a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024a6:	2300      	movs	r3, #0
 80024a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024aa:	2301      	movs	r3, #1
 80024ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KnobBTN_GPIO_Port, &GPIO_InitStruct);
 80024ae:	f107 0314 	add.w	r3, r7, #20
 80024b2:	4619      	mov	r1, r3
 80024b4:	480e      	ldr	r0, [pc, #56]	; (80024f0 <MX_GPIO_Init+0x214>)
 80024b6:	f004 ff8b 	bl	80073d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80024ba:	2200      	movs	r2, #0
 80024bc:	2100      	movs	r1, #0
 80024be:	2017      	movs	r0, #23
 80024c0:	f004 fb3f 	bl	8006b42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80024c4:	2017      	movs	r0, #23
 80024c6:	f004 fb58 	bl	8006b7a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80024ca:	2200      	movs	r2, #0
 80024cc:	2100      	movs	r1, #0
 80024ce:	2028      	movs	r0, #40	; 0x28
 80024d0:	f004 fb37 	bl	8006b42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80024d4:	2028      	movs	r0, #40	; 0x28
 80024d6:	f004 fb50 	bl	8006b7a <HAL_NVIC_EnableIRQ>

}
 80024da:	bf00      	nop
 80024dc:	3728      	adds	r7, #40	; 0x28
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	40023800 	.word	0x40023800
 80024e8:	40020800 	.word	0x40020800
 80024ec:	40020000 	.word	0x40020000
 80024f0:	40020400 	.word	0x40020400
 80024f4:	40020c00 	.word	0x40020c00

080024f8 <box_pointer>:
	  xsh = 0;
		  }

}

void box_pointer(uint16_t posx, uint16_t posy){
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af02      	add	r7, sp, #8
 80024fe:	4603      	mov	r3, r0
 8002500:	460a      	mov	r2, r1
 8002502:	80fb      	strh	r3, [r7, #6]
 8002504:	4613      	mov	r3, r2
 8002506:	80bb      	strh	r3, [r7, #4]
	/* write new box at the new position posx posy and erase the previous box*/
	static disp_posixy box1;

	//// erase previous box
	if(flag_boxpoint_start){
 8002508:	4b11      	ldr	r3, [pc, #68]	; (8002550 <box_pointer+0x58>)
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d009      	beq.n	8002524 <box_pointer+0x2c>

		ili9341_FillRect(box1.xp, box1.yp, 15, 15, cl_BLACK);
 8002510:	4b10      	ldr	r3, [pc, #64]	; (8002554 <box_pointer+0x5c>)
 8002512:	8818      	ldrh	r0, [r3, #0]
 8002514:	4b0f      	ldr	r3, [pc, #60]	; (8002554 <box_pointer+0x5c>)
 8002516:	8859      	ldrh	r1, [r3, #2]
 8002518:	2300      	movs	r3, #0
 800251a:	9300      	str	r3, [sp, #0]
 800251c:	230f      	movs	r3, #15
 800251e:	220f      	movs	r2, #15
 8002520:	f003 fb82 	bl	8005c28 <ili9341_FillRect>
	}

	//// new box
	ili9341_FillRect(posx, posy, 15, 15, cl_YELLOW);
 8002524:	88b9      	ldrh	r1, [r7, #4]
 8002526:	88f8      	ldrh	r0, [r7, #6]
 8002528:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800252c:	9300      	str	r3, [sp, #0]
 800252e:	230f      	movs	r3, #15
 8002530:	220f      	movs	r2, #15
 8002532:	f003 fb79 	bl	8005c28 <ili9341_FillRect>

	//box[1] = box[0];
	box1.xp = posx;
 8002536:	4a07      	ldr	r2, [pc, #28]	; (8002554 <box_pointer+0x5c>)
 8002538:	88fb      	ldrh	r3, [r7, #6]
 800253a:	8013      	strh	r3, [r2, #0]
	box1.yp = posy;
 800253c:	4a05      	ldr	r2, [pc, #20]	; (8002554 <box_pointer+0x5c>)
 800253e:	88bb      	ldrh	r3, [r7, #4]
 8002540:	8053      	strh	r3, [r2, #2]
	//// trig the upper to erase the previous in the next call
	flag_boxpoint_start = 1;
 8002542:	4b03      	ldr	r3, [pc, #12]	; (8002550 <box_pointer+0x58>)
 8002544:	2201      	movs	r2, #1
 8002546:	701a      	strb	r2, [r3, #0]
}
 8002548:	bf00      	nop
 800254a:	3708      	adds	r7, #8
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	200008a7 	.word	0x200008a7
 8002554:	200008b0 	.word	0x200008b0

08002558 <simple_scr>:

void simple_scr(){
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af04      	add	r7, sp, #16
	  //mcp_read.cv[0] = MCP320x_ADCbit_to_Volt(mcp_read.raw[0]);
	  //sprintf(TextDispBuffer,"MCP : %.2f  ", mcp_read.cv[0]);
	  //ili9341_WriteString(20, 155, TextDispBuffer, Font16, cl_CYAN, cl_BLACK);

	  ////// 4x button
	  sprintf(TextDispBuffer,"btn %X %X %X %d",btn_read[1], btn_read[2], btn_read[3], btn_cnt);
 800255e:	4b2b      	ldr	r3, [pc, #172]	; (800260c <simple_scr+0xb4>)
 8002560:	785b      	ldrb	r3, [r3, #1]
 8002562:	4619      	mov	r1, r3
 8002564:	4b29      	ldr	r3, [pc, #164]	; (800260c <simple_scr+0xb4>)
 8002566:	789b      	ldrb	r3, [r3, #2]
 8002568:	4618      	mov	r0, r3
 800256a:	4b28      	ldr	r3, [pc, #160]	; (800260c <simple_scr+0xb4>)
 800256c:	78db      	ldrb	r3, [r3, #3]
 800256e:	461a      	mov	r2, r3
 8002570:	4b27      	ldr	r3, [pc, #156]	; (8002610 <simple_scr+0xb8>)
 8002572:	881b      	ldrh	r3, [r3, #0]
 8002574:	9301      	str	r3, [sp, #4]
 8002576:	9200      	str	r2, [sp, #0]
 8002578:	4603      	mov	r3, r0
 800257a:	460a      	mov	r2, r1
 800257c:	4925      	ldr	r1, [pc, #148]	; (8002614 <simple_scr+0xbc>)
 800257e:	4826      	ldr	r0, [pc, #152]	; (8002618 <simple_scr+0xc0>)
 8002580:	f00b f8e4 	bl	800d74c <siprintf>
	  ili9341_WriteString(220, 185, TextDispBuffer, Font12, cl_YELLOW, cl_BLACK);
 8002584:	4b25      	ldr	r3, [pc, #148]	; (800261c <simple_scr+0xc4>)
 8002586:	2200      	movs	r2, #0
 8002588:	9202      	str	r2, [sp, #8]
 800258a:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800258e:	9201      	str	r2, [sp, #4]
 8002590:	685a      	ldr	r2, [r3, #4]
 8002592:	9200      	str	r2, [sp, #0]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a20      	ldr	r2, [pc, #128]	; (8002618 <simple_scr+0xc0>)
 8002598:	21b9      	movs	r1, #185	; 0xb9
 800259a:	20dc      	movs	r0, #220	; 0xdc
 800259c:	f003 fced 	bl	8005f7a <ili9341_WriteString>

	  //// rortary encoder knob
	  sprintf(TextDispBuffer,"enc %d %d %d", knobtick[0], k_flag.cnt, k_flag.up); //flag_k_up
 80025a0:	4b1f      	ldr	r3, [pc, #124]	; (8002620 <simple_scr+0xc8>)
 80025a2:	881b      	ldrh	r3, [r3, #0]
 80025a4:	461a      	mov	r2, r3
 80025a6:	4b1f      	ldr	r3, [pc, #124]	; (8002624 <simple_scr+0xcc>)
 80025a8:	789b      	ldrb	r3, [r3, #2]
 80025aa:	4619      	mov	r1, r3
 80025ac:	4b1d      	ldr	r3, [pc, #116]	; (8002624 <simple_scr+0xcc>)
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	9300      	str	r3, [sp, #0]
 80025b2:	460b      	mov	r3, r1
 80025b4:	491c      	ldr	r1, [pc, #112]	; (8002628 <simple_scr+0xd0>)
 80025b6:	4818      	ldr	r0, [pc, #96]	; (8002618 <simple_scr+0xc0>)
 80025b8:	f00b f8c8 	bl	800d74c <siprintf>
	  ili9341_WriteString(220, 200, TextDispBuffer, Font12, cl_WHITE, cl_BLACK);
 80025bc:	4b17      	ldr	r3, [pc, #92]	; (800261c <simple_scr+0xc4>)
 80025be:	2200      	movs	r2, #0
 80025c0:	9202      	str	r2, [sp, #8]
 80025c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025c6:	9201      	str	r2, [sp, #4]
 80025c8:	685a      	ldr	r2, [r3, #4]
 80025ca:	9200      	str	r2, [sp, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a12      	ldr	r2, [pc, #72]	; (8002618 <simple_scr+0xc0>)
 80025d0:	21c8      	movs	r1, #200	; 0xc8
 80025d2:	20dc      	movs	r0, #220	; 0xdc
 80025d4:	f003 fcd1 	bl	8005f7a <ili9341_WriteString>

	  sprintf(TextDispBuffer, "%ld, %d", TIM3->CNT, stboxp.ch_is); //state_box_choice_is
 80025d8:	4b14      	ldr	r3, [pc, #80]	; (800262c <simple_scr+0xd4>)
 80025da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025dc:	4b14      	ldr	r3, [pc, #80]	; (8002630 <simple_scr+0xd8>)
 80025de:	789b      	ldrb	r3, [r3, #2]
 80025e0:	4914      	ldr	r1, [pc, #80]	; (8002634 <simple_scr+0xdc>)
 80025e2:	480d      	ldr	r0, [pc, #52]	; (8002618 <simple_scr+0xc0>)
 80025e4:	f00b f8b2 	bl	800d74c <siprintf>
	  ili9341_WriteString(250, 215, TextDispBuffer, Font12, cl_WHITE, cl_BLACK);
 80025e8:	4b0c      	ldr	r3, [pc, #48]	; (800261c <simple_scr+0xc4>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	9202      	str	r2, [sp, #8]
 80025ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025f2:	9201      	str	r2, [sp, #4]
 80025f4:	685a      	ldr	r2, [r3, #4]
 80025f6:	9200      	str	r2, [sp, #0]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a07      	ldr	r2, [pc, #28]	; (8002618 <simple_scr+0xc0>)
 80025fc:	21d7      	movs	r1, #215	; 0xd7
 80025fe:	20fa      	movs	r0, #250	; 0xfa
 8002600:	f003 fcbb 	bl	8005f7a <ili9341_WriteString>

}
 8002604:	bf00      	nop
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	20000884 	.word	0x20000884
 8002610:	20000888 	.word	0x20000888
 8002614:	0800fda0 	.word	0x0800fda0
 8002618:	200006b8 	.word	0x200006b8
 800261c:	20000228 	.word	0x20000228
 8002620:	2000088c 	.word	0x2000088c
 8002624:	20000890 	.word	0x20000890
 8002628:	0800fdb0 	.word	0x0800fdb0
 800262c:	40000400 	.word	0x40000400
 8002630:	200008ac 	.word	0x200008ac
 8002634:	0800fdc0 	.word	0x0800fdc0

08002638 <Button_machine>:


void Button_machine(){
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0
	 * [0]raw read,
	 * [1]read from 1 as rising detect,
	 * [2]read latest (bdebug),
	 * [3]read latest & erased when fin}
	 */
		btn_read[1] = btn_read[0];
 800263c:	4b2d      	ldr	r3, [pc, #180]	; (80026f4 <Button_machine+0xbc>)
 800263e:	781a      	ldrb	r2, [r3, #0]
 8002640:	4b2c      	ldr	r3, [pc, #176]	; (80026f4 <Button_machine+0xbc>)
 8002642:	705a      	strb	r2, [r3, #1]
		btn_read[0] = (0x0F & ~(GPIOB->IDR >> 12)); //// available for PB 12 13 14 15 or which the same bank only
 8002644:	4b2c      	ldr	r3, [pc, #176]	; (80026f8 <Button_machine+0xc0>)
 8002646:	691b      	ldr	r3, [r3, #16]
 8002648:	0b1b      	lsrs	r3, r3, #12
 800264a:	b2db      	uxtb	r3, r3
 800264c:	43db      	mvns	r3, r3
 800264e:	b2db      	uxtb	r3, r3
 8002650:	f003 030f 	and.w	r3, r3, #15
 8002654:	b2da      	uxtb	r2, r3
 8002656:	4b27      	ldr	r3, [pc, #156]	; (80026f4 <Button_machine+0xbc>)
 8002658:	701a      	strb	r2, [r3, #0]

		//// rising edge counter
		if(btn_read[0] && btn_read[1] == 0){
 800265a:	4b26      	ldr	r3, [pc, #152]	; (80026f4 <Button_machine+0xbc>)
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d030      	beq.n	80026c4 <Button_machine+0x8c>
 8002662:	4b24      	ldr	r3, [pc, #144]	; (80026f4 <Button_machine+0xbc>)
 8002664:	785b      	ldrb	r3, [r3, #1]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d12c      	bne.n	80026c4 <Button_machine+0x8c>
			btn_cnt += btn_read[0]; //// plus at each hex pos
 800266a:	4b22      	ldr	r3, [pc, #136]	; (80026f4 <Button_machine+0xbc>)
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	b29a      	uxth	r2, r3
 8002670:	4b22      	ldr	r3, [pc, #136]	; (80026fc <Button_machine+0xc4>)
 8002672:	881b      	ldrh	r3, [r3, #0]
 8002674:	4413      	add	r3, r2
 8002676:	b29a      	uxth	r2, r3
 8002678:	4b20      	ldr	r3, [pc, #128]	; (80026fc <Button_machine+0xc4>)
 800267a:	801a      	strh	r2, [r3, #0]
			btn_read[2] = btn_read[0]; //// read latest, debug
 800267c:	4b1d      	ldr	r3, [pc, #116]	; (80026f4 <Button_machine+0xbc>)
 800267e:	781a      	ldrb	r2, [r3, #0]
 8002680:	4b1c      	ldr	r3, [pc, #112]	; (80026f4 <Button_machine+0xbc>)
 8002682:	709a      	strb	r2, [r3, #2]
			btn_read[3] = btn_read[0]; //// read latest, clearable
 8002684:	4b1b      	ldr	r3, [pc, #108]	; (80026f4 <Button_machine+0xbc>)
 8002686:	781a      	ldrb	r2, [r3, #0]
 8002688:	4b1a      	ldr	r3, [pc, #104]	; (80026f4 <Button_machine+0xbc>)
 800268a:	70da      	strb	r2, [r3, #3]

			//// manual relay flag try


			if(btn_read[2] == 0b0001){ // SW1
 800268c:	4b19      	ldr	r3, [pc, #100]	; (80026f4 <Button_machine+0xbc>)
 800268e:	789b      	ldrb	r3, [r3, #2]
 8002690:	2b01      	cmp	r3, #1
 8002692:	d102      	bne.n	800269a <Button_machine+0x62>
				flag_manual_relay = 1;
 8002694:	4b1a      	ldr	r3, [pc, #104]	; (8002700 <Button_machine+0xc8>)
 8002696:	2201      	movs	r2, #1
 8002698:	701a      	strb	r2, [r3, #0]
			}
			if(btn_read[2] == 0b1000){ // SW2
 800269a:	4b16      	ldr	r3, [pc, #88]	; (80026f4 <Button_machine+0xbc>)
 800269c:	789b      	ldrb	r3, [r3, #2]
 800269e:	2b08      	cmp	r3, #8
 80026a0:	d106      	bne.n	80026b0 <Button_machine+0x78>
				if(GrandState != s_bootloader){
 80026a2:	4b18      	ldr	r3, [pc, #96]	; (8002704 <Button_machine+0xcc>)
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	2b0a      	cmp	r3, #10
 80026a8:	d002      	beq.n	80026b0 <Button_machine+0x78>
					GrandState = pre_lobby;
 80026aa:	4b16      	ldr	r3, [pc, #88]	; (8002704 <Button_machine+0xcc>)
 80026ac:	2201      	movs	r2, #1
 80026ae:	701a      	strb	r2, [r3, #0]
				}

			}
			if(btn_read[2] == 0b0100){ // SW3
 80026b0:	4b10      	ldr	r3, [pc, #64]	; (80026f4 <Button_machine+0xbc>)
 80026b2:	789b      	ldrb	r3, [r3, #2]
 80026b4:	2b04      	cmp	r3, #4
 80026b6:	d105      	bne.n	80026c4 <Button_machine+0x8c>
				k_flag.cnt++;
 80026b8:	4b13      	ldr	r3, [pc, #76]	; (8002708 <Button_machine+0xd0>)
 80026ba:	789b      	ldrb	r3, [r3, #2]
 80026bc:	3301      	adds	r3, #1
 80026be:	b2da      	uxtb	r2, r3
 80026c0:	4b11      	ldr	r3, [pc, #68]	; (8002708 <Button_machine+0xd0>)
 80026c2:	709a      	strb	r2, [r3, #2]
//			}

		}

		//// knob rotter overflow_resist
		if(knobtick[0] <= 16 || knobtick[0] >= 0xFFF8){
 80026c4:	4b11      	ldr	r3, [pc, #68]	; (800270c <Button_machine+0xd4>)
 80026c6:	881b      	ldrh	r3, [r3, #0]
 80026c8:	2b10      	cmp	r3, #16
 80026ca:	d905      	bls.n	80026d8 <Button_machine+0xa0>
 80026cc:	4b0f      	ldr	r3, [pc, #60]	; (800270c <Button_machine+0xd4>)
 80026ce:	881b      	ldrh	r3, [r3, #0]
 80026d0:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d907      	bls.n	80026e8 <Button_machine+0xb0>
			TIM3->CNT = 0x8000; // back to center
 80026d8:	4b0d      	ldr	r3, [pc, #52]	; (8002710 <Button_machine+0xd8>)
 80026da:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80026de:	625a      	str	r2, [r3, #36]	; 0x24
			knobtick[0] = 0x8000;
 80026e0:	4b0a      	ldr	r3, [pc, #40]	; (800270c <Button_machine+0xd4>)
 80026e2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80026e6:	801a      	strh	r2, [r3, #0]
//			btn_k_cnt++;
//		}

//		knob_rotter();

}
 80026e8:	bf00      	nop
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop
 80026f4:	20000884 	.word	0x20000884
 80026f8:	40020400 	.word	0x40020400
 80026fc:	20000888 	.word	0x20000888
 8002700:	20000874 	.word	0x20000874
 8002704:	20000006 	.word	0x20000006
 8002708:	20000890 	.word	0x20000890
 800270c:	2000088c 	.word	0x2000088c
 8002710:	40000400 	.word	0x40000400

08002714 <knob_rotter>:

void knob_rotter(){
 8002714:	b580      	push	{r7, lr}
 8002716:	af00      	add	r7, sp, #0
	//// round up
	if((uint16_t)TIM3->CNT > knobtick[0]){  ////(uint16_t)TIM3->CNT - knobtick[0] >= 2
 8002718:	4b21      	ldr	r3, [pc, #132]	; (80027a0 <knob_rotter+0x8c>)
 800271a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271c:	b29a      	uxth	r2, r3
 800271e:	4b21      	ldr	r3, [pc, #132]	; (80027a4 <knob_rotter+0x90>)
 8002720:	881b      	ldrh	r3, [r3, #0]
 8002722:	429a      	cmp	r2, r3
 8002724:	d919      	bls.n	800275a <knob_rotter+0x46>
		//flag_k_up = 1;
		k_flag.up = 1;
 8002726:	4b20      	ldr	r3, [pc, #128]	; (80027a8 <knob_rotter+0x94>)
 8002728:	2201      	movs	r2, #1
 800272a:	701a      	strb	r2, [r3, #0]
		knobtick[0] = TIM3->CNT;
 800272c:	4b1c      	ldr	r3, [pc, #112]	; (80027a0 <knob_rotter+0x8c>)
 800272e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002730:	b29a      	uxth	r2, r3
 8002732:	4b1c      	ldr	r3, [pc, #112]	; (80027a4 <knob_rotter+0x90>)
 8002734:	801a      	strh	r2, [r3, #0]
		//// debug
		sprintf(TextUARTBuffer,"RenK = %d", knobtick[0]);
 8002736:	4b1b      	ldr	r3, [pc, #108]	; (80027a4 <knob_rotter+0x90>)
 8002738:	881b      	ldrh	r3, [r3, #0]
 800273a:	461a      	mov	r2, r3
 800273c:	491b      	ldr	r1, [pc, #108]	; (80027ac <knob_rotter+0x98>)
 800273e:	481c      	ldr	r0, [pc, #112]	; (80027b0 <knob_rotter+0x9c>)
 8002740:	f00b f804 	bl	800d74c <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)TextUARTBuffer, strlen(TextUARTBuffer),10);
 8002744:	481a      	ldr	r0, [pc, #104]	; (80027b0 <knob_rotter+0x9c>)
 8002746:	f7fd fd4b 	bl	80001e0 <strlen>
 800274a:	4603      	mov	r3, r0
 800274c:	b29a      	uxth	r2, r3
 800274e:	230a      	movs	r3, #10
 8002750:	4917      	ldr	r1, [pc, #92]	; (80027b0 <knob_rotter+0x9c>)
 8002752:	4818      	ldr	r0, [pc, #96]	; (80027b4 <knob_rotter+0xa0>)
 8002754:	f009 f907 	bl	800b966 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t*)TextUARTBuffer, strlen(TextUARTBuffer),10);

	}
	else{}

}
 8002758:	e01f      	b.n	800279a <knob_rotter+0x86>
	else if((uint16_t)TIM3->CNT < knobtick[0]){ ////knobtick[0] - (uint16_t)TIM3->CNT >= 2
 800275a:	4b11      	ldr	r3, [pc, #68]	; (80027a0 <knob_rotter+0x8c>)
 800275c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275e:	b29a      	uxth	r2, r3
 8002760:	4b10      	ldr	r3, [pc, #64]	; (80027a4 <knob_rotter+0x90>)
 8002762:	881b      	ldrh	r3, [r3, #0]
 8002764:	429a      	cmp	r2, r3
 8002766:	d218      	bcs.n	800279a <knob_rotter+0x86>
		k_flag.dn = 1;
 8002768:	4b0f      	ldr	r3, [pc, #60]	; (80027a8 <knob_rotter+0x94>)
 800276a:	2201      	movs	r2, #1
 800276c:	705a      	strb	r2, [r3, #1]
		knobtick[0] = TIM3->CNT;
 800276e:	4b0c      	ldr	r3, [pc, #48]	; (80027a0 <knob_rotter+0x8c>)
 8002770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002772:	b29a      	uxth	r2, r3
 8002774:	4b0b      	ldr	r3, [pc, #44]	; (80027a4 <knob_rotter+0x90>)
 8002776:	801a      	strh	r2, [r3, #0]
		sprintf(TextUARTBuffer,"RenK = %d", knobtick[0]);
 8002778:	4b0a      	ldr	r3, [pc, #40]	; (80027a4 <knob_rotter+0x90>)
 800277a:	881b      	ldrh	r3, [r3, #0]
 800277c:	461a      	mov	r2, r3
 800277e:	490b      	ldr	r1, [pc, #44]	; (80027ac <knob_rotter+0x98>)
 8002780:	480b      	ldr	r0, [pc, #44]	; (80027b0 <knob_rotter+0x9c>)
 8002782:	f00a ffe3 	bl	800d74c <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)TextUARTBuffer, strlen(TextUARTBuffer),10);
 8002786:	480a      	ldr	r0, [pc, #40]	; (80027b0 <knob_rotter+0x9c>)
 8002788:	f7fd fd2a 	bl	80001e0 <strlen>
 800278c:	4603      	mov	r3, r0
 800278e:	b29a      	uxth	r2, r3
 8002790:	230a      	movs	r3, #10
 8002792:	4907      	ldr	r1, [pc, #28]	; (80027b0 <knob_rotter+0x9c>)
 8002794:	4807      	ldr	r0, [pc, #28]	; (80027b4 <knob_rotter+0xa0>)
 8002796:	f009 f8e6 	bl	800b966 <HAL_UART_Transmit>
}
 800279a:	bf00      	nop
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	40000400 	.word	0x40000400
 80027a4:	2000088c 	.word	0x2000088c
 80027a8:	20000890 	.word	0x20000890
 80027ac:	0800fdc8 	.word	0x0800fdc8
 80027b0:	2000071c 	.word	0x2000071c
 80027b4:	200005d0 	.word	0x200005d0

080027b8 <Protection_machine>:

void Protection_machine(){
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0

	//// overcurrent
	if (inata.CURRENT >= Current_limit_mA || inatb.CURRENT >= Current_limit_mA){
 80027bc:	4b1e      	ldr	r3, [pc, #120]	; (8002838 <Protection_machine+0x80>)
 80027be:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80027c2:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80027c6:	da05      	bge.n	80027d4 <Protection_machine+0x1c>
 80027c8:	4b1c      	ldr	r3, [pc, #112]	; (800283c <Protection_machine+0x84>)
 80027ca:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80027ce:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80027d2:	db2a      	blt.n	800282a <Protection_machine+0x72>
		gScr.counter_overcurrent++;
 80027d4:	4b1a      	ldr	r3, [pc, #104]	; (8002840 <Protection_machine+0x88>)
 80027d6:	785b      	ldrb	r3, [r3, #1]
 80027d8:	3301      	adds	r3, #1
 80027da:	b2da      	uxtb	r2, r3
 80027dc:	4b18      	ldr	r3, [pc, #96]	; (8002840 <Protection_machine+0x88>)
 80027de:	705a      	strb	r2, [r3, #1]

		if(gScr.counter_overcurrent >= 2 && !(GrandState == pre_danger || GrandState == danger)){
 80027e0:	4b17      	ldr	r3, [pc, #92]	; (8002840 <Protection_machine+0x88>)
 80027e2:	785b      	ldrb	r3, [r3, #1]
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d924      	bls.n	8002832 <Protection_machine+0x7a>
 80027e8:	4b16      	ldr	r3, [pc, #88]	; (8002844 <Protection_machine+0x8c>)
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	2b0f      	cmp	r3, #15
 80027ee:	d020      	beq.n	8002832 <Protection_machine+0x7a>
 80027f0:	4b14      	ldr	r3, [pc, #80]	; (8002844 <Protection_machine+0x8c>)
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	2b10      	cmp	r3, #16
 80027f6:	d01c      	beq.n	8002832 <Protection_machine+0x7a>
			gScr.counter_overcurrent = 0;
 80027f8:	4b11      	ldr	r3, [pc, #68]	; (8002840 <Protection_machine+0x88>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	705a      	strb	r2, [r3, #1]
			gScr.fullflag = 0;
 80027fe:	4b10      	ldr	r3, [pc, #64]	; (8002840 <Protection_machine+0x88>)
 8002800:	2200      	movs	r2, #0
 8002802:	701a      	strb	r2, [r3, #0]

			////Relay_cut
			HAL_GPIO_WritePin(RelayClient_GPIO_Port, RelayClient_Pin, GPIO_PIN_RESET);
 8002804:	2200      	movs	r2, #0
 8002806:	f44f 7100 	mov.w	r1, #512	; 0x200
 800280a:	480f      	ldr	r0, [pc, #60]	; (8002848 <Protection_machine+0x90>)
 800280c:	f004 ff7c 	bl	8007708 <HAL_GPIO_WritePin>

			//// Buzzer scream
			buzzr.flag = 3;
 8002810:	4b0e      	ldr	r3, [pc, #56]	; (800284c <Protection_machine+0x94>)
 8002812:	2203      	movs	r2, #3
 8002814:	701a      	strb	r2, [r3, #0]
			buzzr.priod_up = 1000;
 8002816:	4b0d      	ldr	r3, [pc, #52]	; (800284c <Protection_machine+0x94>)
 8002818:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800281c:	805a      	strh	r2, [r3, #2]
			buzzer_scream_cnt();
 800281e:	f000 f967 	bl	8002af0 <buzzer_scream_cnt>
			//// interrupt, go to state Client error.
			GrandState = pre_danger;
 8002822:	4b08      	ldr	r3, [pc, #32]	; (8002844 <Protection_machine+0x8c>)
 8002824:	220f      	movs	r2, #15
 8002826:	701a      	strb	r2, [r3, #0]
		if(gScr.counter_overcurrent >= 2 && !(GrandState == pre_danger || GrandState == danger)){
 8002828:	e003      	b.n	8002832 <Protection_machine+0x7a>
		}
	}else{gScr.counter_overcurrent = 0;}
 800282a:	4b05      	ldr	r3, [pc, #20]	; (8002840 <Protection_machine+0x88>)
 800282c:	2200      	movs	r2, #0
 800282e:	705a      	strb	r2, [r3, #1]

}
 8002830:	e000      	b.n	8002834 <Protection_machine+0x7c>
		if(gScr.counter_overcurrent >= 2 && !(GrandState == pre_danger || GrandState == danger)){
 8002832:	bf00      	nop
}
 8002834:	bf00      	nop
 8002836:	bd80      	pop	{r7, pc}
 8002838:	200007f8 	.word	0x200007f8
 800283c:	20000810 	.word	0x20000810
 8002840:	20000894 	.word	0x20000894
 8002844:	20000006 	.word	0x20000006
 8002848:	40020800 	.word	0x40020800
 800284c:	20000878 	.word	0x20000878

08002850 <manual_relay>:

void manual_relay(){
 8002850:	b580      	push	{r7, lr}
 8002852:	af00      	add	r7, sp, #0
	if(flag_manual_relay){
 8002854:	4b08      	ldr	r3, [pc, #32]	; (8002878 <manual_relay+0x28>)
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d00b      	beq.n	8002874 <manual_relay+0x24>

		if(GrandState == monitor){
 800285c:	4b07      	ldr	r3, [pc, #28]	; (800287c <manual_relay+0x2c>)
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	2b0c      	cmp	r3, #12
 8002862:	d104      	bne.n	800286e <manual_relay+0x1e>
			HAL_GPIO_TogglePin(RelayClient_GPIO_Port, RelayClient_Pin);
 8002864:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002868:	4805      	ldr	r0, [pc, #20]	; (8002880 <manual_relay+0x30>)
 800286a:	f004 ff66 	bl	800773a <HAL_GPIO_TogglePin>
		}
		flag_manual_relay = 0;
 800286e:	4b02      	ldr	r3, [pc, #8]	; (8002878 <manual_relay+0x28>)
 8002870:	2200      	movs	r2, #0
 8002872:	701a      	strb	r2, [r3, #0]
	}
}
 8002874:	bf00      	nop
 8002876:	bd80      	pop	{r7, pc}
 8002878:	20000874 	.word	0x20000874
 800287c:	20000006 	.word	0x20000006
 8002880:	40020800 	.word	0x40020800

08002884 <Compare_pin_32>:


void Compare_pin_32(uint32_t raw32, uint16_t *Lista_GPIOx, uint8_t gpst,char *outchar){
 8002884:	b590      	push	{r4, r7, lr}
 8002886:	b089      	sub	sp, #36	; 0x24
 8002888:	af00      	add	r7, sp, #0
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	60b9      	str	r1, [r7, #8]
 800288e:	603b      	str	r3, [r7, #0]
 8002890:	4613      	mov	r3, r2
 8002892:	71fb      	strb	r3, [r7, #7]
	 * 	@param raw32       rawuint32_t data given from gpio_testscript functions
	 * 	@param Lista_GPIOx List of GPIOs bank need to be checked
	 * 	@param gpst        select report type [0 - PA_] [1 - PB_] [2 - PC_]
	 * 	@param outchar     char for record the compare result report
	 * */
	uint16_t raw32_N = raw32 & 0xFFFF;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	83bb      	strh	r3, [r7, #28]
	uint16_t raw32_P = (raw32 >> 16) & 0xFFFF;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	0c1b      	lsrs	r3, r3, #16
 800289c:	837b      	strh	r3, [r7, #26]
	uint8_t iaa, iab, cntr_w = 0;
 800289e:	2300      	movs	r3, #0
 80028a0:	77fb      	strb	r3, [r7, #31]
	char aadd[6];

	for(register int i = 0;i < 16;i++){
 80028a2:	2400      	movs	r4, #0
 80028a4:	e081      	b.n	80029aa <Compare_pin_32+0x126>
		if(Lista_GPIOx[i] >= 20){break;}
 80028a6:	4623      	mov	r3, r4
 80028a8:	005b      	lsls	r3, r3, #1
 80028aa:	68ba      	ldr	r2, [r7, #8]
 80028ac:	4413      	add	r3, r2
 80028ae:	881b      	ldrh	r3, [r3, #0]
 80028b0:	2b13      	cmp	r3, #19
 80028b2:	d87e      	bhi.n	80029b2 <Compare_pin_32+0x12e>

		iaa = (raw32_N >> Lista_GPIOx[i]) & 0x01;
 80028b4:	8bbb      	ldrh	r3, [r7, #28]
 80028b6:	4622      	mov	r2, r4
 80028b8:	0052      	lsls	r2, r2, #1
 80028ba:	68b9      	ldr	r1, [r7, #8]
 80028bc:	440a      	add	r2, r1
 80028be:	8812      	ldrh	r2, [r2, #0]
 80028c0:	4113      	asrs	r3, r2
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	f003 0301 	and.w	r3, r3, #1
 80028c8:	767b      	strb	r3, [r7, #25]
		iab = (raw32_P >> Lista_GPIOx[i]) & 0x01;
 80028ca:	8b7b      	ldrh	r3, [r7, #26]
 80028cc:	4622      	mov	r2, r4
 80028ce:	0052      	lsls	r2, r2, #1
 80028d0:	68b9      	ldr	r1, [r7, #8]
 80028d2:	440a      	add	r2, r1
 80028d4:	8812      	ldrh	r2, [r2, #0]
 80028d6:	4113      	asrs	r3, r2
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	f003 0301 	and.w	r3, r3, #1
 80028de:	763b      	strb	r3, [r7, #24]
		 if(iaa == iab){
 80028e0:	7e7a      	ldrb	r2, [r7, #25]
 80028e2:	7e3b      	ldrb	r3, [r7, #24]
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d15f      	bne.n	80029a8 <Compare_pin_32+0x124>

			 cntr_w++; // count if match
 80028e8:	7ffb      	ldrb	r3, [r7, #31]
 80028ea:	3301      	adds	r3, #1
 80028ec:	77fb      	strb	r3, [r7, #31]

			 //// add problem pin
			 switch(gpst){
 80028ee:	79fb      	ldrb	r3, [r7, #7]
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d00f      	beq.n	8002914 <Compare_pin_32+0x90>
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d01b      	beq.n	8002930 <Compare_pin_32+0xac>
			 default:
			 case 0: // A
				 sprintf(aadd, "PA%d", (uint8_t)Lista_GPIOx[i]); //
 80028f8:	4623      	mov	r3, r4
 80028fa:	005b      	lsls	r3, r3, #1
 80028fc:	68ba      	ldr	r2, [r7, #8]
 80028fe:	4413      	add	r3, r2
 8002900:	881b      	ldrh	r3, [r3, #0]
 8002902:	b2db      	uxtb	r3, r3
 8002904:	461a      	mov	r2, r3
 8002906:	f107 0310 	add.w	r3, r7, #16
 800290a:	4934      	ldr	r1, [pc, #208]	; (80029dc <Compare_pin_32+0x158>)
 800290c:	4618      	mov	r0, r3
 800290e:	f00a ff1d 	bl	800d74c <siprintf>
				 break;
 8002912:	e01b      	b.n	800294c <Compare_pin_32+0xc8>
			 case 1: // B
			 	 sprintf(aadd, "PB%d", (uint8_t)Lista_GPIOx[i]); //
 8002914:	4623      	mov	r3, r4
 8002916:	005b      	lsls	r3, r3, #1
 8002918:	68ba      	ldr	r2, [r7, #8]
 800291a:	4413      	add	r3, r2
 800291c:	881b      	ldrh	r3, [r3, #0]
 800291e:	b2db      	uxtb	r3, r3
 8002920:	461a      	mov	r2, r3
 8002922:	f107 0310 	add.w	r3, r7, #16
 8002926:	492e      	ldr	r1, [pc, #184]	; (80029e0 <Compare_pin_32+0x15c>)
 8002928:	4618      	mov	r0, r3
 800292a:	f00a ff0f 	bl	800d74c <siprintf>
			 	 break;
 800292e:	e00d      	b.n	800294c <Compare_pin_32+0xc8>
			 case 2: // C
			 	 sprintf(aadd, "PC%d", (uint8_t)Lista_GPIOx[i]); //
 8002930:	4623      	mov	r3, r4
 8002932:	005b      	lsls	r3, r3, #1
 8002934:	68ba      	ldr	r2, [r7, #8]
 8002936:	4413      	add	r3, r2
 8002938:	881b      	ldrh	r3, [r3, #0]
 800293a:	b2db      	uxtb	r3, r3
 800293c:	461a      	mov	r2, r3
 800293e:	f107 0310 	add.w	r3, r7, #16
 8002942:	4928      	ldr	r1, [pc, #160]	; (80029e4 <Compare_pin_32+0x160>)
 8002944:	4618      	mov	r0, r3
 8002946:	f00a ff01 	bl	800d74c <siprintf>
			 	 break;
 800294a:	bf00      	nop

			 }
			 strncat(outchar, aadd, 4);
 800294c:	f107 0310 	add.w	r3, r7, #16
 8002950:	2204      	movs	r2, #4
 8002952:	4619      	mov	r1, r3
 8002954:	6838      	ldr	r0, [r7, #0]
 8002956:	f00a ff19 	bl	800d78c <strncat>

			 //// add High, Low
			 if(iaa == 1){
 800295a:	7e7b      	ldrb	r3, [r7, #25]
 800295c:	2b01      	cmp	r3, #1
 800295e:	d106      	bne.n	800296e <Compare_pin_32+0xea>
				 sprintf(aadd, "_H");
 8002960:	f107 0310 	add.w	r3, r7, #16
 8002964:	4920      	ldr	r1, [pc, #128]	; (80029e8 <Compare_pin_32+0x164>)
 8002966:	4618      	mov	r0, r3
 8002968:	f00a fef0 	bl	800d74c <siprintf>
 800296c:	e008      	b.n	8002980 <Compare_pin_32+0xfc>
			 }else if(iaa == 0){
 800296e:	7e7b      	ldrb	r3, [r7, #25]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d105      	bne.n	8002980 <Compare_pin_32+0xfc>
				 sprintf(aadd, "_L");
 8002974:	f107 0310 	add.w	r3, r7, #16
 8002978:	491c      	ldr	r1, [pc, #112]	; (80029ec <Compare_pin_32+0x168>)
 800297a:	4618      	mov	r0, r3
 800297c:	f00a fee6 	bl	800d74c <siprintf>
			 }
			 strncat(outchar, aadd, 2);
 8002980:	f107 0310 	add.w	r3, r7, #16
 8002984:	2202      	movs	r2, #2
 8002986:	4619      	mov	r1, r3
 8002988:	6838      	ldr	r0, [r7, #0]
 800298a:	f00a feff 	bl	800d78c <strncat>

			 //// add blank
			 sprintf(aadd, " ");
 800298e:	f107 0310 	add.w	r3, r7, #16
 8002992:	4917      	ldr	r1, [pc, #92]	; (80029f0 <Compare_pin_32+0x16c>)
 8002994:	4618      	mov	r0, r3
 8002996:	f00a fed9 	bl	800d74c <siprintf>
			 strncat(outchar, aadd, 1);
 800299a:	f107 0310 	add.w	r3, r7, #16
 800299e:	2201      	movs	r2, #1
 80029a0:	4619      	mov	r1, r3
 80029a2:	6838      	ldr	r0, [r7, #0]
 80029a4:	f00a fef2 	bl	800d78c <strncat>
	for(register int i = 0;i < 16;i++){
 80029a8:	3401      	adds	r4, #1
 80029aa:	2c0f      	cmp	r4, #15
 80029ac:	f77f af7b 	ble.w	80028a6 <Compare_pin_32+0x22>
 80029b0:	e000      	b.n	80029b4 <Compare_pin_32+0x130>
		if(Lista_GPIOx[i] >= 20){break;}
 80029b2:	bf00      	nop
		 }
	}

	if(!cntr_w){
 80029b4:	7ffb      	ldrb	r3, [r7, #31]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d10c      	bne.n	80029d4 <Compare_pin_32+0x150>
		sprintf(aadd, "_PASS");
 80029ba:	f107 0310 	add.w	r3, r7, #16
 80029be:	490d      	ldr	r1, [pc, #52]	; (80029f4 <Compare_pin_32+0x170>)
 80029c0:	4618      	mov	r0, r3
 80029c2:	f00a fec3 	bl	800d74c <siprintf>
		strncat(outchar, aadd, 7);
 80029c6:	f107 0310 	add.w	r3, r7, #16
 80029ca:	2207      	movs	r2, #7
 80029cc:	4619      	mov	r1, r3
 80029ce:	6838      	ldr	r0, [r7, #0]
 80029d0:	f00a fedc 	bl	800d78c <strncat>
	}
}
 80029d4:	bf00      	nop
 80029d6:	3724      	adds	r7, #36	; 0x24
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd90      	pop	{r4, r7, pc}
 80029dc:	0800fdd4 	.word	0x0800fdd4
 80029e0:	0800fddc 	.word	0x0800fddc
 80029e4:	0800fde4 	.word	0x0800fde4
 80029e8:	0800fdec 	.word	0x0800fdec
 80029ec:	0800fdf0 	.word	0x0800fdf0
 80029f0:	0800fdf4 	.word	0x0800fdf4
 80029f4:	0800fdf8 	.word	0x0800fdf8

080029f8 <CheckAllPass>:

void CheckAllPass(){
 80029f8:	b580      	push	{r7, lr}
 80029fa:	af00      	add	r7, sp, #0
	cnt_allpass = 0; // init reset
 80029fc:	4b32      	ldr	r3, [pc, #200]	; (8002ac8 <CheckAllPass+0xd0>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	701a      	strb	r2, [r3, #0]

	//// lazy Cat cat chekallpass
	////  \r,\n count as 1
	if(WR_A_PUPDR[7] == 95){cnt_allpass++;} //// 95 = "_"
 8002a02:	4b32      	ldr	r3, [pc, #200]	; (8002acc <CheckAllPass+0xd4>)
 8002a04:	79db      	ldrb	r3, [r3, #7]
 8002a06:	2b5f      	cmp	r3, #95	; 0x5f
 8002a08:	d105      	bne.n	8002a16 <CheckAllPass+0x1e>
 8002a0a:	4b2f      	ldr	r3, [pc, #188]	; (8002ac8 <CheckAllPass+0xd0>)
 8002a0c:	781b      	ldrb	r3, [r3, #0]
 8002a0e:	3301      	adds	r3, #1
 8002a10:	b2da      	uxtb	r2, r3
 8002a12:	4b2d      	ldr	r3, [pc, #180]	; (8002ac8 <CheckAllPass+0xd0>)
 8002a14:	701a      	strb	r2, [r3, #0]
	if(WR_B_PUPDR[7] == 95){cnt_allpass++;}
 8002a16:	4b2e      	ldr	r3, [pc, #184]	; (8002ad0 <CheckAllPass+0xd8>)
 8002a18:	79db      	ldrb	r3, [r3, #7]
 8002a1a:	2b5f      	cmp	r3, #95	; 0x5f
 8002a1c:	d105      	bne.n	8002a2a <CheckAllPass+0x32>
 8002a1e:	4b2a      	ldr	r3, [pc, #168]	; (8002ac8 <CheckAllPass+0xd0>)
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	3301      	adds	r3, #1
 8002a24:	b2da      	uxtb	r2, r3
 8002a26:	4b28      	ldr	r3, [pc, #160]	; (8002ac8 <CheckAllPass+0xd0>)
 8002a28:	701a      	strb	r2, [r3, #0]
	if(strlen(WR_C_PUPDR) <= 15 && WR_C_PUPDR[8] == 67){cnt_allpass++;}// PC_13
 8002a2a:	482a      	ldr	r0, [pc, #168]	; (8002ad4 <CheckAllPass+0xdc>)
 8002a2c:	f7fd fbd8 	bl	80001e0 <strlen>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b0f      	cmp	r3, #15
 8002a34:	d809      	bhi.n	8002a4a <CheckAllPass+0x52>
 8002a36:	4b27      	ldr	r3, [pc, #156]	; (8002ad4 <CheckAllPass+0xdc>)
 8002a38:	7a1b      	ldrb	r3, [r3, #8]
 8002a3a:	2b43      	cmp	r3, #67	; 0x43
 8002a3c:	d105      	bne.n	8002a4a <CheckAllPass+0x52>
 8002a3e:	4b22      	ldr	r3, [pc, #136]	; (8002ac8 <CheckAllPass+0xd0>)
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	3301      	adds	r3, #1
 8002a44:	b2da      	uxtb	r2, r3
 8002a46:	4b20      	ldr	r3, [pc, #128]	; (8002ac8 <CheckAllPass+0xd0>)
 8002a48:	701a      	strb	r2, [r3, #0]

	if(WR_A_OPP[7] == 95){cnt_allpass++;}
 8002a4a:	4b23      	ldr	r3, [pc, #140]	; (8002ad8 <CheckAllPass+0xe0>)
 8002a4c:	79db      	ldrb	r3, [r3, #7]
 8002a4e:	2b5f      	cmp	r3, #95	; 0x5f
 8002a50:	d105      	bne.n	8002a5e <CheckAllPass+0x66>
 8002a52:	4b1d      	ldr	r3, [pc, #116]	; (8002ac8 <CheckAllPass+0xd0>)
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	3301      	adds	r3, #1
 8002a58:	b2da      	uxtb	r2, r3
 8002a5a:	4b1b      	ldr	r3, [pc, #108]	; (8002ac8 <CheckAllPass+0xd0>)
 8002a5c:	701a      	strb	r2, [r3, #0]
	if(WR_B_OPP[7] == 95){cnt_allpass++;}
 8002a5e:	4b1f      	ldr	r3, [pc, #124]	; (8002adc <CheckAllPass+0xe4>)
 8002a60:	79db      	ldrb	r3, [r3, #7]
 8002a62:	2b5f      	cmp	r3, #95	; 0x5f
 8002a64:	d105      	bne.n	8002a72 <CheckAllPass+0x7a>
 8002a66:	4b18      	ldr	r3, [pc, #96]	; (8002ac8 <CheckAllPass+0xd0>)
 8002a68:	781b      	ldrb	r3, [r3, #0]
 8002a6a:	3301      	adds	r3, #1
 8002a6c:	b2da      	uxtb	r2, r3
 8002a6e:	4b16      	ldr	r3, [pc, #88]	; (8002ac8 <CheckAllPass+0xd0>)
 8002a70:	701a      	strb	r2, [r3, #0]
	if(WR_C_OPP[7] == 95){cnt_allpass++;}
 8002a72:	4b1b      	ldr	r3, [pc, #108]	; (8002ae0 <CheckAllPass+0xe8>)
 8002a74:	79db      	ldrb	r3, [r3, #7]
 8002a76:	2b5f      	cmp	r3, #95	; 0x5f
 8002a78:	d105      	bne.n	8002a86 <CheckAllPass+0x8e>
 8002a7a:	4b13      	ldr	r3, [pc, #76]	; (8002ac8 <CheckAllPass+0xd0>)
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	3301      	adds	r3, #1
 8002a80:	b2da      	uxtb	r2, r3
 8002a82:	4b11      	ldr	r3, [pc, #68]	; (8002ac8 <CheckAllPass+0xd0>)
 8002a84:	701a      	strb	r2, [r3, #0]

	if(WR_A_OOD[7] == 95){cnt_allpass++;}
 8002a86:	4b17      	ldr	r3, [pc, #92]	; (8002ae4 <CheckAllPass+0xec>)
 8002a88:	79db      	ldrb	r3, [r3, #7]
 8002a8a:	2b5f      	cmp	r3, #95	; 0x5f
 8002a8c:	d105      	bne.n	8002a9a <CheckAllPass+0xa2>
 8002a8e:	4b0e      	ldr	r3, [pc, #56]	; (8002ac8 <CheckAllPass+0xd0>)
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	3301      	adds	r3, #1
 8002a94:	b2da      	uxtb	r2, r3
 8002a96:	4b0c      	ldr	r3, [pc, #48]	; (8002ac8 <CheckAllPass+0xd0>)
 8002a98:	701a      	strb	r2, [r3, #0]
	if(WR_B_OOD[7] == 95){cnt_allpass++;}
 8002a9a:	4b13      	ldr	r3, [pc, #76]	; (8002ae8 <CheckAllPass+0xf0>)
 8002a9c:	79db      	ldrb	r3, [r3, #7]
 8002a9e:	2b5f      	cmp	r3, #95	; 0x5f
 8002aa0:	d105      	bne.n	8002aae <CheckAllPass+0xb6>
 8002aa2:	4b09      	ldr	r3, [pc, #36]	; (8002ac8 <CheckAllPass+0xd0>)
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	3301      	adds	r3, #1
 8002aa8:	b2da      	uxtb	r2, r3
 8002aaa:	4b07      	ldr	r3, [pc, #28]	; (8002ac8 <CheckAllPass+0xd0>)
 8002aac:	701a      	strb	r2, [r3, #0]
	if(WR_C_OOD[7] == 95){cnt_allpass++;}
 8002aae:	4b0f      	ldr	r3, [pc, #60]	; (8002aec <CheckAllPass+0xf4>)
 8002ab0:	79db      	ldrb	r3, [r3, #7]
 8002ab2:	2b5f      	cmp	r3, #95	; 0x5f
 8002ab4:	d105      	bne.n	8002ac2 <CheckAllPass+0xca>
 8002ab6:	4b04      	ldr	r3, [pc, #16]	; (8002ac8 <CheckAllPass+0xd0>)
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	3301      	adds	r3, #1
 8002abc:	b2da      	uxtb	r2, r3
 8002abe:	4b02      	ldr	r3, [pc, #8]	; (8002ac8 <CheckAllPass+0xd0>)
 8002ac0:	701a      	strb	r2, [r3, #0]

}
 8002ac2:	bf00      	nop
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	200008a6 	.word	0x200008a6
 8002acc:	2000005c 	.word	0x2000005c
 8002ad0:	2000007c 	.word	0x2000007c
 8002ad4:	2000009c 	.word	0x2000009c
 8002ad8:	200000bc 	.word	0x200000bc
 8002adc:	200000dc 	.word	0x200000dc
 8002ae0:	200000fc 	.word	0x200000fc
 8002ae4:	2000011c 	.word	0x2000011c
 8002ae8:	2000013c 	.word	0x2000013c
 8002aec:	2000015c 	.word	0x2000015c

08002af0 <buzzer_scream_cnt>:

void buzzer_scream_cnt(){
 8002af0:	b598      	push	{r3, r4, r7, lr}
 8002af2:	af00      	add	r7, sp, #0
	static enum {bz_init, bz_silent, bz_scream} bz_st = bz_init;

		switch(bz_st){
 8002af4:	4b35      	ldr	r3, [pc, #212]	; (8002bcc <buzzer_scream_cnt+0xdc>)
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d039      	beq.n	8002b70 <buzzer_scream_cnt+0x80>
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d01d      	beq.n	8002b3c <buzzer_scream_cnt+0x4c>
		default:
		case bz_init:
			//HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);

			if(buzzr.flag){
 8002b00:	4b33      	ldr	r3, [pc, #204]	; (8002bd0 <buzzer_scream_cnt+0xe0>)
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d015      	beq.n	8002b34 <buzzer_scream_cnt+0x44>

				HAL_TIM_Base_Start_IT(&htim10);
 8002b08:	4832      	ldr	r0, [pc, #200]	; (8002bd4 <buzzer_scream_cnt+0xe4>)
 8002b0a:	f008 fac1 	bl	800b090 <HAL_TIM_Base_Start_IT>
				buzzr.timestamp = buzzr.priod_up + HAL_GetTick();
 8002b0e:	4b30      	ldr	r3, [pc, #192]	; (8002bd0 <buzzer_scream_cnt+0xe0>)
 8002b10:	885b      	ldrh	r3, [r3, #2]
 8002b12:	461c      	mov	r4, r3
 8002b14:	f003 ff0a 	bl	800692c <HAL_GetTick>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	4423      	add	r3, r4
 8002b1c:	4a2c      	ldr	r2, [pc, #176]	; (8002bd0 <buzzer_scream_cnt+0xe0>)
 8002b1e:	6093      	str	r3, [r2, #8]

				bz_st = bz_scream;
 8002b20:	4b2a      	ldr	r3, [pc, #168]	; (8002bcc <buzzer_scream_cnt+0xdc>)
 8002b22:	2202      	movs	r2, #2
 8002b24:	701a      	strb	r2, [r3, #0]
				/// down flag_counter every 1 scream
				buzzr.flag--;
 8002b26:	4b2a      	ldr	r3, [pc, #168]	; (8002bd0 <buzzer_scream_cnt+0xe0>)
 8002b28:	781b      	ldrb	r3, [r3, #0]
 8002b2a:	3b01      	subs	r3, #1
 8002b2c:	b2da      	uxtb	r2, r3
 8002b2e:	4b28      	ldr	r3, [pc, #160]	; (8002bd0 <buzzer_scream_cnt+0xe0>)
 8002b30:	701a      	strb	r2, [r3, #0]
			}else{
				HAL_TIM_Base_Stop_IT(&htim10);
			}

			break;
 8002b32:	e048      	b.n	8002bc6 <buzzer_scream_cnt+0xd6>
				HAL_TIM_Base_Stop_IT(&htim10);
 8002b34:	4827      	ldr	r0, [pc, #156]	; (8002bd4 <buzzer_scream_cnt+0xe4>)
 8002b36:	f008 fb0d 	bl	800b154 <HAL_TIM_Base_Stop_IT>
			break;
 8002b3a:	e044      	b.n	8002bc6 <buzzer_scream_cnt+0xd6>

		case bz_scream:
			HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET);
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b42:	4825      	ldr	r0, [pc, #148]	; (8002bd8 <buzzer_scream_cnt+0xe8>)
 8002b44:	f004 fde0 	bl	8007708 <HAL_GPIO_WritePin>

			if(HAL_GetTick() >= buzzr.timestamp){
 8002b48:	f003 fef0 	bl	800692c <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	4b20      	ldr	r3, [pc, #128]	; (8002bd0 <buzzer_scream_cnt+0xe0>)
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d334      	bcc.n	8002bc0 <buzzer_scream_cnt+0xd0>
				buzzr.timestamp = buzzr.priod_dn + HAL_GetTick();
 8002b56:	4b1e      	ldr	r3, [pc, #120]	; (8002bd0 <buzzer_scream_cnt+0xe0>)
 8002b58:	889b      	ldrh	r3, [r3, #4]
 8002b5a:	461c      	mov	r4, r3
 8002b5c:	f003 fee6 	bl	800692c <HAL_GetTick>
 8002b60:	4603      	mov	r3, r0
 8002b62:	4423      	add	r3, r4
 8002b64:	4a1a      	ldr	r2, [pc, #104]	; (8002bd0 <buzzer_scream_cnt+0xe0>)
 8002b66:	6093      	str	r3, [r2, #8]

				bz_st = bz_silent;
 8002b68:	4b18      	ldr	r3, [pc, #96]	; (8002bcc <buzzer_scream_cnt+0xdc>)
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002b6e:	e027      	b.n	8002bc0 <buzzer_scream_cnt+0xd0>


		case bz_silent:
			HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 8002b70:	2200      	movs	r2, #0
 8002b72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b76:	4818      	ldr	r0, [pc, #96]	; (8002bd8 <buzzer_scream_cnt+0xe8>)
 8002b78:	f004 fdc6 	bl	8007708 <HAL_GPIO_WritePin>

			if(HAL_GetTick() >= buzzr.timestamp){
 8002b7c:	f003 fed6 	bl	800692c <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	4b13      	ldr	r3, [pc, #76]	; (8002bd0 <buzzer_scream_cnt+0xe0>)
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d31c      	bcc.n	8002bc4 <buzzer_scream_cnt+0xd4>

				if(buzzr.flag){
 8002b8a:	4b11      	ldr	r3, [pc, #68]	; (8002bd0 <buzzer_scream_cnt+0xe0>)
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d012      	beq.n	8002bb8 <buzzer_scream_cnt+0xc8>
					buzzr.timestamp = buzzr.priod_up + HAL_GetTick();
 8002b92:	4b0f      	ldr	r3, [pc, #60]	; (8002bd0 <buzzer_scream_cnt+0xe0>)
 8002b94:	885b      	ldrh	r3, [r3, #2]
 8002b96:	461c      	mov	r4, r3
 8002b98:	f003 fec8 	bl	800692c <HAL_GetTick>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	4423      	add	r3, r4
 8002ba0:	4a0b      	ldr	r2, [pc, #44]	; (8002bd0 <buzzer_scream_cnt+0xe0>)
 8002ba2:	6093      	str	r3, [r2, #8]

					buzzr.flag--;
 8002ba4:	4b0a      	ldr	r3, [pc, #40]	; (8002bd0 <buzzer_scream_cnt+0xe0>)
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	3b01      	subs	r3, #1
 8002baa:	b2da      	uxtb	r2, r3
 8002bac:	4b08      	ldr	r3, [pc, #32]	; (8002bd0 <buzzer_scream_cnt+0xe0>)
 8002bae:	701a      	strb	r2, [r3, #0]
					bz_st = bz_scream;
 8002bb0:	4b06      	ldr	r3, [pc, #24]	; (8002bcc <buzzer_scream_cnt+0xdc>)
 8002bb2:	2202      	movs	r2, #2
 8002bb4:	701a      	strb	r2, [r3, #0]
				}else{
				bz_st = bz_init;
				}
			}

			break;
 8002bb6:	e005      	b.n	8002bc4 <buzzer_scream_cnt+0xd4>
				bz_st = bz_init;
 8002bb8:	4b04      	ldr	r3, [pc, #16]	; (8002bcc <buzzer_scream_cnt+0xdc>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	701a      	strb	r2, [r3, #0]
			break;
 8002bbe:	e001      	b.n	8002bc4 <buzzer_scream_cnt+0xd4>
			break;
 8002bc0:	bf00      	nop
 8002bc2:	e000      	b.n	8002bc6 <buzzer_scream_cnt+0xd6>
			break;
 8002bc4:	bf00      	nop
		}

}
 8002bc6:	bf00      	nop
 8002bc8:	bd98      	pop	{r3, r4, r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	200008b4 	.word	0x200008b4
 8002bd0:	20000878 	.word	0x20000878
 8002bd4:	20000544 	.word	0x20000544
 8002bd8:	40020800 	.word	0x40020800
 8002bdc:	00000000 	.word	0x00000000

08002be0 <GrandState_Verita>:


void GrandState_Verita(){
 8002be0:	b590      	push	{r4, r7, lr}
 8002be2:	b087      	sub	sp, #28
 8002be4:	af04      	add	r7, sp, #16

	switch(GrandState){
 8002be6:	4b8e      	ldr	r3, [pc, #568]	; (8002e20 <GrandState_Verita+0x240>)
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	2b16      	cmp	r3, #22
 8002bec:	f200 80b9 	bhi.w	8002d62 <GrandState_Verita+0x182>
 8002bf0:	a201      	add	r2, pc, #4	; (adr r2, 8002bf8 <GrandState_Verita+0x18>)
 8002bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bf6:	bf00      	nop
 8002bf8:	08002dfd 	.word	0x08002dfd
 8002bfc:	08002c55 	.word	0x08002c55
 8002c00:	08002d63 	.word	0x08002d63
 8002c04:	080031e5 	.word	0x080031e5
 8002c08:	08003381 	.word	0x08003381
 8002c0c:	08002e69 	.word	0x08002e69
 8002c10:	08002f63 	.word	0x08002f63
 8002c14:	08002fcb 	.word	0x08002fcb
 8002c18:	080039f5 	.word	0x080039f5
 8002c1c:	08003adf 	.word	0x08003adf
 8002c20:	08003b05 	.word	0x08003b05
 8002c24:	0800429d 	.word	0x0800429d
 8002c28:	080045b3 	.word	0x080045b3
 8002c2c:	08003d4d 	.word	0x08003d4d
 8002c30:	0800415b 	.word	0x0800415b
 8002c34:	08004867 	.word	0x08004867
 8002c38:	080049f7 	.word	0x080049f7
 8002c3c:	08004a55 	.word	0x08004a55
 8002c40:	08004b6f 	.word	0x08004b6f
 8002c44:	08004b99 	.word	0x08004b99
 8002c48:	08004c4b 	.word	0x08004c4b
 8002c4c:	08004cc5 	.word	0x08004cc5
 8002c50:	08004dbf 	.word	0x08004dbf

	case pre_lobby:

		stboxp.choice_set = bpoxy_lobby; //state_box_choice_n = 4;
 8002c54:	4b73      	ldr	r3, [pc, #460]	; (8002e24 <GrandState_Verita+0x244>)
 8002c56:	2201      	movs	r2, #1
 8002c58:	705a      	strb	r2, [r3, #1]
		ili9341_FillRect(0, 0, 320, 240, cl_BLACK);
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	9300      	str	r3, [sp, #0]
 8002c5e:	23f0      	movs	r3, #240	; 0xf0
 8002c60:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002c64:	2100      	movs	r1, #0
 8002c66:	2000      	movs	r0, #0
 8002c68:	f002 ffde 	bl	8005c28 <ili9341_FillRect>

		ili9341_FillRect(0, 0, 320, 32, cl_GRAY);
 8002c6c:	f645 23eb 	movw	r3, #23275	; 0x5aeb
 8002c70:	9300      	str	r3, [sp, #0]
 8002c72:	2320      	movs	r3, #32
 8002c74:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002c78:	2100      	movs	r1, #0
 8002c7a:	2000      	movs	r0, #0
 8002c7c:	f002 ffd4 	bl	8005c28 <ili9341_FillRect>


		ili9341_WriteStringNoBG(25, 10, "Nucleo-F411RE Tester", Font20, cl_BLACK);
 8002c80:	4b69      	ldr	r3, [pc, #420]	; (8002e28 <GrandState_Verita+0x248>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	9201      	str	r2, [sp, #4]
 8002c86:	685a      	ldr	r2, [r3, #4]
 8002c88:	9200      	str	r2, [sp, #0]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a67      	ldr	r2, [pc, #412]	; (8002e2c <GrandState_Verita+0x24c>)
 8002c8e:	210a      	movs	r1, #10
 8002c90:	2019      	movs	r0, #25
 8002c92:	f003 f9bf 	bl	8006014 <ili9341_WriteStringNoBG>
		ili9341_DrawHLine(cl_ORANGE, 0, 33, 320);
 8002c96:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002c9a:	2221      	movs	r2, #33	; 0x21
 8002c9c:	2100      	movs	r1, #0
 8002c9e:	f64f 10a0 	movw	r0, #63904	; 0xf9a0
 8002ca2:	f002 ff13 	bl	8005acc <ili9341_DrawHLine>

		ili9341_WriteString(185, 36, "OWL's OFFICE", Font16, cl_WHITE, cl_BLUE);
 8002ca6:	4b62      	ldr	r3, [pc, #392]	; (8002e30 <GrandState_Verita+0x250>)
 8002ca8:	221f      	movs	r2, #31
 8002caa:	9202      	str	r2, [sp, #8]
 8002cac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002cb0:	9201      	str	r2, [sp, #4]
 8002cb2:	685a      	ldr	r2, [r3, #4]
 8002cb4:	9200      	str	r2, [sp, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a5e      	ldr	r2, [pc, #376]	; (8002e34 <GrandState_Verita+0x254>)
 8002cba:	2124      	movs	r1, #36	; 0x24
 8002cbc:	20b9      	movs	r0, #185	; 0xb9
 8002cbe:	f003 f95c 	bl	8005f7a <ili9341_WriteString>

		//ili9341_FillRect(305, 0, 15, 240, cl_ORANGE);
		ili9341_FillRect(0, 0, 15, 240, cl_ORANGE);
 8002cc2:	f64f 13a0 	movw	r3, #63904	; 0xf9a0
 8002cc6:	9300      	str	r3, [sp, #0]
 8002cc8:	23f0      	movs	r3, #240	; 0xf0
 8002cca:	220f      	movs	r2, #15
 8002ccc:	2100      	movs	r1, #0
 8002cce:	2000      	movs	r0, #0
 8002cd0:	f002 ffaa 	bl	8005c28 <ili9341_FillRect>
		ili9341_DrawVLine(cl_BLACK, 14, 0, 240);
 8002cd4:	23f0      	movs	r3, #240	; 0xf0
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	210e      	movs	r1, #14
 8002cda:	2000      	movs	r0, #0
 8002cdc:	f002 ff4d 	bl	8005b7a <ili9341_DrawVLine>

		ili9341_WriteStringNoBG(60, 60, "Full-Script", Font16, cl_CYAN);
 8002ce0:	4b53      	ldr	r3, [pc, #332]	; (8002e30 <GrandState_Verita+0x250>)
 8002ce2:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002ce6:	9201      	str	r2, [sp, #4]
 8002ce8:	685a      	ldr	r2, [r3, #4]
 8002cea:	9200      	str	r2, [sp, #0]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a52      	ldr	r2, [pc, #328]	; (8002e38 <GrandState_Verita+0x258>)
 8002cf0:	213c      	movs	r1, #60	; 0x3c
 8002cf2:	203c      	movs	r0, #60	; 0x3c
 8002cf4:	f003 f98e 	bl	8006014 <ili9341_WriteStringNoBG>
		ili9341_WriteStringNoBG(60, 90, "Monitor-mode", Font16, cl_CYAN);
 8002cf8:	4b4d      	ldr	r3, [pc, #308]	; (8002e30 <GrandState_Verita+0x250>)
 8002cfa:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002cfe:	9201      	str	r2, [sp, #4]
 8002d00:	685a      	ldr	r2, [r3, #4]
 8002d02:	9200      	str	r2, [sp, #0]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a4d      	ldr	r2, [pc, #308]	; (8002e3c <GrandState_Verita+0x25c>)
 8002d08:	215a      	movs	r1, #90	; 0x5a
 8002d0a:	203c      	movs	r0, #60	; 0x3c
 8002d0c:	f003 f982 	bl	8006014 <ili9341_WriteStringNoBG>
		ili9341_WriteStringNoBG(60, 120, "Hardware-mode", Font16, cl_CYAN);
 8002d10:	4b47      	ldr	r3, [pc, #284]	; (8002e30 <GrandState_Verita+0x250>)
 8002d12:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002d16:	9201      	str	r2, [sp, #4]
 8002d18:	685a      	ldr	r2, [r3, #4]
 8002d1a:	9200      	str	r2, [sp, #0]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a48      	ldr	r2, [pc, #288]	; (8002e40 <GrandState_Verita+0x260>)
 8002d20:	2178      	movs	r1, #120	; 0x78
 8002d22:	203c      	movs	r0, #60	; 0x3c
 8002d24:	f003 f976 	bl	8006014 <ili9341_WriteStringNoBG>
		ili9341_WriteStringNoBG(60, 150, "Firmware-mode", Font16, cl_CYAN);
 8002d28:	4b41      	ldr	r3, [pc, #260]	; (8002e30 <GrandState_Verita+0x250>)
 8002d2a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002d2e:	9201      	str	r2, [sp, #4]
 8002d30:	685a      	ldr	r2, [r3, #4]
 8002d32:	9200      	str	r2, [sp, #0]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a43      	ldr	r2, [pc, #268]	; (8002e44 <GrandState_Verita+0x264>)
 8002d38:	2196      	movs	r1, #150	; 0x96
 8002d3a:	203c      	movs	r0, #60	; 0x3c
 8002d3c:	f003 f96a 	bl	8006014 <ili9341_WriteStringNoBG>
		ili9341_WriteStringNoBG(60, 180, "About Verita", Font16, cl_CYAN);
 8002d40:	4b3b      	ldr	r3, [pc, #236]	; (8002e30 <GrandState_Verita+0x250>)
 8002d42:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002d46:	9201      	str	r2, [sp, #4]
 8002d48:	685a      	ldr	r2, [r3, #4]
 8002d4a:	9200      	str	r2, [sp, #0]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a3e      	ldr	r2, [pc, #248]	; (8002e48 <GrandState_Verita+0x268>)
 8002d50:	21b4      	movs	r1, #180	; 0xb4
 8002d52:	203c      	movs	r0, #60	; 0x3c
 8002d54:	f003 f95e 	bl	8006014 <ili9341_WriteStringNoBG>



		GrandState = lobby;
 8002d58:	4b31      	ldr	r3, [pc, #196]	; (8002e20 <GrandState_Verita+0x240>)
 8002d5a:	2202      	movs	r2, #2
 8002d5c:	701a      	strb	r2, [r3, #0]
		break; // pre-lobby
 8002d5e:	f002 b852 	b.w	8004e06 <GrandState_Verita+0x2226>

	default:
	case lobby:
		stboxp.choice_set = bpoxy_lobby; //state_box_choice_n = 4;
 8002d62:	4b30      	ldr	r3, [pc, #192]	; (8002e24 <GrandState_Verita+0x244>)
 8002d64:	2201      	movs	r2, #1
 8002d66:	705a      	strb	r2, [r3, #1]

		// debug
		sprintf(TextDispBuffer, "%ld, %d", TIM3->CNT, stboxp.ch_is);
 8002d68:	4b38      	ldr	r3, [pc, #224]	; (8002e4c <GrandState_Verita+0x26c>)
 8002d6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d6c:	4b2d      	ldr	r3, [pc, #180]	; (8002e24 <GrandState_Verita+0x244>)
 8002d6e:	789b      	ldrb	r3, [r3, #2]
 8002d70:	4937      	ldr	r1, [pc, #220]	; (8002e50 <GrandState_Verita+0x270>)
 8002d72:	4838      	ldr	r0, [pc, #224]	; (8002e54 <GrandState_Verita+0x274>)
 8002d74:	f00a fcea 	bl	800d74c <siprintf>
		ili9341_WriteString(240, 220, TextDispBuffer, Font12, cl_WHITE, cl_BLACK);
 8002d78:	4b37      	ldr	r3, [pc, #220]	; (8002e58 <GrandState_Verita+0x278>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	9202      	str	r2, [sp, #8]
 8002d7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d82:	9201      	str	r2, [sp, #4]
 8002d84:	685a      	ldr	r2, [r3, #4]
 8002d86:	9200      	str	r2, [sp, #0]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a32      	ldr	r2, [pc, #200]	; (8002e54 <GrandState_Verita+0x274>)
 8002d8c:	21dc      	movs	r1, #220	; 0xdc
 8002d8e:	20f0      	movs	r0, #240	; 0xf0
 8002d90:	f003 f8f3 	bl	8005f7a <ili9341_WriteString>
		//simple_scr();

		if(k_flag.cnt){
 8002d94:	4b31      	ldr	r3, [pc, #196]	; (8002e5c <GrandState_Verita+0x27c>)
 8002d96:	789b      	ldrb	r3, [r3, #2]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	f002 8021 	beq.w	8004de0 <GrandState_Verita+0x2200>


			if (stboxp.ch_is == 1) {
 8002d9e:	4b21      	ldr	r3, [pc, #132]	; (8002e24 <GrandState_Verita+0x244>)
 8002da0:	789b      	ldrb	r3, [r3, #2]
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d106      	bne.n	8002db4 <GrandState_Verita+0x1d4>
				gScr.fullflag = ff_runfull;
 8002da6:	4b2e      	ldr	r3, [pc, #184]	; (8002e60 <GrandState_Verita+0x280>)
 8002da8:	2203      	movs	r2, #3
 8002daa:	701a      	strb	r2, [r3, #0]
				GrandState = pre_hw_chk;
 8002dac:	4b1c      	ldr	r3, [pc, #112]	; (8002e20 <GrandState_Verita+0x240>)
 8002dae:	2203      	movs	r2, #3
 8002db0:	701a      	strb	r2, [r3, #0]
 8002db2:	e01e      	b.n	8002df2 <GrandState_Verita+0x212>
			}
			else if (stboxp.ch_is == 2){GrandState = pre_monitor;}
 8002db4:	4b1b      	ldr	r3, [pc, #108]	; (8002e24 <GrandState_Verita+0x244>)
 8002db6:	789b      	ldrb	r3, [r3, #2]
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d103      	bne.n	8002dc4 <GrandState_Verita+0x1e4>
 8002dbc:	4b18      	ldr	r3, [pc, #96]	; (8002e20 <GrandState_Verita+0x240>)
 8002dbe:	220b      	movs	r2, #11
 8002dc0:	701a      	strb	r2, [r3, #0]
 8002dc2:	e016      	b.n	8002df2 <GrandState_Verita+0x212>
			else if (stboxp.ch_is == 3){GrandState = pre_hw_chk;}
 8002dc4:	4b17      	ldr	r3, [pc, #92]	; (8002e24 <GrandState_Verita+0x244>)
 8002dc6:	789b      	ldrb	r3, [r3, #2]
 8002dc8:	2b03      	cmp	r3, #3
 8002dca:	d103      	bne.n	8002dd4 <GrandState_Verita+0x1f4>
 8002dcc:	4b14      	ldr	r3, [pc, #80]	; (8002e20 <GrandState_Verita+0x240>)
 8002dce:	2203      	movs	r2, #3
 8002dd0:	701a      	strb	r2, [r3, #0]
 8002dd2:	e00e      	b.n	8002df2 <GrandState_Verita+0x212>
			else if (stboxp.ch_is == 4){GrandState = pre_fw_lob;}
 8002dd4:	4b13      	ldr	r3, [pc, #76]	; (8002e24 <GrandState_Verita+0x244>)
 8002dd6:	789b      	ldrb	r3, [r3, #2]
 8002dd8:	2b04      	cmp	r3, #4
 8002dda:	d103      	bne.n	8002de4 <GrandState_Verita+0x204>
 8002ddc:	4b10      	ldr	r3, [pc, #64]	; (8002e20 <GrandState_Verita+0x240>)
 8002dde:	2205      	movs	r2, #5
 8002de0:	701a      	strb	r2, [r3, #0]
 8002de2:	e006      	b.n	8002df2 <GrandState_Verita+0x212>
			else if (stboxp.ch_is == 5){GrandState = pre_about;}
 8002de4:	4b0f      	ldr	r3, [pc, #60]	; (8002e24 <GrandState_Verita+0x244>)
 8002de6:	789b      	ldrb	r3, [r3, #2]
 8002de8:	2b05      	cmp	r3, #5
 8002dea:	d102      	bne.n	8002df2 <GrandState_Verita+0x212>
 8002dec:	4b0c      	ldr	r3, [pc, #48]	; (8002e20 <GrandState_Verita+0x240>)
 8002dee:	2211      	movs	r2, #17
 8002df0:	701a      	strb	r2, [r3, #0]

		k_flag.cnt = 0;
 8002df2:	4b1a      	ldr	r3, [pc, #104]	; (8002e5c <GrandState_Verita+0x27c>)
 8002df4:	2200      	movs	r2, #0
 8002df6:	709a      	strb	r2, [r3, #2]
		}

		break; // lobby
 8002df8:	f001 bff2 	b.w	8004de0 <GrandState_Verita+0x2200>

	case init:
		stboxp.choice_set = bpoxy_def;
 8002dfc:	4b09      	ldr	r3, [pc, #36]	; (8002e24 <GrandState_Verita+0x244>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	705a      	strb	r2, [r3, #1]

		BL_UART_Start(&huart1);
 8002e02:	4818      	ldr	r0, [pc, #96]	; (8002e64 <GrandState_Verita+0x284>)
 8002e04:	f7fe fc50 	bl	80016a8 <BL_UART_Start>
		BL_UART_ExtendEraseMem_SP(&huart1, Erase_MASS_CMD);
 8002e08:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002e0c:	4815      	ldr	r0, [pc, #84]	; (8002e64 <GrandState_Verita+0x284>)
 8002e0e:	f7fe fdc5 	bl	800199c <BL_UART_ExtendEraseMem_SP>
		BL_UART_Finish();
 8002e12:	f7fe fc79 	bl	8001708 <BL_UART_Finish>

		GrandState = lobby;
 8002e16:	4b02      	ldr	r3, [pc, #8]	; (8002e20 <GrandState_Verita+0x240>)
 8002e18:	2202      	movs	r2, #2
 8002e1a:	701a      	strb	r2, [r3, #0]
		break;
 8002e1c:	f001 bff3 	b.w	8004e06 <GrandState_Verita+0x2226>
 8002e20:	20000006 	.word	0x20000006
 8002e24:	200008ac 	.word	0x200008ac
 8002e28:	20000238 	.word	0x20000238
 8002e2c:	0800fe00 	.word	0x0800fe00
 8002e30:	20000230 	.word	0x20000230
 8002e34:	0800fe18 	.word	0x0800fe18
 8002e38:	0800fe28 	.word	0x0800fe28
 8002e3c:	0800fe34 	.word	0x0800fe34
 8002e40:	0800fe44 	.word	0x0800fe44
 8002e44:	0800fe54 	.word	0x0800fe54
 8002e48:	0800fe64 	.word	0x0800fe64
 8002e4c:	40000400 	.word	0x40000400
 8002e50:	0800fdc0 	.word	0x0800fdc0
 8002e54:	200006b8 	.word	0x200006b8
 8002e58:	20000228 	.word	0x20000228
 8002e5c:	20000890 	.word	0x20000890
 8002e60:	20000894 	.word	0x20000894
 8002e64:	2000058c 	.word	0x2000058c

	case pre_fw_lob:
		stboxp.choice_set = bpoxy_lobfw;
 8002e68:	4ba3      	ldr	r3, [pc, #652]	; (80030f8 <GrandState_Verita+0x518>)
 8002e6a:	2202      	movs	r2, #2
 8002e6c:	705a      	strb	r2, [r3, #1]
		ili9341_FillRect(0, 30, 320, 210, cl_BLACK);
 8002e6e:	2300      	movs	r3, #0
 8002e70:	9300      	str	r3, [sp, #0]
 8002e72:	23d2      	movs	r3, #210	; 0xd2
 8002e74:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002e78:	211e      	movs	r1, #30
 8002e7a:	2000      	movs	r0, #0
 8002e7c:	f002 fed4 	bl	8005c28 <ili9341_FillRect>
		ili9341_FillRect(0, 0, 320, 30, cl_PURPLE);
 8002e80:	f647 030f 	movw	r3, #30735	; 0x780f
 8002e84:	9300      	str	r3, [sp, #0]
 8002e86:	231e      	movs	r3, #30
 8002e88:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002e8c:	2100      	movs	r1, #0
 8002e8e:	2000      	movs	r0, #0
 8002e90:	f002 feca 	bl	8005c28 <ili9341_FillRect>

		//// -------- client closed make sure --------
		HAL_GPIO_WritePin(RelayClient_GPIO_Port, RelayClient_Pin, GPIO_PIN_RESET);
 8002e94:	2200      	movs	r2, #0
 8002e96:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002e9a:	4898      	ldr	r0, [pc, #608]	; (80030fc <GrandState_Verita+0x51c>)
 8002e9c:	f004 fc34 	bl	8007708 <HAL_GPIO_WritePin>

		ili9341_WriteStringNoBG(60, 5, "Firmware Mode", Font20, cl_WHITE);
 8002ea0:	4b97      	ldr	r3, [pc, #604]	; (8003100 <GrandState_Verita+0x520>)
 8002ea2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ea6:	9201      	str	r2, [sp, #4]
 8002ea8:	685a      	ldr	r2, [r3, #4]
 8002eaa:	9200      	str	r2, [sp, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a95      	ldr	r2, [pc, #596]	; (8003104 <GrandState_Verita+0x524>)
 8002eb0:	2105      	movs	r1, #5
 8002eb2:	203c      	movs	r0, #60	; 0x3c
 8002eb4:	f003 f8ae 	bl	8006014 <ili9341_WriteStringNoBG>
		ili9341_WriteStringNoBG(50, 60, "Firmware Upload", Font16, cl_CYAN);
 8002eb8:	4b93      	ldr	r3, [pc, #588]	; (8003108 <GrandState_Verita+0x528>)
 8002eba:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002ebe:	9201      	str	r2, [sp, #4]
 8002ec0:	685a      	ldr	r2, [r3, #4]
 8002ec2:	9200      	str	r2, [sp, #0]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a91      	ldr	r2, [pc, #580]	; (800310c <GrandState_Verita+0x52c>)
 8002ec8:	213c      	movs	r1, #60	; 0x3c
 8002eca:	2032      	movs	r0, #50	; 0x32
 8002ecc:	f003 f8a2 	bl	8006014 <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"FW ver: %08X", client_bin_Ver);
 8002ed0:	4a8f      	ldr	r2, [pc, #572]	; (8003110 <GrandState_Verita+0x530>)
 8002ed2:	4990      	ldr	r1, [pc, #576]	; (8003114 <GrandState_Verita+0x534>)
 8002ed4:	4890      	ldr	r0, [pc, #576]	; (8003118 <GrandState_Verita+0x538>)
 8002ed6:	f00a fc39 	bl	800d74c <siprintf>
		ili9341_WriteStringNoBG(65, 80, TextDispBuffer, Font12, cl_WHITE);
 8002eda:	4b90      	ldr	r3, [pc, #576]	; (800311c <GrandState_Verita+0x53c>)
 8002edc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ee0:	9201      	str	r2, [sp, #4]
 8002ee2:	685a      	ldr	r2, [r3, #4]
 8002ee4:	9200      	str	r2, [sp, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a8b      	ldr	r2, [pc, #556]	; (8003118 <GrandState_Verita+0x538>)
 8002eea:	2150      	movs	r1, #80	; 0x50
 8002eec:	2041      	movs	r0, #65	; 0x41
 8002eee:	f003 f891 	bl	8006014 <ili9341_WriteStringNoBG>

		ili9341_WriteStringNoBG(50, 100, "Erase Flash", Font16, cl_CYAN);
 8002ef2:	4b85      	ldr	r3, [pc, #532]	; (8003108 <GrandState_Verita+0x528>)
 8002ef4:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002ef8:	9201      	str	r2, [sp, #4]
 8002efa:	685a      	ldr	r2, [r3, #4]
 8002efc:	9200      	str	r2, [sp, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a87      	ldr	r2, [pc, #540]	; (8003120 <GrandState_Verita+0x540>)
 8002f02:	2164      	movs	r1, #100	; 0x64
 8002f04:	2032      	movs	r0, #50	; 0x32
 8002f06:	f003 f885 	bl	8006014 <ili9341_WriteStringNoBG>
		ili9341_WriteStringNoBG(50, 140, "GPIO-check", Font16, cl_CYAN);
 8002f0a:	4b7f      	ldr	r3, [pc, #508]	; (8003108 <GrandState_Verita+0x528>)
 8002f0c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002f10:	9201      	str	r2, [sp, #4]
 8002f12:	685a      	ldr	r2, [r3, #4]
 8002f14:	9200      	str	r2, [sp, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a82      	ldr	r2, [pc, #520]	; (8003124 <GrandState_Verita+0x544>)
 8002f1a:	218c      	movs	r1, #140	; 0x8c
 8002f1c:	2032      	movs	r0, #50	; 0x32
 8002f1e:	f003 f879 	bl	8006014 <ili9341_WriteStringNoBG>
		ili9341_WriteStringNoBG(65, 160, "(Client firmware uploaded first)", Font12, cl_WHITE);
 8002f22:	4b7e      	ldr	r3, [pc, #504]	; (800311c <GrandState_Verita+0x53c>)
 8002f24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f28:	9201      	str	r2, [sp, #4]
 8002f2a:	685a      	ldr	r2, [r3, #4]
 8002f2c:	9200      	str	r2, [sp, #0]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a7d      	ldr	r2, [pc, #500]	; (8003128 <GrandState_Verita+0x548>)
 8002f32:	21a0      	movs	r1, #160	; 0xa0
 8002f34:	2041      	movs	r0, #65	; 0x41
 8002f36:	f003 f86d 	bl	8006014 <ili9341_WriteStringNoBG>
		ili9341_WriteStringNoBG(30, 220, "<-Back", Font16, cl_WHITE);
 8002f3a:	4b73      	ldr	r3, [pc, #460]	; (8003108 <GrandState_Verita+0x528>)
 8002f3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f40:	9201      	str	r2, [sp, #4]
 8002f42:	685a      	ldr	r2, [r3, #4]
 8002f44:	9200      	str	r2, [sp, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a78      	ldr	r2, [pc, #480]	; (800312c <GrandState_Verita+0x54c>)
 8002f4a:	21dc      	movs	r1, #220	; 0xdc
 8002f4c:	201e      	movs	r0, #30
 8002f4e:	f003 f861 	bl	8006014 <ili9341_WriteStringNoBG>


		k_flag.cnt = 0;
 8002f52:	4b77      	ldr	r3, [pc, #476]	; (8003130 <GrandState_Verita+0x550>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	709a      	strb	r2, [r3, #2]
		GrandState = fw_lob;
 8002f58:	4b76      	ldr	r3, [pc, #472]	; (8003134 <GrandState_Verita+0x554>)
 8002f5a:	2206      	movs	r2, #6
 8002f5c:	701a      	strb	r2, [r3, #0]
		break;
 8002f5e:	f001 bf52 	b.w	8004e06 <GrandState_Verita+0x2226>

	case fw_lob:

		if(k_flag.cnt){
 8002f62:	4b73      	ldr	r3, [pc, #460]	; (8003130 <GrandState_Verita+0x550>)
 8002f64:	789b      	ldrb	r3, [r3, #2]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	f001 873c 	beq.w	8004de4 <GrandState_Verita+0x2204>

			if(stboxp.ch_is == 1){GrandState = pre_bootloader;}
 8002f6c:	4b62      	ldr	r3, [pc, #392]	; (80030f8 <GrandState_Verita+0x518>)
 8002f6e:	789b      	ldrb	r3, [r3, #2]
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d102      	bne.n	8002f7a <GrandState_Verita+0x39a>
 8002f74:	4b6f      	ldr	r3, [pc, #444]	; (8003134 <GrandState_Verita+0x554>)
 8002f76:	2208      	movs	r2, #8
 8002f78:	701a      	strb	r2, [r3, #0]
			if(stboxp.ch_is == 2){GrandState = pre_fw_erase;}
 8002f7a:	4b5f      	ldr	r3, [pc, #380]	; (80030f8 <GrandState_Verita+0x518>)
 8002f7c:	789b      	ldrb	r3, [r3, #2]
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d102      	bne.n	8002f88 <GrandState_Verita+0x3a8>
 8002f82:	4b6c      	ldr	r3, [pc, #432]	; (8003134 <GrandState_Verita+0x554>)
 8002f84:	2207      	movs	r2, #7
 8002f86:	701a      	strb	r2, [r3, #0]
			if(stboxp.ch_is == 3){
 8002f88:	4b5b      	ldr	r3, [pc, #364]	; (80030f8 <GrandState_Verita+0x518>)
 8002f8a:	789b      	ldrb	r3, [r3, #2]
 8002f8c:	2b03      	cmp	r3, #3
 8002f8e:	d110      	bne.n	8002fb2 <GrandState_Verita+0x3d2>
				GrandState = pre_gpio_chk;
 8002f90:	4b68      	ldr	r3, [pc, #416]	; (8003134 <GrandState_Verita+0x554>)
 8002f92:	220d      	movs	r2, #13
 8002f94:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(RelayClient_GPIO_Port, RelayClient_Pin, GPIO_PIN_SET);
 8002f96:	2201      	movs	r2, #1
 8002f98:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002f9c:	4857      	ldr	r0, [pc, #348]	; (80030fc <GrandState_Verita+0x51c>)
 8002f9e:	f004 fbb3 	bl	8007708 <HAL_GPIO_WritePin>
				gScr.timelog = HAL_GetTick() + 4500;
 8002fa2:	f003 fcc3 	bl	800692c <HAL_GetTick>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	f503 538c 	add.w	r3, r3, #4480	; 0x1180
 8002fac:	3314      	adds	r3, #20
 8002fae:	4a62      	ldr	r2, [pc, #392]	; (8003138 <GrandState_Verita+0x558>)
 8002fb0:	6053      	str	r3, [r2, #4]
			}
			if(stboxp.ch_is == 4){GrandState = pre_lobby;}
 8002fb2:	4b51      	ldr	r3, [pc, #324]	; (80030f8 <GrandState_Verita+0x518>)
 8002fb4:	789b      	ldrb	r3, [r3, #2]
 8002fb6:	2b04      	cmp	r3, #4
 8002fb8:	d102      	bne.n	8002fc0 <GrandState_Verita+0x3e0>
 8002fba:	4b5e      	ldr	r3, [pc, #376]	; (8003134 <GrandState_Verita+0x554>)
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	701a      	strb	r2, [r3, #0]

		k_flag.cnt = 0;
 8002fc0:	4b5b      	ldr	r3, [pc, #364]	; (8003130 <GrandState_Verita+0x550>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	709a      	strb	r2, [r3, #2]
		}

		break;
 8002fc6:	f001 bf0d 	b.w	8004de4 <GrandState_Verita+0x2204>

	case pre_fw_erase:
			stboxp.choice_set = bpoxy_no;
 8002fca:	4b4b      	ldr	r3, [pc, #300]	; (80030f8 <GrandState_Verita+0x518>)
 8002fcc:	2203      	movs	r2, #3
 8002fce:	705a      	strb	r2, [r3, #1]
			ili9341_FillRect(0, 30, 320, 210, cl_BLACK);
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	9300      	str	r3, [sp, #0]
 8002fd4:	23d2      	movs	r3, #210	; 0xd2
 8002fd6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002fda:	211e      	movs	r1, #30
 8002fdc:	2000      	movs	r0, #0
 8002fde:	f002 fe23 	bl	8005c28 <ili9341_FillRect>
			ili9341_FillRect(0, 0, 320, 30, cl_PURPLE);
 8002fe2:	f647 030f 	movw	r3, #30735	; 0x780f
 8002fe6:	9300      	str	r3, [sp, #0]
 8002fe8:	231e      	movs	r3, #30
 8002fea:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002fee:	2100      	movs	r1, #0
 8002ff0:	2000      	movs	r0, #0
 8002ff2:	f002 fe19 	bl	8005c28 <ili9341_FillRect>

			ili9341_WriteStringNoBG(60, 5, "Firmware Mode", Font20, cl_WHITE);
 8002ff6:	4b42      	ldr	r3, [pc, #264]	; (8003100 <GrandState_Verita+0x520>)
 8002ff8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ffc:	9201      	str	r2, [sp, #4]
 8002ffe:	685a      	ldr	r2, [r3, #4]
 8003000:	9200      	str	r2, [sp, #0]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a3f      	ldr	r2, [pc, #252]	; (8003104 <GrandState_Verita+0x524>)
 8003006:	2105      	movs	r1, #5
 8003008:	203c      	movs	r0, #60	; 0x3c
 800300a:	f003 f803 	bl	8006014 <ili9341_WriteStringNoBG>

			if(gScr.fullflag == ff_runfull){
 800300e:	4b4a      	ldr	r3, [pc, #296]	; (8003138 <GrandState_Verita+0x558>)
 8003010:	781b      	ldrb	r3, [r3, #0]
 8003012:	2b03      	cmp	r3, #3
 8003014:	d112      	bne.n	800303c <GrandState_Verita+0x45c>
				sprintf(TextDispBuffer,"FULL"); ili9341_WriteString(250, 5, TextDispBuffer, Font20, cl_RED, cl_YELLOW);
 8003016:	4949      	ldr	r1, [pc, #292]	; (800313c <GrandState_Verita+0x55c>)
 8003018:	483f      	ldr	r0, [pc, #252]	; (8003118 <GrandState_Verita+0x538>)
 800301a:	f00a fb97 	bl	800d74c <siprintf>
 800301e:	4b38      	ldr	r3, [pc, #224]	; (8003100 <GrandState_Verita+0x520>)
 8003020:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8003024:	9202      	str	r2, [sp, #8]
 8003026:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800302a:	9201      	str	r2, [sp, #4]
 800302c:	685a      	ldr	r2, [r3, #4]
 800302e:	9200      	str	r2, [sp, #0]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a39      	ldr	r2, [pc, #228]	; (8003118 <GrandState_Verita+0x538>)
 8003034:	2105      	movs	r1, #5
 8003036:	20fa      	movs	r0, #250	; 0xfa
 8003038:	f002 ff9f 	bl	8005f7a <ili9341_WriteString>
			}
			ili9341_WriteStringNoBG(30, 220, "<-Back", Font16, cl_WHITE);
 800303c:	4b32      	ldr	r3, [pc, #200]	; (8003108 <GrandState_Verita+0x528>)
 800303e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003042:	9201      	str	r2, [sp, #4]
 8003044:	685a      	ldr	r2, [r3, #4]
 8003046:	9200      	str	r2, [sp, #0]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a38      	ldr	r2, [pc, #224]	; (800312c <GrandState_Verita+0x54c>)
 800304c:	21dc      	movs	r1, #220	; 0xdc
 800304e:	201e      	movs	r0, #30
 8003050:	f002 ffe0 	bl	8006014 <ili9341_WriteStringNoBG>
			ili9341_WriteStringNoBG(70, 50, "Erase Flash ...", Font20, cl_CYAN);
 8003054:	4b2a      	ldr	r3, [pc, #168]	; (8003100 <GrandState_Verita+0x520>)
 8003056:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800305a:	9201      	str	r2, [sp, #4]
 800305c:	685a      	ldr	r2, [r3, #4]
 800305e:	9200      	str	r2, [sp, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a37      	ldr	r2, [pc, #220]	; (8003140 <GrandState_Verita+0x560>)
 8003064:	2132      	movs	r1, #50	; 0x32
 8003066:	2046      	movs	r0, #70	; 0x46
 8003068:	f002 ffd4 	bl	8006014 <ili9341_WriteStringNoBG>

			//// -- Open Client ----
			if(HAL_GPIO_ReadPin(RelayClient_GPIO_Port, RelayClient_Pin) >= 1){
 800306c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003070:	4822      	ldr	r0, [pc, #136]	; (80030fc <GrandState_Verita+0x51c>)
 8003072:	f004 fb31 	bl	80076d8 <HAL_GPIO_ReadPin>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d003      	beq.n	8003084 <GrandState_Verita+0x4a4>
				HAL_Delay(20);
 800307c:	2014      	movs	r0, #20
 800307e:	f003 fc61 	bl	8006944 <HAL_Delay>
 8003082:	e009      	b.n	8003098 <GrandState_Verita+0x4b8>
			}else{
				HAL_GPIO_WritePin(RelayClient_GPIO_Port, RelayClient_Pin, GPIO_PIN_SET);
 8003084:	2201      	movs	r2, #1
 8003086:	f44f 7100 	mov.w	r1, #512	; 0x200
 800308a:	481c      	ldr	r0, [pc, #112]	; (80030fc <GrandState_Verita+0x51c>)
 800308c:	f004 fb3c 	bl	8007708 <HAL_GPIO_WritePin>
				HAL_Delay(2200);
 8003090:	f640 0098 	movw	r0, #2200	; 0x898
 8003094:	f003 fc56 	bl	8006944 <HAL_Delay>
			}


			BL_UART_Start(&huart1);
 8003098:	482a      	ldr	r0, [pc, #168]	; (8003144 <GrandState_Verita+0x564>)
 800309a:	f7fe fb05 	bl	80016a8 <BL_UART_Start>

			sprintf(TextDispBuffer,"...");
 800309e:	492a      	ldr	r1, [pc, #168]	; (8003148 <GrandState_Verita+0x568>)
 80030a0:	481d      	ldr	r0, [pc, #116]	; (8003118 <GrandState_Verita+0x538>)
 80030a2:	f00a fb53 	bl	800d74c <siprintf>
			ili9341_WriteStringNoBG(260, 50, TextDispBuffer, Font20, cl_CYAN);
 80030a6:	4b16      	ldr	r3, [pc, #88]	; (8003100 <GrandState_Verita+0x520>)
 80030a8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80030ac:	9201      	str	r2, [sp, #4]
 80030ae:	685a      	ldr	r2, [r3, #4]
 80030b0:	9200      	str	r2, [sp, #0]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a18      	ldr	r2, [pc, #96]	; (8003118 <GrandState_Verita+0x538>)
 80030b6:	2132      	movs	r1, #50	; 0x32
 80030b8:	f44f 7082 	mov.w	r0, #260	; 0x104
 80030bc:	f002 ffaa 	bl	8006014 <ili9341_WriteStringNoBG>

			//// Flash Memory Erase ============,
			blrespo = BL_UART_ExtendEraseMem_SP(&huart1, Erase_MASS_CMD);
 80030c0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80030c4:	481f      	ldr	r0, [pc, #124]	; (8003144 <GrandState_Verita+0x564>)
 80030c6:	f7fe fc69 	bl	800199c <BL_UART_ExtendEraseMem_SP>
 80030ca:	4603      	mov	r3, r0
 80030cc:	461a      	mov	r2, r3
 80030ce:	4b1f      	ldr	r3, [pc, #124]	; (800314c <GrandState_Verita+0x56c>)
 80030d0:	701a      	strb	r2, [r3, #0]

			//// display
			if(blrespo == UB_ACK){
 80030d2:	4b1e      	ldr	r3, [pc, #120]	; (800314c <GrandState_Verita+0x56c>)
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	2b79      	cmp	r3, #121	; 0x79
 80030d8:	d10b      	bne.n	80030f2 <GrandState_Verita+0x512>
				ili9341_WriteStringNoBG(70, 80, "Mem erased", Font20, cl_YELLOW);
 80030da:	4b09      	ldr	r3, [pc, #36]	; (8003100 <GrandState_Verita+0x520>)
 80030dc:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80030e0:	9201      	str	r2, [sp, #4]
 80030e2:	685a      	ldr	r2, [r3, #4]
 80030e4:	9200      	str	r2, [sp, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a19      	ldr	r2, [pc, #100]	; (8003150 <GrandState_Verita+0x570>)
 80030ea:	2150      	movs	r1, #80	; 0x50
 80030ec:	2046      	movs	r0, #70	; 0x46
 80030ee:	f002 ff91 	bl	8006014 <ili9341_WriteStringNoBG>
			}
			//// wait flash erasing for fullscript, about 5-6 sec
			//if(gScr.fullflag == ff_runfull){};
			for(int i = 0;i < 6; i++){
 80030f2:	2300      	movs	r3, #0
 80030f4:	607b      	str	r3, [r7, #4]
 80030f6:	e049      	b.n	800318c <GrandState_Verita+0x5ac>
 80030f8:	200008ac 	.word	0x200008ac
 80030fc:	40020800 	.word	0x40020800
 8003100:	20000238 	.word	0x20000238
 8003104:	0800fe74 	.word	0x0800fe74
 8003108:	20000230 	.word	0x20000230
 800310c:	0800fe84 	.word	0x0800fe84
 8003110:	11310523 	.word	0x11310523
 8003114:	0800fe94 	.word	0x0800fe94
 8003118:	200006b8 	.word	0x200006b8
 800311c:	20000228 	.word	0x20000228
 8003120:	0800fea4 	.word	0x0800fea4
 8003124:	0800feb0 	.word	0x0800feb0
 8003128:	0800febc 	.word	0x0800febc
 800312c:	0800fee0 	.word	0x0800fee0
 8003130:	20000890 	.word	0x20000890
 8003134:	20000006 	.word	0x20000006
 8003138:	20000894 	.word	0x20000894
 800313c:	0800fee8 	.word	0x0800fee8
 8003140:	0800fef0 	.word	0x0800fef0
 8003144:	2000058c 	.word	0x2000058c
 8003148:	0800ff00 	.word	0x0800ff00
 800314c:	20000781 	.word	0x20000781
 8003150:	0800ff04 	.word	0x0800ff04
				ili9341_FillRect(155, 100, 10, 10, cl_WHITE);
 8003154:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003158:	9300      	str	r3, [sp, #0]
 800315a:	230a      	movs	r3, #10
 800315c:	220a      	movs	r2, #10
 800315e:	2164      	movs	r1, #100	; 0x64
 8003160:	209b      	movs	r0, #155	; 0x9b
 8003162:	f002 fd61 	bl	8005c28 <ili9341_FillRect>
				HAL_Delay(500);
 8003166:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800316a:	f003 fbeb 	bl	8006944 <HAL_Delay>
				ili9341_FillRect(155, 100, 10, 10, cl_BLACK);
 800316e:	2300      	movs	r3, #0
 8003170:	9300      	str	r3, [sp, #0]
 8003172:	230a      	movs	r3, #10
 8003174:	220a      	movs	r2, #10
 8003176:	2164      	movs	r1, #100	; 0x64
 8003178:	209b      	movs	r0, #155	; 0x9b
 800317a:	f002 fd55 	bl	8005c28 <ili9341_FillRect>
				HAL_Delay(500);
 800317e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003182:	f003 fbdf 	bl	8006944 <HAL_Delay>
			for(int i = 0;i < 6; i++){
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	3301      	adds	r3, #1
 800318a:	607b      	str	r3, [r7, #4]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2b05      	cmp	r3, #5
 8003190:	dde0      	ble.n	8003154 <GrandState_Verita+0x574>
			}


			BL_UART_Finish();
 8003192:	f7fe fab9 	bl	8001708 <BL_UART_Finish>

			//HAL_Delay(3500);
			ili9341_WriteStringNoBG(70, 110, "Erased Finish", Font20, cl_YELLOW);
 8003196:	4b9e      	ldr	r3, [pc, #632]	; (8003410 <GrandState_Verita+0x830>)
 8003198:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800319c:	9201      	str	r2, [sp, #4]
 800319e:	685a      	ldr	r2, [r3, #4]
 80031a0:	9200      	str	r2, [sp, #0]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a9b      	ldr	r2, [pc, #620]	; (8003414 <GrandState_Verita+0x834>)
 80031a6:	216e      	movs	r1, #110	; 0x6e
 80031a8:	2046      	movs	r0, #70	; 0x46
 80031aa:	f002 ff33 	bl	8006014 <ili9341_WriteStringNoBG>
			HAL_Delay(500);
 80031ae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80031b2:	f003 fbc7 	bl	8006944 <HAL_Delay>

			//// -- Close Client ----
			//if(gScr.fullflag != ff_runfull){
			HAL_GPIO_WritePin(RelayClient_GPIO_Port, RelayClient_Pin, GPIO_PIN_RESET);
 80031b6:	2200      	movs	r2, #0
 80031b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80031bc:	4896      	ldr	r0, [pc, #600]	; (8003418 <GrandState_Verita+0x838>)
 80031be:	f004 faa3 	bl	8007708 <HAL_GPIO_WritePin>
			//};


			k_flag.cnt = 0;
 80031c2:	4b96      	ldr	r3, [pc, #600]	; (800341c <GrandState_Verita+0x83c>)
 80031c4:	2200      	movs	r2, #0
 80031c6:	709a      	strb	r2, [r3, #2]
			if(gScr.fullflag == ff_runfull){
 80031c8:	4b95      	ldr	r3, [pc, #596]	; (8003420 <GrandState_Verita+0x840>)
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	2b03      	cmp	r3, #3
 80031ce:	d104      	bne.n	80031da <GrandState_Verita+0x5fa>
				 GrandState = pre_bootloader;
 80031d0:	4b94      	ldr	r3, [pc, #592]	; (8003424 <GrandState_Verita+0x844>)
 80031d2:	2208      	movs	r2, #8
 80031d4:	701a      	strb	r2, [r3, #0]
			}else{
				GrandState = pre_fw_lob;
			}

			break;
 80031d6:	f001 be16 	b.w	8004e06 <GrandState_Verita+0x2226>
				GrandState = pre_fw_lob;
 80031da:	4b92      	ldr	r3, [pc, #584]	; (8003424 <GrandState_Verita+0x844>)
 80031dc:	2205      	movs	r2, #5
 80031de:	701a      	strb	r2, [r3, #0]
			break;
 80031e0:	f001 be11 	b.w	8004e06 <GrandState_Verita+0x2226>

	case pre_hw_chk:
		stboxp.choice_set = bpoxy_def;
 80031e4:	4b90      	ldr	r3, [pc, #576]	; (8003428 <GrandState_Verita+0x848>)
 80031e6:	2200      	movs	r2, #0
 80031e8:	705a      	strb	r2, [r3, #1]
		ili9341_FillRect(0, 30, 320, 210, cl_BLACK);
 80031ea:	2300      	movs	r3, #0
 80031ec:	9300      	str	r3, [sp, #0]
 80031ee:	23d2      	movs	r3, #210	; 0xd2
 80031f0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80031f4:	211e      	movs	r1, #30
 80031f6:	2000      	movs	r0, #0
 80031f8:	f002 fd16 	bl	8005c28 <ili9341_FillRect>
		ili9341_FillRect(0, 0, 320, 30, cl_ORANGE);
 80031fc:	f64f 13a0 	movw	r3, #63904	; 0xf9a0
 8003200:	9300      	str	r3, [sp, #0]
 8003202:	231e      	movs	r3, #30
 8003204:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003208:	2100      	movs	r1, #0
 800320a:	2000      	movs	r0, #0
 800320c:	f002 fd0c 	bl	8005c28 <ili9341_FillRect>

		if(gScr.fullflag == ff_runfull){
 8003210:	4b83      	ldr	r3, [pc, #524]	; (8003420 <GrandState_Verita+0x840>)
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	2b03      	cmp	r3, #3
 8003216:	d10e      	bne.n	8003236 <GrandState_Verita+0x656>
			ili9341_WriteString(250, 5, "FULL", Font20, cl_RED, cl_YELLOW);
 8003218:	4b7d      	ldr	r3, [pc, #500]	; (8003410 <GrandState_Verita+0x830>)
 800321a:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800321e:	9202      	str	r2, [sp, #8]
 8003220:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8003224:	9201      	str	r2, [sp, #4]
 8003226:	685a      	ldr	r2, [r3, #4]
 8003228:	9200      	str	r2, [sp, #0]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a7f      	ldr	r2, [pc, #508]	; (800342c <GrandState_Verita+0x84c>)
 800322e:	2105      	movs	r1, #5
 8003230:	20fa      	movs	r0, #250	; 0xfa
 8003232:	f002 fea2 	bl	8005f7a <ili9341_WriteString>
		}

		//// Auto ON relay
		HAL_GPIO_WritePin(RelayClient_GPIO_Port, RelayClient_Pin, GPIO_PIN_SET);
 8003236:	2201      	movs	r2, #1
 8003238:	f44f 7100 	mov.w	r1, #512	; 0x200
 800323c:	4876      	ldr	r0, [pc, #472]	; (8003418 <GrandState_Verita+0x838>)
 800323e:	f004 fa63 	bl	8007708 <HAL_GPIO_WritePin>

		ili9341_WriteStringNoBG(80, 5, "Hardware_Chk", Font20, cl_WHITE);
 8003242:	4b73      	ldr	r3, [pc, #460]	; (8003410 <GrandState_Verita+0x830>)
 8003244:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003248:	9201      	str	r2, [sp, #4]
 800324a:	685a      	ldr	r2, [r3, #4]
 800324c:	9200      	str	r2, [sp, #0]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a77      	ldr	r2, [pc, #476]	; (8003430 <GrandState_Verita+0x850>)
 8003252:	2105      	movs	r1, #5
 8003254:	2050      	movs	r0, #80	; 0x50
 8003256:	f002 fedd 	bl	8006014 <ili9341_WriteStringNoBG>
		ili9341_WriteStringNoBG(15, 50, "5V:", Font16, cl_WHITE);
 800325a:	4b76      	ldr	r3, [pc, #472]	; (8003434 <GrandState_Verita+0x854>)
 800325c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003260:	9201      	str	r2, [sp, #4]
 8003262:	685a      	ldr	r2, [r3, #4]
 8003264:	9200      	str	r2, [sp, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a73      	ldr	r2, [pc, #460]	; (8003438 <GrandState_Verita+0x858>)
 800326a:	2132      	movs	r1, #50	; 0x32
 800326c:	200f      	movs	r0, #15
 800326e:	f002 fed1 	bl	8006014 <ili9341_WriteStringNoBG>
		ili9341_WriteStringNoBG(15, 75, "3V3:", Font16, cl_WHITE);
 8003272:	4b70      	ldr	r3, [pc, #448]	; (8003434 <GrandState_Verita+0x854>)
 8003274:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003278:	9201      	str	r2, [sp, #4]
 800327a:	685a      	ldr	r2, [r3, #4]
 800327c:	9200      	str	r2, [sp, #0]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a6e      	ldr	r2, [pc, #440]	; (800343c <GrandState_Verita+0x85c>)
 8003282:	214b      	movs	r1, #75	; 0x4b
 8003284:	200f      	movs	r0, #15
 8003286:	f002 fec5 	bl	8006014 <ili9341_WriteStringNoBG>
		ili9341_WriteStringNoBG(15, 95, "3V3:", Font16, cl_WHITE);
 800328a:	4b6a      	ldr	r3, [pc, #424]	; (8003434 <GrandState_Verita+0x854>)
 800328c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003290:	9201      	str	r2, [sp, #4]
 8003292:	685a      	ldr	r2, [r3, #4]
 8003294:	9200      	str	r2, [sp, #0]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a68      	ldr	r2, [pc, #416]	; (800343c <GrandState_Verita+0x85c>)
 800329a:	215f      	movs	r1, #95	; 0x5f
 800329c:	200f      	movs	r0, #15
 800329e:	f002 feb9 	bl	8006014 <ili9341_WriteStringNoBG>
		ili9341_WriteStringNoBG(15, 106, "STLink", Font12, cl_WHITE);
 80032a2:	4b67      	ldr	r3, [pc, #412]	; (8003440 <GrandState_Verita+0x860>)
 80032a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80032a8:	9201      	str	r2, [sp, #4]
 80032aa:	685a      	ldr	r2, [r3, #4]
 80032ac:	9200      	str	r2, [sp, #0]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a64      	ldr	r2, [pc, #400]	; (8003444 <GrandState_Verita+0x864>)
 80032b2:	216a      	movs	r1, #106	; 0x6a
 80032b4:	200f      	movs	r0, #15
 80032b6:	f002 fead 	bl	8006014 <ili9341_WriteStringNoBG>
		ili9341_WriteStringNoBG(15, 125, "I Brd:", Font16, cl_WHITE);
 80032ba:	4b5e      	ldr	r3, [pc, #376]	; (8003434 <GrandState_Verita+0x854>)
 80032bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80032c0:	9201      	str	r2, [sp, #4]
 80032c2:	685a      	ldr	r2, [r3, #4]
 80032c4:	9200      	str	r2, [sp, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a5f      	ldr	r2, [pc, #380]	; (8003448 <GrandState_Verita+0x868>)
 80032ca:	217d      	movs	r1, #125	; 0x7d
 80032cc:	200f      	movs	r0, #15
 80032ce:	f002 fea1 	bl	8006014 <ili9341_WriteStringNoBG>
		ili9341_WriteStringNoBG(15, 150, "I MCU:", Font16, cl_WHITE);
 80032d2:	4b58      	ldr	r3, [pc, #352]	; (8003434 <GrandState_Verita+0x854>)
 80032d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80032d8:	9201      	str	r2, [sp, #4]
 80032da:	685a      	ldr	r2, [r3, #4]
 80032dc:	9200      	str	r2, [sp, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a5a      	ldr	r2, [pc, #360]	; (800344c <GrandState_Verita+0x86c>)
 80032e2:	2196      	movs	r1, #150	; 0x96
 80032e4:	200f      	movs	r0, #15
 80032e6:	f002 fe95 	bl	8006014 <ili9341_WriteStringNoBG>

		ili9341_WriteStringNoBG(165, 54, "mV", Font12, cl_WHITE);
 80032ea:	4b55      	ldr	r3, [pc, #340]	; (8003440 <GrandState_Verita+0x860>)
 80032ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80032f0:	9201      	str	r2, [sp, #4]
 80032f2:	685a      	ldr	r2, [r3, #4]
 80032f4:	9200      	str	r2, [sp, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a55      	ldr	r2, [pc, #340]	; (8003450 <GrandState_Verita+0x870>)
 80032fa:	2136      	movs	r1, #54	; 0x36
 80032fc:	20a5      	movs	r0, #165	; 0xa5
 80032fe:	f002 fe89 	bl	8006014 <ili9341_WriteStringNoBG>
		ili9341_WriteStringNoBG(165, 79, "mV", Font12, cl_WHITE);
 8003302:	4b4f      	ldr	r3, [pc, #316]	; (8003440 <GrandState_Verita+0x860>)
 8003304:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003308:	9201      	str	r2, [sp, #4]
 800330a:	685a      	ldr	r2, [r3, #4]
 800330c:	9200      	str	r2, [sp, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a4f      	ldr	r2, [pc, #316]	; (8003450 <GrandState_Verita+0x870>)
 8003312:	214f      	movs	r1, #79	; 0x4f
 8003314:	20a5      	movs	r0, #165	; 0xa5
 8003316:	f002 fe7d 	bl	8006014 <ili9341_WriteStringNoBG>
		ili9341_WriteStringNoBG(165, 104, "mV", Font12, cl_WHITE);
 800331a:	4b49      	ldr	r3, [pc, #292]	; (8003440 <GrandState_Verita+0x860>)
 800331c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003320:	9201      	str	r2, [sp, #4]
 8003322:	685a      	ldr	r2, [r3, #4]
 8003324:	9200      	str	r2, [sp, #0]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a49      	ldr	r2, [pc, #292]	; (8003450 <GrandState_Verita+0x870>)
 800332a:	2168      	movs	r1, #104	; 0x68
 800332c:	20a5      	movs	r0, #165	; 0xa5
 800332e:	f002 fe71 	bl	8006014 <ili9341_WriteStringNoBG>
		ili9341_WriteStringNoBG(165, 129, "mA", Font12, cl_WHITE);
 8003332:	4b43      	ldr	r3, [pc, #268]	; (8003440 <GrandState_Verita+0x860>)
 8003334:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003338:	9201      	str	r2, [sp, #4]
 800333a:	685a      	ldr	r2, [r3, #4]
 800333c:	9200      	str	r2, [sp, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a44      	ldr	r2, [pc, #272]	; (8003454 <GrandState_Verita+0x874>)
 8003342:	2181      	movs	r1, #129	; 0x81
 8003344:	20a5      	movs	r0, #165	; 0xa5
 8003346:	f002 fe65 	bl	8006014 <ili9341_WriteStringNoBG>
		ili9341_WriteStringNoBG(165, 154, "mA", Font12, cl_WHITE);
 800334a:	4b3d      	ldr	r3, [pc, #244]	; (8003440 <GrandState_Verita+0x860>)
 800334c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003350:	9201      	str	r2, [sp, #4]
 8003352:	685a      	ldr	r2, [r3, #4]
 8003354:	9200      	str	r2, [sp, #0]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a3e      	ldr	r2, [pc, #248]	; (8003454 <GrandState_Verita+0x874>)
 800335a:	219a      	movs	r1, #154	; 0x9a
 800335c:	20a5      	movs	r0, #165	; 0xa5
 800335e:	f002 fe59 	bl	8006014 <ili9341_WriteStringNoBG>


		gScr.timelog = HAL_GetTick() + 3500;
 8003362:	f003 fae3 	bl	800692c <HAL_GetTick>
 8003366:	4603      	mov	r3, r0
 8003368:	f603 53ac 	addw	r3, r3, #3500	; 0xdac
 800336c:	4a2c      	ldr	r2, [pc, #176]	; (8003420 <GrandState_Verita+0x840>)
 800336e:	6053      	str	r3, [r2, #4]

		k_flag.cnt = 0; //// prevent over state jump
 8003370:	4b2a      	ldr	r3, [pc, #168]	; (800341c <GrandState_Verita+0x83c>)
 8003372:	2200      	movs	r2, #0
 8003374:	709a      	strb	r2, [r3, #2]
		GrandState = hw_chk;
 8003376:	4b2b      	ldr	r3, [pc, #172]	; (8003424 <GrandState_Verita+0x844>)
 8003378:	2204      	movs	r2, #4
 800337a:	701a      	strb	r2, [r3, #0]
		break; //pre_hw_chk
 800337c:	f001 bd43 	b.w	8004e06 <GrandState_Verita+0x2226>

	case hw_chk:
		stboxp.choice_set = bpoxy_def;
 8003380:	4b29      	ldr	r3, [pc, #164]	; (8003428 <GrandState_Verita+0x848>)
 8003382:	2200      	movs	r2, #0
 8003384:	705a      	strb	r2, [r3, #1]

		//// 5V
		sprintf(TextDispBuffer,"%4d", (uint16_t)(mcp_read.cv[1]*1000)); // inatb.inatb.Bus_V
 8003386:	4b34      	ldr	r3, [pc, #208]	; (8003458 <GrandState_Verita+0x878>)
 8003388:	edd3 7a05 	vldr	s15, [r3, #20]
 800338c:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800345c <GrandState_Verita+0x87c>
 8003390:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003394:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003398:	ee17 3a90 	vmov	r3, s15
 800339c:	b29b      	uxth	r3, r3
 800339e:	461a      	mov	r2, r3
 80033a0:	492f      	ldr	r1, [pc, #188]	; (8003460 <GrandState_Verita+0x880>)
 80033a2:	4830      	ldr	r0, [pc, #192]	; (8003464 <GrandState_Verita+0x884>)
 80033a4:	f00a f9d2 	bl	800d74c <siprintf>
		if(mcp_read.cv[1] <= 4.300){
 80033a8:	4b2b      	ldr	r3, [pc, #172]	; (8003458 <GrandState_Verita+0x878>)
 80033aa:	695b      	ldr	r3, [r3, #20]
 80033ac:	4618      	mov	r0, r3
 80033ae:	f7fd f8d3 	bl	8000558 <__aeabi_f2d>
 80033b2:	a315      	add	r3, pc, #84	; (adr r3, 8003408 <GrandState_Verita+0x828>)
 80033b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033b8:	f7fd fba2 	bl	8000b00 <__aeabi_dcmple>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d056      	beq.n	8003470 <GrandState_Verita+0x890>
			ili9341_WriteString(100, 50, TextDispBuffer, Font20, cl_RED, cl_BLACK);
 80033c2:	4b13      	ldr	r3, [pc, #76]	; (8003410 <GrandState_Verita+0x830>)
 80033c4:	2200      	movs	r2, #0
 80033c6:	9202      	str	r2, [sp, #8]
 80033c8:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80033cc:	9201      	str	r2, [sp, #4]
 80033ce:	685a      	ldr	r2, [r3, #4]
 80033d0:	9200      	str	r2, [sp, #0]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a23      	ldr	r2, [pc, #140]	; (8003464 <GrandState_Verita+0x884>)
 80033d6:	2132      	movs	r1, #50	; 0x32
 80033d8:	2064      	movs	r0, #100	; 0x64
 80033da:	f002 fdce 	bl	8005f7a <ili9341_WriteString>
			ili9341_WriteString(220, 50, "FAIL", Font20, cl_RED, cl_BLACK);
 80033de:	4b0c      	ldr	r3, [pc, #48]	; (8003410 <GrandState_Verita+0x830>)
 80033e0:	2200      	movs	r2, #0
 80033e2:	9202      	str	r2, [sp, #8]
 80033e4:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80033e8:	9201      	str	r2, [sp, #4]
 80033ea:	685a      	ldr	r2, [r3, #4]
 80033ec:	9200      	str	r2, [sp, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a1d      	ldr	r2, [pc, #116]	; (8003468 <GrandState_Verita+0x888>)
 80033f2:	2132      	movs	r1, #50	; 0x32
 80033f4:	20dc      	movs	r0, #220	; 0xdc
 80033f6:	f002 fdc0 	bl	8005f7a <ili9341_WriteString>
			hwscor.p5V = 0;
 80033fa:	4b1c      	ldr	r3, [pc, #112]	; (800346c <GrandState_Verita+0x88c>)
 80033fc:	2200      	movs	r2, #0
 80033fe:	701a      	strb	r2, [r3, #0]
 8003400:	e055      	b.n	80034ae <GrandState_Verita+0x8ce>
 8003402:	bf00      	nop
 8003404:	f3af 8000 	nop.w
 8003408:	33333333 	.word	0x33333333
 800340c:	40113333 	.word	0x40113333
 8003410:	20000238 	.word	0x20000238
 8003414:	0800ff10 	.word	0x0800ff10
 8003418:	40020800 	.word	0x40020800
 800341c:	20000890 	.word	0x20000890
 8003420:	20000894 	.word	0x20000894
 8003424:	20000006 	.word	0x20000006
 8003428:	200008ac 	.word	0x200008ac
 800342c:	0800fee8 	.word	0x0800fee8
 8003430:	0800ff20 	.word	0x0800ff20
 8003434:	20000230 	.word	0x20000230
 8003438:	0800ff30 	.word	0x0800ff30
 800343c:	0800ff34 	.word	0x0800ff34
 8003440:	20000228 	.word	0x20000228
 8003444:	0800ff3c 	.word	0x0800ff3c
 8003448:	0800ff44 	.word	0x0800ff44
 800344c:	0800ff4c 	.word	0x0800ff4c
 8003450:	0800ff54 	.word	0x0800ff54
 8003454:	0800ff58 	.word	0x0800ff58
 8003458:	20000828 	.word	0x20000828
 800345c:	447a0000 	.word	0x447a0000
 8003460:	0800ff5c 	.word	0x0800ff5c
 8003464:	200006b8 	.word	0x200006b8
 8003468:	0800ff60 	.word	0x0800ff60
 800346c:	200008a0 	.word	0x200008a0
		}else{
			ili9341_WriteString(100, 50, TextDispBuffer, Font20, cl_WHITE, cl_BLACK);
 8003470:	4b8d      	ldr	r3, [pc, #564]	; (80036a8 <GrandState_Verita+0xac8>)
 8003472:	2200      	movs	r2, #0
 8003474:	9202      	str	r2, [sp, #8]
 8003476:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800347a:	9201      	str	r2, [sp, #4]
 800347c:	685a      	ldr	r2, [r3, #4]
 800347e:	9200      	str	r2, [sp, #0]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a8a      	ldr	r2, [pc, #552]	; (80036ac <GrandState_Verita+0xacc>)
 8003484:	2132      	movs	r1, #50	; 0x32
 8003486:	2064      	movs	r0, #100	; 0x64
 8003488:	f002 fd77 	bl	8005f7a <ili9341_WriteString>
			ili9341_WriteString(220, 50, "PASS", Font20, cl_GREEN, cl_BLACK);
 800348c:	4b86      	ldr	r3, [pc, #536]	; (80036a8 <GrandState_Verita+0xac8>)
 800348e:	2200      	movs	r2, #0
 8003490:	9202      	str	r2, [sp, #8]
 8003492:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8003496:	9201      	str	r2, [sp, #4]
 8003498:	685a      	ldr	r2, [r3, #4]
 800349a:	9200      	str	r2, [sp, #0]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a84      	ldr	r2, [pc, #528]	; (80036b0 <GrandState_Verita+0xad0>)
 80034a0:	2132      	movs	r1, #50	; 0x32
 80034a2:	20dc      	movs	r0, #220	; 0xdc
 80034a4:	f002 fd69 	bl	8005f7a <ili9341_WriteString>
			hwscor.p5V = 1;
 80034a8:	4b82      	ldr	r3, [pc, #520]	; (80036b4 <GrandState_Verita+0xad4>)
 80034aa:	2201      	movs	r2, #1
 80034ac:	701a      	strb	r2, [r3, #0]
		}
		//// 3V3
		sprintf(TextDispBuffer,"%4d", inata.Bus_V);
 80034ae:	4b82      	ldr	r3, [pc, #520]	; (80036b8 <GrandState_Verita+0xad8>)
 80034b0:	8a1b      	ldrh	r3, [r3, #16]
 80034b2:	461a      	mov	r2, r3
 80034b4:	4981      	ldr	r1, [pc, #516]	; (80036bc <GrandState_Verita+0xadc>)
 80034b6:	487d      	ldr	r0, [pc, #500]	; (80036ac <GrandState_Verita+0xacc>)
 80034b8:	f00a f948 	bl	800d74c <siprintf>
		if(inata.Bus_V <= 2900){
 80034bc:	4b7e      	ldr	r3, [pc, #504]	; (80036b8 <GrandState_Verita+0xad8>)
 80034be:	8a1b      	ldrh	r3, [r3, #16]
 80034c0:	f640 3254 	movw	r2, #2900	; 0xb54
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d81f      	bhi.n	8003508 <GrandState_Verita+0x928>
			ili9341_WriteString(100, 75, TextDispBuffer, Font20, cl_RED, cl_BLACK);
 80034c8:	4b77      	ldr	r3, [pc, #476]	; (80036a8 <GrandState_Verita+0xac8>)
 80034ca:	2200      	movs	r2, #0
 80034cc:	9202      	str	r2, [sp, #8]
 80034ce:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80034d2:	9201      	str	r2, [sp, #4]
 80034d4:	685a      	ldr	r2, [r3, #4]
 80034d6:	9200      	str	r2, [sp, #0]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a74      	ldr	r2, [pc, #464]	; (80036ac <GrandState_Verita+0xacc>)
 80034dc:	214b      	movs	r1, #75	; 0x4b
 80034de:	2064      	movs	r0, #100	; 0x64
 80034e0:	f002 fd4b 	bl	8005f7a <ili9341_WriteString>
			ili9341_WriteString(220, 75, "FAIL", Font20, cl_RED, cl_BLACK);
 80034e4:	4b70      	ldr	r3, [pc, #448]	; (80036a8 <GrandState_Verita+0xac8>)
 80034e6:	2200      	movs	r2, #0
 80034e8:	9202      	str	r2, [sp, #8]
 80034ea:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80034ee:	9201      	str	r2, [sp, #4]
 80034f0:	685a      	ldr	r2, [r3, #4]
 80034f2:	9200      	str	r2, [sp, #0]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a72      	ldr	r2, [pc, #456]	; (80036c0 <GrandState_Verita+0xae0>)
 80034f8:	214b      	movs	r1, #75	; 0x4b
 80034fa:	20dc      	movs	r0, #220	; 0xdc
 80034fc:	f002 fd3d 	bl	8005f7a <ili9341_WriteString>
			hwscor.p3V3 = 0;
 8003500:	4b6c      	ldr	r3, [pc, #432]	; (80036b4 <GrandState_Verita+0xad4>)
 8003502:	2200      	movs	r2, #0
 8003504:	705a      	strb	r2, [r3, #1]
 8003506:	e01e      	b.n	8003546 <GrandState_Verita+0x966>
		}else{
			ili9341_WriteString(100, 75, TextDispBuffer, Font20, cl_WHITE, cl_BLACK);
 8003508:	4b67      	ldr	r3, [pc, #412]	; (80036a8 <GrandState_Verita+0xac8>)
 800350a:	2200      	movs	r2, #0
 800350c:	9202      	str	r2, [sp, #8]
 800350e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003512:	9201      	str	r2, [sp, #4]
 8003514:	685a      	ldr	r2, [r3, #4]
 8003516:	9200      	str	r2, [sp, #0]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a64      	ldr	r2, [pc, #400]	; (80036ac <GrandState_Verita+0xacc>)
 800351c:	214b      	movs	r1, #75	; 0x4b
 800351e:	2064      	movs	r0, #100	; 0x64
 8003520:	f002 fd2b 	bl	8005f7a <ili9341_WriteString>
			ili9341_WriteString(220, 75, "PASS", Font20, cl_GREEN, cl_BLACK);
 8003524:	4b60      	ldr	r3, [pc, #384]	; (80036a8 <GrandState_Verita+0xac8>)
 8003526:	2200      	movs	r2, #0
 8003528:	9202      	str	r2, [sp, #8]
 800352a:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800352e:	9201      	str	r2, [sp, #4]
 8003530:	685a      	ldr	r2, [r3, #4]
 8003532:	9200      	str	r2, [sp, #0]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a5e      	ldr	r2, [pc, #376]	; (80036b0 <GrandState_Verita+0xad0>)
 8003538:	214b      	movs	r1, #75	; 0x4b
 800353a:	20dc      	movs	r0, #220	; 0xdc
 800353c:	f002 fd1d 	bl	8005f7a <ili9341_WriteString>
			hwscor.p3V3 = 1;
 8003540:	4b5c      	ldr	r3, [pc, #368]	; (80036b4 <GrandState_Verita+0xad4>)
 8003542:	2201      	movs	r2, #1
 8003544:	705a      	strb	r2, [r3, #1]
		}
		//// 3V3 STLink
		sprintf(TextDispBuffer,"%4d", (uint16_t)(mcp_read.cv[0]*1000));
 8003546:	4b5f      	ldr	r3, [pc, #380]	; (80036c4 <GrandState_Verita+0xae4>)
 8003548:	edd3 7a04 	vldr	s15, [r3, #16]
 800354c:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 80036c8 <GrandState_Verita+0xae8>
 8003550:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003554:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003558:	ee17 3a90 	vmov	r3, s15
 800355c:	b29b      	uxth	r3, r3
 800355e:	461a      	mov	r2, r3
 8003560:	4956      	ldr	r1, [pc, #344]	; (80036bc <GrandState_Verita+0xadc>)
 8003562:	4852      	ldr	r0, [pc, #328]	; (80036ac <GrandState_Verita+0xacc>)
 8003564:	f00a f8f2 	bl	800d74c <siprintf>
		if(mcp_read.cv[0] <= 2.90){
 8003568:	4b56      	ldr	r3, [pc, #344]	; (80036c4 <GrandState_Verita+0xae4>)
 800356a:	691b      	ldr	r3, [r3, #16]
 800356c:	4618      	mov	r0, r3
 800356e:	f7fc fff3 	bl	8000558 <__aeabi_f2d>
 8003572:	a34b      	add	r3, pc, #300	; (adr r3, 80036a0 <GrandState_Verita+0xac0>)
 8003574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003578:	f7fd fac2 	bl	8000b00 <__aeabi_dcmple>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d01f      	beq.n	80035c2 <GrandState_Verita+0x9e2>
			ili9341_WriteString(100, 100, TextDispBuffer, Font20, cl_RED, cl_BLACK);
 8003582:	4b49      	ldr	r3, [pc, #292]	; (80036a8 <GrandState_Verita+0xac8>)
 8003584:	2200      	movs	r2, #0
 8003586:	9202      	str	r2, [sp, #8]
 8003588:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800358c:	9201      	str	r2, [sp, #4]
 800358e:	685a      	ldr	r2, [r3, #4]
 8003590:	9200      	str	r2, [sp, #0]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a45      	ldr	r2, [pc, #276]	; (80036ac <GrandState_Verita+0xacc>)
 8003596:	2164      	movs	r1, #100	; 0x64
 8003598:	2064      	movs	r0, #100	; 0x64
 800359a:	f002 fcee 	bl	8005f7a <ili9341_WriteString>
			ili9341_WriteString(220, 100, "FAIL", Font20, cl_RED, cl_BLACK);
 800359e:	4b42      	ldr	r3, [pc, #264]	; (80036a8 <GrandState_Verita+0xac8>)
 80035a0:	2200      	movs	r2, #0
 80035a2:	9202      	str	r2, [sp, #8]
 80035a4:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80035a8:	9201      	str	r2, [sp, #4]
 80035aa:	685a      	ldr	r2, [r3, #4]
 80035ac:	9200      	str	r2, [sp, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a43      	ldr	r2, [pc, #268]	; (80036c0 <GrandState_Verita+0xae0>)
 80035b2:	2164      	movs	r1, #100	; 0x64
 80035b4:	20dc      	movs	r0, #220	; 0xdc
 80035b6:	f002 fce0 	bl	8005f7a <ili9341_WriteString>
			hwscor.p3VSTL = 0;
 80035ba:	4b3e      	ldr	r3, [pc, #248]	; (80036b4 <GrandState_Verita+0xad4>)
 80035bc:	2200      	movs	r2, #0
 80035be:	709a      	strb	r2, [r3, #2]
 80035c0:	e01e      	b.n	8003600 <GrandState_Verita+0xa20>
		}else{
			ili9341_WriteString(100, 100, TextDispBuffer, Font20, cl_WHITE, cl_BLACK);
 80035c2:	4b39      	ldr	r3, [pc, #228]	; (80036a8 <GrandState_Verita+0xac8>)
 80035c4:	2200      	movs	r2, #0
 80035c6:	9202      	str	r2, [sp, #8]
 80035c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80035cc:	9201      	str	r2, [sp, #4]
 80035ce:	685a      	ldr	r2, [r3, #4]
 80035d0:	9200      	str	r2, [sp, #0]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a35      	ldr	r2, [pc, #212]	; (80036ac <GrandState_Verita+0xacc>)
 80035d6:	2164      	movs	r1, #100	; 0x64
 80035d8:	2064      	movs	r0, #100	; 0x64
 80035da:	f002 fcce 	bl	8005f7a <ili9341_WriteString>
			ili9341_WriteString(220, 100, "PASS", Font20, cl_GREEN, cl_BLACK);
 80035de:	4b32      	ldr	r3, [pc, #200]	; (80036a8 <GrandState_Verita+0xac8>)
 80035e0:	2200      	movs	r2, #0
 80035e2:	9202      	str	r2, [sp, #8]
 80035e4:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80035e8:	9201      	str	r2, [sp, #4]
 80035ea:	685a      	ldr	r2, [r3, #4]
 80035ec:	9200      	str	r2, [sp, #0]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a2f      	ldr	r2, [pc, #188]	; (80036b0 <GrandState_Verita+0xad0>)
 80035f2:	2164      	movs	r1, #100	; 0x64
 80035f4:	20dc      	movs	r0, #220	; 0xdc
 80035f6:	f002 fcc0 	bl	8005f7a <ili9341_WriteString>
			hwscor.p3VSTL = 1;
 80035fa:	4b2e      	ldr	r3, [pc, #184]	; (80036b4 <GrandState_Verita+0xad4>)
 80035fc:	2201      	movs	r2, #1
 80035fe:	709a      	strb	r2, [r3, #2]
		}
		 //// I Brd
		sprintf(TextDispBuffer,"%4d", inatb.CURRENT);
 8003600:	4b32      	ldr	r3, [pc, #200]	; (80036cc <GrandState_Verita+0xaec>)
 8003602:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003606:	461a      	mov	r2, r3
 8003608:	492c      	ldr	r1, [pc, #176]	; (80036bc <GrandState_Verita+0xadc>)
 800360a:	4828      	ldr	r0, [pc, #160]	; (80036ac <GrandState_Verita+0xacc>)
 800360c:	f00a f89e 	bl	800d74c <siprintf>
		if(inatb.CURRENT >= Current_treash_mA){
 8003610:	4b2e      	ldr	r3, [pc, #184]	; (80036cc <GrandState_Verita+0xaec>)
 8003612:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003616:	2bf9      	cmp	r3, #249	; 0xf9
 8003618:	dd1f      	ble.n	800365a <GrandState_Verita+0xa7a>
			ili9341_WriteString(100, 125, TextDispBuffer, Font20, cl_RED, cl_BLACK);
 800361a:	4b23      	ldr	r3, [pc, #140]	; (80036a8 <GrandState_Verita+0xac8>)
 800361c:	2200      	movs	r2, #0
 800361e:	9202      	str	r2, [sp, #8]
 8003620:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8003624:	9201      	str	r2, [sp, #4]
 8003626:	685a      	ldr	r2, [r3, #4]
 8003628:	9200      	str	r2, [sp, #0]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a1f      	ldr	r2, [pc, #124]	; (80036ac <GrandState_Verita+0xacc>)
 800362e:	217d      	movs	r1, #125	; 0x7d
 8003630:	2064      	movs	r0, #100	; 0x64
 8003632:	f002 fca2 	bl	8005f7a <ili9341_WriteString>
			ili9341_WriteString(220, 125, "FAIL", Font20, cl_RED, cl_BLACK);
 8003636:	4b1c      	ldr	r3, [pc, #112]	; (80036a8 <GrandState_Verita+0xac8>)
 8003638:	2200      	movs	r2, #0
 800363a:	9202      	str	r2, [sp, #8]
 800363c:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8003640:	9201      	str	r2, [sp, #4]
 8003642:	685a      	ldr	r2, [r3, #4]
 8003644:	9200      	str	r2, [sp, #0]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a1d      	ldr	r2, [pc, #116]	; (80036c0 <GrandState_Verita+0xae0>)
 800364a:	217d      	movs	r1, #125	; 0x7d
 800364c:	20dc      	movs	r0, #220	; 0xdc
 800364e:	f002 fc94 	bl	8005f7a <ili9341_WriteString>
			hwscor.pIbrd = 0;
 8003652:	4b18      	ldr	r3, [pc, #96]	; (80036b4 <GrandState_Verita+0xad4>)
 8003654:	2200      	movs	r2, #0
 8003656:	70da      	strb	r2, [r3, #3]
 8003658:	e05b      	b.n	8003712 <GrandState_Verita+0xb32>
		}else if (inatb.CURRENT <= 1) { // 8
 800365a:	4b1c      	ldr	r3, [pc, #112]	; (80036cc <GrandState_Verita+0xaec>)
 800365c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003660:	2b01      	cmp	r3, #1
 8003662:	dc37      	bgt.n	80036d4 <GrandState_Verita+0xaf4>
			ili9341_WriteString(100, 125, TextDispBuffer, Font20, cl_WHITE, cl_BLACK);
 8003664:	4b10      	ldr	r3, [pc, #64]	; (80036a8 <GrandState_Verita+0xac8>)
 8003666:	2200      	movs	r2, #0
 8003668:	9202      	str	r2, [sp, #8]
 800366a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800366e:	9201      	str	r2, [sp, #4]
 8003670:	685a      	ldr	r2, [r3, #4]
 8003672:	9200      	str	r2, [sp, #0]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a0d      	ldr	r2, [pc, #52]	; (80036ac <GrandState_Verita+0xacc>)
 8003678:	217d      	movs	r1, #125	; 0x7d
 800367a:	2064      	movs	r0, #100	; 0x64
 800367c:	f002 fc7d 	bl	8005f7a <ili9341_WriteString>
			ili9341_WriteString(220, 125, "N/A", Font20, cl_ORANGE, cl_BLACK);
 8003680:	4b09      	ldr	r3, [pc, #36]	; (80036a8 <GrandState_Verita+0xac8>)
 8003682:	2200      	movs	r2, #0
 8003684:	9202      	str	r2, [sp, #8]
 8003686:	f64f 12a0 	movw	r2, #63904	; 0xf9a0
 800368a:	9201      	str	r2, [sp, #4]
 800368c:	685a      	ldr	r2, [r3, #4]
 800368e:	9200      	str	r2, [sp, #0]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a0f      	ldr	r2, [pc, #60]	; (80036d0 <GrandState_Verita+0xaf0>)
 8003694:	217d      	movs	r1, #125	; 0x7d
 8003696:	20dc      	movs	r0, #220	; 0xdc
 8003698:	f002 fc6f 	bl	8005f7a <ili9341_WriteString>
 800369c:	e039      	b.n	8003712 <GrandState_Verita+0xb32>
 800369e:	bf00      	nop
 80036a0:	33333333 	.word	0x33333333
 80036a4:	40073333 	.word	0x40073333
 80036a8:	20000238 	.word	0x20000238
 80036ac:	200006b8 	.word	0x200006b8
 80036b0:	0800ff68 	.word	0x0800ff68
 80036b4:	200008a0 	.word	0x200008a0
 80036b8:	200007f8 	.word	0x200007f8
 80036bc:	0800ff5c 	.word	0x0800ff5c
 80036c0:	0800ff60 	.word	0x0800ff60
 80036c4:	20000828 	.word	0x20000828
 80036c8:	447a0000 	.word	0x447a0000
 80036cc:	20000810 	.word	0x20000810
 80036d0:	0800ff70 	.word	0x0800ff70
		}
		else{
			ili9341_WriteString(100, 125, TextDispBuffer, Font20, cl_WHITE, cl_BLACK);
 80036d4:	4b81      	ldr	r3, [pc, #516]	; (80038dc <GrandState_Verita+0xcfc>)
 80036d6:	2200      	movs	r2, #0
 80036d8:	9202      	str	r2, [sp, #8]
 80036da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80036de:	9201      	str	r2, [sp, #4]
 80036e0:	685a      	ldr	r2, [r3, #4]
 80036e2:	9200      	str	r2, [sp, #0]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a7e      	ldr	r2, [pc, #504]	; (80038e0 <GrandState_Verita+0xd00>)
 80036e8:	217d      	movs	r1, #125	; 0x7d
 80036ea:	2064      	movs	r0, #100	; 0x64
 80036ec:	f002 fc45 	bl	8005f7a <ili9341_WriteString>
			ili9341_WriteString(220, 125, "PASS", Font20, cl_GREEN, cl_BLACK);
 80036f0:	4b7a      	ldr	r3, [pc, #488]	; (80038dc <GrandState_Verita+0xcfc>)
 80036f2:	2200      	movs	r2, #0
 80036f4:	9202      	str	r2, [sp, #8]
 80036f6:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80036fa:	9201      	str	r2, [sp, #4]
 80036fc:	685a      	ldr	r2, [r3, #4]
 80036fe:	9200      	str	r2, [sp, #0]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a78      	ldr	r2, [pc, #480]	; (80038e4 <GrandState_Verita+0xd04>)
 8003704:	217d      	movs	r1, #125	; 0x7d
 8003706:	20dc      	movs	r0, #220	; 0xdc
 8003708:	f002 fc37 	bl	8005f7a <ili9341_WriteString>
			hwscor.pIbrd = 1;
 800370c:	4b76      	ldr	r3, [pc, #472]	; (80038e8 <GrandState_Verita+0xd08>)
 800370e:	2201      	movs	r2, #1
 8003710:	70da      	strb	r2, [r3, #3]
		}

		//// I MCU
		sprintf(TextDispBuffer,"%4d", inata.CURRENT);
 8003712:	4b76      	ldr	r3, [pc, #472]	; (80038ec <GrandState_Verita+0xd0c>)
 8003714:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003718:	461a      	mov	r2, r3
 800371a:	4975      	ldr	r1, [pc, #468]	; (80038f0 <GrandState_Verita+0xd10>)
 800371c:	4870      	ldr	r0, [pc, #448]	; (80038e0 <GrandState_Verita+0xd00>)
 800371e:	f00a f815 	bl	800d74c <siprintf>
		if(inata.CURRENT >= Current_treash_mA){
 8003722:	4b72      	ldr	r3, [pc, #456]	; (80038ec <GrandState_Verita+0xd0c>)
 8003724:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003728:	2bf9      	cmp	r3, #249	; 0xf9
 800372a:	dd1f      	ble.n	800376c <GrandState_Verita+0xb8c>
			ili9341_WriteString(100, 150, TextDispBuffer, Font20, cl_RED, cl_BLACK);
 800372c:	4b6b      	ldr	r3, [pc, #428]	; (80038dc <GrandState_Verita+0xcfc>)
 800372e:	2200      	movs	r2, #0
 8003730:	9202      	str	r2, [sp, #8]
 8003732:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8003736:	9201      	str	r2, [sp, #4]
 8003738:	685a      	ldr	r2, [r3, #4]
 800373a:	9200      	str	r2, [sp, #0]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a68      	ldr	r2, [pc, #416]	; (80038e0 <GrandState_Verita+0xd00>)
 8003740:	2196      	movs	r1, #150	; 0x96
 8003742:	2064      	movs	r0, #100	; 0x64
 8003744:	f002 fc19 	bl	8005f7a <ili9341_WriteString>
			ili9341_WriteString(220, 150, "FAIL", Font20, cl_RED, cl_BLACK);
 8003748:	4b64      	ldr	r3, [pc, #400]	; (80038dc <GrandState_Verita+0xcfc>)
 800374a:	2200      	movs	r2, #0
 800374c:	9202      	str	r2, [sp, #8]
 800374e:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8003752:	9201      	str	r2, [sp, #4]
 8003754:	685a      	ldr	r2, [r3, #4]
 8003756:	9200      	str	r2, [sp, #0]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a66      	ldr	r2, [pc, #408]	; (80038f4 <GrandState_Verita+0xd14>)
 800375c:	2196      	movs	r1, #150	; 0x96
 800375e:	20dc      	movs	r0, #220	; 0xdc
 8003760:	f002 fc0b 	bl	8005f7a <ili9341_WriteString>
			hwscor.pImcu = 0;
 8003764:	4b60      	ldr	r3, [pc, #384]	; (80038e8 <GrandState_Verita+0xd08>)
 8003766:	2200      	movs	r2, #0
 8003768:	711a      	strb	r2, [r3, #4]
 800376a:	e06a      	b.n	8003842 <GrandState_Verita+0xc62>
		}else if (inata.CURRENT <= 3) {
 800376c:	4b5f      	ldr	r3, [pc, #380]	; (80038ec <GrandState_Verita+0xd0c>)
 800376e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003772:	2b03      	cmp	r3, #3
 8003774:	dc3d      	bgt.n	80037f2 <GrandState_Verita+0xc12>
			ili9341_WriteString(100, 150, TextDispBuffer, Font20, cl_WHITE, cl_BLACK);
 8003776:	4b59      	ldr	r3, [pc, #356]	; (80038dc <GrandState_Verita+0xcfc>)
 8003778:	2200      	movs	r2, #0
 800377a:	9202      	str	r2, [sp, #8]
 800377c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003780:	9201      	str	r2, [sp, #4]
 8003782:	685a      	ldr	r2, [r3, #4]
 8003784:	9200      	str	r2, [sp, #0]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a55      	ldr	r2, [pc, #340]	; (80038e0 <GrandState_Verita+0xd00>)
 800378a:	2196      	movs	r1, #150	; 0x96
 800378c:	2064      	movs	r0, #100	; 0x64
 800378e:	f002 fbf4 	bl	8005f7a <ili9341_WriteString>
			ili9341_WriteString(220, 150, "N/A", Font20, cl_ORANGE, cl_BLACK);
 8003792:	4b52      	ldr	r3, [pc, #328]	; (80038dc <GrandState_Verita+0xcfc>)
 8003794:	2200      	movs	r2, #0
 8003796:	9202      	str	r2, [sp, #8]
 8003798:	f64f 12a0 	movw	r2, #63904	; 0xf9a0
 800379c:	9201      	str	r2, [sp, #4]
 800379e:	685a      	ldr	r2, [r3, #4]
 80037a0:	9200      	str	r2, [sp, #0]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a54      	ldr	r2, [pc, #336]	; (80038f8 <GrandState_Verita+0xd18>)
 80037a6:	2196      	movs	r1, #150	; 0x96
 80037a8:	20dc      	movs	r0, #220	; 0xdc
 80037aa:	f002 fbe6 	bl	8005f7a <ili9341_WriteString>
			ili9341_WriteString(275, 145, "Unplug", Font12, cl_GREENYELLOW, cl_BLACK);
 80037ae:	4b53      	ldr	r3, [pc, #332]	; (80038fc <GrandState_Verita+0xd1c>)
 80037b0:	2200      	movs	r2, #0
 80037b2:	9202      	str	r2, [sp, #8]
 80037b4:	f64a 72e5 	movw	r2, #45029	; 0xafe5
 80037b8:	9201      	str	r2, [sp, #4]
 80037ba:	685a      	ldr	r2, [r3, #4]
 80037bc:	9200      	str	r2, [sp, #0]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a4f      	ldr	r2, [pc, #316]	; (8003900 <GrandState_Verita+0xd20>)
 80037c2:	2191      	movs	r1, #145	; 0x91
 80037c4:	f240 1013 	movw	r0, #275	; 0x113
 80037c8:	f002 fbd7 	bl	8005f7a <ili9341_WriteString>
			ili9341_WriteString(275, 157, "JP6?", Font12, cl_GREENYELLOW, cl_BLACK);
 80037cc:	4b4b      	ldr	r3, [pc, #300]	; (80038fc <GrandState_Verita+0xd1c>)
 80037ce:	2200      	movs	r2, #0
 80037d0:	9202      	str	r2, [sp, #8]
 80037d2:	f64a 72e5 	movw	r2, #45029	; 0xafe5
 80037d6:	9201      	str	r2, [sp, #4]
 80037d8:	685a      	ldr	r2, [r3, #4]
 80037da:	9200      	str	r2, [sp, #0]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a49      	ldr	r2, [pc, #292]	; (8003904 <GrandState_Verita+0xd24>)
 80037e0:	219d      	movs	r1, #157	; 0x9d
 80037e2:	f240 1013 	movw	r0, #275	; 0x113
 80037e6:	f002 fbc8 	bl	8005f7a <ili9341_WriteString>
			hwscor.pImcu = 0;
 80037ea:	4b3f      	ldr	r3, [pc, #252]	; (80038e8 <GrandState_Verita+0xd08>)
 80037ec:	2200      	movs	r2, #0
 80037ee:	711a      	strb	r2, [r3, #4]
 80037f0:	e027      	b.n	8003842 <GrandState_Verita+0xc62>
		}else{
			ili9341_WriteString(100, 150, TextDispBuffer, Font20, cl_WHITE, cl_BLACK);
 80037f2:	4b3a      	ldr	r3, [pc, #232]	; (80038dc <GrandState_Verita+0xcfc>)
 80037f4:	2200      	movs	r2, #0
 80037f6:	9202      	str	r2, [sp, #8]
 80037f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80037fc:	9201      	str	r2, [sp, #4]
 80037fe:	685a      	ldr	r2, [r3, #4]
 8003800:	9200      	str	r2, [sp, #0]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a36      	ldr	r2, [pc, #216]	; (80038e0 <GrandState_Verita+0xd00>)
 8003806:	2196      	movs	r1, #150	; 0x96
 8003808:	2064      	movs	r0, #100	; 0x64
 800380a:	f002 fbb6 	bl	8005f7a <ili9341_WriteString>
			ili9341_WriteString(220, 150, "PASS", Font20, cl_GREEN, cl_BLACK);
 800380e:	4b33      	ldr	r3, [pc, #204]	; (80038dc <GrandState_Verita+0xcfc>)
 8003810:	2200      	movs	r2, #0
 8003812:	9202      	str	r2, [sp, #8]
 8003814:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8003818:	9201      	str	r2, [sp, #4]
 800381a:	685a      	ldr	r2, [r3, #4]
 800381c:	9200      	str	r2, [sp, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a30      	ldr	r2, [pc, #192]	; (80038e4 <GrandState_Verita+0xd04>)
 8003822:	2196      	movs	r1, #150	; 0x96
 8003824:	20dc      	movs	r0, #220	; 0xdc
 8003826:	f002 fba8 	bl	8005f7a <ili9341_WriteString>
			ili9341_FillRect(275, 140, 45, 30, cl_BLACK);
 800382a:	2300      	movs	r3, #0
 800382c:	9300      	str	r3, [sp, #0]
 800382e:	231e      	movs	r3, #30
 8003830:	222d      	movs	r2, #45	; 0x2d
 8003832:	218c      	movs	r1, #140	; 0x8c
 8003834:	f240 1013 	movw	r0, #275	; 0x113
 8003838:	f002 f9f6 	bl	8005c28 <ili9341_FillRect>
			hwscor.pImcu = 1;
 800383c:	4b2a      	ldr	r3, [pc, #168]	; (80038e8 <GrandState_Verita+0xd08>)
 800383e:	2201      	movs	r2, #1
 8003840:	711a      	strb	r2, [r3, #4]
		}

		ili9341_WriteStringNoBG(30, 220, "<-Back", Font16, cl_WHITE);
 8003842:	4b31      	ldr	r3, [pc, #196]	; (8003908 <GrandState_Verita+0xd28>)
 8003844:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003848:	9201      	str	r2, [sp, #4]
 800384a:	685a      	ldr	r2, [r3, #4]
 800384c:	9200      	str	r2, [sp, #0]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a2e      	ldr	r2, [pc, #184]	; (800390c <GrandState_Verita+0xd2c>)
 8003852:	21dc      	movs	r1, #220	; 0xdc
 8003854:	201e      	movs	r0, #30
 8003856:	f002 fbdd 	bl	8006014 <ili9341_WriteStringNoBG>
			 * 		if pressed or 3 sec pass -> go bootloader
			 * else force back lobby & turnoff relay.
			 * */

		//// wait for MCU Booting
		if(HAL_GetTick() >= gScr.timelog){
 800385a:	f003 f867 	bl	800692c <HAL_GetTick>
 800385e:	4602      	mov	r2, r0
 8003860:	4b2b      	ldr	r3, [pc, #172]	; (8003910 <GrandState_Verita+0xd30>)
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	429a      	cmp	r2, r3
 8003866:	f0c0 80aa 	bcc.w	80039be <GrandState_Verita+0xdde>

			//// All pass
			if(hwscor.p3V3 + hwscor.p3VSTL + hwscor.pIbrd + hwscor.pImcu + hwscor.p5V >= 5){
 800386a:	4b1f      	ldr	r3, [pc, #124]	; (80038e8 <GrandState_Verita+0xd08>)
 800386c:	785b      	ldrb	r3, [r3, #1]
 800386e:	461a      	mov	r2, r3
 8003870:	4b1d      	ldr	r3, [pc, #116]	; (80038e8 <GrandState_Verita+0xd08>)
 8003872:	789b      	ldrb	r3, [r3, #2]
 8003874:	4413      	add	r3, r2
 8003876:	4a1c      	ldr	r2, [pc, #112]	; (80038e8 <GrandState_Verita+0xd08>)
 8003878:	78d2      	ldrb	r2, [r2, #3]
 800387a:	4413      	add	r3, r2
 800387c:	4a1a      	ldr	r2, [pc, #104]	; (80038e8 <GrandState_Verita+0xd08>)
 800387e:	7912      	ldrb	r2, [r2, #4]
 8003880:	4413      	add	r3, r2
 8003882:	4a19      	ldr	r2, [pc, #100]	; (80038e8 <GrandState_Verita+0xd08>)
 8003884:	7812      	ldrb	r2, [r2, #0]
 8003886:	4413      	add	r3, r2
 8003888:	2b04      	cmp	r3, #4
 800388a:	dd47      	ble.n	800391c <GrandState_Verita+0xd3c>
				hwscor.ptime_scores++;
 800388c:	4b16      	ldr	r3, [pc, #88]	; (80038e8 <GrandState_Verita+0xd08>)
 800388e:	795b      	ldrb	r3, [r3, #5]
 8003890:	3301      	adds	r3, #1
 8003892:	b2da      	uxtb	r2, r3
 8003894:	4b14      	ldr	r3, [pc, #80]	; (80038e8 <GrandState_Verita+0xd08>)
 8003896:	715a      	strb	r2, [r3, #5]
				//// make sure All really pass continuously
				if(hwscor.ptime_scores >= 2){
 8003898:	4b13      	ldr	r3, [pc, #76]	; (80038e8 <GrandState_Verita+0xd08>)
 800389a:	795b      	ldrb	r3, [r3, #5]
 800389c:	2b01      	cmp	r3, #1
 800389e:	f240 808e 	bls.w	80039be <GrandState_Verita+0xdde>
					hwscor.ptime_scores = 0;
 80038a2:	4b11      	ldr	r3, [pc, #68]	; (80038e8 <GrandState_Verita+0xd08>)
 80038a4:	2200      	movs	r2, #0
 80038a6:	715a      	strb	r2, [r3, #5]
					ili9341_WriteString(220, 170, "ALL PASS", Font16, cl_BLUE, cl_GREEN);
 80038a8:	4b17      	ldr	r3, [pc, #92]	; (8003908 <GrandState_Verita+0xd28>)
 80038aa:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80038ae:	9202      	str	r2, [sp, #8]
 80038b0:	221f      	movs	r2, #31
 80038b2:	9201      	str	r2, [sp, #4]
 80038b4:	685a      	ldr	r2, [r3, #4]
 80038b6:	9200      	str	r2, [sp, #0]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a16      	ldr	r2, [pc, #88]	; (8003914 <GrandState_Verita+0xd34>)
 80038bc:	21aa      	movs	r1, #170	; 0xaa
 80038be:	20dc      	movs	r0, #220	; 0xdc
 80038c0:	f002 fb5b 	bl	8005f7a <ili9341_WriteString>
					HAL_Delay(500);
 80038c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80038c8:	f003 f83c 	bl	8006944 <HAL_Delay>
					if(gScr.fullflag == ff_runfull){
 80038cc:	4b10      	ldr	r3, [pc, #64]	; (8003910 <GrandState_Verita+0xd30>)
 80038ce:	781b      	ldrb	r3, [r3, #0]
 80038d0:	2b03      	cmp	r3, #3
 80038d2:	d174      	bne.n	80039be <GrandState_Verita+0xdde>
						//GrandState = pre_bootloader;
						GrandState = pre_fw_erase;
 80038d4:	4b10      	ldr	r3, [pc, #64]	; (8003918 <GrandState_Verita+0xd38>)
 80038d6:	2207      	movs	r2, #7
 80038d8:	701a      	strb	r2, [r3, #0]
 80038da:	e070      	b.n	80039be <GrandState_Verita+0xdde>
 80038dc:	20000238 	.word	0x20000238
 80038e0:	200006b8 	.word	0x200006b8
 80038e4:	0800ff68 	.word	0x0800ff68
 80038e8:	200008a0 	.word	0x200008a0
 80038ec:	200007f8 	.word	0x200007f8
 80038f0:	0800ff5c 	.word	0x0800ff5c
 80038f4:	0800ff60 	.word	0x0800ff60
 80038f8:	0800ff70 	.word	0x0800ff70
 80038fc:	20000228 	.word	0x20000228
 8003900:	0800ff74 	.word	0x0800ff74
 8003904:	0800ff7c 	.word	0x0800ff7c
 8003908:	20000230 	.word	0x20000230
 800390c:	0800fee0 	.word	0x0800fee0
 8003910:	20000894 	.word	0x20000894
 8003914:	0800ff84 	.word	0x0800ff84
 8003918:	20000006 	.word	0x20000006
				}
			}
			//// Atleast fail
			else{

				hwscor.ptime_scores = 0;
 800391c:	4bac      	ldr	r3, [pc, #688]	; (8003bd0 <GrandState_Verita+0xff0>)
 800391e:	2200      	movs	r2, #0
 8003920:	715a      	strb	r2, [r3, #5]

				if(inatb.CURRENT - inata.CURRENT >= 150 && inatb.CURRENT >= Current_treash_mA){
 8003922:	4bac      	ldr	r3, [pc, #688]	; (8003bd4 <GrandState_Verita+0xff4>)
 8003924:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003928:	461a      	mov	r2, r3
 800392a:	4bab      	ldr	r3, [pc, #684]	; (8003bd8 <GrandState_Verita+0xff8>)
 800392c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	2b95      	cmp	r3, #149	; 0x95
 8003934:	dd12      	ble.n	800395c <GrandState_Verita+0xd7c>
 8003936:	4ba7      	ldr	r3, [pc, #668]	; (8003bd4 <GrandState_Verita+0xff4>)
 8003938:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800393c:	2bf9      	cmp	r3, #249	; 0xf9
 800393e:	dd0d      	ble.n	800395c <GrandState_Verita+0xd7c>
				//// board current bad
				ili9341_WriteString(110, 180, "Board Bad", Font16, cl_YELLOW, cl_BLACK);
 8003940:	4ba6      	ldr	r3, [pc, #664]	; (8003bdc <GrandState_Verita+0xffc>)
 8003942:	2200      	movs	r2, #0
 8003944:	9202      	str	r2, [sp, #8]
 8003946:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800394a:	9201      	str	r2, [sp, #4]
 800394c:	685a      	ldr	r2, [r3, #4]
 800394e:	9200      	str	r2, [sp, #0]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4aa3      	ldr	r2, [pc, #652]	; (8003be0 <GrandState_Verita+0x1000>)
 8003954:	21b4      	movs	r1, #180	; 0xb4
 8003956:	206e      	movs	r0, #110	; 0x6e
 8003958:	f002 fb0f 	bl	8005f7a <ili9341_WriteString>
				}
				if(inata.CURRENT >= Current_treash_mA){
 800395c:	4b9e      	ldr	r3, [pc, #632]	; (8003bd8 <GrandState_Verita+0xff8>)
 800395e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003962:	2bf9      	cmp	r3, #249	; 0xf9
 8003964:	dd0d      	ble.n	8003982 <GrandState_Verita+0xda2>
				//// Bad MCU
					ili9341_WriteString(20, 180, "MCU Bad", Font16, cl_YELLOW, cl_BLACK);
 8003966:	4b9d      	ldr	r3, [pc, #628]	; (8003bdc <GrandState_Verita+0xffc>)
 8003968:	2200      	movs	r2, #0
 800396a:	9202      	str	r2, [sp, #8]
 800396c:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8003970:	9201      	str	r2, [sp, #4]
 8003972:	685a      	ldr	r2, [r3, #4]
 8003974:	9200      	str	r2, [sp, #0]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a9a      	ldr	r2, [pc, #616]	; (8003be4 <GrandState_Verita+0x1004>)
 800397a:	21b4      	movs	r1, #180	; 0xb4
 800397c:	2014      	movs	r0, #20
 800397e:	f002 fafc 	bl	8005f7a <ili9341_WriteString>
				}

				ili9341_WriteString(20, 205, "Unplug Client & Press back to lobby", Font12, cl_YELLOW, cl_BLACK);
 8003982:	4b99      	ldr	r3, [pc, #612]	; (8003be8 <GrandState_Verita+0x1008>)
 8003984:	2200      	movs	r2, #0
 8003986:	9202      	str	r2, [sp, #8]
 8003988:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800398c:	9201      	str	r2, [sp, #4]
 800398e:	685a      	ldr	r2, [r3, #4]
 8003990:	9200      	str	r2, [sp, #0]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a95      	ldr	r2, [pc, #596]	; (8003bec <GrandState_Verita+0x100c>)
 8003996:	21cd      	movs	r1, #205	; 0xcd
 8003998:	2014      	movs	r0, #20
 800399a:	f002 faee 	bl	8005f7a <ili9341_WriteString>
				if(k_flag.cnt){
 800399e:	4b94      	ldr	r3, [pc, #592]	; (8003bf0 <GrandState_Verita+0x1010>)
 80039a0:	789b      	ldrb	r3, [r3, #2]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d00b      	beq.n	80039be <GrandState_Verita+0xdde>
				k_flag.cnt = 0;
 80039a6:	4b92      	ldr	r3, [pc, #584]	; (8003bf0 <GrandState_Verita+0x1010>)
 80039a8:	2200      	movs	r2, #0
 80039aa:	709a      	strb	r2, [r3, #2]
				HAL_GPIO_WritePin(RelayClient_GPIO_Port, RelayClient_Pin, GPIO_PIN_RESET);
 80039ac:	2200      	movs	r2, #0
 80039ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80039b2:	4890      	ldr	r0, [pc, #576]	; (8003bf4 <GrandState_Verita+0x1014>)
 80039b4:	f003 fea8 	bl	8007708 <HAL_GPIO_WritePin>
				GrandState = pre_lobby;
 80039b8:	4b8f      	ldr	r3, [pc, #572]	; (8003bf8 <GrandState_Verita+0x1018>)
 80039ba:	2201      	movs	r2, #1
 80039bc:	701a      	strb	r2, [r3, #0]
				}
			}

		}//// haltimelog

		if(k_flag.cnt && stboxp.ch_is == 1){ //// Back to lobby
 80039be:	4b8c      	ldr	r3, [pc, #560]	; (8003bf0 <GrandState_Verita+0x1010>)
 80039c0:	789b      	ldrb	r3, [r3, #2]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	f001 8210 	beq.w	8004de8 <GrandState_Verita+0x2208>
 80039c8:	4b8c      	ldr	r3, [pc, #560]	; (8003bfc <GrandState_Verita+0x101c>)
 80039ca:	789b      	ldrb	r3, [r3, #2]
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	f041 820b 	bne.w	8004de8 <GrandState_Verita+0x2208>
			GrandState = pre_lobby;
 80039d2:	4b89      	ldr	r3, [pc, #548]	; (8003bf8 <GrandState_Verita+0x1018>)
 80039d4:	2201      	movs	r2, #1
 80039d6:	701a      	strb	r2, [r3, #0]
			k_flag.cnt = 0;
 80039d8:	4b85      	ldr	r3, [pc, #532]	; (8003bf0 <GrandState_Verita+0x1010>)
 80039da:	2200      	movs	r2, #0
 80039dc:	709a      	strb	r2, [r3, #2]
			gScr.fullflag = 0;
 80039de:	4b88      	ldr	r3, [pc, #544]	; (8003c00 <GrandState_Verita+0x1020>)
 80039e0:	2200      	movs	r2, #0
 80039e2:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(RelayClient_GPIO_Port, RelayClient_Pin, GPIO_PIN_RESET);
 80039e4:	2200      	movs	r2, #0
 80039e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80039ea:	4882      	ldr	r0, [pc, #520]	; (8003bf4 <GrandState_Verita+0x1014>)
 80039ec:	f003 fe8c 	bl	8007708 <HAL_GPIO_WritePin>
		}

		break; //hw_chk
 80039f0:	f001 b9fa 	b.w	8004de8 <GrandState_Verita+0x2208>

	case pre_bootloader:
		stboxp.choice_set = bpoxy_no;
 80039f4:	4b81      	ldr	r3, [pc, #516]	; (8003bfc <GrandState_Verita+0x101c>)
 80039f6:	2203      	movs	r2, #3
 80039f8:	705a      	strb	r2, [r3, #1]

		ili9341_FillRect(0, 0, 320, 30, cl_YELLOW);
 80039fa:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80039fe:	9300      	str	r3, [sp, #0]
 8003a00:	231e      	movs	r3, #30
 8003a02:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003a06:	2100      	movs	r1, #0
 8003a08:	2000      	movs	r0, #0
 8003a0a:	f002 f90d 	bl	8005c28 <ili9341_FillRect>
		ili9341_FillRect(0, 30, 320, 210, cl_BLACK);
 8003a0e:	2300      	movs	r3, #0
 8003a10:	9300      	str	r3, [sp, #0]
 8003a12:	23d2      	movs	r3, #210	; 0xd2
 8003a14:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003a18:	211e      	movs	r1, #30
 8003a1a:	2000      	movs	r0, #0
 8003a1c:	f002 f904 	bl	8005c28 <ili9341_FillRect>

		ili9341_WriteStringNoBG(60, 5, "- BOOTLOADER -", Font20, cl_BLACK);
 8003a20:	4b78      	ldr	r3, [pc, #480]	; (8003c04 <GrandState_Verita+0x1024>)
 8003a22:	2200      	movs	r2, #0
 8003a24:	9201      	str	r2, [sp, #4]
 8003a26:	685a      	ldr	r2, [r3, #4]
 8003a28:	9200      	str	r2, [sp, #0]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a76      	ldr	r2, [pc, #472]	; (8003c08 <GrandState_Verita+0x1028>)
 8003a2e:	2105      	movs	r1, #5
 8003a30:	203c      	movs	r0, #60	; 0x3c
 8003a32:	f002 faef 	bl	8006014 <ili9341_WriteStringNoBG>

		if(gScr.fullflag == ff_runfull){
 8003a36:	4b72      	ldr	r3, [pc, #456]	; (8003c00 <GrandState_Verita+0x1020>)
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	2b03      	cmp	r3, #3
 8003a3c:	d112      	bne.n	8003a64 <GrandState_Verita+0xe84>
				sprintf(TextDispBuffer,"FULL"); ili9341_WriteString(250, 5, TextDispBuffer, Font20, cl_RED, cl_YELLOW);
 8003a3e:	4973      	ldr	r1, [pc, #460]	; (8003c0c <GrandState_Verita+0x102c>)
 8003a40:	4873      	ldr	r0, [pc, #460]	; (8003c10 <GrandState_Verita+0x1030>)
 8003a42:	f009 fe83 	bl	800d74c <siprintf>
 8003a46:	4b6f      	ldr	r3, [pc, #444]	; (8003c04 <GrandState_Verita+0x1024>)
 8003a48:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8003a4c:	9202      	str	r2, [sp, #8]
 8003a4e:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8003a52:	9201      	str	r2, [sp, #4]
 8003a54:	685a      	ldr	r2, [r3, #4]
 8003a56:	9200      	str	r2, [sp, #0]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a6d      	ldr	r2, [pc, #436]	; (8003c10 <GrandState_Verita+0x1030>)
 8003a5c:	2105      	movs	r1, #5
 8003a5e:	20fa      	movs	r0, #250	; 0xfa
 8003a60:	f002 fa8b 	bl	8005f7a <ili9341_WriteString>
		}


		ili9341_WriteStringNoBG(20, 60, " .bin script is booting...", Font16, cl_WHITE);
 8003a64:	4b5d      	ldr	r3, [pc, #372]	; (8003bdc <GrandState_Verita+0xffc>)
 8003a66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a6a:	9201      	str	r2, [sp, #4]
 8003a6c:	685a      	ldr	r2, [r3, #4]
 8003a6e:	9200      	str	r2, [sp, #0]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a68      	ldr	r2, [pc, #416]	; (8003c14 <GrandState_Verita+0x1034>)
 8003a74:	213c      	movs	r1, #60	; 0x3c
 8003a76:	2014      	movs	r0, #20
 8003a78:	f002 facc 	bl	8006014 <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"Firmware ver: %08X", client_bin_Ver);
 8003a7c:	4a66      	ldr	r2, [pc, #408]	; (8003c18 <GrandState_Verita+0x1038>)
 8003a7e:	4967      	ldr	r1, [pc, #412]	; (8003c1c <GrandState_Verita+0x103c>)
 8003a80:	4863      	ldr	r0, [pc, #396]	; (8003c10 <GrandState_Verita+0x1030>)
 8003a82:	f009 fe63 	bl	800d74c <siprintf>
		ili9341_WriteStringNoBG(40, 80, TextDispBuffer, Font16, cl_DARKGREY);
 8003a86:	4b55      	ldr	r3, [pc, #340]	; (8003bdc <GrandState_Verita+0xffc>)
 8003a88:	f647 32ef 	movw	r2, #31727	; 0x7bef
 8003a8c:	9201      	str	r2, [sp, #4]
 8003a8e:	685a      	ldr	r2, [r3, #4]
 8003a90:	9200      	str	r2, [sp, #0]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a5e      	ldr	r2, [pc, #376]	; (8003c10 <GrandState_Verita+0x1030>)
 8003a96:	2150      	movs	r1, #80	; 0x50
 8003a98:	2028      	movs	r0, #40	; 0x28
 8003a9a:	f002 fabb 	bl	8006014 <ili9341_WriteStringNoBG>

		ili9341_WriteStringNoBG(40, 110, "Don't pluck  off", Font20, cl_WHITE);
 8003a9e:	4b59      	ldr	r3, [pc, #356]	; (8003c04 <GrandState_Verita+0x1024>)
 8003aa0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003aa4:	9201      	str	r2, [sp, #4]
 8003aa6:	685a      	ldr	r2, [r3, #4]
 8003aa8:	9200      	str	r2, [sp, #0]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a5c      	ldr	r2, [pc, #368]	; (8003c20 <GrandState_Verita+0x1040>)
 8003aae:	216e      	movs	r1, #110	; 0x6e
 8003ab0:	2028      	movs	r0, #40	; 0x28
 8003ab2:	f002 faaf 	bl	8006014 <ili9341_WriteStringNoBG>
		ili9341_WriteStringNoBG(40, 135, "the client board", Font20, cl_ORANGE);
 8003ab6:	4b53      	ldr	r3, [pc, #332]	; (8003c04 <GrandState_Verita+0x1024>)
 8003ab8:	f64f 12a0 	movw	r2, #63904	; 0xf9a0
 8003abc:	9201      	str	r2, [sp, #4]
 8003abe:	685a      	ldr	r2, [r3, #4]
 8003ac0:	9200      	str	r2, [sp, #0]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a57      	ldr	r2, [pc, #348]	; (8003c24 <GrandState_Verita+0x1044>)
 8003ac6:	2187      	movs	r1, #135	; 0x87
 8003ac8:	2028      	movs	r0, #40	; 0x28
 8003aca:	f002 faa3 	bl	8006014 <ili9341_WriteStringNoBG>


		k_flag.cnt = 0;
 8003ace:	4b48      	ldr	r3, [pc, #288]	; (8003bf0 <GrandState_Verita+0x1010>)
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	709a      	strb	r2, [r3, #2]
		GrandState = s_bootloader;
 8003ad4:	4b48      	ldr	r3, [pc, #288]	; (8003bf8 <GrandState_Verita+0x1018>)
 8003ad6:	220a      	movs	r2, #10
 8003ad8:	701a      	strb	r2, [r3, #0]
		//GrandState = pnd_bootloader; gScr.timelog = HAL_GetTick() + 3500;
		break; // pre_bootloader
 8003ada:	f001 b994 	b.w	8004e06 <GrandState_Verita+0x2226>

	case pnd_bootloader:
		//// -- Open Client make sure ----
		HAL_GPIO_WritePin(RelayClient_GPIO_Port, RelayClient_Pin, GPIO_PIN_SET);
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003ae4:	4843      	ldr	r0, [pc, #268]	; (8003bf4 <GrandState_Verita+0x1014>)
 8003ae6:	f003 fe0f 	bl	8007708 <HAL_GPIO_WritePin>

		if(HAL_GetTick() >= gScr.timelog){
 8003aea:	f002 ff1f 	bl	800692c <HAL_GetTick>
 8003aee:	4602      	mov	r2, r0
 8003af0:	4b43      	ldr	r3, [pc, #268]	; (8003c00 <GrandState_Verita+0x1020>)
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	429a      	cmp	r2, r3
 8003af6:	f0c1 8179 	bcc.w	8004dec <GrandState_Verita+0x220c>
			GrandState = s_bootloader;
 8003afa:	4b3f      	ldr	r3, [pc, #252]	; (8003bf8 <GrandState_Verita+0x1018>)
 8003afc:	220a      	movs	r2, #10
 8003afe:	701a      	strb	r2, [r3, #0]
		}
		
		break;
 8003b00:	f001 b974 	b.w	8004dec <GrandState_Verita+0x220c>

	case s_bootloader:
		stboxp.choice_set = bpoxy_def;
 8003b04:	4b3d      	ldr	r3, [pc, #244]	; (8003bfc <GrandState_Verita+0x101c>)
 8003b06:	2200      	movs	r2, #0
 8003b08:	705a      	strb	r2, [r3, #1]

		//// -- Open Client make sure ----
		if(HAL_GPIO_ReadPin(RelayClient_GPIO_Port, RelayClient_Pin) >= 1){
 8003b0a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003b0e:	4839      	ldr	r0, [pc, #228]	; (8003bf4 <GrandState_Verita+0x1014>)
 8003b10:	f003 fde2 	bl	80076d8 <HAL_GPIO_ReadPin>
 8003b14:	4603      	mov	r3, r0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d003      	beq.n	8003b22 <GrandState_Verita+0xf42>
			HAL_Delay(150);
 8003b1a:	2096      	movs	r0, #150	; 0x96
 8003b1c:	f002 ff12 	bl	8006944 <HAL_Delay>
 8003b20:	e009      	b.n	8003b36 <GrandState_Verita+0xf56>
		}else{
			HAL_GPIO_WritePin(RelayClient_GPIO_Port, RelayClient_Pin, GPIO_PIN_SET);
 8003b22:	2201      	movs	r2, #1
 8003b24:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003b28:	4832      	ldr	r0, [pc, #200]	; (8003bf4 <GrandState_Verita+0x1014>)
 8003b2a:	f003 fded 	bl	8007708 <HAL_GPIO_WritePin>
			HAL_Delay(3500);
 8003b2e:	f640 50ac 	movw	r0, #3500	; 0xdac
 8003b32:	f002 ff07 	bl	8006944 <HAL_Delay>

		//// enable UART, disable after endboot, prevent misunderstanding when GPIO test
		//gpio_BL_UART_activate();

		//// find n times must be loop to upload all code
		bootloop_n = (boot_size / 256) + ((boot_size % 256)>0 ? 1:0);
 8003b36:	4b3c      	ldr	r3, [pc, #240]	; (8003c28 <GrandState_Verita+0x1048>)
 8003b38:	881b      	ldrh	r3, [r3, #0]
 8003b3a:	0a1b      	lsrs	r3, r3, #8
 8003b3c:	b29b      	uxth	r3, r3
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	4a39      	ldr	r2, [pc, #228]	; (8003c28 <GrandState_Verita+0x1048>)
 8003b42:	8812      	ldrh	r2, [r2, #0]
 8003b44:	b2d2      	uxtb	r2, r2
 8003b46:	b292      	uxth	r2, r2
 8003b48:	2a00      	cmp	r2, #0
 8003b4a:	bf14      	ite	ne
 8003b4c:	2201      	movne	r2, #1
 8003b4e:	2200      	moveq	r2, #0
 8003b50:	b2d2      	uxtb	r2, r2
 8003b52:	4413      	add	r3, r2
 8003b54:	b2da      	uxtb	r2, r3
 8003b56:	4b35      	ldr	r3, [pc, #212]	; (8003c2c <GrandState_Verita+0x104c>)
 8003b58:	701a      	strb	r2, [r3, #0]
		//bootloop_n = (uint8_t)ceil(boot_size / 256.0);

		BL_UART_Start(&huart1);
 8003b5a:	4835      	ldr	r0, [pc, #212]	; (8003c30 <GrandState_Verita+0x1050>)
 8003b5c:	f7fd fda4 	bl	80016a8 <BL_UART_Start>
			//blrespo = BL_UART_ExtendEraseMem_SP(&huart1, Erase_MASS_CMD);


		//// WriteMem Set  =========================================
		//// case 31452 -> b must be loop 123 times  ----------------------------------
		for(register int b = 0;b < bootloop_n - 1;b++){
 8003b60:	2400      	movs	r4, #0
 8003b62:	e086      	b.n	8003c72 <GrandState_Verita+0x1092>
			blrespo = BL_UART_WriteMem(&huart1, 0x08000000 + (b*0x100), 255, &F411_Verita_Client[0x100*b]);
 8003b64:	f504 2300 	add.w	r3, r4, #524288	; 0x80000
 8003b68:	021b      	lsls	r3, r3, #8
 8003b6a:	4619      	mov	r1, r3
 8003b6c:	0223      	lsls	r3, r4, #8
 8003b6e:	4a31      	ldr	r2, [pc, #196]	; (8003c34 <GrandState_Verita+0x1054>)
 8003b70:	4413      	add	r3, r2
 8003b72:	22ff      	movs	r2, #255	; 0xff
 8003b74:	482e      	ldr	r0, [pc, #184]	; (8003c30 <GrandState_Verita+0x1050>)
 8003b76:	f7fd fde5 	bl	8001744 <BL_UART_WriteMem>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	4b2e      	ldr	r3, [pc, #184]	; (8003c38 <GrandState_Verita+0x1058>)
 8003b80:	701a      	strb	r2, [r3, #0]
			//// display ---------------
			if(blrespo == UB_ACK){
 8003b82:	4b2d      	ldr	r3, [pc, #180]	; (8003c38 <GrandState_Verita+0x1058>)
 8003b84:	781b      	ldrb	r3, [r3, #0]
 8003b86:	2b79      	cmp	r3, #121	; 0x79
 8003b88:	d10e      	bne.n	8003ba8 <GrandState_Verita+0xfc8>
				ili9341_WriteString(40, 180, "Wr", Font16, cl_YELLOW, cl_BLACK);
 8003b8a:	4b14      	ldr	r3, [pc, #80]	; (8003bdc <GrandState_Verita+0xffc>)
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	9202      	str	r2, [sp, #8]
 8003b90:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8003b94:	9201      	str	r2, [sp, #4]
 8003b96:	685a      	ldr	r2, [r3, #4]
 8003b98:	9200      	str	r2, [sp, #0]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a27      	ldr	r2, [pc, #156]	; (8003c3c <GrandState_Verita+0x105c>)
 8003b9e:	21b4      	movs	r1, #180	; 0xb4
 8003ba0:	2028      	movs	r0, #40	; 0x28
 8003ba2:	f002 f9ea 	bl	8005f7a <ili9341_WriteString>
 8003ba6:	e05b      	b.n	8003c60 <GrandState_Verita+0x1080>
			}else if(blrespo == UB_NACK){
 8003ba8:	4b23      	ldr	r3, [pc, #140]	; (8003c38 <GrandState_Verita+0x1058>)
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	2b1f      	cmp	r3, #31
 8003bae:	d149      	bne.n	8003c44 <GrandState_Verita+0x1064>
				ili9341_WriteString(40, 180, "B", Font16, cl_YELLOW, cl_BLACK);
 8003bb0:	4b0a      	ldr	r3, [pc, #40]	; (8003bdc <GrandState_Verita+0xffc>)
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	9202      	str	r2, [sp, #8]
 8003bb6:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8003bba:	9201      	str	r2, [sp, #4]
 8003bbc:	685a      	ldr	r2, [r3, #4]
 8003bbe:	9200      	str	r2, [sp, #0]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a1f      	ldr	r2, [pc, #124]	; (8003c40 <GrandState_Verita+0x1060>)
 8003bc4:	21b4      	movs	r1, #180	; 0xb4
 8003bc6:	2028      	movs	r0, #40	; 0x28
 8003bc8:	f002 f9d7 	bl	8005f7a <ili9341_WriteString>
 8003bcc:	e048      	b.n	8003c60 <GrandState_Verita+0x1080>
 8003bce:	bf00      	nop
 8003bd0:	200008a0 	.word	0x200008a0
 8003bd4:	20000810 	.word	0x20000810
 8003bd8:	200007f8 	.word	0x200007f8
 8003bdc:	20000230 	.word	0x20000230
 8003be0:	0800ff90 	.word	0x0800ff90
 8003be4:	0800ff9c 	.word	0x0800ff9c
 8003be8:	20000228 	.word	0x20000228
 8003bec:	0800ffa4 	.word	0x0800ffa4
 8003bf0:	20000890 	.word	0x20000890
 8003bf4:	40020800 	.word	0x40020800
 8003bf8:	20000006 	.word	0x20000006
 8003bfc:	200008ac 	.word	0x200008ac
 8003c00:	20000894 	.word	0x20000894
 8003c04:	20000238 	.word	0x20000238
 8003c08:	0800ffc8 	.word	0x0800ffc8
 8003c0c:	0800fee8 	.word	0x0800fee8
 8003c10:	200006b8 	.word	0x200006b8
 8003c14:	0800ffd8 	.word	0x0800ffd8
 8003c18:	11310523 	.word	0x11310523
 8003c1c:	0800fff4 	.word	0x0800fff4
 8003c20:	08010008 	.word	0x08010008
 8003c24:	0801001c 	.word	0x0801001c
 8003c28:	20000004 	.word	0x20000004
 8003c2c:	20000780 	.word	0x20000780
 8003c30:	2000058c 	.word	0x2000058c
 8003c34:	0803008c 	.word	0x0803008c
 8003c38:	20000781 	.word	0x20000781
 8003c3c:	08010030 	.word	0x08010030
 8003c40:	08010034 	.word	0x08010034
			}
			else{
				ili9341_WriteString(40, 180, "-", Font16, cl_GRAY, cl_BLACK);
 8003c44:	4b35      	ldr	r3, [pc, #212]	; (8003d1c <GrandState_Verita+0x113c>)
 8003c46:	2200      	movs	r2, #0
 8003c48:	9202      	str	r2, [sp, #8]
 8003c4a:	f645 22eb 	movw	r2, #23275	; 0x5aeb
 8003c4e:	9201      	str	r2, [sp, #4]
 8003c50:	685a      	ldr	r2, [r3, #4]
 8003c52:	9200      	str	r2, [sp, #0]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a32      	ldr	r2, [pc, #200]	; (8003d20 <GrandState_Verita+0x1140>)
 8003c58:	21b4      	movs	r1, #180	; 0xb4
 8003c5a:	2028      	movs	r0, #40	; 0x28
 8003c5c:	f002 f98d 	bl	8005f7a <ili9341_WriteString>
			}
			ili9341_FillRect(40, 180, 15, 30, cl_BLACK);
 8003c60:	2300      	movs	r3, #0
 8003c62:	9300      	str	r3, [sp, #0]
 8003c64:	231e      	movs	r3, #30
 8003c66:	220f      	movs	r2, #15
 8003c68:	21b4      	movs	r1, #180	; 0xb4
 8003c6a:	2028      	movs	r0, #40	; 0x28
 8003c6c:	f001 ffdc 	bl	8005c28 <ili9341_FillRect>
		for(register int b = 0;b < bootloop_n - 1;b++){
 8003c70:	3401      	adds	r4, #1
 8003c72:	4b2c      	ldr	r3, [pc, #176]	; (8003d24 <GrandState_Verita+0x1144>)
 8003c74:	781b      	ldrb	r3, [r3, #0]
 8003c76:	3b01      	subs	r3, #1
 8003c78:	429c      	cmp	r4, r3
 8003c7a:	f6ff af73 	blt.w	8003b64 <GrandState_Verita+0xf84>
			//// display ---------------
		}
		//// last round: send only left bit (less 255)
		BL_UART_WriteMem(&huart1, 0x08000000 + ((bootloop_n-1)*0x100), boot_size % 256, &F411_Verita_Client[0x100*(bootloop_n-1)]);
 8003c7e:	4b29      	ldr	r3, [pc, #164]	; (8003d24 <GrandState_Verita+0x1144>)
 8003c80:	781b      	ldrb	r3, [r3, #0]
 8003c82:	f503 23ff 	add.w	r3, r3, #522240	; 0x7f800
 8003c86:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8003c8a:	021b      	lsls	r3, r3, #8
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	4b26      	ldr	r3, [pc, #152]	; (8003d28 <GrandState_Verita+0x1148>)
 8003c90:	881b      	ldrh	r3, [r3, #0]
 8003c92:	b2da      	uxtb	r2, r3
 8003c94:	4b23      	ldr	r3, [pc, #140]	; (8003d24 <GrandState_Verita+0x1144>)
 8003c96:	781b      	ldrb	r3, [r3, #0]
 8003c98:	3b01      	subs	r3, #1
 8003c9a:	021b      	lsls	r3, r3, #8
 8003c9c:	4923      	ldr	r1, [pc, #140]	; (8003d2c <GrandState_Verita+0x114c>)
 8003c9e:	440b      	add	r3, r1
 8003ca0:	4601      	mov	r1, r0
 8003ca2:	4823      	ldr	r0, [pc, #140]	; (8003d30 <GrandState_Verita+0x1150>)
 8003ca4:	f7fd fd4e 	bl	8001744 <BL_UART_WriteMem>
		//// WriteMem Set =========================================

		BL_UART_Finish();
 8003ca8:	f7fd fd2e 	bl	8001708 <BL_UART_Finish>
//		HAL_Delay(50);
//		HAL_GPIO_WritePin(RelayClient_GPIO_Port, RelayClient_Pin, GPIO_PIN_SET);
//		HAL_Delay(1000);
		//// Hard reset--------

		ili9341_WriteStringNoBG(140, 160, "Finish", Font24, cl_GREEN);
 8003cac:	4b21      	ldr	r3, [pc, #132]	; (8003d34 <GrandState_Verita+0x1154>)
 8003cae:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8003cb2:	9201      	str	r2, [sp, #4]
 8003cb4:	685a      	ldr	r2, [r3, #4]
 8003cb6:	9200      	str	r2, [sp, #0]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a1f      	ldr	r2, [pc, #124]	; (8003d38 <GrandState_Verita+0x1158>)
 8003cbc:	21a0      	movs	r1, #160	; 0xa0
 8003cbe:	208c      	movs	r0, #140	; 0x8c
 8003cc0:	f002 f9a8 	bl	8006014 <ili9341_WriteStringNoBG>
		////wait for user to realise finish
		HAL_Delay(1000);
 8003cc4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003cc8:	f002 fe3c 	bl	8006944 <HAL_Delay>

		ili9341_WriteStringNoBG(140, 190, "Start", Font24, cl_GREEN);
 8003ccc:	4b19      	ldr	r3, [pc, #100]	; (8003d34 <GrandState_Verita+0x1154>)
 8003cce:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8003cd2:	9201      	str	r2, [sp, #4]
 8003cd4:	685a      	ldr	r2, [r3, #4]
 8003cd6:	9200      	str	r2, [sp, #0]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a18      	ldr	r2, [pc, #96]	; (8003d3c <GrandState_Verita+0x115c>)
 8003cdc:	21be      	movs	r1, #190	; 0xbe
 8003cde:	208c      	movs	r0, #140	; 0x8c
 8003ce0:	f002 f998 	bl	8006014 <ili9341_WriteStringNoBG>
		////wait for user to realise finish
		HAL_Delay(1000);
 8003ce4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003ce8:	f002 fe2c 	bl	8006944 <HAL_Delay>

		//// disable UART, disable after endboot, prevent misunderstanding when GPIO test
		//gpio_BL_UART_Deactivate();

		k_flag.cnt = 0;//// prevent over state jump
 8003cec:	4b14      	ldr	r3, [pc, #80]	; (8003d40 <GrandState_Verita+0x1160>)
 8003cee:	2200      	movs	r2, #0
 8003cf0:	709a      	strb	r2, [r3, #2]
		if(gScr.fullflag == ff_runfull){
 8003cf2:	4b14      	ldr	r3, [pc, #80]	; (8003d44 <GrandState_Verita+0x1164>)
 8003cf4:	781b      	ldrb	r3, [r3, #0]
 8003cf6:	2b03      	cmp	r3, #3
 8003cf8:	d10b      	bne.n	8003d12 <GrandState_Verita+0x1132>
			GrandState = pre_gpio_chk;
 8003cfa:	4b13      	ldr	r3, [pc, #76]	; (8003d48 <GrandState_Verita+0x1168>)
 8003cfc:	220d      	movs	r2, #13
 8003cfe:	701a      	strb	r2, [r3, #0]
			//// wait for gpio_chk before tomeout ////
			gScr.timelog = HAL_GetTick() + 3500;
 8003d00:	f002 fe14 	bl	800692c <HAL_GetTick>
 8003d04:	4603      	mov	r3, r0
 8003d06:	f603 53ac 	addw	r3, r3, #3500	; 0xdac
 8003d0a:	4a0e      	ldr	r2, [pc, #56]	; (8003d44 <GrandState_Verita+0x1164>)
 8003d0c:	6053      	str	r3, [r2, #4]
		}else{
			GrandState = pre_fw_lob;
		}

		break; ////s_bootloader
 8003d0e:	f001 b87a 	b.w	8004e06 <GrandState_Verita+0x2226>
			GrandState = pre_fw_lob;
 8003d12:	4b0d      	ldr	r3, [pc, #52]	; (8003d48 <GrandState_Verita+0x1168>)
 8003d14:	2205      	movs	r2, #5
 8003d16:	701a      	strb	r2, [r3, #0]
		break; ////s_bootloader
 8003d18:	f001 b875 	b.w	8004e06 <GrandState_Verita+0x2226>
 8003d1c:	20000230 	.word	0x20000230
 8003d20:	08010038 	.word	0x08010038
 8003d24:	20000780 	.word	0x20000780
 8003d28:	20000004 	.word	0x20000004
 8003d2c:	0803008c 	.word	0x0803008c
 8003d30:	2000058c 	.word	0x2000058c
 8003d34:	20000240 	.word	0x20000240
 8003d38:	0801003c 	.word	0x0801003c
 8003d3c:	08010044 	.word	0x08010044
 8003d40:	20000890 	.word	0x20000890
 8003d44:	20000894 	.word	0x20000894
 8003d48:	20000006 	.word	0x20000006

	case pre_gpio_chk:
			stboxp.choice_set = bpoxy_def;
 8003d4c:	4bac      	ldr	r3, [pc, #688]	; (8004000 <GrandState_Verita+0x1420>)
 8003d4e:	2200      	movs	r2, #0
 8003d50:	705a      	strb	r2, [r3, #1]
			//// Send CMD to client to run GPIO testscript
			Tx_UART_Verita_Command(&huart6, VRC_Flag_ger, VRF_GPIO_Runalltest);
 8003d52:	2202      	movs	r2, #2
 8003d54:	21a1      	movs	r1, #161	; 0xa1
 8003d56:	48ab      	ldr	r0, [pc, #684]	; (8004004 <GrandState_Verita+0x1424>)
 8003d58:	f7fd fc6a 	bl	8001630 <Tx_UART_Verita_Command>

			//// Set UI
			ili9341_FillRect(0, 0, 320, 30, cl_DARKCYAN);
 8003d5c:	f240 33ef 	movw	r3, #1007	; 0x3ef
 8003d60:	9300      	str	r3, [sp, #0]
 8003d62:	231e      	movs	r3, #30
 8003d64:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003d68:	2100      	movs	r1, #0
 8003d6a:	2000      	movs	r0, #0
 8003d6c:	f001 ff5c 	bl	8005c28 <ili9341_FillRect>
			ili9341_FillRect(0, 30, 320, 210, cl_BLACK);
 8003d70:	2300      	movs	r3, #0
 8003d72:	9300      	str	r3, [sp, #0]
 8003d74:	23d2      	movs	r3, #210	; 0xd2
 8003d76:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003d7a:	211e      	movs	r1, #30
 8003d7c:	2000      	movs	r0, #0
 8003d7e:	f001 ff53 	bl	8005c28 <ili9341_FillRect>

			ili9341_WriteStringNoBG(60, 5, "GPIO Selftest", Font20, cl_WHITE);
 8003d82:	4ba1      	ldr	r3, [pc, #644]	; (8004008 <GrandState_Verita+0x1428>)
 8003d84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d88:	9201      	str	r2, [sp, #4]
 8003d8a:	685a      	ldr	r2, [r3, #4]
 8003d8c:	9200      	str	r2, [sp, #0]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a9e      	ldr	r2, [pc, #632]	; (800400c <GrandState_Verita+0x142c>)
 8003d92:	2105      	movs	r1, #5
 8003d94:	203c      	movs	r0, #60	; 0x3c
 8003d96:	f002 f93d 	bl	8006014 <ili9341_WriteStringNoBG>

			if(gScr.fullflag == ff_runfull){
 8003d9a:	4b9d      	ldr	r3, [pc, #628]	; (8004010 <GrandState_Verita+0x1430>)
 8003d9c:	781b      	ldrb	r3, [r3, #0]
 8003d9e:	2b03      	cmp	r3, #3
 8003da0:	d112      	bne.n	8003dc8 <GrandState_Verita+0x11e8>
				sprintf(TextDispBuffer,"FULL"); ili9341_WriteString(250, 5, TextDispBuffer, Font20, cl_RED, cl_YELLOW);
 8003da2:	499c      	ldr	r1, [pc, #624]	; (8004014 <GrandState_Verita+0x1434>)
 8003da4:	489c      	ldr	r0, [pc, #624]	; (8004018 <GrandState_Verita+0x1438>)
 8003da6:	f009 fcd1 	bl	800d74c <siprintf>
 8003daa:	4b97      	ldr	r3, [pc, #604]	; (8004008 <GrandState_Verita+0x1428>)
 8003dac:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8003db0:	9202      	str	r2, [sp, #8]
 8003db2:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8003db6:	9201      	str	r2, [sp, #4]
 8003db8:	685a      	ldr	r2, [r3, #4]
 8003dba:	9200      	str	r2, [sp, #0]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a96      	ldr	r2, [pc, #600]	; (8004018 <GrandState_Verita+0x1438>)
 8003dc0:	2105      	movs	r1, #5
 8003dc2:	20fa      	movs	r0, #250	; 0xfa
 8003dc4:	f002 f8d9 	bl	8005f7a <ili9341_WriteString>

//			ili9341_WriteStringNoBG(15, 50, "PUR:", Font20, cl_WHITE);
//			ili9341_WriteStringNoBG(15, 85, "PP:", Font20, cl_WHITE);
//			ili9341_WriteStringNoBG(15, 120, "OD:", Font20, cl_WHITE);

			ili9341_WriteStringNoBG(250, 175, "MCU Temp:", Font12, cl_WHITE);
 8003dc8:	4b94      	ldr	r3, [pc, #592]	; (800401c <GrandState_Verita+0x143c>)
 8003dca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003dce:	9201      	str	r2, [sp, #4]
 8003dd0:	685a      	ldr	r2, [r3, #4]
 8003dd2:	9200      	str	r2, [sp, #0]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a92      	ldr	r2, [pc, #584]	; (8004020 <GrandState_Verita+0x1440>)
 8003dd8:	21af      	movs	r1, #175	; 0xaf
 8003dda:	20fa      	movs	r0, #250	; 0xfa
 8003ddc:	f002 f91a 	bl	8006014 <ili9341_WriteStringNoBG>
			ili9341_WriteStringNoBG(250, 210, "FWID:", Font12, cl_WHITE);
 8003de0:	4b8e      	ldr	r3, [pc, #568]	; (800401c <GrandState_Verita+0x143c>)
 8003de2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003de6:	9201      	str	r2, [sp, #4]
 8003de8:	685a      	ldr	r2, [r3, #4]
 8003dea:	9200      	str	r2, [sp, #0]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a8d      	ldr	r2, [pc, #564]	; (8004024 <GrandState_Verita+0x1444>)
 8003df0:	21d2      	movs	r1, #210	; 0xd2
 8003df2:	20fa      	movs	r0, #250	; 0xfa
 8003df4:	f002 f90e 	bl	8006014 <ili9341_WriteStringNoBG>
			ili9341_WriteStringNoBG(30, 220, "Finish >> ", Font16, cl_GREENYELLOW);
 8003df8:	4b8b      	ldr	r3, [pc, #556]	; (8004028 <GrandState_Verita+0x1448>)
 8003dfa:	f64a 72e5 	movw	r2, #45029	; 0xafe5
 8003dfe:	9201      	str	r2, [sp, #4]
 8003e00:	685a      	ldr	r2, [r3, #4]
 8003e02:	9200      	str	r2, [sp, #0]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a89      	ldr	r2, [pc, #548]	; (800402c <GrandState_Verita+0x144c>)
 8003e08:	21dc      	movs	r1, #220	; 0xdc
 8003e0a:	201e      	movs	r0, #30
 8003e0c:	f002 f902 	bl	8006014 <ili9341_WriteStringNoBG>


			//// checkif GPIO test is finished ?  || HAL_GetTick() >= gScr.timelog
			if(VRB_CL.Mark.Flag_next){ // runalltest cplt
 8003e10:	4b87      	ldr	r3, [pc, #540]	; (8004030 <GrandState_Verita+0x1450>)
 8003e12:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	f000 8168 	beq.w	80040ec <GrandState_Verita+0x150c>
				Tx_UART_Verita_Command(&huart6, VRC_Flag_ger, VRF_SendALLTestData);
 8003e1c:	2204      	movs	r2, #4
 8003e1e:	21a1      	movs	r1, #161	; 0xa1
 8003e20:	4878      	ldr	r0, [pc, #480]	; (8004004 <GrandState_Verita+0x1424>)
 8003e22:	f7fd fc05 	bl	8001630 <Tx_UART_Verita_Command>
				HAL_Delay(100);
 8003e26:	2064      	movs	r0, #100	; 0x64
 8003e28:	f002 fd8c 	bl	8006944 <HAL_Delay>

				if(VRB_CL.Mark.Flag_ger == VRF_SendALLTestData){ //// 'll send this flag back after cplt
 8003e2c:	4b80      	ldr	r3, [pc, #512]	; (8004030 <GrandState_Verita+0x1450>)
 8003e2e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8003e32:	2b04      	cmp	r3, #4
 8003e34:	f040 813f 	bne.w	80040b6 <GrandState_Verita+0x14d6>

					resetgpio_char();
 8003e38:	f001 f874 	bl	8004f24 <resetgpio_char>

					Compare_pin_32(VRB_CL.Mark.PA_PUPDR, List_GPIOA, 0, WR_A_PUPDR);
 8003e3c:	4b7c      	ldr	r3, [pc, #496]	; (8004030 <GrandState_Verita+0x1450>)
 8003e3e:	6858      	ldr	r0, [r3, #4]
 8003e40:	4b7c      	ldr	r3, [pc, #496]	; (8004034 <GrandState_Verita+0x1454>)
 8003e42:	2200      	movs	r2, #0
 8003e44:	497c      	ldr	r1, [pc, #496]	; (8004038 <GrandState_Verita+0x1458>)
 8003e46:	f7fe fd1d 	bl	8002884 <Compare_pin_32>
					Compare_pin_32(VRB_CL.Mark.PA_OUT_PP, List_GPIOA, 0, WR_A_OPP);
 8003e4a:	4b79      	ldr	r3, [pc, #484]	; (8004030 <GrandState_Verita+0x1450>)
 8003e4c:	6898      	ldr	r0, [r3, #8]
 8003e4e:	4b7b      	ldr	r3, [pc, #492]	; (800403c <GrandState_Verita+0x145c>)
 8003e50:	2200      	movs	r2, #0
 8003e52:	4979      	ldr	r1, [pc, #484]	; (8004038 <GrandState_Verita+0x1458>)
 8003e54:	f7fe fd16 	bl	8002884 <Compare_pin_32>
					Compare_pin_32(VRB_CL.Mark.PA_OUT_OD, List_GPIOA, 0, WR_A_OOD);
 8003e58:	4b75      	ldr	r3, [pc, #468]	; (8004030 <GrandState_Verita+0x1450>)
 8003e5a:	68d8      	ldr	r0, [r3, #12]
 8003e5c:	4b78      	ldr	r3, [pc, #480]	; (8004040 <GrandState_Verita+0x1460>)
 8003e5e:	2200      	movs	r2, #0
 8003e60:	4975      	ldr	r1, [pc, #468]	; (8004038 <GrandState_Verita+0x1458>)
 8003e62:	f7fe fd0f 	bl	8002884 <Compare_pin_32>

					Compare_pin_32(VRB_CL.Mark.PB_PUPDR, List_GPIOB, 1,  WR_B_PUPDR);
 8003e66:	4b72      	ldr	r3, [pc, #456]	; (8004030 <GrandState_Verita+0x1450>)
 8003e68:	6918      	ldr	r0, [r3, #16]
 8003e6a:	4b76      	ldr	r3, [pc, #472]	; (8004044 <GrandState_Verita+0x1464>)
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	4976      	ldr	r1, [pc, #472]	; (8004048 <GrandState_Verita+0x1468>)
 8003e70:	f7fe fd08 	bl	8002884 <Compare_pin_32>
					Compare_pin_32(VRB_CL.Mark.PB_OUT_PP, List_GPIOB, 1, WR_B_OPP);
 8003e74:	4b6e      	ldr	r3, [pc, #440]	; (8004030 <GrandState_Verita+0x1450>)
 8003e76:	6958      	ldr	r0, [r3, #20]
 8003e78:	4b74      	ldr	r3, [pc, #464]	; (800404c <GrandState_Verita+0x146c>)
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	4972      	ldr	r1, [pc, #456]	; (8004048 <GrandState_Verita+0x1468>)
 8003e7e:	f7fe fd01 	bl	8002884 <Compare_pin_32>
					Compare_pin_32(VRB_CL.Mark.PB_OUT_OD, List_GPIOB, 1, WR_B_OOD);
 8003e82:	4b6b      	ldr	r3, [pc, #428]	; (8004030 <GrandState_Verita+0x1450>)
 8003e84:	6998      	ldr	r0, [r3, #24]
 8003e86:	4b72      	ldr	r3, [pc, #456]	; (8004050 <GrandState_Verita+0x1470>)
 8003e88:	2201      	movs	r2, #1
 8003e8a:	496f      	ldr	r1, [pc, #444]	; (8004048 <GrandState_Verita+0x1468>)
 8003e8c:	f7fe fcfa 	bl	8002884 <Compare_pin_32>

					Compare_pin_32(VRB_CL.Mark.PC_PUPDR, List_GPIOC, 2, WR_C_PUPDR);
 8003e90:	4b67      	ldr	r3, [pc, #412]	; (8004030 <GrandState_Verita+0x1450>)
 8003e92:	69d8      	ldr	r0, [r3, #28]
 8003e94:	4b6f      	ldr	r3, [pc, #444]	; (8004054 <GrandState_Verita+0x1474>)
 8003e96:	2202      	movs	r2, #2
 8003e98:	496f      	ldr	r1, [pc, #444]	; (8004058 <GrandState_Verita+0x1478>)
 8003e9a:	f7fe fcf3 	bl	8002884 <Compare_pin_32>
					Compare_pin_32(VRB_CL.Mark.PC_OUT_PP, List_GPIOC, 2, WR_C_OPP);
 8003e9e:	4b64      	ldr	r3, [pc, #400]	; (8004030 <GrandState_Verita+0x1450>)
 8003ea0:	6a18      	ldr	r0, [r3, #32]
 8003ea2:	4b6e      	ldr	r3, [pc, #440]	; (800405c <GrandState_Verita+0x147c>)
 8003ea4:	2202      	movs	r2, #2
 8003ea6:	496c      	ldr	r1, [pc, #432]	; (8004058 <GrandState_Verita+0x1478>)
 8003ea8:	f7fe fcec 	bl	8002884 <Compare_pin_32>
					Compare_pin_32(VRB_CL.Mark.PC_OUT_OD, List_GPIOC, 2, WR_C_OOD);
 8003eac:	4b60      	ldr	r3, [pc, #384]	; (8004030 <GrandState_Verita+0x1450>)
 8003eae:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003eb0:	4b6b      	ldr	r3, [pc, #428]	; (8004060 <GrandState_Verita+0x1480>)
 8003eb2:	2202      	movs	r2, #2
 8003eb4:	4968      	ldr	r1, [pc, #416]	; (8004058 <GrandState_Verita+0x1478>)
 8003eb6:	f7fe fce5 	bl	8002884 <Compare_pin_32>

					HAL_Delay(5);
 8003eba:	2005      	movs	r0, #5
 8003ebc:	f002 fd42 	bl	8006944 <HAL_Delay>

					CheckAllPass();
 8003ec0:	f7fe fd9a 	bl	80029f8 <CheckAllPass>
					if(cnt_allpass >= 9){
 8003ec4:	4b67      	ldr	r3, [pc, #412]	; (8004064 <GrandState_Verita+0x1484>)
 8003ec6:	781b      	ldrb	r3, [r3, #0]
 8003ec8:	2b08      	cmp	r3, #8
 8003eca:	d91f      	bls.n	8003f0c <GrandState_Verita+0x132c>
						  //// there're 9 pass
						  sprintf(TextDispBuffer, "ALL");
 8003ecc:	4966      	ldr	r1, [pc, #408]	; (8004068 <GrandState_Verita+0x1488>)
 8003ece:	4852      	ldr	r0, [pc, #328]	; (8004018 <GrandState_Verita+0x1438>)
 8003ed0:	f009 fc3c 	bl	800d74c <siprintf>
						  ili9341_WriteStringNoBG(205, 80, TextDispBuffer, Font20, cl_GREEN);
 8003ed4:	4b4c      	ldr	r3, [pc, #304]	; (8004008 <GrandState_Verita+0x1428>)
 8003ed6:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8003eda:	9201      	str	r2, [sp, #4]
 8003edc:	685a      	ldr	r2, [r3, #4]
 8003ede:	9200      	str	r2, [sp, #0]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a4d      	ldr	r2, [pc, #308]	; (8004018 <GrandState_Verita+0x1438>)
 8003ee4:	2150      	movs	r1, #80	; 0x50
 8003ee6:	20cd      	movs	r0, #205	; 0xcd
 8003ee8:	f002 f894 	bl	8006014 <ili9341_WriteStringNoBG>

						  sprintf(TextDispBuffer, "PASS");
 8003eec:	495f      	ldr	r1, [pc, #380]	; (800406c <GrandState_Verita+0x148c>)
 8003eee:	484a      	ldr	r0, [pc, #296]	; (8004018 <GrandState_Verita+0x1438>)
 8003ef0:	f009 fc2c 	bl	800d74c <siprintf>
						  ili9341_WriteStringNoBG(200, 110, TextDispBuffer, Font20, cl_GREEN);
 8003ef4:	4b44      	ldr	r3, [pc, #272]	; (8004008 <GrandState_Verita+0x1428>)
 8003ef6:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8003efa:	9201      	str	r2, [sp, #4]
 8003efc:	685a      	ldr	r2, [r3, #4]
 8003efe:	9200      	str	r2, [sp, #0]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a45      	ldr	r2, [pc, #276]	; (8004018 <GrandState_Verita+0x1438>)
 8003f04:	216e      	movs	r1, #110	; 0x6e
 8003f06:	20c8      	movs	r0, #200	; 0xc8
 8003f08:	f002 f884 	bl	8006014 <ili9341_WriteStringNoBG>
					 }else{}

					 sprintf(TextDispBuffer, WR_A_PUPDR); ili9341_WriteStringNoBG(10, 35, TextDispBuffer, Font16, cl_WHITE);
 8003f0c:	4949      	ldr	r1, [pc, #292]	; (8004034 <GrandState_Verita+0x1454>)
 8003f0e:	4842      	ldr	r0, [pc, #264]	; (8004018 <GrandState_Verita+0x1438>)
 8003f10:	f009 fc1c 	bl	800d74c <siprintf>
 8003f14:	4b44      	ldr	r3, [pc, #272]	; (8004028 <GrandState_Verita+0x1448>)
 8003f16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f1a:	9201      	str	r2, [sp, #4]
 8003f1c:	685a      	ldr	r2, [r3, #4]
 8003f1e:	9200      	str	r2, [sp, #0]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a3d      	ldr	r2, [pc, #244]	; (8004018 <GrandState_Verita+0x1438>)
 8003f24:	2123      	movs	r1, #35	; 0x23
 8003f26:	200a      	movs	r0, #10
 8003f28:	f002 f874 	bl	8006014 <ili9341_WriteStringNoBG>

					 sprintf(TextDispBuffer, WR_A_OPP); ili9341_WriteStringNoBG(10, 55, TextDispBuffer, Font16, cl_WHITE);
 8003f2c:	4943      	ldr	r1, [pc, #268]	; (800403c <GrandState_Verita+0x145c>)
 8003f2e:	483a      	ldr	r0, [pc, #232]	; (8004018 <GrandState_Verita+0x1438>)
 8003f30:	f009 fc0c 	bl	800d74c <siprintf>
 8003f34:	4b3c      	ldr	r3, [pc, #240]	; (8004028 <GrandState_Verita+0x1448>)
 8003f36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f3a:	9201      	str	r2, [sp, #4]
 8003f3c:	685a      	ldr	r2, [r3, #4]
 8003f3e:	9200      	str	r2, [sp, #0]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a35      	ldr	r2, [pc, #212]	; (8004018 <GrandState_Verita+0x1438>)
 8003f44:	2137      	movs	r1, #55	; 0x37
 8003f46:	200a      	movs	r0, #10
 8003f48:	f002 f864 	bl	8006014 <ili9341_WriteStringNoBG>

					 sprintf(TextDispBuffer, WR_A_OOD); ili9341_WriteStringNoBG(10, 75, TextDispBuffer, Font16, cl_WHITE);
 8003f4c:	493c      	ldr	r1, [pc, #240]	; (8004040 <GrandState_Verita+0x1460>)
 8003f4e:	4832      	ldr	r0, [pc, #200]	; (8004018 <GrandState_Verita+0x1438>)
 8003f50:	f009 fbfc 	bl	800d74c <siprintf>
 8003f54:	4b34      	ldr	r3, [pc, #208]	; (8004028 <GrandState_Verita+0x1448>)
 8003f56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f5a:	9201      	str	r2, [sp, #4]
 8003f5c:	685a      	ldr	r2, [r3, #4]
 8003f5e:	9200      	str	r2, [sp, #0]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a2d      	ldr	r2, [pc, #180]	; (8004018 <GrandState_Verita+0x1438>)
 8003f64:	214b      	movs	r1, #75	; 0x4b
 8003f66:	200a      	movs	r0, #10
 8003f68:	f002 f854 	bl	8006014 <ili9341_WriteStringNoBG>

					 sprintf(TextDispBuffer, WR_B_PUPDR); ili9341_WriteStringNoBG(10, 95, TextDispBuffer, Font16, cl_WHITE);
 8003f6c:	4935      	ldr	r1, [pc, #212]	; (8004044 <GrandState_Verita+0x1464>)
 8003f6e:	482a      	ldr	r0, [pc, #168]	; (8004018 <GrandState_Verita+0x1438>)
 8003f70:	f009 fbec 	bl	800d74c <siprintf>
 8003f74:	4b2c      	ldr	r3, [pc, #176]	; (8004028 <GrandState_Verita+0x1448>)
 8003f76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f7a:	9201      	str	r2, [sp, #4]
 8003f7c:	685a      	ldr	r2, [r3, #4]
 8003f7e:	9200      	str	r2, [sp, #0]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a25      	ldr	r2, [pc, #148]	; (8004018 <GrandState_Verita+0x1438>)
 8003f84:	215f      	movs	r1, #95	; 0x5f
 8003f86:	200a      	movs	r0, #10
 8003f88:	f002 f844 	bl	8006014 <ili9341_WriteStringNoBG>

					 sprintf(TextDispBuffer, WR_B_OPP); ili9341_WriteStringNoBG(10, 115, TextDispBuffer, Font16, cl_WHITE);
 8003f8c:	492f      	ldr	r1, [pc, #188]	; (800404c <GrandState_Verita+0x146c>)
 8003f8e:	4822      	ldr	r0, [pc, #136]	; (8004018 <GrandState_Verita+0x1438>)
 8003f90:	f009 fbdc 	bl	800d74c <siprintf>
 8003f94:	4b24      	ldr	r3, [pc, #144]	; (8004028 <GrandState_Verita+0x1448>)
 8003f96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f9a:	9201      	str	r2, [sp, #4]
 8003f9c:	685a      	ldr	r2, [r3, #4]
 8003f9e:	9200      	str	r2, [sp, #0]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a1d      	ldr	r2, [pc, #116]	; (8004018 <GrandState_Verita+0x1438>)
 8003fa4:	2173      	movs	r1, #115	; 0x73
 8003fa6:	200a      	movs	r0, #10
 8003fa8:	f002 f834 	bl	8006014 <ili9341_WriteStringNoBG>

					 sprintf(TextDispBuffer, WR_B_OOD); ili9341_WriteStringNoBG(10, 135, TextDispBuffer, Font16, cl_WHITE);
 8003fac:	4928      	ldr	r1, [pc, #160]	; (8004050 <GrandState_Verita+0x1470>)
 8003fae:	481a      	ldr	r0, [pc, #104]	; (8004018 <GrandState_Verita+0x1438>)
 8003fb0:	f009 fbcc 	bl	800d74c <siprintf>
 8003fb4:	4b1c      	ldr	r3, [pc, #112]	; (8004028 <GrandState_Verita+0x1448>)
 8003fb6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003fba:	9201      	str	r2, [sp, #4]
 8003fbc:	685a      	ldr	r2, [r3, #4]
 8003fbe:	9200      	str	r2, [sp, #0]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a15      	ldr	r2, [pc, #84]	; (8004018 <GrandState_Verita+0x1438>)
 8003fc4:	2187      	movs	r1, #135	; 0x87
 8003fc6:	200a      	movs	r0, #10
 8003fc8:	f002 f824 	bl	8006014 <ili9341_WriteStringNoBG>

					 sprintf(TextDispBuffer, WR_C_PUPDR); ili9341_WriteStringNoBG(10, 155, TextDispBuffer, Font16, cl_WHITE);
 8003fcc:	4921      	ldr	r1, [pc, #132]	; (8004054 <GrandState_Verita+0x1474>)
 8003fce:	4812      	ldr	r0, [pc, #72]	; (8004018 <GrandState_Verita+0x1438>)
 8003fd0:	f009 fbbc 	bl	800d74c <siprintf>
 8003fd4:	4b14      	ldr	r3, [pc, #80]	; (8004028 <GrandState_Verita+0x1448>)
 8003fd6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003fda:	9201      	str	r2, [sp, #4]
 8003fdc:	685a      	ldr	r2, [r3, #4]
 8003fde:	9200      	str	r2, [sp, #0]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a0d      	ldr	r2, [pc, #52]	; (8004018 <GrandState_Verita+0x1438>)
 8003fe4:	219b      	movs	r1, #155	; 0x9b
 8003fe6:	200a      	movs	r0, #10
 8003fe8:	f002 f814 	bl	8006014 <ili9341_WriteStringNoBG>

					 sprintf(TextDispBuffer, WR_C_OPP); ili9341_WriteStringNoBG(10, 175, TextDispBuffer, Font16, cl_WHITE);
 8003fec:	491b      	ldr	r1, [pc, #108]	; (800405c <GrandState_Verita+0x147c>)
 8003fee:	480a      	ldr	r0, [pc, #40]	; (8004018 <GrandState_Verita+0x1438>)
 8003ff0:	f009 fbac 	bl	800d74c <siprintf>
 8003ff4:	4b0c      	ldr	r3, [pc, #48]	; (8004028 <GrandState_Verita+0x1448>)
 8003ff6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ffa:	9201      	str	r2, [sp, #4]
 8003ffc:	e038      	b.n	8004070 <GrandState_Verita+0x1490>
 8003ffe:	bf00      	nop
 8004000:	200008ac 	.word	0x200008ac
 8004004:	20000614 	.word	0x20000614
 8004008:	20000238 	.word	0x20000238
 800400c:	0801004c 	.word	0x0801004c
 8004010:	20000894 	.word	0x20000894
 8004014:	0800fee8 	.word	0x0800fee8
 8004018:	200006b8 	.word	0x200006b8
 800401c:	20000228 	.word	0x20000228
 8004020:	0801005c 	.word	0x0801005c
 8004024:	08010068 	.word	0x08010068
 8004028:	20000230 	.word	0x20000230
 800402c:	08010070 	.word	0x08010070
 8004030:	20000784 	.word	0x20000784
 8004034:	2000005c 	.word	0x2000005c
 8004038:	20000008 	.word	0x20000008
 800403c:	200000bc 	.word	0x200000bc
 8004040:	2000011c 	.word	0x2000011c
 8004044:	2000007c 	.word	0x2000007c
 8004048:	2000001c 	.word	0x2000001c
 800404c:	200000dc 	.word	0x200000dc
 8004050:	2000013c 	.word	0x2000013c
 8004054:	2000009c 	.word	0x2000009c
 8004058:	2000003c 	.word	0x2000003c
 800405c:	200000fc 	.word	0x200000fc
 8004060:	2000015c 	.word	0x2000015c
 8004064:	200008a6 	.word	0x200008a6
 8004068:	0801007c 	.word	0x0801007c
 800406c:	0800ff68 	.word	0x0800ff68
 8004070:	685a      	ldr	r2, [r3, #4]
 8004072:	9200      	str	r2, [sp, #0]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a77      	ldr	r2, [pc, #476]	; (8004254 <GrandState_Verita+0x1674>)
 8004078:	21af      	movs	r1, #175	; 0xaf
 800407a:	200a      	movs	r0, #10
 800407c:	f001 ffca 	bl	8006014 <ili9341_WriteStringNoBG>

					 sprintf(TextDispBuffer, WR_C_OOD); ili9341_WriteStringNoBG(10, 195, TextDispBuffer, Font16, cl_WHITE);
 8004080:	4975      	ldr	r1, [pc, #468]	; (8004258 <GrandState_Verita+0x1678>)
 8004082:	4874      	ldr	r0, [pc, #464]	; (8004254 <GrandState_Verita+0x1674>)
 8004084:	f009 fb62 	bl	800d74c <siprintf>
 8004088:	4b74      	ldr	r3, [pc, #464]	; (800425c <GrandState_Verita+0x167c>)
 800408a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800408e:	9201      	str	r2, [sp, #4]
 8004090:	685a      	ldr	r2, [r3, #4]
 8004092:	9200      	str	r2, [sp, #0]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a6f      	ldr	r2, [pc, #444]	; (8004254 <GrandState_Verita+0x1674>)
 8004098:	21c3      	movs	r1, #195	; 0xc3
 800409a:	200a      	movs	r0, #10
 800409c:	f001 ffba 	bl	8006014 <ili9341_WriteStringNoBG>

					VRB_CL.Mark.Flag_ger = 0;
 80040a0:	4b6f      	ldr	r3, [pc, #444]	; (8004260 <GrandState_Verita+0x1680>)
 80040a2:	2200      	movs	r2, #0
 80040a4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
					VRB_CL.Mark.Flag_next = 0;
 80040a8:	4b6d      	ldr	r3, [pc, #436]	; (8004260 <GrandState_Verita+0x1680>)
 80040aa:	2200      	movs	r2, #0
 80040ac:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
					GrandState = gpio_chk;
 80040b0:	4b6c      	ldr	r3, [pc, #432]	; (8004264 <GrandState_Verita+0x1684>)
 80040b2:	220e      	movs	r2, #14
 80040b4:	701a      	strb	r2, [r3, #0]
				}

				//// Buzzer scream
				buzzr.flag = 3;
 80040b6:	4b6c      	ldr	r3, [pc, #432]	; (8004268 <GrandState_Verita+0x1688>)
 80040b8:	2203      	movs	r2, #3
 80040ba:	701a      	strb	r2, [r3, #0]
				buzzr.priod_up = 300;
 80040bc:	4b6a      	ldr	r3, [pc, #424]	; (8004268 <GrandState_Verita+0x1688>)
 80040be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80040c2:	805a      	strh	r2, [r3, #2]
				buzzer_scream_cnt();
 80040c4:	f7fe fd14 	bl	8002af0 <buzzer_scream_cnt>

				////soft reset
				HAL_GPIO_WritePin(client_NRST_GPIO_Port, client_NRST_Pin, GPIO_PIN_SET);
 80040c8:	2201      	movs	r2, #1
 80040ca:	2140      	movs	r1, #64	; 0x40
 80040cc:	4867      	ldr	r0, [pc, #412]	; (800426c <GrandState_Verita+0x168c>)
 80040ce:	f003 fb1b 	bl	8007708 <HAL_GPIO_WritePin>
				HAL_Delay(300);
 80040d2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80040d6:	f002 fc35 	bl	8006944 <HAL_Delay>
				HAL_GPIO_WritePin(client_NRST_GPIO_Port, client_NRST_Pin, GPIO_PIN_RESET);
 80040da:	2200      	movs	r2, #0
 80040dc:	2140      	movs	r1, #64	; 0x40
 80040de:	4863      	ldr	r0, [pc, #396]	; (800426c <GrandState_Verita+0x168c>)
 80040e0:	f003 fb12 	bl	8007708 <HAL_GPIO_WritePin>

				GrandState = gpio_chk;
 80040e4:	4b5f      	ldr	r3, [pc, #380]	; (8004264 <GrandState_Verita+0x1684>)
 80040e6:	220e      	movs	r2, #14
 80040e8:	701a      	strb	r2, [r3, #0]
 80040ea:	e031      	b.n	8004150 <GrandState_Verita+0x1570>
			}
			else if(HAL_GetTick() >= gScr.timelog){ //timeout connection
 80040ec:	f002 fc1e 	bl	800692c <HAL_GetTick>
 80040f0:	4602      	mov	r2, r0
 80040f2:	4b5f      	ldr	r3, [pc, #380]	; (8004270 <GrandState_Verita+0x1690>)
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d32a      	bcc.n	8004150 <GrandState_Verita+0x1570>

				sprintf(TextDispBuffer,"Connection");
 80040fa:	495e      	ldr	r1, [pc, #376]	; (8004274 <GrandState_Verita+0x1694>)
 80040fc:	4855      	ldr	r0, [pc, #340]	; (8004254 <GrandState_Verita+0x1674>)
 80040fe:	f009 fb25 	bl	800d74c <siprintf>
				ili9341_WriteStringNoBG(80, 50, TextDispBuffer, Font20, cl_WHITE);
 8004102:	4b5d      	ldr	r3, [pc, #372]	; (8004278 <GrandState_Verita+0x1698>)
 8004104:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004108:	9201      	str	r2, [sp, #4]
 800410a:	685a      	ldr	r2, [r3, #4]
 800410c:	9200      	str	r2, [sp, #0]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a50      	ldr	r2, [pc, #320]	; (8004254 <GrandState_Verita+0x1674>)
 8004112:	2132      	movs	r1, #50	; 0x32
 8004114:	2050      	movs	r0, #80	; 0x50
 8004116:	f001 ff7d 	bl	8006014 <ili9341_WriteStringNoBG>
				sprintf(TextDispBuffer,"Timeout");
 800411a:	4958      	ldr	r1, [pc, #352]	; (800427c <GrandState_Verita+0x169c>)
 800411c:	484d      	ldr	r0, [pc, #308]	; (8004254 <GrandState_Verita+0x1674>)
 800411e:	f009 fb15 	bl	800d74c <siprintf>
				ili9341_WriteStringNoBG(95, 75, TextDispBuffer, Font20, cl_WHITE);
 8004122:	4b55      	ldr	r3, [pc, #340]	; (8004278 <GrandState_Verita+0x1698>)
 8004124:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004128:	9201      	str	r2, [sp, #4]
 800412a:	685a      	ldr	r2, [r3, #4]
 800412c:	9200      	str	r2, [sp, #0]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a48      	ldr	r2, [pc, #288]	; (8004254 <GrandState_Verita+0x1674>)
 8004132:	214b      	movs	r1, #75	; 0x4b
 8004134:	205f      	movs	r0, #95	; 0x5f
 8004136:	f001 ff6d 	bl	8006014 <ili9341_WriteStringNoBG>
				VRB_CL.Mark.Flag_ger = 0;
 800413a:	4b49      	ldr	r3, [pc, #292]	; (8004260 <GrandState_Verita+0x1680>)
 800413c:	2200      	movs	r2, #0
 800413e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
				VRB_CL.Mark.Flag_next = 0;
 8004142:	4b47      	ldr	r3, [pc, #284]	; (8004260 <GrandState_Verita+0x1680>)
 8004144:	2200      	movs	r2, #0
 8004146:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
				GrandState = gpio_chk;
 800414a:	4b46      	ldr	r3, [pc, #280]	; (8004264 <GrandState_Verita+0x1684>)
 800414c:	220e      	movs	r2, #14
 800414e:	701a      	strb	r2, [r3, #0]
			}else{}

			k_flag.cnt = 0;
 8004150:	4b4b      	ldr	r3, [pc, #300]	; (8004280 <GrandState_Verita+0x16a0>)
 8004152:	2200      	movs	r2, #0
 8004154:	709a      	strb	r2, [r3, #2]
			break; //// pre_gpio_chk
 8004156:	f000 be56 	b.w	8004e06 <GrandState_Verita+0x2226>

		case gpio_chk:
			stboxp.choice_set = bpoxy_def;
 800415a:	4b4a      	ldr	r3, [pc, #296]	; (8004284 <GrandState_Verita+0x16a4>)
 800415c:	2200      	movs	r2, #0
 800415e:	705a      	strb	r2, [r3, #1]


			sprintf(TextDispBuffer,"%2.1f C", (client_temp_mcuCC < 0) ? 0 : client_temp_mcuCC);
 8004160:	4b49      	ldr	r3, [pc, #292]	; (8004288 <GrandState_Verita+0x16a8>)
 8004162:	edd3 7a00 	vldr	s15, [r3]
 8004166:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800416a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800416e:	d504      	bpl.n	800417a <GrandState_Verita+0x159a>
 8004170:	f04f 0200 	mov.w	r2, #0
 8004174:	f04f 0300 	mov.w	r3, #0
 8004178:	e006      	b.n	8004188 <GrandState_Verita+0x15a8>
 800417a:	4b43      	ldr	r3, [pc, #268]	; (8004288 <GrandState_Verita+0x16a8>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4618      	mov	r0, r3
 8004180:	f7fc f9ea 	bl	8000558 <__aeabi_f2d>
 8004184:	4602      	mov	r2, r0
 8004186:	460b      	mov	r3, r1
 8004188:	4940      	ldr	r1, [pc, #256]	; (800428c <GrandState_Verita+0x16ac>)
 800418a:	4832      	ldr	r0, [pc, #200]	; (8004254 <GrandState_Verita+0x1674>)
 800418c:	f009 fade 	bl	800d74c <siprintf>
			if(client_temp_mcuCC < MCUTemp_treash){
 8004190:	4b3d      	ldr	r3, [pc, #244]	; (8004288 <GrandState_Verita+0x16a8>)
 8004192:	edd3 7a00 	vldr	s15, [r3]
 8004196:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8004290 <GrandState_Verita+0x16b0>
 800419a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800419e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041a2:	d50e      	bpl.n	80041c2 <GrandState_Verita+0x15e2>
					ili9341_WriteString(250, 190, TextDispBuffer, Font16, cl_LIGHTGREY, cl_BLACK);
 80041a4:	4b2d      	ldr	r3, [pc, #180]	; (800425c <GrandState_Verita+0x167c>)
 80041a6:	2200      	movs	r2, #0
 80041a8:	9202      	str	r2, [sp, #8]
 80041aa:	f24c 6218 	movw	r2, #50712	; 0xc618
 80041ae:	9201      	str	r2, [sp, #4]
 80041b0:	685a      	ldr	r2, [r3, #4]
 80041b2:	9200      	str	r2, [sp, #0]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a27      	ldr	r2, [pc, #156]	; (8004254 <GrandState_Verita+0x1674>)
 80041b8:	21be      	movs	r1, #190	; 0xbe
 80041ba:	20fa      	movs	r0, #250	; 0xfa
 80041bc:	f001 fedd 	bl	8005f7a <ili9341_WriteString>
 80041c0:	e00d      	b.n	80041de <GrandState_Verita+0x15fe>
			}else{
					ili9341_WriteString(250, 190, TextDispBuffer, Font16, cl_RED, cl_BLACK);
 80041c2:	4b26      	ldr	r3, [pc, #152]	; (800425c <GrandState_Verita+0x167c>)
 80041c4:	2200      	movs	r2, #0
 80041c6:	9202      	str	r2, [sp, #8]
 80041c8:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80041cc:	9201      	str	r2, [sp, #4]
 80041ce:	685a      	ldr	r2, [r3, #4]
 80041d0:	9200      	str	r2, [sp, #0]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a1f      	ldr	r2, [pc, #124]	; (8004254 <GrandState_Verita+0x1674>)
 80041d6:	21be      	movs	r1, #190	; 0xbe
 80041d8:	20fa      	movs	r0, #250	; 0xfa
 80041da:	f001 fece 	bl	8005f7a <ili9341_WriteString>
			}

			sprintf(TextDispBuffer,"%08x", (uint)VRB_CL.Mark.FirmwareVer);
 80041de:	4b20      	ldr	r3, [pc, #128]	; (8004260 <GrandState_Verita+0x1680>)
 80041e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041e2:	461a      	mov	r2, r3
 80041e4:	492b      	ldr	r1, [pc, #172]	; (8004294 <GrandState_Verita+0x16b4>)
 80041e6:	481b      	ldr	r0, [pc, #108]	; (8004254 <GrandState_Verita+0x1674>)
 80041e8:	f009 fab0 	bl	800d74c <siprintf>
			ili9341_WriteStringNoBG(250, 225, TextDispBuffer, Font12, cl_WHITE);
 80041ec:	4b2a      	ldr	r3, [pc, #168]	; (8004298 <GrandState_Verita+0x16b8>)
 80041ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80041f2:	9201      	str	r2, [sp, #4]
 80041f4:	685a      	ldr	r2, [r3, #4]
 80041f6:	9200      	str	r2, [sp, #0]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a16      	ldr	r2, [pc, #88]	; (8004254 <GrandState_Verita+0x1674>)
 80041fc:	21e1      	movs	r1, #225	; 0xe1
 80041fe:	20fa      	movs	r0, #250	; 0xfa
 8004200:	f001 ff08 	bl	8006014 <ili9341_WriteStringNoBG>


			if(k_flag.cnt){ //// Back to lobby  // && stboxp.ch_is == 1
 8004204:	4b1e      	ldr	r3, [pc, #120]	; (8004280 <GrandState_Verita+0x16a0>)
 8004206:	789b      	ldrb	r3, [r3, #2]
 8004208:	2b00      	cmp	r3, #0
 800420a:	f000 85f1 	beq.w	8004df0 <GrandState_Verita+0x2210>
				if(gScr.fullflag != ff_runfull){
 800420e:	4b18      	ldr	r3, [pc, #96]	; (8004270 <GrandState_Verita+0x1690>)
 8004210:	781b      	ldrb	r3, [r3, #0]
 8004212:	2b03      	cmp	r3, #3
 8004214:	d003      	beq.n	800421e <GrandState_Verita+0x163e>
					GrandState = pre_fw_lob;
 8004216:	4b13      	ldr	r3, [pc, #76]	; (8004264 <GrandState_Verita+0x1684>)
 8004218:	2205      	movs	r2, #5
 800421a:	701a      	strb	r2, [r3, #0]
 800421c:	e002      	b.n	8004224 <GrandState_Verita+0x1644>
				}else{
					GrandState = pre_lobby;
 800421e:	4b11      	ldr	r3, [pc, #68]	; (8004264 <GrandState_Verita+0x1684>)
 8004220:	2201      	movs	r2, #1
 8004222:	701a      	strb	r2, [r3, #0]
				}

				k_flag.cnt = 0;
 8004224:	4b16      	ldr	r3, [pc, #88]	; (8004280 <GrandState_Verita+0x16a0>)
 8004226:	2200      	movs	r2, #0
 8004228:	709a      	strb	r2, [r3, #2]
				VRB_CL.Mark.FirmwareVer = 0x00; // clear if nextstep break
 800422a:	4b0d      	ldr	r3, [pc, #52]	; (8004260 <GrandState_Verita+0x1680>)
 800422c:	2200      	movs	r2, #0
 800422e:	649a      	str	r2, [r3, #72]	; 0x48
				VRB_CL.Mark.cputemp = 0; //// reset temp, prevent old data show
 8004230:	4b0b      	ldr	r3, [pc, #44]	; (8004260 <GrandState_Verita+0x1680>)
 8004232:	2200      	movs	r2, #0
 8004234:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
				resetgpio_char();
 8004238:	f000 fe74 	bl	8004f24 <resetgpio_char>

				//// Reset Verita PTC Buffer counter
				// n/a n/a
				////

				gScr.fullflag = 0;
 800423c:	4b0c      	ldr	r3, [pc, #48]	; (8004270 <GrandState_Verita+0x1690>)
 800423e:	2200      	movs	r2, #0
 8004240:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(RelayClient_GPIO_Port, RelayClient_Pin, GPIO_PIN_RESET);
 8004242:	2200      	movs	r2, #0
 8004244:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004248:	4808      	ldr	r0, [pc, #32]	; (800426c <GrandState_Verita+0x168c>)
 800424a:	f003 fa5d 	bl	8007708 <HAL_GPIO_WritePin>
				}
			break; //gpio_chk
 800424e:	f000 bdcf 	b.w	8004df0 <GrandState_Verita+0x2210>
 8004252:	bf00      	nop
 8004254:	200006b8 	.word	0x200006b8
 8004258:	2000015c 	.word	0x2000015c
 800425c:	20000230 	.word	0x20000230
 8004260:	20000784 	.word	0x20000784
 8004264:	20000006 	.word	0x20000006
 8004268:	20000878 	.word	0x20000878
 800426c:	40020800 	.word	0x40020800
 8004270:	20000894 	.word	0x20000894
 8004274:	08010080 	.word	0x08010080
 8004278:	20000238 	.word	0x20000238
 800427c:	0801008c 	.word	0x0801008c
 8004280:	20000890 	.word	0x20000890
 8004284:	200008ac 	.word	0x200008ac
 8004288:	200007f4 	.word	0x200007f4
 800428c:	08010094 	.word	0x08010094
 8004290:	42700000 	.word	0x42700000
 8004294:	0801009c 	.word	0x0801009c
 8004298:	20000228 	.word	0x20000228

	case pre_monitor:
		stboxp.choice_set = bpoxy_def;
 800429c:	4b96      	ldr	r3, [pc, #600]	; (80044f8 <GrandState_Verita+0x1918>)
 800429e:	2200      	movs	r2, #0
 80042a0:	705a      	strb	r2, [r3, #1]
		ili9341_FillRect(0, 30, 320, 210, cl_BLACK);
 80042a2:	2300      	movs	r3, #0
 80042a4:	9300      	str	r3, [sp, #0]
 80042a6:	23d2      	movs	r3, #210	; 0xd2
 80042a8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80042ac:	211e      	movs	r1, #30
 80042ae:	2000      	movs	r0, #0
 80042b0:	f001 fcba 	bl	8005c28 <ili9341_FillRect>
		ili9341_FillRect(0, 0, 320, 30, cl_BLUE);
 80042b4:	231f      	movs	r3, #31
 80042b6:	9300      	str	r3, [sp, #0]
 80042b8:	231e      	movs	r3, #30
 80042ba:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80042be:	2100      	movs	r1, #0
 80042c0:	2000      	movs	r0, #0
 80042c2:	f001 fcb1 	bl	8005c28 <ili9341_FillRect>

		//// Auto ON relay
		HAL_GPIO_WritePin(RelayClient_GPIO_Port, RelayClient_Pin, GPIO_PIN_SET);
 80042c6:	2201      	movs	r2, #1
 80042c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80042cc:	488b      	ldr	r0, [pc, #556]	; (80044fc <GrandState_Verita+0x191c>)
 80042ce:	f003 fa1b 	bl	8007708 <HAL_GPIO_WritePin>

		sprintf(TextDispBuffer,"PWR_Monitor");
 80042d2:	498b      	ldr	r1, [pc, #556]	; (8004500 <GrandState_Verita+0x1920>)
 80042d4:	488b      	ldr	r0, [pc, #556]	; (8004504 <GrandState_Verita+0x1924>)
 80042d6:	f009 fa39 	bl	800d74c <siprintf>
		ili9341_WriteStringNoBG(80, 5, TextDispBuffer, Font20, cl_WHITE);
 80042da:	4b8b      	ldr	r3, [pc, #556]	; (8004508 <GrandState_Verita+0x1928>)
 80042dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80042e0:	9201      	str	r2, [sp, #4]
 80042e2:	685a      	ldr	r2, [r3, #4]
 80042e4:	9200      	str	r2, [sp, #0]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a86      	ldr	r2, [pc, #536]	; (8004504 <GrandState_Verita+0x1924>)
 80042ea:	2105      	movs	r1, #5
 80042ec:	2050      	movs	r0, #80	; 0x50
 80042ee:	f001 fe91 	bl	8006014 <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"<-Back");
 80042f2:	4986      	ldr	r1, [pc, #536]	; (800450c <GrandState_Verita+0x192c>)
 80042f4:	4883      	ldr	r0, [pc, #524]	; (8004504 <GrandState_Verita+0x1924>)
 80042f6:	f009 fa29 	bl	800d74c <siprintf>
		ili9341_WriteStringNoBG(30, 220, TextDispBuffer, Font16, cl_WHITE);
 80042fa:	4b85      	ldr	r3, [pc, #532]	; (8004510 <GrandState_Verita+0x1930>)
 80042fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004300:	9201      	str	r2, [sp, #4]
 8004302:	685a      	ldr	r2, [r3, #4]
 8004304:	9200      	str	r2, [sp, #0]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a7e      	ldr	r2, [pc, #504]	; (8004504 <GrandState_Verita+0x1924>)
 800430a:	21dc      	movs	r1, #220	; 0xdc
 800430c:	201e      	movs	r0, #30
 800430e:	f001 fe81 	bl	8006014 <ili9341_WriteStringNoBG>

		//sprintf(TextDispBuffer,"calib:%4X", inata.Calibra);
		//ili9341_WriteString(20, 30, TextDispBuffer, Font12, cl_GREENYELLOW, cl_BLACK);

		sprintf(TextDispBuffer,"5Vin:");
 8004312:	4980      	ldr	r1, [pc, #512]	; (8004514 <GrandState_Verita+0x1934>)
 8004314:	487b      	ldr	r0, [pc, #492]	; (8004504 <GrandState_Verita+0x1924>)
 8004316:	f009 fa19 	bl	800d74c <siprintf>
		ili9341_WriteStringNoBG(15, 50, TextDispBuffer, Font16, cl_WHITE);
 800431a:	4b7d      	ldr	r3, [pc, #500]	; (8004510 <GrandState_Verita+0x1930>)
 800431c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004320:	9201      	str	r2, [sp, #4]
 8004322:	685a      	ldr	r2, [r3, #4]
 8004324:	9200      	str	r2, [sp, #0]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a76      	ldr	r2, [pc, #472]	; (8004504 <GrandState_Verita+0x1924>)
 800432a:	2132      	movs	r1, #50	; 0x32
 800432c:	200f      	movs	r0, #15
 800432e:	f001 fe71 	bl	8006014 <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"3V3:");
 8004332:	4979      	ldr	r1, [pc, #484]	; (8004518 <GrandState_Verita+0x1938>)
 8004334:	4873      	ldr	r0, [pc, #460]	; (8004504 <GrandState_Verita+0x1924>)
 8004336:	f009 fa09 	bl	800d74c <siprintf>
		ili9341_WriteStringNoBG(15, 75, TextDispBuffer, Font16, cl_WHITE);
 800433a:	4b75      	ldr	r3, [pc, #468]	; (8004510 <GrandState_Verita+0x1930>)
 800433c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004340:	9201      	str	r2, [sp, #4]
 8004342:	685a      	ldr	r2, [r3, #4]
 8004344:	9200      	str	r2, [sp, #0]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a6e      	ldr	r2, [pc, #440]	; (8004504 <GrandState_Verita+0x1924>)
 800434a:	214b      	movs	r1, #75	; 0x4b
 800434c:	200f      	movs	r0, #15
 800434e:	f001 fe61 	bl	8006014 <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"I MCU:");
 8004352:	4972      	ldr	r1, [pc, #456]	; (800451c <GrandState_Verita+0x193c>)
 8004354:	486b      	ldr	r0, [pc, #428]	; (8004504 <GrandState_Verita+0x1924>)
 8004356:	f009 f9f9 	bl	800d74c <siprintf>
		ili9341_WriteStringNoBG(15, 100, TextDispBuffer, Font16, cl_WHITE);
 800435a:	4b6d      	ldr	r3, [pc, #436]	; (8004510 <GrandState_Verita+0x1930>)
 800435c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004360:	9201      	str	r2, [sp, #4]
 8004362:	685a      	ldr	r2, [r3, #4]
 8004364:	9200      	str	r2, [sp, #0]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a66      	ldr	r2, [pc, #408]	; (8004504 <GrandState_Verita+0x1924>)
 800436a:	2164      	movs	r1, #100	; 0x64
 800436c:	200f      	movs	r0, #15
 800436e:	f001 fe51 	bl	8006014 <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"I Brd:");
 8004372:	496b      	ldr	r1, [pc, #428]	; (8004520 <GrandState_Verita+0x1940>)
 8004374:	4863      	ldr	r0, [pc, #396]	; (8004504 <GrandState_Verita+0x1924>)
 8004376:	f009 f9e9 	bl	800d74c <siprintf>
		ili9341_WriteStringNoBG(15, 125, TextDispBuffer, Font16, cl_WHITE);
 800437a:	4b65      	ldr	r3, [pc, #404]	; (8004510 <GrandState_Verita+0x1930>)
 800437c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004380:	9201      	str	r2, [sp, #4]
 8004382:	685a      	ldr	r2, [r3, #4]
 8004384:	9200      	str	r2, [sp, #0]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a5e      	ldr	r2, [pc, #376]	; (8004504 <GrandState_Verita+0x1924>)
 800438a:	217d      	movs	r1, #125	; 0x7d
 800438c:	200f      	movs	r0, #15
 800438e:	f001 fe41 	bl	8006014 <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"PWR");
 8004392:	4964      	ldr	r1, [pc, #400]	; (8004524 <GrandState_Verita+0x1944>)
 8004394:	485b      	ldr	r0, [pc, #364]	; (8004504 <GrandState_Verita+0x1924>)
 8004396:	f009 f9d9 	bl	800d74c <siprintf>
		ili9341_WriteStringNoBG(15, 150, TextDispBuffer, Font16, cl_WHITE);
 800439a:	4b5d      	ldr	r3, [pc, #372]	; (8004510 <GrandState_Verita+0x1930>)
 800439c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80043a0:	9201      	str	r2, [sp, #4]
 80043a2:	685a      	ldr	r2, [r3, #4]
 80043a4:	9200      	str	r2, [sp, #0]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a56      	ldr	r2, [pc, #344]	; (8004504 <GrandState_Verita+0x1924>)
 80043aa:	2196      	movs	r1, #150	; 0x96
 80043ac:	200f      	movs	r0, #15
 80043ae:	f001 fe31 	bl	8006014 <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"MCU");
 80043b2:	495d      	ldr	r1, [pc, #372]	; (8004528 <GrandState_Verita+0x1948>)
 80043b4:	4853      	ldr	r0, [pc, #332]	; (8004504 <GrandState_Verita+0x1924>)
 80043b6:	f009 f9c9 	bl	800d74c <siprintf>
		ili9341_WriteStringNoBG(60, 150, TextDispBuffer, Font12, cl_WHITE);
 80043ba:	4b5c      	ldr	r3, [pc, #368]	; (800452c <GrandState_Verita+0x194c>)
 80043bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80043c0:	9201      	str	r2, [sp, #4]
 80043c2:	685a      	ldr	r2, [r3, #4]
 80043c4:	9200      	str	r2, [sp, #0]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a4e      	ldr	r2, [pc, #312]	; (8004504 <GrandState_Verita+0x1924>)
 80043ca:	2196      	movs	r1, #150	; 0x96
 80043cc:	203c      	movs	r0, #60	; 0x3c
 80043ce:	f001 fe21 	bl	8006014 <ili9341_WriteStringNoBG>
		sprintf(TextDispBuffer,"Brd");
 80043d2:	4957      	ldr	r1, [pc, #348]	; (8004530 <GrandState_Verita+0x1950>)
 80043d4:	484b      	ldr	r0, [pc, #300]	; (8004504 <GrandState_Verita+0x1924>)
 80043d6:	f009 f9b9 	bl	800d74c <siprintf>
		ili9341_WriteStringNoBG(60, 170, TextDispBuffer, Font12, cl_WHITE);
 80043da:	4b54      	ldr	r3, [pc, #336]	; (800452c <GrandState_Verita+0x194c>)
 80043dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80043e0:	9201      	str	r2, [sp, #4]
 80043e2:	685a      	ldr	r2, [r3, #4]
 80043e4:	9200      	str	r2, [sp, #0]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a46      	ldr	r2, [pc, #280]	; (8004504 <GrandState_Verita+0x1924>)
 80043ea:	21aa      	movs	r1, #170	; 0xaa
 80043ec:	203c      	movs	r0, #60	; 0x3c
 80043ee:	f001 fe11 	bl	8006014 <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"MCP3208");
 80043f2:	4950      	ldr	r1, [pc, #320]	; (8004534 <GrandState_Verita+0x1954>)
 80043f4:	4843      	ldr	r0, [pc, #268]	; (8004504 <GrandState_Verita+0x1924>)
 80043f6:	f009 f9a9 	bl	800d74c <siprintf>
		ili9341_WriteStringNoBG(220, 40, TextDispBuffer, Font16, cl_WHITE);
 80043fa:	4b45      	ldr	r3, [pc, #276]	; (8004510 <GrandState_Verita+0x1930>)
 80043fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004400:	9201      	str	r2, [sp, #4]
 8004402:	685a      	ldr	r2, [r3, #4]
 8004404:	9200      	str	r2, [sp, #0]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a3e      	ldr	r2, [pc, #248]	; (8004504 <GrandState_Verita+0x1924>)
 800440a:	2128      	movs	r1, #40	; 0x28
 800440c:	20dc      	movs	r0, #220	; 0xdc
 800440e:	f001 fe01 	bl	8006014 <ili9341_WriteStringNoBG>
		sprintf(TextDispBuffer,"Read Volt V");
 8004412:	4949      	ldr	r1, [pc, #292]	; (8004538 <GrandState_Verita+0x1958>)
 8004414:	483b      	ldr	r0, [pc, #236]	; (8004504 <GrandState_Verita+0x1924>)
 8004416:	f009 f999 	bl	800d74c <siprintf>
		ili9341_WriteStringNoBG(220, 56, TextDispBuffer, Font12, cl_WHITE);
 800441a:	4b44      	ldr	r3, [pc, #272]	; (800452c <GrandState_Verita+0x194c>)
 800441c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004420:	9201      	str	r2, [sp, #4]
 8004422:	685a      	ldr	r2, [r3, #4]
 8004424:	9200      	str	r2, [sp, #0]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a36      	ldr	r2, [pc, #216]	; (8004504 <GrandState_Verita+0x1924>)
 800442a:	2138      	movs	r1, #56	; 0x38
 800442c:	20dc      	movs	r0, #220	; 0xdc
 800442e:	f001 fdf1 	bl	8006014 <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"mV"); ili9341_WriteStringNoBG(150, 54, TextDispBuffer, Font12, cl_WHITE);
 8004432:	4942      	ldr	r1, [pc, #264]	; (800453c <GrandState_Verita+0x195c>)
 8004434:	4833      	ldr	r0, [pc, #204]	; (8004504 <GrandState_Verita+0x1924>)
 8004436:	f009 f989 	bl	800d74c <siprintf>
 800443a:	4b3c      	ldr	r3, [pc, #240]	; (800452c <GrandState_Verita+0x194c>)
 800443c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004440:	9201      	str	r2, [sp, #4]
 8004442:	685a      	ldr	r2, [r3, #4]
 8004444:	9200      	str	r2, [sp, #0]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a2e      	ldr	r2, [pc, #184]	; (8004504 <GrandState_Verita+0x1924>)
 800444a:	2136      	movs	r1, #54	; 0x36
 800444c:	2096      	movs	r0, #150	; 0x96
 800444e:	f001 fde1 	bl	8006014 <ili9341_WriteStringNoBG>
		sprintf(TextDispBuffer,"mV"); ili9341_WriteStringNoBG(150, 79, TextDispBuffer, Font12, cl_WHITE);
 8004452:	493a      	ldr	r1, [pc, #232]	; (800453c <GrandState_Verita+0x195c>)
 8004454:	482b      	ldr	r0, [pc, #172]	; (8004504 <GrandState_Verita+0x1924>)
 8004456:	f009 f979 	bl	800d74c <siprintf>
 800445a:	4b34      	ldr	r3, [pc, #208]	; (800452c <GrandState_Verita+0x194c>)
 800445c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004460:	9201      	str	r2, [sp, #4]
 8004462:	685a      	ldr	r2, [r3, #4]
 8004464:	9200      	str	r2, [sp, #0]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a26      	ldr	r2, [pc, #152]	; (8004504 <GrandState_Verita+0x1924>)
 800446a:	214f      	movs	r1, #79	; 0x4f
 800446c:	2096      	movs	r0, #150	; 0x96
 800446e:	f001 fdd1 	bl	8006014 <ili9341_WriteStringNoBG>
		sprintf(TextDispBuffer,"mA"); ili9341_WriteStringNoBG(150, 104, TextDispBuffer, Font12, cl_WHITE);
 8004472:	4933      	ldr	r1, [pc, #204]	; (8004540 <GrandState_Verita+0x1960>)
 8004474:	4823      	ldr	r0, [pc, #140]	; (8004504 <GrandState_Verita+0x1924>)
 8004476:	f009 f969 	bl	800d74c <siprintf>
 800447a:	4b2c      	ldr	r3, [pc, #176]	; (800452c <GrandState_Verita+0x194c>)
 800447c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004480:	9201      	str	r2, [sp, #4]
 8004482:	685a      	ldr	r2, [r3, #4]
 8004484:	9200      	str	r2, [sp, #0]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a1e      	ldr	r2, [pc, #120]	; (8004504 <GrandState_Verita+0x1924>)
 800448a:	2168      	movs	r1, #104	; 0x68
 800448c:	2096      	movs	r0, #150	; 0x96
 800448e:	f001 fdc1 	bl	8006014 <ili9341_WriteStringNoBG>
		sprintf(TextDispBuffer,"mA"); ili9341_WriteStringNoBG(150, 129, TextDispBuffer, Font12, cl_WHITE);
 8004492:	492b      	ldr	r1, [pc, #172]	; (8004540 <GrandState_Verita+0x1960>)
 8004494:	481b      	ldr	r0, [pc, #108]	; (8004504 <GrandState_Verita+0x1924>)
 8004496:	f009 f959 	bl	800d74c <siprintf>
 800449a:	4b24      	ldr	r3, [pc, #144]	; (800452c <GrandState_Verita+0x194c>)
 800449c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80044a0:	9201      	str	r2, [sp, #4]
 80044a2:	685a      	ldr	r2, [r3, #4]
 80044a4:	9200      	str	r2, [sp, #0]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a16      	ldr	r2, [pc, #88]	; (8004504 <GrandState_Verita+0x1924>)
 80044aa:	2181      	movs	r1, #129	; 0x81
 80044ac:	2096      	movs	r0, #150	; 0x96
 80044ae:	f001 fdb1 	bl	8006014 <ili9341_WriteStringNoBG>
		sprintf(TextDispBuffer,"mW"); ili9341_WriteStringNoBG(170, 154, TextDispBuffer, Font12, cl_WHITE);
 80044b2:	4924      	ldr	r1, [pc, #144]	; (8004544 <GrandState_Verita+0x1964>)
 80044b4:	4813      	ldr	r0, [pc, #76]	; (8004504 <GrandState_Verita+0x1924>)
 80044b6:	f009 f949 	bl	800d74c <siprintf>
 80044ba:	4b1c      	ldr	r3, [pc, #112]	; (800452c <GrandState_Verita+0x194c>)
 80044bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80044c0:	9201      	str	r2, [sp, #4]
 80044c2:	685a      	ldr	r2, [r3, #4]
 80044c4:	9200      	str	r2, [sp, #0]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a0e      	ldr	r2, [pc, #56]	; (8004504 <GrandState_Verita+0x1924>)
 80044ca:	219a      	movs	r1, #154	; 0x9a
 80044cc:	20aa      	movs	r0, #170	; 0xaa
 80044ce:	f001 fda1 	bl	8006014 <ili9341_WriteStringNoBG>
		sprintf(TextDispBuffer,"mW"); ili9341_WriteStringNoBG(170, 174, TextDispBuffer, Font12, cl_WHITE);
 80044d2:	491c      	ldr	r1, [pc, #112]	; (8004544 <GrandState_Verita+0x1964>)
 80044d4:	480b      	ldr	r0, [pc, #44]	; (8004504 <GrandState_Verita+0x1924>)
 80044d6:	f009 f939 	bl	800d74c <siprintf>
 80044da:	4b14      	ldr	r3, [pc, #80]	; (800452c <GrandState_Verita+0x194c>)
 80044dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80044e0:	9201      	str	r2, [sp, #4]
 80044e2:	685a      	ldr	r2, [r3, #4]
 80044e4:	9200      	str	r2, [sp, #0]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a06      	ldr	r2, [pc, #24]	; (8004504 <GrandState_Verita+0x1924>)
 80044ea:	21ae      	movs	r1, #174	; 0xae
 80044ec:	20aa      	movs	r0, #170	; 0xaa
 80044ee:	f001 fd91 	bl	8006014 <ili9341_WriteStringNoBG>

		for(register int t = 0; t <= 7; t++){
 80044f2:	2400      	movs	r4, #0
 80044f4:	e041      	b.n	800457a <GrandState_Verita+0x199a>
 80044f6:	bf00      	nop
 80044f8:	200008ac 	.word	0x200008ac
 80044fc:	40020800 	.word	0x40020800
 8004500:	080100a4 	.word	0x080100a4
 8004504:	200006b8 	.word	0x200006b8
 8004508:	20000238 	.word	0x20000238
 800450c:	0800fee0 	.word	0x0800fee0
 8004510:	20000230 	.word	0x20000230
 8004514:	080100b0 	.word	0x080100b0
 8004518:	0800ff34 	.word	0x0800ff34
 800451c:	0800ff4c 	.word	0x0800ff4c
 8004520:	0800ff44 	.word	0x0800ff44
 8004524:	080100b8 	.word	0x080100b8
 8004528:	080100bc 	.word	0x080100bc
 800452c:	20000228 	.word	0x20000228
 8004530:	080100c0 	.word	0x080100c0
 8004534:	080100c4 	.word	0x080100c4
 8004538:	080100cc 	.word	0x080100cc
 800453c:	0800ff54 	.word	0x0800ff54
 8004540:	0800ff58 	.word	0x0800ff58
 8004544:	080100d8 	.word	0x080100d8
			sprintf(TextDispBuffer,"CH%d",t);
 8004548:	4622      	mov	r2, r4
 800454a:	49a1      	ldr	r1, [pc, #644]	; (80047d0 <GrandState_Verita+0x1bf0>)
 800454c:	48a1      	ldr	r0, [pc, #644]	; (80047d4 <GrandState_Verita+0x1bf4>)
 800454e:	f009 f8fd 	bl	800d74c <siprintf>
			ili9341_WriteStringNoBG(220, 75 + (12*t), TextDispBuffer, Font12, cl_YELLOW);
 8004552:	b2a3      	uxth	r3, r4
 8004554:	461a      	mov	r2, r3
 8004556:	0052      	lsls	r2, r2, #1
 8004558:	4413      	add	r3, r2
 800455a:	009b      	lsls	r3, r3, #2
 800455c:	b29b      	uxth	r3, r3
 800455e:	334b      	adds	r3, #75	; 0x4b
 8004560:	b299      	uxth	r1, r3
 8004562:	4b9d      	ldr	r3, [pc, #628]	; (80047d8 <GrandState_Verita+0x1bf8>)
 8004564:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8004568:	9201      	str	r2, [sp, #4]
 800456a:	685a      	ldr	r2, [r3, #4]
 800456c:	9200      	str	r2, [sp, #0]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a98      	ldr	r2, [pc, #608]	; (80047d4 <GrandState_Verita+0x1bf4>)
 8004572:	20dc      	movs	r0, #220	; 0xdc
 8004574:	f001 fd4e 	bl	8006014 <ili9341_WriteStringNoBG>
		for(register int t = 0; t <= 7; t++){
 8004578:	3401      	adds	r4, #1
 800457a:	2c07      	cmp	r4, #7
 800457c:	dde4      	ble.n	8004548 <GrandState_Verita+0x1968>
		}

		sprintf(TextDispBuffer,"MCU_Temp:");
 800457e:	4997      	ldr	r1, [pc, #604]	; (80047dc <GrandState_Verita+0x1bfc>)
 8004580:	4894      	ldr	r0, [pc, #592]	; (80047d4 <GrandState_Verita+0x1bf4>)
 8004582:	f009 f8e3 	bl	800d74c <siprintf>
		ili9341_WriteString(20, 190, TextDispBuffer, Font12, cl_WHITE, cl_BLACK);
 8004586:	4b94      	ldr	r3, [pc, #592]	; (80047d8 <GrandState_Verita+0x1bf8>)
 8004588:	2200      	movs	r2, #0
 800458a:	9202      	str	r2, [sp, #8]
 800458c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004590:	9201      	str	r2, [sp, #4]
 8004592:	685a      	ldr	r2, [r3, #4]
 8004594:	9200      	str	r2, [sp, #0]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a8e      	ldr	r2, [pc, #568]	; (80047d4 <GrandState_Verita+0x1bf4>)
 800459a:	21be      	movs	r1, #190	; 0xbe
 800459c:	2014      	movs	r0, #20
 800459e:	f001 fcec 	bl	8005f7a <ili9341_WriteString>

		k_flag.cnt = 0; //// prevent over state jump
 80045a2:	4b8f      	ldr	r3, [pc, #572]	; (80047e0 <GrandState_Verita+0x1c00>)
 80045a4:	2200      	movs	r2, #0
 80045a6:	709a      	strb	r2, [r3, #2]
		GrandState = monitor;
 80045a8:	4b8e      	ldr	r3, [pc, #568]	; (80047e4 <GrandState_Verita+0x1c04>)
 80045aa:	220c      	movs	r2, #12
 80045ac:	701a      	strb	r2, [r3, #0]
		break; //// pre monitor
 80045ae:	f000 bc2a 	b.w	8004e06 <GrandState_Verita+0x2226>


	case monitor:
		stboxp.choice_set = bpoxy_def;
 80045b2:	4b8d      	ldr	r3, [pc, #564]	; (80047e8 <GrandState_Verita+0x1c08>)
 80045b4:	2200      	movs	r2, #0
 80045b6:	705a      	strb	r2, [r3, #1]
		simple_scr();
 80045b8:	f7fd ffce 	bl	8002558 <simple_scr>

		sprintf(TextDispBuffer,"%4d", inatb.Bus_V);
 80045bc:	4b8b      	ldr	r3, [pc, #556]	; (80047ec <GrandState_Verita+0x1c0c>)
 80045be:	8a1b      	ldrh	r3, [r3, #16]
 80045c0:	461a      	mov	r2, r3
 80045c2:	498b      	ldr	r1, [pc, #556]	; (80047f0 <GrandState_Verita+0x1c10>)
 80045c4:	4883      	ldr	r0, [pc, #524]	; (80047d4 <GrandState_Verita+0x1bf4>)
 80045c6:	f009 f8c1 	bl	800d74c <siprintf>
		if(inatb.Bus_V < 2000){
 80045ca:	4b88      	ldr	r3, [pc, #544]	; (80047ec <GrandState_Verita+0x1c0c>)
 80045cc:	8a1b      	ldrh	r3, [r3, #16]
 80045ce:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80045d2:	d20e      	bcs.n	80045f2 <GrandState_Verita+0x1a12>
			ili9341_WriteString(90, 50, TextDispBuffer, Font16, cl_RED, cl_BLACK);
 80045d4:	4b87      	ldr	r3, [pc, #540]	; (80047f4 <GrandState_Verita+0x1c14>)
 80045d6:	2200      	movs	r2, #0
 80045d8:	9202      	str	r2, [sp, #8]
 80045da:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80045de:	9201      	str	r2, [sp, #4]
 80045e0:	685a      	ldr	r2, [r3, #4]
 80045e2:	9200      	str	r2, [sp, #0]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a7b      	ldr	r2, [pc, #492]	; (80047d4 <GrandState_Verita+0x1bf4>)
 80045e8:	2132      	movs	r1, #50	; 0x32
 80045ea:	205a      	movs	r0, #90	; 0x5a
 80045ec:	f001 fcc5 	bl	8005f7a <ili9341_WriteString>
 80045f0:	e00d      	b.n	800460e <GrandState_Verita+0x1a2e>
		}else{
			ili9341_WriteString(90, 50, TextDispBuffer, Font16, cl_GREEN, cl_BLACK);
 80045f2:	4b80      	ldr	r3, [pc, #512]	; (80047f4 <GrandState_Verita+0x1c14>)
 80045f4:	2200      	movs	r2, #0
 80045f6:	9202      	str	r2, [sp, #8]
 80045f8:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80045fc:	9201      	str	r2, [sp, #4]
 80045fe:	685a      	ldr	r2, [r3, #4]
 8004600:	9200      	str	r2, [sp, #0]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a73      	ldr	r2, [pc, #460]	; (80047d4 <GrandState_Verita+0x1bf4>)
 8004606:	2132      	movs	r1, #50	; 0x32
 8004608:	205a      	movs	r0, #90	; 0x5a
 800460a:	f001 fcb6 	bl	8005f7a <ili9341_WriteString>
		}

		sprintf(TextDispBuffer,"%4d", inata.Bus_V);
 800460e:	4b7a      	ldr	r3, [pc, #488]	; (80047f8 <GrandState_Verita+0x1c18>)
 8004610:	8a1b      	ldrh	r3, [r3, #16]
 8004612:	461a      	mov	r2, r3
 8004614:	4976      	ldr	r1, [pc, #472]	; (80047f0 <GrandState_Verita+0x1c10>)
 8004616:	486f      	ldr	r0, [pc, #444]	; (80047d4 <GrandState_Verita+0x1bf4>)
 8004618:	f009 f898 	bl	800d74c <siprintf>
		if(inata.Bus_V < 2000){
 800461c:	4b76      	ldr	r3, [pc, #472]	; (80047f8 <GrandState_Verita+0x1c18>)
 800461e:	8a1b      	ldrh	r3, [r3, #16]
 8004620:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004624:	d20e      	bcs.n	8004644 <GrandState_Verita+0x1a64>
			ili9341_WriteString(90, 75, TextDispBuffer, Font16, cl_RED, cl_BLACK);
 8004626:	4b73      	ldr	r3, [pc, #460]	; (80047f4 <GrandState_Verita+0x1c14>)
 8004628:	2200      	movs	r2, #0
 800462a:	9202      	str	r2, [sp, #8]
 800462c:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8004630:	9201      	str	r2, [sp, #4]
 8004632:	685a      	ldr	r2, [r3, #4]
 8004634:	9200      	str	r2, [sp, #0]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a66      	ldr	r2, [pc, #408]	; (80047d4 <GrandState_Verita+0x1bf4>)
 800463a:	214b      	movs	r1, #75	; 0x4b
 800463c:	205a      	movs	r0, #90	; 0x5a
 800463e:	f001 fc9c 	bl	8005f7a <ili9341_WriteString>
 8004642:	e00d      	b.n	8004660 <GrandState_Verita+0x1a80>
		}else{
			ili9341_WriteString(90, 75, TextDispBuffer, Font16, cl_GREEN, cl_BLACK);
 8004644:	4b6b      	ldr	r3, [pc, #428]	; (80047f4 <GrandState_Verita+0x1c14>)
 8004646:	2200      	movs	r2, #0
 8004648:	9202      	str	r2, [sp, #8]
 800464a:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800464e:	9201      	str	r2, [sp, #4]
 8004650:	685a      	ldr	r2, [r3, #4]
 8004652:	9200      	str	r2, [sp, #0]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a5f      	ldr	r2, [pc, #380]	; (80047d4 <GrandState_Verita+0x1bf4>)
 8004658:	214b      	movs	r1, #75	; 0x4b
 800465a:	205a      	movs	r0, #90	; 0x5a
 800465c:	f001 fc8d 	bl	8005f7a <ili9341_WriteString>
		}

		sprintf(TextDispBuffer,"%4d", inata.CURRENT);
 8004660:	4b65      	ldr	r3, [pc, #404]	; (80047f8 <GrandState_Verita+0x1c18>)
 8004662:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004666:	461a      	mov	r2, r3
 8004668:	4961      	ldr	r1, [pc, #388]	; (80047f0 <GrandState_Verita+0x1c10>)
 800466a:	485a      	ldr	r0, [pc, #360]	; (80047d4 <GrandState_Verita+0x1bf4>)
 800466c:	f009 f86e 	bl	800d74c <siprintf>
		ili9341_WriteString(90, 100, TextDispBuffer, Font16, cl_CYAN, cl_BLACK);
 8004670:	4b60      	ldr	r3, [pc, #384]	; (80047f4 <GrandState_Verita+0x1c14>)
 8004672:	2200      	movs	r2, #0
 8004674:	9202      	str	r2, [sp, #8]
 8004676:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800467a:	9201      	str	r2, [sp, #4]
 800467c:	685a      	ldr	r2, [r3, #4]
 800467e:	9200      	str	r2, [sp, #0]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a54      	ldr	r2, [pc, #336]	; (80047d4 <GrandState_Verita+0x1bf4>)
 8004684:	2164      	movs	r1, #100	; 0x64
 8004686:	205a      	movs	r0, #90	; 0x5a
 8004688:	f001 fc77 	bl	8005f7a <ili9341_WriteString>
		sprintf(TextDispBuffer,"%4d", inatb.CURRENT);
 800468c:	4b57      	ldr	r3, [pc, #348]	; (80047ec <GrandState_Verita+0x1c0c>)
 800468e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004692:	461a      	mov	r2, r3
 8004694:	4956      	ldr	r1, [pc, #344]	; (80047f0 <GrandState_Verita+0x1c10>)
 8004696:	484f      	ldr	r0, [pc, #316]	; (80047d4 <GrandState_Verita+0x1bf4>)
 8004698:	f009 f858 	bl	800d74c <siprintf>
		ili9341_WriteString(90, 125, TextDispBuffer, Font16, cl_CYAN, cl_BLACK);
 800469c:	4b55      	ldr	r3, [pc, #340]	; (80047f4 <GrandState_Verita+0x1c14>)
 800469e:	2200      	movs	r2, #0
 80046a0:	9202      	str	r2, [sp, #8]
 80046a2:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80046a6:	9201      	str	r2, [sp, #4]
 80046a8:	685a      	ldr	r2, [r3, #4]
 80046aa:	9200      	str	r2, [sp, #0]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a49      	ldr	r2, [pc, #292]	; (80047d4 <GrandState_Verita+0x1bf4>)
 80046b0:	217d      	movs	r1, #125	; 0x7d
 80046b2:	205a      	movs	r0, #90	; 0x5a
 80046b4:	f001 fc61 	bl	8005f7a <ili9341_WriteString>

		sprintf(TextDispBuffer,"%4.1f", inata.POWER);
 80046b8:	4b4f      	ldr	r3, [pc, #316]	; (80047f8 <GrandState_Verita+0x1c18>)
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	4618      	mov	r0, r3
 80046be:	f7fb ff4b 	bl	8000558 <__aeabi_f2d>
 80046c2:	4602      	mov	r2, r0
 80046c4:	460b      	mov	r3, r1
 80046c6:	494d      	ldr	r1, [pc, #308]	; (80047fc <GrandState_Verita+0x1c1c>)
 80046c8:	4842      	ldr	r0, [pc, #264]	; (80047d4 <GrandState_Verita+0x1bf4>)
 80046ca:	f009 f83f 	bl	800d74c <siprintf>
		ili9341_WriteString(95, 150, TextDispBuffer, Font16, cl_ORANGE, cl_BLACK);
 80046ce:	4b49      	ldr	r3, [pc, #292]	; (80047f4 <GrandState_Verita+0x1c14>)
 80046d0:	2200      	movs	r2, #0
 80046d2:	9202      	str	r2, [sp, #8]
 80046d4:	f64f 12a0 	movw	r2, #63904	; 0xf9a0
 80046d8:	9201      	str	r2, [sp, #4]
 80046da:	685a      	ldr	r2, [r3, #4]
 80046dc:	9200      	str	r2, [sp, #0]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a3c      	ldr	r2, [pc, #240]	; (80047d4 <GrandState_Verita+0x1bf4>)
 80046e2:	2196      	movs	r1, #150	; 0x96
 80046e4:	205f      	movs	r0, #95	; 0x5f
 80046e6:	f001 fc48 	bl	8005f7a <ili9341_WriteString>
		sprintf(TextDispBuffer,"%4.1f", inatb.POWER);
 80046ea:	4b40      	ldr	r3, [pc, #256]	; (80047ec <GrandState_Verita+0x1c0c>)
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	4618      	mov	r0, r3
 80046f0:	f7fb ff32 	bl	8000558 <__aeabi_f2d>
 80046f4:	4602      	mov	r2, r0
 80046f6:	460b      	mov	r3, r1
 80046f8:	4940      	ldr	r1, [pc, #256]	; (80047fc <GrandState_Verita+0x1c1c>)
 80046fa:	4836      	ldr	r0, [pc, #216]	; (80047d4 <GrandState_Verita+0x1bf4>)
 80046fc:	f009 f826 	bl	800d74c <siprintf>
		ili9341_WriteString(95, 170, TextDispBuffer, Font16, cl_ORANGE, cl_BLACK);
 8004700:	4b3c      	ldr	r3, [pc, #240]	; (80047f4 <GrandState_Verita+0x1c14>)
 8004702:	2200      	movs	r2, #0
 8004704:	9202      	str	r2, [sp, #8]
 8004706:	f64f 12a0 	movw	r2, #63904	; 0xf9a0
 800470a:	9201      	str	r2, [sp, #4]
 800470c:	685a      	ldr	r2, [r3, #4]
 800470e:	9200      	str	r2, [sp, #0]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a30      	ldr	r2, [pc, #192]	; (80047d4 <GrandState_Verita+0x1bf4>)
 8004714:	21aa      	movs	r1, #170	; 0xaa
 8004716:	205f      	movs	r0, #95	; 0x5f
 8004718:	f001 fc2f 	bl	8005f7a <ili9341_WriteString>

		//// MCP3208 ADC Raw Read
		//ili9341_FillRect(250, 75, 30, 96, cl_BLACK);
		for(register int t = 0; t <= 7; t++){
 800471c:	2400      	movs	r4, #0
 800471e:	e023      	b.n	8004768 <GrandState_Verita+0x1b88>
			sprintf(TextDispBuffer,"%.2f",mcp_read.cv[t]);
 8004720:	4a37      	ldr	r2, [pc, #220]	; (8004800 <GrandState_Verita+0x1c20>)
 8004722:	1d23      	adds	r3, r4, #4
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	4413      	add	r3, r2
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4618      	mov	r0, r3
 800472c:	f7fb ff14 	bl	8000558 <__aeabi_f2d>
 8004730:	4602      	mov	r2, r0
 8004732:	460b      	mov	r3, r1
 8004734:	4933      	ldr	r1, [pc, #204]	; (8004804 <GrandState_Verita+0x1c24>)
 8004736:	4827      	ldr	r0, [pc, #156]	; (80047d4 <GrandState_Verita+0x1bf4>)
 8004738:	f009 f808 	bl	800d74c <siprintf>
		//ili9341_WriteStringNoBG(250, 75 + (12*t), TextDispBuffer, Font12, cl_WHITE);
		ili9341_WriteString(250, 75 + (12*t), TextDispBuffer, Font12, cl_WHITE, cl_BLACK);
 800473c:	b2a3      	uxth	r3, r4
 800473e:	461a      	mov	r2, r3
 8004740:	0052      	lsls	r2, r2, #1
 8004742:	4413      	add	r3, r2
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	b29b      	uxth	r3, r3
 8004748:	334b      	adds	r3, #75	; 0x4b
 800474a:	b299      	uxth	r1, r3
 800474c:	4b22      	ldr	r3, [pc, #136]	; (80047d8 <GrandState_Verita+0x1bf8>)
 800474e:	2200      	movs	r2, #0
 8004750:	9202      	str	r2, [sp, #8]
 8004752:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004756:	9201      	str	r2, [sp, #4]
 8004758:	685a      	ldr	r2, [r3, #4]
 800475a:	9200      	str	r2, [sp, #0]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a1d      	ldr	r2, [pc, #116]	; (80047d4 <GrandState_Verita+0x1bf4>)
 8004760:	20fa      	movs	r0, #250	; 0xfa
 8004762:	f001 fc0a 	bl	8005f7a <ili9341_WriteString>
		for(register int t = 0; t <= 7; t++){
 8004766:	3401      	adds	r4, #1
 8004768:	2c07      	cmp	r4, #7
 800476a:	ddd9      	ble.n	8004720 <GrandState_Verita+0x1b40>
		}

		//// Client's CPU Temp
		sprintf(TextDispBuffer,"%2.1f C", (client_temp_mcuCC < 0) ? 0 : client_temp_mcuCC);
 800476c:	4b26      	ldr	r3, [pc, #152]	; (8004808 <GrandState_Verita+0x1c28>)
 800476e:	edd3 7a00 	vldr	s15, [r3]
 8004772:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800477a:	d504      	bpl.n	8004786 <GrandState_Verita+0x1ba6>
 800477c:	f04f 0200 	mov.w	r2, #0
 8004780:	f04f 0300 	mov.w	r3, #0
 8004784:	e006      	b.n	8004794 <GrandState_Verita+0x1bb4>
 8004786:	4b20      	ldr	r3, [pc, #128]	; (8004808 <GrandState_Verita+0x1c28>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4618      	mov	r0, r3
 800478c:	f7fb fee4 	bl	8000558 <__aeabi_f2d>
 8004790:	4602      	mov	r2, r0
 8004792:	460b      	mov	r3, r1
 8004794:	491d      	ldr	r1, [pc, #116]	; (800480c <GrandState_Verita+0x1c2c>)
 8004796:	480f      	ldr	r0, [pc, #60]	; (80047d4 <GrandState_Verita+0x1bf4>)
 8004798:	f008 ffd8 	bl	800d74c <siprintf>
		//sprintf(TextDispBuffer,"%2.1f C", client_temp_mcuCC);
			if(client_temp_mcuCC < MCUTemp_treash){
 800479c:	4b1a      	ldr	r3, [pc, #104]	; (8004808 <GrandState_Verita+0x1c28>)
 800479e:	edd3 7a00 	vldr	s15, [r3]
 80047a2:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8004810 <GrandState_Verita+0x1c30>
 80047a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047ae:	d531      	bpl.n	8004814 <GrandState_Verita+0x1c34>
				ili9341_WriteString(100, 190, TextDispBuffer, Font16, cl_LIGHTGREY, cl_BLACK);
 80047b0:	4b10      	ldr	r3, [pc, #64]	; (80047f4 <GrandState_Verita+0x1c14>)
 80047b2:	2200      	movs	r2, #0
 80047b4:	9202      	str	r2, [sp, #8]
 80047b6:	f24c 6218 	movw	r2, #50712	; 0xc618
 80047ba:	9201      	str	r2, [sp, #4]
 80047bc:	685a      	ldr	r2, [r3, #4]
 80047be:	9200      	str	r2, [sp, #0]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a04      	ldr	r2, [pc, #16]	; (80047d4 <GrandState_Verita+0x1bf4>)
 80047c4:	21be      	movs	r1, #190	; 0xbe
 80047c6:	2064      	movs	r0, #100	; 0x64
 80047c8:	f001 fbd7 	bl	8005f7a <ili9341_WriteString>
 80047cc:	e030      	b.n	8004830 <GrandState_Verita+0x1c50>
 80047ce:	bf00      	nop
 80047d0:	080100dc 	.word	0x080100dc
 80047d4:	200006b8 	.word	0x200006b8
 80047d8:	20000228 	.word	0x20000228
 80047dc:	080100e4 	.word	0x080100e4
 80047e0:	20000890 	.word	0x20000890
 80047e4:	20000006 	.word	0x20000006
 80047e8:	200008ac 	.word	0x200008ac
 80047ec:	20000810 	.word	0x20000810
 80047f0:	0800ff5c 	.word	0x0800ff5c
 80047f4:	20000230 	.word	0x20000230
 80047f8:	200007f8 	.word	0x200007f8
 80047fc:	080100f0 	.word	0x080100f0
 8004800:	20000828 	.word	0x20000828
 8004804:	080100f8 	.word	0x080100f8
 8004808:	200007f4 	.word	0x200007f4
 800480c:	08010094 	.word	0x08010094
 8004810:	42700000 	.word	0x42700000
			}else{
				ili9341_WriteString(100, 190, TextDispBuffer, Font16, cl_RED, cl_BLACK);
 8004814:	4b7e      	ldr	r3, [pc, #504]	; (8004a10 <GrandState_Verita+0x1e30>)
 8004816:	2200      	movs	r2, #0
 8004818:	9202      	str	r2, [sp, #8]
 800481a:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800481e:	9201      	str	r2, [sp, #4]
 8004820:	685a      	ldr	r2, [r3, #4]
 8004822:	9200      	str	r2, [sp, #0]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a7b      	ldr	r2, [pc, #492]	; (8004a14 <GrandState_Verita+0x1e34>)
 8004828:	21be      	movs	r1, #190	; 0xbe
 800482a:	2064      	movs	r0, #100	; 0x64
 800482c:	f001 fba5 	bl	8005f7a <ili9341_WriteString>
			}


		if(k_flag.cnt && stboxp.ch_is == 1){ //// Back to lobby
 8004830:	4b79      	ldr	r3, [pc, #484]	; (8004a18 <GrandState_Verita+0x1e38>)
 8004832:	789b      	ldrb	r3, [r3, #2]
 8004834:	2b00      	cmp	r3, #0
 8004836:	f000 82dd 	beq.w	8004df4 <GrandState_Verita+0x2214>
 800483a:	4b78      	ldr	r3, [pc, #480]	; (8004a1c <GrandState_Verita+0x1e3c>)
 800483c:	789b      	ldrb	r3, [r3, #2]
 800483e:	2b01      	cmp	r3, #1
 8004840:	f040 82d8 	bne.w	8004df4 <GrandState_Verita+0x2214>
			GrandState = pre_lobby;
 8004844:	4b76      	ldr	r3, [pc, #472]	; (8004a20 <GrandState_Verita+0x1e40>)
 8004846:	2201      	movs	r2, #1
 8004848:	701a      	strb	r2, [r3, #0]
			VRB_CL.Mark.cputemp = 0; //// reset temp, prevent old data show
 800484a:	4b76      	ldr	r3, [pc, #472]	; (8004a24 <GrandState_Verita+0x1e44>)
 800484c:	2200      	movs	r2, #0
 800484e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
			HAL_GPIO_WritePin(RelayClient_GPIO_Port, RelayClient_Pin, GPIO_PIN_RESET);
 8004852:	2200      	movs	r2, #0
 8004854:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004858:	4873      	ldr	r0, [pc, #460]	; (8004a28 <GrandState_Verita+0x1e48>)
 800485a:	f002 ff55 	bl	8007708 <HAL_GPIO_WritePin>
			k_flag.cnt = 0;
 800485e:	4b6e      	ldr	r3, [pc, #440]	; (8004a18 <GrandState_Verita+0x1e38>)
 8004860:	2200      	movs	r2, #0
 8004862:	709a      	strb	r2, [r3, #2]
			}
		break; // monitor
 8004864:	e2c6      	b.n	8004df4 <GrandState_Verita+0x2214>


	case pre_danger:
		stboxp.choice_set = bpoxy_def;
 8004866:	4b6d      	ldr	r3, [pc, #436]	; (8004a1c <GrandState_Verita+0x1e3c>)
 8004868:	2200      	movs	r2, #0
 800486a:	705a      	strb	r2, [r3, #1]
		ili9341_FillRect(0, 30, 320, 210, cl_BLACK);
 800486c:	2300      	movs	r3, #0
 800486e:	9300      	str	r3, [sp, #0]
 8004870:	23d2      	movs	r3, #210	; 0xd2
 8004872:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004876:	211e      	movs	r1, #30
 8004878:	2000      	movs	r0, #0
 800487a:	f001 f9d5 	bl	8005c28 <ili9341_FillRect>
		ili9341_FillRect(0, 0, 320, 30, cl_RED);
 800487e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004882:	9300      	str	r3, [sp, #0]
 8004884:	231e      	movs	r3, #30
 8004886:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800488a:	2100      	movs	r1, #0
 800488c:	2000      	movs	r0, #0
 800488e:	f001 f9cb 	bl	8005c28 <ili9341_FillRect>

		ili9341_WriteStringNoBG(105, 5, "Danger!!!", Font20, cl_WHITE);
 8004892:	4b66      	ldr	r3, [pc, #408]	; (8004a2c <GrandState_Verita+0x1e4c>)
 8004894:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004898:	9201      	str	r2, [sp, #4]
 800489a:	685a      	ldr	r2, [r3, #4]
 800489c:	9200      	str	r2, [sp, #0]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a63      	ldr	r2, [pc, #396]	; (8004a30 <GrandState_Verita+0x1e50>)
 80048a2:	2105      	movs	r1, #5
 80048a4:	2069      	movs	r0, #105	; 0x69
 80048a6:	f001 fbb5 	bl	8006014 <ili9341_WriteStringNoBG>

		ili9341_WriteStringNoBG(30, 220, "<-Back to lobby", Font16, cl_WHITE);
 80048aa:	4b59      	ldr	r3, [pc, #356]	; (8004a10 <GrandState_Verita+0x1e30>)
 80048ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80048b0:	9201      	str	r2, [sp, #4]
 80048b2:	685a      	ldr	r2, [r3, #4]
 80048b4:	9200      	str	r2, [sp, #0]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a5e      	ldr	r2, [pc, #376]	; (8004a34 <GrandState_Verita+0x1e54>)
 80048ba:	21dc      	movs	r1, #220	; 0xdc
 80048bc:	201e      	movs	r0, #30
 80048be:	f001 fba9 	bl	8006014 <ili9341_WriteStringNoBG>

		ili9341_WriteStringNoBG(40, 70, "Overcurrent Detect!", Font20, cl_WHITE);
 80048c2:	4b5a      	ldr	r3, [pc, #360]	; (8004a2c <GrandState_Verita+0x1e4c>)
 80048c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80048c8:	9201      	str	r2, [sp, #4]
 80048ca:	685a      	ldr	r2, [r3, #4]
 80048cc:	9200      	str	r2, [sp, #0]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a59      	ldr	r2, [pc, #356]	; (8004a38 <GrandState_Verita+0x1e58>)
 80048d2:	2146      	movs	r1, #70	; 0x46
 80048d4:	2028      	movs	r0, #40	; 0x28
 80048d6:	f001 fb9d 	bl	8006014 <ili9341_WriteStringNoBG>

		ili9341_WriteString(20, 100, "I MCU:", Font16, cl_WHITE, cl_BLACK);
 80048da:	4b4d      	ldr	r3, [pc, #308]	; (8004a10 <GrandState_Verita+0x1e30>)
 80048dc:	2200      	movs	r2, #0
 80048de:	9202      	str	r2, [sp, #8]
 80048e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80048e4:	9201      	str	r2, [sp, #4]
 80048e6:	685a      	ldr	r2, [r3, #4]
 80048e8:	9200      	str	r2, [sp, #0]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a53      	ldr	r2, [pc, #332]	; (8004a3c <GrandState_Verita+0x1e5c>)
 80048ee:	2164      	movs	r1, #100	; 0x64
 80048f0:	2014      	movs	r0, #20
 80048f2:	f001 fb42 	bl	8005f7a <ili9341_WriteString>

		ili9341_WriteString(20, 130, "I Brd:", Font16, cl_WHITE, cl_BLACK);
 80048f6:	4b46      	ldr	r3, [pc, #280]	; (8004a10 <GrandState_Verita+0x1e30>)
 80048f8:	2200      	movs	r2, #0
 80048fa:	9202      	str	r2, [sp, #8]
 80048fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004900:	9201      	str	r2, [sp, #4]
 8004902:	685a      	ldr	r2, [r3, #4]
 8004904:	9200      	str	r2, [sp, #0]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a4d      	ldr	r2, [pc, #308]	; (8004a40 <GrandState_Verita+0x1e60>)
 800490a:	2182      	movs	r1, #130	; 0x82
 800490c:	2014      	movs	r0, #20
 800490e:	f001 fb34 	bl	8005f7a <ili9341_WriteString>

		sprintf(TextDispBuffer,"%4d", inata.CURRENT);
 8004912:	4b4c      	ldr	r3, [pc, #304]	; (8004a44 <GrandState_Verita+0x1e64>)
 8004914:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004918:	461a      	mov	r2, r3
 800491a:	494b      	ldr	r1, [pc, #300]	; (8004a48 <GrandState_Verita+0x1e68>)
 800491c:	483d      	ldr	r0, [pc, #244]	; (8004a14 <GrandState_Verita+0x1e34>)
 800491e:	f008 ff15 	bl	800d74c <siprintf>
		if(inata.CURRENT >= Current_limit_mA){
 8004922:	4b48      	ldr	r3, [pc, #288]	; (8004a44 <GrandState_Verita+0x1e64>)
 8004924:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004928:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800492c:	db1a      	blt.n	8004964 <GrandState_Verita+0x1d84>
			ili9341_WriteString(120, 100, TextDispBuffer, Font20, cl_RED, cl_BLACK);
 800492e:	4b3f      	ldr	r3, [pc, #252]	; (8004a2c <GrandState_Verita+0x1e4c>)
 8004930:	2200      	movs	r2, #0
 8004932:	9202      	str	r2, [sp, #8]
 8004934:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8004938:	9201      	str	r2, [sp, #4]
 800493a:	685a      	ldr	r2, [r3, #4]
 800493c:	9200      	str	r2, [sp, #0]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a34      	ldr	r2, [pc, #208]	; (8004a14 <GrandState_Verita+0x1e34>)
 8004942:	2164      	movs	r1, #100	; 0x64
 8004944:	2078      	movs	r0, #120	; 0x78
 8004946:	f001 fb18 	bl	8005f7a <ili9341_WriteString>
			ili9341_WriteStringNoBG(220, 100, "FAIL", Font20, cl_RED);
 800494a:	4b38      	ldr	r3, [pc, #224]	; (8004a2c <GrandState_Verita+0x1e4c>)
 800494c:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8004950:	9201      	str	r2, [sp, #4]
 8004952:	685a      	ldr	r2, [r3, #4]
 8004954:	9200      	str	r2, [sp, #0]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a3c      	ldr	r2, [pc, #240]	; (8004a4c <GrandState_Verita+0x1e6c>)
 800495a:	2164      	movs	r1, #100	; 0x64
 800495c:	20dc      	movs	r0, #220	; 0xdc
 800495e:	f001 fb59 	bl	8006014 <ili9341_WriteStringNoBG>
 8004962:	e00d      	b.n	8004980 <GrandState_Verita+0x1da0>
		}else{
			ili9341_WriteString(120, 100, TextDispBuffer, Font20, cl_WHITE, cl_BLACK);
 8004964:	4b31      	ldr	r3, [pc, #196]	; (8004a2c <GrandState_Verita+0x1e4c>)
 8004966:	2200      	movs	r2, #0
 8004968:	9202      	str	r2, [sp, #8]
 800496a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800496e:	9201      	str	r2, [sp, #4]
 8004970:	685a      	ldr	r2, [r3, #4]
 8004972:	9200      	str	r2, [sp, #0]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a27      	ldr	r2, [pc, #156]	; (8004a14 <GrandState_Verita+0x1e34>)
 8004978:	2164      	movs	r1, #100	; 0x64
 800497a:	2078      	movs	r0, #120	; 0x78
 800497c:	f001 fafd 	bl	8005f7a <ili9341_WriteString>
			}

		sprintf(TextDispBuffer,"%4d", inatb.CURRENT);
 8004980:	4b33      	ldr	r3, [pc, #204]	; (8004a50 <GrandState_Verita+0x1e70>)
 8004982:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004986:	461a      	mov	r2, r3
 8004988:	492f      	ldr	r1, [pc, #188]	; (8004a48 <GrandState_Verita+0x1e68>)
 800498a:	4822      	ldr	r0, [pc, #136]	; (8004a14 <GrandState_Verita+0x1e34>)
 800498c:	f008 fede 	bl	800d74c <siprintf>
		if(inatb.CURRENT >= Current_limit_mA){
 8004990:	4b2f      	ldr	r3, [pc, #188]	; (8004a50 <GrandState_Verita+0x1e70>)
 8004992:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004996:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800499a:	db1a      	blt.n	80049d2 <GrandState_Verita+0x1df2>
			ili9341_WriteString(120, 130, TextDispBuffer, Font20, cl_RED, cl_BLACK);
 800499c:	4b23      	ldr	r3, [pc, #140]	; (8004a2c <GrandState_Verita+0x1e4c>)
 800499e:	2200      	movs	r2, #0
 80049a0:	9202      	str	r2, [sp, #8]
 80049a2:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80049a6:	9201      	str	r2, [sp, #4]
 80049a8:	685a      	ldr	r2, [r3, #4]
 80049aa:	9200      	str	r2, [sp, #0]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a19      	ldr	r2, [pc, #100]	; (8004a14 <GrandState_Verita+0x1e34>)
 80049b0:	2182      	movs	r1, #130	; 0x82
 80049b2:	2078      	movs	r0, #120	; 0x78
 80049b4:	f001 fae1 	bl	8005f7a <ili9341_WriteString>
			ili9341_WriteStringNoBG(220, 130, "FAIL", Font20, cl_RED);
 80049b8:	4b1c      	ldr	r3, [pc, #112]	; (8004a2c <GrandState_Verita+0x1e4c>)
 80049ba:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80049be:	9201      	str	r2, [sp, #4]
 80049c0:	685a      	ldr	r2, [r3, #4]
 80049c2:	9200      	str	r2, [sp, #0]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a21      	ldr	r2, [pc, #132]	; (8004a4c <GrandState_Verita+0x1e6c>)
 80049c8:	2182      	movs	r1, #130	; 0x82
 80049ca:	20dc      	movs	r0, #220	; 0xdc
 80049cc:	f001 fb22 	bl	8006014 <ili9341_WriteStringNoBG>
 80049d0:	e00d      	b.n	80049ee <GrandState_Verita+0x1e0e>
		}else{
			ili9341_WriteString(120, 130, TextDispBuffer, Font20, cl_WHITE, cl_BLACK);
 80049d2:	4b16      	ldr	r3, [pc, #88]	; (8004a2c <GrandState_Verita+0x1e4c>)
 80049d4:	2200      	movs	r2, #0
 80049d6:	9202      	str	r2, [sp, #8]
 80049d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80049dc:	9201      	str	r2, [sp, #4]
 80049de:	685a      	ldr	r2, [r3, #4]
 80049e0:	9200      	str	r2, [sp, #0]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a0b      	ldr	r2, [pc, #44]	; (8004a14 <GrandState_Verita+0x1e34>)
 80049e6:	2182      	movs	r1, #130	; 0x82
 80049e8:	2078      	movs	r0, #120	; 0x78
 80049ea:	f001 fac6 	bl	8005f7a <ili9341_WriteString>
			}

		GrandState = danger;
 80049ee:	4b0c      	ldr	r3, [pc, #48]	; (8004a20 <GrandState_Verita+0x1e40>)
 80049f0:	2210      	movs	r2, #16
 80049f2:	701a      	strb	r2, [r3, #0]
		break;
 80049f4:	e207      	b.n	8004e06 <GrandState_Verita+0x2226>

	case danger:

		if(k_flag.cnt){ //// Back to lobby
 80049f6:	4b08      	ldr	r3, [pc, #32]	; (8004a18 <GrandState_Verita+0x1e38>)
 80049f8:	789b      	ldrb	r3, [r3, #2]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	f000 81fc 	beq.w	8004df8 <GrandState_Verita+0x2218>
			GrandState = pre_lobby;
 8004a00:	4b07      	ldr	r3, [pc, #28]	; (8004a20 <GrandState_Verita+0x1e40>)
 8004a02:	2201      	movs	r2, #1
 8004a04:	701a      	strb	r2, [r3, #0]
			k_flag.cnt = 0;
 8004a06:	4b04      	ldr	r3, [pc, #16]	; (8004a18 <GrandState_Verita+0x1e38>)
 8004a08:	2200      	movs	r2, #0
 8004a0a:	709a      	strb	r2, [r3, #2]
			}
		break;
 8004a0c:	e1f4      	b.n	8004df8 <GrandState_Verita+0x2218>
 8004a0e:	bf00      	nop
 8004a10:	20000230 	.word	0x20000230
 8004a14:	200006b8 	.word	0x200006b8
 8004a18:	20000890 	.word	0x20000890
 8004a1c:	200008ac 	.word	0x200008ac
 8004a20:	20000006 	.word	0x20000006
 8004a24:	20000784 	.word	0x20000784
 8004a28:	40020800 	.word	0x40020800
 8004a2c:	20000238 	.word	0x20000238
 8004a30:	08010100 	.word	0x08010100
 8004a34:	0801010c 	.word	0x0801010c
 8004a38:	0801011c 	.word	0x0801011c
 8004a3c:	0800ff4c 	.word	0x0800ff4c
 8004a40:	0800ff44 	.word	0x0800ff44
 8004a44:	200007f8 	.word	0x200007f8
 8004a48:	0800ff5c 	.word	0x0800ff5c
 8004a4c:	0800ff60 	.word	0x0800ff60
 8004a50:	20000810 	.word	0x20000810

	case pre_about:
		stboxp.choice_set = bpoxy_no;
 8004a54:	4b83      	ldr	r3, [pc, #524]	; (8004c64 <GrandState_Verita+0x2084>)
 8004a56:	2203      	movs	r2, #3
 8004a58:	705a      	strb	r2, [r3, #1]
		ili9341_FillRect(0, 30, 320, 210, cl_BLACK);
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	9300      	str	r3, [sp, #0]
 8004a5e:	23d2      	movs	r3, #210	; 0xd2
 8004a60:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004a64:	211e      	movs	r1, #30
 8004a66:	2000      	movs	r0, #0
 8004a68:	f001 f8de 	bl	8005c28 <ili9341_FillRect>
		ili9341_FillRect(0, 0, 320, 30, cl_DARKGREEN);
 8004a6c:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8004a70:	9300      	str	r3, [sp, #0]
 8004a72:	231e      	movs	r3, #30
 8004a74:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004a78:	2100      	movs	r1, #0
 8004a7a:	2000      	movs	r0, #0
 8004a7c:	f001 f8d4 	bl	8005c28 <ili9341_FillRect>

		ili9341_WriteStringNoBG(80, 5, "About Verita", Font20, cl_BLACK);
 8004a80:	4b79      	ldr	r3, [pc, #484]	; (8004c68 <GrandState_Verita+0x2088>)
 8004a82:	2200      	movs	r2, #0
 8004a84:	9201      	str	r2, [sp, #4]
 8004a86:	685a      	ldr	r2, [r3, #4]
 8004a88:	9200      	str	r2, [sp, #0]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a77      	ldr	r2, [pc, #476]	; (8004c6c <GrandState_Verita+0x208c>)
 8004a8e:	2105      	movs	r1, #5
 8004a90:	2050      	movs	r0, #80	; 0x50
 8004a92:	f001 fabf 	bl	8006014 <ili9341_WriteStringNoBG>

		ili9341_WriteStringNoBG(30, 220,"Next->", Font16, cl_WHITE);
 8004a96:	4b76      	ldr	r3, [pc, #472]	; (8004c70 <GrandState_Verita+0x2090>)
 8004a98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a9c:	9201      	str	r2, [sp, #4]
 8004a9e:	685a      	ldr	r2, [r3, #4]
 8004aa0:	9200      	str	r2, [sp, #0]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a73      	ldr	r2, [pc, #460]	; (8004c74 <GrandState_Verita+0x2094>)
 8004aa6:	21dc      	movs	r1, #220	; 0xdc
 8004aa8:	201e      	movs	r0, #30
 8004aaa:	f001 fab3 	bl	8006014 <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"Verita's Mission is to help the user to check NUCLEO boards' health.");
 8004aae:	4972      	ldr	r1, [pc, #456]	; (8004c78 <GrandState_Verita+0x2098>)
 8004ab0:	4872      	ldr	r0, [pc, #456]	; (8004c7c <GrandState_Verita+0x209c>)
 8004ab2:	f008 fe4b 	bl	800d74c <siprintf>
		ili9341_WriteStringNoBG(20, 35, TextDispBuffer, Font16, cl_WHITE);
 8004ab6:	4b6e      	ldr	r3, [pc, #440]	; (8004c70 <GrandState_Verita+0x2090>)
 8004ab8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004abc:	9201      	str	r2, [sp, #4]
 8004abe:	685a      	ldr	r2, [r3, #4]
 8004ac0:	9200      	str	r2, [sp, #0]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a6d      	ldr	r2, [pc, #436]	; (8004c7c <GrandState_Verita+0x209c>)
 8004ac6:	2123      	movs	r1, #35	; 0x23
 8004ac8:	2014      	movs	r0, #20
 8004aca:	f001 faa3 	bl	8006014 <ili9341_WriteStringNoBG>

		ili9341_WriteStringNoBG(20, 100, "Visit more at:", Font16, cl_WHITE);
 8004ace:	4b68      	ldr	r3, [pc, #416]	; (8004c70 <GrandState_Verita+0x2090>)
 8004ad0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004ad4:	9201      	str	r2, [sp, #4]
 8004ad6:	685a      	ldr	r2, [r3, #4]
 8004ad8:	9200      	str	r2, [sp, #0]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a68      	ldr	r2, [pc, #416]	; (8004c80 <GrandState_Verita+0x20a0>)
 8004ade:	2164      	movs	r1, #100	; 0x64
 8004ae0:	2014      	movs	r0, #20
 8004ae2:	f001 fa97 	bl	8006014 <ili9341_WriteStringNoBG>

		ili9341_WriteStringNoBG(20, 125, "https://", Font16, cl_CYAN);
 8004ae6:	4b62      	ldr	r3, [pc, #392]	; (8004c70 <GrandState_Verita+0x2090>)
 8004ae8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004aec:	9201      	str	r2, [sp, #4]
 8004aee:	685a      	ldr	r2, [r3, #4]
 8004af0:	9200      	str	r2, [sp, #0]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a63      	ldr	r2, [pc, #396]	; (8004c84 <GrandState_Verita+0x20a4>)
 8004af6:	217d      	movs	r1, #125	; 0x7d
 8004af8:	2014      	movs	r0, #20
 8004afa:	f001 fa8b 	bl	8006014 <ili9341_WriteStringNoBG>
		ili9341_WriteStringNoBG(20, 140, "kmutt.me/owlsoffice.verita", Font16, cl_CYAN);
 8004afe:	4b5c      	ldr	r3, [pc, #368]	; (8004c70 <GrandState_Verita+0x2090>)
 8004b00:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004b04:	9201      	str	r2, [sp, #4]
 8004b06:	685a      	ldr	r2, [r3, #4]
 8004b08:	9200      	str	r2, [sp, #0]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a5e      	ldr	r2, [pc, #376]	; (8004c88 <GrandState_Verita+0x20a8>)
 8004b0e:	218c      	movs	r1, #140	; 0x8c
 8004b10:	2014      	movs	r0, #20
 8004b12:	f001 fa7f 	bl	8006014 <ili9341_WriteStringNoBG>
		//owlhor/Verita_NucleoF411RETester
		ili9341_WriteStringNoBG(20, 165, "github.com/owlhor/", Font16, cl_CYAN);
 8004b16:	4b56      	ldr	r3, [pc, #344]	; (8004c70 <GrandState_Verita+0x2090>)
 8004b18:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004b1c:	9201      	str	r2, [sp, #4]
 8004b1e:	685a      	ldr	r2, [r3, #4]
 8004b20:	9200      	str	r2, [sp, #0]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a59      	ldr	r2, [pc, #356]	; (8004c8c <GrandState_Verita+0x20ac>)
 8004b26:	21a5      	movs	r1, #165	; 0xa5
 8004b28:	2014      	movs	r0, #20
 8004b2a:	f001 fa73 	bl	8006014 <ili9341_WriteStringNoBG>
		ili9341_WriteStringNoBG(20, 180, "Verita_NucleoF411RETester", Font16, cl_CYAN);
 8004b2e:	4b50      	ldr	r3, [pc, #320]	; (8004c70 <GrandState_Verita+0x2090>)
 8004b30:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004b34:	9201      	str	r2, [sp, #4]
 8004b36:	685a      	ldr	r2, [r3, #4]
 8004b38:	9200      	str	r2, [sp, #0]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a54      	ldr	r2, [pc, #336]	; (8004c90 <GrandState_Verita+0x20b0>)
 8004b3e:	21b4      	movs	r1, #180	; 0xb4
 8004b40:	2014      	movs	r0, #20
 8004b42:	f001 fa67 	bl	8006014 <ili9341_WriteStringNoBG>

		sprintf(TextDispBuffer,"Program Version: %08X", FW_Master_Ver);
 8004b46:	4a53      	ldr	r2, [pc, #332]	; (8004c94 <GrandState_Verita+0x20b4>)
 8004b48:	4953      	ldr	r1, [pc, #332]	; (8004c98 <GrandState_Verita+0x20b8>)
 8004b4a:	484c      	ldr	r0, [pc, #304]	; (8004c7c <GrandState_Verita+0x209c>)
 8004b4c:	f008 fdfe 	bl	800d74c <siprintf>
		ili9341_WriteStringNoBG(135, 215, TextDispBuffer, Font12, cl_NAVY);
 8004b50:	4b52      	ldr	r3, [pc, #328]	; (8004c9c <GrandState_Verita+0x20bc>)
 8004b52:	220f      	movs	r2, #15
 8004b54:	9201      	str	r2, [sp, #4]
 8004b56:	685a      	ldr	r2, [r3, #4]
 8004b58:	9200      	str	r2, [sp, #0]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a47      	ldr	r2, [pc, #284]	; (8004c7c <GrandState_Verita+0x209c>)
 8004b5e:	21d7      	movs	r1, #215	; 0xd7
 8004b60:	2087      	movs	r0, #135	; 0x87
 8004b62:	f001 fa57 	bl	8006014 <ili9341_WriteStringNoBG>

		GrandState = about;
 8004b66:	4b4e      	ldr	r3, [pc, #312]	; (8004ca0 <GrandState_Verita+0x20c0>)
 8004b68:	2212      	movs	r2, #18
 8004b6a:	701a      	strb	r2, [r3, #0]
		break; ////pre_about
 8004b6c:	e14b      	b.n	8004e06 <GrandState_Verita+0x2226>

	case about:
		stboxp.choice_set = bpoxy_def;
 8004b6e:	4b3d      	ldr	r3, [pc, #244]	; (8004c64 <GrandState_Verita+0x2084>)
 8004b70:	2200      	movs	r2, #0
 8004b72:	705a      	strb	r2, [r3, #1]

		if(k_flag.cnt){ //// Back to lobby
 8004b74:	4b4b      	ldr	r3, [pc, #300]	; (8004ca4 <GrandState_Verita+0x20c4>)
 8004b76:	789b      	ldrb	r3, [r3, #2]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	f000 813f 	beq.w	8004dfc <GrandState_Verita+0x221c>
			GrandState = pre_author;
 8004b7e:	4b48      	ldr	r3, [pc, #288]	; (8004ca0 <GrandState_Verita+0x20c0>)
 8004b80:	2213      	movs	r2, #19
 8004b82:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(RelayClient_GPIO_Port, RelayClient_Pin, GPIO_PIN_RESET);
 8004b84:	2200      	movs	r2, #0
 8004b86:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004b8a:	4847      	ldr	r0, [pc, #284]	; (8004ca8 <GrandState_Verita+0x20c8>)
 8004b8c:	f002 fdbc 	bl	8007708 <HAL_GPIO_WritePin>
			k_flag.cnt = 0;
 8004b90:	4b44      	ldr	r3, [pc, #272]	; (8004ca4 <GrandState_Verita+0x20c4>)
 8004b92:	2200      	movs	r2, #0
 8004b94:	709a      	strb	r2, [r3, #2]
			}
		break; ////about
 8004b96:	e131      	b.n	8004dfc <GrandState_Verita+0x221c>

	case pre_author:
			stboxp.choice_set = bpoxy_def;
 8004b98:	4b32      	ldr	r3, [pc, #200]	; (8004c64 <GrandState_Verita+0x2084>)
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	705a      	strb	r2, [r3, #1]
			ili9341_FillRect(0, 30, 320, 210, cl_BLACK);
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	9300      	str	r3, [sp, #0]
 8004ba2:	23d2      	movs	r3, #210	; 0xd2
 8004ba4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004ba8:	211e      	movs	r1, #30
 8004baa:	2000      	movs	r0, #0
 8004bac:	f001 f83c 	bl	8005c28 <ili9341_FillRect>
			ili9341_FillRect(0, 0, 320, 30, cl_DARKGREEN);
 8004bb0:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8004bb4:	9300      	str	r3, [sp, #0]
 8004bb6:	231e      	movs	r3, #30
 8004bb8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004bbc:	2100      	movs	r1, #0
 8004bbe:	2000      	movs	r0, #0
 8004bc0:	f001 f832 	bl	8005c28 <ili9341_FillRect>

			ili9341_WriteStringNoBG(100, 5, "Authors", Font20, cl_BLACK);
 8004bc4:	4b28      	ldr	r3, [pc, #160]	; (8004c68 <GrandState_Verita+0x2088>)
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	9201      	str	r2, [sp, #4]
 8004bca:	685a      	ldr	r2, [r3, #4]
 8004bcc:	9200      	str	r2, [sp, #0]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a36      	ldr	r2, [pc, #216]	; (8004cac <GrandState_Verita+0x20cc>)
 8004bd2:	2105      	movs	r1, #5
 8004bd4:	2064      	movs	r0, #100	; 0x64
 8004bd6:	f001 fa1d 	bl	8006014 <ili9341_WriteStringNoBG>
			ili9341_WriteStringNoBG(25, 35, "Wipop Panyatipsakul", Font16, cl_WHITE);
 8004bda:	4b25      	ldr	r3, [pc, #148]	; (8004c70 <GrandState_Verita+0x2090>)
 8004bdc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004be0:	9201      	str	r2, [sp, #4]
 8004be2:	685a      	ldr	r2, [r3, #4]
 8004be4:	9200      	str	r2, [sp, #0]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a31      	ldr	r2, [pc, #196]	; (8004cb0 <GrandState_Verita+0x20d0>)
 8004bea:	2123      	movs	r1, #35	; 0x23
 8004bec:	2019      	movs	r0, #25
 8004bee:	f001 fa11 	bl	8006014 <ili9341_WriteStringNoBG>
			ili9341_WriteStringNoBG(25, 55, "owl_hor | FRAB#7 FIBO", Font16, cl_WHITE);
 8004bf2:	4b1f      	ldr	r3, [pc, #124]	; (8004c70 <GrandState_Verita+0x2090>)
 8004bf4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004bf8:	9201      	str	r2, [sp, #4]
 8004bfa:	685a      	ldr	r2, [r3, #4]
 8004bfc:	9200      	str	r2, [sp, #0]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a2c      	ldr	r2, [pc, #176]	; (8004cb4 <GrandState_Verita+0x20d4>)
 8004c02:	2137      	movs	r1, #55	; 0x37
 8004c04:	2019      	movs	r0, #25
 8004c06:	f001 fa05 	bl	8006014 <ili9341_WriteStringNoBG>

			ili9341_WriteStringNoBG(40, 220, "Press Knob to continue", Font12, cl_WHITE);
 8004c0a:	4b24      	ldr	r3, [pc, #144]	; (8004c9c <GrandState_Verita+0x20bc>)
 8004c0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004c10:	9201      	str	r2, [sp, #4]
 8004c12:	685a      	ldr	r2, [r3, #4]
 8004c14:	9200      	str	r2, [sp, #0]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a27      	ldr	r2, [pc, #156]	; (8004cb8 <GrandState_Verita+0x20d8>)
 8004c1a:	21dc      	movs	r1, #220	; 0xdc
 8004c1c:	2028      	movs	r0, #40	; 0x28
 8004c1e:	f001 f9f9 	bl	8006014 <ili9341_WriteStringNoBG>

			ili9341_DrawRGBImage(20, 90, 128, 128, (uint16_t*)px4_PIC_owlhor_VI_b);
 8004c22:	4b26      	ldr	r3, [pc, #152]	; (8004cbc <GrandState_Verita+0x20dc>)
 8004c24:	9300      	str	r3, [sp, #0]
 8004c26:	2380      	movs	r3, #128	; 0x80
 8004c28:	2280      	movs	r2, #128	; 0x80
 8004c2a:	215a      	movs	r1, #90	; 0x5a
 8004c2c:	2014      	movs	r0, #20
 8004c2e:	f001 f85e 	bl	8005cee <ili9341_DrawRGBImage>
			ili9341_DrawRGBImage(170, 90, 128, 128, (uint16_t*)px3_PIC_wipop_sc);
 8004c32:	4b23      	ldr	r3, [pc, #140]	; (8004cc0 <GrandState_Verita+0x20e0>)
 8004c34:	9300      	str	r3, [sp, #0]
 8004c36:	2380      	movs	r3, #128	; 0x80
 8004c38:	2280      	movs	r2, #128	; 0x80
 8004c3a:	215a      	movs	r1, #90	; 0x5a
 8004c3c:	20aa      	movs	r0, #170	; 0xaa
 8004c3e:	f001 f856 	bl	8005cee <ili9341_DrawRGBImage>

			GrandState = author;
 8004c42:	4b17      	ldr	r3, [pc, #92]	; (8004ca0 <GrandState_Verita+0x20c0>)
 8004c44:	2214      	movs	r2, #20
 8004c46:	701a      	strb	r2, [r3, #0]
			break; ////pre_author
 8004c48:	e0dd      	b.n	8004e06 <GrandState_Verita+0x2226>

	case author:

			if(k_flag.cnt){ //// Back to lobby
 8004c4a:	4b16      	ldr	r3, [pc, #88]	; (8004ca4 <GrandState_Verita+0x20c4>)
 8004c4c:	789b      	ldrb	r3, [r3, #2]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	f000 80d6 	beq.w	8004e00 <GrandState_Verita+0x2220>
			GrandState = pre_ppun;
 8004c54:	4b12      	ldr	r3, [pc, #72]	; (8004ca0 <GrandState_Verita+0x20c0>)
 8004c56:	2215      	movs	r2, #21
 8004c58:	701a      	strb	r2, [r3, #0]
			k_flag.cnt = 0;
 8004c5a:	4b12      	ldr	r3, [pc, #72]	; (8004ca4 <GrandState_Verita+0x20c4>)
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	709a      	strb	r2, [r3, #2]
			}
			break; ////author
 8004c60:	e0ce      	b.n	8004e00 <GrandState_Verita+0x2220>
 8004c62:	bf00      	nop
 8004c64:	200008ac 	.word	0x200008ac
 8004c68:	20000238 	.word	0x20000238
 8004c6c:	0800fe64 	.word	0x0800fe64
 8004c70:	20000230 	.word	0x20000230
 8004c74:	08010130 	.word	0x08010130
 8004c78:	08010138 	.word	0x08010138
 8004c7c:	200006b8 	.word	0x200006b8
 8004c80:	08010180 	.word	0x08010180
 8004c84:	08010190 	.word	0x08010190
 8004c88:	0801019c 	.word	0x0801019c
 8004c8c:	080101b8 	.word	0x080101b8
 8004c90:	080101cc 	.word	0x080101cc
 8004c94:	10260523 	.word	0x10260523
 8004c98:	080101e8 	.word	0x080101e8
 8004c9c:	20000228 	.word	0x20000228
 8004ca0:	20000006 	.word	0x20000006
 8004ca4:	20000890 	.word	0x20000890
 8004ca8:	40020800 	.word	0x40020800
 8004cac:	08010200 	.word	0x08010200
 8004cb0:	08010208 	.word	0x08010208
 8004cb4:	0801021c 	.word	0x0801021c
 8004cb8:	08010234 	.word	0x08010234
 8004cbc:	0802808c 	.word	0x0802808c
 8004cc0:	0802008c 	.word	0x0802008c

	case pre_ppun:
		stboxp.choice_set = bpoxy_no;
 8004cc4:	4b52      	ldr	r3, [pc, #328]	; (8004e10 <GrandState_Verita+0x2230>)
 8004cc6:	2203      	movs	r2, #3
 8004cc8:	705a      	strb	r2, [r3, #1]
		ili9341_FillRect(0, 30, 320, 210, cl_BLACK);
 8004cca:	2300      	movs	r3, #0
 8004ccc:	9300      	str	r3, [sp, #0]
 8004cce:	23d2      	movs	r3, #210	; 0xd2
 8004cd0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004cd4:	211e      	movs	r1, #30
 8004cd6:	2000      	movs	r0, #0
 8004cd8:	f000 ffa6 	bl	8005c28 <ili9341_FillRect>
		ili9341_FillRect(0, 0, 320, 30, cl_DARKGREEN);
 8004cdc:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8004ce0:	9300      	str	r3, [sp, #0]
 8004ce2:	231e      	movs	r3, #30
 8004ce4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004ce8:	2100      	movs	r1, #0
 8004cea:	2000      	movs	r0, #0
 8004cec:	f000 ff9c 	bl	8005c28 <ili9341_FillRect>

		ili9341_WriteStringNoBG(100, 5, "Advisors", Font20, cl_BLACK);
 8004cf0:	4b48      	ldr	r3, [pc, #288]	; (8004e14 <GrandState_Verita+0x2234>)
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	9201      	str	r2, [sp, #4]
 8004cf6:	685a      	ldr	r2, [r3, #4]
 8004cf8:	9200      	str	r2, [sp, #0]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a46      	ldr	r2, [pc, #280]	; (8004e18 <GrandState_Verita+0x2238>)
 8004cfe:	2105      	movs	r1, #5
 8004d00:	2064      	movs	r0, #100	; 0x64
 8004d02:	f001 f987 	bl	8006014 <ili9341_WriteStringNoBG>
		ili9341_WriteStringNoBG(10, 35, "#include", Font12, cl_CYAN);
 8004d06:	4b45      	ldr	r3, [pc, #276]	; (8004e1c <GrandState_Verita+0x223c>)
 8004d08:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004d0c:	9201      	str	r2, [sp, #4]
 8004d0e:	685a      	ldr	r2, [r3, #4]
 8004d10:	9200      	str	r2, [sp, #0]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a42      	ldr	r2, [pc, #264]	; (8004e20 <GrandState_Verita+0x2240>)
 8004d16:	2123      	movs	r1, #35	; 0x23
 8004d18:	200a      	movs	r0, #10
 8004d1a:	f001 f97b 	bl	8006014 <ili9341_WriteStringNoBG>
		ili9341_WriteStringNoBG(10, 52, "#include", Font12, cl_CYAN);
 8004d1e:	4b3f      	ldr	r3, [pc, #252]	; (8004e1c <GrandState_Verita+0x223c>)
 8004d20:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004d24:	9201      	str	r2, [sp, #4]
 8004d26:	685a      	ldr	r2, [r3, #4]
 8004d28:	9200      	str	r2, [sp, #0]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a3c      	ldr	r2, [pc, #240]	; (8004e20 <GrandState_Verita+0x2240>)
 8004d2e:	2134      	movs	r1, #52	; 0x34
 8004d30:	200a      	movs	r0, #10
 8004d32:	f001 f96f 	bl	8006014 <ili9341_WriteStringNoBG>

		ili9341_WriteStringNoBG(75, 35, "Aj PI Pitiwut Teerakittikul", Font12, cl_WHITE);
 8004d36:	4b39      	ldr	r3, [pc, #228]	; (8004e1c <GrandState_Verita+0x223c>)
 8004d38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004d3c:	9201      	str	r2, [sp, #4]
 8004d3e:	685a      	ldr	r2, [r3, #4]
 8004d40:	9200      	str	r2, [sp, #0]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a37      	ldr	r2, [pc, #220]	; (8004e24 <GrandState_Verita+0x2244>)
 8004d46:	2123      	movs	r1, #35	; 0x23
 8004d48:	204b      	movs	r0, #75	; 0x4b
 8004d4a:	f001 f963 	bl	8006014 <ili9341_WriteStringNoBG>
		ili9341_WriteStringNoBG(75, 52, "P PUN Puttinart Archeewawanich", Font12, cl_WHITE);
 8004d4e:	4b33      	ldr	r3, [pc, #204]	; (8004e1c <GrandState_Verita+0x223c>)
 8004d50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004d54:	9201      	str	r2, [sp, #4]
 8004d56:	685a      	ldr	r2, [r3, #4]
 8004d58:	9200      	str	r2, [sp, #0]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a32      	ldr	r2, [pc, #200]	; (8004e28 <GrandState_Verita+0x2248>)
 8004d5e:	2134      	movs	r1, #52	; 0x34
 8004d60:	204b      	movs	r0, #75	; 0x4b
 8004d62:	f001 f957 	bl	8006014 <ili9341_WriteStringNoBG>

		ili9341_WriteStringNoBG(40, 220, "Press Knob & Back to lobby", Font12, cl_WHITE);
 8004d66:	4b2d      	ldr	r3, [pc, #180]	; (8004e1c <GrandState_Verita+0x223c>)
 8004d68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004d6c:	9201      	str	r2, [sp, #4]
 8004d6e:	685a      	ldr	r2, [r3, #4]
 8004d70:	9200      	str	r2, [sp, #0]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a2d      	ldr	r2, [pc, #180]	; (8004e2c <GrandState_Verita+0x224c>)
 8004d76:	21dc      	movs	r1, #220	; 0xdc
 8004d78:	2028      	movs	r0, #40	; 0x28
 8004d7a:	f001 f94b 	bl	8006014 <ili9341_WriteStringNoBG>
		ili9341_WriteStringNoBG(30, 70, "Positive Aura: No crash", Font16, cl_GREENYELLOW);
 8004d7e:	4b2c      	ldr	r3, [pc, #176]	; (8004e30 <GrandState_Verita+0x2250>)
 8004d80:	f64a 72e5 	movw	r2, #45029	; 0xafe5
 8004d84:	9201      	str	r2, [sp, #4]
 8004d86:	685a      	ldr	r2, [r3, #4]
 8004d88:	9200      	str	r2, [sp, #0]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a29      	ldr	r2, [pc, #164]	; (8004e34 <GrandState_Verita+0x2254>)
 8004d8e:	2146      	movs	r1, #70	; 0x46
 8004d90:	201e      	movs	r0, #30
 8004d92:	f001 f93f 	bl	8006014 <ili9341_WriteStringNoBG>

		ili9341_DrawRGBImage(20, 90, 128, 128, (uint16_t*)px0_PIC_ajpi);
 8004d96:	4b28      	ldr	r3, [pc, #160]	; (8004e38 <GrandState_Verita+0x2258>)
 8004d98:	9300      	str	r3, [sp, #0]
 8004d9a:	2380      	movs	r3, #128	; 0x80
 8004d9c:	2280      	movs	r2, #128	; 0x80
 8004d9e:	215a      	movs	r1, #90	; 0x5a
 8004da0:	2014      	movs	r0, #20
 8004da2:	f000 ffa4 	bl	8005cee <ili9341_DrawRGBImage>
		ili9341_DrawRGBImage(170, 90, 126, 127, (uint16_t*)px1_PIC_ppun);
 8004da6:	4b25      	ldr	r3, [pc, #148]	; (8004e3c <GrandState_Verita+0x225c>)
 8004da8:	9300      	str	r3, [sp, #0]
 8004daa:	237f      	movs	r3, #127	; 0x7f
 8004dac:	227e      	movs	r2, #126	; 0x7e
 8004dae:	215a      	movs	r1, #90	; 0x5a
 8004db0:	20aa      	movs	r0, #170	; 0xaa
 8004db2:	f000 ff9c 	bl	8005cee <ili9341_DrawRGBImage>

		GrandState = ppun;
 8004db6:	4b22      	ldr	r3, [pc, #136]	; (8004e40 <GrandState_Verita+0x2260>)
 8004db8:	2216      	movs	r2, #22
 8004dba:	701a      	strb	r2, [r3, #0]
		break; ////pre_ppun
 8004dbc:	e023      	b.n	8004e06 <GrandState_Verita+0x2226>

	case ppun:

		if(k_flag.cnt){ //// Back to lobby
 8004dbe:	4b21      	ldr	r3, [pc, #132]	; (8004e44 <GrandState_Verita+0x2264>)
 8004dc0:	789b      	ldrb	r3, [r3, #2]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d01e      	beq.n	8004e04 <GrandState_Verita+0x2224>
		GrandState = pre_lobby;
 8004dc6:	4b1e      	ldr	r3, [pc, #120]	; (8004e40 <GrandState_Verita+0x2260>)
 8004dc8:	2201      	movs	r2, #1
 8004dca:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(RelayClient_GPIO_Port, RelayClient_Pin, GPIO_PIN_RESET);
 8004dcc:	2200      	movs	r2, #0
 8004dce:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004dd2:	481d      	ldr	r0, [pc, #116]	; (8004e48 <GrandState_Verita+0x2268>)
 8004dd4:	f002 fc98 	bl	8007708 <HAL_GPIO_WritePin>
		k_flag.cnt = 0;
 8004dd8:	4b1a      	ldr	r3, [pc, #104]	; (8004e44 <GrandState_Verita+0x2264>)
 8004dda:	2200      	movs	r2, #0
 8004ddc:	709a      	strb	r2, [r3, #2]
		}
		break; ////ppun
 8004dde:	e011      	b.n	8004e04 <GrandState_Verita+0x2224>
		break; // lobby
 8004de0:	bf00      	nop
 8004de2:	e010      	b.n	8004e06 <GrandState_Verita+0x2226>
		break;
 8004de4:	bf00      	nop
 8004de6:	e00e      	b.n	8004e06 <GrandState_Verita+0x2226>
		break; //hw_chk
 8004de8:	bf00      	nop
 8004dea:	e00c      	b.n	8004e06 <GrandState_Verita+0x2226>
		break;
 8004dec:	bf00      	nop
 8004dee:	e00a      	b.n	8004e06 <GrandState_Verita+0x2226>
			break; //gpio_chk
 8004df0:	bf00      	nop
 8004df2:	e008      	b.n	8004e06 <GrandState_Verita+0x2226>
		break; // monitor
 8004df4:	bf00      	nop
 8004df6:	e006      	b.n	8004e06 <GrandState_Verita+0x2226>
		break;
 8004df8:	bf00      	nop
 8004dfa:	e004      	b.n	8004e06 <GrandState_Verita+0x2226>
		break; ////about
 8004dfc:	bf00      	nop
 8004dfe:	e002      	b.n	8004e06 <GrandState_Verita+0x2226>
			break; ////author
 8004e00:	bf00      	nop
 8004e02:	e000      	b.n	8004e06 <GrandState_Verita+0x2226>
		break; ////ppun
 8004e04:	bf00      	nop
	}
}
 8004e06:	bf00      	nop
 8004e08:	370c      	adds	r7, #12
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd90      	pop	{r4, r7, pc}
 8004e0e:	bf00      	nop
 8004e10:	200008ac 	.word	0x200008ac
 8004e14:	20000238 	.word	0x20000238
 8004e18:	0801024c 	.word	0x0801024c
 8004e1c:	20000228 	.word	0x20000228
 8004e20:	08010258 	.word	0x08010258
 8004e24:	08010264 	.word	0x08010264
 8004e28:	08010280 	.word	0x08010280
 8004e2c:	080102a0 	.word	0x080102a0
 8004e30:	20000230 	.word	0x20000230
 8004e34:	080102bc 	.word	0x080102bc
 8004e38:	08010388 	.word	0x08010388
 8004e3c:	08018388 	.word	0x08018388
 8004e40:	20000006 	.word	0x20000006
 8004e44:	20000890 	.word	0x20000890
 8004e48:	40020800 	.word	0x40020800
 8004e4c:	00000000 	.word	0x00000000

08004e50 <ADCTVolta>:

float ADCTVolta(uint16_t btt){return (btt /4096.0) * 3.3;}
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b082      	sub	sp, #8
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	4603      	mov	r3, r0
 8004e58:	80fb      	strh	r3, [r7, #6]
 8004e5a:	88fb      	ldrh	r3, [r7, #6]
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f7fb fb69 	bl	8000534 <__aeabi_i2d>
 8004e62:	f04f 0200 	mov.w	r2, #0
 8004e66:	4b10      	ldr	r3, [pc, #64]	; (8004ea8 <ADCTVolta+0x58>)
 8004e68:	f7fb fcf8 	bl	800085c <__aeabi_ddiv>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	460b      	mov	r3, r1
 8004e70:	4610      	mov	r0, r2
 8004e72:	4619      	mov	r1, r3
 8004e74:	a30a      	add	r3, pc, #40	; (adr r3, 8004ea0 <ADCTVolta+0x50>)
 8004e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e7a:	f7fb fbc5 	bl	8000608 <__aeabi_dmul>
 8004e7e:	4602      	mov	r2, r0
 8004e80:	460b      	mov	r3, r1
 8004e82:	4610      	mov	r0, r2
 8004e84:	4619      	mov	r1, r3
 8004e86:	f7fb feb7 	bl	8000bf8 <__aeabi_d2f>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	ee07 3a90 	vmov	s15, r3
 8004e90:	eeb0 0a67 	vmov.f32	s0, s15
 8004e94:	3708      	adds	r7, #8
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
 8004e9a:	bf00      	nop
 8004e9c:	f3af 8000 	nop.w
 8004ea0:	66666666 	.word	0x66666666
 8004ea4:	400a6666 	.word	0x400a6666
 8004ea8:	40b00000 	.word	0x40b00000
 8004eac:	00000000 	.word	0x00000000

08004eb0 <TempEquat>:
float TempEquat(float Vs){
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b082      	sub	sp, #8
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	ed87 0a01 	vstr	s0, [r7, #4]
	//Vs = V tmp read , V25= 0.76V, Avg_slope = 2.5 mV
	return ((Vs - 0.76)/(0.0025)) + 25.0; //2.5*0.001
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f7fb fb4c 	bl	8000558 <__aeabi_f2d>
 8004ec0:	a314      	add	r3, pc, #80	; (adr r3, 8004f14 <TempEquat+0x64>)
 8004ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ec6:	f7fb f9e7 	bl	8000298 <__aeabi_dsub>
 8004eca:	4602      	mov	r2, r0
 8004ecc:	460b      	mov	r3, r1
 8004ece:	4610      	mov	r0, r2
 8004ed0:	4619      	mov	r1, r3
 8004ed2:	a312      	add	r3, pc, #72	; (adr r3, 8004f1c <TempEquat+0x6c>)
 8004ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ed8:	f7fb fcc0 	bl	800085c <__aeabi_ddiv>
 8004edc:	4602      	mov	r2, r0
 8004ede:	460b      	mov	r3, r1
 8004ee0:	4610      	mov	r0, r2
 8004ee2:	4619      	mov	r1, r3
 8004ee4:	f04f 0200 	mov.w	r2, #0
 8004ee8:	4b09      	ldr	r3, [pc, #36]	; (8004f10 <TempEquat+0x60>)
 8004eea:	f7fb f9d7 	bl	800029c <__adddf3>
 8004eee:	4602      	mov	r2, r0
 8004ef0:	460b      	mov	r3, r1
 8004ef2:	4610      	mov	r0, r2
 8004ef4:	4619      	mov	r1, r3
 8004ef6:	f7fb fe7f 	bl	8000bf8 <__aeabi_d2f>
 8004efa:	4603      	mov	r3, r0
 8004efc:	ee07 3a90 	vmov	s15, r3
}
 8004f00:	eeb0 0a67 	vmov.f32	s0, s15
 8004f04:	3708      	adds	r7, #8
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	bf00      	nop
 8004f0c:	f3af 8000 	nop.w
 8004f10:	40390000 	.word	0x40390000
 8004f14:	851eb852 	.word	0x851eb852
 8004f18:	3fe851eb 	.word	0x3fe851eb
 8004f1c:	47ae147b 	.word	0x47ae147b
 8004f20:	3f647ae1 	.word	0x3f647ae1

08004f24 <resetgpio_char>:
		 tyyy |= ( GPIO_NOPULL << (9 * 2U));
		 tyyy |= ( GPIO_NOPULL << (10 * 2U));
		 GPIOA->PUPDR = tyyy;
}

void resetgpio_char(){
 8004f24:	b580      	push	{r7, lr}
 8004f26:	af00      	add	r7, sp, #0

	sprintf(WR_A_PUPDR, "A_PUR: ");
 8004f28:	4912      	ldr	r1, [pc, #72]	; (8004f74 <resetgpio_char+0x50>)
 8004f2a:	4813      	ldr	r0, [pc, #76]	; (8004f78 <resetgpio_char+0x54>)
 8004f2c:	f008 fc0e 	bl	800d74c <siprintf>
	sprintf(WR_B_PUPDR, "B_PUR: ");
 8004f30:	4912      	ldr	r1, [pc, #72]	; (8004f7c <resetgpio_char+0x58>)
 8004f32:	4813      	ldr	r0, [pc, #76]	; (8004f80 <resetgpio_char+0x5c>)
 8004f34:	f008 fc0a 	bl	800d74c <siprintf>
	sprintf(WR_C_PUPDR, "C_PUR: ");
 8004f38:	4912      	ldr	r1, [pc, #72]	; (8004f84 <resetgpio_char+0x60>)
 8004f3a:	4813      	ldr	r0, [pc, #76]	; (8004f88 <resetgpio_char+0x64>)
 8004f3c:	f008 fc06 	bl	800d74c <siprintf>

	sprintf(WR_A_OPP, "A_OPP: ");
 8004f40:	4912      	ldr	r1, [pc, #72]	; (8004f8c <resetgpio_char+0x68>)
 8004f42:	4813      	ldr	r0, [pc, #76]	; (8004f90 <resetgpio_char+0x6c>)
 8004f44:	f008 fc02 	bl	800d74c <siprintf>
	sprintf(WR_B_OPP, "B_OPP: ");
 8004f48:	4912      	ldr	r1, [pc, #72]	; (8004f94 <resetgpio_char+0x70>)
 8004f4a:	4813      	ldr	r0, [pc, #76]	; (8004f98 <resetgpio_char+0x74>)
 8004f4c:	f008 fbfe 	bl	800d74c <siprintf>
	sprintf(WR_C_OPP, "C_OPP: ");
 8004f50:	4912      	ldr	r1, [pc, #72]	; (8004f9c <resetgpio_char+0x78>)
 8004f52:	4813      	ldr	r0, [pc, #76]	; (8004fa0 <resetgpio_char+0x7c>)
 8004f54:	f008 fbfa 	bl	800d74c <siprintf>

	sprintf(WR_A_OOD, "A_OOD: ");
 8004f58:	4912      	ldr	r1, [pc, #72]	; (8004fa4 <resetgpio_char+0x80>)
 8004f5a:	4813      	ldr	r0, [pc, #76]	; (8004fa8 <resetgpio_char+0x84>)
 8004f5c:	f008 fbf6 	bl	800d74c <siprintf>
	sprintf(WR_B_OOD, "B_OOD: ");
 8004f60:	4912      	ldr	r1, [pc, #72]	; (8004fac <resetgpio_char+0x88>)
 8004f62:	4813      	ldr	r0, [pc, #76]	; (8004fb0 <resetgpio_char+0x8c>)
 8004f64:	f008 fbf2 	bl	800d74c <siprintf>
	sprintf(WR_C_OOD, "C_OOD: ");
 8004f68:	4912      	ldr	r1, [pc, #72]	; (8004fb4 <resetgpio_char+0x90>)
 8004f6a:	4813      	ldr	r0, [pc, #76]	; (8004fb8 <resetgpio_char+0x94>)
 8004f6c:	f008 fbee 	bl	800d74c <siprintf>
}
 8004f70:	bf00      	nop
 8004f72:	bd80      	pop	{r7, pc}
 8004f74:	080102d4 	.word	0x080102d4
 8004f78:	2000005c 	.word	0x2000005c
 8004f7c:	080102dc 	.word	0x080102dc
 8004f80:	2000007c 	.word	0x2000007c
 8004f84:	080102e4 	.word	0x080102e4
 8004f88:	2000009c 	.word	0x2000009c
 8004f8c:	080102ec 	.word	0x080102ec
 8004f90:	200000bc 	.word	0x200000bc
 8004f94:	080102f4 	.word	0x080102f4
 8004f98:	200000dc 	.word	0x200000dc
 8004f9c:	080102fc 	.word	0x080102fc
 8004fa0:	200000fc 	.word	0x200000fc
 8004fa4:	08010304 	.word	0x08010304
 8004fa8:	2000011c 	.word	0x2000011c
 8004fac:	0801030c 	.word	0x0801030c
 8004fb0:	2000013c 	.word	0x2000013c
 8004fb4:	08010314 	.word	0x08010314
 8004fb8:	2000015c 	.word	0x2000015c

08004fbc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b082      	sub	sp, #8
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13){
 8004fc6:	88fb      	ldrh	r3, [r7, #6]
 8004fc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fcc:	d10f      	bne.n	8004fee <HAL_GPIO_EXTI_Callback+0x32>
		//INA219_BitReset(&hi2c1, INA219_ADDR_1);
		buzzr.flag = 8;
 8004fce:	4b0e      	ldr	r3, [pc, #56]	; (8005008 <HAL_GPIO_EXTI_Callback+0x4c>)
 8004fd0:	2208      	movs	r2, #8
 8004fd2:	701a      	strb	r2, [r3, #0]
		buzzr.priod_up = 250;
 8004fd4:	4b0c      	ldr	r3, [pc, #48]	; (8005008 <HAL_GPIO_EXTI_Callback+0x4c>)
 8004fd6:	22fa      	movs	r2, #250	; 0xfa
 8004fd8:	805a      	strh	r2, [r3, #2]
		buzzr.priod_dn = 100;
 8004fda:	4b0b      	ldr	r3, [pc, #44]	; (8005008 <HAL_GPIO_EXTI_Callback+0x4c>)
 8004fdc:	2264      	movs	r2, #100	; 0x64
 8004fde:	809a      	strh	r2, [r3, #4]
		buzzer_scream_cnt();
 8004fe0:	f7fd fd86 	bl	8002af0 <buzzer_scream_cnt>
		//// bootloader test
		//GrandState = s_bootloader;
		//GrandState = init;

		Tx_UART_Verita_Command(&huart6, VRC_Flag_ger, VRF_GPIO_Runalltest);
 8004fe4:	2202      	movs	r2, #2
 8004fe6:	21a1      	movs	r1, #161	; 0xa1
 8004fe8:	4808      	ldr	r0, [pc, #32]	; (800500c <HAL_GPIO_EXTI_Callback+0x50>)
 8004fea:	f7fc fb21 	bl	8001630 <Tx_UART_Verita_Command>
		//Tx_UART_Verita_Command(&huart6, VRC_Request, VR_FWID);

		}

	//// knob rotter button pressed
	if(GPIO_Pin == GPIO_PIN_7){
 8004fee:	88fb      	ldrh	r3, [r7, #6]
 8004ff0:	2b80      	cmp	r3, #128	; 0x80
 8004ff2:	d105      	bne.n	8005000 <HAL_GPIO_EXTI_Callback+0x44>
		k_flag.cnt++;
 8004ff4:	4b06      	ldr	r3, [pc, #24]	; (8005010 <HAL_GPIO_EXTI_Callback+0x54>)
 8004ff6:	789b      	ldrb	r3, [r3, #2]
 8004ff8:	3301      	adds	r3, #1
 8004ffa:	b2da      	uxtb	r2, r3
 8004ffc:	4b04      	ldr	r3, [pc, #16]	; (8005010 <HAL_GPIO_EXTI_Callback+0x54>)
 8004ffe:	709a      	strb	r2, [r3, #2]
	}
}
 8005000:	bf00      	nop
 8005002:	3708      	adds	r7, #8
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}
 8005008:	20000878 	.word	0x20000878
 800500c:	20000614 	.word	0x20000614
 8005010:	20000890 	.word	0x20000890

08005014 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b082      	sub	sp, #8
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
	if(htim == &htim10){
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	4a07      	ldr	r2, [pc, #28]	; (800503c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d106      	bne.n	8005032 <HAL_TIM_PeriodElapsedCallback+0x1e>
		_millis++;
 8005024:	4b06      	ldr	r3, [pc, #24]	; (8005040 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	3301      	adds	r3, #1
 800502a:	4a05      	ldr	r2, [pc, #20]	; (8005040 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800502c:	6013      	str	r3, [r2, #0]
		//// Timer interrupt
		buzzer_scream_cnt();
 800502e:	f7fd fd5f 	bl	8002af0 <buzzer_scream_cnt>
	}
}
 8005032:	bf00      	nop
 8005034:	3708      	adds	r7, #8
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}
 800503a:	bf00      	nop
 800503c:	20000544 	.word	0x20000544
 8005040:	20000870 	.word	0x20000870

08005044 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b082      	sub	sp, #8
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
	Rx_Verita_engine_callBak(RxBufferMtCl, &VRB_CL); //// try using only 1 slot 9 Buffer
 800504c:	4905      	ldr	r1, [pc, #20]	; (8005064 <HAL_UART_RxCpltCallback+0x20>)
 800504e:	4806      	ldr	r0, [pc, #24]	; (8005068 <HAL_UART_RxCpltCallback+0x24>)
 8005050:	f7fc f97e 	bl	8001350 <Rx_Verita_engine_callBak>
	Tx_Rq_Verita_engine(&huart6, &VRB_CL);
 8005054:	4903      	ldr	r1, [pc, #12]	; (8005064 <HAL_UART_RxCpltCallback+0x20>)
 8005056:	4805      	ldr	r0, [pc, #20]	; (800506c <HAL_UART_RxCpltCallback+0x28>)
 8005058:	f7fc fa70 	bl	800153c <Tx_Rq_Verita_engine>
}
 800505c:	bf00      	nop
 800505e:	3708      	adds	r7, #8
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}
 8005064:	20000784 	.word	0x20000784
 8005068:	200007e8 	.word	0x200007e8
 800506c:	20000614 	.word	0x20000614

08005070 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005070:	b480      	push	{r7}
 8005072:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005074:	b672      	cpsid	i
}
 8005076:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005078:	e7fe      	b.n	8005078 <Error_Handler+0x8>
	...

0800507c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b082      	sub	sp, #8
 8005080:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005082:	2300      	movs	r3, #0
 8005084:	607b      	str	r3, [r7, #4]
 8005086:	4b10      	ldr	r3, [pc, #64]	; (80050c8 <HAL_MspInit+0x4c>)
 8005088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800508a:	4a0f      	ldr	r2, [pc, #60]	; (80050c8 <HAL_MspInit+0x4c>)
 800508c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005090:	6453      	str	r3, [r2, #68]	; 0x44
 8005092:	4b0d      	ldr	r3, [pc, #52]	; (80050c8 <HAL_MspInit+0x4c>)
 8005094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005096:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800509a:	607b      	str	r3, [r7, #4]
 800509c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800509e:	2300      	movs	r3, #0
 80050a0:	603b      	str	r3, [r7, #0]
 80050a2:	4b09      	ldr	r3, [pc, #36]	; (80050c8 <HAL_MspInit+0x4c>)
 80050a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a6:	4a08      	ldr	r2, [pc, #32]	; (80050c8 <HAL_MspInit+0x4c>)
 80050a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050ac:	6413      	str	r3, [r2, #64]	; 0x40
 80050ae:	4b06      	ldr	r3, [pc, #24]	; (80050c8 <HAL_MspInit+0x4c>)
 80050b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050b6:	603b      	str	r3, [r7, #0]
 80050b8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80050ba:	2007      	movs	r0, #7
 80050bc:	f001 fd36 	bl	8006b2c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80050c0:	bf00      	nop
 80050c2:	3708      	adds	r7, #8
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}
 80050c8:	40023800 	.word	0x40023800

080050cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b08a      	sub	sp, #40	; 0x28
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050d4:	f107 0314 	add.w	r3, r7, #20
 80050d8:	2200      	movs	r2, #0
 80050da:	601a      	str	r2, [r3, #0]
 80050dc:	605a      	str	r2, [r3, #4]
 80050de:	609a      	str	r2, [r3, #8]
 80050e0:	60da      	str	r2, [r3, #12]
 80050e2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a21      	ldr	r2, [pc, #132]	; (8005170 <HAL_I2C_MspInit+0xa4>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d13c      	bne.n	8005168 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80050ee:	2300      	movs	r3, #0
 80050f0:	613b      	str	r3, [r7, #16]
 80050f2:	4b20      	ldr	r3, [pc, #128]	; (8005174 <HAL_I2C_MspInit+0xa8>)
 80050f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050f6:	4a1f      	ldr	r2, [pc, #124]	; (8005174 <HAL_I2C_MspInit+0xa8>)
 80050f8:	f043 0302 	orr.w	r3, r3, #2
 80050fc:	6313      	str	r3, [r2, #48]	; 0x30
 80050fe:	4b1d      	ldr	r3, [pc, #116]	; (8005174 <HAL_I2C_MspInit+0xa8>)
 8005100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005102:	f003 0302 	and.w	r3, r3, #2
 8005106:	613b      	str	r3, [r7, #16]
 8005108:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800510a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800510e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005110:	2312      	movs	r3, #18
 8005112:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005114:	2300      	movs	r3, #0
 8005116:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005118:	2303      	movs	r3, #3
 800511a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800511c:	2304      	movs	r3, #4
 800511e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005120:	f107 0314 	add.w	r3, r7, #20
 8005124:	4619      	mov	r1, r3
 8005126:	4814      	ldr	r0, [pc, #80]	; (8005178 <HAL_I2C_MspInit+0xac>)
 8005128:	f002 f952 	bl	80073d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800512c:	2300      	movs	r3, #0
 800512e:	60fb      	str	r3, [r7, #12]
 8005130:	4b10      	ldr	r3, [pc, #64]	; (8005174 <HAL_I2C_MspInit+0xa8>)
 8005132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005134:	4a0f      	ldr	r2, [pc, #60]	; (8005174 <HAL_I2C_MspInit+0xa8>)
 8005136:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800513a:	6413      	str	r3, [r2, #64]	; 0x40
 800513c:	4b0d      	ldr	r3, [pc, #52]	; (8005174 <HAL_I2C_MspInit+0xa8>)
 800513e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005140:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005144:	60fb      	str	r3, [r7, #12]
 8005146:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8005148:	2200      	movs	r2, #0
 800514a:	2100      	movs	r1, #0
 800514c:	201f      	movs	r0, #31
 800514e:	f001 fcf8 	bl	8006b42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8005152:	201f      	movs	r0, #31
 8005154:	f001 fd11 	bl	8006b7a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8005158:	2200      	movs	r2, #0
 800515a:	2100      	movs	r1, #0
 800515c:	2020      	movs	r0, #32
 800515e:	f001 fcf0 	bl	8006b42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8005162:	2020      	movs	r0, #32
 8005164:	f001 fd09 	bl	8006b7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8005168:	bf00      	nop
 800516a:	3728      	adds	r7, #40	; 0x28
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}
 8005170:	40005400 	.word	0x40005400
 8005174:	40023800 	.word	0x40023800
 8005178:	40020400 	.word	0x40020400

0800517c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b08a      	sub	sp, #40	; 0x28
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005184:	f107 0314 	add.w	r3, r7, #20
 8005188:	2200      	movs	r2, #0
 800518a:	601a      	str	r2, [r3, #0]
 800518c:	605a      	str	r2, [r3, #4]
 800518e:	609a      	str	r2, [r3, #8]
 8005190:	60da      	str	r2, [r3, #12]
 8005192:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a19      	ldr	r2, [pc, #100]	; (8005200 <HAL_SPI_MspInit+0x84>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d12c      	bne.n	80051f8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800519e:	2300      	movs	r3, #0
 80051a0:	613b      	str	r3, [r7, #16]
 80051a2:	4b18      	ldr	r3, [pc, #96]	; (8005204 <HAL_SPI_MspInit+0x88>)
 80051a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a6:	4a17      	ldr	r2, [pc, #92]	; (8005204 <HAL_SPI_MspInit+0x88>)
 80051a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051ac:	6413      	str	r3, [r2, #64]	; 0x40
 80051ae:	4b15      	ldr	r3, [pc, #84]	; (8005204 <HAL_SPI_MspInit+0x88>)
 80051b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80051b6:	613b      	str	r3, [r7, #16]
 80051b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80051ba:	2300      	movs	r3, #0
 80051bc:	60fb      	str	r3, [r7, #12]
 80051be:	4b11      	ldr	r3, [pc, #68]	; (8005204 <HAL_SPI_MspInit+0x88>)
 80051c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051c2:	4a10      	ldr	r2, [pc, #64]	; (8005204 <HAL_SPI_MspInit+0x88>)
 80051c4:	f043 0304 	orr.w	r3, r3, #4
 80051c8:	6313      	str	r3, [r2, #48]	; 0x30
 80051ca:	4b0e      	ldr	r3, [pc, #56]	; (8005204 <HAL_SPI_MspInit+0x88>)
 80051cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ce:	f003 0304 	and.w	r3, r3, #4
 80051d2:	60fb      	str	r3, [r7, #12]
 80051d4:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80051d6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80051da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051dc:	2302      	movs	r3, #2
 80051de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051e0:	2300      	movs	r3, #0
 80051e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051e4:	2303      	movs	r3, #3
 80051e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80051e8:	2306      	movs	r3, #6
 80051ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80051ec:	f107 0314 	add.w	r3, r7, #20
 80051f0:	4619      	mov	r1, r3
 80051f2:	4805      	ldr	r0, [pc, #20]	; (8005208 <HAL_SPI_MspInit+0x8c>)
 80051f4:	f002 f8ec 	bl	80073d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80051f8:	bf00      	nop
 80051fa:	3728      	adds	r7, #40	; 0x28
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}
 8005200:	40003c00 	.word	0x40003c00
 8005204:	40023800 	.word	0x40023800
 8005208:	40020800 	.word	0x40020800

0800520c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b08a      	sub	sp, #40	; 0x28
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005214:	f107 0314 	add.w	r3, r7, #20
 8005218:	2200      	movs	r2, #0
 800521a:	601a      	str	r2, [r3, #0]
 800521c:	605a      	str	r2, [r3, #4]
 800521e:	609a      	str	r2, [r3, #8]
 8005220:	60da      	str	r2, [r3, #12]
 8005222:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a19      	ldr	r2, [pc, #100]	; (8005290 <HAL_TIM_Encoder_MspInit+0x84>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d12b      	bne.n	8005286 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800522e:	2300      	movs	r3, #0
 8005230:	613b      	str	r3, [r7, #16]
 8005232:	4b18      	ldr	r3, [pc, #96]	; (8005294 <HAL_TIM_Encoder_MspInit+0x88>)
 8005234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005236:	4a17      	ldr	r2, [pc, #92]	; (8005294 <HAL_TIM_Encoder_MspInit+0x88>)
 8005238:	f043 0302 	orr.w	r3, r3, #2
 800523c:	6413      	str	r3, [r2, #64]	; 0x40
 800523e:	4b15      	ldr	r3, [pc, #84]	; (8005294 <HAL_TIM_Encoder_MspInit+0x88>)
 8005240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005242:	f003 0302 	and.w	r3, r3, #2
 8005246:	613b      	str	r3, [r7, #16]
 8005248:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800524a:	2300      	movs	r3, #0
 800524c:	60fb      	str	r3, [r7, #12]
 800524e:	4b11      	ldr	r3, [pc, #68]	; (8005294 <HAL_TIM_Encoder_MspInit+0x88>)
 8005250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005252:	4a10      	ldr	r2, [pc, #64]	; (8005294 <HAL_TIM_Encoder_MspInit+0x88>)
 8005254:	f043 0301 	orr.w	r3, r3, #1
 8005258:	6313      	str	r3, [r2, #48]	; 0x30
 800525a:	4b0e      	ldr	r3, [pc, #56]	; (8005294 <HAL_TIM_Encoder_MspInit+0x88>)
 800525c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800525e:	f003 0301 	and.w	r3, r3, #1
 8005262:	60fb      	str	r3, [r7, #12]
 8005264:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005266:	23c0      	movs	r3, #192	; 0xc0
 8005268:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800526a:	2302      	movs	r3, #2
 800526c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800526e:	2300      	movs	r3, #0
 8005270:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005272:	2300      	movs	r3, #0
 8005274:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005276:	2302      	movs	r3, #2
 8005278:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800527a:	f107 0314 	add.w	r3, r7, #20
 800527e:	4619      	mov	r1, r3
 8005280:	4805      	ldr	r0, [pc, #20]	; (8005298 <HAL_TIM_Encoder_MspInit+0x8c>)
 8005282:	f002 f8a5 	bl	80073d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8005286:	bf00      	nop
 8005288:	3728      	adds	r7, #40	; 0x28
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}
 800528e:	bf00      	nop
 8005290:	40000400 	.word	0x40000400
 8005294:	40023800 	.word	0x40023800
 8005298:	40020000 	.word	0x40020000

0800529c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b084      	sub	sp, #16
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a0e      	ldr	r2, [pc, #56]	; (80052e4 <HAL_TIM_Base_MspInit+0x48>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d115      	bne.n	80052da <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 80052ae:	2300      	movs	r3, #0
 80052b0:	60fb      	str	r3, [r7, #12]
 80052b2:	4b0d      	ldr	r3, [pc, #52]	; (80052e8 <HAL_TIM_Base_MspInit+0x4c>)
 80052b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052b6:	4a0c      	ldr	r2, [pc, #48]	; (80052e8 <HAL_TIM_Base_MspInit+0x4c>)
 80052b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052bc:	6453      	str	r3, [r2, #68]	; 0x44
 80052be:	4b0a      	ldr	r3, [pc, #40]	; (80052e8 <HAL_TIM_Base_MspInit+0x4c>)
 80052c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052c6:	60fb      	str	r3, [r7, #12]
 80052c8:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80052ca:	2200      	movs	r2, #0
 80052cc:	2100      	movs	r1, #0
 80052ce:	2019      	movs	r0, #25
 80052d0:	f001 fc37 	bl	8006b42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80052d4:	2019      	movs	r0, #25
 80052d6:	f001 fc50 	bl	8006b7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 80052da:	bf00      	nop
 80052dc:	3710      	adds	r7, #16
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}
 80052e2:	bf00      	nop
 80052e4:	40014400 	.word	0x40014400
 80052e8:	40023800 	.word	0x40023800

080052ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b08e      	sub	sp, #56	; 0x38
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80052f8:	2200      	movs	r2, #0
 80052fa:	601a      	str	r2, [r3, #0]
 80052fc:	605a      	str	r2, [r3, #4]
 80052fe:	609a      	str	r2, [r3, #8]
 8005300:	60da      	str	r2, [r3, #12]
 8005302:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a74      	ldr	r2, [pc, #464]	; (80054dc <HAL_UART_MspInit+0x1f0>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d135      	bne.n	800537a <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800530e:	2300      	movs	r3, #0
 8005310:	623b      	str	r3, [r7, #32]
 8005312:	4b73      	ldr	r3, [pc, #460]	; (80054e0 <HAL_UART_MspInit+0x1f4>)
 8005314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005316:	4a72      	ldr	r2, [pc, #456]	; (80054e0 <HAL_UART_MspInit+0x1f4>)
 8005318:	f043 0310 	orr.w	r3, r3, #16
 800531c:	6453      	str	r3, [r2, #68]	; 0x44
 800531e:	4b70      	ldr	r3, [pc, #448]	; (80054e0 <HAL_UART_MspInit+0x1f4>)
 8005320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005322:	f003 0310 	and.w	r3, r3, #16
 8005326:	623b      	str	r3, [r7, #32]
 8005328:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800532a:	2300      	movs	r3, #0
 800532c:	61fb      	str	r3, [r7, #28]
 800532e:	4b6c      	ldr	r3, [pc, #432]	; (80054e0 <HAL_UART_MspInit+0x1f4>)
 8005330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005332:	4a6b      	ldr	r2, [pc, #428]	; (80054e0 <HAL_UART_MspInit+0x1f4>)
 8005334:	f043 0301 	orr.w	r3, r3, #1
 8005338:	6313      	str	r3, [r2, #48]	; 0x30
 800533a:	4b69      	ldr	r3, [pc, #420]	; (80054e0 <HAL_UART_MspInit+0x1f4>)
 800533c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800533e:	f003 0301 	and.w	r3, r3, #1
 8005342:	61fb      	str	r3, [r7, #28]
 8005344:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8005346:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800534a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800534c:	2302      	movs	r3, #2
 800534e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005350:	2300      	movs	r3, #0
 8005352:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005354:	2303      	movs	r3, #3
 8005356:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005358:	2307      	movs	r3, #7
 800535a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800535c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005360:	4619      	mov	r1, r3
 8005362:	4860      	ldr	r0, [pc, #384]	; (80054e4 <HAL_UART_MspInit+0x1f8>)
 8005364:	f002 f834 	bl	80073d0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8005368:	2200      	movs	r2, #0
 800536a:	2100      	movs	r1, #0
 800536c:	2025      	movs	r0, #37	; 0x25
 800536e:	f001 fbe8 	bl	8006b42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005372:	2025      	movs	r0, #37	; 0x25
 8005374:	f001 fc01 	bl	8006b7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8005378:	e0ab      	b.n	80054d2 <HAL_UART_MspInit+0x1e6>
  else if(huart->Instance==USART2)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a5a      	ldr	r2, [pc, #360]	; (80054e8 <HAL_UART_MspInit+0x1fc>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d12c      	bne.n	80053de <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005384:	2300      	movs	r3, #0
 8005386:	61bb      	str	r3, [r7, #24]
 8005388:	4b55      	ldr	r3, [pc, #340]	; (80054e0 <HAL_UART_MspInit+0x1f4>)
 800538a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800538c:	4a54      	ldr	r2, [pc, #336]	; (80054e0 <HAL_UART_MspInit+0x1f4>)
 800538e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005392:	6413      	str	r3, [r2, #64]	; 0x40
 8005394:	4b52      	ldr	r3, [pc, #328]	; (80054e0 <HAL_UART_MspInit+0x1f4>)
 8005396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005398:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800539c:	61bb      	str	r3, [r7, #24]
 800539e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80053a0:	2300      	movs	r3, #0
 80053a2:	617b      	str	r3, [r7, #20]
 80053a4:	4b4e      	ldr	r3, [pc, #312]	; (80054e0 <HAL_UART_MspInit+0x1f4>)
 80053a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053a8:	4a4d      	ldr	r2, [pc, #308]	; (80054e0 <HAL_UART_MspInit+0x1f4>)
 80053aa:	f043 0301 	orr.w	r3, r3, #1
 80053ae:	6313      	str	r3, [r2, #48]	; 0x30
 80053b0:	4b4b      	ldr	r3, [pc, #300]	; (80054e0 <HAL_UART_MspInit+0x1f4>)
 80053b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053b4:	f003 0301 	and.w	r3, r3, #1
 80053b8:	617b      	str	r3, [r7, #20]
 80053ba:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80053bc:	230c      	movs	r3, #12
 80053be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053c0:	2302      	movs	r3, #2
 80053c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053c4:	2300      	movs	r3, #0
 80053c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053c8:	2303      	movs	r3, #3
 80053ca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80053cc:	2307      	movs	r3, #7
 80053ce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80053d4:	4619      	mov	r1, r3
 80053d6:	4843      	ldr	r0, [pc, #268]	; (80054e4 <HAL_UART_MspInit+0x1f8>)
 80053d8:	f001 fffa 	bl	80073d0 <HAL_GPIO_Init>
}
 80053dc:	e079      	b.n	80054d2 <HAL_UART_MspInit+0x1e6>
  else if(huart->Instance==USART6)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a42      	ldr	r2, [pc, #264]	; (80054ec <HAL_UART_MspInit+0x200>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d174      	bne.n	80054d2 <HAL_UART_MspInit+0x1e6>
    __HAL_RCC_USART6_CLK_ENABLE();
 80053e8:	2300      	movs	r3, #0
 80053ea:	613b      	str	r3, [r7, #16]
 80053ec:	4b3c      	ldr	r3, [pc, #240]	; (80054e0 <HAL_UART_MspInit+0x1f4>)
 80053ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053f0:	4a3b      	ldr	r2, [pc, #236]	; (80054e0 <HAL_UART_MspInit+0x1f4>)
 80053f2:	f043 0320 	orr.w	r3, r3, #32
 80053f6:	6453      	str	r3, [r2, #68]	; 0x44
 80053f8:	4b39      	ldr	r3, [pc, #228]	; (80054e0 <HAL_UART_MspInit+0x1f4>)
 80053fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053fc:	f003 0320 	and.w	r3, r3, #32
 8005400:	613b      	str	r3, [r7, #16]
 8005402:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005404:	2300      	movs	r3, #0
 8005406:	60fb      	str	r3, [r7, #12]
 8005408:	4b35      	ldr	r3, [pc, #212]	; (80054e0 <HAL_UART_MspInit+0x1f4>)
 800540a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800540c:	4a34      	ldr	r2, [pc, #208]	; (80054e0 <HAL_UART_MspInit+0x1f4>)
 800540e:	f043 0301 	orr.w	r3, r3, #1
 8005412:	6313      	str	r3, [r2, #48]	; 0x30
 8005414:	4b32      	ldr	r3, [pc, #200]	; (80054e0 <HAL_UART_MspInit+0x1f4>)
 8005416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005418:	f003 0301 	and.w	r3, r3, #1
 800541c:	60fb      	str	r3, [r7, #12]
 800541e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8005420:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005424:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005426:	2302      	movs	r3, #2
 8005428:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800542a:	2300      	movs	r3, #0
 800542c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800542e:	2303      	movs	r3, #3
 8005430:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8005432:	2308      	movs	r3, #8
 8005434:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005436:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800543a:	4619      	mov	r1, r3
 800543c:	4829      	ldr	r0, [pc, #164]	; (80054e4 <HAL_UART_MspInit+0x1f8>)
 800543e:	f001 ffc7 	bl	80073d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8005442:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005446:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005448:	2302      	movs	r3, #2
 800544a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800544c:	2301      	movs	r3, #1
 800544e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005450:	2303      	movs	r3, #3
 8005452:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8005454:	2308      	movs	r3, #8
 8005456:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005458:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800545c:	4619      	mov	r1, r3
 800545e:	4821      	ldr	r0, [pc, #132]	; (80054e4 <HAL_UART_MspInit+0x1f8>)
 8005460:	f001 ffb6 	bl	80073d0 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8005464:	4b22      	ldr	r3, [pc, #136]	; (80054f0 <HAL_UART_MspInit+0x204>)
 8005466:	4a23      	ldr	r2, [pc, #140]	; (80054f4 <HAL_UART_MspInit+0x208>)
 8005468:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 800546a:	4b21      	ldr	r3, [pc, #132]	; (80054f0 <HAL_UART_MspInit+0x204>)
 800546c:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8005470:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005472:	4b1f      	ldr	r3, [pc, #124]	; (80054f0 <HAL_UART_MspInit+0x204>)
 8005474:	2200      	movs	r2, #0
 8005476:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005478:	4b1d      	ldr	r3, [pc, #116]	; (80054f0 <HAL_UART_MspInit+0x204>)
 800547a:	2200      	movs	r2, #0
 800547c:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 800547e:	4b1c      	ldr	r3, [pc, #112]	; (80054f0 <HAL_UART_MspInit+0x204>)
 8005480:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005484:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005486:	4b1a      	ldr	r3, [pc, #104]	; (80054f0 <HAL_UART_MspInit+0x204>)
 8005488:	2200      	movs	r2, #0
 800548a:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800548c:	4b18      	ldr	r3, [pc, #96]	; (80054f0 <HAL_UART_MspInit+0x204>)
 800548e:	2200      	movs	r2, #0
 8005490:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8005492:	4b17      	ldr	r3, [pc, #92]	; (80054f0 <HAL_UART_MspInit+0x204>)
 8005494:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005498:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 800549a:	4b15      	ldr	r3, [pc, #84]	; (80054f0 <HAL_UART_MspInit+0x204>)
 800549c:	2200      	movs	r2, #0
 800549e:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80054a0:	4b13      	ldr	r3, [pc, #76]	; (80054f0 <HAL_UART_MspInit+0x204>)
 80054a2:	2200      	movs	r2, #0
 80054a4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80054a6:	4812      	ldr	r0, [pc, #72]	; (80054f0 <HAL_UART_MspInit+0x204>)
 80054a8:	f001 fb82 	bl	8006bb0 <HAL_DMA_Init>
 80054ac:	4603      	mov	r3, r0
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d001      	beq.n	80054b6 <HAL_UART_MspInit+0x1ca>
      Error_Handler();
 80054b2:	f7ff fddd 	bl	8005070 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	4a0d      	ldr	r2, [pc, #52]	; (80054f0 <HAL_UART_MspInit+0x204>)
 80054ba:	639a      	str	r2, [r3, #56]	; 0x38
 80054bc:	4a0c      	ldr	r2, [pc, #48]	; (80054f0 <HAL_UART_MspInit+0x204>)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80054c2:	2200      	movs	r2, #0
 80054c4:	2100      	movs	r1, #0
 80054c6:	2047      	movs	r0, #71	; 0x47
 80054c8:	f001 fb3b 	bl	8006b42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80054cc:	2047      	movs	r0, #71	; 0x47
 80054ce:	f001 fb54 	bl	8006b7a <HAL_NVIC_EnableIRQ>
}
 80054d2:	bf00      	nop
 80054d4:	3738      	adds	r7, #56	; 0x38
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}
 80054da:	bf00      	nop
 80054dc:	40011000 	.word	0x40011000
 80054e0:	40023800 	.word	0x40023800
 80054e4:	40020000 	.word	0x40020000
 80054e8:	40004400 	.word	0x40004400
 80054ec:	40011400 	.word	0x40011400
 80054f0:	20000658 	.word	0x20000658
 80054f4:	40026428 	.word	0x40026428

080054f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80054f8:	b480      	push	{r7}
 80054fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80054fc:	e7fe      	b.n	80054fc <NMI_Handler+0x4>

080054fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80054fe:	b480      	push	{r7}
 8005500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005502:	e7fe      	b.n	8005502 <HardFault_Handler+0x4>

08005504 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005504:	b480      	push	{r7}
 8005506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005508:	e7fe      	b.n	8005508 <MemManage_Handler+0x4>

0800550a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800550a:	b480      	push	{r7}
 800550c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800550e:	e7fe      	b.n	800550e <BusFault_Handler+0x4>

08005510 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005510:	b480      	push	{r7}
 8005512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005514:	e7fe      	b.n	8005514 <UsageFault_Handler+0x4>

08005516 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005516:	b480      	push	{r7}
 8005518:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800551a:	bf00      	nop
 800551c:	46bd      	mov	sp, r7
 800551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005522:	4770      	bx	lr

08005524 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005524:	b480      	push	{r7}
 8005526:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005528:	bf00      	nop
 800552a:	46bd      	mov	sp, r7
 800552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005530:	4770      	bx	lr

08005532 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005532:	b480      	push	{r7}
 8005534:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005536:	bf00      	nop
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr

08005540 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005544:	f001 f9de 	bl	8006904 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005548:	bf00      	nop
 800554a:	bd80      	pop	{r7, pc}

0800554c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8005550:	2080      	movs	r0, #128	; 0x80
 8005552:	f002 f90d 	bl	8007770 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005556:	bf00      	nop
 8005558:	bd80      	pop	{r7, pc}
	...

0800555c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8005560:	4802      	ldr	r0, [pc, #8]	; (800556c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8005562:	f005 ff5a 	bl	800b41a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8005566:	bf00      	nop
 8005568:	bd80      	pop	{r7, pc}
 800556a:	bf00      	nop
 800556c:	20000544 	.word	0x20000544

08005570 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8005574:	4802      	ldr	r0, [pc, #8]	; (8005580 <I2C1_EV_IRQHandler+0x10>)
 8005576:	f002 fd77 	bl	8008068 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800557a:	bf00      	nop
 800557c:	bd80      	pop	{r7, pc}
 800557e:	bf00      	nop
 8005580:	20000450 	.word	0x20000450

08005584 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8005588:	4802      	ldr	r0, [pc, #8]	; (8005594 <I2C1_ER_IRQHandler+0x10>)
 800558a:	f002 fede 	bl	800834a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800558e:	bf00      	nop
 8005590:	bd80      	pop	{r7, pc}
 8005592:	bf00      	nop
 8005594:	20000450 	.word	0x20000450

08005598 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800559c:	4802      	ldr	r0, [pc, #8]	; (80055a8 <USART1_IRQHandler+0x10>)
 800559e:	f006 fb47 	bl	800bc30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80055a2:	bf00      	nop
 80055a4:	bd80      	pop	{r7, pc}
 80055a6:	bf00      	nop
 80055a8:	2000058c 	.word	0x2000058c

080055ac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80055b0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80055b4:	f002 f8dc 	bl	8007770 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80055b8:	bf00      	nop
 80055ba:	bd80      	pop	{r7, pc}

080055bc <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 80055c0:	4802      	ldr	r0, [pc, #8]	; (80055cc <DMA2_Stream1_IRQHandler+0x10>)
 80055c2:	f001 fc8d 	bl	8006ee0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80055c6:	bf00      	nop
 80055c8:	bd80      	pop	{r7, pc}
 80055ca:	bf00      	nop
 80055cc:	20000658 	.word	0x20000658

080055d0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80055d4:	4802      	ldr	r0, [pc, #8]	; (80055e0 <USART6_IRQHandler+0x10>)
 80055d6:	f006 fb2b 	bl	800bc30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80055da:	bf00      	nop
 80055dc:	bd80      	pop	{r7, pc}
 80055de:	bf00      	nop
 80055e0:	20000614 	.word	0x20000614

080055e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80055e4:	b480      	push	{r7}
 80055e6:	af00      	add	r7, sp, #0
	return 1;
 80055e8:	2301      	movs	r3, #1
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr

080055f4 <_kill>:

int _kill(int pid, int sig)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b082      	sub	sp, #8
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
 80055fc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80055fe:	f007 fc09 	bl	800ce14 <__errno>
 8005602:	4603      	mov	r3, r0
 8005604:	2216      	movs	r2, #22
 8005606:	601a      	str	r2, [r3, #0]
	return -1;
 8005608:	f04f 33ff 	mov.w	r3, #4294967295
}
 800560c:	4618      	mov	r0, r3
 800560e:	3708      	adds	r7, #8
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}

08005614 <_exit>:

void _exit (int status)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b082      	sub	sp, #8
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800561c:	f04f 31ff 	mov.w	r1, #4294967295
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f7ff ffe7 	bl	80055f4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8005626:	e7fe      	b.n	8005626 <_exit+0x12>

08005628 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b086      	sub	sp, #24
 800562c:	af00      	add	r7, sp, #0
 800562e:	60f8      	str	r0, [r7, #12]
 8005630:	60b9      	str	r1, [r7, #8]
 8005632:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005634:	2300      	movs	r3, #0
 8005636:	617b      	str	r3, [r7, #20]
 8005638:	e00a      	b.n	8005650 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800563a:	f3af 8000 	nop.w
 800563e:	4601      	mov	r1, r0
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	1c5a      	adds	r2, r3, #1
 8005644:	60ba      	str	r2, [r7, #8]
 8005646:	b2ca      	uxtb	r2, r1
 8005648:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	3301      	adds	r3, #1
 800564e:	617b      	str	r3, [r7, #20]
 8005650:	697a      	ldr	r2, [r7, #20]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	429a      	cmp	r2, r3
 8005656:	dbf0      	blt.n	800563a <_read+0x12>
	}

return len;
 8005658:	687b      	ldr	r3, [r7, #4]
}
 800565a:	4618      	mov	r0, r3
 800565c:	3718      	adds	r7, #24
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}

08005662 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005662:	b580      	push	{r7, lr}
 8005664:	b086      	sub	sp, #24
 8005666:	af00      	add	r7, sp, #0
 8005668:	60f8      	str	r0, [r7, #12]
 800566a:	60b9      	str	r1, [r7, #8]
 800566c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800566e:	2300      	movs	r3, #0
 8005670:	617b      	str	r3, [r7, #20]
 8005672:	e009      	b.n	8005688 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	1c5a      	adds	r2, r3, #1
 8005678:	60ba      	str	r2, [r7, #8]
 800567a:	781b      	ldrb	r3, [r3, #0]
 800567c:	4618      	mov	r0, r3
 800567e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	3301      	adds	r3, #1
 8005686:	617b      	str	r3, [r7, #20]
 8005688:	697a      	ldr	r2, [r7, #20]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	429a      	cmp	r2, r3
 800568e:	dbf1      	blt.n	8005674 <_write+0x12>
	}
	return len;
 8005690:	687b      	ldr	r3, [r7, #4]
}
 8005692:	4618      	mov	r0, r3
 8005694:	3718      	adds	r7, #24
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}

0800569a <_close>:

int _close(int file)
{
 800569a:	b480      	push	{r7}
 800569c:	b083      	sub	sp, #12
 800569e:	af00      	add	r7, sp, #0
 80056a0:	6078      	str	r0, [r7, #4]
	return -1;
 80056a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	370c      	adds	r7, #12
 80056aa:	46bd      	mov	sp, r7
 80056ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b0:	4770      	bx	lr

080056b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80056b2:	b480      	push	{r7}
 80056b4:	b083      	sub	sp, #12
 80056b6:	af00      	add	r7, sp, #0
 80056b8:	6078      	str	r0, [r7, #4]
 80056ba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80056c2:	605a      	str	r2, [r3, #4]
	return 0;
 80056c4:	2300      	movs	r3, #0
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	370c      	adds	r7, #12
 80056ca:	46bd      	mov	sp, r7
 80056cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d0:	4770      	bx	lr

080056d2 <_isatty>:

int _isatty(int file)
{
 80056d2:	b480      	push	{r7}
 80056d4:	b083      	sub	sp, #12
 80056d6:	af00      	add	r7, sp, #0
 80056d8:	6078      	str	r0, [r7, #4]
	return 1;
 80056da:	2301      	movs	r3, #1
}
 80056dc:	4618      	mov	r0, r3
 80056de:	370c      	adds	r7, #12
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr

080056e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b085      	sub	sp, #20
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	60f8      	str	r0, [r7, #12]
 80056f0:	60b9      	str	r1, [r7, #8]
 80056f2:	607a      	str	r2, [r7, #4]
	return 0;
 80056f4:	2300      	movs	r3, #0
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3714      	adds	r7, #20
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr
	...

08005704 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b086      	sub	sp, #24
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800570c:	4a14      	ldr	r2, [pc, #80]	; (8005760 <_sbrk+0x5c>)
 800570e:	4b15      	ldr	r3, [pc, #84]	; (8005764 <_sbrk+0x60>)
 8005710:	1ad3      	subs	r3, r2, r3
 8005712:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005718:	4b13      	ldr	r3, [pc, #76]	; (8005768 <_sbrk+0x64>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d102      	bne.n	8005726 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005720:	4b11      	ldr	r3, [pc, #68]	; (8005768 <_sbrk+0x64>)
 8005722:	4a12      	ldr	r2, [pc, #72]	; (800576c <_sbrk+0x68>)
 8005724:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005726:	4b10      	ldr	r3, [pc, #64]	; (8005768 <_sbrk+0x64>)
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4413      	add	r3, r2
 800572e:	693a      	ldr	r2, [r7, #16]
 8005730:	429a      	cmp	r2, r3
 8005732:	d207      	bcs.n	8005744 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005734:	f007 fb6e 	bl	800ce14 <__errno>
 8005738:	4603      	mov	r3, r0
 800573a:	220c      	movs	r2, #12
 800573c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800573e:	f04f 33ff 	mov.w	r3, #4294967295
 8005742:	e009      	b.n	8005758 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005744:	4b08      	ldr	r3, [pc, #32]	; (8005768 <_sbrk+0x64>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800574a:	4b07      	ldr	r3, [pc, #28]	; (8005768 <_sbrk+0x64>)
 800574c:	681a      	ldr	r2, [r3, #0]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	4413      	add	r3, r2
 8005752:	4a05      	ldr	r2, [pc, #20]	; (8005768 <_sbrk+0x64>)
 8005754:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005756:	68fb      	ldr	r3, [r7, #12]
}
 8005758:	4618      	mov	r0, r3
 800575a:	3718      	adds	r7, #24
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}
 8005760:	20020000 	.word	0x20020000
 8005764:	00000400 	.word	0x00000400
 8005768:	200008b8 	.word	0x200008b8
 800576c:	200008d8 	.word	0x200008d8

08005770 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005770:	b480      	push	{r7}
 8005772:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005774:	4b06      	ldr	r3, [pc, #24]	; (8005790 <SystemInit+0x20>)
 8005776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800577a:	4a05      	ldr	r2, [pc, #20]	; (8005790 <SystemInit+0x20>)
 800577c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005780:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005784:	bf00      	nop
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr
 800578e:	bf00      	nop
 8005790:	e000ed00 	.word	0xe000ed00

08005794 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	af00      	add	r7, sp, #0
  LCD_IO_Bl_OnOff(1);
 8005798:	2001      	movs	r0, #1
 800579a:	f000 fefe 	bl	800659a <LCD_IO_Bl_OnOff>
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_SLPOUT);    // Exit Sleep
 800579e:	2011      	movs	r0, #17
 80057a0:	f000 ff82 	bl	80066a8 <LCD_IO_WriteCmd8>
  ILI9341_LCDMUTEX_POP();
}
 80057a4:	bf00      	nop
 80057a6:	bd80      	pop	{r7, pc}

080057a8 <ili9341_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 80057a8:	b480      	push	{r7}
 80057aa:	af00      	add	r7, sp, #0
  return ILI9341_SIZE_X;
 80057ac:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr

080057ba <ili9341_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 80057ba:	b480      	push	{r7}
 80057bc:	af00      	add	r7, sp, #0
  return ILI9341_SIZE_Y;
 80057be:	23f0      	movs	r3, #240	; 0xf0
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr
	...

080057cc <ili9341_Init>:
/* SPI or paralell mode */
#if ILI9341_INTERFACE_MODE == 1

//-----------------------------------------------------------------------------
void ili9341_Init(void)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b082      	sub	sp, #8
 80057d0:	af02      	add	r7, sp, #8
  if((Is_ili9341_Initialized & ILI9341_LCD_INITIALIZED) == 0)
 80057d2:	4b52      	ldr	r3, [pc, #328]	; (800591c <ili9341_Init+0x150>)
 80057d4:	781b      	ldrb	r3, [r3, #0]
 80057d6:	f003 0301 	and.w	r3, r3, #1
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d115      	bne.n	800580a <ili9341_Init+0x3e>
  {
    Is_ili9341_Initialized |= ILI9341_LCD_INITIALIZED;
 80057de:	4b4f      	ldr	r3, [pc, #316]	; (800591c <ili9341_Init+0x150>)
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	f043 0301 	orr.w	r3, r3, #1
 80057e6:	b2da      	uxtb	r2, r3
 80057e8:	4b4c      	ldr	r3, [pc, #304]	; (800591c <ili9341_Init+0x150>)
 80057ea:	701a      	strb	r2, [r3, #0]
    if((Is_ili9341_Initialized & ILI9341_IO_INITIALIZED) == 0)
 80057ec:	4b4b      	ldr	r3, [pc, #300]	; (800591c <ili9341_Init+0x150>)
 80057ee:	781b      	ldrb	r3, [r3, #0]
 80057f0:	f003 0302 	and.w	r3, r3, #2
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d101      	bne.n	80057fc <ili9341_Init+0x30>
      LCD_IO_Init();
 80057f8:	f000 feda 	bl	80065b0 <LCD_IO_Init>
    Is_ili9341_Initialized |= ILI9341_IO_INITIALIZED;
 80057fc:	4b47      	ldr	r3, [pc, #284]	; (800591c <ili9341_Init+0x150>)
 80057fe:	781b      	ldrb	r3, [r3, #0]
 8005800:	f043 0302 	orr.w	r3, r3, #2
 8005804:	b2da      	uxtb	r2, r3
 8005806:	4b45      	ldr	r3, [pc, #276]	; (800591c <ili9341_Init+0x150>)
 8005808:	701a      	strb	r2, [r3, #0]
  }

  LCD_Delay(10);
 800580a:	200a      	movs	r0, #10
 800580c:	f000 feba 	bl	8006584 <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9341_SWRESET);
 8005810:	2001      	movs	r0, #1
 8005812:	f000 ff49 	bl	80066a8 <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 8005816:	200a      	movs	r0, #10
 8005818:	f000 feb4 	bl	8006584 <LCD_Delay>

  LCD_IO_WriteCmd8MultipleData8(0xEF, (uint8_t *)"\x03\x80\x02", 3);
 800581c:	2203      	movs	r2, #3
 800581e:	4940      	ldr	r1, [pc, #256]	; (8005920 <ili9341_Init+0x154>)
 8005820:	20ef      	movs	r0, #239	; 0xef
 8005822:	f000 ffaf 	bl	8006784 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xCF, (uint8_t *)"\x00\xC1\x30", 3);
 8005826:	2203      	movs	r2, #3
 8005828:	493e      	ldr	r1, [pc, #248]	; (8005924 <ili9341_Init+0x158>)
 800582a:	20cf      	movs	r0, #207	; 0xcf
 800582c:	f000 ffaa 	bl	8006784 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xED, (uint8_t *)"\x64\x03\x12\x81", 4);
 8005830:	2204      	movs	r2, #4
 8005832:	493d      	ldr	r1, [pc, #244]	; (8005928 <ili9341_Init+0x15c>)
 8005834:	20ed      	movs	r0, #237	; 0xed
 8005836:	f000 ffa5 	bl	8006784 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xE8, (uint8_t *)"\x85\x00\x78", 3);
 800583a:	2203      	movs	r2, #3
 800583c:	493b      	ldr	r1, [pc, #236]	; (800592c <ili9341_Init+0x160>)
 800583e:	20e8      	movs	r0, #232	; 0xe8
 8005840:	f000 ffa0 	bl	8006784 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xCB, (uint8_t *)"\x39\x2C\x00\x34\x02", 5);
 8005844:	2205      	movs	r2, #5
 8005846:	493a      	ldr	r1, [pc, #232]	; (8005930 <ili9341_Init+0x164>)
 8005848:	20cb      	movs	r0, #203	; 0xcb
 800584a:	f000 ff9b 	bl	8006784 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xF7, (uint8_t *)"\x20", 1);
 800584e:	2201      	movs	r2, #1
 8005850:	4938      	ldr	r1, [pc, #224]	; (8005934 <ili9341_Init+0x168>)
 8005852:	20f7      	movs	r0, #247	; 0xf7
 8005854:	f000 ff96 	bl	8006784 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xEA, (uint8_t *)"\x00\x00", 2);
 8005858:	2202      	movs	r2, #2
 800585a:	4937      	ldr	r1, [pc, #220]	; (8005938 <ili9341_Init+0x16c>)
 800585c:	20ea      	movs	r0, #234	; 0xea
 800585e:	f000 ff91 	bl	8006784 <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 1 (Vreg1out, Verg2out)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PWCTR1, (uint8_t *)"\x23", 1);
 8005862:	2201      	movs	r2, #1
 8005864:	4935      	ldr	r1, [pc, #212]	; (800593c <ili9341_Init+0x170>)
 8005866:	20c0      	movs	r0, #192	; 0xc0
 8005868:	f000 ff8c 	bl	8006784 <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 2 (VGH,VGL)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PWCTR2, (uint8_t *)"\x10", 1);
 800586c:	2201      	movs	r2, #1
 800586e:	4934      	ldr	r1, [pc, #208]	; (8005940 <ili9341_Init+0x174>)
 8005870:	20c1      	movs	r0, #193	; 0xc1
 8005872:	f000 ff87 	bl	8006784 <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 3 (Vcom)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_VMCTR1, (uint8_t *)"\x3E\x28", 2);
 8005876:	2202      	movs	r2, #2
 8005878:	4932      	ldr	r1, [pc, #200]	; (8005944 <ili9341_Init+0x178>)
 800587a:	20c5      	movs	r0, #197	; 0xc5
 800587c:	f000 ff82 	bl	8006784 <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 3 (Vcom)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_VMCTR2, (uint8_t *)"\x86", 1);
 8005880:	2201      	movs	r2, #1
 8005882:	4931      	ldr	r1, [pc, #196]	; (8005948 <ili9341_Init+0x17c>)
 8005884:	20c7      	movs	r0, #199	; 0xc7
 8005886:	f000 ff7d 	bl	8006784 <LCD_IO_WriteCmd8MultipleData8>

  // Vertical scroll zero
  LCD_IO_WriteCmd8MultipleData8(ILI9341_VSCRSADD, (uint8_t *)"\x00", 1);
 800588a:	2201      	movs	r2, #1
 800588c:	492f      	ldr	r1, [pc, #188]	; (800594c <ili9341_Init+0x180>)
 800588e:	2037      	movs	r0, #55	; 0x37
 8005890:	f000 ff78 	bl	8006784 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PIXFMT, (uint8_t *)"\x55", 1);
 8005894:	2201      	movs	r2, #1
 8005896:	492e      	ldr	r1, [pc, #184]	; (8005950 <ili9341_Init+0x184>)
 8005898:	203a      	movs	r0, #58	; 0x3a
 800589a:	f000 ff73 	bl	8006784 <LCD_IO_WriteCmd8MultipleData8>

  // LCD_IO_WriteCmd8MultipleData8(0xF6, (uint8_t *)"\x01\x00\x06", 3);

  LCD_IO_WriteCmd8MultipleData8(ILI9341_FRMCTR1, (uint8_t *)"\x00\x18", 2);
 800589e:	2202      	movs	r2, #2
 80058a0:	492c      	ldr	r1, [pc, #176]	; (8005954 <ili9341_Init+0x188>)
 80058a2:	20b1      	movs	r0, #177	; 0xb1
 80058a4:	f000 ff6e 	bl	8006784 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_DFUNCTR, (uint8_t *)"\x08\x82\x27", 3);  // Display Function Control
 80058a8:	2203      	movs	r2, #3
 80058aa:	492b      	ldr	r1, [pc, #172]	; (8005958 <ili9341_Init+0x18c>)
 80058ac:	20b6      	movs	r0, #182	; 0xb6
 80058ae:	f000 ff69 	bl	8006784 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xF2, (uint8_t *)"\x00", 1);            // 3Gamma Function Disable
 80058b2:	2201      	movs	r2, #1
 80058b4:	4925      	ldr	r1, [pc, #148]	; (800594c <ili9341_Init+0x180>)
 80058b6:	20f2      	movs	r0, #242	; 0xf2
 80058b8:	f000 ff64 	bl	8006784 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_GAMMASET, (uint8_t *)"\x01", 1);// Gamma curve selected
 80058bc:	2201      	movs	r2, #1
 80058be:	4927      	ldr	r1, [pc, #156]	; (800595c <ili9341_Init+0x190>)
 80058c0:	2026      	movs	r0, #38	; 0x26
 80058c2:	f000 ff5f 	bl	8006784 <LCD_IO_WriteCmd8MultipleData8>

  // positive gamma control
  LCD_IO_WriteCmd8MultipleData8(ILI9341_GMCTRP1, (uint8_t *)"\x0F\x31\x2B\x0C\x0E\x08\x4E\xF1\x37\x07\x10\x03\x0E\x09\x00", 15);
 80058c6:	220f      	movs	r2, #15
 80058c8:	4925      	ldr	r1, [pc, #148]	; (8005960 <ili9341_Init+0x194>)
 80058ca:	20e0      	movs	r0, #224	; 0xe0
 80058cc:	f000 ff5a 	bl	8006784 <LCD_IO_WriteCmd8MultipleData8>

  // negative gamma control
  LCD_IO_WriteCmd8MultipleData8(ILI9341_GMCTRN1, (uint8_t *)"\x00\x0E\x14\x03\x11\x07\x31\xC1\x48\x08\x0F\x0C\x31\x36\x0F", 15);
 80058d0:	220f      	movs	r2, #15
 80058d2:	4924      	ldr	r1, [pc, #144]	; (8005964 <ili9341_Init+0x198>)
 80058d4:	20e1      	movs	r0, #225	; 0xe1
 80058d6:	f000 ff55 	bl	8006784 <LCD_IO_WriteCmd8MultipleData8>

  LCD_IO_WriteCmd8(ILI9341_MADCTL); LCD_IO_WriteData8(ILI9341_MAD_DATA_RIGHT_THEN_DOWN);
 80058da:	2036      	movs	r0, #54	; 0x36
 80058dc:	f000 fee4 	bl	80066a8 <LCD_IO_WriteCmd8>
 80058e0:	2028      	movs	r0, #40	; 0x28
 80058e2:	f000 feff 	bl	80066e4 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_SLPOUT);    // Exit Sleep
 80058e6:	2011      	movs	r0, #17
 80058e8:	f000 fede 	bl	80066a8 <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 80058ec:	200a      	movs	r0, #10
 80058ee:	f000 fe49 	bl	8006584 <LCD_Delay>

  #if ILI9341_INITCLEAR == 1
  ili9341_FillRect(0, 0, ILI9341_SIZE_X, ILI9341_SIZE_Y, 0x0000);
 80058f2:	2300      	movs	r3, #0
 80058f4:	9300      	str	r3, [sp, #0]
 80058f6:	23f0      	movs	r3, #240	; 0xf0
 80058f8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80058fc:	2100      	movs	r1, #0
 80058fe:	2000      	movs	r0, #0
 8005900:	f000 f992 	bl	8005c28 <ili9341_FillRect>
  LCD_Delay(10);
 8005904:	200a      	movs	r0, #10
 8005906:	f000 fe3d 	bl	8006584 <LCD_Delay>
  #endif
  
  LCD_IO_WriteCmd8(ILI9341_DISPON);    // Display on
 800590a:	2029      	movs	r0, #41	; 0x29
 800590c:	f000 fecc 	bl	80066a8 <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 8005910:	200a      	movs	r0, #10
 8005912:	f000 fe37 	bl	8006584 <LCD_Delay>
}
 8005916:	bf00      	nop
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}
 800591c:	200008bc 	.word	0x200008bc
 8005920:	0801031c 	.word	0x0801031c
 8005924:	08010320 	.word	0x08010320
 8005928:	08010324 	.word	0x08010324
 800592c:	0801032c 	.word	0x0801032c
 8005930:	08010330 	.word	0x08010330
 8005934:	08010338 	.word	0x08010338
 8005938:	0801033c 	.word	0x0801033c
 800593c:	08010340 	.word	0x08010340
 8005940:	08010344 	.word	0x08010344
 8005944:	08010348 	.word	0x08010348
 8005948:	0801034c 	.word	0x0801034c
 800594c:	08010350 	.word	0x08010350
 8005950:	08010354 	.word	0x08010354
 8005954:	08010358 	.word	0x08010358
 8005958:	0801035c 	.word	0x0801035c
 800595c:	08010360 	.word	0x08010360
 8005960:	08010364 	.word	0x08010364
 8005964:	08010374 	.word	0x08010374

08005968 <ili9341_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color
  * @retval None
  */
void ili9341_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b082      	sub	sp, #8
 800596c:	af00      	add	r7, sp, #0
 800596e:	4603      	mov	r3, r0
 8005970:	80fb      	strh	r3, [r7, #6]
 8005972:	460b      	mov	r3, r1
 8005974:	80bb      	strh	r3, [r7, #4]
 8005976:	4613      	mov	r3, r2
 8005978:	807b      	strh	r3, [r7, #2]
  ILI9341_LCDMUTEX_PUSH();
  ILI9341_SETCURSOR(Xpos, Ypos);
 800597a:	202a      	movs	r0, #42	; 0x2a
 800597c:	f000 fe94 	bl	80066a8 <LCD_IO_WriteCmd8>
 8005980:	88fb      	ldrh	r3, [r7, #6]
 8005982:	0a1b      	lsrs	r3, r3, #8
 8005984:	b29b      	uxth	r3, r3
 8005986:	b2db      	uxtb	r3, r3
 8005988:	4618      	mov	r0, r3
 800598a:	f000 feab 	bl	80066e4 <LCD_IO_WriteData8>
 800598e:	88fb      	ldrh	r3, [r7, #6]
 8005990:	b2db      	uxtb	r3, r3
 8005992:	4618      	mov	r0, r3
 8005994:	f000 fea6 	bl	80066e4 <LCD_IO_WriteData8>
 8005998:	88fb      	ldrh	r3, [r7, #6]
 800599a:	0a1b      	lsrs	r3, r3, #8
 800599c:	b29b      	uxth	r3, r3
 800599e:	b2db      	uxtb	r3, r3
 80059a0:	4618      	mov	r0, r3
 80059a2:	f000 fe9f 	bl	80066e4 <LCD_IO_WriteData8>
 80059a6:	88fb      	ldrh	r3, [r7, #6]
 80059a8:	b2db      	uxtb	r3, r3
 80059aa:	4618      	mov	r0, r3
 80059ac:	f000 fe9a 	bl	80066e4 <LCD_IO_WriteData8>
 80059b0:	202b      	movs	r0, #43	; 0x2b
 80059b2:	f000 fe79 	bl	80066a8 <LCD_IO_WriteCmd8>
 80059b6:	88bb      	ldrh	r3, [r7, #4]
 80059b8:	0a1b      	lsrs	r3, r3, #8
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	4618      	mov	r0, r3
 80059c0:	f000 fe90 	bl	80066e4 <LCD_IO_WriteData8>
 80059c4:	88bb      	ldrh	r3, [r7, #4]
 80059c6:	b2db      	uxtb	r3, r3
 80059c8:	4618      	mov	r0, r3
 80059ca:	f000 fe8b 	bl	80066e4 <LCD_IO_WriteData8>
 80059ce:	88bb      	ldrh	r3, [r7, #4]
 80059d0:	0a1b      	lsrs	r3, r3, #8
 80059d2:	b29b      	uxth	r3, r3
 80059d4:	b2db      	uxtb	r3, r3
 80059d6:	4618      	mov	r0, r3
 80059d8:	f000 fe84 	bl	80066e4 <LCD_IO_WriteData8>
 80059dc:	88bb      	ldrh	r3, [r7, #4]
 80059de:	b2db      	uxtb	r3, r3
 80059e0:	4618      	mov	r0, r3
 80059e2:	f000 fe7f 	bl	80066e4 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_RAMWR); LCD_IO_WriteData16(RGBCode);
 80059e6:	202c      	movs	r0, #44	; 0x2c
 80059e8:	f000 fe5e 	bl	80066a8 <LCD_IO_WriteCmd8>
 80059ec:	887b      	ldrh	r3, [r7, #2]
 80059ee:	4618      	mov	r0, r3
 80059f0:	f000 fe8e 	bl	8006710 <LCD_IO_WriteData16>
  ILI9341_LCDMUTEX_POP();
}
 80059f4:	bf00      	nop
 80059f6:	3708      	adds	r7, #8
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}

080059fc <ili9341_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ili9341_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80059fc:	b590      	push	{r4, r7, lr}
 80059fe:	b083      	sub	sp, #12
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	4604      	mov	r4, r0
 8005a04:	4608      	mov	r0, r1
 8005a06:	4611      	mov	r1, r2
 8005a08:	461a      	mov	r2, r3
 8005a0a:	4623      	mov	r3, r4
 8005a0c:	80fb      	strh	r3, [r7, #6]
 8005a0e:	4603      	mov	r3, r0
 8005a10:	80bb      	strh	r3, [r7, #4]
 8005a12:	460b      	mov	r3, r1
 8005a14:	807b      	strh	r3, [r7, #2]
 8005a16:	4613      	mov	r3, r2
 8005a18:	803b      	strh	r3, [r7, #0]
  yStart = Ypos; yEnd = Ypos + Height - 1;
 8005a1a:	4a2a      	ldr	r2, [pc, #168]	; (8005ac4 <ili9341_SetDisplayWindow+0xc8>)
 8005a1c:	88bb      	ldrh	r3, [r7, #4]
 8005a1e:	8013      	strh	r3, [r2, #0]
 8005a20:	88ba      	ldrh	r2, [r7, #4]
 8005a22:	883b      	ldrh	r3, [r7, #0]
 8005a24:	4413      	add	r3, r2
 8005a26:	b29b      	uxth	r3, r3
 8005a28:	3b01      	subs	r3, #1
 8005a2a:	b29a      	uxth	r2, r3
 8005a2c:	4b26      	ldr	r3, [pc, #152]	; (8005ac8 <ili9341_SetDisplayWindow+0xcc>)
 8005a2e:	801a      	strh	r2, [r3, #0]
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Width - 1);
 8005a30:	202a      	movs	r0, #42	; 0x2a
 8005a32:	f000 fe39 	bl	80066a8 <LCD_IO_WriteCmd8>
 8005a36:	88fb      	ldrh	r3, [r7, #6]
 8005a38:	0a1b      	lsrs	r3, r3, #8
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	b2db      	uxtb	r3, r3
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f000 fe50 	bl	80066e4 <LCD_IO_WriteData8>
 8005a44:	88fb      	ldrh	r3, [r7, #6]
 8005a46:	b2db      	uxtb	r3, r3
 8005a48:	4618      	mov	r0, r3
 8005a4a:	f000 fe4b 	bl	80066e4 <LCD_IO_WriteData8>
 8005a4e:	88fa      	ldrh	r2, [r7, #6]
 8005a50:	887b      	ldrh	r3, [r7, #2]
 8005a52:	4413      	add	r3, r2
 8005a54:	3b01      	subs	r3, #1
 8005a56:	121b      	asrs	r3, r3, #8
 8005a58:	b2db      	uxtb	r3, r3
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f000 fe42 	bl	80066e4 <LCD_IO_WriteData8>
 8005a60:	88fb      	ldrh	r3, [r7, #6]
 8005a62:	b2da      	uxtb	r2, r3
 8005a64:	887b      	ldrh	r3, [r7, #2]
 8005a66:	b2db      	uxtb	r3, r3
 8005a68:	4413      	add	r3, r2
 8005a6a:	b2db      	uxtb	r3, r3
 8005a6c:	3b01      	subs	r3, #1
 8005a6e:	b2db      	uxtb	r3, r3
 8005a70:	4618      	mov	r0, r3
 8005a72:	f000 fe37 	bl	80066e4 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Height - 1);
 8005a76:	202b      	movs	r0, #43	; 0x2b
 8005a78:	f000 fe16 	bl	80066a8 <LCD_IO_WriteCmd8>
 8005a7c:	88bb      	ldrh	r3, [r7, #4]
 8005a7e:	0a1b      	lsrs	r3, r3, #8
 8005a80:	b29b      	uxth	r3, r3
 8005a82:	b2db      	uxtb	r3, r3
 8005a84:	4618      	mov	r0, r3
 8005a86:	f000 fe2d 	bl	80066e4 <LCD_IO_WriteData8>
 8005a8a:	88bb      	ldrh	r3, [r7, #4]
 8005a8c:	b2db      	uxtb	r3, r3
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f000 fe28 	bl	80066e4 <LCD_IO_WriteData8>
 8005a94:	88ba      	ldrh	r2, [r7, #4]
 8005a96:	883b      	ldrh	r3, [r7, #0]
 8005a98:	4413      	add	r3, r2
 8005a9a:	3b01      	subs	r3, #1
 8005a9c:	121b      	asrs	r3, r3, #8
 8005a9e:	b2db      	uxtb	r3, r3
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f000 fe1f 	bl	80066e4 <LCD_IO_WriteData8>
 8005aa6:	88bb      	ldrh	r3, [r7, #4]
 8005aa8:	b2da      	uxtb	r2, r3
 8005aaa:	883b      	ldrh	r3, [r7, #0]
 8005aac:	b2db      	uxtb	r3, r3
 8005aae:	4413      	add	r3, r2
 8005ab0:	b2db      	uxtb	r3, r3
 8005ab2:	3b01      	subs	r3, #1
 8005ab4:	b2db      	uxtb	r3, r3
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f000 fe14 	bl	80066e4 <LCD_IO_WriteData8>
  ILI9341_LCDMUTEX_POP();
}
 8005abc:	bf00      	nop
 8005abe:	370c      	adds	r7, #12
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd90      	pop	{r4, r7, pc}
 8005ac4:	200008be 	.word	0x200008be
 8005ac8:	200008c0 	.word	0x200008c0

08005acc <ili9341_DrawHLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.
  * @retval None
  */
void ili9341_DrawHLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8005acc:	b590      	push	{r4, r7, lr}
 8005ace:	b083      	sub	sp, #12
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	4604      	mov	r4, r0
 8005ad4:	4608      	mov	r0, r1
 8005ad6:	4611      	mov	r1, r2
 8005ad8:	461a      	mov	r2, r3
 8005ada:	4623      	mov	r3, r4
 8005adc:	80fb      	strh	r3, [r7, #6]
 8005ade:	4603      	mov	r3, r0
 8005ae0:	80bb      	strh	r3, [r7, #4]
 8005ae2:	460b      	mov	r3, r1
 8005ae4:	807b      	strh	r3, [r7, #2]
 8005ae6:	4613      	mov	r3, r2
 8005ae8:	803b      	strh	r3, [r7, #0]
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Length - 1);
 8005aea:	202a      	movs	r0, #42	; 0x2a
 8005aec:	f000 fddc 	bl	80066a8 <LCD_IO_WriteCmd8>
 8005af0:	88bb      	ldrh	r3, [r7, #4]
 8005af2:	0a1b      	lsrs	r3, r3, #8
 8005af4:	b29b      	uxth	r3, r3
 8005af6:	b2db      	uxtb	r3, r3
 8005af8:	4618      	mov	r0, r3
 8005afa:	f000 fdf3 	bl	80066e4 <LCD_IO_WriteData8>
 8005afe:	88bb      	ldrh	r3, [r7, #4]
 8005b00:	b2db      	uxtb	r3, r3
 8005b02:	4618      	mov	r0, r3
 8005b04:	f000 fdee 	bl	80066e4 <LCD_IO_WriteData8>
 8005b08:	88ba      	ldrh	r2, [r7, #4]
 8005b0a:	883b      	ldrh	r3, [r7, #0]
 8005b0c:	4413      	add	r3, r2
 8005b0e:	3b01      	subs	r3, #1
 8005b10:	121b      	asrs	r3, r3, #8
 8005b12:	b2db      	uxtb	r3, r3
 8005b14:	4618      	mov	r0, r3
 8005b16:	f000 fde5 	bl	80066e4 <LCD_IO_WriteData8>
 8005b1a:	88bb      	ldrh	r3, [r7, #4]
 8005b1c:	b2da      	uxtb	r2, r3
 8005b1e:	883b      	ldrh	r3, [r7, #0]
 8005b20:	b2db      	uxtb	r3, r3
 8005b22:	4413      	add	r3, r2
 8005b24:	b2db      	uxtb	r3, r3
 8005b26:	3b01      	subs	r3, #1
 8005b28:	b2db      	uxtb	r3, r3
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f000 fdda 	bl	80066e4 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos);
 8005b30:	202b      	movs	r0, #43	; 0x2b
 8005b32:	f000 fdb9 	bl	80066a8 <LCD_IO_WriteCmd8>
 8005b36:	887b      	ldrh	r3, [r7, #2]
 8005b38:	0a1b      	lsrs	r3, r3, #8
 8005b3a:	b29b      	uxth	r3, r3
 8005b3c:	b2db      	uxtb	r3, r3
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f000 fdd0 	bl	80066e4 <LCD_IO_WriteData8>
 8005b44:	887b      	ldrh	r3, [r7, #2]
 8005b46:	b2db      	uxtb	r3, r3
 8005b48:	4618      	mov	r0, r3
 8005b4a:	f000 fdcb 	bl	80066e4 <LCD_IO_WriteData8>
 8005b4e:	887b      	ldrh	r3, [r7, #2]
 8005b50:	0a1b      	lsrs	r3, r3, #8
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	b2db      	uxtb	r3, r3
 8005b56:	4618      	mov	r0, r3
 8005b58:	f000 fdc4 	bl	80066e4 <LCD_IO_WriteData8>
 8005b5c:	887b      	ldrh	r3, [r7, #2]
 8005b5e:	b2db      	uxtb	r3, r3
 8005b60:	4618      	mov	r0, r3
 8005b62:	f000 fdbf 	bl	80066e4 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8DataFill16(ILI9341_RAMWR, RGBCode, Length);
 8005b66:	883a      	ldrh	r2, [r7, #0]
 8005b68:	88fb      	ldrh	r3, [r7, #6]
 8005b6a:	4619      	mov	r1, r3
 8005b6c:	202c      	movs	r0, #44	; 0x2c
 8005b6e:	f000 fde5 	bl	800673c <LCD_IO_WriteCmd8DataFill16>
  ILI9341_LCDMUTEX_POP();
}
 8005b72:	bf00      	nop
 8005b74:	370c      	adds	r7, #12
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd90      	pop	{r4, r7, pc}

08005b7a <ili9341_DrawVLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.
  * @retval None
  */
void ili9341_DrawVLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8005b7a:	b590      	push	{r4, r7, lr}
 8005b7c:	b083      	sub	sp, #12
 8005b7e:	af00      	add	r7, sp, #0
 8005b80:	4604      	mov	r4, r0
 8005b82:	4608      	mov	r0, r1
 8005b84:	4611      	mov	r1, r2
 8005b86:	461a      	mov	r2, r3
 8005b88:	4623      	mov	r3, r4
 8005b8a:	80fb      	strh	r3, [r7, #6]
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	80bb      	strh	r3, [r7, #4]
 8005b90:	460b      	mov	r3, r1
 8005b92:	807b      	strh	r3, [r7, #2]
 8005b94:	4613      	mov	r3, r2
 8005b96:	803b      	strh	r3, [r7, #0]
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos);
 8005b98:	202a      	movs	r0, #42	; 0x2a
 8005b9a:	f000 fd85 	bl	80066a8 <LCD_IO_WriteCmd8>
 8005b9e:	88bb      	ldrh	r3, [r7, #4]
 8005ba0:	0a1b      	lsrs	r3, r3, #8
 8005ba2:	b29b      	uxth	r3, r3
 8005ba4:	b2db      	uxtb	r3, r3
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f000 fd9c 	bl	80066e4 <LCD_IO_WriteData8>
 8005bac:	88bb      	ldrh	r3, [r7, #4]
 8005bae:	b2db      	uxtb	r3, r3
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	f000 fd97 	bl	80066e4 <LCD_IO_WriteData8>
 8005bb6:	88bb      	ldrh	r3, [r7, #4]
 8005bb8:	0a1b      	lsrs	r3, r3, #8
 8005bba:	b29b      	uxth	r3, r3
 8005bbc:	b2db      	uxtb	r3, r3
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f000 fd90 	bl	80066e4 <LCD_IO_WriteData8>
 8005bc4:	88bb      	ldrh	r3, [r7, #4]
 8005bc6:	b2db      	uxtb	r3, r3
 8005bc8:	4618      	mov	r0, r3
 8005bca:	f000 fd8b 	bl	80066e4 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Length - 1);
 8005bce:	202b      	movs	r0, #43	; 0x2b
 8005bd0:	f000 fd6a 	bl	80066a8 <LCD_IO_WriteCmd8>
 8005bd4:	887b      	ldrh	r3, [r7, #2]
 8005bd6:	0a1b      	lsrs	r3, r3, #8
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	b2db      	uxtb	r3, r3
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f000 fd81 	bl	80066e4 <LCD_IO_WriteData8>
 8005be2:	887b      	ldrh	r3, [r7, #2]
 8005be4:	b2db      	uxtb	r3, r3
 8005be6:	4618      	mov	r0, r3
 8005be8:	f000 fd7c 	bl	80066e4 <LCD_IO_WriteData8>
 8005bec:	887a      	ldrh	r2, [r7, #2]
 8005bee:	883b      	ldrh	r3, [r7, #0]
 8005bf0:	4413      	add	r3, r2
 8005bf2:	3b01      	subs	r3, #1
 8005bf4:	121b      	asrs	r3, r3, #8
 8005bf6:	b2db      	uxtb	r3, r3
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f000 fd73 	bl	80066e4 <LCD_IO_WriteData8>
 8005bfe:	887b      	ldrh	r3, [r7, #2]
 8005c00:	b2da      	uxtb	r2, r3
 8005c02:	883b      	ldrh	r3, [r7, #0]
 8005c04:	b2db      	uxtb	r3, r3
 8005c06:	4413      	add	r3, r2
 8005c08:	b2db      	uxtb	r3, r3
 8005c0a:	3b01      	subs	r3, #1
 8005c0c:	b2db      	uxtb	r3, r3
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f000 fd68 	bl	80066e4 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8DataFill16(ILI9341_RAMWR, RGBCode, Length);
 8005c14:	883a      	ldrh	r2, [r7, #0]
 8005c16:	88fb      	ldrh	r3, [r7, #6]
 8005c18:	4619      	mov	r1, r3
 8005c1a:	202c      	movs	r0, #44	; 0x2c
 8005c1c:	f000 fd8e 	bl	800673c <LCD_IO_WriteCmd8DataFill16>
  ILI9341_LCDMUTEX_POP();
}
 8005c20:	bf00      	nop
 8005c22:	370c      	adds	r7, #12
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd90      	pop	{r4, r7, pc}

08005c28 <ili9341_FillRect>:
  * @param  Ysize:    specifies the Y size
  * @param  RGBCode:  specifies the RGB color
  * @retval None
  */
void ili9341_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t RGBCode)
{
 8005c28:	b590      	push	{r4, r7, lr}
 8005c2a:	b083      	sub	sp, #12
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	4604      	mov	r4, r0
 8005c30:	4608      	mov	r0, r1
 8005c32:	4611      	mov	r1, r2
 8005c34:	461a      	mov	r2, r3
 8005c36:	4623      	mov	r3, r4
 8005c38:	80fb      	strh	r3, [r7, #6]
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	80bb      	strh	r3, [r7, #4]
 8005c3e:	460b      	mov	r3, r1
 8005c40:	807b      	strh	r3, [r7, #2]
 8005c42:	4613      	mov	r3, r2
 8005c44:	803b      	strh	r3, [r7, #0]
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Xsize - 1);
 8005c46:	202a      	movs	r0, #42	; 0x2a
 8005c48:	f000 fd2e 	bl	80066a8 <LCD_IO_WriteCmd8>
 8005c4c:	88fb      	ldrh	r3, [r7, #6]
 8005c4e:	0a1b      	lsrs	r3, r3, #8
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	b2db      	uxtb	r3, r3
 8005c54:	4618      	mov	r0, r3
 8005c56:	f000 fd45 	bl	80066e4 <LCD_IO_WriteData8>
 8005c5a:	88fb      	ldrh	r3, [r7, #6]
 8005c5c:	b2db      	uxtb	r3, r3
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f000 fd40 	bl	80066e4 <LCD_IO_WriteData8>
 8005c64:	88fa      	ldrh	r2, [r7, #6]
 8005c66:	887b      	ldrh	r3, [r7, #2]
 8005c68:	4413      	add	r3, r2
 8005c6a:	3b01      	subs	r3, #1
 8005c6c:	121b      	asrs	r3, r3, #8
 8005c6e:	b2db      	uxtb	r3, r3
 8005c70:	4618      	mov	r0, r3
 8005c72:	f000 fd37 	bl	80066e4 <LCD_IO_WriteData8>
 8005c76:	88fb      	ldrh	r3, [r7, #6]
 8005c78:	b2da      	uxtb	r2, r3
 8005c7a:	887b      	ldrh	r3, [r7, #2]
 8005c7c:	b2db      	uxtb	r3, r3
 8005c7e:	4413      	add	r3, r2
 8005c80:	b2db      	uxtb	r3, r3
 8005c82:	3b01      	subs	r3, #1
 8005c84:	b2db      	uxtb	r3, r3
 8005c86:	4618      	mov	r0, r3
 8005c88:	f000 fd2c 	bl	80066e4 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Ysize - 1);
 8005c8c:	202b      	movs	r0, #43	; 0x2b
 8005c8e:	f000 fd0b 	bl	80066a8 <LCD_IO_WriteCmd8>
 8005c92:	88bb      	ldrh	r3, [r7, #4]
 8005c94:	0a1b      	lsrs	r3, r3, #8
 8005c96:	b29b      	uxth	r3, r3
 8005c98:	b2db      	uxtb	r3, r3
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f000 fd22 	bl	80066e4 <LCD_IO_WriteData8>
 8005ca0:	88bb      	ldrh	r3, [r7, #4]
 8005ca2:	b2db      	uxtb	r3, r3
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	f000 fd1d 	bl	80066e4 <LCD_IO_WriteData8>
 8005caa:	88ba      	ldrh	r2, [r7, #4]
 8005cac:	883b      	ldrh	r3, [r7, #0]
 8005cae:	4413      	add	r3, r2
 8005cb0:	3b01      	subs	r3, #1
 8005cb2:	121b      	asrs	r3, r3, #8
 8005cb4:	b2db      	uxtb	r3, r3
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f000 fd14 	bl	80066e4 <LCD_IO_WriteData8>
 8005cbc:	88bb      	ldrh	r3, [r7, #4]
 8005cbe:	b2da      	uxtb	r2, r3
 8005cc0:	883b      	ldrh	r3, [r7, #0]
 8005cc2:	b2db      	uxtb	r3, r3
 8005cc4:	4413      	add	r3, r2
 8005cc6:	b2db      	uxtb	r3, r3
 8005cc8:	3b01      	subs	r3, #1
 8005cca:	b2db      	uxtb	r3, r3
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f000 fd09 	bl	80066e4 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8DataFill16(ILI9341_RAMWR, RGBCode, Xsize * Ysize);
 8005cd2:	887b      	ldrh	r3, [r7, #2]
 8005cd4:	883a      	ldrh	r2, [r7, #0]
 8005cd6:	fb02 f303 	mul.w	r3, r2, r3
 8005cda:	461a      	mov	r2, r3
 8005cdc:	8b3b      	ldrh	r3, [r7, #24]
 8005cde:	4619      	mov	r1, r3
 8005ce0:	202c      	movs	r0, #44	; 0x2c
 8005ce2:	f000 fd2b 	bl	800673c <LCD_IO_WriteCmd8DataFill16>
  ILI9341_LCDMUTEX_POP();
}
 8005ce6:	bf00      	nop
 8005ce8:	370c      	adds	r7, #12
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd90      	pop	{r4, r7, pc}

08005cee <ili9341_DrawRGBImage>:
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  * @brief  Draw direction: right then down
  */
void ili9341_DrawRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t *pData)
{
 8005cee:	b590      	push	{r4, r7, lr}
 8005cf0:	b083      	sub	sp, #12
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	4604      	mov	r4, r0
 8005cf6:	4608      	mov	r0, r1
 8005cf8:	4611      	mov	r1, r2
 8005cfa:	461a      	mov	r2, r3
 8005cfc:	4623      	mov	r3, r4
 8005cfe:	80fb      	strh	r3, [r7, #6]
 8005d00:	4603      	mov	r3, r0
 8005d02:	80bb      	strh	r3, [r7, #4]
 8005d04:	460b      	mov	r3, r1
 8005d06:	807b      	strh	r3, [r7, #2]
 8005d08:	4613      	mov	r3, r2
 8005d0a:	803b      	strh	r3, [r7, #0]
  ili9341_SetDisplayWindow(Xpos, Ypos, Xsize, Ysize);
 8005d0c:	883b      	ldrh	r3, [r7, #0]
 8005d0e:	887a      	ldrh	r2, [r7, #2]
 8005d10:	88b9      	ldrh	r1, [r7, #4]
 8005d12:	88f8      	ldrh	r0, [r7, #6]
 8005d14:	f7ff fe72 	bl	80059fc <ili9341_SetDisplayWindow>
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8MultipleData16(ILI9341_RAMWR, pData, Xsize * Ysize);
 8005d18:	887b      	ldrh	r3, [r7, #2]
 8005d1a:	883a      	ldrh	r2, [r7, #0]
 8005d1c:	fb02 f303 	mul.w	r3, r2, r3
 8005d20:	461a      	mov	r2, r3
 8005d22:	69b9      	ldr	r1, [r7, #24]
 8005d24:	202c      	movs	r0, #44	; 0x2c
 8005d26:	f000 fd4f 	bl	80067c8 <LCD_IO_WriteCmd8MultipleData16>
  ILI9341_LCDMUTEX_POP();
}
 8005d2a:	bf00      	nop
 8005d2c:	370c      	adds	r7, #12
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd90      	pop	{r4, r7, pc}

08005d32 <ili9341_WriteChar>:
  * @param  fonto: font select (from font.h)
  * @param  RGB_Coder: Text Color
  * @param  RGB_bg: Char background Color
  * @retval None
  */
void ili9341_WriteChar(uint16_t Xpo, uint16_t Ypo, const char *chr,sFONT fonto, uint16_t RGB_Coder, uint16_t RGB_bg){
 8005d32:	b082      	sub	sp, #8
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b08a      	sub	sp, #40	; 0x28
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	603a      	str	r2, [r7, #0]
 8005d3c:	637b      	str	r3, [r7, #52]	; 0x34
 8005d3e:	4603      	mov	r3, r0
 8005d40:	80fb      	strh	r3, [r7, #6]
 8005d42:	460b      	mov	r3, r1
 8005d44:	80bb      	strh	r3, [r7, #4]
	/*ex
	 * ili9341_WriteChar(140, 50, "E", Font24, cl_ORANGE, cl_BLACK);
	 * */
	//// stored font data
	uint32_t hop32 = 0;
 8005d46:	2300      	movs	r3, #0
 8005d48:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t b8[4] = {0};
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	60fb      	str	r3, [r7, #12]
	 * c = i * rowbox -> jump to next column in next i rowloop
	 * k => jump to next row in that column
	 * */

	//// find num of bit rows per jump in fonts.c
	int rowbox = ceilf((float)(fonto.Width) / 8);
 8005d4e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005d50:	ee07 3a90 	vmov	s15, r3
 8005d54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d58:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8005d5c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005d60:	eeb0 0a47 	vmov.f32	s0, s14
 8005d64:	f009 ffae 	bl	800fcc4 <ceilf>
 8005d68:	eef0 7a40 	vmov.f32	s15, s0
 8005d6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005d70:	ee17 3a90 	vmov	r3, s15
 8005d74:	617b      	str	r3, [r7, #20]

	//// choose MSB check pos for each font size
	//// 0x80 , 0x8000 , 0x 800000
	uint32_t clif_msb = 0x80 << (8 * (rowbox - 1));
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	3b01      	subs	r3, #1
 8005d7a:	00db      	lsls	r3, r3, #3
 8005d7c:	2280      	movs	r2, #128	; 0x80
 8005d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d82:	613b      	str	r3, [r7, #16]

	//// -32 to offset sync ASCII Table start " " at 32
	//// double for loop as one char table
	for(int i = 0; i < fonto.Height; i++){
 8005d84:	2300      	movs	r3, #0
 8005d86:	623b      	str	r3, [r7, #32]
 8005d88:	e060      	b.n	8005e4c <ili9341_WriteChar+0x11a>
		hop32 = 0;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	627b      	str	r3, [r7, #36]	; 0x24
		for(int k = 0;k < rowbox;k++){
 8005d8e:	2300      	movs	r3, #0
 8005d90:	61fb      	str	r3, [r7, #28]
 8005d92:	e024      	b.n	8005dde <ili9341_WriteChar+0xac>
			b8[k] = fonto.table[((int)(*chr - 32) * fonto.Height * rowbox) + (i * rowbox) + k];
 8005d94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d96:	683a      	ldr	r2, [r7, #0]
 8005d98:	7812      	ldrb	r2, [r2, #0]
 8005d9a:	3a20      	subs	r2, #32
 8005d9c:	8f79      	ldrh	r1, [r7, #58]	; 0x3a
 8005d9e:	fb01 f202 	mul.w	r2, r1, r2
 8005da2:	6979      	ldr	r1, [r7, #20]
 8005da4:	fb02 f101 	mul.w	r1, r2, r1
 8005da8:	6a3a      	ldr	r2, [r7, #32]
 8005daa:	6978      	ldr	r0, [r7, #20]
 8005dac:	fb00 f202 	mul.w	r2, r0, r2
 8005db0:	4411      	add	r1, r2
 8005db2:	69fa      	ldr	r2, [r7, #28]
 8005db4:	440a      	add	r2, r1
 8005db6:	4413      	add	r3, r2
 8005db8:	7819      	ldrb	r1, [r3, #0]
 8005dba:	f107 020c 	add.w	r2, r7, #12
 8005dbe:	69fb      	ldr	r3, [r7, #28]
 8005dc0:	4413      	add	r3, r2
 8005dc2:	460a      	mov	r2, r1
 8005dc4:	701a      	strb	r2, [r3, #0]
			hop32 = (hop32 << 8) + b8[k];
 8005dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc8:	021b      	lsls	r3, r3, #8
 8005dca:	f107 010c 	add.w	r1, r7, #12
 8005dce:	69fa      	ldr	r2, [r7, #28]
 8005dd0:	440a      	add	r2, r1
 8005dd2:	7812      	ldrb	r2, [r2, #0]
 8005dd4:	4413      	add	r3, r2
 8005dd6:	627b      	str	r3, [r7, #36]	; 0x24
		for(int k = 0;k < rowbox;k++){
 8005dd8:	69fb      	ldr	r3, [r7, #28]
 8005dda:	3301      	adds	r3, #1
 8005ddc:	61fb      	str	r3, [r7, #28]
 8005dde:	69fa      	ldr	r2, [r7, #28]
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	429a      	cmp	r2, r3
 8005de4:	dbd6      	blt.n	8005d94 <ili9341_WriteChar+0x62>
		}

		for(int j = 0; j < fonto.Width; j++){
 8005de6:	2300      	movs	r3, #0
 8005de8:	61bb      	str	r3, [r7, #24]
 8005dea:	e027      	b.n	8005e3c <ili9341_WriteChar+0x10a>
			//// if valuein fonttable is 1
			if((hop32 << j) & clif_msb){ // buu32.b32
 8005dec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dee:	69bb      	ldr	r3, [r7, #24]
 8005df0:	409a      	lsls	r2, r3
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	4013      	ands	r3, r2
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d00e      	beq.n	8005e18 <ili9341_WriteChar+0xe6>
				ili9341_WritePixel(Xpo + j, Ypo + i, RGB_Coder);
 8005dfa:	69bb      	ldr	r3, [r7, #24]
 8005dfc:	b29a      	uxth	r2, r3
 8005dfe:	88fb      	ldrh	r3, [r7, #6]
 8005e00:	4413      	add	r3, r2
 8005e02:	b298      	uxth	r0, r3
 8005e04:	6a3b      	ldr	r3, [r7, #32]
 8005e06:	b29a      	uxth	r2, r3
 8005e08:	88bb      	ldrh	r3, [r7, #4]
 8005e0a:	4413      	add	r3, r2
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8005e10:	4619      	mov	r1, r3
 8005e12:	f7ff fda9 	bl	8005968 <ili9341_WritePixel>
 8005e16:	e00e      	b.n	8005e36 <ili9341_WriteChar+0x104>
			}
			//// for background write
			else{
				ili9341_WritePixel(Xpo + j, Ypo + i, RGB_bg);
 8005e18:	69bb      	ldr	r3, [r7, #24]
 8005e1a:	b29a      	uxth	r2, r3
 8005e1c:	88fb      	ldrh	r3, [r7, #6]
 8005e1e:	4413      	add	r3, r2
 8005e20:	b298      	uxth	r0, r3
 8005e22:	6a3b      	ldr	r3, [r7, #32]
 8005e24:	b29a      	uxth	r2, r3
 8005e26:	88bb      	ldrh	r3, [r7, #4]
 8005e28:	4413      	add	r3, r2
 8005e2a:	b29b      	uxth	r3, r3
 8005e2c:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8005e30:	4619      	mov	r1, r3
 8005e32:	f7ff fd99 	bl	8005968 <ili9341_WritePixel>
		for(int j = 0; j < fonto.Width; j++){
 8005e36:	69bb      	ldr	r3, [r7, #24]
 8005e38:	3301      	adds	r3, #1
 8005e3a:	61bb      	str	r3, [r7, #24]
 8005e3c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005e3e:	461a      	mov	r2, r3
 8005e40:	69bb      	ldr	r3, [r7, #24]
 8005e42:	4293      	cmp	r3, r2
 8005e44:	dbd2      	blt.n	8005dec <ili9341_WriteChar+0xba>
	for(int i = 0; i < fonto.Height; i++){
 8005e46:	6a3b      	ldr	r3, [r7, #32]
 8005e48:	3301      	adds	r3, #1
 8005e4a:	623b      	str	r3, [r7, #32]
 8005e4c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005e4e:	461a      	mov	r2, r3
 8005e50:	6a3b      	ldr	r3, [r7, #32]
 8005e52:	4293      	cmp	r3, r2
 8005e54:	db99      	blt.n	8005d8a <ili9341_WriteChar+0x58>
			}

		}
	}
}
 8005e56:	bf00      	nop
 8005e58:	bf00      	nop
 8005e5a:	3728      	adds	r7, #40	; 0x28
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005e62:	b002      	add	sp, #8
 8005e64:	4770      	bx	lr

08005e66 <ili9341_WriteCharNoBG>:
  * @param  chr:  Display Char
  * @param  fonto: font select (from font.h)
  * @param  RGB_Coder: Text Color
  * @retval None
  */
void ili9341_WriteCharNoBG(uint16_t Xpo, uint16_t Ypo, const char *chr,sFONT fonto, uint16_t RGB_Coder){
 8005e66:	b082      	sub	sp, #8
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b08a      	sub	sp, #40	; 0x28
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	603a      	str	r2, [r7, #0]
 8005e70:	637b      	str	r3, [r7, #52]	; 0x34
 8005e72:	4603      	mov	r3, r0
 8005e74:	80fb      	strh	r3, [r7, #6]
 8005e76:	460b      	mov	r3, r1
 8005e78:	80bb      	strh	r3, [r7, #4]
	/*ex
	 * ili9341_WriteCharNoBG(10, 30, "E", Font24, cl_ORANGE);
	 * */
	//// stored font data
	uint32_t hop32 = 0;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t b8[4] = {0};
 8005e7e:	2300      	movs	r3, #0
 8005e80:	60fb      	str	r3, [r7, #12]

	//// find num of bit rows per jump in fonts.c
	int rowbox = ceilf((float)(fonto.Width) / 8);
 8005e82:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005e84:	ee07 3a90 	vmov	s15, r3
 8005e88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e8c:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8005e90:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005e94:	eeb0 0a47 	vmov.f32	s0, s14
 8005e98:	f009 ff14 	bl	800fcc4 <ceilf>
 8005e9c:	eef0 7a40 	vmov.f32	s15, s0
 8005ea0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005ea4:	ee17 3a90 	vmov	r3, s15
 8005ea8:	617b      	str	r3, [r7, #20]
	uint32_t clif_msb = 0x80 << (8 * (rowbox - 1));
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	3b01      	subs	r3, #1
 8005eae:	00db      	lsls	r3, r3, #3
 8005eb0:	2280      	movs	r2, #128	; 0x80
 8005eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8005eb6:	613b      	str	r3, [r7, #16]

	for(int i = 0; i < fonto.Height; i++){
 8005eb8:	2300      	movs	r3, #0
 8005eba:	623b      	str	r3, [r7, #32]
 8005ebc:	e050      	b.n	8005f60 <ili9341_WriteCharNoBG+0xfa>
		hop32 = 0;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	627b      	str	r3, [r7, #36]	; 0x24
		for(int k = 0;k < rowbox;k++){
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	61fb      	str	r3, [r7, #28]
 8005ec6:	e024      	b.n	8005f12 <ili9341_WriteCharNoBG+0xac>
			b8[k] = fonto.table[((int)(*chr - 32) * fonto.Height * rowbox) + (i * rowbox) + k];
 8005ec8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eca:	683a      	ldr	r2, [r7, #0]
 8005ecc:	7812      	ldrb	r2, [r2, #0]
 8005ece:	3a20      	subs	r2, #32
 8005ed0:	8f79      	ldrh	r1, [r7, #58]	; 0x3a
 8005ed2:	fb01 f202 	mul.w	r2, r1, r2
 8005ed6:	6979      	ldr	r1, [r7, #20]
 8005ed8:	fb02 f101 	mul.w	r1, r2, r1
 8005edc:	6a3a      	ldr	r2, [r7, #32]
 8005ede:	6978      	ldr	r0, [r7, #20]
 8005ee0:	fb00 f202 	mul.w	r2, r0, r2
 8005ee4:	4411      	add	r1, r2
 8005ee6:	69fa      	ldr	r2, [r7, #28]
 8005ee8:	440a      	add	r2, r1
 8005eea:	4413      	add	r3, r2
 8005eec:	7819      	ldrb	r1, [r3, #0]
 8005eee:	f107 020c 	add.w	r2, r7, #12
 8005ef2:	69fb      	ldr	r3, [r7, #28]
 8005ef4:	4413      	add	r3, r2
 8005ef6:	460a      	mov	r2, r1
 8005ef8:	701a      	strb	r2, [r3, #0]
			hop32 = (hop32 << 8) + b8[k];
 8005efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efc:	021b      	lsls	r3, r3, #8
 8005efe:	f107 010c 	add.w	r1, r7, #12
 8005f02:	69fa      	ldr	r2, [r7, #28]
 8005f04:	440a      	add	r2, r1
 8005f06:	7812      	ldrb	r2, [r2, #0]
 8005f08:	4413      	add	r3, r2
 8005f0a:	627b      	str	r3, [r7, #36]	; 0x24
		for(int k = 0;k < rowbox;k++){
 8005f0c:	69fb      	ldr	r3, [r7, #28]
 8005f0e:	3301      	adds	r3, #1
 8005f10:	61fb      	str	r3, [r7, #28]
 8005f12:	69fa      	ldr	r2, [r7, #28]
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	429a      	cmp	r2, r3
 8005f18:	dbd6      	blt.n	8005ec8 <ili9341_WriteCharNoBG+0x62>
		}

		for(int j = 0; j < fonto.Width; j++){
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	61bb      	str	r3, [r7, #24]
 8005f1e:	e017      	b.n	8005f50 <ili9341_WriteCharNoBG+0xea>
			//// if valuein fonttable is 1
			if((hop32 << j) & clif_msb){ // buu32.b32
 8005f20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f22:	69bb      	ldr	r3, [r7, #24]
 8005f24:	409a      	lsls	r2, r3
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	4013      	ands	r3, r2
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d00d      	beq.n	8005f4a <ili9341_WriteCharNoBG+0xe4>
				ili9341_WritePixel(Xpo + j, Ypo + i, RGB_Coder);
 8005f2e:	69bb      	ldr	r3, [r7, #24]
 8005f30:	b29a      	uxth	r2, r3
 8005f32:	88fb      	ldrh	r3, [r7, #6]
 8005f34:	4413      	add	r3, r2
 8005f36:	b298      	uxth	r0, r3
 8005f38:	6a3b      	ldr	r3, [r7, #32]
 8005f3a:	b29a      	uxth	r2, r3
 8005f3c:	88bb      	ldrh	r3, [r7, #4]
 8005f3e:	4413      	add	r3, r2
 8005f40:	b29b      	uxth	r3, r3
 8005f42:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8005f44:	4619      	mov	r1, r3
 8005f46:	f7ff fd0f 	bl	8005968 <ili9341_WritePixel>
		for(int j = 0; j < fonto.Width; j++){
 8005f4a:	69bb      	ldr	r3, [r7, #24]
 8005f4c:	3301      	adds	r3, #1
 8005f4e:	61bb      	str	r3, [r7, #24]
 8005f50:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005f52:	461a      	mov	r2, r3
 8005f54:	69bb      	ldr	r3, [r7, #24]
 8005f56:	4293      	cmp	r3, r2
 8005f58:	dbe2      	blt.n	8005f20 <ili9341_WriteCharNoBG+0xba>
	for(int i = 0; i < fonto.Height; i++){
 8005f5a:	6a3b      	ldr	r3, [r7, #32]
 8005f5c:	3301      	adds	r3, #1
 8005f5e:	623b      	str	r3, [r7, #32]
 8005f60:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005f62:	461a      	mov	r2, r3
 8005f64:	6a3b      	ldr	r3, [r7, #32]
 8005f66:	4293      	cmp	r3, r2
 8005f68:	dba9      	blt.n	8005ebe <ili9341_WriteCharNoBG+0x58>
			}
		}
	}
}
 8005f6a:	bf00      	nop
 8005f6c:	bf00      	nop
 8005f6e:	3728      	adds	r7, #40	; 0x28
 8005f70:	46bd      	mov	sp, r7
 8005f72:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f76:	b002      	add	sp, #8
 8005f78:	4770      	bx	lr

08005f7a <ili9341_WriteString>:
  * @param  fonto: font select (from font.h)
  * @param  RGB_Coder: Text Color
  * @param  RGB_bg: Text background Color
  * @retval None
  */
void ili9341_WriteString(uint16_t Xpo, uint16_t Ypo,const char* strr,sFONT fonto, uint16_t RGB_Coder, uint16_t RGB_bg){
 8005f7a:	b082      	sub	sp, #8
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b088      	sub	sp, #32
 8005f80:	af04      	add	r7, sp, #16
 8005f82:	603a      	str	r2, [r7, #0]
 8005f84:	61fb      	str	r3, [r7, #28]
 8005f86:	4603      	mov	r3, r0
 8005f88:	80fb      	strh	r3, [r7, #6]
 8005f8a:	460b      	mov	r3, r1
 8005f8c:	80bb      	strh	r3, [r7, #4]
	/*ex
	 * ili9341_WriteString(20, 300, "Helios xTerra", Font20, cl_WHITE, cl_BLACK);
	 * */
	uint16_t ili_heigh = ili9341_GetLcdPixelHeight();
 8005f8e:	f7ff fc14 	bl	80057ba <ili9341_GetLcdPixelHeight>
 8005f92:	4603      	mov	r3, r0
 8005f94:	81fb      	strh	r3, [r7, #14]
	uint16_t ili_width = ili9341_GetLcdPixelWidth();
 8005f96:	f7ff fc07 	bl	80057a8 <ili9341_GetLcdPixelWidth>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	81bb      	strh	r3, [r7, #12]
	while(*strr){
 8005f9e:	e02c      	b.n	8005ffa <ili9341_WriteString+0x80>
	//// Check screen overflow / new line
		if(Xpo + fonto.Width >= ili_width){
 8005fa0:	88fb      	ldrh	r3, [r7, #6]
 8005fa2:	8c3a      	ldrh	r2, [r7, #32]
 8005fa4:	441a      	add	r2, r3
 8005fa6:	89bb      	ldrh	r3, [r7, #12]
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	db13      	blt.n	8005fd4 <ili9341_WriteString+0x5a>
			Xpo = 0;
 8005fac:	2300      	movs	r3, #0
 8005fae:	80fb      	strh	r3, [r7, #6]
			Ypo += fonto.Height;
 8005fb0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8005fb2:	88bb      	ldrh	r3, [r7, #4]
 8005fb4:	4413      	add	r3, r2
 8005fb6:	80bb      	strh	r3, [r7, #4]

			if(Ypo + fonto.Height >= ili_heigh){
 8005fb8:	88bb      	ldrh	r3, [r7, #4]
 8005fba:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8005fbc:	441a      	add	r2, r3
 8005fbe:	89fb      	ldrh	r3, [r7, #14]
 8005fc0:	429a      	cmp	r2, r3
 8005fc2:	da1f      	bge.n	8006004 <ili9341_WriteString+0x8a>
				break;
			}

			if(*strr == ' ') {
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	781b      	ldrb	r3, [r3, #0]
 8005fc8:	2b20      	cmp	r3, #32
 8005fca:	d103      	bne.n	8005fd4 <ili9341_WriteString+0x5a>
				// skip spaces in the beginning of the new line
				strr++;
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	3301      	adds	r3, #1
 8005fd0:	603b      	str	r3, [r7, #0]
				continue;
 8005fd2:	e012      	b.n	8005ffa <ili9341_WriteString+0x80>
			}
		}
		//ST7735_WriteChar(x, y, *str, font, color, bgcolor);
		ili9341_WriteChar(Xpo, Ypo, strr, fonto, RGB_Coder, RGB_bg);
 8005fd4:	88b9      	ldrh	r1, [r7, #4]
 8005fd6:	88f8      	ldrh	r0, [r7, #6]
 8005fd8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005fda:	9302      	str	r3, [sp, #8]
 8005fdc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005fde:	9301      	str	r3, [sp, #4]
 8005fe0:	6a3b      	ldr	r3, [r7, #32]
 8005fe2:	9300      	str	r3, [sp, #0]
 8005fe4:	69fb      	ldr	r3, [r7, #28]
 8005fe6:	683a      	ldr	r2, [r7, #0]
 8005fe8:	f7ff fea3 	bl	8005d32 <ili9341_WriteChar>
		Xpo += fonto.Width;
 8005fec:	8c3a      	ldrh	r2, [r7, #32]
 8005fee:	88fb      	ldrh	r3, [r7, #6]
 8005ff0:	4413      	add	r3, r2
 8005ff2:	80fb      	strh	r3, [r7, #6]
		strr++;
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	3301      	adds	r3, #1
 8005ff8:	603b      	str	r3, [r7, #0]
	while(*strr){
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	781b      	ldrb	r3, [r3, #0]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d1ce      	bne.n	8005fa0 <ili9341_WriteString+0x26>
	}
}
 8006002:	e000      	b.n	8006006 <ili9341_WriteString+0x8c>
				break;
 8006004:	bf00      	nop
}
 8006006:	bf00      	nop
 8006008:	3710      	adds	r7, #16
 800600a:	46bd      	mov	sp, r7
 800600c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006010:	b002      	add	sp, #8
 8006012:	4770      	bx	lr

08006014 <ili9341_WriteStringNoBG>:
  * @param  Strr:  Display Text
  * @param  fonto: font select (from font.h)
  * @param  RGB_Coder: Text Color
  * @retval None
  */
void ili9341_WriteStringNoBG(uint16_t Xpo, uint16_t Ypo,const char* strr,sFONT fonto, uint16_t RGB_Coder){
 8006014:	b082      	sub	sp, #8
 8006016:	b580      	push	{r7, lr}
 8006018:	b086      	sub	sp, #24
 800601a:	af02      	add	r7, sp, #8
 800601c:	603a      	str	r2, [r7, #0]
 800601e:	61fb      	str	r3, [r7, #28]
 8006020:	4603      	mov	r3, r0
 8006022:	80fb      	strh	r3, [r7, #6]
 8006024:	460b      	mov	r3, r1
 8006026:	80bb      	strh	r3, [r7, #4]
	/*ex
	 * ili9341_WriteString(20, 300, "Helios xTerra", Font20, cl_WHITE, cl_BLACK);
	 * */
	uint16_t ili_heigh = ili9341_GetLcdPixelHeight();
 8006028:	f7ff fbc7 	bl	80057ba <ili9341_GetLcdPixelHeight>
 800602c:	4603      	mov	r3, r0
 800602e:	81fb      	strh	r3, [r7, #14]
	uint16_t ili_width = ili9341_GetLcdPixelWidth();
 8006030:	f7ff fbba 	bl	80057a8 <ili9341_GetLcdPixelWidth>
 8006034:	4603      	mov	r3, r0
 8006036:	81bb      	strh	r3, [r7, #12]
	while(*strr){
 8006038:	e02a      	b.n	8006090 <ili9341_WriteStringNoBG+0x7c>
	//// Check screen overflow / new line
		if(Xpo + fonto.Width >= ili_width){
 800603a:	88fb      	ldrh	r3, [r7, #6]
 800603c:	8c3a      	ldrh	r2, [r7, #32]
 800603e:	441a      	add	r2, r3
 8006040:	89bb      	ldrh	r3, [r7, #12]
 8006042:	429a      	cmp	r2, r3
 8006044:	db13      	blt.n	800606e <ili9341_WriteStringNoBG+0x5a>
			Xpo = 0;
 8006046:	2300      	movs	r3, #0
 8006048:	80fb      	strh	r3, [r7, #6]
			Ypo += fonto.Height;
 800604a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800604c:	88bb      	ldrh	r3, [r7, #4]
 800604e:	4413      	add	r3, r2
 8006050:	80bb      	strh	r3, [r7, #4]

			if(Ypo + fonto.Height >= ili_heigh){
 8006052:	88bb      	ldrh	r3, [r7, #4]
 8006054:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006056:	441a      	add	r2, r3
 8006058:	89fb      	ldrh	r3, [r7, #14]
 800605a:	429a      	cmp	r2, r3
 800605c:	da1d      	bge.n	800609a <ili9341_WriteStringNoBG+0x86>
				break;
			}
			if(*strr == ' ') {
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	781b      	ldrb	r3, [r3, #0]
 8006062:	2b20      	cmp	r3, #32
 8006064:	d103      	bne.n	800606e <ili9341_WriteStringNoBG+0x5a>
				strr++;
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	3301      	adds	r3, #1
 800606a:	603b      	str	r3, [r7, #0]
				continue;
 800606c:	e010      	b.n	8006090 <ili9341_WriteStringNoBG+0x7c>
			}
		}
		ili9341_WriteCharNoBG(Xpo, Ypo, strr, fonto, RGB_Coder);
 800606e:	88b9      	ldrh	r1, [r7, #4]
 8006070:	88f8      	ldrh	r0, [r7, #6]
 8006072:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006074:	9301      	str	r3, [sp, #4]
 8006076:	6a3b      	ldr	r3, [r7, #32]
 8006078:	9300      	str	r3, [sp, #0]
 800607a:	69fb      	ldr	r3, [r7, #28]
 800607c:	683a      	ldr	r2, [r7, #0]
 800607e:	f7ff fef2 	bl	8005e66 <ili9341_WriteCharNoBG>
		Xpo += fonto.Width;
 8006082:	8c3a      	ldrh	r2, [r7, #32]
 8006084:	88fb      	ldrh	r3, [r7, #6]
 8006086:	4413      	add	r3, r2
 8006088:	80fb      	strh	r3, [r7, #6]
		strr++;
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	3301      	adds	r3, #1
 800608e:	603b      	str	r3, [r7, #0]
	while(*strr){
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	781b      	ldrb	r3, [r3, #0]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d1d0      	bne.n	800603a <ili9341_WriteStringNoBG+0x26>
	}
}
 8006098:	e000      	b.n	800609c <ili9341_WriteStringNoBG+0x88>
				break;
 800609a:	bf00      	nop
}
 800609c:	bf00      	nop
 800609e:	3710      	adds	r7, #16
 80060a0:	46bd      	mov	sp, r7
 80060a2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80060a6:	b002      	add	sp, #8
 80060a8:	4770      	bx	lr
	...

080060ac <LcdWrite8>:

#define LCD_WRITE_CLK         GPIOX_ODR(LCD_SCK) = 0; LCD_WRITE_DELAY; GPIOX_ODR(LCD_SCK) = 1;
#define LCD_READ_CLK          GPIOX_ODR(LCD_SCK) = 1; GPIOX_ODR(LCD_SCK) = 0; LCD_READ_DELAY;

void LcdWrite8(uint8_t d8)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b083      	sub	sp, #12
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	4603      	mov	r3, r0
 80060b4:	71fb      	strb	r3, [r7, #7]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 7);
 80060b6:	1dfb      	adds	r3, r7, #7
 80060b8:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80060bc:	1dfb      	adds	r3, r7, #7
 80060be:	015b      	lsls	r3, r3, #5
 80060c0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80060c4:	f023 031f 	bic.w	r3, r3, #31
 80060c8:	4313      	orrs	r3, r2
 80060ca:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80060ce:	331c      	adds	r3, #28
 80060d0:	4a53      	ldr	r2, [pc, #332]	; (8006220 <LcdWrite8+0x174>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 80060d6:	4b53      	ldr	r3, [pc, #332]	; (8006224 <LcdWrite8+0x178>)
 80060d8:	2200      	movs	r2, #0
 80060da:	601a      	str	r2, [r3, #0]
 80060dc:	4b51      	ldr	r3, [pc, #324]	; (8006224 <LcdWrite8+0x178>)
 80060de:	2201      	movs	r2, #1
 80060e0:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 6);
 80060e2:	1dfb      	adds	r3, r7, #7
 80060e4:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80060e8:	1dfb      	adds	r3, r7, #7
 80060ea:	015b      	lsls	r3, r3, #5
 80060ec:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80060f0:	f023 031f 	bic.w	r3, r3, #31
 80060f4:	4313      	orrs	r3, r2
 80060f6:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80060fa:	3318      	adds	r3, #24
 80060fc:	4a48      	ldr	r2, [pc, #288]	; (8006220 <LcdWrite8+0x174>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8006102:	4b48      	ldr	r3, [pc, #288]	; (8006224 <LcdWrite8+0x178>)
 8006104:	2200      	movs	r2, #0
 8006106:	601a      	str	r2, [r3, #0]
 8006108:	4b46      	ldr	r3, [pc, #280]	; (8006224 <LcdWrite8+0x178>)
 800610a:	2201      	movs	r2, #1
 800610c:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 5);
 800610e:	1dfb      	adds	r3, r7, #7
 8006110:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8006114:	1dfb      	adds	r3, r7, #7
 8006116:	015b      	lsls	r3, r3, #5
 8006118:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 800611c:	f023 031f 	bic.w	r3, r3, #31
 8006120:	4313      	orrs	r3, r2
 8006122:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8006126:	3314      	adds	r3, #20
 8006128:	4a3d      	ldr	r2, [pc, #244]	; (8006220 <LcdWrite8+0x174>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 800612e:	4b3d      	ldr	r3, [pc, #244]	; (8006224 <LcdWrite8+0x178>)
 8006130:	2200      	movs	r2, #0
 8006132:	601a      	str	r2, [r3, #0]
 8006134:	4b3b      	ldr	r3, [pc, #236]	; (8006224 <LcdWrite8+0x178>)
 8006136:	2201      	movs	r2, #1
 8006138:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 4);
 800613a:	1dfb      	adds	r3, r7, #7
 800613c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8006140:	1dfb      	adds	r3, r7, #7
 8006142:	015b      	lsls	r3, r3, #5
 8006144:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8006148:	f023 031f 	bic.w	r3, r3, #31
 800614c:	4313      	orrs	r3, r2
 800614e:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8006152:	3310      	adds	r3, #16
 8006154:	4a32      	ldr	r2, [pc, #200]	; (8006220 <LcdWrite8+0x174>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 800615a:	4b32      	ldr	r3, [pc, #200]	; (8006224 <LcdWrite8+0x178>)
 800615c:	2200      	movs	r2, #0
 800615e:	601a      	str	r2, [r3, #0]
 8006160:	4b30      	ldr	r3, [pc, #192]	; (8006224 <LcdWrite8+0x178>)
 8006162:	2201      	movs	r2, #1
 8006164:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 3);
 8006166:	1dfb      	adds	r3, r7, #7
 8006168:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800616c:	1dfb      	adds	r3, r7, #7
 800616e:	015b      	lsls	r3, r3, #5
 8006170:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8006174:	f023 031f 	bic.w	r3, r3, #31
 8006178:	4313      	orrs	r3, r2
 800617a:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800617e:	330c      	adds	r3, #12
 8006180:	4a27      	ldr	r2, [pc, #156]	; (8006220 <LcdWrite8+0x174>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8006186:	4b27      	ldr	r3, [pc, #156]	; (8006224 <LcdWrite8+0x178>)
 8006188:	2200      	movs	r2, #0
 800618a:	601a      	str	r2, [r3, #0]
 800618c:	4b25      	ldr	r3, [pc, #148]	; (8006224 <LcdWrite8+0x178>)
 800618e:	2201      	movs	r2, #1
 8006190:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 2);
 8006192:	1dfb      	adds	r3, r7, #7
 8006194:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8006198:	1dfb      	adds	r3, r7, #7
 800619a:	015b      	lsls	r3, r3, #5
 800619c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80061a0:	f023 031f 	bic.w	r3, r3, #31
 80061a4:	4313      	orrs	r3, r2
 80061a6:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80061aa:	3308      	adds	r3, #8
 80061ac:	4a1c      	ldr	r2, [pc, #112]	; (8006220 <LcdWrite8+0x174>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 80061b2:	4b1c      	ldr	r3, [pc, #112]	; (8006224 <LcdWrite8+0x178>)
 80061b4:	2200      	movs	r2, #0
 80061b6:	601a      	str	r2, [r3, #0]
 80061b8:	4b1a      	ldr	r3, [pc, #104]	; (8006224 <LcdWrite8+0x178>)
 80061ba:	2201      	movs	r2, #1
 80061bc:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 1);
 80061be:	1dfb      	adds	r3, r7, #7
 80061c0:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80061c4:	1dfb      	adds	r3, r7, #7
 80061c6:	015b      	lsls	r3, r3, #5
 80061c8:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80061cc:	f023 031f 	bic.w	r3, r3, #31
 80061d0:	4313      	orrs	r3, r2
 80061d2:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80061d6:	3304      	adds	r3, #4
 80061d8:	4a11      	ldr	r2, [pc, #68]	; (8006220 <LcdWrite8+0x174>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 80061de:	4b11      	ldr	r3, [pc, #68]	; (8006224 <LcdWrite8+0x178>)
 80061e0:	2200      	movs	r2, #0
 80061e2:	601a      	str	r2, [r3, #0]
 80061e4:	4b0f      	ldr	r3, [pc, #60]	; (8006224 <LcdWrite8+0x178>)
 80061e6:	2201      	movs	r2, #1
 80061e8:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 0);
 80061ea:	1dfb      	adds	r3, r7, #7
 80061ec:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80061f0:	1dfb      	adds	r3, r7, #7
 80061f2:	015b      	lsls	r3, r3, #5
 80061f4:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80061f8:	f023 031f 	bic.w	r3, r3, #31
 80061fc:	4313      	orrs	r3, r2
 80061fe:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8006202:	4a07      	ldr	r2, [pc, #28]	; (8006220 <LcdWrite8+0x174>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8006208:	4b06      	ldr	r3, [pc, #24]	; (8006224 <LcdWrite8+0x178>)
 800620a:	2200      	movs	r2, #0
 800620c:	601a      	str	r2, [r3, #0]
 800620e:	4b05      	ldr	r3, [pc, #20]	; (8006224 <LcdWrite8+0x178>)
 8006210:	2201      	movs	r2, #1
 8006212:	601a      	str	r2, [r3, #0]
}
 8006214:	bf00      	nop
 8006216:	370c      	adds	r7, #12
 8006218:	46bd      	mov	sp, r7
 800621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621e:	4770      	bx	lr
 8006220:	4241028c 	.word	0x4241028c
 8006224:	42408280 	.word	0x42408280

08006228 <LcdWrite16>:

void LcdWrite16(uint16_t d16)
{
 8006228:	b480      	push	{r7}
 800622a:	b083      	sub	sp, #12
 800622c:	af00      	add	r7, sp, #0
 800622e:	4603      	mov	r3, r0
 8006230:	80fb      	strh	r3, [r7, #6]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 15);
 8006232:	1dbb      	adds	r3, r7, #6
 8006234:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8006238:	1dbb      	adds	r3, r7, #6
 800623a:	015b      	lsls	r3, r3, #5
 800623c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8006240:	f023 031f 	bic.w	r3, r3, #31
 8006244:	4313      	orrs	r3, r2
 8006246:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800624a:	333c      	adds	r3, #60	; 0x3c
 800624c:	4aab      	ldr	r2, [pc, #684]	; (80064fc <LcdWrite16+0x2d4>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8006252:	4bab      	ldr	r3, [pc, #684]	; (8006500 <LcdWrite16+0x2d8>)
 8006254:	2200      	movs	r2, #0
 8006256:	601a      	str	r2, [r3, #0]
 8006258:	4ba9      	ldr	r3, [pc, #676]	; (8006500 <LcdWrite16+0x2d8>)
 800625a:	2201      	movs	r2, #1
 800625c:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 14);
 800625e:	1dbb      	adds	r3, r7, #6
 8006260:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8006264:	1dbb      	adds	r3, r7, #6
 8006266:	015b      	lsls	r3, r3, #5
 8006268:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 800626c:	f023 031f 	bic.w	r3, r3, #31
 8006270:	4313      	orrs	r3, r2
 8006272:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8006276:	3338      	adds	r3, #56	; 0x38
 8006278:	4aa0      	ldr	r2, [pc, #640]	; (80064fc <LcdWrite16+0x2d4>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 800627e:	4ba0      	ldr	r3, [pc, #640]	; (8006500 <LcdWrite16+0x2d8>)
 8006280:	2200      	movs	r2, #0
 8006282:	601a      	str	r2, [r3, #0]
 8006284:	4b9e      	ldr	r3, [pc, #632]	; (8006500 <LcdWrite16+0x2d8>)
 8006286:	2201      	movs	r2, #1
 8006288:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 13);
 800628a:	1dbb      	adds	r3, r7, #6
 800628c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8006290:	1dbb      	adds	r3, r7, #6
 8006292:	015b      	lsls	r3, r3, #5
 8006294:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8006298:	f023 031f 	bic.w	r3, r3, #31
 800629c:	4313      	orrs	r3, r2
 800629e:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80062a2:	3334      	adds	r3, #52	; 0x34
 80062a4:	4a95      	ldr	r2, [pc, #596]	; (80064fc <LcdWrite16+0x2d4>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 80062aa:	4b95      	ldr	r3, [pc, #596]	; (8006500 <LcdWrite16+0x2d8>)
 80062ac:	2200      	movs	r2, #0
 80062ae:	601a      	str	r2, [r3, #0]
 80062b0:	4b93      	ldr	r3, [pc, #588]	; (8006500 <LcdWrite16+0x2d8>)
 80062b2:	2201      	movs	r2, #1
 80062b4:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 12);
 80062b6:	1dbb      	adds	r3, r7, #6
 80062b8:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80062bc:	1dbb      	adds	r3, r7, #6
 80062be:	015b      	lsls	r3, r3, #5
 80062c0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80062c4:	f023 031f 	bic.w	r3, r3, #31
 80062c8:	4313      	orrs	r3, r2
 80062ca:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80062ce:	3330      	adds	r3, #48	; 0x30
 80062d0:	4a8a      	ldr	r2, [pc, #552]	; (80064fc <LcdWrite16+0x2d4>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 80062d6:	4b8a      	ldr	r3, [pc, #552]	; (8006500 <LcdWrite16+0x2d8>)
 80062d8:	2200      	movs	r2, #0
 80062da:	601a      	str	r2, [r3, #0]
 80062dc:	4b88      	ldr	r3, [pc, #544]	; (8006500 <LcdWrite16+0x2d8>)
 80062de:	2201      	movs	r2, #1
 80062e0:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 11);
 80062e2:	1dbb      	adds	r3, r7, #6
 80062e4:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80062e8:	1dbb      	adds	r3, r7, #6
 80062ea:	015b      	lsls	r3, r3, #5
 80062ec:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80062f0:	f023 031f 	bic.w	r3, r3, #31
 80062f4:	4313      	orrs	r3, r2
 80062f6:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80062fa:	332c      	adds	r3, #44	; 0x2c
 80062fc:	4a7f      	ldr	r2, [pc, #508]	; (80064fc <LcdWrite16+0x2d4>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8006302:	4b7f      	ldr	r3, [pc, #508]	; (8006500 <LcdWrite16+0x2d8>)
 8006304:	2200      	movs	r2, #0
 8006306:	601a      	str	r2, [r3, #0]
 8006308:	4b7d      	ldr	r3, [pc, #500]	; (8006500 <LcdWrite16+0x2d8>)
 800630a:	2201      	movs	r2, #1
 800630c:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 10);
 800630e:	1dbb      	adds	r3, r7, #6
 8006310:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8006314:	1dbb      	adds	r3, r7, #6
 8006316:	015b      	lsls	r3, r3, #5
 8006318:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 800631c:	f023 031f 	bic.w	r3, r3, #31
 8006320:	4313      	orrs	r3, r2
 8006322:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8006326:	3328      	adds	r3, #40	; 0x28
 8006328:	4a74      	ldr	r2, [pc, #464]	; (80064fc <LcdWrite16+0x2d4>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 800632e:	4b74      	ldr	r3, [pc, #464]	; (8006500 <LcdWrite16+0x2d8>)
 8006330:	2200      	movs	r2, #0
 8006332:	601a      	str	r2, [r3, #0]
 8006334:	4b72      	ldr	r3, [pc, #456]	; (8006500 <LcdWrite16+0x2d8>)
 8006336:	2201      	movs	r2, #1
 8006338:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 9);
 800633a:	1dbb      	adds	r3, r7, #6
 800633c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8006340:	1dbb      	adds	r3, r7, #6
 8006342:	015b      	lsls	r3, r3, #5
 8006344:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8006348:	f023 031f 	bic.w	r3, r3, #31
 800634c:	4313      	orrs	r3, r2
 800634e:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8006352:	3324      	adds	r3, #36	; 0x24
 8006354:	4a69      	ldr	r2, [pc, #420]	; (80064fc <LcdWrite16+0x2d4>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 800635a:	4b69      	ldr	r3, [pc, #420]	; (8006500 <LcdWrite16+0x2d8>)
 800635c:	2200      	movs	r2, #0
 800635e:	601a      	str	r2, [r3, #0]
 8006360:	4b67      	ldr	r3, [pc, #412]	; (8006500 <LcdWrite16+0x2d8>)
 8006362:	2201      	movs	r2, #1
 8006364:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 8);
 8006366:	1dbb      	adds	r3, r7, #6
 8006368:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800636c:	1dbb      	adds	r3, r7, #6
 800636e:	015b      	lsls	r3, r3, #5
 8006370:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8006374:	f023 031f 	bic.w	r3, r3, #31
 8006378:	4313      	orrs	r3, r2
 800637a:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800637e:	3320      	adds	r3, #32
 8006380:	4a5e      	ldr	r2, [pc, #376]	; (80064fc <LcdWrite16+0x2d4>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8006386:	4b5e      	ldr	r3, [pc, #376]	; (8006500 <LcdWrite16+0x2d8>)
 8006388:	2200      	movs	r2, #0
 800638a:	601a      	str	r2, [r3, #0]
 800638c:	4b5c      	ldr	r3, [pc, #368]	; (8006500 <LcdWrite16+0x2d8>)
 800638e:	2201      	movs	r2, #1
 8006390:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 7);
 8006392:	1dbb      	adds	r3, r7, #6
 8006394:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8006398:	1dbb      	adds	r3, r7, #6
 800639a:	015b      	lsls	r3, r3, #5
 800639c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80063a0:	f023 031f 	bic.w	r3, r3, #31
 80063a4:	4313      	orrs	r3, r2
 80063a6:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80063aa:	331c      	adds	r3, #28
 80063ac:	4a53      	ldr	r2, [pc, #332]	; (80064fc <LcdWrite16+0x2d4>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 80063b2:	4b53      	ldr	r3, [pc, #332]	; (8006500 <LcdWrite16+0x2d8>)
 80063b4:	2200      	movs	r2, #0
 80063b6:	601a      	str	r2, [r3, #0]
 80063b8:	4b51      	ldr	r3, [pc, #324]	; (8006500 <LcdWrite16+0x2d8>)
 80063ba:	2201      	movs	r2, #1
 80063bc:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 6);
 80063be:	1dbb      	adds	r3, r7, #6
 80063c0:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80063c4:	1dbb      	adds	r3, r7, #6
 80063c6:	015b      	lsls	r3, r3, #5
 80063c8:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80063cc:	f023 031f 	bic.w	r3, r3, #31
 80063d0:	4313      	orrs	r3, r2
 80063d2:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80063d6:	3318      	adds	r3, #24
 80063d8:	4a48      	ldr	r2, [pc, #288]	; (80064fc <LcdWrite16+0x2d4>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 80063de:	4b48      	ldr	r3, [pc, #288]	; (8006500 <LcdWrite16+0x2d8>)
 80063e0:	2200      	movs	r2, #0
 80063e2:	601a      	str	r2, [r3, #0]
 80063e4:	4b46      	ldr	r3, [pc, #280]	; (8006500 <LcdWrite16+0x2d8>)
 80063e6:	2201      	movs	r2, #1
 80063e8:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 5);
 80063ea:	1dbb      	adds	r3, r7, #6
 80063ec:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80063f0:	1dbb      	adds	r3, r7, #6
 80063f2:	015b      	lsls	r3, r3, #5
 80063f4:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80063f8:	f023 031f 	bic.w	r3, r3, #31
 80063fc:	4313      	orrs	r3, r2
 80063fe:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8006402:	3314      	adds	r3, #20
 8006404:	4a3d      	ldr	r2, [pc, #244]	; (80064fc <LcdWrite16+0x2d4>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 800640a:	4b3d      	ldr	r3, [pc, #244]	; (8006500 <LcdWrite16+0x2d8>)
 800640c:	2200      	movs	r2, #0
 800640e:	601a      	str	r2, [r3, #0]
 8006410:	4b3b      	ldr	r3, [pc, #236]	; (8006500 <LcdWrite16+0x2d8>)
 8006412:	2201      	movs	r2, #1
 8006414:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 4);
 8006416:	1dbb      	adds	r3, r7, #6
 8006418:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800641c:	1dbb      	adds	r3, r7, #6
 800641e:	015b      	lsls	r3, r3, #5
 8006420:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8006424:	f023 031f 	bic.w	r3, r3, #31
 8006428:	4313      	orrs	r3, r2
 800642a:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800642e:	3310      	adds	r3, #16
 8006430:	4a32      	ldr	r2, [pc, #200]	; (80064fc <LcdWrite16+0x2d4>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8006436:	4b32      	ldr	r3, [pc, #200]	; (8006500 <LcdWrite16+0x2d8>)
 8006438:	2200      	movs	r2, #0
 800643a:	601a      	str	r2, [r3, #0]
 800643c:	4b30      	ldr	r3, [pc, #192]	; (8006500 <LcdWrite16+0x2d8>)
 800643e:	2201      	movs	r2, #1
 8006440:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 3);
 8006442:	1dbb      	adds	r3, r7, #6
 8006444:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8006448:	1dbb      	adds	r3, r7, #6
 800644a:	015b      	lsls	r3, r3, #5
 800644c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8006450:	f023 031f 	bic.w	r3, r3, #31
 8006454:	4313      	orrs	r3, r2
 8006456:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800645a:	330c      	adds	r3, #12
 800645c:	4a27      	ldr	r2, [pc, #156]	; (80064fc <LcdWrite16+0x2d4>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8006462:	4b27      	ldr	r3, [pc, #156]	; (8006500 <LcdWrite16+0x2d8>)
 8006464:	2200      	movs	r2, #0
 8006466:	601a      	str	r2, [r3, #0]
 8006468:	4b25      	ldr	r3, [pc, #148]	; (8006500 <LcdWrite16+0x2d8>)
 800646a:	2201      	movs	r2, #1
 800646c:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 2);
 800646e:	1dbb      	adds	r3, r7, #6
 8006470:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8006474:	1dbb      	adds	r3, r7, #6
 8006476:	015b      	lsls	r3, r3, #5
 8006478:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 800647c:	f023 031f 	bic.w	r3, r3, #31
 8006480:	4313      	orrs	r3, r2
 8006482:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8006486:	3308      	adds	r3, #8
 8006488:	4a1c      	ldr	r2, [pc, #112]	; (80064fc <LcdWrite16+0x2d4>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 800648e:	4b1c      	ldr	r3, [pc, #112]	; (8006500 <LcdWrite16+0x2d8>)
 8006490:	2200      	movs	r2, #0
 8006492:	601a      	str	r2, [r3, #0]
 8006494:	4b1a      	ldr	r3, [pc, #104]	; (8006500 <LcdWrite16+0x2d8>)
 8006496:	2201      	movs	r2, #1
 8006498:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 1);
 800649a:	1dbb      	adds	r3, r7, #6
 800649c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80064a0:	1dbb      	adds	r3, r7, #6
 80064a2:	015b      	lsls	r3, r3, #5
 80064a4:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80064a8:	f023 031f 	bic.w	r3, r3, #31
 80064ac:	4313      	orrs	r3, r2
 80064ae:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80064b2:	3304      	adds	r3, #4
 80064b4:	4a11      	ldr	r2, [pc, #68]	; (80064fc <LcdWrite16+0x2d4>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 80064ba:	4b11      	ldr	r3, [pc, #68]	; (8006500 <LcdWrite16+0x2d8>)
 80064bc:	2200      	movs	r2, #0
 80064be:	601a      	str	r2, [r3, #0]
 80064c0:	4b0f      	ldr	r3, [pc, #60]	; (8006500 <LcdWrite16+0x2d8>)
 80064c2:	2201      	movs	r2, #1
 80064c4:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 0);
 80064c6:	1dbb      	adds	r3, r7, #6
 80064c8:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80064cc:	1dbb      	adds	r3, r7, #6
 80064ce:	015b      	lsls	r3, r3, #5
 80064d0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80064d4:	f023 031f 	bic.w	r3, r3, #31
 80064d8:	4313      	orrs	r3, r2
 80064da:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80064de:	4a07      	ldr	r2, [pc, #28]	; (80064fc <LcdWrite16+0x2d4>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 80064e4:	4b06      	ldr	r3, [pc, #24]	; (8006500 <LcdWrite16+0x2d8>)
 80064e6:	2200      	movs	r2, #0
 80064e8:	601a      	str	r2, [r3, #0]
 80064ea:	4b05      	ldr	r3, [pc, #20]	; (8006500 <LcdWrite16+0x2d8>)
 80064ec:	2201      	movs	r2, #1
 80064ee:	601a      	str	r2, [r3, #0]
}
 80064f0:	bf00      	nop
 80064f2:	370c      	adds	r7, #12
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr
 80064fc:	4241028c 	.word	0x4241028c
 8006500:	42408280 	.word	0x42408280

08006504 <LCD_IO_WriteMultiData8>:
#if DMANUM(LCD_DMA_TX) == 0 || LCD_SPI == 0

/* SPI TX no DMA */

void LCD_IO_WriteMultiData8(uint8_t * pData, uint32_t Size, uint32_t dinc)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b084      	sub	sp, #16
 8006508:	af00      	add	r7, sp, #0
 800650a:	60f8      	str	r0, [r7, #12]
 800650c:	60b9      	str	r1, [r7, #8]
 800650e:	607a      	str	r2, [r7, #4]
  while(Size--)
 8006510:	e00a      	b.n	8006528 <LCD_IO_WriteMultiData8+0x24>
  {
    LcdWrite8(*pData);
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	781b      	ldrb	r3, [r3, #0]
 8006516:	4618      	mov	r0, r3
 8006518:	f7ff fdc8 	bl	80060ac <LcdWrite8>
    if(dinc)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d002      	beq.n	8006528 <LCD_IO_WriteMultiData8+0x24>
      pData++;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	3301      	adds	r3, #1
 8006526:	60fb      	str	r3, [r7, #12]
  while(Size--)
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	1e5a      	subs	r2, r3, #1
 800652c:	60ba      	str	r2, [r7, #8]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d1ef      	bne.n	8006512 <LCD_IO_WriteMultiData8+0xe>
  }
  LCD_CS_OFF;
 8006532:	4b03      	ldr	r3, [pc, #12]	; (8006540 <LCD_IO_WriteMultiData8+0x3c>)
 8006534:	2201      	movs	r2, #1
 8006536:	601a      	str	r2, [r3, #0]
}
 8006538:	bf00      	nop
 800653a:	3710      	adds	r7, #16
 800653c:	46bd      	mov	sp, r7
 800653e:	bd80      	pop	{r7, pc}
 8006540:	42410284 	.word	0x42410284

08006544 <LCD_IO_WriteMultiData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteMultiData16(uint16_t * pData, uint32_t Size, uint32_t dinc)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b084      	sub	sp, #16
 8006548:	af00      	add	r7, sp, #0
 800654a:	60f8      	str	r0, [r7, #12]
 800654c:	60b9      	str	r1, [r7, #8]
 800654e:	607a      	str	r2, [r7, #4]
  while(Size--)
 8006550:	e00a      	b.n	8006568 <LCD_IO_WriteMultiData16+0x24>
  {
    LcdWrite16(*pData);
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	881b      	ldrh	r3, [r3, #0]
 8006556:	4618      	mov	r0, r3
 8006558:	f7ff fe66 	bl	8006228 <LcdWrite16>
    if(dinc)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d002      	beq.n	8006568 <LCD_IO_WriteMultiData16+0x24>
      pData++;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	3302      	adds	r3, #2
 8006566:	60fb      	str	r3, [r7, #12]
  while(Size--)
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	1e5a      	subs	r2, r3, #1
 800656c:	60ba      	str	r2, [r7, #8]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d1ef      	bne.n	8006552 <LCD_IO_WriteMultiData16+0xe>
  }
  LCD_CS_OFF;
 8006572:	4b03      	ldr	r3, [pc, #12]	; (8006580 <LCD_IO_WriteMultiData16+0x3c>)
 8006574:	2201      	movs	r2, #1
 8006576:	601a      	str	r2, [r3, #0]
}
 8006578:	bf00      	nop
 800657a:	3710      	adds	r7, #16
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}
 8006580:	42410284 	.word	0x42410284

08006584 <LCD_Delay>:

//=============================================================================
/* Public functions */

void LCD_Delay(uint32_t Delay)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b082      	sub	sp, #8
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f000 f9d9 	bl	8006944 <HAL_Delay>
}
 8006592:	bf00      	nop
 8006594:	3708      	adds	r7, #8
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}

0800659a <LCD_IO_Bl_OnOff>:

//-----------------------------------------------------------------------------
void LCD_IO_Bl_OnOff(uint8_t Bl)
{
 800659a:	b480      	push	{r7}
 800659c:	b083      	sub	sp, #12
 800659e:	af00      	add	r7, sp, #0
 80065a0:	4603      	mov	r3, r0
 80065a2:	71fb      	strb	r3, [r7, #7]
  if(Bl)
    GPIOX_ODR(LCD_BL) = LCD_BLON;
  else
    GPIOX_ODR(LCD_BL) = 1 - LCD_BLON;
  #endif
}
 80065a4:	bf00      	nop
 80065a6:	370c      	adds	r7, #12
 80065a8:	46bd      	mov	sp, r7
 80065aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ae:	4770      	bx	lr

080065b0 <LCD_IO_Init>:

//-----------------------------------------------------------------------------
void LCD_IO_Init(void)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	af00      	add	r7, sp, #0
  #define DMA1_CLOCK_RX         0
  #endif
  #endif  // #else LCD_SPI == 0

  /* GPIO, DMA Clocks */
  RCC->AHB1ENR |= GPIOX_CLOCK(LCD_RS) | GPIOX_CLOCK(LCD_CS) | GPIOX_CLOCK(LCD_SCK) | GPIOX_CLOCK(LCD_MOSI) |
 80065b4:	4b34      	ldr	r3, [pc, #208]	; (8006688 <LCD_IO_Init+0xd8>)
 80065b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065b8:	4a33      	ldr	r2, [pc, #204]	; (8006688 <LCD_IO_Init+0xd8>)
 80065ba:	f043 0307 	orr.w	r3, r3, #7
 80065be:	6313      	str	r3, [r2, #48]	; 0x30
  LCD_IO_Bl_OnOff(1);
  #endif

  /* Reset pin = output, reset off */
  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A
  GPIOX_MODER(MODE_OUT, LCD_RST);
 80065c0:	4b32      	ldr	r3, [pc, #200]	; (800668c <LCD_IO_Init+0xdc>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065c8:	4a30      	ldr	r2, [pc, #192]	; (800668c <LCD_IO_Init+0xdc>)
 80065ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065ce:	6013      	str	r3, [r2, #0]
  GPIOX_OSPEEDR(MODE_SPD_LOW, LCD_RST);
 80065d0:	4b2e      	ldr	r3, [pc, #184]	; (800668c <LCD_IO_Init+0xdc>)
 80065d2:	689b      	ldr	r3, [r3, #8]
 80065d4:	4a2d      	ldr	r2, [pc, #180]	; (800668c <LCD_IO_Init+0xdc>)
 80065d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065da:	6093      	str	r3, [r2, #8]
  LCD_RST_OFF;
 80065dc:	4b2c      	ldr	r3, [pc, #176]	; (8006690 <LCD_IO_Init+0xe0>)
 80065de:	2201      	movs	r2, #1
 80065e0:	601a      	str	r2, [r3, #0]
  #endif

  LCD_RS_DATA;
 80065e2:	4b2c      	ldr	r3, [pc, #176]	; (8006694 <LCD_IO_Init+0xe4>)
 80065e4:	2201      	movs	r2, #1
 80065e6:	601a      	str	r2, [r3, #0]
  LCD_CS_OFF;
 80065e8:	4b2b      	ldr	r3, [pc, #172]	; (8006698 <LCD_IO_Init+0xe8>)
 80065ea:	2201      	movs	r2, #1
 80065ec:	601a      	str	r2, [r3, #0]
  GPIOX_MODER(MODE_OUT, LCD_RS);
 80065ee:	4b2b      	ldr	r3, [pc, #172]	; (800669c <LCD_IO_Init+0xec>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f023 0303 	bic.w	r3, r3, #3
 80065f6:	4a29      	ldr	r2, [pc, #164]	; (800669c <LCD_IO_Init+0xec>)
 80065f8:	f043 0301 	orr.w	r3, r3, #1
 80065fc:	6013      	str	r3, [r2, #0]
  GPIOX_MODER(MODE_OUT, LCD_CS);
 80065fe:	4b27      	ldr	r3, [pc, #156]	; (800669c <LCD_IO_Init+0xec>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f023 030c 	bic.w	r3, r3, #12
 8006606:	4a25      	ldr	r2, [pc, #148]	; (800669c <LCD_IO_Init+0xec>)
 8006608:	f043 0304 	orr.w	r3, r3, #4
 800660c:	6013      	str	r3, [r2, #0]

  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_RS);
 800660e:	4b23      	ldr	r3, [pc, #140]	; (800669c <LCD_IO_Init+0xec>)
 8006610:	689b      	ldr	r3, [r3, #8]
 8006612:	4a22      	ldr	r2, [pc, #136]	; (800669c <LCD_IO_Init+0xec>)
 8006614:	f043 0303 	orr.w	r3, r3, #3
 8006618:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_CS);
 800661a:	4b20      	ldr	r3, [pc, #128]	; (800669c <LCD_IO_Init+0xec>)
 800661c:	689b      	ldr	r3, [r3, #8]
 800661e:	4a1f      	ldr	r2, [pc, #124]	; (800669c <LCD_IO_Init+0xec>)
 8006620:	f043 030c 	orr.w	r3, r3, #12
 8006624:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_SCK);
 8006626:	4b1e      	ldr	r3, [pc, #120]	; (80066a0 <LCD_IO_Init+0xf0>)
 8006628:	689b      	ldr	r3, [r3, #8]
 800662a:	4a1d      	ldr	r2, [pc, #116]	; (80066a0 <LCD_IO_Init+0xf0>)
 800662c:	f043 0303 	orr.w	r3, r3, #3
 8006630:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_MOSI);
 8006632:	4b1a      	ldr	r3, [pc, #104]	; (800669c <LCD_IO_Init+0xec>)
 8006634:	689b      	ldr	r3, [r3, #8]
 8006636:	4a19      	ldr	r2, [pc, #100]	; (800669c <LCD_IO_Init+0xec>)
 8006638:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800663c:	6093      	str	r3, [r2, #8]
  GPIOX_ODR(LCD_SCK) = 1;               // SCK = 1
 800663e:	4b19      	ldr	r3, [pc, #100]	; (80066a4 <LCD_IO_Init+0xf4>)
 8006640:	2201      	movs	r2, #1
 8006642:	601a      	str	r2, [r3, #0]

  #if LCD_SPI == 0
  /* Software SPI */
  GPIOX_MODER(MODE_OUT, LCD_SCK);
 8006644:	4b16      	ldr	r3, [pc, #88]	; (80066a0 <LCD_IO_Init+0xf0>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f023 0303 	bic.w	r3, r3, #3
 800664c:	4a14      	ldr	r2, [pc, #80]	; (80066a0 <LCD_IO_Init+0xf0>)
 800664e:	f043 0301 	orr.w	r3, r3, #1
 8006652:	6013      	str	r3, [r2, #0]
  GPIOX_MODER(MODE_OUT, LCD_MOSI);
 8006654:	4b11      	ldr	r3, [pc, #68]	; (800669c <LCD_IO_Init+0xec>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800665c:	4a0f      	ldr	r2, [pc, #60]	; (800669c <LCD_IO_Init+0xec>)
 800665e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006662:	6013      	str	r3, [r2, #0]

  #endif // #else LCD_SPI == 0

  /* Set or Reset the control line */
  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A // reset
  LCD_Delay(10);
 8006664:	200a      	movs	r0, #10
 8006666:	f7ff ff8d 	bl	8006584 <LCD_Delay>
  LCD_RST_ON;
 800666a:	4b09      	ldr	r3, [pc, #36]	; (8006690 <LCD_IO_Init+0xe0>)
 800666c:	2200      	movs	r2, #0
 800666e:	601a      	str	r2, [r3, #0]
  LCD_Delay(10);
 8006670:	200a      	movs	r0, #10
 8006672:	f7ff ff87 	bl	8006584 <LCD_Delay>
  LCD_RST_OFF;
 8006676:	4b06      	ldr	r3, [pc, #24]	; (8006690 <LCD_IO_Init+0xe0>)
 8006678:	2201      	movs	r2, #1
 800667a:	601a      	str	r2, [r3, #0]
  #endif
  LCD_Delay(10);
 800667c:	200a      	movs	r0, #10
 800667e:	f7ff ff81 	bl	8006584 <LCD_Delay>
  osSemaphoreDef(spiDmaBinSem);
  spiDmaBinSemHandle = osSemaphoreCreate(osSemaphore(spiDmaBinSem), 1);
  osSemaphoreWait(spiDmaBinSemHandle, 1);
  #endif
  #endif  // #if DMANUM(LCD_DMA_RX) > 0
} // void LCD_IO_Init(void)
 8006682:	bf00      	nop
 8006684:	bd80      	pop	{r7, pc}
 8006686:	bf00      	nop
 8006688:	40023800 	.word	0x40023800
 800668c:	40020000 	.word	0x40020000
 8006690:	42400290 	.word	0x42400290
 8006694:	42410280 	.word	0x42410280
 8006698:	42410284 	.word	0x42410284
 800669c:	40020800 	.word	0x40020800
 80066a0:	40020400 	.word	0x40020400
 80066a4:	42408280 	.word	0x42408280

080066a8 <LCD_IO_WriteCmd8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8(uint8_t Cmd)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b082      	sub	sp, #8
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	4603      	mov	r3, r0
 80066b0:	71fb      	strb	r3, [r7, #7]
  WaitForDmaEnd();
  LcdSpiMode8();
  LCD_CS_ON;
 80066b2:	4b0a      	ldr	r3, [pc, #40]	; (80066dc <LCD_IO_WriteCmd8+0x34>)
 80066b4:	2200      	movs	r2, #0
 80066b6:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 80066b8:	4b09      	ldr	r3, [pc, #36]	; (80066e0 <LCD_IO_WriteCmd8+0x38>)
 80066ba:	2200      	movs	r2, #0
 80066bc:	601a      	str	r2, [r3, #0]
 80066be:	79fb      	ldrb	r3, [r7, #7]
 80066c0:	4618      	mov	r0, r3
 80066c2:	f7ff fcf3 	bl	80060ac <LcdWrite8>
 80066c6:	4b06      	ldr	r3, [pc, #24]	; (80066e0 <LCD_IO_WriteCmd8+0x38>)
 80066c8:	2201      	movs	r2, #1
 80066ca:	601a      	str	r2, [r3, #0]
  LCD_CS_OFF;
 80066cc:	4b03      	ldr	r3, [pc, #12]	; (80066dc <LCD_IO_WriteCmd8+0x34>)
 80066ce:	2201      	movs	r2, #1
 80066d0:	601a      	str	r2, [r3, #0]
}
 80066d2:	bf00      	nop
 80066d4:	3708      	adds	r7, #8
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}
 80066da:	bf00      	nop
 80066dc:	42410284 	.word	0x42410284
 80066e0:	42410280 	.word	0x42410280

080066e4 <LCD_IO_WriteData8>:
  LCD_CS_OFF;
}

//-----------------------------------------------------------------------------
void LCD_IO_WriteData8(uint8_t Data)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b082      	sub	sp, #8
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	4603      	mov	r3, r0
 80066ec:	71fb      	strb	r3, [r7, #7]
  WaitForDmaEnd();
  LcdSpiMode8();
  LCD_CS_ON;
 80066ee:	4b07      	ldr	r3, [pc, #28]	; (800670c <LCD_IO_WriteData8+0x28>)
 80066f0:	2200      	movs	r2, #0
 80066f2:	601a      	str	r2, [r3, #0]
  LcdWrite8(Data);
 80066f4:	79fb      	ldrb	r3, [r7, #7]
 80066f6:	4618      	mov	r0, r3
 80066f8:	f7ff fcd8 	bl	80060ac <LcdWrite8>
  LCD_CS_OFF;
 80066fc:	4b03      	ldr	r3, [pc, #12]	; (800670c <LCD_IO_WriteData8+0x28>)
 80066fe:	2201      	movs	r2, #1
 8006700:	601a      	str	r2, [r3, #0]
}
 8006702:	bf00      	nop
 8006704:	3708      	adds	r7, #8
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}
 800670a:	bf00      	nop
 800670c:	42410284 	.word	0x42410284

08006710 <LCD_IO_WriteData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteData16(uint16_t Data)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b082      	sub	sp, #8
 8006714:	af00      	add	r7, sp, #0
 8006716:	4603      	mov	r3, r0
 8006718:	80fb      	strh	r3, [r7, #6]
  WaitForDmaEnd();
  LcdSpiMode16();
  LCD_CS_ON;
 800671a:	4b07      	ldr	r3, [pc, #28]	; (8006738 <LCD_IO_WriteData16+0x28>)
 800671c:	2200      	movs	r2, #0
 800671e:	601a      	str	r2, [r3, #0]
  LcdWrite16(Data);
 8006720:	88fb      	ldrh	r3, [r7, #6]
 8006722:	4618      	mov	r0, r3
 8006724:	f7ff fd80 	bl	8006228 <LcdWrite16>
  LCD_CS_OFF;
 8006728:	4b03      	ldr	r3, [pc, #12]	; (8006738 <LCD_IO_WriteData16+0x28>)
 800672a:	2201      	movs	r2, #1
 800672c:	601a      	str	r2, [r3, #0]
}
 800672e:	bf00      	nop
 8006730:	3708      	adds	r7, #8
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}
 8006736:	bf00      	nop
 8006738:	42410284 	.word	0x42410284

0800673c <LCD_IO_WriteCmd8DataFill16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8DataFill16(uint8_t Cmd, uint16_t Data, uint32_t Size)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b082      	sub	sp, #8
 8006740:	af00      	add	r7, sp, #0
 8006742:	4603      	mov	r3, r0
 8006744:	603a      	str	r2, [r7, #0]
 8006746:	71fb      	strb	r3, [r7, #7]
 8006748:	460b      	mov	r3, r1
 800674a:	80bb      	strh	r3, [r7, #4]
  WaitForDmaEnd();
  LcdSpiMode8();
  LCD_CS_ON;
 800674c:	4b0b      	ldr	r3, [pc, #44]	; (800677c <LCD_IO_WriteCmd8DataFill16+0x40>)
 800674e:	2200      	movs	r2, #0
 8006750:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 8006752:	4b0b      	ldr	r3, [pc, #44]	; (8006780 <LCD_IO_WriteCmd8DataFill16+0x44>)
 8006754:	2200      	movs	r2, #0
 8006756:	601a      	str	r2, [r3, #0]
 8006758:	79fb      	ldrb	r3, [r7, #7]
 800675a:	4618      	mov	r0, r3
 800675c:	f7ff fca6 	bl	80060ac <LcdWrite8>
 8006760:	4b07      	ldr	r3, [pc, #28]	; (8006780 <LCD_IO_WriteCmd8DataFill16+0x44>)
 8006762:	2201      	movs	r2, #1
 8006764:	601a      	str	r2, [r3, #0]
  LcdSpiMode16();
  LCD_IO_WriteMultiData16(&Data, Size, 0);
 8006766:	1d3b      	adds	r3, r7, #4
 8006768:	2200      	movs	r2, #0
 800676a:	6839      	ldr	r1, [r7, #0]
 800676c:	4618      	mov	r0, r3
 800676e:	f7ff fee9 	bl	8006544 <LCD_IO_WriteMultiData16>
}
 8006772:	bf00      	nop
 8006774:	3708      	adds	r7, #8
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}
 800677a:	bf00      	nop
 800677c:	42410284 	.word	0x42410284
 8006780:	42410280 	.word	0x42410280

08006784 <LCD_IO_WriteCmd8MultipleData8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8MultipleData8(uint8_t Cmd, uint8_t *pData, uint32_t Size)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b084      	sub	sp, #16
 8006788:	af00      	add	r7, sp, #0
 800678a:	4603      	mov	r3, r0
 800678c:	60b9      	str	r1, [r7, #8]
 800678e:	607a      	str	r2, [r7, #4]
 8006790:	73fb      	strb	r3, [r7, #15]
  WaitForDmaEnd();
  LcdSpiMode8();
  LCD_CS_ON;
 8006792:	4b0b      	ldr	r3, [pc, #44]	; (80067c0 <LCD_IO_WriteCmd8MultipleData8+0x3c>)
 8006794:	2200      	movs	r2, #0
 8006796:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 8006798:	4b0a      	ldr	r3, [pc, #40]	; (80067c4 <LCD_IO_WriteCmd8MultipleData8+0x40>)
 800679a:	2200      	movs	r2, #0
 800679c:	601a      	str	r2, [r3, #0]
 800679e:	7bfb      	ldrb	r3, [r7, #15]
 80067a0:	4618      	mov	r0, r3
 80067a2:	f7ff fc83 	bl	80060ac <LcdWrite8>
 80067a6:	4b07      	ldr	r3, [pc, #28]	; (80067c4 <LCD_IO_WriteCmd8MultipleData8+0x40>)
 80067a8:	2201      	movs	r2, #1
 80067aa:	601a      	str	r2, [r3, #0]
  LCD_IO_WriteMultiData8(pData, Size, 1);
 80067ac:	2201      	movs	r2, #1
 80067ae:	6879      	ldr	r1, [r7, #4]
 80067b0:	68b8      	ldr	r0, [r7, #8]
 80067b2:	f7ff fea7 	bl	8006504 <LCD_IO_WriteMultiData8>
}
 80067b6:	bf00      	nop
 80067b8:	3710      	adds	r7, #16
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}
 80067be:	bf00      	nop
 80067c0:	42410284 	.word	0x42410284
 80067c4:	42410280 	.word	0x42410280

080067c8 <LCD_IO_WriteCmd8MultipleData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8MultipleData16(uint8_t Cmd, uint16_t *pData, uint32_t Size)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b084      	sub	sp, #16
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	4603      	mov	r3, r0
 80067d0:	60b9      	str	r1, [r7, #8]
 80067d2:	607a      	str	r2, [r7, #4]
 80067d4:	73fb      	strb	r3, [r7, #15]
  WaitForDmaEnd();
  LcdSpiMode8();
  LCD_CS_ON;
 80067d6:	4b0b      	ldr	r3, [pc, #44]	; (8006804 <LCD_IO_WriteCmd8MultipleData16+0x3c>)
 80067d8:	2200      	movs	r2, #0
 80067da:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 80067dc:	4b0a      	ldr	r3, [pc, #40]	; (8006808 <LCD_IO_WriteCmd8MultipleData16+0x40>)
 80067de:	2200      	movs	r2, #0
 80067e0:	601a      	str	r2, [r3, #0]
 80067e2:	7bfb      	ldrb	r3, [r7, #15]
 80067e4:	4618      	mov	r0, r3
 80067e6:	f7ff fc61 	bl	80060ac <LcdWrite8>
 80067ea:	4b07      	ldr	r3, [pc, #28]	; (8006808 <LCD_IO_WriteCmd8MultipleData16+0x40>)
 80067ec:	2201      	movs	r2, #1
 80067ee:	601a      	str	r2, [r3, #0]
  LcdSpiMode16();
  LCD_IO_WriteMultiData16(pData, Size, 1);
 80067f0:	2201      	movs	r2, #1
 80067f2:	6879      	ldr	r1, [r7, #4]
 80067f4:	68b8      	ldr	r0, [r7, #8]
 80067f6:	f7ff fea5 	bl	8006544 <LCD_IO_WriteMultiData16>
}
 80067fa:	bf00      	nop
 80067fc:	3710      	adds	r7, #16
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}
 8006802:	bf00      	nop
 8006804:	42410284 	.word	0x42410284
 8006808:	42410280 	.word	0x42410280

0800680c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800680c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006844 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006810:	480d      	ldr	r0, [pc, #52]	; (8006848 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8006812:	490e      	ldr	r1, [pc, #56]	; (800684c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006814:	4a0e      	ldr	r2, [pc, #56]	; (8006850 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006816:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006818:	e002      	b.n	8006820 <LoopCopyDataInit>

0800681a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800681a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800681c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800681e:	3304      	adds	r3, #4

08006820 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006820:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006822:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006824:	d3f9      	bcc.n	800681a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006826:	4a0b      	ldr	r2, [pc, #44]	; (8006854 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006828:	4c0b      	ldr	r4, [pc, #44]	; (8006858 <LoopFillZerobss+0x26>)
  movs r3, #0
 800682a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800682c:	e001      	b.n	8006832 <LoopFillZerobss>

0800682e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800682e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006830:	3204      	adds	r2, #4

08006832 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006832:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006834:	d3fb      	bcc.n	800682e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8006836:	f7fe ff9b 	bl	8005770 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800683a:	f006 faf1 	bl	800ce20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800683e:	f7fb f925 	bl	8001a8c <main>
  bx  lr    
 8006842:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8006844:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006848:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800684c:	20000420 	.word	0x20000420
  ldr r2, =_sidata
 8006850:	0803d614 	.word	0x0803d614
  ldr r2, =_sbss
 8006854:	20000420 	.word	0x20000420
  ldr r4, =_ebss
 8006858:	200008d8 	.word	0x200008d8

0800685c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800685c:	e7fe      	b.n	800685c <ADC_IRQHandler>
	...

08006860 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006864:	4b0e      	ldr	r3, [pc, #56]	; (80068a0 <HAL_Init+0x40>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a0d      	ldr	r2, [pc, #52]	; (80068a0 <HAL_Init+0x40>)
 800686a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800686e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006870:	4b0b      	ldr	r3, [pc, #44]	; (80068a0 <HAL_Init+0x40>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a0a      	ldr	r2, [pc, #40]	; (80068a0 <HAL_Init+0x40>)
 8006876:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800687a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800687c:	4b08      	ldr	r3, [pc, #32]	; (80068a0 <HAL_Init+0x40>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a07      	ldr	r2, [pc, #28]	; (80068a0 <HAL_Init+0x40>)
 8006882:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006886:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006888:	2003      	movs	r0, #3
 800688a:	f000 f94f 	bl	8006b2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800688e:	2000      	movs	r0, #0
 8006890:	f000 f808 	bl	80068a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006894:	f7fe fbf2 	bl	800507c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006898:	2300      	movs	r3, #0
}
 800689a:	4618      	mov	r0, r3
 800689c:	bd80      	pop	{r7, pc}
 800689e:	bf00      	nop
 80068a0:	40023c00 	.word	0x40023c00

080068a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b082      	sub	sp, #8
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80068ac:	4b12      	ldr	r3, [pc, #72]	; (80068f8 <HAL_InitTick+0x54>)
 80068ae:	681a      	ldr	r2, [r3, #0]
 80068b0:	4b12      	ldr	r3, [pc, #72]	; (80068fc <HAL_InitTick+0x58>)
 80068b2:	781b      	ldrb	r3, [r3, #0]
 80068b4:	4619      	mov	r1, r3
 80068b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80068ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80068be:	fbb2 f3f3 	udiv	r3, r2, r3
 80068c2:	4618      	mov	r0, r3
 80068c4:	f000 f967 	bl	8006b96 <HAL_SYSTICK_Config>
 80068c8:	4603      	mov	r3, r0
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d001      	beq.n	80068d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80068ce:	2301      	movs	r3, #1
 80068d0:	e00e      	b.n	80068f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2b0f      	cmp	r3, #15
 80068d6:	d80a      	bhi.n	80068ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80068d8:	2200      	movs	r2, #0
 80068da:	6879      	ldr	r1, [r7, #4]
 80068dc:	f04f 30ff 	mov.w	r0, #4294967295
 80068e0:	f000 f92f 	bl	8006b42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80068e4:	4a06      	ldr	r2, [pc, #24]	; (8006900 <HAL_InitTick+0x5c>)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80068ea:	2300      	movs	r3, #0
 80068ec:	e000      	b.n	80068f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80068ee:	2301      	movs	r3, #1
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	3708      	adds	r7, #8
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}
 80068f8:	20000224 	.word	0x20000224
 80068fc:	2000024c 	.word	0x2000024c
 8006900:	20000248 	.word	0x20000248

08006904 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006904:	b480      	push	{r7}
 8006906:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006908:	4b06      	ldr	r3, [pc, #24]	; (8006924 <HAL_IncTick+0x20>)
 800690a:	781b      	ldrb	r3, [r3, #0]
 800690c:	461a      	mov	r2, r3
 800690e:	4b06      	ldr	r3, [pc, #24]	; (8006928 <HAL_IncTick+0x24>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4413      	add	r3, r2
 8006914:	4a04      	ldr	r2, [pc, #16]	; (8006928 <HAL_IncTick+0x24>)
 8006916:	6013      	str	r3, [r2, #0]
}
 8006918:	bf00      	nop
 800691a:	46bd      	mov	sp, r7
 800691c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006920:	4770      	bx	lr
 8006922:	bf00      	nop
 8006924:	2000024c 	.word	0x2000024c
 8006928:	200008c4 	.word	0x200008c4

0800692c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800692c:	b480      	push	{r7}
 800692e:	af00      	add	r7, sp, #0
  return uwTick;
 8006930:	4b03      	ldr	r3, [pc, #12]	; (8006940 <HAL_GetTick+0x14>)
 8006932:	681b      	ldr	r3, [r3, #0]
}
 8006934:	4618      	mov	r0, r3
 8006936:	46bd      	mov	sp, r7
 8006938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693c:	4770      	bx	lr
 800693e:	bf00      	nop
 8006940:	200008c4 	.word	0x200008c4

08006944 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b084      	sub	sp, #16
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800694c:	f7ff ffee 	bl	800692c <HAL_GetTick>
 8006950:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800695c:	d005      	beq.n	800696a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800695e:	4b0a      	ldr	r3, [pc, #40]	; (8006988 <HAL_Delay+0x44>)
 8006960:	781b      	ldrb	r3, [r3, #0]
 8006962:	461a      	mov	r2, r3
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	4413      	add	r3, r2
 8006968:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800696a:	bf00      	nop
 800696c:	f7ff ffde 	bl	800692c <HAL_GetTick>
 8006970:	4602      	mov	r2, r0
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	1ad3      	subs	r3, r2, r3
 8006976:	68fa      	ldr	r2, [r7, #12]
 8006978:	429a      	cmp	r2, r3
 800697a:	d8f7      	bhi.n	800696c <HAL_Delay+0x28>
  {
  }
}
 800697c:	bf00      	nop
 800697e:	bf00      	nop
 8006980:	3710      	adds	r7, #16
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}
 8006986:	bf00      	nop
 8006988:	2000024c 	.word	0x2000024c

0800698c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800698c:	b480      	push	{r7}
 800698e:	b085      	sub	sp, #20
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f003 0307 	and.w	r3, r3, #7
 800699a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800699c:	4b0c      	ldr	r3, [pc, #48]	; (80069d0 <__NVIC_SetPriorityGrouping+0x44>)
 800699e:	68db      	ldr	r3, [r3, #12]
 80069a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80069a2:	68ba      	ldr	r2, [r7, #8]
 80069a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80069a8:	4013      	ands	r3, r2
 80069aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80069b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80069b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80069bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80069be:	4a04      	ldr	r2, [pc, #16]	; (80069d0 <__NVIC_SetPriorityGrouping+0x44>)
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	60d3      	str	r3, [r2, #12]
}
 80069c4:	bf00      	nop
 80069c6:	3714      	adds	r7, #20
 80069c8:	46bd      	mov	sp, r7
 80069ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ce:	4770      	bx	lr
 80069d0:	e000ed00 	.word	0xe000ed00

080069d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80069d4:	b480      	push	{r7}
 80069d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80069d8:	4b04      	ldr	r3, [pc, #16]	; (80069ec <__NVIC_GetPriorityGrouping+0x18>)
 80069da:	68db      	ldr	r3, [r3, #12]
 80069dc:	0a1b      	lsrs	r3, r3, #8
 80069de:	f003 0307 	and.w	r3, r3, #7
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	46bd      	mov	sp, r7
 80069e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ea:	4770      	bx	lr
 80069ec:	e000ed00 	.word	0xe000ed00

080069f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b083      	sub	sp, #12
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	4603      	mov	r3, r0
 80069f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80069fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	db0b      	blt.n	8006a1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006a02:	79fb      	ldrb	r3, [r7, #7]
 8006a04:	f003 021f 	and.w	r2, r3, #31
 8006a08:	4907      	ldr	r1, [pc, #28]	; (8006a28 <__NVIC_EnableIRQ+0x38>)
 8006a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a0e:	095b      	lsrs	r3, r3, #5
 8006a10:	2001      	movs	r0, #1
 8006a12:	fa00 f202 	lsl.w	r2, r0, r2
 8006a16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006a1a:	bf00      	nop
 8006a1c:	370c      	adds	r7, #12
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a24:	4770      	bx	lr
 8006a26:	bf00      	nop
 8006a28:	e000e100 	.word	0xe000e100

08006a2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b083      	sub	sp, #12
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	4603      	mov	r3, r0
 8006a34:	6039      	str	r1, [r7, #0]
 8006a36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006a38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	db0a      	blt.n	8006a56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	b2da      	uxtb	r2, r3
 8006a44:	490c      	ldr	r1, [pc, #48]	; (8006a78 <__NVIC_SetPriority+0x4c>)
 8006a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a4a:	0112      	lsls	r2, r2, #4
 8006a4c:	b2d2      	uxtb	r2, r2
 8006a4e:	440b      	add	r3, r1
 8006a50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006a54:	e00a      	b.n	8006a6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	b2da      	uxtb	r2, r3
 8006a5a:	4908      	ldr	r1, [pc, #32]	; (8006a7c <__NVIC_SetPriority+0x50>)
 8006a5c:	79fb      	ldrb	r3, [r7, #7]
 8006a5e:	f003 030f 	and.w	r3, r3, #15
 8006a62:	3b04      	subs	r3, #4
 8006a64:	0112      	lsls	r2, r2, #4
 8006a66:	b2d2      	uxtb	r2, r2
 8006a68:	440b      	add	r3, r1
 8006a6a:	761a      	strb	r2, [r3, #24]
}
 8006a6c:	bf00      	nop
 8006a6e:	370c      	adds	r7, #12
 8006a70:	46bd      	mov	sp, r7
 8006a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a76:	4770      	bx	lr
 8006a78:	e000e100 	.word	0xe000e100
 8006a7c:	e000ed00 	.word	0xe000ed00

08006a80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006a80:	b480      	push	{r7}
 8006a82:	b089      	sub	sp, #36	; 0x24
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	60f8      	str	r0, [r7, #12]
 8006a88:	60b9      	str	r1, [r7, #8]
 8006a8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	f003 0307 	and.w	r3, r3, #7
 8006a92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006a94:	69fb      	ldr	r3, [r7, #28]
 8006a96:	f1c3 0307 	rsb	r3, r3, #7
 8006a9a:	2b04      	cmp	r3, #4
 8006a9c:	bf28      	it	cs
 8006a9e:	2304      	movcs	r3, #4
 8006aa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006aa2:	69fb      	ldr	r3, [r7, #28]
 8006aa4:	3304      	adds	r3, #4
 8006aa6:	2b06      	cmp	r3, #6
 8006aa8:	d902      	bls.n	8006ab0 <NVIC_EncodePriority+0x30>
 8006aaa:	69fb      	ldr	r3, [r7, #28]
 8006aac:	3b03      	subs	r3, #3
 8006aae:	e000      	b.n	8006ab2 <NVIC_EncodePriority+0x32>
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006ab4:	f04f 32ff 	mov.w	r2, #4294967295
 8006ab8:	69bb      	ldr	r3, [r7, #24]
 8006aba:	fa02 f303 	lsl.w	r3, r2, r3
 8006abe:	43da      	mvns	r2, r3
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	401a      	ands	r2, r3
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006ac8:	f04f 31ff 	mov.w	r1, #4294967295
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	fa01 f303 	lsl.w	r3, r1, r3
 8006ad2:	43d9      	mvns	r1, r3
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006ad8:	4313      	orrs	r3, r2
         );
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	3724      	adds	r7, #36	; 0x24
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae4:	4770      	bx	lr
	...

08006ae8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b082      	sub	sp, #8
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	3b01      	subs	r3, #1
 8006af4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006af8:	d301      	bcc.n	8006afe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006afa:	2301      	movs	r3, #1
 8006afc:	e00f      	b.n	8006b1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006afe:	4a0a      	ldr	r2, [pc, #40]	; (8006b28 <SysTick_Config+0x40>)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	3b01      	subs	r3, #1
 8006b04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006b06:	210f      	movs	r1, #15
 8006b08:	f04f 30ff 	mov.w	r0, #4294967295
 8006b0c:	f7ff ff8e 	bl	8006a2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006b10:	4b05      	ldr	r3, [pc, #20]	; (8006b28 <SysTick_Config+0x40>)
 8006b12:	2200      	movs	r2, #0
 8006b14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006b16:	4b04      	ldr	r3, [pc, #16]	; (8006b28 <SysTick_Config+0x40>)
 8006b18:	2207      	movs	r2, #7
 8006b1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006b1c:	2300      	movs	r3, #0
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	3708      	adds	r7, #8
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}
 8006b26:	bf00      	nop
 8006b28:	e000e010 	.word	0xe000e010

08006b2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b082      	sub	sp, #8
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f7ff ff29 	bl	800698c <__NVIC_SetPriorityGrouping>
}
 8006b3a:	bf00      	nop
 8006b3c:	3708      	adds	r7, #8
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}

08006b42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006b42:	b580      	push	{r7, lr}
 8006b44:	b086      	sub	sp, #24
 8006b46:	af00      	add	r7, sp, #0
 8006b48:	4603      	mov	r3, r0
 8006b4a:	60b9      	str	r1, [r7, #8]
 8006b4c:	607a      	str	r2, [r7, #4]
 8006b4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006b50:	2300      	movs	r3, #0
 8006b52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006b54:	f7ff ff3e 	bl	80069d4 <__NVIC_GetPriorityGrouping>
 8006b58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006b5a:	687a      	ldr	r2, [r7, #4]
 8006b5c:	68b9      	ldr	r1, [r7, #8]
 8006b5e:	6978      	ldr	r0, [r7, #20]
 8006b60:	f7ff ff8e 	bl	8006a80 <NVIC_EncodePriority>
 8006b64:	4602      	mov	r2, r0
 8006b66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b6a:	4611      	mov	r1, r2
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	f7ff ff5d 	bl	8006a2c <__NVIC_SetPriority>
}
 8006b72:	bf00      	nop
 8006b74:	3718      	adds	r7, #24
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}

08006b7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006b7a:	b580      	push	{r7, lr}
 8006b7c:	b082      	sub	sp, #8
 8006b7e:	af00      	add	r7, sp, #0
 8006b80:	4603      	mov	r3, r0
 8006b82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006b84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f7ff ff31 	bl	80069f0 <__NVIC_EnableIRQ>
}
 8006b8e:	bf00      	nop
 8006b90:	3708      	adds	r7, #8
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}

08006b96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006b96:	b580      	push	{r7, lr}
 8006b98:	b082      	sub	sp, #8
 8006b9a:	af00      	add	r7, sp, #0
 8006b9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f7ff ffa2 	bl	8006ae8 <SysTick_Config>
 8006ba4:	4603      	mov	r3, r0
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	3708      	adds	r7, #8
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}
	...

08006bb0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b086      	sub	sp, #24
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006bbc:	f7ff feb6 	bl	800692c <HAL_GetTick>
 8006bc0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d101      	bne.n	8006bcc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006bc8:	2301      	movs	r3, #1
 8006bca:	e099      	b.n	8006d00 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2202      	movs	r2, #2
 8006bd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	681a      	ldr	r2, [r3, #0]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f022 0201 	bic.w	r2, r2, #1
 8006bea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006bec:	e00f      	b.n	8006c0e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006bee:	f7ff fe9d 	bl	800692c <HAL_GetTick>
 8006bf2:	4602      	mov	r2, r0
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	1ad3      	subs	r3, r2, r3
 8006bf8:	2b05      	cmp	r3, #5
 8006bfa:	d908      	bls.n	8006c0e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2220      	movs	r2, #32
 8006c00:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2203      	movs	r2, #3
 8006c06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006c0a:	2303      	movs	r3, #3
 8006c0c:	e078      	b.n	8006d00 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f003 0301 	and.w	r3, r3, #1
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d1e8      	bne.n	8006bee <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006c24:	697a      	ldr	r2, [r7, #20]
 8006c26:	4b38      	ldr	r3, [pc, #224]	; (8006d08 <HAL_DMA_Init+0x158>)
 8006c28:	4013      	ands	r3, r2
 8006c2a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	685a      	ldr	r2, [r3, #4]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	689b      	ldr	r3, [r3, #8]
 8006c34:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006c3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	691b      	ldr	r3, [r3, #16]
 8006c40:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006c46:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	699b      	ldr	r3, [r3, #24]
 8006c4c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006c52:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6a1b      	ldr	r3, [r3, #32]
 8006c58:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006c5a:	697a      	ldr	r2, [r7, #20]
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c64:	2b04      	cmp	r3, #4
 8006c66:	d107      	bne.n	8006c78 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c70:	4313      	orrs	r3, r2
 8006c72:	697a      	ldr	r2, [r7, #20]
 8006c74:	4313      	orrs	r3, r2
 8006c76:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	697a      	ldr	r2, [r7, #20]
 8006c7e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	695b      	ldr	r3, [r3, #20]
 8006c86:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	f023 0307 	bic.w	r3, r3, #7
 8006c8e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c94:	697a      	ldr	r2, [r7, #20]
 8006c96:	4313      	orrs	r3, r2
 8006c98:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c9e:	2b04      	cmp	r3, #4
 8006ca0:	d117      	bne.n	8006cd2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ca6:	697a      	ldr	r2, [r7, #20]
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d00e      	beq.n	8006cd2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f000 fb0f 	bl	80072d8 <DMA_CheckFifoParam>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d008      	beq.n	8006cd2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2240      	movs	r2, #64	; 0x40
 8006cc4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2201      	movs	r2, #1
 8006cca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006cce:	2301      	movs	r3, #1
 8006cd0:	e016      	b.n	8006d00 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	697a      	ldr	r2, [r7, #20]
 8006cd8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f000 fac6 	bl	800726c <DMA_CalcBaseAndBitshift>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ce8:	223f      	movs	r2, #63	; 0x3f
 8006cea:	409a      	lsls	r2, r3
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2201      	movs	r2, #1
 8006cfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006cfe:	2300      	movs	r3, #0
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	3718      	adds	r7, #24
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}
 8006d08:	f010803f 	.word	0xf010803f

08006d0c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b086      	sub	sp, #24
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	60f8      	str	r0, [r7, #12]
 8006d14:	60b9      	str	r1, [r7, #8]
 8006d16:	607a      	str	r2, [r7, #4]
 8006d18:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d22:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006d2a:	2b01      	cmp	r3, #1
 8006d2c:	d101      	bne.n	8006d32 <HAL_DMA_Start_IT+0x26>
 8006d2e:	2302      	movs	r3, #2
 8006d30:	e040      	b.n	8006db4 <HAL_DMA_Start_IT+0xa8>
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2201      	movs	r2, #1
 8006d36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006d40:	b2db      	uxtb	r3, r3
 8006d42:	2b01      	cmp	r3, #1
 8006d44:	d12f      	bne.n	8006da6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	2202      	movs	r2, #2
 8006d4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2200      	movs	r2, #0
 8006d52:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	687a      	ldr	r2, [r7, #4]
 8006d58:	68b9      	ldr	r1, [r7, #8]
 8006d5a:	68f8      	ldr	r0, [r7, #12]
 8006d5c:	f000 fa58 	bl	8007210 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d64:	223f      	movs	r2, #63	; 0x3f
 8006d66:	409a      	lsls	r2, r3
 8006d68:	693b      	ldr	r3, [r7, #16]
 8006d6a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	681a      	ldr	r2, [r3, #0]
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f042 0216 	orr.w	r2, r2, #22
 8006d7a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d007      	beq.n	8006d94 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	681a      	ldr	r2, [r3, #0]
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f042 0208 	orr.w	r2, r2, #8
 8006d92:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	681a      	ldr	r2, [r3, #0]
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f042 0201 	orr.w	r2, r2, #1
 8006da2:	601a      	str	r2, [r3, #0]
 8006da4:	e005      	b.n	8006db2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	2200      	movs	r2, #0
 8006daa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006dae:	2302      	movs	r3, #2
 8006db0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006db2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	3718      	adds	r7, #24
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}

08006dbc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b084      	sub	sp, #16
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dc8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006dca:	f7ff fdaf 	bl	800692c <HAL_GetTick>
 8006dce:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006dd6:	b2db      	uxtb	r3, r3
 8006dd8:	2b02      	cmp	r3, #2
 8006dda:	d008      	beq.n	8006dee <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2280      	movs	r2, #128	; 0x80
 8006de0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2200      	movs	r2, #0
 8006de6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8006dea:	2301      	movs	r3, #1
 8006dec:	e052      	b.n	8006e94 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	681a      	ldr	r2, [r3, #0]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f022 0216 	bic.w	r2, r2, #22
 8006dfc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	695a      	ldr	r2, [r3, #20]
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006e0c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d103      	bne.n	8006e1e <HAL_DMA_Abort+0x62>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d007      	beq.n	8006e2e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	681a      	ldr	r2, [r3, #0]
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f022 0208 	bic.w	r2, r2, #8
 8006e2c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	681a      	ldr	r2, [r3, #0]
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f022 0201 	bic.w	r2, r2, #1
 8006e3c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006e3e:	e013      	b.n	8006e68 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006e40:	f7ff fd74 	bl	800692c <HAL_GetTick>
 8006e44:	4602      	mov	r2, r0
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	1ad3      	subs	r3, r2, r3
 8006e4a:	2b05      	cmp	r3, #5
 8006e4c:	d90c      	bls.n	8006e68 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2220      	movs	r2, #32
 8006e52:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2203      	movs	r2, #3
 8006e58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8006e64:	2303      	movs	r3, #3
 8006e66:	e015      	b.n	8006e94 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f003 0301 	and.w	r3, r3, #1
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d1e4      	bne.n	8006e40 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e7a:	223f      	movs	r2, #63	; 0x3f
 8006e7c:	409a      	lsls	r2, r3
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2201      	movs	r2, #1
 8006e86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8006e92:	2300      	movs	r3, #0
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	3710      	adds	r7, #16
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}

08006e9c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b083      	sub	sp, #12
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006eaa:	b2db      	uxtb	r3, r3
 8006eac:	2b02      	cmp	r3, #2
 8006eae:	d004      	beq.n	8006eba <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2280      	movs	r2, #128	; 0x80
 8006eb4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	e00c      	b.n	8006ed4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2205      	movs	r2, #5
 8006ebe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	681a      	ldr	r2, [r3, #0]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f022 0201 	bic.w	r2, r2, #1
 8006ed0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006ed2:	2300      	movs	r3, #0
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	370c      	adds	r7, #12
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ede:	4770      	bx	lr

08006ee0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b086      	sub	sp, #24
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006ee8:	2300      	movs	r3, #0
 8006eea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006eec:	4b8e      	ldr	r3, [pc, #568]	; (8007128 <HAL_DMA_IRQHandler+0x248>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a8e      	ldr	r2, [pc, #568]	; (800712c <HAL_DMA_IRQHandler+0x24c>)
 8006ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ef6:	0a9b      	lsrs	r3, r3, #10
 8006ef8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006efe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006f00:	693b      	ldr	r3, [r7, #16]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f0a:	2208      	movs	r2, #8
 8006f0c:	409a      	lsls	r2, r3
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	4013      	ands	r3, r2
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d01a      	beq.n	8006f4c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f003 0304 	and.w	r3, r3, #4
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d013      	beq.n	8006f4c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	681a      	ldr	r2, [r3, #0]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f022 0204 	bic.w	r2, r2, #4
 8006f32:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f38:	2208      	movs	r2, #8
 8006f3a:	409a      	lsls	r2, r3
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f44:	f043 0201 	orr.w	r2, r3, #1
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f50:	2201      	movs	r2, #1
 8006f52:	409a      	lsls	r2, r3
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	4013      	ands	r3, r2
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d012      	beq.n	8006f82 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	695b      	ldr	r3, [r3, #20]
 8006f62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d00b      	beq.n	8006f82 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f6e:	2201      	movs	r2, #1
 8006f70:	409a      	lsls	r2, r3
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f7a:	f043 0202 	orr.w	r2, r3, #2
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f86:	2204      	movs	r2, #4
 8006f88:	409a      	lsls	r2, r3
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	4013      	ands	r3, r2
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d012      	beq.n	8006fb8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f003 0302 	and.w	r3, r3, #2
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d00b      	beq.n	8006fb8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fa4:	2204      	movs	r2, #4
 8006fa6:	409a      	lsls	r2, r3
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fb0:	f043 0204 	orr.w	r2, r3, #4
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fbc:	2210      	movs	r2, #16
 8006fbe:	409a      	lsls	r2, r3
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	4013      	ands	r3, r2
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d043      	beq.n	8007050 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f003 0308 	and.w	r3, r3, #8
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d03c      	beq.n	8007050 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fda:	2210      	movs	r2, #16
 8006fdc:	409a      	lsls	r2, r3
 8006fde:	693b      	ldr	r3, [r7, #16]
 8006fe0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d018      	beq.n	8007022 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d108      	bne.n	8007010 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007002:	2b00      	cmp	r3, #0
 8007004:	d024      	beq.n	8007050 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	4798      	blx	r3
 800700e:	e01f      	b.n	8007050 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007014:	2b00      	cmp	r3, #0
 8007016:	d01b      	beq.n	8007050 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	4798      	blx	r3
 8007020:	e016      	b.n	8007050 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800702c:	2b00      	cmp	r3, #0
 800702e:	d107      	bne.n	8007040 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	681a      	ldr	r2, [r3, #0]
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f022 0208 	bic.w	r2, r2, #8
 800703e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007044:	2b00      	cmp	r3, #0
 8007046:	d003      	beq.n	8007050 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007054:	2220      	movs	r2, #32
 8007056:	409a      	lsls	r2, r3
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	4013      	ands	r3, r2
 800705c:	2b00      	cmp	r3, #0
 800705e:	f000 808f 	beq.w	8007180 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f003 0310 	and.w	r3, r3, #16
 800706c:	2b00      	cmp	r3, #0
 800706e:	f000 8087 	beq.w	8007180 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007076:	2220      	movs	r2, #32
 8007078:	409a      	lsls	r2, r3
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007084:	b2db      	uxtb	r3, r3
 8007086:	2b05      	cmp	r3, #5
 8007088:	d136      	bne.n	80070f8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	681a      	ldr	r2, [r3, #0]
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f022 0216 	bic.w	r2, r2, #22
 8007098:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	695a      	ldr	r2, [r3, #20]
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80070a8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d103      	bne.n	80070ba <HAL_DMA_IRQHandler+0x1da>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d007      	beq.n	80070ca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	681a      	ldr	r2, [r3, #0]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f022 0208 	bic.w	r2, r2, #8
 80070c8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070ce:	223f      	movs	r2, #63	; 0x3f
 80070d0:	409a      	lsls	r2, r3
 80070d2:	693b      	ldr	r3, [r7, #16]
 80070d4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2201      	movs	r2, #1
 80070da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2200      	movs	r2, #0
 80070e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d07e      	beq.n	80071ec <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	4798      	blx	r3
        }
        return;
 80070f6:	e079      	b.n	80071ec <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007102:	2b00      	cmp	r3, #0
 8007104:	d01d      	beq.n	8007142 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007110:	2b00      	cmp	r3, #0
 8007112:	d10d      	bne.n	8007130 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007118:	2b00      	cmp	r3, #0
 800711a:	d031      	beq.n	8007180 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	4798      	blx	r3
 8007124:	e02c      	b.n	8007180 <HAL_DMA_IRQHandler+0x2a0>
 8007126:	bf00      	nop
 8007128:	20000224 	.word	0x20000224
 800712c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007134:	2b00      	cmp	r3, #0
 8007136:	d023      	beq.n	8007180 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	4798      	blx	r3
 8007140:	e01e      	b.n	8007180 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800714c:	2b00      	cmp	r3, #0
 800714e:	d10f      	bne.n	8007170 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	681a      	ldr	r2, [r3, #0]
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f022 0210 	bic.w	r2, r2, #16
 800715e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2201      	movs	r2, #1
 8007164:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2200      	movs	r2, #0
 800716c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007174:	2b00      	cmp	r3, #0
 8007176:	d003      	beq.n	8007180 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007184:	2b00      	cmp	r3, #0
 8007186:	d032      	beq.n	80071ee <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800718c:	f003 0301 	and.w	r3, r3, #1
 8007190:	2b00      	cmp	r3, #0
 8007192:	d022      	beq.n	80071da <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2205      	movs	r2, #5
 8007198:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	681a      	ldr	r2, [r3, #0]
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f022 0201 	bic.w	r2, r2, #1
 80071aa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	3301      	adds	r3, #1
 80071b0:	60bb      	str	r3, [r7, #8]
 80071b2:	697a      	ldr	r2, [r7, #20]
 80071b4:	429a      	cmp	r2, r3
 80071b6:	d307      	bcc.n	80071c8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f003 0301 	and.w	r3, r3, #1
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d1f2      	bne.n	80071ac <HAL_DMA_IRQHandler+0x2cc>
 80071c6:	e000      	b.n	80071ca <HAL_DMA_IRQHandler+0x2ea>
          break;
 80071c8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2201      	movs	r2, #1
 80071ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2200      	movs	r2, #0
 80071d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d005      	beq.n	80071ee <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	4798      	blx	r3
 80071ea:	e000      	b.n	80071ee <HAL_DMA_IRQHandler+0x30e>
        return;
 80071ec:	bf00      	nop
    }
  }
}
 80071ee:	3718      	adds	r7, #24
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}

080071f4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80071f4:	b480      	push	{r7}
 80071f6:	b083      	sub	sp, #12
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007202:	b2db      	uxtb	r3, r3
}
 8007204:	4618      	mov	r0, r3
 8007206:	370c      	adds	r7, #12
 8007208:	46bd      	mov	sp, r7
 800720a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720e:	4770      	bx	lr

08007210 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007210:	b480      	push	{r7}
 8007212:	b085      	sub	sp, #20
 8007214:	af00      	add	r7, sp, #0
 8007216:	60f8      	str	r0, [r7, #12]
 8007218:	60b9      	str	r1, [r7, #8]
 800721a:	607a      	str	r2, [r7, #4]
 800721c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	681a      	ldr	r2, [r3, #0]
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800722c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	683a      	ldr	r2, [r7, #0]
 8007234:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	689b      	ldr	r3, [r3, #8]
 800723a:	2b40      	cmp	r3, #64	; 0x40
 800723c:	d108      	bne.n	8007250 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	687a      	ldr	r2, [r7, #4]
 8007244:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	68ba      	ldr	r2, [r7, #8]
 800724c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800724e:	e007      	b.n	8007260 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	68ba      	ldr	r2, [r7, #8]
 8007256:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	687a      	ldr	r2, [r7, #4]
 800725e:	60da      	str	r2, [r3, #12]
}
 8007260:	bf00      	nop
 8007262:	3714      	adds	r7, #20
 8007264:	46bd      	mov	sp, r7
 8007266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726a:	4770      	bx	lr

0800726c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800726c:	b480      	push	{r7}
 800726e:	b085      	sub	sp, #20
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	b2db      	uxtb	r3, r3
 800727a:	3b10      	subs	r3, #16
 800727c:	4a14      	ldr	r2, [pc, #80]	; (80072d0 <DMA_CalcBaseAndBitshift+0x64>)
 800727e:	fba2 2303 	umull	r2, r3, r2, r3
 8007282:	091b      	lsrs	r3, r3, #4
 8007284:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007286:	4a13      	ldr	r2, [pc, #76]	; (80072d4 <DMA_CalcBaseAndBitshift+0x68>)
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	4413      	add	r3, r2
 800728c:	781b      	ldrb	r3, [r3, #0]
 800728e:	461a      	mov	r2, r3
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	2b03      	cmp	r3, #3
 8007298:	d909      	bls.n	80072ae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80072a2:	f023 0303 	bic.w	r3, r3, #3
 80072a6:	1d1a      	adds	r2, r3, #4
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	659a      	str	r2, [r3, #88]	; 0x58
 80072ac:	e007      	b.n	80072be <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80072b6:	f023 0303 	bic.w	r3, r3, #3
 80072ba:	687a      	ldr	r2, [r7, #4]
 80072bc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80072c2:	4618      	mov	r0, r3
 80072c4:	3714      	adds	r7, #20
 80072c6:	46bd      	mov	sp, r7
 80072c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072cc:	4770      	bx	lr
 80072ce:	bf00      	nop
 80072d0:	aaaaaaab 	.word	0xaaaaaaab
 80072d4:	0803d220 	.word	0x0803d220

080072d8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80072d8:	b480      	push	{r7}
 80072da:	b085      	sub	sp, #20
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80072e0:	2300      	movs	r3, #0
 80072e2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072e8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	699b      	ldr	r3, [r3, #24]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d11f      	bne.n	8007332 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	2b03      	cmp	r3, #3
 80072f6:	d856      	bhi.n	80073a6 <DMA_CheckFifoParam+0xce>
 80072f8:	a201      	add	r2, pc, #4	; (adr r2, 8007300 <DMA_CheckFifoParam+0x28>)
 80072fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072fe:	bf00      	nop
 8007300:	08007311 	.word	0x08007311
 8007304:	08007323 	.word	0x08007323
 8007308:	08007311 	.word	0x08007311
 800730c:	080073a7 	.word	0x080073a7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007314:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007318:	2b00      	cmp	r3, #0
 800731a:	d046      	beq.n	80073aa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800731c:	2301      	movs	r3, #1
 800731e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007320:	e043      	b.n	80073aa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007326:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800732a:	d140      	bne.n	80073ae <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800732c:	2301      	movs	r3, #1
 800732e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007330:	e03d      	b.n	80073ae <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	699b      	ldr	r3, [r3, #24]
 8007336:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800733a:	d121      	bne.n	8007380 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	2b03      	cmp	r3, #3
 8007340:	d837      	bhi.n	80073b2 <DMA_CheckFifoParam+0xda>
 8007342:	a201      	add	r2, pc, #4	; (adr r2, 8007348 <DMA_CheckFifoParam+0x70>)
 8007344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007348:	08007359 	.word	0x08007359
 800734c:	0800735f 	.word	0x0800735f
 8007350:	08007359 	.word	0x08007359
 8007354:	08007371 	.word	0x08007371
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007358:	2301      	movs	r3, #1
 800735a:	73fb      	strb	r3, [r7, #15]
      break;
 800735c:	e030      	b.n	80073c0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007362:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007366:	2b00      	cmp	r3, #0
 8007368:	d025      	beq.n	80073b6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800736a:	2301      	movs	r3, #1
 800736c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800736e:	e022      	b.n	80073b6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007374:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007378:	d11f      	bne.n	80073ba <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800737a:	2301      	movs	r3, #1
 800737c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800737e:	e01c      	b.n	80073ba <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	2b02      	cmp	r3, #2
 8007384:	d903      	bls.n	800738e <DMA_CheckFifoParam+0xb6>
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	2b03      	cmp	r3, #3
 800738a:	d003      	beq.n	8007394 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800738c:	e018      	b.n	80073c0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800738e:	2301      	movs	r3, #1
 8007390:	73fb      	strb	r3, [r7, #15]
      break;
 8007392:	e015      	b.n	80073c0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007398:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800739c:	2b00      	cmp	r3, #0
 800739e:	d00e      	beq.n	80073be <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80073a0:	2301      	movs	r3, #1
 80073a2:	73fb      	strb	r3, [r7, #15]
      break;
 80073a4:	e00b      	b.n	80073be <DMA_CheckFifoParam+0xe6>
      break;
 80073a6:	bf00      	nop
 80073a8:	e00a      	b.n	80073c0 <DMA_CheckFifoParam+0xe8>
      break;
 80073aa:	bf00      	nop
 80073ac:	e008      	b.n	80073c0 <DMA_CheckFifoParam+0xe8>
      break;
 80073ae:	bf00      	nop
 80073b0:	e006      	b.n	80073c0 <DMA_CheckFifoParam+0xe8>
      break;
 80073b2:	bf00      	nop
 80073b4:	e004      	b.n	80073c0 <DMA_CheckFifoParam+0xe8>
      break;
 80073b6:	bf00      	nop
 80073b8:	e002      	b.n	80073c0 <DMA_CheckFifoParam+0xe8>
      break;   
 80073ba:	bf00      	nop
 80073bc:	e000      	b.n	80073c0 <DMA_CheckFifoParam+0xe8>
      break;
 80073be:	bf00      	nop
    }
  } 
  
  return status; 
 80073c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3714      	adds	r7, #20
 80073c6:	46bd      	mov	sp, r7
 80073c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073cc:	4770      	bx	lr
 80073ce:	bf00      	nop

080073d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80073d0:	b480      	push	{r7}
 80073d2:	b089      	sub	sp, #36	; 0x24
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
 80073d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80073da:	2300      	movs	r3, #0
 80073dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80073de:	2300      	movs	r3, #0
 80073e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80073e2:	2300      	movs	r3, #0
 80073e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80073e6:	2300      	movs	r3, #0
 80073e8:	61fb      	str	r3, [r7, #28]
 80073ea:	e159      	b.n	80076a0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80073ec:	2201      	movs	r2, #1
 80073ee:	69fb      	ldr	r3, [r7, #28]
 80073f0:	fa02 f303 	lsl.w	r3, r2, r3
 80073f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	697a      	ldr	r2, [r7, #20]
 80073fc:	4013      	ands	r3, r2
 80073fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007400:	693a      	ldr	r2, [r7, #16]
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	429a      	cmp	r2, r3
 8007406:	f040 8148 	bne.w	800769a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	685b      	ldr	r3, [r3, #4]
 800740e:	f003 0303 	and.w	r3, r3, #3
 8007412:	2b01      	cmp	r3, #1
 8007414:	d005      	beq.n	8007422 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	685b      	ldr	r3, [r3, #4]
 800741a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800741e:	2b02      	cmp	r3, #2
 8007420:	d130      	bne.n	8007484 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	689b      	ldr	r3, [r3, #8]
 8007426:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007428:	69fb      	ldr	r3, [r7, #28]
 800742a:	005b      	lsls	r3, r3, #1
 800742c:	2203      	movs	r2, #3
 800742e:	fa02 f303 	lsl.w	r3, r2, r3
 8007432:	43db      	mvns	r3, r3
 8007434:	69ba      	ldr	r2, [r7, #24]
 8007436:	4013      	ands	r3, r2
 8007438:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	68da      	ldr	r2, [r3, #12]
 800743e:	69fb      	ldr	r3, [r7, #28]
 8007440:	005b      	lsls	r3, r3, #1
 8007442:	fa02 f303 	lsl.w	r3, r2, r3
 8007446:	69ba      	ldr	r2, [r7, #24]
 8007448:	4313      	orrs	r3, r2
 800744a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	69ba      	ldr	r2, [r7, #24]
 8007450:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	685b      	ldr	r3, [r3, #4]
 8007456:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007458:	2201      	movs	r2, #1
 800745a:	69fb      	ldr	r3, [r7, #28]
 800745c:	fa02 f303 	lsl.w	r3, r2, r3
 8007460:	43db      	mvns	r3, r3
 8007462:	69ba      	ldr	r2, [r7, #24]
 8007464:	4013      	ands	r3, r2
 8007466:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	685b      	ldr	r3, [r3, #4]
 800746c:	091b      	lsrs	r3, r3, #4
 800746e:	f003 0201 	and.w	r2, r3, #1
 8007472:	69fb      	ldr	r3, [r7, #28]
 8007474:	fa02 f303 	lsl.w	r3, r2, r3
 8007478:	69ba      	ldr	r2, [r7, #24]
 800747a:	4313      	orrs	r3, r2
 800747c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	69ba      	ldr	r2, [r7, #24]
 8007482:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	685b      	ldr	r3, [r3, #4]
 8007488:	f003 0303 	and.w	r3, r3, #3
 800748c:	2b03      	cmp	r3, #3
 800748e:	d017      	beq.n	80074c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	68db      	ldr	r3, [r3, #12]
 8007494:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007496:	69fb      	ldr	r3, [r7, #28]
 8007498:	005b      	lsls	r3, r3, #1
 800749a:	2203      	movs	r2, #3
 800749c:	fa02 f303 	lsl.w	r3, r2, r3
 80074a0:	43db      	mvns	r3, r3
 80074a2:	69ba      	ldr	r2, [r7, #24]
 80074a4:	4013      	ands	r3, r2
 80074a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	689a      	ldr	r2, [r3, #8]
 80074ac:	69fb      	ldr	r3, [r7, #28]
 80074ae:	005b      	lsls	r3, r3, #1
 80074b0:	fa02 f303 	lsl.w	r3, r2, r3
 80074b4:	69ba      	ldr	r2, [r7, #24]
 80074b6:	4313      	orrs	r3, r2
 80074b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	69ba      	ldr	r2, [r7, #24]
 80074be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	685b      	ldr	r3, [r3, #4]
 80074c4:	f003 0303 	and.w	r3, r3, #3
 80074c8:	2b02      	cmp	r3, #2
 80074ca:	d123      	bne.n	8007514 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80074cc:	69fb      	ldr	r3, [r7, #28]
 80074ce:	08da      	lsrs	r2, r3, #3
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	3208      	adds	r2, #8
 80074d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80074da:	69fb      	ldr	r3, [r7, #28]
 80074dc:	f003 0307 	and.w	r3, r3, #7
 80074e0:	009b      	lsls	r3, r3, #2
 80074e2:	220f      	movs	r2, #15
 80074e4:	fa02 f303 	lsl.w	r3, r2, r3
 80074e8:	43db      	mvns	r3, r3
 80074ea:	69ba      	ldr	r2, [r7, #24]
 80074ec:	4013      	ands	r3, r2
 80074ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	691a      	ldr	r2, [r3, #16]
 80074f4:	69fb      	ldr	r3, [r7, #28]
 80074f6:	f003 0307 	and.w	r3, r3, #7
 80074fa:	009b      	lsls	r3, r3, #2
 80074fc:	fa02 f303 	lsl.w	r3, r2, r3
 8007500:	69ba      	ldr	r2, [r7, #24]
 8007502:	4313      	orrs	r3, r2
 8007504:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007506:	69fb      	ldr	r3, [r7, #28]
 8007508:	08da      	lsrs	r2, r3, #3
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	3208      	adds	r2, #8
 800750e:	69b9      	ldr	r1, [r7, #24]
 8007510:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800751a:	69fb      	ldr	r3, [r7, #28]
 800751c:	005b      	lsls	r3, r3, #1
 800751e:	2203      	movs	r2, #3
 8007520:	fa02 f303 	lsl.w	r3, r2, r3
 8007524:	43db      	mvns	r3, r3
 8007526:	69ba      	ldr	r2, [r7, #24]
 8007528:	4013      	ands	r3, r2
 800752a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	685b      	ldr	r3, [r3, #4]
 8007530:	f003 0203 	and.w	r2, r3, #3
 8007534:	69fb      	ldr	r3, [r7, #28]
 8007536:	005b      	lsls	r3, r3, #1
 8007538:	fa02 f303 	lsl.w	r3, r2, r3
 800753c:	69ba      	ldr	r2, [r7, #24]
 800753e:	4313      	orrs	r3, r2
 8007540:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	69ba      	ldr	r2, [r7, #24]
 8007546:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	685b      	ldr	r3, [r3, #4]
 800754c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007550:	2b00      	cmp	r3, #0
 8007552:	f000 80a2 	beq.w	800769a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007556:	2300      	movs	r3, #0
 8007558:	60fb      	str	r3, [r7, #12]
 800755a:	4b57      	ldr	r3, [pc, #348]	; (80076b8 <HAL_GPIO_Init+0x2e8>)
 800755c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800755e:	4a56      	ldr	r2, [pc, #344]	; (80076b8 <HAL_GPIO_Init+0x2e8>)
 8007560:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007564:	6453      	str	r3, [r2, #68]	; 0x44
 8007566:	4b54      	ldr	r3, [pc, #336]	; (80076b8 <HAL_GPIO_Init+0x2e8>)
 8007568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800756a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800756e:	60fb      	str	r3, [r7, #12]
 8007570:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007572:	4a52      	ldr	r2, [pc, #328]	; (80076bc <HAL_GPIO_Init+0x2ec>)
 8007574:	69fb      	ldr	r3, [r7, #28]
 8007576:	089b      	lsrs	r3, r3, #2
 8007578:	3302      	adds	r3, #2
 800757a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800757e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007580:	69fb      	ldr	r3, [r7, #28]
 8007582:	f003 0303 	and.w	r3, r3, #3
 8007586:	009b      	lsls	r3, r3, #2
 8007588:	220f      	movs	r2, #15
 800758a:	fa02 f303 	lsl.w	r3, r2, r3
 800758e:	43db      	mvns	r3, r3
 8007590:	69ba      	ldr	r2, [r7, #24]
 8007592:	4013      	ands	r3, r2
 8007594:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	4a49      	ldr	r2, [pc, #292]	; (80076c0 <HAL_GPIO_Init+0x2f0>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d019      	beq.n	80075d2 <HAL_GPIO_Init+0x202>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	4a48      	ldr	r2, [pc, #288]	; (80076c4 <HAL_GPIO_Init+0x2f4>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d013      	beq.n	80075ce <HAL_GPIO_Init+0x1fe>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	4a47      	ldr	r2, [pc, #284]	; (80076c8 <HAL_GPIO_Init+0x2f8>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d00d      	beq.n	80075ca <HAL_GPIO_Init+0x1fa>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	4a46      	ldr	r2, [pc, #280]	; (80076cc <HAL_GPIO_Init+0x2fc>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d007      	beq.n	80075c6 <HAL_GPIO_Init+0x1f6>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	4a45      	ldr	r2, [pc, #276]	; (80076d0 <HAL_GPIO_Init+0x300>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d101      	bne.n	80075c2 <HAL_GPIO_Init+0x1f2>
 80075be:	2304      	movs	r3, #4
 80075c0:	e008      	b.n	80075d4 <HAL_GPIO_Init+0x204>
 80075c2:	2307      	movs	r3, #7
 80075c4:	e006      	b.n	80075d4 <HAL_GPIO_Init+0x204>
 80075c6:	2303      	movs	r3, #3
 80075c8:	e004      	b.n	80075d4 <HAL_GPIO_Init+0x204>
 80075ca:	2302      	movs	r3, #2
 80075cc:	e002      	b.n	80075d4 <HAL_GPIO_Init+0x204>
 80075ce:	2301      	movs	r3, #1
 80075d0:	e000      	b.n	80075d4 <HAL_GPIO_Init+0x204>
 80075d2:	2300      	movs	r3, #0
 80075d4:	69fa      	ldr	r2, [r7, #28]
 80075d6:	f002 0203 	and.w	r2, r2, #3
 80075da:	0092      	lsls	r2, r2, #2
 80075dc:	4093      	lsls	r3, r2
 80075de:	69ba      	ldr	r2, [r7, #24]
 80075e0:	4313      	orrs	r3, r2
 80075e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80075e4:	4935      	ldr	r1, [pc, #212]	; (80076bc <HAL_GPIO_Init+0x2ec>)
 80075e6:	69fb      	ldr	r3, [r7, #28]
 80075e8:	089b      	lsrs	r3, r3, #2
 80075ea:	3302      	adds	r3, #2
 80075ec:	69ba      	ldr	r2, [r7, #24]
 80075ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80075f2:	4b38      	ldr	r3, [pc, #224]	; (80076d4 <HAL_GPIO_Init+0x304>)
 80075f4:	689b      	ldr	r3, [r3, #8]
 80075f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80075f8:	693b      	ldr	r3, [r7, #16]
 80075fa:	43db      	mvns	r3, r3
 80075fc:	69ba      	ldr	r2, [r7, #24]
 80075fe:	4013      	ands	r3, r2
 8007600:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	685b      	ldr	r3, [r3, #4]
 8007606:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800760a:	2b00      	cmp	r3, #0
 800760c:	d003      	beq.n	8007616 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800760e:	69ba      	ldr	r2, [r7, #24]
 8007610:	693b      	ldr	r3, [r7, #16]
 8007612:	4313      	orrs	r3, r2
 8007614:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007616:	4a2f      	ldr	r2, [pc, #188]	; (80076d4 <HAL_GPIO_Init+0x304>)
 8007618:	69bb      	ldr	r3, [r7, #24]
 800761a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800761c:	4b2d      	ldr	r3, [pc, #180]	; (80076d4 <HAL_GPIO_Init+0x304>)
 800761e:	68db      	ldr	r3, [r3, #12]
 8007620:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007622:	693b      	ldr	r3, [r7, #16]
 8007624:	43db      	mvns	r3, r3
 8007626:	69ba      	ldr	r2, [r7, #24]
 8007628:	4013      	ands	r3, r2
 800762a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	685b      	ldr	r3, [r3, #4]
 8007630:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007634:	2b00      	cmp	r3, #0
 8007636:	d003      	beq.n	8007640 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8007638:	69ba      	ldr	r2, [r7, #24]
 800763a:	693b      	ldr	r3, [r7, #16]
 800763c:	4313      	orrs	r3, r2
 800763e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007640:	4a24      	ldr	r2, [pc, #144]	; (80076d4 <HAL_GPIO_Init+0x304>)
 8007642:	69bb      	ldr	r3, [r7, #24]
 8007644:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007646:	4b23      	ldr	r3, [pc, #140]	; (80076d4 <HAL_GPIO_Init+0x304>)
 8007648:	685b      	ldr	r3, [r3, #4]
 800764a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800764c:	693b      	ldr	r3, [r7, #16]
 800764e:	43db      	mvns	r3, r3
 8007650:	69ba      	ldr	r2, [r7, #24]
 8007652:	4013      	ands	r3, r2
 8007654:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	685b      	ldr	r3, [r3, #4]
 800765a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800765e:	2b00      	cmp	r3, #0
 8007660:	d003      	beq.n	800766a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8007662:	69ba      	ldr	r2, [r7, #24]
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	4313      	orrs	r3, r2
 8007668:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800766a:	4a1a      	ldr	r2, [pc, #104]	; (80076d4 <HAL_GPIO_Init+0x304>)
 800766c:	69bb      	ldr	r3, [r7, #24]
 800766e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007670:	4b18      	ldr	r3, [pc, #96]	; (80076d4 <HAL_GPIO_Init+0x304>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007676:	693b      	ldr	r3, [r7, #16]
 8007678:	43db      	mvns	r3, r3
 800767a:	69ba      	ldr	r2, [r7, #24]
 800767c:	4013      	ands	r3, r2
 800767e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	685b      	ldr	r3, [r3, #4]
 8007684:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007688:	2b00      	cmp	r3, #0
 800768a:	d003      	beq.n	8007694 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800768c:	69ba      	ldr	r2, [r7, #24]
 800768e:	693b      	ldr	r3, [r7, #16]
 8007690:	4313      	orrs	r3, r2
 8007692:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007694:	4a0f      	ldr	r2, [pc, #60]	; (80076d4 <HAL_GPIO_Init+0x304>)
 8007696:	69bb      	ldr	r3, [r7, #24]
 8007698:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800769a:	69fb      	ldr	r3, [r7, #28]
 800769c:	3301      	adds	r3, #1
 800769e:	61fb      	str	r3, [r7, #28]
 80076a0:	69fb      	ldr	r3, [r7, #28]
 80076a2:	2b0f      	cmp	r3, #15
 80076a4:	f67f aea2 	bls.w	80073ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80076a8:	bf00      	nop
 80076aa:	bf00      	nop
 80076ac:	3724      	adds	r7, #36	; 0x24
 80076ae:	46bd      	mov	sp, r7
 80076b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b4:	4770      	bx	lr
 80076b6:	bf00      	nop
 80076b8:	40023800 	.word	0x40023800
 80076bc:	40013800 	.word	0x40013800
 80076c0:	40020000 	.word	0x40020000
 80076c4:	40020400 	.word	0x40020400
 80076c8:	40020800 	.word	0x40020800
 80076cc:	40020c00 	.word	0x40020c00
 80076d0:	40021000 	.word	0x40021000
 80076d4:	40013c00 	.word	0x40013c00

080076d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80076d8:	b480      	push	{r7}
 80076da:	b085      	sub	sp, #20
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
 80076e0:	460b      	mov	r3, r1
 80076e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	691a      	ldr	r2, [r3, #16]
 80076e8:	887b      	ldrh	r3, [r7, #2]
 80076ea:	4013      	ands	r3, r2
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d002      	beq.n	80076f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80076f0:	2301      	movs	r3, #1
 80076f2:	73fb      	strb	r3, [r7, #15]
 80076f4:	e001      	b.n	80076fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80076f6:	2300      	movs	r3, #0
 80076f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80076fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	3714      	adds	r7, #20
 8007700:	46bd      	mov	sp, r7
 8007702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007706:	4770      	bx	lr

08007708 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007708:	b480      	push	{r7}
 800770a:	b083      	sub	sp, #12
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
 8007710:	460b      	mov	r3, r1
 8007712:	807b      	strh	r3, [r7, #2]
 8007714:	4613      	mov	r3, r2
 8007716:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007718:	787b      	ldrb	r3, [r7, #1]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d003      	beq.n	8007726 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800771e:	887a      	ldrh	r2, [r7, #2]
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007724:	e003      	b.n	800772e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007726:	887b      	ldrh	r3, [r7, #2]
 8007728:	041a      	lsls	r2, r3, #16
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	619a      	str	r2, [r3, #24]
}
 800772e:	bf00      	nop
 8007730:	370c      	adds	r7, #12
 8007732:	46bd      	mov	sp, r7
 8007734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007738:	4770      	bx	lr

0800773a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800773a:	b480      	push	{r7}
 800773c:	b085      	sub	sp, #20
 800773e:	af00      	add	r7, sp, #0
 8007740:	6078      	str	r0, [r7, #4]
 8007742:	460b      	mov	r3, r1
 8007744:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	695b      	ldr	r3, [r3, #20]
 800774a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800774c:	887a      	ldrh	r2, [r7, #2]
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	4013      	ands	r3, r2
 8007752:	041a      	lsls	r2, r3, #16
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	43d9      	mvns	r1, r3
 8007758:	887b      	ldrh	r3, [r7, #2]
 800775a:	400b      	ands	r3, r1
 800775c:	431a      	orrs	r2, r3
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	619a      	str	r2, [r3, #24]
}
 8007762:	bf00      	nop
 8007764:	3714      	adds	r7, #20
 8007766:	46bd      	mov	sp, r7
 8007768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776c:	4770      	bx	lr
	...

08007770 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b082      	sub	sp, #8
 8007774:	af00      	add	r7, sp, #0
 8007776:	4603      	mov	r3, r0
 8007778:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800777a:	4b08      	ldr	r3, [pc, #32]	; (800779c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800777c:	695a      	ldr	r2, [r3, #20]
 800777e:	88fb      	ldrh	r3, [r7, #6]
 8007780:	4013      	ands	r3, r2
 8007782:	2b00      	cmp	r3, #0
 8007784:	d006      	beq.n	8007794 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007786:	4a05      	ldr	r2, [pc, #20]	; (800779c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007788:	88fb      	ldrh	r3, [r7, #6]
 800778a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800778c:	88fb      	ldrh	r3, [r7, #6]
 800778e:	4618      	mov	r0, r3
 8007790:	f7fd fc14 	bl	8004fbc <HAL_GPIO_EXTI_Callback>
  }
}
 8007794:	bf00      	nop
 8007796:	3708      	adds	r7, #8
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}
 800779c:	40013c00 	.word	0x40013c00

080077a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b084      	sub	sp, #16
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d101      	bne.n	80077b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80077ae:	2301      	movs	r3, #1
 80077b0:	e12b      	b.n	8007a0a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077b8:	b2db      	uxtb	r3, r3
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d106      	bne.n	80077cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2200      	movs	r2, #0
 80077c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f7fd fc80 	bl	80050cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2224      	movs	r2, #36	; 0x24
 80077d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	681a      	ldr	r2, [r3, #0]
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f022 0201 	bic.w	r2, r2, #1
 80077e2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	681a      	ldr	r2, [r3, #0]
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80077f2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	681a      	ldr	r2, [r3, #0]
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007802:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007804:	f003 f8d6 	bl	800a9b4 <HAL_RCC_GetPCLK1Freq>
 8007808:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	685b      	ldr	r3, [r3, #4]
 800780e:	4a81      	ldr	r2, [pc, #516]	; (8007a14 <HAL_I2C_Init+0x274>)
 8007810:	4293      	cmp	r3, r2
 8007812:	d807      	bhi.n	8007824 <HAL_I2C_Init+0x84>
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	4a80      	ldr	r2, [pc, #512]	; (8007a18 <HAL_I2C_Init+0x278>)
 8007818:	4293      	cmp	r3, r2
 800781a:	bf94      	ite	ls
 800781c:	2301      	movls	r3, #1
 800781e:	2300      	movhi	r3, #0
 8007820:	b2db      	uxtb	r3, r3
 8007822:	e006      	b.n	8007832 <HAL_I2C_Init+0x92>
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	4a7d      	ldr	r2, [pc, #500]	; (8007a1c <HAL_I2C_Init+0x27c>)
 8007828:	4293      	cmp	r3, r2
 800782a:	bf94      	ite	ls
 800782c:	2301      	movls	r3, #1
 800782e:	2300      	movhi	r3, #0
 8007830:	b2db      	uxtb	r3, r3
 8007832:	2b00      	cmp	r3, #0
 8007834:	d001      	beq.n	800783a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007836:	2301      	movs	r3, #1
 8007838:	e0e7      	b.n	8007a0a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	4a78      	ldr	r2, [pc, #480]	; (8007a20 <HAL_I2C_Init+0x280>)
 800783e:	fba2 2303 	umull	r2, r3, r2, r3
 8007842:	0c9b      	lsrs	r3, r3, #18
 8007844:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	685b      	ldr	r3, [r3, #4]
 800784c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	68ba      	ldr	r2, [r7, #8]
 8007856:	430a      	orrs	r2, r1
 8007858:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	6a1b      	ldr	r3, [r3, #32]
 8007860:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	685b      	ldr	r3, [r3, #4]
 8007868:	4a6a      	ldr	r2, [pc, #424]	; (8007a14 <HAL_I2C_Init+0x274>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d802      	bhi.n	8007874 <HAL_I2C_Init+0xd4>
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	3301      	adds	r3, #1
 8007872:	e009      	b.n	8007888 <HAL_I2C_Init+0xe8>
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800787a:	fb02 f303 	mul.w	r3, r2, r3
 800787e:	4a69      	ldr	r2, [pc, #420]	; (8007a24 <HAL_I2C_Init+0x284>)
 8007880:	fba2 2303 	umull	r2, r3, r2, r3
 8007884:	099b      	lsrs	r3, r3, #6
 8007886:	3301      	adds	r3, #1
 8007888:	687a      	ldr	r2, [r7, #4]
 800788a:	6812      	ldr	r2, [r2, #0]
 800788c:	430b      	orrs	r3, r1
 800788e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	69db      	ldr	r3, [r3, #28]
 8007896:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800789a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	685b      	ldr	r3, [r3, #4]
 80078a2:	495c      	ldr	r1, [pc, #368]	; (8007a14 <HAL_I2C_Init+0x274>)
 80078a4:	428b      	cmp	r3, r1
 80078a6:	d819      	bhi.n	80078dc <HAL_I2C_Init+0x13c>
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	1e59      	subs	r1, r3, #1
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	005b      	lsls	r3, r3, #1
 80078b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80078b6:	1c59      	adds	r1, r3, #1
 80078b8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80078bc:	400b      	ands	r3, r1
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d00a      	beq.n	80078d8 <HAL_I2C_Init+0x138>
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	1e59      	subs	r1, r3, #1
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	685b      	ldr	r3, [r3, #4]
 80078ca:	005b      	lsls	r3, r3, #1
 80078cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80078d0:	3301      	adds	r3, #1
 80078d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80078d6:	e051      	b.n	800797c <HAL_I2C_Init+0x1dc>
 80078d8:	2304      	movs	r3, #4
 80078da:	e04f      	b.n	800797c <HAL_I2C_Init+0x1dc>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	689b      	ldr	r3, [r3, #8]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d111      	bne.n	8007908 <HAL_I2C_Init+0x168>
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	1e58      	subs	r0, r3, #1
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6859      	ldr	r1, [r3, #4]
 80078ec:	460b      	mov	r3, r1
 80078ee:	005b      	lsls	r3, r3, #1
 80078f0:	440b      	add	r3, r1
 80078f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80078f6:	3301      	adds	r3, #1
 80078f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	bf0c      	ite	eq
 8007900:	2301      	moveq	r3, #1
 8007902:	2300      	movne	r3, #0
 8007904:	b2db      	uxtb	r3, r3
 8007906:	e012      	b.n	800792e <HAL_I2C_Init+0x18e>
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	1e58      	subs	r0, r3, #1
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6859      	ldr	r1, [r3, #4]
 8007910:	460b      	mov	r3, r1
 8007912:	009b      	lsls	r3, r3, #2
 8007914:	440b      	add	r3, r1
 8007916:	0099      	lsls	r1, r3, #2
 8007918:	440b      	add	r3, r1
 800791a:	fbb0 f3f3 	udiv	r3, r0, r3
 800791e:	3301      	adds	r3, #1
 8007920:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007924:	2b00      	cmp	r3, #0
 8007926:	bf0c      	ite	eq
 8007928:	2301      	moveq	r3, #1
 800792a:	2300      	movne	r3, #0
 800792c:	b2db      	uxtb	r3, r3
 800792e:	2b00      	cmp	r3, #0
 8007930:	d001      	beq.n	8007936 <HAL_I2C_Init+0x196>
 8007932:	2301      	movs	r3, #1
 8007934:	e022      	b.n	800797c <HAL_I2C_Init+0x1dc>
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	689b      	ldr	r3, [r3, #8]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d10e      	bne.n	800795c <HAL_I2C_Init+0x1bc>
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	1e58      	subs	r0, r3, #1
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6859      	ldr	r1, [r3, #4]
 8007946:	460b      	mov	r3, r1
 8007948:	005b      	lsls	r3, r3, #1
 800794a:	440b      	add	r3, r1
 800794c:	fbb0 f3f3 	udiv	r3, r0, r3
 8007950:	3301      	adds	r3, #1
 8007952:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007956:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800795a:	e00f      	b.n	800797c <HAL_I2C_Init+0x1dc>
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	1e58      	subs	r0, r3, #1
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6859      	ldr	r1, [r3, #4]
 8007964:	460b      	mov	r3, r1
 8007966:	009b      	lsls	r3, r3, #2
 8007968:	440b      	add	r3, r1
 800796a:	0099      	lsls	r1, r3, #2
 800796c:	440b      	add	r3, r1
 800796e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007972:	3301      	adds	r3, #1
 8007974:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007978:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800797c:	6879      	ldr	r1, [r7, #4]
 800797e:	6809      	ldr	r1, [r1, #0]
 8007980:	4313      	orrs	r3, r2
 8007982:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	69da      	ldr	r2, [r3, #28]
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6a1b      	ldr	r3, [r3, #32]
 8007996:	431a      	orrs	r2, r3
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	430a      	orrs	r2, r1
 800799e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	689b      	ldr	r3, [r3, #8]
 80079a6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80079aa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80079ae:	687a      	ldr	r2, [r7, #4]
 80079b0:	6911      	ldr	r1, [r2, #16]
 80079b2:	687a      	ldr	r2, [r7, #4]
 80079b4:	68d2      	ldr	r2, [r2, #12]
 80079b6:	4311      	orrs	r1, r2
 80079b8:	687a      	ldr	r2, [r7, #4]
 80079ba:	6812      	ldr	r2, [r2, #0]
 80079bc:	430b      	orrs	r3, r1
 80079be:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	68db      	ldr	r3, [r3, #12]
 80079c6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	695a      	ldr	r2, [r3, #20]
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	699b      	ldr	r3, [r3, #24]
 80079d2:	431a      	orrs	r2, r3
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	430a      	orrs	r2, r1
 80079da:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	681a      	ldr	r2, [r3, #0]
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f042 0201 	orr.w	r2, r2, #1
 80079ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2200      	movs	r2, #0
 80079f0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2220      	movs	r2, #32
 80079f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2200      	movs	r2, #0
 80079fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2200      	movs	r2, #0
 8007a04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007a08:	2300      	movs	r3, #0
}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	3710      	adds	r7, #16
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}
 8007a12:	bf00      	nop
 8007a14:	000186a0 	.word	0x000186a0
 8007a18:	001e847f 	.word	0x001e847f
 8007a1c:	003d08ff 	.word	0x003d08ff
 8007a20:	431bde83 	.word	0x431bde83
 8007a24:	10624dd3 	.word	0x10624dd3

08007a28 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b088      	sub	sp, #32
 8007a2c:	af02      	add	r7, sp, #8
 8007a2e:	60f8      	str	r0, [r7, #12]
 8007a30:	4608      	mov	r0, r1
 8007a32:	4611      	mov	r1, r2
 8007a34:	461a      	mov	r2, r3
 8007a36:	4603      	mov	r3, r0
 8007a38:	817b      	strh	r3, [r7, #10]
 8007a3a:	460b      	mov	r3, r1
 8007a3c:	813b      	strh	r3, [r7, #8]
 8007a3e:	4613      	mov	r3, r2
 8007a40:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007a42:	f7fe ff73 	bl	800692c <HAL_GetTick>
 8007a46:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a4e:	b2db      	uxtb	r3, r3
 8007a50:	2b20      	cmp	r3, #32
 8007a52:	f040 80d9 	bne.w	8007c08 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	9300      	str	r3, [sp, #0]
 8007a5a:	2319      	movs	r3, #25
 8007a5c:	2201      	movs	r2, #1
 8007a5e:	496d      	ldr	r1, [pc, #436]	; (8007c14 <HAL_I2C_Mem_Write+0x1ec>)
 8007a60:	68f8      	ldr	r0, [r7, #12]
 8007a62:	f002 f90d 	bl	8009c80 <I2C_WaitOnFlagUntilTimeout>
 8007a66:	4603      	mov	r3, r0
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d001      	beq.n	8007a70 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007a6c:	2302      	movs	r3, #2
 8007a6e:	e0cc      	b.n	8007c0a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a76:	2b01      	cmp	r3, #1
 8007a78:	d101      	bne.n	8007a7e <HAL_I2C_Mem_Write+0x56>
 8007a7a:	2302      	movs	r3, #2
 8007a7c:	e0c5      	b.n	8007c0a <HAL_I2C_Mem_Write+0x1e2>
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	2201      	movs	r2, #1
 8007a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f003 0301 	and.w	r3, r3, #1
 8007a90:	2b01      	cmp	r3, #1
 8007a92:	d007      	beq.n	8007aa4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	681a      	ldr	r2, [r3, #0]
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f042 0201 	orr.w	r2, r2, #1
 8007aa2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	681a      	ldr	r2, [r3, #0]
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007ab2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	2221      	movs	r2, #33	; 0x21
 8007ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	2240      	movs	r2, #64	; 0x40
 8007ac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	6a3a      	ldr	r2, [r7, #32]
 8007ace:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007ad4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ada:	b29a      	uxth	r2, r3
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	4a4d      	ldr	r2, [pc, #308]	; (8007c18 <HAL_I2C_Mem_Write+0x1f0>)
 8007ae4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007ae6:	88f8      	ldrh	r0, [r7, #6]
 8007ae8:	893a      	ldrh	r2, [r7, #8]
 8007aea:	8979      	ldrh	r1, [r7, #10]
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	9301      	str	r3, [sp, #4]
 8007af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007af2:	9300      	str	r3, [sp, #0]
 8007af4:	4603      	mov	r3, r0
 8007af6:	68f8      	ldr	r0, [r7, #12]
 8007af8:	f001 fe9c 	bl	8009834 <I2C_RequestMemoryWrite>
 8007afc:	4603      	mov	r3, r0
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d052      	beq.n	8007ba8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8007b02:	2301      	movs	r3, #1
 8007b04:	e081      	b.n	8007c0a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007b06:	697a      	ldr	r2, [r7, #20]
 8007b08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007b0a:	68f8      	ldr	r0, [r7, #12]
 8007b0c:	f002 f98e 	bl	8009e2c <I2C_WaitOnTXEFlagUntilTimeout>
 8007b10:	4603      	mov	r3, r0
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d00d      	beq.n	8007b32 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b1a:	2b04      	cmp	r3, #4
 8007b1c:	d107      	bne.n	8007b2e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	681a      	ldr	r2, [r3, #0]
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b2c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007b2e:	2301      	movs	r3, #1
 8007b30:	e06b      	b.n	8007c0a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b36:	781a      	ldrb	r2, [r3, #0]
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b42:	1c5a      	adds	r2, r3, #1
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b4c:	3b01      	subs	r3, #1
 8007b4e:	b29a      	uxth	r2, r3
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b58:	b29b      	uxth	r3, r3
 8007b5a:	3b01      	subs	r3, #1
 8007b5c:	b29a      	uxth	r2, r3
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	695b      	ldr	r3, [r3, #20]
 8007b68:	f003 0304 	and.w	r3, r3, #4
 8007b6c:	2b04      	cmp	r3, #4
 8007b6e:	d11b      	bne.n	8007ba8 <HAL_I2C_Mem_Write+0x180>
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d017      	beq.n	8007ba8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b7c:	781a      	ldrb	r2, [r3, #0]
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b88:	1c5a      	adds	r2, r3, #1
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b92:	3b01      	subs	r3, #1
 8007b94:	b29a      	uxth	r2, r3
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b9e:	b29b      	uxth	r3, r3
 8007ba0:	3b01      	subs	r3, #1
 8007ba2:	b29a      	uxth	r2, r3
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d1aa      	bne.n	8007b06 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007bb0:	697a      	ldr	r2, [r7, #20]
 8007bb2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007bb4:	68f8      	ldr	r0, [r7, #12]
 8007bb6:	f002 f97a 	bl	8009eae <I2C_WaitOnBTFFlagUntilTimeout>
 8007bba:	4603      	mov	r3, r0
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d00d      	beq.n	8007bdc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bc4:	2b04      	cmp	r3, #4
 8007bc6:	d107      	bne.n	8007bd8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	681a      	ldr	r2, [r3, #0]
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007bd6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007bd8:	2301      	movs	r3, #1
 8007bda:	e016      	b.n	8007c0a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	681a      	ldr	r2, [r3, #0]
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007bea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	2220      	movs	r2, #32
 8007bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007c04:	2300      	movs	r3, #0
 8007c06:	e000      	b.n	8007c0a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007c08:	2302      	movs	r3, #2
  }
}
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	3718      	adds	r7, #24
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd80      	pop	{r7, pc}
 8007c12:	bf00      	nop
 8007c14:	00100002 	.word	0x00100002
 8007c18:	ffff0000 	.word	0xffff0000

08007c1c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b08c      	sub	sp, #48	; 0x30
 8007c20:	af02      	add	r7, sp, #8
 8007c22:	60f8      	str	r0, [r7, #12]
 8007c24:	4608      	mov	r0, r1
 8007c26:	4611      	mov	r1, r2
 8007c28:	461a      	mov	r2, r3
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	817b      	strh	r3, [r7, #10]
 8007c2e:	460b      	mov	r3, r1
 8007c30:	813b      	strh	r3, [r7, #8]
 8007c32:	4613      	mov	r3, r2
 8007c34:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007c36:	f7fe fe79 	bl	800692c <HAL_GetTick>
 8007c3a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c42:	b2db      	uxtb	r3, r3
 8007c44:	2b20      	cmp	r3, #32
 8007c46:	f040 8208 	bne.w	800805a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c4c:	9300      	str	r3, [sp, #0]
 8007c4e:	2319      	movs	r3, #25
 8007c50:	2201      	movs	r2, #1
 8007c52:	497b      	ldr	r1, [pc, #492]	; (8007e40 <HAL_I2C_Mem_Read+0x224>)
 8007c54:	68f8      	ldr	r0, [r7, #12]
 8007c56:	f002 f813 	bl	8009c80 <I2C_WaitOnFlagUntilTimeout>
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d001      	beq.n	8007c64 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8007c60:	2302      	movs	r3, #2
 8007c62:	e1fb      	b.n	800805c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c6a:	2b01      	cmp	r3, #1
 8007c6c:	d101      	bne.n	8007c72 <HAL_I2C_Mem_Read+0x56>
 8007c6e:	2302      	movs	r3, #2
 8007c70:	e1f4      	b.n	800805c <HAL_I2C_Mem_Read+0x440>
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	2201      	movs	r2, #1
 8007c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f003 0301 	and.w	r3, r3, #1
 8007c84:	2b01      	cmp	r3, #1
 8007c86:	d007      	beq.n	8007c98 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	681a      	ldr	r2, [r3, #0]
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f042 0201 	orr.w	r2, r2, #1
 8007c96:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	681a      	ldr	r2, [r3, #0]
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007ca6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	2222      	movs	r2, #34	; 0x22
 8007cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	2240      	movs	r2, #64	; 0x40
 8007cb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cc2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007cc8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cce:	b29a      	uxth	r2, r3
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	4a5b      	ldr	r2, [pc, #364]	; (8007e44 <HAL_I2C_Mem_Read+0x228>)
 8007cd8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007cda:	88f8      	ldrh	r0, [r7, #6]
 8007cdc:	893a      	ldrh	r2, [r7, #8]
 8007cde:	8979      	ldrh	r1, [r7, #10]
 8007ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ce2:	9301      	str	r3, [sp, #4]
 8007ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ce6:	9300      	str	r3, [sp, #0]
 8007ce8:	4603      	mov	r3, r0
 8007cea:	68f8      	ldr	r0, [r7, #12]
 8007cec:	f001 fe38 	bl	8009960 <I2C_RequestMemoryRead>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d001      	beq.n	8007cfa <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	e1b0      	b.n	800805c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d113      	bne.n	8007d2a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007d02:	2300      	movs	r3, #0
 8007d04:	623b      	str	r3, [r7, #32]
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	695b      	ldr	r3, [r3, #20]
 8007d0c:	623b      	str	r3, [r7, #32]
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	699b      	ldr	r3, [r3, #24]
 8007d14:	623b      	str	r3, [r7, #32]
 8007d16:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	681a      	ldr	r2, [r3, #0]
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d26:	601a      	str	r2, [r3, #0]
 8007d28:	e184      	b.n	8008034 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d2e:	2b01      	cmp	r3, #1
 8007d30:	d11b      	bne.n	8007d6a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	681a      	ldr	r2, [r3, #0]
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d40:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007d42:	2300      	movs	r3, #0
 8007d44:	61fb      	str	r3, [r7, #28]
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	695b      	ldr	r3, [r3, #20]
 8007d4c:	61fb      	str	r3, [r7, #28]
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	699b      	ldr	r3, [r3, #24]
 8007d54:	61fb      	str	r3, [r7, #28]
 8007d56:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	681a      	ldr	r2, [r3, #0]
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d66:	601a      	str	r2, [r3, #0]
 8007d68:	e164      	b.n	8008034 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d6e:	2b02      	cmp	r3, #2
 8007d70:	d11b      	bne.n	8007daa <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	681a      	ldr	r2, [r3, #0]
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d80:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	681a      	ldr	r2, [r3, #0]
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007d90:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007d92:	2300      	movs	r3, #0
 8007d94:	61bb      	str	r3, [r7, #24]
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	695b      	ldr	r3, [r3, #20]
 8007d9c:	61bb      	str	r3, [r7, #24]
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	699b      	ldr	r3, [r3, #24]
 8007da4:	61bb      	str	r3, [r7, #24]
 8007da6:	69bb      	ldr	r3, [r7, #24]
 8007da8:	e144      	b.n	8008034 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007daa:	2300      	movs	r3, #0
 8007dac:	617b      	str	r3, [r7, #20]
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	695b      	ldr	r3, [r3, #20]
 8007db4:	617b      	str	r3, [r7, #20]
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	699b      	ldr	r3, [r3, #24]
 8007dbc:	617b      	str	r3, [r7, #20]
 8007dbe:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007dc0:	e138      	b.n	8008034 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007dc6:	2b03      	cmp	r3, #3
 8007dc8:	f200 80f1 	bhi.w	8007fae <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007dd0:	2b01      	cmp	r3, #1
 8007dd2:	d123      	bne.n	8007e1c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007dd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007dd6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007dd8:	68f8      	ldr	r0, [r7, #12]
 8007dda:	f002 f8db 	bl	8009f94 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007dde:	4603      	mov	r3, r0
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d001      	beq.n	8007de8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8007de4:	2301      	movs	r3, #1
 8007de6:	e139      	b.n	800805c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	691a      	ldr	r2, [r3, #16]
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007df2:	b2d2      	uxtb	r2, r2
 8007df4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dfa:	1c5a      	adds	r2, r3, #1
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e04:	3b01      	subs	r3, #1
 8007e06:	b29a      	uxth	r2, r3
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e10:	b29b      	uxth	r3, r3
 8007e12:	3b01      	subs	r3, #1
 8007e14:	b29a      	uxth	r2, r3
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007e1a:	e10b      	b.n	8008034 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e20:	2b02      	cmp	r3, #2
 8007e22:	d14e      	bne.n	8007ec2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e26:	9300      	str	r3, [sp, #0]
 8007e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	4906      	ldr	r1, [pc, #24]	; (8007e48 <HAL_I2C_Mem_Read+0x22c>)
 8007e2e:	68f8      	ldr	r0, [r7, #12]
 8007e30:	f001 ff26 	bl	8009c80 <I2C_WaitOnFlagUntilTimeout>
 8007e34:	4603      	mov	r3, r0
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d008      	beq.n	8007e4c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	e10e      	b.n	800805c <HAL_I2C_Mem_Read+0x440>
 8007e3e:	bf00      	nop
 8007e40:	00100002 	.word	0x00100002
 8007e44:	ffff0000 	.word	0xffff0000
 8007e48:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	681a      	ldr	r2, [r3, #0]
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e5a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	691a      	ldr	r2, [r3, #16]
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e66:	b2d2      	uxtb	r2, r2
 8007e68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e6e:	1c5a      	adds	r2, r3, #1
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e78:	3b01      	subs	r3, #1
 8007e7a:	b29a      	uxth	r2, r3
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e84:	b29b      	uxth	r3, r3
 8007e86:	3b01      	subs	r3, #1
 8007e88:	b29a      	uxth	r2, r3
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	691a      	ldr	r2, [r3, #16]
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e98:	b2d2      	uxtb	r2, r2
 8007e9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ea0:	1c5a      	adds	r2, r3, #1
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007eaa:	3b01      	subs	r3, #1
 8007eac:	b29a      	uxth	r2, r3
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007eb6:	b29b      	uxth	r3, r3
 8007eb8:	3b01      	subs	r3, #1
 8007eba:	b29a      	uxth	r2, r3
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007ec0:	e0b8      	b.n	8008034 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ec4:	9300      	str	r3, [sp, #0]
 8007ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ec8:	2200      	movs	r2, #0
 8007eca:	4966      	ldr	r1, [pc, #408]	; (8008064 <HAL_I2C_Mem_Read+0x448>)
 8007ecc:	68f8      	ldr	r0, [r7, #12]
 8007ece:	f001 fed7 	bl	8009c80 <I2C_WaitOnFlagUntilTimeout>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d001      	beq.n	8007edc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8007ed8:	2301      	movs	r3, #1
 8007eda:	e0bf      	b.n	800805c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	681a      	ldr	r2, [r3, #0]
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007eea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	691a      	ldr	r2, [r3, #16]
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ef6:	b2d2      	uxtb	r2, r2
 8007ef8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007efe:	1c5a      	adds	r2, r3, #1
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f08:	3b01      	subs	r3, #1
 8007f0a:	b29a      	uxth	r2, r3
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f14:	b29b      	uxth	r3, r3
 8007f16:	3b01      	subs	r3, #1
 8007f18:	b29a      	uxth	r2, r3
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f20:	9300      	str	r3, [sp, #0]
 8007f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f24:	2200      	movs	r2, #0
 8007f26:	494f      	ldr	r1, [pc, #316]	; (8008064 <HAL_I2C_Mem_Read+0x448>)
 8007f28:	68f8      	ldr	r0, [r7, #12]
 8007f2a:	f001 fea9 	bl	8009c80 <I2C_WaitOnFlagUntilTimeout>
 8007f2e:	4603      	mov	r3, r0
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d001      	beq.n	8007f38 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8007f34:	2301      	movs	r3, #1
 8007f36:	e091      	b.n	800805c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	681a      	ldr	r2, [r3, #0]
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f46:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	691a      	ldr	r2, [r3, #16]
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f52:	b2d2      	uxtb	r2, r2
 8007f54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f5a:	1c5a      	adds	r2, r3, #1
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f64:	3b01      	subs	r3, #1
 8007f66:	b29a      	uxth	r2, r3
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f70:	b29b      	uxth	r3, r3
 8007f72:	3b01      	subs	r3, #1
 8007f74:	b29a      	uxth	r2, r3
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	691a      	ldr	r2, [r3, #16]
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f84:	b2d2      	uxtb	r2, r2
 8007f86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f8c:	1c5a      	adds	r2, r3, #1
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f96:	3b01      	subs	r3, #1
 8007f98:	b29a      	uxth	r2, r3
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fa2:	b29b      	uxth	r3, r3
 8007fa4:	3b01      	subs	r3, #1
 8007fa6:	b29a      	uxth	r2, r3
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007fac:	e042      	b.n	8008034 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007fae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fb0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007fb2:	68f8      	ldr	r0, [r7, #12]
 8007fb4:	f001 ffee 	bl	8009f94 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d001      	beq.n	8007fc2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8007fbe:	2301      	movs	r3, #1
 8007fc0:	e04c      	b.n	800805c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	691a      	ldr	r2, [r3, #16]
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fcc:	b2d2      	uxtb	r2, r2
 8007fce:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fd4:	1c5a      	adds	r2, r3, #1
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fde:	3b01      	subs	r3, #1
 8007fe0:	b29a      	uxth	r2, r3
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fea:	b29b      	uxth	r3, r3
 8007fec:	3b01      	subs	r3, #1
 8007fee:	b29a      	uxth	r2, r3
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	695b      	ldr	r3, [r3, #20]
 8007ffa:	f003 0304 	and.w	r3, r3, #4
 8007ffe:	2b04      	cmp	r3, #4
 8008000:	d118      	bne.n	8008034 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	691a      	ldr	r2, [r3, #16]
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800800c:	b2d2      	uxtb	r2, r2
 800800e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008014:	1c5a      	adds	r2, r3, #1
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800801e:	3b01      	subs	r3, #1
 8008020:	b29a      	uxth	r2, r3
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800802a:	b29b      	uxth	r3, r3
 800802c:	3b01      	subs	r3, #1
 800802e:	b29a      	uxth	r2, r3
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008038:	2b00      	cmp	r3, #0
 800803a:	f47f aec2 	bne.w	8007dc2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	2220      	movs	r2, #32
 8008042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	2200      	movs	r2, #0
 800804a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	2200      	movs	r2, #0
 8008052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008056:	2300      	movs	r3, #0
 8008058:	e000      	b.n	800805c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800805a:	2302      	movs	r3, #2
  }
}
 800805c:	4618      	mov	r0, r3
 800805e:	3728      	adds	r7, #40	; 0x28
 8008060:	46bd      	mov	sp, r7
 8008062:	bd80      	pop	{r7, pc}
 8008064:	00010004 	.word	0x00010004

08008068 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b088      	sub	sp, #32
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8008070:	2300      	movs	r3, #0
 8008072:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	685b      	ldr	r3, [r3, #4]
 800807a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008080:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008088:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008090:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8008092:	7bfb      	ldrb	r3, [r7, #15]
 8008094:	2b10      	cmp	r3, #16
 8008096:	d003      	beq.n	80080a0 <HAL_I2C_EV_IRQHandler+0x38>
 8008098:	7bfb      	ldrb	r3, [r7, #15]
 800809a:	2b40      	cmp	r3, #64	; 0x40
 800809c:	f040 80c1 	bne.w	8008222 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	699b      	ldr	r3, [r3, #24]
 80080a6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	695b      	ldr	r3, [r3, #20]
 80080ae:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80080b0:	69fb      	ldr	r3, [r7, #28]
 80080b2:	f003 0301 	and.w	r3, r3, #1
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d10d      	bne.n	80080d6 <HAL_I2C_EV_IRQHandler+0x6e>
 80080ba:	693b      	ldr	r3, [r7, #16]
 80080bc:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80080c0:	d003      	beq.n	80080ca <HAL_I2C_EV_IRQHandler+0x62>
 80080c2:	693b      	ldr	r3, [r7, #16]
 80080c4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80080c8:	d101      	bne.n	80080ce <HAL_I2C_EV_IRQHandler+0x66>
 80080ca:	2301      	movs	r3, #1
 80080cc:	e000      	b.n	80080d0 <HAL_I2C_EV_IRQHandler+0x68>
 80080ce:	2300      	movs	r3, #0
 80080d0:	2b01      	cmp	r3, #1
 80080d2:	f000 8132 	beq.w	800833a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80080d6:	69fb      	ldr	r3, [r7, #28]
 80080d8:	f003 0301 	and.w	r3, r3, #1
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d00c      	beq.n	80080fa <HAL_I2C_EV_IRQHandler+0x92>
 80080e0:	697b      	ldr	r3, [r7, #20]
 80080e2:	0a5b      	lsrs	r3, r3, #9
 80080e4:	f003 0301 	and.w	r3, r3, #1
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d006      	beq.n	80080fa <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	f001 ffd6 	bl	800a09e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f000 fd83 	bl	8008bfe <I2C_Master_SB>
 80080f8:	e092      	b.n	8008220 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80080fa:	69fb      	ldr	r3, [r7, #28]
 80080fc:	08db      	lsrs	r3, r3, #3
 80080fe:	f003 0301 	and.w	r3, r3, #1
 8008102:	2b00      	cmp	r3, #0
 8008104:	d009      	beq.n	800811a <HAL_I2C_EV_IRQHandler+0xb2>
 8008106:	697b      	ldr	r3, [r7, #20]
 8008108:	0a5b      	lsrs	r3, r3, #9
 800810a:	f003 0301 	and.w	r3, r3, #1
 800810e:	2b00      	cmp	r3, #0
 8008110:	d003      	beq.n	800811a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f000 fdf9 	bl	8008d0a <I2C_Master_ADD10>
 8008118:	e082      	b.n	8008220 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800811a:	69fb      	ldr	r3, [r7, #28]
 800811c:	085b      	lsrs	r3, r3, #1
 800811e:	f003 0301 	and.w	r3, r3, #1
 8008122:	2b00      	cmp	r3, #0
 8008124:	d009      	beq.n	800813a <HAL_I2C_EV_IRQHandler+0xd2>
 8008126:	697b      	ldr	r3, [r7, #20]
 8008128:	0a5b      	lsrs	r3, r3, #9
 800812a:	f003 0301 	and.w	r3, r3, #1
 800812e:	2b00      	cmp	r3, #0
 8008130:	d003      	beq.n	800813a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f000 fe13 	bl	8008d5e <I2C_Master_ADDR>
 8008138:	e072      	b.n	8008220 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800813a:	69bb      	ldr	r3, [r7, #24]
 800813c:	089b      	lsrs	r3, r3, #2
 800813e:	f003 0301 	and.w	r3, r3, #1
 8008142:	2b00      	cmp	r3, #0
 8008144:	d03b      	beq.n	80081be <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	685b      	ldr	r3, [r3, #4]
 800814c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008150:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008154:	f000 80f3 	beq.w	800833e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008158:	69fb      	ldr	r3, [r7, #28]
 800815a:	09db      	lsrs	r3, r3, #7
 800815c:	f003 0301 	and.w	r3, r3, #1
 8008160:	2b00      	cmp	r3, #0
 8008162:	d00f      	beq.n	8008184 <HAL_I2C_EV_IRQHandler+0x11c>
 8008164:	697b      	ldr	r3, [r7, #20]
 8008166:	0a9b      	lsrs	r3, r3, #10
 8008168:	f003 0301 	and.w	r3, r3, #1
 800816c:	2b00      	cmp	r3, #0
 800816e:	d009      	beq.n	8008184 <HAL_I2C_EV_IRQHandler+0x11c>
 8008170:	69fb      	ldr	r3, [r7, #28]
 8008172:	089b      	lsrs	r3, r3, #2
 8008174:	f003 0301 	and.w	r3, r3, #1
 8008178:	2b00      	cmp	r3, #0
 800817a:	d103      	bne.n	8008184 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800817c:	6878      	ldr	r0, [r7, #4]
 800817e:	f000 f9f3 	bl	8008568 <I2C_MasterTransmit_TXE>
 8008182:	e04d      	b.n	8008220 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008184:	69fb      	ldr	r3, [r7, #28]
 8008186:	089b      	lsrs	r3, r3, #2
 8008188:	f003 0301 	and.w	r3, r3, #1
 800818c:	2b00      	cmp	r3, #0
 800818e:	f000 80d6 	beq.w	800833e <HAL_I2C_EV_IRQHandler+0x2d6>
 8008192:	697b      	ldr	r3, [r7, #20]
 8008194:	0a5b      	lsrs	r3, r3, #9
 8008196:	f003 0301 	and.w	r3, r3, #1
 800819a:	2b00      	cmp	r3, #0
 800819c:	f000 80cf 	beq.w	800833e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80081a0:	7bbb      	ldrb	r3, [r7, #14]
 80081a2:	2b21      	cmp	r3, #33	; 0x21
 80081a4:	d103      	bne.n	80081ae <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f000 fa7a 	bl	80086a0 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80081ac:	e0c7      	b.n	800833e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80081ae:	7bfb      	ldrb	r3, [r7, #15]
 80081b0:	2b40      	cmp	r3, #64	; 0x40
 80081b2:	f040 80c4 	bne.w	800833e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f000 fae8 	bl	800878c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80081bc:	e0bf      	b.n	800833e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	685b      	ldr	r3, [r3, #4]
 80081c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80081c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80081cc:	f000 80b7 	beq.w	800833e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80081d0:	69fb      	ldr	r3, [r7, #28]
 80081d2:	099b      	lsrs	r3, r3, #6
 80081d4:	f003 0301 	and.w	r3, r3, #1
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d00f      	beq.n	80081fc <HAL_I2C_EV_IRQHandler+0x194>
 80081dc:	697b      	ldr	r3, [r7, #20]
 80081de:	0a9b      	lsrs	r3, r3, #10
 80081e0:	f003 0301 	and.w	r3, r3, #1
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d009      	beq.n	80081fc <HAL_I2C_EV_IRQHandler+0x194>
 80081e8:	69fb      	ldr	r3, [r7, #28]
 80081ea:	089b      	lsrs	r3, r3, #2
 80081ec:	f003 0301 	and.w	r3, r3, #1
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d103      	bne.n	80081fc <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f000 fb5d 	bl	80088b4 <I2C_MasterReceive_RXNE>
 80081fa:	e011      	b.n	8008220 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80081fc:	69fb      	ldr	r3, [r7, #28]
 80081fe:	089b      	lsrs	r3, r3, #2
 8008200:	f003 0301 	and.w	r3, r3, #1
 8008204:	2b00      	cmp	r3, #0
 8008206:	f000 809a 	beq.w	800833e <HAL_I2C_EV_IRQHandler+0x2d6>
 800820a:	697b      	ldr	r3, [r7, #20]
 800820c:	0a5b      	lsrs	r3, r3, #9
 800820e:	f003 0301 	and.w	r3, r3, #1
 8008212:	2b00      	cmp	r3, #0
 8008214:	f000 8093 	beq.w	800833e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f000 fc06 	bl	8008a2a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800821e:	e08e      	b.n	800833e <HAL_I2C_EV_IRQHandler+0x2d6>
 8008220:	e08d      	b.n	800833e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008226:	2b00      	cmp	r3, #0
 8008228:	d004      	beq.n	8008234 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	695b      	ldr	r3, [r3, #20]
 8008230:	61fb      	str	r3, [r7, #28]
 8008232:	e007      	b.n	8008244 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	699b      	ldr	r3, [r3, #24]
 800823a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	695b      	ldr	r3, [r3, #20]
 8008242:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008244:	69fb      	ldr	r3, [r7, #28]
 8008246:	085b      	lsrs	r3, r3, #1
 8008248:	f003 0301 	and.w	r3, r3, #1
 800824c:	2b00      	cmp	r3, #0
 800824e:	d012      	beq.n	8008276 <HAL_I2C_EV_IRQHandler+0x20e>
 8008250:	697b      	ldr	r3, [r7, #20]
 8008252:	0a5b      	lsrs	r3, r3, #9
 8008254:	f003 0301 	and.w	r3, r3, #1
 8008258:	2b00      	cmp	r3, #0
 800825a:	d00c      	beq.n	8008276 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008260:	2b00      	cmp	r3, #0
 8008262:	d003      	beq.n	800826c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	699b      	ldr	r3, [r3, #24]
 800826a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800826c:	69b9      	ldr	r1, [r7, #24]
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f000 ffc4 	bl	80091fc <I2C_Slave_ADDR>
 8008274:	e066      	b.n	8008344 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008276:	69fb      	ldr	r3, [r7, #28]
 8008278:	091b      	lsrs	r3, r3, #4
 800827a:	f003 0301 	and.w	r3, r3, #1
 800827e:	2b00      	cmp	r3, #0
 8008280:	d009      	beq.n	8008296 <HAL_I2C_EV_IRQHandler+0x22e>
 8008282:	697b      	ldr	r3, [r7, #20]
 8008284:	0a5b      	lsrs	r3, r3, #9
 8008286:	f003 0301 	and.w	r3, r3, #1
 800828a:	2b00      	cmp	r3, #0
 800828c:	d003      	beq.n	8008296 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f000 fffe 	bl	8009290 <I2C_Slave_STOPF>
 8008294:	e056      	b.n	8008344 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008296:	7bbb      	ldrb	r3, [r7, #14]
 8008298:	2b21      	cmp	r3, #33	; 0x21
 800829a:	d002      	beq.n	80082a2 <HAL_I2C_EV_IRQHandler+0x23a>
 800829c:	7bbb      	ldrb	r3, [r7, #14]
 800829e:	2b29      	cmp	r3, #41	; 0x29
 80082a0:	d125      	bne.n	80082ee <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80082a2:	69fb      	ldr	r3, [r7, #28]
 80082a4:	09db      	lsrs	r3, r3, #7
 80082a6:	f003 0301 	and.w	r3, r3, #1
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d00f      	beq.n	80082ce <HAL_I2C_EV_IRQHandler+0x266>
 80082ae:	697b      	ldr	r3, [r7, #20]
 80082b0:	0a9b      	lsrs	r3, r3, #10
 80082b2:	f003 0301 	and.w	r3, r3, #1
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d009      	beq.n	80082ce <HAL_I2C_EV_IRQHandler+0x266>
 80082ba:	69fb      	ldr	r3, [r7, #28]
 80082bc:	089b      	lsrs	r3, r3, #2
 80082be:	f003 0301 	and.w	r3, r3, #1
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d103      	bne.n	80082ce <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	f000 feda 	bl	8009080 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80082cc:	e039      	b.n	8008342 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80082ce:	69fb      	ldr	r3, [r7, #28]
 80082d0:	089b      	lsrs	r3, r3, #2
 80082d2:	f003 0301 	and.w	r3, r3, #1
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d033      	beq.n	8008342 <HAL_I2C_EV_IRQHandler+0x2da>
 80082da:	697b      	ldr	r3, [r7, #20]
 80082dc:	0a5b      	lsrs	r3, r3, #9
 80082de:	f003 0301 	and.w	r3, r3, #1
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d02d      	beq.n	8008342 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f000 ff07 	bl	80090fa <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80082ec:	e029      	b.n	8008342 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80082ee:	69fb      	ldr	r3, [r7, #28]
 80082f0:	099b      	lsrs	r3, r3, #6
 80082f2:	f003 0301 	and.w	r3, r3, #1
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d00f      	beq.n	800831a <HAL_I2C_EV_IRQHandler+0x2b2>
 80082fa:	697b      	ldr	r3, [r7, #20]
 80082fc:	0a9b      	lsrs	r3, r3, #10
 80082fe:	f003 0301 	and.w	r3, r3, #1
 8008302:	2b00      	cmp	r3, #0
 8008304:	d009      	beq.n	800831a <HAL_I2C_EV_IRQHandler+0x2b2>
 8008306:	69fb      	ldr	r3, [r7, #28]
 8008308:	089b      	lsrs	r3, r3, #2
 800830a:	f003 0301 	and.w	r3, r3, #1
 800830e:	2b00      	cmp	r3, #0
 8008310:	d103      	bne.n	800831a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	f000 ff12 	bl	800913c <I2C_SlaveReceive_RXNE>
 8008318:	e014      	b.n	8008344 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800831a:	69fb      	ldr	r3, [r7, #28]
 800831c:	089b      	lsrs	r3, r3, #2
 800831e:	f003 0301 	and.w	r3, r3, #1
 8008322:	2b00      	cmp	r3, #0
 8008324:	d00e      	beq.n	8008344 <HAL_I2C_EV_IRQHandler+0x2dc>
 8008326:	697b      	ldr	r3, [r7, #20]
 8008328:	0a5b      	lsrs	r3, r3, #9
 800832a:	f003 0301 	and.w	r3, r3, #1
 800832e:	2b00      	cmp	r3, #0
 8008330:	d008      	beq.n	8008344 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f000 ff40 	bl	80091b8 <I2C_SlaveReceive_BTF>
 8008338:	e004      	b.n	8008344 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800833a:	bf00      	nop
 800833c:	e002      	b.n	8008344 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800833e:	bf00      	nop
 8008340:	e000      	b.n	8008344 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008342:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8008344:	3720      	adds	r7, #32
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}

0800834a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800834a:	b580      	push	{r7, lr}
 800834c:	b08a      	sub	sp, #40	; 0x28
 800834e:	af00      	add	r7, sp, #0
 8008350:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	695b      	ldr	r3, [r3, #20]
 8008358:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	685b      	ldr	r3, [r3, #4]
 8008360:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8008362:	2300      	movs	r3, #0
 8008364:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800836c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800836e:	6a3b      	ldr	r3, [r7, #32]
 8008370:	0a1b      	lsrs	r3, r3, #8
 8008372:	f003 0301 	and.w	r3, r3, #1
 8008376:	2b00      	cmp	r3, #0
 8008378:	d00e      	beq.n	8008398 <HAL_I2C_ER_IRQHandler+0x4e>
 800837a:	69fb      	ldr	r3, [r7, #28]
 800837c:	0a1b      	lsrs	r3, r3, #8
 800837e:	f003 0301 	and.w	r3, r3, #1
 8008382:	2b00      	cmp	r3, #0
 8008384:	d008      	beq.n	8008398 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8008386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008388:	f043 0301 	orr.w	r3, r3, #1
 800838c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008396:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8008398:	6a3b      	ldr	r3, [r7, #32]
 800839a:	0a5b      	lsrs	r3, r3, #9
 800839c:	f003 0301 	and.w	r3, r3, #1
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d00e      	beq.n	80083c2 <HAL_I2C_ER_IRQHandler+0x78>
 80083a4:	69fb      	ldr	r3, [r7, #28]
 80083a6:	0a1b      	lsrs	r3, r3, #8
 80083a8:	f003 0301 	and.w	r3, r3, #1
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d008      	beq.n	80083c2 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80083b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083b2:	f043 0302 	orr.w	r3, r3, #2
 80083b6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80083c0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80083c2:	6a3b      	ldr	r3, [r7, #32]
 80083c4:	0a9b      	lsrs	r3, r3, #10
 80083c6:	f003 0301 	and.w	r3, r3, #1
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d03f      	beq.n	800844e <HAL_I2C_ER_IRQHandler+0x104>
 80083ce:	69fb      	ldr	r3, [r7, #28]
 80083d0:	0a1b      	lsrs	r3, r3, #8
 80083d2:	f003 0301 	and.w	r3, r3, #1
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d039      	beq.n	800844e <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80083da:	7efb      	ldrb	r3, [r7, #27]
 80083dc:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083e2:	b29b      	uxth	r3, r3
 80083e4:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083ec:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083f2:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80083f4:	7ebb      	ldrb	r3, [r7, #26]
 80083f6:	2b20      	cmp	r3, #32
 80083f8:	d112      	bne.n	8008420 <HAL_I2C_ER_IRQHandler+0xd6>
 80083fa:	697b      	ldr	r3, [r7, #20]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d10f      	bne.n	8008420 <HAL_I2C_ER_IRQHandler+0xd6>
 8008400:	7cfb      	ldrb	r3, [r7, #19]
 8008402:	2b21      	cmp	r3, #33	; 0x21
 8008404:	d008      	beq.n	8008418 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8008406:	7cfb      	ldrb	r3, [r7, #19]
 8008408:	2b29      	cmp	r3, #41	; 0x29
 800840a:	d005      	beq.n	8008418 <HAL_I2C_ER_IRQHandler+0xce>
 800840c:	7cfb      	ldrb	r3, [r7, #19]
 800840e:	2b28      	cmp	r3, #40	; 0x28
 8008410:	d106      	bne.n	8008420 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	2b21      	cmp	r3, #33	; 0x21
 8008416:	d103      	bne.n	8008420 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f001 f869 	bl	80094f0 <I2C_Slave_AF>
 800841e:	e016      	b.n	800844e <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008428:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800842a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800842c:	f043 0304 	orr.w	r3, r3, #4
 8008430:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8008432:	7efb      	ldrb	r3, [r7, #27]
 8008434:	2b10      	cmp	r3, #16
 8008436:	d002      	beq.n	800843e <HAL_I2C_ER_IRQHandler+0xf4>
 8008438:	7efb      	ldrb	r3, [r7, #27]
 800843a:	2b40      	cmp	r3, #64	; 0x40
 800843c:	d107      	bne.n	800844e <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	681a      	ldr	r2, [r3, #0]
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800844c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800844e:	6a3b      	ldr	r3, [r7, #32]
 8008450:	0adb      	lsrs	r3, r3, #11
 8008452:	f003 0301 	and.w	r3, r3, #1
 8008456:	2b00      	cmp	r3, #0
 8008458:	d00e      	beq.n	8008478 <HAL_I2C_ER_IRQHandler+0x12e>
 800845a:	69fb      	ldr	r3, [r7, #28]
 800845c:	0a1b      	lsrs	r3, r3, #8
 800845e:	f003 0301 	and.w	r3, r3, #1
 8008462:	2b00      	cmp	r3, #0
 8008464:	d008      	beq.n	8008478 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8008466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008468:	f043 0308 	orr.w	r3, r3, #8
 800846c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8008476:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8008478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800847a:	2b00      	cmp	r3, #0
 800847c:	d008      	beq.n	8008490 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008484:	431a      	orrs	r2, r3
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	f001 f8a0 	bl	80095d0 <I2C_ITError>
  }
}
 8008490:	bf00      	nop
 8008492:	3728      	adds	r7, #40	; 0x28
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}

08008498 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008498:	b480      	push	{r7}
 800849a:	b083      	sub	sp, #12
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80084a0:	bf00      	nop
 80084a2:	370c      	adds	r7, #12
 80084a4:	46bd      	mov	sp, r7
 80084a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084aa:	4770      	bx	lr

080084ac <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80084ac:	b480      	push	{r7}
 80084ae:	b083      	sub	sp, #12
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80084b4:	bf00      	nop
 80084b6:	370c      	adds	r7, #12
 80084b8:	46bd      	mov	sp, r7
 80084ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084be:	4770      	bx	lr

080084c0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80084c0:	b480      	push	{r7}
 80084c2:	b083      	sub	sp, #12
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80084c8:	bf00      	nop
 80084ca:	370c      	adds	r7, #12
 80084cc:	46bd      	mov	sp, r7
 80084ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d2:	4770      	bx	lr

080084d4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80084d4:	b480      	push	{r7}
 80084d6:	b083      	sub	sp, #12
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80084dc:	bf00      	nop
 80084de:	370c      	adds	r7, #12
 80084e0:	46bd      	mov	sp, r7
 80084e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e6:	4770      	bx	lr

080084e8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80084e8:	b480      	push	{r7}
 80084ea:	b083      	sub	sp, #12
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
 80084f0:	460b      	mov	r3, r1
 80084f2:	70fb      	strb	r3, [r7, #3]
 80084f4:	4613      	mov	r3, r2
 80084f6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80084f8:	bf00      	nop
 80084fa:	370c      	adds	r7, #12
 80084fc:	46bd      	mov	sp, r7
 80084fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008502:	4770      	bx	lr

08008504 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008504:	b480      	push	{r7}
 8008506:	b083      	sub	sp, #12
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800850c:	bf00      	nop
 800850e:	370c      	adds	r7, #12
 8008510:	46bd      	mov	sp, r7
 8008512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008516:	4770      	bx	lr

08008518 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008518:	b480      	push	{r7}
 800851a:	b083      	sub	sp, #12
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8008520:	bf00      	nop
 8008522:	370c      	adds	r7, #12
 8008524:	46bd      	mov	sp, r7
 8008526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852a:	4770      	bx	lr

0800852c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800852c:	b480      	push	{r7}
 800852e:	b083      	sub	sp, #12
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8008534:	bf00      	nop
 8008536:	370c      	adds	r7, #12
 8008538:	46bd      	mov	sp, r7
 800853a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853e:	4770      	bx	lr

08008540 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8008540:	b480      	push	{r7}
 8008542:	b083      	sub	sp, #12
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8008548:	bf00      	nop
 800854a:	370c      	adds	r7, #12
 800854c:	46bd      	mov	sp, r7
 800854e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008552:	4770      	bx	lr

08008554 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008554:	b480      	push	{r7}
 8008556:	b083      	sub	sp, #12
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800855c:	bf00      	nop
 800855e:	370c      	adds	r7, #12
 8008560:	46bd      	mov	sp, r7
 8008562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008566:	4770      	bx	lr

08008568 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b084      	sub	sp, #16
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008576:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800857e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008584:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800858a:	2b00      	cmp	r3, #0
 800858c:	d150      	bne.n	8008630 <I2C_MasterTransmit_TXE+0xc8>
 800858e:	7bfb      	ldrb	r3, [r7, #15]
 8008590:	2b21      	cmp	r3, #33	; 0x21
 8008592:	d14d      	bne.n	8008630 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	2b08      	cmp	r3, #8
 8008598:	d01d      	beq.n	80085d6 <I2C_MasterTransmit_TXE+0x6e>
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	2b20      	cmp	r3, #32
 800859e:	d01a      	beq.n	80085d6 <I2C_MasterTransmit_TXE+0x6e>
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80085a6:	d016      	beq.n	80085d6 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	685a      	ldr	r2, [r3, #4]
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80085b6:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2211      	movs	r2, #17
 80085bc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2200      	movs	r2, #0
 80085c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2220      	movs	r2, #32
 80085ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	f7ff ff62 	bl	8008498 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80085d4:	e060      	b.n	8008698 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	685a      	ldr	r2, [r3, #4]
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80085e4:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	681a      	ldr	r2, [r3, #0]
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80085f4:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2200      	movs	r2, #0
 80085fa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2220      	movs	r2, #32
 8008600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800860a:	b2db      	uxtb	r3, r3
 800860c:	2b40      	cmp	r3, #64	; 0x40
 800860e:	d107      	bne.n	8008620 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2200      	movs	r2, #0
 8008614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	f7ff ff7d 	bl	8008518 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800861e:	e03b      	b.n	8008698 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2200      	movs	r2, #0
 8008624:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f7ff ff35 	bl	8008498 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800862e:	e033      	b.n	8008698 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8008630:	7bfb      	ldrb	r3, [r7, #15]
 8008632:	2b21      	cmp	r3, #33	; 0x21
 8008634:	d005      	beq.n	8008642 <I2C_MasterTransmit_TXE+0xda>
 8008636:	7bbb      	ldrb	r3, [r7, #14]
 8008638:	2b40      	cmp	r3, #64	; 0x40
 800863a:	d12d      	bne.n	8008698 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800863c:	7bfb      	ldrb	r3, [r7, #15]
 800863e:	2b22      	cmp	r3, #34	; 0x22
 8008640:	d12a      	bne.n	8008698 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008646:	b29b      	uxth	r3, r3
 8008648:	2b00      	cmp	r3, #0
 800864a:	d108      	bne.n	800865e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	685a      	ldr	r2, [r3, #4]
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800865a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800865c:	e01c      	b.n	8008698 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008664:	b2db      	uxtb	r3, r3
 8008666:	2b40      	cmp	r3, #64	; 0x40
 8008668:	d103      	bne.n	8008672 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f000 f88e 	bl	800878c <I2C_MemoryTransmit_TXE_BTF>
}
 8008670:	e012      	b.n	8008698 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008676:	781a      	ldrb	r2, [r3, #0]
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008682:	1c5a      	adds	r2, r3, #1
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800868c:	b29b      	uxth	r3, r3
 800868e:	3b01      	subs	r3, #1
 8008690:	b29a      	uxth	r2, r3
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8008696:	e7ff      	b.n	8008698 <I2C_MasterTransmit_TXE+0x130>
 8008698:	bf00      	nop
 800869a:	3710      	adds	r7, #16
 800869c:	46bd      	mov	sp, r7
 800869e:	bd80      	pop	{r7, pc}

080086a0 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b084      	sub	sp, #16
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086ac:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086b4:	b2db      	uxtb	r3, r3
 80086b6:	2b21      	cmp	r3, #33	; 0x21
 80086b8:	d164      	bne.n	8008784 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086be:	b29b      	uxth	r3, r3
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d012      	beq.n	80086ea <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086c8:	781a      	ldrb	r2, [r3, #0]
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086d4:	1c5a      	adds	r2, r3, #1
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086de:	b29b      	uxth	r3, r3
 80086e0:	3b01      	subs	r3, #1
 80086e2:	b29a      	uxth	r2, r3
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80086e8:	e04c      	b.n	8008784 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	2b08      	cmp	r3, #8
 80086ee:	d01d      	beq.n	800872c <I2C_MasterTransmit_BTF+0x8c>
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	2b20      	cmp	r3, #32
 80086f4:	d01a      	beq.n	800872c <I2C_MasterTransmit_BTF+0x8c>
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80086fc:	d016      	beq.n	800872c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	685a      	ldr	r2, [r3, #4]
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800870c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	2211      	movs	r2, #17
 8008712:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2200      	movs	r2, #0
 8008718:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2220      	movs	r2, #32
 8008720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8008724:	6878      	ldr	r0, [r7, #4]
 8008726:	f7ff feb7 	bl	8008498 <HAL_I2C_MasterTxCpltCallback>
}
 800872a:	e02b      	b.n	8008784 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	685a      	ldr	r2, [r3, #4]
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800873a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	681a      	ldr	r2, [r3, #0]
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800874a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2200      	movs	r2, #0
 8008750:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2220      	movs	r2, #32
 8008756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008760:	b2db      	uxtb	r3, r3
 8008762:	2b40      	cmp	r3, #64	; 0x40
 8008764:	d107      	bne.n	8008776 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2200      	movs	r2, #0
 800876a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f7ff fed2 	bl	8008518 <HAL_I2C_MemTxCpltCallback>
}
 8008774:	e006      	b.n	8008784 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2200      	movs	r2, #0
 800877a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	f7ff fe8a 	bl	8008498 <HAL_I2C_MasterTxCpltCallback>
}
 8008784:	bf00      	nop
 8008786:	3710      	adds	r7, #16
 8008788:	46bd      	mov	sp, r7
 800878a:	bd80      	pop	{r7, pc}

0800878c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b084      	sub	sp, #16
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800879a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d11d      	bne.n	80087e0 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087a8:	2b01      	cmp	r3, #1
 80087aa:	d10b      	bne.n	80087c4 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80087b0:	b2da      	uxtb	r2, r3
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087bc:	1c9a      	adds	r2, r3, #2
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80087c2:	e073      	b.n	80088ac <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80087c8:	b29b      	uxth	r3, r3
 80087ca:	121b      	asrs	r3, r3, #8
 80087cc:	b2da      	uxtb	r2, r3
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087d8:	1c5a      	adds	r2, r3, #1
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	651a      	str	r2, [r3, #80]	; 0x50
}
 80087de:	e065      	b.n	80088ac <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087e4:	2b01      	cmp	r3, #1
 80087e6:	d10b      	bne.n	8008800 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80087ec:	b2da      	uxtb	r2, r3
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087f8:	1c5a      	adds	r2, r3, #1
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	651a      	str	r2, [r3, #80]	; 0x50
}
 80087fe:	e055      	b.n	80088ac <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008804:	2b02      	cmp	r3, #2
 8008806:	d151      	bne.n	80088ac <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8008808:	7bfb      	ldrb	r3, [r7, #15]
 800880a:	2b22      	cmp	r3, #34	; 0x22
 800880c:	d10d      	bne.n	800882a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	681a      	ldr	r2, [r3, #0]
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800881c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008822:	1c5a      	adds	r2, r3, #1
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	651a      	str	r2, [r3, #80]	; 0x50
}
 8008828:	e040      	b.n	80088ac <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800882e:	b29b      	uxth	r3, r3
 8008830:	2b00      	cmp	r3, #0
 8008832:	d015      	beq.n	8008860 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8008834:	7bfb      	ldrb	r3, [r7, #15]
 8008836:	2b21      	cmp	r3, #33	; 0x21
 8008838:	d112      	bne.n	8008860 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800883e:	781a      	ldrb	r2, [r3, #0]
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800884a:	1c5a      	adds	r2, r3, #1
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008854:	b29b      	uxth	r3, r3
 8008856:	3b01      	subs	r3, #1
 8008858:	b29a      	uxth	r2, r3
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800885e:	e025      	b.n	80088ac <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008864:	b29b      	uxth	r3, r3
 8008866:	2b00      	cmp	r3, #0
 8008868:	d120      	bne.n	80088ac <I2C_MemoryTransmit_TXE_BTF+0x120>
 800886a:	7bfb      	ldrb	r3, [r7, #15]
 800886c:	2b21      	cmp	r3, #33	; 0x21
 800886e:	d11d      	bne.n	80088ac <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	685a      	ldr	r2, [r3, #4]
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800887e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	681a      	ldr	r2, [r3, #0]
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800888e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2200      	movs	r2, #0
 8008894:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2220      	movs	r2, #32
 800889a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2200      	movs	r2, #0
 80088a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80088a6:	6878      	ldr	r0, [r7, #4]
 80088a8:	f7ff fe36 	bl	8008518 <HAL_I2C_MemTxCpltCallback>
}
 80088ac:	bf00      	nop
 80088ae:	3710      	adds	r7, #16
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bd80      	pop	{r7, pc}

080088b4 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b084      	sub	sp, #16
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088c2:	b2db      	uxtb	r3, r3
 80088c4:	2b22      	cmp	r3, #34	; 0x22
 80088c6:	f040 80ac 	bne.w	8008a22 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088ce:	b29b      	uxth	r3, r3
 80088d0:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	2b03      	cmp	r3, #3
 80088d6:	d921      	bls.n	800891c <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	691a      	ldr	r2, [r3, #16]
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088e2:	b2d2      	uxtb	r2, r2
 80088e4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ea:	1c5a      	adds	r2, r3, #1
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088f4:	b29b      	uxth	r3, r3
 80088f6:	3b01      	subs	r3, #1
 80088f8:	b29a      	uxth	r2, r3
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008902:	b29b      	uxth	r3, r3
 8008904:	2b03      	cmp	r3, #3
 8008906:	f040 808c 	bne.w	8008a22 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	685a      	ldr	r2, [r3, #4]
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008918:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800891a:	e082      	b.n	8008a22 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008920:	2b02      	cmp	r3, #2
 8008922:	d075      	beq.n	8008a10 <I2C_MasterReceive_RXNE+0x15c>
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	2b01      	cmp	r3, #1
 8008928:	d002      	beq.n	8008930 <I2C_MasterReceive_RXNE+0x7c>
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d16f      	bne.n	8008a10 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	f001 fafd 	bl	8009f30 <I2C_WaitOnSTOPRequestThroughIT>
 8008936:	4603      	mov	r3, r0
 8008938:	2b00      	cmp	r3, #0
 800893a:	d142      	bne.n	80089c2 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	681a      	ldr	r2, [r3, #0]
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800894a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	685a      	ldr	r2, [r3, #4]
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800895a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	691a      	ldr	r2, [r3, #16]
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008966:	b2d2      	uxtb	r2, r2
 8008968:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800896e:	1c5a      	adds	r2, r3, #1
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008978:	b29b      	uxth	r3, r3
 800897a:	3b01      	subs	r3, #1
 800897c:	b29a      	uxth	r2, r3
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2220      	movs	r2, #32
 8008986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008990:	b2db      	uxtb	r3, r3
 8008992:	2b40      	cmp	r3, #64	; 0x40
 8008994:	d10a      	bne.n	80089ac <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2200      	movs	r2, #0
 800899a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2200      	movs	r2, #0
 80089a2:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f7ff fdc1 	bl	800852c <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80089aa:	e03a      	b.n	8008a22 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2200      	movs	r2, #0
 80089b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2212      	movs	r2, #18
 80089b8:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	f7ff fd76 	bl	80084ac <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80089c0:	e02f      	b.n	8008a22 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	685a      	ldr	r2, [r3, #4]
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80089d0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	691a      	ldr	r2, [r3, #16]
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089dc:	b2d2      	uxtb	r2, r2
 80089de:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089e4:	1c5a      	adds	r2, r3, #1
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089ee:	b29b      	uxth	r3, r3
 80089f0:	3b01      	subs	r3, #1
 80089f2:	b29a      	uxth	r2, r3
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2220      	movs	r2, #32
 80089fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2200      	movs	r2, #0
 8008a04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	f7ff fd99 	bl	8008540 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8008a0e:	e008      	b.n	8008a22 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	685a      	ldr	r2, [r3, #4]
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a1e:	605a      	str	r2, [r3, #4]
}
 8008a20:	e7ff      	b.n	8008a22 <I2C_MasterReceive_RXNE+0x16e>
 8008a22:	bf00      	nop
 8008a24:	3710      	adds	r7, #16
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd80      	pop	{r7, pc}

08008a2a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8008a2a:	b580      	push	{r7, lr}
 8008a2c:	b084      	sub	sp, #16
 8008a2e:	af00      	add	r7, sp, #0
 8008a30:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a36:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a3c:	b29b      	uxth	r3, r3
 8008a3e:	2b04      	cmp	r3, #4
 8008a40:	d11b      	bne.n	8008a7a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	685a      	ldr	r2, [r3, #4]
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a50:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	691a      	ldr	r2, [r3, #16]
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a5c:	b2d2      	uxtb	r2, r2
 8008a5e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a64:	1c5a      	adds	r2, r3, #1
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a6e:	b29b      	uxth	r3, r3
 8008a70:	3b01      	subs	r3, #1
 8008a72:	b29a      	uxth	r2, r3
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8008a78:	e0bd      	b.n	8008bf6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a7e:	b29b      	uxth	r3, r3
 8008a80:	2b03      	cmp	r3, #3
 8008a82:	d129      	bne.n	8008ad8 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	685a      	ldr	r2, [r3, #4]
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a92:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	2b04      	cmp	r3, #4
 8008a98:	d00a      	beq.n	8008ab0 <I2C_MasterReceive_BTF+0x86>
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	2b02      	cmp	r3, #2
 8008a9e:	d007      	beq.n	8008ab0 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	681a      	ldr	r2, [r3, #0]
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008aae:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	691a      	ldr	r2, [r3, #16]
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aba:	b2d2      	uxtb	r2, r2
 8008abc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ac2:	1c5a      	adds	r2, r3, #1
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008acc:	b29b      	uxth	r3, r3
 8008ace:	3b01      	subs	r3, #1
 8008ad0:	b29a      	uxth	r2, r3
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8008ad6:	e08e      	b.n	8008bf6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008adc:	b29b      	uxth	r3, r3
 8008ade:	2b02      	cmp	r3, #2
 8008ae0:	d176      	bne.n	8008bd0 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	2b01      	cmp	r3, #1
 8008ae6:	d002      	beq.n	8008aee <I2C_MasterReceive_BTF+0xc4>
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	2b10      	cmp	r3, #16
 8008aec:	d108      	bne.n	8008b00 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	681a      	ldr	r2, [r3, #0]
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008afc:	601a      	str	r2, [r3, #0]
 8008afe:	e019      	b.n	8008b34 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	2b04      	cmp	r3, #4
 8008b04:	d002      	beq.n	8008b0c <I2C_MasterReceive_BTF+0xe2>
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	2b02      	cmp	r3, #2
 8008b0a:	d108      	bne.n	8008b1e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	681a      	ldr	r2, [r3, #0]
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008b1a:	601a      	str	r2, [r3, #0]
 8008b1c:	e00a      	b.n	8008b34 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	2b10      	cmp	r3, #16
 8008b22:	d007      	beq.n	8008b34 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	681a      	ldr	r2, [r3, #0]
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008b32:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	691a      	ldr	r2, [r3, #16]
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b3e:	b2d2      	uxtb	r2, r2
 8008b40:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b46:	1c5a      	adds	r2, r3, #1
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b50:	b29b      	uxth	r3, r3
 8008b52:	3b01      	subs	r3, #1
 8008b54:	b29a      	uxth	r2, r3
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	691a      	ldr	r2, [r3, #16]
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b64:	b2d2      	uxtb	r2, r2
 8008b66:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b6c:	1c5a      	adds	r2, r3, #1
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b76:	b29b      	uxth	r3, r3
 8008b78:	3b01      	subs	r3, #1
 8008b7a:	b29a      	uxth	r2, r3
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	685a      	ldr	r2, [r3, #4]
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8008b8e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2220      	movs	r2, #32
 8008b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008b9e:	b2db      	uxtb	r3, r3
 8008ba0:	2b40      	cmp	r3, #64	; 0x40
 8008ba2:	d10a      	bne.n	8008bba <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2200      	movs	r2, #0
 8008bb0:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f7ff fcba 	bl	800852c <HAL_I2C_MemRxCpltCallback>
}
 8008bb8:	e01d      	b.n	8008bf6 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2212      	movs	r2, #18
 8008bc6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8008bc8:	6878      	ldr	r0, [r7, #4]
 8008bca:	f7ff fc6f 	bl	80084ac <HAL_I2C_MasterRxCpltCallback>
}
 8008bce:	e012      	b.n	8008bf6 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	691a      	ldr	r2, [r3, #16]
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bda:	b2d2      	uxtb	r2, r2
 8008bdc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008be2:	1c5a      	adds	r2, r3, #1
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008bec:	b29b      	uxth	r3, r3
 8008bee:	3b01      	subs	r3, #1
 8008bf0:	b29a      	uxth	r2, r3
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8008bf6:	bf00      	nop
 8008bf8:	3710      	adds	r7, #16
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	bd80      	pop	{r7, pc}

08008bfe <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8008bfe:	b480      	push	{r7}
 8008c00:	b083      	sub	sp, #12
 8008c02:	af00      	add	r7, sp, #0
 8008c04:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008c0c:	b2db      	uxtb	r3, r3
 8008c0e:	2b40      	cmp	r3, #64	; 0x40
 8008c10:	d117      	bne.n	8008c42 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d109      	bne.n	8008c2e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c1e:	b2db      	uxtb	r3, r3
 8008c20:	461a      	mov	r2, r3
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008c2a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8008c2c:	e067      	b.n	8008cfe <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c32:	b2db      	uxtb	r3, r3
 8008c34:	f043 0301 	orr.w	r3, r3, #1
 8008c38:	b2da      	uxtb	r2, r3
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	611a      	str	r2, [r3, #16]
}
 8008c40:	e05d      	b.n	8008cfe <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	691b      	ldr	r3, [r3, #16]
 8008c46:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008c4a:	d133      	bne.n	8008cb4 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c52:	b2db      	uxtb	r3, r3
 8008c54:	2b21      	cmp	r3, #33	; 0x21
 8008c56:	d109      	bne.n	8008c6c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c5c:	b2db      	uxtb	r3, r3
 8008c5e:	461a      	mov	r2, r3
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008c68:	611a      	str	r2, [r3, #16]
 8008c6a:	e008      	b.n	8008c7e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c70:	b2db      	uxtb	r3, r3
 8008c72:	f043 0301 	orr.w	r3, r3, #1
 8008c76:	b2da      	uxtb	r2, r3
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d004      	beq.n	8008c90 <I2C_Master_SB+0x92>
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d108      	bne.n	8008ca2 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d032      	beq.n	8008cfe <I2C_Master_SB+0x100>
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d02d      	beq.n	8008cfe <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	685a      	ldr	r2, [r3, #4]
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008cb0:	605a      	str	r2, [r3, #4]
}
 8008cb2:	e024      	b.n	8008cfe <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d10e      	bne.n	8008cda <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cc0:	b29b      	uxth	r3, r3
 8008cc2:	11db      	asrs	r3, r3, #7
 8008cc4:	b2db      	uxtb	r3, r3
 8008cc6:	f003 0306 	and.w	r3, r3, #6
 8008cca:	b2db      	uxtb	r3, r3
 8008ccc:	f063 030f 	orn	r3, r3, #15
 8008cd0:	b2da      	uxtb	r2, r3
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	611a      	str	r2, [r3, #16]
}
 8008cd8:	e011      	b.n	8008cfe <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cde:	2b01      	cmp	r3, #1
 8008ce0:	d10d      	bne.n	8008cfe <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ce6:	b29b      	uxth	r3, r3
 8008ce8:	11db      	asrs	r3, r3, #7
 8008cea:	b2db      	uxtb	r3, r3
 8008cec:	f003 0306 	and.w	r3, r3, #6
 8008cf0:	b2db      	uxtb	r3, r3
 8008cf2:	f063 030e 	orn	r3, r3, #14
 8008cf6:	b2da      	uxtb	r2, r3
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	611a      	str	r2, [r3, #16]
}
 8008cfe:	bf00      	nop
 8008d00:	370c      	adds	r7, #12
 8008d02:	46bd      	mov	sp, r7
 8008d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d08:	4770      	bx	lr

08008d0a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8008d0a:	b480      	push	{r7}
 8008d0c:	b083      	sub	sp, #12
 8008d0e:	af00      	add	r7, sp, #0
 8008d10:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d16:	b2da      	uxtb	r2, r3
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d004      	beq.n	8008d30 <I2C_Master_ADD10+0x26>
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d108      	bne.n	8008d42 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d00c      	beq.n	8008d52 <I2C_Master_ADD10+0x48>
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d007      	beq.n	8008d52 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	685a      	ldr	r2, [r3, #4]
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008d50:	605a      	str	r2, [r3, #4]
  }
}
 8008d52:	bf00      	nop
 8008d54:	370c      	adds	r7, #12
 8008d56:	46bd      	mov	sp, r7
 8008d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5c:	4770      	bx	lr

08008d5e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8008d5e:	b480      	push	{r7}
 8008d60:	b091      	sub	sp, #68	; 0x44
 8008d62:	af00      	add	r7, sp, #0
 8008d64:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008d6c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d74:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d7a:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d82:	b2db      	uxtb	r3, r3
 8008d84:	2b22      	cmp	r3, #34	; 0x22
 8008d86:	f040 8169 	bne.w	800905c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d10f      	bne.n	8008db2 <I2C_Master_ADDR+0x54>
 8008d92:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008d96:	2b40      	cmp	r3, #64	; 0x40
 8008d98:	d10b      	bne.n	8008db2 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	633b      	str	r3, [r7, #48]	; 0x30
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	695b      	ldr	r3, [r3, #20]
 8008da4:	633b      	str	r3, [r7, #48]	; 0x30
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	699b      	ldr	r3, [r3, #24]
 8008dac:	633b      	str	r3, [r7, #48]	; 0x30
 8008dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008db0:	e160      	b.n	8009074 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d11d      	bne.n	8008df6 <I2C_Master_ADDR+0x98>
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	691b      	ldr	r3, [r3, #16]
 8008dbe:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008dc2:	d118      	bne.n	8008df6 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	695b      	ldr	r3, [r3, #20]
 8008dce:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	699b      	ldr	r3, [r3, #24]
 8008dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	681a      	ldr	r2, [r3, #0]
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008de8:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008dee:	1c5a      	adds	r2, r3, #1
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	651a      	str	r2, [r3, #80]	; 0x50
 8008df4:	e13e      	b.n	8009074 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008dfa:	b29b      	uxth	r3, r3
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d113      	bne.n	8008e28 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008e00:	2300      	movs	r3, #0
 8008e02:	62bb      	str	r3, [r7, #40]	; 0x28
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	695b      	ldr	r3, [r3, #20]
 8008e0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	699b      	ldr	r3, [r3, #24]
 8008e12:	62bb      	str	r3, [r7, #40]	; 0x28
 8008e14:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	681a      	ldr	r2, [r3, #0]
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008e24:	601a      	str	r2, [r3, #0]
 8008e26:	e115      	b.n	8009054 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e2c:	b29b      	uxth	r3, r3
 8008e2e:	2b01      	cmp	r3, #1
 8008e30:	f040 808a 	bne.w	8008f48 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8008e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e36:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008e3a:	d137      	bne.n	8008eac <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	681a      	ldr	r2, [r3, #0]
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008e4a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	685b      	ldr	r3, [r3, #4]
 8008e52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008e56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e5a:	d113      	bne.n	8008e84 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	681a      	ldr	r2, [r3, #0]
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008e6a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	627b      	str	r3, [r7, #36]	; 0x24
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	695b      	ldr	r3, [r3, #20]
 8008e76:	627b      	str	r3, [r7, #36]	; 0x24
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	699b      	ldr	r3, [r3, #24]
 8008e7e:	627b      	str	r3, [r7, #36]	; 0x24
 8008e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e82:	e0e7      	b.n	8009054 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008e84:	2300      	movs	r3, #0
 8008e86:	623b      	str	r3, [r7, #32]
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	695b      	ldr	r3, [r3, #20]
 8008e8e:	623b      	str	r3, [r7, #32]
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	699b      	ldr	r3, [r3, #24]
 8008e96:	623b      	str	r3, [r7, #32]
 8008e98:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	681a      	ldr	r2, [r3, #0]
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008ea8:	601a      	str	r2, [r3, #0]
 8008eaa:	e0d3      	b.n	8009054 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8008eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eae:	2b08      	cmp	r3, #8
 8008eb0:	d02e      	beq.n	8008f10 <I2C_Master_ADDR+0x1b2>
 8008eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eb4:	2b20      	cmp	r3, #32
 8008eb6:	d02b      	beq.n	8008f10 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8008eb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008eba:	2b12      	cmp	r3, #18
 8008ebc:	d102      	bne.n	8008ec4 <I2C_Master_ADDR+0x166>
 8008ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ec0:	2b01      	cmp	r3, #1
 8008ec2:	d125      	bne.n	8008f10 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8008ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ec6:	2b04      	cmp	r3, #4
 8008ec8:	d00e      	beq.n	8008ee8 <I2C_Master_ADDR+0x18a>
 8008eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ecc:	2b02      	cmp	r3, #2
 8008ece:	d00b      	beq.n	8008ee8 <I2C_Master_ADDR+0x18a>
 8008ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ed2:	2b10      	cmp	r3, #16
 8008ed4:	d008      	beq.n	8008ee8 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	681a      	ldr	r2, [r3, #0]
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008ee4:	601a      	str	r2, [r3, #0]
 8008ee6:	e007      	b.n	8008ef8 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	681a      	ldr	r2, [r3, #0]
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008ef6:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008ef8:	2300      	movs	r3, #0
 8008efa:	61fb      	str	r3, [r7, #28]
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	695b      	ldr	r3, [r3, #20]
 8008f02:	61fb      	str	r3, [r7, #28]
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	699b      	ldr	r3, [r3, #24]
 8008f0a:	61fb      	str	r3, [r7, #28]
 8008f0c:	69fb      	ldr	r3, [r7, #28]
 8008f0e:	e0a1      	b.n	8009054 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	681a      	ldr	r2, [r3, #0]
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008f1e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008f20:	2300      	movs	r3, #0
 8008f22:	61bb      	str	r3, [r7, #24]
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	695b      	ldr	r3, [r3, #20]
 8008f2a:	61bb      	str	r3, [r7, #24]
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	699b      	ldr	r3, [r3, #24]
 8008f32:	61bb      	str	r3, [r7, #24]
 8008f34:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	681a      	ldr	r2, [r3, #0]
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008f44:	601a      	str	r2, [r3, #0]
 8008f46:	e085      	b.n	8009054 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f4c:	b29b      	uxth	r3, r3
 8008f4e:	2b02      	cmp	r3, #2
 8008f50:	d14d      	bne.n	8008fee <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8008f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f54:	2b04      	cmp	r3, #4
 8008f56:	d016      	beq.n	8008f86 <I2C_Master_ADDR+0x228>
 8008f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f5a:	2b02      	cmp	r3, #2
 8008f5c:	d013      	beq.n	8008f86 <I2C_Master_ADDR+0x228>
 8008f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f60:	2b10      	cmp	r3, #16
 8008f62:	d010      	beq.n	8008f86 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	681a      	ldr	r2, [r3, #0]
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008f72:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	681a      	ldr	r2, [r3, #0]
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008f82:	601a      	str	r2, [r3, #0]
 8008f84:	e007      	b.n	8008f96 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	681a      	ldr	r2, [r3, #0]
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008f94:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	685b      	ldr	r3, [r3, #4]
 8008f9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008fa0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008fa4:	d117      	bne.n	8008fd6 <I2C_Master_ADDR+0x278>
 8008fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fa8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008fac:	d00b      	beq.n	8008fc6 <I2C_Master_ADDR+0x268>
 8008fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fb0:	2b01      	cmp	r3, #1
 8008fb2:	d008      	beq.n	8008fc6 <I2C_Master_ADDR+0x268>
 8008fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fb6:	2b08      	cmp	r3, #8
 8008fb8:	d005      	beq.n	8008fc6 <I2C_Master_ADDR+0x268>
 8008fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fbc:	2b10      	cmp	r3, #16
 8008fbe:	d002      	beq.n	8008fc6 <I2C_Master_ADDR+0x268>
 8008fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fc2:	2b20      	cmp	r3, #32
 8008fc4:	d107      	bne.n	8008fd6 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	685a      	ldr	r2, [r3, #4]
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008fd4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	617b      	str	r3, [r7, #20]
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	695b      	ldr	r3, [r3, #20]
 8008fe0:	617b      	str	r3, [r7, #20]
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	699b      	ldr	r3, [r3, #24]
 8008fe8:	617b      	str	r3, [r7, #20]
 8008fea:	697b      	ldr	r3, [r7, #20]
 8008fec:	e032      	b.n	8009054 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	681a      	ldr	r2, [r3, #0]
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008ffc:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	685b      	ldr	r3, [r3, #4]
 8009004:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009008:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800900c:	d117      	bne.n	800903e <I2C_Master_ADDR+0x2e0>
 800900e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009010:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009014:	d00b      	beq.n	800902e <I2C_Master_ADDR+0x2d0>
 8009016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009018:	2b01      	cmp	r3, #1
 800901a:	d008      	beq.n	800902e <I2C_Master_ADDR+0x2d0>
 800901c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800901e:	2b08      	cmp	r3, #8
 8009020:	d005      	beq.n	800902e <I2C_Master_ADDR+0x2d0>
 8009022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009024:	2b10      	cmp	r3, #16
 8009026:	d002      	beq.n	800902e <I2C_Master_ADDR+0x2d0>
 8009028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800902a:	2b20      	cmp	r3, #32
 800902c:	d107      	bne.n	800903e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	685a      	ldr	r2, [r3, #4]
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800903c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800903e:	2300      	movs	r3, #0
 8009040:	613b      	str	r3, [r7, #16]
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	695b      	ldr	r3, [r3, #20]
 8009048:	613b      	str	r3, [r7, #16]
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	699b      	ldr	r3, [r3, #24]
 8009050:	613b      	str	r3, [r7, #16]
 8009052:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2200      	movs	r2, #0
 8009058:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800905a:	e00b      	b.n	8009074 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800905c:	2300      	movs	r3, #0
 800905e:	60fb      	str	r3, [r7, #12]
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	695b      	ldr	r3, [r3, #20]
 8009066:	60fb      	str	r3, [r7, #12]
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	699b      	ldr	r3, [r3, #24]
 800906e:	60fb      	str	r3, [r7, #12]
 8009070:	68fb      	ldr	r3, [r7, #12]
}
 8009072:	e7ff      	b.n	8009074 <I2C_Master_ADDR+0x316>
 8009074:	bf00      	nop
 8009076:	3744      	adds	r7, #68	; 0x44
 8009078:	46bd      	mov	sp, r7
 800907a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907e:	4770      	bx	lr

08009080 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b084      	sub	sp, #16
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800908e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009094:	b29b      	uxth	r3, r3
 8009096:	2b00      	cmp	r3, #0
 8009098:	d02b      	beq.n	80090f2 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800909e:	781a      	ldrb	r2, [r3, #0]
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090aa:	1c5a      	adds	r2, r3, #1
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090b4:	b29b      	uxth	r3, r3
 80090b6:	3b01      	subs	r3, #1
 80090b8:	b29a      	uxth	r2, r3
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090c2:	b29b      	uxth	r3, r3
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d114      	bne.n	80090f2 <I2C_SlaveTransmit_TXE+0x72>
 80090c8:	7bfb      	ldrb	r3, [r7, #15]
 80090ca:	2b29      	cmp	r3, #41	; 0x29
 80090cc:	d111      	bne.n	80090f2 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	685a      	ldr	r2, [r3, #4]
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80090dc:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2221      	movs	r2, #33	; 0x21
 80090e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2228      	movs	r2, #40	; 0x28
 80090e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80090ec:	6878      	ldr	r0, [r7, #4]
 80090ee:	f7ff f9e7 	bl	80084c0 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80090f2:	bf00      	nop
 80090f4:	3710      	adds	r7, #16
 80090f6:	46bd      	mov	sp, r7
 80090f8:	bd80      	pop	{r7, pc}

080090fa <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80090fa:	b480      	push	{r7}
 80090fc:	b083      	sub	sp, #12
 80090fe:	af00      	add	r7, sp, #0
 8009100:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009106:	b29b      	uxth	r3, r3
 8009108:	2b00      	cmp	r3, #0
 800910a:	d011      	beq.n	8009130 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009110:	781a      	ldrb	r2, [r3, #0]
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800911c:	1c5a      	adds	r2, r3, #1
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009126:	b29b      	uxth	r3, r3
 8009128:	3b01      	subs	r3, #1
 800912a:	b29a      	uxth	r2, r3
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8009130:	bf00      	nop
 8009132:	370c      	adds	r7, #12
 8009134:	46bd      	mov	sp, r7
 8009136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913a:	4770      	bx	lr

0800913c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b084      	sub	sp, #16
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800914a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009150:	b29b      	uxth	r3, r3
 8009152:	2b00      	cmp	r3, #0
 8009154:	d02c      	beq.n	80091b0 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	691a      	ldr	r2, [r3, #16]
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009160:	b2d2      	uxtb	r2, r2
 8009162:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009168:	1c5a      	adds	r2, r3, #1
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009172:	b29b      	uxth	r3, r3
 8009174:	3b01      	subs	r3, #1
 8009176:	b29a      	uxth	r2, r3
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009180:	b29b      	uxth	r3, r3
 8009182:	2b00      	cmp	r3, #0
 8009184:	d114      	bne.n	80091b0 <I2C_SlaveReceive_RXNE+0x74>
 8009186:	7bfb      	ldrb	r3, [r7, #15]
 8009188:	2b2a      	cmp	r3, #42	; 0x2a
 800918a:	d111      	bne.n	80091b0 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	685a      	ldr	r2, [r3, #4]
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800919a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2222      	movs	r2, #34	; 0x22
 80091a0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2228      	movs	r2, #40	; 0x28
 80091a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f7ff f992 	bl	80084d4 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80091b0:	bf00      	nop
 80091b2:	3710      	adds	r7, #16
 80091b4:	46bd      	mov	sp, r7
 80091b6:	bd80      	pop	{r7, pc}

080091b8 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80091b8:	b480      	push	{r7}
 80091ba:	b083      	sub	sp, #12
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091c4:	b29b      	uxth	r3, r3
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d012      	beq.n	80091f0 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	691a      	ldr	r2, [r3, #16]
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091d4:	b2d2      	uxtb	r2, r2
 80091d6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091dc:	1c5a      	adds	r2, r3, #1
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091e6:	b29b      	uxth	r3, r3
 80091e8:	3b01      	subs	r3, #1
 80091ea:	b29a      	uxth	r2, r3
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80091f0:	bf00      	nop
 80091f2:	370c      	adds	r7, #12
 80091f4:	46bd      	mov	sp, r7
 80091f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fa:	4770      	bx	lr

080091fc <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b084      	sub	sp, #16
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
 8009204:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8009206:	2300      	movs	r3, #0
 8009208:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009210:	b2db      	uxtb	r3, r3
 8009212:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009216:	2b28      	cmp	r3, #40	; 0x28
 8009218:	d127      	bne.n	800926a <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	685a      	ldr	r2, [r3, #4]
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009228:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	089b      	lsrs	r3, r3, #2
 800922e:	f003 0301 	and.w	r3, r3, #1
 8009232:	2b00      	cmp	r3, #0
 8009234:	d101      	bne.n	800923a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8009236:	2301      	movs	r3, #1
 8009238:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	09db      	lsrs	r3, r3, #7
 800923e:	f003 0301 	and.w	r3, r3, #1
 8009242:	2b00      	cmp	r3, #0
 8009244:	d103      	bne.n	800924e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	68db      	ldr	r3, [r3, #12]
 800924a:	81bb      	strh	r3, [r7, #12]
 800924c:	e002      	b.n	8009254 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	699b      	ldr	r3, [r3, #24]
 8009252:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2200      	movs	r2, #0
 8009258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800925c:	89ba      	ldrh	r2, [r7, #12]
 800925e:	7bfb      	ldrb	r3, [r7, #15]
 8009260:	4619      	mov	r1, r3
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	f7ff f940 	bl	80084e8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8009268:	e00e      	b.n	8009288 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800926a:	2300      	movs	r3, #0
 800926c:	60bb      	str	r3, [r7, #8]
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	695b      	ldr	r3, [r3, #20]
 8009274:	60bb      	str	r3, [r7, #8]
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	699b      	ldr	r3, [r3, #24]
 800927c:	60bb      	str	r3, [r7, #8]
 800927e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2200      	movs	r2, #0
 8009284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8009288:	bf00      	nop
 800928a:	3710      	adds	r7, #16
 800928c:	46bd      	mov	sp, r7
 800928e:	bd80      	pop	{r7, pc}

08009290 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b084      	sub	sp, #16
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800929e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	685a      	ldr	r2, [r3, #4]
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80092ae:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80092b0:	2300      	movs	r3, #0
 80092b2:	60bb      	str	r3, [r7, #8]
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	695b      	ldr	r3, [r3, #20]
 80092ba:	60bb      	str	r3, [r7, #8]
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	681a      	ldr	r2, [r3, #0]
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	f042 0201 	orr.w	r2, r2, #1
 80092ca:	601a      	str	r2, [r3, #0]
 80092cc:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	681a      	ldr	r2, [r3, #0]
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80092dc:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	685b      	ldr	r3, [r3, #4]
 80092e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80092e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80092ec:	d172      	bne.n	80093d4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80092ee:	7bfb      	ldrb	r3, [r7, #15]
 80092f0:	2b22      	cmp	r3, #34	; 0x22
 80092f2:	d002      	beq.n	80092fa <I2C_Slave_STOPF+0x6a>
 80092f4:	7bfb      	ldrb	r3, [r7, #15]
 80092f6:	2b2a      	cmp	r3, #42	; 0x2a
 80092f8:	d135      	bne.n	8009366 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	685b      	ldr	r3, [r3, #4]
 8009302:	b29a      	uxth	r2, r3
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800930c:	b29b      	uxth	r3, r3
 800930e:	2b00      	cmp	r3, #0
 8009310:	d005      	beq.n	800931e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009316:	f043 0204 	orr.w	r2, r3, #4
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	685a      	ldr	r2, [r3, #4]
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800932c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009332:	4618      	mov	r0, r3
 8009334:	f7fd ff5e 	bl	80071f4 <HAL_DMA_GetState>
 8009338:	4603      	mov	r3, r0
 800933a:	2b01      	cmp	r3, #1
 800933c:	d049      	beq.n	80093d2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009342:	4a69      	ldr	r2, [pc, #420]	; (80094e8 <I2C_Slave_STOPF+0x258>)
 8009344:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800934a:	4618      	mov	r0, r3
 800934c:	f7fd fda6 	bl	8006e9c <HAL_DMA_Abort_IT>
 8009350:	4603      	mov	r3, r0
 8009352:	2b00      	cmp	r3, #0
 8009354:	d03d      	beq.n	80093d2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800935a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800935c:	687a      	ldr	r2, [r7, #4]
 800935e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009360:	4610      	mov	r0, r2
 8009362:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009364:	e035      	b.n	80093d2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	685b      	ldr	r3, [r3, #4]
 800936e:	b29a      	uxth	r2, r3
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009378:	b29b      	uxth	r3, r3
 800937a:	2b00      	cmp	r3, #0
 800937c:	d005      	beq.n	800938a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009382:	f043 0204 	orr.w	r2, r3, #4
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	685a      	ldr	r2, [r3, #4]
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009398:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800939e:	4618      	mov	r0, r3
 80093a0:	f7fd ff28 	bl	80071f4 <HAL_DMA_GetState>
 80093a4:	4603      	mov	r3, r0
 80093a6:	2b01      	cmp	r3, #1
 80093a8:	d014      	beq.n	80093d4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093ae:	4a4e      	ldr	r2, [pc, #312]	; (80094e8 <I2C_Slave_STOPF+0x258>)
 80093b0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093b6:	4618      	mov	r0, r3
 80093b8:	f7fd fd70 	bl	8006e9c <HAL_DMA_Abort_IT>
 80093bc:	4603      	mov	r3, r0
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d008      	beq.n	80093d4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093c8:	687a      	ldr	r2, [r7, #4]
 80093ca:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80093cc:	4610      	mov	r0, r2
 80093ce:	4798      	blx	r3
 80093d0:	e000      	b.n	80093d4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80093d2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093d8:	b29b      	uxth	r3, r3
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d03e      	beq.n	800945c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	695b      	ldr	r3, [r3, #20]
 80093e4:	f003 0304 	and.w	r3, r3, #4
 80093e8:	2b04      	cmp	r3, #4
 80093ea:	d112      	bne.n	8009412 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	691a      	ldr	r2, [r3, #16]
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093f6:	b2d2      	uxtb	r2, r2
 80093f8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093fe:	1c5a      	adds	r2, r3, #1
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009408:	b29b      	uxth	r3, r3
 800940a:	3b01      	subs	r3, #1
 800940c:	b29a      	uxth	r2, r3
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	695b      	ldr	r3, [r3, #20]
 8009418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800941c:	2b40      	cmp	r3, #64	; 0x40
 800941e:	d112      	bne.n	8009446 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	691a      	ldr	r2, [r3, #16]
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800942a:	b2d2      	uxtb	r2, r2
 800942c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009432:	1c5a      	adds	r2, r3, #1
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800943c:	b29b      	uxth	r3, r3
 800943e:	3b01      	subs	r3, #1
 8009440:	b29a      	uxth	r2, r3
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800944a:	b29b      	uxth	r3, r3
 800944c:	2b00      	cmp	r3, #0
 800944e:	d005      	beq.n	800945c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009454:	f043 0204 	orr.w	r2, r3, #4
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009460:	2b00      	cmp	r3, #0
 8009462:	d003      	beq.n	800946c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8009464:	6878      	ldr	r0, [r7, #4]
 8009466:	f000 f8b3 	bl	80095d0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800946a:	e039      	b.n	80094e0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800946c:	7bfb      	ldrb	r3, [r7, #15]
 800946e:	2b2a      	cmp	r3, #42	; 0x2a
 8009470:	d109      	bne.n	8009486 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	2200      	movs	r2, #0
 8009476:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2228      	movs	r2, #40	; 0x28
 800947c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	f7ff f827 	bl	80084d4 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800948c:	b2db      	uxtb	r3, r3
 800948e:	2b28      	cmp	r3, #40	; 0x28
 8009490:	d111      	bne.n	80094b6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	4a15      	ldr	r2, [pc, #84]	; (80094ec <I2C_Slave_STOPF+0x25c>)
 8009496:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2200      	movs	r2, #0
 800949c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	2220      	movs	r2, #32
 80094a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2200      	movs	r2, #0
 80094aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80094ae:	6878      	ldr	r0, [r7, #4]
 80094b0:	f7ff f828 	bl	8008504 <HAL_I2C_ListenCpltCallback>
}
 80094b4:	e014      	b.n	80094e0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094ba:	2b22      	cmp	r3, #34	; 0x22
 80094bc:	d002      	beq.n	80094c4 <I2C_Slave_STOPF+0x234>
 80094be:	7bfb      	ldrb	r3, [r7, #15]
 80094c0:	2b22      	cmp	r3, #34	; 0x22
 80094c2:	d10d      	bne.n	80094e0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2200      	movs	r2, #0
 80094c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	2220      	movs	r2, #32
 80094ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	2200      	movs	r2, #0
 80094d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80094da:	6878      	ldr	r0, [r7, #4]
 80094dc:	f7fe fffa 	bl	80084d4 <HAL_I2C_SlaveRxCpltCallback>
}
 80094e0:	bf00      	nop
 80094e2:	3710      	adds	r7, #16
 80094e4:	46bd      	mov	sp, r7
 80094e6:	bd80      	pop	{r7, pc}
 80094e8:	08009b31 	.word	0x08009b31
 80094ec:	ffff0000 	.word	0xffff0000

080094f0 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b084      	sub	sp, #16
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80094fe:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009504:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8009506:	68bb      	ldr	r3, [r7, #8]
 8009508:	2b08      	cmp	r3, #8
 800950a:	d002      	beq.n	8009512 <I2C_Slave_AF+0x22>
 800950c:	68bb      	ldr	r3, [r7, #8]
 800950e:	2b20      	cmp	r3, #32
 8009510:	d129      	bne.n	8009566 <I2C_Slave_AF+0x76>
 8009512:	7bfb      	ldrb	r3, [r7, #15]
 8009514:	2b28      	cmp	r3, #40	; 0x28
 8009516:	d126      	bne.n	8009566 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	4a2c      	ldr	r2, [pc, #176]	; (80095cc <I2C_Slave_AF+0xdc>)
 800951c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	685a      	ldr	r2, [r3, #4]
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800952c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009536:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	681a      	ldr	r2, [r3, #0]
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009546:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2200      	movs	r2, #0
 800954c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	2220      	movs	r2, #32
 8009552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	2200      	movs	r2, #0
 800955a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800955e:	6878      	ldr	r0, [r7, #4]
 8009560:	f7fe ffd0 	bl	8008504 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8009564:	e02e      	b.n	80095c4 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8009566:	7bfb      	ldrb	r3, [r7, #15]
 8009568:	2b21      	cmp	r3, #33	; 0x21
 800956a:	d126      	bne.n	80095ba <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	4a17      	ldr	r2, [pc, #92]	; (80095cc <I2C_Slave_AF+0xdc>)
 8009570:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	2221      	movs	r2, #33	; 0x21
 8009576:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2220      	movs	r2, #32
 800957c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2200      	movs	r2, #0
 8009584:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	685a      	ldr	r2, [r3, #4]
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009596:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80095a0:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	681a      	ldr	r2, [r3, #0]
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80095b0:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80095b2:	6878      	ldr	r0, [r7, #4]
 80095b4:	f7fe ff84 	bl	80084c0 <HAL_I2C_SlaveTxCpltCallback>
}
 80095b8:	e004      	b.n	80095c4 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80095c2:	615a      	str	r2, [r3, #20]
}
 80095c4:	bf00      	nop
 80095c6:	3710      	adds	r7, #16
 80095c8:	46bd      	mov	sp, r7
 80095ca:	bd80      	pop	{r7, pc}
 80095cc:	ffff0000 	.word	0xffff0000

080095d0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b084      	sub	sp, #16
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095de:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80095e6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80095e8:	7bbb      	ldrb	r3, [r7, #14]
 80095ea:	2b10      	cmp	r3, #16
 80095ec:	d002      	beq.n	80095f4 <I2C_ITError+0x24>
 80095ee:	7bbb      	ldrb	r3, [r7, #14]
 80095f0:	2b40      	cmp	r3, #64	; 0x40
 80095f2:	d10a      	bne.n	800960a <I2C_ITError+0x3a>
 80095f4:	7bfb      	ldrb	r3, [r7, #15]
 80095f6:	2b22      	cmp	r3, #34	; 0x22
 80095f8:	d107      	bne.n	800960a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	681a      	ldr	r2, [r3, #0]
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009608:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800960a:	7bfb      	ldrb	r3, [r7, #15]
 800960c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009610:	2b28      	cmp	r3, #40	; 0x28
 8009612:	d107      	bne.n	8009624 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	2200      	movs	r2, #0
 8009618:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	2228      	movs	r2, #40	; 0x28
 800961e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009622:	e015      	b.n	8009650 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	685b      	ldr	r3, [r3, #4]
 800962a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800962e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009632:	d00a      	beq.n	800964a <I2C_ITError+0x7a>
 8009634:	7bfb      	ldrb	r3, [r7, #15]
 8009636:	2b60      	cmp	r3, #96	; 0x60
 8009638:	d007      	beq.n	800964a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2220      	movs	r2, #32
 800963e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2200      	movs	r2, #0
 8009646:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	2200      	movs	r2, #0
 800964e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	685b      	ldr	r3, [r3, #4]
 8009656:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800965a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800965e:	d162      	bne.n	8009726 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	685a      	ldr	r2, [r3, #4]
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800966e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009674:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009678:	b2db      	uxtb	r3, r3
 800967a:	2b01      	cmp	r3, #1
 800967c:	d020      	beq.n	80096c0 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009682:	4a6a      	ldr	r2, [pc, #424]	; (800982c <I2C_ITError+0x25c>)
 8009684:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800968a:	4618      	mov	r0, r3
 800968c:	f7fd fc06 	bl	8006e9c <HAL_DMA_Abort_IT>
 8009690:	4603      	mov	r3, r0
 8009692:	2b00      	cmp	r3, #0
 8009694:	f000 8089 	beq.w	80097aa <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	681a      	ldr	r2, [r3, #0]
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	f022 0201 	bic.w	r2, r2, #1
 80096a6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2220      	movs	r2, #32
 80096ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096b6:	687a      	ldr	r2, [r7, #4]
 80096b8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80096ba:	4610      	mov	r0, r2
 80096bc:	4798      	blx	r3
 80096be:	e074      	b.n	80097aa <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096c4:	4a59      	ldr	r2, [pc, #356]	; (800982c <I2C_ITError+0x25c>)
 80096c6:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096cc:	4618      	mov	r0, r3
 80096ce:	f7fd fbe5 	bl	8006e9c <HAL_DMA_Abort_IT>
 80096d2:	4603      	mov	r3, r0
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d068      	beq.n	80097aa <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	695b      	ldr	r3, [r3, #20]
 80096de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096e2:	2b40      	cmp	r3, #64	; 0x40
 80096e4:	d10b      	bne.n	80096fe <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	691a      	ldr	r2, [r3, #16]
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096f0:	b2d2      	uxtb	r2, r2
 80096f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096f8:	1c5a      	adds	r2, r3, #1
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	681a      	ldr	r2, [r3, #0]
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	f022 0201 	bic.w	r2, r2, #1
 800970c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2220      	movs	r2, #32
 8009712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800971a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800971c:	687a      	ldr	r2, [r7, #4]
 800971e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009720:	4610      	mov	r0, r2
 8009722:	4798      	blx	r3
 8009724:	e041      	b.n	80097aa <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800972c:	b2db      	uxtb	r3, r3
 800972e:	2b60      	cmp	r3, #96	; 0x60
 8009730:	d125      	bne.n	800977e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	2220      	movs	r2, #32
 8009736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	2200      	movs	r2, #0
 800973e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	695b      	ldr	r3, [r3, #20]
 8009746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800974a:	2b40      	cmp	r3, #64	; 0x40
 800974c:	d10b      	bne.n	8009766 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	691a      	ldr	r2, [r3, #16]
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009758:	b2d2      	uxtb	r2, r2
 800975a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009760:	1c5a      	adds	r2, r3, #1
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	681a      	ldr	r2, [r3, #0]
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	f022 0201 	bic.w	r2, r2, #1
 8009774:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8009776:	6878      	ldr	r0, [r7, #4]
 8009778:	f7fe feec 	bl	8008554 <HAL_I2C_AbortCpltCallback>
 800977c:	e015      	b.n	80097aa <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	695b      	ldr	r3, [r3, #20]
 8009784:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009788:	2b40      	cmp	r3, #64	; 0x40
 800978a:	d10b      	bne.n	80097a4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	691a      	ldr	r2, [r3, #16]
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009796:	b2d2      	uxtb	r2, r2
 8009798:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800979e:	1c5a      	adds	r2, r3, #1
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80097a4:	6878      	ldr	r0, [r7, #4]
 80097a6:	f7fe fecb 	bl	8008540 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097ae:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80097b0:	68bb      	ldr	r3, [r7, #8]
 80097b2:	f003 0301 	and.w	r3, r3, #1
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d10e      	bne.n	80097d8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80097ba:	68bb      	ldr	r3, [r7, #8]
 80097bc:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d109      	bne.n	80097d8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80097c4:	68bb      	ldr	r3, [r7, #8]
 80097c6:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d104      	bne.n	80097d8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80097ce:	68bb      	ldr	r3, [r7, #8]
 80097d0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d007      	beq.n	80097e8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	685a      	ldr	r2, [r3, #4]
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80097e6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80097ee:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097f4:	f003 0304 	and.w	r3, r3, #4
 80097f8:	2b04      	cmp	r3, #4
 80097fa:	d113      	bne.n	8009824 <I2C_ITError+0x254>
 80097fc:	7bfb      	ldrb	r3, [r7, #15]
 80097fe:	2b28      	cmp	r3, #40	; 0x28
 8009800:	d110      	bne.n	8009824 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	4a0a      	ldr	r2, [pc, #40]	; (8009830 <I2C_ITError+0x260>)
 8009806:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2200      	movs	r2, #0
 800980c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	2220      	movs	r2, #32
 8009812:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	2200      	movs	r2, #0
 800981a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800981e:	6878      	ldr	r0, [r7, #4]
 8009820:	f7fe fe70 	bl	8008504 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009824:	bf00      	nop
 8009826:	3710      	adds	r7, #16
 8009828:	46bd      	mov	sp, r7
 800982a:	bd80      	pop	{r7, pc}
 800982c:	08009b31 	.word	0x08009b31
 8009830:	ffff0000 	.word	0xffff0000

08009834 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b088      	sub	sp, #32
 8009838:	af02      	add	r7, sp, #8
 800983a:	60f8      	str	r0, [r7, #12]
 800983c:	4608      	mov	r0, r1
 800983e:	4611      	mov	r1, r2
 8009840:	461a      	mov	r2, r3
 8009842:	4603      	mov	r3, r0
 8009844:	817b      	strh	r3, [r7, #10]
 8009846:	460b      	mov	r3, r1
 8009848:	813b      	strh	r3, [r7, #8]
 800984a:	4613      	mov	r3, r2
 800984c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	681a      	ldr	r2, [r3, #0]
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800985c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800985e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009860:	9300      	str	r3, [sp, #0]
 8009862:	6a3b      	ldr	r3, [r7, #32]
 8009864:	2200      	movs	r2, #0
 8009866:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800986a:	68f8      	ldr	r0, [r7, #12]
 800986c:	f000 fa08 	bl	8009c80 <I2C_WaitOnFlagUntilTimeout>
 8009870:	4603      	mov	r3, r0
 8009872:	2b00      	cmp	r3, #0
 8009874:	d00d      	beq.n	8009892 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009880:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009884:	d103      	bne.n	800988e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	f44f 7200 	mov.w	r2, #512	; 0x200
 800988c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800988e:	2303      	movs	r3, #3
 8009890:	e05f      	b.n	8009952 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009892:	897b      	ldrh	r3, [r7, #10]
 8009894:	b2db      	uxtb	r3, r3
 8009896:	461a      	mov	r2, r3
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80098a0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80098a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098a4:	6a3a      	ldr	r2, [r7, #32]
 80098a6:	492d      	ldr	r1, [pc, #180]	; (800995c <I2C_RequestMemoryWrite+0x128>)
 80098a8:	68f8      	ldr	r0, [r7, #12]
 80098aa:	f000 fa40 	bl	8009d2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80098ae:	4603      	mov	r3, r0
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d001      	beq.n	80098b8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80098b4:	2301      	movs	r3, #1
 80098b6:	e04c      	b.n	8009952 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80098b8:	2300      	movs	r3, #0
 80098ba:	617b      	str	r3, [r7, #20]
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	695b      	ldr	r3, [r3, #20]
 80098c2:	617b      	str	r3, [r7, #20]
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	699b      	ldr	r3, [r3, #24]
 80098ca:	617b      	str	r3, [r7, #20]
 80098cc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80098ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098d0:	6a39      	ldr	r1, [r7, #32]
 80098d2:	68f8      	ldr	r0, [r7, #12]
 80098d4:	f000 faaa 	bl	8009e2c <I2C_WaitOnTXEFlagUntilTimeout>
 80098d8:	4603      	mov	r3, r0
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d00d      	beq.n	80098fa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098e2:	2b04      	cmp	r3, #4
 80098e4:	d107      	bne.n	80098f6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	681a      	ldr	r2, [r3, #0]
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80098f4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80098f6:	2301      	movs	r3, #1
 80098f8:	e02b      	b.n	8009952 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80098fa:	88fb      	ldrh	r3, [r7, #6]
 80098fc:	2b01      	cmp	r3, #1
 80098fe:	d105      	bne.n	800990c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009900:	893b      	ldrh	r3, [r7, #8]
 8009902:	b2da      	uxtb	r2, r3
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	611a      	str	r2, [r3, #16]
 800990a:	e021      	b.n	8009950 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800990c:	893b      	ldrh	r3, [r7, #8]
 800990e:	0a1b      	lsrs	r3, r3, #8
 8009910:	b29b      	uxth	r3, r3
 8009912:	b2da      	uxtb	r2, r3
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800991a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800991c:	6a39      	ldr	r1, [r7, #32]
 800991e:	68f8      	ldr	r0, [r7, #12]
 8009920:	f000 fa84 	bl	8009e2c <I2C_WaitOnTXEFlagUntilTimeout>
 8009924:	4603      	mov	r3, r0
 8009926:	2b00      	cmp	r3, #0
 8009928:	d00d      	beq.n	8009946 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800992e:	2b04      	cmp	r3, #4
 8009930:	d107      	bne.n	8009942 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	681a      	ldr	r2, [r3, #0]
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009940:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009942:	2301      	movs	r3, #1
 8009944:	e005      	b.n	8009952 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009946:	893b      	ldrh	r3, [r7, #8]
 8009948:	b2da      	uxtb	r2, r3
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8009950:	2300      	movs	r3, #0
}
 8009952:	4618      	mov	r0, r3
 8009954:	3718      	adds	r7, #24
 8009956:	46bd      	mov	sp, r7
 8009958:	bd80      	pop	{r7, pc}
 800995a:	bf00      	nop
 800995c:	00010002 	.word	0x00010002

08009960 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b088      	sub	sp, #32
 8009964:	af02      	add	r7, sp, #8
 8009966:	60f8      	str	r0, [r7, #12]
 8009968:	4608      	mov	r0, r1
 800996a:	4611      	mov	r1, r2
 800996c:	461a      	mov	r2, r3
 800996e:	4603      	mov	r3, r0
 8009970:	817b      	strh	r3, [r7, #10]
 8009972:	460b      	mov	r3, r1
 8009974:	813b      	strh	r3, [r7, #8]
 8009976:	4613      	mov	r3, r2
 8009978:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	681a      	ldr	r2, [r3, #0]
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009988:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	681a      	ldr	r2, [r3, #0]
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009998:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800999a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800999c:	9300      	str	r3, [sp, #0]
 800999e:	6a3b      	ldr	r3, [r7, #32]
 80099a0:	2200      	movs	r2, #0
 80099a2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80099a6:	68f8      	ldr	r0, [r7, #12]
 80099a8:	f000 f96a 	bl	8009c80 <I2C_WaitOnFlagUntilTimeout>
 80099ac:	4603      	mov	r3, r0
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d00d      	beq.n	80099ce <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80099c0:	d103      	bne.n	80099ca <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80099c8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80099ca:	2303      	movs	r3, #3
 80099cc:	e0aa      	b.n	8009b24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80099ce:	897b      	ldrh	r3, [r7, #10]
 80099d0:	b2db      	uxtb	r3, r3
 80099d2:	461a      	mov	r2, r3
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80099dc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80099de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099e0:	6a3a      	ldr	r2, [r7, #32]
 80099e2:	4952      	ldr	r1, [pc, #328]	; (8009b2c <I2C_RequestMemoryRead+0x1cc>)
 80099e4:	68f8      	ldr	r0, [r7, #12]
 80099e6:	f000 f9a2 	bl	8009d2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80099ea:	4603      	mov	r3, r0
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d001      	beq.n	80099f4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80099f0:	2301      	movs	r3, #1
 80099f2:	e097      	b.n	8009b24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80099f4:	2300      	movs	r3, #0
 80099f6:	617b      	str	r3, [r7, #20]
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	695b      	ldr	r3, [r3, #20]
 80099fe:	617b      	str	r3, [r7, #20]
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	699b      	ldr	r3, [r3, #24]
 8009a06:	617b      	str	r3, [r7, #20]
 8009a08:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009a0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a0c:	6a39      	ldr	r1, [r7, #32]
 8009a0e:	68f8      	ldr	r0, [r7, #12]
 8009a10:	f000 fa0c 	bl	8009e2c <I2C_WaitOnTXEFlagUntilTimeout>
 8009a14:	4603      	mov	r3, r0
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d00d      	beq.n	8009a36 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a1e:	2b04      	cmp	r3, #4
 8009a20:	d107      	bne.n	8009a32 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	681a      	ldr	r2, [r3, #0]
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a30:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009a32:	2301      	movs	r3, #1
 8009a34:	e076      	b.n	8009b24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009a36:	88fb      	ldrh	r3, [r7, #6]
 8009a38:	2b01      	cmp	r3, #1
 8009a3a:	d105      	bne.n	8009a48 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009a3c:	893b      	ldrh	r3, [r7, #8]
 8009a3e:	b2da      	uxtb	r2, r3
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	611a      	str	r2, [r3, #16]
 8009a46:	e021      	b.n	8009a8c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009a48:	893b      	ldrh	r3, [r7, #8]
 8009a4a:	0a1b      	lsrs	r3, r3, #8
 8009a4c:	b29b      	uxth	r3, r3
 8009a4e:	b2da      	uxtb	r2, r3
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009a56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a58:	6a39      	ldr	r1, [r7, #32]
 8009a5a:	68f8      	ldr	r0, [r7, #12]
 8009a5c:	f000 f9e6 	bl	8009e2c <I2C_WaitOnTXEFlagUntilTimeout>
 8009a60:	4603      	mov	r3, r0
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d00d      	beq.n	8009a82 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a6a:	2b04      	cmp	r3, #4
 8009a6c:	d107      	bne.n	8009a7e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	681a      	ldr	r2, [r3, #0]
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a7c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009a7e:	2301      	movs	r3, #1
 8009a80:	e050      	b.n	8009b24 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009a82:	893b      	ldrh	r3, [r7, #8]
 8009a84:	b2da      	uxtb	r2, r3
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009a8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a8e:	6a39      	ldr	r1, [r7, #32]
 8009a90:	68f8      	ldr	r0, [r7, #12]
 8009a92:	f000 f9cb 	bl	8009e2c <I2C_WaitOnTXEFlagUntilTimeout>
 8009a96:	4603      	mov	r3, r0
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d00d      	beq.n	8009ab8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aa0:	2b04      	cmp	r3, #4
 8009aa2:	d107      	bne.n	8009ab4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	681a      	ldr	r2, [r3, #0]
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009ab2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009ab4:	2301      	movs	r3, #1
 8009ab6:	e035      	b.n	8009b24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	681a      	ldr	r2, [r3, #0]
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009ac6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aca:	9300      	str	r3, [sp, #0]
 8009acc:	6a3b      	ldr	r3, [r7, #32]
 8009ace:	2200      	movs	r2, #0
 8009ad0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009ad4:	68f8      	ldr	r0, [r7, #12]
 8009ad6:	f000 f8d3 	bl	8009c80 <I2C_WaitOnFlagUntilTimeout>
 8009ada:	4603      	mov	r3, r0
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d00d      	beq.n	8009afc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009aea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009aee:	d103      	bne.n	8009af8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009af6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009af8:	2303      	movs	r3, #3
 8009afa:	e013      	b.n	8009b24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009afc:	897b      	ldrh	r3, [r7, #10]
 8009afe:	b2db      	uxtb	r3, r3
 8009b00:	f043 0301 	orr.w	r3, r3, #1
 8009b04:	b2da      	uxtb	r2, r3
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b0e:	6a3a      	ldr	r2, [r7, #32]
 8009b10:	4906      	ldr	r1, [pc, #24]	; (8009b2c <I2C_RequestMemoryRead+0x1cc>)
 8009b12:	68f8      	ldr	r0, [r7, #12]
 8009b14:	f000 f90b 	bl	8009d2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009b18:	4603      	mov	r3, r0
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d001      	beq.n	8009b22 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8009b1e:	2301      	movs	r3, #1
 8009b20:	e000      	b.n	8009b24 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8009b22:	2300      	movs	r3, #0
}
 8009b24:	4618      	mov	r0, r3
 8009b26:	3718      	adds	r7, #24
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	bd80      	pop	{r7, pc}
 8009b2c:	00010002 	.word	0x00010002

08009b30 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b086      	sub	sp, #24
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009b38:	2300      	movs	r3, #0
 8009b3a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b40:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009b42:	697b      	ldr	r3, [r7, #20]
 8009b44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b48:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8009b4a:	4b4b      	ldr	r3, [pc, #300]	; (8009c78 <I2C_DMAAbort+0x148>)
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	08db      	lsrs	r3, r3, #3
 8009b50:	4a4a      	ldr	r2, [pc, #296]	; (8009c7c <I2C_DMAAbort+0x14c>)
 8009b52:	fba2 2303 	umull	r2, r3, r2, r3
 8009b56:	0a1a      	lsrs	r2, r3, #8
 8009b58:	4613      	mov	r3, r2
 8009b5a:	009b      	lsls	r3, r3, #2
 8009b5c:	4413      	add	r3, r2
 8009b5e:	00da      	lsls	r2, r3, #3
 8009b60:	1ad3      	subs	r3, r2, r3
 8009b62:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d106      	bne.n	8009b78 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009b6a:	697b      	ldr	r3, [r7, #20]
 8009b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b6e:	f043 0220 	orr.w	r2, r3, #32
 8009b72:	697b      	ldr	r3, [r7, #20]
 8009b74:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8009b76:	e00a      	b.n	8009b8e <I2C_DMAAbort+0x5e>
    }
    count--;
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	3b01      	subs	r3, #1
 8009b7c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8009b7e:	697b      	ldr	r3, [r7, #20]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009b88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009b8c:	d0ea      	beq.n	8009b64 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8009b8e:	697b      	ldr	r3, [r7, #20]
 8009b90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d003      	beq.n	8009b9e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8009b96:	697b      	ldr	r3, [r7, #20]
 8009b98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8009b9e:	697b      	ldr	r3, [r7, #20]
 8009ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d003      	beq.n	8009bae <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8009ba6:	697b      	ldr	r3, [r7, #20]
 8009ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009baa:	2200      	movs	r2, #0
 8009bac:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009bae:	697b      	ldr	r3, [r7, #20]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	681a      	ldr	r2, [r3, #0]
 8009bb4:	697b      	ldr	r3, [r7, #20]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009bbc:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8009bbe:	697b      	ldr	r3, [r7, #20]
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8009bc4:	697b      	ldr	r3, [r7, #20]
 8009bc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d003      	beq.n	8009bd4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8009bcc:	697b      	ldr	r3, [r7, #20]
 8009bce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8009bd4:	697b      	ldr	r3, [r7, #20]
 8009bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d003      	beq.n	8009be4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8009bdc:	697b      	ldr	r3, [r7, #20]
 8009bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009be0:	2200      	movs	r2, #0
 8009be2:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8009be4:	697b      	ldr	r3, [r7, #20]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	681a      	ldr	r2, [r3, #0]
 8009bea:	697b      	ldr	r3, [r7, #20]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	f022 0201 	bic.w	r2, r2, #1
 8009bf2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8009bf4:	697b      	ldr	r3, [r7, #20]
 8009bf6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009bfa:	b2db      	uxtb	r3, r3
 8009bfc:	2b60      	cmp	r3, #96	; 0x60
 8009bfe:	d10e      	bne.n	8009c1e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8009c00:	697b      	ldr	r3, [r7, #20]
 8009c02:	2220      	movs	r2, #32
 8009c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009c08:	697b      	ldr	r3, [r7, #20]
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8009c10:	697b      	ldr	r3, [r7, #20]
 8009c12:	2200      	movs	r2, #0
 8009c14:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8009c16:	6978      	ldr	r0, [r7, #20]
 8009c18:	f7fe fc9c 	bl	8008554 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009c1c:	e027      	b.n	8009c6e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009c1e:	7cfb      	ldrb	r3, [r7, #19]
 8009c20:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009c24:	2b28      	cmp	r3, #40	; 0x28
 8009c26:	d117      	bne.n	8009c58 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8009c28:	697b      	ldr	r3, [r7, #20]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	681a      	ldr	r2, [r3, #0]
 8009c2e:	697b      	ldr	r3, [r7, #20]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	f042 0201 	orr.w	r2, r2, #1
 8009c36:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009c38:	697b      	ldr	r3, [r7, #20]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	681a      	ldr	r2, [r3, #0]
 8009c3e:	697b      	ldr	r3, [r7, #20]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009c46:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8009c48:	697b      	ldr	r3, [r7, #20]
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009c4e:	697b      	ldr	r3, [r7, #20]
 8009c50:	2228      	movs	r2, #40	; 0x28
 8009c52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009c56:	e007      	b.n	8009c68 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8009c58:	697b      	ldr	r3, [r7, #20]
 8009c5a:	2220      	movs	r2, #32
 8009c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009c60:	697b      	ldr	r3, [r7, #20]
 8009c62:	2200      	movs	r2, #0
 8009c64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8009c68:	6978      	ldr	r0, [r7, #20]
 8009c6a:	f7fe fc69 	bl	8008540 <HAL_I2C_ErrorCallback>
}
 8009c6e:	bf00      	nop
 8009c70:	3718      	adds	r7, #24
 8009c72:	46bd      	mov	sp, r7
 8009c74:	bd80      	pop	{r7, pc}
 8009c76:	bf00      	nop
 8009c78:	20000224 	.word	0x20000224
 8009c7c:	14f8b589 	.word	0x14f8b589

08009c80 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b084      	sub	sp, #16
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	60f8      	str	r0, [r7, #12]
 8009c88:	60b9      	str	r1, [r7, #8]
 8009c8a:	603b      	str	r3, [r7, #0]
 8009c8c:	4613      	mov	r3, r2
 8009c8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009c90:	e025      	b.n	8009cde <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009c92:	683b      	ldr	r3, [r7, #0]
 8009c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c98:	d021      	beq.n	8009cde <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c9a:	f7fc fe47 	bl	800692c <HAL_GetTick>
 8009c9e:	4602      	mov	r2, r0
 8009ca0:	69bb      	ldr	r3, [r7, #24]
 8009ca2:	1ad3      	subs	r3, r2, r3
 8009ca4:	683a      	ldr	r2, [r7, #0]
 8009ca6:	429a      	cmp	r2, r3
 8009ca8:	d302      	bcc.n	8009cb0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009caa:	683b      	ldr	r3, [r7, #0]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d116      	bne.n	8009cde <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	2220      	movs	r2, #32
 8009cba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cca:	f043 0220 	orr.w	r2, r3, #32
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009cda:	2301      	movs	r3, #1
 8009cdc:	e023      	b.n	8009d26 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009cde:	68bb      	ldr	r3, [r7, #8]
 8009ce0:	0c1b      	lsrs	r3, r3, #16
 8009ce2:	b2db      	uxtb	r3, r3
 8009ce4:	2b01      	cmp	r3, #1
 8009ce6:	d10d      	bne.n	8009d04 <I2C_WaitOnFlagUntilTimeout+0x84>
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	695b      	ldr	r3, [r3, #20]
 8009cee:	43da      	mvns	r2, r3
 8009cf0:	68bb      	ldr	r3, [r7, #8]
 8009cf2:	4013      	ands	r3, r2
 8009cf4:	b29b      	uxth	r3, r3
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	bf0c      	ite	eq
 8009cfa:	2301      	moveq	r3, #1
 8009cfc:	2300      	movne	r3, #0
 8009cfe:	b2db      	uxtb	r3, r3
 8009d00:	461a      	mov	r2, r3
 8009d02:	e00c      	b.n	8009d1e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	699b      	ldr	r3, [r3, #24]
 8009d0a:	43da      	mvns	r2, r3
 8009d0c:	68bb      	ldr	r3, [r7, #8]
 8009d0e:	4013      	ands	r3, r2
 8009d10:	b29b      	uxth	r3, r3
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	bf0c      	ite	eq
 8009d16:	2301      	moveq	r3, #1
 8009d18:	2300      	movne	r3, #0
 8009d1a:	b2db      	uxtb	r3, r3
 8009d1c:	461a      	mov	r2, r3
 8009d1e:	79fb      	ldrb	r3, [r7, #7]
 8009d20:	429a      	cmp	r2, r3
 8009d22:	d0b6      	beq.n	8009c92 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009d24:	2300      	movs	r3, #0
}
 8009d26:	4618      	mov	r0, r3
 8009d28:	3710      	adds	r7, #16
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	bd80      	pop	{r7, pc}

08009d2e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009d2e:	b580      	push	{r7, lr}
 8009d30:	b084      	sub	sp, #16
 8009d32:	af00      	add	r7, sp, #0
 8009d34:	60f8      	str	r0, [r7, #12]
 8009d36:	60b9      	str	r1, [r7, #8]
 8009d38:	607a      	str	r2, [r7, #4]
 8009d3a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009d3c:	e051      	b.n	8009de2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	695b      	ldr	r3, [r3, #20]
 8009d44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009d48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d4c:	d123      	bne.n	8009d96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	681a      	ldr	r2, [r3, #0]
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009d5c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009d66:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	2220      	movs	r2, #32
 8009d72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	2200      	movs	r2, #0
 8009d7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d82:	f043 0204 	orr.w	r2, r3, #4
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	2200      	movs	r2, #0
 8009d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009d92:	2301      	movs	r3, #1
 8009d94:	e046      	b.n	8009e24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d9c:	d021      	beq.n	8009de2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009d9e:	f7fc fdc5 	bl	800692c <HAL_GetTick>
 8009da2:	4602      	mov	r2, r0
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	1ad3      	subs	r3, r2, r3
 8009da8:	687a      	ldr	r2, [r7, #4]
 8009daa:	429a      	cmp	r2, r3
 8009dac:	d302      	bcc.n	8009db4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d116      	bne.n	8009de2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	2200      	movs	r2, #0
 8009db8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	2220      	movs	r2, #32
 8009dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dce:	f043 0220 	orr.w	r2, r3, #32
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	2200      	movs	r2, #0
 8009dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009dde:	2301      	movs	r3, #1
 8009de0:	e020      	b.n	8009e24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009de2:	68bb      	ldr	r3, [r7, #8]
 8009de4:	0c1b      	lsrs	r3, r3, #16
 8009de6:	b2db      	uxtb	r3, r3
 8009de8:	2b01      	cmp	r3, #1
 8009dea:	d10c      	bne.n	8009e06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	695b      	ldr	r3, [r3, #20]
 8009df2:	43da      	mvns	r2, r3
 8009df4:	68bb      	ldr	r3, [r7, #8]
 8009df6:	4013      	ands	r3, r2
 8009df8:	b29b      	uxth	r3, r3
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	bf14      	ite	ne
 8009dfe:	2301      	movne	r3, #1
 8009e00:	2300      	moveq	r3, #0
 8009e02:	b2db      	uxtb	r3, r3
 8009e04:	e00b      	b.n	8009e1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	699b      	ldr	r3, [r3, #24]
 8009e0c:	43da      	mvns	r2, r3
 8009e0e:	68bb      	ldr	r3, [r7, #8]
 8009e10:	4013      	ands	r3, r2
 8009e12:	b29b      	uxth	r3, r3
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	bf14      	ite	ne
 8009e18:	2301      	movne	r3, #1
 8009e1a:	2300      	moveq	r3, #0
 8009e1c:	b2db      	uxtb	r3, r3
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d18d      	bne.n	8009d3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8009e22:	2300      	movs	r3, #0
}
 8009e24:	4618      	mov	r0, r3
 8009e26:	3710      	adds	r7, #16
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	bd80      	pop	{r7, pc}

08009e2c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b084      	sub	sp, #16
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	60f8      	str	r0, [r7, #12]
 8009e34:	60b9      	str	r1, [r7, #8]
 8009e36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009e38:	e02d      	b.n	8009e96 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009e3a:	68f8      	ldr	r0, [r7, #12]
 8009e3c:	f000 f900 	bl	800a040 <I2C_IsAcknowledgeFailed>
 8009e40:	4603      	mov	r3, r0
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d001      	beq.n	8009e4a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009e46:	2301      	movs	r3, #1
 8009e48:	e02d      	b.n	8009ea6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009e4a:	68bb      	ldr	r3, [r7, #8]
 8009e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e50:	d021      	beq.n	8009e96 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e52:	f7fc fd6b 	bl	800692c <HAL_GetTick>
 8009e56:	4602      	mov	r2, r0
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	1ad3      	subs	r3, r2, r3
 8009e5c:	68ba      	ldr	r2, [r7, #8]
 8009e5e:	429a      	cmp	r2, r3
 8009e60:	d302      	bcc.n	8009e68 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009e62:	68bb      	ldr	r3, [r7, #8]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d116      	bne.n	8009e96 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	2220      	movs	r2, #32
 8009e72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	2200      	movs	r2, #0
 8009e7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e82:	f043 0220 	orr.w	r2, r3, #32
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009e92:	2301      	movs	r3, #1
 8009e94:	e007      	b.n	8009ea6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	695b      	ldr	r3, [r3, #20]
 8009e9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ea0:	2b80      	cmp	r3, #128	; 0x80
 8009ea2:	d1ca      	bne.n	8009e3a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009ea4:	2300      	movs	r3, #0
}
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	3710      	adds	r7, #16
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	bd80      	pop	{r7, pc}

08009eae <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009eae:	b580      	push	{r7, lr}
 8009eb0:	b084      	sub	sp, #16
 8009eb2:	af00      	add	r7, sp, #0
 8009eb4:	60f8      	str	r0, [r7, #12]
 8009eb6:	60b9      	str	r1, [r7, #8]
 8009eb8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009eba:	e02d      	b.n	8009f18 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009ebc:	68f8      	ldr	r0, [r7, #12]
 8009ebe:	f000 f8bf 	bl	800a040 <I2C_IsAcknowledgeFailed>
 8009ec2:	4603      	mov	r3, r0
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d001      	beq.n	8009ecc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009ec8:	2301      	movs	r3, #1
 8009eca:	e02d      	b.n	8009f28 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009ecc:	68bb      	ldr	r3, [r7, #8]
 8009ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ed2:	d021      	beq.n	8009f18 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009ed4:	f7fc fd2a 	bl	800692c <HAL_GetTick>
 8009ed8:	4602      	mov	r2, r0
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	1ad3      	subs	r3, r2, r3
 8009ede:	68ba      	ldr	r2, [r7, #8]
 8009ee0:	429a      	cmp	r2, r3
 8009ee2:	d302      	bcc.n	8009eea <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009ee4:	68bb      	ldr	r3, [r7, #8]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d116      	bne.n	8009f18 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	2200      	movs	r2, #0
 8009eee:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	2220      	movs	r2, #32
 8009ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	2200      	movs	r2, #0
 8009efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f04:	f043 0220 	orr.w	r2, r3, #32
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	2200      	movs	r2, #0
 8009f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009f14:	2301      	movs	r3, #1
 8009f16:	e007      	b.n	8009f28 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	695b      	ldr	r3, [r3, #20]
 8009f1e:	f003 0304 	and.w	r3, r3, #4
 8009f22:	2b04      	cmp	r3, #4
 8009f24:	d1ca      	bne.n	8009ebc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009f26:	2300      	movs	r3, #0
}
 8009f28:	4618      	mov	r0, r3
 8009f2a:	3710      	adds	r7, #16
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	bd80      	pop	{r7, pc}

08009f30 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8009f30:	b480      	push	{r7}
 8009f32:	b085      	sub	sp, #20
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009f38:	2300      	movs	r3, #0
 8009f3a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8009f3c:	4b13      	ldr	r3, [pc, #76]	; (8009f8c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	08db      	lsrs	r3, r3, #3
 8009f42:	4a13      	ldr	r2, [pc, #76]	; (8009f90 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8009f44:	fba2 2303 	umull	r2, r3, r2, r3
 8009f48:	0a1a      	lsrs	r2, r3, #8
 8009f4a:	4613      	mov	r3, r2
 8009f4c:	009b      	lsls	r3, r3, #2
 8009f4e:	4413      	add	r3, r2
 8009f50:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	3b01      	subs	r3, #1
 8009f56:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d107      	bne.n	8009f6e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f62:	f043 0220 	orr.w	r2, r3, #32
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8009f6a:	2301      	movs	r3, #1
 8009f6c:	e008      	b.n	8009f80 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009f78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f7c:	d0e9      	beq.n	8009f52 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8009f7e:	2300      	movs	r3, #0
}
 8009f80:	4618      	mov	r0, r3
 8009f82:	3714      	adds	r7, #20
 8009f84:	46bd      	mov	sp, r7
 8009f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8a:	4770      	bx	lr
 8009f8c:	20000224 	.word	0x20000224
 8009f90:	14f8b589 	.word	0x14f8b589

08009f94 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b084      	sub	sp, #16
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	60f8      	str	r0, [r7, #12]
 8009f9c:	60b9      	str	r1, [r7, #8]
 8009f9e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009fa0:	e042      	b.n	800a028 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	695b      	ldr	r3, [r3, #20]
 8009fa8:	f003 0310 	and.w	r3, r3, #16
 8009fac:	2b10      	cmp	r3, #16
 8009fae:	d119      	bne.n	8009fe4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	f06f 0210 	mvn.w	r2, #16
 8009fb8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	2220      	movs	r2, #32
 8009fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	2200      	movs	r2, #0
 8009fcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	2200      	movs	r2, #0
 8009fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009fe0:	2301      	movs	r3, #1
 8009fe2:	e029      	b.n	800a038 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009fe4:	f7fc fca2 	bl	800692c <HAL_GetTick>
 8009fe8:	4602      	mov	r2, r0
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	1ad3      	subs	r3, r2, r3
 8009fee:	68ba      	ldr	r2, [r7, #8]
 8009ff0:	429a      	cmp	r2, r3
 8009ff2:	d302      	bcc.n	8009ffa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009ff4:	68bb      	ldr	r3, [r7, #8]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d116      	bne.n	800a028 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	2220      	movs	r2, #32
 800a004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	2200      	movs	r2, #0
 800a00c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a014:	f043 0220 	orr.w	r2, r3, #32
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	2200      	movs	r2, #0
 800a020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a024:	2301      	movs	r3, #1
 800a026:	e007      	b.n	800a038 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	695b      	ldr	r3, [r3, #20]
 800a02e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a032:	2b40      	cmp	r3, #64	; 0x40
 800a034:	d1b5      	bne.n	8009fa2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a036:	2300      	movs	r3, #0
}
 800a038:	4618      	mov	r0, r3
 800a03a:	3710      	adds	r7, #16
 800a03c:	46bd      	mov	sp, r7
 800a03e:	bd80      	pop	{r7, pc}

0800a040 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a040:	b480      	push	{r7}
 800a042:	b083      	sub	sp, #12
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	695b      	ldr	r3, [r3, #20]
 800a04e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a052:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a056:	d11b      	bne.n	800a090 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a060:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	2200      	movs	r2, #0
 800a066:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	2220      	movs	r2, #32
 800a06c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	2200      	movs	r2, #0
 800a074:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a07c:	f043 0204 	orr.w	r2, r3, #4
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	2200      	movs	r2, #0
 800a088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a08c:	2301      	movs	r3, #1
 800a08e:	e000      	b.n	800a092 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a090:	2300      	movs	r3, #0
}
 800a092:	4618      	mov	r0, r3
 800a094:	370c      	adds	r7, #12
 800a096:	46bd      	mov	sp, r7
 800a098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09c:	4770      	bx	lr

0800a09e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800a09e:	b480      	push	{r7}
 800a0a0:	b083      	sub	sp, #12
 800a0a2:	af00      	add	r7, sp, #0
 800a0a4:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0aa:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800a0ae:	d103      	bne.n	800a0b8 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	2201      	movs	r2, #1
 800a0b4:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800a0b6:	e007      	b.n	800a0c8 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0bc:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800a0c0:	d102      	bne.n	800a0c8 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	2208      	movs	r2, #8
 800a0c6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800a0c8:	bf00      	nop
 800a0ca:	370c      	adds	r7, #12
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d2:	4770      	bx	lr

0800a0d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b086      	sub	sp, #24
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d101      	bne.n	800a0e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a0e2:	2301      	movs	r3, #1
 800a0e4:	e267      	b.n	800a5b6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	f003 0301 	and.w	r3, r3, #1
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d075      	beq.n	800a1de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a0f2:	4b88      	ldr	r3, [pc, #544]	; (800a314 <HAL_RCC_OscConfig+0x240>)
 800a0f4:	689b      	ldr	r3, [r3, #8]
 800a0f6:	f003 030c 	and.w	r3, r3, #12
 800a0fa:	2b04      	cmp	r3, #4
 800a0fc:	d00c      	beq.n	800a118 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a0fe:	4b85      	ldr	r3, [pc, #532]	; (800a314 <HAL_RCC_OscConfig+0x240>)
 800a100:	689b      	ldr	r3, [r3, #8]
 800a102:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a106:	2b08      	cmp	r3, #8
 800a108:	d112      	bne.n	800a130 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a10a:	4b82      	ldr	r3, [pc, #520]	; (800a314 <HAL_RCC_OscConfig+0x240>)
 800a10c:	685b      	ldr	r3, [r3, #4]
 800a10e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a112:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a116:	d10b      	bne.n	800a130 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a118:	4b7e      	ldr	r3, [pc, #504]	; (800a314 <HAL_RCC_OscConfig+0x240>)
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a120:	2b00      	cmp	r3, #0
 800a122:	d05b      	beq.n	800a1dc <HAL_RCC_OscConfig+0x108>
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	685b      	ldr	r3, [r3, #4]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d157      	bne.n	800a1dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800a12c:	2301      	movs	r3, #1
 800a12e:	e242      	b.n	800a5b6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	685b      	ldr	r3, [r3, #4]
 800a134:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a138:	d106      	bne.n	800a148 <HAL_RCC_OscConfig+0x74>
 800a13a:	4b76      	ldr	r3, [pc, #472]	; (800a314 <HAL_RCC_OscConfig+0x240>)
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	4a75      	ldr	r2, [pc, #468]	; (800a314 <HAL_RCC_OscConfig+0x240>)
 800a140:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a144:	6013      	str	r3, [r2, #0]
 800a146:	e01d      	b.n	800a184 <HAL_RCC_OscConfig+0xb0>
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	685b      	ldr	r3, [r3, #4]
 800a14c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a150:	d10c      	bne.n	800a16c <HAL_RCC_OscConfig+0x98>
 800a152:	4b70      	ldr	r3, [pc, #448]	; (800a314 <HAL_RCC_OscConfig+0x240>)
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	4a6f      	ldr	r2, [pc, #444]	; (800a314 <HAL_RCC_OscConfig+0x240>)
 800a158:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a15c:	6013      	str	r3, [r2, #0]
 800a15e:	4b6d      	ldr	r3, [pc, #436]	; (800a314 <HAL_RCC_OscConfig+0x240>)
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	4a6c      	ldr	r2, [pc, #432]	; (800a314 <HAL_RCC_OscConfig+0x240>)
 800a164:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a168:	6013      	str	r3, [r2, #0]
 800a16a:	e00b      	b.n	800a184 <HAL_RCC_OscConfig+0xb0>
 800a16c:	4b69      	ldr	r3, [pc, #420]	; (800a314 <HAL_RCC_OscConfig+0x240>)
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	4a68      	ldr	r2, [pc, #416]	; (800a314 <HAL_RCC_OscConfig+0x240>)
 800a172:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a176:	6013      	str	r3, [r2, #0]
 800a178:	4b66      	ldr	r3, [pc, #408]	; (800a314 <HAL_RCC_OscConfig+0x240>)
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	4a65      	ldr	r2, [pc, #404]	; (800a314 <HAL_RCC_OscConfig+0x240>)
 800a17e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a182:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	685b      	ldr	r3, [r3, #4]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d013      	beq.n	800a1b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a18c:	f7fc fbce 	bl	800692c <HAL_GetTick>
 800a190:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a192:	e008      	b.n	800a1a6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a194:	f7fc fbca 	bl	800692c <HAL_GetTick>
 800a198:	4602      	mov	r2, r0
 800a19a:	693b      	ldr	r3, [r7, #16]
 800a19c:	1ad3      	subs	r3, r2, r3
 800a19e:	2b64      	cmp	r3, #100	; 0x64
 800a1a0:	d901      	bls.n	800a1a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800a1a2:	2303      	movs	r3, #3
 800a1a4:	e207      	b.n	800a5b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a1a6:	4b5b      	ldr	r3, [pc, #364]	; (800a314 <HAL_RCC_OscConfig+0x240>)
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d0f0      	beq.n	800a194 <HAL_RCC_OscConfig+0xc0>
 800a1b2:	e014      	b.n	800a1de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a1b4:	f7fc fbba 	bl	800692c <HAL_GetTick>
 800a1b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a1ba:	e008      	b.n	800a1ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a1bc:	f7fc fbb6 	bl	800692c <HAL_GetTick>
 800a1c0:	4602      	mov	r2, r0
 800a1c2:	693b      	ldr	r3, [r7, #16]
 800a1c4:	1ad3      	subs	r3, r2, r3
 800a1c6:	2b64      	cmp	r3, #100	; 0x64
 800a1c8:	d901      	bls.n	800a1ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a1ca:	2303      	movs	r3, #3
 800a1cc:	e1f3      	b.n	800a5b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a1ce:	4b51      	ldr	r3, [pc, #324]	; (800a314 <HAL_RCC_OscConfig+0x240>)
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d1f0      	bne.n	800a1bc <HAL_RCC_OscConfig+0xe8>
 800a1da:	e000      	b.n	800a1de <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a1dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	f003 0302 	and.w	r3, r3, #2
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d063      	beq.n	800a2b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a1ea:	4b4a      	ldr	r3, [pc, #296]	; (800a314 <HAL_RCC_OscConfig+0x240>)
 800a1ec:	689b      	ldr	r3, [r3, #8]
 800a1ee:	f003 030c 	and.w	r3, r3, #12
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d00b      	beq.n	800a20e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a1f6:	4b47      	ldr	r3, [pc, #284]	; (800a314 <HAL_RCC_OscConfig+0x240>)
 800a1f8:	689b      	ldr	r3, [r3, #8]
 800a1fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a1fe:	2b08      	cmp	r3, #8
 800a200:	d11c      	bne.n	800a23c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a202:	4b44      	ldr	r3, [pc, #272]	; (800a314 <HAL_RCC_OscConfig+0x240>)
 800a204:	685b      	ldr	r3, [r3, #4]
 800a206:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d116      	bne.n	800a23c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a20e:	4b41      	ldr	r3, [pc, #260]	; (800a314 <HAL_RCC_OscConfig+0x240>)
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	f003 0302 	and.w	r3, r3, #2
 800a216:	2b00      	cmp	r3, #0
 800a218:	d005      	beq.n	800a226 <HAL_RCC_OscConfig+0x152>
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	68db      	ldr	r3, [r3, #12]
 800a21e:	2b01      	cmp	r3, #1
 800a220:	d001      	beq.n	800a226 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800a222:	2301      	movs	r3, #1
 800a224:	e1c7      	b.n	800a5b6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a226:	4b3b      	ldr	r3, [pc, #236]	; (800a314 <HAL_RCC_OscConfig+0x240>)
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	691b      	ldr	r3, [r3, #16]
 800a232:	00db      	lsls	r3, r3, #3
 800a234:	4937      	ldr	r1, [pc, #220]	; (800a314 <HAL_RCC_OscConfig+0x240>)
 800a236:	4313      	orrs	r3, r2
 800a238:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a23a:	e03a      	b.n	800a2b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	68db      	ldr	r3, [r3, #12]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d020      	beq.n	800a286 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a244:	4b34      	ldr	r3, [pc, #208]	; (800a318 <HAL_RCC_OscConfig+0x244>)
 800a246:	2201      	movs	r2, #1
 800a248:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a24a:	f7fc fb6f 	bl	800692c <HAL_GetTick>
 800a24e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a250:	e008      	b.n	800a264 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a252:	f7fc fb6b 	bl	800692c <HAL_GetTick>
 800a256:	4602      	mov	r2, r0
 800a258:	693b      	ldr	r3, [r7, #16]
 800a25a:	1ad3      	subs	r3, r2, r3
 800a25c:	2b02      	cmp	r3, #2
 800a25e:	d901      	bls.n	800a264 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800a260:	2303      	movs	r3, #3
 800a262:	e1a8      	b.n	800a5b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a264:	4b2b      	ldr	r3, [pc, #172]	; (800a314 <HAL_RCC_OscConfig+0x240>)
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	f003 0302 	and.w	r3, r3, #2
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d0f0      	beq.n	800a252 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a270:	4b28      	ldr	r3, [pc, #160]	; (800a314 <HAL_RCC_OscConfig+0x240>)
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	691b      	ldr	r3, [r3, #16]
 800a27c:	00db      	lsls	r3, r3, #3
 800a27e:	4925      	ldr	r1, [pc, #148]	; (800a314 <HAL_RCC_OscConfig+0x240>)
 800a280:	4313      	orrs	r3, r2
 800a282:	600b      	str	r3, [r1, #0]
 800a284:	e015      	b.n	800a2b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a286:	4b24      	ldr	r3, [pc, #144]	; (800a318 <HAL_RCC_OscConfig+0x244>)
 800a288:	2200      	movs	r2, #0
 800a28a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a28c:	f7fc fb4e 	bl	800692c <HAL_GetTick>
 800a290:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a292:	e008      	b.n	800a2a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a294:	f7fc fb4a 	bl	800692c <HAL_GetTick>
 800a298:	4602      	mov	r2, r0
 800a29a:	693b      	ldr	r3, [r7, #16]
 800a29c:	1ad3      	subs	r3, r2, r3
 800a29e:	2b02      	cmp	r3, #2
 800a2a0:	d901      	bls.n	800a2a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800a2a2:	2303      	movs	r3, #3
 800a2a4:	e187      	b.n	800a5b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a2a6:	4b1b      	ldr	r3, [pc, #108]	; (800a314 <HAL_RCC_OscConfig+0x240>)
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	f003 0302 	and.w	r3, r3, #2
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d1f0      	bne.n	800a294 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	f003 0308 	and.w	r3, r3, #8
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d036      	beq.n	800a32c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	695b      	ldr	r3, [r3, #20]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d016      	beq.n	800a2f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a2c6:	4b15      	ldr	r3, [pc, #84]	; (800a31c <HAL_RCC_OscConfig+0x248>)
 800a2c8:	2201      	movs	r2, #1
 800a2ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a2cc:	f7fc fb2e 	bl	800692c <HAL_GetTick>
 800a2d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a2d2:	e008      	b.n	800a2e6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a2d4:	f7fc fb2a 	bl	800692c <HAL_GetTick>
 800a2d8:	4602      	mov	r2, r0
 800a2da:	693b      	ldr	r3, [r7, #16]
 800a2dc:	1ad3      	subs	r3, r2, r3
 800a2de:	2b02      	cmp	r3, #2
 800a2e0:	d901      	bls.n	800a2e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800a2e2:	2303      	movs	r3, #3
 800a2e4:	e167      	b.n	800a5b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a2e6:	4b0b      	ldr	r3, [pc, #44]	; (800a314 <HAL_RCC_OscConfig+0x240>)
 800a2e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a2ea:	f003 0302 	and.w	r3, r3, #2
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d0f0      	beq.n	800a2d4 <HAL_RCC_OscConfig+0x200>
 800a2f2:	e01b      	b.n	800a32c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a2f4:	4b09      	ldr	r3, [pc, #36]	; (800a31c <HAL_RCC_OscConfig+0x248>)
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a2fa:	f7fc fb17 	bl	800692c <HAL_GetTick>
 800a2fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a300:	e00e      	b.n	800a320 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a302:	f7fc fb13 	bl	800692c <HAL_GetTick>
 800a306:	4602      	mov	r2, r0
 800a308:	693b      	ldr	r3, [r7, #16]
 800a30a:	1ad3      	subs	r3, r2, r3
 800a30c:	2b02      	cmp	r3, #2
 800a30e:	d907      	bls.n	800a320 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800a310:	2303      	movs	r3, #3
 800a312:	e150      	b.n	800a5b6 <HAL_RCC_OscConfig+0x4e2>
 800a314:	40023800 	.word	0x40023800
 800a318:	42470000 	.word	0x42470000
 800a31c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a320:	4b88      	ldr	r3, [pc, #544]	; (800a544 <HAL_RCC_OscConfig+0x470>)
 800a322:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a324:	f003 0302 	and.w	r3, r3, #2
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d1ea      	bne.n	800a302 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	f003 0304 	and.w	r3, r3, #4
 800a334:	2b00      	cmp	r3, #0
 800a336:	f000 8097 	beq.w	800a468 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a33a:	2300      	movs	r3, #0
 800a33c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a33e:	4b81      	ldr	r3, [pc, #516]	; (800a544 <HAL_RCC_OscConfig+0x470>)
 800a340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a346:	2b00      	cmp	r3, #0
 800a348:	d10f      	bne.n	800a36a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a34a:	2300      	movs	r3, #0
 800a34c:	60bb      	str	r3, [r7, #8]
 800a34e:	4b7d      	ldr	r3, [pc, #500]	; (800a544 <HAL_RCC_OscConfig+0x470>)
 800a350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a352:	4a7c      	ldr	r2, [pc, #496]	; (800a544 <HAL_RCC_OscConfig+0x470>)
 800a354:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a358:	6413      	str	r3, [r2, #64]	; 0x40
 800a35a:	4b7a      	ldr	r3, [pc, #488]	; (800a544 <HAL_RCC_OscConfig+0x470>)
 800a35c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a35e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a362:	60bb      	str	r3, [r7, #8]
 800a364:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a366:	2301      	movs	r3, #1
 800a368:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a36a:	4b77      	ldr	r3, [pc, #476]	; (800a548 <HAL_RCC_OscConfig+0x474>)
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a372:	2b00      	cmp	r3, #0
 800a374:	d118      	bne.n	800a3a8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a376:	4b74      	ldr	r3, [pc, #464]	; (800a548 <HAL_RCC_OscConfig+0x474>)
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	4a73      	ldr	r2, [pc, #460]	; (800a548 <HAL_RCC_OscConfig+0x474>)
 800a37c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a380:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a382:	f7fc fad3 	bl	800692c <HAL_GetTick>
 800a386:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a388:	e008      	b.n	800a39c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a38a:	f7fc facf 	bl	800692c <HAL_GetTick>
 800a38e:	4602      	mov	r2, r0
 800a390:	693b      	ldr	r3, [r7, #16]
 800a392:	1ad3      	subs	r3, r2, r3
 800a394:	2b02      	cmp	r3, #2
 800a396:	d901      	bls.n	800a39c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800a398:	2303      	movs	r3, #3
 800a39a:	e10c      	b.n	800a5b6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a39c:	4b6a      	ldr	r3, [pc, #424]	; (800a548 <HAL_RCC_OscConfig+0x474>)
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d0f0      	beq.n	800a38a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	689b      	ldr	r3, [r3, #8]
 800a3ac:	2b01      	cmp	r3, #1
 800a3ae:	d106      	bne.n	800a3be <HAL_RCC_OscConfig+0x2ea>
 800a3b0:	4b64      	ldr	r3, [pc, #400]	; (800a544 <HAL_RCC_OscConfig+0x470>)
 800a3b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3b4:	4a63      	ldr	r2, [pc, #396]	; (800a544 <HAL_RCC_OscConfig+0x470>)
 800a3b6:	f043 0301 	orr.w	r3, r3, #1
 800a3ba:	6713      	str	r3, [r2, #112]	; 0x70
 800a3bc:	e01c      	b.n	800a3f8 <HAL_RCC_OscConfig+0x324>
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	689b      	ldr	r3, [r3, #8]
 800a3c2:	2b05      	cmp	r3, #5
 800a3c4:	d10c      	bne.n	800a3e0 <HAL_RCC_OscConfig+0x30c>
 800a3c6:	4b5f      	ldr	r3, [pc, #380]	; (800a544 <HAL_RCC_OscConfig+0x470>)
 800a3c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3ca:	4a5e      	ldr	r2, [pc, #376]	; (800a544 <HAL_RCC_OscConfig+0x470>)
 800a3cc:	f043 0304 	orr.w	r3, r3, #4
 800a3d0:	6713      	str	r3, [r2, #112]	; 0x70
 800a3d2:	4b5c      	ldr	r3, [pc, #368]	; (800a544 <HAL_RCC_OscConfig+0x470>)
 800a3d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3d6:	4a5b      	ldr	r2, [pc, #364]	; (800a544 <HAL_RCC_OscConfig+0x470>)
 800a3d8:	f043 0301 	orr.w	r3, r3, #1
 800a3dc:	6713      	str	r3, [r2, #112]	; 0x70
 800a3de:	e00b      	b.n	800a3f8 <HAL_RCC_OscConfig+0x324>
 800a3e0:	4b58      	ldr	r3, [pc, #352]	; (800a544 <HAL_RCC_OscConfig+0x470>)
 800a3e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3e4:	4a57      	ldr	r2, [pc, #348]	; (800a544 <HAL_RCC_OscConfig+0x470>)
 800a3e6:	f023 0301 	bic.w	r3, r3, #1
 800a3ea:	6713      	str	r3, [r2, #112]	; 0x70
 800a3ec:	4b55      	ldr	r3, [pc, #340]	; (800a544 <HAL_RCC_OscConfig+0x470>)
 800a3ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3f0:	4a54      	ldr	r2, [pc, #336]	; (800a544 <HAL_RCC_OscConfig+0x470>)
 800a3f2:	f023 0304 	bic.w	r3, r3, #4
 800a3f6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	689b      	ldr	r3, [r3, #8]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d015      	beq.n	800a42c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a400:	f7fc fa94 	bl	800692c <HAL_GetTick>
 800a404:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a406:	e00a      	b.n	800a41e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a408:	f7fc fa90 	bl	800692c <HAL_GetTick>
 800a40c:	4602      	mov	r2, r0
 800a40e:	693b      	ldr	r3, [r7, #16]
 800a410:	1ad3      	subs	r3, r2, r3
 800a412:	f241 3288 	movw	r2, #5000	; 0x1388
 800a416:	4293      	cmp	r3, r2
 800a418:	d901      	bls.n	800a41e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800a41a:	2303      	movs	r3, #3
 800a41c:	e0cb      	b.n	800a5b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a41e:	4b49      	ldr	r3, [pc, #292]	; (800a544 <HAL_RCC_OscConfig+0x470>)
 800a420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a422:	f003 0302 	and.w	r3, r3, #2
 800a426:	2b00      	cmp	r3, #0
 800a428:	d0ee      	beq.n	800a408 <HAL_RCC_OscConfig+0x334>
 800a42a:	e014      	b.n	800a456 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a42c:	f7fc fa7e 	bl	800692c <HAL_GetTick>
 800a430:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a432:	e00a      	b.n	800a44a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a434:	f7fc fa7a 	bl	800692c <HAL_GetTick>
 800a438:	4602      	mov	r2, r0
 800a43a:	693b      	ldr	r3, [r7, #16]
 800a43c:	1ad3      	subs	r3, r2, r3
 800a43e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a442:	4293      	cmp	r3, r2
 800a444:	d901      	bls.n	800a44a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800a446:	2303      	movs	r3, #3
 800a448:	e0b5      	b.n	800a5b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a44a:	4b3e      	ldr	r3, [pc, #248]	; (800a544 <HAL_RCC_OscConfig+0x470>)
 800a44c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a44e:	f003 0302 	and.w	r3, r3, #2
 800a452:	2b00      	cmp	r3, #0
 800a454:	d1ee      	bne.n	800a434 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a456:	7dfb      	ldrb	r3, [r7, #23]
 800a458:	2b01      	cmp	r3, #1
 800a45a:	d105      	bne.n	800a468 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a45c:	4b39      	ldr	r3, [pc, #228]	; (800a544 <HAL_RCC_OscConfig+0x470>)
 800a45e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a460:	4a38      	ldr	r2, [pc, #224]	; (800a544 <HAL_RCC_OscConfig+0x470>)
 800a462:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a466:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	699b      	ldr	r3, [r3, #24]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	f000 80a1 	beq.w	800a5b4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a472:	4b34      	ldr	r3, [pc, #208]	; (800a544 <HAL_RCC_OscConfig+0x470>)
 800a474:	689b      	ldr	r3, [r3, #8]
 800a476:	f003 030c 	and.w	r3, r3, #12
 800a47a:	2b08      	cmp	r3, #8
 800a47c:	d05c      	beq.n	800a538 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	699b      	ldr	r3, [r3, #24]
 800a482:	2b02      	cmp	r3, #2
 800a484:	d141      	bne.n	800a50a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a486:	4b31      	ldr	r3, [pc, #196]	; (800a54c <HAL_RCC_OscConfig+0x478>)
 800a488:	2200      	movs	r2, #0
 800a48a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a48c:	f7fc fa4e 	bl	800692c <HAL_GetTick>
 800a490:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a492:	e008      	b.n	800a4a6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a494:	f7fc fa4a 	bl	800692c <HAL_GetTick>
 800a498:	4602      	mov	r2, r0
 800a49a:	693b      	ldr	r3, [r7, #16]
 800a49c:	1ad3      	subs	r3, r2, r3
 800a49e:	2b02      	cmp	r3, #2
 800a4a0:	d901      	bls.n	800a4a6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800a4a2:	2303      	movs	r3, #3
 800a4a4:	e087      	b.n	800a5b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a4a6:	4b27      	ldr	r3, [pc, #156]	; (800a544 <HAL_RCC_OscConfig+0x470>)
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d1f0      	bne.n	800a494 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	69da      	ldr	r2, [r3, #28]
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	6a1b      	ldr	r3, [r3, #32]
 800a4ba:	431a      	orrs	r2, r3
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4c0:	019b      	lsls	r3, r3, #6
 800a4c2:	431a      	orrs	r2, r3
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4c8:	085b      	lsrs	r3, r3, #1
 800a4ca:	3b01      	subs	r3, #1
 800a4cc:	041b      	lsls	r3, r3, #16
 800a4ce:	431a      	orrs	r2, r3
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4d4:	061b      	lsls	r3, r3, #24
 800a4d6:	491b      	ldr	r1, [pc, #108]	; (800a544 <HAL_RCC_OscConfig+0x470>)
 800a4d8:	4313      	orrs	r3, r2
 800a4da:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a4dc:	4b1b      	ldr	r3, [pc, #108]	; (800a54c <HAL_RCC_OscConfig+0x478>)
 800a4de:	2201      	movs	r2, #1
 800a4e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a4e2:	f7fc fa23 	bl	800692c <HAL_GetTick>
 800a4e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a4e8:	e008      	b.n	800a4fc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a4ea:	f7fc fa1f 	bl	800692c <HAL_GetTick>
 800a4ee:	4602      	mov	r2, r0
 800a4f0:	693b      	ldr	r3, [r7, #16]
 800a4f2:	1ad3      	subs	r3, r2, r3
 800a4f4:	2b02      	cmp	r3, #2
 800a4f6:	d901      	bls.n	800a4fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800a4f8:	2303      	movs	r3, #3
 800a4fa:	e05c      	b.n	800a5b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a4fc:	4b11      	ldr	r3, [pc, #68]	; (800a544 <HAL_RCC_OscConfig+0x470>)
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a504:	2b00      	cmp	r3, #0
 800a506:	d0f0      	beq.n	800a4ea <HAL_RCC_OscConfig+0x416>
 800a508:	e054      	b.n	800a5b4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a50a:	4b10      	ldr	r3, [pc, #64]	; (800a54c <HAL_RCC_OscConfig+0x478>)
 800a50c:	2200      	movs	r2, #0
 800a50e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a510:	f7fc fa0c 	bl	800692c <HAL_GetTick>
 800a514:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a516:	e008      	b.n	800a52a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a518:	f7fc fa08 	bl	800692c <HAL_GetTick>
 800a51c:	4602      	mov	r2, r0
 800a51e:	693b      	ldr	r3, [r7, #16]
 800a520:	1ad3      	subs	r3, r2, r3
 800a522:	2b02      	cmp	r3, #2
 800a524:	d901      	bls.n	800a52a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800a526:	2303      	movs	r3, #3
 800a528:	e045      	b.n	800a5b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a52a:	4b06      	ldr	r3, [pc, #24]	; (800a544 <HAL_RCC_OscConfig+0x470>)
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a532:	2b00      	cmp	r3, #0
 800a534:	d1f0      	bne.n	800a518 <HAL_RCC_OscConfig+0x444>
 800a536:	e03d      	b.n	800a5b4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	699b      	ldr	r3, [r3, #24]
 800a53c:	2b01      	cmp	r3, #1
 800a53e:	d107      	bne.n	800a550 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800a540:	2301      	movs	r3, #1
 800a542:	e038      	b.n	800a5b6 <HAL_RCC_OscConfig+0x4e2>
 800a544:	40023800 	.word	0x40023800
 800a548:	40007000 	.word	0x40007000
 800a54c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800a550:	4b1b      	ldr	r3, [pc, #108]	; (800a5c0 <HAL_RCC_OscConfig+0x4ec>)
 800a552:	685b      	ldr	r3, [r3, #4]
 800a554:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	699b      	ldr	r3, [r3, #24]
 800a55a:	2b01      	cmp	r3, #1
 800a55c:	d028      	beq.n	800a5b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a568:	429a      	cmp	r2, r3
 800a56a:	d121      	bne.n	800a5b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a576:	429a      	cmp	r2, r3
 800a578:	d11a      	bne.n	800a5b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a57a:	68fa      	ldr	r2, [r7, #12]
 800a57c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800a580:	4013      	ands	r3, r2
 800a582:	687a      	ldr	r2, [r7, #4]
 800a584:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a586:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a588:	4293      	cmp	r3, r2
 800a58a:	d111      	bne.n	800a5b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a596:	085b      	lsrs	r3, r3, #1
 800a598:	3b01      	subs	r3, #1
 800a59a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a59c:	429a      	cmp	r2, r3
 800a59e:	d107      	bne.n	800a5b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a5ac:	429a      	cmp	r2, r3
 800a5ae:	d001      	beq.n	800a5b4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800a5b0:	2301      	movs	r3, #1
 800a5b2:	e000      	b.n	800a5b6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800a5b4:	2300      	movs	r3, #0
}
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	3718      	adds	r7, #24
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	bd80      	pop	{r7, pc}
 800a5be:	bf00      	nop
 800a5c0:	40023800 	.word	0x40023800

0800a5c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b084      	sub	sp, #16
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]
 800a5cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d101      	bne.n	800a5d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a5d4:	2301      	movs	r3, #1
 800a5d6:	e0cc      	b.n	800a772 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a5d8:	4b68      	ldr	r3, [pc, #416]	; (800a77c <HAL_RCC_ClockConfig+0x1b8>)
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	f003 0307 	and.w	r3, r3, #7
 800a5e0:	683a      	ldr	r2, [r7, #0]
 800a5e2:	429a      	cmp	r2, r3
 800a5e4:	d90c      	bls.n	800a600 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a5e6:	4b65      	ldr	r3, [pc, #404]	; (800a77c <HAL_RCC_ClockConfig+0x1b8>)
 800a5e8:	683a      	ldr	r2, [r7, #0]
 800a5ea:	b2d2      	uxtb	r2, r2
 800a5ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a5ee:	4b63      	ldr	r3, [pc, #396]	; (800a77c <HAL_RCC_ClockConfig+0x1b8>)
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	f003 0307 	and.w	r3, r3, #7
 800a5f6:	683a      	ldr	r2, [r7, #0]
 800a5f8:	429a      	cmp	r2, r3
 800a5fa:	d001      	beq.n	800a600 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a5fc:	2301      	movs	r3, #1
 800a5fe:	e0b8      	b.n	800a772 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	f003 0302 	and.w	r3, r3, #2
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d020      	beq.n	800a64e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	f003 0304 	and.w	r3, r3, #4
 800a614:	2b00      	cmp	r3, #0
 800a616:	d005      	beq.n	800a624 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a618:	4b59      	ldr	r3, [pc, #356]	; (800a780 <HAL_RCC_ClockConfig+0x1bc>)
 800a61a:	689b      	ldr	r3, [r3, #8]
 800a61c:	4a58      	ldr	r2, [pc, #352]	; (800a780 <HAL_RCC_ClockConfig+0x1bc>)
 800a61e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800a622:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	f003 0308 	and.w	r3, r3, #8
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d005      	beq.n	800a63c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a630:	4b53      	ldr	r3, [pc, #332]	; (800a780 <HAL_RCC_ClockConfig+0x1bc>)
 800a632:	689b      	ldr	r3, [r3, #8]
 800a634:	4a52      	ldr	r2, [pc, #328]	; (800a780 <HAL_RCC_ClockConfig+0x1bc>)
 800a636:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800a63a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a63c:	4b50      	ldr	r3, [pc, #320]	; (800a780 <HAL_RCC_ClockConfig+0x1bc>)
 800a63e:	689b      	ldr	r3, [r3, #8]
 800a640:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	689b      	ldr	r3, [r3, #8]
 800a648:	494d      	ldr	r1, [pc, #308]	; (800a780 <HAL_RCC_ClockConfig+0x1bc>)
 800a64a:	4313      	orrs	r3, r2
 800a64c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	f003 0301 	and.w	r3, r3, #1
 800a656:	2b00      	cmp	r3, #0
 800a658:	d044      	beq.n	800a6e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	685b      	ldr	r3, [r3, #4]
 800a65e:	2b01      	cmp	r3, #1
 800a660:	d107      	bne.n	800a672 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a662:	4b47      	ldr	r3, [pc, #284]	; (800a780 <HAL_RCC_ClockConfig+0x1bc>)
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d119      	bne.n	800a6a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a66e:	2301      	movs	r3, #1
 800a670:	e07f      	b.n	800a772 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	685b      	ldr	r3, [r3, #4]
 800a676:	2b02      	cmp	r3, #2
 800a678:	d003      	beq.n	800a682 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a67e:	2b03      	cmp	r3, #3
 800a680:	d107      	bne.n	800a692 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a682:	4b3f      	ldr	r3, [pc, #252]	; (800a780 <HAL_RCC_ClockConfig+0x1bc>)
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d109      	bne.n	800a6a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a68e:	2301      	movs	r3, #1
 800a690:	e06f      	b.n	800a772 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a692:	4b3b      	ldr	r3, [pc, #236]	; (800a780 <HAL_RCC_ClockConfig+0x1bc>)
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	f003 0302 	and.w	r3, r3, #2
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d101      	bne.n	800a6a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a69e:	2301      	movs	r3, #1
 800a6a0:	e067      	b.n	800a772 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a6a2:	4b37      	ldr	r3, [pc, #220]	; (800a780 <HAL_RCC_ClockConfig+0x1bc>)
 800a6a4:	689b      	ldr	r3, [r3, #8]
 800a6a6:	f023 0203 	bic.w	r2, r3, #3
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	685b      	ldr	r3, [r3, #4]
 800a6ae:	4934      	ldr	r1, [pc, #208]	; (800a780 <HAL_RCC_ClockConfig+0x1bc>)
 800a6b0:	4313      	orrs	r3, r2
 800a6b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a6b4:	f7fc f93a 	bl	800692c <HAL_GetTick>
 800a6b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a6ba:	e00a      	b.n	800a6d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a6bc:	f7fc f936 	bl	800692c <HAL_GetTick>
 800a6c0:	4602      	mov	r2, r0
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	1ad3      	subs	r3, r2, r3
 800a6c6:	f241 3288 	movw	r2, #5000	; 0x1388
 800a6ca:	4293      	cmp	r3, r2
 800a6cc:	d901      	bls.n	800a6d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a6ce:	2303      	movs	r3, #3
 800a6d0:	e04f      	b.n	800a772 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a6d2:	4b2b      	ldr	r3, [pc, #172]	; (800a780 <HAL_RCC_ClockConfig+0x1bc>)
 800a6d4:	689b      	ldr	r3, [r3, #8]
 800a6d6:	f003 020c 	and.w	r2, r3, #12
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	685b      	ldr	r3, [r3, #4]
 800a6de:	009b      	lsls	r3, r3, #2
 800a6e0:	429a      	cmp	r2, r3
 800a6e2:	d1eb      	bne.n	800a6bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a6e4:	4b25      	ldr	r3, [pc, #148]	; (800a77c <HAL_RCC_ClockConfig+0x1b8>)
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	f003 0307 	and.w	r3, r3, #7
 800a6ec:	683a      	ldr	r2, [r7, #0]
 800a6ee:	429a      	cmp	r2, r3
 800a6f0:	d20c      	bcs.n	800a70c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a6f2:	4b22      	ldr	r3, [pc, #136]	; (800a77c <HAL_RCC_ClockConfig+0x1b8>)
 800a6f4:	683a      	ldr	r2, [r7, #0]
 800a6f6:	b2d2      	uxtb	r2, r2
 800a6f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a6fa:	4b20      	ldr	r3, [pc, #128]	; (800a77c <HAL_RCC_ClockConfig+0x1b8>)
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	f003 0307 	and.w	r3, r3, #7
 800a702:	683a      	ldr	r2, [r7, #0]
 800a704:	429a      	cmp	r2, r3
 800a706:	d001      	beq.n	800a70c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a708:	2301      	movs	r3, #1
 800a70a:	e032      	b.n	800a772 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	f003 0304 	and.w	r3, r3, #4
 800a714:	2b00      	cmp	r3, #0
 800a716:	d008      	beq.n	800a72a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a718:	4b19      	ldr	r3, [pc, #100]	; (800a780 <HAL_RCC_ClockConfig+0x1bc>)
 800a71a:	689b      	ldr	r3, [r3, #8]
 800a71c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	68db      	ldr	r3, [r3, #12]
 800a724:	4916      	ldr	r1, [pc, #88]	; (800a780 <HAL_RCC_ClockConfig+0x1bc>)
 800a726:	4313      	orrs	r3, r2
 800a728:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	f003 0308 	and.w	r3, r3, #8
 800a732:	2b00      	cmp	r3, #0
 800a734:	d009      	beq.n	800a74a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a736:	4b12      	ldr	r3, [pc, #72]	; (800a780 <HAL_RCC_ClockConfig+0x1bc>)
 800a738:	689b      	ldr	r3, [r3, #8]
 800a73a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	691b      	ldr	r3, [r3, #16]
 800a742:	00db      	lsls	r3, r3, #3
 800a744:	490e      	ldr	r1, [pc, #56]	; (800a780 <HAL_RCC_ClockConfig+0x1bc>)
 800a746:	4313      	orrs	r3, r2
 800a748:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a74a:	f000 f821 	bl	800a790 <HAL_RCC_GetSysClockFreq>
 800a74e:	4602      	mov	r2, r0
 800a750:	4b0b      	ldr	r3, [pc, #44]	; (800a780 <HAL_RCC_ClockConfig+0x1bc>)
 800a752:	689b      	ldr	r3, [r3, #8]
 800a754:	091b      	lsrs	r3, r3, #4
 800a756:	f003 030f 	and.w	r3, r3, #15
 800a75a:	490a      	ldr	r1, [pc, #40]	; (800a784 <HAL_RCC_ClockConfig+0x1c0>)
 800a75c:	5ccb      	ldrb	r3, [r1, r3]
 800a75e:	fa22 f303 	lsr.w	r3, r2, r3
 800a762:	4a09      	ldr	r2, [pc, #36]	; (800a788 <HAL_RCC_ClockConfig+0x1c4>)
 800a764:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800a766:	4b09      	ldr	r3, [pc, #36]	; (800a78c <HAL_RCC_ClockConfig+0x1c8>)
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	4618      	mov	r0, r3
 800a76c:	f7fc f89a 	bl	80068a4 <HAL_InitTick>

  return HAL_OK;
 800a770:	2300      	movs	r3, #0
}
 800a772:	4618      	mov	r0, r3
 800a774:	3710      	adds	r7, #16
 800a776:	46bd      	mov	sp, r7
 800a778:	bd80      	pop	{r7, pc}
 800a77a:	bf00      	nop
 800a77c:	40023c00 	.word	0x40023c00
 800a780:	40023800 	.word	0x40023800
 800a784:	080397dc 	.word	0x080397dc
 800a788:	20000224 	.word	0x20000224
 800a78c:	20000248 	.word	0x20000248

0800a790 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a790:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a794:	b094      	sub	sp, #80	; 0x50
 800a796:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800a798:	2300      	movs	r3, #0
 800a79a:	647b      	str	r3, [r7, #68]	; 0x44
 800a79c:	2300      	movs	r3, #0
 800a79e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a7a8:	4b79      	ldr	r3, [pc, #484]	; (800a990 <HAL_RCC_GetSysClockFreq+0x200>)
 800a7aa:	689b      	ldr	r3, [r3, #8]
 800a7ac:	f003 030c 	and.w	r3, r3, #12
 800a7b0:	2b08      	cmp	r3, #8
 800a7b2:	d00d      	beq.n	800a7d0 <HAL_RCC_GetSysClockFreq+0x40>
 800a7b4:	2b08      	cmp	r3, #8
 800a7b6:	f200 80e1 	bhi.w	800a97c <HAL_RCC_GetSysClockFreq+0x1ec>
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d002      	beq.n	800a7c4 <HAL_RCC_GetSysClockFreq+0x34>
 800a7be:	2b04      	cmp	r3, #4
 800a7c0:	d003      	beq.n	800a7ca <HAL_RCC_GetSysClockFreq+0x3a>
 800a7c2:	e0db      	b.n	800a97c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a7c4:	4b73      	ldr	r3, [pc, #460]	; (800a994 <HAL_RCC_GetSysClockFreq+0x204>)
 800a7c6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800a7c8:	e0db      	b.n	800a982 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a7ca:	4b73      	ldr	r3, [pc, #460]	; (800a998 <HAL_RCC_GetSysClockFreq+0x208>)
 800a7cc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800a7ce:	e0d8      	b.n	800a982 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a7d0:	4b6f      	ldr	r3, [pc, #444]	; (800a990 <HAL_RCC_GetSysClockFreq+0x200>)
 800a7d2:	685b      	ldr	r3, [r3, #4]
 800a7d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a7d8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a7da:	4b6d      	ldr	r3, [pc, #436]	; (800a990 <HAL_RCC_GetSysClockFreq+0x200>)
 800a7dc:	685b      	ldr	r3, [r3, #4]
 800a7de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d063      	beq.n	800a8ae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a7e6:	4b6a      	ldr	r3, [pc, #424]	; (800a990 <HAL_RCC_GetSysClockFreq+0x200>)
 800a7e8:	685b      	ldr	r3, [r3, #4]
 800a7ea:	099b      	lsrs	r3, r3, #6
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	63bb      	str	r3, [r7, #56]	; 0x38
 800a7f0:	63fa      	str	r2, [r7, #60]	; 0x3c
 800a7f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7f8:	633b      	str	r3, [r7, #48]	; 0x30
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	637b      	str	r3, [r7, #52]	; 0x34
 800a7fe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800a802:	4622      	mov	r2, r4
 800a804:	462b      	mov	r3, r5
 800a806:	f04f 0000 	mov.w	r0, #0
 800a80a:	f04f 0100 	mov.w	r1, #0
 800a80e:	0159      	lsls	r1, r3, #5
 800a810:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a814:	0150      	lsls	r0, r2, #5
 800a816:	4602      	mov	r2, r0
 800a818:	460b      	mov	r3, r1
 800a81a:	4621      	mov	r1, r4
 800a81c:	1a51      	subs	r1, r2, r1
 800a81e:	6139      	str	r1, [r7, #16]
 800a820:	4629      	mov	r1, r5
 800a822:	eb63 0301 	sbc.w	r3, r3, r1
 800a826:	617b      	str	r3, [r7, #20]
 800a828:	f04f 0200 	mov.w	r2, #0
 800a82c:	f04f 0300 	mov.w	r3, #0
 800a830:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a834:	4659      	mov	r1, fp
 800a836:	018b      	lsls	r3, r1, #6
 800a838:	4651      	mov	r1, sl
 800a83a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800a83e:	4651      	mov	r1, sl
 800a840:	018a      	lsls	r2, r1, #6
 800a842:	4651      	mov	r1, sl
 800a844:	ebb2 0801 	subs.w	r8, r2, r1
 800a848:	4659      	mov	r1, fp
 800a84a:	eb63 0901 	sbc.w	r9, r3, r1
 800a84e:	f04f 0200 	mov.w	r2, #0
 800a852:	f04f 0300 	mov.w	r3, #0
 800a856:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a85a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a85e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a862:	4690      	mov	r8, r2
 800a864:	4699      	mov	r9, r3
 800a866:	4623      	mov	r3, r4
 800a868:	eb18 0303 	adds.w	r3, r8, r3
 800a86c:	60bb      	str	r3, [r7, #8]
 800a86e:	462b      	mov	r3, r5
 800a870:	eb49 0303 	adc.w	r3, r9, r3
 800a874:	60fb      	str	r3, [r7, #12]
 800a876:	f04f 0200 	mov.w	r2, #0
 800a87a:	f04f 0300 	mov.w	r3, #0
 800a87e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800a882:	4629      	mov	r1, r5
 800a884:	024b      	lsls	r3, r1, #9
 800a886:	4621      	mov	r1, r4
 800a888:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800a88c:	4621      	mov	r1, r4
 800a88e:	024a      	lsls	r2, r1, #9
 800a890:	4610      	mov	r0, r2
 800a892:	4619      	mov	r1, r3
 800a894:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a896:	2200      	movs	r2, #0
 800a898:	62bb      	str	r3, [r7, #40]	; 0x28
 800a89a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a89c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a8a0:	f7f6 f9fa 	bl	8000c98 <__aeabi_uldivmod>
 800a8a4:	4602      	mov	r2, r0
 800a8a6:	460b      	mov	r3, r1
 800a8a8:	4613      	mov	r3, r2
 800a8aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a8ac:	e058      	b.n	800a960 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a8ae:	4b38      	ldr	r3, [pc, #224]	; (800a990 <HAL_RCC_GetSysClockFreq+0x200>)
 800a8b0:	685b      	ldr	r3, [r3, #4]
 800a8b2:	099b      	lsrs	r3, r3, #6
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	4611      	mov	r1, r2
 800a8ba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800a8be:	623b      	str	r3, [r7, #32]
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	627b      	str	r3, [r7, #36]	; 0x24
 800a8c4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800a8c8:	4642      	mov	r2, r8
 800a8ca:	464b      	mov	r3, r9
 800a8cc:	f04f 0000 	mov.w	r0, #0
 800a8d0:	f04f 0100 	mov.w	r1, #0
 800a8d4:	0159      	lsls	r1, r3, #5
 800a8d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a8da:	0150      	lsls	r0, r2, #5
 800a8dc:	4602      	mov	r2, r0
 800a8de:	460b      	mov	r3, r1
 800a8e0:	4641      	mov	r1, r8
 800a8e2:	ebb2 0a01 	subs.w	sl, r2, r1
 800a8e6:	4649      	mov	r1, r9
 800a8e8:	eb63 0b01 	sbc.w	fp, r3, r1
 800a8ec:	f04f 0200 	mov.w	r2, #0
 800a8f0:	f04f 0300 	mov.w	r3, #0
 800a8f4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800a8f8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800a8fc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800a900:	ebb2 040a 	subs.w	r4, r2, sl
 800a904:	eb63 050b 	sbc.w	r5, r3, fp
 800a908:	f04f 0200 	mov.w	r2, #0
 800a90c:	f04f 0300 	mov.w	r3, #0
 800a910:	00eb      	lsls	r3, r5, #3
 800a912:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a916:	00e2      	lsls	r2, r4, #3
 800a918:	4614      	mov	r4, r2
 800a91a:	461d      	mov	r5, r3
 800a91c:	4643      	mov	r3, r8
 800a91e:	18e3      	adds	r3, r4, r3
 800a920:	603b      	str	r3, [r7, #0]
 800a922:	464b      	mov	r3, r9
 800a924:	eb45 0303 	adc.w	r3, r5, r3
 800a928:	607b      	str	r3, [r7, #4]
 800a92a:	f04f 0200 	mov.w	r2, #0
 800a92e:	f04f 0300 	mov.w	r3, #0
 800a932:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a936:	4629      	mov	r1, r5
 800a938:	028b      	lsls	r3, r1, #10
 800a93a:	4621      	mov	r1, r4
 800a93c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a940:	4621      	mov	r1, r4
 800a942:	028a      	lsls	r2, r1, #10
 800a944:	4610      	mov	r0, r2
 800a946:	4619      	mov	r1, r3
 800a948:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a94a:	2200      	movs	r2, #0
 800a94c:	61bb      	str	r3, [r7, #24]
 800a94e:	61fa      	str	r2, [r7, #28]
 800a950:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a954:	f7f6 f9a0 	bl	8000c98 <__aeabi_uldivmod>
 800a958:	4602      	mov	r2, r0
 800a95a:	460b      	mov	r3, r1
 800a95c:	4613      	mov	r3, r2
 800a95e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a960:	4b0b      	ldr	r3, [pc, #44]	; (800a990 <HAL_RCC_GetSysClockFreq+0x200>)
 800a962:	685b      	ldr	r3, [r3, #4]
 800a964:	0c1b      	lsrs	r3, r3, #16
 800a966:	f003 0303 	and.w	r3, r3, #3
 800a96a:	3301      	adds	r3, #1
 800a96c:	005b      	lsls	r3, r3, #1
 800a96e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800a970:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a972:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a974:	fbb2 f3f3 	udiv	r3, r2, r3
 800a978:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800a97a:	e002      	b.n	800a982 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a97c:	4b05      	ldr	r3, [pc, #20]	; (800a994 <HAL_RCC_GetSysClockFreq+0x204>)
 800a97e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800a980:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a982:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800a984:	4618      	mov	r0, r3
 800a986:	3750      	adds	r7, #80	; 0x50
 800a988:	46bd      	mov	sp, r7
 800a98a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a98e:	bf00      	nop
 800a990:	40023800 	.word	0x40023800
 800a994:	00f42400 	.word	0x00f42400
 800a998:	007a1200 	.word	0x007a1200

0800a99c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a99c:	b480      	push	{r7}
 800a99e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a9a0:	4b03      	ldr	r3, [pc, #12]	; (800a9b0 <HAL_RCC_GetHCLKFreq+0x14>)
 800a9a2:	681b      	ldr	r3, [r3, #0]
}
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ac:	4770      	bx	lr
 800a9ae:	bf00      	nop
 800a9b0:	20000224 	.word	0x20000224

0800a9b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800a9b8:	f7ff fff0 	bl	800a99c <HAL_RCC_GetHCLKFreq>
 800a9bc:	4602      	mov	r2, r0
 800a9be:	4b05      	ldr	r3, [pc, #20]	; (800a9d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a9c0:	689b      	ldr	r3, [r3, #8]
 800a9c2:	0a9b      	lsrs	r3, r3, #10
 800a9c4:	f003 0307 	and.w	r3, r3, #7
 800a9c8:	4903      	ldr	r1, [pc, #12]	; (800a9d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a9ca:	5ccb      	ldrb	r3, [r1, r3]
 800a9cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	bd80      	pop	{r7, pc}
 800a9d4:	40023800 	.word	0x40023800
 800a9d8:	080397ec 	.word	0x080397ec

0800a9dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800a9e0:	f7ff ffdc 	bl	800a99c <HAL_RCC_GetHCLKFreq>
 800a9e4:	4602      	mov	r2, r0
 800a9e6:	4b05      	ldr	r3, [pc, #20]	; (800a9fc <HAL_RCC_GetPCLK2Freq+0x20>)
 800a9e8:	689b      	ldr	r3, [r3, #8]
 800a9ea:	0b5b      	lsrs	r3, r3, #13
 800a9ec:	f003 0307 	and.w	r3, r3, #7
 800a9f0:	4903      	ldr	r1, [pc, #12]	; (800aa00 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a9f2:	5ccb      	ldrb	r3, [r1, r3]
 800a9f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	bd80      	pop	{r7, pc}
 800a9fc:	40023800 	.word	0x40023800
 800aa00:	080397ec 	.word	0x080397ec

0800aa04 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800aa04:	b580      	push	{r7, lr}
 800aa06:	b082      	sub	sp, #8
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d101      	bne.n	800aa16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800aa12:	2301      	movs	r3, #1
 800aa14:	e07b      	b.n	800ab0e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d108      	bne.n	800aa30 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	685b      	ldr	r3, [r3, #4]
 800aa22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800aa26:	d009      	beq.n	800aa3c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	2200      	movs	r2, #0
 800aa2c:	61da      	str	r2, [r3, #28]
 800aa2e:	e005      	b.n	800aa3c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	2200      	movs	r2, #0
 800aa34:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	2200      	movs	r2, #0
 800aa3a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	2200      	movs	r2, #0
 800aa40:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800aa48:	b2db      	uxtb	r3, r3
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d106      	bne.n	800aa5c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	2200      	movs	r2, #0
 800aa52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800aa56:	6878      	ldr	r0, [r7, #4]
 800aa58:	f7fa fb90 	bl	800517c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	2202      	movs	r2, #2
 800aa60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	681a      	ldr	r2, [r3, #0]
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aa72:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	685b      	ldr	r3, [r3, #4]
 800aa78:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	689b      	ldr	r3, [r3, #8]
 800aa80:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800aa84:	431a      	orrs	r2, r3
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	68db      	ldr	r3, [r3, #12]
 800aa8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aa8e:	431a      	orrs	r2, r3
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	691b      	ldr	r3, [r3, #16]
 800aa94:	f003 0302 	and.w	r3, r3, #2
 800aa98:	431a      	orrs	r2, r3
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	695b      	ldr	r3, [r3, #20]
 800aa9e:	f003 0301 	and.w	r3, r3, #1
 800aaa2:	431a      	orrs	r2, r3
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	699b      	ldr	r3, [r3, #24]
 800aaa8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800aaac:	431a      	orrs	r2, r3
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	69db      	ldr	r3, [r3, #28]
 800aab2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800aab6:	431a      	orrs	r2, r3
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	6a1b      	ldr	r3, [r3, #32]
 800aabc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aac0:	ea42 0103 	orr.w	r1, r2, r3
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aac8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	430a      	orrs	r2, r1
 800aad2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	699b      	ldr	r3, [r3, #24]
 800aad8:	0c1b      	lsrs	r3, r3, #16
 800aada:	f003 0104 	and.w	r1, r3, #4
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aae2:	f003 0210 	and.w	r2, r3, #16
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	430a      	orrs	r2, r1
 800aaec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	69da      	ldr	r2, [r3, #28]
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800aafc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	2200      	movs	r2, #0
 800ab02:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	2201      	movs	r2, #1
 800ab08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800ab0c:	2300      	movs	r3, #0
}
 800ab0e:	4618      	mov	r0, r3
 800ab10:	3708      	adds	r7, #8
 800ab12:	46bd      	mov	sp, r7
 800ab14:	bd80      	pop	{r7, pc}

0800ab16 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800ab16:	b580      	push	{r7, lr}
 800ab18:	b08c      	sub	sp, #48	; 0x30
 800ab1a:	af00      	add	r7, sp, #0
 800ab1c:	60f8      	str	r0, [r7, #12]
 800ab1e:	60b9      	str	r1, [r7, #8]
 800ab20:	607a      	str	r2, [r7, #4]
 800ab22:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800ab24:	2301      	movs	r3, #1
 800ab26:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800ab28:	2300      	movs	r3, #0
 800ab2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ab34:	2b01      	cmp	r3, #1
 800ab36:	d101      	bne.n	800ab3c <HAL_SPI_TransmitReceive+0x26>
 800ab38:	2302      	movs	r3, #2
 800ab3a:	e18a      	b.n	800ae52 <HAL_SPI_TransmitReceive+0x33c>
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	2201      	movs	r2, #1
 800ab40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ab44:	f7fb fef2 	bl	800692c <HAL_GetTick>
 800ab48:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ab50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	685b      	ldr	r3, [r3, #4]
 800ab58:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800ab5a:	887b      	ldrh	r3, [r7, #2]
 800ab5c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800ab5e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ab62:	2b01      	cmp	r3, #1
 800ab64:	d00f      	beq.n	800ab86 <HAL_SPI_TransmitReceive+0x70>
 800ab66:	69fb      	ldr	r3, [r7, #28]
 800ab68:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ab6c:	d107      	bne.n	800ab7e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	689b      	ldr	r3, [r3, #8]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d103      	bne.n	800ab7e <HAL_SPI_TransmitReceive+0x68>
 800ab76:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ab7a:	2b04      	cmp	r3, #4
 800ab7c:	d003      	beq.n	800ab86 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800ab7e:	2302      	movs	r3, #2
 800ab80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800ab84:	e15b      	b.n	800ae3e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800ab86:	68bb      	ldr	r3, [r7, #8]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d005      	beq.n	800ab98 <HAL_SPI_TransmitReceive+0x82>
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d002      	beq.n	800ab98 <HAL_SPI_TransmitReceive+0x82>
 800ab92:	887b      	ldrh	r3, [r7, #2]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d103      	bne.n	800aba0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800ab98:	2301      	movs	r3, #1
 800ab9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800ab9e:	e14e      	b.n	800ae3e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800aba6:	b2db      	uxtb	r3, r3
 800aba8:	2b04      	cmp	r3, #4
 800abaa:	d003      	beq.n	800abb4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	2205      	movs	r2, #5
 800abb0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	2200      	movs	r2, #0
 800abb8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	687a      	ldr	r2, [r7, #4]
 800abbe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	887a      	ldrh	r2, [r7, #2]
 800abc4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	887a      	ldrh	r2, [r7, #2]
 800abca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	68ba      	ldr	r2, [r7, #8]
 800abd0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	887a      	ldrh	r2, [r7, #2]
 800abd6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	887a      	ldrh	r2, [r7, #2]
 800abdc:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	2200      	movs	r2, #0
 800abe2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	2200      	movs	r2, #0
 800abe8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abf4:	2b40      	cmp	r3, #64	; 0x40
 800abf6:	d007      	beq.n	800ac08 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	681a      	ldr	r2, [r3, #0]
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ac06:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	68db      	ldr	r3, [r3, #12]
 800ac0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ac10:	d178      	bne.n	800ad04 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	685b      	ldr	r3, [r3, #4]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d002      	beq.n	800ac20 <HAL_SPI_TransmitReceive+0x10a>
 800ac1a:	8b7b      	ldrh	r3, [r7, #26]
 800ac1c:	2b01      	cmp	r3, #1
 800ac1e:	d166      	bne.n	800acee <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac24:	881a      	ldrh	r2, [r3, #0]
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac30:	1c9a      	adds	r2, r3, #2
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ac3a:	b29b      	uxth	r3, r3
 800ac3c:	3b01      	subs	r3, #1
 800ac3e:	b29a      	uxth	r2, r3
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ac44:	e053      	b.n	800acee <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	689b      	ldr	r3, [r3, #8]
 800ac4c:	f003 0302 	and.w	r3, r3, #2
 800ac50:	2b02      	cmp	r3, #2
 800ac52:	d11b      	bne.n	800ac8c <HAL_SPI_TransmitReceive+0x176>
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ac58:	b29b      	uxth	r3, r3
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d016      	beq.n	800ac8c <HAL_SPI_TransmitReceive+0x176>
 800ac5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac60:	2b01      	cmp	r3, #1
 800ac62:	d113      	bne.n	800ac8c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac68:	881a      	ldrh	r2, [r3, #0]
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac74:	1c9a      	adds	r2, r3, #2
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ac7e:	b29b      	uxth	r3, r3
 800ac80:	3b01      	subs	r3, #1
 800ac82:	b29a      	uxth	r2, r3
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ac88:	2300      	movs	r3, #0
 800ac8a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	689b      	ldr	r3, [r3, #8]
 800ac92:	f003 0301 	and.w	r3, r3, #1
 800ac96:	2b01      	cmp	r3, #1
 800ac98:	d119      	bne.n	800acce <HAL_SPI_TransmitReceive+0x1b8>
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ac9e:	b29b      	uxth	r3, r3
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d014      	beq.n	800acce <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	68da      	ldr	r2, [r3, #12]
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acae:	b292      	uxth	r2, r2
 800acb0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acb6:	1c9a      	adds	r2, r3, #2
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800acc0:	b29b      	uxth	r3, r3
 800acc2:	3b01      	subs	r3, #1
 800acc4:	b29a      	uxth	r2, r3
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800acca:	2301      	movs	r3, #1
 800accc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800acce:	f7fb fe2d 	bl	800692c <HAL_GetTick>
 800acd2:	4602      	mov	r2, r0
 800acd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acd6:	1ad3      	subs	r3, r2, r3
 800acd8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800acda:	429a      	cmp	r2, r3
 800acdc:	d807      	bhi.n	800acee <HAL_SPI_TransmitReceive+0x1d8>
 800acde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ace0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ace4:	d003      	beq.n	800acee <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800ace6:	2303      	movs	r3, #3
 800ace8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800acec:	e0a7      	b.n	800ae3e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800acf2:	b29b      	uxth	r3, r3
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d1a6      	bne.n	800ac46 <HAL_SPI_TransmitReceive+0x130>
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800acfc:	b29b      	uxth	r3, r3
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d1a1      	bne.n	800ac46 <HAL_SPI_TransmitReceive+0x130>
 800ad02:	e07c      	b.n	800adfe <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	685b      	ldr	r3, [r3, #4]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d002      	beq.n	800ad12 <HAL_SPI_TransmitReceive+0x1fc>
 800ad0c:	8b7b      	ldrh	r3, [r7, #26]
 800ad0e:	2b01      	cmp	r3, #1
 800ad10:	d16b      	bne.n	800adea <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	330c      	adds	r3, #12
 800ad1c:	7812      	ldrb	r2, [r2, #0]
 800ad1e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad24:	1c5a      	adds	r2, r3, #1
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ad2e:	b29b      	uxth	r3, r3
 800ad30:	3b01      	subs	r3, #1
 800ad32:	b29a      	uxth	r2, r3
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ad38:	e057      	b.n	800adea <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	689b      	ldr	r3, [r3, #8]
 800ad40:	f003 0302 	and.w	r3, r3, #2
 800ad44:	2b02      	cmp	r3, #2
 800ad46:	d11c      	bne.n	800ad82 <HAL_SPI_TransmitReceive+0x26c>
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ad4c:	b29b      	uxth	r3, r3
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d017      	beq.n	800ad82 <HAL_SPI_TransmitReceive+0x26c>
 800ad52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad54:	2b01      	cmp	r3, #1
 800ad56:	d114      	bne.n	800ad82 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	330c      	adds	r3, #12
 800ad62:	7812      	ldrb	r2, [r2, #0]
 800ad64:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad6a:	1c5a      	adds	r2, r3, #1
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ad74:	b29b      	uxth	r3, r3
 800ad76:	3b01      	subs	r3, #1
 800ad78:	b29a      	uxth	r2, r3
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ad7e:	2300      	movs	r3, #0
 800ad80:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	689b      	ldr	r3, [r3, #8]
 800ad88:	f003 0301 	and.w	r3, r3, #1
 800ad8c:	2b01      	cmp	r3, #1
 800ad8e:	d119      	bne.n	800adc4 <HAL_SPI_TransmitReceive+0x2ae>
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ad94:	b29b      	uxth	r3, r3
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d014      	beq.n	800adc4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	68da      	ldr	r2, [r3, #12]
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ada4:	b2d2      	uxtb	r2, r2
 800ada6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adac:	1c5a      	adds	r2, r3, #1
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800adb6:	b29b      	uxth	r3, r3
 800adb8:	3b01      	subs	r3, #1
 800adba:	b29a      	uxth	r2, r3
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800adc0:	2301      	movs	r3, #1
 800adc2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800adc4:	f7fb fdb2 	bl	800692c <HAL_GetTick>
 800adc8:	4602      	mov	r2, r0
 800adca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adcc:	1ad3      	subs	r3, r2, r3
 800adce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800add0:	429a      	cmp	r2, r3
 800add2:	d803      	bhi.n	800addc <HAL_SPI_TransmitReceive+0x2c6>
 800add4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800add6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adda:	d102      	bne.n	800ade2 <HAL_SPI_TransmitReceive+0x2cc>
 800addc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d103      	bne.n	800adea <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800ade2:	2303      	movs	r3, #3
 800ade4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800ade8:	e029      	b.n	800ae3e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800adee:	b29b      	uxth	r3, r3
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d1a2      	bne.n	800ad3a <HAL_SPI_TransmitReceive+0x224>
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800adf8:	b29b      	uxth	r3, r3
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d19d      	bne.n	800ad3a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800adfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae00:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ae02:	68f8      	ldr	r0, [r7, #12]
 800ae04:	f000 f8b2 	bl	800af6c <SPI_EndRxTxTransaction>
 800ae08:	4603      	mov	r3, r0
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d006      	beq.n	800ae1c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800ae0e:	2301      	movs	r3, #1
 800ae10:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	2220      	movs	r2, #32
 800ae18:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800ae1a:	e010      	b.n	800ae3e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	689b      	ldr	r3, [r3, #8]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d10b      	bne.n	800ae3c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ae24:	2300      	movs	r3, #0
 800ae26:	617b      	str	r3, [r7, #20]
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	68db      	ldr	r3, [r3, #12]
 800ae2e:	617b      	str	r3, [r7, #20]
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	689b      	ldr	r3, [r3, #8]
 800ae36:	617b      	str	r3, [r7, #20]
 800ae38:	697b      	ldr	r3, [r7, #20]
 800ae3a:	e000      	b.n	800ae3e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800ae3c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	2201      	movs	r2, #1
 800ae42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	2200      	movs	r2, #0
 800ae4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800ae4e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800ae52:	4618      	mov	r0, r3
 800ae54:	3730      	adds	r7, #48	; 0x30
 800ae56:	46bd      	mov	sp, r7
 800ae58:	bd80      	pop	{r7, pc}
	...

0800ae5c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	b088      	sub	sp, #32
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	60f8      	str	r0, [r7, #12]
 800ae64:	60b9      	str	r1, [r7, #8]
 800ae66:	603b      	str	r3, [r7, #0]
 800ae68:	4613      	mov	r3, r2
 800ae6a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800ae6c:	f7fb fd5e 	bl	800692c <HAL_GetTick>
 800ae70:	4602      	mov	r2, r0
 800ae72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae74:	1a9b      	subs	r3, r3, r2
 800ae76:	683a      	ldr	r2, [r7, #0]
 800ae78:	4413      	add	r3, r2
 800ae7a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800ae7c:	f7fb fd56 	bl	800692c <HAL_GetTick>
 800ae80:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800ae82:	4b39      	ldr	r3, [pc, #228]	; (800af68 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	015b      	lsls	r3, r3, #5
 800ae88:	0d1b      	lsrs	r3, r3, #20
 800ae8a:	69fa      	ldr	r2, [r7, #28]
 800ae8c:	fb02 f303 	mul.w	r3, r2, r3
 800ae90:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ae92:	e054      	b.n	800af3e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800ae94:	683b      	ldr	r3, [r7, #0]
 800ae96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae9a:	d050      	beq.n	800af3e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800ae9c:	f7fb fd46 	bl	800692c <HAL_GetTick>
 800aea0:	4602      	mov	r2, r0
 800aea2:	69bb      	ldr	r3, [r7, #24]
 800aea4:	1ad3      	subs	r3, r2, r3
 800aea6:	69fa      	ldr	r2, [r7, #28]
 800aea8:	429a      	cmp	r2, r3
 800aeaa:	d902      	bls.n	800aeb2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800aeac:	69fb      	ldr	r3, [r7, #28]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d13d      	bne.n	800af2e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	685a      	ldr	r2, [r3, #4]
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800aec0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	685b      	ldr	r3, [r3, #4]
 800aec6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800aeca:	d111      	bne.n	800aef0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	689b      	ldr	r3, [r3, #8]
 800aed0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aed4:	d004      	beq.n	800aee0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	689b      	ldr	r3, [r3, #8]
 800aeda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aede:	d107      	bne.n	800aef0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	681a      	ldr	r2, [r3, #0]
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aeee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aef4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aef8:	d10f      	bne.n	800af1a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	681a      	ldr	r2, [r3, #0]
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800af08:	601a      	str	r2, [r3, #0]
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	681a      	ldr	r2, [r3, #0]
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800af18:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	2201      	movs	r2, #1
 800af1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	2200      	movs	r2, #0
 800af26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800af2a:	2303      	movs	r3, #3
 800af2c:	e017      	b.n	800af5e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800af2e:	697b      	ldr	r3, [r7, #20]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d101      	bne.n	800af38 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800af34:	2300      	movs	r3, #0
 800af36:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800af38:	697b      	ldr	r3, [r7, #20]
 800af3a:	3b01      	subs	r3, #1
 800af3c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	689a      	ldr	r2, [r3, #8]
 800af44:	68bb      	ldr	r3, [r7, #8]
 800af46:	4013      	ands	r3, r2
 800af48:	68ba      	ldr	r2, [r7, #8]
 800af4a:	429a      	cmp	r2, r3
 800af4c:	bf0c      	ite	eq
 800af4e:	2301      	moveq	r3, #1
 800af50:	2300      	movne	r3, #0
 800af52:	b2db      	uxtb	r3, r3
 800af54:	461a      	mov	r2, r3
 800af56:	79fb      	ldrb	r3, [r7, #7]
 800af58:	429a      	cmp	r2, r3
 800af5a:	d19b      	bne.n	800ae94 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800af5c:	2300      	movs	r3, #0
}
 800af5e:	4618      	mov	r0, r3
 800af60:	3720      	adds	r7, #32
 800af62:	46bd      	mov	sp, r7
 800af64:	bd80      	pop	{r7, pc}
 800af66:	bf00      	nop
 800af68:	20000224 	.word	0x20000224

0800af6c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b088      	sub	sp, #32
 800af70:	af02      	add	r7, sp, #8
 800af72:	60f8      	str	r0, [r7, #12]
 800af74:	60b9      	str	r1, [r7, #8]
 800af76:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800af78:	4b1b      	ldr	r3, [pc, #108]	; (800afe8 <SPI_EndRxTxTransaction+0x7c>)
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	4a1b      	ldr	r2, [pc, #108]	; (800afec <SPI_EndRxTxTransaction+0x80>)
 800af7e:	fba2 2303 	umull	r2, r3, r2, r3
 800af82:	0d5b      	lsrs	r3, r3, #21
 800af84:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800af88:	fb02 f303 	mul.w	r3, r2, r3
 800af8c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	685b      	ldr	r3, [r3, #4]
 800af92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800af96:	d112      	bne.n	800afbe <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	9300      	str	r3, [sp, #0]
 800af9c:	68bb      	ldr	r3, [r7, #8]
 800af9e:	2200      	movs	r2, #0
 800afa0:	2180      	movs	r1, #128	; 0x80
 800afa2:	68f8      	ldr	r0, [r7, #12]
 800afa4:	f7ff ff5a 	bl	800ae5c <SPI_WaitFlagStateUntilTimeout>
 800afa8:	4603      	mov	r3, r0
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d016      	beq.n	800afdc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800afb2:	f043 0220 	orr.w	r2, r3, #32
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800afba:	2303      	movs	r3, #3
 800afbc:	e00f      	b.n	800afde <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800afbe:	697b      	ldr	r3, [r7, #20]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d00a      	beq.n	800afda <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800afc4:	697b      	ldr	r3, [r7, #20]
 800afc6:	3b01      	subs	r3, #1
 800afc8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	689b      	ldr	r3, [r3, #8]
 800afd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800afd4:	2b80      	cmp	r3, #128	; 0x80
 800afd6:	d0f2      	beq.n	800afbe <SPI_EndRxTxTransaction+0x52>
 800afd8:	e000      	b.n	800afdc <SPI_EndRxTxTransaction+0x70>
        break;
 800afda:	bf00      	nop
  }

  return HAL_OK;
 800afdc:	2300      	movs	r3, #0
}
 800afde:	4618      	mov	r0, r3
 800afe0:	3718      	adds	r7, #24
 800afe2:	46bd      	mov	sp, r7
 800afe4:	bd80      	pop	{r7, pc}
 800afe6:	bf00      	nop
 800afe8:	20000224 	.word	0x20000224
 800afec:	165e9f81 	.word	0x165e9f81

0800aff0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b082      	sub	sp, #8
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d101      	bne.n	800b002 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800affe:	2301      	movs	r3, #1
 800b000:	e041      	b.n	800b086 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b008:	b2db      	uxtb	r3, r3
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d106      	bne.n	800b01c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	2200      	movs	r2, #0
 800b012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b016:	6878      	ldr	r0, [r7, #4]
 800b018:	f7fa f940 	bl	800529c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	2202      	movs	r2, #2
 800b020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	681a      	ldr	r2, [r3, #0]
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	3304      	adds	r3, #4
 800b02c:	4619      	mov	r1, r3
 800b02e:	4610      	mov	r0, r2
 800b030:	f000 fb24 	bl	800b67c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	2201      	movs	r2, #1
 800b038:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	2201      	movs	r2, #1
 800b040:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	2201      	movs	r2, #1
 800b048:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	2201      	movs	r2, #1
 800b050:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	2201      	movs	r2, #1
 800b058:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	2201      	movs	r2, #1
 800b060:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	2201      	movs	r2, #1
 800b068:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	2201      	movs	r2, #1
 800b070:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	2201      	movs	r2, #1
 800b078:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	2201      	movs	r2, #1
 800b080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b084:	2300      	movs	r3, #0
}
 800b086:	4618      	mov	r0, r3
 800b088:	3708      	adds	r7, #8
 800b08a:	46bd      	mov	sp, r7
 800b08c:	bd80      	pop	{r7, pc}
	...

0800b090 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b090:	b480      	push	{r7}
 800b092:	b085      	sub	sp, #20
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b09e:	b2db      	uxtb	r3, r3
 800b0a0:	2b01      	cmp	r3, #1
 800b0a2:	d001      	beq.n	800b0a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b0a4:	2301      	movs	r3, #1
 800b0a6:	e044      	b.n	800b132 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	2202      	movs	r2, #2
 800b0ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	68da      	ldr	r2, [r3, #12]
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	f042 0201 	orr.w	r2, r2, #1
 800b0be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	4a1e      	ldr	r2, [pc, #120]	; (800b140 <HAL_TIM_Base_Start_IT+0xb0>)
 800b0c6:	4293      	cmp	r3, r2
 800b0c8:	d018      	beq.n	800b0fc <HAL_TIM_Base_Start_IT+0x6c>
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b0d2:	d013      	beq.n	800b0fc <HAL_TIM_Base_Start_IT+0x6c>
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	4a1a      	ldr	r2, [pc, #104]	; (800b144 <HAL_TIM_Base_Start_IT+0xb4>)
 800b0da:	4293      	cmp	r3, r2
 800b0dc:	d00e      	beq.n	800b0fc <HAL_TIM_Base_Start_IT+0x6c>
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	4a19      	ldr	r2, [pc, #100]	; (800b148 <HAL_TIM_Base_Start_IT+0xb8>)
 800b0e4:	4293      	cmp	r3, r2
 800b0e6:	d009      	beq.n	800b0fc <HAL_TIM_Base_Start_IT+0x6c>
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	4a17      	ldr	r2, [pc, #92]	; (800b14c <HAL_TIM_Base_Start_IT+0xbc>)
 800b0ee:	4293      	cmp	r3, r2
 800b0f0:	d004      	beq.n	800b0fc <HAL_TIM_Base_Start_IT+0x6c>
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	4a16      	ldr	r2, [pc, #88]	; (800b150 <HAL_TIM_Base_Start_IT+0xc0>)
 800b0f8:	4293      	cmp	r3, r2
 800b0fa:	d111      	bne.n	800b120 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	689b      	ldr	r3, [r3, #8]
 800b102:	f003 0307 	and.w	r3, r3, #7
 800b106:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	2b06      	cmp	r3, #6
 800b10c:	d010      	beq.n	800b130 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	681a      	ldr	r2, [r3, #0]
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	f042 0201 	orr.w	r2, r2, #1
 800b11c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b11e:	e007      	b.n	800b130 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	681a      	ldr	r2, [r3, #0]
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	f042 0201 	orr.w	r2, r2, #1
 800b12e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b130:	2300      	movs	r3, #0
}
 800b132:	4618      	mov	r0, r3
 800b134:	3714      	adds	r7, #20
 800b136:	46bd      	mov	sp, r7
 800b138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13c:	4770      	bx	lr
 800b13e:	bf00      	nop
 800b140:	40010000 	.word	0x40010000
 800b144:	40000400 	.word	0x40000400
 800b148:	40000800 	.word	0x40000800
 800b14c:	40000c00 	.word	0x40000c00
 800b150:	40014000 	.word	0x40014000

0800b154 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800b154:	b480      	push	{r7}
 800b156:	b083      	sub	sp, #12
 800b158:	af00      	add	r7, sp, #0
 800b15a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	68da      	ldr	r2, [r3, #12]
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	f022 0201 	bic.w	r2, r2, #1
 800b16a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	6a1a      	ldr	r2, [r3, #32]
 800b172:	f241 1311 	movw	r3, #4369	; 0x1111
 800b176:	4013      	ands	r3, r2
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d10f      	bne.n	800b19c <HAL_TIM_Base_Stop_IT+0x48>
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	6a1a      	ldr	r2, [r3, #32]
 800b182:	f240 4344 	movw	r3, #1092	; 0x444
 800b186:	4013      	ands	r3, r2
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d107      	bne.n	800b19c <HAL_TIM_Base_Stop_IT+0x48>
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	681a      	ldr	r2, [r3, #0]
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	f022 0201 	bic.w	r2, r2, #1
 800b19a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	2201      	movs	r2, #1
 800b1a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800b1a4:	2300      	movs	r3, #0
}
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	370c      	adds	r7, #12
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b0:	4770      	bx	lr

0800b1b2 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800b1b2:	b580      	push	{r7, lr}
 800b1b4:	b086      	sub	sp, #24
 800b1b6:	af00      	add	r7, sp, #0
 800b1b8:	6078      	str	r0, [r7, #4]
 800b1ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d101      	bne.n	800b1c6 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800b1c2:	2301      	movs	r3, #1
 800b1c4:	e097      	b.n	800b2f6 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b1cc:	b2db      	uxtb	r3, r3
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d106      	bne.n	800b1e0 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	2200      	movs	r2, #0
 800b1d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800b1da:	6878      	ldr	r0, [r7, #4]
 800b1dc:	f7fa f816 	bl	800520c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	2202      	movs	r2, #2
 800b1e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	689b      	ldr	r3, [r3, #8]
 800b1ee:	687a      	ldr	r2, [r7, #4]
 800b1f0:	6812      	ldr	r2, [r2, #0]
 800b1f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b1f6:	f023 0307 	bic.w	r3, r3, #7
 800b1fa:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	681a      	ldr	r2, [r3, #0]
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	3304      	adds	r3, #4
 800b204:	4619      	mov	r1, r3
 800b206:	4610      	mov	r0, r2
 800b208:	f000 fa38 	bl	800b67c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	689b      	ldr	r3, [r3, #8]
 800b212:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	699b      	ldr	r3, [r3, #24]
 800b21a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	6a1b      	ldr	r3, [r3, #32]
 800b222:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800b224:	683b      	ldr	r3, [r7, #0]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	697a      	ldr	r2, [r7, #20]
 800b22a:	4313      	orrs	r3, r2
 800b22c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800b22e:	693b      	ldr	r3, [r7, #16]
 800b230:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b234:	f023 0303 	bic.w	r3, r3, #3
 800b238:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800b23a:	683b      	ldr	r3, [r7, #0]
 800b23c:	689a      	ldr	r2, [r3, #8]
 800b23e:	683b      	ldr	r3, [r7, #0]
 800b240:	699b      	ldr	r3, [r3, #24]
 800b242:	021b      	lsls	r3, r3, #8
 800b244:	4313      	orrs	r3, r2
 800b246:	693a      	ldr	r2, [r7, #16]
 800b248:	4313      	orrs	r3, r2
 800b24a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800b24c:	693b      	ldr	r3, [r7, #16]
 800b24e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800b252:	f023 030c 	bic.w	r3, r3, #12
 800b256:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800b258:	693b      	ldr	r3, [r7, #16]
 800b25a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b25e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b262:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800b264:	683b      	ldr	r3, [r7, #0]
 800b266:	68da      	ldr	r2, [r3, #12]
 800b268:	683b      	ldr	r3, [r7, #0]
 800b26a:	69db      	ldr	r3, [r3, #28]
 800b26c:	021b      	lsls	r3, r3, #8
 800b26e:	4313      	orrs	r3, r2
 800b270:	693a      	ldr	r2, [r7, #16]
 800b272:	4313      	orrs	r3, r2
 800b274:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800b276:	683b      	ldr	r3, [r7, #0]
 800b278:	691b      	ldr	r3, [r3, #16]
 800b27a:	011a      	lsls	r2, r3, #4
 800b27c:	683b      	ldr	r3, [r7, #0]
 800b27e:	6a1b      	ldr	r3, [r3, #32]
 800b280:	031b      	lsls	r3, r3, #12
 800b282:	4313      	orrs	r3, r2
 800b284:	693a      	ldr	r2, [r7, #16]
 800b286:	4313      	orrs	r3, r2
 800b288:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800b290:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800b298:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800b29a:	683b      	ldr	r3, [r7, #0]
 800b29c:	685a      	ldr	r2, [r3, #4]
 800b29e:	683b      	ldr	r3, [r7, #0]
 800b2a0:	695b      	ldr	r3, [r3, #20]
 800b2a2:	011b      	lsls	r3, r3, #4
 800b2a4:	4313      	orrs	r3, r2
 800b2a6:	68fa      	ldr	r2, [r7, #12]
 800b2a8:	4313      	orrs	r3, r2
 800b2aa:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	697a      	ldr	r2, [r7, #20]
 800b2b2:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	693a      	ldr	r2, [r7, #16]
 800b2ba:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	68fa      	ldr	r2, [r7, #12]
 800b2c2:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	2201      	movs	r2, #1
 800b2c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	2201      	movs	r2, #1
 800b2d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	2201      	movs	r2, #1
 800b2d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	2201      	movs	r2, #1
 800b2e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	2201      	movs	r2, #1
 800b2e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	2201      	movs	r2, #1
 800b2f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b2f4:	2300      	movs	r3, #0
}
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	3718      	adds	r7, #24
 800b2fa:	46bd      	mov	sp, r7
 800b2fc:	bd80      	pop	{r7, pc}

0800b2fe <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b2fe:	b580      	push	{r7, lr}
 800b300:	b084      	sub	sp, #16
 800b302:	af00      	add	r7, sp, #0
 800b304:	6078      	str	r0, [r7, #4]
 800b306:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b30e:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b316:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b31e:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b326:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800b328:	683b      	ldr	r3, [r7, #0]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d110      	bne.n	800b350 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b32e:	7bfb      	ldrb	r3, [r7, #15]
 800b330:	2b01      	cmp	r3, #1
 800b332:	d102      	bne.n	800b33a <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800b334:	7b7b      	ldrb	r3, [r7, #13]
 800b336:	2b01      	cmp	r3, #1
 800b338:	d001      	beq.n	800b33e <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800b33a:	2301      	movs	r3, #1
 800b33c:	e069      	b.n	800b412 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	2202      	movs	r2, #2
 800b342:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	2202      	movs	r2, #2
 800b34a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b34e:	e031      	b.n	800b3b4 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800b350:	683b      	ldr	r3, [r7, #0]
 800b352:	2b04      	cmp	r3, #4
 800b354:	d110      	bne.n	800b378 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b356:	7bbb      	ldrb	r3, [r7, #14]
 800b358:	2b01      	cmp	r3, #1
 800b35a:	d102      	bne.n	800b362 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b35c:	7b3b      	ldrb	r3, [r7, #12]
 800b35e:	2b01      	cmp	r3, #1
 800b360:	d001      	beq.n	800b366 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800b362:	2301      	movs	r3, #1
 800b364:	e055      	b.n	800b412 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	2202      	movs	r2, #2
 800b36a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	2202      	movs	r2, #2
 800b372:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b376:	e01d      	b.n	800b3b4 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b378:	7bfb      	ldrb	r3, [r7, #15]
 800b37a:	2b01      	cmp	r3, #1
 800b37c:	d108      	bne.n	800b390 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b37e:	7bbb      	ldrb	r3, [r7, #14]
 800b380:	2b01      	cmp	r3, #1
 800b382:	d105      	bne.n	800b390 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b384:	7b7b      	ldrb	r3, [r7, #13]
 800b386:	2b01      	cmp	r3, #1
 800b388:	d102      	bne.n	800b390 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b38a:	7b3b      	ldrb	r3, [r7, #12]
 800b38c:	2b01      	cmp	r3, #1
 800b38e:	d001      	beq.n	800b394 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800b390:	2301      	movs	r3, #1
 800b392:	e03e      	b.n	800b412 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	2202      	movs	r2, #2
 800b398:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	2202      	movs	r2, #2
 800b3a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	2202      	movs	r2, #2
 800b3a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	2202      	movs	r2, #2
 800b3b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800b3b4:	683b      	ldr	r3, [r7, #0]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d003      	beq.n	800b3c2 <HAL_TIM_Encoder_Start+0xc4>
 800b3ba:	683b      	ldr	r3, [r7, #0]
 800b3bc:	2b04      	cmp	r3, #4
 800b3be:	d008      	beq.n	800b3d2 <HAL_TIM_Encoder_Start+0xd4>
 800b3c0:	e00f      	b.n	800b3e2 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	2201      	movs	r2, #1
 800b3c8:	2100      	movs	r1, #0
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	f000 f9d6 	bl	800b77c <TIM_CCxChannelCmd>
      break;
 800b3d0:	e016      	b.n	800b400 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	2201      	movs	r2, #1
 800b3d8:	2104      	movs	r1, #4
 800b3da:	4618      	mov	r0, r3
 800b3dc:	f000 f9ce 	bl	800b77c <TIM_CCxChannelCmd>
      break;
 800b3e0:	e00e      	b.n	800b400 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	2201      	movs	r2, #1
 800b3e8:	2100      	movs	r1, #0
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	f000 f9c6 	bl	800b77c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	2201      	movs	r2, #1
 800b3f6:	2104      	movs	r1, #4
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	f000 f9bf 	bl	800b77c <TIM_CCxChannelCmd>
      break;
 800b3fe:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	681a      	ldr	r2, [r3, #0]
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	f042 0201 	orr.w	r2, r2, #1
 800b40e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800b410:	2300      	movs	r3, #0
}
 800b412:	4618      	mov	r0, r3
 800b414:	3710      	adds	r7, #16
 800b416:	46bd      	mov	sp, r7
 800b418:	bd80      	pop	{r7, pc}

0800b41a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b41a:	b580      	push	{r7, lr}
 800b41c:	b082      	sub	sp, #8
 800b41e:	af00      	add	r7, sp, #0
 800b420:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	691b      	ldr	r3, [r3, #16]
 800b428:	f003 0302 	and.w	r3, r3, #2
 800b42c:	2b02      	cmp	r3, #2
 800b42e:	d122      	bne.n	800b476 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	68db      	ldr	r3, [r3, #12]
 800b436:	f003 0302 	and.w	r3, r3, #2
 800b43a:	2b02      	cmp	r3, #2
 800b43c:	d11b      	bne.n	800b476 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	f06f 0202 	mvn.w	r2, #2
 800b446:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	2201      	movs	r2, #1
 800b44c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	699b      	ldr	r3, [r3, #24]
 800b454:	f003 0303 	and.w	r3, r3, #3
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d003      	beq.n	800b464 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b45c:	6878      	ldr	r0, [r7, #4]
 800b45e:	f000 f8ee 	bl	800b63e <HAL_TIM_IC_CaptureCallback>
 800b462:	e005      	b.n	800b470 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b464:	6878      	ldr	r0, [r7, #4]
 800b466:	f000 f8e0 	bl	800b62a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b46a:	6878      	ldr	r0, [r7, #4]
 800b46c:	f000 f8f1 	bl	800b652 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	2200      	movs	r2, #0
 800b474:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	691b      	ldr	r3, [r3, #16]
 800b47c:	f003 0304 	and.w	r3, r3, #4
 800b480:	2b04      	cmp	r3, #4
 800b482:	d122      	bne.n	800b4ca <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	68db      	ldr	r3, [r3, #12]
 800b48a:	f003 0304 	and.w	r3, r3, #4
 800b48e:	2b04      	cmp	r3, #4
 800b490:	d11b      	bne.n	800b4ca <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	f06f 0204 	mvn.w	r2, #4
 800b49a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	2202      	movs	r2, #2
 800b4a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	699b      	ldr	r3, [r3, #24]
 800b4a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d003      	beq.n	800b4b8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b4b0:	6878      	ldr	r0, [r7, #4]
 800b4b2:	f000 f8c4 	bl	800b63e <HAL_TIM_IC_CaptureCallback>
 800b4b6:	e005      	b.n	800b4c4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b4b8:	6878      	ldr	r0, [r7, #4]
 800b4ba:	f000 f8b6 	bl	800b62a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b4be:	6878      	ldr	r0, [r7, #4]
 800b4c0:	f000 f8c7 	bl	800b652 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	691b      	ldr	r3, [r3, #16]
 800b4d0:	f003 0308 	and.w	r3, r3, #8
 800b4d4:	2b08      	cmp	r3, #8
 800b4d6:	d122      	bne.n	800b51e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	68db      	ldr	r3, [r3, #12]
 800b4de:	f003 0308 	and.w	r3, r3, #8
 800b4e2:	2b08      	cmp	r3, #8
 800b4e4:	d11b      	bne.n	800b51e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	f06f 0208 	mvn.w	r2, #8
 800b4ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	2204      	movs	r2, #4
 800b4f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	69db      	ldr	r3, [r3, #28]
 800b4fc:	f003 0303 	and.w	r3, r3, #3
 800b500:	2b00      	cmp	r3, #0
 800b502:	d003      	beq.n	800b50c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b504:	6878      	ldr	r0, [r7, #4]
 800b506:	f000 f89a 	bl	800b63e <HAL_TIM_IC_CaptureCallback>
 800b50a:	e005      	b.n	800b518 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b50c:	6878      	ldr	r0, [r7, #4]
 800b50e:	f000 f88c 	bl	800b62a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b512:	6878      	ldr	r0, [r7, #4]
 800b514:	f000 f89d 	bl	800b652 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	2200      	movs	r2, #0
 800b51c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	691b      	ldr	r3, [r3, #16]
 800b524:	f003 0310 	and.w	r3, r3, #16
 800b528:	2b10      	cmp	r3, #16
 800b52a:	d122      	bne.n	800b572 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	68db      	ldr	r3, [r3, #12]
 800b532:	f003 0310 	and.w	r3, r3, #16
 800b536:	2b10      	cmp	r3, #16
 800b538:	d11b      	bne.n	800b572 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	f06f 0210 	mvn.w	r2, #16
 800b542:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	2208      	movs	r2, #8
 800b548:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	69db      	ldr	r3, [r3, #28]
 800b550:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b554:	2b00      	cmp	r3, #0
 800b556:	d003      	beq.n	800b560 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b558:	6878      	ldr	r0, [r7, #4]
 800b55a:	f000 f870 	bl	800b63e <HAL_TIM_IC_CaptureCallback>
 800b55e:	e005      	b.n	800b56c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b560:	6878      	ldr	r0, [r7, #4]
 800b562:	f000 f862 	bl	800b62a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b566:	6878      	ldr	r0, [r7, #4]
 800b568:	f000 f873 	bl	800b652 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	2200      	movs	r2, #0
 800b570:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	691b      	ldr	r3, [r3, #16]
 800b578:	f003 0301 	and.w	r3, r3, #1
 800b57c:	2b01      	cmp	r3, #1
 800b57e:	d10e      	bne.n	800b59e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	68db      	ldr	r3, [r3, #12]
 800b586:	f003 0301 	and.w	r3, r3, #1
 800b58a:	2b01      	cmp	r3, #1
 800b58c:	d107      	bne.n	800b59e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	f06f 0201 	mvn.w	r2, #1
 800b596:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b598:	6878      	ldr	r0, [r7, #4]
 800b59a:	f7f9 fd3b 	bl	8005014 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	691b      	ldr	r3, [r3, #16]
 800b5a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b5a8:	2b80      	cmp	r3, #128	; 0x80
 800b5aa:	d10e      	bne.n	800b5ca <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	68db      	ldr	r3, [r3, #12]
 800b5b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b5b6:	2b80      	cmp	r3, #128	; 0x80
 800b5b8:	d107      	bne.n	800b5ca <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b5c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b5c4:	6878      	ldr	r0, [r7, #4]
 800b5c6:	f000 f977 	bl	800b8b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	691b      	ldr	r3, [r3, #16]
 800b5d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5d4:	2b40      	cmp	r3, #64	; 0x40
 800b5d6:	d10e      	bne.n	800b5f6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	68db      	ldr	r3, [r3, #12]
 800b5de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5e2:	2b40      	cmp	r3, #64	; 0x40
 800b5e4:	d107      	bne.n	800b5f6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b5ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b5f0:	6878      	ldr	r0, [r7, #4]
 800b5f2:	f000 f838 	bl	800b666 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	691b      	ldr	r3, [r3, #16]
 800b5fc:	f003 0320 	and.w	r3, r3, #32
 800b600:	2b20      	cmp	r3, #32
 800b602:	d10e      	bne.n	800b622 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	68db      	ldr	r3, [r3, #12]
 800b60a:	f003 0320 	and.w	r3, r3, #32
 800b60e:	2b20      	cmp	r3, #32
 800b610:	d107      	bne.n	800b622 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	f06f 0220 	mvn.w	r2, #32
 800b61a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b61c:	6878      	ldr	r0, [r7, #4]
 800b61e:	f000 f941 	bl	800b8a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b622:	bf00      	nop
 800b624:	3708      	adds	r7, #8
 800b626:	46bd      	mov	sp, r7
 800b628:	bd80      	pop	{r7, pc}

0800b62a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b62a:	b480      	push	{r7}
 800b62c:	b083      	sub	sp, #12
 800b62e:	af00      	add	r7, sp, #0
 800b630:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b632:	bf00      	nop
 800b634:	370c      	adds	r7, #12
 800b636:	46bd      	mov	sp, r7
 800b638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63c:	4770      	bx	lr

0800b63e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b63e:	b480      	push	{r7}
 800b640:	b083      	sub	sp, #12
 800b642:	af00      	add	r7, sp, #0
 800b644:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b646:	bf00      	nop
 800b648:	370c      	adds	r7, #12
 800b64a:	46bd      	mov	sp, r7
 800b64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b650:	4770      	bx	lr

0800b652 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b652:	b480      	push	{r7}
 800b654:	b083      	sub	sp, #12
 800b656:	af00      	add	r7, sp, #0
 800b658:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b65a:	bf00      	nop
 800b65c:	370c      	adds	r7, #12
 800b65e:	46bd      	mov	sp, r7
 800b660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b664:	4770      	bx	lr

0800b666 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b666:	b480      	push	{r7}
 800b668:	b083      	sub	sp, #12
 800b66a:	af00      	add	r7, sp, #0
 800b66c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b66e:	bf00      	nop
 800b670:	370c      	adds	r7, #12
 800b672:	46bd      	mov	sp, r7
 800b674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b678:	4770      	bx	lr
	...

0800b67c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b67c:	b480      	push	{r7}
 800b67e:	b085      	sub	sp, #20
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]
 800b684:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	4a34      	ldr	r2, [pc, #208]	; (800b760 <TIM_Base_SetConfig+0xe4>)
 800b690:	4293      	cmp	r3, r2
 800b692:	d00f      	beq.n	800b6b4 <TIM_Base_SetConfig+0x38>
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b69a:	d00b      	beq.n	800b6b4 <TIM_Base_SetConfig+0x38>
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	4a31      	ldr	r2, [pc, #196]	; (800b764 <TIM_Base_SetConfig+0xe8>)
 800b6a0:	4293      	cmp	r3, r2
 800b6a2:	d007      	beq.n	800b6b4 <TIM_Base_SetConfig+0x38>
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	4a30      	ldr	r2, [pc, #192]	; (800b768 <TIM_Base_SetConfig+0xec>)
 800b6a8:	4293      	cmp	r3, r2
 800b6aa:	d003      	beq.n	800b6b4 <TIM_Base_SetConfig+0x38>
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	4a2f      	ldr	r2, [pc, #188]	; (800b76c <TIM_Base_SetConfig+0xf0>)
 800b6b0:	4293      	cmp	r3, r2
 800b6b2:	d108      	bne.n	800b6c6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b6ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b6bc:	683b      	ldr	r3, [r7, #0]
 800b6be:	685b      	ldr	r3, [r3, #4]
 800b6c0:	68fa      	ldr	r2, [r7, #12]
 800b6c2:	4313      	orrs	r3, r2
 800b6c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	4a25      	ldr	r2, [pc, #148]	; (800b760 <TIM_Base_SetConfig+0xe4>)
 800b6ca:	4293      	cmp	r3, r2
 800b6cc:	d01b      	beq.n	800b706 <TIM_Base_SetConfig+0x8a>
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b6d4:	d017      	beq.n	800b706 <TIM_Base_SetConfig+0x8a>
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	4a22      	ldr	r2, [pc, #136]	; (800b764 <TIM_Base_SetConfig+0xe8>)
 800b6da:	4293      	cmp	r3, r2
 800b6dc:	d013      	beq.n	800b706 <TIM_Base_SetConfig+0x8a>
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	4a21      	ldr	r2, [pc, #132]	; (800b768 <TIM_Base_SetConfig+0xec>)
 800b6e2:	4293      	cmp	r3, r2
 800b6e4:	d00f      	beq.n	800b706 <TIM_Base_SetConfig+0x8a>
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	4a20      	ldr	r2, [pc, #128]	; (800b76c <TIM_Base_SetConfig+0xf0>)
 800b6ea:	4293      	cmp	r3, r2
 800b6ec:	d00b      	beq.n	800b706 <TIM_Base_SetConfig+0x8a>
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	4a1f      	ldr	r2, [pc, #124]	; (800b770 <TIM_Base_SetConfig+0xf4>)
 800b6f2:	4293      	cmp	r3, r2
 800b6f4:	d007      	beq.n	800b706 <TIM_Base_SetConfig+0x8a>
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	4a1e      	ldr	r2, [pc, #120]	; (800b774 <TIM_Base_SetConfig+0xf8>)
 800b6fa:	4293      	cmp	r3, r2
 800b6fc:	d003      	beq.n	800b706 <TIM_Base_SetConfig+0x8a>
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	4a1d      	ldr	r2, [pc, #116]	; (800b778 <TIM_Base_SetConfig+0xfc>)
 800b702:	4293      	cmp	r3, r2
 800b704:	d108      	bne.n	800b718 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b70c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b70e:	683b      	ldr	r3, [r7, #0]
 800b710:	68db      	ldr	r3, [r3, #12]
 800b712:	68fa      	ldr	r2, [r7, #12]
 800b714:	4313      	orrs	r3, r2
 800b716:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b71e:	683b      	ldr	r3, [r7, #0]
 800b720:	695b      	ldr	r3, [r3, #20]
 800b722:	4313      	orrs	r3, r2
 800b724:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	68fa      	ldr	r2, [r7, #12]
 800b72a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b72c:	683b      	ldr	r3, [r7, #0]
 800b72e:	689a      	ldr	r2, [r3, #8]
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b734:	683b      	ldr	r3, [r7, #0]
 800b736:	681a      	ldr	r2, [r3, #0]
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	4a08      	ldr	r2, [pc, #32]	; (800b760 <TIM_Base_SetConfig+0xe4>)
 800b740:	4293      	cmp	r3, r2
 800b742:	d103      	bne.n	800b74c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b744:	683b      	ldr	r3, [r7, #0]
 800b746:	691a      	ldr	r2, [r3, #16]
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	2201      	movs	r2, #1
 800b750:	615a      	str	r2, [r3, #20]
}
 800b752:	bf00      	nop
 800b754:	3714      	adds	r7, #20
 800b756:	46bd      	mov	sp, r7
 800b758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75c:	4770      	bx	lr
 800b75e:	bf00      	nop
 800b760:	40010000 	.word	0x40010000
 800b764:	40000400 	.word	0x40000400
 800b768:	40000800 	.word	0x40000800
 800b76c:	40000c00 	.word	0x40000c00
 800b770:	40014000 	.word	0x40014000
 800b774:	40014400 	.word	0x40014400
 800b778:	40014800 	.word	0x40014800

0800b77c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b77c:	b480      	push	{r7}
 800b77e:	b087      	sub	sp, #28
 800b780:	af00      	add	r7, sp, #0
 800b782:	60f8      	str	r0, [r7, #12]
 800b784:	60b9      	str	r1, [r7, #8]
 800b786:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b788:	68bb      	ldr	r3, [r7, #8]
 800b78a:	f003 031f 	and.w	r3, r3, #31
 800b78e:	2201      	movs	r2, #1
 800b790:	fa02 f303 	lsl.w	r3, r2, r3
 800b794:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	6a1a      	ldr	r2, [r3, #32]
 800b79a:	697b      	ldr	r3, [r7, #20]
 800b79c:	43db      	mvns	r3, r3
 800b79e:	401a      	ands	r2, r3
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	6a1a      	ldr	r2, [r3, #32]
 800b7a8:	68bb      	ldr	r3, [r7, #8]
 800b7aa:	f003 031f 	and.w	r3, r3, #31
 800b7ae:	6879      	ldr	r1, [r7, #4]
 800b7b0:	fa01 f303 	lsl.w	r3, r1, r3
 800b7b4:	431a      	orrs	r2, r3
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	621a      	str	r2, [r3, #32]
}
 800b7ba:	bf00      	nop
 800b7bc:	371c      	adds	r7, #28
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c4:	4770      	bx	lr
	...

0800b7c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b7c8:	b480      	push	{r7}
 800b7ca:	b085      	sub	sp, #20
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	6078      	str	r0, [r7, #4]
 800b7d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b7d8:	2b01      	cmp	r3, #1
 800b7da:	d101      	bne.n	800b7e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b7dc:	2302      	movs	r3, #2
 800b7de:	e050      	b.n	800b882 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	2201      	movs	r2, #1
 800b7e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	2202      	movs	r2, #2
 800b7ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	685b      	ldr	r3, [r3, #4]
 800b7f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	689b      	ldr	r3, [r3, #8]
 800b7fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b806:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b808:	683b      	ldr	r3, [r7, #0]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	68fa      	ldr	r2, [r7, #12]
 800b80e:	4313      	orrs	r3, r2
 800b810:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	68fa      	ldr	r2, [r7, #12]
 800b818:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	4a1c      	ldr	r2, [pc, #112]	; (800b890 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800b820:	4293      	cmp	r3, r2
 800b822:	d018      	beq.n	800b856 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b82c:	d013      	beq.n	800b856 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	4a18      	ldr	r2, [pc, #96]	; (800b894 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b834:	4293      	cmp	r3, r2
 800b836:	d00e      	beq.n	800b856 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	4a16      	ldr	r2, [pc, #88]	; (800b898 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800b83e:	4293      	cmp	r3, r2
 800b840:	d009      	beq.n	800b856 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	4a15      	ldr	r2, [pc, #84]	; (800b89c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800b848:	4293      	cmp	r3, r2
 800b84a:	d004      	beq.n	800b856 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	4a13      	ldr	r2, [pc, #76]	; (800b8a0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800b852:	4293      	cmp	r3, r2
 800b854:	d10c      	bne.n	800b870 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b856:	68bb      	ldr	r3, [r7, #8]
 800b858:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b85c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b85e:	683b      	ldr	r3, [r7, #0]
 800b860:	685b      	ldr	r3, [r3, #4]
 800b862:	68ba      	ldr	r2, [r7, #8]
 800b864:	4313      	orrs	r3, r2
 800b866:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	68ba      	ldr	r2, [r7, #8]
 800b86e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	2201      	movs	r2, #1
 800b874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	2200      	movs	r2, #0
 800b87c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b880:	2300      	movs	r3, #0
}
 800b882:	4618      	mov	r0, r3
 800b884:	3714      	adds	r7, #20
 800b886:	46bd      	mov	sp, r7
 800b888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88c:	4770      	bx	lr
 800b88e:	bf00      	nop
 800b890:	40010000 	.word	0x40010000
 800b894:	40000400 	.word	0x40000400
 800b898:	40000800 	.word	0x40000800
 800b89c:	40000c00 	.word	0x40000c00
 800b8a0:	40014000 	.word	0x40014000

0800b8a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b8a4:	b480      	push	{r7}
 800b8a6:	b083      	sub	sp, #12
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b8ac:	bf00      	nop
 800b8ae:	370c      	adds	r7, #12
 800b8b0:	46bd      	mov	sp, r7
 800b8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b6:	4770      	bx	lr

0800b8b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b8b8:	b480      	push	{r7}
 800b8ba:	b083      	sub	sp, #12
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b8c0:	bf00      	nop
 800b8c2:	370c      	adds	r7, #12
 800b8c4:	46bd      	mov	sp, r7
 800b8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ca:	4770      	bx	lr

0800b8cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	b082      	sub	sp, #8
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d101      	bne.n	800b8de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b8da:	2301      	movs	r3, #1
 800b8dc:	e03f      	b.n	800b95e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b8e4:	b2db      	uxtb	r3, r3
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d106      	bne.n	800b8f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	2200      	movs	r2, #0
 800b8ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b8f2:	6878      	ldr	r0, [r7, #4]
 800b8f4:	f7f9 fcfa 	bl	80052ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	2224      	movs	r2, #36	; 0x24
 800b8fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	68da      	ldr	r2, [r3, #12]
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b90e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b910:	6878      	ldr	r0, [r7, #4]
 800b912:	f001 f80b 	bl	800c92c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	691a      	ldr	r2, [r3, #16]
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b924:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	695a      	ldr	r2, [r3, #20]
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b934:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	68da      	ldr	r2, [r3, #12]
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b944:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	2200      	movs	r2, #0
 800b94a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	2220      	movs	r2, #32
 800b950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	2220      	movs	r2, #32
 800b958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b95c:	2300      	movs	r3, #0
}
 800b95e:	4618      	mov	r0, r3
 800b960:	3708      	adds	r7, #8
 800b962:	46bd      	mov	sp, r7
 800b964:	bd80      	pop	{r7, pc}

0800b966 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b966:	b580      	push	{r7, lr}
 800b968:	b08a      	sub	sp, #40	; 0x28
 800b96a:	af02      	add	r7, sp, #8
 800b96c:	60f8      	str	r0, [r7, #12]
 800b96e:	60b9      	str	r1, [r7, #8]
 800b970:	603b      	str	r3, [r7, #0]
 800b972:	4613      	mov	r3, r2
 800b974:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800b976:	2300      	movs	r3, #0
 800b978:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b980:	b2db      	uxtb	r3, r3
 800b982:	2b20      	cmp	r3, #32
 800b984:	d17c      	bne.n	800ba80 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800b986:	68bb      	ldr	r3, [r7, #8]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d002      	beq.n	800b992 <HAL_UART_Transmit+0x2c>
 800b98c:	88fb      	ldrh	r3, [r7, #6]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d101      	bne.n	800b996 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800b992:	2301      	movs	r3, #1
 800b994:	e075      	b.n	800ba82 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b99c:	2b01      	cmp	r3, #1
 800b99e:	d101      	bne.n	800b9a4 <HAL_UART_Transmit+0x3e>
 800b9a0:	2302      	movs	r3, #2
 800b9a2:	e06e      	b.n	800ba82 <HAL_UART_Transmit+0x11c>
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	2201      	movs	r2, #1
 800b9a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	2200      	movs	r2, #0
 800b9b0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	2221      	movs	r2, #33	; 0x21
 800b9b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b9ba:	f7fa ffb7 	bl	800692c <HAL_GetTick>
 800b9be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	88fa      	ldrh	r2, [r7, #6]
 800b9c4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	88fa      	ldrh	r2, [r7, #6]
 800b9ca:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	689b      	ldr	r3, [r3, #8]
 800b9d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b9d4:	d108      	bne.n	800b9e8 <HAL_UART_Transmit+0x82>
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	691b      	ldr	r3, [r3, #16]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d104      	bne.n	800b9e8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800b9de:	2300      	movs	r3, #0
 800b9e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b9e2:	68bb      	ldr	r3, [r7, #8]
 800b9e4:	61bb      	str	r3, [r7, #24]
 800b9e6:	e003      	b.n	800b9f0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800b9e8:	68bb      	ldr	r3, [r7, #8]
 800b9ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b9ec:	2300      	movs	r3, #0
 800b9ee:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	2200      	movs	r2, #0
 800b9f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800b9f8:	e02a      	b.n	800ba50 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b9fa:	683b      	ldr	r3, [r7, #0]
 800b9fc:	9300      	str	r3, [sp, #0]
 800b9fe:	697b      	ldr	r3, [r7, #20]
 800ba00:	2200      	movs	r2, #0
 800ba02:	2180      	movs	r1, #128	; 0x80
 800ba04:	68f8      	ldr	r0, [r7, #12]
 800ba06:	f000 fcc3 	bl	800c390 <UART_WaitOnFlagUntilTimeout>
 800ba0a:	4603      	mov	r3, r0
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d001      	beq.n	800ba14 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800ba10:	2303      	movs	r3, #3
 800ba12:	e036      	b.n	800ba82 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800ba14:	69fb      	ldr	r3, [r7, #28]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d10b      	bne.n	800ba32 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ba1a:	69bb      	ldr	r3, [r7, #24]
 800ba1c:	881b      	ldrh	r3, [r3, #0]
 800ba1e:	461a      	mov	r2, r3
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ba28:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800ba2a:	69bb      	ldr	r3, [r7, #24]
 800ba2c:	3302      	adds	r3, #2
 800ba2e:	61bb      	str	r3, [r7, #24]
 800ba30:	e007      	b.n	800ba42 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800ba32:	69fb      	ldr	r3, [r7, #28]
 800ba34:	781a      	ldrb	r2, [r3, #0]
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800ba3c:	69fb      	ldr	r3, [r7, #28]
 800ba3e:	3301      	adds	r3, #1
 800ba40:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ba46:	b29b      	uxth	r3, r3
 800ba48:	3b01      	subs	r3, #1
 800ba4a:	b29a      	uxth	r2, r3
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ba54:	b29b      	uxth	r3, r3
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d1cf      	bne.n	800b9fa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ba5a:	683b      	ldr	r3, [r7, #0]
 800ba5c:	9300      	str	r3, [sp, #0]
 800ba5e:	697b      	ldr	r3, [r7, #20]
 800ba60:	2200      	movs	r2, #0
 800ba62:	2140      	movs	r1, #64	; 0x40
 800ba64:	68f8      	ldr	r0, [r7, #12]
 800ba66:	f000 fc93 	bl	800c390 <UART_WaitOnFlagUntilTimeout>
 800ba6a:	4603      	mov	r3, r0
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d001      	beq.n	800ba74 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800ba70:	2303      	movs	r3, #3
 800ba72:	e006      	b.n	800ba82 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	2220      	movs	r2, #32
 800ba78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	e000      	b.n	800ba82 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800ba80:	2302      	movs	r3, #2
  }
}
 800ba82:	4618      	mov	r0, r3
 800ba84:	3720      	adds	r7, #32
 800ba86:	46bd      	mov	sp, r7
 800ba88:	bd80      	pop	{r7, pc}

0800ba8a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ba8a:	b580      	push	{r7, lr}
 800ba8c:	b08a      	sub	sp, #40	; 0x28
 800ba8e:	af02      	add	r7, sp, #8
 800ba90:	60f8      	str	r0, [r7, #12]
 800ba92:	60b9      	str	r1, [r7, #8]
 800ba94:	603b      	str	r3, [r7, #0]
 800ba96:	4613      	mov	r3, r2
 800ba98:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800baa4:	b2db      	uxtb	r3, r3
 800baa6:	2b20      	cmp	r3, #32
 800baa8:	f040 808c 	bne.w	800bbc4 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800baac:	68bb      	ldr	r3, [r7, #8]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d002      	beq.n	800bab8 <HAL_UART_Receive+0x2e>
 800bab2:	88fb      	ldrh	r3, [r7, #6]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d101      	bne.n	800babc <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800bab8:	2301      	movs	r3, #1
 800baba:	e084      	b.n	800bbc6 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bac2:	2b01      	cmp	r3, #1
 800bac4:	d101      	bne.n	800baca <HAL_UART_Receive+0x40>
 800bac6:	2302      	movs	r3, #2
 800bac8:	e07d      	b.n	800bbc6 <HAL_UART_Receive+0x13c>
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	2201      	movs	r2, #1
 800bace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	2200      	movs	r2, #0
 800bad6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	2222      	movs	r2, #34	; 0x22
 800badc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	2200      	movs	r2, #0
 800bae4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bae6:	f7fa ff21 	bl	800692c <HAL_GetTick>
 800baea:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	88fa      	ldrh	r2, [r7, #6]
 800baf0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	88fa      	ldrh	r2, [r7, #6]
 800baf6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	689b      	ldr	r3, [r3, #8]
 800bafc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bb00:	d108      	bne.n	800bb14 <HAL_UART_Receive+0x8a>
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	691b      	ldr	r3, [r3, #16]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d104      	bne.n	800bb14 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800bb0e:	68bb      	ldr	r3, [r7, #8]
 800bb10:	61bb      	str	r3, [r7, #24]
 800bb12:	e003      	b.n	800bb1c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800bb14:	68bb      	ldr	r3, [r7, #8]
 800bb16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bb18:	2300      	movs	r3, #0
 800bb1a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	2200      	movs	r2, #0
 800bb20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800bb24:	e043      	b.n	800bbae <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800bb26:	683b      	ldr	r3, [r7, #0]
 800bb28:	9300      	str	r3, [sp, #0]
 800bb2a:	697b      	ldr	r3, [r7, #20]
 800bb2c:	2200      	movs	r2, #0
 800bb2e:	2120      	movs	r1, #32
 800bb30:	68f8      	ldr	r0, [r7, #12]
 800bb32:	f000 fc2d 	bl	800c390 <UART_WaitOnFlagUntilTimeout>
 800bb36:	4603      	mov	r3, r0
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d001      	beq.n	800bb40 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800bb3c:	2303      	movs	r3, #3
 800bb3e:	e042      	b.n	800bbc6 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800bb40:	69fb      	ldr	r3, [r7, #28]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d10c      	bne.n	800bb60 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	685b      	ldr	r3, [r3, #4]
 800bb4c:	b29b      	uxth	r3, r3
 800bb4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb52:	b29a      	uxth	r2, r3
 800bb54:	69bb      	ldr	r3, [r7, #24]
 800bb56:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800bb58:	69bb      	ldr	r3, [r7, #24]
 800bb5a:	3302      	adds	r3, #2
 800bb5c:	61bb      	str	r3, [r7, #24]
 800bb5e:	e01f      	b.n	800bba0 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	689b      	ldr	r3, [r3, #8]
 800bb64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bb68:	d007      	beq.n	800bb7a <HAL_UART_Receive+0xf0>
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	689b      	ldr	r3, [r3, #8]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d10a      	bne.n	800bb88 <HAL_UART_Receive+0xfe>
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	691b      	ldr	r3, [r3, #16]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d106      	bne.n	800bb88 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	685b      	ldr	r3, [r3, #4]
 800bb80:	b2da      	uxtb	r2, r3
 800bb82:	69fb      	ldr	r3, [r7, #28]
 800bb84:	701a      	strb	r2, [r3, #0]
 800bb86:	e008      	b.n	800bb9a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	685b      	ldr	r3, [r3, #4]
 800bb8e:	b2db      	uxtb	r3, r3
 800bb90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb94:	b2da      	uxtb	r2, r3
 800bb96:	69fb      	ldr	r3, [r7, #28]
 800bb98:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800bb9a:	69fb      	ldr	r3, [r7, #28]
 800bb9c:	3301      	adds	r3, #1
 800bb9e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bba4:	b29b      	uxth	r3, r3
 800bba6:	3b01      	subs	r3, #1
 800bba8:	b29a      	uxth	r2, r3
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bbb2:	b29b      	uxth	r3, r3
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d1b6      	bne.n	800bb26 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	2220      	movs	r2, #32
 800bbbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	e000      	b.n	800bbc6 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800bbc4:	2302      	movs	r3, #2
  }
}
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	3720      	adds	r7, #32
 800bbca:	46bd      	mov	sp, r7
 800bbcc:	bd80      	pop	{r7, pc}

0800bbce <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bbce:	b580      	push	{r7, lr}
 800bbd0:	b084      	sub	sp, #16
 800bbd2:	af00      	add	r7, sp, #0
 800bbd4:	60f8      	str	r0, [r7, #12]
 800bbd6:	60b9      	str	r1, [r7, #8]
 800bbd8:	4613      	mov	r3, r2
 800bbda:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bbe2:	b2db      	uxtb	r3, r3
 800bbe4:	2b20      	cmp	r3, #32
 800bbe6:	d11d      	bne.n	800bc24 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800bbe8:	68bb      	ldr	r3, [r7, #8]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d002      	beq.n	800bbf4 <HAL_UART_Receive_DMA+0x26>
 800bbee:	88fb      	ldrh	r3, [r7, #6]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d101      	bne.n	800bbf8 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800bbf4:	2301      	movs	r3, #1
 800bbf6:	e016      	b.n	800bc26 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bbfe:	2b01      	cmp	r3, #1
 800bc00:	d101      	bne.n	800bc06 <HAL_UART_Receive_DMA+0x38>
 800bc02:	2302      	movs	r3, #2
 800bc04:	e00f      	b.n	800bc26 <HAL_UART_Receive_DMA+0x58>
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	2201      	movs	r2, #1
 800bc0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	2200      	movs	r2, #0
 800bc12:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800bc14:	88fb      	ldrh	r3, [r7, #6]
 800bc16:	461a      	mov	r2, r3
 800bc18:	68b9      	ldr	r1, [r7, #8]
 800bc1a:	68f8      	ldr	r0, [r7, #12]
 800bc1c:	f000 fc26 	bl	800c46c <UART_Start_Receive_DMA>
 800bc20:	4603      	mov	r3, r0
 800bc22:	e000      	b.n	800bc26 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800bc24:	2302      	movs	r3, #2
  }
}
 800bc26:	4618      	mov	r0, r3
 800bc28:	3710      	adds	r7, #16
 800bc2a:	46bd      	mov	sp, r7
 800bc2c:	bd80      	pop	{r7, pc}
	...

0800bc30 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bc30:	b580      	push	{r7, lr}
 800bc32:	b0ba      	sub	sp, #232	; 0xe8
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	68db      	ldr	r3, [r3, #12]
 800bc48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	695b      	ldr	r3, [r3, #20]
 800bc52:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800bc56:	2300      	movs	r3, #0
 800bc58:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800bc5c:	2300      	movs	r3, #0
 800bc5e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800bc62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc66:	f003 030f 	and.w	r3, r3, #15
 800bc6a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800bc6e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d10f      	bne.n	800bc96 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bc76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc7a:	f003 0320 	and.w	r3, r3, #32
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d009      	beq.n	800bc96 <HAL_UART_IRQHandler+0x66>
 800bc82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc86:	f003 0320 	and.w	r3, r3, #32
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d003      	beq.n	800bc96 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800bc8e:	6878      	ldr	r0, [r7, #4]
 800bc90:	f000 fd91 	bl	800c7b6 <UART_Receive_IT>
      return;
 800bc94:	e256      	b.n	800c144 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800bc96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	f000 80de 	beq.w	800be5c <HAL_UART_IRQHandler+0x22c>
 800bca0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bca4:	f003 0301 	and.w	r3, r3, #1
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d106      	bne.n	800bcba <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800bcac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bcb0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	f000 80d1 	beq.w	800be5c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800bcba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bcbe:	f003 0301 	and.w	r3, r3, #1
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d00b      	beq.n	800bcde <HAL_UART_IRQHandler+0xae>
 800bcc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bcca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d005      	beq.n	800bcde <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcd6:	f043 0201 	orr.w	r2, r3, #1
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bcde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bce2:	f003 0304 	and.w	r3, r3, #4
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d00b      	beq.n	800bd02 <HAL_UART_IRQHandler+0xd2>
 800bcea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bcee:	f003 0301 	and.w	r3, r3, #1
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d005      	beq.n	800bd02 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcfa:	f043 0202 	orr.w	r2, r3, #2
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bd02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd06:	f003 0302 	and.w	r3, r3, #2
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d00b      	beq.n	800bd26 <HAL_UART_IRQHandler+0xf6>
 800bd0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bd12:	f003 0301 	and.w	r3, r3, #1
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d005      	beq.n	800bd26 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd1e:	f043 0204 	orr.w	r2, r3, #4
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800bd26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd2a:	f003 0308 	and.w	r3, r3, #8
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d011      	beq.n	800bd56 <HAL_UART_IRQHandler+0x126>
 800bd32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bd36:	f003 0320 	and.w	r3, r3, #32
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d105      	bne.n	800bd4a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800bd3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bd42:	f003 0301 	and.w	r3, r3, #1
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d005      	beq.n	800bd56 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd4e:	f043 0208 	orr.w	r2, r3, #8
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	f000 81ed 	beq.w	800c13a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bd60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd64:	f003 0320 	and.w	r3, r3, #32
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d008      	beq.n	800bd7e <HAL_UART_IRQHandler+0x14e>
 800bd6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bd70:	f003 0320 	and.w	r3, r3, #32
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d002      	beq.n	800bd7e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800bd78:	6878      	ldr	r0, [r7, #4]
 800bd7a:	f000 fd1c 	bl	800c7b6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	695b      	ldr	r3, [r3, #20]
 800bd84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd88:	2b40      	cmp	r3, #64	; 0x40
 800bd8a:	bf0c      	ite	eq
 800bd8c:	2301      	moveq	r3, #1
 800bd8e:	2300      	movne	r3, #0
 800bd90:	b2db      	uxtb	r3, r3
 800bd92:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd9a:	f003 0308 	and.w	r3, r3, #8
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d103      	bne.n	800bdaa <HAL_UART_IRQHandler+0x17a>
 800bda2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d04f      	beq.n	800be4a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bdaa:	6878      	ldr	r0, [r7, #4]
 800bdac:	f000 fc24 	bl	800c5f8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	695b      	ldr	r3, [r3, #20]
 800bdb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bdba:	2b40      	cmp	r3, #64	; 0x40
 800bdbc:	d141      	bne.n	800be42 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	3314      	adds	r3, #20
 800bdc4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdc8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bdcc:	e853 3f00 	ldrex	r3, [r3]
 800bdd0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800bdd4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bdd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bddc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	3314      	adds	r3, #20
 800bde6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800bdea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800bdee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdf2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800bdf6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800bdfa:	e841 2300 	strex	r3, r2, [r1]
 800bdfe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800be02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800be06:	2b00      	cmp	r3, #0
 800be08:	d1d9      	bne.n	800bdbe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d013      	beq.n	800be3a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be16:	4a7d      	ldr	r2, [pc, #500]	; (800c00c <HAL_UART_IRQHandler+0x3dc>)
 800be18:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be1e:	4618      	mov	r0, r3
 800be20:	f7fb f83c 	bl	8006e9c <HAL_DMA_Abort_IT>
 800be24:	4603      	mov	r3, r0
 800be26:	2b00      	cmp	r3, #0
 800be28:	d016      	beq.n	800be58 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be30:	687a      	ldr	r2, [r7, #4]
 800be32:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800be34:	4610      	mov	r0, r2
 800be36:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be38:	e00e      	b.n	800be58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800be3a:	6878      	ldr	r0, [r7, #4]
 800be3c:	f000 f99a 	bl	800c174 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be40:	e00a      	b.n	800be58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800be42:	6878      	ldr	r0, [r7, #4]
 800be44:	f000 f996 	bl	800c174 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be48:	e006      	b.n	800be58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800be4a:	6878      	ldr	r0, [r7, #4]
 800be4c:	f000 f992 	bl	800c174 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	2200      	movs	r2, #0
 800be54:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800be56:	e170      	b.n	800c13a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be58:	bf00      	nop
    return;
 800be5a:	e16e      	b.n	800c13a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be60:	2b01      	cmp	r3, #1
 800be62:	f040 814a 	bne.w	800c0fa <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800be66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be6a:	f003 0310 	and.w	r3, r3, #16
 800be6e:	2b00      	cmp	r3, #0
 800be70:	f000 8143 	beq.w	800c0fa <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800be74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800be78:	f003 0310 	and.w	r3, r3, #16
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	f000 813c 	beq.w	800c0fa <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800be82:	2300      	movs	r3, #0
 800be84:	60bb      	str	r3, [r7, #8]
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	60bb      	str	r3, [r7, #8]
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	685b      	ldr	r3, [r3, #4]
 800be94:	60bb      	str	r3, [r7, #8]
 800be96:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	695b      	ldr	r3, [r3, #20]
 800be9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bea2:	2b40      	cmp	r3, #64	; 0x40
 800bea4:	f040 80b4 	bne.w	800c010 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	685b      	ldr	r3, [r3, #4]
 800beb0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800beb4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800beb8:	2b00      	cmp	r3, #0
 800beba:	f000 8140 	beq.w	800c13e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800bec2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bec6:	429a      	cmp	r2, r3
 800bec8:	f080 8139 	bcs.w	800c13e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bed2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bed8:	69db      	ldr	r3, [r3, #28]
 800beda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bede:	f000 8088 	beq.w	800bff2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	330c      	adds	r3, #12
 800bee8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800beec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bef0:	e853 3f00 	ldrex	r3, [r3]
 800bef4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800bef8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800befc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bf00:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	330c      	adds	r3, #12
 800bf0a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800bf0e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800bf12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf16:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800bf1a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800bf1e:	e841 2300 	strex	r3, r2, [r1]
 800bf22:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800bf26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d1d9      	bne.n	800bee2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	3314      	adds	r3, #20
 800bf34:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bf38:	e853 3f00 	ldrex	r3, [r3]
 800bf3c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800bf3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bf40:	f023 0301 	bic.w	r3, r3, #1
 800bf44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	3314      	adds	r3, #20
 800bf4e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800bf52:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800bf56:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf58:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800bf5a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bf5e:	e841 2300 	strex	r3, r2, [r1]
 800bf62:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800bf64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d1e1      	bne.n	800bf2e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	3314      	adds	r3, #20
 800bf70:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bf74:	e853 3f00 	ldrex	r3, [r3]
 800bf78:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800bf7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bf7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bf80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	3314      	adds	r3, #20
 800bf8a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800bf8e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800bf90:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf92:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800bf94:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bf96:	e841 2300 	strex	r3, r2, [r1]
 800bf9a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800bf9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d1e3      	bne.n	800bf6a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	2220      	movs	r2, #32
 800bfa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	2200      	movs	r2, #0
 800bfae:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	330c      	adds	r3, #12
 800bfb6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bfba:	e853 3f00 	ldrex	r3, [r3]
 800bfbe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bfc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bfc2:	f023 0310 	bic.w	r3, r3, #16
 800bfc6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	330c      	adds	r3, #12
 800bfd0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800bfd4:	65ba      	str	r2, [r7, #88]	; 0x58
 800bfd6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfd8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bfda:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bfdc:	e841 2300 	strex	r3, r2, [r1]
 800bfe0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bfe2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d1e3      	bne.n	800bfb0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfec:	4618      	mov	r0, r3
 800bfee:	f7fa fee5 	bl	8006dbc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bffa:	b29b      	uxth	r3, r3
 800bffc:	1ad3      	subs	r3, r2, r3
 800bffe:	b29b      	uxth	r3, r3
 800c000:	4619      	mov	r1, r3
 800c002:	6878      	ldr	r0, [r7, #4]
 800c004:	f000 f8c0 	bl	800c188 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c008:	e099      	b.n	800c13e <HAL_UART_IRQHandler+0x50e>
 800c00a:	bf00      	nop
 800c00c:	0800c6bf 	.word	0x0800c6bf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c018:	b29b      	uxth	r3, r3
 800c01a:	1ad3      	subs	r3, r2, r3
 800c01c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c024:	b29b      	uxth	r3, r3
 800c026:	2b00      	cmp	r3, #0
 800c028:	f000 808b 	beq.w	800c142 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800c02c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c030:	2b00      	cmp	r3, #0
 800c032:	f000 8086 	beq.w	800c142 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	330c      	adds	r3, #12
 800c03c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c03e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c040:	e853 3f00 	ldrex	r3, [r3]
 800c044:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c048:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c04c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	330c      	adds	r3, #12
 800c056:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800c05a:	647a      	str	r2, [r7, #68]	; 0x44
 800c05c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c05e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c060:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c062:	e841 2300 	strex	r3, r2, [r1]
 800c066:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c068:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d1e3      	bne.n	800c036 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	3314      	adds	r3, #20
 800c074:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c078:	e853 3f00 	ldrex	r3, [r3]
 800c07c:	623b      	str	r3, [r7, #32]
   return(result);
 800c07e:	6a3b      	ldr	r3, [r7, #32]
 800c080:	f023 0301 	bic.w	r3, r3, #1
 800c084:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	3314      	adds	r3, #20
 800c08e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c092:	633a      	str	r2, [r7, #48]	; 0x30
 800c094:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c096:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c098:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c09a:	e841 2300 	strex	r3, r2, [r1]
 800c09e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c0a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d1e3      	bne.n	800c06e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	2220      	movs	r2, #32
 800c0aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	2200      	movs	r2, #0
 800c0b2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	330c      	adds	r3, #12
 800c0ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0bc:	693b      	ldr	r3, [r7, #16]
 800c0be:	e853 3f00 	ldrex	r3, [r3]
 800c0c2:	60fb      	str	r3, [r7, #12]
   return(result);
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	f023 0310 	bic.w	r3, r3, #16
 800c0ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	330c      	adds	r3, #12
 800c0d4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800c0d8:	61fa      	str	r2, [r7, #28]
 800c0da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0dc:	69b9      	ldr	r1, [r7, #24]
 800c0de:	69fa      	ldr	r2, [r7, #28]
 800c0e0:	e841 2300 	strex	r3, r2, [r1]
 800c0e4:	617b      	str	r3, [r7, #20]
   return(result);
 800c0e6:	697b      	ldr	r3, [r7, #20]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d1e3      	bne.n	800c0b4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c0ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c0f0:	4619      	mov	r1, r3
 800c0f2:	6878      	ldr	r0, [r7, #4]
 800c0f4:	f000 f848 	bl	800c188 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c0f8:	e023      	b.n	800c142 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c0fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c0fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c102:	2b00      	cmp	r3, #0
 800c104:	d009      	beq.n	800c11a <HAL_UART_IRQHandler+0x4ea>
 800c106:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c10a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d003      	beq.n	800c11a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800c112:	6878      	ldr	r0, [r7, #4]
 800c114:	f000 fae7 	bl	800c6e6 <UART_Transmit_IT>
    return;
 800c118:	e014      	b.n	800c144 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c11a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c11e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c122:	2b00      	cmp	r3, #0
 800c124:	d00e      	beq.n	800c144 <HAL_UART_IRQHandler+0x514>
 800c126:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c12a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d008      	beq.n	800c144 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800c132:	6878      	ldr	r0, [r7, #4]
 800c134:	f000 fb27 	bl	800c786 <UART_EndTransmit_IT>
    return;
 800c138:	e004      	b.n	800c144 <HAL_UART_IRQHandler+0x514>
    return;
 800c13a:	bf00      	nop
 800c13c:	e002      	b.n	800c144 <HAL_UART_IRQHandler+0x514>
      return;
 800c13e:	bf00      	nop
 800c140:	e000      	b.n	800c144 <HAL_UART_IRQHandler+0x514>
      return;
 800c142:	bf00      	nop
  }
}
 800c144:	37e8      	adds	r7, #232	; 0xe8
 800c146:	46bd      	mov	sp, r7
 800c148:	bd80      	pop	{r7, pc}
 800c14a:	bf00      	nop

0800c14c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c14c:	b480      	push	{r7}
 800c14e:	b083      	sub	sp, #12
 800c150:	af00      	add	r7, sp, #0
 800c152:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800c154:	bf00      	nop
 800c156:	370c      	adds	r7, #12
 800c158:	46bd      	mov	sp, r7
 800c15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c15e:	4770      	bx	lr

0800c160 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c160:	b480      	push	{r7}
 800c162:	b083      	sub	sp, #12
 800c164:	af00      	add	r7, sp, #0
 800c166:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800c168:	bf00      	nop
 800c16a:	370c      	adds	r7, #12
 800c16c:	46bd      	mov	sp, r7
 800c16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c172:	4770      	bx	lr

0800c174 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c174:	b480      	push	{r7}
 800c176:	b083      	sub	sp, #12
 800c178:	af00      	add	r7, sp, #0
 800c17a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800c17c:	bf00      	nop
 800c17e:	370c      	adds	r7, #12
 800c180:	46bd      	mov	sp, r7
 800c182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c186:	4770      	bx	lr

0800c188 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c188:	b480      	push	{r7}
 800c18a:	b083      	sub	sp, #12
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	6078      	str	r0, [r7, #4]
 800c190:	460b      	mov	r3, r1
 800c192:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c194:	bf00      	nop
 800c196:	370c      	adds	r7, #12
 800c198:	46bd      	mov	sp, r7
 800c19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c19e:	4770      	bx	lr

0800c1a0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c1a0:	b580      	push	{r7, lr}
 800c1a2:	b09c      	sub	sp, #112	; 0x70
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1ac:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d172      	bne.n	800c2a2 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800c1bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c1be:	2200      	movs	r2, #0
 800c1c0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c1c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	330c      	adds	r3, #12
 800c1c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c1cc:	e853 3f00 	ldrex	r3, [r3]
 800c1d0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c1d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c1d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c1d8:	66bb      	str	r3, [r7, #104]	; 0x68
 800c1da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	330c      	adds	r3, #12
 800c1e0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c1e2:	65ba      	str	r2, [r7, #88]	; 0x58
 800c1e4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1e6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c1e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c1ea:	e841 2300 	strex	r3, r2, [r1]
 800c1ee:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c1f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d1e5      	bne.n	800c1c2 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c1f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	3314      	adds	r3, #20
 800c1fc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c200:	e853 3f00 	ldrex	r3, [r3]
 800c204:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c208:	f023 0301 	bic.w	r3, r3, #1
 800c20c:	667b      	str	r3, [r7, #100]	; 0x64
 800c20e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	3314      	adds	r3, #20
 800c214:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c216:	647a      	str	r2, [r7, #68]	; 0x44
 800c218:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c21a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c21c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c21e:	e841 2300 	strex	r3, r2, [r1]
 800c222:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c224:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c226:	2b00      	cmp	r3, #0
 800c228:	d1e5      	bne.n	800c1f6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c22a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	3314      	adds	r3, #20
 800c230:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c234:	e853 3f00 	ldrex	r3, [r3]
 800c238:	623b      	str	r3, [r7, #32]
   return(result);
 800c23a:	6a3b      	ldr	r3, [r7, #32]
 800c23c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c240:	663b      	str	r3, [r7, #96]	; 0x60
 800c242:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	3314      	adds	r3, #20
 800c248:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c24a:	633a      	str	r2, [r7, #48]	; 0x30
 800c24c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c24e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c250:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c252:	e841 2300 	strex	r3, r2, [r1]
 800c256:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d1e5      	bne.n	800c22a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c25e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c260:	2220      	movs	r2, #32
 800c262:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c266:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c26a:	2b01      	cmp	r3, #1
 800c26c:	d119      	bne.n	800c2a2 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c26e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	330c      	adds	r3, #12
 800c274:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c276:	693b      	ldr	r3, [r7, #16]
 800c278:	e853 3f00 	ldrex	r3, [r3]
 800c27c:	60fb      	str	r3, [r7, #12]
   return(result);
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	f023 0310 	bic.w	r3, r3, #16
 800c284:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c286:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	330c      	adds	r3, #12
 800c28c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c28e:	61fa      	str	r2, [r7, #28]
 800c290:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c292:	69b9      	ldr	r1, [r7, #24]
 800c294:	69fa      	ldr	r2, [r7, #28]
 800c296:	e841 2300 	strex	r3, r2, [r1]
 800c29a:	617b      	str	r3, [r7, #20]
   return(result);
 800c29c:	697b      	ldr	r3, [r7, #20]
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d1e5      	bne.n	800c26e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c2a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c2a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2a6:	2b01      	cmp	r3, #1
 800c2a8:	d106      	bne.n	800c2b8 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c2aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c2ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c2ae:	4619      	mov	r1, r3
 800c2b0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800c2b2:	f7ff ff69 	bl	800c188 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c2b6:	e002      	b.n	800c2be <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800c2b8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800c2ba:	f7f8 fec3 	bl	8005044 <HAL_UART_RxCpltCallback>
}
 800c2be:	bf00      	nop
 800c2c0:	3770      	adds	r7, #112	; 0x70
 800c2c2:	46bd      	mov	sp, r7
 800c2c4:	bd80      	pop	{r7, pc}

0800c2c6 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c2c6:	b580      	push	{r7, lr}
 800c2c8:	b084      	sub	sp, #16
 800c2ca:	af00      	add	r7, sp, #0
 800c2cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2d2:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2d8:	2b01      	cmp	r3, #1
 800c2da:	d108      	bne.n	800c2ee <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c2e0:	085b      	lsrs	r3, r3, #1
 800c2e2:	b29b      	uxth	r3, r3
 800c2e4:	4619      	mov	r1, r3
 800c2e6:	68f8      	ldr	r0, [r7, #12]
 800c2e8:	f7ff ff4e 	bl	800c188 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c2ec:	e002      	b.n	800c2f4 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800c2ee:	68f8      	ldr	r0, [r7, #12]
 800c2f0:	f7ff ff36 	bl	800c160 <HAL_UART_RxHalfCpltCallback>
}
 800c2f4:	bf00      	nop
 800c2f6:	3710      	adds	r7, #16
 800c2f8:	46bd      	mov	sp, r7
 800c2fa:	bd80      	pop	{r7, pc}

0800c2fc <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c2fc:	b580      	push	{r7, lr}
 800c2fe:	b084      	sub	sp, #16
 800c300:	af00      	add	r7, sp, #0
 800c302:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800c304:	2300      	movs	r3, #0
 800c306:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c30c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800c30e:	68bb      	ldr	r3, [r7, #8]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	695b      	ldr	r3, [r3, #20]
 800c314:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c318:	2b80      	cmp	r3, #128	; 0x80
 800c31a:	bf0c      	ite	eq
 800c31c:	2301      	moveq	r3, #1
 800c31e:	2300      	movne	r3, #0
 800c320:	b2db      	uxtb	r3, r3
 800c322:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800c324:	68bb      	ldr	r3, [r7, #8]
 800c326:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c32a:	b2db      	uxtb	r3, r3
 800c32c:	2b21      	cmp	r3, #33	; 0x21
 800c32e:	d108      	bne.n	800c342 <UART_DMAError+0x46>
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	2b00      	cmp	r3, #0
 800c334:	d005      	beq.n	800c342 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800c336:	68bb      	ldr	r3, [r7, #8]
 800c338:	2200      	movs	r2, #0
 800c33a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800c33c:	68b8      	ldr	r0, [r7, #8]
 800c33e:	f000 f933 	bl	800c5a8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c342:	68bb      	ldr	r3, [r7, #8]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	695b      	ldr	r3, [r3, #20]
 800c348:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c34c:	2b40      	cmp	r3, #64	; 0x40
 800c34e:	bf0c      	ite	eq
 800c350:	2301      	moveq	r3, #1
 800c352:	2300      	movne	r3, #0
 800c354:	b2db      	uxtb	r3, r3
 800c356:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800c358:	68bb      	ldr	r3, [r7, #8]
 800c35a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c35e:	b2db      	uxtb	r3, r3
 800c360:	2b22      	cmp	r3, #34	; 0x22
 800c362:	d108      	bne.n	800c376 <UART_DMAError+0x7a>
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	2b00      	cmp	r3, #0
 800c368:	d005      	beq.n	800c376 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800c36a:	68bb      	ldr	r3, [r7, #8]
 800c36c:	2200      	movs	r2, #0
 800c36e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800c370:	68b8      	ldr	r0, [r7, #8]
 800c372:	f000 f941 	bl	800c5f8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c376:	68bb      	ldr	r3, [r7, #8]
 800c378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c37a:	f043 0210 	orr.w	r2, r3, #16
 800c37e:	68bb      	ldr	r3, [r7, #8]
 800c380:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c382:	68b8      	ldr	r0, [r7, #8]
 800c384:	f7ff fef6 	bl	800c174 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c388:	bf00      	nop
 800c38a:	3710      	adds	r7, #16
 800c38c:	46bd      	mov	sp, r7
 800c38e:	bd80      	pop	{r7, pc}

0800c390 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800c390:	b580      	push	{r7, lr}
 800c392:	b090      	sub	sp, #64	; 0x40
 800c394:	af00      	add	r7, sp, #0
 800c396:	60f8      	str	r0, [r7, #12]
 800c398:	60b9      	str	r1, [r7, #8]
 800c39a:	603b      	str	r3, [r7, #0]
 800c39c:	4613      	mov	r3, r2
 800c39e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c3a0:	e050      	b.n	800c444 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c3a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c3a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3a8:	d04c      	beq.n	800c444 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800c3aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d007      	beq.n	800c3c0 <UART_WaitOnFlagUntilTimeout+0x30>
 800c3b0:	f7fa fabc 	bl	800692c <HAL_GetTick>
 800c3b4:	4602      	mov	r2, r0
 800c3b6:	683b      	ldr	r3, [r7, #0]
 800c3b8:	1ad3      	subs	r3, r2, r3
 800c3ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c3bc:	429a      	cmp	r2, r3
 800c3be:	d241      	bcs.n	800c444 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	330c      	adds	r3, #12
 800c3c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3ca:	e853 3f00 	ldrex	r3, [r3]
 800c3ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c3d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3d2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c3d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	330c      	adds	r3, #12
 800c3de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c3e0:	637a      	str	r2, [r7, #52]	; 0x34
 800c3e2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3e4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c3e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c3e8:	e841 2300 	strex	r3, r2, [r1]
 800c3ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c3ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d1e5      	bne.n	800c3c0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	3314      	adds	r3, #20
 800c3fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3fc:	697b      	ldr	r3, [r7, #20]
 800c3fe:	e853 3f00 	ldrex	r3, [r3]
 800c402:	613b      	str	r3, [r7, #16]
   return(result);
 800c404:	693b      	ldr	r3, [r7, #16]
 800c406:	f023 0301 	bic.w	r3, r3, #1
 800c40a:	63bb      	str	r3, [r7, #56]	; 0x38
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	3314      	adds	r3, #20
 800c412:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c414:	623a      	str	r2, [r7, #32]
 800c416:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c418:	69f9      	ldr	r1, [r7, #28]
 800c41a:	6a3a      	ldr	r2, [r7, #32]
 800c41c:	e841 2300 	strex	r3, r2, [r1]
 800c420:	61bb      	str	r3, [r7, #24]
   return(result);
 800c422:	69bb      	ldr	r3, [r7, #24]
 800c424:	2b00      	cmp	r3, #0
 800c426:	d1e5      	bne.n	800c3f4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	2220      	movs	r2, #32
 800c42c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	2220      	movs	r2, #32
 800c434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	2200      	movs	r2, #0
 800c43c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800c440:	2303      	movs	r3, #3
 800c442:	e00f      	b.n	800c464 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	681a      	ldr	r2, [r3, #0]
 800c44a:	68bb      	ldr	r3, [r7, #8]
 800c44c:	4013      	ands	r3, r2
 800c44e:	68ba      	ldr	r2, [r7, #8]
 800c450:	429a      	cmp	r2, r3
 800c452:	bf0c      	ite	eq
 800c454:	2301      	moveq	r3, #1
 800c456:	2300      	movne	r3, #0
 800c458:	b2db      	uxtb	r3, r3
 800c45a:	461a      	mov	r2, r3
 800c45c:	79fb      	ldrb	r3, [r7, #7]
 800c45e:	429a      	cmp	r2, r3
 800c460:	d09f      	beq.n	800c3a2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c462:	2300      	movs	r3, #0
}
 800c464:	4618      	mov	r0, r3
 800c466:	3740      	adds	r7, #64	; 0x40
 800c468:	46bd      	mov	sp, r7
 800c46a:	bd80      	pop	{r7, pc}

0800c46c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c46c:	b580      	push	{r7, lr}
 800c46e:	b098      	sub	sp, #96	; 0x60
 800c470:	af00      	add	r7, sp, #0
 800c472:	60f8      	str	r0, [r7, #12]
 800c474:	60b9      	str	r1, [r7, #8]
 800c476:	4613      	mov	r3, r2
 800c478:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800c47a:	68ba      	ldr	r2, [r7, #8]
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	88fa      	ldrh	r2, [r7, #6]
 800c484:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	2200      	movs	r2, #0
 800c48a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	2222      	movs	r2, #34	; 0x22
 800c490:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c498:	4a40      	ldr	r2, [pc, #256]	; (800c59c <UART_Start_Receive_DMA+0x130>)
 800c49a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4a0:	4a3f      	ldr	r2, [pc, #252]	; (800c5a0 <UART_Start_Receive_DMA+0x134>)
 800c4a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4a8:	4a3e      	ldr	r2, [pc, #248]	; (800c5a4 <UART_Start_Receive_DMA+0x138>)
 800c4aa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4b0:	2200      	movs	r2, #0
 800c4b2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800c4b4:	f107 0308 	add.w	r3, r7, #8
 800c4b8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	3304      	adds	r3, #4
 800c4c4:	4619      	mov	r1, r3
 800c4c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c4c8:	681a      	ldr	r2, [r3, #0]
 800c4ca:	88fb      	ldrh	r3, [r7, #6]
 800c4cc:	f7fa fc1e 	bl	8006d0c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800c4d0:	2300      	movs	r3, #0
 800c4d2:	613b      	str	r3, [r7, #16]
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	613b      	str	r3, [r7, #16]
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	685b      	ldr	r3, [r3, #4]
 800c4e2:	613b      	str	r3, [r7, #16]
 800c4e4:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	2200      	movs	r2, #0
 800c4ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	691b      	ldr	r3, [r3, #16]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d019      	beq.n	800c52a <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	330c      	adds	r3, #12
 800c4fc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c500:	e853 3f00 	ldrex	r3, [r3]
 800c504:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c506:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c508:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c50c:	65bb      	str	r3, [r7, #88]	; 0x58
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	330c      	adds	r3, #12
 800c514:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c516:	64fa      	str	r2, [r7, #76]	; 0x4c
 800c518:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c51a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800c51c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c51e:	e841 2300 	strex	r3, r2, [r1]
 800c522:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800c524:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c526:	2b00      	cmp	r3, #0
 800c528:	d1e5      	bne.n	800c4f6 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	3314      	adds	r3, #20
 800c530:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c534:	e853 3f00 	ldrex	r3, [r3]
 800c538:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c53a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c53c:	f043 0301 	orr.w	r3, r3, #1
 800c540:	657b      	str	r3, [r7, #84]	; 0x54
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	3314      	adds	r3, #20
 800c548:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c54a:	63ba      	str	r2, [r7, #56]	; 0x38
 800c54c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c54e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c550:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c552:	e841 2300 	strex	r3, r2, [r1]
 800c556:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d1e5      	bne.n	800c52a <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	3314      	adds	r3, #20
 800c564:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c566:	69bb      	ldr	r3, [r7, #24]
 800c568:	e853 3f00 	ldrex	r3, [r3]
 800c56c:	617b      	str	r3, [r7, #20]
   return(result);
 800c56e:	697b      	ldr	r3, [r7, #20]
 800c570:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c574:	653b      	str	r3, [r7, #80]	; 0x50
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	3314      	adds	r3, #20
 800c57c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c57e:	627a      	str	r2, [r7, #36]	; 0x24
 800c580:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c582:	6a39      	ldr	r1, [r7, #32]
 800c584:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c586:	e841 2300 	strex	r3, r2, [r1]
 800c58a:	61fb      	str	r3, [r7, #28]
   return(result);
 800c58c:	69fb      	ldr	r3, [r7, #28]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d1e5      	bne.n	800c55e <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800c592:	2300      	movs	r3, #0
}
 800c594:	4618      	mov	r0, r3
 800c596:	3760      	adds	r7, #96	; 0x60
 800c598:	46bd      	mov	sp, r7
 800c59a:	bd80      	pop	{r7, pc}
 800c59c:	0800c1a1 	.word	0x0800c1a1
 800c5a0:	0800c2c7 	.word	0x0800c2c7
 800c5a4:	0800c2fd 	.word	0x0800c2fd

0800c5a8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c5a8:	b480      	push	{r7}
 800c5aa:	b089      	sub	sp, #36	; 0x24
 800c5ac:	af00      	add	r7, sp, #0
 800c5ae:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	330c      	adds	r3, #12
 800c5b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	e853 3f00 	ldrex	r3, [r3]
 800c5be:	60bb      	str	r3, [r7, #8]
   return(result);
 800c5c0:	68bb      	ldr	r3, [r7, #8]
 800c5c2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800c5c6:	61fb      	str	r3, [r7, #28]
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	330c      	adds	r3, #12
 800c5ce:	69fa      	ldr	r2, [r7, #28]
 800c5d0:	61ba      	str	r2, [r7, #24]
 800c5d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5d4:	6979      	ldr	r1, [r7, #20]
 800c5d6:	69ba      	ldr	r2, [r7, #24]
 800c5d8:	e841 2300 	strex	r3, r2, [r1]
 800c5dc:	613b      	str	r3, [r7, #16]
   return(result);
 800c5de:	693b      	ldr	r3, [r7, #16]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d1e5      	bne.n	800c5b0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	2220      	movs	r2, #32
 800c5e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800c5ec:	bf00      	nop
 800c5ee:	3724      	adds	r7, #36	; 0x24
 800c5f0:	46bd      	mov	sp, r7
 800c5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f6:	4770      	bx	lr

0800c5f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c5f8:	b480      	push	{r7}
 800c5fa:	b095      	sub	sp, #84	; 0x54
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	330c      	adds	r3, #12
 800c606:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c608:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c60a:	e853 3f00 	ldrex	r3, [r3]
 800c60e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c612:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c616:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	330c      	adds	r3, #12
 800c61e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c620:	643a      	str	r2, [r7, #64]	; 0x40
 800c622:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c624:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c626:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c628:	e841 2300 	strex	r3, r2, [r1]
 800c62c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c62e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c630:	2b00      	cmp	r3, #0
 800c632:	d1e5      	bne.n	800c600 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	3314      	adds	r3, #20
 800c63a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c63c:	6a3b      	ldr	r3, [r7, #32]
 800c63e:	e853 3f00 	ldrex	r3, [r3]
 800c642:	61fb      	str	r3, [r7, #28]
   return(result);
 800c644:	69fb      	ldr	r3, [r7, #28]
 800c646:	f023 0301 	bic.w	r3, r3, #1
 800c64a:	64bb      	str	r3, [r7, #72]	; 0x48
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	3314      	adds	r3, #20
 800c652:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c654:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c656:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c658:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c65a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c65c:	e841 2300 	strex	r3, r2, [r1]
 800c660:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c664:	2b00      	cmp	r3, #0
 800c666:	d1e5      	bne.n	800c634 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c66c:	2b01      	cmp	r3, #1
 800c66e:	d119      	bne.n	800c6a4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	330c      	adds	r3, #12
 800c676:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	e853 3f00 	ldrex	r3, [r3]
 800c67e:	60bb      	str	r3, [r7, #8]
   return(result);
 800c680:	68bb      	ldr	r3, [r7, #8]
 800c682:	f023 0310 	bic.w	r3, r3, #16
 800c686:	647b      	str	r3, [r7, #68]	; 0x44
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	330c      	adds	r3, #12
 800c68e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c690:	61ba      	str	r2, [r7, #24]
 800c692:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c694:	6979      	ldr	r1, [r7, #20]
 800c696:	69ba      	ldr	r2, [r7, #24]
 800c698:	e841 2300 	strex	r3, r2, [r1]
 800c69c:	613b      	str	r3, [r7, #16]
   return(result);
 800c69e:	693b      	ldr	r3, [r7, #16]
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d1e5      	bne.n	800c670 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	2220      	movs	r2, #32
 800c6a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	2200      	movs	r2, #0
 800c6b0:	631a      	str	r2, [r3, #48]	; 0x30
}
 800c6b2:	bf00      	nop
 800c6b4:	3754      	adds	r7, #84	; 0x54
 800c6b6:	46bd      	mov	sp, r7
 800c6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6bc:	4770      	bx	lr

0800c6be <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c6be:	b580      	push	{r7, lr}
 800c6c0:	b084      	sub	sp, #16
 800c6c2:	af00      	add	r7, sp, #0
 800c6c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6ca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	2200      	movs	r2, #0
 800c6d0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	2200      	movs	r2, #0
 800c6d6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c6d8:	68f8      	ldr	r0, [r7, #12]
 800c6da:	f7ff fd4b 	bl	800c174 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c6de:	bf00      	nop
 800c6e0:	3710      	adds	r7, #16
 800c6e2:	46bd      	mov	sp, r7
 800c6e4:	bd80      	pop	{r7, pc}

0800c6e6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c6e6:	b480      	push	{r7}
 800c6e8:	b085      	sub	sp, #20
 800c6ea:	af00      	add	r7, sp, #0
 800c6ec:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c6f4:	b2db      	uxtb	r3, r3
 800c6f6:	2b21      	cmp	r3, #33	; 0x21
 800c6f8:	d13e      	bne.n	800c778 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	689b      	ldr	r3, [r3, #8]
 800c6fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c702:	d114      	bne.n	800c72e <UART_Transmit_IT+0x48>
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	691b      	ldr	r3, [r3, #16]
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d110      	bne.n	800c72e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	6a1b      	ldr	r3, [r3, #32]
 800c710:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	881b      	ldrh	r3, [r3, #0]
 800c716:	461a      	mov	r2, r3
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c720:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	6a1b      	ldr	r3, [r3, #32]
 800c726:	1c9a      	adds	r2, r3, #2
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	621a      	str	r2, [r3, #32]
 800c72c:	e008      	b.n	800c740 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	6a1b      	ldr	r3, [r3, #32]
 800c732:	1c59      	adds	r1, r3, #1
 800c734:	687a      	ldr	r2, [r7, #4]
 800c736:	6211      	str	r1, [r2, #32]
 800c738:	781a      	ldrb	r2, [r3, #0]
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c744:	b29b      	uxth	r3, r3
 800c746:	3b01      	subs	r3, #1
 800c748:	b29b      	uxth	r3, r3
 800c74a:	687a      	ldr	r2, [r7, #4]
 800c74c:	4619      	mov	r1, r3
 800c74e:	84d1      	strh	r1, [r2, #38]	; 0x26
 800c750:	2b00      	cmp	r3, #0
 800c752:	d10f      	bne.n	800c774 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	68da      	ldr	r2, [r3, #12]
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c762:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	68da      	ldr	r2, [r3, #12]
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c772:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c774:	2300      	movs	r3, #0
 800c776:	e000      	b.n	800c77a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c778:	2302      	movs	r3, #2
  }
}
 800c77a:	4618      	mov	r0, r3
 800c77c:	3714      	adds	r7, #20
 800c77e:	46bd      	mov	sp, r7
 800c780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c784:	4770      	bx	lr

0800c786 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c786:	b580      	push	{r7, lr}
 800c788:	b082      	sub	sp, #8
 800c78a:	af00      	add	r7, sp, #0
 800c78c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	68da      	ldr	r2, [r3, #12]
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c79c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	2220      	movs	r2, #32
 800c7a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c7a6:	6878      	ldr	r0, [r7, #4]
 800c7a8:	f7ff fcd0 	bl	800c14c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c7ac:	2300      	movs	r3, #0
}
 800c7ae:	4618      	mov	r0, r3
 800c7b0:	3708      	adds	r7, #8
 800c7b2:	46bd      	mov	sp, r7
 800c7b4:	bd80      	pop	{r7, pc}

0800c7b6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c7b6:	b580      	push	{r7, lr}
 800c7b8:	b08c      	sub	sp, #48	; 0x30
 800c7ba:	af00      	add	r7, sp, #0
 800c7bc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c7c4:	b2db      	uxtb	r3, r3
 800c7c6:	2b22      	cmp	r3, #34	; 0x22
 800c7c8:	f040 80ab 	bne.w	800c922 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	689b      	ldr	r3, [r3, #8]
 800c7d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c7d4:	d117      	bne.n	800c806 <UART_Receive_IT+0x50>
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	691b      	ldr	r3, [r3, #16]
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d113      	bne.n	800c806 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c7de:	2300      	movs	r3, #0
 800c7e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7e6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	685b      	ldr	r3, [r3, #4]
 800c7ee:	b29b      	uxth	r3, r3
 800c7f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7f4:	b29a      	uxth	r2, r3
 800c7f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7f8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7fe:	1c9a      	adds	r2, r3, #2
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	629a      	str	r2, [r3, #40]	; 0x28
 800c804:	e026      	b.n	800c854 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c80a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800c80c:	2300      	movs	r3, #0
 800c80e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	689b      	ldr	r3, [r3, #8]
 800c814:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c818:	d007      	beq.n	800c82a <UART_Receive_IT+0x74>
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	689b      	ldr	r3, [r3, #8]
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d10a      	bne.n	800c838 <UART_Receive_IT+0x82>
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	691b      	ldr	r3, [r3, #16]
 800c826:	2b00      	cmp	r3, #0
 800c828:	d106      	bne.n	800c838 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	685b      	ldr	r3, [r3, #4]
 800c830:	b2da      	uxtb	r2, r3
 800c832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c834:	701a      	strb	r2, [r3, #0]
 800c836:	e008      	b.n	800c84a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	685b      	ldr	r3, [r3, #4]
 800c83e:	b2db      	uxtb	r3, r3
 800c840:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c844:	b2da      	uxtb	r2, r3
 800c846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c848:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c84e:	1c5a      	adds	r2, r3, #1
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c858:	b29b      	uxth	r3, r3
 800c85a:	3b01      	subs	r3, #1
 800c85c:	b29b      	uxth	r3, r3
 800c85e:	687a      	ldr	r2, [r7, #4]
 800c860:	4619      	mov	r1, r3
 800c862:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c864:	2b00      	cmp	r3, #0
 800c866:	d15a      	bne.n	800c91e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	68da      	ldr	r2, [r3, #12]
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	f022 0220 	bic.w	r2, r2, #32
 800c876:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	68da      	ldr	r2, [r3, #12]
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c886:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	695a      	ldr	r2, [r3, #20]
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	f022 0201 	bic.w	r2, r2, #1
 800c896:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	2220      	movs	r2, #32
 800c89c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8a4:	2b01      	cmp	r3, #1
 800c8a6:	d135      	bne.n	800c914 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	2200      	movs	r2, #0
 800c8ac:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	330c      	adds	r3, #12
 800c8b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8b6:	697b      	ldr	r3, [r7, #20]
 800c8b8:	e853 3f00 	ldrex	r3, [r3]
 800c8bc:	613b      	str	r3, [r7, #16]
   return(result);
 800c8be:	693b      	ldr	r3, [r7, #16]
 800c8c0:	f023 0310 	bic.w	r3, r3, #16
 800c8c4:	627b      	str	r3, [r7, #36]	; 0x24
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	330c      	adds	r3, #12
 800c8cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c8ce:	623a      	str	r2, [r7, #32]
 800c8d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8d2:	69f9      	ldr	r1, [r7, #28]
 800c8d4:	6a3a      	ldr	r2, [r7, #32]
 800c8d6:	e841 2300 	strex	r3, r2, [r1]
 800c8da:	61bb      	str	r3, [r7, #24]
   return(result);
 800c8dc:	69bb      	ldr	r3, [r7, #24]
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d1e5      	bne.n	800c8ae <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	f003 0310 	and.w	r3, r3, #16
 800c8ec:	2b10      	cmp	r3, #16
 800c8ee:	d10a      	bne.n	800c906 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c8f0:	2300      	movs	r3, #0
 800c8f2:	60fb      	str	r3, [r7, #12]
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	60fb      	str	r3, [r7, #12]
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	685b      	ldr	r3, [r3, #4]
 800c902:	60fb      	str	r3, [r7, #12]
 800c904:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c90a:	4619      	mov	r1, r3
 800c90c:	6878      	ldr	r0, [r7, #4]
 800c90e:	f7ff fc3b 	bl	800c188 <HAL_UARTEx_RxEventCallback>
 800c912:	e002      	b.n	800c91a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c914:	6878      	ldr	r0, [r7, #4]
 800c916:	f7f8 fb95 	bl	8005044 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c91a:	2300      	movs	r3, #0
 800c91c:	e002      	b.n	800c924 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800c91e:	2300      	movs	r3, #0
 800c920:	e000      	b.n	800c924 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800c922:	2302      	movs	r3, #2
  }
}
 800c924:	4618      	mov	r0, r3
 800c926:	3730      	adds	r7, #48	; 0x30
 800c928:	46bd      	mov	sp, r7
 800c92a:	bd80      	pop	{r7, pc}

0800c92c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c92c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c930:	b0c0      	sub	sp, #256	; 0x100
 800c932:	af00      	add	r7, sp, #0
 800c934:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	691b      	ldr	r3, [r3, #16]
 800c940:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800c944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c948:	68d9      	ldr	r1, [r3, #12]
 800c94a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c94e:	681a      	ldr	r2, [r3, #0]
 800c950:	ea40 0301 	orr.w	r3, r0, r1
 800c954:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c956:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c95a:	689a      	ldr	r2, [r3, #8]
 800c95c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c960:	691b      	ldr	r3, [r3, #16]
 800c962:	431a      	orrs	r2, r3
 800c964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c968:	695b      	ldr	r3, [r3, #20]
 800c96a:	431a      	orrs	r2, r3
 800c96c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c970:	69db      	ldr	r3, [r3, #28]
 800c972:	4313      	orrs	r3, r2
 800c974:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800c978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	68db      	ldr	r3, [r3, #12]
 800c980:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800c984:	f021 010c 	bic.w	r1, r1, #12
 800c988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c98c:	681a      	ldr	r2, [r3, #0]
 800c98e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c992:	430b      	orrs	r3, r1
 800c994:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c996:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	695b      	ldr	r3, [r3, #20]
 800c99e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800c9a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c9a6:	6999      	ldr	r1, [r3, #24]
 800c9a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c9ac:	681a      	ldr	r2, [r3, #0]
 800c9ae:	ea40 0301 	orr.w	r3, r0, r1
 800c9b2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c9b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c9b8:	681a      	ldr	r2, [r3, #0]
 800c9ba:	4b8f      	ldr	r3, [pc, #572]	; (800cbf8 <UART_SetConfig+0x2cc>)
 800c9bc:	429a      	cmp	r2, r3
 800c9be:	d005      	beq.n	800c9cc <UART_SetConfig+0xa0>
 800c9c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c9c4:	681a      	ldr	r2, [r3, #0]
 800c9c6:	4b8d      	ldr	r3, [pc, #564]	; (800cbfc <UART_SetConfig+0x2d0>)
 800c9c8:	429a      	cmp	r2, r3
 800c9ca:	d104      	bne.n	800c9d6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c9cc:	f7fe f806 	bl	800a9dc <HAL_RCC_GetPCLK2Freq>
 800c9d0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800c9d4:	e003      	b.n	800c9de <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c9d6:	f7fd ffed 	bl	800a9b4 <HAL_RCC_GetPCLK1Freq>
 800c9da:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c9de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c9e2:	69db      	ldr	r3, [r3, #28]
 800c9e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c9e8:	f040 810c 	bne.w	800cc04 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c9ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c9f0:	2200      	movs	r2, #0
 800c9f2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c9f6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800c9fa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800c9fe:	4622      	mov	r2, r4
 800ca00:	462b      	mov	r3, r5
 800ca02:	1891      	adds	r1, r2, r2
 800ca04:	65b9      	str	r1, [r7, #88]	; 0x58
 800ca06:	415b      	adcs	r3, r3
 800ca08:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ca0a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800ca0e:	4621      	mov	r1, r4
 800ca10:	eb12 0801 	adds.w	r8, r2, r1
 800ca14:	4629      	mov	r1, r5
 800ca16:	eb43 0901 	adc.w	r9, r3, r1
 800ca1a:	f04f 0200 	mov.w	r2, #0
 800ca1e:	f04f 0300 	mov.w	r3, #0
 800ca22:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ca26:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ca2a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ca2e:	4690      	mov	r8, r2
 800ca30:	4699      	mov	r9, r3
 800ca32:	4623      	mov	r3, r4
 800ca34:	eb18 0303 	adds.w	r3, r8, r3
 800ca38:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ca3c:	462b      	mov	r3, r5
 800ca3e:	eb49 0303 	adc.w	r3, r9, r3
 800ca42:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ca46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca4a:	685b      	ldr	r3, [r3, #4]
 800ca4c:	2200      	movs	r2, #0
 800ca4e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ca52:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800ca56:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800ca5a:	460b      	mov	r3, r1
 800ca5c:	18db      	adds	r3, r3, r3
 800ca5e:	653b      	str	r3, [r7, #80]	; 0x50
 800ca60:	4613      	mov	r3, r2
 800ca62:	eb42 0303 	adc.w	r3, r2, r3
 800ca66:	657b      	str	r3, [r7, #84]	; 0x54
 800ca68:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800ca6c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800ca70:	f7f4 f912 	bl	8000c98 <__aeabi_uldivmod>
 800ca74:	4602      	mov	r2, r0
 800ca76:	460b      	mov	r3, r1
 800ca78:	4b61      	ldr	r3, [pc, #388]	; (800cc00 <UART_SetConfig+0x2d4>)
 800ca7a:	fba3 2302 	umull	r2, r3, r3, r2
 800ca7e:	095b      	lsrs	r3, r3, #5
 800ca80:	011c      	lsls	r4, r3, #4
 800ca82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ca86:	2200      	movs	r2, #0
 800ca88:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ca8c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800ca90:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800ca94:	4642      	mov	r2, r8
 800ca96:	464b      	mov	r3, r9
 800ca98:	1891      	adds	r1, r2, r2
 800ca9a:	64b9      	str	r1, [r7, #72]	; 0x48
 800ca9c:	415b      	adcs	r3, r3
 800ca9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800caa0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800caa4:	4641      	mov	r1, r8
 800caa6:	eb12 0a01 	adds.w	sl, r2, r1
 800caaa:	4649      	mov	r1, r9
 800caac:	eb43 0b01 	adc.w	fp, r3, r1
 800cab0:	f04f 0200 	mov.w	r2, #0
 800cab4:	f04f 0300 	mov.w	r3, #0
 800cab8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800cabc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800cac0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800cac4:	4692      	mov	sl, r2
 800cac6:	469b      	mov	fp, r3
 800cac8:	4643      	mov	r3, r8
 800caca:	eb1a 0303 	adds.w	r3, sl, r3
 800cace:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800cad2:	464b      	mov	r3, r9
 800cad4:	eb4b 0303 	adc.w	r3, fp, r3
 800cad8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800cadc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cae0:	685b      	ldr	r3, [r3, #4]
 800cae2:	2200      	movs	r2, #0
 800cae4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800cae8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800caec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800caf0:	460b      	mov	r3, r1
 800caf2:	18db      	adds	r3, r3, r3
 800caf4:	643b      	str	r3, [r7, #64]	; 0x40
 800caf6:	4613      	mov	r3, r2
 800caf8:	eb42 0303 	adc.w	r3, r2, r3
 800cafc:	647b      	str	r3, [r7, #68]	; 0x44
 800cafe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800cb02:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800cb06:	f7f4 f8c7 	bl	8000c98 <__aeabi_uldivmod>
 800cb0a:	4602      	mov	r2, r0
 800cb0c:	460b      	mov	r3, r1
 800cb0e:	4611      	mov	r1, r2
 800cb10:	4b3b      	ldr	r3, [pc, #236]	; (800cc00 <UART_SetConfig+0x2d4>)
 800cb12:	fba3 2301 	umull	r2, r3, r3, r1
 800cb16:	095b      	lsrs	r3, r3, #5
 800cb18:	2264      	movs	r2, #100	; 0x64
 800cb1a:	fb02 f303 	mul.w	r3, r2, r3
 800cb1e:	1acb      	subs	r3, r1, r3
 800cb20:	00db      	lsls	r3, r3, #3
 800cb22:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800cb26:	4b36      	ldr	r3, [pc, #216]	; (800cc00 <UART_SetConfig+0x2d4>)
 800cb28:	fba3 2302 	umull	r2, r3, r3, r2
 800cb2c:	095b      	lsrs	r3, r3, #5
 800cb2e:	005b      	lsls	r3, r3, #1
 800cb30:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800cb34:	441c      	add	r4, r3
 800cb36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cb3a:	2200      	movs	r2, #0
 800cb3c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800cb40:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800cb44:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800cb48:	4642      	mov	r2, r8
 800cb4a:	464b      	mov	r3, r9
 800cb4c:	1891      	adds	r1, r2, r2
 800cb4e:	63b9      	str	r1, [r7, #56]	; 0x38
 800cb50:	415b      	adcs	r3, r3
 800cb52:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cb54:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800cb58:	4641      	mov	r1, r8
 800cb5a:	1851      	adds	r1, r2, r1
 800cb5c:	6339      	str	r1, [r7, #48]	; 0x30
 800cb5e:	4649      	mov	r1, r9
 800cb60:	414b      	adcs	r3, r1
 800cb62:	637b      	str	r3, [r7, #52]	; 0x34
 800cb64:	f04f 0200 	mov.w	r2, #0
 800cb68:	f04f 0300 	mov.w	r3, #0
 800cb6c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800cb70:	4659      	mov	r1, fp
 800cb72:	00cb      	lsls	r3, r1, #3
 800cb74:	4651      	mov	r1, sl
 800cb76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cb7a:	4651      	mov	r1, sl
 800cb7c:	00ca      	lsls	r2, r1, #3
 800cb7e:	4610      	mov	r0, r2
 800cb80:	4619      	mov	r1, r3
 800cb82:	4603      	mov	r3, r0
 800cb84:	4642      	mov	r2, r8
 800cb86:	189b      	adds	r3, r3, r2
 800cb88:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800cb8c:	464b      	mov	r3, r9
 800cb8e:	460a      	mov	r2, r1
 800cb90:	eb42 0303 	adc.w	r3, r2, r3
 800cb94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800cb98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cb9c:	685b      	ldr	r3, [r3, #4]
 800cb9e:	2200      	movs	r2, #0
 800cba0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800cba4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800cba8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800cbac:	460b      	mov	r3, r1
 800cbae:	18db      	adds	r3, r3, r3
 800cbb0:	62bb      	str	r3, [r7, #40]	; 0x28
 800cbb2:	4613      	mov	r3, r2
 800cbb4:	eb42 0303 	adc.w	r3, r2, r3
 800cbb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cbba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800cbbe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800cbc2:	f7f4 f869 	bl	8000c98 <__aeabi_uldivmod>
 800cbc6:	4602      	mov	r2, r0
 800cbc8:	460b      	mov	r3, r1
 800cbca:	4b0d      	ldr	r3, [pc, #52]	; (800cc00 <UART_SetConfig+0x2d4>)
 800cbcc:	fba3 1302 	umull	r1, r3, r3, r2
 800cbd0:	095b      	lsrs	r3, r3, #5
 800cbd2:	2164      	movs	r1, #100	; 0x64
 800cbd4:	fb01 f303 	mul.w	r3, r1, r3
 800cbd8:	1ad3      	subs	r3, r2, r3
 800cbda:	00db      	lsls	r3, r3, #3
 800cbdc:	3332      	adds	r3, #50	; 0x32
 800cbde:	4a08      	ldr	r2, [pc, #32]	; (800cc00 <UART_SetConfig+0x2d4>)
 800cbe0:	fba2 2303 	umull	r2, r3, r2, r3
 800cbe4:	095b      	lsrs	r3, r3, #5
 800cbe6:	f003 0207 	and.w	r2, r3, #7
 800cbea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	4422      	add	r2, r4
 800cbf2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800cbf4:	e105      	b.n	800ce02 <UART_SetConfig+0x4d6>
 800cbf6:	bf00      	nop
 800cbf8:	40011000 	.word	0x40011000
 800cbfc:	40011400 	.word	0x40011400
 800cc00:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800cc04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cc08:	2200      	movs	r2, #0
 800cc0a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800cc0e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800cc12:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800cc16:	4642      	mov	r2, r8
 800cc18:	464b      	mov	r3, r9
 800cc1a:	1891      	adds	r1, r2, r2
 800cc1c:	6239      	str	r1, [r7, #32]
 800cc1e:	415b      	adcs	r3, r3
 800cc20:	627b      	str	r3, [r7, #36]	; 0x24
 800cc22:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800cc26:	4641      	mov	r1, r8
 800cc28:	1854      	adds	r4, r2, r1
 800cc2a:	4649      	mov	r1, r9
 800cc2c:	eb43 0501 	adc.w	r5, r3, r1
 800cc30:	f04f 0200 	mov.w	r2, #0
 800cc34:	f04f 0300 	mov.w	r3, #0
 800cc38:	00eb      	lsls	r3, r5, #3
 800cc3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800cc3e:	00e2      	lsls	r2, r4, #3
 800cc40:	4614      	mov	r4, r2
 800cc42:	461d      	mov	r5, r3
 800cc44:	4643      	mov	r3, r8
 800cc46:	18e3      	adds	r3, r4, r3
 800cc48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800cc4c:	464b      	mov	r3, r9
 800cc4e:	eb45 0303 	adc.w	r3, r5, r3
 800cc52:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800cc56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cc5a:	685b      	ldr	r3, [r3, #4]
 800cc5c:	2200      	movs	r2, #0
 800cc5e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800cc62:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800cc66:	f04f 0200 	mov.w	r2, #0
 800cc6a:	f04f 0300 	mov.w	r3, #0
 800cc6e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800cc72:	4629      	mov	r1, r5
 800cc74:	008b      	lsls	r3, r1, #2
 800cc76:	4621      	mov	r1, r4
 800cc78:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800cc7c:	4621      	mov	r1, r4
 800cc7e:	008a      	lsls	r2, r1, #2
 800cc80:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800cc84:	f7f4 f808 	bl	8000c98 <__aeabi_uldivmod>
 800cc88:	4602      	mov	r2, r0
 800cc8a:	460b      	mov	r3, r1
 800cc8c:	4b60      	ldr	r3, [pc, #384]	; (800ce10 <UART_SetConfig+0x4e4>)
 800cc8e:	fba3 2302 	umull	r2, r3, r3, r2
 800cc92:	095b      	lsrs	r3, r3, #5
 800cc94:	011c      	lsls	r4, r3, #4
 800cc96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cc9a:	2200      	movs	r2, #0
 800cc9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800cca0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800cca4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800cca8:	4642      	mov	r2, r8
 800ccaa:	464b      	mov	r3, r9
 800ccac:	1891      	adds	r1, r2, r2
 800ccae:	61b9      	str	r1, [r7, #24]
 800ccb0:	415b      	adcs	r3, r3
 800ccb2:	61fb      	str	r3, [r7, #28]
 800ccb4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ccb8:	4641      	mov	r1, r8
 800ccba:	1851      	adds	r1, r2, r1
 800ccbc:	6139      	str	r1, [r7, #16]
 800ccbe:	4649      	mov	r1, r9
 800ccc0:	414b      	adcs	r3, r1
 800ccc2:	617b      	str	r3, [r7, #20]
 800ccc4:	f04f 0200 	mov.w	r2, #0
 800ccc8:	f04f 0300 	mov.w	r3, #0
 800cccc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800ccd0:	4659      	mov	r1, fp
 800ccd2:	00cb      	lsls	r3, r1, #3
 800ccd4:	4651      	mov	r1, sl
 800ccd6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ccda:	4651      	mov	r1, sl
 800ccdc:	00ca      	lsls	r2, r1, #3
 800ccde:	4610      	mov	r0, r2
 800cce0:	4619      	mov	r1, r3
 800cce2:	4603      	mov	r3, r0
 800cce4:	4642      	mov	r2, r8
 800cce6:	189b      	adds	r3, r3, r2
 800cce8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ccec:	464b      	mov	r3, r9
 800ccee:	460a      	mov	r2, r1
 800ccf0:	eb42 0303 	adc.w	r3, r2, r3
 800ccf4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ccf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ccfc:	685b      	ldr	r3, [r3, #4]
 800ccfe:	2200      	movs	r2, #0
 800cd00:	67bb      	str	r3, [r7, #120]	; 0x78
 800cd02:	67fa      	str	r2, [r7, #124]	; 0x7c
 800cd04:	f04f 0200 	mov.w	r2, #0
 800cd08:	f04f 0300 	mov.w	r3, #0
 800cd0c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800cd10:	4649      	mov	r1, r9
 800cd12:	008b      	lsls	r3, r1, #2
 800cd14:	4641      	mov	r1, r8
 800cd16:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800cd1a:	4641      	mov	r1, r8
 800cd1c:	008a      	lsls	r2, r1, #2
 800cd1e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800cd22:	f7f3 ffb9 	bl	8000c98 <__aeabi_uldivmod>
 800cd26:	4602      	mov	r2, r0
 800cd28:	460b      	mov	r3, r1
 800cd2a:	4b39      	ldr	r3, [pc, #228]	; (800ce10 <UART_SetConfig+0x4e4>)
 800cd2c:	fba3 1302 	umull	r1, r3, r3, r2
 800cd30:	095b      	lsrs	r3, r3, #5
 800cd32:	2164      	movs	r1, #100	; 0x64
 800cd34:	fb01 f303 	mul.w	r3, r1, r3
 800cd38:	1ad3      	subs	r3, r2, r3
 800cd3a:	011b      	lsls	r3, r3, #4
 800cd3c:	3332      	adds	r3, #50	; 0x32
 800cd3e:	4a34      	ldr	r2, [pc, #208]	; (800ce10 <UART_SetConfig+0x4e4>)
 800cd40:	fba2 2303 	umull	r2, r3, r2, r3
 800cd44:	095b      	lsrs	r3, r3, #5
 800cd46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cd4a:	441c      	add	r4, r3
 800cd4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cd50:	2200      	movs	r2, #0
 800cd52:	673b      	str	r3, [r7, #112]	; 0x70
 800cd54:	677a      	str	r2, [r7, #116]	; 0x74
 800cd56:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800cd5a:	4642      	mov	r2, r8
 800cd5c:	464b      	mov	r3, r9
 800cd5e:	1891      	adds	r1, r2, r2
 800cd60:	60b9      	str	r1, [r7, #8]
 800cd62:	415b      	adcs	r3, r3
 800cd64:	60fb      	str	r3, [r7, #12]
 800cd66:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800cd6a:	4641      	mov	r1, r8
 800cd6c:	1851      	adds	r1, r2, r1
 800cd6e:	6039      	str	r1, [r7, #0]
 800cd70:	4649      	mov	r1, r9
 800cd72:	414b      	adcs	r3, r1
 800cd74:	607b      	str	r3, [r7, #4]
 800cd76:	f04f 0200 	mov.w	r2, #0
 800cd7a:	f04f 0300 	mov.w	r3, #0
 800cd7e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800cd82:	4659      	mov	r1, fp
 800cd84:	00cb      	lsls	r3, r1, #3
 800cd86:	4651      	mov	r1, sl
 800cd88:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cd8c:	4651      	mov	r1, sl
 800cd8e:	00ca      	lsls	r2, r1, #3
 800cd90:	4610      	mov	r0, r2
 800cd92:	4619      	mov	r1, r3
 800cd94:	4603      	mov	r3, r0
 800cd96:	4642      	mov	r2, r8
 800cd98:	189b      	adds	r3, r3, r2
 800cd9a:	66bb      	str	r3, [r7, #104]	; 0x68
 800cd9c:	464b      	mov	r3, r9
 800cd9e:	460a      	mov	r2, r1
 800cda0:	eb42 0303 	adc.w	r3, r2, r3
 800cda4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800cda6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cdaa:	685b      	ldr	r3, [r3, #4]
 800cdac:	2200      	movs	r2, #0
 800cdae:	663b      	str	r3, [r7, #96]	; 0x60
 800cdb0:	667a      	str	r2, [r7, #100]	; 0x64
 800cdb2:	f04f 0200 	mov.w	r2, #0
 800cdb6:	f04f 0300 	mov.w	r3, #0
 800cdba:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800cdbe:	4649      	mov	r1, r9
 800cdc0:	008b      	lsls	r3, r1, #2
 800cdc2:	4641      	mov	r1, r8
 800cdc4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800cdc8:	4641      	mov	r1, r8
 800cdca:	008a      	lsls	r2, r1, #2
 800cdcc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800cdd0:	f7f3 ff62 	bl	8000c98 <__aeabi_uldivmod>
 800cdd4:	4602      	mov	r2, r0
 800cdd6:	460b      	mov	r3, r1
 800cdd8:	4b0d      	ldr	r3, [pc, #52]	; (800ce10 <UART_SetConfig+0x4e4>)
 800cdda:	fba3 1302 	umull	r1, r3, r3, r2
 800cdde:	095b      	lsrs	r3, r3, #5
 800cde0:	2164      	movs	r1, #100	; 0x64
 800cde2:	fb01 f303 	mul.w	r3, r1, r3
 800cde6:	1ad3      	subs	r3, r2, r3
 800cde8:	011b      	lsls	r3, r3, #4
 800cdea:	3332      	adds	r3, #50	; 0x32
 800cdec:	4a08      	ldr	r2, [pc, #32]	; (800ce10 <UART_SetConfig+0x4e4>)
 800cdee:	fba2 2303 	umull	r2, r3, r2, r3
 800cdf2:	095b      	lsrs	r3, r3, #5
 800cdf4:	f003 020f 	and.w	r2, r3, #15
 800cdf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	4422      	add	r2, r4
 800ce00:	609a      	str	r2, [r3, #8]
}
 800ce02:	bf00      	nop
 800ce04:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800ce08:	46bd      	mov	sp, r7
 800ce0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ce0e:	bf00      	nop
 800ce10:	51eb851f 	.word	0x51eb851f

0800ce14 <__errno>:
 800ce14:	4b01      	ldr	r3, [pc, #4]	; (800ce1c <__errno+0x8>)
 800ce16:	6818      	ldr	r0, [r3, #0]
 800ce18:	4770      	bx	lr
 800ce1a:	bf00      	nop
 800ce1c:	20000250 	.word	0x20000250

0800ce20 <__libc_init_array>:
 800ce20:	b570      	push	{r4, r5, r6, lr}
 800ce22:	4d0d      	ldr	r5, [pc, #52]	; (800ce58 <__libc_init_array+0x38>)
 800ce24:	4c0d      	ldr	r4, [pc, #52]	; (800ce5c <__libc_init_array+0x3c>)
 800ce26:	1b64      	subs	r4, r4, r5
 800ce28:	10a4      	asrs	r4, r4, #2
 800ce2a:	2600      	movs	r6, #0
 800ce2c:	42a6      	cmp	r6, r4
 800ce2e:	d109      	bne.n	800ce44 <__libc_init_array+0x24>
 800ce30:	4d0b      	ldr	r5, [pc, #44]	; (800ce60 <__libc_init_array+0x40>)
 800ce32:	4c0c      	ldr	r4, [pc, #48]	; (800ce64 <__libc_init_array+0x44>)
 800ce34:	f002 ff88 	bl	800fd48 <_init>
 800ce38:	1b64      	subs	r4, r4, r5
 800ce3a:	10a4      	asrs	r4, r4, #2
 800ce3c:	2600      	movs	r6, #0
 800ce3e:	42a6      	cmp	r6, r4
 800ce40:	d105      	bne.n	800ce4e <__libc_init_array+0x2e>
 800ce42:	bd70      	pop	{r4, r5, r6, pc}
 800ce44:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce48:	4798      	blx	r3
 800ce4a:	3601      	adds	r6, #1
 800ce4c:	e7ee      	b.n	800ce2c <__libc_init_array+0xc>
 800ce4e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce52:	4798      	blx	r3
 800ce54:	3601      	adds	r6, #1
 800ce56:	e7f2      	b.n	800ce3e <__libc_init_array+0x1e>
 800ce58:	0803d60c 	.word	0x0803d60c
 800ce5c:	0803d60c 	.word	0x0803d60c
 800ce60:	0803d60c 	.word	0x0803d60c
 800ce64:	0803d610 	.word	0x0803d610

0800ce68 <memset>:
 800ce68:	4402      	add	r2, r0
 800ce6a:	4603      	mov	r3, r0
 800ce6c:	4293      	cmp	r3, r2
 800ce6e:	d100      	bne.n	800ce72 <memset+0xa>
 800ce70:	4770      	bx	lr
 800ce72:	f803 1b01 	strb.w	r1, [r3], #1
 800ce76:	e7f9      	b.n	800ce6c <memset+0x4>

0800ce78 <__cvt>:
 800ce78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ce7c:	ec55 4b10 	vmov	r4, r5, d0
 800ce80:	2d00      	cmp	r5, #0
 800ce82:	460e      	mov	r6, r1
 800ce84:	4619      	mov	r1, r3
 800ce86:	462b      	mov	r3, r5
 800ce88:	bfbb      	ittet	lt
 800ce8a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ce8e:	461d      	movlt	r5, r3
 800ce90:	2300      	movge	r3, #0
 800ce92:	232d      	movlt	r3, #45	; 0x2d
 800ce94:	700b      	strb	r3, [r1, #0]
 800ce96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ce98:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ce9c:	4691      	mov	r9, r2
 800ce9e:	f023 0820 	bic.w	r8, r3, #32
 800cea2:	bfbc      	itt	lt
 800cea4:	4622      	movlt	r2, r4
 800cea6:	4614      	movlt	r4, r2
 800cea8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ceac:	d005      	beq.n	800ceba <__cvt+0x42>
 800ceae:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ceb2:	d100      	bne.n	800ceb6 <__cvt+0x3e>
 800ceb4:	3601      	adds	r6, #1
 800ceb6:	2102      	movs	r1, #2
 800ceb8:	e000      	b.n	800cebc <__cvt+0x44>
 800ceba:	2103      	movs	r1, #3
 800cebc:	ab03      	add	r3, sp, #12
 800cebe:	9301      	str	r3, [sp, #4]
 800cec0:	ab02      	add	r3, sp, #8
 800cec2:	9300      	str	r3, [sp, #0]
 800cec4:	ec45 4b10 	vmov	d0, r4, r5
 800cec8:	4653      	mov	r3, sl
 800ceca:	4632      	mov	r2, r6
 800cecc:	f000 fcfc 	bl	800d8c8 <_dtoa_r>
 800ced0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ced4:	4607      	mov	r7, r0
 800ced6:	d102      	bne.n	800cede <__cvt+0x66>
 800ced8:	f019 0f01 	tst.w	r9, #1
 800cedc:	d022      	beq.n	800cf24 <__cvt+0xac>
 800cede:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cee2:	eb07 0906 	add.w	r9, r7, r6
 800cee6:	d110      	bne.n	800cf0a <__cvt+0x92>
 800cee8:	783b      	ldrb	r3, [r7, #0]
 800ceea:	2b30      	cmp	r3, #48	; 0x30
 800ceec:	d10a      	bne.n	800cf04 <__cvt+0x8c>
 800ceee:	2200      	movs	r2, #0
 800cef0:	2300      	movs	r3, #0
 800cef2:	4620      	mov	r0, r4
 800cef4:	4629      	mov	r1, r5
 800cef6:	f7f3 fdef 	bl	8000ad8 <__aeabi_dcmpeq>
 800cefa:	b918      	cbnz	r0, 800cf04 <__cvt+0x8c>
 800cefc:	f1c6 0601 	rsb	r6, r6, #1
 800cf00:	f8ca 6000 	str.w	r6, [sl]
 800cf04:	f8da 3000 	ldr.w	r3, [sl]
 800cf08:	4499      	add	r9, r3
 800cf0a:	2200      	movs	r2, #0
 800cf0c:	2300      	movs	r3, #0
 800cf0e:	4620      	mov	r0, r4
 800cf10:	4629      	mov	r1, r5
 800cf12:	f7f3 fde1 	bl	8000ad8 <__aeabi_dcmpeq>
 800cf16:	b108      	cbz	r0, 800cf1c <__cvt+0xa4>
 800cf18:	f8cd 900c 	str.w	r9, [sp, #12]
 800cf1c:	2230      	movs	r2, #48	; 0x30
 800cf1e:	9b03      	ldr	r3, [sp, #12]
 800cf20:	454b      	cmp	r3, r9
 800cf22:	d307      	bcc.n	800cf34 <__cvt+0xbc>
 800cf24:	9b03      	ldr	r3, [sp, #12]
 800cf26:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cf28:	1bdb      	subs	r3, r3, r7
 800cf2a:	4638      	mov	r0, r7
 800cf2c:	6013      	str	r3, [r2, #0]
 800cf2e:	b004      	add	sp, #16
 800cf30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf34:	1c59      	adds	r1, r3, #1
 800cf36:	9103      	str	r1, [sp, #12]
 800cf38:	701a      	strb	r2, [r3, #0]
 800cf3a:	e7f0      	b.n	800cf1e <__cvt+0xa6>

0800cf3c <__exponent>:
 800cf3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cf3e:	4603      	mov	r3, r0
 800cf40:	2900      	cmp	r1, #0
 800cf42:	bfb8      	it	lt
 800cf44:	4249      	neglt	r1, r1
 800cf46:	f803 2b02 	strb.w	r2, [r3], #2
 800cf4a:	bfb4      	ite	lt
 800cf4c:	222d      	movlt	r2, #45	; 0x2d
 800cf4e:	222b      	movge	r2, #43	; 0x2b
 800cf50:	2909      	cmp	r1, #9
 800cf52:	7042      	strb	r2, [r0, #1]
 800cf54:	dd2a      	ble.n	800cfac <__exponent+0x70>
 800cf56:	f10d 0407 	add.w	r4, sp, #7
 800cf5a:	46a4      	mov	ip, r4
 800cf5c:	270a      	movs	r7, #10
 800cf5e:	46a6      	mov	lr, r4
 800cf60:	460a      	mov	r2, r1
 800cf62:	fb91 f6f7 	sdiv	r6, r1, r7
 800cf66:	fb07 1516 	mls	r5, r7, r6, r1
 800cf6a:	3530      	adds	r5, #48	; 0x30
 800cf6c:	2a63      	cmp	r2, #99	; 0x63
 800cf6e:	f104 34ff 	add.w	r4, r4, #4294967295
 800cf72:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800cf76:	4631      	mov	r1, r6
 800cf78:	dcf1      	bgt.n	800cf5e <__exponent+0x22>
 800cf7a:	3130      	adds	r1, #48	; 0x30
 800cf7c:	f1ae 0502 	sub.w	r5, lr, #2
 800cf80:	f804 1c01 	strb.w	r1, [r4, #-1]
 800cf84:	1c44      	adds	r4, r0, #1
 800cf86:	4629      	mov	r1, r5
 800cf88:	4561      	cmp	r1, ip
 800cf8a:	d30a      	bcc.n	800cfa2 <__exponent+0x66>
 800cf8c:	f10d 0209 	add.w	r2, sp, #9
 800cf90:	eba2 020e 	sub.w	r2, r2, lr
 800cf94:	4565      	cmp	r5, ip
 800cf96:	bf88      	it	hi
 800cf98:	2200      	movhi	r2, #0
 800cf9a:	4413      	add	r3, r2
 800cf9c:	1a18      	subs	r0, r3, r0
 800cf9e:	b003      	add	sp, #12
 800cfa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cfa2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cfa6:	f804 2f01 	strb.w	r2, [r4, #1]!
 800cfaa:	e7ed      	b.n	800cf88 <__exponent+0x4c>
 800cfac:	2330      	movs	r3, #48	; 0x30
 800cfae:	3130      	adds	r1, #48	; 0x30
 800cfb0:	7083      	strb	r3, [r0, #2]
 800cfb2:	70c1      	strb	r1, [r0, #3]
 800cfb4:	1d03      	adds	r3, r0, #4
 800cfb6:	e7f1      	b.n	800cf9c <__exponent+0x60>

0800cfb8 <_printf_float>:
 800cfb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfbc:	ed2d 8b02 	vpush	{d8}
 800cfc0:	b08d      	sub	sp, #52	; 0x34
 800cfc2:	460c      	mov	r4, r1
 800cfc4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800cfc8:	4616      	mov	r6, r2
 800cfca:	461f      	mov	r7, r3
 800cfcc:	4605      	mov	r5, r0
 800cfce:	f001 fa69 	bl	800e4a4 <_localeconv_r>
 800cfd2:	f8d0 a000 	ldr.w	sl, [r0]
 800cfd6:	4650      	mov	r0, sl
 800cfd8:	f7f3 f902 	bl	80001e0 <strlen>
 800cfdc:	2300      	movs	r3, #0
 800cfde:	930a      	str	r3, [sp, #40]	; 0x28
 800cfe0:	6823      	ldr	r3, [r4, #0]
 800cfe2:	9305      	str	r3, [sp, #20]
 800cfe4:	f8d8 3000 	ldr.w	r3, [r8]
 800cfe8:	f894 b018 	ldrb.w	fp, [r4, #24]
 800cfec:	3307      	adds	r3, #7
 800cfee:	f023 0307 	bic.w	r3, r3, #7
 800cff2:	f103 0208 	add.w	r2, r3, #8
 800cff6:	f8c8 2000 	str.w	r2, [r8]
 800cffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cffe:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800d002:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800d006:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d00a:	9307      	str	r3, [sp, #28]
 800d00c:	f8cd 8018 	str.w	r8, [sp, #24]
 800d010:	ee08 0a10 	vmov	s16, r0
 800d014:	4b9f      	ldr	r3, [pc, #636]	; (800d294 <_printf_float+0x2dc>)
 800d016:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d01a:	f04f 32ff 	mov.w	r2, #4294967295
 800d01e:	f7f3 fd8d 	bl	8000b3c <__aeabi_dcmpun>
 800d022:	bb88      	cbnz	r0, 800d088 <_printf_float+0xd0>
 800d024:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d028:	4b9a      	ldr	r3, [pc, #616]	; (800d294 <_printf_float+0x2dc>)
 800d02a:	f04f 32ff 	mov.w	r2, #4294967295
 800d02e:	f7f3 fd67 	bl	8000b00 <__aeabi_dcmple>
 800d032:	bb48      	cbnz	r0, 800d088 <_printf_float+0xd0>
 800d034:	2200      	movs	r2, #0
 800d036:	2300      	movs	r3, #0
 800d038:	4640      	mov	r0, r8
 800d03a:	4649      	mov	r1, r9
 800d03c:	f7f3 fd56 	bl	8000aec <__aeabi_dcmplt>
 800d040:	b110      	cbz	r0, 800d048 <_printf_float+0x90>
 800d042:	232d      	movs	r3, #45	; 0x2d
 800d044:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d048:	4b93      	ldr	r3, [pc, #588]	; (800d298 <_printf_float+0x2e0>)
 800d04a:	4894      	ldr	r0, [pc, #592]	; (800d29c <_printf_float+0x2e4>)
 800d04c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800d050:	bf94      	ite	ls
 800d052:	4698      	movls	r8, r3
 800d054:	4680      	movhi	r8, r0
 800d056:	2303      	movs	r3, #3
 800d058:	6123      	str	r3, [r4, #16]
 800d05a:	9b05      	ldr	r3, [sp, #20]
 800d05c:	f023 0204 	bic.w	r2, r3, #4
 800d060:	6022      	str	r2, [r4, #0]
 800d062:	f04f 0900 	mov.w	r9, #0
 800d066:	9700      	str	r7, [sp, #0]
 800d068:	4633      	mov	r3, r6
 800d06a:	aa0b      	add	r2, sp, #44	; 0x2c
 800d06c:	4621      	mov	r1, r4
 800d06e:	4628      	mov	r0, r5
 800d070:	f000 f9d8 	bl	800d424 <_printf_common>
 800d074:	3001      	adds	r0, #1
 800d076:	f040 8090 	bne.w	800d19a <_printf_float+0x1e2>
 800d07a:	f04f 30ff 	mov.w	r0, #4294967295
 800d07e:	b00d      	add	sp, #52	; 0x34
 800d080:	ecbd 8b02 	vpop	{d8}
 800d084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d088:	4642      	mov	r2, r8
 800d08a:	464b      	mov	r3, r9
 800d08c:	4640      	mov	r0, r8
 800d08e:	4649      	mov	r1, r9
 800d090:	f7f3 fd54 	bl	8000b3c <__aeabi_dcmpun>
 800d094:	b140      	cbz	r0, 800d0a8 <_printf_float+0xf0>
 800d096:	464b      	mov	r3, r9
 800d098:	2b00      	cmp	r3, #0
 800d09a:	bfbc      	itt	lt
 800d09c:	232d      	movlt	r3, #45	; 0x2d
 800d09e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d0a2:	487f      	ldr	r0, [pc, #508]	; (800d2a0 <_printf_float+0x2e8>)
 800d0a4:	4b7f      	ldr	r3, [pc, #508]	; (800d2a4 <_printf_float+0x2ec>)
 800d0a6:	e7d1      	b.n	800d04c <_printf_float+0x94>
 800d0a8:	6863      	ldr	r3, [r4, #4]
 800d0aa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800d0ae:	9206      	str	r2, [sp, #24]
 800d0b0:	1c5a      	adds	r2, r3, #1
 800d0b2:	d13f      	bne.n	800d134 <_printf_float+0x17c>
 800d0b4:	2306      	movs	r3, #6
 800d0b6:	6063      	str	r3, [r4, #4]
 800d0b8:	9b05      	ldr	r3, [sp, #20]
 800d0ba:	6861      	ldr	r1, [r4, #4]
 800d0bc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800d0c0:	2300      	movs	r3, #0
 800d0c2:	9303      	str	r3, [sp, #12]
 800d0c4:	ab0a      	add	r3, sp, #40	; 0x28
 800d0c6:	e9cd b301 	strd	fp, r3, [sp, #4]
 800d0ca:	ab09      	add	r3, sp, #36	; 0x24
 800d0cc:	ec49 8b10 	vmov	d0, r8, r9
 800d0d0:	9300      	str	r3, [sp, #0]
 800d0d2:	6022      	str	r2, [r4, #0]
 800d0d4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d0d8:	4628      	mov	r0, r5
 800d0da:	f7ff fecd 	bl	800ce78 <__cvt>
 800d0de:	9b06      	ldr	r3, [sp, #24]
 800d0e0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d0e2:	2b47      	cmp	r3, #71	; 0x47
 800d0e4:	4680      	mov	r8, r0
 800d0e6:	d108      	bne.n	800d0fa <_printf_float+0x142>
 800d0e8:	1cc8      	adds	r0, r1, #3
 800d0ea:	db02      	blt.n	800d0f2 <_printf_float+0x13a>
 800d0ec:	6863      	ldr	r3, [r4, #4]
 800d0ee:	4299      	cmp	r1, r3
 800d0f0:	dd41      	ble.n	800d176 <_printf_float+0x1be>
 800d0f2:	f1ab 0b02 	sub.w	fp, fp, #2
 800d0f6:	fa5f fb8b 	uxtb.w	fp, fp
 800d0fa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d0fe:	d820      	bhi.n	800d142 <_printf_float+0x18a>
 800d100:	3901      	subs	r1, #1
 800d102:	465a      	mov	r2, fp
 800d104:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d108:	9109      	str	r1, [sp, #36]	; 0x24
 800d10a:	f7ff ff17 	bl	800cf3c <__exponent>
 800d10e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d110:	1813      	adds	r3, r2, r0
 800d112:	2a01      	cmp	r2, #1
 800d114:	4681      	mov	r9, r0
 800d116:	6123      	str	r3, [r4, #16]
 800d118:	dc02      	bgt.n	800d120 <_printf_float+0x168>
 800d11a:	6822      	ldr	r2, [r4, #0]
 800d11c:	07d2      	lsls	r2, r2, #31
 800d11e:	d501      	bpl.n	800d124 <_printf_float+0x16c>
 800d120:	3301      	adds	r3, #1
 800d122:	6123      	str	r3, [r4, #16]
 800d124:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d09c      	beq.n	800d066 <_printf_float+0xae>
 800d12c:	232d      	movs	r3, #45	; 0x2d
 800d12e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d132:	e798      	b.n	800d066 <_printf_float+0xae>
 800d134:	9a06      	ldr	r2, [sp, #24]
 800d136:	2a47      	cmp	r2, #71	; 0x47
 800d138:	d1be      	bne.n	800d0b8 <_printf_float+0x100>
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d1bc      	bne.n	800d0b8 <_printf_float+0x100>
 800d13e:	2301      	movs	r3, #1
 800d140:	e7b9      	b.n	800d0b6 <_printf_float+0xfe>
 800d142:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800d146:	d118      	bne.n	800d17a <_printf_float+0x1c2>
 800d148:	2900      	cmp	r1, #0
 800d14a:	6863      	ldr	r3, [r4, #4]
 800d14c:	dd0b      	ble.n	800d166 <_printf_float+0x1ae>
 800d14e:	6121      	str	r1, [r4, #16]
 800d150:	b913      	cbnz	r3, 800d158 <_printf_float+0x1a0>
 800d152:	6822      	ldr	r2, [r4, #0]
 800d154:	07d0      	lsls	r0, r2, #31
 800d156:	d502      	bpl.n	800d15e <_printf_float+0x1a6>
 800d158:	3301      	adds	r3, #1
 800d15a:	440b      	add	r3, r1
 800d15c:	6123      	str	r3, [r4, #16]
 800d15e:	65a1      	str	r1, [r4, #88]	; 0x58
 800d160:	f04f 0900 	mov.w	r9, #0
 800d164:	e7de      	b.n	800d124 <_printf_float+0x16c>
 800d166:	b913      	cbnz	r3, 800d16e <_printf_float+0x1b6>
 800d168:	6822      	ldr	r2, [r4, #0]
 800d16a:	07d2      	lsls	r2, r2, #31
 800d16c:	d501      	bpl.n	800d172 <_printf_float+0x1ba>
 800d16e:	3302      	adds	r3, #2
 800d170:	e7f4      	b.n	800d15c <_printf_float+0x1a4>
 800d172:	2301      	movs	r3, #1
 800d174:	e7f2      	b.n	800d15c <_printf_float+0x1a4>
 800d176:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800d17a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d17c:	4299      	cmp	r1, r3
 800d17e:	db05      	blt.n	800d18c <_printf_float+0x1d4>
 800d180:	6823      	ldr	r3, [r4, #0]
 800d182:	6121      	str	r1, [r4, #16]
 800d184:	07d8      	lsls	r0, r3, #31
 800d186:	d5ea      	bpl.n	800d15e <_printf_float+0x1a6>
 800d188:	1c4b      	adds	r3, r1, #1
 800d18a:	e7e7      	b.n	800d15c <_printf_float+0x1a4>
 800d18c:	2900      	cmp	r1, #0
 800d18e:	bfd4      	ite	le
 800d190:	f1c1 0202 	rsble	r2, r1, #2
 800d194:	2201      	movgt	r2, #1
 800d196:	4413      	add	r3, r2
 800d198:	e7e0      	b.n	800d15c <_printf_float+0x1a4>
 800d19a:	6823      	ldr	r3, [r4, #0]
 800d19c:	055a      	lsls	r2, r3, #21
 800d19e:	d407      	bmi.n	800d1b0 <_printf_float+0x1f8>
 800d1a0:	6923      	ldr	r3, [r4, #16]
 800d1a2:	4642      	mov	r2, r8
 800d1a4:	4631      	mov	r1, r6
 800d1a6:	4628      	mov	r0, r5
 800d1a8:	47b8      	blx	r7
 800d1aa:	3001      	adds	r0, #1
 800d1ac:	d12c      	bne.n	800d208 <_printf_float+0x250>
 800d1ae:	e764      	b.n	800d07a <_printf_float+0xc2>
 800d1b0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d1b4:	f240 80e0 	bls.w	800d378 <_printf_float+0x3c0>
 800d1b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d1bc:	2200      	movs	r2, #0
 800d1be:	2300      	movs	r3, #0
 800d1c0:	f7f3 fc8a 	bl	8000ad8 <__aeabi_dcmpeq>
 800d1c4:	2800      	cmp	r0, #0
 800d1c6:	d034      	beq.n	800d232 <_printf_float+0x27a>
 800d1c8:	4a37      	ldr	r2, [pc, #220]	; (800d2a8 <_printf_float+0x2f0>)
 800d1ca:	2301      	movs	r3, #1
 800d1cc:	4631      	mov	r1, r6
 800d1ce:	4628      	mov	r0, r5
 800d1d0:	47b8      	blx	r7
 800d1d2:	3001      	adds	r0, #1
 800d1d4:	f43f af51 	beq.w	800d07a <_printf_float+0xc2>
 800d1d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d1dc:	429a      	cmp	r2, r3
 800d1de:	db02      	blt.n	800d1e6 <_printf_float+0x22e>
 800d1e0:	6823      	ldr	r3, [r4, #0]
 800d1e2:	07d8      	lsls	r0, r3, #31
 800d1e4:	d510      	bpl.n	800d208 <_printf_float+0x250>
 800d1e6:	ee18 3a10 	vmov	r3, s16
 800d1ea:	4652      	mov	r2, sl
 800d1ec:	4631      	mov	r1, r6
 800d1ee:	4628      	mov	r0, r5
 800d1f0:	47b8      	blx	r7
 800d1f2:	3001      	adds	r0, #1
 800d1f4:	f43f af41 	beq.w	800d07a <_printf_float+0xc2>
 800d1f8:	f04f 0800 	mov.w	r8, #0
 800d1fc:	f104 091a 	add.w	r9, r4, #26
 800d200:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d202:	3b01      	subs	r3, #1
 800d204:	4543      	cmp	r3, r8
 800d206:	dc09      	bgt.n	800d21c <_printf_float+0x264>
 800d208:	6823      	ldr	r3, [r4, #0]
 800d20a:	079b      	lsls	r3, r3, #30
 800d20c:	f100 8105 	bmi.w	800d41a <_printf_float+0x462>
 800d210:	68e0      	ldr	r0, [r4, #12]
 800d212:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d214:	4298      	cmp	r0, r3
 800d216:	bfb8      	it	lt
 800d218:	4618      	movlt	r0, r3
 800d21a:	e730      	b.n	800d07e <_printf_float+0xc6>
 800d21c:	2301      	movs	r3, #1
 800d21e:	464a      	mov	r2, r9
 800d220:	4631      	mov	r1, r6
 800d222:	4628      	mov	r0, r5
 800d224:	47b8      	blx	r7
 800d226:	3001      	adds	r0, #1
 800d228:	f43f af27 	beq.w	800d07a <_printf_float+0xc2>
 800d22c:	f108 0801 	add.w	r8, r8, #1
 800d230:	e7e6      	b.n	800d200 <_printf_float+0x248>
 800d232:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d234:	2b00      	cmp	r3, #0
 800d236:	dc39      	bgt.n	800d2ac <_printf_float+0x2f4>
 800d238:	4a1b      	ldr	r2, [pc, #108]	; (800d2a8 <_printf_float+0x2f0>)
 800d23a:	2301      	movs	r3, #1
 800d23c:	4631      	mov	r1, r6
 800d23e:	4628      	mov	r0, r5
 800d240:	47b8      	blx	r7
 800d242:	3001      	adds	r0, #1
 800d244:	f43f af19 	beq.w	800d07a <_printf_float+0xc2>
 800d248:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d24c:	4313      	orrs	r3, r2
 800d24e:	d102      	bne.n	800d256 <_printf_float+0x29e>
 800d250:	6823      	ldr	r3, [r4, #0]
 800d252:	07d9      	lsls	r1, r3, #31
 800d254:	d5d8      	bpl.n	800d208 <_printf_float+0x250>
 800d256:	ee18 3a10 	vmov	r3, s16
 800d25a:	4652      	mov	r2, sl
 800d25c:	4631      	mov	r1, r6
 800d25e:	4628      	mov	r0, r5
 800d260:	47b8      	blx	r7
 800d262:	3001      	adds	r0, #1
 800d264:	f43f af09 	beq.w	800d07a <_printf_float+0xc2>
 800d268:	f04f 0900 	mov.w	r9, #0
 800d26c:	f104 0a1a 	add.w	sl, r4, #26
 800d270:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d272:	425b      	negs	r3, r3
 800d274:	454b      	cmp	r3, r9
 800d276:	dc01      	bgt.n	800d27c <_printf_float+0x2c4>
 800d278:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d27a:	e792      	b.n	800d1a2 <_printf_float+0x1ea>
 800d27c:	2301      	movs	r3, #1
 800d27e:	4652      	mov	r2, sl
 800d280:	4631      	mov	r1, r6
 800d282:	4628      	mov	r0, r5
 800d284:	47b8      	blx	r7
 800d286:	3001      	adds	r0, #1
 800d288:	f43f aef7 	beq.w	800d07a <_printf_float+0xc2>
 800d28c:	f109 0901 	add.w	r9, r9, #1
 800d290:	e7ee      	b.n	800d270 <_printf_float+0x2b8>
 800d292:	bf00      	nop
 800d294:	7fefffff 	.word	0x7fefffff
 800d298:	0803d22c 	.word	0x0803d22c
 800d29c:	0803d230 	.word	0x0803d230
 800d2a0:	0803d238 	.word	0x0803d238
 800d2a4:	0803d234 	.word	0x0803d234
 800d2a8:	0803d23c 	.word	0x0803d23c
 800d2ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d2ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d2b0:	429a      	cmp	r2, r3
 800d2b2:	bfa8      	it	ge
 800d2b4:	461a      	movge	r2, r3
 800d2b6:	2a00      	cmp	r2, #0
 800d2b8:	4691      	mov	r9, r2
 800d2ba:	dc37      	bgt.n	800d32c <_printf_float+0x374>
 800d2bc:	f04f 0b00 	mov.w	fp, #0
 800d2c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d2c4:	f104 021a 	add.w	r2, r4, #26
 800d2c8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d2ca:	9305      	str	r3, [sp, #20]
 800d2cc:	eba3 0309 	sub.w	r3, r3, r9
 800d2d0:	455b      	cmp	r3, fp
 800d2d2:	dc33      	bgt.n	800d33c <_printf_float+0x384>
 800d2d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d2d8:	429a      	cmp	r2, r3
 800d2da:	db3b      	blt.n	800d354 <_printf_float+0x39c>
 800d2dc:	6823      	ldr	r3, [r4, #0]
 800d2de:	07da      	lsls	r2, r3, #31
 800d2e0:	d438      	bmi.n	800d354 <_printf_float+0x39c>
 800d2e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d2e4:	9a05      	ldr	r2, [sp, #20]
 800d2e6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d2e8:	1a9a      	subs	r2, r3, r2
 800d2ea:	eba3 0901 	sub.w	r9, r3, r1
 800d2ee:	4591      	cmp	r9, r2
 800d2f0:	bfa8      	it	ge
 800d2f2:	4691      	movge	r9, r2
 800d2f4:	f1b9 0f00 	cmp.w	r9, #0
 800d2f8:	dc35      	bgt.n	800d366 <_printf_float+0x3ae>
 800d2fa:	f04f 0800 	mov.w	r8, #0
 800d2fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d302:	f104 0a1a 	add.w	sl, r4, #26
 800d306:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d30a:	1a9b      	subs	r3, r3, r2
 800d30c:	eba3 0309 	sub.w	r3, r3, r9
 800d310:	4543      	cmp	r3, r8
 800d312:	f77f af79 	ble.w	800d208 <_printf_float+0x250>
 800d316:	2301      	movs	r3, #1
 800d318:	4652      	mov	r2, sl
 800d31a:	4631      	mov	r1, r6
 800d31c:	4628      	mov	r0, r5
 800d31e:	47b8      	blx	r7
 800d320:	3001      	adds	r0, #1
 800d322:	f43f aeaa 	beq.w	800d07a <_printf_float+0xc2>
 800d326:	f108 0801 	add.w	r8, r8, #1
 800d32a:	e7ec      	b.n	800d306 <_printf_float+0x34e>
 800d32c:	4613      	mov	r3, r2
 800d32e:	4631      	mov	r1, r6
 800d330:	4642      	mov	r2, r8
 800d332:	4628      	mov	r0, r5
 800d334:	47b8      	blx	r7
 800d336:	3001      	adds	r0, #1
 800d338:	d1c0      	bne.n	800d2bc <_printf_float+0x304>
 800d33a:	e69e      	b.n	800d07a <_printf_float+0xc2>
 800d33c:	2301      	movs	r3, #1
 800d33e:	4631      	mov	r1, r6
 800d340:	4628      	mov	r0, r5
 800d342:	9205      	str	r2, [sp, #20]
 800d344:	47b8      	blx	r7
 800d346:	3001      	adds	r0, #1
 800d348:	f43f ae97 	beq.w	800d07a <_printf_float+0xc2>
 800d34c:	9a05      	ldr	r2, [sp, #20]
 800d34e:	f10b 0b01 	add.w	fp, fp, #1
 800d352:	e7b9      	b.n	800d2c8 <_printf_float+0x310>
 800d354:	ee18 3a10 	vmov	r3, s16
 800d358:	4652      	mov	r2, sl
 800d35a:	4631      	mov	r1, r6
 800d35c:	4628      	mov	r0, r5
 800d35e:	47b8      	blx	r7
 800d360:	3001      	adds	r0, #1
 800d362:	d1be      	bne.n	800d2e2 <_printf_float+0x32a>
 800d364:	e689      	b.n	800d07a <_printf_float+0xc2>
 800d366:	9a05      	ldr	r2, [sp, #20]
 800d368:	464b      	mov	r3, r9
 800d36a:	4442      	add	r2, r8
 800d36c:	4631      	mov	r1, r6
 800d36e:	4628      	mov	r0, r5
 800d370:	47b8      	blx	r7
 800d372:	3001      	adds	r0, #1
 800d374:	d1c1      	bne.n	800d2fa <_printf_float+0x342>
 800d376:	e680      	b.n	800d07a <_printf_float+0xc2>
 800d378:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d37a:	2a01      	cmp	r2, #1
 800d37c:	dc01      	bgt.n	800d382 <_printf_float+0x3ca>
 800d37e:	07db      	lsls	r3, r3, #31
 800d380:	d538      	bpl.n	800d3f4 <_printf_float+0x43c>
 800d382:	2301      	movs	r3, #1
 800d384:	4642      	mov	r2, r8
 800d386:	4631      	mov	r1, r6
 800d388:	4628      	mov	r0, r5
 800d38a:	47b8      	blx	r7
 800d38c:	3001      	adds	r0, #1
 800d38e:	f43f ae74 	beq.w	800d07a <_printf_float+0xc2>
 800d392:	ee18 3a10 	vmov	r3, s16
 800d396:	4652      	mov	r2, sl
 800d398:	4631      	mov	r1, r6
 800d39a:	4628      	mov	r0, r5
 800d39c:	47b8      	blx	r7
 800d39e:	3001      	adds	r0, #1
 800d3a0:	f43f ae6b 	beq.w	800d07a <_printf_float+0xc2>
 800d3a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d3a8:	2200      	movs	r2, #0
 800d3aa:	2300      	movs	r3, #0
 800d3ac:	f7f3 fb94 	bl	8000ad8 <__aeabi_dcmpeq>
 800d3b0:	b9d8      	cbnz	r0, 800d3ea <_printf_float+0x432>
 800d3b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d3b4:	f108 0201 	add.w	r2, r8, #1
 800d3b8:	3b01      	subs	r3, #1
 800d3ba:	4631      	mov	r1, r6
 800d3bc:	4628      	mov	r0, r5
 800d3be:	47b8      	blx	r7
 800d3c0:	3001      	adds	r0, #1
 800d3c2:	d10e      	bne.n	800d3e2 <_printf_float+0x42a>
 800d3c4:	e659      	b.n	800d07a <_printf_float+0xc2>
 800d3c6:	2301      	movs	r3, #1
 800d3c8:	4652      	mov	r2, sl
 800d3ca:	4631      	mov	r1, r6
 800d3cc:	4628      	mov	r0, r5
 800d3ce:	47b8      	blx	r7
 800d3d0:	3001      	adds	r0, #1
 800d3d2:	f43f ae52 	beq.w	800d07a <_printf_float+0xc2>
 800d3d6:	f108 0801 	add.w	r8, r8, #1
 800d3da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d3dc:	3b01      	subs	r3, #1
 800d3de:	4543      	cmp	r3, r8
 800d3e0:	dcf1      	bgt.n	800d3c6 <_printf_float+0x40e>
 800d3e2:	464b      	mov	r3, r9
 800d3e4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d3e8:	e6dc      	b.n	800d1a4 <_printf_float+0x1ec>
 800d3ea:	f04f 0800 	mov.w	r8, #0
 800d3ee:	f104 0a1a 	add.w	sl, r4, #26
 800d3f2:	e7f2      	b.n	800d3da <_printf_float+0x422>
 800d3f4:	2301      	movs	r3, #1
 800d3f6:	4642      	mov	r2, r8
 800d3f8:	e7df      	b.n	800d3ba <_printf_float+0x402>
 800d3fa:	2301      	movs	r3, #1
 800d3fc:	464a      	mov	r2, r9
 800d3fe:	4631      	mov	r1, r6
 800d400:	4628      	mov	r0, r5
 800d402:	47b8      	blx	r7
 800d404:	3001      	adds	r0, #1
 800d406:	f43f ae38 	beq.w	800d07a <_printf_float+0xc2>
 800d40a:	f108 0801 	add.w	r8, r8, #1
 800d40e:	68e3      	ldr	r3, [r4, #12]
 800d410:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d412:	1a5b      	subs	r3, r3, r1
 800d414:	4543      	cmp	r3, r8
 800d416:	dcf0      	bgt.n	800d3fa <_printf_float+0x442>
 800d418:	e6fa      	b.n	800d210 <_printf_float+0x258>
 800d41a:	f04f 0800 	mov.w	r8, #0
 800d41e:	f104 0919 	add.w	r9, r4, #25
 800d422:	e7f4      	b.n	800d40e <_printf_float+0x456>

0800d424 <_printf_common>:
 800d424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d428:	4616      	mov	r6, r2
 800d42a:	4699      	mov	r9, r3
 800d42c:	688a      	ldr	r2, [r1, #8]
 800d42e:	690b      	ldr	r3, [r1, #16]
 800d430:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d434:	4293      	cmp	r3, r2
 800d436:	bfb8      	it	lt
 800d438:	4613      	movlt	r3, r2
 800d43a:	6033      	str	r3, [r6, #0]
 800d43c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d440:	4607      	mov	r7, r0
 800d442:	460c      	mov	r4, r1
 800d444:	b10a      	cbz	r2, 800d44a <_printf_common+0x26>
 800d446:	3301      	adds	r3, #1
 800d448:	6033      	str	r3, [r6, #0]
 800d44a:	6823      	ldr	r3, [r4, #0]
 800d44c:	0699      	lsls	r1, r3, #26
 800d44e:	bf42      	ittt	mi
 800d450:	6833      	ldrmi	r3, [r6, #0]
 800d452:	3302      	addmi	r3, #2
 800d454:	6033      	strmi	r3, [r6, #0]
 800d456:	6825      	ldr	r5, [r4, #0]
 800d458:	f015 0506 	ands.w	r5, r5, #6
 800d45c:	d106      	bne.n	800d46c <_printf_common+0x48>
 800d45e:	f104 0a19 	add.w	sl, r4, #25
 800d462:	68e3      	ldr	r3, [r4, #12]
 800d464:	6832      	ldr	r2, [r6, #0]
 800d466:	1a9b      	subs	r3, r3, r2
 800d468:	42ab      	cmp	r3, r5
 800d46a:	dc26      	bgt.n	800d4ba <_printf_common+0x96>
 800d46c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d470:	1e13      	subs	r3, r2, #0
 800d472:	6822      	ldr	r2, [r4, #0]
 800d474:	bf18      	it	ne
 800d476:	2301      	movne	r3, #1
 800d478:	0692      	lsls	r2, r2, #26
 800d47a:	d42b      	bmi.n	800d4d4 <_printf_common+0xb0>
 800d47c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d480:	4649      	mov	r1, r9
 800d482:	4638      	mov	r0, r7
 800d484:	47c0      	blx	r8
 800d486:	3001      	adds	r0, #1
 800d488:	d01e      	beq.n	800d4c8 <_printf_common+0xa4>
 800d48a:	6823      	ldr	r3, [r4, #0]
 800d48c:	68e5      	ldr	r5, [r4, #12]
 800d48e:	6832      	ldr	r2, [r6, #0]
 800d490:	f003 0306 	and.w	r3, r3, #6
 800d494:	2b04      	cmp	r3, #4
 800d496:	bf08      	it	eq
 800d498:	1aad      	subeq	r5, r5, r2
 800d49a:	68a3      	ldr	r3, [r4, #8]
 800d49c:	6922      	ldr	r2, [r4, #16]
 800d49e:	bf0c      	ite	eq
 800d4a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d4a4:	2500      	movne	r5, #0
 800d4a6:	4293      	cmp	r3, r2
 800d4a8:	bfc4      	itt	gt
 800d4aa:	1a9b      	subgt	r3, r3, r2
 800d4ac:	18ed      	addgt	r5, r5, r3
 800d4ae:	2600      	movs	r6, #0
 800d4b0:	341a      	adds	r4, #26
 800d4b2:	42b5      	cmp	r5, r6
 800d4b4:	d11a      	bne.n	800d4ec <_printf_common+0xc8>
 800d4b6:	2000      	movs	r0, #0
 800d4b8:	e008      	b.n	800d4cc <_printf_common+0xa8>
 800d4ba:	2301      	movs	r3, #1
 800d4bc:	4652      	mov	r2, sl
 800d4be:	4649      	mov	r1, r9
 800d4c0:	4638      	mov	r0, r7
 800d4c2:	47c0      	blx	r8
 800d4c4:	3001      	adds	r0, #1
 800d4c6:	d103      	bne.n	800d4d0 <_printf_common+0xac>
 800d4c8:	f04f 30ff 	mov.w	r0, #4294967295
 800d4cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d4d0:	3501      	adds	r5, #1
 800d4d2:	e7c6      	b.n	800d462 <_printf_common+0x3e>
 800d4d4:	18e1      	adds	r1, r4, r3
 800d4d6:	1c5a      	adds	r2, r3, #1
 800d4d8:	2030      	movs	r0, #48	; 0x30
 800d4da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d4de:	4422      	add	r2, r4
 800d4e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d4e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d4e8:	3302      	adds	r3, #2
 800d4ea:	e7c7      	b.n	800d47c <_printf_common+0x58>
 800d4ec:	2301      	movs	r3, #1
 800d4ee:	4622      	mov	r2, r4
 800d4f0:	4649      	mov	r1, r9
 800d4f2:	4638      	mov	r0, r7
 800d4f4:	47c0      	blx	r8
 800d4f6:	3001      	adds	r0, #1
 800d4f8:	d0e6      	beq.n	800d4c8 <_printf_common+0xa4>
 800d4fa:	3601      	adds	r6, #1
 800d4fc:	e7d9      	b.n	800d4b2 <_printf_common+0x8e>
	...

0800d500 <_printf_i>:
 800d500:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d504:	7e0f      	ldrb	r7, [r1, #24]
 800d506:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d508:	2f78      	cmp	r7, #120	; 0x78
 800d50a:	4691      	mov	r9, r2
 800d50c:	4680      	mov	r8, r0
 800d50e:	460c      	mov	r4, r1
 800d510:	469a      	mov	sl, r3
 800d512:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d516:	d807      	bhi.n	800d528 <_printf_i+0x28>
 800d518:	2f62      	cmp	r7, #98	; 0x62
 800d51a:	d80a      	bhi.n	800d532 <_printf_i+0x32>
 800d51c:	2f00      	cmp	r7, #0
 800d51e:	f000 80d8 	beq.w	800d6d2 <_printf_i+0x1d2>
 800d522:	2f58      	cmp	r7, #88	; 0x58
 800d524:	f000 80a3 	beq.w	800d66e <_printf_i+0x16e>
 800d528:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d52c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d530:	e03a      	b.n	800d5a8 <_printf_i+0xa8>
 800d532:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d536:	2b15      	cmp	r3, #21
 800d538:	d8f6      	bhi.n	800d528 <_printf_i+0x28>
 800d53a:	a101      	add	r1, pc, #4	; (adr r1, 800d540 <_printf_i+0x40>)
 800d53c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d540:	0800d599 	.word	0x0800d599
 800d544:	0800d5ad 	.word	0x0800d5ad
 800d548:	0800d529 	.word	0x0800d529
 800d54c:	0800d529 	.word	0x0800d529
 800d550:	0800d529 	.word	0x0800d529
 800d554:	0800d529 	.word	0x0800d529
 800d558:	0800d5ad 	.word	0x0800d5ad
 800d55c:	0800d529 	.word	0x0800d529
 800d560:	0800d529 	.word	0x0800d529
 800d564:	0800d529 	.word	0x0800d529
 800d568:	0800d529 	.word	0x0800d529
 800d56c:	0800d6b9 	.word	0x0800d6b9
 800d570:	0800d5dd 	.word	0x0800d5dd
 800d574:	0800d69b 	.word	0x0800d69b
 800d578:	0800d529 	.word	0x0800d529
 800d57c:	0800d529 	.word	0x0800d529
 800d580:	0800d6db 	.word	0x0800d6db
 800d584:	0800d529 	.word	0x0800d529
 800d588:	0800d5dd 	.word	0x0800d5dd
 800d58c:	0800d529 	.word	0x0800d529
 800d590:	0800d529 	.word	0x0800d529
 800d594:	0800d6a3 	.word	0x0800d6a3
 800d598:	682b      	ldr	r3, [r5, #0]
 800d59a:	1d1a      	adds	r2, r3, #4
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	602a      	str	r2, [r5, #0]
 800d5a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d5a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d5a8:	2301      	movs	r3, #1
 800d5aa:	e0a3      	b.n	800d6f4 <_printf_i+0x1f4>
 800d5ac:	6820      	ldr	r0, [r4, #0]
 800d5ae:	6829      	ldr	r1, [r5, #0]
 800d5b0:	0606      	lsls	r6, r0, #24
 800d5b2:	f101 0304 	add.w	r3, r1, #4
 800d5b6:	d50a      	bpl.n	800d5ce <_printf_i+0xce>
 800d5b8:	680e      	ldr	r6, [r1, #0]
 800d5ba:	602b      	str	r3, [r5, #0]
 800d5bc:	2e00      	cmp	r6, #0
 800d5be:	da03      	bge.n	800d5c8 <_printf_i+0xc8>
 800d5c0:	232d      	movs	r3, #45	; 0x2d
 800d5c2:	4276      	negs	r6, r6
 800d5c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d5c8:	485e      	ldr	r0, [pc, #376]	; (800d744 <_printf_i+0x244>)
 800d5ca:	230a      	movs	r3, #10
 800d5cc:	e019      	b.n	800d602 <_printf_i+0x102>
 800d5ce:	680e      	ldr	r6, [r1, #0]
 800d5d0:	602b      	str	r3, [r5, #0]
 800d5d2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d5d6:	bf18      	it	ne
 800d5d8:	b236      	sxthne	r6, r6
 800d5da:	e7ef      	b.n	800d5bc <_printf_i+0xbc>
 800d5dc:	682b      	ldr	r3, [r5, #0]
 800d5de:	6820      	ldr	r0, [r4, #0]
 800d5e0:	1d19      	adds	r1, r3, #4
 800d5e2:	6029      	str	r1, [r5, #0]
 800d5e4:	0601      	lsls	r1, r0, #24
 800d5e6:	d501      	bpl.n	800d5ec <_printf_i+0xec>
 800d5e8:	681e      	ldr	r6, [r3, #0]
 800d5ea:	e002      	b.n	800d5f2 <_printf_i+0xf2>
 800d5ec:	0646      	lsls	r6, r0, #25
 800d5ee:	d5fb      	bpl.n	800d5e8 <_printf_i+0xe8>
 800d5f0:	881e      	ldrh	r6, [r3, #0]
 800d5f2:	4854      	ldr	r0, [pc, #336]	; (800d744 <_printf_i+0x244>)
 800d5f4:	2f6f      	cmp	r7, #111	; 0x6f
 800d5f6:	bf0c      	ite	eq
 800d5f8:	2308      	moveq	r3, #8
 800d5fa:	230a      	movne	r3, #10
 800d5fc:	2100      	movs	r1, #0
 800d5fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d602:	6865      	ldr	r5, [r4, #4]
 800d604:	60a5      	str	r5, [r4, #8]
 800d606:	2d00      	cmp	r5, #0
 800d608:	bfa2      	ittt	ge
 800d60a:	6821      	ldrge	r1, [r4, #0]
 800d60c:	f021 0104 	bicge.w	r1, r1, #4
 800d610:	6021      	strge	r1, [r4, #0]
 800d612:	b90e      	cbnz	r6, 800d618 <_printf_i+0x118>
 800d614:	2d00      	cmp	r5, #0
 800d616:	d04d      	beq.n	800d6b4 <_printf_i+0x1b4>
 800d618:	4615      	mov	r5, r2
 800d61a:	fbb6 f1f3 	udiv	r1, r6, r3
 800d61e:	fb03 6711 	mls	r7, r3, r1, r6
 800d622:	5dc7      	ldrb	r7, [r0, r7]
 800d624:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d628:	4637      	mov	r7, r6
 800d62a:	42bb      	cmp	r3, r7
 800d62c:	460e      	mov	r6, r1
 800d62e:	d9f4      	bls.n	800d61a <_printf_i+0x11a>
 800d630:	2b08      	cmp	r3, #8
 800d632:	d10b      	bne.n	800d64c <_printf_i+0x14c>
 800d634:	6823      	ldr	r3, [r4, #0]
 800d636:	07de      	lsls	r6, r3, #31
 800d638:	d508      	bpl.n	800d64c <_printf_i+0x14c>
 800d63a:	6923      	ldr	r3, [r4, #16]
 800d63c:	6861      	ldr	r1, [r4, #4]
 800d63e:	4299      	cmp	r1, r3
 800d640:	bfde      	ittt	le
 800d642:	2330      	movle	r3, #48	; 0x30
 800d644:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d648:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d64c:	1b52      	subs	r2, r2, r5
 800d64e:	6122      	str	r2, [r4, #16]
 800d650:	f8cd a000 	str.w	sl, [sp]
 800d654:	464b      	mov	r3, r9
 800d656:	aa03      	add	r2, sp, #12
 800d658:	4621      	mov	r1, r4
 800d65a:	4640      	mov	r0, r8
 800d65c:	f7ff fee2 	bl	800d424 <_printf_common>
 800d660:	3001      	adds	r0, #1
 800d662:	d14c      	bne.n	800d6fe <_printf_i+0x1fe>
 800d664:	f04f 30ff 	mov.w	r0, #4294967295
 800d668:	b004      	add	sp, #16
 800d66a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d66e:	4835      	ldr	r0, [pc, #212]	; (800d744 <_printf_i+0x244>)
 800d670:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d674:	6829      	ldr	r1, [r5, #0]
 800d676:	6823      	ldr	r3, [r4, #0]
 800d678:	f851 6b04 	ldr.w	r6, [r1], #4
 800d67c:	6029      	str	r1, [r5, #0]
 800d67e:	061d      	lsls	r5, r3, #24
 800d680:	d514      	bpl.n	800d6ac <_printf_i+0x1ac>
 800d682:	07df      	lsls	r7, r3, #31
 800d684:	bf44      	itt	mi
 800d686:	f043 0320 	orrmi.w	r3, r3, #32
 800d68a:	6023      	strmi	r3, [r4, #0]
 800d68c:	b91e      	cbnz	r6, 800d696 <_printf_i+0x196>
 800d68e:	6823      	ldr	r3, [r4, #0]
 800d690:	f023 0320 	bic.w	r3, r3, #32
 800d694:	6023      	str	r3, [r4, #0]
 800d696:	2310      	movs	r3, #16
 800d698:	e7b0      	b.n	800d5fc <_printf_i+0xfc>
 800d69a:	6823      	ldr	r3, [r4, #0]
 800d69c:	f043 0320 	orr.w	r3, r3, #32
 800d6a0:	6023      	str	r3, [r4, #0]
 800d6a2:	2378      	movs	r3, #120	; 0x78
 800d6a4:	4828      	ldr	r0, [pc, #160]	; (800d748 <_printf_i+0x248>)
 800d6a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d6aa:	e7e3      	b.n	800d674 <_printf_i+0x174>
 800d6ac:	0659      	lsls	r1, r3, #25
 800d6ae:	bf48      	it	mi
 800d6b0:	b2b6      	uxthmi	r6, r6
 800d6b2:	e7e6      	b.n	800d682 <_printf_i+0x182>
 800d6b4:	4615      	mov	r5, r2
 800d6b6:	e7bb      	b.n	800d630 <_printf_i+0x130>
 800d6b8:	682b      	ldr	r3, [r5, #0]
 800d6ba:	6826      	ldr	r6, [r4, #0]
 800d6bc:	6961      	ldr	r1, [r4, #20]
 800d6be:	1d18      	adds	r0, r3, #4
 800d6c0:	6028      	str	r0, [r5, #0]
 800d6c2:	0635      	lsls	r5, r6, #24
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	d501      	bpl.n	800d6cc <_printf_i+0x1cc>
 800d6c8:	6019      	str	r1, [r3, #0]
 800d6ca:	e002      	b.n	800d6d2 <_printf_i+0x1d2>
 800d6cc:	0670      	lsls	r0, r6, #25
 800d6ce:	d5fb      	bpl.n	800d6c8 <_printf_i+0x1c8>
 800d6d0:	8019      	strh	r1, [r3, #0]
 800d6d2:	2300      	movs	r3, #0
 800d6d4:	6123      	str	r3, [r4, #16]
 800d6d6:	4615      	mov	r5, r2
 800d6d8:	e7ba      	b.n	800d650 <_printf_i+0x150>
 800d6da:	682b      	ldr	r3, [r5, #0]
 800d6dc:	1d1a      	adds	r2, r3, #4
 800d6de:	602a      	str	r2, [r5, #0]
 800d6e0:	681d      	ldr	r5, [r3, #0]
 800d6e2:	6862      	ldr	r2, [r4, #4]
 800d6e4:	2100      	movs	r1, #0
 800d6e6:	4628      	mov	r0, r5
 800d6e8:	f7f2 fd82 	bl	80001f0 <memchr>
 800d6ec:	b108      	cbz	r0, 800d6f2 <_printf_i+0x1f2>
 800d6ee:	1b40      	subs	r0, r0, r5
 800d6f0:	6060      	str	r0, [r4, #4]
 800d6f2:	6863      	ldr	r3, [r4, #4]
 800d6f4:	6123      	str	r3, [r4, #16]
 800d6f6:	2300      	movs	r3, #0
 800d6f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d6fc:	e7a8      	b.n	800d650 <_printf_i+0x150>
 800d6fe:	6923      	ldr	r3, [r4, #16]
 800d700:	462a      	mov	r2, r5
 800d702:	4649      	mov	r1, r9
 800d704:	4640      	mov	r0, r8
 800d706:	47d0      	blx	sl
 800d708:	3001      	adds	r0, #1
 800d70a:	d0ab      	beq.n	800d664 <_printf_i+0x164>
 800d70c:	6823      	ldr	r3, [r4, #0]
 800d70e:	079b      	lsls	r3, r3, #30
 800d710:	d413      	bmi.n	800d73a <_printf_i+0x23a>
 800d712:	68e0      	ldr	r0, [r4, #12]
 800d714:	9b03      	ldr	r3, [sp, #12]
 800d716:	4298      	cmp	r0, r3
 800d718:	bfb8      	it	lt
 800d71a:	4618      	movlt	r0, r3
 800d71c:	e7a4      	b.n	800d668 <_printf_i+0x168>
 800d71e:	2301      	movs	r3, #1
 800d720:	4632      	mov	r2, r6
 800d722:	4649      	mov	r1, r9
 800d724:	4640      	mov	r0, r8
 800d726:	47d0      	blx	sl
 800d728:	3001      	adds	r0, #1
 800d72a:	d09b      	beq.n	800d664 <_printf_i+0x164>
 800d72c:	3501      	adds	r5, #1
 800d72e:	68e3      	ldr	r3, [r4, #12]
 800d730:	9903      	ldr	r1, [sp, #12]
 800d732:	1a5b      	subs	r3, r3, r1
 800d734:	42ab      	cmp	r3, r5
 800d736:	dcf2      	bgt.n	800d71e <_printf_i+0x21e>
 800d738:	e7eb      	b.n	800d712 <_printf_i+0x212>
 800d73a:	2500      	movs	r5, #0
 800d73c:	f104 0619 	add.w	r6, r4, #25
 800d740:	e7f5      	b.n	800d72e <_printf_i+0x22e>
 800d742:	bf00      	nop
 800d744:	0803d23e 	.word	0x0803d23e
 800d748:	0803d24f 	.word	0x0803d24f

0800d74c <siprintf>:
 800d74c:	b40e      	push	{r1, r2, r3}
 800d74e:	b500      	push	{lr}
 800d750:	b09c      	sub	sp, #112	; 0x70
 800d752:	ab1d      	add	r3, sp, #116	; 0x74
 800d754:	9002      	str	r0, [sp, #8]
 800d756:	9006      	str	r0, [sp, #24]
 800d758:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d75c:	4809      	ldr	r0, [pc, #36]	; (800d784 <siprintf+0x38>)
 800d75e:	9107      	str	r1, [sp, #28]
 800d760:	9104      	str	r1, [sp, #16]
 800d762:	4909      	ldr	r1, [pc, #36]	; (800d788 <siprintf+0x3c>)
 800d764:	f853 2b04 	ldr.w	r2, [r3], #4
 800d768:	9105      	str	r1, [sp, #20]
 800d76a:	6800      	ldr	r0, [r0, #0]
 800d76c:	9301      	str	r3, [sp, #4]
 800d76e:	a902      	add	r1, sp, #8
 800d770:	f001 fb88 	bl	800ee84 <_svfiprintf_r>
 800d774:	9b02      	ldr	r3, [sp, #8]
 800d776:	2200      	movs	r2, #0
 800d778:	701a      	strb	r2, [r3, #0]
 800d77a:	b01c      	add	sp, #112	; 0x70
 800d77c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d780:	b003      	add	sp, #12
 800d782:	4770      	bx	lr
 800d784:	20000250 	.word	0x20000250
 800d788:	ffff0208 	.word	0xffff0208

0800d78c <strncat>:
 800d78c:	b530      	push	{r4, r5, lr}
 800d78e:	4604      	mov	r4, r0
 800d790:	7825      	ldrb	r5, [r4, #0]
 800d792:	4623      	mov	r3, r4
 800d794:	3401      	adds	r4, #1
 800d796:	2d00      	cmp	r5, #0
 800d798:	d1fa      	bne.n	800d790 <strncat+0x4>
 800d79a:	3a01      	subs	r2, #1
 800d79c:	d304      	bcc.n	800d7a8 <strncat+0x1c>
 800d79e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d7a2:	f803 4b01 	strb.w	r4, [r3], #1
 800d7a6:	b904      	cbnz	r4, 800d7aa <strncat+0x1e>
 800d7a8:	bd30      	pop	{r4, r5, pc}
 800d7aa:	2a00      	cmp	r2, #0
 800d7ac:	d1f5      	bne.n	800d79a <strncat+0xe>
 800d7ae:	701a      	strb	r2, [r3, #0]
 800d7b0:	e7f3      	b.n	800d79a <strncat+0xe>

0800d7b2 <quorem>:
 800d7b2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7b6:	6903      	ldr	r3, [r0, #16]
 800d7b8:	690c      	ldr	r4, [r1, #16]
 800d7ba:	42a3      	cmp	r3, r4
 800d7bc:	4607      	mov	r7, r0
 800d7be:	f2c0 8081 	blt.w	800d8c4 <quorem+0x112>
 800d7c2:	3c01      	subs	r4, #1
 800d7c4:	f101 0814 	add.w	r8, r1, #20
 800d7c8:	f100 0514 	add.w	r5, r0, #20
 800d7cc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d7d0:	9301      	str	r3, [sp, #4]
 800d7d2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d7d6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d7da:	3301      	adds	r3, #1
 800d7dc:	429a      	cmp	r2, r3
 800d7de:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d7e2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d7e6:	fbb2 f6f3 	udiv	r6, r2, r3
 800d7ea:	d331      	bcc.n	800d850 <quorem+0x9e>
 800d7ec:	f04f 0e00 	mov.w	lr, #0
 800d7f0:	4640      	mov	r0, r8
 800d7f2:	46ac      	mov	ip, r5
 800d7f4:	46f2      	mov	sl, lr
 800d7f6:	f850 2b04 	ldr.w	r2, [r0], #4
 800d7fa:	b293      	uxth	r3, r2
 800d7fc:	fb06 e303 	mla	r3, r6, r3, lr
 800d800:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d804:	b29b      	uxth	r3, r3
 800d806:	ebaa 0303 	sub.w	r3, sl, r3
 800d80a:	f8dc a000 	ldr.w	sl, [ip]
 800d80e:	0c12      	lsrs	r2, r2, #16
 800d810:	fa13 f38a 	uxtah	r3, r3, sl
 800d814:	fb06 e202 	mla	r2, r6, r2, lr
 800d818:	9300      	str	r3, [sp, #0]
 800d81a:	9b00      	ldr	r3, [sp, #0]
 800d81c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d820:	b292      	uxth	r2, r2
 800d822:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d826:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d82a:	f8bd 3000 	ldrh.w	r3, [sp]
 800d82e:	4581      	cmp	r9, r0
 800d830:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d834:	f84c 3b04 	str.w	r3, [ip], #4
 800d838:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d83c:	d2db      	bcs.n	800d7f6 <quorem+0x44>
 800d83e:	f855 300b 	ldr.w	r3, [r5, fp]
 800d842:	b92b      	cbnz	r3, 800d850 <quorem+0x9e>
 800d844:	9b01      	ldr	r3, [sp, #4]
 800d846:	3b04      	subs	r3, #4
 800d848:	429d      	cmp	r5, r3
 800d84a:	461a      	mov	r2, r3
 800d84c:	d32e      	bcc.n	800d8ac <quorem+0xfa>
 800d84e:	613c      	str	r4, [r7, #16]
 800d850:	4638      	mov	r0, r7
 800d852:	f001 f8c3 	bl	800e9dc <__mcmp>
 800d856:	2800      	cmp	r0, #0
 800d858:	db24      	blt.n	800d8a4 <quorem+0xf2>
 800d85a:	3601      	adds	r6, #1
 800d85c:	4628      	mov	r0, r5
 800d85e:	f04f 0c00 	mov.w	ip, #0
 800d862:	f858 2b04 	ldr.w	r2, [r8], #4
 800d866:	f8d0 e000 	ldr.w	lr, [r0]
 800d86a:	b293      	uxth	r3, r2
 800d86c:	ebac 0303 	sub.w	r3, ip, r3
 800d870:	0c12      	lsrs	r2, r2, #16
 800d872:	fa13 f38e 	uxtah	r3, r3, lr
 800d876:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d87a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d87e:	b29b      	uxth	r3, r3
 800d880:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d884:	45c1      	cmp	r9, r8
 800d886:	f840 3b04 	str.w	r3, [r0], #4
 800d88a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d88e:	d2e8      	bcs.n	800d862 <quorem+0xb0>
 800d890:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d894:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d898:	b922      	cbnz	r2, 800d8a4 <quorem+0xf2>
 800d89a:	3b04      	subs	r3, #4
 800d89c:	429d      	cmp	r5, r3
 800d89e:	461a      	mov	r2, r3
 800d8a0:	d30a      	bcc.n	800d8b8 <quorem+0x106>
 800d8a2:	613c      	str	r4, [r7, #16]
 800d8a4:	4630      	mov	r0, r6
 800d8a6:	b003      	add	sp, #12
 800d8a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8ac:	6812      	ldr	r2, [r2, #0]
 800d8ae:	3b04      	subs	r3, #4
 800d8b0:	2a00      	cmp	r2, #0
 800d8b2:	d1cc      	bne.n	800d84e <quorem+0x9c>
 800d8b4:	3c01      	subs	r4, #1
 800d8b6:	e7c7      	b.n	800d848 <quorem+0x96>
 800d8b8:	6812      	ldr	r2, [r2, #0]
 800d8ba:	3b04      	subs	r3, #4
 800d8bc:	2a00      	cmp	r2, #0
 800d8be:	d1f0      	bne.n	800d8a2 <quorem+0xf0>
 800d8c0:	3c01      	subs	r4, #1
 800d8c2:	e7eb      	b.n	800d89c <quorem+0xea>
 800d8c4:	2000      	movs	r0, #0
 800d8c6:	e7ee      	b.n	800d8a6 <quorem+0xf4>

0800d8c8 <_dtoa_r>:
 800d8c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8cc:	ed2d 8b04 	vpush	{d8-d9}
 800d8d0:	ec57 6b10 	vmov	r6, r7, d0
 800d8d4:	b093      	sub	sp, #76	; 0x4c
 800d8d6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d8d8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d8dc:	9106      	str	r1, [sp, #24]
 800d8de:	ee10 aa10 	vmov	sl, s0
 800d8e2:	4604      	mov	r4, r0
 800d8e4:	9209      	str	r2, [sp, #36]	; 0x24
 800d8e6:	930c      	str	r3, [sp, #48]	; 0x30
 800d8e8:	46bb      	mov	fp, r7
 800d8ea:	b975      	cbnz	r5, 800d90a <_dtoa_r+0x42>
 800d8ec:	2010      	movs	r0, #16
 800d8ee:	f000 fddd 	bl	800e4ac <malloc>
 800d8f2:	4602      	mov	r2, r0
 800d8f4:	6260      	str	r0, [r4, #36]	; 0x24
 800d8f6:	b920      	cbnz	r0, 800d902 <_dtoa_r+0x3a>
 800d8f8:	4ba7      	ldr	r3, [pc, #668]	; (800db98 <_dtoa_r+0x2d0>)
 800d8fa:	21ea      	movs	r1, #234	; 0xea
 800d8fc:	48a7      	ldr	r0, [pc, #668]	; (800db9c <_dtoa_r+0x2d4>)
 800d8fe:	f001 fbd1 	bl	800f0a4 <__assert_func>
 800d902:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d906:	6005      	str	r5, [r0, #0]
 800d908:	60c5      	str	r5, [r0, #12]
 800d90a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d90c:	6819      	ldr	r1, [r3, #0]
 800d90e:	b151      	cbz	r1, 800d926 <_dtoa_r+0x5e>
 800d910:	685a      	ldr	r2, [r3, #4]
 800d912:	604a      	str	r2, [r1, #4]
 800d914:	2301      	movs	r3, #1
 800d916:	4093      	lsls	r3, r2
 800d918:	608b      	str	r3, [r1, #8]
 800d91a:	4620      	mov	r0, r4
 800d91c:	f000 fe1c 	bl	800e558 <_Bfree>
 800d920:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d922:	2200      	movs	r2, #0
 800d924:	601a      	str	r2, [r3, #0]
 800d926:	1e3b      	subs	r3, r7, #0
 800d928:	bfaa      	itet	ge
 800d92a:	2300      	movge	r3, #0
 800d92c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800d930:	f8c8 3000 	strge.w	r3, [r8]
 800d934:	4b9a      	ldr	r3, [pc, #616]	; (800dba0 <_dtoa_r+0x2d8>)
 800d936:	bfbc      	itt	lt
 800d938:	2201      	movlt	r2, #1
 800d93a:	f8c8 2000 	strlt.w	r2, [r8]
 800d93e:	ea33 030b 	bics.w	r3, r3, fp
 800d942:	d11b      	bne.n	800d97c <_dtoa_r+0xb4>
 800d944:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d946:	f242 730f 	movw	r3, #9999	; 0x270f
 800d94a:	6013      	str	r3, [r2, #0]
 800d94c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d950:	4333      	orrs	r3, r6
 800d952:	f000 8592 	beq.w	800e47a <_dtoa_r+0xbb2>
 800d956:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d958:	b963      	cbnz	r3, 800d974 <_dtoa_r+0xac>
 800d95a:	4b92      	ldr	r3, [pc, #584]	; (800dba4 <_dtoa_r+0x2dc>)
 800d95c:	e022      	b.n	800d9a4 <_dtoa_r+0xdc>
 800d95e:	4b92      	ldr	r3, [pc, #584]	; (800dba8 <_dtoa_r+0x2e0>)
 800d960:	9301      	str	r3, [sp, #4]
 800d962:	3308      	adds	r3, #8
 800d964:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d966:	6013      	str	r3, [r2, #0]
 800d968:	9801      	ldr	r0, [sp, #4]
 800d96a:	b013      	add	sp, #76	; 0x4c
 800d96c:	ecbd 8b04 	vpop	{d8-d9}
 800d970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d974:	4b8b      	ldr	r3, [pc, #556]	; (800dba4 <_dtoa_r+0x2dc>)
 800d976:	9301      	str	r3, [sp, #4]
 800d978:	3303      	adds	r3, #3
 800d97a:	e7f3      	b.n	800d964 <_dtoa_r+0x9c>
 800d97c:	2200      	movs	r2, #0
 800d97e:	2300      	movs	r3, #0
 800d980:	4650      	mov	r0, sl
 800d982:	4659      	mov	r1, fp
 800d984:	f7f3 f8a8 	bl	8000ad8 <__aeabi_dcmpeq>
 800d988:	ec4b ab19 	vmov	d9, sl, fp
 800d98c:	4680      	mov	r8, r0
 800d98e:	b158      	cbz	r0, 800d9a8 <_dtoa_r+0xe0>
 800d990:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d992:	2301      	movs	r3, #1
 800d994:	6013      	str	r3, [r2, #0]
 800d996:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d998:	2b00      	cmp	r3, #0
 800d99a:	f000 856b 	beq.w	800e474 <_dtoa_r+0xbac>
 800d99e:	4883      	ldr	r0, [pc, #524]	; (800dbac <_dtoa_r+0x2e4>)
 800d9a0:	6018      	str	r0, [r3, #0]
 800d9a2:	1e43      	subs	r3, r0, #1
 800d9a4:	9301      	str	r3, [sp, #4]
 800d9a6:	e7df      	b.n	800d968 <_dtoa_r+0xa0>
 800d9a8:	ec4b ab10 	vmov	d0, sl, fp
 800d9ac:	aa10      	add	r2, sp, #64	; 0x40
 800d9ae:	a911      	add	r1, sp, #68	; 0x44
 800d9b0:	4620      	mov	r0, r4
 800d9b2:	f001 f8b9 	bl	800eb28 <__d2b>
 800d9b6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800d9ba:	ee08 0a10 	vmov	s16, r0
 800d9be:	2d00      	cmp	r5, #0
 800d9c0:	f000 8084 	beq.w	800dacc <_dtoa_r+0x204>
 800d9c4:	ee19 3a90 	vmov	r3, s19
 800d9c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d9cc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800d9d0:	4656      	mov	r6, sl
 800d9d2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800d9d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d9da:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800d9de:	4b74      	ldr	r3, [pc, #464]	; (800dbb0 <_dtoa_r+0x2e8>)
 800d9e0:	2200      	movs	r2, #0
 800d9e2:	4630      	mov	r0, r6
 800d9e4:	4639      	mov	r1, r7
 800d9e6:	f7f2 fc57 	bl	8000298 <__aeabi_dsub>
 800d9ea:	a365      	add	r3, pc, #404	; (adr r3, 800db80 <_dtoa_r+0x2b8>)
 800d9ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9f0:	f7f2 fe0a 	bl	8000608 <__aeabi_dmul>
 800d9f4:	a364      	add	r3, pc, #400	; (adr r3, 800db88 <_dtoa_r+0x2c0>)
 800d9f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9fa:	f7f2 fc4f 	bl	800029c <__adddf3>
 800d9fe:	4606      	mov	r6, r0
 800da00:	4628      	mov	r0, r5
 800da02:	460f      	mov	r7, r1
 800da04:	f7f2 fd96 	bl	8000534 <__aeabi_i2d>
 800da08:	a361      	add	r3, pc, #388	; (adr r3, 800db90 <_dtoa_r+0x2c8>)
 800da0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da0e:	f7f2 fdfb 	bl	8000608 <__aeabi_dmul>
 800da12:	4602      	mov	r2, r0
 800da14:	460b      	mov	r3, r1
 800da16:	4630      	mov	r0, r6
 800da18:	4639      	mov	r1, r7
 800da1a:	f7f2 fc3f 	bl	800029c <__adddf3>
 800da1e:	4606      	mov	r6, r0
 800da20:	460f      	mov	r7, r1
 800da22:	f7f3 f8a1 	bl	8000b68 <__aeabi_d2iz>
 800da26:	2200      	movs	r2, #0
 800da28:	9000      	str	r0, [sp, #0]
 800da2a:	2300      	movs	r3, #0
 800da2c:	4630      	mov	r0, r6
 800da2e:	4639      	mov	r1, r7
 800da30:	f7f3 f85c 	bl	8000aec <__aeabi_dcmplt>
 800da34:	b150      	cbz	r0, 800da4c <_dtoa_r+0x184>
 800da36:	9800      	ldr	r0, [sp, #0]
 800da38:	f7f2 fd7c 	bl	8000534 <__aeabi_i2d>
 800da3c:	4632      	mov	r2, r6
 800da3e:	463b      	mov	r3, r7
 800da40:	f7f3 f84a 	bl	8000ad8 <__aeabi_dcmpeq>
 800da44:	b910      	cbnz	r0, 800da4c <_dtoa_r+0x184>
 800da46:	9b00      	ldr	r3, [sp, #0]
 800da48:	3b01      	subs	r3, #1
 800da4a:	9300      	str	r3, [sp, #0]
 800da4c:	9b00      	ldr	r3, [sp, #0]
 800da4e:	2b16      	cmp	r3, #22
 800da50:	d85a      	bhi.n	800db08 <_dtoa_r+0x240>
 800da52:	9a00      	ldr	r2, [sp, #0]
 800da54:	4b57      	ldr	r3, [pc, #348]	; (800dbb4 <_dtoa_r+0x2ec>)
 800da56:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800da5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da5e:	ec51 0b19 	vmov	r0, r1, d9
 800da62:	f7f3 f843 	bl	8000aec <__aeabi_dcmplt>
 800da66:	2800      	cmp	r0, #0
 800da68:	d050      	beq.n	800db0c <_dtoa_r+0x244>
 800da6a:	9b00      	ldr	r3, [sp, #0]
 800da6c:	3b01      	subs	r3, #1
 800da6e:	9300      	str	r3, [sp, #0]
 800da70:	2300      	movs	r3, #0
 800da72:	930b      	str	r3, [sp, #44]	; 0x2c
 800da74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800da76:	1b5d      	subs	r5, r3, r5
 800da78:	1e6b      	subs	r3, r5, #1
 800da7a:	9305      	str	r3, [sp, #20]
 800da7c:	bf45      	ittet	mi
 800da7e:	f1c5 0301 	rsbmi	r3, r5, #1
 800da82:	9304      	strmi	r3, [sp, #16]
 800da84:	2300      	movpl	r3, #0
 800da86:	2300      	movmi	r3, #0
 800da88:	bf4c      	ite	mi
 800da8a:	9305      	strmi	r3, [sp, #20]
 800da8c:	9304      	strpl	r3, [sp, #16]
 800da8e:	9b00      	ldr	r3, [sp, #0]
 800da90:	2b00      	cmp	r3, #0
 800da92:	db3d      	blt.n	800db10 <_dtoa_r+0x248>
 800da94:	9b05      	ldr	r3, [sp, #20]
 800da96:	9a00      	ldr	r2, [sp, #0]
 800da98:	920a      	str	r2, [sp, #40]	; 0x28
 800da9a:	4413      	add	r3, r2
 800da9c:	9305      	str	r3, [sp, #20]
 800da9e:	2300      	movs	r3, #0
 800daa0:	9307      	str	r3, [sp, #28]
 800daa2:	9b06      	ldr	r3, [sp, #24]
 800daa4:	2b09      	cmp	r3, #9
 800daa6:	f200 8089 	bhi.w	800dbbc <_dtoa_r+0x2f4>
 800daaa:	2b05      	cmp	r3, #5
 800daac:	bfc4      	itt	gt
 800daae:	3b04      	subgt	r3, #4
 800dab0:	9306      	strgt	r3, [sp, #24]
 800dab2:	9b06      	ldr	r3, [sp, #24]
 800dab4:	f1a3 0302 	sub.w	r3, r3, #2
 800dab8:	bfcc      	ite	gt
 800daba:	2500      	movgt	r5, #0
 800dabc:	2501      	movle	r5, #1
 800dabe:	2b03      	cmp	r3, #3
 800dac0:	f200 8087 	bhi.w	800dbd2 <_dtoa_r+0x30a>
 800dac4:	e8df f003 	tbb	[pc, r3]
 800dac8:	59383a2d 	.word	0x59383a2d
 800dacc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800dad0:	441d      	add	r5, r3
 800dad2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800dad6:	2b20      	cmp	r3, #32
 800dad8:	bfc1      	itttt	gt
 800dada:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800dade:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800dae2:	fa0b f303 	lslgt.w	r3, fp, r3
 800dae6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800daea:	bfda      	itte	le
 800daec:	f1c3 0320 	rsble	r3, r3, #32
 800daf0:	fa06 f003 	lslle.w	r0, r6, r3
 800daf4:	4318      	orrgt	r0, r3
 800daf6:	f7f2 fd0d 	bl	8000514 <__aeabi_ui2d>
 800dafa:	2301      	movs	r3, #1
 800dafc:	4606      	mov	r6, r0
 800dafe:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800db02:	3d01      	subs	r5, #1
 800db04:	930e      	str	r3, [sp, #56]	; 0x38
 800db06:	e76a      	b.n	800d9de <_dtoa_r+0x116>
 800db08:	2301      	movs	r3, #1
 800db0a:	e7b2      	b.n	800da72 <_dtoa_r+0x1aa>
 800db0c:	900b      	str	r0, [sp, #44]	; 0x2c
 800db0e:	e7b1      	b.n	800da74 <_dtoa_r+0x1ac>
 800db10:	9b04      	ldr	r3, [sp, #16]
 800db12:	9a00      	ldr	r2, [sp, #0]
 800db14:	1a9b      	subs	r3, r3, r2
 800db16:	9304      	str	r3, [sp, #16]
 800db18:	4253      	negs	r3, r2
 800db1a:	9307      	str	r3, [sp, #28]
 800db1c:	2300      	movs	r3, #0
 800db1e:	930a      	str	r3, [sp, #40]	; 0x28
 800db20:	e7bf      	b.n	800daa2 <_dtoa_r+0x1da>
 800db22:	2300      	movs	r3, #0
 800db24:	9308      	str	r3, [sp, #32]
 800db26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db28:	2b00      	cmp	r3, #0
 800db2a:	dc55      	bgt.n	800dbd8 <_dtoa_r+0x310>
 800db2c:	2301      	movs	r3, #1
 800db2e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800db32:	461a      	mov	r2, r3
 800db34:	9209      	str	r2, [sp, #36]	; 0x24
 800db36:	e00c      	b.n	800db52 <_dtoa_r+0x28a>
 800db38:	2301      	movs	r3, #1
 800db3a:	e7f3      	b.n	800db24 <_dtoa_r+0x25c>
 800db3c:	2300      	movs	r3, #0
 800db3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800db40:	9308      	str	r3, [sp, #32]
 800db42:	9b00      	ldr	r3, [sp, #0]
 800db44:	4413      	add	r3, r2
 800db46:	9302      	str	r3, [sp, #8]
 800db48:	3301      	adds	r3, #1
 800db4a:	2b01      	cmp	r3, #1
 800db4c:	9303      	str	r3, [sp, #12]
 800db4e:	bfb8      	it	lt
 800db50:	2301      	movlt	r3, #1
 800db52:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800db54:	2200      	movs	r2, #0
 800db56:	6042      	str	r2, [r0, #4]
 800db58:	2204      	movs	r2, #4
 800db5a:	f102 0614 	add.w	r6, r2, #20
 800db5e:	429e      	cmp	r6, r3
 800db60:	6841      	ldr	r1, [r0, #4]
 800db62:	d93d      	bls.n	800dbe0 <_dtoa_r+0x318>
 800db64:	4620      	mov	r0, r4
 800db66:	f000 fcb7 	bl	800e4d8 <_Balloc>
 800db6a:	9001      	str	r0, [sp, #4]
 800db6c:	2800      	cmp	r0, #0
 800db6e:	d13b      	bne.n	800dbe8 <_dtoa_r+0x320>
 800db70:	4b11      	ldr	r3, [pc, #68]	; (800dbb8 <_dtoa_r+0x2f0>)
 800db72:	4602      	mov	r2, r0
 800db74:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800db78:	e6c0      	b.n	800d8fc <_dtoa_r+0x34>
 800db7a:	2301      	movs	r3, #1
 800db7c:	e7df      	b.n	800db3e <_dtoa_r+0x276>
 800db7e:	bf00      	nop
 800db80:	636f4361 	.word	0x636f4361
 800db84:	3fd287a7 	.word	0x3fd287a7
 800db88:	8b60c8b3 	.word	0x8b60c8b3
 800db8c:	3fc68a28 	.word	0x3fc68a28
 800db90:	509f79fb 	.word	0x509f79fb
 800db94:	3fd34413 	.word	0x3fd34413
 800db98:	0803d26d 	.word	0x0803d26d
 800db9c:	0803d284 	.word	0x0803d284
 800dba0:	7ff00000 	.word	0x7ff00000
 800dba4:	0803d269 	.word	0x0803d269
 800dba8:	0803d260 	.word	0x0803d260
 800dbac:	0803d23d 	.word	0x0803d23d
 800dbb0:	3ff80000 	.word	0x3ff80000
 800dbb4:	0803d378 	.word	0x0803d378
 800dbb8:	0803d2df 	.word	0x0803d2df
 800dbbc:	2501      	movs	r5, #1
 800dbbe:	2300      	movs	r3, #0
 800dbc0:	9306      	str	r3, [sp, #24]
 800dbc2:	9508      	str	r5, [sp, #32]
 800dbc4:	f04f 33ff 	mov.w	r3, #4294967295
 800dbc8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800dbcc:	2200      	movs	r2, #0
 800dbce:	2312      	movs	r3, #18
 800dbd0:	e7b0      	b.n	800db34 <_dtoa_r+0x26c>
 800dbd2:	2301      	movs	r3, #1
 800dbd4:	9308      	str	r3, [sp, #32]
 800dbd6:	e7f5      	b.n	800dbc4 <_dtoa_r+0x2fc>
 800dbd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dbda:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800dbde:	e7b8      	b.n	800db52 <_dtoa_r+0x28a>
 800dbe0:	3101      	adds	r1, #1
 800dbe2:	6041      	str	r1, [r0, #4]
 800dbe4:	0052      	lsls	r2, r2, #1
 800dbe6:	e7b8      	b.n	800db5a <_dtoa_r+0x292>
 800dbe8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dbea:	9a01      	ldr	r2, [sp, #4]
 800dbec:	601a      	str	r2, [r3, #0]
 800dbee:	9b03      	ldr	r3, [sp, #12]
 800dbf0:	2b0e      	cmp	r3, #14
 800dbf2:	f200 809d 	bhi.w	800dd30 <_dtoa_r+0x468>
 800dbf6:	2d00      	cmp	r5, #0
 800dbf8:	f000 809a 	beq.w	800dd30 <_dtoa_r+0x468>
 800dbfc:	9b00      	ldr	r3, [sp, #0]
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	dd32      	ble.n	800dc68 <_dtoa_r+0x3a0>
 800dc02:	4ab7      	ldr	r2, [pc, #732]	; (800dee0 <_dtoa_r+0x618>)
 800dc04:	f003 030f 	and.w	r3, r3, #15
 800dc08:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800dc0c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800dc10:	9b00      	ldr	r3, [sp, #0]
 800dc12:	05d8      	lsls	r0, r3, #23
 800dc14:	ea4f 1723 	mov.w	r7, r3, asr #4
 800dc18:	d516      	bpl.n	800dc48 <_dtoa_r+0x380>
 800dc1a:	4bb2      	ldr	r3, [pc, #712]	; (800dee4 <_dtoa_r+0x61c>)
 800dc1c:	ec51 0b19 	vmov	r0, r1, d9
 800dc20:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800dc24:	f7f2 fe1a 	bl	800085c <__aeabi_ddiv>
 800dc28:	f007 070f 	and.w	r7, r7, #15
 800dc2c:	4682      	mov	sl, r0
 800dc2e:	468b      	mov	fp, r1
 800dc30:	2503      	movs	r5, #3
 800dc32:	4eac      	ldr	r6, [pc, #688]	; (800dee4 <_dtoa_r+0x61c>)
 800dc34:	b957      	cbnz	r7, 800dc4c <_dtoa_r+0x384>
 800dc36:	4642      	mov	r2, r8
 800dc38:	464b      	mov	r3, r9
 800dc3a:	4650      	mov	r0, sl
 800dc3c:	4659      	mov	r1, fp
 800dc3e:	f7f2 fe0d 	bl	800085c <__aeabi_ddiv>
 800dc42:	4682      	mov	sl, r0
 800dc44:	468b      	mov	fp, r1
 800dc46:	e028      	b.n	800dc9a <_dtoa_r+0x3d2>
 800dc48:	2502      	movs	r5, #2
 800dc4a:	e7f2      	b.n	800dc32 <_dtoa_r+0x36a>
 800dc4c:	07f9      	lsls	r1, r7, #31
 800dc4e:	d508      	bpl.n	800dc62 <_dtoa_r+0x39a>
 800dc50:	4640      	mov	r0, r8
 800dc52:	4649      	mov	r1, r9
 800dc54:	e9d6 2300 	ldrd	r2, r3, [r6]
 800dc58:	f7f2 fcd6 	bl	8000608 <__aeabi_dmul>
 800dc5c:	3501      	adds	r5, #1
 800dc5e:	4680      	mov	r8, r0
 800dc60:	4689      	mov	r9, r1
 800dc62:	107f      	asrs	r7, r7, #1
 800dc64:	3608      	adds	r6, #8
 800dc66:	e7e5      	b.n	800dc34 <_dtoa_r+0x36c>
 800dc68:	f000 809b 	beq.w	800dda2 <_dtoa_r+0x4da>
 800dc6c:	9b00      	ldr	r3, [sp, #0]
 800dc6e:	4f9d      	ldr	r7, [pc, #628]	; (800dee4 <_dtoa_r+0x61c>)
 800dc70:	425e      	negs	r6, r3
 800dc72:	4b9b      	ldr	r3, [pc, #620]	; (800dee0 <_dtoa_r+0x618>)
 800dc74:	f006 020f 	and.w	r2, r6, #15
 800dc78:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dc7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc80:	ec51 0b19 	vmov	r0, r1, d9
 800dc84:	f7f2 fcc0 	bl	8000608 <__aeabi_dmul>
 800dc88:	1136      	asrs	r6, r6, #4
 800dc8a:	4682      	mov	sl, r0
 800dc8c:	468b      	mov	fp, r1
 800dc8e:	2300      	movs	r3, #0
 800dc90:	2502      	movs	r5, #2
 800dc92:	2e00      	cmp	r6, #0
 800dc94:	d17a      	bne.n	800dd8c <_dtoa_r+0x4c4>
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d1d3      	bne.n	800dc42 <_dtoa_r+0x37a>
 800dc9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	f000 8082 	beq.w	800dda6 <_dtoa_r+0x4de>
 800dca2:	4b91      	ldr	r3, [pc, #580]	; (800dee8 <_dtoa_r+0x620>)
 800dca4:	2200      	movs	r2, #0
 800dca6:	4650      	mov	r0, sl
 800dca8:	4659      	mov	r1, fp
 800dcaa:	f7f2 ff1f 	bl	8000aec <__aeabi_dcmplt>
 800dcae:	2800      	cmp	r0, #0
 800dcb0:	d079      	beq.n	800dda6 <_dtoa_r+0x4de>
 800dcb2:	9b03      	ldr	r3, [sp, #12]
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d076      	beq.n	800dda6 <_dtoa_r+0x4de>
 800dcb8:	9b02      	ldr	r3, [sp, #8]
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	dd36      	ble.n	800dd2c <_dtoa_r+0x464>
 800dcbe:	9b00      	ldr	r3, [sp, #0]
 800dcc0:	4650      	mov	r0, sl
 800dcc2:	4659      	mov	r1, fp
 800dcc4:	1e5f      	subs	r7, r3, #1
 800dcc6:	2200      	movs	r2, #0
 800dcc8:	4b88      	ldr	r3, [pc, #544]	; (800deec <_dtoa_r+0x624>)
 800dcca:	f7f2 fc9d 	bl	8000608 <__aeabi_dmul>
 800dcce:	9e02      	ldr	r6, [sp, #8]
 800dcd0:	4682      	mov	sl, r0
 800dcd2:	468b      	mov	fp, r1
 800dcd4:	3501      	adds	r5, #1
 800dcd6:	4628      	mov	r0, r5
 800dcd8:	f7f2 fc2c 	bl	8000534 <__aeabi_i2d>
 800dcdc:	4652      	mov	r2, sl
 800dcde:	465b      	mov	r3, fp
 800dce0:	f7f2 fc92 	bl	8000608 <__aeabi_dmul>
 800dce4:	4b82      	ldr	r3, [pc, #520]	; (800def0 <_dtoa_r+0x628>)
 800dce6:	2200      	movs	r2, #0
 800dce8:	f7f2 fad8 	bl	800029c <__adddf3>
 800dcec:	46d0      	mov	r8, sl
 800dcee:	46d9      	mov	r9, fp
 800dcf0:	4682      	mov	sl, r0
 800dcf2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800dcf6:	2e00      	cmp	r6, #0
 800dcf8:	d158      	bne.n	800ddac <_dtoa_r+0x4e4>
 800dcfa:	4b7e      	ldr	r3, [pc, #504]	; (800def4 <_dtoa_r+0x62c>)
 800dcfc:	2200      	movs	r2, #0
 800dcfe:	4640      	mov	r0, r8
 800dd00:	4649      	mov	r1, r9
 800dd02:	f7f2 fac9 	bl	8000298 <__aeabi_dsub>
 800dd06:	4652      	mov	r2, sl
 800dd08:	465b      	mov	r3, fp
 800dd0a:	4680      	mov	r8, r0
 800dd0c:	4689      	mov	r9, r1
 800dd0e:	f7f2 ff0b 	bl	8000b28 <__aeabi_dcmpgt>
 800dd12:	2800      	cmp	r0, #0
 800dd14:	f040 8295 	bne.w	800e242 <_dtoa_r+0x97a>
 800dd18:	4652      	mov	r2, sl
 800dd1a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800dd1e:	4640      	mov	r0, r8
 800dd20:	4649      	mov	r1, r9
 800dd22:	f7f2 fee3 	bl	8000aec <__aeabi_dcmplt>
 800dd26:	2800      	cmp	r0, #0
 800dd28:	f040 8289 	bne.w	800e23e <_dtoa_r+0x976>
 800dd2c:	ec5b ab19 	vmov	sl, fp, d9
 800dd30:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	f2c0 8148 	blt.w	800dfc8 <_dtoa_r+0x700>
 800dd38:	9a00      	ldr	r2, [sp, #0]
 800dd3a:	2a0e      	cmp	r2, #14
 800dd3c:	f300 8144 	bgt.w	800dfc8 <_dtoa_r+0x700>
 800dd40:	4b67      	ldr	r3, [pc, #412]	; (800dee0 <_dtoa_r+0x618>)
 800dd42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dd46:	e9d3 8900 	ldrd	r8, r9, [r3]
 800dd4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	f280 80d5 	bge.w	800defc <_dtoa_r+0x634>
 800dd52:	9b03      	ldr	r3, [sp, #12]
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	f300 80d1 	bgt.w	800defc <_dtoa_r+0x634>
 800dd5a:	f040 826f 	bne.w	800e23c <_dtoa_r+0x974>
 800dd5e:	4b65      	ldr	r3, [pc, #404]	; (800def4 <_dtoa_r+0x62c>)
 800dd60:	2200      	movs	r2, #0
 800dd62:	4640      	mov	r0, r8
 800dd64:	4649      	mov	r1, r9
 800dd66:	f7f2 fc4f 	bl	8000608 <__aeabi_dmul>
 800dd6a:	4652      	mov	r2, sl
 800dd6c:	465b      	mov	r3, fp
 800dd6e:	f7f2 fed1 	bl	8000b14 <__aeabi_dcmpge>
 800dd72:	9e03      	ldr	r6, [sp, #12]
 800dd74:	4637      	mov	r7, r6
 800dd76:	2800      	cmp	r0, #0
 800dd78:	f040 8245 	bne.w	800e206 <_dtoa_r+0x93e>
 800dd7c:	9d01      	ldr	r5, [sp, #4]
 800dd7e:	2331      	movs	r3, #49	; 0x31
 800dd80:	f805 3b01 	strb.w	r3, [r5], #1
 800dd84:	9b00      	ldr	r3, [sp, #0]
 800dd86:	3301      	adds	r3, #1
 800dd88:	9300      	str	r3, [sp, #0]
 800dd8a:	e240      	b.n	800e20e <_dtoa_r+0x946>
 800dd8c:	07f2      	lsls	r2, r6, #31
 800dd8e:	d505      	bpl.n	800dd9c <_dtoa_r+0x4d4>
 800dd90:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dd94:	f7f2 fc38 	bl	8000608 <__aeabi_dmul>
 800dd98:	3501      	adds	r5, #1
 800dd9a:	2301      	movs	r3, #1
 800dd9c:	1076      	asrs	r6, r6, #1
 800dd9e:	3708      	adds	r7, #8
 800dda0:	e777      	b.n	800dc92 <_dtoa_r+0x3ca>
 800dda2:	2502      	movs	r5, #2
 800dda4:	e779      	b.n	800dc9a <_dtoa_r+0x3d2>
 800dda6:	9f00      	ldr	r7, [sp, #0]
 800dda8:	9e03      	ldr	r6, [sp, #12]
 800ddaa:	e794      	b.n	800dcd6 <_dtoa_r+0x40e>
 800ddac:	9901      	ldr	r1, [sp, #4]
 800ddae:	4b4c      	ldr	r3, [pc, #304]	; (800dee0 <_dtoa_r+0x618>)
 800ddb0:	4431      	add	r1, r6
 800ddb2:	910d      	str	r1, [sp, #52]	; 0x34
 800ddb4:	9908      	ldr	r1, [sp, #32]
 800ddb6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ddba:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ddbe:	2900      	cmp	r1, #0
 800ddc0:	d043      	beq.n	800de4a <_dtoa_r+0x582>
 800ddc2:	494d      	ldr	r1, [pc, #308]	; (800def8 <_dtoa_r+0x630>)
 800ddc4:	2000      	movs	r0, #0
 800ddc6:	f7f2 fd49 	bl	800085c <__aeabi_ddiv>
 800ddca:	4652      	mov	r2, sl
 800ddcc:	465b      	mov	r3, fp
 800ddce:	f7f2 fa63 	bl	8000298 <__aeabi_dsub>
 800ddd2:	9d01      	ldr	r5, [sp, #4]
 800ddd4:	4682      	mov	sl, r0
 800ddd6:	468b      	mov	fp, r1
 800ddd8:	4649      	mov	r1, r9
 800ddda:	4640      	mov	r0, r8
 800dddc:	f7f2 fec4 	bl	8000b68 <__aeabi_d2iz>
 800dde0:	4606      	mov	r6, r0
 800dde2:	f7f2 fba7 	bl	8000534 <__aeabi_i2d>
 800dde6:	4602      	mov	r2, r0
 800dde8:	460b      	mov	r3, r1
 800ddea:	4640      	mov	r0, r8
 800ddec:	4649      	mov	r1, r9
 800ddee:	f7f2 fa53 	bl	8000298 <__aeabi_dsub>
 800ddf2:	3630      	adds	r6, #48	; 0x30
 800ddf4:	f805 6b01 	strb.w	r6, [r5], #1
 800ddf8:	4652      	mov	r2, sl
 800ddfa:	465b      	mov	r3, fp
 800ddfc:	4680      	mov	r8, r0
 800ddfe:	4689      	mov	r9, r1
 800de00:	f7f2 fe74 	bl	8000aec <__aeabi_dcmplt>
 800de04:	2800      	cmp	r0, #0
 800de06:	d163      	bne.n	800ded0 <_dtoa_r+0x608>
 800de08:	4642      	mov	r2, r8
 800de0a:	464b      	mov	r3, r9
 800de0c:	4936      	ldr	r1, [pc, #216]	; (800dee8 <_dtoa_r+0x620>)
 800de0e:	2000      	movs	r0, #0
 800de10:	f7f2 fa42 	bl	8000298 <__aeabi_dsub>
 800de14:	4652      	mov	r2, sl
 800de16:	465b      	mov	r3, fp
 800de18:	f7f2 fe68 	bl	8000aec <__aeabi_dcmplt>
 800de1c:	2800      	cmp	r0, #0
 800de1e:	f040 80b5 	bne.w	800df8c <_dtoa_r+0x6c4>
 800de22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800de24:	429d      	cmp	r5, r3
 800de26:	d081      	beq.n	800dd2c <_dtoa_r+0x464>
 800de28:	4b30      	ldr	r3, [pc, #192]	; (800deec <_dtoa_r+0x624>)
 800de2a:	2200      	movs	r2, #0
 800de2c:	4650      	mov	r0, sl
 800de2e:	4659      	mov	r1, fp
 800de30:	f7f2 fbea 	bl	8000608 <__aeabi_dmul>
 800de34:	4b2d      	ldr	r3, [pc, #180]	; (800deec <_dtoa_r+0x624>)
 800de36:	4682      	mov	sl, r0
 800de38:	468b      	mov	fp, r1
 800de3a:	4640      	mov	r0, r8
 800de3c:	4649      	mov	r1, r9
 800de3e:	2200      	movs	r2, #0
 800de40:	f7f2 fbe2 	bl	8000608 <__aeabi_dmul>
 800de44:	4680      	mov	r8, r0
 800de46:	4689      	mov	r9, r1
 800de48:	e7c6      	b.n	800ddd8 <_dtoa_r+0x510>
 800de4a:	4650      	mov	r0, sl
 800de4c:	4659      	mov	r1, fp
 800de4e:	f7f2 fbdb 	bl	8000608 <__aeabi_dmul>
 800de52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800de54:	9d01      	ldr	r5, [sp, #4]
 800de56:	930f      	str	r3, [sp, #60]	; 0x3c
 800de58:	4682      	mov	sl, r0
 800de5a:	468b      	mov	fp, r1
 800de5c:	4649      	mov	r1, r9
 800de5e:	4640      	mov	r0, r8
 800de60:	f7f2 fe82 	bl	8000b68 <__aeabi_d2iz>
 800de64:	4606      	mov	r6, r0
 800de66:	f7f2 fb65 	bl	8000534 <__aeabi_i2d>
 800de6a:	3630      	adds	r6, #48	; 0x30
 800de6c:	4602      	mov	r2, r0
 800de6e:	460b      	mov	r3, r1
 800de70:	4640      	mov	r0, r8
 800de72:	4649      	mov	r1, r9
 800de74:	f7f2 fa10 	bl	8000298 <__aeabi_dsub>
 800de78:	f805 6b01 	strb.w	r6, [r5], #1
 800de7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800de7e:	429d      	cmp	r5, r3
 800de80:	4680      	mov	r8, r0
 800de82:	4689      	mov	r9, r1
 800de84:	f04f 0200 	mov.w	r2, #0
 800de88:	d124      	bne.n	800ded4 <_dtoa_r+0x60c>
 800de8a:	4b1b      	ldr	r3, [pc, #108]	; (800def8 <_dtoa_r+0x630>)
 800de8c:	4650      	mov	r0, sl
 800de8e:	4659      	mov	r1, fp
 800de90:	f7f2 fa04 	bl	800029c <__adddf3>
 800de94:	4602      	mov	r2, r0
 800de96:	460b      	mov	r3, r1
 800de98:	4640      	mov	r0, r8
 800de9a:	4649      	mov	r1, r9
 800de9c:	f7f2 fe44 	bl	8000b28 <__aeabi_dcmpgt>
 800dea0:	2800      	cmp	r0, #0
 800dea2:	d173      	bne.n	800df8c <_dtoa_r+0x6c4>
 800dea4:	4652      	mov	r2, sl
 800dea6:	465b      	mov	r3, fp
 800dea8:	4913      	ldr	r1, [pc, #76]	; (800def8 <_dtoa_r+0x630>)
 800deaa:	2000      	movs	r0, #0
 800deac:	f7f2 f9f4 	bl	8000298 <__aeabi_dsub>
 800deb0:	4602      	mov	r2, r0
 800deb2:	460b      	mov	r3, r1
 800deb4:	4640      	mov	r0, r8
 800deb6:	4649      	mov	r1, r9
 800deb8:	f7f2 fe18 	bl	8000aec <__aeabi_dcmplt>
 800debc:	2800      	cmp	r0, #0
 800debe:	f43f af35 	beq.w	800dd2c <_dtoa_r+0x464>
 800dec2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800dec4:	1e6b      	subs	r3, r5, #1
 800dec6:	930f      	str	r3, [sp, #60]	; 0x3c
 800dec8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800decc:	2b30      	cmp	r3, #48	; 0x30
 800dece:	d0f8      	beq.n	800dec2 <_dtoa_r+0x5fa>
 800ded0:	9700      	str	r7, [sp, #0]
 800ded2:	e049      	b.n	800df68 <_dtoa_r+0x6a0>
 800ded4:	4b05      	ldr	r3, [pc, #20]	; (800deec <_dtoa_r+0x624>)
 800ded6:	f7f2 fb97 	bl	8000608 <__aeabi_dmul>
 800deda:	4680      	mov	r8, r0
 800dedc:	4689      	mov	r9, r1
 800dede:	e7bd      	b.n	800de5c <_dtoa_r+0x594>
 800dee0:	0803d378 	.word	0x0803d378
 800dee4:	0803d350 	.word	0x0803d350
 800dee8:	3ff00000 	.word	0x3ff00000
 800deec:	40240000 	.word	0x40240000
 800def0:	401c0000 	.word	0x401c0000
 800def4:	40140000 	.word	0x40140000
 800def8:	3fe00000 	.word	0x3fe00000
 800defc:	9d01      	ldr	r5, [sp, #4]
 800defe:	4656      	mov	r6, sl
 800df00:	465f      	mov	r7, fp
 800df02:	4642      	mov	r2, r8
 800df04:	464b      	mov	r3, r9
 800df06:	4630      	mov	r0, r6
 800df08:	4639      	mov	r1, r7
 800df0a:	f7f2 fca7 	bl	800085c <__aeabi_ddiv>
 800df0e:	f7f2 fe2b 	bl	8000b68 <__aeabi_d2iz>
 800df12:	4682      	mov	sl, r0
 800df14:	f7f2 fb0e 	bl	8000534 <__aeabi_i2d>
 800df18:	4642      	mov	r2, r8
 800df1a:	464b      	mov	r3, r9
 800df1c:	f7f2 fb74 	bl	8000608 <__aeabi_dmul>
 800df20:	4602      	mov	r2, r0
 800df22:	460b      	mov	r3, r1
 800df24:	4630      	mov	r0, r6
 800df26:	4639      	mov	r1, r7
 800df28:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800df2c:	f7f2 f9b4 	bl	8000298 <__aeabi_dsub>
 800df30:	f805 6b01 	strb.w	r6, [r5], #1
 800df34:	9e01      	ldr	r6, [sp, #4]
 800df36:	9f03      	ldr	r7, [sp, #12]
 800df38:	1bae      	subs	r6, r5, r6
 800df3a:	42b7      	cmp	r7, r6
 800df3c:	4602      	mov	r2, r0
 800df3e:	460b      	mov	r3, r1
 800df40:	d135      	bne.n	800dfae <_dtoa_r+0x6e6>
 800df42:	f7f2 f9ab 	bl	800029c <__adddf3>
 800df46:	4642      	mov	r2, r8
 800df48:	464b      	mov	r3, r9
 800df4a:	4606      	mov	r6, r0
 800df4c:	460f      	mov	r7, r1
 800df4e:	f7f2 fdeb 	bl	8000b28 <__aeabi_dcmpgt>
 800df52:	b9d0      	cbnz	r0, 800df8a <_dtoa_r+0x6c2>
 800df54:	4642      	mov	r2, r8
 800df56:	464b      	mov	r3, r9
 800df58:	4630      	mov	r0, r6
 800df5a:	4639      	mov	r1, r7
 800df5c:	f7f2 fdbc 	bl	8000ad8 <__aeabi_dcmpeq>
 800df60:	b110      	cbz	r0, 800df68 <_dtoa_r+0x6a0>
 800df62:	f01a 0f01 	tst.w	sl, #1
 800df66:	d110      	bne.n	800df8a <_dtoa_r+0x6c2>
 800df68:	4620      	mov	r0, r4
 800df6a:	ee18 1a10 	vmov	r1, s16
 800df6e:	f000 faf3 	bl	800e558 <_Bfree>
 800df72:	2300      	movs	r3, #0
 800df74:	9800      	ldr	r0, [sp, #0]
 800df76:	702b      	strb	r3, [r5, #0]
 800df78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800df7a:	3001      	adds	r0, #1
 800df7c:	6018      	str	r0, [r3, #0]
 800df7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800df80:	2b00      	cmp	r3, #0
 800df82:	f43f acf1 	beq.w	800d968 <_dtoa_r+0xa0>
 800df86:	601d      	str	r5, [r3, #0]
 800df88:	e4ee      	b.n	800d968 <_dtoa_r+0xa0>
 800df8a:	9f00      	ldr	r7, [sp, #0]
 800df8c:	462b      	mov	r3, r5
 800df8e:	461d      	mov	r5, r3
 800df90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800df94:	2a39      	cmp	r2, #57	; 0x39
 800df96:	d106      	bne.n	800dfa6 <_dtoa_r+0x6de>
 800df98:	9a01      	ldr	r2, [sp, #4]
 800df9a:	429a      	cmp	r2, r3
 800df9c:	d1f7      	bne.n	800df8e <_dtoa_r+0x6c6>
 800df9e:	9901      	ldr	r1, [sp, #4]
 800dfa0:	2230      	movs	r2, #48	; 0x30
 800dfa2:	3701      	adds	r7, #1
 800dfa4:	700a      	strb	r2, [r1, #0]
 800dfa6:	781a      	ldrb	r2, [r3, #0]
 800dfa8:	3201      	adds	r2, #1
 800dfaa:	701a      	strb	r2, [r3, #0]
 800dfac:	e790      	b.n	800ded0 <_dtoa_r+0x608>
 800dfae:	4ba6      	ldr	r3, [pc, #664]	; (800e248 <_dtoa_r+0x980>)
 800dfb0:	2200      	movs	r2, #0
 800dfb2:	f7f2 fb29 	bl	8000608 <__aeabi_dmul>
 800dfb6:	2200      	movs	r2, #0
 800dfb8:	2300      	movs	r3, #0
 800dfba:	4606      	mov	r6, r0
 800dfbc:	460f      	mov	r7, r1
 800dfbe:	f7f2 fd8b 	bl	8000ad8 <__aeabi_dcmpeq>
 800dfc2:	2800      	cmp	r0, #0
 800dfc4:	d09d      	beq.n	800df02 <_dtoa_r+0x63a>
 800dfc6:	e7cf      	b.n	800df68 <_dtoa_r+0x6a0>
 800dfc8:	9a08      	ldr	r2, [sp, #32]
 800dfca:	2a00      	cmp	r2, #0
 800dfcc:	f000 80d7 	beq.w	800e17e <_dtoa_r+0x8b6>
 800dfd0:	9a06      	ldr	r2, [sp, #24]
 800dfd2:	2a01      	cmp	r2, #1
 800dfd4:	f300 80ba 	bgt.w	800e14c <_dtoa_r+0x884>
 800dfd8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dfda:	2a00      	cmp	r2, #0
 800dfdc:	f000 80b2 	beq.w	800e144 <_dtoa_r+0x87c>
 800dfe0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800dfe4:	9e07      	ldr	r6, [sp, #28]
 800dfe6:	9d04      	ldr	r5, [sp, #16]
 800dfe8:	9a04      	ldr	r2, [sp, #16]
 800dfea:	441a      	add	r2, r3
 800dfec:	9204      	str	r2, [sp, #16]
 800dfee:	9a05      	ldr	r2, [sp, #20]
 800dff0:	2101      	movs	r1, #1
 800dff2:	441a      	add	r2, r3
 800dff4:	4620      	mov	r0, r4
 800dff6:	9205      	str	r2, [sp, #20]
 800dff8:	f000 fb66 	bl	800e6c8 <__i2b>
 800dffc:	4607      	mov	r7, r0
 800dffe:	2d00      	cmp	r5, #0
 800e000:	dd0c      	ble.n	800e01c <_dtoa_r+0x754>
 800e002:	9b05      	ldr	r3, [sp, #20]
 800e004:	2b00      	cmp	r3, #0
 800e006:	dd09      	ble.n	800e01c <_dtoa_r+0x754>
 800e008:	42ab      	cmp	r3, r5
 800e00a:	9a04      	ldr	r2, [sp, #16]
 800e00c:	bfa8      	it	ge
 800e00e:	462b      	movge	r3, r5
 800e010:	1ad2      	subs	r2, r2, r3
 800e012:	9204      	str	r2, [sp, #16]
 800e014:	9a05      	ldr	r2, [sp, #20]
 800e016:	1aed      	subs	r5, r5, r3
 800e018:	1ad3      	subs	r3, r2, r3
 800e01a:	9305      	str	r3, [sp, #20]
 800e01c:	9b07      	ldr	r3, [sp, #28]
 800e01e:	b31b      	cbz	r3, 800e068 <_dtoa_r+0x7a0>
 800e020:	9b08      	ldr	r3, [sp, #32]
 800e022:	2b00      	cmp	r3, #0
 800e024:	f000 80af 	beq.w	800e186 <_dtoa_r+0x8be>
 800e028:	2e00      	cmp	r6, #0
 800e02a:	dd13      	ble.n	800e054 <_dtoa_r+0x78c>
 800e02c:	4639      	mov	r1, r7
 800e02e:	4632      	mov	r2, r6
 800e030:	4620      	mov	r0, r4
 800e032:	f000 fc09 	bl	800e848 <__pow5mult>
 800e036:	ee18 2a10 	vmov	r2, s16
 800e03a:	4601      	mov	r1, r0
 800e03c:	4607      	mov	r7, r0
 800e03e:	4620      	mov	r0, r4
 800e040:	f000 fb58 	bl	800e6f4 <__multiply>
 800e044:	ee18 1a10 	vmov	r1, s16
 800e048:	4680      	mov	r8, r0
 800e04a:	4620      	mov	r0, r4
 800e04c:	f000 fa84 	bl	800e558 <_Bfree>
 800e050:	ee08 8a10 	vmov	s16, r8
 800e054:	9b07      	ldr	r3, [sp, #28]
 800e056:	1b9a      	subs	r2, r3, r6
 800e058:	d006      	beq.n	800e068 <_dtoa_r+0x7a0>
 800e05a:	ee18 1a10 	vmov	r1, s16
 800e05e:	4620      	mov	r0, r4
 800e060:	f000 fbf2 	bl	800e848 <__pow5mult>
 800e064:	ee08 0a10 	vmov	s16, r0
 800e068:	2101      	movs	r1, #1
 800e06a:	4620      	mov	r0, r4
 800e06c:	f000 fb2c 	bl	800e6c8 <__i2b>
 800e070:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e072:	2b00      	cmp	r3, #0
 800e074:	4606      	mov	r6, r0
 800e076:	f340 8088 	ble.w	800e18a <_dtoa_r+0x8c2>
 800e07a:	461a      	mov	r2, r3
 800e07c:	4601      	mov	r1, r0
 800e07e:	4620      	mov	r0, r4
 800e080:	f000 fbe2 	bl	800e848 <__pow5mult>
 800e084:	9b06      	ldr	r3, [sp, #24]
 800e086:	2b01      	cmp	r3, #1
 800e088:	4606      	mov	r6, r0
 800e08a:	f340 8081 	ble.w	800e190 <_dtoa_r+0x8c8>
 800e08e:	f04f 0800 	mov.w	r8, #0
 800e092:	6933      	ldr	r3, [r6, #16]
 800e094:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e098:	6918      	ldr	r0, [r3, #16]
 800e09a:	f000 fac5 	bl	800e628 <__hi0bits>
 800e09e:	f1c0 0020 	rsb	r0, r0, #32
 800e0a2:	9b05      	ldr	r3, [sp, #20]
 800e0a4:	4418      	add	r0, r3
 800e0a6:	f010 001f 	ands.w	r0, r0, #31
 800e0aa:	f000 8092 	beq.w	800e1d2 <_dtoa_r+0x90a>
 800e0ae:	f1c0 0320 	rsb	r3, r0, #32
 800e0b2:	2b04      	cmp	r3, #4
 800e0b4:	f340 808a 	ble.w	800e1cc <_dtoa_r+0x904>
 800e0b8:	f1c0 001c 	rsb	r0, r0, #28
 800e0bc:	9b04      	ldr	r3, [sp, #16]
 800e0be:	4403      	add	r3, r0
 800e0c0:	9304      	str	r3, [sp, #16]
 800e0c2:	9b05      	ldr	r3, [sp, #20]
 800e0c4:	4403      	add	r3, r0
 800e0c6:	4405      	add	r5, r0
 800e0c8:	9305      	str	r3, [sp, #20]
 800e0ca:	9b04      	ldr	r3, [sp, #16]
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	dd07      	ble.n	800e0e0 <_dtoa_r+0x818>
 800e0d0:	ee18 1a10 	vmov	r1, s16
 800e0d4:	461a      	mov	r2, r3
 800e0d6:	4620      	mov	r0, r4
 800e0d8:	f000 fc10 	bl	800e8fc <__lshift>
 800e0dc:	ee08 0a10 	vmov	s16, r0
 800e0e0:	9b05      	ldr	r3, [sp, #20]
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	dd05      	ble.n	800e0f2 <_dtoa_r+0x82a>
 800e0e6:	4631      	mov	r1, r6
 800e0e8:	461a      	mov	r2, r3
 800e0ea:	4620      	mov	r0, r4
 800e0ec:	f000 fc06 	bl	800e8fc <__lshift>
 800e0f0:	4606      	mov	r6, r0
 800e0f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d06e      	beq.n	800e1d6 <_dtoa_r+0x90e>
 800e0f8:	ee18 0a10 	vmov	r0, s16
 800e0fc:	4631      	mov	r1, r6
 800e0fe:	f000 fc6d 	bl	800e9dc <__mcmp>
 800e102:	2800      	cmp	r0, #0
 800e104:	da67      	bge.n	800e1d6 <_dtoa_r+0x90e>
 800e106:	9b00      	ldr	r3, [sp, #0]
 800e108:	3b01      	subs	r3, #1
 800e10a:	ee18 1a10 	vmov	r1, s16
 800e10e:	9300      	str	r3, [sp, #0]
 800e110:	220a      	movs	r2, #10
 800e112:	2300      	movs	r3, #0
 800e114:	4620      	mov	r0, r4
 800e116:	f000 fa41 	bl	800e59c <__multadd>
 800e11a:	9b08      	ldr	r3, [sp, #32]
 800e11c:	ee08 0a10 	vmov	s16, r0
 800e120:	2b00      	cmp	r3, #0
 800e122:	f000 81b1 	beq.w	800e488 <_dtoa_r+0xbc0>
 800e126:	2300      	movs	r3, #0
 800e128:	4639      	mov	r1, r7
 800e12a:	220a      	movs	r2, #10
 800e12c:	4620      	mov	r0, r4
 800e12e:	f000 fa35 	bl	800e59c <__multadd>
 800e132:	9b02      	ldr	r3, [sp, #8]
 800e134:	2b00      	cmp	r3, #0
 800e136:	4607      	mov	r7, r0
 800e138:	f300 808e 	bgt.w	800e258 <_dtoa_r+0x990>
 800e13c:	9b06      	ldr	r3, [sp, #24]
 800e13e:	2b02      	cmp	r3, #2
 800e140:	dc51      	bgt.n	800e1e6 <_dtoa_r+0x91e>
 800e142:	e089      	b.n	800e258 <_dtoa_r+0x990>
 800e144:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e146:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e14a:	e74b      	b.n	800dfe4 <_dtoa_r+0x71c>
 800e14c:	9b03      	ldr	r3, [sp, #12]
 800e14e:	1e5e      	subs	r6, r3, #1
 800e150:	9b07      	ldr	r3, [sp, #28]
 800e152:	42b3      	cmp	r3, r6
 800e154:	bfbf      	itttt	lt
 800e156:	9b07      	ldrlt	r3, [sp, #28]
 800e158:	9607      	strlt	r6, [sp, #28]
 800e15a:	1af2      	sublt	r2, r6, r3
 800e15c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800e15e:	bfb6      	itet	lt
 800e160:	189b      	addlt	r3, r3, r2
 800e162:	1b9e      	subge	r6, r3, r6
 800e164:	930a      	strlt	r3, [sp, #40]	; 0x28
 800e166:	9b03      	ldr	r3, [sp, #12]
 800e168:	bfb8      	it	lt
 800e16a:	2600      	movlt	r6, #0
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	bfb7      	itett	lt
 800e170:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800e174:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800e178:	1a9d      	sublt	r5, r3, r2
 800e17a:	2300      	movlt	r3, #0
 800e17c:	e734      	b.n	800dfe8 <_dtoa_r+0x720>
 800e17e:	9e07      	ldr	r6, [sp, #28]
 800e180:	9d04      	ldr	r5, [sp, #16]
 800e182:	9f08      	ldr	r7, [sp, #32]
 800e184:	e73b      	b.n	800dffe <_dtoa_r+0x736>
 800e186:	9a07      	ldr	r2, [sp, #28]
 800e188:	e767      	b.n	800e05a <_dtoa_r+0x792>
 800e18a:	9b06      	ldr	r3, [sp, #24]
 800e18c:	2b01      	cmp	r3, #1
 800e18e:	dc18      	bgt.n	800e1c2 <_dtoa_r+0x8fa>
 800e190:	f1ba 0f00 	cmp.w	sl, #0
 800e194:	d115      	bne.n	800e1c2 <_dtoa_r+0x8fa>
 800e196:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e19a:	b993      	cbnz	r3, 800e1c2 <_dtoa_r+0x8fa>
 800e19c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e1a0:	0d1b      	lsrs	r3, r3, #20
 800e1a2:	051b      	lsls	r3, r3, #20
 800e1a4:	b183      	cbz	r3, 800e1c8 <_dtoa_r+0x900>
 800e1a6:	9b04      	ldr	r3, [sp, #16]
 800e1a8:	3301      	adds	r3, #1
 800e1aa:	9304      	str	r3, [sp, #16]
 800e1ac:	9b05      	ldr	r3, [sp, #20]
 800e1ae:	3301      	adds	r3, #1
 800e1b0:	9305      	str	r3, [sp, #20]
 800e1b2:	f04f 0801 	mov.w	r8, #1
 800e1b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	f47f af6a 	bne.w	800e092 <_dtoa_r+0x7ca>
 800e1be:	2001      	movs	r0, #1
 800e1c0:	e76f      	b.n	800e0a2 <_dtoa_r+0x7da>
 800e1c2:	f04f 0800 	mov.w	r8, #0
 800e1c6:	e7f6      	b.n	800e1b6 <_dtoa_r+0x8ee>
 800e1c8:	4698      	mov	r8, r3
 800e1ca:	e7f4      	b.n	800e1b6 <_dtoa_r+0x8ee>
 800e1cc:	f43f af7d 	beq.w	800e0ca <_dtoa_r+0x802>
 800e1d0:	4618      	mov	r0, r3
 800e1d2:	301c      	adds	r0, #28
 800e1d4:	e772      	b.n	800e0bc <_dtoa_r+0x7f4>
 800e1d6:	9b03      	ldr	r3, [sp, #12]
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	dc37      	bgt.n	800e24c <_dtoa_r+0x984>
 800e1dc:	9b06      	ldr	r3, [sp, #24]
 800e1de:	2b02      	cmp	r3, #2
 800e1e0:	dd34      	ble.n	800e24c <_dtoa_r+0x984>
 800e1e2:	9b03      	ldr	r3, [sp, #12]
 800e1e4:	9302      	str	r3, [sp, #8]
 800e1e6:	9b02      	ldr	r3, [sp, #8]
 800e1e8:	b96b      	cbnz	r3, 800e206 <_dtoa_r+0x93e>
 800e1ea:	4631      	mov	r1, r6
 800e1ec:	2205      	movs	r2, #5
 800e1ee:	4620      	mov	r0, r4
 800e1f0:	f000 f9d4 	bl	800e59c <__multadd>
 800e1f4:	4601      	mov	r1, r0
 800e1f6:	4606      	mov	r6, r0
 800e1f8:	ee18 0a10 	vmov	r0, s16
 800e1fc:	f000 fbee 	bl	800e9dc <__mcmp>
 800e200:	2800      	cmp	r0, #0
 800e202:	f73f adbb 	bgt.w	800dd7c <_dtoa_r+0x4b4>
 800e206:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e208:	9d01      	ldr	r5, [sp, #4]
 800e20a:	43db      	mvns	r3, r3
 800e20c:	9300      	str	r3, [sp, #0]
 800e20e:	f04f 0800 	mov.w	r8, #0
 800e212:	4631      	mov	r1, r6
 800e214:	4620      	mov	r0, r4
 800e216:	f000 f99f 	bl	800e558 <_Bfree>
 800e21a:	2f00      	cmp	r7, #0
 800e21c:	f43f aea4 	beq.w	800df68 <_dtoa_r+0x6a0>
 800e220:	f1b8 0f00 	cmp.w	r8, #0
 800e224:	d005      	beq.n	800e232 <_dtoa_r+0x96a>
 800e226:	45b8      	cmp	r8, r7
 800e228:	d003      	beq.n	800e232 <_dtoa_r+0x96a>
 800e22a:	4641      	mov	r1, r8
 800e22c:	4620      	mov	r0, r4
 800e22e:	f000 f993 	bl	800e558 <_Bfree>
 800e232:	4639      	mov	r1, r7
 800e234:	4620      	mov	r0, r4
 800e236:	f000 f98f 	bl	800e558 <_Bfree>
 800e23a:	e695      	b.n	800df68 <_dtoa_r+0x6a0>
 800e23c:	2600      	movs	r6, #0
 800e23e:	4637      	mov	r7, r6
 800e240:	e7e1      	b.n	800e206 <_dtoa_r+0x93e>
 800e242:	9700      	str	r7, [sp, #0]
 800e244:	4637      	mov	r7, r6
 800e246:	e599      	b.n	800dd7c <_dtoa_r+0x4b4>
 800e248:	40240000 	.word	0x40240000
 800e24c:	9b08      	ldr	r3, [sp, #32]
 800e24e:	2b00      	cmp	r3, #0
 800e250:	f000 80ca 	beq.w	800e3e8 <_dtoa_r+0xb20>
 800e254:	9b03      	ldr	r3, [sp, #12]
 800e256:	9302      	str	r3, [sp, #8]
 800e258:	2d00      	cmp	r5, #0
 800e25a:	dd05      	ble.n	800e268 <_dtoa_r+0x9a0>
 800e25c:	4639      	mov	r1, r7
 800e25e:	462a      	mov	r2, r5
 800e260:	4620      	mov	r0, r4
 800e262:	f000 fb4b 	bl	800e8fc <__lshift>
 800e266:	4607      	mov	r7, r0
 800e268:	f1b8 0f00 	cmp.w	r8, #0
 800e26c:	d05b      	beq.n	800e326 <_dtoa_r+0xa5e>
 800e26e:	6879      	ldr	r1, [r7, #4]
 800e270:	4620      	mov	r0, r4
 800e272:	f000 f931 	bl	800e4d8 <_Balloc>
 800e276:	4605      	mov	r5, r0
 800e278:	b928      	cbnz	r0, 800e286 <_dtoa_r+0x9be>
 800e27a:	4b87      	ldr	r3, [pc, #540]	; (800e498 <_dtoa_r+0xbd0>)
 800e27c:	4602      	mov	r2, r0
 800e27e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800e282:	f7ff bb3b 	b.w	800d8fc <_dtoa_r+0x34>
 800e286:	693a      	ldr	r2, [r7, #16]
 800e288:	3202      	adds	r2, #2
 800e28a:	0092      	lsls	r2, r2, #2
 800e28c:	f107 010c 	add.w	r1, r7, #12
 800e290:	300c      	adds	r0, #12
 800e292:	f000 f913 	bl	800e4bc <memcpy>
 800e296:	2201      	movs	r2, #1
 800e298:	4629      	mov	r1, r5
 800e29a:	4620      	mov	r0, r4
 800e29c:	f000 fb2e 	bl	800e8fc <__lshift>
 800e2a0:	9b01      	ldr	r3, [sp, #4]
 800e2a2:	f103 0901 	add.w	r9, r3, #1
 800e2a6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800e2aa:	4413      	add	r3, r2
 800e2ac:	9305      	str	r3, [sp, #20]
 800e2ae:	f00a 0301 	and.w	r3, sl, #1
 800e2b2:	46b8      	mov	r8, r7
 800e2b4:	9304      	str	r3, [sp, #16]
 800e2b6:	4607      	mov	r7, r0
 800e2b8:	4631      	mov	r1, r6
 800e2ba:	ee18 0a10 	vmov	r0, s16
 800e2be:	f7ff fa78 	bl	800d7b2 <quorem>
 800e2c2:	4641      	mov	r1, r8
 800e2c4:	9002      	str	r0, [sp, #8]
 800e2c6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e2ca:	ee18 0a10 	vmov	r0, s16
 800e2ce:	f000 fb85 	bl	800e9dc <__mcmp>
 800e2d2:	463a      	mov	r2, r7
 800e2d4:	9003      	str	r0, [sp, #12]
 800e2d6:	4631      	mov	r1, r6
 800e2d8:	4620      	mov	r0, r4
 800e2da:	f000 fb9b 	bl	800ea14 <__mdiff>
 800e2de:	68c2      	ldr	r2, [r0, #12]
 800e2e0:	f109 3bff 	add.w	fp, r9, #4294967295
 800e2e4:	4605      	mov	r5, r0
 800e2e6:	bb02      	cbnz	r2, 800e32a <_dtoa_r+0xa62>
 800e2e8:	4601      	mov	r1, r0
 800e2ea:	ee18 0a10 	vmov	r0, s16
 800e2ee:	f000 fb75 	bl	800e9dc <__mcmp>
 800e2f2:	4602      	mov	r2, r0
 800e2f4:	4629      	mov	r1, r5
 800e2f6:	4620      	mov	r0, r4
 800e2f8:	9207      	str	r2, [sp, #28]
 800e2fa:	f000 f92d 	bl	800e558 <_Bfree>
 800e2fe:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800e302:	ea43 0102 	orr.w	r1, r3, r2
 800e306:	9b04      	ldr	r3, [sp, #16]
 800e308:	430b      	orrs	r3, r1
 800e30a:	464d      	mov	r5, r9
 800e30c:	d10f      	bne.n	800e32e <_dtoa_r+0xa66>
 800e30e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e312:	d02a      	beq.n	800e36a <_dtoa_r+0xaa2>
 800e314:	9b03      	ldr	r3, [sp, #12]
 800e316:	2b00      	cmp	r3, #0
 800e318:	dd02      	ble.n	800e320 <_dtoa_r+0xa58>
 800e31a:	9b02      	ldr	r3, [sp, #8]
 800e31c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800e320:	f88b a000 	strb.w	sl, [fp]
 800e324:	e775      	b.n	800e212 <_dtoa_r+0x94a>
 800e326:	4638      	mov	r0, r7
 800e328:	e7ba      	b.n	800e2a0 <_dtoa_r+0x9d8>
 800e32a:	2201      	movs	r2, #1
 800e32c:	e7e2      	b.n	800e2f4 <_dtoa_r+0xa2c>
 800e32e:	9b03      	ldr	r3, [sp, #12]
 800e330:	2b00      	cmp	r3, #0
 800e332:	db04      	blt.n	800e33e <_dtoa_r+0xa76>
 800e334:	9906      	ldr	r1, [sp, #24]
 800e336:	430b      	orrs	r3, r1
 800e338:	9904      	ldr	r1, [sp, #16]
 800e33a:	430b      	orrs	r3, r1
 800e33c:	d122      	bne.n	800e384 <_dtoa_r+0xabc>
 800e33e:	2a00      	cmp	r2, #0
 800e340:	ddee      	ble.n	800e320 <_dtoa_r+0xa58>
 800e342:	ee18 1a10 	vmov	r1, s16
 800e346:	2201      	movs	r2, #1
 800e348:	4620      	mov	r0, r4
 800e34a:	f000 fad7 	bl	800e8fc <__lshift>
 800e34e:	4631      	mov	r1, r6
 800e350:	ee08 0a10 	vmov	s16, r0
 800e354:	f000 fb42 	bl	800e9dc <__mcmp>
 800e358:	2800      	cmp	r0, #0
 800e35a:	dc03      	bgt.n	800e364 <_dtoa_r+0xa9c>
 800e35c:	d1e0      	bne.n	800e320 <_dtoa_r+0xa58>
 800e35e:	f01a 0f01 	tst.w	sl, #1
 800e362:	d0dd      	beq.n	800e320 <_dtoa_r+0xa58>
 800e364:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e368:	d1d7      	bne.n	800e31a <_dtoa_r+0xa52>
 800e36a:	2339      	movs	r3, #57	; 0x39
 800e36c:	f88b 3000 	strb.w	r3, [fp]
 800e370:	462b      	mov	r3, r5
 800e372:	461d      	mov	r5, r3
 800e374:	3b01      	subs	r3, #1
 800e376:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e37a:	2a39      	cmp	r2, #57	; 0x39
 800e37c:	d071      	beq.n	800e462 <_dtoa_r+0xb9a>
 800e37e:	3201      	adds	r2, #1
 800e380:	701a      	strb	r2, [r3, #0]
 800e382:	e746      	b.n	800e212 <_dtoa_r+0x94a>
 800e384:	2a00      	cmp	r2, #0
 800e386:	dd07      	ble.n	800e398 <_dtoa_r+0xad0>
 800e388:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e38c:	d0ed      	beq.n	800e36a <_dtoa_r+0xaa2>
 800e38e:	f10a 0301 	add.w	r3, sl, #1
 800e392:	f88b 3000 	strb.w	r3, [fp]
 800e396:	e73c      	b.n	800e212 <_dtoa_r+0x94a>
 800e398:	9b05      	ldr	r3, [sp, #20]
 800e39a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800e39e:	4599      	cmp	r9, r3
 800e3a0:	d047      	beq.n	800e432 <_dtoa_r+0xb6a>
 800e3a2:	ee18 1a10 	vmov	r1, s16
 800e3a6:	2300      	movs	r3, #0
 800e3a8:	220a      	movs	r2, #10
 800e3aa:	4620      	mov	r0, r4
 800e3ac:	f000 f8f6 	bl	800e59c <__multadd>
 800e3b0:	45b8      	cmp	r8, r7
 800e3b2:	ee08 0a10 	vmov	s16, r0
 800e3b6:	f04f 0300 	mov.w	r3, #0
 800e3ba:	f04f 020a 	mov.w	r2, #10
 800e3be:	4641      	mov	r1, r8
 800e3c0:	4620      	mov	r0, r4
 800e3c2:	d106      	bne.n	800e3d2 <_dtoa_r+0xb0a>
 800e3c4:	f000 f8ea 	bl	800e59c <__multadd>
 800e3c8:	4680      	mov	r8, r0
 800e3ca:	4607      	mov	r7, r0
 800e3cc:	f109 0901 	add.w	r9, r9, #1
 800e3d0:	e772      	b.n	800e2b8 <_dtoa_r+0x9f0>
 800e3d2:	f000 f8e3 	bl	800e59c <__multadd>
 800e3d6:	4639      	mov	r1, r7
 800e3d8:	4680      	mov	r8, r0
 800e3da:	2300      	movs	r3, #0
 800e3dc:	220a      	movs	r2, #10
 800e3de:	4620      	mov	r0, r4
 800e3e0:	f000 f8dc 	bl	800e59c <__multadd>
 800e3e4:	4607      	mov	r7, r0
 800e3e6:	e7f1      	b.n	800e3cc <_dtoa_r+0xb04>
 800e3e8:	9b03      	ldr	r3, [sp, #12]
 800e3ea:	9302      	str	r3, [sp, #8]
 800e3ec:	9d01      	ldr	r5, [sp, #4]
 800e3ee:	ee18 0a10 	vmov	r0, s16
 800e3f2:	4631      	mov	r1, r6
 800e3f4:	f7ff f9dd 	bl	800d7b2 <quorem>
 800e3f8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e3fc:	9b01      	ldr	r3, [sp, #4]
 800e3fe:	f805 ab01 	strb.w	sl, [r5], #1
 800e402:	1aea      	subs	r2, r5, r3
 800e404:	9b02      	ldr	r3, [sp, #8]
 800e406:	4293      	cmp	r3, r2
 800e408:	dd09      	ble.n	800e41e <_dtoa_r+0xb56>
 800e40a:	ee18 1a10 	vmov	r1, s16
 800e40e:	2300      	movs	r3, #0
 800e410:	220a      	movs	r2, #10
 800e412:	4620      	mov	r0, r4
 800e414:	f000 f8c2 	bl	800e59c <__multadd>
 800e418:	ee08 0a10 	vmov	s16, r0
 800e41c:	e7e7      	b.n	800e3ee <_dtoa_r+0xb26>
 800e41e:	9b02      	ldr	r3, [sp, #8]
 800e420:	2b00      	cmp	r3, #0
 800e422:	bfc8      	it	gt
 800e424:	461d      	movgt	r5, r3
 800e426:	9b01      	ldr	r3, [sp, #4]
 800e428:	bfd8      	it	le
 800e42a:	2501      	movle	r5, #1
 800e42c:	441d      	add	r5, r3
 800e42e:	f04f 0800 	mov.w	r8, #0
 800e432:	ee18 1a10 	vmov	r1, s16
 800e436:	2201      	movs	r2, #1
 800e438:	4620      	mov	r0, r4
 800e43a:	f000 fa5f 	bl	800e8fc <__lshift>
 800e43e:	4631      	mov	r1, r6
 800e440:	ee08 0a10 	vmov	s16, r0
 800e444:	f000 faca 	bl	800e9dc <__mcmp>
 800e448:	2800      	cmp	r0, #0
 800e44a:	dc91      	bgt.n	800e370 <_dtoa_r+0xaa8>
 800e44c:	d102      	bne.n	800e454 <_dtoa_r+0xb8c>
 800e44e:	f01a 0f01 	tst.w	sl, #1
 800e452:	d18d      	bne.n	800e370 <_dtoa_r+0xaa8>
 800e454:	462b      	mov	r3, r5
 800e456:	461d      	mov	r5, r3
 800e458:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e45c:	2a30      	cmp	r2, #48	; 0x30
 800e45e:	d0fa      	beq.n	800e456 <_dtoa_r+0xb8e>
 800e460:	e6d7      	b.n	800e212 <_dtoa_r+0x94a>
 800e462:	9a01      	ldr	r2, [sp, #4]
 800e464:	429a      	cmp	r2, r3
 800e466:	d184      	bne.n	800e372 <_dtoa_r+0xaaa>
 800e468:	9b00      	ldr	r3, [sp, #0]
 800e46a:	3301      	adds	r3, #1
 800e46c:	9300      	str	r3, [sp, #0]
 800e46e:	2331      	movs	r3, #49	; 0x31
 800e470:	7013      	strb	r3, [r2, #0]
 800e472:	e6ce      	b.n	800e212 <_dtoa_r+0x94a>
 800e474:	4b09      	ldr	r3, [pc, #36]	; (800e49c <_dtoa_r+0xbd4>)
 800e476:	f7ff ba95 	b.w	800d9a4 <_dtoa_r+0xdc>
 800e47a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	f47f aa6e 	bne.w	800d95e <_dtoa_r+0x96>
 800e482:	4b07      	ldr	r3, [pc, #28]	; (800e4a0 <_dtoa_r+0xbd8>)
 800e484:	f7ff ba8e 	b.w	800d9a4 <_dtoa_r+0xdc>
 800e488:	9b02      	ldr	r3, [sp, #8]
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	dcae      	bgt.n	800e3ec <_dtoa_r+0xb24>
 800e48e:	9b06      	ldr	r3, [sp, #24]
 800e490:	2b02      	cmp	r3, #2
 800e492:	f73f aea8 	bgt.w	800e1e6 <_dtoa_r+0x91e>
 800e496:	e7a9      	b.n	800e3ec <_dtoa_r+0xb24>
 800e498:	0803d2df 	.word	0x0803d2df
 800e49c:	0803d23c 	.word	0x0803d23c
 800e4a0:	0803d260 	.word	0x0803d260

0800e4a4 <_localeconv_r>:
 800e4a4:	4800      	ldr	r0, [pc, #0]	; (800e4a8 <_localeconv_r+0x4>)
 800e4a6:	4770      	bx	lr
 800e4a8:	200003a4 	.word	0x200003a4

0800e4ac <malloc>:
 800e4ac:	4b02      	ldr	r3, [pc, #8]	; (800e4b8 <malloc+0xc>)
 800e4ae:	4601      	mov	r1, r0
 800e4b0:	6818      	ldr	r0, [r3, #0]
 800e4b2:	f000 bc17 	b.w	800ece4 <_malloc_r>
 800e4b6:	bf00      	nop
 800e4b8:	20000250 	.word	0x20000250

0800e4bc <memcpy>:
 800e4bc:	440a      	add	r2, r1
 800e4be:	4291      	cmp	r1, r2
 800e4c0:	f100 33ff 	add.w	r3, r0, #4294967295
 800e4c4:	d100      	bne.n	800e4c8 <memcpy+0xc>
 800e4c6:	4770      	bx	lr
 800e4c8:	b510      	push	{r4, lr}
 800e4ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e4ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e4d2:	4291      	cmp	r1, r2
 800e4d4:	d1f9      	bne.n	800e4ca <memcpy+0xe>
 800e4d6:	bd10      	pop	{r4, pc}

0800e4d8 <_Balloc>:
 800e4d8:	b570      	push	{r4, r5, r6, lr}
 800e4da:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e4dc:	4604      	mov	r4, r0
 800e4de:	460d      	mov	r5, r1
 800e4e0:	b976      	cbnz	r6, 800e500 <_Balloc+0x28>
 800e4e2:	2010      	movs	r0, #16
 800e4e4:	f7ff ffe2 	bl	800e4ac <malloc>
 800e4e8:	4602      	mov	r2, r0
 800e4ea:	6260      	str	r0, [r4, #36]	; 0x24
 800e4ec:	b920      	cbnz	r0, 800e4f8 <_Balloc+0x20>
 800e4ee:	4b18      	ldr	r3, [pc, #96]	; (800e550 <_Balloc+0x78>)
 800e4f0:	4818      	ldr	r0, [pc, #96]	; (800e554 <_Balloc+0x7c>)
 800e4f2:	2166      	movs	r1, #102	; 0x66
 800e4f4:	f000 fdd6 	bl	800f0a4 <__assert_func>
 800e4f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e4fc:	6006      	str	r6, [r0, #0]
 800e4fe:	60c6      	str	r6, [r0, #12]
 800e500:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e502:	68f3      	ldr	r3, [r6, #12]
 800e504:	b183      	cbz	r3, 800e528 <_Balloc+0x50>
 800e506:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e508:	68db      	ldr	r3, [r3, #12]
 800e50a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e50e:	b9b8      	cbnz	r0, 800e540 <_Balloc+0x68>
 800e510:	2101      	movs	r1, #1
 800e512:	fa01 f605 	lsl.w	r6, r1, r5
 800e516:	1d72      	adds	r2, r6, #5
 800e518:	0092      	lsls	r2, r2, #2
 800e51a:	4620      	mov	r0, r4
 800e51c:	f000 fb60 	bl	800ebe0 <_calloc_r>
 800e520:	b160      	cbz	r0, 800e53c <_Balloc+0x64>
 800e522:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e526:	e00e      	b.n	800e546 <_Balloc+0x6e>
 800e528:	2221      	movs	r2, #33	; 0x21
 800e52a:	2104      	movs	r1, #4
 800e52c:	4620      	mov	r0, r4
 800e52e:	f000 fb57 	bl	800ebe0 <_calloc_r>
 800e532:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e534:	60f0      	str	r0, [r6, #12]
 800e536:	68db      	ldr	r3, [r3, #12]
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d1e4      	bne.n	800e506 <_Balloc+0x2e>
 800e53c:	2000      	movs	r0, #0
 800e53e:	bd70      	pop	{r4, r5, r6, pc}
 800e540:	6802      	ldr	r2, [r0, #0]
 800e542:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e546:	2300      	movs	r3, #0
 800e548:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e54c:	e7f7      	b.n	800e53e <_Balloc+0x66>
 800e54e:	bf00      	nop
 800e550:	0803d26d 	.word	0x0803d26d
 800e554:	0803d2f0 	.word	0x0803d2f0

0800e558 <_Bfree>:
 800e558:	b570      	push	{r4, r5, r6, lr}
 800e55a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e55c:	4605      	mov	r5, r0
 800e55e:	460c      	mov	r4, r1
 800e560:	b976      	cbnz	r6, 800e580 <_Bfree+0x28>
 800e562:	2010      	movs	r0, #16
 800e564:	f7ff ffa2 	bl	800e4ac <malloc>
 800e568:	4602      	mov	r2, r0
 800e56a:	6268      	str	r0, [r5, #36]	; 0x24
 800e56c:	b920      	cbnz	r0, 800e578 <_Bfree+0x20>
 800e56e:	4b09      	ldr	r3, [pc, #36]	; (800e594 <_Bfree+0x3c>)
 800e570:	4809      	ldr	r0, [pc, #36]	; (800e598 <_Bfree+0x40>)
 800e572:	218a      	movs	r1, #138	; 0x8a
 800e574:	f000 fd96 	bl	800f0a4 <__assert_func>
 800e578:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e57c:	6006      	str	r6, [r0, #0]
 800e57e:	60c6      	str	r6, [r0, #12]
 800e580:	b13c      	cbz	r4, 800e592 <_Bfree+0x3a>
 800e582:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e584:	6862      	ldr	r2, [r4, #4]
 800e586:	68db      	ldr	r3, [r3, #12]
 800e588:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e58c:	6021      	str	r1, [r4, #0]
 800e58e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e592:	bd70      	pop	{r4, r5, r6, pc}
 800e594:	0803d26d 	.word	0x0803d26d
 800e598:	0803d2f0 	.word	0x0803d2f0

0800e59c <__multadd>:
 800e59c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5a0:	690d      	ldr	r5, [r1, #16]
 800e5a2:	4607      	mov	r7, r0
 800e5a4:	460c      	mov	r4, r1
 800e5a6:	461e      	mov	r6, r3
 800e5a8:	f101 0c14 	add.w	ip, r1, #20
 800e5ac:	2000      	movs	r0, #0
 800e5ae:	f8dc 3000 	ldr.w	r3, [ip]
 800e5b2:	b299      	uxth	r1, r3
 800e5b4:	fb02 6101 	mla	r1, r2, r1, r6
 800e5b8:	0c1e      	lsrs	r6, r3, #16
 800e5ba:	0c0b      	lsrs	r3, r1, #16
 800e5bc:	fb02 3306 	mla	r3, r2, r6, r3
 800e5c0:	b289      	uxth	r1, r1
 800e5c2:	3001      	adds	r0, #1
 800e5c4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e5c8:	4285      	cmp	r5, r0
 800e5ca:	f84c 1b04 	str.w	r1, [ip], #4
 800e5ce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e5d2:	dcec      	bgt.n	800e5ae <__multadd+0x12>
 800e5d4:	b30e      	cbz	r6, 800e61a <__multadd+0x7e>
 800e5d6:	68a3      	ldr	r3, [r4, #8]
 800e5d8:	42ab      	cmp	r3, r5
 800e5da:	dc19      	bgt.n	800e610 <__multadd+0x74>
 800e5dc:	6861      	ldr	r1, [r4, #4]
 800e5de:	4638      	mov	r0, r7
 800e5e0:	3101      	adds	r1, #1
 800e5e2:	f7ff ff79 	bl	800e4d8 <_Balloc>
 800e5e6:	4680      	mov	r8, r0
 800e5e8:	b928      	cbnz	r0, 800e5f6 <__multadd+0x5a>
 800e5ea:	4602      	mov	r2, r0
 800e5ec:	4b0c      	ldr	r3, [pc, #48]	; (800e620 <__multadd+0x84>)
 800e5ee:	480d      	ldr	r0, [pc, #52]	; (800e624 <__multadd+0x88>)
 800e5f0:	21b5      	movs	r1, #181	; 0xb5
 800e5f2:	f000 fd57 	bl	800f0a4 <__assert_func>
 800e5f6:	6922      	ldr	r2, [r4, #16]
 800e5f8:	3202      	adds	r2, #2
 800e5fa:	f104 010c 	add.w	r1, r4, #12
 800e5fe:	0092      	lsls	r2, r2, #2
 800e600:	300c      	adds	r0, #12
 800e602:	f7ff ff5b 	bl	800e4bc <memcpy>
 800e606:	4621      	mov	r1, r4
 800e608:	4638      	mov	r0, r7
 800e60a:	f7ff ffa5 	bl	800e558 <_Bfree>
 800e60e:	4644      	mov	r4, r8
 800e610:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e614:	3501      	adds	r5, #1
 800e616:	615e      	str	r6, [r3, #20]
 800e618:	6125      	str	r5, [r4, #16]
 800e61a:	4620      	mov	r0, r4
 800e61c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e620:	0803d2df 	.word	0x0803d2df
 800e624:	0803d2f0 	.word	0x0803d2f0

0800e628 <__hi0bits>:
 800e628:	0c03      	lsrs	r3, r0, #16
 800e62a:	041b      	lsls	r3, r3, #16
 800e62c:	b9d3      	cbnz	r3, 800e664 <__hi0bits+0x3c>
 800e62e:	0400      	lsls	r0, r0, #16
 800e630:	2310      	movs	r3, #16
 800e632:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e636:	bf04      	itt	eq
 800e638:	0200      	lsleq	r0, r0, #8
 800e63a:	3308      	addeq	r3, #8
 800e63c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e640:	bf04      	itt	eq
 800e642:	0100      	lsleq	r0, r0, #4
 800e644:	3304      	addeq	r3, #4
 800e646:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e64a:	bf04      	itt	eq
 800e64c:	0080      	lsleq	r0, r0, #2
 800e64e:	3302      	addeq	r3, #2
 800e650:	2800      	cmp	r0, #0
 800e652:	db05      	blt.n	800e660 <__hi0bits+0x38>
 800e654:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e658:	f103 0301 	add.w	r3, r3, #1
 800e65c:	bf08      	it	eq
 800e65e:	2320      	moveq	r3, #32
 800e660:	4618      	mov	r0, r3
 800e662:	4770      	bx	lr
 800e664:	2300      	movs	r3, #0
 800e666:	e7e4      	b.n	800e632 <__hi0bits+0xa>

0800e668 <__lo0bits>:
 800e668:	6803      	ldr	r3, [r0, #0]
 800e66a:	f013 0207 	ands.w	r2, r3, #7
 800e66e:	4601      	mov	r1, r0
 800e670:	d00b      	beq.n	800e68a <__lo0bits+0x22>
 800e672:	07da      	lsls	r2, r3, #31
 800e674:	d423      	bmi.n	800e6be <__lo0bits+0x56>
 800e676:	0798      	lsls	r0, r3, #30
 800e678:	bf49      	itett	mi
 800e67a:	085b      	lsrmi	r3, r3, #1
 800e67c:	089b      	lsrpl	r3, r3, #2
 800e67e:	2001      	movmi	r0, #1
 800e680:	600b      	strmi	r3, [r1, #0]
 800e682:	bf5c      	itt	pl
 800e684:	600b      	strpl	r3, [r1, #0]
 800e686:	2002      	movpl	r0, #2
 800e688:	4770      	bx	lr
 800e68a:	b298      	uxth	r0, r3
 800e68c:	b9a8      	cbnz	r0, 800e6ba <__lo0bits+0x52>
 800e68e:	0c1b      	lsrs	r3, r3, #16
 800e690:	2010      	movs	r0, #16
 800e692:	b2da      	uxtb	r2, r3
 800e694:	b90a      	cbnz	r2, 800e69a <__lo0bits+0x32>
 800e696:	3008      	adds	r0, #8
 800e698:	0a1b      	lsrs	r3, r3, #8
 800e69a:	071a      	lsls	r2, r3, #28
 800e69c:	bf04      	itt	eq
 800e69e:	091b      	lsreq	r3, r3, #4
 800e6a0:	3004      	addeq	r0, #4
 800e6a2:	079a      	lsls	r2, r3, #30
 800e6a4:	bf04      	itt	eq
 800e6a6:	089b      	lsreq	r3, r3, #2
 800e6a8:	3002      	addeq	r0, #2
 800e6aa:	07da      	lsls	r2, r3, #31
 800e6ac:	d403      	bmi.n	800e6b6 <__lo0bits+0x4e>
 800e6ae:	085b      	lsrs	r3, r3, #1
 800e6b0:	f100 0001 	add.w	r0, r0, #1
 800e6b4:	d005      	beq.n	800e6c2 <__lo0bits+0x5a>
 800e6b6:	600b      	str	r3, [r1, #0]
 800e6b8:	4770      	bx	lr
 800e6ba:	4610      	mov	r0, r2
 800e6bc:	e7e9      	b.n	800e692 <__lo0bits+0x2a>
 800e6be:	2000      	movs	r0, #0
 800e6c0:	4770      	bx	lr
 800e6c2:	2020      	movs	r0, #32
 800e6c4:	4770      	bx	lr
	...

0800e6c8 <__i2b>:
 800e6c8:	b510      	push	{r4, lr}
 800e6ca:	460c      	mov	r4, r1
 800e6cc:	2101      	movs	r1, #1
 800e6ce:	f7ff ff03 	bl	800e4d8 <_Balloc>
 800e6d2:	4602      	mov	r2, r0
 800e6d4:	b928      	cbnz	r0, 800e6e2 <__i2b+0x1a>
 800e6d6:	4b05      	ldr	r3, [pc, #20]	; (800e6ec <__i2b+0x24>)
 800e6d8:	4805      	ldr	r0, [pc, #20]	; (800e6f0 <__i2b+0x28>)
 800e6da:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e6de:	f000 fce1 	bl	800f0a4 <__assert_func>
 800e6e2:	2301      	movs	r3, #1
 800e6e4:	6144      	str	r4, [r0, #20]
 800e6e6:	6103      	str	r3, [r0, #16]
 800e6e8:	bd10      	pop	{r4, pc}
 800e6ea:	bf00      	nop
 800e6ec:	0803d2df 	.word	0x0803d2df
 800e6f0:	0803d2f0 	.word	0x0803d2f0

0800e6f4 <__multiply>:
 800e6f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6f8:	4691      	mov	r9, r2
 800e6fa:	690a      	ldr	r2, [r1, #16]
 800e6fc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e700:	429a      	cmp	r2, r3
 800e702:	bfb8      	it	lt
 800e704:	460b      	movlt	r3, r1
 800e706:	460c      	mov	r4, r1
 800e708:	bfbc      	itt	lt
 800e70a:	464c      	movlt	r4, r9
 800e70c:	4699      	movlt	r9, r3
 800e70e:	6927      	ldr	r7, [r4, #16]
 800e710:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e714:	68a3      	ldr	r3, [r4, #8]
 800e716:	6861      	ldr	r1, [r4, #4]
 800e718:	eb07 060a 	add.w	r6, r7, sl
 800e71c:	42b3      	cmp	r3, r6
 800e71e:	b085      	sub	sp, #20
 800e720:	bfb8      	it	lt
 800e722:	3101      	addlt	r1, #1
 800e724:	f7ff fed8 	bl	800e4d8 <_Balloc>
 800e728:	b930      	cbnz	r0, 800e738 <__multiply+0x44>
 800e72a:	4602      	mov	r2, r0
 800e72c:	4b44      	ldr	r3, [pc, #272]	; (800e840 <__multiply+0x14c>)
 800e72e:	4845      	ldr	r0, [pc, #276]	; (800e844 <__multiply+0x150>)
 800e730:	f240 115d 	movw	r1, #349	; 0x15d
 800e734:	f000 fcb6 	bl	800f0a4 <__assert_func>
 800e738:	f100 0514 	add.w	r5, r0, #20
 800e73c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e740:	462b      	mov	r3, r5
 800e742:	2200      	movs	r2, #0
 800e744:	4543      	cmp	r3, r8
 800e746:	d321      	bcc.n	800e78c <__multiply+0x98>
 800e748:	f104 0314 	add.w	r3, r4, #20
 800e74c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e750:	f109 0314 	add.w	r3, r9, #20
 800e754:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e758:	9202      	str	r2, [sp, #8]
 800e75a:	1b3a      	subs	r2, r7, r4
 800e75c:	3a15      	subs	r2, #21
 800e75e:	f022 0203 	bic.w	r2, r2, #3
 800e762:	3204      	adds	r2, #4
 800e764:	f104 0115 	add.w	r1, r4, #21
 800e768:	428f      	cmp	r7, r1
 800e76a:	bf38      	it	cc
 800e76c:	2204      	movcc	r2, #4
 800e76e:	9201      	str	r2, [sp, #4]
 800e770:	9a02      	ldr	r2, [sp, #8]
 800e772:	9303      	str	r3, [sp, #12]
 800e774:	429a      	cmp	r2, r3
 800e776:	d80c      	bhi.n	800e792 <__multiply+0x9e>
 800e778:	2e00      	cmp	r6, #0
 800e77a:	dd03      	ble.n	800e784 <__multiply+0x90>
 800e77c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e780:	2b00      	cmp	r3, #0
 800e782:	d05a      	beq.n	800e83a <__multiply+0x146>
 800e784:	6106      	str	r6, [r0, #16]
 800e786:	b005      	add	sp, #20
 800e788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e78c:	f843 2b04 	str.w	r2, [r3], #4
 800e790:	e7d8      	b.n	800e744 <__multiply+0x50>
 800e792:	f8b3 a000 	ldrh.w	sl, [r3]
 800e796:	f1ba 0f00 	cmp.w	sl, #0
 800e79a:	d024      	beq.n	800e7e6 <__multiply+0xf2>
 800e79c:	f104 0e14 	add.w	lr, r4, #20
 800e7a0:	46a9      	mov	r9, r5
 800e7a2:	f04f 0c00 	mov.w	ip, #0
 800e7a6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e7aa:	f8d9 1000 	ldr.w	r1, [r9]
 800e7ae:	fa1f fb82 	uxth.w	fp, r2
 800e7b2:	b289      	uxth	r1, r1
 800e7b4:	fb0a 110b 	mla	r1, sl, fp, r1
 800e7b8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e7bc:	f8d9 2000 	ldr.w	r2, [r9]
 800e7c0:	4461      	add	r1, ip
 800e7c2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e7c6:	fb0a c20b 	mla	r2, sl, fp, ip
 800e7ca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e7ce:	b289      	uxth	r1, r1
 800e7d0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e7d4:	4577      	cmp	r7, lr
 800e7d6:	f849 1b04 	str.w	r1, [r9], #4
 800e7da:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e7de:	d8e2      	bhi.n	800e7a6 <__multiply+0xb2>
 800e7e0:	9a01      	ldr	r2, [sp, #4]
 800e7e2:	f845 c002 	str.w	ip, [r5, r2]
 800e7e6:	9a03      	ldr	r2, [sp, #12]
 800e7e8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e7ec:	3304      	adds	r3, #4
 800e7ee:	f1b9 0f00 	cmp.w	r9, #0
 800e7f2:	d020      	beq.n	800e836 <__multiply+0x142>
 800e7f4:	6829      	ldr	r1, [r5, #0]
 800e7f6:	f104 0c14 	add.w	ip, r4, #20
 800e7fa:	46ae      	mov	lr, r5
 800e7fc:	f04f 0a00 	mov.w	sl, #0
 800e800:	f8bc b000 	ldrh.w	fp, [ip]
 800e804:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e808:	fb09 220b 	mla	r2, r9, fp, r2
 800e80c:	4492      	add	sl, r2
 800e80e:	b289      	uxth	r1, r1
 800e810:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800e814:	f84e 1b04 	str.w	r1, [lr], #4
 800e818:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e81c:	f8be 1000 	ldrh.w	r1, [lr]
 800e820:	0c12      	lsrs	r2, r2, #16
 800e822:	fb09 1102 	mla	r1, r9, r2, r1
 800e826:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800e82a:	4567      	cmp	r7, ip
 800e82c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e830:	d8e6      	bhi.n	800e800 <__multiply+0x10c>
 800e832:	9a01      	ldr	r2, [sp, #4]
 800e834:	50a9      	str	r1, [r5, r2]
 800e836:	3504      	adds	r5, #4
 800e838:	e79a      	b.n	800e770 <__multiply+0x7c>
 800e83a:	3e01      	subs	r6, #1
 800e83c:	e79c      	b.n	800e778 <__multiply+0x84>
 800e83e:	bf00      	nop
 800e840:	0803d2df 	.word	0x0803d2df
 800e844:	0803d2f0 	.word	0x0803d2f0

0800e848 <__pow5mult>:
 800e848:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e84c:	4615      	mov	r5, r2
 800e84e:	f012 0203 	ands.w	r2, r2, #3
 800e852:	4606      	mov	r6, r0
 800e854:	460f      	mov	r7, r1
 800e856:	d007      	beq.n	800e868 <__pow5mult+0x20>
 800e858:	4c25      	ldr	r4, [pc, #148]	; (800e8f0 <__pow5mult+0xa8>)
 800e85a:	3a01      	subs	r2, #1
 800e85c:	2300      	movs	r3, #0
 800e85e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e862:	f7ff fe9b 	bl	800e59c <__multadd>
 800e866:	4607      	mov	r7, r0
 800e868:	10ad      	asrs	r5, r5, #2
 800e86a:	d03d      	beq.n	800e8e8 <__pow5mult+0xa0>
 800e86c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e86e:	b97c      	cbnz	r4, 800e890 <__pow5mult+0x48>
 800e870:	2010      	movs	r0, #16
 800e872:	f7ff fe1b 	bl	800e4ac <malloc>
 800e876:	4602      	mov	r2, r0
 800e878:	6270      	str	r0, [r6, #36]	; 0x24
 800e87a:	b928      	cbnz	r0, 800e888 <__pow5mult+0x40>
 800e87c:	4b1d      	ldr	r3, [pc, #116]	; (800e8f4 <__pow5mult+0xac>)
 800e87e:	481e      	ldr	r0, [pc, #120]	; (800e8f8 <__pow5mult+0xb0>)
 800e880:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e884:	f000 fc0e 	bl	800f0a4 <__assert_func>
 800e888:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e88c:	6004      	str	r4, [r0, #0]
 800e88e:	60c4      	str	r4, [r0, #12]
 800e890:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e894:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e898:	b94c      	cbnz	r4, 800e8ae <__pow5mult+0x66>
 800e89a:	f240 2171 	movw	r1, #625	; 0x271
 800e89e:	4630      	mov	r0, r6
 800e8a0:	f7ff ff12 	bl	800e6c8 <__i2b>
 800e8a4:	2300      	movs	r3, #0
 800e8a6:	f8c8 0008 	str.w	r0, [r8, #8]
 800e8aa:	4604      	mov	r4, r0
 800e8ac:	6003      	str	r3, [r0, #0]
 800e8ae:	f04f 0900 	mov.w	r9, #0
 800e8b2:	07eb      	lsls	r3, r5, #31
 800e8b4:	d50a      	bpl.n	800e8cc <__pow5mult+0x84>
 800e8b6:	4639      	mov	r1, r7
 800e8b8:	4622      	mov	r2, r4
 800e8ba:	4630      	mov	r0, r6
 800e8bc:	f7ff ff1a 	bl	800e6f4 <__multiply>
 800e8c0:	4639      	mov	r1, r7
 800e8c2:	4680      	mov	r8, r0
 800e8c4:	4630      	mov	r0, r6
 800e8c6:	f7ff fe47 	bl	800e558 <_Bfree>
 800e8ca:	4647      	mov	r7, r8
 800e8cc:	106d      	asrs	r5, r5, #1
 800e8ce:	d00b      	beq.n	800e8e8 <__pow5mult+0xa0>
 800e8d0:	6820      	ldr	r0, [r4, #0]
 800e8d2:	b938      	cbnz	r0, 800e8e4 <__pow5mult+0x9c>
 800e8d4:	4622      	mov	r2, r4
 800e8d6:	4621      	mov	r1, r4
 800e8d8:	4630      	mov	r0, r6
 800e8da:	f7ff ff0b 	bl	800e6f4 <__multiply>
 800e8de:	6020      	str	r0, [r4, #0]
 800e8e0:	f8c0 9000 	str.w	r9, [r0]
 800e8e4:	4604      	mov	r4, r0
 800e8e6:	e7e4      	b.n	800e8b2 <__pow5mult+0x6a>
 800e8e8:	4638      	mov	r0, r7
 800e8ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e8ee:	bf00      	nop
 800e8f0:	0803d440 	.word	0x0803d440
 800e8f4:	0803d26d 	.word	0x0803d26d
 800e8f8:	0803d2f0 	.word	0x0803d2f0

0800e8fc <__lshift>:
 800e8fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e900:	460c      	mov	r4, r1
 800e902:	6849      	ldr	r1, [r1, #4]
 800e904:	6923      	ldr	r3, [r4, #16]
 800e906:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e90a:	68a3      	ldr	r3, [r4, #8]
 800e90c:	4607      	mov	r7, r0
 800e90e:	4691      	mov	r9, r2
 800e910:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e914:	f108 0601 	add.w	r6, r8, #1
 800e918:	42b3      	cmp	r3, r6
 800e91a:	db0b      	blt.n	800e934 <__lshift+0x38>
 800e91c:	4638      	mov	r0, r7
 800e91e:	f7ff fddb 	bl	800e4d8 <_Balloc>
 800e922:	4605      	mov	r5, r0
 800e924:	b948      	cbnz	r0, 800e93a <__lshift+0x3e>
 800e926:	4602      	mov	r2, r0
 800e928:	4b2a      	ldr	r3, [pc, #168]	; (800e9d4 <__lshift+0xd8>)
 800e92a:	482b      	ldr	r0, [pc, #172]	; (800e9d8 <__lshift+0xdc>)
 800e92c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e930:	f000 fbb8 	bl	800f0a4 <__assert_func>
 800e934:	3101      	adds	r1, #1
 800e936:	005b      	lsls	r3, r3, #1
 800e938:	e7ee      	b.n	800e918 <__lshift+0x1c>
 800e93a:	2300      	movs	r3, #0
 800e93c:	f100 0114 	add.w	r1, r0, #20
 800e940:	f100 0210 	add.w	r2, r0, #16
 800e944:	4618      	mov	r0, r3
 800e946:	4553      	cmp	r3, sl
 800e948:	db37      	blt.n	800e9ba <__lshift+0xbe>
 800e94a:	6920      	ldr	r0, [r4, #16]
 800e94c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e950:	f104 0314 	add.w	r3, r4, #20
 800e954:	f019 091f 	ands.w	r9, r9, #31
 800e958:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e95c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e960:	d02f      	beq.n	800e9c2 <__lshift+0xc6>
 800e962:	f1c9 0e20 	rsb	lr, r9, #32
 800e966:	468a      	mov	sl, r1
 800e968:	f04f 0c00 	mov.w	ip, #0
 800e96c:	681a      	ldr	r2, [r3, #0]
 800e96e:	fa02 f209 	lsl.w	r2, r2, r9
 800e972:	ea42 020c 	orr.w	r2, r2, ip
 800e976:	f84a 2b04 	str.w	r2, [sl], #4
 800e97a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e97e:	4298      	cmp	r0, r3
 800e980:	fa22 fc0e 	lsr.w	ip, r2, lr
 800e984:	d8f2      	bhi.n	800e96c <__lshift+0x70>
 800e986:	1b03      	subs	r3, r0, r4
 800e988:	3b15      	subs	r3, #21
 800e98a:	f023 0303 	bic.w	r3, r3, #3
 800e98e:	3304      	adds	r3, #4
 800e990:	f104 0215 	add.w	r2, r4, #21
 800e994:	4290      	cmp	r0, r2
 800e996:	bf38      	it	cc
 800e998:	2304      	movcc	r3, #4
 800e99a:	f841 c003 	str.w	ip, [r1, r3]
 800e99e:	f1bc 0f00 	cmp.w	ip, #0
 800e9a2:	d001      	beq.n	800e9a8 <__lshift+0xac>
 800e9a4:	f108 0602 	add.w	r6, r8, #2
 800e9a8:	3e01      	subs	r6, #1
 800e9aa:	4638      	mov	r0, r7
 800e9ac:	612e      	str	r6, [r5, #16]
 800e9ae:	4621      	mov	r1, r4
 800e9b0:	f7ff fdd2 	bl	800e558 <_Bfree>
 800e9b4:	4628      	mov	r0, r5
 800e9b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e9ba:	f842 0f04 	str.w	r0, [r2, #4]!
 800e9be:	3301      	adds	r3, #1
 800e9c0:	e7c1      	b.n	800e946 <__lshift+0x4a>
 800e9c2:	3904      	subs	r1, #4
 800e9c4:	f853 2b04 	ldr.w	r2, [r3], #4
 800e9c8:	f841 2f04 	str.w	r2, [r1, #4]!
 800e9cc:	4298      	cmp	r0, r3
 800e9ce:	d8f9      	bhi.n	800e9c4 <__lshift+0xc8>
 800e9d0:	e7ea      	b.n	800e9a8 <__lshift+0xac>
 800e9d2:	bf00      	nop
 800e9d4:	0803d2df 	.word	0x0803d2df
 800e9d8:	0803d2f0 	.word	0x0803d2f0

0800e9dc <__mcmp>:
 800e9dc:	b530      	push	{r4, r5, lr}
 800e9de:	6902      	ldr	r2, [r0, #16]
 800e9e0:	690c      	ldr	r4, [r1, #16]
 800e9e2:	1b12      	subs	r2, r2, r4
 800e9e4:	d10e      	bne.n	800ea04 <__mcmp+0x28>
 800e9e6:	f100 0314 	add.w	r3, r0, #20
 800e9ea:	3114      	adds	r1, #20
 800e9ec:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e9f0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e9f4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e9f8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e9fc:	42a5      	cmp	r5, r4
 800e9fe:	d003      	beq.n	800ea08 <__mcmp+0x2c>
 800ea00:	d305      	bcc.n	800ea0e <__mcmp+0x32>
 800ea02:	2201      	movs	r2, #1
 800ea04:	4610      	mov	r0, r2
 800ea06:	bd30      	pop	{r4, r5, pc}
 800ea08:	4283      	cmp	r3, r0
 800ea0a:	d3f3      	bcc.n	800e9f4 <__mcmp+0x18>
 800ea0c:	e7fa      	b.n	800ea04 <__mcmp+0x28>
 800ea0e:	f04f 32ff 	mov.w	r2, #4294967295
 800ea12:	e7f7      	b.n	800ea04 <__mcmp+0x28>

0800ea14 <__mdiff>:
 800ea14:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea18:	460c      	mov	r4, r1
 800ea1a:	4606      	mov	r6, r0
 800ea1c:	4611      	mov	r1, r2
 800ea1e:	4620      	mov	r0, r4
 800ea20:	4690      	mov	r8, r2
 800ea22:	f7ff ffdb 	bl	800e9dc <__mcmp>
 800ea26:	1e05      	subs	r5, r0, #0
 800ea28:	d110      	bne.n	800ea4c <__mdiff+0x38>
 800ea2a:	4629      	mov	r1, r5
 800ea2c:	4630      	mov	r0, r6
 800ea2e:	f7ff fd53 	bl	800e4d8 <_Balloc>
 800ea32:	b930      	cbnz	r0, 800ea42 <__mdiff+0x2e>
 800ea34:	4b3a      	ldr	r3, [pc, #232]	; (800eb20 <__mdiff+0x10c>)
 800ea36:	4602      	mov	r2, r0
 800ea38:	f240 2132 	movw	r1, #562	; 0x232
 800ea3c:	4839      	ldr	r0, [pc, #228]	; (800eb24 <__mdiff+0x110>)
 800ea3e:	f000 fb31 	bl	800f0a4 <__assert_func>
 800ea42:	2301      	movs	r3, #1
 800ea44:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ea48:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea4c:	bfa4      	itt	ge
 800ea4e:	4643      	movge	r3, r8
 800ea50:	46a0      	movge	r8, r4
 800ea52:	4630      	mov	r0, r6
 800ea54:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ea58:	bfa6      	itte	ge
 800ea5a:	461c      	movge	r4, r3
 800ea5c:	2500      	movge	r5, #0
 800ea5e:	2501      	movlt	r5, #1
 800ea60:	f7ff fd3a 	bl	800e4d8 <_Balloc>
 800ea64:	b920      	cbnz	r0, 800ea70 <__mdiff+0x5c>
 800ea66:	4b2e      	ldr	r3, [pc, #184]	; (800eb20 <__mdiff+0x10c>)
 800ea68:	4602      	mov	r2, r0
 800ea6a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ea6e:	e7e5      	b.n	800ea3c <__mdiff+0x28>
 800ea70:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ea74:	6926      	ldr	r6, [r4, #16]
 800ea76:	60c5      	str	r5, [r0, #12]
 800ea78:	f104 0914 	add.w	r9, r4, #20
 800ea7c:	f108 0514 	add.w	r5, r8, #20
 800ea80:	f100 0e14 	add.w	lr, r0, #20
 800ea84:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ea88:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ea8c:	f108 0210 	add.w	r2, r8, #16
 800ea90:	46f2      	mov	sl, lr
 800ea92:	2100      	movs	r1, #0
 800ea94:	f859 3b04 	ldr.w	r3, [r9], #4
 800ea98:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ea9c:	fa1f f883 	uxth.w	r8, r3
 800eaa0:	fa11 f18b 	uxtah	r1, r1, fp
 800eaa4:	0c1b      	lsrs	r3, r3, #16
 800eaa6:	eba1 0808 	sub.w	r8, r1, r8
 800eaaa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800eaae:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800eab2:	fa1f f888 	uxth.w	r8, r8
 800eab6:	1419      	asrs	r1, r3, #16
 800eab8:	454e      	cmp	r6, r9
 800eaba:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800eabe:	f84a 3b04 	str.w	r3, [sl], #4
 800eac2:	d8e7      	bhi.n	800ea94 <__mdiff+0x80>
 800eac4:	1b33      	subs	r3, r6, r4
 800eac6:	3b15      	subs	r3, #21
 800eac8:	f023 0303 	bic.w	r3, r3, #3
 800eacc:	3304      	adds	r3, #4
 800eace:	3415      	adds	r4, #21
 800ead0:	42a6      	cmp	r6, r4
 800ead2:	bf38      	it	cc
 800ead4:	2304      	movcc	r3, #4
 800ead6:	441d      	add	r5, r3
 800ead8:	4473      	add	r3, lr
 800eada:	469e      	mov	lr, r3
 800eadc:	462e      	mov	r6, r5
 800eade:	4566      	cmp	r6, ip
 800eae0:	d30e      	bcc.n	800eb00 <__mdiff+0xec>
 800eae2:	f10c 0203 	add.w	r2, ip, #3
 800eae6:	1b52      	subs	r2, r2, r5
 800eae8:	f022 0203 	bic.w	r2, r2, #3
 800eaec:	3d03      	subs	r5, #3
 800eaee:	45ac      	cmp	ip, r5
 800eaf0:	bf38      	it	cc
 800eaf2:	2200      	movcc	r2, #0
 800eaf4:	441a      	add	r2, r3
 800eaf6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800eafa:	b17b      	cbz	r3, 800eb1c <__mdiff+0x108>
 800eafc:	6107      	str	r7, [r0, #16]
 800eafe:	e7a3      	b.n	800ea48 <__mdiff+0x34>
 800eb00:	f856 8b04 	ldr.w	r8, [r6], #4
 800eb04:	fa11 f288 	uxtah	r2, r1, r8
 800eb08:	1414      	asrs	r4, r2, #16
 800eb0a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800eb0e:	b292      	uxth	r2, r2
 800eb10:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800eb14:	f84e 2b04 	str.w	r2, [lr], #4
 800eb18:	1421      	asrs	r1, r4, #16
 800eb1a:	e7e0      	b.n	800eade <__mdiff+0xca>
 800eb1c:	3f01      	subs	r7, #1
 800eb1e:	e7ea      	b.n	800eaf6 <__mdiff+0xe2>
 800eb20:	0803d2df 	.word	0x0803d2df
 800eb24:	0803d2f0 	.word	0x0803d2f0

0800eb28 <__d2b>:
 800eb28:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800eb2c:	4689      	mov	r9, r1
 800eb2e:	2101      	movs	r1, #1
 800eb30:	ec57 6b10 	vmov	r6, r7, d0
 800eb34:	4690      	mov	r8, r2
 800eb36:	f7ff fccf 	bl	800e4d8 <_Balloc>
 800eb3a:	4604      	mov	r4, r0
 800eb3c:	b930      	cbnz	r0, 800eb4c <__d2b+0x24>
 800eb3e:	4602      	mov	r2, r0
 800eb40:	4b25      	ldr	r3, [pc, #148]	; (800ebd8 <__d2b+0xb0>)
 800eb42:	4826      	ldr	r0, [pc, #152]	; (800ebdc <__d2b+0xb4>)
 800eb44:	f240 310a 	movw	r1, #778	; 0x30a
 800eb48:	f000 faac 	bl	800f0a4 <__assert_func>
 800eb4c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800eb50:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800eb54:	bb35      	cbnz	r5, 800eba4 <__d2b+0x7c>
 800eb56:	2e00      	cmp	r6, #0
 800eb58:	9301      	str	r3, [sp, #4]
 800eb5a:	d028      	beq.n	800ebae <__d2b+0x86>
 800eb5c:	4668      	mov	r0, sp
 800eb5e:	9600      	str	r6, [sp, #0]
 800eb60:	f7ff fd82 	bl	800e668 <__lo0bits>
 800eb64:	9900      	ldr	r1, [sp, #0]
 800eb66:	b300      	cbz	r0, 800ebaa <__d2b+0x82>
 800eb68:	9a01      	ldr	r2, [sp, #4]
 800eb6a:	f1c0 0320 	rsb	r3, r0, #32
 800eb6e:	fa02 f303 	lsl.w	r3, r2, r3
 800eb72:	430b      	orrs	r3, r1
 800eb74:	40c2      	lsrs	r2, r0
 800eb76:	6163      	str	r3, [r4, #20]
 800eb78:	9201      	str	r2, [sp, #4]
 800eb7a:	9b01      	ldr	r3, [sp, #4]
 800eb7c:	61a3      	str	r3, [r4, #24]
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	bf14      	ite	ne
 800eb82:	2202      	movne	r2, #2
 800eb84:	2201      	moveq	r2, #1
 800eb86:	6122      	str	r2, [r4, #16]
 800eb88:	b1d5      	cbz	r5, 800ebc0 <__d2b+0x98>
 800eb8a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800eb8e:	4405      	add	r5, r0
 800eb90:	f8c9 5000 	str.w	r5, [r9]
 800eb94:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800eb98:	f8c8 0000 	str.w	r0, [r8]
 800eb9c:	4620      	mov	r0, r4
 800eb9e:	b003      	add	sp, #12
 800eba0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eba4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800eba8:	e7d5      	b.n	800eb56 <__d2b+0x2e>
 800ebaa:	6161      	str	r1, [r4, #20]
 800ebac:	e7e5      	b.n	800eb7a <__d2b+0x52>
 800ebae:	a801      	add	r0, sp, #4
 800ebb0:	f7ff fd5a 	bl	800e668 <__lo0bits>
 800ebb4:	9b01      	ldr	r3, [sp, #4]
 800ebb6:	6163      	str	r3, [r4, #20]
 800ebb8:	2201      	movs	r2, #1
 800ebba:	6122      	str	r2, [r4, #16]
 800ebbc:	3020      	adds	r0, #32
 800ebbe:	e7e3      	b.n	800eb88 <__d2b+0x60>
 800ebc0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ebc4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ebc8:	f8c9 0000 	str.w	r0, [r9]
 800ebcc:	6918      	ldr	r0, [r3, #16]
 800ebce:	f7ff fd2b 	bl	800e628 <__hi0bits>
 800ebd2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ebd6:	e7df      	b.n	800eb98 <__d2b+0x70>
 800ebd8:	0803d2df 	.word	0x0803d2df
 800ebdc:	0803d2f0 	.word	0x0803d2f0

0800ebe0 <_calloc_r>:
 800ebe0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ebe2:	fba1 2402 	umull	r2, r4, r1, r2
 800ebe6:	b94c      	cbnz	r4, 800ebfc <_calloc_r+0x1c>
 800ebe8:	4611      	mov	r1, r2
 800ebea:	9201      	str	r2, [sp, #4]
 800ebec:	f000 f87a 	bl	800ece4 <_malloc_r>
 800ebf0:	9a01      	ldr	r2, [sp, #4]
 800ebf2:	4605      	mov	r5, r0
 800ebf4:	b930      	cbnz	r0, 800ec04 <_calloc_r+0x24>
 800ebf6:	4628      	mov	r0, r5
 800ebf8:	b003      	add	sp, #12
 800ebfa:	bd30      	pop	{r4, r5, pc}
 800ebfc:	220c      	movs	r2, #12
 800ebfe:	6002      	str	r2, [r0, #0]
 800ec00:	2500      	movs	r5, #0
 800ec02:	e7f8      	b.n	800ebf6 <_calloc_r+0x16>
 800ec04:	4621      	mov	r1, r4
 800ec06:	f7fe f92f 	bl	800ce68 <memset>
 800ec0a:	e7f4      	b.n	800ebf6 <_calloc_r+0x16>

0800ec0c <_free_r>:
 800ec0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ec0e:	2900      	cmp	r1, #0
 800ec10:	d044      	beq.n	800ec9c <_free_r+0x90>
 800ec12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ec16:	9001      	str	r0, [sp, #4]
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	f1a1 0404 	sub.w	r4, r1, #4
 800ec1e:	bfb8      	it	lt
 800ec20:	18e4      	addlt	r4, r4, r3
 800ec22:	f000 fa9b 	bl	800f15c <__malloc_lock>
 800ec26:	4a1e      	ldr	r2, [pc, #120]	; (800eca0 <_free_r+0x94>)
 800ec28:	9801      	ldr	r0, [sp, #4]
 800ec2a:	6813      	ldr	r3, [r2, #0]
 800ec2c:	b933      	cbnz	r3, 800ec3c <_free_r+0x30>
 800ec2e:	6063      	str	r3, [r4, #4]
 800ec30:	6014      	str	r4, [r2, #0]
 800ec32:	b003      	add	sp, #12
 800ec34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ec38:	f000 ba96 	b.w	800f168 <__malloc_unlock>
 800ec3c:	42a3      	cmp	r3, r4
 800ec3e:	d908      	bls.n	800ec52 <_free_r+0x46>
 800ec40:	6825      	ldr	r5, [r4, #0]
 800ec42:	1961      	adds	r1, r4, r5
 800ec44:	428b      	cmp	r3, r1
 800ec46:	bf01      	itttt	eq
 800ec48:	6819      	ldreq	r1, [r3, #0]
 800ec4a:	685b      	ldreq	r3, [r3, #4]
 800ec4c:	1949      	addeq	r1, r1, r5
 800ec4e:	6021      	streq	r1, [r4, #0]
 800ec50:	e7ed      	b.n	800ec2e <_free_r+0x22>
 800ec52:	461a      	mov	r2, r3
 800ec54:	685b      	ldr	r3, [r3, #4]
 800ec56:	b10b      	cbz	r3, 800ec5c <_free_r+0x50>
 800ec58:	42a3      	cmp	r3, r4
 800ec5a:	d9fa      	bls.n	800ec52 <_free_r+0x46>
 800ec5c:	6811      	ldr	r1, [r2, #0]
 800ec5e:	1855      	adds	r5, r2, r1
 800ec60:	42a5      	cmp	r5, r4
 800ec62:	d10b      	bne.n	800ec7c <_free_r+0x70>
 800ec64:	6824      	ldr	r4, [r4, #0]
 800ec66:	4421      	add	r1, r4
 800ec68:	1854      	adds	r4, r2, r1
 800ec6a:	42a3      	cmp	r3, r4
 800ec6c:	6011      	str	r1, [r2, #0]
 800ec6e:	d1e0      	bne.n	800ec32 <_free_r+0x26>
 800ec70:	681c      	ldr	r4, [r3, #0]
 800ec72:	685b      	ldr	r3, [r3, #4]
 800ec74:	6053      	str	r3, [r2, #4]
 800ec76:	4421      	add	r1, r4
 800ec78:	6011      	str	r1, [r2, #0]
 800ec7a:	e7da      	b.n	800ec32 <_free_r+0x26>
 800ec7c:	d902      	bls.n	800ec84 <_free_r+0x78>
 800ec7e:	230c      	movs	r3, #12
 800ec80:	6003      	str	r3, [r0, #0]
 800ec82:	e7d6      	b.n	800ec32 <_free_r+0x26>
 800ec84:	6825      	ldr	r5, [r4, #0]
 800ec86:	1961      	adds	r1, r4, r5
 800ec88:	428b      	cmp	r3, r1
 800ec8a:	bf04      	itt	eq
 800ec8c:	6819      	ldreq	r1, [r3, #0]
 800ec8e:	685b      	ldreq	r3, [r3, #4]
 800ec90:	6063      	str	r3, [r4, #4]
 800ec92:	bf04      	itt	eq
 800ec94:	1949      	addeq	r1, r1, r5
 800ec96:	6021      	streq	r1, [r4, #0]
 800ec98:	6054      	str	r4, [r2, #4]
 800ec9a:	e7ca      	b.n	800ec32 <_free_r+0x26>
 800ec9c:	b003      	add	sp, #12
 800ec9e:	bd30      	pop	{r4, r5, pc}
 800eca0:	200008c8 	.word	0x200008c8

0800eca4 <sbrk_aligned>:
 800eca4:	b570      	push	{r4, r5, r6, lr}
 800eca6:	4e0e      	ldr	r6, [pc, #56]	; (800ece0 <sbrk_aligned+0x3c>)
 800eca8:	460c      	mov	r4, r1
 800ecaa:	6831      	ldr	r1, [r6, #0]
 800ecac:	4605      	mov	r5, r0
 800ecae:	b911      	cbnz	r1, 800ecb6 <sbrk_aligned+0x12>
 800ecb0:	f000 f9e8 	bl	800f084 <_sbrk_r>
 800ecb4:	6030      	str	r0, [r6, #0]
 800ecb6:	4621      	mov	r1, r4
 800ecb8:	4628      	mov	r0, r5
 800ecba:	f000 f9e3 	bl	800f084 <_sbrk_r>
 800ecbe:	1c43      	adds	r3, r0, #1
 800ecc0:	d00a      	beq.n	800ecd8 <sbrk_aligned+0x34>
 800ecc2:	1cc4      	adds	r4, r0, #3
 800ecc4:	f024 0403 	bic.w	r4, r4, #3
 800ecc8:	42a0      	cmp	r0, r4
 800ecca:	d007      	beq.n	800ecdc <sbrk_aligned+0x38>
 800eccc:	1a21      	subs	r1, r4, r0
 800ecce:	4628      	mov	r0, r5
 800ecd0:	f000 f9d8 	bl	800f084 <_sbrk_r>
 800ecd4:	3001      	adds	r0, #1
 800ecd6:	d101      	bne.n	800ecdc <sbrk_aligned+0x38>
 800ecd8:	f04f 34ff 	mov.w	r4, #4294967295
 800ecdc:	4620      	mov	r0, r4
 800ecde:	bd70      	pop	{r4, r5, r6, pc}
 800ece0:	200008cc 	.word	0x200008cc

0800ece4 <_malloc_r>:
 800ece4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ece8:	1ccd      	adds	r5, r1, #3
 800ecea:	f025 0503 	bic.w	r5, r5, #3
 800ecee:	3508      	adds	r5, #8
 800ecf0:	2d0c      	cmp	r5, #12
 800ecf2:	bf38      	it	cc
 800ecf4:	250c      	movcc	r5, #12
 800ecf6:	2d00      	cmp	r5, #0
 800ecf8:	4607      	mov	r7, r0
 800ecfa:	db01      	blt.n	800ed00 <_malloc_r+0x1c>
 800ecfc:	42a9      	cmp	r1, r5
 800ecfe:	d905      	bls.n	800ed0c <_malloc_r+0x28>
 800ed00:	230c      	movs	r3, #12
 800ed02:	603b      	str	r3, [r7, #0]
 800ed04:	2600      	movs	r6, #0
 800ed06:	4630      	mov	r0, r6
 800ed08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed0c:	4e2e      	ldr	r6, [pc, #184]	; (800edc8 <_malloc_r+0xe4>)
 800ed0e:	f000 fa25 	bl	800f15c <__malloc_lock>
 800ed12:	6833      	ldr	r3, [r6, #0]
 800ed14:	461c      	mov	r4, r3
 800ed16:	bb34      	cbnz	r4, 800ed66 <_malloc_r+0x82>
 800ed18:	4629      	mov	r1, r5
 800ed1a:	4638      	mov	r0, r7
 800ed1c:	f7ff ffc2 	bl	800eca4 <sbrk_aligned>
 800ed20:	1c43      	adds	r3, r0, #1
 800ed22:	4604      	mov	r4, r0
 800ed24:	d14d      	bne.n	800edc2 <_malloc_r+0xde>
 800ed26:	6834      	ldr	r4, [r6, #0]
 800ed28:	4626      	mov	r6, r4
 800ed2a:	2e00      	cmp	r6, #0
 800ed2c:	d140      	bne.n	800edb0 <_malloc_r+0xcc>
 800ed2e:	6823      	ldr	r3, [r4, #0]
 800ed30:	4631      	mov	r1, r6
 800ed32:	4638      	mov	r0, r7
 800ed34:	eb04 0803 	add.w	r8, r4, r3
 800ed38:	f000 f9a4 	bl	800f084 <_sbrk_r>
 800ed3c:	4580      	cmp	r8, r0
 800ed3e:	d13a      	bne.n	800edb6 <_malloc_r+0xd2>
 800ed40:	6821      	ldr	r1, [r4, #0]
 800ed42:	3503      	adds	r5, #3
 800ed44:	1a6d      	subs	r5, r5, r1
 800ed46:	f025 0503 	bic.w	r5, r5, #3
 800ed4a:	3508      	adds	r5, #8
 800ed4c:	2d0c      	cmp	r5, #12
 800ed4e:	bf38      	it	cc
 800ed50:	250c      	movcc	r5, #12
 800ed52:	4629      	mov	r1, r5
 800ed54:	4638      	mov	r0, r7
 800ed56:	f7ff ffa5 	bl	800eca4 <sbrk_aligned>
 800ed5a:	3001      	adds	r0, #1
 800ed5c:	d02b      	beq.n	800edb6 <_malloc_r+0xd2>
 800ed5e:	6823      	ldr	r3, [r4, #0]
 800ed60:	442b      	add	r3, r5
 800ed62:	6023      	str	r3, [r4, #0]
 800ed64:	e00e      	b.n	800ed84 <_malloc_r+0xa0>
 800ed66:	6822      	ldr	r2, [r4, #0]
 800ed68:	1b52      	subs	r2, r2, r5
 800ed6a:	d41e      	bmi.n	800edaa <_malloc_r+0xc6>
 800ed6c:	2a0b      	cmp	r2, #11
 800ed6e:	d916      	bls.n	800ed9e <_malloc_r+0xba>
 800ed70:	1961      	adds	r1, r4, r5
 800ed72:	42a3      	cmp	r3, r4
 800ed74:	6025      	str	r5, [r4, #0]
 800ed76:	bf18      	it	ne
 800ed78:	6059      	strne	r1, [r3, #4]
 800ed7a:	6863      	ldr	r3, [r4, #4]
 800ed7c:	bf08      	it	eq
 800ed7e:	6031      	streq	r1, [r6, #0]
 800ed80:	5162      	str	r2, [r4, r5]
 800ed82:	604b      	str	r3, [r1, #4]
 800ed84:	4638      	mov	r0, r7
 800ed86:	f104 060b 	add.w	r6, r4, #11
 800ed8a:	f000 f9ed 	bl	800f168 <__malloc_unlock>
 800ed8e:	f026 0607 	bic.w	r6, r6, #7
 800ed92:	1d23      	adds	r3, r4, #4
 800ed94:	1af2      	subs	r2, r6, r3
 800ed96:	d0b6      	beq.n	800ed06 <_malloc_r+0x22>
 800ed98:	1b9b      	subs	r3, r3, r6
 800ed9a:	50a3      	str	r3, [r4, r2]
 800ed9c:	e7b3      	b.n	800ed06 <_malloc_r+0x22>
 800ed9e:	6862      	ldr	r2, [r4, #4]
 800eda0:	42a3      	cmp	r3, r4
 800eda2:	bf0c      	ite	eq
 800eda4:	6032      	streq	r2, [r6, #0]
 800eda6:	605a      	strne	r2, [r3, #4]
 800eda8:	e7ec      	b.n	800ed84 <_malloc_r+0xa0>
 800edaa:	4623      	mov	r3, r4
 800edac:	6864      	ldr	r4, [r4, #4]
 800edae:	e7b2      	b.n	800ed16 <_malloc_r+0x32>
 800edb0:	4634      	mov	r4, r6
 800edb2:	6876      	ldr	r6, [r6, #4]
 800edb4:	e7b9      	b.n	800ed2a <_malloc_r+0x46>
 800edb6:	230c      	movs	r3, #12
 800edb8:	603b      	str	r3, [r7, #0]
 800edba:	4638      	mov	r0, r7
 800edbc:	f000 f9d4 	bl	800f168 <__malloc_unlock>
 800edc0:	e7a1      	b.n	800ed06 <_malloc_r+0x22>
 800edc2:	6025      	str	r5, [r4, #0]
 800edc4:	e7de      	b.n	800ed84 <_malloc_r+0xa0>
 800edc6:	bf00      	nop
 800edc8:	200008c8 	.word	0x200008c8

0800edcc <__ssputs_r>:
 800edcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800edd0:	688e      	ldr	r6, [r1, #8]
 800edd2:	429e      	cmp	r6, r3
 800edd4:	4682      	mov	sl, r0
 800edd6:	460c      	mov	r4, r1
 800edd8:	4690      	mov	r8, r2
 800edda:	461f      	mov	r7, r3
 800eddc:	d838      	bhi.n	800ee50 <__ssputs_r+0x84>
 800edde:	898a      	ldrh	r2, [r1, #12]
 800ede0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ede4:	d032      	beq.n	800ee4c <__ssputs_r+0x80>
 800ede6:	6825      	ldr	r5, [r4, #0]
 800ede8:	6909      	ldr	r1, [r1, #16]
 800edea:	eba5 0901 	sub.w	r9, r5, r1
 800edee:	6965      	ldr	r5, [r4, #20]
 800edf0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800edf4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800edf8:	3301      	adds	r3, #1
 800edfa:	444b      	add	r3, r9
 800edfc:	106d      	asrs	r5, r5, #1
 800edfe:	429d      	cmp	r5, r3
 800ee00:	bf38      	it	cc
 800ee02:	461d      	movcc	r5, r3
 800ee04:	0553      	lsls	r3, r2, #21
 800ee06:	d531      	bpl.n	800ee6c <__ssputs_r+0xa0>
 800ee08:	4629      	mov	r1, r5
 800ee0a:	f7ff ff6b 	bl	800ece4 <_malloc_r>
 800ee0e:	4606      	mov	r6, r0
 800ee10:	b950      	cbnz	r0, 800ee28 <__ssputs_r+0x5c>
 800ee12:	230c      	movs	r3, #12
 800ee14:	f8ca 3000 	str.w	r3, [sl]
 800ee18:	89a3      	ldrh	r3, [r4, #12]
 800ee1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ee1e:	81a3      	strh	r3, [r4, #12]
 800ee20:	f04f 30ff 	mov.w	r0, #4294967295
 800ee24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee28:	6921      	ldr	r1, [r4, #16]
 800ee2a:	464a      	mov	r2, r9
 800ee2c:	f7ff fb46 	bl	800e4bc <memcpy>
 800ee30:	89a3      	ldrh	r3, [r4, #12]
 800ee32:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ee36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ee3a:	81a3      	strh	r3, [r4, #12]
 800ee3c:	6126      	str	r6, [r4, #16]
 800ee3e:	6165      	str	r5, [r4, #20]
 800ee40:	444e      	add	r6, r9
 800ee42:	eba5 0509 	sub.w	r5, r5, r9
 800ee46:	6026      	str	r6, [r4, #0]
 800ee48:	60a5      	str	r5, [r4, #8]
 800ee4a:	463e      	mov	r6, r7
 800ee4c:	42be      	cmp	r6, r7
 800ee4e:	d900      	bls.n	800ee52 <__ssputs_r+0x86>
 800ee50:	463e      	mov	r6, r7
 800ee52:	6820      	ldr	r0, [r4, #0]
 800ee54:	4632      	mov	r2, r6
 800ee56:	4641      	mov	r1, r8
 800ee58:	f000 f966 	bl	800f128 <memmove>
 800ee5c:	68a3      	ldr	r3, [r4, #8]
 800ee5e:	1b9b      	subs	r3, r3, r6
 800ee60:	60a3      	str	r3, [r4, #8]
 800ee62:	6823      	ldr	r3, [r4, #0]
 800ee64:	4433      	add	r3, r6
 800ee66:	6023      	str	r3, [r4, #0]
 800ee68:	2000      	movs	r0, #0
 800ee6a:	e7db      	b.n	800ee24 <__ssputs_r+0x58>
 800ee6c:	462a      	mov	r2, r5
 800ee6e:	f000 f981 	bl	800f174 <_realloc_r>
 800ee72:	4606      	mov	r6, r0
 800ee74:	2800      	cmp	r0, #0
 800ee76:	d1e1      	bne.n	800ee3c <__ssputs_r+0x70>
 800ee78:	6921      	ldr	r1, [r4, #16]
 800ee7a:	4650      	mov	r0, sl
 800ee7c:	f7ff fec6 	bl	800ec0c <_free_r>
 800ee80:	e7c7      	b.n	800ee12 <__ssputs_r+0x46>
	...

0800ee84 <_svfiprintf_r>:
 800ee84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee88:	4698      	mov	r8, r3
 800ee8a:	898b      	ldrh	r3, [r1, #12]
 800ee8c:	061b      	lsls	r3, r3, #24
 800ee8e:	b09d      	sub	sp, #116	; 0x74
 800ee90:	4607      	mov	r7, r0
 800ee92:	460d      	mov	r5, r1
 800ee94:	4614      	mov	r4, r2
 800ee96:	d50e      	bpl.n	800eeb6 <_svfiprintf_r+0x32>
 800ee98:	690b      	ldr	r3, [r1, #16]
 800ee9a:	b963      	cbnz	r3, 800eeb6 <_svfiprintf_r+0x32>
 800ee9c:	2140      	movs	r1, #64	; 0x40
 800ee9e:	f7ff ff21 	bl	800ece4 <_malloc_r>
 800eea2:	6028      	str	r0, [r5, #0]
 800eea4:	6128      	str	r0, [r5, #16]
 800eea6:	b920      	cbnz	r0, 800eeb2 <_svfiprintf_r+0x2e>
 800eea8:	230c      	movs	r3, #12
 800eeaa:	603b      	str	r3, [r7, #0]
 800eeac:	f04f 30ff 	mov.w	r0, #4294967295
 800eeb0:	e0d1      	b.n	800f056 <_svfiprintf_r+0x1d2>
 800eeb2:	2340      	movs	r3, #64	; 0x40
 800eeb4:	616b      	str	r3, [r5, #20]
 800eeb6:	2300      	movs	r3, #0
 800eeb8:	9309      	str	r3, [sp, #36]	; 0x24
 800eeba:	2320      	movs	r3, #32
 800eebc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800eec0:	f8cd 800c 	str.w	r8, [sp, #12]
 800eec4:	2330      	movs	r3, #48	; 0x30
 800eec6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f070 <_svfiprintf_r+0x1ec>
 800eeca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800eece:	f04f 0901 	mov.w	r9, #1
 800eed2:	4623      	mov	r3, r4
 800eed4:	469a      	mov	sl, r3
 800eed6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eeda:	b10a      	cbz	r2, 800eee0 <_svfiprintf_r+0x5c>
 800eedc:	2a25      	cmp	r2, #37	; 0x25
 800eede:	d1f9      	bne.n	800eed4 <_svfiprintf_r+0x50>
 800eee0:	ebba 0b04 	subs.w	fp, sl, r4
 800eee4:	d00b      	beq.n	800eefe <_svfiprintf_r+0x7a>
 800eee6:	465b      	mov	r3, fp
 800eee8:	4622      	mov	r2, r4
 800eeea:	4629      	mov	r1, r5
 800eeec:	4638      	mov	r0, r7
 800eeee:	f7ff ff6d 	bl	800edcc <__ssputs_r>
 800eef2:	3001      	adds	r0, #1
 800eef4:	f000 80aa 	beq.w	800f04c <_svfiprintf_r+0x1c8>
 800eef8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eefa:	445a      	add	r2, fp
 800eefc:	9209      	str	r2, [sp, #36]	; 0x24
 800eefe:	f89a 3000 	ldrb.w	r3, [sl]
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	f000 80a2 	beq.w	800f04c <_svfiprintf_r+0x1c8>
 800ef08:	2300      	movs	r3, #0
 800ef0a:	f04f 32ff 	mov.w	r2, #4294967295
 800ef0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ef12:	f10a 0a01 	add.w	sl, sl, #1
 800ef16:	9304      	str	r3, [sp, #16]
 800ef18:	9307      	str	r3, [sp, #28]
 800ef1a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ef1e:	931a      	str	r3, [sp, #104]	; 0x68
 800ef20:	4654      	mov	r4, sl
 800ef22:	2205      	movs	r2, #5
 800ef24:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef28:	4851      	ldr	r0, [pc, #324]	; (800f070 <_svfiprintf_r+0x1ec>)
 800ef2a:	f7f1 f961 	bl	80001f0 <memchr>
 800ef2e:	9a04      	ldr	r2, [sp, #16]
 800ef30:	b9d8      	cbnz	r0, 800ef6a <_svfiprintf_r+0xe6>
 800ef32:	06d0      	lsls	r0, r2, #27
 800ef34:	bf44      	itt	mi
 800ef36:	2320      	movmi	r3, #32
 800ef38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ef3c:	0711      	lsls	r1, r2, #28
 800ef3e:	bf44      	itt	mi
 800ef40:	232b      	movmi	r3, #43	; 0x2b
 800ef42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ef46:	f89a 3000 	ldrb.w	r3, [sl]
 800ef4a:	2b2a      	cmp	r3, #42	; 0x2a
 800ef4c:	d015      	beq.n	800ef7a <_svfiprintf_r+0xf6>
 800ef4e:	9a07      	ldr	r2, [sp, #28]
 800ef50:	4654      	mov	r4, sl
 800ef52:	2000      	movs	r0, #0
 800ef54:	f04f 0c0a 	mov.w	ip, #10
 800ef58:	4621      	mov	r1, r4
 800ef5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ef5e:	3b30      	subs	r3, #48	; 0x30
 800ef60:	2b09      	cmp	r3, #9
 800ef62:	d94e      	bls.n	800f002 <_svfiprintf_r+0x17e>
 800ef64:	b1b0      	cbz	r0, 800ef94 <_svfiprintf_r+0x110>
 800ef66:	9207      	str	r2, [sp, #28]
 800ef68:	e014      	b.n	800ef94 <_svfiprintf_r+0x110>
 800ef6a:	eba0 0308 	sub.w	r3, r0, r8
 800ef6e:	fa09 f303 	lsl.w	r3, r9, r3
 800ef72:	4313      	orrs	r3, r2
 800ef74:	9304      	str	r3, [sp, #16]
 800ef76:	46a2      	mov	sl, r4
 800ef78:	e7d2      	b.n	800ef20 <_svfiprintf_r+0x9c>
 800ef7a:	9b03      	ldr	r3, [sp, #12]
 800ef7c:	1d19      	adds	r1, r3, #4
 800ef7e:	681b      	ldr	r3, [r3, #0]
 800ef80:	9103      	str	r1, [sp, #12]
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	bfbb      	ittet	lt
 800ef86:	425b      	neglt	r3, r3
 800ef88:	f042 0202 	orrlt.w	r2, r2, #2
 800ef8c:	9307      	strge	r3, [sp, #28]
 800ef8e:	9307      	strlt	r3, [sp, #28]
 800ef90:	bfb8      	it	lt
 800ef92:	9204      	strlt	r2, [sp, #16]
 800ef94:	7823      	ldrb	r3, [r4, #0]
 800ef96:	2b2e      	cmp	r3, #46	; 0x2e
 800ef98:	d10c      	bne.n	800efb4 <_svfiprintf_r+0x130>
 800ef9a:	7863      	ldrb	r3, [r4, #1]
 800ef9c:	2b2a      	cmp	r3, #42	; 0x2a
 800ef9e:	d135      	bne.n	800f00c <_svfiprintf_r+0x188>
 800efa0:	9b03      	ldr	r3, [sp, #12]
 800efa2:	1d1a      	adds	r2, r3, #4
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	9203      	str	r2, [sp, #12]
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	bfb8      	it	lt
 800efac:	f04f 33ff 	movlt.w	r3, #4294967295
 800efb0:	3402      	adds	r4, #2
 800efb2:	9305      	str	r3, [sp, #20]
 800efb4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f080 <_svfiprintf_r+0x1fc>
 800efb8:	7821      	ldrb	r1, [r4, #0]
 800efba:	2203      	movs	r2, #3
 800efbc:	4650      	mov	r0, sl
 800efbe:	f7f1 f917 	bl	80001f0 <memchr>
 800efc2:	b140      	cbz	r0, 800efd6 <_svfiprintf_r+0x152>
 800efc4:	2340      	movs	r3, #64	; 0x40
 800efc6:	eba0 000a 	sub.w	r0, r0, sl
 800efca:	fa03 f000 	lsl.w	r0, r3, r0
 800efce:	9b04      	ldr	r3, [sp, #16]
 800efd0:	4303      	orrs	r3, r0
 800efd2:	3401      	adds	r4, #1
 800efd4:	9304      	str	r3, [sp, #16]
 800efd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800efda:	4826      	ldr	r0, [pc, #152]	; (800f074 <_svfiprintf_r+0x1f0>)
 800efdc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800efe0:	2206      	movs	r2, #6
 800efe2:	f7f1 f905 	bl	80001f0 <memchr>
 800efe6:	2800      	cmp	r0, #0
 800efe8:	d038      	beq.n	800f05c <_svfiprintf_r+0x1d8>
 800efea:	4b23      	ldr	r3, [pc, #140]	; (800f078 <_svfiprintf_r+0x1f4>)
 800efec:	bb1b      	cbnz	r3, 800f036 <_svfiprintf_r+0x1b2>
 800efee:	9b03      	ldr	r3, [sp, #12]
 800eff0:	3307      	adds	r3, #7
 800eff2:	f023 0307 	bic.w	r3, r3, #7
 800eff6:	3308      	adds	r3, #8
 800eff8:	9303      	str	r3, [sp, #12]
 800effa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800effc:	4433      	add	r3, r6
 800effe:	9309      	str	r3, [sp, #36]	; 0x24
 800f000:	e767      	b.n	800eed2 <_svfiprintf_r+0x4e>
 800f002:	fb0c 3202 	mla	r2, ip, r2, r3
 800f006:	460c      	mov	r4, r1
 800f008:	2001      	movs	r0, #1
 800f00a:	e7a5      	b.n	800ef58 <_svfiprintf_r+0xd4>
 800f00c:	2300      	movs	r3, #0
 800f00e:	3401      	adds	r4, #1
 800f010:	9305      	str	r3, [sp, #20]
 800f012:	4619      	mov	r1, r3
 800f014:	f04f 0c0a 	mov.w	ip, #10
 800f018:	4620      	mov	r0, r4
 800f01a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f01e:	3a30      	subs	r2, #48	; 0x30
 800f020:	2a09      	cmp	r2, #9
 800f022:	d903      	bls.n	800f02c <_svfiprintf_r+0x1a8>
 800f024:	2b00      	cmp	r3, #0
 800f026:	d0c5      	beq.n	800efb4 <_svfiprintf_r+0x130>
 800f028:	9105      	str	r1, [sp, #20]
 800f02a:	e7c3      	b.n	800efb4 <_svfiprintf_r+0x130>
 800f02c:	fb0c 2101 	mla	r1, ip, r1, r2
 800f030:	4604      	mov	r4, r0
 800f032:	2301      	movs	r3, #1
 800f034:	e7f0      	b.n	800f018 <_svfiprintf_r+0x194>
 800f036:	ab03      	add	r3, sp, #12
 800f038:	9300      	str	r3, [sp, #0]
 800f03a:	462a      	mov	r2, r5
 800f03c:	4b0f      	ldr	r3, [pc, #60]	; (800f07c <_svfiprintf_r+0x1f8>)
 800f03e:	a904      	add	r1, sp, #16
 800f040:	4638      	mov	r0, r7
 800f042:	f7fd ffb9 	bl	800cfb8 <_printf_float>
 800f046:	1c42      	adds	r2, r0, #1
 800f048:	4606      	mov	r6, r0
 800f04a:	d1d6      	bne.n	800effa <_svfiprintf_r+0x176>
 800f04c:	89ab      	ldrh	r3, [r5, #12]
 800f04e:	065b      	lsls	r3, r3, #25
 800f050:	f53f af2c 	bmi.w	800eeac <_svfiprintf_r+0x28>
 800f054:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f056:	b01d      	add	sp, #116	; 0x74
 800f058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f05c:	ab03      	add	r3, sp, #12
 800f05e:	9300      	str	r3, [sp, #0]
 800f060:	462a      	mov	r2, r5
 800f062:	4b06      	ldr	r3, [pc, #24]	; (800f07c <_svfiprintf_r+0x1f8>)
 800f064:	a904      	add	r1, sp, #16
 800f066:	4638      	mov	r0, r7
 800f068:	f7fe fa4a 	bl	800d500 <_printf_i>
 800f06c:	e7eb      	b.n	800f046 <_svfiprintf_r+0x1c2>
 800f06e:	bf00      	nop
 800f070:	0803d44c 	.word	0x0803d44c
 800f074:	0803d456 	.word	0x0803d456
 800f078:	0800cfb9 	.word	0x0800cfb9
 800f07c:	0800edcd 	.word	0x0800edcd
 800f080:	0803d452 	.word	0x0803d452

0800f084 <_sbrk_r>:
 800f084:	b538      	push	{r3, r4, r5, lr}
 800f086:	4d06      	ldr	r5, [pc, #24]	; (800f0a0 <_sbrk_r+0x1c>)
 800f088:	2300      	movs	r3, #0
 800f08a:	4604      	mov	r4, r0
 800f08c:	4608      	mov	r0, r1
 800f08e:	602b      	str	r3, [r5, #0]
 800f090:	f7f6 fb38 	bl	8005704 <_sbrk>
 800f094:	1c43      	adds	r3, r0, #1
 800f096:	d102      	bne.n	800f09e <_sbrk_r+0x1a>
 800f098:	682b      	ldr	r3, [r5, #0]
 800f09a:	b103      	cbz	r3, 800f09e <_sbrk_r+0x1a>
 800f09c:	6023      	str	r3, [r4, #0]
 800f09e:	bd38      	pop	{r3, r4, r5, pc}
 800f0a0:	200008d0 	.word	0x200008d0

0800f0a4 <__assert_func>:
 800f0a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f0a6:	4614      	mov	r4, r2
 800f0a8:	461a      	mov	r2, r3
 800f0aa:	4b09      	ldr	r3, [pc, #36]	; (800f0d0 <__assert_func+0x2c>)
 800f0ac:	681b      	ldr	r3, [r3, #0]
 800f0ae:	4605      	mov	r5, r0
 800f0b0:	68d8      	ldr	r0, [r3, #12]
 800f0b2:	b14c      	cbz	r4, 800f0c8 <__assert_func+0x24>
 800f0b4:	4b07      	ldr	r3, [pc, #28]	; (800f0d4 <__assert_func+0x30>)
 800f0b6:	9100      	str	r1, [sp, #0]
 800f0b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f0bc:	4906      	ldr	r1, [pc, #24]	; (800f0d8 <__assert_func+0x34>)
 800f0be:	462b      	mov	r3, r5
 800f0c0:	f000 f80e 	bl	800f0e0 <fiprintf>
 800f0c4:	f000 faac 	bl	800f620 <abort>
 800f0c8:	4b04      	ldr	r3, [pc, #16]	; (800f0dc <__assert_func+0x38>)
 800f0ca:	461c      	mov	r4, r3
 800f0cc:	e7f3      	b.n	800f0b6 <__assert_func+0x12>
 800f0ce:	bf00      	nop
 800f0d0:	20000250 	.word	0x20000250
 800f0d4:	0803d45d 	.word	0x0803d45d
 800f0d8:	0803d46a 	.word	0x0803d46a
 800f0dc:	0803d498 	.word	0x0803d498

0800f0e0 <fiprintf>:
 800f0e0:	b40e      	push	{r1, r2, r3}
 800f0e2:	b503      	push	{r0, r1, lr}
 800f0e4:	4601      	mov	r1, r0
 800f0e6:	ab03      	add	r3, sp, #12
 800f0e8:	4805      	ldr	r0, [pc, #20]	; (800f100 <fiprintf+0x20>)
 800f0ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800f0ee:	6800      	ldr	r0, [r0, #0]
 800f0f0:	9301      	str	r3, [sp, #4]
 800f0f2:	f000 f897 	bl	800f224 <_vfiprintf_r>
 800f0f6:	b002      	add	sp, #8
 800f0f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800f0fc:	b003      	add	sp, #12
 800f0fe:	4770      	bx	lr
 800f100:	20000250 	.word	0x20000250

0800f104 <__ascii_mbtowc>:
 800f104:	b082      	sub	sp, #8
 800f106:	b901      	cbnz	r1, 800f10a <__ascii_mbtowc+0x6>
 800f108:	a901      	add	r1, sp, #4
 800f10a:	b142      	cbz	r2, 800f11e <__ascii_mbtowc+0x1a>
 800f10c:	b14b      	cbz	r3, 800f122 <__ascii_mbtowc+0x1e>
 800f10e:	7813      	ldrb	r3, [r2, #0]
 800f110:	600b      	str	r3, [r1, #0]
 800f112:	7812      	ldrb	r2, [r2, #0]
 800f114:	1e10      	subs	r0, r2, #0
 800f116:	bf18      	it	ne
 800f118:	2001      	movne	r0, #1
 800f11a:	b002      	add	sp, #8
 800f11c:	4770      	bx	lr
 800f11e:	4610      	mov	r0, r2
 800f120:	e7fb      	b.n	800f11a <__ascii_mbtowc+0x16>
 800f122:	f06f 0001 	mvn.w	r0, #1
 800f126:	e7f8      	b.n	800f11a <__ascii_mbtowc+0x16>

0800f128 <memmove>:
 800f128:	4288      	cmp	r0, r1
 800f12a:	b510      	push	{r4, lr}
 800f12c:	eb01 0402 	add.w	r4, r1, r2
 800f130:	d902      	bls.n	800f138 <memmove+0x10>
 800f132:	4284      	cmp	r4, r0
 800f134:	4623      	mov	r3, r4
 800f136:	d807      	bhi.n	800f148 <memmove+0x20>
 800f138:	1e43      	subs	r3, r0, #1
 800f13a:	42a1      	cmp	r1, r4
 800f13c:	d008      	beq.n	800f150 <memmove+0x28>
 800f13e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f142:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f146:	e7f8      	b.n	800f13a <memmove+0x12>
 800f148:	4402      	add	r2, r0
 800f14a:	4601      	mov	r1, r0
 800f14c:	428a      	cmp	r2, r1
 800f14e:	d100      	bne.n	800f152 <memmove+0x2a>
 800f150:	bd10      	pop	{r4, pc}
 800f152:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f156:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f15a:	e7f7      	b.n	800f14c <memmove+0x24>

0800f15c <__malloc_lock>:
 800f15c:	4801      	ldr	r0, [pc, #4]	; (800f164 <__malloc_lock+0x8>)
 800f15e:	f000 bc1f 	b.w	800f9a0 <__retarget_lock_acquire_recursive>
 800f162:	bf00      	nop
 800f164:	200008d4 	.word	0x200008d4

0800f168 <__malloc_unlock>:
 800f168:	4801      	ldr	r0, [pc, #4]	; (800f170 <__malloc_unlock+0x8>)
 800f16a:	f000 bc1a 	b.w	800f9a2 <__retarget_lock_release_recursive>
 800f16e:	bf00      	nop
 800f170:	200008d4 	.word	0x200008d4

0800f174 <_realloc_r>:
 800f174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f178:	4680      	mov	r8, r0
 800f17a:	4614      	mov	r4, r2
 800f17c:	460e      	mov	r6, r1
 800f17e:	b921      	cbnz	r1, 800f18a <_realloc_r+0x16>
 800f180:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f184:	4611      	mov	r1, r2
 800f186:	f7ff bdad 	b.w	800ece4 <_malloc_r>
 800f18a:	b92a      	cbnz	r2, 800f198 <_realloc_r+0x24>
 800f18c:	f7ff fd3e 	bl	800ec0c <_free_r>
 800f190:	4625      	mov	r5, r4
 800f192:	4628      	mov	r0, r5
 800f194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f198:	f000 fc6a 	bl	800fa70 <_malloc_usable_size_r>
 800f19c:	4284      	cmp	r4, r0
 800f19e:	4607      	mov	r7, r0
 800f1a0:	d802      	bhi.n	800f1a8 <_realloc_r+0x34>
 800f1a2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f1a6:	d812      	bhi.n	800f1ce <_realloc_r+0x5a>
 800f1a8:	4621      	mov	r1, r4
 800f1aa:	4640      	mov	r0, r8
 800f1ac:	f7ff fd9a 	bl	800ece4 <_malloc_r>
 800f1b0:	4605      	mov	r5, r0
 800f1b2:	2800      	cmp	r0, #0
 800f1b4:	d0ed      	beq.n	800f192 <_realloc_r+0x1e>
 800f1b6:	42bc      	cmp	r4, r7
 800f1b8:	4622      	mov	r2, r4
 800f1ba:	4631      	mov	r1, r6
 800f1bc:	bf28      	it	cs
 800f1be:	463a      	movcs	r2, r7
 800f1c0:	f7ff f97c 	bl	800e4bc <memcpy>
 800f1c4:	4631      	mov	r1, r6
 800f1c6:	4640      	mov	r0, r8
 800f1c8:	f7ff fd20 	bl	800ec0c <_free_r>
 800f1cc:	e7e1      	b.n	800f192 <_realloc_r+0x1e>
 800f1ce:	4635      	mov	r5, r6
 800f1d0:	e7df      	b.n	800f192 <_realloc_r+0x1e>

0800f1d2 <__sfputc_r>:
 800f1d2:	6893      	ldr	r3, [r2, #8]
 800f1d4:	3b01      	subs	r3, #1
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	b410      	push	{r4}
 800f1da:	6093      	str	r3, [r2, #8]
 800f1dc:	da08      	bge.n	800f1f0 <__sfputc_r+0x1e>
 800f1de:	6994      	ldr	r4, [r2, #24]
 800f1e0:	42a3      	cmp	r3, r4
 800f1e2:	db01      	blt.n	800f1e8 <__sfputc_r+0x16>
 800f1e4:	290a      	cmp	r1, #10
 800f1e6:	d103      	bne.n	800f1f0 <__sfputc_r+0x1e>
 800f1e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f1ec:	f000 b94a 	b.w	800f484 <__swbuf_r>
 800f1f0:	6813      	ldr	r3, [r2, #0]
 800f1f2:	1c58      	adds	r0, r3, #1
 800f1f4:	6010      	str	r0, [r2, #0]
 800f1f6:	7019      	strb	r1, [r3, #0]
 800f1f8:	4608      	mov	r0, r1
 800f1fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f1fe:	4770      	bx	lr

0800f200 <__sfputs_r>:
 800f200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f202:	4606      	mov	r6, r0
 800f204:	460f      	mov	r7, r1
 800f206:	4614      	mov	r4, r2
 800f208:	18d5      	adds	r5, r2, r3
 800f20a:	42ac      	cmp	r4, r5
 800f20c:	d101      	bne.n	800f212 <__sfputs_r+0x12>
 800f20e:	2000      	movs	r0, #0
 800f210:	e007      	b.n	800f222 <__sfputs_r+0x22>
 800f212:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f216:	463a      	mov	r2, r7
 800f218:	4630      	mov	r0, r6
 800f21a:	f7ff ffda 	bl	800f1d2 <__sfputc_r>
 800f21e:	1c43      	adds	r3, r0, #1
 800f220:	d1f3      	bne.n	800f20a <__sfputs_r+0xa>
 800f222:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f224 <_vfiprintf_r>:
 800f224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f228:	460d      	mov	r5, r1
 800f22a:	b09d      	sub	sp, #116	; 0x74
 800f22c:	4614      	mov	r4, r2
 800f22e:	4698      	mov	r8, r3
 800f230:	4606      	mov	r6, r0
 800f232:	b118      	cbz	r0, 800f23c <_vfiprintf_r+0x18>
 800f234:	6983      	ldr	r3, [r0, #24]
 800f236:	b90b      	cbnz	r3, 800f23c <_vfiprintf_r+0x18>
 800f238:	f000 fb14 	bl	800f864 <__sinit>
 800f23c:	4b89      	ldr	r3, [pc, #548]	; (800f464 <_vfiprintf_r+0x240>)
 800f23e:	429d      	cmp	r5, r3
 800f240:	d11b      	bne.n	800f27a <_vfiprintf_r+0x56>
 800f242:	6875      	ldr	r5, [r6, #4]
 800f244:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f246:	07d9      	lsls	r1, r3, #31
 800f248:	d405      	bmi.n	800f256 <_vfiprintf_r+0x32>
 800f24a:	89ab      	ldrh	r3, [r5, #12]
 800f24c:	059a      	lsls	r2, r3, #22
 800f24e:	d402      	bmi.n	800f256 <_vfiprintf_r+0x32>
 800f250:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f252:	f000 fba5 	bl	800f9a0 <__retarget_lock_acquire_recursive>
 800f256:	89ab      	ldrh	r3, [r5, #12]
 800f258:	071b      	lsls	r3, r3, #28
 800f25a:	d501      	bpl.n	800f260 <_vfiprintf_r+0x3c>
 800f25c:	692b      	ldr	r3, [r5, #16]
 800f25e:	b9eb      	cbnz	r3, 800f29c <_vfiprintf_r+0x78>
 800f260:	4629      	mov	r1, r5
 800f262:	4630      	mov	r0, r6
 800f264:	f000 f96e 	bl	800f544 <__swsetup_r>
 800f268:	b1c0      	cbz	r0, 800f29c <_vfiprintf_r+0x78>
 800f26a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f26c:	07dc      	lsls	r4, r3, #31
 800f26e:	d50e      	bpl.n	800f28e <_vfiprintf_r+0x6a>
 800f270:	f04f 30ff 	mov.w	r0, #4294967295
 800f274:	b01d      	add	sp, #116	; 0x74
 800f276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f27a:	4b7b      	ldr	r3, [pc, #492]	; (800f468 <_vfiprintf_r+0x244>)
 800f27c:	429d      	cmp	r5, r3
 800f27e:	d101      	bne.n	800f284 <_vfiprintf_r+0x60>
 800f280:	68b5      	ldr	r5, [r6, #8]
 800f282:	e7df      	b.n	800f244 <_vfiprintf_r+0x20>
 800f284:	4b79      	ldr	r3, [pc, #484]	; (800f46c <_vfiprintf_r+0x248>)
 800f286:	429d      	cmp	r5, r3
 800f288:	bf08      	it	eq
 800f28a:	68f5      	ldreq	r5, [r6, #12]
 800f28c:	e7da      	b.n	800f244 <_vfiprintf_r+0x20>
 800f28e:	89ab      	ldrh	r3, [r5, #12]
 800f290:	0598      	lsls	r0, r3, #22
 800f292:	d4ed      	bmi.n	800f270 <_vfiprintf_r+0x4c>
 800f294:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f296:	f000 fb84 	bl	800f9a2 <__retarget_lock_release_recursive>
 800f29a:	e7e9      	b.n	800f270 <_vfiprintf_r+0x4c>
 800f29c:	2300      	movs	r3, #0
 800f29e:	9309      	str	r3, [sp, #36]	; 0x24
 800f2a0:	2320      	movs	r3, #32
 800f2a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f2a6:	f8cd 800c 	str.w	r8, [sp, #12]
 800f2aa:	2330      	movs	r3, #48	; 0x30
 800f2ac:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f470 <_vfiprintf_r+0x24c>
 800f2b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f2b4:	f04f 0901 	mov.w	r9, #1
 800f2b8:	4623      	mov	r3, r4
 800f2ba:	469a      	mov	sl, r3
 800f2bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f2c0:	b10a      	cbz	r2, 800f2c6 <_vfiprintf_r+0xa2>
 800f2c2:	2a25      	cmp	r2, #37	; 0x25
 800f2c4:	d1f9      	bne.n	800f2ba <_vfiprintf_r+0x96>
 800f2c6:	ebba 0b04 	subs.w	fp, sl, r4
 800f2ca:	d00b      	beq.n	800f2e4 <_vfiprintf_r+0xc0>
 800f2cc:	465b      	mov	r3, fp
 800f2ce:	4622      	mov	r2, r4
 800f2d0:	4629      	mov	r1, r5
 800f2d2:	4630      	mov	r0, r6
 800f2d4:	f7ff ff94 	bl	800f200 <__sfputs_r>
 800f2d8:	3001      	adds	r0, #1
 800f2da:	f000 80aa 	beq.w	800f432 <_vfiprintf_r+0x20e>
 800f2de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f2e0:	445a      	add	r2, fp
 800f2e2:	9209      	str	r2, [sp, #36]	; 0x24
 800f2e4:	f89a 3000 	ldrb.w	r3, [sl]
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	f000 80a2 	beq.w	800f432 <_vfiprintf_r+0x20e>
 800f2ee:	2300      	movs	r3, #0
 800f2f0:	f04f 32ff 	mov.w	r2, #4294967295
 800f2f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f2f8:	f10a 0a01 	add.w	sl, sl, #1
 800f2fc:	9304      	str	r3, [sp, #16]
 800f2fe:	9307      	str	r3, [sp, #28]
 800f300:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f304:	931a      	str	r3, [sp, #104]	; 0x68
 800f306:	4654      	mov	r4, sl
 800f308:	2205      	movs	r2, #5
 800f30a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f30e:	4858      	ldr	r0, [pc, #352]	; (800f470 <_vfiprintf_r+0x24c>)
 800f310:	f7f0 ff6e 	bl	80001f0 <memchr>
 800f314:	9a04      	ldr	r2, [sp, #16]
 800f316:	b9d8      	cbnz	r0, 800f350 <_vfiprintf_r+0x12c>
 800f318:	06d1      	lsls	r1, r2, #27
 800f31a:	bf44      	itt	mi
 800f31c:	2320      	movmi	r3, #32
 800f31e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f322:	0713      	lsls	r3, r2, #28
 800f324:	bf44      	itt	mi
 800f326:	232b      	movmi	r3, #43	; 0x2b
 800f328:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f32c:	f89a 3000 	ldrb.w	r3, [sl]
 800f330:	2b2a      	cmp	r3, #42	; 0x2a
 800f332:	d015      	beq.n	800f360 <_vfiprintf_r+0x13c>
 800f334:	9a07      	ldr	r2, [sp, #28]
 800f336:	4654      	mov	r4, sl
 800f338:	2000      	movs	r0, #0
 800f33a:	f04f 0c0a 	mov.w	ip, #10
 800f33e:	4621      	mov	r1, r4
 800f340:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f344:	3b30      	subs	r3, #48	; 0x30
 800f346:	2b09      	cmp	r3, #9
 800f348:	d94e      	bls.n	800f3e8 <_vfiprintf_r+0x1c4>
 800f34a:	b1b0      	cbz	r0, 800f37a <_vfiprintf_r+0x156>
 800f34c:	9207      	str	r2, [sp, #28]
 800f34e:	e014      	b.n	800f37a <_vfiprintf_r+0x156>
 800f350:	eba0 0308 	sub.w	r3, r0, r8
 800f354:	fa09 f303 	lsl.w	r3, r9, r3
 800f358:	4313      	orrs	r3, r2
 800f35a:	9304      	str	r3, [sp, #16]
 800f35c:	46a2      	mov	sl, r4
 800f35e:	e7d2      	b.n	800f306 <_vfiprintf_r+0xe2>
 800f360:	9b03      	ldr	r3, [sp, #12]
 800f362:	1d19      	adds	r1, r3, #4
 800f364:	681b      	ldr	r3, [r3, #0]
 800f366:	9103      	str	r1, [sp, #12]
 800f368:	2b00      	cmp	r3, #0
 800f36a:	bfbb      	ittet	lt
 800f36c:	425b      	neglt	r3, r3
 800f36e:	f042 0202 	orrlt.w	r2, r2, #2
 800f372:	9307      	strge	r3, [sp, #28]
 800f374:	9307      	strlt	r3, [sp, #28]
 800f376:	bfb8      	it	lt
 800f378:	9204      	strlt	r2, [sp, #16]
 800f37a:	7823      	ldrb	r3, [r4, #0]
 800f37c:	2b2e      	cmp	r3, #46	; 0x2e
 800f37e:	d10c      	bne.n	800f39a <_vfiprintf_r+0x176>
 800f380:	7863      	ldrb	r3, [r4, #1]
 800f382:	2b2a      	cmp	r3, #42	; 0x2a
 800f384:	d135      	bne.n	800f3f2 <_vfiprintf_r+0x1ce>
 800f386:	9b03      	ldr	r3, [sp, #12]
 800f388:	1d1a      	adds	r2, r3, #4
 800f38a:	681b      	ldr	r3, [r3, #0]
 800f38c:	9203      	str	r2, [sp, #12]
 800f38e:	2b00      	cmp	r3, #0
 800f390:	bfb8      	it	lt
 800f392:	f04f 33ff 	movlt.w	r3, #4294967295
 800f396:	3402      	adds	r4, #2
 800f398:	9305      	str	r3, [sp, #20]
 800f39a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f480 <_vfiprintf_r+0x25c>
 800f39e:	7821      	ldrb	r1, [r4, #0]
 800f3a0:	2203      	movs	r2, #3
 800f3a2:	4650      	mov	r0, sl
 800f3a4:	f7f0 ff24 	bl	80001f0 <memchr>
 800f3a8:	b140      	cbz	r0, 800f3bc <_vfiprintf_r+0x198>
 800f3aa:	2340      	movs	r3, #64	; 0x40
 800f3ac:	eba0 000a 	sub.w	r0, r0, sl
 800f3b0:	fa03 f000 	lsl.w	r0, r3, r0
 800f3b4:	9b04      	ldr	r3, [sp, #16]
 800f3b6:	4303      	orrs	r3, r0
 800f3b8:	3401      	adds	r4, #1
 800f3ba:	9304      	str	r3, [sp, #16]
 800f3bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f3c0:	482c      	ldr	r0, [pc, #176]	; (800f474 <_vfiprintf_r+0x250>)
 800f3c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f3c6:	2206      	movs	r2, #6
 800f3c8:	f7f0 ff12 	bl	80001f0 <memchr>
 800f3cc:	2800      	cmp	r0, #0
 800f3ce:	d03f      	beq.n	800f450 <_vfiprintf_r+0x22c>
 800f3d0:	4b29      	ldr	r3, [pc, #164]	; (800f478 <_vfiprintf_r+0x254>)
 800f3d2:	bb1b      	cbnz	r3, 800f41c <_vfiprintf_r+0x1f8>
 800f3d4:	9b03      	ldr	r3, [sp, #12]
 800f3d6:	3307      	adds	r3, #7
 800f3d8:	f023 0307 	bic.w	r3, r3, #7
 800f3dc:	3308      	adds	r3, #8
 800f3de:	9303      	str	r3, [sp, #12]
 800f3e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f3e2:	443b      	add	r3, r7
 800f3e4:	9309      	str	r3, [sp, #36]	; 0x24
 800f3e6:	e767      	b.n	800f2b8 <_vfiprintf_r+0x94>
 800f3e8:	fb0c 3202 	mla	r2, ip, r2, r3
 800f3ec:	460c      	mov	r4, r1
 800f3ee:	2001      	movs	r0, #1
 800f3f0:	e7a5      	b.n	800f33e <_vfiprintf_r+0x11a>
 800f3f2:	2300      	movs	r3, #0
 800f3f4:	3401      	adds	r4, #1
 800f3f6:	9305      	str	r3, [sp, #20]
 800f3f8:	4619      	mov	r1, r3
 800f3fa:	f04f 0c0a 	mov.w	ip, #10
 800f3fe:	4620      	mov	r0, r4
 800f400:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f404:	3a30      	subs	r2, #48	; 0x30
 800f406:	2a09      	cmp	r2, #9
 800f408:	d903      	bls.n	800f412 <_vfiprintf_r+0x1ee>
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d0c5      	beq.n	800f39a <_vfiprintf_r+0x176>
 800f40e:	9105      	str	r1, [sp, #20]
 800f410:	e7c3      	b.n	800f39a <_vfiprintf_r+0x176>
 800f412:	fb0c 2101 	mla	r1, ip, r1, r2
 800f416:	4604      	mov	r4, r0
 800f418:	2301      	movs	r3, #1
 800f41a:	e7f0      	b.n	800f3fe <_vfiprintf_r+0x1da>
 800f41c:	ab03      	add	r3, sp, #12
 800f41e:	9300      	str	r3, [sp, #0]
 800f420:	462a      	mov	r2, r5
 800f422:	4b16      	ldr	r3, [pc, #88]	; (800f47c <_vfiprintf_r+0x258>)
 800f424:	a904      	add	r1, sp, #16
 800f426:	4630      	mov	r0, r6
 800f428:	f7fd fdc6 	bl	800cfb8 <_printf_float>
 800f42c:	4607      	mov	r7, r0
 800f42e:	1c78      	adds	r0, r7, #1
 800f430:	d1d6      	bne.n	800f3e0 <_vfiprintf_r+0x1bc>
 800f432:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f434:	07d9      	lsls	r1, r3, #31
 800f436:	d405      	bmi.n	800f444 <_vfiprintf_r+0x220>
 800f438:	89ab      	ldrh	r3, [r5, #12]
 800f43a:	059a      	lsls	r2, r3, #22
 800f43c:	d402      	bmi.n	800f444 <_vfiprintf_r+0x220>
 800f43e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f440:	f000 faaf 	bl	800f9a2 <__retarget_lock_release_recursive>
 800f444:	89ab      	ldrh	r3, [r5, #12]
 800f446:	065b      	lsls	r3, r3, #25
 800f448:	f53f af12 	bmi.w	800f270 <_vfiprintf_r+0x4c>
 800f44c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f44e:	e711      	b.n	800f274 <_vfiprintf_r+0x50>
 800f450:	ab03      	add	r3, sp, #12
 800f452:	9300      	str	r3, [sp, #0]
 800f454:	462a      	mov	r2, r5
 800f456:	4b09      	ldr	r3, [pc, #36]	; (800f47c <_vfiprintf_r+0x258>)
 800f458:	a904      	add	r1, sp, #16
 800f45a:	4630      	mov	r0, r6
 800f45c:	f7fe f850 	bl	800d500 <_printf_i>
 800f460:	e7e4      	b.n	800f42c <_vfiprintf_r+0x208>
 800f462:	bf00      	nop
 800f464:	0803d5c4 	.word	0x0803d5c4
 800f468:	0803d5e4 	.word	0x0803d5e4
 800f46c:	0803d5a4 	.word	0x0803d5a4
 800f470:	0803d44c 	.word	0x0803d44c
 800f474:	0803d456 	.word	0x0803d456
 800f478:	0800cfb9 	.word	0x0800cfb9
 800f47c:	0800f201 	.word	0x0800f201
 800f480:	0803d452 	.word	0x0803d452

0800f484 <__swbuf_r>:
 800f484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f486:	460e      	mov	r6, r1
 800f488:	4614      	mov	r4, r2
 800f48a:	4605      	mov	r5, r0
 800f48c:	b118      	cbz	r0, 800f496 <__swbuf_r+0x12>
 800f48e:	6983      	ldr	r3, [r0, #24]
 800f490:	b90b      	cbnz	r3, 800f496 <__swbuf_r+0x12>
 800f492:	f000 f9e7 	bl	800f864 <__sinit>
 800f496:	4b21      	ldr	r3, [pc, #132]	; (800f51c <__swbuf_r+0x98>)
 800f498:	429c      	cmp	r4, r3
 800f49a:	d12b      	bne.n	800f4f4 <__swbuf_r+0x70>
 800f49c:	686c      	ldr	r4, [r5, #4]
 800f49e:	69a3      	ldr	r3, [r4, #24]
 800f4a0:	60a3      	str	r3, [r4, #8]
 800f4a2:	89a3      	ldrh	r3, [r4, #12]
 800f4a4:	071a      	lsls	r2, r3, #28
 800f4a6:	d52f      	bpl.n	800f508 <__swbuf_r+0x84>
 800f4a8:	6923      	ldr	r3, [r4, #16]
 800f4aa:	b36b      	cbz	r3, 800f508 <__swbuf_r+0x84>
 800f4ac:	6923      	ldr	r3, [r4, #16]
 800f4ae:	6820      	ldr	r0, [r4, #0]
 800f4b0:	1ac0      	subs	r0, r0, r3
 800f4b2:	6963      	ldr	r3, [r4, #20]
 800f4b4:	b2f6      	uxtb	r6, r6
 800f4b6:	4283      	cmp	r3, r0
 800f4b8:	4637      	mov	r7, r6
 800f4ba:	dc04      	bgt.n	800f4c6 <__swbuf_r+0x42>
 800f4bc:	4621      	mov	r1, r4
 800f4be:	4628      	mov	r0, r5
 800f4c0:	f000 f93c 	bl	800f73c <_fflush_r>
 800f4c4:	bb30      	cbnz	r0, 800f514 <__swbuf_r+0x90>
 800f4c6:	68a3      	ldr	r3, [r4, #8]
 800f4c8:	3b01      	subs	r3, #1
 800f4ca:	60a3      	str	r3, [r4, #8]
 800f4cc:	6823      	ldr	r3, [r4, #0]
 800f4ce:	1c5a      	adds	r2, r3, #1
 800f4d0:	6022      	str	r2, [r4, #0]
 800f4d2:	701e      	strb	r6, [r3, #0]
 800f4d4:	6963      	ldr	r3, [r4, #20]
 800f4d6:	3001      	adds	r0, #1
 800f4d8:	4283      	cmp	r3, r0
 800f4da:	d004      	beq.n	800f4e6 <__swbuf_r+0x62>
 800f4dc:	89a3      	ldrh	r3, [r4, #12]
 800f4de:	07db      	lsls	r3, r3, #31
 800f4e0:	d506      	bpl.n	800f4f0 <__swbuf_r+0x6c>
 800f4e2:	2e0a      	cmp	r6, #10
 800f4e4:	d104      	bne.n	800f4f0 <__swbuf_r+0x6c>
 800f4e6:	4621      	mov	r1, r4
 800f4e8:	4628      	mov	r0, r5
 800f4ea:	f000 f927 	bl	800f73c <_fflush_r>
 800f4ee:	b988      	cbnz	r0, 800f514 <__swbuf_r+0x90>
 800f4f0:	4638      	mov	r0, r7
 800f4f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f4f4:	4b0a      	ldr	r3, [pc, #40]	; (800f520 <__swbuf_r+0x9c>)
 800f4f6:	429c      	cmp	r4, r3
 800f4f8:	d101      	bne.n	800f4fe <__swbuf_r+0x7a>
 800f4fa:	68ac      	ldr	r4, [r5, #8]
 800f4fc:	e7cf      	b.n	800f49e <__swbuf_r+0x1a>
 800f4fe:	4b09      	ldr	r3, [pc, #36]	; (800f524 <__swbuf_r+0xa0>)
 800f500:	429c      	cmp	r4, r3
 800f502:	bf08      	it	eq
 800f504:	68ec      	ldreq	r4, [r5, #12]
 800f506:	e7ca      	b.n	800f49e <__swbuf_r+0x1a>
 800f508:	4621      	mov	r1, r4
 800f50a:	4628      	mov	r0, r5
 800f50c:	f000 f81a 	bl	800f544 <__swsetup_r>
 800f510:	2800      	cmp	r0, #0
 800f512:	d0cb      	beq.n	800f4ac <__swbuf_r+0x28>
 800f514:	f04f 37ff 	mov.w	r7, #4294967295
 800f518:	e7ea      	b.n	800f4f0 <__swbuf_r+0x6c>
 800f51a:	bf00      	nop
 800f51c:	0803d5c4 	.word	0x0803d5c4
 800f520:	0803d5e4 	.word	0x0803d5e4
 800f524:	0803d5a4 	.word	0x0803d5a4

0800f528 <__ascii_wctomb>:
 800f528:	b149      	cbz	r1, 800f53e <__ascii_wctomb+0x16>
 800f52a:	2aff      	cmp	r2, #255	; 0xff
 800f52c:	bf85      	ittet	hi
 800f52e:	238a      	movhi	r3, #138	; 0x8a
 800f530:	6003      	strhi	r3, [r0, #0]
 800f532:	700a      	strbls	r2, [r1, #0]
 800f534:	f04f 30ff 	movhi.w	r0, #4294967295
 800f538:	bf98      	it	ls
 800f53a:	2001      	movls	r0, #1
 800f53c:	4770      	bx	lr
 800f53e:	4608      	mov	r0, r1
 800f540:	4770      	bx	lr
	...

0800f544 <__swsetup_r>:
 800f544:	4b32      	ldr	r3, [pc, #200]	; (800f610 <__swsetup_r+0xcc>)
 800f546:	b570      	push	{r4, r5, r6, lr}
 800f548:	681d      	ldr	r5, [r3, #0]
 800f54a:	4606      	mov	r6, r0
 800f54c:	460c      	mov	r4, r1
 800f54e:	b125      	cbz	r5, 800f55a <__swsetup_r+0x16>
 800f550:	69ab      	ldr	r3, [r5, #24]
 800f552:	b913      	cbnz	r3, 800f55a <__swsetup_r+0x16>
 800f554:	4628      	mov	r0, r5
 800f556:	f000 f985 	bl	800f864 <__sinit>
 800f55a:	4b2e      	ldr	r3, [pc, #184]	; (800f614 <__swsetup_r+0xd0>)
 800f55c:	429c      	cmp	r4, r3
 800f55e:	d10f      	bne.n	800f580 <__swsetup_r+0x3c>
 800f560:	686c      	ldr	r4, [r5, #4]
 800f562:	89a3      	ldrh	r3, [r4, #12]
 800f564:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f568:	0719      	lsls	r1, r3, #28
 800f56a:	d42c      	bmi.n	800f5c6 <__swsetup_r+0x82>
 800f56c:	06dd      	lsls	r5, r3, #27
 800f56e:	d411      	bmi.n	800f594 <__swsetup_r+0x50>
 800f570:	2309      	movs	r3, #9
 800f572:	6033      	str	r3, [r6, #0]
 800f574:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f578:	81a3      	strh	r3, [r4, #12]
 800f57a:	f04f 30ff 	mov.w	r0, #4294967295
 800f57e:	e03e      	b.n	800f5fe <__swsetup_r+0xba>
 800f580:	4b25      	ldr	r3, [pc, #148]	; (800f618 <__swsetup_r+0xd4>)
 800f582:	429c      	cmp	r4, r3
 800f584:	d101      	bne.n	800f58a <__swsetup_r+0x46>
 800f586:	68ac      	ldr	r4, [r5, #8]
 800f588:	e7eb      	b.n	800f562 <__swsetup_r+0x1e>
 800f58a:	4b24      	ldr	r3, [pc, #144]	; (800f61c <__swsetup_r+0xd8>)
 800f58c:	429c      	cmp	r4, r3
 800f58e:	bf08      	it	eq
 800f590:	68ec      	ldreq	r4, [r5, #12]
 800f592:	e7e6      	b.n	800f562 <__swsetup_r+0x1e>
 800f594:	0758      	lsls	r0, r3, #29
 800f596:	d512      	bpl.n	800f5be <__swsetup_r+0x7a>
 800f598:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f59a:	b141      	cbz	r1, 800f5ae <__swsetup_r+0x6a>
 800f59c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f5a0:	4299      	cmp	r1, r3
 800f5a2:	d002      	beq.n	800f5aa <__swsetup_r+0x66>
 800f5a4:	4630      	mov	r0, r6
 800f5a6:	f7ff fb31 	bl	800ec0c <_free_r>
 800f5aa:	2300      	movs	r3, #0
 800f5ac:	6363      	str	r3, [r4, #52]	; 0x34
 800f5ae:	89a3      	ldrh	r3, [r4, #12]
 800f5b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f5b4:	81a3      	strh	r3, [r4, #12]
 800f5b6:	2300      	movs	r3, #0
 800f5b8:	6063      	str	r3, [r4, #4]
 800f5ba:	6923      	ldr	r3, [r4, #16]
 800f5bc:	6023      	str	r3, [r4, #0]
 800f5be:	89a3      	ldrh	r3, [r4, #12]
 800f5c0:	f043 0308 	orr.w	r3, r3, #8
 800f5c4:	81a3      	strh	r3, [r4, #12]
 800f5c6:	6923      	ldr	r3, [r4, #16]
 800f5c8:	b94b      	cbnz	r3, 800f5de <__swsetup_r+0x9a>
 800f5ca:	89a3      	ldrh	r3, [r4, #12]
 800f5cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f5d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f5d4:	d003      	beq.n	800f5de <__swsetup_r+0x9a>
 800f5d6:	4621      	mov	r1, r4
 800f5d8:	4630      	mov	r0, r6
 800f5da:	f000 fa09 	bl	800f9f0 <__smakebuf_r>
 800f5de:	89a0      	ldrh	r0, [r4, #12]
 800f5e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f5e4:	f010 0301 	ands.w	r3, r0, #1
 800f5e8:	d00a      	beq.n	800f600 <__swsetup_r+0xbc>
 800f5ea:	2300      	movs	r3, #0
 800f5ec:	60a3      	str	r3, [r4, #8]
 800f5ee:	6963      	ldr	r3, [r4, #20]
 800f5f0:	425b      	negs	r3, r3
 800f5f2:	61a3      	str	r3, [r4, #24]
 800f5f4:	6923      	ldr	r3, [r4, #16]
 800f5f6:	b943      	cbnz	r3, 800f60a <__swsetup_r+0xc6>
 800f5f8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f5fc:	d1ba      	bne.n	800f574 <__swsetup_r+0x30>
 800f5fe:	bd70      	pop	{r4, r5, r6, pc}
 800f600:	0781      	lsls	r1, r0, #30
 800f602:	bf58      	it	pl
 800f604:	6963      	ldrpl	r3, [r4, #20]
 800f606:	60a3      	str	r3, [r4, #8]
 800f608:	e7f4      	b.n	800f5f4 <__swsetup_r+0xb0>
 800f60a:	2000      	movs	r0, #0
 800f60c:	e7f7      	b.n	800f5fe <__swsetup_r+0xba>
 800f60e:	bf00      	nop
 800f610:	20000250 	.word	0x20000250
 800f614:	0803d5c4 	.word	0x0803d5c4
 800f618:	0803d5e4 	.word	0x0803d5e4
 800f61c:	0803d5a4 	.word	0x0803d5a4

0800f620 <abort>:
 800f620:	b508      	push	{r3, lr}
 800f622:	2006      	movs	r0, #6
 800f624:	f000 fa54 	bl	800fad0 <raise>
 800f628:	2001      	movs	r0, #1
 800f62a:	f7f5 fff3 	bl	8005614 <_exit>
	...

0800f630 <__sflush_r>:
 800f630:	898a      	ldrh	r2, [r1, #12]
 800f632:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f636:	4605      	mov	r5, r0
 800f638:	0710      	lsls	r0, r2, #28
 800f63a:	460c      	mov	r4, r1
 800f63c:	d458      	bmi.n	800f6f0 <__sflush_r+0xc0>
 800f63e:	684b      	ldr	r3, [r1, #4]
 800f640:	2b00      	cmp	r3, #0
 800f642:	dc05      	bgt.n	800f650 <__sflush_r+0x20>
 800f644:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f646:	2b00      	cmp	r3, #0
 800f648:	dc02      	bgt.n	800f650 <__sflush_r+0x20>
 800f64a:	2000      	movs	r0, #0
 800f64c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f650:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f652:	2e00      	cmp	r6, #0
 800f654:	d0f9      	beq.n	800f64a <__sflush_r+0x1a>
 800f656:	2300      	movs	r3, #0
 800f658:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f65c:	682f      	ldr	r7, [r5, #0]
 800f65e:	602b      	str	r3, [r5, #0]
 800f660:	d032      	beq.n	800f6c8 <__sflush_r+0x98>
 800f662:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f664:	89a3      	ldrh	r3, [r4, #12]
 800f666:	075a      	lsls	r2, r3, #29
 800f668:	d505      	bpl.n	800f676 <__sflush_r+0x46>
 800f66a:	6863      	ldr	r3, [r4, #4]
 800f66c:	1ac0      	subs	r0, r0, r3
 800f66e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f670:	b10b      	cbz	r3, 800f676 <__sflush_r+0x46>
 800f672:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f674:	1ac0      	subs	r0, r0, r3
 800f676:	2300      	movs	r3, #0
 800f678:	4602      	mov	r2, r0
 800f67a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f67c:	6a21      	ldr	r1, [r4, #32]
 800f67e:	4628      	mov	r0, r5
 800f680:	47b0      	blx	r6
 800f682:	1c43      	adds	r3, r0, #1
 800f684:	89a3      	ldrh	r3, [r4, #12]
 800f686:	d106      	bne.n	800f696 <__sflush_r+0x66>
 800f688:	6829      	ldr	r1, [r5, #0]
 800f68a:	291d      	cmp	r1, #29
 800f68c:	d82c      	bhi.n	800f6e8 <__sflush_r+0xb8>
 800f68e:	4a2a      	ldr	r2, [pc, #168]	; (800f738 <__sflush_r+0x108>)
 800f690:	40ca      	lsrs	r2, r1
 800f692:	07d6      	lsls	r6, r2, #31
 800f694:	d528      	bpl.n	800f6e8 <__sflush_r+0xb8>
 800f696:	2200      	movs	r2, #0
 800f698:	6062      	str	r2, [r4, #4]
 800f69a:	04d9      	lsls	r1, r3, #19
 800f69c:	6922      	ldr	r2, [r4, #16]
 800f69e:	6022      	str	r2, [r4, #0]
 800f6a0:	d504      	bpl.n	800f6ac <__sflush_r+0x7c>
 800f6a2:	1c42      	adds	r2, r0, #1
 800f6a4:	d101      	bne.n	800f6aa <__sflush_r+0x7a>
 800f6a6:	682b      	ldr	r3, [r5, #0]
 800f6a8:	b903      	cbnz	r3, 800f6ac <__sflush_r+0x7c>
 800f6aa:	6560      	str	r0, [r4, #84]	; 0x54
 800f6ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f6ae:	602f      	str	r7, [r5, #0]
 800f6b0:	2900      	cmp	r1, #0
 800f6b2:	d0ca      	beq.n	800f64a <__sflush_r+0x1a>
 800f6b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f6b8:	4299      	cmp	r1, r3
 800f6ba:	d002      	beq.n	800f6c2 <__sflush_r+0x92>
 800f6bc:	4628      	mov	r0, r5
 800f6be:	f7ff faa5 	bl	800ec0c <_free_r>
 800f6c2:	2000      	movs	r0, #0
 800f6c4:	6360      	str	r0, [r4, #52]	; 0x34
 800f6c6:	e7c1      	b.n	800f64c <__sflush_r+0x1c>
 800f6c8:	6a21      	ldr	r1, [r4, #32]
 800f6ca:	2301      	movs	r3, #1
 800f6cc:	4628      	mov	r0, r5
 800f6ce:	47b0      	blx	r6
 800f6d0:	1c41      	adds	r1, r0, #1
 800f6d2:	d1c7      	bne.n	800f664 <__sflush_r+0x34>
 800f6d4:	682b      	ldr	r3, [r5, #0]
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	d0c4      	beq.n	800f664 <__sflush_r+0x34>
 800f6da:	2b1d      	cmp	r3, #29
 800f6dc:	d001      	beq.n	800f6e2 <__sflush_r+0xb2>
 800f6de:	2b16      	cmp	r3, #22
 800f6e0:	d101      	bne.n	800f6e6 <__sflush_r+0xb6>
 800f6e2:	602f      	str	r7, [r5, #0]
 800f6e4:	e7b1      	b.n	800f64a <__sflush_r+0x1a>
 800f6e6:	89a3      	ldrh	r3, [r4, #12]
 800f6e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f6ec:	81a3      	strh	r3, [r4, #12]
 800f6ee:	e7ad      	b.n	800f64c <__sflush_r+0x1c>
 800f6f0:	690f      	ldr	r7, [r1, #16]
 800f6f2:	2f00      	cmp	r7, #0
 800f6f4:	d0a9      	beq.n	800f64a <__sflush_r+0x1a>
 800f6f6:	0793      	lsls	r3, r2, #30
 800f6f8:	680e      	ldr	r6, [r1, #0]
 800f6fa:	bf08      	it	eq
 800f6fc:	694b      	ldreq	r3, [r1, #20]
 800f6fe:	600f      	str	r7, [r1, #0]
 800f700:	bf18      	it	ne
 800f702:	2300      	movne	r3, #0
 800f704:	eba6 0807 	sub.w	r8, r6, r7
 800f708:	608b      	str	r3, [r1, #8]
 800f70a:	f1b8 0f00 	cmp.w	r8, #0
 800f70e:	dd9c      	ble.n	800f64a <__sflush_r+0x1a>
 800f710:	6a21      	ldr	r1, [r4, #32]
 800f712:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f714:	4643      	mov	r3, r8
 800f716:	463a      	mov	r2, r7
 800f718:	4628      	mov	r0, r5
 800f71a:	47b0      	blx	r6
 800f71c:	2800      	cmp	r0, #0
 800f71e:	dc06      	bgt.n	800f72e <__sflush_r+0xfe>
 800f720:	89a3      	ldrh	r3, [r4, #12]
 800f722:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f726:	81a3      	strh	r3, [r4, #12]
 800f728:	f04f 30ff 	mov.w	r0, #4294967295
 800f72c:	e78e      	b.n	800f64c <__sflush_r+0x1c>
 800f72e:	4407      	add	r7, r0
 800f730:	eba8 0800 	sub.w	r8, r8, r0
 800f734:	e7e9      	b.n	800f70a <__sflush_r+0xda>
 800f736:	bf00      	nop
 800f738:	20400001 	.word	0x20400001

0800f73c <_fflush_r>:
 800f73c:	b538      	push	{r3, r4, r5, lr}
 800f73e:	690b      	ldr	r3, [r1, #16]
 800f740:	4605      	mov	r5, r0
 800f742:	460c      	mov	r4, r1
 800f744:	b913      	cbnz	r3, 800f74c <_fflush_r+0x10>
 800f746:	2500      	movs	r5, #0
 800f748:	4628      	mov	r0, r5
 800f74a:	bd38      	pop	{r3, r4, r5, pc}
 800f74c:	b118      	cbz	r0, 800f756 <_fflush_r+0x1a>
 800f74e:	6983      	ldr	r3, [r0, #24]
 800f750:	b90b      	cbnz	r3, 800f756 <_fflush_r+0x1a>
 800f752:	f000 f887 	bl	800f864 <__sinit>
 800f756:	4b14      	ldr	r3, [pc, #80]	; (800f7a8 <_fflush_r+0x6c>)
 800f758:	429c      	cmp	r4, r3
 800f75a:	d11b      	bne.n	800f794 <_fflush_r+0x58>
 800f75c:	686c      	ldr	r4, [r5, #4]
 800f75e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f762:	2b00      	cmp	r3, #0
 800f764:	d0ef      	beq.n	800f746 <_fflush_r+0xa>
 800f766:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f768:	07d0      	lsls	r0, r2, #31
 800f76a:	d404      	bmi.n	800f776 <_fflush_r+0x3a>
 800f76c:	0599      	lsls	r1, r3, #22
 800f76e:	d402      	bmi.n	800f776 <_fflush_r+0x3a>
 800f770:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f772:	f000 f915 	bl	800f9a0 <__retarget_lock_acquire_recursive>
 800f776:	4628      	mov	r0, r5
 800f778:	4621      	mov	r1, r4
 800f77a:	f7ff ff59 	bl	800f630 <__sflush_r>
 800f77e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f780:	07da      	lsls	r2, r3, #31
 800f782:	4605      	mov	r5, r0
 800f784:	d4e0      	bmi.n	800f748 <_fflush_r+0xc>
 800f786:	89a3      	ldrh	r3, [r4, #12]
 800f788:	059b      	lsls	r3, r3, #22
 800f78a:	d4dd      	bmi.n	800f748 <_fflush_r+0xc>
 800f78c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f78e:	f000 f908 	bl	800f9a2 <__retarget_lock_release_recursive>
 800f792:	e7d9      	b.n	800f748 <_fflush_r+0xc>
 800f794:	4b05      	ldr	r3, [pc, #20]	; (800f7ac <_fflush_r+0x70>)
 800f796:	429c      	cmp	r4, r3
 800f798:	d101      	bne.n	800f79e <_fflush_r+0x62>
 800f79a:	68ac      	ldr	r4, [r5, #8]
 800f79c:	e7df      	b.n	800f75e <_fflush_r+0x22>
 800f79e:	4b04      	ldr	r3, [pc, #16]	; (800f7b0 <_fflush_r+0x74>)
 800f7a0:	429c      	cmp	r4, r3
 800f7a2:	bf08      	it	eq
 800f7a4:	68ec      	ldreq	r4, [r5, #12]
 800f7a6:	e7da      	b.n	800f75e <_fflush_r+0x22>
 800f7a8:	0803d5c4 	.word	0x0803d5c4
 800f7ac:	0803d5e4 	.word	0x0803d5e4
 800f7b0:	0803d5a4 	.word	0x0803d5a4

0800f7b4 <std>:
 800f7b4:	2300      	movs	r3, #0
 800f7b6:	b510      	push	{r4, lr}
 800f7b8:	4604      	mov	r4, r0
 800f7ba:	e9c0 3300 	strd	r3, r3, [r0]
 800f7be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f7c2:	6083      	str	r3, [r0, #8]
 800f7c4:	8181      	strh	r1, [r0, #12]
 800f7c6:	6643      	str	r3, [r0, #100]	; 0x64
 800f7c8:	81c2      	strh	r2, [r0, #14]
 800f7ca:	6183      	str	r3, [r0, #24]
 800f7cc:	4619      	mov	r1, r3
 800f7ce:	2208      	movs	r2, #8
 800f7d0:	305c      	adds	r0, #92	; 0x5c
 800f7d2:	f7fd fb49 	bl	800ce68 <memset>
 800f7d6:	4b05      	ldr	r3, [pc, #20]	; (800f7ec <std+0x38>)
 800f7d8:	6263      	str	r3, [r4, #36]	; 0x24
 800f7da:	4b05      	ldr	r3, [pc, #20]	; (800f7f0 <std+0x3c>)
 800f7dc:	62a3      	str	r3, [r4, #40]	; 0x28
 800f7de:	4b05      	ldr	r3, [pc, #20]	; (800f7f4 <std+0x40>)
 800f7e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f7e2:	4b05      	ldr	r3, [pc, #20]	; (800f7f8 <std+0x44>)
 800f7e4:	6224      	str	r4, [r4, #32]
 800f7e6:	6323      	str	r3, [r4, #48]	; 0x30
 800f7e8:	bd10      	pop	{r4, pc}
 800f7ea:	bf00      	nop
 800f7ec:	0800fb09 	.word	0x0800fb09
 800f7f0:	0800fb2b 	.word	0x0800fb2b
 800f7f4:	0800fb63 	.word	0x0800fb63
 800f7f8:	0800fb87 	.word	0x0800fb87

0800f7fc <_cleanup_r>:
 800f7fc:	4901      	ldr	r1, [pc, #4]	; (800f804 <_cleanup_r+0x8>)
 800f7fe:	f000 b8af 	b.w	800f960 <_fwalk_reent>
 800f802:	bf00      	nop
 800f804:	0800f73d 	.word	0x0800f73d

0800f808 <__sfmoreglue>:
 800f808:	b570      	push	{r4, r5, r6, lr}
 800f80a:	2268      	movs	r2, #104	; 0x68
 800f80c:	1e4d      	subs	r5, r1, #1
 800f80e:	4355      	muls	r5, r2
 800f810:	460e      	mov	r6, r1
 800f812:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f816:	f7ff fa65 	bl	800ece4 <_malloc_r>
 800f81a:	4604      	mov	r4, r0
 800f81c:	b140      	cbz	r0, 800f830 <__sfmoreglue+0x28>
 800f81e:	2100      	movs	r1, #0
 800f820:	e9c0 1600 	strd	r1, r6, [r0]
 800f824:	300c      	adds	r0, #12
 800f826:	60a0      	str	r0, [r4, #8]
 800f828:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f82c:	f7fd fb1c 	bl	800ce68 <memset>
 800f830:	4620      	mov	r0, r4
 800f832:	bd70      	pop	{r4, r5, r6, pc}

0800f834 <__sfp_lock_acquire>:
 800f834:	4801      	ldr	r0, [pc, #4]	; (800f83c <__sfp_lock_acquire+0x8>)
 800f836:	f000 b8b3 	b.w	800f9a0 <__retarget_lock_acquire_recursive>
 800f83a:	bf00      	nop
 800f83c:	200008d5 	.word	0x200008d5

0800f840 <__sfp_lock_release>:
 800f840:	4801      	ldr	r0, [pc, #4]	; (800f848 <__sfp_lock_release+0x8>)
 800f842:	f000 b8ae 	b.w	800f9a2 <__retarget_lock_release_recursive>
 800f846:	bf00      	nop
 800f848:	200008d5 	.word	0x200008d5

0800f84c <__sinit_lock_acquire>:
 800f84c:	4801      	ldr	r0, [pc, #4]	; (800f854 <__sinit_lock_acquire+0x8>)
 800f84e:	f000 b8a7 	b.w	800f9a0 <__retarget_lock_acquire_recursive>
 800f852:	bf00      	nop
 800f854:	200008d6 	.word	0x200008d6

0800f858 <__sinit_lock_release>:
 800f858:	4801      	ldr	r0, [pc, #4]	; (800f860 <__sinit_lock_release+0x8>)
 800f85a:	f000 b8a2 	b.w	800f9a2 <__retarget_lock_release_recursive>
 800f85e:	bf00      	nop
 800f860:	200008d6 	.word	0x200008d6

0800f864 <__sinit>:
 800f864:	b510      	push	{r4, lr}
 800f866:	4604      	mov	r4, r0
 800f868:	f7ff fff0 	bl	800f84c <__sinit_lock_acquire>
 800f86c:	69a3      	ldr	r3, [r4, #24]
 800f86e:	b11b      	cbz	r3, 800f878 <__sinit+0x14>
 800f870:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f874:	f7ff bff0 	b.w	800f858 <__sinit_lock_release>
 800f878:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f87c:	6523      	str	r3, [r4, #80]	; 0x50
 800f87e:	4b13      	ldr	r3, [pc, #76]	; (800f8cc <__sinit+0x68>)
 800f880:	4a13      	ldr	r2, [pc, #76]	; (800f8d0 <__sinit+0x6c>)
 800f882:	681b      	ldr	r3, [r3, #0]
 800f884:	62a2      	str	r2, [r4, #40]	; 0x28
 800f886:	42a3      	cmp	r3, r4
 800f888:	bf04      	itt	eq
 800f88a:	2301      	moveq	r3, #1
 800f88c:	61a3      	streq	r3, [r4, #24]
 800f88e:	4620      	mov	r0, r4
 800f890:	f000 f820 	bl	800f8d4 <__sfp>
 800f894:	6060      	str	r0, [r4, #4]
 800f896:	4620      	mov	r0, r4
 800f898:	f000 f81c 	bl	800f8d4 <__sfp>
 800f89c:	60a0      	str	r0, [r4, #8]
 800f89e:	4620      	mov	r0, r4
 800f8a0:	f000 f818 	bl	800f8d4 <__sfp>
 800f8a4:	2200      	movs	r2, #0
 800f8a6:	60e0      	str	r0, [r4, #12]
 800f8a8:	2104      	movs	r1, #4
 800f8aa:	6860      	ldr	r0, [r4, #4]
 800f8ac:	f7ff ff82 	bl	800f7b4 <std>
 800f8b0:	68a0      	ldr	r0, [r4, #8]
 800f8b2:	2201      	movs	r2, #1
 800f8b4:	2109      	movs	r1, #9
 800f8b6:	f7ff ff7d 	bl	800f7b4 <std>
 800f8ba:	68e0      	ldr	r0, [r4, #12]
 800f8bc:	2202      	movs	r2, #2
 800f8be:	2112      	movs	r1, #18
 800f8c0:	f7ff ff78 	bl	800f7b4 <std>
 800f8c4:	2301      	movs	r3, #1
 800f8c6:	61a3      	str	r3, [r4, #24]
 800f8c8:	e7d2      	b.n	800f870 <__sinit+0xc>
 800f8ca:	bf00      	nop
 800f8cc:	0803d228 	.word	0x0803d228
 800f8d0:	0800f7fd 	.word	0x0800f7fd

0800f8d4 <__sfp>:
 800f8d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8d6:	4607      	mov	r7, r0
 800f8d8:	f7ff ffac 	bl	800f834 <__sfp_lock_acquire>
 800f8dc:	4b1e      	ldr	r3, [pc, #120]	; (800f958 <__sfp+0x84>)
 800f8de:	681e      	ldr	r6, [r3, #0]
 800f8e0:	69b3      	ldr	r3, [r6, #24]
 800f8e2:	b913      	cbnz	r3, 800f8ea <__sfp+0x16>
 800f8e4:	4630      	mov	r0, r6
 800f8e6:	f7ff ffbd 	bl	800f864 <__sinit>
 800f8ea:	3648      	adds	r6, #72	; 0x48
 800f8ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f8f0:	3b01      	subs	r3, #1
 800f8f2:	d503      	bpl.n	800f8fc <__sfp+0x28>
 800f8f4:	6833      	ldr	r3, [r6, #0]
 800f8f6:	b30b      	cbz	r3, 800f93c <__sfp+0x68>
 800f8f8:	6836      	ldr	r6, [r6, #0]
 800f8fa:	e7f7      	b.n	800f8ec <__sfp+0x18>
 800f8fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f900:	b9d5      	cbnz	r5, 800f938 <__sfp+0x64>
 800f902:	4b16      	ldr	r3, [pc, #88]	; (800f95c <__sfp+0x88>)
 800f904:	60e3      	str	r3, [r4, #12]
 800f906:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f90a:	6665      	str	r5, [r4, #100]	; 0x64
 800f90c:	f000 f847 	bl	800f99e <__retarget_lock_init_recursive>
 800f910:	f7ff ff96 	bl	800f840 <__sfp_lock_release>
 800f914:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f918:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f91c:	6025      	str	r5, [r4, #0]
 800f91e:	61a5      	str	r5, [r4, #24]
 800f920:	2208      	movs	r2, #8
 800f922:	4629      	mov	r1, r5
 800f924:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f928:	f7fd fa9e 	bl	800ce68 <memset>
 800f92c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f930:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f934:	4620      	mov	r0, r4
 800f936:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f938:	3468      	adds	r4, #104	; 0x68
 800f93a:	e7d9      	b.n	800f8f0 <__sfp+0x1c>
 800f93c:	2104      	movs	r1, #4
 800f93e:	4638      	mov	r0, r7
 800f940:	f7ff ff62 	bl	800f808 <__sfmoreglue>
 800f944:	4604      	mov	r4, r0
 800f946:	6030      	str	r0, [r6, #0]
 800f948:	2800      	cmp	r0, #0
 800f94a:	d1d5      	bne.n	800f8f8 <__sfp+0x24>
 800f94c:	f7ff ff78 	bl	800f840 <__sfp_lock_release>
 800f950:	230c      	movs	r3, #12
 800f952:	603b      	str	r3, [r7, #0]
 800f954:	e7ee      	b.n	800f934 <__sfp+0x60>
 800f956:	bf00      	nop
 800f958:	0803d228 	.word	0x0803d228
 800f95c:	ffff0001 	.word	0xffff0001

0800f960 <_fwalk_reent>:
 800f960:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f964:	4606      	mov	r6, r0
 800f966:	4688      	mov	r8, r1
 800f968:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f96c:	2700      	movs	r7, #0
 800f96e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f972:	f1b9 0901 	subs.w	r9, r9, #1
 800f976:	d505      	bpl.n	800f984 <_fwalk_reent+0x24>
 800f978:	6824      	ldr	r4, [r4, #0]
 800f97a:	2c00      	cmp	r4, #0
 800f97c:	d1f7      	bne.n	800f96e <_fwalk_reent+0xe>
 800f97e:	4638      	mov	r0, r7
 800f980:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f984:	89ab      	ldrh	r3, [r5, #12]
 800f986:	2b01      	cmp	r3, #1
 800f988:	d907      	bls.n	800f99a <_fwalk_reent+0x3a>
 800f98a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f98e:	3301      	adds	r3, #1
 800f990:	d003      	beq.n	800f99a <_fwalk_reent+0x3a>
 800f992:	4629      	mov	r1, r5
 800f994:	4630      	mov	r0, r6
 800f996:	47c0      	blx	r8
 800f998:	4307      	orrs	r7, r0
 800f99a:	3568      	adds	r5, #104	; 0x68
 800f99c:	e7e9      	b.n	800f972 <_fwalk_reent+0x12>

0800f99e <__retarget_lock_init_recursive>:
 800f99e:	4770      	bx	lr

0800f9a0 <__retarget_lock_acquire_recursive>:
 800f9a0:	4770      	bx	lr

0800f9a2 <__retarget_lock_release_recursive>:
 800f9a2:	4770      	bx	lr

0800f9a4 <__swhatbuf_r>:
 800f9a4:	b570      	push	{r4, r5, r6, lr}
 800f9a6:	460e      	mov	r6, r1
 800f9a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f9ac:	2900      	cmp	r1, #0
 800f9ae:	b096      	sub	sp, #88	; 0x58
 800f9b0:	4614      	mov	r4, r2
 800f9b2:	461d      	mov	r5, r3
 800f9b4:	da08      	bge.n	800f9c8 <__swhatbuf_r+0x24>
 800f9b6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f9ba:	2200      	movs	r2, #0
 800f9bc:	602a      	str	r2, [r5, #0]
 800f9be:	061a      	lsls	r2, r3, #24
 800f9c0:	d410      	bmi.n	800f9e4 <__swhatbuf_r+0x40>
 800f9c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f9c6:	e00e      	b.n	800f9e6 <__swhatbuf_r+0x42>
 800f9c8:	466a      	mov	r2, sp
 800f9ca:	f000 f903 	bl	800fbd4 <_fstat_r>
 800f9ce:	2800      	cmp	r0, #0
 800f9d0:	dbf1      	blt.n	800f9b6 <__swhatbuf_r+0x12>
 800f9d2:	9a01      	ldr	r2, [sp, #4]
 800f9d4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f9d8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f9dc:	425a      	negs	r2, r3
 800f9de:	415a      	adcs	r2, r3
 800f9e0:	602a      	str	r2, [r5, #0]
 800f9e2:	e7ee      	b.n	800f9c2 <__swhatbuf_r+0x1e>
 800f9e4:	2340      	movs	r3, #64	; 0x40
 800f9e6:	2000      	movs	r0, #0
 800f9e8:	6023      	str	r3, [r4, #0]
 800f9ea:	b016      	add	sp, #88	; 0x58
 800f9ec:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f9f0 <__smakebuf_r>:
 800f9f0:	898b      	ldrh	r3, [r1, #12]
 800f9f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f9f4:	079d      	lsls	r5, r3, #30
 800f9f6:	4606      	mov	r6, r0
 800f9f8:	460c      	mov	r4, r1
 800f9fa:	d507      	bpl.n	800fa0c <__smakebuf_r+0x1c>
 800f9fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800fa00:	6023      	str	r3, [r4, #0]
 800fa02:	6123      	str	r3, [r4, #16]
 800fa04:	2301      	movs	r3, #1
 800fa06:	6163      	str	r3, [r4, #20]
 800fa08:	b002      	add	sp, #8
 800fa0a:	bd70      	pop	{r4, r5, r6, pc}
 800fa0c:	ab01      	add	r3, sp, #4
 800fa0e:	466a      	mov	r2, sp
 800fa10:	f7ff ffc8 	bl	800f9a4 <__swhatbuf_r>
 800fa14:	9900      	ldr	r1, [sp, #0]
 800fa16:	4605      	mov	r5, r0
 800fa18:	4630      	mov	r0, r6
 800fa1a:	f7ff f963 	bl	800ece4 <_malloc_r>
 800fa1e:	b948      	cbnz	r0, 800fa34 <__smakebuf_r+0x44>
 800fa20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fa24:	059a      	lsls	r2, r3, #22
 800fa26:	d4ef      	bmi.n	800fa08 <__smakebuf_r+0x18>
 800fa28:	f023 0303 	bic.w	r3, r3, #3
 800fa2c:	f043 0302 	orr.w	r3, r3, #2
 800fa30:	81a3      	strh	r3, [r4, #12]
 800fa32:	e7e3      	b.n	800f9fc <__smakebuf_r+0xc>
 800fa34:	4b0d      	ldr	r3, [pc, #52]	; (800fa6c <__smakebuf_r+0x7c>)
 800fa36:	62b3      	str	r3, [r6, #40]	; 0x28
 800fa38:	89a3      	ldrh	r3, [r4, #12]
 800fa3a:	6020      	str	r0, [r4, #0]
 800fa3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fa40:	81a3      	strh	r3, [r4, #12]
 800fa42:	9b00      	ldr	r3, [sp, #0]
 800fa44:	6163      	str	r3, [r4, #20]
 800fa46:	9b01      	ldr	r3, [sp, #4]
 800fa48:	6120      	str	r0, [r4, #16]
 800fa4a:	b15b      	cbz	r3, 800fa64 <__smakebuf_r+0x74>
 800fa4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fa50:	4630      	mov	r0, r6
 800fa52:	f000 f8d1 	bl	800fbf8 <_isatty_r>
 800fa56:	b128      	cbz	r0, 800fa64 <__smakebuf_r+0x74>
 800fa58:	89a3      	ldrh	r3, [r4, #12]
 800fa5a:	f023 0303 	bic.w	r3, r3, #3
 800fa5e:	f043 0301 	orr.w	r3, r3, #1
 800fa62:	81a3      	strh	r3, [r4, #12]
 800fa64:	89a0      	ldrh	r0, [r4, #12]
 800fa66:	4305      	orrs	r5, r0
 800fa68:	81a5      	strh	r5, [r4, #12]
 800fa6a:	e7cd      	b.n	800fa08 <__smakebuf_r+0x18>
 800fa6c:	0800f7fd 	.word	0x0800f7fd

0800fa70 <_malloc_usable_size_r>:
 800fa70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fa74:	1f18      	subs	r0, r3, #4
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	bfbc      	itt	lt
 800fa7a:	580b      	ldrlt	r3, [r1, r0]
 800fa7c:	18c0      	addlt	r0, r0, r3
 800fa7e:	4770      	bx	lr

0800fa80 <_raise_r>:
 800fa80:	291f      	cmp	r1, #31
 800fa82:	b538      	push	{r3, r4, r5, lr}
 800fa84:	4604      	mov	r4, r0
 800fa86:	460d      	mov	r5, r1
 800fa88:	d904      	bls.n	800fa94 <_raise_r+0x14>
 800fa8a:	2316      	movs	r3, #22
 800fa8c:	6003      	str	r3, [r0, #0]
 800fa8e:	f04f 30ff 	mov.w	r0, #4294967295
 800fa92:	bd38      	pop	{r3, r4, r5, pc}
 800fa94:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800fa96:	b112      	cbz	r2, 800fa9e <_raise_r+0x1e>
 800fa98:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fa9c:	b94b      	cbnz	r3, 800fab2 <_raise_r+0x32>
 800fa9e:	4620      	mov	r0, r4
 800faa0:	f000 f830 	bl	800fb04 <_getpid_r>
 800faa4:	462a      	mov	r2, r5
 800faa6:	4601      	mov	r1, r0
 800faa8:	4620      	mov	r0, r4
 800faaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800faae:	f000 b817 	b.w	800fae0 <_kill_r>
 800fab2:	2b01      	cmp	r3, #1
 800fab4:	d00a      	beq.n	800facc <_raise_r+0x4c>
 800fab6:	1c59      	adds	r1, r3, #1
 800fab8:	d103      	bne.n	800fac2 <_raise_r+0x42>
 800faba:	2316      	movs	r3, #22
 800fabc:	6003      	str	r3, [r0, #0]
 800fabe:	2001      	movs	r0, #1
 800fac0:	e7e7      	b.n	800fa92 <_raise_r+0x12>
 800fac2:	2400      	movs	r4, #0
 800fac4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800fac8:	4628      	mov	r0, r5
 800faca:	4798      	blx	r3
 800facc:	2000      	movs	r0, #0
 800face:	e7e0      	b.n	800fa92 <_raise_r+0x12>

0800fad0 <raise>:
 800fad0:	4b02      	ldr	r3, [pc, #8]	; (800fadc <raise+0xc>)
 800fad2:	4601      	mov	r1, r0
 800fad4:	6818      	ldr	r0, [r3, #0]
 800fad6:	f7ff bfd3 	b.w	800fa80 <_raise_r>
 800fada:	bf00      	nop
 800fadc:	20000250 	.word	0x20000250

0800fae0 <_kill_r>:
 800fae0:	b538      	push	{r3, r4, r5, lr}
 800fae2:	4d07      	ldr	r5, [pc, #28]	; (800fb00 <_kill_r+0x20>)
 800fae4:	2300      	movs	r3, #0
 800fae6:	4604      	mov	r4, r0
 800fae8:	4608      	mov	r0, r1
 800faea:	4611      	mov	r1, r2
 800faec:	602b      	str	r3, [r5, #0]
 800faee:	f7f5 fd81 	bl	80055f4 <_kill>
 800faf2:	1c43      	adds	r3, r0, #1
 800faf4:	d102      	bne.n	800fafc <_kill_r+0x1c>
 800faf6:	682b      	ldr	r3, [r5, #0]
 800faf8:	b103      	cbz	r3, 800fafc <_kill_r+0x1c>
 800fafa:	6023      	str	r3, [r4, #0]
 800fafc:	bd38      	pop	{r3, r4, r5, pc}
 800fafe:	bf00      	nop
 800fb00:	200008d0 	.word	0x200008d0

0800fb04 <_getpid_r>:
 800fb04:	f7f5 bd6e 	b.w	80055e4 <_getpid>

0800fb08 <__sread>:
 800fb08:	b510      	push	{r4, lr}
 800fb0a:	460c      	mov	r4, r1
 800fb0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fb10:	f000 f894 	bl	800fc3c <_read_r>
 800fb14:	2800      	cmp	r0, #0
 800fb16:	bfab      	itete	ge
 800fb18:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800fb1a:	89a3      	ldrhlt	r3, [r4, #12]
 800fb1c:	181b      	addge	r3, r3, r0
 800fb1e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800fb22:	bfac      	ite	ge
 800fb24:	6563      	strge	r3, [r4, #84]	; 0x54
 800fb26:	81a3      	strhlt	r3, [r4, #12]
 800fb28:	bd10      	pop	{r4, pc}

0800fb2a <__swrite>:
 800fb2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb2e:	461f      	mov	r7, r3
 800fb30:	898b      	ldrh	r3, [r1, #12]
 800fb32:	05db      	lsls	r3, r3, #23
 800fb34:	4605      	mov	r5, r0
 800fb36:	460c      	mov	r4, r1
 800fb38:	4616      	mov	r6, r2
 800fb3a:	d505      	bpl.n	800fb48 <__swrite+0x1e>
 800fb3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fb40:	2302      	movs	r3, #2
 800fb42:	2200      	movs	r2, #0
 800fb44:	f000 f868 	bl	800fc18 <_lseek_r>
 800fb48:	89a3      	ldrh	r3, [r4, #12]
 800fb4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fb4e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fb52:	81a3      	strh	r3, [r4, #12]
 800fb54:	4632      	mov	r2, r6
 800fb56:	463b      	mov	r3, r7
 800fb58:	4628      	mov	r0, r5
 800fb5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fb5e:	f000 b817 	b.w	800fb90 <_write_r>

0800fb62 <__sseek>:
 800fb62:	b510      	push	{r4, lr}
 800fb64:	460c      	mov	r4, r1
 800fb66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fb6a:	f000 f855 	bl	800fc18 <_lseek_r>
 800fb6e:	1c43      	adds	r3, r0, #1
 800fb70:	89a3      	ldrh	r3, [r4, #12]
 800fb72:	bf15      	itete	ne
 800fb74:	6560      	strne	r0, [r4, #84]	; 0x54
 800fb76:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800fb7a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800fb7e:	81a3      	strheq	r3, [r4, #12]
 800fb80:	bf18      	it	ne
 800fb82:	81a3      	strhne	r3, [r4, #12]
 800fb84:	bd10      	pop	{r4, pc}

0800fb86 <__sclose>:
 800fb86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fb8a:	f000 b813 	b.w	800fbb4 <_close_r>
	...

0800fb90 <_write_r>:
 800fb90:	b538      	push	{r3, r4, r5, lr}
 800fb92:	4d07      	ldr	r5, [pc, #28]	; (800fbb0 <_write_r+0x20>)
 800fb94:	4604      	mov	r4, r0
 800fb96:	4608      	mov	r0, r1
 800fb98:	4611      	mov	r1, r2
 800fb9a:	2200      	movs	r2, #0
 800fb9c:	602a      	str	r2, [r5, #0]
 800fb9e:	461a      	mov	r2, r3
 800fba0:	f7f5 fd5f 	bl	8005662 <_write>
 800fba4:	1c43      	adds	r3, r0, #1
 800fba6:	d102      	bne.n	800fbae <_write_r+0x1e>
 800fba8:	682b      	ldr	r3, [r5, #0]
 800fbaa:	b103      	cbz	r3, 800fbae <_write_r+0x1e>
 800fbac:	6023      	str	r3, [r4, #0]
 800fbae:	bd38      	pop	{r3, r4, r5, pc}
 800fbb0:	200008d0 	.word	0x200008d0

0800fbb4 <_close_r>:
 800fbb4:	b538      	push	{r3, r4, r5, lr}
 800fbb6:	4d06      	ldr	r5, [pc, #24]	; (800fbd0 <_close_r+0x1c>)
 800fbb8:	2300      	movs	r3, #0
 800fbba:	4604      	mov	r4, r0
 800fbbc:	4608      	mov	r0, r1
 800fbbe:	602b      	str	r3, [r5, #0]
 800fbc0:	f7f5 fd6b 	bl	800569a <_close>
 800fbc4:	1c43      	adds	r3, r0, #1
 800fbc6:	d102      	bne.n	800fbce <_close_r+0x1a>
 800fbc8:	682b      	ldr	r3, [r5, #0]
 800fbca:	b103      	cbz	r3, 800fbce <_close_r+0x1a>
 800fbcc:	6023      	str	r3, [r4, #0]
 800fbce:	bd38      	pop	{r3, r4, r5, pc}
 800fbd0:	200008d0 	.word	0x200008d0

0800fbd4 <_fstat_r>:
 800fbd4:	b538      	push	{r3, r4, r5, lr}
 800fbd6:	4d07      	ldr	r5, [pc, #28]	; (800fbf4 <_fstat_r+0x20>)
 800fbd8:	2300      	movs	r3, #0
 800fbda:	4604      	mov	r4, r0
 800fbdc:	4608      	mov	r0, r1
 800fbde:	4611      	mov	r1, r2
 800fbe0:	602b      	str	r3, [r5, #0]
 800fbe2:	f7f5 fd66 	bl	80056b2 <_fstat>
 800fbe6:	1c43      	adds	r3, r0, #1
 800fbe8:	d102      	bne.n	800fbf0 <_fstat_r+0x1c>
 800fbea:	682b      	ldr	r3, [r5, #0]
 800fbec:	b103      	cbz	r3, 800fbf0 <_fstat_r+0x1c>
 800fbee:	6023      	str	r3, [r4, #0]
 800fbf0:	bd38      	pop	{r3, r4, r5, pc}
 800fbf2:	bf00      	nop
 800fbf4:	200008d0 	.word	0x200008d0

0800fbf8 <_isatty_r>:
 800fbf8:	b538      	push	{r3, r4, r5, lr}
 800fbfa:	4d06      	ldr	r5, [pc, #24]	; (800fc14 <_isatty_r+0x1c>)
 800fbfc:	2300      	movs	r3, #0
 800fbfe:	4604      	mov	r4, r0
 800fc00:	4608      	mov	r0, r1
 800fc02:	602b      	str	r3, [r5, #0]
 800fc04:	f7f5 fd65 	bl	80056d2 <_isatty>
 800fc08:	1c43      	adds	r3, r0, #1
 800fc0a:	d102      	bne.n	800fc12 <_isatty_r+0x1a>
 800fc0c:	682b      	ldr	r3, [r5, #0]
 800fc0e:	b103      	cbz	r3, 800fc12 <_isatty_r+0x1a>
 800fc10:	6023      	str	r3, [r4, #0]
 800fc12:	bd38      	pop	{r3, r4, r5, pc}
 800fc14:	200008d0 	.word	0x200008d0

0800fc18 <_lseek_r>:
 800fc18:	b538      	push	{r3, r4, r5, lr}
 800fc1a:	4d07      	ldr	r5, [pc, #28]	; (800fc38 <_lseek_r+0x20>)
 800fc1c:	4604      	mov	r4, r0
 800fc1e:	4608      	mov	r0, r1
 800fc20:	4611      	mov	r1, r2
 800fc22:	2200      	movs	r2, #0
 800fc24:	602a      	str	r2, [r5, #0]
 800fc26:	461a      	mov	r2, r3
 800fc28:	f7f5 fd5e 	bl	80056e8 <_lseek>
 800fc2c:	1c43      	adds	r3, r0, #1
 800fc2e:	d102      	bne.n	800fc36 <_lseek_r+0x1e>
 800fc30:	682b      	ldr	r3, [r5, #0]
 800fc32:	b103      	cbz	r3, 800fc36 <_lseek_r+0x1e>
 800fc34:	6023      	str	r3, [r4, #0]
 800fc36:	bd38      	pop	{r3, r4, r5, pc}
 800fc38:	200008d0 	.word	0x200008d0

0800fc3c <_read_r>:
 800fc3c:	b538      	push	{r3, r4, r5, lr}
 800fc3e:	4d07      	ldr	r5, [pc, #28]	; (800fc5c <_read_r+0x20>)
 800fc40:	4604      	mov	r4, r0
 800fc42:	4608      	mov	r0, r1
 800fc44:	4611      	mov	r1, r2
 800fc46:	2200      	movs	r2, #0
 800fc48:	602a      	str	r2, [r5, #0]
 800fc4a:	461a      	mov	r2, r3
 800fc4c:	f7f5 fcec 	bl	8005628 <_read>
 800fc50:	1c43      	adds	r3, r0, #1
 800fc52:	d102      	bne.n	800fc5a <_read_r+0x1e>
 800fc54:	682b      	ldr	r3, [r5, #0]
 800fc56:	b103      	cbz	r3, 800fc5a <_read_r+0x1e>
 800fc58:	6023      	str	r3, [r4, #0]
 800fc5a:	bd38      	pop	{r3, r4, r5, pc}
 800fc5c:	200008d0 	.word	0x200008d0

0800fc60 <trunc>:
 800fc60:	ec51 0b10 	vmov	r0, r1, d0
 800fc64:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800fc68:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800fc6c:	2b13      	cmp	r3, #19
 800fc6e:	b5d0      	push	{r4, r6, r7, lr}
 800fc70:	460c      	mov	r4, r1
 800fc72:	dc10      	bgt.n	800fc96 <trunc+0x36>
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	bfa5      	ittet	ge
 800fc78:	4a11      	ldrge	r2, [pc, #68]	; (800fcc0 <trunc+0x60>)
 800fc7a:	fa42 f303 	asrge.w	r3, r2, r3
 800fc7e:	2100      	movlt	r1, #0
 800fc80:	2100      	movge	r1, #0
 800fc82:	bfb9      	ittee	lt
 800fc84:	2000      	movlt	r0, #0
 800fc86:	f004 4100 	andlt.w	r1, r4, #2147483648	; 0x80000000
 800fc8a:	2000      	movge	r0, #0
 800fc8c:	ea24 0103 	bicge.w	r1, r4, r3
 800fc90:	ec41 0b10 	vmov	d0, r0, r1
 800fc94:	bdd0      	pop	{r4, r6, r7, pc}
 800fc96:	2b33      	cmp	r3, #51	; 0x33
 800fc98:	dd08      	ble.n	800fcac <trunc+0x4c>
 800fc9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fc9e:	d1f7      	bne.n	800fc90 <trunc+0x30>
 800fca0:	ee10 2a10 	vmov	r2, s0
 800fca4:	460b      	mov	r3, r1
 800fca6:	f7f0 faf9 	bl	800029c <__adddf3>
 800fcaa:	e7f1      	b.n	800fc90 <trunc+0x30>
 800fcac:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800fcb0:	f04f 33ff 	mov.w	r3, #4294967295
 800fcb4:	fa23 f202 	lsr.w	r2, r3, r2
 800fcb8:	ea20 0602 	bic.w	r6, r0, r2
 800fcbc:	4630      	mov	r0, r6
 800fcbe:	e7e7      	b.n	800fc90 <trunc+0x30>
 800fcc0:	000fffff 	.word	0x000fffff

0800fcc4 <ceilf>:
 800fcc4:	ee10 3a10 	vmov	r3, s0
 800fcc8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800fccc:	3a7f      	subs	r2, #127	; 0x7f
 800fcce:	2a16      	cmp	r2, #22
 800fcd0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800fcd4:	dc2a      	bgt.n	800fd2c <ceilf+0x68>
 800fcd6:	2a00      	cmp	r2, #0
 800fcd8:	da11      	bge.n	800fcfe <ceilf+0x3a>
 800fcda:	eddf 7a19 	vldr	s15, [pc, #100]	; 800fd40 <ceilf+0x7c>
 800fcde:	ee30 0a27 	vadd.f32	s0, s0, s15
 800fce2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800fce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcea:	dd05      	ble.n	800fcf8 <ceilf+0x34>
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	db23      	blt.n	800fd38 <ceilf+0x74>
 800fcf0:	2900      	cmp	r1, #0
 800fcf2:	bf18      	it	ne
 800fcf4:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 800fcf8:	ee00 3a10 	vmov	s0, r3
 800fcfc:	4770      	bx	lr
 800fcfe:	4911      	ldr	r1, [pc, #68]	; (800fd44 <ceilf+0x80>)
 800fd00:	4111      	asrs	r1, r2
 800fd02:	420b      	tst	r3, r1
 800fd04:	d0fa      	beq.n	800fcfc <ceilf+0x38>
 800fd06:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800fd40 <ceilf+0x7c>
 800fd0a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800fd0e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800fd12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd16:	ddef      	ble.n	800fcf8 <ceilf+0x34>
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	bfc2      	ittt	gt
 800fd1c:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 800fd20:	fa40 f202 	asrgt.w	r2, r0, r2
 800fd24:	189b      	addgt	r3, r3, r2
 800fd26:	ea23 0301 	bic.w	r3, r3, r1
 800fd2a:	e7e5      	b.n	800fcf8 <ceilf+0x34>
 800fd2c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800fd30:	d3e4      	bcc.n	800fcfc <ceilf+0x38>
 800fd32:	ee30 0a00 	vadd.f32	s0, s0, s0
 800fd36:	4770      	bx	lr
 800fd38:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800fd3c:	e7dc      	b.n	800fcf8 <ceilf+0x34>
 800fd3e:	bf00      	nop
 800fd40:	7149f2ca 	.word	0x7149f2ca
 800fd44:	007fffff 	.word	0x007fffff

0800fd48 <_init>:
 800fd48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd4a:	bf00      	nop
 800fd4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fd4e:	bc08      	pop	{r3}
 800fd50:	469e      	mov	lr, r3
 800fd52:	4770      	bx	lr

0800fd54 <_fini>:
 800fd54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd56:	bf00      	nop
 800fd58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fd5a:	bc08      	pop	{r3}
 800fd5c:	469e      	mov	lr, r3
 800fd5e:	4770      	bx	lr
