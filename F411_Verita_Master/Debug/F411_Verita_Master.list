
F411_Verita_Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b1f8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001f9c  0800b398  0800b398  0001b398  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d334  0800d334  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800d334  0800d334  0001d334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d33c  0800d33c  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d33c  0800d33c  0001d33c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d340  0800d340  0001d340  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800d344  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b4  200001f0  0800d534  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004a4  0800d534  000204a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010bae  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002697  00000000  00000000  00030dce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e90  00000000  00000000  00033468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d80  00000000  00000000  000342f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018966  00000000  00000000  00035078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012129  00000000  00000000  0004d9de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fdde  00000000  00000000  0005fb07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ef8e5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e08  00000000  00000000  000ef938  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f0 	.word	0x200001f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b380 	.word	0x0800b380

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f4 	.word	0x200001f4
 80001dc:	0800b380 	.word	0x0800b380

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b974 	b.w	8000f98 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468e      	mov	lr, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14d      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4694      	mov	ip, r2
 8000cda:	d969      	bls.n	8000db0 <__udivmoddi4+0xe8>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b152      	cbz	r2, 8000cf8 <__udivmoddi4+0x30>
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	f1c2 0120 	rsb	r1, r2, #32
 8000cea:	fa20 f101 	lsr.w	r1, r0, r1
 8000cee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cf6:	4094      	lsls	r4, r2
 8000cf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cfc:	0c21      	lsrs	r1, r4, #16
 8000cfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000d02:	fa1f f78c 	uxth.w	r7, ip
 8000d06:	fb08 e316 	mls	r3, r8, r6, lr
 8000d0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d0e:	fb06 f107 	mul.w	r1, r6, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1e:	f080 811f 	bcs.w	8000f60 <__udivmoddi4+0x298>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 811c 	bls.w	8000f60 <__udivmoddi4+0x298>
 8000d28:	3e02      	subs	r6, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a5b      	subs	r3, r3, r1
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d34:	fb08 3310 	mls	r3, r8, r0, r3
 8000d38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d3c:	fb00 f707 	mul.w	r7, r0, r7
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x92>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4c:	f080 810a 	bcs.w	8000f64 <__udivmoddi4+0x29c>
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	f240 8107 	bls.w	8000f64 <__udivmoddi4+0x29c>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5e:	1be4      	subs	r4, r4, r7
 8000d60:	2600      	movs	r6, #0
 8000d62:	b11d      	cbz	r5, 8000d6c <__udivmoddi4+0xa4>
 8000d64:	40d4      	lsrs	r4, r2
 8000d66:	2300      	movs	r3, #0
 8000d68:	e9c5 4300 	strd	r4, r3, [r5]
 8000d6c:	4631      	mov	r1, r6
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0xc2>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	f000 80ef 	beq.w	8000f5a <__udivmoddi4+0x292>
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d82:	4630      	mov	r0, r6
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f683 	clz	r6, r3
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	d14a      	bne.n	8000e28 <__udivmoddi4+0x160>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xd4>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80f9 	bhi.w	8000f8e <__udivmoddi4+0x2c6>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	469e      	mov	lr, r3
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d0e0      	beq.n	8000d6c <__udivmoddi4+0xa4>
 8000daa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dae:	e7dd      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000db0:	b902      	cbnz	r2, 8000db4 <__udivmoddi4+0xec>
 8000db2:	deff      	udf	#255	; 0xff
 8000db4:	fab2 f282 	clz	r2, r2
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	f040 8092 	bne.w	8000ee2 <__udivmoddi4+0x21a>
 8000dbe:	eba1 010c 	sub.w	r1, r1, ip
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f fe8c 	uxth.w	lr, ip
 8000dca:	2601      	movs	r6, #1
 8000dcc:	0c20      	lsrs	r0, r4, #16
 8000dce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dda:	fb0e f003 	mul.w	r0, lr, r3
 8000dde:	4288      	cmp	r0, r1
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x12c>
 8000de2:	eb1c 0101 	adds.w	r1, ip, r1
 8000de6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x12a>
 8000dec:	4288      	cmp	r0, r1
 8000dee:	f200 80cb 	bhi.w	8000f88 <__udivmoddi4+0x2c0>
 8000df2:	4643      	mov	r3, r8
 8000df4:	1a09      	subs	r1, r1, r0
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000e00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e04:	fb0e fe00 	mul.w	lr, lr, r0
 8000e08:	45a6      	cmp	lr, r4
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x156>
 8000e0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e14:	d202      	bcs.n	8000e1c <__udivmoddi4+0x154>
 8000e16:	45a6      	cmp	lr, r4
 8000e18:	f200 80bb 	bhi.w	8000f92 <__udivmoddi4+0x2ca>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	eba4 040e 	sub.w	r4, r4, lr
 8000e22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e26:	e79c      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000e28:	f1c6 0720 	rsb	r7, r6, #32
 8000e2c:	40b3      	lsls	r3, r6
 8000e2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e36:	fa20 f407 	lsr.w	r4, r0, r7
 8000e3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3e:	431c      	orrs	r4, r3
 8000e40:	40f9      	lsrs	r1, r7
 8000e42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e46:	fa00 f306 	lsl.w	r3, r0, r6
 8000e4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e4e:	0c20      	lsrs	r0, r4, #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fb09 1118 	mls	r1, r9, r8, r1
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e60:	4288      	cmp	r0, r1
 8000e62:	fa02 f206 	lsl.w	r2, r2, r6
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x1b8>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e70:	f080 8088 	bcs.w	8000f84 <__udivmoddi4+0x2bc>
 8000e74:	4288      	cmp	r0, r1
 8000e76:	f240 8085 	bls.w	8000f84 <__udivmoddi4+0x2bc>
 8000e7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e88:	fb09 1110 	mls	r1, r9, r0, r1
 8000e8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e94:	458e      	cmp	lr, r1
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x1e2>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea0:	d26c      	bcs.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea2:	458e      	cmp	lr, r1
 8000ea4:	d96a      	bls.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4461      	add	r1, ip
 8000eaa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eae:	fba0 9402 	umull	r9, r4, r0, r2
 8000eb2:	eba1 010e 	sub.w	r1, r1, lr
 8000eb6:	42a1      	cmp	r1, r4
 8000eb8:	46c8      	mov	r8, r9
 8000eba:	46a6      	mov	lr, r4
 8000ebc:	d356      	bcc.n	8000f6c <__udivmoddi4+0x2a4>
 8000ebe:	d053      	beq.n	8000f68 <__udivmoddi4+0x2a0>
 8000ec0:	b15d      	cbz	r5, 8000eda <__udivmoddi4+0x212>
 8000ec2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ec6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eca:	fa01 f707 	lsl.w	r7, r1, r7
 8000ece:	fa22 f306 	lsr.w	r3, r2, r6
 8000ed2:	40f1      	lsrs	r1, r6
 8000ed4:	431f      	orrs	r7, r3
 8000ed6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eda:	2600      	movs	r6, #0
 8000edc:	4631      	mov	r1, r6
 8000ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee2:	f1c2 0320 	rsb	r3, r2, #32
 8000ee6:	40d8      	lsrs	r0, r3
 8000ee8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eec:	fa21 f303 	lsr.w	r3, r1, r3
 8000ef0:	4091      	lsls	r1, r2
 8000ef2:	4301      	orrs	r1, r0
 8000ef4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef8:	fa1f fe8c 	uxth.w	lr, ip
 8000efc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f00:	fb07 3610 	mls	r6, r7, r0, r3
 8000f04:	0c0b      	lsrs	r3, r1, #16
 8000f06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f0e:	429e      	cmp	r6, r3
 8000f10:	fa04 f402 	lsl.w	r4, r4, r2
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x260>
 8000f16:	eb1c 0303 	adds.w	r3, ip, r3
 8000f1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f1e:	d22f      	bcs.n	8000f80 <__udivmoddi4+0x2b8>
 8000f20:	429e      	cmp	r6, r3
 8000f22:	d92d      	bls.n	8000f80 <__udivmoddi4+0x2b8>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4463      	add	r3, ip
 8000f28:	1b9b      	subs	r3, r3, r6
 8000f2a:	b289      	uxth	r1, r1
 8000f2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f30:	fb07 3316 	mls	r3, r7, r6, r3
 8000f34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f38:	fb06 f30e 	mul.w	r3, r6, lr
 8000f3c:	428b      	cmp	r3, r1
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x28a>
 8000f40:	eb1c 0101 	adds.w	r1, ip, r1
 8000f44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f48:	d216      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d914      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4e:	3e02      	subs	r6, #2
 8000f50:	4461      	add	r1, ip
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f58:	e738      	b.n	8000dcc <__udivmoddi4+0x104>
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e705      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e3      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6f8      	b.n	8000d5a <__udivmoddi4+0x92>
 8000f68:	454b      	cmp	r3, r9
 8000f6a:	d2a9      	bcs.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7a3      	b.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f78:	4646      	mov	r6, r8
 8000f7a:	e7ea      	b.n	8000f52 <__udivmoddi4+0x28a>
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	e794      	b.n	8000eaa <__udivmoddi4+0x1e2>
 8000f80:	4640      	mov	r0, r8
 8000f82:	e7d1      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f84:	46d0      	mov	r8, sl
 8000f86:	e77b      	b.n	8000e80 <__udivmoddi4+0x1b8>
 8000f88:	3b02      	subs	r3, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	e732      	b.n	8000df4 <__udivmoddi4+0x12c>
 8000f8e:	4630      	mov	r0, r6
 8000f90:	e709      	b.n	8000da6 <__udivmoddi4+0xde>
 8000f92:	4464      	add	r4, ip
 8000f94:	3802      	subs	r0, #2
 8000f96:	e742      	b.n	8000e1e <__udivmoddi4+0x156>

08000f98 <__aeabi_idiv0>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <INA219Read_cx>:
 *  D16[1] :  00 CD  // D8[ 3 2 ]
 *  D16[1] | D16[0] = ABCD
 * */


uint16_t INA219Read_cx(I2C_HandleTypeDef *hi2c,uint8_t dv_addr, uint8_t ina_rg){
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b086      	sub	sp, #24
 8000fa0:	af04      	add	r7, sp, #16
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	70fb      	strb	r3, [r7, #3]
 8000fa8:	4613      	mov	r3, r2
 8000faa:	70bb      	strb	r3, [r7, #2]
	 * @param : ina_rg - register address need to access
	 * @Retval: raw bit value
	 * @ex. answer = INA219Read_cx(&hi2c1, INA219_ADDR_1, INA219_RG_Current);
	 * */

	INACBffr.D32 = 0; //// buffer clear
 8000fac:	4b0d      	ldr	r3, [pc, #52]	; (8000fe4 <INA219Read_cx+0x48>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	601a      	str	r2, [r3, #0]
	HAL_I2C_Mem_Read(hi2c, dv_addr, ina_rg, I2C_MEMADD_SIZE_8BIT, &INACBffr.D8[1], 2, 10);
 8000fb2:	78fb      	ldrb	r3, [r7, #3]
 8000fb4:	b299      	uxth	r1, r3
 8000fb6:	78bb      	ldrb	r3, [r7, #2]
 8000fb8:	b29a      	uxth	r2, r3
 8000fba:	230a      	movs	r3, #10
 8000fbc:	9302      	str	r3, [sp, #8]
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	9301      	str	r3, [sp, #4]
 8000fc2:	4b09      	ldr	r3, [pc, #36]	; (8000fe8 <INA219Read_cx+0x4c>)
 8000fc4:	9300      	str	r3, [sp, #0]
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	6878      	ldr	r0, [r7, #4]
 8000fca:	f003 f8c7 	bl	800415c <HAL_I2C_Mem_Read>
	return INACBffr.D16[1] | INACBffr.D16[0];
 8000fce:	4b05      	ldr	r3, [pc, #20]	; (8000fe4 <INA219Read_cx+0x48>)
 8000fd0:	885a      	ldrh	r2, [r3, #2]
 8000fd2:	4b04      	ldr	r3, [pc, #16]	; (8000fe4 <INA219Read_cx+0x48>)
 8000fd4:	881b      	ldrh	r3, [r3, #0]
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	b29b      	uxth	r3, r3
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	2000020c 	.word	0x2000020c
 8000fe8:	2000020d 	.word	0x2000020d

08000fec <INA219_BitReset>:

void INA219_BitReset(I2C_HandleTypeDef *hi2c,uint8_t dv_addr){
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b088      	sub	sp, #32
 8000ff0:	af04      	add	r7, sp, #16
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	70fb      	strb	r3, [r7, #3]
	/* @brief : generates a system reset that is the same as power-on reset.
	 * 			Don't forget to  Re-calibrate or zero Current & power will be returned
	 * @param : hi2c - HAL_I2C used to read
	 * @param : dv_addr - address of INA219 device in the busline
	 * */
	uint8_t resetx = 0x80;
 8000ff8:	2380      	movs	r3, #128	; 0x80
 8000ffa:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(hi2c, dv_addr, INA219_RG_Config, I2C_MEMADD_SIZE_8BIT, &resetx, 2, 10);
 8000ffc:	78fb      	ldrb	r3, [r7, #3]
 8000ffe:	b299      	uxth	r1, r3
 8001000:	230a      	movs	r3, #10
 8001002:	9302      	str	r3, [sp, #8]
 8001004:	2302      	movs	r3, #2
 8001006:	9301      	str	r3, [sp, #4]
 8001008:	f107 030f 	add.w	r3, r7, #15
 800100c:	9300      	str	r3, [sp, #0]
 800100e:	2301      	movs	r3, #1
 8001010:	2200      	movs	r2, #0
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	f002 ffa8 	bl	8003f68 <HAL_I2C_Mem_Write>

}
 8001018:	bf00      	nop
 800101a:	3710      	adds	r7, #16
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}

08001020 <INA219_INIT_Calibrate>:

INA219_Conf_Strc configura;
void INA219_INIT_Calibrate(I2C_HandleTypeDef *hi2c,uint8_t dv_addr){
 8001020:	b580      	push	{r7, lr}
 8001022:	b08a      	sub	sp, #40	; 0x28
 8001024:	af04      	add	r7, sp, #16
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	460b      	mov	r3, r1
 800102a:	70fb      	strb	r3, [r7, #3]
	 * @param : hi2c - HAL_I2C used to read
	 * @param : dv_addr - address of INA219 device in the busline
	 * */

	////// -------------------- Configuration -------------------------------------
	configura.INA219CF.reset = 0;
 800102c:	4a52      	ldr	r2, [pc, #328]	; (8001178 <INA219_INIT_Calibrate+0x158>)
 800102e:	7853      	ldrb	r3, [r2, #1]
 8001030:	f36f 13c7 	bfc	r3, #7, #1
 8001034:	7053      	strb	r3, [r2, #1]
	configura.INA219CF.BRNG = BRNG_FSR_32V;
 8001036:	4a50      	ldr	r2, [pc, #320]	; (8001178 <INA219_INIT_Calibrate+0x158>)
 8001038:	7853      	ldrb	r3, [r2, #1]
 800103a:	f043 0320 	orr.w	r3, r3, #32
 800103e:	7053      	strb	r3, [r2, #1]
	configura.INA219CF.PGA = PGA_GainD4_160mv;
 8001040:	4a4d      	ldr	r2, [pc, #308]	; (8001178 <INA219_INIT_Calibrate+0x158>)
 8001042:	7853      	ldrb	r3, [r2, #1]
 8001044:	2102      	movs	r1, #2
 8001046:	f361 03c4 	bfi	r3, r1, #3, #2
 800104a:	7053      	strb	r3, [r2, #1]
	configura.INA219CF.BADC = ADCI_12bit_532uS;
 800104c:	4a4a      	ldr	r2, [pc, #296]	; (8001178 <INA219_INIT_Calibrate+0x158>)
 800104e:	8813      	ldrh	r3, [r2, #0]
 8001050:	2103      	movs	r1, #3
 8001052:	f361 13ca 	bfi	r3, r1, #7, #4
 8001056:	8013      	strh	r3, [r2, #0]
	configura.INA219CF.SADC = ADCI_12bit_532uS;
 8001058:	4a47      	ldr	r2, [pc, #284]	; (8001178 <INA219_INIT_Calibrate+0x158>)
 800105a:	7813      	ldrb	r3, [r2, #0]
 800105c:	2103      	movs	r1, #3
 800105e:	f361 03c6 	bfi	r3, r1, #3, #4
 8001062:	7013      	strb	r3, [r2, #0]
	configura.INA219CF.Mode = INAM_ShuntBusV_Continuous;
 8001064:	4a44      	ldr	r2, [pc, #272]	; (8001178 <INA219_INIT_Calibrate+0x158>)
 8001066:	7813      	ldrb	r3, [r2, #0]
 8001068:	f043 0307 	orr.w	r3, r3, #7
 800106c:	7013      	strb	r3, [r2, #0]

	uint8_t confictor_si2c[2] = {configura.D8[1], configura.D8[0]};
 800106e:	4b42      	ldr	r3, [pc, #264]	; (8001178 <INA219_INIT_Calibrate+0x158>)
 8001070:	785b      	ldrb	r3, [r3, #1]
 8001072:	753b      	strb	r3, [r7, #20]
 8001074:	4b40      	ldr	r3, [pc, #256]	; (8001178 <INA219_INIT_Calibrate+0x158>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	757b      	strb	r3, [r7, #21]
	HAL_I2C_Mem_Write(hi2c, dv_addr, INA219_RG_Config, I2C_MEMADD_SIZE_8BIT, &confictor_si2c[0], 2, 10);
 800107a:	78fb      	ldrb	r3, [r7, #3]
 800107c:	b299      	uxth	r1, r3
 800107e:	230a      	movs	r3, #10
 8001080:	9302      	str	r3, [sp, #8]
 8001082:	2302      	movs	r3, #2
 8001084:	9301      	str	r3, [sp, #4]
 8001086:	f107 0314 	add.w	r3, r7, #20
 800108a:	9300      	str	r3, [sp, #0]
 800108c:	2301      	movs	r3, #1
 800108e:	2200      	movs	r2, #0
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	f002 ff69 	bl	8003f68 <HAL_I2C_Mem_Write>
		uint16_t U16;
	}calibrator;

	// float current_LSB = INA219_MAX_Expect_Current / 32768.0; // 2^15
	//calibrator.U16 = (int16_t)(trunc( 0.04096 / (current_LSB * INA219_R_SHUNT_Val))) << 1;
	calibrator.U16 = trunc( 0.04096 / (current_LSB * INA219_R_SHUNT_Val));
 8001096:	4b39      	ldr	r3, [pc, #228]	; (800117c <INA219_INIT_Calibrate+0x15c>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff fa5c 	bl	8000558 <__aeabi_f2d>
 80010a0:	a32d      	add	r3, pc, #180	; (adr r3, 8001158 <INA219_INIT_Calibrate+0x138>)
 80010a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010a6:	f7ff faaf 	bl	8000608 <__aeabi_dmul>
 80010aa:	4602      	mov	r2, r0
 80010ac:	460b      	mov	r3, r1
 80010ae:	a12c      	add	r1, pc, #176	; (adr r1, 8001160 <INA219_INIT_Calibrate+0x140>)
 80010b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80010b4:	f7ff fbd2 	bl	800085c <__aeabi_ddiv>
 80010b8:	4602      	mov	r2, r0
 80010ba:	460b      	mov	r3, r1
 80010bc:	ec43 2b17 	vmov	d7, r2, r3
 80010c0:	eeb0 0a47 	vmov.f32	s0, s14
 80010c4:	eef0 0a67 	vmov.f32	s1, s15
 80010c8:	f00a f8e6 	bl	800b298 <trunc>
 80010cc:	ec53 2b10 	vmov	r2, r3, d0
 80010d0:	4610      	mov	r0, r2
 80010d2:	4619      	mov	r1, r3
 80010d4:	f7ff fd70 	bl	8000bb8 <__aeabi_d2uiz>
 80010d8:	4603      	mov	r3, r0
 80010da:	b29b      	uxth	r3, r3
 80010dc:	823b      	strh	r3, [r7, #16]
#ifdef calibrate_EQ6
	calibrator.U16 = trunc((calibrator.U16 * MeaShuntCurrent_ExtMeter) / INA219_Current_Raw);
 80010de:	8a3b      	ldrh	r3, [r7, #16]
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff fa27 	bl	8000534 <__aeabi_i2d>
 80010e6:	a320      	add	r3, pc, #128	; (adr r3, 8001168 <INA219_INIT_Calibrate+0x148>)
 80010e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ec:	f7ff fa8c 	bl	8000608 <__aeabi_dmul>
 80010f0:	4602      	mov	r2, r0
 80010f2:	460b      	mov	r3, r1
 80010f4:	4610      	mov	r0, r2
 80010f6:	4619      	mov	r1, r3
 80010f8:	a31d      	add	r3, pc, #116	; (adr r3, 8001170 <INA219_INIT_Calibrate+0x150>)
 80010fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010fe:	f7ff fbad 	bl	800085c <__aeabi_ddiv>
 8001102:	4602      	mov	r2, r0
 8001104:	460b      	mov	r3, r1
 8001106:	ec43 2b17 	vmov	d7, r2, r3
 800110a:	eeb0 0a47 	vmov.f32	s0, s14
 800110e:	eef0 0a67 	vmov.f32	s1, s15
 8001112:	f00a f8c1 	bl	800b298 <trunc>
 8001116:	ec53 2b10 	vmov	r2, r3, d0
 800111a:	4610      	mov	r0, r2
 800111c:	4619      	mov	r1, r3
 800111e:	f7ff fd4b 	bl	8000bb8 <__aeabi_d2uiz>
 8001122:	4603      	mov	r3, r0
 8001124:	b29b      	uxth	r3, r3
 8001126:	823b      	strh	r3, [r7, #16]
#endif
	uint8_t calibrator_si2c[2] = {calibrator.U8[1], calibrator.U8[0]}; //// switch byte to send high order first in I2C
 8001128:	7c7b      	ldrb	r3, [r7, #17]
 800112a:	733b      	strb	r3, [r7, #12]
 800112c:	7c3b      	ldrb	r3, [r7, #16]
 800112e:	737b      	strb	r3, [r7, #13]
	////  ex calibrator(I = 3A, 0.1Rshunt) = 4473 = 0x1179

	HAL_I2C_Mem_Write(hi2c, dv_addr, INA219_RG_Calibra, I2C_MEMADD_SIZE_8BIT, &calibrator_si2c[0], 2, 10);
 8001130:	78fb      	ldrb	r3, [r7, #3]
 8001132:	b299      	uxth	r1, r3
 8001134:	230a      	movs	r3, #10
 8001136:	9302      	str	r3, [sp, #8]
 8001138:	2302      	movs	r3, #2
 800113a:	9301      	str	r3, [sp, #4]
 800113c:	f107 030c 	add.w	r3, r7, #12
 8001140:	9300      	str	r3, [sp, #0]
 8001142:	2301      	movs	r3, #1
 8001144:	2205      	movs	r2, #5
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f002 ff0e 	bl	8003f68 <HAL_I2C_Mem_Write>

}
 800114c:	bf00      	nop
 800114e:	3718      	adds	r7, #24
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	f3af 8000 	nop.w
 8001158:	9999999a 	.word	0x9999999a
 800115c:	3fb99999 	.word	0x3fb99999
 8001160:	88e368f1 	.word	0x88e368f1
 8001164:	3fa4f8b5 	.word	0x3fa4f8b5
 8001168:	9999999a 	.word	0x9999999a
 800116c:	3fe99999 	.word	0x3fe99999
 8001170:	9999999a 	.word	0x9999999a
 8001174:	40059999 	.word	0x40059999
 8001178:	20000210 	.word	0x20000210
 800117c:	20000000 	.word	0x20000000

08001180 <INA219Read_BusV>:
	uint8_t calibrator_si2c[2] = {calibrator.U8[1], calibrator.U8[0]}; //// switch byte to send high order first in I2C
	HAL_I2C_Mem_Write(hi2c, dv_addr, INA219_RG_Calibra, I2C_MEMADD_SIZE_8BIT, &calibrator_si2c[0], 2, 10);

}

uint16_t INA219Read_BusV(I2C_HandleTypeDef *hi2c,uint8_t dv_addr){
 8001180:	b580      	push	{r7, lr}
 8001182:	b086      	sub	sp, #24
 8001184:	af04      	add	r7, sp, #16
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	460b      	mov	r3, r1
 800118a:	70fb      	strb	r3, [r7, #3]
	//	if(INACBffr[2] & 0x01){ // still unsure how to deal with CNVR / OVF
//
//	}


	INACBffr.D32 = 0; //// buffer clear
 800118c:	4b0e      	ldr	r3, [pc, #56]	; (80011c8 <INA219Read_BusV+0x48>)
 800118e:	2200      	movs	r2, #0
 8001190:	601a      	str	r2, [r3, #0]
	HAL_I2C_Mem_Read(hi2c, dv_addr, INA219_RG_BusV, I2C_MEMADD_SIZE_8BIT, &INACBffr.D8[1], 2, 10);
 8001192:	78fb      	ldrb	r3, [r7, #3]
 8001194:	b299      	uxth	r1, r3
 8001196:	230a      	movs	r3, #10
 8001198:	9302      	str	r3, [sp, #8]
 800119a:	2302      	movs	r3, #2
 800119c:	9301      	str	r3, [sp, #4]
 800119e:	4b0b      	ldr	r3, [pc, #44]	; (80011cc <INA219Read_BusV+0x4c>)
 80011a0:	9300      	str	r3, [sp, #0]
 80011a2:	2301      	movs	r3, #1
 80011a4:	2202      	movs	r2, #2
 80011a6:	6878      	ldr	r0, [r7, #4]
 80011a8:	f002 ffd8 	bl	800415c <HAL_I2C_Mem_Read>

	return ((INACBffr.D16[1] | INACBffr.D16[0]) >> 3) * 4;
 80011ac:	4b06      	ldr	r3, [pc, #24]	; (80011c8 <INA219Read_BusV+0x48>)
 80011ae:	885a      	ldrh	r2, [r3, #2]
 80011b0:	4b05      	ldr	r3, [pc, #20]	; (80011c8 <INA219Read_BusV+0x48>)
 80011b2:	881b      	ldrh	r3, [r3, #0]
 80011b4:	4313      	orrs	r3, r2
 80011b6:	b29b      	uxth	r3, r3
 80011b8:	08db      	lsrs	r3, r3, #3
 80011ba:	b29b      	uxth	r3, r3
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	b29b      	uxth	r3, r3
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3708      	adds	r7, #8
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	2000020c 	.word	0x2000020c
 80011cc:	2000020d 	.word	0x2000020d

080011d0 <INA219Read_Current>:

uint16_t INA219Read_Current(I2C_HandleTypeDef *hi2c,uint8_t dv_addr){
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b086      	sub	sp, #24
 80011d4:	af04      	add	r7, sp, #16
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	460b      	mov	r3, r1
 80011da:	70fb      	strb	r3, [r7, #3]
	 * @param : hi2c - HAL_I2C used to read
	 * @param : dv_addr - address of INA219 device in the busline
	 * @Retval: current in mA
	 * @ex.
	 * */
	INACBffr.D32 = 0; //// buffer clear
 80011dc:	4b0c      	ldr	r3, [pc, #48]	; (8001210 <INA219Read_Current+0x40>)
 80011de:	2200      	movs	r2, #0
 80011e0:	601a      	str	r2, [r3, #0]
	HAL_I2C_Mem_Read(hi2c, dv_addr, INA219_RG_Current, I2C_MEMADD_SIZE_8BIT, &INACBffr.D8[1], 2, 10);
 80011e2:	78fb      	ldrb	r3, [r7, #3]
 80011e4:	b299      	uxth	r1, r3
 80011e6:	230a      	movs	r3, #10
 80011e8:	9302      	str	r3, [sp, #8]
 80011ea:	2302      	movs	r3, #2
 80011ec:	9301      	str	r3, [sp, #4]
 80011ee:	4b09      	ldr	r3, [pc, #36]	; (8001214 <INA219Read_Current+0x44>)
 80011f0:	9300      	str	r3, [sp, #0]
 80011f2:	2301      	movs	r3, #1
 80011f4:	2204      	movs	r2, #4
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f002 ffb0 	bl	800415c <HAL_I2C_Mem_Read>

	return INACBffr.D16[1] | INACBffr.D16[0];
 80011fc:	4b04      	ldr	r3, [pc, #16]	; (8001210 <INA219Read_Current+0x40>)
 80011fe:	885a      	ldrh	r2, [r3, #2]
 8001200:	4b03      	ldr	r3, [pc, #12]	; (8001210 <INA219Read_Current+0x40>)
 8001202:	881b      	ldrh	r3, [r3, #0]
 8001204:	4313      	orrs	r3, r2
 8001206:	b29b      	uxth	r3, r3
}
 8001208:	4618      	mov	r0, r3
 800120a:	3708      	adds	r7, #8
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	2000020c 	.word	0x2000020c
 8001214:	2000020d 	.word	0x2000020d

08001218 <INA219Read_ShuntV>:

float INA219Read_ShuntV(I2C_HandleTypeDef *hi2c,uint8_t dv_addr){
 8001218:	b580      	push	{r7, lr}
 800121a:	b088      	sub	sp, #32
 800121c:	af04      	add	r7, sp, #16
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	460b      	mov	r3, r1
 8001222:	70fb      	strb	r3, [r7, #3]
	 * @param : hi2c - HAL_I2C used to read
	 * @param : dv_addr - address of INA219 device in the busline
	 * @Retval: shunt voltage in mV (.2f)
	 * @ex.
	 * */
	INACBffr.D32 = 0; //// buffer clear
 8001224:	4b17      	ldr	r3, [pc, #92]	; (8001284 <INA219Read_ShuntV+0x6c>)
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
	HAL_I2C_Mem_Read(hi2c, dv_addr, INA219_RG_ShuntV, I2C_MEMADD_SIZE_8BIT, &INACBffr.D8[1], 2, 10);
 800122a:	78fb      	ldrb	r3, [r7, #3]
 800122c:	b299      	uxth	r1, r3
 800122e:	230a      	movs	r3, #10
 8001230:	9302      	str	r3, [sp, #8]
 8001232:	2302      	movs	r3, #2
 8001234:	9301      	str	r3, [sp, #4]
 8001236:	4b14      	ldr	r3, [pc, #80]	; (8001288 <INA219Read_ShuntV+0x70>)
 8001238:	9300      	str	r3, [sp, #0]
 800123a:	2301      	movs	r3, #1
 800123c:	2201      	movs	r2, #1
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f002 ff8c 	bl	800415c <HAL_I2C_Mem_Read>

	//// Convert rawdata To V shunt from Table 7.Shunt Voltage Register Format

    int16_t rawshunt = INACBffr.D16[1] | INACBffr.D16[0];
 8001244:	4b0f      	ldr	r3, [pc, #60]	; (8001284 <INA219Read_ShuntV+0x6c>)
 8001246:	885a      	ldrh	r2, [r3, #2]
 8001248:	4b0e      	ldr	r3, [pc, #56]	; (8001284 <INA219Read_ShuntV+0x6c>)
 800124a:	881b      	ldrh	r3, [r3, #0]
 800124c:	4313      	orrs	r3, r2
 800124e:	b29b      	uxth	r3, r3
 8001250:	81fb      	strh	r3, [r7, #14]
    return rawshunt / 100.0;
 8001252:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff f96c 	bl	8000534 <__aeabi_i2d>
 800125c:	f04f 0200 	mov.w	r2, #0
 8001260:	4b0a      	ldr	r3, [pc, #40]	; (800128c <INA219Read_ShuntV+0x74>)
 8001262:	f7ff fafb 	bl	800085c <__aeabi_ddiv>
 8001266:	4602      	mov	r2, r0
 8001268:	460b      	mov	r3, r1
 800126a:	4610      	mov	r0, r2
 800126c:	4619      	mov	r1, r3
 800126e:	f7ff fcc3 	bl	8000bf8 <__aeabi_d2f>
 8001272:	4603      	mov	r3, r0
 8001274:	ee07 3a90 	vmov	s15, r3
//    	return rawshunt / 100.0;
//    }else{
//    	// if 2's complements
//    	return (~rawshunt + 1) / 100.0;
//    }
}
 8001278:	eeb0 0a67 	vmov.f32	s0, s15
 800127c:	3710      	adds	r7, #16
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	2000020c 	.word	0x2000020c
 8001288:	2000020d 	.word	0x2000020d
 800128c:	40590000 	.word	0x40590000

08001290 <INA219Read_Power>:

float INA219Read_Power(I2C_HandleTypeDef *hi2c,uint8_t dv_addr){
 8001290:	b5b0      	push	{r4, r5, r7, lr}
 8001292:	b086      	sub	sp, #24
 8001294:	af04      	add	r7, sp, #16
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	460b      	mov	r3, r1
 800129a:	70fb      	strb	r3, [r7, #3]
	 * @param : hi2c - HAL_I2C used to read
	 * @param : dv_addr - address of INA219 device in the busline
	 * @Retval: Power in mW
	 * @ex.
	 * */
	INACBffr.D32 = 0; //// buffer clear
 800129c:	4b1e      	ldr	r3, [pc, #120]	; (8001318 <INA219Read_Power+0x88>)
 800129e:	2200      	movs	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]
	HAL_I2C_Mem_Read(hi2c, dv_addr, INA219_RG_PoWer, I2C_MEMADD_SIZE_8BIT, &INACBffr.D8[1], 2, 10);
 80012a2:	78fb      	ldrb	r3, [r7, #3]
 80012a4:	b299      	uxth	r1, r3
 80012a6:	230a      	movs	r3, #10
 80012a8:	9302      	str	r3, [sp, #8]
 80012aa:	2302      	movs	r3, #2
 80012ac:	9301      	str	r3, [sp, #4]
 80012ae:	4b1b      	ldr	r3, [pc, #108]	; (800131c <INA219Read_Power+0x8c>)
 80012b0:	9300      	str	r3, [sp, #0]
 80012b2:	2301      	movs	r3, #1
 80012b4:	2203      	movs	r2, #3
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f002 ff50 	bl	800415c <HAL_I2C_Mem_Read>
	////  * 20, power_LSB = 20 x current_LSB & x 1000 make unit in mW
	return ((INACBffr.D16[1] | INACBffr.D16[0]) * (20000.0 * current_LSB));
 80012bc:	4b16      	ldr	r3, [pc, #88]	; (8001318 <INA219Read_Power+0x88>)
 80012be:	885a      	ldrh	r2, [r3, #2]
 80012c0:	4b15      	ldr	r3, [pc, #84]	; (8001318 <INA219Read_Power+0x88>)
 80012c2:	881b      	ldrh	r3, [r3, #0]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	b29b      	uxth	r3, r3
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff f933 	bl	8000534 <__aeabi_i2d>
 80012ce:	4604      	mov	r4, r0
 80012d0:	460d      	mov	r5, r1
 80012d2:	4b13      	ldr	r3, [pc, #76]	; (8001320 <INA219Read_Power+0x90>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff f93e 	bl	8000558 <__aeabi_f2d>
 80012dc:	a30c      	add	r3, pc, #48	; (adr r3, 8001310 <INA219Read_Power+0x80>)
 80012de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e2:	f7ff f991 	bl	8000608 <__aeabi_dmul>
 80012e6:	4602      	mov	r2, r0
 80012e8:	460b      	mov	r3, r1
 80012ea:	4620      	mov	r0, r4
 80012ec:	4629      	mov	r1, r5
 80012ee:	f7ff f98b 	bl	8000608 <__aeabi_dmul>
 80012f2:	4602      	mov	r2, r0
 80012f4:	460b      	mov	r3, r1
 80012f6:	4610      	mov	r0, r2
 80012f8:	4619      	mov	r1, r3
 80012fa:	f7ff fc7d 	bl	8000bf8 <__aeabi_d2f>
 80012fe:	4603      	mov	r3, r0
 8001300:	ee07 3a90 	vmov	s15, r3
}
 8001304:	eeb0 0a67 	vmov.f32	s0, s15
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bdb0      	pop	{r4, r5, r7, pc}
 800130e:	bf00      	nop
 8001310:	00000000 	.word	0x00000000
 8001314:	40d38800 	.word	0x40d38800
 8001318:	2000020c 	.word	0x2000020c
 800131c:	2000020d 	.word	0x2000020d
 8001320:	20000000 	.word	0x20000000

08001324 <Rx_Verita_engine>:

#include "Verita_PTC.h"

static enum {init, unpack, decode}verita_engine;

VRTPTC_StatusTypedef Rx_Verita_engine(uint8_t *Rxbffr, uint32_t *regisk){
 8001324:	b490      	push	{r4, r7}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	6039      	str	r1, [r7, #0]
		uint32_t U32;
	}logu;

	//uint8_t chksum = 0;

	switch (verita_engine){
 800132e:	4b40      	ldr	r3, [pc, #256]	; (8001430 <Rx_Verita_engine+0x10c>)
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	2b01      	cmp	r3, #1
 8001334:	d009      	beq.n	800134a <Rx_Verita_engine+0x26>
 8001336:	2b02      	cmp	r3, #2
 8001338:	d037      	beq.n	80013aa <Rx_Verita_engine+0x86>
	default:
	case init:

		if(Rxbffr[0] == 0x56){ //flag_vrt_en ||
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	2b56      	cmp	r3, #86	; 0x56
 8001340:	d16e      	bne.n	8001420 <Rx_Verita_engine+0xfc>
			verita_engine = unpack;
 8001342:	4b3b      	ldr	r3, [pc, #236]	; (8001430 <Rx_Verita_engine+0x10c>)
 8001344:	2201      	movs	r2, #1
 8001346:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001348:	e06a      	b.n	8001420 <Rx_Verita_engine+0xfc>

	case unpack:

		if(Rxbffr[0] == 0x56 && Rxbffr[1] == 0x52 && Rxbffr[2] == 0x54){
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	2b56      	cmp	r3, #86	; 0x56
 8001350:	d11c      	bne.n	800138c <Rx_Verita_engine+0x68>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	3301      	adds	r3, #1
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	2b52      	cmp	r3, #82	; 0x52
 800135a:	d117      	bne.n	800138c <Rx_Verita_engine+0x68>
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	3302      	adds	r3, #2
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	2b54      	cmp	r3, #84	; 0x54
 8001364:	d112      	bne.n	800138c <Rx_Verita_engine+0x68>

			//// log data first / prevent overwrite
			for(register int k = 0; k < 7; k++){
 8001366:	2400      	movs	r4, #0
 8001368:	e007      	b.n	800137a <Rx_Verita_engine+0x56>
				logger[k] = Rxbffr[k+3];
 800136a:	4623      	mov	r3, r4
 800136c:	3303      	adds	r3, #3
 800136e:	687a      	ldr	r2, [r7, #4]
 8001370:	4413      	add	r3, r2
 8001372:	781a      	ldrb	r2, [r3, #0]
 8001374:	4b2f      	ldr	r3, [pc, #188]	; (8001434 <Rx_Verita_engine+0x110>)
 8001376:	551a      	strb	r2, [r3, r4]
			for(register int k = 0; k < 7; k++){
 8001378:	3401      	adds	r4, #1
 800137a:	2c06      	cmp	r4, #6
 800137c:	ddf5      	ble.n	800136a <Rx_Verita_engine+0x46>
//			if(~chksum == logger[6]){
//				// pass
//			}

			//// mark that this data is already read
			Rxbffr[0] = 0xFF;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	22ff      	movs	r2, #255	; 0xff
 8001382:	701a      	strb	r2, [r3, #0]
			verita_engine = decode;
 8001384:	4b2a      	ldr	r3, [pc, #168]	; (8001430 <Rx_Verita_engine+0x10c>)
 8001386:	2202      	movs	r2, #2
 8001388:	701a      	strb	r2, [r3, #0]
			//// destroy data
			for(register int i = 0;i < sizeof(Rxbffr); i++){
				Rxbffr[i] = 0x00;
			}
		}
		break;
 800138a:	e04c      	b.n	8001426 <Rx_Verita_engine+0x102>
			verita_engine = init;
 800138c:	4b28      	ldr	r3, [pc, #160]	; (8001430 <Rx_Verita_engine+0x10c>)
 800138e:	2200      	movs	r2, #0
 8001390:	701a      	strb	r2, [r3, #0]
			for(register int i = 0;i < sizeof(Rxbffr); i++){
 8001392:	2400      	movs	r4, #0
 8001394:	e005      	b.n	80013a2 <Rx_Verita_engine+0x7e>
				Rxbffr[i] = 0x00;
 8001396:	4622      	mov	r2, r4
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	4413      	add	r3, r2
 800139c:	2200      	movs	r2, #0
 800139e:	701a      	strb	r2, [r3, #0]
			for(register int i = 0;i < sizeof(Rxbffr); i++){
 80013a0:	3401      	adds	r4, #1
 80013a2:	4623      	mov	r3, r4
 80013a4:	2b03      	cmp	r3, #3
 80013a6:	d9f6      	bls.n	8001396 <Rx_Verita_engine+0x72>
		break;
 80013a8:	e03d      	b.n	8001426 <Rx_Verita_engine+0x102>

	case decode:
		verita_engine = init;
 80013aa:	4b21      	ldr	r3, [pc, #132]	; (8001430 <Rx_Verita_engine+0x10c>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	701a      	strb	r2, [r3, #0]

		//// DATA phase, insert 32bit data into register box
		if(logger[0] <= 0x20){
 80013b0:	4b20      	ldr	r3, [pc, #128]	; (8001434 <Rx_Verita_engine+0x110>)
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	2b20      	cmp	r3, #32
 80013b6:	d814      	bhi.n	80013e2 <Rx_Verita_engine+0xbe>

			logu.U8[3] = logger[1];
 80013b8:	4b1e      	ldr	r3, [pc, #120]	; (8001434 <Rx_Verita_engine+0x110>)
 80013ba:	785b      	ldrb	r3, [r3, #1]
 80013bc:	73fb      	strb	r3, [r7, #15]
			logu.U8[2] = logger[2];
 80013be:	4b1d      	ldr	r3, [pc, #116]	; (8001434 <Rx_Verita_engine+0x110>)
 80013c0:	789b      	ldrb	r3, [r3, #2]
 80013c2:	73bb      	strb	r3, [r7, #14]
			logu.U8[1] = logger[3];
 80013c4:	4b1b      	ldr	r3, [pc, #108]	; (8001434 <Rx_Verita_engine+0x110>)
 80013c6:	78db      	ldrb	r3, [r3, #3]
 80013c8:	737b      	strb	r3, [r7, #13]
			logu.U8[0] = logger[4];
 80013ca:	4b1a      	ldr	r3, [pc, #104]	; (8001434 <Rx_Verita_engine+0x110>)
 80013cc:	791b      	ldrb	r3, [r3, #4]
 80013ce:	733b      	strb	r3, [r7, #12]

			regisk[logger[0]] = logu.U32;
 80013d0:	4b18      	ldr	r3, [pc, #96]	; (8001434 <Rx_Verita_engine+0x110>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	683a      	ldr	r2, [r7, #0]
 80013d8:	4413      	add	r3, r2
 80013da:	68fa      	ldr	r2, [r7, #12]
 80013dc:	601a      	str	r2, [r3, #0]
			return VRT_OK;
 80013de:	2391      	movs	r3, #145	; 0x91
 80013e0:	e021      	b.n	8001426 <Rx_Verita_engine+0x102>
		}

		//// CMD phase, return recieved Command
		if(logger[0] >= 0x90){
 80013e2:	4b14      	ldr	r3, [pc, #80]	; (8001434 <Rx_Verita_engine+0x110>)
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	2b8f      	cmp	r3, #143	; 0x8f
 80013e8:	d91c      	bls.n	8001424 <Rx_Verita_engine+0x100>
			switch(logger[0]){
 80013ea:	4b12      	ldr	r3, [pc, #72]	; (8001434 <Rx_Verita_engine+0x110>)
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	3b91      	subs	r3, #145	; 0x91
 80013f0:	2b03      	cmp	r3, #3
 80013f2:	d80b      	bhi.n	800140c <Rx_Verita_engine+0xe8>
 80013f4:	a201      	add	r2, pc, #4	; (adr r2, 80013fc <Rx_Verita_engine+0xd8>)
 80013f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013fa:	bf00      	nop
 80013fc:	08001411 	.word	0x08001411
 8001400:	08001415 	.word	0x08001415
 8001404:	08001419 	.word	0x08001419
 8001408:	0800141d 	.word	0x0800141d
				default:
				case 0x90:
					return VRT_ERROR;
 800140c:	2390      	movs	r3, #144	; 0x90
 800140e:	e00a      	b.n	8001426 <Rx_Verita_engine+0x102>
				case 0x91:
					return VRT_OK;
 8001410:	2391      	movs	r3, #145	; 0x91
 8001412:	e008      	b.n	8001426 <Rx_Verita_engine+0x102>
				case 0x92:
					return VRT_Busy;
 8001414:	2392      	movs	r3, #146	; 0x92
 8001416:	e006      	b.n	8001426 <Rx_Verita_engine+0x102>
				case 0x93:
					return VRT_Regain;
 8001418:	2393      	movs	r3, #147	; 0x93
 800141a:	e004      	b.n	8001426 <Rx_Verita_engine+0x102>
				case 0x94:
					return VRT_Next;
 800141c:	2394      	movs	r3, #148	; 0x94
 800141e:	e002      	b.n	8001426 <Rx_Verita_engine+0x102>
		break;
 8001420:	bf00      	nop
 8001422:	e000      	b.n	8001426 <Rx_Verita_engine+0x102>
			}
		}

		break;
 8001424:	bf00      	nop
	}
}
 8001426:	4618      	mov	r0, r3
 8001428:	3710      	adds	r7, #16
 800142a:	46bd      	mov	sp, r7
 800142c:	bc90      	pop	{r4, r7}
 800142e:	4770      	bx	lr
 8001430:	20000212 	.word	0x20000212
 8001434:	20000214 	.word	0x20000214

08001438 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001438:	b5b0      	push	{r4, r5, r7, lr}
 800143a:	b094      	sub	sp, #80	; 0x50
 800143c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800143e:	f001 fcc7 	bl	8002dd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001442:	f000 f927 	bl	8001694 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001446:	f000 fa69 	bl	800191c <MX_GPIO_Init>
  MX_DMA_Init();
 800144a:	f000 fa47 	bl	80018dc <MX_DMA_Init>
  MX_USART2_UART_Init();
 800144e:	f000 f9f1 	bl	8001834 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8001452:	f000 f9b7 	bl	80017c4 <MX_SPI2_Init>
  MX_I2C1_Init();
 8001456:	f000 f987 	bl	8001768 <MX_I2C1_Init>
  MX_USART6_UART_Init();
 800145a:	f000 fa15 	bl	8001888 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  ili9341_Init();
 800145e:	f000 fe4f 	bl	8002100 <ili9341_Init>
  ili9341_DisplayOn();
 8001462:	f000 fe31 	bl	80020c8 <ili9341_DisplayOn>

//  ILI9341_Init();
//  ILI9341_FillScreen(ILI9341_BLACK);

#ifdef INA219_Wrk
  INA219_INIT_Calibrate(&hi2c1, INA219_ADDR_1);
 8001466:	2180      	movs	r1, #128	; 0x80
 8001468:	4878      	ldr	r0, [pc, #480]	; (800164c <main+0x214>)
 800146a:	f7ff fdd9 	bl	8001020 <INA219_INIT_Calibrate>
//
//  INA219_INIT(&hi2c1, INA219_ADDR_1, cofgra);
//  INA219_Calibrate(&hi2c1, INA219_ADDR_1);
#endif

  char temp[]="----------------- F411_Verita_Master --------------------\r\n";
 800146e:	4b78      	ldr	r3, [pc, #480]	; (8001650 <main+0x218>)
 8001470:	1d3c      	adds	r4, r7, #4
 8001472:	461d      	mov	r5, r3
 8001474:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001476:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001478:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800147a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800147c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800147e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001480:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001484:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 8001488:	1d3b      	adds	r3, r7, #4
 800148a:	4618      	mov	r0, r3
 800148c:	f7fe fea8 	bl	80001e0 <strlen>
 8001490:	4603      	mov	r3, r0
 8001492:	b29a      	uxth	r2, r3
 8001494:	1d39      	adds	r1, r7, #4
 8001496:	230a      	movs	r3, #10
 8001498:	486e      	ldr	r0, [pc, #440]	; (8001654 <main+0x21c>)
 800149a:	f005 fe29 	bl	80070f0 <HAL_UART_Transmit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_UART_Receive_DMA(&huart6, &RxBufferMtCl[0], 10);
 800149e:	220a      	movs	r2, #10
 80014a0:	496d      	ldr	r1, [pc, #436]	; (8001658 <main+0x220>)
 80014a2:	486e      	ldr	r0, [pc, #440]	; (800165c <main+0x224>)
 80014a4:	f005 feb6 	bl	8007214 <HAL_UART_Receive_DMA>

	  engst = Rx_Verita_engine(RxBufferMtCl, verita_regis);
 80014a8:	496d      	ldr	r1, [pc, #436]	; (8001660 <main+0x228>)
 80014aa:	486b      	ldr	r0, [pc, #428]	; (8001658 <main+0x220>)
 80014ac:	f7ff ff3a 	bl	8001324 <Rx_Verita_engine>
 80014b0:	4603      	mov	r3, r0
 80014b2:	461a      	mov	r2, r3
 80014b4:	4b6b      	ldr	r3, [pc, #428]	; (8001664 <main+0x22c>)
 80014b6:	701a      	strb	r2, [r3, #0]

	  if (HAL_GetTick() >= timestamp_one){
 80014b8:	f001 fcf0 	bl	8002e9c <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	4b6a      	ldr	r3, [pc, #424]	; (8001668 <main+0x230>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	429a      	cmp	r2, r3
 80014c4:	f0c0 80b1 	bcc.w	800162a <main+0x1f2>
		  timestamp_one += 1000;
 80014c8:	4b67      	ldr	r3, [pc, #412]	; (8001668 <main+0x230>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80014d0:	4a65      	ldr	r2, [pc, #404]	; (8001668 <main+0x230>)
 80014d2:	6013      	str	r3, [r2, #0]
		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80014d4:	2120      	movs	r1, #32
 80014d6:	4865      	ldr	r0, [pc, #404]	; (800166c <main+0x234>)
 80014d8:	f002 fbcf 	bl	8003c7a <HAL_GPIO_TogglePin>


		  ili9341_FillRect(50, 20, 50, 20, cl_RED);
 80014dc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80014e0:	9300      	str	r3, [sp, #0]
 80014e2:	2314      	movs	r3, #20
 80014e4:	2232      	movs	r2, #50	; 0x32
 80014e6:	2114      	movs	r1, #20
 80014e8:	2032      	movs	r0, #50	; 0x32
 80014ea:	f000 ff21 	bl	8002330 <ili9341_FillRect>
		  ili9341_FillRect(100, 20, 50, 20, cl_GREEN);
 80014ee:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80014f2:	9300      	str	r3, [sp, #0]
 80014f4:	2314      	movs	r3, #20
 80014f6:	2232      	movs	r2, #50	; 0x32
 80014f8:	2114      	movs	r1, #20
 80014fa:	2064      	movs	r0, #100	; 0x64
 80014fc:	f000 ff18 	bl	8002330 <ili9341_FillRect>
		  ili9341_FillRect(150, 20, 50, 20, cl_BLUE);
 8001500:	231f      	movs	r3, #31
 8001502:	9300      	str	r3, [sp, #0]
 8001504:	2314      	movs	r3, #20
 8001506:	2232      	movs	r2, #50	; 0x32
 8001508:	2114      	movs	r1, #20
 800150a:	2096      	movs	r0, #150	; 0x96
 800150c:	f000 ff10 	bl	8002330 <ili9341_FillRect>
//		  INATT.U16[3] = (INATT.U8[0] << 8) | INATT.U8[1];

		  //INATT.U16[1] = INA219Read_cx(&hi2c1, INA219_ADDR_1, INA219_RG_Config);
		  //INATT.U16[2] = INA219Read_cx(&hi2c1, INA219_ADDR_1, INA219_RG_Current);

		  inata.Bus_V   = INA219Read_BusV(&hi2c1, INA219_ADDR_1);
 8001510:	2180      	movs	r1, #128	; 0x80
 8001512:	484e      	ldr	r0, [pc, #312]	; (800164c <main+0x214>)
 8001514:	f7ff fe34 	bl	8001180 <INA219Read_BusV>
 8001518:	4603      	mov	r3, r0
 800151a:	461a      	mov	r2, r3
 800151c:	4b54      	ldr	r3, [pc, #336]	; (8001670 <main+0x238>)
 800151e:	821a      	strh	r2, [r3, #16]
		  inata.CURRENT = INA219Read_Current(&hi2c1, INA219_ADDR_1);
 8001520:	2180      	movs	r1, #128	; 0x80
 8001522:	484a      	ldr	r0, [pc, #296]	; (800164c <main+0x214>)
 8001524:	f7ff fe54 	bl	80011d0 <INA219Read_Current>
 8001528:	4603      	mov	r3, r0
 800152a:	b21a      	sxth	r2, r3
 800152c:	4b50      	ldr	r3, [pc, #320]	; (8001670 <main+0x238>)
 800152e:	811a      	strh	r2, [r3, #8]
		  inata.POWER   = INA219Read_Power(&hi2c1, INA219_ADDR_1);
 8001530:	2180      	movs	r1, #128	; 0x80
 8001532:	4846      	ldr	r0, [pc, #280]	; (800164c <main+0x214>)
 8001534:	f7ff feac 	bl	8001290 <INA219Read_Power>
 8001538:	eef0 7a40 	vmov.f32	s15, s0
 800153c:	4b4c      	ldr	r3, [pc, #304]	; (8001670 <main+0x238>)
 800153e:	edc3 7a03 	vstr	s15, [r3, #12]
		  inata.SHUNT_V = INA219Read_ShuntV(&hi2c1, INA219_ADDR_1);
 8001542:	2180      	movs	r1, #128	; 0x80
 8001544:	4841      	ldr	r0, [pc, #260]	; (800164c <main+0x214>)
 8001546:	f7ff fe67 	bl	8001218 <INA219Read_ShuntV>
 800154a:	eef0 7a40 	vmov.f32	s15, s0
 800154e:	4b48      	ldr	r3, [pc, #288]	; (8001670 <main+0x238>)
 8001550:	edc3 7a01 	vstr	s15, [r3, #4]

		  inata.Calibra =  INA219Read_cx(&hi2c1, INA219_ADDR_1, INA219_RG_Calibra);
 8001554:	2205      	movs	r2, #5
 8001556:	2180      	movs	r1, #128	; 0x80
 8001558:	483c      	ldr	r0, [pc, #240]	; (800164c <main+0x214>)
 800155a:	f7ff fd1f 	bl	8000f9c <INA219Read_cx>
 800155e:	4603      	mov	r3, r0
 8001560:	461a      	mov	r2, r3
 8001562:	4b43      	ldr	r3, [pc, #268]	; (8001670 <main+0x238>)
 8001564:	825a      	strh	r2, [r3, #18]
		  inata.Config = INA219Read_cx(&hi2c1, INA219_ADDR_1, INA219_RG_Config);
 8001566:	2200      	movs	r2, #0
 8001568:	2180      	movs	r1, #128	; 0x80
 800156a:	4838      	ldr	r0, [pc, #224]	; (800164c <main+0x214>)
 800156c:	f7ff fd16 	bl	8000f9c <INA219Read_cx>
 8001570:	4603      	mov	r3, r0
 8001572:	461a      	mov	r2, r3
 8001574:	4b3e      	ldr	r3, [pc, #248]	; (8001670 <main+0x238>)
 8001576:	801a      	strh	r2, [r3, #0]

		  sprintf(TextDispBuffer,"calibrator: %4X", inata.Calibra);
 8001578:	4b3d      	ldr	r3, [pc, #244]	; (8001670 <main+0x238>)
 800157a:	8a5b      	ldrh	r3, [r3, #18]
 800157c:	461a      	mov	r2, r3
 800157e:	493d      	ldr	r1, [pc, #244]	; (8001674 <main+0x23c>)
 8001580:	483d      	ldr	r0, [pc, #244]	; (8001678 <main+0x240>)
 8001582:	f007 fc0f 	bl	8008da4 <siprintf>
		  ili9341_WriteString(20, 50, TextDispBuffer, Font16, cl_GREENYELLOW, cl_BLACK);
 8001586:	4b3d      	ldr	r3, [pc, #244]	; (800167c <main+0x244>)
 8001588:	2200      	movs	r2, #0
 800158a:	9202      	str	r2, [sp, #8]
 800158c:	f64a 72e5 	movw	r2, #45029	; 0xafe5
 8001590:	9201      	str	r2, [sp, #4]
 8001592:	685a      	ldr	r2, [r3, #4]
 8001594:	9200      	str	r2, [sp, #0]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a37      	ldr	r2, [pc, #220]	; (8001678 <main+0x240>)
 800159a:	2132      	movs	r1, #50	; 0x32
 800159c:	2014      	movs	r0, #20
 800159e:	f000 ffc4 	bl	800252a <ili9341_WriteString>

		  sprintf(TextDispBuffer,"V mV: %d    ", inata.Bus_V);
 80015a2:	4b33      	ldr	r3, [pc, #204]	; (8001670 <main+0x238>)
 80015a4:	8a1b      	ldrh	r3, [r3, #16]
 80015a6:	461a      	mov	r2, r3
 80015a8:	4935      	ldr	r1, [pc, #212]	; (8001680 <main+0x248>)
 80015aa:	4833      	ldr	r0, [pc, #204]	; (8001678 <main+0x240>)
 80015ac:	f007 fbfa 	bl	8008da4 <siprintf>
		  ili9341_WriteString(20, 70, TextDispBuffer, Font20, cl_CYAN, cl_BLACK);
 80015b0:	4b34      	ldr	r3, [pc, #208]	; (8001684 <main+0x24c>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	9202      	str	r2, [sp, #8]
 80015b6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80015ba:	9201      	str	r2, [sp, #4]
 80015bc:	685a      	ldr	r2, [r3, #4]
 80015be:	9200      	str	r2, [sp, #0]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a2d      	ldr	r2, [pc, #180]	; (8001678 <main+0x240>)
 80015c4:	2146      	movs	r1, #70	; 0x46
 80015c6:	2014      	movs	r0, #20
 80015c8:	f000 ffaf 	bl	800252a <ili9341_WriteString>

		  sprintf(TextDispBuffer,"I mA: %d    ", inata.CURRENT);
 80015cc:	4b28      	ldr	r3, [pc, #160]	; (8001670 <main+0x238>)
 80015ce:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80015d2:	461a      	mov	r2, r3
 80015d4:	492c      	ldr	r1, [pc, #176]	; (8001688 <main+0x250>)
 80015d6:	4828      	ldr	r0, [pc, #160]	; (8001678 <main+0x240>)
 80015d8:	f007 fbe4 	bl	8008da4 <siprintf>
		  ili9341_WriteString(20, 95, TextDispBuffer, Font20, cl_CYAN, cl_BLACK);
 80015dc:	4b29      	ldr	r3, [pc, #164]	; (8001684 <main+0x24c>)
 80015de:	2200      	movs	r2, #0
 80015e0:	9202      	str	r2, [sp, #8]
 80015e2:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80015e6:	9201      	str	r2, [sp, #4]
 80015e8:	685a      	ldr	r2, [r3, #4]
 80015ea:	9200      	str	r2, [sp, #0]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a22      	ldr	r2, [pc, #136]	; (8001678 <main+0x240>)
 80015f0:	215f      	movs	r1, #95	; 0x5f
 80015f2:	2014      	movs	r0, #20
 80015f4:	f000 ff99 	bl	800252a <ili9341_WriteString>

		  sprintf(TextDispBuffer,"P mW: %.4f  ", inata.POWER);
 80015f8:	4b1d      	ldr	r3, [pc, #116]	; (8001670 <main+0x238>)
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7fe ffab 	bl	8000558 <__aeabi_f2d>
 8001602:	4602      	mov	r2, r0
 8001604:	460b      	mov	r3, r1
 8001606:	4921      	ldr	r1, [pc, #132]	; (800168c <main+0x254>)
 8001608:	481b      	ldr	r0, [pc, #108]	; (8001678 <main+0x240>)
 800160a:	f007 fbcb 	bl	8008da4 <siprintf>
		  ili9341_WriteString(20, 120, TextDispBuffer, Font20, cl_CYAN, cl_BLACK);
 800160e:	4b1d      	ldr	r3, [pc, #116]	; (8001684 <main+0x24c>)
 8001610:	2200      	movs	r2, #0
 8001612:	9202      	str	r2, [sp, #8]
 8001614:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001618:	9201      	str	r2, [sp, #4]
 800161a:	685a      	ldr	r2, [r3, #4]
 800161c:	9200      	str	r2, [sp, #0]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a15      	ldr	r2, [pc, #84]	; (8001678 <main+0x240>)
 8001622:	2178      	movs	r1, #120	; 0x78
 8001624:	2014      	movs	r0, #20
 8001626:	f000 ff80 	bl	800252a <ili9341_WriteString>

#endif

		  } // timestamp_one

	  if (HAL_GetTick() >= timestamp_disp){
 800162a:	f001 fc37 	bl	8002e9c <HAL_GetTick>
 800162e:	4602      	mov	r2, r0
 8001630:	4b17      	ldr	r3, [pc, #92]	; (8001690 <main+0x258>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	429a      	cmp	r2, r3
 8001636:	f4ff af32 	bcc.w	800149e <main+0x66>
	  		timestamp_disp += 10;
 800163a:	4b15      	ldr	r3, [pc, #84]	; (8001690 <main+0x258>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	330a      	adds	r3, #10
 8001640:	4a13      	ldr	r2, [pc, #76]	; (8001690 <main+0x258>)
 8001642:	6013      	str	r3, [r2, #0]
	  		running_box();
 8001644:	f000 fa24 	bl	8001a90 <running_box>
	  HAL_UART_Receive_DMA(&huart6, &RxBufferMtCl[0], 10);
 8001648:	e729      	b.n	800149e <main+0x66>
 800164a:	bf00      	nop
 800164c:	20000220 	.word	0x20000220
 8001650:	0800b3d8 	.word	0x0800b3d8
 8001654:	200002cc 	.word	0x200002cc
 8001658:	20000418 	.word	0x20000418
 800165c:	20000310 	.word	0x20000310
 8001660:	20000424 	.word	0x20000424
 8001664:	20000422 	.word	0x20000422
 8001668:	2000047c 	.word	0x2000047c
 800166c:	40020000 	.word	0x40020000
 8001670:	20000464 	.word	0x20000464
 8001674:	0800b398 	.word	0x0800b398
 8001678:	200003b4 	.word	0x200003b4
 800167c:	20000008 	.word	0x20000008
 8001680:	0800b3a8 	.word	0x0800b3a8
 8001684:	20000010 	.word	0x20000010
 8001688:	0800b3b8 	.word	0x0800b3b8
 800168c:	0800b3c8 	.word	0x0800b3c8
 8001690:	20000480 	.word	0x20000480

08001694 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b094      	sub	sp, #80	; 0x50
 8001698:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800169a:	f107 0320 	add.w	r3, r7, #32
 800169e:	2230      	movs	r2, #48	; 0x30
 80016a0:	2100      	movs	r1, #0
 80016a2:	4618      	mov	r0, r3
 80016a4:	f006 ff0c 	bl	80084c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016a8:	f107 030c 	add.w	r3, r7, #12
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	605a      	str	r2, [r3, #4]
 80016b2:	609a      	str	r2, [r3, #8]
 80016b4:	60da      	str	r2, [r3, #12]
 80016b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016b8:	2300      	movs	r3, #0
 80016ba:	60bb      	str	r3, [r7, #8]
 80016bc:	4b28      	ldr	r3, [pc, #160]	; (8001760 <SystemClock_Config+0xcc>)
 80016be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c0:	4a27      	ldr	r2, [pc, #156]	; (8001760 <SystemClock_Config+0xcc>)
 80016c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016c6:	6413      	str	r3, [r2, #64]	; 0x40
 80016c8:	4b25      	ldr	r3, [pc, #148]	; (8001760 <SystemClock_Config+0xcc>)
 80016ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016d0:	60bb      	str	r3, [r7, #8]
 80016d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016d4:	2300      	movs	r3, #0
 80016d6:	607b      	str	r3, [r7, #4]
 80016d8:	4b22      	ldr	r3, [pc, #136]	; (8001764 <SystemClock_Config+0xd0>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a21      	ldr	r2, [pc, #132]	; (8001764 <SystemClock_Config+0xd0>)
 80016de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80016e2:	6013      	str	r3, [r2, #0]
 80016e4:	4b1f      	ldr	r3, [pc, #124]	; (8001764 <SystemClock_Config+0xd0>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80016ec:	607b      	str	r3, [r7, #4]
 80016ee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016f0:	2302      	movs	r3, #2
 80016f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016f4:	2301      	movs	r3, #1
 80016f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016f8:	2310      	movs	r3, #16
 80016fa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016fc:	2302      	movs	r3, #2
 80016fe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001700:	2300      	movs	r3, #0
 8001702:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001704:	2310      	movs	r3, #16
 8001706:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001708:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800170c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800170e:	2304      	movs	r3, #4
 8001710:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001712:	2304      	movs	r3, #4
 8001714:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001716:	f107 0320 	add.w	r3, r7, #32
 800171a:	4618      	mov	r0, r3
 800171c:	f004 ff7a 	bl	8006614 <HAL_RCC_OscConfig>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001726:	f000 f9f9 	bl	8001b1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800172a:	230f      	movs	r3, #15
 800172c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800172e:	2302      	movs	r3, #2
 8001730:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001732:	2300      	movs	r3, #0
 8001734:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001736:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800173a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800173c:	2300      	movs	r3, #0
 800173e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001740:	f107 030c 	add.w	r3, r7, #12
 8001744:	2102      	movs	r1, #2
 8001746:	4618      	mov	r0, r3
 8001748:	f005 f9dc 	bl	8006b04 <HAL_RCC_ClockConfig>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001752:	f000 f9e3 	bl	8001b1c <Error_Handler>
  }
}
 8001756:	bf00      	nop
 8001758:	3750      	adds	r7, #80	; 0x50
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	40023800 	.word	0x40023800
 8001764:	40007000 	.word	0x40007000

08001768 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800176c:	4b12      	ldr	r3, [pc, #72]	; (80017b8 <MX_I2C1_Init+0x50>)
 800176e:	4a13      	ldr	r2, [pc, #76]	; (80017bc <MX_I2C1_Init+0x54>)
 8001770:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001772:	4b11      	ldr	r3, [pc, #68]	; (80017b8 <MX_I2C1_Init+0x50>)
 8001774:	4a12      	ldr	r2, [pc, #72]	; (80017c0 <MX_I2C1_Init+0x58>)
 8001776:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001778:	4b0f      	ldr	r3, [pc, #60]	; (80017b8 <MX_I2C1_Init+0x50>)
 800177a:	2200      	movs	r2, #0
 800177c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800177e:	4b0e      	ldr	r3, [pc, #56]	; (80017b8 <MX_I2C1_Init+0x50>)
 8001780:	2200      	movs	r2, #0
 8001782:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001784:	4b0c      	ldr	r3, [pc, #48]	; (80017b8 <MX_I2C1_Init+0x50>)
 8001786:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800178a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800178c:	4b0a      	ldr	r3, [pc, #40]	; (80017b8 <MX_I2C1_Init+0x50>)
 800178e:	2200      	movs	r2, #0
 8001790:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001792:	4b09      	ldr	r3, [pc, #36]	; (80017b8 <MX_I2C1_Init+0x50>)
 8001794:	2200      	movs	r2, #0
 8001796:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001798:	4b07      	ldr	r3, [pc, #28]	; (80017b8 <MX_I2C1_Init+0x50>)
 800179a:	2200      	movs	r2, #0
 800179c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800179e:	4b06      	ldr	r3, [pc, #24]	; (80017b8 <MX_I2C1_Init+0x50>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017a4:	4804      	ldr	r0, [pc, #16]	; (80017b8 <MX_I2C1_Init+0x50>)
 80017a6:	f002 fa9b 	bl	8003ce0 <HAL_I2C_Init>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80017b0:	f000 f9b4 	bl	8001b1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80017b4:	bf00      	nop
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	20000220 	.word	0x20000220
 80017bc:	40005400 	.word	0x40005400
 80017c0:	00061a80 	.word	0x00061a80

080017c4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80017c8:	4b18      	ldr	r3, [pc, #96]	; (800182c <MX_SPI2_Init+0x68>)
 80017ca:	4a19      	ldr	r2, [pc, #100]	; (8001830 <MX_SPI2_Init+0x6c>)
 80017cc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80017ce:	4b17      	ldr	r3, [pc, #92]	; (800182c <MX_SPI2_Init+0x68>)
 80017d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80017d4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80017d6:	4b15      	ldr	r3, [pc, #84]	; (800182c <MX_SPI2_Init+0x68>)
 80017d8:	2200      	movs	r2, #0
 80017da:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80017dc:	4b13      	ldr	r3, [pc, #76]	; (800182c <MX_SPI2_Init+0x68>)
 80017de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80017e2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017e4:	4b11      	ldr	r3, [pc, #68]	; (800182c <MX_SPI2_Init+0x68>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017ea:	4b10      	ldr	r3, [pc, #64]	; (800182c <MX_SPI2_Init+0x68>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80017f0:	4b0e      	ldr	r3, [pc, #56]	; (800182c <MX_SPI2_Init+0x68>)
 80017f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017f6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80017f8:	4b0c      	ldr	r3, [pc, #48]	; (800182c <MX_SPI2_Init+0x68>)
 80017fa:	2210      	movs	r2, #16
 80017fc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017fe:	4b0b      	ldr	r3, [pc, #44]	; (800182c <MX_SPI2_Init+0x68>)
 8001800:	2200      	movs	r2, #0
 8001802:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001804:	4b09      	ldr	r3, [pc, #36]	; (800182c <MX_SPI2_Init+0x68>)
 8001806:	2200      	movs	r2, #0
 8001808:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800180a:	4b08      	ldr	r3, [pc, #32]	; (800182c <MX_SPI2_Init+0x68>)
 800180c:	2200      	movs	r2, #0
 800180e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001810:	4b06      	ldr	r3, [pc, #24]	; (800182c <MX_SPI2_Init+0x68>)
 8001812:	220a      	movs	r2, #10
 8001814:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001816:	4805      	ldr	r0, [pc, #20]	; (800182c <MX_SPI2_Init+0x68>)
 8001818:	f005 fb94 	bl	8006f44 <HAL_SPI_Init>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 8001822:	f000 f97b 	bl	8001b1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001826:	bf00      	nop
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	20000274 	.word	0x20000274
 8001830:	40003800 	.word	0x40003800

08001834 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001838:	4b11      	ldr	r3, [pc, #68]	; (8001880 <MX_USART2_UART_Init+0x4c>)
 800183a:	4a12      	ldr	r2, [pc, #72]	; (8001884 <MX_USART2_UART_Init+0x50>)
 800183c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800183e:	4b10      	ldr	r3, [pc, #64]	; (8001880 <MX_USART2_UART_Init+0x4c>)
 8001840:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001844:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001846:	4b0e      	ldr	r3, [pc, #56]	; (8001880 <MX_USART2_UART_Init+0x4c>)
 8001848:	2200      	movs	r2, #0
 800184a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800184c:	4b0c      	ldr	r3, [pc, #48]	; (8001880 <MX_USART2_UART_Init+0x4c>)
 800184e:	2200      	movs	r2, #0
 8001850:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001852:	4b0b      	ldr	r3, [pc, #44]	; (8001880 <MX_USART2_UART_Init+0x4c>)
 8001854:	2200      	movs	r2, #0
 8001856:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001858:	4b09      	ldr	r3, [pc, #36]	; (8001880 <MX_USART2_UART_Init+0x4c>)
 800185a:	220c      	movs	r2, #12
 800185c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800185e:	4b08      	ldr	r3, [pc, #32]	; (8001880 <MX_USART2_UART_Init+0x4c>)
 8001860:	2200      	movs	r2, #0
 8001862:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001864:	4b06      	ldr	r3, [pc, #24]	; (8001880 <MX_USART2_UART_Init+0x4c>)
 8001866:	2200      	movs	r2, #0
 8001868:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800186a:	4805      	ldr	r0, [pc, #20]	; (8001880 <MX_USART2_UART_Init+0x4c>)
 800186c:	f005 fbf3 	bl	8007056 <HAL_UART_Init>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001876:	f000 f951 	bl	8001b1c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800187a:	bf00      	nop
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	200002cc 	.word	0x200002cc
 8001884:	40004400 	.word	0x40004400

08001888 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800188c:	4b11      	ldr	r3, [pc, #68]	; (80018d4 <MX_USART6_UART_Init+0x4c>)
 800188e:	4a12      	ldr	r2, [pc, #72]	; (80018d8 <MX_USART6_UART_Init+0x50>)
 8001890:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001892:	4b10      	ldr	r3, [pc, #64]	; (80018d4 <MX_USART6_UART_Init+0x4c>)
 8001894:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001898:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800189a:	4b0e      	ldr	r3, [pc, #56]	; (80018d4 <MX_USART6_UART_Init+0x4c>)
 800189c:	2200      	movs	r2, #0
 800189e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80018a0:	4b0c      	ldr	r3, [pc, #48]	; (80018d4 <MX_USART6_UART_Init+0x4c>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80018a6:	4b0b      	ldr	r3, [pc, #44]	; (80018d4 <MX_USART6_UART_Init+0x4c>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80018ac:	4b09      	ldr	r3, [pc, #36]	; (80018d4 <MX_USART6_UART_Init+0x4c>)
 80018ae:	220c      	movs	r2, #12
 80018b0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018b2:	4b08      	ldr	r3, [pc, #32]	; (80018d4 <MX_USART6_UART_Init+0x4c>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80018b8:	4b06      	ldr	r3, [pc, #24]	; (80018d4 <MX_USART6_UART_Init+0x4c>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80018be:	4805      	ldr	r0, [pc, #20]	; (80018d4 <MX_USART6_UART_Init+0x4c>)
 80018c0:	f005 fbc9 	bl	8007056 <HAL_UART_Init>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80018ca:	f000 f927 	bl	8001b1c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80018ce:	bf00      	nop
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	20000310 	.word	0x20000310
 80018d8:	40011400 	.word	0x40011400

080018dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80018e2:	2300      	movs	r3, #0
 80018e4:	607b      	str	r3, [r7, #4]
 80018e6:	4b0c      	ldr	r3, [pc, #48]	; (8001918 <MX_DMA_Init+0x3c>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ea:	4a0b      	ldr	r2, [pc, #44]	; (8001918 <MX_DMA_Init+0x3c>)
 80018ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80018f0:	6313      	str	r3, [r2, #48]	; 0x30
 80018f2:	4b09      	ldr	r3, [pc, #36]	; (8001918 <MX_DMA_Init+0x3c>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018fa:	607b      	str	r3, [r7, #4]
 80018fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80018fe:	2200      	movs	r2, #0
 8001900:	2100      	movs	r1, #0
 8001902:	2039      	movs	r0, #57	; 0x39
 8001904:	f001 fbd5 	bl	80030b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001908:	2039      	movs	r0, #57	; 0x39
 800190a:	f001 fbee 	bl	80030ea <HAL_NVIC_EnableIRQ>

}
 800190e:	bf00      	nop
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	40023800 	.word	0x40023800

0800191c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b08a      	sub	sp, #40	; 0x28
 8001920:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001922:	f107 0314 	add.w	r3, r7, #20
 8001926:	2200      	movs	r2, #0
 8001928:	601a      	str	r2, [r3, #0]
 800192a:	605a      	str	r2, [r3, #4]
 800192c:	609a      	str	r2, [r3, #8]
 800192e:	60da      	str	r2, [r3, #12]
 8001930:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001932:	2300      	movs	r3, #0
 8001934:	613b      	str	r3, [r7, #16]
 8001936:	4b48      	ldr	r3, [pc, #288]	; (8001a58 <MX_GPIO_Init+0x13c>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193a:	4a47      	ldr	r2, [pc, #284]	; (8001a58 <MX_GPIO_Init+0x13c>)
 800193c:	f043 0304 	orr.w	r3, r3, #4
 8001940:	6313      	str	r3, [r2, #48]	; 0x30
 8001942:	4b45      	ldr	r3, [pc, #276]	; (8001a58 <MX_GPIO_Init+0x13c>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	f003 0304 	and.w	r3, r3, #4
 800194a:	613b      	str	r3, [r7, #16]
 800194c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800194e:	2300      	movs	r3, #0
 8001950:	60fb      	str	r3, [r7, #12]
 8001952:	4b41      	ldr	r3, [pc, #260]	; (8001a58 <MX_GPIO_Init+0x13c>)
 8001954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001956:	4a40      	ldr	r2, [pc, #256]	; (8001a58 <MX_GPIO_Init+0x13c>)
 8001958:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800195c:	6313      	str	r3, [r2, #48]	; 0x30
 800195e:	4b3e      	ldr	r3, [pc, #248]	; (8001a58 <MX_GPIO_Init+0x13c>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001962:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001966:	60fb      	str	r3, [r7, #12]
 8001968:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800196a:	2300      	movs	r3, #0
 800196c:	60bb      	str	r3, [r7, #8]
 800196e:	4b3a      	ldr	r3, [pc, #232]	; (8001a58 <MX_GPIO_Init+0x13c>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001972:	4a39      	ldr	r2, [pc, #228]	; (8001a58 <MX_GPIO_Init+0x13c>)
 8001974:	f043 0301 	orr.w	r3, r3, #1
 8001978:	6313      	str	r3, [r2, #48]	; 0x30
 800197a:	4b37      	ldr	r3, [pc, #220]	; (8001a58 <MX_GPIO_Init+0x13c>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197e:	f003 0301 	and.w	r3, r3, #1
 8001982:	60bb      	str	r3, [r7, #8]
 8001984:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001986:	2300      	movs	r3, #0
 8001988:	607b      	str	r3, [r7, #4]
 800198a:	4b33      	ldr	r3, [pc, #204]	; (8001a58 <MX_GPIO_Init+0x13c>)
 800198c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198e:	4a32      	ldr	r2, [pc, #200]	; (8001a58 <MX_GPIO_Init+0x13c>)
 8001990:	f043 0302 	orr.w	r3, r3, #2
 8001994:	6313      	str	r3, [r2, #48]	; 0x30
 8001996:	4b30      	ldr	r3, [pc, #192]	; (8001a58 <MX_GPIO_Init+0x13c>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199a:	f003 0302 	and.w	r3, r3, #2
 800199e:	607b      	str	r3, [r7, #4]
 80019a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|ili_DC_Pin, GPIO_PIN_RESET);
 80019a2:	2200      	movs	r2, #0
 80019a4:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80019a8:	482c      	ldr	r0, [pc, #176]	; (8001a5c <MX_GPIO_Init+0x140>)
 80019aa:	f002 f94d 	bl	8003c48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_RES_GPIO_Port, SPI2_RES_Pin, GPIO_PIN_SET);
 80019ae:	2201      	movs	r2, #1
 80019b0:	2180      	movs	r1, #128	; 0x80
 80019b2:	482b      	ldr	r0, [pc, #172]	; (8001a60 <MX_GPIO_Init+0x144>)
 80019b4:	f002 f948 	bl	8003c48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 80019b8:	2201      	movs	r2, #1
 80019ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019be:	4827      	ldr	r0, [pc, #156]	; (8001a5c <MX_GPIO_Init+0x140>)
 80019c0:	f002 f942 	bl	8003c48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ili_RES_GPIO_Port, ili_RES_Pin, GPIO_PIN_RESET);
 80019c4:	2200      	movs	r2, #0
 80019c6:	2120      	movs	r1, #32
 80019c8:	4826      	ldr	r0, [pc, #152]	; (8001a64 <MX_GPIO_Init+0x148>)
 80019ca:	f002 f93d 	bl	8003c48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80019ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80019d4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80019d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019da:	2300      	movs	r3, #0
 80019dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80019de:	f107 0314 	add.w	r3, r7, #20
 80019e2:	4619      	mov	r1, r3
 80019e4:	481e      	ldr	r0, [pc, #120]	; (8001a60 <MX_GPIO_Init+0x144>)
 80019e6:	f001 ffab 	bl	8003940 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin SPI2_CS_Pin ili_DC_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|SPI2_CS_Pin|ili_DC_Pin;
 80019ea:	f44f 63a4 	mov.w	r3, #1312	; 0x520
 80019ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019f0:	2301      	movs	r3, #1
 80019f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f4:	2300      	movs	r3, #0
 80019f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f8:	2300      	movs	r3, #0
 80019fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019fc:	f107 0314 	add.w	r3, r7, #20
 8001a00:	4619      	mov	r1, r3
 8001a02:	4816      	ldr	r0, [pc, #88]	; (8001a5c <MX_GPIO_Init+0x140>)
 8001a04:	f001 ff9c 	bl	8003940 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_RES_Pin */
  GPIO_InitStruct.Pin = SPI2_RES_Pin;
 8001a08:	2380      	movs	r3, #128	; 0x80
 8001a0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a10:	2300      	movs	r3, #0
 8001a12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a14:	2300      	movs	r3, #0
 8001a16:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_RES_GPIO_Port, &GPIO_InitStruct);
 8001a18:	f107 0314 	add.w	r3, r7, #20
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	4810      	ldr	r0, [pc, #64]	; (8001a60 <MX_GPIO_Init+0x144>)
 8001a20:	f001 ff8e 	bl	8003940 <HAL_GPIO_Init>

  /*Configure GPIO pin : ili_RES_Pin */
  GPIO_InitStruct.Pin = ili_RES_Pin;
 8001a24:	2320      	movs	r3, #32
 8001a26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a30:	2300      	movs	r3, #0
 8001a32:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ili_RES_GPIO_Port, &GPIO_InitStruct);
 8001a34:	f107 0314 	add.w	r3, r7, #20
 8001a38:	4619      	mov	r1, r3
 8001a3a:	480a      	ldr	r0, [pc, #40]	; (8001a64 <MX_GPIO_Init+0x148>)
 8001a3c:	f001 ff80 	bl	8003940 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001a40:	2200      	movs	r2, #0
 8001a42:	2100      	movs	r1, #0
 8001a44:	2028      	movs	r0, #40	; 0x28
 8001a46:	f001 fb34 	bl	80030b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001a4a:	2028      	movs	r0, #40	; 0x28
 8001a4c:	f001 fb4d 	bl	80030ea <HAL_NVIC_EnableIRQ>

}
 8001a50:	bf00      	nop
 8001a52:	3728      	adds	r7, #40	; 0x28
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	40023800 	.word	0x40023800
 8001a5c:	40020000 	.word	0x40020000
 8001a60:	40020800 	.word	0x40020800
 8001a64:	40020400 	.word	0x40020400

08001a68 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	4603      	mov	r3, r0
 8001a70:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13){
 8001a72:	88fb      	ldrh	r3, [r7, #6]
 8001a74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a78:	d103      	bne.n	8001a82 <HAL_GPIO_EXTI_Callback+0x1a>
		INA219_BitReset(&hi2c1, INA219_ADDR_1);
 8001a7a:	2180      	movs	r1, #128	; 0x80
 8001a7c:	4803      	ldr	r0, [pc, #12]	; (8001a8c <HAL_GPIO_EXTI_Callback+0x24>)
 8001a7e:	f7ff fab5 	bl	8000fec <INA219_BitReset>
		}
}
 8001a82:	bf00      	nop
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	20000220 	.word	0x20000220

08001a90 <running_box>:

void running_box(){
 8001a90:	b590      	push	{r4, r7, lr}
 8001a92:	b087      	sub	sp, #28
 8001a94:	af02      	add	r7, sp, #8
   //// Running box ------
  int ratte = 1;
 8001a96:	2301      	movs	r3, #1
 8001a98:	60fb      	str	r3, [r7, #12]
  int sizo = 30;
 8001a9a:	231e      	movs	r3, #30
 8001a9c:	60bb      	str	r3, [r7, #8]
  int offs = 180;
 8001a9e:	23b4      	movs	r3, #180	; 0xb4
 8001aa0:	607b      	str	r3, [r7, #4]
  static uint16_t xsh = 0;
  ili9341_FillRect(xsh, offs, ratte ,sizo, cl_MAROON);
 8001aa2:	4b1d      	ldr	r3, [pc, #116]	; (8001b18 <running_box+0x88>)
 8001aa4:	8818      	ldrh	r0, [r3, #0]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	b299      	uxth	r1, r3
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	b29a      	uxth	r2, r3
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	b29b      	uxth	r3, r3
 8001ab2:	f44f 44f0 	mov.w	r4, #30720	; 0x7800
 8001ab6:	9400      	str	r4, [sp, #0]
 8001ab8:	f000 fc3a 	bl	8002330 <ili9341_FillRect>
  xsh += ratte;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	b29a      	uxth	r2, r3
 8001ac0:	4b15      	ldr	r3, [pc, #84]	; (8001b18 <running_box+0x88>)
 8001ac2:	881b      	ldrh	r3, [r3, #0]
 8001ac4:	4413      	add	r3, r2
 8001ac6:	b29a      	uxth	r2, r3
 8001ac8:	4b13      	ldr	r3, [pc, #76]	; (8001b18 <running_box+0x88>)
 8001aca:	801a      	strh	r2, [r3, #0]
  ili9341_FillRect(xsh, offs, sizo, sizo, cl_CYAN); //// box
 8001acc:	4b12      	ldr	r3, [pc, #72]	; (8001b18 <running_box+0x88>)
 8001ace:	8818      	ldrh	r0, [r3, #0]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	b299      	uxth	r1, r3
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	b29a      	uxth	r2, r3
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	f240 74ff 	movw	r4, #2047	; 0x7ff
 8001ae0:	9400      	str	r4, [sp, #0]
 8001ae2:	f000 fc25 	bl	8002330 <ili9341_FillRect>
  if(xsh >= 400){ // clear
 8001ae6:	4b0c      	ldr	r3, [pc, #48]	; (8001b18 <running_box+0x88>)
 8001ae8:	881b      	ldrh	r3, [r3, #0]
 8001aea:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001aee:	d30f      	bcc.n	8001b10 <running_box+0x80>
	  ili9341_FillRect(xsh, offs, sizo, sizo, cl_MAROON);
 8001af0:	4b09      	ldr	r3, [pc, #36]	; (8001b18 <running_box+0x88>)
 8001af2:	8818      	ldrh	r0, [r3, #0]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	b299      	uxth	r1, r3
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	b29a      	uxth	r2, r3
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	f44f 44f0 	mov.w	r4, #30720	; 0x7800
 8001b04:	9400      	str	r4, [sp, #0]
 8001b06:	f000 fc13 	bl	8002330 <ili9341_FillRect>
	  xsh = 0;
 8001b0a:	4b03      	ldr	r3, [pc, #12]	; (8001b18 <running_box+0x88>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	801a      	strh	r2, [r3, #0]
		  }

}
 8001b10:	bf00      	nop
 8001b12:	3714      	adds	r7, #20
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd90      	pop	{r4, r7, pc}
 8001b18:	20000484 	.word	0x20000484

08001b1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b20:	b672      	cpsid	i
}
 8001b22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b24:	e7fe      	b.n	8001b24 <Error_Handler+0x8>
	...

08001b28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b2e:	2300      	movs	r3, #0
 8001b30:	607b      	str	r3, [r7, #4]
 8001b32:	4b10      	ldr	r3, [pc, #64]	; (8001b74 <HAL_MspInit+0x4c>)
 8001b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b36:	4a0f      	ldr	r2, [pc, #60]	; (8001b74 <HAL_MspInit+0x4c>)
 8001b38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b3c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b3e:	4b0d      	ldr	r3, [pc, #52]	; (8001b74 <HAL_MspInit+0x4c>)
 8001b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b46:	607b      	str	r3, [r7, #4]
 8001b48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	603b      	str	r3, [r7, #0]
 8001b4e:	4b09      	ldr	r3, [pc, #36]	; (8001b74 <HAL_MspInit+0x4c>)
 8001b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b52:	4a08      	ldr	r2, [pc, #32]	; (8001b74 <HAL_MspInit+0x4c>)
 8001b54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b58:	6413      	str	r3, [r2, #64]	; 0x40
 8001b5a:	4b06      	ldr	r3, [pc, #24]	; (8001b74 <HAL_MspInit+0x4c>)
 8001b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b62:	603b      	str	r3, [r7, #0]
 8001b64:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001b66:	2007      	movs	r0, #7
 8001b68:	f001 fa98 	bl	800309c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b6c:	bf00      	nop
 8001b6e:	3708      	adds	r7, #8
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	40023800 	.word	0x40023800

08001b78 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b08a      	sub	sp, #40	; 0x28
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b80:	f107 0314 	add.w	r3, r7, #20
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]
 8001b88:	605a      	str	r2, [r3, #4]
 8001b8a:	609a      	str	r2, [r3, #8]
 8001b8c:	60da      	str	r2, [r3, #12]
 8001b8e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a21      	ldr	r2, [pc, #132]	; (8001c1c <HAL_I2C_MspInit+0xa4>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d13c      	bne.n	8001c14 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	613b      	str	r3, [r7, #16]
 8001b9e:	4b20      	ldr	r3, [pc, #128]	; (8001c20 <HAL_I2C_MspInit+0xa8>)
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba2:	4a1f      	ldr	r2, [pc, #124]	; (8001c20 <HAL_I2C_MspInit+0xa8>)
 8001ba4:	f043 0302 	orr.w	r3, r3, #2
 8001ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8001baa:	4b1d      	ldr	r3, [pc, #116]	; (8001c20 <HAL_I2C_MspInit+0xa8>)
 8001bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bae:	f003 0302 	and.w	r3, r3, #2
 8001bb2:	613b      	str	r3, [r7, #16]
 8001bb4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001bb6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001bba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bbc:	2312      	movs	r3, #18
 8001bbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001bc8:	2304      	movs	r3, #4
 8001bca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bcc:	f107 0314 	add.w	r3, r7, #20
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	4814      	ldr	r0, [pc, #80]	; (8001c24 <HAL_I2C_MspInit+0xac>)
 8001bd4:	f001 feb4 	bl	8003940 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bd8:	2300      	movs	r3, #0
 8001bda:	60fb      	str	r3, [r7, #12]
 8001bdc:	4b10      	ldr	r3, [pc, #64]	; (8001c20 <HAL_I2C_MspInit+0xa8>)
 8001bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be0:	4a0f      	ldr	r2, [pc, #60]	; (8001c20 <HAL_I2C_MspInit+0xa8>)
 8001be2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001be6:	6413      	str	r3, [r2, #64]	; 0x40
 8001be8:	4b0d      	ldr	r3, [pc, #52]	; (8001c20 <HAL_I2C_MspInit+0xa8>)
 8001bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bf0:	60fb      	str	r3, [r7, #12]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	2100      	movs	r1, #0
 8001bf8:	201f      	movs	r0, #31
 8001bfa:	f001 fa5a 	bl	80030b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001bfe:	201f      	movs	r0, #31
 8001c00:	f001 fa73 	bl	80030ea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001c04:	2200      	movs	r2, #0
 8001c06:	2100      	movs	r1, #0
 8001c08:	2020      	movs	r0, #32
 8001c0a:	f001 fa52 	bl	80030b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001c0e:	2020      	movs	r0, #32
 8001c10:	f001 fa6b 	bl	80030ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001c14:	bf00      	nop
 8001c16:	3728      	adds	r7, #40	; 0x28
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	40005400 	.word	0x40005400
 8001c20:	40023800 	.word	0x40023800
 8001c24:	40020400 	.word	0x40020400

08001c28 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b08a      	sub	sp, #40	; 0x28
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c30:	f107 0314 	add.w	r3, r7, #20
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	605a      	str	r2, [r3, #4]
 8001c3a:	609a      	str	r2, [r3, #8]
 8001c3c:	60da      	str	r2, [r3, #12]
 8001c3e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a28      	ldr	r2, [pc, #160]	; (8001ce8 <HAL_SPI_MspInit+0xc0>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d14a      	bne.n	8001ce0 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	613b      	str	r3, [r7, #16]
 8001c4e:	4b27      	ldr	r3, [pc, #156]	; (8001cec <HAL_SPI_MspInit+0xc4>)
 8001c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c52:	4a26      	ldr	r2, [pc, #152]	; (8001cec <HAL_SPI_MspInit+0xc4>)
 8001c54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c58:	6413      	str	r3, [r2, #64]	; 0x40
 8001c5a:	4b24      	ldr	r3, [pc, #144]	; (8001cec <HAL_SPI_MspInit+0xc4>)
 8001c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c62:	613b      	str	r3, [r7, #16]
 8001c64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c66:	2300      	movs	r3, #0
 8001c68:	60fb      	str	r3, [r7, #12]
 8001c6a:	4b20      	ldr	r3, [pc, #128]	; (8001cec <HAL_SPI_MspInit+0xc4>)
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6e:	4a1f      	ldr	r2, [pc, #124]	; (8001cec <HAL_SPI_MspInit+0xc4>)
 8001c70:	f043 0304 	orr.w	r3, r3, #4
 8001c74:	6313      	str	r3, [r2, #48]	; 0x30
 8001c76:	4b1d      	ldr	r3, [pc, #116]	; (8001cec <HAL_SPI_MspInit+0xc4>)
 8001c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7a:	f003 0304 	and.w	r3, r3, #4
 8001c7e:	60fb      	str	r3, [r7, #12]
 8001c80:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c82:	2300      	movs	r3, #0
 8001c84:	60bb      	str	r3, [r7, #8]
 8001c86:	4b19      	ldr	r3, [pc, #100]	; (8001cec <HAL_SPI_MspInit+0xc4>)
 8001c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8a:	4a18      	ldr	r2, [pc, #96]	; (8001cec <HAL_SPI_MspInit+0xc4>)
 8001c8c:	f043 0302 	orr.w	r3, r3, #2
 8001c90:	6313      	str	r3, [r2, #48]	; 0x30
 8001c92:	4b16      	ldr	r3, [pc, #88]	; (8001cec <HAL_SPI_MspInit+0xc4>)
 8001c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c96:	f003 0302 	and.w	r3, r3, #2
 8001c9a:	60bb      	str	r3, [r7, #8]
 8001c9c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001c9e:	230c      	movs	r3, #12
 8001ca0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca2:	2302      	movs	r3, #2
 8001ca4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001caa:	2303      	movs	r3, #3
 8001cac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001cae:	2305      	movs	r3, #5
 8001cb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cb2:	f107 0314 	add.w	r3, r7, #20
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	480d      	ldr	r0, [pc, #52]	; (8001cf0 <HAL_SPI_MspInit+0xc8>)
 8001cba:	f001 fe41 	bl	8003940 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001cbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001cd0:	2305      	movs	r3, #5
 8001cd2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cd4:	f107 0314 	add.w	r3, r7, #20
 8001cd8:	4619      	mov	r1, r3
 8001cda:	4806      	ldr	r0, [pc, #24]	; (8001cf4 <HAL_SPI_MspInit+0xcc>)
 8001cdc:	f001 fe30 	bl	8003940 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001ce0:	bf00      	nop
 8001ce2:	3728      	adds	r7, #40	; 0x28
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	40003800 	.word	0x40003800
 8001cec:	40023800 	.word	0x40023800
 8001cf0:	40020800 	.word	0x40020800
 8001cf4:	40020400 	.word	0x40020400

08001cf8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b08c      	sub	sp, #48	; 0x30
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d00:	f107 031c 	add.w	r3, r7, #28
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	605a      	str	r2, [r3, #4]
 8001d0a:	609a      	str	r2, [r3, #8]
 8001d0c:	60da      	str	r2, [r3, #12]
 8001d0e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a4d      	ldr	r2, [pc, #308]	; (8001e4c <HAL_UART_MspInit+0x154>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d12c      	bne.n	8001d74 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	61bb      	str	r3, [r7, #24]
 8001d1e:	4b4c      	ldr	r3, [pc, #304]	; (8001e50 <HAL_UART_MspInit+0x158>)
 8001d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d22:	4a4b      	ldr	r2, [pc, #300]	; (8001e50 <HAL_UART_MspInit+0x158>)
 8001d24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d28:	6413      	str	r3, [r2, #64]	; 0x40
 8001d2a:	4b49      	ldr	r3, [pc, #292]	; (8001e50 <HAL_UART_MspInit+0x158>)
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d32:	61bb      	str	r3, [r7, #24]
 8001d34:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d36:	2300      	movs	r3, #0
 8001d38:	617b      	str	r3, [r7, #20]
 8001d3a:	4b45      	ldr	r3, [pc, #276]	; (8001e50 <HAL_UART_MspInit+0x158>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3e:	4a44      	ldr	r2, [pc, #272]	; (8001e50 <HAL_UART_MspInit+0x158>)
 8001d40:	f043 0301 	orr.w	r3, r3, #1
 8001d44:	6313      	str	r3, [r2, #48]	; 0x30
 8001d46:	4b42      	ldr	r3, [pc, #264]	; (8001e50 <HAL_UART_MspInit+0x158>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4a:	f003 0301 	and.w	r3, r3, #1
 8001d4e:	617b      	str	r3, [r7, #20]
 8001d50:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001d52:	230c      	movs	r3, #12
 8001d54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d56:	2302      	movs	r3, #2
 8001d58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d62:	2307      	movs	r3, #7
 8001d64:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d66:	f107 031c 	add.w	r3, r7, #28
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	4839      	ldr	r0, [pc, #228]	; (8001e54 <HAL_UART_MspInit+0x15c>)
 8001d6e:	f001 fde7 	bl	8003940 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001d72:	e067      	b.n	8001e44 <HAL_UART_MspInit+0x14c>
  else if(huart->Instance==USART6)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a37      	ldr	r2, [pc, #220]	; (8001e58 <HAL_UART_MspInit+0x160>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d162      	bne.n	8001e44 <HAL_UART_MspInit+0x14c>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001d7e:	2300      	movs	r3, #0
 8001d80:	613b      	str	r3, [r7, #16]
 8001d82:	4b33      	ldr	r3, [pc, #204]	; (8001e50 <HAL_UART_MspInit+0x158>)
 8001d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d86:	4a32      	ldr	r2, [pc, #200]	; (8001e50 <HAL_UART_MspInit+0x158>)
 8001d88:	f043 0320 	orr.w	r3, r3, #32
 8001d8c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d8e:	4b30      	ldr	r3, [pc, #192]	; (8001e50 <HAL_UART_MspInit+0x158>)
 8001d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d92:	f003 0320 	and.w	r3, r3, #32
 8001d96:	613b      	str	r3, [r7, #16]
 8001d98:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	60fb      	str	r3, [r7, #12]
 8001d9e:	4b2c      	ldr	r3, [pc, #176]	; (8001e50 <HAL_UART_MspInit+0x158>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da2:	4a2b      	ldr	r2, [pc, #172]	; (8001e50 <HAL_UART_MspInit+0x158>)
 8001da4:	f043 0301 	orr.w	r3, r3, #1
 8001da8:	6313      	str	r3, [r2, #48]	; 0x30
 8001daa:	4b29      	ldr	r3, [pc, #164]	; (8001e50 <HAL_UART_MspInit+0x158>)
 8001dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dae:	f003 0301 	and.w	r3, r3, #1
 8001db2:	60fb      	str	r3, [r7, #12]
 8001db4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001db6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001dba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001dc8:	2308      	movs	r3, #8
 8001dca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dcc:	f107 031c 	add.w	r3, r7, #28
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	4820      	ldr	r0, [pc, #128]	; (8001e54 <HAL_UART_MspInit+0x15c>)
 8001dd4:	f001 fdb4 	bl	8003940 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8001dd8:	4b20      	ldr	r3, [pc, #128]	; (8001e5c <HAL_UART_MspInit+0x164>)
 8001dda:	4a21      	ldr	r2, [pc, #132]	; (8001e60 <HAL_UART_MspInit+0x168>)
 8001ddc:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8001dde:	4b1f      	ldr	r3, [pc, #124]	; (8001e5c <HAL_UART_MspInit+0x164>)
 8001de0:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8001de4:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001de6:	4b1d      	ldr	r3, [pc, #116]	; (8001e5c <HAL_UART_MspInit+0x164>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dec:	4b1b      	ldr	r3, [pc, #108]	; (8001e5c <HAL_UART_MspInit+0x164>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001df2:	4b1a      	ldr	r3, [pc, #104]	; (8001e5c <HAL_UART_MspInit+0x164>)
 8001df4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001df8:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001dfa:	4b18      	ldr	r3, [pc, #96]	; (8001e5c <HAL_UART_MspInit+0x164>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e00:	4b16      	ldr	r3, [pc, #88]	; (8001e5c <HAL_UART_MspInit+0x164>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8001e06:	4b15      	ldr	r3, [pc, #84]	; (8001e5c <HAL_UART_MspInit+0x164>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001e0c:	4b13      	ldr	r3, [pc, #76]	; (8001e5c <HAL_UART_MspInit+0x164>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e12:	4b12      	ldr	r3, [pc, #72]	; (8001e5c <HAL_UART_MspInit+0x164>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8001e18:	4810      	ldr	r0, [pc, #64]	; (8001e5c <HAL_UART_MspInit+0x164>)
 8001e1a:	f001 f981 	bl	8003120 <HAL_DMA_Init>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <HAL_UART_MspInit+0x130>
      Error_Handler();
 8001e24:	f7ff fe7a 	bl	8001b1c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	4a0c      	ldr	r2, [pc, #48]	; (8001e5c <HAL_UART_MspInit+0x164>)
 8001e2c:	639a      	str	r2, [r3, #56]	; 0x38
 8001e2e:	4a0b      	ldr	r2, [pc, #44]	; (8001e5c <HAL_UART_MspInit+0x164>)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001e34:	2200      	movs	r2, #0
 8001e36:	2100      	movs	r1, #0
 8001e38:	2047      	movs	r0, #71	; 0x47
 8001e3a:	f001 f93a 	bl	80030b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001e3e:	2047      	movs	r0, #71	; 0x47
 8001e40:	f001 f953 	bl	80030ea <HAL_NVIC_EnableIRQ>
}
 8001e44:	bf00      	nop
 8001e46:	3730      	adds	r7, #48	; 0x30
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	40004400 	.word	0x40004400
 8001e50:	40023800 	.word	0x40023800
 8001e54:	40020000 	.word	0x40020000
 8001e58:	40011400 	.word	0x40011400
 8001e5c:	20000354 	.word	0x20000354
 8001e60:	40026428 	.word	0x40026428

08001e64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e68:	e7fe      	b.n	8001e68 <NMI_Handler+0x4>

08001e6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e6e:	e7fe      	b.n	8001e6e <HardFault_Handler+0x4>

08001e70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e74:	e7fe      	b.n	8001e74 <MemManage_Handler+0x4>

08001e76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e76:	b480      	push	{r7}
 8001e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e7a:	e7fe      	b.n	8001e7a <BusFault_Handler+0x4>

08001e7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e80:	e7fe      	b.n	8001e80 <UsageFault_Handler+0x4>

08001e82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e82:	b480      	push	{r7}
 8001e84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e86:	bf00      	nop
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e94:	bf00      	nop
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr

08001e9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e9e:	b480      	push	{r7}
 8001ea0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ea2:	bf00      	nop
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr

08001eac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001eb0:	f000 ffe0 	bl	8002e74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001eb4:	bf00      	nop
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001ebc:	4802      	ldr	r0, [pc, #8]	; (8001ec8 <I2C1_EV_IRQHandler+0x10>)
 8001ebe:	f002 fb73 	bl	80045a8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001ec2:	bf00      	nop
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	20000220 	.word	0x20000220

08001ecc <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001ed0:	4802      	ldr	r0, [pc, #8]	; (8001edc <I2C1_ER_IRQHandler+0x10>)
 8001ed2:	f002 fcda 	bl	800488a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001ed6:	bf00      	nop
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	20000220 	.word	0x20000220

08001ee0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001ee4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001ee8:	f001 fee2 	bl	8003cb0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001eec:	bf00      	nop
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8001ef4:	4802      	ldr	r0, [pc, #8]	; (8001f00 <DMA2_Stream1_IRQHandler+0x10>)
 8001ef6:	f001 faab 	bl	8003450 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001efa:	bf00      	nop
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	20000354 	.word	0x20000354

08001f04 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001f08:	4802      	ldr	r0, [pc, #8]	; (8001f14 <USART6_IRQHandler+0x10>)
 8001f0a:	f005 f9b3 	bl	8007274 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001f0e:	bf00      	nop
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	20000310 	.word	0x20000310

08001f18 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
	return 1;
 8001f1c:	2301      	movs	r3, #1
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <_kill>:

int _kill(int pid, int sig)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001f32:	f006 fa9b 	bl	800846c <__errno>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2216      	movs	r2, #22
 8001f3a:	601a      	str	r2, [r3, #0]
	return -1;
 8001f3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3708      	adds	r7, #8
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <_exit>:

void _exit (int status)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001f50:	f04f 31ff 	mov.w	r1, #4294967295
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f7ff ffe7 	bl	8001f28 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001f5a:	e7fe      	b.n	8001f5a <_exit+0x12>

08001f5c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b086      	sub	sp, #24
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	60f8      	str	r0, [r7, #12]
 8001f64:	60b9      	str	r1, [r7, #8]
 8001f66:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f68:	2300      	movs	r3, #0
 8001f6a:	617b      	str	r3, [r7, #20]
 8001f6c:	e00a      	b.n	8001f84 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001f6e:	f3af 8000 	nop.w
 8001f72:	4601      	mov	r1, r0
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	1c5a      	adds	r2, r3, #1
 8001f78:	60ba      	str	r2, [r7, #8]
 8001f7a:	b2ca      	uxtb	r2, r1
 8001f7c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	3301      	adds	r3, #1
 8001f82:	617b      	str	r3, [r7, #20]
 8001f84:	697a      	ldr	r2, [r7, #20]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	dbf0      	blt.n	8001f6e <_read+0x12>
	}

return len;
 8001f8c:	687b      	ldr	r3, [r7, #4]
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3718      	adds	r7, #24
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f96:	b580      	push	{r7, lr}
 8001f98:	b086      	sub	sp, #24
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	60f8      	str	r0, [r7, #12]
 8001f9e:	60b9      	str	r1, [r7, #8]
 8001fa0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	617b      	str	r3, [r7, #20]
 8001fa6:	e009      	b.n	8001fbc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	1c5a      	adds	r2, r3, #1
 8001fac:	60ba      	str	r2, [r7, #8]
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	3301      	adds	r3, #1
 8001fba:	617b      	str	r3, [r7, #20]
 8001fbc:	697a      	ldr	r2, [r7, #20]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	dbf1      	blt.n	8001fa8 <_write+0x12>
	}
	return len;
 8001fc4:	687b      	ldr	r3, [r7, #4]
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3718      	adds	r7, #24
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}

08001fce <_close>:

int _close(int file)
{
 8001fce:	b480      	push	{r7}
 8001fd0:	b083      	sub	sp, #12
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]
	return -1;
 8001fd6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	370c      	adds	r7, #12
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr

08001fe6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001fe6:	b480      	push	{r7}
 8001fe8:	b083      	sub	sp, #12
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
 8001fee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ff6:	605a      	str	r2, [r3, #4]
	return 0;
 8001ff8:	2300      	movs	r3, #0
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	370c      	adds	r7, #12
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr

08002006 <_isatty>:

int _isatty(int file)
{
 8002006:	b480      	push	{r7}
 8002008:	b083      	sub	sp, #12
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]
	return 1;
 800200e:	2301      	movs	r3, #1
}
 8002010:	4618      	mov	r0, r3
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800201c:	b480      	push	{r7}
 800201e:	b085      	sub	sp, #20
 8002020:	af00      	add	r7, sp, #0
 8002022:	60f8      	str	r0, [r7, #12]
 8002024:	60b9      	str	r1, [r7, #8]
 8002026:	607a      	str	r2, [r7, #4]
	return 0;
 8002028:	2300      	movs	r3, #0
}
 800202a:	4618      	mov	r0, r3
 800202c:	3714      	adds	r7, #20
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
	...

08002038 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b086      	sub	sp, #24
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002040:	4a14      	ldr	r2, [pc, #80]	; (8002094 <_sbrk+0x5c>)
 8002042:	4b15      	ldr	r3, [pc, #84]	; (8002098 <_sbrk+0x60>)
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800204c:	4b13      	ldr	r3, [pc, #76]	; (800209c <_sbrk+0x64>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d102      	bne.n	800205a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002054:	4b11      	ldr	r3, [pc, #68]	; (800209c <_sbrk+0x64>)
 8002056:	4a12      	ldr	r2, [pc, #72]	; (80020a0 <_sbrk+0x68>)
 8002058:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800205a:	4b10      	ldr	r3, [pc, #64]	; (800209c <_sbrk+0x64>)
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4413      	add	r3, r2
 8002062:	693a      	ldr	r2, [r7, #16]
 8002064:	429a      	cmp	r2, r3
 8002066:	d207      	bcs.n	8002078 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002068:	f006 fa00 	bl	800846c <__errno>
 800206c:	4603      	mov	r3, r0
 800206e:	220c      	movs	r2, #12
 8002070:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002072:	f04f 33ff 	mov.w	r3, #4294967295
 8002076:	e009      	b.n	800208c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002078:	4b08      	ldr	r3, [pc, #32]	; (800209c <_sbrk+0x64>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800207e:	4b07      	ldr	r3, [pc, #28]	; (800209c <_sbrk+0x64>)
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4413      	add	r3, r2
 8002086:	4a05      	ldr	r2, [pc, #20]	; (800209c <_sbrk+0x64>)
 8002088:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800208a:	68fb      	ldr	r3, [r7, #12]
}
 800208c:	4618      	mov	r0, r3
 800208e:	3718      	adds	r7, #24
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	20020000 	.word	0x20020000
 8002098:	00000400 	.word	0x00000400
 800209c:	20000488 	.word	0x20000488
 80020a0:	200004a8 	.word	0x200004a8

080020a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020a8:	4b06      	ldr	r3, [pc, #24]	; (80020c4 <SystemInit+0x20>)
 80020aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020ae:	4a05      	ldr	r2, [pc, #20]	; (80020c4 <SystemInit+0x20>)
 80020b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020b8:	bf00      	nop
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	e000ed00 	.word	0xe000ed00

080020c8 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
  LCD_IO_Bl_OnOff(1);
 80020cc:	2001      	movs	r0, #1
 80020ce:	f000 fd3e 	bl	8002b4e <LCD_IO_Bl_OnOff>
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_SLPOUT);    // Exit Sleep
 80020d2:	2011      	movs	r0, #17
 80020d4:	f000 fdc2 	bl	8002c5c <LCD_IO_WriteCmd8>
  ILI9341_LCDMUTEX_POP();
}
 80020d8:	bf00      	nop
 80020da:	bd80      	pop	{r7, pc}

080020dc <ili9341_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
  return ILI9341_SIZE_X;
 80020e0:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr

080020ee <ili9341_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 80020ee:	b480      	push	{r7}
 80020f0:	af00      	add	r7, sp, #0
  return ILI9341_SIZE_Y;
 80020f2:	23f0      	movs	r3, #240	; 0xf0
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
	...

08002100 <ili9341_Init>:
/* SPI or paralell mode */
#if ILI9341_INTERFACE_MODE == 1

//-----------------------------------------------------------------------------
void ili9341_Init(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af02      	add	r7, sp, #8
  if((Is_ili9341_Initialized & ILI9341_LCD_INITIALIZED) == 0)
 8002106:	4b52      	ldr	r3, [pc, #328]	; (8002250 <ili9341_Init+0x150>)
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	f003 0301 	and.w	r3, r3, #1
 800210e:	2b00      	cmp	r3, #0
 8002110:	d115      	bne.n	800213e <ili9341_Init+0x3e>
  {
    Is_ili9341_Initialized |= ILI9341_LCD_INITIALIZED;
 8002112:	4b4f      	ldr	r3, [pc, #316]	; (8002250 <ili9341_Init+0x150>)
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	f043 0301 	orr.w	r3, r3, #1
 800211a:	b2da      	uxtb	r2, r3
 800211c:	4b4c      	ldr	r3, [pc, #304]	; (8002250 <ili9341_Init+0x150>)
 800211e:	701a      	strb	r2, [r3, #0]
    if((Is_ili9341_Initialized & ILI9341_IO_INITIALIZED) == 0)
 8002120:	4b4b      	ldr	r3, [pc, #300]	; (8002250 <ili9341_Init+0x150>)
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	f003 0302 	and.w	r3, r3, #2
 8002128:	2b00      	cmp	r3, #0
 800212a:	d101      	bne.n	8002130 <ili9341_Init+0x30>
      LCD_IO_Init();
 800212c:	f000 fd1a 	bl	8002b64 <LCD_IO_Init>
    Is_ili9341_Initialized |= ILI9341_IO_INITIALIZED;
 8002130:	4b47      	ldr	r3, [pc, #284]	; (8002250 <ili9341_Init+0x150>)
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	f043 0302 	orr.w	r3, r3, #2
 8002138:	b2da      	uxtb	r2, r3
 800213a:	4b45      	ldr	r3, [pc, #276]	; (8002250 <ili9341_Init+0x150>)
 800213c:	701a      	strb	r2, [r3, #0]
  }

  LCD_Delay(10);
 800213e:	200a      	movs	r0, #10
 8002140:	f000 fcfa 	bl	8002b38 <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9341_SWRESET);
 8002144:	2001      	movs	r0, #1
 8002146:	f000 fd89 	bl	8002c5c <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 800214a:	200a      	movs	r0, #10
 800214c:	f000 fcf4 	bl	8002b38 <LCD_Delay>

  LCD_IO_WriteCmd8MultipleData8(0xEF, (uint8_t *)"\x03\x80\x02", 3);
 8002150:	2203      	movs	r2, #3
 8002152:	4940      	ldr	r1, [pc, #256]	; (8002254 <ili9341_Init+0x154>)
 8002154:	20ef      	movs	r0, #239	; 0xef
 8002156:	f000 fdef 	bl	8002d38 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xCF, (uint8_t *)"\x00\xC1\x30", 3);
 800215a:	2203      	movs	r2, #3
 800215c:	493e      	ldr	r1, [pc, #248]	; (8002258 <ili9341_Init+0x158>)
 800215e:	20cf      	movs	r0, #207	; 0xcf
 8002160:	f000 fdea 	bl	8002d38 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xED, (uint8_t *)"\x64\x03\x12\x81", 4);
 8002164:	2204      	movs	r2, #4
 8002166:	493d      	ldr	r1, [pc, #244]	; (800225c <ili9341_Init+0x15c>)
 8002168:	20ed      	movs	r0, #237	; 0xed
 800216a:	f000 fde5 	bl	8002d38 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xE8, (uint8_t *)"\x85\x00\x78", 3);
 800216e:	2203      	movs	r2, #3
 8002170:	493b      	ldr	r1, [pc, #236]	; (8002260 <ili9341_Init+0x160>)
 8002172:	20e8      	movs	r0, #232	; 0xe8
 8002174:	f000 fde0 	bl	8002d38 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xCB, (uint8_t *)"\x39\x2C\x00\x34\x02", 5);
 8002178:	2205      	movs	r2, #5
 800217a:	493a      	ldr	r1, [pc, #232]	; (8002264 <ili9341_Init+0x164>)
 800217c:	20cb      	movs	r0, #203	; 0xcb
 800217e:	f000 fddb 	bl	8002d38 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xF7, (uint8_t *)"\x20", 1);
 8002182:	2201      	movs	r2, #1
 8002184:	4938      	ldr	r1, [pc, #224]	; (8002268 <ili9341_Init+0x168>)
 8002186:	20f7      	movs	r0, #247	; 0xf7
 8002188:	f000 fdd6 	bl	8002d38 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xEA, (uint8_t *)"\x00\x00", 2);
 800218c:	2202      	movs	r2, #2
 800218e:	4937      	ldr	r1, [pc, #220]	; (800226c <ili9341_Init+0x16c>)
 8002190:	20ea      	movs	r0, #234	; 0xea
 8002192:	f000 fdd1 	bl	8002d38 <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 1 (Vreg1out, Verg2out)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PWCTR1, (uint8_t *)"\x23", 1);
 8002196:	2201      	movs	r2, #1
 8002198:	4935      	ldr	r1, [pc, #212]	; (8002270 <ili9341_Init+0x170>)
 800219a:	20c0      	movs	r0, #192	; 0xc0
 800219c:	f000 fdcc 	bl	8002d38 <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 2 (VGH,VGL)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PWCTR2, (uint8_t *)"\x10", 1);
 80021a0:	2201      	movs	r2, #1
 80021a2:	4934      	ldr	r1, [pc, #208]	; (8002274 <ili9341_Init+0x174>)
 80021a4:	20c1      	movs	r0, #193	; 0xc1
 80021a6:	f000 fdc7 	bl	8002d38 <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 3 (Vcom)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_VMCTR1, (uint8_t *)"\x3E\x28", 2);
 80021aa:	2202      	movs	r2, #2
 80021ac:	4932      	ldr	r1, [pc, #200]	; (8002278 <ili9341_Init+0x178>)
 80021ae:	20c5      	movs	r0, #197	; 0xc5
 80021b0:	f000 fdc2 	bl	8002d38 <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 3 (Vcom)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_VMCTR2, (uint8_t *)"\x86", 1);
 80021b4:	2201      	movs	r2, #1
 80021b6:	4931      	ldr	r1, [pc, #196]	; (800227c <ili9341_Init+0x17c>)
 80021b8:	20c7      	movs	r0, #199	; 0xc7
 80021ba:	f000 fdbd 	bl	8002d38 <LCD_IO_WriteCmd8MultipleData8>

  // Vertical scroll zero
  LCD_IO_WriteCmd8MultipleData8(ILI9341_VSCRSADD, (uint8_t *)"\x00", 1);
 80021be:	2201      	movs	r2, #1
 80021c0:	492f      	ldr	r1, [pc, #188]	; (8002280 <ili9341_Init+0x180>)
 80021c2:	2037      	movs	r0, #55	; 0x37
 80021c4:	f000 fdb8 	bl	8002d38 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PIXFMT, (uint8_t *)"\x55", 1);
 80021c8:	2201      	movs	r2, #1
 80021ca:	492e      	ldr	r1, [pc, #184]	; (8002284 <ili9341_Init+0x184>)
 80021cc:	203a      	movs	r0, #58	; 0x3a
 80021ce:	f000 fdb3 	bl	8002d38 <LCD_IO_WriteCmd8MultipleData8>

  // LCD_IO_WriteCmd8MultipleData8(0xF6, (uint8_t *)"\x01\x00\x06", 3);

  LCD_IO_WriteCmd8MultipleData8(ILI9341_FRMCTR1, (uint8_t *)"\x00\x18", 2);
 80021d2:	2202      	movs	r2, #2
 80021d4:	492c      	ldr	r1, [pc, #176]	; (8002288 <ili9341_Init+0x188>)
 80021d6:	20b1      	movs	r0, #177	; 0xb1
 80021d8:	f000 fdae 	bl	8002d38 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_DFUNCTR, (uint8_t *)"\x08\x82\x27", 3);  // Display Function Control
 80021dc:	2203      	movs	r2, #3
 80021de:	492b      	ldr	r1, [pc, #172]	; (800228c <ili9341_Init+0x18c>)
 80021e0:	20b6      	movs	r0, #182	; 0xb6
 80021e2:	f000 fda9 	bl	8002d38 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xF2, (uint8_t *)"\x00", 1);            // 3Gamma Function Disable
 80021e6:	2201      	movs	r2, #1
 80021e8:	4925      	ldr	r1, [pc, #148]	; (8002280 <ili9341_Init+0x180>)
 80021ea:	20f2      	movs	r0, #242	; 0xf2
 80021ec:	f000 fda4 	bl	8002d38 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_GAMMASET, (uint8_t *)"\x01", 1);// Gamma curve selected
 80021f0:	2201      	movs	r2, #1
 80021f2:	4927      	ldr	r1, [pc, #156]	; (8002290 <ili9341_Init+0x190>)
 80021f4:	2026      	movs	r0, #38	; 0x26
 80021f6:	f000 fd9f 	bl	8002d38 <LCD_IO_WriteCmd8MultipleData8>

  // positive gamma control
  LCD_IO_WriteCmd8MultipleData8(ILI9341_GMCTRP1, (uint8_t *)"\x0F\x31\x2B\x0C\x0E\x08\x4E\xF1\x37\x07\x10\x03\x0E\x09\x00", 15);
 80021fa:	220f      	movs	r2, #15
 80021fc:	4925      	ldr	r1, [pc, #148]	; (8002294 <ili9341_Init+0x194>)
 80021fe:	20e0      	movs	r0, #224	; 0xe0
 8002200:	f000 fd9a 	bl	8002d38 <LCD_IO_WriteCmd8MultipleData8>

  // negative gamma control
  LCD_IO_WriteCmd8MultipleData8(ILI9341_GMCTRN1, (uint8_t *)"\x00\x0E\x14\x03\x11\x07\x31\xC1\x48\x08\x0F\x0C\x31\x36\x0F", 15);
 8002204:	220f      	movs	r2, #15
 8002206:	4924      	ldr	r1, [pc, #144]	; (8002298 <ili9341_Init+0x198>)
 8002208:	20e1      	movs	r0, #225	; 0xe1
 800220a:	f000 fd95 	bl	8002d38 <LCD_IO_WriteCmd8MultipleData8>

  LCD_IO_WriteCmd8(ILI9341_MADCTL); LCD_IO_WriteData8(ILI9341_MAD_DATA_RIGHT_THEN_DOWN);
 800220e:	2036      	movs	r0, #54	; 0x36
 8002210:	f000 fd24 	bl	8002c5c <LCD_IO_WriteCmd8>
 8002214:	20e8      	movs	r0, #232	; 0xe8
 8002216:	f000 fd3f 	bl	8002c98 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_SLPOUT);    // Exit Sleep
 800221a:	2011      	movs	r0, #17
 800221c:	f000 fd1e 	bl	8002c5c <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 8002220:	200a      	movs	r0, #10
 8002222:	f000 fc89 	bl	8002b38 <LCD_Delay>

  #if ILI9341_INITCLEAR == 1
  ili9341_FillRect(0, 0, ILI9341_SIZE_X, ILI9341_SIZE_Y, 0x0000);
 8002226:	2300      	movs	r3, #0
 8002228:	9300      	str	r3, [sp, #0]
 800222a:	23f0      	movs	r3, #240	; 0xf0
 800222c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002230:	2100      	movs	r1, #0
 8002232:	2000      	movs	r0, #0
 8002234:	f000 f87c 	bl	8002330 <ili9341_FillRect>
  LCD_Delay(10);
 8002238:	200a      	movs	r0, #10
 800223a:	f000 fc7d 	bl	8002b38 <LCD_Delay>
  #endif
  
  LCD_IO_WriteCmd8(ILI9341_DISPON);    // Display on
 800223e:	2029      	movs	r0, #41	; 0x29
 8002240:	f000 fd0c 	bl	8002c5c <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 8002244:	200a      	movs	r0, #10
 8002246:	f000 fc77 	bl	8002b38 <LCD_Delay>
}
 800224a:	bf00      	nop
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	2000048c 	.word	0x2000048c
 8002254:	0800b414 	.word	0x0800b414
 8002258:	0800b418 	.word	0x0800b418
 800225c:	0800b41c 	.word	0x0800b41c
 8002260:	0800b424 	.word	0x0800b424
 8002264:	0800b428 	.word	0x0800b428
 8002268:	0800b430 	.word	0x0800b430
 800226c:	0800b434 	.word	0x0800b434
 8002270:	0800b438 	.word	0x0800b438
 8002274:	0800b43c 	.word	0x0800b43c
 8002278:	0800b440 	.word	0x0800b440
 800227c:	0800b444 	.word	0x0800b444
 8002280:	0800b448 	.word	0x0800b448
 8002284:	0800b44c 	.word	0x0800b44c
 8002288:	0800b450 	.word	0x0800b450
 800228c:	0800b454 	.word	0x0800b454
 8002290:	0800b458 	.word	0x0800b458
 8002294:	0800b45c 	.word	0x0800b45c
 8002298:	0800b46c 	.word	0x0800b46c

0800229c <ili9341_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color
  * @retval None
  */
void ili9341_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	4603      	mov	r3, r0
 80022a4:	80fb      	strh	r3, [r7, #6]
 80022a6:	460b      	mov	r3, r1
 80022a8:	80bb      	strh	r3, [r7, #4]
 80022aa:	4613      	mov	r3, r2
 80022ac:	807b      	strh	r3, [r7, #2]
  ILI9341_LCDMUTEX_PUSH();
  ILI9341_SETCURSOR(Xpos, Ypos);
 80022ae:	202a      	movs	r0, #42	; 0x2a
 80022b0:	f000 fcd4 	bl	8002c5c <LCD_IO_WriteCmd8>
 80022b4:	88fb      	ldrh	r3, [r7, #6]
 80022b6:	0a1b      	lsrs	r3, r3, #8
 80022b8:	b29b      	uxth	r3, r3
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	4618      	mov	r0, r3
 80022be:	f000 fceb 	bl	8002c98 <LCD_IO_WriteData8>
 80022c2:	88fb      	ldrh	r3, [r7, #6]
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	4618      	mov	r0, r3
 80022c8:	f000 fce6 	bl	8002c98 <LCD_IO_WriteData8>
 80022cc:	88fb      	ldrh	r3, [r7, #6]
 80022ce:	0a1b      	lsrs	r3, r3, #8
 80022d0:	b29b      	uxth	r3, r3
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	4618      	mov	r0, r3
 80022d6:	f000 fcdf 	bl	8002c98 <LCD_IO_WriteData8>
 80022da:	88fb      	ldrh	r3, [r7, #6]
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	4618      	mov	r0, r3
 80022e0:	f000 fcda 	bl	8002c98 <LCD_IO_WriteData8>
 80022e4:	202b      	movs	r0, #43	; 0x2b
 80022e6:	f000 fcb9 	bl	8002c5c <LCD_IO_WriteCmd8>
 80022ea:	88bb      	ldrh	r3, [r7, #4]
 80022ec:	0a1b      	lsrs	r3, r3, #8
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	4618      	mov	r0, r3
 80022f4:	f000 fcd0 	bl	8002c98 <LCD_IO_WriteData8>
 80022f8:	88bb      	ldrh	r3, [r7, #4]
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	4618      	mov	r0, r3
 80022fe:	f000 fccb 	bl	8002c98 <LCD_IO_WriteData8>
 8002302:	88bb      	ldrh	r3, [r7, #4]
 8002304:	0a1b      	lsrs	r3, r3, #8
 8002306:	b29b      	uxth	r3, r3
 8002308:	b2db      	uxtb	r3, r3
 800230a:	4618      	mov	r0, r3
 800230c:	f000 fcc4 	bl	8002c98 <LCD_IO_WriteData8>
 8002310:	88bb      	ldrh	r3, [r7, #4]
 8002312:	b2db      	uxtb	r3, r3
 8002314:	4618      	mov	r0, r3
 8002316:	f000 fcbf 	bl	8002c98 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_RAMWR); LCD_IO_WriteData16(RGBCode);
 800231a:	202c      	movs	r0, #44	; 0x2c
 800231c:	f000 fc9e 	bl	8002c5c <LCD_IO_WriteCmd8>
 8002320:	887b      	ldrh	r3, [r7, #2]
 8002322:	4618      	mov	r0, r3
 8002324:	f000 fcce 	bl	8002cc4 <LCD_IO_WriteData16>
  ILI9341_LCDMUTEX_POP();
}
 8002328:	bf00      	nop
 800232a:	3708      	adds	r7, #8
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}

08002330 <ili9341_FillRect>:
  * @param  Ysize:    specifies the Y size
  * @param  RGBCode:  specifies the RGB color
  * @retval None
  */
void ili9341_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t RGBCode)
{
 8002330:	b590      	push	{r4, r7, lr}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	4604      	mov	r4, r0
 8002338:	4608      	mov	r0, r1
 800233a:	4611      	mov	r1, r2
 800233c:	461a      	mov	r2, r3
 800233e:	4623      	mov	r3, r4
 8002340:	80fb      	strh	r3, [r7, #6]
 8002342:	4603      	mov	r3, r0
 8002344:	80bb      	strh	r3, [r7, #4]
 8002346:	460b      	mov	r3, r1
 8002348:	807b      	strh	r3, [r7, #2]
 800234a:	4613      	mov	r3, r2
 800234c:	803b      	strh	r3, [r7, #0]
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Xsize - 1);
 800234e:	202a      	movs	r0, #42	; 0x2a
 8002350:	f000 fc84 	bl	8002c5c <LCD_IO_WriteCmd8>
 8002354:	88fb      	ldrh	r3, [r7, #6]
 8002356:	0a1b      	lsrs	r3, r3, #8
 8002358:	b29b      	uxth	r3, r3
 800235a:	b2db      	uxtb	r3, r3
 800235c:	4618      	mov	r0, r3
 800235e:	f000 fc9b 	bl	8002c98 <LCD_IO_WriteData8>
 8002362:	88fb      	ldrh	r3, [r7, #6]
 8002364:	b2db      	uxtb	r3, r3
 8002366:	4618      	mov	r0, r3
 8002368:	f000 fc96 	bl	8002c98 <LCD_IO_WriteData8>
 800236c:	88fa      	ldrh	r2, [r7, #6]
 800236e:	887b      	ldrh	r3, [r7, #2]
 8002370:	4413      	add	r3, r2
 8002372:	3b01      	subs	r3, #1
 8002374:	121b      	asrs	r3, r3, #8
 8002376:	b2db      	uxtb	r3, r3
 8002378:	4618      	mov	r0, r3
 800237a:	f000 fc8d 	bl	8002c98 <LCD_IO_WriteData8>
 800237e:	88fb      	ldrh	r3, [r7, #6]
 8002380:	b2da      	uxtb	r2, r3
 8002382:	887b      	ldrh	r3, [r7, #2]
 8002384:	b2db      	uxtb	r3, r3
 8002386:	4413      	add	r3, r2
 8002388:	b2db      	uxtb	r3, r3
 800238a:	3b01      	subs	r3, #1
 800238c:	b2db      	uxtb	r3, r3
 800238e:	4618      	mov	r0, r3
 8002390:	f000 fc82 	bl	8002c98 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Ysize - 1);
 8002394:	202b      	movs	r0, #43	; 0x2b
 8002396:	f000 fc61 	bl	8002c5c <LCD_IO_WriteCmd8>
 800239a:	88bb      	ldrh	r3, [r7, #4]
 800239c:	0a1b      	lsrs	r3, r3, #8
 800239e:	b29b      	uxth	r3, r3
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	4618      	mov	r0, r3
 80023a4:	f000 fc78 	bl	8002c98 <LCD_IO_WriteData8>
 80023a8:	88bb      	ldrh	r3, [r7, #4]
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	4618      	mov	r0, r3
 80023ae:	f000 fc73 	bl	8002c98 <LCD_IO_WriteData8>
 80023b2:	88ba      	ldrh	r2, [r7, #4]
 80023b4:	883b      	ldrh	r3, [r7, #0]
 80023b6:	4413      	add	r3, r2
 80023b8:	3b01      	subs	r3, #1
 80023ba:	121b      	asrs	r3, r3, #8
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	4618      	mov	r0, r3
 80023c0:	f000 fc6a 	bl	8002c98 <LCD_IO_WriteData8>
 80023c4:	88bb      	ldrh	r3, [r7, #4]
 80023c6:	b2da      	uxtb	r2, r3
 80023c8:	883b      	ldrh	r3, [r7, #0]
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	4413      	add	r3, r2
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	3b01      	subs	r3, #1
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	4618      	mov	r0, r3
 80023d6:	f000 fc5f 	bl	8002c98 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8DataFill16(ILI9341_RAMWR, RGBCode, Xsize * Ysize);
 80023da:	887b      	ldrh	r3, [r7, #2]
 80023dc:	883a      	ldrh	r2, [r7, #0]
 80023de:	fb02 f303 	mul.w	r3, r2, r3
 80023e2:	461a      	mov	r2, r3
 80023e4:	8b3b      	ldrh	r3, [r7, #24]
 80023e6:	4619      	mov	r1, r3
 80023e8:	202c      	movs	r0, #44	; 0x2c
 80023ea:	f000 fc81 	bl	8002cf0 <LCD_IO_WriteCmd8DataFill16>
  ILI9341_LCDMUTEX_POP();
}
 80023ee:	bf00      	nop
 80023f0:	370c      	adds	r7, #12
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd90      	pop	{r4, r7, pc}

080023f6 <ili9341_WriteChar>:
  * @param  fonto: font select (from font.h)
  * @param  RGB_Coder: Text Color
  * @param  RGB_bg: Char background Color
  * @retval None
  */
void ili9341_WriteChar(uint16_t Xpo, uint16_t Ypo, const char *chr,sFONT fonto, uint16_t RGB_Coder, uint16_t RGB_bg){
 80023f6:	b082      	sub	sp, #8
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b08a      	sub	sp, #40	; 0x28
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	603a      	str	r2, [r7, #0]
 8002400:	637b      	str	r3, [r7, #52]	; 0x34
 8002402:	4603      	mov	r3, r0
 8002404:	80fb      	strh	r3, [r7, #6]
 8002406:	460b      	mov	r3, r1
 8002408:	80bb      	strh	r3, [r7, #4]
	/*ex
	 * ili9341_WriteChar(140, 50, "E", Font24, cl_ORANGE, cl_BLACK);
	 * */
	//// stored font data
	uint32_t hop32 = 0;
 800240a:	2300      	movs	r3, #0
 800240c:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t b8[4] = {0};
 800240e:	2300      	movs	r3, #0
 8002410:	60fb      	str	r3, [r7, #12]
	 * c = i * rowbox -> jump to next column in next i rowloop
	 * k => jump to next row in that column
	 * */

	//// find num of bit rows per jump in fonts.c
	int rowbox = ceilf((float)(fonto.Width) / 8);
 8002412:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002414:	ee07 3a90 	vmov	s15, r3
 8002418:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800241c:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8002420:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002424:	eeb0 0a47 	vmov.f32	s0, s14
 8002428:	f008 ff68 	bl	800b2fc <ceilf>
 800242c:	eef0 7a40 	vmov.f32	s15, s0
 8002430:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002434:	ee17 3a90 	vmov	r3, s15
 8002438:	617b      	str	r3, [r7, #20]

	//// choose MSB check pos for each font size
	//// 0x80 , 0x8000 , 0x 800000
	uint32_t clif_msb = 0x80 << (8 * (rowbox - 1));
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	3b01      	subs	r3, #1
 800243e:	00db      	lsls	r3, r3, #3
 8002440:	2280      	movs	r2, #128	; 0x80
 8002442:	fa02 f303 	lsl.w	r3, r2, r3
 8002446:	613b      	str	r3, [r7, #16]

	//// -32 to offset sync ASCII Table start " " at 32
	//// double for loop as one char table
	for(int i = 0; i < fonto.Height; i++){
 8002448:	2300      	movs	r3, #0
 800244a:	623b      	str	r3, [r7, #32]
 800244c:	e060      	b.n	8002510 <ili9341_WriteChar+0x11a>
		hop32 = 0;
 800244e:	2300      	movs	r3, #0
 8002450:	627b      	str	r3, [r7, #36]	; 0x24
		for(int k = 0;k < rowbox;k++){
 8002452:	2300      	movs	r3, #0
 8002454:	61fb      	str	r3, [r7, #28]
 8002456:	e024      	b.n	80024a2 <ili9341_WriteChar+0xac>
			b8[k] = fonto.table[((int)(*chr - 32) * fonto.Height * rowbox) + (i * rowbox) + k];
 8002458:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800245a:	683a      	ldr	r2, [r7, #0]
 800245c:	7812      	ldrb	r2, [r2, #0]
 800245e:	3a20      	subs	r2, #32
 8002460:	8f79      	ldrh	r1, [r7, #58]	; 0x3a
 8002462:	fb01 f202 	mul.w	r2, r1, r2
 8002466:	6979      	ldr	r1, [r7, #20]
 8002468:	fb02 f101 	mul.w	r1, r2, r1
 800246c:	6a3a      	ldr	r2, [r7, #32]
 800246e:	6978      	ldr	r0, [r7, #20]
 8002470:	fb00 f202 	mul.w	r2, r0, r2
 8002474:	4411      	add	r1, r2
 8002476:	69fa      	ldr	r2, [r7, #28]
 8002478:	440a      	add	r2, r1
 800247a:	4413      	add	r3, r2
 800247c:	7819      	ldrb	r1, [r3, #0]
 800247e:	f107 020c 	add.w	r2, r7, #12
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	4413      	add	r3, r2
 8002486:	460a      	mov	r2, r1
 8002488:	701a      	strb	r2, [r3, #0]
			hop32 = (hop32 << 8) + b8[k];
 800248a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248c:	021b      	lsls	r3, r3, #8
 800248e:	f107 010c 	add.w	r1, r7, #12
 8002492:	69fa      	ldr	r2, [r7, #28]
 8002494:	440a      	add	r2, r1
 8002496:	7812      	ldrb	r2, [r2, #0]
 8002498:	4413      	add	r3, r2
 800249a:	627b      	str	r3, [r7, #36]	; 0x24
		for(int k = 0;k < rowbox;k++){
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	3301      	adds	r3, #1
 80024a0:	61fb      	str	r3, [r7, #28]
 80024a2:	69fa      	ldr	r2, [r7, #28]
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	429a      	cmp	r2, r3
 80024a8:	dbd6      	blt.n	8002458 <ili9341_WriteChar+0x62>
		}

		for(int j = 0; j < fonto.Width; j++){
 80024aa:	2300      	movs	r3, #0
 80024ac:	61bb      	str	r3, [r7, #24]
 80024ae:	e027      	b.n	8002500 <ili9341_WriteChar+0x10a>
			//// if valuein fonttable is 1
			if((hop32 << j) & clif_msb){ // buu32.b32
 80024b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024b2:	69bb      	ldr	r3, [r7, #24]
 80024b4:	409a      	lsls	r2, r3
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	4013      	ands	r3, r2
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d00e      	beq.n	80024dc <ili9341_WriteChar+0xe6>
				ili9341_WritePixel(Xpo + j, Ypo + i, RGB_Coder);
 80024be:	69bb      	ldr	r3, [r7, #24]
 80024c0:	b29a      	uxth	r2, r3
 80024c2:	88fb      	ldrh	r3, [r7, #6]
 80024c4:	4413      	add	r3, r2
 80024c6:	b298      	uxth	r0, r3
 80024c8:	6a3b      	ldr	r3, [r7, #32]
 80024ca:	b29a      	uxth	r2, r3
 80024cc:	88bb      	ldrh	r3, [r7, #4]
 80024ce:	4413      	add	r3, r2
 80024d0:	b29b      	uxth	r3, r3
 80024d2:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 80024d4:	4619      	mov	r1, r3
 80024d6:	f7ff fee1 	bl	800229c <ili9341_WritePixel>
 80024da:	e00e      	b.n	80024fa <ili9341_WriteChar+0x104>
			}
			//// for background write
			else{
				ili9341_WritePixel(Xpo + j, Ypo + i, RGB_bg);
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	b29a      	uxth	r2, r3
 80024e0:	88fb      	ldrh	r3, [r7, #6]
 80024e2:	4413      	add	r3, r2
 80024e4:	b298      	uxth	r0, r3
 80024e6:	6a3b      	ldr	r3, [r7, #32]
 80024e8:	b29a      	uxth	r2, r3
 80024ea:	88bb      	ldrh	r3, [r7, #4]
 80024ec:	4413      	add	r3, r2
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80024f4:	4619      	mov	r1, r3
 80024f6:	f7ff fed1 	bl	800229c <ili9341_WritePixel>
		for(int j = 0; j < fonto.Width; j++){
 80024fa:	69bb      	ldr	r3, [r7, #24]
 80024fc:	3301      	adds	r3, #1
 80024fe:	61bb      	str	r3, [r7, #24]
 8002500:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002502:	461a      	mov	r2, r3
 8002504:	69bb      	ldr	r3, [r7, #24]
 8002506:	4293      	cmp	r3, r2
 8002508:	dbd2      	blt.n	80024b0 <ili9341_WriteChar+0xba>
	for(int i = 0; i < fonto.Height; i++){
 800250a:	6a3b      	ldr	r3, [r7, #32]
 800250c:	3301      	adds	r3, #1
 800250e:	623b      	str	r3, [r7, #32]
 8002510:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8002512:	461a      	mov	r2, r3
 8002514:	6a3b      	ldr	r3, [r7, #32]
 8002516:	4293      	cmp	r3, r2
 8002518:	db99      	blt.n	800244e <ili9341_WriteChar+0x58>
			}

		}
	}
}
 800251a:	bf00      	nop
 800251c:	bf00      	nop
 800251e:	3728      	adds	r7, #40	; 0x28
 8002520:	46bd      	mov	sp, r7
 8002522:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002526:	b002      	add	sp, #8
 8002528:	4770      	bx	lr

0800252a <ili9341_WriteString>:
  * @param  fonto: font select (from font.h)
  * @param  RGB_Coder: Text Color
  * @param  RGB_bg: Text background Color
  * @retval None
  */
void ili9341_WriteString(uint16_t Xpo, uint16_t Ypo,const char* strr,sFONT fonto, uint16_t RGB_Coder, uint16_t RGB_bg){
 800252a:	b082      	sub	sp, #8
 800252c:	b580      	push	{r7, lr}
 800252e:	b088      	sub	sp, #32
 8002530:	af04      	add	r7, sp, #16
 8002532:	603a      	str	r2, [r7, #0]
 8002534:	61fb      	str	r3, [r7, #28]
 8002536:	4603      	mov	r3, r0
 8002538:	80fb      	strh	r3, [r7, #6]
 800253a:	460b      	mov	r3, r1
 800253c:	80bb      	strh	r3, [r7, #4]
	/*ex
	 * ili9341_WriteString(20, 300, "Helios xTerra", Font20, cl_WHITE, cl_BLACK);
	 * */
	uint16_t ili_heigh = ili9341_GetLcdPixelHeight();
 800253e:	f7ff fdd6 	bl	80020ee <ili9341_GetLcdPixelHeight>
 8002542:	4603      	mov	r3, r0
 8002544:	81fb      	strh	r3, [r7, #14]
	uint16_t ili_width = ili9341_GetLcdPixelWidth();
 8002546:	f7ff fdc9 	bl	80020dc <ili9341_GetLcdPixelWidth>
 800254a:	4603      	mov	r3, r0
 800254c:	81bb      	strh	r3, [r7, #12]
	while(*strr){
 800254e:	e02c      	b.n	80025aa <ili9341_WriteString+0x80>
	//// Check screen overflow / new line
		if(Xpo + fonto.Width >= ili_width){
 8002550:	88fb      	ldrh	r3, [r7, #6]
 8002552:	8c3a      	ldrh	r2, [r7, #32]
 8002554:	441a      	add	r2, r3
 8002556:	89bb      	ldrh	r3, [r7, #12]
 8002558:	429a      	cmp	r2, r3
 800255a:	db13      	blt.n	8002584 <ili9341_WriteString+0x5a>
			Xpo = 0;
 800255c:	2300      	movs	r3, #0
 800255e:	80fb      	strh	r3, [r7, #6]
			Ypo += fonto.Height;
 8002560:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8002562:	88bb      	ldrh	r3, [r7, #4]
 8002564:	4413      	add	r3, r2
 8002566:	80bb      	strh	r3, [r7, #4]

			if(Ypo + fonto.Height >= ili_heigh){
 8002568:	88bb      	ldrh	r3, [r7, #4]
 800256a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800256c:	441a      	add	r2, r3
 800256e:	89fb      	ldrh	r3, [r7, #14]
 8002570:	429a      	cmp	r2, r3
 8002572:	da1f      	bge.n	80025b4 <ili9341_WriteString+0x8a>
				break;
			}

			if(*strr == ' ') {
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	2b20      	cmp	r3, #32
 800257a:	d103      	bne.n	8002584 <ili9341_WriteString+0x5a>
				// skip spaces in the beginning of the new line
				strr++;
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	3301      	adds	r3, #1
 8002580:	603b      	str	r3, [r7, #0]
				continue;
 8002582:	e012      	b.n	80025aa <ili9341_WriteString+0x80>
			}
		}
		//ST7735_WriteChar(x, y, *str, font, color, bgcolor);
		ili9341_WriteChar(Xpo, Ypo, strr, fonto, RGB_Coder, RGB_bg);
 8002584:	88b9      	ldrh	r1, [r7, #4]
 8002586:	88f8      	ldrh	r0, [r7, #6]
 8002588:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800258a:	9302      	str	r3, [sp, #8]
 800258c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800258e:	9301      	str	r3, [sp, #4]
 8002590:	6a3b      	ldr	r3, [r7, #32]
 8002592:	9300      	str	r3, [sp, #0]
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	683a      	ldr	r2, [r7, #0]
 8002598:	f7ff ff2d 	bl	80023f6 <ili9341_WriteChar>
		Xpo += fonto.Width;
 800259c:	8c3a      	ldrh	r2, [r7, #32]
 800259e:	88fb      	ldrh	r3, [r7, #6]
 80025a0:	4413      	add	r3, r2
 80025a2:	80fb      	strh	r3, [r7, #6]
		strr++;
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	3301      	adds	r3, #1
 80025a8:	603b      	str	r3, [r7, #0]
	while(*strr){
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d1ce      	bne.n	8002550 <ili9341_WriteString+0x26>
	}
}
 80025b2:	e000      	b.n	80025b6 <ili9341_WriteString+0x8c>
				break;
 80025b4:	bf00      	nop
}
 80025b6:	bf00      	nop
 80025b8:	3710      	adds	r7, #16
 80025ba:	46bd      	mov	sp, r7
 80025bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80025c0:	b002      	add	sp, #8
 80025c2:	4770      	bx	lr

080025c4 <LcdWrite8>:

#define LCD_WRITE_CLK         GPIOX_ODR(LCD_SCK) = 0; LCD_WRITE_DELAY; GPIOX_ODR(LCD_SCK) = 1;
#define LCD_READ_CLK          GPIOX_ODR(LCD_SCK) = 1; GPIOX_ODR(LCD_SCK) = 0; LCD_READ_DELAY;

void LcdWrite8(uint8_t d8)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	4603      	mov	r3, r0
 80025cc:	71fb      	strb	r3, [r7, #7]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 7);
 80025ce:	1dfb      	adds	r3, r7, #7
 80025d0:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80025d4:	1dfb      	adds	r3, r7, #7
 80025d6:	015b      	lsls	r3, r3, #5
 80025d8:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80025dc:	f023 031f 	bic.w	r3, r3, #31
 80025e0:	4313      	orrs	r3, r2
 80025e2:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80025e6:	331c      	adds	r3, #28
 80025e8:	4a5f      	ldr	r2, [pc, #380]	; (8002768 <LcdWrite8+0x1a4>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 80025ee:	4b5f      	ldr	r3, [pc, #380]	; (800276c <LcdWrite8+0x1a8>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	601a      	str	r2, [r3, #0]
 80025f4:	4b5d      	ldr	r3, [pc, #372]	; (800276c <LcdWrite8+0x1a8>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	601a      	str	r2, [r3, #0]
 80025fa:	4b5c      	ldr	r3, [pc, #368]	; (800276c <LcdWrite8+0x1a8>)
 80025fc:	2201      	movs	r2, #1
 80025fe:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 6);
 8002600:	1dfb      	adds	r3, r7, #7
 8002602:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002606:	1dfb      	adds	r3, r7, #7
 8002608:	015b      	lsls	r3, r3, #5
 800260a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 800260e:	f023 031f 	bic.w	r3, r3, #31
 8002612:	4313      	orrs	r3, r2
 8002614:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002618:	3318      	adds	r3, #24
 800261a:	4a53      	ldr	r2, [pc, #332]	; (8002768 <LcdWrite8+0x1a4>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8002620:	4b52      	ldr	r3, [pc, #328]	; (800276c <LcdWrite8+0x1a8>)
 8002622:	2200      	movs	r2, #0
 8002624:	601a      	str	r2, [r3, #0]
 8002626:	4b51      	ldr	r3, [pc, #324]	; (800276c <LcdWrite8+0x1a8>)
 8002628:	2200      	movs	r2, #0
 800262a:	601a      	str	r2, [r3, #0]
 800262c:	4b4f      	ldr	r3, [pc, #316]	; (800276c <LcdWrite8+0x1a8>)
 800262e:	2201      	movs	r2, #1
 8002630:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 5);
 8002632:	1dfb      	adds	r3, r7, #7
 8002634:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002638:	1dfb      	adds	r3, r7, #7
 800263a:	015b      	lsls	r3, r3, #5
 800263c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002640:	f023 031f 	bic.w	r3, r3, #31
 8002644:	4313      	orrs	r3, r2
 8002646:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800264a:	3314      	adds	r3, #20
 800264c:	4a46      	ldr	r2, [pc, #280]	; (8002768 <LcdWrite8+0x1a4>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8002652:	4b46      	ldr	r3, [pc, #280]	; (800276c <LcdWrite8+0x1a8>)
 8002654:	2200      	movs	r2, #0
 8002656:	601a      	str	r2, [r3, #0]
 8002658:	4b44      	ldr	r3, [pc, #272]	; (800276c <LcdWrite8+0x1a8>)
 800265a:	2200      	movs	r2, #0
 800265c:	601a      	str	r2, [r3, #0]
 800265e:	4b43      	ldr	r3, [pc, #268]	; (800276c <LcdWrite8+0x1a8>)
 8002660:	2201      	movs	r2, #1
 8002662:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 4);
 8002664:	1dfb      	adds	r3, r7, #7
 8002666:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800266a:	1dfb      	adds	r3, r7, #7
 800266c:	015b      	lsls	r3, r3, #5
 800266e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002672:	f023 031f 	bic.w	r3, r3, #31
 8002676:	4313      	orrs	r3, r2
 8002678:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800267c:	3310      	adds	r3, #16
 800267e:	4a3a      	ldr	r2, [pc, #232]	; (8002768 <LcdWrite8+0x1a4>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8002684:	4b39      	ldr	r3, [pc, #228]	; (800276c <LcdWrite8+0x1a8>)
 8002686:	2200      	movs	r2, #0
 8002688:	601a      	str	r2, [r3, #0]
 800268a:	4b38      	ldr	r3, [pc, #224]	; (800276c <LcdWrite8+0x1a8>)
 800268c:	2200      	movs	r2, #0
 800268e:	601a      	str	r2, [r3, #0]
 8002690:	4b36      	ldr	r3, [pc, #216]	; (800276c <LcdWrite8+0x1a8>)
 8002692:	2201      	movs	r2, #1
 8002694:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 3);
 8002696:	1dfb      	adds	r3, r7, #7
 8002698:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800269c:	1dfb      	adds	r3, r7, #7
 800269e:	015b      	lsls	r3, r3, #5
 80026a0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80026a4:	f023 031f 	bic.w	r3, r3, #31
 80026a8:	4313      	orrs	r3, r2
 80026aa:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80026ae:	330c      	adds	r3, #12
 80026b0:	4a2d      	ldr	r2, [pc, #180]	; (8002768 <LcdWrite8+0x1a4>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 80026b6:	4b2d      	ldr	r3, [pc, #180]	; (800276c <LcdWrite8+0x1a8>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	601a      	str	r2, [r3, #0]
 80026bc:	4b2b      	ldr	r3, [pc, #172]	; (800276c <LcdWrite8+0x1a8>)
 80026be:	2200      	movs	r2, #0
 80026c0:	601a      	str	r2, [r3, #0]
 80026c2:	4b2a      	ldr	r3, [pc, #168]	; (800276c <LcdWrite8+0x1a8>)
 80026c4:	2201      	movs	r2, #1
 80026c6:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 2);
 80026c8:	1dfb      	adds	r3, r7, #7
 80026ca:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80026ce:	1dfb      	adds	r3, r7, #7
 80026d0:	015b      	lsls	r3, r3, #5
 80026d2:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80026d6:	f023 031f 	bic.w	r3, r3, #31
 80026da:	4313      	orrs	r3, r2
 80026dc:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80026e0:	3308      	adds	r3, #8
 80026e2:	4a21      	ldr	r2, [pc, #132]	; (8002768 <LcdWrite8+0x1a4>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 80026e8:	4b20      	ldr	r3, [pc, #128]	; (800276c <LcdWrite8+0x1a8>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	601a      	str	r2, [r3, #0]
 80026ee:	4b1f      	ldr	r3, [pc, #124]	; (800276c <LcdWrite8+0x1a8>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	601a      	str	r2, [r3, #0]
 80026f4:	4b1d      	ldr	r3, [pc, #116]	; (800276c <LcdWrite8+0x1a8>)
 80026f6:	2201      	movs	r2, #1
 80026f8:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 1);
 80026fa:	1dfb      	adds	r3, r7, #7
 80026fc:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002700:	1dfb      	adds	r3, r7, #7
 8002702:	015b      	lsls	r3, r3, #5
 8002704:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002708:	f023 031f 	bic.w	r3, r3, #31
 800270c:	4313      	orrs	r3, r2
 800270e:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002712:	3304      	adds	r3, #4
 8002714:	4a14      	ldr	r2, [pc, #80]	; (8002768 <LcdWrite8+0x1a4>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 800271a:	4b14      	ldr	r3, [pc, #80]	; (800276c <LcdWrite8+0x1a8>)
 800271c:	2200      	movs	r2, #0
 800271e:	601a      	str	r2, [r3, #0]
 8002720:	4b12      	ldr	r3, [pc, #72]	; (800276c <LcdWrite8+0x1a8>)
 8002722:	2200      	movs	r2, #0
 8002724:	601a      	str	r2, [r3, #0]
 8002726:	4b11      	ldr	r3, [pc, #68]	; (800276c <LcdWrite8+0x1a8>)
 8002728:	2201      	movs	r2, #1
 800272a:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 0);
 800272c:	1dfb      	adds	r3, r7, #7
 800272e:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002732:	1dfb      	adds	r3, r7, #7
 8002734:	015b      	lsls	r3, r3, #5
 8002736:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 800273a:	f023 031f 	bic.w	r3, r3, #31
 800273e:	4313      	orrs	r3, r2
 8002740:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002744:	4a08      	ldr	r2, [pc, #32]	; (8002768 <LcdWrite8+0x1a4>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 800274a:	4b08      	ldr	r3, [pc, #32]	; (800276c <LcdWrite8+0x1a8>)
 800274c:	2200      	movs	r2, #0
 800274e:	601a      	str	r2, [r3, #0]
 8002750:	4b06      	ldr	r3, [pc, #24]	; (800276c <LcdWrite8+0x1a8>)
 8002752:	2200      	movs	r2, #0
 8002754:	601a      	str	r2, [r3, #0]
 8002756:	4b05      	ldr	r3, [pc, #20]	; (800276c <LcdWrite8+0x1a8>)
 8002758:	2201      	movs	r2, #1
 800275a:	601a      	str	r2, [r3, #0]
}
 800275c:	bf00      	nop
 800275e:	370c      	adds	r7, #12
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr
 8002768:	4241028c 	.word	0x4241028c
 800276c:	424082a8 	.word	0x424082a8

08002770 <LcdWrite16>:

void LcdWrite16(uint16_t d16)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	4603      	mov	r3, r0
 8002778:	80fb      	strh	r3, [r7, #6]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 15);
 800277a:	1dbb      	adds	r3, r7, #6
 800277c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002780:	1dbb      	adds	r3, r7, #6
 8002782:	015b      	lsls	r3, r3, #5
 8002784:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002788:	f023 031f 	bic.w	r3, r3, #31
 800278c:	4313      	orrs	r3, r2
 800278e:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002792:	333c      	adds	r3, #60	; 0x3c
 8002794:	4aba      	ldr	r2, [pc, #744]	; (8002a80 <LcdWrite16+0x310>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 800279a:	4bba      	ldr	r3, [pc, #744]	; (8002a84 <LcdWrite16+0x314>)
 800279c:	2200      	movs	r2, #0
 800279e:	601a      	str	r2, [r3, #0]
 80027a0:	4bb8      	ldr	r3, [pc, #736]	; (8002a84 <LcdWrite16+0x314>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	601a      	str	r2, [r3, #0]
 80027a6:	4bb7      	ldr	r3, [pc, #732]	; (8002a84 <LcdWrite16+0x314>)
 80027a8:	2201      	movs	r2, #1
 80027aa:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 14);
 80027ac:	1dbb      	adds	r3, r7, #6
 80027ae:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80027b2:	1dbb      	adds	r3, r7, #6
 80027b4:	015b      	lsls	r3, r3, #5
 80027b6:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80027ba:	f023 031f 	bic.w	r3, r3, #31
 80027be:	4313      	orrs	r3, r2
 80027c0:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80027c4:	3338      	adds	r3, #56	; 0x38
 80027c6:	4aae      	ldr	r2, [pc, #696]	; (8002a80 <LcdWrite16+0x310>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 80027cc:	4bad      	ldr	r3, [pc, #692]	; (8002a84 <LcdWrite16+0x314>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	601a      	str	r2, [r3, #0]
 80027d2:	4bac      	ldr	r3, [pc, #688]	; (8002a84 <LcdWrite16+0x314>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	601a      	str	r2, [r3, #0]
 80027d8:	4baa      	ldr	r3, [pc, #680]	; (8002a84 <LcdWrite16+0x314>)
 80027da:	2201      	movs	r2, #1
 80027dc:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 13);
 80027de:	1dbb      	adds	r3, r7, #6
 80027e0:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80027e4:	1dbb      	adds	r3, r7, #6
 80027e6:	015b      	lsls	r3, r3, #5
 80027e8:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80027ec:	f023 031f 	bic.w	r3, r3, #31
 80027f0:	4313      	orrs	r3, r2
 80027f2:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80027f6:	3334      	adds	r3, #52	; 0x34
 80027f8:	4aa1      	ldr	r2, [pc, #644]	; (8002a80 <LcdWrite16+0x310>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 80027fe:	4ba1      	ldr	r3, [pc, #644]	; (8002a84 <LcdWrite16+0x314>)
 8002800:	2200      	movs	r2, #0
 8002802:	601a      	str	r2, [r3, #0]
 8002804:	4b9f      	ldr	r3, [pc, #636]	; (8002a84 <LcdWrite16+0x314>)
 8002806:	2200      	movs	r2, #0
 8002808:	601a      	str	r2, [r3, #0]
 800280a:	4b9e      	ldr	r3, [pc, #632]	; (8002a84 <LcdWrite16+0x314>)
 800280c:	2201      	movs	r2, #1
 800280e:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 12);
 8002810:	1dbb      	adds	r3, r7, #6
 8002812:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002816:	1dbb      	adds	r3, r7, #6
 8002818:	015b      	lsls	r3, r3, #5
 800281a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 800281e:	f023 031f 	bic.w	r3, r3, #31
 8002822:	4313      	orrs	r3, r2
 8002824:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002828:	3330      	adds	r3, #48	; 0x30
 800282a:	4a95      	ldr	r2, [pc, #596]	; (8002a80 <LcdWrite16+0x310>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8002830:	4b94      	ldr	r3, [pc, #592]	; (8002a84 <LcdWrite16+0x314>)
 8002832:	2200      	movs	r2, #0
 8002834:	601a      	str	r2, [r3, #0]
 8002836:	4b93      	ldr	r3, [pc, #588]	; (8002a84 <LcdWrite16+0x314>)
 8002838:	2200      	movs	r2, #0
 800283a:	601a      	str	r2, [r3, #0]
 800283c:	4b91      	ldr	r3, [pc, #580]	; (8002a84 <LcdWrite16+0x314>)
 800283e:	2201      	movs	r2, #1
 8002840:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 11);
 8002842:	1dbb      	adds	r3, r7, #6
 8002844:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002848:	1dbb      	adds	r3, r7, #6
 800284a:	015b      	lsls	r3, r3, #5
 800284c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002850:	f023 031f 	bic.w	r3, r3, #31
 8002854:	4313      	orrs	r3, r2
 8002856:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800285a:	332c      	adds	r3, #44	; 0x2c
 800285c:	4a88      	ldr	r2, [pc, #544]	; (8002a80 <LcdWrite16+0x310>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8002862:	4b88      	ldr	r3, [pc, #544]	; (8002a84 <LcdWrite16+0x314>)
 8002864:	2200      	movs	r2, #0
 8002866:	601a      	str	r2, [r3, #0]
 8002868:	4b86      	ldr	r3, [pc, #536]	; (8002a84 <LcdWrite16+0x314>)
 800286a:	2200      	movs	r2, #0
 800286c:	601a      	str	r2, [r3, #0]
 800286e:	4b85      	ldr	r3, [pc, #532]	; (8002a84 <LcdWrite16+0x314>)
 8002870:	2201      	movs	r2, #1
 8002872:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 10);
 8002874:	1dbb      	adds	r3, r7, #6
 8002876:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800287a:	1dbb      	adds	r3, r7, #6
 800287c:	015b      	lsls	r3, r3, #5
 800287e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002882:	f023 031f 	bic.w	r3, r3, #31
 8002886:	4313      	orrs	r3, r2
 8002888:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800288c:	3328      	adds	r3, #40	; 0x28
 800288e:	4a7c      	ldr	r2, [pc, #496]	; (8002a80 <LcdWrite16+0x310>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8002894:	4b7b      	ldr	r3, [pc, #492]	; (8002a84 <LcdWrite16+0x314>)
 8002896:	2200      	movs	r2, #0
 8002898:	601a      	str	r2, [r3, #0]
 800289a:	4b7a      	ldr	r3, [pc, #488]	; (8002a84 <LcdWrite16+0x314>)
 800289c:	2200      	movs	r2, #0
 800289e:	601a      	str	r2, [r3, #0]
 80028a0:	4b78      	ldr	r3, [pc, #480]	; (8002a84 <LcdWrite16+0x314>)
 80028a2:	2201      	movs	r2, #1
 80028a4:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 9);
 80028a6:	1dbb      	adds	r3, r7, #6
 80028a8:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80028ac:	1dbb      	adds	r3, r7, #6
 80028ae:	015b      	lsls	r3, r3, #5
 80028b0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80028b4:	f023 031f 	bic.w	r3, r3, #31
 80028b8:	4313      	orrs	r3, r2
 80028ba:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80028be:	3324      	adds	r3, #36	; 0x24
 80028c0:	4a6f      	ldr	r2, [pc, #444]	; (8002a80 <LcdWrite16+0x310>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 80028c6:	4b6f      	ldr	r3, [pc, #444]	; (8002a84 <LcdWrite16+0x314>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	601a      	str	r2, [r3, #0]
 80028cc:	4b6d      	ldr	r3, [pc, #436]	; (8002a84 <LcdWrite16+0x314>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	601a      	str	r2, [r3, #0]
 80028d2:	4b6c      	ldr	r3, [pc, #432]	; (8002a84 <LcdWrite16+0x314>)
 80028d4:	2201      	movs	r2, #1
 80028d6:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 8);
 80028d8:	1dbb      	adds	r3, r7, #6
 80028da:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80028de:	1dbb      	adds	r3, r7, #6
 80028e0:	015b      	lsls	r3, r3, #5
 80028e2:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80028e6:	f023 031f 	bic.w	r3, r3, #31
 80028ea:	4313      	orrs	r3, r2
 80028ec:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80028f0:	3320      	adds	r3, #32
 80028f2:	4a63      	ldr	r2, [pc, #396]	; (8002a80 <LcdWrite16+0x310>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 80028f8:	4b62      	ldr	r3, [pc, #392]	; (8002a84 <LcdWrite16+0x314>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	601a      	str	r2, [r3, #0]
 80028fe:	4b61      	ldr	r3, [pc, #388]	; (8002a84 <LcdWrite16+0x314>)
 8002900:	2200      	movs	r2, #0
 8002902:	601a      	str	r2, [r3, #0]
 8002904:	4b5f      	ldr	r3, [pc, #380]	; (8002a84 <LcdWrite16+0x314>)
 8002906:	2201      	movs	r2, #1
 8002908:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 7);
 800290a:	1dbb      	adds	r3, r7, #6
 800290c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002910:	1dbb      	adds	r3, r7, #6
 8002912:	015b      	lsls	r3, r3, #5
 8002914:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002918:	f023 031f 	bic.w	r3, r3, #31
 800291c:	4313      	orrs	r3, r2
 800291e:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002922:	331c      	adds	r3, #28
 8002924:	4a56      	ldr	r2, [pc, #344]	; (8002a80 <LcdWrite16+0x310>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 800292a:	4b56      	ldr	r3, [pc, #344]	; (8002a84 <LcdWrite16+0x314>)
 800292c:	2200      	movs	r2, #0
 800292e:	601a      	str	r2, [r3, #0]
 8002930:	4b54      	ldr	r3, [pc, #336]	; (8002a84 <LcdWrite16+0x314>)
 8002932:	2200      	movs	r2, #0
 8002934:	601a      	str	r2, [r3, #0]
 8002936:	4b53      	ldr	r3, [pc, #332]	; (8002a84 <LcdWrite16+0x314>)
 8002938:	2201      	movs	r2, #1
 800293a:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 6);
 800293c:	1dbb      	adds	r3, r7, #6
 800293e:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002942:	1dbb      	adds	r3, r7, #6
 8002944:	015b      	lsls	r3, r3, #5
 8002946:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 800294a:	f023 031f 	bic.w	r3, r3, #31
 800294e:	4313      	orrs	r3, r2
 8002950:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002954:	3318      	adds	r3, #24
 8002956:	4a4a      	ldr	r2, [pc, #296]	; (8002a80 <LcdWrite16+0x310>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 800295c:	4b49      	ldr	r3, [pc, #292]	; (8002a84 <LcdWrite16+0x314>)
 800295e:	2200      	movs	r2, #0
 8002960:	601a      	str	r2, [r3, #0]
 8002962:	4b48      	ldr	r3, [pc, #288]	; (8002a84 <LcdWrite16+0x314>)
 8002964:	2200      	movs	r2, #0
 8002966:	601a      	str	r2, [r3, #0]
 8002968:	4b46      	ldr	r3, [pc, #280]	; (8002a84 <LcdWrite16+0x314>)
 800296a:	2201      	movs	r2, #1
 800296c:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 5);
 800296e:	1dbb      	adds	r3, r7, #6
 8002970:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002974:	1dbb      	adds	r3, r7, #6
 8002976:	015b      	lsls	r3, r3, #5
 8002978:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 800297c:	f023 031f 	bic.w	r3, r3, #31
 8002980:	4313      	orrs	r3, r2
 8002982:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002986:	3314      	adds	r3, #20
 8002988:	4a3d      	ldr	r2, [pc, #244]	; (8002a80 <LcdWrite16+0x310>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 800298e:	4b3d      	ldr	r3, [pc, #244]	; (8002a84 <LcdWrite16+0x314>)
 8002990:	2200      	movs	r2, #0
 8002992:	601a      	str	r2, [r3, #0]
 8002994:	4b3b      	ldr	r3, [pc, #236]	; (8002a84 <LcdWrite16+0x314>)
 8002996:	2200      	movs	r2, #0
 8002998:	601a      	str	r2, [r3, #0]
 800299a:	4b3a      	ldr	r3, [pc, #232]	; (8002a84 <LcdWrite16+0x314>)
 800299c:	2201      	movs	r2, #1
 800299e:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 4);
 80029a0:	1dbb      	adds	r3, r7, #6
 80029a2:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80029a6:	1dbb      	adds	r3, r7, #6
 80029a8:	015b      	lsls	r3, r3, #5
 80029aa:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80029ae:	f023 031f 	bic.w	r3, r3, #31
 80029b2:	4313      	orrs	r3, r2
 80029b4:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80029b8:	3310      	adds	r3, #16
 80029ba:	4a31      	ldr	r2, [pc, #196]	; (8002a80 <LcdWrite16+0x310>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 80029c0:	4b30      	ldr	r3, [pc, #192]	; (8002a84 <LcdWrite16+0x314>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	601a      	str	r2, [r3, #0]
 80029c6:	4b2f      	ldr	r3, [pc, #188]	; (8002a84 <LcdWrite16+0x314>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	601a      	str	r2, [r3, #0]
 80029cc:	4b2d      	ldr	r3, [pc, #180]	; (8002a84 <LcdWrite16+0x314>)
 80029ce:	2201      	movs	r2, #1
 80029d0:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 3);
 80029d2:	1dbb      	adds	r3, r7, #6
 80029d4:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80029d8:	1dbb      	adds	r3, r7, #6
 80029da:	015b      	lsls	r3, r3, #5
 80029dc:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80029e0:	f023 031f 	bic.w	r3, r3, #31
 80029e4:	4313      	orrs	r3, r2
 80029e6:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80029ea:	330c      	adds	r3, #12
 80029ec:	4a24      	ldr	r2, [pc, #144]	; (8002a80 <LcdWrite16+0x310>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 80029f2:	4b24      	ldr	r3, [pc, #144]	; (8002a84 <LcdWrite16+0x314>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	601a      	str	r2, [r3, #0]
 80029f8:	4b22      	ldr	r3, [pc, #136]	; (8002a84 <LcdWrite16+0x314>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	601a      	str	r2, [r3, #0]
 80029fe:	4b21      	ldr	r3, [pc, #132]	; (8002a84 <LcdWrite16+0x314>)
 8002a00:	2201      	movs	r2, #1
 8002a02:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 2);
 8002a04:	1dbb      	adds	r3, r7, #6
 8002a06:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002a0a:	1dbb      	adds	r3, r7, #6
 8002a0c:	015b      	lsls	r3, r3, #5
 8002a0e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002a12:	f023 031f 	bic.w	r3, r3, #31
 8002a16:	4313      	orrs	r3, r2
 8002a18:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002a1c:	3308      	adds	r3, #8
 8002a1e:	4a18      	ldr	r2, [pc, #96]	; (8002a80 <LcdWrite16+0x310>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8002a24:	4b17      	ldr	r3, [pc, #92]	; (8002a84 <LcdWrite16+0x314>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	601a      	str	r2, [r3, #0]
 8002a2a:	4b16      	ldr	r3, [pc, #88]	; (8002a84 <LcdWrite16+0x314>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	601a      	str	r2, [r3, #0]
 8002a30:	4b14      	ldr	r3, [pc, #80]	; (8002a84 <LcdWrite16+0x314>)
 8002a32:	2201      	movs	r2, #1
 8002a34:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 1);
 8002a36:	1dbb      	adds	r3, r7, #6
 8002a38:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002a3c:	1dbb      	adds	r3, r7, #6
 8002a3e:	015b      	lsls	r3, r3, #5
 8002a40:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002a44:	f023 031f 	bic.w	r3, r3, #31
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002a4e:	3304      	adds	r3, #4
 8002a50:	4a0b      	ldr	r2, [pc, #44]	; (8002a80 <LcdWrite16+0x310>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8002a56:	4b0b      	ldr	r3, [pc, #44]	; (8002a84 <LcdWrite16+0x314>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	601a      	str	r2, [r3, #0]
 8002a5c:	4b09      	ldr	r3, [pc, #36]	; (8002a84 <LcdWrite16+0x314>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	601a      	str	r2, [r3, #0]
 8002a62:	4b08      	ldr	r3, [pc, #32]	; (8002a84 <LcdWrite16+0x314>)
 8002a64:	2201      	movs	r2, #1
 8002a66:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 0);
 8002a68:	1dbb      	adds	r3, r7, #6
 8002a6a:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002a6e:	1dbb      	adds	r3, r7, #6
 8002a70:	015b      	lsls	r3, r3, #5
 8002a72:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002a76:	f023 031f 	bic.w	r3, r3, #31
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	e004      	b.n	8002a88 <LcdWrite16+0x318>
 8002a7e:	bf00      	nop
 8002a80:	4241028c 	.word	0x4241028c
 8002a84:	424082a8 	.word	0x424082a8
 8002a88:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002a8c:	4a08      	ldr	r2, [pc, #32]	; (8002ab0 <LcdWrite16+0x340>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8002a92:	4b08      	ldr	r3, [pc, #32]	; (8002ab4 <LcdWrite16+0x344>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	601a      	str	r2, [r3, #0]
 8002a98:	4b06      	ldr	r3, [pc, #24]	; (8002ab4 <LcdWrite16+0x344>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	601a      	str	r2, [r3, #0]
 8002a9e:	4b05      	ldr	r3, [pc, #20]	; (8002ab4 <LcdWrite16+0x344>)
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	601a      	str	r2, [r3, #0]
}
 8002aa4:	bf00      	nop
 8002aa6:	370c      	adds	r7, #12
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr
 8002ab0:	4241028c 	.word	0x4241028c
 8002ab4:	424082a8 	.word	0x424082a8

08002ab8 <LCD_IO_WriteMultiData8>:
#if DMANUM(LCD_DMA_TX) == 0 || LCD_SPI == 0

/* SPI TX no DMA */

void LCD_IO_WriteMultiData8(uint8_t * pData, uint32_t Size, uint32_t dinc)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	60f8      	str	r0, [r7, #12]
 8002ac0:	60b9      	str	r1, [r7, #8]
 8002ac2:	607a      	str	r2, [r7, #4]
  while(Size--)
 8002ac4:	e00a      	b.n	8002adc <LCD_IO_WriteMultiData8+0x24>
  {
    LcdWrite8(*pData);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	4618      	mov	r0, r3
 8002acc:	f7ff fd7a 	bl	80025c4 <LcdWrite8>
    if(dinc)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d002      	beq.n	8002adc <LCD_IO_WriteMultiData8+0x24>
      pData++;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	3301      	adds	r3, #1
 8002ada:	60fb      	str	r3, [r7, #12]
  while(Size--)
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	1e5a      	subs	r2, r3, #1
 8002ae0:	60ba      	str	r2, [r7, #8]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d1ef      	bne.n	8002ac6 <LCD_IO_WriteMultiData8+0xe>
  }
  LCD_CS_OFF;
 8002ae6:	4b03      	ldr	r3, [pc, #12]	; (8002af4 <LCD_IO_WriteMultiData8+0x3c>)
 8002ae8:	2201      	movs	r2, #1
 8002aea:	601a      	str	r2, [r3, #0]
}
 8002aec:	bf00      	nop
 8002aee:	3710      	adds	r7, #16
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	424002a0 	.word	0x424002a0

08002af8 <LCD_IO_WriteMultiData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteMultiData16(uint16_t * pData, uint32_t Size, uint32_t dinc)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	60b9      	str	r1, [r7, #8]
 8002b02:	607a      	str	r2, [r7, #4]
  while(Size--)
 8002b04:	e00a      	b.n	8002b1c <LCD_IO_WriteMultiData16+0x24>
  {
    LcdWrite16(*pData);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	881b      	ldrh	r3, [r3, #0]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f7ff fe30 	bl	8002770 <LcdWrite16>
    if(dinc)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d002      	beq.n	8002b1c <LCD_IO_WriteMultiData16+0x24>
      pData++;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	3302      	adds	r3, #2
 8002b1a:	60fb      	str	r3, [r7, #12]
  while(Size--)
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	1e5a      	subs	r2, r3, #1
 8002b20:	60ba      	str	r2, [r7, #8]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d1ef      	bne.n	8002b06 <LCD_IO_WriteMultiData16+0xe>
  }
  LCD_CS_OFF;
 8002b26:	4b03      	ldr	r3, [pc, #12]	; (8002b34 <LCD_IO_WriteMultiData16+0x3c>)
 8002b28:	2201      	movs	r2, #1
 8002b2a:	601a      	str	r2, [r3, #0]
}
 8002b2c:	bf00      	nop
 8002b2e:	3710      	adds	r7, #16
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	424002a0 	.word	0x424002a0

08002b38 <LCD_Delay>:

//=============================================================================
/* Public functions */

void LCD_Delay(uint32_t Delay)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f000 f9b7 	bl	8002eb4 <HAL_Delay>
}
 8002b46:	bf00      	nop
 8002b48:	3708      	adds	r7, #8
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}

08002b4e <LCD_IO_Bl_OnOff>:

//-----------------------------------------------------------------------------
void LCD_IO_Bl_OnOff(uint8_t Bl)
{
 8002b4e:	b480      	push	{r7}
 8002b50:	b083      	sub	sp, #12
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	4603      	mov	r3, r0
 8002b56:	71fb      	strb	r3, [r7, #7]
  if(Bl)
    GPIOX_ODR(LCD_BL) = LCD_BLON;
  else
    GPIOX_ODR(LCD_BL) = 1 - LCD_BLON;
  #endif
}
 8002b58:	bf00      	nop
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr

08002b64 <LCD_IO_Init>:

//-----------------------------------------------------------------------------
void LCD_IO_Init(void)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	af00      	add	r7, sp, #0
  #define DMA1_CLOCK_RX         0
  #endif
  #endif  // #else LCD_SPI == 0

  /* GPIO, DMA Clocks */
  RCC->AHB1ENR |= GPIOX_CLOCK(LCD_RS) | GPIOX_CLOCK(LCD_CS) | GPIOX_CLOCK(LCD_SCK) | GPIOX_CLOCK(LCD_MOSI) |
 8002b68:	4b34      	ldr	r3, [pc, #208]	; (8002c3c <LCD_IO_Init+0xd8>)
 8002b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6c:	4a33      	ldr	r2, [pc, #204]	; (8002c3c <LCD_IO_Init+0xd8>)
 8002b6e:	f043 0307 	orr.w	r3, r3, #7
 8002b72:	6313      	str	r3, [r2, #48]	; 0x30
  LCD_IO_Bl_OnOff(1);
  #endif

  /* Reset pin = output, reset off */
  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A
  GPIOX_MODER(MODE_OUT, LCD_RST);
 8002b74:	4b32      	ldr	r3, [pc, #200]	; (8002c40 <LCD_IO_Init+0xdc>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002b7c:	4a30      	ldr	r2, [pc, #192]	; (8002c40 <LCD_IO_Init+0xdc>)
 8002b7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b82:	6013      	str	r3, [r2, #0]
  GPIOX_OSPEEDR(MODE_SPD_LOW, LCD_RST);
 8002b84:	4b2e      	ldr	r3, [pc, #184]	; (8002c40 <LCD_IO_Init+0xdc>)
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	4a2d      	ldr	r2, [pc, #180]	; (8002c40 <LCD_IO_Init+0xdc>)
 8002b8a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002b8e:	6093      	str	r3, [r2, #8]
  LCD_RST_OFF;
 8002b90:	4b2c      	ldr	r3, [pc, #176]	; (8002c44 <LCD_IO_Init+0xe0>)
 8002b92:	2201      	movs	r2, #1
 8002b94:	601a      	str	r2, [r3, #0]
  #endif

  LCD_RS_DATA;
 8002b96:	4b2c      	ldr	r3, [pc, #176]	; (8002c48 <LCD_IO_Init+0xe4>)
 8002b98:	2201      	movs	r2, #1
 8002b9a:	601a      	str	r2, [r3, #0]
  LCD_CS_OFF;
 8002b9c:	4b2b      	ldr	r3, [pc, #172]	; (8002c4c <LCD_IO_Init+0xe8>)
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	601a      	str	r2, [r3, #0]
  GPIOX_MODER(MODE_OUT, LCD_RS);
 8002ba2:	4b2b      	ldr	r3, [pc, #172]	; (8002c50 <LCD_IO_Init+0xec>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002baa:	4a29      	ldr	r2, [pc, #164]	; (8002c50 <LCD_IO_Init+0xec>)
 8002bac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bb0:	6013      	str	r3, [r2, #0]
  GPIOX_MODER(MODE_OUT, LCD_CS);
 8002bb2:	4b27      	ldr	r3, [pc, #156]	; (8002c50 <LCD_IO_Init+0xec>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002bba:	4a25      	ldr	r2, [pc, #148]	; (8002c50 <LCD_IO_Init+0xec>)
 8002bbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bc0:	6013      	str	r3, [r2, #0]

  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_RS);
 8002bc2:	4b23      	ldr	r3, [pc, #140]	; (8002c50 <LCD_IO_Init+0xec>)
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	4a22      	ldr	r2, [pc, #136]	; (8002c50 <LCD_IO_Init+0xec>)
 8002bc8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8002bcc:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_CS);
 8002bce:	4b20      	ldr	r3, [pc, #128]	; (8002c50 <LCD_IO_Init+0xec>)
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	4a1f      	ldr	r2, [pc, #124]	; (8002c50 <LCD_IO_Init+0xec>)
 8002bd4:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8002bd8:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_SCK);
 8002bda:	4b19      	ldr	r3, [pc, #100]	; (8002c40 <LCD_IO_Init+0xdc>)
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	4a18      	ldr	r2, [pc, #96]	; (8002c40 <LCD_IO_Init+0xdc>)
 8002be0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8002be4:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_MOSI);
 8002be6:	4b1b      	ldr	r3, [pc, #108]	; (8002c54 <LCD_IO_Init+0xf0>)
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	4a1a      	ldr	r2, [pc, #104]	; (8002c54 <LCD_IO_Init+0xf0>)
 8002bec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002bf0:	6093      	str	r3, [r2, #8]
  GPIOX_ODR(LCD_SCK) = 1;               // SCK = 1
 8002bf2:	4b19      	ldr	r3, [pc, #100]	; (8002c58 <LCD_IO_Init+0xf4>)
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	601a      	str	r2, [r3, #0]

  #if LCD_SPI == 0
  /* Software SPI */
  GPIOX_MODER(MODE_OUT, LCD_SCK);
 8002bf8:	4b11      	ldr	r3, [pc, #68]	; (8002c40 <LCD_IO_Init+0xdc>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002c00:	4a0f      	ldr	r2, [pc, #60]	; (8002c40 <LCD_IO_Init+0xdc>)
 8002c02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c06:	6013      	str	r3, [r2, #0]
  GPIOX_MODER(MODE_OUT, LCD_MOSI);
 8002c08:	4b12      	ldr	r3, [pc, #72]	; (8002c54 <LCD_IO_Init+0xf0>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002c10:	4a10      	ldr	r2, [pc, #64]	; (8002c54 <LCD_IO_Init+0xf0>)
 8002c12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c16:	6013      	str	r3, [r2, #0]

  #endif // #else LCD_SPI == 0

  /* Set or Reset the control line */
  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A // reset
  LCD_Delay(10);
 8002c18:	200a      	movs	r0, #10
 8002c1a:	f7ff ff8d 	bl	8002b38 <LCD_Delay>
  LCD_RST_ON;
 8002c1e:	4b09      	ldr	r3, [pc, #36]	; (8002c44 <LCD_IO_Init+0xe0>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	601a      	str	r2, [r3, #0]
  LCD_Delay(10);
 8002c24:	200a      	movs	r0, #10
 8002c26:	f7ff ff87 	bl	8002b38 <LCD_Delay>
  LCD_RST_OFF;
 8002c2a:	4b06      	ldr	r3, [pc, #24]	; (8002c44 <LCD_IO_Init+0xe0>)
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	601a      	str	r2, [r3, #0]
  #endif
  LCD_Delay(10);
 8002c30:	200a      	movs	r0, #10
 8002c32:	f7ff ff81 	bl	8002b38 <LCD_Delay>
  osSemaphoreDef(spiDmaBinSem);
  spiDmaBinSemHandle = osSemaphoreCreate(osSemaphore(spiDmaBinSem), 1);
  osSemaphoreWait(spiDmaBinSemHandle, 1);
  #endif
  #endif  // #if DMANUM(LCD_DMA_RX) > 0
} // void LCD_IO_Init(void)
 8002c36:	bf00      	nop
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	40023800 	.word	0x40023800
 8002c40:	40020400 	.word	0x40020400
 8002c44:	42408294 	.word	0x42408294
 8002c48:	424002a8 	.word	0x424002a8
 8002c4c:	424002a0 	.word	0x424002a0
 8002c50:	40020000 	.word	0x40020000
 8002c54:	40020800 	.word	0x40020800
 8002c58:	424082a8 	.word	0x424082a8

08002c5c <LCD_IO_WriteCmd8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8(uint8_t Cmd)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b082      	sub	sp, #8
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	4603      	mov	r3, r0
 8002c64:	71fb      	strb	r3, [r7, #7]
  WaitForDmaEnd();
  LcdSpiMode8();
  LCD_CS_ON;
 8002c66:	4b0a      	ldr	r3, [pc, #40]	; (8002c90 <LCD_IO_WriteCmd8+0x34>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 8002c6c:	4b09      	ldr	r3, [pc, #36]	; (8002c94 <LCD_IO_WriteCmd8+0x38>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	601a      	str	r2, [r3, #0]
 8002c72:	79fb      	ldrb	r3, [r7, #7]
 8002c74:	4618      	mov	r0, r3
 8002c76:	f7ff fca5 	bl	80025c4 <LcdWrite8>
 8002c7a:	4b06      	ldr	r3, [pc, #24]	; (8002c94 <LCD_IO_WriteCmd8+0x38>)
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	601a      	str	r2, [r3, #0]
  LCD_CS_OFF;
 8002c80:	4b03      	ldr	r3, [pc, #12]	; (8002c90 <LCD_IO_WriteCmd8+0x34>)
 8002c82:	2201      	movs	r2, #1
 8002c84:	601a      	str	r2, [r3, #0]
}
 8002c86:	bf00      	nop
 8002c88:	3708      	adds	r7, #8
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	424002a0 	.word	0x424002a0
 8002c94:	424002a8 	.word	0x424002a8

08002c98 <LCD_IO_WriteData8>:
  LCD_CS_OFF;
}

//-----------------------------------------------------------------------------
void LCD_IO_WriteData8(uint8_t Data)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	71fb      	strb	r3, [r7, #7]
  WaitForDmaEnd();
  LcdSpiMode8();
  LCD_CS_ON;
 8002ca2:	4b07      	ldr	r3, [pc, #28]	; (8002cc0 <LCD_IO_WriteData8+0x28>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	601a      	str	r2, [r3, #0]
  LcdWrite8(Data);
 8002ca8:	79fb      	ldrb	r3, [r7, #7]
 8002caa:	4618      	mov	r0, r3
 8002cac:	f7ff fc8a 	bl	80025c4 <LcdWrite8>
  LCD_CS_OFF;
 8002cb0:	4b03      	ldr	r3, [pc, #12]	; (8002cc0 <LCD_IO_WriteData8+0x28>)
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	601a      	str	r2, [r3, #0]
}
 8002cb6:	bf00      	nop
 8002cb8:	3708      	adds	r7, #8
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	424002a0 	.word	0x424002a0

08002cc4 <LCD_IO_WriteData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteData16(uint16_t Data)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b082      	sub	sp, #8
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	4603      	mov	r3, r0
 8002ccc:	80fb      	strh	r3, [r7, #6]
  WaitForDmaEnd();
  LcdSpiMode16();
  LCD_CS_ON;
 8002cce:	4b07      	ldr	r3, [pc, #28]	; (8002cec <LCD_IO_WriteData16+0x28>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	601a      	str	r2, [r3, #0]
  LcdWrite16(Data);
 8002cd4:	88fb      	ldrh	r3, [r7, #6]
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f7ff fd4a 	bl	8002770 <LcdWrite16>
  LCD_CS_OFF;
 8002cdc:	4b03      	ldr	r3, [pc, #12]	; (8002cec <LCD_IO_WriteData16+0x28>)
 8002cde:	2201      	movs	r2, #1
 8002ce0:	601a      	str	r2, [r3, #0]
}
 8002ce2:	bf00      	nop
 8002ce4:	3708      	adds	r7, #8
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	424002a0 	.word	0x424002a0

08002cf0 <LCD_IO_WriteCmd8DataFill16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8DataFill16(uint8_t Cmd, uint16_t Data, uint32_t Size)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b082      	sub	sp, #8
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	603a      	str	r2, [r7, #0]
 8002cfa:	71fb      	strb	r3, [r7, #7]
 8002cfc:	460b      	mov	r3, r1
 8002cfe:	80bb      	strh	r3, [r7, #4]
  WaitForDmaEnd();
  LcdSpiMode8();
  LCD_CS_ON;
 8002d00:	4b0b      	ldr	r3, [pc, #44]	; (8002d30 <LCD_IO_WriteCmd8DataFill16+0x40>)
 8002d02:	2200      	movs	r2, #0
 8002d04:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 8002d06:	4b0b      	ldr	r3, [pc, #44]	; (8002d34 <LCD_IO_WriteCmd8DataFill16+0x44>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	601a      	str	r2, [r3, #0]
 8002d0c:	79fb      	ldrb	r3, [r7, #7]
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f7ff fc58 	bl	80025c4 <LcdWrite8>
 8002d14:	4b07      	ldr	r3, [pc, #28]	; (8002d34 <LCD_IO_WriteCmd8DataFill16+0x44>)
 8002d16:	2201      	movs	r2, #1
 8002d18:	601a      	str	r2, [r3, #0]
  LcdSpiMode16();
  LCD_IO_WriteMultiData16(&Data, Size, 0);
 8002d1a:	1d3b      	adds	r3, r7, #4
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	6839      	ldr	r1, [r7, #0]
 8002d20:	4618      	mov	r0, r3
 8002d22:	f7ff fee9 	bl	8002af8 <LCD_IO_WriteMultiData16>
}
 8002d26:	bf00      	nop
 8002d28:	3708      	adds	r7, #8
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	424002a0 	.word	0x424002a0
 8002d34:	424002a8 	.word	0x424002a8

08002d38 <LCD_IO_WriteCmd8MultipleData8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8MultipleData8(uint8_t Cmd, uint8_t *pData, uint32_t Size)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b084      	sub	sp, #16
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	4603      	mov	r3, r0
 8002d40:	60b9      	str	r1, [r7, #8]
 8002d42:	607a      	str	r2, [r7, #4]
 8002d44:	73fb      	strb	r3, [r7, #15]
  WaitForDmaEnd();
  LcdSpiMode8();
  LCD_CS_ON;
 8002d46:	4b0b      	ldr	r3, [pc, #44]	; (8002d74 <LCD_IO_WriteCmd8MultipleData8+0x3c>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 8002d4c:	4b0a      	ldr	r3, [pc, #40]	; (8002d78 <LCD_IO_WriteCmd8MultipleData8+0x40>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	601a      	str	r2, [r3, #0]
 8002d52:	7bfb      	ldrb	r3, [r7, #15]
 8002d54:	4618      	mov	r0, r3
 8002d56:	f7ff fc35 	bl	80025c4 <LcdWrite8>
 8002d5a:	4b07      	ldr	r3, [pc, #28]	; (8002d78 <LCD_IO_WriteCmd8MultipleData8+0x40>)
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	601a      	str	r2, [r3, #0]
  LCD_IO_WriteMultiData8(pData, Size, 1);
 8002d60:	2201      	movs	r2, #1
 8002d62:	6879      	ldr	r1, [r7, #4]
 8002d64:	68b8      	ldr	r0, [r7, #8]
 8002d66:	f7ff fea7 	bl	8002ab8 <LCD_IO_WriteMultiData8>
}
 8002d6a:	bf00      	nop
 8002d6c:	3710      	adds	r7, #16
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	424002a0 	.word	0x424002a0
 8002d78:	424002a8 	.word	0x424002a8

08002d7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002d7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002db4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002d80:	480d      	ldr	r0, [pc, #52]	; (8002db8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002d82:	490e      	ldr	r1, [pc, #56]	; (8002dbc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002d84:	4a0e      	ldr	r2, [pc, #56]	; (8002dc0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002d86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d88:	e002      	b.n	8002d90 <LoopCopyDataInit>

08002d8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d8e:	3304      	adds	r3, #4

08002d90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d94:	d3f9      	bcc.n	8002d8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d96:	4a0b      	ldr	r2, [pc, #44]	; (8002dc4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002d98:	4c0b      	ldr	r4, [pc, #44]	; (8002dc8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002d9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d9c:	e001      	b.n	8002da2 <LoopFillZerobss>

08002d9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002da0:	3204      	adds	r2, #4

08002da2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002da2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002da4:	d3fb      	bcc.n	8002d9e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002da6:	f7ff f97d 	bl	80020a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002daa:	f005 fb65 	bl	8008478 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002dae:	f7fe fb43 	bl	8001438 <main>
  bx  lr    
 8002db2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002db4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002db8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002dbc:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8002dc0:	0800d344 	.word	0x0800d344
  ldr r2, =_sbss
 8002dc4:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8002dc8:	200004a4 	.word	0x200004a4

08002dcc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002dcc:	e7fe      	b.n	8002dcc <ADC_IRQHandler>
	...

08002dd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002dd4:	4b0e      	ldr	r3, [pc, #56]	; (8002e10 <HAL_Init+0x40>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a0d      	ldr	r2, [pc, #52]	; (8002e10 <HAL_Init+0x40>)
 8002dda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002dde:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002de0:	4b0b      	ldr	r3, [pc, #44]	; (8002e10 <HAL_Init+0x40>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a0a      	ldr	r2, [pc, #40]	; (8002e10 <HAL_Init+0x40>)
 8002de6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002dea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002dec:	4b08      	ldr	r3, [pc, #32]	; (8002e10 <HAL_Init+0x40>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a07      	ldr	r2, [pc, #28]	; (8002e10 <HAL_Init+0x40>)
 8002df2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002df6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002df8:	2003      	movs	r0, #3
 8002dfa:	f000 f94f 	bl	800309c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002dfe:	2000      	movs	r0, #0
 8002e00:	f000 f808 	bl	8002e14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e04:	f7fe fe90 	bl	8001b28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	40023c00 	.word	0x40023c00

08002e14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e1c:	4b12      	ldr	r3, [pc, #72]	; (8002e68 <HAL_InitTick+0x54>)
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	4b12      	ldr	r3, [pc, #72]	; (8002e6c <HAL_InitTick+0x58>)
 8002e22:	781b      	ldrb	r3, [r3, #0]
 8002e24:	4619      	mov	r1, r3
 8002e26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e32:	4618      	mov	r0, r3
 8002e34:	f000 f967 	bl	8003106 <HAL_SYSTICK_Config>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d001      	beq.n	8002e42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e00e      	b.n	8002e60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2b0f      	cmp	r3, #15
 8002e46:	d80a      	bhi.n	8002e5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e48:	2200      	movs	r2, #0
 8002e4a:	6879      	ldr	r1, [r7, #4]
 8002e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e50:	f000 f92f 	bl	80030b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e54:	4a06      	ldr	r2, [pc, #24]	; (8002e70 <HAL_InitTick+0x5c>)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	e000      	b.n	8002e60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3708      	adds	r7, #8
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	20000004 	.word	0x20000004
 8002e6c:	2000001c 	.word	0x2000001c
 8002e70:	20000018 	.word	0x20000018

08002e74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e74:	b480      	push	{r7}
 8002e76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e78:	4b06      	ldr	r3, [pc, #24]	; (8002e94 <HAL_IncTick+0x20>)
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	4b06      	ldr	r3, [pc, #24]	; (8002e98 <HAL_IncTick+0x24>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4413      	add	r3, r2
 8002e84:	4a04      	ldr	r2, [pc, #16]	; (8002e98 <HAL_IncTick+0x24>)
 8002e86:	6013      	str	r3, [r2, #0]
}
 8002e88:	bf00      	nop
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr
 8002e92:	bf00      	nop
 8002e94:	2000001c 	.word	0x2000001c
 8002e98:	20000490 	.word	0x20000490

08002e9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	af00      	add	r7, sp, #0
  return uwTick;
 8002ea0:	4b03      	ldr	r3, [pc, #12]	; (8002eb0 <HAL_GetTick+0x14>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr
 8002eae:	bf00      	nop
 8002eb0:	20000490 	.word	0x20000490

08002eb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ebc:	f7ff ffee 	bl	8002e9c <HAL_GetTick>
 8002ec0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ecc:	d005      	beq.n	8002eda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ece:	4b0a      	ldr	r3, [pc, #40]	; (8002ef8 <HAL_Delay+0x44>)
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	4413      	add	r3, r2
 8002ed8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002eda:	bf00      	nop
 8002edc:	f7ff ffde 	bl	8002e9c <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	68fa      	ldr	r2, [r7, #12]
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d8f7      	bhi.n	8002edc <HAL_Delay+0x28>
  {
  }
}
 8002eec:	bf00      	nop
 8002eee:	bf00      	nop
 8002ef0:	3710      	adds	r7, #16
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	2000001c 	.word	0x2000001c

08002efc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b085      	sub	sp, #20
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f003 0307 	and.w	r3, r3, #7
 8002f0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f0c:	4b0c      	ldr	r3, [pc, #48]	; (8002f40 <__NVIC_SetPriorityGrouping+0x44>)
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f12:	68ba      	ldr	r2, [r7, #8]
 8002f14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f18:	4013      	ands	r3, r2
 8002f1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f2e:	4a04      	ldr	r2, [pc, #16]	; (8002f40 <__NVIC_SetPriorityGrouping+0x44>)
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	60d3      	str	r3, [r2, #12]
}
 8002f34:	bf00      	nop
 8002f36:	3714      	adds	r7, #20
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr
 8002f40:	e000ed00 	.word	0xe000ed00

08002f44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f44:	b480      	push	{r7}
 8002f46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f48:	4b04      	ldr	r3, [pc, #16]	; (8002f5c <__NVIC_GetPriorityGrouping+0x18>)
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	0a1b      	lsrs	r3, r3, #8
 8002f4e:	f003 0307 	and.w	r3, r3, #7
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr
 8002f5c:	e000ed00 	.word	0xe000ed00

08002f60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	4603      	mov	r3, r0
 8002f68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	db0b      	blt.n	8002f8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f72:	79fb      	ldrb	r3, [r7, #7]
 8002f74:	f003 021f 	and.w	r2, r3, #31
 8002f78:	4907      	ldr	r1, [pc, #28]	; (8002f98 <__NVIC_EnableIRQ+0x38>)
 8002f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f7e:	095b      	lsrs	r3, r3, #5
 8002f80:	2001      	movs	r0, #1
 8002f82:	fa00 f202 	lsl.w	r2, r0, r2
 8002f86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f8a:	bf00      	nop
 8002f8c:	370c      	adds	r7, #12
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr
 8002f96:	bf00      	nop
 8002f98:	e000e100 	.word	0xe000e100

08002f9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	6039      	str	r1, [r7, #0]
 8002fa6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	db0a      	blt.n	8002fc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	b2da      	uxtb	r2, r3
 8002fb4:	490c      	ldr	r1, [pc, #48]	; (8002fe8 <__NVIC_SetPriority+0x4c>)
 8002fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fba:	0112      	lsls	r2, r2, #4
 8002fbc:	b2d2      	uxtb	r2, r2
 8002fbe:	440b      	add	r3, r1
 8002fc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fc4:	e00a      	b.n	8002fdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	b2da      	uxtb	r2, r3
 8002fca:	4908      	ldr	r1, [pc, #32]	; (8002fec <__NVIC_SetPriority+0x50>)
 8002fcc:	79fb      	ldrb	r3, [r7, #7]
 8002fce:	f003 030f 	and.w	r3, r3, #15
 8002fd2:	3b04      	subs	r3, #4
 8002fd4:	0112      	lsls	r2, r2, #4
 8002fd6:	b2d2      	uxtb	r2, r2
 8002fd8:	440b      	add	r3, r1
 8002fda:	761a      	strb	r2, [r3, #24]
}
 8002fdc:	bf00      	nop
 8002fde:	370c      	adds	r7, #12
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr
 8002fe8:	e000e100 	.word	0xe000e100
 8002fec:	e000ed00 	.word	0xe000ed00

08002ff0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b089      	sub	sp, #36	; 0x24
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	60f8      	str	r0, [r7, #12]
 8002ff8:	60b9      	str	r1, [r7, #8]
 8002ffa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f003 0307 	and.w	r3, r3, #7
 8003002:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	f1c3 0307 	rsb	r3, r3, #7
 800300a:	2b04      	cmp	r3, #4
 800300c:	bf28      	it	cs
 800300e:	2304      	movcs	r3, #4
 8003010:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	3304      	adds	r3, #4
 8003016:	2b06      	cmp	r3, #6
 8003018:	d902      	bls.n	8003020 <NVIC_EncodePriority+0x30>
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	3b03      	subs	r3, #3
 800301e:	e000      	b.n	8003022 <NVIC_EncodePriority+0x32>
 8003020:	2300      	movs	r3, #0
 8003022:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003024:	f04f 32ff 	mov.w	r2, #4294967295
 8003028:	69bb      	ldr	r3, [r7, #24]
 800302a:	fa02 f303 	lsl.w	r3, r2, r3
 800302e:	43da      	mvns	r2, r3
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	401a      	ands	r2, r3
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003038:	f04f 31ff 	mov.w	r1, #4294967295
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	fa01 f303 	lsl.w	r3, r1, r3
 8003042:	43d9      	mvns	r1, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003048:	4313      	orrs	r3, r2
         );
}
 800304a:	4618      	mov	r0, r3
 800304c:	3724      	adds	r7, #36	; 0x24
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr
	...

08003058 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b082      	sub	sp, #8
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	3b01      	subs	r3, #1
 8003064:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003068:	d301      	bcc.n	800306e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800306a:	2301      	movs	r3, #1
 800306c:	e00f      	b.n	800308e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800306e:	4a0a      	ldr	r2, [pc, #40]	; (8003098 <SysTick_Config+0x40>)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	3b01      	subs	r3, #1
 8003074:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003076:	210f      	movs	r1, #15
 8003078:	f04f 30ff 	mov.w	r0, #4294967295
 800307c:	f7ff ff8e 	bl	8002f9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003080:	4b05      	ldr	r3, [pc, #20]	; (8003098 <SysTick_Config+0x40>)
 8003082:	2200      	movs	r2, #0
 8003084:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003086:	4b04      	ldr	r3, [pc, #16]	; (8003098 <SysTick_Config+0x40>)
 8003088:	2207      	movs	r2, #7
 800308a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800308c:	2300      	movs	r3, #0
}
 800308e:	4618      	mov	r0, r3
 8003090:	3708      	adds	r7, #8
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	e000e010 	.word	0xe000e010

0800309c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f7ff ff29 	bl	8002efc <__NVIC_SetPriorityGrouping>
}
 80030aa:	bf00      	nop
 80030ac:	3708      	adds	r7, #8
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80030b2:	b580      	push	{r7, lr}
 80030b4:	b086      	sub	sp, #24
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	4603      	mov	r3, r0
 80030ba:	60b9      	str	r1, [r7, #8]
 80030bc:	607a      	str	r2, [r7, #4]
 80030be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80030c0:	2300      	movs	r3, #0
 80030c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030c4:	f7ff ff3e 	bl	8002f44 <__NVIC_GetPriorityGrouping>
 80030c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	68b9      	ldr	r1, [r7, #8]
 80030ce:	6978      	ldr	r0, [r7, #20]
 80030d0:	f7ff ff8e 	bl	8002ff0 <NVIC_EncodePriority>
 80030d4:	4602      	mov	r2, r0
 80030d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030da:	4611      	mov	r1, r2
 80030dc:	4618      	mov	r0, r3
 80030de:	f7ff ff5d 	bl	8002f9c <__NVIC_SetPriority>
}
 80030e2:	bf00      	nop
 80030e4:	3718      	adds	r7, #24
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}

080030ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030ea:	b580      	push	{r7, lr}
 80030ec:	b082      	sub	sp, #8
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	4603      	mov	r3, r0
 80030f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030f8:	4618      	mov	r0, r3
 80030fa:	f7ff ff31 	bl	8002f60 <__NVIC_EnableIRQ>
}
 80030fe:	bf00      	nop
 8003100:	3708      	adds	r7, #8
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}

08003106 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003106:	b580      	push	{r7, lr}
 8003108:	b082      	sub	sp, #8
 800310a:	af00      	add	r7, sp, #0
 800310c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f7ff ffa2 	bl	8003058 <SysTick_Config>
 8003114:	4603      	mov	r3, r0
}
 8003116:	4618      	mov	r0, r3
 8003118:	3708      	adds	r7, #8
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
	...

08003120 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b086      	sub	sp, #24
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003128:	2300      	movs	r3, #0
 800312a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800312c:	f7ff feb6 	bl	8002e9c <HAL_GetTick>
 8003130:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d101      	bne.n	800313c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e099      	b.n	8003270 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2202      	movs	r2, #2
 8003140:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2200      	movs	r2, #0
 8003148:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f022 0201 	bic.w	r2, r2, #1
 800315a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800315c:	e00f      	b.n	800317e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800315e:	f7ff fe9d 	bl	8002e9c <HAL_GetTick>
 8003162:	4602      	mov	r2, r0
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	2b05      	cmp	r3, #5
 800316a:	d908      	bls.n	800317e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2220      	movs	r2, #32
 8003170:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2203      	movs	r2, #3
 8003176:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e078      	b.n	8003270 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0301 	and.w	r3, r3, #1
 8003188:	2b00      	cmp	r3, #0
 800318a:	d1e8      	bne.n	800315e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003194:	697a      	ldr	r2, [r7, #20]
 8003196:	4b38      	ldr	r3, [pc, #224]	; (8003278 <HAL_DMA_Init+0x158>)
 8003198:	4013      	ands	r3, r2
 800319a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	685a      	ldr	r2, [r3, #4]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	691b      	ldr	r3, [r3, #16]
 80031b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	699b      	ldr	r3, [r3, #24]
 80031bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6a1b      	ldr	r3, [r3, #32]
 80031c8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031ca:	697a      	ldr	r2, [r7, #20]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d4:	2b04      	cmp	r3, #4
 80031d6:	d107      	bne.n	80031e8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e0:	4313      	orrs	r3, r2
 80031e2:	697a      	ldr	r2, [r7, #20]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	697a      	ldr	r2, [r7, #20]
 80031ee:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	695b      	ldr	r3, [r3, #20]
 80031f6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	f023 0307 	bic.w	r3, r3, #7
 80031fe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003204:	697a      	ldr	r2, [r7, #20]
 8003206:	4313      	orrs	r3, r2
 8003208:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320e:	2b04      	cmp	r3, #4
 8003210:	d117      	bne.n	8003242 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003216:	697a      	ldr	r2, [r7, #20]
 8003218:	4313      	orrs	r3, r2
 800321a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003220:	2b00      	cmp	r3, #0
 8003222:	d00e      	beq.n	8003242 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f000 fb0f 	bl	8003848 <DMA_CheckFifoParam>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d008      	beq.n	8003242 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2240      	movs	r2, #64	; 0x40
 8003234:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2201      	movs	r2, #1
 800323a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800323e:	2301      	movs	r3, #1
 8003240:	e016      	b.n	8003270 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	697a      	ldr	r2, [r7, #20]
 8003248:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f000 fac6 	bl	80037dc <DMA_CalcBaseAndBitshift>
 8003250:	4603      	mov	r3, r0
 8003252:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003258:	223f      	movs	r2, #63	; 0x3f
 800325a:	409a      	lsls	r2, r3
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2201      	movs	r2, #1
 800326a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800326e:	2300      	movs	r3, #0
}
 8003270:	4618      	mov	r0, r3
 8003272:	3718      	adds	r7, #24
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}
 8003278:	f010803f 	.word	0xf010803f

0800327c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b086      	sub	sp, #24
 8003280:	af00      	add	r7, sp, #0
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	60b9      	str	r1, [r7, #8]
 8003286:	607a      	str	r2, [r7, #4]
 8003288:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800328a:	2300      	movs	r3, #0
 800328c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003292:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800329a:	2b01      	cmp	r3, #1
 800329c:	d101      	bne.n	80032a2 <HAL_DMA_Start_IT+0x26>
 800329e:	2302      	movs	r3, #2
 80032a0:	e040      	b.n	8003324 <HAL_DMA_Start_IT+0xa8>
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2201      	movs	r2, #1
 80032a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d12f      	bne.n	8003316 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2202      	movs	r2, #2
 80032ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2200      	movs	r2, #0
 80032c2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	68b9      	ldr	r1, [r7, #8]
 80032ca:	68f8      	ldr	r0, [r7, #12]
 80032cc:	f000 fa58 	bl	8003780 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032d4:	223f      	movs	r2, #63	; 0x3f
 80032d6:	409a      	lsls	r2, r3
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f042 0216 	orr.w	r2, r2, #22
 80032ea:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d007      	beq.n	8003304 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f042 0208 	orr.w	r2, r2, #8
 8003302:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f042 0201 	orr.w	r2, r2, #1
 8003312:	601a      	str	r2, [r3, #0]
 8003314:	e005      	b.n	8003322 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800331e:	2302      	movs	r3, #2
 8003320:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003322:	7dfb      	ldrb	r3, [r7, #23]
}
 8003324:	4618      	mov	r0, r3
 8003326:	3718      	adds	r7, #24
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}

0800332c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b084      	sub	sp, #16
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003338:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800333a:	f7ff fdaf 	bl	8002e9c <HAL_GetTick>
 800333e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003346:	b2db      	uxtb	r3, r3
 8003348:	2b02      	cmp	r3, #2
 800334a:	d008      	beq.n	800335e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2280      	movs	r2, #128	; 0x80
 8003350:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e052      	b.n	8003404 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f022 0216 	bic.w	r2, r2, #22
 800336c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	695a      	ldr	r2, [r3, #20]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800337c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003382:	2b00      	cmp	r3, #0
 8003384:	d103      	bne.n	800338e <HAL_DMA_Abort+0x62>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800338a:	2b00      	cmp	r3, #0
 800338c:	d007      	beq.n	800339e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f022 0208 	bic.w	r2, r2, #8
 800339c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f022 0201 	bic.w	r2, r2, #1
 80033ac:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80033ae:	e013      	b.n	80033d8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80033b0:	f7ff fd74 	bl	8002e9c <HAL_GetTick>
 80033b4:	4602      	mov	r2, r0
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	2b05      	cmp	r3, #5
 80033bc:	d90c      	bls.n	80033d8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2220      	movs	r2, #32
 80033c2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2203      	movs	r2, #3
 80033c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80033d4:	2303      	movs	r3, #3
 80033d6:	e015      	b.n	8003404 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0301 	and.w	r3, r3, #1
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d1e4      	bne.n	80033b0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ea:	223f      	movs	r2, #63	; 0x3f
 80033ec:	409a      	lsls	r2, r3
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2201      	movs	r2, #1
 80033f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003402:	2300      	movs	r3, #0
}
 8003404:	4618      	mov	r0, r3
 8003406:	3710      	adds	r7, #16
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}

0800340c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800341a:	b2db      	uxtb	r3, r3
 800341c:	2b02      	cmp	r3, #2
 800341e:	d004      	beq.n	800342a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2280      	movs	r2, #128	; 0x80
 8003424:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e00c      	b.n	8003444 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2205      	movs	r2, #5
 800342e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f022 0201 	bic.w	r2, r2, #1
 8003440:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003442:	2300      	movs	r3, #0
}
 8003444:	4618      	mov	r0, r3
 8003446:	370c      	adds	r7, #12
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr

08003450 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b086      	sub	sp, #24
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003458:	2300      	movs	r3, #0
 800345a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800345c:	4b8e      	ldr	r3, [pc, #568]	; (8003698 <HAL_DMA_IRQHandler+0x248>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a8e      	ldr	r2, [pc, #568]	; (800369c <HAL_DMA_IRQHandler+0x24c>)
 8003462:	fba2 2303 	umull	r2, r3, r2, r3
 8003466:	0a9b      	lsrs	r3, r3, #10
 8003468:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800346e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800347a:	2208      	movs	r2, #8
 800347c:	409a      	lsls	r2, r3
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	4013      	ands	r3, r2
 8003482:	2b00      	cmp	r3, #0
 8003484:	d01a      	beq.n	80034bc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0304 	and.w	r3, r3, #4
 8003490:	2b00      	cmp	r3, #0
 8003492:	d013      	beq.n	80034bc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f022 0204 	bic.w	r2, r2, #4
 80034a2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034a8:	2208      	movs	r2, #8
 80034aa:	409a      	lsls	r2, r3
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034b4:	f043 0201 	orr.w	r2, r3, #1
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034c0:	2201      	movs	r2, #1
 80034c2:	409a      	lsls	r2, r3
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	4013      	ands	r3, r2
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d012      	beq.n	80034f2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	695b      	ldr	r3, [r3, #20]
 80034d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d00b      	beq.n	80034f2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034de:	2201      	movs	r2, #1
 80034e0:	409a      	lsls	r2, r3
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ea:	f043 0202 	orr.w	r2, r3, #2
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034f6:	2204      	movs	r2, #4
 80034f8:	409a      	lsls	r2, r3
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	4013      	ands	r3, r2
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d012      	beq.n	8003528 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0302 	and.w	r3, r3, #2
 800350c:	2b00      	cmp	r3, #0
 800350e:	d00b      	beq.n	8003528 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003514:	2204      	movs	r2, #4
 8003516:	409a      	lsls	r2, r3
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003520:	f043 0204 	orr.w	r2, r3, #4
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800352c:	2210      	movs	r2, #16
 800352e:	409a      	lsls	r2, r3
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	4013      	ands	r3, r2
 8003534:	2b00      	cmp	r3, #0
 8003536:	d043      	beq.n	80035c0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0308 	and.w	r3, r3, #8
 8003542:	2b00      	cmp	r3, #0
 8003544:	d03c      	beq.n	80035c0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800354a:	2210      	movs	r2, #16
 800354c:	409a      	lsls	r2, r3
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800355c:	2b00      	cmp	r3, #0
 800355e:	d018      	beq.n	8003592 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d108      	bne.n	8003580 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003572:	2b00      	cmp	r3, #0
 8003574:	d024      	beq.n	80035c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	4798      	blx	r3
 800357e:	e01f      	b.n	80035c0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003584:	2b00      	cmp	r3, #0
 8003586:	d01b      	beq.n	80035c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	4798      	blx	r3
 8003590:	e016      	b.n	80035c0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800359c:	2b00      	cmp	r3, #0
 800359e:	d107      	bne.n	80035b0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f022 0208 	bic.w	r2, r2, #8
 80035ae:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d003      	beq.n	80035c0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035c4:	2220      	movs	r2, #32
 80035c6:	409a      	lsls	r2, r3
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	4013      	ands	r3, r2
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	f000 808f 	beq.w	80036f0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0310 	and.w	r3, r3, #16
 80035dc:	2b00      	cmp	r3, #0
 80035de:	f000 8087 	beq.w	80036f0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035e6:	2220      	movs	r2, #32
 80035e8:	409a      	lsls	r2, r3
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	2b05      	cmp	r3, #5
 80035f8:	d136      	bne.n	8003668 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f022 0216 	bic.w	r2, r2, #22
 8003608:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	695a      	ldr	r2, [r3, #20]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003618:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361e:	2b00      	cmp	r3, #0
 8003620:	d103      	bne.n	800362a <HAL_DMA_IRQHandler+0x1da>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003626:	2b00      	cmp	r3, #0
 8003628:	d007      	beq.n	800363a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f022 0208 	bic.w	r2, r2, #8
 8003638:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800363e:	223f      	movs	r2, #63	; 0x3f
 8003640:	409a      	lsls	r2, r3
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2201      	movs	r2, #1
 800364a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800365a:	2b00      	cmp	r3, #0
 800365c:	d07e      	beq.n	800375c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	4798      	blx	r3
        }
        return;
 8003666:	e079      	b.n	800375c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d01d      	beq.n	80036b2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003680:	2b00      	cmp	r3, #0
 8003682:	d10d      	bne.n	80036a0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003688:	2b00      	cmp	r3, #0
 800368a:	d031      	beq.n	80036f0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	4798      	blx	r3
 8003694:	e02c      	b.n	80036f0 <HAL_DMA_IRQHandler+0x2a0>
 8003696:	bf00      	nop
 8003698:	20000004 	.word	0x20000004
 800369c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d023      	beq.n	80036f0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	4798      	blx	r3
 80036b0:	e01e      	b.n	80036f0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d10f      	bne.n	80036e0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f022 0210 	bic.w	r2, r2, #16
 80036ce:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d003      	beq.n	80036f0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d032      	beq.n	800375e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036fc:	f003 0301 	and.w	r3, r3, #1
 8003700:	2b00      	cmp	r3, #0
 8003702:	d022      	beq.n	800374a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2205      	movs	r2, #5
 8003708:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f022 0201 	bic.w	r2, r2, #1
 800371a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	3301      	adds	r3, #1
 8003720:	60bb      	str	r3, [r7, #8]
 8003722:	697a      	ldr	r2, [r7, #20]
 8003724:	429a      	cmp	r2, r3
 8003726:	d307      	bcc.n	8003738 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0301 	and.w	r3, r3, #1
 8003732:	2b00      	cmp	r3, #0
 8003734:	d1f2      	bne.n	800371c <HAL_DMA_IRQHandler+0x2cc>
 8003736:	e000      	b.n	800373a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003738:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2201      	movs	r2, #1
 800373e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800374e:	2b00      	cmp	r3, #0
 8003750:	d005      	beq.n	800375e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	4798      	blx	r3
 800375a:	e000      	b.n	800375e <HAL_DMA_IRQHandler+0x30e>
        return;
 800375c:	bf00      	nop
    }
  }
}
 800375e:	3718      	adds	r7, #24
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}

08003764 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003772:	b2db      	uxtb	r3, r3
}
 8003774:	4618      	mov	r0, r3
 8003776:	370c      	adds	r7, #12
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr

08003780 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003780:	b480      	push	{r7}
 8003782:	b085      	sub	sp, #20
 8003784:	af00      	add	r7, sp, #0
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	60b9      	str	r1, [r7, #8]
 800378a:	607a      	str	r2, [r7, #4]
 800378c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800379c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	683a      	ldr	r2, [r7, #0]
 80037a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	2b40      	cmp	r3, #64	; 0x40
 80037ac:	d108      	bne.n	80037c0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	68ba      	ldr	r2, [r7, #8]
 80037bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80037be:	e007      	b.n	80037d0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	68ba      	ldr	r2, [r7, #8]
 80037c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	60da      	str	r2, [r3, #12]
}
 80037d0:	bf00      	nop
 80037d2:	3714      	adds	r7, #20
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr

080037dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80037dc:	b480      	push	{r7}
 80037de:	b085      	sub	sp, #20
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	3b10      	subs	r3, #16
 80037ec:	4a14      	ldr	r2, [pc, #80]	; (8003840 <DMA_CalcBaseAndBitshift+0x64>)
 80037ee:	fba2 2303 	umull	r2, r3, r2, r3
 80037f2:	091b      	lsrs	r3, r3, #4
 80037f4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80037f6:	4a13      	ldr	r2, [pc, #76]	; (8003844 <DMA_CalcBaseAndBitshift+0x68>)
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	4413      	add	r3, r2
 80037fc:	781b      	ldrb	r3, [r3, #0]
 80037fe:	461a      	mov	r2, r3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2b03      	cmp	r3, #3
 8003808:	d909      	bls.n	800381e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003812:	f023 0303 	bic.w	r3, r3, #3
 8003816:	1d1a      	adds	r2, r3, #4
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	659a      	str	r2, [r3, #88]	; 0x58
 800381c:	e007      	b.n	800382e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003826:	f023 0303 	bic.w	r3, r3, #3
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003832:	4618      	mov	r0, r3
 8003834:	3714      	adds	r7, #20
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr
 800383e:	bf00      	nop
 8003840:	aaaaaaab 	.word	0xaaaaaaab
 8003844:	0800cf50 	.word	0x0800cf50

08003848 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003848:	b480      	push	{r7}
 800384a:	b085      	sub	sp, #20
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003850:	2300      	movs	r3, #0
 8003852:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003858:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	699b      	ldr	r3, [r3, #24]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d11f      	bne.n	80038a2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	2b03      	cmp	r3, #3
 8003866:	d856      	bhi.n	8003916 <DMA_CheckFifoParam+0xce>
 8003868:	a201      	add	r2, pc, #4	; (adr r2, 8003870 <DMA_CheckFifoParam+0x28>)
 800386a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800386e:	bf00      	nop
 8003870:	08003881 	.word	0x08003881
 8003874:	08003893 	.word	0x08003893
 8003878:	08003881 	.word	0x08003881
 800387c:	08003917 	.word	0x08003917
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003884:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003888:	2b00      	cmp	r3, #0
 800388a:	d046      	beq.n	800391a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003890:	e043      	b.n	800391a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003896:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800389a:	d140      	bne.n	800391e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038a0:	e03d      	b.n	800391e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	699b      	ldr	r3, [r3, #24]
 80038a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038aa:	d121      	bne.n	80038f0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	2b03      	cmp	r3, #3
 80038b0:	d837      	bhi.n	8003922 <DMA_CheckFifoParam+0xda>
 80038b2:	a201      	add	r2, pc, #4	; (adr r2, 80038b8 <DMA_CheckFifoParam+0x70>)
 80038b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038b8:	080038c9 	.word	0x080038c9
 80038bc:	080038cf 	.word	0x080038cf
 80038c0:	080038c9 	.word	0x080038c9
 80038c4:	080038e1 	.word	0x080038e1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	73fb      	strb	r3, [r7, #15]
      break;
 80038cc:	e030      	b.n	8003930 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d025      	beq.n	8003926 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038de:	e022      	b.n	8003926 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80038e8:	d11f      	bne.n	800392a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80038ee:	e01c      	b.n	800392a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	2b02      	cmp	r3, #2
 80038f4:	d903      	bls.n	80038fe <DMA_CheckFifoParam+0xb6>
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	2b03      	cmp	r3, #3
 80038fa:	d003      	beq.n	8003904 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80038fc:	e018      	b.n	8003930 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	73fb      	strb	r3, [r7, #15]
      break;
 8003902:	e015      	b.n	8003930 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003908:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d00e      	beq.n	800392e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	73fb      	strb	r3, [r7, #15]
      break;
 8003914:	e00b      	b.n	800392e <DMA_CheckFifoParam+0xe6>
      break;
 8003916:	bf00      	nop
 8003918:	e00a      	b.n	8003930 <DMA_CheckFifoParam+0xe8>
      break;
 800391a:	bf00      	nop
 800391c:	e008      	b.n	8003930 <DMA_CheckFifoParam+0xe8>
      break;
 800391e:	bf00      	nop
 8003920:	e006      	b.n	8003930 <DMA_CheckFifoParam+0xe8>
      break;
 8003922:	bf00      	nop
 8003924:	e004      	b.n	8003930 <DMA_CheckFifoParam+0xe8>
      break;
 8003926:	bf00      	nop
 8003928:	e002      	b.n	8003930 <DMA_CheckFifoParam+0xe8>
      break;   
 800392a:	bf00      	nop
 800392c:	e000      	b.n	8003930 <DMA_CheckFifoParam+0xe8>
      break;
 800392e:	bf00      	nop
    }
  } 
  
  return status; 
 8003930:	7bfb      	ldrb	r3, [r7, #15]
}
 8003932:	4618      	mov	r0, r3
 8003934:	3714      	adds	r7, #20
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr
 800393e:	bf00      	nop

08003940 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003940:	b480      	push	{r7}
 8003942:	b089      	sub	sp, #36	; 0x24
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800394a:	2300      	movs	r3, #0
 800394c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800394e:	2300      	movs	r3, #0
 8003950:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003952:	2300      	movs	r3, #0
 8003954:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003956:	2300      	movs	r3, #0
 8003958:	61fb      	str	r3, [r7, #28]
 800395a:	e159      	b.n	8003c10 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800395c:	2201      	movs	r2, #1
 800395e:	69fb      	ldr	r3, [r7, #28]
 8003960:	fa02 f303 	lsl.w	r3, r2, r3
 8003964:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	697a      	ldr	r2, [r7, #20]
 800396c:	4013      	ands	r3, r2
 800396e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003970:	693a      	ldr	r2, [r7, #16]
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	429a      	cmp	r2, r3
 8003976:	f040 8148 	bne.w	8003c0a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	f003 0303 	and.w	r3, r3, #3
 8003982:	2b01      	cmp	r3, #1
 8003984:	d005      	beq.n	8003992 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800398e:	2b02      	cmp	r3, #2
 8003990:	d130      	bne.n	80039f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	005b      	lsls	r3, r3, #1
 800399c:	2203      	movs	r2, #3
 800399e:	fa02 f303 	lsl.w	r3, r2, r3
 80039a2:	43db      	mvns	r3, r3
 80039a4:	69ba      	ldr	r2, [r7, #24]
 80039a6:	4013      	ands	r3, r2
 80039a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	68da      	ldr	r2, [r3, #12]
 80039ae:	69fb      	ldr	r3, [r7, #28]
 80039b0:	005b      	lsls	r3, r3, #1
 80039b2:	fa02 f303 	lsl.w	r3, r2, r3
 80039b6:	69ba      	ldr	r2, [r7, #24]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	69ba      	ldr	r2, [r7, #24]
 80039c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80039c8:	2201      	movs	r2, #1
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	fa02 f303 	lsl.w	r3, r2, r3
 80039d0:	43db      	mvns	r3, r3
 80039d2:	69ba      	ldr	r2, [r7, #24]
 80039d4:	4013      	ands	r3, r2
 80039d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	091b      	lsrs	r3, r3, #4
 80039de:	f003 0201 	and.w	r2, r3, #1
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	fa02 f303 	lsl.w	r3, r2, r3
 80039e8:	69ba      	ldr	r2, [r7, #24]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	69ba      	ldr	r2, [r7, #24]
 80039f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	f003 0303 	and.w	r3, r3, #3
 80039fc:	2b03      	cmp	r3, #3
 80039fe:	d017      	beq.n	8003a30 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	005b      	lsls	r3, r3, #1
 8003a0a:	2203      	movs	r2, #3
 8003a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a10:	43db      	mvns	r3, r3
 8003a12:	69ba      	ldr	r2, [r7, #24]
 8003a14:	4013      	ands	r3, r2
 8003a16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	689a      	ldr	r2, [r3, #8]
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	005b      	lsls	r3, r3, #1
 8003a20:	fa02 f303 	lsl.w	r3, r2, r3
 8003a24:	69ba      	ldr	r2, [r7, #24]
 8003a26:	4313      	orrs	r3, r2
 8003a28:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	69ba      	ldr	r2, [r7, #24]
 8003a2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f003 0303 	and.w	r3, r3, #3
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	d123      	bne.n	8003a84 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	08da      	lsrs	r2, r3, #3
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	3208      	adds	r2, #8
 8003a44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a48:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	f003 0307 	and.w	r3, r3, #7
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	220f      	movs	r2, #15
 8003a54:	fa02 f303 	lsl.w	r3, r2, r3
 8003a58:	43db      	mvns	r3, r3
 8003a5a:	69ba      	ldr	r2, [r7, #24]
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	691a      	ldr	r2, [r3, #16]
 8003a64:	69fb      	ldr	r3, [r7, #28]
 8003a66:	f003 0307 	and.w	r3, r3, #7
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a70:	69ba      	ldr	r2, [r7, #24]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	08da      	lsrs	r2, r3, #3
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	3208      	adds	r2, #8
 8003a7e:	69b9      	ldr	r1, [r7, #24]
 8003a80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	005b      	lsls	r3, r3, #1
 8003a8e:	2203      	movs	r2, #3
 8003a90:	fa02 f303 	lsl.w	r3, r2, r3
 8003a94:	43db      	mvns	r3, r3
 8003a96:	69ba      	ldr	r2, [r7, #24]
 8003a98:	4013      	ands	r3, r2
 8003a9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	f003 0203 	and.w	r2, r3, #3
 8003aa4:	69fb      	ldr	r3, [r7, #28]
 8003aa6:	005b      	lsls	r3, r3, #1
 8003aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8003aac:	69ba      	ldr	r2, [r7, #24]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	69ba      	ldr	r2, [r7, #24]
 8003ab6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	f000 80a2 	beq.w	8003c0a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	60fb      	str	r3, [r7, #12]
 8003aca:	4b57      	ldr	r3, [pc, #348]	; (8003c28 <HAL_GPIO_Init+0x2e8>)
 8003acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ace:	4a56      	ldr	r2, [pc, #344]	; (8003c28 <HAL_GPIO_Init+0x2e8>)
 8003ad0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ad4:	6453      	str	r3, [r2, #68]	; 0x44
 8003ad6:	4b54      	ldr	r3, [pc, #336]	; (8003c28 <HAL_GPIO_Init+0x2e8>)
 8003ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ada:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ade:	60fb      	str	r3, [r7, #12]
 8003ae0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003ae2:	4a52      	ldr	r2, [pc, #328]	; (8003c2c <HAL_GPIO_Init+0x2ec>)
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	089b      	lsrs	r3, r3, #2
 8003ae8:	3302      	adds	r3, #2
 8003aea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003aee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	f003 0303 	and.w	r3, r3, #3
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	220f      	movs	r2, #15
 8003afa:	fa02 f303 	lsl.w	r3, r2, r3
 8003afe:	43db      	mvns	r3, r3
 8003b00:	69ba      	ldr	r2, [r7, #24]
 8003b02:	4013      	ands	r3, r2
 8003b04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a49      	ldr	r2, [pc, #292]	; (8003c30 <HAL_GPIO_Init+0x2f0>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d019      	beq.n	8003b42 <HAL_GPIO_Init+0x202>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a48      	ldr	r2, [pc, #288]	; (8003c34 <HAL_GPIO_Init+0x2f4>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d013      	beq.n	8003b3e <HAL_GPIO_Init+0x1fe>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a47      	ldr	r2, [pc, #284]	; (8003c38 <HAL_GPIO_Init+0x2f8>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d00d      	beq.n	8003b3a <HAL_GPIO_Init+0x1fa>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a46      	ldr	r2, [pc, #280]	; (8003c3c <HAL_GPIO_Init+0x2fc>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d007      	beq.n	8003b36 <HAL_GPIO_Init+0x1f6>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a45      	ldr	r2, [pc, #276]	; (8003c40 <HAL_GPIO_Init+0x300>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d101      	bne.n	8003b32 <HAL_GPIO_Init+0x1f2>
 8003b2e:	2304      	movs	r3, #4
 8003b30:	e008      	b.n	8003b44 <HAL_GPIO_Init+0x204>
 8003b32:	2307      	movs	r3, #7
 8003b34:	e006      	b.n	8003b44 <HAL_GPIO_Init+0x204>
 8003b36:	2303      	movs	r3, #3
 8003b38:	e004      	b.n	8003b44 <HAL_GPIO_Init+0x204>
 8003b3a:	2302      	movs	r3, #2
 8003b3c:	e002      	b.n	8003b44 <HAL_GPIO_Init+0x204>
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e000      	b.n	8003b44 <HAL_GPIO_Init+0x204>
 8003b42:	2300      	movs	r3, #0
 8003b44:	69fa      	ldr	r2, [r7, #28]
 8003b46:	f002 0203 	and.w	r2, r2, #3
 8003b4a:	0092      	lsls	r2, r2, #2
 8003b4c:	4093      	lsls	r3, r2
 8003b4e:	69ba      	ldr	r2, [r7, #24]
 8003b50:	4313      	orrs	r3, r2
 8003b52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b54:	4935      	ldr	r1, [pc, #212]	; (8003c2c <HAL_GPIO_Init+0x2ec>)
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	089b      	lsrs	r3, r3, #2
 8003b5a:	3302      	adds	r3, #2
 8003b5c:	69ba      	ldr	r2, [r7, #24]
 8003b5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b62:	4b38      	ldr	r3, [pc, #224]	; (8003c44 <HAL_GPIO_Init+0x304>)
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	43db      	mvns	r3, r3
 8003b6c:	69ba      	ldr	r2, [r7, #24]
 8003b6e:	4013      	ands	r3, r2
 8003b70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d003      	beq.n	8003b86 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003b7e:	69ba      	ldr	r2, [r7, #24]
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003b86:	4a2f      	ldr	r2, [pc, #188]	; (8003c44 <HAL_GPIO_Init+0x304>)
 8003b88:	69bb      	ldr	r3, [r7, #24]
 8003b8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b8c:	4b2d      	ldr	r3, [pc, #180]	; (8003c44 <HAL_GPIO_Init+0x304>)
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	43db      	mvns	r3, r3
 8003b96:	69ba      	ldr	r2, [r7, #24]
 8003b98:	4013      	ands	r3, r2
 8003b9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d003      	beq.n	8003bb0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003ba8:	69ba      	ldr	r2, [r7, #24]
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003bb0:	4a24      	ldr	r2, [pc, #144]	; (8003c44 <HAL_GPIO_Init+0x304>)
 8003bb2:	69bb      	ldr	r3, [r7, #24]
 8003bb4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003bb6:	4b23      	ldr	r3, [pc, #140]	; (8003c44 <HAL_GPIO_Init+0x304>)
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	43db      	mvns	r3, r3
 8003bc0:	69ba      	ldr	r2, [r7, #24]
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d003      	beq.n	8003bda <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003bd2:	69ba      	ldr	r2, [r7, #24]
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003bda:	4a1a      	ldr	r2, [pc, #104]	; (8003c44 <HAL_GPIO_Init+0x304>)
 8003bdc:	69bb      	ldr	r3, [r7, #24]
 8003bde:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003be0:	4b18      	ldr	r3, [pc, #96]	; (8003c44 <HAL_GPIO_Init+0x304>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	43db      	mvns	r3, r3
 8003bea:	69ba      	ldr	r2, [r7, #24]
 8003bec:	4013      	ands	r3, r2
 8003bee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d003      	beq.n	8003c04 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003bfc:	69ba      	ldr	r2, [r7, #24]
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	4313      	orrs	r3, r2
 8003c02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c04:	4a0f      	ldr	r2, [pc, #60]	; (8003c44 <HAL_GPIO_Init+0x304>)
 8003c06:	69bb      	ldr	r3, [r7, #24]
 8003c08:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	3301      	adds	r3, #1
 8003c0e:	61fb      	str	r3, [r7, #28]
 8003c10:	69fb      	ldr	r3, [r7, #28]
 8003c12:	2b0f      	cmp	r3, #15
 8003c14:	f67f aea2 	bls.w	800395c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003c18:	bf00      	nop
 8003c1a:	bf00      	nop
 8003c1c:	3724      	adds	r7, #36	; 0x24
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr
 8003c26:	bf00      	nop
 8003c28:	40023800 	.word	0x40023800
 8003c2c:	40013800 	.word	0x40013800
 8003c30:	40020000 	.word	0x40020000
 8003c34:	40020400 	.word	0x40020400
 8003c38:	40020800 	.word	0x40020800
 8003c3c:	40020c00 	.word	0x40020c00
 8003c40:	40021000 	.word	0x40021000
 8003c44:	40013c00 	.word	0x40013c00

08003c48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b083      	sub	sp, #12
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
 8003c50:	460b      	mov	r3, r1
 8003c52:	807b      	strh	r3, [r7, #2]
 8003c54:	4613      	mov	r3, r2
 8003c56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c58:	787b      	ldrb	r3, [r7, #1]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d003      	beq.n	8003c66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c5e:	887a      	ldrh	r2, [r7, #2]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003c64:	e003      	b.n	8003c6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003c66:	887b      	ldrh	r3, [r7, #2]
 8003c68:	041a      	lsls	r2, r3, #16
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	619a      	str	r2, [r3, #24]
}
 8003c6e:	bf00      	nop
 8003c70:	370c      	adds	r7, #12
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr

08003c7a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003c7a:	b480      	push	{r7}
 8003c7c:	b085      	sub	sp, #20
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
 8003c82:	460b      	mov	r3, r1
 8003c84:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	695b      	ldr	r3, [r3, #20]
 8003c8a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003c8c:	887a      	ldrh	r2, [r7, #2]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	4013      	ands	r3, r2
 8003c92:	041a      	lsls	r2, r3, #16
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	43d9      	mvns	r1, r3
 8003c98:	887b      	ldrh	r3, [r7, #2]
 8003c9a:	400b      	ands	r3, r1
 8003c9c:	431a      	orrs	r2, r3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	619a      	str	r2, [r3, #24]
}
 8003ca2:	bf00      	nop
 8003ca4:	3714      	adds	r7, #20
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr
	...

08003cb0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b082      	sub	sp, #8
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003cba:	4b08      	ldr	r3, [pc, #32]	; (8003cdc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003cbc:	695a      	ldr	r2, [r3, #20]
 8003cbe:	88fb      	ldrh	r3, [r7, #6]
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d006      	beq.n	8003cd4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003cc6:	4a05      	ldr	r2, [pc, #20]	; (8003cdc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003cc8:	88fb      	ldrh	r3, [r7, #6]
 8003cca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003ccc:	88fb      	ldrh	r3, [r7, #6]
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f7fd feca 	bl	8001a68 <HAL_GPIO_EXTI_Callback>
  }
}
 8003cd4:	bf00      	nop
 8003cd6:	3708      	adds	r7, #8
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	40013c00 	.word	0x40013c00

08003ce0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b084      	sub	sp, #16
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d101      	bne.n	8003cf2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e12b      	b.n	8003f4a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d106      	bne.n	8003d0c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f7fd ff36 	bl	8001b78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2224      	movs	r2, #36	; 0x24
 8003d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f022 0201 	bic.w	r2, r2, #1
 8003d22:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d32:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d42:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003d44:	f003 f8d6 	bl	8006ef4 <HAL_RCC_GetPCLK1Freq>
 8003d48:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	4a81      	ldr	r2, [pc, #516]	; (8003f54 <HAL_I2C_Init+0x274>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d807      	bhi.n	8003d64 <HAL_I2C_Init+0x84>
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	4a80      	ldr	r2, [pc, #512]	; (8003f58 <HAL_I2C_Init+0x278>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	bf94      	ite	ls
 8003d5c:	2301      	movls	r3, #1
 8003d5e:	2300      	movhi	r3, #0
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	e006      	b.n	8003d72 <HAL_I2C_Init+0x92>
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	4a7d      	ldr	r2, [pc, #500]	; (8003f5c <HAL_I2C_Init+0x27c>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	bf94      	ite	ls
 8003d6c:	2301      	movls	r3, #1
 8003d6e:	2300      	movhi	r3, #0
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d001      	beq.n	8003d7a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e0e7      	b.n	8003f4a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	4a78      	ldr	r2, [pc, #480]	; (8003f60 <HAL_I2C_Init+0x280>)
 8003d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d82:	0c9b      	lsrs	r3, r3, #18
 8003d84:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	68ba      	ldr	r2, [r7, #8]
 8003d96:	430a      	orrs	r2, r1
 8003d98:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	6a1b      	ldr	r3, [r3, #32]
 8003da0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	4a6a      	ldr	r2, [pc, #424]	; (8003f54 <HAL_I2C_Init+0x274>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d802      	bhi.n	8003db4 <HAL_I2C_Init+0xd4>
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	3301      	adds	r3, #1
 8003db2:	e009      	b.n	8003dc8 <HAL_I2C_Init+0xe8>
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003dba:	fb02 f303 	mul.w	r3, r2, r3
 8003dbe:	4a69      	ldr	r2, [pc, #420]	; (8003f64 <HAL_I2C_Init+0x284>)
 8003dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8003dc4:	099b      	lsrs	r3, r3, #6
 8003dc6:	3301      	adds	r3, #1
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	6812      	ldr	r2, [r2, #0]
 8003dcc:	430b      	orrs	r3, r1
 8003dce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	69db      	ldr	r3, [r3, #28]
 8003dd6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003dda:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	495c      	ldr	r1, [pc, #368]	; (8003f54 <HAL_I2C_Init+0x274>)
 8003de4:	428b      	cmp	r3, r1
 8003de6:	d819      	bhi.n	8003e1c <HAL_I2C_Init+0x13c>
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	1e59      	subs	r1, r3, #1
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	005b      	lsls	r3, r3, #1
 8003df2:	fbb1 f3f3 	udiv	r3, r1, r3
 8003df6:	1c59      	adds	r1, r3, #1
 8003df8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003dfc:	400b      	ands	r3, r1
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d00a      	beq.n	8003e18 <HAL_I2C_Init+0x138>
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	1e59      	subs	r1, r3, #1
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	005b      	lsls	r3, r3, #1
 8003e0c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e10:	3301      	adds	r3, #1
 8003e12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e16:	e051      	b.n	8003ebc <HAL_I2C_Init+0x1dc>
 8003e18:	2304      	movs	r3, #4
 8003e1a:	e04f      	b.n	8003ebc <HAL_I2C_Init+0x1dc>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d111      	bne.n	8003e48 <HAL_I2C_Init+0x168>
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	1e58      	subs	r0, r3, #1
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6859      	ldr	r1, [r3, #4]
 8003e2c:	460b      	mov	r3, r1
 8003e2e:	005b      	lsls	r3, r3, #1
 8003e30:	440b      	add	r3, r1
 8003e32:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e36:	3301      	adds	r3, #1
 8003e38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	bf0c      	ite	eq
 8003e40:	2301      	moveq	r3, #1
 8003e42:	2300      	movne	r3, #0
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	e012      	b.n	8003e6e <HAL_I2C_Init+0x18e>
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	1e58      	subs	r0, r3, #1
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6859      	ldr	r1, [r3, #4]
 8003e50:	460b      	mov	r3, r1
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	440b      	add	r3, r1
 8003e56:	0099      	lsls	r1, r3, #2
 8003e58:	440b      	add	r3, r1
 8003e5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e5e:	3301      	adds	r3, #1
 8003e60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	bf0c      	ite	eq
 8003e68:	2301      	moveq	r3, #1
 8003e6a:	2300      	movne	r3, #0
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d001      	beq.n	8003e76 <HAL_I2C_Init+0x196>
 8003e72:	2301      	movs	r3, #1
 8003e74:	e022      	b.n	8003ebc <HAL_I2C_Init+0x1dc>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d10e      	bne.n	8003e9c <HAL_I2C_Init+0x1bc>
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	1e58      	subs	r0, r3, #1
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6859      	ldr	r1, [r3, #4]
 8003e86:	460b      	mov	r3, r1
 8003e88:	005b      	lsls	r3, r3, #1
 8003e8a:	440b      	add	r3, r1
 8003e8c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e90:	3301      	adds	r3, #1
 8003e92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e9a:	e00f      	b.n	8003ebc <HAL_I2C_Init+0x1dc>
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	1e58      	subs	r0, r3, #1
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6859      	ldr	r1, [r3, #4]
 8003ea4:	460b      	mov	r3, r1
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	440b      	add	r3, r1
 8003eaa:	0099      	lsls	r1, r3, #2
 8003eac:	440b      	add	r3, r1
 8003eae:	fbb0 f3f3 	udiv	r3, r0, r3
 8003eb2:	3301      	adds	r3, #1
 8003eb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003eb8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ebc:	6879      	ldr	r1, [r7, #4]
 8003ebe:	6809      	ldr	r1, [r1, #0]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	69da      	ldr	r2, [r3, #28]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a1b      	ldr	r3, [r3, #32]
 8003ed6:	431a      	orrs	r2, r3
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	430a      	orrs	r2, r1
 8003ede:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003eea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	6911      	ldr	r1, [r2, #16]
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	68d2      	ldr	r2, [r2, #12]
 8003ef6:	4311      	orrs	r1, r2
 8003ef8:	687a      	ldr	r2, [r7, #4]
 8003efa:	6812      	ldr	r2, [r2, #0]
 8003efc:	430b      	orrs	r3, r1
 8003efe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	695a      	ldr	r2, [r3, #20]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	699b      	ldr	r3, [r3, #24]
 8003f12:	431a      	orrs	r2, r3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	430a      	orrs	r2, r1
 8003f1a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f042 0201 	orr.w	r2, r2, #1
 8003f2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2220      	movs	r2, #32
 8003f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003f48:	2300      	movs	r3, #0
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3710      	adds	r7, #16
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	000186a0 	.word	0x000186a0
 8003f58:	001e847f 	.word	0x001e847f
 8003f5c:	003d08ff 	.word	0x003d08ff
 8003f60:	431bde83 	.word	0x431bde83
 8003f64:	10624dd3 	.word	0x10624dd3

08003f68 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b088      	sub	sp, #32
 8003f6c:	af02      	add	r7, sp, #8
 8003f6e:	60f8      	str	r0, [r7, #12]
 8003f70:	4608      	mov	r0, r1
 8003f72:	4611      	mov	r1, r2
 8003f74:	461a      	mov	r2, r3
 8003f76:	4603      	mov	r3, r0
 8003f78:	817b      	strh	r3, [r7, #10]
 8003f7a:	460b      	mov	r3, r1
 8003f7c:	813b      	strh	r3, [r7, #8]
 8003f7e:	4613      	mov	r3, r2
 8003f80:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003f82:	f7fe ff8b 	bl	8002e9c <HAL_GetTick>
 8003f86:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	2b20      	cmp	r3, #32
 8003f92:	f040 80d9 	bne.w	8004148 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	9300      	str	r3, [sp, #0]
 8003f9a:	2319      	movs	r3, #25
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	496d      	ldr	r1, [pc, #436]	; (8004154 <HAL_I2C_Mem_Write+0x1ec>)
 8003fa0:	68f8      	ldr	r0, [r7, #12]
 8003fa2:	f002 f90d 	bl	80061c0 <I2C_WaitOnFlagUntilTimeout>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d001      	beq.n	8003fb0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003fac:	2302      	movs	r3, #2
 8003fae:	e0cc      	b.n	800414a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d101      	bne.n	8003fbe <HAL_I2C_Mem_Write+0x56>
 8003fba:	2302      	movs	r3, #2
 8003fbc:	e0c5      	b.n	800414a <HAL_I2C_Mem_Write+0x1e2>
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 0301 	and.w	r3, r3, #1
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d007      	beq.n	8003fe4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f042 0201 	orr.w	r2, r2, #1
 8003fe2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ff2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2221      	movs	r2, #33	; 0x21
 8003ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2240      	movs	r2, #64	; 0x40
 8004000:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2200      	movs	r2, #0
 8004008:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	6a3a      	ldr	r2, [r7, #32]
 800400e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004014:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800401a:	b29a      	uxth	r2, r3
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	4a4d      	ldr	r2, [pc, #308]	; (8004158 <HAL_I2C_Mem_Write+0x1f0>)
 8004024:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004026:	88f8      	ldrh	r0, [r7, #6]
 8004028:	893a      	ldrh	r2, [r7, #8]
 800402a:	8979      	ldrh	r1, [r7, #10]
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	9301      	str	r3, [sp, #4]
 8004030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004032:	9300      	str	r3, [sp, #0]
 8004034:	4603      	mov	r3, r0
 8004036:	68f8      	ldr	r0, [r7, #12]
 8004038:	f001 fe9c 	bl	8005d74 <I2C_RequestMemoryWrite>
 800403c:	4603      	mov	r3, r0
 800403e:	2b00      	cmp	r3, #0
 8004040:	d052      	beq.n	80040e8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e081      	b.n	800414a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004046:	697a      	ldr	r2, [r7, #20]
 8004048:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800404a:	68f8      	ldr	r0, [r7, #12]
 800404c:	f002 f98e 	bl	800636c <I2C_WaitOnTXEFlagUntilTimeout>
 8004050:	4603      	mov	r3, r0
 8004052:	2b00      	cmp	r3, #0
 8004054:	d00d      	beq.n	8004072 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405a:	2b04      	cmp	r3, #4
 800405c:	d107      	bne.n	800406e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800406c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e06b      	b.n	800414a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004076:	781a      	ldrb	r2, [r3, #0]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004082:	1c5a      	adds	r2, r3, #1
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800408c:	3b01      	subs	r3, #1
 800408e:	b29a      	uxth	r2, r3
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004098:	b29b      	uxth	r3, r3
 800409a:	3b01      	subs	r3, #1
 800409c:	b29a      	uxth	r2, r3
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	695b      	ldr	r3, [r3, #20]
 80040a8:	f003 0304 	and.w	r3, r3, #4
 80040ac:	2b04      	cmp	r3, #4
 80040ae:	d11b      	bne.n	80040e8 <HAL_I2C_Mem_Write+0x180>
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d017      	beq.n	80040e8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040bc:	781a      	ldrb	r2, [r3, #0]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c8:	1c5a      	adds	r2, r3, #1
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040d2:	3b01      	subs	r3, #1
 80040d4:	b29a      	uxth	r2, r3
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040de:	b29b      	uxth	r3, r3
 80040e0:	3b01      	subs	r3, #1
 80040e2:	b29a      	uxth	r2, r3
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d1aa      	bne.n	8004046 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040f0:	697a      	ldr	r2, [r7, #20]
 80040f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80040f4:	68f8      	ldr	r0, [r7, #12]
 80040f6:	f002 f97a 	bl	80063ee <I2C_WaitOnBTFFlagUntilTimeout>
 80040fa:	4603      	mov	r3, r0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d00d      	beq.n	800411c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004104:	2b04      	cmp	r3, #4
 8004106:	d107      	bne.n	8004118 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004116:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	e016      	b.n	800414a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800412a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2220      	movs	r2, #32
 8004130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2200      	movs	r2, #0
 8004138:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2200      	movs	r2, #0
 8004140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004144:	2300      	movs	r3, #0
 8004146:	e000      	b.n	800414a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004148:	2302      	movs	r3, #2
  }
}
 800414a:	4618      	mov	r0, r3
 800414c:	3718      	adds	r7, #24
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}
 8004152:	bf00      	nop
 8004154:	00100002 	.word	0x00100002
 8004158:	ffff0000 	.word	0xffff0000

0800415c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b08c      	sub	sp, #48	; 0x30
 8004160:	af02      	add	r7, sp, #8
 8004162:	60f8      	str	r0, [r7, #12]
 8004164:	4608      	mov	r0, r1
 8004166:	4611      	mov	r1, r2
 8004168:	461a      	mov	r2, r3
 800416a:	4603      	mov	r3, r0
 800416c:	817b      	strh	r3, [r7, #10]
 800416e:	460b      	mov	r3, r1
 8004170:	813b      	strh	r3, [r7, #8]
 8004172:	4613      	mov	r3, r2
 8004174:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004176:	f7fe fe91 	bl	8002e9c <HAL_GetTick>
 800417a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004182:	b2db      	uxtb	r3, r3
 8004184:	2b20      	cmp	r3, #32
 8004186:	f040 8208 	bne.w	800459a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800418a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418c:	9300      	str	r3, [sp, #0]
 800418e:	2319      	movs	r3, #25
 8004190:	2201      	movs	r2, #1
 8004192:	497b      	ldr	r1, [pc, #492]	; (8004380 <HAL_I2C_Mem_Read+0x224>)
 8004194:	68f8      	ldr	r0, [r7, #12]
 8004196:	f002 f813 	bl	80061c0 <I2C_WaitOnFlagUntilTimeout>
 800419a:	4603      	mov	r3, r0
 800419c:	2b00      	cmp	r3, #0
 800419e:	d001      	beq.n	80041a4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80041a0:	2302      	movs	r3, #2
 80041a2:	e1fb      	b.n	800459c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d101      	bne.n	80041b2 <HAL_I2C_Mem_Read+0x56>
 80041ae:	2302      	movs	r3, #2
 80041b0:	e1f4      	b.n	800459c <HAL_I2C_Mem_Read+0x440>
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2201      	movs	r2, #1
 80041b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 0301 	and.w	r3, r3, #1
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d007      	beq.n	80041d8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f042 0201 	orr.w	r2, r2, #1
 80041d6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041e6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2222      	movs	r2, #34	; 0x22
 80041ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2240      	movs	r2, #64	; 0x40
 80041f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2200      	movs	r2, #0
 80041fc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004202:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004208:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800420e:	b29a      	uxth	r2, r3
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	4a5b      	ldr	r2, [pc, #364]	; (8004384 <HAL_I2C_Mem_Read+0x228>)
 8004218:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800421a:	88f8      	ldrh	r0, [r7, #6]
 800421c:	893a      	ldrh	r2, [r7, #8]
 800421e:	8979      	ldrh	r1, [r7, #10]
 8004220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004222:	9301      	str	r3, [sp, #4]
 8004224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004226:	9300      	str	r3, [sp, #0]
 8004228:	4603      	mov	r3, r0
 800422a:	68f8      	ldr	r0, [r7, #12]
 800422c:	f001 fe38 	bl	8005ea0 <I2C_RequestMemoryRead>
 8004230:	4603      	mov	r3, r0
 8004232:	2b00      	cmp	r3, #0
 8004234:	d001      	beq.n	800423a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e1b0      	b.n	800459c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800423e:	2b00      	cmp	r3, #0
 8004240:	d113      	bne.n	800426a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004242:	2300      	movs	r3, #0
 8004244:	623b      	str	r3, [r7, #32]
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	695b      	ldr	r3, [r3, #20]
 800424c:	623b      	str	r3, [r7, #32]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	699b      	ldr	r3, [r3, #24]
 8004254:	623b      	str	r3, [r7, #32]
 8004256:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004266:	601a      	str	r2, [r3, #0]
 8004268:	e184      	b.n	8004574 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800426e:	2b01      	cmp	r3, #1
 8004270:	d11b      	bne.n	80042aa <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004280:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004282:	2300      	movs	r3, #0
 8004284:	61fb      	str	r3, [r7, #28]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	695b      	ldr	r3, [r3, #20]
 800428c:	61fb      	str	r3, [r7, #28]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	699b      	ldr	r3, [r3, #24]
 8004294:	61fb      	str	r3, [r7, #28]
 8004296:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042a6:	601a      	str	r2, [r3, #0]
 80042a8:	e164      	b.n	8004574 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042ae:	2b02      	cmp	r3, #2
 80042b0:	d11b      	bne.n	80042ea <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042c0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042d2:	2300      	movs	r3, #0
 80042d4:	61bb      	str	r3, [r7, #24]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	695b      	ldr	r3, [r3, #20]
 80042dc:	61bb      	str	r3, [r7, #24]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	699b      	ldr	r3, [r3, #24]
 80042e4:	61bb      	str	r3, [r7, #24]
 80042e6:	69bb      	ldr	r3, [r7, #24]
 80042e8:	e144      	b.n	8004574 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042ea:	2300      	movs	r3, #0
 80042ec:	617b      	str	r3, [r7, #20]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	695b      	ldr	r3, [r3, #20]
 80042f4:	617b      	str	r3, [r7, #20]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	699b      	ldr	r3, [r3, #24]
 80042fc:	617b      	str	r3, [r7, #20]
 80042fe:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004300:	e138      	b.n	8004574 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004306:	2b03      	cmp	r3, #3
 8004308:	f200 80f1 	bhi.w	80044ee <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004310:	2b01      	cmp	r3, #1
 8004312:	d123      	bne.n	800435c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004314:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004316:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004318:	68f8      	ldr	r0, [r7, #12]
 800431a:	f002 f8db 	bl	80064d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800431e:	4603      	mov	r3, r0
 8004320:	2b00      	cmp	r3, #0
 8004322:	d001      	beq.n	8004328 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	e139      	b.n	800459c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	691a      	ldr	r2, [r3, #16]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004332:	b2d2      	uxtb	r2, r2
 8004334:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433a:	1c5a      	adds	r2, r3, #1
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004344:	3b01      	subs	r3, #1
 8004346:	b29a      	uxth	r2, r3
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004350:	b29b      	uxth	r3, r3
 8004352:	3b01      	subs	r3, #1
 8004354:	b29a      	uxth	r2, r3
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	855a      	strh	r2, [r3, #42]	; 0x2a
 800435a:	e10b      	b.n	8004574 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004360:	2b02      	cmp	r3, #2
 8004362:	d14e      	bne.n	8004402 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004366:	9300      	str	r3, [sp, #0]
 8004368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800436a:	2200      	movs	r2, #0
 800436c:	4906      	ldr	r1, [pc, #24]	; (8004388 <HAL_I2C_Mem_Read+0x22c>)
 800436e:	68f8      	ldr	r0, [r7, #12]
 8004370:	f001 ff26 	bl	80061c0 <I2C_WaitOnFlagUntilTimeout>
 8004374:	4603      	mov	r3, r0
 8004376:	2b00      	cmp	r3, #0
 8004378:	d008      	beq.n	800438c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e10e      	b.n	800459c <HAL_I2C_Mem_Read+0x440>
 800437e:	bf00      	nop
 8004380:	00100002 	.word	0x00100002
 8004384:	ffff0000 	.word	0xffff0000
 8004388:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800439a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	691a      	ldr	r2, [r3, #16]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a6:	b2d2      	uxtb	r2, r2
 80043a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ae:	1c5a      	adds	r2, r3, #1
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043b8:	3b01      	subs	r3, #1
 80043ba:	b29a      	uxth	r2, r3
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043c4:	b29b      	uxth	r3, r3
 80043c6:	3b01      	subs	r3, #1
 80043c8:	b29a      	uxth	r2, r3
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	691a      	ldr	r2, [r3, #16]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d8:	b2d2      	uxtb	r2, r2
 80043da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e0:	1c5a      	adds	r2, r3, #1
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043ea:	3b01      	subs	r3, #1
 80043ec:	b29a      	uxth	r2, r3
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	3b01      	subs	r3, #1
 80043fa:	b29a      	uxth	r2, r3
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004400:	e0b8      	b.n	8004574 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004404:	9300      	str	r3, [sp, #0]
 8004406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004408:	2200      	movs	r2, #0
 800440a:	4966      	ldr	r1, [pc, #408]	; (80045a4 <HAL_I2C_Mem_Read+0x448>)
 800440c:	68f8      	ldr	r0, [r7, #12]
 800440e:	f001 fed7 	bl	80061c0 <I2C_WaitOnFlagUntilTimeout>
 8004412:	4603      	mov	r3, r0
 8004414:	2b00      	cmp	r3, #0
 8004416:	d001      	beq.n	800441c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	e0bf      	b.n	800459c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800442a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	691a      	ldr	r2, [r3, #16]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004436:	b2d2      	uxtb	r2, r2
 8004438:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443e:	1c5a      	adds	r2, r3, #1
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004448:	3b01      	subs	r3, #1
 800444a:	b29a      	uxth	r2, r3
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004454:	b29b      	uxth	r3, r3
 8004456:	3b01      	subs	r3, #1
 8004458:	b29a      	uxth	r2, r3
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800445e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004460:	9300      	str	r3, [sp, #0]
 8004462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004464:	2200      	movs	r2, #0
 8004466:	494f      	ldr	r1, [pc, #316]	; (80045a4 <HAL_I2C_Mem_Read+0x448>)
 8004468:	68f8      	ldr	r0, [r7, #12]
 800446a:	f001 fea9 	bl	80061c0 <I2C_WaitOnFlagUntilTimeout>
 800446e:	4603      	mov	r3, r0
 8004470:	2b00      	cmp	r3, #0
 8004472:	d001      	beq.n	8004478 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	e091      	b.n	800459c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004486:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	691a      	ldr	r2, [r3, #16]
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004492:	b2d2      	uxtb	r2, r2
 8004494:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449a:	1c5a      	adds	r2, r3, #1
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044a4:	3b01      	subs	r3, #1
 80044a6:	b29a      	uxth	r2, r3
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	3b01      	subs	r3, #1
 80044b4:	b29a      	uxth	r2, r3
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	691a      	ldr	r2, [r3, #16]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c4:	b2d2      	uxtb	r2, r2
 80044c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044cc:	1c5a      	adds	r2, r3, #1
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044d6:	3b01      	subs	r3, #1
 80044d8:	b29a      	uxth	r2, r3
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	3b01      	subs	r3, #1
 80044e6:	b29a      	uxth	r2, r3
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 80044ec:	e042      	b.n	8004574 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044f0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80044f2:	68f8      	ldr	r0, [r7, #12]
 80044f4:	f001 ffee 	bl	80064d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80044f8:	4603      	mov	r3, r0
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d001      	beq.n	8004502 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e04c      	b.n	800459c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	691a      	ldr	r2, [r3, #16]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450c:	b2d2      	uxtb	r2, r2
 800450e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004514:	1c5a      	adds	r2, r3, #1
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800451e:	3b01      	subs	r3, #1
 8004520:	b29a      	uxth	r2, r3
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800452a:	b29b      	uxth	r3, r3
 800452c:	3b01      	subs	r3, #1
 800452e:	b29a      	uxth	r2, r3
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	695b      	ldr	r3, [r3, #20]
 800453a:	f003 0304 	and.w	r3, r3, #4
 800453e:	2b04      	cmp	r3, #4
 8004540:	d118      	bne.n	8004574 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	691a      	ldr	r2, [r3, #16]
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454c:	b2d2      	uxtb	r2, r2
 800454e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004554:	1c5a      	adds	r2, r3, #1
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800455e:	3b01      	subs	r3, #1
 8004560:	b29a      	uxth	r2, r3
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800456a:	b29b      	uxth	r3, r3
 800456c:	3b01      	subs	r3, #1
 800456e:	b29a      	uxth	r2, r3
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004578:	2b00      	cmp	r3, #0
 800457a:	f47f aec2 	bne.w	8004302 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2220      	movs	r2, #32
 8004582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2200      	movs	r2, #0
 800458a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2200      	movs	r2, #0
 8004592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004596:	2300      	movs	r3, #0
 8004598:	e000      	b.n	800459c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800459a:	2302      	movs	r3, #2
  }
}
 800459c:	4618      	mov	r0, r3
 800459e:	3728      	adds	r7, #40	; 0x28
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}
 80045a4:	00010004 	.word	0x00010004

080045a8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b088      	sub	sp, #32
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80045b0:	2300      	movs	r3, #0
 80045b2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045c8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045d0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80045d2:	7bfb      	ldrb	r3, [r7, #15]
 80045d4:	2b10      	cmp	r3, #16
 80045d6:	d003      	beq.n	80045e0 <HAL_I2C_EV_IRQHandler+0x38>
 80045d8:	7bfb      	ldrb	r3, [r7, #15]
 80045da:	2b40      	cmp	r3, #64	; 0x40
 80045dc:	f040 80c1 	bne.w	8004762 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	699b      	ldr	r3, [r3, #24]
 80045e6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	695b      	ldr	r3, [r3, #20]
 80045ee:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80045f0:	69fb      	ldr	r3, [r7, #28]
 80045f2:	f003 0301 	and.w	r3, r3, #1
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d10d      	bne.n	8004616 <HAL_I2C_EV_IRQHandler+0x6e>
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004600:	d003      	beq.n	800460a <HAL_I2C_EV_IRQHandler+0x62>
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004608:	d101      	bne.n	800460e <HAL_I2C_EV_IRQHandler+0x66>
 800460a:	2301      	movs	r3, #1
 800460c:	e000      	b.n	8004610 <HAL_I2C_EV_IRQHandler+0x68>
 800460e:	2300      	movs	r3, #0
 8004610:	2b01      	cmp	r3, #1
 8004612:	f000 8132 	beq.w	800487a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004616:	69fb      	ldr	r3, [r7, #28]
 8004618:	f003 0301 	and.w	r3, r3, #1
 800461c:	2b00      	cmp	r3, #0
 800461e:	d00c      	beq.n	800463a <HAL_I2C_EV_IRQHandler+0x92>
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	0a5b      	lsrs	r3, r3, #9
 8004624:	f003 0301 	and.w	r3, r3, #1
 8004628:	2b00      	cmp	r3, #0
 800462a:	d006      	beq.n	800463a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f001 ffd6 	bl	80065de <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f000 fd83 	bl	800513e <I2C_Master_SB>
 8004638:	e092      	b.n	8004760 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800463a:	69fb      	ldr	r3, [r7, #28]
 800463c:	08db      	lsrs	r3, r3, #3
 800463e:	f003 0301 	and.w	r3, r3, #1
 8004642:	2b00      	cmp	r3, #0
 8004644:	d009      	beq.n	800465a <HAL_I2C_EV_IRQHandler+0xb2>
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	0a5b      	lsrs	r3, r3, #9
 800464a:	f003 0301 	and.w	r3, r3, #1
 800464e:	2b00      	cmp	r3, #0
 8004650:	d003      	beq.n	800465a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f000 fdf9 	bl	800524a <I2C_Master_ADD10>
 8004658:	e082      	b.n	8004760 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800465a:	69fb      	ldr	r3, [r7, #28]
 800465c:	085b      	lsrs	r3, r3, #1
 800465e:	f003 0301 	and.w	r3, r3, #1
 8004662:	2b00      	cmp	r3, #0
 8004664:	d009      	beq.n	800467a <HAL_I2C_EV_IRQHandler+0xd2>
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	0a5b      	lsrs	r3, r3, #9
 800466a:	f003 0301 	and.w	r3, r3, #1
 800466e:	2b00      	cmp	r3, #0
 8004670:	d003      	beq.n	800467a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f000 fe13 	bl	800529e <I2C_Master_ADDR>
 8004678:	e072      	b.n	8004760 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800467a:	69bb      	ldr	r3, [r7, #24]
 800467c:	089b      	lsrs	r3, r3, #2
 800467e:	f003 0301 	and.w	r3, r3, #1
 8004682:	2b00      	cmp	r3, #0
 8004684:	d03b      	beq.n	80046fe <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004690:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004694:	f000 80f3 	beq.w	800487e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	09db      	lsrs	r3, r3, #7
 800469c:	f003 0301 	and.w	r3, r3, #1
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d00f      	beq.n	80046c4 <HAL_I2C_EV_IRQHandler+0x11c>
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	0a9b      	lsrs	r3, r3, #10
 80046a8:	f003 0301 	and.w	r3, r3, #1
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d009      	beq.n	80046c4 <HAL_I2C_EV_IRQHandler+0x11c>
 80046b0:	69fb      	ldr	r3, [r7, #28]
 80046b2:	089b      	lsrs	r3, r3, #2
 80046b4:	f003 0301 	and.w	r3, r3, #1
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d103      	bne.n	80046c4 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f000 f9f3 	bl	8004aa8 <I2C_MasterTransmit_TXE>
 80046c2:	e04d      	b.n	8004760 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80046c4:	69fb      	ldr	r3, [r7, #28]
 80046c6:	089b      	lsrs	r3, r3, #2
 80046c8:	f003 0301 	and.w	r3, r3, #1
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	f000 80d6 	beq.w	800487e <HAL_I2C_EV_IRQHandler+0x2d6>
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	0a5b      	lsrs	r3, r3, #9
 80046d6:	f003 0301 	and.w	r3, r3, #1
 80046da:	2b00      	cmp	r3, #0
 80046dc:	f000 80cf 	beq.w	800487e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80046e0:	7bbb      	ldrb	r3, [r7, #14]
 80046e2:	2b21      	cmp	r3, #33	; 0x21
 80046e4:	d103      	bne.n	80046ee <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f000 fa7a 	bl	8004be0 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80046ec:	e0c7      	b.n	800487e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80046ee:	7bfb      	ldrb	r3, [r7, #15]
 80046f0:	2b40      	cmp	r3, #64	; 0x40
 80046f2:	f040 80c4 	bne.w	800487e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f000 fae8 	bl	8004ccc <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80046fc:	e0bf      	b.n	800487e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004708:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800470c:	f000 80b7 	beq.w	800487e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004710:	69fb      	ldr	r3, [r7, #28]
 8004712:	099b      	lsrs	r3, r3, #6
 8004714:	f003 0301 	and.w	r3, r3, #1
 8004718:	2b00      	cmp	r3, #0
 800471a:	d00f      	beq.n	800473c <HAL_I2C_EV_IRQHandler+0x194>
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	0a9b      	lsrs	r3, r3, #10
 8004720:	f003 0301 	and.w	r3, r3, #1
 8004724:	2b00      	cmp	r3, #0
 8004726:	d009      	beq.n	800473c <HAL_I2C_EV_IRQHandler+0x194>
 8004728:	69fb      	ldr	r3, [r7, #28]
 800472a:	089b      	lsrs	r3, r3, #2
 800472c:	f003 0301 	and.w	r3, r3, #1
 8004730:	2b00      	cmp	r3, #0
 8004732:	d103      	bne.n	800473c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	f000 fb5d 	bl	8004df4 <I2C_MasterReceive_RXNE>
 800473a:	e011      	b.n	8004760 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800473c:	69fb      	ldr	r3, [r7, #28]
 800473e:	089b      	lsrs	r3, r3, #2
 8004740:	f003 0301 	and.w	r3, r3, #1
 8004744:	2b00      	cmp	r3, #0
 8004746:	f000 809a 	beq.w	800487e <HAL_I2C_EV_IRQHandler+0x2d6>
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	0a5b      	lsrs	r3, r3, #9
 800474e:	f003 0301 	and.w	r3, r3, #1
 8004752:	2b00      	cmp	r3, #0
 8004754:	f000 8093 	beq.w	800487e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f000 fc06 	bl	8004f6a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800475e:	e08e      	b.n	800487e <HAL_I2C_EV_IRQHandler+0x2d6>
 8004760:	e08d      	b.n	800487e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004766:	2b00      	cmp	r3, #0
 8004768:	d004      	beq.n	8004774 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	695b      	ldr	r3, [r3, #20]
 8004770:	61fb      	str	r3, [r7, #28]
 8004772:	e007      	b.n	8004784 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	699b      	ldr	r3, [r3, #24]
 800477a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	695b      	ldr	r3, [r3, #20]
 8004782:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004784:	69fb      	ldr	r3, [r7, #28]
 8004786:	085b      	lsrs	r3, r3, #1
 8004788:	f003 0301 	and.w	r3, r3, #1
 800478c:	2b00      	cmp	r3, #0
 800478e:	d012      	beq.n	80047b6 <HAL_I2C_EV_IRQHandler+0x20e>
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	0a5b      	lsrs	r3, r3, #9
 8004794:	f003 0301 	and.w	r3, r3, #1
 8004798:	2b00      	cmp	r3, #0
 800479a:	d00c      	beq.n	80047b6 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d003      	beq.n	80047ac <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	699b      	ldr	r3, [r3, #24]
 80047aa:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80047ac:	69b9      	ldr	r1, [r7, #24]
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f000 ffc4 	bl	800573c <I2C_Slave_ADDR>
 80047b4:	e066      	b.n	8004884 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80047b6:	69fb      	ldr	r3, [r7, #28]
 80047b8:	091b      	lsrs	r3, r3, #4
 80047ba:	f003 0301 	and.w	r3, r3, #1
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d009      	beq.n	80047d6 <HAL_I2C_EV_IRQHandler+0x22e>
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	0a5b      	lsrs	r3, r3, #9
 80047c6:	f003 0301 	and.w	r3, r3, #1
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d003      	beq.n	80047d6 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f000 fffe 	bl	80057d0 <I2C_Slave_STOPF>
 80047d4:	e056      	b.n	8004884 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80047d6:	7bbb      	ldrb	r3, [r7, #14]
 80047d8:	2b21      	cmp	r3, #33	; 0x21
 80047da:	d002      	beq.n	80047e2 <HAL_I2C_EV_IRQHandler+0x23a>
 80047dc:	7bbb      	ldrb	r3, [r7, #14]
 80047de:	2b29      	cmp	r3, #41	; 0x29
 80047e0:	d125      	bne.n	800482e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	09db      	lsrs	r3, r3, #7
 80047e6:	f003 0301 	and.w	r3, r3, #1
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d00f      	beq.n	800480e <HAL_I2C_EV_IRQHandler+0x266>
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	0a9b      	lsrs	r3, r3, #10
 80047f2:	f003 0301 	and.w	r3, r3, #1
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d009      	beq.n	800480e <HAL_I2C_EV_IRQHandler+0x266>
 80047fa:	69fb      	ldr	r3, [r7, #28]
 80047fc:	089b      	lsrs	r3, r3, #2
 80047fe:	f003 0301 	and.w	r3, r3, #1
 8004802:	2b00      	cmp	r3, #0
 8004804:	d103      	bne.n	800480e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f000 feda 	bl	80055c0 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800480c:	e039      	b.n	8004882 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800480e:	69fb      	ldr	r3, [r7, #28]
 8004810:	089b      	lsrs	r3, r3, #2
 8004812:	f003 0301 	and.w	r3, r3, #1
 8004816:	2b00      	cmp	r3, #0
 8004818:	d033      	beq.n	8004882 <HAL_I2C_EV_IRQHandler+0x2da>
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	0a5b      	lsrs	r3, r3, #9
 800481e:	f003 0301 	and.w	r3, r3, #1
 8004822:	2b00      	cmp	r3, #0
 8004824:	d02d      	beq.n	8004882 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f000 ff07 	bl	800563a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800482c:	e029      	b.n	8004882 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800482e:	69fb      	ldr	r3, [r7, #28]
 8004830:	099b      	lsrs	r3, r3, #6
 8004832:	f003 0301 	and.w	r3, r3, #1
 8004836:	2b00      	cmp	r3, #0
 8004838:	d00f      	beq.n	800485a <HAL_I2C_EV_IRQHandler+0x2b2>
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	0a9b      	lsrs	r3, r3, #10
 800483e:	f003 0301 	and.w	r3, r3, #1
 8004842:	2b00      	cmp	r3, #0
 8004844:	d009      	beq.n	800485a <HAL_I2C_EV_IRQHandler+0x2b2>
 8004846:	69fb      	ldr	r3, [r7, #28]
 8004848:	089b      	lsrs	r3, r3, #2
 800484a:	f003 0301 	and.w	r3, r3, #1
 800484e:	2b00      	cmp	r3, #0
 8004850:	d103      	bne.n	800485a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f000 ff12 	bl	800567c <I2C_SlaveReceive_RXNE>
 8004858:	e014      	b.n	8004884 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800485a:	69fb      	ldr	r3, [r7, #28]
 800485c:	089b      	lsrs	r3, r3, #2
 800485e:	f003 0301 	and.w	r3, r3, #1
 8004862:	2b00      	cmp	r3, #0
 8004864:	d00e      	beq.n	8004884 <HAL_I2C_EV_IRQHandler+0x2dc>
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	0a5b      	lsrs	r3, r3, #9
 800486a:	f003 0301 	and.w	r3, r3, #1
 800486e:	2b00      	cmp	r3, #0
 8004870:	d008      	beq.n	8004884 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f000 ff40 	bl	80056f8 <I2C_SlaveReceive_BTF>
 8004878:	e004      	b.n	8004884 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800487a:	bf00      	nop
 800487c:	e002      	b.n	8004884 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800487e:	bf00      	nop
 8004880:	e000      	b.n	8004884 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004882:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004884:	3720      	adds	r7, #32
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}

0800488a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800488a:	b580      	push	{r7, lr}
 800488c:	b08a      	sub	sp, #40	; 0x28
 800488e:	af00      	add	r7, sp, #0
 8004890:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	695b      	ldr	r3, [r3, #20]
 8004898:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80048a2:	2300      	movs	r3, #0
 80048a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048ac:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80048ae:	6a3b      	ldr	r3, [r7, #32]
 80048b0:	0a1b      	lsrs	r3, r3, #8
 80048b2:	f003 0301 	and.w	r3, r3, #1
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d00e      	beq.n	80048d8 <HAL_I2C_ER_IRQHandler+0x4e>
 80048ba:	69fb      	ldr	r3, [r7, #28]
 80048bc:	0a1b      	lsrs	r3, r3, #8
 80048be:	f003 0301 	and.w	r3, r3, #1
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d008      	beq.n	80048d8 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80048c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c8:	f043 0301 	orr.w	r3, r3, #1
 80048cc:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80048d6:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80048d8:	6a3b      	ldr	r3, [r7, #32]
 80048da:	0a5b      	lsrs	r3, r3, #9
 80048dc:	f003 0301 	and.w	r3, r3, #1
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d00e      	beq.n	8004902 <HAL_I2C_ER_IRQHandler+0x78>
 80048e4:	69fb      	ldr	r3, [r7, #28]
 80048e6:	0a1b      	lsrs	r3, r3, #8
 80048e8:	f003 0301 	and.w	r3, r3, #1
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d008      	beq.n	8004902 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80048f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f2:	f043 0302 	orr.w	r3, r3, #2
 80048f6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8004900:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004902:	6a3b      	ldr	r3, [r7, #32]
 8004904:	0a9b      	lsrs	r3, r3, #10
 8004906:	f003 0301 	and.w	r3, r3, #1
 800490a:	2b00      	cmp	r3, #0
 800490c:	d03f      	beq.n	800498e <HAL_I2C_ER_IRQHandler+0x104>
 800490e:	69fb      	ldr	r3, [r7, #28]
 8004910:	0a1b      	lsrs	r3, r3, #8
 8004912:	f003 0301 	and.w	r3, r3, #1
 8004916:	2b00      	cmp	r3, #0
 8004918:	d039      	beq.n	800498e <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800491a:	7efb      	ldrb	r3, [r7, #27]
 800491c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004922:	b29b      	uxth	r3, r3
 8004924:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800492c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004932:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004934:	7ebb      	ldrb	r3, [r7, #26]
 8004936:	2b20      	cmp	r3, #32
 8004938:	d112      	bne.n	8004960 <HAL_I2C_ER_IRQHandler+0xd6>
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d10f      	bne.n	8004960 <HAL_I2C_ER_IRQHandler+0xd6>
 8004940:	7cfb      	ldrb	r3, [r7, #19]
 8004942:	2b21      	cmp	r3, #33	; 0x21
 8004944:	d008      	beq.n	8004958 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004946:	7cfb      	ldrb	r3, [r7, #19]
 8004948:	2b29      	cmp	r3, #41	; 0x29
 800494a:	d005      	beq.n	8004958 <HAL_I2C_ER_IRQHandler+0xce>
 800494c:	7cfb      	ldrb	r3, [r7, #19]
 800494e:	2b28      	cmp	r3, #40	; 0x28
 8004950:	d106      	bne.n	8004960 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2b21      	cmp	r3, #33	; 0x21
 8004956:	d103      	bne.n	8004960 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f001 f869 	bl	8005a30 <I2C_Slave_AF>
 800495e:	e016      	b.n	800498e <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004968:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800496a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496c:	f043 0304 	orr.w	r3, r3, #4
 8004970:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004972:	7efb      	ldrb	r3, [r7, #27]
 8004974:	2b10      	cmp	r3, #16
 8004976:	d002      	beq.n	800497e <HAL_I2C_ER_IRQHandler+0xf4>
 8004978:	7efb      	ldrb	r3, [r7, #27]
 800497a:	2b40      	cmp	r3, #64	; 0x40
 800497c:	d107      	bne.n	800498e <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800498c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800498e:	6a3b      	ldr	r3, [r7, #32]
 8004990:	0adb      	lsrs	r3, r3, #11
 8004992:	f003 0301 	and.w	r3, r3, #1
 8004996:	2b00      	cmp	r3, #0
 8004998:	d00e      	beq.n	80049b8 <HAL_I2C_ER_IRQHandler+0x12e>
 800499a:	69fb      	ldr	r3, [r7, #28]
 800499c:	0a1b      	lsrs	r3, r3, #8
 800499e:	f003 0301 	and.w	r3, r3, #1
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d008      	beq.n	80049b8 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80049a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a8:	f043 0308 	orr.w	r3, r3, #8
 80049ac:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80049b6:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80049b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d008      	beq.n	80049d0 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c4:	431a      	orrs	r2, r3
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f001 f8a0 	bl	8005b10 <I2C_ITError>
  }
}
 80049d0:	bf00      	nop
 80049d2:	3728      	adds	r7, #40	; 0x28
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}

080049d8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80049d8:	b480      	push	{r7}
 80049da:	b083      	sub	sp, #12
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80049e0:	bf00      	nop
 80049e2:	370c      	adds	r7, #12
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr

080049ec <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b083      	sub	sp, #12
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80049f4:	bf00      	nop
 80049f6:	370c      	adds	r7, #12
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr

08004a00 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b083      	sub	sp, #12
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004a08:	bf00      	nop
 8004a0a:	370c      	adds	r7, #12
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr

08004a14 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004a1c:	bf00      	nop
 8004a1e:	370c      	adds	r7, #12
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr

08004a28 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b083      	sub	sp, #12
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	460b      	mov	r3, r1
 8004a32:	70fb      	strb	r3, [r7, #3]
 8004a34:	4613      	mov	r3, r2
 8004a36:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004a38:	bf00      	nop
 8004a3a:	370c      	adds	r7, #12
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr

08004a44 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b083      	sub	sp, #12
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004a4c:	bf00      	nop
 8004a4e:	370c      	adds	r7, #12
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr

08004a58 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004a60:	bf00      	nop
 8004a62:	370c      	adds	r7, #12
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr

08004a6c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004a74:	bf00      	nop
 8004a76:	370c      	adds	r7, #12
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr

08004a80 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b083      	sub	sp, #12
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004a88:	bf00      	nop
 8004a8a:	370c      	adds	r7, #12
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a92:	4770      	bx	lr

08004a94 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b083      	sub	sp, #12
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004a9c:	bf00      	nop
 8004a9e:	370c      	adds	r7, #12
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr

08004aa8 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b084      	sub	sp, #16
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ab6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004abe:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac4:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d150      	bne.n	8004b70 <I2C_MasterTransmit_TXE+0xc8>
 8004ace:	7bfb      	ldrb	r3, [r7, #15]
 8004ad0:	2b21      	cmp	r3, #33	; 0x21
 8004ad2:	d14d      	bne.n	8004b70 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	2b08      	cmp	r3, #8
 8004ad8:	d01d      	beq.n	8004b16 <I2C_MasterTransmit_TXE+0x6e>
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	2b20      	cmp	r3, #32
 8004ade:	d01a      	beq.n	8004b16 <I2C_MasterTransmit_TXE+0x6e>
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004ae6:	d016      	beq.n	8004b16 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	685a      	ldr	r2, [r3, #4]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004af6:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2211      	movs	r2, #17
 8004afc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2200      	movs	r2, #0
 8004b02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2220      	movs	r2, #32
 8004b0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f7ff ff62 	bl	80049d8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004b14:	e060      	b.n	8004bd8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	685a      	ldr	r2, [r3, #4]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004b24:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b34:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2220      	movs	r2, #32
 8004b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	2b40      	cmp	r3, #64	; 0x40
 8004b4e:	d107      	bne.n	8004b60 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f7ff ff7d 	bl	8004a58 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004b5e:	e03b      	b.n	8004bd8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2200      	movs	r2, #0
 8004b64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f7ff ff35 	bl	80049d8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004b6e:	e033      	b.n	8004bd8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004b70:	7bfb      	ldrb	r3, [r7, #15]
 8004b72:	2b21      	cmp	r3, #33	; 0x21
 8004b74:	d005      	beq.n	8004b82 <I2C_MasterTransmit_TXE+0xda>
 8004b76:	7bbb      	ldrb	r3, [r7, #14]
 8004b78:	2b40      	cmp	r3, #64	; 0x40
 8004b7a:	d12d      	bne.n	8004bd8 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004b7c:	7bfb      	ldrb	r3, [r7, #15]
 8004b7e:	2b22      	cmp	r3, #34	; 0x22
 8004b80:	d12a      	bne.n	8004bd8 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d108      	bne.n	8004b9e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	685a      	ldr	r2, [r3, #4]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b9a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004b9c:	e01c      	b.n	8004bd8 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ba4:	b2db      	uxtb	r3, r3
 8004ba6:	2b40      	cmp	r3, #64	; 0x40
 8004ba8:	d103      	bne.n	8004bb2 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f000 f88e 	bl	8004ccc <I2C_MemoryTransmit_TXE_BTF>
}
 8004bb0:	e012      	b.n	8004bd8 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb6:	781a      	ldrb	r2, [r3, #0]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc2:	1c5a      	adds	r2, r3, #1
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bcc:	b29b      	uxth	r3, r3
 8004bce:	3b01      	subs	r3, #1
 8004bd0:	b29a      	uxth	r2, r3
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004bd6:	e7ff      	b.n	8004bd8 <I2C_MasterTransmit_TXE+0x130>
 8004bd8:	bf00      	nop
 8004bda:	3710      	adds	r7, #16
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}

08004be0 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b084      	sub	sp, #16
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bec:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	2b21      	cmp	r3, #33	; 0x21
 8004bf8:	d164      	bne.n	8004cc4 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d012      	beq.n	8004c2a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c08:	781a      	ldrb	r2, [r3, #0]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c14:	1c5a      	adds	r2, r3, #1
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	3b01      	subs	r3, #1
 8004c22:	b29a      	uxth	r2, r3
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004c28:	e04c      	b.n	8004cc4 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2b08      	cmp	r3, #8
 8004c2e:	d01d      	beq.n	8004c6c <I2C_MasterTransmit_BTF+0x8c>
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2b20      	cmp	r3, #32
 8004c34:	d01a      	beq.n	8004c6c <I2C_MasterTransmit_BTF+0x8c>
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004c3c:	d016      	beq.n	8004c6c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	685a      	ldr	r2, [r3, #4]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004c4c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2211      	movs	r2, #17
 8004c52:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2220      	movs	r2, #32
 8004c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f7ff feb7 	bl	80049d8 <HAL_I2C_MasterTxCpltCallback>
}
 8004c6a:	e02b      	b.n	8004cc4 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	685a      	ldr	r2, [r3, #4]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004c7a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c8a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2220      	movs	r2, #32
 8004c96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	2b40      	cmp	r3, #64	; 0x40
 8004ca4:	d107      	bne.n	8004cb6 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f7ff fed2 	bl	8004a58 <HAL_I2C_MemTxCpltCallback>
}
 8004cb4:	e006      	b.n	8004cc4 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f7ff fe8a 	bl	80049d8 <HAL_I2C_MasterTxCpltCallback>
}
 8004cc4:	bf00      	nop
 8004cc6:	3710      	adds	r7, #16
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}

08004ccc <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b084      	sub	sp, #16
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cda:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d11d      	bne.n	8004d20 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d10b      	bne.n	8004d04 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cf0:	b2da      	uxtb	r2, r3
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cfc:	1c9a      	adds	r2, r3, #2
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004d02:	e073      	b.n	8004dec <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	121b      	asrs	r3, r3, #8
 8004d0c:	b2da      	uxtb	r2, r3
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d18:	1c5a      	adds	r2, r3, #1
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004d1e:	e065      	b.n	8004dec <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d10b      	bne.n	8004d40 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d2c:	b2da      	uxtb	r2, r3
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d38:	1c5a      	adds	r2, r3, #1
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004d3e:	e055      	b.n	8004dec <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d44:	2b02      	cmp	r3, #2
 8004d46:	d151      	bne.n	8004dec <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004d48:	7bfb      	ldrb	r3, [r7, #15]
 8004d4a:	2b22      	cmp	r3, #34	; 0x22
 8004d4c:	d10d      	bne.n	8004d6a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d5c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d62:	1c5a      	adds	r2, r3, #1
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004d68:	e040      	b.n	8004dec <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d015      	beq.n	8004da0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004d74:	7bfb      	ldrb	r3, [r7, #15]
 8004d76:	2b21      	cmp	r3, #33	; 0x21
 8004d78:	d112      	bne.n	8004da0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d7e:	781a      	ldrb	r2, [r3, #0]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8a:	1c5a      	adds	r2, r3, #1
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	3b01      	subs	r3, #1
 8004d98:	b29a      	uxth	r2, r3
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004d9e:	e025      	b.n	8004dec <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d120      	bne.n	8004dec <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004daa:	7bfb      	ldrb	r3, [r7, #15]
 8004dac:	2b21      	cmp	r3, #33	; 0x21
 8004dae:	d11d      	bne.n	8004dec <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	685a      	ldr	r2, [r3, #4]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004dbe:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	681a      	ldr	r2, [r3, #0]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dce:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2220      	movs	r2, #32
 8004dda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2200      	movs	r2, #0
 8004de2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f7ff fe36 	bl	8004a58 <HAL_I2C_MemTxCpltCallback>
}
 8004dec:	bf00      	nop
 8004dee:	3710      	adds	r7, #16
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}

08004df4 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b084      	sub	sp, #16
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e02:	b2db      	uxtb	r3, r3
 8004e04:	2b22      	cmp	r3, #34	; 0x22
 8004e06:	f040 80ac 	bne.w	8004f62 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2b03      	cmp	r3, #3
 8004e16:	d921      	bls.n	8004e5c <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	691a      	ldr	r2, [r3, #16]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e22:	b2d2      	uxtb	r2, r2
 8004e24:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2a:	1c5a      	adds	r2, r3, #1
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	3b01      	subs	r3, #1
 8004e38:	b29a      	uxth	r2, r3
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	2b03      	cmp	r3, #3
 8004e46:	f040 808c 	bne.w	8004f62 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	685a      	ldr	r2, [r3, #4]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e58:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004e5a:	e082      	b.n	8004f62 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e60:	2b02      	cmp	r3, #2
 8004e62:	d075      	beq.n	8004f50 <I2C_MasterReceive_RXNE+0x15c>
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	d002      	beq.n	8004e70 <I2C_MasterReceive_RXNE+0x7c>
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d16f      	bne.n	8004f50 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	f001 fafd 	bl	8006470 <I2C_WaitOnSTOPRequestThroughIT>
 8004e76:	4603      	mov	r3, r0
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d142      	bne.n	8004f02 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e8a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	685a      	ldr	r2, [r3, #4]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004e9a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	691a      	ldr	r2, [r3, #16]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea6:	b2d2      	uxtb	r2, r2
 8004ea8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eae:	1c5a      	adds	r2, r3, #1
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	3b01      	subs	r3, #1
 8004ebc:	b29a      	uxth	r2, r3
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2220      	movs	r2, #32
 8004ec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ed0:	b2db      	uxtb	r3, r3
 8004ed2:	2b40      	cmp	r3, #64	; 0x40
 8004ed4:	d10a      	bne.n	8004eec <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f7ff fdc1 	bl	8004a6c <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004eea:	e03a      	b.n	8004f62 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2212      	movs	r2, #18
 8004ef8:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f7ff fd76 	bl	80049ec <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004f00:	e02f      	b.n	8004f62 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	685a      	ldr	r2, [r3, #4]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004f10:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	691a      	ldr	r2, [r3, #16]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1c:	b2d2      	uxtb	r2, r2
 8004f1e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f24:	1c5a      	adds	r2, r3, #1
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f2e:	b29b      	uxth	r3, r3
 8004f30:	3b01      	subs	r3, #1
 8004f32:	b29a      	uxth	r2, r3
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2220      	movs	r2, #32
 8004f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2200      	movs	r2, #0
 8004f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f7ff fd99 	bl	8004a80 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004f4e:	e008      	b.n	8004f62 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	685a      	ldr	r2, [r3, #4]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f5e:	605a      	str	r2, [r3, #4]
}
 8004f60:	e7ff      	b.n	8004f62 <I2C_MasterReceive_RXNE+0x16e>
 8004f62:	bf00      	nop
 8004f64:	3710      	adds	r7, #16
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}

08004f6a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004f6a:	b580      	push	{r7, lr}
 8004f6c:	b084      	sub	sp, #16
 8004f6e:	af00      	add	r7, sp, #0
 8004f70:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f76:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	2b04      	cmp	r3, #4
 8004f80:	d11b      	bne.n	8004fba <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	685a      	ldr	r2, [r3, #4]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f90:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	691a      	ldr	r2, [r3, #16]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f9c:	b2d2      	uxtb	r2, r2
 8004f9e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa4:	1c5a      	adds	r2, r3, #1
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	3b01      	subs	r3, #1
 8004fb2:	b29a      	uxth	r2, r3
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004fb8:	e0bd      	b.n	8005136 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	2b03      	cmp	r3, #3
 8004fc2:	d129      	bne.n	8005018 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	685a      	ldr	r2, [r3, #4]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fd2:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2b04      	cmp	r3, #4
 8004fd8:	d00a      	beq.n	8004ff0 <I2C_MasterReceive_BTF+0x86>
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2b02      	cmp	r3, #2
 8004fde:	d007      	beq.n	8004ff0 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fee:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	691a      	ldr	r2, [r3, #16]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ffa:	b2d2      	uxtb	r2, r2
 8004ffc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005002:	1c5a      	adds	r2, r3, #1
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800500c:	b29b      	uxth	r3, r3
 800500e:	3b01      	subs	r3, #1
 8005010:	b29a      	uxth	r2, r3
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005016:	e08e      	b.n	8005136 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800501c:	b29b      	uxth	r3, r3
 800501e:	2b02      	cmp	r3, #2
 8005020:	d176      	bne.n	8005110 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2b01      	cmp	r3, #1
 8005026:	d002      	beq.n	800502e <I2C_MasterReceive_BTF+0xc4>
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2b10      	cmp	r3, #16
 800502c:	d108      	bne.n	8005040 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800503c:	601a      	str	r2, [r3, #0]
 800503e:	e019      	b.n	8005074 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2b04      	cmp	r3, #4
 8005044:	d002      	beq.n	800504c <I2C_MasterReceive_BTF+0xe2>
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2b02      	cmp	r3, #2
 800504a:	d108      	bne.n	800505e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800505a:	601a      	str	r2, [r3, #0]
 800505c:	e00a      	b.n	8005074 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2b10      	cmp	r3, #16
 8005062:	d007      	beq.n	8005074 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005072:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	691a      	ldr	r2, [r3, #16]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507e:	b2d2      	uxtb	r2, r2
 8005080:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005086:	1c5a      	adds	r2, r3, #1
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005090:	b29b      	uxth	r3, r3
 8005092:	3b01      	subs	r3, #1
 8005094:	b29a      	uxth	r2, r3
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	691a      	ldr	r2, [r3, #16]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a4:	b2d2      	uxtb	r2, r2
 80050a6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ac:	1c5a      	adds	r2, r3, #1
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	3b01      	subs	r3, #1
 80050ba:	b29a      	uxth	r2, r3
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	685a      	ldr	r2, [r3, #4]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80050ce:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2220      	movs	r2, #32
 80050d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050de:	b2db      	uxtb	r3, r3
 80050e0:	2b40      	cmp	r3, #64	; 0x40
 80050e2:	d10a      	bne.n	80050fa <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2200      	movs	r2, #0
 80050e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2200      	movs	r2, #0
 80050f0:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f7ff fcba 	bl	8004a6c <HAL_I2C_MemRxCpltCallback>
}
 80050f8:	e01d      	b.n	8005136 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2200      	movs	r2, #0
 80050fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2212      	movs	r2, #18
 8005106:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f7ff fc6f 	bl	80049ec <HAL_I2C_MasterRxCpltCallback>
}
 800510e:	e012      	b.n	8005136 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	691a      	ldr	r2, [r3, #16]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800511a:	b2d2      	uxtb	r2, r2
 800511c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005122:	1c5a      	adds	r2, r3, #1
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800512c:	b29b      	uxth	r3, r3
 800512e:	3b01      	subs	r3, #1
 8005130:	b29a      	uxth	r2, r3
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005136:	bf00      	nop
 8005138:	3710      	adds	r7, #16
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}

0800513e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800513e:	b480      	push	{r7}
 8005140:	b083      	sub	sp, #12
 8005142:	af00      	add	r7, sp, #0
 8005144:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800514c:	b2db      	uxtb	r3, r3
 800514e:	2b40      	cmp	r3, #64	; 0x40
 8005150:	d117      	bne.n	8005182 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005156:	2b00      	cmp	r3, #0
 8005158:	d109      	bne.n	800516e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800515e:	b2db      	uxtb	r3, r3
 8005160:	461a      	mov	r2, r3
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800516a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800516c:	e067      	b.n	800523e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005172:	b2db      	uxtb	r3, r3
 8005174:	f043 0301 	orr.w	r3, r3, #1
 8005178:	b2da      	uxtb	r2, r3
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	611a      	str	r2, [r3, #16]
}
 8005180:	e05d      	b.n	800523e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	691b      	ldr	r3, [r3, #16]
 8005186:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800518a:	d133      	bne.n	80051f4 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005192:	b2db      	uxtb	r3, r3
 8005194:	2b21      	cmp	r3, #33	; 0x21
 8005196:	d109      	bne.n	80051ac <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800519c:	b2db      	uxtb	r3, r3
 800519e:	461a      	mov	r2, r3
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80051a8:	611a      	str	r2, [r3, #16]
 80051aa:	e008      	b.n	80051be <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	f043 0301 	orr.w	r3, r3, #1
 80051b6:	b2da      	uxtb	r2, r3
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d004      	beq.n	80051d0 <I2C_Master_SB+0x92>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d108      	bne.n	80051e2 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d032      	beq.n	800523e <I2C_Master_SB+0x100>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d02d      	beq.n	800523e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	685a      	ldr	r2, [r3, #4]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051f0:	605a      	str	r2, [r3, #4]
}
 80051f2:	e024      	b.n	800523e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d10e      	bne.n	800521a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005200:	b29b      	uxth	r3, r3
 8005202:	11db      	asrs	r3, r3, #7
 8005204:	b2db      	uxtb	r3, r3
 8005206:	f003 0306 	and.w	r3, r3, #6
 800520a:	b2db      	uxtb	r3, r3
 800520c:	f063 030f 	orn	r3, r3, #15
 8005210:	b2da      	uxtb	r2, r3
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	611a      	str	r2, [r3, #16]
}
 8005218:	e011      	b.n	800523e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800521e:	2b01      	cmp	r3, #1
 8005220:	d10d      	bne.n	800523e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005226:	b29b      	uxth	r3, r3
 8005228:	11db      	asrs	r3, r3, #7
 800522a:	b2db      	uxtb	r3, r3
 800522c:	f003 0306 	and.w	r3, r3, #6
 8005230:	b2db      	uxtb	r3, r3
 8005232:	f063 030e 	orn	r3, r3, #14
 8005236:	b2da      	uxtb	r2, r3
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	611a      	str	r2, [r3, #16]
}
 800523e:	bf00      	nop
 8005240:	370c      	adds	r7, #12
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr

0800524a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800524a:	b480      	push	{r7}
 800524c:	b083      	sub	sp, #12
 800524e:	af00      	add	r7, sp, #0
 8005250:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005256:	b2da      	uxtb	r2, r3
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005262:	2b00      	cmp	r3, #0
 8005264:	d004      	beq.n	8005270 <I2C_Master_ADD10+0x26>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800526a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800526c:	2b00      	cmp	r3, #0
 800526e:	d108      	bne.n	8005282 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005274:	2b00      	cmp	r3, #0
 8005276:	d00c      	beq.n	8005292 <I2C_Master_ADD10+0x48>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800527c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800527e:	2b00      	cmp	r3, #0
 8005280:	d007      	beq.n	8005292 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	685a      	ldr	r2, [r3, #4]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005290:	605a      	str	r2, [r3, #4]
  }
}
 8005292:	bf00      	nop
 8005294:	370c      	adds	r7, #12
 8005296:	46bd      	mov	sp, r7
 8005298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529c:	4770      	bx	lr

0800529e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800529e:	b480      	push	{r7}
 80052a0:	b091      	sub	sp, #68	; 0x44
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80052ac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052b4:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ba:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052c2:	b2db      	uxtb	r3, r3
 80052c4:	2b22      	cmp	r3, #34	; 0x22
 80052c6:	f040 8169 	bne.w	800559c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d10f      	bne.n	80052f2 <I2C_Master_ADDR+0x54>
 80052d2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80052d6:	2b40      	cmp	r3, #64	; 0x40
 80052d8:	d10b      	bne.n	80052f2 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052da:	2300      	movs	r3, #0
 80052dc:	633b      	str	r3, [r7, #48]	; 0x30
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	695b      	ldr	r3, [r3, #20]
 80052e4:	633b      	str	r3, [r7, #48]	; 0x30
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	699b      	ldr	r3, [r3, #24]
 80052ec:	633b      	str	r3, [r7, #48]	; 0x30
 80052ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052f0:	e160      	b.n	80055b4 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d11d      	bne.n	8005336 <I2C_Master_ADDR+0x98>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	691b      	ldr	r3, [r3, #16]
 80052fe:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005302:	d118      	bne.n	8005336 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005304:	2300      	movs	r3, #0
 8005306:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	695b      	ldr	r3, [r3, #20]
 800530e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	699b      	ldr	r3, [r3, #24]
 8005316:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005318:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005328:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800532e:	1c5a      	adds	r2, r3, #1
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	651a      	str	r2, [r3, #80]	; 0x50
 8005334:	e13e      	b.n	80055b4 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800533a:	b29b      	uxth	r3, r3
 800533c:	2b00      	cmp	r3, #0
 800533e:	d113      	bne.n	8005368 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005340:	2300      	movs	r3, #0
 8005342:	62bb      	str	r3, [r7, #40]	; 0x28
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	695b      	ldr	r3, [r3, #20]
 800534a:	62bb      	str	r3, [r7, #40]	; 0x28
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	699b      	ldr	r3, [r3, #24]
 8005352:	62bb      	str	r3, [r7, #40]	; 0x28
 8005354:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	681a      	ldr	r2, [r3, #0]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005364:	601a      	str	r2, [r3, #0]
 8005366:	e115      	b.n	8005594 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800536c:	b29b      	uxth	r3, r3
 800536e:	2b01      	cmp	r3, #1
 8005370:	f040 808a 	bne.w	8005488 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005376:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800537a:	d137      	bne.n	80053ec <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	681a      	ldr	r2, [r3, #0]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800538a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005396:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800539a:	d113      	bne.n	80053c4 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053aa:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053ac:	2300      	movs	r3, #0
 80053ae:	627b      	str	r3, [r7, #36]	; 0x24
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	695b      	ldr	r3, [r3, #20]
 80053b6:	627b      	str	r3, [r7, #36]	; 0x24
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	699b      	ldr	r3, [r3, #24]
 80053be:	627b      	str	r3, [r7, #36]	; 0x24
 80053c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c2:	e0e7      	b.n	8005594 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053c4:	2300      	movs	r3, #0
 80053c6:	623b      	str	r3, [r7, #32]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	695b      	ldr	r3, [r3, #20]
 80053ce:	623b      	str	r3, [r7, #32]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	699b      	ldr	r3, [r3, #24]
 80053d6:	623b      	str	r3, [r7, #32]
 80053d8:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053e8:	601a      	str	r2, [r3, #0]
 80053ea:	e0d3      	b.n	8005594 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80053ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ee:	2b08      	cmp	r3, #8
 80053f0:	d02e      	beq.n	8005450 <I2C_Master_ADDR+0x1b2>
 80053f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053f4:	2b20      	cmp	r3, #32
 80053f6:	d02b      	beq.n	8005450 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80053f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053fa:	2b12      	cmp	r3, #18
 80053fc:	d102      	bne.n	8005404 <I2C_Master_ADDR+0x166>
 80053fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005400:	2b01      	cmp	r3, #1
 8005402:	d125      	bne.n	8005450 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005406:	2b04      	cmp	r3, #4
 8005408:	d00e      	beq.n	8005428 <I2C_Master_ADDR+0x18a>
 800540a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800540c:	2b02      	cmp	r3, #2
 800540e:	d00b      	beq.n	8005428 <I2C_Master_ADDR+0x18a>
 8005410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005412:	2b10      	cmp	r3, #16
 8005414:	d008      	beq.n	8005428 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005424:	601a      	str	r2, [r3, #0]
 8005426:	e007      	b.n	8005438 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005436:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005438:	2300      	movs	r3, #0
 800543a:	61fb      	str	r3, [r7, #28]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	695b      	ldr	r3, [r3, #20]
 8005442:	61fb      	str	r3, [r7, #28]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	699b      	ldr	r3, [r3, #24]
 800544a:	61fb      	str	r3, [r7, #28]
 800544c:	69fb      	ldr	r3, [r7, #28]
 800544e:	e0a1      	b.n	8005594 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800545e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005460:	2300      	movs	r3, #0
 8005462:	61bb      	str	r3, [r7, #24]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	695b      	ldr	r3, [r3, #20]
 800546a:	61bb      	str	r3, [r7, #24]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	699b      	ldr	r3, [r3, #24]
 8005472:	61bb      	str	r3, [r7, #24]
 8005474:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005484:	601a      	str	r2, [r3, #0]
 8005486:	e085      	b.n	8005594 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800548c:	b29b      	uxth	r3, r3
 800548e:	2b02      	cmp	r3, #2
 8005490:	d14d      	bne.n	800552e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005494:	2b04      	cmp	r3, #4
 8005496:	d016      	beq.n	80054c6 <I2C_Master_ADDR+0x228>
 8005498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800549a:	2b02      	cmp	r3, #2
 800549c:	d013      	beq.n	80054c6 <I2C_Master_ADDR+0x228>
 800549e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054a0:	2b10      	cmp	r3, #16
 80054a2:	d010      	beq.n	80054c6 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054b2:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054c2:	601a      	str	r2, [r3, #0]
 80054c4:	e007      	b.n	80054d6 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80054d4:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054e4:	d117      	bne.n	8005516 <I2C_Master_ADDR+0x278>
 80054e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80054ec:	d00b      	beq.n	8005506 <I2C_Master_ADDR+0x268>
 80054ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d008      	beq.n	8005506 <I2C_Master_ADDR+0x268>
 80054f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054f6:	2b08      	cmp	r3, #8
 80054f8:	d005      	beq.n	8005506 <I2C_Master_ADDR+0x268>
 80054fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054fc:	2b10      	cmp	r3, #16
 80054fe:	d002      	beq.n	8005506 <I2C_Master_ADDR+0x268>
 8005500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005502:	2b20      	cmp	r3, #32
 8005504:	d107      	bne.n	8005516 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	685a      	ldr	r2, [r3, #4]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005514:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005516:	2300      	movs	r3, #0
 8005518:	617b      	str	r3, [r7, #20]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	695b      	ldr	r3, [r3, #20]
 8005520:	617b      	str	r3, [r7, #20]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	699b      	ldr	r3, [r3, #24]
 8005528:	617b      	str	r3, [r7, #20]
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	e032      	b.n	8005594 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800553c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005548:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800554c:	d117      	bne.n	800557e <I2C_Master_ADDR+0x2e0>
 800554e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005550:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005554:	d00b      	beq.n	800556e <I2C_Master_ADDR+0x2d0>
 8005556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005558:	2b01      	cmp	r3, #1
 800555a:	d008      	beq.n	800556e <I2C_Master_ADDR+0x2d0>
 800555c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800555e:	2b08      	cmp	r3, #8
 8005560:	d005      	beq.n	800556e <I2C_Master_ADDR+0x2d0>
 8005562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005564:	2b10      	cmp	r3, #16
 8005566:	d002      	beq.n	800556e <I2C_Master_ADDR+0x2d0>
 8005568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800556a:	2b20      	cmp	r3, #32
 800556c:	d107      	bne.n	800557e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	685a      	ldr	r2, [r3, #4]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800557c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800557e:	2300      	movs	r3, #0
 8005580:	613b      	str	r3, [r7, #16]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	695b      	ldr	r3, [r3, #20]
 8005588:	613b      	str	r3, [r7, #16]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	699b      	ldr	r3, [r3, #24]
 8005590:	613b      	str	r3, [r7, #16]
 8005592:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2200      	movs	r2, #0
 8005598:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800559a:	e00b      	b.n	80055b4 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800559c:	2300      	movs	r3, #0
 800559e:	60fb      	str	r3, [r7, #12]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	695b      	ldr	r3, [r3, #20]
 80055a6:	60fb      	str	r3, [r7, #12]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	699b      	ldr	r3, [r3, #24]
 80055ae:	60fb      	str	r3, [r7, #12]
 80055b0:	68fb      	ldr	r3, [r7, #12]
}
 80055b2:	e7ff      	b.n	80055b4 <I2C_Master_ADDR+0x316>
 80055b4:	bf00      	nop
 80055b6:	3744      	adds	r7, #68	; 0x44
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr

080055c0 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b084      	sub	sp, #16
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055ce:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d02b      	beq.n	8005632 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055de:	781a      	ldrb	r2, [r3, #0]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ea:	1c5a      	adds	r2, r3, #1
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	3b01      	subs	r3, #1
 80055f8:	b29a      	uxth	r2, r3
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005602:	b29b      	uxth	r3, r3
 8005604:	2b00      	cmp	r3, #0
 8005606:	d114      	bne.n	8005632 <I2C_SlaveTransmit_TXE+0x72>
 8005608:	7bfb      	ldrb	r3, [r7, #15]
 800560a:	2b29      	cmp	r3, #41	; 0x29
 800560c:	d111      	bne.n	8005632 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	685a      	ldr	r2, [r3, #4]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800561c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2221      	movs	r2, #33	; 0x21
 8005622:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2228      	movs	r2, #40	; 0x28
 8005628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f7ff f9e7 	bl	8004a00 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005632:	bf00      	nop
 8005634:	3710      	adds	r7, #16
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}

0800563a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800563a:	b480      	push	{r7}
 800563c:	b083      	sub	sp, #12
 800563e:	af00      	add	r7, sp, #0
 8005640:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005646:	b29b      	uxth	r3, r3
 8005648:	2b00      	cmp	r3, #0
 800564a:	d011      	beq.n	8005670 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005650:	781a      	ldrb	r2, [r3, #0]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800565c:	1c5a      	adds	r2, r3, #1
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005666:	b29b      	uxth	r3, r3
 8005668:	3b01      	subs	r3, #1
 800566a:	b29a      	uxth	r2, r3
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005670:	bf00      	nop
 8005672:	370c      	adds	r7, #12
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr

0800567c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b084      	sub	sp, #16
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800568a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005690:	b29b      	uxth	r3, r3
 8005692:	2b00      	cmp	r3, #0
 8005694:	d02c      	beq.n	80056f0 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	691a      	ldr	r2, [r3, #16]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a0:	b2d2      	uxtb	r2, r2
 80056a2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a8:	1c5a      	adds	r2, r3, #1
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	3b01      	subs	r3, #1
 80056b6:	b29a      	uxth	r2, r3
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d114      	bne.n	80056f0 <I2C_SlaveReceive_RXNE+0x74>
 80056c6:	7bfb      	ldrb	r3, [r7, #15]
 80056c8:	2b2a      	cmp	r3, #42	; 0x2a
 80056ca:	d111      	bne.n	80056f0 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	685a      	ldr	r2, [r3, #4]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056da:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2222      	movs	r2, #34	; 0x22
 80056e0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2228      	movs	r2, #40	; 0x28
 80056e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f7ff f992 	bl	8004a14 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80056f0:	bf00      	nop
 80056f2:	3710      	adds	r7, #16
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}

080056f8 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b083      	sub	sp, #12
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005704:	b29b      	uxth	r3, r3
 8005706:	2b00      	cmp	r3, #0
 8005708:	d012      	beq.n	8005730 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	691a      	ldr	r2, [r3, #16]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005714:	b2d2      	uxtb	r2, r2
 8005716:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800571c:	1c5a      	adds	r2, r3, #1
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005726:	b29b      	uxth	r3, r3
 8005728:	3b01      	subs	r3, #1
 800572a:	b29a      	uxth	r2, r3
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005730:	bf00      	nop
 8005732:	370c      	adds	r7, #12
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr

0800573c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b084      	sub	sp, #16
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
 8005744:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005746:	2300      	movs	r3, #0
 8005748:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005750:	b2db      	uxtb	r3, r3
 8005752:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005756:	2b28      	cmp	r3, #40	; 0x28
 8005758:	d127      	bne.n	80057aa <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	685a      	ldr	r2, [r3, #4]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005768:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	089b      	lsrs	r3, r3, #2
 800576e:	f003 0301 	and.w	r3, r3, #1
 8005772:	2b00      	cmp	r3, #0
 8005774:	d101      	bne.n	800577a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005776:	2301      	movs	r3, #1
 8005778:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	09db      	lsrs	r3, r3, #7
 800577e:	f003 0301 	and.w	r3, r3, #1
 8005782:	2b00      	cmp	r3, #0
 8005784:	d103      	bne.n	800578e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	68db      	ldr	r3, [r3, #12]
 800578a:	81bb      	strh	r3, [r7, #12]
 800578c:	e002      	b.n	8005794 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	699b      	ldr	r3, [r3, #24]
 8005792:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2200      	movs	r2, #0
 8005798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800579c:	89ba      	ldrh	r2, [r7, #12]
 800579e:	7bfb      	ldrb	r3, [r7, #15]
 80057a0:	4619      	mov	r1, r3
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f7ff f940 	bl	8004a28 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80057a8:	e00e      	b.n	80057c8 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057aa:	2300      	movs	r3, #0
 80057ac:	60bb      	str	r3, [r7, #8]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	695b      	ldr	r3, [r3, #20]
 80057b4:	60bb      	str	r3, [r7, #8]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	699b      	ldr	r3, [r3, #24]
 80057bc:	60bb      	str	r3, [r7, #8]
 80057be:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2200      	movs	r2, #0
 80057c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80057c8:	bf00      	nop
 80057ca:	3710      	adds	r7, #16
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}

080057d0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b084      	sub	sp, #16
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057de:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	685a      	ldr	r2, [r3, #4]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80057ee:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80057f0:	2300      	movs	r3, #0
 80057f2:	60bb      	str	r3, [r7, #8]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	695b      	ldr	r3, [r3, #20]
 80057fa:	60bb      	str	r3, [r7, #8]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	681a      	ldr	r2, [r3, #0]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f042 0201 	orr.w	r2, r2, #1
 800580a:	601a      	str	r2, [r3, #0]
 800580c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800581c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005828:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800582c:	d172      	bne.n	8005914 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800582e:	7bfb      	ldrb	r3, [r7, #15]
 8005830:	2b22      	cmp	r3, #34	; 0x22
 8005832:	d002      	beq.n	800583a <I2C_Slave_STOPF+0x6a>
 8005834:	7bfb      	ldrb	r3, [r7, #15]
 8005836:	2b2a      	cmp	r3, #42	; 0x2a
 8005838:	d135      	bne.n	80058a6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	b29a      	uxth	r2, r3
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800584c:	b29b      	uxth	r3, r3
 800584e:	2b00      	cmp	r3, #0
 8005850:	d005      	beq.n	800585e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005856:	f043 0204 	orr.w	r2, r3, #4
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	685a      	ldr	r2, [r3, #4]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800586c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005872:	4618      	mov	r0, r3
 8005874:	f7fd ff76 	bl	8003764 <HAL_DMA_GetState>
 8005878:	4603      	mov	r3, r0
 800587a:	2b01      	cmp	r3, #1
 800587c:	d049      	beq.n	8005912 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005882:	4a69      	ldr	r2, [pc, #420]	; (8005a28 <I2C_Slave_STOPF+0x258>)
 8005884:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800588a:	4618      	mov	r0, r3
 800588c:	f7fd fdbe 	bl	800340c <HAL_DMA_Abort_IT>
 8005890:	4603      	mov	r3, r0
 8005892:	2b00      	cmp	r3, #0
 8005894:	d03d      	beq.n	8005912 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800589a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800589c:	687a      	ldr	r2, [r7, #4]
 800589e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80058a0:	4610      	mov	r0, r2
 80058a2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80058a4:	e035      	b.n	8005912 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	b29a      	uxth	r2, r3
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d005      	beq.n	80058ca <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c2:	f043 0204 	orr.w	r2, r3, #4
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	685a      	ldr	r2, [r3, #4]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80058d8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058de:	4618      	mov	r0, r3
 80058e0:	f7fd ff40 	bl	8003764 <HAL_DMA_GetState>
 80058e4:	4603      	mov	r3, r0
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	d014      	beq.n	8005914 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058ee:	4a4e      	ldr	r2, [pc, #312]	; (8005a28 <I2C_Slave_STOPF+0x258>)
 80058f0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058f6:	4618      	mov	r0, r3
 80058f8:	f7fd fd88 	bl	800340c <HAL_DMA_Abort_IT>
 80058fc:	4603      	mov	r3, r0
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d008      	beq.n	8005914 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005906:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005908:	687a      	ldr	r2, [r7, #4]
 800590a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800590c:	4610      	mov	r0, r2
 800590e:	4798      	blx	r3
 8005910:	e000      	b.n	8005914 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005912:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005918:	b29b      	uxth	r3, r3
 800591a:	2b00      	cmp	r3, #0
 800591c:	d03e      	beq.n	800599c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	695b      	ldr	r3, [r3, #20]
 8005924:	f003 0304 	and.w	r3, r3, #4
 8005928:	2b04      	cmp	r3, #4
 800592a:	d112      	bne.n	8005952 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	691a      	ldr	r2, [r3, #16]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005936:	b2d2      	uxtb	r2, r2
 8005938:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800593e:	1c5a      	adds	r2, r3, #1
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005948:	b29b      	uxth	r3, r3
 800594a:	3b01      	subs	r3, #1
 800594c:	b29a      	uxth	r2, r3
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	695b      	ldr	r3, [r3, #20]
 8005958:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800595c:	2b40      	cmp	r3, #64	; 0x40
 800595e:	d112      	bne.n	8005986 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	691a      	ldr	r2, [r3, #16]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800596a:	b2d2      	uxtb	r2, r2
 800596c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005972:	1c5a      	adds	r2, r3, #1
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800597c:	b29b      	uxth	r3, r3
 800597e:	3b01      	subs	r3, #1
 8005980:	b29a      	uxth	r2, r3
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800598a:	b29b      	uxth	r3, r3
 800598c:	2b00      	cmp	r3, #0
 800598e:	d005      	beq.n	800599c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005994:	f043 0204 	orr.w	r2, r3, #4
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d003      	beq.n	80059ac <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80059a4:	6878      	ldr	r0, [r7, #4]
 80059a6:	f000 f8b3 	bl	8005b10 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80059aa:	e039      	b.n	8005a20 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80059ac:	7bfb      	ldrb	r3, [r7, #15]
 80059ae:	2b2a      	cmp	r3, #42	; 0x2a
 80059b0:	d109      	bne.n	80059c6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2200      	movs	r2, #0
 80059b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2228      	movs	r2, #40	; 0x28
 80059bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f7ff f827 	bl	8004a14 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059cc:	b2db      	uxtb	r3, r3
 80059ce:	2b28      	cmp	r3, #40	; 0x28
 80059d0:	d111      	bne.n	80059f6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	4a15      	ldr	r2, [pc, #84]	; (8005a2c <I2C_Slave_STOPF+0x25c>)
 80059d6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2200      	movs	r2, #0
 80059dc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2220      	movs	r2, #32
 80059e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2200      	movs	r2, #0
 80059ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f7ff f828 	bl	8004a44 <HAL_I2C_ListenCpltCallback>
}
 80059f4:	e014      	b.n	8005a20 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059fa:	2b22      	cmp	r3, #34	; 0x22
 80059fc:	d002      	beq.n	8005a04 <I2C_Slave_STOPF+0x234>
 80059fe:	7bfb      	ldrb	r3, [r7, #15]
 8005a00:	2b22      	cmp	r3, #34	; 0x22
 8005a02:	d10d      	bne.n	8005a20 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2200      	movs	r2, #0
 8005a08:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2220      	movs	r2, #32
 8005a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2200      	movs	r2, #0
 8005a16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f7fe fffa 	bl	8004a14 <HAL_I2C_SlaveRxCpltCallback>
}
 8005a20:	bf00      	nop
 8005a22:	3710      	adds	r7, #16
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}
 8005a28:	08006071 	.word	0x08006071
 8005a2c:	ffff0000 	.word	0xffff0000

08005a30 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b084      	sub	sp, #16
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a3e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a44:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	2b08      	cmp	r3, #8
 8005a4a:	d002      	beq.n	8005a52 <I2C_Slave_AF+0x22>
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	2b20      	cmp	r3, #32
 8005a50:	d129      	bne.n	8005aa6 <I2C_Slave_AF+0x76>
 8005a52:	7bfb      	ldrb	r3, [r7, #15]
 8005a54:	2b28      	cmp	r3, #40	; 0x28
 8005a56:	d126      	bne.n	8005aa6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	4a2c      	ldr	r2, [pc, #176]	; (8005b0c <I2C_Slave_AF+0xdc>)
 8005a5c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	685a      	ldr	r2, [r3, #4]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005a6c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005a76:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	681a      	ldr	r2, [r3, #0]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a86:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2220      	movs	r2, #32
 8005a92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f7fe ffd0 	bl	8004a44 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005aa4:	e02e      	b.n	8005b04 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005aa6:	7bfb      	ldrb	r3, [r7, #15]
 8005aa8:	2b21      	cmp	r3, #33	; 0x21
 8005aaa:	d126      	bne.n	8005afa <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	4a17      	ldr	r2, [pc, #92]	; (8005b0c <I2C_Slave_AF+0xdc>)
 8005ab0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2221      	movs	r2, #33	; 0x21
 8005ab6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2220      	movs	r2, #32
 8005abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	685a      	ldr	r2, [r3, #4]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005ad6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005ae0:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	681a      	ldr	r2, [r3, #0]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005af0:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f7fe ff84 	bl	8004a00 <HAL_I2C_SlaveTxCpltCallback>
}
 8005af8:	e004      	b.n	8005b04 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005b02:	615a      	str	r2, [r3, #20]
}
 8005b04:	bf00      	nop
 8005b06:	3710      	adds	r7, #16
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}
 8005b0c:	ffff0000 	.word	0xffff0000

08005b10 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b084      	sub	sp, #16
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b1e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b26:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005b28:	7bbb      	ldrb	r3, [r7, #14]
 8005b2a:	2b10      	cmp	r3, #16
 8005b2c:	d002      	beq.n	8005b34 <I2C_ITError+0x24>
 8005b2e:	7bbb      	ldrb	r3, [r7, #14]
 8005b30:	2b40      	cmp	r3, #64	; 0x40
 8005b32:	d10a      	bne.n	8005b4a <I2C_ITError+0x3a>
 8005b34:	7bfb      	ldrb	r3, [r7, #15]
 8005b36:	2b22      	cmp	r3, #34	; 0x22
 8005b38:	d107      	bne.n	8005b4a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b48:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005b4a:	7bfb      	ldrb	r3, [r7, #15]
 8005b4c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005b50:	2b28      	cmp	r3, #40	; 0x28
 8005b52:	d107      	bne.n	8005b64 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2200      	movs	r2, #0
 8005b58:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2228      	movs	r2, #40	; 0x28
 8005b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005b62:	e015      	b.n	8005b90 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b72:	d00a      	beq.n	8005b8a <I2C_ITError+0x7a>
 8005b74:	7bfb      	ldrb	r3, [r7, #15]
 8005b76:	2b60      	cmp	r3, #96	; 0x60
 8005b78:	d007      	beq.n	8005b8a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2220      	movs	r2, #32
 8005b7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2200      	movs	r2, #0
 8005b86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b9e:	d162      	bne.n	8005c66 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	685a      	ldr	r2, [r3, #4]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005bae:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bb4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005bb8:	b2db      	uxtb	r3, r3
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d020      	beq.n	8005c00 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bc2:	4a6a      	ldr	r2, [pc, #424]	; (8005d6c <I2C_ITError+0x25c>)
 8005bc4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f7fd fc1e 	bl	800340c <HAL_DMA_Abort_IT>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	f000 8089 	beq.w	8005cea <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f022 0201 	bic.w	r2, r2, #1
 8005be6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2220      	movs	r2, #32
 8005bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bf6:	687a      	ldr	r2, [r7, #4]
 8005bf8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005bfa:	4610      	mov	r0, r2
 8005bfc:	4798      	blx	r3
 8005bfe:	e074      	b.n	8005cea <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c04:	4a59      	ldr	r2, [pc, #356]	; (8005d6c <I2C_ITError+0x25c>)
 8005c06:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f7fd fbfd 	bl	800340c <HAL_DMA_Abort_IT>
 8005c12:	4603      	mov	r3, r0
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d068      	beq.n	8005cea <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	695b      	ldr	r3, [r3, #20]
 8005c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c22:	2b40      	cmp	r3, #64	; 0x40
 8005c24:	d10b      	bne.n	8005c3e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	691a      	ldr	r2, [r3, #16]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c30:	b2d2      	uxtb	r2, r2
 8005c32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c38:	1c5a      	adds	r2, r3, #1
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	681a      	ldr	r2, [r3, #0]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f022 0201 	bic.w	r2, r2, #1
 8005c4c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2220      	movs	r2, #32
 8005c52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c5c:	687a      	ldr	r2, [r7, #4]
 8005c5e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005c60:	4610      	mov	r0, r2
 8005c62:	4798      	blx	r3
 8005c64:	e041      	b.n	8005cea <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	2b60      	cmp	r3, #96	; 0x60
 8005c70:	d125      	bne.n	8005cbe <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2220      	movs	r2, #32
 8005c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	695b      	ldr	r3, [r3, #20]
 8005c86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c8a:	2b40      	cmp	r3, #64	; 0x40
 8005c8c:	d10b      	bne.n	8005ca6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	691a      	ldr	r2, [r3, #16]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c98:	b2d2      	uxtb	r2, r2
 8005c9a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca0:	1c5a      	adds	r2, r3, #1
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	681a      	ldr	r2, [r3, #0]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f022 0201 	bic.w	r2, r2, #1
 8005cb4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f7fe feec 	bl	8004a94 <HAL_I2C_AbortCpltCallback>
 8005cbc:	e015      	b.n	8005cea <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	695b      	ldr	r3, [r3, #20]
 8005cc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cc8:	2b40      	cmp	r3, #64	; 0x40
 8005cca:	d10b      	bne.n	8005ce4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	691a      	ldr	r2, [r3, #16]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd6:	b2d2      	uxtb	r2, r2
 8005cd8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cde:	1c5a      	adds	r2, r3, #1
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f7fe fecb 	bl	8004a80 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cee:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	f003 0301 	and.w	r3, r3, #1
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d10e      	bne.n	8005d18 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d109      	bne.n	8005d18 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d104      	bne.n	8005d18 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d007      	beq.n	8005d28 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	685a      	ldr	r2, [r3, #4]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005d26:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d2e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d34:	f003 0304 	and.w	r3, r3, #4
 8005d38:	2b04      	cmp	r3, #4
 8005d3a:	d113      	bne.n	8005d64 <I2C_ITError+0x254>
 8005d3c:	7bfb      	ldrb	r3, [r7, #15]
 8005d3e:	2b28      	cmp	r3, #40	; 0x28
 8005d40:	d110      	bne.n	8005d64 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	4a0a      	ldr	r2, [pc, #40]	; (8005d70 <I2C_ITError+0x260>)
 8005d46:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2220      	movs	r2, #32
 8005d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f7fe fe70 	bl	8004a44 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005d64:	bf00      	nop
 8005d66:	3710      	adds	r7, #16
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}
 8005d6c:	08006071 	.word	0x08006071
 8005d70:	ffff0000 	.word	0xffff0000

08005d74 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b088      	sub	sp, #32
 8005d78:	af02      	add	r7, sp, #8
 8005d7a:	60f8      	str	r0, [r7, #12]
 8005d7c:	4608      	mov	r0, r1
 8005d7e:	4611      	mov	r1, r2
 8005d80:	461a      	mov	r2, r3
 8005d82:	4603      	mov	r3, r0
 8005d84:	817b      	strh	r3, [r7, #10]
 8005d86:	460b      	mov	r3, r1
 8005d88:	813b      	strh	r3, [r7, #8]
 8005d8a:	4613      	mov	r3, r2
 8005d8c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	681a      	ldr	r2, [r3, #0]
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d9c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da0:	9300      	str	r3, [sp, #0]
 8005da2:	6a3b      	ldr	r3, [r7, #32]
 8005da4:	2200      	movs	r2, #0
 8005da6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005daa:	68f8      	ldr	r0, [r7, #12]
 8005dac:	f000 fa08 	bl	80061c0 <I2C_WaitOnFlagUntilTimeout>
 8005db0:	4603      	mov	r3, r0
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d00d      	beq.n	8005dd2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dc4:	d103      	bne.n	8005dce <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005dcc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005dce:	2303      	movs	r3, #3
 8005dd0:	e05f      	b.n	8005e92 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005dd2:	897b      	ldrh	r3, [r7, #10]
 8005dd4:	b2db      	uxtb	r3, r3
 8005dd6:	461a      	mov	r2, r3
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005de0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de4:	6a3a      	ldr	r2, [r7, #32]
 8005de6:	492d      	ldr	r1, [pc, #180]	; (8005e9c <I2C_RequestMemoryWrite+0x128>)
 8005de8:	68f8      	ldr	r0, [r7, #12]
 8005dea:	f000 fa40 	bl	800626e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005dee:	4603      	mov	r3, r0
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d001      	beq.n	8005df8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005df4:	2301      	movs	r3, #1
 8005df6:	e04c      	b.n	8005e92 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005df8:	2300      	movs	r3, #0
 8005dfa:	617b      	str	r3, [r7, #20]
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	695b      	ldr	r3, [r3, #20]
 8005e02:	617b      	str	r3, [r7, #20]
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	699b      	ldr	r3, [r3, #24]
 8005e0a:	617b      	str	r3, [r7, #20]
 8005e0c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e10:	6a39      	ldr	r1, [r7, #32]
 8005e12:	68f8      	ldr	r0, [r7, #12]
 8005e14:	f000 faaa 	bl	800636c <I2C_WaitOnTXEFlagUntilTimeout>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d00d      	beq.n	8005e3a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e22:	2b04      	cmp	r3, #4
 8005e24:	d107      	bne.n	8005e36 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	681a      	ldr	r2, [r3, #0]
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e34:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005e36:	2301      	movs	r3, #1
 8005e38:	e02b      	b.n	8005e92 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005e3a:	88fb      	ldrh	r3, [r7, #6]
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d105      	bne.n	8005e4c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005e40:	893b      	ldrh	r3, [r7, #8]
 8005e42:	b2da      	uxtb	r2, r3
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	611a      	str	r2, [r3, #16]
 8005e4a:	e021      	b.n	8005e90 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005e4c:	893b      	ldrh	r3, [r7, #8]
 8005e4e:	0a1b      	lsrs	r3, r3, #8
 8005e50:	b29b      	uxth	r3, r3
 8005e52:	b2da      	uxtb	r2, r3
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e5c:	6a39      	ldr	r1, [r7, #32]
 8005e5e:	68f8      	ldr	r0, [r7, #12]
 8005e60:	f000 fa84 	bl	800636c <I2C_WaitOnTXEFlagUntilTimeout>
 8005e64:	4603      	mov	r3, r0
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d00d      	beq.n	8005e86 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e6e:	2b04      	cmp	r3, #4
 8005e70:	d107      	bne.n	8005e82 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e80:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005e82:	2301      	movs	r3, #1
 8005e84:	e005      	b.n	8005e92 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005e86:	893b      	ldrh	r3, [r7, #8]
 8005e88:	b2da      	uxtb	r2, r3
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005e90:	2300      	movs	r3, #0
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3718      	adds	r7, #24
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}
 8005e9a:	bf00      	nop
 8005e9c:	00010002 	.word	0x00010002

08005ea0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b088      	sub	sp, #32
 8005ea4:	af02      	add	r7, sp, #8
 8005ea6:	60f8      	str	r0, [r7, #12]
 8005ea8:	4608      	mov	r0, r1
 8005eaa:	4611      	mov	r1, r2
 8005eac:	461a      	mov	r2, r3
 8005eae:	4603      	mov	r3, r0
 8005eb0:	817b      	strh	r3, [r7, #10]
 8005eb2:	460b      	mov	r3, r1
 8005eb4:	813b      	strh	r3, [r7, #8]
 8005eb6:	4613      	mov	r3, r2
 8005eb8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	681a      	ldr	r2, [r3, #0]
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005ec8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	681a      	ldr	r2, [r3, #0]
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ed8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005edc:	9300      	str	r3, [sp, #0]
 8005ede:	6a3b      	ldr	r3, [r7, #32]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005ee6:	68f8      	ldr	r0, [r7, #12]
 8005ee8:	f000 f96a 	bl	80061c0 <I2C_WaitOnFlagUntilTimeout>
 8005eec:	4603      	mov	r3, r0
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d00d      	beq.n	8005f0e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005efc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f00:	d103      	bne.n	8005f0a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f08:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005f0a:	2303      	movs	r3, #3
 8005f0c:	e0aa      	b.n	8006064 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005f0e:	897b      	ldrh	r3, [r7, #10]
 8005f10:	b2db      	uxtb	r3, r3
 8005f12:	461a      	mov	r2, r3
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005f1c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f20:	6a3a      	ldr	r2, [r7, #32]
 8005f22:	4952      	ldr	r1, [pc, #328]	; (800606c <I2C_RequestMemoryRead+0x1cc>)
 8005f24:	68f8      	ldr	r0, [r7, #12]
 8005f26:	f000 f9a2 	bl	800626e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d001      	beq.n	8005f34 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005f30:	2301      	movs	r3, #1
 8005f32:	e097      	b.n	8006064 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f34:	2300      	movs	r3, #0
 8005f36:	617b      	str	r3, [r7, #20]
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	695b      	ldr	r3, [r3, #20]
 8005f3e:	617b      	str	r3, [r7, #20]
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	699b      	ldr	r3, [r3, #24]
 8005f46:	617b      	str	r3, [r7, #20]
 8005f48:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f4c:	6a39      	ldr	r1, [r7, #32]
 8005f4e:	68f8      	ldr	r0, [r7, #12]
 8005f50:	f000 fa0c 	bl	800636c <I2C_WaitOnTXEFlagUntilTimeout>
 8005f54:	4603      	mov	r3, r0
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d00d      	beq.n	8005f76 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f5e:	2b04      	cmp	r3, #4
 8005f60:	d107      	bne.n	8005f72 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	681a      	ldr	r2, [r3, #0]
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f70:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	e076      	b.n	8006064 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005f76:	88fb      	ldrh	r3, [r7, #6]
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	d105      	bne.n	8005f88 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005f7c:	893b      	ldrh	r3, [r7, #8]
 8005f7e:	b2da      	uxtb	r2, r3
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	611a      	str	r2, [r3, #16]
 8005f86:	e021      	b.n	8005fcc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005f88:	893b      	ldrh	r3, [r7, #8]
 8005f8a:	0a1b      	lsrs	r3, r3, #8
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	b2da      	uxtb	r2, r3
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f98:	6a39      	ldr	r1, [r7, #32]
 8005f9a:	68f8      	ldr	r0, [r7, #12]
 8005f9c:	f000 f9e6 	bl	800636c <I2C_WaitOnTXEFlagUntilTimeout>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d00d      	beq.n	8005fc2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005faa:	2b04      	cmp	r3, #4
 8005fac:	d107      	bne.n	8005fbe <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	681a      	ldr	r2, [r3, #0]
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fbc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	e050      	b.n	8006064 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005fc2:	893b      	ldrh	r3, [r7, #8]
 8005fc4:	b2da      	uxtb	r2, r3
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005fcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fce:	6a39      	ldr	r1, [r7, #32]
 8005fd0:	68f8      	ldr	r0, [r7, #12]
 8005fd2:	f000 f9cb 	bl	800636c <I2C_WaitOnTXEFlagUntilTimeout>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d00d      	beq.n	8005ff8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fe0:	2b04      	cmp	r3, #4
 8005fe2:	d107      	bne.n	8005ff4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	681a      	ldr	r2, [r3, #0]
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ff2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	e035      	b.n	8006064 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	681a      	ldr	r2, [r3, #0]
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006006:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800600a:	9300      	str	r3, [sp, #0]
 800600c:	6a3b      	ldr	r3, [r7, #32]
 800600e:	2200      	movs	r2, #0
 8006010:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006014:	68f8      	ldr	r0, [r7, #12]
 8006016:	f000 f8d3 	bl	80061c0 <I2C_WaitOnFlagUntilTimeout>
 800601a:	4603      	mov	r3, r0
 800601c:	2b00      	cmp	r3, #0
 800601e:	d00d      	beq.n	800603c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800602a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800602e:	d103      	bne.n	8006038 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006036:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006038:	2303      	movs	r3, #3
 800603a:	e013      	b.n	8006064 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800603c:	897b      	ldrh	r3, [r7, #10]
 800603e:	b2db      	uxtb	r3, r3
 8006040:	f043 0301 	orr.w	r3, r3, #1
 8006044:	b2da      	uxtb	r2, r3
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800604c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800604e:	6a3a      	ldr	r2, [r7, #32]
 8006050:	4906      	ldr	r1, [pc, #24]	; (800606c <I2C_RequestMemoryRead+0x1cc>)
 8006052:	68f8      	ldr	r0, [r7, #12]
 8006054:	f000 f90b 	bl	800626e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006058:	4603      	mov	r3, r0
 800605a:	2b00      	cmp	r3, #0
 800605c:	d001      	beq.n	8006062 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800605e:	2301      	movs	r3, #1
 8006060:	e000      	b.n	8006064 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006062:	2300      	movs	r3, #0
}
 8006064:	4618      	mov	r0, r3
 8006066:	3718      	adds	r7, #24
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}
 800606c:	00010002 	.word	0x00010002

08006070 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b086      	sub	sp, #24
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006078:	2300      	movs	r3, #0
 800607a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006080:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006088:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800608a:	4b4b      	ldr	r3, [pc, #300]	; (80061b8 <I2C_DMAAbort+0x148>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	08db      	lsrs	r3, r3, #3
 8006090:	4a4a      	ldr	r2, [pc, #296]	; (80061bc <I2C_DMAAbort+0x14c>)
 8006092:	fba2 2303 	umull	r2, r3, r2, r3
 8006096:	0a1a      	lsrs	r2, r3, #8
 8006098:	4613      	mov	r3, r2
 800609a:	009b      	lsls	r3, r3, #2
 800609c:	4413      	add	r3, r2
 800609e:	00da      	lsls	r2, r3, #3
 80060a0:	1ad3      	subs	r3, r2, r3
 80060a2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d106      	bne.n	80060b8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ae:	f043 0220 	orr.w	r2, r3, #32
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80060b6:	e00a      	b.n	80060ce <I2C_DMAAbort+0x5e>
    }
    count--;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	3b01      	subs	r3, #1
 80060bc:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80060c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060cc:	d0ea      	beq.n	80060a4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d003      	beq.n	80060de <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060da:	2200      	movs	r2, #0
 80060dc:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d003      	beq.n	80060ee <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ea:	2200      	movs	r2, #0
 80060ec:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	681a      	ldr	r2, [r3, #0]
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060fc:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	2200      	movs	r2, #0
 8006102:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006108:	2b00      	cmp	r3, #0
 800610a:	d003      	beq.n	8006114 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006110:	2200      	movs	r2, #0
 8006112:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006118:	2b00      	cmp	r3, #0
 800611a:	d003      	beq.n	8006124 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006120:	2200      	movs	r2, #0
 8006122:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	681a      	ldr	r2, [r3, #0]
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f022 0201 	bic.w	r2, r2, #1
 8006132:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800613a:	b2db      	uxtb	r3, r3
 800613c:	2b60      	cmp	r3, #96	; 0x60
 800613e:	d10e      	bne.n	800615e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	2220      	movs	r2, #32
 8006144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	2200      	movs	r2, #0
 800614c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	2200      	movs	r2, #0
 8006154:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006156:	6978      	ldr	r0, [r7, #20]
 8006158:	f7fe fc9c 	bl	8004a94 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800615c:	e027      	b.n	80061ae <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800615e:	7cfb      	ldrb	r3, [r7, #19]
 8006160:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006164:	2b28      	cmp	r3, #40	; 0x28
 8006166:	d117      	bne.n	8006198 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	681a      	ldr	r2, [r3, #0]
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f042 0201 	orr.w	r2, r2, #1
 8006176:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	681a      	ldr	r2, [r3, #0]
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006186:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	2200      	movs	r2, #0
 800618c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	2228      	movs	r2, #40	; 0x28
 8006192:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006196:	e007      	b.n	80061a8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	2220      	movs	r2, #32
 800619c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	2200      	movs	r2, #0
 80061a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80061a8:	6978      	ldr	r0, [r7, #20]
 80061aa:	f7fe fc69 	bl	8004a80 <HAL_I2C_ErrorCallback>
}
 80061ae:	bf00      	nop
 80061b0:	3718      	adds	r7, #24
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}
 80061b6:	bf00      	nop
 80061b8:	20000004 	.word	0x20000004
 80061bc:	14f8b589 	.word	0x14f8b589

080061c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b084      	sub	sp, #16
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	60f8      	str	r0, [r7, #12]
 80061c8:	60b9      	str	r1, [r7, #8]
 80061ca:	603b      	str	r3, [r7, #0]
 80061cc:	4613      	mov	r3, r2
 80061ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80061d0:	e025      	b.n	800621e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061d8:	d021      	beq.n	800621e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061da:	f7fc fe5f 	bl	8002e9c <HAL_GetTick>
 80061de:	4602      	mov	r2, r0
 80061e0:	69bb      	ldr	r3, [r7, #24]
 80061e2:	1ad3      	subs	r3, r2, r3
 80061e4:	683a      	ldr	r2, [r7, #0]
 80061e6:	429a      	cmp	r2, r3
 80061e8:	d302      	bcc.n	80061f0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d116      	bne.n	800621e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2200      	movs	r2, #0
 80061f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2220      	movs	r2, #32
 80061fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	2200      	movs	r2, #0
 8006202:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800620a:	f043 0220 	orr.w	r2, r3, #32
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	2200      	movs	r2, #0
 8006216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800621a:	2301      	movs	r3, #1
 800621c:	e023      	b.n	8006266 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	0c1b      	lsrs	r3, r3, #16
 8006222:	b2db      	uxtb	r3, r3
 8006224:	2b01      	cmp	r3, #1
 8006226:	d10d      	bne.n	8006244 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	695b      	ldr	r3, [r3, #20]
 800622e:	43da      	mvns	r2, r3
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	4013      	ands	r3, r2
 8006234:	b29b      	uxth	r3, r3
 8006236:	2b00      	cmp	r3, #0
 8006238:	bf0c      	ite	eq
 800623a:	2301      	moveq	r3, #1
 800623c:	2300      	movne	r3, #0
 800623e:	b2db      	uxtb	r3, r3
 8006240:	461a      	mov	r2, r3
 8006242:	e00c      	b.n	800625e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	699b      	ldr	r3, [r3, #24]
 800624a:	43da      	mvns	r2, r3
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	4013      	ands	r3, r2
 8006250:	b29b      	uxth	r3, r3
 8006252:	2b00      	cmp	r3, #0
 8006254:	bf0c      	ite	eq
 8006256:	2301      	moveq	r3, #1
 8006258:	2300      	movne	r3, #0
 800625a:	b2db      	uxtb	r3, r3
 800625c:	461a      	mov	r2, r3
 800625e:	79fb      	ldrb	r3, [r7, #7]
 8006260:	429a      	cmp	r2, r3
 8006262:	d0b6      	beq.n	80061d2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006264:	2300      	movs	r3, #0
}
 8006266:	4618      	mov	r0, r3
 8006268:	3710      	adds	r7, #16
 800626a:	46bd      	mov	sp, r7
 800626c:	bd80      	pop	{r7, pc}

0800626e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800626e:	b580      	push	{r7, lr}
 8006270:	b084      	sub	sp, #16
 8006272:	af00      	add	r7, sp, #0
 8006274:	60f8      	str	r0, [r7, #12]
 8006276:	60b9      	str	r1, [r7, #8]
 8006278:	607a      	str	r2, [r7, #4]
 800627a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800627c:	e051      	b.n	8006322 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	695b      	ldr	r3, [r3, #20]
 8006284:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006288:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800628c:	d123      	bne.n	80062d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	681a      	ldr	r2, [r3, #0]
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800629c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80062a6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	2200      	movs	r2, #0
 80062ac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2220      	movs	r2, #32
 80062b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2200      	movs	r2, #0
 80062ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062c2:	f043 0204 	orr.w	r2, r3, #4
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2200      	movs	r2, #0
 80062ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80062d2:	2301      	movs	r3, #1
 80062d4:	e046      	b.n	8006364 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062dc:	d021      	beq.n	8006322 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062de:	f7fc fddd 	bl	8002e9c <HAL_GetTick>
 80062e2:	4602      	mov	r2, r0
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	1ad3      	subs	r3, r2, r3
 80062e8:	687a      	ldr	r2, [r7, #4]
 80062ea:	429a      	cmp	r2, r3
 80062ec:	d302      	bcc.n	80062f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d116      	bne.n	8006322 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2200      	movs	r2, #0
 80062f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2220      	movs	r2, #32
 80062fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2200      	movs	r2, #0
 8006306:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800630e:	f043 0220 	orr.w	r2, r3, #32
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2200      	movs	r2, #0
 800631a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800631e:	2301      	movs	r3, #1
 8006320:	e020      	b.n	8006364 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	0c1b      	lsrs	r3, r3, #16
 8006326:	b2db      	uxtb	r3, r3
 8006328:	2b01      	cmp	r3, #1
 800632a:	d10c      	bne.n	8006346 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	695b      	ldr	r3, [r3, #20]
 8006332:	43da      	mvns	r2, r3
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	4013      	ands	r3, r2
 8006338:	b29b      	uxth	r3, r3
 800633a:	2b00      	cmp	r3, #0
 800633c:	bf14      	ite	ne
 800633e:	2301      	movne	r3, #1
 8006340:	2300      	moveq	r3, #0
 8006342:	b2db      	uxtb	r3, r3
 8006344:	e00b      	b.n	800635e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	699b      	ldr	r3, [r3, #24]
 800634c:	43da      	mvns	r2, r3
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	4013      	ands	r3, r2
 8006352:	b29b      	uxth	r3, r3
 8006354:	2b00      	cmp	r3, #0
 8006356:	bf14      	ite	ne
 8006358:	2301      	movne	r3, #1
 800635a:	2300      	moveq	r3, #0
 800635c:	b2db      	uxtb	r3, r3
 800635e:	2b00      	cmp	r3, #0
 8006360:	d18d      	bne.n	800627e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006362:	2300      	movs	r3, #0
}
 8006364:	4618      	mov	r0, r3
 8006366:	3710      	adds	r7, #16
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}

0800636c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b084      	sub	sp, #16
 8006370:	af00      	add	r7, sp, #0
 8006372:	60f8      	str	r0, [r7, #12]
 8006374:	60b9      	str	r1, [r7, #8]
 8006376:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006378:	e02d      	b.n	80063d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800637a:	68f8      	ldr	r0, [r7, #12]
 800637c:	f000 f900 	bl	8006580 <I2C_IsAcknowledgeFailed>
 8006380:	4603      	mov	r3, r0
 8006382:	2b00      	cmp	r3, #0
 8006384:	d001      	beq.n	800638a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006386:	2301      	movs	r3, #1
 8006388:	e02d      	b.n	80063e6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006390:	d021      	beq.n	80063d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006392:	f7fc fd83 	bl	8002e9c <HAL_GetTick>
 8006396:	4602      	mov	r2, r0
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	1ad3      	subs	r3, r2, r3
 800639c:	68ba      	ldr	r2, [r7, #8]
 800639e:	429a      	cmp	r2, r3
 80063a0:	d302      	bcc.n	80063a8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d116      	bne.n	80063d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2200      	movs	r2, #0
 80063ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2220      	movs	r2, #32
 80063b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2200      	movs	r2, #0
 80063ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063c2:	f043 0220 	orr.w	r2, r3, #32
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2200      	movs	r2, #0
 80063ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80063d2:	2301      	movs	r3, #1
 80063d4:	e007      	b.n	80063e6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	695b      	ldr	r3, [r3, #20]
 80063dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063e0:	2b80      	cmp	r3, #128	; 0x80
 80063e2:	d1ca      	bne.n	800637a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80063e4:	2300      	movs	r3, #0
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3710      	adds	r7, #16
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}

080063ee <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80063ee:	b580      	push	{r7, lr}
 80063f0:	b084      	sub	sp, #16
 80063f2:	af00      	add	r7, sp, #0
 80063f4:	60f8      	str	r0, [r7, #12]
 80063f6:	60b9      	str	r1, [r7, #8]
 80063f8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80063fa:	e02d      	b.n	8006458 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80063fc:	68f8      	ldr	r0, [r7, #12]
 80063fe:	f000 f8bf 	bl	8006580 <I2C_IsAcknowledgeFailed>
 8006402:	4603      	mov	r3, r0
 8006404:	2b00      	cmp	r3, #0
 8006406:	d001      	beq.n	800640c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006408:	2301      	movs	r3, #1
 800640a:	e02d      	b.n	8006468 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006412:	d021      	beq.n	8006458 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006414:	f7fc fd42 	bl	8002e9c <HAL_GetTick>
 8006418:	4602      	mov	r2, r0
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	1ad3      	subs	r3, r2, r3
 800641e:	68ba      	ldr	r2, [r7, #8]
 8006420:	429a      	cmp	r2, r3
 8006422:	d302      	bcc.n	800642a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d116      	bne.n	8006458 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2200      	movs	r2, #0
 800642e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2220      	movs	r2, #32
 8006434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2200      	movs	r2, #0
 800643c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006444:	f043 0220 	orr.w	r2, r3, #32
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2200      	movs	r2, #0
 8006450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006454:	2301      	movs	r3, #1
 8006456:	e007      	b.n	8006468 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	695b      	ldr	r3, [r3, #20]
 800645e:	f003 0304 	and.w	r3, r3, #4
 8006462:	2b04      	cmp	r3, #4
 8006464:	d1ca      	bne.n	80063fc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006466:	2300      	movs	r3, #0
}
 8006468:	4618      	mov	r0, r3
 800646a:	3710      	adds	r7, #16
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}

08006470 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006470:	b480      	push	{r7}
 8006472:	b085      	sub	sp, #20
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006478:	2300      	movs	r3, #0
 800647a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800647c:	4b13      	ldr	r3, [pc, #76]	; (80064cc <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	08db      	lsrs	r3, r3, #3
 8006482:	4a13      	ldr	r2, [pc, #76]	; (80064d0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006484:	fba2 2303 	umull	r2, r3, r2, r3
 8006488:	0a1a      	lsrs	r2, r3, #8
 800648a:	4613      	mov	r3, r2
 800648c:	009b      	lsls	r3, r3, #2
 800648e:	4413      	add	r3, r2
 8006490:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	3b01      	subs	r3, #1
 8006496:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d107      	bne.n	80064ae <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064a2:	f043 0220 	orr.w	r2, r3, #32
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80064aa:	2301      	movs	r3, #1
 80064ac:	e008      	b.n	80064c0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80064b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064bc:	d0e9      	beq.n	8006492 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80064be:	2300      	movs	r3, #0
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	3714      	adds	r7, #20
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr
 80064cc:	20000004 	.word	0x20000004
 80064d0:	14f8b589 	.word	0x14f8b589

080064d4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b084      	sub	sp, #16
 80064d8:	af00      	add	r7, sp, #0
 80064da:	60f8      	str	r0, [r7, #12]
 80064dc:	60b9      	str	r1, [r7, #8]
 80064de:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80064e0:	e042      	b.n	8006568 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	695b      	ldr	r3, [r3, #20]
 80064e8:	f003 0310 	and.w	r3, r3, #16
 80064ec:	2b10      	cmp	r3, #16
 80064ee:	d119      	bne.n	8006524 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f06f 0210 	mvn.w	r2, #16
 80064f8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	2200      	movs	r2, #0
 80064fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	2220      	movs	r2, #32
 8006504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2200      	movs	r2, #0
 800650c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2200      	movs	r2, #0
 800651c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006520:	2301      	movs	r3, #1
 8006522:	e029      	b.n	8006578 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006524:	f7fc fcba 	bl	8002e9c <HAL_GetTick>
 8006528:	4602      	mov	r2, r0
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	1ad3      	subs	r3, r2, r3
 800652e:	68ba      	ldr	r2, [r7, #8]
 8006530:	429a      	cmp	r2, r3
 8006532:	d302      	bcc.n	800653a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d116      	bne.n	8006568 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2200      	movs	r2, #0
 800653e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	2220      	movs	r2, #32
 8006544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2200      	movs	r2, #0
 800654c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006554:	f043 0220 	orr.w	r2, r3, #32
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2200      	movs	r2, #0
 8006560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006564:	2301      	movs	r3, #1
 8006566:	e007      	b.n	8006578 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	695b      	ldr	r3, [r3, #20]
 800656e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006572:	2b40      	cmp	r3, #64	; 0x40
 8006574:	d1b5      	bne.n	80064e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006576:	2300      	movs	r3, #0
}
 8006578:	4618      	mov	r0, r3
 800657a:	3710      	adds	r7, #16
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}

08006580 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006580:	b480      	push	{r7}
 8006582:	b083      	sub	sp, #12
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	695b      	ldr	r3, [r3, #20]
 800658e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006592:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006596:	d11b      	bne.n	80065d0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80065a0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2200      	movs	r2, #0
 80065a6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2220      	movs	r2, #32
 80065ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2200      	movs	r2, #0
 80065b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065bc:	f043 0204 	orr.w	r2, r3, #4
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2200      	movs	r2, #0
 80065c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80065cc:	2301      	movs	r3, #1
 80065ce:	e000      	b.n	80065d2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80065d0:	2300      	movs	r3, #0
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	370c      	adds	r7, #12
 80065d6:	46bd      	mov	sp, r7
 80065d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065dc:	4770      	bx	lr

080065de <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80065de:	b480      	push	{r7}
 80065e0:	b083      	sub	sp, #12
 80065e2:	af00      	add	r7, sp, #0
 80065e4:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ea:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80065ee:	d103      	bne.n	80065f8 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2201      	movs	r2, #1
 80065f4:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80065f6:	e007      	b.n	8006608 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065fc:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006600:	d102      	bne.n	8006608 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2208      	movs	r2, #8
 8006606:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006608:	bf00      	nop
 800660a:	370c      	adds	r7, #12
 800660c:	46bd      	mov	sp, r7
 800660e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006612:	4770      	bx	lr

08006614 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b086      	sub	sp, #24
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d101      	bne.n	8006626 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006622:	2301      	movs	r3, #1
 8006624:	e267      	b.n	8006af6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f003 0301 	and.w	r3, r3, #1
 800662e:	2b00      	cmp	r3, #0
 8006630:	d075      	beq.n	800671e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006632:	4b88      	ldr	r3, [pc, #544]	; (8006854 <HAL_RCC_OscConfig+0x240>)
 8006634:	689b      	ldr	r3, [r3, #8]
 8006636:	f003 030c 	and.w	r3, r3, #12
 800663a:	2b04      	cmp	r3, #4
 800663c:	d00c      	beq.n	8006658 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800663e:	4b85      	ldr	r3, [pc, #532]	; (8006854 <HAL_RCC_OscConfig+0x240>)
 8006640:	689b      	ldr	r3, [r3, #8]
 8006642:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006646:	2b08      	cmp	r3, #8
 8006648:	d112      	bne.n	8006670 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800664a:	4b82      	ldr	r3, [pc, #520]	; (8006854 <HAL_RCC_OscConfig+0x240>)
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006652:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006656:	d10b      	bne.n	8006670 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006658:	4b7e      	ldr	r3, [pc, #504]	; (8006854 <HAL_RCC_OscConfig+0x240>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006660:	2b00      	cmp	r3, #0
 8006662:	d05b      	beq.n	800671c <HAL_RCC_OscConfig+0x108>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d157      	bne.n	800671c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800666c:	2301      	movs	r3, #1
 800666e:	e242      	b.n	8006af6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006678:	d106      	bne.n	8006688 <HAL_RCC_OscConfig+0x74>
 800667a:	4b76      	ldr	r3, [pc, #472]	; (8006854 <HAL_RCC_OscConfig+0x240>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a75      	ldr	r2, [pc, #468]	; (8006854 <HAL_RCC_OscConfig+0x240>)
 8006680:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006684:	6013      	str	r3, [r2, #0]
 8006686:	e01d      	b.n	80066c4 <HAL_RCC_OscConfig+0xb0>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006690:	d10c      	bne.n	80066ac <HAL_RCC_OscConfig+0x98>
 8006692:	4b70      	ldr	r3, [pc, #448]	; (8006854 <HAL_RCC_OscConfig+0x240>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a6f      	ldr	r2, [pc, #444]	; (8006854 <HAL_RCC_OscConfig+0x240>)
 8006698:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800669c:	6013      	str	r3, [r2, #0]
 800669e:	4b6d      	ldr	r3, [pc, #436]	; (8006854 <HAL_RCC_OscConfig+0x240>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a6c      	ldr	r2, [pc, #432]	; (8006854 <HAL_RCC_OscConfig+0x240>)
 80066a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066a8:	6013      	str	r3, [r2, #0]
 80066aa:	e00b      	b.n	80066c4 <HAL_RCC_OscConfig+0xb0>
 80066ac:	4b69      	ldr	r3, [pc, #420]	; (8006854 <HAL_RCC_OscConfig+0x240>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a68      	ldr	r2, [pc, #416]	; (8006854 <HAL_RCC_OscConfig+0x240>)
 80066b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066b6:	6013      	str	r3, [r2, #0]
 80066b8:	4b66      	ldr	r3, [pc, #408]	; (8006854 <HAL_RCC_OscConfig+0x240>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a65      	ldr	r2, [pc, #404]	; (8006854 <HAL_RCC_OscConfig+0x240>)
 80066be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80066c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d013      	beq.n	80066f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066cc:	f7fc fbe6 	bl	8002e9c <HAL_GetTick>
 80066d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066d2:	e008      	b.n	80066e6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80066d4:	f7fc fbe2 	bl	8002e9c <HAL_GetTick>
 80066d8:	4602      	mov	r2, r0
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	1ad3      	subs	r3, r2, r3
 80066de:	2b64      	cmp	r3, #100	; 0x64
 80066e0:	d901      	bls.n	80066e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80066e2:	2303      	movs	r3, #3
 80066e4:	e207      	b.n	8006af6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066e6:	4b5b      	ldr	r3, [pc, #364]	; (8006854 <HAL_RCC_OscConfig+0x240>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d0f0      	beq.n	80066d4 <HAL_RCC_OscConfig+0xc0>
 80066f2:	e014      	b.n	800671e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066f4:	f7fc fbd2 	bl	8002e9c <HAL_GetTick>
 80066f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80066fa:	e008      	b.n	800670e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80066fc:	f7fc fbce 	bl	8002e9c <HAL_GetTick>
 8006700:	4602      	mov	r2, r0
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	1ad3      	subs	r3, r2, r3
 8006706:	2b64      	cmp	r3, #100	; 0x64
 8006708:	d901      	bls.n	800670e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800670a:	2303      	movs	r3, #3
 800670c:	e1f3      	b.n	8006af6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800670e:	4b51      	ldr	r3, [pc, #324]	; (8006854 <HAL_RCC_OscConfig+0x240>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006716:	2b00      	cmp	r3, #0
 8006718:	d1f0      	bne.n	80066fc <HAL_RCC_OscConfig+0xe8>
 800671a:	e000      	b.n	800671e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800671c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f003 0302 	and.w	r3, r3, #2
 8006726:	2b00      	cmp	r3, #0
 8006728:	d063      	beq.n	80067f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800672a:	4b4a      	ldr	r3, [pc, #296]	; (8006854 <HAL_RCC_OscConfig+0x240>)
 800672c:	689b      	ldr	r3, [r3, #8]
 800672e:	f003 030c 	and.w	r3, r3, #12
 8006732:	2b00      	cmp	r3, #0
 8006734:	d00b      	beq.n	800674e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006736:	4b47      	ldr	r3, [pc, #284]	; (8006854 <HAL_RCC_OscConfig+0x240>)
 8006738:	689b      	ldr	r3, [r3, #8]
 800673a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800673e:	2b08      	cmp	r3, #8
 8006740:	d11c      	bne.n	800677c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006742:	4b44      	ldr	r3, [pc, #272]	; (8006854 <HAL_RCC_OscConfig+0x240>)
 8006744:	685b      	ldr	r3, [r3, #4]
 8006746:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800674a:	2b00      	cmp	r3, #0
 800674c:	d116      	bne.n	800677c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800674e:	4b41      	ldr	r3, [pc, #260]	; (8006854 <HAL_RCC_OscConfig+0x240>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f003 0302 	and.w	r3, r3, #2
 8006756:	2b00      	cmp	r3, #0
 8006758:	d005      	beq.n	8006766 <HAL_RCC_OscConfig+0x152>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	68db      	ldr	r3, [r3, #12]
 800675e:	2b01      	cmp	r3, #1
 8006760:	d001      	beq.n	8006766 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006762:	2301      	movs	r3, #1
 8006764:	e1c7      	b.n	8006af6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006766:	4b3b      	ldr	r3, [pc, #236]	; (8006854 <HAL_RCC_OscConfig+0x240>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	691b      	ldr	r3, [r3, #16]
 8006772:	00db      	lsls	r3, r3, #3
 8006774:	4937      	ldr	r1, [pc, #220]	; (8006854 <HAL_RCC_OscConfig+0x240>)
 8006776:	4313      	orrs	r3, r2
 8006778:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800677a:	e03a      	b.n	80067f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	68db      	ldr	r3, [r3, #12]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d020      	beq.n	80067c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006784:	4b34      	ldr	r3, [pc, #208]	; (8006858 <HAL_RCC_OscConfig+0x244>)
 8006786:	2201      	movs	r2, #1
 8006788:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800678a:	f7fc fb87 	bl	8002e9c <HAL_GetTick>
 800678e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006790:	e008      	b.n	80067a4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006792:	f7fc fb83 	bl	8002e9c <HAL_GetTick>
 8006796:	4602      	mov	r2, r0
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	1ad3      	subs	r3, r2, r3
 800679c:	2b02      	cmp	r3, #2
 800679e:	d901      	bls.n	80067a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80067a0:	2303      	movs	r3, #3
 80067a2:	e1a8      	b.n	8006af6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067a4:	4b2b      	ldr	r3, [pc, #172]	; (8006854 <HAL_RCC_OscConfig+0x240>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f003 0302 	and.w	r3, r3, #2
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d0f0      	beq.n	8006792 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067b0:	4b28      	ldr	r3, [pc, #160]	; (8006854 <HAL_RCC_OscConfig+0x240>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	691b      	ldr	r3, [r3, #16]
 80067bc:	00db      	lsls	r3, r3, #3
 80067be:	4925      	ldr	r1, [pc, #148]	; (8006854 <HAL_RCC_OscConfig+0x240>)
 80067c0:	4313      	orrs	r3, r2
 80067c2:	600b      	str	r3, [r1, #0]
 80067c4:	e015      	b.n	80067f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80067c6:	4b24      	ldr	r3, [pc, #144]	; (8006858 <HAL_RCC_OscConfig+0x244>)
 80067c8:	2200      	movs	r2, #0
 80067ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067cc:	f7fc fb66 	bl	8002e9c <HAL_GetTick>
 80067d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80067d2:	e008      	b.n	80067e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80067d4:	f7fc fb62 	bl	8002e9c <HAL_GetTick>
 80067d8:	4602      	mov	r2, r0
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	1ad3      	subs	r3, r2, r3
 80067de:	2b02      	cmp	r3, #2
 80067e0:	d901      	bls.n	80067e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80067e2:	2303      	movs	r3, #3
 80067e4:	e187      	b.n	8006af6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80067e6:	4b1b      	ldr	r3, [pc, #108]	; (8006854 <HAL_RCC_OscConfig+0x240>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f003 0302 	and.w	r3, r3, #2
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d1f0      	bne.n	80067d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f003 0308 	and.w	r3, r3, #8
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d036      	beq.n	800686c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	695b      	ldr	r3, [r3, #20]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d016      	beq.n	8006834 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006806:	4b15      	ldr	r3, [pc, #84]	; (800685c <HAL_RCC_OscConfig+0x248>)
 8006808:	2201      	movs	r2, #1
 800680a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800680c:	f7fc fb46 	bl	8002e9c <HAL_GetTick>
 8006810:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006812:	e008      	b.n	8006826 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006814:	f7fc fb42 	bl	8002e9c <HAL_GetTick>
 8006818:	4602      	mov	r2, r0
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	1ad3      	subs	r3, r2, r3
 800681e:	2b02      	cmp	r3, #2
 8006820:	d901      	bls.n	8006826 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006822:	2303      	movs	r3, #3
 8006824:	e167      	b.n	8006af6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006826:	4b0b      	ldr	r3, [pc, #44]	; (8006854 <HAL_RCC_OscConfig+0x240>)
 8006828:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800682a:	f003 0302 	and.w	r3, r3, #2
 800682e:	2b00      	cmp	r3, #0
 8006830:	d0f0      	beq.n	8006814 <HAL_RCC_OscConfig+0x200>
 8006832:	e01b      	b.n	800686c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006834:	4b09      	ldr	r3, [pc, #36]	; (800685c <HAL_RCC_OscConfig+0x248>)
 8006836:	2200      	movs	r2, #0
 8006838:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800683a:	f7fc fb2f 	bl	8002e9c <HAL_GetTick>
 800683e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006840:	e00e      	b.n	8006860 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006842:	f7fc fb2b 	bl	8002e9c <HAL_GetTick>
 8006846:	4602      	mov	r2, r0
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	1ad3      	subs	r3, r2, r3
 800684c:	2b02      	cmp	r3, #2
 800684e:	d907      	bls.n	8006860 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006850:	2303      	movs	r3, #3
 8006852:	e150      	b.n	8006af6 <HAL_RCC_OscConfig+0x4e2>
 8006854:	40023800 	.word	0x40023800
 8006858:	42470000 	.word	0x42470000
 800685c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006860:	4b88      	ldr	r3, [pc, #544]	; (8006a84 <HAL_RCC_OscConfig+0x470>)
 8006862:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006864:	f003 0302 	and.w	r3, r3, #2
 8006868:	2b00      	cmp	r3, #0
 800686a:	d1ea      	bne.n	8006842 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f003 0304 	and.w	r3, r3, #4
 8006874:	2b00      	cmp	r3, #0
 8006876:	f000 8097 	beq.w	80069a8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800687a:	2300      	movs	r3, #0
 800687c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800687e:	4b81      	ldr	r3, [pc, #516]	; (8006a84 <HAL_RCC_OscConfig+0x470>)
 8006880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006886:	2b00      	cmp	r3, #0
 8006888:	d10f      	bne.n	80068aa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800688a:	2300      	movs	r3, #0
 800688c:	60bb      	str	r3, [r7, #8]
 800688e:	4b7d      	ldr	r3, [pc, #500]	; (8006a84 <HAL_RCC_OscConfig+0x470>)
 8006890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006892:	4a7c      	ldr	r2, [pc, #496]	; (8006a84 <HAL_RCC_OscConfig+0x470>)
 8006894:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006898:	6413      	str	r3, [r2, #64]	; 0x40
 800689a:	4b7a      	ldr	r3, [pc, #488]	; (8006a84 <HAL_RCC_OscConfig+0x470>)
 800689c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800689e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068a2:	60bb      	str	r3, [r7, #8]
 80068a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80068a6:	2301      	movs	r3, #1
 80068a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068aa:	4b77      	ldr	r3, [pc, #476]	; (8006a88 <HAL_RCC_OscConfig+0x474>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d118      	bne.n	80068e8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80068b6:	4b74      	ldr	r3, [pc, #464]	; (8006a88 <HAL_RCC_OscConfig+0x474>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a73      	ldr	r2, [pc, #460]	; (8006a88 <HAL_RCC_OscConfig+0x474>)
 80068bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80068c2:	f7fc faeb 	bl	8002e9c <HAL_GetTick>
 80068c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068c8:	e008      	b.n	80068dc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068ca:	f7fc fae7 	bl	8002e9c <HAL_GetTick>
 80068ce:	4602      	mov	r2, r0
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	1ad3      	subs	r3, r2, r3
 80068d4:	2b02      	cmp	r3, #2
 80068d6:	d901      	bls.n	80068dc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80068d8:	2303      	movs	r3, #3
 80068da:	e10c      	b.n	8006af6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068dc:	4b6a      	ldr	r3, [pc, #424]	; (8006a88 <HAL_RCC_OscConfig+0x474>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d0f0      	beq.n	80068ca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	689b      	ldr	r3, [r3, #8]
 80068ec:	2b01      	cmp	r3, #1
 80068ee:	d106      	bne.n	80068fe <HAL_RCC_OscConfig+0x2ea>
 80068f0:	4b64      	ldr	r3, [pc, #400]	; (8006a84 <HAL_RCC_OscConfig+0x470>)
 80068f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068f4:	4a63      	ldr	r2, [pc, #396]	; (8006a84 <HAL_RCC_OscConfig+0x470>)
 80068f6:	f043 0301 	orr.w	r3, r3, #1
 80068fa:	6713      	str	r3, [r2, #112]	; 0x70
 80068fc:	e01c      	b.n	8006938 <HAL_RCC_OscConfig+0x324>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	689b      	ldr	r3, [r3, #8]
 8006902:	2b05      	cmp	r3, #5
 8006904:	d10c      	bne.n	8006920 <HAL_RCC_OscConfig+0x30c>
 8006906:	4b5f      	ldr	r3, [pc, #380]	; (8006a84 <HAL_RCC_OscConfig+0x470>)
 8006908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800690a:	4a5e      	ldr	r2, [pc, #376]	; (8006a84 <HAL_RCC_OscConfig+0x470>)
 800690c:	f043 0304 	orr.w	r3, r3, #4
 8006910:	6713      	str	r3, [r2, #112]	; 0x70
 8006912:	4b5c      	ldr	r3, [pc, #368]	; (8006a84 <HAL_RCC_OscConfig+0x470>)
 8006914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006916:	4a5b      	ldr	r2, [pc, #364]	; (8006a84 <HAL_RCC_OscConfig+0x470>)
 8006918:	f043 0301 	orr.w	r3, r3, #1
 800691c:	6713      	str	r3, [r2, #112]	; 0x70
 800691e:	e00b      	b.n	8006938 <HAL_RCC_OscConfig+0x324>
 8006920:	4b58      	ldr	r3, [pc, #352]	; (8006a84 <HAL_RCC_OscConfig+0x470>)
 8006922:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006924:	4a57      	ldr	r2, [pc, #348]	; (8006a84 <HAL_RCC_OscConfig+0x470>)
 8006926:	f023 0301 	bic.w	r3, r3, #1
 800692a:	6713      	str	r3, [r2, #112]	; 0x70
 800692c:	4b55      	ldr	r3, [pc, #340]	; (8006a84 <HAL_RCC_OscConfig+0x470>)
 800692e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006930:	4a54      	ldr	r2, [pc, #336]	; (8006a84 <HAL_RCC_OscConfig+0x470>)
 8006932:	f023 0304 	bic.w	r3, r3, #4
 8006936:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	689b      	ldr	r3, [r3, #8]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d015      	beq.n	800696c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006940:	f7fc faac 	bl	8002e9c <HAL_GetTick>
 8006944:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006946:	e00a      	b.n	800695e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006948:	f7fc faa8 	bl	8002e9c <HAL_GetTick>
 800694c:	4602      	mov	r2, r0
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	1ad3      	subs	r3, r2, r3
 8006952:	f241 3288 	movw	r2, #5000	; 0x1388
 8006956:	4293      	cmp	r3, r2
 8006958:	d901      	bls.n	800695e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800695a:	2303      	movs	r3, #3
 800695c:	e0cb      	b.n	8006af6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800695e:	4b49      	ldr	r3, [pc, #292]	; (8006a84 <HAL_RCC_OscConfig+0x470>)
 8006960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006962:	f003 0302 	and.w	r3, r3, #2
 8006966:	2b00      	cmp	r3, #0
 8006968:	d0ee      	beq.n	8006948 <HAL_RCC_OscConfig+0x334>
 800696a:	e014      	b.n	8006996 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800696c:	f7fc fa96 	bl	8002e9c <HAL_GetTick>
 8006970:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006972:	e00a      	b.n	800698a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006974:	f7fc fa92 	bl	8002e9c <HAL_GetTick>
 8006978:	4602      	mov	r2, r0
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	1ad3      	subs	r3, r2, r3
 800697e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006982:	4293      	cmp	r3, r2
 8006984:	d901      	bls.n	800698a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006986:	2303      	movs	r3, #3
 8006988:	e0b5      	b.n	8006af6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800698a:	4b3e      	ldr	r3, [pc, #248]	; (8006a84 <HAL_RCC_OscConfig+0x470>)
 800698c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800698e:	f003 0302 	and.w	r3, r3, #2
 8006992:	2b00      	cmp	r3, #0
 8006994:	d1ee      	bne.n	8006974 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006996:	7dfb      	ldrb	r3, [r7, #23]
 8006998:	2b01      	cmp	r3, #1
 800699a:	d105      	bne.n	80069a8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800699c:	4b39      	ldr	r3, [pc, #228]	; (8006a84 <HAL_RCC_OscConfig+0x470>)
 800699e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069a0:	4a38      	ldr	r2, [pc, #224]	; (8006a84 <HAL_RCC_OscConfig+0x470>)
 80069a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80069a6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	699b      	ldr	r3, [r3, #24]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	f000 80a1 	beq.w	8006af4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80069b2:	4b34      	ldr	r3, [pc, #208]	; (8006a84 <HAL_RCC_OscConfig+0x470>)
 80069b4:	689b      	ldr	r3, [r3, #8]
 80069b6:	f003 030c 	and.w	r3, r3, #12
 80069ba:	2b08      	cmp	r3, #8
 80069bc:	d05c      	beq.n	8006a78 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	699b      	ldr	r3, [r3, #24]
 80069c2:	2b02      	cmp	r3, #2
 80069c4:	d141      	bne.n	8006a4a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069c6:	4b31      	ldr	r3, [pc, #196]	; (8006a8c <HAL_RCC_OscConfig+0x478>)
 80069c8:	2200      	movs	r2, #0
 80069ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069cc:	f7fc fa66 	bl	8002e9c <HAL_GetTick>
 80069d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069d2:	e008      	b.n	80069e6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80069d4:	f7fc fa62 	bl	8002e9c <HAL_GetTick>
 80069d8:	4602      	mov	r2, r0
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	1ad3      	subs	r3, r2, r3
 80069de:	2b02      	cmp	r3, #2
 80069e0:	d901      	bls.n	80069e6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80069e2:	2303      	movs	r3, #3
 80069e4:	e087      	b.n	8006af6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069e6:	4b27      	ldr	r3, [pc, #156]	; (8006a84 <HAL_RCC_OscConfig+0x470>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d1f0      	bne.n	80069d4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	69da      	ldr	r2, [r3, #28]
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6a1b      	ldr	r3, [r3, #32]
 80069fa:	431a      	orrs	r2, r3
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a00:	019b      	lsls	r3, r3, #6
 8006a02:	431a      	orrs	r2, r3
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a08:	085b      	lsrs	r3, r3, #1
 8006a0a:	3b01      	subs	r3, #1
 8006a0c:	041b      	lsls	r3, r3, #16
 8006a0e:	431a      	orrs	r2, r3
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a14:	061b      	lsls	r3, r3, #24
 8006a16:	491b      	ldr	r1, [pc, #108]	; (8006a84 <HAL_RCC_OscConfig+0x470>)
 8006a18:	4313      	orrs	r3, r2
 8006a1a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006a1c:	4b1b      	ldr	r3, [pc, #108]	; (8006a8c <HAL_RCC_OscConfig+0x478>)
 8006a1e:	2201      	movs	r2, #1
 8006a20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a22:	f7fc fa3b 	bl	8002e9c <HAL_GetTick>
 8006a26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a28:	e008      	b.n	8006a3c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a2a:	f7fc fa37 	bl	8002e9c <HAL_GetTick>
 8006a2e:	4602      	mov	r2, r0
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	1ad3      	subs	r3, r2, r3
 8006a34:	2b02      	cmp	r3, #2
 8006a36:	d901      	bls.n	8006a3c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006a38:	2303      	movs	r3, #3
 8006a3a:	e05c      	b.n	8006af6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a3c:	4b11      	ldr	r3, [pc, #68]	; (8006a84 <HAL_RCC_OscConfig+0x470>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d0f0      	beq.n	8006a2a <HAL_RCC_OscConfig+0x416>
 8006a48:	e054      	b.n	8006af4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a4a:	4b10      	ldr	r3, [pc, #64]	; (8006a8c <HAL_RCC_OscConfig+0x478>)
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a50:	f7fc fa24 	bl	8002e9c <HAL_GetTick>
 8006a54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a56:	e008      	b.n	8006a6a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a58:	f7fc fa20 	bl	8002e9c <HAL_GetTick>
 8006a5c:	4602      	mov	r2, r0
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	1ad3      	subs	r3, r2, r3
 8006a62:	2b02      	cmp	r3, #2
 8006a64:	d901      	bls.n	8006a6a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006a66:	2303      	movs	r3, #3
 8006a68:	e045      	b.n	8006af6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a6a:	4b06      	ldr	r3, [pc, #24]	; (8006a84 <HAL_RCC_OscConfig+0x470>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d1f0      	bne.n	8006a58 <HAL_RCC_OscConfig+0x444>
 8006a76:	e03d      	b.n	8006af4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	699b      	ldr	r3, [r3, #24]
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d107      	bne.n	8006a90 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006a80:	2301      	movs	r3, #1
 8006a82:	e038      	b.n	8006af6 <HAL_RCC_OscConfig+0x4e2>
 8006a84:	40023800 	.word	0x40023800
 8006a88:	40007000 	.word	0x40007000
 8006a8c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006a90:	4b1b      	ldr	r3, [pc, #108]	; (8006b00 <HAL_RCC_OscConfig+0x4ec>)
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	699b      	ldr	r3, [r3, #24]
 8006a9a:	2b01      	cmp	r3, #1
 8006a9c:	d028      	beq.n	8006af0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006aa8:	429a      	cmp	r2, r3
 8006aaa:	d121      	bne.n	8006af0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ab6:	429a      	cmp	r2, r3
 8006ab8:	d11a      	bne.n	8006af0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006aba:	68fa      	ldr	r2, [r7, #12]
 8006abc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006ac0:	4013      	ands	r3, r2
 8006ac2:	687a      	ldr	r2, [r7, #4]
 8006ac4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006ac6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d111      	bne.n	8006af0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ad6:	085b      	lsrs	r3, r3, #1
 8006ad8:	3b01      	subs	r3, #1
 8006ada:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006adc:	429a      	cmp	r2, r3
 8006ade:	d107      	bne.n	8006af0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006aec:	429a      	cmp	r2, r3
 8006aee:	d001      	beq.n	8006af4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006af0:	2301      	movs	r3, #1
 8006af2:	e000      	b.n	8006af6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006af4:	2300      	movs	r3, #0
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	3718      	adds	r7, #24
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}
 8006afe:	bf00      	nop
 8006b00:	40023800 	.word	0x40023800

08006b04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b084      	sub	sp, #16
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
 8006b0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d101      	bne.n	8006b18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006b14:	2301      	movs	r3, #1
 8006b16:	e0cc      	b.n	8006cb2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006b18:	4b68      	ldr	r3, [pc, #416]	; (8006cbc <HAL_RCC_ClockConfig+0x1b8>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f003 0307 	and.w	r3, r3, #7
 8006b20:	683a      	ldr	r2, [r7, #0]
 8006b22:	429a      	cmp	r2, r3
 8006b24:	d90c      	bls.n	8006b40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b26:	4b65      	ldr	r3, [pc, #404]	; (8006cbc <HAL_RCC_ClockConfig+0x1b8>)
 8006b28:	683a      	ldr	r2, [r7, #0]
 8006b2a:	b2d2      	uxtb	r2, r2
 8006b2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b2e:	4b63      	ldr	r3, [pc, #396]	; (8006cbc <HAL_RCC_ClockConfig+0x1b8>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f003 0307 	and.w	r3, r3, #7
 8006b36:	683a      	ldr	r2, [r7, #0]
 8006b38:	429a      	cmp	r2, r3
 8006b3a:	d001      	beq.n	8006b40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	e0b8      	b.n	8006cb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f003 0302 	and.w	r3, r3, #2
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d020      	beq.n	8006b8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f003 0304 	and.w	r3, r3, #4
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d005      	beq.n	8006b64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006b58:	4b59      	ldr	r3, [pc, #356]	; (8006cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8006b5a:	689b      	ldr	r3, [r3, #8]
 8006b5c:	4a58      	ldr	r2, [pc, #352]	; (8006cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8006b5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006b62:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f003 0308 	and.w	r3, r3, #8
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d005      	beq.n	8006b7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006b70:	4b53      	ldr	r3, [pc, #332]	; (8006cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8006b72:	689b      	ldr	r3, [r3, #8]
 8006b74:	4a52      	ldr	r2, [pc, #328]	; (8006cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8006b76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006b7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b7c:	4b50      	ldr	r3, [pc, #320]	; (8006cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8006b7e:	689b      	ldr	r3, [r3, #8]
 8006b80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	689b      	ldr	r3, [r3, #8]
 8006b88:	494d      	ldr	r1, [pc, #308]	; (8006cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f003 0301 	and.w	r3, r3, #1
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d044      	beq.n	8006c24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	685b      	ldr	r3, [r3, #4]
 8006b9e:	2b01      	cmp	r3, #1
 8006ba0:	d107      	bne.n	8006bb2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ba2:	4b47      	ldr	r3, [pc, #284]	; (8006cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d119      	bne.n	8006be2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006bae:	2301      	movs	r3, #1
 8006bb0:	e07f      	b.n	8006cb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	2b02      	cmp	r3, #2
 8006bb8:	d003      	beq.n	8006bc2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006bbe:	2b03      	cmp	r3, #3
 8006bc0:	d107      	bne.n	8006bd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006bc2:	4b3f      	ldr	r3, [pc, #252]	; (8006cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d109      	bne.n	8006be2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006bce:	2301      	movs	r3, #1
 8006bd0:	e06f      	b.n	8006cb2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006bd2:	4b3b      	ldr	r3, [pc, #236]	; (8006cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f003 0302 	and.w	r3, r3, #2
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d101      	bne.n	8006be2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006bde:	2301      	movs	r3, #1
 8006be0:	e067      	b.n	8006cb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006be2:	4b37      	ldr	r3, [pc, #220]	; (8006cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8006be4:	689b      	ldr	r3, [r3, #8]
 8006be6:	f023 0203 	bic.w	r2, r3, #3
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	4934      	ldr	r1, [pc, #208]	; (8006cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8006bf0:	4313      	orrs	r3, r2
 8006bf2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006bf4:	f7fc f952 	bl	8002e9c <HAL_GetTick>
 8006bf8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bfa:	e00a      	b.n	8006c12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006bfc:	f7fc f94e 	bl	8002e9c <HAL_GetTick>
 8006c00:	4602      	mov	r2, r0
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	1ad3      	subs	r3, r2, r3
 8006c06:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d901      	bls.n	8006c12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006c0e:	2303      	movs	r3, #3
 8006c10:	e04f      	b.n	8006cb2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c12:	4b2b      	ldr	r3, [pc, #172]	; (8006cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8006c14:	689b      	ldr	r3, [r3, #8]
 8006c16:	f003 020c 	and.w	r2, r3, #12
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	009b      	lsls	r3, r3, #2
 8006c20:	429a      	cmp	r2, r3
 8006c22:	d1eb      	bne.n	8006bfc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006c24:	4b25      	ldr	r3, [pc, #148]	; (8006cbc <HAL_RCC_ClockConfig+0x1b8>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f003 0307 	and.w	r3, r3, #7
 8006c2c:	683a      	ldr	r2, [r7, #0]
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	d20c      	bcs.n	8006c4c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c32:	4b22      	ldr	r3, [pc, #136]	; (8006cbc <HAL_RCC_ClockConfig+0x1b8>)
 8006c34:	683a      	ldr	r2, [r7, #0]
 8006c36:	b2d2      	uxtb	r2, r2
 8006c38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c3a:	4b20      	ldr	r3, [pc, #128]	; (8006cbc <HAL_RCC_ClockConfig+0x1b8>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f003 0307 	and.w	r3, r3, #7
 8006c42:	683a      	ldr	r2, [r7, #0]
 8006c44:	429a      	cmp	r2, r3
 8006c46:	d001      	beq.n	8006c4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006c48:	2301      	movs	r3, #1
 8006c4a:	e032      	b.n	8006cb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f003 0304 	and.w	r3, r3, #4
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d008      	beq.n	8006c6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006c58:	4b19      	ldr	r3, [pc, #100]	; (8006cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8006c5a:	689b      	ldr	r3, [r3, #8]
 8006c5c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	68db      	ldr	r3, [r3, #12]
 8006c64:	4916      	ldr	r1, [pc, #88]	; (8006cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8006c66:	4313      	orrs	r3, r2
 8006c68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f003 0308 	and.w	r3, r3, #8
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d009      	beq.n	8006c8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006c76:	4b12      	ldr	r3, [pc, #72]	; (8006cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8006c78:	689b      	ldr	r3, [r3, #8]
 8006c7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	691b      	ldr	r3, [r3, #16]
 8006c82:	00db      	lsls	r3, r3, #3
 8006c84:	490e      	ldr	r1, [pc, #56]	; (8006cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8006c86:	4313      	orrs	r3, r2
 8006c88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006c8a:	f000 f821 	bl	8006cd0 <HAL_RCC_GetSysClockFreq>
 8006c8e:	4602      	mov	r2, r0
 8006c90:	4b0b      	ldr	r3, [pc, #44]	; (8006cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8006c92:	689b      	ldr	r3, [r3, #8]
 8006c94:	091b      	lsrs	r3, r3, #4
 8006c96:	f003 030f 	and.w	r3, r3, #15
 8006c9a:	490a      	ldr	r1, [pc, #40]	; (8006cc4 <HAL_RCC_ClockConfig+0x1c0>)
 8006c9c:	5ccb      	ldrb	r3, [r1, r3]
 8006c9e:	fa22 f303 	lsr.w	r3, r2, r3
 8006ca2:	4a09      	ldr	r2, [pc, #36]	; (8006cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8006ca4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006ca6:	4b09      	ldr	r3, [pc, #36]	; (8006ccc <HAL_RCC_ClockConfig+0x1c8>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4618      	mov	r0, r3
 8006cac:	f7fc f8b2 	bl	8002e14 <HAL_InitTick>

  return HAL_OK;
 8006cb0:	2300      	movs	r3, #0
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	3710      	adds	r7, #16
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}
 8006cba:	bf00      	nop
 8006cbc:	40023c00 	.word	0x40023c00
 8006cc0:	40023800 	.word	0x40023800
 8006cc4:	0800b480 	.word	0x0800b480
 8006cc8:	20000004 	.word	0x20000004
 8006ccc:	20000018 	.word	0x20000018

08006cd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006cd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006cd4:	b094      	sub	sp, #80	; 0x50
 8006cd6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006cd8:	2300      	movs	r3, #0
 8006cda:	647b      	str	r3, [r7, #68]	; 0x44
 8006cdc:	2300      	movs	r3, #0
 8006cde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006ce8:	4b79      	ldr	r3, [pc, #484]	; (8006ed0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006cea:	689b      	ldr	r3, [r3, #8]
 8006cec:	f003 030c 	and.w	r3, r3, #12
 8006cf0:	2b08      	cmp	r3, #8
 8006cf2:	d00d      	beq.n	8006d10 <HAL_RCC_GetSysClockFreq+0x40>
 8006cf4:	2b08      	cmp	r3, #8
 8006cf6:	f200 80e1 	bhi.w	8006ebc <HAL_RCC_GetSysClockFreq+0x1ec>
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d002      	beq.n	8006d04 <HAL_RCC_GetSysClockFreq+0x34>
 8006cfe:	2b04      	cmp	r3, #4
 8006d00:	d003      	beq.n	8006d0a <HAL_RCC_GetSysClockFreq+0x3a>
 8006d02:	e0db      	b.n	8006ebc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006d04:	4b73      	ldr	r3, [pc, #460]	; (8006ed4 <HAL_RCC_GetSysClockFreq+0x204>)
 8006d06:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006d08:	e0db      	b.n	8006ec2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006d0a:	4b73      	ldr	r3, [pc, #460]	; (8006ed8 <HAL_RCC_GetSysClockFreq+0x208>)
 8006d0c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006d0e:	e0d8      	b.n	8006ec2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006d10:	4b6f      	ldr	r3, [pc, #444]	; (8006ed0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d18:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006d1a:	4b6d      	ldr	r3, [pc, #436]	; (8006ed0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006d1c:	685b      	ldr	r3, [r3, #4]
 8006d1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d063      	beq.n	8006dee <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d26:	4b6a      	ldr	r3, [pc, #424]	; (8006ed0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	099b      	lsrs	r3, r3, #6
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d30:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d38:	633b      	str	r3, [r7, #48]	; 0x30
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	637b      	str	r3, [r7, #52]	; 0x34
 8006d3e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006d42:	4622      	mov	r2, r4
 8006d44:	462b      	mov	r3, r5
 8006d46:	f04f 0000 	mov.w	r0, #0
 8006d4a:	f04f 0100 	mov.w	r1, #0
 8006d4e:	0159      	lsls	r1, r3, #5
 8006d50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006d54:	0150      	lsls	r0, r2, #5
 8006d56:	4602      	mov	r2, r0
 8006d58:	460b      	mov	r3, r1
 8006d5a:	4621      	mov	r1, r4
 8006d5c:	1a51      	subs	r1, r2, r1
 8006d5e:	6139      	str	r1, [r7, #16]
 8006d60:	4629      	mov	r1, r5
 8006d62:	eb63 0301 	sbc.w	r3, r3, r1
 8006d66:	617b      	str	r3, [r7, #20]
 8006d68:	f04f 0200 	mov.w	r2, #0
 8006d6c:	f04f 0300 	mov.w	r3, #0
 8006d70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006d74:	4659      	mov	r1, fp
 8006d76:	018b      	lsls	r3, r1, #6
 8006d78:	4651      	mov	r1, sl
 8006d7a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006d7e:	4651      	mov	r1, sl
 8006d80:	018a      	lsls	r2, r1, #6
 8006d82:	4651      	mov	r1, sl
 8006d84:	ebb2 0801 	subs.w	r8, r2, r1
 8006d88:	4659      	mov	r1, fp
 8006d8a:	eb63 0901 	sbc.w	r9, r3, r1
 8006d8e:	f04f 0200 	mov.w	r2, #0
 8006d92:	f04f 0300 	mov.w	r3, #0
 8006d96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006d9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006d9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006da2:	4690      	mov	r8, r2
 8006da4:	4699      	mov	r9, r3
 8006da6:	4623      	mov	r3, r4
 8006da8:	eb18 0303 	adds.w	r3, r8, r3
 8006dac:	60bb      	str	r3, [r7, #8]
 8006dae:	462b      	mov	r3, r5
 8006db0:	eb49 0303 	adc.w	r3, r9, r3
 8006db4:	60fb      	str	r3, [r7, #12]
 8006db6:	f04f 0200 	mov.w	r2, #0
 8006dba:	f04f 0300 	mov.w	r3, #0
 8006dbe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006dc2:	4629      	mov	r1, r5
 8006dc4:	024b      	lsls	r3, r1, #9
 8006dc6:	4621      	mov	r1, r4
 8006dc8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006dcc:	4621      	mov	r1, r4
 8006dce:	024a      	lsls	r2, r1, #9
 8006dd0:	4610      	mov	r0, r2
 8006dd2:	4619      	mov	r1, r3
 8006dd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8006dda:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006ddc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006de0:	f7f9 ff5a 	bl	8000c98 <__aeabi_uldivmod>
 8006de4:	4602      	mov	r2, r0
 8006de6:	460b      	mov	r3, r1
 8006de8:	4613      	mov	r3, r2
 8006dea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006dec:	e058      	b.n	8006ea0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006dee:	4b38      	ldr	r3, [pc, #224]	; (8006ed0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006df0:	685b      	ldr	r3, [r3, #4]
 8006df2:	099b      	lsrs	r3, r3, #6
 8006df4:	2200      	movs	r2, #0
 8006df6:	4618      	mov	r0, r3
 8006df8:	4611      	mov	r1, r2
 8006dfa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006dfe:	623b      	str	r3, [r7, #32]
 8006e00:	2300      	movs	r3, #0
 8006e02:	627b      	str	r3, [r7, #36]	; 0x24
 8006e04:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006e08:	4642      	mov	r2, r8
 8006e0a:	464b      	mov	r3, r9
 8006e0c:	f04f 0000 	mov.w	r0, #0
 8006e10:	f04f 0100 	mov.w	r1, #0
 8006e14:	0159      	lsls	r1, r3, #5
 8006e16:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006e1a:	0150      	lsls	r0, r2, #5
 8006e1c:	4602      	mov	r2, r0
 8006e1e:	460b      	mov	r3, r1
 8006e20:	4641      	mov	r1, r8
 8006e22:	ebb2 0a01 	subs.w	sl, r2, r1
 8006e26:	4649      	mov	r1, r9
 8006e28:	eb63 0b01 	sbc.w	fp, r3, r1
 8006e2c:	f04f 0200 	mov.w	r2, #0
 8006e30:	f04f 0300 	mov.w	r3, #0
 8006e34:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006e38:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006e3c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006e40:	ebb2 040a 	subs.w	r4, r2, sl
 8006e44:	eb63 050b 	sbc.w	r5, r3, fp
 8006e48:	f04f 0200 	mov.w	r2, #0
 8006e4c:	f04f 0300 	mov.w	r3, #0
 8006e50:	00eb      	lsls	r3, r5, #3
 8006e52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006e56:	00e2      	lsls	r2, r4, #3
 8006e58:	4614      	mov	r4, r2
 8006e5a:	461d      	mov	r5, r3
 8006e5c:	4643      	mov	r3, r8
 8006e5e:	18e3      	adds	r3, r4, r3
 8006e60:	603b      	str	r3, [r7, #0]
 8006e62:	464b      	mov	r3, r9
 8006e64:	eb45 0303 	adc.w	r3, r5, r3
 8006e68:	607b      	str	r3, [r7, #4]
 8006e6a:	f04f 0200 	mov.w	r2, #0
 8006e6e:	f04f 0300 	mov.w	r3, #0
 8006e72:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006e76:	4629      	mov	r1, r5
 8006e78:	028b      	lsls	r3, r1, #10
 8006e7a:	4621      	mov	r1, r4
 8006e7c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006e80:	4621      	mov	r1, r4
 8006e82:	028a      	lsls	r2, r1, #10
 8006e84:	4610      	mov	r0, r2
 8006e86:	4619      	mov	r1, r3
 8006e88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	61bb      	str	r3, [r7, #24]
 8006e8e:	61fa      	str	r2, [r7, #28]
 8006e90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006e94:	f7f9 ff00 	bl	8000c98 <__aeabi_uldivmod>
 8006e98:	4602      	mov	r2, r0
 8006e9a:	460b      	mov	r3, r1
 8006e9c:	4613      	mov	r3, r2
 8006e9e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006ea0:	4b0b      	ldr	r3, [pc, #44]	; (8006ed0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006ea2:	685b      	ldr	r3, [r3, #4]
 8006ea4:	0c1b      	lsrs	r3, r3, #16
 8006ea6:	f003 0303 	and.w	r3, r3, #3
 8006eaa:	3301      	adds	r3, #1
 8006eac:	005b      	lsls	r3, r3, #1
 8006eae:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006eb0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006eb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006eb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006eb8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006eba:	e002      	b.n	8006ec2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006ebc:	4b05      	ldr	r3, [pc, #20]	; (8006ed4 <HAL_RCC_GetSysClockFreq+0x204>)
 8006ebe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006ec0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006ec2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	3750      	adds	r7, #80	; 0x50
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ece:	bf00      	nop
 8006ed0:	40023800 	.word	0x40023800
 8006ed4:	00f42400 	.word	0x00f42400
 8006ed8:	007a1200 	.word	0x007a1200

08006edc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006edc:	b480      	push	{r7}
 8006ede:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006ee0:	4b03      	ldr	r3, [pc, #12]	; (8006ef0 <HAL_RCC_GetHCLKFreq+0x14>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eec:	4770      	bx	lr
 8006eee:	bf00      	nop
 8006ef0:	20000004 	.word	0x20000004

08006ef4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006ef8:	f7ff fff0 	bl	8006edc <HAL_RCC_GetHCLKFreq>
 8006efc:	4602      	mov	r2, r0
 8006efe:	4b05      	ldr	r3, [pc, #20]	; (8006f14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006f00:	689b      	ldr	r3, [r3, #8]
 8006f02:	0a9b      	lsrs	r3, r3, #10
 8006f04:	f003 0307 	and.w	r3, r3, #7
 8006f08:	4903      	ldr	r1, [pc, #12]	; (8006f18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006f0a:	5ccb      	ldrb	r3, [r1, r3]
 8006f0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	bd80      	pop	{r7, pc}
 8006f14:	40023800 	.word	0x40023800
 8006f18:	0800b490 	.word	0x0800b490

08006f1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006f20:	f7ff ffdc 	bl	8006edc <HAL_RCC_GetHCLKFreq>
 8006f24:	4602      	mov	r2, r0
 8006f26:	4b05      	ldr	r3, [pc, #20]	; (8006f3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006f28:	689b      	ldr	r3, [r3, #8]
 8006f2a:	0b5b      	lsrs	r3, r3, #13
 8006f2c:	f003 0307 	and.w	r3, r3, #7
 8006f30:	4903      	ldr	r1, [pc, #12]	; (8006f40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006f32:	5ccb      	ldrb	r3, [r1, r3]
 8006f34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	bd80      	pop	{r7, pc}
 8006f3c:	40023800 	.word	0x40023800
 8006f40:	0800b490 	.word	0x0800b490

08006f44 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b082      	sub	sp, #8
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d101      	bne.n	8006f56 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006f52:	2301      	movs	r3, #1
 8006f54:	e07b      	b.n	800704e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d108      	bne.n	8006f70 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f66:	d009      	beq.n	8006f7c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	61da      	str	r2, [r3, #28]
 8006f6e:	e005      	b.n	8006f7c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2200      	movs	r2, #0
 8006f74:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006f88:	b2db      	uxtb	r3, r3
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d106      	bne.n	8006f9c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2200      	movs	r2, #0
 8006f92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f7fa fe46 	bl	8001c28 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2202      	movs	r2, #2
 8006fa0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	681a      	ldr	r2, [r3, #0]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006fb2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	685b      	ldr	r3, [r3, #4]
 8006fb8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	689b      	ldr	r3, [r3, #8]
 8006fc0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006fc4:	431a      	orrs	r2, r3
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	68db      	ldr	r3, [r3, #12]
 8006fca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006fce:	431a      	orrs	r2, r3
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	691b      	ldr	r3, [r3, #16]
 8006fd4:	f003 0302 	and.w	r3, r3, #2
 8006fd8:	431a      	orrs	r2, r3
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	695b      	ldr	r3, [r3, #20]
 8006fde:	f003 0301 	and.w	r3, r3, #1
 8006fe2:	431a      	orrs	r2, r3
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	699b      	ldr	r3, [r3, #24]
 8006fe8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006fec:	431a      	orrs	r2, r3
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	69db      	ldr	r3, [r3, #28]
 8006ff2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006ff6:	431a      	orrs	r2, r3
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6a1b      	ldr	r3, [r3, #32]
 8006ffc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007000:	ea42 0103 	orr.w	r1, r2, r3
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007008:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	430a      	orrs	r2, r1
 8007012:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	699b      	ldr	r3, [r3, #24]
 8007018:	0c1b      	lsrs	r3, r3, #16
 800701a:	f003 0104 	and.w	r1, r3, #4
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007022:	f003 0210 	and.w	r2, r3, #16
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	430a      	orrs	r2, r1
 800702c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	69da      	ldr	r2, [r3, #28]
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800703c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2200      	movs	r2, #0
 8007042:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2201      	movs	r2, #1
 8007048:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800704c:	2300      	movs	r3, #0
}
 800704e:	4618      	mov	r0, r3
 8007050:	3708      	adds	r7, #8
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}

08007056 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007056:	b580      	push	{r7, lr}
 8007058:	b082      	sub	sp, #8
 800705a:	af00      	add	r7, sp, #0
 800705c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d101      	bne.n	8007068 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007064:	2301      	movs	r3, #1
 8007066:	e03f      	b.n	80070e8 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800706e:	b2db      	uxtb	r3, r3
 8007070:	2b00      	cmp	r3, #0
 8007072:	d106      	bne.n	8007082 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2200      	movs	r2, #0
 8007078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	f7fa fe3b 	bl	8001cf8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2224      	movs	r2, #36	; 0x24
 8007086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	68da      	ldr	r2, [r3, #12]
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007098:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	f000 ff72 	bl	8007f84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	691a      	ldr	r2, [r3, #16]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80070ae:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	695a      	ldr	r2, [r3, #20]
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80070be:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	68da      	ldr	r2, [r3, #12]
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80070ce:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2200      	movs	r2, #0
 80070d4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2220      	movs	r2, #32
 80070da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2220      	movs	r2, #32
 80070e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80070e6:	2300      	movs	r3, #0
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	3708      	adds	r7, #8
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}

080070f0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b08a      	sub	sp, #40	; 0x28
 80070f4:	af02      	add	r7, sp, #8
 80070f6:	60f8      	str	r0, [r7, #12]
 80070f8:	60b9      	str	r1, [r7, #8]
 80070fa:	603b      	str	r3, [r7, #0]
 80070fc:	4613      	mov	r3, r2
 80070fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007100:	2300      	movs	r3, #0
 8007102:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800710a:	b2db      	uxtb	r3, r3
 800710c:	2b20      	cmp	r3, #32
 800710e:	d17c      	bne.n	800720a <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d002      	beq.n	800711c <HAL_UART_Transmit+0x2c>
 8007116:	88fb      	ldrh	r3, [r7, #6]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d101      	bne.n	8007120 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800711c:	2301      	movs	r3, #1
 800711e:	e075      	b.n	800720c <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007126:	2b01      	cmp	r3, #1
 8007128:	d101      	bne.n	800712e <HAL_UART_Transmit+0x3e>
 800712a:	2302      	movs	r3, #2
 800712c:	e06e      	b.n	800720c <HAL_UART_Transmit+0x11c>
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2201      	movs	r2, #1
 8007132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2200      	movs	r2, #0
 800713a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2221      	movs	r2, #33	; 0x21
 8007140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007144:	f7fb feaa 	bl	8002e9c <HAL_GetTick>
 8007148:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	88fa      	ldrh	r2, [r7, #6]
 800714e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	88fa      	ldrh	r2, [r7, #6]
 8007154:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	689b      	ldr	r3, [r3, #8]
 800715a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800715e:	d108      	bne.n	8007172 <HAL_UART_Transmit+0x82>
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	691b      	ldr	r3, [r3, #16]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d104      	bne.n	8007172 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007168:	2300      	movs	r3, #0
 800716a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	61bb      	str	r3, [r7, #24]
 8007170:	e003      	b.n	800717a <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007176:	2300      	movs	r3, #0
 8007178:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	2200      	movs	r2, #0
 800717e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007182:	e02a      	b.n	80071da <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	9300      	str	r3, [sp, #0]
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	2200      	movs	r2, #0
 800718c:	2180      	movs	r1, #128	; 0x80
 800718e:	68f8      	ldr	r0, [r7, #12]
 8007190:	f000 fc2a 	bl	80079e8 <UART_WaitOnFlagUntilTimeout>
 8007194:	4603      	mov	r3, r0
 8007196:	2b00      	cmp	r3, #0
 8007198:	d001      	beq.n	800719e <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800719a:	2303      	movs	r3, #3
 800719c:	e036      	b.n	800720c <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800719e:	69fb      	ldr	r3, [r7, #28]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d10b      	bne.n	80071bc <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80071a4:	69bb      	ldr	r3, [r7, #24]
 80071a6:	881b      	ldrh	r3, [r3, #0]
 80071a8:	461a      	mov	r2, r3
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80071b2:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80071b4:	69bb      	ldr	r3, [r7, #24]
 80071b6:	3302      	adds	r3, #2
 80071b8:	61bb      	str	r3, [r7, #24]
 80071ba:	e007      	b.n	80071cc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80071bc:	69fb      	ldr	r3, [r7, #28]
 80071be:	781a      	ldrb	r2, [r3, #0]
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80071c6:	69fb      	ldr	r3, [r7, #28]
 80071c8:	3301      	adds	r3, #1
 80071ca:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80071d0:	b29b      	uxth	r3, r3
 80071d2:	3b01      	subs	r3, #1
 80071d4:	b29a      	uxth	r2, r3
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80071de:	b29b      	uxth	r3, r3
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d1cf      	bne.n	8007184 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	9300      	str	r3, [sp, #0]
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	2200      	movs	r2, #0
 80071ec:	2140      	movs	r1, #64	; 0x40
 80071ee:	68f8      	ldr	r0, [r7, #12]
 80071f0:	f000 fbfa 	bl	80079e8 <UART_WaitOnFlagUntilTimeout>
 80071f4:	4603      	mov	r3, r0
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d001      	beq.n	80071fe <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80071fa:	2303      	movs	r3, #3
 80071fc:	e006      	b.n	800720c <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	2220      	movs	r2, #32
 8007202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007206:	2300      	movs	r3, #0
 8007208:	e000      	b.n	800720c <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800720a:	2302      	movs	r3, #2
  }
}
 800720c:	4618      	mov	r0, r3
 800720e:	3720      	adds	r7, #32
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}

08007214 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b084      	sub	sp, #16
 8007218:	af00      	add	r7, sp, #0
 800721a:	60f8      	str	r0, [r7, #12]
 800721c:	60b9      	str	r1, [r7, #8]
 800721e:	4613      	mov	r3, r2
 8007220:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007228:	b2db      	uxtb	r3, r3
 800722a:	2b20      	cmp	r3, #32
 800722c:	d11d      	bne.n	800726a <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d002      	beq.n	800723a <HAL_UART_Receive_DMA+0x26>
 8007234:	88fb      	ldrh	r3, [r7, #6]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d101      	bne.n	800723e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800723a:	2301      	movs	r3, #1
 800723c:	e016      	b.n	800726c <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007244:	2b01      	cmp	r3, #1
 8007246:	d101      	bne.n	800724c <HAL_UART_Receive_DMA+0x38>
 8007248:	2302      	movs	r3, #2
 800724a:	e00f      	b.n	800726c <HAL_UART_Receive_DMA+0x58>
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	2201      	movs	r2, #1
 8007250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	2200      	movs	r2, #0
 8007258:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800725a:	88fb      	ldrh	r3, [r7, #6]
 800725c:	461a      	mov	r2, r3
 800725e:	68b9      	ldr	r1, [r7, #8]
 8007260:	68f8      	ldr	r0, [r7, #12]
 8007262:	f000 fc2f 	bl	8007ac4 <UART_Start_Receive_DMA>
 8007266:	4603      	mov	r3, r0
 8007268:	e000      	b.n	800726c <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800726a:	2302      	movs	r3, #2
  }
}
 800726c:	4618      	mov	r0, r3
 800726e:	3710      	adds	r7, #16
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}

08007274 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b0ba      	sub	sp, #232	; 0xe8
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	68db      	ldr	r3, [r3, #12]
 800728c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	695b      	ldr	r3, [r3, #20]
 8007296:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800729a:	2300      	movs	r3, #0
 800729c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80072a0:	2300      	movs	r3, #0
 80072a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80072a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072aa:	f003 030f 	and.w	r3, r3, #15
 80072ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80072b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d10f      	bne.n	80072da <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80072ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072be:	f003 0320 	and.w	r3, r3, #32
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d009      	beq.n	80072da <HAL_UART_IRQHandler+0x66>
 80072c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072ca:	f003 0320 	and.w	r3, r3, #32
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d003      	beq.n	80072da <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f000 fd9b 	bl	8007e0e <UART_Receive_IT>
      return;
 80072d8:	e256      	b.n	8007788 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80072da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80072de:	2b00      	cmp	r3, #0
 80072e0:	f000 80de 	beq.w	80074a0 <HAL_UART_IRQHandler+0x22c>
 80072e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80072e8:	f003 0301 	and.w	r3, r3, #1
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d106      	bne.n	80072fe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80072f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072f4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	f000 80d1 	beq.w	80074a0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80072fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007302:	f003 0301 	and.w	r3, r3, #1
 8007306:	2b00      	cmp	r3, #0
 8007308:	d00b      	beq.n	8007322 <HAL_UART_IRQHandler+0xae>
 800730a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800730e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007312:	2b00      	cmp	r3, #0
 8007314:	d005      	beq.n	8007322 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800731a:	f043 0201 	orr.w	r2, r3, #1
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007322:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007326:	f003 0304 	and.w	r3, r3, #4
 800732a:	2b00      	cmp	r3, #0
 800732c:	d00b      	beq.n	8007346 <HAL_UART_IRQHandler+0xd2>
 800732e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007332:	f003 0301 	and.w	r3, r3, #1
 8007336:	2b00      	cmp	r3, #0
 8007338:	d005      	beq.n	8007346 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800733e:	f043 0202 	orr.w	r2, r3, #2
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007346:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800734a:	f003 0302 	and.w	r3, r3, #2
 800734e:	2b00      	cmp	r3, #0
 8007350:	d00b      	beq.n	800736a <HAL_UART_IRQHandler+0xf6>
 8007352:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007356:	f003 0301 	and.w	r3, r3, #1
 800735a:	2b00      	cmp	r3, #0
 800735c:	d005      	beq.n	800736a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007362:	f043 0204 	orr.w	r2, r3, #4
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800736a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800736e:	f003 0308 	and.w	r3, r3, #8
 8007372:	2b00      	cmp	r3, #0
 8007374:	d011      	beq.n	800739a <HAL_UART_IRQHandler+0x126>
 8007376:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800737a:	f003 0320 	and.w	r3, r3, #32
 800737e:	2b00      	cmp	r3, #0
 8007380:	d105      	bne.n	800738e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007382:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007386:	f003 0301 	and.w	r3, r3, #1
 800738a:	2b00      	cmp	r3, #0
 800738c:	d005      	beq.n	800739a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007392:	f043 0208 	orr.w	r2, r3, #8
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800739e:	2b00      	cmp	r3, #0
 80073a0:	f000 81ed 	beq.w	800777e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80073a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073a8:	f003 0320 	and.w	r3, r3, #32
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d008      	beq.n	80073c2 <HAL_UART_IRQHandler+0x14e>
 80073b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073b4:	f003 0320 	and.w	r3, r3, #32
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d002      	beq.n	80073c2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f000 fd26 	bl	8007e0e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	695b      	ldr	r3, [r3, #20]
 80073c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073cc:	2b40      	cmp	r3, #64	; 0x40
 80073ce:	bf0c      	ite	eq
 80073d0:	2301      	moveq	r3, #1
 80073d2:	2300      	movne	r3, #0
 80073d4:	b2db      	uxtb	r3, r3
 80073d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073de:	f003 0308 	and.w	r3, r3, #8
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d103      	bne.n	80073ee <HAL_UART_IRQHandler+0x17a>
 80073e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d04f      	beq.n	800748e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f000 fc2e 	bl	8007c50 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	695b      	ldr	r3, [r3, #20]
 80073fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073fe:	2b40      	cmp	r3, #64	; 0x40
 8007400:	d141      	bne.n	8007486 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	3314      	adds	r3, #20
 8007408:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800740c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007410:	e853 3f00 	ldrex	r3, [r3]
 8007414:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007418:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800741c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007420:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	3314      	adds	r3, #20
 800742a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800742e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007432:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007436:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800743a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800743e:	e841 2300 	strex	r3, r2, [r1]
 8007442:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007446:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800744a:	2b00      	cmp	r3, #0
 800744c:	d1d9      	bne.n	8007402 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007452:	2b00      	cmp	r3, #0
 8007454:	d013      	beq.n	800747e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800745a:	4a7d      	ldr	r2, [pc, #500]	; (8007650 <HAL_UART_IRQHandler+0x3dc>)
 800745c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007462:	4618      	mov	r0, r3
 8007464:	f7fb ffd2 	bl	800340c <HAL_DMA_Abort_IT>
 8007468:	4603      	mov	r3, r0
 800746a:	2b00      	cmp	r3, #0
 800746c:	d016      	beq.n	800749c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007472:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007474:	687a      	ldr	r2, [r7, #4]
 8007476:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007478:	4610      	mov	r0, r2
 800747a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800747c:	e00e      	b.n	800749c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f000 f9a4 	bl	80077cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007484:	e00a      	b.n	800749c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f000 f9a0 	bl	80077cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800748c:	e006      	b.n	800749c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f000 f99c 	bl	80077cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2200      	movs	r2, #0
 8007498:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800749a:	e170      	b.n	800777e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800749c:	bf00      	nop
    return;
 800749e:	e16e      	b.n	800777e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074a4:	2b01      	cmp	r3, #1
 80074a6:	f040 814a 	bne.w	800773e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80074aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074ae:	f003 0310 	and.w	r3, r3, #16
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	f000 8143 	beq.w	800773e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80074b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074bc:	f003 0310 	and.w	r3, r3, #16
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	f000 813c 	beq.w	800773e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80074c6:	2300      	movs	r3, #0
 80074c8:	60bb      	str	r3, [r7, #8]
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	60bb      	str	r3, [r7, #8]
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	685b      	ldr	r3, [r3, #4]
 80074d8:	60bb      	str	r3, [r7, #8]
 80074da:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	695b      	ldr	r3, [r3, #20]
 80074e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074e6:	2b40      	cmp	r3, #64	; 0x40
 80074e8:	f040 80b4 	bne.w	8007654 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	685b      	ldr	r3, [r3, #4]
 80074f4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80074f8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	f000 8140 	beq.w	8007782 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007506:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800750a:	429a      	cmp	r2, r3
 800750c:	f080 8139 	bcs.w	8007782 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007516:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800751c:	69db      	ldr	r3, [r3, #28]
 800751e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007522:	f000 8088 	beq.w	8007636 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	330c      	adds	r3, #12
 800752c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007530:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007534:	e853 3f00 	ldrex	r3, [r3]
 8007538:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800753c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007540:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007544:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	330c      	adds	r3, #12
 800754e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007552:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007556:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800755a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800755e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007562:	e841 2300 	strex	r3, r2, [r1]
 8007566:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800756a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800756e:	2b00      	cmp	r3, #0
 8007570:	d1d9      	bne.n	8007526 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	3314      	adds	r3, #20
 8007578:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800757a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800757c:	e853 3f00 	ldrex	r3, [r3]
 8007580:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007582:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007584:	f023 0301 	bic.w	r3, r3, #1
 8007588:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	3314      	adds	r3, #20
 8007592:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007596:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800759a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800759c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800759e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80075a2:	e841 2300 	strex	r3, r2, [r1]
 80075a6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80075a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d1e1      	bne.n	8007572 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	3314      	adds	r3, #20
 80075b4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80075b8:	e853 3f00 	ldrex	r3, [r3]
 80075bc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80075be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80075c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	3314      	adds	r3, #20
 80075ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80075d2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80075d4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075d6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80075d8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80075da:	e841 2300 	strex	r3, r2, [r1]
 80075de:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80075e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d1e3      	bne.n	80075ae <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2220      	movs	r2, #32
 80075ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2200      	movs	r2, #0
 80075f2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	330c      	adds	r3, #12
 80075fa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075fe:	e853 3f00 	ldrex	r3, [r3]
 8007602:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007604:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007606:	f023 0310 	bic.w	r3, r3, #16
 800760a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	330c      	adds	r3, #12
 8007614:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007618:	65ba      	str	r2, [r7, #88]	; 0x58
 800761a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800761c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800761e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007620:	e841 2300 	strex	r3, r2, [r1]
 8007624:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007626:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007628:	2b00      	cmp	r3, #0
 800762a:	d1e3      	bne.n	80075f4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007630:	4618      	mov	r0, r3
 8007632:	f7fb fe7b 	bl	800332c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800763e:	b29b      	uxth	r3, r3
 8007640:	1ad3      	subs	r3, r2, r3
 8007642:	b29b      	uxth	r3, r3
 8007644:	4619      	mov	r1, r3
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f000 f8ca 	bl	80077e0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800764c:	e099      	b.n	8007782 <HAL_UART_IRQHandler+0x50e>
 800764e:	bf00      	nop
 8007650:	08007d17 	.word	0x08007d17
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800765c:	b29b      	uxth	r3, r3
 800765e:	1ad3      	subs	r3, r2, r3
 8007660:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007668:	b29b      	uxth	r3, r3
 800766a:	2b00      	cmp	r3, #0
 800766c:	f000 808b 	beq.w	8007786 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007670:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007674:	2b00      	cmp	r3, #0
 8007676:	f000 8086 	beq.w	8007786 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	330c      	adds	r3, #12
 8007680:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007684:	e853 3f00 	ldrex	r3, [r3]
 8007688:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800768a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800768c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007690:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	330c      	adds	r3, #12
 800769a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800769e:	647a      	str	r2, [r7, #68]	; 0x44
 80076a0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076a2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80076a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80076a6:	e841 2300 	strex	r3, r2, [r1]
 80076aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80076ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d1e3      	bne.n	800767a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	3314      	adds	r3, #20
 80076b8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076bc:	e853 3f00 	ldrex	r3, [r3]
 80076c0:	623b      	str	r3, [r7, #32]
   return(result);
 80076c2:	6a3b      	ldr	r3, [r7, #32]
 80076c4:	f023 0301 	bic.w	r3, r3, #1
 80076c8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	3314      	adds	r3, #20
 80076d2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80076d6:	633a      	str	r2, [r7, #48]	; 0x30
 80076d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80076dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076de:	e841 2300 	strex	r3, r2, [r1]
 80076e2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80076e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d1e3      	bne.n	80076b2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2220      	movs	r2, #32
 80076ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2200      	movs	r2, #0
 80076f6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	330c      	adds	r3, #12
 80076fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007700:	693b      	ldr	r3, [r7, #16]
 8007702:	e853 3f00 	ldrex	r3, [r3]
 8007706:	60fb      	str	r3, [r7, #12]
   return(result);
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	f023 0310 	bic.w	r3, r3, #16
 800770e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	330c      	adds	r3, #12
 8007718:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800771c:	61fa      	str	r2, [r7, #28]
 800771e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007720:	69b9      	ldr	r1, [r7, #24]
 8007722:	69fa      	ldr	r2, [r7, #28]
 8007724:	e841 2300 	strex	r3, r2, [r1]
 8007728:	617b      	str	r3, [r7, #20]
   return(result);
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d1e3      	bne.n	80076f8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007730:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007734:	4619      	mov	r1, r3
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f000 f852 	bl	80077e0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800773c:	e023      	b.n	8007786 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800773e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007746:	2b00      	cmp	r3, #0
 8007748:	d009      	beq.n	800775e <HAL_UART_IRQHandler+0x4ea>
 800774a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800774e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007752:	2b00      	cmp	r3, #0
 8007754:	d003      	beq.n	800775e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f000 faf1 	bl	8007d3e <UART_Transmit_IT>
    return;
 800775c:	e014      	b.n	8007788 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800775e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007766:	2b00      	cmp	r3, #0
 8007768:	d00e      	beq.n	8007788 <HAL_UART_IRQHandler+0x514>
 800776a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800776e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007772:	2b00      	cmp	r3, #0
 8007774:	d008      	beq.n	8007788 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f000 fb31 	bl	8007dde <UART_EndTransmit_IT>
    return;
 800777c:	e004      	b.n	8007788 <HAL_UART_IRQHandler+0x514>
    return;
 800777e:	bf00      	nop
 8007780:	e002      	b.n	8007788 <HAL_UART_IRQHandler+0x514>
      return;
 8007782:	bf00      	nop
 8007784:	e000      	b.n	8007788 <HAL_UART_IRQHandler+0x514>
      return;
 8007786:	bf00      	nop
  }
}
 8007788:	37e8      	adds	r7, #232	; 0xe8
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}
 800778e:	bf00      	nop

08007790 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007790:	b480      	push	{r7}
 8007792:	b083      	sub	sp, #12
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007798:	bf00      	nop
 800779a:	370c      	adds	r7, #12
 800779c:	46bd      	mov	sp, r7
 800779e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a2:	4770      	bx	lr

080077a4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80077a4:	b480      	push	{r7}
 80077a6:	b083      	sub	sp, #12
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80077ac:	bf00      	nop
 80077ae:	370c      	adds	r7, #12
 80077b0:	46bd      	mov	sp, r7
 80077b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b6:	4770      	bx	lr

080077b8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80077b8:	b480      	push	{r7}
 80077ba:	b083      	sub	sp, #12
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80077c0:	bf00      	nop
 80077c2:	370c      	adds	r7, #12
 80077c4:	46bd      	mov	sp, r7
 80077c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ca:	4770      	bx	lr

080077cc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80077cc:	b480      	push	{r7}
 80077ce:	b083      	sub	sp, #12
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80077d4:	bf00      	nop
 80077d6:	370c      	adds	r7, #12
 80077d8:	46bd      	mov	sp, r7
 80077da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077de:	4770      	bx	lr

080077e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80077e0:	b480      	push	{r7}
 80077e2:	b083      	sub	sp, #12
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
 80077e8:	460b      	mov	r3, r1
 80077ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80077ec:	bf00      	nop
 80077ee:	370c      	adds	r7, #12
 80077f0:	46bd      	mov	sp, r7
 80077f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f6:	4770      	bx	lr

080077f8 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b09c      	sub	sp, #112	; 0x70
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007804:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007810:	2b00      	cmp	r3, #0
 8007812:	d172      	bne.n	80078fa <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007814:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007816:	2200      	movs	r2, #0
 8007818:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800781a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	330c      	adds	r3, #12
 8007820:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007822:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007824:	e853 3f00 	ldrex	r3, [r3]
 8007828:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800782a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800782c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007830:	66bb      	str	r3, [r7, #104]	; 0x68
 8007832:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	330c      	adds	r3, #12
 8007838:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800783a:	65ba      	str	r2, [r7, #88]	; 0x58
 800783c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800783e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007840:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007842:	e841 2300 	strex	r3, r2, [r1]
 8007846:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007848:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800784a:	2b00      	cmp	r3, #0
 800784c:	d1e5      	bne.n	800781a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800784e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	3314      	adds	r3, #20
 8007854:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007858:	e853 3f00 	ldrex	r3, [r3]
 800785c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800785e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007860:	f023 0301 	bic.w	r3, r3, #1
 8007864:	667b      	str	r3, [r7, #100]	; 0x64
 8007866:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	3314      	adds	r3, #20
 800786c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800786e:	647a      	str	r2, [r7, #68]	; 0x44
 8007870:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007872:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007874:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007876:	e841 2300 	strex	r3, r2, [r1]
 800787a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800787c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800787e:	2b00      	cmp	r3, #0
 8007880:	d1e5      	bne.n	800784e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007882:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	3314      	adds	r3, #20
 8007888:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800788a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800788c:	e853 3f00 	ldrex	r3, [r3]
 8007890:	623b      	str	r3, [r7, #32]
   return(result);
 8007892:	6a3b      	ldr	r3, [r7, #32]
 8007894:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007898:	663b      	str	r3, [r7, #96]	; 0x60
 800789a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	3314      	adds	r3, #20
 80078a0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80078a2:	633a      	str	r2, [r7, #48]	; 0x30
 80078a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80078a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078aa:	e841 2300 	strex	r3, r2, [r1]
 80078ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80078b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d1e5      	bne.n	8007882 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80078b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078b8:	2220      	movs	r2, #32
 80078ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078c2:	2b01      	cmp	r3, #1
 80078c4:	d119      	bne.n	80078fa <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	330c      	adds	r3, #12
 80078cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ce:	693b      	ldr	r3, [r7, #16]
 80078d0:	e853 3f00 	ldrex	r3, [r3]
 80078d4:	60fb      	str	r3, [r7, #12]
   return(result);
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	f023 0310 	bic.w	r3, r3, #16
 80078dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80078de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	330c      	adds	r3, #12
 80078e4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80078e6:	61fa      	str	r2, [r7, #28]
 80078e8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ea:	69b9      	ldr	r1, [r7, #24]
 80078ec:	69fa      	ldr	r2, [r7, #28]
 80078ee:	e841 2300 	strex	r3, r2, [r1]
 80078f2:	617b      	str	r3, [r7, #20]
   return(result);
 80078f4:	697b      	ldr	r3, [r7, #20]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d1e5      	bne.n	80078c6 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078fe:	2b01      	cmp	r3, #1
 8007900:	d106      	bne.n	8007910 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007902:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007904:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007906:	4619      	mov	r1, r3
 8007908:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800790a:	f7ff ff69 	bl	80077e0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800790e:	e002      	b.n	8007916 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8007910:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007912:	f7ff ff47 	bl	80077a4 <HAL_UART_RxCpltCallback>
}
 8007916:	bf00      	nop
 8007918:	3770      	adds	r7, #112	; 0x70
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}

0800791e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800791e:	b580      	push	{r7, lr}
 8007920:	b084      	sub	sp, #16
 8007922:	af00      	add	r7, sp, #0
 8007924:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800792a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007930:	2b01      	cmp	r3, #1
 8007932:	d108      	bne.n	8007946 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007938:	085b      	lsrs	r3, r3, #1
 800793a:	b29b      	uxth	r3, r3
 800793c:	4619      	mov	r1, r3
 800793e:	68f8      	ldr	r0, [r7, #12]
 8007940:	f7ff ff4e 	bl	80077e0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007944:	e002      	b.n	800794c <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8007946:	68f8      	ldr	r0, [r7, #12]
 8007948:	f7ff ff36 	bl	80077b8 <HAL_UART_RxHalfCpltCallback>
}
 800794c:	bf00      	nop
 800794e:	3710      	adds	r7, #16
 8007950:	46bd      	mov	sp, r7
 8007952:	bd80      	pop	{r7, pc}

08007954 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b084      	sub	sp, #16
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800795c:	2300      	movs	r3, #0
 800795e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007964:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	695b      	ldr	r3, [r3, #20]
 800796c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007970:	2b80      	cmp	r3, #128	; 0x80
 8007972:	bf0c      	ite	eq
 8007974:	2301      	moveq	r3, #1
 8007976:	2300      	movne	r3, #0
 8007978:	b2db      	uxtb	r3, r3
 800797a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007982:	b2db      	uxtb	r3, r3
 8007984:	2b21      	cmp	r3, #33	; 0x21
 8007986:	d108      	bne.n	800799a <UART_DMAError+0x46>
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d005      	beq.n	800799a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	2200      	movs	r2, #0
 8007992:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007994:	68b8      	ldr	r0, [r7, #8]
 8007996:	f000 f933 	bl	8007c00 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	695b      	ldr	r3, [r3, #20]
 80079a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079a4:	2b40      	cmp	r3, #64	; 0x40
 80079a6:	bf0c      	ite	eq
 80079a8:	2301      	moveq	r3, #1
 80079aa:	2300      	movne	r3, #0
 80079ac:	b2db      	uxtb	r3, r3
 80079ae:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80079b6:	b2db      	uxtb	r3, r3
 80079b8:	2b22      	cmp	r3, #34	; 0x22
 80079ba:	d108      	bne.n	80079ce <UART_DMAError+0x7a>
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d005      	beq.n	80079ce <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	2200      	movs	r2, #0
 80079c6:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80079c8:	68b8      	ldr	r0, [r7, #8]
 80079ca:	f000 f941 	bl	8007c50 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079d2:	f043 0210 	orr.w	r2, r3, #16
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80079da:	68b8      	ldr	r0, [r7, #8]
 80079dc:	f7ff fef6 	bl	80077cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80079e0:	bf00      	nop
 80079e2:	3710      	adds	r7, #16
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}

080079e8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b090      	sub	sp, #64	; 0x40
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	60f8      	str	r0, [r7, #12]
 80079f0:	60b9      	str	r1, [r7, #8]
 80079f2:	603b      	str	r3, [r7, #0]
 80079f4:	4613      	mov	r3, r2
 80079f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079f8:	e050      	b.n	8007a9c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80079fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80079fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a00:	d04c      	beq.n	8007a9c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007a02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d007      	beq.n	8007a18 <UART_WaitOnFlagUntilTimeout+0x30>
 8007a08:	f7fb fa48 	bl	8002e9c <HAL_GetTick>
 8007a0c:	4602      	mov	r2, r0
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	1ad3      	subs	r3, r2, r3
 8007a12:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a14:	429a      	cmp	r2, r3
 8007a16:	d241      	bcs.n	8007a9c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	330c      	adds	r3, #12
 8007a1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a22:	e853 3f00 	ldrex	r3, [r3]
 8007a26:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a2a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	330c      	adds	r3, #12
 8007a36:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007a38:	637a      	str	r2, [r7, #52]	; 0x34
 8007a3a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a3c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007a3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a40:	e841 2300 	strex	r3, r2, [r1]
 8007a44:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d1e5      	bne.n	8007a18 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	3314      	adds	r3, #20
 8007a52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a54:	697b      	ldr	r3, [r7, #20]
 8007a56:	e853 3f00 	ldrex	r3, [r3]
 8007a5a:	613b      	str	r3, [r7, #16]
   return(result);
 8007a5c:	693b      	ldr	r3, [r7, #16]
 8007a5e:	f023 0301 	bic.w	r3, r3, #1
 8007a62:	63bb      	str	r3, [r7, #56]	; 0x38
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	3314      	adds	r3, #20
 8007a6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a6c:	623a      	str	r2, [r7, #32]
 8007a6e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a70:	69f9      	ldr	r1, [r7, #28]
 8007a72:	6a3a      	ldr	r2, [r7, #32]
 8007a74:	e841 2300 	strex	r3, r2, [r1]
 8007a78:	61bb      	str	r3, [r7, #24]
   return(result);
 8007a7a:	69bb      	ldr	r3, [r7, #24]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d1e5      	bne.n	8007a4c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	2220      	movs	r2, #32
 8007a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	2220      	movs	r2, #32
 8007a8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	2200      	movs	r2, #0
 8007a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007a98:	2303      	movs	r3, #3
 8007a9a:	e00f      	b.n	8007abc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	681a      	ldr	r2, [r3, #0]
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	4013      	ands	r3, r2
 8007aa6:	68ba      	ldr	r2, [r7, #8]
 8007aa8:	429a      	cmp	r2, r3
 8007aaa:	bf0c      	ite	eq
 8007aac:	2301      	moveq	r3, #1
 8007aae:	2300      	movne	r3, #0
 8007ab0:	b2db      	uxtb	r3, r3
 8007ab2:	461a      	mov	r2, r3
 8007ab4:	79fb      	ldrb	r3, [r7, #7]
 8007ab6:	429a      	cmp	r2, r3
 8007ab8:	d09f      	beq.n	80079fa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007aba:	2300      	movs	r3, #0
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	3740      	adds	r7, #64	; 0x40
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}

08007ac4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b098      	sub	sp, #96	; 0x60
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	60f8      	str	r0, [r7, #12]
 8007acc:	60b9      	str	r1, [r7, #8]
 8007ace:	4613      	mov	r3, r2
 8007ad0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007ad2:	68ba      	ldr	r2, [r7, #8]
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	88fa      	ldrh	r2, [r7, #6]
 8007adc:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	2222      	movs	r2, #34	; 0x22
 8007ae8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007af0:	4a40      	ldr	r2, [pc, #256]	; (8007bf4 <UART_Start_Receive_DMA+0x130>)
 8007af2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007af8:	4a3f      	ldr	r2, [pc, #252]	; (8007bf8 <UART_Start_Receive_DMA+0x134>)
 8007afa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b00:	4a3e      	ldr	r2, [pc, #248]	; (8007bfc <UART_Start_Receive_DMA+0x138>)
 8007b02:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b08:	2200      	movs	r2, #0
 8007b0a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007b0c:	f107 0308 	add.w	r3, r7, #8
 8007b10:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	3304      	adds	r3, #4
 8007b1c:	4619      	mov	r1, r3
 8007b1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b20:	681a      	ldr	r2, [r3, #0]
 8007b22:	88fb      	ldrh	r3, [r7, #6]
 8007b24:	f7fb fbaa 	bl	800327c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007b28:	2300      	movs	r3, #0
 8007b2a:	613b      	str	r3, [r7, #16]
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	613b      	str	r3, [r7, #16]
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	685b      	ldr	r3, [r3, #4]
 8007b3a:	613b      	str	r3, [r7, #16]
 8007b3c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	2200      	movs	r2, #0
 8007b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	691b      	ldr	r3, [r3, #16]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d019      	beq.n	8007b82 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	330c      	adds	r3, #12
 8007b54:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b58:	e853 3f00 	ldrex	r3, [r3]
 8007b5c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007b5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b64:	65bb      	str	r3, [r7, #88]	; 0x58
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	330c      	adds	r3, #12
 8007b6c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007b6e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007b70:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b72:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007b74:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007b76:	e841 2300 	strex	r3, r2, [r1]
 8007b7a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007b7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d1e5      	bne.n	8007b4e <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	3314      	adds	r3, #20
 8007b88:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b8c:	e853 3f00 	ldrex	r3, [r3]
 8007b90:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b94:	f043 0301 	orr.w	r3, r3, #1
 8007b98:	657b      	str	r3, [r7, #84]	; 0x54
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	3314      	adds	r3, #20
 8007ba0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007ba2:	63ba      	str	r2, [r7, #56]	; 0x38
 8007ba4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ba6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007ba8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007baa:	e841 2300 	strex	r3, r2, [r1]
 8007bae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d1e5      	bne.n	8007b82 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	3314      	adds	r3, #20
 8007bbc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bbe:	69bb      	ldr	r3, [r7, #24]
 8007bc0:	e853 3f00 	ldrex	r3, [r3]
 8007bc4:	617b      	str	r3, [r7, #20]
   return(result);
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007bcc:	653b      	str	r3, [r7, #80]	; 0x50
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	3314      	adds	r3, #20
 8007bd4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007bd6:	627a      	str	r2, [r7, #36]	; 0x24
 8007bd8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bda:	6a39      	ldr	r1, [r7, #32]
 8007bdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bde:	e841 2300 	strex	r3, r2, [r1]
 8007be2:	61fb      	str	r3, [r7, #28]
   return(result);
 8007be4:	69fb      	ldr	r3, [r7, #28]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d1e5      	bne.n	8007bb6 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8007bea:	2300      	movs	r3, #0
}
 8007bec:	4618      	mov	r0, r3
 8007bee:	3760      	adds	r7, #96	; 0x60
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bd80      	pop	{r7, pc}
 8007bf4:	080077f9 	.word	0x080077f9
 8007bf8:	0800791f 	.word	0x0800791f
 8007bfc:	08007955 	.word	0x08007955

08007c00 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007c00:	b480      	push	{r7}
 8007c02:	b089      	sub	sp, #36	; 0x24
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	330c      	adds	r3, #12
 8007c0e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	e853 3f00 	ldrex	r3, [r3]
 8007c16:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007c1e:	61fb      	str	r3, [r7, #28]
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	330c      	adds	r3, #12
 8007c26:	69fa      	ldr	r2, [r7, #28]
 8007c28:	61ba      	str	r2, [r7, #24]
 8007c2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c2c:	6979      	ldr	r1, [r7, #20]
 8007c2e:	69ba      	ldr	r2, [r7, #24]
 8007c30:	e841 2300 	strex	r3, r2, [r1]
 8007c34:	613b      	str	r3, [r7, #16]
   return(result);
 8007c36:	693b      	ldr	r3, [r7, #16]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d1e5      	bne.n	8007c08 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2220      	movs	r2, #32
 8007c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8007c44:	bf00      	nop
 8007c46:	3724      	adds	r7, #36	; 0x24
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4e:	4770      	bx	lr

08007c50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007c50:	b480      	push	{r7}
 8007c52:	b095      	sub	sp, #84	; 0x54
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	330c      	adds	r3, #12
 8007c5e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c62:	e853 3f00 	ldrex	r3, [r3]
 8007c66:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c6a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007c6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	330c      	adds	r3, #12
 8007c76:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007c78:	643a      	str	r2, [r7, #64]	; 0x40
 8007c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c7c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007c7e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007c80:	e841 2300 	strex	r3, r2, [r1]
 8007c84:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d1e5      	bne.n	8007c58 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	3314      	adds	r3, #20
 8007c92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c94:	6a3b      	ldr	r3, [r7, #32]
 8007c96:	e853 3f00 	ldrex	r3, [r3]
 8007c9a:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c9c:	69fb      	ldr	r3, [r7, #28]
 8007c9e:	f023 0301 	bic.w	r3, r3, #1
 8007ca2:	64bb      	str	r3, [r7, #72]	; 0x48
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	3314      	adds	r3, #20
 8007caa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007cac:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007cae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cb0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007cb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007cb4:	e841 2300 	strex	r3, r2, [r1]
 8007cb8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d1e5      	bne.n	8007c8c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cc4:	2b01      	cmp	r3, #1
 8007cc6:	d119      	bne.n	8007cfc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	330c      	adds	r3, #12
 8007cce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	e853 3f00 	ldrex	r3, [r3]
 8007cd6:	60bb      	str	r3, [r7, #8]
   return(result);
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	f023 0310 	bic.w	r3, r3, #16
 8007cde:	647b      	str	r3, [r7, #68]	; 0x44
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	330c      	adds	r3, #12
 8007ce6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007ce8:	61ba      	str	r2, [r7, #24]
 8007cea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cec:	6979      	ldr	r1, [r7, #20]
 8007cee:	69ba      	ldr	r2, [r7, #24]
 8007cf0:	e841 2300 	strex	r3, r2, [r1]
 8007cf4:	613b      	str	r3, [r7, #16]
   return(result);
 8007cf6:	693b      	ldr	r3, [r7, #16]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d1e5      	bne.n	8007cc8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2220      	movs	r2, #32
 8007d00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2200      	movs	r2, #0
 8007d08:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007d0a:	bf00      	nop
 8007d0c:	3754      	adds	r7, #84	; 0x54
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d14:	4770      	bx	lr

08007d16 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007d16:	b580      	push	{r7, lr}
 8007d18:	b084      	sub	sp, #16
 8007d1a:	af00      	add	r7, sp, #0
 8007d1c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d22:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	2200      	movs	r2, #0
 8007d28:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007d30:	68f8      	ldr	r0, [r7, #12]
 8007d32:	f7ff fd4b 	bl	80077cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d36:	bf00      	nop
 8007d38:	3710      	adds	r7, #16
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}

08007d3e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007d3e:	b480      	push	{r7}
 8007d40:	b085      	sub	sp, #20
 8007d42:	af00      	add	r7, sp, #0
 8007d44:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d4c:	b2db      	uxtb	r3, r3
 8007d4e:	2b21      	cmp	r3, #33	; 0x21
 8007d50:	d13e      	bne.n	8007dd0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	689b      	ldr	r3, [r3, #8]
 8007d56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d5a:	d114      	bne.n	8007d86 <UART_Transmit_IT+0x48>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	691b      	ldr	r3, [r3, #16]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d110      	bne.n	8007d86 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6a1b      	ldr	r3, [r3, #32]
 8007d68:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	881b      	ldrh	r3, [r3, #0]
 8007d6e:	461a      	mov	r2, r3
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007d78:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6a1b      	ldr	r3, [r3, #32]
 8007d7e:	1c9a      	adds	r2, r3, #2
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	621a      	str	r2, [r3, #32]
 8007d84:	e008      	b.n	8007d98 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6a1b      	ldr	r3, [r3, #32]
 8007d8a:	1c59      	adds	r1, r3, #1
 8007d8c:	687a      	ldr	r2, [r7, #4]
 8007d8e:	6211      	str	r1, [r2, #32]
 8007d90:	781a      	ldrb	r2, [r3, #0]
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007d9c:	b29b      	uxth	r3, r3
 8007d9e:	3b01      	subs	r3, #1
 8007da0:	b29b      	uxth	r3, r3
 8007da2:	687a      	ldr	r2, [r7, #4]
 8007da4:	4619      	mov	r1, r3
 8007da6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d10f      	bne.n	8007dcc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	68da      	ldr	r2, [r3, #12]
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007dba:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	68da      	ldr	r2, [r3, #12]
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007dca:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007dcc:	2300      	movs	r3, #0
 8007dce:	e000      	b.n	8007dd2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007dd0:	2302      	movs	r3, #2
  }
}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	3714      	adds	r7, #20
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ddc:	4770      	bx	lr

08007dde <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007dde:	b580      	push	{r7, lr}
 8007de0:	b082      	sub	sp, #8
 8007de2:	af00      	add	r7, sp, #0
 8007de4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	68da      	ldr	r2, [r3, #12]
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007df4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2220      	movs	r2, #32
 8007dfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f7ff fcc6 	bl	8007790 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007e04:	2300      	movs	r3, #0
}
 8007e06:	4618      	mov	r0, r3
 8007e08:	3708      	adds	r7, #8
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd80      	pop	{r7, pc}

08007e0e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007e0e:	b580      	push	{r7, lr}
 8007e10:	b08c      	sub	sp, #48	; 0x30
 8007e12:	af00      	add	r7, sp, #0
 8007e14:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007e1c:	b2db      	uxtb	r3, r3
 8007e1e:	2b22      	cmp	r3, #34	; 0x22
 8007e20:	f040 80ab 	bne.w	8007f7a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	689b      	ldr	r3, [r3, #8]
 8007e28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e2c:	d117      	bne.n	8007e5e <UART_Receive_IT+0x50>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	691b      	ldr	r3, [r3, #16]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d113      	bne.n	8007e5e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007e36:	2300      	movs	r3, #0
 8007e38:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e3e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	685b      	ldr	r3, [r3, #4]
 8007e46:	b29b      	uxth	r3, r3
 8007e48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e4c:	b29a      	uxth	r2, r3
 8007e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e50:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e56:	1c9a      	adds	r2, r3, #2
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	629a      	str	r2, [r3, #40]	; 0x28
 8007e5c:	e026      	b.n	8007eac <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e62:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007e64:	2300      	movs	r3, #0
 8007e66:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	689b      	ldr	r3, [r3, #8]
 8007e6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e70:	d007      	beq.n	8007e82 <UART_Receive_IT+0x74>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	689b      	ldr	r3, [r3, #8]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d10a      	bne.n	8007e90 <UART_Receive_IT+0x82>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	691b      	ldr	r3, [r3, #16]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d106      	bne.n	8007e90 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	685b      	ldr	r3, [r3, #4]
 8007e88:	b2da      	uxtb	r2, r3
 8007e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e8c:	701a      	strb	r2, [r3, #0]
 8007e8e:	e008      	b.n	8007ea2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	685b      	ldr	r3, [r3, #4]
 8007e96:	b2db      	uxtb	r3, r3
 8007e98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e9c:	b2da      	uxtb	r2, r3
 8007e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ea0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ea6:	1c5a      	adds	r2, r3, #1
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007eb0:	b29b      	uxth	r3, r3
 8007eb2:	3b01      	subs	r3, #1
 8007eb4:	b29b      	uxth	r3, r3
 8007eb6:	687a      	ldr	r2, [r7, #4]
 8007eb8:	4619      	mov	r1, r3
 8007eba:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d15a      	bne.n	8007f76 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	68da      	ldr	r2, [r3, #12]
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f022 0220 	bic.w	r2, r2, #32
 8007ece:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	68da      	ldr	r2, [r3, #12]
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007ede:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	695a      	ldr	r2, [r3, #20]
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f022 0201 	bic.w	r2, r2, #1
 8007eee:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2220      	movs	r2, #32
 8007ef4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007efc:	2b01      	cmp	r3, #1
 8007efe:	d135      	bne.n	8007f6c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2200      	movs	r2, #0
 8007f04:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	330c      	adds	r3, #12
 8007f0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f0e:	697b      	ldr	r3, [r7, #20]
 8007f10:	e853 3f00 	ldrex	r3, [r3]
 8007f14:	613b      	str	r3, [r7, #16]
   return(result);
 8007f16:	693b      	ldr	r3, [r7, #16]
 8007f18:	f023 0310 	bic.w	r3, r3, #16
 8007f1c:	627b      	str	r3, [r7, #36]	; 0x24
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	330c      	adds	r3, #12
 8007f24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f26:	623a      	str	r2, [r7, #32]
 8007f28:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f2a:	69f9      	ldr	r1, [r7, #28]
 8007f2c:	6a3a      	ldr	r2, [r7, #32]
 8007f2e:	e841 2300 	strex	r3, r2, [r1]
 8007f32:	61bb      	str	r3, [r7, #24]
   return(result);
 8007f34:	69bb      	ldr	r3, [r7, #24]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d1e5      	bne.n	8007f06 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f003 0310 	and.w	r3, r3, #16
 8007f44:	2b10      	cmp	r3, #16
 8007f46:	d10a      	bne.n	8007f5e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007f48:	2300      	movs	r3, #0
 8007f4a:	60fb      	str	r3, [r7, #12]
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	60fb      	str	r3, [r7, #12]
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	685b      	ldr	r3, [r3, #4]
 8007f5a:	60fb      	str	r3, [r7, #12]
 8007f5c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007f62:	4619      	mov	r1, r3
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f7ff fc3b 	bl	80077e0 <HAL_UARTEx_RxEventCallback>
 8007f6a:	e002      	b.n	8007f72 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f7ff fc19 	bl	80077a4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007f72:	2300      	movs	r3, #0
 8007f74:	e002      	b.n	8007f7c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007f76:	2300      	movs	r3, #0
 8007f78:	e000      	b.n	8007f7c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007f7a:	2302      	movs	r3, #2
  }
}
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	3730      	adds	r7, #48	; 0x30
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bd80      	pop	{r7, pc}

08007f84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007f84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007f88:	b0c0      	sub	sp, #256	; 0x100
 8007f8a:	af00      	add	r7, sp, #0
 8007f8c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	691b      	ldr	r3, [r3, #16]
 8007f98:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fa0:	68d9      	ldr	r1, [r3, #12]
 8007fa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fa6:	681a      	ldr	r2, [r3, #0]
 8007fa8:	ea40 0301 	orr.w	r3, r0, r1
 8007fac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007fae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fb2:	689a      	ldr	r2, [r3, #8]
 8007fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fb8:	691b      	ldr	r3, [r3, #16]
 8007fba:	431a      	orrs	r2, r3
 8007fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fc0:	695b      	ldr	r3, [r3, #20]
 8007fc2:	431a      	orrs	r2, r3
 8007fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fc8:	69db      	ldr	r3, [r3, #28]
 8007fca:	4313      	orrs	r3, r2
 8007fcc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	68db      	ldr	r3, [r3, #12]
 8007fd8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007fdc:	f021 010c 	bic.w	r1, r1, #12
 8007fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fe4:	681a      	ldr	r2, [r3, #0]
 8007fe6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007fea:	430b      	orrs	r3, r1
 8007fec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007fee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	695b      	ldr	r3, [r3, #20]
 8007ff6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007ffa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ffe:	6999      	ldr	r1, [r3, #24]
 8008000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008004:	681a      	ldr	r2, [r3, #0]
 8008006:	ea40 0301 	orr.w	r3, r0, r1
 800800a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800800c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008010:	681a      	ldr	r2, [r3, #0]
 8008012:	4b8f      	ldr	r3, [pc, #572]	; (8008250 <UART_SetConfig+0x2cc>)
 8008014:	429a      	cmp	r2, r3
 8008016:	d005      	beq.n	8008024 <UART_SetConfig+0xa0>
 8008018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800801c:	681a      	ldr	r2, [r3, #0]
 800801e:	4b8d      	ldr	r3, [pc, #564]	; (8008254 <UART_SetConfig+0x2d0>)
 8008020:	429a      	cmp	r2, r3
 8008022:	d104      	bne.n	800802e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008024:	f7fe ff7a 	bl	8006f1c <HAL_RCC_GetPCLK2Freq>
 8008028:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800802c:	e003      	b.n	8008036 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800802e:	f7fe ff61 	bl	8006ef4 <HAL_RCC_GetPCLK1Freq>
 8008032:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008036:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800803a:	69db      	ldr	r3, [r3, #28]
 800803c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008040:	f040 810c 	bne.w	800825c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008044:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008048:	2200      	movs	r2, #0
 800804a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800804e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008052:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008056:	4622      	mov	r2, r4
 8008058:	462b      	mov	r3, r5
 800805a:	1891      	adds	r1, r2, r2
 800805c:	65b9      	str	r1, [r7, #88]	; 0x58
 800805e:	415b      	adcs	r3, r3
 8008060:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008062:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008066:	4621      	mov	r1, r4
 8008068:	eb12 0801 	adds.w	r8, r2, r1
 800806c:	4629      	mov	r1, r5
 800806e:	eb43 0901 	adc.w	r9, r3, r1
 8008072:	f04f 0200 	mov.w	r2, #0
 8008076:	f04f 0300 	mov.w	r3, #0
 800807a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800807e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008082:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008086:	4690      	mov	r8, r2
 8008088:	4699      	mov	r9, r3
 800808a:	4623      	mov	r3, r4
 800808c:	eb18 0303 	adds.w	r3, r8, r3
 8008090:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008094:	462b      	mov	r3, r5
 8008096:	eb49 0303 	adc.w	r3, r9, r3
 800809a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800809e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080a2:	685b      	ldr	r3, [r3, #4]
 80080a4:	2200      	movs	r2, #0
 80080a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80080aa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80080ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80080b2:	460b      	mov	r3, r1
 80080b4:	18db      	adds	r3, r3, r3
 80080b6:	653b      	str	r3, [r7, #80]	; 0x50
 80080b8:	4613      	mov	r3, r2
 80080ba:	eb42 0303 	adc.w	r3, r2, r3
 80080be:	657b      	str	r3, [r7, #84]	; 0x54
 80080c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80080c4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80080c8:	f7f8 fde6 	bl	8000c98 <__aeabi_uldivmod>
 80080cc:	4602      	mov	r2, r0
 80080ce:	460b      	mov	r3, r1
 80080d0:	4b61      	ldr	r3, [pc, #388]	; (8008258 <UART_SetConfig+0x2d4>)
 80080d2:	fba3 2302 	umull	r2, r3, r3, r2
 80080d6:	095b      	lsrs	r3, r3, #5
 80080d8:	011c      	lsls	r4, r3, #4
 80080da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80080de:	2200      	movs	r2, #0
 80080e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80080e4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80080e8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80080ec:	4642      	mov	r2, r8
 80080ee:	464b      	mov	r3, r9
 80080f0:	1891      	adds	r1, r2, r2
 80080f2:	64b9      	str	r1, [r7, #72]	; 0x48
 80080f4:	415b      	adcs	r3, r3
 80080f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80080f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80080fc:	4641      	mov	r1, r8
 80080fe:	eb12 0a01 	adds.w	sl, r2, r1
 8008102:	4649      	mov	r1, r9
 8008104:	eb43 0b01 	adc.w	fp, r3, r1
 8008108:	f04f 0200 	mov.w	r2, #0
 800810c:	f04f 0300 	mov.w	r3, #0
 8008110:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008114:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008118:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800811c:	4692      	mov	sl, r2
 800811e:	469b      	mov	fp, r3
 8008120:	4643      	mov	r3, r8
 8008122:	eb1a 0303 	adds.w	r3, sl, r3
 8008126:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800812a:	464b      	mov	r3, r9
 800812c:	eb4b 0303 	adc.w	r3, fp, r3
 8008130:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008138:	685b      	ldr	r3, [r3, #4]
 800813a:	2200      	movs	r2, #0
 800813c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008140:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008144:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008148:	460b      	mov	r3, r1
 800814a:	18db      	adds	r3, r3, r3
 800814c:	643b      	str	r3, [r7, #64]	; 0x40
 800814e:	4613      	mov	r3, r2
 8008150:	eb42 0303 	adc.w	r3, r2, r3
 8008154:	647b      	str	r3, [r7, #68]	; 0x44
 8008156:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800815a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800815e:	f7f8 fd9b 	bl	8000c98 <__aeabi_uldivmod>
 8008162:	4602      	mov	r2, r0
 8008164:	460b      	mov	r3, r1
 8008166:	4611      	mov	r1, r2
 8008168:	4b3b      	ldr	r3, [pc, #236]	; (8008258 <UART_SetConfig+0x2d4>)
 800816a:	fba3 2301 	umull	r2, r3, r3, r1
 800816e:	095b      	lsrs	r3, r3, #5
 8008170:	2264      	movs	r2, #100	; 0x64
 8008172:	fb02 f303 	mul.w	r3, r2, r3
 8008176:	1acb      	subs	r3, r1, r3
 8008178:	00db      	lsls	r3, r3, #3
 800817a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800817e:	4b36      	ldr	r3, [pc, #216]	; (8008258 <UART_SetConfig+0x2d4>)
 8008180:	fba3 2302 	umull	r2, r3, r3, r2
 8008184:	095b      	lsrs	r3, r3, #5
 8008186:	005b      	lsls	r3, r3, #1
 8008188:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800818c:	441c      	add	r4, r3
 800818e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008192:	2200      	movs	r2, #0
 8008194:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008198:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800819c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80081a0:	4642      	mov	r2, r8
 80081a2:	464b      	mov	r3, r9
 80081a4:	1891      	adds	r1, r2, r2
 80081a6:	63b9      	str	r1, [r7, #56]	; 0x38
 80081a8:	415b      	adcs	r3, r3
 80081aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80081ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80081b0:	4641      	mov	r1, r8
 80081b2:	1851      	adds	r1, r2, r1
 80081b4:	6339      	str	r1, [r7, #48]	; 0x30
 80081b6:	4649      	mov	r1, r9
 80081b8:	414b      	adcs	r3, r1
 80081ba:	637b      	str	r3, [r7, #52]	; 0x34
 80081bc:	f04f 0200 	mov.w	r2, #0
 80081c0:	f04f 0300 	mov.w	r3, #0
 80081c4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80081c8:	4659      	mov	r1, fp
 80081ca:	00cb      	lsls	r3, r1, #3
 80081cc:	4651      	mov	r1, sl
 80081ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80081d2:	4651      	mov	r1, sl
 80081d4:	00ca      	lsls	r2, r1, #3
 80081d6:	4610      	mov	r0, r2
 80081d8:	4619      	mov	r1, r3
 80081da:	4603      	mov	r3, r0
 80081dc:	4642      	mov	r2, r8
 80081de:	189b      	adds	r3, r3, r2
 80081e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80081e4:	464b      	mov	r3, r9
 80081e6:	460a      	mov	r2, r1
 80081e8:	eb42 0303 	adc.w	r3, r2, r3
 80081ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80081f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081f4:	685b      	ldr	r3, [r3, #4]
 80081f6:	2200      	movs	r2, #0
 80081f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80081fc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008200:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008204:	460b      	mov	r3, r1
 8008206:	18db      	adds	r3, r3, r3
 8008208:	62bb      	str	r3, [r7, #40]	; 0x28
 800820a:	4613      	mov	r3, r2
 800820c:	eb42 0303 	adc.w	r3, r2, r3
 8008210:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008212:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008216:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800821a:	f7f8 fd3d 	bl	8000c98 <__aeabi_uldivmod>
 800821e:	4602      	mov	r2, r0
 8008220:	460b      	mov	r3, r1
 8008222:	4b0d      	ldr	r3, [pc, #52]	; (8008258 <UART_SetConfig+0x2d4>)
 8008224:	fba3 1302 	umull	r1, r3, r3, r2
 8008228:	095b      	lsrs	r3, r3, #5
 800822a:	2164      	movs	r1, #100	; 0x64
 800822c:	fb01 f303 	mul.w	r3, r1, r3
 8008230:	1ad3      	subs	r3, r2, r3
 8008232:	00db      	lsls	r3, r3, #3
 8008234:	3332      	adds	r3, #50	; 0x32
 8008236:	4a08      	ldr	r2, [pc, #32]	; (8008258 <UART_SetConfig+0x2d4>)
 8008238:	fba2 2303 	umull	r2, r3, r2, r3
 800823c:	095b      	lsrs	r3, r3, #5
 800823e:	f003 0207 	and.w	r2, r3, #7
 8008242:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	4422      	add	r2, r4
 800824a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800824c:	e105      	b.n	800845a <UART_SetConfig+0x4d6>
 800824e:	bf00      	nop
 8008250:	40011000 	.word	0x40011000
 8008254:	40011400 	.word	0x40011400
 8008258:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800825c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008260:	2200      	movs	r2, #0
 8008262:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008266:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800826a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800826e:	4642      	mov	r2, r8
 8008270:	464b      	mov	r3, r9
 8008272:	1891      	adds	r1, r2, r2
 8008274:	6239      	str	r1, [r7, #32]
 8008276:	415b      	adcs	r3, r3
 8008278:	627b      	str	r3, [r7, #36]	; 0x24
 800827a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800827e:	4641      	mov	r1, r8
 8008280:	1854      	adds	r4, r2, r1
 8008282:	4649      	mov	r1, r9
 8008284:	eb43 0501 	adc.w	r5, r3, r1
 8008288:	f04f 0200 	mov.w	r2, #0
 800828c:	f04f 0300 	mov.w	r3, #0
 8008290:	00eb      	lsls	r3, r5, #3
 8008292:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008296:	00e2      	lsls	r2, r4, #3
 8008298:	4614      	mov	r4, r2
 800829a:	461d      	mov	r5, r3
 800829c:	4643      	mov	r3, r8
 800829e:	18e3      	adds	r3, r4, r3
 80082a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80082a4:	464b      	mov	r3, r9
 80082a6:	eb45 0303 	adc.w	r3, r5, r3
 80082aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80082ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082b2:	685b      	ldr	r3, [r3, #4]
 80082b4:	2200      	movs	r2, #0
 80082b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80082ba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80082be:	f04f 0200 	mov.w	r2, #0
 80082c2:	f04f 0300 	mov.w	r3, #0
 80082c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80082ca:	4629      	mov	r1, r5
 80082cc:	008b      	lsls	r3, r1, #2
 80082ce:	4621      	mov	r1, r4
 80082d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80082d4:	4621      	mov	r1, r4
 80082d6:	008a      	lsls	r2, r1, #2
 80082d8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80082dc:	f7f8 fcdc 	bl	8000c98 <__aeabi_uldivmod>
 80082e0:	4602      	mov	r2, r0
 80082e2:	460b      	mov	r3, r1
 80082e4:	4b60      	ldr	r3, [pc, #384]	; (8008468 <UART_SetConfig+0x4e4>)
 80082e6:	fba3 2302 	umull	r2, r3, r3, r2
 80082ea:	095b      	lsrs	r3, r3, #5
 80082ec:	011c      	lsls	r4, r3, #4
 80082ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80082f2:	2200      	movs	r2, #0
 80082f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80082f8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80082fc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008300:	4642      	mov	r2, r8
 8008302:	464b      	mov	r3, r9
 8008304:	1891      	adds	r1, r2, r2
 8008306:	61b9      	str	r1, [r7, #24]
 8008308:	415b      	adcs	r3, r3
 800830a:	61fb      	str	r3, [r7, #28]
 800830c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008310:	4641      	mov	r1, r8
 8008312:	1851      	adds	r1, r2, r1
 8008314:	6139      	str	r1, [r7, #16]
 8008316:	4649      	mov	r1, r9
 8008318:	414b      	adcs	r3, r1
 800831a:	617b      	str	r3, [r7, #20]
 800831c:	f04f 0200 	mov.w	r2, #0
 8008320:	f04f 0300 	mov.w	r3, #0
 8008324:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008328:	4659      	mov	r1, fp
 800832a:	00cb      	lsls	r3, r1, #3
 800832c:	4651      	mov	r1, sl
 800832e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008332:	4651      	mov	r1, sl
 8008334:	00ca      	lsls	r2, r1, #3
 8008336:	4610      	mov	r0, r2
 8008338:	4619      	mov	r1, r3
 800833a:	4603      	mov	r3, r0
 800833c:	4642      	mov	r2, r8
 800833e:	189b      	adds	r3, r3, r2
 8008340:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008344:	464b      	mov	r3, r9
 8008346:	460a      	mov	r2, r1
 8008348:	eb42 0303 	adc.w	r3, r2, r3
 800834c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008354:	685b      	ldr	r3, [r3, #4]
 8008356:	2200      	movs	r2, #0
 8008358:	67bb      	str	r3, [r7, #120]	; 0x78
 800835a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800835c:	f04f 0200 	mov.w	r2, #0
 8008360:	f04f 0300 	mov.w	r3, #0
 8008364:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008368:	4649      	mov	r1, r9
 800836a:	008b      	lsls	r3, r1, #2
 800836c:	4641      	mov	r1, r8
 800836e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008372:	4641      	mov	r1, r8
 8008374:	008a      	lsls	r2, r1, #2
 8008376:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800837a:	f7f8 fc8d 	bl	8000c98 <__aeabi_uldivmod>
 800837e:	4602      	mov	r2, r0
 8008380:	460b      	mov	r3, r1
 8008382:	4b39      	ldr	r3, [pc, #228]	; (8008468 <UART_SetConfig+0x4e4>)
 8008384:	fba3 1302 	umull	r1, r3, r3, r2
 8008388:	095b      	lsrs	r3, r3, #5
 800838a:	2164      	movs	r1, #100	; 0x64
 800838c:	fb01 f303 	mul.w	r3, r1, r3
 8008390:	1ad3      	subs	r3, r2, r3
 8008392:	011b      	lsls	r3, r3, #4
 8008394:	3332      	adds	r3, #50	; 0x32
 8008396:	4a34      	ldr	r2, [pc, #208]	; (8008468 <UART_SetConfig+0x4e4>)
 8008398:	fba2 2303 	umull	r2, r3, r2, r3
 800839c:	095b      	lsrs	r3, r3, #5
 800839e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80083a2:	441c      	add	r4, r3
 80083a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80083a8:	2200      	movs	r2, #0
 80083aa:	673b      	str	r3, [r7, #112]	; 0x70
 80083ac:	677a      	str	r2, [r7, #116]	; 0x74
 80083ae:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80083b2:	4642      	mov	r2, r8
 80083b4:	464b      	mov	r3, r9
 80083b6:	1891      	adds	r1, r2, r2
 80083b8:	60b9      	str	r1, [r7, #8]
 80083ba:	415b      	adcs	r3, r3
 80083bc:	60fb      	str	r3, [r7, #12]
 80083be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80083c2:	4641      	mov	r1, r8
 80083c4:	1851      	adds	r1, r2, r1
 80083c6:	6039      	str	r1, [r7, #0]
 80083c8:	4649      	mov	r1, r9
 80083ca:	414b      	adcs	r3, r1
 80083cc:	607b      	str	r3, [r7, #4]
 80083ce:	f04f 0200 	mov.w	r2, #0
 80083d2:	f04f 0300 	mov.w	r3, #0
 80083d6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80083da:	4659      	mov	r1, fp
 80083dc:	00cb      	lsls	r3, r1, #3
 80083de:	4651      	mov	r1, sl
 80083e0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80083e4:	4651      	mov	r1, sl
 80083e6:	00ca      	lsls	r2, r1, #3
 80083e8:	4610      	mov	r0, r2
 80083ea:	4619      	mov	r1, r3
 80083ec:	4603      	mov	r3, r0
 80083ee:	4642      	mov	r2, r8
 80083f0:	189b      	adds	r3, r3, r2
 80083f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80083f4:	464b      	mov	r3, r9
 80083f6:	460a      	mov	r2, r1
 80083f8:	eb42 0303 	adc.w	r3, r2, r3
 80083fc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80083fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008402:	685b      	ldr	r3, [r3, #4]
 8008404:	2200      	movs	r2, #0
 8008406:	663b      	str	r3, [r7, #96]	; 0x60
 8008408:	667a      	str	r2, [r7, #100]	; 0x64
 800840a:	f04f 0200 	mov.w	r2, #0
 800840e:	f04f 0300 	mov.w	r3, #0
 8008412:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008416:	4649      	mov	r1, r9
 8008418:	008b      	lsls	r3, r1, #2
 800841a:	4641      	mov	r1, r8
 800841c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008420:	4641      	mov	r1, r8
 8008422:	008a      	lsls	r2, r1, #2
 8008424:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008428:	f7f8 fc36 	bl	8000c98 <__aeabi_uldivmod>
 800842c:	4602      	mov	r2, r0
 800842e:	460b      	mov	r3, r1
 8008430:	4b0d      	ldr	r3, [pc, #52]	; (8008468 <UART_SetConfig+0x4e4>)
 8008432:	fba3 1302 	umull	r1, r3, r3, r2
 8008436:	095b      	lsrs	r3, r3, #5
 8008438:	2164      	movs	r1, #100	; 0x64
 800843a:	fb01 f303 	mul.w	r3, r1, r3
 800843e:	1ad3      	subs	r3, r2, r3
 8008440:	011b      	lsls	r3, r3, #4
 8008442:	3332      	adds	r3, #50	; 0x32
 8008444:	4a08      	ldr	r2, [pc, #32]	; (8008468 <UART_SetConfig+0x4e4>)
 8008446:	fba2 2303 	umull	r2, r3, r2, r3
 800844a:	095b      	lsrs	r3, r3, #5
 800844c:	f003 020f 	and.w	r2, r3, #15
 8008450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	4422      	add	r2, r4
 8008458:	609a      	str	r2, [r3, #8]
}
 800845a:	bf00      	nop
 800845c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008460:	46bd      	mov	sp, r7
 8008462:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008466:	bf00      	nop
 8008468:	51eb851f 	.word	0x51eb851f

0800846c <__errno>:
 800846c:	4b01      	ldr	r3, [pc, #4]	; (8008474 <__errno+0x8>)
 800846e:	6818      	ldr	r0, [r3, #0]
 8008470:	4770      	bx	lr
 8008472:	bf00      	nop
 8008474:	20000020 	.word	0x20000020

08008478 <__libc_init_array>:
 8008478:	b570      	push	{r4, r5, r6, lr}
 800847a:	4d0d      	ldr	r5, [pc, #52]	; (80084b0 <__libc_init_array+0x38>)
 800847c:	4c0d      	ldr	r4, [pc, #52]	; (80084b4 <__libc_init_array+0x3c>)
 800847e:	1b64      	subs	r4, r4, r5
 8008480:	10a4      	asrs	r4, r4, #2
 8008482:	2600      	movs	r6, #0
 8008484:	42a6      	cmp	r6, r4
 8008486:	d109      	bne.n	800849c <__libc_init_array+0x24>
 8008488:	4d0b      	ldr	r5, [pc, #44]	; (80084b8 <__libc_init_array+0x40>)
 800848a:	4c0c      	ldr	r4, [pc, #48]	; (80084bc <__libc_init_array+0x44>)
 800848c:	f002 ff78 	bl	800b380 <_init>
 8008490:	1b64      	subs	r4, r4, r5
 8008492:	10a4      	asrs	r4, r4, #2
 8008494:	2600      	movs	r6, #0
 8008496:	42a6      	cmp	r6, r4
 8008498:	d105      	bne.n	80084a6 <__libc_init_array+0x2e>
 800849a:	bd70      	pop	{r4, r5, r6, pc}
 800849c:	f855 3b04 	ldr.w	r3, [r5], #4
 80084a0:	4798      	blx	r3
 80084a2:	3601      	adds	r6, #1
 80084a4:	e7ee      	b.n	8008484 <__libc_init_array+0xc>
 80084a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80084aa:	4798      	blx	r3
 80084ac:	3601      	adds	r6, #1
 80084ae:	e7f2      	b.n	8008496 <__libc_init_array+0x1e>
 80084b0:	0800d33c 	.word	0x0800d33c
 80084b4:	0800d33c 	.word	0x0800d33c
 80084b8:	0800d33c 	.word	0x0800d33c
 80084bc:	0800d340 	.word	0x0800d340

080084c0 <memset>:
 80084c0:	4402      	add	r2, r0
 80084c2:	4603      	mov	r3, r0
 80084c4:	4293      	cmp	r3, r2
 80084c6:	d100      	bne.n	80084ca <memset+0xa>
 80084c8:	4770      	bx	lr
 80084ca:	f803 1b01 	strb.w	r1, [r3], #1
 80084ce:	e7f9      	b.n	80084c4 <memset+0x4>

080084d0 <__cvt>:
 80084d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80084d4:	ec55 4b10 	vmov	r4, r5, d0
 80084d8:	2d00      	cmp	r5, #0
 80084da:	460e      	mov	r6, r1
 80084dc:	4619      	mov	r1, r3
 80084de:	462b      	mov	r3, r5
 80084e0:	bfbb      	ittet	lt
 80084e2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80084e6:	461d      	movlt	r5, r3
 80084e8:	2300      	movge	r3, #0
 80084ea:	232d      	movlt	r3, #45	; 0x2d
 80084ec:	700b      	strb	r3, [r1, #0]
 80084ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80084f0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80084f4:	4691      	mov	r9, r2
 80084f6:	f023 0820 	bic.w	r8, r3, #32
 80084fa:	bfbc      	itt	lt
 80084fc:	4622      	movlt	r2, r4
 80084fe:	4614      	movlt	r4, r2
 8008500:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008504:	d005      	beq.n	8008512 <__cvt+0x42>
 8008506:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800850a:	d100      	bne.n	800850e <__cvt+0x3e>
 800850c:	3601      	adds	r6, #1
 800850e:	2102      	movs	r1, #2
 8008510:	e000      	b.n	8008514 <__cvt+0x44>
 8008512:	2103      	movs	r1, #3
 8008514:	ab03      	add	r3, sp, #12
 8008516:	9301      	str	r3, [sp, #4]
 8008518:	ab02      	add	r3, sp, #8
 800851a:	9300      	str	r3, [sp, #0]
 800851c:	ec45 4b10 	vmov	d0, r4, r5
 8008520:	4653      	mov	r3, sl
 8008522:	4632      	mov	r2, r6
 8008524:	f000 fcec 	bl	8008f00 <_dtoa_r>
 8008528:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800852c:	4607      	mov	r7, r0
 800852e:	d102      	bne.n	8008536 <__cvt+0x66>
 8008530:	f019 0f01 	tst.w	r9, #1
 8008534:	d022      	beq.n	800857c <__cvt+0xac>
 8008536:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800853a:	eb07 0906 	add.w	r9, r7, r6
 800853e:	d110      	bne.n	8008562 <__cvt+0x92>
 8008540:	783b      	ldrb	r3, [r7, #0]
 8008542:	2b30      	cmp	r3, #48	; 0x30
 8008544:	d10a      	bne.n	800855c <__cvt+0x8c>
 8008546:	2200      	movs	r2, #0
 8008548:	2300      	movs	r3, #0
 800854a:	4620      	mov	r0, r4
 800854c:	4629      	mov	r1, r5
 800854e:	f7f8 fac3 	bl	8000ad8 <__aeabi_dcmpeq>
 8008552:	b918      	cbnz	r0, 800855c <__cvt+0x8c>
 8008554:	f1c6 0601 	rsb	r6, r6, #1
 8008558:	f8ca 6000 	str.w	r6, [sl]
 800855c:	f8da 3000 	ldr.w	r3, [sl]
 8008560:	4499      	add	r9, r3
 8008562:	2200      	movs	r2, #0
 8008564:	2300      	movs	r3, #0
 8008566:	4620      	mov	r0, r4
 8008568:	4629      	mov	r1, r5
 800856a:	f7f8 fab5 	bl	8000ad8 <__aeabi_dcmpeq>
 800856e:	b108      	cbz	r0, 8008574 <__cvt+0xa4>
 8008570:	f8cd 900c 	str.w	r9, [sp, #12]
 8008574:	2230      	movs	r2, #48	; 0x30
 8008576:	9b03      	ldr	r3, [sp, #12]
 8008578:	454b      	cmp	r3, r9
 800857a:	d307      	bcc.n	800858c <__cvt+0xbc>
 800857c:	9b03      	ldr	r3, [sp, #12]
 800857e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008580:	1bdb      	subs	r3, r3, r7
 8008582:	4638      	mov	r0, r7
 8008584:	6013      	str	r3, [r2, #0]
 8008586:	b004      	add	sp, #16
 8008588:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800858c:	1c59      	adds	r1, r3, #1
 800858e:	9103      	str	r1, [sp, #12]
 8008590:	701a      	strb	r2, [r3, #0]
 8008592:	e7f0      	b.n	8008576 <__cvt+0xa6>

08008594 <__exponent>:
 8008594:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008596:	4603      	mov	r3, r0
 8008598:	2900      	cmp	r1, #0
 800859a:	bfb8      	it	lt
 800859c:	4249      	neglt	r1, r1
 800859e:	f803 2b02 	strb.w	r2, [r3], #2
 80085a2:	bfb4      	ite	lt
 80085a4:	222d      	movlt	r2, #45	; 0x2d
 80085a6:	222b      	movge	r2, #43	; 0x2b
 80085a8:	2909      	cmp	r1, #9
 80085aa:	7042      	strb	r2, [r0, #1]
 80085ac:	dd2a      	ble.n	8008604 <__exponent+0x70>
 80085ae:	f10d 0407 	add.w	r4, sp, #7
 80085b2:	46a4      	mov	ip, r4
 80085b4:	270a      	movs	r7, #10
 80085b6:	46a6      	mov	lr, r4
 80085b8:	460a      	mov	r2, r1
 80085ba:	fb91 f6f7 	sdiv	r6, r1, r7
 80085be:	fb07 1516 	mls	r5, r7, r6, r1
 80085c2:	3530      	adds	r5, #48	; 0x30
 80085c4:	2a63      	cmp	r2, #99	; 0x63
 80085c6:	f104 34ff 	add.w	r4, r4, #4294967295
 80085ca:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80085ce:	4631      	mov	r1, r6
 80085d0:	dcf1      	bgt.n	80085b6 <__exponent+0x22>
 80085d2:	3130      	adds	r1, #48	; 0x30
 80085d4:	f1ae 0502 	sub.w	r5, lr, #2
 80085d8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80085dc:	1c44      	adds	r4, r0, #1
 80085de:	4629      	mov	r1, r5
 80085e0:	4561      	cmp	r1, ip
 80085e2:	d30a      	bcc.n	80085fa <__exponent+0x66>
 80085e4:	f10d 0209 	add.w	r2, sp, #9
 80085e8:	eba2 020e 	sub.w	r2, r2, lr
 80085ec:	4565      	cmp	r5, ip
 80085ee:	bf88      	it	hi
 80085f0:	2200      	movhi	r2, #0
 80085f2:	4413      	add	r3, r2
 80085f4:	1a18      	subs	r0, r3, r0
 80085f6:	b003      	add	sp, #12
 80085f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80085fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80085fe:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008602:	e7ed      	b.n	80085e0 <__exponent+0x4c>
 8008604:	2330      	movs	r3, #48	; 0x30
 8008606:	3130      	adds	r1, #48	; 0x30
 8008608:	7083      	strb	r3, [r0, #2]
 800860a:	70c1      	strb	r1, [r0, #3]
 800860c:	1d03      	adds	r3, r0, #4
 800860e:	e7f1      	b.n	80085f4 <__exponent+0x60>

08008610 <_printf_float>:
 8008610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008614:	ed2d 8b02 	vpush	{d8}
 8008618:	b08d      	sub	sp, #52	; 0x34
 800861a:	460c      	mov	r4, r1
 800861c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008620:	4616      	mov	r6, r2
 8008622:	461f      	mov	r7, r3
 8008624:	4605      	mov	r5, r0
 8008626:	f001 fa59 	bl	8009adc <_localeconv_r>
 800862a:	f8d0 a000 	ldr.w	sl, [r0]
 800862e:	4650      	mov	r0, sl
 8008630:	f7f7 fdd6 	bl	80001e0 <strlen>
 8008634:	2300      	movs	r3, #0
 8008636:	930a      	str	r3, [sp, #40]	; 0x28
 8008638:	6823      	ldr	r3, [r4, #0]
 800863a:	9305      	str	r3, [sp, #20]
 800863c:	f8d8 3000 	ldr.w	r3, [r8]
 8008640:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008644:	3307      	adds	r3, #7
 8008646:	f023 0307 	bic.w	r3, r3, #7
 800864a:	f103 0208 	add.w	r2, r3, #8
 800864e:	f8c8 2000 	str.w	r2, [r8]
 8008652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008656:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800865a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800865e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008662:	9307      	str	r3, [sp, #28]
 8008664:	f8cd 8018 	str.w	r8, [sp, #24]
 8008668:	ee08 0a10 	vmov	s16, r0
 800866c:	4b9f      	ldr	r3, [pc, #636]	; (80088ec <_printf_float+0x2dc>)
 800866e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008672:	f04f 32ff 	mov.w	r2, #4294967295
 8008676:	f7f8 fa61 	bl	8000b3c <__aeabi_dcmpun>
 800867a:	bb88      	cbnz	r0, 80086e0 <_printf_float+0xd0>
 800867c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008680:	4b9a      	ldr	r3, [pc, #616]	; (80088ec <_printf_float+0x2dc>)
 8008682:	f04f 32ff 	mov.w	r2, #4294967295
 8008686:	f7f8 fa3b 	bl	8000b00 <__aeabi_dcmple>
 800868a:	bb48      	cbnz	r0, 80086e0 <_printf_float+0xd0>
 800868c:	2200      	movs	r2, #0
 800868e:	2300      	movs	r3, #0
 8008690:	4640      	mov	r0, r8
 8008692:	4649      	mov	r1, r9
 8008694:	f7f8 fa2a 	bl	8000aec <__aeabi_dcmplt>
 8008698:	b110      	cbz	r0, 80086a0 <_printf_float+0x90>
 800869a:	232d      	movs	r3, #45	; 0x2d
 800869c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086a0:	4b93      	ldr	r3, [pc, #588]	; (80088f0 <_printf_float+0x2e0>)
 80086a2:	4894      	ldr	r0, [pc, #592]	; (80088f4 <_printf_float+0x2e4>)
 80086a4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80086a8:	bf94      	ite	ls
 80086aa:	4698      	movls	r8, r3
 80086ac:	4680      	movhi	r8, r0
 80086ae:	2303      	movs	r3, #3
 80086b0:	6123      	str	r3, [r4, #16]
 80086b2:	9b05      	ldr	r3, [sp, #20]
 80086b4:	f023 0204 	bic.w	r2, r3, #4
 80086b8:	6022      	str	r2, [r4, #0]
 80086ba:	f04f 0900 	mov.w	r9, #0
 80086be:	9700      	str	r7, [sp, #0]
 80086c0:	4633      	mov	r3, r6
 80086c2:	aa0b      	add	r2, sp, #44	; 0x2c
 80086c4:	4621      	mov	r1, r4
 80086c6:	4628      	mov	r0, r5
 80086c8:	f000 f9d8 	bl	8008a7c <_printf_common>
 80086cc:	3001      	adds	r0, #1
 80086ce:	f040 8090 	bne.w	80087f2 <_printf_float+0x1e2>
 80086d2:	f04f 30ff 	mov.w	r0, #4294967295
 80086d6:	b00d      	add	sp, #52	; 0x34
 80086d8:	ecbd 8b02 	vpop	{d8}
 80086dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086e0:	4642      	mov	r2, r8
 80086e2:	464b      	mov	r3, r9
 80086e4:	4640      	mov	r0, r8
 80086e6:	4649      	mov	r1, r9
 80086e8:	f7f8 fa28 	bl	8000b3c <__aeabi_dcmpun>
 80086ec:	b140      	cbz	r0, 8008700 <_printf_float+0xf0>
 80086ee:	464b      	mov	r3, r9
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	bfbc      	itt	lt
 80086f4:	232d      	movlt	r3, #45	; 0x2d
 80086f6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80086fa:	487f      	ldr	r0, [pc, #508]	; (80088f8 <_printf_float+0x2e8>)
 80086fc:	4b7f      	ldr	r3, [pc, #508]	; (80088fc <_printf_float+0x2ec>)
 80086fe:	e7d1      	b.n	80086a4 <_printf_float+0x94>
 8008700:	6863      	ldr	r3, [r4, #4]
 8008702:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008706:	9206      	str	r2, [sp, #24]
 8008708:	1c5a      	adds	r2, r3, #1
 800870a:	d13f      	bne.n	800878c <_printf_float+0x17c>
 800870c:	2306      	movs	r3, #6
 800870e:	6063      	str	r3, [r4, #4]
 8008710:	9b05      	ldr	r3, [sp, #20]
 8008712:	6861      	ldr	r1, [r4, #4]
 8008714:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008718:	2300      	movs	r3, #0
 800871a:	9303      	str	r3, [sp, #12]
 800871c:	ab0a      	add	r3, sp, #40	; 0x28
 800871e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008722:	ab09      	add	r3, sp, #36	; 0x24
 8008724:	ec49 8b10 	vmov	d0, r8, r9
 8008728:	9300      	str	r3, [sp, #0]
 800872a:	6022      	str	r2, [r4, #0]
 800872c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008730:	4628      	mov	r0, r5
 8008732:	f7ff fecd 	bl	80084d0 <__cvt>
 8008736:	9b06      	ldr	r3, [sp, #24]
 8008738:	9909      	ldr	r1, [sp, #36]	; 0x24
 800873a:	2b47      	cmp	r3, #71	; 0x47
 800873c:	4680      	mov	r8, r0
 800873e:	d108      	bne.n	8008752 <_printf_float+0x142>
 8008740:	1cc8      	adds	r0, r1, #3
 8008742:	db02      	blt.n	800874a <_printf_float+0x13a>
 8008744:	6863      	ldr	r3, [r4, #4]
 8008746:	4299      	cmp	r1, r3
 8008748:	dd41      	ble.n	80087ce <_printf_float+0x1be>
 800874a:	f1ab 0b02 	sub.w	fp, fp, #2
 800874e:	fa5f fb8b 	uxtb.w	fp, fp
 8008752:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008756:	d820      	bhi.n	800879a <_printf_float+0x18a>
 8008758:	3901      	subs	r1, #1
 800875a:	465a      	mov	r2, fp
 800875c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008760:	9109      	str	r1, [sp, #36]	; 0x24
 8008762:	f7ff ff17 	bl	8008594 <__exponent>
 8008766:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008768:	1813      	adds	r3, r2, r0
 800876a:	2a01      	cmp	r2, #1
 800876c:	4681      	mov	r9, r0
 800876e:	6123      	str	r3, [r4, #16]
 8008770:	dc02      	bgt.n	8008778 <_printf_float+0x168>
 8008772:	6822      	ldr	r2, [r4, #0]
 8008774:	07d2      	lsls	r2, r2, #31
 8008776:	d501      	bpl.n	800877c <_printf_float+0x16c>
 8008778:	3301      	adds	r3, #1
 800877a:	6123      	str	r3, [r4, #16]
 800877c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008780:	2b00      	cmp	r3, #0
 8008782:	d09c      	beq.n	80086be <_printf_float+0xae>
 8008784:	232d      	movs	r3, #45	; 0x2d
 8008786:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800878a:	e798      	b.n	80086be <_printf_float+0xae>
 800878c:	9a06      	ldr	r2, [sp, #24]
 800878e:	2a47      	cmp	r2, #71	; 0x47
 8008790:	d1be      	bne.n	8008710 <_printf_float+0x100>
 8008792:	2b00      	cmp	r3, #0
 8008794:	d1bc      	bne.n	8008710 <_printf_float+0x100>
 8008796:	2301      	movs	r3, #1
 8008798:	e7b9      	b.n	800870e <_printf_float+0xfe>
 800879a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800879e:	d118      	bne.n	80087d2 <_printf_float+0x1c2>
 80087a0:	2900      	cmp	r1, #0
 80087a2:	6863      	ldr	r3, [r4, #4]
 80087a4:	dd0b      	ble.n	80087be <_printf_float+0x1ae>
 80087a6:	6121      	str	r1, [r4, #16]
 80087a8:	b913      	cbnz	r3, 80087b0 <_printf_float+0x1a0>
 80087aa:	6822      	ldr	r2, [r4, #0]
 80087ac:	07d0      	lsls	r0, r2, #31
 80087ae:	d502      	bpl.n	80087b6 <_printf_float+0x1a6>
 80087b0:	3301      	adds	r3, #1
 80087b2:	440b      	add	r3, r1
 80087b4:	6123      	str	r3, [r4, #16]
 80087b6:	65a1      	str	r1, [r4, #88]	; 0x58
 80087b8:	f04f 0900 	mov.w	r9, #0
 80087bc:	e7de      	b.n	800877c <_printf_float+0x16c>
 80087be:	b913      	cbnz	r3, 80087c6 <_printf_float+0x1b6>
 80087c0:	6822      	ldr	r2, [r4, #0]
 80087c2:	07d2      	lsls	r2, r2, #31
 80087c4:	d501      	bpl.n	80087ca <_printf_float+0x1ba>
 80087c6:	3302      	adds	r3, #2
 80087c8:	e7f4      	b.n	80087b4 <_printf_float+0x1a4>
 80087ca:	2301      	movs	r3, #1
 80087cc:	e7f2      	b.n	80087b4 <_printf_float+0x1a4>
 80087ce:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80087d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087d4:	4299      	cmp	r1, r3
 80087d6:	db05      	blt.n	80087e4 <_printf_float+0x1d4>
 80087d8:	6823      	ldr	r3, [r4, #0]
 80087da:	6121      	str	r1, [r4, #16]
 80087dc:	07d8      	lsls	r0, r3, #31
 80087de:	d5ea      	bpl.n	80087b6 <_printf_float+0x1a6>
 80087e0:	1c4b      	adds	r3, r1, #1
 80087e2:	e7e7      	b.n	80087b4 <_printf_float+0x1a4>
 80087e4:	2900      	cmp	r1, #0
 80087e6:	bfd4      	ite	le
 80087e8:	f1c1 0202 	rsble	r2, r1, #2
 80087ec:	2201      	movgt	r2, #1
 80087ee:	4413      	add	r3, r2
 80087f0:	e7e0      	b.n	80087b4 <_printf_float+0x1a4>
 80087f2:	6823      	ldr	r3, [r4, #0]
 80087f4:	055a      	lsls	r2, r3, #21
 80087f6:	d407      	bmi.n	8008808 <_printf_float+0x1f8>
 80087f8:	6923      	ldr	r3, [r4, #16]
 80087fa:	4642      	mov	r2, r8
 80087fc:	4631      	mov	r1, r6
 80087fe:	4628      	mov	r0, r5
 8008800:	47b8      	blx	r7
 8008802:	3001      	adds	r0, #1
 8008804:	d12c      	bne.n	8008860 <_printf_float+0x250>
 8008806:	e764      	b.n	80086d2 <_printf_float+0xc2>
 8008808:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800880c:	f240 80e0 	bls.w	80089d0 <_printf_float+0x3c0>
 8008810:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008814:	2200      	movs	r2, #0
 8008816:	2300      	movs	r3, #0
 8008818:	f7f8 f95e 	bl	8000ad8 <__aeabi_dcmpeq>
 800881c:	2800      	cmp	r0, #0
 800881e:	d034      	beq.n	800888a <_printf_float+0x27a>
 8008820:	4a37      	ldr	r2, [pc, #220]	; (8008900 <_printf_float+0x2f0>)
 8008822:	2301      	movs	r3, #1
 8008824:	4631      	mov	r1, r6
 8008826:	4628      	mov	r0, r5
 8008828:	47b8      	blx	r7
 800882a:	3001      	adds	r0, #1
 800882c:	f43f af51 	beq.w	80086d2 <_printf_float+0xc2>
 8008830:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008834:	429a      	cmp	r2, r3
 8008836:	db02      	blt.n	800883e <_printf_float+0x22e>
 8008838:	6823      	ldr	r3, [r4, #0]
 800883a:	07d8      	lsls	r0, r3, #31
 800883c:	d510      	bpl.n	8008860 <_printf_float+0x250>
 800883e:	ee18 3a10 	vmov	r3, s16
 8008842:	4652      	mov	r2, sl
 8008844:	4631      	mov	r1, r6
 8008846:	4628      	mov	r0, r5
 8008848:	47b8      	blx	r7
 800884a:	3001      	adds	r0, #1
 800884c:	f43f af41 	beq.w	80086d2 <_printf_float+0xc2>
 8008850:	f04f 0800 	mov.w	r8, #0
 8008854:	f104 091a 	add.w	r9, r4, #26
 8008858:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800885a:	3b01      	subs	r3, #1
 800885c:	4543      	cmp	r3, r8
 800885e:	dc09      	bgt.n	8008874 <_printf_float+0x264>
 8008860:	6823      	ldr	r3, [r4, #0]
 8008862:	079b      	lsls	r3, r3, #30
 8008864:	f100 8105 	bmi.w	8008a72 <_printf_float+0x462>
 8008868:	68e0      	ldr	r0, [r4, #12]
 800886a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800886c:	4298      	cmp	r0, r3
 800886e:	bfb8      	it	lt
 8008870:	4618      	movlt	r0, r3
 8008872:	e730      	b.n	80086d6 <_printf_float+0xc6>
 8008874:	2301      	movs	r3, #1
 8008876:	464a      	mov	r2, r9
 8008878:	4631      	mov	r1, r6
 800887a:	4628      	mov	r0, r5
 800887c:	47b8      	blx	r7
 800887e:	3001      	adds	r0, #1
 8008880:	f43f af27 	beq.w	80086d2 <_printf_float+0xc2>
 8008884:	f108 0801 	add.w	r8, r8, #1
 8008888:	e7e6      	b.n	8008858 <_printf_float+0x248>
 800888a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800888c:	2b00      	cmp	r3, #0
 800888e:	dc39      	bgt.n	8008904 <_printf_float+0x2f4>
 8008890:	4a1b      	ldr	r2, [pc, #108]	; (8008900 <_printf_float+0x2f0>)
 8008892:	2301      	movs	r3, #1
 8008894:	4631      	mov	r1, r6
 8008896:	4628      	mov	r0, r5
 8008898:	47b8      	blx	r7
 800889a:	3001      	adds	r0, #1
 800889c:	f43f af19 	beq.w	80086d2 <_printf_float+0xc2>
 80088a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80088a4:	4313      	orrs	r3, r2
 80088a6:	d102      	bne.n	80088ae <_printf_float+0x29e>
 80088a8:	6823      	ldr	r3, [r4, #0]
 80088aa:	07d9      	lsls	r1, r3, #31
 80088ac:	d5d8      	bpl.n	8008860 <_printf_float+0x250>
 80088ae:	ee18 3a10 	vmov	r3, s16
 80088b2:	4652      	mov	r2, sl
 80088b4:	4631      	mov	r1, r6
 80088b6:	4628      	mov	r0, r5
 80088b8:	47b8      	blx	r7
 80088ba:	3001      	adds	r0, #1
 80088bc:	f43f af09 	beq.w	80086d2 <_printf_float+0xc2>
 80088c0:	f04f 0900 	mov.w	r9, #0
 80088c4:	f104 0a1a 	add.w	sl, r4, #26
 80088c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088ca:	425b      	negs	r3, r3
 80088cc:	454b      	cmp	r3, r9
 80088ce:	dc01      	bgt.n	80088d4 <_printf_float+0x2c4>
 80088d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088d2:	e792      	b.n	80087fa <_printf_float+0x1ea>
 80088d4:	2301      	movs	r3, #1
 80088d6:	4652      	mov	r2, sl
 80088d8:	4631      	mov	r1, r6
 80088da:	4628      	mov	r0, r5
 80088dc:	47b8      	blx	r7
 80088de:	3001      	adds	r0, #1
 80088e0:	f43f aef7 	beq.w	80086d2 <_printf_float+0xc2>
 80088e4:	f109 0901 	add.w	r9, r9, #1
 80088e8:	e7ee      	b.n	80088c8 <_printf_float+0x2b8>
 80088ea:	bf00      	nop
 80088ec:	7fefffff 	.word	0x7fefffff
 80088f0:	0800cf5c 	.word	0x0800cf5c
 80088f4:	0800cf60 	.word	0x0800cf60
 80088f8:	0800cf68 	.word	0x0800cf68
 80088fc:	0800cf64 	.word	0x0800cf64
 8008900:	0800cf6c 	.word	0x0800cf6c
 8008904:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008906:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008908:	429a      	cmp	r2, r3
 800890a:	bfa8      	it	ge
 800890c:	461a      	movge	r2, r3
 800890e:	2a00      	cmp	r2, #0
 8008910:	4691      	mov	r9, r2
 8008912:	dc37      	bgt.n	8008984 <_printf_float+0x374>
 8008914:	f04f 0b00 	mov.w	fp, #0
 8008918:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800891c:	f104 021a 	add.w	r2, r4, #26
 8008920:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008922:	9305      	str	r3, [sp, #20]
 8008924:	eba3 0309 	sub.w	r3, r3, r9
 8008928:	455b      	cmp	r3, fp
 800892a:	dc33      	bgt.n	8008994 <_printf_float+0x384>
 800892c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008930:	429a      	cmp	r2, r3
 8008932:	db3b      	blt.n	80089ac <_printf_float+0x39c>
 8008934:	6823      	ldr	r3, [r4, #0]
 8008936:	07da      	lsls	r2, r3, #31
 8008938:	d438      	bmi.n	80089ac <_printf_float+0x39c>
 800893a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800893c:	9a05      	ldr	r2, [sp, #20]
 800893e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008940:	1a9a      	subs	r2, r3, r2
 8008942:	eba3 0901 	sub.w	r9, r3, r1
 8008946:	4591      	cmp	r9, r2
 8008948:	bfa8      	it	ge
 800894a:	4691      	movge	r9, r2
 800894c:	f1b9 0f00 	cmp.w	r9, #0
 8008950:	dc35      	bgt.n	80089be <_printf_float+0x3ae>
 8008952:	f04f 0800 	mov.w	r8, #0
 8008956:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800895a:	f104 0a1a 	add.w	sl, r4, #26
 800895e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008962:	1a9b      	subs	r3, r3, r2
 8008964:	eba3 0309 	sub.w	r3, r3, r9
 8008968:	4543      	cmp	r3, r8
 800896a:	f77f af79 	ble.w	8008860 <_printf_float+0x250>
 800896e:	2301      	movs	r3, #1
 8008970:	4652      	mov	r2, sl
 8008972:	4631      	mov	r1, r6
 8008974:	4628      	mov	r0, r5
 8008976:	47b8      	blx	r7
 8008978:	3001      	adds	r0, #1
 800897a:	f43f aeaa 	beq.w	80086d2 <_printf_float+0xc2>
 800897e:	f108 0801 	add.w	r8, r8, #1
 8008982:	e7ec      	b.n	800895e <_printf_float+0x34e>
 8008984:	4613      	mov	r3, r2
 8008986:	4631      	mov	r1, r6
 8008988:	4642      	mov	r2, r8
 800898a:	4628      	mov	r0, r5
 800898c:	47b8      	blx	r7
 800898e:	3001      	adds	r0, #1
 8008990:	d1c0      	bne.n	8008914 <_printf_float+0x304>
 8008992:	e69e      	b.n	80086d2 <_printf_float+0xc2>
 8008994:	2301      	movs	r3, #1
 8008996:	4631      	mov	r1, r6
 8008998:	4628      	mov	r0, r5
 800899a:	9205      	str	r2, [sp, #20]
 800899c:	47b8      	blx	r7
 800899e:	3001      	adds	r0, #1
 80089a0:	f43f ae97 	beq.w	80086d2 <_printf_float+0xc2>
 80089a4:	9a05      	ldr	r2, [sp, #20]
 80089a6:	f10b 0b01 	add.w	fp, fp, #1
 80089aa:	e7b9      	b.n	8008920 <_printf_float+0x310>
 80089ac:	ee18 3a10 	vmov	r3, s16
 80089b0:	4652      	mov	r2, sl
 80089b2:	4631      	mov	r1, r6
 80089b4:	4628      	mov	r0, r5
 80089b6:	47b8      	blx	r7
 80089b8:	3001      	adds	r0, #1
 80089ba:	d1be      	bne.n	800893a <_printf_float+0x32a>
 80089bc:	e689      	b.n	80086d2 <_printf_float+0xc2>
 80089be:	9a05      	ldr	r2, [sp, #20]
 80089c0:	464b      	mov	r3, r9
 80089c2:	4442      	add	r2, r8
 80089c4:	4631      	mov	r1, r6
 80089c6:	4628      	mov	r0, r5
 80089c8:	47b8      	blx	r7
 80089ca:	3001      	adds	r0, #1
 80089cc:	d1c1      	bne.n	8008952 <_printf_float+0x342>
 80089ce:	e680      	b.n	80086d2 <_printf_float+0xc2>
 80089d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80089d2:	2a01      	cmp	r2, #1
 80089d4:	dc01      	bgt.n	80089da <_printf_float+0x3ca>
 80089d6:	07db      	lsls	r3, r3, #31
 80089d8:	d538      	bpl.n	8008a4c <_printf_float+0x43c>
 80089da:	2301      	movs	r3, #1
 80089dc:	4642      	mov	r2, r8
 80089de:	4631      	mov	r1, r6
 80089e0:	4628      	mov	r0, r5
 80089e2:	47b8      	blx	r7
 80089e4:	3001      	adds	r0, #1
 80089e6:	f43f ae74 	beq.w	80086d2 <_printf_float+0xc2>
 80089ea:	ee18 3a10 	vmov	r3, s16
 80089ee:	4652      	mov	r2, sl
 80089f0:	4631      	mov	r1, r6
 80089f2:	4628      	mov	r0, r5
 80089f4:	47b8      	blx	r7
 80089f6:	3001      	adds	r0, #1
 80089f8:	f43f ae6b 	beq.w	80086d2 <_printf_float+0xc2>
 80089fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008a00:	2200      	movs	r2, #0
 8008a02:	2300      	movs	r3, #0
 8008a04:	f7f8 f868 	bl	8000ad8 <__aeabi_dcmpeq>
 8008a08:	b9d8      	cbnz	r0, 8008a42 <_printf_float+0x432>
 8008a0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a0c:	f108 0201 	add.w	r2, r8, #1
 8008a10:	3b01      	subs	r3, #1
 8008a12:	4631      	mov	r1, r6
 8008a14:	4628      	mov	r0, r5
 8008a16:	47b8      	blx	r7
 8008a18:	3001      	adds	r0, #1
 8008a1a:	d10e      	bne.n	8008a3a <_printf_float+0x42a>
 8008a1c:	e659      	b.n	80086d2 <_printf_float+0xc2>
 8008a1e:	2301      	movs	r3, #1
 8008a20:	4652      	mov	r2, sl
 8008a22:	4631      	mov	r1, r6
 8008a24:	4628      	mov	r0, r5
 8008a26:	47b8      	blx	r7
 8008a28:	3001      	adds	r0, #1
 8008a2a:	f43f ae52 	beq.w	80086d2 <_printf_float+0xc2>
 8008a2e:	f108 0801 	add.w	r8, r8, #1
 8008a32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a34:	3b01      	subs	r3, #1
 8008a36:	4543      	cmp	r3, r8
 8008a38:	dcf1      	bgt.n	8008a1e <_printf_float+0x40e>
 8008a3a:	464b      	mov	r3, r9
 8008a3c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008a40:	e6dc      	b.n	80087fc <_printf_float+0x1ec>
 8008a42:	f04f 0800 	mov.w	r8, #0
 8008a46:	f104 0a1a 	add.w	sl, r4, #26
 8008a4a:	e7f2      	b.n	8008a32 <_printf_float+0x422>
 8008a4c:	2301      	movs	r3, #1
 8008a4e:	4642      	mov	r2, r8
 8008a50:	e7df      	b.n	8008a12 <_printf_float+0x402>
 8008a52:	2301      	movs	r3, #1
 8008a54:	464a      	mov	r2, r9
 8008a56:	4631      	mov	r1, r6
 8008a58:	4628      	mov	r0, r5
 8008a5a:	47b8      	blx	r7
 8008a5c:	3001      	adds	r0, #1
 8008a5e:	f43f ae38 	beq.w	80086d2 <_printf_float+0xc2>
 8008a62:	f108 0801 	add.w	r8, r8, #1
 8008a66:	68e3      	ldr	r3, [r4, #12]
 8008a68:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008a6a:	1a5b      	subs	r3, r3, r1
 8008a6c:	4543      	cmp	r3, r8
 8008a6e:	dcf0      	bgt.n	8008a52 <_printf_float+0x442>
 8008a70:	e6fa      	b.n	8008868 <_printf_float+0x258>
 8008a72:	f04f 0800 	mov.w	r8, #0
 8008a76:	f104 0919 	add.w	r9, r4, #25
 8008a7a:	e7f4      	b.n	8008a66 <_printf_float+0x456>

08008a7c <_printf_common>:
 8008a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a80:	4616      	mov	r6, r2
 8008a82:	4699      	mov	r9, r3
 8008a84:	688a      	ldr	r2, [r1, #8]
 8008a86:	690b      	ldr	r3, [r1, #16]
 8008a88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	bfb8      	it	lt
 8008a90:	4613      	movlt	r3, r2
 8008a92:	6033      	str	r3, [r6, #0]
 8008a94:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008a98:	4607      	mov	r7, r0
 8008a9a:	460c      	mov	r4, r1
 8008a9c:	b10a      	cbz	r2, 8008aa2 <_printf_common+0x26>
 8008a9e:	3301      	adds	r3, #1
 8008aa0:	6033      	str	r3, [r6, #0]
 8008aa2:	6823      	ldr	r3, [r4, #0]
 8008aa4:	0699      	lsls	r1, r3, #26
 8008aa6:	bf42      	ittt	mi
 8008aa8:	6833      	ldrmi	r3, [r6, #0]
 8008aaa:	3302      	addmi	r3, #2
 8008aac:	6033      	strmi	r3, [r6, #0]
 8008aae:	6825      	ldr	r5, [r4, #0]
 8008ab0:	f015 0506 	ands.w	r5, r5, #6
 8008ab4:	d106      	bne.n	8008ac4 <_printf_common+0x48>
 8008ab6:	f104 0a19 	add.w	sl, r4, #25
 8008aba:	68e3      	ldr	r3, [r4, #12]
 8008abc:	6832      	ldr	r2, [r6, #0]
 8008abe:	1a9b      	subs	r3, r3, r2
 8008ac0:	42ab      	cmp	r3, r5
 8008ac2:	dc26      	bgt.n	8008b12 <_printf_common+0x96>
 8008ac4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008ac8:	1e13      	subs	r3, r2, #0
 8008aca:	6822      	ldr	r2, [r4, #0]
 8008acc:	bf18      	it	ne
 8008ace:	2301      	movne	r3, #1
 8008ad0:	0692      	lsls	r2, r2, #26
 8008ad2:	d42b      	bmi.n	8008b2c <_printf_common+0xb0>
 8008ad4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008ad8:	4649      	mov	r1, r9
 8008ada:	4638      	mov	r0, r7
 8008adc:	47c0      	blx	r8
 8008ade:	3001      	adds	r0, #1
 8008ae0:	d01e      	beq.n	8008b20 <_printf_common+0xa4>
 8008ae2:	6823      	ldr	r3, [r4, #0]
 8008ae4:	68e5      	ldr	r5, [r4, #12]
 8008ae6:	6832      	ldr	r2, [r6, #0]
 8008ae8:	f003 0306 	and.w	r3, r3, #6
 8008aec:	2b04      	cmp	r3, #4
 8008aee:	bf08      	it	eq
 8008af0:	1aad      	subeq	r5, r5, r2
 8008af2:	68a3      	ldr	r3, [r4, #8]
 8008af4:	6922      	ldr	r2, [r4, #16]
 8008af6:	bf0c      	ite	eq
 8008af8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008afc:	2500      	movne	r5, #0
 8008afe:	4293      	cmp	r3, r2
 8008b00:	bfc4      	itt	gt
 8008b02:	1a9b      	subgt	r3, r3, r2
 8008b04:	18ed      	addgt	r5, r5, r3
 8008b06:	2600      	movs	r6, #0
 8008b08:	341a      	adds	r4, #26
 8008b0a:	42b5      	cmp	r5, r6
 8008b0c:	d11a      	bne.n	8008b44 <_printf_common+0xc8>
 8008b0e:	2000      	movs	r0, #0
 8008b10:	e008      	b.n	8008b24 <_printf_common+0xa8>
 8008b12:	2301      	movs	r3, #1
 8008b14:	4652      	mov	r2, sl
 8008b16:	4649      	mov	r1, r9
 8008b18:	4638      	mov	r0, r7
 8008b1a:	47c0      	blx	r8
 8008b1c:	3001      	adds	r0, #1
 8008b1e:	d103      	bne.n	8008b28 <_printf_common+0xac>
 8008b20:	f04f 30ff 	mov.w	r0, #4294967295
 8008b24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b28:	3501      	adds	r5, #1
 8008b2a:	e7c6      	b.n	8008aba <_printf_common+0x3e>
 8008b2c:	18e1      	adds	r1, r4, r3
 8008b2e:	1c5a      	adds	r2, r3, #1
 8008b30:	2030      	movs	r0, #48	; 0x30
 8008b32:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008b36:	4422      	add	r2, r4
 8008b38:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008b3c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008b40:	3302      	adds	r3, #2
 8008b42:	e7c7      	b.n	8008ad4 <_printf_common+0x58>
 8008b44:	2301      	movs	r3, #1
 8008b46:	4622      	mov	r2, r4
 8008b48:	4649      	mov	r1, r9
 8008b4a:	4638      	mov	r0, r7
 8008b4c:	47c0      	blx	r8
 8008b4e:	3001      	adds	r0, #1
 8008b50:	d0e6      	beq.n	8008b20 <_printf_common+0xa4>
 8008b52:	3601      	adds	r6, #1
 8008b54:	e7d9      	b.n	8008b0a <_printf_common+0x8e>
	...

08008b58 <_printf_i>:
 8008b58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008b5c:	7e0f      	ldrb	r7, [r1, #24]
 8008b5e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008b60:	2f78      	cmp	r7, #120	; 0x78
 8008b62:	4691      	mov	r9, r2
 8008b64:	4680      	mov	r8, r0
 8008b66:	460c      	mov	r4, r1
 8008b68:	469a      	mov	sl, r3
 8008b6a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008b6e:	d807      	bhi.n	8008b80 <_printf_i+0x28>
 8008b70:	2f62      	cmp	r7, #98	; 0x62
 8008b72:	d80a      	bhi.n	8008b8a <_printf_i+0x32>
 8008b74:	2f00      	cmp	r7, #0
 8008b76:	f000 80d8 	beq.w	8008d2a <_printf_i+0x1d2>
 8008b7a:	2f58      	cmp	r7, #88	; 0x58
 8008b7c:	f000 80a3 	beq.w	8008cc6 <_printf_i+0x16e>
 8008b80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008b84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008b88:	e03a      	b.n	8008c00 <_printf_i+0xa8>
 8008b8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008b8e:	2b15      	cmp	r3, #21
 8008b90:	d8f6      	bhi.n	8008b80 <_printf_i+0x28>
 8008b92:	a101      	add	r1, pc, #4	; (adr r1, 8008b98 <_printf_i+0x40>)
 8008b94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008b98:	08008bf1 	.word	0x08008bf1
 8008b9c:	08008c05 	.word	0x08008c05
 8008ba0:	08008b81 	.word	0x08008b81
 8008ba4:	08008b81 	.word	0x08008b81
 8008ba8:	08008b81 	.word	0x08008b81
 8008bac:	08008b81 	.word	0x08008b81
 8008bb0:	08008c05 	.word	0x08008c05
 8008bb4:	08008b81 	.word	0x08008b81
 8008bb8:	08008b81 	.word	0x08008b81
 8008bbc:	08008b81 	.word	0x08008b81
 8008bc0:	08008b81 	.word	0x08008b81
 8008bc4:	08008d11 	.word	0x08008d11
 8008bc8:	08008c35 	.word	0x08008c35
 8008bcc:	08008cf3 	.word	0x08008cf3
 8008bd0:	08008b81 	.word	0x08008b81
 8008bd4:	08008b81 	.word	0x08008b81
 8008bd8:	08008d33 	.word	0x08008d33
 8008bdc:	08008b81 	.word	0x08008b81
 8008be0:	08008c35 	.word	0x08008c35
 8008be4:	08008b81 	.word	0x08008b81
 8008be8:	08008b81 	.word	0x08008b81
 8008bec:	08008cfb 	.word	0x08008cfb
 8008bf0:	682b      	ldr	r3, [r5, #0]
 8008bf2:	1d1a      	adds	r2, r3, #4
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	602a      	str	r2, [r5, #0]
 8008bf8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008bfc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008c00:	2301      	movs	r3, #1
 8008c02:	e0a3      	b.n	8008d4c <_printf_i+0x1f4>
 8008c04:	6820      	ldr	r0, [r4, #0]
 8008c06:	6829      	ldr	r1, [r5, #0]
 8008c08:	0606      	lsls	r6, r0, #24
 8008c0a:	f101 0304 	add.w	r3, r1, #4
 8008c0e:	d50a      	bpl.n	8008c26 <_printf_i+0xce>
 8008c10:	680e      	ldr	r6, [r1, #0]
 8008c12:	602b      	str	r3, [r5, #0]
 8008c14:	2e00      	cmp	r6, #0
 8008c16:	da03      	bge.n	8008c20 <_printf_i+0xc8>
 8008c18:	232d      	movs	r3, #45	; 0x2d
 8008c1a:	4276      	negs	r6, r6
 8008c1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c20:	485e      	ldr	r0, [pc, #376]	; (8008d9c <_printf_i+0x244>)
 8008c22:	230a      	movs	r3, #10
 8008c24:	e019      	b.n	8008c5a <_printf_i+0x102>
 8008c26:	680e      	ldr	r6, [r1, #0]
 8008c28:	602b      	str	r3, [r5, #0]
 8008c2a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008c2e:	bf18      	it	ne
 8008c30:	b236      	sxthne	r6, r6
 8008c32:	e7ef      	b.n	8008c14 <_printf_i+0xbc>
 8008c34:	682b      	ldr	r3, [r5, #0]
 8008c36:	6820      	ldr	r0, [r4, #0]
 8008c38:	1d19      	adds	r1, r3, #4
 8008c3a:	6029      	str	r1, [r5, #0]
 8008c3c:	0601      	lsls	r1, r0, #24
 8008c3e:	d501      	bpl.n	8008c44 <_printf_i+0xec>
 8008c40:	681e      	ldr	r6, [r3, #0]
 8008c42:	e002      	b.n	8008c4a <_printf_i+0xf2>
 8008c44:	0646      	lsls	r6, r0, #25
 8008c46:	d5fb      	bpl.n	8008c40 <_printf_i+0xe8>
 8008c48:	881e      	ldrh	r6, [r3, #0]
 8008c4a:	4854      	ldr	r0, [pc, #336]	; (8008d9c <_printf_i+0x244>)
 8008c4c:	2f6f      	cmp	r7, #111	; 0x6f
 8008c4e:	bf0c      	ite	eq
 8008c50:	2308      	moveq	r3, #8
 8008c52:	230a      	movne	r3, #10
 8008c54:	2100      	movs	r1, #0
 8008c56:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008c5a:	6865      	ldr	r5, [r4, #4]
 8008c5c:	60a5      	str	r5, [r4, #8]
 8008c5e:	2d00      	cmp	r5, #0
 8008c60:	bfa2      	ittt	ge
 8008c62:	6821      	ldrge	r1, [r4, #0]
 8008c64:	f021 0104 	bicge.w	r1, r1, #4
 8008c68:	6021      	strge	r1, [r4, #0]
 8008c6a:	b90e      	cbnz	r6, 8008c70 <_printf_i+0x118>
 8008c6c:	2d00      	cmp	r5, #0
 8008c6e:	d04d      	beq.n	8008d0c <_printf_i+0x1b4>
 8008c70:	4615      	mov	r5, r2
 8008c72:	fbb6 f1f3 	udiv	r1, r6, r3
 8008c76:	fb03 6711 	mls	r7, r3, r1, r6
 8008c7a:	5dc7      	ldrb	r7, [r0, r7]
 8008c7c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008c80:	4637      	mov	r7, r6
 8008c82:	42bb      	cmp	r3, r7
 8008c84:	460e      	mov	r6, r1
 8008c86:	d9f4      	bls.n	8008c72 <_printf_i+0x11a>
 8008c88:	2b08      	cmp	r3, #8
 8008c8a:	d10b      	bne.n	8008ca4 <_printf_i+0x14c>
 8008c8c:	6823      	ldr	r3, [r4, #0]
 8008c8e:	07de      	lsls	r6, r3, #31
 8008c90:	d508      	bpl.n	8008ca4 <_printf_i+0x14c>
 8008c92:	6923      	ldr	r3, [r4, #16]
 8008c94:	6861      	ldr	r1, [r4, #4]
 8008c96:	4299      	cmp	r1, r3
 8008c98:	bfde      	ittt	le
 8008c9a:	2330      	movle	r3, #48	; 0x30
 8008c9c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008ca0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008ca4:	1b52      	subs	r2, r2, r5
 8008ca6:	6122      	str	r2, [r4, #16]
 8008ca8:	f8cd a000 	str.w	sl, [sp]
 8008cac:	464b      	mov	r3, r9
 8008cae:	aa03      	add	r2, sp, #12
 8008cb0:	4621      	mov	r1, r4
 8008cb2:	4640      	mov	r0, r8
 8008cb4:	f7ff fee2 	bl	8008a7c <_printf_common>
 8008cb8:	3001      	adds	r0, #1
 8008cba:	d14c      	bne.n	8008d56 <_printf_i+0x1fe>
 8008cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8008cc0:	b004      	add	sp, #16
 8008cc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cc6:	4835      	ldr	r0, [pc, #212]	; (8008d9c <_printf_i+0x244>)
 8008cc8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008ccc:	6829      	ldr	r1, [r5, #0]
 8008cce:	6823      	ldr	r3, [r4, #0]
 8008cd0:	f851 6b04 	ldr.w	r6, [r1], #4
 8008cd4:	6029      	str	r1, [r5, #0]
 8008cd6:	061d      	lsls	r5, r3, #24
 8008cd8:	d514      	bpl.n	8008d04 <_printf_i+0x1ac>
 8008cda:	07df      	lsls	r7, r3, #31
 8008cdc:	bf44      	itt	mi
 8008cde:	f043 0320 	orrmi.w	r3, r3, #32
 8008ce2:	6023      	strmi	r3, [r4, #0]
 8008ce4:	b91e      	cbnz	r6, 8008cee <_printf_i+0x196>
 8008ce6:	6823      	ldr	r3, [r4, #0]
 8008ce8:	f023 0320 	bic.w	r3, r3, #32
 8008cec:	6023      	str	r3, [r4, #0]
 8008cee:	2310      	movs	r3, #16
 8008cf0:	e7b0      	b.n	8008c54 <_printf_i+0xfc>
 8008cf2:	6823      	ldr	r3, [r4, #0]
 8008cf4:	f043 0320 	orr.w	r3, r3, #32
 8008cf8:	6023      	str	r3, [r4, #0]
 8008cfa:	2378      	movs	r3, #120	; 0x78
 8008cfc:	4828      	ldr	r0, [pc, #160]	; (8008da0 <_printf_i+0x248>)
 8008cfe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008d02:	e7e3      	b.n	8008ccc <_printf_i+0x174>
 8008d04:	0659      	lsls	r1, r3, #25
 8008d06:	bf48      	it	mi
 8008d08:	b2b6      	uxthmi	r6, r6
 8008d0a:	e7e6      	b.n	8008cda <_printf_i+0x182>
 8008d0c:	4615      	mov	r5, r2
 8008d0e:	e7bb      	b.n	8008c88 <_printf_i+0x130>
 8008d10:	682b      	ldr	r3, [r5, #0]
 8008d12:	6826      	ldr	r6, [r4, #0]
 8008d14:	6961      	ldr	r1, [r4, #20]
 8008d16:	1d18      	adds	r0, r3, #4
 8008d18:	6028      	str	r0, [r5, #0]
 8008d1a:	0635      	lsls	r5, r6, #24
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	d501      	bpl.n	8008d24 <_printf_i+0x1cc>
 8008d20:	6019      	str	r1, [r3, #0]
 8008d22:	e002      	b.n	8008d2a <_printf_i+0x1d2>
 8008d24:	0670      	lsls	r0, r6, #25
 8008d26:	d5fb      	bpl.n	8008d20 <_printf_i+0x1c8>
 8008d28:	8019      	strh	r1, [r3, #0]
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	6123      	str	r3, [r4, #16]
 8008d2e:	4615      	mov	r5, r2
 8008d30:	e7ba      	b.n	8008ca8 <_printf_i+0x150>
 8008d32:	682b      	ldr	r3, [r5, #0]
 8008d34:	1d1a      	adds	r2, r3, #4
 8008d36:	602a      	str	r2, [r5, #0]
 8008d38:	681d      	ldr	r5, [r3, #0]
 8008d3a:	6862      	ldr	r2, [r4, #4]
 8008d3c:	2100      	movs	r1, #0
 8008d3e:	4628      	mov	r0, r5
 8008d40:	f7f7 fa56 	bl	80001f0 <memchr>
 8008d44:	b108      	cbz	r0, 8008d4a <_printf_i+0x1f2>
 8008d46:	1b40      	subs	r0, r0, r5
 8008d48:	6060      	str	r0, [r4, #4]
 8008d4a:	6863      	ldr	r3, [r4, #4]
 8008d4c:	6123      	str	r3, [r4, #16]
 8008d4e:	2300      	movs	r3, #0
 8008d50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d54:	e7a8      	b.n	8008ca8 <_printf_i+0x150>
 8008d56:	6923      	ldr	r3, [r4, #16]
 8008d58:	462a      	mov	r2, r5
 8008d5a:	4649      	mov	r1, r9
 8008d5c:	4640      	mov	r0, r8
 8008d5e:	47d0      	blx	sl
 8008d60:	3001      	adds	r0, #1
 8008d62:	d0ab      	beq.n	8008cbc <_printf_i+0x164>
 8008d64:	6823      	ldr	r3, [r4, #0]
 8008d66:	079b      	lsls	r3, r3, #30
 8008d68:	d413      	bmi.n	8008d92 <_printf_i+0x23a>
 8008d6a:	68e0      	ldr	r0, [r4, #12]
 8008d6c:	9b03      	ldr	r3, [sp, #12]
 8008d6e:	4298      	cmp	r0, r3
 8008d70:	bfb8      	it	lt
 8008d72:	4618      	movlt	r0, r3
 8008d74:	e7a4      	b.n	8008cc0 <_printf_i+0x168>
 8008d76:	2301      	movs	r3, #1
 8008d78:	4632      	mov	r2, r6
 8008d7a:	4649      	mov	r1, r9
 8008d7c:	4640      	mov	r0, r8
 8008d7e:	47d0      	blx	sl
 8008d80:	3001      	adds	r0, #1
 8008d82:	d09b      	beq.n	8008cbc <_printf_i+0x164>
 8008d84:	3501      	adds	r5, #1
 8008d86:	68e3      	ldr	r3, [r4, #12]
 8008d88:	9903      	ldr	r1, [sp, #12]
 8008d8a:	1a5b      	subs	r3, r3, r1
 8008d8c:	42ab      	cmp	r3, r5
 8008d8e:	dcf2      	bgt.n	8008d76 <_printf_i+0x21e>
 8008d90:	e7eb      	b.n	8008d6a <_printf_i+0x212>
 8008d92:	2500      	movs	r5, #0
 8008d94:	f104 0619 	add.w	r6, r4, #25
 8008d98:	e7f5      	b.n	8008d86 <_printf_i+0x22e>
 8008d9a:	bf00      	nop
 8008d9c:	0800cf6e 	.word	0x0800cf6e
 8008da0:	0800cf7f 	.word	0x0800cf7f

08008da4 <siprintf>:
 8008da4:	b40e      	push	{r1, r2, r3}
 8008da6:	b500      	push	{lr}
 8008da8:	b09c      	sub	sp, #112	; 0x70
 8008daa:	ab1d      	add	r3, sp, #116	; 0x74
 8008dac:	9002      	str	r0, [sp, #8]
 8008dae:	9006      	str	r0, [sp, #24]
 8008db0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008db4:	4809      	ldr	r0, [pc, #36]	; (8008ddc <siprintf+0x38>)
 8008db6:	9107      	str	r1, [sp, #28]
 8008db8:	9104      	str	r1, [sp, #16]
 8008dba:	4909      	ldr	r1, [pc, #36]	; (8008de0 <siprintf+0x3c>)
 8008dbc:	f853 2b04 	ldr.w	r2, [r3], #4
 8008dc0:	9105      	str	r1, [sp, #20]
 8008dc2:	6800      	ldr	r0, [r0, #0]
 8008dc4:	9301      	str	r3, [sp, #4]
 8008dc6:	a902      	add	r1, sp, #8
 8008dc8:	f001 fb78 	bl	800a4bc <_svfiprintf_r>
 8008dcc:	9b02      	ldr	r3, [sp, #8]
 8008dce:	2200      	movs	r2, #0
 8008dd0:	701a      	strb	r2, [r3, #0]
 8008dd2:	b01c      	add	sp, #112	; 0x70
 8008dd4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008dd8:	b003      	add	sp, #12
 8008dda:	4770      	bx	lr
 8008ddc:	20000020 	.word	0x20000020
 8008de0:	ffff0208 	.word	0xffff0208

08008de4 <quorem>:
 8008de4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008de8:	6903      	ldr	r3, [r0, #16]
 8008dea:	690c      	ldr	r4, [r1, #16]
 8008dec:	42a3      	cmp	r3, r4
 8008dee:	4607      	mov	r7, r0
 8008df0:	f2c0 8081 	blt.w	8008ef6 <quorem+0x112>
 8008df4:	3c01      	subs	r4, #1
 8008df6:	f101 0814 	add.w	r8, r1, #20
 8008dfa:	f100 0514 	add.w	r5, r0, #20
 8008dfe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008e02:	9301      	str	r3, [sp, #4]
 8008e04:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008e08:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008e0c:	3301      	adds	r3, #1
 8008e0e:	429a      	cmp	r2, r3
 8008e10:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008e14:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008e18:	fbb2 f6f3 	udiv	r6, r2, r3
 8008e1c:	d331      	bcc.n	8008e82 <quorem+0x9e>
 8008e1e:	f04f 0e00 	mov.w	lr, #0
 8008e22:	4640      	mov	r0, r8
 8008e24:	46ac      	mov	ip, r5
 8008e26:	46f2      	mov	sl, lr
 8008e28:	f850 2b04 	ldr.w	r2, [r0], #4
 8008e2c:	b293      	uxth	r3, r2
 8008e2e:	fb06 e303 	mla	r3, r6, r3, lr
 8008e32:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008e36:	b29b      	uxth	r3, r3
 8008e38:	ebaa 0303 	sub.w	r3, sl, r3
 8008e3c:	f8dc a000 	ldr.w	sl, [ip]
 8008e40:	0c12      	lsrs	r2, r2, #16
 8008e42:	fa13 f38a 	uxtah	r3, r3, sl
 8008e46:	fb06 e202 	mla	r2, r6, r2, lr
 8008e4a:	9300      	str	r3, [sp, #0]
 8008e4c:	9b00      	ldr	r3, [sp, #0]
 8008e4e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008e52:	b292      	uxth	r2, r2
 8008e54:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008e58:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008e5c:	f8bd 3000 	ldrh.w	r3, [sp]
 8008e60:	4581      	cmp	r9, r0
 8008e62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008e66:	f84c 3b04 	str.w	r3, [ip], #4
 8008e6a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008e6e:	d2db      	bcs.n	8008e28 <quorem+0x44>
 8008e70:	f855 300b 	ldr.w	r3, [r5, fp]
 8008e74:	b92b      	cbnz	r3, 8008e82 <quorem+0x9e>
 8008e76:	9b01      	ldr	r3, [sp, #4]
 8008e78:	3b04      	subs	r3, #4
 8008e7a:	429d      	cmp	r5, r3
 8008e7c:	461a      	mov	r2, r3
 8008e7e:	d32e      	bcc.n	8008ede <quorem+0xfa>
 8008e80:	613c      	str	r4, [r7, #16]
 8008e82:	4638      	mov	r0, r7
 8008e84:	f001 f8c6 	bl	800a014 <__mcmp>
 8008e88:	2800      	cmp	r0, #0
 8008e8a:	db24      	blt.n	8008ed6 <quorem+0xf2>
 8008e8c:	3601      	adds	r6, #1
 8008e8e:	4628      	mov	r0, r5
 8008e90:	f04f 0c00 	mov.w	ip, #0
 8008e94:	f858 2b04 	ldr.w	r2, [r8], #4
 8008e98:	f8d0 e000 	ldr.w	lr, [r0]
 8008e9c:	b293      	uxth	r3, r2
 8008e9e:	ebac 0303 	sub.w	r3, ip, r3
 8008ea2:	0c12      	lsrs	r2, r2, #16
 8008ea4:	fa13 f38e 	uxtah	r3, r3, lr
 8008ea8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008eac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008eb0:	b29b      	uxth	r3, r3
 8008eb2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008eb6:	45c1      	cmp	r9, r8
 8008eb8:	f840 3b04 	str.w	r3, [r0], #4
 8008ebc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008ec0:	d2e8      	bcs.n	8008e94 <quorem+0xb0>
 8008ec2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008ec6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008eca:	b922      	cbnz	r2, 8008ed6 <quorem+0xf2>
 8008ecc:	3b04      	subs	r3, #4
 8008ece:	429d      	cmp	r5, r3
 8008ed0:	461a      	mov	r2, r3
 8008ed2:	d30a      	bcc.n	8008eea <quorem+0x106>
 8008ed4:	613c      	str	r4, [r7, #16]
 8008ed6:	4630      	mov	r0, r6
 8008ed8:	b003      	add	sp, #12
 8008eda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ede:	6812      	ldr	r2, [r2, #0]
 8008ee0:	3b04      	subs	r3, #4
 8008ee2:	2a00      	cmp	r2, #0
 8008ee4:	d1cc      	bne.n	8008e80 <quorem+0x9c>
 8008ee6:	3c01      	subs	r4, #1
 8008ee8:	e7c7      	b.n	8008e7a <quorem+0x96>
 8008eea:	6812      	ldr	r2, [r2, #0]
 8008eec:	3b04      	subs	r3, #4
 8008eee:	2a00      	cmp	r2, #0
 8008ef0:	d1f0      	bne.n	8008ed4 <quorem+0xf0>
 8008ef2:	3c01      	subs	r4, #1
 8008ef4:	e7eb      	b.n	8008ece <quorem+0xea>
 8008ef6:	2000      	movs	r0, #0
 8008ef8:	e7ee      	b.n	8008ed8 <quorem+0xf4>
 8008efa:	0000      	movs	r0, r0
 8008efc:	0000      	movs	r0, r0
	...

08008f00 <_dtoa_r>:
 8008f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f04:	ed2d 8b04 	vpush	{d8-d9}
 8008f08:	ec57 6b10 	vmov	r6, r7, d0
 8008f0c:	b093      	sub	sp, #76	; 0x4c
 8008f0e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008f10:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008f14:	9106      	str	r1, [sp, #24]
 8008f16:	ee10 aa10 	vmov	sl, s0
 8008f1a:	4604      	mov	r4, r0
 8008f1c:	9209      	str	r2, [sp, #36]	; 0x24
 8008f1e:	930c      	str	r3, [sp, #48]	; 0x30
 8008f20:	46bb      	mov	fp, r7
 8008f22:	b975      	cbnz	r5, 8008f42 <_dtoa_r+0x42>
 8008f24:	2010      	movs	r0, #16
 8008f26:	f000 fddd 	bl	8009ae4 <malloc>
 8008f2a:	4602      	mov	r2, r0
 8008f2c:	6260      	str	r0, [r4, #36]	; 0x24
 8008f2e:	b920      	cbnz	r0, 8008f3a <_dtoa_r+0x3a>
 8008f30:	4ba7      	ldr	r3, [pc, #668]	; (80091d0 <_dtoa_r+0x2d0>)
 8008f32:	21ea      	movs	r1, #234	; 0xea
 8008f34:	48a7      	ldr	r0, [pc, #668]	; (80091d4 <_dtoa_r+0x2d4>)
 8008f36:	f001 fbd1 	bl	800a6dc <__assert_func>
 8008f3a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008f3e:	6005      	str	r5, [r0, #0]
 8008f40:	60c5      	str	r5, [r0, #12]
 8008f42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f44:	6819      	ldr	r1, [r3, #0]
 8008f46:	b151      	cbz	r1, 8008f5e <_dtoa_r+0x5e>
 8008f48:	685a      	ldr	r2, [r3, #4]
 8008f4a:	604a      	str	r2, [r1, #4]
 8008f4c:	2301      	movs	r3, #1
 8008f4e:	4093      	lsls	r3, r2
 8008f50:	608b      	str	r3, [r1, #8]
 8008f52:	4620      	mov	r0, r4
 8008f54:	f000 fe1c 	bl	8009b90 <_Bfree>
 8008f58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	601a      	str	r2, [r3, #0]
 8008f5e:	1e3b      	subs	r3, r7, #0
 8008f60:	bfaa      	itet	ge
 8008f62:	2300      	movge	r3, #0
 8008f64:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008f68:	f8c8 3000 	strge.w	r3, [r8]
 8008f6c:	4b9a      	ldr	r3, [pc, #616]	; (80091d8 <_dtoa_r+0x2d8>)
 8008f6e:	bfbc      	itt	lt
 8008f70:	2201      	movlt	r2, #1
 8008f72:	f8c8 2000 	strlt.w	r2, [r8]
 8008f76:	ea33 030b 	bics.w	r3, r3, fp
 8008f7a:	d11b      	bne.n	8008fb4 <_dtoa_r+0xb4>
 8008f7c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008f7e:	f242 730f 	movw	r3, #9999	; 0x270f
 8008f82:	6013      	str	r3, [r2, #0]
 8008f84:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008f88:	4333      	orrs	r3, r6
 8008f8a:	f000 8592 	beq.w	8009ab2 <_dtoa_r+0xbb2>
 8008f8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008f90:	b963      	cbnz	r3, 8008fac <_dtoa_r+0xac>
 8008f92:	4b92      	ldr	r3, [pc, #584]	; (80091dc <_dtoa_r+0x2dc>)
 8008f94:	e022      	b.n	8008fdc <_dtoa_r+0xdc>
 8008f96:	4b92      	ldr	r3, [pc, #584]	; (80091e0 <_dtoa_r+0x2e0>)
 8008f98:	9301      	str	r3, [sp, #4]
 8008f9a:	3308      	adds	r3, #8
 8008f9c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008f9e:	6013      	str	r3, [r2, #0]
 8008fa0:	9801      	ldr	r0, [sp, #4]
 8008fa2:	b013      	add	sp, #76	; 0x4c
 8008fa4:	ecbd 8b04 	vpop	{d8-d9}
 8008fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fac:	4b8b      	ldr	r3, [pc, #556]	; (80091dc <_dtoa_r+0x2dc>)
 8008fae:	9301      	str	r3, [sp, #4]
 8008fb0:	3303      	adds	r3, #3
 8008fb2:	e7f3      	b.n	8008f9c <_dtoa_r+0x9c>
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	4650      	mov	r0, sl
 8008fba:	4659      	mov	r1, fp
 8008fbc:	f7f7 fd8c 	bl	8000ad8 <__aeabi_dcmpeq>
 8008fc0:	ec4b ab19 	vmov	d9, sl, fp
 8008fc4:	4680      	mov	r8, r0
 8008fc6:	b158      	cbz	r0, 8008fe0 <_dtoa_r+0xe0>
 8008fc8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008fca:	2301      	movs	r3, #1
 8008fcc:	6013      	str	r3, [r2, #0]
 8008fce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	f000 856b 	beq.w	8009aac <_dtoa_r+0xbac>
 8008fd6:	4883      	ldr	r0, [pc, #524]	; (80091e4 <_dtoa_r+0x2e4>)
 8008fd8:	6018      	str	r0, [r3, #0]
 8008fda:	1e43      	subs	r3, r0, #1
 8008fdc:	9301      	str	r3, [sp, #4]
 8008fde:	e7df      	b.n	8008fa0 <_dtoa_r+0xa0>
 8008fe0:	ec4b ab10 	vmov	d0, sl, fp
 8008fe4:	aa10      	add	r2, sp, #64	; 0x40
 8008fe6:	a911      	add	r1, sp, #68	; 0x44
 8008fe8:	4620      	mov	r0, r4
 8008fea:	f001 f8b9 	bl	800a160 <__d2b>
 8008fee:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008ff2:	ee08 0a10 	vmov	s16, r0
 8008ff6:	2d00      	cmp	r5, #0
 8008ff8:	f000 8084 	beq.w	8009104 <_dtoa_r+0x204>
 8008ffc:	ee19 3a90 	vmov	r3, s19
 8009000:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009004:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009008:	4656      	mov	r6, sl
 800900a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800900e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009012:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8009016:	4b74      	ldr	r3, [pc, #464]	; (80091e8 <_dtoa_r+0x2e8>)
 8009018:	2200      	movs	r2, #0
 800901a:	4630      	mov	r0, r6
 800901c:	4639      	mov	r1, r7
 800901e:	f7f7 f93b 	bl	8000298 <__aeabi_dsub>
 8009022:	a365      	add	r3, pc, #404	; (adr r3, 80091b8 <_dtoa_r+0x2b8>)
 8009024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009028:	f7f7 faee 	bl	8000608 <__aeabi_dmul>
 800902c:	a364      	add	r3, pc, #400	; (adr r3, 80091c0 <_dtoa_r+0x2c0>)
 800902e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009032:	f7f7 f933 	bl	800029c <__adddf3>
 8009036:	4606      	mov	r6, r0
 8009038:	4628      	mov	r0, r5
 800903a:	460f      	mov	r7, r1
 800903c:	f7f7 fa7a 	bl	8000534 <__aeabi_i2d>
 8009040:	a361      	add	r3, pc, #388	; (adr r3, 80091c8 <_dtoa_r+0x2c8>)
 8009042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009046:	f7f7 fadf 	bl	8000608 <__aeabi_dmul>
 800904a:	4602      	mov	r2, r0
 800904c:	460b      	mov	r3, r1
 800904e:	4630      	mov	r0, r6
 8009050:	4639      	mov	r1, r7
 8009052:	f7f7 f923 	bl	800029c <__adddf3>
 8009056:	4606      	mov	r6, r0
 8009058:	460f      	mov	r7, r1
 800905a:	f7f7 fd85 	bl	8000b68 <__aeabi_d2iz>
 800905e:	2200      	movs	r2, #0
 8009060:	9000      	str	r0, [sp, #0]
 8009062:	2300      	movs	r3, #0
 8009064:	4630      	mov	r0, r6
 8009066:	4639      	mov	r1, r7
 8009068:	f7f7 fd40 	bl	8000aec <__aeabi_dcmplt>
 800906c:	b150      	cbz	r0, 8009084 <_dtoa_r+0x184>
 800906e:	9800      	ldr	r0, [sp, #0]
 8009070:	f7f7 fa60 	bl	8000534 <__aeabi_i2d>
 8009074:	4632      	mov	r2, r6
 8009076:	463b      	mov	r3, r7
 8009078:	f7f7 fd2e 	bl	8000ad8 <__aeabi_dcmpeq>
 800907c:	b910      	cbnz	r0, 8009084 <_dtoa_r+0x184>
 800907e:	9b00      	ldr	r3, [sp, #0]
 8009080:	3b01      	subs	r3, #1
 8009082:	9300      	str	r3, [sp, #0]
 8009084:	9b00      	ldr	r3, [sp, #0]
 8009086:	2b16      	cmp	r3, #22
 8009088:	d85a      	bhi.n	8009140 <_dtoa_r+0x240>
 800908a:	9a00      	ldr	r2, [sp, #0]
 800908c:	4b57      	ldr	r3, [pc, #348]	; (80091ec <_dtoa_r+0x2ec>)
 800908e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009096:	ec51 0b19 	vmov	r0, r1, d9
 800909a:	f7f7 fd27 	bl	8000aec <__aeabi_dcmplt>
 800909e:	2800      	cmp	r0, #0
 80090a0:	d050      	beq.n	8009144 <_dtoa_r+0x244>
 80090a2:	9b00      	ldr	r3, [sp, #0]
 80090a4:	3b01      	subs	r3, #1
 80090a6:	9300      	str	r3, [sp, #0]
 80090a8:	2300      	movs	r3, #0
 80090aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80090ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80090ae:	1b5d      	subs	r5, r3, r5
 80090b0:	1e6b      	subs	r3, r5, #1
 80090b2:	9305      	str	r3, [sp, #20]
 80090b4:	bf45      	ittet	mi
 80090b6:	f1c5 0301 	rsbmi	r3, r5, #1
 80090ba:	9304      	strmi	r3, [sp, #16]
 80090bc:	2300      	movpl	r3, #0
 80090be:	2300      	movmi	r3, #0
 80090c0:	bf4c      	ite	mi
 80090c2:	9305      	strmi	r3, [sp, #20]
 80090c4:	9304      	strpl	r3, [sp, #16]
 80090c6:	9b00      	ldr	r3, [sp, #0]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	db3d      	blt.n	8009148 <_dtoa_r+0x248>
 80090cc:	9b05      	ldr	r3, [sp, #20]
 80090ce:	9a00      	ldr	r2, [sp, #0]
 80090d0:	920a      	str	r2, [sp, #40]	; 0x28
 80090d2:	4413      	add	r3, r2
 80090d4:	9305      	str	r3, [sp, #20]
 80090d6:	2300      	movs	r3, #0
 80090d8:	9307      	str	r3, [sp, #28]
 80090da:	9b06      	ldr	r3, [sp, #24]
 80090dc:	2b09      	cmp	r3, #9
 80090de:	f200 8089 	bhi.w	80091f4 <_dtoa_r+0x2f4>
 80090e2:	2b05      	cmp	r3, #5
 80090e4:	bfc4      	itt	gt
 80090e6:	3b04      	subgt	r3, #4
 80090e8:	9306      	strgt	r3, [sp, #24]
 80090ea:	9b06      	ldr	r3, [sp, #24]
 80090ec:	f1a3 0302 	sub.w	r3, r3, #2
 80090f0:	bfcc      	ite	gt
 80090f2:	2500      	movgt	r5, #0
 80090f4:	2501      	movle	r5, #1
 80090f6:	2b03      	cmp	r3, #3
 80090f8:	f200 8087 	bhi.w	800920a <_dtoa_r+0x30a>
 80090fc:	e8df f003 	tbb	[pc, r3]
 8009100:	59383a2d 	.word	0x59383a2d
 8009104:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009108:	441d      	add	r5, r3
 800910a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800910e:	2b20      	cmp	r3, #32
 8009110:	bfc1      	itttt	gt
 8009112:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009116:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800911a:	fa0b f303 	lslgt.w	r3, fp, r3
 800911e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009122:	bfda      	itte	le
 8009124:	f1c3 0320 	rsble	r3, r3, #32
 8009128:	fa06 f003 	lslle.w	r0, r6, r3
 800912c:	4318      	orrgt	r0, r3
 800912e:	f7f7 f9f1 	bl	8000514 <__aeabi_ui2d>
 8009132:	2301      	movs	r3, #1
 8009134:	4606      	mov	r6, r0
 8009136:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800913a:	3d01      	subs	r5, #1
 800913c:	930e      	str	r3, [sp, #56]	; 0x38
 800913e:	e76a      	b.n	8009016 <_dtoa_r+0x116>
 8009140:	2301      	movs	r3, #1
 8009142:	e7b2      	b.n	80090aa <_dtoa_r+0x1aa>
 8009144:	900b      	str	r0, [sp, #44]	; 0x2c
 8009146:	e7b1      	b.n	80090ac <_dtoa_r+0x1ac>
 8009148:	9b04      	ldr	r3, [sp, #16]
 800914a:	9a00      	ldr	r2, [sp, #0]
 800914c:	1a9b      	subs	r3, r3, r2
 800914e:	9304      	str	r3, [sp, #16]
 8009150:	4253      	negs	r3, r2
 8009152:	9307      	str	r3, [sp, #28]
 8009154:	2300      	movs	r3, #0
 8009156:	930a      	str	r3, [sp, #40]	; 0x28
 8009158:	e7bf      	b.n	80090da <_dtoa_r+0x1da>
 800915a:	2300      	movs	r3, #0
 800915c:	9308      	str	r3, [sp, #32]
 800915e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009160:	2b00      	cmp	r3, #0
 8009162:	dc55      	bgt.n	8009210 <_dtoa_r+0x310>
 8009164:	2301      	movs	r3, #1
 8009166:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800916a:	461a      	mov	r2, r3
 800916c:	9209      	str	r2, [sp, #36]	; 0x24
 800916e:	e00c      	b.n	800918a <_dtoa_r+0x28a>
 8009170:	2301      	movs	r3, #1
 8009172:	e7f3      	b.n	800915c <_dtoa_r+0x25c>
 8009174:	2300      	movs	r3, #0
 8009176:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009178:	9308      	str	r3, [sp, #32]
 800917a:	9b00      	ldr	r3, [sp, #0]
 800917c:	4413      	add	r3, r2
 800917e:	9302      	str	r3, [sp, #8]
 8009180:	3301      	adds	r3, #1
 8009182:	2b01      	cmp	r3, #1
 8009184:	9303      	str	r3, [sp, #12]
 8009186:	bfb8      	it	lt
 8009188:	2301      	movlt	r3, #1
 800918a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800918c:	2200      	movs	r2, #0
 800918e:	6042      	str	r2, [r0, #4]
 8009190:	2204      	movs	r2, #4
 8009192:	f102 0614 	add.w	r6, r2, #20
 8009196:	429e      	cmp	r6, r3
 8009198:	6841      	ldr	r1, [r0, #4]
 800919a:	d93d      	bls.n	8009218 <_dtoa_r+0x318>
 800919c:	4620      	mov	r0, r4
 800919e:	f000 fcb7 	bl	8009b10 <_Balloc>
 80091a2:	9001      	str	r0, [sp, #4]
 80091a4:	2800      	cmp	r0, #0
 80091a6:	d13b      	bne.n	8009220 <_dtoa_r+0x320>
 80091a8:	4b11      	ldr	r3, [pc, #68]	; (80091f0 <_dtoa_r+0x2f0>)
 80091aa:	4602      	mov	r2, r0
 80091ac:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80091b0:	e6c0      	b.n	8008f34 <_dtoa_r+0x34>
 80091b2:	2301      	movs	r3, #1
 80091b4:	e7df      	b.n	8009176 <_dtoa_r+0x276>
 80091b6:	bf00      	nop
 80091b8:	636f4361 	.word	0x636f4361
 80091bc:	3fd287a7 	.word	0x3fd287a7
 80091c0:	8b60c8b3 	.word	0x8b60c8b3
 80091c4:	3fc68a28 	.word	0x3fc68a28
 80091c8:	509f79fb 	.word	0x509f79fb
 80091cc:	3fd34413 	.word	0x3fd34413
 80091d0:	0800cf9d 	.word	0x0800cf9d
 80091d4:	0800cfb4 	.word	0x0800cfb4
 80091d8:	7ff00000 	.word	0x7ff00000
 80091dc:	0800cf99 	.word	0x0800cf99
 80091e0:	0800cf90 	.word	0x0800cf90
 80091e4:	0800cf6d 	.word	0x0800cf6d
 80091e8:	3ff80000 	.word	0x3ff80000
 80091ec:	0800d0a8 	.word	0x0800d0a8
 80091f0:	0800d00f 	.word	0x0800d00f
 80091f4:	2501      	movs	r5, #1
 80091f6:	2300      	movs	r3, #0
 80091f8:	9306      	str	r3, [sp, #24]
 80091fa:	9508      	str	r5, [sp, #32]
 80091fc:	f04f 33ff 	mov.w	r3, #4294967295
 8009200:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009204:	2200      	movs	r2, #0
 8009206:	2312      	movs	r3, #18
 8009208:	e7b0      	b.n	800916c <_dtoa_r+0x26c>
 800920a:	2301      	movs	r3, #1
 800920c:	9308      	str	r3, [sp, #32]
 800920e:	e7f5      	b.n	80091fc <_dtoa_r+0x2fc>
 8009210:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009212:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009216:	e7b8      	b.n	800918a <_dtoa_r+0x28a>
 8009218:	3101      	adds	r1, #1
 800921a:	6041      	str	r1, [r0, #4]
 800921c:	0052      	lsls	r2, r2, #1
 800921e:	e7b8      	b.n	8009192 <_dtoa_r+0x292>
 8009220:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009222:	9a01      	ldr	r2, [sp, #4]
 8009224:	601a      	str	r2, [r3, #0]
 8009226:	9b03      	ldr	r3, [sp, #12]
 8009228:	2b0e      	cmp	r3, #14
 800922a:	f200 809d 	bhi.w	8009368 <_dtoa_r+0x468>
 800922e:	2d00      	cmp	r5, #0
 8009230:	f000 809a 	beq.w	8009368 <_dtoa_r+0x468>
 8009234:	9b00      	ldr	r3, [sp, #0]
 8009236:	2b00      	cmp	r3, #0
 8009238:	dd32      	ble.n	80092a0 <_dtoa_r+0x3a0>
 800923a:	4ab7      	ldr	r2, [pc, #732]	; (8009518 <_dtoa_r+0x618>)
 800923c:	f003 030f 	and.w	r3, r3, #15
 8009240:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009244:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009248:	9b00      	ldr	r3, [sp, #0]
 800924a:	05d8      	lsls	r0, r3, #23
 800924c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009250:	d516      	bpl.n	8009280 <_dtoa_r+0x380>
 8009252:	4bb2      	ldr	r3, [pc, #712]	; (800951c <_dtoa_r+0x61c>)
 8009254:	ec51 0b19 	vmov	r0, r1, d9
 8009258:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800925c:	f7f7 fafe 	bl	800085c <__aeabi_ddiv>
 8009260:	f007 070f 	and.w	r7, r7, #15
 8009264:	4682      	mov	sl, r0
 8009266:	468b      	mov	fp, r1
 8009268:	2503      	movs	r5, #3
 800926a:	4eac      	ldr	r6, [pc, #688]	; (800951c <_dtoa_r+0x61c>)
 800926c:	b957      	cbnz	r7, 8009284 <_dtoa_r+0x384>
 800926e:	4642      	mov	r2, r8
 8009270:	464b      	mov	r3, r9
 8009272:	4650      	mov	r0, sl
 8009274:	4659      	mov	r1, fp
 8009276:	f7f7 faf1 	bl	800085c <__aeabi_ddiv>
 800927a:	4682      	mov	sl, r0
 800927c:	468b      	mov	fp, r1
 800927e:	e028      	b.n	80092d2 <_dtoa_r+0x3d2>
 8009280:	2502      	movs	r5, #2
 8009282:	e7f2      	b.n	800926a <_dtoa_r+0x36a>
 8009284:	07f9      	lsls	r1, r7, #31
 8009286:	d508      	bpl.n	800929a <_dtoa_r+0x39a>
 8009288:	4640      	mov	r0, r8
 800928a:	4649      	mov	r1, r9
 800928c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009290:	f7f7 f9ba 	bl	8000608 <__aeabi_dmul>
 8009294:	3501      	adds	r5, #1
 8009296:	4680      	mov	r8, r0
 8009298:	4689      	mov	r9, r1
 800929a:	107f      	asrs	r7, r7, #1
 800929c:	3608      	adds	r6, #8
 800929e:	e7e5      	b.n	800926c <_dtoa_r+0x36c>
 80092a0:	f000 809b 	beq.w	80093da <_dtoa_r+0x4da>
 80092a4:	9b00      	ldr	r3, [sp, #0]
 80092a6:	4f9d      	ldr	r7, [pc, #628]	; (800951c <_dtoa_r+0x61c>)
 80092a8:	425e      	negs	r6, r3
 80092aa:	4b9b      	ldr	r3, [pc, #620]	; (8009518 <_dtoa_r+0x618>)
 80092ac:	f006 020f 	and.w	r2, r6, #15
 80092b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80092b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092b8:	ec51 0b19 	vmov	r0, r1, d9
 80092bc:	f7f7 f9a4 	bl	8000608 <__aeabi_dmul>
 80092c0:	1136      	asrs	r6, r6, #4
 80092c2:	4682      	mov	sl, r0
 80092c4:	468b      	mov	fp, r1
 80092c6:	2300      	movs	r3, #0
 80092c8:	2502      	movs	r5, #2
 80092ca:	2e00      	cmp	r6, #0
 80092cc:	d17a      	bne.n	80093c4 <_dtoa_r+0x4c4>
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d1d3      	bne.n	800927a <_dtoa_r+0x37a>
 80092d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	f000 8082 	beq.w	80093de <_dtoa_r+0x4de>
 80092da:	4b91      	ldr	r3, [pc, #580]	; (8009520 <_dtoa_r+0x620>)
 80092dc:	2200      	movs	r2, #0
 80092de:	4650      	mov	r0, sl
 80092e0:	4659      	mov	r1, fp
 80092e2:	f7f7 fc03 	bl	8000aec <__aeabi_dcmplt>
 80092e6:	2800      	cmp	r0, #0
 80092e8:	d079      	beq.n	80093de <_dtoa_r+0x4de>
 80092ea:	9b03      	ldr	r3, [sp, #12]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d076      	beq.n	80093de <_dtoa_r+0x4de>
 80092f0:	9b02      	ldr	r3, [sp, #8]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	dd36      	ble.n	8009364 <_dtoa_r+0x464>
 80092f6:	9b00      	ldr	r3, [sp, #0]
 80092f8:	4650      	mov	r0, sl
 80092fa:	4659      	mov	r1, fp
 80092fc:	1e5f      	subs	r7, r3, #1
 80092fe:	2200      	movs	r2, #0
 8009300:	4b88      	ldr	r3, [pc, #544]	; (8009524 <_dtoa_r+0x624>)
 8009302:	f7f7 f981 	bl	8000608 <__aeabi_dmul>
 8009306:	9e02      	ldr	r6, [sp, #8]
 8009308:	4682      	mov	sl, r0
 800930a:	468b      	mov	fp, r1
 800930c:	3501      	adds	r5, #1
 800930e:	4628      	mov	r0, r5
 8009310:	f7f7 f910 	bl	8000534 <__aeabi_i2d>
 8009314:	4652      	mov	r2, sl
 8009316:	465b      	mov	r3, fp
 8009318:	f7f7 f976 	bl	8000608 <__aeabi_dmul>
 800931c:	4b82      	ldr	r3, [pc, #520]	; (8009528 <_dtoa_r+0x628>)
 800931e:	2200      	movs	r2, #0
 8009320:	f7f6 ffbc 	bl	800029c <__adddf3>
 8009324:	46d0      	mov	r8, sl
 8009326:	46d9      	mov	r9, fp
 8009328:	4682      	mov	sl, r0
 800932a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800932e:	2e00      	cmp	r6, #0
 8009330:	d158      	bne.n	80093e4 <_dtoa_r+0x4e4>
 8009332:	4b7e      	ldr	r3, [pc, #504]	; (800952c <_dtoa_r+0x62c>)
 8009334:	2200      	movs	r2, #0
 8009336:	4640      	mov	r0, r8
 8009338:	4649      	mov	r1, r9
 800933a:	f7f6 ffad 	bl	8000298 <__aeabi_dsub>
 800933e:	4652      	mov	r2, sl
 8009340:	465b      	mov	r3, fp
 8009342:	4680      	mov	r8, r0
 8009344:	4689      	mov	r9, r1
 8009346:	f7f7 fbef 	bl	8000b28 <__aeabi_dcmpgt>
 800934a:	2800      	cmp	r0, #0
 800934c:	f040 8295 	bne.w	800987a <_dtoa_r+0x97a>
 8009350:	4652      	mov	r2, sl
 8009352:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009356:	4640      	mov	r0, r8
 8009358:	4649      	mov	r1, r9
 800935a:	f7f7 fbc7 	bl	8000aec <__aeabi_dcmplt>
 800935e:	2800      	cmp	r0, #0
 8009360:	f040 8289 	bne.w	8009876 <_dtoa_r+0x976>
 8009364:	ec5b ab19 	vmov	sl, fp, d9
 8009368:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800936a:	2b00      	cmp	r3, #0
 800936c:	f2c0 8148 	blt.w	8009600 <_dtoa_r+0x700>
 8009370:	9a00      	ldr	r2, [sp, #0]
 8009372:	2a0e      	cmp	r2, #14
 8009374:	f300 8144 	bgt.w	8009600 <_dtoa_r+0x700>
 8009378:	4b67      	ldr	r3, [pc, #412]	; (8009518 <_dtoa_r+0x618>)
 800937a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800937e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009382:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009384:	2b00      	cmp	r3, #0
 8009386:	f280 80d5 	bge.w	8009534 <_dtoa_r+0x634>
 800938a:	9b03      	ldr	r3, [sp, #12]
 800938c:	2b00      	cmp	r3, #0
 800938e:	f300 80d1 	bgt.w	8009534 <_dtoa_r+0x634>
 8009392:	f040 826f 	bne.w	8009874 <_dtoa_r+0x974>
 8009396:	4b65      	ldr	r3, [pc, #404]	; (800952c <_dtoa_r+0x62c>)
 8009398:	2200      	movs	r2, #0
 800939a:	4640      	mov	r0, r8
 800939c:	4649      	mov	r1, r9
 800939e:	f7f7 f933 	bl	8000608 <__aeabi_dmul>
 80093a2:	4652      	mov	r2, sl
 80093a4:	465b      	mov	r3, fp
 80093a6:	f7f7 fbb5 	bl	8000b14 <__aeabi_dcmpge>
 80093aa:	9e03      	ldr	r6, [sp, #12]
 80093ac:	4637      	mov	r7, r6
 80093ae:	2800      	cmp	r0, #0
 80093b0:	f040 8245 	bne.w	800983e <_dtoa_r+0x93e>
 80093b4:	9d01      	ldr	r5, [sp, #4]
 80093b6:	2331      	movs	r3, #49	; 0x31
 80093b8:	f805 3b01 	strb.w	r3, [r5], #1
 80093bc:	9b00      	ldr	r3, [sp, #0]
 80093be:	3301      	adds	r3, #1
 80093c0:	9300      	str	r3, [sp, #0]
 80093c2:	e240      	b.n	8009846 <_dtoa_r+0x946>
 80093c4:	07f2      	lsls	r2, r6, #31
 80093c6:	d505      	bpl.n	80093d4 <_dtoa_r+0x4d4>
 80093c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80093cc:	f7f7 f91c 	bl	8000608 <__aeabi_dmul>
 80093d0:	3501      	adds	r5, #1
 80093d2:	2301      	movs	r3, #1
 80093d4:	1076      	asrs	r6, r6, #1
 80093d6:	3708      	adds	r7, #8
 80093d8:	e777      	b.n	80092ca <_dtoa_r+0x3ca>
 80093da:	2502      	movs	r5, #2
 80093dc:	e779      	b.n	80092d2 <_dtoa_r+0x3d2>
 80093de:	9f00      	ldr	r7, [sp, #0]
 80093e0:	9e03      	ldr	r6, [sp, #12]
 80093e2:	e794      	b.n	800930e <_dtoa_r+0x40e>
 80093e4:	9901      	ldr	r1, [sp, #4]
 80093e6:	4b4c      	ldr	r3, [pc, #304]	; (8009518 <_dtoa_r+0x618>)
 80093e8:	4431      	add	r1, r6
 80093ea:	910d      	str	r1, [sp, #52]	; 0x34
 80093ec:	9908      	ldr	r1, [sp, #32]
 80093ee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80093f2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80093f6:	2900      	cmp	r1, #0
 80093f8:	d043      	beq.n	8009482 <_dtoa_r+0x582>
 80093fa:	494d      	ldr	r1, [pc, #308]	; (8009530 <_dtoa_r+0x630>)
 80093fc:	2000      	movs	r0, #0
 80093fe:	f7f7 fa2d 	bl	800085c <__aeabi_ddiv>
 8009402:	4652      	mov	r2, sl
 8009404:	465b      	mov	r3, fp
 8009406:	f7f6 ff47 	bl	8000298 <__aeabi_dsub>
 800940a:	9d01      	ldr	r5, [sp, #4]
 800940c:	4682      	mov	sl, r0
 800940e:	468b      	mov	fp, r1
 8009410:	4649      	mov	r1, r9
 8009412:	4640      	mov	r0, r8
 8009414:	f7f7 fba8 	bl	8000b68 <__aeabi_d2iz>
 8009418:	4606      	mov	r6, r0
 800941a:	f7f7 f88b 	bl	8000534 <__aeabi_i2d>
 800941e:	4602      	mov	r2, r0
 8009420:	460b      	mov	r3, r1
 8009422:	4640      	mov	r0, r8
 8009424:	4649      	mov	r1, r9
 8009426:	f7f6 ff37 	bl	8000298 <__aeabi_dsub>
 800942a:	3630      	adds	r6, #48	; 0x30
 800942c:	f805 6b01 	strb.w	r6, [r5], #1
 8009430:	4652      	mov	r2, sl
 8009432:	465b      	mov	r3, fp
 8009434:	4680      	mov	r8, r0
 8009436:	4689      	mov	r9, r1
 8009438:	f7f7 fb58 	bl	8000aec <__aeabi_dcmplt>
 800943c:	2800      	cmp	r0, #0
 800943e:	d163      	bne.n	8009508 <_dtoa_r+0x608>
 8009440:	4642      	mov	r2, r8
 8009442:	464b      	mov	r3, r9
 8009444:	4936      	ldr	r1, [pc, #216]	; (8009520 <_dtoa_r+0x620>)
 8009446:	2000      	movs	r0, #0
 8009448:	f7f6 ff26 	bl	8000298 <__aeabi_dsub>
 800944c:	4652      	mov	r2, sl
 800944e:	465b      	mov	r3, fp
 8009450:	f7f7 fb4c 	bl	8000aec <__aeabi_dcmplt>
 8009454:	2800      	cmp	r0, #0
 8009456:	f040 80b5 	bne.w	80095c4 <_dtoa_r+0x6c4>
 800945a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800945c:	429d      	cmp	r5, r3
 800945e:	d081      	beq.n	8009364 <_dtoa_r+0x464>
 8009460:	4b30      	ldr	r3, [pc, #192]	; (8009524 <_dtoa_r+0x624>)
 8009462:	2200      	movs	r2, #0
 8009464:	4650      	mov	r0, sl
 8009466:	4659      	mov	r1, fp
 8009468:	f7f7 f8ce 	bl	8000608 <__aeabi_dmul>
 800946c:	4b2d      	ldr	r3, [pc, #180]	; (8009524 <_dtoa_r+0x624>)
 800946e:	4682      	mov	sl, r0
 8009470:	468b      	mov	fp, r1
 8009472:	4640      	mov	r0, r8
 8009474:	4649      	mov	r1, r9
 8009476:	2200      	movs	r2, #0
 8009478:	f7f7 f8c6 	bl	8000608 <__aeabi_dmul>
 800947c:	4680      	mov	r8, r0
 800947e:	4689      	mov	r9, r1
 8009480:	e7c6      	b.n	8009410 <_dtoa_r+0x510>
 8009482:	4650      	mov	r0, sl
 8009484:	4659      	mov	r1, fp
 8009486:	f7f7 f8bf 	bl	8000608 <__aeabi_dmul>
 800948a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800948c:	9d01      	ldr	r5, [sp, #4]
 800948e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009490:	4682      	mov	sl, r0
 8009492:	468b      	mov	fp, r1
 8009494:	4649      	mov	r1, r9
 8009496:	4640      	mov	r0, r8
 8009498:	f7f7 fb66 	bl	8000b68 <__aeabi_d2iz>
 800949c:	4606      	mov	r6, r0
 800949e:	f7f7 f849 	bl	8000534 <__aeabi_i2d>
 80094a2:	3630      	adds	r6, #48	; 0x30
 80094a4:	4602      	mov	r2, r0
 80094a6:	460b      	mov	r3, r1
 80094a8:	4640      	mov	r0, r8
 80094aa:	4649      	mov	r1, r9
 80094ac:	f7f6 fef4 	bl	8000298 <__aeabi_dsub>
 80094b0:	f805 6b01 	strb.w	r6, [r5], #1
 80094b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80094b6:	429d      	cmp	r5, r3
 80094b8:	4680      	mov	r8, r0
 80094ba:	4689      	mov	r9, r1
 80094bc:	f04f 0200 	mov.w	r2, #0
 80094c0:	d124      	bne.n	800950c <_dtoa_r+0x60c>
 80094c2:	4b1b      	ldr	r3, [pc, #108]	; (8009530 <_dtoa_r+0x630>)
 80094c4:	4650      	mov	r0, sl
 80094c6:	4659      	mov	r1, fp
 80094c8:	f7f6 fee8 	bl	800029c <__adddf3>
 80094cc:	4602      	mov	r2, r0
 80094ce:	460b      	mov	r3, r1
 80094d0:	4640      	mov	r0, r8
 80094d2:	4649      	mov	r1, r9
 80094d4:	f7f7 fb28 	bl	8000b28 <__aeabi_dcmpgt>
 80094d8:	2800      	cmp	r0, #0
 80094da:	d173      	bne.n	80095c4 <_dtoa_r+0x6c4>
 80094dc:	4652      	mov	r2, sl
 80094de:	465b      	mov	r3, fp
 80094e0:	4913      	ldr	r1, [pc, #76]	; (8009530 <_dtoa_r+0x630>)
 80094e2:	2000      	movs	r0, #0
 80094e4:	f7f6 fed8 	bl	8000298 <__aeabi_dsub>
 80094e8:	4602      	mov	r2, r0
 80094ea:	460b      	mov	r3, r1
 80094ec:	4640      	mov	r0, r8
 80094ee:	4649      	mov	r1, r9
 80094f0:	f7f7 fafc 	bl	8000aec <__aeabi_dcmplt>
 80094f4:	2800      	cmp	r0, #0
 80094f6:	f43f af35 	beq.w	8009364 <_dtoa_r+0x464>
 80094fa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80094fc:	1e6b      	subs	r3, r5, #1
 80094fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8009500:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009504:	2b30      	cmp	r3, #48	; 0x30
 8009506:	d0f8      	beq.n	80094fa <_dtoa_r+0x5fa>
 8009508:	9700      	str	r7, [sp, #0]
 800950a:	e049      	b.n	80095a0 <_dtoa_r+0x6a0>
 800950c:	4b05      	ldr	r3, [pc, #20]	; (8009524 <_dtoa_r+0x624>)
 800950e:	f7f7 f87b 	bl	8000608 <__aeabi_dmul>
 8009512:	4680      	mov	r8, r0
 8009514:	4689      	mov	r9, r1
 8009516:	e7bd      	b.n	8009494 <_dtoa_r+0x594>
 8009518:	0800d0a8 	.word	0x0800d0a8
 800951c:	0800d080 	.word	0x0800d080
 8009520:	3ff00000 	.word	0x3ff00000
 8009524:	40240000 	.word	0x40240000
 8009528:	401c0000 	.word	0x401c0000
 800952c:	40140000 	.word	0x40140000
 8009530:	3fe00000 	.word	0x3fe00000
 8009534:	9d01      	ldr	r5, [sp, #4]
 8009536:	4656      	mov	r6, sl
 8009538:	465f      	mov	r7, fp
 800953a:	4642      	mov	r2, r8
 800953c:	464b      	mov	r3, r9
 800953e:	4630      	mov	r0, r6
 8009540:	4639      	mov	r1, r7
 8009542:	f7f7 f98b 	bl	800085c <__aeabi_ddiv>
 8009546:	f7f7 fb0f 	bl	8000b68 <__aeabi_d2iz>
 800954a:	4682      	mov	sl, r0
 800954c:	f7f6 fff2 	bl	8000534 <__aeabi_i2d>
 8009550:	4642      	mov	r2, r8
 8009552:	464b      	mov	r3, r9
 8009554:	f7f7 f858 	bl	8000608 <__aeabi_dmul>
 8009558:	4602      	mov	r2, r0
 800955a:	460b      	mov	r3, r1
 800955c:	4630      	mov	r0, r6
 800955e:	4639      	mov	r1, r7
 8009560:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009564:	f7f6 fe98 	bl	8000298 <__aeabi_dsub>
 8009568:	f805 6b01 	strb.w	r6, [r5], #1
 800956c:	9e01      	ldr	r6, [sp, #4]
 800956e:	9f03      	ldr	r7, [sp, #12]
 8009570:	1bae      	subs	r6, r5, r6
 8009572:	42b7      	cmp	r7, r6
 8009574:	4602      	mov	r2, r0
 8009576:	460b      	mov	r3, r1
 8009578:	d135      	bne.n	80095e6 <_dtoa_r+0x6e6>
 800957a:	f7f6 fe8f 	bl	800029c <__adddf3>
 800957e:	4642      	mov	r2, r8
 8009580:	464b      	mov	r3, r9
 8009582:	4606      	mov	r6, r0
 8009584:	460f      	mov	r7, r1
 8009586:	f7f7 facf 	bl	8000b28 <__aeabi_dcmpgt>
 800958a:	b9d0      	cbnz	r0, 80095c2 <_dtoa_r+0x6c2>
 800958c:	4642      	mov	r2, r8
 800958e:	464b      	mov	r3, r9
 8009590:	4630      	mov	r0, r6
 8009592:	4639      	mov	r1, r7
 8009594:	f7f7 faa0 	bl	8000ad8 <__aeabi_dcmpeq>
 8009598:	b110      	cbz	r0, 80095a0 <_dtoa_r+0x6a0>
 800959a:	f01a 0f01 	tst.w	sl, #1
 800959e:	d110      	bne.n	80095c2 <_dtoa_r+0x6c2>
 80095a0:	4620      	mov	r0, r4
 80095a2:	ee18 1a10 	vmov	r1, s16
 80095a6:	f000 faf3 	bl	8009b90 <_Bfree>
 80095aa:	2300      	movs	r3, #0
 80095ac:	9800      	ldr	r0, [sp, #0]
 80095ae:	702b      	strb	r3, [r5, #0]
 80095b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80095b2:	3001      	adds	r0, #1
 80095b4:	6018      	str	r0, [r3, #0]
 80095b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	f43f acf1 	beq.w	8008fa0 <_dtoa_r+0xa0>
 80095be:	601d      	str	r5, [r3, #0]
 80095c0:	e4ee      	b.n	8008fa0 <_dtoa_r+0xa0>
 80095c2:	9f00      	ldr	r7, [sp, #0]
 80095c4:	462b      	mov	r3, r5
 80095c6:	461d      	mov	r5, r3
 80095c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80095cc:	2a39      	cmp	r2, #57	; 0x39
 80095ce:	d106      	bne.n	80095de <_dtoa_r+0x6de>
 80095d0:	9a01      	ldr	r2, [sp, #4]
 80095d2:	429a      	cmp	r2, r3
 80095d4:	d1f7      	bne.n	80095c6 <_dtoa_r+0x6c6>
 80095d6:	9901      	ldr	r1, [sp, #4]
 80095d8:	2230      	movs	r2, #48	; 0x30
 80095da:	3701      	adds	r7, #1
 80095dc:	700a      	strb	r2, [r1, #0]
 80095de:	781a      	ldrb	r2, [r3, #0]
 80095e0:	3201      	adds	r2, #1
 80095e2:	701a      	strb	r2, [r3, #0]
 80095e4:	e790      	b.n	8009508 <_dtoa_r+0x608>
 80095e6:	4ba6      	ldr	r3, [pc, #664]	; (8009880 <_dtoa_r+0x980>)
 80095e8:	2200      	movs	r2, #0
 80095ea:	f7f7 f80d 	bl	8000608 <__aeabi_dmul>
 80095ee:	2200      	movs	r2, #0
 80095f0:	2300      	movs	r3, #0
 80095f2:	4606      	mov	r6, r0
 80095f4:	460f      	mov	r7, r1
 80095f6:	f7f7 fa6f 	bl	8000ad8 <__aeabi_dcmpeq>
 80095fa:	2800      	cmp	r0, #0
 80095fc:	d09d      	beq.n	800953a <_dtoa_r+0x63a>
 80095fe:	e7cf      	b.n	80095a0 <_dtoa_r+0x6a0>
 8009600:	9a08      	ldr	r2, [sp, #32]
 8009602:	2a00      	cmp	r2, #0
 8009604:	f000 80d7 	beq.w	80097b6 <_dtoa_r+0x8b6>
 8009608:	9a06      	ldr	r2, [sp, #24]
 800960a:	2a01      	cmp	r2, #1
 800960c:	f300 80ba 	bgt.w	8009784 <_dtoa_r+0x884>
 8009610:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009612:	2a00      	cmp	r2, #0
 8009614:	f000 80b2 	beq.w	800977c <_dtoa_r+0x87c>
 8009618:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800961c:	9e07      	ldr	r6, [sp, #28]
 800961e:	9d04      	ldr	r5, [sp, #16]
 8009620:	9a04      	ldr	r2, [sp, #16]
 8009622:	441a      	add	r2, r3
 8009624:	9204      	str	r2, [sp, #16]
 8009626:	9a05      	ldr	r2, [sp, #20]
 8009628:	2101      	movs	r1, #1
 800962a:	441a      	add	r2, r3
 800962c:	4620      	mov	r0, r4
 800962e:	9205      	str	r2, [sp, #20]
 8009630:	f000 fb66 	bl	8009d00 <__i2b>
 8009634:	4607      	mov	r7, r0
 8009636:	2d00      	cmp	r5, #0
 8009638:	dd0c      	ble.n	8009654 <_dtoa_r+0x754>
 800963a:	9b05      	ldr	r3, [sp, #20]
 800963c:	2b00      	cmp	r3, #0
 800963e:	dd09      	ble.n	8009654 <_dtoa_r+0x754>
 8009640:	42ab      	cmp	r3, r5
 8009642:	9a04      	ldr	r2, [sp, #16]
 8009644:	bfa8      	it	ge
 8009646:	462b      	movge	r3, r5
 8009648:	1ad2      	subs	r2, r2, r3
 800964a:	9204      	str	r2, [sp, #16]
 800964c:	9a05      	ldr	r2, [sp, #20]
 800964e:	1aed      	subs	r5, r5, r3
 8009650:	1ad3      	subs	r3, r2, r3
 8009652:	9305      	str	r3, [sp, #20]
 8009654:	9b07      	ldr	r3, [sp, #28]
 8009656:	b31b      	cbz	r3, 80096a0 <_dtoa_r+0x7a0>
 8009658:	9b08      	ldr	r3, [sp, #32]
 800965a:	2b00      	cmp	r3, #0
 800965c:	f000 80af 	beq.w	80097be <_dtoa_r+0x8be>
 8009660:	2e00      	cmp	r6, #0
 8009662:	dd13      	ble.n	800968c <_dtoa_r+0x78c>
 8009664:	4639      	mov	r1, r7
 8009666:	4632      	mov	r2, r6
 8009668:	4620      	mov	r0, r4
 800966a:	f000 fc09 	bl	8009e80 <__pow5mult>
 800966e:	ee18 2a10 	vmov	r2, s16
 8009672:	4601      	mov	r1, r0
 8009674:	4607      	mov	r7, r0
 8009676:	4620      	mov	r0, r4
 8009678:	f000 fb58 	bl	8009d2c <__multiply>
 800967c:	ee18 1a10 	vmov	r1, s16
 8009680:	4680      	mov	r8, r0
 8009682:	4620      	mov	r0, r4
 8009684:	f000 fa84 	bl	8009b90 <_Bfree>
 8009688:	ee08 8a10 	vmov	s16, r8
 800968c:	9b07      	ldr	r3, [sp, #28]
 800968e:	1b9a      	subs	r2, r3, r6
 8009690:	d006      	beq.n	80096a0 <_dtoa_r+0x7a0>
 8009692:	ee18 1a10 	vmov	r1, s16
 8009696:	4620      	mov	r0, r4
 8009698:	f000 fbf2 	bl	8009e80 <__pow5mult>
 800969c:	ee08 0a10 	vmov	s16, r0
 80096a0:	2101      	movs	r1, #1
 80096a2:	4620      	mov	r0, r4
 80096a4:	f000 fb2c 	bl	8009d00 <__i2b>
 80096a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	4606      	mov	r6, r0
 80096ae:	f340 8088 	ble.w	80097c2 <_dtoa_r+0x8c2>
 80096b2:	461a      	mov	r2, r3
 80096b4:	4601      	mov	r1, r0
 80096b6:	4620      	mov	r0, r4
 80096b8:	f000 fbe2 	bl	8009e80 <__pow5mult>
 80096bc:	9b06      	ldr	r3, [sp, #24]
 80096be:	2b01      	cmp	r3, #1
 80096c0:	4606      	mov	r6, r0
 80096c2:	f340 8081 	ble.w	80097c8 <_dtoa_r+0x8c8>
 80096c6:	f04f 0800 	mov.w	r8, #0
 80096ca:	6933      	ldr	r3, [r6, #16]
 80096cc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80096d0:	6918      	ldr	r0, [r3, #16]
 80096d2:	f000 fac5 	bl	8009c60 <__hi0bits>
 80096d6:	f1c0 0020 	rsb	r0, r0, #32
 80096da:	9b05      	ldr	r3, [sp, #20]
 80096dc:	4418      	add	r0, r3
 80096de:	f010 001f 	ands.w	r0, r0, #31
 80096e2:	f000 8092 	beq.w	800980a <_dtoa_r+0x90a>
 80096e6:	f1c0 0320 	rsb	r3, r0, #32
 80096ea:	2b04      	cmp	r3, #4
 80096ec:	f340 808a 	ble.w	8009804 <_dtoa_r+0x904>
 80096f0:	f1c0 001c 	rsb	r0, r0, #28
 80096f4:	9b04      	ldr	r3, [sp, #16]
 80096f6:	4403      	add	r3, r0
 80096f8:	9304      	str	r3, [sp, #16]
 80096fa:	9b05      	ldr	r3, [sp, #20]
 80096fc:	4403      	add	r3, r0
 80096fe:	4405      	add	r5, r0
 8009700:	9305      	str	r3, [sp, #20]
 8009702:	9b04      	ldr	r3, [sp, #16]
 8009704:	2b00      	cmp	r3, #0
 8009706:	dd07      	ble.n	8009718 <_dtoa_r+0x818>
 8009708:	ee18 1a10 	vmov	r1, s16
 800970c:	461a      	mov	r2, r3
 800970e:	4620      	mov	r0, r4
 8009710:	f000 fc10 	bl	8009f34 <__lshift>
 8009714:	ee08 0a10 	vmov	s16, r0
 8009718:	9b05      	ldr	r3, [sp, #20]
 800971a:	2b00      	cmp	r3, #0
 800971c:	dd05      	ble.n	800972a <_dtoa_r+0x82a>
 800971e:	4631      	mov	r1, r6
 8009720:	461a      	mov	r2, r3
 8009722:	4620      	mov	r0, r4
 8009724:	f000 fc06 	bl	8009f34 <__lshift>
 8009728:	4606      	mov	r6, r0
 800972a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800972c:	2b00      	cmp	r3, #0
 800972e:	d06e      	beq.n	800980e <_dtoa_r+0x90e>
 8009730:	ee18 0a10 	vmov	r0, s16
 8009734:	4631      	mov	r1, r6
 8009736:	f000 fc6d 	bl	800a014 <__mcmp>
 800973a:	2800      	cmp	r0, #0
 800973c:	da67      	bge.n	800980e <_dtoa_r+0x90e>
 800973e:	9b00      	ldr	r3, [sp, #0]
 8009740:	3b01      	subs	r3, #1
 8009742:	ee18 1a10 	vmov	r1, s16
 8009746:	9300      	str	r3, [sp, #0]
 8009748:	220a      	movs	r2, #10
 800974a:	2300      	movs	r3, #0
 800974c:	4620      	mov	r0, r4
 800974e:	f000 fa41 	bl	8009bd4 <__multadd>
 8009752:	9b08      	ldr	r3, [sp, #32]
 8009754:	ee08 0a10 	vmov	s16, r0
 8009758:	2b00      	cmp	r3, #0
 800975a:	f000 81b1 	beq.w	8009ac0 <_dtoa_r+0xbc0>
 800975e:	2300      	movs	r3, #0
 8009760:	4639      	mov	r1, r7
 8009762:	220a      	movs	r2, #10
 8009764:	4620      	mov	r0, r4
 8009766:	f000 fa35 	bl	8009bd4 <__multadd>
 800976a:	9b02      	ldr	r3, [sp, #8]
 800976c:	2b00      	cmp	r3, #0
 800976e:	4607      	mov	r7, r0
 8009770:	f300 808e 	bgt.w	8009890 <_dtoa_r+0x990>
 8009774:	9b06      	ldr	r3, [sp, #24]
 8009776:	2b02      	cmp	r3, #2
 8009778:	dc51      	bgt.n	800981e <_dtoa_r+0x91e>
 800977a:	e089      	b.n	8009890 <_dtoa_r+0x990>
 800977c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800977e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009782:	e74b      	b.n	800961c <_dtoa_r+0x71c>
 8009784:	9b03      	ldr	r3, [sp, #12]
 8009786:	1e5e      	subs	r6, r3, #1
 8009788:	9b07      	ldr	r3, [sp, #28]
 800978a:	42b3      	cmp	r3, r6
 800978c:	bfbf      	itttt	lt
 800978e:	9b07      	ldrlt	r3, [sp, #28]
 8009790:	9607      	strlt	r6, [sp, #28]
 8009792:	1af2      	sublt	r2, r6, r3
 8009794:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009796:	bfb6      	itet	lt
 8009798:	189b      	addlt	r3, r3, r2
 800979a:	1b9e      	subge	r6, r3, r6
 800979c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800979e:	9b03      	ldr	r3, [sp, #12]
 80097a0:	bfb8      	it	lt
 80097a2:	2600      	movlt	r6, #0
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	bfb7      	itett	lt
 80097a8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80097ac:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80097b0:	1a9d      	sublt	r5, r3, r2
 80097b2:	2300      	movlt	r3, #0
 80097b4:	e734      	b.n	8009620 <_dtoa_r+0x720>
 80097b6:	9e07      	ldr	r6, [sp, #28]
 80097b8:	9d04      	ldr	r5, [sp, #16]
 80097ba:	9f08      	ldr	r7, [sp, #32]
 80097bc:	e73b      	b.n	8009636 <_dtoa_r+0x736>
 80097be:	9a07      	ldr	r2, [sp, #28]
 80097c0:	e767      	b.n	8009692 <_dtoa_r+0x792>
 80097c2:	9b06      	ldr	r3, [sp, #24]
 80097c4:	2b01      	cmp	r3, #1
 80097c6:	dc18      	bgt.n	80097fa <_dtoa_r+0x8fa>
 80097c8:	f1ba 0f00 	cmp.w	sl, #0
 80097cc:	d115      	bne.n	80097fa <_dtoa_r+0x8fa>
 80097ce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80097d2:	b993      	cbnz	r3, 80097fa <_dtoa_r+0x8fa>
 80097d4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80097d8:	0d1b      	lsrs	r3, r3, #20
 80097da:	051b      	lsls	r3, r3, #20
 80097dc:	b183      	cbz	r3, 8009800 <_dtoa_r+0x900>
 80097de:	9b04      	ldr	r3, [sp, #16]
 80097e0:	3301      	adds	r3, #1
 80097e2:	9304      	str	r3, [sp, #16]
 80097e4:	9b05      	ldr	r3, [sp, #20]
 80097e6:	3301      	adds	r3, #1
 80097e8:	9305      	str	r3, [sp, #20]
 80097ea:	f04f 0801 	mov.w	r8, #1
 80097ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	f47f af6a 	bne.w	80096ca <_dtoa_r+0x7ca>
 80097f6:	2001      	movs	r0, #1
 80097f8:	e76f      	b.n	80096da <_dtoa_r+0x7da>
 80097fa:	f04f 0800 	mov.w	r8, #0
 80097fe:	e7f6      	b.n	80097ee <_dtoa_r+0x8ee>
 8009800:	4698      	mov	r8, r3
 8009802:	e7f4      	b.n	80097ee <_dtoa_r+0x8ee>
 8009804:	f43f af7d 	beq.w	8009702 <_dtoa_r+0x802>
 8009808:	4618      	mov	r0, r3
 800980a:	301c      	adds	r0, #28
 800980c:	e772      	b.n	80096f4 <_dtoa_r+0x7f4>
 800980e:	9b03      	ldr	r3, [sp, #12]
 8009810:	2b00      	cmp	r3, #0
 8009812:	dc37      	bgt.n	8009884 <_dtoa_r+0x984>
 8009814:	9b06      	ldr	r3, [sp, #24]
 8009816:	2b02      	cmp	r3, #2
 8009818:	dd34      	ble.n	8009884 <_dtoa_r+0x984>
 800981a:	9b03      	ldr	r3, [sp, #12]
 800981c:	9302      	str	r3, [sp, #8]
 800981e:	9b02      	ldr	r3, [sp, #8]
 8009820:	b96b      	cbnz	r3, 800983e <_dtoa_r+0x93e>
 8009822:	4631      	mov	r1, r6
 8009824:	2205      	movs	r2, #5
 8009826:	4620      	mov	r0, r4
 8009828:	f000 f9d4 	bl	8009bd4 <__multadd>
 800982c:	4601      	mov	r1, r0
 800982e:	4606      	mov	r6, r0
 8009830:	ee18 0a10 	vmov	r0, s16
 8009834:	f000 fbee 	bl	800a014 <__mcmp>
 8009838:	2800      	cmp	r0, #0
 800983a:	f73f adbb 	bgt.w	80093b4 <_dtoa_r+0x4b4>
 800983e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009840:	9d01      	ldr	r5, [sp, #4]
 8009842:	43db      	mvns	r3, r3
 8009844:	9300      	str	r3, [sp, #0]
 8009846:	f04f 0800 	mov.w	r8, #0
 800984a:	4631      	mov	r1, r6
 800984c:	4620      	mov	r0, r4
 800984e:	f000 f99f 	bl	8009b90 <_Bfree>
 8009852:	2f00      	cmp	r7, #0
 8009854:	f43f aea4 	beq.w	80095a0 <_dtoa_r+0x6a0>
 8009858:	f1b8 0f00 	cmp.w	r8, #0
 800985c:	d005      	beq.n	800986a <_dtoa_r+0x96a>
 800985e:	45b8      	cmp	r8, r7
 8009860:	d003      	beq.n	800986a <_dtoa_r+0x96a>
 8009862:	4641      	mov	r1, r8
 8009864:	4620      	mov	r0, r4
 8009866:	f000 f993 	bl	8009b90 <_Bfree>
 800986a:	4639      	mov	r1, r7
 800986c:	4620      	mov	r0, r4
 800986e:	f000 f98f 	bl	8009b90 <_Bfree>
 8009872:	e695      	b.n	80095a0 <_dtoa_r+0x6a0>
 8009874:	2600      	movs	r6, #0
 8009876:	4637      	mov	r7, r6
 8009878:	e7e1      	b.n	800983e <_dtoa_r+0x93e>
 800987a:	9700      	str	r7, [sp, #0]
 800987c:	4637      	mov	r7, r6
 800987e:	e599      	b.n	80093b4 <_dtoa_r+0x4b4>
 8009880:	40240000 	.word	0x40240000
 8009884:	9b08      	ldr	r3, [sp, #32]
 8009886:	2b00      	cmp	r3, #0
 8009888:	f000 80ca 	beq.w	8009a20 <_dtoa_r+0xb20>
 800988c:	9b03      	ldr	r3, [sp, #12]
 800988e:	9302      	str	r3, [sp, #8]
 8009890:	2d00      	cmp	r5, #0
 8009892:	dd05      	ble.n	80098a0 <_dtoa_r+0x9a0>
 8009894:	4639      	mov	r1, r7
 8009896:	462a      	mov	r2, r5
 8009898:	4620      	mov	r0, r4
 800989a:	f000 fb4b 	bl	8009f34 <__lshift>
 800989e:	4607      	mov	r7, r0
 80098a0:	f1b8 0f00 	cmp.w	r8, #0
 80098a4:	d05b      	beq.n	800995e <_dtoa_r+0xa5e>
 80098a6:	6879      	ldr	r1, [r7, #4]
 80098a8:	4620      	mov	r0, r4
 80098aa:	f000 f931 	bl	8009b10 <_Balloc>
 80098ae:	4605      	mov	r5, r0
 80098b0:	b928      	cbnz	r0, 80098be <_dtoa_r+0x9be>
 80098b2:	4b87      	ldr	r3, [pc, #540]	; (8009ad0 <_dtoa_r+0xbd0>)
 80098b4:	4602      	mov	r2, r0
 80098b6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80098ba:	f7ff bb3b 	b.w	8008f34 <_dtoa_r+0x34>
 80098be:	693a      	ldr	r2, [r7, #16]
 80098c0:	3202      	adds	r2, #2
 80098c2:	0092      	lsls	r2, r2, #2
 80098c4:	f107 010c 	add.w	r1, r7, #12
 80098c8:	300c      	adds	r0, #12
 80098ca:	f000 f913 	bl	8009af4 <memcpy>
 80098ce:	2201      	movs	r2, #1
 80098d0:	4629      	mov	r1, r5
 80098d2:	4620      	mov	r0, r4
 80098d4:	f000 fb2e 	bl	8009f34 <__lshift>
 80098d8:	9b01      	ldr	r3, [sp, #4]
 80098da:	f103 0901 	add.w	r9, r3, #1
 80098de:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80098e2:	4413      	add	r3, r2
 80098e4:	9305      	str	r3, [sp, #20]
 80098e6:	f00a 0301 	and.w	r3, sl, #1
 80098ea:	46b8      	mov	r8, r7
 80098ec:	9304      	str	r3, [sp, #16]
 80098ee:	4607      	mov	r7, r0
 80098f0:	4631      	mov	r1, r6
 80098f2:	ee18 0a10 	vmov	r0, s16
 80098f6:	f7ff fa75 	bl	8008de4 <quorem>
 80098fa:	4641      	mov	r1, r8
 80098fc:	9002      	str	r0, [sp, #8]
 80098fe:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009902:	ee18 0a10 	vmov	r0, s16
 8009906:	f000 fb85 	bl	800a014 <__mcmp>
 800990a:	463a      	mov	r2, r7
 800990c:	9003      	str	r0, [sp, #12]
 800990e:	4631      	mov	r1, r6
 8009910:	4620      	mov	r0, r4
 8009912:	f000 fb9b 	bl	800a04c <__mdiff>
 8009916:	68c2      	ldr	r2, [r0, #12]
 8009918:	f109 3bff 	add.w	fp, r9, #4294967295
 800991c:	4605      	mov	r5, r0
 800991e:	bb02      	cbnz	r2, 8009962 <_dtoa_r+0xa62>
 8009920:	4601      	mov	r1, r0
 8009922:	ee18 0a10 	vmov	r0, s16
 8009926:	f000 fb75 	bl	800a014 <__mcmp>
 800992a:	4602      	mov	r2, r0
 800992c:	4629      	mov	r1, r5
 800992e:	4620      	mov	r0, r4
 8009930:	9207      	str	r2, [sp, #28]
 8009932:	f000 f92d 	bl	8009b90 <_Bfree>
 8009936:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800993a:	ea43 0102 	orr.w	r1, r3, r2
 800993e:	9b04      	ldr	r3, [sp, #16]
 8009940:	430b      	orrs	r3, r1
 8009942:	464d      	mov	r5, r9
 8009944:	d10f      	bne.n	8009966 <_dtoa_r+0xa66>
 8009946:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800994a:	d02a      	beq.n	80099a2 <_dtoa_r+0xaa2>
 800994c:	9b03      	ldr	r3, [sp, #12]
 800994e:	2b00      	cmp	r3, #0
 8009950:	dd02      	ble.n	8009958 <_dtoa_r+0xa58>
 8009952:	9b02      	ldr	r3, [sp, #8]
 8009954:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009958:	f88b a000 	strb.w	sl, [fp]
 800995c:	e775      	b.n	800984a <_dtoa_r+0x94a>
 800995e:	4638      	mov	r0, r7
 8009960:	e7ba      	b.n	80098d8 <_dtoa_r+0x9d8>
 8009962:	2201      	movs	r2, #1
 8009964:	e7e2      	b.n	800992c <_dtoa_r+0xa2c>
 8009966:	9b03      	ldr	r3, [sp, #12]
 8009968:	2b00      	cmp	r3, #0
 800996a:	db04      	blt.n	8009976 <_dtoa_r+0xa76>
 800996c:	9906      	ldr	r1, [sp, #24]
 800996e:	430b      	orrs	r3, r1
 8009970:	9904      	ldr	r1, [sp, #16]
 8009972:	430b      	orrs	r3, r1
 8009974:	d122      	bne.n	80099bc <_dtoa_r+0xabc>
 8009976:	2a00      	cmp	r2, #0
 8009978:	ddee      	ble.n	8009958 <_dtoa_r+0xa58>
 800997a:	ee18 1a10 	vmov	r1, s16
 800997e:	2201      	movs	r2, #1
 8009980:	4620      	mov	r0, r4
 8009982:	f000 fad7 	bl	8009f34 <__lshift>
 8009986:	4631      	mov	r1, r6
 8009988:	ee08 0a10 	vmov	s16, r0
 800998c:	f000 fb42 	bl	800a014 <__mcmp>
 8009990:	2800      	cmp	r0, #0
 8009992:	dc03      	bgt.n	800999c <_dtoa_r+0xa9c>
 8009994:	d1e0      	bne.n	8009958 <_dtoa_r+0xa58>
 8009996:	f01a 0f01 	tst.w	sl, #1
 800999a:	d0dd      	beq.n	8009958 <_dtoa_r+0xa58>
 800999c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80099a0:	d1d7      	bne.n	8009952 <_dtoa_r+0xa52>
 80099a2:	2339      	movs	r3, #57	; 0x39
 80099a4:	f88b 3000 	strb.w	r3, [fp]
 80099a8:	462b      	mov	r3, r5
 80099aa:	461d      	mov	r5, r3
 80099ac:	3b01      	subs	r3, #1
 80099ae:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80099b2:	2a39      	cmp	r2, #57	; 0x39
 80099b4:	d071      	beq.n	8009a9a <_dtoa_r+0xb9a>
 80099b6:	3201      	adds	r2, #1
 80099b8:	701a      	strb	r2, [r3, #0]
 80099ba:	e746      	b.n	800984a <_dtoa_r+0x94a>
 80099bc:	2a00      	cmp	r2, #0
 80099be:	dd07      	ble.n	80099d0 <_dtoa_r+0xad0>
 80099c0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80099c4:	d0ed      	beq.n	80099a2 <_dtoa_r+0xaa2>
 80099c6:	f10a 0301 	add.w	r3, sl, #1
 80099ca:	f88b 3000 	strb.w	r3, [fp]
 80099ce:	e73c      	b.n	800984a <_dtoa_r+0x94a>
 80099d0:	9b05      	ldr	r3, [sp, #20]
 80099d2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80099d6:	4599      	cmp	r9, r3
 80099d8:	d047      	beq.n	8009a6a <_dtoa_r+0xb6a>
 80099da:	ee18 1a10 	vmov	r1, s16
 80099de:	2300      	movs	r3, #0
 80099e0:	220a      	movs	r2, #10
 80099e2:	4620      	mov	r0, r4
 80099e4:	f000 f8f6 	bl	8009bd4 <__multadd>
 80099e8:	45b8      	cmp	r8, r7
 80099ea:	ee08 0a10 	vmov	s16, r0
 80099ee:	f04f 0300 	mov.w	r3, #0
 80099f2:	f04f 020a 	mov.w	r2, #10
 80099f6:	4641      	mov	r1, r8
 80099f8:	4620      	mov	r0, r4
 80099fa:	d106      	bne.n	8009a0a <_dtoa_r+0xb0a>
 80099fc:	f000 f8ea 	bl	8009bd4 <__multadd>
 8009a00:	4680      	mov	r8, r0
 8009a02:	4607      	mov	r7, r0
 8009a04:	f109 0901 	add.w	r9, r9, #1
 8009a08:	e772      	b.n	80098f0 <_dtoa_r+0x9f0>
 8009a0a:	f000 f8e3 	bl	8009bd4 <__multadd>
 8009a0e:	4639      	mov	r1, r7
 8009a10:	4680      	mov	r8, r0
 8009a12:	2300      	movs	r3, #0
 8009a14:	220a      	movs	r2, #10
 8009a16:	4620      	mov	r0, r4
 8009a18:	f000 f8dc 	bl	8009bd4 <__multadd>
 8009a1c:	4607      	mov	r7, r0
 8009a1e:	e7f1      	b.n	8009a04 <_dtoa_r+0xb04>
 8009a20:	9b03      	ldr	r3, [sp, #12]
 8009a22:	9302      	str	r3, [sp, #8]
 8009a24:	9d01      	ldr	r5, [sp, #4]
 8009a26:	ee18 0a10 	vmov	r0, s16
 8009a2a:	4631      	mov	r1, r6
 8009a2c:	f7ff f9da 	bl	8008de4 <quorem>
 8009a30:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009a34:	9b01      	ldr	r3, [sp, #4]
 8009a36:	f805 ab01 	strb.w	sl, [r5], #1
 8009a3a:	1aea      	subs	r2, r5, r3
 8009a3c:	9b02      	ldr	r3, [sp, #8]
 8009a3e:	4293      	cmp	r3, r2
 8009a40:	dd09      	ble.n	8009a56 <_dtoa_r+0xb56>
 8009a42:	ee18 1a10 	vmov	r1, s16
 8009a46:	2300      	movs	r3, #0
 8009a48:	220a      	movs	r2, #10
 8009a4a:	4620      	mov	r0, r4
 8009a4c:	f000 f8c2 	bl	8009bd4 <__multadd>
 8009a50:	ee08 0a10 	vmov	s16, r0
 8009a54:	e7e7      	b.n	8009a26 <_dtoa_r+0xb26>
 8009a56:	9b02      	ldr	r3, [sp, #8]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	bfc8      	it	gt
 8009a5c:	461d      	movgt	r5, r3
 8009a5e:	9b01      	ldr	r3, [sp, #4]
 8009a60:	bfd8      	it	le
 8009a62:	2501      	movle	r5, #1
 8009a64:	441d      	add	r5, r3
 8009a66:	f04f 0800 	mov.w	r8, #0
 8009a6a:	ee18 1a10 	vmov	r1, s16
 8009a6e:	2201      	movs	r2, #1
 8009a70:	4620      	mov	r0, r4
 8009a72:	f000 fa5f 	bl	8009f34 <__lshift>
 8009a76:	4631      	mov	r1, r6
 8009a78:	ee08 0a10 	vmov	s16, r0
 8009a7c:	f000 faca 	bl	800a014 <__mcmp>
 8009a80:	2800      	cmp	r0, #0
 8009a82:	dc91      	bgt.n	80099a8 <_dtoa_r+0xaa8>
 8009a84:	d102      	bne.n	8009a8c <_dtoa_r+0xb8c>
 8009a86:	f01a 0f01 	tst.w	sl, #1
 8009a8a:	d18d      	bne.n	80099a8 <_dtoa_r+0xaa8>
 8009a8c:	462b      	mov	r3, r5
 8009a8e:	461d      	mov	r5, r3
 8009a90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009a94:	2a30      	cmp	r2, #48	; 0x30
 8009a96:	d0fa      	beq.n	8009a8e <_dtoa_r+0xb8e>
 8009a98:	e6d7      	b.n	800984a <_dtoa_r+0x94a>
 8009a9a:	9a01      	ldr	r2, [sp, #4]
 8009a9c:	429a      	cmp	r2, r3
 8009a9e:	d184      	bne.n	80099aa <_dtoa_r+0xaaa>
 8009aa0:	9b00      	ldr	r3, [sp, #0]
 8009aa2:	3301      	adds	r3, #1
 8009aa4:	9300      	str	r3, [sp, #0]
 8009aa6:	2331      	movs	r3, #49	; 0x31
 8009aa8:	7013      	strb	r3, [r2, #0]
 8009aaa:	e6ce      	b.n	800984a <_dtoa_r+0x94a>
 8009aac:	4b09      	ldr	r3, [pc, #36]	; (8009ad4 <_dtoa_r+0xbd4>)
 8009aae:	f7ff ba95 	b.w	8008fdc <_dtoa_r+0xdc>
 8009ab2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	f47f aa6e 	bne.w	8008f96 <_dtoa_r+0x96>
 8009aba:	4b07      	ldr	r3, [pc, #28]	; (8009ad8 <_dtoa_r+0xbd8>)
 8009abc:	f7ff ba8e 	b.w	8008fdc <_dtoa_r+0xdc>
 8009ac0:	9b02      	ldr	r3, [sp, #8]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	dcae      	bgt.n	8009a24 <_dtoa_r+0xb24>
 8009ac6:	9b06      	ldr	r3, [sp, #24]
 8009ac8:	2b02      	cmp	r3, #2
 8009aca:	f73f aea8 	bgt.w	800981e <_dtoa_r+0x91e>
 8009ace:	e7a9      	b.n	8009a24 <_dtoa_r+0xb24>
 8009ad0:	0800d00f 	.word	0x0800d00f
 8009ad4:	0800cf6c 	.word	0x0800cf6c
 8009ad8:	0800cf90 	.word	0x0800cf90

08009adc <_localeconv_r>:
 8009adc:	4800      	ldr	r0, [pc, #0]	; (8009ae0 <_localeconv_r+0x4>)
 8009ade:	4770      	bx	lr
 8009ae0:	20000174 	.word	0x20000174

08009ae4 <malloc>:
 8009ae4:	4b02      	ldr	r3, [pc, #8]	; (8009af0 <malloc+0xc>)
 8009ae6:	4601      	mov	r1, r0
 8009ae8:	6818      	ldr	r0, [r3, #0]
 8009aea:	f000 bc17 	b.w	800a31c <_malloc_r>
 8009aee:	bf00      	nop
 8009af0:	20000020 	.word	0x20000020

08009af4 <memcpy>:
 8009af4:	440a      	add	r2, r1
 8009af6:	4291      	cmp	r1, r2
 8009af8:	f100 33ff 	add.w	r3, r0, #4294967295
 8009afc:	d100      	bne.n	8009b00 <memcpy+0xc>
 8009afe:	4770      	bx	lr
 8009b00:	b510      	push	{r4, lr}
 8009b02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b06:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b0a:	4291      	cmp	r1, r2
 8009b0c:	d1f9      	bne.n	8009b02 <memcpy+0xe>
 8009b0e:	bd10      	pop	{r4, pc}

08009b10 <_Balloc>:
 8009b10:	b570      	push	{r4, r5, r6, lr}
 8009b12:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009b14:	4604      	mov	r4, r0
 8009b16:	460d      	mov	r5, r1
 8009b18:	b976      	cbnz	r6, 8009b38 <_Balloc+0x28>
 8009b1a:	2010      	movs	r0, #16
 8009b1c:	f7ff ffe2 	bl	8009ae4 <malloc>
 8009b20:	4602      	mov	r2, r0
 8009b22:	6260      	str	r0, [r4, #36]	; 0x24
 8009b24:	b920      	cbnz	r0, 8009b30 <_Balloc+0x20>
 8009b26:	4b18      	ldr	r3, [pc, #96]	; (8009b88 <_Balloc+0x78>)
 8009b28:	4818      	ldr	r0, [pc, #96]	; (8009b8c <_Balloc+0x7c>)
 8009b2a:	2166      	movs	r1, #102	; 0x66
 8009b2c:	f000 fdd6 	bl	800a6dc <__assert_func>
 8009b30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009b34:	6006      	str	r6, [r0, #0]
 8009b36:	60c6      	str	r6, [r0, #12]
 8009b38:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009b3a:	68f3      	ldr	r3, [r6, #12]
 8009b3c:	b183      	cbz	r3, 8009b60 <_Balloc+0x50>
 8009b3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b40:	68db      	ldr	r3, [r3, #12]
 8009b42:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009b46:	b9b8      	cbnz	r0, 8009b78 <_Balloc+0x68>
 8009b48:	2101      	movs	r1, #1
 8009b4a:	fa01 f605 	lsl.w	r6, r1, r5
 8009b4e:	1d72      	adds	r2, r6, #5
 8009b50:	0092      	lsls	r2, r2, #2
 8009b52:	4620      	mov	r0, r4
 8009b54:	f000 fb60 	bl	800a218 <_calloc_r>
 8009b58:	b160      	cbz	r0, 8009b74 <_Balloc+0x64>
 8009b5a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009b5e:	e00e      	b.n	8009b7e <_Balloc+0x6e>
 8009b60:	2221      	movs	r2, #33	; 0x21
 8009b62:	2104      	movs	r1, #4
 8009b64:	4620      	mov	r0, r4
 8009b66:	f000 fb57 	bl	800a218 <_calloc_r>
 8009b6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b6c:	60f0      	str	r0, [r6, #12]
 8009b6e:	68db      	ldr	r3, [r3, #12]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d1e4      	bne.n	8009b3e <_Balloc+0x2e>
 8009b74:	2000      	movs	r0, #0
 8009b76:	bd70      	pop	{r4, r5, r6, pc}
 8009b78:	6802      	ldr	r2, [r0, #0]
 8009b7a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009b7e:	2300      	movs	r3, #0
 8009b80:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009b84:	e7f7      	b.n	8009b76 <_Balloc+0x66>
 8009b86:	bf00      	nop
 8009b88:	0800cf9d 	.word	0x0800cf9d
 8009b8c:	0800d020 	.word	0x0800d020

08009b90 <_Bfree>:
 8009b90:	b570      	push	{r4, r5, r6, lr}
 8009b92:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009b94:	4605      	mov	r5, r0
 8009b96:	460c      	mov	r4, r1
 8009b98:	b976      	cbnz	r6, 8009bb8 <_Bfree+0x28>
 8009b9a:	2010      	movs	r0, #16
 8009b9c:	f7ff ffa2 	bl	8009ae4 <malloc>
 8009ba0:	4602      	mov	r2, r0
 8009ba2:	6268      	str	r0, [r5, #36]	; 0x24
 8009ba4:	b920      	cbnz	r0, 8009bb0 <_Bfree+0x20>
 8009ba6:	4b09      	ldr	r3, [pc, #36]	; (8009bcc <_Bfree+0x3c>)
 8009ba8:	4809      	ldr	r0, [pc, #36]	; (8009bd0 <_Bfree+0x40>)
 8009baa:	218a      	movs	r1, #138	; 0x8a
 8009bac:	f000 fd96 	bl	800a6dc <__assert_func>
 8009bb0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009bb4:	6006      	str	r6, [r0, #0]
 8009bb6:	60c6      	str	r6, [r0, #12]
 8009bb8:	b13c      	cbz	r4, 8009bca <_Bfree+0x3a>
 8009bba:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009bbc:	6862      	ldr	r2, [r4, #4]
 8009bbe:	68db      	ldr	r3, [r3, #12]
 8009bc0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009bc4:	6021      	str	r1, [r4, #0]
 8009bc6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009bca:	bd70      	pop	{r4, r5, r6, pc}
 8009bcc:	0800cf9d 	.word	0x0800cf9d
 8009bd0:	0800d020 	.word	0x0800d020

08009bd4 <__multadd>:
 8009bd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bd8:	690d      	ldr	r5, [r1, #16]
 8009bda:	4607      	mov	r7, r0
 8009bdc:	460c      	mov	r4, r1
 8009bde:	461e      	mov	r6, r3
 8009be0:	f101 0c14 	add.w	ip, r1, #20
 8009be4:	2000      	movs	r0, #0
 8009be6:	f8dc 3000 	ldr.w	r3, [ip]
 8009bea:	b299      	uxth	r1, r3
 8009bec:	fb02 6101 	mla	r1, r2, r1, r6
 8009bf0:	0c1e      	lsrs	r6, r3, #16
 8009bf2:	0c0b      	lsrs	r3, r1, #16
 8009bf4:	fb02 3306 	mla	r3, r2, r6, r3
 8009bf8:	b289      	uxth	r1, r1
 8009bfa:	3001      	adds	r0, #1
 8009bfc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009c00:	4285      	cmp	r5, r0
 8009c02:	f84c 1b04 	str.w	r1, [ip], #4
 8009c06:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009c0a:	dcec      	bgt.n	8009be6 <__multadd+0x12>
 8009c0c:	b30e      	cbz	r6, 8009c52 <__multadd+0x7e>
 8009c0e:	68a3      	ldr	r3, [r4, #8]
 8009c10:	42ab      	cmp	r3, r5
 8009c12:	dc19      	bgt.n	8009c48 <__multadd+0x74>
 8009c14:	6861      	ldr	r1, [r4, #4]
 8009c16:	4638      	mov	r0, r7
 8009c18:	3101      	adds	r1, #1
 8009c1a:	f7ff ff79 	bl	8009b10 <_Balloc>
 8009c1e:	4680      	mov	r8, r0
 8009c20:	b928      	cbnz	r0, 8009c2e <__multadd+0x5a>
 8009c22:	4602      	mov	r2, r0
 8009c24:	4b0c      	ldr	r3, [pc, #48]	; (8009c58 <__multadd+0x84>)
 8009c26:	480d      	ldr	r0, [pc, #52]	; (8009c5c <__multadd+0x88>)
 8009c28:	21b5      	movs	r1, #181	; 0xb5
 8009c2a:	f000 fd57 	bl	800a6dc <__assert_func>
 8009c2e:	6922      	ldr	r2, [r4, #16]
 8009c30:	3202      	adds	r2, #2
 8009c32:	f104 010c 	add.w	r1, r4, #12
 8009c36:	0092      	lsls	r2, r2, #2
 8009c38:	300c      	adds	r0, #12
 8009c3a:	f7ff ff5b 	bl	8009af4 <memcpy>
 8009c3e:	4621      	mov	r1, r4
 8009c40:	4638      	mov	r0, r7
 8009c42:	f7ff ffa5 	bl	8009b90 <_Bfree>
 8009c46:	4644      	mov	r4, r8
 8009c48:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009c4c:	3501      	adds	r5, #1
 8009c4e:	615e      	str	r6, [r3, #20]
 8009c50:	6125      	str	r5, [r4, #16]
 8009c52:	4620      	mov	r0, r4
 8009c54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c58:	0800d00f 	.word	0x0800d00f
 8009c5c:	0800d020 	.word	0x0800d020

08009c60 <__hi0bits>:
 8009c60:	0c03      	lsrs	r3, r0, #16
 8009c62:	041b      	lsls	r3, r3, #16
 8009c64:	b9d3      	cbnz	r3, 8009c9c <__hi0bits+0x3c>
 8009c66:	0400      	lsls	r0, r0, #16
 8009c68:	2310      	movs	r3, #16
 8009c6a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009c6e:	bf04      	itt	eq
 8009c70:	0200      	lsleq	r0, r0, #8
 8009c72:	3308      	addeq	r3, #8
 8009c74:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009c78:	bf04      	itt	eq
 8009c7a:	0100      	lsleq	r0, r0, #4
 8009c7c:	3304      	addeq	r3, #4
 8009c7e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009c82:	bf04      	itt	eq
 8009c84:	0080      	lsleq	r0, r0, #2
 8009c86:	3302      	addeq	r3, #2
 8009c88:	2800      	cmp	r0, #0
 8009c8a:	db05      	blt.n	8009c98 <__hi0bits+0x38>
 8009c8c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009c90:	f103 0301 	add.w	r3, r3, #1
 8009c94:	bf08      	it	eq
 8009c96:	2320      	moveq	r3, #32
 8009c98:	4618      	mov	r0, r3
 8009c9a:	4770      	bx	lr
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	e7e4      	b.n	8009c6a <__hi0bits+0xa>

08009ca0 <__lo0bits>:
 8009ca0:	6803      	ldr	r3, [r0, #0]
 8009ca2:	f013 0207 	ands.w	r2, r3, #7
 8009ca6:	4601      	mov	r1, r0
 8009ca8:	d00b      	beq.n	8009cc2 <__lo0bits+0x22>
 8009caa:	07da      	lsls	r2, r3, #31
 8009cac:	d423      	bmi.n	8009cf6 <__lo0bits+0x56>
 8009cae:	0798      	lsls	r0, r3, #30
 8009cb0:	bf49      	itett	mi
 8009cb2:	085b      	lsrmi	r3, r3, #1
 8009cb4:	089b      	lsrpl	r3, r3, #2
 8009cb6:	2001      	movmi	r0, #1
 8009cb8:	600b      	strmi	r3, [r1, #0]
 8009cba:	bf5c      	itt	pl
 8009cbc:	600b      	strpl	r3, [r1, #0]
 8009cbe:	2002      	movpl	r0, #2
 8009cc0:	4770      	bx	lr
 8009cc2:	b298      	uxth	r0, r3
 8009cc4:	b9a8      	cbnz	r0, 8009cf2 <__lo0bits+0x52>
 8009cc6:	0c1b      	lsrs	r3, r3, #16
 8009cc8:	2010      	movs	r0, #16
 8009cca:	b2da      	uxtb	r2, r3
 8009ccc:	b90a      	cbnz	r2, 8009cd2 <__lo0bits+0x32>
 8009cce:	3008      	adds	r0, #8
 8009cd0:	0a1b      	lsrs	r3, r3, #8
 8009cd2:	071a      	lsls	r2, r3, #28
 8009cd4:	bf04      	itt	eq
 8009cd6:	091b      	lsreq	r3, r3, #4
 8009cd8:	3004      	addeq	r0, #4
 8009cda:	079a      	lsls	r2, r3, #30
 8009cdc:	bf04      	itt	eq
 8009cde:	089b      	lsreq	r3, r3, #2
 8009ce0:	3002      	addeq	r0, #2
 8009ce2:	07da      	lsls	r2, r3, #31
 8009ce4:	d403      	bmi.n	8009cee <__lo0bits+0x4e>
 8009ce6:	085b      	lsrs	r3, r3, #1
 8009ce8:	f100 0001 	add.w	r0, r0, #1
 8009cec:	d005      	beq.n	8009cfa <__lo0bits+0x5a>
 8009cee:	600b      	str	r3, [r1, #0]
 8009cf0:	4770      	bx	lr
 8009cf2:	4610      	mov	r0, r2
 8009cf4:	e7e9      	b.n	8009cca <__lo0bits+0x2a>
 8009cf6:	2000      	movs	r0, #0
 8009cf8:	4770      	bx	lr
 8009cfa:	2020      	movs	r0, #32
 8009cfc:	4770      	bx	lr
	...

08009d00 <__i2b>:
 8009d00:	b510      	push	{r4, lr}
 8009d02:	460c      	mov	r4, r1
 8009d04:	2101      	movs	r1, #1
 8009d06:	f7ff ff03 	bl	8009b10 <_Balloc>
 8009d0a:	4602      	mov	r2, r0
 8009d0c:	b928      	cbnz	r0, 8009d1a <__i2b+0x1a>
 8009d0e:	4b05      	ldr	r3, [pc, #20]	; (8009d24 <__i2b+0x24>)
 8009d10:	4805      	ldr	r0, [pc, #20]	; (8009d28 <__i2b+0x28>)
 8009d12:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009d16:	f000 fce1 	bl	800a6dc <__assert_func>
 8009d1a:	2301      	movs	r3, #1
 8009d1c:	6144      	str	r4, [r0, #20]
 8009d1e:	6103      	str	r3, [r0, #16]
 8009d20:	bd10      	pop	{r4, pc}
 8009d22:	bf00      	nop
 8009d24:	0800d00f 	.word	0x0800d00f
 8009d28:	0800d020 	.word	0x0800d020

08009d2c <__multiply>:
 8009d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d30:	4691      	mov	r9, r2
 8009d32:	690a      	ldr	r2, [r1, #16]
 8009d34:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009d38:	429a      	cmp	r2, r3
 8009d3a:	bfb8      	it	lt
 8009d3c:	460b      	movlt	r3, r1
 8009d3e:	460c      	mov	r4, r1
 8009d40:	bfbc      	itt	lt
 8009d42:	464c      	movlt	r4, r9
 8009d44:	4699      	movlt	r9, r3
 8009d46:	6927      	ldr	r7, [r4, #16]
 8009d48:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009d4c:	68a3      	ldr	r3, [r4, #8]
 8009d4e:	6861      	ldr	r1, [r4, #4]
 8009d50:	eb07 060a 	add.w	r6, r7, sl
 8009d54:	42b3      	cmp	r3, r6
 8009d56:	b085      	sub	sp, #20
 8009d58:	bfb8      	it	lt
 8009d5a:	3101      	addlt	r1, #1
 8009d5c:	f7ff fed8 	bl	8009b10 <_Balloc>
 8009d60:	b930      	cbnz	r0, 8009d70 <__multiply+0x44>
 8009d62:	4602      	mov	r2, r0
 8009d64:	4b44      	ldr	r3, [pc, #272]	; (8009e78 <__multiply+0x14c>)
 8009d66:	4845      	ldr	r0, [pc, #276]	; (8009e7c <__multiply+0x150>)
 8009d68:	f240 115d 	movw	r1, #349	; 0x15d
 8009d6c:	f000 fcb6 	bl	800a6dc <__assert_func>
 8009d70:	f100 0514 	add.w	r5, r0, #20
 8009d74:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009d78:	462b      	mov	r3, r5
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	4543      	cmp	r3, r8
 8009d7e:	d321      	bcc.n	8009dc4 <__multiply+0x98>
 8009d80:	f104 0314 	add.w	r3, r4, #20
 8009d84:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009d88:	f109 0314 	add.w	r3, r9, #20
 8009d8c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009d90:	9202      	str	r2, [sp, #8]
 8009d92:	1b3a      	subs	r2, r7, r4
 8009d94:	3a15      	subs	r2, #21
 8009d96:	f022 0203 	bic.w	r2, r2, #3
 8009d9a:	3204      	adds	r2, #4
 8009d9c:	f104 0115 	add.w	r1, r4, #21
 8009da0:	428f      	cmp	r7, r1
 8009da2:	bf38      	it	cc
 8009da4:	2204      	movcc	r2, #4
 8009da6:	9201      	str	r2, [sp, #4]
 8009da8:	9a02      	ldr	r2, [sp, #8]
 8009daa:	9303      	str	r3, [sp, #12]
 8009dac:	429a      	cmp	r2, r3
 8009dae:	d80c      	bhi.n	8009dca <__multiply+0x9e>
 8009db0:	2e00      	cmp	r6, #0
 8009db2:	dd03      	ble.n	8009dbc <__multiply+0x90>
 8009db4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d05a      	beq.n	8009e72 <__multiply+0x146>
 8009dbc:	6106      	str	r6, [r0, #16]
 8009dbe:	b005      	add	sp, #20
 8009dc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dc4:	f843 2b04 	str.w	r2, [r3], #4
 8009dc8:	e7d8      	b.n	8009d7c <__multiply+0x50>
 8009dca:	f8b3 a000 	ldrh.w	sl, [r3]
 8009dce:	f1ba 0f00 	cmp.w	sl, #0
 8009dd2:	d024      	beq.n	8009e1e <__multiply+0xf2>
 8009dd4:	f104 0e14 	add.w	lr, r4, #20
 8009dd8:	46a9      	mov	r9, r5
 8009dda:	f04f 0c00 	mov.w	ip, #0
 8009dde:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009de2:	f8d9 1000 	ldr.w	r1, [r9]
 8009de6:	fa1f fb82 	uxth.w	fp, r2
 8009dea:	b289      	uxth	r1, r1
 8009dec:	fb0a 110b 	mla	r1, sl, fp, r1
 8009df0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009df4:	f8d9 2000 	ldr.w	r2, [r9]
 8009df8:	4461      	add	r1, ip
 8009dfa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009dfe:	fb0a c20b 	mla	r2, sl, fp, ip
 8009e02:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009e06:	b289      	uxth	r1, r1
 8009e08:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009e0c:	4577      	cmp	r7, lr
 8009e0e:	f849 1b04 	str.w	r1, [r9], #4
 8009e12:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009e16:	d8e2      	bhi.n	8009dde <__multiply+0xb2>
 8009e18:	9a01      	ldr	r2, [sp, #4]
 8009e1a:	f845 c002 	str.w	ip, [r5, r2]
 8009e1e:	9a03      	ldr	r2, [sp, #12]
 8009e20:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009e24:	3304      	adds	r3, #4
 8009e26:	f1b9 0f00 	cmp.w	r9, #0
 8009e2a:	d020      	beq.n	8009e6e <__multiply+0x142>
 8009e2c:	6829      	ldr	r1, [r5, #0]
 8009e2e:	f104 0c14 	add.w	ip, r4, #20
 8009e32:	46ae      	mov	lr, r5
 8009e34:	f04f 0a00 	mov.w	sl, #0
 8009e38:	f8bc b000 	ldrh.w	fp, [ip]
 8009e3c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009e40:	fb09 220b 	mla	r2, r9, fp, r2
 8009e44:	4492      	add	sl, r2
 8009e46:	b289      	uxth	r1, r1
 8009e48:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009e4c:	f84e 1b04 	str.w	r1, [lr], #4
 8009e50:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009e54:	f8be 1000 	ldrh.w	r1, [lr]
 8009e58:	0c12      	lsrs	r2, r2, #16
 8009e5a:	fb09 1102 	mla	r1, r9, r2, r1
 8009e5e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009e62:	4567      	cmp	r7, ip
 8009e64:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009e68:	d8e6      	bhi.n	8009e38 <__multiply+0x10c>
 8009e6a:	9a01      	ldr	r2, [sp, #4]
 8009e6c:	50a9      	str	r1, [r5, r2]
 8009e6e:	3504      	adds	r5, #4
 8009e70:	e79a      	b.n	8009da8 <__multiply+0x7c>
 8009e72:	3e01      	subs	r6, #1
 8009e74:	e79c      	b.n	8009db0 <__multiply+0x84>
 8009e76:	bf00      	nop
 8009e78:	0800d00f 	.word	0x0800d00f
 8009e7c:	0800d020 	.word	0x0800d020

08009e80 <__pow5mult>:
 8009e80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e84:	4615      	mov	r5, r2
 8009e86:	f012 0203 	ands.w	r2, r2, #3
 8009e8a:	4606      	mov	r6, r0
 8009e8c:	460f      	mov	r7, r1
 8009e8e:	d007      	beq.n	8009ea0 <__pow5mult+0x20>
 8009e90:	4c25      	ldr	r4, [pc, #148]	; (8009f28 <__pow5mult+0xa8>)
 8009e92:	3a01      	subs	r2, #1
 8009e94:	2300      	movs	r3, #0
 8009e96:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009e9a:	f7ff fe9b 	bl	8009bd4 <__multadd>
 8009e9e:	4607      	mov	r7, r0
 8009ea0:	10ad      	asrs	r5, r5, #2
 8009ea2:	d03d      	beq.n	8009f20 <__pow5mult+0xa0>
 8009ea4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009ea6:	b97c      	cbnz	r4, 8009ec8 <__pow5mult+0x48>
 8009ea8:	2010      	movs	r0, #16
 8009eaa:	f7ff fe1b 	bl	8009ae4 <malloc>
 8009eae:	4602      	mov	r2, r0
 8009eb0:	6270      	str	r0, [r6, #36]	; 0x24
 8009eb2:	b928      	cbnz	r0, 8009ec0 <__pow5mult+0x40>
 8009eb4:	4b1d      	ldr	r3, [pc, #116]	; (8009f2c <__pow5mult+0xac>)
 8009eb6:	481e      	ldr	r0, [pc, #120]	; (8009f30 <__pow5mult+0xb0>)
 8009eb8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009ebc:	f000 fc0e 	bl	800a6dc <__assert_func>
 8009ec0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009ec4:	6004      	str	r4, [r0, #0]
 8009ec6:	60c4      	str	r4, [r0, #12]
 8009ec8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009ecc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009ed0:	b94c      	cbnz	r4, 8009ee6 <__pow5mult+0x66>
 8009ed2:	f240 2171 	movw	r1, #625	; 0x271
 8009ed6:	4630      	mov	r0, r6
 8009ed8:	f7ff ff12 	bl	8009d00 <__i2b>
 8009edc:	2300      	movs	r3, #0
 8009ede:	f8c8 0008 	str.w	r0, [r8, #8]
 8009ee2:	4604      	mov	r4, r0
 8009ee4:	6003      	str	r3, [r0, #0]
 8009ee6:	f04f 0900 	mov.w	r9, #0
 8009eea:	07eb      	lsls	r3, r5, #31
 8009eec:	d50a      	bpl.n	8009f04 <__pow5mult+0x84>
 8009eee:	4639      	mov	r1, r7
 8009ef0:	4622      	mov	r2, r4
 8009ef2:	4630      	mov	r0, r6
 8009ef4:	f7ff ff1a 	bl	8009d2c <__multiply>
 8009ef8:	4639      	mov	r1, r7
 8009efa:	4680      	mov	r8, r0
 8009efc:	4630      	mov	r0, r6
 8009efe:	f7ff fe47 	bl	8009b90 <_Bfree>
 8009f02:	4647      	mov	r7, r8
 8009f04:	106d      	asrs	r5, r5, #1
 8009f06:	d00b      	beq.n	8009f20 <__pow5mult+0xa0>
 8009f08:	6820      	ldr	r0, [r4, #0]
 8009f0a:	b938      	cbnz	r0, 8009f1c <__pow5mult+0x9c>
 8009f0c:	4622      	mov	r2, r4
 8009f0e:	4621      	mov	r1, r4
 8009f10:	4630      	mov	r0, r6
 8009f12:	f7ff ff0b 	bl	8009d2c <__multiply>
 8009f16:	6020      	str	r0, [r4, #0]
 8009f18:	f8c0 9000 	str.w	r9, [r0]
 8009f1c:	4604      	mov	r4, r0
 8009f1e:	e7e4      	b.n	8009eea <__pow5mult+0x6a>
 8009f20:	4638      	mov	r0, r7
 8009f22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f26:	bf00      	nop
 8009f28:	0800d170 	.word	0x0800d170
 8009f2c:	0800cf9d 	.word	0x0800cf9d
 8009f30:	0800d020 	.word	0x0800d020

08009f34 <__lshift>:
 8009f34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f38:	460c      	mov	r4, r1
 8009f3a:	6849      	ldr	r1, [r1, #4]
 8009f3c:	6923      	ldr	r3, [r4, #16]
 8009f3e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009f42:	68a3      	ldr	r3, [r4, #8]
 8009f44:	4607      	mov	r7, r0
 8009f46:	4691      	mov	r9, r2
 8009f48:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009f4c:	f108 0601 	add.w	r6, r8, #1
 8009f50:	42b3      	cmp	r3, r6
 8009f52:	db0b      	blt.n	8009f6c <__lshift+0x38>
 8009f54:	4638      	mov	r0, r7
 8009f56:	f7ff fddb 	bl	8009b10 <_Balloc>
 8009f5a:	4605      	mov	r5, r0
 8009f5c:	b948      	cbnz	r0, 8009f72 <__lshift+0x3e>
 8009f5e:	4602      	mov	r2, r0
 8009f60:	4b2a      	ldr	r3, [pc, #168]	; (800a00c <__lshift+0xd8>)
 8009f62:	482b      	ldr	r0, [pc, #172]	; (800a010 <__lshift+0xdc>)
 8009f64:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009f68:	f000 fbb8 	bl	800a6dc <__assert_func>
 8009f6c:	3101      	adds	r1, #1
 8009f6e:	005b      	lsls	r3, r3, #1
 8009f70:	e7ee      	b.n	8009f50 <__lshift+0x1c>
 8009f72:	2300      	movs	r3, #0
 8009f74:	f100 0114 	add.w	r1, r0, #20
 8009f78:	f100 0210 	add.w	r2, r0, #16
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	4553      	cmp	r3, sl
 8009f80:	db37      	blt.n	8009ff2 <__lshift+0xbe>
 8009f82:	6920      	ldr	r0, [r4, #16]
 8009f84:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009f88:	f104 0314 	add.w	r3, r4, #20
 8009f8c:	f019 091f 	ands.w	r9, r9, #31
 8009f90:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009f94:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009f98:	d02f      	beq.n	8009ffa <__lshift+0xc6>
 8009f9a:	f1c9 0e20 	rsb	lr, r9, #32
 8009f9e:	468a      	mov	sl, r1
 8009fa0:	f04f 0c00 	mov.w	ip, #0
 8009fa4:	681a      	ldr	r2, [r3, #0]
 8009fa6:	fa02 f209 	lsl.w	r2, r2, r9
 8009faa:	ea42 020c 	orr.w	r2, r2, ip
 8009fae:	f84a 2b04 	str.w	r2, [sl], #4
 8009fb2:	f853 2b04 	ldr.w	r2, [r3], #4
 8009fb6:	4298      	cmp	r0, r3
 8009fb8:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009fbc:	d8f2      	bhi.n	8009fa4 <__lshift+0x70>
 8009fbe:	1b03      	subs	r3, r0, r4
 8009fc0:	3b15      	subs	r3, #21
 8009fc2:	f023 0303 	bic.w	r3, r3, #3
 8009fc6:	3304      	adds	r3, #4
 8009fc8:	f104 0215 	add.w	r2, r4, #21
 8009fcc:	4290      	cmp	r0, r2
 8009fce:	bf38      	it	cc
 8009fd0:	2304      	movcc	r3, #4
 8009fd2:	f841 c003 	str.w	ip, [r1, r3]
 8009fd6:	f1bc 0f00 	cmp.w	ip, #0
 8009fda:	d001      	beq.n	8009fe0 <__lshift+0xac>
 8009fdc:	f108 0602 	add.w	r6, r8, #2
 8009fe0:	3e01      	subs	r6, #1
 8009fe2:	4638      	mov	r0, r7
 8009fe4:	612e      	str	r6, [r5, #16]
 8009fe6:	4621      	mov	r1, r4
 8009fe8:	f7ff fdd2 	bl	8009b90 <_Bfree>
 8009fec:	4628      	mov	r0, r5
 8009fee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ff2:	f842 0f04 	str.w	r0, [r2, #4]!
 8009ff6:	3301      	adds	r3, #1
 8009ff8:	e7c1      	b.n	8009f7e <__lshift+0x4a>
 8009ffa:	3904      	subs	r1, #4
 8009ffc:	f853 2b04 	ldr.w	r2, [r3], #4
 800a000:	f841 2f04 	str.w	r2, [r1, #4]!
 800a004:	4298      	cmp	r0, r3
 800a006:	d8f9      	bhi.n	8009ffc <__lshift+0xc8>
 800a008:	e7ea      	b.n	8009fe0 <__lshift+0xac>
 800a00a:	bf00      	nop
 800a00c:	0800d00f 	.word	0x0800d00f
 800a010:	0800d020 	.word	0x0800d020

0800a014 <__mcmp>:
 800a014:	b530      	push	{r4, r5, lr}
 800a016:	6902      	ldr	r2, [r0, #16]
 800a018:	690c      	ldr	r4, [r1, #16]
 800a01a:	1b12      	subs	r2, r2, r4
 800a01c:	d10e      	bne.n	800a03c <__mcmp+0x28>
 800a01e:	f100 0314 	add.w	r3, r0, #20
 800a022:	3114      	adds	r1, #20
 800a024:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a028:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a02c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a030:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a034:	42a5      	cmp	r5, r4
 800a036:	d003      	beq.n	800a040 <__mcmp+0x2c>
 800a038:	d305      	bcc.n	800a046 <__mcmp+0x32>
 800a03a:	2201      	movs	r2, #1
 800a03c:	4610      	mov	r0, r2
 800a03e:	bd30      	pop	{r4, r5, pc}
 800a040:	4283      	cmp	r3, r0
 800a042:	d3f3      	bcc.n	800a02c <__mcmp+0x18>
 800a044:	e7fa      	b.n	800a03c <__mcmp+0x28>
 800a046:	f04f 32ff 	mov.w	r2, #4294967295
 800a04a:	e7f7      	b.n	800a03c <__mcmp+0x28>

0800a04c <__mdiff>:
 800a04c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a050:	460c      	mov	r4, r1
 800a052:	4606      	mov	r6, r0
 800a054:	4611      	mov	r1, r2
 800a056:	4620      	mov	r0, r4
 800a058:	4690      	mov	r8, r2
 800a05a:	f7ff ffdb 	bl	800a014 <__mcmp>
 800a05e:	1e05      	subs	r5, r0, #0
 800a060:	d110      	bne.n	800a084 <__mdiff+0x38>
 800a062:	4629      	mov	r1, r5
 800a064:	4630      	mov	r0, r6
 800a066:	f7ff fd53 	bl	8009b10 <_Balloc>
 800a06a:	b930      	cbnz	r0, 800a07a <__mdiff+0x2e>
 800a06c:	4b3a      	ldr	r3, [pc, #232]	; (800a158 <__mdiff+0x10c>)
 800a06e:	4602      	mov	r2, r0
 800a070:	f240 2132 	movw	r1, #562	; 0x232
 800a074:	4839      	ldr	r0, [pc, #228]	; (800a15c <__mdiff+0x110>)
 800a076:	f000 fb31 	bl	800a6dc <__assert_func>
 800a07a:	2301      	movs	r3, #1
 800a07c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a080:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a084:	bfa4      	itt	ge
 800a086:	4643      	movge	r3, r8
 800a088:	46a0      	movge	r8, r4
 800a08a:	4630      	mov	r0, r6
 800a08c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a090:	bfa6      	itte	ge
 800a092:	461c      	movge	r4, r3
 800a094:	2500      	movge	r5, #0
 800a096:	2501      	movlt	r5, #1
 800a098:	f7ff fd3a 	bl	8009b10 <_Balloc>
 800a09c:	b920      	cbnz	r0, 800a0a8 <__mdiff+0x5c>
 800a09e:	4b2e      	ldr	r3, [pc, #184]	; (800a158 <__mdiff+0x10c>)
 800a0a0:	4602      	mov	r2, r0
 800a0a2:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a0a6:	e7e5      	b.n	800a074 <__mdiff+0x28>
 800a0a8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a0ac:	6926      	ldr	r6, [r4, #16]
 800a0ae:	60c5      	str	r5, [r0, #12]
 800a0b0:	f104 0914 	add.w	r9, r4, #20
 800a0b4:	f108 0514 	add.w	r5, r8, #20
 800a0b8:	f100 0e14 	add.w	lr, r0, #20
 800a0bc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a0c0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a0c4:	f108 0210 	add.w	r2, r8, #16
 800a0c8:	46f2      	mov	sl, lr
 800a0ca:	2100      	movs	r1, #0
 800a0cc:	f859 3b04 	ldr.w	r3, [r9], #4
 800a0d0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a0d4:	fa1f f883 	uxth.w	r8, r3
 800a0d8:	fa11 f18b 	uxtah	r1, r1, fp
 800a0dc:	0c1b      	lsrs	r3, r3, #16
 800a0de:	eba1 0808 	sub.w	r8, r1, r8
 800a0e2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a0e6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a0ea:	fa1f f888 	uxth.w	r8, r8
 800a0ee:	1419      	asrs	r1, r3, #16
 800a0f0:	454e      	cmp	r6, r9
 800a0f2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a0f6:	f84a 3b04 	str.w	r3, [sl], #4
 800a0fa:	d8e7      	bhi.n	800a0cc <__mdiff+0x80>
 800a0fc:	1b33      	subs	r3, r6, r4
 800a0fe:	3b15      	subs	r3, #21
 800a100:	f023 0303 	bic.w	r3, r3, #3
 800a104:	3304      	adds	r3, #4
 800a106:	3415      	adds	r4, #21
 800a108:	42a6      	cmp	r6, r4
 800a10a:	bf38      	it	cc
 800a10c:	2304      	movcc	r3, #4
 800a10e:	441d      	add	r5, r3
 800a110:	4473      	add	r3, lr
 800a112:	469e      	mov	lr, r3
 800a114:	462e      	mov	r6, r5
 800a116:	4566      	cmp	r6, ip
 800a118:	d30e      	bcc.n	800a138 <__mdiff+0xec>
 800a11a:	f10c 0203 	add.w	r2, ip, #3
 800a11e:	1b52      	subs	r2, r2, r5
 800a120:	f022 0203 	bic.w	r2, r2, #3
 800a124:	3d03      	subs	r5, #3
 800a126:	45ac      	cmp	ip, r5
 800a128:	bf38      	it	cc
 800a12a:	2200      	movcc	r2, #0
 800a12c:	441a      	add	r2, r3
 800a12e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a132:	b17b      	cbz	r3, 800a154 <__mdiff+0x108>
 800a134:	6107      	str	r7, [r0, #16]
 800a136:	e7a3      	b.n	800a080 <__mdiff+0x34>
 800a138:	f856 8b04 	ldr.w	r8, [r6], #4
 800a13c:	fa11 f288 	uxtah	r2, r1, r8
 800a140:	1414      	asrs	r4, r2, #16
 800a142:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a146:	b292      	uxth	r2, r2
 800a148:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a14c:	f84e 2b04 	str.w	r2, [lr], #4
 800a150:	1421      	asrs	r1, r4, #16
 800a152:	e7e0      	b.n	800a116 <__mdiff+0xca>
 800a154:	3f01      	subs	r7, #1
 800a156:	e7ea      	b.n	800a12e <__mdiff+0xe2>
 800a158:	0800d00f 	.word	0x0800d00f
 800a15c:	0800d020 	.word	0x0800d020

0800a160 <__d2b>:
 800a160:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a164:	4689      	mov	r9, r1
 800a166:	2101      	movs	r1, #1
 800a168:	ec57 6b10 	vmov	r6, r7, d0
 800a16c:	4690      	mov	r8, r2
 800a16e:	f7ff fccf 	bl	8009b10 <_Balloc>
 800a172:	4604      	mov	r4, r0
 800a174:	b930      	cbnz	r0, 800a184 <__d2b+0x24>
 800a176:	4602      	mov	r2, r0
 800a178:	4b25      	ldr	r3, [pc, #148]	; (800a210 <__d2b+0xb0>)
 800a17a:	4826      	ldr	r0, [pc, #152]	; (800a214 <__d2b+0xb4>)
 800a17c:	f240 310a 	movw	r1, #778	; 0x30a
 800a180:	f000 faac 	bl	800a6dc <__assert_func>
 800a184:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a188:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a18c:	bb35      	cbnz	r5, 800a1dc <__d2b+0x7c>
 800a18e:	2e00      	cmp	r6, #0
 800a190:	9301      	str	r3, [sp, #4]
 800a192:	d028      	beq.n	800a1e6 <__d2b+0x86>
 800a194:	4668      	mov	r0, sp
 800a196:	9600      	str	r6, [sp, #0]
 800a198:	f7ff fd82 	bl	8009ca0 <__lo0bits>
 800a19c:	9900      	ldr	r1, [sp, #0]
 800a19e:	b300      	cbz	r0, 800a1e2 <__d2b+0x82>
 800a1a0:	9a01      	ldr	r2, [sp, #4]
 800a1a2:	f1c0 0320 	rsb	r3, r0, #32
 800a1a6:	fa02 f303 	lsl.w	r3, r2, r3
 800a1aa:	430b      	orrs	r3, r1
 800a1ac:	40c2      	lsrs	r2, r0
 800a1ae:	6163      	str	r3, [r4, #20]
 800a1b0:	9201      	str	r2, [sp, #4]
 800a1b2:	9b01      	ldr	r3, [sp, #4]
 800a1b4:	61a3      	str	r3, [r4, #24]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	bf14      	ite	ne
 800a1ba:	2202      	movne	r2, #2
 800a1bc:	2201      	moveq	r2, #1
 800a1be:	6122      	str	r2, [r4, #16]
 800a1c0:	b1d5      	cbz	r5, 800a1f8 <__d2b+0x98>
 800a1c2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a1c6:	4405      	add	r5, r0
 800a1c8:	f8c9 5000 	str.w	r5, [r9]
 800a1cc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a1d0:	f8c8 0000 	str.w	r0, [r8]
 800a1d4:	4620      	mov	r0, r4
 800a1d6:	b003      	add	sp, #12
 800a1d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a1dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a1e0:	e7d5      	b.n	800a18e <__d2b+0x2e>
 800a1e2:	6161      	str	r1, [r4, #20]
 800a1e4:	e7e5      	b.n	800a1b2 <__d2b+0x52>
 800a1e6:	a801      	add	r0, sp, #4
 800a1e8:	f7ff fd5a 	bl	8009ca0 <__lo0bits>
 800a1ec:	9b01      	ldr	r3, [sp, #4]
 800a1ee:	6163      	str	r3, [r4, #20]
 800a1f0:	2201      	movs	r2, #1
 800a1f2:	6122      	str	r2, [r4, #16]
 800a1f4:	3020      	adds	r0, #32
 800a1f6:	e7e3      	b.n	800a1c0 <__d2b+0x60>
 800a1f8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a1fc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a200:	f8c9 0000 	str.w	r0, [r9]
 800a204:	6918      	ldr	r0, [r3, #16]
 800a206:	f7ff fd2b 	bl	8009c60 <__hi0bits>
 800a20a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a20e:	e7df      	b.n	800a1d0 <__d2b+0x70>
 800a210:	0800d00f 	.word	0x0800d00f
 800a214:	0800d020 	.word	0x0800d020

0800a218 <_calloc_r>:
 800a218:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a21a:	fba1 2402 	umull	r2, r4, r1, r2
 800a21e:	b94c      	cbnz	r4, 800a234 <_calloc_r+0x1c>
 800a220:	4611      	mov	r1, r2
 800a222:	9201      	str	r2, [sp, #4]
 800a224:	f000 f87a 	bl	800a31c <_malloc_r>
 800a228:	9a01      	ldr	r2, [sp, #4]
 800a22a:	4605      	mov	r5, r0
 800a22c:	b930      	cbnz	r0, 800a23c <_calloc_r+0x24>
 800a22e:	4628      	mov	r0, r5
 800a230:	b003      	add	sp, #12
 800a232:	bd30      	pop	{r4, r5, pc}
 800a234:	220c      	movs	r2, #12
 800a236:	6002      	str	r2, [r0, #0]
 800a238:	2500      	movs	r5, #0
 800a23a:	e7f8      	b.n	800a22e <_calloc_r+0x16>
 800a23c:	4621      	mov	r1, r4
 800a23e:	f7fe f93f 	bl	80084c0 <memset>
 800a242:	e7f4      	b.n	800a22e <_calloc_r+0x16>

0800a244 <_free_r>:
 800a244:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a246:	2900      	cmp	r1, #0
 800a248:	d044      	beq.n	800a2d4 <_free_r+0x90>
 800a24a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a24e:	9001      	str	r0, [sp, #4]
 800a250:	2b00      	cmp	r3, #0
 800a252:	f1a1 0404 	sub.w	r4, r1, #4
 800a256:	bfb8      	it	lt
 800a258:	18e4      	addlt	r4, r4, r3
 800a25a:	f000 fa9b 	bl	800a794 <__malloc_lock>
 800a25e:	4a1e      	ldr	r2, [pc, #120]	; (800a2d8 <_free_r+0x94>)
 800a260:	9801      	ldr	r0, [sp, #4]
 800a262:	6813      	ldr	r3, [r2, #0]
 800a264:	b933      	cbnz	r3, 800a274 <_free_r+0x30>
 800a266:	6063      	str	r3, [r4, #4]
 800a268:	6014      	str	r4, [r2, #0]
 800a26a:	b003      	add	sp, #12
 800a26c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a270:	f000 ba96 	b.w	800a7a0 <__malloc_unlock>
 800a274:	42a3      	cmp	r3, r4
 800a276:	d908      	bls.n	800a28a <_free_r+0x46>
 800a278:	6825      	ldr	r5, [r4, #0]
 800a27a:	1961      	adds	r1, r4, r5
 800a27c:	428b      	cmp	r3, r1
 800a27e:	bf01      	itttt	eq
 800a280:	6819      	ldreq	r1, [r3, #0]
 800a282:	685b      	ldreq	r3, [r3, #4]
 800a284:	1949      	addeq	r1, r1, r5
 800a286:	6021      	streq	r1, [r4, #0]
 800a288:	e7ed      	b.n	800a266 <_free_r+0x22>
 800a28a:	461a      	mov	r2, r3
 800a28c:	685b      	ldr	r3, [r3, #4]
 800a28e:	b10b      	cbz	r3, 800a294 <_free_r+0x50>
 800a290:	42a3      	cmp	r3, r4
 800a292:	d9fa      	bls.n	800a28a <_free_r+0x46>
 800a294:	6811      	ldr	r1, [r2, #0]
 800a296:	1855      	adds	r5, r2, r1
 800a298:	42a5      	cmp	r5, r4
 800a29a:	d10b      	bne.n	800a2b4 <_free_r+0x70>
 800a29c:	6824      	ldr	r4, [r4, #0]
 800a29e:	4421      	add	r1, r4
 800a2a0:	1854      	adds	r4, r2, r1
 800a2a2:	42a3      	cmp	r3, r4
 800a2a4:	6011      	str	r1, [r2, #0]
 800a2a6:	d1e0      	bne.n	800a26a <_free_r+0x26>
 800a2a8:	681c      	ldr	r4, [r3, #0]
 800a2aa:	685b      	ldr	r3, [r3, #4]
 800a2ac:	6053      	str	r3, [r2, #4]
 800a2ae:	4421      	add	r1, r4
 800a2b0:	6011      	str	r1, [r2, #0]
 800a2b2:	e7da      	b.n	800a26a <_free_r+0x26>
 800a2b4:	d902      	bls.n	800a2bc <_free_r+0x78>
 800a2b6:	230c      	movs	r3, #12
 800a2b8:	6003      	str	r3, [r0, #0]
 800a2ba:	e7d6      	b.n	800a26a <_free_r+0x26>
 800a2bc:	6825      	ldr	r5, [r4, #0]
 800a2be:	1961      	adds	r1, r4, r5
 800a2c0:	428b      	cmp	r3, r1
 800a2c2:	bf04      	itt	eq
 800a2c4:	6819      	ldreq	r1, [r3, #0]
 800a2c6:	685b      	ldreq	r3, [r3, #4]
 800a2c8:	6063      	str	r3, [r4, #4]
 800a2ca:	bf04      	itt	eq
 800a2cc:	1949      	addeq	r1, r1, r5
 800a2ce:	6021      	streq	r1, [r4, #0]
 800a2d0:	6054      	str	r4, [r2, #4]
 800a2d2:	e7ca      	b.n	800a26a <_free_r+0x26>
 800a2d4:	b003      	add	sp, #12
 800a2d6:	bd30      	pop	{r4, r5, pc}
 800a2d8:	20000494 	.word	0x20000494

0800a2dc <sbrk_aligned>:
 800a2dc:	b570      	push	{r4, r5, r6, lr}
 800a2de:	4e0e      	ldr	r6, [pc, #56]	; (800a318 <sbrk_aligned+0x3c>)
 800a2e0:	460c      	mov	r4, r1
 800a2e2:	6831      	ldr	r1, [r6, #0]
 800a2e4:	4605      	mov	r5, r0
 800a2e6:	b911      	cbnz	r1, 800a2ee <sbrk_aligned+0x12>
 800a2e8:	f000 f9e8 	bl	800a6bc <_sbrk_r>
 800a2ec:	6030      	str	r0, [r6, #0]
 800a2ee:	4621      	mov	r1, r4
 800a2f0:	4628      	mov	r0, r5
 800a2f2:	f000 f9e3 	bl	800a6bc <_sbrk_r>
 800a2f6:	1c43      	adds	r3, r0, #1
 800a2f8:	d00a      	beq.n	800a310 <sbrk_aligned+0x34>
 800a2fa:	1cc4      	adds	r4, r0, #3
 800a2fc:	f024 0403 	bic.w	r4, r4, #3
 800a300:	42a0      	cmp	r0, r4
 800a302:	d007      	beq.n	800a314 <sbrk_aligned+0x38>
 800a304:	1a21      	subs	r1, r4, r0
 800a306:	4628      	mov	r0, r5
 800a308:	f000 f9d8 	bl	800a6bc <_sbrk_r>
 800a30c:	3001      	adds	r0, #1
 800a30e:	d101      	bne.n	800a314 <sbrk_aligned+0x38>
 800a310:	f04f 34ff 	mov.w	r4, #4294967295
 800a314:	4620      	mov	r0, r4
 800a316:	bd70      	pop	{r4, r5, r6, pc}
 800a318:	20000498 	.word	0x20000498

0800a31c <_malloc_r>:
 800a31c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a320:	1ccd      	adds	r5, r1, #3
 800a322:	f025 0503 	bic.w	r5, r5, #3
 800a326:	3508      	adds	r5, #8
 800a328:	2d0c      	cmp	r5, #12
 800a32a:	bf38      	it	cc
 800a32c:	250c      	movcc	r5, #12
 800a32e:	2d00      	cmp	r5, #0
 800a330:	4607      	mov	r7, r0
 800a332:	db01      	blt.n	800a338 <_malloc_r+0x1c>
 800a334:	42a9      	cmp	r1, r5
 800a336:	d905      	bls.n	800a344 <_malloc_r+0x28>
 800a338:	230c      	movs	r3, #12
 800a33a:	603b      	str	r3, [r7, #0]
 800a33c:	2600      	movs	r6, #0
 800a33e:	4630      	mov	r0, r6
 800a340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a344:	4e2e      	ldr	r6, [pc, #184]	; (800a400 <_malloc_r+0xe4>)
 800a346:	f000 fa25 	bl	800a794 <__malloc_lock>
 800a34a:	6833      	ldr	r3, [r6, #0]
 800a34c:	461c      	mov	r4, r3
 800a34e:	bb34      	cbnz	r4, 800a39e <_malloc_r+0x82>
 800a350:	4629      	mov	r1, r5
 800a352:	4638      	mov	r0, r7
 800a354:	f7ff ffc2 	bl	800a2dc <sbrk_aligned>
 800a358:	1c43      	adds	r3, r0, #1
 800a35a:	4604      	mov	r4, r0
 800a35c:	d14d      	bne.n	800a3fa <_malloc_r+0xde>
 800a35e:	6834      	ldr	r4, [r6, #0]
 800a360:	4626      	mov	r6, r4
 800a362:	2e00      	cmp	r6, #0
 800a364:	d140      	bne.n	800a3e8 <_malloc_r+0xcc>
 800a366:	6823      	ldr	r3, [r4, #0]
 800a368:	4631      	mov	r1, r6
 800a36a:	4638      	mov	r0, r7
 800a36c:	eb04 0803 	add.w	r8, r4, r3
 800a370:	f000 f9a4 	bl	800a6bc <_sbrk_r>
 800a374:	4580      	cmp	r8, r0
 800a376:	d13a      	bne.n	800a3ee <_malloc_r+0xd2>
 800a378:	6821      	ldr	r1, [r4, #0]
 800a37a:	3503      	adds	r5, #3
 800a37c:	1a6d      	subs	r5, r5, r1
 800a37e:	f025 0503 	bic.w	r5, r5, #3
 800a382:	3508      	adds	r5, #8
 800a384:	2d0c      	cmp	r5, #12
 800a386:	bf38      	it	cc
 800a388:	250c      	movcc	r5, #12
 800a38a:	4629      	mov	r1, r5
 800a38c:	4638      	mov	r0, r7
 800a38e:	f7ff ffa5 	bl	800a2dc <sbrk_aligned>
 800a392:	3001      	adds	r0, #1
 800a394:	d02b      	beq.n	800a3ee <_malloc_r+0xd2>
 800a396:	6823      	ldr	r3, [r4, #0]
 800a398:	442b      	add	r3, r5
 800a39a:	6023      	str	r3, [r4, #0]
 800a39c:	e00e      	b.n	800a3bc <_malloc_r+0xa0>
 800a39e:	6822      	ldr	r2, [r4, #0]
 800a3a0:	1b52      	subs	r2, r2, r5
 800a3a2:	d41e      	bmi.n	800a3e2 <_malloc_r+0xc6>
 800a3a4:	2a0b      	cmp	r2, #11
 800a3a6:	d916      	bls.n	800a3d6 <_malloc_r+0xba>
 800a3a8:	1961      	adds	r1, r4, r5
 800a3aa:	42a3      	cmp	r3, r4
 800a3ac:	6025      	str	r5, [r4, #0]
 800a3ae:	bf18      	it	ne
 800a3b0:	6059      	strne	r1, [r3, #4]
 800a3b2:	6863      	ldr	r3, [r4, #4]
 800a3b4:	bf08      	it	eq
 800a3b6:	6031      	streq	r1, [r6, #0]
 800a3b8:	5162      	str	r2, [r4, r5]
 800a3ba:	604b      	str	r3, [r1, #4]
 800a3bc:	4638      	mov	r0, r7
 800a3be:	f104 060b 	add.w	r6, r4, #11
 800a3c2:	f000 f9ed 	bl	800a7a0 <__malloc_unlock>
 800a3c6:	f026 0607 	bic.w	r6, r6, #7
 800a3ca:	1d23      	adds	r3, r4, #4
 800a3cc:	1af2      	subs	r2, r6, r3
 800a3ce:	d0b6      	beq.n	800a33e <_malloc_r+0x22>
 800a3d0:	1b9b      	subs	r3, r3, r6
 800a3d2:	50a3      	str	r3, [r4, r2]
 800a3d4:	e7b3      	b.n	800a33e <_malloc_r+0x22>
 800a3d6:	6862      	ldr	r2, [r4, #4]
 800a3d8:	42a3      	cmp	r3, r4
 800a3da:	bf0c      	ite	eq
 800a3dc:	6032      	streq	r2, [r6, #0]
 800a3de:	605a      	strne	r2, [r3, #4]
 800a3e0:	e7ec      	b.n	800a3bc <_malloc_r+0xa0>
 800a3e2:	4623      	mov	r3, r4
 800a3e4:	6864      	ldr	r4, [r4, #4]
 800a3e6:	e7b2      	b.n	800a34e <_malloc_r+0x32>
 800a3e8:	4634      	mov	r4, r6
 800a3ea:	6876      	ldr	r6, [r6, #4]
 800a3ec:	e7b9      	b.n	800a362 <_malloc_r+0x46>
 800a3ee:	230c      	movs	r3, #12
 800a3f0:	603b      	str	r3, [r7, #0]
 800a3f2:	4638      	mov	r0, r7
 800a3f4:	f000 f9d4 	bl	800a7a0 <__malloc_unlock>
 800a3f8:	e7a1      	b.n	800a33e <_malloc_r+0x22>
 800a3fa:	6025      	str	r5, [r4, #0]
 800a3fc:	e7de      	b.n	800a3bc <_malloc_r+0xa0>
 800a3fe:	bf00      	nop
 800a400:	20000494 	.word	0x20000494

0800a404 <__ssputs_r>:
 800a404:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a408:	688e      	ldr	r6, [r1, #8]
 800a40a:	429e      	cmp	r6, r3
 800a40c:	4682      	mov	sl, r0
 800a40e:	460c      	mov	r4, r1
 800a410:	4690      	mov	r8, r2
 800a412:	461f      	mov	r7, r3
 800a414:	d838      	bhi.n	800a488 <__ssputs_r+0x84>
 800a416:	898a      	ldrh	r2, [r1, #12]
 800a418:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a41c:	d032      	beq.n	800a484 <__ssputs_r+0x80>
 800a41e:	6825      	ldr	r5, [r4, #0]
 800a420:	6909      	ldr	r1, [r1, #16]
 800a422:	eba5 0901 	sub.w	r9, r5, r1
 800a426:	6965      	ldr	r5, [r4, #20]
 800a428:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a42c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a430:	3301      	adds	r3, #1
 800a432:	444b      	add	r3, r9
 800a434:	106d      	asrs	r5, r5, #1
 800a436:	429d      	cmp	r5, r3
 800a438:	bf38      	it	cc
 800a43a:	461d      	movcc	r5, r3
 800a43c:	0553      	lsls	r3, r2, #21
 800a43e:	d531      	bpl.n	800a4a4 <__ssputs_r+0xa0>
 800a440:	4629      	mov	r1, r5
 800a442:	f7ff ff6b 	bl	800a31c <_malloc_r>
 800a446:	4606      	mov	r6, r0
 800a448:	b950      	cbnz	r0, 800a460 <__ssputs_r+0x5c>
 800a44a:	230c      	movs	r3, #12
 800a44c:	f8ca 3000 	str.w	r3, [sl]
 800a450:	89a3      	ldrh	r3, [r4, #12]
 800a452:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a456:	81a3      	strh	r3, [r4, #12]
 800a458:	f04f 30ff 	mov.w	r0, #4294967295
 800a45c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a460:	6921      	ldr	r1, [r4, #16]
 800a462:	464a      	mov	r2, r9
 800a464:	f7ff fb46 	bl	8009af4 <memcpy>
 800a468:	89a3      	ldrh	r3, [r4, #12]
 800a46a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a46e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a472:	81a3      	strh	r3, [r4, #12]
 800a474:	6126      	str	r6, [r4, #16]
 800a476:	6165      	str	r5, [r4, #20]
 800a478:	444e      	add	r6, r9
 800a47a:	eba5 0509 	sub.w	r5, r5, r9
 800a47e:	6026      	str	r6, [r4, #0]
 800a480:	60a5      	str	r5, [r4, #8]
 800a482:	463e      	mov	r6, r7
 800a484:	42be      	cmp	r6, r7
 800a486:	d900      	bls.n	800a48a <__ssputs_r+0x86>
 800a488:	463e      	mov	r6, r7
 800a48a:	6820      	ldr	r0, [r4, #0]
 800a48c:	4632      	mov	r2, r6
 800a48e:	4641      	mov	r1, r8
 800a490:	f000 f966 	bl	800a760 <memmove>
 800a494:	68a3      	ldr	r3, [r4, #8]
 800a496:	1b9b      	subs	r3, r3, r6
 800a498:	60a3      	str	r3, [r4, #8]
 800a49a:	6823      	ldr	r3, [r4, #0]
 800a49c:	4433      	add	r3, r6
 800a49e:	6023      	str	r3, [r4, #0]
 800a4a0:	2000      	movs	r0, #0
 800a4a2:	e7db      	b.n	800a45c <__ssputs_r+0x58>
 800a4a4:	462a      	mov	r2, r5
 800a4a6:	f000 f981 	bl	800a7ac <_realloc_r>
 800a4aa:	4606      	mov	r6, r0
 800a4ac:	2800      	cmp	r0, #0
 800a4ae:	d1e1      	bne.n	800a474 <__ssputs_r+0x70>
 800a4b0:	6921      	ldr	r1, [r4, #16]
 800a4b2:	4650      	mov	r0, sl
 800a4b4:	f7ff fec6 	bl	800a244 <_free_r>
 800a4b8:	e7c7      	b.n	800a44a <__ssputs_r+0x46>
	...

0800a4bc <_svfiprintf_r>:
 800a4bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4c0:	4698      	mov	r8, r3
 800a4c2:	898b      	ldrh	r3, [r1, #12]
 800a4c4:	061b      	lsls	r3, r3, #24
 800a4c6:	b09d      	sub	sp, #116	; 0x74
 800a4c8:	4607      	mov	r7, r0
 800a4ca:	460d      	mov	r5, r1
 800a4cc:	4614      	mov	r4, r2
 800a4ce:	d50e      	bpl.n	800a4ee <_svfiprintf_r+0x32>
 800a4d0:	690b      	ldr	r3, [r1, #16]
 800a4d2:	b963      	cbnz	r3, 800a4ee <_svfiprintf_r+0x32>
 800a4d4:	2140      	movs	r1, #64	; 0x40
 800a4d6:	f7ff ff21 	bl	800a31c <_malloc_r>
 800a4da:	6028      	str	r0, [r5, #0]
 800a4dc:	6128      	str	r0, [r5, #16]
 800a4de:	b920      	cbnz	r0, 800a4ea <_svfiprintf_r+0x2e>
 800a4e0:	230c      	movs	r3, #12
 800a4e2:	603b      	str	r3, [r7, #0]
 800a4e4:	f04f 30ff 	mov.w	r0, #4294967295
 800a4e8:	e0d1      	b.n	800a68e <_svfiprintf_r+0x1d2>
 800a4ea:	2340      	movs	r3, #64	; 0x40
 800a4ec:	616b      	str	r3, [r5, #20]
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	9309      	str	r3, [sp, #36]	; 0x24
 800a4f2:	2320      	movs	r3, #32
 800a4f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a4f8:	f8cd 800c 	str.w	r8, [sp, #12]
 800a4fc:	2330      	movs	r3, #48	; 0x30
 800a4fe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a6a8 <_svfiprintf_r+0x1ec>
 800a502:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a506:	f04f 0901 	mov.w	r9, #1
 800a50a:	4623      	mov	r3, r4
 800a50c:	469a      	mov	sl, r3
 800a50e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a512:	b10a      	cbz	r2, 800a518 <_svfiprintf_r+0x5c>
 800a514:	2a25      	cmp	r2, #37	; 0x25
 800a516:	d1f9      	bne.n	800a50c <_svfiprintf_r+0x50>
 800a518:	ebba 0b04 	subs.w	fp, sl, r4
 800a51c:	d00b      	beq.n	800a536 <_svfiprintf_r+0x7a>
 800a51e:	465b      	mov	r3, fp
 800a520:	4622      	mov	r2, r4
 800a522:	4629      	mov	r1, r5
 800a524:	4638      	mov	r0, r7
 800a526:	f7ff ff6d 	bl	800a404 <__ssputs_r>
 800a52a:	3001      	adds	r0, #1
 800a52c:	f000 80aa 	beq.w	800a684 <_svfiprintf_r+0x1c8>
 800a530:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a532:	445a      	add	r2, fp
 800a534:	9209      	str	r2, [sp, #36]	; 0x24
 800a536:	f89a 3000 	ldrb.w	r3, [sl]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	f000 80a2 	beq.w	800a684 <_svfiprintf_r+0x1c8>
 800a540:	2300      	movs	r3, #0
 800a542:	f04f 32ff 	mov.w	r2, #4294967295
 800a546:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a54a:	f10a 0a01 	add.w	sl, sl, #1
 800a54e:	9304      	str	r3, [sp, #16]
 800a550:	9307      	str	r3, [sp, #28]
 800a552:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a556:	931a      	str	r3, [sp, #104]	; 0x68
 800a558:	4654      	mov	r4, sl
 800a55a:	2205      	movs	r2, #5
 800a55c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a560:	4851      	ldr	r0, [pc, #324]	; (800a6a8 <_svfiprintf_r+0x1ec>)
 800a562:	f7f5 fe45 	bl	80001f0 <memchr>
 800a566:	9a04      	ldr	r2, [sp, #16]
 800a568:	b9d8      	cbnz	r0, 800a5a2 <_svfiprintf_r+0xe6>
 800a56a:	06d0      	lsls	r0, r2, #27
 800a56c:	bf44      	itt	mi
 800a56e:	2320      	movmi	r3, #32
 800a570:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a574:	0711      	lsls	r1, r2, #28
 800a576:	bf44      	itt	mi
 800a578:	232b      	movmi	r3, #43	; 0x2b
 800a57a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a57e:	f89a 3000 	ldrb.w	r3, [sl]
 800a582:	2b2a      	cmp	r3, #42	; 0x2a
 800a584:	d015      	beq.n	800a5b2 <_svfiprintf_r+0xf6>
 800a586:	9a07      	ldr	r2, [sp, #28]
 800a588:	4654      	mov	r4, sl
 800a58a:	2000      	movs	r0, #0
 800a58c:	f04f 0c0a 	mov.w	ip, #10
 800a590:	4621      	mov	r1, r4
 800a592:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a596:	3b30      	subs	r3, #48	; 0x30
 800a598:	2b09      	cmp	r3, #9
 800a59a:	d94e      	bls.n	800a63a <_svfiprintf_r+0x17e>
 800a59c:	b1b0      	cbz	r0, 800a5cc <_svfiprintf_r+0x110>
 800a59e:	9207      	str	r2, [sp, #28]
 800a5a0:	e014      	b.n	800a5cc <_svfiprintf_r+0x110>
 800a5a2:	eba0 0308 	sub.w	r3, r0, r8
 800a5a6:	fa09 f303 	lsl.w	r3, r9, r3
 800a5aa:	4313      	orrs	r3, r2
 800a5ac:	9304      	str	r3, [sp, #16]
 800a5ae:	46a2      	mov	sl, r4
 800a5b0:	e7d2      	b.n	800a558 <_svfiprintf_r+0x9c>
 800a5b2:	9b03      	ldr	r3, [sp, #12]
 800a5b4:	1d19      	adds	r1, r3, #4
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	9103      	str	r1, [sp, #12]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	bfbb      	ittet	lt
 800a5be:	425b      	neglt	r3, r3
 800a5c0:	f042 0202 	orrlt.w	r2, r2, #2
 800a5c4:	9307      	strge	r3, [sp, #28]
 800a5c6:	9307      	strlt	r3, [sp, #28]
 800a5c8:	bfb8      	it	lt
 800a5ca:	9204      	strlt	r2, [sp, #16]
 800a5cc:	7823      	ldrb	r3, [r4, #0]
 800a5ce:	2b2e      	cmp	r3, #46	; 0x2e
 800a5d0:	d10c      	bne.n	800a5ec <_svfiprintf_r+0x130>
 800a5d2:	7863      	ldrb	r3, [r4, #1]
 800a5d4:	2b2a      	cmp	r3, #42	; 0x2a
 800a5d6:	d135      	bne.n	800a644 <_svfiprintf_r+0x188>
 800a5d8:	9b03      	ldr	r3, [sp, #12]
 800a5da:	1d1a      	adds	r2, r3, #4
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	9203      	str	r2, [sp, #12]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	bfb8      	it	lt
 800a5e4:	f04f 33ff 	movlt.w	r3, #4294967295
 800a5e8:	3402      	adds	r4, #2
 800a5ea:	9305      	str	r3, [sp, #20]
 800a5ec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a6b8 <_svfiprintf_r+0x1fc>
 800a5f0:	7821      	ldrb	r1, [r4, #0]
 800a5f2:	2203      	movs	r2, #3
 800a5f4:	4650      	mov	r0, sl
 800a5f6:	f7f5 fdfb 	bl	80001f0 <memchr>
 800a5fa:	b140      	cbz	r0, 800a60e <_svfiprintf_r+0x152>
 800a5fc:	2340      	movs	r3, #64	; 0x40
 800a5fe:	eba0 000a 	sub.w	r0, r0, sl
 800a602:	fa03 f000 	lsl.w	r0, r3, r0
 800a606:	9b04      	ldr	r3, [sp, #16]
 800a608:	4303      	orrs	r3, r0
 800a60a:	3401      	adds	r4, #1
 800a60c:	9304      	str	r3, [sp, #16]
 800a60e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a612:	4826      	ldr	r0, [pc, #152]	; (800a6ac <_svfiprintf_r+0x1f0>)
 800a614:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a618:	2206      	movs	r2, #6
 800a61a:	f7f5 fde9 	bl	80001f0 <memchr>
 800a61e:	2800      	cmp	r0, #0
 800a620:	d038      	beq.n	800a694 <_svfiprintf_r+0x1d8>
 800a622:	4b23      	ldr	r3, [pc, #140]	; (800a6b0 <_svfiprintf_r+0x1f4>)
 800a624:	bb1b      	cbnz	r3, 800a66e <_svfiprintf_r+0x1b2>
 800a626:	9b03      	ldr	r3, [sp, #12]
 800a628:	3307      	adds	r3, #7
 800a62a:	f023 0307 	bic.w	r3, r3, #7
 800a62e:	3308      	adds	r3, #8
 800a630:	9303      	str	r3, [sp, #12]
 800a632:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a634:	4433      	add	r3, r6
 800a636:	9309      	str	r3, [sp, #36]	; 0x24
 800a638:	e767      	b.n	800a50a <_svfiprintf_r+0x4e>
 800a63a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a63e:	460c      	mov	r4, r1
 800a640:	2001      	movs	r0, #1
 800a642:	e7a5      	b.n	800a590 <_svfiprintf_r+0xd4>
 800a644:	2300      	movs	r3, #0
 800a646:	3401      	adds	r4, #1
 800a648:	9305      	str	r3, [sp, #20]
 800a64a:	4619      	mov	r1, r3
 800a64c:	f04f 0c0a 	mov.w	ip, #10
 800a650:	4620      	mov	r0, r4
 800a652:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a656:	3a30      	subs	r2, #48	; 0x30
 800a658:	2a09      	cmp	r2, #9
 800a65a:	d903      	bls.n	800a664 <_svfiprintf_r+0x1a8>
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d0c5      	beq.n	800a5ec <_svfiprintf_r+0x130>
 800a660:	9105      	str	r1, [sp, #20]
 800a662:	e7c3      	b.n	800a5ec <_svfiprintf_r+0x130>
 800a664:	fb0c 2101 	mla	r1, ip, r1, r2
 800a668:	4604      	mov	r4, r0
 800a66a:	2301      	movs	r3, #1
 800a66c:	e7f0      	b.n	800a650 <_svfiprintf_r+0x194>
 800a66e:	ab03      	add	r3, sp, #12
 800a670:	9300      	str	r3, [sp, #0]
 800a672:	462a      	mov	r2, r5
 800a674:	4b0f      	ldr	r3, [pc, #60]	; (800a6b4 <_svfiprintf_r+0x1f8>)
 800a676:	a904      	add	r1, sp, #16
 800a678:	4638      	mov	r0, r7
 800a67a:	f7fd ffc9 	bl	8008610 <_printf_float>
 800a67e:	1c42      	adds	r2, r0, #1
 800a680:	4606      	mov	r6, r0
 800a682:	d1d6      	bne.n	800a632 <_svfiprintf_r+0x176>
 800a684:	89ab      	ldrh	r3, [r5, #12]
 800a686:	065b      	lsls	r3, r3, #25
 800a688:	f53f af2c 	bmi.w	800a4e4 <_svfiprintf_r+0x28>
 800a68c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a68e:	b01d      	add	sp, #116	; 0x74
 800a690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a694:	ab03      	add	r3, sp, #12
 800a696:	9300      	str	r3, [sp, #0]
 800a698:	462a      	mov	r2, r5
 800a69a:	4b06      	ldr	r3, [pc, #24]	; (800a6b4 <_svfiprintf_r+0x1f8>)
 800a69c:	a904      	add	r1, sp, #16
 800a69e:	4638      	mov	r0, r7
 800a6a0:	f7fe fa5a 	bl	8008b58 <_printf_i>
 800a6a4:	e7eb      	b.n	800a67e <_svfiprintf_r+0x1c2>
 800a6a6:	bf00      	nop
 800a6a8:	0800d17c 	.word	0x0800d17c
 800a6ac:	0800d186 	.word	0x0800d186
 800a6b0:	08008611 	.word	0x08008611
 800a6b4:	0800a405 	.word	0x0800a405
 800a6b8:	0800d182 	.word	0x0800d182

0800a6bc <_sbrk_r>:
 800a6bc:	b538      	push	{r3, r4, r5, lr}
 800a6be:	4d06      	ldr	r5, [pc, #24]	; (800a6d8 <_sbrk_r+0x1c>)
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	4604      	mov	r4, r0
 800a6c4:	4608      	mov	r0, r1
 800a6c6:	602b      	str	r3, [r5, #0]
 800a6c8:	f7f7 fcb6 	bl	8002038 <_sbrk>
 800a6cc:	1c43      	adds	r3, r0, #1
 800a6ce:	d102      	bne.n	800a6d6 <_sbrk_r+0x1a>
 800a6d0:	682b      	ldr	r3, [r5, #0]
 800a6d2:	b103      	cbz	r3, 800a6d6 <_sbrk_r+0x1a>
 800a6d4:	6023      	str	r3, [r4, #0]
 800a6d6:	bd38      	pop	{r3, r4, r5, pc}
 800a6d8:	2000049c 	.word	0x2000049c

0800a6dc <__assert_func>:
 800a6dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a6de:	4614      	mov	r4, r2
 800a6e0:	461a      	mov	r2, r3
 800a6e2:	4b09      	ldr	r3, [pc, #36]	; (800a708 <__assert_func+0x2c>)
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	4605      	mov	r5, r0
 800a6e8:	68d8      	ldr	r0, [r3, #12]
 800a6ea:	b14c      	cbz	r4, 800a700 <__assert_func+0x24>
 800a6ec:	4b07      	ldr	r3, [pc, #28]	; (800a70c <__assert_func+0x30>)
 800a6ee:	9100      	str	r1, [sp, #0]
 800a6f0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a6f4:	4906      	ldr	r1, [pc, #24]	; (800a710 <__assert_func+0x34>)
 800a6f6:	462b      	mov	r3, r5
 800a6f8:	f000 f80e 	bl	800a718 <fiprintf>
 800a6fc:	f000 faac 	bl	800ac58 <abort>
 800a700:	4b04      	ldr	r3, [pc, #16]	; (800a714 <__assert_func+0x38>)
 800a702:	461c      	mov	r4, r3
 800a704:	e7f3      	b.n	800a6ee <__assert_func+0x12>
 800a706:	bf00      	nop
 800a708:	20000020 	.word	0x20000020
 800a70c:	0800d18d 	.word	0x0800d18d
 800a710:	0800d19a 	.word	0x0800d19a
 800a714:	0800d1c8 	.word	0x0800d1c8

0800a718 <fiprintf>:
 800a718:	b40e      	push	{r1, r2, r3}
 800a71a:	b503      	push	{r0, r1, lr}
 800a71c:	4601      	mov	r1, r0
 800a71e:	ab03      	add	r3, sp, #12
 800a720:	4805      	ldr	r0, [pc, #20]	; (800a738 <fiprintf+0x20>)
 800a722:	f853 2b04 	ldr.w	r2, [r3], #4
 800a726:	6800      	ldr	r0, [r0, #0]
 800a728:	9301      	str	r3, [sp, #4]
 800a72a:	f000 f897 	bl	800a85c <_vfiprintf_r>
 800a72e:	b002      	add	sp, #8
 800a730:	f85d eb04 	ldr.w	lr, [sp], #4
 800a734:	b003      	add	sp, #12
 800a736:	4770      	bx	lr
 800a738:	20000020 	.word	0x20000020

0800a73c <__ascii_mbtowc>:
 800a73c:	b082      	sub	sp, #8
 800a73e:	b901      	cbnz	r1, 800a742 <__ascii_mbtowc+0x6>
 800a740:	a901      	add	r1, sp, #4
 800a742:	b142      	cbz	r2, 800a756 <__ascii_mbtowc+0x1a>
 800a744:	b14b      	cbz	r3, 800a75a <__ascii_mbtowc+0x1e>
 800a746:	7813      	ldrb	r3, [r2, #0]
 800a748:	600b      	str	r3, [r1, #0]
 800a74a:	7812      	ldrb	r2, [r2, #0]
 800a74c:	1e10      	subs	r0, r2, #0
 800a74e:	bf18      	it	ne
 800a750:	2001      	movne	r0, #1
 800a752:	b002      	add	sp, #8
 800a754:	4770      	bx	lr
 800a756:	4610      	mov	r0, r2
 800a758:	e7fb      	b.n	800a752 <__ascii_mbtowc+0x16>
 800a75a:	f06f 0001 	mvn.w	r0, #1
 800a75e:	e7f8      	b.n	800a752 <__ascii_mbtowc+0x16>

0800a760 <memmove>:
 800a760:	4288      	cmp	r0, r1
 800a762:	b510      	push	{r4, lr}
 800a764:	eb01 0402 	add.w	r4, r1, r2
 800a768:	d902      	bls.n	800a770 <memmove+0x10>
 800a76a:	4284      	cmp	r4, r0
 800a76c:	4623      	mov	r3, r4
 800a76e:	d807      	bhi.n	800a780 <memmove+0x20>
 800a770:	1e43      	subs	r3, r0, #1
 800a772:	42a1      	cmp	r1, r4
 800a774:	d008      	beq.n	800a788 <memmove+0x28>
 800a776:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a77a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a77e:	e7f8      	b.n	800a772 <memmove+0x12>
 800a780:	4402      	add	r2, r0
 800a782:	4601      	mov	r1, r0
 800a784:	428a      	cmp	r2, r1
 800a786:	d100      	bne.n	800a78a <memmove+0x2a>
 800a788:	bd10      	pop	{r4, pc}
 800a78a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a78e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a792:	e7f7      	b.n	800a784 <memmove+0x24>

0800a794 <__malloc_lock>:
 800a794:	4801      	ldr	r0, [pc, #4]	; (800a79c <__malloc_lock+0x8>)
 800a796:	f000 bc1f 	b.w	800afd8 <__retarget_lock_acquire_recursive>
 800a79a:	bf00      	nop
 800a79c:	200004a0 	.word	0x200004a0

0800a7a0 <__malloc_unlock>:
 800a7a0:	4801      	ldr	r0, [pc, #4]	; (800a7a8 <__malloc_unlock+0x8>)
 800a7a2:	f000 bc1a 	b.w	800afda <__retarget_lock_release_recursive>
 800a7a6:	bf00      	nop
 800a7a8:	200004a0 	.word	0x200004a0

0800a7ac <_realloc_r>:
 800a7ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7b0:	4680      	mov	r8, r0
 800a7b2:	4614      	mov	r4, r2
 800a7b4:	460e      	mov	r6, r1
 800a7b6:	b921      	cbnz	r1, 800a7c2 <_realloc_r+0x16>
 800a7b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a7bc:	4611      	mov	r1, r2
 800a7be:	f7ff bdad 	b.w	800a31c <_malloc_r>
 800a7c2:	b92a      	cbnz	r2, 800a7d0 <_realloc_r+0x24>
 800a7c4:	f7ff fd3e 	bl	800a244 <_free_r>
 800a7c8:	4625      	mov	r5, r4
 800a7ca:	4628      	mov	r0, r5
 800a7cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7d0:	f000 fc6a 	bl	800b0a8 <_malloc_usable_size_r>
 800a7d4:	4284      	cmp	r4, r0
 800a7d6:	4607      	mov	r7, r0
 800a7d8:	d802      	bhi.n	800a7e0 <_realloc_r+0x34>
 800a7da:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a7de:	d812      	bhi.n	800a806 <_realloc_r+0x5a>
 800a7e0:	4621      	mov	r1, r4
 800a7e2:	4640      	mov	r0, r8
 800a7e4:	f7ff fd9a 	bl	800a31c <_malloc_r>
 800a7e8:	4605      	mov	r5, r0
 800a7ea:	2800      	cmp	r0, #0
 800a7ec:	d0ed      	beq.n	800a7ca <_realloc_r+0x1e>
 800a7ee:	42bc      	cmp	r4, r7
 800a7f0:	4622      	mov	r2, r4
 800a7f2:	4631      	mov	r1, r6
 800a7f4:	bf28      	it	cs
 800a7f6:	463a      	movcs	r2, r7
 800a7f8:	f7ff f97c 	bl	8009af4 <memcpy>
 800a7fc:	4631      	mov	r1, r6
 800a7fe:	4640      	mov	r0, r8
 800a800:	f7ff fd20 	bl	800a244 <_free_r>
 800a804:	e7e1      	b.n	800a7ca <_realloc_r+0x1e>
 800a806:	4635      	mov	r5, r6
 800a808:	e7df      	b.n	800a7ca <_realloc_r+0x1e>

0800a80a <__sfputc_r>:
 800a80a:	6893      	ldr	r3, [r2, #8]
 800a80c:	3b01      	subs	r3, #1
 800a80e:	2b00      	cmp	r3, #0
 800a810:	b410      	push	{r4}
 800a812:	6093      	str	r3, [r2, #8]
 800a814:	da08      	bge.n	800a828 <__sfputc_r+0x1e>
 800a816:	6994      	ldr	r4, [r2, #24]
 800a818:	42a3      	cmp	r3, r4
 800a81a:	db01      	blt.n	800a820 <__sfputc_r+0x16>
 800a81c:	290a      	cmp	r1, #10
 800a81e:	d103      	bne.n	800a828 <__sfputc_r+0x1e>
 800a820:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a824:	f000 b94a 	b.w	800aabc <__swbuf_r>
 800a828:	6813      	ldr	r3, [r2, #0]
 800a82a:	1c58      	adds	r0, r3, #1
 800a82c:	6010      	str	r0, [r2, #0]
 800a82e:	7019      	strb	r1, [r3, #0]
 800a830:	4608      	mov	r0, r1
 800a832:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a836:	4770      	bx	lr

0800a838 <__sfputs_r>:
 800a838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a83a:	4606      	mov	r6, r0
 800a83c:	460f      	mov	r7, r1
 800a83e:	4614      	mov	r4, r2
 800a840:	18d5      	adds	r5, r2, r3
 800a842:	42ac      	cmp	r4, r5
 800a844:	d101      	bne.n	800a84a <__sfputs_r+0x12>
 800a846:	2000      	movs	r0, #0
 800a848:	e007      	b.n	800a85a <__sfputs_r+0x22>
 800a84a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a84e:	463a      	mov	r2, r7
 800a850:	4630      	mov	r0, r6
 800a852:	f7ff ffda 	bl	800a80a <__sfputc_r>
 800a856:	1c43      	adds	r3, r0, #1
 800a858:	d1f3      	bne.n	800a842 <__sfputs_r+0xa>
 800a85a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a85c <_vfiprintf_r>:
 800a85c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a860:	460d      	mov	r5, r1
 800a862:	b09d      	sub	sp, #116	; 0x74
 800a864:	4614      	mov	r4, r2
 800a866:	4698      	mov	r8, r3
 800a868:	4606      	mov	r6, r0
 800a86a:	b118      	cbz	r0, 800a874 <_vfiprintf_r+0x18>
 800a86c:	6983      	ldr	r3, [r0, #24]
 800a86e:	b90b      	cbnz	r3, 800a874 <_vfiprintf_r+0x18>
 800a870:	f000 fb14 	bl	800ae9c <__sinit>
 800a874:	4b89      	ldr	r3, [pc, #548]	; (800aa9c <_vfiprintf_r+0x240>)
 800a876:	429d      	cmp	r5, r3
 800a878:	d11b      	bne.n	800a8b2 <_vfiprintf_r+0x56>
 800a87a:	6875      	ldr	r5, [r6, #4]
 800a87c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a87e:	07d9      	lsls	r1, r3, #31
 800a880:	d405      	bmi.n	800a88e <_vfiprintf_r+0x32>
 800a882:	89ab      	ldrh	r3, [r5, #12]
 800a884:	059a      	lsls	r2, r3, #22
 800a886:	d402      	bmi.n	800a88e <_vfiprintf_r+0x32>
 800a888:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a88a:	f000 fba5 	bl	800afd8 <__retarget_lock_acquire_recursive>
 800a88e:	89ab      	ldrh	r3, [r5, #12]
 800a890:	071b      	lsls	r3, r3, #28
 800a892:	d501      	bpl.n	800a898 <_vfiprintf_r+0x3c>
 800a894:	692b      	ldr	r3, [r5, #16]
 800a896:	b9eb      	cbnz	r3, 800a8d4 <_vfiprintf_r+0x78>
 800a898:	4629      	mov	r1, r5
 800a89a:	4630      	mov	r0, r6
 800a89c:	f000 f96e 	bl	800ab7c <__swsetup_r>
 800a8a0:	b1c0      	cbz	r0, 800a8d4 <_vfiprintf_r+0x78>
 800a8a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a8a4:	07dc      	lsls	r4, r3, #31
 800a8a6:	d50e      	bpl.n	800a8c6 <_vfiprintf_r+0x6a>
 800a8a8:	f04f 30ff 	mov.w	r0, #4294967295
 800a8ac:	b01d      	add	sp, #116	; 0x74
 800a8ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8b2:	4b7b      	ldr	r3, [pc, #492]	; (800aaa0 <_vfiprintf_r+0x244>)
 800a8b4:	429d      	cmp	r5, r3
 800a8b6:	d101      	bne.n	800a8bc <_vfiprintf_r+0x60>
 800a8b8:	68b5      	ldr	r5, [r6, #8]
 800a8ba:	e7df      	b.n	800a87c <_vfiprintf_r+0x20>
 800a8bc:	4b79      	ldr	r3, [pc, #484]	; (800aaa4 <_vfiprintf_r+0x248>)
 800a8be:	429d      	cmp	r5, r3
 800a8c0:	bf08      	it	eq
 800a8c2:	68f5      	ldreq	r5, [r6, #12]
 800a8c4:	e7da      	b.n	800a87c <_vfiprintf_r+0x20>
 800a8c6:	89ab      	ldrh	r3, [r5, #12]
 800a8c8:	0598      	lsls	r0, r3, #22
 800a8ca:	d4ed      	bmi.n	800a8a8 <_vfiprintf_r+0x4c>
 800a8cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a8ce:	f000 fb84 	bl	800afda <__retarget_lock_release_recursive>
 800a8d2:	e7e9      	b.n	800a8a8 <_vfiprintf_r+0x4c>
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	9309      	str	r3, [sp, #36]	; 0x24
 800a8d8:	2320      	movs	r3, #32
 800a8da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a8de:	f8cd 800c 	str.w	r8, [sp, #12]
 800a8e2:	2330      	movs	r3, #48	; 0x30
 800a8e4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800aaa8 <_vfiprintf_r+0x24c>
 800a8e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a8ec:	f04f 0901 	mov.w	r9, #1
 800a8f0:	4623      	mov	r3, r4
 800a8f2:	469a      	mov	sl, r3
 800a8f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a8f8:	b10a      	cbz	r2, 800a8fe <_vfiprintf_r+0xa2>
 800a8fa:	2a25      	cmp	r2, #37	; 0x25
 800a8fc:	d1f9      	bne.n	800a8f2 <_vfiprintf_r+0x96>
 800a8fe:	ebba 0b04 	subs.w	fp, sl, r4
 800a902:	d00b      	beq.n	800a91c <_vfiprintf_r+0xc0>
 800a904:	465b      	mov	r3, fp
 800a906:	4622      	mov	r2, r4
 800a908:	4629      	mov	r1, r5
 800a90a:	4630      	mov	r0, r6
 800a90c:	f7ff ff94 	bl	800a838 <__sfputs_r>
 800a910:	3001      	adds	r0, #1
 800a912:	f000 80aa 	beq.w	800aa6a <_vfiprintf_r+0x20e>
 800a916:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a918:	445a      	add	r2, fp
 800a91a:	9209      	str	r2, [sp, #36]	; 0x24
 800a91c:	f89a 3000 	ldrb.w	r3, [sl]
 800a920:	2b00      	cmp	r3, #0
 800a922:	f000 80a2 	beq.w	800aa6a <_vfiprintf_r+0x20e>
 800a926:	2300      	movs	r3, #0
 800a928:	f04f 32ff 	mov.w	r2, #4294967295
 800a92c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a930:	f10a 0a01 	add.w	sl, sl, #1
 800a934:	9304      	str	r3, [sp, #16]
 800a936:	9307      	str	r3, [sp, #28]
 800a938:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a93c:	931a      	str	r3, [sp, #104]	; 0x68
 800a93e:	4654      	mov	r4, sl
 800a940:	2205      	movs	r2, #5
 800a942:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a946:	4858      	ldr	r0, [pc, #352]	; (800aaa8 <_vfiprintf_r+0x24c>)
 800a948:	f7f5 fc52 	bl	80001f0 <memchr>
 800a94c:	9a04      	ldr	r2, [sp, #16]
 800a94e:	b9d8      	cbnz	r0, 800a988 <_vfiprintf_r+0x12c>
 800a950:	06d1      	lsls	r1, r2, #27
 800a952:	bf44      	itt	mi
 800a954:	2320      	movmi	r3, #32
 800a956:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a95a:	0713      	lsls	r3, r2, #28
 800a95c:	bf44      	itt	mi
 800a95e:	232b      	movmi	r3, #43	; 0x2b
 800a960:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a964:	f89a 3000 	ldrb.w	r3, [sl]
 800a968:	2b2a      	cmp	r3, #42	; 0x2a
 800a96a:	d015      	beq.n	800a998 <_vfiprintf_r+0x13c>
 800a96c:	9a07      	ldr	r2, [sp, #28]
 800a96e:	4654      	mov	r4, sl
 800a970:	2000      	movs	r0, #0
 800a972:	f04f 0c0a 	mov.w	ip, #10
 800a976:	4621      	mov	r1, r4
 800a978:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a97c:	3b30      	subs	r3, #48	; 0x30
 800a97e:	2b09      	cmp	r3, #9
 800a980:	d94e      	bls.n	800aa20 <_vfiprintf_r+0x1c4>
 800a982:	b1b0      	cbz	r0, 800a9b2 <_vfiprintf_r+0x156>
 800a984:	9207      	str	r2, [sp, #28]
 800a986:	e014      	b.n	800a9b2 <_vfiprintf_r+0x156>
 800a988:	eba0 0308 	sub.w	r3, r0, r8
 800a98c:	fa09 f303 	lsl.w	r3, r9, r3
 800a990:	4313      	orrs	r3, r2
 800a992:	9304      	str	r3, [sp, #16]
 800a994:	46a2      	mov	sl, r4
 800a996:	e7d2      	b.n	800a93e <_vfiprintf_r+0xe2>
 800a998:	9b03      	ldr	r3, [sp, #12]
 800a99a:	1d19      	adds	r1, r3, #4
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	9103      	str	r1, [sp, #12]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	bfbb      	ittet	lt
 800a9a4:	425b      	neglt	r3, r3
 800a9a6:	f042 0202 	orrlt.w	r2, r2, #2
 800a9aa:	9307      	strge	r3, [sp, #28]
 800a9ac:	9307      	strlt	r3, [sp, #28]
 800a9ae:	bfb8      	it	lt
 800a9b0:	9204      	strlt	r2, [sp, #16]
 800a9b2:	7823      	ldrb	r3, [r4, #0]
 800a9b4:	2b2e      	cmp	r3, #46	; 0x2e
 800a9b6:	d10c      	bne.n	800a9d2 <_vfiprintf_r+0x176>
 800a9b8:	7863      	ldrb	r3, [r4, #1]
 800a9ba:	2b2a      	cmp	r3, #42	; 0x2a
 800a9bc:	d135      	bne.n	800aa2a <_vfiprintf_r+0x1ce>
 800a9be:	9b03      	ldr	r3, [sp, #12]
 800a9c0:	1d1a      	adds	r2, r3, #4
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	9203      	str	r2, [sp, #12]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	bfb8      	it	lt
 800a9ca:	f04f 33ff 	movlt.w	r3, #4294967295
 800a9ce:	3402      	adds	r4, #2
 800a9d0:	9305      	str	r3, [sp, #20]
 800a9d2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800aab8 <_vfiprintf_r+0x25c>
 800a9d6:	7821      	ldrb	r1, [r4, #0]
 800a9d8:	2203      	movs	r2, #3
 800a9da:	4650      	mov	r0, sl
 800a9dc:	f7f5 fc08 	bl	80001f0 <memchr>
 800a9e0:	b140      	cbz	r0, 800a9f4 <_vfiprintf_r+0x198>
 800a9e2:	2340      	movs	r3, #64	; 0x40
 800a9e4:	eba0 000a 	sub.w	r0, r0, sl
 800a9e8:	fa03 f000 	lsl.w	r0, r3, r0
 800a9ec:	9b04      	ldr	r3, [sp, #16]
 800a9ee:	4303      	orrs	r3, r0
 800a9f0:	3401      	adds	r4, #1
 800a9f2:	9304      	str	r3, [sp, #16]
 800a9f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9f8:	482c      	ldr	r0, [pc, #176]	; (800aaac <_vfiprintf_r+0x250>)
 800a9fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a9fe:	2206      	movs	r2, #6
 800aa00:	f7f5 fbf6 	bl	80001f0 <memchr>
 800aa04:	2800      	cmp	r0, #0
 800aa06:	d03f      	beq.n	800aa88 <_vfiprintf_r+0x22c>
 800aa08:	4b29      	ldr	r3, [pc, #164]	; (800aab0 <_vfiprintf_r+0x254>)
 800aa0a:	bb1b      	cbnz	r3, 800aa54 <_vfiprintf_r+0x1f8>
 800aa0c:	9b03      	ldr	r3, [sp, #12]
 800aa0e:	3307      	adds	r3, #7
 800aa10:	f023 0307 	bic.w	r3, r3, #7
 800aa14:	3308      	adds	r3, #8
 800aa16:	9303      	str	r3, [sp, #12]
 800aa18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa1a:	443b      	add	r3, r7
 800aa1c:	9309      	str	r3, [sp, #36]	; 0x24
 800aa1e:	e767      	b.n	800a8f0 <_vfiprintf_r+0x94>
 800aa20:	fb0c 3202 	mla	r2, ip, r2, r3
 800aa24:	460c      	mov	r4, r1
 800aa26:	2001      	movs	r0, #1
 800aa28:	e7a5      	b.n	800a976 <_vfiprintf_r+0x11a>
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	3401      	adds	r4, #1
 800aa2e:	9305      	str	r3, [sp, #20]
 800aa30:	4619      	mov	r1, r3
 800aa32:	f04f 0c0a 	mov.w	ip, #10
 800aa36:	4620      	mov	r0, r4
 800aa38:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa3c:	3a30      	subs	r2, #48	; 0x30
 800aa3e:	2a09      	cmp	r2, #9
 800aa40:	d903      	bls.n	800aa4a <_vfiprintf_r+0x1ee>
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d0c5      	beq.n	800a9d2 <_vfiprintf_r+0x176>
 800aa46:	9105      	str	r1, [sp, #20]
 800aa48:	e7c3      	b.n	800a9d2 <_vfiprintf_r+0x176>
 800aa4a:	fb0c 2101 	mla	r1, ip, r1, r2
 800aa4e:	4604      	mov	r4, r0
 800aa50:	2301      	movs	r3, #1
 800aa52:	e7f0      	b.n	800aa36 <_vfiprintf_r+0x1da>
 800aa54:	ab03      	add	r3, sp, #12
 800aa56:	9300      	str	r3, [sp, #0]
 800aa58:	462a      	mov	r2, r5
 800aa5a:	4b16      	ldr	r3, [pc, #88]	; (800aab4 <_vfiprintf_r+0x258>)
 800aa5c:	a904      	add	r1, sp, #16
 800aa5e:	4630      	mov	r0, r6
 800aa60:	f7fd fdd6 	bl	8008610 <_printf_float>
 800aa64:	4607      	mov	r7, r0
 800aa66:	1c78      	adds	r0, r7, #1
 800aa68:	d1d6      	bne.n	800aa18 <_vfiprintf_r+0x1bc>
 800aa6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aa6c:	07d9      	lsls	r1, r3, #31
 800aa6e:	d405      	bmi.n	800aa7c <_vfiprintf_r+0x220>
 800aa70:	89ab      	ldrh	r3, [r5, #12]
 800aa72:	059a      	lsls	r2, r3, #22
 800aa74:	d402      	bmi.n	800aa7c <_vfiprintf_r+0x220>
 800aa76:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aa78:	f000 faaf 	bl	800afda <__retarget_lock_release_recursive>
 800aa7c:	89ab      	ldrh	r3, [r5, #12]
 800aa7e:	065b      	lsls	r3, r3, #25
 800aa80:	f53f af12 	bmi.w	800a8a8 <_vfiprintf_r+0x4c>
 800aa84:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aa86:	e711      	b.n	800a8ac <_vfiprintf_r+0x50>
 800aa88:	ab03      	add	r3, sp, #12
 800aa8a:	9300      	str	r3, [sp, #0]
 800aa8c:	462a      	mov	r2, r5
 800aa8e:	4b09      	ldr	r3, [pc, #36]	; (800aab4 <_vfiprintf_r+0x258>)
 800aa90:	a904      	add	r1, sp, #16
 800aa92:	4630      	mov	r0, r6
 800aa94:	f7fe f860 	bl	8008b58 <_printf_i>
 800aa98:	e7e4      	b.n	800aa64 <_vfiprintf_r+0x208>
 800aa9a:	bf00      	nop
 800aa9c:	0800d2f4 	.word	0x0800d2f4
 800aaa0:	0800d314 	.word	0x0800d314
 800aaa4:	0800d2d4 	.word	0x0800d2d4
 800aaa8:	0800d17c 	.word	0x0800d17c
 800aaac:	0800d186 	.word	0x0800d186
 800aab0:	08008611 	.word	0x08008611
 800aab4:	0800a839 	.word	0x0800a839
 800aab8:	0800d182 	.word	0x0800d182

0800aabc <__swbuf_r>:
 800aabc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aabe:	460e      	mov	r6, r1
 800aac0:	4614      	mov	r4, r2
 800aac2:	4605      	mov	r5, r0
 800aac4:	b118      	cbz	r0, 800aace <__swbuf_r+0x12>
 800aac6:	6983      	ldr	r3, [r0, #24]
 800aac8:	b90b      	cbnz	r3, 800aace <__swbuf_r+0x12>
 800aaca:	f000 f9e7 	bl	800ae9c <__sinit>
 800aace:	4b21      	ldr	r3, [pc, #132]	; (800ab54 <__swbuf_r+0x98>)
 800aad0:	429c      	cmp	r4, r3
 800aad2:	d12b      	bne.n	800ab2c <__swbuf_r+0x70>
 800aad4:	686c      	ldr	r4, [r5, #4]
 800aad6:	69a3      	ldr	r3, [r4, #24]
 800aad8:	60a3      	str	r3, [r4, #8]
 800aada:	89a3      	ldrh	r3, [r4, #12]
 800aadc:	071a      	lsls	r2, r3, #28
 800aade:	d52f      	bpl.n	800ab40 <__swbuf_r+0x84>
 800aae0:	6923      	ldr	r3, [r4, #16]
 800aae2:	b36b      	cbz	r3, 800ab40 <__swbuf_r+0x84>
 800aae4:	6923      	ldr	r3, [r4, #16]
 800aae6:	6820      	ldr	r0, [r4, #0]
 800aae8:	1ac0      	subs	r0, r0, r3
 800aaea:	6963      	ldr	r3, [r4, #20]
 800aaec:	b2f6      	uxtb	r6, r6
 800aaee:	4283      	cmp	r3, r0
 800aaf0:	4637      	mov	r7, r6
 800aaf2:	dc04      	bgt.n	800aafe <__swbuf_r+0x42>
 800aaf4:	4621      	mov	r1, r4
 800aaf6:	4628      	mov	r0, r5
 800aaf8:	f000 f93c 	bl	800ad74 <_fflush_r>
 800aafc:	bb30      	cbnz	r0, 800ab4c <__swbuf_r+0x90>
 800aafe:	68a3      	ldr	r3, [r4, #8]
 800ab00:	3b01      	subs	r3, #1
 800ab02:	60a3      	str	r3, [r4, #8]
 800ab04:	6823      	ldr	r3, [r4, #0]
 800ab06:	1c5a      	adds	r2, r3, #1
 800ab08:	6022      	str	r2, [r4, #0]
 800ab0a:	701e      	strb	r6, [r3, #0]
 800ab0c:	6963      	ldr	r3, [r4, #20]
 800ab0e:	3001      	adds	r0, #1
 800ab10:	4283      	cmp	r3, r0
 800ab12:	d004      	beq.n	800ab1e <__swbuf_r+0x62>
 800ab14:	89a3      	ldrh	r3, [r4, #12]
 800ab16:	07db      	lsls	r3, r3, #31
 800ab18:	d506      	bpl.n	800ab28 <__swbuf_r+0x6c>
 800ab1a:	2e0a      	cmp	r6, #10
 800ab1c:	d104      	bne.n	800ab28 <__swbuf_r+0x6c>
 800ab1e:	4621      	mov	r1, r4
 800ab20:	4628      	mov	r0, r5
 800ab22:	f000 f927 	bl	800ad74 <_fflush_r>
 800ab26:	b988      	cbnz	r0, 800ab4c <__swbuf_r+0x90>
 800ab28:	4638      	mov	r0, r7
 800ab2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab2c:	4b0a      	ldr	r3, [pc, #40]	; (800ab58 <__swbuf_r+0x9c>)
 800ab2e:	429c      	cmp	r4, r3
 800ab30:	d101      	bne.n	800ab36 <__swbuf_r+0x7a>
 800ab32:	68ac      	ldr	r4, [r5, #8]
 800ab34:	e7cf      	b.n	800aad6 <__swbuf_r+0x1a>
 800ab36:	4b09      	ldr	r3, [pc, #36]	; (800ab5c <__swbuf_r+0xa0>)
 800ab38:	429c      	cmp	r4, r3
 800ab3a:	bf08      	it	eq
 800ab3c:	68ec      	ldreq	r4, [r5, #12]
 800ab3e:	e7ca      	b.n	800aad6 <__swbuf_r+0x1a>
 800ab40:	4621      	mov	r1, r4
 800ab42:	4628      	mov	r0, r5
 800ab44:	f000 f81a 	bl	800ab7c <__swsetup_r>
 800ab48:	2800      	cmp	r0, #0
 800ab4a:	d0cb      	beq.n	800aae4 <__swbuf_r+0x28>
 800ab4c:	f04f 37ff 	mov.w	r7, #4294967295
 800ab50:	e7ea      	b.n	800ab28 <__swbuf_r+0x6c>
 800ab52:	bf00      	nop
 800ab54:	0800d2f4 	.word	0x0800d2f4
 800ab58:	0800d314 	.word	0x0800d314
 800ab5c:	0800d2d4 	.word	0x0800d2d4

0800ab60 <__ascii_wctomb>:
 800ab60:	b149      	cbz	r1, 800ab76 <__ascii_wctomb+0x16>
 800ab62:	2aff      	cmp	r2, #255	; 0xff
 800ab64:	bf85      	ittet	hi
 800ab66:	238a      	movhi	r3, #138	; 0x8a
 800ab68:	6003      	strhi	r3, [r0, #0]
 800ab6a:	700a      	strbls	r2, [r1, #0]
 800ab6c:	f04f 30ff 	movhi.w	r0, #4294967295
 800ab70:	bf98      	it	ls
 800ab72:	2001      	movls	r0, #1
 800ab74:	4770      	bx	lr
 800ab76:	4608      	mov	r0, r1
 800ab78:	4770      	bx	lr
	...

0800ab7c <__swsetup_r>:
 800ab7c:	4b32      	ldr	r3, [pc, #200]	; (800ac48 <__swsetup_r+0xcc>)
 800ab7e:	b570      	push	{r4, r5, r6, lr}
 800ab80:	681d      	ldr	r5, [r3, #0]
 800ab82:	4606      	mov	r6, r0
 800ab84:	460c      	mov	r4, r1
 800ab86:	b125      	cbz	r5, 800ab92 <__swsetup_r+0x16>
 800ab88:	69ab      	ldr	r3, [r5, #24]
 800ab8a:	b913      	cbnz	r3, 800ab92 <__swsetup_r+0x16>
 800ab8c:	4628      	mov	r0, r5
 800ab8e:	f000 f985 	bl	800ae9c <__sinit>
 800ab92:	4b2e      	ldr	r3, [pc, #184]	; (800ac4c <__swsetup_r+0xd0>)
 800ab94:	429c      	cmp	r4, r3
 800ab96:	d10f      	bne.n	800abb8 <__swsetup_r+0x3c>
 800ab98:	686c      	ldr	r4, [r5, #4]
 800ab9a:	89a3      	ldrh	r3, [r4, #12]
 800ab9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aba0:	0719      	lsls	r1, r3, #28
 800aba2:	d42c      	bmi.n	800abfe <__swsetup_r+0x82>
 800aba4:	06dd      	lsls	r5, r3, #27
 800aba6:	d411      	bmi.n	800abcc <__swsetup_r+0x50>
 800aba8:	2309      	movs	r3, #9
 800abaa:	6033      	str	r3, [r6, #0]
 800abac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800abb0:	81a3      	strh	r3, [r4, #12]
 800abb2:	f04f 30ff 	mov.w	r0, #4294967295
 800abb6:	e03e      	b.n	800ac36 <__swsetup_r+0xba>
 800abb8:	4b25      	ldr	r3, [pc, #148]	; (800ac50 <__swsetup_r+0xd4>)
 800abba:	429c      	cmp	r4, r3
 800abbc:	d101      	bne.n	800abc2 <__swsetup_r+0x46>
 800abbe:	68ac      	ldr	r4, [r5, #8]
 800abc0:	e7eb      	b.n	800ab9a <__swsetup_r+0x1e>
 800abc2:	4b24      	ldr	r3, [pc, #144]	; (800ac54 <__swsetup_r+0xd8>)
 800abc4:	429c      	cmp	r4, r3
 800abc6:	bf08      	it	eq
 800abc8:	68ec      	ldreq	r4, [r5, #12]
 800abca:	e7e6      	b.n	800ab9a <__swsetup_r+0x1e>
 800abcc:	0758      	lsls	r0, r3, #29
 800abce:	d512      	bpl.n	800abf6 <__swsetup_r+0x7a>
 800abd0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800abd2:	b141      	cbz	r1, 800abe6 <__swsetup_r+0x6a>
 800abd4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800abd8:	4299      	cmp	r1, r3
 800abda:	d002      	beq.n	800abe2 <__swsetup_r+0x66>
 800abdc:	4630      	mov	r0, r6
 800abde:	f7ff fb31 	bl	800a244 <_free_r>
 800abe2:	2300      	movs	r3, #0
 800abe4:	6363      	str	r3, [r4, #52]	; 0x34
 800abe6:	89a3      	ldrh	r3, [r4, #12]
 800abe8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800abec:	81a3      	strh	r3, [r4, #12]
 800abee:	2300      	movs	r3, #0
 800abf0:	6063      	str	r3, [r4, #4]
 800abf2:	6923      	ldr	r3, [r4, #16]
 800abf4:	6023      	str	r3, [r4, #0]
 800abf6:	89a3      	ldrh	r3, [r4, #12]
 800abf8:	f043 0308 	orr.w	r3, r3, #8
 800abfc:	81a3      	strh	r3, [r4, #12]
 800abfe:	6923      	ldr	r3, [r4, #16]
 800ac00:	b94b      	cbnz	r3, 800ac16 <__swsetup_r+0x9a>
 800ac02:	89a3      	ldrh	r3, [r4, #12]
 800ac04:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ac08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ac0c:	d003      	beq.n	800ac16 <__swsetup_r+0x9a>
 800ac0e:	4621      	mov	r1, r4
 800ac10:	4630      	mov	r0, r6
 800ac12:	f000 fa09 	bl	800b028 <__smakebuf_r>
 800ac16:	89a0      	ldrh	r0, [r4, #12]
 800ac18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ac1c:	f010 0301 	ands.w	r3, r0, #1
 800ac20:	d00a      	beq.n	800ac38 <__swsetup_r+0xbc>
 800ac22:	2300      	movs	r3, #0
 800ac24:	60a3      	str	r3, [r4, #8]
 800ac26:	6963      	ldr	r3, [r4, #20]
 800ac28:	425b      	negs	r3, r3
 800ac2a:	61a3      	str	r3, [r4, #24]
 800ac2c:	6923      	ldr	r3, [r4, #16]
 800ac2e:	b943      	cbnz	r3, 800ac42 <__swsetup_r+0xc6>
 800ac30:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ac34:	d1ba      	bne.n	800abac <__swsetup_r+0x30>
 800ac36:	bd70      	pop	{r4, r5, r6, pc}
 800ac38:	0781      	lsls	r1, r0, #30
 800ac3a:	bf58      	it	pl
 800ac3c:	6963      	ldrpl	r3, [r4, #20]
 800ac3e:	60a3      	str	r3, [r4, #8]
 800ac40:	e7f4      	b.n	800ac2c <__swsetup_r+0xb0>
 800ac42:	2000      	movs	r0, #0
 800ac44:	e7f7      	b.n	800ac36 <__swsetup_r+0xba>
 800ac46:	bf00      	nop
 800ac48:	20000020 	.word	0x20000020
 800ac4c:	0800d2f4 	.word	0x0800d2f4
 800ac50:	0800d314 	.word	0x0800d314
 800ac54:	0800d2d4 	.word	0x0800d2d4

0800ac58 <abort>:
 800ac58:	b508      	push	{r3, lr}
 800ac5a:	2006      	movs	r0, #6
 800ac5c:	f000 fa54 	bl	800b108 <raise>
 800ac60:	2001      	movs	r0, #1
 800ac62:	f7f7 f971 	bl	8001f48 <_exit>
	...

0800ac68 <__sflush_r>:
 800ac68:	898a      	ldrh	r2, [r1, #12]
 800ac6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac6e:	4605      	mov	r5, r0
 800ac70:	0710      	lsls	r0, r2, #28
 800ac72:	460c      	mov	r4, r1
 800ac74:	d458      	bmi.n	800ad28 <__sflush_r+0xc0>
 800ac76:	684b      	ldr	r3, [r1, #4]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	dc05      	bgt.n	800ac88 <__sflush_r+0x20>
 800ac7c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	dc02      	bgt.n	800ac88 <__sflush_r+0x20>
 800ac82:	2000      	movs	r0, #0
 800ac84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ac8a:	2e00      	cmp	r6, #0
 800ac8c:	d0f9      	beq.n	800ac82 <__sflush_r+0x1a>
 800ac8e:	2300      	movs	r3, #0
 800ac90:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ac94:	682f      	ldr	r7, [r5, #0]
 800ac96:	602b      	str	r3, [r5, #0]
 800ac98:	d032      	beq.n	800ad00 <__sflush_r+0x98>
 800ac9a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ac9c:	89a3      	ldrh	r3, [r4, #12]
 800ac9e:	075a      	lsls	r2, r3, #29
 800aca0:	d505      	bpl.n	800acae <__sflush_r+0x46>
 800aca2:	6863      	ldr	r3, [r4, #4]
 800aca4:	1ac0      	subs	r0, r0, r3
 800aca6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800aca8:	b10b      	cbz	r3, 800acae <__sflush_r+0x46>
 800acaa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800acac:	1ac0      	subs	r0, r0, r3
 800acae:	2300      	movs	r3, #0
 800acb0:	4602      	mov	r2, r0
 800acb2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800acb4:	6a21      	ldr	r1, [r4, #32]
 800acb6:	4628      	mov	r0, r5
 800acb8:	47b0      	blx	r6
 800acba:	1c43      	adds	r3, r0, #1
 800acbc:	89a3      	ldrh	r3, [r4, #12]
 800acbe:	d106      	bne.n	800acce <__sflush_r+0x66>
 800acc0:	6829      	ldr	r1, [r5, #0]
 800acc2:	291d      	cmp	r1, #29
 800acc4:	d82c      	bhi.n	800ad20 <__sflush_r+0xb8>
 800acc6:	4a2a      	ldr	r2, [pc, #168]	; (800ad70 <__sflush_r+0x108>)
 800acc8:	40ca      	lsrs	r2, r1
 800acca:	07d6      	lsls	r6, r2, #31
 800accc:	d528      	bpl.n	800ad20 <__sflush_r+0xb8>
 800acce:	2200      	movs	r2, #0
 800acd0:	6062      	str	r2, [r4, #4]
 800acd2:	04d9      	lsls	r1, r3, #19
 800acd4:	6922      	ldr	r2, [r4, #16]
 800acd6:	6022      	str	r2, [r4, #0]
 800acd8:	d504      	bpl.n	800ace4 <__sflush_r+0x7c>
 800acda:	1c42      	adds	r2, r0, #1
 800acdc:	d101      	bne.n	800ace2 <__sflush_r+0x7a>
 800acde:	682b      	ldr	r3, [r5, #0]
 800ace0:	b903      	cbnz	r3, 800ace4 <__sflush_r+0x7c>
 800ace2:	6560      	str	r0, [r4, #84]	; 0x54
 800ace4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ace6:	602f      	str	r7, [r5, #0]
 800ace8:	2900      	cmp	r1, #0
 800acea:	d0ca      	beq.n	800ac82 <__sflush_r+0x1a>
 800acec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800acf0:	4299      	cmp	r1, r3
 800acf2:	d002      	beq.n	800acfa <__sflush_r+0x92>
 800acf4:	4628      	mov	r0, r5
 800acf6:	f7ff faa5 	bl	800a244 <_free_r>
 800acfa:	2000      	movs	r0, #0
 800acfc:	6360      	str	r0, [r4, #52]	; 0x34
 800acfe:	e7c1      	b.n	800ac84 <__sflush_r+0x1c>
 800ad00:	6a21      	ldr	r1, [r4, #32]
 800ad02:	2301      	movs	r3, #1
 800ad04:	4628      	mov	r0, r5
 800ad06:	47b0      	blx	r6
 800ad08:	1c41      	adds	r1, r0, #1
 800ad0a:	d1c7      	bne.n	800ac9c <__sflush_r+0x34>
 800ad0c:	682b      	ldr	r3, [r5, #0]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d0c4      	beq.n	800ac9c <__sflush_r+0x34>
 800ad12:	2b1d      	cmp	r3, #29
 800ad14:	d001      	beq.n	800ad1a <__sflush_r+0xb2>
 800ad16:	2b16      	cmp	r3, #22
 800ad18:	d101      	bne.n	800ad1e <__sflush_r+0xb6>
 800ad1a:	602f      	str	r7, [r5, #0]
 800ad1c:	e7b1      	b.n	800ac82 <__sflush_r+0x1a>
 800ad1e:	89a3      	ldrh	r3, [r4, #12]
 800ad20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad24:	81a3      	strh	r3, [r4, #12]
 800ad26:	e7ad      	b.n	800ac84 <__sflush_r+0x1c>
 800ad28:	690f      	ldr	r7, [r1, #16]
 800ad2a:	2f00      	cmp	r7, #0
 800ad2c:	d0a9      	beq.n	800ac82 <__sflush_r+0x1a>
 800ad2e:	0793      	lsls	r3, r2, #30
 800ad30:	680e      	ldr	r6, [r1, #0]
 800ad32:	bf08      	it	eq
 800ad34:	694b      	ldreq	r3, [r1, #20]
 800ad36:	600f      	str	r7, [r1, #0]
 800ad38:	bf18      	it	ne
 800ad3a:	2300      	movne	r3, #0
 800ad3c:	eba6 0807 	sub.w	r8, r6, r7
 800ad40:	608b      	str	r3, [r1, #8]
 800ad42:	f1b8 0f00 	cmp.w	r8, #0
 800ad46:	dd9c      	ble.n	800ac82 <__sflush_r+0x1a>
 800ad48:	6a21      	ldr	r1, [r4, #32]
 800ad4a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ad4c:	4643      	mov	r3, r8
 800ad4e:	463a      	mov	r2, r7
 800ad50:	4628      	mov	r0, r5
 800ad52:	47b0      	blx	r6
 800ad54:	2800      	cmp	r0, #0
 800ad56:	dc06      	bgt.n	800ad66 <__sflush_r+0xfe>
 800ad58:	89a3      	ldrh	r3, [r4, #12]
 800ad5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad5e:	81a3      	strh	r3, [r4, #12]
 800ad60:	f04f 30ff 	mov.w	r0, #4294967295
 800ad64:	e78e      	b.n	800ac84 <__sflush_r+0x1c>
 800ad66:	4407      	add	r7, r0
 800ad68:	eba8 0800 	sub.w	r8, r8, r0
 800ad6c:	e7e9      	b.n	800ad42 <__sflush_r+0xda>
 800ad6e:	bf00      	nop
 800ad70:	20400001 	.word	0x20400001

0800ad74 <_fflush_r>:
 800ad74:	b538      	push	{r3, r4, r5, lr}
 800ad76:	690b      	ldr	r3, [r1, #16]
 800ad78:	4605      	mov	r5, r0
 800ad7a:	460c      	mov	r4, r1
 800ad7c:	b913      	cbnz	r3, 800ad84 <_fflush_r+0x10>
 800ad7e:	2500      	movs	r5, #0
 800ad80:	4628      	mov	r0, r5
 800ad82:	bd38      	pop	{r3, r4, r5, pc}
 800ad84:	b118      	cbz	r0, 800ad8e <_fflush_r+0x1a>
 800ad86:	6983      	ldr	r3, [r0, #24]
 800ad88:	b90b      	cbnz	r3, 800ad8e <_fflush_r+0x1a>
 800ad8a:	f000 f887 	bl	800ae9c <__sinit>
 800ad8e:	4b14      	ldr	r3, [pc, #80]	; (800ade0 <_fflush_r+0x6c>)
 800ad90:	429c      	cmp	r4, r3
 800ad92:	d11b      	bne.n	800adcc <_fflush_r+0x58>
 800ad94:	686c      	ldr	r4, [r5, #4]
 800ad96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d0ef      	beq.n	800ad7e <_fflush_r+0xa>
 800ad9e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ada0:	07d0      	lsls	r0, r2, #31
 800ada2:	d404      	bmi.n	800adae <_fflush_r+0x3a>
 800ada4:	0599      	lsls	r1, r3, #22
 800ada6:	d402      	bmi.n	800adae <_fflush_r+0x3a>
 800ada8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800adaa:	f000 f915 	bl	800afd8 <__retarget_lock_acquire_recursive>
 800adae:	4628      	mov	r0, r5
 800adb0:	4621      	mov	r1, r4
 800adb2:	f7ff ff59 	bl	800ac68 <__sflush_r>
 800adb6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800adb8:	07da      	lsls	r2, r3, #31
 800adba:	4605      	mov	r5, r0
 800adbc:	d4e0      	bmi.n	800ad80 <_fflush_r+0xc>
 800adbe:	89a3      	ldrh	r3, [r4, #12]
 800adc0:	059b      	lsls	r3, r3, #22
 800adc2:	d4dd      	bmi.n	800ad80 <_fflush_r+0xc>
 800adc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800adc6:	f000 f908 	bl	800afda <__retarget_lock_release_recursive>
 800adca:	e7d9      	b.n	800ad80 <_fflush_r+0xc>
 800adcc:	4b05      	ldr	r3, [pc, #20]	; (800ade4 <_fflush_r+0x70>)
 800adce:	429c      	cmp	r4, r3
 800add0:	d101      	bne.n	800add6 <_fflush_r+0x62>
 800add2:	68ac      	ldr	r4, [r5, #8]
 800add4:	e7df      	b.n	800ad96 <_fflush_r+0x22>
 800add6:	4b04      	ldr	r3, [pc, #16]	; (800ade8 <_fflush_r+0x74>)
 800add8:	429c      	cmp	r4, r3
 800adda:	bf08      	it	eq
 800addc:	68ec      	ldreq	r4, [r5, #12]
 800adde:	e7da      	b.n	800ad96 <_fflush_r+0x22>
 800ade0:	0800d2f4 	.word	0x0800d2f4
 800ade4:	0800d314 	.word	0x0800d314
 800ade8:	0800d2d4 	.word	0x0800d2d4

0800adec <std>:
 800adec:	2300      	movs	r3, #0
 800adee:	b510      	push	{r4, lr}
 800adf0:	4604      	mov	r4, r0
 800adf2:	e9c0 3300 	strd	r3, r3, [r0]
 800adf6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800adfa:	6083      	str	r3, [r0, #8]
 800adfc:	8181      	strh	r1, [r0, #12]
 800adfe:	6643      	str	r3, [r0, #100]	; 0x64
 800ae00:	81c2      	strh	r2, [r0, #14]
 800ae02:	6183      	str	r3, [r0, #24]
 800ae04:	4619      	mov	r1, r3
 800ae06:	2208      	movs	r2, #8
 800ae08:	305c      	adds	r0, #92	; 0x5c
 800ae0a:	f7fd fb59 	bl	80084c0 <memset>
 800ae0e:	4b05      	ldr	r3, [pc, #20]	; (800ae24 <std+0x38>)
 800ae10:	6263      	str	r3, [r4, #36]	; 0x24
 800ae12:	4b05      	ldr	r3, [pc, #20]	; (800ae28 <std+0x3c>)
 800ae14:	62a3      	str	r3, [r4, #40]	; 0x28
 800ae16:	4b05      	ldr	r3, [pc, #20]	; (800ae2c <std+0x40>)
 800ae18:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ae1a:	4b05      	ldr	r3, [pc, #20]	; (800ae30 <std+0x44>)
 800ae1c:	6224      	str	r4, [r4, #32]
 800ae1e:	6323      	str	r3, [r4, #48]	; 0x30
 800ae20:	bd10      	pop	{r4, pc}
 800ae22:	bf00      	nop
 800ae24:	0800b141 	.word	0x0800b141
 800ae28:	0800b163 	.word	0x0800b163
 800ae2c:	0800b19b 	.word	0x0800b19b
 800ae30:	0800b1bf 	.word	0x0800b1bf

0800ae34 <_cleanup_r>:
 800ae34:	4901      	ldr	r1, [pc, #4]	; (800ae3c <_cleanup_r+0x8>)
 800ae36:	f000 b8af 	b.w	800af98 <_fwalk_reent>
 800ae3a:	bf00      	nop
 800ae3c:	0800ad75 	.word	0x0800ad75

0800ae40 <__sfmoreglue>:
 800ae40:	b570      	push	{r4, r5, r6, lr}
 800ae42:	2268      	movs	r2, #104	; 0x68
 800ae44:	1e4d      	subs	r5, r1, #1
 800ae46:	4355      	muls	r5, r2
 800ae48:	460e      	mov	r6, r1
 800ae4a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ae4e:	f7ff fa65 	bl	800a31c <_malloc_r>
 800ae52:	4604      	mov	r4, r0
 800ae54:	b140      	cbz	r0, 800ae68 <__sfmoreglue+0x28>
 800ae56:	2100      	movs	r1, #0
 800ae58:	e9c0 1600 	strd	r1, r6, [r0]
 800ae5c:	300c      	adds	r0, #12
 800ae5e:	60a0      	str	r0, [r4, #8]
 800ae60:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ae64:	f7fd fb2c 	bl	80084c0 <memset>
 800ae68:	4620      	mov	r0, r4
 800ae6a:	bd70      	pop	{r4, r5, r6, pc}

0800ae6c <__sfp_lock_acquire>:
 800ae6c:	4801      	ldr	r0, [pc, #4]	; (800ae74 <__sfp_lock_acquire+0x8>)
 800ae6e:	f000 b8b3 	b.w	800afd8 <__retarget_lock_acquire_recursive>
 800ae72:	bf00      	nop
 800ae74:	200004a1 	.word	0x200004a1

0800ae78 <__sfp_lock_release>:
 800ae78:	4801      	ldr	r0, [pc, #4]	; (800ae80 <__sfp_lock_release+0x8>)
 800ae7a:	f000 b8ae 	b.w	800afda <__retarget_lock_release_recursive>
 800ae7e:	bf00      	nop
 800ae80:	200004a1 	.word	0x200004a1

0800ae84 <__sinit_lock_acquire>:
 800ae84:	4801      	ldr	r0, [pc, #4]	; (800ae8c <__sinit_lock_acquire+0x8>)
 800ae86:	f000 b8a7 	b.w	800afd8 <__retarget_lock_acquire_recursive>
 800ae8a:	bf00      	nop
 800ae8c:	200004a2 	.word	0x200004a2

0800ae90 <__sinit_lock_release>:
 800ae90:	4801      	ldr	r0, [pc, #4]	; (800ae98 <__sinit_lock_release+0x8>)
 800ae92:	f000 b8a2 	b.w	800afda <__retarget_lock_release_recursive>
 800ae96:	bf00      	nop
 800ae98:	200004a2 	.word	0x200004a2

0800ae9c <__sinit>:
 800ae9c:	b510      	push	{r4, lr}
 800ae9e:	4604      	mov	r4, r0
 800aea0:	f7ff fff0 	bl	800ae84 <__sinit_lock_acquire>
 800aea4:	69a3      	ldr	r3, [r4, #24]
 800aea6:	b11b      	cbz	r3, 800aeb0 <__sinit+0x14>
 800aea8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aeac:	f7ff bff0 	b.w	800ae90 <__sinit_lock_release>
 800aeb0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800aeb4:	6523      	str	r3, [r4, #80]	; 0x50
 800aeb6:	4b13      	ldr	r3, [pc, #76]	; (800af04 <__sinit+0x68>)
 800aeb8:	4a13      	ldr	r2, [pc, #76]	; (800af08 <__sinit+0x6c>)
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	62a2      	str	r2, [r4, #40]	; 0x28
 800aebe:	42a3      	cmp	r3, r4
 800aec0:	bf04      	itt	eq
 800aec2:	2301      	moveq	r3, #1
 800aec4:	61a3      	streq	r3, [r4, #24]
 800aec6:	4620      	mov	r0, r4
 800aec8:	f000 f820 	bl	800af0c <__sfp>
 800aecc:	6060      	str	r0, [r4, #4]
 800aece:	4620      	mov	r0, r4
 800aed0:	f000 f81c 	bl	800af0c <__sfp>
 800aed4:	60a0      	str	r0, [r4, #8]
 800aed6:	4620      	mov	r0, r4
 800aed8:	f000 f818 	bl	800af0c <__sfp>
 800aedc:	2200      	movs	r2, #0
 800aede:	60e0      	str	r0, [r4, #12]
 800aee0:	2104      	movs	r1, #4
 800aee2:	6860      	ldr	r0, [r4, #4]
 800aee4:	f7ff ff82 	bl	800adec <std>
 800aee8:	68a0      	ldr	r0, [r4, #8]
 800aeea:	2201      	movs	r2, #1
 800aeec:	2109      	movs	r1, #9
 800aeee:	f7ff ff7d 	bl	800adec <std>
 800aef2:	68e0      	ldr	r0, [r4, #12]
 800aef4:	2202      	movs	r2, #2
 800aef6:	2112      	movs	r1, #18
 800aef8:	f7ff ff78 	bl	800adec <std>
 800aefc:	2301      	movs	r3, #1
 800aefe:	61a3      	str	r3, [r4, #24]
 800af00:	e7d2      	b.n	800aea8 <__sinit+0xc>
 800af02:	bf00      	nop
 800af04:	0800cf58 	.word	0x0800cf58
 800af08:	0800ae35 	.word	0x0800ae35

0800af0c <__sfp>:
 800af0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af0e:	4607      	mov	r7, r0
 800af10:	f7ff ffac 	bl	800ae6c <__sfp_lock_acquire>
 800af14:	4b1e      	ldr	r3, [pc, #120]	; (800af90 <__sfp+0x84>)
 800af16:	681e      	ldr	r6, [r3, #0]
 800af18:	69b3      	ldr	r3, [r6, #24]
 800af1a:	b913      	cbnz	r3, 800af22 <__sfp+0x16>
 800af1c:	4630      	mov	r0, r6
 800af1e:	f7ff ffbd 	bl	800ae9c <__sinit>
 800af22:	3648      	adds	r6, #72	; 0x48
 800af24:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800af28:	3b01      	subs	r3, #1
 800af2a:	d503      	bpl.n	800af34 <__sfp+0x28>
 800af2c:	6833      	ldr	r3, [r6, #0]
 800af2e:	b30b      	cbz	r3, 800af74 <__sfp+0x68>
 800af30:	6836      	ldr	r6, [r6, #0]
 800af32:	e7f7      	b.n	800af24 <__sfp+0x18>
 800af34:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800af38:	b9d5      	cbnz	r5, 800af70 <__sfp+0x64>
 800af3a:	4b16      	ldr	r3, [pc, #88]	; (800af94 <__sfp+0x88>)
 800af3c:	60e3      	str	r3, [r4, #12]
 800af3e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800af42:	6665      	str	r5, [r4, #100]	; 0x64
 800af44:	f000 f847 	bl	800afd6 <__retarget_lock_init_recursive>
 800af48:	f7ff ff96 	bl	800ae78 <__sfp_lock_release>
 800af4c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800af50:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800af54:	6025      	str	r5, [r4, #0]
 800af56:	61a5      	str	r5, [r4, #24]
 800af58:	2208      	movs	r2, #8
 800af5a:	4629      	mov	r1, r5
 800af5c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800af60:	f7fd faae 	bl	80084c0 <memset>
 800af64:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800af68:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800af6c:	4620      	mov	r0, r4
 800af6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af70:	3468      	adds	r4, #104	; 0x68
 800af72:	e7d9      	b.n	800af28 <__sfp+0x1c>
 800af74:	2104      	movs	r1, #4
 800af76:	4638      	mov	r0, r7
 800af78:	f7ff ff62 	bl	800ae40 <__sfmoreglue>
 800af7c:	4604      	mov	r4, r0
 800af7e:	6030      	str	r0, [r6, #0]
 800af80:	2800      	cmp	r0, #0
 800af82:	d1d5      	bne.n	800af30 <__sfp+0x24>
 800af84:	f7ff ff78 	bl	800ae78 <__sfp_lock_release>
 800af88:	230c      	movs	r3, #12
 800af8a:	603b      	str	r3, [r7, #0]
 800af8c:	e7ee      	b.n	800af6c <__sfp+0x60>
 800af8e:	bf00      	nop
 800af90:	0800cf58 	.word	0x0800cf58
 800af94:	ffff0001 	.word	0xffff0001

0800af98 <_fwalk_reent>:
 800af98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af9c:	4606      	mov	r6, r0
 800af9e:	4688      	mov	r8, r1
 800afa0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800afa4:	2700      	movs	r7, #0
 800afa6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800afaa:	f1b9 0901 	subs.w	r9, r9, #1
 800afae:	d505      	bpl.n	800afbc <_fwalk_reent+0x24>
 800afb0:	6824      	ldr	r4, [r4, #0]
 800afb2:	2c00      	cmp	r4, #0
 800afb4:	d1f7      	bne.n	800afa6 <_fwalk_reent+0xe>
 800afb6:	4638      	mov	r0, r7
 800afb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800afbc:	89ab      	ldrh	r3, [r5, #12]
 800afbe:	2b01      	cmp	r3, #1
 800afc0:	d907      	bls.n	800afd2 <_fwalk_reent+0x3a>
 800afc2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800afc6:	3301      	adds	r3, #1
 800afc8:	d003      	beq.n	800afd2 <_fwalk_reent+0x3a>
 800afca:	4629      	mov	r1, r5
 800afcc:	4630      	mov	r0, r6
 800afce:	47c0      	blx	r8
 800afd0:	4307      	orrs	r7, r0
 800afd2:	3568      	adds	r5, #104	; 0x68
 800afd4:	e7e9      	b.n	800afaa <_fwalk_reent+0x12>

0800afd6 <__retarget_lock_init_recursive>:
 800afd6:	4770      	bx	lr

0800afd8 <__retarget_lock_acquire_recursive>:
 800afd8:	4770      	bx	lr

0800afda <__retarget_lock_release_recursive>:
 800afda:	4770      	bx	lr

0800afdc <__swhatbuf_r>:
 800afdc:	b570      	push	{r4, r5, r6, lr}
 800afde:	460e      	mov	r6, r1
 800afe0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afe4:	2900      	cmp	r1, #0
 800afe6:	b096      	sub	sp, #88	; 0x58
 800afe8:	4614      	mov	r4, r2
 800afea:	461d      	mov	r5, r3
 800afec:	da08      	bge.n	800b000 <__swhatbuf_r+0x24>
 800afee:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800aff2:	2200      	movs	r2, #0
 800aff4:	602a      	str	r2, [r5, #0]
 800aff6:	061a      	lsls	r2, r3, #24
 800aff8:	d410      	bmi.n	800b01c <__swhatbuf_r+0x40>
 800affa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800affe:	e00e      	b.n	800b01e <__swhatbuf_r+0x42>
 800b000:	466a      	mov	r2, sp
 800b002:	f000 f903 	bl	800b20c <_fstat_r>
 800b006:	2800      	cmp	r0, #0
 800b008:	dbf1      	blt.n	800afee <__swhatbuf_r+0x12>
 800b00a:	9a01      	ldr	r2, [sp, #4]
 800b00c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b010:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b014:	425a      	negs	r2, r3
 800b016:	415a      	adcs	r2, r3
 800b018:	602a      	str	r2, [r5, #0]
 800b01a:	e7ee      	b.n	800affa <__swhatbuf_r+0x1e>
 800b01c:	2340      	movs	r3, #64	; 0x40
 800b01e:	2000      	movs	r0, #0
 800b020:	6023      	str	r3, [r4, #0]
 800b022:	b016      	add	sp, #88	; 0x58
 800b024:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b028 <__smakebuf_r>:
 800b028:	898b      	ldrh	r3, [r1, #12]
 800b02a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b02c:	079d      	lsls	r5, r3, #30
 800b02e:	4606      	mov	r6, r0
 800b030:	460c      	mov	r4, r1
 800b032:	d507      	bpl.n	800b044 <__smakebuf_r+0x1c>
 800b034:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b038:	6023      	str	r3, [r4, #0]
 800b03a:	6123      	str	r3, [r4, #16]
 800b03c:	2301      	movs	r3, #1
 800b03e:	6163      	str	r3, [r4, #20]
 800b040:	b002      	add	sp, #8
 800b042:	bd70      	pop	{r4, r5, r6, pc}
 800b044:	ab01      	add	r3, sp, #4
 800b046:	466a      	mov	r2, sp
 800b048:	f7ff ffc8 	bl	800afdc <__swhatbuf_r>
 800b04c:	9900      	ldr	r1, [sp, #0]
 800b04e:	4605      	mov	r5, r0
 800b050:	4630      	mov	r0, r6
 800b052:	f7ff f963 	bl	800a31c <_malloc_r>
 800b056:	b948      	cbnz	r0, 800b06c <__smakebuf_r+0x44>
 800b058:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b05c:	059a      	lsls	r2, r3, #22
 800b05e:	d4ef      	bmi.n	800b040 <__smakebuf_r+0x18>
 800b060:	f023 0303 	bic.w	r3, r3, #3
 800b064:	f043 0302 	orr.w	r3, r3, #2
 800b068:	81a3      	strh	r3, [r4, #12]
 800b06a:	e7e3      	b.n	800b034 <__smakebuf_r+0xc>
 800b06c:	4b0d      	ldr	r3, [pc, #52]	; (800b0a4 <__smakebuf_r+0x7c>)
 800b06e:	62b3      	str	r3, [r6, #40]	; 0x28
 800b070:	89a3      	ldrh	r3, [r4, #12]
 800b072:	6020      	str	r0, [r4, #0]
 800b074:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b078:	81a3      	strh	r3, [r4, #12]
 800b07a:	9b00      	ldr	r3, [sp, #0]
 800b07c:	6163      	str	r3, [r4, #20]
 800b07e:	9b01      	ldr	r3, [sp, #4]
 800b080:	6120      	str	r0, [r4, #16]
 800b082:	b15b      	cbz	r3, 800b09c <__smakebuf_r+0x74>
 800b084:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b088:	4630      	mov	r0, r6
 800b08a:	f000 f8d1 	bl	800b230 <_isatty_r>
 800b08e:	b128      	cbz	r0, 800b09c <__smakebuf_r+0x74>
 800b090:	89a3      	ldrh	r3, [r4, #12]
 800b092:	f023 0303 	bic.w	r3, r3, #3
 800b096:	f043 0301 	orr.w	r3, r3, #1
 800b09a:	81a3      	strh	r3, [r4, #12]
 800b09c:	89a0      	ldrh	r0, [r4, #12]
 800b09e:	4305      	orrs	r5, r0
 800b0a0:	81a5      	strh	r5, [r4, #12]
 800b0a2:	e7cd      	b.n	800b040 <__smakebuf_r+0x18>
 800b0a4:	0800ae35 	.word	0x0800ae35

0800b0a8 <_malloc_usable_size_r>:
 800b0a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b0ac:	1f18      	subs	r0, r3, #4
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	bfbc      	itt	lt
 800b0b2:	580b      	ldrlt	r3, [r1, r0]
 800b0b4:	18c0      	addlt	r0, r0, r3
 800b0b6:	4770      	bx	lr

0800b0b8 <_raise_r>:
 800b0b8:	291f      	cmp	r1, #31
 800b0ba:	b538      	push	{r3, r4, r5, lr}
 800b0bc:	4604      	mov	r4, r0
 800b0be:	460d      	mov	r5, r1
 800b0c0:	d904      	bls.n	800b0cc <_raise_r+0x14>
 800b0c2:	2316      	movs	r3, #22
 800b0c4:	6003      	str	r3, [r0, #0]
 800b0c6:	f04f 30ff 	mov.w	r0, #4294967295
 800b0ca:	bd38      	pop	{r3, r4, r5, pc}
 800b0cc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b0ce:	b112      	cbz	r2, 800b0d6 <_raise_r+0x1e>
 800b0d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b0d4:	b94b      	cbnz	r3, 800b0ea <_raise_r+0x32>
 800b0d6:	4620      	mov	r0, r4
 800b0d8:	f000 f830 	bl	800b13c <_getpid_r>
 800b0dc:	462a      	mov	r2, r5
 800b0de:	4601      	mov	r1, r0
 800b0e0:	4620      	mov	r0, r4
 800b0e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b0e6:	f000 b817 	b.w	800b118 <_kill_r>
 800b0ea:	2b01      	cmp	r3, #1
 800b0ec:	d00a      	beq.n	800b104 <_raise_r+0x4c>
 800b0ee:	1c59      	adds	r1, r3, #1
 800b0f0:	d103      	bne.n	800b0fa <_raise_r+0x42>
 800b0f2:	2316      	movs	r3, #22
 800b0f4:	6003      	str	r3, [r0, #0]
 800b0f6:	2001      	movs	r0, #1
 800b0f8:	e7e7      	b.n	800b0ca <_raise_r+0x12>
 800b0fa:	2400      	movs	r4, #0
 800b0fc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b100:	4628      	mov	r0, r5
 800b102:	4798      	blx	r3
 800b104:	2000      	movs	r0, #0
 800b106:	e7e0      	b.n	800b0ca <_raise_r+0x12>

0800b108 <raise>:
 800b108:	4b02      	ldr	r3, [pc, #8]	; (800b114 <raise+0xc>)
 800b10a:	4601      	mov	r1, r0
 800b10c:	6818      	ldr	r0, [r3, #0]
 800b10e:	f7ff bfd3 	b.w	800b0b8 <_raise_r>
 800b112:	bf00      	nop
 800b114:	20000020 	.word	0x20000020

0800b118 <_kill_r>:
 800b118:	b538      	push	{r3, r4, r5, lr}
 800b11a:	4d07      	ldr	r5, [pc, #28]	; (800b138 <_kill_r+0x20>)
 800b11c:	2300      	movs	r3, #0
 800b11e:	4604      	mov	r4, r0
 800b120:	4608      	mov	r0, r1
 800b122:	4611      	mov	r1, r2
 800b124:	602b      	str	r3, [r5, #0]
 800b126:	f7f6 feff 	bl	8001f28 <_kill>
 800b12a:	1c43      	adds	r3, r0, #1
 800b12c:	d102      	bne.n	800b134 <_kill_r+0x1c>
 800b12e:	682b      	ldr	r3, [r5, #0]
 800b130:	b103      	cbz	r3, 800b134 <_kill_r+0x1c>
 800b132:	6023      	str	r3, [r4, #0]
 800b134:	bd38      	pop	{r3, r4, r5, pc}
 800b136:	bf00      	nop
 800b138:	2000049c 	.word	0x2000049c

0800b13c <_getpid_r>:
 800b13c:	f7f6 beec 	b.w	8001f18 <_getpid>

0800b140 <__sread>:
 800b140:	b510      	push	{r4, lr}
 800b142:	460c      	mov	r4, r1
 800b144:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b148:	f000 f894 	bl	800b274 <_read_r>
 800b14c:	2800      	cmp	r0, #0
 800b14e:	bfab      	itete	ge
 800b150:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b152:	89a3      	ldrhlt	r3, [r4, #12]
 800b154:	181b      	addge	r3, r3, r0
 800b156:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b15a:	bfac      	ite	ge
 800b15c:	6563      	strge	r3, [r4, #84]	; 0x54
 800b15e:	81a3      	strhlt	r3, [r4, #12]
 800b160:	bd10      	pop	{r4, pc}

0800b162 <__swrite>:
 800b162:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b166:	461f      	mov	r7, r3
 800b168:	898b      	ldrh	r3, [r1, #12]
 800b16a:	05db      	lsls	r3, r3, #23
 800b16c:	4605      	mov	r5, r0
 800b16e:	460c      	mov	r4, r1
 800b170:	4616      	mov	r6, r2
 800b172:	d505      	bpl.n	800b180 <__swrite+0x1e>
 800b174:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b178:	2302      	movs	r3, #2
 800b17a:	2200      	movs	r2, #0
 800b17c:	f000 f868 	bl	800b250 <_lseek_r>
 800b180:	89a3      	ldrh	r3, [r4, #12]
 800b182:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b186:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b18a:	81a3      	strh	r3, [r4, #12]
 800b18c:	4632      	mov	r2, r6
 800b18e:	463b      	mov	r3, r7
 800b190:	4628      	mov	r0, r5
 800b192:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b196:	f000 b817 	b.w	800b1c8 <_write_r>

0800b19a <__sseek>:
 800b19a:	b510      	push	{r4, lr}
 800b19c:	460c      	mov	r4, r1
 800b19e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1a2:	f000 f855 	bl	800b250 <_lseek_r>
 800b1a6:	1c43      	adds	r3, r0, #1
 800b1a8:	89a3      	ldrh	r3, [r4, #12]
 800b1aa:	bf15      	itete	ne
 800b1ac:	6560      	strne	r0, [r4, #84]	; 0x54
 800b1ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b1b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b1b6:	81a3      	strheq	r3, [r4, #12]
 800b1b8:	bf18      	it	ne
 800b1ba:	81a3      	strhne	r3, [r4, #12]
 800b1bc:	bd10      	pop	{r4, pc}

0800b1be <__sclose>:
 800b1be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1c2:	f000 b813 	b.w	800b1ec <_close_r>
	...

0800b1c8 <_write_r>:
 800b1c8:	b538      	push	{r3, r4, r5, lr}
 800b1ca:	4d07      	ldr	r5, [pc, #28]	; (800b1e8 <_write_r+0x20>)
 800b1cc:	4604      	mov	r4, r0
 800b1ce:	4608      	mov	r0, r1
 800b1d0:	4611      	mov	r1, r2
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	602a      	str	r2, [r5, #0]
 800b1d6:	461a      	mov	r2, r3
 800b1d8:	f7f6 fedd 	bl	8001f96 <_write>
 800b1dc:	1c43      	adds	r3, r0, #1
 800b1de:	d102      	bne.n	800b1e6 <_write_r+0x1e>
 800b1e0:	682b      	ldr	r3, [r5, #0]
 800b1e2:	b103      	cbz	r3, 800b1e6 <_write_r+0x1e>
 800b1e4:	6023      	str	r3, [r4, #0]
 800b1e6:	bd38      	pop	{r3, r4, r5, pc}
 800b1e8:	2000049c 	.word	0x2000049c

0800b1ec <_close_r>:
 800b1ec:	b538      	push	{r3, r4, r5, lr}
 800b1ee:	4d06      	ldr	r5, [pc, #24]	; (800b208 <_close_r+0x1c>)
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	4604      	mov	r4, r0
 800b1f4:	4608      	mov	r0, r1
 800b1f6:	602b      	str	r3, [r5, #0]
 800b1f8:	f7f6 fee9 	bl	8001fce <_close>
 800b1fc:	1c43      	adds	r3, r0, #1
 800b1fe:	d102      	bne.n	800b206 <_close_r+0x1a>
 800b200:	682b      	ldr	r3, [r5, #0]
 800b202:	b103      	cbz	r3, 800b206 <_close_r+0x1a>
 800b204:	6023      	str	r3, [r4, #0]
 800b206:	bd38      	pop	{r3, r4, r5, pc}
 800b208:	2000049c 	.word	0x2000049c

0800b20c <_fstat_r>:
 800b20c:	b538      	push	{r3, r4, r5, lr}
 800b20e:	4d07      	ldr	r5, [pc, #28]	; (800b22c <_fstat_r+0x20>)
 800b210:	2300      	movs	r3, #0
 800b212:	4604      	mov	r4, r0
 800b214:	4608      	mov	r0, r1
 800b216:	4611      	mov	r1, r2
 800b218:	602b      	str	r3, [r5, #0]
 800b21a:	f7f6 fee4 	bl	8001fe6 <_fstat>
 800b21e:	1c43      	adds	r3, r0, #1
 800b220:	d102      	bne.n	800b228 <_fstat_r+0x1c>
 800b222:	682b      	ldr	r3, [r5, #0]
 800b224:	b103      	cbz	r3, 800b228 <_fstat_r+0x1c>
 800b226:	6023      	str	r3, [r4, #0]
 800b228:	bd38      	pop	{r3, r4, r5, pc}
 800b22a:	bf00      	nop
 800b22c:	2000049c 	.word	0x2000049c

0800b230 <_isatty_r>:
 800b230:	b538      	push	{r3, r4, r5, lr}
 800b232:	4d06      	ldr	r5, [pc, #24]	; (800b24c <_isatty_r+0x1c>)
 800b234:	2300      	movs	r3, #0
 800b236:	4604      	mov	r4, r0
 800b238:	4608      	mov	r0, r1
 800b23a:	602b      	str	r3, [r5, #0]
 800b23c:	f7f6 fee3 	bl	8002006 <_isatty>
 800b240:	1c43      	adds	r3, r0, #1
 800b242:	d102      	bne.n	800b24a <_isatty_r+0x1a>
 800b244:	682b      	ldr	r3, [r5, #0]
 800b246:	b103      	cbz	r3, 800b24a <_isatty_r+0x1a>
 800b248:	6023      	str	r3, [r4, #0]
 800b24a:	bd38      	pop	{r3, r4, r5, pc}
 800b24c:	2000049c 	.word	0x2000049c

0800b250 <_lseek_r>:
 800b250:	b538      	push	{r3, r4, r5, lr}
 800b252:	4d07      	ldr	r5, [pc, #28]	; (800b270 <_lseek_r+0x20>)
 800b254:	4604      	mov	r4, r0
 800b256:	4608      	mov	r0, r1
 800b258:	4611      	mov	r1, r2
 800b25a:	2200      	movs	r2, #0
 800b25c:	602a      	str	r2, [r5, #0]
 800b25e:	461a      	mov	r2, r3
 800b260:	f7f6 fedc 	bl	800201c <_lseek>
 800b264:	1c43      	adds	r3, r0, #1
 800b266:	d102      	bne.n	800b26e <_lseek_r+0x1e>
 800b268:	682b      	ldr	r3, [r5, #0]
 800b26a:	b103      	cbz	r3, 800b26e <_lseek_r+0x1e>
 800b26c:	6023      	str	r3, [r4, #0]
 800b26e:	bd38      	pop	{r3, r4, r5, pc}
 800b270:	2000049c 	.word	0x2000049c

0800b274 <_read_r>:
 800b274:	b538      	push	{r3, r4, r5, lr}
 800b276:	4d07      	ldr	r5, [pc, #28]	; (800b294 <_read_r+0x20>)
 800b278:	4604      	mov	r4, r0
 800b27a:	4608      	mov	r0, r1
 800b27c:	4611      	mov	r1, r2
 800b27e:	2200      	movs	r2, #0
 800b280:	602a      	str	r2, [r5, #0]
 800b282:	461a      	mov	r2, r3
 800b284:	f7f6 fe6a 	bl	8001f5c <_read>
 800b288:	1c43      	adds	r3, r0, #1
 800b28a:	d102      	bne.n	800b292 <_read_r+0x1e>
 800b28c:	682b      	ldr	r3, [r5, #0]
 800b28e:	b103      	cbz	r3, 800b292 <_read_r+0x1e>
 800b290:	6023      	str	r3, [r4, #0]
 800b292:	bd38      	pop	{r3, r4, r5, pc}
 800b294:	2000049c 	.word	0x2000049c

0800b298 <trunc>:
 800b298:	ec51 0b10 	vmov	r0, r1, d0
 800b29c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b2a0:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800b2a4:	2b13      	cmp	r3, #19
 800b2a6:	b5d0      	push	{r4, r6, r7, lr}
 800b2a8:	460c      	mov	r4, r1
 800b2aa:	dc10      	bgt.n	800b2ce <trunc+0x36>
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	bfa5      	ittet	ge
 800b2b0:	4a11      	ldrge	r2, [pc, #68]	; (800b2f8 <trunc+0x60>)
 800b2b2:	fa42 f303 	asrge.w	r3, r2, r3
 800b2b6:	2100      	movlt	r1, #0
 800b2b8:	2100      	movge	r1, #0
 800b2ba:	bfb9      	ittee	lt
 800b2bc:	2000      	movlt	r0, #0
 800b2be:	f004 4100 	andlt.w	r1, r4, #2147483648	; 0x80000000
 800b2c2:	2000      	movge	r0, #0
 800b2c4:	ea24 0103 	bicge.w	r1, r4, r3
 800b2c8:	ec41 0b10 	vmov	d0, r0, r1
 800b2cc:	bdd0      	pop	{r4, r6, r7, pc}
 800b2ce:	2b33      	cmp	r3, #51	; 0x33
 800b2d0:	dd08      	ble.n	800b2e4 <trunc+0x4c>
 800b2d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b2d6:	d1f7      	bne.n	800b2c8 <trunc+0x30>
 800b2d8:	ee10 2a10 	vmov	r2, s0
 800b2dc:	460b      	mov	r3, r1
 800b2de:	f7f4 ffdd 	bl	800029c <__adddf3>
 800b2e2:	e7f1      	b.n	800b2c8 <trunc+0x30>
 800b2e4:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800b2e8:	f04f 33ff 	mov.w	r3, #4294967295
 800b2ec:	fa23 f202 	lsr.w	r2, r3, r2
 800b2f0:	ea20 0602 	bic.w	r6, r0, r2
 800b2f4:	4630      	mov	r0, r6
 800b2f6:	e7e7      	b.n	800b2c8 <trunc+0x30>
 800b2f8:	000fffff 	.word	0x000fffff

0800b2fc <ceilf>:
 800b2fc:	ee10 3a10 	vmov	r3, s0
 800b300:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800b304:	3a7f      	subs	r2, #127	; 0x7f
 800b306:	2a16      	cmp	r2, #22
 800b308:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b30c:	dc2a      	bgt.n	800b364 <ceilf+0x68>
 800b30e:	2a00      	cmp	r2, #0
 800b310:	da11      	bge.n	800b336 <ceilf+0x3a>
 800b312:	eddf 7a19 	vldr	s15, [pc, #100]	; 800b378 <ceilf+0x7c>
 800b316:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b31a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b31e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b322:	dd05      	ble.n	800b330 <ceilf+0x34>
 800b324:	2b00      	cmp	r3, #0
 800b326:	db23      	blt.n	800b370 <ceilf+0x74>
 800b328:	2900      	cmp	r1, #0
 800b32a:	bf18      	it	ne
 800b32c:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 800b330:	ee00 3a10 	vmov	s0, r3
 800b334:	4770      	bx	lr
 800b336:	4911      	ldr	r1, [pc, #68]	; (800b37c <ceilf+0x80>)
 800b338:	4111      	asrs	r1, r2
 800b33a:	420b      	tst	r3, r1
 800b33c:	d0fa      	beq.n	800b334 <ceilf+0x38>
 800b33e:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800b378 <ceilf+0x7c>
 800b342:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b346:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b34a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b34e:	ddef      	ble.n	800b330 <ceilf+0x34>
 800b350:	2b00      	cmp	r3, #0
 800b352:	bfc2      	ittt	gt
 800b354:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 800b358:	fa40 f202 	asrgt.w	r2, r0, r2
 800b35c:	189b      	addgt	r3, r3, r2
 800b35e:	ea23 0301 	bic.w	r3, r3, r1
 800b362:	e7e5      	b.n	800b330 <ceilf+0x34>
 800b364:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800b368:	d3e4      	bcc.n	800b334 <ceilf+0x38>
 800b36a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b36e:	4770      	bx	lr
 800b370:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b374:	e7dc      	b.n	800b330 <ceilf+0x34>
 800b376:	bf00      	nop
 800b378:	7149f2ca 	.word	0x7149f2ca
 800b37c:	007fffff 	.word	0x007fffff

0800b380 <_init>:
 800b380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b382:	bf00      	nop
 800b384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b386:	bc08      	pop	{r3}
 800b388:	469e      	mov	lr, r3
 800b38a:	4770      	bx	lr

0800b38c <_fini>:
 800b38c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b38e:	bf00      	nop
 800b390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b392:	bc08      	pop	{r3}
 800b394:	469e      	mov	lr, r3
 800b396:	4770      	bx	lr
