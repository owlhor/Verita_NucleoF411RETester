
F411_Verita_Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c510  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001554  0800c6b0  0800c6b0  0001c6b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dc04  0800dc04  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800dc04  0800dc04  0001dc04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dc0c  0800dc0c  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dc0c  0800dc0c  0001dc0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dc10  0800dc10  0001dc10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800dc14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004c4  200001f8  0800de0c  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006bc  0800de0c  000206bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000178f4  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003135  00000000  00000000  00037b1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014e8  00000000  00000000  0003ac58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001398  00000000  00000000  0003c140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019dbf  00000000  00000000  0003d4d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001877c  00000000  00000000  00057297  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098e04  00000000  00000000  0006fa13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00108817  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a24  00000000  00000000  00108868  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f8 	.word	0x200001f8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c698 	.word	0x0800c698

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001fc 	.word	0x200001fc
 80001dc:	0800c698 	.word	0x0800c698

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b974 	b.w	8000f98 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468e      	mov	lr, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14d      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4694      	mov	ip, r2
 8000cda:	d969      	bls.n	8000db0 <__udivmoddi4+0xe8>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b152      	cbz	r2, 8000cf8 <__udivmoddi4+0x30>
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	f1c2 0120 	rsb	r1, r2, #32
 8000cea:	fa20 f101 	lsr.w	r1, r0, r1
 8000cee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cf6:	4094      	lsls	r4, r2
 8000cf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cfc:	0c21      	lsrs	r1, r4, #16
 8000cfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000d02:	fa1f f78c 	uxth.w	r7, ip
 8000d06:	fb08 e316 	mls	r3, r8, r6, lr
 8000d0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d0e:	fb06 f107 	mul.w	r1, r6, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1e:	f080 811f 	bcs.w	8000f60 <__udivmoddi4+0x298>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 811c 	bls.w	8000f60 <__udivmoddi4+0x298>
 8000d28:	3e02      	subs	r6, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a5b      	subs	r3, r3, r1
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d34:	fb08 3310 	mls	r3, r8, r0, r3
 8000d38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d3c:	fb00 f707 	mul.w	r7, r0, r7
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x92>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4c:	f080 810a 	bcs.w	8000f64 <__udivmoddi4+0x29c>
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	f240 8107 	bls.w	8000f64 <__udivmoddi4+0x29c>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5e:	1be4      	subs	r4, r4, r7
 8000d60:	2600      	movs	r6, #0
 8000d62:	b11d      	cbz	r5, 8000d6c <__udivmoddi4+0xa4>
 8000d64:	40d4      	lsrs	r4, r2
 8000d66:	2300      	movs	r3, #0
 8000d68:	e9c5 4300 	strd	r4, r3, [r5]
 8000d6c:	4631      	mov	r1, r6
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0xc2>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	f000 80ef 	beq.w	8000f5a <__udivmoddi4+0x292>
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d82:	4630      	mov	r0, r6
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f683 	clz	r6, r3
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	d14a      	bne.n	8000e28 <__udivmoddi4+0x160>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xd4>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80f9 	bhi.w	8000f8e <__udivmoddi4+0x2c6>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	469e      	mov	lr, r3
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d0e0      	beq.n	8000d6c <__udivmoddi4+0xa4>
 8000daa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dae:	e7dd      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000db0:	b902      	cbnz	r2, 8000db4 <__udivmoddi4+0xec>
 8000db2:	deff      	udf	#255	; 0xff
 8000db4:	fab2 f282 	clz	r2, r2
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	f040 8092 	bne.w	8000ee2 <__udivmoddi4+0x21a>
 8000dbe:	eba1 010c 	sub.w	r1, r1, ip
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f fe8c 	uxth.w	lr, ip
 8000dca:	2601      	movs	r6, #1
 8000dcc:	0c20      	lsrs	r0, r4, #16
 8000dce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dda:	fb0e f003 	mul.w	r0, lr, r3
 8000dde:	4288      	cmp	r0, r1
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x12c>
 8000de2:	eb1c 0101 	adds.w	r1, ip, r1
 8000de6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x12a>
 8000dec:	4288      	cmp	r0, r1
 8000dee:	f200 80cb 	bhi.w	8000f88 <__udivmoddi4+0x2c0>
 8000df2:	4643      	mov	r3, r8
 8000df4:	1a09      	subs	r1, r1, r0
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000e00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e04:	fb0e fe00 	mul.w	lr, lr, r0
 8000e08:	45a6      	cmp	lr, r4
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x156>
 8000e0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e14:	d202      	bcs.n	8000e1c <__udivmoddi4+0x154>
 8000e16:	45a6      	cmp	lr, r4
 8000e18:	f200 80bb 	bhi.w	8000f92 <__udivmoddi4+0x2ca>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	eba4 040e 	sub.w	r4, r4, lr
 8000e22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e26:	e79c      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000e28:	f1c6 0720 	rsb	r7, r6, #32
 8000e2c:	40b3      	lsls	r3, r6
 8000e2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e36:	fa20 f407 	lsr.w	r4, r0, r7
 8000e3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3e:	431c      	orrs	r4, r3
 8000e40:	40f9      	lsrs	r1, r7
 8000e42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e46:	fa00 f306 	lsl.w	r3, r0, r6
 8000e4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e4e:	0c20      	lsrs	r0, r4, #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fb09 1118 	mls	r1, r9, r8, r1
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e60:	4288      	cmp	r0, r1
 8000e62:	fa02 f206 	lsl.w	r2, r2, r6
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x1b8>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e70:	f080 8088 	bcs.w	8000f84 <__udivmoddi4+0x2bc>
 8000e74:	4288      	cmp	r0, r1
 8000e76:	f240 8085 	bls.w	8000f84 <__udivmoddi4+0x2bc>
 8000e7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e88:	fb09 1110 	mls	r1, r9, r0, r1
 8000e8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e94:	458e      	cmp	lr, r1
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x1e2>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea0:	d26c      	bcs.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea2:	458e      	cmp	lr, r1
 8000ea4:	d96a      	bls.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4461      	add	r1, ip
 8000eaa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eae:	fba0 9402 	umull	r9, r4, r0, r2
 8000eb2:	eba1 010e 	sub.w	r1, r1, lr
 8000eb6:	42a1      	cmp	r1, r4
 8000eb8:	46c8      	mov	r8, r9
 8000eba:	46a6      	mov	lr, r4
 8000ebc:	d356      	bcc.n	8000f6c <__udivmoddi4+0x2a4>
 8000ebe:	d053      	beq.n	8000f68 <__udivmoddi4+0x2a0>
 8000ec0:	b15d      	cbz	r5, 8000eda <__udivmoddi4+0x212>
 8000ec2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ec6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eca:	fa01 f707 	lsl.w	r7, r1, r7
 8000ece:	fa22 f306 	lsr.w	r3, r2, r6
 8000ed2:	40f1      	lsrs	r1, r6
 8000ed4:	431f      	orrs	r7, r3
 8000ed6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eda:	2600      	movs	r6, #0
 8000edc:	4631      	mov	r1, r6
 8000ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee2:	f1c2 0320 	rsb	r3, r2, #32
 8000ee6:	40d8      	lsrs	r0, r3
 8000ee8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eec:	fa21 f303 	lsr.w	r3, r1, r3
 8000ef0:	4091      	lsls	r1, r2
 8000ef2:	4301      	orrs	r1, r0
 8000ef4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef8:	fa1f fe8c 	uxth.w	lr, ip
 8000efc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f00:	fb07 3610 	mls	r6, r7, r0, r3
 8000f04:	0c0b      	lsrs	r3, r1, #16
 8000f06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f0e:	429e      	cmp	r6, r3
 8000f10:	fa04 f402 	lsl.w	r4, r4, r2
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x260>
 8000f16:	eb1c 0303 	adds.w	r3, ip, r3
 8000f1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f1e:	d22f      	bcs.n	8000f80 <__udivmoddi4+0x2b8>
 8000f20:	429e      	cmp	r6, r3
 8000f22:	d92d      	bls.n	8000f80 <__udivmoddi4+0x2b8>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4463      	add	r3, ip
 8000f28:	1b9b      	subs	r3, r3, r6
 8000f2a:	b289      	uxth	r1, r1
 8000f2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f30:	fb07 3316 	mls	r3, r7, r6, r3
 8000f34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f38:	fb06 f30e 	mul.w	r3, r6, lr
 8000f3c:	428b      	cmp	r3, r1
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x28a>
 8000f40:	eb1c 0101 	adds.w	r1, ip, r1
 8000f44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f48:	d216      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d914      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4e:	3e02      	subs	r6, #2
 8000f50:	4461      	add	r1, ip
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f58:	e738      	b.n	8000dcc <__udivmoddi4+0x104>
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e705      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e3      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6f8      	b.n	8000d5a <__udivmoddi4+0x92>
 8000f68:	454b      	cmp	r3, r9
 8000f6a:	d2a9      	bcs.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7a3      	b.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f78:	4646      	mov	r6, r8
 8000f7a:	e7ea      	b.n	8000f52 <__udivmoddi4+0x28a>
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	e794      	b.n	8000eaa <__udivmoddi4+0x1e2>
 8000f80:	4640      	mov	r0, r8
 8000f82:	e7d1      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f84:	46d0      	mov	r8, sl
 8000f86:	e77b      	b.n	8000e80 <__udivmoddi4+0x1b8>
 8000f88:	3b02      	subs	r3, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	e732      	b.n	8000df4 <__udivmoddi4+0x12c>
 8000f8e:	4630      	mov	r0, r6
 8000f90:	e709      	b.n	8000da6 <__udivmoddi4+0xde>
 8000f92:	4464      	add	r4, ip
 8000f94:	3802      	subs	r0, #2
 8000f96:	e742      	b.n	8000e1e <__udivmoddi4+0x156>

08000f98 <__aeabi_idiv0>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <INA219Read_cx>:
 *  D16[1] :  00 CD  // D8[ 3 2 ]
 *  D16[1] | D16[0] = ABCD
 * */


uint16_t INA219Read_cx(I2C_HandleTypeDef *hi2c,uint8_t dv_addr, uint8_t ina_rg){
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b086      	sub	sp, #24
 8000fa0:	af04      	add	r7, sp, #16
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	70fb      	strb	r3, [r7, #3]
 8000fa8:	4613      	mov	r3, r2
 8000faa:	70bb      	strb	r3, [r7, #2]
	 * @param : ina_rg - register address need to access
	 * @Retval: raw bit value
	 * @ex. answer = INA219Read_cx(&hi2c1, INA219_ADDR_1, INA219_RG_Current);
	 * */

	INACBffr.D32 = 0; //// buffer clear
 8000fac:	4b0d      	ldr	r3, [pc, #52]	; (8000fe4 <INA219Read_cx+0x48>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	601a      	str	r2, [r3, #0]
	HAL_I2C_Mem_Read(hi2c, dv_addr, ina_rg, I2C_MEMADD_SIZE_8BIT, &INACBffr.D8[1], 2, 10);
 8000fb2:	78fb      	ldrb	r3, [r7, #3]
 8000fb4:	b299      	uxth	r1, r3
 8000fb6:	78bb      	ldrb	r3, [r7, #2]
 8000fb8:	b29a      	uxth	r2, r3
 8000fba:	230a      	movs	r3, #10
 8000fbc:	9302      	str	r3, [sp, #8]
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	9301      	str	r3, [sp, #4]
 8000fc2:	4b09      	ldr	r3, [pc, #36]	; (8000fe8 <INA219Read_cx+0x4c>)
 8000fc4:	9300      	str	r3, [sp, #0]
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	6878      	ldr	r0, [r7, #4]
 8000fca:	f003 fca9 	bl	8004920 <HAL_I2C_Mem_Read>
	return INACBffr.D16[1] | INACBffr.D16[0];
 8000fce:	4b05      	ldr	r3, [pc, #20]	; (8000fe4 <INA219Read_cx+0x48>)
 8000fd0:	885a      	ldrh	r2, [r3, #2]
 8000fd2:	4b04      	ldr	r3, [pc, #16]	; (8000fe4 <INA219Read_cx+0x48>)
 8000fd4:	881b      	ldrh	r3, [r3, #0]
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	b29b      	uxth	r3, r3
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	20000214 	.word	0x20000214
 8000fe8:	20000215 	.word	0x20000215
 8000fec:	00000000 	.word	0x00000000

08000ff0 <INA219_INIT_Calibrate>:
	HAL_I2C_Mem_Write(hi2c, dv_addr, INA219_RG_Config, I2C_MEMADD_SIZE_8BIT, &resetx, 2, 10);

}

INA219_Conf_Strc configura;
void INA219_INIT_Calibrate(I2C_HandleTypeDef *hi2c,uint8_t dv_addr){
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b08a      	sub	sp, #40	; 0x28
 8000ff4:	af04      	add	r7, sp, #16
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	70fb      	strb	r3, [r7, #3]
	 * @param : hi2c - HAL_I2C used to read
	 * @param : dv_addr - address of INA219 device in the busline
	 * */

	////// -------------------- Configuration -------------------------------------
	configura.INA219CF.reset = 0;
 8000ffc:	4a52      	ldr	r2, [pc, #328]	; (8001148 <INA219_INIT_Calibrate+0x158>)
 8000ffe:	7853      	ldrb	r3, [r2, #1]
 8001000:	f36f 13c7 	bfc	r3, #7, #1
 8001004:	7053      	strb	r3, [r2, #1]
	configura.INA219CF.BRNG = BRNG_FSR_32V;
 8001006:	4a50      	ldr	r2, [pc, #320]	; (8001148 <INA219_INIT_Calibrate+0x158>)
 8001008:	7853      	ldrb	r3, [r2, #1]
 800100a:	f043 0320 	orr.w	r3, r3, #32
 800100e:	7053      	strb	r3, [r2, #1]
	configura.INA219CF.PGA = PGA_GainD4_160mv;
 8001010:	4a4d      	ldr	r2, [pc, #308]	; (8001148 <INA219_INIT_Calibrate+0x158>)
 8001012:	7853      	ldrb	r3, [r2, #1]
 8001014:	2102      	movs	r1, #2
 8001016:	f361 03c4 	bfi	r3, r1, #3, #2
 800101a:	7053      	strb	r3, [r2, #1]
	configura.INA219CF.BADC = ADCI_12bit_532uS;
 800101c:	4a4a      	ldr	r2, [pc, #296]	; (8001148 <INA219_INIT_Calibrate+0x158>)
 800101e:	8813      	ldrh	r3, [r2, #0]
 8001020:	2103      	movs	r1, #3
 8001022:	f361 13ca 	bfi	r3, r1, #7, #4
 8001026:	8013      	strh	r3, [r2, #0]
	configura.INA219CF.SADC = ADCI_12bit_532uS;
 8001028:	4a47      	ldr	r2, [pc, #284]	; (8001148 <INA219_INIT_Calibrate+0x158>)
 800102a:	7813      	ldrb	r3, [r2, #0]
 800102c:	2103      	movs	r1, #3
 800102e:	f361 03c6 	bfi	r3, r1, #3, #4
 8001032:	7013      	strb	r3, [r2, #0]
	configura.INA219CF.Mode = INAM_ShuntBusV_Continuous;
 8001034:	4a44      	ldr	r2, [pc, #272]	; (8001148 <INA219_INIT_Calibrate+0x158>)
 8001036:	7813      	ldrb	r3, [r2, #0]
 8001038:	f043 0307 	orr.w	r3, r3, #7
 800103c:	7013      	strb	r3, [r2, #0]

	uint8_t confictor_si2c[2] = {configura.D8[1], configura.D8[0]};
 800103e:	4b42      	ldr	r3, [pc, #264]	; (8001148 <INA219_INIT_Calibrate+0x158>)
 8001040:	785b      	ldrb	r3, [r3, #1]
 8001042:	753b      	strb	r3, [r7, #20]
 8001044:	4b40      	ldr	r3, [pc, #256]	; (8001148 <INA219_INIT_Calibrate+0x158>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	757b      	strb	r3, [r7, #21]
	HAL_I2C_Mem_Write(hi2c, dv_addr, INA219_RG_Config, I2C_MEMADD_SIZE_8BIT, &confictor_si2c[0], 2, 10);
 800104a:	78fb      	ldrb	r3, [r7, #3]
 800104c:	b299      	uxth	r1, r3
 800104e:	230a      	movs	r3, #10
 8001050:	9302      	str	r3, [sp, #8]
 8001052:	2302      	movs	r3, #2
 8001054:	9301      	str	r3, [sp, #4]
 8001056:	f107 0314 	add.w	r3, r7, #20
 800105a:	9300      	str	r3, [sp, #0]
 800105c:	2301      	movs	r3, #1
 800105e:	2200      	movs	r2, #0
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f003 fb63 	bl	800472c <HAL_I2C_Mem_Write>
		uint16_t U16;
	}calibrator;

	// float current_LSB = INA219_MAX_Expect_Current / 32768.0; // 2^15
	//calibrator.U16 = (int16_t)(trunc( 0.04096 / (current_LSB * INA219_R_SHUNT_Val))) << 1;
	calibrator.U16 = trunc( 0.04096 / (current_LSB * INA219_R_SHUNT_Val));
 8001066:	4b39      	ldr	r3, [pc, #228]	; (800114c <INA219_INIT_Calibrate+0x15c>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff fa74 	bl	8000558 <__aeabi_f2d>
 8001070:	a32d      	add	r3, pc, #180	; (adr r3, 8001128 <INA219_INIT_Calibrate+0x138>)
 8001072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001076:	f7ff fac7 	bl	8000608 <__aeabi_dmul>
 800107a:	4602      	mov	r2, r0
 800107c:	460b      	mov	r3, r1
 800107e:	a12c      	add	r1, pc, #176	; (adr r1, 8001130 <INA219_INIT_Calibrate+0x140>)
 8001080:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001084:	f7ff fbea 	bl	800085c <__aeabi_ddiv>
 8001088:	4602      	mov	r2, r0
 800108a:	460b      	mov	r3, r1
 800108c:	ec43 2b17 	vmov	d7, r2, r3
 8001090:	eeb0 0a47 	vmov.f32	s0, s14
 8001094:	eef0 0a67 	vmov.f32	s1, s15
 8001098:	f00b fa8a 	bl	800c5b0 <trunc>
 800109c:	ec53 2b10 	vmov	r2, r3, d0
 80010a0:	4610      	mov	r0, r2
 80010a2:	4619      	mov	r1, r3
 80010a4:	f7ff fd88 	bl	8000bb8 <__aeabi_d2uiz>
 80010a8:	4603      	mov	r3, r0
 80010aa:	b29b      	uxth	r3, r3
 80010ac:	823b      	strh	r3, [r7, #16]
#ifdef calibrate_EQ6
	calibrator.U16 = trunc((calibrator.U16 * MeaShuntCurrent_ExtMeter) / INA219_Current_Raw);
 80010ae:	8a3b      	ldrh	r3, [r7, #16]
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff fa3f 	bl	8000534 <__aeabi_i2d>
 80010b6:	a320      	add	r3, pc, #128	; (adr r3, 8001138 <INA219_INIT_Calibrate+0x148>)
 80010b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010bc:	f7ff faa4 	bl	8000608 <__aeabi_dmul>
 80010c0:	4602      	mov	r2, r0
 80010c2:	460b      	mov	r3, r1
 80010c4:	4610      	mov	r0, r2
 80010c6:	4619      	mov	r1, r3
 80010c8:	a31d      	add	r3, pc, #116	; (adr r3, 8001140 <INA219_INIT_Calibrate+0x150>)
 80010ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ce:	f7ff fbc5 	bl	800085c <__aeabi_ddiv>
 80010d2:	4602      	mov	r2, r0
 80010d4:	460b      	mov	r3, r1
 80010d6:	ec43 2b17 	vmov	d7, r2, r3
 80010da:	eeb0 0a47 	vmov.f32	s0, s14
 80010de:	eef0 0a67 	vmov.f32	s1, s15
 80010e2:	f00b fa65 	bl	800c5b0 <trunc>
 80010e6:	ec53 2b10 	vmov	r2, r3, d0
 80010ea:	4610      	mov	r0, r2
 80010ec:	4619      	mov	r1, r3
 80010ee:	f7ff fd63 	bl	8000bb8 <__aeabi_d2uiz>
 80010f2:	4603      	mov	r3, r0
 80010f4:	b29b      	uxth	r3, r3
 80010f6:	823b      	strh	r3, [r7, #16]
#endif
	uint8_t calibrator_si2c[2] = {calibrator.U8[1], calibrator.U8[0]}; //// switch byte to send high order first in I2C
 80010f8:	7c7b      	ldrb	r3, [r7, #17]
 80010fa:	733b      	strb	r3, [r7, #12]
 80010fc:	7c3b      	ldrb	r3, [r7, #16]
 80010fe:	737b      	strb	r3, [r7, #13]
	////  ex calibrator(I = 3A, 0.1Rshunt) = 4473 = 0x1179

	HAL_I2C_Mem_Write(hi2c, dv_addr, INA219_RG_Calibra, I2C_MEMADD_SIZE_8BIT, &calibrator_si2c[0], 2, 10);
 8001100:	78fb      	ldrb	r3, [r7, #3]
 8001102:	b299      	uxth	r1, r3
 8001104:	230a      	movs	r3, #10
 8001106:	9302      	str	r3, [sp, #8]
 8001108:	2302      	movs	r3, #2
 800110a:	9301      	str	r3, [sp, #4]
 800110c:	f107 030c 	add.w	r3, r7, #12
 8001110:	9300      	str	r3, [sp, #0]
 8001112:	2301      	movs	r3, #1
 8001114:	2205      	movs	r2, #5
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f003 fb08 	bl	800472c <HAL_I2C_Mem_Write>

}
 800111c:	bf00      	nop
 800111e:	3718      	adds	r7, #24
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	f3af 8000 	nop.w
 8001128:	9999999a 	.word	0x9999999a
 800112c:	3fb99999 	.word	0x3fb99999
 8001130:	88e368f1 	.word	0x88e368f1
 8001134:	3fa4f8b5 	.word	0x3fa4f8b5
 8001138:	9999999a 	.word	0x9999999a
 800113c:	3fe99999 	.word	0x3fe99999
 8001140:	9999999a 	.word	0x9999999a
 8001144:	40059999 	.word	0x40059999
 8001148:	20000218 	.word	0x20000218
 800114c:	20000000 	.word	0x20000000

08001150 <INA219Read_BusV>:
	uint8_t calibrator_si2c[2] = {calibrator.U8[1], calibrator.U8[0]}; //// switch byte to send high order first in I2C
	HAL_I2C_Mem_Write(hi2c, dv_addr, INA219_RG_Calibra, I2C_MEMADD_SIZE_8BIT, &calibrator_si2c[0], 2, 10);

}

uint16_t INA219Read_BusV(I2C_HandleTypeDef *hi2c,uint8_t dv_addr){
 8001150:	b580      	push	{r7, lr}
 8001152:	b086      	sub	sp, #24
 8001154:	af04      	add	r7, sp, #16
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	460b      	mov	r3, r1
 800115a:	70fb      	strb	r3, [r7, #3]
	//	if(INACBffr[2] & 0x01){ // still unsure how to deal with CNVR / OVF
//
//	}


	INACBffr.D32 = 0; //// buffer clear
 800115c:	4b0e      	ldr	r3, [pc, #56]	; (8001198 <INA219Read_BusV+0x48>)
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
	HAL_I2C_Mem_Read(hi2c, dv_addr, INA219_RG_BusV, I2C_MEMADD_SIZE_8BIT, &INACBffr.D8[1], 2, 10);
 8001162:	78fb      	ldrb	r3, [r7, #3]
 8001164:	b299      	uxth	r1, r3
 8001166:	230a      	movs	r3, #10
 8001168:	9302      	str	r3, [sp, #8]
 800116a:	2302      	movs	r3, #2
 800116c:	9301      	str	r3, [sp, #4]
 800116e:	4b0b      	ldr	r3, [pc, #44]	; (800119c <INA219Read_BusV+0x4c>)
 8001170:	9300      	str	r3, [sp, #0]
 8001172:	2301      	movs	r3, #1
 8001174:	2202      	movs	r2, #2
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f003 fbd2 	bl	8004920 <HAL_I2C_Mem_Read>

	return ((INACBffr.D16[1] | INACBffr.D16[0]) >> 3) * 4;
 800117c:	4b06      	ldr	r3, [pc, #24]	; (8001198 <INA219Read_BusV+0x48>)
 800117e:	885a      	ldrh	r2, [r3, #2]
 8001180:	4b05      	ldr	r3, [pc, #20]	; (8001198 <INA219Read_BusV+0x48>)
 8001182:	881b      	ldrh	r3, [r3, #0]
 8001184:	4313      	orrs	r3, r2
 8001186:	b29b      	uxth	r3, r3
 8001188:	08db      	lsrs	r3, r3, #3
 800118a:	b29b      	uxth	r3, r3
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	b29b      	uxth	r3, r3
}
 8001190:	4618      	mov	r0, r3
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	20000214 	.word	0x20000214
 800119c:	20000215 	.word	0x20000215

080011a0 <INA219Read_Current>:

uint16_t INA219Read_Current(I2C_HandleTypeDef *hi2c,uint8_t dv_addr){
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b086      	sub	sp, #24
 80011a4:	af04      	add	r7, sp, #16
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	460b      	mov	r3, r1
 80011aa:	70fb      	strb	r3, [r7, #3]
	 * @param : hi2c - HAL_I2C used to read
	 * @param : dv_addr - address of INA219 device in the busline
	 * @Retval: current in mA
	 * @ex.
	 * */
	INACBffr.D32 = 0; //// buffer clear
 80011ac:	4b0c      	ldr	r3, [pc, #48]	; (80011e0 <INA219Read_Current+0x40>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
	HAL_I2C_Mem_Read(hi2c, dv_addr, INA219_RG_Current, I2C_MEMADD_SIZE_8BIT, &INACBffr.D8[1], 2, 10);
 80011b2:	78fb      	ldrb	r3, [r7, #3]
 80011b4:	b299      	uxth	r1, r3
 80011b6:	230a      	movs	r3, #10
 80011b8:	9302      	str	r3, [sp, #8]
 80011ba:	2302      	movs	r3, #2
 80011bc:	9301      	str	r3, [sp, #4]
 80011be:	4b09      	ldr	r3, [pc, #36]	; (80011e4 <INA219Read_Current+0x44>)
 80011c0:	9300      	str	r3, [sp, #0]
 80011c2:	2301      	movs	r3, #1
 80011c4:	2204      	movs	r2, #4
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f003 fbaa 	bl	8004920 <HAL_I2C_Mem_Read>

	return INACBffr.D16[1] | INACBffr.D16[0];
 80011cc:	4b04      	ldr	r3, [pc, #16]	; (80011e0 <INA219Read_Current+0x40>)
 80011ce:	885a      	ldrh	r2, [r3, #2]
 80011d0:	4b03      	ldr	r3, [pc, #12]	; (80011e0 <INA219Read_Current+0x40>)
 80011d2:	881b      	ldrh	r3, [r3, #0]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	b29b      	uxth	r3, r3
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	20000214 	.word	0x20000214
 80011e4:	20000215 	.word	0x20000215

080011e8 <INA219Read_ShuntV>:

float INA219Read_ShuntV(I2C_HandleTypeDef *hi2c,uint8_t dv_addr){
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b088      	sub	sp, #32
 80011ec:	af04      	add	r7, sp, #16
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	460b      	mov	r3, r1
 80011f2:	70fb      	strb	r3, [r7, #3]
	 * @param : hi2c - HAL_I2C used to read
	 * @param : dv_addr - address of INA219 device in the busline
	 * @Retval: shunt voltage in mV (.2f)
	 * @ex.
	 * */
	INACBffr.D32 = 0; //// buffer clear
 80011f4:	4b17      	ldr	r3, [pc, #92]	; (8001254 <INA219Read_ShuntV+0x6c>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	601a      	str	r2, [r3, #0]
	HAL_I2C_Mem_Read(hi2c, dv_addr, INA219_RG_ShuntV, I2C_MEMADD_SIZE_8BIT, &INACBffr.D8[1], 2, 10);
 80011fa:	78fb      	ldrb	r3, [r7, #3]
 80011fc:	b299      	uxth	r1, r3
 80011fe:	230a      	movs	r3, #10
 8001200:	9302      	str	r3, [sp, #8]
 8001202:	2302      	movs	r3, #2
 8001204:	9301      	str	r3, [sp, #4]
 8001206:	4b14      	ldr	r3, [pc, #80]	; (8001258 <INA219Read_ShuntV+0x70>)
 8001208:	9300      	str	r3, [sp, #0]
 800120a:	2301      	movs	r3, #1
 800120c:	2201      	movs	r2, #1
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	f003 fb86 	bl	8004920 <HAL_I2C_Mem_Read>

	//// Convert rawdata To V shunt from Table 7.Shunt Voltage Register Format

    int16_t rawshunt = INACBffr.D16[1] | INACBffr.D16[0];
 8001214:	4b0f      	ldr	r3, [pc, #60]	; (8001254 <INA219Read_ShuntV+0x6c>)
 8001216:	885a      	ldrh	r2, [r3, #2]
 8001218:	4b0e      	ldr	r3, [pc, #56]	; (8001254 <INA219Read_ShuntV+0x6c>)
 800121a:	881b      	ldrh	r3, [r3, #0]
 800121c:	4313      	orrs	r3, r2
 800121e:	b29b      	uxth	r3, r3
 8001220:	81fb      	strh	r3, [r7, #14]
    return rawshunt / 100.0;
 8001222:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff f984 	bl	8000534 <__aeabi_i2d>
 800122c:	f04f 0200 	mov.w	r2, #0
 8001230:	4b0a      	ldr	r3, [pc, #40]	; (800125c <INA219Read_ShuntV+0x74>)
 8001232:	f7ff fb13 	bl	800085c <__aeabi_ddiv>
 8001236:	4602      	mov	r2, r0
 8001238:	460b      	mov	r3, r1
 800123a:	4610      	mov	r0, r2
 800123c:	4619      	mov	r1, r3
 800123e:	f7ff fcdb 	bl	8000bf8 <__aeabi_d2f>
 8001242:	4603      	mov	r3, r0
 8001244:	ee07 3a90 	vmov	s15, r3
//    	return rawshunt / 100.0;
//    }else{
//    	// if 2's complements
//    	return (~rawshunt + 1) / 100.0;
//    }
}
 8001248:	eeb0 0a67 	vmov.f32	s0, s15
 800124c:	3710      	adds	r7, #16
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	20000214 	.word	0x20000214
 8001258:	20000215 	.word	0x20000215
 800125c:	40590000 	.word	0x40590000

08001260 <INA219Read_Power>:

float INA219Read_Power(I2C_HandleTypeDef *hi2c,uint8_t dv_addr){
 8001260:	b5b0      	push	{r4, r5, r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af04      	add	r7, sp, #16
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	460b      	mov	r3, r1
 800126a:	70fb      	strb	r3, [r7, #3]
	 * @param : hi2c - HAL_I2C used to read
	 * @param : dv_addr - address of INA219 device in the busline
	 * @Retval: Power in mW
	 * @ex.
	 * */
	INACBffr.D32 = 0; //// buffer clear
 800126c:	4b1e      	ldr	r3, [pc, #120]	; (80012e8 <INA219Read_Power+0x88>)
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]
	HAL_I2C_Mem_Read(hi2c, dv_addr, INA219_RG_PoWer, I2C_MEMADD_SIZE_8BIT, &INACBffr.D8[1], 2, 10);
 8001272:	78fb      	ldrb	r3, [r7, #3]
 8001274:	b299      	uxth	r1, r3
 8001276:	230a      	movs	r3, #10
 8001278:	9302      	str	r3, [sp, #8]
 800127a:	2302      	movs	r3, #2
 800127c:	9301      	str	r3, [sp, #4]
 800127e:	4b1b      	ldr	r3, [pc, #108]	; (80012ec <INA219Read_Power+0x8c>)
 8001280:	9300      	str	r3, [sp, #0]
 8001282:	2301      	movs	r3, #1
 8001284:	2203      	movs	r2, #3
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f003 fb4a 	bl	8004920 <HAL_I2C_Mem_Read>
	////  * 20, power_LSB = 20 x current_LSB & x 1000 make unit in mW
	return ((INACBffr.D16[1] | INACBffr.D16[0]) * (20000.0 * current_LSB));
 800128c:	4b16      	ldr	r3, [pc, #88]	; (80012e8 <INA219Read_Power+0x88>)
 800128e:	885a      	ldrh	r2, [r3, #2]
 8001290:	4b15      	ldr	r3, [pc, #84]	; (80012e8 <INA219Read_Power+0x88>)
 8001292:	881b      	ldrh	r3, [r3, #0]
 8001294:	4313      	orrs	r3, r2
 8001296:	b29b      	uxth	r3, r3
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff f94b 	bl	8000534 <__aeabi_i2d>
 800129e:	4604      	mov	r4, r0
 80012a0:	460d      	mov	r5, r1
 80012a2:	4b13      	ldr	r3, [pc, #76]	; (80012f0 <INA219Read_Power+0x90>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff f956 	bl	8000558 <__aeabi_f2d>
 80012ac:	a30c      	add	r3, pc, #48	; (adr r3, 80012e0 <INA219Read_Power+0x80>)
 80012ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b2:	f7ff f9a9 	bl	8000608 <__aeabi_dmul>
 80012b6:	4602      	mov	r2, r0
 80012b8:	460b      	mov	r3, r1
 80012ba:	4620      	mov	r0, r4
 80012bc:	4629      	mov	r1, r5
 80012be:	f7ff f9a3 	bl	8000608 <__aeabi_dmul>
 80012c2:	4602      	mov	r2, r0
 80012c4:	460b      	mov	r3, r1
 80012c6:	4610      	mov	r0, r2
 80012c8:	4619      	mov	r1, r3
 80012ca:	f7ff fc95 	bl	8000bf8 <__aeabi_d2f>
 80012ce:	4603      	mov	r3, r0
 80012d0:	ee07 3a90 	vmov	s15, r3
}
 80012d4:	eeb0 0a67 	vmov.f32	s0, s15
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bdb0      	pop	{r4, r5, r7, pc}
 80012de:	bf00      	nop
 80012e0:	00000000 	.word	0x00000000
 80012e4:	40d38800 	.word	0x40d38800
 80012e8:	20000214 	.word	0x20000214
 80012ec:	20000215 	.word	0x20000215
 80012f0:	20000000 	.word	0x20000000

080012f4 <MCP3208_READ_8_DataSPI>:
/* Read using SPI 8 Bit Data size MSB first
 * Ex.
 * AA_bitread = MCP3208_READ_8_DataSPI(&hspi3, M8_CH0);
	VADC_cv =  MCP3208_ADCbit_to_Volt(AA_bitread); // 5 / 4096 * 0.00122
 * */
uint16_t MCP3208_READ_8_DataSPI(SPI_HandleTypeDef *hspi, MCP3208CHSelect M8_channel){
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b086      	sub	sp, #24
 80012f8:	af02      	add	r7, sp, #8
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	460b      	mov	r3, r1
 80012fe:	70fb      	strb	r3, [r7, #3]

	//// Shitty bitshift to the correct position Fig 6-1, MCP3208, MICROCHIP
	uint8_t D8_MOSI[3];
	uint8_t D8_MISO[3];
	D8_MOSI[0] = M8_channel >> 2;
 8001300:	78fb      	ldrb	r3, [r7, #3]
 8001302:	089b      	lsrs	r3, r3, #2
 8001304:	b2db      	uxtb	r3, r3
 8001306:	733b      	strb	r3, [r7, #12]
	D8_MOSI[1] = M8_channel << 6;
 8001308:	78fb      	ldrb	r3, [r7, #3]
 800130a:	019b      	lsls	r3, r3, #6
 800130c:	b2db      	uxtb	r3, r3
 800130e:	737b      	strb	r3, [r7, #13]


	HAL_GPIO_WritePin(MCP3208_SPI_CS_Port,MCP3208_SPI_CS_Pin , GPIO_PIN_RESET);
 8001310:	2200      	movs	r2, #0
 8001312:	2104      	movs	r1, #4
 8001314:	4810      	ldr	r0, [pc, #64]	; (8001358 <MCP3208_READ_8_DataSPI+0x64>)
 8001316:	f003 f879 	bl	800440c <HAL_GPIO_WritePin>

	HAL_SPI_TransmitReceive(hspi, &D8_MOSI[0], &D8_MISO[0], 3, 100);
 800131a:	f107 0208 	add.w	r2, r7, #8
 800131e:	f107 010c 	add.w	r1, r7, #12
 8001322:	2364      	movs	r3, #100	; 0x64
 8001324:	9300      	str	r3, [sp, #0]
 8001326:	2303      	movs	r3, #3
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f006 fa76 	bl	800781a <HAL_SPI_TransmitReceive>

	//HAL_SPI_Abort(hspi);
	HAL_GPIO_WritePin(MCP3208_SPI_CS_Port,MCP3208_SPI_CS_Pin , GPIO_PIN_SET);
 800132e:	2201      	movs	r2, #1
 8001330:	2104      	movs	r1, #4
 8001332:	4809      	ldr	r0, [pc, #36]	; (8001358 <MCP3208_READ_8_DataSPI+0x64>)
 8001334:	f003 f86a 	bl	800440c <HAL_GPIO_WritePin>

	return ((D8_MISO[1] << 8) + D8_MISO[2]) & 0x0FFF;
 8001338:	7a7b      	ldrb	r3, [r7, #9]
 800133a:	b29b      	uxth	r3, r3
 800133c:	021b      	lsls	r3, r3, #8
 800133e:	b29a      	uxth	r2, r3
 8001340:	7abb      	ldrb	r3, [r7, #10]
 8001342:	b29b      	uxth	r3, r3
 8001344:	4413      	add	r3, r2
 8001346:	b29b      	uxth	r3, r3
 8001348:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800134c:	b29b      	uxth	r3, r3
}
 800134e:	4618      	mov	r0, r3
 8001350:	3710      	adds	r7, #16
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	40020c00 	.word	0x40020c00
 800135c:	00000000 	.word	0x00000000

08001360 <MCP320x_ADCbit_to_Volt>:


float MCP320x_ADCbit_to_Volt(uint16_t adcbit){
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	4603      	mov	r3, r0
 8001368:	80fb      	strh	r3, [r7, #6]
	return adcbit * 0.00122; // 5/4096
 800136a:	88fb      	ldrh	r3, [r7, #6]
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff f8e1 	bl	8000534 <__aeabi_i2d>
 8001372:	a309      	add	r3, pc, #36	; (adr r3, 8001398 <MCP320x_ADCbit_to_Volt+0x38>)
 8001374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001378:	f7ff f946 	bl	8000608 <__aeabi_dmul>
 800137c:	4602      	mov	r2, r0
 800137e:	460b      	mov	r3, r1
 8001380:	4610      	mov	r0, r2
 8001382:	4619      	mov	r1, r3
 8001384:	f7ff fc38 	bl	8000bf8 <__aeabi_d2f>
 8001388:	4603      	mov	r3, r0
 800138a:	ee07 3a90 	vmov	s15, r3
}
 800138e:	eeb0 0a67 	vmov.f32	s0, s15
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	0678c005 	.word	0x0678c005
 800139c:	3f53fd0d 	.word	0x3f53fd0d

080013a0 <Rx_Verita_engine>:
  */


static enum {init, unpack, decode}verita_engine;

VRTPTC_StatusTypedef Rx_Verita_engine(uint8_t *Rxbffr, uint32_t *regisk){
 80013a0:	b490      	push	{r4, r7}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	6039      	str	r1, [r7, #0]
	 * @param Rxbffr - input uart buffer
	 * @param regisk - register need the result be stored
	 */
	static uint8_t logger[12] = {0}; /// log Rxbffr without head packet
	static uint8_t index = 0; // use in case the start of verita is not at Rxbffr[0]
	uint8_t chksum[2]  = {0};
 80013aa:	2300      	movs	r3, #0
 80013ac:	81bb      	strh	r3, [r7, #12]
		uint8_t  U8[4];
		uint32_t U32;
	}logu;


	switch (verita_engine){
 80013ae:	4b6f      	ldr	r3, [pc, #444]	; (800156c <Rx_Verita_engine+0x1cc>)
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	2b01      	cmp	r3, #1
 80013b4:	d023      	beq.n	80013fe <Rx_Verita_engine+0x5e>
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	f000 8082 	beq.w	80014c0 <Rx_Verita_engine+0x120>
	default:
	case init:

		if(Rxbffr[0 + index] == 0x56){ //flag_vrt_en ||
 80013bc:	4b6c      	ldr	r3, [pc, #432]	; (8001570 <Rx_Verita_engine+0x1d0>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	461a      	mov	r2, r3
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4413      	add	r3, r2
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	2b56      	cmp	r3, #86	; 0x56
 80013ca:	d103      	bne.n	80013d4 <Rx_Verita_engine+0x34>
			verita_engine = unpack;
 80013cc:	4b67      	ldr	r3, [pc, #412]	; (800156c <Rx_Verita_engine+0x1cc>)
 80013ce:	2201      	movs	r2, #1
 80013d0:	701a      	strb	r2, [r3, #0]
		}else{
		//// go to next index if head not found
		index+=9;
		index %= RxbufferSize_VRT; // overflow
		}
		break; //// init
 80013d2:	e0c4      	b.n	800155e <Rx_Verita_engine+0x1be>
		index+=9;
 80013d4:	4b66      	ldr	r3, [pc, #408]	; (8001570 <Rx_Verita_engine+0x1d0>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	3309      	adds	r3, #9
 80013da:	b2da      	uxtb	r2, r3
 80013dc:	4b64      	ldr	r3, [pc, #400]	; (8001570 <Rx_Verita_engine+0x1d0>)
 80013de:	701a      	strb	r2, [r3, #0]
		index %= RxbufferSize_VRT; // overflow
 80013e0:	4b63      	ldr	r3, [pc, #396]	; (8001570 <Rx_Verita_engine+0x1d0>)
 80013e2:	781a      	ldrb	r2, [r3, #0]
 80013e4:	4b63      	ldr	r3, [pc, #396]	; (8001574 <Rx_Verita_engine+0x1d4>)
 80013e6:	fba3 1302 	umull	r1, r3, r3, r2
 80013ea:	08d9      	lsrs	r1, r3, #3
 80013ec:	460b      	mov	r3, r1
 80013ee:	00db      	lsls	r3, r3, #3
 80013f0:	440b      	add	r3, r1
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	b2da      	uxtb	r2, r3
 80013f8:	4b5d      	ldr	r3, [pc, #372]	; (8001570 <Rx_Verita_engine+0x1d0>)
 80013fa:	701a      	strb	r2, [r3, #0]
		break; //// init
 80013fc:	e0af      	b.n	800155e <Rx_Verita_engine+0x1be>


	case unpack:

		//// [] Header Check ------------------------------------------------------------------
		if(Rxbffr[index + 0] == 0x56 && Rxbffr[index + 1] == 0x52 && Rxbffr[index + 2] == 0x54){
 80013fe:	4b5c      	ldr	r3, [pc, #368]	; (8001570 <Rx_Verita_engine+0x1d0>)
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	461a      	mov	r2, r3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	4413      	add	r3, r2
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	2b56      	cmp	r3, #86	; 0x56
 800140c:	d13f      	bne.n	800148e <Rx_Verita_engine+0xee>
 800140e:	4b58      	ldr	r3, [pc, #352]	; (8001570 <Rx_Verita_engine+0x1d0>)
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	3301      	adds	r3, #1
 8001414:	687a      	ldr	r2, [r7, #4]
 8001416:	4413      	add	r3, r2
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	2b52      	cmp	r3, #82	; 0x52
 800141c:	d137      	bne.n	800148e <Rx_Verita_engine+0xee>
 800141e:	4b54      	ldr	r3, [pc, #336]	; (8001570 <Rx_Verita_engine+0x1d0>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	3302      	adds	r3, #2
 8001424:	687a      	ldr	r2, [r7, #4]
 8001426:	4413      	add	r3, r2
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	2b54      	cmp	r3, #84	; 0x54
 800142c:	d12f      	bne.n	800148e <Rx_Verita_engine+0xee>

			//// log data first / prevent overwrite
			for(register int k = 0; k < 7; k++){
 800142e:	2400      	movs	r4, #0
 8001430:	e009      	b.n	8001446 <Rx_Verita_engine+0xa6>
				logger[k] = Rxbffr[index + k + 3];
 8001432:	4b4f      	ldr	r3, [pc, #316]	; (8001570 <Rx_Verita_engine+0x1d0>)
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	4423      	add	r3, r4
 8001438:	3303      	adds	r3, #3
 800143a:	687a      	ldr	r2, [r7, #4]
 800143c:	4413      	add	r3, r2
 800143e:	781a      	ldrb	r2, [r3, #0]
 8001440:	4b4d      	ldr	r3, [pc, #308]	; (8001578 <Rx_Verita_engine+0x1d8>)
 8001442:	551a      	strb	r2, [r3, r4]
			for(register int k = 0; k < 7; k++){
 8001444:	3401      	adds	r4, #1
 8001446:	2c06      	cmp	r4, #6
 8001448:	ddf3      	ble.n	8001432 <Rx_Verita_engine+0x92>
			}

			//// checksum here
			for(register int i = 0;i < 5; i++){
 800144a:	2400      	movs	r4, #0
 800144c:	e006      	b.n	800145c <Rx_Verita_engine+0xbc>
				chksum[0] += logger[i];
 800144e:	7b3a      	ldrb	r2, [r7, #12]
 8001450:	4b49      	ldr	r3, [pc, #292]	; (8001578 <Rx_Verita_engine+0x1d8>)
 8001452:	5d1b      	ldrb	r3, [r3, r4]
 8001454:	4413      	add	r3, r2
 8001456:	b2db      	uxtb	r3, r3
 8001458:	733b      	strb	r3, [r7, #12]
			for(register int i = 0;i < 5; i++){
 800145a:	3401      	adds	r4, #1
 800145c:	2c04      	cmp	r4, #4
 800145e:	ddf6      	ble.n	800144e <Rx_Verita_engine+0xae>
			}
			chksum[1] = ~chksum[0];
 8001460:	7b3b      	ldrb	r3, [r7, #12]
 8001462:	43db      	mvns	r3, r3
 8001464:	b2db      	uxtb	r3, r3
 8001466:	737b      	strb	r3, [r7, #13]
			if( chksum[1] == logger[5]){
 8001468:	7b7a      	ldrb	r2, [r7, #13]
 800146a:	4b43      	ldr	r3, [pc, #268]	; (8001578 <Rx_Verita_engine+0x1d8>)
 800146c:	795b      	ldrb	r3, [r3, #5]
 800146e:	429a      	cmp	r2, r3
 8001470:	d10b      	bne.n	800148a <Rx_Verita_engine+0xea>
				// pass
				//// mark that this data is already read
				Rxbffr[0 + index] = 0xFF;
 8001472:	4b3f      	ldr	r3, [pc, #252]	; (8001570 <Rx_Verita_engine+0x1d0>)
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	461a      	mov	r2, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	4413      	add	r3, r2
 800147c:	22ff      	movs	r2, #255	; 0xff
 800147e:	701a      	strb	r2, [r3, #0]
				verita_engine = decode;
 8001480:	4b3a      	ldr	r3, [pc, #232]	; (800156c <Rx_Verita_engine+0x1cc>)
 8001482:	2202      	movs	r2, #2
 8001484:	701a      	strb	r2, [r3, #0]
			if( chksum[1] == logger[5]){
 8001486:	bf00      	nop
//				Rxbffr[i] = 0x00;
//			}
			return VRT_UnEnc;

		}
		break; //// unpack
 8001488:	e069      	b.n	800155e <Rx_Verita_engine+0x1be>
				return VRT_DataLoss;}
 800148a:	2395      	movs	r3, #149	; 0x95
 800148c:	e068      	b.n	8001560 <Rx_Verita_engine+0x1c0>
			verita_engine = init;
 800148e:	4b37      	ldr	r3, [pc, #220]	; (800156c <Rx_Verita_engine+0x1cc>)
 8001490:	2200      	movs	r2, #0
 8001492:	701a      	strb	r2, [r3, #0]
			index+=9;
 8001494:	4b36      	ldr	r3, [pc, #216]	; (8001570 <Rx_Verita_engine+0x1d0>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	3309      	adds	r3, #9
 800149a:	b2da      	uxtb	r2, r3
 800149c:	4b34      	ldr	r3, [pc, #208]	; (8001570 <Rx_Verita_engine+0x1d0>)
 800149e:	701a      	strb	r2, [r3, #0]
			index %= RxbufferSize_VRT; // overflow
 80014a0:	4b33      	ldr	r3, [pc, #204]	; (8001570 <Rx_Verita_engine+0x1d0>)
 80014a2:	781a      	ldrb	r2, [r3, #0]
 80014a4:	4b33      	ldr	r3, [pc, #204]	; (8001574 <Rx_Verita_engine+0x1d4>)
 80014a6:	fba3 1302 	umull	r1, r3, r3, r2
 80014aa:	08d9      	lsrs	r1, r3, #3
 80014ac:	460b      	mov	r3, r1
 80014ae:	00db      	lsls	r3, r3, #3
 80014b0:	440b      	add	r3, r1
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	b2da      	uxtb	r2, r3
 80014b8:	4b2d      	ldr	r3, [pc, #180]	; (8001570 <Rx_Verita_engine+0x1d0>)
 80014ba:	701a      	strb	r2, [r3, #0]
			return VRT_UnEnc;
 80014bc:	2396      	movs	r3, #150	; 0x96
 80014be:	e04f      	b.n	8001560 <Rx_Verita_engine+0x1c0>

	case decode:
		verita_engine = init;
 80014c0:	4b2a      	ldr	r3, [pc, #168]	; (800156c <Rx_Verita_engine+0x1cc>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	701a      	strb	r2, [r3, #0]
		index += Framesize_VRT;
 80014c6:	4b2a      	ldr	r3, [pc, #168]	; (8001570 <Rx_Verita_engine+0x1d0>)
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	3309      	adds	r3, #9
 80014cc:	b2da      	uxtb	r2, r3
 80014ce:	4b28      	ldr	r3, [pc, #160]	; (8001570 <Rx_Verita_engine+0x1d0>)
 80014d0:	701a      	strb	r2, [r3, #0]
		index %= RxbufferSize_VRT; // overflow
 80014d2:	4b27      	ldr	r3, [pc, #156]	; (8001570 <Rx_Verita_engine+0x1d0>)
 80014d4:	781a      	ldrb	r2, [r3, #0]
 80014d6:	4b27      	ldr	r3, [pc, #156]	; (8001574 <Rx_Verita_engine+0x1d4>)
 80014d8:	fba3 1302 	umull	r1, r3, r3, r2
 80014dc:	08d9      	lsrs	r1, r3, #3
 80014de:	460b      	mov	r3, r1
 80014e0:	00db      	lsls	r3, r3, #3
 80014e2:	440b      	add	r3, r1
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	1ad3      	subs	r3, r2, r3
 80014e8:	b2da      	uxtb	r2, r3
 80014ea:	4b21      	ldr	r3, [pc, #132]	; (8001570 <Rx_Verita_engine+0x1d0>)
 80014ec:	701a      	strb	r2, [r3, #0]

		//// DATA phase, insert 32bit data into register box =================================
		if(logger[0] <= 0x20){
 80014ee:	4b22      	ldr	r3, [pc, #136]	; (8001578 <Rx_Verita_engine+0x1d8>)
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	2b20      	cmp	r3, #32
 80014f4:	d814      	bhi.n	8001520 <Rx_Verita_engine+0x180>
			logu.U8[2] = logger[2];
			logu.U8[1] = logger[3];
			logu.U8[0] = logger[4];
#else
			//// Little endian
			logu.U8[0] = logger[1];
 80014f6:	4b20      	ldr	r3, [pc, #128]	; (8001578 <Rx_Verita_engine+0x1d8>)
 80014f8:	785b      	ldrb	r3, [r3, #1]
 80014fa:	723b      	strb	r3, [r7, #8]
			logu.U8[1] = logger[2];
 80014fc:	4b1e      	ldr	r3, [pc, #120]	; (8001578 <Rx_Verita_engine+0x1d8>)
 80014fe:	789b      	ldrb	r3, [r3, #2]
 8001500:	727b      	strb	r3, [r7, #9]
			logu.U8[2] = logger[3];
 8001502:	4b1d      	ldr	r3, [pc, #116]	; (8001578 <Rx_Verita_engine+0x1d8>)
 8001504:	78db      	ldrb	r3, [r3, #3]
 8001506:	72bb      	strb	r3, [r7, #10]
			logu.U8[3] = logger[4];
 8001508:	4b1b      	ldr	r3, [pc, #108]	; (8001578 <Rx_Verita_engine+0x1d8>)
 800150a:	791b      	ldrb	r3, [r3, #4]
 800150c:	72fb      	strb	r3, [r7, #11]
#endif
			// place data into the request register
			regisk[logger[0]] = logu.U32;
 800150e:	4b1a      	ldr	r3, [pc, #104]	; (8001578 <Rx_Verita_engine+0x1d8>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	683a      	ldr	r2, [r7, #0]
 8001516:	4413      	add	r3, r2
 8001518:	68ba      	ldr	r2, [r7, #8]
 800151a:	601a      	str	r2, [r3, #0]


			return VRT_OK;
 800151c:	2391      	movs	r3, #145	; 0x91
 800151e:	e01f      	b.n	8001560 <Rx_Verita_engine+0x1c0>
		} //// -------------------------------------------------------------------------------

		//// CMD phase, return recieved Command =========================================
		if(logger[0] >= 0x90){
 8001520:	4b15      	ldr	r3, [pc, #84]	; (8001578 <Rx_Verita_engine+0x1d8>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	2b8f      	cmp	r3, #143	; 0x8f
 8001526:	d919      	bls.n	800155c <Rx_Verita_engine+0x1bc>
			switch(logger[0]){
 8001528:	4b13      	ldr	r3, [pc, #76]	; (8001578 <Rx_Verita_engine+0x1d8>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	3b91      	subs	r3, #145	; 0x91
 800152e:	2b03      	cmp	r3, #3
 8001530:	d80a      	bhi.n	8001548 <Rx_Verita_engine+0x1a8>
 8001532:	a201      	add	r2, pc, #4	; (adr r2, 8001538 <Rx_Verita_engine+0x198>)
 8001534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001538:	0800154d 	.word	0x0800154d
 800153c:	08001551 	.word	0x08001551
 8001540:	08001555 	.word	0x08001555
 8001544:	08001559 	.word	0x08001559
				default:
				case 0x90:
					return VRT_ERROR;
 8001548:	2390      	movs	r3, #144	; 0x90
 800154a:	e009      	b.n	8001560 <Rx_Verita_engine+0x1c0>
				case 0x91:
					return VRT_OK;
 800154c:	2391      	movs	r3, #145	; 0x91
 800154e:	e007      	b.n	8001560 <Rx_Verita_engine+0x1c0>
				case 0x92:
					return VRT_Busy;
 8001550:	2392      	movs	r3, #146	; 0x92
 8001552:	e005      	b.n	8001560 <Rx_Verita_engine+0x1c0>
				case 0x93:
					return VRT_Regain;
 8001554:	2393      	movs	r3, #147	; 0x93
 8001556:	e003      	b.n	8001560 <Rx_Verita_engine+0x1c0>
				case 0x94:
					return VRT_Next;
 8001558:	2394      	movs	r3, #148	; 0x94
 800155a:	e001      	b.n	8001560 <Rx_Verita_engine+0x1c0>
			}
		}

		//// -------------------------------------------------------------------------------

		break; // decode
 800155c:	bf00      	nop
	} // end switch
	return VRT_ERROR;
 800155e:	2390      	movs	r3, #144	; 0x90
}
 8001560:	4618      	mov	r0, r3
 8001562:	3710      	adds	r7, #16
 8001564:	46bd      	mov	sp, r7
 8001566:	bc90      	pop	{r4, r7}
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	2000021a 	.word	0x2000021a
 8001570:	2000021b 	.word	0x2000021b
 8001574:	38e38e39 	.word	0x38e38e39
 8001578:	2000021c 	.word	0x2000021c

0800157c <BL_UART_Start>:
 *
 * step x - Erase (old?) memory (?)
 * step x - Write Memory CMD with code
 * */

void BL_UART_Start(UART_HandleTypeDef *huart){
 800157c:	b580      	push	{r7, lr}
 800157e:	b084      	sub	sp, #16
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]

	uint8_t UARTBL_Start = 0x7F;
 8001584:	237f      	movs	r3, #127	; 0x7f
 8001586:	73fb      	strb	r3, [r7, #15]
	//// step 1: Push BOOT0 -> HIGH
	HAL_GPIO_WritePin(BOOT0_Trigger_GPIO_PORT, BOOT0_Trigger_GPIO_PIN, GPIO_PIN_SET);
 8001588:	2201      	movs	r2, #1
 800158a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800158e:	4811      	ldr	r0, [pc, #68]	; (80015d4 <BL_UART_Start+0x58>)
 8001590:	f002 ff3c 	bl	800440c <HAL_GPIO_WritePin>

	//// step 2: Reset Client, push SET NMOS
	HAL_GPIO_WritePin(Client_NRST_Trg_GPIO_PORT, Client_NRST_Trg_GPIO_PIN, GPIO_PIN_SET);
 8001594:	2201      	movs	r2, #1
 8001596:	2140      	movs	r1, #64	; 0x40
 8001598:	480f      	ldr	r0, [pc, #60]	; (80015d8 <BL_UART_Start+0x5c>)
 800159a:	f002 ff37 	bl	800440c <HAL_GPIO_WritePin>
	HAL_Delay(20);
 800159e:	2014      	movs	r0, #20
 80015a0:	f002 f86a 	bl	8003678 <HAL_Delay>
	HAL_GPIO_WritePin(Client_NRST_Trg_GPIO_PORT, Client_NRST_Trg_GPIO_PIN, GPIO_PIN_RESET);
 80015a4:	2200      	movs	r2, #0
 80015a6:	2140      	movs	r1, #64	; 0x40
 80015a8:	480b      	ldr	r0, [pc, #44]	; (80015d8 <BL_UART_Start+0x5c>)
 80015aa:	f002 ff2f 	bl	800440c <HAL_GPIO_WritePin>
	//// step 3: wait bootloader startup for 74.5ms ++
	HAL_Delay(85); // 80 is not enough
 80015ae:	2055      	movs	r0, #85	; 0x55
 80015b0:	f002 f862 	bl	8003678 <HAL_Delay>

	//// send 0x7F
	HAL_UART_Transmit(huart, &UARTBL_Start, 1, 10);
 80015b4:	f107 010f 	add.w	r1, r7, #15
 80015b8:	230a      	movs	r3, #10
 80015ba:	2201      	movs	r2, #1
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f006 fe8c 	bl	80082da <HAL_UART_Transmit>
	BL_UART_wait_ACK(huart, 20);
 80015c2:	2114      	movs	r1, #20
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	f000 f8dd 	bl	8001784 <BL_UART_wait_ACK>

}
 80015ca:	bf00      	nop
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	40020000 	.word	0x40020000
 80015d8:	40020800 	.word	0x40020800

080015dc <BL_UART_Finish>:

void BL_UART_Finish(){
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0

	//// reserve, pending for any operation that might be unfinished
	HAL_Delay(100);
 80015e0:	2064      	movs	r0, #100	; 0x64
 80015e2:	f002 f849 	bl	8003678 <HAL_Delay>
	//// pull BOOT0 back
	HAL_GPIO_WritePin(BOOT0_Trigger_GPIO_PORT, BOOT0_Trigger_GPIO_PIN, GPIO_PIN_RESET);
 80015e6:	2200      	movs	r2, #0
 80015e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015ec:	4808      	ldr	r0, [pc, #32]	; (8001610 <BL_UART_Finish+0x34>)
 80015ee:	f002 ff0d 	bl	800440c <HAL_GPIO_WritePin>

	//// step 2: Reset Client, push SET NMOS
	HAL_GPIO_WritePin(Client_NRST_Trg_GPIO_PORT, Client_NRST_Trg_GPIO_PIN, GPIO_PIN_SET);
 80015f2:	2201      	movs	r2, #1
 80015f4:	2140      	movs	r1, #64	; 0x40
 80015f6:	4807      	ldr	r0, [pc, #28]	; (8001614 <BL_UART_Finish+0x38>)
 80015f8:	f002 ff08 	bl	800440c <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80015fc:	2014      	movs	r0, #20
 80015fe:	f002 f83b 	bl	8003678 <HAL_Delay>
	HAL_GPIO_WritePin(Client_NRST_Trg_GPIO_PORT, Client_NRST_Trg_GPIO_PIN, GPIO_PIN_RESET);
 8001602:	2200      	movs	r2, #0
 8001604:	2140      	movs	r1, #64	; 0x40
 8001606:	4803      	ldr	r0, [pc, #12]	; (8001614 <BL_UART_Finish+0x38>)
 8001608:	f002 ff00 	bl	800440c <HAL_GPIO_WritePin>
}
 800160c:	bf00      	nop
 800160e:	bd80      	pop	{r7, pc}
 8001610:	40020000 	.word	0x40020000
 8001614:	40020800 	.word	0x40020800

08001618 <BL_UART_GETID>:
	}else{}

	return UB_NACK;
}

UARTBootloader_state BL_UART_GETID(UART_HandleTypeDef *huart, uint8_t *bufferd){
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	6039      	str	r1, [r7, #0]
	/* code 0x02 Get the version of the chip ID (identification)
	 * */
	uint8_t Start_GV[2] = {0x02, 0xFD};
 8001622:	f64f 5302 	movw	r3, #64770	; 0xfd02
 8001626:	81bb      	strh	r3, [r7, #12]
	uint8_t response = 0;
 8001628:	2300      	movs	r3, #0
 800162a:	73fb      	strb	r3, [r7, #15]


	HAL_UART_Transmit(huart, &Start_GV[0], 2, 10);
 800162c:	f107 010c 	add.w	r1, r7, #12
 8001630:	230a      	movs	r3, #10
 8001632:	2202      	movs	r2, #2
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	f006 fe50 	bl	80082da <HAL_UART_Transmit>

	response = BL_UART_wait_ACK(huart, 10);
 800163a:	210a      	movs	r1, #10
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f000 f8a1 	bl	8001784 <BL_UART_wait_ACK>
 8001642:	4603      	mov	r3, r0
 8001644:	73fb      	strb	r3, [r7, #15]

	if(response == UB_ACK){
 8001646:	7bfb      	ldrb	r3, [r7, #15]
 8001648:	2b79      	cmp	r3, #121	; 0x79
 800164a:	d10d      	bne.n	8001668 <BL_UART_GETID+0x50>
		HAL_UART_Receive(huart, bufferd, 3, 10);
 800164c:	230a      	movs	r3, #10
 800164e:	2203      	movs	r2, #3
 8001650:	6839      	ldr	r1, [r7, #0]
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f006 fed3 	bl	80083fe <HAL_UART_Receive>
		response = BL_UART_wait_ACK(huart, 10);
 8001658:	210a      	movs	r1, #10
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f000 f892 	bl	8001784 <BL_UART_wait_ACK>
 8001660:	4603      	mov	r3, r0
 8001662:	73fb      	strb	r3, [r7, #15]
		return UB_ACK;
 8001664:	2379      	movs	r3, #121	; 0x79
 8001666:	e000      	b.n	800166a <BL_UART_GETID+0x52>
	}else{
		return UB_NACK;
 8001668:	231f      	movs	r3, #31
	}

	return UB_NACK;
}
 800166a:	4618      	mov	r0, r3
 800166c:	3710      	adds	r7, #16
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
	...

08001674 <BL_UART_ReadMem>:

UARTBootloader_state BL_UART_ReadMem(UART_HandleTypeDef *huart,uint32_t addr32, uint8_t numbyte, uint8_t *bufferd){
 8001674:	b580      	push	{r7, lr}
 8001676:	b08a      	sub	sp, #40	; 0x28
 8001678:	af00      	add	r7, sp, #0
 800167a:	60f8      	str	r0, [r7, #12]
 800167c:	60b9      	str	r1, [r7, #8]
 800167e:	603b      	str	r3, [r7, #0]
 8001680:	4613      	mov	r3, r2
 8001682:	71fb      	strb	r3, [r7, #7]
     *                  the configuration information for the specified UART module.
	 * @param addr32  - start destination address to read (0x xxxx xxxx)
	 * @param numbyte - num of bytes need to be read (0 < n <= 255)
	 * @param bufferd - buffer to store read result
	 * */
	uint8_t Start_RM[2] = {0x11, 0xEE};
 8001684:	f64e 6311 	movw	r3, #60945	; 0xee11
 8001688:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint8_t response = 0;
 800168a:	2300      	movs	r3, #0
 800168c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t numbytx[2] = {0};
 8001690:	2300      	movs	r3, #0
 8001692:	843b      	strh	r3, [r7, #32]
	uint8_t addr8[5] = {0};
 8001694:	2300      	movs	r3, #0
 8001696:	61bb      	str	r3, [r7, #24]
 8001698:	2300      	movs	r3, #0
 800169a:	773b      	strb	r3, [r7, #28]
		uint8_t  U8[4];
		uint32_t U32;
	}loga;

	//// block from do sth in danger zone
	if(addr32 >= 0x1FFF0000 && addr32 <= 0x1FFFFFFF){
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	4a38      	ldr	r2, [pc, #224]	; (8001780 <BL_UART_ReadMem+0x10c>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d905      	bls.n	80016b0 <BL_UART_ReadMem+0x3c>
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80016aa:	d201      	bcs.n	80016b0 <BL_UART_ReadMem+0x3c>
		return UB_ParamERR;
 80016ac:	23bc      	movs	r3, #188	; 0xbc
 80016ae:	e062      	b.n	8001776 <BL_UART_ReadMem+0x102>
	}


	loga.U32 = addr32;
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	617b      	str	r3, [r7, #20]
	//// prepare address byte 3: MSB, byte 6: LSB
	addr8[0] = loga.U8[3];
 80016b4:	7dfb      	ldrb	r3, [r7, #23]
 80016b6:	763b      	strb	r3, [r7, #24]
	addr8[1] = loga.U8[2];
 80016b8:	7dbb      	ldrb	r3, [r7, #22]
 80016ba:	767b      	strb	r3, [r7, #25]
	addr8[2] = loga.U8[1];
 80016bc:	7d7b      	ldrb	r3, [r7, #21]
 80016be:	76bb      	strb	r3, [r7, #26]
	addr8[3] = loga.U8[0];
 80016c0:	7d3b      	ldrb	r3, [r7, #20]
 80016c2:	76fb      	strb	r3, [r7, #27]

	//// XOR Chksum addr
	addr8[4] = addr8[0]^addr8[1]^addr8[2]^addr8[3];
 80016c4:	7e3a      	ldrb	r2, [r7, #24]
 80016c6:	7e7b      	ldrb	r3, [r7, #25]
 80016c8:	4053      	eors	r3, r2
 80016ca:	b2da      	uxtb	r2, r3
 80016cc:	7ebb      	ldrb	r3, [r7, #26]
 80016ce:	4053      	eors	r3, r2
 80016d0:	b2da      	uxtb	r2, r3
 80016d2:	7efb      	ldrb	r3, [r7, #27]
 80016d4:	4053      	eors	r3, r2
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	773b      	strb	r3, [r7, #28]

	//// XOR Chksum numbyte
	numbytx[0] = numbyte;
 80016da:	79fb      	ldrb	r3, [r7, #7]
 80016dc:	f887 3020 	strb.w	r3, [r7, #32]
	numbytx[1] = (uint8_t)(0 - numbyte)- 1; //// complements
 80016e0:	79fb      	ldrb	r3, [r7, #7]
 80016e2:	43db      	mvns	r3, r3
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

	//// Bytes 1-2
	HAL_UART_Transmit(huart, &Start_RM[0], 2, 10);
 80016ea:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80016ee:	230a      	movs	r3, #10
 80016f0:	2202      	movs	r2, #2
 80016f2:	68f8      	ldr	r0, [r7, #12]
 80016f4:	f006 fdf1 	bl	80082da <HAL_UART_Transmit>

	response = BL_UART_wait_ACK(huart, 10);
 80016f8:	210a      	movs	r1, #10
 80016fa:	68f8      	ldr	r0, [r7, #12]
 80016fc:	f000 f842 	bl	8001784 <BL_UART_wait_ACK>
 8001700:	4603      	mov	r3, r0
 8001702:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if(response == UB_ACK){
 8001706:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800170a:	2b79      	cmp	r3, #121	; 0x79
 800170c:	d132      	bne.n	8001774 <BL_UART_ReadMem+0x100>

		//// Bytes 3-6 Send ADDR Bytes +
		//// Byte  7 chksum
		HAL_UART_Transmit(huart, &addr8[0], 5, 15);
 800170e:	f107 0118 	add.w	r1, r7, #24
 8001712:	230f      	movs	r3, #15
 8001714:	2205      	movs	r2, #5
 8001716:	68f8      	ldr	r0, [r7, #12]
 8001718:	f006 fddf 	bl	80082da <HAL_UART_Transmit>

		response = BL_UART_wait_ACK(huart, 10);
 800171c:	210a      	movs	r1, #10
 800171e:	68f8      	ldr	r0, [r7, #12]
 8001720:	f000 f830 	bl	8001784 <BL_UART_wait_ACK>
 8001724:	4603      	mov	r3, r0
 8001726:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if(response == UB_ACK){
 800172a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800172e:	2b79      	cmp	r3, #121	; 0x79
 8001730:	d11e      	bne.n	8001770 <BL_UART_ReadMem+0xfc>

			//// byte 8-9 numbyte+chksum
			HAL_UART_Transmit(huart, &numbytx[0], 2, 15);
 8001732:	f107 0120 	add.w	r1, r7, #32
 8001736:	230f      	movs	r3, #15
 8001738:	2202      	movs	r2, #2
 800173a:	68f8      	ldr	r0, [r7, #12]
 800173c:	f006 fdcd 	bl	80082da <HAL_UART_Transmit>

			response = BL_UART_wait_ACK(huart, 10);
 8001740:	210a      	movs	r1, #10
 8001742:	68f8      	ldr	r0, [r7, #12]
 8001744:	f000 f81e 	bl	8001784 <BL_UART_wait_ACK>
 8001748:	4603      	mov	r3, r0
 800174a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if(response == UB_ACK){
 800174e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001752:	2b79      	cmp	r3, #121	; 0x79
 8001754:	d10a      	bne.n	800176c <BL_UART_ReadMem+0xf8>

				//// Recieve data
				HAL_UART_Receive(huart, bufferd, numbyte + 1, 60);
 8001756:	79fb      	ldrb	r3, [r7, #7]
 8001758:	b29b      	uxth	r3, r3
 800175a:	3301      	adds	r3, #1
 800175c:	b29a      	uxth	r2, r3
 800175e:	233c      	movs	r3, #60	; 0x3c
 8001760:	6839      	ldr	r1, [r7, #0]
 8001762:	68f8      	ldr	r0, [r7, #12]
 8001764:	f006 fe4b 	bl	80083fe <HAL_UART_Receive>

				return UB_ACK;
 8001768:	2379      	movs	r3, #121	; 0x79
 800176a:	e004      	b.n	8001776 <BL_UART_ReadMem+0x102>

			}else{return UB_NACK;}
 800176c:	231f      	movs	r3, #31
 800176e:	e002      	b.n	8001776 <BL_UART_ReadMem+0x102>

		}else{return UB_NACK;}
 8001770:	231f      	movs	r3, #31
 8001772:	e000      	b.n	8001776 <BL_UART_ReadMem+0x102>

	}else{return UB_NACK;}
 8001774:	231f      	movs	r3, #31

	return UB_NACK;
}
 8001776:	4618      	mov	r0, r3
 8001778:	3728      	adds	r7, #40	; 0x28
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	1ffeffff 	.word	0x1ffeffff

08001784 <BL_UART_wait_ACK>:
	return BL_UART_wait_ACK(huart, 500);

}


UARTBootloader_state BL_UART_wait_ACK(UART_HandleTypeDef *huart, uint16_t timeout){
 8001784:	b580      	push	{r7, lr}
 8001786:	b086      	sub	sp, #24
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	460b      	mov	r3, r1
 800178e:	807b      	strh	r3, [r7, #2]
	uint8_t tick = 1;
 8001790:	2301      	movs	r3, #1
 8001792:	75fb      	strb	r3, [r7, #23]
	uint8_t response = 0;
 8001794:	2300      	movs	r3, #0
 8001796:	73fb      	strb	r3, [r7, #15]
	uint32_t timestick;

	timestick = HAL_GetTick() + timeout;
 8001798:	f001 ff62 	bl	8003660 <HAL_GetTick>
 800179c:	4602      	mov	r2, r0
 800179e:	887b      	ldrh	r3, [r7, #2]
 80017a0:	4413      	add	r3, r2
 80017a2:	613b      	str	r3, [r7, #16]

	while(tick){
 80017a4:	e018      	b.n	80017d8 <BL_UART_wait_ACK+0x54>
		HAL_UART_Receive(huart, &response, 1, 2);
 80017a6:	f107 010f 	add.w	r1, r7, #15
 80017aa:	2302      	movs	r3, #2
 80017ac:	2201      	movs	r2, #1
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f006 fe25 	bl	80083fe <HAL_UART_Receive>

		if(response == 0x79){
 80017b4:	7bfb      	ldrb	r3, [r7, #15]
 80017b6:	2b79      	cmp	r3, #121	; 0x79
 80017b8:	d101      	bne.n	80017be <BL_UART_wait_ACK+0x3a>
			return UB_ACK;
 80017ba:	2379      	movs	r3, #121	; 0x79
 80017bc:	e010      	b.n	80017e0 <BL_UART_wait_ACK+0x5c>
		}else if(response == 0x1F){
 80017be:	7bfb      	ldrb	r3, [r7, #15]
 80017c0:	2b1f      	cmp	r3, #31
 80017c2:	d101      	bne.n	80017c8 <BL_UART_wait_ACK+0x44>
			return UB_NACK;
 80017c4:	231f      	movs	r3, #31
 80017c6:	e00b      	b.n	80017e0 <BL_UART_wait_ACK+0x5c>
		}else{}

		if(HAL_GetTick()>= timestick){
 80017c8:	f001 ff4a 	bl	8003660 <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d801      	bhi.n	80017d8 <BL_UART_wait_ACK+0x54>
			return UB_Timeout;
 80017d4:	23ab      	movs	r3, #171	; 0xab
 80017d6:	e003      	b.n	80017e0 <BL_UART_wait_ACK+0x5c>
	while(tick){
 80017d8:	7dfb      	ldrb	r3, [r7, #23]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d1e3      	bne.n	80017a6 <BL_UART_wait_ACK+0x22>
		}
	}
	return UB_NACK;
 80017de:	231f      	movs	r3, #31
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3718      	adds	r7, #24
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}

080017e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017e8:	b5b0      	push	{r4, r5, r7, lr}
 80017ea:	b092      	sub	sp, #72	; 0x48
 80017ec:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017ee:	f001 fed1 	bl	8003594 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017f2:	f000 f88f 	bl	8001914 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017f6:	f000 fa1d 	bl	8001c34 <MX_GPIO_Init>
  MX_DMA_Init();
 80017fa:	f000 f9fb 	bl	8001bf4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80017fe:	f000 f9a5 	bl	8001b4c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001802:	f000 f8ef 	bl	80019e4 <MX_I2C1_Init>
  MX_USART6_UART_Init();
 8001806:	f000 f9cb 	bl	8001ba0 <MX_USART6_UART_Init>
  MX_SPI3_Init();
 800180a:	f000 f919 	bl	8001a40 <MX_SPI3_Init>
  MX_TIM10_Init();
 800180e:	f000 f94d 	bl	8001aac <MX_TIM10_Init>
  MX_USART1_UART_Init();
 8001812:	f000 f96f 	bl	8001af4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim10); // buzzer timer
 8001816:	4835      	ldr	r0, [pc, #212]	; (80018ec <main+0x104>)
 8001818:	f006 fabc 	bl	8007d94 <HAL_TIM_Base_Start_IT>

  ili9341_Init();
 800181c:	f001 f8a0 	bl	8002960 <ili9341_Init>
  ili9341_DisplayOn();
 8001820:	f001 f882 	bl	8002928 <ili9341_DisplayOn>

  ili9341_FillRect(50, 20, 50, 20, cl_RED);
 8001824:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001828:	9300      	str	r3, [sp, #0]
 800182a:	2314      	movs	r3, #20
 800182c:	2232      	movs	r2, #50	; 0x32
 800182e:	2114      	movs	r1, #20
 8001830:	2032      	movs	r0, #50	; 0x32
 8001832:	f001 f9ad 	bl	8002b90 <ili9341_FillRect>
  ili9341_FillRect(100, 20, 50, 20, cl_GREEN);
 8001836:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800183a:	9300      	str	r3, [sp, #0]
 800183c:	2314      	movs	r3, #20
 800183e:	2232      	movs	r2, #50	; 0x32
 8001840:	2114      	movs	r1, #20
 8001842:	2064      	movs	r0, #100	; 0x64
 8001844:	f001 f9a4 	bl	8002b90 <ili9341_FillRect>
  ili9341_FillRect(150, 20, 50, 20, cl_BLUE);
 8001848:	231f      	movs	r3, #31
 800184a:	9300      	str	r3, [sp, #0]
 800184c:	2314      	movs	r3, #20
 800184e:	2232      	movs	r2, #50	; 0x32
 8001850:	2114      	movs	r1, #20
 8001852:	2096      	movs	r0, #150	; 0x96
 8001854:	f001 f99c 	bl	8002b90 <ili9341_FillRect>

#ifdef INA219_Wrk
  INA219_INIT_Calibrate(&hi2c1, INA219_ADDR_1);
 8001858:	2180      	movs	r1, #128	; 0x80
 800185a:	4825      	ldr	r0, [pc, #148]	; (80018f0 <main+0x108>)
 800185c:	f7ff fbc8 	bl	8000ff0 <INA219_INIT_Calibrate>
//
//  INA219_INIT(&hi2c1, INA219_ADDR_1, cofgra);
//  INA219_Calibrate(&hi2c1, INA219_ADDR_1);
#endif

  char temp[]="----------------- F411_Verita_Master --------------------\r\n";
 8001860:	4b24      	ldr	r3, [pc, #144]	; (80018f4 <main+0x10c>)
 8001862:	1d3c      	adds	r4, r7, #4
 8001864:	461d      	mov	r5, r3
 8001866:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001868:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800186a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800186c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800186e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001870:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001872:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001876:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  HAL_UART_Transmit(&huart2, (uint8_t*)temp, strlen(temp),10);
 800187a:	1d3b      	adds	r3, r7, #4
 800187c:	4618      	mov	r0, r3
 800187e:	f7fe fcaf 	bl	80001e0 <strlen>
 8001882:	4603      	mov	r3, r0
 8001884:	b29a      	uxth	r2, r3
 8001886:	1d39      	adds	r1, r7, #4
 8001888:	230a      	movs	r3, #10
 800188a:	481b      	ldr	r0, [pc, #108]	; (80018f8 <main+0x110>)
 800188c:	f006 fd25 	bl	80082da <HAL_UART_Transmit>


////  ------------- UART Recieve --------------------------
  HAL_UART_Receive_DMA(&huart6, &RxBufferMtCl[0], RxbufferSize_VRT);
 8001890:	2224      	movs	r2, #36	; 0x24
 8001892:	491a      	ldr	r1, [pc, #104]	; (80018fc <main+0x114>)
 8001894:	481a      	ldr	r0, [pc, #104]	; (8001900 <main+0x118>)
 8001896:	f006 fe54 	bl	8008542 <HAL_UART_Receive_DMA>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  //// -------- buzzer & Button -----------------
	  Button_machine();
 800189a:	f000 fbf5 	bl	8002088 <Button_machine>
	  ////  ------------- Verita UART Recieve --------------------------
	  //HAL_UART_Receive_DMA(&huart6, &RxBufferMtCl[0], 9); // Normal DMA
	  //engst = Rx_Verita_engine(RxBufferMtCl, verita_regis);
	  Rx_Verita_engine(RxBufferMtCl, VRB.U32);
 800189e:	4919      	ldr	r1, [pc, #100]	; (8001904 <main+0x11c>)
 80018a0:	4816      	ldr	r0, [pc, #88]	; (80018fc <main+0x114>)
 80018a2:	f7ff fd7d 	bl	80013a0 <Rx_Verita_engine>
	  //// ----------------------------------------------------


	  if (HAL_GetTick() >= timestamp_buzbtn){
 80018a6:	f001 fedb 	bl	8003660 <HAL_GetTick>
 80018aa:	4602      	mov	r2, r0
 80018ac:	4b16      	ldr	r3, [pc, #88]	; (8001908 <main+0x120>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d306      	bcc.n	80018c2 <main+0xda>
		timestamp_buzbtn += 10;
 80018b4:	4b14      	ldr	r3, [pc, #80]	; (8001908 <main+0x120>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	330a      	adds	r3, #10
 80018ba:	4a13      	ldr	r2, [pc, #76]	; (8001908 <main+0x120>)
 80018bc:	6013      	str	r3, [r2, #0]

		running_box();
 80018be:	f000 faa5 	bl	8001e0c <running_box>
		//buzzer_scream_cnt();
	  }// timestamp_dis


	  if (HAL_GetTick() >= timestamp_one){
 80018c2:	f001 fecd 	bl	8003660 <HAL_GetTick>
 80018c6:	4602      	mov	r2, r0
 80018c8:	4b10      	ldr	r3, [pc, #64]	; (800190c <main+0x124>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d3e4      	bcc.n	800189a <main+0xb2>
		  timestamp_one += 1000;
 80018d0:	4b0e      	ldr	r3, [pc, #56]	; (800190c <main+0x124>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80018d8:	4a0c      	ldr	r2, [pc, #48]	; (800190c <main+0x124>)
 80018da:	6013      	str	r3, [r2, #0]
		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80018dc:	2120      	movs	r1, #32
 80018de:	480c      	ldr	r0, [pc, #48]	; (8001910 <main+0x128>)
 80018e0:	f002 fdad 	bl	800443e <HAL_GPIO_TogglePin>

		  GrandState_Verita();
 80018e4:	f000 fc82 	bl	80021ec <GrandState_Verita>
	  Button_machine();
 80018e8:	e7d7      	b.n	800189a <main+0xb2>
 80018ea:	bf00      	nop
 80018ec:	200002d4 	.word	0x200002d4
 80018f0:	20000228 	.word	0x20000228
 80018f4:	0800c6b0 	.word	0x0800c6b0
 80018f8:	20000360 	.word	0x20000360
 80018fc:	200004ac 	.word	0x200004ac
 8001900:	200003a4 	.word	0x200003a4
 8001904:	200005e8 	.word	0x200005e8
 8001908:	20000684 	.word	0x20000684
 800190c:	20000680 	.word	0x20000680
 8001910:	40020000 	.word	0x40020000

08001914 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b094      	sub	sp, #80	; 0x50
 8001918:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800191a:	f107 0320 	add.w	r3, r7, #32
 800191e:	2230      	movs	r2, #48	; 0x30
 8001920:	2100      	movs	r1, #0
 8001922:	4618      	mov	r0, r3
 8001924:	f007 ff5a 	bl	80097dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001928:	f107 030c 	add.w	r3, r7, #12
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	605a      	str	r2, [r3, #4]
 8001932:	609a      	str	r2, [r3, #8]
 8001934:	60da      	str	r2, [r3, #12]
 8001936:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001938:	2300      	movs	r3, #0
 800193a:	60bb      	str	r3, [r7, #8]
 800193c:	4b27      	ldr	r3, [pc, #156]	; (80019dc <SystemClock_Config+0xc8>)
 800193e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001940:	4a26      	ldr	r2, [pc, #152]	; (80019dc <SystemClock_Config+0xc8>)
 8001942:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001946:	6413      	str	r3, [r2, #64]	; 0x40
 8001948:	4b24      	ldr	r3, [pc, #144]	; (80019dc <SystemClock_Config+0xc8>)
 800194a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001950:	60bb      	str	r3, [r7, #8]
 8001952:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001954:	2300      	movs	r3, #0
 8001956:	607b      	str	r3, [r7, #4]
 8001958:	4b21      	ldr	r3, [pc, #132]	; (80019e0 <SystemClock_Config+0xcc>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a20      	ldr	r2, [pc, #128]	; (80019e0 <SystemClock_Config+0xcc>)
 800195e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001962:	6013      	str	r3, [r2, #0]
 8001964:	4b1e      	ldr	r3, [pc, #120]	; (80019e0 <SystemClock_Config+0xcc>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800196c:	607b      	str	r3, [r7, #4]
 800196e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001970:	2302      	movs	r3, #2
 8001972:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001974:	2301      	movs	r3, #1
 8001976:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001978:	2310      	movs	r3, #16
 800197a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800197c:	2302      	movs	r3, #2
 800197e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001980:	2300      	movs	r3, #0
 8001982:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001984:	2308      	movs	r3, #8
 8001986:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001988:	2364      	movs	r3, #100	; 0x64
 800198a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800198c:	2302      	movs	r3, #2
 800198e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001990:	2304      	movs	r3, #4
 8001992:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001994:	f107 0320 	add.w	r3, r7, #32
 8001998:	4618      	mov	r0, r3
 800199a:	f005 fa1d 	bl	8006dd8 <HAL_RCC_OscConfig>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d001      	beq.n	80019a8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80019a4:	f000 fc90 	bl	80022c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019a8:	230f      	movs	r3, #15
 80019aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019ac:	2302      	movs	r3, #2
 80019ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019b0:	2300      	movs	r3, #0
 80019b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80019b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019ba:	2300      	movs	r3, #0
 80019bc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80019be:	f107 030c 	add.w	r3, r7, #12
 80019c2:	2103      	movs	r1, #3
 80019c4:	4618      	mov	r0, r3
 80019c6:	f005 fc7f 	bl	80072c8 <HAL_RCC_ClockConfig>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80019d0:	f000 fc7a 	bl	80022c8 <Error_Handler>
  }
}
 80019d4:	bf00      	nop
 80019d6:	3750      	adds	r7, #80	; 0x50
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	40023800 	.word	0x40023800
 80019e0:	40007000 	.word	0x40007000

080019e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80019e8:	4b12      	ldr	r3, [pc, #72]	; (8001a34 <MX_I2C1_Init+0x50>)
 80019ea:	4a13      	ldr	r2, [pc, #76]	; (8001a38 <MX_I2C1_Init+0x54>)
 80019ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80019ee:	4b11      	ldr	r3, [pc, #68]	; (8001a34 <MX_I2C1_Init+0x50>)
 80019f0:	4a12      	ldr	r2, [pc, #72]	; (8001a3c <MX_I2C1_Init+0x58>)
 80019f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019f4:	4b0f      	ldr	r3, [pc, #60]	; (8001a34 <MX_I2C1_Init+0x50>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80019fa:	4b0e      	ldr	r3, [pc, #56]	; (8001a34 <MX_I2C1_Init+0x50>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a00:	4b0c      	ldr	r3, [pc, #48]	; (8001a34 <MX_I2C1_Init+0x50>)
 8001a02:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a06:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a08:	4b0a      	ldr	r3, [pc, #40]	; (8001a34 <MX_I2C1_Init+0x50>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001a0e:	4b09      	ldr	r3, [pc, #36]	; (8001a34 <MX_I2C1_Init+0x50>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a14:	4b07      	ldr	r3, [pc, #28]	; (8001a34 <MX_I2C1_Init+0x50>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a1a:	4b06      	ldr	r3, [pc, #24]	; (8001a34 <MX_I2C1_Init+0x50>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a20:	4804      	ldr	r0, [pc, #16]	; (8001a34 <MX_I2C1_Init+0x50>)
 8001a22:	f002 fd3f 	bl	80044a4 <HAL_I2C_Init>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001a2c:	f000 fc4c 	bl	80022c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a30:	bf00      	nop
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	20000228 	.word	0x20000228
 8001a38:	40005400 	.word	0x40005400
 8001a3c:	00061a80 	.word	0x00061a80

08001a40 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001a44:	4b17      	ldr	r3, [pc, #92]	; (8001aa4 <MX_SPI3_Init+0x64>)
 8001a46:	4a18      	ldr	r2, [pc, #96]	; (8001aa8 <MX_SPI3_Init+0x68>)
 8001a48:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001a4a:	4b16      	ldr	r3, [pc, #88]	; (8001aa4 <MX_SPI3_Init+0x64>)
 8001a4c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a50:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001a52:	4b14      	ldr	r3, [pc, #80]	; (8001aa4 <MX_SPI3_Init+0x64>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a58:	4b12      	ldr	r3, [pc, #72]	; (8001aa4 <MX_SPI3_Init+0x64>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a5e:	4b11      	ldr	r3, [pc, #68]	; (8001aa4 <MX_SPI3_Init+0x64>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a64:	4b0f      	ldr	r3, [pc, #60]	; (8001aa4 <MX_SPI3_Init+0x64>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001a6a:	4b0e      	ldr	r3, [pc, #56]	; (8001aa4 <MX_SPI3_Init+0x64>)
 8001a6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a70:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001a72:	4b0c      	ldr	r3, [pc, #48]	; (8001aa4 <MX_SPI3_Init+0x64>)
 8001a74:	2220      	movs	r2, #32
 8001a76:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a78:	4b0a      	ldr	r3, [pc, #40]	; (8001aa4 <MX_SPI3_Init+0x64>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a7e:	4b09      	ldr	r3, [pc, #36]	; (8001aa4 <MX_SPI3_Init+0x64>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a84:	4b07      	ldr	r3, [pc, #28]	; (8001aa4 <MX_SPI3_Init+0x64>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001a8a:	4b06      	ldr	r3, [pc, #24]	; (8001aa4 <MX_SPI3_Init+0x64>)
 8001a8c:	220a      	movs	r2, #10
 8001a8e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001a90:	4804      	ldr	r0, [pc, #16]	; (8001aa4 <MX_SPI3_Init+0x64>)
 8001a92:	f005 fe39 	bl	8007708 <HAL_SPI_Init>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001a9c:	f000 fc14 	bl	80022c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001aa0:	bf00      	nop
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	2000027c 	.word	0x2000027c
 8001aa8:	40003c00 	.word	0x40003c00

08001aac <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001ab0:	4b0e      	ldr	r3, [pc, #56]	; (8001aec <MX_TIM10_Init+0x40>)
 8001ab2:	4a0f      	ldr	r2, [pc, #60]	; (8001af0 <MX_TIM10_Init+0x44>)
 8001ab4:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 999;
 8001ab6:	4b0d      	ldr	r3, [pc, #52]	; (8001aec <MX_TIM10_Init+0x40>)
 8001ab8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001abc:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001abe:	4b0b      	ldr	r3, [pc, #44]	; (8001aec <MX_TIM10_Init+0x40>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 4999;
 8001ac4:	4b09      	ldr	r3, [pc, #36]	; (8001aec <MX_TIM10_Init+0x40>)
 8001ac6:	f241 3287 	movw	r2, #4999	; 0x1387
 8001aca:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001acc:	4b07      	ldr	r3, [pc, #28]	; (8001aec <MX_TIM10_Init+0x40>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ad2:	4b06      	ldr	r3, [pc, #24]	; (8001aec <MX_TIM10_Init+0x40>)
 8001ad4:	2280      	movs	r2, #128	; 0x80
 8001ad6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001ad8:	4804      	ldr	r0, [pc, #16]	; (8001aec <MX_TIM10_Init+0x40>)
 8001ada:	f006 f90b 	bl	8007cf4 <HAL_TIM_Base_Init>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8001ae4:	f000 fbf0 	bl	80022c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001ae8:	bf00      	nop
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	200002d4 	.word	0x200002d4
 8001af0:	40014400 	.word	0x40014400

08001af4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001af8:	4b12      	ldr	r3, [pc, #72]	; (8001b44 <MX_USART1_UART_Init+0x50>)
 8001afa:	4a13      	ldr	r2, [pc, #76]	; (8001b48 <MX_USART1_UART_Init+0x54>)
 8001afc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001afe:	4b11      	ldr	r3, [pc, #68]	; (8001b44 <MX_USART1_UART_Init+0x50>)
 8001b00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b04:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8001b06:	4b0f      	ldr	r3, [pc, #60]	; (8001b44 <MX_USART1_UART_Init+0x50>)
 8001b08:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b0c:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b0e:	4b0d      	ldr	r3, [pc, #52]	; (8001b44 <MX_USART1_UART_Init+0x50>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8001b14:	4b0b      	ldr	r3, [pc, #44]	; (8001b44 <MX_USART1_UART_Init+0x50>)
 8001b16:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b1a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b1c:	4b09      	ldr	r3, [pc, #36]	; (8001b44 <MX_USART1_UART_Init+0x50>)
 8001b1e:	220c      	movs	r2, #12
 8001b20:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b22:	4b08      	ldr	r3, [pc, #32]	; (8001b44 <MX_USART1_UART_Init+0x50>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b28:	4b06      	ldr	r3, [pc, #24]	; (8001b44 <MX_USART1_UART_Init+0x50>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b2e:	4805      	ldr	r0, [pc, #20]	; (8001b44 <MX_USART1_UART_Init+0x50>)
 8001b30:	f006 fb86 	bl	8008240 <HAL_UART_Init>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <MX_USART1_UART_Init+0x4a>
  {
    Error_Handler();
 8001b3a:	f000 fbc5 	bl	80022c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b3e:	bf00      	nop
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	2000031c 	.word	0x2000031c
 8001b48:	40011000 	.word	0x40011000

08001b4c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b50:	4b11      	ldr	r3, [pc, #68]	; (8001b98 <MX_USART2_UART_Init+0x4c>)
 8001b52:	4a12      	ldr	r2, [pc, #72]	; (8001b9c <MX_USART2_UART_Init+0x50>)
 8001b54:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b56:	4b10      	ldr	r3, [pc, #64]	; (8001b98 <MX_USART2_UART_Init+0x4c>)
 8001b58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b5c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b5e:	4b0e      	ldr	r3, [pc, #56]	; (8001b98 <MX_USART2_UART_Init+0x4c>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b64:	4b0c      	ldr	r3, [pc, #48]	; (8001b98 <MX_USART2_UART_Init+0x4c>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b6a:	4b0b      	ldr	r3, [pc, #44]	; (8001b98 <MX_USART2_UART_Init+0x4c>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b70:	4b09      	ldr	r3, [pc, #36]	; (8001b98 <MX_USART2_UART_Init+0x4c>)
 8001b72:	220c      	movs	r2, #12
 8001b74:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b76:	4b08      	ldr	r3, [pc, #32]	; (8001b98 <MX_USART2_UART_Init+0x4c>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b7c:	4b06      	ldr	r3, [pc, #24]	; (8001b98 <MX_USART2_UART_Init+0x4c>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b82:	4805      	ldr	r0, [pc, #20]	; (8001b98 <MX_USART2_UART_Init+0x4c>)
 8001b84:	f006 fb5c 	bl	8008240 <HAL_UART_Init>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001b8e:	f000 fb9b 	bl	80022c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b92:	bf00      	nop
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	20000360 	.word	0x20000360
 8001b9c:	40004400 	.word	0x40004400

08001ba0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001ba4:	4b11      	ldr	r3, [pc, #68]	; (8001bec <MX_USART6_UART_Init+0x4c>)
 8001ba6:	4a12      	ldr	r2, [pc, #72]	; (8001bf0 <MX_USART6_UART_Init+0x50>)
 8001ba8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001baa:	4b10      	ldr	r3, [pc, #64]	; (8001bec <MX_USART6_UART_Init+0x4c>)
 8001bac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bb0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001bb2:	4b0e      	ldr	r3, [pc, #56]	; (8001bec <MX_USART6_UART_Init+0x4c>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001bb8:	4b0c      	ldr	r3, [pc, #48]	; (8001bec <MX_USART6_UART_Init+0x4c>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001bbe:	4b0b      	ldr	r3, [pc, #44]	; (8001bec <MX_USART6_UART_Init+0x4c>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001bc4:	4b09      	ldr	r3, [pc, #36]	; (8001bec <MX_USART6_UART_Init+0x4c>)
 8001bc6:	220c      	movs	r2, #12
 8001bc8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bca:	4b08      	ldr	r3, [pc, #32]	; (8001bec <MX_USART6_UART_Init+0x4c>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bd0:	4b06      	ldr	r3, [pc, #24]	; (8001bec <MX_USART6_UART_Init+0x4c>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001bd6:	4805      	ldr	r0, [pc, #20]	; (8001bec <MX_USART6_UART_Init+0x4c>)
 8001bd8:	f006 fb32 	bl	8008240 <HAL_UART_Init>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001be2:	f000 fb71 	bl	80022c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001be6:	bf00      	nop
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	200003a4 	.word	0x200003a4
 8001bf0:	40011400 	.word	0x40011400

08001bf4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	607b      	str	r3, [r7, #4]
 8001bfe:	4b0c      	ldr	r3, [pc, #48]	; (8001c30 <MX_DMA_Init+0x3c>)
 8001c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c02:	4a0b      	ldr	r2, [pc, #44]	; (8001c30 <MX_DMA_Init+0x3c>)
 8001c04:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c08:	6313      	str	r3, [r2, #48]	; 0x30
 8001c0a:	4b09      	ldr	r3, [pc, #36]	; (8001c30 <MX_DMA_Init+0x3c>)
 8001c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c12:	607b      	str	r3, [r7, #4]
 8001c14:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001c16:	2200      	movs	r2, #0
 8001c18:	2100      	movs	r1, #0
 8001c1a:	2039      	movs	r0, #57	; 0x39
 8001c1c:	f001 fe2b 	bl	8003876 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001c20:	2039      	movs	r0, #57	; 0x39
 8001c22:	f001 fe44 	bl	80038ae <HAL_NVIC_EnableIRQ>

}
 8001c26:	bf00      	nop
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	40023800 	.word	0x40023800

08001c34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b08a      	sub	sp, #40	; 0x28
 8001c38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c3a:	f107 0314 	add.w	r3, r7, #20
 8001c3e:	2200      	movs	r2, #0
 8001c40:	601a      	str	r2, [r3, #0]
 8001c42:	605a      	str	r2, [r3, #4]
 8001c44:	609a      	str	r2, [r3, #8]
 8001c46:	60da      	str	r2, [r3, #12]
 8001c48:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	613b      	str	r3, [r7, #16]
 8001c4e:	4b6a      	ldr	r3, [pc, #424]	; (8001df8 <MX_GPIO_Init+0x1c4>)
 8001c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c52:	4a69      	ldr	r2, [pc, #420]	; (8001df8 <MX_GPIO_Init+0x1c4>)
 8001c54:	f043 0304 	orr.w	r3, r3, #4
 8001c58:	6313      	str	r3, [r2, #48]	; 0x30
 8001c5a:	4b67      	ldr	r3, [pc, #412]	; (8001df8 <MX_GPIO_Init+0x1c4>)
 8001c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5e:	f003 0304 	and.w	r3, r3, #4
 8001c62:	613b      	str	r3, [r7, #16]
 8001c64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c66:	2300      	movs	r3, #0
 8001c68:	60fb      	str	r3, [r7, #12]
 8001c6a:	4b63      	ldr	r3, [pc, #396]	; (8001df8 <MX_GPIO_Init+0x1c4>)
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6e:	4a62      	ldr	r2, [pc, #392]	; (8001df8 <MX_GPIO_Init+0x1c4>)
 8001c70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c74:	6313      	str	r3, [r2, #48]	; 0x30
 8001c76:	4b60      	ldr	r3, [pc, #384]	; (8001df8 <MX_GPIO_Init+0x1c4>)
 8001c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c7e:	60fb      	str	r3, [r7, #12]
 8001c80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c82:	2300      	movs	r3, #0
 8001c84:	60bb      	str	r3, [r7, #8]
 8001c86:	4b5c      	ldr	r3, [pc, #368]	; (8001df8 <MX_GPIO_Init+0x1c4>)
 8001c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8a:	4a5b      	ldr	r2, [pc, #364]	; (8001df8 <MX_GPIO_Init+0x1c4>)
 8001c8c:	f043 0301 	orr.w	r3, r3, #1
 8001c90:	6313      	str	r3, [r2, #48]	; 0x30
 8001c92:	4b59      	ldr	r3, [pc, #356]	; (8001df8 <MX_GPIO_Init+0x1c4>)
 8001c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c96:	f003 0301 	and.w	r3, r3, #1
 8001c9a:	60bb      	str	r3, [r7, #8]
 8001c9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	607b      	str	r3, [r7, #4]
 8001ca2:	4b55      	ldr	r3, [pc, #340]	; (8001df8 <MX_GPIO_Init+0x1c4>)
 8001ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca6:	4a54      	ldr	r2, [pc, #336]	; (8001df8 <MX_GPIO_Init+0x1c4>)
 8001ca8:	f043 0302 	orr.w	r3, r3, #2
 8001cac:	6313      	str	r3, [r2, #48]	; 0x30
 8001cae:	4b52      	ldr	r3, [pc, #328]	; (8001df8 <MX_GPIO_Init+0x1c4>)
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb2:	f003 0302 	and.w	r3, r3, #2
 8001cb6:	607b      	str	r3, [r7, #4]
 8001cb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cba:	2300      	movs	r3, #0
 8001cbc:	603b      	str	r3, [r7, #0]
 8001cbe:	4b4e      	ldr	r3, [pc, #312]	; (8001df8 <MX_GPIO_Init+0x1c4>)
 8001cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc2:	4a4d      	ldr	r2, [pc, #308]	; (8001df8 <MX_GPIO_Init+0x1c4>)
 8001cc4:	f043 0308 	orr.w	r3, r3, #8
 8001cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cca:	4b4b      	ldr	r3, [pc, #300]	; (8001df8 <MX_GPIO_Init+0x1c4>)
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cce:	f003 0308 	and.w	r3, r3, #8
 8001cd2:	603b      	str	r3, [r7, #0]
 8001cd4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_RS_Pin|LCD_CS_Pin|LCD_MOSI_Pin|client_NRST_Pin
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	f240 214b 	movw	r1, #587	; 0x24b
 8001cdc:	4847      	ldr	r0, [pc, #284]	; (8001dfc <MX_GPIO_Init+0x1c8>)
 8001cde:	f002 fb95 	bl	800440c <HAL_GPIO_WritePin>
                          |Buzzer_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RST_Pin|LD2_Pin|boot0_trigger_Pin, GPIO_PIN_RESET);
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	f44f 7198 	mov.w	r1, #304	; 0x130
 8001ce8:	4845      	ldr	r0, [pc, #276]	; (8001e00 <MX_GPIO_Init+0x1cc>)
 8001cea:	f002 fb8f 	bl	800440c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_SCK_GPIO_Port, LCD_SCK_Pin, GPIO_PIN_RESET);
 8001cee:	2200      	movs	r2, #0
 8001cf0:	2101      	movs	r1, #1
 8001cf2:	4844      	ldr	r0, [pc, #272]	; (8001e04 <MX_GPIO_Init+0x1d0>)
 8001cf4:	f002 fb8a 	bl	800440c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	2104      	movs	r1, #4
 8001cfc:	4842      	ldr	r0, [pc, #264]	; (8001e08 <MX_GPIO_Init+0x1d4>)
 8001cfe:	f002 fb85 	bl	800440c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001d02:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001d08:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001d0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001d12:	f107 0314 	add.w	r3, r7, #20
 8001d16:	4619      	mov	r1, r3
 8001d18:	4838      	ldr	r0, [pc, #224]	; (8001dfc <MX_GPIO_Init+0x1c8>)
 8001d1a:	f002 f9f3 	bl	8004104 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RS_Pin LCD_CS_Pin client_NRST_Pin Buzzer_Pin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_CS_Pin|client_NRST_Pin|Buzzer_Pin;
 8001d1e:	f240 2343 	movw	r3, #579	; 0x243
 8001d22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d24:	2301      	movs	r3, #1
 8001d26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d30:	f107 0314 	add.w	r3, r7, #20
 8001d34:	4619      	mov	r1, r3
 8001d36:	4831      	ldr	r0, [pc, #196]	; (8001dfc <MX_GPIO_Init+0x1c8>)
 8001d38:	f002 f9e4 	bl	8004104 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_MISO_Pin */
  GPIO_InitStruct.Pin = LCD_MISO_Pin;
 8001d3c:	2304      	movs	r3, #4
 8001d3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d40:	2300      	movs	r3, #0
 8001d42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d44:	2300      	movs	r3, #0
 8001d46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LCD_MISO_GPIO_Port, &GPIO_InitStruct);
 8001d48:	f107 0314 	add.w	r3, r7, #20
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	482b      	ldr	r0, [pc, #172]	; (8001dfc <MX_GPIO_Init+0x1c8>)
 8001d50:	f002 f9d8 	bl	8004104 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_MOSI_Pin */
  GPIO_InitStruct.Pin = LCD_MOSI_Pin;
 8001d54:	2308      	movs	r3, #8
 8001d56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d60:	2302      	movs	r3, #2
 8001d62:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_MOSI_GPIO_Port, &GPIO_InitStruct);
 8001d64:	f107 0314 	add.w	r3, r7, #20
 8001d68:	4619      	mov	r1, r3
 8001d6a:	4824      	ldr	r0, [pc, #144]	; (8001dfc <MX_GPIO_Init+0x1c8>)
 8001d6c:	f002 f9ca 	bl	8004104 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RST_Pin LD2_Pin boot0_trigger_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LD2_Pin|boot0_trigger_Pin;
 8001d70:	f44f 7398 	mov.w	r3, #304	; 0x130
 8001d74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d76:	2301      	movs	r3, #1
 8001d78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d82:	f107 0314 	add.w	r3, r7, #20
 8001d86:	4619      	mov	r1, r3
 8001d88:	481d      	ldr	r0, [pc, #116]	; (8001e00 <MX_GPIO_Init+0x1cc>)
 8001d8a:	f002 f9bb 	bl	8004104 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_SCK_Pin */
  GPIO_InitStruct.Pin = LCD_SCK_Pin;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d92:	2301      	movs	r3, #1
 8001d94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d96:	2300      	movs	r3, #0
 8001d98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_SCK_GPIO_Port, &GPIO_InitStruct);
 8001d9e:	f107 0314 	add.w	r3, r7, #20
 8001da2:	4619      	mov	r1, r3
 8001da4:	4817      	ldr	r0, [pc, #92]	; (8001e04 <MX_GPIO_Init+0x1d0>)
 8001da6:	f002 f9ad 	bl	8004104 <HAL_GPIO_Init>

  /*Configure GPIO pins : Btn_1_Pin Btn_2_Pin Btn_3_Pin Btn_4_Pin */
  GPIO_InitStruct.Pin = Btn_1_Pin|Btn_2_Pin|Btn_3_Pin|Btn_4_Pin;
 8001daa:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001dae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001db0:	2300      	movs	r3, #0
 8001db2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db4:	2300      	movs	r3, #0
 8001db6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001db8:	f107 0314 	add.w	r3, r7, #20
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	4811      	ldr	r0, [pc, #68]	; (8001e04 <MX_GPIO_Init+0x1d0>)
 8001dc0:	f002 f9a0 	bl	8004104 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_CS_Pin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 8001dc4:	2304      	movs	r3, #4
 8001dc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 8001dd4:	f107 0314 	add.w	r3, r7, #20
 8001dd8:	4619      	mov	r1, r3
 8001dda:	480b      	ldr	r0, [pc, #44]	; (8001e08 <MX_GPIO_Init+0x1d4>)
 8001ddc:	f002 f992 	bl	8004104 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001de0:	2200      	movs	r2, #0
 8001de2:	2100      	movs	r1, #0
 8001de4:	2028      	movs	r0, #40	; 0x28
 8001de6:	f001 fd46 	bl	8003876 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001dea:	2028      	movs	r0, #40	; 0x28
 8001dec:	f001 fd5f 	bl	80038ae <HAL_NVIC_EnableIRQ>

}
 8001df0:	bf00      	nop
 8001df2:	3728      	adds	r7, #40	; 0x28
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	40023800 	.word	0x40023800
 8001dfc:	40020800 	.word	0x40020800
 8001e00:	40020000 	.word	0x40020000
 8001e04:	40020400 	.word	0x40020400
 8001e08:	40020c00 	.word	0x40020c00

08001e0c <running_box>:

/* USER CODE BEGIN 4 */

void running_box(){
 8001e0c:	b590      	push	{r4, r7, lr}
 8001e0e:	b087      	sub	sp, #28
 8001e10:	af02      	add	r7, sp, #8
   //// Running box ------
  int ratte = 1;
 8001e12:	2301      	movs	r3, #1
 8001e14:	60fb      	str	r3, [r7, #12]
  int sizo = 30;
 8001e16:	231e      	movs	r3, #30
 8001e18:	60bb      	str	r3, [r7, #8]
  int offs = 190;
 8001e1a:	23be      	movs	r3, #190	; 0xbe
 8001e1c:	607b      	str	r3, [r7, #4]
  static uint16_t xsh = 0;
  ili9341_FillRect(xsh, offs, ratte ,sizo, cl_MAROON);
 8001e1e:	4b1d      	ldr	r3, [pc, #116]	; (8001e94 <running_box+0x88>)
 8001e20:	8818      	ldrh	r0, [r3, #0]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	b299      	uxth	r1, r3
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	b29a      	uxth	r2, r3
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	f44f 44f0 	mov.w	r4, #30720	; 0x7800
 8001e32:	9400      	str	r4, [sp, #0]
 8001e34:	f000 feac 	bl	8002b90 <ili9341_FillRect>
  xsh += ratte;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	b29a      	uxth	r2, r3
 8001e3c:	4b15      	ldr	r3, [pc, #84]	; (8001e94 <running_box+0x88>)
 8001e3e:	881b      	ldrh	r3, [r3, #0]
 8001e40:	4413      	add	r3, r2
 8001e42:	b29a      	uxth	r2, r3
 8001e44:	4b13      	ldr	r3, [pc, #76]	; (8001e94 <running_box+0x88>)
 8001e46:	801a      	strh	r2, [r3, #0]
  ili9341_FillRect(xsh, offs, sizo, sizo, cl_CYAN); //// box
 8001e48:	4b12      	ldr	r3, [pc, #72]	; (8001e94 <running_box+0x88>)
 8001e4a:	8818      	ldrh	r0, [r3, #0]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	b299      	uxth	r1, r3
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	b29a      	uxth	r2, r3
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	b29b      	uxth	r3, r3
 8001e58:	f240 74ff 	movw	r4, #2047	; 0x7ff
 8001e5c:	9400      	str	r4, [sp, #0]
 8001e5e:	f000 fe97 	bl	8002b90 <ili9341_FillRect>
  if(xsh >= 400){ // clear
 8001e62:	4b0c      	ldr	r3, [pc, #48]	; (8001e94 <running_box+0x88>)
 8001e64:	881b      	ldrh	r3, [r3, #0]
 8001e66:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001e6a:	d30f      	bcc.n	8001e8c <running_box+0x80>
	  ili9341_FillRect(xsh, offs, sizo, sizo, cl_MAROON);
 8001e6c:	4b09      	ldr	r3, [pc, #36]	; (8001e94 <running_box+0x88>)
 8001e6e:	8818      	ldrh	r0, [r3, #0]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	b299      	uxth	r1, r3
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	b29a      	uxth	r2, r3
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	f44f 44f0 	mov.w	r4, #30720	; 0x7800
 8001e80:	9400      	str	r4, [sp, #0]
 8001e82:	f000 fe85 	bl	8002b90 <ili9341_FillRect>
	  xsh = 0;
 8001e86:	4b03      	ldr	r3, [pc, #12]	; (8001e94 <running_box+0x88>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	801a      	strh	r2, [r3, #0]
		  }

}
 8001e8c:	bf00      	nop
 8001e8e:	3714      	adds	r7, #20
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd90      	pop	{r4, r7, pc}
 8001e94:	2000069c 	.word	0x2000069c

08001e98 <simple_scr>:

void simple_scr(){
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af04      	add	r7, sp, #16
#ifdef INA219_Wrk

	  //INATT.U16[1] = INA219Read_cx(&hi2c1, INA219_ADDR_1, INA219_RG_Config);
	  //INATT.U16[2] = INA219Read_cx(&hi2c1, INA219_ADDR_1, INA219_RG_Current);

	  inata.Bus_V   = INA219Read_BusV(&hi2c1, INA219_ADDR_1);
 8001e9e:	2180      	movs	r1, #128	; 0x80
 8001ea0:	486a      	ldr	r0, [pc, #424]	; (800204c <simple_scr+0x1b4>)
 8001ea2:	f7ff f955 	bl	8001150 <INA219Read_BusV>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	4b69      	ldr	r3, [pc, #420]	; (8002050 <simple_scr+0x1b8>)
 8001eac:	821a      	strh	r2, [r3, #16]
	  inata.CURRENT = INA219Read_Current(&hi2c1, INA219_ADDR_1);
 8001eae:	2180      	movs	r1, #128	; 0x80
 8001eb0:	4866      	ldr	r0, [pc, #408]	; (800204c <simple_scr+0x1b4>)
 8001eb2:	f7ff f975 	bl	80011a0 <INA219Read_Current>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	b21a      	sxth	r2, r3
 8001eba:	4b65      	ldr	r3, [pc, #404]	; (8002050 <simple_scr+0x1b8>)
 8001ebc:	811a      	strh	r2, [r3, #8]
	  inata.POWER   = INA219Read_Power(&hi2c1, INA219_ADDR_1);
 8001ebe:	2180      	movs	r1, #128	; 0x80
 8001ec0:	4862      	ldr	r0, [pc, #392]	; (800204c <simple_scr+0x1b4>)
 8001ec2:	f7ff f9cd 	bl	8001260 <INA219Read_Power>
 8001ec6:	eef0 7a40 	vmov.f32	s15, s0
 8001eca:	4b61      	ldr	r3, [pc, #388]	; (8002050 <simple_scr+0x1b8>)
 8001ecc:	edc3 7a03 	vstr	s15, [r3, #12]
	  inata.SHUNT_V = INA219Read_ShuntV(&hi2c1, INA219_ADDR_1);
 8001ed0:	2180      	movs	r1, #128	; 0x80
 8001ed2:	485e      	ldr	r0, [pc, #376]	; (800204c <simple_scr+0x1b4>)
 8001ed4:	f7ff f988 	bl	80011e8 <INA219Read_ShuntV>
 8001ed8:	eef0 7a40 	vmov.f32	s15, s0
 8001edc:	4b5c      	ldr	r3, [pc, #368]	; (8002050 <simple_scr+0x1b8>)
 8001ede:	edc3 7a01 	vstr	s15, [r3, #4]

	  inata.Calibra =  INA219Read_cx(&hi2c1, INA219_ADDR_1, INA219_RG_Calibra);
 8001ee2:	2205      	movs	r2, #5
 8001ee4:	2180      	movs	r1, #128	; 0x80
 8001ee6:	4859      	ldr	r0, [pc, #356]	; (800204c <simple_scr+0x1b4>)
 8001ee8:	f7ff f858 	bl	8000f9c <INA219Read_cx>
 8001eec:	4603      	mov	r3, r0
 8001eee:	461a      	mov	r2, r3
 8001ef0:	4b57      	ldr	r3, [pc, #348]	; (8002050 <simple_scr+0x1b8>)
 8001ef2:	825a      	strh	r2, [r3, #18]
	  inata.Config = INA219Read_cx(&hi2c1, INA219_ADDR_1, INA219_RG_Config);
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	2180      	movs	r1, #128	; 0x80
 8001ef8:	4854      	ldr	r0, [pc, #336]	; (800204c <simple_scr+0x1b4>)
 8001efa:	f7ff f84f 	bl	8000f9c <INA219Read_cx>
 8001efe:	4603      	mov	r3, r0
 8001f00:	461a      	mov	r2, r3
 8001f02:	4b53      	ldr	r3, [pc, #332]	; (8002050 <simple_scr+0x1b8>)
 8001f04:	801a      	strh	r2, [r3, #0]

	  sprintf(TextDispBuffer,"calibrator:%4X", inata.Calibra);
 8001f06:	4b52      	ldr	r3, [pc, #328]	; (8002050 <simple_scr+0x1b8>)
 8001f08:	8a5b      	ldrh	r3, [r3, #18]
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	4951      	ldr	r1, [pc, #324]	; (8002054 <simple_scr+0x1bc>)
 8001f0e:	4852      	ldr	r0, [pc, #328]	; (8002058 <simple_scr+0x1c0>)
 8001f10:	f008 f8d6 	bl	800a0c0 <siprintf>
	  ili9341_WriteString(20, 50, TextDispBuffer, Font12, cl_GREENYELLOW, cl_BLACK);
 8001f14:	4b51      	ldr	r3, [pc, #324]	; (800205c <simple_scr+0x1c4>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	9202      	str	r2, [sp, #8]
 8001f1a:	f64a 72e5 	movw	r2, #45029	; 0xafe5
 8001f1e:	9201      	str	r2, [sp, #4]
 8001f20:	685a      	ldr	r2, [r3, #4]
 8001f22:	9200      	str	r2, [sp, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a4c      	ldr	r2, [pc, #304]	; (8002058 <simple_scr+0x1c0>)
 8001f28:	2132      	movs	r1, #50	; 0x32
 8001f2a:	2014      	movs	r0, #20
 8001f2c:	f000 ff2d 	bl	8002d8a <ili9341_WriteString>

	  sprintf(TextDispBuffer,"V mV: %d    ", inata.Bus_V);
 8001f30:	4b47      	ldr	r3, [pc, #284]	; (8002050 <simple_scr+0x1b8>)
 8001f32:	8a1b      	ldrh	r3, [r3, #16]
 8001f34:	461a      	mov	r2, r3
 8001f36:	494a      	ldr	r1, [pc, #296]	; (8002060 <simple_scr+0x1c8>)
 8001f38:	4847      	ldr	r0, [pc, #284]	; (8002058 <simple_scr+0x1c0>)
 8001f3a:	f008 f8c1 	bl	800a0c0 <siprintf>
	  ili9341_WriteString(20, 70, TextDispBuffer, Font16, cl_CYAN, cl_BLACK);
 8001f3e:	4b49      	ldr	r3, [pc, #292]	; (8002064 <simple_scr+0x1cc>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	9202      	str	r2, [sp, #8]
 8001f44:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001f48:	9201      	str	r2, [sp, #4]
 8001f4a:	685a      	ldr	r2, [r3, #4]
 8001f4c:	9200      	str	r2, [sp, #0]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a41      	ldr	r2, [pc, #260]	; (8002058 <simple_scr+0x1c0>)
 8001f52:	2146      	movs	r1, #70	; 0x46
 8001f54:	2014      	movs	r0, #20
 8001f56:	f000 ff18 	bl	8002d8a <ili9341_WriteString>

	  sprintf(TextDispBuffer,"I mA: %d    ", inata.CURRENT);
 8001f5a:	4b3d      	ldr	r3, [pc, #244]	; (8002050 <simple_scr+0x1b8>)
 8001f5c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001f60:	461a      	mov	r2, r3
 8001f62:	4941      	ldr	r1, [pc, #260]	; (8002068 <simple_scr+0x1d0>)
 8001f64:	483c      	ldr	r0, [pc, #240]	; (8002058 <simple_scr+0x1c0>)
 8001f66:	f008 f8ab 	bl	800a0c0 <siprintf>
	  ili9341_WriteString(20, 95, TextDispBuffer, Font16, cl_CYAN, cl_BLACK);
 8001f6a:	4b3e      	ldr	r3, [pc, #248]	; (8002064 <simple_scr+0x1cc>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	9202      	str	r2, [sp, #8]
 8001f70:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001f74:	9201      	str	r2, [sp, #4]
 8001f76:	685a      	ldr	r2, [r3, #4]
 8001f78:	9200      	str	r2, [sp, #0]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a36      	ldr	r2, [pc, #216]	; (8002058 <simple_scr+0x1c0>)
 8001f7e:	215f      	movs	r1, #95	; 0x5f
 8001f80:	2014      	movs	r0, #20
 8001f82:	f000 ff02 	bl	8002d8a <ili9341_WriteString>

	  sprintf(TextDispBuffer,"P mW: %.2f  ", inata.POWER);
 8001f86:	4b32      	ldr	r3, [pc, #200]	; (8002050 <simple_scr+0x1b8>)
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7fe fae4 	bl	8000558 <__aeabi_f2d>
 8001f90:	4602      	mov	r2, r0
 8001f92:	460b      	mov	r3, r1
 8001f94:	4935      	ldr	r1, [pc, #212]	; (800206c <simple_scr+0x1d4>)
 8001f96:	4830      	ldr	r0, [pc, #192]	; (8002058 <simple_scr+0x1c0>)
 8001f98:	f008 f892 	bl	800a0c0 <siprintf>
	  ili9341_WriteString(20, 120, TextDispBuffer, Font16, cl_CYAN, cl_BLACK);
 8001f9c:	4b31      	ldr	r3, [pc, #196]	; (8002064 <simple_scr+0x1cc>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	9202      	str	r2, [sp, #8]
 8001fa2:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001fa6:	9201      	str	r2, [sp, #4]
 8001fa8:	685a      	ldr	r2, [r3, #4]
 8001faa:	9200      	str	r2, [sp, #0]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a2a      	ldr	r2, [pc, #168]	; (8002058 <simple_scr+0x1c0>)
 8001fb0:	2178      	movs	r1, #120	; 0x78
 8001fb2:	2014      	movs	r0, #20
 8001fb4:	f000 fee9 	bl	8002d8a <ili9341_WriteString>
#endif

	  mcp_read.raw[0] = MCP3208_READ_8_DataSPI(&hspi3, M8_CH0);
 8001fb8:	2118      	movs	r1, #24
 8001fba:	482d      	ldr	r0, [pc, #180]	; (8002070 <simple_scr+0x1d8>)
 8001fbc:	f7ff f99a 	bl	80012f4 <MCP3208_READ_8_DataSPI>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	4b2b      	ldr	r3, [pc, #172]	; (8002074 <simple_scr+0x1dc>)
 8001fc6:	801a      	strh	r2, [r3, #0]
	  mcp_read.cv[0] = MCP320x_ADCbit_to_Volt(mcp_read.raw[0]);
 8001fc8:	4b2a      	ldr	r3, [pc, #168]	; (8002074 <simple_scr+0x1dc>)
 8001fca:	881b      	ldrh	r3, [r3, #0]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7ff f9c7 	bl	8001360 <MCP320x_ADCbit_to_Volt>
 8001fd2:	eef0 7a40 	vmov.f32	s15, s0
 8001fd6:	4b27      	ldr	r3, [pc, #156]	; (8002074 <simple_scr+0x1dc>)
 8001fd8:	edc3 7a02 	vstr	s15, [r3, #8]
	  sprintf(TextDispBuffer,"MCP : %.2f  ", mcp_read.cv[0]);
 8001fdc:	4b25      	ldr	r3, [pc, #148]	; (8002074 <simple_scr+0x1dc>)
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7fe fab9 	bl	8000558 <__aeabi_f2d>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	460b      	mov	r3, r1
 8001fea:	4923      	ldr	r1, [pc, #140]	; (8002078 <simple_scr+0x1e0>)
 8001fec:	481a      	ldr	r0, [pc, #104]	; (8002058 <simple_scr+0x1c0>)
 8001fee:	f008 f867 	bl	800a0c0 <siprintf>
	  ili9341_WriteString(20, 145, TextDispBuffer, Font16, cl_CYAN, cl_BLACK);
 8001ff2:	4b1c      	ldr	r3, [pc, #112]	; (8002064 <simple_scr+0x1cc>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	9202      	str	r2, [sp, #8]
 8001ff8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001ffc:	9201      	str	r2, [sp, #4]
 8001ffe:	685a      	ldr	r2, [r3, #4]
 8002000:	9200      	str	r2, [sp, #0]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a14      	ldr	r2, [pc, #80]	; (8002058 <simple_scr+0x1c0>)
 8002006:	2191      	movs	r1, #145	; 0x91
 8002008:	2014      	movs	r0, #20
 800200a:	f000 febe 	bl	8002d8a <ili9341_WriteString>

	  sprintf(TextDispBuffer,"btn %X %X %d",btn_read[1], btn_read[2], btn_cnt);
 800200e:	4b1b      	ldr	r3, [pc, #108]	; (800207c <simple_scr+0x1e4>)
 8002010:	785b      	ldrb	r3, [r3, #1]
 8002012:	461a      	mov	r2, r3
 8002014:	4b19      	ldr	r3, [pc, #100]	; (800207c <simple_scr+0x1e4>)
 8002016:	789b      	ldrb	r3, [r3, #2]
 8002018:	4619      	mov	r1, r3
 800201a:	4b19      	ldr	r3, [pc, #100]	; (8002080 <simple_scr+0x1e8>)
 800201c:	881b      	ldrh	r3, [r3, #0]
 800201e:	9300      	str	r3, [sp, #0]
 8002020:	460b      	mov	r3, r1
 8002022:	4918      	ldr	r1, [pc, #96]	; (8002084 <simple_scr+0x1ec>)
 8002024:	480c      	ldr	r0, [pc, #48]	; (8002058 <simple_scr+0x1c0>)
 8002026:	f008 f84b 	bl	800a0c0 <siprintf>
	  ili9341_WriteString(170, 50, TextDispBuffer, Font16, cl_YELLOW, cl_BLACK);
 800202a:	4b0e      	ldr	r3, [pc, #56]	; (8002064 <simple_scr+0x1cc>)
 800202c:	2200      	movs	r2, #0
 800202e:	9202      	str	r2, [sp, #8]
 8002030:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002034:	9201      	str	r2, [sp, #4]
 8002036:	685a      	ldr	r2, [r3, #4]
 8002038:	9200      	str	r2, [sp, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a06      	ldr	r2, [pc, #24]	; (8002058 <simple_scr+0x1c0>)
 800203e:	2132      	movs	r1, #50	; 0x32
 8002040:	20aa      	movs	r0, #170	; 0xaa
 8002042:	f000 fea2 	bl	8002d8a <ili9341_WriteString>

}
 8002046:	bf00      	nop
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	20000228 	.word	0x20000228
 8002050:	20000650 	.word	0x20000650
 8002054:	0800c6ec 	.word	0x0800c6ec
 8002058:	20000448 	.word	0x20000448
 800205c:	20000010 	.word	0x20000010
 8002060:	0800c6fc 	.word	0x0800c6fc
 8002064:	20000018 	.word	0x20000018
 8002068:	0800c70c 	.word	0x0800c70c
 800206c:	0800c71c 	.word	0x0800c71c
 8002070:	2000027c 	.word	0x2000027c
 8002074:	20000668 	.word	0x20000668
 8002078:	0800c72c 	.word	0x0800c72c
 800207c:	20000694 	.word	0x20000694
 8002080:	20000698 	.word	0x20000698
 8002084:	0800c73c 	.word	0x0800c73c

08002088 <Button_machine>:


void Button_machine(){
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
	 * raw read,
	 * read from 1 as rising detect,
	 * read latest (bdebug),
	 * read latest & erased when fin}
	 */
		btn_read[1] = btn_read[0];
 800208c:	4b16      	ldr	r3, [pc, #88]	; (80020e8 <Button_machine+0x60>)
 800208e:	781a      	ldrb	r2, [r3, #0]
 8002090:	4b15      	ldr	r3, [pc, #84]	; (80020e8 <Button_machine+0x60>)
 8002092:	705a      	strb	r2, [r3, #1]
		btn_read[0] = (0x0F & ~(GPIOB->IDR >> 12)); //// available for PB 12 13 14 15 or which the same bank only
 8002094:	4b15      	ldr	r3, [pc, #84]	; (80020ec <Button_machine+0x64>)
 8002096:	691b      	ldr	r3, [r3, #16]
 8002098:	0b1b      	lsrs	r3, r3, #12
 800209a:	b2db      	uxtb	r3, r3
 800209c:	43db      	mvns	r3, r3
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	f003 030f 	and.w	r3, r3, #15
 80020a4:	b2da      	uxtb	r2, r3
 80020a6:	4b10      	ldr	r3, [pc, #64]	; (80020e8 <Button_machine+0x60>)
 80020a8:	701a      	strb	r2, [r3, #0]

		//// rising edge counter
		if(btn_read[0] && btn_read[1] == 0){
 80020aa:	4b0f      	ldr	r3, [pc, #60]	; (80020e8 <Button_machine+0x60>)
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d014      	beq.n	80020dc <Button_machine+0x54>
 80020b2:	4b0d      	ldr	r3, [pc, #52]	; (80020e8 <Button_machine+0x60>)
 80020b4:	785b      	ldrb	r3, [r3, #1]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d110      	bne.n	80020dc <Button_machine+0x54>
			btn_cnt += btn_read[0]; //// plus at each hex pos
 80020ba:	4b0b      	ldr	r3, [pc, #44]	; (80020e8 <Button_machine+0x60>)
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	b29a      	uxth	r2, r3
 80020c0:	4b0b      	ldr	r3, [pc, #44]	; (80020f0 <Button_machine+0x68>)
 80020c2:	881b      	ldrh	r3, [r3, #0]
 80020c4:	4413      	add	r3, r2
 80020c6:	b29a      	uxth	r2, r3
 80020c8:	4b09      	ldr	r3, [pc, #36]	; (80020f0 <Button_machine+0x68>)
 80020ca:	801a      	strh	r2, [r3, #0]
			btn_read[2] = btn_read[0]; //// read latest, debug
 80020cc:	4b06      	ldr	r3, [pc, #24]	; (80020e8 <Button_machine+0x60>)
 80020ce:	781a      	ldrb	r2, [r3, #0]
 80020d0:	4b05      	ldr	r3, [pc, #20]	; (80020e8 <Button_machine+0x60>)
 80020d2:	709a      	strb	r2, [r3, #2]
			btn_read[3] = btn_read[0]; //// read latest, clearable
 80020d4:	4b04      	ldr	r3, [pc, #16]	; (80020e8 <Button_machine+0x60>)
 80020d6:	781a      	ldrb	r2, [r3, #0]
 80020d8:	4b03      	ldr	r3, [pc, #12]	; (80020e8 <Button_machine+0x60>)
 80020da:	70da      	strb	r2, [r3, #3]
		}


}
 80020dc:	bf00      	nop
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	20000694 	.word	0x20000694
 80020ec:	40020400 	.word	0x40020400
 80020f0:	20000698 	.word	0x20000698

080020f4 <buzzer_scream_cnt>:

void buzzer_scream_cnt(){
 80020f4:	b598      	push	{r3, r4, r7, lr}
 80020f6:	af00      	add	r7, sp, #0
	static enum {bz_init, bz_silent, bz_scream} bz_st = bz_init;
	//uint16_t tup = 100, tdn = 50;

		switch(bz_st){
 80020f8:	4b35      	ldr	r3, [pc, #212]	; (80021d0 <buzzer_scream_cnt+0xdc>)
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d039      	beq.n	8002174 <buzzer_scream_cnt+0x80>
 8002100:	2b02      	cmp	r3, #2
 8002102:	d01d      	beq.n	8002140 <buzzer_scream_cnt+0x4c>
		default:
		case bz_init:
			//HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);

			if(flagc_bz){
 8002104:	4b33      	ldr	r3, [pc, #204]	; (80021d4 <buzzer_scream_cnt+0xe0>)
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d015      	beq.n	8002138 <buzzer_scream_cnt+0x44>

				HAL_TIM_Base_Start_IT(&htim10);
 800210c:	4832      	ldr	r0, [pc, #200]	; (80021d8 <buzzer_scream_cnt+0xe4>)
 800210e:	f005 fe41 	bl	8007d94 <HAL_TIM_Base_Start_IT>
				timestamp_bz = bzz_t_priod_up + HAL_GetTick(); //
 8002112:	4b32      	ldr	r3, [pc, #200]	; (80021dc <buzzer_scream_cnt+0xe8>)
 8002114:	881b      	ldrh	r3, [r3, #0]
 8002116:	461c      	mov	r4, r3
 8002118:	f001 faa2 	bl	8003660 <HAL_GetTick>
 800211c:	4603      	mov	r3, r0
 800211e:	4423      	add	r3, r4
 8002120:	4a2f      	ldr	r2, [pc, #188]	; (80021e0 <buzzer_scream_cnt+0xec>)
 8002122:	6013      	str	r3, [r2, #0]

				bz_st = bz_scream;
 8002124:	4b2a      	ldr	r3, [pc, #168]	; (80021d0 <buzzer_scream_cnt+0xdc>)
 8002126:	2202      	movs	r2, #2
 8002128:	701a      	strb	r2, [r3, #0]
				/// down flag_counter every 1 scream
				flagc_bz--;
 800212a:	4b2a      	ldr	r3, [pc, #168]	; (80021d4 <buzzer_scream_cnt+0xe0>)
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	3b01      	subs	r3, #1
 8002130:	b2da      	uxtb	r2, r3
 8002132:	4b28      	ldr	r3, [pc, #160]	; (80021d4 <buzzer_scream_cnt+0xe0>)
 8002134:	701a      	strb	r2, [r3, #0]
			}else{
				HAL_TIM_Base_Stop_IT(&htim10);
			}

			break;
 8002136:	e048      	b.n	80021ca <buzzer_scream_cnt+0xd6>
				HAL_TIM_Base_Stop_IT(&htim10);
 8002138:	4827      	ldr	r0, [pc, #156]	; (80021d8 <buzzer_scream_cnt+0xe4>)
 800213a:	f005 fe8d 	bl	8007e58 <HAL_TIM_Base_Stop_IT>
			break;
 800213e:	e044      	b.n	80021ca <buzzer_scream_cnt+0xd6>

		case bz_scream:
			HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET);
 8002140:	2201      	movs	r2, #1
 8002142:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002146:	4827      	ldr	r0, [pc, #156]	; (80021e4 <buzzer_scream_cnt+0xf0>)
 8002148:	f002 f960 	bl	800440c <HAL_GPIO_WritePin>

			if(HAL_GetTick() >= timestamp_bz){
 800214c:	f001 fa88 	bl	8003660 <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	4b23      	ldr	r3, [pc, #140]	; (80021e0 <buzzer_scream_cnt+0xec>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	429a      	cmp	r2, r3
 8002158:	d334      	bcc.n	80021c4 <buzzer_scream_cnt+0xd0>
				timestamp_bz = bzz_t_priod_dn + HAL_GetTick();
 800215a:	4b23      	ldr	r3, [pc, #140]	; (80021e8 <buzzer_scream_cnt+0xf4>)
 800215c:	881b      	ldrh	r3, [r3, #0]
 800215e:	461c      	mov	r4, r3
 8002160:	f001 fa7e 	bl	8003660 <HAL_GetTick>
 8002164:	4603      	mov	r3, r0
 8002166:	4423      	add	r3, r4
 8002168:	4a1d      	ldr	r2, [pc, #116]	; (80021e0 <buzzer_scream_cnt+0xec>)
 800216a:	6013      	str	r3, [r2, #0]

				bz_st = bz_silent;
 800216c:	4b18      	ldr	r3, [pc, #96]	; (80021d0 <buzzer_scream_cnt+0xdc>)
 800216e:	2201      	movs	r2, #1
 8002170:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002172:	e027      	b.n	80021c4 <buzzer_scream_cnt+0xd0>


		case bz_silent:
			HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 8002174:	2200      	movs	r2, #0
 8002176:	f44f 7100 	mov.w	r1, #512	; 0x200
 800217a:	481a      	ldr	r0, [pc, #104]	; (80021e4 <buzzer_scream_cnt+0xf0>)
 800217c:	f002 f946 	bl	800440c <HAL_GPIO_WritePin>

			if(HAL_GetTick() >= timestamp_bz){
 8002180:	f001 fa6e 	bl	8003660 <HAL_GetTick>
 8002184:	4602      	mov	r2, r0
 8002186:	4b16      	ldr	r3, [pc, #88]	; (80021e0 <buzzer_scream_cnt+0xec>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	429a      	cmp	r2, r3
 800218c:	d31c      	bcc.n	80021c8 <buzzer_scream_cnt+0xd4>

				if(flagc_bz){
 800218e:	4b11      	ldr	r3, [pc, #68]	; (80021d4 <buzzer_scream_cnt+0xe0>)
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d012      	beq.n	80021bc <buzzer_scream_cnt+0xc8>
					timestamp_bz = bzz_t_priod_up + HAL_GetTick(); //
 8002196:	4b11      	ldr	r3, [pc, #68]	; (80021dc <buzzer_scream_cnt+0xe8>)
 8002198:	881b      	ldrh	r3, [r3, #0]
 800219a:	461c      	mov	r4, r3
 800219c:	f001 fa60 	bl	8003660 <HAL_GetTick>
 80021a0:	4603      	mov	r3, r0
 80021a2:	4423      	add	r3, r4
 80021a4:	4a0e      	ldr	r2, [pc, #56]	; (80021e0 <buzzer_scream_cnt+0xec>)
 80021a6:	6013      	str	r3, [r2, #0]

					flagc_bz--;
 80021a8:	4b0a      	ldr	r3, [pc, #40]	; (80021d4 <buzzer_scream_cnt+0xe0>)
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	3b01      	subs	r3, #1
 80021ae:	b2da      	uxtb	r2, r3
 80021b0:	4b08      	ldr	r3, [pc, #32]	; (80021d4 <buzzer_scream_cnt+0xe0>)
 80021b2:	701a      	strb	r2, [r3, #0]
					bz_st = bz_scream;
 80021b4:	4b06      	ldr	r3, [pc, #24]	; (80021d0 <buzzer_scream_cnt+0xdc>)
 80021b6:	2202      	movs	r2, #2
 80021b8:	701a      	strb	r2, [r3, #0]
				}else{
				bz_st = bz_init;
				}
			}

			break;
 80021ba:	e005      	b.n	80021c8 <buzzer_scream_cnt+0xd4>
				bz_st = bz_init;
 80021bc:	4b04      	ldr	r3, [pc, #16]	; (80021d0 <buzzer_scream_cnt+0xdc>)
 80021be:	2200      	movs	r2, #0
 80021c0:	701a      	strb	r2, [r3, #0]
			break;
 80021c2:	e001      	b.n	80021c8 <buzzer_scream_cnt+0xd4>
			break;
 80021c4:	bf00      	nop
 80021c6:	e000      	b.n	80021ca <buzzer_scream_cnt+0xd6>
			break;
 80021c8:	bf00      	nop
		}

}
 80021ca:	bf00      	nop
 80021cc:	bd98      	pop	{r3, r4, r7, pc}
 80021ce:	bf00      	nop
 80021d0:	2000069e 	.word	0x2000069e
 80021d4:	20000690 	.word	0x20000690
 80021d8:	200002d4 	.word	0x200002d4
 80021dc:	20000006 	.word	0x20000006
 80021e0:	20000688 	.word	0x20000688
 80021e4:	40020800 	.word	0x40020800
 80021e8:	20000008 	.word	0x20000008

080021ec <GrandState_Verita>:

void State_Script_1(){

}

void GrandState_Verita(){
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0


	switch(GrandState){
 80021f0:	4b0f      	ldr	r3, [pc, #60]	; (8002230 <GrandState_Verita+0x44>)
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d018      	beq.n	800222a <GrandState_Verita+0x3e>
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d002      	beq.n	8002202 <GrandState_Verita+0x16>
	default:
	case lobby:
		simple_scr();
 80021fc:	f7ff fe4c 	bl	8001e98 <simple_scr>
		break; // lobby
 8002200:	e014      	b.n	800222c <GrandState_Verita+0x40>
	case init:
		break;

	case s_bootloader:

		BL_UART_Start(&huart1);
 8002202:	480c      	ldr	r0, [pc, #48]	; (8002234 <GrandState_Verita+0x48>)
 8002204:	f7ff f9ba 	bl	800157c <BL_UART_Start>

		//BL_UART_GET_CMD(&huart1, BL_UARTBuffer);
		//BL_UART_GETVersion(&huart1, BL_UARTBuffer);
		BL_UART_GETID(&huart1, BL_UARTBuffer);
 8002208:	490b      	ldr	r1, [pc, #44]	; (8002238 <GrandState_Verita+0x4c>)
 800220a:	480a      	ldr	r0, [pc, #40]	; (8002234 <GrandState_Verita+0x48>)
 800220c:	f7ff fa04 	bl	8001618 <BL_UART_GETID>

		BL_UART_ReadMem(&huart1, 0x08000000U, 255, BL_MemBuffer);
 8002210:	4b0a      	ldr	r3, [pc, #40]	; (800223c <GrandState_Verita+0x50>)
 8002212:	22ff      	movs	r2, #255	; 0xff
 8002214:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8002218:	4806      	ldr	r0, [pc, #24]	; (8002234 <GrandState_Verita+0x48>)
 800221a:	f7ff fa2b 	bl	8001674 <BL_UART_ReadMem>

//
//		BL_UART_Write_Protect(&huart1);
//		HAL_Delay(100);

		BL_UART_Finish();
 800221e:	f7ff f9dd 	bl	80015dc <BL_UART_Finish>

		GrandState = lobby;
 8002222:	4b03      	ldr	r3, [pc, #12]	; (8002230 <GrandState_Verita+0x44>)
 8002224:	2201      	movs	r2, #1
 8002226:	701a      	strb	r2, [r3, #0]

		break;
 8002228:	e000      	b.n	800222c <GrandState_Verita+0x40>
		break;
 800222a:	bf00      	nop
	}
}
 800222c:	bf00      	nop
 800222e:	bd80      	pop	{r7, pc}
 8002230:	20000004 	.word	0x20000004
 8002234:	2000031c 	.word	0x2000031c
 8002238:	200004d0 	.word	0x200004d0
 800223c:	200004e4 	.word	0x200004e4

08002240 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	4603      	mov	r3, r0
 8002248:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13){
 800224a:	88fb      	ldrh	r3, [r7, #6]
 800224c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002250:	d107      	bne.n	8002262 <HAL_GPIO_EXTI_Callback+0x22>
		//INA219_BitReset(&hi2c1, INA219_ADDR_1);
		flagc_bz = 12;
 8002252:	4b06      	ldr	r3, [pc, #24]	; (800226c <HAL_GPIO_EXTI_Callback+0x2c>)
 8002254:	220c      	movs	r2, #12
 8002256:	701a      	strb	r2, [r3, #0]
		buzzer_scream_cnt();
 8002258:	f7ff ff4c 	bl	80020f4 <buzzer_scream_cnt>

		//// bootloader test
		GrandState = s_bootloader;
 800225c:	4b04      	ldr	r3, [pc, #16]	; (8002270 <HAL_GPIO_EXTI_Callback+0x30>)
 800225e:	2202      	movs	r2, #2
 8002260:	701a      	strb	r2, [r3, #0]
		}
}
 8002262:	bf00      	nop
 8002264:	3708      	adds	r7, #8
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	20000690 	.word	0x20000690
 8002270:	20000004 	.word	0x20000004

08002274 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
	if(htim == &htim10){
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	4a07      	ldr	r2, [pc, #28]	; (800229c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d106      	bne.n	8002292 <HAL_TIM_PeriodElapsedCallback+0x1e>
		_millis++;
 8002284:	4b06      	ldr	r3, [pc, #24]	; (80022a0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	3301      	adds	r3, #1
 800228a:	4a05      	ldr	r2, [pc, #20]	; (80022a0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800228c:	6013      	str	r3, [r2, #0]
		buzzer_scream_cnt();
 800228e:	f7ff ff31 	bl	80020f4 <buzzer_scream_cnt>
	}
}
 8002292:	bf00      	nop
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	200002d4 	.word	0x200002d4
 80022a0:	2000068c 	.word	0x2000068c

080022a4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
	counter++;
 80022ac:	4b05      	ldr	r3, [pc, #20]	; (80022c4 <HAL_UART_RxCpltCallback+0x20>)
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	3301      	adds	r3, #1
 80022b2:	b2da      	uxtb	r2, r3
 80022b4:	4b03      	ldr	r3, [pc, #12]	; (80022c4 <HAL_UART_RxCpltCallback+0x20>)
 80022b6:	701a      	strb	r2, [r3, #0]
}
 80022b8:	bf00      	nop
 80022ba:	370c      	adds	r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr
 80022c4:	2000069a 	.word	0x2000069a

080022c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022c8:	b480      	push	{r7}
 80022ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022cc:	b672      	cpsid	i
}
 80022ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022d0:	e7fe      	b.n	80022d0 <Error_Handler+0x8>
	...

080022d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022da:	2300      	movs	r3, #0
 80022dc:	607b      	str	r3, [r7, #4]
 80022de:	4b10      	ldr	r3, [pc, #64]	; (8002320 <HAL_MspInit+0x4c>)
 80022e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e2:	4a0f      	ldr	r2, [pc, #60]	; (8002320 <HAL_MspInit+0x4c>)
 80022e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022e8:	6453      	str	r3, [r2, #68]	; 0x44
 80022ea:	4b0d      	ldr	r3, [pc, #52]	; (8002320 <HAL_MspInit+0x4c>)
 80022ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022f2:	607b      	str	r3, [r7, #4]
 80022f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022f6:	2300      	movs	r3, #0
 80022f8:	603b      	str	r3, [r7, #0]
 80022fa:	4b09      	ldr	r3, [pc, #36]	; (8002320 <HAL_MspInit+0x4c>)
 80022fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fe:	4a08      	ldr	r2, [pc, #32]	; (8002320 <HAL_MspInit+0x4c>)
 8002300:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002304:	6413      	str	r3, [r2, #64]	; 0x40
 8002306:	4b06      	ldr	r3, [pc, #24]	; (8002320 <HAL_MspInit+0x4c>)
 8002308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800230e:	603b      	str	r3, [r7, #0]
 8002310:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002312:	2007      	movs	r0, #7
 8002314:	f001 faa4 	bl	8003860 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002318:	bf00      	nop
 800231a:	3708      	adds	r7, #8
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	40023800 	.word	0x40023800

08002324 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b08a      	sub	sp, #40	; 0x28
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800232c:	f107 0314 	add.w	r3, r7, #20
 8002330:	2200      	movs	r2, #0
 8002332:	601a      	str	r2, [r3, #0]
 8002334:	605a      	str	r2, [r3, #4]
 8002336:	609a      	str	r2, [r3, #8]
 8002338:	60da      	str	r2, [r3, #12]
 800233a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a21      	ldr	r2, [pc, #132]	; (80023c8 <HAL_I2C_MspInit+0xa4>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d13c      	bne.n	80023c0 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002346:	2300      	movs	r3, #0
 8002348:	613b      	str	r3, [r7, #16]
 800234a:	4b20      	ldr	r3, [pc, #128]	; (80023cc <HAL_I2C_MspInit+0xa8>)
 800234c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234e:	4a1f      	ldr	r2, [pc, #124]	; (80023cc <HAL_I2C_MspInit+0xa8>)
 8002350:	f043 0302 	orr.w	r3, r3, #2
 8002354:	6313      	str	r3, [r2, #48]	; 0x30
 8002356:	4b1d      	ldr	r3, [pc, #116]	; (80023cc <HAL_I2C_MspInit+0xa8>)
 8002358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	613b      	str	r3, [r7, #16]
 8002360:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002362:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002366:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002368:	2312      	movs	r3, #18
 800236a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236c:	2300      	movs	r3, #0
 800236e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002370:	2303      	movs	r3, #3
 8002372:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002374:	2304      	movs	r3, #4
 8002376:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002378:	f107 0314 	add.w	r3, r7, #20
 800237c:	4619      	mov	r1, r3
 800237e:	4814      	ldr	r0, [pc, #80]	; (80023d0 <HAL_I2C_MspInit+0xac>)
 8002380:	f001 fec0 	bl	8004104 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002384:	2300      	movs	r3, #0
 8002386:	60fb      	str	r3, [r7, #12]
 8002388:	4b10      	ldr	r3, [pc, #64]	; (80023cc <HAL_I2C_MspInit+0xa8>)
 800238a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238c:	4a0f      	ldr	r2, [pc, #60]	; (80023cc <HAL_I2C_MspInit+0xa8>)
 800238e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002392:	6413      	str	r3, [r2, #64]	; 0x40
 8002394:	4b0d      	ldr	r3, [pc, #52]	; (80023cc <HAL_I2C_MspInit+0xa8>)
 8002396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002398:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800239c:	60fb      	str	r3, [r7, #12]
 800239e:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80023a0:	2200      	movs	r2, #0
 80023a2:	2100      	movs	r1, #0
 80023a4:	201f      	movs	r0, #31
 80023a6:	f001 fa66 	bl	8003876 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80023aa:	201f      	movs	r0, #31
 80023ac:	f001 fa7f 	bl	80038ae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80023b0:	2200      	movs	r2, #0
 80023b2:	2100      	movs	r1, #0
 80023b4:	2020      	movs	r0, #32
 80023b6:	f001 fa5e 	bl	8003876 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80023ba:	2020      	movs	r0, #32
 80023bc:	f001 fa77 	bl	80038ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80023c0:	bf00      	nop
 80023c2:	3728      	adds	r7, #40	; 0x28
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	40005400 	.word	0x40005400
 80023cc:	40023800 	.word	0x40023800
 80023d0:	40020400 	.word	0x40020400

080023d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b08a      	sub	sp, #40	; 0x28
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023dc:	f107 0314 	add.w	r3, r7, #20
 80023e0:	2200      	movs	r2, #0
 80023e2:	601a      	str	r2, [r3, #0]
 80023e4:	605a      	str	r2, [r3, #4]
 80023e6:	609a      	str	r2, [r3, #8]
 80023e8:	60da      	str	r2, [r3, #12]
 80023ea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a19      	ldr	r2, [pc, #100]	; (8002458 <HAL_SPI_MspInit+0x84>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d12c      	bne.n	8002450 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80023f6:	2300      	movs	r3, #0
 80023f8:	613b      	str	r3, [r7, #16]
 80023fa:	4b18      	ldr	r3, [pc, #96]	; (800245c <HAL_SPI_MspInit+0x88>)
 80023fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fe:	4a17      	ldr	r2, [pc, #92]	; (800245c <HAL_SPI_MspInit+0x88>)
 8002400:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002404:	6413      	str	r3, [r2, #64]	; 0x40
 8002406:	4b15      	ldr	r3, [pc, #84]	; (800245c <HAL_SPI_MspInit+0x88>)
 8002408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800240e:	613b      	str	r3, [r7, #16]
 8002410:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002412:	2300      	movs	r3, #0
 8002414:	60fb      	str	r3, [r7, #12]
 8002416:	4b11      	ldr	r3, [pc, #68]	; (800245c <HAL_SPI_MspInit+0x88>)
 8002418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241a:	4a10      	ldr	r2, [pc, #64]	; (800245c <HAL_SPI_MspInit+0x88>)
 800241c:	f043 0304 	orr.w	r3, r3, #4
 8002420:	6313      	str	r3, [r2, #48]	; 0x30
 8002422:	4b0e      	ldr	r3, [pc, #56]	; (800245c <HAL_SPI_MspInit+0x88>)
 8002424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002426:	f003 0304 	and.w	r3, r3, #4
 800242a:	60fb      	str	r3, [r7, #12]
 800242c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800242e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002432:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002434:	2302      	movs	r3, #2
 8002436:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002438:	2300      	movs	r3, #0
 800243a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800243c:	2303      	movs	r3, #3
 800243e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002440:	2306      	movs	r3, #6
 8002442:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002444:	f107 0314 	add.w	r3, r7, #20
 8002448:	4619      	mov	r1, r3
 800244a:	4805      	ldr	r0, [pc, #20]	; (8002460 <HAL_SPI_MspInit+0x8c>)
 800244c:	f001 fe5a 	bl	8004104 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002450:	bf00      	nop
 8002452:	3728      	adds	r7, #40	; 0x28
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	40003c00 	.word	0x40003c00
 800245c:	40023800 	.word	0x40023800
 8002460:	40020800 	.word	0x40020800

08002464 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a0e      	ldr	r2, [pc, #56]	; (80024ac <HAL_TIM_Base_MspInit+0x48>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d115      	bne.n	80024a2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002476:	2300      	movs	r3, #0
 8002478:	60fb      	str	r3, [r7, #12]
 800247a:	4b0d      	ldr	r3, [pc, #52]	; (80024b0 <HAL_TIM_Base_MspInit+0x4c>)
 800247c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800247e:	4a0c      	ldr	r2, [pc, #48]	; (80024b0 <HAL_TIM_Base_MspInit+0x4c>)
 8002480:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002484:	6453      	str	r3, [r2, #68]	; 0x44
 8002486:	4b0a      	ldr	r3, [pc, #40]	; (80024b0 <HAL_TIM_Base_MspInit+0x4c>)
 8002488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800248a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800248e:	60fb      	str	r3, [r7, #12]
 8002490:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002492:	2200      	movs	r2, #0
 8002494:	2100      	movs	r1, #0
 8002496:	2019      	movs	r0, #25
 8002498:	f001 f9ed 	bl	8003876 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800249c:	2019      	movs	r0, #25
 800249e:	f001 fa06 	bl	80038ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 80024a2:	bf00      	nop
 80024a4:	3710      	adds	r7, #16
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	40014400 	.word	0x40014400
 80024b0:	40023800 	.word	0x40023800

080024b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b08e      	sub	sp, #56	; 0x38
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024c0:	2200      	movs	r2, #0
 80024c2:	601a      	str	r2, [r3, #0]
 80024c4:	605a      	str	r2, [r3, #4]
 80024c6:	609a      	str	r2, [r3, #8]
 80024c8:	60da      	str	r2, [r3, #12]
 80024ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a6b      	ldr	r2, [pc, #428]	; (8002680 <HAL_UART_MspInit+0x1cc>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d135      	bne.n	8002542 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80024d6:	2300      	movs	r3, #0
 80024d8:	623b      	str	r3, [r7, #32]
 80024da:	4b6a      	ldr	r3, [pc, #424]	; (8002684 <HAL_UART_MspInit+0x1d0>)
 80024dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024de:	4a69      	ldr	r2, [pc, #420]	; (8002684 <HAL_UART_MspInit+0x1d0>)
 80024e0:	f043 0310 	orr.w	r3, r3, #16
 80024e4:	6453      	str	r3, [r2, #68]	; 0x44
 80024e6:	4b67      	ldr	r3, [pc, #412]	; (8002684 <HAL_UART_MspInit+0x1d0>)
 80024e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ea:	f003 0310 	and.w	r3, r3, #16
 80024ee:	623b      	str	r3, [r7, #32]
 80024f0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024f2:	2300      	movs	r3, #0
 80024f4:	61fb      	str	r3, [r7, #28]
 80024f6:	4b63      	ldr	r3, [pc, #396]	; (8002684 <HAL_UART_MspInit+0x1d0>)
 80024f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fa:	4a62      	ldr	r2, [pc, #392]	; (8002684 <HAL_UART_MspInit+0x1d0>)
 80024fc:	f043 0301 	orr.w	r3, r3, #1
 8002500:	6313      	str	r3, [r2, #48]	; 0x30
 8002502:	4b60      	ldr	r3, [pc, #384]	; (8002684 <HAL_UART_MspInit+0x1d0>)
 8002504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	61fb      	str	r3, [r7, #28]
 800250c:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800250e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002512:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002514:	2302      	movs	r3, #2
 8002516:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002518:	2300      	movs	r3, #0
 800251a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800251c:	2303      	movs	r3, #3
 800251e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002520:	2307      	movs	r3, #7
 8002522:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002524:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002528:	4619      	mov	r1, r3
 800252a:	4857      	ldr	r0, [pc, #348]	; (8002688 <HAL_UART_MspInit+0x1d4>)
 800252c:	f001 fdea 	bl	8004104 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002530:	2200      	movs	r2, #0
 8002532:	2100      	movs	r1, #0
 8002534:	2025      	movs	r0, #37	; 0x25
 8002536:	f001 f99e 	bl	8003876 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800253a:	2025      	movs	r0, #37	; 0x25
 800253c:	f001 f9b7 	bl	80038ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002540:	e09a      	b.n	8002678 <HAL_UART_MspInit+0x1c4>
  else if(huart->Instance==USART2)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a51      	ldr	r2, [pc, #324]	; (800268c <HAL_UART_MspInit+0x1d8>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d12c      	bne.n	80025a6 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 800254c:	2300      	movs	r3, #0
 800254e:	61bb      	str	r3, [r7, #24]
 8002550:	4b4c      	ldr	r3, [pc, #304]	; (8002684 <HAL_UART_MspInit+0x1d0>)
 8002552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002554:	4a4b      	ldr	r2, [pc, #300]	; (8002684 <HAL_UART_MspInit+0x1d0>)
 8002556:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800255a:	6413      	str	r3, [r2, #64]	; 0x40
 800255c:	4b49      	ldr	r3, [pc, #292]	; (8002684 <HAL_UART_MspInit+0x1d0>)
 800255e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002560:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002564:	61bb      	str	r3, [r7, #24]
 8002566:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002568:	2300      	movs	r3, #0
 800256a:	617b      	str	r3, [r7, #20]
 800256c:	4b45      	ldr	r3, [pc, #276]	; (8002684 <HAL_UART_MspInit+0x1d0>)
 800256e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002570:	4a44      	ldr	r2, [pc, #272]	; (8002684 <HAL_UART_MspInit+0x1d0>)
 8002572:	f043 0301 	orr.w	r3, r3, #1
 8002576:	6313      	str	r3, [r2, #48]	; 0x30
 8002578:	4b42      	ldr	r3, [pc, #264]	; (8002684 <HAL_UART_MspInit+0x1d0>)
 800257a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257c:	f003 0301 	and.w	r3, r3, #1
 8002580:	617b      	str	r3, [r7, #20]
 8002582:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002584:	230c      	movs	r3, #12
 8002586:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002588:	2302      	movs	r3, #2
 800258a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800258c:	2300      	movs	r3, #0
 800258e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002590:	2303      	movs	r3, #3
 8002592:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002594:	2307      	movs	r3, #7
 8002596:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002598:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800259c:	4619      	mov	r1, r3
 800259e:	483a      	ldr	r0, [pc, #232]	; (8002688 <HAL_UART_MspInit+0x1d4>)
 80025a0:	f001 fdb0 	bl	8004104 <HAL_GPIO_Init>
}
 80025a4:	e068      	b.n	8002678 <HAL_UART_MspInit+0x1c4>
  else if(huart->Instance==USART6)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a39      	ldr	r2, [pc, #228]	; (8002690 <HAL_UART_MspInit+0x1dc>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d163      	bne.n	8002678 <HAL_UART_MspInit+0x1c4>
    __HAL_RCC_USART6_CLK_ENABLE();
 80025b0:	2300      	movs	r3, #0
 80025b2:	613b      	str	r3, [r7, #16]
 80025b4:	4b33      	ldr	r3, [pc, #204]	; (8002684 <HAL_UART_MspInit+0x1d0>)
 80025b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b8:	4a32      	ldr	r2, [pc, #200]	; (8002684 <HAL_UART_MspInit+0x1d0>)
 80025ba:	f043 0320 	orr.w	r3, r3, #32
 80025be:	6453      	str	r3, [r2, #68]	; 0x44
 80025c0:	4b30      	ldr	r3, [pc, #192]	; (8002684 <HAL_UART_MspInit+0x1d0>)
 80025c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c4:	f003 0320 	and.w	r3, r3, #32
 80025c8:	613b      	str	r3, [r7, #16]
 80025ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025cc:	2300      	movs	r3, #0
 80025ce:	60fb      	str	r3, [r7, #12]
 80025d0:	4b2c      	ldr	r3, [pc, #176]	; (8002684 <HAL_UART_MspInit+0x1d0>)
 80025d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d4:	4a2b      	ldr	r2, [pc, #172]	; (8002684 <HAL_UART_MspInit+0x1d0>)
 80025d6:	f043 0301 	orr.w	r3, r3, #1
 80025da:	6313      	str	r3, [r2, #48]	; 0x30
 80025dc:	4b29      	ldr	r3, [pc, #164]	; (8002684 <HAL_UART_MspInit+0x1d0>)
 80025de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e0:	f003 0301 	and.w	r3, r3, #1
 80025e4:	60fb      	str	r3, [r7, #12]
 80025e6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80025e8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80025ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ee:	2302      	movs	r3, #2
 80025f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f2:	2300      	movs	r3, #0
 80025f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025f6:	2303      	movs	r3, #3
 80025f8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80025fa:	2308      	movs	r3, #8
 80025fc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002602:	4619      	mov	r1, r3
 8002604:	4820      	ldr	r0, [pc, #128]	; (8002688 <HAL_UART_MspInit+0x1d4>)
 8002606:	f001 fd7d 	bl	8004104 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 800260a:	4b22      	ldr	r3, [pc, #136]	; (8002694 <HAL_UART_MspInit+0x1e0>)
 800260c:	4a22      	ldr	r2, [pc, #136]	; (8002698 <HAL_UART_MspInit+0x1e4>)
 800260e:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8002610:	4b20      	ldr	r3, [pc, #128]	; (8002694 <HAL_UART_MspInit+0x1e0>)
 8002612:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8002616:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002618:	4b1e      	ldr	r3, [pc, #120]	; (8002694 <HAL_UART_MspInit+0x1e0>)
 800261a:	2200      	movs	r2, #0
 800261c:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800261e:	4b1d      	ldr	r3, [pc, #116]	; (8002694 <HAL_UART_MspInit+0x1e0>)
 8002620:	2200      	movs	r2, #0
 8002622:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002624:	4b1b      	ldr	r3, [pc, #108]	; (8002694 <HAL_UART_MspInit+0x1e0>)
 8002626:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800262a:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800262c:	4b19      	ldr	r3, [pc, #100]	; (8002694 <HAL_UART_MspInit+0x1e0>)
 800262e:	2200      	movs	r2, #0
 8002630:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002632:	4b18      	ldr	r3, [pc, #96]	; (8002694 <HAL_UART_MspInit+0x1e0>)
 8002634:	2200      	movs	r2, #0
 8002636:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8002638:	4b16      	ldr	r3, [pc, #88]	; (8002694 <HAL_UART_MspInit+0x1e0>)
 800263a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800263e:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002640:	4b14      	ldr	r3, [pc, #80]	; (8002694 <HAL_UART_MspInit+0x1e0>)
 8002642:	2200      	movs	r2, #0
 8002644:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002646:	4b13      	ldr	r3, [pc, #76]	; (8002694 <HAL_UART_MspInit+0x1e0>)
 8002648:	2200      	movs	r2, #0
 800264a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 800264c:	4811      	ldr	r0, [pc, #68]	; (8002694 <HAL_UART_MspInit+0x1e0>)
 800264e:	f001 f949 	bl	80038e4 <HAL_DMA_Init>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d001      	beq.n	800265c <HAL_UART_MspInit+0x1a8>
      Error_Handler();
 8002658:	f7ff fe36 	bl	80022c8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	4a0d      	ldr	r2, [pc, #52]	; (8002694 <HAL_UART_MspInit+0x1e0>)
 8002660:	639a      	str	r2, [r3, #56]	; 0x38
 8002662:	4a0c      	ldr	r2, [pc, #48]	; (8002694 <HAL_UART_MspInit+0x1e0>)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8002668:	2200      	movs	r2, #0
 800266a:	2100      	movs	r1, #0
 800266c:	2047      	movs	r0, #71	; 0x47
 800266e:	f001 f902 	bl	8003876 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002672:	2047      	movs	r0, #71	; 0x47
 8002674:	f001 f91b 	bl	80038ae <HAL_NVIC_EnableIRQ>
}
 8002678:	bf00      	nop
 800267a:	3738      	adds	r7, #56	; 0x38
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}
 8002680:	40011000 	.word	0x40011000
 8002684:	40023800 	.word	0x40023800
 8002688:	40020000 	.word	0x40020000
 800268c:	40004400 	.word	0x40004400
 8002690:	40011400 	.word	0x40011400
 8002694:	200003e8 	.word	0x200003e8
 8002698:	40026428 	.word	0x40026428

0800269c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80026a0:	e7fe      	b.n	80026a0 <NMI_Handler+0x4>

080026a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026a2:	b480      	push	{r7}
 80026a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026a6:	e7fe      	b.n	80026a6 <HardFault_Handler+0x4>

080026a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026a8:	b480      	push	{r7}
 80026aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026ac:	e7fe      	b.n	80026ac <MemManage_Handler+0x4>

080026ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026ae:	b480      	push	{r7}
 80026b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026b2:	e7fe      	b.n	80026b2 <BusFault_Handler+0x4>

080026b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026b4:	b480      	push	{r7}
 80026b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026b8:	e7fe      	b.n	80026b8 <UsageFault_Handler+0x4>

080026ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026ba:	b480      	push	{r7}
 80026bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026be:	bf00      	nop
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr

080026c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026cc:	bf00      	nop
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr

080026d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026d6:	b480      	push	{r7}
 80026d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026da:	bf00      	nop
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr

080026e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026e8:	f000 ffa6 	bl	8003638 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026ec:	bf00      	nop
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80026f4:	4802      	ldr	r0, [pc, #8]	; (8002700 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80026f6:	f005 fbde 	bl	8007eb6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80026fa:	bf00      	nop
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	200002d4 	.word	0x200002d4

08002704 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002708:	4802      	ldr	r0, [pc, #8]	; (8002714 <I2C1_EV_IRQHandler+0x10>)
 800270a:	f002 fb2f 	bl	8004d6c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800270e:	bf00      	nop
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	20000228 	.word	0x20000228

08002718 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800271c:	4802      	ldr	r0, [pc, #8]	; (8002728 <I2C1_ER_IRQHandler+0x10>)
 800271e:	f002 fc96 	bl	800504e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002722:	bf00      	nop
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	20000228 	.word	0x20000228

0800272c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002730:	4802      	ldr	r0, [pc, #8]	; (800273c <USART1_IRQHandler+0x10>)
 8002732:	f005 ff37 	bl	80085a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002736:	bf00      	nop
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	2000031c 	.word	0x2000031c

08002740 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002744:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002748:	f001 fe94 	bl	8004474 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800274c:	bf00      	nop
 800274e:	bd80      	pop	{r7, pc}

08002750 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8002754:	4802      	ldr	r0, [pc, #8]	; (8002760 <DMA2_Stream1_IRQHandler+0x10>)
 8002756:	f001 fa5d 	bl	8003c14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800275a:	bf00      	nop
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	200003e8 	.word	0x200003e8

08002764 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002768:	4802      	ldr	r0, [pc, #8]	; (8002774 <USART6_IRQHandler+0x10>)
 800276a:	f005 ff1b 	bl	80085a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800276e:	bf00      	nop
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	200003a4 	.word	0x200003a4

08002778 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002778:	b480      	push	{r7}
 800277a:	af00      	add	r7, sp, #0
	return 1;
 800277c:	2301      	movs	r3, #1
}
 800277e:	4618      	mov	r0, r3
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr

08002788 <_kill>:

int _kill(int pid, int sig)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002792:	f006 fff9 	bl	8009788 <__errno>
 8002796:	4603      	mov	r3, r0
 8002798:	2216      	movs	r2, #22
 800279a:	601a      	str	r2, [r3, #0]
	return -1;
 800279c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3708      	adds	r7, #8
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <_exit>:

void _exit (int status)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80027b0:	f04f 31ff 	mov.w	r1, #4294967295
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f7ff ffe7 	bl	8002788 <_kill>
	while (1) {}		/* Make sure we hang here */
 80027ba:	e7fe      	b.n	80027ba <_exit+0x12>

080027bc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b086      	sub	sp, #24
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	60f8      	str	r0, [r7, #12]
 80027c4:	60b9      	str	r1, [r7, #8]
 80027c6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027c8:	2300      	movs	r3, #0
 80027ca:	617b      	str	r3, [r7, #20]
 80027cc:	e00a      	b.n	80027e4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80027ce:	f3af 8000 	nop.w
 80027d2:	4601      	mov	r1, r0
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	1c5a      	adds	r2, r3, #1
 80027d8:	60ba      	str	r2, [r7, #8]
 80027da:	b2ca      	uxtb	r2, r1
 80027dc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	3301      	adds	r3, #1
 80027e2:	617b      	str	r3, [r7, #20]
 80027e4:	697a      	ldr	r2, [r7, #20]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	dbf0      	blt.n	80027ce <_read+0x12>
	}

return len;
 80027ec:	687b      	ldr	r3, [r7, #4]
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3718      	adds	r7, #24
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80027f6:	b580      	push	{r7, lr}
 80027f8:	b086      	sub	sp, #24
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	60f8      	str	r0, [r7, #12]
 80027fe:	60b9      	str	r1, [r7, #8]
 8002800:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002802:	2300      	movs	r3, #0
 8002804:	617b      	str	r3, [r7, #20]
 8002806:	e009      	b.n	800281c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	1c5a      	adds	r2, r3, #1
 800280c:	60ba      	str	r2, [r7, #8]
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	4618      	mov	r0, r3
 8002812:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	3301      	adds	r3, #1
 800281a:	617b      	str	r3, [r7, #20]
 800281c:	697a      	ldr	r2, [r7, #20]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	429a      	cmp	r2, r3
 8002822:	dbf1      	blt.n	8002808 <_write+0x12>
	}
	return len;
 8002824:	687b      	ldr	r3, [r7, #4]
}
 8002826:	4618      	mov	r0, r3
 8002828:	3718      	adds	r7, #24
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}

0800282e <_close>:

int _close(int file)
{
 800282e:	b480      	push	{r7}
 8002830:	b083      	sub	sp, #12
 8002832:	af00      	add	r7, sp, #0
 8002834:	6078      	str	r0, [r7, #4]
	return -1;
 8002836:	f04f 33ff 	mov.w	r3, #4294967295
}
 800283a:	4618      	mov	r0, r3
 800283c:	370c      	adds	r7, #12
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr

08002846 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002846:	b480      	push	{r7}
 8002848:	b083      	sub	sp, #12
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]
 800284e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002856:	605a      	str	r2, [r3, #4]
	return 0;
 8002858:	2300      	movs	r3, #0
}
 800285a:	4618      	mov	r0, r3
 800285c:	370c      	adds	r7, #12
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr

08002866 <_isatty>:

int _isatty(int file)
{
 8002866:	b480      	push	{r7}
 8002868:	b083      	sub	sp, #12
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
	return 1;
 800286e:	2301      	movs	r3, #1
}
 8002870:	4618      	mov	r0, r3
 8002872:	370c      	adds	r7, #12
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr

0800287c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800287c:	b480      	push	{r7}
 800287e:	b085      	sub	sp, #20
 8002880:	af00      	add	r7, sp, #0
 8002882:	60f8      	str	r0, [r7, #12]
 8002884:	60b9      	str	r1, [r7, #8]
 8002886:	607a      	str	r2, [r7, #4]
	return 0;
 8002888:	2300      	movs	r3, #0
}
 800288a:	4618      	mov	r0, r3
 800288c:	3714      	adds	r7, #20
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
	...

08002898 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b086      	sub	sp, #24
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028a0:	4a14      	ldr	r2, [pc, #80]	; (80028f4 <_sbrk+0x5c>)
 80028a2:	4b15      	ldr	r3, [pc, #84]	; (80028f8 <_sbrk+0x60>)
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028ac:	4b13      	ldr	r3, [pc, #76]	; (80028fc <_sbrk+0x64>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d102      	bne.n	80028ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028b4:	4b11      	ldr	r3, [pc, #68]	; (80028fc <_sbrk+0x64>)
 80028b6:	4a12      	ldr	r2, [pc, #72]	; (8002900 <_sbrk+0x68>)
 80028b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028ba:	4b10      	ldr	r3, [pc, #64]	; (80028fc <_sbrk+0x64>)
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4413      	add	r3, r2
 80028c2:	693a      	ldr	r2, [r7, #16]
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d207      	bcs.n	80028d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028c8:	f006 ff5e 	bl	8009788 <__errno>
 80028cc:	4603      	mov	r3, r0
 80028ce:	220c      	movs	r2, #12
 80028d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028d2:	f04f 33ff 	mov.w	r3, #4294967295
 80028d6:	e009      	b.n	80028ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028d8:	4b08      	ldr	r3, [pc, #32]	; (80028fc <_sbrk+0x64>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028de:	4b07      	ldr	r3, [pc, #28]	; (80028fc <_sbrk+0x64>)
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4413      	add	r3, r2
 80028e6:	4a05      	ldr	r2, [pc, #20]	; (80028fc <_sbrk+0x64>)
 80028e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028ea:	68fb      	ldr	r3, [r7, #12]
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3718      	adds	r7, #24
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	20020000 	.word	0x20020000
 80028f8:	00000400 	.word	0x00000400
 80028fc:	200006a0 	.word	0x200006a0
 8002900:	200006c0 	.word	0x200006c0

08002904 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002904:	b480      	push	{r7}
 8002906:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002908:	4b06      	ldr	r3, [pc, #24]	; (8002924 <SystemInit+0x20>)
 800290a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800290e:	4a05      	ldr	r2, [pc, #20]	; (8002924 <SystemInit+0x20>)
 8002910:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002914:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002918:	bf00      	nop
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop
 8002924:	e000ed00 	.word	0xe000ed00

08002928 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	af00      	add	r7, sp, #0
  LCD_IO_Bl_OnOff(1);
 800292c:	2001      	movs	r0, #1
 800292e:	f000 fcf0 	bl	8003312 <LCD_IO_Bl_OnOff>
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_SLPOUT);    // Exit Sleep
 8002932:	2011      	movs	r0, #17
 8002934:	f000 fd74 	bl	8003420 <LCD_IO_WriteCmd8>
  ILI9341_LCDMUTEX_POP();
}
 8002938:	bf00      	nop
 800293a:	bd80      	pop	{r7, pc}

0800293c <ili9341_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0
  return ILI9341_SIZE_X;
 8002940:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8002944:	4618      	mov	r0, r3
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr

0800294e <ili9341_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 800294e:	b480      	push	{r7}
 8002950:	af00      	add	r7, sp, #0
  return ILI9341_SIZE_Y;
 8002952:	23f0      	movs	r3, #240	; 0xf0
}
 8002954:	4618      	mov	r0, r3
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr
	...

08002960 <ili9341_Init>:
/* SPI or paralell mode */
#if ILI9341_INTERFACE_MODE == 1

//-----------------------------------------------------------------------------
void ili9341_Init(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af02      	add	r7, sp, #8
  if((Is_ili9341_Initialized & ILI9341_LCD_INITIALIZED) == 0)
 8002966:	4b52      	ldr	r3, [pc, #328]	; (8002ab0 <ili9341_Init+0x150>)
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	f003 0301 	and.w	r3, r3, #1
 800296e:	2b00      	cmp	r3, #0
 8002970:	d115      	bne.n	800299e <ili9341_Init+0x3e>
  {
    Is_ili9341_Initialized |= ILI9341_LCD_INITIALIZED;
 8002972:	4b4f      	ldr	r3, [pc, #316]	; (8002ab0 <ili9341_Init+0x150>)
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	f043 0301 	orr.w	r3, r3, #1
 800297a:	b2da      	uxtb	r2, r3
 800297c:	4b4c      	ldr	r3, [pc, #304]	; (8002ab0 <ili9341_Init+0x150>)
 800297e:	701a      	strb	r2, [r3, #0]
    if((Is_ili9341_Initialized & ILI9341_IO_INITIALIZED) == 0)
 8002980:	4b4b      	ldr	r3, [pc, #300]	; (8002ab0 <ili9341_Init+0x150>)
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	f003 0302 	and.w	r3, r3, #2
 8002988:	2b00      	cmp	r3, #0
 800298a:	d101      	bne.n	8002990 <ili9341_Init+0x30>
      LCD_IO_Init();
 800298c:	f000 fccc 	bl	8003328 <LCD_IO_Init>
    Is_ili9341_Initialized |= ILI9341_IO_INITIALIZED;
 8002990:	4b47      	ldr	r3, [pc, #284]	; (8002ab0 <ili9341_Init+0x150>)
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	f043 0302 	orr.w	r3, r3, #2
 8002998:	b2da      	uxtb	r2, r3
 800299a:	4b45      	ldr	r3, [pc, #276]	; (8002ab0 <ili9341_Init+0x150>)
 800299c:	701a      	strb	r2, [r3, #0]
  }

  LCD_Delay(10);
 800299e:	200a      	movs	r0, #10
 80029a0:	f000 fcac 	bl	80032fc <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9341_SWRESET);
 80029a4:	2001      	movs	r0, #1
 80029a6:	f000 fd3b 	bl	8003420 <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 80029aa:	200a      	movs	r0, #10
 80029ac:	f000 fca6 	bl	80032fc <LCD_Delay>

  LCD_IO_WriteCmd8MultipleData8(0xEF, (uint8_t *)"\x03\x80\x02", 3);
 80029b0:	2203      	movs	r2, #3
 80029b2:	4940      	ldr	r1, [pc, #256]	; (8002ab4 <ili9341_Init+0x154>)
 80029b4:	20ef      	movs	r0, #239	; 0xef
 80029b6:	f000 fda1 	bl	80034fc <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xCF, (uint8_t *)"\x00\xC1\x30", 3);
 80029ba:	2203      	movs	r2, #3
 80029bc:	493e      	ldr	r1, [pc, #248]	; (8002ab8 <ili9341_Init+0x158>)
 80029be:	20cf      	movs	r0, #207	; 0xcf
 80029c0:	f000 fd9c 	bl	80034fc <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xED, (uint8_t *)"\x64\x03\x12\x81", 4);
 80029c4:	2204      	movs	r2, #4
 80029c6:	493d      	ldr	r1, [pc, #244]	; (8002abc <ili9341_Init+0x15c>)
 80029c8:	20ed      	movs	r0, #237	; 0xed
 80029ca:	f000 fd97 	bl	80034fc <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xE8, (uint8_t *)"\x85\x00\x78", 3);
 80029ce:	2203      	movs	r2, #3
 80029d0:	493b      	ldr	r1, [pc, #236]	; (8002ac0 <ili9341_Init+0x160>)
 80029d2:	20e8      	movs	r0, #232	; 0xe8
 80029d4:	f000 fd92 	bl	80034fc <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xCB, (uint8_t *)"\x39\x2C\x00\x34\x02", 5);
 80029d8:	2205      	movs	r2, #5
 80029da:	493a      	ldr	r1, [pc, #232]	; (8002ac4 <ili9341_Init+0x164>)
 80029dc:	20cb      	movs	r0, #203	; 0xcb
 80029de:	f000 fd8d 	bl	80034fc <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xF7, (uint8_t *)"\x20", 1);
 80029e2:	2201      	movs	r2, #1
 80029e4:	4938      	ldr	r1, [pc, #224]	; (8002ac8 <ili9341_Init+0x168>)
 80029e6:	20f7      	movs	r0, #247	; 0xf7
 80029e8:	f000 fd88 	bl	80034fc <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xEA, (uint8_t *)"\x00\x00", 2);
 80029ec:	2202      	movs	r2, #2
 80029ee:	4937      	ldr	r1, [pc, #220]	; (8002acc <ili9341_Init+0x16c>)
 80029f0:	20ea      	movs	r0, #234	; 0xea
 80029f2:	f000 fd83 	bl	80034fc <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 1 (Vreg1out, Verg2out)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PWCTR1, (uint8_t *)"\x23", 1);
 80029f6:	2201      	movs	r2, #1
 80029f8:	4935      	ldr	r1, [pc, #212]	; (8002ad0 <ili9341_Init+0x170>)
 80029fa:	20c0      	movs	r0, #192	; 0xc0
 80029fc:	f000 fd7e 	bl	80034fc <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 2 (VGH,VGL)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PWCTR2, (uint8_t *)"\x10", 1);
 8002a00:	2201      	movs	r2, #1
 8002a02:	4934      	ldr	r1, [pc, #208]	; (8002ad4 <ili9341_Init+0x174>)
 8002a04:	20c1      	movs	r0, #193	; 0xc1
 8002a06:	f000 fd79 	bl	80034fc <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 3 (Vcom)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_VMCTR1, (uint8_t *)"\x3E\x28", 2);
 8002a0a:	2202      	movs	r2, #2
 8002a0c:	4932      	ldr	r1, [pc, #200]	; (8002ad8 <ili9341_Init+0x178>)
 8002a0e:	20c5      	movs	r0, #197	; 0xc5
 8002a10:	f000 fd74 	bl	80034fc <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 3 (Vcom)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_VMCTR2, (uint8_t *)"\x86", 1);
 8002a14:	2201      	movs	r2, #1
 8002a16:	4931      	ldr	r1, [pc, #196]	; (8002adc <ili9341_Init+0x17c>)
 8002a18:	20c7      	movs	r0, #199	; 0xc7
 8002a1a:	f000 fd6f 	bl	80034fc <LCD_IO_WriteCmd8MultipleData8>

  // Vertical scroll zero
  LCD_IO_WriteCmd8MultipleData8(ILI9341_VSCRSADD, (uint8_t *)"\x00", 1);
 8002a1e:	2201      	movs	r2, #1
 8002a20:	492f      	ldr	r1, [pc, #188]	; (8002ae0 <ili9341_Init+0x180>)
 8002a22:	2037      	movs	r0, #55	; 0x37
 8002a24:	f000 fd6a 	bl	80034fc <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PIXFMT, (uint8_t *)"\x55", 1);
 8002a28:	2201      	movs	r2, #1
 8002a2a:	492e      	ldr	r1, [pc, #184]	; (8002ae4 <ili9341_Init+0x184>)
 8002a2c:	203a      	movs	r0, #58	; 0x3a
 8002a2e:	f000 fd65 	bl	80034fc <LCD_IO_WriteCmd8MultipleData8>

  // LCD_IO_WriteCmd8MultipleData8(0xF6, (uint8_t *)"\x01\x00\x06", 3);

  LCD_IO_WriteCmd8MultipleData8(ILI9341_FRMCTR1, (uint8_t *)"\x00\x18", 2);
 8002a32:	2202      	movs	r2, #2
 8002a34:	492c      	ldr	r1, [pc, #176]	; (8002ae8 <ili9341_Init+0x188>)
 8002a36:	20b1      	movs	r0, #177	; 0xb1
 8002a38:	f000 fd60 	bl	80034fc <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_DFUNCTR, (uint8_t *)"\x08\x82\x27", 3);  // Display Function Control
 8002a3c:	2203      	movs	r2, #3
 8002a3e:	492b      	ldr	r1, [pc, #172]	; (8002aec <ili9341_Init+0x18c>)
 8002a40:	20b6      	movs	r0, #182	; 0xb6
 8002a42:	f000 fd5b 	bl	80034fc <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xF2, (uint8_t *)"\x00", 1);            // 3Gamma Function Disable
 8002a46:	2201      	movs	r2, #1
 8002a48:	4925      	ldr	r1, [pc, #148]	; (8002ae0 <ili9341_Init+0x180>)
 8002a4a:	20f2      	movs	r0, #242	; 0xf2
 8002a4c:	f000 fd56 	bl	80034fc <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_GAMMASET, (uint8_t *)"\x01", 1);// Gamma curve selected
 8002a50:	2201      	movs	r2, #1
 8002a52:	4927      	ldr	r1, [pc, #156]	; (8002af0 <ili9341_Init+0x190>)
 8002a54:	2026      	movs	r0, #38	; 0x26
 8002a56:	f000 fd51 	bl	80034fc <LCD_IO_WriteCmd8MultipleData8>

  // positive gamma control
  LCD_IO_WriteCmd8MultipleData8(ILI9341_GMCTRP1, (uint8_t *)"\x0F\x31\x2B\x0C\x0E\x08\x4E\xF1\x37\x07\x10\x03\x0E\x09\x00", 15);
 8002a5a:	220f      	movs	r2, #15
 8002a5c:	4925      	ldr	r1, [pc, #148]	; (8002af4 <ili9341_Init+0x194>)
 8002a5e:	20e0      	movs	r0, #224	; 0xe0
 8002a60:	f000 fd4c 	bl	80034fc <LCD_IO_WriteCmd8MultipleData8>

  // negative gamma control
  LCD_IO_WriteCmd8MultipleData8(ILI9341_GMCTRN1, (uint8_t *)"\x00\x0E\x14\x03\x11\x07\x31\xC1\x48\x08\x0F\x0C\x31\x36\x0F", 15);
 8002a64:	220f      	movs	r2, #15
 8002a66:	4924      	ldr	r1, [pc, #144]	; (8002af8 <ili9341_Init+0x198>)
 8002a68:	20e1      	movs	r0, #225	; 0xe1
 8002a6a:	f000 fd47 	bl	80034fc <LCD_IO_WriteCmd8MultipleData8>

  LCD_IO_WriteCmd8(ILI9341_MADCTL); LCD_IO_WriteData8(ILI9341_MAD_DATA_RIGHT_THEN_DOWN);
 8002a6e:	2036      	movs	r0, #54	; 0x36
 8002a70:	f000 fcd6 	bl	8003420 <LCD_IO_WriteCmd8>
 8002a74:	20e8      	movs	r0, #232	; 0xe8
 8002a76:	f000 fcf1 	bl	800345c <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_SLPOUT);    // Exit Sleep
 8002a7a:	2011      	movs	r0, #17
 8002a7c:	f000 fcd0 	bl	8003420 <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 8002a80:	200a      	movs	r0, #10
 8002a82:	f000 fc3b 	bl	80032fc <LCD_Delay>

  #if ILI9341_INITCLEAR == 1
  ili9341_FillRect(0, 0, ILI9341_SIZE_X, ILI9341_SIZE_Y, 0x0000);
 8002a86:	2300      	movs	r3, #0
 8002a88:	9300      	str	r3, [sp, #0]
 8002a8a:	23f0      	movs	r3, #240	; 0xf0
 8002a8c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002a90:	2100      	movs	r1, #0
 8002a92:	2000      	movs	r0, #0
 8002a94:	f000 f87c 	bl	8002b90 <ili9341_FillRect>
  LCD_Delay(10);
 8002a98:	200a      	movs	r0, #10
 8002a9a:	f000 fc2f 	bl	80032fc <LCD_Delay>
  #endif
  
  LCD_IO_WriteCmd8(ILI9341_DISPON);    // Display on
 8002a9e:	2029      	movs	r0, #41	; 0x29
 8002aa0:	f000 fcbe 	bl	8003420 <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 8002aa4:	200a      	movs	r0, #10
 8002aa6:	f000 fc29 	bl	80032fc <LCD_Delay>
}
 8002aaa:	bf00      	nop
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	200006a4 	.word	0x200006a4
 8002ab4:	0800c74c 	.word	0x0800c74c
 8002ab8:	0800c750 	.word	0x0800c750
 8002abc:	0800c754 	.word	0x0800c754
 8002ac0:	0800c75c 	.word	0x0800c75c
 8002ac4:	0800c760 	.word	0x0800c760
 8002ac8:	0800c768 	.word	0x0800c768
 8002acc:	0800c76c 	.word	0x0800c76c
 8002ad0:	0800c770 	.word	0x0800c770
 8002ad4:	0800c774 	.word	0x0800c774
 8002ad8:	0800c778 	.word	0x0800c778
 8002adc:	0800c77c 	.word	0x0800c77c
 8002ae0:	0800c780 	.word	0x0800c780
 8002ae4:	0800c784 	.word	0x0800c784
 8002ae8:	0800c788 	.word	0x0800c788
 8002aec:	0800c78c 	.word	0x0800c78c
 8002af0:	0800c790 	.word	0x0800c790
 8002af4:	0800c794 	.word	0x0800c794
 8002af8:	0800c7a4 	.word	0x0800c7a4

08002afc <ili9341_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color
  * @retval None
  */
void ili9341_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	4603      	mov	r3, r0
 8002b04:	80fb      	strh	r3, [r7, #6]
 8002b06:	460b      	mov	r3, r1
 8002b08:	80bb      	strh	r3, [r7, #4]
 8002b0a:	4613      	mov	r3, r2
 8002b0c:	807b      	strh	r3, [r7, #2]
  ILI9341_LCDMUTEX_PUSH();
  ILI9341_SETCURSOR(Xpos, Ypos);
 8002b0e:	202a      	movs	r0, #42	; 0x2a
 8002b10:	f000 fc86 	bl	8003420 <LCD_IO_WriteCmd8>
 8002b14:	88fb      	ldrh	r3, [r7, #6]
 8002b16:	0a1b      	lsrs	r3, r3, #8
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f000 fc9d 	bl	800345c <LCD_IO_WriteData8>
 8002b22:	88fb      	ldrh	r3, [r7, #6]
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	4618      	mov	r0, r3
 8002b28:	f000 fc98 	bl	800345c <LCD_IO_WriteData8>
 8002b2c:	88fb      	ldrh	r3, [r7, #6]
 8002b2e:	0a1b      	lsrs	r3, r3, #8
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	4618      	mov	r0, r3
 8002b36:	f000 fc91 	bl	800345c <LCD_IO_WriteData8>
 8002b3a:	88fb      	ldrh	r3, [r7, #6]
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f000 fc8c 	bl	800345c <LCD_IO_WriteData8>
 8002b44:	202b      	movs	r0, #43	; 0x2b
 8002b46:	f000 fc6b 	bl	8003420 <LCD_IO_WriteCmd8>
 8002b4a:	88bb      	ldrh	r3, [r7, #4]
 8002b4c:	0a1b      	lsrs	r3, r3, #8
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	4618      	mov	r0, r3
 8002b54:	f000 fc82 	bl	800345c <LCD_IO_WriteData8>
 8002b58:	88bb      	ldrh	r3, [r7, #4]
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f000 fc7d 	bl	800345c <LCD_IO_WriteData8>
 8002b62:	88bb      	ldrh	r3, [r7, #4]
 8002b64:	0a1b      	lsrs	r3, r3, #8
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f000 fc76 	bl	800345c <LCD_IO_WriteData8>
 8002b70:	88bb      	ldrh	r3, [r7, #4]
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	4618      	mov	r0, r3
 8002b76:	f000 fc71 	bl	800345c <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_RAMWR); LCD_IO_WriteData16(RGBCode);
 8002b7a:	202c      	movs	r0, #44	; 0x2c
 8002b7c:	f000 fc50 	bl	8003420 <LCD_IO_WriteCmd8>
 8002b80:	887b      	ldrh	r3, [r7, #2]
 8002b82:	4618      	mov	r0, r3
 8002b84:	f000 fc80 	bl	8003488 <LCD_IO_WriteData16>
  ILI9341_LCDMUTEX_POP();
}
 8002b88:	bf00      	nop
 8002b8a:	3708      	adds	r7, #8
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <ili9341_FillRect>:
  * @param  Ysize:    specifies the Y size
  * @param  RGBCode:  specifies the RGB color
  * @retval None
  */
void ili9341_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t RGBCode)
{
 8002b90:	b590      	push	{r4, r7, lr}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	4604      	mov	r4, r0
 8002b98:	4608      	mov	r0, r1
 8002b9a:	4611      	mov	r1, r2
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	4623      	mov	r3, r4
 8002ba0:	80fb      	strh	r3, [r7, #6]
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	80bb      	strh	r3, [r7, #4]
 8002ba6:	460b      	mov	r3, r1
 8002ba8:	807b      	strh	r3, [r7, #2]
 8002baa:	4613      	mov	r3, r2
 8002bac:	803b      	strh	r3, [r7, #0]
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Xsize - 1);
 8002bae:	202a      	movs	r0, #42	; 0x2a
 8002bb0:	f000 fc36 	bl	8003420 <LCD_IO_WriteCmd8>
 8002bb4:	88fb      	ldrh	r3, [r7, #6]
 8002bb6:	0a1b      	lsrs	r3, r3, #8
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f000 fc4d 	bl	800345c <LCD_IO_WriteData8>
 8002bc2:	88fb      	ldrh	r3, [r7, #6]
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f000 fc48 	bl	800345c <LCD_IO_WriteData8>
 8002bcc:	88fa      	ldrh	r2, [r7, #6]
 8002bce:	887b      	ldrh	r3, [r7, #2]
 8002bd0:	4413      	add	r3, r2
 8002bd2:	3b01      	subs	r3, #1
 8002bd4:	121b      	asrs	r3, r3, #8
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f000 fc3f 	bl	800345c <LCD_IO_WriteData8>
 8002bde:	88fb      	ldrh	r3, [r7, #6]
 8002be0:	b2da      	uxtb	r2, r3
 8002be2:	887b      	ldrh	r3, [r7, #2]
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	4413      	add	r3, r2
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	3b01      	subs	r3, #1
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f000 fc34 	bl	800345c <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Ysize - 1);
 8002bf4:	202b      	movs	r0, #43	; 0x2b
 8002bf6:	f000 fc13 	bl	8003420 <LCD_IO_WriteCmd8>
 8002bfa:	88bb      	ldrh	r3, [r7, #4]
 8002bfc:	0a1b      	lsrs	r3, r3, #8
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	4618      	mov	r0, r3
 8002c04:	f000 fc2a 	bl	800345c <LCD_IO_WriteData8>
 8002c08:	88bb      	ldrh	r3, [r7, #4]
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f000 fc25 	bl	800345c <LCD_IO_WriteData8>
 8002c12:	88ba      	ldrh	r2, [r7, #4]
 8002c14:	883b      	ldrh	r3, [r7, #0]
 8002c16:	4413      	add	r3, r2
 8002c18:	3b01      	subs	r3, #1
 8002c1a:	121b      	asrs	r3, r3, #8
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f000 fc1c 	bl	800345c <LCD_IO_WriteData8>
 8002c24:	88bb      	ldrh	r3, [r7, #4]
 8002c26:	b2da      	uxtb	r2, r3
 8002c28:	883b      	ldrh	r3, [r7, #0]
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	4413      	add	r3, r2
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	3b01      	subs	r3, #1
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	4618      	mov	r0, r3
 8002c36:	f000 fc11 	bl	800345c <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8DataFill16(ILI9341_RAMWR, RGBCode, Xsize * Ysize);
 8002c3a:	887b      	ldrh	r3, [r7, #2]
 8002c3c:	883a      	ldrh	r2, [r7, #0]
 8002c3e:	fb02 f303 	mul.w	r3, r2, r3
 8002c42:	461a      	mov	r2, r3
 8002c44:	8b3b      	ldrh	r3, [r7, #24]
 8002c46:	4619      	mov	r1, r3
 8002c48:	202c      	movs	r0, #44	; 0x2c
 8002c4a:	f000 fc33 	bl	80034b4 <LCD_IO_WriteCmd8DataFill16>
  ILI9341_LCDMUTEX_POP();
}
 8002c4e:	bf00      	nop
 8002c50:	370c      	adds	r7, #12
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd90      	pop	{r4, r7, pc}

08002c56 <ili9341_WriteChar>:
  * @param  fonto: font select (from font.h)
  * @param  RGB_Coder: Text Color
  * @param  RGB_bg: Char background Color
  * @retval None
  */
void ili9341_WriteChar(uint16_t Xpo, uint16_t Ypo, const char *chr,sFONT fonto, uint16_t RGB_Coder, uint16_t RGB_bg){
 8002c56:	b082      	sub	sp, #8
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b08a      	sub	sp, #40	; 0x28
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	603a      	str	r2, [r7, #0]
 8002c60:	637b      	str	r3, [r7, #52]	; 0x34
 8002c62:	4603      	mov	r3, r0
 8002c64:	80fb      	strh	r3, [r7, #6]
 8002c66:	460b      	mov	r3, r1
 8002c68:	80bb      	strh	r3, [r7, #4]
	/*ex
	 * ili9341_WriteChar(140, 50, "E", Font24, cl_ORANGE, cl_BLACK);
	 * */
	//// stored font data
	uint32_t hop32 = 0;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t b8[4] = {0};
 8002c6e:	2300      	movs	r3, #0
 8002c70:	60fb      	str	r3, [r7, #12]
	 * c = i * rowbox -> jump to next column in next i rowloop
	 * k => jump to next row in that column
	 * */

	//// find num of bit rows per jump in fonts.c
	int rowbox = ceilf((float)(fonto.Width) / 8);
 8002c72:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002c74:	ee07 3a90 	vmov	s15, r3
 8002c78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c7c:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8002c80:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002c84:	eeb0 0a47 	vmov.f32	s0, s14
 8002c88:	f009 fcc4 	bl	800c614 <ceilf>
 8002c8c:	eef0 7a40 	vmov.f32	s15, s0
 8002c90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c94:	ee17 3a90 	vmov	r3, s15
 8002c98:	617b      	str	r3, [r7, #20]

	//// choose MSB check pos for each font size
	//// 0x80 , 0x8000 , 0x 800000
	uint32_t clif_msb = 0x80 << (8 * (rowbox - 1));
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	3b01      	subs	r3, #1
 8002c9e:	00db      	lsls	r3, r3, #3
 8002ca0:	2280      	movs	r2, #128	; 0x80
 8002ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca6:	613b      	str	r3, [r7, #16]

	//// -32 to offset sync ASCII Table start " " at 32
	//// double for loop as one char table
	for(int i = 0; i < fonto.Height; i++){
 8002ca8:	2300      	movs	r3, #0
 8002caa:	623b      	str	r3, [r7, #32]
 8002cac:	e060      	b.n	8002d70 <ili9341_WriteChar+0x11a>
		hop32 = 0;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	627b      	str	r3, [r7, #36]	; 0x24
		for(int k = 0;k < rowbox;k++){
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	61fb      	str	r3, [r7, #28]
 8002cb6:	e024      	b.n	8002d02 <ili9341_WriteChar+0xac>
			b8[k] = fonto.table[((int)(*chr - 32) * fonto.Height * rowbox) + (i * rowbox) + k];
 8002cb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cba:	683a      	ldr	r2, [r7, #0]
 8002cbc:	7812      	ldrb	r2, [r2, #0]
 8002cbe:	3a20      	subs	r2, #32
 8002cc0:	8f79      	ldrh	r1, [r7, #58]	; 0x3a
 8002cc2:	fb01 f202 	mul.w	r2, r1, r2
 8002cc6:	6979      	ldr	r1, [r7, #20]
 8002cc8:	fb02 f101 	mul.w	r1, r2, r1
 8002ccc:	6a3a      	ldr	r2, [r7, #32]
 8002cce:	6978      	ldr	r0, [r7, #20]
 8002cd0:	fb00 f202 	mul.w	r2, r0, r2
 8002cd4:	4411      	add	r1, r2
 8002cd6:	69fa      	ldr	r2, [r7, #28]
 8002cd8:	440a      	add	r2, r1
 8002cda:	4413      	add	r3, r2
 8002cdc:	7819      	ldrb	r1, [r3, #0]
 8002cde:	f107 020c 	add.w	r2, r7, #12
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	4413      	add	r3, r2
 8002ce6:	460a      	mov	r2, r1
 8002ce8:	701a      	strb	r2, [r3, #0]
			hop32 = (hop32 << 8) + b8[k];
 8002cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cec:	021b      	lsls	r3, r3, #8
 8002cee:	f107 010c 	add.w	r1, r7, #12
 8002cf2:	69fa      	ldr	r2, [r7, #28]
 8002cf4:	440a      	add	r2, r1
 8002cf6:	7812      	ldrb	r2, [r2, #0]
 8002cf8:	4413      	add	r3, r2
 8002cfa:	627b      	str	r3, [r7, #36]	; 0x24
		for(int k = 0;k < rowbox;k++){
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	3301      	adds	r3, #1
 8002d00:	61fb      	str	r3, [r7, #28]
 8002d02:	69fa      	ldr	r2, [r7, #28]
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	429a      	cmp	r2, r3
 8002d08:	dbd6      	blt.n	8002cb8 <ili9341_WriteChar+0x62>
		}

		for(int j = 0; j < fonto.Width; j++){
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	61bb      	str	r3, [r7, #24]
 8002d0e:	e027      	b.n	8002d60 <ili9341_WriteChar+0x10a>
			//// if valuein fonttable is 1
			if((hop32 << j) & clif_msb){ // buu32.b32
 8002d10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d12:	69bb      	ldr	r3, [r7, #24]
 8002d14:	409a      	lsls	r2, r3
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	4013      	ands	r3, r2
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d00e      	beq.n	8002d3c <ili9341_WriteChar+0xe6>
				ili9341_WritePixel(Xpo + j, Ypo + i, RGB_Coder);
 8002d1e:	69bb      	ldr	r3, [r7, #24]
 8002d20:	b29a      	uxth	r2, r3
 8002d22:	88fb      	ldrh	r3, [r7, #6]
 8002d24:	4413      	add	r3, r2
 8002d26:	b298      	uxth	r0, r3
 8002d28:	6a3b      	ldr	r3, [r7, #32]
 8002d2a:	b29a      	uxth	r2, r3
 8002d2c:	88bb      	ldrh	r3, [r7, #4]
 8002d2e:	4413      	add	r3, r2
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8002d34:	4619      	mov	r1, r3
 8002d36:	f7ff fee1 	bl	8002afc <ili9341_WritePixel>
 8002d3a:	e00e      	b.n	8002d5a <ili9341_WriteChar+0x104>
			}
			//// for background write
			else{
				ili9341_WritePixel(Xpo + j, Ypo + i, RGB_bg);
 8002d3c:	69bb      	ldr	r3, [r7, #24]
 8002d3e:	b29a      	uxth	r2, r3
 8002d40:	88fb      	ldrh	r3, [r7, #6]
 8002d42:	4413      	add	r3, r2
 8002d44:	b298      	uxth	r0, r3
 8002d46:	6a3b      	ldr	r3, [r7, #32]
 8002d48:	b29a      	uxth	r2, r3
 8002d4a:	88bb      	ldrh	r3, [r7, #4]
 8002d4c:	4413      	add	r3, r2
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8002d54:	4619      	mov	r1, r3
 8002d56:	f7ff fed1 	bl	8002afc <ili9341_WritePixel>
		for(int j = 0; j < fonto.Width; j++){
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	3301      	adds	r3, #1
 8002d5e:	61bb      	str	r3, [r7, #24]
 8002d60:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002d62:	461a      	mov	r2, r3
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	4293      	cmp	r3, r2
 8002d68:	dbd2      	blt.n	8002d10 <ili9341_WriteChar+0xba>
	for(int i = 0; i < fonto.Height; i++){
 8002d6a:	6a3b      	ldr	r3, [r7, #32]
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	623b      	str	r3, [r7, #32]
 8002d70:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8002d72:	461a      	mov	r2, r3
 8002d74:	6a3b      	ldr	r3, [r7, #32]
 8002d76:	4293      	cmp	r3, r2
 8002d78:	db99      	blt.n	8002cae <ili9341_WriteChar+0x58>
			}

		}
	}
}
 8002d7a:	bf00      	nop
 8002d7c:	bf00      	nop
 8002d7e:	3728      	adds	r7, #40	; 0x28
 8002d80:	46bd      	mov	sp, r7
 8002d82:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002d86:	b002      	add	sp, #8
 8002d88:	4770      	bx	lr

08002d8a <ili9341_WriteString>:
  * @param  fonto: font select (from font.h)
  * @param  RGB_Coder: Text Color
  * @param  RGB_bg: Text background Color
  * @retval None
  */
void ili9341_WriteString(uint16_t Xpo, uint16_t Ypo,const char* strr,sFONT fonto, uint16_t RGB_Coder, uint16_t RGB_bg){
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b088      	sub	sp, #32
 8002d90:	af04      	add	r7, sp, #16
 8002d92:	603a      	str	r2, [r7, #0]
 8002d94:	61fb      	str	r3, [r7, #28]
 8002d96:	4603      	mov	r3, r0
 8002d98:	80fb      	strh	r3, [r7, #6]
 8002d9a:	460b      	mov	r3, r1
 8002d9c:	80bb      	strh	r3, [r7, #4]
	/*ex
	 * ili9341_WriteString(20, 300, "Helios xTerra", Font20, cl_WHITE, cl_BLACK);
	 * */
	uint16_t ili_heigh = ili9341_GetLcdPixelHeight();
 8002d9e:	f7ff fdd6 	bl	800294e <ili9341_GetLcdPixelHeight>
 8002da2:	4603      	mov	r3, r0
 8002da4:	81fb      	strh	r3, [r7, #14]
	uint16_t ili_width = ili9341_GetLcdPixelWidth();
 8002da6:	f7ff fdc9 	bl	800293c <ili9341_GetLcdPixelWidth>
 8002daa:	4603      	mov	r3, r0
 8002dac:	81bb      	strh	r3, [r7, #12]
	while(*strr){
 8002dae:	e02c      	b.n	8002e0a <ili9341_WriteString+0x80>
	//// Check screen overflow / new line
		if(Xpo + fonto.Width >= ili_width){
 8002db0:	88fb      	ldrh	r3, [r7, #6]
 8002db2:	8c3a      	ldrh	r2, [r7, #32]
 8002db4:	441a      	add	r2, r3
 8002db6:	89bb      	ldrh	r3, [r7, #12]
 8002db8:	429a      	cmp	r2, r3
 8002dba:	db13      	blt.n	8002de4 <ili9341_WriteString+0x5a>
			Xpo = 0;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	80fb      	strh	r3, [r7, #6]
			Ypo += fonto.Height;
 8002dc0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8002dc2:	88bb      	ldrh	r3, [r7, #4]
 8002dc4:	4413      	add	r3, r2
 8002dc6:	80bb      	strh	r3, [r7, #4]

			if(Ypo + fonto.Height >= ili_heigh){
 8002dc8:	88bb      	ldrh	r3, [r7, #4]
 8002dca:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8002dcc:	441a      	add	r2, r3
 8002dce:	89fb      	ldrh	r3, [r7, #14]
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	da1f      	bge.n	8002e14 <ili9341_WriteString+0x8a>
				break;
			}

			if(*strr == ' ') {
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	2b20      	cmp	r3, #32
 8002dda:	d103      	bne.n	8002de4 <ili9341_WriteString+0x5a>
				// skip spaces in the beginning of the new line
				strr++;
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	3301      	adds	r3, #1
 8002de0:	603b      	str	r3, [r7, #0]
				continue;
 8002de2:	e012      	b.n	8002e0a <ili9341_WriteString+0x80>
			}
		}
		//ST7735_WriteChar(x, y, *str, font, color, bgcolor);
		ili9341_WriteChar(Xpo, Ypo, strr, fonto, RGB_Coder, RGB_bg);
 8002de4:	88b9      	ldrh	r1, [r7, #4]
 8002de6:	88f8      	ldrh	r0, [r7, #6]
 8002de8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002dea:	9302      	str	r3, [sp, #8]
 8002dec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002dee:	9301      	str	r3, [sp, #4]
 8002df0:	6a3b      	ldr	r3, [r7, #32]
 8002df2:	9300      	str	r3, [sp, #0]
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	683a      	ldr	r2, [r7, #0]
 8002df8:	f7ff ff2d 	bl	8002c56 <ili9341_WriteChar>
		Xpo += fonto.Width;
 8002dfc:	8c3a      	ldrh	r2, [r7, #32]
 8002dfe:	88fb      	ldrh	r3, [r7, #6]
 8002e00:	4413      	add	r3, r2
 8002e02:	80fb      	strh	r3, [r7, #6]
		strr++;
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	3301      	adds	r3, #1
 8002e08:	603b      	str	r3, [r7, #0]
	while(*strr){
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d1ce      	bne.n	8002db0 <ili9341_WriteString+0x26>
	}
}
 8002e12:	e000      	b.n	8002e16 <ili9341_WriteString+0x8c>
				break;
 8002e14:	bf00      	nop
}
 8002e16:	bf00      	nop
 8002e18:	3710      	adds	r7, #16
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002e20:	b002      	add	sp, #8
 8002e22:	4770      	bx	lr

08002e24 <LcdWrite8>:

#define LCD_WRITE_CLK         GPIOX_ODR(LCD_SCK) = 0; LCD_WRITE_DELAY; GPIOX_ODR(LCD_SCK) = 1;
#define LCD_READ_CLK          GPIOX_ODR(LCD_SCK) = 1; GPIOX_ODR(LCD_SCK) = 0; LCD_READ_DELAY;

void LcdWrite8(uint8_t d8)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	71fb      	strb	r3, [r7, #7]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 7);
 8002e2e:	1dfb      	adds	r3, r7, #7
 8002e30:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002e34:	1dfb      	adds	r3, r7, #7
 8002e36:	015b      	lsls	r3, r3, #5
 8002e38:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002e3c:	f023 031f 	bic.w	r3, r3, #31
 8002e40:	4313      	orrs	r3, r2
 8002e42:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002e46:	331c      	adds	r3, #28
 8002e48:	4a53      	ldr	r2, [pc, #332]	; (8002f98 <LcdWrite8+0x174>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8002e4e:	4b53      	ldr	r3, [pc, #332]	; (8002f9c <LcdWrite8+0x178>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	601a      	str	r2, [r3, #0]
 8002e54:	4b51      	ldr	r3, [pc, #324]	; (8002f9c <LcdWrite8+0x178>)
 8002e56:	2201      	movs	r2, #1
 8002e58:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 6);
 8002e5a:	1dfb      	adds	r3, r7, #7
 8002e5c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002e60:	1dfb      	adds	r3, r7, #7
 8002e62:	015b      	lsls	r3, r3, #5
 8002e64:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002e68:	f023 031f 	bic.w	r3, r3, #31
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002e72:	3318      	adds	r3, #24
 8002e74:	4a48      	ldr	r2, [pc, #288]	; (8002f98 <LcdWrite8+0x174>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8002e7a:	4b48      	ldr	r3, [pc, #288]	; (8002f9c <LcdWrite8+0x178>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	601a      	str	r2, [r3, #0]
 8002e80:	4b46      	ldr	r3, [pc, #280]	; (8002f9c <LcdWrite8+0x178>)
 8002e82:	2201      	movs	r2, #1
 8002e84:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 5);
 8002e86:	1dfb      	adds	r3, r7, #7
 8002e88:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002e8c:	1dfb      	adds	r3, r7, #7
 8002e8e:	015b      	lsls	r3, r3, #5
 8002e90:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002e94:	f023 031f 	bic.w	r3, r3, #31
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002e9e:	3314      	adds	r3, #20
 8002ea0:	4a3d      	ldr	r2, [pc, #244]	; (8002f98 <LcdWrite8+0x174>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8002ea6:	4b3d      	ldr	r3, [pc, #244]	; (8002f9c <LcdWrite8+0x178>)
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	601a      	str	r2, [r3, #0]
 8002eac:	4b3b      	ldr	r3, [pc, #236]	; (8002f9c <LcdWrite8+0x178>)
 8002eae:	2201      	movs	r2, #1
 8002eb0:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 4);
 8002eb2:	1dfb      	adds	r3, r7, #7
 8002eb4:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002eb8:	1dfb      	adds	r3, r7, #7
 8002eba:	015b      	lsls	r3, r3, #5
 8002ebc:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002ec0:	f023 031f 	bic.w	r3, r3, #31
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002eca:	3310      	adds	r3, #16
 8002ecc:	4a32      	ldr	r2, [pc, #200]	; (8002f98 <LcdWrite8+0x174>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8002ed2:	4b32      	ldr	r3, [pc, #200]	; (8002f9c <LcdWrite8+0x178>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	601a      	str	r2, [r3, #0]
 8002ed8:	4b30      	ldr	r3, [pc, #192]	; (8002f9c <LcdWrite8+0x178>)
 8002eda:	2201      	movs	r2, #1
 8002edc:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 3);
 8002ede:	1dfb      	adds	r3, r7, #7
 8002ee0:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002ee4:	1dfb      	adds	r3, r7, #7
 8002ee6:	015b      	lsls	r3, r3, #5
 8002ee8:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002eec:	f023 031f 	bic.w	r3, r3, #31
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002ef6:	330c      	adds	r3, #12
 8002ef8:	4a27      	ldr	r2, [pc, #156]	; (8002f98 <LcdWrite8+0x174>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8002efe:	4b27      	ldr	r3, [pc, #156]	; (8002f9c <LcdWrite8+0x178>)
 8002f00:	2200      	movs	r2, #0
 8002f02:	601a      	str	r2, [r3, #0]
 8002f04:	4b25      	ldr	r3, [pc, #148]	; (8002f9c <LcdWrite8+0x178>)
 8002f06:	2201      	movs	r2, #1
 8002f08:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 2);
 8002f0a:	1dfb      	adds	r3, r7, #7
 8002f0c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002f10:	1dfb      	adds	r3, r7, #7
 8002f12:	015b      	lsls	r3, r3, #5
 8002f14:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002f18:	f023 031f 	bic.w	r3, r3, #31
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002f22:	3308      	adds	r3, #8
 8002f24:	4a1c      	ldr	r2, [pc, #112]	; (8002f98 <LcdWrite8+0x174>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8002f2a:	4b1c      	ldr	r3, [pc, #112]	; (8002f9c <LcdWrite8+0x178>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	601a      	str	r2, [r3, #0]
 8002f30:	4b1a      	ldr	r3, [pc, #104]	; (8002f9c <LcdWrite8+0x178>)
 8002f32:	2201      	movs	r2, #1
 8002f34:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 1);
 8002f36:	1dfb      	adds	r3, r7, #7
 8002f38:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002f3c:	1dfb      	adds	r3, r7, #7
 8002f3e:	015b      	lsls	r3, r3, #5
 8002f40:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002f44:	f023 031f 	bic.w	r3, r3, #31
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002f4e:	3304      	adds	r3, #4
 8002f50:	4a11      	ldr	r2, [pc, #68]	; (8002f98 <LcdWrite8+0x174>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8002f56:	4b11      	ldr	r3, [pc, #68]	; (8002f9c <LcdWrite8+0x178>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	601a      	str	r2, [r3, #0]
 8002f5c:	4b0f      	ldr	r3, [pc, #60]	; (8002f9c <LcdWrite8+0x178>)
 8002f5e:	2201      	movs	r2, #1
 8002f60:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d8, 0);
 8002f62:	1dfb      	adds	r3, r7, #7
 8002f64:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002f68:	1dfb      	adds	r3, r7, #7
 8002f6a:	015b      	lsls	r3, r3, #5
 8002f6c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002f70:	f023 031f 	bic.w	r3, r3, #31
 8002f74:	4313      	orrs	r3, r2
 8002f76:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002f7a:	4a07      	ldr	r2, [pc, #28]	; (8002f98 <LcdWrite8+0x174>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8002f80:	4b06      	ldr	r3, [pc, #24]	; (8002f9c <LcdWrite8+0x178>)
 8002f82:	2200      	movs	r2, #0
 8002f84:	601a      	str	r2, [r3, #0]
 8002f86:	4b05      	ldr	r3, [pc, #20]	; (8002f9c <LcdWrite8+0x178>)
 8002f88:	2201      	movs	r2, #1
 8002f8a:	601a      	str	r2, [r3, #0]
}
 8002f8c:	bf00      	nop
 8002f8e:	370c      	adds	r7, #12
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr
 8002f98:	4241028c 	.word	0x4241028c
 8002f9c:	42408280 	.word	0x42408280

08002fa0 <LcdWrite16>:

void LcdWrite16(uint16_t d16)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	80fb      	strh	r3, [r7, #6]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 15);
 8002faa:	1dbb      	adds	r3, r7, #6
 8002fac:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002fb0:	1dbb      	adds	r3, r7, #6
 8002fb2:	015b      	lsls	r3, r3, #5
 8002fb4:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002fb8:	f023 031f 	bic.w	r3, r3, #31
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002fc2:	333c      	adds	r3, #60	; 0x3c
 8002fc4:	4aab      	ldr	r2, [pc, #684]	; (8003274 <LcdWrite16+0x2d4>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8002fca:	4bab      	ldr	r3, [pc, #684]	; (8003278 <LcdWrite16+0x2d8>)
 8002fcc:	2200      	movs	r2, #0
 8002fce:	601a      	str	r2, [r3, #0]
 8002fd0:	4ba9      	ldr	r3, [pc, #676]	; (8003278 <LcdWrite16+0x2d8>)
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 14);
 8002fd6:	1dbb      	adds	r3, r7, #6
 8002fd8:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8002fdc:	1dbb      	adds	r3, r7, #6
 8002fde:	015b      	lsls	r3, r3, #5
 8002fe0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8002fe4:	f023 031f 	bic.w	r3, r3, #31
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8002fee:	3338      	adds	r3, #56	; 0x38
 8002ff0:	4aa0      	ldr	r2, [pc, #640]	; (8003274 <LcdWrite16+0x2d4>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8002ff6:	4ba0      	ldr	r3, [pc, #640]	; (8003278 <LcdWrite16+0x2d8>)
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	601a      	str	r2, [r3, #0]
 8002ffc:	4b9e      	ldr	r3, [pc, #632]	; (8003278 <LcdWrite16+0x2d8>)
 8002ffe:	2201      	movs	r2, #1
 8003000:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 13);
 8003002:	1dbb      	adds	r3, r7, #6
 8003004:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8003008:	1dbb      	adds	r3, r7, #6
 800300a:	015b      	lsls	r3, r3, #5
 800300c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8003010:	f023 031f 	bic.w	r3, r3, #31
 8003014:	4313      	orrs	r3, r2
 8003016:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800301a:	3334      	adds	r3, #52	; 0x34
 800301c:	4a95      	ldr	r2, [pc, #596]	; (8003274 <LcdWrite16+0x2d4>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8003022:	4b95      	ldr	r3, [pc, #596]	; (8003278 <LcdWrite16+0x2d8>)
 8003024:	2200      	movs	r2, #0
 8003026:	601a      	str	r2, [r3, #0]
 8003028:	4b93      	ldr	r3, [pc, #588]	; (8003278 <LcdWrite16+0x2d8>)
 800302a:	2201      	movs	r2, #1
 800302c:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 12);
 800302e:	1dbb      	adds	r3, r7, #6
 8003030:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8003034:	1dbb      	adds	r3, r7, #6
 8003036:	015b      	lsls	r3, r3, #5
 8003038:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 800303c:	f023 031f 	bic.w	r3, r3, #31
 8003040:	4313      	orrs	r3, r2
 8003042:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8003046:	3330      	adds	r3, #48	; 0x30
 8003048:	4a8a      	ldr	r2, [pc, #552]	; (8003274 <LcdWrite16+0x2d4>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 800304e:	4b8a      	ldr	r3, [pc, #552]	; (8003278 <LcdWrite16+0x2d8>)
 8003050:	2200      	movs	r2, #0
 8003052:	601a      	str	r2, [r3, #0]
 8003054:	4b88      	ldr	r3, [pc, #544]	; (8003278 <LcdWrite16+0x2d8>)
 8003056:	2201      	movs	r2, #1
 8003058:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 11);
 800305a:	1dbb      	adds	r3, r7, #6
 800305c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8003060:	1dbb      	adds	r3, r7, #6
 8003062:	015b      	lsls	r3, r3, #5
 8003064:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8003068:	f023 031f 	bic.w	r3, r3, #31
 800306c:	4313      	orrs	r3, r2
 800306e:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8003072:	332c      	adds	r3, #44	; 0x2c
 8003074:	4a7f      	ldr	r2, [pc, #508]	; (8003274 <LcdWrite16+0x2d4>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 800307a:	4b7f      	ldr	r3, [pc, #508]	; (8003278 <LcdWrite16+0x2d8>)
 800307c:	2200      	movs	r2, #0
 800307e:	601a      	str	r2, [r3, #0]
 8003080:	4b7d      	ldr	r3, [pc, #500]	; (8003278 <LcdWrite16+0x2d8>)
 8003082:	2201      	movs	r2, #1
 8003084:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 10);
 8003086:	1dbb      	adds	r3, r7, #6
 8003088:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800308c:	1dbb      	adds	r3, r7, #6
 800308e:	015b      	lsls	r3, r3, #5
 8003090:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8003094:	f023 031f 	bic.w	r3, r3, #31
 8003098:	4313      	orrs	r3, r2
 800309a:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800309e:	3328      	adds	r3, #40	; 0x28
 80030a0:	4a74      	ldr	r2, [pc, #464]	; (8003274 <LcdWrite16+0x2d4>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 80030a6:	4b74      	ldr	r3, [pc, #464]	; (8003278 <LcdWrite16+0x2d8>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	601a      	str	r2, [r3, #0]
 80030ac:	4b72      	ldr	r3, [pc, #456]	; (8003278 <LcdWrite16+0x2d8>)
 80030ae:	2201      	movs	r2, #1
 80030b0:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 9);
 80030b2:	1dbb      	adds	r3, r7, #6
 80030b4:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80030b8:	1dbb      	adds	r3, r7, #6
 80030ba:	015b      	lsls	r3, r3, #5
 80030bc:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80030c0:	f023 031f 	bic.w	r3, r3, #31
 80030c4:	4313      	orrs	r3, r2
 80030c6:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80030ca:	3324      	adds	r3, #36	; 0x24
 80030cc:	4a69      	ldr	r2, [pc, #420]	; (8003274 <LcdWrite16+0x2d4>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 80030d2:	4b69      	ldr	r3, [pc, #420]	; (8003278 <LcdWrite16+0x2d8>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	601a      	str	r2, [r3, #0]
 80030d8:	4b67      	ldr	r3, [pc, #412]	; (8003278 <LcdWrite16+0x2d8>)
 80030da:	2201      	movs	r2, #1
 80030dc:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 8);
 80030de:	1dbb      	adds	r3, r7, #6
 80030e0:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80030e4:	1dbb      	adds	r3, r7, #6
 80030e6:	015b      	lsls	r3, r3, #5
 80030e8:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80030ec:	f023 031f 	bic.w	r3, r3, #31
 80030f0:	4313      	orrs	r3, r2
 80030f2:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80030f6:	3320      	adds	r3, #32
 80030f8:	4a5e      	ldr	r2, [pc, #376]	; (8003274 <LcdWrite16+0x2d4>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 80030fe:	4b5e      	ldr	r3, [pc, #376]	; (8003278 <LcdWrite16+0x2d8>)
 8003100:	2200      	movs	r2, #0
 8003102:	601a      	str	r2, [r3, #0]
 8003104:	4b5c      	ldr	r3, [pc, #368]	; (8003278 <LcdWrite16+0x2d8>)
 8003106:	2201      	movs	r2, #1
 8003108:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 7);
 800310a:	1dbb      	adds	r3, r7, #6
 800310c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8003110:	1dbb      	adds	r3, r7, #6
 8003112:	015b      	lsls	r3, r3, #5
 8003114:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8003118:	f023 031f 	bic.w	r3, r3, #31
 800311c:	4313      	orrs	r3, r2
 800311e:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8003122:	331c      	adds	r3, #28
 8003124:	4a53      	ldr	r2, [pc, #332]	; (8003274 <LcdWrite16+0x2d4>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 800312a:	4b53      	ldr	r3, [pc, #332]	; (8003278 <LcdWrite16+0x2d8>)
 800312c:	2200      	movs	r2, #0
 800312e:	601a      	str	r2, [r3, #0]
 8003130:	4b51      	ldr	r3, [pc, #324]	; (8003278 <LcdWrite16+0x2d8>)
 8003132:	2201      	movs	r2, #1
 8003134:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 6);
 8003136:	1dbb      	adds	r3, r7, #6
 8003138:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800313c:	1dbb      	adds	r3, r7, #6
 800313e:	015b      	lsls	r3, r3, #5
 8003140:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8003144:	f023 031f 	bic.w	r3, r3, #31
 8003148:	4313      	orrs	r3, r2
 800314a:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800314e:	3318      	adds	r3, #24
 8003150:	4a48      	ldr	r2, [pc, #288]	; (8003274 <LcdWrite16+0x2d4>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8003156:	4b48      	ldr	r3, [pc, #288]	; (8003278 <LcdWrite16+0x2d8>)
 8003158:	2200      	movs	r2, #0
 800315a:	601a      	str	r2, [r3, #0]
 800315c:	4b46      	ldr	r3, [pc, #280]	; (8003278 <LcdWrite16+0x2d8>)
 800315e:	2201      	movs	r2, #1
 8003160:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 5);
 8003162:	1dbb      	adds	r3, r7, #6
 8003164:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8003168:	1dbb      	adds	r3, r7, #6
 800316a:	015b      	lsls	r3, r3, #5
 800316c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8003170:	f023 031f 	bic.w	r3, r3, #31
 8003174:	4313      	orrs	r3, r2
 8003176:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800317a:	3314      	adds	r3, #20
 800317c:	4a3d      	ldr	r2, [pc, #244]	; (8003274 <LcdWrite16+0x2d4>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8003182:	4b3d      	ldr	r3, [pc, #244]	; (8003278 <LcdWrite16+0x2d8>)
 8003184:	2200      	movs	r2, #0
 8003186:	601a      	str	r2, [r3, #0]
 8003188:	4b3b      	ldr	r3, [pc, #236]	; (8003278 <LcdWrite16+0x2d8>)
 800318a:	2201      	movs	r2, #1
 800318c:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 4);
 800318e:	1dbb      	adds	r3, r7, #6
 8003190:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8003194:	1dbb      	adds	r3, r7, #6
 8003196:	015b      	lsls	r3, r3, #5
 8003198:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 800319c:	f023 031f 	bic.w	r3, r3, #31
 80031a0:	4313      	orrs	r3, r2
 80031a2:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80031a6:	3310      	adds	r3, #16
 80031a8:	4a32      	ldr	r2, [pc, #200]	; (8003274 <LcdWrite16+0x2d4>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 80031ae:	4b32      	ldr	r3, [pc, #200]	; (8003278 <LcdWrite16+0x2d8>)
 80031b0:	2200      	movs	r2, #0
 80031b2:	601a      	str	r2, [r3, #0]
 80031b4:	4b30      	ldr	r3, [pc, #192]	; (8003278 <LcdWrite16+0x2d8>)
 80031b6:	2201      	movs	r2, #1
 80031b8:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 3);
 80031ba:	1dbb      	adds	r3, r7, #6
 80031bc:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80031c0:	1dbb      	adds	r3, r7, #6
 80031c2:	015b      	lsls	r3, r3, #5
 80031c4:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80031c8:	f023 031f 	bic.w	r3, r3, #31
 80031cc:	4313      	orrs	r3, r2
 80031ce:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80031d2:	330c      	adds	r3, #12
 80031d4:	4a27      	ldr	r2, [pc, #156]	; (8003274 <LcdWrite16+0x2d4>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 80031da:	4b27      	ldr	r3, [pc, #156]	; (8003278 <LcdWrite16+0x2d8>)
 80031dc:	2200      	movs	r2, #0
 80031de:	601a      	str	r2, [r3, #0]
 80031e0:	4b25      	ldr	r3, [pc, #148]	; (8003278 <LcdWrite16+0x2d8>)
 80031e2:	2201      	movs	r2, #1
 80031e4:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 2);
 80031e6:	1dbb      	adds	r3, r7, #6
 80031e8:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80031ec:	1dbb      	adds	r3, r7, #6
 80031ee:	015b      	lsls	r3, r3, #5
 80031f0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80031f4:	f023 031f 	bic.w	r3, r3, #31
 80031f8:	4313      	orrs	r3, r2
 80031fa:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80031fe:	3308      	adds	r3, #8
 8003200:	4a1c      	ldr	r2, [pc, #112]	; (8003274 <LcdWrite16+0x2d4>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8003206:	4b1c      	ldr	r3, [pc, #112]	; (8003278 <LcdWrite16+0x2d8>)
 8003208:	2200      	movs	r2, #0
 800320a:	601a      	str	r2, [r3, #0]
 800320c:	4b1a      	ldr	r3, [pc, #104]	; (8003278 <LcdWrite16+0x2d8>)
 800320e:	2201      	movs	r2, #1
 8003210:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 1);
 8003212:	1dbb      	adds	r3, r7, #6
 8003214:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8003218:	1dbb      	adds	r3, r7, #6
 800321a:	015b      	lsls	r3, r3, #5
 800321c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8003220:	f023 031f 	bic.w	r3, r3, #31
 8003224:	4313      	orrs	r3, r2
 8003226:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800322a:	3304      	adds	r3, #4
 800322c:	4a11      	ldr	r2, [pc, #68]	; (8003274 <LcdWrite16+0x2d4>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 8003232:	4b11      	ldr	r3, [pc, #68]	; (8003278 <LcdWrite16+0x2d8>)
 8003234:	2200      	movs	r2, #0
 8003236:	601a      	str	r2, [r3, #0]
 8003238:	4b0f      	ldr	r3, [pc, #60]	; (8003278 <LcdWrite16+0x2d8>)
 800323a:	2201      	movs	r2, #1
 800323c:	601a      	str	r2, [r3, #0]
  GPIOX_ODR(LCD_MOSI) = BITBAND_ACCESS(d16, 0);
 800323e:	1dbb      	adds	r3, r7, #6
 8003240:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8003244:	1dbb      	adds	r3, r7, #6
 8003246:	015b      	lsls	r3, r3, #5
 8003248:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 800324c:	f023 031f 	bic.w	r3, r3, #31
 8003250:	4313      	orrs	r3, r2
 8003252:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8003256:	4a07      	ldr	r2, [pc, #28]	; (8003274 <LcdWrite16+0x2d4>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	6013      	str	r3, [r2, #0]
  LCD_WRITE_CLK;
 800325c:	4b06      	ldr	r3, [pc, #24]	; (8003278 <LcdWrite16+0x2d8>)
 800325e:	2200      	movs	r2, #0
 8003260:	601a      	str	r2, [r3, #0]
 8003262:	4b05      	ldr	r3, [pc, #20]	; (8003278 <LcdWrite16+0x2d8>)
 8003264:	2201      	movs	r2, #1
 8003266:	601a      	str	r2, [r3, #0]
}
 8003268:	bf00      	nop
 800326a:	370c      	adds	r7, #12
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr
 8003274:	4241028c 	.word	0x4241028c
 8003278:	42408280 	.word	0x42408280

0800327c <LCD_IO_WriteMultiData8>:
#if DMANUM(LCD_DMA_TX) == 0 || LCD_SPI == 0

/* SPI TX no DMA */

void LCD_IO_WriteMultiData8(uint8_t * pData, uint32_t Size, uint32_t dinc)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b084      	sub	sp, #16
 8003280:	af00      	add	r7, sp, #0
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	60b9      	str	r1, [r7, #8]
 8003286:	607a      	str	r2, [r7, #4]
  while(Size--)
 8003288:	e00a      	b.n	80032a0 <LCD_IO_WriteMultiData8+0x24>
  {
    LcdWrite8(*pData);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	781b      	ldrb	r3, [r3, #0]
 800328e:	4618      	mov	r0, r3
 8003290:	f7ff fdc8 	bl	8002e24 <LcdWrite8>
    if(dinc)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d002      	beq.n	80032a0 <LCD_IO_WriteMultiData8+0x24>
      pData++;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	3301      	adds	r3, #1
 800329e:	60fb      	str	r3, [r7, #12]
  while(Size--)
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	1e5a      	subs	r2, r3, #1
 80032a4:	60ba      	str	r2, [r7, #8]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d1ef      	bne.n	800328a <LCD_IO_WriteMultiData8+0xe>
  }
  LCD_CS_OFF;
 80032aa:	4b03      	ldr	r3, [pc, #12]	; (80032b8 <LCD_IO_WriteMultiData8+0x3c>)
 80032ac:	2201      	movs	r2, #1
 80032ae:	601a      	str	r2, [r3, #0]
}
 80032b0:	bf00      	nop
 80032b2:	3710      	adds	r7, #16
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	42410284 	.word	0x42410284

080032bc <LCD_IO_WriteMultiData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteMultiData16(uint16_t * pData, uint32_t Size, uint32_t dinc)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	60f8      	str	r0, [r7, #12]
 80032c4:	60b9      	str	r1, [r7, #8]
 80032c6:	607a      	str	r2, [r7, #4]
  while(Size--)
 80032c8:	e00a      	b.n	80032e0 <LCD_IO_WriteMultiData16+0x24>
  {
    LcdWrite16(*pData);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	881b      	ldrh	r3, [r3, #0]
 80032ce:	4618      	mov	r0, r3
 80032d0:	f7ff fe66 	bl	8002fa0 <LcdWrite16>
    if(dinc)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d002      	beq.n	80032e0 <LCD_IO_WriteMultiData16+0x24>
      pData++;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	3302      	adds	r3, #2
 80032de:	60fb      	str	r3, [r7, #12]
  while(Size--)
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	1e5a      	subs	r2, r3, #1
 80032e4:	60ba      	str	r2, [r7, #8]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d1ef      	bne.n	80032ca <LCD_IO_WriteMultiData16+0xe>
  }
  LCD_CS_OFF;
 80032ea:	4b03      	ldr	r3, [pc, #12]	; (80032f8 <LCD_IO_WriteMultiData16+0x3c>)
 80032ec:	2201      	movs	r2, #1
 80032ee:	601a      	str	r2, [r3, #0]
}
 80032f0:	bf00      	nop
 80032f2:	3710      	adds	r7, #16
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	42410284 	.word	0x42410284

080032fc <LCD_Delay>:

//=============================================================================
/* Public functions */

void LCD_Delay(uint32_t Delay)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b082      	sub	sp, #8
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	f000 f9b7 	bl	8003678 <HAL_Delay>
}
 800330a:	bf00      	nop
 800330c:	3708      	adds	r7, #8
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}

08003312 <LCD_IO_Bl_OnOff>:

//-----------------------------------------------------------------------------
void LCD_IO_Bl_OnOff(uint8_t Bl)
{
 8003312:	b480      	push	{r7}
 8003314:	b083      	sub	sp, #12
 8003316:	af00      	add	r7, sp, #0
 8003318:	4603      	mov	r3, r0
 800331a:	71fb      	strb	r3, [r7, #7]
  if(Bl)
    GPIOX_ODR(LCD_BL) = LCD_BLON;
  else
    GPIOX_ODR(LCD_BL) = 1 - LCD_BLON;
  #endif
}
 800331c:	bf00      	nop
 800331e:	370c      	adds	r7, #12
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr

08003328 <LCD_IO_Init>:

//-----------------------------------------------------------------------------
void LCD_IO_Init(void)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	af00      	add	r7, sp, #0
  #define DMA1_CLOCK_RX         0
  #endif
  #endif  // #else LCD_SPI == 0

  /* GPIO, DMA Clocks */
  RCC->AHB1ENR |= GPIOX_CLOCK(LCD_RS) | GPIOX_CLOCK(LCD_CS) | GPIOX_CLOCK(LCD_SCK) | GPIOX_CLOCK(LCD_MOSI) |
 800332c:	4b34      	ldr	r3, [pc, #208]	; (8003400 <LCD_IO_Init+0xd8>)
 800332e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003330:	4a33      	ldr	r2, [pc, #204]	; (8003400 <LCD_IO_Init+0xd8>)
 8003332:	f043 0307 	orr.w	r3, r3, #7
 8003336:	6313      	str	r3, [r2, #48]	; 0x30
  LCD_IO_Bl_OnOff(1);
  #endif

  /* Reset pin = output, reset off */
  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A
  GPIOX_MODER(MODE_OUT, LCD_RST);
 8003338:	4b32      	ldr	r3, [pc, #200]	; (8003404 <LCD_IO_Init+0xdc>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003340:	4a30      	ldr	r2, [pc, #192]	; (8003404 <LCD_IO_Init+0xdc>)
 8003342:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003346:	6013      	str	r3, [r2, #0]
  GPIOX_OSPEEDR(MODE_SPD_LOW, LCD_RST);
 8003348:	4b2e      	ldr	r3, [pc, #184]	; (8003404 <LCD_IO_Init+0xdc>)
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	4a2d      	ldr	r2, [pc, #180]	; (8003404 <LCD_IO_Init+0xdc>)
 800334e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003352:	6093      	str	r3, [r2, #8]
  LCD_RST_OFF;
 8003354:	4b2c      	ldr	r3, [pc, #176]	; (8003408 <LCD_IO_Init+0xe0>)
 8003356:	2201      	movs	r2, #1
 8003358:	601a      	str	r2, [r3, #0]
  #endif

  LCD_RS_DATA;
 800335a:	4b2c      	ldr	r3, [pc, #176]	; (800340c <LCD_IO_Init+0xe4>)
 800335c:	2201      	movs	r2, #1
 800335e:	601a      	str	r2, [r3, #0]
  LCD_CS_OFF;
 8003360:	4b2b      	ldr	r3, [pc, #172]	; (8003410 <LCD_IO_Init+0xe8>)
 8003362:	2201      	movs	r2, #1
 8003364:	601a      	str	r2, [r3, #0]
  GPIOX_MODER(MODE_OUT, LCD_RS);
 8003366:	4b2b      	ldr	r3, [pc, #172]	; (8003414 <LCD_IO_Init+0xec>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f023 0303 	bic.w	r3, r3, #3
 800336e:	4a29      	ldr	r2, [pc, #164]	; (8003414 <LCD_IO_Init+0xec>)
 8003370:	f043 0301 	orr.w	r3, r3, #1
 8003374:	6013      	str	r3, [r2, #0]
  GPIOX_MODER(MODE_OUT, LCD_CS);
 8003376:	4b27      	ldr	r3, [pc, #156]	; (8003414 <LCD_IO_Init+0xec>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f023 030c 	bic.w	r3, r3, #12
 800337e:	4a25      	ldr	r2, [pc, #148]	; (8003414 <LCD_IO_Init+0xec>)
 8003380:	f043 0304 	orr.w	r3, r3, #4
 8003384:	6013      	str	r3, [r2, #0]

  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_RS);
 8003386:	4b23      	ldr	r3, [pc, #140]	; (8003414 <LCD_IO_Init+0xec>)
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	4a22      	ldr	r2, [pc, #136]	; (8003414 <LCD_IO_Init+0xec>)
 800338c:	f043 0303 	orr.w	r3, r3, #3
 8003390:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_CS);
 8003392:	4b20      	ldr	r3, [pc, #128]	; (8003414 <LCD_IO_Init+0xec>)
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	4a1f      	ldr	r2, [pc, #124]	; (8003414 <LCD_IO_Init+0xec>)
 8003398:	f043 030c 	orr.w	r3, r3, #12
 800339c:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_SCK);
 800339e:	4b1e      	ldr	r3, [pc, #120]	; (8003418 <LCD_IO_Init+0xf0>)
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	4a1d      	ldr	r2, [pc, #116]	; (8003418 <LCD_IO_Init+0xf0>)
 80033a4:	f043 0303 	orr.w	r3, r3, #3
 80033a8:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_MOSI);
 80033aa:	4b1a      	ldr	r3, [pc, #104]	; (8003414 <LCD_IO_Init+0xec>)
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	4a19      	ldr	r2, [pc, #100]	; (8003414 <LCD_IO_Init+0xec>)
 80033b0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80033b4:	6093      	str	r3, [r2, #8]
  GPIOX_ODR(LCD_SCK) = 1;               // SCK = 1
 80033b6:	4b19      	ldr	r3, [pc, #100]	; (800341c <LCD_IO_Init+0xf4>)
 80033b8:	2201      	movs	r2, #1
 80033ba:	601a      	str	r2, [r3, #0]

  #if LCD_SPI == 0
  /* Software SPI */
  GPIOX_MODER(MODE_OUT, LCD_SCK);
 80033bc:	4b16      	ldr	r3, [pc, #88]	; (8003418 <LCD_IO_Init+0xf0>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f023 0303 	bic.w	r3, r3, #3
 80033c4:	4a14      	ldr	r2, [pc, #80]	; (8003418 <LCD_IO_Init+0xf0>)
 80033c6:	f043 0301 	orr.w	r3, r3, #1
 80033ca:	6013      	str	r3, [r2, #0]
  GPIOX_MODER(MODE_OUT, LCD_MOSI);
 80033cc:	4b11      	ldr	r3, [pc, #68]	; (8003414 <LCD_IO_Init+0xec>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80033d4:	4a0f      	ldr	r2, [pc, #60]	; (8003414 <LCD_IO_Init+0xec>)
 80033d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033da:	6013      	str	r3, [r2, #0]

  #endif // #else LCD_SPI == 0

  /* Set or Reset the control line */
  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A // reset
  LCD_Delay(10);
 80033dc:	200a      	movs	r0, #10
 80033de:	f7ff ff8d 	bl	80032fc <LCD_Delay>
  LCD_RST_ON;
 80033e2:	4b09      	ldr	r3, [pc, #36]	; (8003408 <LCD_IO_Init+0xe0>)
 80033e4:	2200      	movs	r2, #0
 80033e6:	601a      	str	r2, [r3, #0]
  LCD_Delay(10);
 80033e8:	200a      	movs	r0, #10
 80033ea:	f7ff ff87 	bl	80032fc <LCD_Delay>
  LCD_RST_OFF;
 80033ee:	4b06      	ldr	r3, [pc, #24]	; (8003408 <LCD_IO_Init+0xe0>)
 80033f0:	2201      	movs	r2, #1
 80033f2:	601a      	str	r2, [r3, #0]
  #endif
  LCD_Delay(10);
 80033f4:	200a      	movs	r0, #10
 80033f6:	f7ff ff81 	bl	80032fc <LCD_Delay>
  osSemaphoreDef(spiDmaBinSem);
  spiDmaBinSemHandle = osSemaphoreCreate(osSemaphore(spiDmaBinSem), 1);
  osSemaphoreWait(spiDmaBinSemHandle, 1);
  #endif
  #endif  // #if DMANUM(LCD_DMA_RX) > 0
} // void LCD_IO_Init(void)
 80033fa:	bf00      	nop
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	40023800 	.word	0x40023800
 8003404:	40020000 	.word	0x40020000
 8003408:	42400290 	.word	0x42400290
 800340c:	42410280 	.word	0x42410280
 8003410:	42410284 	.word	0x42410284
 8003414:	40020800 	.word	0x40020800
 8003418:	40020400 	.word	0x40020400
 800341c:	42408280 	.word	0x42408280

08003420 <LCD_IO_WriteCmd8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8(uint8_t Cmd)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0
 8003426:	4603      	mov	r3, r0
 8003428:	71fb      	strb	r3, [r7, #7]
  WaitForDmaEnd();
  LcdSpiMode8();
  LCD_CS_ON;
 800342a:	4b0a      	ldr	r3, [pc, #40]	; (8003454 <LCD_IO_WriteCmd8+0x34>)
 800342c:	2200      	movs	r2, #0
 800342e:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 8003430:	4b09      	ldr	r3, [pc, #36]	; (8003458 <LCD_IO_WriteCmd8+0x38>)
 8003432:	2200      	movs	r2, #0
 8003434:	601a      	str	r2, [r3, #0]
 8003436:	79fb      	ldrb	r3, [r7, #7]
 8003438:	4618      	mov	r0, r3
 800343a:	f7ff fcf3 	bl	8002e24 <LcdWrite8>
 800343e:	4b06      	ldr	r3, [pc, #24]	; (8003458 <LCD_IO_WriteCmd8+0x38>)
 8003440:	2201      	movs	r2, #1
 8003442:	601a      	str	r2, [r3, #0]
  LCD_CS_OFF;
 8003444:	4b03      	ldr	r3, [pc, #12]	; (8003454 <LCD_IO_WriteCmd8+0x34>)
 8003446:	2201      	movs	r2, #1
 8003448:	601a      	str	r2, [r3, #0]
}
 800344a:	bf00      	nop
 800344c:	3708      	adds	r7, #8
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	42410284 	.word	0x42410284
 8003458:	42410280 	.word	0x42410280

0800345c <LCD_IO_WriteData8>:
  LCD_CS_OFF;
}

//-----------------------------------------------------------------------------
void LCD_IO_WriteData8(uint8_t Data)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b082      	sub	sp, #8
 8003460:	af00      	add	r7, sp, #0
 8003462:	4603      	mov	r3, r0
 8003464:	71fb      	strb	r3, [r7, #7]
  WaitForDmaEnd();
  LcdSpiMode8();
  LCD_CS_ON;
 8003466:	4b07      	ldr	r3, [pc, #28]	; (8003484 <LCD_IO_WriteData8+0x28>)
 8003468:	2200      	movs	r2, #0
 800346a:	601a      	str	r2, [r3, #0]
  LcdWrite8(Data);
 800346c:	79fb      	ldrb	r3, [r7, #7]
 800346e:	4618      	mov	r0, r3
 8003470:	f7ff fcd8 	bl	8002e24 <LcdWrite8>
  LCD_CS_OFF;
 8003474:	4b03      	ldr	r3, [pc, #12]	; (8003484 <LCD_IO_WriteData8+0x28>)
 8003476:	2201      	movs	r2, #1
 8003478:	601a      	str	r2, [r3, #0]
}
 800347a:	bf00      	nop
 800347c:	3708      	adds	r7, #8
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	42410284 	.word	0x42410284

08003488 <LCD_IO_WriteData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteData16(uint16_t Data)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b082      	sub	sp, #8
 800348c:	af00      	add	r7, sp, #0
 800348e:	4603      	mov	r3, r0
 8003490:	80fb      	strh	r3, [r7, #6]
  WaitForDmaEnd();
  LcdSpiMode16();
  LCD_CS_ON;
 8003492:	4b07      	ldr	r3, [pc, #28]	; (80034b0 <LCD_IO_WriteData16+0x28>)
 8003494:	2200      	movs	r2, #0
 8003496:	601a      	str	r2, [r3, #0]
  LcdWrite16(Data);
 8003498:	88fb      	ldrh	r3, [r7, #6]
 800349a:	4618      	mov	r0, r3
 800349c:	f7ff fd80 	bl	8002fa0 <LcdWrite16>
  LCD_CS_OFF;
 80034a0:	4b03      	ldr	r3, [pc, #12]	; (80034b0 <LCD_IO_WriteData16+0x28>)
 80034a2:	2201      	movs	r2, #1
 80034a4:	601a      	str	r2, [r3, #0]
}
 80034a6:	bf00      	nop
 80034a8:	3708      	adds	r7, #8
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop
 80034b0:	42410284 	.word	0x42410284

080034b4 <LCD_IO_WriteCmd8DataFill16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8DataFill16(uint8_t Cmd, uint16_t Data, uint32_t Size)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	4603      	mov	r3, r0
 80034bc:	603a      	str	r2, [r7, #0]
 80034be:	71fb      	strb	r3, [r7, #7]
 80034c0:	460b      	mov	r3, r1
 80034c2:	80bb      	strh	r3, [r7, #4]
  WaitForDmaEnd();
  LcdSpiMode8();
  LCD_CS_ON;
 80034c4:	4b0b      	ldr	r3, [pc, #44]	; (80034f4 <LCD_IO_WriteCmd8DataFill16+0x40>)
 80034c6:	2200      	movs	r2, #0
 80034c8:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 80034ca:	4b0b      	ldr	r3, [pc, #44]	; (80034f8 <LCD_IO_WriteCmd8DataFill16+0x44>)
 80034cc:	2200      	movs	r2, #0
 80034ce:	601a      	str	r2, [r3, #0]
 80034d0:	79fb      	ldrb	r3, [r7, #7]
 80034d2:	4618      	mov	r0, r3
 80034d4:	f7ff fca6 	bl	8002e24 <LcdWrite8>
 80034d8:	4b07      	ldr	r3, [pc, #28]	; (80034f8 <LCD_IO_WriteCmd8DataFill16+0x44>)
 80034da:	2201      	movs	r2, #1
 80034dc:	601a      	str	r2, [r3, #0]
  LcdSpiMode16();
  LCD_IO_WriteMultiData16(&Data, Size, 0);
 80034de:	1d3b      	adds	r3, r7, #4
 80034e0:	2200      	movs	r2, #0
 80034e2:	6839      	ldr	r1, [r7, #0]
 80034e4:	4618      	mov	r0, r3
 80034e6:	f7ff fee9 	bl	80032bc <LCD_IO_WriteMultiData16>
}
 80034ea:	bf00      	nop
 80034ec:	3708      	adds	r7, #8
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	42410284 	.word	0x42410284
 80034f8:	42410280 	.word	0x42410280

080034fc <LCD_IO_WriteCmd8MultipleData8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8MultipleData8(uint8_t Cmd, uint8_t *pData, uint32_t Size)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	4603      	mov	r3, r0
 8003504:	60b9      	str	r1, [r7, #8]
 8003506:	607a      	str	r2, [r7, #4]
 8003508:	73fb      	strb	r3, [r7, #15]
  WaitForDmaEnd();
  LcdSpiMode8();
  LCD_CS_ON;
 800350a:	4b0b      	ldr	r3, [pc, #44]	; (8003538 <LCD_IO_WriteCmd8MultipleData8+0x3c>)
 800350c:	2200      	movs	r2, #0
 800350e:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 8003510:	4b0a      	ldr	r3, [pc, #40]	; (800353c <LCD_IO_WriteCmd8MultipleData8+0x40>)
 8003512:	2200      	movs	r2, #0
 8003514:	601a      	str	r2, [r3, #0]
 8003516:	7bfb      	ldrb	r3, [r7, #15]
 8003518:	4618      	mov	r0, r3
 800351a:	f7ff fc83 	bl	8002e24 <LcdWrite8>
 800351e:	4b07      	ldr	r3, [pc, #28]	; (800353c <LCD_IO_WriteCmd8MultipleData8+0x40>)
 8003520:	2201      	movs	r2, #1
 8003522:	601a      	str	r2, [r3, #0]
  LCD_IO_WriteMultiData8(pData, Size, 1);
 8003524:	2201      	movs	r2, #1
 8003526:	6879      	ldr	r1, [r7, #4]
 8003528:	68b8      	ldr	r0, [r7, #8]
 800352a:	f7ff fea7 	bl	800327c <LCD_IO_WriteMultiData8>
}
 800352e:	bf00      	nop
 8003530:	3710      	adds	r7, #16
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	42410284 	.word	0x42410284
 800353c:	42410280 	.word	0x42410280

08003540 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003540:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003578 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003544:	480d      	ldr	r0, [pc, #52]	; (800357c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003546:	490e      	ldr	r1, [pc, #56]	; (8003580 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003548:	4a0e      	ldr	r2, [pc, #56]	; (8003584 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800354a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800354c:	e002      	b.n	8003554 <LoopCopyDataInit>

0800354e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800354e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003550:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003552:	3304      	adds	r3, #4

08003554 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003554:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003556:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003558:	d3f9      	bcc.n	800354e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800355a:	4a0b      	ldr	r2, [pc, #44]	; (8003588 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800355c:	4c0b      	ldr	r4, [pc, #44]	; (800358c <LoopFillZerobss+0x26>)
  movs r3, #0
 800355e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003560:	e001      	b.n	8003566 <LoopFillZerobss>

08003562 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003562:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003564:	3204      	adds	r2, #4

08003566 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003566:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003568:	d3fb      	bcc.n	8003562 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800356a:	f7ff f9cb 	bl	8002904 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800356e:	f006 f911 	bl	8009794 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003572:	f7fe f939 	bl	80017e8 <main>
  bx  lr    
 8003576:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003578:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800357c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003580:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8003584:	0800dc14 	.word	0x0800dc14
  ldr r2, =_sbss
 8003588:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 800358c:	200006bc 	.word	0x200006bc

08003590 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003590:	e7fe      	b.n	8003590 <ADC_IRQHandler>
	...

08003594 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003598:	4b0e      	ldr	r3, [pc, #56]	; (80035d4 <HAL_Init+0x40>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a0d      	ldr	r2, [pc, #52]	; (80035d4 <HAL_Init+0x40>)
 800359e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80035a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80035a4:	4b0b      	ldr	r3, [pc, #44]	; (80035d4 <HAL_Init+0x40>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a0a      	ldr	r2, [pc, #40]	; (80035d4 <HAL_Init+0x40>)
 80035aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80035ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80035b0:	4b08      	ldr	r3, [pc, #32]	; (80035d4 <HAL_Init+0x40>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a07      	ldr	r2, [pc, #28]	; (80035d4 <HAL_Init+0x40>)
 80035b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80035bc:	2003      	movs	r0, #3
 80035be:	f000 f94f 	bl	8003860 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80035c2:	2000      	movs	r0, #0
 80035c4:	f000 f808 	bl	80035d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80035c8:	f7fe fe84 	bl	80022d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80035cc:	2300      	movs	r3, #0
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	40023c00 	.word	0x40023c00

080035d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b082      	sub	sp, #8
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80035e0:	4b12      	ldr	r3, [pc, #72]	; (800362c <HAL_InitTick+0x54>)
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	4b12      	ldr	r3, [pc, #72]	; (8003630 <HAL_InitTick+0x58>)
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	4619      	mov	r1, r3
 80035ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80035ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80035f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80035f6:	4618      	mov	r0, r3
 80035f8:	f000 f967 	bl	80038ca <HAL_SYSTICK_Config>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d001      	beq.n	8003606 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e00e      	b.n	8003624 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2b0f      	cmp	r3, #15
 800360a:	d80a      	bhi.n	8003622 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800360c:	2200      	movs	r2, #0
 800360e:	6879      	ldr	r1, [r7, #4]
 8003610:	f04f 30ff 	mov.w	r0, #4294967295
 8003614:	f000 f92f 	bl	8003876 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003618:	4a06      	ldr	r2, [pc, #24]	; (8003634 <HAL_InitTick+0x5c>)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800361e:	2300      	movs	r3, #0
 8003620:	e000      	b.n	8003624 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
}
 8003624:	4618      	mov	r0, r3
 8003626:	3708      	adds	r7, #8
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}
 800362c:	2000000c 	.word	0x2000000c
 8003630:	20000024 	.word	0x20000024
 8003634:	20000020 	.word	0x20000020

08003638 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003638:	b480      	push	{r7}
 800363a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800363c:	4b06      	ldr	r3, [pc, #24]	; (8003658 <HAL_IncTick+0x20>)
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	461a      	mov	r2, r3
 8003642:	4b06      	ldr	r3, [pc, #24]	; (800365c <HAL_IncTick+0x24>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4413      	add	r3, r2
 8003648:	4a04      	ldr	r2, [pc, #16]	; (800365c <HAL_IncTick+0x24>)
 800364a:	6013      	str	r3, [r2, #0]
}
 800364c:	bf00      	nop
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr
 8003656:	bf00      	nop
 8003658:	20000024 	.word	0x20000024
 800365c:	200006a8 	.word	0x200006a8

08003660 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003660:	b480      	push	{r7}
 8003662:	af00      	add	r7, sp, #0
  return uwTick;
 8003664:	4b03      	ldr	r3, [pc, #12]	; (8003674 <HAL_GetTick+0x14>)
 8003666:	681b      	ldr	r3, [r3, #0]
}
 8003668:	4618      	mov	r0, r3
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr
 8003672:	bf00      	nop
 8003674:	200006a8 	.word	0x200006a8

08003678 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003680:	f7ff ffee 	bl	8003660 <HAL_GetTick>
 8003684:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003690:	d005      	beq.n	800369e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003692:	4b0a      	ldr	r3, [pc, #40]	; (80036bc <HAL_Delay+0x44>)
 8003694:	781b      	ldrb	r3, [r3, #0]
 8003696:	461a      	mov	r2, r3
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	4413      	add	r3, r2
 800369c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800369e:	bf00      	nop
 80036a0:	f7ff ffde 	bl	8003660 <HAL_GetTick>
 80036a4:	4602      	mov	r2, r0
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	68fa      	ldr	r2, [r7, #12]
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d8f7      	bhi.n	80036a0 <HAL_Delay+0x28>
  {
  }
}
 80036b0:	bf00      	nop
 80036b2:	bf00      	nop
 80036b4:	3710      	adds	r7, #16
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	20000024 	.word	0x20000024

080036c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b085      	sub	sp, #20
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f003 0307 	and.w	r3, r3, #7
 80036ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036d0:	4b0c      	ldr	r3, [pc, #48]	; (8003704 <__NVIC_SetPriorityGrouping+0x44>)
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036d6:	68ba      	ldr	r2, [r7, #8]
 80036d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80036dc:	4013      	ands	r3, r2
 80036de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80036e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80036ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036f2:	4a04      	ldr	r2, [pc, #16]	; (8003704 <__NVIC_SetPriorityGrouping+0x44>)
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	60d3      	str	r3, [r2, #12]
}
 80036f8:	bf00      	nop
 80036fa:	3714      	adds	r7, #20
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr
 8003704:	e000ed00 	.word	0xe000ed00

08003708 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003708:	b480      	push	{r7}
 800370a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800370c:	4b04      	ldr	r3, [pc, #16]	; (8003720 <__NVIC_GetPriorityGrouping+0x18>)
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	0a1b      	lsrs	r3, r3, #8
 8003712:	f003 0307 	and.w	r3, r3, #7
}
 8003716:	4618      	mov	r0, r3
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr
 8003720:	e000ed00 	.word	0xe000ed00

08003724 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	4603      	mov	r3, r0
 800372c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800372e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003732:	2b00      	cmp	r3, #0
 8003734:	db0b      	blt.n	800374e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003736:	79fb      	ldrb	r3, [r7, #7]
 8003738:	f003 021f 	and.w	r2, r3, #31
 800373c:	4907      	ldr	r1, [pc, #28]	; (800375c <__NVIC_EnableIRQ+0x38>)
 800373e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003742:	095b      	lsrs	r3, r3, #5
 8003744:	2001      	movs	r0, #1
 8003746:	fa00 f202 	lsl.w	r2, r0, r2
 800374a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800374e:	bf00      	nop
 8003750:	370c      	adds	r7, #12
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop
 800375c:	e000e100 	.word	0xe000e100

08003760 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	4603      	mov	r3, r0
 8003768:	6039      	str	r1, [r7, #0]
 800376a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800376c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003770:	2b00      	cmp	r3, #0
 8003772:	db0a      	blt.n	800378a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	b2da      	uxtb	r2, r3
 8003778:	490c      	ldr	r1, [pc, #48]	; (80037ac <__NVIC_SetPriority+0x4c>)
 800377a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800377e:	0112      	lsls	r2, r2, #4
 8003780:	b2d2      	uxtb	r2, r2
 8003782:	440b      	add	r3, r1
 8003784:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003788:	e00a      	b.n	80037a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	b2da      	uxtb	r2, r3
 800378e:	4908      	ldr	r1, [pc, #32]	; (80037b0 <__NVIC_SetPriority+0x50>)
 8003790:	79fb      	ldrb	r3, [r7, #7]
 8003792:	f003 030f 	and.w	r3, r3, #15
 8003796:	3b04      	subs	r3, #4
 8003798:	0112      	lsls	r2, r2, #4
 800379a:	b2d2      	uxtb	r2, r2
 800379c:	440b      	add	r3, r1
 800379e:	761a      	strb	r2, [r3, #24]
}
 80037a0:	bf00      	nop
 80037a2:	370c      	adds	r7, #12
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr
 80037ac:	e000e100 	.word	0xe000e100
 80037b0:	e000ed00 	.word	0xe000ed00

080037b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b089      	sub	sp, #36	; 0x24
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	60f8      	str	r0, [r7, #12]
 80037bc:	60b9      	str	r1, [r7, #8]
 80037be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f003 0307 	and.w	r3, r3, #7
 80037c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	f1c3 0307 	rsb	r3, r3, #7
 80037ce:	2b04      	cmp	r3, #4
 80037d0:	bf28      	it	cs
 80037d2:	2304      	movcs	r3, #4
 80037d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	3304      	adds	r3, #4
 80037da:	2b06      	cmp	r3, #6
 80037dc:	d902      	bls.n	80037e4 <NVIC_EncodePriority+0x30>
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	3b03      	subs	r3, #3
 80037e2:	e000      	b.n	80037e6 <NVIC_EncodePriority+0x32>
 80037e4:	2300      	movs	r3, #0
 80037e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037e8:	f04f 32ff 	mov.w	r2, #4294967295
 80037ec:	69bb      	ldr	r3, [r7, #24]
 80037ee:	fa02 f303 	lsl.w	r3, r2, r3
 80037f2:	43da      	mvns	r2, r3
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	401a      	ands	r2, r3
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037fc:	f04f 31ff 	mov.w	r1, #4294967295
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	fa01 f303 	lsl.w	r3, r1, r3
 8003806:	43d9      	mvns	r1, r3
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800380c:	4313      	orrs	r3, r2
         );
}
 800380e:	4618      	mov	r0, r3
 8003810:	3724      	adds	r7, #36	; 0x24
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr
	...

0800381c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	3b01      	subs	r3, #1
 8003828:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800382c:	d301      	bcc.n	8003832 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800382e:	2301      	movs	r3, #1
 8003830:	e00f      	b.n	8003852 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003832:	4a0a      	ldr	r2, [pc, #40]	; (800385c <SysTick_Config+0x40>)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	3b01      	subs	r3, #1
 8003838:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800383a:	210f      	movs	r1, #15
 800383c:	f04f 30ff 	mov.w	r0, #4294967295
 8003840:	f7ff ff8e 	bl	8003760 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003844:	4b05      	ldr	r3, [pc, #20]	; (800385c <SysTick_Config+0x40>)
 8003846:	2200      	movs	r2, #0
 8003848:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800384a:	4b04      	ldr	r3, [pc, #16]	; (800385c <SysTick_Config+0x40>)
 800384c:	2207      	movs	r2, #7
 800384e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003850:	2300      	movs	r3, #0
}
 8003852:	4618      	mov	r0, r3
 8003854:	3708      	adds	r7, #8
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	e000e010 	.word	0xe000e010

08003860 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f7ff ff29 	bl	80036c0 <__NVIC_SetPriorityGrouping>
}
 800386e:	bf00      	nop
 8003870:	3708      	adds	r7, #8
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}

08003876 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003876:	b580      	push	{r7, lr}
 8003878:	b086      	sub	sp, #24
 800387a:	af00      	add	r7, sp, #0
 800387c:	4603      	mov	r3, r0
 800387e:	60b9      	str	r1, [r7, #8]
 8003880:	607a      	str	r2, [r7, #4]
 8003882:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003884:	2300      	movs	r3, #0
 8003886:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003888:	f7ff ff3e 	bl	8003708 <__NVIC_GetPriorityGrouping>
 800388c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	68b9      	ldr	r1, [r7, #8]
 8003892:	6978      	ldr	r0, [r7, #20]
 8003894:	f7ff ff8e 	bl	80037b4 <NVIC_EncodePriority>
 8003898:	4602      	mov	r2, r0
 800389a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800389e:	4611      	mov	r1, r2
 80038a0:	4618      	mov	r0, r3
 80038a2:	f7ff ff5d 	bl	8003760 <__NVIC_SetPriority>
}
 80038a6:	bf00      	nop
 80038a8:	3718      	adds	r7, #24
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}

080038ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038ae:	b580      	push	{r7, lr}
 80038b0:	b082      	sub	sp, #8
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	4603      	mov	r3, r0
 80038b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038bc:	4618      	mov	r0, r3
 80038be:	f7ff ff31 	bl	8003724 <__NVIC_EnableIRQ>
}
 80038c2:	bf00      	nop
 80038c4:	3708      	adds	r7, #8
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}

080038ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80038ca:	b580      	push	{r7, lr}
 80038cc:	b082      	sub	sp, #8
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f7ff ffa2 	bl	800381c <SysTick_Config>
 80038d8:	4603      	mov	r3, r0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3708      	adds	r7, #8
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
	...

080038e4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b086      	sub	sp, #24
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80038ec:	2300      	movs	r3, #0
 80038ee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80038f0:	f7ff feb6 	bl	8003660 <HAL_GetTick>
 80038f4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d101      	bne.n	8003900 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	e099      	b.n	8003a34 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2202      	movs	r2, #2
 8003904:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f022 0201 	bic.w	r2, r2, #1
 800391e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003920:	e00f      	b.n	8003942 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003922:	f7ff fe9d 	bl	8003660 <HAL_GetTick>
 8003926:	4602      	mov	r2, r0
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	1ad3      	subs	r3, r2, r3
 800392c:	2b05      	cmp	r3, #5
 800392e:	d908      	bls.n	8003942 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2220      	movs	r2, #32
 8003934:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2203      	movs	r2, #3
 800393a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800393e:	2303      	movs	r3, #3
 8003940:	e078      	b.n	8003a34 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 0301 	and.w	r3, r3, #1
 800394c:	2b00      	cmp	r3, #0
 800394e:	d1e8      	bne.n	8003922 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003958:	697a      	ldr	r2, [r7, #20]
 800395a:	4b38      	ldr	r3, [pc, #224]	; (8003a3c <HAL_DMA_Init+0x158>)
 800395c:	4013      	ands	r3, r2
 800395e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	685a      	ldr	r2, [r3, #4]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800396e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	691b      	ldr	r3, [r3, #16]
 8003974:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800397a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	699b      	ldr	r3, [r3, #24]
 8003980:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003986:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6a1b      	ldr	r3, [r3, #32]
 800398c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800398e:	697a      	ldr	r2, [r7, #20]
 8003990:	4313      	orrs	r3, r2
 8003992:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003998:	2b04      	cmp	r3, #4
 800399a:	d107      	bne.n	80039ac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a4:	4313      	orrs	r3, r2
 80039a6:	697a      	ldr	r2, [r7, #20]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	697a      	ldr	r2, [r7, #20]
 80039b2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	695b      	ldr	r3, [r3, #20]
 80039ba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	f023 0307 	bic.w	r3, r3, #7
 80039c2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c8:	697a      	ldr	r2, [r7, #20]
 80039ca:	4313      	orrs	r3, r2
 80039cc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d2:	2b04      	cmp	r3, #4
 80039d4:	d117      	bne.n	8003a06 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039da:	697a      	ldr	r2, [r7, #20]
 80039dc:	4313      	orrs	r3, r2
 80039de:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d00e      	beq.n	8003a06 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f000 fb0f 	bl	800400c <DMA_CheckFifoParam>
 80039ee:	4603      	mov	r3, r0
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d008      	beq.n	8003a06 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2240      	movs	r2, #64	; 0x40
 80039f8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2201      	movs	r2, #1
 80039fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003a02:	2301      	movs	r3, #1
 8003a04:	e016      	b.n	8003a34 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	697a      	ldr	r2, [r7, #20]
 8003a0c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f000 fac6 	bl	8003fa0 <DMA_CalcBaseAndBitshift>
 8003a14:	4603      	mov	r3, r0
 8003a16:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a1c:	223f      	movs	r2, #63	; 0x3f
 8003a1e:	409a      	lsls	r2, r3
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2200      	movs	r2, #0
 8003a28:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003a32:	2300      	movs	r3, #0
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	3718      	adds	r7, #24
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}
 8003a3c:	f010803f 	.word	0xf010803f

08003a40 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b086      	sub	sp, #24
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	60f8      	str	r0, [r7, #12]
 8003a48:	60b9      	str	r1, [r7, #8]
 8003a4a:	607a      	str	r2, [r7, #4]
 8003a4c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a56:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d101      	bne.n	8003a66 <HAL_DMA_Start_IT+0x26>
 8003a62:	2302      	movs	r3, #2
 8003a64:	e040      	b.n	8003ae8 <HAL_DMA_Start_IT+0xa8>
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2201      	movs	r2, #1
 8003a6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d12f      	bne.n	8003ada <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2202      	movs	r2, #2
 8003a7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2200      	movs	r2, #0
 8003a86:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	68b9      	ldr	r1, [r7, #8]
 8003a8e:	68f8      	ldr	r0, [r7, #12]
 8003a90:	f000 fa58 	bl	8003f44 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a98:	223f      	movs	r2, #63	; 0x3f
 8003a9a:	409a      	lsls	r2, r3
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f042 0216 	orr.w	r2, r2, #22
 8003aae:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d007      	beq.n	8003ac8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f042 0208 	orr.w	r2, r2, #8
 8003ac6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f042 0201 	orr.w	r2, r2, #1
 8003ad6:	601a      	str	r2, [r3, #0]
 8003ad8:	e005      	b.n	8003ae6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2200      	movs	r2, #0
 8003ade:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003ae2:	2302      	movs	r3, #2
 8003ae4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003ae6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3718      	adds	r7, #24
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}

08003af0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b084      	sub	sp, #16
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003afc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003afe:	f7ff fdaf 	bl	8003660 <HAL_GetTick>
 8003b02:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	2b02      	cmp	r3, #2
 8003b0e:	d008      	beq.n	8003b22 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2280      	movs	r2, #128	; 0x80
 8003b14:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e052      	b.n	8003bc8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f022 0216 	bic.w	r2, r2, #22
 8003b30:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	695a      	ldr	r2, [r3, #20]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b40:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d103      	bne.n	8003b52 <HAL_DMA_Abort+0x62>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d007      	beq.n	8003b62 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f022 0208 	bic.w	r2, r2, #8
 8003b60:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f022 0201 	bic.w	r2, r2, #1
 8003b70:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b72:	e013      	b.n	8003b9c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b74:	f7ff fd74 	bl	8003660 <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	2b05      	cmp	r3, #5
 8003b80:	d90c      	bls.n	8003b9c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2220      	movs	r2, #32
 8003b86:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2203      	movs	r2, #3
 8003b8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003b98:	2303      	movs	r3, #3
 8003b9a:	e015      	b.n	8003bc8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0301 	and.w	r3, r3, #1
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d1e4      	bne.n	8003b74 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bae:	223f      	movs	r2, #63	; 0x3f
 8003bb0:	409a      	lsls	r2, r3
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2201      	movs	r2, #1
 8003bba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003bc6:	2300      	movs	r3, #0
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3710      	adds	r7, #16
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}

08003bd0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b083      	sub	sp, #12
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	2b02      	cmp	r3, #2
 8003be2:	d004      	beq.n	8003bee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2280      	movs	r2, #128	; 0x80
 8003be8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e00c      	b.n	8003c08 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2205      	movs	r2, #5
 8003bf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f022 0201 	bic.w	r2, r2, #1
 8003c04:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003c06:	2300      	movs	r3, #0
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	370c      	adds	r7, #12
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr

08003c14 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b086      	sub	sp, #24
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003c20:	4b8e      	ldr	r3, [pc, #568]	; (8003e5c <HAL_DMA_IRQHandler+0x248>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a8e      	ldr	r2, [pc, #568]	; (8003e60 <HAL_DMA_IRQHandler+0x24c>)
 8003c26:	fba2 2303 	umull	r2, r3, r2, r3
 8003c2a:	0a9b      	lsrs	r3, r3, #10
 8003c2c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c32:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c3e:	2208      	movs	r2, #8
 8003c40:	409a      	lsls	r2, r3
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	4013      	ands	r3, r2
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d01a      	beq.n	8003c80 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0304 	and.w	r3, r3, #4
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d013      	beq.n	8003c80 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f022 0204 	bic.w	r2, r2, #4
 8003c66:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c6c:	2208      	movs	r2, #8
 8003c6e:	409a      	lsls	r2, r3
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c78:	f043 0201 	orr.w	r2, r3, #1
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c84:	2201      	movs	r2, #1
 8003c86:	409a      	lsls	r2, r3
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d012      	beq.n	8003cb6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	695b      	ldr	r3, [r3, #20]
 8003c96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d00b      	beq.n	8003cb6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	409a      	lsls	r2, r3
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cae:	f043 0202 	orr.w	r2, r3, #2
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cba:	2204      	movs	r2, #4
 8003cbc:	409a      	lsls	r2, r3
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d012      	beq.n	8003cec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 0302 	and.w	r3, r3, #2
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d00b      	beq.n	8003cec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cd8:	2204      	movs	r2, #4
 8003cda:	409a      	lsls	r2, r3
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ce4:	f043 0204 	orr.w	r2, r3, #4
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cf0:	2210      	movs	r2, #16
 8003cf2:	409a      	lsls	r2, r3
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d043      	beq.n	8003d84 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0308 	and.w	r3, r3, #8
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d03c      	beq.n	8003d84 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d0e:	2210      	movs	r2, #16
 8003d10:	409a      	lsls	r2, r3
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d018      	beq.n	8003d56 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d108      	bne.n	8003d44 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d024      	beq.n	8003d84 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	4798      	blx	r3
 8003d42:	e01f      	b.n	8003d84 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d01b      	beq.n	8003d84 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	4798      	blx	r3
 8003d54:	e016      	b.n	8003d84 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d107      	bne.n	8003d74 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f022 0208 	bic.w	r2, r2, #8
 8003d72:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d003      	beq.n	8003d84 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d88:	2220      	movs	r2, #32
 8003d8a:	409a      	lsls	r2, r3
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	4013      	ands	r3, r2
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	f000 808f 	beq.w	8003eb4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 0310 	and.w	r3, r3, #16
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	f000 8087 	beq.w	8003eb4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003daa:	2220      	movs	r2, #32
 8003dac:	409a      	lsls	r2, r3
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	2b05      	cmp	r3, #5
 8003dbc:	d136      	bne.n	8003e2c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f022 0216 	bic.w	r2, r2, #22
 8003dcc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	695a      	ldr	r2, [r3, #20]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ddc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d103      	bne.n	8003dee <HAL_DMA_IRQHandler+0x1da>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d007      	beq.n	8003dfe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f022 0208 	bic.w	r2, r2, #8
 8003dfc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e02:	223f      	movs	r2, #63	; 0x3f
 8003e04:	409a      	lsls	r2, r3
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d07e      	beq.n	8003f20 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	4798      	blx	r3
        }
        return;
 8003e2a:	e079      	b.n	8003f20 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d01d      	beq.n	8003e76 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d10d      	bne.n	8003e64 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d031      	beq.n	8003eb4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	4798      	blx	r3
 8003e58:	e02c      	b.n	8003eb4 <HAL_DMA_IRQHandler+0x2a0>
 8003e5a:	bf00      	nop
 8003e5c:	2000000c 	.word	0x2000000c
 8003e60:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d023      	beq.n	8003eb4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	4798      	blx	r3
 8003e74:	e01e      	b.n	8003eb4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d10f      	bne.n	8003ea4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f022 0210 	bic.w	r2, r2, #16
 8003e92:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2201      	movs	r2, #1
 8003e98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d003      	beq.n	8003eb4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d032      	beq.n	8003f22 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ec0:	f003 0301 	and.w	r3, r3, #1
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d022      	beq.n	8003f0e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2205      	movs	r2, #5
 8003ecc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f022 0201 	bic.w	r2, r2, #1
 8003ede:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	3301      	adds	r3, #1
 8003ee4:	60bb      	str	r3, [r7, #8]
 8003ee6:	697a      	ldr	r2, [r7, #20]
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d307      	bcc.n	8003efc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 0301 	and.w	r3, r3, #1
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d1f2      	bne.n	8003ee0 <HAL_DMA_IRQHandler+0x2cc>
 8003efa:	e000      	b.n	8003efe <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003efc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2201      	movs	r2, #1
 8003f02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d005      	beq.n	8003f22 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	4798      	blx	r3
 8003f1e:	e000      	b.n	8003f22 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003f20:	bf00      	nop
    }
  }
}
 8003f22:	3718      	adds	r7, #24
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}

08003f28 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b083      	sub	sp, #12
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f36:	b2db      	uxtb	r3, r3
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	370c      	adds	r7, #12
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b085      	sub	sp, #20
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	60f8      	str	r0, [r7, #12]
 8003f4c:	60b9      	str	r1, [r7, #8]
 8003f4e:	607a      	str	r2, [r7, #4]
 8003f50:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003f60:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	683a      	ldr	r2, [r7, #0]
 8003f68:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	2b40      	cmp	r3, #64	; 0x40
 8003f70:	d108      	bne.n	8003f84 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	687a      	ldr	r2, [r7, #4]
 8003f78:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	68ba      	ldr	r2, [r7, #8]
 8003f80:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003f82:	e007      	b.n	8003f94 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	68ba      	ldr	r2, [r7, #8]
 8003f8a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	60da      	str	r2, [r3, #12]
}
 8003f94:	bf00      	nop
 8003f96:	3714      	adds	r7, #20
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr

08003fa0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b085      	sub	sp, #20
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	3b10      	subs	r3, #16
 8003fb0:	4a14      	ldr	r2, [pc, #80]	; (8004004 <DMA_CalcBaseAndBitshift+0x64>)
 8003fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fb6:	091b      	lsrs	r3, r3, #4
 8003fb8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003fba:	4a13      	ldr	r2, [pc, #76]	; (8004008 <DMA_CalcBaseAndBitshift+0x68>)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	4413      	add	r3, r2
 8003fc0:	781b      	ldrb	r3, [r3, #0]
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2b03      	cmp	r3, #3
 8003fcc:	d909      	bls.n	8003fe2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003fd6:	f023 0303 	bic.w	r3, r3, #3
 8003fda:	1d1a      	adds	r2, r3, #4
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	659a      	str	r2, [r3, #88]	; 0x58
 8003fe0:	e007      	b.n	8003ff2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003fea:	f023 0303 	bic.w	r3, r3, #3
 8003fee:	687a      	ldr	r2, [r7, #4]
 8003ff0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3714      	adds	r7, #20
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr
 8004002:	bf00      	nop
 8004004:	aaaaaaab 	.word	0xaaaaaaab
 8004008:	0800d824 	.word	0x0800d824

0800400c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800400c:	b480      	push	{r7}
 800400e:	b085      	sub	sp, #20
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004014:	2300      	movs	r3, #0
 8004016:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800401c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	699b      	ldr	r3, [r3, #24]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d11f      	bne.n	8004066 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	2b03      	cmp	r3, #3
 800402a:	d856      	bhi.n	80040da <DMA_CheckFifoParam+0xce>
 800402c:	a201      	add	r2, pc, #4	; (adr r2, 8004034 <DMA_CheckFifoParam+0x28>)
 800402e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004032:	bf00      	nop
 8004034:	08004045 	.word	0x08004045
 8004038:	08004057 	.word	0x08004057
 800403c:	08004045 	.word	0x08004045
 8004040:	080040db 	.word	0x080040db
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004048:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800404c:	2b00      	cmp	r3, #0
 800404e:	d046      	beq.n	80040de <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004054:	e043      	b.n	80040de <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800405a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800405e:	d140      	bne.n	80040e2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004064:	e03d      	b.n	80040e2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	699b      	ldr	r3, [r3, #24]
 800406a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800406e:	d121      	bne.n	80040b4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	2b03      	cmp	r3, #3
 8004074:	d837      	bhi.n	80040e6 <DMA_CheckFifoParam+0xda>
 8004076:	a201      	add	r2, pc, #4	; (adr r2, 800407c <DMA_CheckFifoParam+0x70>)
 8004078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800407c:	0800408d 	.word	0x0800408d
 8004080:	08004093 	.word	0x08004093
 8004084:	0800408d 	.word	0x0800408d
 8004088:	080040a5 	.word	0x080040a5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	73fb      	strb	r3, [r7, #15]
      break;
 8004090:	e030      	b.n	80040f4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004096:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d025      	beq.n	80040ea <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040a2:	e022      	b.n	80040ea <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80040ac:	d11f      	bne.n	80040ee <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80040b2:	e01c      	b.n	80040ee <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	2b02      	cmp	r3, #2
 80040b8:	d903      	bls.n	80040c2 <DMA_CheckFifoParam+0xb6>
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	2b03      	cmp	r3, #3
 80040be:	d003      	beq.n	80040c8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80040c0:	e018      	b.n	80040f4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	73fb      	strb	r3, [r7, #15]
      break;
 80040c6:	e015      	b.n	80040f4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d00e      	beq.n	80040f2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	73fb      	strb	r3, [r7, #15]
      break;
 80040d8:	e00b      	b.n	80040f2 <DMA_CheckFifoParam+0xe6>
      break;
 80040da:	bf00      	nop
 80040dc:	e00a      	b.n	80040f4 <DMA_CheckFifoParam+0xe8>
      break;
 80040de:	bf00      	nop
 80040e0:	e008      	b.n	80040f4 <DMA_CheckFifoParam+0xe8>
      break;
 80040e2:	bf00      	nop
 80040e4:	e006      	b.n	80040f4 <DMA_CheckFifoParam+0xe8>
      break;
 80040e6:	bf00      	nop
 80040e8:	e004      	b.n	80040f4 <DMA_CheckFifoParam+0xe8>
      break;
 80040ea:	bf00      	nop
 80040ec:	e002      	b.n	80040f4 <DMA_CheckFifoParam+0xe8>
      break;   
 80040ee:	bf00      	nop
 80040f0:	e000      	b.n	80040f4 <DMA_CheckFifoParam+0xe8>
      break;
 80040f2:	bf00      	nop
    }
  } 
  
  return status; 
 80040f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3714      	adds	r7, #20
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr
 8004102:	bf00      	nop

08004104 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004104:	b480      	push	{r7}
 8004106:	b089      	sub	sp, #36	; 0x24
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800410e:	2300      	movs	r3, #0
 8004110:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004112:	2300      	movs	r3, #0
 8004114:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004116:	2300      	movs	r3, #0
 8004118:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800411a:	2300      	movs	r3, #0
 800411c:	61fb      	str	r3, [r7, #28]
 800411e:	e159      	b.n	80043d4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004120:	2201      	movs	r2, #1
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	fa02 f303 	lsl.w	r3, r2, r3
 8004128:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	697a      	ldr	r2, [r7, #20]
 8004130:	4013      	ands	r3, r2
 8004132:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004134:	693a      	ldr	r2, [r7, #16]
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	429a      	cmp	r2, r3
 800413a:	f040 8148 	bne.w	80043ce <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	f003 0303 	and.w	r3, r3, #3
 8004146:	2b01      	cmp	r3, #1
 8004148:	d005      	beq.n	8004156 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004152:	2b02      	cmp	r3, #2
 8004154:	d130      	bne.n	80041b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800415c:	69fb      	ldr	r3, [r7, #28]
 800415e:	005b      	lsls	r3, r3, #1
 8004160:	2203      	movs	r2, #3
 8004162:	fa02 f303 	lsl.w	r3, r2, r3
 8004166:	43db      	mvns	r3, r3
 8004168:	69ba      	ldr	r2, [r7, #24]
 800416a:	4013      	ands	r3, r2
 800416c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	68da      	ldr	r2, [r3, #12]
 8004172:	69fb      	ldr	r3, [r7, #28]
 8004174:	005b      	lsls	r3, r3, #1
 8004176:	fa02 f303 	lsl.w	r3, r2, r3
 800417a:	69ba      	ldr	r2, [r7, #24]
 800417c:	4313      	orrs	r3, r2
 800417e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	69ba      	ldr	r2, [r7, #24]
 8004184:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800418c:	2201      	movs	r2, #1
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	fa02 f303 	lsl.w	r3, r2, r3
 8004194:	43db      	mvns	r3, r3
 8004196:	69ba      	ldr	r2, [r7, #24]
 8004198:	4013      	ands	r3, r2
 800419a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	091b      	lsrs	r3, r3, #4
 80041a2:	f003 0201 	and.w	r2, r3, #1
 80041a6:	69fb      	ldr	r3, [r7, #28]
 80041a8:	fa02 f303 	lsl.w	r3, r2, r3
 80041ac:	69ba      	ldr	r2, [r7, #24]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	69ba      	ldr	r2, [r7, #24]
 80041b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	f003 0303 	and.w	r3, r3, #3
 80041c0:	2b03      	cmp	r3, #3
 80041c2:	d017      	beq.n	80041f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	68db      	ldr	r3, [r3, #12]
 80041c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80041ca:	69fb      	ldr	r3, [r7, #28]
 80041cc:	005b      	lsls	r3, r3, #1
 80041ce:	2203      	movs	r2, #3
 80041d0:	fa02 f303 	lsl.w	r3, r2, r3
 80041d4:	43db      	mvns	r3, r3
 80041d6:	69ba      	ldr	r2, [r7, #24]
 80041d8:	4013      	ands	r3, r2
 80041da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	689a      	ldr	r2, [r3, #8]
 80041e0:	69fb      	ldr	r3, [r7, #28]
 80041e2:	005b      	lsls	r3, r3, #1
 80041e4:	fa02 f303 	lsl.w	r3, r2, r3
 80041e8:	69ba      	ldr	r2, [r7, #24]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	69ba      	ldr	r2, [r7, #24]
 80041f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	f003 0303 	and.w	r3, r3, #3
 80041fc:	2b02      	cmp	r3, #2
 80041fe:	d123      	bne.n	8004248 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004200:	69fb      	ldr	r3, [r7, #28]
 8004202:	08da      	lsrs	r2, r3, #3
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	3208      	adds	r2, #8
 8004208:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800420c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800420e:	69fb      	ldr	r3, [r7, #28]
 8004210:	f003 0307 	and.w	r3, r3, #7
 8004214:	009b      	lsls	r3, r3, #2
 8004216:	220f      	movs	r2, #15
 8004218:	fa02 f303 	lsl.w	r3, r2, r3
 800421c:	43db      	mvns	r3, r3
 800421e:	69ba      	ldr	r2, [r7, #24]
 8004220:	4013      	ands	r3, r2
 8004222:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	691a      	ldr	r2, [r3, #16]
 8004228:	69fb      	ldr	r3, [r7, #28]
 800422a:	f003 0307 	and.w	r3, r3, #7
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	fa02 f303 	lsl.w	r3, r2, r3
 8004234:	69ba      	ldr	r2, [r7, #24]
 8004236:	4313      	orrs	r3, r2
 8004238:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800423a:	69fb      	ldr	r3, [r7, #28]
 800423c:	08da      	lsrs	r2, r3, #3
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	3208      	adds	r2, #8
 8004242:	69b9      	ldr	r1, [r7, #24]
 8004244:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800424e:	69fb      	ldr	r3, [r7, #28]
 8004250:	005b      	lsls	r3, r3, #1
 8004252:	2203      	movs	r2, #3
 8004254:	fa02 f303 	lsl.w	r3, r2, r3
 8004258:	43db      	mvns	r3, r3
 800425a:	69ba      	ldr	r2, [r7, #24]
 800425c:	4013      	ands	r3, r2
 800425e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	f003 0203 	and.w	r2, r3, #3
 8004268:	69fb      	ldr	r3, [r7, #28]
 800426a:	005b      	lsls	r3, r3, #1
 800426c:	fa02 f303 	lsl.w	r3, r2, r3
 8004270:	69ba      	ldr	r2, [r7, #24]
 8004272:	4313      	orrs	r3, r2
 8004274:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	69ba      	ldr	r2, [r7, #24]
 800427a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004284:	2b00      	cmp	r3, #0
 8004286:	f000 80a2 	beq.w	80043ce <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800428a:	2300      	movs	r3, #0
 800428c:	60fb      	str	r3, [r7, #12]
 800428e:	4b57      	ldr	r3, [pc, #348]	; (80043ec <HAL_GPIO_Init+0x2e8>)
 8004290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004292:	4a56      	ldr	r2, [pc, #344]	; (80043ec <HAL_GPIO_Init+0x2e8>)
 8004294:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004298:	6453      	str	r3, [r2, #68]	; 0x44
 800429a:	4b54      	ldr	r3, [pc, #336]	; (80043ec <HAL_GPIO_Init+0x2e8>)
 800429c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800429e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042a2:	60fb      	str	r3, [r7, #12]
 80042a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80042a6:	4a52      	ldr	r2, [pc, #328]	; (80043f0 <HAL_GPIO_Init+0x2ec>)
 80042a8:	69fb      	ldr	r3, [r7, #28]
 80042aa:	089b      	lsrs	r3, r3, #2
 80042ac:	3302      	adds	r3, #2
 80042ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80042b4:	69fb      	ldr	r3, [r7, #28]
 80042b6:	f003 0303 	and.w	r3, r3, #3
 80042ba:	009b      	lsls	r3, r3, #2
 80042bc:	220f      	movs	r2, #15
 80042be:	fa02 f303 	lsl.w	r3, r2, r3
 80042c2:	43db      	mvns	r3, r3
 80042c4:	69ba      	ldr	r2, [r7, #24]
 80042c6:	4013      	ands	r3, r2
 80042c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	4a49      	ldr	r2, [pc, #292]	; (80043f4 <HAL_GPIO_Init+0x2f0>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d019      	beq.n	8004306 <HAL_GPIO_Init+0x202>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	4a48      	ldr	r2, [pc, #288]	; (80043f8 <HAL_GPIO_Init+0x2f4>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d013      	beq.n	8004302 <HAL_GPIO_Init+0x1fe>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	4a47      	ldr	r2, [pc, #284]	; (80043fc <HAL_GPIO_Init+0x2f8>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d00d      	beq.n	80042fe <HAL_GPIO_Init+0x1fa>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	4a46      	ldr	r2, [pc, #280]	; (8004400 <HAL_GPIO_Init+0x2fc>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d007      	beq.n	80042fa <HAL_GPIO_Init+0x1f6>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	4a45      	ldr	r2, [pc, #276]	; (8004404 <HAL_GPIO_Init+0x300>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d101      	bne.n	80042f6 <HAL_GPIO_Init+0x1f2>
 80042f2:	2304      	movs	r3, #4
 80042f4:	e008      	b.n	8004308 <HAL_GPIO_Init+0x204>
 80042f6:	2307      	movs	r3, #7
 80042f8:	e006      	b.n	8004308 <HAL_GPIO_Init+0x204>
 80042fa:	2303      	movs	r3, #3
 80042fc:	e004      	b.n	8004308 <HAL_GPIO_Init+0x204>
 80042fe:	2302      	movs	r3, #2
 8004300:	e002      	b.n	8004308 <HAL_GPIO_Init+0x204>
 8004302:	2301      	movs	r3, #1
 8004304:	e000      	b.n	8004308 <HAL_GPIO_Init+0x204>
 8004306:	2300      	movs	r3, #0
 8004308:	69fa      	ldr	r2, [r7, #28]
 800430a:	f002 0203 	and.w	r2, r2, #3
 800430e:	0092      	lsls	r2, r2, #2
 8004310:	4093      	lsls	r3, r2
 8004312:	69ba      	ldr	r2, [r7, #24]
 8004314:	4313      	orrs	r3, r2
 8004316:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004318:	4935      	ldr	r1, [pc, #212]	; (80043f0 <HAL_GPIO_Init+0x2ec>)
 800431a:	69fb      	ldr	r3, [r7, #28]
 800431c:	089b      	lsrs	r3, r3, #2
 800431e:	3302      	adds	r3, #2
 8004320:	69ba      	ldr	r2, [r7, #24]
 8004322:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004326:	4b38      	ldr	r3, [pc, #224]	; (8004408 <HAL_GPIO_Init+0x304>)
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	43db      	mvns	r3, r3
 8004330:	69ba      	ldr	r2, [r7, #24]
 8004332:	4013      	ands	r3, r2
 8004334:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800433e:	2b00      	cmp	r3, #0
 8004340:	d003      	beq.n	800434a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004342:	69ba      	ldr	r2, [r7, #24]
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	4313      	orrs	r3, r2
 8004348:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800434a:	4a2f      	ldr	r2, [pc, #188]	; (8004408 <HAL_GPIO_Init+0x304>)
 800434c:	69bb      	ldr	r3, [r7, #24]
 800434e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004350:	4b2d      	ldr	r3, [pc, #180]	; (8004408 <HAL_GPIO_Init+0x304>)
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	43db      	mvns	r3, r3
 800435a:	69ba      	ldr	r2, [r7, #24]
 800435c:	4013      	ands	r3, r2
 800435e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004368:	2b00      	cmp	r3, #0
 800436a:	d003      	beq.n	8004374 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800436c:	69ba      	ldr	r2, [r7, #24]
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	4313      	orrs	r3, r2
 8004372:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004374:	4a24      	ldr	r2, [pc, #144]	; (8004408 <HAL_GPIO_Init+0x304>)
 8004376:	69bb      	ldr	r3, [r7, #24]
 8004378:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800437a:	4b23      	ldr	r3, [pc, #140]	; (8004408 <HAL_GPIO_Init+0x304>)
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	43db      	mvns	r3, r3
 8004384:	69ba      	ldr	r2, [r7, #24]
 8004386:	4013      	ands	r3, r2
 8004388:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004392:	2b00      	cmp	r3, #0
 8004394:	d003      	beq.n	800439e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004396:	69ba      	ldr	r2, [r7, #24]
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	4313      	orrs	r3, r2
 800439c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800439e:	4a1a      	ldr	r2, [pc, #104]	; (8004408 <HAL_GPIO_Init+0x304>)
 80043a0:	69bb      	ldr	r3, [r7, #24]
 80043a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80043a4:	4b18      	ldr	r3, [pc, #96]	; (8004408 <HAL_GPIO_Init+0x304>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	43db      	mvns	r3, r3
 80043ae:	69ba      	ldr	r2, [r7, #24]
 80043b0:	4013      	ands	r3, r2
 80043b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d003      	beq.n	80043c8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80043c0:	69ba      	ldr	r2, [r7, #24]
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	4313      	orrs	r3, r2
 80043c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80043c8:	4a0f      	ldr	r2, [pc, #60]	; (8004408 <HAL_GPIO_Init+0x304>)
 80043ca:	69bb      	ldr	r3, [r7, #24]
 80043cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80043ce:	69fb      	ldr	r3, [r7, #28]
 80043d0:	3301      	adds	r3, #1
 80043d2:	61fb      	str	r3, [r7, #28]
 80043d4:	69fb      	ldr	r3, [r7, #28]
 80043d6:	2b0f      	cmp	r3, #15
 80043d8:	f67f aea2 	bls.w	8004120 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80043dc:	bf00      	nop
 80043de:	bf00      	nop
 80043e0:	3724      	adds	r7, #36	; 0x24
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr
 80043ea:	bf00      	nop
 80043ec:	40023800 	.word	0x40023800
 80043f0:	40013800 	.word	0x40013800
 80043f4:	40020000 	.word	0x40020000
 80043f8:	40020400 	.word	0x40020400
 80043fc:	40020800 	.word	0x40020800
 8004400:	40020c00 	.word	0x40020c00
 8004404:	40021000 	.word	0x40021000
 8004408:	40013c00 	.word	0x40013c00

0800440c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800440c:	b480      	push	{r7}
 800440e:	b083      	sub	sp, #12
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
 8004414:	460b      	mov	r3, r1
 8004416:	807b      	strh	r3, [r7, #2]
 8004418:	4613      	mov	r3, r2
 800441a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800441c:	787b      	ldrb	r3, [r7, #1]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d003      	beq.n	800442a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004422:	887a      	ldrh	r2, [r7, #2]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004428:	e003      	b.n	8004432 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800442a:	887b      	ldrh	r3, [r7, #2]
 800442c:	041a      	lsls	r2, r3, #16
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	619a      	str	r2, [r3, #24]
}
 8004432:	bf00      	nop
 8004434:	370c      	adds	r7, #12
 8004436:	46bd      	mov	sp, r7
 8004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443c:	4770      	bx	lr

0800443e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800443e:	b480      	push	{r7}
 8004440:	b085      	sub	sp, #20
 8004442:	af00      	add	r7, sp, #0
 8004444:	6078      	str	r0, [r7, #4]
 8004446:	460b      	mov	r3, r1
 8004448:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	695b      	ldr	r3, [r3, #20]
 800444e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004450:	887a      	ldrh	r2, [r7, #2]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	4013      	ands	r3, r2
 8004456:	041a      	lsls	r2, r3, #16
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	43d9      	mvns	r1, r3
 800445c:	887b      	ldrh	r3, [r7, #2]
 800445e:	400b      	ands	r3, r1
 8004460:	431a      	orrs	r2, r3
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	619a      	str	r2, [r3, #24]
}
 8004466:	bf00      	nop
 8004468:	3714      	adds	r7, #20
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr
	...

08004474 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b082      	sub	sp, #8
 8004478:	af00      	add	r7, sp, #0
 800447a:	4603      	mov	r3, r0
 800447c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800447e:	4b08      	ldr	r3, [pc, #32]	; (80044a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004480:	695a      	ldr	r2, [r3, #20]
 8004482:	88fb      	ldrh	r3, [r7, #6]
 8004484:	4013      	ands	r3, r2
 8004486:	2b00      	cmp	r3, #0
 8004488:	d006      	beq.n	8004498 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800448a:	4a05      	ldr	r2, [pc, #20]	; (80044a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800448c:	88fb      	ldrh	r3, [r7, #6]
 800448e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004490:	88fb      	ldrh	r3, [r7, #6]
 8004492:	4618      	mov	r0, r3
 8004494:	f7fd fed4 	bl	8002240 <HAL_GPIO_EXTI_Callback>
  }
}
 8004498:	bf00      	nop
 800449a:	3708      	adds	r7, #8
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	40013c00 	.word	0x40013c00

080044a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d101      	bne.n	80044b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e12b      	b.n	800470e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d106      	bne.n	80044d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2200      	movs	r2, #0
 80044c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f7fd ff2a 	bl	8002324 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2224      	movs	r2, #36	; 0x24
 80044d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f022 0201 	bic.w	r2, r2, #1
 80044e6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80044f6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004506:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004508:	f003 f8d6 	bl	80076b8 <HAL_RCC_GetPCLK1Freq>
 800450c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	4a81      	ldr	r2, [pc, #516]	; (8004718 <HAL_I2C_Init+0x274>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d807      	bhi.n	8004528 <HAL_I2C_Init+0x84>
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	4a80      	ldr	r2, [pc, #512]	; (800471c <HAL_I2C_Init+0x278>)
 800451c:	4293      	cmp	r3, r2
 800451e:	bf94      	ite	ls
 8004520:	2301      	movls	r3, #1
 8004522:	2300      	movhi	r3, #0
 8004524:	b2db      	uxtb	r3, r3
 8004526:	e006      	b.n	8004536 <HAL_I2C_Init+0x92>
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	4a7d      	ldr	r2, [pc, #500]	; (8004720 <HAL_I2C_Init+0x27c>)
 800452c:	4293      	cmp	r3, r2
 800452e:	bf94      	ite	ls
 8004530:	2301      	movls	r3, #1
 8004532:	2300      	movhi	r3, #0
 8004534:	b2db      	uxtb	r3, r3
 8004536:	2b00      	cmp	r3, #0
 8004538:	d001      	beq.n	800453e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e0e7      	b.n	800470e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	4a78      	ldr	r2, [pc, #480]	; (8004724 <HAL_I2C_Init+0x280>)
 8004542:	fba2 2303 	umull	r2, r3, r2, r3
 8004546:	0c9b      	lsrs	r3, r3, #18
 8004548:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	68ba      	ldr	r2, [r7, #8]
 800455a:	430a      	orrs	r2, r1
 800455c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	6a1b      	ldr	r3, [r3, #32]
 8004564:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	4a6a      	ldr	r2, [pc, #424]	; (8004718 <HAL_I2C_Init+0x274>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d802      	bhi.n	8004578 <HAL_I2C_Init+0xd4>
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	3301      	adds	r3, #1
 8004576:	e009      	b.n	800458c <HAL_I2C_Init+0xe8>
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800457e:	fb02 f303 	mul.w	r3, r2, r3
 8004582:	4a69      	ldr	r2, [pc, #420]	; (8004728 <HAL_I2C_Init+0x284>)
 8004584:	fba2 2303 	umull	r2, r3, r2, r3
 8004588:	099b      	lsrs	r3, r3, #6
 800458a:	3301      	adds	r3, #1
 800458c:	687a      	ldr	r2, [r7, #4]
 800458e:	6812      	ldr	r2, [r2, #0]
 8004590:	430b      	orrs	r3, r1
 8004592:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	69db      	ldr	r3, [r3, #28]
 800459a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800459e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	495c      	ldr	r1, [pc, #368]	; (8004718 <HAL_I2C_Init+0x274>)
 80045a8:	428b      	cmp	r3, r1
 80045aa:	d819      	bhi.n	80045e0 <HAL_I2C_Init+0x13c>
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	1e59      	subs	r1, r3, #1
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	005b      	lsls	r3, r3, #1
 80045b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80045ba:	1c59      	adds	r1, r3, #1
 80045bc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80045c0:	400b      	ands	r3, r1
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d00a      	beq.n	80045dc <HAL_I2C_Init+0x138>
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	1e59      	subs	r1, r3, #1
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	005b      	lsls	r3, r3, #1
 80045d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80045d4:	3301      	adds	r3, #1
 80045d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045da:	e051      	b.n	8004680 <HAL_I2C_Init+0x1dc>
 80045dc:	2304      	movs	r3, #4
 80045de:	e04f      	b.n	8004680 <HAL_I2C_Init+0x1dc>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d111      	bne.n	800460c <HAL_I2C_Init+0x168>
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	1e58      	subs	r0, r3, #1
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6859      	ldr	r1, [r3, #4]
 80045f0:	460b      	mov	r3, r1
 80045f2:	005b      	lsls	r3, r3, #1
 80045f4:	440b      	add	r3, r1
 80045f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80045fa:	3301      	adds	r3, #1
 80045fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004600:	2b00      	cmp	r3, #0
 8004602:	bf0c      	ite	eq
 8004604:	2301      	moveq	r3, #1
 8004606:	2300      	movne	r3, #0
 8004608:	b2db      	uxtb	r3, r3
 800460a:	e012      	b.n	8004632 <HAL_I2C_Init+0x18e>
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	1e58      	subs	r0, r3, #1
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6859      	ldr	r1, [r3, #4]
 8004614:	460b      	mov	r3, r1
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	440b      	add	r3, r1
 800461a:	0099      	lsls	r1, r3, #2
 800461c:	440b      	add	r3, r1
 800461e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004622:	3301      	adds	r3, #1
 8004624:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004628:	2b00      	cmp	r3, #0
 800462a:	bf0c      	ite	eq
 800462c:	2301      	moveq	r3, #1
 800462e:	2300      	movne	r3, #0
 8004630:	b2db      	uxtb	r3, r3
 8004632:	2b00      	cmp	r3, #0
 8004634:	d001      	beq.n	800463a <HAL_I2C_Init+0x196>
 8004636:	2301      	movs	r3, #1
 8004638:	e022      	b.n	8004680 <HAL_I2C_Init+0x1dc>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d10e      	bne.n	8004660 <HAL_I2C_Init+0x1bc>
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	1e58      	subs	r0, r3, #1
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6859      	ldr	r1, [r3, #4]
 800464a:	460b      	mov	r3, r1
 800464c:	005b      	lsls	r3, r3, #1
 800464e:	440b      	add	r3, r1
 8004650:	fbb0 f3f3 	udiv	r3, r0, r3
 8004654:	3301      	adds	r3, #1
 8004656:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800465a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800465e:	e00f      	b.n	8004680 <HAL_I2C_Init+0x1dc>
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	1e58      	subs	r0, r3, #1
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6859      	ldr	r1, [r3, #4]
 8004668:	460b      	mov	r3, r1
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	440b      	add	r3, r1
 800466e:	0099      	lsls	r1, r3, #2
 8004670:	440b      	add	r3, r1
 8004672:	fbb0 f3f3 	udiv	r3, r0, r3
 8004676:	3301      	adds	r3, #1
 8004678:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800467c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004680:	6879      	ldr	r1, [r7, #4]
 8004682:	6809      	ldr	r1, [r1, #0]
 8004684:	4313      	orrs	r3, r2
 8004686:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	69da      	ldr	r2, [r3, #28]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6a1b      	ldr	r3, [r3, #32]
 800469a:	431a      	orrs	r2, r3
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	430a      	orrs	r2, r1
 80046a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80046ae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	6911      	ldr	r1, [r2, #16]
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	68d2      	ldr	r2, [r2, #12]
 80046ba:	4311      	orrs	r1, r2
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	6812      	ldr	r2, [r2, #0]
 80046c0:	430b      	orrs	r3, r1
 80046c2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	695a      	ldr	r2, [r3, #20]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	699b      	ldr	r3, [r3, #24]
 80046d6:	431a      	orrs	r2, r3
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	430a      	orrs	r2, r1
 80046de:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f042 0201 	orr.w	r2, r2, #1
 80046ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2220      	movs	r2, #32
 80046fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2200      	movs	r2, #0
 8004708:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800470c:	2300      	movs	r3, #0
}
 800470e:	4618      	mov	r0, r3
 8004710:	3710      	adds	r7, #16
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop
 8004718:	000186a0 	.word	0x000186a0
 800471c:	001e847f 	.word	0x001e847f
 8004720:	003d08ff 	.word	0x003d08ff
 8004724:	431bde83 	.word	0x431bde83
 8004728:	10624dd3 	.word	0x10624dd3

0800472c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b088      	sub	sp, #32
 8004730:	af02      	add	r7, sp, #8
 8004732:	60f8      	str	r0, [r7, #12]
 8004734:	4608      	mov	r0, r1
 8004736:	4611      	mov	r1, r2
 8004738:	461a      	mov	r2, r3
 800473a:	4603      	mov	r3, r0
 800473c:	817b      	strh	r3, [r7, #10]
 800473e:	460b      	mov	r3, r1
 8004740:	813b      	strh	r3, [r7, #8]
 8004742:	4613      	mov	r3, r2
 8004744:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004746:	f7fe ff8b 	bl	8003660 <HAL_GetTick>
 800474a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004752:	b2db      	uxtb	r3, r3
 8004754:	2b20      	cmp	r3, #32
 8004756:	f040 80d9 	bne.w	800490c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	9300      	str	r3, [sp, #0]
 800475e:	2319      	movs	r3, #25
 8004760:	2201      	movs	r2, #1
 8004762:	496d      	ldr	r1, [pc, #436]	; (8004918 <HAL_I2C_Mem_Write+0x1ec>)
 8004764:	68f8      	ldr	r0, [r7, #12]
 8004766:	f002 f90d 	bl	8006984 <I2C_WaitOnFlagUntilTimeout>
 800476a:	4603      	mov	r3, r0
 800476c:	2b00      	cmp	r3, #0
 800476e:	d001      	beq.n	8004774 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004770:	2302      	movs	r3, #2
 8004772:	e0cc      	b.n	800490e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800477a:	2b01      	cmp	r3, #1
 800477c:	d101      	bne.n	8004782 <HAL_I2C_Mem_Write+0x56>
 800477e:	2302      	movs	r3, #2
 8004780:	e0c5      	b.n	800490e <HAL_I2C_Mem_Write+0x1e2>
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2201      	movs	r2, #1
 8004786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 0301 	and.w	r3, r3, #1
 8004794:	2b01      	cmp	r3, #1
 8004796:	d007      	beq.n	80047a8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f042 0201 	orr.w	r2, r2, #1
 80047a6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047b6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2221      	movs	r2, #33	; 0x21
 80047bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2240      	movs	r2, #64	; 0x40
 80047c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2200      	movs	r2, #0
 80047cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	6a3a      	ldr	r2, [r7, #32]
 80047d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80047d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047de:	b29a      	uxth	r2, r3
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	4a4d      	ldr	r2, [pc, #308]	; (800491c <HAL_I2C_Mem_Write+0x1f0>)
 80047e8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80047ea:	88f8      	ldrh	r0, [r7, #6]
 80047ec:	893a      	ldrh	r2, [r7, #8]
 80047ee:	8979      	ldrh	r1, [r7, #10]
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	9301      	str	r3, [sp, #4]
 80047f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047f6:	9300      	str	r3, [sp, #0]
 80047f8:	4603      	mov	r3, r0
 80047fa:	68f8      	ldr	r0, [r7, #12]
 80047fc:	f001 fe9c 	bl	8006538 <I2C_RequestMemoryWrite>
 8004800:	4603      	mov	r3, r0
 8004802:	2b00      	cmp	r3, #0
 8004804:	d052      	beq.n	80048ac <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	e081      	b.n	800490e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800480a:	697a      	ldr	r2, [r7, #20]
 800480c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800480e:	68f8      	ldr	r0, [r7, #12]
 8004810:	f002 f98e 	bl	8006b30 <I2C_WaitOnTXEFlagUntilTimeout>
 8004814:	4603      	mov	r3, r0
 8004816:	2b00      	cmp	r3, #0
 8004818:	d00d      	beq.n	8004836 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800481e:	2b04      	cmp	r3, #4
 8004820:	d107      	bne.n	8004832 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004830:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	e06b      	b.n	800490e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483a:	781a      	ldrb	r2, [r3, #0]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004846:	1c5a      	adds	r2, r3, #1
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004850:	3b01      	subs	r3, #1
 8004852:	b29a      	uxth	r2, r3
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800485c:	b29b      	uxth	r3, r3
 800485e:	3b01      	subs	r3, #1
 8004860:	b29a      	uxth	r2, r3
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	695b      	ldr	r3, [r3, #20]
 800486c:	f003 0304 	and.w	r3, r3, #4
 8004870:	2b04      	cmp	r3, #4
 8004872:	d11b      	bne.n	80048ac <HAL_I2C_Mem_Write+0x180>
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004878:	2b00      	cmp	r3, #0
 800487a:	d017      	beq.n	80048ac <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004880:	781a      	ldrb	r2, [r3, #0]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800488c:	1c5a      	adds	r2, r3, #1
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004896:	3b01      	subs	r3, #1
 8004898:	b29a      	uxth	r2, r3
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	3b01      	subs	r3, #1
 80048a6:	b29a      	uxth	r2, r3
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d1aa      	bne.n	800480a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048b4:	697a      	ldr	r2, [r7, #20]
 80048b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80048b8:	68f8      	ldr	r0, [r7, #12]
 80048ba:	f002 f97a 	bl	8006bb2 <I2C_WaitOnBTFFlagUntilTimeout>
 80048be:	4603      	mov	r3, r0
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d00d      	beq.n	80048e0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c8:	2b04      	cmp	r3, #4
 80048ca:	d107      	bne.n	80048dc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048da:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	e016      	b.n	800490e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2220      	movs	r2, #32
 80048f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2200      	movs	r2, #0
 80048fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2200      	movs	r2, #0
 8004904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004908:	2300      	movs	r3, #0
 800490a:	e000      	b.n	800490e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800490c:	2302      	movs	r3, #2
  }
}
 800490e:	4618      	mov	r0, r3
 8004910:	3718      	adds	r7, #24
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
 8004916:	bf00      	nop
 8004918:	00100002 	.word	0x00100002
 800491c:	ffff0000 	.word	0xffff0000

08004920 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b08c      	sub	sp, #48	; 0x30
 8004924:	af02      	add	r7, sp, #8
 8004926:	60f8      	str	r0, [r7, #12]
 8004928:	4608      	mov	r0, r1
 800492a:	4611      	mov	r1, r2
 800492c:	461a      	mov	r2, r3
 800492e:	4603      	mov	r3, r0
 8004930:	817b      	strh	r3, [r7, #10]
 8004932:	460b      	mov	r3, r1
 8004934:	813b      	strh	r3, [r7, #8]
 8004936:	4613      	mov	r3, r2
 8004938:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800493a:	f7fe fe91 	bl	8003660 <HAL_GetTick>
 800493e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004946:	b2db      	uxtb	r3, r3
 8004948:	2b20      	cmp	r3, #32
 800494a:	f040 8208 	bne.w	8004d5e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800494e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004950:	9300      	str	r3, [sp, #0]
 8004952:	2319      	movs	r3, #25
 8004954:	2201      	movs	r2, #1
 8004956:	497b      	ldr	r1, [pc, #492]	; (8004b44 <HAL_I2C_Mem_Read+0x224>)
 8004958:	68f8      	ldr	r0, [r7, #12]
 800495a:	f002 f813 	bl	8006984 <I2C_WaitOnFlagUntilTimeout>
 800495e:	4603      	mov	r3, r0
 8004960:	2b00      	cmp	r3, #0
 8004962:	d001      	beq.n	8004968 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004964:	2302      	movs	r3, #2
 8004966:	e1fb      	b.n	8004d60 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800496e:	2b01      	cmp	r3, #1
 8004970:	d101      	bne.n	8004976 <HAL_I2C_Mem_Read+0x56>
 8004972:	2302      	movs	r3, #2
 8004974:	e1f4      	b.n	8004d60 <HAL_I2C_Mem_Read+0x440>
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2201      	movs	r2, #1
 800497a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 0301 	and.w	r3, r3, #1
 8004988:	2b01      	cmp	r3, #1
 800498a:	d007      	beq.n	800499c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f042 0201 	orr.w	r2, r2, #1
 800499a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049aa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2222      	movs	r2, #34	; 0x22
 80049b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2240      	movs	r2, #64	; 0x40
 80049b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2200      	movs	r2, #0
 80049c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80049cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049d2:	b29a      	uxth	r2, r3
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	4a5b      	ldr	r2, [pc, #364]	; (8004b48 <HAL_I2C_Mem_Read+0x228>)
 80049dc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80049de:	88f8      	ldrh	r0, [r7, #6]
 80049e0:	893a      	ldrh	r2, [r7, #8]
 80049e2:	8979      	ldrh	r1, [r7, #10]
 80049e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e6:	9301      	str	r3, [sp, #4]
 80049e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ea:	9300      	str	r3, [sp, #0]
 80049ec:	4603      	mov	r3, r0
 80049ee:	68f8      	ldr	r0, [r7, #12]
 80049f0:	f001 fe38 	bl	8006664 <I2C_RequestMemoryRead>
 80049f4:	4603      	mov	r3, r0
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d001      	beq.n	80049fe <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e1b0      	b.n	8004d60 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d113      	bne.n	8004a2e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a06:	2300      	movs	r3, #0
 8004a08:	623b      	str	r3, [r7, #32]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	695b      	ldr	r3, [r3, #20]
 8004a10:	623b      	str	r3, [r7, #32]
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	699b      	ldr	r3, [r3, #24]
 8004a18:	623b      	str	r3, [r7, #32]
 8004a1a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a2a:	601a      	str	r2, [r3, #0]
 8004a2c:	e184      	b.n	8004d38 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d11b      	bne.n	8004a6e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a44:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a46:	2300      	movs	r3, #0
 8004a48:	61fb      	str	r3, [r7, #28]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	695b      	ldr	r3, [r3, #20]
 8004a50:	61fb      	str	r3, [r7, #28]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	699b      	ldr	r3, [r3, #24]
 8004a58:	61fb      	str	r3, [r7, #28]
 8004a5a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a6a:	601a      	str	r2, [r3, #0]
 8004a6c:	e164      	b.n	8004d38 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a72:	2b02      	cmp	r3, #2
 8004a74:	d11b      	bne.n	8004aae <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a84:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a94:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a96:	2300      	movs	r3, #0
 8004a98:	61bb      	str	r3, [r7, #24]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	695b      	ldr	r3, [r3, #20]
 8004aa0:	61bb      	str	r3, [r7, #24]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	699b      	ldr	r3, [r3, #24]
 8004aa8:	61bb      	str	r3, [r7, #24]
 8004aaa:	69bb      	ldr	r3, [r7, #24]
 8004aac:	e144      	b.n	8004d38 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004aae:	2300      	movs	r3, #0
 8004ab0:	617b      	str	r3, [r7, #20]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	695b      	ldr	r3, [r3, #20]
 8004ab8:	617b      	str	r3, [r7, #20]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	699b      	ldr	r3, [r3, #24]
 8004ac0:	617b      	str	r3, [r7, #20]
 8004ac2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004ac4:	e138      	b.n	8004d38 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004aca:	2b03      	cmp	r3, #3
 8004acc:	f200 80f1 	bhi.w	8004cb2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d123      	bne.n	8004b20 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ad8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ada:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004adc:	68f8      	ldr	r0, [r7, #12]
 8004ade:	f002 f8db 	bl	8006c98 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d001      	beq.n	8004aec <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	e139      	b.n	8004d60 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	691a      	ldr	r2, [r3, #16]
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af6:	b2d2      	uxtb	r2, r2
 8004af8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004afe:	1c5a      	adds	r2, r3, #1
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b08:	3b01      	subs	r3, #1
 8004b0a:	b29a      	uxth	r2, r3
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	3b01      	subs	r3, #1
 8004b18:	b29a      	uxth	r2, r3
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004b1e:	e10b      	b.n	8004d38 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b24:	2b02      	cmp	r3, #2
 8004b26:	d14e      	bne.n	8004bc6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2a:	9300      	str	r3, [sp, #0]
 8004b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b2e:	2200      	movs	r2, #0
 8004b30:	4906      	ldr	r1, [pc, #24]	; (8004b4c <HAL_I2C_Mem_Read+0x22c>)
 8004b32:	68f8      	ldr	r0, [r7, #12]
 8004b34:	f001 ff26 	bl	8006984 <I2C_WaitOnFlagUntilTimeout>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d008      	beq.n	8004b50 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e10e      	b.n	8004d60 <HAL_I2C_Mem_Read+0x440>
 8004b42:	bf00      	nop
 8004b44:	00100002 	.word	0x00100002
 8004b48:	ffff0000 	.word	0xffff0000
 8004b4c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b5e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	691a      	ldr	r2, [r3, #16]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6a:	b2d2      	uxtb	r2, r2
 8004b6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b72:	1c5a      	adds	r2, r3, #1
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b7c:	3b01      	subs	r3, #1
 8004b7e:	b29a      	uxth	r2, r3
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	3b01      	subs	r3, #1
 8004b8c:	b29a      	uxth	r2, r3
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	691a      	ldr	r2, [r3, #16]
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9c:	b2d2      	uxtb	r2, r2
 8004b9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba4:	1c5a      	adds	r2, r3, #1
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bae:	3b01      	subs	r3, #1
 8004bb0:	b29a      	uxth	r2, r3
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	3b01      	subs	r3, #1
 8004bbe:	b29a      	uxth	r2, r3
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004bc4:	e0b8      	b.n	8004d38 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc8:	9300      	str	r3, [sp, #0]
 8004bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bcc:	2200      	movs	r2, #0
 8004bce:	4966      	ldr	r1, [pc, #408]	; (8004d68 <HAL_I2C_Mem_Read+0x448>)
 8004bd0:	68f8      	ldr	r0, [r7, #12]
 8004bd2:	f001 fed7 	bl	8006984 <I2C_WaitOnFlagUntilTimeout>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d001      	beq.n	8004be0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e0bf      	b.n	8004d60 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	691a      	ldr	r2, [r3, #16]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfa:	b2d2      	uxtb	r2, r2
 8004bfc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c02:	1c5a      	adds	r2, r3, #1
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c0c:	3b01      	subs	r3, #1
 8004c0e:	b29a      	uxth	r2, r3
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	3b01      	subs	r3, #1
 8004c1c:	b29a      	uxth	r2, r3
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c24:	9300      	str	r3, [sp, #0]
 8004c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c28:	2200      	movs	r2, #0
 8004c2a:	494f      	ldr	r1, [pc, #316]	; (8004d68 <HAL_I2C_Mem_Read+0x448>)
 8004c2c:	68f8      	ldr	r0, [r7, #12]
 8004c2e:	f001 fea9 	bl	8006984 <I2C_WaitOnFlagUntilTimeout>
 8004c32:	4603      	mov	r3, r0
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d001      	beq.n	8004c3c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e091      	b.n	8004d60 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c4a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	691a      	ldr	r2, [r3, #16]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c56:	b2d2      	uxtb	r2, r2
 8004c58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5e:	1c5a      	adds	r2, r3, #1
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c68:	3b01      	subs	r3, #1
 8004c6a:	b29a      	uxth	r2, r3
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	3b01      	subs	r3, #1
 8004c78:	b29a      	uxth	r2, r3
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	691a      	ldr	r2, [r3, #16]
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c88:	b2d2      	uxtb	r2, r2
 8004c8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c90:	1c5a      	adds	r2, r3, #1
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c9a:	3b01      	subs	r3, #1
 8004c9c:	b29a      	uxth	r2, r3
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	3b01      	subs	r3, #1
 8004caa:	b29a      	uxth	r2, r3
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004cb0:	e042      	b.n	8004d38 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cb4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004cb6:	68f8      	ldr	r0, [r7, #12]
 8004cb8:	f001 ffee 	bl	8006c98 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d001      	beq.n	8004cc6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e04c      	b.n	8004d60 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	691a      	ldr	r2, [r3, #16]
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd0:	b2d2      	uxtb	r2, r2
 8004cd2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd8:	1c5a      	adds	r2, r3, #1
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ce2:	3b01      	subs	r3, #1
 8004ce4:	b29a      	uxth	r2, r3
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cee:	b29b      	uxth	r3, r3
 8004cf0:	3b01      	subs	r3, #1
 8004cf2:	b29a      	uxth	r2, r3
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	695b      	ldr	r3, [r3, #20]
 8004cfe:	f003 0304 	and.w	r3, r3, #4
 8004d02:	2b04      	cmp	r3, #4
 8004d04:	d118      	bne.n	8004d38 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	691a      	ldr	r2, [r3, #16]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d10:	b2d2      	uxtb	r2, r2
 8004d12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d18:	1c5a      	adds	r2, r3, #1
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d22:	3b01      	subs	r3, #1
 8004d24:	b29a      	uxth	r2, r3
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	3b01      	subs	r3, #1
 8004d32:	b29a      	uxth	r2, r3
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	f47f aec2 	bne.w	8004ac6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2220      	movs	r2, #32
 8004d46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2200      	movs	r2, #0
 8004d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	e000      	b.n	8004d60 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004d5e:	2302      	movs	r3, #2
  }
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3728      	adds	r7, #40	; 0x28
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}
 8004d68:	00010004 	.word	0x00010004

08004d6c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b088      	sub	sp, #32
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004d74:	2300      	movs	r3, #0
 8004d76:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d84:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d8c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d94:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004d96:	7bfb      	ldrb	r3, [r7, #15]
 8004d98:	2b10      	cmp	r3, #16
 8004d9a:	d003      	beq.n	8004da4 <HAL_I2C_EV_IRQHandler+0x38>
 8004d9c:	7bfb      	ldrb	r3, [r7, #15]
 8004d9e:	2b40      	cmp	r3, #64	; 0x40
 8004da0:	f040 80c1 	bne.w	8004f26 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	699b      	ldr	r3, [r3, #24]
 8004daa:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	695b      	ldr	r3, [r3, #20]
 8004db2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004db4:	69fb      	ldr	r3, [r7, #28]
 8004db6:	f003 0301 	and.w	r3, r3, #1
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d10d      	bne.n	8004dda <HAL_I2C_EV_IRQHandler+0x6e>
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004dc4:	d003      	beq.n	8004dce <HAL_I2C_EV_IRQHandler+0x62>
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004dcc:	d101      	bne.n	8004dd2 <HAL_I2C_EV_IRQHandler+0x66>
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e000      	b.n	8004dd4 <HAL_I2C_EV_IRQHandler+0x68>
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	f000 8132 	beq.w	800503e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004dda:	69fb      	ldr	r3, [r7, #28]
 8004ddc:	f003 0301 	and.w	r3, r3, #1
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d00c      	beq.n	8004dfe <HAL_I2C_EV_IRQHandler+0x92>
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	0a5b      	lsrs	r3, r3, #9
 8004de8:	f003 0301 	and.w	r3, r3, #1
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d006      	beq.n	8004dfe <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f001 ffd6 	bl	8006da2 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f000 fd83 	bl	8005902 <I2C_Master_SB>
 8004dfc:	e092      	b.n	8004f24 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004dfe:	69fb      	ldr	r3, [r7, #28]
 8004e00:	08db      	lsrs	r3, r3, #3
 8004e02:	f003 0301 	and.w	r3, r3, #1
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d009      	beq.n	8004e1e <HAL_I2C_EV_IRQHandler+0xb2>
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	0a5b      	lsrs	r3, r3, #9
 8004e0e:	f003 0301 	and.w	r3, r3, #1
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d003      	beq.n	8004e1e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f000 fdf9 	bl	8005a0e <I2C_Master_ADD10>
 8004e1c:	e082      	b.n	8004f24 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004e1e:	69fb      	ldr	r3, [r7, #28]
 8004e20:	085b      	lsrs	r3, r3, #1
 8004e22:	f003 0301 	and.w	r3, r3, #1
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d009      	beq.n	8004e3e <HAL_I2C_EV_IRQHandler+0xd2>
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	0a5b      	lsrs	r3, r3, #9
 8004e2e:	f003 0301 	and.w	r3, r3, #1
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d003      	beq.n	8004e3e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f000 fe13 	bl	8005a62 <I2C_Master_ADDR>
 8004e3c:	e072      	b.n	8004f24 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004e3e:	69bb      	ldr	r3, [r7, #24]
 8004e40:	089b      	lsrs	r3, r3, #2
 8004e42:	f003 0301 	and.w	r3, r3, #1
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d03b      	beq.n	8004ec2 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e58:	f000 80f3 	beq.w	8005042 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004e5c:	69fb      	ldr	r3, [r7, #28]
 8004e5e:	09db      	lsrs	r3, r3, #7
 8004e60:	f003 0301 	and.w	r3, r3, #1
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d00f      	beq.n	8004e88 <HAL_I2C_EV_IRQHandler+0x11c>
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	0a9b      	lsrs	r3, r3, #10
 8004e6c:	f003 0301 	and.w	r3, r3, #1
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d009      	beq.n	8004e88 <HAL_I2C_EV_IRQHandler+0x11c>
 8004e74:	69fb      	ldr	r3, [r7, #28]
 8004e76:	089b      	lsrs	r3, r3, #2
 8004e78:	f003 0301 	and.w	r3, r3, #1
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d103      	bne.n	8004e88 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f000 f9f3 	bl	800526c <I2C_MasterTransmit_TXE>
 8004e86:	e04d      	b.n	8004f24 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004e88:	69fb      	ldr	r3, [r7, #28]
 8004e8a:	089b      	lsrs	r3, r3, #2
 8004e8c:	f003 0301 	and.w	r3, r3, #1
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	f000 80d6 	beq.w	8005042 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	0a5b      	lsrs	r3, r3, #9
 8004e9a:	f003 0301 	and.w	r3, r3, #1
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	f000 80cf 	beq.w	8005042 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004ea4:	7bbb      	ldrb	r3, [r7, #14]
 8004ea6:	2b21      	cmp	r3, #33	; 0x21
 8004ea8:	d103      	bne.n	8004eb2 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f000 fa7a 	bl	80053a4 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004eb0:	e0c7      	b.n	8005042 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8004eb2:	7bfb      	ldrb	r3, [r7, #15]
 8004eb4:	2b40      	cmp	r3, #64	; 0x40
 8004eb6:	f040 80c4 	bne.w	8005042 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f000 fae8 	bl	8005490 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004ec0:	e0bf      	b.n	8005042 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ecc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ed0:	f000 80b7 	beq.w	8005042 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004ed4:	69fb      	ldr	r3, [r7, #28]
 8004ed6:	099b      	lsrs	r3, r3, #6
 8004ed8:	f003 0301 	and.w	r3, r3, #1
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d00f      	beq.n	8004f00 <HAL_I2C_EV_IRQHandler+0x194>
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	0a9b      	lsrs	r3, r3, #10
 8004ee4:	f003 0301 	and.w	r3, r3, #1
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d009      	beq.n	8004f00 <HAL_I2C_EV_IRQHandler+0x194>
 8004eec:	69fb      	ldr	r3, [r7, #28]
 8004eee:	089b      	lsrs	r3, r3, #2
 8004ef0:	f003 0301 	and.w	r3, r3, #1
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d103      	bne.n	8004f00 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f000 fb5d 	bl	80055b8 <I2C_MasterReceive_RXNE>
 8004efe:	e011      	b.n	8004f24 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004f00:	69fb      	ldr	r3, [r7, #28]
 8004f02:	089b      	lsrs	r3, r3, #2
 8004f04:	f003 0301 	and.w	r3, r3, #1
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	f000 809a 	beq.w	8005042 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	0a5b      	lsrs	r3, r3, #9
 8004f12:	f003 0301 	and.w	r3, r3, #1
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	f000 8093 	beq.w	8005042 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	f000 fc06 	bl	800572e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004f22:	e08e      	b.n	8005042 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004f24:	e08d      	b.n	8005042 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d004      	beq.n	8004f38 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	695b      	ldr	r3, [r3, #20]
 8004f34:	61fb      	str	r3, [r7, #28]
 8004f36:	e007      	b.n	8004f48 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	699b      	ldr	r3, [r3, #24]
 8004f3e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	695b      	ldr	r3, [r3, #20]
 8004f46:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004f48:	69fb      	ldr	r3, [r7, #28]
 8004f4a:	085b      	lsrs	r3, r3, #1
 8004f4c:	f003 0301 	and.w	r3, r3, #1
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d012      	beq.n	8004f7a <HAL_I2C_EV_IRQHandler+0x20e>
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	0a5b      	lsrs	r3, r3, #9
 8004f58:	f003 0301 	and.w	r3, r3, #1
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d00c      	beq.n	8004f7a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d003      	beq.n	8004f70 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	699b      	ldr	r3, [r3, #24]
 8004f6e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004f70:	69b9      	ldr	r1, [r7, #24]
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f000 ffc4 	bl	8005f00 <I2C_Slave_ADDR>
 8004f78:	e066      	b.n	8005048 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004f7a:	69fb      	ldr	r3, [r7, #28]
 8004f7c:	091b      	lsrs	r3, r3, #4
 8004f7e:	f003 0301 	and.w	r3, r3, #1
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d009      	beq.n	8004f9a <HAL_I2C_EV_IRQHandler+0x22e>
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	0a5b      	lsrs	r3, r3, #9
 8004f8a:	f003 0301 	and.w	r3, r3, #1
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d003      	beq.n	8004f9a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f000 fffe 	bl	8005f94 <I2C_Slave_STOPF>
 8004f98:	e056      	b.n	8005048 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004f9a:	7bbb      	ldrb	r3, [r7, #14]
 8004f9c:	2b21      	cmp	r3, #33	; 0x21
 8004f9e:	d002      	beq.n	8004fa6 <HAL_I2C_EV_IRQHandler+0x23a>
 8004fa0:	7bbb      	ldrb	r3, [r7, #14]
 8004fa2:	2b29      	cmp	r3, #41	; 0x29
 8004fa4:	d125      	bne.n	8004ff2 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	09db      	lsrs	r3, r3, #7
 8004faa:	f003 0301 	and.w	r3, r3, #1
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d00f      	beq.n	8004fd2 <HAL_I2C_EV_IRQHandler+0x266>
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	0a9b      	lsrs	r3, r3, #10
 8004fb6:	f003 0301 	and.w	r3, r3, #1
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d009      	beq.n	8004fd2 <HAL_I2C_EV_IRQHandler+0x266>
 8004fbe:	69fb      	ldr	r3, [r7, #28]
 8004fc0:	089b      	lsrs	r3, r3, #2
 8004fc2:	f003 0301 	and.w	r3, r3, #1
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d103      	bne.n	8004fd2 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f000 feda 	bl	8005d84 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004fd0:	e039      	b.n	8005046 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004fd2:	69fb      	ldr	r3, [r7, #28]
 8004fd4:	089b      	lsrs	r3, r3, #2
 8004fd6:	f003 0301 	and.w	r3, r3, #1
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d033      	beq.n	8005046 <HAL_I2C_EV_IRQHandler+0x2da>
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	0a5b      	lsrs	r3, r3, #9
 8004fe2:	f003 0301 	and.w	r3, r3, #1
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d02d      	beq.n	8005046 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f000 ff07 	bl	8005dfe <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004ff0:	e029      	b.n	8005046 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004ff2:	69fb      	ldr	r3, [r7, #28]
 8004ff4:	099b      	lsrs	r3, r3, #6
 8004ff6:	f003 0301 	and.w	r3, r3, #1
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d00f      	beq.n	800501e <HAL_I2C_EV_IRQHandler+0x2b2>
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	0a9b      	lsrs	r3, r3, #10
 8005002:	f003 0301 	and.w	r3, r3, #1
 8005006:	2b00      	cmp	r3, #0
 8005008:	d009      	beq.n	800501e <HAL_I2C_EV_IRQHandler+0x2b2>
 800500a:	69fb      	ldr	r3, [r7, #28]
 800500c:	089b      	lsrs	r3, r3, #2
 800500e:	f003 0301 	and.w	r3, r3, #1
 8005012:	2b00      	cmp	r3, #0
 8005014:	d103      	bne.n	800501e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f000 ff12 	bl	8005e40 <I2C_SlaveReceive_RXNE>
 800501c:	e014      	b.n	8005048 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	089b      	lsrs	r3, r3, #2
 8005022:	f003 0301 	and.w	r3, r3, #1
 8005026:	2b00      	cmp	r3, #0
 8005028:	d00e      	beq.n	8005048 <HAL_I2C_EV_IRQHandler+0x2dc>
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	0a5b      	lsrs	r3, r3, #9
 800502e:	f003 0301 	and.w	r3, r3, #1
 8005032:	2b00      	cmp	r3, #0
 8005034:	d008      	beq.n	8005048 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f000 ff40 	bl	8005ebc <I2C_SlaveReceive_BTF>
 800503c:	e004      	b.n	8005048 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800503e:	bf00      	nop
 8005040:	e002      	b.n	8005048 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005042:	bf00      	nop
 8005044:	e000      	b.n	8005048 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005046:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8005048:	3720      	adds	r7, #32
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}

0800504e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800504e:	b580      	push	{r7, lr}
 8005050:	b08a      	sub	sp, #40	; 0x28
 8005052:	af00      	add	r7, sp, #0
 8005054:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	695b      	ldr	r3, [r3, #20]
 800505c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8005066:	2300      	movs	r3, #0
 8005068:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005070:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005072:	6a3b      	ldr	r3, [r7, #32]
 8005074:	0a1b      	lsrs	r3, r3, #8
 8005076:	f003 0301 	and.w	r3, r3, #1
 800507a:	2b00      	cmp	r3, #0
 800507c:	d00e      	beq.n	800509c <HAL_I2C_ER_IRQHandler+0x4e>
 800507e:	69fb      	ldr	r3, [r7, #28]
 8005080:	0a1b      	lsrs	r3, r3, #8
 8005082:	f003 0301 	and.w	r3, r3, #1
 8005086:	2b00      	cmp	r3, #0
 8005088:	d008      	beq.n	800509c <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800508a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508c:	f043 0301 	orr.w	r3, r3, #1
 8005090:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800509a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800509c:	6a3b      	ldr	r3, [r7, #32]
 800509e:	0a5b      	lsrs	r3, r3, #9
 80050a0:	f003 0301 	and.w	r3, r3, #1
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d00e      	beq.n	80050c6 <HAL_I2C_ER_IRQHandler+0x78>
 80050a8:	69fb      	ldr	r3, [r7, #28]
 80050aa:	0a1b      	lsrs	r3, r3, #8
 80050ac:	f003 0301 	and.w	r3, r3, #1
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d008      	beq.n	80050c6 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80050b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b6:	f043 0302 	orr.w	r3, r3, #2
 80050ba:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80050c4:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80050c6:	6a3b      	ldr	r3, [r7, #32]
 80050c8:	0a9b      	lsrs	r3, r3, #10
 80050ca:	f003 0301 	and.w	r3, r3, #1
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d03f      	beq.n	8005152 <HAL_I2C_ER_IRQHandler+0x104>
 80050d2:	69fb      	ldr	r3, [r7, #28]
 80050d4:	0a1b      	lsrs	r3, r3, #8
 80050d6:	f003 0301 	and.w	r3, r3, #1
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d039      	beq.n	8005152 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80050de:	7efb      	ldrb	r3, [r7, #27]
 80050e0:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050e6:	b29b      	uxth	r3, r3
 80050e8:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050f0:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050f6:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80050f8:	7ebb      	ldrb	r3, [r7, #26]
 80050fa:	2b20      	cmp	r3, #32
 80050fc:	d112      	bne.n	8005124 <HAL_I2C_ER_IRQHandler+0xd6>
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d10f      	bne.n	8005124 <HAL_I2C_ER_IRQHandler+0xd6>
 8005104:	7cfb      	ldrb	r3, [r7, #19]
 8005106:	2b21      	cmp	r3, #33	; 0x21
 8005108:	d008      	beq.n	800511c <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800510a:	7cfb      	ldrb	r3, [r7, #19]
 800510c:	2b29      	cmp	r3, #41	; 0x29
 800510e:	d005      	beq.n	800511c <HAL_I2C_ER_IRQHandler+0xce>
 8005110:	7cfb      	ldrb	r3, [r7, #19]
 8005112:	2b28      	cmp	r3, #40	; 0x28
 8005114:	d106      	bne.n	8005124 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2b21      	cmp	r3, #33	; 0x21
 800511a:	d103      	bne.n	8005124 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f001 f869 	bl	80061f4 <I2C_Slave_AF>
 8005122:	e016      	b.n	8005152 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800512c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800512e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005130:	f043 0304 	orr.w	r3, r3, #4
 8005134:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005136:	7efb      	ldrb	r3, [r7, #27]
 8005138:	2b10      	cmp	r3, #16
 800513a:	d002      	beq.n	8005142 <HAL_I2C_ER_IRQHandler+0xf4>
 800513c:	7efb      	ldrb	r3, [r7, #27]
 800513e:	2b40      	cmp	r3, #64	; 0x40
 8005140:	d107      	bne.n	8005152 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005150:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005152:	6a3b      	ldr	r3, [r7, #32]
 8005154:	0adb      	lsrs	r3, r3, #11
 8005156:	f003 0301 	and.w	r3, r3, #1
 800515a:	2b00      	cmp	r3, #0
 800515c:	d00e      	beq.n	800517c <HAL_I2C_ER_IRQHandler+0x12e>
 800515e:	69fb      	ldr	r3, [r7, #28]
 8005160:	0a1b      	lsrs	r3, r3, #8
 8005162:	f003 0301 	and.w	r3, r3, #1
 8005166:	2b00      	cmp	r3, #0
 8005168:	d008      	beq.n	800517c <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800516a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516c:	f043 0308 	orr.w	r3, r3, #8
 8005170:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800517a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800517c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517e:	2b00      	cmp	r3, #0
 8005180:	d008      	beq.n	8005194 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005188:	431a      	orrs	r2, r3
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f001 f8a0 	bl	80062d4 <I2C_ITError>
  }
}
 8005194:	bf00      	nop
 8005196:	3728      	adds	r7, #40	; 0x28
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}

0800519c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800519c:	b480      	push	{r7}
 800519e:	b083      	sub	sp, #12
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80051a4:	bf00      	nop
 80051a6:	370c      	adds	r7, #12
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr

080051b0 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b083      	sub	sp, #12
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80051b8:	bf00      	nop
 80051ba:	370c      	adds	r7, #12
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr

080051c4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b083      	sub	sp, #12
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80051cc:	bf00      	nop
 80051ce:	370c      	adds	r7, #12
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr

080051d8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80051d8:	b480      	push	{r7}
 80051da:	b083      	sub	sp, #12
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80051e0:	bf00      	nop
 80051e2:	370c      	adds	r7, #12
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr

080051ec <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b083      	sub	sp, #12
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	460b      	mov	r3, r1
 80051f6:	70fb      	strb	r3, [r7, #3]
 80051f8:	4613      	mov	r3, r2
 80051fa:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80051fc:	bf00      	nop
 80051fe:	370c      	adds	r7, #12
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr

08005208 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005208:	b480      	push	{r7}
 800520a:	b083      	sub	sp, #12
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8005210:	bf00      	nop
 8005212:	370c      	adds	r7, #12
 8005214:	46bd      	mov	sp, r7
 8005216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521a:	4770      	bx	lr

0800521c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800521c:	b480      	push	{r7}
 800521e:	b083      	sub	sp, #12
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005224:	bf00      	nop
 8005226:	370c      	adds	r7, #12
 8005228:	46bd      	mov	sp, r7
 800522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522e:	4770      	bx	lr

08005230 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005230:	b480      	push	{r7}
 8005232:	b083      	sub	sp, #12
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005238:	bf00      	nop
 800523a:	370c      	adds	r7, #12
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr

08005244 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005244:	b480      	push	{r7}
 8005246:	b083      	sub	sp, #12
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800524c:	bf00      	nop
 800524e:	370c      	adds	r7, #12
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr

08005258 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005258:	b480      	push	{r7}
 800525a:	b083      	sub	sp, #12
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005260:	bf00      	nop
 8005262:	370c      	adds	r7, #12
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr

0800526c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b084      	sub	sp, #16
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800527a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005282:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005288:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800528e:	2b00      	cmp	r3, #0
 8005290:	d150      	bne.n	8005334 <I2C_MasterTransmit_TXE+0xc8>
 8005292:	7bfb      	ldrb	r3, [r7, #15]
 8005294:	2b21      	cmp	r3, #33	; 0x21
 8005296:	d14d      	bne.n	8005334 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	2b08      	cmp	r3, #8
 800529c:	d01d      	beq.n	80052da <I2C_MasterTransmit_TXE+0x6e>
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	2b20      	cmp	r3, #32
 80052a2:	d01a      	beq.n	80052da <I2C_MasterTransmit_TXE+0x6e>
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80052aa:	d016      	beq.n	80052da <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	685a      	ldr	r2, [r3, #4]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80052ba:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2211      	movs	r2, #17
 80052c0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2200      	movs	r2, #0
 80052c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2220      	movs	r2, #32
 80052ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f7ff ff62 	bl	800519c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80052d8:	e060      	b.n	800539c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	685a      	ldr	r2, [r3, #4]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80052e8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052f8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2200      	movs	r2, #0
 80052fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2220      	movs	r2, #32
 8005304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800530e:	b2db      	uxtb	r3, r3
 8005310:	2b40      	cmp	r3, #64	; 0x40
 8005312:	d107      	bne.n	8005324 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2200      	movs	r2, #0
 8005318:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f7ff ff7d 	bl	800521c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005322:	e03b      	b.n	800539c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2200      	movs	r2, #0
 8005328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f7ff ff35 	bl	800519c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005332:	e033      	b.n	800539c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8005334:	7bfb      	ldrb	r3, [r7, #15]
 8005336:	2b21      	cmp	r3, #33	; 0x21
 8005338:	d005      	beq.n	8005346 <I2C_MasterTransmit_TXE+0xda>
 800533a:	7bbb      	ldrb	r3, [r7, #14]
 800533c:	2b40      	cmp	r3, #64	; 0x40
 800533e:	d12d      	bne.n	800539c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005340:	7bfb      	ldrb	r3, [r7, #15]
 8005342:	2b22      	cmp	r3, #34	; 0x22
 8005344:	d12a      	bne.n	800539c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800534a:	b29b      	uxth	r3, r3
 800534c:	2b00      	cmp	r3, #0
 800534e:	d108      	bne.n	8005362 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	685a      	ldr	r2, [r3, #4]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800535e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005360:	e01c      	b.n	800539c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005368:	b2db      	uxtb	r3, r3
 800536a:	2b40      	cmp	r3, #64	; 0x40
 800536c:	d103      	bne.n	8005376 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f000 f88e 	bl	8005490 <I2C_MemoryTransmit_TXE_BTF>
}
 8005374:	e012      	b.n	800539c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537a:	781a      	ldrb	r2, [r3, #0]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005386:	1c5a      	adds	r2, r3, #1
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005390:	b29b      	uxth	r3, r3
 8005392:	3b01      	subs	r3, #1
 8005394:	b29a      	uxth	r2, r3
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800539a:	e7ff      	b.n	800539c <I2C_MasterTransmit_TXE+0x130>
 800539c:	bf00      	nop
 800539e:	3710      	adds	r7, #16
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}

080053a4 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b084      	sub	sp, #16
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053b0:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	2b21      	cmp	r3, #33	; 0x21
 80053bc:	d164      	bne.n	8005488 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d012      	beq.n	80053ee <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053cc:	781a      	ldrb	r2, [r3, #0]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d8:	1c5a      	adds	r2, r3, #1
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053e2:	b29b      	uxth	r3, r3
 80053e4:	3b01      	subs	r3, #1
 80053e6:	b29a      	uxth	r2, r3
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80053ec:	e04c      	b.n	8005488 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2b08      	cmp	r3, #8
 80053f2:	d01d      	beq.n	8005430 <I2C_MasterTransmit_BTF+0x8c>
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2b20      	cmp	r3, #32
 80053f8:	d01a      	beq.n	8005430 <I2C_MasterTransmit_BTF+0x8c>
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005400:	d016      	beq.n	8005430 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	685a      	ldr	r2, [r3, #4]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005410:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2211      	movs	r2, #17
 8005416:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2200      	movs	r2, #0
 800541c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2220      	movs	r2, #32
 8005424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	f7ff feb7 	bl	800519c <HAL_I2C_MasterTxCpltCallback>
}
 800542e:	e02b      	b.n	8005488 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	685a      	ldr	r2, [r3, #4]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800543e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800544e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2200      	movs	r2, #0
 8005454:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2220      	movs	r2, #32
 800545a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005464:	b2db      	uxtb	r3, r3
 8005466:	2b40      	cmp	r3, #64	; 0x40
 8005468:	d107      	bne.n	800547a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2200      	movs	r2, #0
 800546e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f7ff fed2 	bl	800521c <HAL_I2C_MemTxCpltCallback>
}
 8005478:	e006      	b.n	8005488 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2200      	movs	r2, #0
 800547e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f7ff fe8a 	bl	800519c <HAL_I2C_MasterTxCpltCallback>
}
 8005488:	bf00      	nop
 800548a:	3710      	adds	r7, #16
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}

08005490 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b084      	sub	sp, #16
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800549e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d11d      	bne.n	80054e4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d10b      	bne.n	80054c8 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054b4:	b2da      	uxtb	r2, r3
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054c0:	1c9a      	adds	r2, r3, #2
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80054c6:	e073      	b.n	80055b0 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054cc:	b29b      	uxth	r3, r3
 80054ce:	121b      	asrs	r3, r3, #8
 80054d0:	b2da      	uxtb	r2, r3
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054dc:	1c5a      	adds	r2, r3, #1
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80054e2:	e065      	b.n	80055b0 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d10b      	bne.n	8005504 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054f0:	b2da      	uxtb	r2, r3
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054fc:	1c5a      	adds	r2, r3, #1
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005502:	e055      	b.n	80055b0 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005508:	2b02      	cmp	r3, #2
 800550a:	d151      	bne.n	80055b0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800550c:	7bfb      	ldrb	r3, [r7, #15]
 800550e:	2b22      	cmp	r3, #34	; 0x22
 8005510:	d10d      	bne.n	800552e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	681a      	ldr	r2, [r3, #0]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005520:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005526:	1c5a      	adds	r2, r3, #1
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800552c:	e040      	b.n	80055b0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005532:	b29b      	uxth	r3, r3
 8005534:	2b00      	cmp	r3, #0
 8005536:	d015      	beq.n	8005564 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8005538:	7bfb      	ldrb	r3, [r7, #15]
 800553a:	2b21      	cmp	r3, #33	; 0x21
 800553c:	d112      	bne.n	8005564 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005542:	781a      	ldrb	r2, [r3, #0]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800554e:	1c5a      	adds	r2, r3, #1
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005558:	b29b      	uxth	r3, r3
 800555a:	3b01      	subs	r3, #1
 800555c:	b29a      	uxth	r2, r3
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005562:	e025      	b.n	80055b0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005568:	b29b      	uxth	r3, r3
 800556a:	2b00      	cmp	r3, #0
 800556c:	d120      	bne.n	80055b0 <I2C_MemoryTransmit_TXE_BTF+0x120>
 800556e:	7bfb      	ldrb	r3, [r7, #15]
 8005570:	2b21      	cmp	r3, #33	; 0x21
 8005572:	d11d      	bne.n	80055b0 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	685a      	ldr	r2, [r3, #4]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005582:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005592:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2200      	movs	r2, #0
 8005598:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2220      	movs	r2, #32
 800559e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2200      	movs	r2, #0
 80055a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f7ff fe36 	bl	800521c <HAL_I2C_MemTxCpltCallback>
}
 80055b0:	bf00      	nop
 80055b2:	3710      	adds	r7, #16
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}

080055b8 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b084      	sub	sp, #16
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	2b22      	cmp	r3, #34	; 0x22
 80055ca:	f040 80ac 	bne.w	8005726 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055d2:	b29b      	uxth	r3, r3
 80055d4:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2b03      	cmp	r3, #3
 80055da:	d921      	bls.n	8005620 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	691a      	ldr	r2, [r3, #16]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e6:	b2d2      	uxtb	r2, r2
 80055e8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ee:	1c5a      	adds	r2, r3, #1
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055f8:	b29b      	uxth	r3, r3
 80055fa:	3b01      	subs	r3, #1
 80055fc:	b29a      	uxth	r2, r3
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005606:	b29b      	uxth	r3, r3
 8005608:	2b03      	cmp	r3, #3
 800560a:	f040 808c 	bne.w	8005726 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	685a      	ldr	r2, [r3, #4]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800561c:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800561e:	e082      	b.n	8005726 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005624:	2b02      	cmp	r3, #2
 8005626:	d075      	beq.n	8005714 <I2C_MasterReceive_RXNE+0x15c>
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2b01      	cmp	r3, #1
 800562c:	d002      	beq.n	8005634 <I2C_MasterReceive_RXNE+0x7c>
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d16f      	bne.n	8005714 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f001 fafd 	bl	8006c34 <I2C_WaitOnSTOPRequestThroughIT>
 800563a:	4603      	mov	r3, r0
 800563c:	2b00      	cmp	r3, #0
 800563e:	d142      	bne.n	80056c6 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800564e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	685a      	ldr	r2, [r3, #4]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800565e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	691a      	ldr	r2, [r3, #16]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800566a:	b2d2      	uxtb	r2, r2
 800566c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005672:	1c5a      	adds	r2, r3, #1
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800567c:	b29b      	uxth	r3, r3
 800567e:	3b01      	subs	r3, #1
 8005680:	b29a      	uxth	r2, r3
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2220      	movs	r2, #32
 800568a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005694:	b2db      	uxtb	r3, r3
 8005696:	2b40      	cmp	r3, #64	; 0x40
 8005698:	d10a      	bne.n	80056b0 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2200      	movs	r2, #0
 800569e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2200      	movs	r2, #0
 80056a6:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	f7ff fdc1 	bl	8005230 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80056ae:	e03a      	b.n	8005726 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2200      	movs	r2, #0
 80056b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2212      	movs	r2, #18
 80056bc:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f7ff fd76 	bl	80051b0 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80056c4:	e02f      	b.n	8005726 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	685a      	ldr	r2, [r3, #4]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80056d4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	691a      	ldr	r2, [r3, #16]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e0:	b2d2      	uxtb	r2, r2
 80056e2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e8:	1c5a      	adds	r2, r3, #1
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	3b01      	subs	r3, #1
 80056f6:	b29a      	uxth	r2, r3
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2220      	movs	r2, #32
 8005700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2200      	movs	r2, #0
 8005708:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f7ff fd99 	bl	8005244 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005712:	e008      	b.n	8005726 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	685a      	ldr	r2, [r3, #4]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005722:	605a      	str	r2, [r3, #4]
}
 8005724:	e7ff      	b.n	8005726 <I2C_MasterReceive_RXNE+0x16e>
 8005726:	bf00      	nop
 8005728:	3710      	adds	r7, #16
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}

0800572e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800572e:	b580      	push	{r7, lr}
 8005730:	b084      	sub	sp, #16
 8005732:	af00      	add	r7, sp, #0
 8005734:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800573a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005740:	b29b      	uxth	r3, r3
 8005742:	2b04      	cmp	r3, #4
 8005744:	d11b      	bne.n	800577e <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	685a      	ldr	r2, [r3, #4]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005754:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	691a      	ldr	r2, [r3, #16]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005760:	b2d2      	uxtb	r2, r2
 8005762:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005768:	1c5a      	adds	r2, r3, #1
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005772:	b29b      	uxth	r3, r3
 8005774:	3b01      	subs	r3, #1
 8005776:	b29a      	uxth	r2, r3
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800577c:	e0bd      	b.n	80058fa <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005782:	b29b      	uxth	r3, r3
 8005784:	2b03      	cmp	r3, #3
 8005786:	d129      	bne.n	80057dc <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	685a      	ldr	r2, [r3, #4]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005796:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2b04      	cmp	r3, #4
 800579c:	d00a      	beq.n	80057b4 <I2C_MasterReceive_BTF+0x86>
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2b02      	cmp	r3, #2
 80057a2:	d007      	beq.n	80057b4 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	681a      	ldr	r2, [r3, #0]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057b2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	691a      	ldr	r2, [r3, #16]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057be:	b2d2      	uxtb	r2, r2
 80057c0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c6:	1c5a      	adds	r2, r3, #1
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057d0:	b29b      	uxth	r3, r3
 80057d2:	3b01      	subs	r3, #1
 80057d4:	b29a      	uxth	r2, r3
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80057da:	e08e      	b.n	80058fa <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	2b02      	cmp	r3, #2
 80057e4:	d176      	bne.n	80058d4 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d002      	beq.n	80057f2 <I2C_MasterReceive_BTF+0xc4>
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2b10      	cmp	r3, #16
 80057f0:	d108      	bne.n	8005804 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	681a      	ldr	r2, [r3, #0]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005800:	601a      	str	r2, [r3, #0]
 8005802:	e019      	b.n	8005838 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2b04      	cmp	r3, #4
 8005808:	d002      	beq.n	8005810 <I2C_MasterReceive_BTF+0xe2>
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2b02      	cmp	r3, #2
 800580e:	d108      	bne.n	8005822 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	681a      	ldr	r2, [r3, #0]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800581e:	601a      	str	r2, [r3, #0]
 8005820:	e00a      	b.n	8005838 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2b10      	cmp	r3, #16
 8005826:	d007      	beq.n	8005838 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005836:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	691a      	ldr	r2, [r3, #16]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005842:	b2d2      	uxtb	r2, r2
 8005844:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800584a:	1c5a      	adds	r2, r3, #1
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005854:	b29b      	uxth	r3, r3
 8005856:	3b01      	subs	r3, #1
 8005858:	b29a      	uxth	r2, r3
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	691a      	ldr	r2, [r3, #16]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005868:	b2d2      	uxtb	r2, r2
 800586a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005870:	1c5a      	adds	r2, r3, #1
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800587a:	b29b      	uxth	r3, r3
 800587c:	3b01      	subs	r3, #1
 800587e:	b29a      	uxth	r2, r3
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	685a      	ldr	r2, [r3, #4]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005892:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2220      	movs	r2, #32
 8005898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80058a2:	b2db      	uxtb	r3, r3
 80058a4:	2b40      	cmp	r3, #64	; 0x40
 80058a6:	d10a      	bne.n	80058be <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2200      	movs	r2, #0
 80058ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2200      	movs	r2, #0
 80058b4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f7ff fcba 	bl	8005230 <HAL_I2C_MemRxCpltCallback>
}
 80058bc:	e01d      	b.n	80058fa <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2200      	movs	r2, #0
 80058c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2212      	movs	r2, #18
 80058ca:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f7ff fc6f 	bl	80051b0 <HAL_I2C_MasterRxCpltCallback>
}
 80058d2:	e012      	b.n	80058fa <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	691a      	ldr	r2, [r3, #16]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058de:	b2d2      	uxtb	r2, r2
 80058e0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e6:	1c5a      	adds	r2, r3, #1
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	3b01      	subs	r3, #1
 80058f4:	b29a      	uxth	r2, r3
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80058fa:	bf00      	nop
 80058fc:	3710      	adds	r7, #16
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}

08005902 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8005902:	b480      	push	{r7}
 8005904:	b083      	sub	sp, #12
 8005906:	af00      	add	r7, sp, #0
 8005908:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005910:	b2db      	uxtb	r3, r3
 8005912:	2b40      	cmp	r3, #64	; 0x40
 8005914:	d117      	bne.n	8005946 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800591a:	2b00      	cmp	r3, #0
 800591c:	d109      	bne.n	8005932 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005922:	b2db      	uxtb	r3, r3
 8005924:	461a      	mov	r2, r3
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800592e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005930:	e067      	b.n	8005a02 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005936:	b2db      	uxtb	r3, r3
 8005938:	f043 0301 	orr.w	r3, r3, #1
 800593c:	b2da      	uxtb	r2, r3
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	611a      	str	r2, [r3, #16]
}
 8005944:	e05d      	b.n	8005a02 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	691b      	ldr	r3, [r3, #16]
 800594a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800594e:	d133      	bne.n	80059b8 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005956:	b2db      	uxtb	r3, r3
 8005958:	2b21      	cmp	r3, #33	; 0x21
 800595a:	d109      	bne.n	8005970 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005960:	b2db      	uxtb	r3, r3
 8005962:	461a      	mov	r2, r3
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800596c:	611a      	str	r2, [r3, #16]
 800596e:	e008      	b.n	8005982 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005974:	b2db      	uxtb	r3, r3
 8005976:	f043 0301 	orr.w	r3, r3, #1
 800597a:	b2da      	uxtb	r2, r3
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005986:	2b00      	cmp	r3, #0
 8005988:	d004      	beq.n	8005994 <I2C_Master_SB+0x92>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800598e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005990:	2b00      	cmp	r3, #0
 8005992:	d108      	bne.n	80059a6 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005998:	2b00      	cmp	r3, #0
 800599a:	d032      	beq.n	8005a02 <I2C_Master_SB+0x100>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d02d      	beq.n	8005a02 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	685a      	ldr	r2, [r3, #4]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059b4:	605a      	str	r2, [r3, #4]
}
 80059b6:	e024      	b.n	8005a02 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d10e      	bne.n	80059de <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059c4:	b29b      	uxth	r3, r3
 80059c6:	11db      	asrs	r3, r3, #7
 80059c8:	b2db      	uxtb	r3, r3
 80059ca:	f003 0306 	and.w	r3, r3, #6
 80059ce:	b2db      	uxtb	r3, r3
 80059d0:	f063 030f 	orn	r3, r3, #15
 80059d4:	b2da      	uxtb	r2, r3
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	611a      	str	r2, [r3, #16]
}
 80059dc:	e011      	b.n	8005a02 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d10d      	bne.n	8005a02 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	11db      	asrs	r3, r3, #7
 80059ee:	b2db      	uxtb	r3, r3
 80059f0:	f003 0306 	and.w	r3, r3, #6
 80059f4:	b2db      	uxtb	r3, r3
 80059f6:	f063 030e 	orn	r3, r3, #14
 80059fa:	b2da      	uxtb	r2, r3
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	611a      	str	r2, [r3, #16]
}
 8005a02:	bf00      	nop
 8005a04:	370c      	adds	r7, #12
 8005a06:	46bd      	mov	sp, r7
 8005a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0c:	4770      	bx	lr

08005a0e <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005a0e:	b480      	push	{r7}
 8005a10:	b083      	sub	sp, #12
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a1a:	b2da      	uxtb	r2, r3
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d004      	beq.n	8005a34 <I2C_Master_ADD10+0x26>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d108      	bne.n	8005a46 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d00c      	beq.n	8005a56 <I2C_Master_ADD10+0x48>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d007      	beq.n	8005a56 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	685a      	ldr	r2, [r3, #4]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a54:	605a      	str	r2, [r3, #4]
  }
}
 8005a56:	bf00      	nop
 8005a58:	370c      	adds	r7, #12
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a60:	4770      	bx	lr

08005a62 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005a62:	b480      	push	{r7}
 8005a64:	b091      	sub	sp, #68	; 0x44
 8005a66:	af00      	add	r7, sp, #0
 8005a68:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a70:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a78:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a7e:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a86:	b2db      	uxtb	r3, r3
 8005a88:	2b22      	cmp	r3, #34	; 0x22
 8005a8a:	f040 8169 	bne.w	8005d60 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d10f      	bne.n	8005ab6 <I2C_Master_ADDR+0x54>
 8005a96:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005a9a:	2b40      	cmp	r3, #64	; 0x40
 8005a9c:	d10b      	bne.n	8005ab6 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	633b      	str	r3, [r7, #48]	; 0x30
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	695b      	ldr	r3, [r3, #20]
 8005aa8:	633b      	str	r3, [r7, #48]	; 0x30
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	699b      	ldr	r3, [r3, #24]
 8005ab0:	633b      	str	r3, [r7, #48]	; 0x30
 8005ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ab4:	e160      	b.n	8005d78 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d11d      	bne.n	8005afa <I2C_Master_ADDR+0x98>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	691b      	ldr	r3, [r3, #16]
 8005ac2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005ac6:	d118      	bne.n	8005afa <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ac8:	2300      	movs	r3, #0
 8005aca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	695b      	ldr	r3, [r3, #20]
 8005ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	699b      	ldr	r3, [r3, #24]
 8005ada:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005aec:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005af2:	1c5a      	adds	r2, r3, #1
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	651a      	str	r2, [r3, #80]	; 0x50
 8005af8:	e13e      	b.n	8005d78 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005afe:	b29b      	uxth	r3, r3
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d113      	bne.n	8005b2c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b04:	2300      	movs	r3, #0
 8005b06:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	695b      	ldr	r3, [r3, #20]
 8005b0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	699b      	ldr	r3, [r3, #24]
 8005b16:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b18:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	681a      	ldr	r2, [r3, #0]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b28:	601a      	str	r2, [r3, #0]
 8005b2a:	e115      	b.n	8005d58 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	2b01      	cmp	r3, #1
 8005b34:	f040 808a 	bne.w	8005c4c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b3a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005b3e:	d137      	bne.n	8005bb0 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b4e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b5e:	d113      	bne.n	8005b88 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	681a      	ldr	r2, [r3, #0]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b6e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b70:	2300      	movs	r3, #0
 8005b72:	627b      	str	r3, [r7, #36]	; 0x24
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	695b      	ldr	r3, [r3, #20]
 8005b7a:	627b      	str	r3, [r7, #36]	; 0x24
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	699b      	ldr	r3, [r3, #24]
 8005b82:	627b      	str	r3, [r7, #36]	; 0x24
 8005b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b86:	e0e7      	b.n	8005d58 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b88:	2300      	movs	r3, #0
 8005b8a:	623b      	str	r3, [r7, #32]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	695b      	ldr	r3, [r3, #20]
 8005b92:	623b      	str	r3, [r7, #32]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	699b      	ldr	r3, [r3, #24]
 8005b9a:	623b      	str	r3, [r7, #32]
 8005b9c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	681a      	ldr	r2, [r3, #0]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bac:	601a      	str	r2, [r3, #0]
 8005bae:	e0d3      	b.n	8005d58 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bb2:	2b08      	cmp	r3, #8
 8005bb4:	d02e      	beq.n	8005c14 <I2C_Master_ADDR+0x1b2>
 8005bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bb8:	2b20      	cmp	r3, #32
 8005bba:	d02b      	beq.n	8005c14 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005bbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bbe:	2b12      	cmp	r3, #18
 8005bc0:	d102      	bne.n	8005bc8 <I2C_Master_ADDR+0x166>
 8005bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	d125      	bne.n	8005c14 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bca:	2b04      	cmp	r3, #4
 8005bcc:	d00e      	beq.n	8005bec <I2C_Master_ADDR+0x18a>
 8005bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bd0:	2b02      	cmp	r3, #2
 8005bd2:	d00b      	beq.n	8005bec <I2C_Master_ADDR+0x18a>
 8005bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bd6:	2b10      	cmp	r3, #16
 8005bd8:	d008      	beq.n	8005bec <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	681a      	ldr	r2, [r3, #0]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005be8:	601a      	str	r2, [r3, #0]
 8005bea:	e007      	b.n	8005bfc <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005bfa:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	61fb      	str	r3, [r7, #28]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	695b      	ldr	r3, [r3, #20]
 8005c06:	61fb      	str	r3, [r7, #28]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	699b      	ldr	r3, [r3, #24]
 8005c0e:	61fb      	str	r3, [r7, #28]
 8005c10:	69fb      	ldr	r3, [r7, #28]
 8005c12:	e0a1      	b.n	8005d58 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	681a      	ldr	r2, [r3, #0]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c22:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c24:	2300      	movs	r3, #0
 8005c26:	61bb      	str	r3, [r7, #24]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	695b      	ldr	r3, [r3, #20]
 8005c2e:	61bb      	str	r3, [r7, #24]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	699b      	ldr	r3, [r3, #24]
 8005c36:	61bb      	str	r3, [r7, #24]
 8005c38:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c48:	601a      	str	r2, [r3, #0]
 8005c4a:	e085      	b.n	8005d58 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	2b02      	cmp	r3, #2
 8005c54:	d14d      	bne.n	8005cf2 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c58:	2b04      	cmp	r3, #4
 8005c5a:	d016      	beq.n	8005c8a <I2C_Master_ADDR+0x228>
 8005c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c5e:	2b02      	cmp	r3, #2
 8005c60:	d013      	beq.n	8005c8a <I2C_Master_ADDR+0x228>
 8005c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c64:	2b10      	cmp	r3, #16
 8005c66:	d010      	beq.n	8005c8a <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	681a      	ldr	r2, [r3, #0]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c76:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	681a      	ldr	r2, [r3, #0]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c86:	601a      	str	r2, [r3, #0]
 8005c88:	e007      	b.n	8005c9a <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	681a      	ldr	r2, [r3, #0]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005c98:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ca4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ca8:	d117      	bne.n	8005cda <I2C_Master_ADDR+0x278>
 8005caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005cb0:	d00b      	beq.n	8005cca <I2C_Master_ADDR+0x268>
 8005cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d008      	beq.n	8005cca <I2C_Master_ADDR+0x268>
 8005cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cba:	2b08      	cmp	r3, #8
 8005cbc:	d005      	beq.n	8005cca <I2C_Master_ADDR+0x268>
 8005cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cc0:	2b10      	cmp	r3, #16
 8005cc2:	d002      	beq.n	8005cca <I2C_Master_ADDR+0x268>
 8005cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cc6:	2b20      	cmp	r3, #32
 8005cc8:	d107      	bne.n	8005cda <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	685a      	ldr	r2, [r3, #4]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005cd8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cda:	2300      	movs	r3, #0
 8005cdc:	617b      	str	r3, [r7, #20]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	695b      	ldr	r3, [r3, #20]
 8005ce4:	617b      	str	r3, [r7, #20]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	699b      	ldr	r3, [r3, #24]
 8005cec:	617b      	str	r3, [r7, #20]
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	e032      	b.n	8005d58 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	681a      	ldr	r2, [r3, #0]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005d00:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d10:	d117      	bne.n	8005d42 <I2C_Master_ADDR+0x2e0>
 8005d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d14:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005d18:	d00b      	beq.n	8005d32 <I2C_Master_ADDR+0x2d0>
 8005d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	d008      	beq.n	8005d32 <I2C_Master_ADDR+0x2d0>
 8005d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d22:	2b08      	cmp	r3, #8
 8005d24:	d005      	beq.n	8005d32 <I2C_Master_ADDR+0x2d0>
 8005d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d28:	2b10      	cmp	r3, #16
 8005d2a:	d002      	beq.n	8005d32 <I2C_Master_ADDR+0x2d0>
 8005d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d2e:	2b20      	cmp	r3, #32
 8005d30:	d107      	bne.n	8005d42 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	685a      	ldr	r2, [r3, #4]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005d40:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d42:	2300      	movs	r3, #0
 8005d44:	613b      	str	r3, [r7, #16]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	695b      	ldr	r3, [r3, #20]
 8005d4c:	613b      	str	r3, [r7, #16]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	699b      	ldr	r3, [r3, #24]
 8005d54:	613b      	str	r3, [r7, #16]
 8005d56:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005d5e:	e00b      	b.n	8005d78 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d60:	2300      	movs	r3, #0
 8005d62:	60fb      	str	r3, [r7, #12]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	695b      	ldr	r3, [r3, #20]
 8005d6a:	60fb      	str	r3, [r7, #12]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	699b      	ldr	r3, [r3, #24]
 8005d72:	60fb      	str	r3, [r7, #12]
 8005d74:	68fb      	ldr	r3, [r7, #12]
}
 8005d76:	e7ff      	b.n	8005d78 <I2C_Master_ADDR+0x316>
 8005d78:	bf00      	nop
 8005d7a:	3744      	adds	r7, #68	; 0x44
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr

08005d84 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b084      	sub	sp, #16
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d92:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d98:	b29b      	uxth	r3, r3
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d02b      	beq.n	8005df6 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da2:	781a      	ldrb	r2, [r3, #0]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dae:	1c5a      	adds	r2, r3, #1
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005db8:	b29b      	uxth	r3, r3
 8005dba:	3b01      	subs	r3, #1
 8005dbc:	b29a      	uxth	r2, r3
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dc6:	b29b      	uxth	r3, r3
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d114      	bne.n	8005df6 <I2C_SlaveTransmit_TXE+0x72>
 8005dcc:	7bfb      	ldrb	r3, [r7, #15]
 8005dce:	2b29      	cmp	r3, #41	; 0x29
 8005dd0:	d111      	bne.n	8005df6 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	685a      	ldr	r2, [r3, #4]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005de0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2221      	movs	r2, #33	; 0x21
 8005de6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2228      	movs	r2, #40	; 0x28
 8005dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f7ff f9e7 	bl	80051c4 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005df6:	bf00      	nop
 8005df8:	3710      	adds	r7, #16
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}

08005dfe <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005dfe:	b480      	push	{r7}
 8005e00:	b083      	sub	sp, #12
 8005e02:	af00      	add	r7, sp, #0
 8005e04:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d011      	beq.n	8005e34 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e14:	781a      	ldrb	r2, [r3, #0]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e20:	1c5a      	adds	r2, r3, #1
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e2a:	b29b      	uxth	r3, r3
 8005e2c:	3b01      	subs	r3, #1
 8005e2e:	b29a      	uxth	r2, r3
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005e34:	bf00      	nop
 8005e36:	370c      	adds	r7, #12
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr

08005e40 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b084      	sub	sp, #16
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e4e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e54:	b29b      	uxth	r3, r3
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d02c      	beq.n	8005eb4 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	691a      	ldr	r2, [r3, #16]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e64:	b2d2      	uxtb	r2, r2
 8005e66:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e6c:	1c5a      	adds	r2, r3, #1
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e76:	b29b      	uxth	r3, r3
 8005e78:	3b01      	subs	r3, #1
 8005e7a:	b29a      	uxth	r2, r3
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e84:	b29b      	uxth	r3, r3
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d114      	bne.n	8005eb4 <I2C_SlaveReceive_RXNE+0x74>
 8005e8a:	7bfb      	ldrb	r3, [r7, #15]
 8005e8c:	2b2a      	cmp	r3, #42	; 0x2a
 8005e8e:	d111      	bne.n	8005eb4 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	685a      	ldr	r2, [r3, #4]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e9e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2222      	movs	r2, #34	; 0x22
 8005ea4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2228      	movs	r2, #40	; 0x28
 8005eaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f7ff f992 	bl	80051d8 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005eb4:	bf00      	nop
 8005eb6:	3710      	adds	r7, #16
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}

08005ebc <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b083      	sub	sp, #12
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d012      	beq.n	8005ef4 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	691a      	ldr	r2, [r3, #16]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed8:	b2d2      	uxtb	r2, r2
 8005eda:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee0:	1c5a      	adds	r2, r3, #1
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005eea:	b29b      	uxth	r3, r3
 8005eec:	3b01      	subs	r3, #1
 8005eee:	b29a      	uxth	r2, r3
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005ef4:	bf00      	nop
 8005ef6:	370c      	adds	r7, #12
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr

08005f00 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b084      	sub	sp, #16
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
 8005f08:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f14:	b2db      	uxtb	r3, r3
 8005f16:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005f1a:	2b28      	cmp	r3, #40	; 0x28
 8005f1c:	d127      	bne.n	8005f6e <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	685a      	ldr	r2, [r3, #4]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f2c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	089b      	lsrs	r3, r3, #2
 8005f32:	f003 0301 	and.w	r3, r3, #1
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d101      	bne.n	8005f3e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	09db      	lsrs	r3, r3, #7
 8005f42:	f003 0301 	and.w	r3, r3, #1
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d103      	bne.n	8005f52 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	68db      	ldr	r3, [r3, #12]
 8005f4e:	81bb      	strh	r3, [r7, #12]
 8005f50:	e002      	b.n	8005f58 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	699b      	ldr	r3, [r3, #24]
 8005f56:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005f60:	89ba      	ldrh	r2, [r7, #12]
 8005f62:	7bfb      	ldrb	r3, [r7, #15]
 8005f64:	4619      	mov	r1, r3
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f7ff f940 	bl	80051ec <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005f6c:	e00e      	b.n	8005f8c <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f6e:	2300      	movs	r3, #0
 8005f70:	60bb      	str	r3, [r7, #8]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	695b      	ldr	r3, [r3, #20]
 8005f78:	60bb      	str	r3, [r7, #8]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	699b      	ldr	r3, [r3, #24]
 8005f80:	60bb      	str	r3, [r7, #8]
 8005f82:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2200      	movs	r2, #0
 8005f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005f8c:	bf00      	nop
 8005f8e:	3710      	adds	r7, #16
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}

08005f94 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b084      	sub	sp, #16
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fa2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	685a      	ldr	r2, [r3, #4]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005fb2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	60bb      	str	r3, [r7, #8]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	695b      	ldr	r3, [r3, #20]
 8005fbe:	60bb      	str	r3, [r7, #8]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	681a      	ldr	r2, [r3, #0]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f042 0201 	orr.w	r2, r2, #1
 8005fce:	601a      	str	r2, [r3, #0]
 8005fd0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	681a      	ldr	r2, [r3, #0]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fe0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005fec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ff0:	d172      	bne.n	80060d8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005ff2:	7bfb      	ldrb	r3, [r7, #15]
 8005ff4:	2b22      	cmp	r3, #34	; 0x22
 8005ff6:	d002      	beq.n	8005ffe <I2C_Slave_STOPF+0x6a>
 8005ff8:	7bfb      	ldrb	r3, [r7, #15]
 8005ffa:	2b2a      	cmp	r3, #42	; 0x2a
 8005ffc:	d135      	bne.n	800606a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	b29a      	uxth	r2, r3
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006010:	b29b      	uxth	r3, r3
 8006012:	2b00      	cmp	r3, #0
 8006014:	d005      	beq.n	8006022 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800601a:	f043 0204 	orr.w	r2, r3, #4
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	685a      	ldr	r2, [r3, #4]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006030:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006036:	4618      	mov	r0, r3
 8006038:	f7fd ff76 	bl	8003f28 <HAL_DMA_GetState>
 800603c:	4603      	mov	r3, r0
 800603e:	2b01      	cmp	r3, #1
 8006040:	d049      	beq.n	80060d6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006046:	4a69      	ldr	r2, [pc, #420]	; (80061ec <I2C_Slave_STOPF+0x258>)
 8006048:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800604e:	4618      	mov	r0, r3
 8006050:	f7fd fdbe 	bl	8003bd0 <HAL_DMA_Abort_IT>
 8006054:	4603      	mov	r3, r0
 8006056:	2b00      	cmp	r3, #0
 8006058:	d03d      	beq.n	80060d6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800605e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006060:	687a      	ldr	r2, [r7, #4]
 8006062:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006064:	4610      	mov	r0, r2
 8006066:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006068:	e035      	b.n	80060d6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	b29a      	uxth	r2, r3
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800607c:	b29b      	uxth	r3, r3
 800607e:	2b00      	cmp	r3, #0
 8006080:	d005      	beq.n	800608e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006086:	f043 0204 	orr.w	r2, r3, #4
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	685a      	ldr	r2, [r3, #4]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800609c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060a2:	4618      	mov	r0, r3
 80060a4:	f7fd ff40 	bl	8003f28 <HAL_DMA_GetState>
 80060a8:	4603      	mov	r3, r0
 80060aa:	2b01      	cmp	r3, #1
 80060ac:	d014      	beq.n	80060d8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060b2:	4a4e      	ldr	r2, [pc, #312]	; (80061ec <I2C_Slave_STOPF+0x258>)
 80060b4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060ba:	4618      	mov	r0, r3
 80060bc:	f7fd fd88 	bl	8003bd0 <HAL_DMA_Abort_IT>
 80060c0:	4603      	mov	r3, r0
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d008      	beq.n	80060d8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060cc:	687a      	ldr	r2, [r7, #4]
 80060ce:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80060d0:	4610      	mov	r0, r2
 80060d2:	4798      	blx	r3
 80060d4:	e000      	b.n	80060d8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80060d6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060dc:	b29b      	uxth	r3, r3
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d03e      	beq.n	8006160 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	695b      	ldr	r3, [r3, #20]
 80060e8:	f003 0304 	and.w	r3, r3, #4
 80060ec:	2b04      	cmp	r3, #4
 80060ee:	d112      	bne.n	8006116 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	691a      	ldr	r2, [r3, #16]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060fa:	b2d2      	uxtb	r2, r2
 80060fc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006102:	1c5a      	adds	r2, r3, #1
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800610c:	b29b      	uxth	r3, r3
 800610e:	3b01      	subs	r3, #1
 8006110:	b29a      	uxth	r2, r3
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	695b      	ldr	r3, [r3, #20]
 800611c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006120:	2b40      	cmp	r3, #64	; 0x40
 8006122:	d112      	bne.n	800614a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	691a      	ldr	r2, [r3, #16]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800612e:	b2d2      	uxtb	r2, r2
 8006130:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006136:	1c5a      	adds	r2, r3, #1
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006140:	b29b      	uxth	r3, r3
 8006142:	3b01      	subs	r3, #1
 8006144:	b29a      	uxth	r2, r3
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800614e:	b29b      	uxth	r3, r3
 8006150:	2b00      	cmp	r3, #0
 8006152:	d005      	beq.n	8006160 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006158:	f043 0204 	orr.w	r2, r3, #4
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006164:	2b00      	cmp	r3, #0
 8006166:	d003      	beq.n	8006170 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f000 f8b3 	bl	80062d4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800616e:	e039      	b.n	80061e4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006170:	7bfb      	ldrb	r3, [r7, #15]
 8006172:	2b2a      	cmp	r3, #42	; 0x2a
 8006174:	d109      	bne.n	800618a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2200      	movs	r2, #0
 800617a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2228      	movs	r2, #40	; 0x28
 8006180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	f7ff f827 	bl	80051d8 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006190:	b2db      	uxtb	r3, r3
 8006192:	2b28      	cmp	r3, #40	; 0x28
 8006194:	d111      	bne.n	80061ba <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	4a15      	ldr	r2, [pc, #84]	; (80061f0 <I2C_Slave_STOPF+0x25c>)
 800619a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2200      	movs	r2, #0
 80061a0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2220      	movs	r2, #32
 80061a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2200      	movs	r2, #0
 80061ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f7ff f828 	bl	8005208 <HAL_I2C_ListenCpltCallback>
}
 80061b8:	e014      	b.n	80061e4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061be:	2b22      	cmp	r3, #34	; 0x22
 80061c0:	d002      	beq.n	80061c8 <I2C_Slave_STOPF+0x234>
 80061c2:	7bfb      	ldrb	r3, [r7, #15]
 80061c4:	2b22      	cmp	r3, #34	; 0x22
 80061c6:	d10d      	bne.n	80061e4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2200      	movs	r2, #0
 80061cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2220      	movs	r2, #32
 80061d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2200      	movs	r2, #0
 80061da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f7fe fffa 	bl	80051d8 <HAL_I2C_SlaveRxCpltCallback>
}
 80061e4:	bf00      	nop
 80061e6:	3710      	adds	r7, #16
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}
 80061ec:	08006835 	.word	0x08006835
 80061f0:	ffff0000 	.word	0xffff0000

080061f4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b084      	sub	sp, #16
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006202:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006208:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	2b08      	cmp	r3, #8
 800620e:	d002      	beq.n	8006216 <I2C_Slave_AF+0x22>
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	2b20      	cmp	r3, #32
 8006214:	d129      	bne.n	800626a <I2C_Slave_AF+0x76>
 8006216:	7bfb      	ldrb	r3, [r7, #15]
 8006218:	2b28      	cmp	r3, #40	; 0x28
 800621a:	d126      	bne.n	800626a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	4a2c      	ldr	r2, [pc, #176]	; (80062d0 <I2C_Slave_AF+0xdc>)
 8006220:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	685a      	ldr	r2, [r3, #4]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006230:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800623a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	681a      	ldr	r2, [r3, #0]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800624a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2200      	movs	r2, #0
 8006250:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2220      	movs	r2, #32
 8006256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2200      	movs	r2, #0
 800625e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f7fe ffd0 	bl	8005208 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8006268:	e02e      	b.n	80062c8 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800626a:	7bfb      	ldrb	r3, [r7, #15]
 800626c:	2b21      	cmp	r3, #33	; 0x21
 800626e:	d126      	bne.n	80062be <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	4a17      	ldr	r2, [pc, #92]	; (80062d0 <I2C_Slave_AF+0xdc>)
 8006274:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2221      	movs	r2, #33	; 0x21
 800627a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2220      	movs	r2, #32
 8006280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2200      	movs	r2, #0
 8006288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	685a      	ldr	r2, [r3, #4]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800629a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80062a4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	681a      	ldr	r2, [r3, #0]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062b4:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f7fe ff84 	bl	80051c4 <HAL_I2C_SlaveTxCpltCallback>
}
 80062bc:	e004      	b.n	80062c8 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80062c6:	615a      	str	r2, [r3, #20]
}
 80062c8:	bf00      	nop
 80062ca:	3710      	adds	r7, #16
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}
 80062d0:	ffff0000 	.word	0xffff0000

080062d4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b084      	sub	sp, #16
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062e2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80062ea:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80062ec:	7bbb      	ldrb	r3, [r7, #14]
 80062ee:	2b10      	cmp	r3, #16
 80062f0:	d002      	beq.n	80062f8 <I2C_ITError+0x24>
 80062f2:	7bbb      	ldrb	r3, [r7, #14]
 80062f4:	2b40      	cmp	r3, #64	; 0x40
 80062f6:	d10a      	bne.n	800630e <I2C_ITError+0x3a>
 80062f8:	7bfb      	ldrb	r3, [r7, #15]
 80062fa:	2b22      	cmp	r3, #34	; 0x22
 80062fc:	d107      	bne.n	800630e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	681a      	ldr	r2, [r3, #0]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800630c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800630e:	7bfb      	ldrb	r3, [r7, #15]
 8006310:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006314:	2b28      	cmp	r3, #40	; 0x28
 8006316:	d107      	bne.n	8006328 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2200      	movs	r2, #0
 800631c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2228      	movs	r2, #40	; 0x28
 8006322:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006326:	e015      	b.n	8006354 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006332:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006336:	d00a      	beq.n	800634e <I2C_ITError+0x7a>
 8006338:	7bfb      	ldrb	r3, [r7, #15]
 800633a:	2b60      	cmp	r3, #96	; 0x60
 800633c:	d007      	beq.n	800634e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2220      	movs	r2, #32
 8006342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2200      	movs	r2, #0
 800634a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2200      	movs	r2, #0
 8006352:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800635e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006362:	d162      	bne.n	800642a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	685a      	ldr	r2, [r3, #4]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006372:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006378:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800637c:	b2db      	uxtb	r3, r3
 800637e:	2b01      	cmp	r3, #1
 8006380:	d020      	beq.n	80063c4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006386:	4a6a      	ldr	r2, [pc, #424]	; (8006530 <I2C_ITError+0x25c>)
 8006388:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800638e:	4618      	mov	r0, r3
 8006390:	f7fd fc1e 	bl	8003bd0 <HAL_DMA_Abort_IT>
 8006394:	4603      	mov	r3, r0
 8006396:	2b00      	cmp	r3, #0
 8006398:	f000 8089 	beq.w	80064ae <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	681a      	ldr	r2, [r3, #0]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f022 0201 	bic.w	r2, r2, #1
 80063aa:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2220      	movs	r2, #32
 80063b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063ba:	687a      	ldr	r2, [r7, #4]
 80063bc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80063be:	4610      	mov	r0, r2
 80063c0:	4798      	blx	r3
 80063c2:	e074      	b.n	80064ae <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063c8:	4a59      	ldr	r2, [pc, #356]	; (8006530 <I2C_ITError+0x25c>)
 80063ca:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063d0:	4618      	mov	r0, r3
 80063d2:	f7fd fbfd 	bl	8003bd0 <HAL_DMA_Abort_IT>
 80063d6:	4603      	mov	r3, r0
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d068      	beq.n	80064ae <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	695b      	ldr	r3, [r3, #20]
 80063e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063e6:	2b40      	cmp	r3, #64	; 0x40
 80063e8:	d10b      	bne.n	8006402 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	691a      	ldr	r2, [r3, #16]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f4:	b2d2      	uxtb	r2, r2
 80063f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063fc:	1c5a      	adds	r2, r3, #1
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	681a      	ldr	r2, [r3, #0]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f022 0201 	bic.w	r2, r2, #1
 8006410:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2220      	movs	r2, #32
 8006416:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800641e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006420:	687a      	ldr	r2, [r7, #4]
 8006422:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006424:	4610      	mov	r0, r2
 8006426:	4798      	blx	r3
 8006428:	e041      	b.n	80064ae <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006430:	b2db      	uxtb	r3, r3
 8006432:	2b60      	cmp	r3, #96	; 0x60
 8006434:	d125      	bne.n	8006482 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2220      	movs	r2, #32
 800643a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2200      	movs	r2, #0
 8006442:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	695b      	ldr	r3, [r3, #20]
 800644a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800644e:	2b40      	cmp	r3, #64	; 0x40
 8006450:	d10b      	bne.n	800646a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	691a      	ldr	r2, [r3, #16]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800645c:	b2d2      	uxtb	r2, r2
 800645e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006464:	1c5a      	adds	r2, r3, #1
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	681a      	ldr	r2, [r3, #0]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f022 0201 	bic.w	r2, r2, #1
 8006478:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f7fe feec 	bl	8005258 <HAL_I2C_AbortCpltCallback>
 8006480:	e015      	b.n	80064ae <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	695b      	ldr	r3, [r3, #20]
 8006488:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800648c:	2b40      	cmp	r3, #64	; 0x40
 800648e:	d10b      	bne.n	80064a8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	691a      	ldr	r2, [r3, #16]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800649a:	b2d2      	uxtb	r2, r2
 800649c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a2:	1c5a      	adds	r2, r3, #1
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f7fe fecb 	bl	8005244 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	f003 0301 	and.w	r3, r3, #1
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d10e      	bne.n	80064dc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d109      	bne.n	80064dc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d104      	bne.n	80064dc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d007      	beq.n	80064ec <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	685a      	ldr	r2, [r3, #4]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80064ea:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064f2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064f8:	f003 0304 	and.w	r3, r3, #4
 80064fc:	2b04      	cmp	r3, #4
 80064fe:	d113      	bne.n	8006528 <I2C_ITError+0x254>
 8006500:	7bfb      	ldrb	r3, [r7, #15]
 8006502:	2b28      	cmp	r3, #40	; 0x28
 8006504:	d110      	bne.n	8006528 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	4a0a      	ldr	r2, [pc, #40]	; (8006534 <I2C_ITError+0x260>)
 800650a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2200      	movs	r2, #0
 8006510:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2220      	movs	r2, #32
 8006516:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2200      	movs	r2, #0
 800651e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f7fe fe70 	bl	8005208 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006528:	bf00      	nop
 800652a:	3710      	adds	r7, #16
 800652c:	46bd      	mov	sp, r7
 800652e:	bd80      	pop	{r7, pc}
 8006530:	08006835 	.word	0x08006835
 8006534:	ffff0000 	.word	0xffff0000

08006538 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b088      	sub	sp, #32
 800653c:	af02      	add	r7, sp, #8
 800653e:	60f8      	str	r0, [r7, #12]
 8006540:	4608      	mov	r0, r1
 8006542:	4611      	mov	r1, r2
 8006544:	461a      	mov	r2, r3
 8006546:	4603      	mov	r3, r0
 8006548:	817b      	strh	r3, [r7, #10]
 800654a:	460b      	mov	r3, r1
 800654c:	813b      	strh	r3, [r7, #8]
 800654e:	4613      	mov	r3, r2
 8006550:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	681a      	ldr	r2, [r3, #0]
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006560:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006564:	9300      	str	r3, [sp, #0]
 8006566:	6a3b      	ldr	r3, [r7, #32]
 8006568:	2200      	movs	r2, #0
 800656a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800656e:	68f8      	ldr	r0, [r7, #12]
 8006570:	f000 fa08 	bl	8006984 <I2C_WaitOnFlagUntilTimeout>
 8006574:	4603      	mov	r3, r0
 8006576:	2b00      	cmp	r3, #0
 8006578:	d00d      	beq.n	8006596 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006584:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006588:	d103      	bne.n	8006592 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006590:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006592:	2303      	movs	r3, #3
 8006594:	e05f      	b.n	8006656 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006596:	897b      	ldrh	r3, [r7, #10]
 8006598:	b2db      	uxtb	r3, r3
 800659a:	461a      	mov	r2, r3
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80065a4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80065a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a8:	6a3a      	ldr	r2, [r7, #32]
 80065aa:	492d      	ldr	r1, [pc, #180]	; (8006660 <I2C_RequestMemoryWrite+0x128>)
 80065ac:	68f8      	ldr	r0, [r7, #12]
 80065ae:	f000 fa40 	bl	8006a32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80065b2:	4603      	mov	r3, r0
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d001      	beq.n	80065bc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80065b8:	2301      	movs	r3, #1
 80065ba:	e04c      	b.n	8006656 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065bc:	2300      	movs	r3, #0
 80065be:	617b      	str	r3, [r7, #20]
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	695b      	ldr	r3, [r3, #20]
 80065c6:	617b      	str	r3, [r7, #20]
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	699b      	ldr	r3, [r3, #24]
 80065ce:	617b      	str	r3, [r7, #20]
 80065d0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80065d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065d4:	6a39      	ldr	r1, [r7, #32]
 80065d6:	68f8      	ldr	r0, [r7, #12]
 80065d8:	f000 faaa 	bl	8006b30 <I2C_WaitOnTXEFlagUntilTimeout>
 80065dc:	4603      	mov	r3, r0
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d00d      	beq.n	80065fe <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065e6:	2b04      	cmp	r3, #4
 80065e8:	d107      	bne.n	80065fa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	681a      	ldr	r2, [r3, #0]
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065f8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80065fa:	2301      	movs	r3, #1
 80065fc:	e02b      	b.n	8006656 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80065fe:	88fb      	ldrh	r3, [r7, #6]
 8006600:	2b01      	cmp	r3, #1
 8006602:	d105      	bne.n	8006610 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006604:	893b      	ldrh	r3, [r7, #8]
 8006606:	b2da      	uxtb	r2, r3
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	611a      	str	r2, [r3, #16]
 800660e:	e021      	b.n	8006654 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006610:	893b      	ldrh	r3, [r7, #8]
 8006612:	0a1b      	lsrs	r3, r3, #8
 8006614:	b29b      	uxth	r3, r3
 8006616:	b2da      	uxtb	r2, r3
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800661e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006620:	6a39      	ldr	r1, [r7, #32]
 8006622:	68f8      	ldr	r0, [r7, #12]
 8006624:	f000 fa84 	bl	8006b30 <I2C_WaitOnTXEFlagUntilTimeout>
 8006628:	4603      	mov	r3, r0
 800662a:	2b00      	cmp	r3, #0
 800662c:	d00d      	beq.n	800664a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006632:	2b04      	cmp	r3, #4
 8006634:	d107      	bne.n	8006646 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	681a      	ldr	r2, [r3, #0]
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006644:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006646:	2301      	movs	r3, #1
 8006648:	e005      	b.n	8006656 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800664a:	893b      	ldrh	r3, [r7, #8]
 800664c:	b2da      	uxtb	r2, r3
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006654:	2300      	movs	r3, #0
}
 8006656:	4618      	mov	r0, r3
 8006658:	3718      	adds	r7, #24
 800665a:	46bd      	mov	sp, r7
 800665c:	bd80      	pop	{r7, pc}
 800665e:	bf00      	nop
 8006660:	00010002 	.word	0x00010002

08006664 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b088      	sub	sp, #32
 8006668:	af02      	add	r7, sp, #8
 800666a:	60f8      	str	r0, [r7, #12]
 800666c:	4608      	mov	r0, r1
 800666e:	4611      	mov	r1, r2
 8006670:	461a      	mov	r2, r3
 8006672:	4603      	mov	r3, r0
 8006674:	817b      	strh	r3, [r7, #10]
 8006676:	460b      	mov	r3, r1
 8006678:	813b      	strh	r3, [r7, #8]
 800667a:	4613      	mov	r3, r2
 800667c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	681a      	ldr	r2, [r3, #0]
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800668c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	681a      	ldr	r2, [r3, #0]
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800669c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800669e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a0:	9300      	str	r3, [sp, #0]
 80066a2:	6a3b      	ldr	r3, [r7, #32]
 80066a4:	2200      	movs	r2, #0
 80066a6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80066aa:	68f8      	ldr	r0, [r7, #12]
 80066ac:	f000 f96a 	bl	8006984 <I2C_WaitOnFlagUntilTimeout>
 80066b0:	4603      	mov	r3, r0
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d00d      	beq.n	80066d2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066c4:	d103      	bne.n	80066ce <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80066cc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80066ce:	2303      	movs	r3, #3
 80066d0:	e0aa      	b.n	8006828 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80066d2:	897b      	ldrh	r3, [r7, #10]
 80066d4:	b2db      	uxtb	r3, r3
 80066d6:	461a      	mov	r2, r3
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80066e0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80066e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e4:	6a3a      	ldr	r2, [r7, #32]
 80066e6:	4952      	ldr	r1, [pc, #328]	; (8006830 <I2C_RequestMemoryRead+0x1cc>)
 80066e8:	68f8      	ldr	r0, [r7, #12]
 80066ea:	f000 f9a2 	bl	8006a32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80066ee:	4603      	mov	r3, r0
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d001      	beq.n	80066f8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80066f4:	2301      	movs	r3, #1
 80066f6:	e097      	b.n	8006828 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066f8:	2300      	movs	r3, #0
 80066fa:	617b      	str	r3, [r7, #20]
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	695b      	ldr	r3, [r3, #20]
 8006702:	617b      	str	r3, [r7, #20]
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	699b      	ldr	r3, [r3, #24]
 800670a:	617b      	str	r3, [r7, #20]
 800670c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800670e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006710:	6a39      	ldr	r1, [r7, #32]
 8006712:	68f8      	ldr	r0, [r7, #12]
 8006714:	f000 fa0c 	bl	8006b30 <I2C_WaitOnTXEFlagUntilTimeout>
 8006718:	4603      	mov	r3, r0
 800671a:	2b00      	cmp	r3, #0
 800671c:	d00d      	beq.n	800673a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006722:	2b04      	cmp	r3, #4
 8006724:	d107      	bne.n	8006736 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	681a      	ldr	r2, [r3, #0]
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006734:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006736:	2301      	movs	r3, #1
 8006738:	e076      	b.n	8006828 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800673a:	88fb      	ldrh	r3, [r7, #6]
 800673c:	2b01      	cmp	r3, #1
 800673e:	d105      	bne.n	800674c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006740:	893b      	ldrh	r3, [r7, #8]
 8006742:	b2da      	uxtb	r2, r3
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	611a      	str	r2, [r3, #16]
 800674a:	e021      	b.n	8006790 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800674c:	893b      	ldrh	r3, [r7, #8]
 800674e:	0a1b      	lsrs	r3, r3, #8
 8006750:	b29b      	uxth	r3, r3
 8006752:	b2da      	uxtb	r2, r3
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800675a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800675c:	6a39      	ldr	r1, [r7, #32]
 800675e:	68f8      	ldr	r0, [r7, #12]
 8006760:	f000 f9e6 	bl	8006b30 <I2C_WaitOnTXEFlagUntilTimeout>
 8006764:	4603      	mov	r3, r0
 8006766:	2b00      	cmp	r3, #0
 8006768:	d00d      	beq.n	8006786 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800676e:	2b04      	cmp	r3, #4
 8006770:	d107      	bne.n	8006782 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	681a      	ldr	r2, [r3, #0]
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006780:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006782:	2301      	movs	r3, #1
 8006784:	e050      	b.n	8006828 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006786:	893b      	ldrh	r3, [r7, #8]
 8006788:	b2da      	uxtb	r2, r3
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006790:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006792:	6a39      	ldr	r1, [r7, #32]
 8006794:	68f8      	ldr	r0, [r7, #12]
 8006796:	f000 f9cb 	bl	8006b30 <I2C_WaitOnTXEFlagUntilTimeout>
 800679a:	4603      	mov	r3, r0
 800679c:	2b00      	cmp	r3, #0
 800679e:	d00d      	beq.n	80067bc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067a4:	2b04      	cmp	r3, #4
 80067a6:	d107      	bne.n	80067b8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	681a      	ldr	r2, [r3, #0]
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067b6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80067b8:	2301      	movs	r3, #1
 80067ba:	e035      	b.n	8006828 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	681a      	ldr	r2, [r3, #0]
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80067ca:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80067cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ce:	9300      	str	r3, [sp, #0]
 80067d0:	6a3b      	ldr	r3, [r7, #32]
 80067d2:	2200      	movs	r2, #0
 80067d4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80067d8:	68f8      	ldr	r0, [r7, #12]
 80067da:	f000 f8d3 	bl	8006984 <I2C_WaitOnFlagUntilTimeout>
 80067de:	4603      	mov	r3, r0
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d00d      	beq.n	8006800 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067f2:	d103      	bne.n	80067fc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80067fa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80067fc:	2303      	movs	r3, #3
 80067fe:	e013      	b.n	8006828 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006800:	897b      	ldrh	r3, [r7, #10]
 8006802:	b2db      	uxtb	r3, r3
 8006804:	f043 0301 	orr.w	r3, r3, #1
 8006808:	b2da      	uxtb	r2, r3
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006812:	6a3a      	ldr	r2, [r7, #32]
 8006814:	4906      	ldr	r1, [pc, #24]	; (8006830 <I2C_RequestMemoryRead+0x1cc>)
 8006816:	68f8      	ldr	r0, [r7, #12]
 8006818:	f000 f90b 	bl	8006a32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800681c:	4603      	mov	r3, r0
 800681e:	2b00      	cmp	r3, #0
 8006820:	d001      	beq.n	8006826 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006822:	2301      	movs	r3, #1
 8006824:	e000      	b.n	8006828 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006826:	2300      	movs	r3, #0
}
 8006828:	4618      	mov	r0, r3
 800682a:	3718      	adds	r7, #24
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}
 8006830:	00010002 	.word	0x00010002

08006834 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b086      	sub	sp, #24
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800683c:	2300      	movs	r3, #0
 800683e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006844:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800684c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800684e:	4b4b      	ldr	r3, [pc, #300]	; (800697c <I2C_DMAAbort+0x148>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	08db      	lsrs	r3, r3, #3
 8006854:	4a4a      	ldr	r2, [pc, #296]	; (8006980 <I2C_DMAAbort+0x14c>)
 8006856:	fba2 2303 	umull	r2, r3, r2, r3
 800685a:	0a1a      	lsrs	r2, r3, #8
 800685c:	4613      	mov	r3, r2
 800685e:	009b      	lsls	r3, r3, #2
 8006860:	4413      	add	r3, r2
 8006862:	00da      	lsls	r2, r3, #3
 8006864:	1ad3      	subs	r3, r2, r3
 8006866:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d106      	bne.n	800687c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006872:	f043 0220 	orr.w	r2, r3, #32
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800687a:	e00a      	b.n	8006892 <I2C_DMAAbort+0x5e>
    }
    count--;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	3b01      	subs	r3, #1
 8006880:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800688c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006890:	d0ea      	beq.n	8006868 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006896:	2b00      	cmp	r3, #0
 8006898:	d003      	beq.n	80068a2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800689e:	2200      	movs	r2, #0
 80068a0:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d003      	beq.n	80068b2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ae:	2200      	movs	r2, #0
 80068b0:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	681a      	ldr	r2, [r3, #0]
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068c0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	2200      	movs	r2, #0
 80068c6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d003      	beq.n	80068d8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068d4:	2200      	movs	r2, #0
 80068d6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d003      	beq.n	80068e8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068e4:	2200      	movs	r2, #0
 80068e6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	681a      	ldr	r2, [r3, #0]
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f022 0201 	bic.w	r2, r2, #1
 80068f6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068fe:	b2db      	uxtb	r3, r3
 8006900:	2b60      	cmp	r3, #96	; 0x60
 8006902:	d10e      	bne.n	8006922 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	2220      	movs	r2, #32
 8006908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	2200      	movs	r2, #0
 8006910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	2200      	movs	r2, #0
 8006918:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800691a:	6978      	ldr	r0, [r7, #20]
 800691c:	f7fe fc9c 	bl	8005258 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006920:	e027      	b.n	8006972 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006922:	7cfb      	ldrb	r3, [r7, #19]
 8006924:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006928:	2b28      	cmp	r3, #40	; 0x28
 800692a:	d117      	bne.n	800695c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	681a      	ldr	r2, [r3, #0]
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f042 0201 	orr.w	r2, r2, #1
 800693a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	681a      	ldr	r2, [r3, #0]
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800694a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	2200      	movs	r2, #0
 8006950:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	2228      	movs	r2, #40	; 0x28
 8006956:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800695a:	e007      	b.n	800696c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	2220      	movs	r2, #32
 8006960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	2200      	movs	r2, #0
 8006968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800696c:	6978      	ldr	r0, [r7, #20]
 800696e:	f7fe fc69 	bl	8005244 <HAL_I2C_ErrorCallback>
}
 8006972:	bf00      	nop
 8006974:	3718      	adds	r7, #24
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}
 800697a:	bf00      	nop
 800697c:	2000000c 	.word	0x2000000c
 8006980:	14f8b589 	.word	0x14f8b589

08006984 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b084      	sub	sp, #16
 8006988:	af00      	add	r7, sp, #0
 800698a:	60f8      	str	r0, [r7, #12]
 800698c:	60b9      	str	r1, [r7, #8]
 800698e:	603b      	str	r3, [r7, #0]
 8006990:	4613      	mov	r3, r2
 8006992:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006994:	e025      	b.n	80069e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800699c:	d021      	beq.n	80069e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800699e:	f7fc fe5f 	bl	8003660 <HAL_GetTick>
 80069a2:	4602      	mov	r2, r0
 80069a4:	69bb      	ldr	r3, [r7, #24]
 80069a6:	1ad3      	subs	r3, r2, r3
 80069a8:	683a      	ldr	r2, [r7, #0]
 80069aa:	429a      	cmp	r2, r3
 80069ac:	d302      	bcc.n	80069b4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d116      	bne.n	80069e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	2200      	movs	r2, #0
 80069b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	2220      	movs	r2, #32
 80069be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	2200      	movs	r2, #0
 80069c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ce:	f043 0220 	orr.w	r2, r3, #32
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	2200      	movs	r2, #0
 80069da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80069de:	2301      	movs	r3, #1
 80069e0:	e023      	b.n	8006a2a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	0c1b      	lsrs	r3, r3, #16
 80069e6:	b2db      	uxtb	r3, r3
 80069e8:	2b01      	cmp	r3, #1
 80069ea:	d10d      	bne.n	8006a08 <I2C_WaitOnFlagUntilTimeout+0x84>
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	695b      	ldr	r3, [r3, #20]
 80069f2:	43da      	mvns	r2, r3
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	4013      	ands	r3, r2
 80069f8:	b29b      	uxth	r3, r3
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	bf0c      	ite	eq
 80069fe:	2301      	moveq	r3, #1
 8006a00:	2300      	movne	r3, #0
 8006a02:	b2db      	uxtb	r3, r3
 8006a04:	461a      	mov	r2, r3
 8006a06:	e00c      	b.n	8006a22 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	699b      	ldr	r3, [r3, #24]
 8006a0e:	43da      	mvns	r2, r3
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	4013      	ands	r3, r2
 8006a14:	b29b      	uxth	r3, r3
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	bf0c      	ite	eq
 8006a1a:	2301      	moveq	r3, #1
 8006a1c:	2300      	movne	r3, #0
 8006a1e:	b2db      	uxtb	r3, r3
 8006a20:	461a      	mov	r2, r3
 8006a22:	79fb      	ldrb	r3, [r7, #7]
 8006a24:	429a      	cmp	r2, r3
 8006a26:	d0b6      	beq.n	8006996 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006a28:	2300      	movs	r3, #0
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	3710      	adds	r7, #16
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}

08006a32 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006a32:	b580      	push	{r7, lr}
 8006a34:	b084      	sub	sp, #16
 8006a36:	af00      	add	r7, sp, #0
 8006a38:	60f8      	str	r0, [r7, #12]
 8006a3a:	60b9      	str	r1, [r7, #8]
 8006a3c:	607a      	str	r2, [r7, #4]
 8006a3e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006a40:	e051      	b.n	8006ae6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	695b      	ldr	r3, [r3, #20]
 8006a48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a50:	d123      	bne.n	8006a9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	681a      	ldr	r2, [r3, #0]
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a60:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006a6a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2220      	movs	r2, #32
 8006a76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a86:	f043 0204 	orr.w	r2, r3, #4
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	2200      	movs	r2, #0
 8006a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006a96:	2301      	movs	r3, #1
 8006a98:	e046      	b.n	8006b28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aa0:	d021      	beq.n	8006ae6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006aa2:	f7fc fddd 	bl	8003660 <HAL_GetTick>
 8006aa6:	4602      	mov	r2, r0
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	1ad3      	subs	r3, r2, r3
 8006aac:	687a      	ldr	r2, [r7, #4]
 8006aae:	429a      	cmp	r2, r3
 8006ab0:	d302      	bcc.n	8006ab8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d116      	bne.n	8006ae6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	2200      	movs	r2, #0
 8006abc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	2220      	movs	r2, #32
 8006ac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ad2:	f043 0220 	orr.w	r2, r3, #32
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	2200      	movs	r2, #0
 8006ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	e020      	b.n	8006b28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	0c1b      	lsrs	r3, r3, #16
 8006aea:	b2db      	uxtb	r3, r3
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	d10c      	bne.n	8006b0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	695b      	ldr	r3, [r3, #20]
 8006af6:	43da      	mvns	r2, r3
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	4013      	ands	r3, r2
 8006afc:	b29b      	uxth	r3, r3
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	bf14      	ite	ne
 8006b02:	2301      	movne	r3, #1
 8006b04:	2300      	moveq	r3, #0
 8006b06:	b2db      	uxtb	r3, r3
 8006b08:	e00b      	b.n	8006b22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	699b      	ldr	r3, [r3, #24]
 8006b10:	43da      	mvns	r2, r3
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	4013      	ands	r3, r2
 8006b16:	b29b      	uxth	r3, r3
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	bf14      	ite	ne
 8006b1c:	2301      	movne	r3, #1
 8006b1e:	2300      	moveq	r3, #0
 8006b20:	b2db      	uxtb	r3, r3
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d18d      	bne.n	8006a42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006b26:	2300      	movs	r3, #0
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	3710      	adds	r7, #16
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd80      	pop	{r7, pc}

08006b30 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b084      	sub	sp, #16
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	60f8      	str	r0, [r7, #12]
 8006b38:	60b9      	str	r1, [r7, #8]
 8006b3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006b3c:	e02d      	b.n	8006b9a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006b3e:	68f8      	ldr	r0, [r7, #12]
 8006b40:	f000 f900 	bl	8006d44 <I2C_IsAcknowledgeFailed>
 8006b44:	4603      	mov	r3, r0
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d001      	beq.n	8006b4e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	e02d      	b.n	8006baa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b54:	d021      	beq.n	8006b9a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b56:	f7fc fd83 	bl	8003660 <HAL_GetTick>
 8006b5a:	4602      	mov	r2, r0
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	1ad3      	subs	r3, r2, r3
 8006b60:	68ba      	ldr	r2, [r7, #8]
 8006b62:	429a      	cmp	r2, r3
 8006b64:	d302      	bcc.n	8006b6c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d116      	bne.n	8006b9a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	2220      	movs	r2, #32
 8006b76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b86:	f043 0220 	orr.w	r2, r3, #32
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	2200      	movs	r2, #0
 8006b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006b96:	2301      	movs	r3, #1
 8006b98:	e007      	b.n	8006baa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	695b      	ldr	r3, [r3, #20]
 8006ba0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ba4:	2b80      	cmp	r3, #128	; 0x80
 8006ba6:	d1ca      	bne.n	8006b3e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006ba8:	2300      	movs	r3, #0
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	3710      	adds	r7, #16
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}

08006bb2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006bb2:	b580      	push	{r7, lr}
 8006bb4:	b084      	sub	sp, #16
 8006bb6:	af00      	add	r7, sp, #0
 8006bb8:	60f8      	str	r0, [r7, #12]
 8006bba:	60b9      	str	r1, [r7, #8]
 8006bbc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006bbe:	e02d      	b.n	8006c1c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006bc0:	68f8      	ldr	r0, [r7, #12]
 8006bc2:	f000 f8bf 	bl	8006d44 <I2C_IsAcknowledgeFailed>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d001      	beq.n	8006bd0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006bcc:	2301      	movs	r3, #1
 8006bce:	e02d      	b.n	8006c2c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bd6:	d021      	beq.n	8006c1c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bd8:	f7fc fd42 	bl	8003660 <HAL_GetTick>
 8006bdc:	4602      	mov	r2, r0
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	1ad3      	subs	r3, r2, r3
 8006be2:	68ba      	ldr	r2, [r7, #8]
 8006be4:	429a      	cmp	r2, r3
 8006be6:	d302      	bcc.n	8006bee <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d116      	bne.n	8006c1c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	2220      	movs	r2, #32
 8006bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c08:	f043 0220 	orr.w	r2, r3, #32
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	2200      	movs	r2, #0
 8006c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006c18:	2301      	movs	r3, #1
 8006c1a:	e007      	b.n	8006c2c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	695b      	ldr	r3, [r3, #20]
 8006c22:	f003 0304 	and.w	r3, r3, #4
 8006c26:	2b04      	cmp	r3, #4
 8006c28:	d1ca      	bne.n	8006bc0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006c2a:	2300      	movs	r3, #0
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	3710      	adds	r7, #16
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}

08006c34 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b085      	sub	sp, #20
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006c40:	4b13      	ldr	r3, [pc, #76]	; (8006c90 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	08db      	lsrs	r3, r3, #3
 8006c46:	4a13      	ldr	r2, [pc, #76]	; (8006c94 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006c48:	fba2 2303 	umull	r2, r3, r2, r3
 8006c4c:	0a1a      	lsrs	r2, r3, #8
 8006c4e:	4613      	mov	r3, r2
 8006c50:	009b      	lsls	r3, r3, #2
 8006c52:	4413      	add	r3, r2
 8006c54:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	3b01      	subs	r3, #1
 8006c5a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d107      	bne.n	8006c72 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c66:	f043 0220 	orr.w	r2, r3, #32
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006c6e:	2301      	movs	r3, #1
 8006c70:	e008      	b.n	8006c84 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c80:	d0e9      	beq.n	8006c56 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8006c82:	2300      	movs	r3, #0
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	3714      	adds	r7, #20
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8e:	4770      	bx	lr
 8006c90:	2000000c 	.word	0x2000000c
 8006c94:	14f8b589 	.word	0x14f8b589

08006c98 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b084      	sub	sp, #16
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	60f8      	str	r0, [r7, #12]
 8006ca0:	60b9      	str	r1, [r7, #8]
 8006ca2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006ca4:	e042      	b.n	8006d2c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	695b      	ldr	r3, [r3, #20]
 8006cac:	f003 0310 	and.w	r3, r3, #16
 8006cb0:	2b10      	cmp	r3, #16
 8006cb2:	d119      	bne.n	8006ce8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f06f 0210 	mvn.w	r2, #16
 8006cbc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	2220      	movs	r2, #32
 8006cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	e029      	b.n	8006d3c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ce8:	f7fc fcba 	bl	8003660 <HAL_GetTick>
 8006cec:	4602      	mov	r2, r0
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	1ad3      	subs	r3, r2, r3
 8006cf2:	68ba      	ldr	r2, [r7, #8]
 8006cf4:	429a      	cmp	r2, r3
 8006cf6:	d302      	bcc.n	8006cfe <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d116      	bne.n	8006d2c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	2200      	movs	r2, #0
 8006d02:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	2220      	movs	r2, #32
 8006d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d18:	f043 0220 	orr.w	r2, r3, #32
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	2200      	movs	r2, #0
 8006d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006d28:	2301      	movs	r3, #1
 8006d2a:	e007      	b.n	8006d3c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	695b      	ldr	r3, [r3, #20]
 8006d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d36:	2b40      	cmp	r3, #64	; 0x40
 8006d38:	d1b5      	bne.n	8006ca6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006d3a:	2300      	movs	r3, #0
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3710      	adds	r7, #16
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}

08006d44 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006d44:	b480      	push	{r7}
 8006d46:	b083      	sub	sp, #12
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	695b      	ldr	r3, [r3, #20]
 8006d52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d5a:	d11b      	bne.n	8006d94 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006d64:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2200      	movs	r2, #0
 8006d6a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2220      	movs	r2, #32
 8006d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2200      	movs	r2, #0
 8006d78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d80:	f043 0204 	orr.w	r2, r3, #4
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006d90:	2301      	movs	r3, #1
 8006d92:	e000      	b.n	8006d96 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006d94:	2300      	movs	r3, #0
}
 8006d96:	4618      	mov	r0, r3
 8006d98:	370c      	adds	r7, #12
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da0:	4770      	bx	lr

08006da2 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006da2:	b480      	push	{r7}
 8006da4:	b083      	sub	sp, #12
 8006da6:	af00      	add	r7, sp, #0
 8006da8:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dae:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006db2:	d103      	bne.n	8006dbc <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2201      	movs	r2, #1
 8006db8:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006dba:	e007      	b.n	8006dcc <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dc0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006dc4:	d102      	bne.n	8006dcc <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2208      	movs	r2, #8
 8006dca:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006dcc:	bf00      	nop
 8006dce:	370c      	adds	r7, #12
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd6:	4770      	bx	lr

08006dd8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b086      	sub	sp, #24
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d101      	bne.n	8006dea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006de6:	2301      	movs	r3, #1
 8006de8:	e267      	b.n	80072ba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f003 0301 	and.w	r3, r3, #1
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d075      	beq.n	8006ee2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006df6:	4b88      	ldr	r3, [pc, #544]	; (8007018 <HAL_RCC_OscConfig+0x240>)
 8006df8:	689b      	ldr	r3, [r3, #8]
 8006dfa:	f003 030c 	and.w	r3, r3, #12
 8006dfe:	2b04      	cmp	r3, #4
 8006e00:	d00c      	beq.n	8006e1c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006e02:	4b85      	ldr	r3, [pc, #532]	; (8007018 <HAL_RCC_OscConfig+0x240>)
 8006e04:	689b      	ldr	r3, [r3, #8]
 8006e06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006e0a:	2b08      	cmp	r3, #8
 8006e0c:	d112      	bne.n	8006e34 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006e0e:	4b82      	ldr	r3, [pc, #520]	; (8007018 <HAL_RCC_OscConfig+0x240>)
 8006e10:	685b      	ldr	r3, [r3, #4]
 8006e12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006e1a:	d10b      	bne.n	8006e34 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e1c:	4b7e      	ldr	r3, [pc, #504]	; (8007018 <HAL_RCC_OscConfig+0x240>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d05b      	beq.n	8006ee0 <HAL_RCC_OscConfig+0x108>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	685b      	ldr	r3, [r3, #4]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d157      	bne.n	8006ee0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006e30:	2301      	movs	r3, #1
 8006e32:	e242      	b.n	80072ba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e3c:	d106      	bne.n	8006e4c <HAL_RCC_OscConfig+0x74>
 8006e3e:	4b76      	ldr	r3, [pc, #472]	; (8007018 <HAL_RCC_OscConfig+0x240>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4a75      	ldr	r2, [pc, #468]	; (8007018 <HAL_RCC_OscConfig+0x240>)
 8006e44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e48:	6013      	str	r3, [r2, #0]
 8006e4a:	e01d      	b.n	8006e88 <HAL_RCC_OscConfig+0xb0>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	685b      	ldr	r3, [r3, #4]
 8006e50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006e54:	d10c      	bne.n	8006e70 <HAL_RCC_OscConfig+0x98>
 8006e56:	4b70      	ldr	r3, [pc, #448]	; (8007018 <HAL_RCC_OscConfig+0x240>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4a6f      	ldr	r2, [pc, #444]	; (8007018 <HAL_RCC_OscConfig+0x240>)
 8006e5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006e60:	6013      	str	r3, [r2, #0]
 8006e62:	4b6d      	ldr	r3, [pc, #436]	; (8007018 <HAL_RCC_OscConfig+0x240>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4a6c      	ldr	r2, [pc, #432]	; (8007018 <HAL_RCC_OscConfig+0x240>)
 8006e68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e6c:	6013      	str	r3, [r2, #0]
 8006e6e:	e00b      	b.n	8006e88 <HAL_RCC_OscConfig+0xb0>
 8006e70:	4b69      	ldr	r3, [pc, #420]	; (8007018 <HAL_RCC_OscConfig+0x240>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a68      	ldr	r2, [pc, #416]	; (8007018 <HAL_RCC_OscConfig+0x240>)
 8006e76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e7a:	6013      	str	r3, [r2, #0]
 8006e7c:	4b66      	ldr	r3, [pc, #408]	; (8007018 <HAL_RCC_OscConfig+0x240>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a65      	ldr	r2, [pc, #404]	; (8007018 <HAL_RCC_OscConfig+0x240>)
 8006e82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006e86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	685b      	ldr	r3, [r3, #4]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d013      	beq.n	8006eb8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e90:	f7fc fbe6 	bl	8003660 <HAL_GetTick>
 8006e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e96:	e008      	b.n	8006eaa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006e98:	f7fc fbe2 	bl	8003660 <HAL_GetTick>
 8006e9c:	4602      	mov	r2, r0
 8006e9e:	693b      	ldr	r3, [r7, #16]
 8006ea0:	1ad3      	subs	r3, r2, r3
 8006ea2:	2b64      	cmp	r3, #100	; 0x64
 8006ea4:	d901      	bls.n	8006eaa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006ea6:	2303      	movs	r3, #3
 8006ea8:	e207      	b.n	80072ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006eaa:	4b5b      	ldr	r3, [pc, #364]	; (8007018 <HAL_RCC_OscConfig+0x240>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d0f0      	beq.n	8006e98 <HAL_RCC_OscConfig+0xc0>
 8006eb6:	e014      	b.n	8006ee2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006eb8:	f7fc fbd2 	bl	8003660 <HAL_GetTick>
 8006ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006ebe:	e008      	b.n	8006ed2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006ec0:	f7fc fbce 	bl	8003660 <HAL_GetTick>
 8006ec4:	4602      	mov	r2, r0
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	1ad3      	subs	r3, r2, r3
 8006eca:	2b64      	cmp	r3, #100	; 0x64
 8006ecc:	d901      	bls.n	8006ed2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006ece:	2303      	movs	r3, #3
 8006ed0:	e1f3      	b.n	80072ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006ed2:	4b51      	ldr	r3, [pc, #324]	; (8007018 <HAL_RCC_OscConfig+0x240>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d1f0      	bne.n	8006ec0 <HAL_RCC_OscConfig+0xe8>
 8006ede:	e000      	b.n	8006ee2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ee0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f003 0302 	and.w	r3, r3, #2
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d063      	beq.n	8006fb6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006eee:	4b4a      	ldr	r3, [pc, #296]	; (8007018 <HAL_RCC_OscConfig+0x240>)
 8006ef0:	689b      	ldr	r3, [r3, #8]
 8006ef2:	f003 030c 	and.w	r3, r3, #12
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d00b      	beq.n	8006f12 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006efa:	4b47      	ldr	r3, [pc, #284]	; (8007018 <HAL_RCC_OscConfig+0x240>)
 8006efc:	689b      	ldr	r3, [r3, #8]
 8006efe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006f02:	2b08      	cmp	r3, #8
 8006f04:	d11c      	bne.n	8006f40 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006f06:	4b44      	ldr	r3, [pc, #272]	; (8007018 <HAL_RCC_OscConfig+0x240>)
 8006f08:	685b      	ldr	r3, [r3, #4]
 8006f0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d116      	bne.n	8006f40 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006f12:	4b41      	ldr	r3, [pc, #260]	; (8007018 <HAL_RCC_OscConfig+0x240>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f003 0302 	and.w	r3, r3, #2
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d005      	beq.n	8006f2a <HAL_RCC_OscConfig+0x152>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	68db      	ldr	r3, [r3, #12]
 8006f22:	2b01      	cmp	r3, #1
 8006f24:	d001      	beq.n	8006f2a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006f26:	2301      	movs	r3, #1
 8006f28:	e1c7      	b.n	80072ba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f2a:	4b3b      	ldr	r3, [pc, #236]	; (8007018 <HAL_RCC_OscConfig+0x240>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	691b      	ldr	r3, [r3, #16]
 8006f36:	00db      	lsls	r3, r3, #3
 8006f38:	4937      	ldr	r1, [pc, #220]	; (8007018 <HAL_RCC_OscConfig+0x240>)
 8006f3a:	4313      	orrs	r3, r2
 8006f3c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006f3e:	e03a      	b.n	8006fb6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	68db      	ldr	r3, [r3, #12]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d020      	beq.n	8006f8a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006f48:	4b34      	ldr	r3, [pc, #208]	; (800701c <HAL_RCC_OscConfig+0x244>)
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f4e:	f7fc fb87 	bl	8003660 <HAL_GetTick>
 8006f52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f54:	e008      	b.n	8006f68 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006f56:	f7fc fb83 	bl	8003660 <HAL_GetTick>
 8006f5a:	4602      	mov	r2, r0
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	1ad3      	subs	r3, r2, r3
 8006f60:	2b02      	cmp	r3, #2
 8006f62:	d901      	bls.n	8006f68 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006f64:	2303      	movs	r3, #3
 8006f66:	e1a8      	b.n	80072ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f68:	4b2b      	ldr	r3, [pc, #172]	; (8007018 <HAL_RCC_OscConfig+0x240>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f003 0302 	and.w	r3, r3, #2
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d0f0      	beq.n	8006f56 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f74:	4b28      	ldr	r3, [pc, #160]	; (8007018 <HAL_RCC_OscConfig+0x240>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	691b      	ldr	r3, [r3, #16]
 8006f80:	00db      	lsls	r3, r3, #3
 8006f82:	4925      	ldr	r1, [pc, #148]	; (8007018 <HAL_RCC_OscConfig+0x240>)
 8006f84:	4313      	orrs	r3, r2
 8006f86:	600b      	str	r3, [r1, #0]
 8006f88:	e015      	b.n	8006fb6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006f8a:	4b24      	ldr	r3, [pc, #144]	; (800701c <HAL_RCC_OscConfig+0x244>)
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f90:	f7fc fb66 	bl	8003660 <HAL_GetTick>
 8006f94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f96:	e008      	b.n	8006faa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006f98:	f7fc fb62 	bl	8003660 <HAL_GetTick>
 8006f9c:	4602      	mov	r2, r0
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	1ad3      	subs	r3, r2, r3
 8006fa2:	2b02      	cmp	r3, #2
 8006fa4:	d901      	bls.n	8006faa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006fa6:	2303      	movs	r3, #3
 8006fa8:	e187      	b.n	80072ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006faa:	4b1b      	ldr	r3, [pc, #108]	; (8007018 <HAL_RCC_OscConfig+0x240>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f003 0302 	and.w	r3, r3, #2
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d1f0      	bne.n	8006f98 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f003 0308 	and.w	r3, r3, #8
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d036      	beq.n	8007030 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	695b      	ldr	r3, [r3, #20]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d016      	beq.n	8006ff8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006fca:	4b15      	ldr	r3, [pc, #84]	; (8007020 <HAL_RCC_OscConfig+0x248>)
 8006fcc:	2201      	movs	r2, #1
 8006fce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fd0:	f7fc fb46 	bl	8003660 <HAL_GetTick>
 8006fd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006fd6:	e008      	b.n	8006fea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006fd8:	f7fc fb42 	bl	8003660 <HAL_GetTick>
 8006fdc:	4602      	mov	r2, r0
 8006fde:	693b      	ldr	r3, [r7, #16]
 8006fe0:	1ad3      	subs	r3, r2, r3
 8006fe2:	2b02      	cmp	r3, #2
 8006fe4:	d901      	bls.n	8006fea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006fe6:	2303      	movs	r3, #3
 8006fe8:	e167      	b.n	80072ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006fea:	4b0b      	ldr	r3, [pc, #44]	; (8007018 <HAL_RCC_OscConfig+0x240>)
 8006fec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fee:	f003 0302 	and.w	r3, r3, #2
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d0f0      	beq.n	8006fd8 <HAL_RCC_OscConfig+0x200>
 8006ff6:	e01b      	b.n	8007030 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006ff8:	4b09      	ldr	r3, [pc, #36]	; (8007020 <HAL_RCC_OscConfig+0x248>)
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ffe:	f7fc fb2f 	bl	8003660 <HAL_GetTick>
 8007002:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007004:	e00e      	b.n	8007024 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007006:	f7fc fb2b 	bl	8003660 <HAL_GetTick>
 800700a:	4602      	mov	r2, r0
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	1ad3      	subs	r3, r2, r3
 8007010:	2b02      	cmp	r3, #2
 8007012:	d907      	bls.n	8007024 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007014:	2303      	movs	r3, #3
 8007016:	e150      	b.n	80072ba <HAL_RCC_OscConfig+0x4e2>
 8007018:	40023800 	.word	0x40023800
 800701c:	42470000 	.word	0x42470000
 8007020:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007024:	4b88      	ldr	r3, [pc, #544]	; (8007248 <HAL_RCC_OscConfig+0x470>)
 8007026:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007028:	f003 0302 	and.w	r3, r3, #2
 800702c:	2b00      	cmp	r3, #0
 800702e:	d1ea      	bne.n	8007006 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f003 0304 	and.w	r3, r3, #4
 8007038:	2b00      	cmp	r3, #0
 800703a:	f000 8097 	beq.w	800716c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800703e:	2300      	movs	r3, #0
 8007040:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007042:	4b81      	ldr	r3, [pc, #516]	; (8007248 <HAL_RCC_OscConfig+0x470>)
 8007044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007046:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800704a:	2b00      	cmp	r3, #0
 800704c:	d10f      	bne.n	800706e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800704e:	2300      	movs	r3, #0
 8007050:	60bb      	str	r3, [r7, #8]
 8007052:	4b7d      	ldr	r3, [pc, #500]	; (8007248 <HAL_RCC_OscConfig+0x470>)
 8007054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007056:	4a7c      	ldr	r2, [pc, #496]	; (8007248 <HAL_RCC_OscConfig+0x470>)
 8007058:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800705c:	6413      	str	r3, [r2, #64]	; 0x40
 800705e:	4b7a      	ldr	r3, [pc, #488]	; (8007248 <HAL_RCC_OscConfig+0x470>)
 8007060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007062:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007066:	60bb      	str	r3, [r7, #8]
 8007068:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800706a:	2301      	movs	r3, #1
 800706c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800706e:	4b77      	ldr	r3, [pc, #476]	; (800724c <HAL_RCC_OscConfig+0x474>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007076:	2b00      	cmp	r3, #0
 8007078:	d118      	bne.n	80070ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800707a:	4b74      	ldr	r3, [pc, #464]	; (800724c <HAL_RCC_OscConfig+0x474>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4a73      	ldr	r2, [pc, #460]	; (800724c <HAL_RCC_OscConfig+0x474>)
 8007080:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007084:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007086:	f7fc faeb 	bl	8003660 <HAL_GetTick>
 800708a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800708c:	e008      	b.n	80070a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800708e:	f7fc fae7 	bl	8003660 <HAL_GetTick>
 8007092:	4602      	mov	r2, r0
 8007094:	693b      	ldr	r3, [r7, #16]
 8007096:	1ad3      	subs	r3, r2, r3
 8007098:	2b02      	cmp	r3, #2
 800709a:	d901      	bls.n	80070a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800709c:	2303      	movs	r3, #3
 800709e:	e10c      	b.n	80072ba <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80070a0:	4b6a      	ldr	r3, [pc, #424]	; (800724c <HAL_RCC_OscConfig+0x474>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d0f0      	beq.n	800708e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	689b      	ldr	r3, [r3, #8]
 80070b0:	2b01      	cmp	r3, #1
 80070b2:	d106      	bne.n	80070c2 <HAL_RCC_OscConfig+0x2ea>
 80070b4:	4b64      	ldr	r3, [pc, #400]	; (8007248 <HAL_RCC_OscConfig+0x470>)
 80070b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070b8:	4a63      	ldr	r2, [pc, #396]	; (8007248 <HAL_RCC_OscConfig+0x470>)
 80070ba:	f043 0301 	orr.w	r3, r3, #1
 80070be:	6713      	str	r3, [r2, #112]	; 0x70
 80070c0:	e01c      	b.n	80070fc <HAL_RCC_OscConfig+0x324>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	689b      	ldr	r3, [r3, #8]
 80070c6:	2b05      	cmp	r3, #5
 80070c8:	d10c      	bne.n	80070e4 <HAL_RCC_OscConfig+0x30c>
 80070ca:	4b5f      	ldr	r3, [pc, #380]	; (8007248 <HAL_RCC_OscConfig+0x470>)
 80070cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070ce:	4a5e      	ldr	r2, [pc, #376]	; (8007248 <HAL_RCC_OscConfig+0x470>)
 80070d0:	f043 0304 	orr.w	r3, r3, #4
 80070d4:	6713      	str	r3, [r2, #112]	; 0x70
 80070d6:	4b5c      	ldr	r3, [pc, #368]	; (8007248 <HAL_RCC_OscConfig+0x470>)
 80070d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070da:	4a5b      	ldr	r2, [pc, #364]	; (8007248 <HAL_RCC_OscConfig+0x470>)
 80070dc:	f043 0301 	orr.w	r3, r3, #1
 80070e0:	6713      	str	r3, [r2, #112]	; 0x70
 80070e2:	e00b      	b.n	80070fc <HAL_RCC_OscConfig+0x324>
 80070e4:	4b58      	ldr	r3, [pc, #352]	; (8007248 <HAL_RCC_OscConfig+0x470>)
 80070e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070e8:	4a57      	ldr	r2, [pc, #348]	; (8007248 <HAL_RCC_OscConfig+0x470>)
 80070ea:	f023 0301 	bic.w	r3, r3, #1
 80070ee:	6713      	str	r3, [r2, #112]	; 0x70
 80070f0:	4b55      	ldr	r3, [pc, #340]	; (8007248 <HAL_RCC_OscConfig+0x470>)
 80070f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070f4:	4a54      	ldr	r2, [pc, #336]	; (8007248 <HAL_RCC_OscConfig+0x470>)
 80070f6:	f023 0304 	bic.w	r3, r3, #4
 80070fa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	689b      	ldr	r3, [r3, #8]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d015      	beq.n	8007130 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007104:	f7fc faac 	bl	8003660 <HAL_GetTick>
 8007108:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800710a:	e00a      	b.n	8007122 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800710c:	f7fc faa8 	bl	8003660 <HAL_GetTick>
 8007110:	4602      	mov	r2, r0
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	1ad3      	subs	r3, r2, r3
 8007116:	f241 3288 	movw	r2, #5000	; 0x1388
 800711a:	4293      	cmp	r3, r2
 800711c:	d901      	bls.n	8007122 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800711e:	2303      	movs	r3, #3
 8007120:	e0cb      	b.n	80072ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007122:	4b49      	ldr	r3, [pc, #292]	; (8007248 <HAL_RCC_OscConfig+0x470>)
 8007124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007126:	f003 0302 	and.w	r3, r3, #2
 800712a:	2b00      	cmp	r3, #0
 800712c:	d0ee      	beq.n	800710c <HAL_RCC_OscConfig+0x334>
 800712e:	e014      	b.n	800715a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007130:	f7fc fa96 	bl	8003660 <HAL_GetTick>
 8007134:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007136:	e00a      	b.n	800714e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007138:	f7fc fa92 	bl	8003660 <HAL_GetTick>
 800713c:	4602      	mov	r2, r0
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	1ad3      	subs	r3, r2, r3
 8007142:	f241 3288 	movw	r2, #5000	; 0x1388
 8007146:	4293      	cmp	r3, r2
 8007148:	d901      	bls.n	800714e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800714a:	2303      	movs	r3, #3
 800714c:	e0b5      	b.n	80072ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800714e:	4b3e      	ldr	r3, [pc, #248]	; (8007248 <HAL_RCC_OscConfig+0x470>)
 8007150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007152:	f003 0302 	and.w	r3, r3, #2
 8007156:	2b00      	cmp	r3, #0
 8007158:	d1ee      	bne.n	8007138 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800715a:	7dfb      	ldrb	r3, [r7, #23]
 800715c:	2b01      	cmp	r3, #1
 800715e:	d105      	bne.n	800716c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007160:	4b39      	ldr	r3, [pc, #228]	; (8007248 <HAL_RCC_OscConfig+0x470>)
 8007162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007164:	4a38      	ldr	r2, [pc, #224]	; (8007248 <HAL_RCC_OscConfig+0x470>)
 8007166:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800716a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	699b      	ldr	r3, [r3, #24]
 8007170:	2b00      	cmp	r3, #0
 8007172:	f000 80a1 	beq.w	80072b8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007176:	4b34      	ldr	r3, [pc, #208]	; (8007248 <HAL_RCC_OscConfig+0x470>)
 8007178:	689b      	ldr	r3, [r3, #8]
 800717a:	f003 030c 	and.w	r3, r3, #12
 800717e:	2b08      	cmp	r3, #8
 8007180:	d05c      	beq.n	800723c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	699b      	ldr	r3, [r3, #24]
 8007186:	2b02      	cmp	r3, #2
 8007188:	d141      	bne.n	800720e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800718a:	4b31      	ldr	r3, [pc, #196]	; (8007250 <HAL_RCC_OscConfig+0x478>)
 800718c:	2200      	movs	r2, #0
 800718e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007190:	f7fc fa66 	bl	8003660 <HAL_GetTick>
 8007194:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007196:	e008      	b.n	80071aa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007198:	f7fc fa62 	bl	8003660 <HAL_GetTick>
 800719c:	4602      	mov	r2, r0
 800719e:	693b      	ldr	r3, [r7, #16]
 80071a0:	1ad3      	subs	r3, r2, r3
 80071a2:	2b02      	cmp	r3, #2
 80071a4:	d901      	bls.n	80071aa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80071a6:	2303      	movs	r3, #3
 80071a8:	e087      	b.n	80072ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80071aa:	4b27      	ldr	r3, [pc, #156]	; (8007248 <HAL_RCC_OscConfig+0x470>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d1f0      	bne.n	8007198 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	69da      	ldr	r2, [r3, #28]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6a1b      	ldr	r3, [r3, #32]
 80071be:	431a      	orrs	r2, r3
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071c4:	019b      	lsls	r3, r3, #6
 80071c6:	431a      	orrs	r2, r3
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071cc:	085b      	lsrs	r3, r3, #1
 80071ce:	3b01      	subs	r3, #1
 80071d0:	041b      	lsls	r3, r3, #16
 80071d2:	431a      	orrs	r2, r3
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071d8:	061b      	lsls	r3, r3, #24
 80071da:	491b      	ldr	r1, [pc, #108]	; (8007248 <HAL_RCC_OscConfig+0x470>)
 80071dc:	4313      	orrs	r3, r2
 80071de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80071e0:	4b1b      	ldr	r3, [pc, #108]	; (8007250 <HAL_RCC_OscConfig+0x478>)
 80071e2:	2201      	movs	r2, #1
 80071e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071e6:	f7fc fa3b 	bl	8003660 <HAL_GetTick>
 80071ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80071ec:	e008      	b.n	8007200 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80071ee:	f7fc fa37 	bl	8003660 <HAL_GetTick>
 80071f2:	4602      	mov	r2, r0
 80071f4:	693b      	ldr	r3, [r7, #16]
 80071f6:	1ad3      	subs	r3, r2, r3
 80071f8:	2b02      	cmp	r3, #2
 80071fa:	d901      	bls.n	8007200 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80071fc:	2303      	movs	r3, #3
 80071fe:	e05c      	b.n	80072ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007200:	4b11      	ldr	r3, [pc, #68]	; (8007248 <HAL_RCC_OscConfig+0x470>)
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007208:	2b00      	cmp	r3, #0
 800720a:	d0f0      	beq.n	80071ee <HAL_RCC_OscConfig+0x416>
 800720c:	e054      	b.n	80072b8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800720e:	4b10      	ldr	r3, [pc, #64]	; (8007250 <HAL_RCC_OscConfig+0x478>)
 8007210:	2200      	movs	r2, #0
 8007212:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007214:	f7fc fa24 	bl	8003660 <HAL_GetTick>
 8007218:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800721a:	e008      	b.n	800722e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800721c:	f7fc fa20 	bl	8003660 <HAL_GetTick>
 8007220:	4602      	mov	r2, r0
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	1ad3      	subs	r3, r2, r3
 8007226:	2b02      	cmp	r3, #2
 8007228:	d901      	bls.n	800722e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800722a:	2303      	movs	r3, #3
 800722c:	e045      	b.n	80072ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800722e:	4b06      	ldr	r3, [pc, #24]	; (8007248 <HAL_RCC_OscConfig+0x470>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007236:	2b00      	cmp	r3, #0
 8007238:	d1f0      	bne.n	800721c <HAL_RCC_OscConfig+0x444>
 800723a:	e03d      	b.n	80072b8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	699b      	ldr	r3, [r3, #24]
 8007240:	2b01      	cmp	r3, #1
 8007242:	d107      	bne.n	8007254 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007244:	2301      	movs	r3, #1
 8007246:	e038      	b.n	80072ba <HAL_RCC_OscConfig+0x4e2>
 8007248:	40023800 	.word	0x40023800
 800724c:	40007000 	.word	0x40007000
 8007250:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007254:	4b1b      	ldr	r3, [pc, #108]	; (80072c4 <HAL_RCC_OscConfig+0x4ec>)
 8007256:	685b      	ldr	r3, [r3, #4]
 8007258:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	699b      	ldr	r3, [r3, #24]
 800725e:	2b01      	cmp	r3, #1
 8007260:	d028      	beq.n	80072b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800726c:	429a      	cmp	r2, r3
 800726e:	d121      	bne.n	80072b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800727a:	429a      	cmp	r2, r3
 800727c:	d11a      	bne.n	80072b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800727e:	68fa      	ldr	r2, [r7, #12]
 8007280:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007284:	4013      	ands	r3, r2
 8007286:	687a      	ldr	r2, [r7, #4]
 8007288:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800728a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800728c:	4293      	cmp	r3, r2
 800728e:	d111      	bne.n	80072b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800729a:	085b      	lsrs	r3, r3, #1
 800729c:	3b01      	subs	r3, #1
 800729e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80072a0:	429a      	cmp	r2, r3
 80072a2:	d107      	bne.n	80072b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80072b0:	429a      	cmp	r2, r3
 80072b2:	d001      	beq.n	80072b8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80072b4:	2301      	movs	r3, #1
 80072b6:	e000      	b.n	80072ba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80072b8:	2300      	movs	r3, #0
}
 80072ba:	4618      	mov	r0, r3
 80072bc:	3718      	adds	r7, #24
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}
 80072c2:	bf00      	nop
 80072c4:	40023800 	.word	0x40023800

080072c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b084      	sub	sp, #16
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
 80072d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d101      	bne.n	80072dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80072d8:	2301      	movs	r3, #1
 80072da:	e0cc      	b.n	8007476 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80072dc:	4b68      	ldr	r3, [pc, #416]	; (8007480 <HAL_RCC_ClockConfig+0x1b8>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f003 0307 	and.w	r3, r3, #7
 80072e4:	683a      	ldr	r2, [r7, #0]
 80072e6:	429a      	cmp	r2, r3
 80072e8:	d90c      	bls.n	8007304 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80072ea:	4b65      	ldr	r3, [pc, #404]	; (8007480 <HAL_RCC_ClockConfig+0x1b8>)
 80072ec:	683a      	ldr	r2, [r7, #0]
 80072ee:	b2d2      	uxtb	r2, r2
 80072f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80072f2:	4b63      	ldr	r3, [pc, #396]	; (8007480 <HAL_RCC_ClockConfig+0x1b8>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f003 0307 	and.w	r3, r3, #7
 80072fa:	683a      	ldr	r2, [r7, #0]
 80072fc:	429a      	cmp	r2, r3
 80072fe:	d001      	beq.n	8007304 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007300:	2301      	movs	r3, #1
 8007302:	e0b8      	b.n	8007476 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f003 0302 	and.w	r3, r3, #2
 800730c:	2b00      	cmp	r3, #0
 800730e:	d020      	beq.n	8007352 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f003 0304 	and.w	r3, r3, #4
 8007318:	2b00      	cmp	r3, #0
 800731a:	d005      	beq.n	8007328 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800731c:	4b59      	ldr	r3, [pc, #356]	; (8007484 <HAL_RCC_ClockConfig+0x1bc>)
 800731e:	689b      	ldr	r3, [r3, #8]
 8007320:	4a58      	ldr	r2, [pc, #352]	; (8007484 <HAL_RCC_ClockConfig+0x1bc>)
 8007322:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007326:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f003 0308 	and.w	r3, r3, #8
 8007330:	2b00      	cmp	r3, #0
 8007332:	d005      	beq.n	8007340 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007334:	4b53      	ldr	r3, [pc, #332]	; (8007484 <HAL_RCC_ClockConfig+0x1bc>)
 8007336:	689b      	ldr	r3, [r3, #8]
 8007338:	4a52      	ldr	r2, [pc, #328]	; (8007484 <HAL_RCC_ClockConfig+0x1bc>)
 800733a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800733e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007340:	4b50      	ldr	r3, [pc, #320]	; (8007484 <HAL_RCC_ClockConfig+0x1bc>)
 8007342:	689b      	ldr	r3, [r3, #8]
 8007344:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	689b      	ldr	r3, [r3, #8]
 800734c:	494d      	ldr	r1, [pc, #308]	; (8007484 <HAL_RCC_ClockConfig+0x1bc>)
 800734e:	4313      	orrs	r3, r2
 8007350:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f003 0301 	and.w	r3, r3, #1
 800735a:	2b00      	cmp	r3, #0
 800735c:	d044      	beq.n	80073e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	685b      	ldr	r3, [r3, #4]
 8007362:	2b01      	cmp	r3, #1
 8007364:	d107      	bne.n	8007376 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007366:	4b47      	ldr	r3, [pc, #284]	; (8007484 <HAL_RCC_ClockConfig+0x1bc>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800736e:	2b00      	cmp	r3, #0
 8007370:	d119      	bne.n	80073a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007372:	2301      	movs	r3, #1
 8007374:	e07f      	b.n	8007476 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	685b      	ldr	r3, [r3, #4]
 800737a:	2b02      	cmp	r3, #2
 800737c:	d003      	beq.n	8007386 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007382:	2b03      	cmp	r3, #3
 8007384:	d107      	bne.n	8007396 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007386:	4b3f      	ldr	r3, [pc, #252]	; (8007484 <HAL_RCC_ClockConfig+0x1bc>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800738e:	2b00      	cmp	r3, #0
 8007390:	d109      	bne.n	80073a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007392:	2301      	movs	r3, #1
 8007394:	e06f      	b.n	8007476 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007396:	4b3b      	ldr	r3, [pc, #236]	; (8007484 <HAL_RCC_ClockConfig+0x1bc>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f003 0302 	and.w	r3, r3, #2
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d101      	bne.n	80073a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80073a2:	2301      	movs	r3, #1
 80073a4:	e067      	b.n	8007476 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80073a6:	4b37      	ldr	r3, [pc, #220]	; (8007484 <HAL_RCC_ClockConfig+0x1bc>)
 80073a8:	689b      	ldr	r3, [r3, #8]
 80073aa:	f023 0203 	bic.w	r2, r3, #3
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	685b      	ldr	r3, [r3, #4]
 80073b2:	4934      	ldr	r1, [pc, #208]	; (8007484 <HAL_RCC_ClockConfig+0x1bc>)
 80073b4:	4313      	orrs	r3, r2
 80073b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80073b8:	f7fc f952 	bl	8003660 <HAL_GetTick>
 80073bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80073be:	e00a      	b.n	80073d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80073c0:	f7fc f94e 	bl	8003660 <HAL_GetTick>
 80073c4:	4602      	mov	r2, r0
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	1ad3      	subs	r3, r2, r3
 80073ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d901      	bls.n	80073d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80073d2:	2303      	movs	r3, #3
 80073d4:	e04f      	b.n	8007476 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80073d6:	4b2b      	ldr	r3, [pc, #172]	; (8007484 <HAL_RCC_ClockConfig+0x1bc>)
 80073d8:	689b      	ldr	r3, [r3, #8]
 80073da:	f003 020c 	and.w	r2, r3, #12
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	685b      	ldr	r3, [r3, #4]
 80073e2:	009b      	lsls	r3, r3, #2
 80073e4:	429a      	cmp	r2, r3
 80073e6:	d1eb      	bne.n	80073c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80073e8:	4b25      	ldr	r3, [pc, #148]	; (8007480 <HAL_RCC_ClockConfig+0x1b8>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f003 0307 	and.w	r3, r3, #7
 80073f0:	683a      	ldr	r2, [r7, #0]
 80073f2:	429a      	cmp	r2, r3
 80073f4:	d20c      	bcs.n	8007410 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80073f6:	4b22      	ldr	r3, [pc, #136]	; (8007480 <HAL_RCC_ClockConfig+0x1b8>)
 80073f8:	683a      	ldr	r2, [r7, #0]
 80073fa:	b2d2      	uxtb	r2, r2
 80073fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80073fe:	4b20      	ldr	r3, [pc, #128]	; (8007480 <HAL_RCC_ClockConfig+0x1b8>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f003 0307 	and.w	r3, r3, #7
 8007406:	683a      	ldr	r2, [r7, #0]
 8007408:	429a      	cmp	r2, r3
 800740a:	d001      	beq.n	8007410 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800740c:	2301      	movs	r3, #1
 800740e:	e032      	b.n	8007476 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f003 0304 	and.w	r3, r3, #4
 8007418:	2b00      	cmp	r3, #0
 800741a:	d008      	beq.n	800742e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800741c:	4b19      	ldr	r3, [pc, #100]	; (8007484 <HAL_RCC_ClockConfig+0x1bc>)
 800741e:	689b      	ldr	r3, [r3, #8]
 8007420:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	68db      	ldr	r3, [r3, #12]
 8007428:	4916      	ldr	r1, [pc, #88]	; (8007484 <HAL_RCC_ClockConfig+0x1bc>)
 800742a:	4313      	orrs	r3, r2
 800742c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f003 0308 	and.w	r3, r3, #8
 8007436:	2b00      	cmp	r3, #0
 8007438:	d009      	beq.n	800744e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800743a:	4b12      	ldr	r3, [pc, #72]	; (8007484 <HAL_RCC_ClockConfig+0x1bc>)
 800743c:	689b      	ldr	r3, [r3, #8]
 800743e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	691b      	ldr	r3, [r3, #16]
 8007446:	00db      	lsls	r3, r3, #3
 8007448:	490e      	ldr	r1, [pc, #56]	; (8007484 <HAL_RCC_ClockConfig+0x1bc>)
 800744a:	4313      	orrs	r3, r2
 800744c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800744e:	f000 f821 	bl	8007494 <HAL_RCC_GetSysClockFreq>
 8007452:	4602      	mov	r2, r0
 8007454:	4b0b      	ldr	r3, [pc, #44]	; (8007484 <HAL_RCC_ClockConfig+0x1bc>)
 8007456:	689b      	ldr	r3, [r3, #8]
 8007458:	091b      	lsrs	r3, r3, #4
 800745a:	f003 030f 	and.w	r3, r3, #15
 800745e:	490a      	ldr	r1, [pc, #40]	; (8007488 <HAL_RCC_ClockConfig+0x1c0>)
 8007460:	5ccb      	ldrb	r3, [r1, r3]
 8007462:	fa22 f303 	lsr.w	r3, r2, r3
 8007466:	4a09      	ldr	r2, [pc, #36]	; (800748c <HAL_RCC_ClockConfig+0x1c4>)
 8007468:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800746a:	4b09      	ldr	r3, [pc, #36]	; (8007490 <HAL_RCC_ClockConfig+0x1c8>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4618      	mov	r0, r3
 8007470:	f7fc f8b2 	bl	80035d8 <HAL_InitTick>

  return HAL_OK;
 8007474:	2300      	movs	r3, #0
}
 8007476:	4618      	mov	r0, r3
 8007478:	3710      	adds	r7, #16
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}
 800747e:	bf00      	nop
 8007480:	40023c00 	.word	0x40023c00
 8007484:	40023800 	.word	0x40023800
 8007488:	0800c7b8 	.word	0x0800c7b8
 800748c:	2000000c 	.word	0x2000000c
 8007490:	20000020 	.word	0x20000020

08007494 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007494:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007498:	b094      	sub	sp, #80	; 0x50
 800749a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800749c:	2300      	movs	r3, #0
 800749e:	647b      	str	r3, [r7, #68]	; 0x44
 80074a0:	2300      	movs	r3, #0
 80074a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80074a4:	2300      	movs	r3, #0
 80074a6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80074a8:	2300      	movs	r3, #0
 80074aa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80074ac:	4b79      	ldr	r3, [pc, #484]	; (8007694 <HAL_RCC_GetSysClockFreq+0x200>)
 80074ae:	689b      	ldr	r3, [r3, #8]
 80074b0:	f003 030c 	and.w	r3, r3, #12
 80074b4:	2b08      	cmp	r3, #8
 80074b6:	d00d      	beq.n	80074d4 <HAL_RCC_GetSysClockFreq+0x40>
 80074b8:	2b08      	cmp	r3, #8
 80074ba:	f200 80e1 	bhi.w	8007680 <HAL_RCC_GetSysClockFreq+0x1ec>
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d002      	beq.n	80074c8 <HAL_RCC_GetSysClockFreq+0x34>
 80074c2:	2b04      	cmp	r3, #4
 80074c4:	d003      	beq.n	80074ce <HAL_RCC_GetSysClockFreq+0x3a>
 80074c6:	e0db      	b.n	8007680 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80074c8:	4b73      	ldr	r3, [pc, #460]	; (8007698 <HAL_RCC_GetSysClockFreq+0x204>)
 80074ca:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80074cc:	e0db      	b.n	8007686 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80074ce:	4b73      	ldr	r3, [pc, #460]	; (800769c <HAL_RCC_GetSysClockFreq+0x208>)
 80074d0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80074d2:	e0d8      	b.n	8007686 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80074d4:	4b6f      	ldr	r3, [pc, #444]	; (8007694 <HAL_RCC_GetSysClockFreq+0x200>)
 80074d6:	685b      	ldr	r3, [r3, #4]
 80074d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80074dc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80074de:	4b6d      	ldr	r3, [pc, #436]	; (8007694 <HAL_RCC_GetSysClockFreq+0x200>)
 80074e0:	685b      	ldr	r3, [r3, #4]
 80074e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d063      	beq.n	80075b2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80074ea:	4b6a      	ldr	r3, [pc, #424]	; (8007694 <HAL_RCC_GetSysClockFreq+0x200>)
 80074ec:	685b      	ldr	r3, [r3, #4]
 80074ee:	099b      	lsrs	r3, r3, #6
 80074f0:	2200      	movs	r2, #0
 80074f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80074f4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80074f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074fc:	633b      	str	r3, [r7, #48]	; 0x30
 80074fe:	2300      	movs	r3, #0
 8007500:	637b      	str	r3, [r7, #52]	; 0x34
 8007502:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007506:	4622      	mov	r2, r4
 8007508:	462b      	mov	r3, r5
 800750a:	f04f 0000 	mov.w	r0, #0
 800750e:	f04f 0100 	mov.w	r1, #0
 8007512:	0159      	lsls	r1, r3, #5
 8007514:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007518:	0150      	lsls	r0, r2, #5
 800751a:	4602      	mov	r2, r0
 800751c:	460b      	mov	r3, r1
 800751e:	4621      	mov	r1, r4
 8007520:	1a51      	subs	r1, r2, r1
 8007522:	6139      	str	r1, [r7, #16]
 8007524:	4629      	mov	r1, r5
 8007526:	eb63 0301 	sbc.w	r3, r3, r1
 800752a:	617b      	str	r3, [r7, #20]
 800752c:	f04f 0200 	mov.w	r2, #0
 8007530:	f04f 0300 	mov.w	r3, #0
 8007534:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007538:	4659      	mov	r1, fp
 800753a:	018b      	lsls	r3, r1, #6
 800753c:	4651      	mov	r1, sl
 800753e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007542:	4651      	mov	r1, sl
 8007544:	018a      	lsls	r2, r1, #6
 8007546:	4651      	mov	r1, sl
 8007548:	ebb2 0801 	subs.w	r8, r2, r1
 800754c:	4659      	mov	r1, fp
 800754e:	eb63 0901 	sbc.w	r9, r3, r1
 8007552:	f04f 0200 	mov.w	r2, #0
 8007556:	f04f 0300 	mov.w	r3, #0
 800755a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800755e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007562:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007566:	4690      	mov	r8, r2
 8007568:	4699      	mov	r9, r3
 800756a:	4623      	mov	r3, r4
 800756c:	eb18 0303 	adds.w	r3, r8, r3
 8007570:	60bb      	str	r3, [r7, #8]
 8007572:	462b      	mov	r3, r5
 8007574:	eb49 0303 	adc.w	r3, r9, r3
 8007578:	60fb      	str	r3, [r7, #12]
 800757a:	f04f 0200 	mov.w	r2, #0
 800757e:	f04f 0300 	mov.w	r3, #0
 8007582:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007586:	4629      	mov	r1, r5
 8007588:	024b      	lsls	r3, r1, #9
 800758a:	4621      	mov	r1, r4
 800758c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007590:	4621      	mov	r1, r4
 8007592:	024a      	lsls	r2, r1, #9
 8007594:	4610      	mov	r0, r2
 8007596:	4619      	mov	r1, r3
 8007598:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800759a:	2200      	movs	r2, #0
 800759c:	62bb      	str	r3, [r7, #40]	; 0x28
 800759e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80075a0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80075a4:	f7f9 fb78 	bl	8000c98 <__aeabi_uldivmod>
 80075a8:	4602      	mov	r2, r0
 80075aa:	460b      	mov	r3, r1
 80075ac:	4613      	mov	r3, r2
 80075ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80075b0:	e058      	b.n	8007664 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80075b2:	4b38      	ldr	r3, [pc, #224]	; (8007694 <HAL_RCC_GetSysClockFreq+0x200>)
 80075b4:	685b      	ldr	r3, [r3, #4]
 80075b6:	099b      	lsrs	r3, r3, #6
 80075b8:	2200      	movs	r2, #0
 80075ba:	4618      	mov	r0, r3
 80075bc:	4611      	mov	r1, r2
 80075be:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80075c2:	623b      	str	r3, [r7, #32]
 80075c4:	2300      	movs	r3, #0
 80075c6:	627b      	str	r3, [r7, #36]	; 0x24
 80075c8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80075cc:	4642      	mov	r2, r8
 80075ce:	464b      	mov	r3, r9
 80075d0:	f04f 0000 	mov.w	r0, #0
 80075d4:	f04f 0100 	mov.w	r1, #0
 80075d8:	0159      	lsls	r1, r3, #5
 80075da:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80075de:	0150      	lsls	r0, r2, #5
 80075e0:	4602      	mov	r2, r0
 80075e2:	460b      	mov	r3, r1
 80075e4:	4641      	mov	r1, r8
 80075e6:	ebb2 0a01 	subs.w	sl, r2, r1
 80075ea:	4649      	mov	r1, r9
 80075ec:	eb63 0b01 	sbc.w	fp, r3, r1
 80075f0:	f04f 0200 	mov.w	r2, #0
 80075f4:	f04f 0300 	mov.w	r3, #0
 80075f8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80075fc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007600:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007604:	ebb2 040a 	subs.w	r4, r2, sl
 8007608:	eb63 050b 	sbc.w	r5, r3, fp
 800760c:	f04f 0200 	mov.w	r2, #0
 8007610:	f04f 0300 	mov.w	r3, #0
 8007614:	00eb      	lsls	r3, r5, #3
 8007616:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800761a:	00e2      	lsls	r2, r4, #3
 800761c:	4614      	mov	r4, r2
 800761e:	461d      	mov	r5, r3
 8007620:	4643      	mov	r3, r8
 8007622:	18e3      	adds	r3, r4, r3
 8007624:	603b      	str	r3, [r7, #0]
 8007626:	464b      	mov	r3, r9
 8007628:	eb45 0303 	adc.w	r3, r5, r3
 800762c:	607b      	str	r3, [r7, #4]
 800762e:	f04f 0200 	mov.w	r2, #0
 8007632:	f04f 0300 	mov.w	r3, #0
 8007636:	e9d7 4500 	ldrd	r4, r5, [r7]
 800763a:	4629      	mov	r1, r5
 800763c:	028b      	lsls	r3, r1, #10
 800763e:	4621      	mov	r1, r4
 8007640:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007644:	4621      	mov	r1, r4
 8007646:	028a      	lsls	r2, r1, #10
 8007648:	4610      	mov	r0, r2
 800764a:	4619      	mov	r1, r3
 800764c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800764e:	2200      	movs	r2, #0
 8007650:	61bb      	str	r3, [r7, #24]
 8007652:	61fa      	str	r2, [r7, #28]
 8007654:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007658:	f7f9 fb1e 	bl	8000c98 <__aeabi_uldivmod>
 800765c:	4602      	mov	r2, r0
 800765e:	460b      	mov	r3, r1
 8007660:	4613      	mov	r3, r2
 8007662:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007664:	4b0b      	ldr	r3, [pc, #44]	; (8007694 <HAL_RCC_GetSysClockFreq+0x200>)
 8007666:	685b      	ldr	r3, [r3, #4]
 8007668:	0c1b      	lsrs	r3, r3, #16
 800766a:	f003 0303 	and.w	r3, r3, #3
 800766e:	3301      	adds	r3, #1
 8007670:	005b      	lsls	r3, r3, #1
 8007672:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8007674:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007676:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007678:	fbb2 f3f3 	udiv	r3, r2, r3
 800767c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800767e:	e002      	b.n	8007686 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007680:	4b05      	ldr	r3, [pc, #20]	; (8007698 <HAL_RCC_GetSysClockFreq+0x204>)
 8007682:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007684:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007686:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007688:	4618      	mov	r0, r3
 800768a:	3750      	adds	r7, #80	; 0x50
 800768c:	46bd      	mov	sp, r7
 800768e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007692:	bf00      	nop
 8007694:	40023800 	.word	0x40023800
 8007698:	00f42400 	.word	0x00f42400
 800769c:	007a1200 	.word	0x007a1200

080076a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80076a0:	b480      	push	{r7}
 80076a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80076a4:	4b03      	ldr	r3, [pc, #12]	; (80076b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80076a6:	681b      	ldr	r3, [r3, #0]
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	46bd      	mov	sp, r7
 80076ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b0:	4770      	bx	lr
 80076b2:	bf00      	nop
 80076b4:	2000000c 	.word	0x2000000c

080076b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80076bc:	f7ff fff0 	bl	80076a0 <HAL_RCC_GetHCLKFreq>
 80076c0:	4602      	mov	r2, r0
 80076c2:	4b05      	ldr	r3, [pc, #20]	; (80076d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80076c4:	689b      	ldr	r3, [r3, #8]
 80076c6:	0a9b      	lsrs	r3, r3, #10
 80076c8:	f003 0307 	and.w	r3, r3, #7
 80076cc:	4903      	ldr	r1, [pc, #12]	; (80076dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80076ce:	5ccb      	ldrb	r3, [r1, r3]
 80076d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80076d4:	4618      	mov	r0, r3
 80076d6:	bd80      	pop	{r7, pc}
 80076d8:	40023800 	.word	0x40023800
 80076dc:	0800c7c8 	.word	0x0800c7c8

080076e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80076e4:	f7ff ffdc 	bl	80076a0 <HAL_RCC_GetHCLKFreq>
 80076e8:	4602      	mov	r2, r0
 80076ea:	4b05      	ldr	r3, [pc, #20]	; (8007700 <HAL_RCC_GetPCLK2Freq+0x20>)
 80076ec:	689b      	ldr	r3, [r3, #8]
 80076ee:	0b5b      	lsrs	r3, r3, #13
 80076f0:	f003 0307 	and.w	r3, r3, #7
 80076f4:	4903      	ldr	r1, [pc, #12]	; (8007704 <HAL_RCC_GetPCLK2Freq+0x24>)
 80076f6:	5ccb      	ldrb	r3, [r1, r3]
 80076f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	bd80      	pop	{r7, pc}
 8007700:	40023800 	.word	0x40023800
 8007704:	0800c7c8 	.word	0x0800c7c8

08007708 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b082      	sub	sp, #8
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d101      	bne.n	800771a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007716:	2301      	movs	r3, #1
 8007718:	e07b      	b.n	8007812 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800771e:	2b00      	cmp	r3, #0
 8007720:	d108      	bne.n	8007734 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	685b      	ldr	r3, [r3, #4]
 8007726:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800772a:	d009      	beq.n	8007740 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2200      	movs	r2, #0
 8007730:	61da      	str	r2, [r3, #28]
 8007732:	e005      	b.n	8007740 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2200      	movs	r2, #0
 8007738:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2200      	movs	r2, #0
 800773e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2200      	movs	r2, #0
 8007744:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800774c:	b2db      	uxtb	r3, r3
 800774e:	2b00      	cmp	r3, #0
 8007750:	d106      	bne.n	8007760 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2200      	movs	r2, #0
 8007756:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f7fa fe3a 	bl	80023d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2202      	movs	r2, #2
 8007764:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	681a      	ldr	r2, [r3, #0]
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007776:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	685b      	ldr	r3, [r3, #4]
 800777c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	689b      	ldr	r3, [r3, #8]
 8007784:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007788:	431a      	orrs	r2, r3
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	68db      	ldr	r3, [r3, #12]
 800778e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007792:	431a      	orrs	r2, r3
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	691b      	ldr	r3, [r3, #16]
 8007798:	f003 0302 	and.w	r3, r3, #2
 800779c:	431a      	orrs	r2, r3
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	695b      	ldr	r3, [r3, #20]
 80077a2:	f003 0301 	and.w	r3, r3, #1
 80077a6:	431a      	orrs	r2, r3
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	699b      	ldr	r3, [r3, #24]
 80077ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80077b0:	431a      	orrs	r2, r3
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	69db      	ldr	r3, [r3, #28]
 80077b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80077ba:	431a      	orrs	r2, r3
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6a1b      	ldr	r3, [r3, #32]
 80077c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077c4:	ea42 0103 	orr.w	r1, r2, r3
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077cc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	430a      	orrs	r2, r1
 80077d6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	699b      	ldr	r3, [r3, #24]
 80077dc:	0c1b      	lsrs	r3, r3, #16
 80077de:	f003 0104 	and.w	r1, r3, #4
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077e6:	f003 0210 	and.w	r2, r3, #16
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	430a      	orrs	r2, r1
 80077f0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	69da      	ldr	r2, [r3, #28]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007800:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2200      	movs	r2, #0
 8007806:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2201      	movs	r2, #1
 800780c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007810:	2300      	movs	r3, #0
}
 8007812:	4618      	mov	r0, r3
 8007814:	3708      	adds	r7, #8
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}

0800781a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800781a:	b580      	push	{r7, lr}
 800781c:	b08c      	sub	sp, #48	; 0x30
 800781e:	af00      	add	r7, sp, #0
 8007820:	60f8      	str	r0, [r7, #12]
 8007822:	60b9      	str	r1, [r7, #8]
 8007824:	607a      	str	r2, [r7, #4]
 8007826:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007828:	2301      	movs	r3, #1
 800782a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800782c:	2300      	movs	r3, #0
 800782e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007838:	2b01      	cmp	r3, #1
 800783a:	d101      	bne.n	8007840 <HAL_SPI_TransmitReceive+0x26>
 800783c:	2302      	movs	r3, #2
 800783e:	e18a      	b.n	8007b56 <HAL_SPI_TransmitReceive+0x33c>
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	2201      	movs	r2, #1
 8007844:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007848:	f7fb ff0a 	bl	8003660 <HAL_GetTick>
 800784c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007854:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	685b      	ldr	r3, [r3, #4]
 800785c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800785e:	887b      	ldrh	r3, [r7, #2]
 8007860:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007862:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007866:	2b01      	cmp	r3, #1
 8007868:	d00f      	beq.n	800788a <HAL_SPI_TransmitReceive+0x70>
 800786a:	69fb      	ldr	r3, [r7, #28]
 800786c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007870:	d107      	bne.n	8007882 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	689b      	ldr	r3, [r3, #8]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d103      	bne.n	8007882 <HAL_SPI_TransmitReceive+0x68>
 800787a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800787e:	2b04      	cmp	r3, #4
 8007880:	d003      	beq.n	800788a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007882:	2302      	movs	r3, #2
 8007884:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007888:	e15b      	b.n	8007b42 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800788a:	68bb      	ldr	r3, [r7, #8]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d005      	beq.n	800789c <HAL_SPI_TransmitReceive+0x82>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d002      	beq.n	800789c <HAL_SPI_TransmitReceive+0x82>
 8007896:	887b      	ldrh	r3, [r7, #2]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d103      	bne.n	80078a4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800789c:	2301      	movs	r3, #1
 800789e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80078a2:	e14e      	b.n	8007b42 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80078aa:	b2db      	uxtb	r3, r3
 80078ac:	2b04      	cmp	r3, #4
 80078ae:	d003      	beq.n	80078b8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	2205      	movs	r2, #5
 80078b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	2200      	movs	r2, #0
 80078bc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	687a      	ldr	r2, [r7, #4]
 80078c2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	887a      	ldrh	r2, [r7, #2]
 80078c8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	887a      	ldrh	r2, [r7, #2]
 80078ce:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	68ba      	ldr	r2, [r7, #8]
 80078d4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	887a      	ldrh	r2, [r7, #2]
 80078da:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	887a      	ldrh	r2, [r7, #2]
 80078e0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	2200      	movs	r2, #0
 80078e6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	2200      	movs	r2, #0
 80078ec:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078f8:	2b40      	cmp	r3, #64	; 0x40
 80078fa:	d007      	beq.n	800790c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	681a      	ldr	r2, [r3, #0]
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800790a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	68db      	ldr	r3, [r3, #12]
 8007910:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007914:	d178      	bne.n	8007a08 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	685b      	ldr	r3, [r3, #4]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d002      	beq.n	8007924 <HAL_SPI_TransmitReceive+0x10a>
 800791e:	8b7b      	ldrh	r3, [r7, #26]
 8007920:	2b01      	cmp	r3, #1
 8007922:	d166      	bne.n	80079f2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007928:	881a      	ldrh	r2, [r3, #0]
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007934:	1c9a      	adds	r2, r3, #2
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800793e:	b29b      	uxth	r3, r3
 8007940:	3b01      	subs	r3, #1
 8007942:	b29a      	uxth	r2, r3
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007948:	e053      	b.n	80079f2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	689b      	ldr	r3, [r3, #8]
 8007950:	f003 0302 	and.w	r3, r3, #2
 8007954:	2b02      	cmp	r3, #2
 8007956:	d11b      	bne.n	8007990 <HAL_SPI_TransmitReceive+0x176>
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800795c:	b29b      	uxth	r3, r3
 800795e:	2b00      	cmp	r3, #0
 8007960:	d016      	beq.n	8007990 <HAL_SPI_TransmitReceive+0x176>
 8007962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007964:	2b01      	cmp	r3, #1
 8007966:	d113      	bne.n	8007990 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800796c:	881a      	ldrh	r2, [r3, #0]
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007978:	1c9a      	adds	r2, r3, #2
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007982:	b29b      	uxth	r3, r3
 8007984:	3b01      	subs	r3, #1
 8007986:	b29a      	uxth	r2, r3
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800798c:	2300      	movs	r3, #0
 800798e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	689b      	ldr	r3, [r3, #8]
 8007996:	f003 0301 	and.w	r3, r3, #1
 800799a:	2b01      	cmp	r3, #1
 800799c:	d119      	bne.n	80079d2 <HAL_SPI_TransmitReceive+0x1b8>
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079a2:	b29b      	uxth	r3, r3
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d014      	beq.n	80079d2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	68da      	ldr	r2, [r3, #12]
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079b2:	b292      	uxth	r2, r2
 80079b4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079ba:	1c9a      	adds	r2, r3, #2
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079c4:	b29b      	uxth	r3, r3
 80079c6:	3b01      	subs	r3, #1
 80079c8:	b29a      	uxth	r2, r3
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80079ce:	2301      	movs	r3, #1
 80079d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80079d2:	f7fb fe45 	bl	8003660 <HAL_GetTick>
 80079d6:	4602      	mov	r2, r0
 80079d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079da:	1ad3      	subs	r3, r2, r3
 80079dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80079de:	429a      	cmp	r2, r3
 80079e0:	d807      	bhi.n	80079f2 <HAL_SPI_TransmitReceive+0x1d8>
 80079e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079e8:	d003      	beq.n	80079f2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80079ea:	2303      	movs	r3, #3
 80079ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80079f0:	e0a7      	b.n	8007b42 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079f6:	b29b      	uxth	r3, r3
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d1a6      	bne.n	800794a <HAL_SPI_TransmitReceive+0x130>
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a00:	b29b      	uxth	r3, r3
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d1a1      	bne.n	800794a <HAL_SPI_TransmitReceive+0x130>
 8007a06:	e07c      	b.n	8007b02 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	685b      	ldr	r3, [r3, #4]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d002      	beq.n	8007a16 <HAL_SPI_TransmitReceive+0x1fc>
 8007a10:	8b7b      	ldrh	r3, [r7, #26]
 8007a12:	2b01      	cmp	r3, #1
 8007a14:	d16b      	bne.n	8007aee <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	330c      	adds	r3, #12
 8007a20:	7812      	ldrb	r2, [r2, #0]
 8007a22:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a28:	1c5a      	adds	r2, r3, #1
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a32:	b29b      	uxth	r3, r3
 8007a34:	3b01      	subs	r3, #1
 8007a36:	b29a      	uxth	r2, r3
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a3c:	e057      	b.n	8007aee <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	689b      	ldr	r3, [r3, #8]
 8007a44:	f003 0302 	and.w	r3, r3, #2
 8007a48:	2b02      	cmp	r3, #2
 8007a4a:	d11c      	bne.n	8007a86 <HAL_SPI_TransmitReceive+0x26c>
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a50:	b29b      	uxth	r3, r3
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d017      	beq.n	8007a86 <HAL_SPI_TransmitReceive+0x26c>
 8007a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a58:	2b01      	cmp	r3, #1
 8007a5a:	d114      	bne.n	8007a86 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	330c      	adds	r3, #12
 8007a66:	7812      	ldrb	r2, [r2, #0]
 8007a68:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a6e:	1c5a      	adds	r2, r3, #1
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a78:	b29b      	uxth	r3, r3
 8007a7a:	3b01      	subs	r3, #1
 8007a7c:	b29a      	uxth	r2, r3
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007a82:	2300      	movs	r3, #0
 8007a84:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	689b      	ldr	r3, [r3, #8]
 8007a8c:	f003 0301 	and.w	r3, r3, #1
 8007a90:	2b01      	cmp	r3, #1
 8007a92:	d119      	bne.n	8007ac8 <HAL_SPI_TransmitReceive+0x2ae>
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a98:	b29b      	uxth	r3, r3
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d014      	beq.n	8007ac8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	68da      	ldr	r2, [r3, #12]
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aa8:	b2d2      	uxtb	r2, r2
 8007aaa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ab0:	1c5a      	adds	r2, r3, #1
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007aba:	b29b      	uxth	r3, r3
 8007abc:	3b01      	subs	r3, #1
 8007abe:	b29a      	uxth	r2, r3
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007ac8:	f7fb fdca 	bl	8003660 <HAL_GetTick>
 8007acc:	4602      	mov	r2, r0
 8007ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad0:	1ad3      	subs	r3, r2, r3
 8007ad2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ad4:	429a      	cmp	r2, r3
 8007ad6:	d803      	bhi.n	8007ae0 <HAL_SPI_TransmitReceive+0x2c6>
 8007ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ada:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ade:	d102      	bne.n	8007ae6 <HAL_SPI_TransmitReceive+0x2cc>
 8007ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d103      	bne.n	8007aee <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007ae6:	2303      	movs	r3, #3
 8007ae8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007aec:	e029      	b.n	8007b42 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007af2:	b29b      	uxth	r3, r3
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d1a2      	bne.n	8007a3e <HAL_SPI_TransmitReceive+0x224>
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007afc:	b29b      	uxth	r3, r3
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d19d      	bne.n	8007a3e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007b02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b04:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007b06:	68f8      	ldr	r0, [r7, #12]
 8007b08:	f000 f8b2 	bl	8007c70 <SPI_EndRxTxTransaction>
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d006      	beq.n	8007b20 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007b12:	2301      	movs	r3, #1
 8007b14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	2220      	movs	r2, #32
 8007b1c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007b1e:	e010      	b.n	8007b42 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	689b      	ldr	r3, [r3, #8]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d10b      	bne.n	8007b40 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007b28:	2300      	movs	r3, #0
 8007b2a:	617b      	str	r3, [r7, #20]
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	68db      	ldr	r3, [r3, #12]
 8007b32:	617b      	str	r3, [r7, #20]
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	689b      	ldr	r3, [r3, #8]
 8007b3a:	617b      	str	r3, [r7, #20]
 8007b3c:	697b      	ldr	r3, [r7, #20]
 8007b3e:	e000      	b.n	8007b42 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007b40:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	2201      	movs	r2, #1
 8007b46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007b52:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007b56:	4618      	mov	r0, r3
 8007b58:	3730      	adds	r7, #48	; 0x30
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}
	...

08007b60 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b088      	sub	sp, #32
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	60f8      	str	r0, [r7, #12]
 8007b68:	60b9      	str	r1, [r7, #8]
 8007b6a:	603b      	str	r3, [r7, #0]
 8007b6c:	4613      	mov	r3, r2
 8007b6e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007b70:	f7fb fd76 	bl	8003660 <HAL_GetTick>
 8007b74:	4602      	mov	r2, r0
 8007b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b78:	1a9b      	subs	r3, r3, r2
 8007b7a:	683a      	ldr	r2, [r7, #0]
 8007b7c:	4413      	add	r3, r2
 8007b7e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007b80:	f7fb fd6e 	bl	8003660 <HAL_GetTick>
 8007b84:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007b86:	4b39      	ldr	r3, [pc, #228]	; (8007c6c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	015b      	lsls	r3, r3, #5
 8007b8c:	0d1b      	lsrs	r3, r3, #20
 8007b8e:	69fa      	ldr	r2, [r7, #28]
 8007b90:	fb02 f303 	mul.w	r3, r2, r3
 8007b94:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007b96:	e054      	b.n	8007c42 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b9e:	d050      	beq.n	8007c42 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007ba0:	f7fb fd5e 	bl	8003660 <HAL_GetTick>
 8007ba4:	4602      	mov	r2, r0
 8007ba6:	69bb      	ldr	r3, [r7, #24]
 8007ba8:	1ad3      	subs	r3, r2, r3
 8007baa:	69fa      	ldr	r2, [r7, #28]
 8007bac:	429a      	cmp	r2, r3
 8007bae:	d902      	bls.n	8007bb6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007bb0:	69fb      	ldr	r3, [r7, #28]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d13d      	bne.n	8007c32 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	685a      	ldr	r2, [r3, #4]
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007bc4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	685b      	ldr	r3, [r3, #4]
 8007bca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007bce:	d111      	bne.n	8007bf4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	689b      	ldr	r3, [r3, #8]
 8007bd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007bd8:	d004      	beq.n	8007be4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	689b      	ldr	r3, [r3, #8]
 8007bde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007be2:	d107      	bne.n	8007bf4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	681a      	ldr	r2, [r3, #0]
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007bf2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bf8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007bfc:	d10f      	bne.n	8007c1e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	681a      	ldr	r2, [r3, #0]
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007c0c:	601a      	str	r2, [r3, #0]
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	681a      	ldr	r2, [r3, #0]
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007c1c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	2201      	movs	r2, #1
 8007c22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	2200      	movs	r2, #0
 8007c2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007c2e:	2303      	movs	r3, #3
 8007c30:	e017      	b.n	8007c62 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007c32:	697b      	ldr	r3, [r7, #20]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d101      	bne.n	8007c3c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007c38:	2300      	movs	r3, #0
 8007c3a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007c3c:	697b      	ldr	r3, [r7, #20]
 8007c3e:	3b01      	subs	r3, #1
 8007c40:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	689a      	ldr	r2, [r3, #8]
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	4013      	ands	r3, r2
 8007c4c:	68ba      	ldr	r2, [r7, #8]
 8007c4e:	429a      	cmp	r2, r3
 8007c50:	bf0c      	ite	eq
 8007c52:	2301      	moveq	r3, #1
 8007c54:	2300      	movne	r3, #0
 8007c56:	b2db      	uxtb	r3, r3
 8007c58:	461a      	mov	r2, r3
 8007c5a:	79fb      	ldrb	r3, [r7, #7]
 8007c5c:	429a      	cmp	r2, r3
 8007c5e:	d19b      	bne.n	8007b98 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007c60:	2300      	movs	r3, #0
}
 8007c62:	4618      	mov	r0, r3
 8007c64:	3720      	adds	r7, #32
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bd80      	pop	{r7, pc}
 8007c6a:	bf00      	nop
 8007c6c:	2000000c 	.word	0x2000000c

08007c70 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b088      	sub	sp, #32
 8007c74:	af02      	add	r7, sp, #8
 8007c76:	60f8      	str	r0, [r7, #12]
 8007c78:	60b9      	str	r1, [r7, #8]
 8007c7a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007c7c:	4b1b      	ldr	r3, [pc, #108]	; (8007cec <SPI_EndRxTxTransaction+0x7c>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	4a1b      	ldr	r2, [pc, #108]	; (8007cf0 <SPI_EndRxTxTransaction+0x80>)
 8007c82:	fba2 2303 	umull	r2, r3, r2, r3
 8007c86:	0d5b      	lsrs	r3, r3, #21
 8007c88:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007c8c:	fb02 f303 	mul.w	r3, r2, r3
 8007c90:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	685b      	ldr	r3, [r3, #4]
 8007c96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c9a:	d112      	bne.n	8007cc2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	9300      	str	r3, [sp, #0]
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	2180      	movs	r1, #128	; 0x80
 8007ca6:	68f8      	ldr	r0, [r7, #12]
 8007ca8:	f7ff ff5a 	bl	8007b60 <SPI_WaitFlagStateUntilTimeout>
 8007cac:	4603      	mov	r3, r0
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d016      	beq.n	8007ce0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cb6:	f043 0220 	orr.w	r2, r3, #32
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007cbe:	2303      	movs	r3, #3
 8007cc0:	e00f      	b.n	8007ce2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d00a      	beq.n	8007cde <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007cc8:	697b      	ldr	r3, [r7, #20]
 8007cca:	3b01      	subs	r3, #1
 8007ccc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	689b      	ldr	r3, [r3, #8]
 8007cd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cd8:	2b80      	cmp	r3, #128	; 0x80
 8007cda:	d0f2      	beq.n	8007cc2 <SPI_EndRxTxTransaction+0x52>
 8007cdc:	e000      	b.n	8007ce0 <SPI_EndRxTxTransaction+0x70>
        break;
 8007cde:	bf00      	nop
  }

  return HAL_OK;
 8007ce0:	2300      	movs	r3, #0
}
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	3718      	adds	r7, #24
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bd80      	pop	{r7, pc}
 8007cea:	bf00      	nop
 8007cec:	2000000c 	.word	0x2000000c
 8007cf0:	165e9f81 	.word	0x165e9f81

08007cf4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b082      	sub	sp, #8
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d101      	bne.n	8007d06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007d02:	2301      	movs	r3, #1
 8007d04:	e041      	b.n	8007d8a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d0c:	b2db      	uxtb	r3, r3
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d106      	bne.n	8007d20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2200      	movs	r2, #0
 8007d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f7fa fba2 	bl	8002464 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2202      	movs	r2, #2
 8007d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681a      	ldr	r2, [r3, #0]
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	3304      	adds	r3, #4
 8007d30:	4619      	mov	r1, r3
 8007d32:	4610      	mov	r0, r2
 8007d34:	f000 f9f0 	bl	8008118 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2201      	movs	r2, #1
 8007d3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2201      	movs	r2, #1
 8007d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2201      	movs	r2, #1
 8007d4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2201      	movs	r2, #1
 8007d54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2201      	movs	r2, #1
 8007d5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2201      	movs	r2, #1
 8007d64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2201      	movs	r2, #1
 8007d6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2201      	movs	r2, #1
 8007d74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2201      	movs	r2, #1
 8007d7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2201      	movs	r2, #1
 8007d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007d88:	2300      	movs	r3, #0
}
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	3708      	adds	r7, #8
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bd80      	pop	{r7, pc}
	...

08007d94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007d94:	b480      	push	{r7}
 8007d96:	b085      	sub	sp, #20
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007da2:	b2db      	uxtb	r3, r3
 8007da4:	2b01      	cmp	r3, #1
 8007da6:	d001      	beq.n	8007dac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007da8:	2301      	movs	r3, #1
 8007daa:	e044      	b.n	8007e36 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2202      	movs	r2, #2
 8007db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	68da      	ldr	r2, [r3, #12]
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f042 0201 	orr.w	r2, r2, #1
 8007dc2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4a1e      	ldr	r2, [pc, #120]	; (8007e44 <HAL_TIM_Base_Start_IT+0xb0>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d018      	beq.n	8007e00 <HAL_TIM_Base_Start_IT+0x6c>
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007dd6:	d013      	beq.n	8007e00 <HAL_TIM_Base_Start_IT+0x6c>
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4a1a      	ldr	r2, [pc, #104]	; (8007e48 <HAL_TIM_Base_Start_IT+0xb4>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d00e      	beq.n	8007e00 <HAL_TIM_Base_Start_IT+0x6c>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	4a19      	ldr	r2, [pc, #100]	; (8007e4c <HAL_TIM_Base_Start_IT+0xb8>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d009      	beq.n	8007e00 <HAL_TIM_Base_Start_IT+0x6c>
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4a17      	ldr	r2, [pc, #92]	; (8007e50 <HAL_TIM_Base_Start_IT+0xbc>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d004      	beq.n	8007e00 <HAL_TIM_Base_Start_IT+0x6c>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	4a16      	ldr	r2, [pc, #88]	; (8007e54 <HAL_TIM_Base_Start_IT+0xc0>)
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	d111      	bne.n	8007e24 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	689b      	ldr	r3, [r3, #8]
 8007e06:	f003 0307 	and.w	r3, r3, #7
 8007e0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	2b06      	cmp	r3, #6
 8007e10:	d010      	beq.n	8007e34 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	681a      	ldr	r2, [r3, #0]
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f042 0201 	orr.w	r2, r2, #1
 8007e20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e22:	e007      	b.n	8007e34 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	681a      	ldr	r2, [r3, #0]
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f042 0201 	orr.w	r2, r2, #1
 8007e32:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007e34:	2300      	movs	r3, #0
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	3714      	adds	r7, #20
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e40:	4770      	bx	lr
 8007e42:	bf00      	nop
 8007e44:	40010000 	.word	0x40010000
 8007e48:	40000400 	.word	0x40000400
 8007e4c:	40000800 	.word	0x40000800
 8007e50:	40000c00 	.word	0x40000c00
 8007e54:	40014000 	.word	0x40014000

08007e58 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b083      	sub	sp, #12
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	68da      	ldr	r2, [r3, #12]
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f022 0201 	bic.w	r2, r2, #1
 8007e6e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	6a1a      	ldr	r2, [r3, #32]
 8007e76:	f241 1311 	movw	r3, #4369	; 0x1111
 8007e7a:	4013      	ands	r3, r2
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d10f      	bne.n	8007ea0 <HAL_TIM_Base_Stop_IT+0x48>
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	6a1a      	ldr	r2, [r3, #32]
 8007e86:	f240 4344 	movw	r3, #1092	; 0x444
 8007e8a:	4013      	ands	r3, r2
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d107      	bne.n	8007ea0 <HAL_TIM_Base_Stop_IT+0x48>
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	681a      	ldr	r2, [r3, #0]
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f022 0201 	bic.w	r2, r2, #1
 8007e9e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2201      	movs	r2, #1
 8007ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007ea8:	2300      	movs	r3, #0
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	370c      	adds	r7, #12
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb4:	4770      	bx	lr

08007eb6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007eb6:	b580      	push	{r7, lr}
 8007eb8:	b082      	sub	sp, #8
 8007eba:	af00      	add	r7, sp, #0
 8007ebc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	691b      	ldr	r3, [r3, #16]
 8007ec4:	f003 0302 	and.w	r3, r3, #2
 8007ec8:	2b02      	cmp	r3, #2
 8007eca:	d122      	bne.n	8007f12 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	68db      	ldr	r3, [r3, #12]
 8007ed2:	f003 0302 	and.w	r3, r3, #2
 8007ed6:	2b02      	cmp	r3, #2
 8007ed8:	d11b      	bne.n	8007f12 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f06f 0202 	mvn.w	r2, #2
 8007ee2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2201      	movs	r2, #1
 8007ee8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	699b      	ldr	r3, [r3, #24]
 8007ef0:	f003 0303 	and.w	r3, r3, #3
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d003      	beq.n	8007f00 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f000 f8ee 	bl	80080da <HAL_TIM_IC_CaptureCallback>
 8007efe:	e005      	b.n	8007f0c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f00:	6878      	ldr	r0, [r7, #4]
 8007f02:	f000 f8e0 	bl	80080c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f06:	6878      	ldr	r0, [r7, #4]
 8007f08:	f000 f8f1 	bl	80080ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	691b      	ldr	r3, [r3, #16]
 8007f18:	f003 0304 	and.w	r3, r3, #4
 8007f1c:	2b04      	cmp	r3, #4
 8007f1e:	d122      	bne.n	8007f66 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	68db      	ldr	r3, [r3, #12]
 8007f26:	f003 0304 	and.w	r3, r3, #4
 8007f2a:	2b04      	cmp	r3, #4
 8007f2c:	d11b      	bne.n	8007f66 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f06f 0204 	mvn.w	r2, #4
 8007f36:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2202      	movs	r2, #2
 8007f3c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	699b      	ldr	r3, [r3, #24]
 8007f44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d003      	beq.n	8007f54 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	f000 f8c4 	bl	80080da <HAL_TIM_IC_CaptureCallback>
 8007f52:	e005      	b.n	8007f60 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f54:	6878      	ldr	r0, [r7, #4]
 8007f56:	f000 f8b6 	bl	80080c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f5a:	6878      	ldr	r0, [r7, #4]
 8007f5c:	f000 f8c7 	bl	80080ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2200      	movs	r2, #0
 8007f64:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	691b      	ldr	r3, [r3, #16]
 8007f6c:	f003 0308 	and.w	r3, r3, #8
 8007f70:	2b08      	cmp	r3, #8
 8007f72:	d122      	bne.n	8007fba <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	68db      	ldr	r3, [r3, #12]
 8007f7a:	f003 0308 	and.w	r3, r3, #8
 8007f7e:	2b08      	cmp	r3, #8
 8007f80:	d11b      	bne.n	8007fba <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f06f 0208 	mvn.w	r2, #8
 8007f8a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2204      	movs	r2, #4
 8007f90:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	69db      	ldr	r3, [r3, #28]
 8007f98:	f003 0303 	and.w	r3, r3, #3
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d003      	beq.n	8007fa8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f000 f89a 	bl	80080da <HAL_TIM_IC_CaptureCallback>
 8007fa6:	e005      	b.n	8007fb4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	f000 f88c 	bl	80080c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f000 f89d 	bl	80080ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	691b      	ldr	r3, [r3, #16]
 8007fc0:	f003 0310 	and.w	r3, r3, #16
 8007fc4:	2b10      	cmp	r3, #16
 8007fc6:	d122      	bne.n	800800e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	68db      	ldr	r3, [r3, #12]
 8007fce:	f003 0310 	and.w	r3, r3, #16
 8007fd2:	2b10      	cmp	r3, #16
 8007fd4:	d11b      	bne.n	800800e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f06f 0210 	mvn.w	r2, #16
 8007fde:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2208      	movs	r2, #8
 8007fe4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	69db      	ldr	r3, [r3, #28]
 8007fec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d003      	beq.n	8007ffc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	f000 f870 	bl	80080da <HAL_TIM_IC_CaptureCallback>
 8007ffa:	e005      	b.n	8008008 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	f000 f862 	bl	80080c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f000 f873 	bl	80080ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2200      	movs	r2, #0
 800800c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	691b      	ldr	r3, [r3, #16]
 8008014:	f003 0301 	and.w	r3, r3, #1
 8008018:	2b01      	cmp	r3, #1
 800801a:	d10e      	bne.n	800803a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	68db      	ldr	r3, [r3, #12]
 8008022:	f003 0301 	and.w	r3, r3, #1
 8008026:	2b01      	cmp	r3, #1
 8008028:	d107      	bne.n	800803a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f06f 0201 	mvn.w	r2, #1
 8008032:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f7fa f91d 	bl	8002274 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	691b      	ldr	r3, [r3, #16]
 8008040:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008044:	2b80      	cmp	r3, #128	; 0x80
 8008046:	d10e      	bne.n	8008066 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	68db      	ldr	r3, [r3, #12]
 800804e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008052:	2b80      	cmp	r3, #128	; 0x80
 8008054:	d107      	bne.n	8008066 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800805e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f000 f8e3 	bl	800822c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	691b      	ldr	r3, [r3, #16]
 800806c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008070:	2b40      	cmp	r3, #64	; 0x40
 8008072:	d10e      	bne.n	8008092 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	68db      	ldr	r3, [r3, #12]
 800807a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800807e:	2b40      	cmp	r3, #64	; 0x40
 8008080:	d107      	bne.n	8008092 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800808a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f000 f838 	bl	8008102 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	691b      	ldr	r3, [r3, #16]
 8008098:	f003 0320 	and.w	r3, r3, #32
 800809c:	2b20      	cmp	r3, #32
 800809e:	d10e      	bne.n	80080be <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	68db      	ldr	r3, [r3, #12]
 80080a6:	f003 0320 	and.w	r3, r3, #32
 80080aa:	2b20      	cmp	r3, #32
 80080ac:	d107      	bne.n	80080be <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f06f 0220 	mvn.w	r2, #32
 80080b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	f000 f8ad 	bl	8008218 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80080be:	bf00      	nop
 80080c0:	3708      	adds	r7, #8
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bd80      	pop	{r7, pc}

080080c6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80080c6:	b480      	push	{r7}
 80080c8:	b083      	sub	sp, #12
 80080ca:	af00      	add	r7, sp, #0
 80080cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80080ce:	bf00      	nop
 80080d0:	370c      	adds	r7, #12
 80080d2:	46bd      	mov	sp, r7
 80080d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d8:	4770      	bx	lr

080080da <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80080da:	b480      	push	{r7}
 80080dc:	b083      	sub	sp, #12
 80080de:	af00      	add	r7, sp, #0
 80080e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80080e2:	bf00      	nop
 80080e4:	370c      	adds	r7, #12
 80080e6:	46bd      	mov	sp, r7
 80080e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ec:	4770      	bx	lr

080080ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80080ee:	b480      	push	{r7}
 80080f0:	b083      	sub	sp, #12
 80080f2:	af00      	add	r7, sp, #0
 80080f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80080f6:	bf00      	nop
 80080f8:	370c      	adds	r7, #12
 80080fa:	46bd      	mov	sp, r7
 80080fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008100:	4770      	bx	lr

08008102 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008102:	b480      	push	{r7}
 8008104:	b083      	sub	sp, #12
 8008106:	af00      	add	r7, sp, #0
 8008108:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800810a:	bf00      	nop
 800810c:	370c      	adds	r7, #12
 800810e:	46bd      	mov	sp, r7
 8008110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008114:	4770      	bx	lr
	...

08008118 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008118:	b480      	push	{r7}
 800811a:	b085      	sub	sp, #20
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
 8008120:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	4a34      	ldr	r2, [pc, #208]	; (80081fc <TIM_Base_SetConfig+0xe4>)
 800812c:	4293      	cmp	r3, r2
 800812e:	d00f      	beq.n	8008150 <TIM_Base_SetConfig+0x38>
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008136:	d00b      	beq.n	8008150 <TIM_Base_SetConfig+0x38>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	4a31      	ldr	r2, [pc, #196]	; (8008200 <TIM_Base_SetConfig+0xe8>)
 800813c:	4293      	cmp	r3, r2
 800813e:	d007      	beq.n	8008150 <TIM_Base_SetConfig+0x38>
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	4a30      	ldr	r2, [pc, #192]	; (8008204 <TIM_Base_SetConfig+0xec>)
 8008144:	4293      	cmp	r3, r2
 8008146:	d003      	beq.n	8008150 <TIM_Base_SetConfig+0x38>
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	4a2f      	ldr	r2, [pc, #188]	; (8008208 <TIM_Base_SetConfig+0xf0>)
 800814c:	4293      	cmp	r3, r2
 800814e:	d108      	bne.n	8008162 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008156:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	685b      	ldr	r3, [r3, #4]
 800815c:	68fa      	ldr	r2, [r7, #12]
 800815e:	4313      	orrs	r3, r2
 8008160:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	4a25      	ldr	r2, [pc, #148]	; (80081fc <TIM_Base_SetConfig+0xe4>)
 8008166:	4293      	cmp	r3, r2
 8008168:	d01b      	beq.n	80081a2 <TIM_Base_SetConfig+0x8a>
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008170:	d017      	beq.n	80081a2 <TIM_Base_SetConfig+0x8a>
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	4a22      	ldr	r2, [pc, #136]	; (8008200 <TIM_Base_SetConfig+0xe8>)
 8008176:	4293      	cmp	r3, r2
 8008178:	d013      	beq.n	80081a2 <TIM_Base_SetConfig+0x8a>
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	4a21      	ldr	r2, [pc, #132]	; (8008204 <TIM_Base_SetConfig+0xec>)
 800817e:	4293      	cmp	r3, r2
 8008180:	d00f      	beq.n	80081a2 <TIM_Base_SetConfig+0x8a>
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	4a20      	ldr	r2, [pc, #128]	; (8008208 <TIM_Base_SetConfig+0xf0>)
 8008186:	4293      	cmp	r3, r2
 8008188:	d00b      	beq.n	80081a2 <TIM_Base_SetConfig+0x8a>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	4a1f      	ldr	r2, [pc, #124]	; (800820c <TIM_Base_SetConfig+0xf4>)
 800818e:	4293      	cmp	r3, r2
 8008190:	d007      	beq.n	80081a2 <TIM_Base_SetConfig+0x8a>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	4a1e      	ldr	r2, [pc, #120]	; (8008210 <TIM_Base_SetConfig+0xf8>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d003      	beq.n	80081a2 <TIM_Base_SetConfig+0x8a>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	4a1d      	ldr	r2, [pc, #116]	; (8008214 <TIM_Base_SetConfig+0xfc>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d108      	bne.n	80081b4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80081a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	68db      	ldr	r3, [r3, #12]
 80081ae:	68fa      	ldr	r2, [r7, #12]
 80081b0:	4313      	orrs	r3, r2
 80081b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	695b      	ldr	r3, [r3, #20]
 80081be:	4313      	orrs	r3, r2
 80081c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	68fa      	ldr	r2, [r7, #12]
 80081c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	689a      	ldr	r2, [r3, #8]
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	681a      	ldr	r2, [r3, #0]
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	4a08      	ldr	r2, [pc, #32]	; (80081fc <TIM_Base_SetConfig+0xe4>)
 80081dc:	4293      	cmp	r3, r2
 80081de:	d103      	bne.n	80081e8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	691a      	ldr	r2, [r3, #16]
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2201      	movs	r2, #1
 80081ec:	615a      	str	r2, [r3, #20]
}
 80081ee:	bf00      	nop
 80081f0:	3714      	adds	r7, #20
 80081f2:	46bd      	mov	sp, r7
 80081f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f8:	4770      	bx	lr
 80081fa:	bf00      	nop
 80081fc:	40010000 	.word	0x40010000
 8008200:	40000400 	.word	0x40000400
 8008204:	40000800 	.word	0x40000800
 8008208:	40000c00 	.word	0x40000c00
 800820c:	40014000 	.word	0x40014000
 8008210:	40014400 	.word	0x40014400
 8008214:	40014800 	.word	0x40014800

08008218 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008218:	b480      	push	{r7}
 800821a:	b083      	sub	sp, #12
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008220:	bf00      	nop
 8008222:	370c      	adds	r7, #12
 8008224:	46bd      	mov	sp, r7
 8008226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822a:	4770      	bx	lr

0800822c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800822c:	b480      	push	{r7}
 800822e:	b083      	sub	sp, #12
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008234:	bf00      	nop
 8008236:	370c      	adds	r7, #12
 8008238:	46bd      	mov	sp, r7
 800823a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823e:	4770      	bx	lr

08008240 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b082      	sub	sp, #8
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d101      	bne.n	8008252 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800824e:	2301      	movs	r3, #1
 8008250:	e03f      	b.n	80082d2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008258:	b2db      	uxtb	r3, r3
 800825a:	2b00      	cmp	r3, #0
 800825c:	d106      	bne.n	800826c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2200      	movs	r2, #0
 8008262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f7fa f924 	bl	80024b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2224      	movs	r2, #36	; 0x24
 8008270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	68da      	ldr	r2, [r3, #12]
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008282:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f001 f80b 	bl	80092a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	691a      	ldr	r2, [r3, #16]
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008298:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	695a      	ldr	r2, [r3, #20]
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80082a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	68da      	ldr	r2, [r3, #12]
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80082b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2200      	movs	r2, #0
 80082be:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2220      	movs	r2, #32
 80082c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2220      	movs	r2, #32
 80082cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80082d0:	2300      	movs	r3, #0
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	3708      	adds	r7, #8
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd80      	pop	{r7, pc}

080082da <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80082da:	b580      	push	{r7, lr}
 80082dc:	b08a      	sub	sp, #40	; 0x28
 80082de:	af02      	add	r7, sp, #8
 80082e0:	60f8      	str	r0, [r7, #12]
 80082e2:	60b9      	str	r1, [r7, #8]
 80082e4:	603b      	str	r3, [r7, #0]
 80082e6:	4613      	mov	r3, r2
 80082e8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80082ea:	2300      	movs	r3, #0
 80082ec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082f4:	b2db      	uxtb	r3, r3
 80082f6:	2b20      	cmp	r3, #32
 80082f8:	d17c      	bne.n	80083f4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80082fa:	68bb      	ldr	r3, [r7, #8]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d002      	beq.n	8008306 <HAL_UART_Transmit+0x2c>
 8008300:	88fb      	ldrh	r3, [r7, #6]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d101      	bne.n	800830a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008306:	2301      	movs	r3, #1
 8008308:	e075      	b.n	80083f6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008310:	2b01      	cmp	r3, #1
 8008312:	d101      	bne.n	8008318 <HAL_UART_Transmit+0x3e>
 8008314:	2302      	movs	r3, #2
 8008316:	e06e      	b.n	80083f6 <HAL_UART_Transmit+0x11c>
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	2201      	movs	r2, #1
 800831c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	2200      	movs	r2, #0
 8008324:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	2221      	movs	r2, #33	; 0x21
 800832a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800832e:	f7fb f997 	bl	8003660 <HAL_GetTick>
 8008332:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	88fa      	ldrh	r2, [r7, #6]
 8008338:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	88fa      	ldrh	r2, [r7, #6]
 800833e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	689b      	ldr	r3, [r3, #8]
 8008344:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008348:	d108      	bne.n	800835c <HAL_UART_Transmit+0x82>
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	691b      	ldr	r3, [r3, #16]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d104      	bne.n	800835c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008352:	2300      	movs	r3, #0
 8008354:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008356:	68bb      	ldr	r3, [r7, #8]
 8008358:	61bb      	str	r3, [r7, #24]
 800835a:	e003      	b.n	8008364 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008360:	2300      	movs	r3, #0
 8008362:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	2200      	movs	r2, #0
 8008368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800836c:	e02a      	b.n	80083c4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	9300      	str	r3, [sp, #0]
 8008372:	697b      	ldr	r3, [r7, #20]
 8008374:	2200      	movs	r2, #0
 8008376:	2180      	movs	r1, #128	; 0x80
 8008378:	68f8      	ldr	r0, [r7, #12]
 800837a:	f000 fcc3 	bl	8008d04 <UART_WaitOnFlagUntilTimeout>
 800837e:	4603      	mov	r3, r0
 8008380:	2b00      	cmp	r3, #0
 8008382:	d001      	beq.n	8008388 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008384:	2303      	movs	r3, #3
 8008386:	e036      	b.n	80083f6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008388:	69fb      	ldr	r3, [r7, #28]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d10b      	bne.n	80083a6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800838e:	69bb      	ldr	r3, [r7, #24]
 8008390:	881b      	ldrh	r3, [r3, #0]
 8008392:	461a      	mov	r2, r3
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800839c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800839e:	69bb      	ldr	r3, [r7, #24]
 80083a0:	3302      	adds	r3, #2
 80083a2:	61bb      	str	r3, [r7, #24]
 80083a4:	e007      	b.n	80083b6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80083a6:	69fb      	ldr	r3, [r7, #28]
 80083a8:	781a      	ldrb	r2, [r3, #0]
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80083b0:	69fb      	ldr	r3, [r7, #28]
 80083b2:	3301      	adds	r3, #1
 80083b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80083ba:	b29b      	uxth	r3, r3
 80083bc:	3b01      	subs	r3, #1
 80083be:	b29a      	uxth	r2, r3
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80083c8:	b29b      	uxth	r3, r3
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d1cf      	bne.n	800836e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	9300      	str	r3, [sp, #0]
 80083d2:	697b      	ldr	r3, [r7, #20]
 80083d4:	2200      	movs	r2, #0
 80083d6:	2140      	movs	r1, #64	; 0x40
 80083d8:	68f8      	ldr	r0, [r7, #12]
 80083da:	f000 fc93 	bl	8008d04 <UART_WaitOnFlagUntilTimeout>
 80083de:	4603      	mov	r3, r0
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d001      	beq.n	80083e8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80083e4:	2303      	movs	r3, #3
 80083e6:	e006      	b.n	80083f6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	2220      	movs	r2, #32
 80083ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80083f0:	2300      	movs	r3, #0
 80083f2:	e000      	b.n	80083f6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80083f4:	2302      	movs	r3, #2
  }
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	3720      	adds	r7, #32
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bd80      	pop	{r7, pc}

080083fe <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80083fe:	b580      	push	{r7, lr}
 8008400:	b08a      	sub	sp, #40	; 0x28
 8008402:	af02      	add	r7, sp, #8
 8008404:	60f8      	str	r0, [r7, #12]
 8008406:	60b9      	str	r1, [r7, #8]
 8008408:	603b      	str	r3, [r7, #0]
 800840a:	4613      	mov	r3, r2
 800840c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800840e:	2300      	movs	r3, #0
 8008410:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008418:	b2db      	uxtb	r3, r3
 800841a:	2b20      	cmp	r3, #32
 800841c:	f040 808c 	bne.w	8008538 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d002      	beq.n	800842c <HAL_UART_Receive+0x2e>
 8008426:	88fb      	ldrh	r3, [r7, #6]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d101      	bne.n	8008430 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800842c:	2301      	movs	r3, #1
 800842e:	e084      	b.n	800853a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008436:	2b01      	cmp	r3, #1
 8008438:	d101      	bne.n	800843e <HAL_UART_Receive+0x40>
 800843a:	2302      	movs	r3, #2
 800843c:	e07d      	b.n	800853a <HAL_UART_Receive+0x13c>
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	2201      	movs	r2, #1
 8008442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	2200      	movs	r2, #0
 800844a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	2222      	movs	r2, #34	; 0x22
 8008450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	2200      	movs	r2, #0
 8008458:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800845a:	f7fb f901 	bl	8003660 <HAL_GetTick>
 800845e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	88fa      	ldrh	r2, [r7, #6]
 8008464:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	88fa      	ldrh	r2, [r7, #6]
 800846a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	689b      	ldr	r3, [r3, #8]
 8008470:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008474:	d108      	bne.n	8008488 <HAL_UART_Receive+0x8a>
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	691b      	ldr	r3, [r3, #16]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d104      	bne.n	8008488 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800847e:	2300      	movs	r3, #0
 8008480:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008482:	68bb      	ldr	r3, [r7, #8]
 8008484:	61bb      	str	r3, [r7, #24]
 8008486:	e003      	b.n	8008490 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800848c:	2300      	movs	r3, #0
 800848e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	2200      	movs	r2, #0
 8008494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8008498:	e043      	b.n	8008522 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	9300      	str	r3, [sp, #0]
 800849e:	697b      	ldr	r3, [r7, #20]
 80084a0:	2200      	movs	r2, #0
 80084a2:	2120      	movs	r1, #32
 80084a4:	68f8      	ldr	r0, [r7, #12]
 80084a6:	f000 fc2d 	bl	8008d04 <UART_WaitOnFlagUntilTimeout>
 80084aa:	4603      	mov	r3, r0
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d001      	beq.n	80084b4 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80084b0:	2303      	movs	r3, #3
 80084b2:	e042      	b.n	800853a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80084b4:	69fb      	ldr	r3, [r7, #28]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d10c      	bne.n	80084d4 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	685b      	ldr	r3, [r3, #4]
 80084c0:	b29b      	uxth	r3, r3
 80084c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084c6:	b29a      	uxth	r2, r3
 80084c8:	69bb      	ldr	r3, [r7, #24]
 80084ca:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80084cc:	69bb      	ldr	r3, [r7, #24]
 80084ce:	3302      	adds	r3, #2
 80084d0:	61bb      	str	r3, [r7, #24]
 80084d2:	e01f      	b.n	8008514 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	689b      	ldr	r3, [r3, #8]
 80084d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084dc:	d007      	beq.n	80084ee <HAL_UART_Receive+0xf0>
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	689b      	ldr	r3, [r3, #8]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d10a      	bne.n	80084fc <HAL_UART_Receive+0xfe>
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	691b      	ldr	r3, [r3, #16]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d106      	bne.n	80084fc <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	685b      	ldr	r3, [r3, #4]
 80084f4:	b2da      	uxtb	r2, r3
 80084f6:	69fb      	ldr	r3, [r7, #28]
 80084f8:	701a      	strb	r2, [r3, #0]
 80084fa:	e008      	b.n	800850e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	685b      	ldr	r3, [r3, #4]
 8008502:	b2db      	uxtb	r3, r3
 8008504:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008508:	b2da      	uxtb	r2, r3
 800850a:	69fb      	ldr	r3, [r7, #28]
 800850c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800850e:	69fb      	ldr	r3, [r7, #28]
 8008510:	3301      	adds	r3, #1
 8008512:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008518:	b29b      	uxth	r3, r3
 800851a:	3b01      	subs	r3, #1
 800851c:	b29a      	uxth	r2, r3
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008526:	b29b      	uxth	r3, r3
 8008528:	2b00      	cmp	r3, #0
 800852a:	d1b6      	bne.n	800849a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	2220      	movs	r2, #32
 8008530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8008534:	2300      	movs	r3, #0
 8008536:	e000      	b.n	800853a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8008538:	2302      	movs	r3, #2
  }
}
 800853a:	4618      	mov	r0, r3
 800853c:	3720      	adds	r7, #32
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}

08008542 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008542:	b580      	push	{r7, lr}
 8008544:	b084      	sub	sp, #16
 8008546:	af00      	add	r7, sp, #0
 8008548:	60f8      	str	r0, [r7, #12]
 800854a:	60b9      	str	r1, [r7, #8]
 800854c:	4613      	mov	r3, r2
 800854e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008556:	b2db      	uxtb	r3, r3
 8008558:	2b20      	cmp	r3, #32
 800855a:	d11d      	bne.n	8008598 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d002      	beq.n	8008568 <HAL_UART_Receive_DMA+0x26>
 8008562:	88fb      	ldrh	r3, [r7, #6]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d101      	bne.n	800856c <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8008568:	2301      	movs	r3, #1
 800856a:	e016      	b.n	800859a <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008572:	2b01      	cmp	r3, #1
 8008574:	d101      	bne.n	800857a <HAL_UART_Receive_DMA+0x38>
 8008576:	2302      	movs	r3, #2
 8008578:	e00f      	b.n	800859a <HAL_UART_Receive_DMA+0x58>
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	2201      	movs	r2, #1
 800857e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	2200      	movs	r2, #0
 8008586:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008588:	88fb      	ldrh	r3, [r7, #6]
 800858a:	461a      	mov	r2, r3
 800858c:	68b9      	ldr	r1, [r7, #8]
 800858e:	68f8      	ldr	r0, [r7, #12]
 8008590:	f000 fc26 	bl	8008de0 <UART_Start_Receive_DMA>
 8008594:	4603      	mov	r3, r0
 8008596:	e000      	b.n	800859a <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008598:	2302      	movs	r3, #2
  }
}
 800859a:	4618      	mov	r0, r3
 800859c:	3710      	adds	r7, #16
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}
	...

080085a4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b0ba      	sub	sp, #232	; 0xe8
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	68db      	ldr	r3, [r3, #12]
 80085bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	695b      	ldr	r3, [r3, #20]
 80085c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80085ca:	2300      	movs	r3, #0
 80085cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80085d0:	2300      	movs	r3, #0
 80085d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80085d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085da:	f003 030f 	and.w	r3, r3, #15
 80085de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80085e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d10f      	bne.n	800860a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80085ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085ee:	f003 0320 	and.w	r3, r3, #32
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d009      	beq.n	800860a <HAL_UART_IRQHandler+0x66>
 80085f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80085fa:	f003 0320 	and.w	r3, r3, #32
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d003      	beq.n	800860a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f000 fd91 	bl	800912a <UART_Receive_IT>
      return;
 8008608:	e256      	b.n	8008ab8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800860a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800860e:	2b00      	cmp	r3, #0
 8008610:	f000 80de 	beq.w	80087d0 <HAL_UART_IRQHandler+0x22c>
 8008614:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008618:	f003 0301 	and.w	r3, r3, #1
 800861c:	2b00      	cmp	r3, #0
 800861e:	d106      	bne.n	800862e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008620:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008624:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008628:	2b00      	cmp	r3, #0
 800862a:	f000 80d1 	beq.w	80087d0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800862e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008632:	f003 0301 	and.w	r3, r3, #1
 8008636:	2b00      	cmp	r3, #0
 8008638:	d00b      	beq.n	8008652 <HAL_UART_IRQHandler+0xae>
 800863a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800863e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008642:	2b00      	cmp	r3, #0
 8008644:	d005      	beq.n	8008652 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800864a:	f043 0201 	orr.w	r2, r3, #1
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008652:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008656:	f003 0304 	and.w	r3, r3, #4
 800865a:	2b00      	cmp	r3, #0
 800865c:	d00b      	beq.n	8008676 <HAL_UART_IRQHandler+0xd2>
 800865e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008662:	f003 0301 	and.w	r3, r3, #1
 8008666:	2b00      	cmp	r3, #0
 8008668:	d005      	beq.n	8008676 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800866e:	f043 0202 	orr.w	r2, r3, #2
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008676:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800867a:	f003 0302 	and.w	r3, r3, #2
 800867e:	2b00      	cmp	r3, #0
 8008680:	d00b      	beq.n	800869a <HAL_UART_IRQHandler+0xf6>
 8008682:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008686:	f003 0301 	and.w	r3, r3, #1
 800868a:	2b00      	cmp	r3, #0
 800868c:	d005      	beq.n	800869a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008692:	f043 0204 	orr.w	r2, r3, #4
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800869a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800869e:	f003 0308 	and.w	r3, r3, #8
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d011      	beq.n	80086ca <HAL_UART_IRQHandler+0x126>
 80086a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086aa:	f003 0320 	and.w	r3, r3, #32
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d105      	bne.n	80086be <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80086b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80086b6:	f003 0301 	and.w	r3, r3, #1
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d005      	beq.n	80086ca <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086c2:	f043 0208 	orr.w	r2, r3, #8
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	f000 81ed 	beq.w	8008aae <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80086d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086d8:	f003 0320 	and.w	r3, r3, #32
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d008      	beq.n	80086f2 <HAL_UART_IRQHandler+0x14e>
 80086e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086e4:	f003 0320 	and.w	r3, r3, #32
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d002      	beq.n	80086f2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80086ec:	6878      	ldr	r0, [r7, #4]
 80086ee:	f000 fd1c 	bl	800912a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	695b      	ldr	r3, [r3, #20]
 80086f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086fc:	2b40      	cmp	r3, #64	; 0x40
 80086fe:	bf0c      	ite	eq
 8008700:	2301      	moveq	r3, #1
 8008702:	2300      	movne	r3, #0
 8008704:	b2db      	uxtb	r3, r3
 8008706:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800870e:	f003 0308 	and.w	r3, r3, #8
 8008712:	2b00      	cmp	r3, #0
 8008714:	d103      	bne.n	800871e <HAL_UART_IRQHandler+0x17a>
 8008716:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800871a:	2b00      	cmp	r3, #0
 800871c:	d04f      	beq.n	80087be <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f000 fc24 	bl	8008f6c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	695b      	ldr	r3, [r3, #20]
 800872a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800872e:	2b40      	cmp	r3, #64	; 0x40
 8008730:	d141      	bne.n	80087b6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	3314      	adds	r3, #20
 8008738:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800873c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008740:	e853 3f00 	ldrex	r3, [r3]
 8008744:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008748:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800874c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008750:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	3314      	adds	r3, #20
 800875a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800875e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008762:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008766:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800876a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800876e:	e841 2300 	strex	r3, r2, [r1]
 8008772:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008776:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800877a:	2b00      	cmp	r3, #0
 800877c:	d1d9      	bne.n	8008732 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008782:	2b00      	cmp	r3, #0
 8008784:	d013      	beq.n	80087ae <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800878a:	4a7d      	ldr	r2, [pc, #500]	; (8008980 <HAL_UART_IRQHandler+0x3dc>)
 800878c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008792:	4618      	mov	r0, r3
 8008794:	f7fb fa1c 	bl	8003bd0 <HAL_DMA_Abort_IT>
 8008798:	4603      	mov	r3, r0
 800879a:	2b00      	cmp	r3, #0
 800879c:	d016      	beq.n	80087cc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087a4:	687a      	ldr	r2, [r7, #4]
 80087a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80087a8:	4610      	mov	r0, r2
 80087aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087ac:	e00e      	b.n	80087cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f000 f99a 	bl	8008ae8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087b4:	e00a      	b.n	80087cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f000 f996 	bl	8008ae8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087bc:	e006      	b.n	80087cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	f000 f992 	bl	8008ae8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2200      	movs	r2, #0
 80087c8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80087ca:	e170      	b.n	8008aae <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087cc:	bf00      	nop
    return;
 80087ce:	e16e      	b.n	8008aae <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087d4:	2b01      	cmp	r3, #1
 80087d6:	f040 814a 	bne.w	8008a6e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80087da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087de:	f003 0310 	and.w	r3, r3, #16
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	f000 8143 	beq.w	8008a6e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80087e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80087ec:	f003 0310 	and.w	r3, r3, #16
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	f000 813c 	beq.w	8008a6e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80087f6:	2300      	movs	r3, #0
 80087f8:	60bb      	str	r3, [r7, #8]
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	60bb      	str	r3, [r7, #8]
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	685b      	ldr	r3, [r3, #4]
 8008808:	60bb      	str	r3, [r7, #8]
 800880a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	695b      	ldr	r3, [r3, #20]
 8008812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008816:	2b40      	cmp	r3, #64	; 0x40
 8008818:	f040 80b4 	bne.w	8008984 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	685b      	ldr	r3, [r3, #4]
 8008824:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008828:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800882c:	2b00      	cmp	r3, #0
 800882e:	f000 8140 	beq.w	8008ab2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008836:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800883a:	429a      	cmp	r2, r3
 800883c:	f080 8139 	bcs.w	8008ab2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008846:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800884c:	69db      	ldr	r3, [r3, #28]
 800884e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008852:	f000 8088 	beq.w	8008966 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	330c      	adds	r3, #12
 800885c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008860:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008864:	e853 3f00 	ldrex	r3, [r3]
 8008868:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800886c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008870:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008874:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	330c      	adds	r3, #12
 800887e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008882:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008886:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800888a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800888e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008892:	e841 2300 	strex	r3, r2, [r1]
 8008896:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800889a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d1d9      	bne.n	8008856 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	3314      	adds	r3, #20
 80088a8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80088ac:	e853 3f00 	ldrex	r3, [r3]
 80088b0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80088b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80088b4:	f023 0301 	bic.w	r3, r3, #1
 80088b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	3314      	adds	r3, #20
 80088c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80088c6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80088ca:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088cc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80088ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80088d2:	e841 2300 	strex	r3, r2, [r1]
 80088d6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80088d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d1e1      	bne.n	80088a2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	3314      	adds	r3, #20
 80088e4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80088e8:	e853 3f00 	ldrex	r3, [r3]
 80088ec:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80088ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80088f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80088f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	3314      	adds	r3, #20
 80088fe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008902:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008904:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008906:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008908:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800890a:	e841 2300 	strex	r3, r2, [r1]
 800890e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008910:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008912:	2b00      	cmp	r3, #0
 8008914:	d1e3      	bne.n	80088de <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2220      	movs	r2, #32
 800891a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2200      	movs	r2, #0
 8008922:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	330c      	adds	r3, #12
 800892a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800892c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800892e:	e853 3f00 	ldrex	r3, [r3]
 8008932:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008934:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008936:	f023 0310 	bic.w	r3, r3, #16
 800893a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	330c      	adds	r3, #12
 8008944:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008948:	65ba      	str	r2, [r7, #88]	; 0x58
 800894a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800894c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800894e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008950:	e841 2300 	strex	r3, r2, [r1]
 8008954:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008956:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008958:	2b00      	cmp	r3, #0
 800895a:	d1e3      	bne.n	8008924 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008960:	4618      	mov	r0, r3
 8008962:	f7fb f8c5 	bl	8003af0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800896e:	b29b      	uxth	r3, r3
 8008970:	1ad3      	subs	r3, r2, r3
 8008972:	b29b      	uxth	r3, r3
 8008974:	4619      	mov	r1, r3
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	f000 f8c0 	bl	8008afc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800897c:	e099      	b.n	8008ab2 <HAL_UART_IRQHandler+0x50e>
 800897e:	bf00      	nop
 8008980:	08009033 	.word	0x08009033
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800898c:	b29b      	uxth	r3, r3
 800898e:	1ad3      	subs	r3, r2, r3
 8008990:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008998:	b29b      	uxth	r3, r3
 800899a:	2b00      	cmp	r3, #0
 800899c:	f000 808b 	beq.w	8008ab6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80089a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	f000 8086 	beq.w	8008ab6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	330c      	adds	r3, #12
 80089b0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089b4:	e853 3f00 	ldrex	r3, [r3]
 80089b8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80089ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80089c0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	330c      	adds	r3, #12
 80089ca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80089ce:	647a      	str	r2, [r7, #68]	; 0x44
 80089d0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089d2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80089d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80089d6:	e841 2300 	strex	r3, r2, [r1]
 80089da:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80089dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d1e3      	bne.n	80089aa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	3314      	adds	r3, #20
 80089e8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ec:	e853 3f00 	ldrex	r3, [r3]
 80089f0:	623b      	str	r3, [r7, #32]
   return(result);
 80089f2:	6a3b      	ldr	r3, [r7, #32]
 80089f4:	f023 0301 	bic.w	r3, r3, #1
 80089f8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	3314      	adds	r3, #20
 8008a02:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008a06:	633a      	str	r2, [r7, #48]	; 0x30
 8008a08:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008a0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a0e:	e841 2300 	strex	r3, r2, [r1]
 8008a12:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d1e3      	bne.n	80089e2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2220      	movs	r2, #32
 8008a1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2200      	movs	r2, #0
 8008a26:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	330c      	adds	r3, #12
 8008a2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a30:	693b      	ldr	r3, [r7, #16]
 8008a32:	e853 3f00 	ldrex	r3, [r3]
 8008a36:	60fb      	str	r3, [r7, #12]
   return(result);
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	f023 0310 	bic.w	r3, r3, #16
 8008a3e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	330c      	adds	r3, #12
 8008a48:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008a4c:	61fa      	str	r2, [r7, #28]
 8008a4e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a50:	69b9      	ldr	r1, [r7, #24]
 8008a52:	69fa      	ldr	r2, [r7, #28]
 8008a54:	e841 2300 	strex	r3, r2, [r1]
 8008a58:	617b      	str	r3, [r7, #20]
   return(result);
 8008a5a:	697b      	ldr	r3, [r7, #20]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d1e3      	bne.n	8008a28 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008a60:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008a64:	4619      	mov	r1, r3
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f000 f848 	bl	8008afc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008a6c:	e023      	b.n	8008ab6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008a6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d009      	beq.n	8008a8e <HAL_UART_IRQHandler+0x4ea>
 8008a7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d003      	beq.n	8008a8e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	f000 fae7 	bl	800905a <UART_Transmit_IT>
    return;
 8008a8c:	e014      	b.n	8008ab8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008a8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d00e      	beq.n	8008ab8 <HAL_UART_IRQHandler+0x514>
 8008a9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d008      	beq.n	8008ab8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f000 fb27 	bl	80090fa <UART_EndTransmit_IT>
    return;
 8008aac:	e004      	b.n	8008ab8 <HAL_UART_IRQHandler+0x514>
    return;
 8008aae:	bf00      	nop
 8008ab0:	e002      	b.n	8008ab8 <HAL_UART_IRQHandler+0x514>
      return;
 8008ab2:	bf00      	nop
 8008ab4:	e000      	b.n	8008ab8 <HAL_UART_IRQHandler+0x514>
      return;
 8008ab6:	bf00      	nop
  }
}
 8008ab8:	37e8      	adds	r7, #232	; 0xe8
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bd80      	pop	{r7, pc}
 8008abe:	bf00      	nop

08008ac0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008ac0:	b480      	push	{r7}
 8008ac2:	b083      	sub	sp, #12
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008ac8:	bf00      	nop
 8008aca:	370c      	adds	r7, #12
 8008acc:	46bd      	mov	sp, r7
 8008ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad2:	4770      	bx	lr

08008ad4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008ad4:	b480      	push	{r7}
 8008ad6:	b083      	sub	sp, #12
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008adc:	bf00      	nop
 8008ade:	370c      	adds	r7, #12
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae6:	4770      	bx	lr

08008ae8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008ae8:	b480      	push	{r7}
 8008aea:	b083      	sub	sp, #12
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008af0:	bf00      	nop
 8008af2:	370c      	adds	r7, #12
 8008af4:	46bd      	mov	sp, r7
 8008af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afa:	4770      	bx	lr

08008afc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008afc:	b480      	push	{r7}
 8008afe:	b083      	sub	sp, #12
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
 8008b04:	460b      	mov	r3, r1
 8008b06:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008b08:	bf00      	nop
 8008b0a:	370c      	adds	r7, #12
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b12:	4770      	bx	lr

08008b14 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b09c      	sub	sp, #112	; 0x70
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b20:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d172      	bne.n	8008c16 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8008b30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b32:	2200      	movs	r2, #0
 8008b34:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008b36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	330c      	adds	r3, #12
 8008b3c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b40:	e853 3f00 	ldrex	r3, [r3]
 8008b44:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008b46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008b4c:	66bb      	str	r3, [r7, #104]	; 0x68
 8008b4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	330c      	adds	r3, #12
 8008b54:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008b56:	65ba      	str	r2, [r7, #88]	; 0x58
 8008b58:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b5a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008b5c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008b5e:	e841 2300 	strex	r3, r2, [r1]
 8008b62:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008b64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d1e5      	bne.n	8008b36 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	3314      	adds	r3, #20
 8008b70:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b74:	e853 3f00 	ldrex	r3, [r3]
 8008b78:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008b7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b7c:	f023 0301 	bic.w	r3, r3, #1
 8008b80:	667b      	str	r3, [r7, #100]	; 0x64
 8008b82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	3314      	adds	r3, #20
 8008b88:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008b8a:	647a      	str	r2, [r7, #68]	; 0x44
 8008b8c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b8e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008b90:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008b92:	e841 2300 	strex	r3, r2, [r1]
 8008b96:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008b98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d1e5      	bne.n	8008b6a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	3314      	adds	r3, #20
 8008ba4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ba8:	e853 3f00 	ldrex	r3, [r3]
 8008bac:	623b      	str	r3, [r7, #32]
   return(result);
 8008bae:	6a3b      	ldr	r3, [r7, #32]
 8008bb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008bb4:	663b      	str	r3, [r7, #96]	; 0x60
 8008bb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	3314      	adds	r3, #20
 8008bbc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008bbe:	633a      	str	r2, [r7, #48]	; 0x30
 8008bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bc2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008bc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008bc6:	e841 2300 	strex	r3, r2, [r1]
 8008bca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d1e5      	bne.n	8008b9e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008bd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bd4:	2220      	movs	r2, #32
 8008bd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008bda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bde:	2b01      	cmp	r3, #1
 8008be0:	d119      	bne.n	8008c16 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008be2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	330c      	adds	r3, #12
 8008be8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bea:	693b      	ldr	r3, [r7, #16]
 8008bec:	e853 3f00 	ldrex	r3, [r3]
 8008bf0:	60fb      	str	r3, [r7, #12]
   return(result);
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	f023 0310 	bic.w	r3, r3, #16
 8008bf8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008bfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	330c      	adds	r3, #12
 8008c00:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008c02:	61fa      	str	r2, [r7, #28]
 8008c04:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c06:	69b9      	ldr	r1, [r7, #24]
 8008c08:	69fa      	ldr	r2, [r7, #28]
 8008c0a:	e841 2300 	strex	r3, r2, [r1]
 8008c0e:	617b      	str	r3, [r7, #20]
   return(result);
 8008c10:	697b      	ldr	r3, [r7, #20]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d1e5      	bne.n	8008be2 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c1a:	2b01      	cmp	r3, #1
 8008c1c:	d106      	bne.n	8008c2c <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008c1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c20:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008c22:	4619      	mov	r1, r3
 8008c24:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008c26:	f7ff ff69 	bl	8008afc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008c2a:	e002      	b.n	8008c32 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8008c2c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008c2e:	f7f9 fb39 	bl	80022a4 <HAL_UART_RxCpltCallback>
}
 8008c32:	bf00      	nop
 8008c34:	3770      	adds	r7, #112	; 0x70
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}

08008c3a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008c3a:	b580      	push	{r7, lr}
 8008c3c:	b084      	sub	sp, #16
 8008c3e:	af00      	add	r7, sp, #0
 8008c40:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c46:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c4c:	2b01      	cmp	r3, #1
 8008c4e:	d108      	bne.n	8008c62 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008c54:	085b      	lsrs	r3, r3, #1
 8008c56:	b29b      	uxth	r3, r3
 8008c58:	4619      	mov	r1, r3
 8008c5a:	68f8      	ldr	r0, [r7, #12]
 8008c5c:	f7ff ff4e 	bl	8008afc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008c60:	e002      	b.n	8008c68 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8008c62:	68f8      	ldr	r0, [r7, #12]
 8008c64:	f7ff ff36 	bl	8008ad4 <HAL_UART_RxHalfCpltCallback>
}
 8008c68:	bf00      	nop
 8008c6a:	3710      	adds	r7, #16
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	bd80      	pop	{r7, pc}

08008c70 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b084      	sub	sp, #16
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008c78:	2300      	movs	r3, #0
 8008c7a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c80:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008c82:	68bb      	ldr	r3, [r7, #8]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	695b      	ldr	r3, [r3, #20]
 8008c88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c8c:	2b80      	cmp	r3, #128	; 0x80
 8008c8e:	bf0c      	ite	eq
 8008c90:	2301      	moveq	r3, #1
 8008c92:	2300      	movne	r3, #0
 8008c94:	b2db      	uxtb	r3, r3
 8008c96:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c9e:	b2db      	uxtb	r3, r3
 8008ca0:	2b21      	cmp	r3, #33	; 0x21
 8008ca2:	d108      	bne.n	8008cb6 <UART_DMAError+0x46>
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d005      	beq.n	8008cb6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008caa:	68bb      	ldr	r3, [r7, #8]
 8008cac:	2200      	movs	r2, #0
 8008cae:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008cb0:	68b8      	ldr	r0, [r7, #8]
 8008cb2:	f000 f933 	bl	8008f1c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008cb6:	68bb      	ldr	r3, [r7, #8]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	695b      	ldr	r3, [r3, #20]
 8008cbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cc0:	2b40      	cmp	r3, #64	; 0x40
 8008cc2:	bf0c      	ite	eq
 8008cc4:	2301      	moveq	r3, #1
 8008cc6:	2300      	movne	r3, #0
 8008cc8:	b2db      	uxtb	r3, r3
 8008cca:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008ccc:	68bb      	ldr	r3, [r7, #8]
 8008cce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008cd2:	b2db      	uxtb	r3, r3
 8008cd4:	2b22      	cmp	r3, #34	; 0x22
 8008cd6:	d108      	bne.n	8008cea <UART_DMAError+0x7a>
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d005      	beq.n	8008cea <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008cde:	68bb      	ldr	r3, [r7, #8]
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008ce4:	68b8      	ldr	r0, [r7, #8]
 8008ce6:	f000 f941 	bl	8008f6c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008cea:	68bb      	ldr	r3, [r7, #8]
 8008cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cee:	f043 0210 	orr.w	r2, r3, #16
 8008cf2:	68bb      	ldr	r3, [r7, #8]
 8008cf4:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008cf6:	68b8      	ldr	r0, [r7, #8]
 8008cf8:	f7ff fef6 	bl	8008ae8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008cfc:	bf00      	nop
 8008cfe:	3710      	adds	r7, #16
 8008d00:	46bd      	mov	sp, r7
 8008d02:	bd80      	pop	{r7, pc}

08008d04 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b090      	sub	sp, #64	; 0x40
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	60f8      	str	r0, [r7, #12]
 8008d0c:	60b9      	str	r1, [r7, #8]
 8008d0e:	603b      	str	r3, [r7, #0]
 8008d10:	4613      	mov	r3, r2
 8008d12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d14:	e050      	b.n	8008db8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d1c:	d04c      	beq.n	8008db8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008d1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d007      	beq.n	8008d34 <UART_WaitOnFlagUntilTimeout+0x30>
 8008d24:	f7fa fc9c 	bl	8003660 <HAL_GetTick>
 8008d28:	4602      	mov	r2, r0
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	1ad3      	subs	r3, r2, r3
 8008d2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008d30:	429a      	cmp	r2, r3
 8008d32:	d241      	bcs.n	8008db8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	330c      	adds	r3, #12
 8008d3a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d3e:	e853 3f00 	ldrex	r3, [r3]
 8008d42:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d46:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	330c      	adds	r3, #12
 8008d52:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008d54:	637a      	str	r2, [r7, #52]	; 0x34
 8008d56:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d58:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008d5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d5c:	e841 2300 	strex	r3, r2, [r1]
 8008d60:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d1e5      	bne.n	8008d34 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	3314      	adds	r3, #20
 8008d6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d70:	697b      	ldr	r3, [r7, #20]
 8008d72:	e853 3f00 	ldrex	r3, [r3]
 8008d76:	613b      	str	r3, [r7, #16]
   return(result);
 8008d78:	693b      	ldr	r3, [r7, #16]
 8008d7a:	f023 0301 	bic.w	r3, r3, #1
 8008d7e:	63bb      	str	r3, [r7, #56]	; 0x38
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	3314      	adds	r3, #20
 8008d86:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008d88:	623a      	str	r2, [r7, #32]
 8008d8a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d8c:	69f9      	ldr	r1, [r7, #28]
 8008d8e:	6a3a      	ldr	r2, [r7, #32]
 8008d90:	e841 2300 	strex	r3, r2, [r1]
 8008d94:	61bb      	str	r3, [r7, #24]
   return(result);
 8008d96:	69bb      	ldr	r3, [r7, #24]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d1e5      	bne.n	8008d68 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	2220      	movs	r2, #32
 8008da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	2220      	movs	r2, #32
 8008da8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	2200      	movs	r2, #0
 8008db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008db4:	2303      	movs	r3, #3
 8008db6:	e00f      	b.n	8008dd8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	681a      	ldr	r2, [r3, #0]
 8008dbe:	68bb      	ldr	r3, [r7, #8]
 8008dc0:	4013      	ands	r3, r2
 8008dc2:	68ba      	ldr	r2, [r7, #8]
 8008dc4:	429a      	cmp	r2, r3
 8008dc6:	bf0c      	ite	eq
 8008dc8:	2301      	moveq	r3, #1
 8008dca:	2300      	movne	r3, #0
 8008dcc:	b2db      	uxtb	r3, r3
 8008dce:	461a      	mov	r2, r3
 8008dd0:	79fb      	ldrb	r3, [r7, #7]
 8008dd2:	429a      	cmp	r2, r3
 8008dd4:	d09f      	beq.n	8008d16 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008dd6:	2300      	movs	r3, #0
}
 8008dd8:	4618      	mov	r0, r3
 8008dda:	3740      	adds	r7, #64	; 0x40
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	bd80      	pop	{r7, pc}

08008de0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b098      	sub	sp, #96	; 0x60
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	60f8      	str	r0, [r7, #12]
 8008de8:	60b9      	str	r1, [r7, #8]
 8008dea:	4613      	mov	r3, r2
 8008dec:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8008dee:	68ba      	ldr	r2, [r7, #8]
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	88fa      	ldrh	r2, [r7, #6]
 8008df8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	2222      	movs	r2, #34	; 0x22
 8008e04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e0c:	4a40      	ldr	r2, [pc, #256]	; (8008f10 <UART_Start_Receive_DMA+0x130>)
 8008e0e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e14:	4a3f      	ldr	r2, [pc, #252]	; (8008f14 <UART_Start_Receive_DMA+0x134>)
 8008e16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e1c:	4a3e      	ldr	r2, [pc, #248]	; (8008f18 <UART_Start_Receive_DMA+0x138>)
 8008e1e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e24:	2200      	movs	r2, #0
 8008e26:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8008e28:	f107 0308 	add.w	r3, r7, #8
 8008e2c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	3304      	adds	r3, #4
 8008e38:	4619      	mov	r1, r3
 8008e3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008e3c:	681a      	ldr	r2, [r3, #0]
 8008e3e:	88fb      	ldrh	r3, [r7, #6]
 8008e40:	f7fa fdfe 	bl	8003a40 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8008e44:	2300      	movs	r3, #0
 8008e46:	613b      	str	r3, [r7, #16]
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	613b      	str	r3, [r7, #16]
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	685b      	ldr	r3, [r3, #4]
 8008e56:	613b      	str	r3, [r7, #16]
 8008e58:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	691b      	ldr	r3, [r3, #16]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d019      	beq.n	8008e9e <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	330c      	adds	r3, #12
 8008e70:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e74:	e853 3f00 	ldrex	r3, [r3]
 8008e78:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008e7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e80:	65bb      	str	r3, [r7, #88]	; 0x58
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	330c      	adds	r3, #12
 8008e88:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008e8a:	64fa      	str	r2, [r7, #76]	; 0x4c
 8008e8c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e8e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008e90:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008e92:	e841 2300 	strex	r3, r2, [r1]
 8008e96:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008e98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d1e5      	bne.n	8008e6a <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	3314      	adds	r3, #20
 8008ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ea8:	e853 3f00 	ldrex	r3, [r3]
 8008eac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eb0:	f043 0301 	orr.w	r3, r3, #1
 8008eb4:	657b      	str	r3, [r7, #84]	; 0x54
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	3314      	adds	r3, #20
 8008ebc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008ebe:	63ba      	str	r2, [r7, #56]	; 0x38
 8008ec0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ec2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008ec4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008ec6:	e841 2300 	strex	r3, r2, [r1]
 8008eca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d1e5      	bne.n	8008e9e <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	3314      	adds	r3, #20
 8008ed8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eda:	69bb      	ldr	r3, [r7, #24]
 8008edc:	e853 3f00 	ldrex	r3, [r3]
 8008ee0:	617b      	str	r3, [r7, #20]
   return(result);
 8008ee2:	697b      	ldr	r3, [r7, #20]
 8008ee4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ee8:	653b      	str	r3, [r7, #80]	; 0x50
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	3314      	adds	r3, #20
 8008ef0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008ef2:	627a      	str	r2, [r7, #36]	; 0x24
 8008ef4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ef6:	6a39      	ldr	r1, [r7, #32]
 8008ef8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008efa:	e841 2300 	strex	r3, r2, [r1]
 8008efe:	61fb      	str	r3, [r7, #28]
   return(result);
 8008f00:	69fb      	ldr	r3, [r7, #28]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d1e5      	bne.n	8008ed2 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8008f06:	2300      	movs	r3, #0
}
 8008f08:	4618      	mov	r0, r3
 8008f0a:	3760      	adds	r7, #96	; 0x60
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	bd80      	pop	{r7, pc}
 8008f10:	08008b15 	.word	0x08008b15
 8008f14:	08008c3b 	.word	0x08008c3b
 8008f18:	08008c71 	.word	0x08008c71

08008f1c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008f1c:	b480      	push	{r7}
 8008f1e:	b089      	sub	sp, #36	; 0x24
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	330c      	adds	r3, #12
 8008f2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	e853 3f00 	ldrex	r3, [r3]
 8008f32:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008f3a:	61fb      	str	r3, [r7, #28]
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	330c      	adds	r3, #12
 8008f42:	69fa      	ldr	r2, [r7, #28]
 8008f44:	61ba      	str	r2, [r7, #24]
 8008f46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f48:	6979      	ldr	r1, [r7, #20]
 8008f4a:	69ba      	ldr	r2, [r7, #24]
 8008f4c:	e841 2300 	strex	r3, r2, [r1]
 8008f50:	613b      	str	r3, [r7, #16]
   return(result);
 8008f52:	693b      	ldr	r3, [r7, #16]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d1e5      	bne.n	8008f24 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2220      	movs	r2, #32
 8008f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8008f60:	bf00      	nop
 8008f62:	3724      	adds	r7, #36	; 0x24
 8008f64:	46bd      	mov	sp, r7
 8008f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6a:	4770      	bx	lr

08008f6c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	b095      	sub	sp, #84	; 0x54
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	330c      	adds	r3, #12
 8008f7a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f7e:	e853 3f00 	ldrex	r3, [r3]
 8008f82:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f86:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008f8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	330c      	adds	r3, #12
 8008f92:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008f94:	643a      	str	r2, [r7, #64]	; 0x40
 8008f96:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f98:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008f9a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008f9c:	e841 2300 	strex	r3, r2, [r1]
 8008fa0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d1e5      	bne.n	8008f74 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	3314      	adds	r3, #20
 8008fae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fb0:	6a3b      	ldr	r3, [r7, #32]
 8008fb2:	e853 3f00 	ldrex	r3, [r3]
 8008fb6:	61fb      	str	r3, [r7, #28]
   return(result);
 8008fb8:	69fb      	ldr	r3, [r7, #28]
 8008fba:	f023 0301 	bic.w	r3, r3, #1
 8008fbe:	64bb      	str	r3, [r7, #72]	; 0x48
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	3314      	adds	r3, #20
 8008fc6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008fc8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008fca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fcc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008fce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008fd0:	e841 2300 	strex	r3, r2, [r1]
 8008fd4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d1e5      	bne.n	8008fa8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fe0:	2b01      	cmp	r3, #1
 8008fe2:	d119      	bne.n	8009018 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	330c      	adds	r3, #12
 8008fea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	e853 3f00 	ldrex	r3, [r3]
 8008ff2:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ff4:	68bb      	ldr	r3, [r7, #8]
 8008ff6:	f023 0310 	bic.w	r3, r3, #16
 8008ffa:	647b      	str	r3, [r7, #68]	; 0x44
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	330c      	adds	r3, #12
 8009002:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009004:	61ba      	str	r2, [r7, #24]
 8009006:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009008:	6979      	ldr	r1, [r7, #20]
 800900a:	69ba      	ldr	r2, [r7, #24]
 800900c:	e841 2300 	strex	r3, r2, [r1]
 8009010:	613b      	str	r3, [r7, #16]
   return(result);
 8009012:	693b      	ldr	r3, [r7, #16]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d1e5      	bne.n	8008fe4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2220      	movs	r2, #32
 800901c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2200      	movs	r2, #0
 8009024:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009026:	bf00      	nop
 8009028:	3754      	adds	r7, #84	; 0x54
 800902a:	46bd      	mov	sp, r7
 800902c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009030:	4770      	bx	lr

08009032 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009032:	b580      	push	{r7, lr}
 8009034:	b084      	sub	sp, #16
 8009036:	af00      	add	r7, sp, #0
 8009038:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800903e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	2200      	movs	r2, #0
 8009044:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	2200      	movs	r2, #0
 800904a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800904c:	68f8      	ldr	r0, [r7, #12]
 800904e:	f7ff fd4b 	bl	8008ae8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009052:	bf00      	nop
 8009054:	3710      	adds	r7, #16
 8009056:	46bd      	mov	sp, r7
 8009058:	bd80      	pop	{r7, pc}

0800905a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800905a:	b480      	push	{r7}
 800905c:	b085      	sub	sp, #20
 800905e:	af00      	add	r7, sp, #0
 8009060:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009068:	b2db      	uxtb	r3, r3
 800906a:	2b21      	cmp	r3, #33	; 0x21
 800906c:	d13e      	bne.n	80090ec <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	689b      	ldr	r3, [r3, #8]
 8009072:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009076:	d114      	bne.n	80090a2 <UART_Transmit_IT+0x48>
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	691b      	ldr	r3, [r3, #16]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d110      	bne.n	80090a2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	6a1b      	ldr	r3, [r3, #32]
 8009084:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	881b      	ldrh	r3, [r3, #0]
 800908a:	461a      	mov	r2, r3
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009094:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	6a1b      	ldr	r3, [r3, #32]
 800909a:	1c9a      	adds	r2, r3, #2
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	621a      	str	r2, [r3, #32]
 80090a0:	e008      	b.n	80090b4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6a1b      	ldr	r3, [r3, #32]
 80090a6:	1c59      	adds	r1, r3, #1
 80090a8:	687a      	ldr	r2, [r7, #4]
 80090aa:	6211      	str	r1, [r2, #32]
 80090ac:	781a      	ldrb	r2, [r3, #0]
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80090b8:	b29b      	uxth	r3, r3
 80090ba:	3b01      	subs	r3, #1
 80090bc:	b29b      	uxth	r3, r3
 80090be:	687a      	ldr	r2, [r7, #4]
 80090c0:	4619      	mov	r1, r3
 80090c2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d10f      	bne.n	80090e8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	68da      	ldr	r2, [r3, #12]
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80090d6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	68da      	ldr	r2, [r3, #12]
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80090e6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80090e8:	2300      	movs	r3, #0
 80090ea:	e000      	b.n	80090ee <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80090ec:	2302      	movs	r3, #2
  }
}
 80090ee:	4618      	mov	r0, r3
 80090f0:	3714      	adds	r7, #20
 80090f2:	46bd      	mov	sp, r7
 80090f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f8:	4770      	bx	lr

080090fa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80090fa:	b580      	push	{r7, lr}
 80090fc:	b082      	sub	sp, #8
 80090fe:	af00      	add	r7, sp, #0
 8009100:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	68da      	ldr	r2, [r3, #12]
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009110:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2220      	movs	r2, #32
 8009116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	f7ff fcd0 	bl	8008ac0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009120:	2300      	movs	r3, #0
}
 8009122:	4618      	mov	r0, r3
 8009124:	3708      	adds	r7, #8
 8009126:	46bd      	mov	sp, r7
 8009128:	bd80      	pop	{r7, pc}

0800912a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800912a:	b580      	push	{r7, lr}
 800912c:	b08c      	sub	sp, #48	; 0x30
 800912e:	af00      	add	r7, sp, #0
 8009130:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009138:	b2db      	uxtb	r3, r3
 800913a:	2b22      	cmp	r3, #34	; 0x22
 800913c:	f040 80ab 	bne.w	8009296 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	689b      	ldr	r3, [r3, #8]
 8009144:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009148:	d117      	bne.n	800917a <UART_Receive_IT+0x50>
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	691b      	ldr	r3, [r3, #16]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d113      	bne.n	800917a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009152:	2300      	movs	r3, #0
 8009154:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800915a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	685b      	ldr	r3, [r3, #4]
 8009162:	b29b      	uxth	r3, r3
 8009164:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009168:	b29a      	uxth	r2, r3
 800916a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800916c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009172:	1c9a      	adds	r2, r3, #2
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	629a      	str	r2, [r3, #40]	; 0x28
 8009178:	e026      	b.n	80091c8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800917e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009180:	2300      	movs	r3, #0
 8009182:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	689b      	ldr	r3, [r3, #8]
 8009188:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800918c:	d007      	beq.n	800919e <UART_Receive_IT+0x74>
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	689b      	ldr	r3, [r3, #8]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d10a      	bne.n	80091ac <UART_Receive_IT+0x82>
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	691b      	ldr	r3, [r3, #16]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d106      	bne.n	80091ac <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	685b      	ldr	r3, [r3, #4]
 80091a4:	b2da      	uxtb	r2, r3
 80091a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091a8:	701a      	strb	r2, [r3, #0]
 80091aa:	e008      	b.n	80091be <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	685b      	ldr	r3, [r3, #4]
 80091b2:	b2db      	uxtb	r3, r3
 80091b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091b8:	b2da      	uxtb	r2, r3
 80091ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091bc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091c2:	1c5a      	adds	r2, r3, #1
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80091cc:	b29b      	uxth	r3, r3
 80091ce:	3b01      	subs	r3, #1
 80091d0:	b29b      	uxth	r3, r3
 80091d2:	687a      	ldr	r2, [r7, #4]
 80091d4:	4619      	mov	r1, r3
 80091d6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d15a      	bne.n	8009292 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	68da      	ldr	r2, [r3, #12]
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	f022 0220 	bic.w	r2, r2, #32
 80091ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	68da      	ldr	r2, [r3, #12]
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80091fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	695a      	ldr	r2, [r3, #20]
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	f022 0201 	bic.w	r2, r2, #1
 800920a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2220      	movs	r2, #32
 8009210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009218:	2b01      	cmp	r3, #1
 800921a:	d135      	bne.n	8009288 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2200      	movs	r2, #0
 8009220:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	330c      	adds	r3, #12
 8009228:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800922a:	697b      	ldr	r3, [r7, #20]
 800922c:	e853 3f00 	ldrex	r3, [r3]
 8009230:	613b      	str	r3, [r7, #16]
   return(result);
 8009232:	693b      	ldr	r3, [r7, #16]
 8009234:	f023 0310 	bic.w	r3, r3, #16
 8009238:	627b      	str	r3, [r7, #36]	; 0x24
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	330c      	adds	r3, #12
 8009240:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009242:	623a      	str	r2, [r7, #32]
 8009244:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009246:	69f9      	ldr	r1, [r7, #28]
 8009248:	6a3a      	ldr	r2, [r7, #32]
 800924a:	e841 2300 	strex	r3, r2, [r1]
 800924e:	61bb      	str	r3, [r7, #24]
   return(result);
 8009250:	69bb      	ldr	r3, [r7, #24]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d1e5      	bne.n	8009222 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	f003 0310 	and.w	r3, r3, #16
 8009260:	2b10      	cmp	r3, #16
 8009262:	d10a      	bne.n	800927a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009264:	2300      	movs	r3, #0
 8009266:	60fb      	str	r3, [r7, #12]
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	60fb      	str	r3, [r7, #12]
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	685b      	ldr	r3, [r3, #4]
 8009276:	60fb      	str	r3, [r7, #12]
 8009278:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800927e:	4619      	mov	r1, r3
 8009280:	6878      	ldr	r0, [r7, #4]
 8009282:	f7ff fc3b 	bl	8008afc <HAL_UARTEx_RxEventCallback>
 8009286:	e002      	b.n	800928e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009288:	6878      	ldr	r0, [r7, #4]
 800928a:	f7f9 f80b 	bl	80022a4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800928e:	2300      	movs	r3, #0
 8009290:	e002      	b.n	8009298 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8009292:	2300      	movs	r3, #0
 8009294:	e000      	b.n	8009298 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8009296:	2302      	movs	r3, #2
  }
}
 8009298:	4618      	mov	r0, r3
 800929a:	3730      	adds	r7, #48	; 0x30
 800929c:	46bd      	mov	sp, r7
 800929e:	bd80      	pop	{r7, pc}

080092a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80092a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80092a4:	b0c0      	sub	sp, #256	; 0x100
 80092a6:	af00      	add	r7, sp, #0
 80092a8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80092ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	691b      	ldr	r3, [r3, #16]
 80092b4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80092b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092bc:	68d9      	ldr	r1, [r3, #12]
 80092be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092c2:	681a      	ldr	r2, [r3, #0]
 80092c4:	ea40 0301 	orr.w	r3, r0, r1
 80092c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80092ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092ce:	689a      	ldr	r2, [r3, #8]
 80092d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092d4:	691b      	ldr	r3, [r3, #16]
 80092d6:	431a      	orrs	r2, r3
 80092d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092dc:	695b      	ldr	r3, [r3, #20]
 80092de:	431a      	orrs	r2, r3
 80092e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092e4:	69db      	ldr	r3, [r3, #28]
 80092e6:	4313      	orrs	r3, r2
 80092e8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80092ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	68db      	ldr	r3, [r3, #12]
 80092f4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80092f8:	f021 010c 	bic.w	r1, r1, #12
 80092fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009300:	681a      	ldr	r2, [r3, #0]
 8009302:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009306:	430b      	orrs	r3, r1
 8009308:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800930a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	695b      	ldr	r3, [r3, #20]
 8009312:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800931a:	6999      	ldr	r1, [r3, #24]
 800931c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009320:	681a      	ldr	r2, [r3, #0]
 8009322:	ea40 0301 	orr.w	r3, r0, r1
 8009326:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800932c:	681a      	ldr	r2, [r3, #0]
 800932e:	4b8f      	ldr	r3, [pc, #572]	; (800956c <UART_SetConfig+0x2cc>)
 8009330:	429a      	cmp	r2, r3
 8009332:	d005      	beq.n	8009340 <UART_SetConfig+0xa0>
 8009334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009338:	681a      	ldr	r2, [r3, #0]
 800933a:	4b8d      	ldr	r3, [pc, #564]	; (8009570 <UART_SetConfig+0x2d0>)
 800933c:	429a      	cmp	r2, r3
 800933e:	d104      	bne.n	800934a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009340:	f7fe f9ce 	bl	80076e0 <HAL_RCC_GetPCLK2Freq>
 8009344:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009348:	e003      	b.n	8009352 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800934a:	f7fe f9b5 	bl	80076b8 <HAL_RCC_GetPCLK1Freq>
 800934e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009352:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009356:	69db      	ldr	r3, [r3, #28]
 8009358:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800935c:	f040 810c 	bne.w	8009578 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009360:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009364:	2200      	movs	r2, #0
 8009366:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800936a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800936e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009372:	4622      	mov	r2, r4
 8009374:	462b      	mov	r3, r5
 8009376:	1891      	adds	r1, r2, r2
 8009378:	65b9      	str	r1, [r7, #88]	; 0x58
 800937a:	415b      	adcs	r3, r3
 800937c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800937e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009382:	4621      	mov	r1, r4
 8009384:	eb12 0801 	adds.w	r8, r2, r1
 8009388:	4629      	mov	r1, r5
 800938a:	eb43 0901 	adc.w	r9, r3, r1
 800938e:	f04f 0200 	mov.w	r2, #0
 8009392:	f04f 0300 	mov.w	r3, #0
 8009396:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800939a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800939e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80093a2:	4690      	mov	r8, r2
 80093a4:	4699      	mov	r9, r3
 80093a6:	4623      	mov	r3, r4
 80093a8:	eb18 0303 	adds.w	r3, r8, r3
 80093ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80093b0:	462b      	mov	r3, r5
 80093b2:	eb49 0303 	adc.w	r3, r9, r3
 80093b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80093ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093be:	685b      	ldr	r3, [r3, #4]
 80093c0:	2200      	movs	r2, #0
 80093c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80093c6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80093ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80093ce:	460b      	mov	r3, r1
 80093d0:	18db      	adds	r3, r3, r3
 80093d2:	653b      	str	r3, [r7, #80]	; 0x50
 80093d4:	4613      	mov	r3, r2
 80093d6:	eb42 0303 	adc.w	r3, r2, r3
 80093da:	657b      	str	r3, [r7, #84]	; 0x54
 80093dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80093e0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80093e4:	f7f7 fc58 	bl	8000c98 <__aeabi_uldivmod>
 80093e8:	4602      	mov	r2, r0
 80093ea:	460b      	mov	r3, r1
 80093ec:	4b61      	ldr	r3, [pc, #388]	; (8009574 <UART_SetConfig+0x2d4>)
 80093ee:	fba3 2302 	umull	r2, r3, r3, r2
 80093f2:	095b      	lsrs	r3, r3, #5
 80093f4:	011c      	lsls	r4, r3, #4
 80093f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80093fa:	2200      	movs	r2, #0
 80093fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009400:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009404:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009408:	4642      	mov	r2, r8
 800940a:	464b      	mov	r3, r9
 800940c:	1891      	adds	r1, r2, r2
 800940e:	64b9      	str	r1, [r7, #72]	; 0x48
 8009410:	415b      	adcs	r3, r3
 8009412:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009414:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009418:	4641      	mov	r1, r8
 800941a:	eb12 0a01 	adds.w	sl, r2, r1
 800941e:	4649      	mov	r1, r9
 8009420:	eb43 0b01 	adc.w	fp, r3, r1
 8009424:	f04f 0200 	mov.w	r2, #0
 8009428:	f04f 0300 	mov.w	r3, #0
 800942c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009430:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009434:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009438:	4692      	mov	sl, r2
 800943a:	469b      	mov	fp, r3
 800943c:	4643      	mov	r3, r8
 800943e:	eb1a 0303 	adds.w	r3, sl, r3
 8009442:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009446:	464b      	mov	r3, r9
 8009448:	eb4b 0303 	adc.w	r3, fp, r3
 800944c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009454:	685b      	ldr	r3, [r3, #4]
 8009456:	2200      	movs	r2, #0
 8009458:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800945c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009460:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009464:	460b      	mov	r3, r1
 8009466:	18db      	adds	r3, r3, r3
 8009468:	643b      	str	r3, [r7, #64]	; 0x40
 800946a:	4613      	mov	r3, r2
 800946c:	eb42 0303 	adc.w	r3, r2, r3
 8009470:	647b      	str	r3, [r7, #68]	; 0x44
 8009472:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009476:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800947a:	f7f7 fc0d 	bl	8000c98 <__aeabi_uldivmod>
 800947e:	4602      	mov	r2, r0
 8009480:	460b      	mov	r3, r1
 8009482:	4611      	mov	r1, r2
 8009484:	4b3b      	ldr	r3, [pc, #236]	; (8009574 <UART_SetConfig+0x2d4>)
 8009486:	fba3 2301 	umull	r2, r3, r3, r1
 800948a:	095b      	lsrs	r3, r3, #5
 800948c:	2264      	movs	r2, #100	; 0x64
 800948e:	fb02 f303 	mul.w	r3, r2, r3
 8009492:	1acb      	subs	r3, r1, r3
 8009494:	00db      	lsls	r3, r3, #3
 8009496:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800949a:	4b36      	ldr	r3, [pc, #216]	; (8009574 <UART_SetConfig+0x2d4>)
 800949c:	fba3 2302 	umull	r2, r3, r3, r2
 80094a0:	095b      	lsrs	r3, r3, #5
 80094a2:	005b      	lsls	r3, r3, #1
 80094a4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80094a8:	441c      	add	r4, r3
 80094aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80094ae:	2200      	movs	r2, #0
 80094b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80094b4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80094b8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80094bc:	4642      	mov	r2, r8
 80094be:	464b      	mov	r3, r9
 80094c0:	1891      	adds	r1, r2, r2
 80094c2:	63b9      	str	r1, [r7, #56]	; 0x38
 80094c4:	415b      	adcs	r3, r3
 80094c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80094c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80094cc:	4641      	mov	r1, r8
 80094ce:	1851      	adds	r1, r2, r1
 80094d0:	6339      	str	r1, [r7, #48]	; 0x30
 80094d2:	4649      	mov	r1, r9
 80094d4:	414b      	adcs	r3, r1
 80094d6:	637b      	str	r3, [r7, #52]	; 0x34
 80094d8:	f04f 0200 	mov.w	r2, #0
 80094dc:	f04f 0300 	mov.w	r3, #0
 80094e0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80094e4:	4659      	mov	r1, fp
 80094e6:	00cb      	lsls	r3, r1, #3
 80094e8:	4651      	mov	r1, sl
 80094ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80094ee:	4651      	mov	r1, sl
 80094f0:	00ca      	lsls	r2, r1, #3
 80094f2:	4610      	mov	r0, r2
 80094f4:	4619      	mov	r1, r3
 80094f6:	4603      	mov	r3, r0
 80094f8:	4642      	mov	r2, r8
 80094fa:	189b      	adds	r3, r3, r2
 80094fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009500:	464b      	mov	r3, r9
 8009502:	460a      	mov	r2, r1
 8009504:	eb42 0303 	adc.w	r3, r2, r3
 8009508:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800950c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009510:	685b      	ldr	r3, [r3, #4]
 8009512:	2200      	movs	r2, #0
 8009514:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009518:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800951c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009520:	460b      	mov	r3, r1
 8009522:	18db      	adds	r3, r3, r3
 8009524:	62bb      	str	r3, [r7, #40]	; 0x28
 8009526:	4613      	mov	r3, r2
 8009528:	eb42 0303 	adc.w	r3, r2, r3
 800952c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800952e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009532:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009536:	f7f7 fbaf 	bl	8000c98 <__aeabi_uldivmod>
 800953a:	4602      	mov	r2, r0
 800953c:	460b      	mov	r3, r1
 800953e:	4b0d      	ldr	r3, [pc, #52]	; (8009574 <UART_SetConfig+0x2d4>)
 8009540:	fba3 1302 	umull	r1, r3, r3, r2
 8009544:	095b      	lsrs	r3, r3, #5
 8009546:	2164      	movs	r1, #100	; 0x64
 8009548:	fb01 f303 	mul.w	r3, r1, r3
 800954c:	1ad3      	subs	r3, r2, r3
 800954e:	00db      	lsls	r3, r3, #3
 8009550:	3332      	adds	r3, #50	; 0x32
 8009552:	4a08      	ldr	r2, [pc, #32]	; (8009574 <UART_SetConfig+0x2d4>)
 8009554:	fba2 2303 	umull	r2, r3, r2, r3
 8009558:	095b      	lsrs	r3, r3, #5
 800955a:	f003 0207 	and.w	r2, r3, #7
 800955e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	4422      	add	r2, r4
 8009566:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009568:	e105      	b.n	8009776 <UART_SetConfig+0x4d6>
 800956a:	bf00      	nop
 800956c:	40011000 	.word	0x40011000
 8009570:	40011400 	.word	0x40011400
 8009574:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009578:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800957c:	2200      	movs	r2, #0
 800957e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009582:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009586:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800958a:	4642      	mov	r2, r8
 800958c:	464b      	mov	r3, r9
 800958e:	1891      	adds	r1, r2, r2
 8009590:	6239      	str	r1, [r7, #32]
 8009592:	415b      	adcs	r3, r3
 8009594:	627b      	str	r3, [r7, #36]	; 0x24
 8009596:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800959a:	4641      	mov	r1, r8
 800959c:	1854      	adds	r4, r2, r1
 800959e:	4649      	mov	r1, r9
 80095a0:	eb43 0501 	adc.w	r5, r3, r1
 80095a4:	f04f 0200 	mov.w	r2, #0
 80095a8:	f04f 0300 	mov.w	r3, #0
 80095ac:	00eb      	lsls	r3, r5, #3
 80095ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80095b2:	00e2      	lsls	r2, r4, #3
 80095b4:	4614      	mov	r4, r2
 80095b6:	461d      	mov	r5, r3
 80095b8:	4643      	mov	r3, r8
 80095ba:	18e3      	adds	r3, r4, r3
 80095bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80095c0:	464b      	mov	r3, r9
 80095c2:	eb45 0303 	adc.w	r3, r5, r3
 80095c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80095ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095ce:	685b      	ldr	r3, [r3, #4]
 80095d0:	2200      	movs	r2, #0
 80095d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80095d6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80095da:	f04f 0200 	mov.w	r2, #0
 80095de:	f04f 0300 	mov.w	r3, #0
 80095e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80095e6:	4629      	mov	r1, r5
 80095e8:	008b      	lsls	r3, r1, #2
 80095ea:	4621      	mov	r1, r4
 80095ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80095f0:	4621      	mov	r1, r4
 80095f2:	008a      	lsls	r2, r1, #2
 80095f4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80095f8:	f7f7 fb4e 	bl	8000c98 <__aeabi_uldivmod>
 80095fc:	4602      	mov	r2, r0
 80095fe:	460b      	mov	r3, r1
 8009600:	4b60      	ldr	r3, [pc, #384]	; (8009784 <UART_SetConfig+0x4e4>)
 8009602:	fba3 2302 	umull	r2, r3, r3, r2
 8009606:	095b      	lsrs	r3, r3, #5
 8009608:	011c      	lsls	r4, r3, #4
 800960a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800960e:	2200      	movs	r2, #0
 8009610:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009614:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009618:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800961c:	4642      	mov	r2, r8
 800961e:	464b      	mov	r3, r9
 8009620:	1891      	adds	r1, r2, r2
 8009622:	61b9      	str	r1, [r7, #24]
 8009624:	415b      	adcs	r3, r3
 8009626:	61fb      	str	r3, [r7, #28]
 8009628:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800962c:	4641      	mov	r1, r8
 800962e:	1851      	adds	r1, r2, r1
 8009630:	6139      	str	r1, [r7, #16]
 8009632:	4649      	mov	r1, r9
 8009634:	414b      	adcs	r3, r1
 8009636:	617b      	str	r3, [r7, #20]
 8009638:	f04f 0200 	mov.w	r2, #0
 800963c:	f04f 0300 	mov.w	r3, #0
 8009640:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009644:	4659      	mov	r1, fp
 8009646:	00cb      	lsls	r3, r1, #3
 8009648:	4651      	mov	r1, sl
 800964a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800964e:	4651      	mov	r1, sl
 8009650:	00ca      	lsls	r2, r1, #3
 8009652:	4610      	mov	r0, r2
 8009654:	4619      	mov	r1, r3
 8009656:	4603      	mov	r3, r0
 8009658:	4642      	mov	r2, r8
 800965a:	189b      	adds	r3, r3, r2
 800965c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009660:	464b      	mov	r3, r9
 8009662:	460a      	mov	r2, r1
 8009664:	eb42 0303 	adc.w	r3, r2, r3
 8009668:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800966c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009670:	685b      	ldr	r3, [r3, #4]
 8009672:	2200      	movs	r2, #0
 8009674:	67bb      	str	r3, [r7, #120]	; 0x78
 8009676:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009678:	f04f 0200 	mov.w	r2, #0
 800967c:	f04f 0300 	mov.w	r3, #0
 8009680:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009684:	4649      	mov	r1, r9
 8009686:	008b      	lsls	r3, r1, #2
 8009688:	4641      	mov	r1, r8
 800968a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800968e:	4641      	mov	r1, r8
 8009690:	008a      	lsls	r2, r1, #2
 8009692:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009696:	f7f7 faff 	bl	8000c98 <__aeabi_uldivmod>
 800969a:	4602      	mov	r2, r0
 800969c:	460b      	mov	r3, r1
 800969e:	4b39      	ldr	r3, [pc, #228]	; (8009784 <UART_SetConfig+0x4e4>)
 80096a0:	fba3 1302 	umull	r1, r3, r3, r2
 80096a4:	095b      	lsrs	r3, r3, #5
 80096a6:	2164      	movs	r1, #100	; 0x64
 80096a8:	fb01 f303 	mul.w	r3, r1, r3
 80096ac:	1ad3      	subs	r3, r2, r3
 80096ae:	011b      	lsls	r3, r3, #4
 80096b0:	3332      	adds	r3, #50	; 0x32
 80096b2:	4a34      	ldr	r2, [pc, #208]	; (8009784 <UART_SetConfig+0x4e4>)
 80096b4:	fba2 2303 	umull	r2, r3, r2, r3
 80096b8:	095b      	lsrs	r3, r3, #5
 80096ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80096be:	441c      	add	r4, r3
 80096c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80096c4:	2200      	movs	r2, #0
 80096c6:	673b      	str	r3, [r7, #112]	; 0x70
 80096c8:	677a      	str	r2, [r7, #116]	; 0x74
 80096ca:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80096ce:	4642      	mov	r2, r8
 80096d0:	464b      	mov	r3, r9
 80096d2:	1891      	adds	r1, r2, r2
 80096d4:	60b9      	str	r1, [r7, #8]
 80096d6:	415b      	adcs	r3, r3
 80096d8:	60fb      	str	r3, [r7, #12]
 80096da:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80096de:	4641      	mov	r1, r8
 80096e0:	1851      	adds	r1, r2, r1
 80096e2:	6039      	str	r1, [r7, #0]
 80096e4:	4649      	mov	r1, r9
 80096e6:	414b      	adcs	r3, r1
 80096e8:	607b      	str	r3, [r7, #4]
 80096ea:	f04f 0200 	mov.w	r2, #0
 80096ee:	f04f 0300 	mov.w	r3, #0
 80096f2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80096f6:	4659      	mov	r1, fp
 80096f8:	00cb      	lsls	r3, r1, #3
 80096fa:	4651      	mov	r1, sl
 80096fc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009700:	4651      	mov	r1, sl
 8009702:	00ca      	lsls	r2, r1, #3
 8009704:	4610      	mov	r0, r2
 8009706:	4619      	mov	r1, r3
 8009708:	4603      	mov	r3, r0
 800970a:	4642      	mov	r2, r8
 800970c:	189b      	adds	r3, r3, r2
 800970e:	66bb      	str	r3, [r7, #104]	; 0x68
 8009710:	464b      	mov	r3, r9
 8009712:	460a      	mov	r2, r1
 8009714:	eb42 0303 	adc.w	r3, r2, r3
 8009718:	66fb      	str	r3, [r7, #108]	; 0x6c
 800971a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800971e:	685b      	ldr	r3, [r3, #4]
 8009720:	2200      	movs	r2, #0
 8009722:	663b      	str	r3, [r7, #96]	; 0x60
 8009724:	667a      	str	r2, [r7, #100]	; 0x64
 8009726:	f04f 0200 	mov.w	r2, #0
 800972a:	f04f 0300 	mov.w	r3, #0
 800972e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009732:	4649      	mov	r1, r9
 8009734:	008b      	lsls	r3, r1, #2
 8009736:	4641      	mov	r1, r8
 8009738:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800973c:	4641      	mov	r1, r8
 800973e:	008a      	lsls	r2, r1, #2
 8009740:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009744:	f7f7 faa8 	bl	8000c98 <__aeabi_uldivmod>
 8009748:	4602      	mov	r2, r0
 800974a:	460b      	mov	r3, r1
 800974c:	4b0d      	ldr	r3, [pc, #52]	; (8009784 <UART_SetConfig+0x4e4>)
 800974e:	fba3 1302 	umull	r1, r3, r3, r2
 8009752:	095b      	lsrs	r3, r3, #5
 8009754:	2164      	movs	r1, #100	; 0x64
 8009756:	fb01 f303 	mul.w	r3, r1, r3
 800975a:	1ad3      	subs	r3, r2, r3
 800975c:	011b      	lsls	r3, r3, #4
 800975e:	3332      	adds	r3, #50	; 0x32
 8009760:	4a08      	ldr	r2, [pc, #32]	; (8009784 <UART_SetConfig+0x4e4>)
 8009762:	fba2 2303 	umull	r2, r3, r2, r3
 8009766:	095b      	lsrs	r3, r3, #5
 8009768:	f003 020f 	and.w	r2, r3, #15
 800976c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	4422      	add	r2, r4
 8009774:	609a      	str	r2, [r3, #8]
}
 8009776:	bf00      	nop
 8009778:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800977c:	46bd      	mov	sp, r7
 800977e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009782:	bf00      	nop
 8009784:	51eb851f 	.word	0x51eb851f

08009788 <__errno>:
 8009788:	4b01      	ldr	r3, [pc, #4]	; (8009790 <__errno+0x8>)
 800978a:	6818      	ldr	r0, [r3, #0]
 800978c:	4770      	bx	lr
 800978e:	bf00      	nop
 8009790:	20000028 	.word	0x20000028

08009794 <__libc_init_array>:
 8009794:	b570      	push	{r4, r5, r6, lr}
 8009796:	4d0d      	ldr	r5, [pc, #52]	; (80097cc <__libc_init_array+0x38>)
 8009798:	4c0d      	ldr	r4, [pc, #52]	; (80097d0 <__libc_init_array+0x3c>)
 800979a:	1b64      	subs	r4, r4, r5
 800979c:	10a4      	asrs	r4, r4, #2
 800979e:	2600      	movs	r6, #0
 80097a0:	42a6      	cmp	r6, r4
 80097a2:	d109      	bne.n	80097b8 <__libc_init_array+0x24>
 80097a4:	4d0b      	ldr	r5, [pc, #44]	; (80097d4 <__libc_init_array+0x40>)
 80097a6:	4c0c      	ldr	r4, [pc, #48]	; (80097d8 <__libc_init_array+0x44>)
 80097a8:	f002 ff76 	bl	800c698 <_init>
 80097ac:	1b64      	subs	r4, r4, r5
 80097ae:	10a4      	asrs	r4, r4, #2
 80097b0:	2600      	movs	r6, #0
 80097b2:	42a6      	cmp	r6, r4
 80097b4:	d105      	bne.n	80097c2 <__libc_init_array+0x2e>
 80097b6:	bd70      	pop	{r4, r5, r6, pc}
 80097b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80097bc:	4798      	blx	r3
 80097be:	3601      	adds	r6, #1
 80097c0:	e7ee      	b.n	80097a0 <__libc_init_array+0xc>
 80097c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80097c6:	4798      	blx	r3
 80097c8:	3601      	adds	r6, #1
 80097ca:	e7f2      	b.n	80097b2 <__libc_init_array+0x1e>
 80097cc:	0800dc0c 	.word	0x0800dc0c
 80097d0:	0800dc0c 	.word	0x0800dc0c
 80097d4:	0800dc0c 	.word	0x0800dc0c
 80097d8:	0800dc10 	.word	0x0800dc10

080097dc <memset>:
 80097dc:	4402      	add	r2, r0
 80097de:	4603      	mov	r3, r0
 80097e0:	4293      	cmp	r3, r2
 80097e2:	d100      	bne.n	80097e6 <memset+0xa>
 80097e4:	4770      	bx	lr
 80097e6:	f803 1b01 	strb.w	r1, [r3], #1
 80097ea:	e7f9      	b.n	80097e0 <memset+0x4>

080097ec <__cvt>:
 80097ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80097f0:	ec55 4b10 	vmov	r4, r5, d0
 80097f4:	2d00      	cmp	r5, #0
 80097f6:	460e      	mov	r6, r1
 80097f8:	4619      	mov	r1, r3
 80097fa:	462b      	mov	r3, r5
 80097fc:	bfbb      	ittet	lt
 80097fe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009802:	461d      	movlt	r5, r3
 8009804:	2300      	movge	r3, #0
 8009806:	232d      	movlt	r3, #45	; 0x2d
 8009808:	700b      	strb	r3, [r1, #0]
 800980a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800980c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009810:	4691      	mov	r9, r2
 8009812:	f023 0820 	bic.w	r8, r3, #32
 8009816:	bfbc      	itt	lt
 8009818:	4622      	movlt	r2, r4
 800981a:	4614      	movlt	r4, r2
 800981c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009820:	d005      	beq.n	800982e <__cvt+0x42>
 8009822:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009826:	d100      	bne.n	800982a <__cvt+0x3e>
 8009828:	3601      	adds	r6, #1
 800982a:	2102      	movs	r1, #2
 800982c:	e000      	b.n	8009830 <__cvt+0x44>
 800982e:	2103      	movs	r1, #3
 8009830:	ab03      	add	r3, sp, #12
 8009832:	9301      	str	r3, [sp, #4]
 8009834:	ab02      	add	r3, sp, #8
 8009836:	9300      	str	r3, [sp, #0]
 8009838:	ec45 4b10 	vmov	d0, r4, r5
 800983c:	4653      	mov	r3, sl
 800983e:	4632      	mov	r2, r6
 8009840:	f000 fcea 	bl	800a218 <_dtoa_r>
 8009844:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009848:	4607      	mov	r7, r0
 800984a:	d102      	bne.n	8009852 <__cvt+0x66>
 800984c:	f019 0f01 	tst.w	r9, #1
 8009850:	d022      	beq.n	8009898 <__cvt+0xac>
 8009852:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009856:	eb07 0906 	add.w	r9, r7, r6
 800985a:	d110      	bne.n	800987e <__cvt+0x92>
 800985c:	783b      	ldrb	r3, [r7, #0]
 800985e:	2b30      	cmp	r3, #48	; 0x30
 8009860:	d10a      	bne.n	8009878 <__cvt+0x8c>
 8009862:	2200      	movs	r2, #0
 8009864:	2300      	movs	r3, #0
 8009866:	4620      	mov	r0, r4
 8009868:	4629      	mov	r1, r5
 800986a:	f7f7 f935 	bl	8000ad8 <__aeabi_dcmpeq>
 800986e:	b918      	cbnz	r0, 8009878 <__cvt+0x8c>
 8009870:	f1c6 0601 	rsb	r6, r6, #1
 8009874:	f8ca 6000 	str.w	r6, [sl]
 8009878:	f8da 3000 	ldr.w	r3, [sl]
 800987c:	4499      	add	r9, r3
 800987e:	2200      	movs	r2, #0
 8009880:	2300      	movs	r3, #0
 8009882:	4620      	mov	r0, r4
 8009884:	4629      	mov	r1, r5
 8009886:	f7f7 f927 	bl	8000ad8 <__aeabi_dcmpeq>
 800988a:	b108      	cbz	r0, 8009890 <__cvt+0xa4>
 800988c:	f8cd 900c 	str.w	r9, [sp, #12]
 8009890:	2230      	movs	r2, #48	; 0x30
 8009892:	9b03      	ldr	r3, [sp, #12]
 8009894:	454b      	cmp	r3, r9
 8009896:	d307      	bcc.n	80098a8 <__cvt+0xbc>
 8009898:	9b03      	ldr	r3, [sp, #12]
 800989a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800989c:	1bdb      	subs	r3, r3, r7
 800989e:	4638      	mov	r0, r7
 80098a0:	6013      	str	r3, [r2, #0]
 80098a2:	b004      	add	sp, #16
 80098a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098a8:	1c59      	adds	r1, r3, #1
 80098aa:	9103      	str	r1, [sp, #12]
 80098ac:	701a      	strb	r2, [r3, #0]
 80098ae:	e7f0      	b.n	8009892 <__cvt+0xa6>

080098b0 <__exponent>:
 80098b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80098b2:	4603      	mov	r3, r0
 80098b4:	2900      	cmp	r1, #0
 80098b6:	bfb8      	it	lt
 80098b8:	4249      	neglt	r1, r1
 80098ba:	f803 2b02 	strb.w	r2, [r3], #2
 80098be:	bfb4      	ite	lt
 80098c0:	222d      	movlt	r2, #45	; 0x2d
 80098c2:	222b      	movge	r2, #43	; 0x2b
 80098c4:	2909      	cmp	r1, #9
 80098c6:	7042      	strb	r2, [r0, #1]
 80098c8:	dd2a      	ble.n	8009920 <__exponent+0x70>
 80098ca:	f10d 0407 	add.w	r4, sp, #7
 80098ce:	46a4      	mov	ip, r4
 80098d0:	270a      	movs	r7, #10
 80098d2:	46a6      	mov	lr, r4
 80098d4:	460a      	mov	r2, r1
 80098d6:	fb91 f6f7 	sdiv	r6, r1, r7
 80098da:	fb07 1516 	mls	r5, r7, r6, r1
 80098de:	3530      	adds	r5, #48	; 0x30
 80098e0:	2a63      	cmp	r2, #99	; 0x63
 80098e2:	f104 34ff 	add.w	r4, r4, #4294967295
 80098e6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80098ea:	4631      	mov	r1, r6
 80098ec:	dcf1      	bgt.n	80098d2 <__exponent+0x22>
 80098ee:	3130      	adds	r1, #48	; 0x30
 80098f0:	f1ae 0502 	sub.w	r5, lr, #2
 80098f4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80098f8:	1c44      	adds	r4, r0, #1
 80098fa:	4629      	mov	r1, r5
 80098fc:	4561      	cmp	r1, ip
 80098fe:	d30a      	bcc.n	8009916 <__exponent+0x66>
 8009900:	f10d 0209 	add.w	r2, sp, #9
 8009904:	eba2 020e 	sub.w	r2, r2, lr
 8009908:	4565      	cmp	r5, ip
 800990a:	bf88      	it	hi
 800990c:	2200      	movhi	r2, #0
 800990e:	4413      	add	r3, r2
 8009910:	1a18      	subs	r0, r3, r0
 8009912:	b003      	add	sp, #12
 8009914:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009916:	f811 2b01 	ldrb.w	r2, [r1], #1
 800991a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800991e:	e7ed      	b.n	80098fc <__exponent+0x4c>
 8009920:	2330      	movs	r3, #48	; 0x30
 8009922:	3130      	adds	r1, #48	; 0x30
 8009924:	7083      	strb	r3, [r0, #2]
 8009926:	70c1      	strb	r1, [r0, #3]
 8009928:	1d03      	adds	r3, r0, #4
 800992a:	e7f1      	b.n	8009910 <__exponent+0x60>

0800992c <_printf_float>:
 800992c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009930:	ed2d 8b02 	vpush	{d8}
 8009934:	b08d      	sub	sp, #52	; 0x34
 8009936:	460c      	mov	r4, r1
 8009938:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800993c:	4616      	mov	r6, r2
 800993e:	461f      	mov	r7, r3
 8009940:	4605      	mov	r5, r0
 8009942:	f001 fa57 	bl	800adf4 <_localeconv_r>
 8009946:	f8d0 a000 	ldr.w	sl, [r0]
 800994a:	4650      	mov	r0, sl
 800994c:	f7f6 fc48 	bl	80001e0 <strlen>
 8009950:	2300      	movs	r3, #0
 8009952:	930a      	str	r3, [sp, #40]	; 0x28
 8009954:	6823      	ldr	r3, [r4, #0]
 8009956:	9305      	str	r3, [sp, #20]
 8009958:	f8d8 3000 	ldr.w	r3, [r8]
 800995c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009960:	3307      	adds	r3, #7
 8009962:	f023 0307 	bic.w	r3, r3, #7
 8009966:	f103 0208 	add.w	r2, r3, #8
 800996a:	f8c8 2000 	str.w	r2, [r8]
 800996e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009972:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009976:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800997a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800997e:	9307      	str	r3, [sp, #28]
 8009980:	f8cd 8018 	str.w	r8, [sp, #24]
 8009984:	ee08 0a10 	vmov	s16, r0
 8009988:	4b9f      	ldr	r3, [pc, #636]	; (8009c08 <_printf_float+0x2dc>)
 800998a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800998e:	f04f 32ff 	mov.w	r2, #4294967295
 8009992:	f7f7 f8d3 	bl	8000b3c <__aeabi_dcmpun>
 8009996:	bb88      	cbnz	r0, 80099fc <_printf_float+0xd0>
 8009998:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800999c:	4b9a      	ldr	r3, [pc, #616]	; (8009c08 <_printf_float+0x2dc>)
 800999e:	f04f 32ff 	mov.w	r2, #4294967295
 80099a2:	f7f7 f8ad 	bl	8000b00 <__aeabi_dcmple>
 80099a6:	bb48      	cbnz	r0, 80099fc <_printf_float+0xd0>
 80099a8:	2200      	movs	r2, #0
 80099aa:	2300      	movs	r3, #0
 80099ac:	4640      	mov	r0, r8
 80099ae:	4649      	mov	r1, r9
 80099b0:	f7f7 f89c 	bl	8000aec <__aeabi_dcmplt>
 80099b4:	b110      	cbz	r0, 80099bc <_printf_float+0x90>
 80099b6:	232d      	movs	r3, #45	; 0x2d
 80099b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80099bc:	4b93      	ldr	r3, [pc, #588]	; (8009c0c <_printf_float+0x2e0>)
 80099be:	4894      	ldr	r0, [pc, #592]	; (8009c10 <_printf_float+0x2e4>)
 80099c0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80099c4:	bf94      	ite	ls
 80099c6:	4698      	movls	r8, r3
 80099c8:	4680      	movhi	r8, r0
 80099ca:	2303      	movs	r3, #3
 80099cc:	6123      	str	r3, [r4, #16]
 80099ce:	9b05      	ldr	r3, [sp, #20]
 80099d0:	f023 0204 	bic.w	r2, r3, #4
 80099d4:	6022      	str	r2, [r4, #0]
 80099d6:	f04f 0900 	mov.w	r9, #0
 80099da:	9700      	str	r7, [sp, #0]
 80099dc:	4633      	mov	r3, r6
 80099de:	aa0b      	add	r2, sp, #44	; 0x2c
 80099e0:	4621      	mov	r1, r4
 80099e2:	4628      	mov	r0, r5
 80099e4:	f000 f9d8 	bl	8009d98 <_printf_common>
 80099e8:	3001      	adds	r0, #1
 80099ea:	f040 8090 	bne.w	8009b0e <_printf_float+0x1e2>
 80099ee:	f04f 30ff 	mov.w	r0, #4294967295
 80099f2:	b00d      	add	sp, #52	; 0x34
 80099f4:	ecbd 8b02 	vpop	{d8}
 80099f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099fc:	4642      	mov	r2, r8
 80099fe:	464b      	mov	r3, r9
 8009a00:	4640      	mov	r0, r8
 8009a02:	4649      	mov	r1, r9
 8009a04:	f7f7 f89a 	bl	8000b3c <__aeabi_dcmpun>
 8009a08:	b140      	cbz	r0, 8009a1c <_printf_float+0xf0>
 8009a0a:	464b      	mov	r3, r9
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	bfbc      	itt	lt
 8009a10:	232d      	movlt	r3, #45	; 0x2d
 8009a12:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009a16:	487f      	ldr	r0, [pc, #508]	; (8009c14 <_printf_float+0x2e8>)
 8009a18:	4b7f      	ldr	r3, [pc, #508]	; (8009c18 <_printf_float+0x2ec>)
 8009a1a:	e7d1      	b.n	80099c0 <_printf_float+0x94>
 8009a1c:	6863      	ldr	r3, [r4, #4]
 8009a1e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009a22:	9206      	str	r2, [sp, #24]
 8009a24:	1c5a      	adds	r2, r3, #1
 8009a26:	d13f      	bne.n	8009aa8 <_printf_float+0x17c>
 8009a28:	2306      	movs	r3, #6
 8009a2a:	6063      	str	r3, [r4, #4]
 8009a2c:	9b05      	ldr	r3, [sp, #20]
 8009a2e:	6861      	ldr	r1, [r4, #4]
 8009a30:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009a34:	2300      	movs	r3, #0
 8009a36:	9303      	str	r3, [sp, #12]
 8009a38:	ab0a      	add	r3, sp, #40	; 0x28
 8009a3a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009a3e:	ab09      	add	r3, sp, #36	; 0x24
 8009a40:	ec49 8b10 	vmov	d0, r8, r9
 8009a44:	9300      	str	r3, [sp, #0]
 8009a46:	6022      	str	r2, [r4, #0]
 8009a48:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009a4c:	4628      	mov	r0, r5
 8009a4e:	f7ff fecd 	bl	80097ec <__cvt>
 8009a52:	9b06      	ldr	r3, [sp, #24]
 8009a54:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009a56:	2b47      	cmp	r3, #71	; 0x47
 8009a58:	4680      	mov	r8, r0
 8009a5a:	d108      	bne.n	8009a6e <_printf_float+0x142>
 8009a5c:	1cc8      	adds	r0, r1, #3
 8009a5e:	db02      	blt.n	8009a66 <_printf_float+0x13a>
 8009a60:	6863      	ldr	r3, [r4, #4]
 8009a62:	4299      	cmp	r1, r3
 8009a64:	dd41      	ble.n	8009aea <_printf_float+0x1be>
 8009a66:	f1ab 0b02 	sub.w	fp, fp, #2
 8009a6a:	fa5f fb8b 	uxtb.w	fp, fp
 8009a6e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009a72:	d820      	bhi.n	8009ab6 <_printf_float+0x18a>
 8009a74:	3901      	subs	r1, #1
 8009a76:	465a      	mov	r2, fp
 8009a78:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009a7c:	9109      	str	r1, [sp, #36]	; 0x24
 8009a7e:	f7ff ff17 	bl	80098b0 <__exponent>
 8009a82:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a84:	1813      	adds	r3, r2, r0
 8009a86:	2a01      	cmp	r2, #1
 8009a88:	4681      	mov	r9, r0
 8009a8a:	6123      	str	r3, [r4, #16]
 8009a8c:	dc02      	bgt.n	8009a94 <_printf_float+0x168>
 8009a8e:	6822      	ldr	r2, [r4, #0]
 8009a90:	07d2      	lsls	r2, r2, #31
 8009a92:	d501      	bpl.n	8009a98 <_printf_float+0x16c>
 8009a94:	3301      	adds	r3, #1
 8009a96:	6123      	str	r3, [r4, #16]
 8009a98:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d09c      	beq.n	80099da <_printf_float+0xae>
 8009aa0:	232d      	movs	r3, #45	; 0x2d
 8009aa2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009aa6:	e798      	b.n	80099da <_printf_float+0xae>
 8009aa8:	9a06      	ldr	r2, [sp, #24]
 8009aaa:	2a47      	cmp	r2, #71	; 0x47
 8009aac:	d1be      	bne.n	8009a2c <_printf_float+0x100>
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d1bc      	bne.n	8009a2c <_printf_float+0x100>
 8009ab2:	2301      	movs	r3, #1
 8009ab4:	e7b9      	b.n	8009a2a <_printf_float+0xfe>
 8009ab6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009aba:	d118      	bne.n	8009aee <_printf_float+0x1c2>
 8009abc:	2900      	cmp	r1, #0
 8009abe:	6863      	ldr	r3, [r4, #4]
 8009ac0:	dd0b      	ble.n	8009ada <_printf_float+0x1ae>
 8009ac2:	6121      	str	r1, [r4, #16]
 8009ac4:	b913      	cbnz	r3, 8009acc <_printf_float+0x1a0>
 8009ac6:	6822      	ldr	r2, [r4, #0]
 8009ac8:	07d0      	lsls	r0, r2, #31
 8009aca:	d502      	bpl.n	8009ad2 <_printf_float+0x1a6>
 8009acc:	3301      	adds	r3, #1
 8009ace:	440b      	add	r3, r1
 8009ad0:	6123      	str	r3, [r4, #16]
 8009ad2:	65a1      	str	r1, [r4, #88]	; 0x58
 8009ad4:	f04f 0900 	mov.w	r9, #0
 8009ad8:	e7de      	b.n	8009a98 <_printf_float+0x16c>
 8009ada:	b913      	cbnz	r3, 8009ae2 <_printf_float+0x1b6>
 8009adc:	6822      	ldr	r2, [r4, #0]
 8009ade:	07d2      	lsls	r2, r2, #31
 8009ae0:	d501      	bpl.n	8009ae6 <_printf_float+0x1ba>
 8009ae2:	3302      	adds	r3, #2
 8009ae4:	e7f4      	b.n	8009ad0 <_printf_float+0x1a4>
 8009ae6:	2301      	movs	r3, #1
 8009ae8:	e7f2      	b.n	8009ad0 <_printf_float+0x1a4>
 8009aea:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009aee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009af0:	4299      	cmp	r1, r3
 8009af2:	db05      	blt.n	8009b00 <_printf_float+0x1d4>
 8009af4:	6823      	ldr	r3, [r4, #0]
 8009af6:	6121      	str	r1, [r4, #16]
 8009af8:	07d8      	lsls	r0, r3, #31
 8009afa:	d5ea      	bpl.n	8009ad2 <_printf_float+0x1a6>
 8009afc:	1c4b      	adds	r3, r1, #1
 8009afe:	e7e7      	b.n	8009ad0 <_printf_float+0x1a4>
 8009b00:	2900      	cmp	r1, #0
 8009b02:	bfd4      	ite	le
 8009b04:	f1c1 0202 	rsble	r2, r1, #2
 8009b08:	2201      	movgt	r2, #1
 8009b0a:	4413      	add	r3, r2
 8009b0c:	e7e0      	b.n	8009ad0 <_printf_float+0x1a4>
 8009b0e:	6823      	ldr	r3, [r4, #0]
 8009b10:	055a      	lsls	r2, r3, #21
 8009b12:	d407      	bmi.n	8009b24 <_printf_float+0x1f8>
 8009b14:	6923      	ldr	r3, [r4, #16]
 8009b16:	4642      	mov	r2, r8
 8009b18:	4631      	mov	r1, r6
 8009b1a:	4628      	mov	r0, r5
 8009b1c:	47b8      	blx	r7
 8009b1e:	3001      	adds	r0, #1
 8009b20:	d12c      	bne.n	8009b7c <_printf_float+0x250>
 8009b22:	e764      	b.n	80099ee <_printf_float+0xc2>
 8009b24:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009b28:	f240 80e0 	bls.w	8009cec <_printf_float+0x3c0>
 8009b2c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009b30:	2200      	movs	r2, #0
 8009b32:	2300      	movs	r3, #0
 8009b34:	f7f6 ffd0 	bl	8000ad8 <__aeabi_dcmpeq>
 8009b38:	2800      	cmp	r0, #0
 8009b3a:	d034      	beq.n	8009ba6 <_printf_float+0x27a>
 8009b3c:	4a37      	ldr	r2, [pc, #220]	; (8009c1c <_printf_float+0x2f0>)
 8009b3e:	2301      	movs	r3, #1
 8009b40:	4631      	mov	r1, r6
 8009b42:	4628      	mov	r0, r5
 8009b44:	47b8      	blx	r7
 8009b46:	3001      	adds	r0, #1
 8009b48:	f43f af51 	beq.w	80099ee <_printf_float+0xc2>
 8009b4c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009b50:	429a      	cmp	r2, r3
 8009b52:	db02      	blt.n	8009b5a <_printf_float+0x22e>
 8009b54:	6823      	ldr	r3, [r4, #0]
 8009b56:	07d8      	lsls	r0, r3, #31
 8009b58:	d510      	bpl.n	8009b7c <_printf_float+0x250>
 8009b5a:	ee18 3a10 	vmov	r3, s16
 8009b5e:	4652      	mov	r2, sl
 8009b60:	4631      	mov	r1, r6
 8009b62:	4628      	mov	r0, r5
 8009b64:	47b8      	blx	r7
 8009b66:	3001      	adds	r0, #1
 8009b68:	f43f af41 	beq.w	80099ee <_printf_float+0xc2>
 8009b6c:	f04f 0800 	mov.w	r8, #0
 8009b70:	f104 091a 	add.w	r9, r4, #26
 8009b74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b76:	3b01      	subs	r3, #1
 8009b78:	4543      	cmp	r3, r8
 8009b7a:	dc09      	bgt.n	8009b90 <_printf_float+0x264>
 8009b7c:	6823      	ldr	r3, [r4, #0]
 8009b7e:	079b      	lsls	r3, r3, #30
 8009b80:	f100 8105 	bmi.w	8009d8e <_printf_float+0x462>
 8009b84:	68e0      	ldr	r0, [r4, #12]
 8009b86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b88:	4298      	cmp	r0, r3
 8009b8a:	bfb8      	it	lt
 8009b8c:	4618      	movlt	r0, r3
 8009b8e:	e730      	b.n	80099f2 <_printf_float+0xc6>
 8009b90:	2301      	movs	r3, #1
 8009b92:	464a      	mov	r2, r9
 8009b94:	4631      	mov	r1, r6
 8009b96:	4628      	mov	r0, r5
 8009b98:	47b8      	blx	r7
 8009b9a:	3001      	adds	r0, #1
 8009b9c:	f43f af27 	beq.w	80099ee <_printf_float+0xc2>
 8009ba0:	f108 0801 	add.w	r8, r8, #1
 8009ba4:	e7e6      	b.n	8009b74 <_printf_float+0x248>
 8009ba6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	dc39      	bgt.n	8009c20 <_printf_float+0x2f4>
 8009bac:	4a1b      	ldr	r2, [pc, #108]	; (8009c1c <_printf_float+0x2f0>)
 8009bae:	2301      	movs	r3, #1
 8009bb0:	4631      	mov	r1, r6
 8009bb2:	4628      	mov	r0, r5
 8009bb4:	47b8      	blx	r7
 8009bb6:	3001      	adds	r0, #1
 8009bb8:	f43f af19 	beq.w	80099ee <_printf_float+0xc2>
 8009bbc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009bc0:	4313      	orrs	r3, r2
 8009bc2:	d102      	bne.n	8009bca <_printf_float+0x29e>
 8009bc4:	6823      	ldr	r3, [r4, #0]
 8009bc6:	07d9      	lsls	r1, r3, #31
 8009bc8:	d5d8      	bpl.n	8009b7c <_printf_float+0x250>
 8009bca:	ee18 3a10 	vmov	r3, s16
 8009bce:	4652      	mov	r2, sl
 8009bd0:	4631      	mov	r1, r6
 8009bd2:	4628      	mov	r0, r5
 8009bd4:	47b8      	blx	r7
 8009bd6:	3001      	adds	r0, #1
 8009bd8:	f43f af09 	beq.w	80099ee <_printf_float+0xc2>
 8009bdc:	f04f 0900 	mov.w	r9, #0
 8009be0:	f104 0a1a 	add.w	sl, r4, #26
 8009be4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009be6:	425b      	negs	r3, r3
 8009be8:	454b      	cmp	r3, r9
 8009bea:	dc01      	bgt.n	8009bf0 <_printf_float+0x2c4>
 8009bec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bee:	e792      	b.n	8009b16 <_printf_float+0x1ea>
 8009bf0:	2301      	movs	r3, #1
 8009bf2:	4652      	mov	r2, sl
 8009bf4:	4631      	mov	r1, r6
 8009bf6:	4628      	mov	r0, r5
 8009bf8:	47b8      	blx	r7
 8009bfa:	3001      	adds	r0, #1
 8009bfc:	f43f aef7 	beq.w	80099ee <_printf_float+0xc2>
 8009c00:	f109 0901 	add.w	r9, r9, #1
 8009c04:	e7ee      	b.n	8009be4 <_printf_float+0x2b8>
 8009c06:	bf00      	nop
 8009c08:	7fefffff 	.word	0x7fefffff
 8009c0c:	0800d830 	.word	0x0800d830
 8009c10:	0800d834 	.word	0x0800d834
 8009c14:	0800d83c 	.word	0x0800d83c
 8009c18:	0800d838 	.word	0x0800d838
 8009c1c:	0800d840 	.word	0x0800d840
 8009c20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009c22:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009c24:	429a      	cmp	r2, r3
 8009c26:	bfa8      	it	ge
 8009c28:	461a      	movge	r2, r3
 8009c2a:	2a00      	cmp	r2, #0
 8009c2c:	4691      	mov	r9, r2
 8009c2e:	dc37      	bgt.n	8009ca0 <_printf_float+0x374>
 8009c30:	f04f 0b00 	mov.w	fp, #0
 8009c34:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009c38:	f104 021a 	add.w	r2, r4, #26
 8009c3c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009c3e:	9305      	str	r3, [sp, #20]
 8009c40:	eba3 0309 	sub.w	r3, r3, r9
 8009c44:	455b      	cmp	r3, fp
 8009c46:	dc33      	bgt.n	8009cb0 <_printf_float+0x384>
 8009c48:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009c4c:	429a      	cmp	r2, r3
 8009c4e:	db3b      	blt.n	8009cc8 <_printf_float+0x39c>
 8009c50:	6823      	ldr	r3, [r4, #0]
 8009c52:	07da      	lsls	r2, r3, #31
 8009c54:	d438      	bmi.n	8009cc8 <_printf_float+0x39c>
 8009c56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c58:	9a05      	ldr	r2, [sp, #20]
 8009c5a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009c5c:	1a9a      	subs	r2, r3, r2
 8009c5e:	eba3 0901 	sub.w	r9, r3, r1
 8009c62:	4591      	cmp	r9, r2
 8009c64:	bfa8      	it	ge
 8009c66:	4691      	movge	r9, r2
 8009c68:	f1b9 0f00 	cmp.w	r9, #0
 8009c6c:	dc35      	bgt.n	8009cda <_printf_float+0x3ae>
 8009c6e:	f04f 0800 	mov.w	r8, #0
 8009c72:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009c76:	f104 0a1a 	add.w	sl, r4, #26
 8009c7a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009c7e:	1a9b      	subs	r3, r3, r2
 8009c80:	eba3 0309 	sub.w	r3, r3, r9
 8009c84:	4543      	cmp	r3, r8
 8009c86:	f77f af79 	ble.w	8009b7c <_printf_float+0x250>
 8009c8a:	2301      	movs	r3, #1
 8009c8c:	4652      	mov	r2, sl
 8009c8e:	4631      	mov	r1, r6
 8009c90:	4628      	mov	r0, r5
 8009c92:	47b8      	blx	r7
 8009c94:	3001      	adds	r0, #1
 8009c96:	f43f aeaa 	beq.w	80099ee <_printf_float+0xc2>
 8009c9a:	f108 0801 	add.w	r8, r8, #1
 8009c9e:	e7ec      	b.n	8009c7a <_printf_float+0x34e>
 8009ca0:	4613      	mov	r3, r2
 8009ca2:	4631      	mov	r1, r6
 8009ca4:	4642      	mov	r2, r8
 8009ca6:	4628      	mov	r0, r5
 8009ca8:	47b8      	blx	r7
 8009caa:	3001      	adds	r0, #1
 8009cac:	d1c0      	bne.n	8009c30 <_printf_float+0x304>
 8009cae:	e69e      	b.n	80099ee <_printf_float+0xc2>
 8009cb0:	2301      	movs	r3, #1
 8009cb2:	4631      	mov	r1, r6
 8009cb4:	4628      	mov	r0, r5
 8009cb6:	9205      	str	r2, [sp, #20]
 8009cb8:	47b8      	blx	r7
 8009cba:	3001      	adds	r0, #1
 8009cbc:	f43f ae97 	beq.w	80099ee <_printf_float+0xc2>
 8009cc0:	9a05      	ldr	r2, [sp, #20]
 8009cc2:	f10b 0b01 	add.w	fp, fp, #1
 8009cc6:	e7b9      	b.n	8009c3c <_printf_float+0x310>
 8009cc8:	ee18 3a10 	vmov	r3, s16
 8009ccc:	4652      	mov	r2, sl
 8009cce:	4631      	mov	r1, r6
 8009cd0:	4628      	mov	r0, r5
 8009cd2:	47b8      	blx	r7
 8009cd4:	3001      	adds	r0, #1
 8009cd6:	d1be      	bne.n	8009c56 <_printf_float+0x32a>
 8009cd8:	e689      	b.n	80099ee <_printf_float+0xc2>
 8009cda:	9a05      	ldr	r2, [sp, #20]
 8009cdc:	464b      	mov	r3, r9
 8009cde:	4442      	add	r2, r8
 8009ce0:	4631      	mov	r1, r6
 8009ce2:	4628      	mov	r0, r5
 8009ce4:	47b8      	blx	r7
 8009ce6:	3001      	adds	r0, #1
 8009ce8:	d1c1      	bne.n	8009c6e <_printf_float+0x342>
 8009cea:	e680      	b.n	80099ee <_printf_float+0xc2>
 8009cec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009cee:	2a01      	cmp	r2, #1
 8009cf0:	dc01      	bgt.n	8009cf6 <_printf_float+0x3ca>
 8009cf2:	07db      	lsls	r3, r3, #31
 8009cf4:	d538      	bpl.n	8009d68 <_printf_float+0x43c>
 8009cf6:	2301      	movs	r3, #1
 8009cf8:	4642      	mov	r2, r8
 8009cfa:	4631      	mov	r1, r6
 8009cfc:	4628      	mov	r0, r5
 8009cfe:	47b8      	blx	r7
 8009d00:	3001      	adds	r0, #1
 8009d02:	f43f ae74 	beq.w	80099ee <_printf_float+0xc2>
 8009d06:	ee18 3a10 	vmov	r3, s16
 8009d0a:	4652      	mov	r2, sl
 8009d0c:	4631      	mov	r1, r6
 8009d0e:	4628      	mov	r0, r5
 8009d10:	47b8      	blx	r7
 8009d12:	3001      	adds	r0, #1
 8009d14:	f43f ae6b 	beq.w	80099ee <_printf_float+0xc2>
 8009d18:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	2300      	movs	r3, #0
 8009d20:	f7f6 feda 	bl	8000ad8 <__aeabi_dcmpeq>
 8009d24:	b9d8      	cbnz	r0, 8009d5e <_printf_float+0x432>
 8009d26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d28:	f108 0201 	add.w	r2, r8, #1
 8009d2c:	3b01      	subs	r3, #1
 8009d2e:	4631      	mov	r1, r6
 8009d30:	4628      	mov	r0, r5
 8009d32:	47b8      	blx	r7
 8009d34:	3001      	adds	r0, #1
 8009d36:	d10e      	bne.n	8009d56 <_printf_float+0x42a>
 8009d38:	e659      	b.n	80099ee <_printf_float+0xc2>
 8009d3a:	2301      	movs	r3, #1
 8009d3c:	4652      	mov	r2, sl
 8009d3e:	4631      	mov	r1, r6
 8009d40:	4628      	mov	r0, r5
 8009d42:	47b8      	blx	r7
 8009d44:	3001      	adds	r0, #1
 8009d46:	f43f ae52 	beq.w	80099ee <_printf_float+0xc2>
 8009d4a:	f108 0801 	add.w	r8, r8, #1
 8009d4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d50:	3b01      	subs	r3, #1
 8009d52:	4543      	cmp	r3, r8
 8009d54:	dcf1      	bgt.n	8009d3a <_printf_float+0x40e>
 8009d56:	464b      	mov	r3, r9
 8009d58:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009d5c:	e6dc      	b.n	8009b18 <_printf_float+0x1ec>
 8009d5e:	f04f 0800 	mov.w	r8, #0
 8009d62:	f104 0a1a 	add.w	sl, r4, #26
 8009d66:	e7f2      	b.n	8009d4e <_printf_float+0x422>
 8009d68:	2301      	movs	r3, #1
 8009d6a:	4642      	mov	r2, r8
 8009d6c:	e7df      	b.n	8009d2e <_printf_float+0x402>
 8009d6e:	2301      	movs	r3, #1
 8009d70:	464a      	mov	r2, r9
 8009d72:	4631      	mov	r1, r6
 8009d74:	4628      	mov	r0, r5
 8009d76:	47b8      	blx	r7
 8009d78:	3001      	adds	r0, #1
 8009d7a:	f43f ae38 	beq.w	80099ee <_printf_float+0xc2>
 8009d7e:	f108 0801 	add.w	r8, r8, #1
 8009d82:	68e3      	ldr	r3, [r4, #12]
 8009d84:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009d86:	1a5b      	subs	r3, r3, r1
 8009d88:	4543      	cmp	r3, r8
 8009d8a:	dcf0      	bgt.n	8009d6e <_printf_float+0x442>
 8009d8c:	e6fa      	b.n	8009b84 <_printf_float+0x258>
 8009d8e:	f04f 0800 	mov.w	r8, #0
 8009d92:	f104 0919 	add.w	r9, r4, #25
 8009d96:	e7f4      	b.n	8009d82 <_printf_float+0x456>

08009d98 <_printf_common>:
 8009d98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d9c:	4616      	mov	r6, r2
 8009d9e:	4699      	mov	r9, r3
 8009da0:	688a      	ldr	r2, [r1, #8]
 8009da2:	690b      	ldr	r3, [r1, #16]
 8009da4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009da8:	4293      	cmp	r3, r2
 8009daa:	bfb8      	it	lt
 8009dac:	4613      	movlt	r3, r2
 8009dae:	6033      	str	r3, [r6, #0]
 8009db0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009db4:	4607      	mov	r7, r0
 8009db6:	460c      	mov	r4, r1
 8009db8:	b10a      	cbz	r2, 8009dbe <_printf_common+0x26>
 8009dba:	3301      	adds	r3, #1
 8009dbc:	6033      	str	r3, [r6, #0]
 8009dbe:	6823      	ldr	r3, [r4, #0]
 8009dc0:	0699      	lsls	r1, r3, #26
 8009dc2:	bf42      	ittt	mi
 8009dc4:	6833      	ldrmi	r3, [r6, #0]
 8009dc6:	3302      	addmi	r3, #2
 8009dc8:	6033      	strmi	r3, [r6, #0]
 8009dca:	6825      	ldr	r5, [r4, #0]
 8009dcc:	f015 0506 	ands.w	r5, r5, #6
 8009dd0:	d106      	bne.n	8009de0 <_printf_common+0x48>
 8009dd2:	f104 0a19 	add.w	sl, r4, #25
 8009dd6:	68e3      	ldr	r3, [r4, #12]
 8009dd8:	6832      	ldr	r2, [r6, #0]
 8009dda:	1a9b      	subs	r3, r3, r2
 8009ddc:	42ab      	cmp	r3, r5
 8009dde:	dc26      	bgt.n	8009e2e <_printf_common+0x96>
 8009de0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009de4:	1e13      	subs	r3, r2, #0
 8009de6:	6822      	ldr	r2, [r4, #0]
 8009de8:	bf18      	it	ne
 8009dea:	2301      	movne	r3, #1
 8009dec:	0692      	lsls	r2, r2, #26
 8009dee:	d42b      	bmi.n	8009e48 <_printf_common+0xb0>
 8009df0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009df4:	4649      	mov	r1, r9
 8009df6:	4638      	mov	r0, r7
 8009df8:	47c0      	blx	r8
 8009dfa:	3001      	adds	r0, #1
 8009dfc:	d01e      	beq.n	8009e3c <_printf_common+0xa4>
 8009dfe:	6823      	ldr	r3, [r4, #0]
 8009e00:	68e5      	ldr	r5, [r4, #12]
 8009e02:	6832      	ldr	r2, [r6, #0]
 8009e04:	f003 0306 	and.w	r3, r3, #6
 8009e08:	2b04      	cmp	r3, #4
 8009e0a:	bf08      	it	eq
 8009e0c:	1aad      	subeq	r5, r5, r2
 8009e0e:	68a3      	ldr	r3, [r4, #8]
 8009e10:	6922      	ldr	r2, [r4, #16]
 8009e12:	bf0c      	ite	eq
 8009e14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009e18:	2500      	movne	r5, #0
 8009e1a:	4293      	cmp	r3, r2
 8009e1c:	bfc4      	itt	gt
 8009e1e:	1a9b      	subgt	r3, r3, r2
 8009e20:	18ed      	addgt	r5, r5, r3
 8009e22:	2600      	movs	r6, #0
 8009e24:	341a      	adds	r4, #26
 8009e26:	42b5      	cmp	r5, r6
 8009e28:	d11a      	bne.n	8009e60 <_printf_common+0xc8>
 8009e2a:	2000      	movs	r0, #0
 8009e2c:	e008      	b.n	8009e40 <_printf_common+0xa8>
 8009e2e:	2301      	movs	r3, #1
 8009e30:	4652      	mov	r2, sl
 8009e32:	4649      	mov	r1, r9
 8009e34:	4638      	mov	r0, r7
 8009e36:	47c0      	blx	r8
 8009e38:	3001      	adds	r0, #1
 8009e3a:	d103      	bne.n	8009e44 <_printf_common+0xac>
 8009e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8009e40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e44:	3501      	adds	r5, #1
 8009e46:	e7c6      	b.n	8009dd6 <_printf_common+0x3e>
 8009e48:	18e1      	adds	r1, r4, r3
 8009e4a:	1c5a      	adds	r2, r3, #1
 8009e4c:	2030      	movs	r0, #48	; 0x30
 8009e4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009e52:	4422      	add	r2, r4
 8009e54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009e58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009e5c:	3302      	adds	r3, #2
 8009e5e:	e7c7      	b.n	8009df0 <_printf_common+0x58>
 8009e60:	2301      	movs	r3, #1
 8009e62:	4622      	mov	r2, r4
 8009e64:	4649      	mov	r1, r9
 8009e66:	4638      	mov	r0, r7
 8009e68:	47c0      	blx	r8
 8009e6a:	3001      	adds	r0, #1
 8009e6c:	d0e6      	beq.n	8009e3c <_printf_common+0xa4>
 8009e6e:	3601      	adds	r6, #1
 8009e70:	e7d9      	b.n	8009e26 <_printf_common+0x8e>
	...

08009e74 <_printf_i>:
 8009e74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009e78:	7e0f      	ldrb	r7, [r1, #24]
 8009e7a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009e7c:	2f78      	cmp	r7, #120	; 0x78
 8009e7e:	4691      	mov	r9, r2
 8009e80:	4680      	mov	r8, r0
 8009e82:	460c      	mov	r4, r1
 8009e84:	469a      	mov	sl, r3
 8009e86:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009e8a:	d807      	bhi.n	8009e9c <_printf_i+0x28>
 8009e8c:	2f62      	cmp	r7, #98	; 0x62
 8009e8e:	d80a      	bhi.n	8009ea6 <_printf_i+0x32>
 8009e90:	2f00      	cmp	r7, #0
 8009e92:	f000 80d8 	beq.w	800a046 <_printf_i+0x1d2>
 8009e96:	2f58      	cmp	r7, #88	; 0x58
 8009e98:	f000 80a3 	beq.w	8009fe2 <_printf_i+0x16e>
 8009e9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009ea0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009ea4:	e03a      	b.n	8009f1c <_printf_i+0xa8>
 8009ea6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009eaa:	2b15      	cmp	r3, #21
 8009eac:	d8f6      	bhi.n	8009e9c <_printf_i+0x28>
 8009eae:	a101      	add	r1, pc, #4	; (adr r1, 8009eb4 <_printf_i+0x40>)
 8009eb0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009eb4:	08009f0d 	.word	0x08009f0d
 8009eb8:	08009f21 	.word	0x08009f21
 8009ebc:	08009e9d 	.word	0x08009e9d
 8009ec0:	08009e9d 	.word	0x08009e9d
 8009ec4:	08009e9d 	.word	0x08009e9d
 8009ec8:	08009e9d 	.word	0x08009e9d
 8009ecc:	08009f21 	.word	0x08009f21
 8009ed0:	08009e9d 	.word	0x08009e9d
 8009ed4:	08009e9d 	.word	0x08009e9d
 8009ed8:	08009e9d 	.word	0x08009e9d
 8009edc:	08009e9d 	.word	0x08009e9d
 8009ee0:	0800a02d 	.word	0x0800a02d
 8009ee4:	08009f51 	.word	0x08009f51
 8009ee8:	0800a00f 	.word	0x0800a00f
 8009eec:	08009e9d 	.word	0x08009e9d
 8009ef0:	08009e9d 	.word	0x08009e9d
 8009ef4:	0800a04f 	.word	0x0800a04f
 8009ef8:	08009e9d 	.word	0x08009e9d
 8009efc:	08009f51 	.word	0x08009f51
 8009f00:	08009e9d 	.word	0x08009e9d
 8009f04:	08009e9d 	.word	0x08009e9d
 8009f08:	0800a017 	.word	0x0800a017
 8009f0c:	682b      	ldr	r3, [r5, #0]
 8009f0e:	1d1a      	adds	r2, r3, #4
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	602a      	str	r2, [r5, #0]
 8009f14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009f18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009f1c:	2301      	movs	r3, #1
 8009f1e:	e0a3      	b.n	800a068 <_printf_i+0x1f4>
 8009f20:	6820      	ldr	r0, [r4, #0]
 8009f22:	6829      	ldr	r1, [r5, #0]
 8009f24:	0606      	lsls	r6, r0, #24
 8009f26:	f101 0304 	add.w	r3, r1, #4
 8009f2a:	d50a      	bpl.n	8009f42 <_printf_i+0xce>
 8009f2c:	680e      	ldr	r6, [r1, #0]
 8009f2e:	602b      	str	r3, [r5, #0]
 8009f30:	2e00      	cmp	r6, #0
 8009f32:	da03      	bge.n	8009f3c <_printf_i+0xc8>
 8009f34:	232d      	movs	r3, #45	; 0x2d
 8009f36:	4276      	negs	r6, r6
 8009f38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f3c:	485e      	ldr	r0, [pc, #376]	; (800a0b8 <_printf_i+0x244>)
 8009f3e:	230a      	movs	r3, #10
 8009f40:	e019      	b.n	8009f76 <_printf_i+0x102>
 8009f42:	680e      	ldr	r6, [r1, #0]
 8009f44:	602b      	str	r3, [r5, #0]
 8009f46:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009f4a:	bf18      	it	ne
 8009f4c:	b236      	sxthne	r6, r6
 8009f4e:	e7ef      	b.n	8009f30 <_printf_i+0xbc>
 8009f50:	682b      	ldr	r3, [r5, #0]
 8009f52:	6820      	ldr	r0, [r4, #0]
 8009f54:	1d19      	adds	r1, r3, #4
 8009f56:	6029      	str	r1, [r5, #0]
 8009f58:	0601      	lsls	r1, r0, #24
 8009f5a:	d501      	bpl.n	8009f60 <_printf_i+0xec>
 8009f5c:	681e      	ldr	r6, [r3, #0]
 8009f5e:	e002      	b.n	8009f66 <_printf_i+0xf2>
 8009f60:	0646      	lsls	r6, r0, #25
 8009f62:	d5fb      	bpl.n	8009f5c <_printf_i+0xe8>
 8009f64:	881e      	ldrh	r6, [r3, #0]
 8009f66:	4854      	ldr	r0, [pc, #336]	; (800a0b8 <_printf_i+0x244>)
 8009f68:	2f6f      	cmp	r7, #111	; 0x6f
 8009f6a:	bf0c      	ite	eq
 8009f6c:	2308      	moveq	r3, #8
 8009f6e:	230a      	movne	r3, #10
 8009f70:	2100      	movs	r1, #0
 8009f72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009f76:	6865      	ldr	r5, [r4, #4]
 8009f78:	60a5      	str	r5, [r4, #8]
 8009f7a:	2d00      	cmp	r5, #0
 8009f7c:	bfa2      	ittt	ge
 8009f7e:	6821      	ldrge	r1, [r4, #0]
 8009f80:	f021 0104 	bicge.w	r1, r1, #4
 8009f84:	6021      	strge	r1, [r4, #0]
 8009f86:	b90e      	cbnz	r6, 8009f8c <_printf_i+0x118>
 8009f88:	2d00      	cmp	r5, #0
 8009f8a:	d04d      	beq.n	800a028 <_printf_i+0x1b4>
 8009f8c:	4615      	mov	r5, r2
 8009f8e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009f92:	fb03 6711 	mls	r7, r3, r1, r6
 8009f96:	5dc7      	ldrb	r7, [r0, r7]
 8009f98:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009f9c:	4637      	mov	r7, r6
 8009f9e:	42bb      	cmp	r3, r7
 8009fa0:	460e      	mov	r6, r1
 8009fa2:	d9f4      	bls.n	8009f8e <_printf_i+0x11a>
 8009fa4:	2b08      	cmp	r3, #8
 8009fa6:	d10b      	bne.n	8009fc0 <_printf_i+0x14c>
 8009fa8:	6823      	ldr	r3, [r4, #0]
 8009faa:	07de      	lsls	r6, r3, #31
 8009fac:	d508      	bpl.n	8009fc0 <_printf_i+0x14c>
 8009fae:	6923      	ldr	r3, [r4, #16]
 8009fb0:	6861      	ldr	r1, [r4, #4]
 8009fb2:	4299      	cmp	r1, r3
 8009fb4:	bfde      	ittt	le
 8009fb6:	2330      	movle	r3, #48	; 0x30
 8009fb8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009fbc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009fc0:	1b52      	subs	r2, r2, r5
 8009fc2:	6122      	str	r2, [r4, #16]
 8009fc4:	f8cd a000 	str.w	sl, [sp]
 8009fc8:	464b      	mov	r3, r9
 8009fca:	aa03      	add	r2, sp, #12
 8009fcc:	4621      	mov	r1, r4
 8009fce:	4640      	mov	r0, r8
 8009fd0:	f7ff fee2 	bl	8009d98 <_printf_common>
 8009fd4:	3001      	adds	r0, #1
 8009fd6:	d14c      	bne.n	800a072 <_printf_i+0x1fe>
 8009fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8009fdc:	b004      	add	sp, #16
 8009fde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fe2:	4835      	ldr	r0, [pc, #212]	; (800a0b8 <_printf_i+0x244>)
 8009fe4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009fe8:	6829      	ldr	r1, [r5, #0]
 8009fea:	6823      	ldr	r3, [r4, #0]
 8009fec:	f851 6b04 	ldr.w	r6, [r1], #4
 8009ff0:	6029      	str	r1, [r5, #0]
 8009ff2:	061d      	lsls	r5, r3, #24
 8009ff4:	d514      	bpl.n	800a020 <_printf_i+0x1ac>
 8009ff6:	07df      	lsls	r7, r3, #31
 8009ff8:	bf44      	itt	mi
 8009ffa:	f043 0320 	orrmi.w	r3, r3, #32
 8009ffe:	6023      	strmi	r3, [r4, #0]
 800a000:	b91e      	cbnz	r6, 800a00a <_printf_i+0x196>
 800a002:	6823      	ldr	r3, [r4, #0]
 800a004:	f023 0320 	bic.w	r3, r3, #32
 800a008:	6023      	str	r3, [r4, #0]
 800a00a:	2310      	movs	r3, #16
 800a00c:	e7b0      	b.n	8009f70 <_printf_i+0xfc>
 800a00e:	6823      	ldr	r3, [r4, #0]
 800a010:	f043 0320 	orr.w	r3, r3, #32
 800a014:	6023      	str	r3, [r4, #0]
 800a016:	2378      	movs	r3, #120	; 0x78
 800a018:	4828      	ldr	r0, [pc, #160]	; (800a0bc <_printf_i+0x248>)
 800a01a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a01e:	e7e3      	b.n	8009fe8 <_printf_i+0x174>
 800a020:	0659      	lsls	r1, r3, #25
 800a022:	bf48      	it	mi
 800a024:	b2b6      	uxthmi	r6, r6
 800a026:	e7e6      	b.n	8009ff6 <_printf_i+0x182>
 800a028:	4615      	mov	r5, r2
 800a02a:	e7bb      	b.n	8009fa4 <_printf_i+0x130>
 800a02c:	682b      	ldr	r3, [r5, #0]
 800a02e:	6826      	ldr	r6, [r4, #0]
 800a030:	6961      	ldr	r1, [r4, #20]
 800a032:	1d18      	adds	r0, r3, #4
 800a034:	6028      	str	r0, [r5, #0]
 800a036:	0635      	lsls	r5, r6, #24
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	d501      	bpl.n	800a040 <_printf_i+0x1cc>
 800a03c:	6019      	str	r1, [r3, #0]
 800a03e:	e002      	b.n	800a046 <_printf_i+0x1d2>
 800a040:	0670      	lsls	r0, r6, #25
 800a042:	d5fb      	bpl.n	800a03c <_printf_i+0x1c8>
 800a044:	8019      	strh	r1, [r3, #0]
 800a046:	2300      	movs	r3, #0
 800a048:	6123      	str	r3, [r4, #16]
 800a04a:	4615      	mov	r5, r2
 800a04c:	e7ba      	b.n	8009fc4 <_printf_i+0x150>
 800a04e:	682b      	ldr	r3, [r5, #0]
 800a050:	1d1a      	adds	r2, r3, #4
 800a052:	602a      	str	r2, [r5, #0]
 800a054:	681d      	ldr	r5, [r3, #0]
 800a056:	6862      	ldr	r2, [r4, #4]
 800a058:	2100      	movs	r1, #0
 800a05a:	4628      	mov	r0, r5
 800a05c:	f7f6 f8c8 	bl	80001f0 <memchr>
 800a060:	b108      	cbz	r0, 800a066 <_printf_i+0x1f2>
 800a062:	1b40      	subs	r0, r0, r5
 800a064:	6060      	str	r0, [r4, #4]
 800a066:	6863      	ldr	r3, [r4, #4]
 800a068:	6123      	str	r3, [r4, #16]
 800a06a:	2300      	movs	r3, #0
 800a06c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a070:	e7a8      	b.n	8009fc4 <_printf_i+0x150>
 800a072:	6923      	ldr	r3, [r4, #16]
 800a074:	462a      	mov	r2, r5
 800a076:	4649      	mov	r1, r9
 800a078:	4640      	mov	r0, r8
 800a07a:	47d0      	blx	sl
 800a07c:	3001      	adds	r0, #1
 800a07e:	d0ab      	beq.n	8009fd8 <_printf_i+0x164>
 800a080:	6823      	ldr	r3, [r4, #0]
 800a082:	079b      	lsls	r3, r3, #30
 800a084:	d413      	bmi.n	800a0ae <_printf_i+0x23a>
 800a086:	68e0      	ldr	r0, [r4, #12]
 800a088:	9b03      	ldr	r3, [sp, #12]
 800a08a:	4298      	cmp	r0, r3
 800a08c:	bfb8      	it	lt
 800a08e:	4618      	movlt	r0, r3
 800a090:	e7a4      	b.n	8009fdc <_printf_i+0x168>
 800a092:	2301      	movs	r3, #1
 800a094:	4632      	mov	r2, r6
 800a096:	4649      	mov	r1, r9
 800a098:	4640      	mov	r0, r8
 800a09a:	47d0      	blx	sl
 800a09c:	3001      	adds	r0, #1
 800a09e:	d09b      	beq.n	8009fd8 <_printf_i+0x164>
 800a0a0:	3501      	adds	r5, #1
 800a0a2:	68e3      	ldr	r3, [r4, #12]
 800a0a4:	9903      	ldr	r1, [sp, #12]
 800a0a6:	1a5b      	subs	r3, r3, r1
 800a0a8:	42ab      	cmp	r3, r5
 800a0aa:	dcf2      	bgt.n	800a092 <_printf_i+0x21e>
 800a0ac:	e7eb      	b.n	800a086 <_printf_i+0x212>
 800a0ae:	2500      	movs	r5, #0
 800a0b0:	f104 0619 	add.w	r6, r4, #25
 800a0b4:	e7f5      	b.n	800a0a2 <_printf_i+0x22e>
 800a0b6:	bf00      	nop
 800a0b8:	0800d842 	.word	0x0800d842
 800a0bc:	0800d853 	.word	0x0800d853

0800a0c0 <siprintf>:
 800a0c0:	b40e      	push	{r1, r2, r3}
 800a0c2:	b500      	push	{lr}
 800a0c4:	b09c      	sub	sp, #112	; 0x70
 800a0c6:	ab1d      	add	r3, sp, #116	; 0x74
 800a0c8:	9002      	str	r0, [sp, #8]
 800a0ca:	9006      	str	r0, [sp, #24]
 800a0cc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a0d0:	4809      	ldr	r0, [pc, #36]	; (800a0f8 <siprintf+0x38>)
 800a0d2:	9107      	str	r1, [sp, #28]
 800a0d4:	9104      	str	r1, [sp, #16]
 800a0d6:	4909      	ldr	r1, [pc, #36]	; (800a0fc <siprintf+0x3c>)
 800a0d8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a0dc:	9105      	str	r1, [sp, #20]
 800a0de:	6800      	ldr	r0, [r0, #0]
 800a0e0:	9301      	str	r3, [sp, #4]
 800a0e2:	a902      	add	r1, sp, #8
 800a0e4:	f001 fb76 	bl	800b7d4 <_svfiprintf_r>
 800a0e8:	9b02      	ldr	r3, [sp, #8]
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	701a      	strb	r2, [r3, #0]
 800a0ee:	b01c      	add	sp, #112	; 0x70
 800a0f0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a0f4:	b003      	add	sp, #12
 800a0f6:	4770      	bx	lr
 800a0f8:	20000028 	.word	0x20000028
 800a0fc:	ffff0208 	.word	0xffff0208

0800a100 <quorem>:
 800a100:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a104:	6903      	ldr	r3, [r0, #16]
 800a106:	690c      	ldr	r4, [r1, #16]
 800a108:	42a3      	cmp	r3, r4
 800a10a:	4607      	mov	r7, r0
 800a10c:	f2c0 8081 	blt.w	800a212 <quorem+0x112>
 800a110:	3c01      	subs	r4, #1
 800a112:	f101 0814 	add.w	r8, r1, #20
 800a116:	f100 0514 	add.w	r5, r0, #20
 800a11a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a11e:	9301      	str	r3, [sp, #4]
 800a120:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a124:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a128:	3301      	adds	r3, #1
 800a12a:	429a      	cmp	r2, r3
 800a12c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a130:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a134:	fbb2 f6f3 	udiv	r6, r2, r3
 800a138:	d331      	bcc.n	800a19e <quorem+0x9e>
 800a13a:	f04f 0e00 	mov.w	lr, #0
 800a13e:	4640      	mov	r0, r8
 800a140:	46ac      	mov	ip, r5
 800a142:	46f2      	mov	sl, lr
 800a144:	f850 2b04 	ldr.w	r2, [r0], #4
 800a148:	b293      	uxth	r3, r2
 800a14a:	fb06 e303 	mla	r3, r6, r3, lr
 800a14e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a152:	b29b      	uxth	r3, r3
 800a154:	ebaa 0303 	sub.w	r3, sl, r3
 800a158:	f8dc a000 	ldr.w	sl, [ip]
 800a15c:	0c12      	lsrs	r2, r2, #16
 800a15e:	fa13 f38a 	uxtah	r3, r3, sl
 800a162:	fb06 e202 	mla	r2, r6, r2, lr
 800a166:	9300      	str	r3, [sp, #0]
 800a168:	9b00      	ldr	r3, [sp, #0]
 800a16a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a16e:	b292      	uxth	r2, r2
 800a170:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a174:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a178:	f8bd 3000 	ldrh.w	r3, [sp]
 800a17c:	4581      	cmp	r9, r0
 800a17e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a182:	f84c 3b04 	str.w	r3, [ip], #4
 800a186:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a18a:	d2db      	bcs.n	800a144 <quorem+0x44>
 800a18c:	f855 300b 	ldr.w	r3, [r5, fp]
 800a190:	b92b      	cbnz	r3, 800a19e <quorem+0x9e>
 800a192:	9b01      	ldr	r3, [sp, #4]
 800a194:	3b04      	subs	r3, #4
 800a196:	429d      	cmp	r5, r3
 800a198:	461a      	mov	r2, r3
 800a19a:	d32e      	bcc.n	800a1fa <quorem+0xfa>
 800a19c:	613c      	str	r4, [r7, #16]
 800a19e:	4638      	mov	r0, r7
 800a1a0:	f001 f8c4 	bl	800b32c <__mcmp>
 800a1a4:	2800      	cmp	r0, #0
 800a1a6:	db24      	blt.n	800a1f2 <quorem+0xf2>
 800a1a8:	3601      	adds	r6, #1
 800a1aa:	4628      	mov	r0, r5
 800a1ac:	f04f 0c00 	mov.w	ip, #0
 800a1b0:	f858 2b04 	ldr.w	r2, [r8], #4
 800a1b4:	f8d0 e000 	ldr.w	lr, [r0]
 800a1b8:	b293      	uxth	r3, r2
 800a1ba:	ebac 0303 	sub.w	r3, ip, r3
 800a1be:	0c12      	lsrs	r2, r2, #16
 800a1c0:	fa13 f38e 	uxtah	r3, r3, lr
 800a1c4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a1c8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a1cc:	b29b      	uxth	r3, r3
 800a1ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a1d2:	45c1      	cmp	r9, r8
 800a1d4:	f840 3b04 	str.w	r3, [r0], #4
 800a1d8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a1dc:	d2e8      	bcs.n	800a1b0 <quorem+0xb0>
 800a1de:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a1e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a1e6:	b922      	cbnz	r2, 800a1f2 <quorem+0xf2>
 800a1e8:	3b04      	subs	r3, #4
 800a1ea:	429d      	cmp	r5, r3
 800a1ec:	461a      	mov	r2, r3
 800a1ee:	d30a      	bcc.n	800a206 <quorem+0x106>
 800a1f0:	613c      	str	r4, [r7, #16]
 800a1f2:	4630      	mov	r0, r6
 800a1f4:	b003      	add	sp, #12
 800a1f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1fa:	6812      	ldr	r2, [r2, #0]
 800a1fc:	3b04      	subs	r3, #4
 800a1fe:	2a00      	cmp	r2, #0
 800a200:	d1cc      	bne.n	800a19c <quorem+0x9c>
 800a202:	3c01      	subs	r4, #1
 800a204:	e7c7      	b.n	800a196 <quorem+0x96>
 800a206:	6812      	ldr	r2, [r2, #0]
 800a208:	3b04      	subs	r3, #4
 800a20a:	2a00      	cmp	r2, #0
 800a20c:	d1f0      	bne.n	800a1f0 <quorem+0xf0>
 800a20e:	3c01      	subs	r4, #1
 800a210:	e7eb      	b.n	800a1ea <quorem+0xea>
 800a212:	2000      	movs	r0, #0
 800a214:	e7ee      	b.n	800a1f4 <quorem+0xf4>
	...

0800a218 <_dtoa_r>:
 800a218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a21c:	ed2d 8b04 	vpush	{d8-d9}
 800a220:	ec57 6b10 	vmov	r6, r7, d0
 800a224:	b093      	sub	sp, #76	; 0x4c
 800a226:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a228:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a22c:	9106      	str	r1, [sp, #24]
 800a22e:	ee10 aa10 	vmov	sl, s0
 800a232:	4604      	mov	r4, r0
 800a234:	9209      	str	r2, [sp, #36]	; 0x24
 800a236:	930c      	str	r3, [sp, #48]	; 0x30
 800a238:	46bb      	mov	fp, r7
 800a23a:	b975      	cbnz	r5, 800a25a <_dtoa_r+0x42>
 800a23c:	2010      	movs	r0, #16
 800a23e:	f000 fddd 	bl	800adfc <malloc>
 800a242:	4602      	mov	r2, r0
 800a244:	6260      	str	r0, [r4, #36]	; 0x24
 800a246:	b920      	cbnz	r0, 800a252 <_dtoa_r+0x3a>
 800a248:	4ba7      	ldr	r3, [pc, #668]	; (800a4e8 <_dtoa_r+0x2d0>)
 800a24a:	21ea      	movs	r1, #234	; 0xea
 800a24c:	48a7      	ldr	r0, [pc, #668]	; (800a4ec <_dtoa_r+0x2d4>)
 800a24e:	f001 fbd1 	bl	800b9f4 <__assert_func>
 800a252:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a256:	6005      	str	r5, [r0, #0]
 800a258:	60c5      	str	r5, [r0, #12]
 800a25a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a25c:	6819      	ldr	r1, [r3, #0]
 800a25e:	b151      	cbz	r1, 800a276 <_dtoa_r+0x5e>
 800a260:	685a      	ldr	r2, [r3, #4]
 800a262:	604a      	str	r2, [r1, #4]
 800a264:	2301      	movs	r3, #1
 800a266:	4093      	lsls	r3, r2
 800a268:	608b      	str	r3, [r1, #8]
 800a26a:	4620      	mov	r0, r4
 800a26c:	f000 fe1c 	bl	800aea8 <_Bfree>
 800a270:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a272:	2200      	movs	r2, #0
 800a274:	601a      	str	r2, [r3, #0]
 800a276:	1e3b      	subs	r3, r7, #0
 800a278:	bfaa      	itet	ge
 800a27a:	2300      	movge	r3, #0
 800a27c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a280:	f8c8 3000 	strge.w	r3, [r8]
 800a284:	4b9a      	ldr	r3, [pc, #616]	; (800a4f0 <_dtoa_r+0x2d8>)
 800a286:	bfbc      	itt	lt
 800a288:	2201      	movlt	r2, #1
 800a28a:	f8c8 2000 	strlt.w	r2, [r8]
 800a28e:	ea33 030b 	bics.w	r3, r3, fp
 800a292:	d11b      	bne.n	800a2cc <_dtoa_r+0xb4>
 800a294:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a296:	f242 730f 	movw	r3, #9999	; 0x270f
 800a29a:	6013      	str	r3, [r2, #0]
 800a29c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a2a0:	4333      	orrs	r3, r6
 800a2a2:	f000 8592 	beq.w	800adca <_dtoa_r+0xbb2>
 800a2a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a2a8:	b963      	cbnz	r3, 800a2c4 <_dtoa_r+0xac>
 800a2aa:	4b92      	ldr	r3, [pc, #584]	; (800a4f4 <_dtoa_r+0x2dc>)
 800a2ac:	e022      	b.n	800a2f4 <_dtoa_r+0xdc>
 800a2ae:	4b92      	ldr	r3, [pc, #584]	; (800a4f8 <_dtoa_r+0x2e0>)
 800a2b0:	9301      	str	r3, [sp, #4]
 800a2b2:	3308      	adds	r3, #8
 800a2b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a2b6:	6013      	str	r3, [r2, #0]
 800a2b8:	9801      	ldr	r0, [sp, #4]
 800a2ba:	b013      	add	sp, #76	; 0x4c
 800a2bc:	ecbd 8b04 	vpop	{d8-d9}
 800a2c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2c4:	4b8b      	ldr	r3, [pc, #556]	; (800a4f4 <_dtoa_r+0x2dc>)
 800a2c6:	9301      	str	r3, [sp, #4]
 800a2c8:	3303      	adds	r3, #3
 800a2ca:	e7f3      	b.n	800a2b4 <_dtoa_r+0x9c>
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	4650      	mov	r0, sl
 800a2d2:	4659      	mov	r1, fp
 800a2d4:	f7f6 fc00 	bl	8000ad8 <__aeabi_dcmpeq>
 800a2d8:	ec4b ab19 	vmov	d9, sl, fp
 800a2dc:	4680      	mov	r8, r0
 800a2de:	b158      	cbz	r0, 800a2f8 <_dtoa_r+0xe0>
 800a2e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a2e2:	2301      	movs	r3, #1
 800a2e4:	6013      	str	r3, [r2, #0]
 800a2e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	f000 856b 	beq.w	800adc4 <_dtoa_r+0xbac>
 800a2ee:	4883      	ldr	r0, [pc, #524]	; (800a4fc <_dtoa_r+0x2e4>)
 800a2f0:	6018      	str	r0, [r3, #0]
 800a2f2:	1e43      	subs	r3, r0, #1
 800a2f4:	9301      	str	r3, [sp, #4]
 800a2f6:	e7df      	b.n	800a2b8 <_dtoa_r+0xa0>
 800a2f8:	ec4b ab10 	vmov	d0, sl, fp
 800a2fc:	aa10      	add	r2, sp, #64	; 0x40
 800a2fe:	a911      	add	r1, sp, #68	; 0x44
 800a300:	4620      	mov	r0, r4
 800a302:	f001 f8b9 	bl	800b478 <__d2b>
 800a306:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a30a:	ee08 0a10 	vmov	s16, r0
 800a30e:	2d00      	cmp	r5, #0
 800a310:	f000 8084 	beq.w	800a41c <_dtoa_r+0x204>
 800a314:	ee19 3a90 	vmov	r3, s19
 800a318:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a31c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a320:	4656      	mov	r6, sl
 800a322:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a326:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a32a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a32e:	4b74      	ldr	r3, [pc, #464]	; (800a500 <_dtoa_r+0x2e8>)
 800a330:	2200      	movs	r2, #0
 800a332:	4630      	mov	r0, r6
 800a334:	4639      	mov	r1, r7
 800a336:	f7f5 ffaf 	bl	8000298 <__aeabi_dsub>
 800a33a:	a365      	add	r3, pc, #404	; (adr r3, 800a4d0 <_dtoa_r+0x2b8>)
 800a33c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a340:	f7f6 f962 	bl	8000608 <__aeabi_dmul>
 800a344:	a364      	add	r3, pc, #400	; (adr r3, 800a4d8 <_dtoa_r+0x2c0>)
 800a346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a34a:	f7f5 ffa7 	bl	800029c <__adddf3>
 800a34e:	4606      	mov	r6, r0
 800a350:	4628      	mov	r0, r5
 800a352:	460f      	mov	r7, r1
 800a354:	f7f6 f8ee 	bl	8000534 <__aeabi_i2d>
 800a358:	a361      	add	r3, pc, #388	; (adr r3, 800a4e0 <_dtoa_r+0x2c8>)
 800a35a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a35e:	f7f6 f953 	bl	8000608 <__aeabi_dmul>
 800a362:	4602      	mov	r2, r0
 800a364:	460b      	mov	r3, r1
 800a366:	4630      	mov	r0, r6
 800a368:	4639      	mov	r1, r7
 800a36a:	f7f5 ff97 	bl	800029c <__adddf3>
 800a36e:	4606      	mov	r6, r0
 800a370:	460f      	mov	r7, r1
 800a372:	f7f6 fbf9 	bl	8000b68 <__aeabi_d2iz>
 800a376:	2200      	movs	r2, #0
 800a378:	9000      	str	r0, [sp, #0]
 800a37a:	2300      	movs	r3, #0
 800a37c:	4630      	mov	r0, r6
 800a37e:	4639      	mov	r1, r7
 800a380:	f7f6 fbb4 	bl	8000aec <__aeabi_dcmplt>
 800a384:	b150      	cbz	r0, 800a39c <_dtoa_r+0x184>
 800a386:	9800      	ldr	r0, [sp, #0]
 800a388:	f7f6 f8d4 	bl	8000534 <__aeabi_i2d>
 800a38c:	4632      	mov	r2, r6
 800a38e:	463b      	mov	r3, r7
 800a390:	f7f6 fba2 	bl	8000ad8 <__aeabi_dcmpeq>
 800a394:	b910      	cbnz	r0, 800a39c <_dtoa_r+0x184>
 800a396:	9b00      	ldr	r3, [sp, #0]
 800a398:	3b01      	subs	r3, #1
 800a39a:	9300      	str	r3, [sp, #0]
 800a39c:	9b00      	ldr	r3, [sp, #0]
 800a39e:	2b16      	cmp	r3, #22
 800a3a0:	d85a      	bhi.n	800a458 <_dtoa_r+0x240>
 800a3a2:	9a00      	ldr	r2, [sp, #0]
 800a3a4:	4b57      	ldr	r3, [pc, #348]	; (800a504 <_dtoa_r+0x2ec>)
 800a3a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a3aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ae:	ec51 0b19 	vmov	r0, r1, d9
 800a3b2:	f7f6 fb9b 	bl	8000aec <__aeabi_dcmplt>
 800a3b6:	2800      	cmp	r0, #0
 800a3b8:	d050      	beq.n	800a45c <_dtoa_r+0x244>
 800a3ba:	9b00      	ldr	r3, [sp, #0]
 800a3bc:	3b01      	subs	r3, #1
 800a3be:	9300      	str	r3, [sp, #0]
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	930b      	str	r3, [sp, #44]	; 0x2c
 800a3c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a3c6:	1b5d      	subs	r5, r3, r5
 800a3c8:	1e6b      	subs	r3, r5, #1
 800a3ca:	9305      	str	r3, [sp, #20]
 800a3cc:	bf45      	ittet	mi
 800a3ce:	f1c5 0301 	rsbmi	r3, r5, #1
 800a3d2:	9304      	strmi	r3, [sp, #16]
 800a3d4:	2300      	movpl	r3, #0
 800a3d6:	2300      	movmi	r3, #0
 800a3d8:	bf4c      	ite	mi
 800a3da:	9305      	strmi	r3, [sp, #20]
 800a3dc:	9304      	strpl	r3, [sp, #16]
 800a3de:	9b00      	ldr	r3, [sp, #0]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	db3d      	blt.n	800a460 <_dtoa_r+0x248>
 800a3e4:	9b05      	ldr	r3, [sp, #20]
 800a3e6:	9a00      	ldr	r2, [sp, #0]
 800a3e8:	920a      	str	r2, [sp, #40]	; 0x28
 800a3ea:	4413      	add	r3, r2
 800a3ec:	9305      	str	r3, [sp, #20]
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	9307      	str	r3, [sp, #28]
 800a3f2:	9b06      	ldr	r3, [sp, #24]
 800a3f4:	2b09      	cmp	r3, #9
 800a3f6:	f200 8089 	bhi.w	800a50c <_dtoa_r+0x2f4>
 800a3fa:	2b05      	cmp	r3, #5
 800a3fc:	bfc4      	itt	gt
 800a3fe:	3b04      	subgt	r3, #4
 800a400:	9306      	strgt	r3, [sp, #24]
 800a402:	9b06      	ldr	r3, [sp, #24]
 800a404:	f1a3 0302 	sub.w	r3, r3, #2
 800a408:	bfcc      	ite	gt
 800a40a:	2500      	movgt	r5, #0
 800a40c:	2501      	movle	r5, #1
 800a40e:	2b03      	cmp	r3, #3
 800a410:	f200 8087 	bhi.w	800a522 <_dtoa_r+0x30a>
 800a414:	e8df f003 	tbb	[pc, r3]
 800a418:	59383a2d 	.word	0x59383a2d
 800a41c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a420:	441d      	add	r5, r3
 800a422:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a426:	2b20      	cmp	r3, #32
 800a428:	bfc1      	itttt	gt
 800a42a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a42e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a432:	fa0b f303 	lslgt.w	r3, fp, r3
 800a436:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a43a:	bfda      	itte	le
 800a43c:	f1c3 0320 	rsble	r3, r3, #32
 800a440:	fa06 f003 	lslle.w	r0, r6, r3
 800a444:	4318      	orrgt	r0, r3
 800a446:	f7f6 f865 	bl	8000514 <__aeabi_ui2d>
 800a44a:	2301      	movs	r3, #1
 800a44c:	4606      	mov	r6, r0
 800a44e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a452:	3d01      	subs	r5, #1
 800a454:	930e      	str	r3, [sp, #56]	; 0x38
 800a456:	e76a      	b.n	800a32e <_dtoa_r+0x116>
 800a458:	2301      	movs	r3, #1
 800a45a:	e7b2      	b.n	800a3c2 <_dtoa_r+0x1aa>
 800a45c:	900b      	str	r0, [sp, #44]	; 0x2c
 800a45e:	e7b1      	b.n	800a3c4 <_dtoa_r+0x1ac>
 800a460:	9b04      	ldr	r3, [sp, #16]
 800a462:	9a00      	ldr	r2, [sp, #0]
 800a464:	1a9b      	subs	r3, r3, r2
 800a466:	9304      	str	r3, [sp, #16]
 800a468:	4253      	negs	r3, r2
 800a46a:	9307      	str	r3, [sp, #28]
 800a46c:	2300      	movs	r3, #0
 800a46e:	930a      	str	r3, [sp, #40]	; 0x28
 800a470:	e7bf      	b.n	800a3f2 <_dtoa_r+0x1da>
 800a472:	2300      	movs	r3, #0
 800a474:	9308      	str	r3, [sp, #32]
 800a476:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a478:	2b00      	cmp	r3, #0
 800a47a:	dc55      	bgt.n	800a528 <_dtoa_r+0x310>
 800a47c:	2301      	movs	r3, #1
 800a47e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a482:	461a      	mov	r2, r3
 800a484:	9209      	str	r2, [sp, #36]	; 0x24
 800a486:	e00c      	b.n	800a4a2 <_dtoa_r+0x28a>
 800a488:	2301      	movs	r3, #1
 800a48a:	e7f3      	b.n	800a474 <_dtoa_r+0x25c>
 800a48c:	2300      	movs	r3, #0
 800a48e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a490:	9308      	str	r3, [sp, #32]
 800a492:	9b00      	ldr	r3, [sp, #0]
 800a494:	4413      	add	r3, r2
 800a496:	9302      	str	r3, [sp, #8]
 800a498:	3301      	adds	r3, #1
 800a49a:	2b01      	cmp	r3, #1
 800a49c:	9303      	str	r3, [sp, #12]
 800a49e:	bfb8      	it	lt
 800a4a0:	2301      	movlt	r3, #1
 800a4a2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	6042      	str	r2, [r0, #4]
 800a4a8:	2204      	movs	r2, #4
 800a4aa:	f102 0614 	add.w	r6, r2, #20
 800a4ae:	429e      	cmp	r6, r3
 800a4b0:	6841      	ldr	r1, [r0, #4]
 800a4b2:	d93d      	bls.n	800a530 <_dtoa_r+0x318>
 800a4b4:	4620      	mov	r0, r4
 800a4b6:	f000 fcb7 	bl	800ae28 <_Balloc>
 800a4ba:	9001      	str	r0, [sp, #4]
 800a4bc:	2800      	cmp	r0, #0
 800a4be:	d13b      	bne.n	800a538 <_dtoa_r+0x320>
 800a4c0:	4b11      	ldr	r3, [pc, #68]	; (800a508 <_dtoa_r+0x2f0>)
 800a4c2:	4602      	mov	r2, r0
 800a4c4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a4c8:	e6c0      	b.n	800a24c <_dtoa_r+0x34>
 800a4ca:	2301      	movs	r3, #1
 800a4cc:	e7df      	b.n	800a48e <_dtoa_r+0x276>
 800a4ce:	bf00      	nop
 800a4d0:	636f4361 	.word	0x636f4361
 800a4d4:	3fd287a7 	.word	0x3fd287a7
 800a4d8:	8b60c8b3 	.word	0x8b60c8b3
 800a4dc:	3fc68a28 	.word	0x3fc68a28
 800a4e0:	509f79fb 	.word	0x509f79fb
 800a4e4:	3fd34413 	.word	0x3fd34413
 800a4e8:	0800d871 	.word	0x0800d871
 800a4ec:	0800d888 	.word	0x0800d888
 800a4f0:	7ff00000 	.word	0x7ff00000
 800a4f4:	0800d86d 	.word	0x0800d86d
 800a4f8:	0800d864 	.word	0x0800d864
 800a4fc:	0800d841 	.word	0x0800d841
 800a500:	3ff80000 	.word	0x3ff80000
 800a504:	0800d978 	.word	0x0800d978
 800a508:	0800d8e3 	.word	0x0800d8e3
 800a50c:	2501      	movs	r5, #1
 800a50e:	2300      	movs	r3, #0
 800a510:	9306      	str	r3, [sp, #24]
 800a512:	9508      	str	r5, [sp, #32]
 800a514:	f04f 33ff 	mov.w	r3, #4294967295
 800a518:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a51c:	2200      	movs	r2, #0
 800a51e:	2312      	movs	r3, #18
 800a520:	e7b0      	b.n	800a484 <_dtoa_r+0x26c>
 800a522:	2301      	movs	r3, #1
 800a524:	9308      	str	r3, [sp, #32]
 800a526:	e7f5      	b.n	800a514 <_dtoa_r+0x2fc>
 800a528:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a52a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a52e:	e7b8      	b.n	800a4a2 <_dtoa_r+0x28a>
 800a530:	3101      	adds	r1, #1
 800a532:	6041      	str	r1, [r0, #4]
 800a534:	0052      	lsls	r2, r2, #1
 800a536:	e7b8      	b.n	800a4aa <_dtoa_r+0x292>
 800a538:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a53a:	9a01      	ldr	r2, [sp, #4]
 800a53c:	601a      	str	r2, [r3, #0]
 800a53e:	9b03      	ldr	r3, [sp, #12]
 800a540:	2b0e      	cmp	r3, #14
 800a542:	f200 809d 	bhi.w	800a680 <_dtoa_r+0x468>
 800a546:	2d00      	cmp	r5, #0
 800a548:	f000 809a 	beq.w	800a680 <_dtoa_r+0x468>
 800a54c:	9b00      	ldr	r3, [sp, #0]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	dd32      	ble.n	800a5b8 <_dtoa_r+0x3a0>
 800a552:	4ab7      	ldr	r2, [pc, #732]	; (800a830 <_dtoa_r+0x618>)
 800a554:	f003 030f 	and.w	r3, r3, #15
 800a558:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a55c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a560:	9b00      	ldr	r3, [sp, #0]
 800a562:	05d8      	lsls	r0, r3, #23
 800a564:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a568:	d516      	bpl.n	800a598 <_dtoa_r+0x380>
 800a56a:	4bb2      	ldr	r3, [pc, #712]	; (800a834 <_dtoa_r+0x61c>)
 800a56c:	ec51 0b19 	vmov	r0, r1, d9
 800a570:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a574:	f7f6 f972 	bl	800085c <__aeabi_ddiv>
 800a578:	f007 070f 	and.w	r7, r7, #15
 800a57c:	4682      	mov	sl, r0
 800a57e:	468b      	mov	fp, r1
 800a580:	2503      	movs	r5, #3
 800a582:	4eac      	ldr	r6, [pc, #688]	; (800a834 <_dtoa_r+0x61c>)
 800a584:	b957      	cbnz	r7, 800a59c <_dtoa_r+0x384>
 800a586:	4642      	mov	r2, r8
 800a588:	464b      	mov	r3, r9
 800a58a:	4650      	mov	r0, sl
 800a58c:	4659      	mov	r1, fp
 800a58e:	f7f6 f965 	bl	800085c <__aeabi_ddiv>
 800a592:	4682      	mov	sl, r0
 800a594:	468b      	mov	fp, r1
 800a596:	e028      	b.n	800a5ea <_dtoa_r+0x3d2>
 800a598:	2502      	movs	r5, #2
 800a59a:	e7f2      	b.n	800a582 <_dtoa_r+0x36a>
 800a59c:	07f9      	lsls	r1, r7, #31
 800a59e:	d508      	bpl.n	800a5b2 <_dtoa_r+0x39a>
 800a5a0:	4640      	mov	r0, r8
 800a5a2:	4649      	mov	r1, r9
 800a5a4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a5a8:	f7f6 f82e 	bl	8000608 <__aeabi_dmul>
 800a5ac:	3501      	adds	r5, #1
 800a5ae:	4680      	mov	r8, r0
 800a5b0:	4689      	mov	r9, r1
 800a5b2:	107f      	asrs	r7, r7, #1
 800a5b4:	3608      	adds	r6, #8
 800a5b6:	e7e5      	b.n	800a584 <_dtoa_r+0x36c>
 800a5b8:	f000 809b 	beq.w	800a6f2 <_dtoa_r+0x4da>
 800a5bc:	9b00      	ldr	r3, [sp, #0]
 800a5be:	4f9d      	ldr	r7, [pc, #628]	; (800a834 <_dtoa_r+0x61c>)
 800a5c0:	425e      	negs	r6, r3
 800a5c2:	4b9b      	ldr	r3, [pc, #620]	; (800a830 <_dtoa_r+0x618>)
 800a5c4:	f006 020f 	and.w	r2, r6, #15
 800a5c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a5cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5d0:	ec51 0b19 	vmov	r0, r1, d9
 800a5d4:	f7f6 f818 	bl	8000608 <__aeabi_dmul>
 800a5d8:	1136      	asrs	r6, r6, #4
 800a5da:	4682      	mov	sl, r0
 800a5dc:	468b      	mov	fp, r1
 800a5de:	2300      	movs	r3, #0
 800a5e0:	2502      	movs	r5, #2
 800a5e2:	2e00      	cmp	r6, #0
 800a5e4:	d17a      	bne.n	800a6dc <_dtoa_r+0x4c4>
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d1d3      	bne.n	800a592 <_dtoa_r+0x37a>
 800a5ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	f000 8082 	beq.w	800a6f6 <_dtoa_r+0x4de>
 800a5f2:	4b91      	ldr	r3, [pc, #580]	; (800a838 <_dtoa_r+0x620>)
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	4650      	mov	r0, sl
 800a5f8:	4659      	mov	r1, fp
 800a5fa:	f7f6 fa77 	bl	8000aec <__aeabi_dcmplt>
 800a5fe:	2800      	cmp	r0, #0
 800a600:	d079      	beq.n	800a6f6 <_dtoa_r+0x4de>
 800a602:	9b03      	ldr	r3, [sp, #12]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d076      	beq.n	800a6f6 <_dtoa_r+0x4de>
 800a608:	9b02      	ldr	r3, [sp, #8]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	dd36      	ble.n	800a67c <_dtoa_r+0x464>
 800a60e:	9b00      	ldr	r3, [sp, #0]
 800a610:	4650      	mov	r0, sl
 800a612:	4659      	mov	r1, fp
 800a614:	1e5f      	subs	r7, r3, #1
 800a616:	2200      	movs	r2, #0
 800a618:	4b88      	ldr	r3, [pc, #544]	; (800a83c <_dtoa_r+0x624>)
 800a61a:	f7f5 fff5 	bl	8000608 <__aeabi_dmul>
 800a61e:	9e02      	ldr	r6, [sp, #8]
 800a620:	4682      	mov	sl, r0
 800a622:	468b      	mov	fp, r1
 800a624:	3501      	adds	r5, #1
 800a626:	4628      	mov	r0, r5
 800a628:	f7f5 ff84 	bl	8000534 <__aeabi_i2d>
 800a62c:	4652      	mov	r2, sl
 800a62e:	465b      	mov	r3, fp
 800a630:	f7f5 ffea 	bl	8000608 <__aeabi_dmul>
 800a634:	4b82      	ldr	r3, [pc, #520]	; (800a840 <_dtoa_r+0x628>)
 800a636:	2200      	movs	r2, #0
 800a638:	f7f5 fe30 	bl	800029c <__adddf3>
 800a63c:	46d0      	mov	r8, sl
 800a63e:	46d9      	mov	r9, fp
 800a640:	4682      	mov	sl, r0
 800a642:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a646:	2e00      	cmp	r6, #0
 800a648:	d158      	bne.n	800a6fc <_dtoa_r+0x4e4>
 800a64a:	4b7e      	ldr	r3, [pc, #504]	; (800a844 <_dtoa_r+0x62c>)
 800a64c:	2200      	movs	r2, #0
 800a64e:	4640      	mov	r0, r8
 800a650:	4649      	mov	r1, r9
 800a652:	f7f5 fe21 	bl	8000298 <__aeabi_dsub>
 800a656:	4652      	mov	r2, sl
 800a658:	465b      	mov	r3, fp
 800a65a:	4680      	mov	r8, r0
 800a65c:	4689      	mov	r9, r1
 800a65e:	f7f6 fa63 	bl	8000b28 <__aeabi_dcmpgt>
 800a662:	2800      	cmp	r0, #0
 800a664:	f040 8295 	bne.w	800ab92 <_dtoa_r+0x97a>
 800a668:	4652      	mov	r2, sl
 800a66a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a66e:	4640      	mov	r0, r8
 800a670:	4649      	mov	r1, r9
 800a672:	f7f6 fa3b 	bl	8000aec <__aeabi_dcmplt>
 800a676:	2800      	cmp	r0, #0
 800a678:	f040 8289 	bne.w	800ab8e <_dtoa_r+0x976>
 800a67c:	ec5b ab19 	vmov	sl, fp, d9
 800a680:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a682:	2b00      	cmp	r3, #0
 800a684:	f2c0 8148 	blt.w	800a918 <_dtoa_r+0x700>
 800a688:	9a00      	ldr	r2, [sp, #0]
 800a68a:	2a0e      	cmp	r2, #14
 800a68c:	f300 8144 	bgt.w	800a918 <_dtoa_r+0x700>
 800a690:	4b67      	ldr	r3, [pc, #412]	; (800a830 <_dtoa_r+0x618>)
 800a692:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a696:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a69a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	f280 80d5 	bge.w	800a84c <_dtoa_r+0x634>
 800a6a2:	9b03      	ldr	r3, [sp, #12]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	f300 80d1 	bgt.w	800a84c <_dtoa_r+0x634>
 800a6aa:	f040 826f 	bne.w	800ab8c <_dtoa_r+0x974>
 800a6ae:	4b65      	ldr	r3, [pc, #404]	; (800a844 <_dtoa_r+0x62c>)
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	4640      	mov	r0, r8
 800a6b4:	4649      	mov	r1, r9
 800a6b6:	f7f5 ffa7 	bl	8000608 <__aeabi_dmul>
 800a6ba:	4652      	mov	r2, sl
 800a6bc:	465b      	mov	r3, fp
 800a6be:	f7f6 fa29 	bl	8000b14 <__aeabi_dcmpge>
 800a6c2:	9e03      	ldr	r6, [sp, #12]
 800a6c4:	4637      	mov	r7, r6
 800a6c6:	2800      	cmp	r0, #0
 800a6c8:	f040 8245 	bne.w	800ab56 <_dtoa_r+0x93e>
 800a6cc:	9d01      	ldr	r5, [sp, #4]
 800a6ce:	2331      	movs	r3, #49	; 0x31
 800a6d0:	f805 3b01 	strb.w	r3, [r5], #1
 800a6d4:	9b00      	ldr	r3, [sp, #0]
 800a6d6:	3301      	adds	r3, #1
 800a6d8:	9300      	str	r3, [sp, #0]
 800a6da:	e240      	b.n	800ab5e <_dtoa_r+0x946>
 800a6dc:	07f2      	lsls	r2, r6, #31
 800a6de:	d505      	bpl.n	800a6ec <_dtoa_r+0x4d4>
 800a6e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a6e4:	f7f5 ff90 	bl	8000608 <__aeabi_dmul>
 800a6e8:	3501      	adds	r5, #1
 800a6ea:	2301      	movs	r3, #1
 800a6ec:	1076      	asrs	r6, r6, #1
 800a6ee:	3708      	adds	r7, #8
 800a6f0:	e777      	b.n	800a5e2 <_dtoa_r+0x3ca>
 800a6f2:	2502      	movs	r5, #2
 800a6f4:	e779      	b.n	800a5ea <_dtoa_r+0x3d2>
 800a6f6:	9f00      	ldr	r7, [sp, #0]
 800a6f8:	9e03      	ldr	r6, [sp, #12]
 800a6fa:	e794      	b.n	800a626 <_dtoa_r+0x40e>
 800a6fc:	9901      	ldr	r1, [sp, #4]
 800a6fe:	4b4c      	ldr	r3, [pc, #304]	; (800a830 <_dtoa_r+0x618>)
 800a700:	4431      	add	r1, r6
 800a702:	910d      	str	r1, [sp, #52]	; 0x34
 800a704:	9908      	ldr	r1, [sp, #32]
 800a706:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a70a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a70e:	2900      	cmp	r1, #0
 800a710:	d043      	beq.n	800a79a <_dtoa_r+0x582>
 800a712:	494d      	ldr	r1, [pc, #308]	; (800a848 <_dtoa_r+0x630>)
 800a714:	2000      	movs	r0, #0
 800a716:	f7f6 f8a1 	bl	800085c <__aeabi_ddiv>
 800a71a:	4652      	mov	r2, sl
 800a71c:	465b      	mov	r3, fp
 800a71e:	f7f5 fdbb 	bl	8000298 <__aeabi_dsub>
 800a722:	9d01      	ldr	r5, [sp, #4]
 800a724:	4682      	mov	sl, r0
 800a726:	468b      	mov	fp, r1
 800a728:	4649      	mov	r1, r9
 800a72a:	4640      	mov	r0, r8
 800a72c:	f7f6 fa1c 	bl	8000b68 <__aeabi_d2iz>
 800a730:	4606      	mov	r6, r0
 800a732:	f7f5 feff 	bl	8000534 <__aeabi_i2d>
 800a736:	4602      	mov	r2, r0
 800a738:	460b      	mov	r3, r1
 800a73a:	4640      	mov	r0, r8
 800a73c:	4649      	mov	r1, r9
 800a73e:	f7f5 fdab 	bl	8000298 <__aeabi_dsub>
 800a742:	3630      	adds	r6, #48	; 0x30
 800a744:	f805 6b01 	strb.w	r6, [r5], #1
 800a748:	4652      	mov	r2, sl
 800a74a:	465b      	mov	r3, fp
 800a74c:	4680      	mov	r8, r0
 800a74e:	4689      	mov	r9, r1
 800a750:	f7f6 f9cc 	bl	8000aec <__aeabi_dcmplt>
 800a754:	2800      	cmp	r0, #0
 800a756:	d163      	bne.n	800a820 <_dtoa_r+0x608>
 800a758:	4642      	mov	r2, r8
 800a75a:	464b      	mov	r3, r9
 800a75c:	4936      	ldr	r1, [pc, #216]	; (800a838 <_dtoa_r+0x620>)
 800a75e:	2000      	movs	r0, #0
 800a760:	f7f5 fd9a 	bl	8000298 <__aeabi_dsub>
 800a764:	4652      	mov	r2, sl
 800a766:	465b      	mov	r3, fp
 800a768:	f7f6 f9c0 	bl	8000aec <__aeabi_dcmplt>
 800a76c:	2800      	cmp	r0, #0
 800a76e:	f040 80b5 	bne.w	800a8dc <_dtoa_r+0x6c4>
 800a772:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a774:	429d      	cmp	r5, r3
 800a776:	d081      	beq.n	800a67c <_dtoa_r+0x464>
 800a778:	4b30      	ldr	r3, [pc, #192]	; (800a83c <_dtoa_r+0x624>)
 800a77a:	2200      	movs	r2, #0
 800a77c:	4650      	mov	r0, sl
 800a77e:	4659      	mov	r1, fp
 800a780:	f7f5 ff42 	bl	8000608 <__aeabi_dmul>
 800a784:	4b2d      	ldr	r3, [pc, #180]	; (800a83c <_dtoa_r+0x624>)
 800a786:	4682      	mov	sl, r0
 800a788:	468b      	mov	fp, r1
 800a78a:	4640      	mov	r0, r8
 800a78c:	4649      	mov	r1, r9
 800a78e:	2200      	movs	r2, #0
 800a790:	f7f5 ff3a 	bl	8000608 <__aeabi_dmul>
 800a794:	4680      	mov	r8, r0
 800a796:	4689      	mov	r9, r1
 800a798:	e7c6      	b.n	800a728 <_dtoa_r+0x510>
 800a79a:	4650      	mov	r0, sl
 800a79c:	4659      	mov	r1, fp
 800a79e:	f7f5 ff33 	bl	8000608 <__aeabi_dmul>
 800a7a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a7a4:	9d01      	ldr	r5, [sp, #4]
 800a7a6:	930f      	str	r3, [sp, #60]	; 0x3c
 800a7a8:	4682      	mov	sl, r0
 800a7aa:	468b      	mov	fp, r1
 800a7ac:	4649      	mov	r1, r9
 800a7ae:	4640      	mov	r0, r8
 800a7b0:	f7f6 f9da 	bl	8000b68 <__aeabi_d2iz>
 800a7b4:	4606      	mov	r6, r0
 800a7b6:	f7f5 febd 	bl	8000534 <__aeabi_i2d>
 800a7ba:	3630      	adds	r6, #48	; 0x30
 800a7bc:	4602      	mov	r2, r0
 800a7be:	460b      	mov	r3, r1
 800a7c0:	4640      	mov	r0, r8
 800a7c2:	4649      	mov	r1, r9
 800a7c4:	f7f5 fd68 	bl	8000298 <__aeabi_dsub>
 800a7c8:	f805 6b01 	strb.w	r6, [r5], #1
 800a7cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a7ce:	429d      	cmp	r5, r3
 800a7d0:	4680      	mov	r8, r0
 800a7d2:	4689      	mov	r9, r1
 800a7d4:	f04f 0200 	mov.w	r2, #0
 800a7d8:	d124      	bne.n	800a824 <_dtoa_r+0x60c>
 800a7da:	4b1b      	ldr	r3, [pc, #108]	; (800a848 <_dtoa_r+0x630>)
 800a7dc:	4650      	mov	r0, sl
 800a7de:	4659      	mov	r1, fp
 800a7e0:	f7f5 fd5c 	bl	800029c <__adddf3>
 800a7e4:	4602      	mov	r2, r0
 800a7e6:	460b      	mov	r3, r1
 800a7e8:	4640      	mov	r0, r8
 800a7ea:	4649      	mov	r1, r9
 800a7ec:	f7f6 f99c 	bl	8000b28 <__aeabi_dcmpgt>
 800a7f0:	2800      	cmp	r0, #0
 800a7f2:	d173      	bne.n	800a8dc <_dtoa_r+0x6c4>
 800a7f4:	4652      	mov	r2, sl
 800a7f6:	465b      	mov	r3, fp
 800a7f8:	4913      	ldr	r1, [pc, #76]	; (800a848 <_dtoa_r+0x630>)
 800a7fa:	2000      	movs	r0, #0
 800a7fc:	f7f5 fd4c 	bl	8000298 <__aeabi_dsub>
 800a800:	4602      	mov	r2, r0
 800a802:	460b      	mov	r3, r1
 800a804:	4640      	mov	r0, r8
 800a806:	4649      	mov	r1, r9
 800a808:	f7f6 f970 	bl	8000aec <__aeabi_dcmplt>
 800a80c:	2800      	cmp	r0, #0
 800a80e:	f43f af35 	beq.w	800a67c <_dtoa_r+0x464>
 800a812:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a814:	1e6b      	subs	r3, r5, #1
 800a816:	930f      	str	r3, [sp, #60]	; 0x3c
 800a818:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a81c:	2b30      	cmp	r3, #48	; 0x30
 800a81e:	d0f8      	beq.n	800a812 <_dtoa_r+0x5fa>
 800a820:	9700      	str	r7, [sp, #0]
 800a822:	e049      	b.n	800a8b8 <_dtoa_r+0x6a0>
 800a824:	4b05      	ldr	r3, [pc, #20]	; (800a83c <_dtoa_r+0x624>)
 800a826:	f7f5 feef 	bl	8000608 <__aeabi_dmul>
 800a82a:	4680      	mov	r8, r0
 800a82c:	4689      	mov	r9, r1
 800a82e:	e7bd      	b.n	800a7ac <_dtoa_r+0x594>
 800a830:	0800d978 	.word	0x0800d978
 800a834:	0800d950 	.word	0x0800d950
 800a838:	3ff00000 	.word	0x3ff00000
 800a83c:	40240000 	.word	0x40240000
 800a840:	401c0000 	.word	0x401c0000
 800a844:	40140000 	.word	0x40140000
 800a848:	3fe00000 	.word	0x3fe00000
 800a84c:	9d01      	ldr	r5, [sp, #4]
 800a84e:	4656      	mov	r6, sl
 800a850:	465f      	mov	r7, fp
 800a852:	4642      	mov	r2, r8
 800a854:	464b      	mov	r3, r9
 800a856:	4630      	mov	r0, r6
 800a858:	4639      	mov	r1, r7
 800a85a:	f7f5 ffff 	bl	800085c <__aeabi_ddiv>
 800a85e:	f7f6 f983 	bl	8000b68 <__aeabi_d2iz>
 800a862:	4682      	mov	sl, r0
 800a864:	f7f5 fe66 	bl	8000534 <__aeabi_i2d>
 800a868:	4642      	mov	r2, r8
 800a86a:	464b      	mov	r3, r9
 800a86c:	f7f5 fecc 	bl	8000608 <__aeabi_dmul>
 800a870:	4602      	mov	r2, r0
 800a872:	460b      	mov	r3, r1
 800a874:	4630      	mov	r0, r6
 800a876:	4639      	mov	r1, r7
 800a878:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a87c:	f7f5 fd0c 	bl	8000298 <__aeabi_dsub>
 800a880:	f805 6b01 	strb.w	r6, [r5], #1
 800a884:	9e01      	ldr	r6, [sp, #4]
 800a886:	9f03      	ldr	r7, [sp, #12]
 800a888:	1bae      	subs	r6, r5, r6
 800a88a:	42b7      	cmp	r7, r6
 800a88c:	4602      	mov	r2, r0
 800a88e:	460b      	mov	r3, r1
 800a890:	d135      	bne.n	800a8fe <_dtoa_r+0x6e6>
 800a892:	f7f5 fd03 	bl	800029c <__adddf3>
 800a896:	4642      	mov	r2, r8
 800a898:	464b      	mov	r3, r9
 800a89a:	4606      	mov	r6, r0
 800a89c:	460f      	mov	r7, r1
 800a89e:	f7f6 f943 	bl	8000b28 <__aeabi_dcmpgt>
 800a8a2:	b9d0      	cbnz	r0, 800a8da <_dtoa_r+0x6c2>
 800a8a4:	4642      	mov	r2, r8
 800a8a6:	464b      	mov	r3, r9
 800a8a8:	4630      	mov	r0, r6
 800a8aa:	4639      	mov	r1, r7
 800a8ac:	f7f6 f914 	bl	8000ad8 <__aeabi_dcmpeq>
 800a8b0:	b110      	cbz	r0, 800a8b8 <_dtoa_r+0x6a0>
 800a8b2:	f01a 0f01 	tst.w	sl, #1
 800a8b6:	d110      	bne.n	800a8da <_dtoa_r+0x6c2>
 800a8b8:	4620      	mov	r0, r4
 800a8ba:	ee18 1a10 	vmov	r1, s16
 800a8be:	f000 faf3 	bl	800aea8 <_Bfree>
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	9800      	ldr	r0, [sp, #0]
 800a8c6:	702b      	strb	r3, [r5, #0]
 800a8c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a8ca:	3001      	adds	r0, #1
 800a8cc:	6018      	str	r0, [r3, #0]
 800a8ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	f43f acf1 	beq.w	800a2b8 <_dtoa_r+0xa0>
 800a8d6:	601d      	str	r5, [r3, #0]
 800a8d8:	e4ee      	b.n	800a2b8 <_dtoa_r+0xa0>
 800a8da:	9f00      	ldr	r7, [sp, #0]
 800a8dc:	462b      	mov	r3, r5
 800a8de:	461d      	mov	r5, r3
 800a8e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a8e4:	2a39      	cmp	r2, #57	; 0x39
 800a8e6:	d106      	bne.n	800a8f6 <_dtoa_r+0x6de>
 800a8e8:	9a01      	ldr	r2, [sp, #4]
 800a8ea:	429a      	cmp	r2, r3
 800a8ec:	d1f7      	bne.n	800a8de <_dtoa_r+0x6c6>
 800a8ee:	9901      	ldr	r1, [sp, #4]
 800a8f0:	2230      	movs	r2, #48	; 0x30
 800a8f2:	3701      	adds	r7, #1
 800a8f4:	700a      	strb	r2, [r1, #0]
 800a8f6:	781a      	ldrb	r2, [r3, #0]
 800a8f8:	3201      	adds	r2, #1
 800a8fa:	701a      	strb	r2, [r3, #0]
 800a8fc:	e790      	b.n	800a820 <_dtoa_r+0x608>
 800a8fe:	4ba6      	ldr	r3, [pc, #664]	; (800ab98 <_dtoa_r+0x980>)
 800a900:	2200      	movs	r2, #0
 800a902:	f7f5 fe81 	bl	8000608 <__aeabi_dmul>
 800a906:	2200      	movs	r2, #0
 800a908:	2300      	movs	r3, #0
 800a90a:	4606      	mov	r6, r0
 800a90c:	460f      	mov	r7, r1
 800a90e:	f7f6 f8e3 	bl	8000ad8 <__aeabi_dcmpeq>
 800a912:	2800      	cmp	r0, #0
 800a914:	d09d      	beq.n	800a852 <_dtoa_r+0x63a>
 800a916:	e7cf      	b.n	800a8b8 <_dtoa_r+0x6a0>
 800a918:	9a08      	ldr	r2, [sp, #32]
 800a91a:	2a00      	cmp	r2, #0
 800a91c:	f000 80d7 	beq.w	800aace <_dtoa_r+0x8b6>
 800a920:	9a06      	ldr	r2, [sp, #24]
 800a922:	2a01      	cmp	r2, #1
 800a924:	f300 80ba 	bgt.w	800aa9c <_dtoa_r+0x884>
 800a928:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a92a:	2a00      	cmp	r2, #0
 800a92c:	f000 80b2 	beq.w	800aa94 <_dtoa_r+0x87c>
 800a930:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a934:	9e07      	ldr	r6, [sp, #28]
 800a936:	9d04      	ldr	r5, [sp, #16]
 800a938:	9a04      	ldr	r2, [sp, #16]
 800a93a:	441a      	add	r2, r3
 800a93c:	9204      	str	r2, [sp, #16]
 800a93e:	9a05      	ldr	r2, [sp, #20]
 800a940:	2101      	movs	r1, #1
 800a942:	441a      	add	r2, r3
 800a944:	4620      	mov	r0, r4
 800a946:	9205      	str	r2, [sp, #20]
 800a948:	f000 fb66 	bl	800b018 <__i2b>
 800a94c:	4607      	mov	r7, r0
 800a94e:	2d00      	cmp	r5, #0
 800a950:	dd0c      	ble.n	800a96c <_dtoa_r+0x754>
 800a952:	9b05      	ldr	r3, [sp, #20]
 800a954:	2b00      	cmp	r3, #0
 800a956:	dd09      	ble.n	800a96c <_dtoa_r+0x754>
 800a958:	42ab      	cmp	r3, r5
 800a95a:	9a04      	ldr	r2, [sp, #16]
 800a95c:	bfa8      	it	ge
 800a95e:	462b      	movge	r3, r5
 800a960:	1ad2      	subs	r2, r2, r3
 800a962:	9204      	str	r2, [sp, #16]
 800a964:	9a05      	ldr	r2, [sp, #20]
 800a966:	1aed      	subs	r5, r5, r3
 800a968:	1ad3      	subs	r3, r2, r3
 800a96a:	9305      	str	r3, [sp, #20]
 800a96c:	9b07      	ldr	r3, [sp, #28]
 800a96e:	b31b      	cbz	r3, 800a9b8 <_dtoa_r+0x7a0>
 800a970:	9b08      	ldr	r3, [sp, #32]
 800a972:	2b00      	cmp	r3, #0
 800a974:	f000 80af 	beq.w	800aad6 <_dtoa_r+0x8be>
 800a978:	2e00      	cmp	r6, #0
 800a97a:	dd13      	ble.n	800a9a4 <_dtoa_r+0x78c>
 800a97c:	4639      	mov	r1, r7
 800a97e:	4632      	mov	r2, r6
 800a980:	4620      	mov	r0, r4
 800a982:	f000 fc09 	bl	800b198 <__pow5mult>
 800a986:	ee18 2a10 	vmov	r2, s16
 800a98a:	4601      	mov	r1, r0
 800a98c:	4607      	mov	r7, r0
 800a98e:	4620      	mov	r0, r4
 800a990:	f000 fb58 	bl	800b044 <__multiply>
 800a994:	ee18 1a10 	vmov	r1, s16
 800a998:	4680      	mov	r8, r0
 800a99a:	4620      	mov	r0, r4
 800a99c:	f000 fa84 	bl	800aea8 <_Bfree>
 800a9a0:	ee08 8a10 	vmov	s16, r8
 800a9a4:	9b07      	ldr	r3, [sp, #28]
 800a9a6:	1b9a      	subs	r2, r3, r6
 800a9a8:	d006      	beq.n	800a9b8 <_dtoa_r+0x7a0>
 800a9aa:	ee18 1a10 	vmov	r1, s16
 800a9ae:	4620      	mov	r0, r4
 800a9b0:	f000 fbf2 	bl	800b198 <__pow5mult>
 800a9b4:	ee08 0a10 	vmov	s16, r0
 800a9b8:	2101      	movs	r1, #1
 800a9ba:	4620      	mov	r0, r4
 800a9bc:	f000 fb2c 	bl	800b018 <__i2b>
 800a9c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	4606      	mov	r6, r0
 800a9c6:	f340 8088 	ble.w	800aada <_dtoa_r+0x8c2>
 800a9ca:	461a      	mov	r2, r3
 800a9cc:	4601      	mov	r1, r0
 800a9ce:	4620      	mov	r0, r4
 800a9d0:	f000 fbe2 	bl	800b198 <__pow5mult>
 800a9d4:	9b06      	ldr	r3, [sp, #24]
 800a9d6:	2b01      	cmp	r3, #1
 800a9d8:	4606      	mov	r6, r0
 800a9da:	f340 8081 	ble.w	800aae0 <_dtoa_r+0x8c8>
 800a9de:	f04f 0800 	mov.w	r8, #0
 800a9e2:	6933      	ldr	r3, [r6, #16]
 800a9e4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a9e8:	6918      	ldr	r0, [r3, #16]
 800a9ea:	f000 fac5 	bl	800af78 <__hi0bits>
 800a9ee:	f1c0 0020 	rsb	r0, r0, #32
 800a9f2:	9b05      	ldr	r3, [sp, #20]
 800a9f4:	4418      	add	r0, r3
 800a9f6:	f010 001f 	ands.w	r0, r0, #31
 800a9fa:	f000 8092 	beq.w	800ab22 <_dtoa_r+0x90a>
 800a9fe:	f1c0 0320 	rsb	r3, r0, #32
 800aa02:	2b04      	cmp	r3, #4
 800aa04:	f340 808a 	ble.w	800ab1c <_dtoa_r+0x904>
 800aa08:	f1c0 001c 	rsb	r0, r0, #28
 800aa0c:	9b04      	ldr	r3, [sp, #16]
 800aa0e:	4403      	add	r3, r0
 800aa10:	9304      	str	r3, [sp, #16]
 800aa12:	9b05      	ldr	r3, [sp, #20]
 800aa14:	4403      	add	r3, r0
 800aa16:	4405      	add	r5, r0
 800aa18:	9305      	str	r3, [sp, #20]
 800aa1a:	9b04      	ldr	r3, [sp, #16]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	dd07      	ble.n	800aa30 <_dtoa_r+0x818>
 800aa20:	ee18 1a10 	vmov	r1, s16
 800aa24:	461a      	mov	r2, r3
 800aa26:	4620      	mov	r0, r4
 800aa28:	f000 fc10 	bl	800b24c <__lshift>
 800aa2c:	ee08 0a10 	vmov	s16, r0
 800aa30:	9b05      	ldr	r3, [sp, #20]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	dd05      	ble.n	800aa42 <_dtoa_r+0x82a>
 800aa36:	4631      	mov	r1, r6
 800aa38:	461a      	mov	r2, r3
 800aa3a:	4620      	mov	r0, r4
 800aa3c:	f000 fc06 	bl	800b24c <__lshift>
 800aa40:	4606      	mov	r6, r0
 800aa42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d06e      	beq.n	800ab26 <_dtoa_r+0x90e>
 800aa48:	ee18 0a10 	vmov	r0, s16
 800aa4c:	4631      	mov	r1, r6
 800aa4e:	f000 fc6d 	bl	800b32c <__mcmp>
 800aa52:	2800      	cmp	r0, #0
 800aa54:	da67      	bge.n	800ab26 <_dtoa_r+0x90e>
 800aa56:	9b00      	ldr	r3, [sp, #0]
 800aa58:	3b01      	subs	r3, #1
 800aa5a:	ee18 1a10 	vmov	r1, s16
 800aa5e:	9300      	str	r3, [sp, #0]
 800aa60:	220a      	movs	r2, #10
 800aa62:	2300      	movs	r3, #0
 800aa64:	4620      	mov	r0, r4
 800aa66:	f000 fa41 	bl	800aeec <__multadd>
 800aa6a:	9b08      	ldr	r3, [sp, #32]
 800aa6c:	ee08 0a10 	vmov	s16, r0
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	f000 81b1 	beq.w	800add8 <_dtoa_r+0xbc0>
 800aa76:	2300      	movs	r3, #0
 800aa78:	4639      	mov	r1, r7
 800aa7a:	220a      	movs	r2, #10
 800aa7c:	4620      	mov	r0, r4
 800aa7e:	f000 fa35 	bl	800aeec <__multadd>
 800aa82:	9b02      	ldr	r3, [sp, #8]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	4607      	mov	r7, r0
 800aa88:	f300 808e 	bgt.w	800aba8 <_dtoa_r+0x990>
 800aa8c:	9b06      	ldr	r3, [sp, #24]
 800aa8e:	2b02      	cmp	r3, #2
 800aa90:	dc51      	bgt.n	800ab36 <_dtoa_r+0x91e>
 800aa92:	e089      	b.n	800aba8 <_dtoa_r+0x990>
 800aa94:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aa96:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800aa9a:	e74b      	b.n	800a934 <_dtoa_r+0x71c>
 800aa9c:	9b03      	ldr	r3, [sp, #12]
 800aa9e:	1e5e      	subs	r6, r3, #1
 800aaa0:	9b07      	ldr	r3, [sp, #28]
 800aaa2:	42b3      	cmp	r3, r6
 800aaa4:	bfbf      	itttt	lt
 800aaa6:	9b07      	ldrlt	r3, [sp, #28]
 800aaa8:	9607      	strlt	r6, [sp, #28]
 800aaaa:	1af2      	sublt	r2, r6, r3
 800aaac:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800aaae:	bfb6      	itet	lt
 800aab0:	189b      	addlt	r3, r3, r2
 800aab2:	1b9e      	subge	r6, r3, r6
 800aab4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800aab6:	9b03      	ldr	r3, [sp, #12]
 800aab8:	bfb8      	it	lt
 800aaba:	2600      	movlt	r6, #0
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	bfb7      	itett	lt
 800aac0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800aac4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800aac8:	1a9d      	sublt	r5, r3, r2
 800aaca:	2300      	movlt	r3, #0
 800aacc:	e734      	b.n	800a938 <_dtoa_r+0x720>
 800aace:	9e07      	ldr	r6, [sp, #28]
 800aad0:	9d04      	ldr	r5, [sp, #16]
 800aad2:	9f08      	ldr	r7, [sp, #32]
 800aad4:	e73b      	b.n	800a94e <_dtoa_r+0x736>
 800aad6:	9a07      	ldr	r2, [sp, #28]
 800aad8:	e767      	b.n	800a9aa <_dtoa_r+0x792>
 800aada:	9b06      	ldr	r3, [sp, #24]
 800aadc:	2b01      	cmp	r3, #1
 800aade:	dc18      	bgt.n	800ab12 <_dtoa_r+0x8fa>
 800aae0:	f1ba 0f00 	cmp.w	sl, #0
 800aae4:	d115      	bne.n	800ab12 <_dtoa_r+0x8fa>
 800aae6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800aaea:	b993      	cbnz	r3, 800ab12 <_dtoa_r+0x8fa>
 800aaec:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800aaf0:	0d1b      	lsrs	r3, r3, #20
 800aaf2:	051b      	lsls	r3, r3, #20
 800aaf4:	b183      	cbz	r3, 800ab18 <_dtoa_r+0x900>
 800aaf6:	9b04      	ldr	r3, [sp, #16]
 800aaf8:	3301      	adds	r3, #1
 800aafa:	9304      	str	r3, [sp, #16]
 800aafc:	9b05      	ldr	r3, [sp, #20]
 800aafe:	3301      	adds	r3, #1
 800ab00:	9305      	str	r3, [sp, #20]
 800ab02:	f04f 0801 	mov.w	r8, #1
 800ab06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	f47f af6a 	bne.w	800a9e2 <_dtoa_r+0x7ca>
 800ab0e:	2001      	movs	r0, #1
 800ab10:	e76f      	b.n	800a9f2 <_dtoa_r+0x7da>
 800ab12:	f04f 0800 	mov.w	r8, #0
 800ab16:	e7f6      	b.n	800ab06 <_dtoa_r+0x8ee>
 800ab18:	4698      	mov	r8, r3
 800ab1a:	e7f4      	b.n	800ab06 <_dtoa_r+0x8ee>
 800ab1c:	f43f af7d 	beq.w	800aa1a <_dtoa_r+0x802>
 800ab20:	4618      	mov	r0, r3
 800ab22:	301c      	adds	r0, #28
 800ab24:	e772      	b.n	800aa0c <_dtoa_r+0x7f4>
 800ab26:	9b03      	ldr	r3, [sp, #12]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	dc37      	bgt.n	800ab9c <_dtoa_r+0x984>
 800ab2c:	9b06      	ldr	r3, [sp, #24]
 800ab2e:	2b02      	cmp	r3, #2
 800ab30:	dd34      	ble.n	800ab9c <_dtoa_r+0x984>
 800ab32:	9b03      	ldr	r3, [sp, #12]
 800ab34:	9302      	str	r3, [sp, #8]
 800ab36:	9b02      	ldr	r3, [sp, #8]
 800ab38:	b96b      	cbnz	r3, 800ab56 <_dtoa_r+0x93e>
 800ab3a:	4631      	mov	r1, r6
 800ab3c:	2205      	movs	r2, #5
 800ab3e:	4620      	mov	r0, r4
 800ab40:	f000 f9d4 	bl	800aeec <__multadd>
 800ab44:	4601      	mov	r1, r0
 800ab46:	4606      	mov	r6, r0
 800ab48:	ee18 0a10 	vmov	r0, s16
 800ab4c:	f000 fbee 	bl	800b32c <__mcmp>
 800ab50:	2800      	cmp	r0, #0
 800ab52:	f73f adbb 	bgt.w	800a6cc <_dtoa_r+0x4b4>
 800ab56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab58:	9d01      	ldr	r5, [sp, #4]
 800ab5a:	43db      	mvns	r3, r3
 800ab5c:	9300      	str	r3, [sp, #0]
 800ab5e:	f04f 0800 	mov.w	r8, #0
 800ab62:	4631      	mov	r1, r6
 800ab64:	4620      	mov	r0, r4
 800ab66:	f000 f99f 	bl	800aea8 <_Bfree>
 800ab6a:	2f00      	cmp	r7, #0
 800ab6c:	f43f aea4 	beq.w	800a8b8 <_dtoa_r+0x6a0>
 800ab70:	f1b8 0f00 	cmp.w	r8, #0
 800ab74:	d005      	beq.n	800ab82 <_dtoa_r+0x96a>
 800ab76:	45b8      	cmp	r8, r7
 800ab78:	d003      	beq.n	800ab82 <_dtoa_r+0x96a>
 800ab7a:	4641      	mov	r1, r8
 800ab7c:	4620      	mov	r0, r4
 800ab7e:	f000 f993 	bl	800aea8 <_Bfree>
 800ab82:	4639      	mov	r1, r7
 800ab84:	4620      	mov	r0, r4
 800ab86:	f000 f98f 	bl	800aea8 <_Bfree>
 800ab8a:	e695      	b.n	800a8b8 <_dtoa_r+0x6a0>
 800ab8c:	2600      	movs	r6, #0
 800ab8e:	4637      	mov	r7, r6
 800ab90:	e7e1      	b.n	800ab56 <_dtoa_r+0x93e>
 800ab92:	9700      	str	r7, [sp, #0]
 800ab94:	4637      	mov	r7, r6
 800ab96:	e599      	b.n	800a6cc <_dtoa_r+0x4b4>
 800ab98:	40240000 	.word	0x40240000
 800ab9c:	9b08      	ldr	r3, [sp, #32]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	f000 80ca 	beq.w	800ad38 <_dtoa_r+0xb20>
 800aba4:	9b03      	ldr	r3, [sp, #12]
 800aba6:	9302      	str	r3, [sp, #8]
 800aba8:	2d00      	cmp	r5, #0
 800abaa:	dd05      	ble.n	800abb8 <_dtoa_r+0x9a0>
 800abac:	4639      	mov	r1, r7
 800abae:	462a      	mov	r2, r5
 800abb0:	4620      	mov	r0, r4
 800abb2:	f000 fb4b 	bl	800b24c <__lshift>
 800abb6:	4607      	mov	r7, r0
 800abb8:	f1b8 0f00 	cmp.w	r8, #0
 800abbc:	d05b      	beq.n	800ac76 <_dtoa_r+0xa5e>
 800abbe:	6879      	ldr	r1, [r7, #4]
 800abc0:	4620      	mov	r0, r4
 800abc2:	f000 f931 	bl	800ae28 <_Balloc>
 800abc6:	4605      	mov	r5, r0
 800abc8:	b928      	cbnz	r0, 800abd6 <_dtoa_r+0x9be>
 800abca:	4b87      	ldr	r3, [pc, #540]	; (800ade8 <_dtoa_r+0xbd0>)
 800abcc:	4602      	mov	r2, r0
 800abce:	f240 21ea 	movw	r1, #746	; 0x2ea
 800abd2:	f7ff bb3b 	b.w	800a24c <_dtoa_r+0x34>
 800abd6:	693a      	ldr	r2, [r7, #16]
 800abd8:	3202      	adds	r2, #2
 800abda:	0092      	lsls	r2, r2, #2
 800abdc:	f107 010c 	add.w	r1, r7, #12
 800abe0:	300c      	adds	r0, #12
 800abe2:	f000 f913 	bl	800ae0c <memcpy>
 800abe6:	2201      	movs	r2, #1
 800abe8:	4629      	mov	r1, r5
 800abea:	4620      	mov	r0, r4
 800abec:	f000 fb2e 	bl	800b24c <__lshift>
 800abf0:	9b01      	ldr	r3, [sp, #4]
 800abf2:	f103 0901 	add.w	r9, r3, #1
 800abf6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800abfa:	4413      	add	r3, r2
 800abfc:	9305      	str	r3, [sp, #20]
 800abfe:	f00a 0301 	and.w	r3, sl, #1
 800ac02:	46b8      	mov	r8, r7
 800ac04:	9304      	str	r3, [sp, #16]
 800ac06:	4607      	mov	r7, r0
 800ac08:	4631      	mov	r1, r6
 800ac0a:	ee18 0a10 	vmov	r0, s16
 800ac0e:	f7ff fa77 	bl	800a100 <quorem>
 800ac12:	4641      	mov	r1, r8
 800ac14:	9002      	str	r0, [sp, #8]
 800ac16:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ac1a:	ee18 0a10 	vmov	r0, s16
 800ac1e:	f000 fb85 	bl	800b32c <__mcmp>
 800ac22:	463a      	mov	r2, r7
 800ac24:	9003      	str	r0, [sp, #12]
 800ac26:	4631      	mov	r1, r6
 800ac28:	4620      	mov	r0, r4
 800ac2a:	f000 fb9b 	bl	800b364 <__mdiff>
 800ac2e:	68c2      	ldr	r2, [r0, #12]
 800ac30:	f109 3bff 	add.w	fp, r9, #4294967295
 800ac34:	4605      	mov	r5, r0
 800ac36:	bb02      	cbnz	r2, 800ac7a <_dtoa_r+0xa62>
 800ac38:	4601      	mov	r1, r0
 800ac3a:	ee18 0a10 	vmov	r0, s16
 800ac3e:	f000 fb75 	bl	800b32c <__mcmp>
 800ac42:	4602      	mov	r2, r0
 800ac44:	4629      	mov	r1, r5
 800ac46:	4620      	mov	r0, r4
 800ac48:	9207      	str	r2, [sp, #28]
 800ac4a:	f000 f92d 	bl	800aea8 <_Bfree>
 800ac4e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800ac52:	ea43 0102 	orr.w	r1, r3, r2
 800ac56:	9b04      	ldr	r3, [sp, #16]
 800ac58:	430b      	orrs	r3, r1
 800ac5a:	464d      	mov	r5, r9
 800ac5c:	d10f      	bne.n	800ac7e <_dtoa_r+0xa66>
 800ac5e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ac62:	d02a      	beq.n	800acba <_dtoa_r+0xaa2>
 800ac64:	9b03      	ldr	r3, [sp, #12]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	dd02      	ble.n	800ac70 <_dtoa_r+0xa58>
 800ac6a:	9b02      	ldr	r3, [sp, #8]
 800ac6c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800ac70:	f88b a000 	strb.w	sl, [fp]
 800ac74:	e775      	b.n	800ab62 <_dtoa_r+0x94a>
 800ac76:	4638      	mov	r0, r7
 800ac78:	e7ba      	b.n	800abf0 <_dtoa_r+0x9d8>
 800ac7a:	2201      	movs	r2, #1
 800ac7c:	e7e2      	b.n	800ac44 <_dtoa_r+0xa2c>
 800ac7e:	9b03      	ldr	r3, [sp, #12]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	db04      	blt.n	800ac8e <_dtoa_r+0xa76>
 800ac84:	9906      	ldr	r1, [sp, #24]
 800ac86:	430b      	orrs	r3, r1
 800ac88:	9904      	ldr	r1, [sp, #16]
 800ac8a:	430b      	orrs	r3, r1
 800ac8c:	d122      	bne.n	800acd4 <_dtoa_r+0xabc>
 800ac8e:	2a00      	cmp	r2, #0
 800ac90:	ddee      	ble.n	800ac70 <_dtoa_r+0xa58>
 800ac92:	ee18 1a10 	vmov	r1, s16
 800ac96:	2201      	movs	r2, #1
 800ac98:	4620      	mov	r0, r4
 800ac9a:	f000 fad7 	bl	800b24c <__lshift>
 800ac9e:	4631      	mov	r1, r6
 800aca0:	ee08 0a10 	vmov	s16, r0
 800aca4:	f000 fb42 	bl	800b32c <__mcmp>
 800aca8:	2800      	cmp	r0, #0
 800acaa:	dc03      	bgt.n	800acb4 <_dtoa_r+0xa9c>
 800acac:	d1e0      	bne.n	800ac70 <_dtoa_r+0xa58>
 800acae:	f01a 0f01 	tst.w	sl, #1
 800acb2:	d0dd      	beq.n	800ac70 <_dtoa_r+0xa58>
 800acb4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800acb8:	d1d7      	bne.n	800ac6a <_dtoa_r+0xa52>
 800acba:	2339      	movs	r3, #57	; 0x39
 800acbc:	f88b 3000 	strb.w	r3, [fp]
 800acc0:	462b      	mov	r3, r5
 800acc2:	461d      	mov	r5, r3
 800acc4:	3b01      	subs	r3, #1
 800acc6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800acca:	2a39      	cmp	r2, #57	; 0x39
 800accc:	d071      	beq.n	800adb2 <_dtoa_r+0xb9a>
 800acce:	3201      	adds	r2, #1
 800acd0:	701a      	strb	r2, [r3, #0]
 800acd2:	e746      	b.n	800ab62 <_dtoa_r+0x94a>
 800acd4:	2a00      	cmp	r2, #0
 800acd6:	dd07      	ble.n	800ace8 <_dtoa_r+0xad0>
 800acd8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800acdc:	d0ed      	beq.n	800acba <_dtoa_r+0xaa2>
 800acde:	f10a 0301 	add.w	r3, sl, #1
 800ace2:	f88b 3000 	strb.w	r3, [fp]
 800ace6:	e73c      	b.n	800ab62 <_dtoa_r+0x94a>
 800ace8:	9b05      	ldr	r3, [sp, #20]
 800acea:	f809 ac01 	strb.w	sl, [r9, #-1]
 800acee:	4599      	cmp	r9, r3
 800acf0:	d047      	beq.n	800ad82 <_dtoa_r+0xb6a>
 800acf2:	ee18 1a10 	vmov	r1, s16
 800acf6:	2300      	movs	r3, #0
 800acf8:	220a      	movs	r2, #10
 800acfa:	4620      	mov	r0, r4
 800acfc:	f000 f8f6 	bl	800aeec <__multadd>
 800ad00:	45b8      	cmp	r8, r7
 800ad02:	ee08 0a10 	vmov	s16, r0
 800ad06:	f04f 0300 	mov.w	r3, #0
 800ad0a:	f04f 020a 	mov.w	r2, #10
 800ad0e:	4641      	mov	r1, r8
 800ad10:	4620      	mov	r0, r4
 800ad12:	d106      	bne.n	800ad22 <_dtoa_r+0xb0a>
 800ad14:	f000 f8ea 	bl	800aeec <__multadd>
 800ad18:	4680      	mov	r8, r0
 800ad1a:	4607      	mov	r7, r0
 800ad1c:	f109 0901 	add.w	r9, r9, #1
 800ad20:	e772      	b.n	800ac08 <_dtoa_r+0x9f0>
 800ad22:	f000 f8e3 	bl	800aeec <__multadd>
 800ad26:	4639      	mov	r1, r7
 800ad28:	4680      	mov	r8, r0
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	220a      	movs	r2, #10
 800ad2e:	4620      	mov	r0, r4
 800ad30:	f000 f8dc 	bl	800aeec <__multadd>
 800ad34:	4607      	mov	r7, r0
 800ad36:	e7f1      	b.n	800ad1c <_dtoa_r+0xb04>
 800ad38:	9b03      	ldr	r3, [sp, #12]
 800ad3a:	9302      	str	r3, [sp, #8]
 800ad3c:	9d01      	ldr	r5, [sp, #4]
 800ad3e:	ee18 0a10 	vmov	r0, s16
 800ad42:	4631      	mov	r1, r6
 800ad44:	f7ff f9dc 	bl	800a100 <quorem>
 800ad48:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ad4c:	9b01      	ldr	r3, [sp, #4]
 800ad4e:	f805 ab01 	strb.w	sl, [r5], #1
 800ad52:	1aea      	subs	r2, r5, r3
 800ad54:	9b02      	ldr	r3, [sp, #8]
 800ad56:	4293      	cmp	r3, r2
 800ad58:	dd09      	ble.n	800ad6e <_dtoa_r+0xb56>
 800ad5a:	ee18 1a10 	vmov	r1, s16
 800ad5e:	2300      	movs	r3, #0
 800ad60:	220a      	movs	r2, #10
 800ad62:	4620      	mov	r0, r4
 800ad64:	f000 f8c2 	bl	800aeec <__multadd>
 800ad68:	ee08 0a10 	vmov	s16, r0
 800ad6c:	e7e7      	b.n	800ad3e <_dtoa_r+0xb26>
 800ad6e:	9b02      	ldr	r3, [sp, #8]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	bfc8      	it	gt
 800ad74:	461d      	movgt	r5, r3
 800ad76:	9b01      	ldr	r3, [sp, #4]
 800ad78:	bfd8      	it	le
 800ad7a:	2501      	movle	r5, #1
 800ad7c:	441d      	add	r5, r3
 800ad7e:	f04f 0800 	mov.w	r8, #0
 800ad82:	ee18 1a10 	vmov	r1, s16
 800ad86:	2201      	movs	r2, #1
 800ad88:	4620      	mov	r0, r4
 800ad8a:	f000 fa5f 	bl	800b24c <__lshift>
 800ad8e:	4631      	mov	r1, r6
 800ad90:	ee08 0a10 	vmov	s16, r0
 800ad94:	f000 faca 	bl	800b32c <__mcmp>
 800ad98:	2800      	cmp	r0, #0
 800ad9a:	dc91      	bgt.n	800acc0 <_dtoa_r+0xaa8>
 800ad9c:	d102      	bne.n	800ada4 <_dtoa_r+0xb8c>
 800ad9e:	f01a 0f01 	tst.w	sl, #1
 800ada2:	d18d      	bne.n	800acc0 <_dtoa_r+0xaa8>
 800ada4:	462b      	mov	r3, r5
 800ada6:	461d      	mov	r5, r3
 800ada8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800adac:	2a30      	cmp	r2, #48	; 0x30
 800adae:	d0fa      	beq.n	800ada6 <_dtoa_r+0xb8e>
 800adb0:	e6d7      	b.n	800ab62 <_dtoa_r+0x94a>
 800adb2:	9a01      	ldr	r2, [sp, #4]
 800adb4:	429a      	cmp	r2, r3
 800adb6:	d184      	bne.n	800acc2 <_dtoa_r+0xaaa>
 800adb8:	9b00      	ldr	r3, [sp, #0]
 800adba:	3301      	adds	r3, #1
 800adbc:	9300      	str	r3, [sp, #0]
 800adbe:	2331      	movs	r3, #49	; 0x31
 800adc0:	7013      	strb	r3, [r2, #0]
 800adc2:	e6ce      	b.n	800ab62 <_dtoa_r+0x94a>
 800adc4:	4b09      	ldr	r3, [pc, #36]	; (800adec <_dtoa_r+0xbd4>)
 800adc6:	f7ff ba95 	b.w	800a2f4 <_dtoa_r+0xdc>
 800adca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800adcc:	2b00      	cmp	r3, #0
 800adce:	f47f aa6e 	bne.w	800a2ae <_dtoa_r+0x96>
 800add2:	4b07      	ldr	r3, [pc, #28]	; (800adf0 <_dtoa_r+0xbd8>)
 800add4:	f7ff ba8e 	b.w	800a2f4 <_dtoa_r+0xdc>
 800add8:	9b02      	ldr	r3, [sp, #8]
 800adda:	2b00      	cmp	r3, #0
 800addc:	dcae      	bgt.n	800ad3c <_dtoa_r+0xb24>
 800adde:	9b06      	ldr	r3, [sp, #24]
 800ade0:	2b02      	cmp	r3, #2
 800ade2:	f73f aea8 	bgt.w	800ab36 <_dtoa_r+0x91e>
 800ade6:	e7a9      	b.n	800ad3c <_dtoa_r+0xb24>
 800ade8:	0800d8e3 	.word	0x0800d8e3
 800adec:	0800d840 	.word	0x0800d840
 800adf0:	0800d864 	.word	0x0800d864

0800adf4 <_localeconv_r>:
 800adf4:	4800      	ldr	r0, [pc, #0]	; (800adf8 <_localeconv_r+0x4>)
 800adf6:	4770      	bx	lr
 800adf8:	2000017c 	.word	0x2000017c

0800adfc <malloc>:
 800adfc:	4b02      	ldr	r3, [pc, #8]	; (800ae08 <malloc+0xc>)
 800adfe:	4601      	mov	r1, r0
 800ae00:	6818      	ldr	r0, [r3, #0]
 800ae02:	f000 bc17 	b.w	800b634 <_malloc_r>
 800ae06:	bf00      	nop
 800ae08:	20000028 	.word	0x20000028

0800ae0c <memcpy>:
 800ae0c:	440a      	add	r2, r1
 800ae0e:	4291      	cmp	r1, r2
 800ae10:	f100 33ff 	add.w	r3, r0, #4294967295
 800ae14:	d100      	bne.n	800ae18 <memcpy+0xc>
 800ae16:	4770      	bx	lr
 800ae18:	b510      	push	{r4, lr}
 800ae1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ae22:	4291      	cmp	r1, r2
 800ae24:	d1f9      	bne.n	800ae1a <memcpy+0xe>
 800ae26:	bd10      	pop	{r4, pc}

0800ae28 <_Balloc>:
 800ae28:	b570      	push	{r4, r5, r6, lr}
 800ae2a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ae2c:	4604      	mov	r4, r0
 800ae2e:	460d      	mov	r5, r1
 800ae30:	b976      	cbnz	r6, 800ae50 <_Balloc+0x28>
 800ae32:	2010      	movs	r0, #16
 800ae34:	f7ff ffe2 	bl	800adfc <malloc>
 800ae38:	4602      	mov	r2, r0
 800ae3a:	6260      	str	r0, [r4, #36]	; 0x24
 800ae3c:	b920      	cbnz	r0, 800ae48 <_Balloc+0x20>
 800ae3e:	4b18      	ldr	r3, [pc, #96]	; (800aea0 <_Balloc+0x78>)
 800ae40:	4818      	ldr	r0, [pc, #96]	; (800aea4 <_Balloc+0x7c>)
 800ae42:	2166      	movs	r1, #102	; 0x66
 800ae44:	f000 fdd6 	bl	800b9f4 <__assert_func>
 800ae48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ae4c:	6006      	str	r6, [r0, #0]
 800ae4e:	60c6      	str	r6, [r0, #12]
 800ae50:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ae52:	68f3      	ldr	r3, [r6, #12]
 800ae54:	b183      	cbz	r3, 800ae78 <_Balloc+0x50>
 800ae56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ae58:	68db      	ldr	r3, [r3, #12]
 800ae5a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ae5e:	b9b8      	cbnz	r0, 800ae90 <_Balloc+0x68>
 800ae60:	2101      	movs	r1, #1
 800ae62:	fa01 f605 	lsl.w	r6, r1, r5
 800ae66:	1d72      	adds	r2, r6, #5
 800ae68:	0092      	lsls	r2, r2, #2
 800ae6a:	4620      	mov	r0, r4
 800ae6c:	f000 fb60 	bl	800b530 <_calloc_r>
 800ae70:	b160      	cbz	r0, 800ae8c <_Balloc+0x64>
 800ae72:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ae76:	e00e      	b.n	800ae96 <_Balloc+0x6e>
 800ae78:	2221      	movs	r2, #33	; 0x21
 800ae7a:	2104      	movs	r1, #4
 800ae7c:	4620      	mov	r0, r4
 800ae7e:	f000 fb57 	bl	800b530 <_calloc_r>
 800ae82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ae84:	60f0      	str	r0, [r6, #12]
 800ae86:	68db      	ldr	r3, [r3, #12]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d1e4      	bne.n	800ae56 <_Balloc+0x2e>
 800ae8c:	2000      	movs	r0, #0
 800ae8e:	bd70      	pop	{r4, r5, r6, pc}
 800ae90:	6802      	ldr	r2, [r0, #0]
 800ae92:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ae96:	2300      	movs	r3, #0
 800ae98:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ae9c:	e7f7      	b.n	800ae8e <_Balloc+0x66>
 800ae9e:	bf00      	nop
 800aea0:	0800d871 	.word	0x0800d871
 800aea4:	0800d8f4 	.word	0x0800d8f4

0800aea8 <_Bfree>:
 800aea8:	b570      	push	{r4, r5, r6, lr}
 800aeaa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800aeac:	4605      	mov	r5, r0
 800aeae:	460c      	mov	r4, r1
 800aeb0:	b976      	cbnz	r6, 800aed0 <_Bfree+0x28>
 800aeb2:	2010      	movs	r0, #16
 800aeb4:	f7ff ffa2 	bl	800adfc <malloc>
 800aeb8:	4602      	mov	r2, r0
 800aeba:	6268      	str	r0, [r5, #36]	; 0x24
 800aebc:	b920      	cbnz	r0, 800aec8 <_Bfree+0x20>
 800aebe:	4b09      	ldr	r3, [pc, #36]	; (800aee4 <_Bfree+0x3c>)
 800aec0:	4809      	ldr	r0, [pc, #36]	; (800aee8 <_Bfree+0x40>)
 800aec2:	218a      	movs	r1, #138	; 0x8a
 800aec4:	f000 fd96 	bl	800b9f4 <__assert_func>
 800aec8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aecc:	6006      	str	r6, [r0, #0]
 800aece:	60c6      	str	r6, [r0, #12]
 800aed0:	b13c      	cbz	r4, 800aee2 <_Bfree+0x3a>
 800aed2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800aed4:	6862      	ldr	r2, [r4, #4]
 800aed6:	68db      	ldr	r3, [r3, #12]
 800aed8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800aedc:	6021      	str	r1, [r4, #0]
 800aede:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800aee2:	bd70      	pop	{r4, r5, r6, pc}
 800aee4:	0800d871 	.word	0x0800d871
 800aee8:	0800d8f4 	.word	0x0800d8f4

0800aeec <__multadd>:
 800aeec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aef0:	690d      	ldr	r5, [r1, #16]
 800aef2:	4607      	mov	r7, r0
 800aef4:	460c      	mov	r4, r1
 800aef6:	461e      	mov	r6, r3
 800aef8:	f101 0c14 	add.w	ip, r1, #20
 800aefc:	2000      	movs	r0, #0
 800aefe:	f8dc 3000 	ldr.w	r3, [ip]
 800af02:	b299      	uxth	r1, r3
 800af04:	fb02 6101 	mla	r1, r2, r1, r6
 800af08:	0c1e      	lsrs	r6, r3, #16
 800af0a:	0c0b      	lsrs	r3, r1, #16
 800af0c:	fb02 3306 	mla	r3, r2, r6, r3
 800af10:	b289      	uxth	r1, r1
 800af12:	3001      	adds	r0, #1
 800af14:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800af18:	4285      	cmp	r5, r0
 800af1a:	f84c 1b04 	str.w	r1, [ip], #4
 800af1e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800af22:	dcec      	bgt.n	800aefe <__multadd+0x12>
 800af24:	b30e      	cbz	r6, 800af6a <__multadd+0x7e>
 800af26:	68a3      	ldr	r3, [r4, #8]
 800af28:	42ab      	cmp	r3, r5
 800af2a:	dc19      	bgt.n	800af60 <__multadd+0x74>
 800af2c:	6861      	ldr	r1, [r4, #4]
 800af2e:	4638      	mov	r0, r7
 800af30:	3101      	adds	r1, #1
 800af32:	f7ff ff79 	bl	800ae28 <_Balloc>
 800af36:	4680      	mov	r8, r0
 800af38:	b928      	cbnz	r0, 800af46 <__multadd+0x5a>
 800af3a:	4602      	mov	r2, r0
 800af3c:	4b0c      	ldr	r3, [pc, #48]	; (800af70 <__multadd+0x84>)
 800af3e:	480d      	ldr	r0, [pc, #52]	; (800af74 <__multadd+0x88>)
 800af40:	21b5      	movs	r1, #181	; 0xb5
 800af42:	f000 fd57 	bl	800b9f4 <__assert_func>
 800af46:	6922      	ldr	r2, [r4, #16]
 800af48:	3202      	adds	r2, #2
 800af4a:	f104 010c 	add.w	r1, r4, #12
 800af4e:	0092      	lsls	r2, r2, #2
 800af50:	300c      	adds	r0, #12
 800af52:	f7ff ff5b 	bl	800ae0c <memcpy>
 800af56:	4621      	mov	r1, r4
 800af58:	4638      	mov	r0, r7
 800af5a:	f7ff ffa5 	bl	800aea8 <_Bfree>
 800af5e:	4644      	mov	r4, r8
 800af60:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800af64:	3501      	adds	r5, #1
 800af66:	615e      	str	r6, [r3, #20]
 800af68:	6125      	str	r5, [r4, #16]
 800af6a:	4620      	mov	r0, r4
 800af6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af70:	0800d8e3 	.word	0x0800d8e3
 800af74:	0800d8f4 	.word	0x0800d8f4

0800af78 <__hi0bits>:
 800af78:	0c03      	lsrs	r3, r0, #16
 800af7a:	041b      	lsls	r3, r3, #16
 800af7c:	b9d3      	cbnz	r3, 800afb4 <__hi0bits+0x3c>
 800af7e:	0400      	lsls	r0, r0, #16
 800af80:	2310      	movs	r3, #16
 800af82:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800af86:	bf04      	itt	eq
 800af88:	0200      	lsleq	r0, r0, #8
 800af8a:	3308      	addeq	r3, #8
 800af8c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800af90:	bf04      	itt	eq
 800af92:	0100      	lsleq	r0, r0, #4
 800af94:	3304      	addeq	r3, #4
 800af96:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800af9a:	bf04      	itt	eq
 800af9c:	0080      	lsleq	r0, r0, #2
 800af9e:	3302      	addeq	r3, #2
 800afa0:	2800      	cmp	r0, #0
 800afa2:	db05      	blt.n	800afb0 <__hi0bits+0x38>
 800afa4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800afa8:	f103 0301 	add.w	r3, r3, #1
 800afac:	bf08      	it	eq
 800afae:	2320      	moveq	r3, #32
 800afb0:	4618      	mov	r0, r3
 800afb2:	4770      	bx	lr
 800afb4:	2300      	movs	r3, #0
 800afb6:	e7e4      	b.n	800af82 <__hi0bits+0xa>

0800afb8 <__lo0bits>:
 800afb8:	6803      	ldr	r3, [r0, #0]
 800afba:	f013 0207 	ands.w	r2, r3, #7
 800afbe:	4601      	mov	r1, r0
 800afc0:	d00b      	beq.n	800afda <__lo0bits+0x22>
 800afc2:	07da      	lsls	r2, r3, #31
 800afc4:	d423      	bmi.n	800b00e <__lo0bits+0x56>
 800afc6:	0798      	lsls	r0, r3, #30
 800afc8:	bf49      	itett	mi
 800afca:	085b      	lsrmi	r3, r3, #1
 800afcc:	089b      	lsrpl	r3, r3, #2
 800afce:	2001      	movmi	r0, #1
 800afd0:	600b      	strmi	r3, [r1, #0]
 800afd2:	bf5c      	itt	pl
 800afd4:	600b      	strpl	r3, [r1, #0]
 800afd6:	2002      	movpl	r0, #2
 800afd8:	4770      	bx	lr
 800afda:	b298      	uxth	r0, r3
 800afdc:	b9a8      	cbnz	r0, 800b00a <__lo0bits+0x52>
 800afde:	0c1b      	lsrs	r3, r3, #16
 800afe0:	2010      	movs	r0, #16
 800afe2:	b2da      	uxtb	r2, r3
 800afe4:	b90a      	cbnz	r2, 800afea <__lo0bits+0x32>
 800afe6:	3008      	adds	r0, #8
 800afe8:	0a1b      	lsrs	r3, r3, #8
 800afea:	071a      	lsls	r2, r3, #28
 800afec:	bf04      	itt	eq
 800afee:	091b      	lsreq	r3, r3, #4
 800aff0:	3004      	addeq	r0, #4
 800aff2:	079a      	lsls	r2, r3, #30
 800aff4:	bf04      	itt	eq
 800aff6:	089b      	lsreq	r3, r3, #2
 800aff8:	3002      	addeq	r0, #2
 800affa:	07da      	lsls	r2, r3, #31
 800affc:	d403      	bmi.n	800b006 <__lo0bits+0x4e>
 800affe:	085b      	lsrs	r3, r3, #1
 800b000:	f100 0001 	add.w	r0, r0, #1
 800b004:	d005      	beq.n	800b012 <__lo0bits+0x5a>
 800b006:	600b      	str	r3, [r1, #0]
 800b008:	4770      	bx	lr
 800b00a:	4610      	mov	r0, r2
 800b00c:	e7e9      	b.n	800afe2 <__lo0bits+0x2a>
 800b00e:	2000      	movs	r0, #0
 800b010:	4770      	bx	lr
 800b012:	2020      	movs	r0, #32
 800b014:	4770      	bx	lr
	...

0800b018 <__i2b>:
 800b018:	b510      	push	{r4, lr}
 800b01a:	460c      	mov	r4, r1
 800b01c:	2101      	movs	r1, #1
 800b01e:	f7ff ff03 	bl	800ae28 <_Balloc>
 800b022:	4602      	mov	r2, r0
 800b024:	b928      	cbnz	r0, 800b032 <__i2b+0x1a>
 800b026:	4b05      	ldr	r3, [pc, #20]	; (800b03c <__i2b+0x24>)
 800b028:	4805      	ldr	r0, [pc, #20]	; (800b040 <__i2b+0x28>)
 800b02a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b02e:	f000 fce1 	bl	800b9f4 <__assert_func>
 800b032:	2301      	movs	r3, #1
 800b034:	6144      	str	r4, [r0, #20]
 800b036:	6103      	str	r3, [r0, #16]
 800b038:	bd10      	pop	{r4, pc}
 800b03a:	bf00      	nop
 800b03c:	0800d8e3 	.word	0x0800d8e3
 800b040:	0800d8f4 	.word	0x0800d8f4

0800b044 <__multiply>:
 800b044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b048:	4691      	mov	r9, r2
 800b04a:	690a      	ldr	r2, [r1, #16]
 800b04c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b050:	429a      	cmp	r2, r3
 800b052:	bfb8      	it	lt
 800b054:	460b      	movlt	r3, r1
 800b056:	460c      	mov	r4, r1
 800b058:	bfbc      	itt	lt
 800b05a:	464c      	movlt	r4, r9
 800b05c:	4699      	movlt	r9, r3
 800b05e:	6927      	ldr	r7, [r4, #16]
 800b060:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b064:	68a3      	ldr	r3, [r4, #8]
 800b066:	6861      	ldr	r1, [r4, #4]
 800b068:	eb07 060a 	add.w	r6, r7, sl
 800b06c:	42b3      	cmp	r3, r6
 800b06e:	b085      	sub	sp, #20
 800b070:	bfb8      	it	lt
 800b072:	3101      	addlt	r1, #1
 800b074:	f7ff fed8 	bl	800ae28 <_Balloc>
 800b078:	b930      	cbnz	r0, 800b088 <__multiply+0x44>
 800b07a:	4602      	mov	r2, r0
 800b07c:	4b44      	ldr	r3, [pc, #272]	; (800b190 <__multiply+0x14c>)
 800b07e:	4845      	ldr	r0, [pc, #276]	; (800b194 <__multiply+0x150>)
 800b080:	f240 115d 	movw	r1, #349	; 0x15d
 800b084:	f000 fcb6 	bl	800b9f4 <__assert_func>
 800b088:	f100 0514 	add.w	r5, r0, #20
 800b08c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b090:	462b      	mov	r3, r5
 800b092:	2200      	movs	r2, #0
 800b094:	4543      	cmp	r3, r8
 800b096:	d321      	bcc.n	800b0dc <__multiply+0x98>
 800b098:	f104 0314 	add.w	r3, r4, #20
 800b09c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b0a0:	f109 0314 	add.w	r3, r9, #20
 800b0a4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b0a8:	9202      	str	r2, [sp, #8]
 800b0aa:	1b3a      	subs	r2, r7, r4
 800b0ac:	3a15      	subs	r2, #21
 800b0ae:	f022 0203 	bic.w	r2, r2, #3
 800b0b2:	3204      	adds	r2, #4
 800b0b4:	f104 0115 	add.w	r1, r4, #21
 800b0b8:	428f      	cmp	r7, r1
 800b0ba:	bf38      	it	cc
 800b0bc:	2204      	movcc	r2, #4
 800b0be:	9201      	str	r2, [sp, #4]
 800b0c0:	9a02      	ldr	r2, [sp, #8]
 800b0c2:	9303      	str	r3, [sp, #12]
 800b0c4:	429a      	cmp	r2, r3
 800b0c6:	d80c      	bhi.n	800b0e2 <__multiply+0x9e>
 800b0c8:	2e00      	cmp	r6, #0
 800b0ca:	dd03      	ble.n	800b0d4 <__multiply+0x90>
 800b0cc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d05a      	beq.n	800b18a <__multiply+0x146>
 800b0d4:	6106      	str	r6, [r0, #16]
 800b0d6:	b005      	add	sp, #20
 800b0d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0dc:	f843 2b04 	str.w	r2, [r3], #4
 800b0e0:	e7d8      	b.n	800b094 <__multiply+0x50>
 800b0e2:	f8b3 a000 	ldrh.w	sl, [r3]
 800b0e6:	f1ba 0f00 	cmp.w	sl, #0
 800b0ea:	d024      	beq.n	800b136 <__multiply+0xf2>
 800b0ec:	f104 0e14 	add.w	lr, r4, #20
 800b0f0:	46a9      	mov	r9, r5
 800b0f2:	f04f 0c00 	mov.w	ip, #0
 800b0f6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b0fa:	f8d9 1000 	ldr.w	r1, [r9]
 800b0fe:	fa1f fb82 	uxth.w	fp, r2
 800b102:	b289      	uxth	r1, r1
 800b104:	fb0a 110b 	mla	r1, sl, fp, r1
 800b108:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b10c:	f8d9 2000 	ldr.w	r2, [r9]
 800b110:	4461      	add	r1, ip
 800b112:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b116:	fb0a c20b 	mla	r2, sl, fp, ip
 800b11a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b11e:	b289      	uxth	r1, r1
 800b120:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b124:	4577      	cmp	r7, lr
 800b126:	f849 1b04 	str.w	r1, [r9], #4
 800b12a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b12e:	d8e2      	bhi.n	800b0f6 <__multiply+0xb2>
 800b130:	9a01      	ldr	r2, [sp, #4]
 800b132:	f845 c002 	str.w	ip, [r5, r2]
 800b136:	9a03      	ldr	r2, [sp, #12]
 800b138:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b13c:	3304      	adds	r3, #4
 800b13e:	f1b9 0f00 	cmp.w	r9, #0
 800b142:	d020      	beq.n	800b186 <__multiply+0x142>
 800b144:	6829      	ldr	r1, [r5, #0]
 800b146:	f104 0c14 	add.w	ip, r4, #20
 800b14a:	46ae      	mov	lr, r5
 800b14c:	f04f 0a00 	mov.w	sl, #0
 800b150:	f8bc b000 	ldrh.w	fp, [ip]
 800b154:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b158:	fb09 220b 	mla	r2, r9, fp, r2
 800b15c:	4492      	add	sl, r2
 800b15e:	b289      	uxth	r1, r1
 800b160:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b164:	f84e 1b04 	str.w	r1, [lr], #4
 800b168:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b16c:	f8be 1000 	ldrh.w	r1, [lr]
 800b170:	0c12      	lsrs	r2, r2, #16
 800b172:	fb09 1102 	mla	r1, r9, r2, r1
 800b176:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b17a:	4567      	cmp	r7, ip
 800b17c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b180:	d8e6      	bhi.n	800b150 <__multiply+0x10c>
 800b182:	9a01      	ldr	r2, [sp, #4]
 800b184:	50a9      	str	r1, [r5, r2]
 800b186:	3504      	adds	r5, #4
 800b188:	e79a      	b.n	800b0c0 <__multiply+0x7c>
 800b18a:	3e01      	subs	r6, #1
 800b18c:	e79c      	b.n	800b0c8 <__multiply+0x84>
 800b18e:	bf00      	nop
 800b190:	0800d8e3 	.word	0x0800d8e3
 800b194:	0800d8f4 	.word	0x0800d8f4

0800b198 <__pow5mult>:
 800b198:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b19c:	4615      	mov	r5, r2
 800b19e:	f012 0203 	ands.w	r2, r2, #3
 800b1a2:	4606      	mov	r6, r0
 800b1a4:	460f      	mov	r7, r1
 800b1a6:	d007      	beq.n	800b1b8 <__pow5mult+0x20>
 800b1a8:	4c25      	ldr	r4, [pc, #148]	; (800b240 <__pow5mult+0xa8>)
 800b1aa:	3a01      	subs	r2, #1
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b1b2:	f7ff fe9b 	bl	800aeec <__multadd>
 800b1b6:	4607      	mov	r7, r0
 800b1b8:	10ad      	asrs	r5, r5, #2
 800b1ba:	d03d      	beq.n	800b238 <__pow5mult+0xa0>
 800b1bc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b1be:	b97c      	cbnz	r4, 800b1e0 <__pow5mult+0x48>
 800b1c0:	2010      	movs	r0, #16
 800b1c2:	f7ff fe1b 	bl	800adfc <malloc>
 800b1c6:	4602      	mov	r2, r0
 800b1c8:	6270      	str	r0, [r6, #36]	; 0x24
 800b1ca:	b928      	cbnz	r0, 800b1d8 <__pow5mult+0x40>
 800b1cc:	4b1d      	ldr	r3, [pc, #116]	; (800b244 <__pow5mult+0xac>)
 800b1ce:	481e      	ldr	r0, [pc, #120]	; (800b248 <__pow5mult+0xb0>)
 800b1d0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b1d4:	f000 fc0e 	bl	800b9f4 <__assert_func>
 800b1d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b1dc:	6004      	str	r4, [r0, #0]
 800b1de:	60c4      	str	r4, [r0, #12]
 800b1e0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b1e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b1e8:	b94c      	cbnz	r4, 800b1fe <__pow5mult+0x66>
 800b1ea:	f240 2171 	movw	r1, #625	; 0x271
 800b1ee:	4630      	mov	r0, r6
 800b1f0:	f7ff ff12 	bl	800b018 <__i2b>
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	f8c8 0008 	str.w	r0, [r8, #8]
 800b1fa:	4604      	mov	r4, r0
 800b1fc:	6003      	str	r3, [r0, #0]
 800b1fe:	f04f 0900 	mov.w	r9, #0
 800b202:	07eb      	lsls	r3, r5, #31
 800b204:	d50a      	bpl.n	800b21c <__pow5mult+0x84>
 800b206:	4639      	mov	r1, r7
 800b208:	4622      	mov	r2, r4
 800b20a:	4630      	mov	r0, r6
 800b20c:	f7ff ff1a 	bl	800b044 <__multiply>
 800b210:	4639      	mov	r1, r7
 800b212:	4680      	mov	r8, r0
 800b214:	4630      	mov	r0, r6
 800b216:	f7ff fe47 	bl	800aea8 <_Bfree>
 800b21a:	4647      	mov	r7, r8
 800b21c:	106d      	asrs	r5, r5, #1
 800b21e:	d00b      	beq.n	800b238 <__pow5mult+0xa0>
 800b220:	6820      	ldr	r0, [r4, #0]
 800b222:	b938      	cbnz	r0, 800b234 <__pow5mult+0x9c>
 800b224:	4622      	mov	r2, r4
 800b226:	4621      	mov	r1, r4
 800b228:	4630      	mov	r0, r6
 800b22a:	f7ff ff0b 	bl	800b044 <__multiply>
 800b22e:	6020      	str	r0, [r4, #0]
 800b230:	f8c0 9000 	str.w	r9, [r0]
 800b234:	4604      	mov	r4, r0
 800b236:	e7e4      	b.n	800b202 <__pow5mult+0x6a>
 800b238:	4638      	mov	r0, r7
 800b23a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b23e:	bf00      	nop
 800b240:	0800da40 	.word	0x0800da40
 800b244:	0800d871 	.word	0x0800d871
 800b248:	0800d8f4 	.word	0x0800d8f4

0800b24c <__lshift>:
 800b24c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b250:	460c      	mov	r4, r1
 800b252:	6849      	ldr	r1, [r1, #4]
 800b254:	6923      	ldr	r3, [r4, #16]
 800b256:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b25a:	68a3      	ldr	r3, [r4, #8]
 800b25c:	4607      	mov	r7, r0
 800b25e:	4691      	mov	r9, r2
 800b260:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b264:	f108 0601 	add.w	r6, r8, #1
 800b268:	42b3      	cmp	r3, r6
 800b26a:	db0b      	blt.n	800b284 <__lshift+0x38>
 800b26c:	4638      	mov	r0, r7
 800b26e:	f7ff fddb 	bl	800ae28 <_Balloc>
 800b272:	4605      	mov	r5, r0
 800b274:	b948      	cbnz	r0, 800b28a <__lshift+0x3e>
 800b276:	4602      	mov	r2, r0
 800b278:	4b2a      	ldr	r3, [pc, #168]	; (800b324 <__lshift+0xd8>)
 800b27a:	482b      	ldr	r0, [pc, #172]	; (800b328 <__lshift+0xdc>)
 800b27c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b280:	f000 fbb8 	bl	800b9f4 <__assert_func>
 800b284:	3101      	adds	r1, #1
 800b286:	005b      	lsls	r3, r3, #1
 800b288:	e7ee      	b.n	800b268 <__lshift+0x1c>
 800b28a:	2300      	movs	r3, #0
 800b28c:	f100 0114 	add.w	r1, r0, #20
 800b290:	f100 0210 	add.w	r2, r0, #16
 800b294:	4618      	mov	r0, r3
 800b296:	4553      	cmp	r3, sl
 800b298:	db37      	blt.n	800b30a <__lshift+0xbe>
 800b29a:	6920      	ldr	r0, [r4, #16]
 800b29c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b2a0:	f104 0314 	add.w	r3, r4, #20
 800b2a4:	f019 091f 	ands.w	r9, r9, #31
 800b2a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b2ac:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b2b0:	d02f      	beq.n	800b312 <__lshift+0xc6>
 800b2b2:	f1c9 0e20 	rsb	lr, r9, #32
 800b2b6:	468a      	mov	sl, r1
 800b2b8:	f04f 0c00 	mov.w	ip, #0
 800b2bc:	681a      	ldr	r2, [r3, #0]
 800b2be:	fa02 f209 	lsl.w	r2, r2, r9
 800b2c2:	ea42 020c 	orr.w	r2, r2, ip
 800b2c6:	f84a 2b04 	str.w	r2, [sl], #4
 800b2ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2ce:	4298      	cmp	r0, r3
 800b2d0:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b2d4:	d8f2      	bhi.n	800b2bc <__lshift+0x70>
 800b2d6:	1b03      	subs	r3, r0, r4
 800b2d8:	3b15      	subs	r3, #21
 800b2da:	f023 0303 	bic.w	r3, r3, #3
 800b2de:	3304      	adds	r3, #4
 800b2e0:	f104 0215 	add.w	r2, r4, #21
 800b2e4:	4290      	cmp	r0, r2
 800b2e6:	bf38      	it	cc
 800b2e8:	2304      	movcc	r3, #4
 800b2ea:	f841 c003 	str.w	ip, [r1, r3]
 800b2ee:	f1bc 0f00 	cmp.w	ip, #0
 800b2f2:	d001      	beq.n	800b2f8 <__lshift+0xac>
 800b2f4:	f108 0602 	add.w	r6, r8, #2
 800b2f8:	3e01      	subs	r6, #1
 800b2fa:	4638      	mov	r0, r7
 800b2fc:	612e      	str	r6, [r5, #16]
 800b2fe:	4621      	mov	r1, r4
 800b300:	f7ff fdd2 	bl	800aea8 <_Bfree>
 800b304:	4628      	mov	r0, r5
 800b306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b30a:	f842 0f04 	str.w	r0, [r2, #4]!
 800b30e:	3301      	adds	r3, #1
 800b310:	e7c1      	b.n	800b296 <__lshift+0x4a>
 800b312:	3904      	subs	r1, #4
 800b314:	f853 2b04 	ldr.w	r2, [r3], #4
 800b318:	f841 2f04 	str.w	r2, [r1, #4]!
 800b31c:	4298      	cmp	r0, r3
 800b31e:	d8f9      	bhi.n	800b314 <__lshift+0xc8>
 800b320:	e7ea      	b.n	800b2f8 <__lshift+0xac>
 800b322:	bf00      	nop
 800b324:	0800d8e3 	.word	0x0800d8e3
 800b328:	0800d8f4 	.word	0x0800d8f4

0800b32c <__mcmp>:
 800b32c:	b530      	push	{r4, r5, lr}
 800b32e:	6902      	ldr	r2, [r0, #16]
 800b330:	690c      	ldr	r4, [r1, #16]
 800b332:	1b12      	subs	r2, r2, r4
 800b334:	d10e      	bne.n	800b354 <__mcmp+0x28>
 800b336:	f100 0314 	add.w	r3, r0, #20
 800b33a:	3114      	adds	r1, #20
 800b33c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b340:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b344:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b348:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b34c:	42a5      	cmp	r5, r4
 800b34e:	d003      	beq.n	800b358 <__mcmp+0x2c>
 800b350:	d305      	bcc.n	800b35e <__mcmp+0x32>
 800b352:	2201      	movs	r2, #1
 800b354:	4610      	mov	r0, r2
 800b356:	bd30      	pop	{r4, r5, pc}
 800b358:	4283      	cmp	r3, r0
 800b35a:	d3f3      	bcc.n	800b344 <__mcmp+0x18>
 800b35c:	e7fa      	b.n	800b354 <__mcmp+0x28>
 800b35e:	f04f 32ff 	mov.w	r2, #4294967295
 800b362:	e7f7      	b.n	800b354 <__mcmp+0x28>

0800b364 <__mdiff>:
 800b364:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b368:	460c      	mov	r4, r1
 800b36a:	4606      	mov	r6, r0
 800b36c:	4611      	mov	r1, r2
 800b36e:	4620      	mov	r0, r4
 800b370:	4690      	mov	r8, r2
 800b372:	f7ff ffdb 	bl	800b32c <__mcmp>
 800b376:	1e05      	subs	r5, r0, #0
 800b378:	d110      	bne.n	800b39c <__mdiff+0x38>
 800b37a:	4629      	mov	r1, r5
 800b37c:	4630      	mov	r0, r6
 800b37e:	f7ff fd53 	bl	800ae28 <_Balloc>
 800b382:	b930      	cbnz	r0, 800b392 <__mdiff+0x2e>
 800b384:	4b3a      	ldr	r3, [pc, #232]	; (800b470 <__mdiff+0x10c>)
 800b386:	4602      	mov	r2, r0
 800b388:	f240 2132 	movw	r1, #562	; 0x232
 800b38c:	4839      	ldr	r0, [pc, #228]	; (800b474 <__mdiff+0x110>)
 800b38e:	f000 fb31 	bl	800b9f4 <__assert_func>
 800b392:	2301      	movs	r3, #1
 800b394:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b398:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b39c:	bfa4      	itt	ge
 800b39e:	4643      	movge	r3, r8
 800b3a0:	46a0      	movge	r8, r4
 800b3a2:	4630      	mov	r0, r6
 800b3a4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b3a8:	bfa6      	itte	ge
 800b3aa:	461c      	movge	r4, r3
 800b3ac:	2500      	movge	r5, #0
 800b3ae:	2501      	movlt	r5, #1
 800b3b0:	f7ff fd3a 	bl	800ae28 <_Balloc>
 800b3b4:	b920      	cbnz	r0, 800b3c0 <__mdiff+0x5c>
 800b3b6:	4b2e      	ldr	r3, [pc, #184]	; (800b470 <__mdiff+0x10c>)
 800b3b8:	4602      	mov	r2, r0
 800b3ba:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b3be:	e7e5      	b.n	800b38c <__mdiff+0x28>
 800b3c0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b3c4:	6926      	ldr	r6, [r4, #16]
 800b3c6:	60c5      	str	r5, [r0, #12]
 800b3c8:	f104 0914 	add.w	r9, r4, #20
 800b3cc:	f108 0514 	add.w	r5, r8, #20
 800b3d0:	f100 0e14 	add.w	lr, r0, #20
 800b3d4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b3d8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b3dc:	f108 0210 	add.w	r2, r8, #16
 800b3e0:	46f2      	mov	sl, lr
 800b3e2:	2100      	movs	r1, #0
 800b3e4:	f859 3b04 	ldr.w	r3, [r9], #4
 800b3e8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b3ec:	fa1f f883 	uxth.w	r8, r3
 800b3f0:	fa11 f18b 	uxtah	r1, r1, fp
 800b3f4:	0c1b      	lsrs	r3, r3, #16
 800b3f6:	eba1 0808 	sub.w	r8, r1, r8
 800b3fa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b3fe:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b402:	fa1f f888 	uxth.w	r8, r8
 800b406:	1419      	asrs	r1, r3, #16
 800b408:	454e      	cmp	r6, r9
 800b40a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b40e:	f84a 3b04 	str.w	r3, [sl], #4
 800b412:	d8e7      	bhi.n	800b3e4 <__mdiff+0x80>
 800b414:	1b33      	subs	r3, r6, r4
 800b416:	3b15      	subs	r3, #21
 800b418:	f023 0303 	bic.w	r3, r3, #3
 800b41c:	3304      	adds	r3, #4
 800b41e:	3415      	adds	r4, #21
 800b420:	42a6      	cmp	r6, r4
 800b422:	bf38      	it	cc
 800b424:	2304      	movcc	r3, #4
 800b426:	441d      	add	r5, r3
 800b428:	4473      	add	r3, lr
 800b42a:	469e      	mov	lr, r3
 800b42c:	462e      	mov	r6, r5
 800b42e:	4566      	cmp	r6, ip
 800b430:	d30e      	bcc.n	800b450 <__mdiff+0xec>
 800b432:	f10c 0203 	add.w	r2, ip, #3
 800b436:	1b52      	subs	r2, r2, r5
 800b438:	f022 0203 	bic.w	r2, r2, #3
 800b43c:	3d03      	subs	r5, #3
 800b43e:	45ac      	cmp	ip, r5
 800b440:	bf38      	it	cc
 800b442:	2200      	movcc	r2, #0
 800b444:	441a      	add	r2, r3
 800b446:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b44a:	b17b      	cbz	r3, 800b46c <__mdiff+0x108>
 800b44c:	6107      	str	r7, [r0, #16]
 800b44e:	e7a3      	b.n	800b398 <__mdiff+0x34>
 800b450:	f856 8b04 	ldr.w	r8, [r6], #4
 800b454:	fa11 f288 	uxtah	r2, r1, r8
 800b458:	1414      	asrs	r4, r2, #16
 800b45a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b45e:	b292      	uxth	r2, r2
 800b460:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b464:	f84e 2b04 	str.w	r2, [lr], #4
 800b468:	1421      	asrs	r1, r4, #16
 800b46a:	e7e0      	b.n	800b42e <__mdiff+0xca>
 800b46c:	3f01      	subs	r7, #1
 800b46e:	e7ea      	b.n	800b446 <__mdiff+0xe2>
 800b470:	0800d8e3 	.word	0x0800d8e3
 800b474:	0800d8f4 	.word	0x0800d8f4

0800b478 <__d2b>:
 800b478:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b47c:	4689      	mov	r9, r1
 800b47e:	2101      	movs	r1, #1
 800b480:	ec57 6b10 	vmov	r6, r7, d0
 800b484:	4690      	mov	r8, r2
 800b486:	f7ff fccf 	bl	800ae28 <_Balloc>
 800b48a:	4604      	mov	r4, r0
 800b48c:	b930      	cbnz	r0, 800b49c <__d2b+0x24>
 800b48e:	4602      	mov	r2, r0
 800b490:	4b25      	ldr	r3, [pc, #148]	; (800b528 <__d2b+0xb0>)
 800b492:	4826      	ldr	r0, [pc, #152]	; (800b52c <__d2b+0xb4>)
 800b494:	f240 310a 	movw	r1, #778	; 0x30a
 800b498:	f000 faac 	bl	800b9f4 <__assert_func>
 800b49c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b4a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b4a4:	bb35      	cbnz	r5, 800b4f4 <__d2b+0x7c>
 800b4a6:	2e00      	cmp	r6, #0
 800b4a8:	9301      	str	r3, [sp, #4]
 800b4aa:	d028      	beq.n	800b4fe <__d2b+0x86>
 800b4ac:	4668      	mov	r0, sp
 800b4ae:	9600      	str	r6, [sp, #0]
 800b4b0:	f7ff fd82 	bl	800afb8 <__lo0bits>
 800b4b4:	9900      	ldr	r1, [sp, #0]
 800b4b6:	b300      	cbz	r0, 800b4fa <__d2b+0x82>
 800b4b8:	9a01      	ldr	r2, [sp, #4]
 800b4ba:	f1c0 0320 	rsb	r3, r0, #32
 800b4be:	fa02 f303 	lsl.w	r3, r2, r3
 800b4c2:	430b      	orrs	r3, r1
 800b4c4:	40c2      	lsrs	r2, r0
 800b4c6:	6163      	str	r3, [r4, #20]
 800b4c8:	9201      	str	r2, [sp, #4]
 800b4ca:	9b01      	ldr	r3, [sp, #4]
 800b4cc:	61a3      	str	r3, [r4, #24]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	bf14      	ite	ne
 800b4d2:	2202      	movne	r2, #2
 800b4d4:	2201      	moveq	r2, #1
 800b4d6:	6122      	str	r2, [r4, #16]
 800b4d8:	b1d5      	cbz	r5, 800b510 <__d2b+0x98>
 800b4da:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b4de:	4405      	add	r5, r0
 800b4e0:	f8c9 5000 	str.w	r5, [r9]
 800b4e4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b4e8:	f8c8 0000 	str.w	r0, [r8]
 800b4ec:	4620      	mov	r0, r4
 800b4ee:	b003      	add	sp, #12
 800b4f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b4f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b4f8:	e7d5      	b.n	800b4a6 <__d2b+0x2e>
 800b4fa:	6161      	str	r1, [r4, #20]
 800b4fc:	e7e5      	b.n	800b4ca <__d2b+0x52>
 800b4fe:	a801      	add	r0, sp, #4
 800b500:	f7ff fd5a 	bl	800afb8 <__lo0bits>
 800b504:	9b01      	ldr	r3, [sp, #4]
 800b506:	6163      	str	r3, [r4, #20]
 800b508:	2201      	movs	r2, #1
 800b50a:	6122      	str	r2, [r4, #16]
 800b50c:	3020      	adds	r0, #32
 800b50e:	e7e3      	b.n	800b4d8 <__d2b+0x60>
 800b510:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b514:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b518:	f8c9 0000 	str.w	r0, [r9]
 800b51c:	6918      	ldr	r0, [r3, #16]
 800b51e:	f7ff fd2b 	bl	800af78 <__hi0bits>
 800b522:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b526:	e7df      	b.n	800b4e8 <__d2b+0x70>
 800b528:	0800d8e3 	.word	0x0800d8e3
 800b52c:	0800d8f4 	.word	0x0800d8f4

0800b530 <_calloc_r>:
 800b530:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b532:	fba1 2402 	umull	r2, r4, r1, r2
 800b536:	b94c      	cbnz	r4, 800b54c <_calloc_r+0x1c>
 800b538:	4611      	mov	r1, r2
 800b53a:	9201      	str	r2, [sp, #4]
 800b53c:	f000 f87a 	bl	800b634 <_malloc_r>
 800b540:	9a01      	ldr	r2, [sp, #4]
 800b542:	4605      	mov	r5, r0
 800b544:	b930      	cbnz	r0, 800b554 <_calloc_r+0x24>
 800b546:	4628      	mov	r0, r5
 800b548:	b003      	add	sp, #12
 800b54a:	bd30      	pop	{r4, r5, pc}
 800b54c:	220c      	movs	r2, #12
 800b54e:	6002      	str	r2, [r0, #0]
 800b550:	2500      	movs	r5, #0
 800b552:	e7f8      	b.n	800b546 <_calloc_r+0x16>
 800b554:	4621      	mov	r1, r4
 800b556:	f7fe f941 	bl	80097dc <memset>
 800b55a:	e7f4      	b.n	800b546 <_calloc_r+0x16>

0800b55c <_free_r>:
 800b55c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b55e:	2900      	cmp	r1, #0
 800b560:	d044      	beq.n	800b5ec <_free_r+0x90>
 800b562:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b566:	9001      	str	r0, [sp, #4]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	f1a1 0404 	sub.w	r4, r1, #4
 800b56e:	bfb8      	it	lt
 800b570:	18e4      	addlt	r4, r4, r3
 800b572:	f000 fa9b 	bl	800baac <__malloc_lock>
 800b576:	4a1e      	ldr	r2, [pc, #120]	; (800b5f0 <_free_r+0x94>)
 800b578:	9801      	ldr	r0, [sp, #4]
 800b57a:	6813      	ldr	r3, [r2, #0]
 800b57c:	b933      	cbnz	r3, 800b58c <_free_r+0x30>
 800b57e:	6063      	str	r3, [r4, #4]
 800b580:	6014      	str	r4, [r2, #0]
 800b582:	b003      	add	sp, #12
 800b584:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b588:	f000 ba96 	b.w	800bab8 <__malloc_unlock>
 800b58c:	42a3      	cmp	r3, r4
 800b58e:	d908      	bls.n	800b5a2 <_free_r+0x46>
 800b590:	6825      	ldr	r5, [r4, #0]
 800b592:	1961      	adds	r1, r4, r5
 800b594:	428b      	cmp	r3, r1
 800b596:	bf01      	itttt	eq
 800b598:	6819      	ldreq	r1, [r3, #0]
 800b59a:	685b      	ldreq	r3, [r3, #4]
 800b59c:	1949      	addeq	r1, r1, r5
 800b59e:	6021      	streq	r1, [r4, #0]
 800b5a0:	e7ed      	b.n	800b57e <_free_r+0x22>
 800b5a2:	461a      	mov	r2, r3
 800b5a4:	685b      	ldr	r3, [r3, #4]
 800b5a6:	b10b      	cbz	r3, 800b5ac <_free_r+0x50>
 800b5a8:	42a3      	cmp	r3, r4
 800b5aa:	d9fa      	bls.n	800b5a2 <_free_r+0x46>
 800b5ac:	6811      	ldr	r1, [r2, #0]
 800b5ae:	1855      	adds	r5, r2, r1
 800b5b0:	42a5      	cmp	r5, r4
 800b5b2:	d10b      	bne.n	800b5cc <_free_r+0x70>
 800b5b4:	6824      	ldr	r4, [r4, #0]
 800b5b6:	4421      	add	r1, r4
 800b5b8:	1854      	adds	r4, r2, r1
 800b5ba:	42a3      	cmp	r3, r4
 800b5bc:	6011      	str	r1, [r2, #0]
 800b5be:	d1e0      	bne.n	800b582 <_free_r+0x26>
 800b5c0:	681c      	ldr	r4, [r3, #0]
 800b5c2:	685b      	ldr	r3, [r3, #4]
 800b5c4:	6053      	str	r3, [r2, #4]
 800b5c6:	4421      	add	r1, r4
 800b5c8:	6011      	str	r1, [r2, #0]
 800b5ca:	e7da      	b.n	800b582 <_free_r+0x26>
 800b5cc:	d902      	bls.n	800b5d4 <_free_r+0x78>
 800b5ce:	230c      	movs	r3, #12
 800b5d0:	6003      	str	r3, [r0, #0]
 800b5d2:	e7d6      	b.n	800b582 <_free_r+0x26>
 800b5d4:	6825      	ldr	r5, [r4, #0]
 800b5d6:	1961      	adds	r1, r4, r5
 800b5d8:	428b      	cmp	r3, r1
 800b5da:	bf04      	itt	eq
 800b5dc:	6819      	ldreq	r1, [r3, #0]
 800b5de:	685b      	ldreq	r3, [r3, #4]
 800b5e0:	6063      	str	r3, [r4, #4]
 800b5e2:	bf04      	itt	eq
 800b5e4:	1949      	addeq	r1, r1, r5
 800b5e6:	6021      	streq	r1, [r4, #0]
 800b5e8:	6054      	str	r4, [r2, #4]
 800b5ea:	e7ca      	b.n	800b582 <_free_r+0x26>
 800b5ec:	b003      	add	sp, #12
 800b5ee:	bd30      	pop	{r4, r5, pc}
 800b5f0:	200006ac 	.word	0x200006ac

0800b5f4 <sbrk_aligned>:
 800b5f4:	b570      	push	{r4, r5, r6, lr}
 800b5f6:	4e0e      	ldr	r6, [pc, #56]	; (800b630 <sbrk_aligned+0x3c>)
 800b5f8:	460c      	mov	r4, r1
 800b5fa:	6831      	ldr	r1, [r6, #0]
 800b5fc:	4605      	mov	r5, r0
 800b5fe:	b911      	cbnz	r1, 800b606 <sbrk_aligned+0x12>
 800b600:	f000 f9e8 	bl	800b9d4 <_sbrk_r>
 800b604:	6030      	str	r0, [r6, #0]
 800b606:	4621      	mov	r1, r4
 800b608:	4628      	mov	r0, r5
 800b60a:	f000 f9e3 	bl	800b9d4 <_sbrk_r>
 800b60e:	1c43      	adds	r3, r0, #1
 800b610:	d00a      	beq.n	800b628 <sbrk_aligned+0x34>
 800b612:	1cc4      	adds	r4, r0, #3
 800b614:	f024 0403 	bic.w	r4, r4, #3
 800b618:	42a0      	cmp	r0, r4
 800b61a:	d007      	beq.n	800b62c <sbrk_aligned+0x38>
 800b61c:	1a21      	subs	r1, r4, r0
 800b61e:	4628      	mov	r0, r5
 800b620:	f000 f9d8 	bl	800b9d4 <_sbrk_r>
 800b624:	3001      	adds	r0, #1
 800b626:	d101      	bne.n	800b62c <sbrk_aligned+0x38>
 800b628:	f04f 34ff 	mov.w	r4, #4294967295
 800b62c:	4620      	mov	r0, r4
 800b62e:	bd70      	pop	{r4, r5, r6, pc}
 800b630:	200006b0 	.word	0x200006b0

0800b634 <_malloc_r>:
 800b634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b638:	1ccd      	adds	r5, r1, #3
 800b63a:	f025 0503 	bic.w	r5, r5, #3
 800b63e:	3508      	adds	r5, #8
 800b640:	2d0c      	cmp	r5, #12
 800b642:	bf38      	it	cc
 800b644:	250c      	movcc	r5, #12
 800b646:	2d00      	cmp	r5, #0
 800b648:	4607      	mov	r7, r0
 800b64a:	db01      	blt.n	800b650 <_malloc_r+0x1c>
 800b64c:	42a9      	cmp	r1, r5
 800b64e:	d905      	bls.n	800b65c <_malloc_r+0x28>
 800b650:	230c      	movs	r3, #12
 800b652:	603b      	str	r3, [r7, #0]
 800b654:	2600      	movs	r6, #0
 800b656:	4630      	mov	r0, r6
 800b658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b65c:	4e2e      	ldr	r6, [pc, #184]	; (800b718 <_malloc_r+0xe4>)
 800b65e:	f000 fa25 	bl	800baac <__malloc_lock>
 800b662:	6833      	ldr	r3, [r6, #0]
 800b664:	461c      	mov	r4, r3
 800b666:	bb34      	cbnz	r4, 800b6b6 <_malloc_r+0x82>
 800b668:	4629      	mov	r1, r5
 800b66a:	4638      	mov	r0, r7
 800b66c:	f7ff ffc2 	bl	800b5f4 <sbrk_aligned>
 800b670:	1c43      	adds	r3, r0, #1
 800b672:	4604      	mov	r4, r0
 800b674:	d14d      	bne.n	800b712 <_malloc_r+0xde>
 800b676:	6834      	ldr	r4, [r6, #0]
 800b678:	4626      	mov	r6, r4
 800b67a:	2e00      	cmp	r6, #0
 800b67c:	d140      	bne.n	800b700 <_malloc_r+0xcc>
 800b67e:	6823      	ldr	r3, [r4, #0]
 800b680:	4631      	mov	r1, r6
 800b682:	4638      	mov	r0, r7
 800b684:	eb04 0803 	add.w	r8, r4, r3
 800b688:	f000 f9a4 	bl	800b9d4 <_sbrk_r>
 800b68c:	4580      	cmp	r8, r0
 800b68e:	d13a      	bne.n	800b706 <_malloc_r+0xd2>
 800b690:	6821      	ldr	r1, [r4, #0]
 800b692:	3503      	adds	r5, #3
 800b694:	1a6d      	subs	r5, r5, r1
 800b696:	f025 0503 	bic.w	r5, r5, #3
 800b69a:	3508      	adds	r5, #8
 800b69c:	2d0c      	cmp	r5, #12
 800b69e:	bf38      	it	cc
 800b6a0:	250c      	movcc	r5, #12
 800b6a2:	4629      	mov	r1, r5
 800b6a4:	4638      	mov	r0, r7
 800b6a6:	f7ff ffa5 	bl	800b5f4 <sbrk_aligned>
 800b6aa:	3001      	adds	r0, #1
 800b6ac:	d02b      	beq.n	800b706 <_malloc_r+0xd2>
 800b6ae:	6823      	ldr	r3, [r4, #0]
 800b6b0:	442b      	add	r3, r5
 800b6b2:	6023      	str	r3, [r4, #0]
 800b6b4:	e00e      	b.n	800b6d4 <_malloc_r+0xa0>
 800b6b6:	6822      	ldr	r2, [r4, #0]
 800b6b8:	1b52      	subs	r2, r2, r5
 800b6ba:	d41e      	bmi.n	800b6fa <_malloc_r+0xc6>
 800b6bc:	2a0b      	cmp	r2, #11
 800b6be:	d916      	bls.n	800b6ee <_malloc_r+0xba>
 800b6c0:	1961      	adds	r1, r4, r5
 800b6c2:	42a3      	cmp	r3, r4
 800b6c4:	6025      	str	r5, [r4, #0]
 800b6c6:	bf18      	it	ne
 800b6c8:	6059      	strne	r1, [r3, #4]
 800b6ca:	6863      	ldr	r3, [r4, #4]
 800b6cc:	bf08      	it	eq
 800b6ce:	6031      	streq	r1, [r6, #0]
 800b6d0:	5162      	str	r2, [r4, r5]
 800b6d2:	604b      	str	r3, [r1, #4]
 800b6d4:	4638      	mov	r0, r7
 800b6d6:	f104 060b 	add.w	r6, r4, #11
 800b6da:	f000 f9ed 	bl	800bab8 <__malloc_unlock>
 800b6de:	f026 0607 	bic.w	r6, r6, #7
 800b6e2:	1d23      	adds	r3, r4, #4
 800b6e4:	1af2      	subs	r2, r6, r3
 800b6e6:	d0b6      	beq.n	800b656 <_malloc_r+0x22>
 800b6e8:	1b9b      	subs	r3, r3, r6
 800b6ea:	50a3      	str	r3, [r4, r2]
 800b6ec:	e7b3      	b.n	800b656 <_malloc_r+0x22>
 800b6ee:	6862      	ldr	r2, [r4, #4]
 800b6f0:	42a3      	cmp	r3, r4
 800b6f2:	bf0c      	ite	eq
 800b6f4:	6032      	streq	r2, [r6, #0]
 800b6f6:	605a      	strne	r2, [r3, #4]
 800b6f8:	e7ec      	b.n	800b6d4 <_malloc_r+0xa0>
 800b6fa:	4623      	mov	r3, r4
 800b6fc:	6864      	ldr	r4, [r4, #4]
 800b6fe:	e7b2      	b.n	800b666 <_malloc_r+0x32>
 800b700:	4634      	mov	r4, r6
 800b702:	6876      	ldr	r6, [r6, #4]
 800b704:	e7b9      	b.n	800b67a <_malloc_r+0x46>
 800b706:	230c      	movs	r3, #12
 800b708:	603b      	str	r3, [r7, #0]
 800b70a:	4638      	mov	r0, r7
 800b70c:	f000 f9d4 	bl	800bab8 <__malloc_unlock>
 800b710:	e7a1      	b.n	800b656 <_malloc_r+0x22>
 800b712:	6025      	str	r5, [r4, #0]
 800b714:	e7de      	b.n	800b6d4 <_malloc_r+0xa0>
 800b716:	bf00      	nop
 800b718:	200006ac 	.word	0x200006ac

0800b71c <__ssputs_r>:
 800b71c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b720:	688e      	ldr	r6, [r1, #8]
 800b722:	429e      	cmp	r6, r3
 800b724:	4682      	mov	sl, r0
 800b726:	460c      	mov	r4, r1
 800b728:	4690      	mov	r8, r2
 800b72a:	461f      	mov	r7, r3
 800b72c:	d838      	bhi.n	800b7a0 <__ssputs_r+0x84>
 800b72e:	898a      	ldrh	r2, [r1, #12]
 800b730:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b734:	d032      	beq.n	800b79c <__ssputs_r+0x80>
 800b736:	6825      	ldr	r5, [r4, #0]
 800b738:	6909      	ldr	r1, [r1, #16]
 800b73a:	eba5 0901 	sub.w	r9, r5, r1
 800b73e:	6965      	ldr	r5, [r4, #20]
 800b740:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b744:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b748:	3301      	adds	r3, #1
 800b74a:	444b      	add	r3, r9
 800b74c:	106d      	asrs	r5, r5, #1
 800b74e:	429d      	cmp	r5, r3
 800b750:	bf38      	it	cc
 800b752:	461d      	movcc	r5, r3
 800b754:	0553      	lsls	r3, r2, #21
 800b756:	d531      	bpl.n	800b7bc <__ssputs_r+0xa0>
 800b758:	4629      	mov	r1, r5
 800b75a:	f7ff ff6b 	bl	800b634 <_malloc_r>
 800b75e:	4606      	mov	r6, r0
 800b760:	b950      	cbnz	r0, 800b778 <__ssputs_r+0x5c>
 800b762:	230c      	movs	r3, #12
 800b764:	f8ca 3000 	str.w	r3, [sl]
 800b768:	89a3      	ldrh	r3, [r4, #12]
 800b76a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b76e:	81a3      	strh	r3, [r4, #12]
 800b770:	f04f 30ff 	mov.w	r0, #4294967295
 800b774:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b778:	6921      	ldr	r1, [r4, #16]
 800b77a:	464a      	mov	r2, r9
 800b77c:	f7ff fb46 	bl	800ae0c <memcpy>
 800b780:	89a3      	ldrh	r3, [r4, #12]
 800b782:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b786:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b78a:	81a3      	strh	r3, [r4, #12]
 800b78c:	6126      	str	r6, [r4, #16]
 800b78e:	6165      	str	r5, [r4, #20]
 800b790:	444e      	add	r6, r9
 800b792:	eba5 0509 	sub.w	r5, r5, r9
 800b796:	6026      	str	r6, [r4, #0]
 800b798:	60a5      	str	r5, [r4, #8]
 800b79a:	463e      	mov	r6, r7
 800b79c:	42be      	cmp	r6, r7
 800b79e:	d900      	bls.n	800b7a2 <__ssputs_r+0x86>
 800b7a0:	463e      	mov	r6, r7
 800b7a2:	6820      	ldr	r0, [r4, #0]
 800b7a4:	4632      	mov	r2, r6
 800b7a6:	4641      	mov	r1, r8
 800b7a8:	f000 f966 	bl	800ba78 <memmove>
 800b7ac:	68a3      	ldr	r3, [r4, #8]
 800b7ae:	1b9b      	subs	r3, r3, r6
 800b7b0:	60a3      	str	r3, [r4, #8]
 800b7b2:	6823      	ldr	r3, [r4, #0]
 800b7b4:	4433      	add	r3, r6
 800b7b6:	6023      	str	r3, [r4, #0]
 800b7b8:	2000      	movs	r0, #0
 800b7ba:	e7db      	b.n	800b774 <__ssputs_r+0x58>
 800b7bc:	462a      	mov	r2, r5
 800b7be:	f000 f981 	bl	800bac4 <_realloc_r>
 800b7c2:	4606      	mov	r6, r0
 800b7c4:	2800      	cmp	r0, #0
 800b7c6:	d1e1      	bne.n	800b78c <__ssputs_r+0x70>
 800b7c8:	6921      	ldr	r1, [r4, #16]
 800b7ca:	4650      	mov	r0, sl
 800b7cc:	f7ff fec6 	bl	800b55c <_free_r>
 800b7d0:	e7c7      	b.n	800b762 <__ssputs_r+0x46>
	...

0800b7d4 <_svfiprintf_r>:
 800b7d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7d8:	4698      	mov	r8, r3
 800b7da:	898b      	ldrh	r3, [r1, #12]
 800b7dc:	061b      	lsls	r3, r3, #24
 800b7de:	b09d      	sub	sp, #116	; 0x74
 800b7e0:	4607      	mov	r7, r0
 800b7e2:	460d      	mov	r5, r1
 800b7e4:	4614      	mov	r4, r2
 800b7e6:	d50e      	bpl.n	800b806 <_svfiprintf_r+0x32>
 800b7e8:	690b      	ldr	r3, [r1, #16]
 800b7ea:	b963      	cbnz	r3, 800b806 <_svfiprintf_r+0x32>
 800b7ec:	2140      	movs	r1, #64	; 0x40
 800b7ee:	f7ff ff21 	bl	800b634 <_malloc_r>
 800b7f2:	6028      	str	r0, [r5, #0]
 800b7f4:	6128      	str	r0, [r5, #16]
 800b7f6:	b920      	cbnz	r0, 800b802 <_svfiprintf_r+0x2e>
 800b7f8:	230c      	movs	r3, #12
 800b7fa:	603b      	str	r3, [r7, #0]
 800b7fc:	f04f 30ff 	mov.w	r0, #4294967295
 800b800:	e0d1      	b.n	800b9a6 <_svfiprintf_r+0x1d2>
 800b802:	2340      	movs	r3, #64	; 0x40
 800b804:	616b      	str	r3, [r5, #20]
 800b806:	2300      	movs	r3, #0
 800b808:	9309      	str	r3, [sp, #36]	; 0x24
 800b80a:	2320      	movs	r3, #32
 800b80c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b810:	f8cd 800c 	str.w	r8, [sp, #12]
 800b814:	2330      	movs	r3, #48	; 0x30
 800b816:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b9c0 <_svfiprintf_r+0x1ec>
 800b81a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b81e:	f04f 0901 	mov.w	r9, #1
 800b822:	4623      	mov	r3, r4
 800b824:	469a      	mov	sl, r3
 800b826:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b82a:	b10a      	cbz	r2, 800b830 <_svfiprintf_r+0x5c>
 800b82c:	2a25      	cmp	r2, #37	; 0x25
 800b82e:	d1f9      	bne.n	800b824 <_svfiprintf_r+0x50>
 800b830:	ebba 0b04 	subs.w	fp, sl, r4
 800b834:	d00b      	beq.n	800b84e <_svfiprintf_r+0x7a>
 800b836:	465b      	mov	r3, fp
 800b838:	4622      	mov	r2, r4
 800b83a:	4629      	mov	r1, r5
 800b83c:	4638      	mov	r0, r7
 800b83e:	f7ff ff6d 	bl	800b71c <__ssputs_r>
 800b842:	3001      	adds	r0, #1
 800b844:	f000 80aa 	beq.w	800b99c <_svfiprintf_r+0x1c8>
 800b848:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b84a:	445a      	add	r2, fp
 800b84c:	9209      	str	r2, [sp, #36]	; 0x24
 800b84e:	f89a 3000 	ldrb.w	r3, [sl]
 800b852:	2b00      	cmp	r3, #0
 800b854:	f000 80a2 	beq.w	800b99c <_svfiprintf_r+0x1c8>
 800b858:	2300      	movs	r3, #0
 800b85a:	f04f 32ff 	mov.w	r2, #4294967295
 800b85e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b862:	f10a 0a01 	add.w	sl, sl, #1
 800b866:	9304      	str	r3, [sp, #16]
 800b868:	9307      	str	r3, [sp, #28]
 800b86a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b86e:	931a      	str	r3, [sp, #104]	; 0x68
 800b870:	4654      	mov	r4, sl
 800b872:	2205      	movs	r2, #5
 800b874:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b878:	4851      	ldr	r0, [pc, #324]	; (800b9c0 <_svfiprintf_r+0x1ec>)
 800b87a:	f7f4 fcb9 	bl	80001f0 <memchr>
 800b87e:	9a04      	ldr	r2, [sp, #16]
 800b880:	b9d8      	cbnz	r0, 800b8ba <_svfiprintf_r+0xe6>
 800b882:	06d0      	lsls	r0, r2, #27
 800b884:	bf44      	itt	mi
 800b886:	2320      	movmi	r3, #32
 800b888:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b88c:	0711      	lsls	r1, r2, #28
 800b88e:	bf44      	itt	mi
 800b890:	232b      	movmi	r3, #43	; 0x2b
 800b892:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b896:	f89a 3000 	ldrb.w	r3, [sl]
 800b89a:	2b2a      	cmp	r3, #42	; 0x2a
 800b89c:	d015      	beq.n	800b8ca <_svfiprintf_r+0xf6>
 800b89e:	9a07      	ldr	r2, [sp, #28]
 800b8a0:	4654      	mov	r4, sl
 800b8a2:	2000      	movs	r0, #0
 800b8a4:	f04f 0c0a 	mov.w	ip, #10
 800b8a8:	4621      	mov	r1, r4
 800b8aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b8ae:	3b30      	subs	r3, #48	; 0x30
 800b8b0:	2b09      	cmp	r3, #9
 800b8b2:	d94e      	bls.n	800b952 <_svfiprintf_r+0x17e>
 800b8b4:	b1b0      	cbz	r0, 800b8e4 <_svfiprintf_r+0x110>
 800b8b6:	9207      	str	r2, [sp, #28]
 800b8b8:	e014      	b.n	800b8e4 <_svfiprintf_r+0x110>
 800b8ba:	eba0 0308 	sub.w	r3, r0, r8
 800b8be:	fa09 f303 	lsl.w	r3, r9, r3
 800b8c2:	4313      	orrs	r3, r2
 800b8c4:	9304      	str	r3, [sp, #16]
 800b8c6:	46a2      	mov	sl, r4
 800b8c8:	e7d2      	b.n	800b870 <_svfiprintf_r+0x9c>
 800b8ca:	9b03      	ldr	r3, [sp, #12]
 800b8cc:	1d19      	adds	r1, r3, #4
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	9103      	str	r1, [sp, #12]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	bfbb      	ittet	lt
 800b8d6:	425b      	neglt	r3, r3
 800b8d8:	f042 0202 	orrlt.w	r2, r2, #2
 800b8dc:	9307      	strge	r3, [sp, #28]
 800b8de:	9307      	strlt	r3, [sp, #28]
 800b8e0:	bfb8      	it	lt
 800b8e2:	9204      	strlt	r2, [sp, #16]
 800b8e4:	7823      	ldrb	r3, [r4, #0]
 800b8e6:	2b2e      	cmp	r3, #46	; 0x2e
 800b8e8:	d10c      	bne.n	800b904 <_svfiprintf_r+0x130>
 800b8ea:	7863      	ldrb	r3, [r4, #1]
 800b8ec:	2b2a      	cmp	r3, #42	; 0x2a
 800b8ee:	d135      	bne.n	800b95c <_svfiprintf_r+0x188>
 800b8f0:	9b03      	ldr	r3, [sp, #12]
 800b8f2:	1d1a      	adds	r2, r3, #4
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	9203      	str	r2, [sp, #12]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	bfb8      	it	lt
 800b8fc:	f04f 33ff 	movlt.w	r3, #4294967295
 800b900:	3402      	adds	r4, #2
 800b902:	9305      	str	r3, [sp, #20]
 800b904:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b9d0 <_svfiprintf_r+0x1fc>
 800b908:	7821      	ldrb	r1, [r4, #0]
 800b90a:	2203      	movs	r2, #3
 800b90c:	4650      	mov	r0, sl
 800b90e:	f7f4 fc6f 	bl	80001f0 <memchr>
 800b912:	b140      	cbz	r0, 800b926 <_svfiprintf_r+0x152>
 800b914:	2340      	movs	r3, #64	; 0x40
 800b916:	eba0 000a 	sub.w	r0, r0, sl
 800b91a:	fa03 f000 	lsl.w	r0, r3, r0
 800b91e:	9b04      	ldr	r3, [sp, #16]
 800b920:	4303      	orrs	r3, r0
 800b922:	3401      	adds	r4, #1
 800b924:	9304      	str	r3, [sp, #16]
 800b926:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b92a:	4826      	ldr	r0, [pc, #152]	; (800b9c4 <_svfiprintf_r+0x1f0>)
 800b92c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b930:	2206      	movs	r2, #6
 800b932:	f7f4 fc5d 	bl	80001f0 <memchr>
 800b936:	2800      	cmp	r0, #0
 800b938:	d038      	beq.n	800b9ac <_svfiprintf_r+0x1d8>
 800b93a:	4b23      	ldr	r3, [pc, #140]	; (800b9c8 <_svfiprintf_r+0x1f4>)
 800b93c:	bb1b      	cbnz	r3, 800b986 <_svfiprintf_r+0x1b2>
 800b93e:	9b03      	ldr	r3, [sp, #12]
 800b940:	3307      	adds	r3, #7
 800b942:	f023 0307 	bic.w	r3, r3, #7
 800b946:	3308      	adds	r3, #8
 800b948:	9303      	str	r3, [sp, #12]
 800b94a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b94c:	4433      	add	r3, r6
 800b94e:	9309      	str	r3, [sp, #36]	; 0x24
 800b950:	e767      	b.n	800b822 <_svfiprintf_r+0x4e>
 800b952:	fb0c 3202 	mla	r2, ip, r2, r3
 800b956:	460c      	mov	r4, r1
 800b958:	2001      	movs	r0, #1
 800b95a:	e7a5      	b.n	800b8a8 <_svfiprintf_r+0xd4>
 800b95c:	2300      	movs	r3, #0
 800b95e:	3401      	adds	r4, #1
 800b960:	9305      	str	r3, [sp, #20]
 800b962:	4619      	mov	r1, r3
 800b964:	f04f 0c0a 	mov.w	ip, #10
 800b968:	4620      	mov	r0, r4
 800b96a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b96e:	3a30      	subs	r2, #48	; 0x30
 800b970:	2a09      	cmp	r2, #9
 800b972:	d903      	bls.n	800b97c <_svfiprintf_r+0x1a8>
 800b974:	2b00      	cmp	r3, #0
 800b976:	d0c5      	beq.n	800b904 <_svfiprintf_r+0x130>
 800b978:	9105      	str	r1, [sp, #20]
 800b97a:	e7c3      	b.n	800b904 <_svfiprintf_r+0x130>
 800b97c:	fb0c 2101 	mla	r1, ip, r1, r2
 800b980:	4604      	mov	r4, r0
 800b982:	2301      	movs	r3, #1
 800b984:	e7f0      	b.n	800b968 <_svfiprintf_r+0x194>
 800b986:	ab03      	add	r3, sp, #12
 800b988:	9300      	str	r3, [sp, #0]
 800b98a:	462a      	mov	r2, r5
 800b98c:	4b0f      	ldr	r3, [pc, #60]	; (800b9cc <_svfiprintf_r+0x1f8>)
 800b98e:	a904      	add	r1, sp, #16
 800b990:	4638      	mov	r0, r7
 800b992:	f7fd ffcb 	bl	800992c <_printf_float>
 800b996:	1c42      	adds	r2, r0, #1
 800b998:	4606      	mov	r6, r0
 800b99a:	d1d6      	bne.n	800b94a <_svfiprintf_r+0x176>
 800b99c:	89ab      	ldrh	r3, [r5, #12]
 800b99e:	065b      	lsls	r3, r3, #25
 800b9a0:	f53f af2c 	bmi.w	800b7fc <_svfiprintf_r+0x28>
 800b9a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b9a6:	b01d      	add	sp, #116	; 0x74
 800b9a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9ac:	ab03      	add	r3, sp, #12
 800b9ae:	9300      	str	r3, [sp, #0]
 800b9b0:	462a      	mov	r2, r5
 800b9b2:	4b06      	ldr	r3, [pc, #24]	; (800b9cc <_svfiprintf_r+0x1f8>)
 800b9b4:	a904      	add	r1, sp, #16
 800b9b6:	4638      	mov	r0, r7
 800b9b8:	f7fe fa5c 	bl	8009e74 <_printf_i>
 800b9bc:	e7eb      	b.n	800b996 <_svfiprintf_r+0x1c2>
 800b9be:	bf00      	nop
 800b9c0:	0800da4c 	.word	0x0800da4c
 800b9c4:	0800da56 	.word	0x0800da56
 800b9c8:	0800992d 	.word	0x0800992d
 800b9cc:	0800b71d 	.word	0x0800b71d
 800b9d0:	0800da52 	.word	0x0800da52

0800b9d4 <_sbrk_r>:
 800b9d4:	b538      	push	{r3, r4, r5, lr}
 800b9d6:	4d06      	ldr	r5, [pc, #24]	; (800b9f0 <_sbrk_r+0x1c>)
 800b9d8:	2300      	movs	r3, #0
 800b9da:	4604      	mov	r4, r0
 800b9dc:	4608      	mov	r0, r1
 800b9de:	602b      	str	r3, [r5, #0]
 800b9e0:	f7f6 ff5a 	bl	8002898 <_sbrk>
 800b9e4:	1c43      	adds	r3, r0, #1
 800b9e6:	d102      	bne.n	800b9ee <_sbrk_r+0x1a>
 800b9e8:	682b      	ldr	r3, [r5, #0]
 800b9ea:	b103      	cbz	r3, 800b9ee <_sbrk_r+0x1a>
 800b9ec:	6023      	str	r3, [r4, #0]
 800b9ee:	bd38      	pop	{r3, r4, r5, pc}
 800b9f0:	200006b4 	.word	0x200006b4

0800b9f4 <__assert_func>:
 800b9f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b9f6:	4614      	mov	r4, r2
 800b9f8:	461a      	mov	r2, r3
 800b9fa:	4b09      	ldr	r3, [pc, #36]	; (800ba20 <__assert_func+0x2c>)
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	4605      	mov	r5, r0
 800ba00:	68d8      	ldr	r0, [r3, #12]
 800ba02:	b14c      	cbz	r4, 800ba18 <__assert_func+0x24>
 800ba04:	4b07      	ldr	r3, [pc, #28]	; (800ba24 <__assert_func+0x30>)
 800ba06:	9100      	str	r1, [sp, #0]
 800ba08:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ba0c:	4906      	ldr	r1, [pc, #24]	; (800ba28 <__assert_func+0x34>)
 800ba0e:	462b      	mov	r3, r5
 800ba10:	f000 f80e 	bl	800ba30 <fiprintf>
 800ba14:	f000 faac 	bl	800bf70 <abort>
 800ba18:	4b04      	ldr	r3, [pc, #16]	; (800ba2c <__assert_func+0x38>)
 800ba1a:	461c      	mov	r4, r3
 800ba1c:	e7f3      	b.n	800ba06 <__assert_func+0x12>
 800ba1e:	bf00      	nop
 800ba20:	20000028 	.word	0x20000028
 800ba24:	0800da5d 	.word	0x0800da5d
 800ba28:	0800da6a 	.word	0x0800da6a
 800ba2c:	0800da98 	.word	0x0800da98

0800ba30 <fiprintf>:
 800ba30:	b40e      	push	{r1, r2, r3}
 800ba32:	b503      	push	{r0, r1, lr}
 800ba34:	4601      	mov	r1, r0
 800ba36:	ab03      	add	r3, sp, #12
 800ba38:	4805      	ldr	r0, [pc, #20]	; (800ba50 <fiprintf+0x20>)
 800ba3a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba3e:	6800      	ldr	r0, [r0, #0]
 800ba40:	9301      	str	r3, [sp, #4]
 800ba42:	f000 f897 	bl	800bb74 <_vfiprintf_r>
 800ba46:	b002      	add	sp, #8
 800ba48:	f85d eb04 	ldr.w	lr, [sp], #4
 800ba4c:	b003      	add	sp, #12
 800ba4e:	4770      	bx	lr
 800ba50:	20000028 	.word	0x20000028

0800ba54 <__ascii_mbtowc>:
 800ba54:	b082      	sub	sp, #8
 800ba56:	b901      	cbnz	r1, 800ba5a <__ascii_mbtowc+0x6>
 800ba58:	a901      	add	r1, sp, #4
 800ba5a:	b142      	cbz	r2, 800ba6e <__ascii_mbtowc+0x1a>
 800ba5c:	b14b      	cbz	r3, 800ba72 <__ascii_mbtowc+0x1e>
 800ba5e:	7813      	ldrb	r3, [r2, #0]
 800ba60:	600b      	str	r3, [r1, #0]
 800ba62:	7812      	ldrb	r2, [r2, #0]
 800ba64:	1e10      	subs	r0, r2, #0
 800ba66:	bf18      	it	ne
 800ba68:	2001      	movne	r0, #1
 800ba6a:	b002      	add	sp, #8
 800ba6c:	4770      	bx	lr
 800ba6e:	4610      	mov	r0, r2
 800ba70:	e7fb      	b.n	800ba6a <__ascii_mbtowc+0x16>
 800ba72:	f06f 0001 	mvn.w	r0, #1
 800ba76:	e7f8      	b.n	800ba6a <__ascii_mbtowc+0x16>

0800ba78 <memmove>:
 800ba78:	4288      	cmp	r0, r1
 800ba7a:	b510      	push	{r4, lr}
 800ba7c:	eb01 0402 	add.w	r4, r1, r2
 800ba80:	d902      	bls.n	800ba88 <memmove+0x10>
 800ba82:	4284      	cmp	r4, r0
 800ba84:	4623      	mov	r3, r4
 800ba86:	d807      	bhi.n	800ba98 <memmove+0x20>
 800ba88:	1e43      	subs	r3, r0, #1
 800ba8a:	42a1      	cmp	r1, r4
 800ba8c:	d008      	beq.n	800baa0 <memmove+0x28>
 800ba8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ba92:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ba96:	e7f8      	b.n	800ba8a <memmove+0x12>
 800ba98:	4402      	add	r2, r0
 800ba9a:	4601      	mov	r1, r0
 800ba9c:	428a      	cmp	r2, r1
 800ba9e:	d100      	bne.n	800baa2 <memmove+0x2a>
 800baa0:	bd10      	pop	{r4, pc}
 800baa2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800baa6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800baaa:	e7f7      	b.n	800ba9c <memmove+0x24>

0800baac <__malloc_lock>:
 800baac:	4801      	ldr	r0, [pc, #4]	; (800bab4 <__malloc_lock+0x8>)
 800baae:	f000 bc1f 	b.w	800c2f0 <__retarget_lock_acquire_recursive>
 800bab2:	bf00      	nop
 800bab4:	200006b8 	.word	0x200006b8

0800bab8 <__malloc_unlock>:
 800bab8:	4801      	ldr	r0, [pc, #4]	; (800bac0 <__malloc_unlock+0x8>)
 800baba:	f000 bc1a 	b.w	800c2f2 <__retarget_lock_release_recursive>
 800babe:	bf00      	nop
 800bac0:	200006b8 	.word	0x200006b8

0800bac4 <_realloc_r>:
 800bac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bac8:	4680      	mov	r8, r0
 800baca:	4614      	mov	r4, r2
 800bacc:	460e      	mov	r6, r1
 800bace:	b921      	cbnz	r1, 800bada <_realloc_r+0x16>
 800bad0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bad4:	4611      	mov	r1, r2
 800bad6:	f7ff bdad 	b.w	800b634 <_malloc_r>
 800bada:	b92a      	cbnz	r2, 800bae8 <_realloc_r+0x24>
 800badc:	f7ff fd3e 	bl	800b55c <_free_r>
 800bae0:	4625      	mov	r5, r4
 800bae2:	4628      	mov	r0, r5
 800bae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bae8:	f000 fc6a 	bl	800c3c0 <_malloc_usable_size_r>
 800baec:	4284      	cmp	r4, r0
 800baee:	4607      	mov	r7, r0
 800baf0:	d802      	bhi.n	800baf8 <_realloc_r+0x34>
 800baf2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800baf6:	d812      	bhi.n	800bb1e <_realloc_r+0x5a>
 800baf8:	4621      	mov	r1, r4
 800bafa:	4640      	mov	r0, r8
 800bafc:	f7ff fd9a 	bl	800b634 <_malloc_r>
 800bb00:	4605      	mov	r5, r0
 800bb02:	2800      	cmp	r0, #0
 800bb04:	d0ed      	beq.n	800bae2 <_realloc_r+0x1e>
 800bb06:	42bc      	cmp	r4, r7
 800bb08:	4622      	mov	r2, r4
 800bb0a:	4631      	mov	r1, r6
 800bb0c:	bf28      	it	cs
 800bb0e:	463a      	movcs	r2, r7
 800bb10:	f7ff f97c 	bl	800ae0c <memcpy>
 800bb14:	4631      	mov	r1, r6
 800bb16:	4640      	mov	r0, r8
 800bb18:	f7ff fd20 	bl	800b55c <_free_r>
 800bb1c:	e7e1      	b.n	800bae2 <_realloc_r+0x1e>
 800bb1e:	4635      	mov	r5, r6
 800bb20:	e7df      	b.n	800bae2 <_realloc_r+0x1e>

0800bb22 <__sfputc_r>:
 800bb22:	6893      	ldr	r3, [r2, #8]
 800bb24:	3b01      	subs	r3, #1
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	b410      	push	{r4}
 800bb2a:	6093      	str	r3, [r2, #8]
 800bb2c:	da08      	bge.n	800bb40 <__sfputc_r+0x1e>
 800bb2e:	6994      	ldr	r4, [r2, #24]
 800bb30:	42a3      	cmp	r3, r4
 800bb32:	db01      	blt.n	800bb38 <__sfputc_r+0x16>
 800bb34:	290a      	cmp	r1, #10
 800bb36:	d103      	bne.n	800bb40 <__sfputc_r+0x1e>
 800bb38:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb3c:	f000 b94a 	b.w	800bdd4 <__swbuf_r>
 800bb40:	6813      	ldr	r3, [r2, #0]
 800bb42:	1c58      	adds	r0, r3, #1
 800bb44:	6010      	str	r0, [r2, #0]
 800bb46:	7019      	strb	r1, [r3, #0]
 800bb48:	4608      	mov	r0, r1
 800bb4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb4e:	4770      	bx	lr

0800bb50 <__sfputs_r>:
 800bb50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb52:	4606      	mov	r6, r0
 800bb54:	460f      	mov	r7, r1
 800bb56:	4614      	mov	r4, r2
 800bb58:	18d5      	adds	r5, r2, r3
 800bb5a:	42ac      	cmp	r4, r5
 800bb5c:	d101      	bne.n	800bb62 <__sfputs_r+0x12>
 800bb5e:	2000      	movs	r0, #0
 800bb60:	e007      	b.n	800bb72 <__sfputs_r+0x22>
 800bb62:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb66:	463a      	mov	r2, r7
 800bb68:	4630      	mov	r0, r6
 800bb6a:	f7ff ffda 	bl	800bb22 <__sfputc_r>
 800bb6e:	1c43      	adds	r3, r0, #1
 800bb70:	d1f3      	bne.n	800bb5a <__sfputs_r+0xa>
 800bb72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bb74 <_vfiprintf_r>:
 800bb74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb78:	460d      	mov	r5, r1
 800bb7a:	b09d      	sub	sp, #116	; 0x74
 800bb7c:	4614      	mov	r4, r2
 800bb7e:	4698      	mov	r8, r3
 800bb80:	4606      	mov	r6, r0
 800bb82:	b118      	cbz	r0, 800bb8c <_vfiprintf_r+0x18>
 800bb84:	6983      	ldr	r3, [r0, #24]
 800bb86:	b90b      	cbnz	r3, 800bb8c <_vfiprintf_r+0x18>
 800bb88:	f000 fb14 	bl	800c1b4 <__sinit>
 800bb8c:	4b89      	ldr	r3, [pc, #548]	; (800bdb4 <_vfiprintf_r+0x240>)
 800bb8e:	429d      	cmp	r5, r3
 800bb90:	d11b      	bne.n	800bbca <_vfiprintf_r+0x56>
 800bb92:	6875      	ldr	r5, [r6, #4]
 800bb94:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bb96:	07d9      	lsls	r1, r3, #31
 800bb98:	d405      	bmi.n	800bba6 <_vfiprintf_r+0x32>
 800bb9a:	89ab      	ldrh	r3, [r5, #12]
 800bb9c:	059a      	lsls	r2, r3, #22
 800bb9e:	d402      	bmi.n	800bba6 <_vfiprintf_r+0x32>
 800bba0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bba2:	f000 fba5 	bl	800c2f0 <__retarget_lock_acquire_recursive>
 800bba6:	89ab      	ldrh	r3, [r5, #12]
 800bba8:	071b      	lsls	r3, r3, #28
 800bbaa:	d501      	bpl.n	800bbb0 <_vfiprintf_r+0x3c>
 800bbac:	692b      	ldr	r3, [r5, #16]
 800bbae:	b9eb      	cbnz	r3, 800bbec <_vfiprintf_r+0x78>
 800bbb0:	4629      	mov	r1, r5
 800bbb2:	4630      	mov	r0, r6
 800bbb4:	f000 f96e 	bl	800be94 <__swsetup_r>
 800bbb8:	b1c0      	cbz	r0, 800bbec <_vfiprintf_r+0x78>
 800bbba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bbbc:	07dc      	lsls	r4, r3, #31
 800bbbe:	d50e      	bpl.n	800bbde <_vfiprintf_r+0x6a>
 800bbc0:	f04f 30ff 	mov.w	r0, #4294967295
 800bbc4:	b01d      	add	sp, #116	; 0x74
 800bbc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbca:	4b7b      	ldr	r3, [pc, #492]	; (800bdb8 <_vfiprintf_r+0x244>)
 800bbcc:	429d      	cmp	r5, r3
 800bbce:	d101      	bne.n	800bbd4 <_vfiprintf_r+0x60>
 800bbd0:	68b5      	ldr	r5, [r6, #8]
 800bbd2:	e7df      	b.n	800bb94 <_vfiprintf_r+0x20>
 800bbd4:	4b79      	ldr	r3, [pc, #484]	; (800bdbc <_vfiprintf_r+0x248>)
 800bbd6:	429d      	cmp	r5, r3
 800bbd8:	bf08      	it	eq
 800bbda:	68f5      	ldreq	r5, [r6, #12]
 800bbdc:	e7da      	b.n	800bb94 <_vfiprintf_r+0x20>
 800bbde:	89ab      	ldrh	r3, [r5, #12]
 800bbe0:	0598      	lsls	r0, r3, #22
 800bbe2:	d4ed      	bmi.n	800bbc0 <_vfiprintf_r+0x4c>
 800bbe4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bbe6:	f000 fb84 	bl	800c2f2 <__retarget_lock_release_recursive>
 800bbea:	e7e9      	b.n	800bbc0 <_vfiprintf_r+0x4c>
 800bbec:	2300      	movs	r3, #0
 800bbee:	9309      	str	r3, [sp, #36]	; 0x24
 800bbf0:	2320      	movs	r3, #32
 800bbf2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bbf6:	f8cd 800c 	str.w	r8, [sp, #12]
 800bbfa:	2330      	movs	r3, #48	; 0x30
 800bbfc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bdc0 <_vfiprintf_r+0x24c>
 800bc00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bc04:	f04f 0901 	mov.w	r9, #1
 800bc08:	4623      	mov	r3, r4
 800bc0a:	469a      	mov	sl, r3
 800bc0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bc10:	b10a      	cbz	r2, 800bc16 <_vfiprintf_r+0xa2>
 800bc12:	2a25      	cmp	r2, #37	; 0x25
 800bc14:	d1f9      	bne.n	800bc0a <_vfiprintf_r+0x96>
 800bc16:	ebba 0b04 	subs.w	fp, sl, r4
 800bc1a:	d00b      	beq.n	800bc34 <_vfiprintf_r+0xc0>
 800bc1c:	465b      	mov	r3, fp
 800bc1e:	4622      	mov	r2, r4
 800bc20:	4629      	mov	r1, r5
 800bc22:	4630      	mov	r0, r6
 800bc24:	f7ff ff94 	bl	800bb50 <__sfputs_r>
 800bc28:	3001      	adds	r0, #1
 800bc2a:	f000 80aa 	beq.w	800bd82 <_vfiprintf_r+0x20e>
 800bc2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bc30:	445a      	add	r2, fp
 800bc32:	9209      	str	r2, [sp, #36]	; 0x24
 800bc34:	f89a 3000 	ldrb.w	r3, [sl]
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	f000 80a2 	beq.w	800bd82 <_vfiprintf_r+0x20e>
 800bc3e:	2300      	movs	r3, #0
 800bc40:	f04f 32ff 	mov.w	r2, #4294967295
 800bc44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bc48:	f10a 0a01 	add.w	sl, sl, #1
 800bc4c:	9304      	str	r3, [sp, #16]
 800bc4e:	9307      	str	r3, [sp, #28]
 800bc50:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bc54:	931a      	str	r3, [sp, #104]	; 0x68
 800bc56:	4654      	mov	r4, sl
 800bc58:	2205      	movs	r2, #5
 800bc5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc5e:	4858      	ldr	r0, [pc, #352]	; (800bdc0 <_vfiprintf_r+0x24c>)
 800bc60:	f7f4 fac6 	bl	80001f0 <memchr>
 800bc64:	9a04      	ldr	r2, [sp, #16]
 800bc66:	b9d8      	cbnz	r0, 800bca0 <_vfiprintf_r+0x12c>
 800bc68:	06d1      	lsls	r1, r2, #27
 800bc6a:	bf44      	itt	mi
 800bc6c:	2320      	movmi	r3, #32
 800bc6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc72:	0713      	lsls	r3, r2, #28
 800bc74:	bf44      	itt	mi
 800bc76:	232b      	movmi	r3, #43	; 0x2b
 800bc78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc7c:	f89a 3000 	ldrb.w	r3, [sl]
 800bc80:	2b2a      	cmp	r3, #42	; 0x2a
 800bc82:	d015      	beq.n	800bcb0 <_vfiprintf_r+0x13c>
 800bc84:	9a07      	ldr	r2, [sp, #28]
 800bc86:	4654      	mov	r4, sl
 800bc88:	2000      	movs	r0, #0
 800bc8a:	f04f 0c0a 	mov.w	ip, #10
 800bc8e:	4621      	mov	r1, r4
 800bc90:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bc94:	3b30      	subs	r3, #48	; 0x30
 800bc96:	2b09      	cmp	r3, #9
 800bc98:	d94e      	bls.n	800bd38 <_vfiprintf_r+0x1c4>
 800bc9a:	b1b0      	cbz	r0, 800bcca <_vfiprintf_r+0x156>
 800bc9c:	9207      	str	r2, [sp, #28]
 800bc9e:	e014      	b.n	800bcca <_vfiprintf_r+0x156>
 800bca0:	eba0 0308 	sub.w	r3, r0, r8
 800bca4:	fa09 f303 	lsl.w	r3, r9, r3
 800bca8:	4313      	orrs	r3, r2
 800bcaa:	9304      	str	r3, [sp, #16]
 800bcac:	46a2      	mov	sl, r4
 800bcae:	e7d2      	b.n	800bc56 <_vfiprintf_r+0xe2>
 800bcb0:	9b03      	ldr	r3, [sp, #12]
 800bcb2:	1d19      	adds	r1, r3, #4
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	9103      	str	r1, [sp, #12]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	bfbb      	ittet	lt
 800bcbc:	425b      	neglt	r3, r3
 800bcbe:	f042 0202 	orrlt.w	r2, r2, #2
 800bcc2:	9307      	strge	r3, [sp, #28]
 800bcc4:	9307      	strlt	r3, [sp, #28]
 800bcc6:	bfb8      	it	lt
 800bcc8:	9204      	strlt	r2, [sp, #16]
 800bcca:	7823      	ldrb	r3, [r4, #0]
 800bccc:	2b2e      	cmp	r3, #46	; 0x2e
 800bcce:	d10c      	bne.n	800bcea <_vfiprintf_r+0x176>
 800bcd0:	7863      	ldrb	r3, [r4, #1]
 800bcd2:	2b2a      	cmp	r3, #42	; 0x2a
 800bcd4:	d135      	bne.n	800bd42 <_vfiprintf_r+0x1ce>
 800bcd6:	9b03      	ldr	r3, [sp, #12]
 800bcd8:	1d1a      	adds	r2, r3, #4
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	9203      	str	r2, [sp, #12]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	bfb8      	it	lt
 800bce2:	f04f 33ff 	movlt.w	r3, #4294967295
 800bce6:	3402      	adds	r4, #2
 800bce8:	9305      	str	r3, [sp, #20]
 800bcea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bdd0 <_vfiprintf_r+0x25c>
 800bcee:	7821      	ldrb	r1, [r4, #0]
 800bcf0:	2203      	movs	r2, #3
 800bcf2:	4650      	mov	r0, sl
 800bcf4:	f7f4 fa7c 	bl	80001f0 <memchr>
 800bcf8:	b140      	cbz	r0, 800bd0c <_vfiprintf_r+0x198>
 800bcfa:	2340      	movs	r3, #64	; 0x40
 800bcfc:	eba0 000a 	sub.w	r0, r0, sl
 800bd00:	fa03 f000 	lsl.w	r0, r3, r0
 800bd04:	9b04      	ldr	r3, [sp, #16]
 800bd06:	4303      	orrs	r3, r0
 800bd08:	3401      	adds	r4, #1
 800bd0a:	9304      	str	r3, [sp, #16]
 800bd0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd10:	482c      	ldr	r0, [pc, #176]	; (800bdc4 <_vfiprintf_r+0x250>)
 800bd12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bd16:	2206      	movs	r2, #6
 800bd18:	f7f4 fa6a 	bl	80001f0 <memchr>
 800bd1c:	2800      	cmp	r0, #0
 800bd1e:	d03f      	beq.n	800bda0 <_vfiprintf_r+0x22c>
 800bd20:	4b29      	ldr	r3, [pc, #164]	; (800bdc8 <_vfiprintf_r+0x254>)
 800bd22:	bb1b      	cbnz	r3, 800bd6c <_vfiprintf_r+0x1f8>
 800bd24:	9b03      	ldr	r3, [sp, #12]
 800bd26:	3307      	adds	r3, #7
 800bd28:	f023 0307 	bic.w	r3, r3, #7
 800bd2c:	3308      	adds	r3, #8
 800bd2e:	9303      	str	r3, [sp, #12]
 800bd30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd32:	443b      	add	r3, r7
 800bd34:	9309      	str	r3, [sp, #36]	; 0x24
 800bd36:	e767      	b.n	800bc08 <_vfiprintf_r+0x94>
 800bd38:	fb0c 3202 	mla	r2, ip, r2, r3
 800bd3c:	460c      	mov	r4, r1
 800bd3e:	2001      	movs	r0, #1
 800bd40:	e7a5      	b.n	800bc8e <_vfiprintf_r+0x11a>
 800bd42:	2300      	movs	r3, #0
 800bd44:	3401      	adds	r4, #1
 800bd46:	9305      	str	r3, [sp, #20]
 800bd48:	4619      	mov	r1, r3
 800bd4a:	f04f 0c0a 	mov.w	ip, #10
 800bd4e:	4620      	mov	r0, r4
 800bd50:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd54:	3a30      	subs	r2, #48	; 0x30
 800bd56:	2a09      	cmp	r2, #9
 800bd58:	d903      	bls.n	800bd62 <_vfiprintf_r+0x1ee>
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d0c5      	beq.n	800bcea <_vfiprintf_r+0x176>
 800bd5e:	9105      	str	r1, [sp, #20]
 800bd60:	e7c3      	b.n	800bcea <_vfiprintf_r+0x176>
 800bd62:	fb0c 2101 	mla	r1, ip, r1, r2
 800bd66:	4604      	mov	r4, r0
 800bd68:	2301      	movs	r3, #1
 800bd6a:	e7f0      	b.n	800bd4e <_vfiprintf_r+0x1da>
 800bd6c:	ab03      	add	r3, sp, #12
 800bd6e:	9300      	str	r3, [sp, #0]
 800bd70:	462a      	mov	r2, r5
 800bd72:	4b16      	ldr	r3, [pc, #88]	; (800bdcc <_vfiprintf_r+0x258>)
 800bd74:	a904      	add	r1, sp, #16
 800bd76:	4630      	mov	r0, r6
 800bd78:	f7fd fdd8 	bl	800992c <_printf_float>
 800bd7c:	4607      	mov	r7, r0
 800bd7e:	1c78      	adds	r0, r7, #1
 800bd80:	d1d6      	bne.n	800bd30 <_vfiprintf_r+0x1bc>
 800bd82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bd84:	07d9      	lsls	r1, r3, #31
 800bd86:	d405      	bmi.n	800bd94 <_vfiprintf_r+0x220>
 800bd88:	89ab      	ldrh	r3, [r5, #12]
 800bd8a:	059a      	lsls	r2, r3, #22
 800bd8c:	d402      	bmi.n	800bd94 <_vfiprintf_r+0x220>
 800bd8e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bd90:	f000 faaf 	bl	800c2f2 <__retarget_lock_release_recursive>
 800bd94:	89ab      	ldrh	r3, [r5, #12]
 800bd96:	065b      	lsls	r3, r3, #25
 800bd98:	f53f af12 	bmi.w	800bbc0 <_vfiprintf_r+0x4c>
 800bd9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bd9e:	e711      	b.n	800bbc4 <_vfiprintf_r+0x50>
 800bda0:	ab03      	add	r3, sp, #12
 800bda2:	9300      	str	r3, [sp, #0]
 800bda4:	462a      	mov	r2, r5
 800bda6:	4b09      	ldr	r3, [pc, #36]	; (800bdcc <_vfiprintf_r+0x258>)
 800bda8:	a904      	add	r1, sp, #16
 800bdaa:	4630      	mov	r0, r6
 800bdac:	f7fe f862 	bl	8009e74 <_printf_i>
 800bdb0:	e7e4      	b.n	800bd7c <_vfiprintf_r+0x208>
 800bdb2:	bf00      	nop
 800bdb4:	0800dbc4 	.word	0x0800dbc4
 800bdb8:	0800dbe4 	.word	0x0800dbe4
 800bdbc:	0800dba4 	.word	0x0800dba4
 800bdc0:	0800da4c 	.word	0x0800da4c
 800bdc4:	0800da56 	.word	0x0800da56
 800bdc8:	0800992d 	.word	0x0800992d
 800bdcc:	0800bb51 	.word	0x0800bb51
 800bdd0:	0800da52 	.word	0x0800da52

0800bdd4 <__swbuf_r>:
 800bdd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdd6:	460e      	mov	r6, r1
 800bdd8:	4614      	mov	r4, r2
 800bdda:	4605      	mov	r5, r0
 800bddc:	b118      	cbz	r0, 800bde6 <__swbuf_r+0x12>
 800bdde:	6983      	ldr	r3, [r0, #24]
 800bde0:	b90b      	cbnz	r3, 800bde6 <__swbuf_r+0x12>
 800bde2:	f000 f9e7 	bl	800c1b4 <__sinit>
 800bde6:	4b21      	ldr	r3, [pc, #132]	; (800be6c <__swbuf_r+0x98>)
 800bde8:	429c      	cmp	r4, r3
 800bdea:	d12b      	bne.n	800be44 <__swbuf_r+0x70>
 800bdec:	686c      	ldr	r4, [r5, #4]
 800bdee:	69a3      	ldr	r3, [r4, #24]
 800bdf0:	60a3      	str	r3, [r4, #8]
 800bdf2:	89a3      	ldrh	r3, [r4, #12]
 800bdf4:	071a      	lsls	r2, r3, #28
 800bdf6:	d52f      	bpl.n	800be58 <__swbuf_r+0x84>
 800bdf8:	6923      	ldr	r3, [r4, #16]
 800bdfa:	b36b      	cbz	r3, 800be58 <__swbuf_r+0x84>
 800bdfc:	6923      	ldr	r3, [r4, #16]
 800bdfe:	6820      	ldr	r0, [r4, #0]
 800be00:	1ac0      	subs	r0, r0, r3
 800be02:	6963      	ldr	r3, [r4, #20]
 800be04:	b2f6      	uxtb	r6, r6
 800be06:	4283      	cmp	r3, r0
 800be08:	4637      	mov	r7, r6
 800be0a:	dc04      	bgt.n	800be16 <__swbuf_r+0x42>
 800be0c:	4621      	mov	r1, r4
 800be0e:	4628      	mov	r0, r5
 800be10:	f000 f93c 	bl	800c08c <_fflush_r>
 800be14:	bb30      	cbnz	r0, 800be64 <__swbuf_r+0x90>
 800be16:	68a3      	ldr	r3, [r4, #8]
 800be18:	3b01      	subs	r3, #1
 800be1a:	60a3      	str	r3, [r4, #8]
 800be1c:	6823      	ldr	r3, [r4, #0]
 800be1e:	1c5a      	adds	r2, r3, #1
 800be20:	6022      	str	r2, [r4, #0]
 800be22:	701e      	strb	r6, [r3, #0]
 800be24:	6963      	ldr	r3, [r4, #20]
 800be26:	3001      	adds	r0, #1
 800be28:	4283      	cmp	r3, r0
 800be2a:	d004      	beq.n	800be36 <__swbuf_r+0x62>
 800be2c:	89a3      	ldrh	r3, [r4, #12]
 800be2e:	07db      	lsls	r3, r3, #31
 800be30:	d506      	bpl.n	800be40 <__swbuf_r+0x6c>
 800be32:	2e0a      	cmp	r6, #10
 800be34:	d104      	bne.n	800be40 <__swbuf_r+0x6c>
 800be36:	4621      	mov	r1, r4
 800be38:	4628      	mov	r0, r5
 800be3a:	f000 f927 	bl	800c08c <_fflush_r>
 800be3e:	b988      	cbnz	r0, 800be64 <__swbuf_r+0x90>
 800be40:	4638      	mov	r0, r7
 800be42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be44:	4b0a      	ldr	r3, [pc, #40]	; (800be70 <__swbuf_r+0x9c>)
 800be46:	429c      	cmp	r4, r3
 800be48:	d101      	bne.n	800be4e <__swbuf_r+0x7a>
 800be4a:	68ac      	ldr	r4, [r5, #8]
 800be4c:	e7cf      	b.n	800bdee <__swbuf_r+0x1a>
 800be4e:	4b09      	ldr	r3, [pc, #36]	; (800be74 <__swbuf_r+0xa0>)
 800be50:	429c      	cmp	r4, r3
 800be52:	bf08      	it	eq
 800be54:	68ec      	ldreq	r4, [r5, #12]
 800be56:	e7ca      	b.n	800bdee <__swbuf_r+0x1a>
 800be58:	4621      	mov	r1, r4
 800be5a:	4628      	mov	r0, r5
 800be5c:	f000 f81a 	bl	800be94 <__swsetup_r>
 800be60:	2800      	cmp	r0, #0
 800be62:	d0cb      	beq.n	800bdfc <__swbuf_r+0x28>
 800be64:	f04f 37ff 	mov.w	r7, #4294967295
 800be68:	e7ea      	b.n	800be40 <__swbuf_r+0x6c>
 800be6a:	bf00      	nop
 800be6c:	0800dbc4 	.word	0x0800dbc4
 800be70:	0800dbe4 	.word	0x0800dbe4
 800be74:	0800dba4 	.word	0x0800dba4

0800be78 <__ascii_wctomb>:
 800be78:	b149      	cbz	r1, 800be8e <__ascii_wctomb+0x16>
 800be7a:	2aff      	cmp	r2, #255	; 0xff
 800be7c:	bf85      	ittet	hi
 800be7e:	238a      	movhi	r3, #138	; 0x8a
 800be80:	6003      	strhi	r3, [r0, #0]
 800be82:	700a      	strbls	r2, [r1, #0]
 800be84:	f04f 30ff 	movhi.w	r0, #4294967295
 800be88:	bf98      	it	ls
 800be8a:	2001      	movls	r0, #1
 800be8c:	4770      	bx	lr
 800be8e:	4608      	mov	r0, r1
 800be90:	4770      	bx	lr
	...

0800be94 <__swsetup_r>:
 800be94:	4b32      	ldr	r3, [pc, #200]	; (800bf60 <__swsetup_r+0xcc>)
 800be96:	b570      	push	{r4, r5, r6, lr}
 800be98:	681d      	ldr	r5, [r3, #0]
 800be9a:	4606      	mov	r6, r0
 800be9c:	460c      	mov	r4, r1
 800be9e:	b125      	cbz	r5, 800beaa <__swsetup_r+0x16>
 800bea0:	69ab      	ldr	r3, [r5, #24]
 800bea2:	b913      	cbnz	r3, 800beaa <__swsetup_r+0x16>
 800bea4:	4628      	mov	r0, r5
 800bea6:	f000 f985 	bl	800c1b4 <__sinit>
 800beaa:	4b2e      	ldr	r3, [pc, #184]	; (800bf64 <__swsetup_r+0xd0>)
 800beac:	429c      	cmp	r4, r3
 800beae:	d10f      	bne.n	800bed0 <__swsetup_r+0x3c>
 800beb0:	686c      	ldr	r4, [r5, #4]
 800beb2:	89a3      	ldrh	r3, [r4, #12]
 800beb4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800beb8:	0719      	lsls	r1, r3, #28
 800beba:	d42c      	bmi.n	800bf16 <__swsetup_r+0x82>
 800bebc:	06dd      	lsls	r5, r3, #27
 800bebe:	d411      	bmi.n	800bee4 <__swsetup_r+0x50>
 800bec0:	2309      	movs	r3, #9
 800bec2:	6033      	str	r3, [r6, #0]
 800bec4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bec8:	81a3      	strh	r3, [r4, #12]
 800beca:	f04f 30ff 	mov.w	r0, #4294967295
 800bece:	e03e      	b.n	800bf4e <__swsetup_r+0xba>
 800bed0:	4b25      	ldr	r3, [pc, #148]	; (800bf68 <__swsetup_r+0xd4>)
 800bed2:	429c      	cmp	r4, r3
 800bed4:	d101      	bne.n	800beda <__swsetup_r+0x46>
 800bed6:	68ac      	ldr	r4, [r5, #8]
 800bed8:	e7eb      	b.n	800beb2 <__swsetup_r+0x1e>
 800beda:	4b24      	ldr	r3, [pc, #144]	; (800bf6c <__swsetup_r+0xd8>)
 800bedc:	429c      	cmp	r4, r3
 800bede:	bf08      	it	eq
 800bee0:	68ec      	ldreq	r4, [r5, #12]
 800bee2:	e7e6      	b.n	800beb2 <__swsetup_r+0x1e>
 800bee4:	0758      	lsls	r0, r3, #29
 800bee6:	d512      	bpl.n	800bf0e <__swsetup_r+0x7a>
 800bee8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800beea:	b141      	cbz	r1, 800befe <__swsetup_r+0x6a>
 800beec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bef0:	4299      	cmp	r1, r3
 800bef2:	d002      	beq.n	800befa <__swsetup_r+0x66>
 800bef4:	4630      	mov	r0, r6
 800bef6:	f7ff fb31 	bl	800b55c <_free_r>
 800befa:	2300      	movs	r3, #0
 800befc:	6363      	str	r3, [r4, #52]	; 0x34
 800befe:	89a3      	ldrh	r3, [r4, #12]
 800bf00:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bf04:	81a3      	strh	r3, [r4, #12]
 800bf06:	2300      	movs	r3, #0
 800bf08:	6063      	str	r3, [r4, #4]
 800bf0a:	6923      	ldr	r3, [r4, #16]
 800bf0c:	6023      	str	r3, [r4, #0]
 800bf0e:	89a3      	ldrh	r3, [r4, #12]
 800bf10:	f043 0308 	orr.w	r3, r3, #8
 800bf14:	81a3      	strh	r3, [r4, #12]
 800bf16:	6923      	ldr	r3, [r4, #16]
 800bf18:	b94b      	cbnz	r3, 800bf2e <__swsetup_r+0x9a>
 800bf1a:	89a3      	ldrh	r3, [r4, #12]
 800bf1c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bf20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bf24:	d003      	beq.n	800bf2e <__swsetup_r+0x9a>
 800bf26:	4621      	mov	r1, r4
 800bf28:	4630      	mov	r0, r6
 800bf2a:	f000 fa09 	bl	800c340 <__smakebuf_r>
 800bf2e:	89a0      	ldrh	r0, [r4, #12]
 800bf30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bf34:	f010 0301 	ands.w	r3, r0, #1
 800bf38:	d00a      	beq.n	800bf50 <__swsetup_r+0xbc>
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	60a3      	str	r3, [r4, #8]
 800bf3e:	6963      	ldr	r3, [r4, #20]
 800bf40:	425b      	negs	r3, r3
 800bf42:	61a3      	str	r3, [r4, #24]
 800bf44:	6923      	ldr	r3, [r4, #16]
 800bf46:	b943      	cbnz	r3, 800bf5a <__swsetup_r+0xc6>
 800bf48:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bf4c:	d1ba      	bne.n	800bec4 <__swsetup_r+0x30>
 800bf4e:	bd70      	pop	{r4, r5, r6, pc}
 800bf50:	0781      	lsls	r1, r0, #30
 800bf52:	bf58      	it	pl
 800bf54:	6963      	ldrpl	r3, [r4, #20]
 800bf56:	60a3      	str	r3, [r4, #8]
 800bf58:	e7f4      	b.n	800bf44 <__swsetup_r+0xb0>
 800bf5a:	2000      	movs	r0, #0
 800bf5c:	e7f7      	b.n	800bf4e <__swsetup_r+0xba>
 800bf5e:	bf00      	nop
 800bf60:	20000028 	.word	0x20000028
 800bf64:	0800dbc4 	.word	0x0800dbc4
 800bf68:	0800dbe4 	.word	0x0800dbe4
 800bf6c:	0800dba4 	.word	0x0800dba4

0800bf70 <abort>:
 800bf70:	b508      	push	{r3, lr}
 800bf72:	2006      	movs	r0, #6
 800bf74:	f000 fa54 	bl	800c420 <raise>
 800bf78:	2001      	movs	r0, #1
 800bf7a:	f7f6 fc15 	bl	80027a8 <_exit>
	...

0800bf80 <__sflush_r>:
 800bf80:	898a      	ldrh	r2, [r1, #12]
 800bf82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf86:	4605      	mov	r5, r0
 800bf88:	0710      	lsls	r0, r2, #28
 800bf8a:	460c      	mov	r4, r1
 800bf8c:	d458      	bmi.n	800c040 <__sflush_r+0xc0>
 800bf8e:	684b      	ldr	r3, [r1, #4]
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	dc05      	bgt.n	800bfa0 <__sflush_r+0x20>
 800bf94:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	dc02      	bgt.n	800bfa0 <__sflush_r+0x20>
 800bf9a:	2000      	movs	r0, #0
 800bf9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfa0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bfa2:	2e00      	cmp	r6, #0
 800bfa4:	d0f9      	beq.n	800bf9a <__sflush_r+0x1a>
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bfac:	682f      	ldr	r7, [r5, #0]
 800bfae:	602b      	str	r3, [r5, #0]
 800bfb0:	d032      	beq.n	800c018 <__sflush_r+0x98>
 800bfb2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bfb4:	89a3      	ldrh	r3, [r4, #12]
 800bfb6:	075a      	lsls	r2, r3, #29
 800bfb8:	d505      	bpl.n	800bfc6 <__sflush_r+0x46>
 800bfba:	6863      	ldr	r3, [r4, #4]
 800bfbc:	1ac0      	subs	r0, r0, r3
 800bfbe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bfc0:	b10b      	cbz	r3, 800bfc6 <__sflush_r+0x46>
 800bfc2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bfc4:	1ac0      	subs	r0, r0, r3
 800bfc6:	2300      	movs	r3, #0
 800bfc8:	4602      	mov	r2, r0
 800bfca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bfcc:	6a21      	ldr	r1, [r4, #32]
 800bfce:	4628      	mov	r0, r5
 800bfd0:	47b0      	blx	r6
 800bfd2:	1c43      	adds	r3, r0, #1
 800bfd4:	89a3      	ldrh	r3, [r4, #12]
 800bfd6:	d106      	bne.n	800bfe6 <__sflush_r+0x66>
 800bfd8:	6829      	ldr	r1, [r5, #0]
 800bfda:	291d      	cmp	r1, #29
 800bfdc:	d82c      	bhi.n	800c038 <__sflush_r+0xb8>
 800bfde:	4a2a      	ldr	r2, [pc, #168]	; (800c088 <__sflush_r+0x108>)
 800bfe0:	40ca      	lsrs	r2, r1
 800bfe2:	07d6      	lsls	r6, r2, #31
 800bfe4:	d528      	bpl.n	800c038 <__sflush_r+0xb8>
 800bfe6:	2200      	movs	r2, #0
 800bfe8:	6062      	str	r2, [r4, #4]
 800bfea:	04d9      	lsls	r1, r3, #19
 800bfec:	6922      	ldr	r2, [r4, #16]
 800bfee:	6022      	str	r2, [r4, #0]
 800bff0:	d504      	bpl.n	800bffc <__sflush_r+0x7c>
 800bff2:	1c42      	adds	r2, r0, #1
 800bff4:	d101      	bne.n	800bffa <__sflush_r+0x7a>
 800bff6:	682b      	ldr	r3, [r5, #0]
 800bff8:	b903      	cbnz	r3, 800bffc <__sflush_r+0x7c>
 800bffa:	6560      	str	r0, [r4, #84]	; 0x54
 800bffc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bffe:	602f      	str	r7, [r5, #0]
 800c000:	2900      	cmp	r1, #0
 800c002:	d0ca      	beq.n	800bf9a <__sflush_r+0x1a>
 800c004:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c008:	4299      	cmp	r1, r3
 800c00a:	d002      	beq.n	800c012 <__sflush_r+0x92>
 800c00c:	4628      	mov	r0, r5
 800c00e:	f7ff faa5 	bl	800b55c <_free_r>
 800c012:	2000      	movs	r0, #0
 800c014:	6360      	str	r0, [r4, #52]	; 0x34
 800c016:	e7c1      	b.n	800bf9c <__sflush_r+0x1c>
 800c018:	6a21      	ldr	r1, [r4, #32]
 800c01a:	2301      	movs	r3, #1
 800c01c:	4628      	mov	r0, r5
 800c01e:	47b0      	blx	r6
 800c020:	1c41      	adds	r1, r0, #1
 800c022:	d1c7      	bne.n	800bfb4 <__sflush_r+0x34>
 800c024:	682b      	ldr	r3, [r5, #0]
 800c026:	2b00      	cmp	r3, #0
 800c028:	d0c4      	beq.n	800bfb4 <__sflush_r+0x34>
 800c02a:	2b1d      	cmp	r3, #29
 800c02c:	d001      	beq.n	800c032 <__sflush_r+0xb2>
 800c02e:	2b16      	cmp	r3, #22
 800c030:	d101      	bne.n	800c036 <__sflush_r+0xb6>
 800c032:	602f      	str	r7, [r5, #0]
 800c034:	e7b1      	b.n	800bf9a <__sflush_r+0x1a>
 800c036:	89a3      	ldrh	r3, [r4, #12]
 800c038:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c03c:	81a3      	strh	r3, [r4, #12]
 800c03e:	e7ad      	b.n	800bf9c <__sflush_r+0x1c>
 800c040:	690f      	ldr	r7, [r1, #16]
 800c042:	2f00      	cmp	r7, #0
 800c044:	d0a9      	beq.n	800bf9a <__sflush_r+0x1a>
 800c046:	0793      	lsls	r3, r2, #30
 800c048:	680e      	ldr	r6, [r1, #0]
 800c04a:	bf08      	it	eq
 800c04c:	694b      	ldreq	r3, [r1, #20]
 800c04e:	600f      	str	r7, [r1, #0]
 800c050:	bf18      	it	ne
 800c052:	2300      	movne	r3, #0
 800c054:	eba6 0807 	sub.w	r8, r6, r7
 800c058:	608b      	str	r3, [r1, #8]
 800c05a:	f1b8 0f00 	cmp.w	r8, #0
 800c05e:	dd9c      	ble.n	800bf9a <__sflush_r+0x1a>
 800c060:	6a21      	ldr	r1, [r4, #32]
 800c062:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c064:	4643      	mov	r3, r8
 800c066:	463a      	mov	r2, r7
 800c068:	4628      	mov	r0, r5
 800c06a:	47b0      	blx	r6
 800c06c:	2800      	cmp	r0, #0
 800c06e:	dc06      	bgt.n	800c07e <__sflush_r+0xfe>
 800c070:	89a3      	ldrh	r3, [r4, #12]
 800c072:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c076:	81a3      	strh	r3, [r4, #12]
 800c078:	f04f 30ff 	mov.w	r0, #4294967295
 800c07c:	e78e      	b.n	800bf9c <__sflush_r+0x1c>
 800c07e:	4407      	add	r7, r0
 800c080:	eba8 0800 	sub.w	r8, r8, r0
 800c084:	e7e9      	b.n	800c05a <__sflush_r+0xda>
 800c086:	bf00      	nop
 800c088:	20400001 	.word	0x20400001

0800c08c <_fflush_r>:
 800c08c:	b538      	push	{r3, r4, r5, lr}
 800c08e:	690b      	ldr	r3, [r1, #16]
 800c090:	4605      	mov	r5, r0
 800c092:	460c      	mov	r4, r1
 800c094:	b913      	cbnz	r3, 800c09c <_fflush_r+0x10>
 800c096:	2500      	movs	r5, #0
 800c098:	4628      	mov	r0, r5
 800c09a:	bd38      	pop	{r3, r4, r5, pc}
 800c09c:	b118      	cbz	r0, 800c0a6 <_fflush_r+0x1a>
 800c09e:	6983      	ldr	r3, [r0, #24]
 800c0a0:	b90b      	cbnz	r3, 800c0a6 <_fflush_r+0x1a>
 800c0a2:	f000 f887 	bl	800c1b4 <__sinit>
 800c0a6:	4b14      	ldr	r3, [pc, #80]	; (800c0f8 <_fflush_r+0x6c>)
 800c0a8:	429c      	cmp	r4, r3
 800c0aa:	d11b      	bne.n	800c0e4 <_fflush_r+0x58>
 800c0ac:	686c      	ldr	r4, [r5, #4]
 800c0ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d0ef      	beq.n	800c096 <_fflush_r+0xa>
 800c0b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c0b8:	07d0      	lsls	r0, r2, #31
 800c0ba:	d404      	bmi.n	800c0c6 <_fflush_r+0x3a>
 800c0bc:	0599      	lsls	r1, r3, #22
 800c0be:	d402      	bmi.n	800c0c6 <_fflush_r+0x3a>
 800c0c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c0c2:	f000 f915 	bl	800c2f0 <__retarget_lock_acquire_recursive>
 800c0c6:	4628      	mov	r0, r5
 800c0c8:	4621      	mov	r1, r4
 800c0ca:	f7ff ff59 	bl	800bf80 <__sflush_r>
 800c0ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c0d0:	07da      	lsls	r2, r3, #31
 800c0d2:	4605      	mov	r5, r0
 800c0d4:	d4e0      	bmi.n	800c098 <_fflush_r+0xc>
 800c0d6:	89a3      	ldrh	r3, [r4, #12]
 800c0d8:	059b      	lsls	r3, r3, #22
 800c0da:	d4dd      	bmi.n	800c098 <_fflush_r+0xc>
 800c0dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c0de:	f000 f908 	bl	800c2f2 <__retarget_lock_release_recursive>
 800c0e2:	e7d9      	b.n	800c098 <_fflush_r+0xc>
 800c0e4:	4b05      	ldr	r3, [pc, #20]	; (800c0fc <_fflush_r+0x70>)
 800c0e6:	429c      	cmp	r4, r3
 800c0e8:	d101      	bne.n	800c0ee <_fflush_r+0x62>
 800c0ea:	68ac      	ldr	r4, [r5, #8]
 800c0ec:	e7df      	b.n	800c0ae <_fflush_r+0x22>
 800c0ee:	4b04      	ldr	r3, [pc, #16]	; (800c100 <_fflush_r+0x74>)
 800c0f0:	429c      	cmp	r4, r3
 800c0f2:	bf08      	it	eq
 800c0f4:	68ec      	ldreq	r4, [r5, #12]
 800c0f6:	e7da      	b.n	800c0ae <_fflush_r+0x22>
 800c0f8:	0800dbc4 	.word	0x0800dbc4
 800c0fc:	0800dbe4 	.word	0x0800dbe4
 800c100:	0800dba4 	.word	0x0800dba4

0800c104 <std>:
 800c104:	2300      	movs	r3, #0
 800c106:	b510      	push	{r4, lr}
 800c108:	4604      	mov	r4, r0
 800c10a:	e9c0 3300 	strd	r3, r3, [r0]
 800c10e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c112:	6083      	str	r3, [r0, #8]
 800c114:	8181      	strh	r1, [r0, #12]
 800c116:	6643      	str	r3, [r0, #100]	; 0x64
 800c118:	81c2      	strh	r2, [r0, #14]
 800c11a:	6183      	str	r3, [r0, #24]
 800c11c:	4619      	mov	r1, r3
 800c11e:	2208      	movs	r2, #8
 800c120:	305c      	adds	r0, #92	; 0x5c
 800c122:	f7fd fb5b 	bl	80097dc <memset>
 800c126:	4b05      	ldr	r3, [pc, #20]	; (800c13c <std+0x38>)
 800c128:	6263      	str	r3, [r4, #36]	; 0x24
 800c12a:	4b05      	ldr	r3, [pc, #20]	; (800c140 <std+0x3c>)
 800c12c:	62a3      	str	r3, [r4, #40]	; 0x28
 800c12e:	4b05      	ldr	r3, [pc, #20]	; (800c144 <std+0x40>)
 800c130:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c132:	4b05      	ldr	r3, [pc, #20]	; (800c148 <std+0x44>)
 800c134:	6224      	str	r4, [r4, #32]
 800c136:	6323      	str	r3, [r4, #48]	; 0x30
 800c138:	bd10      	pop	{r4, pc}
 800c13a:	bf00      	nop
 800c13c:	0800c459 	.word	0x0800c459
 800c140:	0800c47b 	.word	0x0800c47b
 800c144:	0800c4b3 	.word	0x0800c4b3
 800c148:	0800c4d7 	.word	0x0800c4d7

0800c14c <_cleanup_r>:
 800c14c:	4901      	ldr	r1, [pc, #4]	; (800c154 <_cleanup_r+0x8>)
 800c14e:	f000 b8af 	b.w	800c2b0 <_fwalk_reent>
 800c152:	bf00      	nop
 800c154:	0800c08d 	.word	0x0800c08d

0800c158 <__sfmoreglue>:
 800c158:	b570      	push	{r4, r5, r6, lr}
 800c15a:	2268      	movs	r2, #104	; 0x68
 800c15c:	1e4d      	subs	r5, r1, #1
 800c15e:	4355      	muls	r5, r2
 800c160:	460e      	mov	r6, r1
 800c162:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c166:	f7ff fa65 	bl	800b634 <_malloc_r>
 800c16a:	4604      	mov	r4, r0
 800c16c:	b140      	cbz	r0, 800c180 <__sfmoreglue+0x28>
 800c16e:	2100      	movs	r1, #0
 800c170:	e9c0 1600 	strd	r1, r6, [r0]
 800c174:	300c      	adds	r0, #12
 800c176:	60a0      	str	r0, [r4, #8]
 800c178:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c17c:	f7fd fb2e 	bl	80097dc <memset>
 800c180:	4620      	mov	r0, r4
 800c182:	bd70      	pop	{r4, r5, r6, pc}

0800c184 <__sfp_lock_acquire>:
 800c184:	4801      	ldr	r0, [pc, #4]	; (800c18c <__sfp_lock_acquire+0x8>)
 800c186:	f000 b8b3 	b.w	800c2f0 <__retarget_lock_acquire_recursive>
 800c18a:	bf00      	nop
 800c18c:	200006b9 	.word	0x200006b9

0800c190 <__sfp_lock_release>:
 800c190:	4801      	ldr	r0, [pc, #4]	; (800c198 <__sfp_lock_release+0x8>)
 800c192:	f000 b8ae 	b.w	800c2f2 <__retarget_lock_release_recursive>
 800c196:	bf00      	nop
 800c198:	200006b9 	.word	0x200006b9

0800c19c <__sinit_lock_acquire>:
 800c19c:	4801      	ldr	r0, [pc, #4]	; (800c1a4 <__sinit_lock_acquire+0x8>)
 800c19e:	f000 b8a7 	b.w	800c2f0 <__retarget_lock_acquire_recursive>
 800c1a2:	bf00      	nop
 800c1a4:	200006ba 	.word	0x200006ba

0800c1a8 <__sinit_lock_release>:
 800c1a8:	4801      	ldr	r0, [pc, #4]	; (800c1b0 <__sinit_lock_release+0x8>)
 800c1aa:	f000 b8a2 	b.w	800c2f2 <__retarget_lock_release_recursive>
 800c1ae:	bf00      	nop
 800c1b0:	200006ba 	.word	0x200006ba

0800c1b4 <__sinit>:
 800c1b4:	b510      	push	{r4, lr}
 800c1b6:	4604      	mov	r4, r0
 800c1b8:	f7ff fff0 	bl	800c19c <__sinit_lock_acquire>
 800c1bc:	69a3      	ldr	r3, [r4, #24]
 800c1be:	b11b      	cbz	r3, 800c1c8 <__sinit+0x14>
 800c1c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c1c4:	f7ff bff0 	b.w	800c1a8 <__sinit_lock_release>
 800c1c8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c1cc:	6523      	str	r3, [r4, #80]	; 0x50
 800c1ce:	4b13      	ldr	r3, [pc, #76]	; (800c21c <__sinit+0x68>)
 800c1d0:	4a13      	ldr	r2, [pc, #76]	; (800c220 <__sinit+0x6c>)
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	62a2      	str	r2, [r4, #40]	; 0x28
 800c1d6:	42a3      	cmp	r3, r4
 800c1d8:	bf04      	itt	eq
 800c1da:	2301      	moveq	r3, #1
 800c1dc:	61a3      	streq	r3, [r4, #24]
 800c1de:	4620      	mov	r0, r4
 800c1e0:	f000 f820 	bl	800c224 <__sfp>
 800c1e4:	6060      	str	r0, [r4, #4]
 800c1e6:	4620      	mov	r0, r4
 800c1e8:	f000 f81c 	bl	800c224 <__sfp>
 800c1ec:	60a0      	str	r0, [r4, #8]
 800c1ee:	4620      	mov	r0, r4
 800c1f0:	f000 f818 	bl	800c224 <__sfp>
 800c1f4:	2200      	movs	r2, #0
 800c1f6:	60e0      	str	r0, [r4, #12]
 800c1f8:	2104      	movs	r1, #4
 800c1fa:	6860      	ldr	r0, [r4, #4]
 800c1fc:	f7ff ff82 	bl	800c104 <std>
 800c200:	68a0      	ldr	r0, [r4, #8]
 800c202:	2201      	movs	r2, #1
 800c204:	2109      	movs	r1, #9
 800c206:	f7ff ff7d 	bl	800c104 <std>
 800c20a:	68e0      	ldr	r0, [r4, #12]
 800c20c:	2202      	movs	r2, #2
 800c20e:	2112      	movs	r1, #18
 800c210:	f7ff ff78 	bl	800c104 <std>
 800c214:	2301      	movs	r3, #1
 800c216:	61a3      	str	r3, [r4, #24]
 800c218:	e7d2      	b.n	800c1c0 <__sinit+0xc>
 800c21a:	bf00      	nop
 800c21c:	0800d82c 	.word	0x0800d82c
 800c220:	0800c14d 	.word	0x0800c14d

0800c224 <__sfp>:
 800c224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c226:	4607      	mov	r7, r0
 800c228:	f7ff ffac 	bl	800c184 <__sfp_lock_acquire>
 800c22c:	4b1e      	ldr	r3, [pc, #120]	; (800c2a8 <__sfp+0x84>)
 800c22e:	681e      	ldr	r6, [r3, #0]
 800c230:	69b3      	ldr	r3, [r6, #24]
 800c232:	b913      	cbnz	r3, 800c23a <__sfp+0x16>
 800c234:	4630      	mov	r0, r6
 800c236:	f7ff ffbd 	bl	800c1b4 <__sinit>
 800c23a:	3648      	adds	r6, #72	; 0x48
 800c23c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c240:	3b01      	subs	r3, #1
 800c242:	d503      	bpl.n	800c24c <__sfp+0x28>
 800c244:	6833      	ldr	r3, [r6, #0]
 800c246:	b30b      	cbz	r3, 800c28c <__sfp+0x68>
 800c248:	6836      	ldr	r6, [r6, #0]
 800c24a:	e7f7      	b.n	800c23c <__sfp+0x18>
 800c24c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c250:	b9d5      	cbnz	r5, 800c288 <__sfp+0x64>
 800c252:	4b16      	ldr	r3, [pc, #88]	; (800c2ac <__sfp+0x88>)
 800c254:	60e3      	str	r3, [r4, #12]
 800c256:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c25a:	6665      	str	r5, [r4, #100]	; 0x64
 800c25c:	f000 f847 	bl	800c2ee <__retarget_lock_init_recursive>
 800c260:	f7ff ff96 	bl	800c190 <__sfp_lock_release>
 800c264:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c268:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c26c:	6025      	str	r5, [r4, #0]
 800c26e:	61a5      	str	r5, [r4, #24]
 800c270:	2208      	movs	r2, #8
 800c272:	4629      	mov	r1, r5
 800c274:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c278:	f7fd fab0 	bl	80097dc <memset>
 800c27c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c280:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c284:	4620      	mov	r0, r4
 800c286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c288:	3468      	adds	r4, #104	; 0x68
 800c28a:	e7d9      	b.n	800c240 <__sfp+0x1c>
 800c28c:	2104      	movs	r1, #4
 800c28e:	4638      	mov	r0, r7
 800c290:	f7ff ff62 	bl	800c158 <__sfmoreglue>
 800c294:	4604      	mov	r4, r0
 800c296:	6030      	str	r0, [r6, #0]
 800c298:	2800      	cmp	r0, #0
 800c29a:	d1d5      	bne.n	800c248 <__sfp+0x24>
 800c29c:	f7ff ff78 	bl	800c190 <__sfp_lock_release>
 800c2a0:	230c      	movs	r3, #12
 800c2a2:	603b      	str	r3, [r7, #0]
 800c2a4:	e7ee      	b.n	800c284 <__sfp+0x60>
 800c2a6:	bf00      	nop
 800c2a8:	0800d82c 	.word	0x0800d82c
 800c2ac:	ffff0001 	.word	0xffff0001

0800c2b0 <_fwalk_reent>:
 800c2b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c2b4:	4606      	mov	r6, r0
 800c2b6:	4688      	mov	r8, r1
 800c2b8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c2bc:	2700      	movs	r7, #0
 800c2be:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c2c2:	f1b9 0901 	subs.w	r9, r9, #1
 800c2c6:	d505      	bpl.n	800c2d4 <_fwalk_reent+0x24>
 800c2c8:	6824      	ldr	r4, [r4, #0]
 800c2ca:	2c00      	cmp	r4, #0
 800c2cc:	d1f7      	bne.n	800c2be <_fwalk_reent+0xe>
 800c2ce:	4638      	mov	r0, r7
 800c2d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c2d4:	89ab      	ldrh	r3, [r5, #12]
 800c2d6:	2b01      	cmp	r3, #1
 800c2d8:	d907      	bls.n	800c2ea <_fwalk_reent+0x3a>
 800c2da:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c2de:	3301      	adds	r3, #1
 800c2e0:	d003      	beq.n	800c2ea <_fwalk_reent+0x3a>
 800c2e2:	4629      	mov	r1, r5
 800c2e4:	4630      	mov	r0, r6
 800c2e6:	47c0      	blx	r8
 800c2e8:	4307      	orrs	r7, r0
 800c2ea:	3568      	adds	r5, #104	; 0x68
 800c2ec:	e7e9      	b.n	800c2c2 <_fwalk_reent+0x12>

0800c2ee <__retarget_lock_init_recursive>:
 800c2ee:	4770      	bx	lr

0800c2f0 <__retarget_lock_acquire_recursive>:
 800c2f0:	4770      	bx	lr

0800c2f2 <__retarget_lock_release_recursive>:
 800c2f2:	4770      	bx	lr

0800c2f4 <__swhatbuf_r>:
 800c2f4:	b570      	push	{r4, r5, r6, lr}
 800c2f6:	460e      	mov	r6, r1
 800c2f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2fc:	2900      	cmp	r1, #0
 800c2fe:	b096      	sub	sp, #88	; 0x58
 800c300:	4614      	mov	r4, r2
 800c302:	461d      	mov	r5, r3
 800c304:	da08      	bge.n	800c318 <__swhatbuf_r+0x24>
 800c306:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c30a:	2200      	movs	r2, #0
 800c30c:	602a      	str	r2, [r5, #0]
 800c30e:	061a      	lsls	r2, r3, #24
 800c310:	d410      	bmi.n	800c334 <__swhatbuf_r+0x40>
 800c312:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c316:	e00e      	b.n	800c336 <__swhatbuf_r+0x42>
 800c318:	466a      	mov	r2, sp
 800c31a:	f000 f903 	bl	800c524 <_fstat_r>
 800c31e:	2800      	cmp	r0, #0
 800c320:	dbf1      	blt.n	800c306 <__swhatbuf_r+0x12>
 800c322:	9a01      	ldr	r2, [sp, #4]
 800c324:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c328:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c32c:	425a      	negs	r2, r3
 800c32e:	415a      	adcs	r2, r3
 800c330:	602a      	str	r2, [r5, #0]
 800c332:	e7ee      	b.n	800c312 <__swhatbuf_r+0x1e>
 800c334:	2340      	movs	r3, #64	; 0x40
 800c336:	2000      	movs	r0, #0
 800c338:	6023      	str	r3, [r4, #0]
 800c33a:	b016      	add	sp, #88	; 0x58
 800c33c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c340 <__smakebuf_r>:
 800c340:	898b      	ldrh	r3, [r1, #12]
 800c342:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c344:	079d      	lsls	r5, r3, #30
 800c346:	4606      	mov	r6, r0
 800c348:	460c      	mov	r4, r1
 800c34a:	d507      	bpl.n	800c35c <__smakebuf_r+0x1c>
 800c34c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c350:	6023      	str	r3, [r4, #0]
 800c352:	6123      	str	r3, [r4, #16]
 800c354:	2301      	movs	r3, #1
 800c356:	6163      	str	r3, [r4, #20]
 800c358:	b002      	add	sp, #8
 800c35a:	bd70      	pop	{r4, r5, r6, pc}
 800c35c:	ab01      	add	r3, sp, #4
 800c35e:	466a      	mov	r2, sp
 800c360:	f7ff ffc8 	bl	800c2f4 <__swhatbuf_r>
 800c364:	9900      	ldr	r1, [sp, #0]
 800c366:	4605      	mov	r5, r0
 800c368:	4630      	mov	r0, r6
 800c36a:	f7ff f963 	bl	800b634 <_malloc_r>
 800c36e:	b948      	cbnz	r0, 800c384 <__smakebuf_r+0x44>
 800c370:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c374:	059a      	lsls	r2, r3, #22
 800c376:	d4ef      	bmi.n	800c358 <__smakebuf_r+0x18>
 800c378:	f023 0303 	bic.w	r3, r3, #3
 800c37c:	f043 0302 	orr.w	r3, r3, #2
 800c380:	81a3      	strh	r3, [r4, #12]
 800c382:	e7e3      	b.n	800c34c <__smakebuf_r+0xc>
 800c384:	4b0d      	ldr	r3, [pc, #52]	; (800c3bc <__smakebuf_r+0x7c>)
 800c386:	62b3      	str	r3, [r6, #40]	; 0x28
 800c388:	89a3      	ldrh	r3, [r4, #12]
 800c38a:	6020      	str	r0, [r4, #0]
 800c38c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c390:	81a3      	strh	r3, [r4, #12]
 800c392:	9b00      	ldr	r3, [sp, #0]
 800c394:	6163      	str	r3, [r4, #20]
 800c396:	9b01      	ldr	r3, [sp, #4]
 800c398:	6120      	str	r0, [r4, #16]
 800c39a:	b15b      	cbz	r3, 800c3b4 <__smakebuf_r+0x74>
 800c39c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c3a0:	4630      	mov	r0, r6
 800c3a2:	f000 f8d1 	bl	800c548 <_isatty_r>
 800c3a6:	b128      	cbz	r0, 800c3b4 <__smakebuf_r+0x74>
 800c3a8:	89a3      	ldrh	r3, [r4, #12]
 800c3aa:	f023 0303 	bic.w	r3, r3, #3
 800c3ae:	f043 0301 	orr.w	r3, r3, #1
 800c3b2:	81a3      	strh	r3, [r4, #12]
 800c3b4:	89a0      	ldrh	r0, [r4, #12]
 800c3b6:	4305      	orrs	r5, r0
 800c3b8:	81a5      	strh	r5, [r4, #12]
 800c3ba:	e7cd      	b.n	800c358 <__smakebuf_r+0x18>
 800c3bc:	0800c14d 	.word	0x0800c14d

0800c3c0 <_malloc_usable_size_r>:
 800c3c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c3c4:	1f18      	subs	r0, r3, #4
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	bfbc      	itt	lt
 800c3ca:	580b      	ldrlt	r3, [r1, r0]
 800c3cc:	18c0      	addlt	r0, r0, r3
 800c3ce:	4770      	bx	lr

0800c3d0 <_raise_r>:
 800c3d0:	291f      	cmp	r1, #31
 800c3d2:	b538      	push	{r3, r4, r5, lr}
 800c3d4:	4604      	mov	r4, r0
 800c3d6:	460d      	mov	r5, r1
 800c3d8:	d904      	bls.n	800c3e4 <_raise_r+0x14>
 800c3da:	2316      	movs	r3, #22
 800c3dc:	6003      	str	r3, [r0, #0]
 800c3de:	f04f 30ff 	mov.w	r0, #4294967295
 800c3e2:	bd38      	pop	{r3, r4, r5, pc}
 800c3e4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c3e6:	b112      	cbz	r2, 800c3ee <_raise_r+0x1e>
 800c3e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c3ec:	b94b      	cbnz	r3, 800c402 <_raise_r+0x32>
 800c3ee:	4620      	mov	r0, r4
 800c3f0:	f000 f830 	bl	800c454 <_getpid_r>
 800c3f4:	462a      	mov	r2, r5
 800c3f6:	4601      	mov	r1, r0
 800c3f8:	4620      	mov	r0, r4
 800c3fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c3fe:	f000 b817 	b.w	800c430 <_kill_r>
 800c402:	2b01      	cmp	r3, #1
 800c404:	d00a      	beq.n	800c41c <_raise_r+0x4c>
 800c406:	1c59      	adds	r1, r3, #1
 800c408:	d103      	bne.n	800c412 <_raise_r+0x42>
 800c40a:	2316      	movs	r3, #22
 800c40c:	6003      	str	r3, [r0, #0]
 800c40e:	2001      	movs	r0, #1
 800c410:	e7e7      	b.n	800c3e2 <_raise_r+0x12>
 800c412:	2400      	movs	r4, #0
 800c414:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c418:	4628      	mov	r0, r5
 800c41a:	4798      	blx	r3
 800c41c:	2000      	movs	r0, #0
 800c41e:	e7e0      	b.n	800c3e2 <_raise_r+0x12>

0800c420 <raise>:
 800c420:	4b02      	ldr	r3, [pc, #8]	; (800c42c <raise+0xc>)
 800c422:	4601      	mov	r1, r0
 800c424:	6818      	ldr	r0, [r3, #0]
 800c426:	f7ff bfd3 	b.w	800c3d0 <_raise_r>
 800c42a:	bf00      	nop
 800c42c:	20000028 	.word	0x20000028

0800c430 <_kill_r>:
 800c430:	b538      	push	{r3, r4, r5, lr}
 800c432:	4d07      	ldr	r5, [pc, #28]	; (800c450 <_kill_r+0x20>)
 800c434:	2300      	movs	r3, #0
 800c436:	4604      	mov	r4, r0
 800c438:	4608      	mov	r0, r1
 800c43a:	4611      	mov	r1, r2
 800c43c:	602b      	str	r3, [r5, #0]
 800c43e:	f7f6 f9a3 	bl	8002788 <_kill>
 800c442:	1c43      	adds	r3, r0, #1
 800c444:	d102      	bne.n	800c44c <_kill_r+0x1c>
 800c446:	682b      	ldr	r3, [r5, #0]
 800c448:	b103      	cbz	r3, 800c44c <_kill_r+0x1c>
 800c44a:	6023      	str	r3, [r4, #0]
 800c44c:	bd38      	pop	{r3, r4, r5, pc}
 800c44e:	bf00      	nop
 800c450:	200006b4 	.word	0x200006b4

0800c454 <_getpid_r>:
 800c454:	f7f6 b990 	b.w	8002778 <_getpid>

0800c458 <__sread>:
 800c458:	b510      	push	{r4, lr}
 800c45a:	460c      	mov	r4, r1
 800c45c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c460:	f000 f894 	bl	800c58c <_read_r>
 800c464:	2800      	cmp	r0, #0
 800c466:	bfab      	itete	ge
 800c468:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c46a:	89a3      	ldrhlt	r3, [r4, #12]
 800c46c:	181b      	addge	r3, r3, r0
 800c46e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c472:	bfac      	ite	ge
 800c474:	6563      	strge	r3, [r4, #84]	; 0x54
 800c476:	81a3      	strhlt	r3, [r4, #12]
 800c478:	bd10      	pop	{r4, pc}

0800c47a <__swrite>:
 800c47a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c47e:	461f      	mov	r7, r3
 800c480:	898b      	ldrh	r3, [r1, #12]
 800c482:	05db      	lsls	r3, r3, #23
 800c484:	4605      	mov	r5, r0
 800c486:	460c      	mov	r4, r1
 800c488:	4616      	mov	r6, r2
 800c48a:	d505      	bpl.n	800c498 <__swrite+0x1e>
 800c48c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c490:	2302      	movs	r3, #2
 800c492:	2200      	movs	r2, #0
 800c494:	f000 f868 	bl	800c568 <_lseek_r>
 800c498:	89a3      	ldrh	r3, [r4, #12]
 800c49a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c49e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c4a2:	81a3      	strh	r3, [r4, #12]
 800c4a4:	4632      	mov	r2, r6
 800c4a6:	463b      	mov	r3, r7
 800c4a8:	4628      	mov	r0, r5
 800c4aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c4ae:	f000 b817 	b.w	800c4e0 <_write_r>

0800c4b2 <__sseek>:
 800c4b2:	b510      	push	{r4, lr}
 800c4b4:	460c      	mov	r4, r1
 800c4b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c4ba:	f000 f855 	bl	800c568 <_lseek_r>
 800c4be:	1c43      	adds	r3, r0, #1
 800c4c0:	89a3      	ldrh	r3, [r4, #12]
 800c4c2:	bf15      	itete	ne
 800c4c4:	6560      	strne	r0, [r4, #84]	; 0x54
 800c4c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c4ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c4ce:	81a3      	strheq	r3, [r4, #12]
 800c4d0:	bf18      	it	ne
 800c4d2:	81a3      	strhne	r3, [r4, #12]
 800c4d4:	bd10      	pop	{r4, pc}

0800c4d6 <__sclose>:
 800c4d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c4da:	f000 b813 	b.w	800c504 <_close_r>
	...

0800c4e0 <_write_r>:
 800c4e0:	b538      	push	{r3, r4, r5, lr}
 800c4e2:	4d07      	ldr	r5, [pc, #28]	; (800c500 <_write_r+0x20>)
 800c4e4:	4604      	mov	r4, r0
 800c4e6:	4608      	mov	r0, r1
 800c4e8:	4611      	mov	r1, r2
 800c4ea:	2200      	movs	r2, #0
 800c4ec:	602a      	str	r2, [r5, #0]
 800c4ee:	461a      	mov	r2, r3
 800c4f0:	f7f6 f981 	bl	80027f6 <_write>
 800c4f4:	1c43      	adds	r3, r0, #1
 800c4f6:	d102      	bne.n	800c4fe <_write_r+0x1e>
 800c4f8:	682b      	ldr	r3, [r5, #0]
 800c4fa:	b103      	cbz	r3, 800c4fe <_write_r+0x1e>
 800c4fc:	6023      	str	r3, [r4, #0]
 800c4fe:	bd38      	pop	{r3, r4, r5, pc}
 800c500:	200006b4 	.word	0x200006b4

0800c504 <_close_r>:
 800c504:	b538      	push	{r3, r4, r5, lr}
 800c506:	4d06      	ldr	r5, [pc, #24]	; (800c520 <_close_r+0x1c>)
 800c508:	2300      	movs	r3, #0
 800c50a:	4604      	mov	r4, r0
 800c50c:	4608      	mov	r0, r1
 800c50e:	602b      	str	r3, [r5, #0]
 800c510:	f7f6 f98d 	bl	800282e <_close>
 800c514:	1c43      	adds	r3, r0, #1
 800c516:	d102      	bne.n	800c51e <_close_r+0x1a>
 800c518:	682b      	ldr	r3, [r5, #0]
 800c51a:	b103      	cbz	r3, 800c51e <_close_r+0x1a>
 800c51c:	6023      	str	r3, [r4, #0]
 800c51e:	bd38      	pop	{r3, r4, r5, pc}
 800c520:	200006b4 	.word	0x200006b4

0800c524 <_fstat_r>:
 800c524:	b538      	push	{r3, r4, r5, lr}
 800c526:	4d07      	ldr	r5, [pc, #28]	; (800c544 <_fstat_r+0x20>)
 800c528:	2300      	movs	r3, #0
 800c52a:	4604      	mov	r4, r0
 800c52c:	4608      	mov	r0, r1
 800c52e:	4611      	mov	r1, r2
 800c530:	602b      	str	r3, [r5, #0]
 800c532:	f7f6 f988 	bl	8002846 <_fstat>
 800c536:	1c43      	adds	r3, r0, #1
 800c538:	d102      	bne.n	800c540 <_fstat_r+0x1c>
 800c53a:	682b      	ldr	r3, [r5, #0]
 800c53c:	b103      	cbz	r3, 800c540 <_fstat_r+0x1c>
 800c53e:	6023      	str	r3, [r4, #0]
 800c540:	bd38      	pop	{r3, r4, r5, pc}
 800c542:	bf00      	nop
 800c544:	200006b4 	.word	0x200006b4

0800c548 <_isatty_r>:
 800c548:	b538      	push	{r3, r4, r5, lr}
 800c54a:	4d06      	ldr	r5, [pc, #24]	; (800c564 <_isatty_r+0x1c>)
 800c54c:	2300      	movs	r3, #0
 800c54e:	4604      	mov	r4, r0
 800c550:	4608      	mov	r0, r1
 800c552:	602b      	str	r3, [r5, #0]
 800c554:	f7f6 f987 	bl	8002866 <_isatty>
 800c558:	1c43      	adds	r3, r0, #1
 800c55a:	d102      	bne.n	800c562 <_isatty_r+0x1a>
 800c55c:	682b      	ldr	r3, [r5, #0]
 800c55e:	b103      	cbz	r3, 800c562 <_isatty_r+0x1a>
 800c560:	6023      	str	r3, [r4, #0]
 800c562:	bd38      	pop	{r3, r4, r5, pc}
 800c564:	200006b4 	.word	0x200006b4

0800c568 <_lseek_r>:
 800c568:	b538      	push	{r3, r4, r5, lr}
 800c56a:	4d07      	ldr	r5, [pc, #28]	; (800c588 <_lseek_r+0x20>)
 800c56c:	4604      	mov	r4, r0
 800c56e:	4608      	mov	r0, r1
 800c570:	4611      	mov	r1, r2
 800c572:	2200      	movs	r2, #0
 800c574:	602a      	str	r2, [r5, #0]
 800c576:	461a      	mov	r2, r3
 800c578:	f7f6 f980 	bl	800287c <_lseek>
 800c57c:	1c43      	adds	r3, r0, #1
 800c57e:	d102      	bne.n	800c586 <_lseek_r+0x1e>
 800c580:	682b      	ldr	r3, [r5, #0]
 800c582:	b103      	cbz	r3, 800c586 <_lseek_r+0x1e>
 800c584:	6023      	str	r3, [r4, #0]
 800c586:	bd38      	pop	{r3, r4, r5, pc}
 800c588:	200006b4 	.word	0x200006b4

0800c58c <_read_r>:
 800c58c:	b538      	push	{r3, r4, r5, lr}
 800c58e:	4d07      	ldr	r5, [pc, #28]	; (800c5ac <_read_r+0x20>)
 800c590:	4604      	mov	r4, r0
 800c592:	4608      	mov	r0, r1
 800c594:	4611      	mov	r1, r2
 800c596:	2200      	movs	r2, #0
 800c598:	602a      	str	r2, [r5, #0]
 800c59a:	461a      	mov	r2, r3
 800c59c:	f7f6 f90e 	bl	80027bc <_read>
 800c5a0:	1c43      	adds	r3, r0, #1
 800c5a2:	d102      	bne.n	800c5aa <_read_r+0x1e>
 800c5a4:	682b      	ldr	r3, [r5, #0]
 800c5a6:	b103      	cbz	r3, 800c5aa <_read_r+0x1e>
 800c5a8:	6023      	str	r3, [r4, #0]
 800c5aa:	bd38      	pop	{r3, r4, r5, pc}
 800c5ac:	200006b4 	.word	0x200006b4

0800c5b0 <trunc>:
 800c5b0:	ec51 0b10 	vmov	r0, r1, d0
 800c5b4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c5b8:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800c5bc:	2b13      	cmp	r3, #19
 800c5be:	b5d0      	push	{r4, r6, r7, lr}
 800c5c0:	460c      	mov	r4, r1
 800c5c2:	dc10      	bgt.n	800c5e6 <trunc+0x36>
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	bfa5      	ittet	ge
 800c5c8:	4a11      	ldrge	r2, [pc, #68]	; (800c610 <trunc+0x60>)
 800c5ca:	fa42 f303 	asrge.w	r3, r2, r3
 800c5ce:	2100      	movlt	r1, #0
 800c5d0:	2100      	movge	r1, #0
 800c5d2:	bfb9      	ittee	lt
 800c5d4:	2000      	movlt	r0, #0
 800c5d6:	f004 4100 	andlt.w	r1, r4, #2147483648	; 0x80000000
 800c5da:	2000      	movge	r0, #0
 800c5dc:	ea24 0103 	bicge.w	r1, r4, r3
 800c5e0:	ec41 0b10 	vmov	d0, r0, r1
 800c5e4:	bdd0      	pop	{r4, r6, r7, pc}
 800c5e6:	2b33      	cmp	r3, #51	; 0x33
 800c5e8:	dd08      	ble.n	800c5fc <trunc+0x4c>
 800c5ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c5ee:	d1f7      	bne.n	800c5e0 <trunc+0x30>
 800c5f0:	ee10 2a10 	vmov	r2, s0
 800c5f4:	460b      	mov	r3, r1
 800c5f6:	f7f3 fe51 	bl	800029c <__adddf3>
 800c5fa:	e7f1      	b.n	800c5e0 <trunc+0x30>
 800c5fc:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800c600:	f04f 33ff 	mov.w	r3, #4294967295
 800c604:	fa23 f202 	lsr.w	r2, r3, r2
 800c608:	ea20 0602 	bic.w	r6, r0, r2
 800c60c:	4630      	mov	r0, r6
 800c60e:	e7e7      	b.n	800c5e0 <trunc+0x30>
 800c610:	000fffff 	.word	0x000fffff

0800c614 <ceilf>:
 800c614:	ee10 3a10 	vmov	r3, s0
 800c618:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c61c:	3a7f      	subs	r2, #127	; 0x7f
 800c61e:	2a16      	cmp	r2, #22
 800c620:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c624:	dc2a      	bgt.n	800c67c <ceilf+0x68>
 800c626:	2a00      	cmp	r2, #0
 800c628:	da11      	bge.n	800c64e <ceilf+0x3a>
 800c62a:	eddf 7a19 	vldr	s15, [pc, #100]	; 800c690 <ceilf+0x7c>
 800c62e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c632:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c636:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c63a:	dd05      	ble.n	800c648 <ceilf+0x34>
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	db23      	blt.n	800c688 <ceilf+0x74>
 800c640:	2900      	cmp	r1, #0
 800c642:	bf18      	it	ne
 800c644:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 800c648:	ee00 3a10 	vmov	s0, r3
 800c64c:	4770      	bx	lr
 800c64e:	4911      	ldr	r1, [pc, #68]	; (800c694 <ceilf+0x80>)
 800c650:	4111      	asrs	r1, r2
 800c652:	420b      	tst	r3, r1
 800c654:	d0fa      	beq.n	800c64c <ceilf+0x38>
 800c656:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800c690 <ceilf+0x7c>
 800c65a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c65e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c666:	ddef      	ble.n	800c648 <ceilf+0x34>
 800c668:	2b00      	cmp	r3, #0
 800c66a:	bfc2      	ittt	gt
 800c66c:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 800c670:	fa40 f202 	asrgt.w	r2, r0, r2
 800c674:	189b      	addgt	r3, r3, r2
 800c676:	ea23 0301 	bic.w	r3, r3, r1
 800c67a:	e7e5      	b.n	800c648 <ceilf+0x34>
 800c67c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800c680:	d3e4      	bcc.n	800c64c <ceilf+0x38>
 800c682:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c686:	4770      	bx	lr
 800c688:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c68c:	e7dc      	b.n	800c648 <ceilf+0x34>
 800c68e:	bf00      	nop
 800c690:	7149f2ca 	.word	0x7149f2ca
 800c694:	007fffff 	.word	0x007fffff

0800c698 <_init>:
 800c698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c69a:	bf00      	nop
 800c69c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c69e:	bc08      	pop	{r3}
 800c6a0:	469e      	mov	lr, r3
 800c6a2:	4770      	bx	lr

0800c6a4 <_fini>:
 800c6a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6a6:	bf00      	nop
 800c6a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c6aa:	bc08      	pop	{r3}
 800c6ac:	469e      	mov	lr, r3
 800c6ae:	4770      	bx	lr
